// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 7463 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 15684 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 15684 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 15684 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 15684 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 15684 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 15684 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 15684 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 15684 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 15684 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 15684 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 15684 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 15684 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 54480 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: LD_INT 21
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PPUSH
2635: CALL_OW 69
2639: PUSH
2640: FOR_IN
2641: IFFALSE 2678
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2643: LD_VAR 0 2
2647: PPUSH
2648: LD_INT 6
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: LD_INT 8
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_OWVAR 67
2670: ARRAY
2671: PPUSH
2672: CALL_OW 241
2676: GO 2640
2678: POP
2679: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 32
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 69
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2791
// begin if GetBWeapon ( i ) = us_radar then
2703: LD_VAR 0 2
2707: PPUSH
2708: CALL_OW 269
2712: PUSH
2713: LD_INT 11
2715: EQUAL
2716: IFFALSE 2741
// begin uc_nation := 0 ;
2718: LD_ADDR_OWVAR 21
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 16
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: CALL_OW 380
// end else
2739: GO 2775
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2741: LD_INT 0
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 5
2749: PUSH
2750: LD_INT 6
2752: PUSH
2753: LD_INT 7
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_OWVAR 67
2769: ARRAY
2770: PPUSH
2771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2775: CALL_OW 44
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: CALL_OW 52
// end ;
2789: GO 2700
2791: POP
2792: POP
// b := HexInfo ( 74 , 120 ) ;
2793: LD_ADDR_VAR 0 3
2797: PUSH
2798: LD_INT 74
2800: PPUSH
2801: LD_INT 120
2803: PPUSH
2804: CALL_OW 428
2808: ST_TO_ADDR
// uc_nation := 1 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 1
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: LD_INT 4
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: PUSH
2845: LD_OWVAR 67
2849: ARRAY
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2904
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 5
2862: PUSH
2863: LD_INT 6
2865: PUSH
2866: LD_INT 7
2868: PUSH
2869: LD_INT 8
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: PUSH
2878: LD_OWVAR 67
2882: ARRAY
2883: PPUSH
2884: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2888: CALL_OW 44
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 52
// end ;
2902: GO 2851
2904: POP
2905: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: CALL_OW 313
2915: PPUSH
2916: LD_INT 5
2918: PPUSH
2919: CALL_OW 336
// for i := 1 to 6 do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_INT 6
2935: PUSH
2936: FOR_TO
2937: IFFALSE 2987
// begin PrepareHuman ( false , 4 , 6 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: LD_INT 6
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_INT 32
2959: PUSH
2960: LD_INT 33
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: MOD
2975: PUSH
2976: LD_INT 1
2978: PLUS
2979: ARRAY
2980: PPUSH
2981: CALL_OW 52
// end ;
2985: GO 2936
2987: POP
2988: POP
// for i := 1 to 3 do
2989: LD_ADDR_VAR 0 2
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3032
// begin PrepareHuman ( false , 3 , 6 ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 3
3010: PPUSH
3011: LD_INT 6
3013: PPUSH
3014: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3018: CALL_OW 44
3022: PPUSH
3023: LD_INT 25
3025: PPUSH
3026: CALL_OW 52
// end ;
3030: GO 3002
3032: POP
3033: POP
// for i := 1 to 3 do
3034: LD_ADDR_VAR 0 2
3038: PUSH
3039: DOUBLE
3040: LD_INT 1
3042: DEC
3043: ST_TO_ADDR
3044: LD_INT 3
3046: PUSH
3047: FOR_TO
3048: IFFALSE 3106
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3050: LD_INT 0
3052: PPUSH
3053: LD_INT 3
3055: PPUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: LD_INT 7
3064: PUSH
3065: LD_INT 7
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_OWVAR 67
3078: ARRAY
3079: PPUSH
3080: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3084: CALL_OW 44
3088: PPUSH
3089: LD_INT 78
3091: PPUSH
3092: LD_INT 130
3094: PPUSH
3095: CALL_OW 428
3099: PPUSH
3100: CALL_OW 52
// end ;
3104: GO 3047
3106: POP
3107: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 1
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 3
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: LD_OWVAR 67
3140: ARRAY
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3230
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_INT 13
3156: PPUSH
3157: LD_INT 100
3159: PPUSH
3160: CALL 20667 0 5
// veh := CreateVehicle ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: CALL_OW 45
3173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3174: LD_VAR 0 4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3186: LD_VAR 0 4
3190: PPUSH
3191: LD_INT 9
3193: PPUSH
3194: LD_INT 0
3196: PPUSH
3197: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 3
3206: PPUSH
3207: LD_INT 6
3209: PPUSH
3210: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3214: CALL_OW 44
3218: PPUSH
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 52
// end ;
3228: GO 3142
3230: POP
3231: POP
// InitHc ;
3232: CALL_OW 19
// hc_gallery := sandar ;
3236: LD_ADDR_OWVAR 33
3240: PUSH
3241: LD_STRING sandar
3243: ST_TO_ADDR
// hc_face_number := 38 ;
3244: LD_ADDR_OWVAR 34
3248: PUSH
3249: LD_INT 38
3251: ST_TO_ADDR
// hc_name := Doug Callahan ;
3252: LD_ADDR_OWVAR 26
3256: PUSH
3257: LD_STRING Doug Callahan
3259: ST_TO_ADDR
// hc_class := class_engineer ;
3260: LD_ADDR_OWVAR 28
3264: PUSH
3265: LD_INT 2
3267: ST_TO_ADDR
// hc_sex := sex_male ;
3268: LD_ADDR_OWVAR 27
3272: PUSH
3273: LD_INT 1
3275: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3276: LD_ADDR_OWVAR 29
3280: PUSH
3281: LD_INT 10
3283: PUSH
3284: LD_INT 11
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3291: LD_ADDR_OWVAR 30
3295: PUSH
3296: LD_INT 2
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 0
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3314: LD_ADDR_OWVAR 31
3318: PUSH
3319: LD_INT 4
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: LD_INT 3
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: ST_TO_ADDR
// usCommander := CreateHuman ;
3337: LD_ADDR_EXP 30
3341: PUSH
3342: CALL_OW 44
3346: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3347: LD_EXP 30
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3359: LD_INT 2
3361: PPUSH
3362: LD_EXP 30
3366: PPUSH
3367: CALL_OW 471
// InitHC_All ( ) ;
3371: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: LD_INT 12
3386: PPUSH
3387: LD_INT 100
3389: PPUSH
3390: CALL 20667 0 5
// usCargo := CreateVehicle ;
3394: LD_ADDR_EXP 32
3398: PUSH
3399: CALL_OW 45
3403: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3404: LD_EXP 32
3408: PPUSH
3409: LD_INT 81
3411: PPUSH
3412: LD_INT 143
3414: PPUSH
3415: LD_INT 0
3417: PPUSH
3418: CALL_OW 48
// Connect ( usCargo ) ;
3422: LD_EXP 32
3426: PPUSH
3427: CALL 23758 0 1
// DoNotAttack ( 5 , usCargo ) ;
3431: LD_INT 5
3433: PPUSH
3434: LD_EXP 32
3438: PPUSH
3439: CALL_OW 471
// end ;
3443: LD_VAR 0 1
3447: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3448: LD_EXP 31
3452: NOT
3453: PUSH
3454: LD_EXP 6
3458: AND
3459: PUSH
3460: LD_INT 25
3462: PPUSH
3463: CALL_OW 302
3467: AND
3468: PUSH
3469: LD_INT 25
3471: PPUSH
3472: CALL_OW 461
3476: PUSH
3477: LD_INT 2
3479: EQUAL
3480: AND
3481: IFFALSE 3638
3483: GO 3485
3485: DISABLE
3486: LD_INT 0
3488: PPUSH
3489: PPUSH
3490: PPUSH
// begin enable ;
3491: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 4
3504: PUSH
3505: LD_INT 5
3507: PUSH
3508: LD_INT 6
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: PUSH
3520: LD_OWVAR 67
3524: ARRAY
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3636
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 3
3539: PUSH
3540: LD_INT 4
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 1
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: CALL_OW 12
3558: ARRAY
3559: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3560: LD_VAR 0 2
3564: PUSH
3565: LD_INT 4
3567: EQUAL
3568: IFFALSE 3580
// weapon := us_heavy_gun else
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_INT 6
3577: ST_TO_ADDR
3578: GO 3611
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_INT 5
3587: PUSH
3588: LD_INT 7
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3611: LD_INT 25
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: LD_INT 1
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: LD_VAR 0 3
3629: PPUSH
3630: CALL_OW 185
// end ;
3634: GO 3526
3636: POP
3637: POP
// end ;
3638: PPOPN 3
3640: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3641: LD_EXP 31
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 6
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: LD_OWVAR 67
3668: ARRAY
3669: GREATEREQUAL
3670: IFFALSE 3781
3672: GO 3674
3674: DISABLE
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
// begin enable ;
3679: ENABLE
// tmp := usForces ;
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: LD_EXP 31
3689: ST_TO_ADDR
// usForces := [ ] ;
3690: LD_ADDR_EXP 31
3694: PUSH
3695: EMPTY
3696: ST_TO_ADDR
// if not tmp then
3697: LD_VAR 0 2
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 3781
// repeat wait ( 0 0$1 ) ;
3706: LD_INT 35
3708: PPUSH
3709: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3713: LD_ADDR_VAR 0 2
3717: PUSH
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 98
3725: PUSH
3726: LD_INT 50
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 114
3735: PUSH
3736: LD_INT 50
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 127
3745: PUSH
3746: LD_INT 51
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 131
3755: PUSH
3756: LD_INT 35
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL 55723 0 2
3773: ST_TO_ADDR
// until not tmp ;
3774: LD_VAR 0 2
3778: NOT
3779: IFFALSE 3706
// end ;
3781: PPOPN 2
3783: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3784: LD_EXP 3
3788: PUSH
3789: LD_EXP 5
3793: NOT
3794: AND
3795: PUSH
3796: LD_INT 11
3798: PPUSH
3799: LD_INT 22
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 70
3813: AND
3814: IFFALSE 3935
3816: GO 3818
3818: DISABLE
3819: LD_INT 0
3821: PPUSH
3822: PPUSH
3823: PPUSH
// begin uc_side := 1 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 1
3831: ST_TO_ADDR
// uc_nation := 1 ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// tmp := [ ] ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: EMPTY
3846: ST_TO_ADDR
// for i := 1 to 2 do
3847: LD_ADDR_VAR 0 1
3851: PUSH
3852: DOUBLE
3853: LD_INT 1
3855: DEC
3856: ST_TO_ADDR
3857: LD_INT 2
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3933
// begin PrepareSoldier ( false , 7 ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 7
3868: PPUSH
3869: CALL_OW 381
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 130
3890: PPUSH
3891: LD_INT 153
3893: PPUSH
3894: LD_INT 3
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3916: LD_VAR 0 2
3920: PPUSH
3921: LD_INT 108
3923: PPUSH
3924: LD_INT 108
3926: PPUSH
3927: CALL_OW 174
// end ;
3931: GO 3860
3933: POP
3934: POP
// end ;
3935: PPOPN 3
3937: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3938: LD_EXP 3
3942: PUSH
3943: LD_EXP 5
3947: NOT
3948: AND
3949: PUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 70
3967: AND
3968: IFFALSE 4089
3970: GO 3972
3972: DISABLE
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
// begin uc_side := 1 ;
3978: LD_ADDR_OWVAR 20
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// uc_nation := 1 ;
3986: LD_ADDR_OWVAR 21
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// tmp := [ ] ;
3994: LD_ADDR_VAR 0 3
3998: PUSH
3999: EMPTY
4000: ST_TO_ADDR
// for i := 1 to 2 do
4001: LD_ADDR_VAR 0 1
4005: PUSH
4006: DOUBLE
4007: LD_INT 1
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4087
// begin PrepareSoldier ( false , 7 ) ;
4017: LD_INT 0
4019: PPUSH
4020: LD_INT 7
4022: PPUSH
4023: CALL_OW 381
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4037: LD_VAR 0 2
4041: PPUSH
4042: LD_INT 56
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 5
4065: PPUSH
4066: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4070: LD_VAR 0 2
4074: PPUSH
4075: LD_INT 72
4077: PPUSH
4078: LD_INT 92
4080: PPUSH
4081: CALL_OW 174
// end ;
4085: GO 4014
4087: POP
4088: POP
// end ;
4089: PPOPN 3
4091: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4092: LD_EXP 32
4096: PPUSH
4097: CALL_OW 302
4101: PUSH
4102: LD_EXP 7
4106: NOT
4107: AND
4108: IFFALSE 4371
4110: GO 4112
4112: DISABLE
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
// begin enable ;
4117: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 16
4125: PPUSH
4126: LD_INT 81
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 70
4150: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 435
4163: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4164: LD_EXP 32
4168: PPUSH
4169: CALL_OW 261
4173: PUSH
4174: LD_INT 10
4176: LESS
4177: PUSH
4178: LD_INT 2
4180: PPUSH
4181: LD_EXP 32
4185: PPUSH
4186: CALL_OW 292
4190: NOT
4191: AND
4192: IFFALSE 4206
// SetFuel ( usCargo , 100 ) ;
4194: LD_EXP 32
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4206: LD_EXP 32
4210: PPUSH
4211: CALL_OW 314
4215: NOT
4216: PUSH
4217: LD_EXP 32
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 289
4229: PUSH
4230: LD_INT 100
4232: LESS
4233: AND
4234: PUSH
4235: LD_VAR 0 2
4239: NOT
4240: AND
4241: IFFALSE 4307
// begin if cr then
4243: LD_VAR 0 1
4247: IFFALSE 4278
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4249: LD_EXP 32
4253: PPUSH
4254: LD_VAR 0 1
4258: PUSH
4259: LD_INT 1
4261: ARRAY
4262: PPUSH
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 2
4270: ARRAY
4271: PPUSH
4272: CALL_OW 117
4276: GO 4305
// if not IsInArea ( usCargo , usCratesArea ) then
4278: LD_EXP 32
4282: PPUSH
4283: LD_INT 12
4285: PPUSH
4286: CALL_OW 308
4290: NOT
4291: IFFALSE 4305
// ComMoveToArea ( usCargo , usCratesArea ) ;
4293: LD_EXP 32
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: CALL_OW 113
// exit ;
4305: GO 4371
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_EXP 32
4316: PPUSH
4317: LD_INT 16
4319: PPUSH
4320: CALL_OW 308
4324: NOT
4325: AND
4326: IFFALSE 4345
// ComMoveXY ( usCargo , 80 , 143 ) else
4328: LD_EXP 32
4332: PPUSH
4333: LD_INT 80
4335: PPUSH
4336: LD_INT 143
4338: PPUSH
4339: CALL_OW 111
4343: GO 4371
// if GetCargo ( usCargo , mat_cans ) then
4345: LD_EXP 32
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: CALL_OW 289
4357: IFFALSE 4371
// ComGive ( usCargo , usDepot ) ;
4359: LD_EXP 32
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 161
// end ;
4371: PPOPN 2
4373: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4374: LD_EXP 7
4378: NOT
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 50
4405: PUSH
4406: EMPTY
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 60
4439: PUSH
4440: EMPTY
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 25
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: AND
4467: IFFALSE 4670
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
// begin enable ;
4476: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4477: LD_ADDR_VAR 0 1
4481: PUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 21
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 50
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: PUSH
4525: FOR_IN
4526: IFFALSE 4668
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 1
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 60
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 25
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: ST_TO_ADDR
// if not sci then
4576: LD_VAR 0 2
4580: NOT
4581: IFFALSE 4585
// break ;
4583: GO 4668
// sci := sci [ 1 ] ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_VAR 0 2
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: ST_TO_ADDR
// if IsInUnit ( sci ) then
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL_OW 310
4608: IFFALSE 4621
// ComExit ( sci ) else
4610: LD_VAR 0 2
4614: PPUSH
4615: CALL 53517 0 1
4619: GO 4666
// begin ComHeal ( sci , i ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4635: LD_VAR 0 2
4639: PPUSH
4640: LD_INT 32
4642: PUSH
4643: LD_INT 33
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 2
4655: PPUSH
4656: CALL_OW 12
4660: ARRAY
4661: PPUSH
4662: CALL_OW 180
// end ; end ;
4666: GO 4525
4668: POP
4669: POP
// end ;
4670: PPOPN 2
4672: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4673: LD_EXP 7
4677: NOT
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 3
4691: PUSH
4692: LD_INT 60
4694: PUSH
4695: EMPTY
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 50
4704: PUSH
4705: EMPTY
4706: LIST
4707: PUSH
4708: LD_INT 34
4710: PUSH
4711: LD_INT 13
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: AND
4729: PUSH
4730: LD_INT 22
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 24
4745: PUSH
4746: LD_INT 1000
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 3
4769: PUSH
4770: LD_INT 30
4772: PUSH
4773: LD_INT 29
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PPUSH
4790: CALL_OW 69
4794: AND
4795: IFFALSE 5064
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
4803: PPUSH
4804: PPUSH
// begin enable ;
4805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 24
4826: PUSH
4827: LD_INT 1000
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 21
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 29
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 24
4896: PUSH
4897: LD_INT 600
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 3
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 29
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4946: LD_ADDR_VAR 0 1
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 60
4966: PUSH
4967: EMPTY
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 50
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 13
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: PUSH
5001: FOR_IN
5002: IFFALSE 5062
// begin if tmp2 then
5004: LD_VAR 0 3
5008: IFFALSE 5036
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5010: LD_VAR 0 1
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 74
5029: PPUSH
5030: CALL_OW 130
5034: GO 5060
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 74
5055: PPUSH
5056: CALL_OW 130
// end ;
5060: GO 5001
5062: POP
5063: POP
// end ;
5064: PPOPN 3
5066: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5067: LD_EXP 7
5071: NOT
5072: PUSH
5073: LD_INT 16
5075: PPUSH
5076: LD_INT 81
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 50
5088: PUSH
5089: EMPTY
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: NOT
5101: AND
5102: PUSH
5103: LD_EXP 33
5107: AND
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 1
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 60
5124: PUSH
5125: EMPTY
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 50
5134: PUSH
5135: EMPTY
5136: LIST
5137: PUSH
5138: LD_INT 34
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: AND
5159: IFFALSE 5271
5161: GO 5163
5163: DISABLE
// begin enable ;
5164: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5165: LD_INT 22
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 60
5180: PUSH
5181: EMPTY
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 50
5190: PUSH
5191: EMPTY
5192: LIST
5193: PUSH
5194: LD_INT 34
5196: PUSH
5197: LD_INT 13
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_EXP 33
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_EXP 33
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: LD_EXP 33
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: LD_INT 3
5252: ARRAY
5253: PPUSH
5254: LD_EXP 33
5258: PUSH
5259: LD_INT 1
5261: ARRAY
5262: PUSH
5263: LD_INT 4
5265: ARRAY
5266: PPUSH
5267: CALL_OW 566
// end ;
5271: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5272: LD_INT 22
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 50
5284: PUSH
5285: EMPTY
5286: LIST
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 54
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 25
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 25
5316: PUSH
5317: LD_INT 5
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 25
5326: PUSH
5327: LD_INT 16
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: IFFALSE 5712
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin enable ;
5361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 50
5379: PUSH
5380: EMPTY
5381: LIST
5382: PUSH
5383: LD_INT 3
5385: PUSH
5386: LD_INT 54
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 16
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5446: LD_ADDR_VAR 0 3
5450: PUSH
5451: LD_INT 22
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 50
5463: PUSH
5464: EMPTY
5465: LIST
5466: PUSH
5467: LD_INT 21
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 30
5479: PUSH
5480: LD_INT 32
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 58
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5505: LD_ADDR_VAR 0 4
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 50
5522: PUSH
5523: EMPTY
5524: LIST
5525: PUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 5
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// if not tmp then
5546: LD_VAR 0 2
5550: NOT
5551: IFFALSE 5555
// exit ;
5553: GO 5712
// for i in tmp do
5555: LD_ADDR_VAR 0 1
5559: PUSH
5560: LD_VAR 0 2
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5710
// begin btmp := FilterByTag ( btmp , 0 ) ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: LD_VAR 0 3
5577: PPUSH
5578: LD_INT 0
5580: PPUSH
5581: CALL 50701 0 2
5585: ST_TO_ADDR
// if not btmp then
5586: LD_VAR 0 3
5590: NOT
5591: IFFALSE 5636
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 257
5602: PUSH
5603: LD_INT 16
5605: NONEQUAL
5606: PUSH
5607: LD_VAR 0 4
5611: AND
5612: IFFALSE 5632
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_VAR 0 4
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PPUSH
5628: CALL_OW 120
// continue ;
5632: GO 5565
// end else
5634: GO 5708
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5652: LD_VAR 0 1
5656: PPUSH
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 120
// wait ( 0 0$9 ) ;
5670: LD_INT 315
5672: PPUSH
5673: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 1
5684: ARRAY
5685: PPUSH
5686: CALL 17808 0 1
5690: IFFALSE 5708
// SetTag ( btmp [ 1 ] , 0 ) ;
5692: LD_VAR 0 3
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: PPUSH
5701: LD_INT 0
5703: PPUSH
5704: CALL_OW 109
// end ; end ;
5708: GO 5565
5710: POP
5711: POP
// end ;
5712: PPOPN 4
5714: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5715: LD_INT 22
5717: PUSH
5718: LD_INT 1
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 33
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 50
5737: PUSH
5738: EMPTY
5739: LIST
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 61
5746: PUSH
5747: EMPTY
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PPUSH
5760: CALL_OW 69
5764: IFFALSE 5855
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
// begin enable ;
5773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 50
5801: PUSH
5802: EMPTY
5803: LIST
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 61
5810: PUSH
5811: EMPTY
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: ST_TO_ADDR
// for i in tmp do
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_VAR 0 2
5838: PUSH
5839: FOR_IN
5840: IFFALSE 5853
// Connect ( i ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 23758 0 1
5851: GO 5839
5853: POP
5854: POP
// end ;
5855: PPOPN 2
5857: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5858: LD_EXP 6
5862: PUSH
5863: LD_OWVAR 67
5867: PUSH
5868: LD_INT 1
5870: GREATER
5871: AND
5872: IFFALSE 6314
5874: GO 5876
5876: DISABLE
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5884: LD_INT 31500
5886: PUSH
5887: LD_INT 31500
5889: PUSH
5890: LD_INT 29400
5892: PUSH
5893: LD_INT 27300
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_OWVAR 67
5906: ARRAY
5907: PPUSH
5908: CALL_OW 67
// if usSurrender then
5912: LD_EXP 7
5916: IFFALSE 5920
// exit ;
5918: GO 6314
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5920: LD_ADDR_VAR 0 1
5924: PUSH
5925: DOUBLE
5926: LD_INT 1
5928: DEC
5929: ST_TO_ADDR
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: LD_INT 6
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6259
// begin uc_side := 1 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// uc_nation := 1 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// InitHc_All ( ) ;
5973: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5977: LD_INT 0
5979: PPUSH
5980: LD_INT 3
5982: PPUSH
5983: LD_INT 5
5985: PUSH
5986: LD_INT 6
5988: PUSH
5989: LD_INT 7
5991: PUSH
5992: LD_INT 8
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: PPUSH
6007: CALL_OW 380
// un := CreateHuman ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: CALL_OW 44
6020: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6021: LD_ADDR_VAR 0 4
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6054: LD_VAR 0 4
6058: PUSH
6059: LD_INT 4
6061: EQUAL
6062: IFFALSE 6097
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_INT 6
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: CALL_OW 12
6093: ARRAY
6094: ST_TO_ADDR
6095: GO 6132
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 5
6107: PUSH
6108: LD_INT 7
6110: PUSH
6111: LD_INT 4
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6132: LD_VAR 0 4
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_VAR 0 5
6147: PPUSH
6148: LD_INT 30
6150: PPUSH
6151: CALL 20667 0 5
// veh := CreateVehicle ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: CALL_OW 45
6164: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6165: LD_ADDR_EXP 34
6169: PUSH
6170: LD_EXP 34
6174: PPUSH
6175: LD_EXP 34
6179: PUSH
6180: LD_INT 1
6182: PLUS
6183: PPUSH
6184: LD_VAR 0 3
6188: PPUSH
6189: CALL_OW 1
6193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 4
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 17
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6221: LD_VAR 0 2
6225: PPUSH
6226: LD_VAR 0 3
6230: PPUSH
6231: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_INT 153
6242: PPUSH
6243: LD_INT 45
6245: PPUSH
6246: CALL_OW 111
// wait ( 0 0$2 ) ;
6250: LD_INT 70
6252: PPUSH
6253: CALL_OW 67
// end ;
6257: GO 5954
6259: POP
6260: POP
// repeat wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6268: LD_ADDR_EXP 34
6272: PUSH
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 150
6280: PUSH
6281: LD_INT 36
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 138
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL 55723 0 2
6306: ST_TO_ADDR
// until not usAdditionalForces ;
6307: LD_EXP 34
6311: NOT
6312: IFFALSE 6261
// end ;
6314: PPOPN 5
6316: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6317: LD_INT 22
6319: PUSH
6320: LD_INT 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 101
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 69
6345: IFFALSE 6365
6347: GO 6349
6349: DISABLE
// begin wait ( 0 0$30 ) ;
6350: LD_INT 1050
6352: PPUSH
6353: CALL_OW 67
// usAttacksAllowed := true ;
6357: LD_ADDR_EXP 6
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// end ; end_of_file
6365: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL 57284 0 1
// if un = Heike then
6375: LD_VAR 0 1
6379: PUSH
6380: LD_EXP 15
6384: EQUAL
6385: IFFALSE 6394
// YouLost ( Heike ) ;
6387: LD_STRING Heike
6389: PPUSH
6390: CALL_OW 104
// if un = usCommander then
6394: LD_VAR 0 1
6398: PUSH
6399: LD_EXP 30
6403: EQUAL
6404: IFFALSE 6413
// YouLost ( Commander ) ;
6406: LD_STRING Commander
6408: PPUSH
6409: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 247
6436: PUSH
6437: LD_INT 2
6439: EQUAL
6440: AND
6441: IFFALSE 6458
// vehLossCounter := Inc ( vehLossCounter ) ;
6443: LD_ADDR_EXP 14
6447: PUSH
6448: LD_EXP 14
6452: PPUSH
6453: CALL 54480 0 1
6457: ST_TO_ADDR
// if GetSide ( un ) = 1 then
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 255
6467: PUSH
6468: LD_INT 1
6470: EQUAL
6471: IFFALSE 6794
// begin if GetClass ( un ) = class_sniper then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 257
6482: PUSH
6483: LD_INT 5
6485: EQUAL
6486: IFFALSE 6503
// sniperKillCounter := Inc ( sniperKillCounter ) ;
6488: LD_ADDR_EXP 13
6492: PUSH
6493: LD_EXP 13
6497: PPUSH
6498: CALL 54480 0 1
6502: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 264
6512: PUSH
6513: LD_INT 13
6515: EQUAL
6516: PUSH
6517: LD_INT 25
6519: PPUSH
6520: CALL_OW 302
6524: AND
6525: IFFALSE 6588
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
6527: LD_INT 175
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 1
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 13
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 69
6558: PPUSH
6559: CALL 17786 0 1
6563: MUL
6564: PPUSH
6565: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6569: LD_INT 25
6571: PPUSH
6572: LD_INT 2
6574: PPUSH
6575: LD_INT 2
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_INT 13
6583: PPUSH
6584: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 264
6597: PUSH
6598: LD_INT 12
6600: EQUAL
6601: PUSH
6602: LD_INT 25
6604: PPUSH
6605: CALL_OW 302
6609: AND
6610: IFFALSE 6631
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6612: LD_INT 25
6614: PPUSH
6615: LD_INT 2
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 12
6626: PPUSH
6627: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 266
6640: PUSH
6641: LD_INT 32
6643: EQUAL
6644: IFFALSE 6709
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6646: LD_ADDR_EXP 33
6650: PUSH
6651: LD_EXP 33
6655: PPUSH
6656: LD_EXP 33
6660: PUSH
6661: LD_INT 1
6663: PLUS
6664: PPUSH
6665: LD_INT 32
6667: PUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 250
6677: PUSH
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 251
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 254
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 1
6708: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 266
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 4
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: IN
6729: IFFALSE 6794
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6731: LD_ADDR_EXP 33
6735: PUSH
6736: LD_EXP 33
6740: PPUSH
6741: LD_EXP 33
6745: PUSH
6746: LD_INT 1
6748: PLUS
6749: PPUSH
6750: LD_INT 4
6752: PUSH
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 254
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// end ; end ;
6794: PPOPN 1
6796: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 255
6806: PUSH
6807: LD_INT 1
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL_OW 110
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: IFFALSE 6839
// SetTag ( un , 0 ) ;
6827: LD_VAR 0 1
6831: PPUSH
6832: LD_INT 0
6834: PPUSH
6835: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 255
6848: PUSH
6849: LD_INT 1
6851: EQUAL
6852: PUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 264
6862: PUSH
6863: LD_INT 6
6865: EQUAL
6866: AND
6867: PUSH
6868: LD_EXP 11
6872: NOT
6873: AND
6874: IFFALSE 6884
// seeHeavyGun := true ;
6876: LD_ADDR_EXP 11
6880: PUSH
6881: LD_INT 1
6883: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 263
6893: PUSH
6894: LD_INT 2
6896: EQUAL
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 255
6907: PUSH
6908: LD_INT 2
6910: NONEQUAL
6911: AND
6912: IFFALSE 6938
// begin ComUnlink ( un ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 136
// if not seeRemoteVehicle then
6923: LD_EXP 10
6927: NOT
6928: IFFALSE 6938
// seeRemoteVehicle := true ;
6930: LD_ADDR_EXP 10
6934: PUSH
6935: LD_INT 1
6937: ST_TO_ADDR
// end ; end ;
6938: PPOPN 1
6940: END
// on BuildingComplete ( b ) do var i , barracks ;
6941: LD_INT 0
6943: PPUSH
6944: PPUSH
// begin if GetSide ( b ) = 2 then
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 255
6954: PUSH
6955: LD_INT 2
6957: EQUAL
6958: IFFALSE 6996
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 266
6969: PUSH
6970: LD_INT 0
6972: EQUAL
6973: PUSH
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 18
6981: PPUSH
6982: CALL_OW 308
6986: AND
6987: IFFALSE 6996
// SetAchievement ( ACH_WEST ) ;
6989: LD_STRING ACH_WEST
6991: PPUSH
6992: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: LD_INT 1
7008: EQUAL
7009: IFFALSE 7161
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7011: LD_ADDR_EXP 33
7015: PUSH
7016: LD_EXP 33
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 3
7028: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 266
7038: PUSH
7039: LD_INT 4
7041: EQUAL
7042: IFFALSE 7053
// ComUpgrade ( b ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 146
// if GetBType ( b ) = b_bunker then
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 266
7062: PUSH
7063: LD_INT 32
7065: EQUAL
7066: IFFALSE 7161
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 6
7075: PUSH
7076: LD_INT 7
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 2
7088: PPUSH
7089: CALL_OW 12
7093: ARRAY
7094: PPUSH
7095: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 5
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// if barracks then
7133: LD_VAR 0 3
7137: IFFALSE 7161
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7139: LD_VAR 0 3
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PPUSH
7148: CALL_OW 313
7152: PUSH
7153: LD_INT 1
7155: ARRAY
7156: PPUSH
7157: CALL_OW 122
// end ; end ; end ;
7161: PPOPN 3
7163: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7164: LD_VAR 0 1
7168: PPUSH
7169: LD_VAR 0 2
7173: PPUSH
7174: CALL 57404 0 2
// if GetSide ( factory ) = 1 then
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 255
7187: PUSH
7188: LD_INT 1
7190: EQUAL
7191: IFFALSE 7270
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7193: LD_VAR 0 1
7197: PPUSH
7198: CALL_OW 264
7202: PUSH
7203: LD_INT 12
7205: EQUAL
7206: IFFALSE 7218
// usCargo := vehicle ;
7208: LD_ADDR_EXP 32
7212: PUSH
7213: LD_VAR 0 1
7217: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL_OW 264
7227: PUSH
7228: LD_INT 12
7230: PUSH
7231: LD_INT 13
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: IN
7238: NOT
7239: IFFALSE 7270
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_EXP 31
7250: PPUSH
7251: LD_EXP 31
7255: PUSH
7256: LD_INT 1
7258: PLUS
7259: PPUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 1
7269: ST_TO_ADDR
// end ; end ;
7270: PPOPN 2
7272: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7273: LD_VAR 0 2
7277: PPUSH
7278: CALL_OW 255
7282: PUSH
7283: LD_INT 1
7285: EQUAL
7286: IFFALSE 7300
// AddComEnterUnit ( un , amFac ) ;
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_INT 25
7295: PPUSH
7296: CALL_OW 180
// end ;
7300: PPOPN 4
7302: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 255
7312: PUSH
7313: LD_INT 1
7315: EQUAL
7316: PUSH
7317: LD_VAR 0 1
7321: PPUSH
7322: CALL_OW 266
7326: PUSH
7327: LD_INT 32
7329: EQUAL
7330: AND
7331: PUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 257
7341: PUSH
7342: LD_INT 1
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: IN
7352: AND
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 30
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 50
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: AND
7390: IFFALSE 7460
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7392: LD_INT 74
7394: PPUSH
7395: LD_INT 120
7397: PPUSH
7398: CALL_OW 428
7402: PPUSH
7403: CALL_OW 313
7407: PUSH
7408: LD_INT 6
7410: LESS
7411: IFFALSE 7460
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7413: LD_VAR 0 2
7417: PPUSH
7418: LD_INT 74
7420: PPUSH
7421: LD_INT 120
7423: PPUSH
7424: CALL_OW 428
7428: PPUSH
7429: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7433: LD_VAR 0 2
7437: PPUSH
7438: CALL_OW 257
7442: PUSH
7443: LD_INT 1
7445: EQUAL
7446: IFFALSE 7460
// AddComChangeProfession ( un , class_sniper ) ;
7448: LD_VAR 0 2
7452: PPUSH
7453: LD_INT 5
7455: PPUSH
7456: CALL_OW 183
// end ; end ; end_of_file
7460: PPOPN 2
7462: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
// Video ( true ) ;
7474: LD_INT 1
7476: PPUSH
7477: CALL 53091 0 1
// music_nat := 1 ;
7481: LD_ADDR_OWVAR 71
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
// music_class := music_recon ;
7489: LD_ADDR_OWVAR 72
7493: PUSH
7494: LD_INT 3
7496: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7497: LD_INT 184
7499: PPUSH
7500: LD_INT 142
7502: PPUSH
7503: LD_INT 2
7505: PPUSH
7506: LD_INT 10
7508: NEG
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7514: LD_INT 184
7516: PPUSH
7517: LD_INT 142
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7527: LD_INT 204
7529: PPUSH
7530: LD_INT 151
7532: PPUSH
7533: LD_INT 2
7535: PPUSH
7536: LD_INT 10
7538: NEG
7539: PPUSH
7540: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7544: LD_INT 204
7546: PPUSH
7547: LD_INT 151
7549: PPUSH
7550: LD_INT 2
7552: PPUSH
7553: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7557: LD_INT 184
7559: PPUSH
7560: LD_INT 142
7562: PPUSH
7563: CALL_OW 86
// wait ( 0 0$2 ) ;
7567: LD_INT 70
7569: PPUSH
7570: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7574: LD_ADDR_VAR 0 5
7578: PUSH
7579: LD_EXP 15
7583: PUSH
7584: LD_EXP 16
7588: PUSH
7589: LD_EXP 17
7593: PUSH
7594: LD_EXP 18
7598: PUSH
7599: LD_EXP 19
7603: PUSH
7604: LD_EXP 20
7608: PUSH
7609: LD_EXP 21
7613: PUSH
7614: LD_EXP 22
7618: PUSH
7619: LD_EXP 24
7623: PUSH
7624: LD_EXP 25
7628: PUSH
7629: LD_EXP 26
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: LD_EXP 27
7651: UNION
7652: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 5
7662: PPUSH
7663: LD_INT 25
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: PUSH
7678: LD_INT 0
7680: GREATER
7681: ST_TO_ADDR
// hasCamera := false ;
7682: LD_ADDR_VAR 0 7
7686: PUSH
7687: LD_INT 0
7689: ST_TO_ADDR
// if not hasEng then
7690: LD_VAR 0 6
7694: NOT
7695: IFFALSE 7723
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7697: LD_VAR 0 5
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_VAR 0 5
7709: PPUSH
7710: CALL_OW 12
7714: ARRAY
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 336
// if heikeVehicles then
7723: LD_EXP 29
7727: IFFALSE 8351
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7729: LD_ADDR_VAR 0 5
7733: PUSH
7734: LD_VAR 0 5
7738: PPUSH
7739: LD_INT 3
7741: PPUSH
7742: CALL 55345 0 2
7746: ST_TO_ADDR
// for i in heikeVehicles do
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_EXP 29
7756: PUSH
7757: FOR_IN
7758: IFFALSE 8349
// begin if not tmp then
7760: LD_VAR 0 5
7764: NOT
7765: IFFALSE 7769
// break ;
7767: GO 8349
// uc_side := 2 ;
7769: LD_ADDR_OWVAR 20
7773: PUSH
7774: LD_INT 2
7776: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7777: LD_ADDR_OWVAR 21
7781: PUSH
7782: LD_VAR 0 2
7786: PUSH
7787: LD_INT 5
7789: ARRAY
7790: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7791: LD_ADDR_OWVAR 37
7795: PUSH
7796: LD_VAR 0 2
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7805: LD_ADDR_OWVAR 39
7809: PUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: ARRAY
7818: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7819: LD_ADDR_OWVAR 38
7823: PUSH
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 3
7831: ARRAY
7832: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7833: LD_ADDR_OWVAR 40
7837: PUSH
7838: LD_VAR 0 2
7842: PUSH
7843: LD_INT 4
7845: ARRAY
7846: ST_TO_ADDR
// veh := CreateVehicle ;
7847: LD_ADDR_VAR 0 4
7851: PUSH
7852: CALL_OW 45
7856: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7857: LD_VAR 0 4
7861: PPUSH
7862: LD_INT 4
7864: PPUSH
7865: CALL_OW 233
// if i [ 3 ] = control_manual then
7869: LD_VAR 0 2
7873: PUSH
7874: LD_INT 3
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: EQUAL
7881: IFFALSE 7966
// begin PlaceUnitArea ( veh , startArea , false ) ;
7883: LD_VAR 0 4
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 4
7905: ARRAY
7906: PUSH
7907: LD_INT 31
7909: EQUAL
7910: IFFALSE 7928
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7912: LD_VAR 0 5
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_INT 3
7923: PPUSH
7924: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 4
7941: PPUSH
7942: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7946: LD_ADDR_VAR 0 5
7950: PUSH
7951: LD_VAR 0 5
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 3
7963: ST_TO_ADDR
// end else
7964: GO 8027
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7966: LD_INT 22
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 34
7978: PUSH
7979: LD_INT 31
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 69
7994: IFFALSE 8027
// begin PlaceUnitArea ( veh , startArea , false ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 49
// Connect ( veh ) ;
8011: LD_VAR 0 4
8015: PPUSH
8016: CALL 23758 0 1
// wait ( 0 0$2 ) ;
8020: LD_INT 70
8022: PPUSH
8023: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8027: LD_VAR 0 4
8031: PPUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 6
8039: ARRAY
8040: PPUSH
8041: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8045: LD_VAR 0 4
8049: PPUSH
8050: LD_INT 20
8052: PPUSH
8053: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8057: LD_VAR 0 2
8061: PUSH
8062: LD_INT 7
8064: ARRAY
8065: PUSH
8066: LD_VAR 0 4
8070: PPUSH
8071: CALL_OW 264
8075: PUSH
8076: LD_INT 51
8078: PUSH
8079: LD_INT 32
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: IN
8086: AND
8087: IFFALSE 8138
// begin for j := 1 to 2 do
8089: LD_ADDR_VAR 0 3
8093: PUSH
8094: DOUBLE
8095: LD_INT 1
8097: DEC
8098: ST_TO_ADDR
8099: LD_INT 2
8101: PUSH
8102: FOR_TO
8103: IFFALSE 8136
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_VAR 0 3
8114: PPUSH
8115: LD_VAR 0 2
8119: PUSH
8120: LD_INT 7
8122: ARRAY
8123: PUSH
8124: LD_VAR 0 3
8128: ARRAY
8129: PPUSH
8130: CALL_OW 291
8134: GO 8102
8136: POP
8137: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8138: LD_VAR 0 4
8142: PPUSH
8143: LD_INT 185
8145: PPUSH
8146: LD_INT 144
8148: PPUSH
8149: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8153: LD_VAR 0 4
8157: PPUSH
8158: CALL_OW 263
8162: PUSH
8163: LD_INT 1
8165: EQUAL
8166: PUSH
8167: LD_VAR 0 7
8171: NOT
8172: AND
8173: PUSH
8174: LD_VAR 0 4
8178: PPUSH
8179: CALL_OW 311
8183: PPUSH
8184: CALL_OW 257
8188: PUSH
8189: LD_INT 2
8191: EQUAL
8192: AND
8193: IFFALSE 8298
// begin hasCamera := true ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8203: LD_ADDR_VAR 0 8
8207: PUSH
8208: LD_VAR 0 4
8212: PPUSH
8213: CALL_OW 311
8217: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8218: LD_VAR 0 4
8222: PPUSH
8223: LD_INT 177
8225: PPUSH
8226: LD_INT 138
8228: PPUSH
8229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8233: LD_VAR 0 8
8237: PPUSH
8238: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8242: LD_VAR 0 8
8246: PPUSH
8247: LD_INT 190
8249: PPUSH
8250: LD_INT 150
8252: PPUSH
8253: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8257: LD_VAR 0 8
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8271: LD_VAR 0 8
8275: PPUSH
8276: LD_INT 170
8278: PPUSH
8279: LD_INT 103
8281: PPUSH
8282: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8286: LD_INT 190
8288: PPUSH
8289: LD_INT 150
8291: PPUSH
8292: CALL_OW 84
// end else
8296: GO 8340
// begin AddComWait ( veh , 0 0$2 ) ;
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_INT 70
8305: PPUSH
8306: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8310: LD_VAR 0 4
8314: PPUSH
8315: LD_INT 179
8317: PPUSH
8318: LD_INT 129
8320: PPUSH
8321: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8325: LD_VAR 0 4
8329: PPUSH
8330: LD_INT 170
8332: PPUSH
8333: LD_INT 103
8335: PPUSH
8336: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8340: LD_INT 70
8342: PPUSH
8343: CALL_OW 67
// end ;
8347: GO 7757
8349: POP
8350: POP
// end ; if tmp then
8351: LD_VAR 0 5
8355: IFFALSE 8500
// begin for i in tmp do
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8498
// begin SetDir ( i , 4 ) ;
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_INT 4
8377: PPUSH
8378: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: LD_INT 0
8392: PPUSH
8393: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_INT 185
8404: PPUSH
8405: LD_INT 144
8407: PPUSH
8408: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8412: LD_VAR 0 2
8416: PPUSH
8417: CALL_OW 257
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: PUSH
8426: LD_VAR 0 7
8430: NOT
8431: AND
8432: IFFALSE 8459
// begin hasCamera := true ;
8434: LD_ADDR_VAR 0 7
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_INT 190
8449: PPUSH
8450: LD_INT 150
8452: PPUSH
8453: CALL_OW 217
// end else
8457: GO 8474
// AddComMoveXY ( i , 179 , 129 ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_INT 179
8466: PPUSH
8467: LD_INT 129
8469: PPUSH
8470: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_INT 170
8481: PPUSH
8482: LD_INT 103
8484: PPUSH
8485: CALL_OW 171
// wait ( 0 0$2 ) ;
8489: LD_INT 70
8491: PPUSH
8492: CALL_OW 67
// end ;
8496: GO 8367
8498: POP
8499: POP
// end ; if heikeApes then
8500: LD_EXP 28
8504: IFFALSE 8622
// begin counter := 0 ;
8506: LD_ADDR_VAR 0 9
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// for i in heikeApes do
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: LD_EXP 28
8523: PUSH
8524: FOR_IN
8525: IFFALSE 8620
// begin if counter > 2 then
8527: LD_VAR 0 9
8531: PUSH
8532: LD_INT 2
8534: GREATER
8535: IFFALSE 8539
// break ;
8537: GO 8620
// counter := Inc ( counter ) ;
8539: LD_ADDR_VAR 0 9
8543: PUSH
8544: LD_VAR 0 9
8548: PPUSH
8549: CALL 54480 0 1
8553: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_INT 4
8561: PPUSH
8562: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_INT 185
8588: PPUSH
8589: LD_INT 144
8591: PPUSH
8592: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8596: LD_VAR 0 2
8600: PPUSH
8601: LD_INT 170
8603: PPUSH
8604: LD_INT 103
8606: PPUSH
8607: CALL_OW 171
// wait ( 0 0$2 ) ;
8611: LD_INT 70
8613: PPUSH
8614: CALL_OW 67
// end ;
8618: GO 8524
8620: POP
8621: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8622: LD_EXP 15
8626: PPUSH
8627: LD_INT 163
8629: PPUSH
8630: LD_INT 89
8632: PPUSH
8633: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8637: LD_EXP 15
8641: PPUSH
8642: LD_STRING DH-Intro-1
8644: PPUSH
8645: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8649: LD_INT 175
8651: PPUSH
8652: LD_INT 117
8654: PPUSH
8655: CALL_OW 84
// if Markov then
8659: LD_EXP 22
8663: IFFALSE 9238
// begin Say ( Markov , DMar-Intro-2 ) ;
8665: LD_EXP 22
8669: PPUSH
8670: LD_STRING DMar-Intro-2
8672: PPUSH
8673: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8677: LD_EXP 22
8681: PPUSH
8682: LD_STRING DMar-Intro-3
8684: PPUSH
8685: CALL_OW 88
// wait ( 0 0$1 ) ;
8689: LD_INT 35
8691: PPUSH
8692: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8696: LD_EXP 15
8700: PPUSH
8701: CALL_OW 85
// if Kurt then
8705: LD_EXP 25
8709: IFFALSE 8761
// begin if IsInUnit ( Kurt ) then
8711: LD_EXP 25
8715: PPUSH
8716: CALL_OW 310
8720: IFFALSE 8731
// ComExit ( Kurt ) ;
8722: LD_EXP 25
8726: PPUSH
8727: CALL 53517 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8731: LD_EXP 25
8735: PPUSH
8736: LD_INT 130
8738: PPUSH
8739: LD_INT 56
8741: PPUSH
8742: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8746: LD_EXP 25
8750: PPUSH
8751: LD_INT 129
8753: PPUSH
8754: LD_INT 56
8756: PPUSH
8757: CALL_OW 178
// end ; if Kaia then
8761: LD_EXP 20
8765: IFFALSE 8945
// begin Say ( Kaia , DK-Intro-4 ) ;
8767: LD_EXP 20
8771: PPUSH
8772: LD_STRING DK-Intro-4
8774: PPUSH
8775: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8779: LD_EXP 22
8783: PPUSH
8784: LD_STRING DMar-Intro-5
8786: PPUSH
8787: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8791: LD_EXP 22
8795: PPUSH
8796: LD_STRING DMar-Intro-6
8798: PPUSH
8799: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8803: LD_EXP 24
8807: PPUSH
8808: LD_STRING DO-Intro-7
8810: PPUSH
8811: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8815: LD_INT 160
8817: PPUSH
8818: LD_INT 85
8820: PPUSH
8821: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8825: LD_EXP 22
8829: PPUSH
8830: LD_STRING DMar-Intro-8
8832: PPUSH
8833: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8837: LD_EXP 22
8841: PPUSH
8842: LD_STRING DMar-Intro-9
8844: PPUSH
8845: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8849: LD_EXP 22
8853: PPUSH
8854: LD_STRING DMar-Intro-10
8856: PPUSH
8857: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8861: LD_EXP 22
8865: PPUSH
8866: LD_STRING DMar-Intro-11
8868: PPUSH
8869: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8873: LD_EXP 16
8877: PPUSH
8878: LD_STRING DG-Intro-12
8880: PPUSH
8881: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8885: LD_EXP 16
8889: PPUSH
8890: LD_STRING DG-Intro-13
8892: PPUSH
8893: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8897: LD_EXP 16
8901: PPUSH
8902: LD_STRING DG-Intro-14
8904: PPUSH
8905: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8909: LD_EXP 16
8913: PPUSH
8914: LD_STRING DG-Intro-15
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8921: LD_EXP 15
8925: PPUSH
8926: LD_STRING DH-Intro-16
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8933: LD_EXP 22
8937: PPUSH
8938: LD_STRING DMar-Intro-17
8940: PPUSH
8941: CALL_OW 88
// end ; if Kurt and Mike then
8945: LD_EXP 25
8949: PUSH
8950: LD_EXP 17
8954: AND
8955: IFFALSE 9238
// begin CenterNowOnUnits ( Kurt ) ;
8957: LD_EXP 25
8961: PPUSH
8962: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8966: LD_EXP 25
8970: PPUSH
8971: LD_EXP 15
8975: PPUSH
8976: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8980: LD_EXP 25
8984: PPUSH
8985: LD_STRING DKs-Intro-18
8987: PPUSH
8988: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8992: LD_EXP 25
8996: PPUSH
8997: LD_STRING DKs-Intro-19
8999: PPUSH
9000: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9004: LD_EXP 17
9008: PPUSH
9009: CALL_OW 87
// if IsInUnit ( Mike ) then
9013: LD_EXP 17
9017: PPUSH
9018: CALL_OW 310
9022: IFFALSE 9033
// ComExit ( Mike ) ;
9024: LD_EXP 17
9028: PPUSH
9029: CALL 53517 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9033: LD_EXP 17
9037: PPUSH
9038: LD_INT 129
9040: PPUSH
9041: LD_INT 53
9043: PPUSH
9044: CALL_OW 171
// AddComHold ( Mike ) ;
9048: LD_EXP 17
9052: PPUSH
9053: CALL_OW 200
// wait ( 0 0$2 ) ;
9057: LD_INT 70
9059: PPUSH
9060: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9064: LD_EXP 17
9068: PPUSH
9069: LD_STRING DM-Intro-20
9071: PPUSH
9072: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9076: LD_ADDR_EXP 3
9080: PUSH
9081: LD_STRING Scout
9083: PPUSH
9084: CALL_OW 97
9088: ST_TO_ADDR
// if scoutActive = 1 then
9089: LD_EXP 3
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: IFFALSE 9194
// begin CenterNowOnUnits ( Kurt ) ;
9099: LD_EXP 25
9103: PPUSH
9104: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9108: LD_EXP 15
9112: PPUSH
9113: LD_STRING DH-Intro-21
9115: PPUSH
9116: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9120: LD_EXP 17
9124: PPUSH
9125: LD_STRING DM-Intro-22
9127: PPUSH
9128: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9132: LD_EXP 25
9136: PPUSH
9137: LD_STRING DKs-Intro-23
9139: PPUSH
9140: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9144: LD_EXP 25
9148: PPUSH
9149: LD_INT 5
9151: PPUSH
9152: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9156: LD_EXP 17
9160: PPUSH
9161: LD_INT 5
9163: PPUSH
9164: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9168: LD_EXP 25
9172: PUSH
9173: LD_EXP 17
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: LD_INT 104
9184: PPUSH
9185: LD_INT 66
9187: PPUSH
9188: CALL_OW 111
// end else
9192: GO 9238
// begin scoutActive := 0 ;
9194: LD_ADDR_EXP 3
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9202: LD_EXP 15
9206: PPUSH
9207: LD_STRING DH-Intro-a-21
9209: PPUSH
9210: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9214: LD_EXP 17
9218: PPUSH
9219: LD_STRING DM-Intro-a-22
9221: PPUSH
9222: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9226: LD_EXP 25
9230: PPUSH
9231: LD_STRING DKs-Intro-a-23
9233: PPUSH
9234: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9238: LD_INT 0
9240: PPUSH
9241: CALL 53091 0 1
// music_nat := music_auto ;
9245: LD_ADDR_OWVAR 71
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// music_class := music_auto ;
9253: LD_ADDR_OWVAR 72
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9261: LD_STRING M1
9263: PPUSH
9264: CALL_OW 337
// wait ( 0 0$3 ) ;
9268: LD_INT 105
9270: PPUSH
9271: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9275: LD_EXP 15
9279: PPUSH
9280: LD_STRING DH-Base-1
9282: PPUSH
9283: CALL_OW 88
// if Kaia then
9287: LD_EXP 20
9291: IFFALSE 9401
// begin Say ( Kaia , DK-Base-2 ) ;
9293: LD_EXP 20
9297: PPUSH
9298: LD_STRING DK-Base-2
9300: PPUSH
9301: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9305: LD_EXP 15
9309: PPUSH
9310: LD_STRING DH-Base-3
9312: PPUSH
9313: CALL_OW 88
// if Aviradze then
9317: LD_EXP 26
9321: IFFALSE 9401
// begin Say ( Aviradze , DA-Base-4 ) ;
9323: LD_EXP 26
9327: PPUSH
9328: LD_STRING DA-Base-4
9330: PPUSH
9331: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9335: LD_EXP 20
9339: PPUSH
9340: LD_STRING DK-Base-5
9342: PPUSH
9343: CALL_OW 88
// if Markov then
9347: LD_EXP 22
9351: IFFALSE 9401
// begin Say ( Markov , DMar-Base-6 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DMar-Base-6
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9365: LD_EXP 20
9369: PPUSH
9370: LD_STRING DK-Base-7
9372: PPUSH
9373: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9377: LD_EXP 22
9381: PPUSH
9382: LD_STRING DMar-Base-8
9384: PPUSH
9385: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9389: LD_EXP 22
9393: PPUSH
9394: LD_STRING DMar-Base-9
9396: PPUSH
9397: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9401: CALL_OW 22
// end ;
9405: LD_VAR 0 1
9409: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9410: LD_EXP 5
9414: IFFALSE 10525
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin InGameOn ;
9423: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9427: LD_EXP 17
9431: PUSH
9432: LD_EXP 25
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PPUSH
9441: LD_EXP 15
9445: PPUSH
9446: CALL_OW 119
// ComExit ( Heike ) ;
9450: LD_EXP 15
9454: PPUSH
9455: CALL 53517 0 1
// if IsOk ( Mike ) then
9459: LD_EXP 17
9463: PPUSH
9464: CALL_OW 302
9468: IFFALSE 9486
// AddComTurnUnit ( Heike , Mike ) else
9470: LD_EXP 15
9474: PPUSH
9475: LD_EXP 17
9479: PPUSH
9480: CALL_OW 179
9484: GO 9500
// AddComTurnUnit ( Heike , Kurt ) ;
9486: LD_EXP 15
9490: PPUSH
9491: LD_EXP 25
9495: PPUSH
9496: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9500: LD_EXP 17
9504: PPUSH
9505: CALL_OW 302
9509: PUSH
9510: LD_EXP 25
9514: PPUSH
9515: CALL_OW 302
9519: AND
9520: IFFALSE 9771
// begin CenterNowOnUnits ( Mike ) ;
9522: LD_EXP 17
9526: PPUSH
9527: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9531: LD_EXP 17
9535: PPUSH
9536: LD_STRING DM-Scout-1
9538: PPUSH
9539: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9543: LD_EXP 15
9547: PPUSH
9548: LD_STRING DH-Scout-2
9550: PPUSH
9551: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9555: LD_EXP 25
9559: PPUSH
9560: LD_STRING DKs-Scout-3
9562: PPUSH
9563: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9567: LD_EXP 15
9571: PPUSH
9572: LD_STRING DH-Scout-4
9574: PPUSH
9575: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9579: LD_EXP 15
9583: PPUSH
9584: LD_STRING DH-Scout-5
9586: PPUSH
9587: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: LD_INT 72
9598: PUSH
9599: LD_INT 122
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 89
9608: PUSH
9609: LD_INT 131
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 99
9618: PUSH
9619: LD_INT 139
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 100
9628: PUSH
9629: LD_INT 148
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// for i in tmp do
9642: LD_ADDR_VAR 0 1
9646: PUSH
9647: LD_VAR 0 2
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9711
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9655: LD_VAR 0 1
9659: PUSH
9660: LD_INT 1
9662: ARRAY
9663: PPUSH
9664: LD_VAR 0 1
9668: PUSH
9669: LD_INT 2
9671: ARRAY
9672: PPUSH
9673: LD_INT 2
9675: PPUSH
9676: LD_INT 6
9678: NEG
9679: PPUSH
9680: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: LD_INT 2
9704: PPUSH
9705: CALL_OW 331
// end ;
9709: GO 9652
9711: POP
9712: POP
// CenterOnXY ( 83 , 132 ) ;
9713: LD_INT 83
9715: PPUSH
9716: LD_INT 132
9718: PPUSH
9719: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9723: LD_EXP 25
9727: PPUSH
9728: LD_STRING DKs-Scout-6
9730: PPUSH
9731: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9735: LD_EXP 17
9739: PPUSH
9740: LD_STRING DM-Scout-7
9742: PPUSH
9743: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9747: LD_EXP 17
9751: PPUSH
9752: LD_STRING DM-Scout-8
9754: PPUSH
9755: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9759: LD_EXP 25
9763: PPUSH
9764: LD_STRING DKs-Scout-9
9766: PPUSH
9767: CALL_OW 88
// end ; if IsDead ( Mike ) then
9771: LD_EXP 17
9775: PPUSH
9776: CALL_OW 301
9780: IFFALSE 9947
// begin CenterNowOnUnits ( Kurt ) ;
9782: LD_EXP 25
9786: PPUSH
9787: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9791: LD_EXP 25
9795: PPUSH
9796: LD_STRING DKs-Scout-b-1
9798: PPUSH
9799: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9803: LD_EXP 25
9807: PPUSH
9808: LD_STRING DKs-Scout-b-2
9810: PPUSH
9811: CALL_OW 88
// if IsOk ( Givi ) then
9815: LD_EXP 16
9819: PPUSH
9820: CALL_OW 302
9824: IFFALSE 9899
// begin ComExit ( Givi ) ;
9826: LD_EXP 16
9830: PPUSH
9831: CALL 53517 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9835: LD_EXP 16
9839: PPUSH
9840: LD_EXP 25
9844: PPUSH
9845: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9849: LD_EXP 16
9853: PPUSH
9854: LD_STRING DG-Scout-b-3
9856: PPUSH
9857: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9861: LD_EXP 16
9865: PPUSH
9866: LD_STRING DG-Scout-b-4
9868: PPUSH
9869: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9873: LD_EXP 16
9877: PPUSH
9878: LD_STRING DG-Scout-b-5
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9885: LD_EXP 15
9889: PPUSH
9890: LD_STRING DH-Scout-b-6
9892: PPUSH
9893: CALL_OW 88
// end else
9897: GO 9911
// Say ( Heike , DH-Scout-a-4 ) ;
9899: LD_EXP 15
9903: PPUSH
9904: LD_STRING DH-Scout-a-4
9906: PPUSH
9907: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9911: LD_EXP 25
9915: PPUSH
9916: LD_STRING DKs-Scout-b-7
9918: PPUSH
9919: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_STRING DKs-Scout-b-8
9930: PPUSH
9931: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9935: LD_EXP 25
9939: PPUSH
9940: LD_STRING DKs-Scout-b-9
9942: PPUSH
9943: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9947: LD_EXP 25
9951: PPUSH
9952: CALL_OW 301
9956: IFFALSE 10235
// begin CenterNowOnUnits ( Mike ) ;
9958: LD_EXP 17
9962: PPUSH
9963: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9967: LD_EXP 17
9971: PPUSH
9972: LD_STRING DM-Scout-a-1
9974: PPUSH
9975: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9979: LD_EXP 17
9983: PPUSH
9984: LD_STRING DM-Scout-a-2
9986: PPUSH
9987: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9991: LD_EXP 17
9995: PPUSH
9996: CALL_OW 256
10000: PUSH
10001: LD_INT 1000
10003: LESS
10004: IFFALSE 10020
// Say ( Heike , DH-Scout-a-3 ) else
10006: LD_EXP 15
10010: PPUSH
10011: LD_STRING DH-Scout-a-3
10013: PPUSH
10014: CALL_OW 88
10018: GO 10032
// Say ( Heike , DH-Scout-a-4 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING DH-Scout-a-4
10027: PPUSH
10028: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10032: LD_EXP 17
10036: PPUSH
10037: LD_STRING DM-Scout-a-5
10039: PPUSH
10040: CALL_OW 88
// if IsOk ( Kaia ) then
10044: LD_EXP 20
10048: PPUSH
10049: CALL_OW 302
10053: IFFALSE 10235
// begin ComExit ( Kaia ) ;
10055: LD_EXP 20
10059: PPUSH
10060: CALL 53517 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10064: LD_EXP 20
10068: PPUSH
10069: LD_EXP 17
10073: PPUSH
10074: CALL_OW 172
// wait ( 0 0$2 ) ;
10078: LD_INT 70
10080: PPUSH
10081: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10085: LD_EXP 20
10089: PPUSH
10090: LD_EXP 17
10094: PPUSH
10095: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10099: LD_EXP 17
10103: PPUSH
10104: LD_EXP 20
10108: PPUSH
10109: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10113: LD_EXP 20
10117: PPUSH
10118: LD_STRING DK-Scout-a-6
10120: PPUSH
10121: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10125: LD_EXP 17
10129: PPUSH
10130: LD_STRING DM-Scout-a-7
10132: PPUSH
10133: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING DK-Scout-a-8
10144: PPUSH
10145: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10149: LD_EXP 20
10153: PPUSH
10154: LD_STRING DK-Scout-a-9
10156: PPUSH
10157: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DH-Scout-a-10
10168: PPUSH
10169: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10173: LD_EXP 17
10177: PPUSH
10178: LD_EXP 15
10182: PPUSH
10183: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10187: LD_EXP 17
10191: PPUSH
10192: LD_STRING DM-Scout-a-11
10194: PPUSH
10195: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10199: LD_EXP 17
10203: PPUSH
10204: LD_STRING DM-Scout-a-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10211: LD_EXP 17
10215: PPUSH
10216: LD_STRING DM-Scout-a-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10223: LD_EXP 17
10227: PPUSH
10228: LD_STRING DM-Scout-a-14
10230: PPUSH
10231: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10235: LD_EXP 16
10239: PPUSH
10240: CALL_OW 302
10244: IFFALSE 10272
// begin Say ( Givi , DG-Scout-10 ) ;
10246: LD_EXP 16
10250: PPUSH
10251: LD_STRING DG-Scout-10
10253: PPUSH
10254: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10258: LD_EXP 16
10262: PPUSH
10263: LD_STRING DG-Scout-11
10265: PPUSH
10266: CALL_OW 88
// end else
10270: GO 10329
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10272: LD_EXP 27
10276: PPUSH
10277: LD_INT 26
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: CALL_OW 72
10291: PPUSH
10292: LD_STRING DArm-Scout-10
10294: PPUSH
10295: CALL 224 0 2
10299: NOT
10300: IFFALSE 10329
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10302: LD_EXP 27
10306: PPUSH
10307: LD_INT 26
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: LD_STRING DArf-Scout-10
10324: PPUSH
10325: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
10329: LD_EXP 15
10333: PPUSH
10334: LD_STRING DH-Scout-12
10336: PPUSH
10337: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10341: LD_EXP 15
10345: PPUSH
10346: LD_STRING DH-Scout-13
10348: PPUSH
10349: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10353: LD_EXP 17
10357: PPUSH
10358: CALL_OW 302
10362: PUSH
10363: LD_EXP 25
10367: PPUSH
10368: CALL_OW 302
10372: AND
10373: IFFALSE 10401
// begin Say ( Mike , DM-Scout-14 ) ;
10375: LD_EXP 17
10379: PPUSH
10380: LD_STRING DM-Scout-14
10382: PPUSH
10383: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10387: LD_EXP 15
10391: PPUSH
10392: LD_STRING DH-Scout-c-14
10394: PPUSH
10395: CALL_OW 88
// end else
10399: GO 10494
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10401: LD_EXP 17
10405: PPUSH
10406: CALL_OW 302
10410: PUSH
10411: LD_EXP 25
10415: PPUSH
10416: CALL_OW 302
10420: XOR
10421: IFFALSE 10482
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10423: LD_EXP 27
10427: PPUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: LD_STRING DArm-Scout-a-14
10445: PPUSH
10446: CALL 224 0 2
10450: NOT
10451: IFFALSE 10480
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10453: LD_EXP 27
10457: PPUSH
10458: LD_INT 26
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 72
10472: PPUSH
10473: LD_STRING DArf-Scout-a-14
10475: PPUSH
10476: CALL 224 0 2
// end else
10480: GO 10494
// Say ( Heike , DH-Scout-d-14 ) ;
10482: LD_EXP 15
10486: PPUSH
10487: LD_STRING DH-Scout-d-14
10489: PPUSH
10490: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10494: LD_EXP 15
10498: PPUSH
10499: LD_STRING DH-Scout-15
10501: PPUSH
10502: CALL_OW 88
// InGameOff ;
10506: CALL_OW 9
// wait ( 1 1$00 ) ;
10510: LD_INT 2100
10512: PPUSH
10513: CALL_OW 67
// usAttacksAllowed := true ;
10517: LD_ADDR_EXP 6
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// end ;
10525: PPOPN 2
10527: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10528: LD_EXP 4
10532: IFFALSE 10709
10534: GO 10536
10536: DISABLE
10537: LD_INT 0
10539: PPUSH
// begin spoken := true ;
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10548: LD_INT 1050
10550: PPUSH
10551: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10555: LD_EXP 15
10559: PPUSH
10560: LD_STRING DH-Scout-c-1
10562: PPUSH
10563: CALL_OW 88
// if not IsOk ( Givi ) then
10567: LD_EXP 16
10571: PPUSH
10572: CALL_OW 302
10576: NOT
10577: IFFALSE 10581
// exit ;
10579: GO 10709
// if IsOk ( Givi ) then
10581: LD_EXP 16
10585: PPUSH
10586: CALL_OW 302
10590: IFFALSE 10618
// begin Say ( Givi , DG-Scout-c-2 ) ;
10592: LD_EXP 16
10596: PPUSH
10597: LD_STRING DG-Scout-c-2
10599: PPUSH
10600: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10604: LD_EXP 16
10608: PPUSH
10609: LD_STRING DG-Scout-c-3
10611: PPUSH
10612: CALL_OW 88
// end else
10616: GO 10691
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10618: LD_ADDR_VAR 0 1
10622: PUSH
10623: LD_EXP 27
10627: PPUSH
10628: LD_INT 26
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 72
10642: PPUSH
10643: LD_STRING DArm-Scout-c-3
10645: PPUSH
10646: CALL 224 0 2
10650: ST_TO_ADDR
// if not spoken then
10651: LD_VAR 0 1
10655: NOT
10656: IFFALSE 10691
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10658: LD_ADDR_VAR 0 1
10662: PUSH
10663: LD_EXP 27
10667: PPUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 72
10682: PPUSH
10683: LD_STRING DArf-Scout-c-3
10685: PPUSH
10686: CALL 224 0 2
10690: ST_TO_ADDR
// ; end ; if spoken then
10691: LD_VAR 0 1
10695: IFFALSE 10709
// Say ( Heike , DH-Scout-c-4 ) ;
10697: LD_EXP 15
10701: PPUSH
10702: LD_STRING DH-Scout-c-4
10704: PPUSH
10705: CALL_OW 88
// end ;
10709: PPOPN 1
10711: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10712: LD_INT 22
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 7
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PPUSH
10736: CALL_OW 69
10740: PUSH
10741: LD_EXP 26
10745: PPUSH
10746: CALL_OW 302
10750: AND
10751: IFFALSE 10836
10753: GO 10755
10755: DISABLE
// begin DialogueOn ;
10756: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10760: LD_EXP 26
10764: PPUSH
10765: LD_STRING DA-Lab-1
10767: PPUSH
10768: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10772: LD_EXP 15
10776: PPUSH
10777: LD_STRING DH-Lab-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10784: LD_EXP 26
10788: PPUSH
10789: LD_STRING DA-Lab-3
10791: PPUSH
10792: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10796: LD_EXP 26
10800: PPUSH
10801: LD_STRING DA-Lab-4
10803: PPUSH
10804: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10808: LD_EXP 26
10812: PPUSH
10813: LD_STRING DA-Lab-5
10815: PPUSH
10816: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10820: LD_EXP 15
10824: PPUSH
10825: LD_STRING DH-Lab-6
10827: PPUSH
10828: CALL_OW 88
// DialogueOff ;
10832: CALL_OW 7
// end ;
10836: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10837: LD_INT 7
10839: PPUSH
10840: LD_INT 2
10842: PPUSH
10843: CALL_OW 321
10847: PUSH
10848: LD_INT 2
10850: EQUAL
10851: PUSH
10852: LD_EXP 16
10856: PPUSH
10857: CALL_OW 302
10861: AND
10862: IFFALSE 11031
10864: GO 10866
10866: DISABLE
// begin DialogueOn ;
10867: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10871: LD_EXP 16
10875: PPUSH
10876: LD_STRING DG-Opt-1
10878: PPUSH
10879: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10883: LD_EXP 15
10887: PPUSH
10888: LD_STRING DH-Opt-2
10890: PPUSH
10891: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10895: LD_EXP 16
10899: PPUSH
10900: LD_STRING DG-Opt-3
10902: PPUSH
10903: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10907: LD_EXP 16
10911: PPUSH
10912: LD_STRING DG-Opt-4
10914: PPUSH
10915: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10919: LD_EXP 15
10923: PPUSH
10924: LD_STRING DH-Opt-5
10926: PPUSH
10927: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10931: LD_EXP 16
10935: PPUSH
10936: LD_STRING DG-Opt-6
10938: PPUSH
10939: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10943: LD_EXP 15
10947: PPUSH
10948: LD_STRING DH-Opt-7
10950: PPUSH
10951: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10955: LD_EXP 16
10959: PPUSH
10960: LD_STRING DG-Opt-8
10962: PPUSH
10963: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10967: LD_EXP 16
10971: PPUSH
10972: LD_STRING DG-Opt-9
10974: PPUSH
10975: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10979: LD_EXP 15
10983: PPUSH
10984: LD_STRING DH-Opt-10
10986: PPUSH
10987: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10991: LD_EXP 16
10995: PPUSH
10996: LD_STRING DG-Opt-11
10998: PPUSH
10999: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11003: LD_EXP 16
11007: PPUSH
11008: LD_STRING DG-Opt-12
11010: PPUSH
11011: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11015: LD_EXP 15
11019: PPUSH
11020: LD_STRING DH-Opt-13
11022: PPUSH
11023: CALL_OW 88
// DialogueOff ;
11027: CALL_OW 7
// end ;
11031: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11032: LD_EXP 27
11036: PPUSH
11037: LD_INT 95
11039: PUSH
11040: LD_INT 7
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 23
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 26
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 72
11076: IFFALSE 11137
11078: GO 11080
11080: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11081: LD_EXP 27
11085: PPUSH
11086: LD_INT 95
11088: PUSH
11089: LD_INT 7
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 23
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 26
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 72
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PPUSH
11130: LD_STRING DArm-River
11132: PPUSH
11133: CALL_OW 88
// end ;
11137: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11138: LD_INT 40
11140: PPUSH
11141: LD_INT 2
11143: PPUSH
11144: CALL_OW 321
11148: PUSH
11149: LD_INT 2
11151: EQUAL
11152: PUSH
11153: LD_EXP 18
11157: PPUSH
11158: CALL_OW 302
11162: AND
11163: IFFALSE 11413
11165: GO 11167
11167: DISABLE
// begin DialogueOn ;
11168: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11172: LD_EXP 18
11176: PPUSH
11177: LD_STRING DI-Roc-1
11179: PPUSH
11180: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11184: LD_EXP 15
11188: PPUSH
11189: LD_STRING DH-Roc-2
11191: PPUSH
11192: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11196: LD_EXP 18
11200: PPUSH
11201: LD_STRING DI-Roc-3
11203: PPUSH
11204: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_STRING DI-Roc-4
11215: PPUSH
11216: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11220: LD_EXP 20
11224: PPUSH
11225: LD_STRING DK-Roc-5
11227: PPUSH
11228: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
11232: LD_EXP 20
11236: PPUSH
11237: LD_STRING DK-Roc-6
11239: PPUSH
11240: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
11244: LD_EXP 16
11248: PPUSH
11249: LD_STRING DG-Roc-7
11251: PPUSH
11252: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
11256: LD_EXP 16
11260: PPUSH
11261: LD_STRING DG-Roc-8
11263: PPUSH
11264: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11268: LD_EXP 22
11272: PPUSH
11273: CALL_OW 302
11277: PUSH
11278: LD_EXP 20
11282: PPUSH
11283: CALL_OW 302
11287: AND
11288: PUSH
11289: LD_EXP 16
11293: PPUSH
11294: CALL_OW 302
11298: AND
11299: IFFALSE 11409
// begin Say ( Markov , DMar-Roc-9 ) ;
11301: LD_EXP 22
11305: PPUSH
11306: LD_STRING DMar-Roc-9
11308: PPUSH
11309: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11313: LD_EXP 22
11317: PPUSH
11318: LD_STRING DMar-Roc-10
11320: PPUSH
11321: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11325: LD_EXP 20
11329: PPUSH
11330: LD_STRING DK-Roc-11
11332: PPUSH
11333: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11337: LD_EXP 22
11341: PPUSH
11342: LD_STRING DMar-Roc-12
11344: PPUSH
11345: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11349: LD_EXP 20
11353: PPUSH
11354: LD_STRING DK-Roc-13
11356: PPUSH
11357: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11361: LD_EXP 16
11365: PPUSH
11366: LD_STRING DG-Roc-14
11368: PPUSH
11369: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11373: LD_EXP 22
11377: PPUSH
11378: LD_STRING DMar-Roc-15
11380: PPUSH
11381: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11385: LD_EXP 22
11389: PPUSH
11390: LD_STRING DMar-Roc-16
11392: PPUSH
11393: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11397: LD_EXP 20
11401: PPUSH
11402: LD_STRING DK-Roc-17
11404: PPUSH
11405: CALL_OW 88
// end ; DialogueOff ;
11409: CALL_OW 7
// end ;
11413: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11414: LD_EXP 30
11418: PPUSH
11419: CALL_OW 256
11423: PUSH
11424: LD_INT 1000
11426: LESS
11427: PUSH
11428: LD_INT 22
11430: PUSH
11431: LD_INT 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 23
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 69
11467: PUSH
11468: LD_INT 6
11470: LESS
11471: OR
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 1
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PUSH
11513: LD_INT 2
11515: LESS
11516: OR
11517: IFFALSE 12763
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
11525: PPUSH
11526: PPUSH
// begin usAttacksAllowed := false ;
11527: LD_ADDR_EXP 6
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// usSurrender := true ;
11535: LD_ADDR_EXP 7
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11543: LD_INT 1
11545: PPUSH
11546: LD_INT 2
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 80
// if IsDead ( usCommander ) then
11559: LD_EXP 30
11563: PPUSH
11564: CALL_OW 301
11568: IFFALSE 11572
// exit ;
11570: GO 12763
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11572: LD_ADDR_VAR 0 1
11576: PUSH
11577: LD_INT 22
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 60
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11627
// ComStop ( i ) ;
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 141
11625: GO 11613
11627: POP
11628: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: LD_INT 50
11649: PUSH
11650: EMPTY
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 21
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11694
// SetLives ( i , 251 ) ;
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_INT 251
11687: PPUSH
11688: CALL_OW 234
11692: GO 11677
11694: POP
11695: POP
// InGameOn ;
11696: CALL_OW 8
// ComExit ( usCommander ) ;
11700: LD_EXP 30
11704: PPUSH
11705: CALL 53517 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_INT 81
11716: PPUSH
11717: LD_INT 143
11719: PPUSH
11720: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11724: LD_EXP 30
11728: PPUSH
11729: LD_INT 81
11731: PPUSH
11732: LD_INT 139
11734: PPUSH
11735: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11739: LD_INT 81
11741: PPUSH
11742: LD_INT 144
11744: PPUSH
11745: LD_INT 2
11747: PPUSH
11748: LD_INT 10
11750: NEG
11751: PPUSH
11752: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11756: LD_EXP 30
11760: PPUSH
11761: CALL_OW 87
// wait ( 0 0$2 ) ;
11765: LD_INT 70
11767: PPUSH
11768: CALL_OW 67
// if not IsOk ( usCommander ) then
11772: LD_EXP 30
11776: PPUSH
11777: CALL_OW 302
11781: NOT
11782: IFFALSE 11796
// SetLives ( usCommander , 251 ) ;
11784: LD_EXP 30
11788: PPUSH
11789: LD_INT 251
11791: PPUSH
11792: CALL_OW 234
// Say ( usCommander , DCa-Surrender-1 ) ;
11796: LD_EXP 30
11800: PPUSH
11801: LD_STRING DCa-Surrender-1
11803: PPUSH
11804: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11808: LD_EXP 15
11812: PPUSH
11813: LD_STRING DH-Surrender-2
11815: PPUSH
11816: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11820: LD_EXP 15
11824: PPUSH
11825: CALL_OW 310
11829: PPUSH
11830: CALL_OW 247
11834: PUSH
11835: LD_INT 3
11837: EQUAL
11838: IFFALSE 11856
// begin ComExit ( Heike ) ;
11840: LD_EXP 15
11844: PPUSH
11845: CALL 53517 0 1
// wait ( 3 ) ;
11849: LD_INT 3
11851: PPUSH
11852: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11856: LD_EXP 15
11860: PPUSH
11861: LD_INT 82
11863: PPUSH
11864: LD_INT 133
11866: PPUSH
11867: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11871: LD_EXP 15
11875: PPUSH
11876: LD_EXP 30
11880: PPUSH
11881: CALL_OW 179
// wait ( 0 0$3 ) ;
11885: LD_INT 105
11887: PPUSH
11888: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11892: LD_EXP 15
11896: PPUSH
11897: LD_STRING DH-Surrender-3
11899: PPUSH
11900: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11904: LD_EXP 15
11908: PPUSH
11909: LD_STRING DH-Surrender-4
11911: PPUSH
11912: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11916: LD_INT 81
11918: PPUSH
11919: LD_INT 144
11921: PPUSH
11922: LD_INT 2
11924: PPUSH
11925: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11929: LD_INT 1
11931: PPUSH
11932: LD_INT 2
11934: PPUSH
11935: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_INT 22
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 69
11979: PUSH
11980: FOR_IN
11981: IFFALSE 11994
// ComExit ( i ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL 53517 0 1
11992: GO 11980
11994: POP
11995: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 4
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12030: LD_ADDR_VAR 0 2
12034: PUSH
12035: LD_INT 22
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 50
12050: PUSH
12051: EMPTY
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: ST_TO_ADDR
// if sci and hurts then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_VAR 0 2
12076: AND
12077: IFFALSE 12139
// begin for i := 1 to hurts do
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: DOUBLE
12085: LD_INT 1
12087: DEC
12088: ST_TO_ADDR
12089: LD_VAR 0 2
12093: PUSH
12094: FOR_TO
12095: IFFALSE 12137
// if i <= sci then
12097: LD_VAR 0 1
12101: PUSH
12102: LD_VAR 0 3
12106: LESSEQUAL
12107: IFFALSE 12135
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12109: LD_VAR 0 3
12113: PUSH
12114: LD_VAR 0 1
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 2
12124: PUSH
12125: LD_VAR 0 1
12129: ARRAY
12130: PPUSH
12131: CALL_OW 188
12135: GO 12094
12137: POP
12138: POP
// end ; if IsOk ( Givi ) then
12139: LD_EXP 16
12143: PPUSH
12144: CALL_OW 302
12148: IFFALSE 12164
// Say ( Givi , DG-Surrender-5 ) else
12150: LD_EXP 16
12154: PPUSH
12155: LD_STRING DG-Surrender-5
12157: PPUSH
12158: CALL_OW 88
12162: GO 12176
// Say ( Heike , DH-Surrender-a-5 ) ;
12164: LD_EXP 15
12168: PPUSH
12169: LD_STRING DH-Surrender-a-5
12171: PPUSH
12172: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12176: LD_EXP 30
12180: PPUSH
12181: LD_STRING DCa-Surrender-6
12183: PPUSH
12184: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
12188: LD_EXP 30
12192: PPUSH
12193: LD_STRING DCa-Surrender-7
12195: PPUSH
12196: CALL_OW 88
// if IsOk ( Givi ) then
12200: LD_EXP 16
12204: PPUSH
12205: CALL_OW 302
12209: IFFALSE 12225
// Say ( Givi , DG-Surrender-8 ) else
12211: LD_EXP 16
12215: PPUSH
12216: LD_STRING DG-Surrender-8
12218: PPUSH
12219: CALL_OW 88
12223: GO 12237
// Say ( Heike , DH-Surrender-a-8 ) ;
12225: LD_EXP 15
12229: PPUSH
12230: LD_STRING DH-Surrender-a-8
12232: PPUSH
12233: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
12237: LD_EXP 30
12241: PPUSH
12242: LD_STRING DCa-Surrender-9
12244: PPUSH
12245: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
12249: LD_EXP 15
12253: PPUSH
12254: LD_STRING DH-Surrender-10
12256: PPUSH
12257: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
12261: LD_EXP 30
12265: PPUSH
12266: LD_STRING DCa-Surrender-11
12268: PPUSH
12269: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
12273: LD_EXP 15
12277: PPUSH
12278: LD_STRING DH-Surrender-12
12280: PPUSH
12281: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
12285: LD_EXP 30
12289: PPUSH
12290: LD_STRING DCa-Surrender-13
12292: PPUSH
12293: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
12297: LD_EXP 30
12301: PPUSH
12302: LD_STRING DCa-Surrender-14
12304: PPUSH
12305: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
12309: LD_EXP 30
12313: PPUSH
12314: LD_STRING DCa-Surrender-15
12316: PPUSH
12317: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12321: LD_EXP 30
12325: PPUSH
12326: LD_STRING DCa-Surrender-16
12328: PPUSH
12329: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12333: LD_EXP 20
12337: PPUSH
12338: LD_STRING DK-Surrender-17
12340: PPUSH
12341: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12345: LD_EXP 24
12349: PPUSH
12350: LD_STRING DO-Surrender-18
12352: PPUSH
12353: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12357: LD_EXP 24
12361: PPUSH
12362: LD_STRING DO-Surrender-19
12364: PPUSH
12365: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12369: LD_EXP 25
12373: PPUSH
12374: LD_STRING DKs-Surrender-20
12376: PPUSH
12377: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12381: LD_EXP 25
12385: PPUSH
12386: LD_STRING DKs-Surrender-21
12388: PPUSH
12389: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12393: LD_EXP 22
12397: PPUSH
12398: LD_STRING DMar-Surrender-22
12400: PPUSH
12401: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12405: LD_EXP 22
12409: PPUSH
12410: LD_STRING DMar-Surrender-23
12412: PPUSH
12413: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12417: LD_EXP 21
12421: PPUSH
12422: LD_STRING DS-Surrender-24
12424: PPUSH
12425: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12429: LD_EXP 26
12433: PPUSH
12434: LD_STRING DA-Surrender-25
12436: PPUSH
12437: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12441: LD_EXP 18
12445: PPUSH
12446: LD_STRING DI-Surrender-26
12448: PPUSH
12449: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12453: LD_EXP 19
12457: PPUSH
12458: LD_STRING DKam-Surrender-27
12460: PPUSH
12461: CALL_OW 88
// if IsOk ( Givi ) then
12465: LD_EXP 16
12469: PPUSH
12470: CALL_OW 302
12474: IFFALSE 12514
// begin Say ( Givi , DG-Surrender-28 ) ;
12476: LD_EXP 16
12480: PPUSH
12481: LD_STRING DG-Surrender-28
12483: PPUSH
12484: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12488: LD_EXP 16
12492: PPUSH
12493: LD_STRING DG-Surrender-29
12495: PPUSH
12496: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12500: LD_EXP 16
12504: PPUSH
12505: LD_STRING DG-Surrender-30
12507: PPUSH
12508: CALL_OW 88
// end else
12512: GO 12550
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12514: LD_EXP 15
12518: PPUSH
12519: LD_STRING DH-Surrender-a-28
12521: PPUSH
12522: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12526: LD_EXP 15
12530: PPUSH
12531: LD_STRING DH-Surrender-a-29
12533: PPUSH
12534: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12538: LD_EXP 15
12542: PPUSH
12543: LD_STRING DH-Surrender-a-30
12545: PPUSH
12546: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12550: CALL 14510 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12554: LD_INT 22
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL_OW 69
12568: PPUSH
12569: LD_INT 176
12571: PUSH
12572: LD_INT 123
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: PPUSH
12582: CALL 55723 0 2
// if not IsEnvironment ( 190 , 150 ) then
12586: LD_INT 190
12588: PPUSH
12589: LD_INT 150
12591: PPUSH
12592: CALL_OW 351
12596: NOT
12597: IFFALSE 12616
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12599: LD_INT 190
12601: PPUSH
12602: LD_INT 150
12604: PPUSH
12605: LD_INT 2
12607: PPUSH
12608: LD_INT 8
12610: NEG
12611: PPUSH
12612: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12616: LD_INT 193
12618: PPUSH
12619: LD_INT 150
12621: PPUSH
12622: CALL_OW 84
// if IsOk ( Markov ) then
12626: LD_EXP 22
12630: PPUSH
12631: CALL_OW 302
12635: IFFALSE 12651
// Say ( Markov , DMar-Surrender-31 ) else
12637: LD_EXP 22
12641: PPUSH
12642: LD_STRING DMar-Surrender-31
12644: PPUSH
12645: CALL_OW 88
12649: GO 12708
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12651: LD_EXP 27
12655: PPUSH
12656: LD_INT 26
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: PPUSH
12671: LD_STRING DArm-Surrender-a-31
12673: PPUSH
12674: CALL 224 0 2
12678: NOT
12679: IFFALSE 12708
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12681: LD_EXP 27
12685: PPUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 72
12700: PPUSH
12701: LD_STRING DArf-Surrender-a-31
12703: PPUSH
12704: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12708: LD_EXP 15
12712: PPUSH
12713: LD_STRING DH-Surrender-32
12715: PPUSH
12716: CALL_OW 88
// InGameOff ;
12720: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12724: LD_STRING M2
12726: PPUSH
12727: CALL_OW 337
// wait ( 0 0$20 ) ;
12731: LD_INT 700
12733: PPUSH
12734: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12738: CALL 14872 0 0
// russianAttack := true ;
12742: LD_ADDR_EXP 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12750: LD_INT 190
12752: PPUSH
12753: LD_INT 150
12755: PPUSH
12756: LD_INT 2
12758: PPUSH
12759: CALL_OW 331
// end ;
12763: PPOPN 3
12765: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12766: LD_EXP 11
12770: PUSH
12771: LD_INT 2
12773: PPUSH
12774: CALL_OW 463
12778: NOT
12779: AND
12780: PUSH
12781: LD_EXP 15
12785: PPUSH
12786: CALL_OW 302
12790: AND
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 3
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: PUSH
12822: LD_EXP 22
12826: PPUSH
12827: CALL_OW 302
12831: PUSH
12832: LD_EXP 27
12836: PPUSH
12837: LD_INT 50
12839: PUSH
12840: EMPTY
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: OR
12848: AND
12849: IFFALSE 13077
12851: GO 12853
12853: DISABLE
// begin DialogueOn ;
12854: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12858: LD_EXP 15
12862: PPUSH
12863: LD_STRING DH-Heavy-1
12865: PPUSH
12866: CALL_OW 88
// if IsOk ( Markov ) then
12870: LD_EXP 22
12874: PPUSH
12875: CALL_OW 302
12879: IFFALSE 13004
// begin Say ( Markov , DMar-Heavy-2 ) ;
12881: LD_EXP 22
12885: PPUSH
12886: LD_STRING DMar-Heavy-2
12888: PPUSH
12889: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12930: LD_EXP 22
12934: PPUSH
12935: LD_STRING DMar-Heavy-3
12937: PPUSH
12938: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12942: LD_EXP 22
12946: PPUSH
12947: LD_STRING DMar-Heavy-4
12949: PPUSH
12950: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12954: LD_EXP 22
12958: PPUSH
12959: LD_STRING DMar-Heavy-5
12961: PPUSH
12962: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12966: LD_EXP 22
12970: PPUSH
12971: LD_STRING DMar-Heavy-6
12973: PPUSH
12974: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12978: LD_EXP 15
12982: PPUSH
12983: LD_STRING DH-Heavy-7
12985: PPUSH
12986: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12990: LD_EXP 15
12994: PPUSH
12995: LD_STRING DH-Heavy-8
12997: PPUSH
12998: CALL_OW 88
// end else
13002: GO 13061
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13004: LD_EXP 27
13008: PPUSH
13009: LD_INT 26
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: PPUSH
13024: LD_STRING DArm-Heavy-a-2
13026: PPUSH
13027: CALL 224 0 2
13031: NOT
13032: IFFALSE 13061
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13034: LD_EXP 27
13038: PPUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 72
13053: PPUSH
13054: LD_STRING DArf-Heavy-a-2
13056: PPUSH
13057: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13061: LD_EXP 15
13065: PPUSH
13066: LD_STRING DH-Heavy-9
13068: PPUSH
13069: CALL_OW 88
// DialogueOff ;
13073: CALL_OW 7
// end ;
13077: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13078: LD_EXP 34
13082: PPUSH
13083: LD_INT 101
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 72
13097: PUSH
13098: LD_EXP 15
13102: PPUSH
13103: CALL_OW 302
13107: AND
13108: PUSH
13109: LD_EXP 7
13113: NOT
13114: AND
13115: IFFALSE 13258
13117: GO 13119
13119: DISABLE
// begin DialogueOn ;
13120: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13124: LD_EXP 34
13128: PPUSH
13129: LD_INT 101
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 72
13143: PPUSH
13144: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13148: LD_EXP 15
13152: PPUSH
13153: LD_STRING DH-Flank-1
13155: PPUSH
13156: CALL_OW 88
// if IsOk ( Mike ) then
13160: LD_EXP 17
13164: PPUSH
13165: CALL_OW 302
13169: IFFALSE 13185
// Say ( Mike , DM-Flank-2 ) else
13171: LD_EXP 17
13175: PPUSH
13176: LD_STRING DM-Flank-2
13178: PPUSH
13179: CALL_OW 88
13183: GO 13242
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13185: LD_EXP 27
13189: PPUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: PPUSH
13205: LD_STRING DArm-Flank-a-2
13207: PPUSH
13208: CALL 224 0 2
13212: NOT
13213: IFFALSE 13242
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
13215: LD_EXP 27
13219: PPUSH
13220: LD_INT 26
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: PPUSH
13235: LD_STRING DArm-Flank-a-2
13237: PPUSH
13238: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
13242: LD_EXP 15
13246: PPUSH
13247: LD_STRING DH-Flank-3
13249: PPUSH
13250: CALL_OW 88
// DialogueOff ;
13254: CALL_OW 7
// end ;
13258: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
13259: LD_EXP 10
13263: PUSH
13264: LD_EXP 7
13268: NOT
13269: AND
13270: IFFALSE 13494
13272: GO 13274
13274: DISABLE
// begin DialogueOn ;
13275: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
13279: LD_EXP 15
13283: PPUSH
13284: LD_STRING DH-USRC-1
13286: PPUSH
13287: CALL_OW 88
// if IsOk ( Markov ) then
13291: LD_EXP 22
13295: PPUSH
13296: CALL_OW 302
13300: IFFALSE 13316
// Say ( Markov , DMar-USRC-2 ) else
13302: LD_EXP 22
13306: PPUSH
13307: LD_STRING DMar-USRC-2
13309: PPUSH
13310: CALL_OW 88
13314: GO 13373
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
13316: LD_EXP 27
13320: PPUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: PPUSH
13336: LD_STRING DArm-USRC-a-2
13338: PPUSH
13339: CALL 224 0 2
13343: NOT
13344: IFFALSE 13373
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13346: LD_EXP 27
13350: PPUSH
13351: LD_INT 26
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 72
13365: PPUSH
13366: LD_STRING DArf-USRC-a-2
13368: PPUSH
13369: CALL 224 0 2
// DialogueOff ;
13373: CALL_OW 7
// wait ( 0 0$10 ) ;
13377: LD_INT 350
13379: PPUSH
13380: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13384: LD_EXP 15
13388: PPUSH
13389: LD_STRING DH-USRC-3
13391: PPUSH
13392: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13396: LD_INT 35
13398: PPUSH
13399: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13403: LD_INT 2
13405: PPUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 36
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: CALL_OW 292
13443: IFFALSE 13396
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13445: LD_INT 22
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 30
13457: PUSH
13458: LD_INT 36
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13482: LD_EXP 15
13486: PPUSH
13487: LD_STRING DH-USRCFound-1
13489: PPUSH
13490: CALL_OW 88
// end ;
13494: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13495: LD_EXP 20
13499: PPUSH
13500: CALL_OW 256
13504: PUSH
13505: LD_INT 3
13507: LESS
13508: IFFALSE 13545
13510: GO 13512
13512: DISABLE
// begin DialogueOn ;
13513: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13517: LD_EXP 20
13521: PPUSH
13522: LD_STRING DK-Dead-1
13524: PPUSH
13525: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13529: LD_EXP 20
13533: PPUSH
13534: LD_STRING DK-Dead-2
13536: PPUSH
13537: CALL_OW 91
// DialogueOff ;
13541: CALL_OW 7
// end ;
13545: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13546: LD_INT 22
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 2
13558: PUSH
13559: LD_INT 35
13561: PUSH
13562: LD_INT 28
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 34
13571: PUSH
13572: LD_INT 28
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: IFFALSE 13605
13594: GO 13596
13596: DISABLE
// hasRockets := true ;
13597: LD_ADDR_EXP 9
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
13605: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13606: LD_EXP 8
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: NOT
13626: AND
13627: IFFALSE 14289
13629: GO 13631
13631: DISABLE
// begin DialogueOn ;
13632: CALL_OW 6
// if vehLossCounter = 0 then
13636: LD_EXP 14
13640: PUSH
13641: LD_INT 0
13643: EQUAL
13644: IFFALSE 13653
// SetAchievement ( ACH_UNTOUCH ) ;
13646: LD_STRING ACH_UNTOUCH
13648: PPUSH
13649: CALL_OW 543
// if tick < 35 35$00 then
13653: LD_OWVAR 1
13657: PUSH
13658: LD_INT 73500
13660: LESS
13661: IFFALSE 13670
// SetAchievement ( ACH_HSPEED_7 ) ;
13663: LD_STRING ACH_HSPEED_7
13665: PPUSH
13666: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
13670: LD_EXP 15
13674: PPUSH
13675: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13679: LD_EXP 15
13683: PPUSH
13684: LD_STRING DH-End-1
13686: PPUSH
13687: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13691: LD_EXP 23
13695: PPUSH
13696: LD_STRING DShar-End-2
13698: PPUSH
13699: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13703: LD_EXP 20
13707: PPUSH
13708: LD_STRING DK-End-3
13710: PPUSH
13711: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13715: LD_EXP 15
13719: PPUSH
13720: LD_STRING DH-End-4
13722: PPUSH
13723: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13727: LD_EXP 23
13731: PPUSH
13732: LD_STRING DShar-End-5
13734: PPUSH
13735: CALL_OW 94
// if IsOk ( Markov ) then
13739: LD_EXP 22
13743: PPUSH
13744: CALL_OW 302
13748: IFFALSE 13762
// Say ( Kaia , DK-End-6 ) ;
13750: LD_EXP 20
13754: PPUSH
13755: LD_STRING DK-End-6
13757: PPUSH
13758: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13762: LD_EXP 20
13766: PPUSH
13767: LD_STRING DK-End-7
13769: PPUSH
13770: CALL_OW 88
// if IsOk ( Kaia ) then
13774: LD_EXP 20
13778: PPUSH
13779: CALL_OW 302
13783: IFFALSE 13821
// begin Say ( Givi , DG-End-8 ) ;
13785: LD_EXP 16
13789: PPUSH
13790: LD_STRING DG-End-8
13792: PPUSH
13793: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13797: LD_EXP 16
13801: PPUSH
13802: LD_STRING DG-End-9
13804: PPUSH
13805: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13809: LD_EXP 15
13813: PPUSH
13814: LD_STRING DH-End-10
13816: PPUSH
13817: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13821: LD_EXP 15
13825: PPUSH
13826: LD_STRING DH-End-11
13828: PPUSH
13829: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13833: LD_INT 7
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 321
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: IFFALSE 13861
// AddMedal ( med1 , 1 ) else
13849: LD_STRING med1
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 101
13859: GO 13872
// AddMedal ( med1 , - 1 ) ;
13861: LD_STRING med1
13863: PPUSH
13864: LD_INT 1
13866: NEG
13867: PPUSH
13868: CALL_OW 101
// if hasRockets then
13872: LD_EXP 9
13876: IFFALSE 13890
// AddMedal ( med2 , 1 ) else
13878: LD_STRING med2
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 101
13888: GO 13901
// AddMedal ( med2 , - 1 ) ;
13890: LD_STRING med2
13892: PPUSH
13893: LD_INT 1
13895: NEG
13896: PPUSH
13897: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13901: LD_OWVAR 1
13905: PUSH
13906: LD_INT 105000
13908: PUSH
13909: LD_INT 94500
13911: PUSH
13912: LD_INT 84000
13914: PUSH
13915: LD_INT 73500
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: LD_OWVAR 67
13928: ARRAY
13929: LESS
13930: IFFALSE 13944
// AddMedal ( med3 , 1 ) else
13932: LD_STRING med3
13934: PPUSH
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 101
13942: GO 13955
// AddMedal ( med3 , - 1 ) ;
13944: LD_STRING med3
13946: PPUSH
13947: LD_INT 1
13949: NEG
13950: PPUSH
13951: CALL_OW 101
// GiveMedals ( MAIN ) ;
13955: LD_STRING MAIN
13957: PPUSH
13958: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13962: LD_INT 22
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PPUSH
14002: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14006: LD_EXP 30
14010: PPUSH
14011: LD_STRING 07_UsCommander
14013: PPUSH
14014: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14018: LD_INT 22
14020: PUSH
14021: LD_INT 1
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 23
14030: PUSH
14031: LD_INT 1
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 21
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: PUSH
14058: LD_EXP 30
14062: DIFF
14063: PPUSH
14064: LD_STRING 07_Americans
14066: PPUSH
14067: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14071: LD_EXP 15
14075: PPUSH
14076: LD_STRING 07_Heike
14078: PPUSH
14079: CALL_OW 38
// if Aviradze then
14083: LD_EXP 26
14087: IFFALSE 14101
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14089: LD_EXP 26
14093: PPUSH
14094: LD_STRING 07_Aviradze
14096: PPUSH
14097: CALL_OW 38
// if Ibrahim then
14101: LD_EXP 18
14105: IFFALSE 14119
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14107: LD_EXP 18
14111: PPUSH
14112: LD_STRING 07_Ibrahim
14114: PPUSH
14115: CALL_OW 38
// if Kamil then
14119: LD_EXP 19
14123: IFFALSE 14137
// SaveCharacters ( Kamil , 07_Kamil ) ;
14125: LD_EXP 19
14129: PPUSH
14130: LD_STRING 07_Kamil
14132: PPUSH
14133: CALL_OW 38
// if Sophia then
14137: LD_EXP 21
14141: IFFALSE 14155
// SaveCharacters ( Sophia , 07_Sophia ) ;
14143: LD_EXP 21
14147: PPUSH
14148: LD_STRING 07_Sophia
14150: PPUSH
14151: CALL_OW 38
// if Kaia then
14155: LD_EXP 20
14159: IFFALSE 14173
// SaveCharacters ( Kaia , 07_Kaia ) ;
14161: LD_EXP 20
14165: PPUSH
14166: LD_STRING 07_Kaia
14168: PPUSH
14169: CALL_OW 38
// if Givi then
14173: LD_EXP 16
14177: IFFALSE 14191
// SaveCharacters ( Givi , 07_Givi ) ;
14179: LD_EXP 16
14183: PPUSH
14184: LD_STRING 07_Givi
14186: PPUSH
14187: CALL_OW 38
// if Mike then
14191: LD_EXP 17
14195: IFFALSE 14209
// SaveCharacters ( Mike , 07_Mike ) ;
14197: LD_EXP 17
14201: PPUSH
14202: LD_STRING 07_Mike
14204: PPUSH
14205: CALL_OW 38
// if Markov then
14209: LD_EXP 22
14213: IFFALSE 14227
// SaveCharacters ( Markov , 07_Markov ) ;
14215: LD_EXP 22
14219: PPUSH
14220: LD_STRING 07_Markov
14222: PPUSH
14223: CALL_OW 38
// if Kurt then
14227: LD_EXP 25
14231: IFFALSE 14245
// SaveCharacters ( Kurt , 07_Kurt ) ;
14233: LD_EXP 25
14237: PPUSH
14238: LD_STRING 07_Kurt
14240: PPUSH
14241: CALL_OW 38
// if Olaf then
14245: LD_EXP 24
14249: IFFALSE 14263
// SaveCharacters ( Olaf , 07_Olaf ) ;
14251: LD_EXP 24
14255: PPUSH
14256: LD_STRING 07_Olaf
14258: PPUSH
14259: CALL_OW 38
// if heikeSecondSquad then
14263: LD_EXP 27
14267: IFFALSE 14281
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
14269: LD_EXP 27
14273: PPUSH
14274: LD_STRING 07_others
14276: PPUSH
14277: CALL_OW 38
// YouWin ;
14281: CALL_OW 103
// DialogueOff ;
14285: CALL_OW 7
// end ; end_of_file
14289: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
14290: LD_INT 7
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 287
14300: PUSH
14301: LD_INT 12
14303: PUSH
14304: LD_INT 10
14306: PUSH
14307: LD_INT 8
14309: PUSH
14310: LD_INT 8
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: LD_OWVAR 67
14323: ARRAY
14324: LESS
14325: IFFALSE 14352
14327: GO 14329
14329: DISABLE
// begin enable ;
14330: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 5
14336: PPUSH
14337: CALL_OW 12
14341: PPUSH
14342: LD_INT 7
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 55
// end ;
14352: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
14353: LD_INT 8
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 287
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 17
14372: PUSH
14373: LD_INT 14
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: LD_OWVAR 67
14386: ARRAY
14387: LESS
14388: PUSH
14389: LD_OWVAR 1
14393: PUSH
14394: LD_INT 50400
14396: LESS
14397: AND
14398: IFFALSE 14425
14400: GO 14402
14402: DISABLE
// begin enable ;
14403: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14404: LD_INT 1
14406: PPUSH
14407: LD_INT 5
14409: PPUSH
14410: CALL_OW 12
14414: PPUSH
14415: LD_INT 8
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 55
// end ;
14425: END
// every 0 0$40 trigger tick < 8 8$10 do
14426: LD_OWVAR 1
14430: PUSH
14431: LD_INT 17150
14433: LESS
14434: IFFALSE 14467
14436: GO 14438
14438: DISABLE
// begin enable ;
14439: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: PPUSH
14451: LD_INT 130
14453: PPUSH
14454: LD_INT 18
14456: PPUSH
14457: LD_INT 12
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 56
// end ;
14467: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
14468: LD_OWVAR 1
14472: PUSH
14473: LD_INT 12950
14475: LESS
14476: IFFALSE 14509
14478: GO 14480
14480: DISABLE
// begin enable ;
14481: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14482: LD_INT 1
14484: PPUSH
14485: LD_INT 5
14487: PPUSH
14488: CALL_OW 12
14492: PPUSH
14493: LD_INT 172
14495: PPUSH
14496: LD_INT 97
14498: PPUSH
14499: LD_INT 12
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 56
// end ; end_of_file
14509: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// uc_side := 3 ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_INT 3
14524: ST_TO_ADDR
// uc_nation := 3 ;
14525: LD_ADDR_OWVAR 21
14529: PUSH
14530: LD_INT 3
14532: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_INT 184
14540: PUSH
14541: LD_INT 144
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 191
14554: PUSH
14555: LD_INT 147
14557: PUSH
14558: LD_INT 5
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 202
14568: PUSH
14569: LD_INT 151
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 210
14582: PUSH
14583: LD_INT 152
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: ST_TO_ADDR
// for i := 1 to 3 do
14600: LD_ADDR_VAR 0 2
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_INT 3
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14783
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14616: LD_INT 24
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_INT 43
14627: PUSH
14628: LD_INT 44
14630: PUSH
14631: LD_INT 46
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_VAR 0 2
14643: PUSH
14644: LD_INT 3
14646: MOD
14647: PUSH
14648: LD_INT 1
14650: PLUS
14651: ARRAY
14652: PPUSH
14653: LD_INT 40
14655: PPUSH
14656: CALL 20667 0 5
// veh := CreateVehicle ;
14660: LD_ADDR_VAR 0 5
14664: PUSH
14665: CALL_OW 45
14669: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14670: LD_VAR 0 5
14674: PPUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_VAR 0 2
14684: ARRAY
14685: PUSH
14686: LD_INT 3
14688: ARRAY
14689: PPUSH
14690: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14694: LD_VAR 0 5
14698: PPUSH
14699: LD_VAR 0 3
14703: PUSH
14704: LD_VAR 0 2
14708: ARRAY
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: PPUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_VAR 0 2
14723: ARRAY
14724: PUSH
14725: LD_INT 2
14727: ARRAY
14728: PPUSH
14729: LD_INT 0
14731: PPUSH
14732: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14736: LD_INT 0
14738: PPUSH
14739: LD_INT 6
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: LD_INT 8
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: PPUSH
14763: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14767: CALL_OW 44
14771: PPUSH
14772: LD_VAR 0 5
14776: PPUSH
14777: CALL_OW 52
// end ;
14781: GO 14613
14783: POP
14784: POP
// for i := 1 to 4 do
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 4
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14865
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14801: LD_INT 0
14803: PPUSH
14804: LD_INT 6
14806: PUSH
14807: LD_INT 7
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: LD_INT 8
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: LD_OWVAR 67
14826: ARRAY
14827: PPUSH
14828: CALL_OW 381
// un := CreateHuman ;
14832: LD_ADDR_VAR 0 4
14836: PUSH
14837: CALL_OW 44
14841: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14842: LD_VAR 0 4
14846: PPUSH
14847: LD_INT 185
14849: PPUSH
14850: LD_INT 145
14852: PPUSH
14853: LD_INT 6
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 50
// end ;
14863: GO 14798
14865: POP
14866: POP
// end ;
14867: LD_VAR 0 1
14871: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// uc_side := 3 ;
14877: LD_ADDR_OWVAR 20
14881: PUSH
14882: LD_INT 3
14884: ST_TO_ADDR
// if Difficulty > 1 then
14885: LD_OWVAR 67
14889: PUSH
14890: LD_INT 1
14892: GREATER
14893: IFFALSE 15055
// begin uc_nation := 0 ;
14895: LD_ADDR_OWVAR 21
14899: PUSH
14900: LD_INT 0
14902: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14903: LD_ADDR_VAR 0 2
14907: PUSH
14908: DOUBLE
14909: LD_INT 1
14911: DEC
14912: ST_TO_ADDR
14913: LD_INT 4
14915: PUSH
14916: LD_INT 5
14918: PUSH
14919: LD_INT 6
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_OWVAR 67
14931: PUSH
14932: LD_INT 1
14934: PLUS
14935: ARRAY
14936: PUSH
14937: FOR_TO
14938: IFFALSE 15053
// begin hc_class := class_apeman_soldier ;
14940: LD_ADDR_OWVAR 28
14944: PUSH
14945: LD_INT 15
14947: ST_TO_ADDR
// hc_gallery :=  ;
14948: LD_ADDR_OWVAR 33
14952: PUSH
14953: LD_STRING 
14955: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14956: LD_ADDR_OWVAR 26
14960: PUSH
14961: LD_STRING Treci
14963: PUSH
14964: LD_STRING Ivan
14966: PUSH
14967: LD_STRING Yaromir
14969: PUSH
14970: LD_STRING Nadzieia
14972: PUSH
14973: LD_STRING Krasna
14975: PUSH
14976: LD_STRING Piaty
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 1
14989: PPUSH
14990: LD_INT 6
14992: PPUSH
14993: CALL_OW 12
14997: ARRAY
14998: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14999: LD_ADDR_OWVAR 31
15003: PUSH
15004: LD_INT 5
15006: PUSH
15007: LD_INT 0
15009: PUSH
15010: LD_INT 0
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: ST_TO_ADDR
// hc_sex := sex_male ;
15022: LD_ADDR_OWVAR 27
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15030: CALL_OW 44
15034: PPUSH
15035: LD_INT 178
15037: PPUSH
15038: LD_INT 148
15040: PPUSH
15041: LD_INT 6
15043: PPUSH
15044: LD_INT 0
15046: PPUSH
15047: CALL_OW 50
// end ;
15051: GO 14937
15053: POP
15054: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: DOUBLE
15061: LD_INT 1
15063: DEC
15064: ST_TO_ADDR
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: LD_INT 5
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_OWVAR 67
15087: ARRAY
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15257
// begin uc_nation := 3 ;
15092: LD_ADDR_OWVAR 21
15096: PUSH
15097: LD_INT 3
15099: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15100: LD_INT 22
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: LD_INT 45
15111: PUSH
15112: LD_INT 43
15114: PUSH
15115: LD_INT 44
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 3
15130: MOD
15131: PUSH
15132: LD_INT 1
15134: PLUS
15135: ARRAY
15136: PPUSH
15137: LD_INT 44
15139: PPUSH
15140: CALL 20667 0 5
// veh := CreateVehicle ;
15144: LD_ADDR_VAR 0 3
15148: PUSH
15149: CALL_OW 45
15153: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 4
15161: PPUSH
15162: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: LD_INT 0
15176: PPUSH
15177: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15181: LD_INT 0
15183: PPUSH
15184: LD_INT 6
15186: PUSH
15187: LD_INT 7
15189: PUSH
15190: LD_INT 8
15192: PUSH
15193: LD_INT 8
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: LD_OWVAR 67
15206: ARRAY
15207: PPUSH
15208: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 178
15233: PUSH
15234: LD_INT 137
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: PPUSH
15244: CALL 55723 0 2
// wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// end ;
15255: GO 15089
15257: POP
15258: POP
// end ;
15259: LD_VAR 0 1
15263: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
15264: LD_INT 22
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 32
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 69
15292: IFFALSE 15380
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin enable ;
15301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
15302: LD_ADDR_VAR 0 2
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 32
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 69
15335: ST_TO_ADDR
// for i in tmp do
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_VAR 0 2
15345: PUSH
15346: FOR_IN
15347: IFFALSE 15378
// if GetFuel ( i ) < 3 then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 261
15358: PUSH
15359: LD_INT 3
15361: LESS
15362: IFFALSE 15376
// SetFuel ( i , 3 ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_INT 3
15371: PPUSH
15372: CALL_OW 240
15376: GO 15346
15378: POP
15379: POP
// end ;
15380: PPOPN 2
15382: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15383: LD_EXP 8
15387: PUSH
15388: LD_INT 22
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 21
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: AND
15417: IFFALSE 15681
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
// begin enable ;
15427: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 25
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 55
15458: PUSH
15459: EMPTY
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// if mech then
15476: LD_VAR 0 2
15480: IFFALSE 15550
// for i in mech do
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_VAR 0 2
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15548
// begin if IsInArea ( i , escapeArea ) then
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 13
15502: PPUSH
15503: CALL_OW 308
15507: IFFALSE 15520
// RemoveUnit ( i ) else
15509: LD_VAR 0 1
15513: PPUSH
15514: CALL_OW 64
15518: GO 15546
// if IsOk ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 302
15529: IFFALSE 15546
// ComMoveXY ( i , 196 , 155 ) ;
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 196
15538: PPUSH
15539: LD_INT 155
15541: PPUSH
15542: CALL_OW 111
// end ;
15546: GO 15492
15548: POP
15549: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15550: LD_ADDR_VAR 0 3
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 15
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 50
15606: PUSH
15607: EMPTY
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: ST_TO_ADDR
// if tmp then
15620: LD_VAR 0 3
15624: IFFALSE 15681
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 171
15633: PUSH
15634: LD_INT 106
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 145
15643: PUSH
15644: LD_INT 69
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 132
15653: PUSH
15654: LD_INT 38
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 126
15663: PUSH
15664: LD_INT 15
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL 55723 0 2
// end ; end_of_file
15681: PPOPN 3
15683: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// if exist_mode then
15688: LD_VAR 0 2
15692: IFFALSE 15717
// unit := CreateCharacter ( prefix & ident ) else
15694: LD_ADDR_VAR 0 5
15698: PUSH
15699: LD_VAR 0 3
15703: PUSH
15704: LD_VAR 0 1
15708: STR
15709: PPUSH
15710: CALL_OW 34
15714: ST_TO_ADDR
15715: GO 15732
// unit := NewCharacter ( ident ) ;
15717: LD_ADDR_VAR 0 5
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 25
15731: ST_TO_ADDR
// result := unit ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// end ;
15742: LD_VAR 0 4
15746: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
// if not side or not nation then
15751: LD_VAR 0 1
15755: NOT
15756: PUSH
15757: LD_VAR 0 2
15761: NOT
15762: OR
15763: IFFALSE 15767
// exit ;
15765: GO 16535
// case nation of nation_american :
15767: LD_VAR 0 2
15771: PUSH
15772: LD_INT 1
15774: DOUBLE
15775: EQUAL
15776: IFTRUE 15780
15778: GO 15994
15780: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15781: LD_ADDR_VAR 0 4
15785: PUSH
15786: LD_INT 35
15788: PUSH
15789: LD_INT 45
15791: PUSH
15792: LD_INT 46
15794: PUSH
15795: LD_INT 47
15797: PUSH
15798: LD_INT 82
15800: PUSH
15801: LD_INT 83
15803: PUSH
15804: LD_INT 84
15806: PUSH
15807: LD_INT 85
15809: PUSH
15810: LD_INT 86
15812: PUSH
15813: LD_INT 1
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: LD_INT 6
15821: PUSH
15822: LD_INT 15
15824: PUSH
15825: LD_INT 16
15827: PUSH
15828: LD_INT 7
15830: PUSH
15831: LD_INT 12
15833: PUSH
15834: LD_INT 13
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: LD_INT 14
15842: PUSH
15843: LD_INT 20
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 25
15854: PUSH
15855: LD_INT 32
15857: PUSH
15858: LD_INT 27
15860: PUSH
15861: LD_INT 36
15863: PUSH
15864: LD_INT 69
15866: PUSH
15867: LD_INT 39
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 40
15875: PUSH
15876: LD_INT 48
15878: PUSH
15879: LD_INT 49
15881: PUSH
15882: LD_INT 50
15884: PUSH
15885: LD_INT 51
15887: PUSH
15888: LD_INT 52
15890: PUSH
15891: LD_INT 53
15893: PUSH
15894: LD_INT 54
15896: PUSH
15897: LD_INT 55
15899: PUSH
15900: LD_INT 56
15902: PUSH
15903: LD_INT 57
15905: PUSH
15906: LD_INT 58
15908: PUSH
15909: LD_INT 59
15911: PUSH
15912: LD_INT 60
15914: PUSH
15915: LD_INT 61
15917: PUSH
15918: LD_INT 62
15920: PUSH
15921: LD_INT 80
15923: PUSH
15924: LD_INT 82
15926: PUSH
15927: LD_INT 83
15929: PUSH
15930: LD_INT 84
15932: PUSH
15933: LD_INT 85
15935: PUSH
15936: LD_INT 86
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 16459
15994: LD_INT 2
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16228
16002: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: LD_INT 35
16010: PUSH
16011: LD_INT 45
16013: PUSH
16014: LD_INT 46
16016: PUSH
16017: LD_INT 47
16019: PUSH
16020: LD_INT 82
16022: PUSH
16023: LD_INT 83
16025: PUSH
16026: LD_INT 84
16028: PUSH
16029: LD_INT 85
16031: PUSH
16032: LD_INT 87
16034: PUSH
16035: LD_INT 70
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 3
16046: PUSH
16047: LD_INT 4
16049: PUSH
16050: LD_INT 5
16052: PUSH
16053: LD_INT 6
16055: PUSH
16056: LD_INT 15
16058: PUSH
16059: LD_INT 18
16061: PUSH
16062: LD_INT 7
16064: PUSH
16065: LD_INT 17
16067: PUSH
16068: LD_INT 8
16070: PUSH
16071: LD_INT 20
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 72
16082: PUSH
16083: LD_INT 26
16085: PUSH
16086: LD_INT 69
16088: PUSH
16089: LD_INT 39
16091: PUSH
16092: LD_INT 40
16094: PUSH
16095: LD_INT 41
16097: PUSH
16098: LD_INT 42
16100: PUSH
16101: LD_INT 43
16103: PUSH
16104: LD_INT 48
16106: PUSH
16107: LD_INT 49
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: LD_INT 51
16115: PUSH
16116: LD_INT 52
16118: PUSH
16119: LD_INT 53
16121: PUSH
16122: LD_INT 54
16124: PUSH
16125: LD_INT 55
16127: PUSH
16128: LD_INT 56
16130: PUSH
16131: LD_INT 60
16133: PUSH
16134: LD_INT 61
16136: PUSH
16137: LD_INT 62
16139: PUSH
16140: LD_INT 66
16142: PUSH
16143: LD_INT 67
16145: PUSH
16146: LD_INT 68
16148: PUSH
16149: LD_INT 81
16151: PUSH
16152: LD_INT 82
16154: PUSH
16155: LD_INT 83
16157: PUSH
16158: LD_INT 84
16160: PUSH
16161: LD_INT 85
16163: PUSH
16164: LD_INT 87
16166: PUSH
16167: LD_INT 88
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: ST_TO_ADDR
16226: GO 16459
16228: LD_INT 3
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16458
16236: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16237: LD_ADDR_VAR 0 4
16241: PUSH
16242: LD_INT 46
16244: PUSH
16245: LD_INT 47
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 82
16256: PUSH
16257: LD_INT 83
16259: PUSH
16260: LD_INT 84
16262: PUSH
16263: LD_INT 85
16265: PUSH
16266: LD_INT 86
16268: PUSH
16269: LD_INT 11
16271: PUSH
16272: LD_INT 9
16274: PUSH
16275: LD_INT 20
16277: PUSH
16278: LD_INT 19
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 24
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 28
16295: PUSH
16296: LD_INT 29
16298: PUSH
16299: LD_INT 30
16301: PUSH
16302: LD_INT 31
16304: PUSH
16305: LD_INT 37
16307: PUSH
16308: LD_INT 38
16310: PUSH
16311: LD_INT 32
16313: PUSH
16314: LD_INT 27
16316: PUSH
16317: LD_INT 33
16319: PUSH
16320: LD_INT 69
16322: PUSH
16323: LD_INT 39
16325: PUSH
16326: LD_INT 34
16328: PUSH
16329: LD_INT 40
16331: PUSH
16332: LD_INT 71
16334: PUSH
16335: LD_INT 23
16337: PUSH
16338: LD_INT 44
16340: PUSH
16341: LD_INT 48
16343: PUSH
16344: LD_INT 49
16346: PUSH
16347: LD_INT 50
16349: PUSH
16350: LD_INT 51
16352: PUSH
16353: LD_INT 52
16355: PUSH
16356: LD_INT 53
16358: PUSH
16359: LD_INT 54
16361: PUSH
16362: LD_INT 55
16364: PUSH
16365: LD_INT 56
16367: PUSH
16368: LD_INT 57
16370: PUSH
16371: LD_INT 58
16373: PUSH
16374: LD_INT 59
16376: PUSH
16377: LD_INT 63
16379: PUSH
16380: LD_INT 64
16382: PUSH
16383: LD_INT 65
16385: PUSH
16386: LD_INT 82
16388: PUSH
16389: LD_INT 83
16391: PUSH
16392: LD_INT 84
16394: PUSH
16395: LD_INT 85
16397: PUSH
16398: LD_INT 86
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
16456: GO 16459
16458: POP
// if state > - 1 and state < 3 then
16459: LD_VAR 0 3
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: GREATER
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 3
16476: LESS
16477: AND
16478: IFFALSE 16535
// for i in result do
16480: LD_ADDR_VAR 0 5
16484: PUSH
16485: LD_VAR 0 4
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16533
// if GetTech ( i , side ) <> state then
16493: LD_VAR 0 5
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 321
16507: PUSH
16508: LD_VAR 0 3
16512: NONEQUAL
16513: IFFALSE 16531
// result := result diff i ;
16515: LD_ADDR_VAR 0 4
16519: PUSH
16520: LD_VAR 0 4
16524: PUSH
16525: LD_VAR 0 5
16529: DIFF
16530: ST_TO_ADDR
16531: GO 16490
16533: POP
16534: POP
// end ;
16535: LD_VAR 0 4
16539: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16540: LD_INT 0
16542: PPUSH
16543: PPUSH
16544: PPUSH
// result := true ;
16545: LD_ADDR_VAR 0 3
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16553: LD_ADDR_VAR 0 5
16557: PUSH
16558: LD_VAR 0 2
16562: PPUSH
16563: CALL_OW 480
16567: ST_TO_ADDR
// if not tmp then
16568: LD_VAR 0 5
16572: NOT
16573: IFFALSE 16577
// exit ;
16575: GO 16626
// for i in tmp do
16577: LD_ADDR_VAR 0 4
16581: PUSH
16582: LD_VAR 0 5
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16624
// if GetTech ( i , side ) <> state_researched then
16590: LD_VAR 0 4
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 321
16604: PUSH
16605: LD_INT 2
16607: NONEQUAL
16608: IFFALSE 16622
// begin result := false ;
16610: LD_ADDR_VAR 0 3
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// exit ;
16618: POP
16619: POP
16620: GO 16626
// end ;
16622: GO 16587
16624: POP
16625: POP
// end ;
16626: LD_VAR 0 3
16630: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
16645: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16646: LD_VAR 0 1
16650: NOT
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 257
16661: PUSH
16662: LD_INT 9
16664: NONEQUAL
16665: OR
16666: IFFALSE 16670
// exit ;
16668: GO 17243
// side := GetSide ( unit ) ;
16670: LD_ADDR_VAR 0 9
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 255
16684: ST_TO_ADDR
// tech_space := tech_spacanom ;
16685: LD_ADDR_VAR 0 12
16689: PUSH
16690: LD_INT 29
16692: ST_TO_ADDR
// tech_time := tech_taurad ;
16693: LD_ADDR_VAR 0 13
16697: PUSH
16698: LD_INT 28
16700: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16701: LD_ADDR_VAR 0 11
16705: PUSH
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 310
16715: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16716: LD_VAR 0 11
16720: PPUSH
16721: CALL_OW 247
16725: PUSH
16726: LD_INT 2
16728: EQUAL
16729: IFFALSE 16733
// exit ;
16731: GO 17243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16733: LD_ADDR_VAR 0 8
16737: PUSH
16738: LD_INT 81
16740: PUSH
16741: LD_VAR 0 9
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 3
16752: PUSH
16753: LD_INT 21
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: ST_TO_ADDR
// if not tmp then
16776: LD_VAR 0 8
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 17243
// if in_unit then
16785: LD_VAR 0 11
16789: IFFALSE 16813
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16791: LD_ADDR_VAR 0 10
16795: PUSH
16796: LD_VAR 0 8
16800: PPUSH
16801: LD_VAR 0 11
16805: PPUSH
16806: CALL_OW 74
16810: ST_TO_ADDR
16811: GO 16833
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16813: LD_ADDR_VAR 0 10
16817: PUSH
16818: LD_VAR 0 8
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 74
16832: ST_TO_ADDR
// if not enemy then
16833: LD_VAR 0 10
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 17243
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16842: LD_VAR 0 11
16846: PUSH
16847: LD_VAR 0 11
16851: PPUSH
16852: LD_VAR 0 10
16856: PPUSH
16857: CALL_OW 296
16861: PUSH
16862: LD_INT 13
16864: GREATER
16865: AND
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_VAR 0 10
16876: PPUSH
16877: CALL_OW 296
16881: PUSH
16882: LD_INT 12
16884: GREATER
16885: OR
16886: IFFALSE 16890
// exit ;
16888: GO 17243
// missile := [ 1 ] ;
16890: LD_ADDR_VAR 0 14
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16901: LD_VAR 0 9
16905: PPUSH
16906: LD_VAR 0 12
16910: PPUSH
16911: CALL_OW 325
16915: IFFALSE 16944
// missile := Replace ( missile , missile + 1 , 2 ) ;
16917: LD_ADDR_VAR 0 14
16921: PUSH
16922: LD_VAR 0 14
16926: PPUSH
16927: LD_VAR 0 14
16931: PUSH
16932: LD_INT 1
16934: PLUS
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16944: LD_VAR 0 9
16948: PPUSH
16949: LD_VAR 0 13
16953: PPUSH
16954: CALL_OW 325
16958: PUSH
16959: LD_VAR 0 10
16963: PPUSH
16964: CALL_OW 255
16968: PPUSH
16969: LD_VAR 0 13
16973: PPUSH
16974: CALL_OW 325
16978: NOT
16979: AND
16980: IFFALSE 17009
// missile := Replace ( missile , missile + 1 , 3 ) ;
16982: LD_ADDR_VAR 0 14
16986: PUSH
16987: LD_VAR 0 14
16991: PPUSH
16992: LD_VAR 0 14
16996: PUSH
16997: LD_INT 1
16999: PLUS
17000: PPUSH
17001: LD_INT 3
17003: PPUSH
17004: CALL_OW 1
17008: ST_TO_ADDR
// if missile < 2 then
17009: LD_VAR 0 14
17013: PUSH
17014: LD_INT 2
17016: LESS
17017: IFFALSE 17021
// exit ;
17019: GO 17243
// x := GetX ( enemy ) ;
17021: LD_ADDR_VAR 0 4
17025: PUSH
17026: LD_VAR 0 10
17030: PPUSH
17031: CALL_OW 250
17035: ST_TO_ADDR
// y := GetY ( enemy ) ;
17036: LD_ADDR_VAR 0 5
17040: PUSH
17041: LD_VAR 0 10
17045: PPUSH
17046: CALL_OW 251
17050: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17051: LD_ADDR_VAR 0 6
17055: PUSH
17056: LD_VAR 0 4
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 12
17072: PLUS
17073: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17074: LD_ADDR_VAR 0 7
17078: PUSH
17079: LD_VAR 0 5
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 12
17095: PLUS
17096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17097: LD_VAR 0 6
17101: PPUSH
17102: LD_VAR 0 7
17106: PPUSH
17107: CALL_OW 488
17111: NOT
17112: IFFALSE 17134
// begin _x := x ;
17114: LD_ADDR_VAR 0 6
17118: PUSH
17119: LD_VAR 0 4
17123: ST_TO_ADDR
// _y := y ;
17124: LD_ADDR_VAR 0 7
17128: PUSH
17129: LD_VAR 0 5
17133: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_INT 1
17141: PPUSH
17142: LD_VAR 0 14
17146: PPUSH
17147: CALL_OW 12
17151: ST_TO_ADDR
// case i of 1 :
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 1
17159: DOUBLE
17160: EQUAL
17161: IFTRUE 17165
17163: GO 17182
17165: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_VAR 0 10
17175: PPUSH
17176: CALL_OW 115
17180: GO 17243
17182: LD_INT 2
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17212
17190: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_VAR 0 6
17200: PPUSH
17201: LD_VAR 0 7
17205: PPUSH
17206: CALL_OW 153
17210: GO 17243
17212: LD_INT 3
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17242
17220: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17221: LD_VAR 0 1
17225: PPUSH
17226: LD_VAR 0 6
17230: PPUSH
17231: LD_VAR 0 7
17235: PPUSH
17236: CALL_OW 154
17240: GO 17243
17242: POP
// end ;
17243: LD_VAR 0 2
17247: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
// if not unit or not building then
17256: LD_VAR 0 1
17260: NOT
17261: PUSH
17262: LD_VAR 0 2
17266: NOT
17267: OR
17268: IFFALSE 17272
// exit ;
17270: GO 17430
// x := GetX ( building ) ;
17272: LD_ADDR_VAR 0 5
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: CALL_OW 250
17286: ST_TO_ADDR
// y := GetY ( building ) ;
17287: LD_ADDR_VAR 0 6
17291: PUSH
17292: LD_VAR 0 2
17296: PPUSH
17297: CALL_OW 251
17301: ST_TO_ADDR
// for i = 0 to 5 do
17302: LD_ADDR_VAR 0 4
17306: PUSH
17307: DOUBLE
17308: LD_INT 0
17310: DEC
17311: ST_TO_ADDR
17312: LD_INT 5
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17428
// begin _x := ShiftX ( x , i , 3 ) ;
17318: LD_ADDR_VAR 0 7
17322: PUSH
17323: LD_VAR 0 5
17327: PPUSH
17328: LD_VAR 0 4
17332: PPUSH
17333: LD_INT 3
17335: PPUSH
17336: CALL_OW 272
17340: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17341: LD_ADDR_VAR 0 8
17345: PUSH
17346: LD_VAR 0 6
17350: PPUSH
17351: LD_VAR 0 4
17355: PPUSH
17356: LD_INT 3
17358: PPUSH
17359: CALL_OW 273
17363: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17364: LD_VAR 0 7
17368: PPUSH
17369: LD_VAR 0 8
17373: PPUSH
17374: CALL_OW 488
17378: NOT
17379: IFFALSE 17383
// continue ;
17381: GO 17315
// if HexInfo ( _x , _y ) = 0 then
17383: LD_VAR 0 7
17387: PPUSH
17388: LD_VAR 0 8
17392: PPUSH
17393: CALL_OW 428
17397: PUSH
17398: LD_INT 0
17400: EQUAL
17401: IFFALSE 17426
// begin ComMoveXY ( unit , _x , _y ) ;
17403: LD_VAR 0 1
17407: PPUSH
17408: LD_VAR 0 7
17412: PPUSH
17413: LD_VAR 0 8
17417: PPUSH
17418: CALL_OW 111
// exit ;
17422: POP
17423: POP
17424: GO 17430
// end ; end ;
17426: GO 17315
17428: POP
17429: POP
// end ;
17430: LD_VAR 0 3
17434: RET
// export function ScanBase ( side , base_area ) ; begin
17435: LD_INT 0
17437: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 81
17450: PUSH
17451: LD_VAR 0 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 70
17464: ST_TO_ADDR
// end ;
17465: LD_VAR 0 3
17469: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
// result := false ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// side := GetSide ( unit ) ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 255
17498: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17499: LD_ADDR_VAR 0 4
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: CALL_OW 248
17513: ST_TO_ADDR
// case nat of 1 :
17514: LD_VAR 0 4
17518: PUSH
17519: LD_INT 1
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17538
17527: POP
// tech := tech_lassight ; 2 :
17528: LD_ADDR_VAR 0 5
17532: PUSH
17533: LD_INT 12
17535: ST_TO_ADDR
17536: GO 17577
17538: LD_INT 2
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17557
17546: POP
// tech := tech_mortar ; 3 :
17547: LD_ADDR_VAR 0 5
17551: PUSH
17552: LD_INT 41
17554: ST_TO_ADDR
17555: GO 17577
17557: LD_INT 3
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17576
17565: POP
// tech := tech_bazooka ; end ;
17566: LD_ADDR_VAR 0 5
17570: PUSH
17571: LD_INT 44
17573: ST_TO_ADDR
17574: GO 17577
17576: POP
// if Researched ( side , tech ) then
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_VAR 0 5
17586: PPUSH
17587: CALL_OW 325
17591: IFFALSE 17618
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 5
17600: PUSH
17601: LD_INT 8
17603: PUSH
17604: LD_INT 9
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_VAR 0 4
17616: ARRAY
17617: ST_TO_ADDR
// end ;
17618: LD_VAR 0 2
17622: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
17627: PPUSH
// if not mines then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17637: LD_ADDR_VAR 0 5
17641: PUSH
17642: LD_INT 81
17644: PUSH
17645: LD_VAR 0 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// for i in mines do
17680: LD_ADDR_VAR 0 4
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17779
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17693: LD_VAR 0 4
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 4
17706: PUSH
17707: LD_INT 2
17709: ARRAY
17710: PPUSH
17711: CALL_OW 458
17715: NOT
17716: IFFALSE 17720
// continue ;
17718: GO 17690
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: LD_VAR 0 4
17733: PUSH
17734: LD_INT 2
17736: ARRAY
17737: PPUSH
17738: CALL_OW 428
17742: PUSH
17743: LD_VAR 0 5
17747: IN
17748: IFFALSE 17777
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17750: LD_VAR 0 4
17754: PUSH
17755: LD_INT 1
17757: ARRAY
17758: PPUSH
17759: LD_VAR 0 4
17763: PUSH
17764: LD_INT 2
17766: ARRAY
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 456
// end ;
17777: GO 17690
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 3
17785: RET
// export function Count ( array ) ; begin
17786: LD_INT 0
17788: PPUSH
// result := array + 0 ;
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_VAR 0 1
17798: PUSH
17799: LD_INT 0
17801: PLUS
17802: ST_TO_ADDR
// end ;
17803: LD_VAR 0 2
17807: RET
// export function IsEmpty ( building ) ; begin
17808: LD_INT 0
17810: PPUSH
// if not building then
17811: LD_VAR 0 1
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17863
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_VAR 0 1
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 255
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 58
17849: PUSH
17850: EMPTY
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: IN
17862: ST_TO_ADDR
// end ;
17863: LD_VAR 0 2
17867: RET
// export function IsNotFull ( building ) ; var places ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
// if not building then
17872: LD_VAR 0 1
17876: NOT
17877: IFFALSE 17881
// exit ;
17879: GO 18052
// result := false ;
17881: LD_ADDR_VAR 0 2
17885: PUSH
17886: LD_INT 0
17888: ST_TO_ADDR
// places := 0 ;
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_INT 0
17896: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 266
17906: PUSH
17907: LD_INT 0
17909: DOUBLE
17910: EQUAL
17911: IFTRUE 17969
17913: LD_INT 1
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17969
17919: LD_INT 6
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17969
17925: LD_INT 7
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17969
17931: LD_INT 8
17933: DOUBLE
17934: EQUAL
17935: IFTRUE 17969
17937: LD_INT 4
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17969
17943: LD_INT 5
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17969
17949: LD_INT 2
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17969
17955: LD_INT 3
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17969
17961: LD_INT 35
17963: DOUBLE
17964: EQUAL
17965: IFTRUE 17969
17967: GO 17980
17969: POP
// places := 6 ; b_bunker , b_breastwork :
17970: LD_ADDR_VAR 0 3
17974: PUSH
17975: LD_INT 6
17977: ST_TO_ADDR
17978: GO 18025
17980: LD_INT 32
17982: DOUBLE
17983: EQUAL
17984: IFTRUE 17994
17986: LD_INT 31
17988: DOUBLE
17989: EQUAL
17990: IFTRUE 17994
17992: GO 18005
17994: POP
// places := 1 ; b_control_tower :
17995: LD_ADDR_VAR 0 3
17999: PUSH
18000: LD_INT 1
18002: ST_TO_ADDR
18003: GO 18025
18005: LD_INT 36
18007: DOUBLE
18008: EQUAL
18009: IFTRUE 18013
18011: GO 18024
18013: POP
// places := 3 ; end ;
18014: LD_ADDR_VAR 0 3
18018: PUSH
18019: LD_INT 3
18021: ST_TO_ADDR
18022: GO 18025
18024: POP
// if places then
18025: LD_VAR 0 3
18029: IFFALSE 18052
// result := UnitsInside ( building ) < places ;
18031: LD_ADDR_VAR 0 2
18035: PUSH
18036: LD_VAR 0 1
18040: PPUSH
18041: CALL_OW 313
18045: PUSH
18046: LD_VAR 0 3
18050: LESS
18051: ST_TO_ADDR
// end ;
18052: LD_VAR 0 2
18056: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
18061: PPUSH
18062: PPUSH
// tmp := [ ] ;
18063: LD_ADDR_VAR 0 3
18067: PUSH
18068: EMPTY
18069: ST_TO_ADDR
// list := [ ] ;
18070: LD_ADDR_VAR 0 5
18074: PUSH
18075: EMPTY
18076: ST_TO_ADDR
// for i = 16 to 25 do
18077: LD_ADDR_VAR 0 4
18081: PUSH
18082: DOUBLE
18083: LD_INT 16
18085: DEC
18086: ST_TO_ADDR
18087: LD_INT 25
18089: PUSH
18090: FOR_TO
18091: IFFALSE 18164
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18093: LD_ADDR_VAR 0 3
18097: PUSH
18098: LD_VAR 0 3
18102: PUSH
18103: LD_INT 22
18105: PUSH
18106: LD_VAR 0 1
18110: PPUSH
18111: CALL_OW 255
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 91
18122: PUSH
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 6
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 30
18138: PUSH
18139: LD_VAR 0 4
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: PPUSH
18156: CALL_OW 69
18160: ADD
18161: ST_TO_ADDR
18162: GO 18090
18164: POP
18165: POP
// for i = 1 to tmp do
18166: LD_ADDR_VAR 0 4
18170: PUSH
18171: DOUBLE
18172: LD_INT 1
18174: DEC
18175: ST_TO_ADDR
18176: LD_VAR 0 3
18180: PUSH
18181: FOR_TO
18182: IFFALSE 18270
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18184: LD_ADDR_VAR 0 5
18188: PUSH
18189: LD_VAR 0 5
18193: PUSH
18194: LD_VAR 0 3
18198: PUSH
18199: LD_VAR 0 4
18203: ARRAY
18204: PPUSH
18205: CALL_OW 266
18209: PUSH
18210: LD_VAR 0 3
18214: PUSH
18215: LD_VAR 0 4
18219: ARRAY
18220: PPUSH
18221: CALL_OW 250
18225: PUSH
18226: LD_VAR 0 3
18230: PUSH
18231: LD_VAR 0 4
18235: ARRAY
18236: PPUSH
18237: CALL_OW 251
18241: PUSH
18242: LD_VAR 0 3
18246: PUSH
18247: LD_VAR 0 4
18251: ARRAY
18252: PPUSH
18253: CALL_OW 254
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: ADD
18267: ST_TO_ADDR
18268: GO 18181
18270: POP
18271: POP
// result := list ;
18272: LD_ADDR_VAR 0 2
18276: PUSH
18277: LD_VAR 0 5
18281: ST_TO_ADDR
// end ;
18282: LD_VAR 0 2
18286: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18287: LD_INT 0
18289: PPUSH
18290: PPUSH
18291: PPUSH
18292: PPUSH
18293: PPUSH
18294: PPUSH
18295: PPUSH
// if not factory then
18296: LD_VAR 0 1
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18898
// if control = control_apeman then
18305: LD_VAR 0 4
18309: PUSH
18310: LD_INT 5
18312: EQUAL
18313: IFFALSE 18422
// begin tmp := UnitsInside ( factory ) ;
18315: LD_ADDR_VAR 0 8
18319: PUSH
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 313
18329: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18330: LD_VAR 0 8
18334: PPUSH
18335: LD_INT 25
18337: PUSH
18338: LD_INT 12
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PPUSH
18345: CALL_OW 72
18349: NOT
18350: IFFALSE 18360
// control := control_manual ;
18352: LD_ADDR_VAR 0 4
18356: PUSH
18357: LD_INT 1
18359: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18360: LD_ADDR_VAR 0 8
18364: PUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL 18057 0 1
18374: ST_TO_ADDR
// if tmp then
18375: LD_VAR 0 8
18379: IFFALSE 18422
// begin for i in tmp do
18381: LD_ADDR_VAR 0 7
18385: PUSH
18386: LD_VAR 0 8
18390: PUSH
18391: FOR_IN
18392: IFFALSE 18420
// if i [ 1 ] = b_ext_radio then
18394: LD_VAR 0 7
18398: PUSH
18399: LD_INT 1
18401: ARRAY
18402: PUSH
18403: LD_INT 22
18405: EQUAL
18406: IFFALSE 18418
// begin control := control_remote ;
18408: LD_ADDR_VAR 0 4
18412: PUSH
18413: LD_INT 2
18415: ST_TO_ADDR
// break ;
18416: GO 18420
// end ;
18418: GO 18391
18420: POP
18421: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18422: LD_VAR 0 1
18426: PPUSH
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_VAR 0 4
18441: PPUSH
18442: LD_VAR 0 5
18446: PPUSH
18447: CALL_OW 448
18451: IFFALSE 18486
// begin result := [ chassis , engine , control , weapon ] ;
18453: LD_ADDR_VAR 0 6
18457: PUSH
18458: LD_VAR 0 2
18462: PUSH
18463: LD_VAR 0 3
18467: PUSH
18468: LD_VAR 0 4
18472: PUSH
18473: LD_VAR 0 5
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: ST_TO_ADDR
// exit ;
18484: GO 18898
// end ; _chassis := AvailableChassisList ( factory ) ;
18486: LD_ADDR_VAR 0 9
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 475
18500: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18501: LD_ADDR_VAR 0 11
18505: PUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 476
18515: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18516: LD_ADDR_VAR 0 12
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 477
18530: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18531: LD_ADDR_VAR 0 10
18535: PUSH
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL_OW 478
18545: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18546: LD_VAR 0 9
18550: NOT
18551: PUSH
18552: LD_VAR 0 11
18556: NOT
18557: OR
18558: PUSH
18559: LD_VAR 0 12
18563: NOT
18564: OR
18565: PUSH
18566: LD_VAR 0 10
18570: NOT
18571: OR
18572: IFFALSE 18607
// begin result := [ chassis , engine , control , weapon ] ;
18574: LD_ADDR_VAR 0 6
18578: PUSH
18579: LD_VAR 0 2
18583: PUSH
18584: LD_VAR 0 3
18588: PUSH
18589: LD_VAR 0 4
18593: PUSH
18594: LD_VAR 0 5
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: ST_TO_ADDR
// exit ;
18605: GO 18898
// end ; if not chassis in _chassis then
18607: LD_VAR 0 2
18611: PUSH
18612: LD_VAR 0 9
18616: IN
18617: NOT
18618: IFFALSE 18644
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18620: LD_ADDR_VAR 0 2
18624: PUSH
18625: LD_VAR 0 9
18629: PUSH
18630: LD_INT 1
18632: PPUSH
18633: LD_VAR 0 9
18637: PPUSH
18638: CALL_OW 12
18642: ARRAY
18643: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_VAR 0 3
18653: PPUSH
18654: CALL 18903 0 2
18658: NOT
18659: IFFALSE 18718
// repeat engine := _engine [ 1 ] ;
18661: LD_ADDR_VAR 0 3
18665: PUSH
18666: LD_VAR 0 11
18670: PUSH
18671: LD_INT 1
18673: ARRAY
18674: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18675: LD_ADDR_VAR 0 11
18679: PUSH
18680: LD_VAR 0 11
18684: PPUSH
18685: LD_INT 1
18687: PPUSH
18688: CALL_OW 3
18692: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: CALL 18903 0 2
18707: PUSH
18708: LD_VAR 0 11
18712: PUSH
18713: EMPTY
18714: EQUAL
18715: OR
18716: IFFALSE 18661
// if not control in _control then
18718: LD_VAR 0 4
18722: PUSH
18723: LD_VAR 0 12
18727: IN
18728: NOT
18729: IFFALSE 18755
// control := _control [ rand ( 1 , _control ) ] ;
18731: LD_ADDR_VAR 0 4
18735: PUSH
18736: LD_VAR 0 12
18740: PUSH
18741: LD_INT 1
18743: PPUSH
18744: LD_VAR 0 12
18748: PPUSH
18749: CALL_OW 12
18753: ARRAY
18754: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_VAR 0 5
18764: PPUSH
18765: CALL 19123 0 2
18769: NOT
18770: IFFALSE 18829
// repeat weapon := _weapon [ 1 ] ;
18772: LD_ADDR_VAR 0 5
18776: PUSH
18777: LD_VAR 0 10
18781: PUSH
18782: LD_INT 1
18784: ARRAY
18785: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18786: LD_ADDR_VAR 0 10
18790: PUSH
18791: LD_VAR 0 10
18795: PPUSH
18796: LD_INT 1
18798: PPUSH
18799: CALL_OW 3
18803: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18804: LD_VAR 0 2
18808: PPUSH
18809: LD_VAR 0 5
18813: PPUSH
18814: CALL 19123 0 2
18818: PUSH
18819: LD_VAR 0 10
18823: PUSH
18824: EMPTY
18825: EQUAL
18826: OR
18827: IFFALSE 18772
// result := [ ] ;
18829: LD_ADDR_VAR 0 6
18833: PUSH
18834: EMPTY
18835: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18836: LD_VAR 0 1
18840: PPUSH
18841: LD_VAR 0 2
18845: PPUSH
18846: LD_VAR 0 3
18850: PPUSH
18851: LD_VAR 0 4
18855: PPUSH
18856: LD_VAR 0 5
18860: PPUSH
18861: CALL_OW 448
18865: IFFALSE 18898
// result := [ chassis , engine , control , weapon ] ;
18867: LD_ADDR_VAR 0 6
18871: PUSH
18872: LD_VAR 0 2
18876: PUSH
18877: LD_VAR 0 3
18881: PUSH
18882: LD_VAR 0 4
18886: PUSH
18887: LD_VAR 0 5
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: ST_TO_ADDR
// end ;
18898: LD_VAR 0 6
18902: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18903: LD_INT 0
18905: PPUSH
// if not chassis or not engine then
18906: LD_VAR 0 1
18910: NOT
18911: PUSH
18912: LD_VAR 0 2
18916: NOT
18917: OR
18918: IFFALSE 18922
// exit ;
18920: GO 19118
// case engine of engine_solar :
18922: LD_VAR 0 2
18926: PUSH
18927: LD_INT 2
18929: DOUBLE
18930: EQUAL
18931: IFTRUE 18935
18933: GO 18973
18935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18936: LD_ADDR_VAR 0 3
18940: PUSH
18941: LD_INT 11
18943: PUSH
18944: LD_INT 12
18946: PUSH
18947: LD_INT 13
18949: PUSH
18950: LD_INT 14
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: LD_INT 3
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: ST_TO_ADDR
18971: GO 19102
18973: LD_INT 1
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 19043
18981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18982: LD_ADDR_VAR 0 3
18986: PUSH
18987: LD_INT 11
18989: PUSH
18990: LD_INT 12
18992: PUSH
18993: LD_INT 13
18995: PUSH
18996: LD_INT 14
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: LD_INT 2
19004: PUSH
19005: LD_INT 3
19007: PUSH
19008: LD_INT 4
19010: PUSH
19011: LD_INT 5
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 23
19019: PUSH
19020: LD_INT 22
19022: PUSH
19023: LD_INT 24
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: ST_TO_ADDR
19041: GO 19102
19043: LD_INT 3
19045: DOUBLE
19046: EQUAL
19047: IFTRUE 19051
19049: GO 19101
19051: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: LD_INT 13
19059: PUSH
19060: LD_INT 14
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: LD_INT 3
19068: PUSH
19069: LD_INT 4
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: LD_INT 21
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_INT 23
19083: PUSH
19084: LD_INT 24
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: ST_TO_ADDR
19099: GO 19102
19101: POP
// result := ( chassis in result ) ;
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_VAR 0 1
19111: PUSH
19112: LD_VAR 0 3
19116: IN
19117: ST_TO_ADDR
// end ;
19118: LD_VAR 0 3
19122: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19123: LD_INT 0
19125: PPUSH
// if not chassis or not weapon then
19126: LD_VAR 0 1
19130: NOT
19131: PUSH
19132: LD_VAR 0 2
19136: NOT
19137: OR
19138: IFFALSE 19142
// exit ;
19140: GO 20202
// case weapon of us_machine_gun :
19142: LD_VAR 0 2
19146: PUSH
19147: LD_INT 2
19149: DOUBLE
19150: EQUAL
19151: IFTRUE 19155
19153: GO 19185
19155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19156: LD_ADDR_VAR 0 3
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: LD_INT 3
19169: PUSH
19170: LD_INT 4
19172: PUSH
19173: LD_INT 5
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: ST_TO_ADDR
19183: GO 20186
19185: LD_INT 3
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19223
19193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19194: LD_ADDR_VAR 0 3
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: LD_INT 5
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: ST_TO_ADDR
19221: GO 20186
19223: LD_INT 11
19225: DOUBLE
19226: EQUAL
19227: IFTRUE 19231
19229: GO 19261
19231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19232: LD_ADDR_VAR 0 3
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 3
19245: PUSH
19246: LD_INT 4
19248: PUSH
19249: LD_INT 5
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: ST_TO_ADDR
19259: GO 20186
19261: LD_INT 4
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19295
19269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: LD_INT 4
19283: PUSH
19284: LD_INT 5
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: ST_TO_ADDR
19293: GO 20186
19295: LD_INT 5
19297: DOUBLE
19298: EQUAL
19299: IFTRUE 19303
19301: GO 19329
19303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19304: LD_ADDR_VAR 0 3
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: LD_INT 3
19314: PUSH
19315: LD_INT 4
19317: PUSH
19318: LD_INT 5
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: ST_TO_ADDR
19327: GO 20186
19329: LD_INT 9
19331: DOUBLE
19332: EQUAL
19333: IFTRUE 19337
19335: GO 19363
19337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19338: LD_ADDR_VAR 0 3
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 3
19348: PUSH
19349: LD_INT 4
19351: PUSH
19352: LD_INT 5
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: ST_TO_ADDR
19361: GO 20186
19363: LD_INT 7
19365: DOUBLE
19366: EQUAL
19367: IFTRUE 19371
19369: GO 19397
19371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: LD_INT 3
19382: PUSH
19383: LD_INT 4
19385: PUSH
19386: LD_INT 5
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: ST_TO_ADDR
19395: GO 20186
19397: LD_INT 12
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19431
19405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19406: LD_ADDR_VAR 0 3
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 3
19416: PUSH
19417: LD_INT 4
19419: PUSH
19420: LD_INT 5
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: ST_TO_ADDR
19429: GO 20186
19431: LD_INT 13
19433: DOUBLE
19434: EQUAL
19435: IFTRUE 19439
19437: GO 19465
19439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19440: LD_ADDR_VAR 0 3
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 3
19450: PUSH
19451: LD_INT 4
19453: PUSH
19454: LD_INT 5
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: ST_TO_ADDR
19463: GO 20186
19465: LD_INT 14
19467: DOUBLE
19468: EQUAL
19469: IFTRUE 19473
19471: GO 19491
19473: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_INT 4
19481: PUSH
19482: LD_INT 5
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: ST_TO_ADDR
19489: GO 20186
19491: LD_INT 6
19493: DOUBLE
19494: EQUAL
19495: IFTRUE 19499
19497: GO 19517
19499: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19500: LD_ADDR_VAR 0 3
19504: PUSH
19505: LD_INT 4
19507: PUSH
19508: LD_INT 5
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: ST_TO_ADDR
19515: GO 20186
19517: LD_INT 10
19519: DOUBLE
19520: EQUAL
19521: IFTRUE 19525
19523: GO 19543
19525: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19526: LD_ADDR_VAR 0 3
19530: PUSH
19531: LD_INT 4
19533: PUSH
19534: LD_INT 5
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: ST_TO_ADDR
19541: GO 20186
19543: LD_INT 22
19545: DOUBLE
19546: EQUAL
19547: IFTRUE 19551
19549: GO 19577
19551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_INT 11
19559: PUSH
19560: LD_INT 12
19562: PUSH
19563: LD_INT 13
19565: PUSH
19566: LD_INT 14
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: ST_TO_ADDR
19575: GO 20186
19577: LD_INT 23
19579: DOUBLE
19580: EQUAL
19581: IFTRUE 19585
19583: GO 19611
19585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19586: LD_ADDR_VAR 0 3
19590: PUSH
19591: LD_INT 11
19593: PUSH
19594: LD_INT 12
19596: PUSH
19597: LD_INT 13
19599: PUSH
19600: LD_INT 14
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: ST_TO_ADDR
19609: GO 20186
19611: LD_INT 24
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19645
19619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19620: LD_ADDR_VAR 0 3
19624: PUSH
19625: LD_INT 11
19627: PUSH
19628: LD_INT 12
19630: PUSH
19631: LD_INT 13
19633: PUSH
19634: LD_INT 14
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: ST_TO_ADDR
19643: GO 20186
19645: LD_INT 30
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19653
19651: GO 19679
19653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19654: LD_ADDR_VAR 0 3
19658: PUSH
19659: LD_INT 11
19661: PUSH
19662: LD_INT 12
19664: PUSH
19665: LD_INT 13
19667: PUSH
19668: LD_INT 14
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: ST_TO_ADDR
19677: GO 20186
19679: LD_INT 25
19681: DOUBLE
19682: EQUAL
19683: IFTRUE 19687
19685: GO 19705
19687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19688: LD_ADDR_VAR 0 3
19692: PUSH
19693: LD_INT 13
19695: PUSH
19696: LD_INT 14
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: ST_TO_ADDR
19703: GO 20186
19705: LD_INT 27
19707: DOUBLE
19708: EQUAL
19709: IFTRUE 19713
19711: GO 19731
19713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19714: LD_ADDR_VAR 0 3
19718: PUSH
19719: LD_INT 13
19721: PUSH
19722: LD_INT 14
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: ST_TO_ADDR
19729: GO 20186
19731: LD_INT 92
19733: DOUBLE
19734: EQUAL
19735: IFTRUE 19739
19737: GO 19765
19739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19740: LD_ADDR_VAR 0 3
19744: PUSH
19745: LD_INT 11
19747: PUSH
19748: LD_INT 12
19750: PUSH
19751: LD_INT 13
19753: PUSH
19754: LD_INT 14
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
19763: GO 20186
19765: LD_INT 28
19767: DOUBLE
19768: EQUAL
19769: IFTRUE 19773
19771: GO 19791
19773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_INT 13
19781: PUSH
19782: LD_INT 14
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: ST_TO_ADDR
19789: GO 20186
19791: LD_INT 29
19793: DOUBLE
19794: EQUAL
19795: IFTRUE 19799
19797: GO 19817
19799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19800: LD_ADDR_VAR 0 3
19804: PUSH
19805: LD_INT 13
19807: PUSH
19808: LD_INT 14
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: ST_TO_ADDR
19815: GO 20186
19817: LD_INT 31
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19843
19825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 13
19833: PUSH
19834: LD_INT 14
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: ST_TO_ADDR
19841: GO 20186
19843: LD_INT 26
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19869
19851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19852: LD_ADDR_VAR 0 3
19856: PUSH
19857: LD_INT 13
19859: PUSH
19860: LD_INT 14
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: ST_TO_ADDR
19867: GO 20186
19869: LD_INT 42
19871: DOUBLE
19872: EQUAL
19873: IFTRUE 19877
19875: GO 19903
19877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19878: LD_ADDR_VAR 0 3
19882: PUSH
19883: LD_INT 21
19885: PUSH
19886: LD_INT 22
19888: PUSH
19889: LD_INT 23
19891: PUSH
19892: LD_INT 24
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: ST_TO_ADDR
19901: GO 20186
19903: LD_INT 43
19905: DOUBLE
19906: EQUAL
19907: IFTRUE 19911
19909: GO 19937
19911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19912: LD_ADDR_VAR 0 3
19916: PUSH
19917: LD_INT 21
19919: PUSH
19920: LD_INT 22
19922: PUSH
19923: LD_INT 23
19925: PUSH
19926: LD_INT 24
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: ST_TO_ADDR
19935: GO 20186
19937: LD_INT 44
19939: DOUBLE
19940: EQUAL
19941: IFTRUE 19945
19943: GO 19971
19945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19946: LD_ADDR_VAR 0 3
19950: PUSH
19951: LD_INT 21
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_INT 23
19959: PUSH
19960: LD_INT 24
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: ST_TO_ADDR
19969: GO 20186
19971: LD_INT 45
19973: DOUBLE
19974: EQUAL
19975: IFTRUE 19979
19977: GO 20005
19979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19980: LD_ADDR_VAR 0 3
19984: PUSH
19985: LD_INT 21
19987: PUSH
19988: LD_INT 22
19990: PUSH
19991: LD_INT 23
19993: PUSH
19994: LD_INT 24
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
20003: GO 20186
20005: LD_INT 49
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20039
20013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20014: LD_ADDR_VAR 0 3
20018: PUSH
20019: LD_INT 21
20021: PUSH
20022: LD_INT 22
20024: PUSH
20025: LD_INT 23
20027: PUSH
20028: LD_INT 24
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: ST_TO_ADDR
20037: GO 20186
20039: LD_INT 51
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20073
20047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20048: LD_ADDR_VAR 0 3
20052: PUSH
20053: LD_INT 21
20055: PUSH
20056: LD_INT 22
20058: PUSH
20059: LD_INT 23
20061: PUSH
20062: LD_INT 24
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: ST_TO_ADDR
20071: GO 20186
20073: LD_INT 52
20075: DOUBLE
20076: EQUAL
20077: IFTRUE 20081
20079: GO 20107
20081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20082: LD_ADDR_VAR 0 3
20086: PUSH
20087: LD_INT 21
20089: PUSH
20090: LD_INT 22
20092: PUSH
20093: LD_INT 23
20095: PUSH
20096: LD_INT 24
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: ST_TO_ADDR
20105: GO 20186
20107: LD_INT 53
20109: DOUBLE
20110: EQUAL
20111: IFTRUE 20115
20113: GO 20133
20115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20116: LD_ADDR_VAR 0 3
20120: PUSH
20121: LD_INT 23
20123: PUSH
20124: LD_INT 24
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: ST_TO_ADDR
20131: GO 20186
20133: LD_INT 46
20135: DOUBLE
20136: EQUAL
20137: IFTRUE 20141
20139: GO 20159
20141: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20142: LD_ADDR_VAR 0 3
20146: PUSH
20147: LD_INT 23
20149: PUSH
20150: LD_INT 24
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: ST_TO_ADDR
20157: GO 20186
20159: LD_INT 47
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20185
20167: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: LD_INT 23
20175: PUSH
20176: LD_INT 24
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: ST_TO_ADDR
20183: GO 20186
20185: POP
// result := ( chassis in result ) ;
20186: LD_ADDR_VAR 0 3
20190: PUSH
20191: LD_VAR 0 1
20195: PUSH
20196: LD_VAR 0 3
20200: IN
20201: ST_TO_ADDR
// end ;
20202: LD_VAR 0 3
20206: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
// result := array ;
20216: LD_ADDR_VAR 0 5
20220: PUSH
20221: LD_VAR 0 1
20225: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20226: LD_VAR 0 1
20230: NOT
20231: PUSH
20232: LD_VAR 0 2
20236: NOT
20237: OR
20238: PUSH
20239: LD_VAR 0 3
20243: NOT
20244: OR
20245: PUSH
20246: LD_VAR 0 2
20250: PUSH
20251: LD_VAR 0 1
20255: GREATER
20256: OR
20257: PUSH
20258: LD_VAR 0 3
20262: PUSH
20263: LD_VAR 0 1
20267: GREATER
20268: OR
20269: IFFALSE 20273
// exit ;
20271: GO 20569
// if direction then
20273: LD_VAR 0 4
20277: IFFALSE 20341
// begin d := 1 ;
20279: LD_ADDR_VAR 0 9
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// if i_from > i_to then
20287: LD_VAR 0 2
20291: PUSH
20292: LD_VAR 0 3
20296: GREATER
20297: IFFALSE 20323
// length := ( array - i_from ) + i_to else
20299: LD_ADDR_VAR 0 11
20303: PUSH
20304: LD_VAR 0 1
20308: PUSH
20309: LD_VAR 0 2
20313: MINUS
20314: PUSH
20315: LD_VAR 0 3
20319: PLUS
20320: ST_TO_ADDR
20321: GO 20339
// length := i_to - i_from ;
20323: LD_ADDR_VAR 0 11
20327: PUSH
20328: LD_VAR 0 3
20332: PUSH
20333: LD_VAR 0 2
20337: MINUS
20338: ST_TO_ADDR
// end else
20339: GO 20402
// begin d := - 1 ;
20341: LD_ADDR_VAR 0 9
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: ST_TO_ADDR
// if i_from > i_to then
20350: LD_VAR 0 2
20354: PUSH
20355: LD_VAR 0 3
20359: GREATER
20360: IFFALSE 20380
// length := i_from - i_to else
20362: LD_ADDR_VAR 0 11
20366: PUSH
20367: LD_VAR 0 2
20371: PUSH
20372: LD_VAR 0 3
20376: MINUS
20377: ST_TO_ADDR
20378: GO 20402
// length := ( array - i_to ) + i_from ;
20380: LD_ADDR_VAR 0 11
20384: PUSH
20385: LD_VAR 0 1
20389: PUSH
20390: LD_VAR 0 3
20394: MINUS
20395: PUSH
20396: LD_VAR 0 2
20400: PLUS
20401: ST_TO_ADDR
// end ; if not length then
20402: LD_VAR 0 11
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20569
// tmp := array ;
20411: LD_ADDR_VAR 0 10
20415: PUSH
20416: LD_VAR 0 1
20420: ST_TO_ADDR
// for i = 1 to length do
20421: LD_ADDR_VAR 0 6
20425: PUSH
20426: DOUBLE
20427: LD_INT 1
20429: DEC
20430: ST_TO_ADDR
20431: LD_VAR 0 11
20435: PUSH
20436: FOR_TO
20437: IFFALSE 20557
// begin for j = 1 to array do
20439: LD_ADDR_VAR 0 7
20443: PUSH
20444: DOUBLE
20445: LD_INT 1
20447: DEC
20448: ST_TO_ADDR
20449: LD_VAR 0 1
20453: PUSH
20454: FOR_TO
20455: IFFALSE 20543
// begin k := j + d ;
20457: LD_ADDR_VAR 0 8
20461: PUSH
20462: LD_VAR 0 7
20466: PUSH
20467: LD_VAR 0 9
20471: PLUS
20472: ST_TO_ADDR
// if k > array then
20473: LD_VAR 0 8
20477: PUSH
20478: LD_VAR 0 1
20482: GREATER
20483: IFFALSE 20493
// k := 1 ;
20485: LD_ADDR_VAR 0 8
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if not k then
20493: LD_VAR 0 8
20497: NOT
20498: IFFALSE 20510
// k := array ;
20500: LD_ADDR_VAR 0 8
20504: PUSH
20505: LD_VAR 0 1
20509: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20510: LD_ADDR_VAR 0 10
20514: PUSH
20515: LD_VAR 0 10
20519: PPUSH
20520: LD_VAR 0 8
20524: PPUSH
20525: LD_VAR 0 1
20529: PUSH
20530: LD_VAR 0 7
20534: ARRAY
20535: PPUSH
20536: CALL_OW 1
20540: ST_TO_ADDR
// end ;
20541: GO 20454
20543: POP
20544: POP
// array := tmp ;
20545: LD_ADDR_VAR 0 1
20549: PUSH
20550: LD_VAR 0 10
20554: ST_TO_ADDR
// end ;
20555: GO 20436
20557: POP
20558: POP
// result := array ;
20559: LD_ADDR_VAR 0 5
20563: PUSH
20564: LD_VAR 0 1
20568: ST_TO_ADDR
// end ;
20569: LD_VAR 0 5
20573: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20574: LD_INT 0
20576: PPUSH
20577: PPUSH
// result := 0 ;
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// if not array or not value in array then
20586: LD_VAR 0 1
20590: NOT
20591: PUSH
20592: LD_VAR 0 2
20596: PUSH
20597: LD_VAR 0 1
20601: IN
20602: NOT
20603: OR
20604: IFFALSE 20608
// exit ;
20606: GO 20662
// for i = 1 to array do
20608: LD_ADDR_VAR 0 4
20612: PUSH
20613: DOUBLE
20614: LD_INT 1
20616: DEC
20617: ST_TO_ADDR
20618: LD_VAR 0 1
20622: PUSH
20623: FOR_TO
20624: IFFALSE 20660
// if value = array [ i ] then
20626: LD_VAR 0 2
20630: PUSH
20631: LD_VAR 0 1
20635: PUSH
20636: LD_VAR 0 4
20640: ARRAY
20641: EQUAL
20642: IFFALSE 20658
// begin result := i ;
20644: LD_ADDR_VAR 0 3
20648: PUSH
20649: LD_VAR 0 4
20653: ST_TO_ADDR
// exit ;
20654: POP
20655: POP
20656: GO 20662
// end ;
20658: GO 20623
20660: POP
20661: POP
// end ;
20662: LD_VAR 0 3
20666: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20667: LD_INT 0
20669: PPUSH
// vc_chassis := chassis ;
20670: LD_ADDR_OWVAR 37
20674: PUSH
20675: LD_VAR 0 1
20679: ST_TO_ADDR
// vc_engine := engine ;
20680: LD_ADDR_OWVAR 39
20684: PUSH
20685: LD_VAR 0 2
20689: ST_TO_ADDR
// vc_control := control ;
20690: LD_ADDR_OWVAR 38
20694: PUSH
20695: LD_VAR 0 3
20699: ST_TO_ADDR
// vc_weapon := weapon ;
20700: LD_ADDR_OWVAR 40
20704: PUSH
20705: LD_VAR 0 4
20709: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20710: LD_ADDR_OWVAR 41
20714: PUSH
20715: LD_VAR 0 5
20719: ST_TO_ADDR
// end ;
20720: LD_VAR 0 6
20724: RET
// export function WantPlant ( unit ) ; var task ; begin
20725: LD_INT 0
20727: PPUSH
20728: PPUSH
// result := false ;
20729: LD_ADDR_VAR 0 2
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20737: LD_ADDR_VAR 0 3
20741: PUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 437
20751: ST_TO_ADDR
// if task then
20752: LD_VAR 0 3
20756: IFFALSE 20784
// if task [ 1 ] [ 1 ] = p then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 1
20765: ARRAY
20766: PUSH
20767: LD_INT 1
20769: ARRAY
20770: PUSH
20771: LD_STRING p
20773: EQUAL
20774: IFFALSE 20784
// result := true ;
20776: LD_ADDR_VAR 0 2
20780: PUSH
20781: LD_INT 1
20783: ST_TO_ADDR
// end ;
20784: LD_VAR 0 2
20788: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20789: LD_INT 0
20791: PPUSH
20792: PPUSH
20793: PPUSH
20794: PPUSH
// if pos < 1 then
20795: LD_VAR 0 2
20799: PUSH
20800: LD_INT 1
20802: LESS
20803: IFFALSE 20807
// exit ;
20805: GO 21110
// if pos = 1 then
20807: LD_VAR 0 2
20811: PUSH
20812: LD_INT 1
20814: EQUAL
20815: IFFALSE 20848
// result := Replace ( arr , pos [ 1 ] , value ) else
20817: LD_ADDR_VAR 0 4
20821: PUSH
20822: LD_VAR 0 1
20826: PPUSH
20827: LD_VAR 0 2
20831: PUSH
20832: LD_INT 1
20834: ARRAY
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 1
20845: ST_TO_ADDR
20846: GO 21110
// begin tmp := arr ;
20848: LD_ADDR_VAR 0 6
20852: PUSH
20853: LD_VAR 0 1
20857: ST_TO_ADDR
// s_arr := [ tmp ] ;
20858: LD_ADDR_VAR 0 7
20862: PUSH
20863: LD_VAR 0 6
20867: PUSH
20868: EMPTY
20869: LIST
20870: ST_TO_ADDR
// for i = 1 to pos - 1 do
20871: LD_ADDR_VAR 0 5
20875: PUSH
20876: DOUBLE
20877: LD_INT 1
20879: DEC
20880: ST_TO_ADDR
20881: LD_VAR 0 2
20885: PUSH
20886: LD_INT 1
20888: MINUS
20889: PUSH
20890: FOR_TO
20891: IFFALSE 20936
// begin tmp := tmp [ pos [ i ] ] ;
20893: LD_ADDR_VAR 0 6
20897: PUSH
20898: LD_VAR 0 6
20902: PUSH
20903: LD_VAR 0 2
20907: PUSH
20908: LD_VAR 0 5
20912: ARRAY
20913: ARRAY
20914: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20915: LD_ADDR_VAR 0 7
20919: PUSH
20920: LD_VAR 0 7
20924: PUSH
20925: LD_VAR 0 6
20929: PUSH
20930: EMPTY
20931: LIST
20932: ADD
20933: ST_TO_ADDR
// end ;
20934: GO 20890
20936: POP
20937: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20938: LD_ADDR_VAR 0 6
20942: PUSH
20943: LD_VAR 0 6
20947: PPUSH
20948: LD_VAR 0 2
20952: PUSH
20953: LD_VAR 0 2
20957: ARRAY
20958: PPUSH
20959: LD_VAR 0 3
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20969: LD_ADDR_VAR 0 7
20973: PUSH
20974: LD_VAR 0 7
20978: PPUSH
20979: LD_VAR 0 7
20983: PPUSH
20984: LD_VAR 0 6
20988: PPUSH
20989: CALL_OW 1
20993: ST_TO_ADDR
// for i = s_arr downto 2 do
20994: LD_ADDR_VAR 0 5
20998: PUSH
20999: DOUBLE
21000: LD_VAR 0 7
21004: INC
21005: ST_TO_ADDR
21006: LD_INT 2
21008: PUSH
21009: FOR_DOWNTO
21010: IFFALSE 21094
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21012: LD_ADDR_VAR 0 6
21016: PUSH
21017: LD_VAR 0 7
21021: PUSH
21022: LD_VAR 0 5
21026: PUSH
21027: LD_INT 1
21029: MINUS
21030: ARRAY
21031: PPUSH
21032: LD_VAR 0 2
21036: PUSH
21037: LD_VAR 0 5
21041: PUSH
21042: LD_INT 1
21044: MINUS
21045: ARRAY
21046: PPUSH
21047: LD_VAR 0 7
21051: PUSH
21052: LD_VAR 0 5
21056: ARRAY
21057: PPUSH
21058: CALL_OW 1
21062: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21063: LD_ADDR_VAR 0 7
21067: PUSH
21068: LD_VAR 0 7
21072: PPUSH
21073: LD_VAR 0 5
21077: PUSH
21078: LD_INT 1
21080: MINUS
21081: PPUSH
21082: LD_VAR 0 6
21086: PPUSH
21087: CALL_OW 1
21091: ST_TO_ADDR
// end ;
21092: GO 21009
21094: POP
21095: POP
// result := s_arr [ 1 ] ;
21096: LD_ADDR_VAR 0 4
21100: PUSH
21101: LD_VAR 0 7
21105: PUSH
21106: LD_INT 1
21108: ARRAY
21109: ST_TO_ADDR
// end ; end ;
21110: LD_VAR 0 4
21114: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21115: LD_INT 0
21117: PPUSH
21118: PPUSH
// if not list then
21119: LD_VAR 0 1
21123: NOT
21124: IFFALSE 21128
// exit ;
21126: GO 21219
// i := list [ pos1 ] ;
21128: LD_ADDR_VAR 0 5
21132: PUSH
21133: LD_VAR 0 1
21137: PUSH
21138: LD_VAR 0 2
21142: ARRAY
21143: ST_TO_ADDR
// if not i then
21144: LD_VAR 0 5
21148: NOT
21149: IFFALSE 21153
// exit ;
21151: GO 21219
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21153: LD_ADDR_VAR 0 1
21157: PUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: LD_VAR 0 2
21167: PPUSH
21168: LD_VAR 0 1
21172: PUSH
21173: LD_VAR 0 3
21177: ARRAY
21178: PPUSH
21179: CALL_OW 1
21183: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21184: LD_ADDR_VAR 0 1
21188: PUSH
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_VAR 0 3
21198: PPUSH
21199: LD_VAR 0 5
21203: PPUSH
21204: CALL_OW 1
21208: ST_TO_ADDR
// result := list ;
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: LD_VAR 0 1
21218: ST_TO_ADDR
// end ;
21219: LD_VAR 0 4
21223: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21224: LD_INT 0
21226: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21227: LD_ADDR_VAR 0 5
21231: PUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: CALL_OW 250
21241: PPUSH
21242: LD_VAR 0 1
21246: PPUSH
21247: CALL_OW 251
21251: PPUSH
21252: LD_VAR 0 2
21256: PPUSH
21257: LD_VAR 0 3
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: CALL 21277 0 5
21271: ST_TO_ADDR
// end ;
21272: LD_VAR 0 5
21276: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
21282: PPUSH
// if not list then
21283: LD_VAR 0 3
21287: NOT
21288: IFFALSE 21292
// exit ;
21290: GO 21680
// result := [ ] ;
21292: LD_ADDR_VAR 0 6
21296: PUSH
21297: EMPTY
21298: ST_TO_ADDR
// for i in list do
21299: LD_ADDR_VAR 0 7
21303: PUSH
21304: LD_VAR 0 3
21308: PUSH
21309: FOR_IN
21310: IFFALSE 21512
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21312: LD_ADDR_VAR 0 9
21316: PUSH
21317: LD_VAR 0 7
21321: PPUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_VAR 0 2
21331: PPUSH
21332: CALL_OW 297
21336: ST_TO_ADDR
// if not result then
21337: LD_VAR 0 6
21341: NOT
21342: IFFALSE 21368
// result := [ [ i , tmp ] ] else
21344: LD_ADDR_VAR 0 6
21348: PUSH
21349: LD_VAR 0 7
21353: PUSH
21354: LD_VAR 0 9
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: ST_TO_ADDR
21366: GO 21510
// begin if result [ result ] [ 2 ] < tmp then
21368: LD_VAR 0 6
21372: PUSH
21373: LD_VAR 0 6
21377: ARRAY
21378: PUSH
21379: LD_INT 2
21381: ARRAY
21382: PUSH
21383: LD_VAR 0 9
21387: LESS
21388: IFFALSE 21430
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21390: LD_ADDR_VAR 0 6
21394: PUSH
21395: LD_VAR 0 6
21399: PPUSH
21400: LD_VAR 0 6
21404: PUSH
21405: LD_INT 1
21407: PLUS
21408: PPUSH
21409: LD_VAR 0 7
21413: PUSH
21414: LD_VAR 0 9
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PPUSH
21423: CALL_OW 2
21427: ST_TO_ADDR
21428: GO 21510
// for j = 1 to result do
21430: LD_ADDR_VAR 0 8
21434: PUSH
21435: DOUBLE
21436: LD_INT 1
21438: DEC
21439: ST_TO_ADDR
21440: LD_VAR 0 6
21444: PUSH
21445: FOR_TO
21446: IFFALSE 21508
// begin if tmp < result [ j ] [ 2 ] then
21448: LD_VAR 0 9
21452: PUSH
21453: LD_VAR 0 6
21457: PUSH
21458: LD_VAR 0 8
21462: ARRAY
21463: PUSH
21464: LD_INT 2
21466: ARRAY
21467: LESS
21468: IFFALSE 21506
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21470: LD_ADDR_VAR 0 6
21474: PUSH
21475: LD_VAR 0 6
21479: PPUSH
21480: LD_VAR 0 8
21484: PPUSH
21485: LD_VAR 0 7
21489: PUSH
21490: LD_VAR 0 9
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PPUSH
21499: CALL_OW 2
21503: ST_TO_ADDR
// break ;
21504: GO 21508
// end ; end ;
21506: GO 21445
21508: POP
21509: POP
// end ; end ;
21510: GO 21309
21512: POP
21513: POP
// if result and not asc then
21514: LD_VAR 0 6
21518: PUSH
21519: LD_VAR 0 4
21523: NOT
21524: AND
21525: IFFALSE 21600
// begin tmp := result ;
21527: LD_ADDR_VAR 0 9
21531: PUSH
21532: LD_VAR 0 6
21536: ST_TO_ADDR
// for i = tmp downto 1 do
21537: LD_ADDR_VAR 0 7
21541: PUSH
21542: DOUBLE
21543: LD_VAR 0 9
21547: INC
21548: ST_TO_ADDR
21549: LD_INT 1
21551: PUSH
21552: FOR_DOWNTO
21553: IFFALSE 21598
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21555: LD_ADDR_VAR 0 6
21559: PUSH
21560: LD_VAR 0 6
21564: PPUSH
21565: LD_VAR 0 9
21569: PUSH
21570: LD_VAR 0 7
21574: MINUS
21575: PUSH
21576: LD_INT 1
21578: PLUS
21579: PPUSH
21580: LD_VAR 0 9
21584: PUSH
21585: LD_VAR 0 7
21589: ARRAY
21590: PPUSH
21591: CALL_OW 1
21595: ST_TO_ADDR
21596: GO 21552
21598: POP
21599: POP
// end ; tmp := [ ] ;
21600: LD_ADDR_VAR 0 9
21604: PUSH
21605: EMPTY
21606: ST_TO_ADDR
// if mode then
21607: LD_VAR 0 5
21611: IFFALSE 21680
// begin for i = 1 to result do
21613: LD_ADDR_VAR 0 7
21617: PUSH
21618: DOUBLE
21619: LD_INT 1
21621: DEC
21622: ST_TO_ADDR
21623: LD_VAR 0 6
21627: PUSH
21628: FOR_TO
21629: IFFALSE 21668
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21631: LD_ADDR_VAR 0 9
21635: PUSH
21636: LD_VAR 0 9
21640: PPUSH
21641: LD_VAR 0 7
21645: PPUSH
21646: LD_VAR 0 6
21650: PUSH
21651: LD_VAR 0 7
21655: ARRAY
21656: PUSH
21657: LD_INT 1
21659: ARRAY
21660: PPUSH
21661: CALL_OW 1
21665: ST_TO_ADDR
21666: GO 21628
21668: POP
21669: POP
// result := tmp ;
21670: LD_ADDR_VAR 0 6
21674: PUSH
21675: LD_VAR 0 9
21679: ST_TO_ADDR
// end ; end ;
21680: LD_VAR 0 6
21684: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21685: LD_INT 0
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21693: LD_ADDR_VAR 0 5
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: ST_TO_ADDR
// if not x or not y then
21715: LD_VAR 0 2
21719: NOT
21720: PUSH
21721: LD_VAR 0 3
21725: NOT
21726: OR
21727: IFFALSE 21731
// exit ;
21729: GO 23381
// if not range then
21731: LD_VAR 0 4
21735: NOT
21736: IFFALSE 21746
// range := 10 ;
21738: LD_ADDR_VAR 0 4
21742: PUSH
21743: LD_INT 10
21745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21746: LD_ADDR_VAR 0 8
21750: PUSH
21751: LD_INT 81
21753: PUSH
21754: LD_VAR 0 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 92
21765: PUSH
21766: LD_VAR 0 2
21770: PUSH
21771: LD_VAR 0 3
21775: PUSH
21776: LD_VAR 0 4
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: LD_INT 21
21792: PUSH
21793: LD_INT 3
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: PPUSH
21809: CALL_OW 69
21813: ST_TO_ADDR
// if not tmp then
21814: LD_VAR 0 8
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 23381
// for i in tmp do
21823: LD_ADDR_VAR 0 6
21827: PUSH
21828: LD_VAR 0 8
21832: PUSH
21833: FOR_IN
21834: IFFALSE 23356
// begin points := [ 0 , 0 , 0 ] ;
21836: LD_ADDR_VAR 0 9
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: ST_TO_ADDR
// bpoints := 1 ;
21855: LD_ADDR_VAR 0 10
21859: PUSH
21860: LD_INT 1
21862: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21863: LD_VAR 0 6
21867: PPUSH
21868: CALL_OW 247
21872: PUSH
21873: LD_INT 1
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 22459
21881: POP
// begin if GetClass ( i ) = 1 then
21882: LD_VAR 0 6
21886: PPUSH
21887: CALL_OW 257
21891: PUSH
21892: LD_INT 1
21894: EQUAL
21895: IFFALSE 21916
// points := [ 10 , 5 , 3 ] ;
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: LD_INT 10
21904: PUSH
21905: LD_INT 5
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21916: LD_VAR 0 6
21920: PPUSH
21921: CALL_OW 257
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: LD_INT 4
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: IN
21940: IFFALSE 21961
// points := [ 3 , 2 , 1 ] ;
21942: LD_ADDR_VAR 0 9
21946: PUSH
21947: LD_INT 3
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21961: LD_VAR 0 6
21965: PPUSH
21966: CALL_OW 257
21970: PUSH
21971: LD_INT 5
21973: EQUAL
21974: IFFALSE 21995
// points := [ 130 , 5 , 2 ] ;
21976: LD_ADDR_VAR 0 9
21980: PUSH
21981: LD_INT 130
21983: PUSH
21984: LD_INT 5
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21995: LD_VAR 0 6
21999: PPUSH
22000: CALL_OW 257
22004: PUSH
22005: LD_INT 8
22007: EQUAL
22008: IFFALSE 22029
// points := [ 35 , 35 , 30 ] ;
22010: LD_ADDR_VAR 0 9
22014: PUSH
22015: LD_INT 35
22017: PUSH
22018: LD_INT 35
22020: PUSH
22021: LD_INT 30
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22029: LD_VAR 0 6
22033: PPUSH
22034: CALL_OW 257
22038: PUSH
22039: LD_INT 9
22041: EQUAL
22042: IFFALSE 22063
// points := [ 20 , 55 , 40 ] ;
22044: LD_ADDR_VAR 0 9
22048: PUSH
22049: LD_INT 20
22051: PUSH
22052: LD_INT 55
22054: PUSH
22055: LD_INT 40
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22063: LD_VAR 0 6
22067: PPUSH
22068: CALL_OW 257
22072: PUSH
22073: LD_INT 12
22075: PUSH
22076: LD_INT 16
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: IN
22083: IFFALSE 22104
// points := [ 5 , 3 , 2 ] ;
22085: LD_ADDR_VAR 0 9
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22104: LD_VAR 0 6
22108: PPUSH
22109: CALL_OW 257
22113: PUSH
22114: LD_INT 17
22116: EQUAL
22117: IFFALSE 22138
// points := [ 100 , 50 , 75 ] ;
22119: LD_ADDR_VAR 0 9
22123: PUSH
22124: LD_INT 100
22126: PUSH
22127: LD_INT 50
22129: PUSH
22130: LD_INT 75
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22138: LD_VAR 0 6
22142: PPUSH
22143: CALL_OW 257
22147: PUSH
22148: LD_INT 15
22150: EQUAL
22151: IFFALSE 22172
// points := [ 10 , 5 , 3 ] ;
22153: LD_ADDR_VAR 0 9
22157: PUSH
22158: LD_INT 10
22160: PUSH
22161: LD_INT 5
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22172: LD_VAR 0 6
22176: PPUSH
22177: CALL_OW 257
22181: PUSH
22182: LD_INT 14
22184: EQUAL
22185: IFFALSE 22206
// points := [ 10 , 0 , 0 ] ;
22187: LD_ADDR_VAR 0 9
22191: PUSH
22192: LD_INT 10
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 257
22215: PUSH
22216: LD_INT 11
22218: EQUAL
22219: IFFALSE 22240
// points := [ 30 , 10 , 5 ] ;
22221: LD_ADDR_VAR 0 9
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 10
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22240: LD_VAR 0 1
22244: PPUSH
22245: LD_INT 5
22247: PPUSH
22248: CALL_OW 321
22252: PUSH
22253: LD_INT 2
22255: EQUAL
22256: IFFALSE 22273
// bpoints := bpoints * 1.8 ;
22258: LD_ADDR_VAR 0 10
22262: PUSH
22263: LD_VAR 0 10
22267: PUSH
22268: LD_REAL  1.80000000000000E+0000
22271: MUL
22272: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22273: LD_VAR 0 6
22277: PPUSH
22278: CALL_OW 257
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: LD_INT 3
22291: PUSH
22292: LD_INT 4
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: IN
22301: PUSH
22302: LD_VAR 0 1
22306: PPUSH
22307: LD_INT 51
22309: PPUSH
22310: CALL_OW 321
22314: PUSH
22315: LD_INT 2
22317: EQUAL
22318: AND
22319: IFFALSE 22336
// bpoints := bpoints * 1.2 ;
22321: LD_ADDR_VAR 0 10
22325: PUSH
22326: LD_VAR 0 10
22330: PUSH
22331: LD_REAL  1.20000000000000E+0000
22334: MUL
22335: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22336: LD_VAR 0 6
22340: PPUSH
22341: CALL_OW 257
22345: PUSH
22346: LD_INT 5
22348: PUSH
22349: LD_INT 7
22351: PUSH
22352: LD_INT 9
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: IN
22360: PUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: LD_INT 52
22368: PPUSH
22369: CALL_OW 321
22373: PUSH
22374: LD_INT 2
22376: EQUAL
22377: AND
22378: IFFALSE 22395
// bpoints := bpoints * 1.5 ;
22380: LD_ADDR_VAR 0 10
22384: PUSH
22385: LD_VAR 0 10
22389: PUSH
22390: LD_REAL  1.50000000000000E+0000
22393: MUL
22394: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_INT 66
22402: PPUSH
22403: CALL_OW 321
22407: PUSH
22408: LD_INT 2
22410: EQUAL
22411: IFFALSE 22428
// bpoints := bpoints * 1.1 ;
22413: LD_ADDR_VAR 0 10
22417: PUSH
22418: LD_VAR 0 10
22422: PUSH
22423: LD_REAL  1.10000000000000E+0000
22426: MUL
22427: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22428: LD_ADDR_VAR 0 10
22432: PUSH
22433: LD_VAR 0 10
22437: PUSH
22438: LD_VAR 0 6
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 259
22450: PUSH
22451: LD_REAL  1.15000000000000E+0000
22454: MUL
22455: MUL
22456: ST_TO_ADDR
// end ; unit_vehicle :
22457: GO 23285
22459: LD_INT 2
22461: DOUBLE
22462: EQUAL
22463: IFTRUE 22467
22465: GO 23273
22467: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22468: LD_VAR 0 6
22472: PPUSH
22473: CALL_OW 264
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: LD_INT 42
22483: PUSH
22484: LD_INT 24
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: LIST
22491: IN
22492: IFFALSE 22513
// points := [ 25 , 5 , 3 ] ;
22494: LD_ADDR_VAR 0 9
22498: PUSH
22499: LD_INT 25
22501: PUSH
22502: LD_INT 5
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22513: LD_VAR 0 6
22517: PPUSH
22518: CALL_OW 264
22522: PUSH
22523: LD_INT 4
22525: PUSH
22526: LD_INT 43
22528: PUSH
22529: LD_INT 25
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: IN
22537: IFFALSE 22558
// points := [ 40 , 15 , 5 ] ;
22539: LD_ADDR_VAR 0 9
22543: PUSH
22544: LD_INT 40
22546: PUSH
22547: LD_INT 15
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22558: LD_VAR 0 6
22562: PPUSH
22563: CALL_OW 264
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: LD_INT 23
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: IN
22578: IFFALSE 22599
// points := [ 7 , 25 , 8 ] ;
22580: LD_ADDR_VAR 0 9
22584: PUSH
22585: LD_INT 7
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 8
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22599: LD_VAR 0 6
22603: PPUSH
22604: CALL_OW 264
22608: PUSH
22609: LD_INT 5
22611: PUSH
22612: LD_INT 27
22614: PUSH
22615: LD_INT 44
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: IN
22623: IFFALSE 22644
// points := [ 14 , 50 , 16 ] ;
22625: LD_ADDR_VAR 0 9
22629: PUSH
22630: LD_INT 14
22632: PUSH
22633: LD_INT 50
22635: PUSH
22636: LD_INT 16
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22644: LD_VAR 0 6
22648: PPUSH
22649: CALL_OW 264
22653: PUSH
22654: LD_INT 6
22656: PUSH
22657: LD_INT 46
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: IN
22664: IFFALSE 22685
// points := [ 32 , 120 , 70 ] ;
22666: LD_ADDR_VAR 0 9
22670: PUSH
22671: LD_INT 32
22673: PUSH
22674: LD_INT 120
22676: PUSH
22677: LD_INT 70
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22685: LD_VAR 0 6
22689: PPUSH
22690: CALL_OW 264
22694: PUSH
22695: LD_INT 7
22697: PUSH
22698: LD_INT 28
22700: PUSH
22701: LD_INT 45
22703: PUSH
22704: LD_INT 92
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: IN
22713: IFFALSE 22734
// points := [ 35 , 20 , 45 ] ;
22715: LD_ADDR_VAR 0 9
22719: PUSH
22720: LD_INT 35
22722: PUSH
22723: LD_INT 20
22725: PUSH
22726: LD_INT 45
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22734: LD_VAR 0 6
22738: PPUSH
22739: CALL_OW 264
22743: PUSH
22744: LD_INT 47
22746: PUSH
22747: EMPTY
22748: LIST
22749: IN
22750: IFFALSE 22771
// points := [ 67 , 45 , 75 ] ;
22752: LD_ADDR_VAR 0 9
22756: PUSH
22757: LD_INT 67
22759: PUSH
22760: LD_INT 45
22762: PUSH
22763: LD_INT 75
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22771: LD_VAR 0 6
22775: PPUSH
22776: CALL_OW 264
22780: PUSH
22781: LD_INT 26
22783: PUSH
22784: EMPTY
22785: LIST
22786: IN
22787: IFFALSE 22808
// points := [ 120 , 30 , 80 ] ;
22789: LD_ADDR_VAR 0 9
22793: PUSH
22794: LD_INT 120
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 80
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22808: LD_VAR 0 6
22812: PPUSH
22813: CALL_OW 264
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: EMPTY
22822: LIST
22823: IN
22824: IFFALSE 22845
// points := [ 40 , 1 , 1 ] ;
22826: LD_ADDR_VAR 0 9
22830: PUSH
22831: LD_INT 40
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22845: LD_VAR 0 6
22849: PPUSH
22850: CALL_OW 264
22854: PUSH
22855: LD_INT 29
22857: PUSH
22858: EMPTY
22859: LIST
22860: IN
22861: IFFALSE 22882
// points := [ 70 , 200 , 400 ] ;
22863: LD_ADDR_VAR 0 9
22867: PUSH
22868: LD_INT 70
22870: PUSH
22871: LD_INT 200
22873: PUSH
22874: LD_INT 400
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22882: LD_VAR 0 6
22886: PPUSH
22887: CALL_OW 264
22891: PUSH
22892: LD_INT 14
22894: PUSH
22895: LD_INT 53
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: IN
22902: IFFALSE 22923
// points := [ 40 , 10 , 20 ] ;
22904: LD_ADDR_VAR 0 9
22908: PUSH
22909: LD_INT 40
22911: PUSH
22912: LD_INT 10
22914: PUSH
22915: LD_INT 20
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22923: LD_VAR 0 6
22927: PPUSH
22928: CALL_OW 264
22932: PUSH
22933: LD_INT 9
22935: PUSH
22936: EMPTY
22937: LIST
22938: IN
22939: IFFALSE 22960
// points := [ 5 , 70 , 20 ] ;
22941: LD_ADDR_VAR 0 9
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: LD_INT 70
22951: PUSH
22952: LD_INT 20
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22960: LD_VAR 0 6
22964: PPUSH
22965: CALL_OW 264
22969: PUSH
22970: LD_INT 10
22972: PUSH
22973: EMPTY
22974: LIST
22975: IN
22976: IFFALSE 22997
// points := [ 35 , 110 , 70 ] ;
22978: LD_ADDR_VAR 0 9
22982: PUSH
22983: LD_INT 35
22985: PUSH
22986: LD_INT 110
22988: PUSH
22989: LD_INT 70
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22997: LD_VAR 0 6
23001: PPUSH
23002: CALL_OW 265
23006: PUSH
23007: LD_INT 25
23009: EQUAL
23010: IFFALSE 23031
// points := [ 80 , 65 , 100 ] ;
23012: LD_ADDR_VAR 0 9
23016: PUSH
23017: LD_INT 80
23019: PUSH
23020: LD_INT 65
23022: PUSH
23023: LD_INT 100
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23031: LD_VAR 0 6
23035: PPUSH
23036: CALL_OW 263
23040: PUSH
23041: LD_INT 1
23043: EQUAL
23044: IFFALSE 23079
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23046: LD_ADDR_VAR 0 10
23050: PUSH
23051: LD_VAR 0 10
23055: PUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: CALL_OW 311
23065: PPUSH
23066: LD_INT 3
23068: PPUSH
23069: CALL_OW 259
23073: PUSH
23074: LD_INT 4
23076: MUL
23077: MUL
23078: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23079: LD_VAR 0 6
23083: PPUSH
23084: CALL_OW 263
23088: PUSH
23089: LD_INT 2
23091: EQUAL
23092: IFFALSE 23143
// begin j := IsControledBy ( i ) ;
23094: LD_ADDR_VAR 0 7
23098: PUSH
23099: LD_VAR 0 6
23103: PPUSH
23104: CALL_OW 312
23108: ST_TO_ADDR
// if j then
23109: LD_VAR 0 7
23113: IFFALSE 23143
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23115: LD_ADDR_VAR 0 10
23119: PUSH
23120: LD_VAR 0 10
23124: PUSH
23125: LD_VAR 0 7
23129: PPUSH
23130: LD_INT 3
23132: PPUSH
23133: CALL_OW 259
23137: PUSH
23138: LD_INT 3
23140: MUL
23141: MUL
23142: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23143: LD_VAR 0 6
23147: PPUSH
23148: CALL_OW 264
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: LD_INT 6
23158: PUSH
23159: LD_INT 46
23161: PUSH
23162: LD_INT 44
23164: PUSH
23165: LD_INT 47
23167: PUSH
23168: LD_INT 45
23170: PUSH
23171: LD_INT 28
23173: PUSH
23174: LD_INT 7
23176: PUSH
23177: LD_INT 27
23179: PUSH
23180: LD_INT 29
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: IN
23195: PUSH
23196: LD_VAR 0 1
23200: PPUSH
23201: LD_INT 52
23203: PPUSH
23204: CALL_OW 321
23208: PUSH
23209: LD_INT 2
23211: EQUAL
23212: AND
23213: IFFALSE 23230
// bpoints := bpoints * 1.2 ;
23215: LD_ADDR_VAR 0 10
23219: PUSH
23220: LD_VAR 0 10
23224: PUSH
23225: LD_REAL  1.20000000000000E+0000
23228: MUL
23229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23230: LD_VAR 0 6
23234: PPUSH
23235: CALL_OW 264
23239: PUSH
23240: LD_INT 6
23242: PUSH
23243: LD_INT 46
23245: PUSH
23246: LD_INT 47
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: IN
23254: IFFALSE 23271
// bpoints := bpoints * 1.2 ;
23256: LD_ADDR_VAR 0 10
23260: PUSH
23261: LD_VAR 0 10
23265: PUSH
23266: LD_REAL  1.20000000000000E+0000
23269: MUL
23270: ST_TO_ADDR
// end ; unit_building :
23271: GO 23285
23273: LD_INT 3
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23284
23281: POP
// ; end ;
23282: GO 23285
23284: POP
// for j = 1 to 3 do
23285: LD_ADDR_VAR 0 7
23289: PUSH
23290: DOUBLE
23291: LD_INT 1
23293: DEC
23294: ST_TO_ADDR
23295: LD_INT 3
23297: PUSH
23298: FOR_TO
23299: IFFALSE 23352
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23301: LD_ADDR_VAR 0 5
23305: PUSH
23306: LD_VAR 0 5
23310: PPUSH
23311: LD_VAR 0 7
23315: PPUSH
23316: LD_VAR 0 5
23320: PUSH
23321: LD_VAR 0 7
23325: ARRAY
23326: PUSH
23327: LD_VAR 0 9
23331: PUSH
23332: LD_VAR 0 7
23336: ARRAY
23337: PUSH
23338: LD_VAR 0 10
23342: MUL
23343: PLUS
23344: PPUSH
23345: CALL_OW 1
23349: ST_TO_ADDR
23350: GO 23298
23352: POP
23353: POP
// end ;
23354: GO 21833
23356: POP
23357: POP
// result := Replace ( result , 4 , tmp ) ;
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_VAR 0 5
23367: PPUSH
23368: LD_INT 4
23370: PPUSH
23371: LD_VAR 0 8
23375: PPUSH
23376: CALL_OW 1
23380: ST_TO_ADDR
// end ;
23381: LD_VAR 0 5
23385: RET
// export function DangerAtRange ( unit , range ) ; begin
23386: LD_INT 0
23388: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23389: LD_ADDR_VAR 0 3
23393: PUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 255
23403: PPUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 250
23413: PPUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 251
23423: PPUSH
23424: LD_VAR 0 2
23428: PPUSH
23429: CALL 21685 0 4
23433: ST_TO_ADDR
// end ;
23434: LD_VAR 0 3
23438: RET
// export function DangerInArea ( side , area ) ; begin
23439: LD_INT 0
23441: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23442: LD_ADDR_VAR 0 3
23446: PUSH
23447: LD_VAR 0 2
23451: PPUSH
23452: LD_INT 81
23454: PUSH
23455: LD_VAR 0 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PPUSH
23464: CALL_OW 70
23468: ST_TO_ADDR
// end ;
23469: LD_VAR 0 3
23473: RET
// export function IsExtension ( b ) ; begin
23474: LD_INT 0
23476: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23477: LD_ADDR_VAR 0 2
23481: PUSH
23482: LD_VAR 0 1
23486: PUSH
23487: LD_INT 23
23489: PUSH
23490: LD_INT 20
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 17
23498: PUSH
23499: LD_INT 24
23501: PUSH
23502: LD_INT 21
23504: PUSH
23505: LD_INT 19
23507: PUSH
23508: LD_INT 16
23510: PUSH
23511: LD_INT 25
23513: PUSH
23514: LD_INT 18
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: IN
23529: ST_TO_ADDR
// end ;
23530: LD_VAR 0 2
23534: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23535: LD_INT 0
23537: PPUSH
23538: PPUSH
23539: PPUSH
// result := [ ] ;
23540: LD_ADDR_VAR 0 4
23544: PUSH
23545: EMPTY
23546: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23547: LD_ADDR_VAR 0 5
23551: PUSH
23552: LD_VAR 0 2
23556: PPUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 3
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PPUSH
23567: CALL_OW 70
23571: ST_TO_ADDR
// if not tmp then
23572: LD_VAR 0 5
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23645
// if checkLink then
23581: LD_VAR 0 3
23585: IFFALSE 23635
// begin for i in tmp do
23587: LD_ADDR_VAR 0 6
23591: PUSH
23592: LD_VAR 0 5
23596: PUSH
23597: FOR_IN
23598: IFFALSE 23633
// if GetBase ( i ) <> base then
23600: LD_VAR 0 6
23604: PPUSH
23605: CALL_OW 274
23609: PUSH
23610: LD_VAR 0 1
23614: NONEQUAL
23615: IFFALSE 23631
// ComLinkToBase ( base , i ) ;
23617: LD_VAR 0 1
23621: PPUSH
23622: LD_VAR 0 6
23626: PPUSH
23627: CALL_OW 169
23631: GO 23597
23633: POP
23634: POP
// end ; result := tmp ;
23635: LD_ADDR_VAR 0 4
23639: PUSH
23640: LD_VAR 0 5
23644: ST_TO_ADDR
// end ;
23645: LD_VAR 0 4
23649: RET
// export function ComComplete ( units , b ) ; var i ; begin
23650: LD_INT 0
23652: PPUSH
23653: PPUSH
// if not units then
23654: LD_VAR 0 1
23658: NOT
23659: IFFALSE 23663
// exit ;
23661: GO 23753
// for i in units do
23663: LD_ADDR_VAR 0 4
23667: PUSH
23668: LD_VAR 0 1
23672: PUSH
23673: FOR_IN
23674: IFFALSE 23751
// if BuildingStatus ( b ) = bs_build then
23676: LD_VAR 0 2
23680: PPUSH
23681: CALL_OW 461
23685: PUSH
23686: LD_INT 1
23688: EQUAL
23689: IFFALSE 23749
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23691: LD_VAR 0 4
23695: PPUSH
23696: LD_STRING h
23698: PUSH
23699: LD_VAR 0 2
23703: PPUSH
23704: CALL_OW 250
23708: PUSH
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 251
23718: PUSH
23719: LD_VAR 0 2
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: PPUSH
23745: CALL_OW 446
23749: GO 23673
23751: POP
23752: POP
// end ;
23753: LD_VAR 0 3
23757: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23758: LD_INT 0
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23766: LD_VAR 0 1
23770: NOT
23771: PUSH
23772: LD_VAR 0 1
23776: PPUSH
23777: CALL_OW 263
23781: PUSH
23782: LD_INT 2
23784: NONEQUAL
23785: OR
23786: IFFALSE 23790
// exit ;
23788: GO 24106
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23790: LD_ADDR_VAR 0 6
23794: PUSH
23795: LD_INT 22
23797: PUSH
23798: LD_VAR 0 1
23802: PPUSH
23803: CALL_OW 255
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: LD_INT 30
23817: PUSH
23818: LD_INT 36
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 34
23827: PUSH
23828: LD_INT 31
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PPUSH
23844: CALL_OW 69
23848: ST_TO_ADDR
// if not tmp then
23849: LD_VAR 0 6
23853: NOT
23854: IFFALSE 23858
// exit ;
23856: GO 24106
// result := [ ] ;
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: EMPTY
23864: ST_TO_ADDR
// for i in tmp do
23865: LD_ADDR_VAR 0 3
23869: PUSH
23870: LD_VAR 0 6
23874: PUSH
23875: FOR_IN
23876: IFFALSE 23947
// begin t := UnitsInside ( i ) ;
23878: LD_ADDR_VAR 0 4
23882: PUSH
23883: LD_VAR 0 3
23887: PPUSH
23888: CALL_OW 313
23892: ST_TO_ADDR
// if t then
23893: LD_VAR 0 4
23897: IFFALSE 23945
// for j in t do
23899: LD_ADDR_VAR 0 7
23903: PUSH
23904: LD_VAR 0 4
23908: PUSH
23909: FOR_IN
23910: IFFALSE 23943
// result := Replace ( result , result + 1 , j ) ;
23912: LD_ADDR_VAR 0 2
23916: PUSH
23917: LD_VAR 0 2
23921: PPUSH
23922: LD_VAR 0 2
23926: PUSH
23927: LD_INT 1
23929: PLUS
23930: PPUSH
23931: LD_VAR 0 7
23935: PPUSH
23936: CALL_OW 1
23940: ST_TO_ADDR
23941: GO 23909
23943: POP
23944: POP
// end ;
23945: GO 23875
23947: POP
23948: POP
// if not result then
23949: LD_VAR 0 2
23953: NOT
23954: IFFALSE 23958
// exit ;
23956: GO 24106
// mech := result [ 1 ] ;
23958: LD_ADDR_VAR 0 5
23962: PUSH
23963: LD_VAR 0 2
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: ST_TO_ADDR
// if result > 1 then
23972: LD_VAR 0 2
23976: PUSH
23977: LD_INT 1
23979: GREATER
23980: IFFALSE 24092
// begin for i = 2 to result do
23982: LD_ADDR_VAR 0 3
23986: PUSH
23987: DOUBLE
23988: LD_INT 2
23990: DEC
23991: ST_TO_ADDR
23992: LD_VAR 0 2
23996: PUSH
23997: FOR_TO
23998: IFFALSE 24090
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24000: LD_ADDR_VAR 0 4
24004: PUSH
24005: LD_VAR 0 2
24009: PUSH
24010: LD_VAR 0 3
24014: ARRAY
24015: PPUSH
24016: LD_INT 3
24018: PPUSH
24019: CALL_OW 259
24023: PUSH
24024: LD_VAR 0 2
24028: PUSH
24029: LD_VAR 0 3
24033: ARRAY
24034: PPUSH
24035: CALL_OW 432
24039: MINUS
24040: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24041: LD_VAR 0 4
24045: PUSH
24046: LD_VAR 0 5
24050: PPUSH
24051: LD_INT 3
24053: PPUSH
24054: CALL_OW 259
24058: PUSH
24059: LD_VAR 0 5
24063: PPUSH
24064: CALL_OW 432
24068: MINUS
24069: GREATEREQUAL
24070: IFFALSE 24088
// mech := result [ i ] ;
24072: LD_ADDR_VAR 0 5
24076: PUSH
24077: LD_VAR 0 2
24081: PUSH
24082: LD_VAR 0 3
24086: ARRAY
24087: ST_TO_ADDR
// end ;
24088: GO 23997
24090: POP
24091: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24092: LD_VAR 0 1
24096: PPUSH
24097: LD_VAR 0 5
24101: PPUSH
24102: CALL_OW 135
// end ;
24106: LD_VAR 0 2
24110: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24111: LD_INT 0
24113: PPUSH
24114: PPUSH
24115: PPUSH
24116: PPUSH
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
24122: PPUSH
24123: PPUSH
24124: PPUSH
24125: PPUSH
// result := [ ] ;
24126: LD_ADDR_VAR 0 7
24130: PUSH
24131: EMPTY
24132: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24133: LD_VAR 0 1
24137: PPUSH
24138: CALL_OW 266
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: IN
24153: NOT
24154: IFFALSE 24158
// exit ;
24156: GO 25792
// if name then
24158: LD_VAR 0 3
24162: IFFALSE 24178
// SetBName ( base_dep , name ) ;
24164: LD_VAR 0 1
24168: PPUSH
24169: LD_VAR 0 3
24173: PPUSH
24174: CALL_OW 500
// base := GetBase ( base_dep ) ;
24178: LD_ADDR_VAR 0 15
24182: PUSH
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 274
24192: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24193: LD_ADDR_VAR 0 16
24197: PUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 255
24207: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24208: LD_ADDR_VAR 0 17
24212: PUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 248
24222: ST_TO_ADDR
// if sources then
24223: LD_VAR 0 5
24227: IFFALSE 24274
// for i = 1 to 3 do
24229: LD_ADDR_VAR 0 8
24233: PUSH
24234: DOUBLE
24235: LD_INT 1
24237: DEC
24238: ST_TO_ADDR
24239: LD_INT 3
24241: PUSH
24242: FOR_TO
24243: IFFALSE 24272
// AddResourceType ( base , i , sources [ i ] ) ;
24245: LD_VAR 0 15
24249: PPUSH
24250: LD_VAR 0 8
24254: PPUSH
24255: LD_VAR 0 5
24259: PUSH
24260: LD_VAR 0 8
24264: ARRAY
24265: PPUSH
24266: CALL_OW 276
24270: GO 24242
24272: POP
24273: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24274: LD_ADDR_VAR 0 18
24278: PUSH
24279: LD_VAR 0 15
24283: PPUSH
24284: LD_VAR 0 2
24288: PPUSH
24289: LD_INT 1
24291: PPUSH
24292: CALL 23535 0 3
24296: ST_TO_ADDR
// InitHc ;
24297: CALL_OW 19
// InitUc ;
24301: CALL_OW 18
// uc_side := side ;
24305: LD_ADDR_OWVAR 20
24309: PUSH
24310: LD_VAR 0 16
24314: ST_TO_ADDR
// uc_nation := nation ;
24315: LD_ADDR_OWVAR 21
24319: PUSH
24320: LD_VAR 0 17
24324: ST_TO_ADDR
// if buildings then
24325: LD_VAR 0 18
24329: IFFALSE 25651
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24331: LD_ADDR_VAR 0 19
24335: PUSH
24336: LD_VAR 0 18
24340: PPUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 29
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 30
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 72
24373: ST_TO_ADDR
// if tmp then
24374: LD_VAR 0 19
24378: IFFALSE 24426
// for i in tmp do
24380: LD_ADDR_VAR 0 8
24384: PUSH
24385: LD_VAR 0 19
24389: PUSH
24390: FOR_IN
24391: IFFALSE 24424
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24393: LD_VAR 0 8
24397: PPUSH
24398: CALL_OW 250
24402: PPUSH
24403: LD_VAR 0 8
24407: PPUSH
24408: CALL_OW 251
24412: PPUSH
24413: LD_VAR 0 16
24417: PPUSH
24418: CALL_OW 441
24422: GO 24390
24424: POP
24425: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24426: LD_VAR 0 18
24430: PPUSH
24431: LD_INT 2
24433: PUSH
24434: LD_INT 30
24436: PUSH
24437: LD_INT 32
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 30
24446: PUSH
24447: LD_INT 33
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: LIST
24458: PPUSH
24459: CALL_OW 72
24463: IFFALSE 24551
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24465: LD_ADDR_VAR 0 8
24469: PUSH
24470: LD_VAR 0 18
24474: PPUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 32
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 30
24490: PUSH
24491: LD_INT 33
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 72
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24549
// begin if not GetBWeapon ( i ) then
24511: LD_VAR 0 8
24515: PPUSH
24516: CALL_OW 269
24520: NOT
24521: IFFALSE 24547
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24523: LD_VAR 0 8
24527: PPUSH
24528: LD_VAR 0 8
24532: PPUSH
24533: LD_VAR 0 2
24537: PPUSH
24538: CALL 25797 0 2
24542: PPUSH
24543: CALL_OW 431
// end ;
24547: GO 24508
24549: POP
24550: POP
// end ; for i = 1 to personel do
24551: LD_ADDR_VAR 0 8
24555: PUSH
24556: DOUBLE
24557: LD_INT 1
24559: DEC
24560: ST_TO_ADDR
24561: LD_VAR 0 6
24565: PUSH
24566: FOR_TO
24567: IFFALSE 25631
// begin if i > 4 then
24569: LD_VAR 0 8
24573: PUSH
24574: LD_INT 4
24576: GREATER
24577: IFFALSE 24581
// break ;
24579: GO 25631
// case i of 1 :
24581: LD_VAR 0 8
24585: PUSH
24586: LD_INT 1
24588: DOUBLE
24589: EQUAL
24590: IFTRUE 24594
24592: GO 24674
24594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24595: LD_ADDR_VAR 0 12
24599: PUSH
24600: LD_VAR 0 18
24604: PPUSH
24605: LD_INT 22
24607: PUSH
24608: LD_VAR 0 16
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 58
24619: PUSH
24620: EMPTY
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 30
24628: PUSH
24629: LD_INT 32
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 4
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 30
24648: PUSH
24649: LD_INT 5
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: PPUSH
24667: CALL_OW 72
24671: ST_TO_ADDR
24672: GO 24896
24674: LD_INT 2
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24744
24682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24683: LD_ADDR_VAR 0 12
24687: PUSH
24688: LD_VAR 0 18
24692: PPUSH
24693: LD_INT 22
24695: PUSH
24696: LD_VAR 0 16
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 2
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 30
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 72
24741: ST_TO_ADDR
24742: GO 24896
24744: LD_INT 3
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24814
24752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24753: LD_ADDR_VAR 0 12
24757: PUSH
24758: LD_VAR 0 18
24762: PPUSH
24763: LD_INT 22
24765: PUSH
24766: LD_VAR 0 16
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: PUSH
24778: LD_INT 30
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 30
24790: PUSH
24791: LD_INT 3
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PPUSH
24807: CALL_OW 72
24811: ST_TO_ADDR
24812: GO 24896
24814: LD_INT 4
24816: DOUBLE
24817: EQUAL
24818: IFTRUE 24822
24820: GO 24895
24822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24823: LD_ADDR_VAR 0 12
24827: PUSH
24828: LD_VAR 0 18
24832: PPUSH
24833: LD_INT 22
24835: PUSH
24836: LD_VAR 0 16
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 30
24850: PUSH
24851: LD_INT 6
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 30
24860: PUSH
24861: LD_INT 7
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 30
24870: PUSH
24871: LD_INT 8
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 72
24892: ST_TO_ADDR
24893: GO 24896
24895: POP
// if i = 1 then
24896: LD_VAR 0 8
24900: PUSH
24901: LD_INT 1
24903: EQUAL
24904: IFFALSE 25015
// begin tmp := [ ] ;
24906: LD_ADDR_VAR 0 19
24910: PUSH
24911: EMPTY
24912: ST_TO_ADDR
// for j in f do
24913: LD_ADDR_VAR 0 9
24917: PUSH
24918: LD_VAR 0 12
24922: PUSH
24923: FOR_IN
24924: IFFALSE 24997
// if GetBType ( j ) = b_bunker then
24926: LD_VAR 0 9
24930: PPUSH
24931: CALL_OW 266
24935: PUSH
24936: LD_INT 32
24938: EQUAL
24939: IFFALSE 24966
// tmp := Insert ( tmp , 1 , j ) else
24941: LD_ADDR_VAR 0 19
24945: PUSH
24946: LD_VAR 0 19
24950: PPUSH
24951: LD_INT 1
24953: PPUSH
24954: LD_VAR 0 9
24958: PPUSH
24959: CALL_OW 2
24963: ST_TO_ADDR
24964: GO 24995
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24966: LD_ADDR_VAR 0 19
24970: PUSH
24971: LD_VAR 0 19
24975: PPUSH
24976: LD_VAR 0 19
24980: PUSH
24981: LD_INT 1
24983: PLUS
24984: PPUSH
24985: LD_VAR 0 9
24989: PPUSH
24990: CALL_OW 2
24994: ST_TO_ADDR
24995: GO 24923
24997: POP
24998: POP
// if tmp then
24999: LD_VAR 0 19
25003: IFFALSE 25015
// f := tmp ;
25005: LD_ADDR_VAR 0 12
25009: PUSH
25010: LD_VAR 0 19
25014: ST_TO_ADDR
// end ; x := personel [ i ] ;
25015: LD_ADDR_VAR 0 13
25019: PUSH
25020: LD_VAR 0 6
25024: PUSH
25025: LD_VAR 0 8
25029: ARRAY
25030: ST_TO_ADDR
// if x = - 1 then
25031: LD_VAR 0 13
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: EQUAL
25040: IFFALSE 25249
// begin for j in f do
25042: LD_ADDR_VAR 0 9
25046: PUSH
25047: LD_VAR 0 12
25051: PUSH
25052: FOR_IN
25053: IFFALSE 25245
// repeat InitHc ;
25055: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25059: LD_VAR 0 9
25063: PPUSH
25064: CALL_OW 266
25068: PUSH
25069: LD_INT 5
25071: EQUAL
25072: IFFALSE 25142
// begin if UnitsInside ( j ) < 3 then
25074: LD_VAR 0 9
25078: PPUSH
25079: CALL_OW 313
25083: PUSH
25084: LD_INT 3
25086: LESS
25087: IFFALSE 25123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25089: LD_INT 0
25091: PPUSH
25092: LD_INT 5
25094: PUSH
25095: LD_INT 8
25097: PUSH
25098: LD_INT 9
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: LD_VAR 0 17
25110: ARRAY
25111: PPUSH
25112: LD_VAR 0 4
25116: PPUSH
25117: CALL_OW 380
25121: GO 25140
// PrepareHuman ( false , i , skill ) ;
25123: LD_INT 0
25125: PPUSH
25126: LD_VAR 0 8
25130: PPUSH
25131: LD_VAR 0 4
25135: PPUSH
25136: CALL_OW 380
// end else
25140: GO 25159
// PrepareHuman ( false , i , skill ) ;
25142: LD_INT 0
25144: PPUSH
25145: LD_VAR 0 8
25149: PPUSH
25150: LD_VAR 0 4
25154: PPUSH
25155: CALL_OW 380
// un := CreateHuman ;
25159: LD_ADDR_VAR 0 14
25163: PUSH
25164: CALL_OW 44
25168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25169: LD_ADDR_VAR 0 7
25173: PUSH
25174: LD_VAR 0 7
25178: PPUSH
25179: LD_INT 1
25181: PPUSH
25182: LD_VAR 0 14
25186: PPUSH
25187: CALL_OW 2
25191: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25192: LD_VAR 0 14
25196: PPUSH
25197: LD_VAR 0 9
25201: PPUSH
25202: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25206: LD_VAR 0 9
25210: PPUSH
25211: CALL_OW 313
25215: PUSH
25216: LD_INT 6
25218: EQUAL
25219: PUSH
25220: LD_VAR 0 9
25224: PPUSH
25225: CALL_OW 266
25229: PUSH
25230: LD_INT 32
25232: PUSH
25233: LD_INT 31
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: IN
25240: OR
25241: IFFALSE 25055
25243: GO 25052
25245: POP
25246: POP
// end else
25247: GO 25629
// for j = 1 to x do
25249: LD_ADDR_VAR 0 9
25253: PUSH
25254: DOUBLE
25255: LD_INT 1
25257: DEC
25258: ST_TO_ADDR
25259: LD_VAR 0 13
25263: PUSH
25264: FOR_TO
25265: IFFALSE 25627
// begin InitHc ;
25267: CALL_OW 19
// if not f then
25271: LD_VAR 0 12
25275: NOT
25276: IFFALSE 25365
// begin PrepareHuman ( false , i , skill ) ;
25278: LD_INT 0
25280: PPUSH
25281: LD_VAR 0 8
25285: PPUSH
25286: LD_VAR 0 4
25290: PPUSH
25291: CALL_OW 380
// un := CreateHuman ;
25295: LD_ADDR_VAR 0 14
25299: PUSH
25300: CALL_OW 44
25304: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25305: LD_ADDR_VAR 0 7
25309: PUSH
25310: LD_VAR 0 7
25314: PPUSH
25315: LD_INT 1
25317: PPUSH
25318: LD_VAR 0 14
25322: PPUSH
25323: CALL_OW 2
25327: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25328: LD_VAR 0 14
25332: PPUSH
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 250
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 251
25352: PPUSH
25353: LD_INT 10
25355: PPUSH
25356: LD_INT 0
25358: PPUSH
25359: CALL_OW 50
// continue ;
25363: GO 25264
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25365: LD_VAR 0 12
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PPUSH
25374: CALL_OW 313
25378: PUSH
25379: LD_VAR 0 12
25383: PUSH
25384: LD_INT 1
25386: ARRAY
25387: PPUSH
25388: CALL_OW 266
25392: PUSH
25393: LD_INT 32
25395: PUSH
25396: LD_INT 31
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: IN
25403: AND
25404: PUSH
25405: LD_VAR 0 12
25409: PUSH
25410: LD_INT 1
25412: ARRAY
25413: PPUSH
25414: CALL_OW 313
25418: PUSH
25419: LD_INT 6
25421: EQUAL
25422: OR
25423: IFFALSE 25443
// f := Delete ( f , 1 ) ;
25425: LD_ADDR_VAR 0 12
25429: PUSH
25430: LD_VAR 0 12
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 3
25442: ST_TO_ADDR
// if not f then
25443: LD_VAR 0 12
25447: NOT
25448: IFFALSE 25466
// begin x := x + 2 ;
25450: LD_ADDR_VAR 0 13
25454: PUSH
25455: LD_VAR 0 13
25459: PUSH
25460: LD_INT 2
25462: PLUS
25463: ST_TO_ADDR
// continue ;
25464: GO 25264
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25466: LD_VAR 0 12
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PPUSH
25475: CALL_OW 266
25479: PUSH
25480: LD_INT 5
25482: EQUAL
25483: IFFALSE 25557
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25485: LD_VAR 0 12
25489: PUSH
25490: LD_INT 1
25492: ARRAY
25493: PPUSH
25494: CALL_OW 313
25498: PUSH
25499: LD_INT 3
25501: LESS
25502: IFFALSE 25538
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25504: LD_INT 0
25506: PPUSH
25507: LD_INT 5
25509: PUSH
25510: LD_INT 8
25512: PUSH
25513: LD_INT 9
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: PUSH
25521: LD_VAR 0 17
25525: ARRAY
25526: PPUSH
25527: LD_VAR 0 4
25531: PPUSH
25532: CALL_OW 380
25536: GO 25555
// PrepareHuman ( false , i , skill ) ;
25538: LD_INT 0
25540: PPUSH
25541: LD_VAR 0 8
25545: PPUSH
25546: LD_VAR 0 4
25550: PPUSH
25551: CALL_OW 380
// end else
25555: GO 25574
// PrepareHuman ( false , i , skill ) ;
25557: LD_INT 0
25559: PPUSH
25560: LD_VAR 0 8
25564: PPUSH
25565: LD_VAR 0 4
25569: PPUSH
25570: CALL_OW 380
// un := CreateHuman ;
25574: LD_ADDR_VAR 0 14
25578: PUSH
25579: CALL_OW 44
25583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25584: LD_ADDR_VAR 0 7
25588: PUSH
25589: LD_VAR 0 7
25593: PPUSH
25594: LD_INT 1
25596: PPUSH
25597: LD_VAR 0 14
25601: PPUSH
25602: CALL_OW 2
25606: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25607: LD_VAR 0 14
25611: PPUSH
25612: LD_VAR 0 12
25616: PUSH
25617: LD_INT 1
25619: ARRAY
25620: PPUSH
25621: CALL_OW 52
// end ;
25625: GO 25264
25627: POP
25628: POP
// end ;
25629: GO 24566
25631: POP
25632: POP
// result := result ^ buildings ;
25633: LD_ADDR_VAR 0 7
25637: PUSH
25638: LD_VAR 0 7
25642: PUSH
25643: LD_VAR 0 18
25647: ADD
25648: ST_TO_ADDR
// end else
25649: GO 25792
// begin for i = 1 to personel do
25651: LD_ADDR_VAR 0 8
25655: PUSH
25656: DOUBLE
25657: LD_INT 1
25659: DEC
25660: ST_TO_ADDR
25661: LD_VAR 0 6
25665: PUSH
25666: FOR_TO
25667: IFFALSE 25790
// begin if i > 4 then
25669: LD_VAR 0 8
25673: PUSH
25674: LD_INT 4
25676: GREATER
25677: IFFALSE 25681
// break ;
25679: GO 25790
// x := personel [ i ] ;
25681: LD_ADDR_VAR 0 13
25685: PUSH
25686: LD_VAR 0 6
25690: PUSH
25691: LD_VAR 0 8
25695: ARRAY
25696: ST_TO_ADDR
// if x = - 1 then
25697: LD_VAR 0 13
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: EQUAL
25706: IFFALSE 25710
// continue ;
25708: GO 25666
// PrepareHuman ( false , i , skill ) ;
25710: LD_INT 0
25712: PPUSH
25713: LD_VAR 0 8
25717: PPUSH
25718: LD_VAR 0 4
25722: PPUSH
25723: CALL_OW 380
// un := CreateHuman ;
25727: LD_ADDR_VAR 0 14
25731: PUSH
25732: CALL_OW 44
25736: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25737: LD_VAR 0 14
25741: PPUSH
25742: LD_VAR 0 1
25746: PPUSH
25747: CALL_OW 250
25751: PPUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 251
25761: PPUSH
25762: LD_INT 10
25764: PPUSH
25765: LD_INT 0
25767: PPUSH
25768: CALL_OW 50
// result := result ^ un ;
25772: LD_ADDR_VAR 0 7
25776: PUSH
25777: LD_VAR 0 7
25781: PUSH
25782: LD_VAR 0 14
25786: ADD
25787: ST_TO_ADDR
// end ;
25788: GO 25666
25790: POP
25791: POP
// end ; end ;
25792: LD_VAR 0 7
25796: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25797: LD_INT 0
25799: PPUSH
25800: PPUSH
25801: PPUSH
25802: PPUSH
25803: PPUSH
25804: PPUSH
25805: PPUSH
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
// result := false ;
25815: LD_ADDR_VAR 0 3
25819: PUSH
25820: LD_INT 0
25822: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25823: LD_VAR 0 1
25827: NOT
25828: PUSH
25829: LD_VAR 0 1
25833: PPUSH
25834: CALL_OW 266
25838: PUSH
25839: LD_INT 32
25841: PUSH
25842: LD_INT 33
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: IN
25849: NOT
25850: OR
25851: IFFALSE 25855
// exit ;
25853: GO 26964
// nat := GetNation ( tower ) ;
25855: LD_ADDR_VAR 0 12
25859: PUSH
25860: LD_VAR 0 1
25864: PPUSH
25865: CALL_OW 248
25869: ST_TO_ADDR
// side := GetSide ( tower ) ;
25870: LD_ADDR_VAR 0 16
25874: PUSH
25875: LD_VAR 0 1
25879: PPUSH
25880: CALL_OW 255
25884: ST_TO_ADDR
// x := GetX ( tower ) ;
25885: LD_ADDR_VAR 0 10
25889: PUSH
25890: LD_VAR 0 1
25894: PPUSH
25895: CALL_OW 250
25899: ST_TO_ADDR
// y := GetY ( tower ) ;
25900: LD_ADDR_VAR 0 11
25904: PUSH
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL_OW 251
25914: ST_TO_ADDR
// if not x or not y then
25915: LD_VAR 0 10
25919: NOT
25920: PUSH
25921: LD_VAR 0 11
25925: NOT
25926: OR
25927: IFFALSE 25931
// exit ;
25929: GO 26964
// weapon := 0 ;
25931: LD_ADDR_VAR 0 18
25935: PUSH
25936: LD_INT 0
25938: ST_TO_ADDR
// fac_list := [ ] ;
25939: LD_ADDR_VAR 0 17
25943: PUSH
25944: EMPTY
25945: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25946: LD_ADDR_VAR 0 6
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 274
25960: PPUSH
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_INT 0
25968: PPUSH
25969: CALL 23535 0 3
25973: PPUSH
25974: LD_INT 30
25976: PUSH
25977: LD_INT 3
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 72
25988: ST_TO_ADDR
// if not factories then
25989: LD_VAR 0 6
25993: NOT
25994: IFFALSE 25998
// exit ;
25996: GO 26964
// for i in factories do
25998: LD_ADDR_VAR 0 8
26002: PUSH
26003: LD_VAR 0 6
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26034
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26011: LD_ADDR_VAR 0 17
26015: PUSH
26016: LD_VAR 0 17
26020: PUSH
26021: LD_VAR 0 8
26025: PPUSH
26026: CALL_OW 478
26030: UNION
26031: ST_TO_ADDR
26032: GO 26008
26034: POP
26035: POP
// if not fac_list then
26036: LD_VAR 0 17
26040: NOT
26041: IFFALSE 26045
// exit ;
26043: GO 26964
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26045: LD_ADDR_VAR 0 5
26049: PUSH
26050: LD_INT 4
26052: PUSH
26053: LD_INT 5
26055: PUSH
26056: LD_INT 9
26058: PUSH
26059: LD_INT 10
26061: PUSH
26062: LD_INT 6
26064: PUSH
26065: LD_INT 7
26067: PUSH
26068: LD_INT 11
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 27
26082: PUSH
26083: LD_INT 28
26085: PUSH
26086: LD_INT 26
26088: PUSH
26089: LD_INT 30
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 43
26100: PUSH
26101: LD_INT 44
26103: PUSH
26104: LD_INT 46
26106: PUSH
26107: LD_INT 45
26109: PUSH
26110: LD_INT 47
26112: PUSH
26113: LD_INT 49
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: PUSH
26129: LD_VAR 0 12
26133: ARRAY
26134: ST_TO_ADDR
// list := list isect fac_list ;
26135: LD_ADDR_VAR 0 5
26139: PUSH
26140: LD_VAR 0 5
26144: PUSH
26145: LD_VAR 0 17
26149: ISECT
26150: ST_TO_ADDR
// if not list then
26151: LD_VAR 0 5
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26964
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26160: LD_VAR 0 12
26164: PUSH
26165: LD_INT 3
26167: EQUAL
26168: PUSH
26169: LD_INT 49
26171: PUSH
26172: LD_VAR 0 5
26176: IN
26177: AND
26178: PUSH
26179: LD_INT 31
26181: PPUSH
26182: LD_VAR 0 16
26186: PPUSH
26187: CALL_OW 321
26191: PUSH
26192: LD_INT 2
26194: EQUAL
26195: AND
26196: IFFALSE 26256
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26198: LD_INT 22
26200: PUSH
26201: LD_VAR 0 16
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 35
26212: PUSH
26213: LD_INT 49
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 91
26222: PUSH
26223: LD_VAR 0 1
26227: PUSH
26228: LD_INT 10
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: PPUSH
26241: CALL_OW 69
26245: NOT
26246: IFFALSE 26256
// weapon := ru_time_lapser ;
26248: LD_ADDR_VAR 0 18
26252: PUSH
26253: LD_INT 49
26255: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26256: LD_VAR 0 12
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: IN
26271: PUSH
26272: LD_INT 11
26274: PUSH
26275: LD_VAR 0 5
26279: IN
26280: PUSH
26281: LD_INT 30
26283: PUSH
26284: LD_VAR 0 5
26288: IN
26289: OR
26290: AND
26291: PUSH
26292: LD_INT 6
26294: PPUSH
26295: LD_VAR 0 16
26299: PPUSH
26300: CALL_OW 321
26304: PUSH
26305: LD_INT 2
26307: EQUAL
26308: AND
26309: IFFALSE 26474
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26311: LD_INT 22
26313: PUSH
26314: LD_VAR 0 16
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 35
26328: PUSH
26329: LD_INT 11
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 35
26338: PUSH
26339: LD_INT 30
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 91
26353: PUSH
26354: LD_VAR 0 1
26358: PUSH
26359: LD_INT 18
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: PPUSH
26372: CALL_OW 69
26376: NOT
26377: PUSH
26378: LD_INT 22
26380: PUSH
26381: LD_VAR 0 16
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 30
26395: PUSH
26396: LD_INT 32
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 30
26405: PUSH
26406: LD_INT 33
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 91
26420: PUSH
26421: LD_VAR 0 1
26425: PUSH
26426: LD_INT 12
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: PPUSH
26442: CALL_OW 69
26446: PUSH
26447: LD_INT 2
26449: GREATER
26450: AND
26451: IFFALSE 26474
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26453: LD_ADDR_VAR 0 18
26457: PUSH
26458: LD_INT 11
26460: PUSH
26461: LD_INT 30
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_VAR 0 12
26472: ARRAY
26473: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26474: LD_VAR 0 18
26478: NOT
26479: PUSH
26480: LD_INT 40
26482: PPUSH
26483: LD_VAR 0 16
26487: PPUSH
26488: CALL_OW 321
26492: PUSH
26493: LD_INT 2
26495: EQUAL
26496: AND
26497: PUSH
26498: LD_INT 7
26500: PUSH
26501: LD_VAR 0 5
26505: IN
26506: PUSH
26507: LD_INT 28
26509: PUSH
26510: LD_VAR 0 5
26514: IN
26515: OR
26516: PUSH
26517: LD_INT 45
26519: PUSH
26520: LD_VAR 0 5
26524: IN
26525: OR
26526: AND
26527: IFFALSE 26781
// begin hex := GetHexInfo ( x , y ) ;
26529: LD_ADDR_VAR 0 4
26533: PUSH
26534: LD_VAR 0 10
26538: PPUSH
26539: LD_VAR 0 11
26543: PPUSH
26544: CALL_OW 546
26548: ST_TO_ADDR
// if hex [ 1 ] then
26549: LD_VAR 0 4
26553: PUSH
26554: LD_INT 1
26556: ARRAY
26557: IFFALSE 26561
// exit ;
26559: GO 26964
// height := hex [ 2 ] ;
26561: LD_ADDR_VAR 0 15
26565: PUSH
26566: LD_VAR 0 4
26570: PUSH
26571: LD_INT 2
26573: ARRAY
26574: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26575: LD_ADDR_VAR 0 14
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 3
26588: PUSH
26589: LD_INT 5
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: ST_TO_ADDR
// for i in tmp do
26598: LD_ADDR_VAR 0 8
26602: PUSH
26603: LD_VAR 0 14
26607: PUSH
26608: FOR_IN
26609: IFFALSE 26779
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26611: LD_ADDR_VAR 0 9
26615: PUSH
26616: LD_VAR 0 10
26620: PPUSH
26621: LD_VAR 0 8
26625: PPUSH
26626: LD_INT 5
26628: PPUSH
26629: CALL_OW 272
26633: PUSH
26634: LD_VAR 0 11
26638: PPUSH
26639: LD_VAR 0 8
26643: PPUSH
26644: LD_INT 5
26646: PPUSH
26647: CALL_OW 273
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26656: LD_VAR 0 9
26660: PUSH
26661: LD_INT 1
26663: ARRAY
26664: PPUSH
26665: LD_VAR 0 9
26669: PUSH
26670: LD_INT 2
26672: ARRAY
26673: PPUSH
26674: CALL_OW 488
26678: IFFALSE 26777
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26680: LD_ADDR_VAR 0 4
26684: PUSH
26685: LD_VAR 0 9
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: PPUSH
26694: LD_VAR 0 9
26698: PUSH
26699: LD_INT 2
26701: ARRAY
26702: PPUSH
26703: CALL_OW 546
26707: ST_TO_ADDR
// if hex [ 1 ] then
26708: LD_VAR 0 4
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: IFFALSE 26720
// continue ;
26718: GO 26608
// h := hex [ 2 ] ;
26720: LD_ADDR_VAR 0 13
26724: PUSH
26725: LD_VAR 0 4
26729: PUSH
26730: LD_INT 2
26732: ARRAY
26733: ST_TO_ADDR
// if h + 7 < height then
26734: LD_VAR 0 13
26738: PUSH
26739: LD_INT 7
26741: PLUS
26742: PUSH
26743: LD_VAR 0 15
26747: LESS
26748: IFFALSE 26777
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26750: LD_ADDR_VAR 0 18
26754: PUSH
26755: LD_INT 7
26757: PUSH
26758: LD_INT 28
26760: PUSH
26761: LD_INT 45
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: PUSH
26769: LD_VAR 0 12
26773: ARRAY
26774: ST_TO_ADDR
// break ;
26775: GO 26779
// end ; end ; end ;
26777: GO 26608
26779: POP
26780: POP
// end ; if not weapon then
26781: LD_VAR 0 18
26785: NOT
26786: IFFALSE 26846
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26788: LD_ADDR_VAR 0 5
26792: PUSH
26793: LD_VAR 0 5
26797: PUSH
26798: LD_INT 11
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: LD_INT 49
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: DIFF
26812: ST_TO_ADDR
// if not list then
26813: LD_VAR 0 5
26817: NOT
26818: IFFALSE 26822
// exit ;
26820: GO 26964
// weapon := list [ rand ( 1 , list ) ] ;
26822: LD_ADDR_VAR 0 18
26826: PUSH
26827: LD_VAR 0 5
26831: PUSH
26832: LD_INT 1
26834: PPUSH
26835: LD_VAR 0 5
26839: PPUSH
26840: CALL_OW 12
26844: ARRAY
26845: ST_TO_ADDR
// end ; if weapon then
26846: LD_VAR 0 18
26850: IFFALSE 26964
// begin tmp := CostOfWeapon ( weapon ) ;
26852: LD_ADDR_VAR 0 14
26856: PUSH
26857: LD_VAR 0 18
26861: PPUSH
26862: CALL_OW 451
26866: ST_TO_ADDR
// j := GetBase ( tower ) ;
26867: LD_ADDR_VAR 0 9
26871: PUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 274
26881: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26882: LD_VAR 0 9
26886: PPUSH
26887: LD_INT 1
26889: PPUSH
26890: CALL_OW 275
26894: PUSH
26895: LD_VAR 0 14
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: GREATEREQUAL
26904: PUSH
26905: LD_VAR 0 9
26909: PPUSH
26910: LD_INT 2
26912: PPUSH
26913: CALL_OW 275
26917: PUSH
26918: LD_VAR 0 14
26922: PUSH
26923: LD_INT 2
26925: ARRAY
26926: GREATEREQUAL
26927: AND
26928: PUSH
26929: LD_VAR 0 9
26933: PPUSH
26934: LD_INT 3
26936: PPUSH
26937: CALL_OW 275
26941: PUSH
26942: LD_VAR 0 14
26946: PUSH
26947: LD_INT 3
26949: ARRAY
26950: GREATEREQUAL
26951: AND
26952: IFFALSE 26964
// result := weapon ;
26954: LD_ADDR_VAR 0 3
26958: PUSH
26959: LD_VAR 0 18
26963: ST_TO_ADDR
// end ; end ;
26964: LD_VAR 0 3
26968: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26969: LD_INT 0
26971: PPUSH
26972: PPUSH
// result := true ;
26973: LD_ADDR_VAR 0 3
26977: PUSH
26978: LD_INT 1
26980: ST_TO_ADDR
// if array1 = array2 then
26981: LD_VAR 0 1
26985: PUSH
26986: LD_VAR 0 2
26990: EQUAL
26991: IFFALSE 27051
// begin for i = 1 to array1 do
26993: LD_ADDR_VAR 0 4
26997: PUSH
26998: DOUBLE
26999: LD_INT 1
27001: DEC
27002: ST_TO_ADDR
27003: LD_VAR 0 1
27007: PUSH
27008: FOR_TO
27009: IFFALSE 27047
// if array1 [ i ] <> array2 [ i ] then
27011: LD_VAR 0 1
27015: PUSH
27016: LD_VAR 0 4
27020: ARRAY
27021: PUSH
27022: LD_VAR 0 2
27026: PUSH
27027: LD_VAR 0 4
27031: ARRAY
27032: NONEQUAL
27033: IFFALSE 27045
// begin result := false ;
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_INT 0
27042: ST_TO_ADDR
// break ;
27043: GO 27047
// end ;
27045: GO 27008
27047: POP
27048: POP
// end else
27049: GO 27059
// result := false ;
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_INT 0
27058: ST_TO_ADDR
// end ;
27059: LD_VAR 0 3
27063: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
// if not array1 or not array2 then
27068: LD_VAR 0 1
27072: NOT
27073: PUSH
27074: LD_VAR 0 2
27078: NOT
27079: OR
27080: IFFALSE 27084
// exit ;
27082: GO 27148
// result := true ;
27084: LD_ADDR_VAR 0 3
27088: PUSH
27089: LD_INT 1
27091: ST_TO_ADDR
// for i = 1 to array1 do
27092: LD_ADDR_VAR 0 4
27096: PUSH
27097: DOUBLE
27098: LD_INT 1
27100: DEC
27101: ST_TO_ADDR
27102: LD_VAR 0 1
27106: PUSH
27107: FOR_TO
27108: IFFALSE 27146
// if array1 [ i ] <> array2 [ i ] then
27110: LD_VAR 0 1
27114: PUSH
27115: LD_VAR 0 4
27119: ARRAY
27120: PUSH
27121: LD_VAR 0 2
27125: PUSH
27126: LD_VAR 0 4
27130: ARRAY
27131: NONEQUAL
27132: IFFALSE 27144
// begin result := false ;
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: LD_INT 0
27141: ST_TO_ADDR
// break ;
27142: GO 27146
// end ;
27144: GO 27107
27146: POP
27147: POP
// end ;
27148: LD_VAR 0 3
27152: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27153: LD_INT 0
27155: PPUSH
27156: PPUSH
27157: PPUSH
// pom := GetBase ( fac ) ;
27158: LD_ADDR_VAR 0 5
27162: PUSH
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 274
27172: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27173: LD_ADDR_VAR 0 4
27177: PUSH
27178: LD_VAR 0 2
27182: PUSH
27183: LD_INT 1
27185: ARRAY
27186: PPUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_INT 2
27194: ARRAY
27195: PPUSH
27196: LD_VAR 0 2
27200: PUSH
27201: LD_INT 3
27203: ARRAY
27204: PPUSH
27205: LD_VAR 0 2
27209: PUSH
27210: LD_INT 4
27212: ARRAY
27213: PPUSH
27214: CALL_OW 449
27218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27219: LD_ADDR_VAR 0 3
27223: PUSH
27224: LD_VAR 0 5
27228: PPUSH
27229: LD_INT 1
27231: PPUSH
27232: CALL_OW 275
27236: PUSH
27237: LD_VAR 0 4
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: GREATEREQUAL
27246: PUSH
27247: LD_VAR 0 5
27251: PPUSH
27252: LD_INT 2
27254: PPUSH
27255: CALL_OW 275
27259: PUSH
27260: LD_VAR 0 4
27264: PUSH
27265: LD_INT 2
27267: ARRAY
27268: GREATEREQUAL
27269: AND
27270: PUSH
27271: LD_VAR 0 5
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: CALL_OW 275
27283: PUSH
27284: LD_VAR 0 4
27288: PUSH
27289: LD_INT 3
27291: ARRAY
27292: GREATEREQUAL
27293: AND
27294: ST_TO_ADDR
// end ;
27295: LD_VAR 0 3
27299: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
27305: PPUSH
// pom := GetBase ( building ) ;
27306: LD_ADDR_VAR 0 3
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: CALL_OW 274
27320: ST_TO_ADDR
// if not pom then
27321: LD_VAR 0 3
27325: NOT
27326: IFFALSE 27330
// exit ;
27328: GO 27500
// btype := GetBType ( building ) ;
27330: LD_ADDR_VAR 0 5
27334: PUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 266
27344: ST_TO_ADDR
// if btype = b_armoury then
27345: LD_VAR 0 5
27349: PUSH
27350: LD_INT 4
27352: EQUAL
27353: IFFALSE 27363
// btype := b_barracks ;
27355: LD_ADDR_VAR 0 5
27359: PUSH
27360: LD_INT 5
27362: ST_TO_ADDR
// if btype = b_depot then
27363: LD_VAR 0 5
27367: PUSH
27368: LD_INT 0
27370: EQUAL
27371: IFFALSE 27381
// btype := b_warehouse ;
27373: LD_ADDR_VAR 0 5
27377: PUSH
27378: LD_INT 1
27380: ST_TO_ADDR
// if btype = b_workshop then
27381: LD_VAR 0 5
27385: PUSH
27386: LD_INT 2
27388: EQUAL
27389: IFFALSE 27399
// btype := b_factory ;
27391: LD_ADDR_VAR 0 5
27395: PUSH
27396: LD_INT 3
27398: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27399: LD_ADDR_VAR 0 4
27403: PUSH
27404: LD_VAR 0 5
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 248
27418: PPUSH
27419: CALL_OW 450
27423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27424: LD_ADDR_VAR 0 2
27428: PUSH
27429: LD_VAR 0 3
27433: PPUSH
27434: LD_INT 1
27436: PPUSH
27437: CALL_OW 275
27441: PUSH
27442: LD_VAR 0 4
27446: PUSH
27447: LD_INT 1
27449: ARRAY
27450: GREATEREQUAL
27451: PUSH
27452: LD_VAR 0 3
27456: PPUSH
27457: LD_INT 2
27459: PPUSH
27460: CALL_OW 275
27464: PUSH
27465: LD_VAR 0 4
27469: PUSH
27470: LD_INT 2
27472: ARRAY
27473: GREATEREQUAL
27474: AND
27475: PUSH
27476: LD_VAR 0 3
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: CALL_OW 275
27488: PUSH
27489: LD_VAR 0 4
27493: PUSH
27494: LD_INT 3
27496: ARRAY
27497: GREATEREQUAL
27498: AND
27499: ST_TO_ADDR
// end ;
27500: LD_VAR 0 2
27504: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27505: LD_INT 0
27507: PPUSH
27508: PPUSH
27509: PPUSH
// pom := GetBase ( building ) ;
27510: LD_ADDR_VAR 0 4
27514: PUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: CALL_OW 274
27524: ST_TO_ADDR
// if not pom then
27525: LD_VAR 0 4
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27635
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27534: LD_ADDR_VAR 0 5
27538: PUSH
27539: LD_VAR 0 2
27543: PPUSH
27544: LD_VAR 0 1
27548: PPUSH
27549: CALL_OW 248
27553: PPUSH
27554: CALL_OW 450
27558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27559: LD_ADDR_VAR 0 3
27563: PUSH
27564: LD_VAR 0 4
27568: PPUSH
27569: LD_INT 1
27571: PPUSH
27572: CALL_OW 275
27576: PUSH
27577: LD_VAR 0 5
27581: PUSH
27582: LD_INT 1
27584: ARRAY
27585: GREATEREQUAL
27586: PUSH
27587: LD_VAR 0 4
27591: PPUSH
27592: LD_INT 2
27594: PPUSH
27595: CALL_OW 275
27599: PUSH
27600: LD_VAR 0 5
27604: PUSH
27605: LD_INT 2
27607: ARRAY
27608: GREATEREQUAL
27609: AND
27610: PUSH
27611: LD_VAR 0 4
27615: PPUSH
27616: LD_INT 3
27618: PPUSH
27619: CALL_OW 275
27623: PUSH
27624: LD_VAR 0 5
27628: PUSH
27629: LD_INT 3
27631: ARRAY
27632: GREATEREQUAL
27633: AND
27634: ST_TO_ADDR
// end ;
27635: LD_VAR 0 3
27639: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
// result := false ;
27653: LD_ADDR_VAR 0 8
27657: PUSH
27658: LD_INT 0
27660: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27661: LD_VAR 0 5
27665: NOT
27666: PUSH
27667: LD_VAR 0 1
27671: NOT
27672: OR
27673: PUSH
27674: LD_VAR 0 2
27678: NOT
27679: OR
27680: PUSH
27681: LD_VAR 0 3
27685: NOT
27686: OR
27687: IFFALSE 27691
// exit ;
27689: GO 28505
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27691: LD_ADDR_VAR 0 14
27695: PUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: LD_VAR 0 2
27705: PPUSH
27706: LD_VAR 0 3
27710: PPUSH
27711: LD_VAR 0 4
27715: PPUSH
27716: LD_VAR 0 5
27720: PUSH
27721: LD_INT 1
27723: ARRAY
27724: PPUSH
27725: CALL_OW 248
27729: PPUSH
27730: LD_INT 0
27732: PPUSH
27733: CALL 29738 0 6
27737: ST_TO_ADDR
// if not hexes then
27738: LD_VAR 0 14
27742: NOT
27743: IFFALSE 27747
// exit ;
27745: GO 28505
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27747: LD_ADDR_VAR 0 17
27751: PUSH
27752: LD_VAR 0 5
27756: PPUSH
27757: LD_INT 22
27759: PUSH
27760: LD_VAR 0 13
27764: PPUSH
27765: CALL_OW 255
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 30
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 30
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PPUSH
27806: CALL_OW 72
27810: ST_TO_ADDR
// for i = 1 to hexes do
27811: LD_ADDR_VAR 0 9
27815: PUSH
27816: DOUBLE
27817: LD_INT 1
27819: DEC
27820: ST_TO_ADDR
27821: LD_VAR 0 14
27825: PUSH
27826: FOR_TO
27827: IFFALSE 28503
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27829: LD_ADDR_VAR 0 13
27833: PUSH
27834: LD_VAR 0 14
27838: PUSH
27839: LD_VAR 0 9
27843: ARRAY
27844: PUSH
27845: LD_INT 1
27847: ARRAY
27848: PPUSH
27849: LD_VAR 0 14
27853: PUSH
27854: LD_VAR 0 9
27858: ARRAY
27859: PUSH
27860: LD_INT 2
27862: ARRAY
27863: PPUSH
27864: CALL_OW 428
27868: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27869: LD_VAR 0 14
27873: PUSH
27874: LD_VAR 0 9
27878: ARRAY
27879: PUSH
27880: LD_INT 1
27882: ARRAY
27883: PPUSH
27884: LD_VAR 0 14
27888: PUSH
27889: LD_VAR 0 9
27893: ARRAY
27894: PUSH
27895: LD_INT 2
27897: ARRAY
27898: PPUSH
27899: CALL_OW 351
27903: PUSH
27904: LD_VAR 0 14
27908: PUSH
27909: LD_VAR 0 9
27913: ARRAY
27914: PUSH
27915: LD_INT 1
27917: ARRAY
27918: PPUSH
27919: LD_VAR 0 14
27923: PUSH
27924: LD_VAR 0 9
27928: ARRAY
27929: PUSH
27930: LD_INT 2
27932: ARRAY
27933: PPUSH
27934: CALL_OW 488
27938: NOT
27939: OR
27940: PUSH
27941: LD_VAR 0 13
27945: PPUSH
27946: CALL_OW 247
27950: PUSH
27951: LD_INT 3
27953: EQUAL
27954: OR
27955: IFFALSE 27961
// exit ;
27957: POP
27958: POP
27959: GO 28505
// if not tmp then
27961: LD_VAR 0 13
27965: NOT
27966: IFFALSE 27970
// continue ;
27968: GO 27826
// result := true ;
27970: LD_ADDR_VAR 0 8
27974: PUSH
27975: LD_INT 1
27977: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27978: LD_VAR 0 6
27982: PUSH
27983: LD_VAR 0 13
27987: PPUSH
27988: CALL_OW 247
27992: PUSH
27993: LD_INT 2
27995: EQUAL
27996: AND
27997: PUSH
27998: LD_VAR 0 13
28002: PPUSH
28003: CALL_OW 263
28007: PUSH
28008: LD_INT 1
28010: EQUAL
28011: AND
28012: IFFALSE 28176
// begin if IsDrivenBy ( tmp ) then
28014: LD_VAR 0 13
28018: PPUSH
28019: CALL_OW 311
28023: IFFALSE 28027
// continue ;
28025: GO 27826
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28027: LD_VAR 0 6
28031: PPUSH
28032: LD_INT 3
28034: PUSH
28035: LD_INT 60
28037: PUSH
28038: EMPTY
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: LD_INT 55
28050: PUSH
28051: EMPTY
28052: LIST
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 72
28066: IFFALSE 28174
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28068: LD_ADDR_VAR 0 18
28072: PUSH
28073: LD_VAR 0 6
28077: PPUSH
28078: LD_INT 3
28080: PUSH
28081: LD_INT 60
28083: PUSH
28084: EMPTY
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 3
28093: PUSH
28094: LD_INT 55
28096: PUSH
28097: EMPTY
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PPUSH
28108: CALL_OW 72
28112: PUSH
28113: LD_INT 1
28115: ARRAY
28116: ST_TO_ADDR
// if IsInUnit ( driver ) then
28117: LD_VAR 0 18
28121: PPUSH
28122: CALL_OW 310
28126: IFFALSE 28137
// ComExit ( driver ) ;
28128: LD_VAR 0 18
28132: PPUSH
28133: CALL 53517 0 1
// AddComEnterUnit ( driver , tmp ) ;
28137: LD_VAR 0 18
28141: PPUSH
28142: LD_VAR 0 13
28146: PPUSH
28147: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28151: LD_VAR 0 18
28155: PPUSH
28156: LD_VAR 0 7
28160: PPUSH
28161: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28165: LD_VAR 0 18
28169: PPUSH
28170: CALL_OW 181
// end ; continue ;
28174: GO 27826
// end ; if not cleaners or not tmp in cleaners then
28176: LD_VAR 0 6
28180: NOT
28181: PUSH
28182: LD_VAR 0 13
28186: PUSH
28187: LD_VAR 0 6
28191: IN
28192: NOT
28193: OR
28194: IFFALSE 28501
// begin if dep then
28196: LD_VAR 0 17
28200: IFFALSE 28336
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28202: LD_ADDR_VAR 0 16
28206: PUSH
28207: LD_VAR 0 17
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: PPUSH
28216: CALL_OW 250
28220: PPUSH
28221: LD_VAR 0 17
28225: PUSH
28226: LD_INT 1
28228: ARRAY
28229: PPUSH
28230: CALL_OW 254
28234: PPUSH
28235: LD_INT 5
28237: PPUSH
28238: CALL_OW 272
28242: PUSH
28243: LD_VAR 0 17
28247: PUSH
28248: LD_INT 1
28250: ARRAY
28251: PPUSH
28252: CALL_OW 251
28256: PPUSH
28257: LD_VAR 0 17
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PPUSH
28266: CALL_OW 254
28270: PPUSH
28271: LD_INT 5
28273: PPUSH
28274: CALL_OW 273
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28283: LD_VAR 0 16
28287: PUSH
28288: LD_INT 1
28290: ARRAY
28291: PPUSH
28292: LD_VAR 0 16
28296: PUSH
28297: LD_INT 2
28299: ARRAY
28300: PPUSH
28301: CALL_OW 488
28305: IFFALSE 28336
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28307: LD_VAR 0 13
28311: PPUSH
28312: LD_VAR 0 16
28316: PUSH
28317: LD_INT 1
28319: ARRAY
28320: PPUSH
28321: LD_VAR 0 16
28325: PUSH
28326: LD_INT 2
28328: ARRAY
28329: PPUSH
28330: CALL_OW 111
// continue ;
28334: GO 27826
// end ; end ; r := GetDir ( tmp ) ;
28336: LD_ADDR_VAR 0 15
28340: PUSH
28341: LD_VAR 0 13
28345: PPUSH
28346: CALL_OW 254
28350: ST_TO_ADDR
// if r = 5 then
28351: LD_VAR 0 15
28355: PUSH
28356: LD_INT 5
28358: EQUAL
28359: IFFALSE 28369
// r := 0 ;
28361: LD_ADDR_VAR 0 15
28365: PUSH
28366: LD_INT 0
28368: ST_TO_ADDR
// for j = r to 5 do
28369: LD_ADDR_VAR 0 10
28373: PUSH
28374: DOUBLE
28375: LD_VAR 0 15
28379: DEC
28380: ST_TO_ADDR
28381: LD_INT 5
28383: PUSH
28384: FOR_TO
28385: IFFALSE 28499
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28387: LD_ADDR_VAR 0 11
28391: PUSH
28392: LD_VAR 0 13
28396: PPUSH
28397: CALL_OW 250
28401: PPUSH
28402: LD_VAR 0 10
28406: PPUSH
28407: LD_INT 2
28409: PPUSH
28410: CALL_OW 272
28414: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28415: LD_ADDR_VAR 0 12
28419: PUSH
28420: LD_VAR 0 13
28424: PPUSH
28425: CALL_OW 251
28429: PPUSH
28430: LD_VAR 0 10
28434: PPUSH
28435: LD_INT 2
28437: PPUSH
28438: CALL_OW 273
28442: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28443: LD_VAR 0 11
28447: PPUSH
28448: LD_VAR 0 12
28452: PPUSH
28453: CALL_OW 488
28457: PUSH
28458: LD_VAR 0 11
28462: PPUSH
28463: LD_VAR 0 12
28467: PPUSH
28468: CALL_OW 428
28472: NOT
28473: AND
28474: IFFALSE 28497
// begin ComMoveXY ( tmp , _x , _y ) ;
28476: LD_VAR 0 13
28480: PPUSH
28481: LD_VAR 0 11
28485: PPUSH
28486: LD_VAR 0 12
28490: PPUSH
28491: CALL_OW 111
// break ;
28495: GO 28499
// end ; end ;
28497: GO 28384
28499: POP
28500: POP
// end ; end ;
28501: GO 27826
28503: POP
28504: POP
// end ;
28505: LD_VAR 0 8
28509: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28510: LD_INT 0
28512: PPUSH
// result := true ;
28513: LD_ADDR_VAR 0 3
28517: PUSH
28518: LD_INT 1
28520: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28521: LD_VAR 0 2
28525: PUSH
28526: LD_INT 24
28528: DOUBLE
28529: EQUAL
28530: IFTRUE 28540
28532: LD_INT 33
28534: DOUBLE
28535: EQUAL
28536: IFTRUE 28540
28538: GO 28565
28540: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 32
28548: PPUSH
28549: LD_VAR 0 1
28553: PPUSH
28554: CALL_OW 321
28558: PUSH
28559: LD_INT 2
28561: EQUAL
28562: ST_TO_ADDR
28563: GO 28881
28565: LD_INT 20
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28598
28573: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28574: LD_ADDR_VAR 0 3
28578: PUSH
28579: LD_INT 6
28581: PPUSH
28582: LD_VAR 0 1
28586: PPUSH
28587: CALL_OW 321
28591: PUSH
28592: LD_INT 2
28594: EQUAL
28595: ST_TO_ADDR
28596: GO 28881
28598: LD_INT 22
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28612
28604: LD_INT 36
28606: DOUBLE
28607: EQUAL
28608: IFTRUE 28612
28610: GO 28637
28612: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 15
28620: PPUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 321
28630: PUSH
28631: LD_INT 2
28633: EQUAL
28634: ST_TO_ADDR
28635: GO 28881
28637: LD_INT 30
28639: DOUBLE
28640: EQUAL
28641: IFTRUE 28645
28643: GO 28670
28645: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28646: LD_ADDR_VAR 0 3
28650: PUSH
28651: LD_INT 20
28653: PPUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 321
28663: PUSH
28664: LD_INT 2
28666: EQUAL
28667: ST_TO_ADDR
28668: GO 28881
28670: LD_INT 28
28672: DOUBLE
28673: EQUAL
28674: IFTRUE 28684
28676: LD_INT 21
28678: DOUBLE
28679: EQUAL
28680: IFTRUE 28684
28682: GO 28709
28684: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28685: LD_ADDR_VAR 0 3
28689: PUSH
28690: LD_INT 21
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 321
28702: PUSH
28703: LD_INT 2
28705: EQUAL
28706: ST_TO_ADDR
28707: GO 28881
28709: LD_INT 16
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28742
28717: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28718: LD_ADDR_VAR 0 3
28722: PUSH
28723: LD_INT 84
28725: PPUSH
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 321
28735: PUSH
28736: LD_INT 2
28738: EQUAL
28739: ST_TO_ADDR
28740: GO 28881
28742: LD_INT 19
28744: DOUBLE
28745: EQUAL
28746: IFTRUE 28756
28748: LD_INT 23
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 28781
28756: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28757: LD_ADDR_VAR 0 3
28761: PUSH
28762: LD_INT 83
28764: PPUSH
28765: LD_VAR 0 1
28769: PPUSH
28770: CALL_OW 321
28774: PUSH
28775: LD_INT 2
28777: EQUAL
28778: ST_TO_ADDR
28779: GO 28881
28781: LD_INT 17
28783: DOUBLE
28784: EQUAL
28785: IFTRUE 28789
28787: GO 28814
28789: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28790: LD_ADDR_VAR 0 3
28794: PUSH
28795: LD_INT 39
28797: PPUSH
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL_OW 321
28807: PUSH
28808: LD_INT 2
28810: EQUAL
28811: ST_TO_ADDR
28812: GO 28881
28814: LD_INT 18
28816: DOUBLE
28817: EQUAL
28818: IFTRUE 28822
28820: GO 28847
28822: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28823: LD_ADDR_VAR 0 3
28827: PUSH
28828: LD_INT 40
28830: PPUSH
28831: LD_VAR 0 1
28835: PPUSH
28836: CALL_OW 321
28840: PUSH
28841: LD_INT 2
28843: EQUAL
28844: ST_TO_ADDR
28845: GO 28881
28847: LD_INT 27
28849: DOUBLE
28850: EQUAL
28851: IFTRUE 28855
28853: GO 28880
28855: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28856: LD_ADDR_VAR 0 3
28860: PUSH
28861: LD_INT 35
28863: PPUSH
28864: LD_VAR 0 1
28868: PPUSH
28869: CALL_OW 321
28873: PUSH
28874: LD_INT 2
28876: EQUAL
28877: ST_TO_ADDR
28878: GO 28881
28880: POP
// end ;
28881: LD_VAR 0 3
28885: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28886: LD_INT 0
28888: PPUSH
28889: PPUSH
28890: PPUSH
28891: PPUSH
28892: PPUSH
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
28897: PPUSH
28898: PPUSH
// result := false ;
28899: LD_ADDR_VAR 0 6
28903: PUSH
28904: LD_INT 0
28906: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28907: LD_VAR 0 1
28911: NOT
28912: PUSH
28913: LD_VAR 0 1
28917: PPUSH
28918: CALL_OW 266
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: IN
28933: NOT
28934: OR
28935: PUSH
28936: LD_VAR 0 2
28940: NOT
28941: OR
28942: PUSH
28943: LD_VAR 0 5
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: LD_INT 3
28959: PUSH
28960: LD_INT 4
28962: PUSH
28963: LD_INT 5
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: IN
28974: NOT
28975: OR
28976: PUSH
28977: LD_VAR 0 3
28981: PPUSH
28982: LD_VAR 0 4
28986: PPUSH
28987: CALL_OW 488
28991: NOT
28992: OR
28993: IFFALSE 28997
// exit ;
28995: GO 29733
// side := GetSide ( depot ) ;
28997: LD_ADDR_VAR 0 9
29001: PUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 255
29011: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29012: LD_VAR 0 9
29016: PPUSH
29017: LD_VAR 0 2
29021: PPUSH
29022: CALL 28510 0 2
29026: NOT
29027: IFFALSE 29031
// exit ;
29029: GO 29733
// pom := GetBase ( depot ) ;
29031: LD_ADDR_VAR 0 10
29035: PUSH
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 274
29045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29046: LD_ADDR_VAR 0 11
29050: PUSH
29051: LD_VAR 0 2
29055: PPUSH
29056: LD_VAR 0 1
29060: PPUSH
29061: CALL_OW 248
29065: PPUSH
29066: CALL_OW 450
29070: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29071: LD_VAR 0 10
29075: PPUSH
29076: LD_INT 1
29078: PPUSH
29079: CALL_OW 275
29083: PUSH
29084: LD_VAR 0 11
29088: PUSH
29089: LD_INT 1
29091: ARRAY
29092: GREATEREQUAL
29093: PUSH
29094: LD_VAR 0 10
29098: PPUSH
29099: LD_INT 2
29101: PPUSH
29102: CALL_OW 275
29106: PUSH
29107: LD_VAR 0 11
29111: PUSH
29112: LD_INT 2
29114: ARRAY
29115: GREATEREQUAL
29116: AND
29117: PUSH
29118: LD_VAR 0 10
29122: PPUSH
29123: LD_INT 3
29125: PPUSH
29126: CALL_OW 275
29130: PUSH
29131: LD_VAR 0 11
29135: PUSH
29136: LD_INT 3
29138: ARRAY
29139: GREATEREQUAL
29140: AND
29141: NOT
29142: IFFALSE 29146
// exit ;
29144: GO 29733
// if GetBType ( depot ) = b_depot then
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_INT 0
29158: EQUAL
29159: IFFALSE 29171
// dist := 28 else
29161: LD_ADDR_VAR 0 14
29165: PUSH
29166: LD_INT 28
29168: ST_TO_ADDR
29169: GO 29179
// dist := 36 ;
29171: LD_ADDR_VAR 0 14
29175: PUSH
29176: LD_INT 36
29178: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29179: LD_VAR 0 1
29183: PPUSH
29184: LD_VAR 0 3
29188: PPUSH
29189: LD_VAR 0 4
29193: PPUSH
29194: CALL_OW 297
29198: PUSH
29199: LD_VAR 0 14
29203: GREATER
29204: IFFALSE 29208
// exit ;
29206: GO 29733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29208: LD_ADDR_VAR 0 12
29212: PUSH
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_VAR 0 3
29222: PPUSH
29223: LD_VAR 0 4
29227: PPUSH
29228: LD_VAR 0 5
29232: PPUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 248
29242: PPUSH
29243: LD_INT 0
29245: PPUSH
29246: CALL 29738 0 6
29250: ST_TO_ADDR
// if not hexes then
29251: LD_VAR 0 12
29255: NOT
29256: IFFALSE 29260
// exit ;
29258: GO 29733
// hex := GetHexInfo ( x , y ) ;
29260: LD_ADDR_VAR 0 15
29264: PUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: LD_VAR 0 4
29274: PPUSH
29275: CALL_OW 546
29279: ST_TO_ADDR
// if hex [ 1 ] then
29280: LD_VAR 0 15
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: IFFALSE 29292
// exit ;
29290: GO 29733
// height := hex [ 2 ] ;
29292: LD_ADDR_VAR 0 13
29296: PUSH
29297: LD_VAR 0 15
29301: PUSH
29302: LD_INT 2
29304: ARRAY
29305: ST_TO_ADDR
// for i = 1 to hexes do
29306: LD_ADDR_VAR 0 7
29310: PUSH
29311: DOUBLE
29312: LD_INT 1
29314: DEC
29315: ST_TO_ADDR
29316: LD_VAR 0 12
29320: PUSH
29321: FOR_TO
29322: IFFALSE 29652
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29324: LD_VAR 0 12
29328: PUSH
29329: LD_VAR 0 7
29333: ARRAY
29334: PUSH
29335: LD_INT 1
29337: ARRAY
29338: PPUSH
29339: LD_VAR 0 12
29343: PUSH
29344: LD_VAR 0 7
29348: ARRAY
29349: PUSH
29350: LD_INT 2
29352: ARRAY
29353: PPUSH
29354: CALL_OW 488
29358: NOT
29359: PUSH
29360: LD_VAR 0 12
29364: PUSH
29365: LD_VAR 0 7
29369: ARRAY
29370: PUSH
29371: LD_INT 1
29373: ARRAY
29374: PPUSH
29375: LD_VAR 0 12
29379: PUSH
29380: LD_VAR 0 7
29384: ARRAY
29385: PUSH
29386: LD_INT 2
29388: ARRAY
29389: PPUSH
29390: CALL_OW 428
29394: PUSH
29395: LD_INT 0
29397: GREATER
29398: OR
29399: PUSH
29400: LD_VAR 0 12
29404: PUSH
29405: LD_VAR 0 7
29409: ARRAY
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: LD_VAR 0 12
29419: PUSH
29420: LD_VAR 0 7
29424: ARRAY
29425: PUSH
29426: LD_INT 2
29428: ARRAY
29429: PPUSH
29430: CALL_OW 351
29434: OR
29435: IFFALSE 29441
// exit ;
29437: POP
29438: POP
29439: GO 29733
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29441: LD_ADDR_VAR 0 8
29445: PUSH
29446: LD_VAR 0 12
29450: PUSH
29451: LD_VAR 0 7
29455: ARRAY
29456: PUSH
29457: LD_INT 1
29459: ARRAY
29460: PPUSH
29461: LD_VAR 0 12
29465: PUSH
29466: LD_VAR 0 7
29470: ARRAY
29471: PUSH
29472: LD_INT 2
29474: ARRAY
29475: PPUSH
29476: CALL_OW 546
29480: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29481: LD_VAR 0 8
29485: PUSH
29486: LD_INT 1
29488: ARRAY
29489: PUSH
29490: LD_VAR 0 8
29494: PUSH
29495: LD_INT 2
29497: ARRAY
29498: PUSH
29499: LD_VAR 0 13
29503: PUSH
29504: LD_INT 2
29506: PLUS
29507: GREATER
29508: OR
29509: PUSH
29510: LD_VAR 0 8
29514: PUSH
29515: LD_INT 2
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 13
29523: PUSH
29524: LD_INT 2
29526: MINUS
29527: LESS
29528: OR
29529: PUSH
29530: LD_VAR 0 8
29534: PUSH
29535: LD_INT 3
29537: ARRAY
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 8
29544: PUSH
29545: LD_INT 9
29547: PUSH
29548: LD_INT 10
29550: PUSH
29551: LD_INT 11
29553: PUSH
29554: LD_INT 12
29556: PUSH
29557: LD_INT 13
29559: PUSH
29560: LD_INT 16
29562: PUSH
29563: LD_INT 17
29565: PUSH
29566: LD_INT 18
29568: PUSH
29569: LD_INT 19
29571: PUSH
29572: LD_INT 20
29574: PUSH
29575: LD_INT 21
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: IN
29593: NOT
29594: OR
29595: PUSH
29596: LD_VAR 0 8
29600: PUSH
29601: LD_INT 5
29603: ARRAY
29604: NOT
29605: OR
29606: PUSH
29607: LD_VAR 0 8
29611: PUSH
29612: LD_INT 6
29614: ARRAY
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: LD_INT 2
29621: PUSH
29622: LD_INT 7
29624: PUSH
29625: LD_INT 9
29627: PUSH
29628: LD_INT 10
29630: PUSH
29631: LD_INT 11
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: IN
29642: NOT
29643: OR
29644: IFFALSE 29650
// exit ;
29646: POP
29647: POP
29648: GO 29733
// end ;
29650: GO 29321
29652: POP
29653: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29654: LD_VAR 0 9
29658: PPUSH
29659: LD_VAR 0 3
29663: PPUSH
29664: LD_VAR 0 4
29668: PPUSH
29669: LD_INT 20
29671: PPUSH
29672: CALL 21685 0 4
29676: PUSH
29677: LD_INT 4
29679: ARRAY
29680: IFFALSE 29684
// exit ;
29682: GO 29733
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29684: LD_VAR 0 2
29688: PUSH
29689: LD_INT 29
29691: PUSH
29692: LD_INT 30
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: IN
29699: PUSH
29700: LD_VAR 0 3
29704: PPUSH
29705: LD_VAR 0 4
29709: PPUSH
29710: LD_VAR 0 9
29714: PPUSH
29715: CALL_OW 440
29719: NOT
29720: AND
29721: IFFALSE 29725
// exit ;
29723: GO 29733
// result := true ;
29725: LD_ADDR_VAR 0 6
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// end ;
29733: LD_VAR 0 6
29737: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29738: LD_INT 0
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
29746: PPUSH
29747: PPUSH
29748: PPUSH
29749: PPUSH
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
29763: PPUSH
29764: PPUSH
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
// result = [ ] ;
29798: LD_ADDR_VAR 0 7
29802: PUSH
29803: EMPTY
29804: ST_TO_ADDR
// temp_list = [ ] ;
29805: LD_ADDR_VAR 0 9
29809: PUSH
29810: EMPTY
29811: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29812: LD_VAR 0 4
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: LD_INT 4
29831: PUSH
29832: LD_INT 5
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: IN
29843: NOT
29844: PUSH
29845: LD_VAR 0 1
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: IN
29860: PUSH
29861: LD_VAR 0 5
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: IN
29880: NOT
29881: AND
29882: OR
29883: IFFALSE 29887
// exit ;
29885: GO 48278
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29887: LD_VAR 0 1
29891: PUSH
29892: LD_INT 6
29894: PUSH
29895: LD_INT 7
29897: PUSH
29898: LD_INT 8
29900: PUSH
29901: LD_INT 13
29903: PUSH
29904: LD_INT 12
29906: PUSH
29907: LD_INT 15
29909: PUSH
29910: LD_INT 11
29912: PUSH
29913: LD_INT 14
29915: PUSH
29916: LD_INT 10
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: IN
29930: IFFALSE 29940
// btype = b_lab ;
29932: LD_ADDR_VAR 0 1
29936: PUSH
29937: LD_INT 6
29939: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29940: LD_VAR 0 6
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: IN
29959: NOT
29960: PUSH
29961: LD_VAR 0 1
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: LD_INT 6
29980: PUSH
29981: LD_INT 36
29983: PUSH
29984: LD_INT 4
29986: PUSH
29987: LD_INT 5
29989: PUSH
29990: LD_INT 31
29992: PUSH
29993: LD_INT 32
29995: PUSH
29996: LD_INT 33
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: IN
30012: NOT
30013: PUSH
30014: LD_VAR 0 6
30018: PUSH
30019: LD_INT 1
30021: EQUAL
30022: AND
30023: OR
30024: PUSH
30025: LD_VAR 0 1
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: IN
30040: NOT
30041: PUSH
30042: LD_VAR 0 6
30046: PUSH
30047: LD_INT 2
30049: EQUAL
30050: AND
30051: OR
30052: IFFALSE 30062
// mode = 0 ;
30054: LD_ADDR_VAR 0 6
30058: PUSH
30059: LD_INT 0
30061: ST_TO_ADDR
// case mode of 0 :
30062: LD_VAR 0 6
30066: PUSH
30067: LD_INT 0
30069: DOUBLE
30070: EQUAL
30071: IFTRUE 30075
30073: GO 41528
30075: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30076: LD_ADDR_VAR 0 11
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30269: LD_ADDR_VAR 0 12
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 2
30392: NEG
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30465: LD_ADDR_VAR 0 13
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 2
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: LD_INT 2
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 2
30612: NEG
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30664: LD_ADDR_VAR 0 14
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 3
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30860: LD_ADDR_VAR 0 15
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 2
30994: NEG
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 3
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31053: LD_ADDR_VAR 0 16
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 3
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 3
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31246: LD_ADDR_VAR 0 17
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 2
31445: NEG
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31476: LD_ADDR_VAR 0 18
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31706: LD_ADDR_VAR 0 19
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31936: LD_ADDR_VAR 0 20
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: LD_INT 2
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32166: LD_ADDR_VAR 0 21
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: LD_INT 2
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32396: LD_ADDR_VAR 0 22
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 2
32572: NEG
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32626: LD_ADDR_VAR 0 23
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 2
32802: NEG
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 3
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32906: LD_ADDR_VAR 0 24
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33182: LD_ADDR_VAR 0 25
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 2
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 3
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: LD_INT 3
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33456: LD_ADDR_VAR 0 26
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33732: LD_ADDR_VAR 0 27
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: NEG
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: LD_INT 2
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 2
33954: NEG
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 3
33977: NEG
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34012: LD_ADDR_VAR 0 28
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: NEG
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 2
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 3
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 3
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 3
34247: NEG
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 3
34259: NEG
34260: PUSH
34261: LD_INT 2
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34294: LD_ADDR_VAR 0 29
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 2
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: NEG
34485: PUSH
34486: LD_INT 3
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: LD_INT 3
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34573: LD_ADDR_VAR 0 30
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: LD_INT 1
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 2
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 3
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34851: LD_ADDR_VAR 0 31
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: LD_INT 3
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 2
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 3
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 3
35094: NEG
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35129: LD_ADDR_VAR 0 32
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: LD_INT 2
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 3
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: LD_INT 3
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 2
35361: NEG
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: NEG
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35407: LD_ADDR_VAR 0 33
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 3
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35686: LD_ADDR_VAR 0 34
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: LD_INT 3
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 3
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 3
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35966: LD_ADDR_VAR 0 35
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36078: LD_ADDR_VAR 0 36
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36190: LD_ADDR_VAR 0 37
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36302: LD_ADDR_VAR 0 38
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36414: LD_ADDR_VAR 0 39
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36526: LD_ADDR_VAR 0 40
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36638: LD_ADDR_VAR 0 41
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: LD_INT 2
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 3
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 3
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 3
36912: NEG
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 3
36923: NEG
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 3
36947: NEG
36948: PUSH
36949: LD_INT 3
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36988: LD_ADDR_VAR 0 42
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: LD_INT 3
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 3
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 3
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 3
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: NEG
37298: PUSH
37299: LD_INT 3
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37338: LD_ADDR_VAR 0 43
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 3
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 3
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 3
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: NEG
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37686: LD_ADDR_VAR 0 44
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 3
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 3
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 3
37960: NEG
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: NEG
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 3
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: NEG
37996: PUSH
37997: LD_INT 3
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38036: LD_ADDR_VAR 0 45
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: LD_INT 3
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: LD_INT 3
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 3
38333: NEG
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 3
38345: NEG
38346: PUSH
38347: LD_INT 3
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38386: LD_ADDR_VAR 0 46
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: LD_INT 3
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 3
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 3
38682: NEG
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 3
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38734: LD_ADDR_VAR 0 47
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: LD_INT 2
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: NEG
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38885: LD_ADDR_VAR 0 48
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39032: LD_ADDR_VAR 0 49
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39176: LD_ADDR_VAR 0 50
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39320: LD_ADDR_VAR 0 51
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39467: LD_ADDR_VAR 0 52
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39618: LD_ADDR_VAR 0 53
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39848: LD_ADDR_VAR 0 54
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40078: LD_ADDR_VAR 0 55
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40308: LD_ADDR_VAR 0 56
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40538: LD_ADDR_VAR 0 57
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40768: LD_ADDR_VAR 0 58
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40998: LD_ADDR_VAR 0 59
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41086: LD_ADDR_VAR 0 60
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41174: LD_ADDR_VAR 0 61
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41262: LD_ADDR_VAR 0 62
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41350: LD_ADDR_VAR 0 63
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41438: LD_ADDR_VAR 0 64
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// end ; 1 :
41526: GO 47423
41528: LD_INT 1
41530: DOUBLE
41531: EQUAL
41532: IFTRUE 41536
41534: GO 44159
41536: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41537: LD_ADDR_VAR 0 11
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41581: LD_ADDR_VAR 0 12
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41622: LD_ADDR_VAR 0 13
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 3
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41662: LD_ADDR_VAR 0 14
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41703: LD_ADDR_VAR 0 15
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41747: LD_ADDR_VAR 0 16
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 3
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: NEG
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41793: LD_ADDR_VAR 0 17
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41837: LD_ADDR_VAR 0 18
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41878: LD_ADDR_VAR 0 19
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41918: LD_ADDR_VAR 0 20
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41959: LD_ADDR_VAR 0 21
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 3
41977: NEG
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42003: LD_ADDR_VAR 0 22
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 3
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42049: LD_ADDR_VAR 0 23
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 3
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 4
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 3
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42093: LD_ADDR_VAR 0 24
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 4
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42134: LD_ADDR_VAR 0 25
42138: PUSH
42139: LD_INT 3
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 4
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: LD_INT 4
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42174: LD_ADDR_VAR 0 26
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 4
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42215: LD_ADDR_VAR 0 27
42219: PUSH
42220: LD_INT 3
42222: NEG
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 4
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42259: LD_ADDR_VAR 0 28
42263: PUSH
42264: LD_INT 3
42266: NEG
42267: PUSH
42268: LD_INT 3
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: LD_INT 4
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 4
42290: NEG
42291: PUSH
42292: LD_INT 3
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42305: LD_ADDR_VAR 0 29
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 3
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 3
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 4
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 4
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 3
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 5
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 5
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 4
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 6
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 6
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 5
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42460: LD_ADDR_VAR 0 30
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 3
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 4
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 4
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 5
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 5
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 5
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 6
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 6
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42603: LD_ADDR_VAR 0 31
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: LD_INT 3
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 4
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: LD_INT 4
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: LD_INT 4
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 5
42680: PUSH
42681: LD_INT 5
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 4
42690: PUSH
42691: LD_INT 5
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 6
42700: PUSH
42701: LD_INT 5
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 6
42710: PUSH
42711: LD_INT 6
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: LD_INT 6
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42742: LD_ADDR_VAR 0 32
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 4
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 5
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 5
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 4
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 6
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 6
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 5
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42885: LD_ADDR_VAR 0 33
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: NEG
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 4
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 4
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 4
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 5
42971: NEG
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 5
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 5
42994: NEG
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 6
43005: NEG
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 6
43016: NEG
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43040: LD_ADDR_VAR 0 34
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: LD_INT 3
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: NEG
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: LD_INT 4
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 4
43095: NEG
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 4
43107: NEG
43108: PUSH
43109: LD_INT 4
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 4
43119: NEG
43120: PUSH
43121: LD_INT 5
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 5
43131: NEG
43132: PUSH
43133: LD_INT 4
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 5
43143: NEG
43144: PUSH
43145: LD_INT 5
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 5
43155: NEG
43156: PUSH
43157: LD_INT 6
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 6
43167: NEG
43168: PUSH
43169: LD_INT 5
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 6
43179: NEG
43180: PUSH
43181: LD_INT 6
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43203: LD_ADDR_VAR 0 41
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43247: LD_ADDR_VAR 0 42
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43288: LD_ADDR_VAR 0 43
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43328: LD_ADDR_VAR 0 44
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43369: LD_ADDR_VAR 0 45
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: NEG
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43413: LD_ADDR_VAR 0 46
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43459: LD_ADDR_VAR 0 47
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43492: LD_ADDR_VAR 0 48
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43523: LD_ADDR_VAR 0 49
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43552: LD_ADDR_VAR 0 50
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43581: LD_ADDR_VAR 0 51
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43612: LD_ADDR_VAR 0 52
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 3
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43645: LD_ADDR_VAR 0 53
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 3
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43689: LD_ADDR_VAR 0 54
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43730: LD_ADDR_VAR 0 55
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43770: LD_ADDR_VAR 0 56
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43811: LD_ADDR_VAR 0 57
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: NEG
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43855: LD_ADDR_VAR 0 58
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43901: LD_ADDR_VAR 0 59
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43945: LD_ADDR_VAR 0 60
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43986: LD_ADDR_VAR 0 61
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44026: LD_ADDR_VAR 0 62
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44067: LD_ADDR_VAR 0 63
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44111: LD_ADDR_VAR 0 64
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// end ; 2 :
44157: GO 47423
44159: LD_INT 2
44161: DOUBLE
44162: EQUAL
44163: IFTRUE 44167
44165: GO 47422
44167: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44168: LD_ADDR_VAR 0 29
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 4
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 5
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 5
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 4
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 3
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 4
44288: PUSH
44289: LD_INT 3
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 4
44298: PUSH
44299: LD_INT 4
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 4
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 4
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 4
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 4
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 4
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 5
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 5
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 4
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: LD_INT 5
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 3
44451: NEG
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 3
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 4
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 4
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 4
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 4
44553: NEG
44554: PUSH
44555: LD_INT 4
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 4
44565: NEG
44566: PUSH
44567: LD_INT 5
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: LD_INT 4
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 3
44589: NEG
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 4
44601: NEG
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 5
44613: NEG
44614: PUSH
44615: LD_INT 4
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 5
44625: NEG
44626: PUSH
44627: LD_INT 5
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: LD_INT 5
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 5
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44706: LD_ADDR_VAR 0 30
44710: PUSH
44711: LD_INT 4
44713: PUSH
44714: LD_INT 4
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 4
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 5
44733: PUSH
44734: LD_INT 4
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 5
44743: PUSH
44744: LD_INT 5
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: LD_INT 5
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: LD_INT 4
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 5
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: LD_INT 5
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 4
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 4
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 4
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 4
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 3
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 4
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 5
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 5
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 5
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 3
44987: NEG
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: LD_INT 3
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 3
45010: NEG
45011: PUSH
45012: LD_INT 4
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 3
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 4
45058: NEG
45059: PUSH
45060: LD_INT 3
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 4
45070: NEG
45071: PUSH
45072: LD_INT 4
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 4
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 4
45094: NEG
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 4
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 5
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 4
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 3
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 4
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 5
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 5
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45253: LD_ADDR_VAR 0 31
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 4
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 4
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 5
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 4
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 5
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 3
45353: NEG
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 3
45364: NEG
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 4
45409: NEG
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 4
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: NEG
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 4
45455: NEG
45456: PUSH
45457: LD_INT 4
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: LD_INT 5
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: LD_INT 4
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: NEG
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 4
45503: NEG
45504: PUSH
45505: LD_INT 3
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 5
45515: NEG
45516: PUSH
45517: LD_INT 4
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 5
45527: NEG
45528: PUSH
45529: LD_INT 5
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: LD_INT 5
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 5
45551: NEG
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 3
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 4
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 3
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 4
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 4
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 4
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 4
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 5
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 5
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 4
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 5
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45803: LD_ADDR_VAR 0 32
45807: PUSH
45808: LD_INT 4
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 4
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 4
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 5
45866: NEG
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 5
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 5
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: LD_INT 4
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 4
45972: NEG
45973: PUSH
45974: LD_INT 3
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 4
45984: NEG
45985: PUSH
45986: LD_INT 4
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 4
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 4
46008: NEG
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 4
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 5
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 4
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 5
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 4
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 4
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 4
46215: PUSH
46216: LD_INT 4
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 4
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: LD_INT 5
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 4
46255: PUSH
46256: LD_INT 5
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: LD_INT 4
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 5
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 5
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46350: LD_ADDR_VAR 0 33
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: LD_INT 4
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: LD_INT 5
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: NEG
46382: PUSH
46383: LD_INT 4
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: LD_INT 3
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 4
46405: NEG
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 5
46417: NEG
46418: PUSH
46419: LD_INT 4
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 5
46429: NEG
46430: PUSH
46431: LD_INT 5
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 5
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 5
46453: NEG
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 4
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 4
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 4
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 5
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 4
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 5
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 4
46680: PUSH
46681: LD_INT 3
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 4
46690: PUSH
46691: LD_INT 4
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 4
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 4
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 4
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 4
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 4
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 5
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 5
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 4
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 3
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46888: LD_ADDR_VAR 0 34
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 4
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 5
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 4
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 4
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 5
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: LD_INT 5
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 4
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 4
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 4
47090: PUSH
47091: LD_INT 4
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 4
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 5
47110: PUSH
47111: LD_INT 4
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: LD_INT 5
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 4
47130: PUSH
47131: LD_INT 5
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: LD_INT 4
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 5
47160: PUSH
47161: LD_INT 3
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: LD_INT 5
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 4
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 4
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 4
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 4
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 5
47329: NEG
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 5
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// end ; end ;
47420: GO 47423
47422: POP
// case btype of b_depot , b_warehouse :
47423: LD_VAR 0 1
47427: PUSH
47428: LD_INT 0
47430: DOUBLE
47431: EQUAL
47432: IFTRUE 47442
47434: LD_INT 1
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47442
47440: GO 47643
47442: POP
// case nation of nation_american :
47443: LD_VAR 0 5
47447: PUSH
47448: LD_INT 1
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47456
47454: GO 47512
47456: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47457: LD_ADDR_VAR 0 9
47461: PUSH
47462: LD_VAR 0 11
47466: PUSH
47467: LD_VAR 0 12
47471: PUSH
47472: LD_VAR 0 13
47476: PUSH
47477: LD_VAR 0 14
47481: PUSH
47482: LD_VAR 0 15
47486: PUSH
47487: LD_VAR 0 16
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: PUSH
47500: LD_VAR 0 4
47504: PUSH
47505: LD_INT 1
47507: PLUS
47508: ARRAY
47509: ST_TO_ADDR
47510: GO 47641
47512: LD_INT 2
47514: DOUBLE
47515: EQUAL
47516: IFTRUE 47520
47518: GO 47576
47520: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47521: LD_ADDR_VAR 0 9
47525: PUSH
47526: LD_VAR 0 17
47530: PUSH
47531: LD_VAR 0 18
47535: PUSH
47536: LD_VAR 0 19
47540: PUSH
47541: LD_VAR 0 20
47545: PUSH
47546: LD_VAR 0 21
47550: PUSH
47551: LD_VAR 0 22
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: PUSH
47564: LD_VAR 0 4
47568: PUSH
47569: LD_INT 1
47571: PLUS
47572: ARRAY
47573: ST_TO_ADDR
47574: GO 47641
47576: LD_INT 3
47578: DOUBLE
47579: EQUAL
47580: IFTRUE 47584
47582: GO 47640
47584: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47585: LD_ADDR_VAR 0 9
47589: PUSH
47590: LD_VAR 0 23
47594: PUSH
47595: LD_VAR 0 24
47599: PUSH
47600: LD_VAR 0 25
47604: PUSH
47605: LD_VAR 0 26
47609: PUSH
47610: LD_VAR 0 27
47614: PUSH
47615: LD_VAR 0 28
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: PUSH
47628: LD_VAR 0 4
47632: PUSH
47633: LD_INT 1
47635: PLUS
47636: ARRAY
47637: ST_TO_ADDR
47638: GO 47641
47640: POP
47641: GO 48196
47643: LD_INT 2
47645: DOUBLE
47646: EQUAL
47647: IFTRUE 47657
47649: LD_INT 3
47651: DOUBLE
47652: EQUAL
47653: IFTRUE 47657
47655: GO 47713
47657: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47658: LD_ADDR_VAR 0 9
47662: PUSH
47663: LD_VAR 0 29
47667: PUSH
47668: LD_VAR 0 30
47672: PUSH
47673: LD_VAR 0 31
47677: PUSH
47678: LD_VAR 0 32
47682: PUSH
47683: LD_VAR 0 33
47687: PUSH
47688: LD_VAR 0 34
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: PUSH
47701: LD_VAR 0 4
47705: PUSH
47706: LD_INT 1
47708: PLUS
47709: ARRAY
47710: ST_TO_ADDR
47711: GO 48196
47713: LD_INT 16
47715: DOUBLE
47716: EQUAL
47717: IFTRUE 47775
47719: LD_INT 17
47721: DOUBLE
47722: EQUAL
47723: IFTRUE 47775
47725: LD_INT 18
47727: DOUBLE
47728: EQUAL
47729: IFTRUE 47775
47731: LD_INT 19
47733: DOUBLE
47734: EQUAL
47735: IFTRUE 47775
47737: LD_INT 22
47739: DOUBLE
47740: EQUAL
47741: IFTRUE 47775
47743: LD_INT 20
47745: DOUBLE
47746: EQUAL
47747: IFTRUE 47775
47749: LD_INT 21
47751: DOUBLE
47752: EQUAL
47753: IFTRUE 47775
47755: LD_INT 23
47757: DOUBLE
47758: EQUAL
47759: IFTRUE 47775
47761: LD_INT 24
47763: DOUBLE
47764: EQUAL
47765: IFTRUE 47775
47767: LD_INT 25
47769: DOUBLE
47770: EQUAL
47771: IFTRUE 47775
47773: GO 47831
47775: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47776: LD_ADDR_VAR 0 9
47780: PUSH
47781: LD_VAR 0 35
47785: PUSH
47786: LD_VAR 0 36
47790: PUSH
47791: LD_VAR 0 37
47795: PUSH
47796: LD_VAR 0 38
47800: PUSH
47801: LD_VAR 0 39
47805: PUSH
47806: LD_VAR 0 40
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: PUSH
47819: LD_VAR 0 4
47823: PUSH
47824: LD_INT 1
47826: PLUS
47827: ARRAY
47828: ST_TO_ADDR
47829: GO 48196
47831: LD_INT 6
47833: DOUBLE
47834: EQUAL
47835: IFTRUE 47887
47837: LD_INT 7
47839: DOUBLE
47840: EQUAL
47841: IFTRUE 47887
47843: LD_INT 8
47845: DOUBLE
47846: EQUAL
47847: IFTRUE 47887
47849: LD_INT 13
47851: DOUBLE
47852: EQUAL
47853: IFTRUE 47887
47855: LD_INT 12
47857: DOUBLE
47858: EQUAL
47859: IFTRUE 47887
47861: LD_INT 15
47863: DOUBLE
47864: EQUAL
47865: IFTRUE 47887
47867: LD_INT 11
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47887
47873: LD_INT 14
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47887
47879: LD_INT 10
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47887
47885: GO 47943
47887: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47888: LD_ADDR_VAR 0 9
47892: PUSH
47893: LD_VAR 0 41
47897: PUSH
47898: LD_VAR 0 42
47902: PUSH
47903: LD_VAR 0 43
47907: PUSH
47908: LD_VAR 0 44
47912: PUSH
47913: LD_VAR 0 45
47917: PUSH
47918: LD_VAR 0 46
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: PUSH
47931: LD_VAR 0 4
47935: PUSH
47936: LD_INT 1
47938: PLUS
47939: ARRAY
47940: ST_TO_ADDR
47941: GO 48196
47943: LD_INT 36
47945: DOUBLE
47946: EQUAL
47947: IFTRUE 47951
47949: GO 48007
47951: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47952: LD_ADDR_VAR 0 9
47956: PUSH
47957: LD_VAR 0 47
47961: PUSH
47962: LD_VAR 0 48
47966: PUSH
47967: LD_VAR 0 49
47971: PUSH
47972: LD_VAR 0 50
47976: PUSH
47977: LD_VAR 0 51
47981: PUSH
47982: LD_VAR 0 52
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: PUSH
47995: LD_VAR 0 4
47999: PUSH
48000: LD_INT 1
48002: PLUS
48003: ARRAY
48004: ST_TO_ADDR
48005: GO 48196
48007: LD_INT 4
48009: DOUBLE
48010: EQUAL
48011: IFTRUE 48033
48013: LD_INT 5
48015: DOUBLE
48016: EQUAL
48017: IFTRUE 48033
48019: LD_INT 34
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48033
48025: LD_INT 37
48027: DOUBLE
48028: EQUAL
48029: IFTRUE 48033
48031: GO 48089
48033: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48034: LD_ADDR_VAR 0 9
48038: PUSH
48039: LD_VAR 0 53
48043: PUSH
48044: LD_VAR 0 54
48048: PUSH
48049: LD_VAR 0 55
48053: PUSH
48054: LD_VAR 0 56
48058: PUSH
48059: LD_VAR 0 57
48063: PUSH
48064: LD_VAR 0 58
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: PUSH
48077: LD_VAR 0 4
48081: PUSH
48082: LD_INT 1
48084: PLUS
48085: ARRAY
48086: ST_TO_ADDR
48087: GO 48196
48089: LD_INT 31
48091: DOUBLE
48092: EQUAL
48093: IFTRUE 48139
48095: LD_INT 32
48097: DOUBLE
48098: EQUAL
48099: IFTRUE 48139
48101: LD_INT 33
48103: DOUBLE
48104: EQUAL
48105: IFTRUE 48139
48107: LD_INT 27
48109: DOUBLE
48110: EQUAL
48111: IFTRUE 48139
48113: LD_INT 26
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48139
48119: LD_INT 28
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48139
48125: LD_INT 29
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48139
48131: LD_INT 30
48133: DOUBLE
48134: EQUAL
48135: IFTRUE 48139
48137: GO 48195
48139: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48140: LD_ADDR_VAR 0 9
48144: PUSH
48145: LD_VAR 0 59
48149: PUSH
48150: LD_VAR 0 60
48154: PUSH
48155: LD_VAR 0 61
48159: PUSH
48160: LD_VAR 0 62
48164: PUSH
48165: LD_VAR 0 63
48169: PUSH
48170: LD_VAR 0 64
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: PUSH
48183: LD_VAR 0 4
48187: PUSH
48188: LD_INT 1
48190: PLUS
48191: ARRAY
48192: ST_TO_ADDR
48193: GO 48196
48195: POP
// temp_list2 = [ ] ;
48196: LD_ADDR_VAR 0 10
48200: PUSH
48201: EMPTY
48202: ST_TO_ADDR
// for i in temp_list do
48203: LD_ADDR_VAR 0 8
48207: PUSH
48208: LD_VAR 0 9
48212: PUSH
48213: FOR_IN
48214: IFFALSE 48266
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48216: LD_ADDR_VAR 0 10
48220: PUSH
48221: LD_VAR 0 10
48225: PUSH
48226: LD_VAR 0 8
48230: PUSH
48231: LD_INT 1
48233: ARRAY
48234: PUSH
48235: LD_VAR 0 2
48239: PLUS
48240: PUSH
48241: LD_VAR 0 8
48245: PUSH
48246: LD_INT 2
48248: ARRAY
48249: PUSH
48250: LD_VAR 0 3
48254: PLUS
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: ADD
48263: ST_TO_ADDR
48264: GO 48213
48266: POP
48267: POP
// result = temp_list2 ;
48268: LD_ADDR_VAR 0 7
48272: PUSH
48273: LD_VAR 0 10
48277: ST_TO_ADDR
// end ;
48278: LD_VAR 0 7
48282: RET
// export function EnemyInRange ( unit , dist ) ; begin
48283: LD_INT 0
48285: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48286: LD_ADDR_VAR 0 3
48290: PUSH
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 255
48300: PPUSH
48301: LD_VAR 0 1
48305: PPUSH
48306: CALL_OW 250
48310: PPUSH
48311: LD_VAR 0 1
48315: PPUSH
48316: CALL_OW 251
48320: PPUSH
48321: LD_VAR 0 2
48325: PPUSH
48326: CALL 21685 0 4
48330: PUSH
48331: LD_INT 4
48333: ARRAY
48334: ST_TO_ADDR
// end ;
48335: LD_VAR 0 3
48339: RET
// export function PlayerSeeMe ( unit ) ; begin
48340: LD_INT 0
48342: PPUSH
// result := See ( your_side , unit ) ;
48343: LD_ADDR_VAR 0 2
48347: PUSH
48348: LD_OWVAR 2
48352: PPUSH
48353: LD_VAR 0 1
48357: PPUSH
48358: CALL_OW 292
48362: ST_TO_ADDR
// end ;
48363: LD_VAR 0 2
48367: RET
// export function ReverseDir ( unit ) ; begin
48368: LD_INT 0
48370: PPUSH
// if not unit then
48371: LD_VAR 0 1
48375: NOT
48376: IFFALSE 48380
// exit ;
48378: GO 48403
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48380: LD_ADDR_VAR 0 2
48384: PUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL_OW 254
48394: PUSH
48395: LD_INT 3
48397: PLUS
48398: PUSH
48399: LD_INT 6
48401: MOD
48402: ST_TO_ADDR
// end ;
48403: LD_VAR 0 2
48407: RET
// export function ReverseArray ( array ) ; var i ; begin
48408: LD_INT 0
48410: PPUSH
48411: PPUSH
// if not array then
48412: LD_VAR 0 1
48416: NOT
48417: IFFALSE 48421
// exit ;
48419: GO 48476
// result := [ ] ;
48421: LD_ADDR_VAR 0 2
48425: PUSH
48426: EMPTY
48427: ST_TO_ADDR
// for i := array downto 1 do
48428: LD_ADDR_VAR 0 3
48432: PUSH
48433: DOUBLE
48434: LD_VAR 0 1
48438: INC
48439: ST_TO_ADDR
48440: LD_INT 1
48442: PUSH
48443: FOR_DOWNTO
48444: IFFALSE 48474
// result := Join ( result , array [ i ] ) ;
48446: LD_ADDR_VAR 0 2
48450: PUSH
48451: LD_VAR 0 2
48455: PPUSH
48456: LD_VAR 0 1
48460: PUSH
48461: LD_VAR 0 3
48465: ARRAY
48466: PPUSH
48467: CALL 53119 0 2
48471: ST_TO_ADDR
48472: GO 48443
48474: POP
48475: POP
// end ;
48476: LD_VAR 0 2
48480: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48481: LD_INT 0
48483: PPUSH
48484: PPUSH
48485: PPUSH
48486: PPUSH
48487: PPUSH
48488: PPUSH
// if not unit or not hexes then
48489: LD_VAR 0 1
48493: NOT
48494: PUSH
48495: LD_VAR 0 2
48499: NOT
48500: OR
48501: IFFALSE 48505
// exit ;
48503: GO 48628
// dist := 9999 ;
48505: LD_ADDR_VAR 0 5
48509: PUSH
48510: LD_INT 9999
48512: ST_TO_ADDR
// for i = 1 to hexes do
48513: LD_ADDR_VAR 0 4
48517: PUSH
48518: DOUBLE
48519: LD_INT 1
48521: DEC
48522: ST_TO_ADDR
48523: LD_VAR 0 2
48527: PUSH
48528: FOR_TO
48529: IFFALSE 48616
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48531: LD_ADDR_VAR 0 6
48535: PUSH
48536: LD_VAR 0 1
48540: PPUSH
48541: LD_VAR 0 2
48545: PUSH
48546: LD_VAR 0 4
48550: ARRAY
48551: PUSH
48552: LD_INT 1
48554: ARRAY
48555: PPUSH
48556: LD_VAR 0 2
48560: PUSH
48561: LD_VAR 0 4
48565: ARRAY
48566: PUSH
48567: LD_INT 2
48569: ARRAY
48570: PPUSH
48571: CALL_OW 297
48575: ST_TO_ADDR
// if tdist < dist then
48576: LD_VAR 0 6
48580: PUSH
48581: LD_VAR 0 5
48585: LESS
48586: IFFALSE 48614
// begin hex := hexes [ i ] ;
48588: LD_ADDR_VAR 0 8
48592: PUSH
48593: LD_VAR 0 2
48597: PUSH
48598: LD_VAR 0 4
48602: ARRAY
48603: ST_TO_ADDR
// dist := tdist ;
48604: LD_ADDR_VAR 0 5
48608: PUSH
48609: LD_VAR 0 6
48613: ST_TO_ADDR
// end ; end ;
48614: GO 48528
48616: POP
48617: POP
// result := hex ;
48618: LD_ADDR_VAR 0 3
48622: PUSH
48623: LD_VAR 0 8
48627: ST_TO_ADDR
// end ;
48628: LD_VAR 0 3
48632: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48633: LD_INT 0
48635: PPUSH
48636: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48637: LD_VAR 0 1
48641: NOT
48642: PUSH
48643: LD_VAR 0 1
48647: PUSH
48648: LD_INT 21
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 23
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PPUSH
48672: CALL_OW 69
48676: IN
48677: NOT
48678: OR
48679: IFFALSE 48683
// exit ;
48681: GO 48730
// for i = 1 to 3 do
48683: LD_ADDR_VAR 0 3
48687: PUSH
48688: DOUBLE
48689: LD_INT 1
48691: DEC
48692: ST_TO_ADDR
48693: LD_INT 3
48695: PUSH
48696: FOR_TO
48697: IFFALSE 48728
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48699: LD_VAR 0 1
48703: PPUSH
48704: CALL_OW 250
48708: PPUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: CALL_OW 251
48718: PPUSH
48719: LD_INT 1
48721: PPUSH
48722: CALL_OW 453
48726: GO 48696
48728: POP
48729: POP
// end ;
48730: LD_VAR 0 2
48734: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48735: LD_INT 0
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48743: LD_VAR 0 1
48747: NOT
48748: PUSH
48749: LD_VAR 0 2
48753: NOT
48754: OR
48755: PUSH
48756: LD_VAR 0 1
48760: PPUSH
48761: CALL_OW 314
48765: OR
48766: IFFALSE 48770
// exit ;
48768: GO 49237
// if GetLives ( i ) < 250 then
48770: LD_VAR 0 4
48774: PPUSH
48775: CALL_OW 256
48779: PUSH
48780: LD_INT 250
48782: LESS
48783: IFFALSE 48796
// begin ComAutodestruct ( i ) ;
48785: LD_VAR 0 4
48789: PPUSH
48790: CALL 48633 0 1
// exit ;
48794: GO 49237
// end ; x := GetX ( enemy_unit ) ;
48796: LD_ADDR_VAR 0 7
48800: PUSH
48801: LD_VAR 0 2
48805: PPUSH
48806: CALL_OW 250
48810: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48811: LD_ADDR_VAR 0 8
48815: PUSH
48816: LD_VAR 0 2
48820: PPUSH
48821: CALL_OW 251
48825: ST_TO_ADDR
// if not x or not y then
48826: LD_VAR 0 7
48830: NOT
48831: PUSH
48832: LD_VAR 0 8
48836: NOT
48837: OR
48838: IFFALSE 48842
// exit ;
48840: GO 49237
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48842: LD_ADDR_VAR 0 6
48846: PUSH
48847: LD_VAR 0 7
48851: PPUSH
48852: LD_INT 0
48854: PPUSH
48855: LD_INT 4
48857: PPUSH
48858: CALL_OW 272
48862: PUSH
48863: LD_VAR 0 8
48867: PPUSH
48868: LD_INT 0
48870: PPUSH
48871: LD_INT 4
48873: PPUSH
48874: CALL_OW 273
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_VAR 0 7
48887: PPUSH
48888: LD_INT 1
48890: PPUSH
48891: LD_INT 4
48893: PPUSH
48894: CALL_OW 272
48898: PUSH
48899: LD_VAR 0 8
48903: PPUSH
48904: LD_INT 1
48906: PPUSH
48907: LD_INT 4
48909: PPUSH
48910: CALL_OW 273
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_VAR 0 7
48923: PPUSH
48924: LD_INT 2
48926: PPUSH
48927: LD_INT 4
48929: PPUSH
48930: CALL_OW 272
48934: PUSH
48935: LD_VAR 0 8
48939: PPUSH
48940: LD_INT 2
48942: PPUSH
48943: LD_INT 4
48945: PPUSH
48946: CALL_OW 273
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_VAR 0 7
48959: PPUSH
48960: LD_INT 3
48962: PPUSH
48963: LD_INT 4
48965: PPUSH
48966: CALL_OW 272
48970: PUSH
48971: LD_VAR 0 8
48975: PPUSH
48976: LD_INT 3
48978: PPUSH
48979: LD_INT 4
48981: PPUSH
48982: CALL_OW 273
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_VAR 0 7
48995: PPUSH
48996: LD_INT 4
48998: PPUSH
48999: LD_INT 4
49001: PPUSH
49002: CALL_OW 272
49006: PUSH
49007: LD_VAR 0 8
49011: PPUSH
49012: LD_INT 4
49014: PPUSH
49015: LD_INT 4
49017: PPUSH
49018: CALL_OW 273
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_VAR 0 7
49031: PPUSH
49032: LD_INT 5
49034: PPUSH
49035: LD_INT 4
49037: PPUSH
49038: CALL_OW 272
49042: PUSH
49043: LD_VAR 0 8
49047: PPUSH
49048: LD_INT 5
49050: PPUSH
49051: LD_INT 4
49053: PPUSH
49054: CALL_OW 273
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// for i = tmp downto 1 do
49071: LD_ADDR_VAR 0 4
49075: PUSH
49076: DOUBLE
49077: LD_VAR 0 6
49081: INC
49082: ST_TO_ADDR
49083: LD_INT 1
49085: PUSH
49086: FOR_DOWNTO
49087: IFFALSE 49188
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49089: LD_VAR 0 6
49093: PUSH
49094: LD_VAR 0 4
49098: ARRAY
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: PPUSH
49104: LD_VAR 0 6
49108: PUSH
49109: LD_VAR 0 4
49113: ARRAY
49114: PUSH
49115: LD_INT 2
49117: ARRAY
49118: PPUSH
49119: CALL_OW 488
49123: NOT
49124: PUSH
49125: LD_VAR 0 6
49129: PUSH
49130: LD_VAR 0 4
49134: ARRAY
49135: PUSH
49136: LD_INT 1
49138: ARRAY
49139: PPUSH
49140: LD_VAR 0 6
49144: PUSH
49145: LD_VAR 0 4
49149: ARRAY
49150: PUSH
49151: LD_INT 2
49153: ARRAY
49154: PPUSH
49155: CALL_OW 428
49159: PUSH
49160: LD_INT 0
49162: NONEQUAL
49163: OR
49164: IFFALSE 49186
// tmp := Delete ( tmp , i ) ;
49166: LD_ADDR_VAR 0 6
49170: PUSH
49171: LD_VAR 0 6
49175: PPUSH
49176: LD_VAR 0 4
49180: PPUSH
49181: CALL_OW 3
49185: ST_TO_ADDR
49186: GO 49086
49188: POP
49189: POP
// j := GetClosestHex ( unit , tmp ) ;
49190: LD_ADDR_VAR 0 5
49194: PUSH
49195: LD_VAR 0 1
49199: PPUSH
49200: LD_VAR 0 6
49204: PPUSH
49205: CALL 48481 0 2
49209: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49210: LD_VAR 0 1
49214: PPUSH
49215: LD_VAR 0 5
49219: PUSH
49220: LD_INT 1
49222: ARRAY
49223: PPUSH
49224: LD_VAR 0 5
49228: PUSH
49229: LD_INT 2
49231: ARRAY
49232: PPUSH
49233: CALL_OW 111
// end ;
49237: LD_VAR 0 3
49241: RET
// export function PrepareApemanSoldier ( ) ; begin
49242: LD_INT 0
49244: PPUSH
// uc_nation := 0 ;
49245: LD_ADDR_OWVAR 21
49249: PUSH
49250: LD_INT 0
49252: ST_TO_ADDR
// hc_sex := sex_male ;
49253: LD_ADDR_OWVAR 27
49257: PUSH
49258: LD_INT 1
49260: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49261: LD_ADDR_OWVAR 28
49265: PUSH
49266: LD_INT 15
49268: ST_TO_ADDR
// hc_gallery :=  ;
49269: LD_ADDR_OWVAR 33
49273: PUSH
49274: LD_STRING 
49276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49277: LD_ADDR_OWVAR 31
49281: PUSH
49282: LD_INT 0
49284: PPUSH
49285: LD_INT 3
49287: PPUSH
49288: CALL_OW 12
49292: PUSH
49293: LD_INT 0
49295: PPUSH
49296: LD_INT 3
49298: PPUSH
49299: CALL_OW 12
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// end ;
49316: LD_VAR 0 1
49320: RET
// export function PrepareApemanEngineer ( ) ; begin
49321: LD_INT 0
49323: PPUSH
// uc_nation := 0 ;
49324: LD_ADDR_OWVAR 21
49328: PUSH
49329: LD_INT 0
49331: ST_TO_ADDR
// hc_sex := sex_male ;
49332: LD_ADDR_OWVAR 27
49336: PUSH
49337: LD_INT 1
49339: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49340: LD_ADDR_OWVAR 28
49344: PUSH
49345: LD_INT 16
49347: ST_TO_ADDR
// hc_gallery :=  ;
49348: LD_ADDR_OWVAR 33
49352: PUSH
49353: LD_STRING 
49355: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49356: LD_ADDR_OWVAR 31
49360: PUSH
49361: LD_INT 0
49363: PPUSH
49364: LD_INT 3
49366: PPUSH
49367: CALL_OW 12
49371: PUSH
49372: LD_INT 0
49374: PPUSH
49375: LD_INT 3
49377: PPUSH
49378: CALL_OW 12
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: ST_TO_ADDR
// end ;
49395: LD_VAR 0 1
49399: RET
// export function PrepareApeman ( agressivity ) ; begin
49400: LD_INT 0
49402: PPUSH
// uc_side := 0 ;
49403: LD_ADDR_OWVAR 20
49407: PUSH
49408: LD_INT 0
49410: ST_TO_ADDR
// uc_nation := 0 ;
49411: LD_ADDR_OWVAR 21
49415: PUSH
49416: LD_INT 0
49418: ST_TO_ADDR
// hc_sex := sex_male ;
49419: LD_ADDR_OWVAR 27
49423: PUSH
49424: LD_INT 1
49426: ST_TO_ADDR
// hc_class := class_apeman ;
49427: LD_ADDR_OWVAR 28
49431: PUSH
49432: LD_INT 12
49434: ST_TO_ADDR
// hc_gallery :=  ;
49435: LD_ADDR_OWVAR 33
49439: PUSH
49440: LD_STRING 
49442: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49443: LD_ADDR_OWVAR 35
49447: PUSH
49448: LD_VAR 0 1
49452: NEG
49453: PPUSH
49454: LD_VAR 0 1
49458: PPUSH
49459: CALL_OW 12
49463: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49464: LD_ADDR_OWVAR 31
49468: PUSH
49469: LD_INT 0
49471: PPUSH
49472: LD_INT 3
49474: PPUSH
49475: CALL_OW 12
49479: PUSH
49480: LD_INT 0
49482: PPUSH
49483: LD_INT 3
49485: PPUSH
49486: CALL_OW 12
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
// end ;
49503: LD_VAR 0 2
49507: RET
// export function PrepareTiger ( agressivity ) ; begin
49508: LD_INT 0
49510: PPUSH
// uc_side := 0 ;
49511: LD_ADDR_OWVAR 20
49515: PUSH
49516: LD_INT 0
49518: ST_TO_ADDR
// uc_nation := 0 ;
49519: LD_ADDR_OWVAR 21
49523: PUSH
49524: LD_INT 0
49526: ST_TO_ADDR
// hc_class := class_tiger ;
49527: LD_ADDR_OWVAR 28
49531: PUSH
49532: LD_INT 14
49534: ST_TO_ADDR
// hc_gallery :=  ;
49535: LD_ADDR_OWVAR 33
49539: PUSH
49540: LD_STRING 
49542: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49543: LD_ADDR_OWVAR 35
49547: PUSH
49548: LD_VAR 0 1
49552: NEG
49553: PPUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: CALL_OW 12
49563: ST_TO_ADDR
// end ;
49564: LD_VAR 0 2
49568: RET
// export function PrepareEnchidna ( ) ; begin
49569: LD_INT 0
49571: PPUSH
// uc_side := 0 ;
49572: LD_ADDR_OWVAR 20
49576: PUSH
49577: LD_INT 0
49579: ST_TO_ADDR
// uc_nation := 0 ;
49580: LD_ADDR_OWVAR 21
49584: PUSH
49585: LD_INT 0
49587: ST_TO_ADDR
// hc_class := class_baggie ;
49588: LD_ADDR_OWVAR 28
49592: PUSH
49593: LD_INT 13
49595: ST_TO_ADDR
// hc_gallery :=  ;
49596: LD_ADDR_OWVAR 33
49600: PUSH
49601: LD_STRING 
49603: ST_TO_ADDR
// end ;
49604: LD_VAR 0 1
49608: RET
// export function PrepareFrog ( ) ; begin
49609: LD_INT 0
49611: PPUSH
// uc_side := 0 ;
49612: LD_ADDR_OWVAR 20
49616: PUSH
49617: LD_INT 0
49619: ST_TO_ADDR
// uc_nation := 0 ;
49620: LD_ADDR_OWVAR 21
49624: PUSH
49625: LD_INT 0
49627: ST_TO_ADDR
// hc_class := class_frog ;
49628: LD_ADDR_OWVAR 28
49632: PUSH
49633: LD_INT 19
49635: ST_TO_ADDR
// hc_gallery :=  ;
49636: LD_ADDR_OWVAR 33
49640: PUSH
49641: LD_STRING 
49643: ST_TO_ADDR
// end ;
49644: LD_VAR 0 1
49648: RET
// export function PrepareFish ( ) ; begin
49649: LD_INT 0
49651: PPUSH
// uc_side := 0 ;
49652: LD_ADDR_OWVAR 20
49656: PUSH
49657: LD_INT 0
49659: ST_TO_ADDR
// uc_nation := 0 ;
49660: LD_ADDR_OWVAR 21
49664: PUSH
49665: LD_INT 0
49667: ST_TO_ADDR
// hc_class := class_fish ;
49668: LD_ADDR_OWVAR 28
49672: PUSH
49673: LD_INT 20
49675: ST_TO_ADDR
// hc_gallery :=  ;
49676: LD_ADDR_OWVAR 33
49680: PUSH
49681: LD_STRING 
49683: ST_TO_ADDR
// end ;
49684: LD_VAR 0 1
49688: RET
// export function PrepareBird ( ) ; begin
49689: LD_INT 0
49691: PPUSH
// uc_side := 0 ;
49692: LD_ADDR_OWVAR 20
49696: PUSH
49697: LD_INT 0
49699: ST_TO_ADDR
// uc_nation := 0 ;
49700: LD_ADDR_OWVAR 21
49704: PUSH
49705: LD_INT 0
49707: ST_TO_ADDR
// hc_class := class_phororhacos ;
49708: LD_ADDR_OWVAR 28
49712: PUSH
49713: LD_INT 18
49715: ST_TO_ADDR
// hc_gallery :=  ;
49716: LD_ADDR_OWVAR 33
49720: PUSH
49721: LD_STRING 
49723: ST_TO_ADDR
// end ;
49724: LD_VAR 0 1
49728: RET
// export function PrepareHorse ( ) ; begin
49729: LD_INT 0
49731: PPUSH
// uc_side := 0 ;
49732: LD_ADDR_OWVAR 20
49736: PUSH
49737: LD_INT 0
49739: ST_TO_ADDR
// uc_nation := 0 ;
49740: LD_ADDR_OWVAR 21
49744: PUSH
49745: LD_INT 0
49747: ST_TO_ADDR
// hc_class := class_horse ;
49748: LD_ADDR_OWVAR 28
49752: PUSH
49753: LD_INT 21
49755: ST_TO_ADDR
// hc_gallery :=  ;
49756: LD_ADDR_OWVAR 33
49760: PUSH
49761: LD_STRING 
49763: ST_TO_ADDR
// end ;
49764: LD_VAR 0 1
49768: RET
// export function PrepareMastodont ( ) ; begin
49769: LD_INT 0
49771: PPUSH
// uc_side := 0 ;
49772: LD_ADDR_OWVAR 20
49776: PUSH
49777: LD_INT 0
49779: ST_TO_ADDR
// uc_nation := 0 ;
49780: LD_ADDR_OWVAR 21
49784: PUSH
49785: LD_INT 0
49787: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49788: LD_ADDR_OWVAR 37
49792: PUSH
49793: LD_INT 31
49795: ST_TO_ADDR
// vc_control := control_rider ;
49796: LD_ADDR_OWVAR 38
49800: PUSH
49801: LD_INT 4
49803: ST_TO_ADDR
// end ;
49804: LD_VAR 0 1
49808: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49809: LD_INT 0
49811: PPUSH
49812: PPUSH
49813: PPUSH
// uc_side = 0 ;
49814: LD_ADDR_OWVAR 20
49818: PUSH
49819: LD_INT 0
49821: ST_TO_ADDR
// uc_nation = 0 ;
49822: LD_ADDR_OWVAR 21
49826: PUSH
49827: LD_INT 0
49829: ST_TO_ADDR
// InitHc_All ( ) ;
49830: CALL_OW 584
// InitVc ;
49834: CALL_OW 20
// if mastodonts then
49838: LD_VAR 0 6
49842: IFFALSE 49909
// for i = 1 to mastodonts do
49844: LD_ADDR_VAR 0 11
49848: PUSH
49849: DOUBLE
49850: LD_INT 1
49852: DEC
49853: ST_TO_ADDR
49854: LD_VAR 0 6
49858: PUSH
49859: FOR_TO
49860: IFFALSE 49907
// begin vc_chassis := 31 ;
49862: LD_ADDR_OWVAR 37
49866: PUSH
49867: LD_INT 31
49869: ST_TO_ADDR
// vc_control := control_rider ;
49870: LD_ADDR_OWVAR 38
49874: PUSH
49875: LD_INT 4
49877: ST_TO_ADDR
// animal := CreateVehicle ;
49878: LD_ADDR_VAR 0 12
49882: PUSH
49883: CALL_OW 45
49887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49888: LD_VAR 0 12
49892: PPUSH
49893: LD_VAR 0 8
49897: PPUSH
49898: LD_INT 0
49900: PPUSH
49901: CALL 52037 0 3
// end ;
49905: GO 49859
49907: POP
49908: POP
// if horses then
49909: LD_VAR 0 5
49913: IFFALSE 49980
// for i = 1 to horses do
49915: LD_ADDR_VAR 0 11
49919: PUSH
49920: DOUBLE
49921: LD_INT 1
49923: DEC
49924: ST_TO_ADDR
49925: LD_VAR 0 5
49929: PUSH
49930: FOR_TO
49931: IFFALSE 49978
// begin hc_class := 21 ;
49933: LD_ADDR_OWVAR 28
49937: PUSH
49938: LD_INT 21
49940: ST_TO_ADDR
// hc_gallery :=  ;
49941: LD_ADDR_OWVAR 33
49945: PUSH
49946: LD_STRING 
49948: ST_TO_ADDR
// animal := CreateHuman ;
49949: LD_ADDR_VAR 0 12
49953: PUSH
49954: CALL_OW 44
49958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49959: LD_VAR 0 12
49963: PPUSH
49964: LD_VAR 0 8
49968: PPUSH
49969: LD_INT 0
49971: PPUSH
49972: CALL 52037 0 3
// end ;
49976: GO 49930
49978: POP
49979: POP
// if birds then
49980: LD_VAR 0 1
49984: IFFALSE 50051
// for i = 1 to birds do
49986: LD_ADDR_VAR 0 11
49990: PUSH
49991: DOUBLE
49992: LD_INT 1
49994: DEC
49995: ST_TO_ADDR
49996: LD_VAR 0 1
50000: PUSH
50001: FOR_TO
50002: IFFALSE 50049
// begin hc_class = 18 ;
50004: LD_ADDR_OWVAR 28
50008: PUSH
50009: LD_INT 18
50011: ST_TO_ADDR
// hc_gallery =  ;
50012: LD_ADDR_OWVAR 33
50016: PUSH
50017: LD_STRING 
50019: ST_TO_ADDR
// animal := CreateHuman ;
50020: LD_ADDR_VAR 0 12
50024: PUSH
50025: CALL_OW 44
50029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50030: LD_VAR 0 12
50034: PPUSH
50035: LD_VAR 0 8
50039: PPUSH
50040: LD_INT 0
50042: PPUSH
50043: CALL 52037 0 3
// end ;
50047: GO 50001
50049: POP
50050: POP
// if tigers then
50051: LD_VAR 0 2
50055: IFFALSE 50139
// for i = 1 to tigers do
50057: LD_ADDR_VAR 0 11
50061: PUSH
50062: DOUBLE
50063: LD_INT 1
50065: DEC
50066: ST_TO_ADDR
50067: LD_VAR 0 2
50071: PUSH
50072: FOR_TO
50073: IFFALSE 50137
// begin hc_class = class_tiger ;
50075: LD_ADDR_OWVAR 28
50079: PUSH
50080: LD_INT 14
50082: ST_TO_ADDR
// hc_gallery =  ;
50083: LD_ADDR_OWVAR 33
50087: PUSH
50088: LD_STRING 
50090: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50091: LD_ADDR_OWVAR 35
50095: PUSH
50096: LD_INT 7
50098: NEG
50099: PPUSH
50100: LD_INT 7
50102: PPUSH
50103: CALL_OW 12
50107: ST_TO_ADDR
// animal := CreateHuman ;
50108: LD_ADDR_VAR 0 12
50112: PUSH
50113: CALL_OW 44
50117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50118: LD_VAR 0 12
50122: PPUSH
50123: LD_VAR 0 8
50127: PPUSH
50128: LD_INT 0
50130: PPUSH
50131: CALL 52037 0 3
// end ;
50135: GO 50072
50137: POP
50138: POP
// if apemans then
50139: LD_VAR 0 3
50143: IFFALSE 50266
// for i = 1 to apemans do
50145: LD_ADDR_VAR 0 11
50149: PUSH
50150: DOUBLE
50151: LD_INT 1
50153: DEC
50154: ST_TO_ADDR
50155: LD_VAR 0 3
50159: PUSH
50160: FOR_TO
50161: IFFALSE 50264
// begin hc_class = class_apeman ;
50163: LD_ADDR_OWVAR 28
50167: PUSH
50168: LD_INT 12
50170: ST_TO_ADDR
// hc_gallery =  ;
50171: LD_ADDR_OWVAR 33
50175: PUSH
50176: LD_STRING 
50178: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50179: LD_ADDR_OWVAR 35
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PPUSH
50188: LD_INT 2
50190: PPUSH
50191: CALL_OW 12
50195: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50196: LD_ADDR_OWVAR 31
50200: PUSH
50201: LD_INT 1
50203: PPUSH
50204: LD_INT 3
50206: PPUSH
50207: CALL_OW 12
50211: PUSH
50212: LD_INT 1
50214: PPUSH
50215: LD_INT 3
50217: PPUSH
50218: CALL_OW 12
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// animal := CreateHuman ;
50235: LD_ADDR_VAR 0 12
50239: PUSH
50240: CALL_OW 44
50244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50245: LD_VAR 0 12
50249: PPUSH
50250: LD_VAR 0 8
50254: PPUSH
50255: LD_INT 0
50257: PPUSH
50258: CALL 52037 0 3
// end ;
50262: GO 50160
50264: POP
50265: POP
// if enchidnas then
50266: LD_VAR 0 4
50270: IFFALSE 50337
// for i = 1 to enchidnas do
50272: LD_ADDR_VAR 0 11
50276: PUSH
50277: DOUBLE
50278: LD_INT 1
50280: DEC
50281: ST_TO_ADDR
50282: LD_VAR 0 4
50286: PUSH
50287: FOR_TO
50288: IFFALSE 50335
// begin hc_class = 13 ;
50290: LD_ADDR_OWVAR 28
50294: PUSH
50295: LD_INT 13
50297: ST_TO_ADDR
// hc_gallery =  ;
50298: LD_ADDR_OWVAR 33
50302: PUSH
50303: LD_STRING 
50305: ST_TO_ADDR
// animal := CreateHuman ;
50306: LD_ADDR_VAR 0 12
50310: PUSH
50311: CALL_OW 44
50315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50316: LD_VAR 0 12
50320: PPUSH
50321: LD_VAR 0 8
50325: PPUSH
50326: LD_INT 0
50328: PPUSH
50329: CALL 52037 0 3
// end ;
50333: GO 50287
50335: POP
50336: POP
// if fishes then
50337: LD_VAR 0 7
50341: IFFALSE 50408
// for i = 1 to fishes do
50343: LD_ADDR_VAR 0 11
50347: PUSH
50348: DOUBLE
50349: LD_INT 1
50351: DEC
50352: ST_TO_ADDR
50353: LD_VAR 0 7
50357: PUSH
50358: FOR_TO
50359: IFFALSE 50406
// begin hc_class = 20 ;
50361: LD_ADDR_OWVAR 28
50365: PUSH
50366: LD_INT 20
50368: ST_TO_ADDR
// hc_gallery =  ;
50369: LD_ADDR_OWVAR 33
50373: PUSH
50374: LD_STRING 
50376: ST_TO_ADDR
// animal := CreateHuman ;
50377: LD_ADDR_VAR 0 12
50381: PUSH
50382: CALL_OW 44
50386: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50387: LD_VAR 0 12
50391: PPUSH
50392: LD_VAR 0 9
50396: PPUSH
50397: LD_INT 0
50399: PPUSH
50400: CALL 52037 0 3
// end ;
50404: GO 50358
50406: POP
50407: POP
// end ;
50408: LD_VAR 0 10
50412: RET
// export function WantHeal ( sci , unit ) ; begin
50413: LD_INT 0
50415: PPUSH
// if GetTaskList ( sci ) > 0 then
50416: LD_VAR 0 1
50420: PPUSH
50421: CALL_OW 437
50425: PUSH
50426: LD_INT 0
50428: GREATER
50429: IFFALSE 50499
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50431: LD_VAR 0 1
50435: PPUSH
50436: CALL_OW 437
50440: PUSH
50441: LD_INT 1
50443: ARRAY
50444: PUSH
50445: LD_INT 1
50447: ARRAY
50448: PUSH
50449: LD_STRING l
50451: EQUAL
50452: PUSH
50453: LD_VAR 0 1
50457: PPUSH
50458: CALL_OW 437
50462: PUSH
50463: LD_INT 1
50465: ARRAY
50466: PUSH
50467: LD_INT 4
50469: ARRAY
50470: PUSH
50471: LD_VAR 0 2
50475: EQUAL
50476: AND
50477: IFFALSE 50489
// result := true else
50479: LD_ADDR_VAR 0 3
50483: PUSH
50484: LD_INT 1
50486: ST_TO_ADDR
50487: GO 50497
// result := false ;
50489: LD_ADDR_VAR 0 3
50493: PUSH
50494: LD_INT 0
50496: ST_TO_ADDR
// end else
50497: GO 50507
// result := false ;
50499: LD_ADDR_VAR 0 3
50503: PUSH
50504: LD_INT 0
50506: ST_TO_ADDR
// end ;
50507: LD_VAR 0 3
50511: RET
// export function HealTarget ( sci ) ; begin
50512: LD_INT 0
50514: PPUSH
// if not sci then
50515: LD_VAR 0 1
50519: NOT
50520: IFFALSE 50524
// exit ;
50522: GO 50589
// result := 0 ;
50524: LD_ADDR_VAR 0 2
50528: PUSH
50529: LD_INT 0
50531: ST_TO_ADDR
// if GetTaskList ( sci ) then
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL_OW 437
50541: IFFALSE 50589
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50543: LD_VAR 0 1
50547: PPUSH
50548: CALL_OW 437
50552: PUSH
50553: LD_INT 1
50555: ARRAY
50556: PUSH
50557: LD_INT 1
50559: ARRAY
50560: PUSH
50561: LD_STRING l
50563: EQUAL
50564: IFFALSE 50589
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50566: LD_ADDR_VAR 0 2
50570: PUSH
50571: LD_VAR 0 1
50575: PPUSH
50576: CALL_OW 437
50580: PUSH
50581: LD_INT 1
50583: ARRAY
50584: PUSH
50585: LD_INT 4
50587: ARRAY
50588: ST_TO_ADDR
// end ;
50589: LD_VAR 0 2
50593: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50594: LD_INT 0
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
// if not base_units then
50600: LD_VAR 0 1
50604: NOT
50605: IFFALSE 50609
// exit ;
50607: GO 50696
// result := false ;
50609: LD_ADDR_VAR 0 2
50613: PUSH
50614: LD_INT 0
50616: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50617: LD_ADDR_VAR 0 5
50621: PUSH
50622: LD_VAR 0 1
50626: PPUSH
50627: LD_INT 21
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PPUSH
50637: CALL_OW 72
50641: ST_TO_ADDR
// if not tmp then
50642: LD_VAR 0 5
50646: NOT
50647: IFFALSE 50651
// exit ;
50649: GO 50696
// for i in tmp do
50651: LD_ADDR_VAR 0 3
50655: PUSH
50656: LD_VAR 0 5
50660: PUSH
50661: FOR_IN
50662: IFFALSE 50694
// begin result := EnemyInRange ( i , 22 ) ;
50664: LD_ADDR_VAR 0 2
50668: PUSH
50669: LD_VAR 0 3
50673: PPUSH
50674: LD_INT 22
50676: PPUSH
50677: CALL 48283 0 2
50681: ST_TO_ADDR
// if result then
50682: LD_VAR 0 2
50686: IFFALSE 50692
// exit ;
50688: POP
50689: POP
50690: GO 50696
// end ;
50692: GO 50661
50694: POP
50695: POP
// end ;
50696: LD_VAR 0 2
50700: RET
// export function FilterByTag ( units , tag ) ; begin
50701: LD_INT 0
50703: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50704: LD_ADDR_VAR 0 3
50708: PUSH
50709: LD_VAR 0 1
50713: PPUSH
50714: LD_INT 120
50716: PUSH
50717: LD_VAR 0 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PPUSH
50726: CALL_OW 72
50730: ST_TO_ADDR
// end ;
50731: LD_VAR 0 3
50735: RET
// export function IsDriver ( un ) ; begin
50736: LD_INT 0
50738: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50739: LD_ADDR_VAR 0 2
50743: PUSH
50744: LD_VAR 0 1
50748: PUSH
50749: LD_INT 55
50751: PUSH
50752: EMPTY
50753: LIST
50754: PPUSH
50755: CALL_OW 69
50759: IN
50760: ST_TO_ADDR
// end ;
50761: LD_VAR 0 2
50765: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50766: LD_INT 0
50768: PPUSH
50769: PPUSH
// list := [ ] ;
50770: LD_ADDR_VAR 0 5
50774: PUSH
50775: EMPTY
50776: ST_TO_ADDR
// case d of 0 :
50777: LD_VAR 0 3
50781: PUSH
50782: LD_INT 0
50784: DOUBLE
50785: EQUAL
50786: IFTRUE 50790
50788: GO 50923
50790: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50791: LD_ADDR_VAR 0 5
50795: PUSH
50796: LD_VAR 0 1
50800: PUSH
50801: LD_INT 4
50803: MINUS
50804: PUSH
50805: LD_VAR 0 2
50809: PUSH
50810: LD_INT 4
50812: MINUS
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: PUSH
50822: LD_VAR 0 1
50826: PUSH
50827: LD_INT 3
50829: MINUS
50830: PUSH
50831: LD_VAR 0 2
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: PUSH
50844: LD_VAR 0 1
50848: PUSH
50849: LD_INT 4
50851: PLUS
50852: PUSH
50853: LD_VAR 0 2
50857: PUSH
50858: LD_INT 4
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: PUSH
50866: LD_VAR 0 1
50870: PUSH
50871: LD_INT 3
50873: PLUS
50874: PUSH
50875: LD_VAR 0 2
50879: PUSH
50880: LD_INT 3
50882: PLUS
50883: PUSH
50884: LD_INT 5
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: PUSH
50892: LD_VAR 0 1
50896: PUSH
50897: LD_VAR 0 2
50901: PUSH
50902: LD_INT 4
50904: PLUS
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: ST_TO_ADDR
// end ; 1 :
50921: GO 51621
50923: LD_INT 1
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50931
50929: GO 51064
50931: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50932: LD_ADDR_VAR 0 5
50936: PUSH
50937: LD_VAR 0 1
50941: PUSH
50942: LD_VAR 0 2
50946: PUSH
50947: LD_INT 4
50949: MINUS
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: PUSH
50959: LD_VAR 0 1
50963: PUSH
50964: LD_INT 3
50966: MINUS
50967: PUSH
50968: LD_VAR 0 2
50972: PUSH
50973: LD_INT 3
50975: MINUS
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: PUSH
50985: LD_VAR 0 1
50989: PUSH
50990: LD_INT 4
50992: MINUS
50993: PUSH
50994: LD_VAR 0 2
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: LD_VAR 0 1
51011: PUSH
51012: LD_VAR 0 2
51016: PUSH
51017: LD_INT 3
51019: PLUS
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: PUSH
51029: LD_VAR 0 1
51033: PUSH
51034: LD_INT 4
51036: PLUS
51037: PUSH
51038: LD_VAR 0 2
51042: PUSH
51043: LD_INT 4
51045: PLUS
51046: PUSH
51047: LD_INT 5
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: ST_TO_ADDR
// end ; 2 :
51062: GO 51621
51064: LD_INT 2
51066: DOUBLE
51067: EQUAL
51068: IFTRUE 51072
51070: GO 51201
51072: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51073: LD_ADDR_VAR 0 5
51077: PUSH
51078: LD_VAR 0 1
51082: PUSH
51083: LD_VAR 0 2
51087: PUSH
51088: LD_INT 3
51090: MINUS
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: PUSH
51100: LD_VAR 0 1
51104: PUSH
51105: LD_INT 4
51107: PLUS
51108: PUSH
51109: LD_VAR 0 2
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: PUSH
51122: LD_VAR 0 1
51126: PUSH
51127: LD_VAR 0 2
51131: PUSH
51132: LD_INT 4
51134: PLUS
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: PUSH
51144: LD_VAR 0 1
51148: PUSH
51149: LD_INT 3
51151: MINUS
51152: PUSH
51153: LD_VAR 0 2
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: PUSH
51166: LD_VAR 0 1
51170: PUSH
51171: LD_INT 4
51173: MINUS
51174: PUSH
51175: LD_VAR 0 2
51179: PUSH
51180: LD_INT 4
51182: MINUS
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// end ; 3 :
51199: GO 51621
51201: LD_INT 3
51203: DOUBLE
51204: EQUAL
51205: IFTRUE 51209
51207: GO 51342
51209: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51210: LD_ADDR_VAR 0 5
51214: PUSH
51215: LD_VAR 0 1
51219: PUSH
51220: LD_INT 3
51222: PLUS
51223: PUSH
51224: LD_VAR 0 2
51228: PUSH
51229: LD_INT 4
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: PUSH
51237: LD_VAR 0 1
51241: PUSH
51242: LD_INT 4
51244: PLUS
51245: PUSH
51246: LD_VAR 0 2
51250: PUSH
51251: LD_INT 4
51253: PLUS
51254: PUSH
51255: LD_INT 5
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: PUSH
51263: LD_VAR 0 1
51267: PUSH
51268: LD_INT 4
51270: MINUS
51271: PUSH
51272: LD_VAR 0 2
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: PUSH
51285: LD_VAR 0 1
51289: PUSH
51290: LD_VAR 0 2
51294: PUSH
51295: LD_INT 4
51297: MINUS
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: PUSH
51307: LD_VAR 0 1
51311: PUSH
51312: LD_INT 3
51314: MINUS
51315: PUSH
51316: LD_VAR 0 2
51320: PUSH
51321: LD_INT 3
51323: MINUS
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// end ; 4 :
51340: GO 51621
51342: LD_INT 4
51344: DOUBLE
51345: EQUAL
51346: IFTRUE 51350
51348: GO 51483
51350: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51351: LD_ADDR_VAR 0 5
51355: PUSH
51356: LD_VAR 0 1
51360: PUSH
51361: LD_VAR 0 2
51365: PUSH
51366: LD_INT 4
51368: PLUS
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: PUSH
51378: LD_VAR 0 1
51382: PUSH
51383: LD_INT 3
51385: PLUS
51386: PUSH
51387: LD_VAR 0 2
51391: PUSH
51392: LD_INT 3
51394: PLUS
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: PUSH
51404: LD_VAR 0 1
51408: PUSH
51409: LD_INT 4
51411: PLUS
51412: PUSH
51413: LD_VAR 0 2
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: LIST
51425: PUSH
51426: LD_VAR 0 1
51430: PUSH
51431: LD_VAR 0 2
51435: PUSH
51436: LD_INT 3
51438: MINUS
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: PUSH
51448: LD_VAR 0 1
51452: PUSH
51453: LD_INT 4
51455: MINUS
51456: PUSH
51457: LD_VAR 0 2
51461: PUSH
51462: LD_INT 4
51464: MINUS
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// end ; 5 :
51481: GO 51621
51483: LD_INT 5
51485: DOUBLE
51486: EQUAL
51487: IFTRUE 51491
51489: GO 51620
51491: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51492: LD_ADDR_VAR 0 5
51496: PUSH
51497: LD_VAR 0 1
51501: PUSH
51502: LD_INT 4
51504: MINUS
51505: PUSH
51506: LD_VAR 0 2
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: PUSH
51519: LD_VAR 0 1
51523: PUSH
51524: LD_VAR 0 2
51528: PUSH
51529: LD_INT 4
51531: MINUS
51532: PUSH
51533: LD_INT 3
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: PUSH
51541: LD_VAR 0 1
51545: PUSH
51546: LD_INT 4
51548: PLUS
51549: PUSH
51550: LD_VAR 0 2
51554: PUSH
51555: LD_INT 4
51557: PLUS
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: PUSH
51567: LD_VAR 0 1
51571: PUSH
51572: LD_INT 3
51574: PLUS
51575: PUSH
51576: LD_VAR 0 2
51580: PUSH
51581: LD_INT 4
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 1
51593: PUSH
51594: LD_VAR 0 2
51598: PUSH
51599: LD_INT 3
51601: PLUS
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// end ; end ;
51618: GO 51621
51620: POP
// result := list ;
51621: LD_ADDR_VAR 0 4
51625: PUSH
51626: LD_VAR 0 5
51630: ST_TO_ADDR
// end ;
51631: LD_VAR 0 4
51635: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51636: LD_INT 0
51638: PPUSH
51639: PPUSH
51640: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51641: LD_VAR 0 1
51645: NOT
51646: PUSH
51647: LD_VAR 0 2
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: LD_INT 4
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: IN
51670: NOT
51671: OR
51672: IFFALSE 51676
// exit ;
51674: GO 51759
// tmp := [ ] ;
51676: LD_ADDR_VAR 0 5
51680: PUSH
51681: EMPTY
51682: ST_TO_ADDR
// for i in units do
51683: LD_ADDR_VAR 0 4
51687: PUSH
51688: LD_VAR 0 1
51692: PUSH
51693: FOR_IN
51694: IFFALSE 51728
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51696: LD_ADDR_VAR 0 5
51700: PUSH
51701: LD_VAR 0 5
51705: PPUSH
51706: LD_VAR 0 4
51710: PPUSH
51711: LD_VAR 0 2
51715: PPUSH
51716: CALL_OW 259
51720: PPUSH
51721: CALL 53119 0 2
51725: ST_TO_ADDR
51726: GO 51693
51728: POP
51729: POP
// if not tmp then
51730: LD_VAR 0 5
51734: NOT
51735: IFFALSE 51739
// exit ;
51737: GO 51759
// result := SortListByListDesc ( units , tmp ) ;
51739: LD_ADDR_VAR 0 3
51743: PUSH
51744: LD_VAR 0 1
51748: PPUSH
51749: LD_VAR 0 5
51753: PPUSH
51754: CALL_OW 77
51758: ST_TO_ADDR
// end ;
51759: LD_VAR 0 3
51763: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51764: LD_INT 0
51766: PPUSH
51767: PPUSH
51768: PPUSH
// result := false ;
51769: LD_ADDR_VAR 0 3
51773: PUSH
51774: LD_INT 0
51776: ST_TO_ADDR
// if not building then
51777: LD_VAR 0 2
51781: NOT
51782: IFFALSE 51786
// exit ;
51784: GO 51924
// x := GetX ( building ) ;
51786: LD_ADDR_VAR 0 4
51790: PUSH
51791: LD_VAR 0 2
51795: PPUSH
51796: CALL_OW 250
51800: ST_TO_ADDR
// y := GetY ( building ) ;
51801: LD_ADDR_VAR 0 5
51805: PUSH
51806: LD_VAR 0 2
51810: PPUSH
51811: CALL_OW 251
51815: ST_TO_ADDR
// if not x or not y then
51816: LD_VAR 0 4
51820: NOT
51821: PUSH
51822: LD_VAR 0 5
51826: NOT
51827: OR
51828: IFFALSE 51832
// exit ;
51830: GO 51924
// if GetTaskList ( unit ) then
51832: LD_VAR 0 1
51836: PPUSH
51837: CALL_OW 437
51841: IFFALSE 51924
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51843: LD_STRING e
51845: PUSH
51846: LD_VAR 0 1
51850: PPUSH
51851: CALL_OW 437
51855: PUSH
51856: LD_INT 1
51858: ARRAY
51859: PUSH
51860: LD_INT 1
51862: ARRAY
51863: EQUAL
51864: PUSH
51865: LD_VAR 0 4
51869: PUSH
51870: LD_VAR 0 1
51874: PPUSH
51875: CALL_OW 437
51879: PUSH
51880: LD_INT 1
51882: ARRAY
51883: PUSH
51884: LD_INT 2
51886: ARRAY
51887: EQUAL
51888: AND
51889: PUSH
51890: LD_VAR 0 5
51894: PUSH
51895: LD_VAR 0 1
51899: PPUSH
51900: CALL_OW 437
51904: PUSH
51905: LD_INT 1
51907: ARRAY
51908: PUSH
51909: LD_INT 3
51911: ARRAY
51912: EQUAL
51913: AND
51914: IFFALSE 51924
// result := true end ;
51916: LD_ADDR_VAR 0 3
51920: PUSH
51921: LD_INT 1
51923: ST_TO_ADDR
// end ;
51924: LD_VAR 0 3
51928: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51929: LD_INT 0
51931: PPUSH
// result := false ;
51932: LD_ADDR_VAR 0 4
51936: PUSH
51937: LD_INT 0
51939: ST_TO_ADDR
// if GetTaskList ( unit ) then
51940: LD_VAR 0 1
51944: PPUSH
51945: CALL_OW 437
51949: IFFALSE 52032
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51951: LD_STRING M
51953: PUSH
51954: LD_VAR 0 1
51958: PPUSH
51959: CALL_OW 437
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: PUSH
51968: LD_INT 1
51970: ARRAY
51971: EQUAL
51972: PUSH
51973: LD_VAR 0 2
51977: PUSH
51978: LD_VAR 0 1
51982: PPUSH
51983: CALL_OW 437
51987: PUSH
51988: LD_INT 1
51990: ARRAY
51991: PUSH
51992: LD_INT 2
51994: ARRAY
51995: EQUAL
51996: AND
51997: PUSH
51998: LD_VAR 0 3
52002: PUSH
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 437
52012: PUSH
52013: LD_INT 1
52015: ARRAY
52016: PUSH
52017: LD_INT 3
52019: ARRAY
52020: EQUAL
52021: AND
52022: IFFALSE 52032
// result := true ;
52024: LD_ADDR_VAR 0 4
52028: PUSH
52029: LD_INT 1
52031: ST_TO_ADDR
// end ; end ;
52032: LD_VAR 0 4
52036: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52037: LD_INT 0
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
// if not unit or not area then
52043: LD_VAR 0 1
52047: NOT
52048: PUSH
52049: LD_VAR 0 2
52053: NOT
52054: OR
52055: IFFALSE 52059
// exit ;
52057: GO 52222
// tmp := AreaToList ( area , i ) ;
52059: LD_ADDR_VAR 0 6
52063: PUSH
52064: LD_VAR 0 2
52068: PPUSH
52069: LD_VAR 0 5
52073: PPUSH
52074: CALL_OW 517
52078: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52079: LD_ADDR_VAR 0 5
52083: PUSH
52084: DOUBLE
52085: LD_INT 1
52087: DEC
52088: ST_TO_ADDR
52089: LD_VAR 0 6
52093: PUSH
52094: LD_INT 1
52096: ARRAY
52097: PUSH
52098: FOR_TO
52099: IFFALSE 52220
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52101: LD_ADDR_VAR 0 7
52105: PUSH
52106: LD_VAR 0 6
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: PUSH
52115: LD_VAR 0 5
52119: ARRAY
52120: PUSH
52121: LD_VAR 0 6
52125: PUSH
52126: LD_INT 2
52128: ARRAY
52129: PUSH
52130: LD_VAR 0 5
52134: ARRAY
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
52140: LD_INT 92
52142: PUSH
52143: LD_VAR 0 7
52147: PUSH
52148: LD_INT 1
52150: ARRAY
52151: PUSH
52152: LD_VAR 0 7
52156: PUSH
52157: LD_INT 2
52159: ARRAY
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: PPUSH
52170: CALL_OW 69
52174: PUSH
52175: LD_INT 0
52177: EQUAL
52178: IFFALSE 52218
// begin PlaceUnitArea ( unit , area , mode ) ;
52180: LD_VAR 0 1
52184: PPUSH
52185: LD_VAR 0 2
52189: PPUSH
52190: LD_VAR 0 3
52194: PPUSH
52195: CALL_OW 49
// result := IsPlaced ( unit ) ;
52199: LD_ADDR_VAR 0 4
52203: PUSH
52204: LD_VAR 0 1
52208: PPUSH
52209: CALL_OW 305
52213: ST_TO_ADDR
// exit ;
52214: POP
52215: POP
52216: GO 52222
// end ; end ;
52218: GO 52098
52220: POP
52221: POP
// end ;
52222: LD_VAR 0 4
52226: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52227: LD_INT 0
52229: PPUSH
52230: PPUSH
52231: PPUSH
// if not side or side > 8 then
52232: LD_VAR 0 1
52236: NOT
52237: PUSH
52238: LD_VAR 0 1
52242: PUSH
52243: LD_INT 8
52245: GREATER
52246: OR
52247: IFFALSE 52251
// exit ;
52249: GO 52438
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52251: LD_ADDR_VAR 0 4
52255: PUSH
52256: LD_INT 22
52258: PUSH
52259: LD_VAR 0 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 21
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PPUSH
52282: CALL_OW 69
52286: ST_TO_ADDR
// if not tmp then
52287: LD_VAR 0 4
52291: NOT
52292: IFFALSE 52296
// exit ;
52294: GO 52438
// enable_addtolog := true ;
52296: LD_ADDR_OWVAR 81
52300: PUSH
52301: LD_INT 1
52303: ST_TO_ADDR
// AddToLog ( [ ) ;
52304: LD_STRING [
52306: PPUSH
52307: CALL_OW 561
// for i in tmp do
52311: LD_ADDR_VAR 0 3
52315: PUSH
52316: LD_VAR 0 4
52320: PUSH
52321: FOR_IN
52322: IFFALSE 52429
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52324: LD_STRING [
52326: PUSH
52327: LD_VAR 0 3
52331: PPUSH
52332: CALL_OW 266
52336: STR
52337: PUSH
52338: LD_STRING , 
52340: STR
52341: PUSH
52342: LD_VAR 0 3
52346: PPUSH
52347: CALL_OW 250
52351: STR
52352: PUSH
52353: LD_STRING , 
52355: STR
52356: PUSH
52357: LD_VAR 0 3
52361: PPUSH
52362: CALL_OW 251
52366: STR
52367: PUSH
52368: LD_STRING , 
52370: STR
52371: PUSH
52372: LD_VAR 0 3
52376: PPUSH
52377: CALL_OW 254
52381: STR
52382: PUSH
52383: LD_STRING , 
52385: STR
52386: PUSH
52387: LD_VAR 0 3
52391: PPUSH
52392: LD_INT 1
52394: PPUSH
52395: CALL_OW 268
52399: STR
52400: PUSH
52401: LD_STRING , 
52403: STR
52404: PUSH
52405: LD_VAR 0 3
52409: PPUSH
52410: LD_INT 2
52412: PPUSH
52413: CALL_OW 268
52417: STR
52418: PUSH
52419: LD_STRING ],
52421: STR
52422: PPUSH
52423: CALL_OW 561
// end ;
52427: GO 52321
52429: POP
52430: POP
// AddToLog ( ]; ) ;
52431: LD_STRING ];
52433: PPUSH
52434: CALL_OW 561
// end ;
52438: LD_VAR 0 2
52442: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52443: LD_INT 0
52445: PPUSH
52446: PPUSH
52447: PPUSH
52448: PPUSH
52449: PPUSH
// if not area or not rate or not max then
52450: LD_VAR 0 1
52454: NOT
52455: PUSH
52456: LD_VAR 0 2
52460: NOT
52461: OR
52462: PUSH
52463: LD_VAR 0 4
52467: NOT
52468: OR
52469: IFFALSE 52473
// exit ;
52471: GO 52662
// while 1 do
52473: LD_INT 1
52475: IFFALSE 52662
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52477: LD_ADDR_VAR 0 9
52481: PUSH
52482: LD_VAR 0 1
52486: PPUSH
52487: LD_INT 1
52489: PPUSH
52490: CALL_OW 287
52494: PUSH
52495: LD_INT 10
52497: MUL
52498: ST_TO_ADDR
// r := rate / 10 ;
52499: LD_ADDR_VAR 0 7
52503: PUSH
52504: LD_VAR 0 2
52508: PUSH
52509: LD_INT 10
52511: DIVREAL
52512: ST_TO_ADDR
// time := 1 1$00 ;
52513: LD_ADDR_VAR 0 8
52517: PUSH
52518: LD_INT 2100
52520: ST_TO_ADDR
// if amount < min then
52521: LD_VAR 0 9
52525: PUSH
52526: LD_VAR 0 3
52530: LESS
52531: IFFALSE 52549
// r := r * 2 else
52533: LD_ADDR_VAR 0 7
52537: PUSH
52538: LD_VAR 0 7
52542: PUSH
52543: LD_INT 2
52545: MUL
52546: ST_TO_ADDR
52547: GO 52575
// if amount > max then
52549: LD_VAR 0 9
52553: PUSH
52554: LD_VAR 0 4
52558: GREATER
52559: IFFALSE 52575
// r := r / 2 ;
52561: LD_ADDR_VAR 0 7
52565: PUSH
52566: LD_VAR 0 7
52570: PUSH
52571: LD_INT 2
52573: DIVREAL
52574: ST_TO_ADDR
// time := time / r ;
52575: LD_ADDR_VAR 0 8
52579: PUSH
52580: LD_VAR 0 8
52584: PUSH
52585: LD_VAR 0 7
52589: DIVREAL
52590: ST_TO_ADDR
// if time < 0 then
52591: LD_VAR 0 8
52595: PUSH
52596: LD_INT 0
52598: LESS
52599: IFFALSE 52616
// time := time * - 1 ;
52601: LD_ADDR_VAR 0 8
52605: PUSH
52606: LD_VAR 0 8
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: MUL
52615: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52616: LD_VAR 0 8
52620: PUSH
52621: LD_INT 35
52623: PPUSH
52624: LD_INT 875
52626: PPUSH
52627: CALL_OW 12
52631: PLUS
52632: PPUSH
52633: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52637: LD_INT 1
52639: PPUSH
52640: LD_INT 5
52642: PPUSH
52643: CALL_OW 12
52647: PPUSH
52648: LD_VAR 0 1
52652: PPUSH
52653: LD_INT 1
52655: PPUSH
52656: CALL_OW 55
// end ;
52660: GO 52473
// end ;
52662: LD_VAR 0 5
52666: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52667: LD_INT 0
52669: PPUSH
52670: PPUSH
52671: PPUSH
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
// if not turrets or not factories then
52677: LD_VAR 0 1
52681: NOT
52682: PUSH
52683: LD_VAR 0 2
52687: NOT
52688: OR
52689: IFFALSE 52693
// exit ;
52691: GO 53000
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52693: LD_ADDR_VAR 0 10
52697: PUSH
52698: LD_INT 5
52700: PUSH
52701: LD_INT 6
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 5
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 24
52735: PUSH
52736: LD_INT 25
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 23
52745: PUSH
52746: LD_INT 27
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 42
52759: PUSH
52760: LD_INT 43
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 44
52769: PUSH
52770: LD_INT 46
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 45
52779: PUSH
52780: LD_INT 47
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// result := [ ] ;
52797: LD_ADDR_VAR 0 3
52801: PUSH
52802: EMPTY
52803: ST_TO_ADDR
// for i in turrets do
52804: LD_ADDR_VAR 0 4
52808: PUSH
52809: LD_VAR 0 1
52813: PUSH
52814: FOR_IN
52815: IFFALSE 52998
// begin nat := GetNation ( i ) ;
52817: LD_ADDR_VAR 0 7
52821: PUSH
52822: LD_VAR 0 4
52826: PPUSH
52827: CALL_OW 248
52831: ST_TO_ADDR
// weapon := 0 ;
52832: LD_ADDR_VAR 0 8
52836: PUSH
52837: LD_INT 0
52839: ST_TO_ADDR
// if not nat then
52840: LD_VAR 0 7
52844: NOT
52845: IFFALSE 52849
// continue ;
52847: GO 52814
// for j in list [ nat ] do
52849: LD_ADDR_VAR 0 5
52853: PUSH
52854: LD_VAR 0 10
52858: PUSH
52859: LD_VAR 0 7
52863: ARRAY
52864: PUSH
52865: FOR_IN
52866: IFFALSE 52907
// if GetBWeapon ( i ) = j [ 1 ] then
52868: LD_VAR 0 4
52872: PPUSH
52873: CALL_OW 269
52877: PUSH
52878: LD_VAR 0 5
52882: PUSH
52883: LD_INT 1
52885: ARRAY
52886: EQUAL
52887: IFFALSE 52905
// begin weapon := j [ 2 ] ;
52889: LD_ADDR_VAR 0 8
52893: PUSH
52894: LD_VAR 0 5
52898: PUSH
52899: LD_INT 2
52901: ARRAY
52902: ST_TO_ADDR
// break ;
52903: GO 52907
// end ;
52905: GO 52865
52907: POP
52908: POP
// if not weapon then
52909: LD_VAR 0 8
52913: NOT
52914: IFFALSE 52918
// continue ;
52916: GO 52814
// for k in factories do
52918: LD_ADDR_VAR 0 6
52922: PUSH
52923: LD_VAR 0 2
52927: PUSH
52928: FOR_IN
52929: IFFALSE 52994
// begin weapons := AvailableWeaponList ( k ) ;
52931: LD_ADDR_VAR 0 9
52935: PUSH
52936: LD_VAR 0 6
52940: PPUSH
52941: CALL_OW 478
52945: ST_TO_ADDR
// if not weapons then
52946: LD_VAR 0 9
52950: NOT
52951: IFFALSE 52955
// continue ;
52953: GO 52928
// if weapon in weapons then
52955: LD_VAR 0 8
52959: PUSH
52960: LD_VAR 0 9
52964: IN
52965: IFFALSE 52992
// begin result := [ i , weapon ] ;
52967: LD_ADDR_VAR 0 3
52971: PUSH
52972: LD_VAR 0 4
52976: PUSH
52977: LD_VAR 0 8
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// exit ;
52986: POP
52987: POP
52988: POP
52989: POP
52990: GO 53000
// end ; end ;
52992: GO 52928
52994: POP
52995: POP
// end ;
52996: GO 52814
52998: POP
52999: POP
// end ;
53000: LD_VAR 0 3
53004: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53005: LD_INT 0
53007: PPUSH
// if not side or side > 8 then
53008: LD_VAR 0 3
53012: NOT
53013: PUSH
53014: LD_VAR 0 3
53018: PUSH
53019: LD_INT 8
53021: GREATER
53022: OR
53023: IFFALSE 53027
// exit ;
53025: GO 53086
// if not range then
53027: LD_VAR 0 4
53031: NOT
53032: IFFALSE 53043
// range := - 12 ;
53034: LD_ADDR_VAR 0 4
53038: PUSH
53039: LD_INT 12
53041: NEG
53042: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53043: LD_VAR 0 1
53047: PPUSH
53048: LD_VAR 0 2
53052: PPUSH
53053: LD_VAR 0 3
53057: PPUSH
53058: LD_VAR 0 4
53062: PPUSH
53063: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53067: LD_VAR 0 1
53071: PPUSH
53072: LD_VAR 0 2
53076: PPUSH
53077: LD_VAR 0 3
53081: PPUSH
53082: CALL_OW 331
// end ;
53086: LD_VAR 0 5
53090: RET
// export function Video ( mode ) ; begin
53091: LD_INT 0
53093: PPUSH
// ingame_video = mode ;
53094: LD_ADDR_OWVAR 52
53098: PUSH
53099: LD_VAR 0 1
53103: ST_TO_ADDR
// interface_hidden = mode ;
53104: LD_ADDR_OWVAR 54
53108: PUSH
53109: LD_VAR 0 1
53113: ST_TO_ADDR
// end ;
53114: LD_VAR 0 2
53118: RET
// export function Join ( array , element ) ; begin
53119: LD_INT 0
53121: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: LD_VAR 0 1
53136: PUSH
53137: LD_INT 1
53139: PLUS
53140: PPUSH
53141: LD_VAR 0 2
53145: PPUSH
53146: CALL_OW 1
53150: ST_TO_ADDR
// end ;
53151: LD_VAR 0 3
53155: RET
// export function JoinUnion ( array , element ) ; begin
53156: LD_INT 0
53158: PPUSH
// result := array union element ;
53159: LD_ADDR_VAR 0 3
53163: PUSH
53164: LD_VAR 0 1
53168: PUSH
53169: LD_VAR 0 2
53173: UNION
53174: ST_TO_ADDR
// end ;
53175: LD_VAR 0 3
53179: RET
// export function GetBehemoths ( side ) ; begin
53180: LD_INT 0
53182: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_INT 22
53190: PUSH
53191: LD_VAR 0 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 31
53202: PUSH
53203: LD_INT 25
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PPUSH
53214: CALL_OW 69
53218: ST_TO_ADDR
// end ;
53219: LD_VAR 0 2
53223: RET
// export function Shuffle ( array ) ; var i , index ; begin
53224: LD_INT 0
53226: PPUSH
53227: PPUSH
53228: PPUSH
// result := [ ] ;
53229: LD_ADDR_VAR 0 2
53233: PUSH
53234: EMPTY
53235: ST_TO_ADDR
// if not array then
53236: LD_VAR 0 1
53240: NOT
53241: IFFALSE 53245
// exit ;
53243: GO 53344
// Randomize ;
53245: CALL_OW 10
// for i = array downto 1 do
53249: LD_ADDR_VAR 0 3
53253: PUSH
53254: DOUBLE
53255: LD_VAR 0 1
53259: INC
53260: ST_TO_ADDR
53261: LD_INT 1
53263: PUSH
53264: FOR_DOWNTO
53265: IFFALSE 53342
// begin index := rand ( 1 , array ) ;
53267: LD_ADDR_VAR 0 4
53271: PUSH
53272: LD_INT 1
53274: PPUSH
53275: LD_VAR 0 1
53279: PPUSH
53280: CALL_OW 12
53284: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53285: LD_ADDR_VAR 0 2
53289: PUSH
53290: LD_VAR 0 2
53294: PPUSH
53295: LD_VAR 0 2
53299: PUSH
53300: LD_INT 1
53302: PLUS
53303: PPUSH
53304: LD_VAR 0 1
53308: PUSH
53309: LD_VAR 0 4
53313: ARRAY
53314: PPUSH
53315: CALL_OW 2
53319: ST_TO_ADDR
// array := Delete ( array , index ) ;
53320: LD_ADDR_VAR 0 1
53324: PUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: LD_VAR 0 4
53334: PPUSH
53335: CALL_OW 3
53339: ST_TO_ADDR
// end ;
53340: GO 53264
53342: POP
53343: POP
// end ;
53344: LD_VAR 0 2
53348: RET
// export function GetBaseMaterials ( base ) ; begin
53349: LD_INT 0
53351: PPUSH
// result := [ 0 , 0 , 0 ] ;
53352: LD_ADDR_VAR 0 2
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// if not base then
53371: LD_VAR 0 1
53375: NOT
53376: IFFALSE 53380
// exit ;
53378: GO 53429
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53380: LD_ADDR_VAR 0 2
53384: PUSH
53385: LD_VAR 0 1
53389: PPUSH
53390: LD_INT 1
53392: PPUSH
53393: CALL_OW 275
53397: PUSH
53398: LD_VAR 0 1
53402: PPUSH
53403: LD_INT 2
53405: PPUSH
53406: CALL_OW 275
53410: PUSH
53411: LD_VAR 0 1
53415: PPUSH
53416: LD_INT 3
53418: PPUSH
53419: CALL_OW 275
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// end ;
53429: LD_VAR 0 2
53433: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53434: LD_INT 0
53436: PPUSH
53437: PPUSH
// result := array ;
53438: LD_ADDR_VAR 0 3
53442: PUSH
53443: LD_VAR 0 1
53447: ST_TO_ADDR
// if size >= result then
53448: LD_VAR 0 2
53452: PUSH
53453: LD_VAR 0 3
53457: GREATEREQUAL
53458: IFFALSE 53462
// exit ;
53460: GO 53512
// if size then
53462: LD_VAR 0 2
53466: IFFALSE 53512
// for i := array downto size do
53468: LD_ADDR_VAR 0 4
53472: PUSH
53473: DOUBLE
53474: LD_VAR 0 1
53478: INC
53479: ST_TO_ADDR
53480: LD_VAR 0 2
53484: PUSH
53485: FOR_DOWNTO
53486: IFFALSE 53510
// result := Delete ( result , result ) ;
53488: LD_ADDR_VAR 0 3
53492: PUSH
53493: LD_VAR 0 3
53497: PPUSH
53498: LD_VAR 0 3
53502: PPUSH
53503: CALL_OW 3
53507: ST_TO_ADDR
53508: GO 53485
53510: POP
53511: POP
// end ;
53512: LD_VAR 0 3
53516: RET
// export function ComExit ( unit ) ; var tmp ; begin
53517: LD_INT 0
53519: PPUSH
53520: PPUSH
// if not IsInUnit ( unit ) then
53521: LD_VAR 0 1
53525: PPUSH
53526: CALL_OW 310
53530: NOT
53531: IFFALSE 53535
// exit ;
53533: GO 53595
// tmp := IsInUnit ( unit ) ;
53535: LD_ADDR_VAR 0 3
53539: PUSH
53540: LD_VAR 0 1
53544: PPUSH
53545: CALL_OW 310
53549: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53550: LD_VAR 0 3
53554: PPUSH
53555: CALL_OW 247
53559: PUSH
53560: LD_INT 2
53562: EQUAL
53563: IFFALSE 53576
// ComExitVehicle ( unit ) else
53565: LD_VAR 0 1
53569: PPUSH
53570: CALL_OW 121
53574: GO 53585
// ComExitBuilding ( unit ) ;
53576: LD_VAR 0 1
53580: PPUSH
53581: CALL_OW 122
// result := tmp ;
53585: LD_ADDR_VAR 0 2
53589: PUSH
53590: LD_VAR 0 3
53594: ST_TO_ADDR
// end ;
53595: LD_VAR 0 2
53599: RET
// export function ComExitAll ( units ) ; var i ; begin
53600: LD_INT 0
53602: PPUSH
53603: PPUSH
// if not units then
53604: LD_VAR 0 1
53608: NOT
53609: IFFALSE 53613
// exit ;
53611: GO 53639
// for i in units do
53613: LD_ADDR_VAR 0 3
53617: PUSH
53618: LD_VAR 0 1
53622: PUSH
53623: FOR_IN
53624: IFFALSE 53637
// ComExit ( i ) ;
53626: LD_VAR 0 3
53630: PPUSH
53631: CALL 53517 0 1
53635: GO 53623
53637: POP
53638: POP
// end ;
53639: LD_VAR 0 2
53643: RET
// export function ResetHc ; begin
53644: LD_INT 0
53646: PPUSH
// InitHc ;
53647: CALL_OW 19
// hc_importance := 0 ;
53651: LD_ADDR_OWVAR 32
53655: PUSH
53656: LD_INT 0
53658: ST_TO_ADDR
// end ;
53659: LD_VAR 0 1
53663: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53664: LD_INT 0
53666: PPUSH
53667: PPUSH
53668: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53669: LD_ADDR_VAR 0 6
53673: PUSH
53674: LD_VAR 0 1
53678: PUSH
53679: LD_VAR 0 3
53683: PLUS
53684: PUSH
53685: LD_INT 2
53687: DIV
53688: ST_TO_ADDR
// if _x < 0 then
53689: LD_VAR 0 6
53693: PUSH
53694: LD_INT 0
53696: LESS
53697: IFFALSE 53714
// _x := _x * - 1 ;
53699: LD_ADDR_VAR 0 6
53703: PUSH
53704: LD_VAR 0 6
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: MUL
53713: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53714: LD_ADDR_VAR 0 7
53718: PUSH
53719: LD_VAR 0 2
53723: PUSH
53724: LD_VAR 0 4
53728: PLUS
53729: PUSH
53730: LD_INT 2
53732: DIV
53733: ST_TO_ADDR
// if _y < 0 then
53734: LD_VAR 0 7
53738: PUSH
53739: LD_INT 0
53741: LESS
53742: IFFALSE 53759
// _y := _y * - 1 ;
53744: LD_ADDR_VAR 0 7
53748: PUSH
53749: LD_VAR 0 7
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: MUL
53758: ST_TO_ADDR
// result := [ _x , _y ] ;
53759: LD_ADDR_VAR 0 5
53763: PUSH
53764: LD_VAR 0 6
53768: PUSH
53769: LD_VAR 0 7
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// end ;
53778: LD_VAR 0 5
53782: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53783: LD_INT 0
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
// task := GetTaskList ( unit ) ;
53789: LD_ADDR_VAR 0 7
53793: PUSH
53794: LD_VAR 0 1
53798: PPUSH
53799: CALL_OW 437
53803: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53804: LD_VAR 0 7
53808: NOT
53809: PUSH
53810: LD_VAR 0 1
53814: PPUSH
53815: LD_VAR 0 2
53819: PPUSH
53820: CALL_OW 308
53824: NOT
53825: AND
53826: IFFALSE 53830
// exit ;
53828: GO 53948
// if IsInArea ( unit , area ) then
53830: LD_VAR 0 1
53834: PPUSH
53835: LD_VAR 0 2
53839: PPUSH
53840: CALL_OW 308
53844: IFFALSE 53862
// begin ComMoveToArea ( unit , goAway ) ;
53846: LD_VAR 0 1
53850: PPUSH
53851: LD_VAR 0 3
53855: PPUSH
53856: CALL_OW 113
// exit ;
53860: GO 53948
// end ; if task [ 1 ] [ 1 ] <> M then
53862: LD_VAR 0 7
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: PUSH
53871: LD_INT 1
53873: ARRAY
53874: PUSH
53875: LD_STRING M
53877: NONEQUAL
53878: IFFALSE 53882
// exit ;
53880: GO 53948
// x := task [ 1 ] [ 2 ] ;
53882: LD_ADDR_VAR 0 5
53886: PUSH
53887: LD_VAR 0 7
53891: PUSH
53892: LD_INT 1
53894: ARRAY
53895: PUSH
53896: LD_INT 2
53898: ARRAY
53899: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53900: LD_ADDR_VAR 0 6
53904: PUSH
53905: LD_VAR 0 7
53909: PUSH
53910: LD_INT 1
53912: ARRAY
53913: PUSH
53914: LD_INT 3
53916: ARRAY
53917: ST_TO_ADDR
// if InArea ( x , y , area ) then
53918: LD_VAR 0 5
53922: PPUSH
53923: LD_VAR 0 6
53927: PPUSH
53928: LD_VAR 0 2
53932: PPUSH
53933: CALL_OW 309
53937: IFFALSE 53948
// ComStop ( unit ) ;
53939: LD_VAR 0 1
53943: PPUSH
53944: CALL_OW 141
// end ;
53948: LD_VAR 0 4
53952: RET
// export function Abs ( value ) ; begin
53953: LD_INT 0
53955: PPUSH
// result := value ;
53956: LD_ADDR_VAR 0 2
53960: PUSH
53961: LD_VAR 0 1
53965: ST_TO_ADDR
// if value < 0 then
53966: LD_VAR 0 1
53970: PUSH
53971: LD_INT 0
53973: LESS
53974: IFFALSE 53991
// result := value * - 1 ;
53976: LD_ADDR_VAR 0 2
53980: PUSH
53981: LD_VAR 0 1
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: MUL
53990: ST_TO_ADDR
// end ;
53991: LD_VAR 0 2
53995: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53996: LD_INT 0
53998: PPUSH
53999: PPUSH
54000: PPUSH
54001: PPUSH
54002: PPUSH
54003: PPUSH
54004: PPUSH
54005: PPUSH
// if not unit or not building then
54006: LD_VAR 0 1
54010: NOT
54011: PUSH
54012: LD_VAR 0 2
54016: NOT
54017: OR
54018: IFFALSE 54022
// exit ;
54020: GO 54248
// x := GetX ( building ) ;
54022: LD_ADDR_VAR 0 4
54026: PUSH
54027: LD_VAR 0 2
54031: PPUSH
54032: CALL_OW 250
54036: ST_TO_ADDR
// y := GetY ( building ) ;
54037: LD_ADDR_VAR 0 6
54041: PUSH
54042: LD_VAR 0 2
54046: PPUSH
54047: CALL_OW 251
54051: ST_TO_ADDR
// d := GetDir ( building ) ;
54052: LD_ADDR_VAR 0 8
54056: PUSH
54057: LD_VAR 0 2
54061: PPUSH
54062: CALL_OW 254
54066: ST_TO_ADDR
// r := 4 ;
54067: LD_ADDR_VAR 0 9
54071: PUSH
54072: LD_INT 4
54074: ST_TO_ADDR
// for i := 1 to 5 do
54075: LD_ADDR_VAR 0 10
54079: PUSH
54080: DOUBLE
54081: LD_INT 1
54083: DEC
54084: ST_TO_ADDR
54085: LD_INT 5
54087: PUSH
54088: FOR_TO
54089: IFFALSE 54246
// begin _x := ShiftX ( x , d , r + i ) ;
54091: LD_ADDR_VAR 0 5
54095: PUSH
54096: LD_VAR 0 4
54100: PPUSH
54101: LD_VAR 0 8
54105: PPUSH
54106: LD_VAR 0 9
54110: PUSH
54111: LD_VAR 0 10
54115: PLUS
54116: PPUSH
54117: CALL_OW 272
54121: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54122: LD_ADDR_VAR 0 7
54126: PUSH
54127: LD_VAR 0 6
54131: PPUSH
54132: LD_VAR 0 8
54136: PPUSH
54137: LD_VAR 0 9
54141: PUSH
54142: LD_VAR 0 10
54146: PLUS
54147: PPUSH
54148: CALL_OW 273
54152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54153: LD_VAR 0 5
54157: PPUSH
54158: LD_VAR 0 7
54162: PPUSH
54163: CALL_OW 488
54167: PUSH
54168: LD_VAR 0 5
54172: PPUSH
54173: LD_VAR 0 7
54177: PPUSH
54178: CALL_OW 428
54182: PPUSH
54183: CALL_OW 247
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: IN
54198: NOT
54199: AND
54200: IFFALSE 54244
// begin ComMoveXY ( unit , _x , _y ) ;
54202: LD_VAR 0 1
54206: PPUSH
54207: LD_VAR 0 5
54211: PPUSH
54212: LD_VAR 0 7
54216: PPUSH
54217: CALL_OW 111
// result := [ _x , _y ] ;
54221: LD_ADDR_VAR 0 3
54225: PUSH
54226: LD_VAR 0 5
54230: PUSH
54231: LD_VAR 0 7
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// exit ;
54240: POP
54241: POP
54242: GO 54248
// end ; end ;
54244: GO 54088
54246: POP
54247: POP
// end ;
54248: LD_VAR 0 3
54252: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54253: LD_INT 0
54255: PPUSH
54256: PPUSH
54257: PPUSH
// result := 0 ;
54258: LD_ADDR_VAR 0 3
54262: PUSH
54263: LD_INT 0
54265: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54266: LD_VAR 0 1
54270: PUSH
54271: LD_INT 0
54273: LESS
54274: PUSH
54275: LD_VAR 0 1
54279: PUSH
54280: LD_INT 8
54282: GREATER
54283: OR
54284: PUSH
54285: LD_VAR 0 2
54289: PUSH
54290: LD_INT 0
54292: LESS
54293: OR
54294: PUSH
54295: LD_VAR 0 2
54299: PUSH
54300: LD_INT 8
54302: GREATER
54303: OR
54304: IFFALSE 54308
// exit ;
54306: GO 54383
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54308: LD_ADDR_VAR 0 4
54312: PUSH
54313: LD_INT 22
54315: PUSH
54316: LD_VAR 0 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PPUSH
54325: CALL_OW 69
54329: PUSH
54330: FOR_IN
54331: IFFALSE 54381
// begin un := UnitShoot ( i ) ;
54333: LD_ADDR_VAR 0 5
54337: PUSH
54338: LD_VAR 0 4
54342: PPUSH
54343: CALL_OW 504
54347: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54348: LD_VAR 0 5
54352: PPUSH
54353: CALL_OW 255
54357: PUSH
54358: LD_VAR 0 1
54362: EQUAL
54363: IFFALSE 54379
// begin result := un ;
54365: LD_ADDR_VAR 0 3
54369: PUSH
54370: LD_VAR 0 5
54374: ST_TO_ADDR
// exit ;
54375: POP
54376: POP
54377: GO 54383
// end ; end ;
54379: GO 54330
54381: POP
54382: POP
// end ;
54383: LD_VAR 0 3
54387: RET
// export function GetCargoBay ( units ) ; begin
54388: LD_INT 0
54390: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54391: LD_ADDR_VAR 0 2
54395: PUSH
54396: LD_VAR 0 1
54400: PPUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 34
54406: PUSH
54407: LD_INT 12
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 34
54416: PUSH
54417: LD_INT 51
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 34
54426: PUSH
54427: LD_INT 32
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 34
54436: PUSH
54437: LD_INT 89
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: PPUSH
54451: CALL_OW 72
54455: ST_TO_ADDR
// end ;
54456: LD_VAR 0 2
54460: RET
// export function Negate ( value ) ; begin
54461: LD_INT 0
54463: PPUSH
// result := not value ;
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_VAR 0 1
54473: NOT
54474: ST_TO_ADDR
// end ;
54475: LD_VAR 0 2
54479: RET
// export function Inc ( value ) ; begin
54480: LD_INT 0
54482: PPUSH
// result := value + 1 ;
54483: LD_ADDR_VAR 0 2
54487: PUSH
54488: LD_VAR 0 1
54492: PUSH
54493: LD_INT 1
54495: PLUS
54496: ST_TO_ADDR
// end ;
54497: LD_VAR 0 2
54501: RET
// export function Dec ( value ) ; begin
54502: LD_INT 0
54504: PPUSH
// result := value - 1 ;
54505: LD_ADDR_VAR 0 2
54509: PUSH
54510: LD_VAR 0 1
54514: PUSH
54515: LD_INT 1
54517: MINUS
54518: ST_TO_ADDR
// end ;
54519: LD_VAR 0 2
54523: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54524: LD_INT 0
54526: PPUSH
54527: PPUSH
54528: PPUSH
54529: PPUSH
54530: PPUSH
54531: PPUSH
54532: PPUSH
54533: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54534: LD_VAR 0 1
54538: PPUSH
54539: LD_VAR 0 2
54543: PPUSH
54544: CALL_OW 488
54548: NOT
54549: PUSH
54550: LD_VAR 0 3
54554: PPUSH
54555: LD_VAR 0 4
54559: PPUSH
54560: CALL_OW 488
54564: NOT
54565: OR
54566: IFFALSE 54579
// begin result := - 1 ;
54568: LD_ADDR_VAR 0 5
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: ST_TO_ADDR
// exit ;
54577: GO 54814
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54579: LD_ADDR_VAR 0 12
54583: PUSH
54584: LD_VAR 0 1
54588: PPUSH
54589: LD_VAR 0 2
54593: PPUSH
54594: LD_VAR 0 3
54598: PPUSH
54599: LD_VAR 0 4
54603: PPUSH
54604: CALL 53664 0 4
54608: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54609: LD_ADDR_VAR 0 11
54613: PUSH
54614: LD_VAR 0 1
54618: PPUSH
54619: LD_VAR 0 2
54623: PPUSH
54624: LD_VAR 0 12
54628: PUSH
54629: LD_INT 1
54631: ARRAY
54632: PPUSH
54633: LD_VAR 0 12
54637: PUSH
54638: LD_INT 2
54640: ARRAY
54641: PPUSH
54642: CALL_OW 298
54646: ST_TO_ADDR
// distance := 9999 ;
54647: LD_ADDR_VAR 0 10
54651: PUSH
54652: LD_INT 9999
54654: ST_TO_ADDR
// for i := 0 to 5 do
54655: LD_ADDR_VAR 0 6
54659: PUSH
54660: DOUBLE
54661: LD_INT 0
54663: DEC
54664: ST_TO_ADDR
54665: LD_INT 5
54667: PUSH
54668: FOR_TO
54669: IFFALSE 54812
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54671: LD_ADDR_VAR 0 7
54675: PUSH
54676: LD_VAR 0 1
54680: PPUSH
54681: LD_VAR 0 6
54685: PPUSH
54686: LD_VAR 0 11
54690: PPUSH
54691: CALL_OW 272
54695: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54696: LD_ADDR_VAR 0 8
54700: PUSH
54701: LD_VAR 0 2
54705: PPUSH
54706: LD_VAR 0 6
54710: PPUSH
54711: LD_VAR 0 11
54715: PPUSH
54716: CALL_OW 273
54720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54721: LD_VAR 0 7
54725: PPUSH
54726: LD_VAR 0 8
54730: PPUSH
54731: CALL_OW 488
54735: NOT
54736: IFFALSE 54740
// continue ;
54738: GO 54668
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54740: LD_ADDR_VAR 0 9
54744: PUSH
54745: LD_VAR 0 12
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PPUSH
54754: LD_VAR 0 12
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: LD_VAR 0 7
54767: PPUSH
54768: LD_VAR 0 8
54772: PPUSH
54773: CALL_OW 298
54777: ST_TO_ADDR
// if tmp < distance then
54778: LD_VAR 0 9
54782: PUSH
54783: LD_VAR 0 10
54787: LESS
54788: IFFALSE 54810
// begin result := i ;
54790: LD_ADDR_VAR 0 5
54794: PUSH
54795: LD_VAR 0 6
54799: ST_TO_ADDR
// distance := tmp ;
54800: LD_ADDR_VAR 0 10
54804: PUSH
54805: LD_VAR 0 9
54809: ST_TO_ADDR
// end ; end ;
54810: GO 54668
54812: POP
54813: POP
// end ;
54814: LD_VAR 0 5
54818: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54819: LD_INT 0
54821: PPUSH
54822: PPUSH
// if not driver or not IsInUnit ( driver ) then
54823: LD_VAR 0 1
54827: NOT
54828: PUSH
54829: LD_VAR 0 1
54833: PPUSH
54834: CALL_OW 310
54838: NOT
54839: OR
54840: IFFALSE 54844
// exit ;
54842: GO 54934
// vehicle := IsInUnit ( driver ) ;
54844: LD_ADDR_VAR 0 3
54848: PUSH
54849: LD_VAR 0 1
54853: PPUSH
54854: CALL_OW 310
54858: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54859: LD_VAR 0 1
54863: PPUSH
54864: LD_STRING \
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: PUSH
54894: LD_STRING E
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_VAR 0 3
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PPUSH
54930: CALL_OW 446
// end ;
54934: LD_VAR 0 2
54938: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54939: LD_INT 0
54941: PPUSH
54942: PPUSH
// if not driver or not IsInUnit ( driver ) then
54943: LD_VAR 0 1
54947: NOT
54948: PUSH
54949: LD_VAR 0 1
54953: PPUSH
54954: CALL_OW 310
54958: NOT
54959: OR
54960: IFFALSE 54964
// exit ;
54962: GO 55054
// vehicle := IsInUnit ( driver ) ;
54964: LD_ADDR_VAR 0 3
54968: PUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: CALL_OW 310
54978: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54979: LD_VAR 0 1
54983: PPUSH
54984: LD_STRING \
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: PUSH
55014: LD_STRING E
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_VAR 0 3
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PPUSH
55050: CALL_OW 447
// end ;
55054: LD_VAR 0 2
55058: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55059: LD_INT 0
55061: PPUSH
55062: PPUSH
55063: PPUSH
// tmp := [ ] ;
55064: LD_ADDR_VAR 0 5
55068: PUSH
55069: EMPTY
55070: ST_TO_ADDR
// for i in units do
55071: LD_ADDR_VAR 0 4
55075: PUSH
55076: LD_VAR 0 1
55080: PUSH
55081: FOR_IN
55082: IFFALSE 55120
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55084: LD_ADDR_VAR 0 5
55088: PUSH
55089: LD_VAR 0 5
55093: PPUSH
55094: LD_VAR 0 5
55098: PUSH
55099: LD_INT 1
55101: PLUS
55102: PPUSH
55103: LD_VAR 0 4
55107: PPUSH
55108: CALL_OW 256
55112: PPUSH
55113: CALL_OW 2
55117: ST_TO_ADDR
55118: GO 55081
55120: POP
55121: POP
// if not tmp then
55122: LD_VAR 0 5
55126: NOT
55127: IFFALSE 55131
// exit ;
55129: GO 55179
// if asc then
55131: LD_VAR 0 2
55135: IFFALSE 55159
// result := SortListByListAsc ( units , tmp ) else
55137: LD_ADDR_VAR 0 3
55141: PUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_VAR 0 5
55151: PPUSH
55152: CALL_OW 76
55156: ST_TO_ADDR
55157: GO 55179
// result := SortListByListDesc ( units , tmp ) ;
55159: LD_ADDR_VAR 0 3
55163: PUSH
55164: LD_VAR 0 1
55168: PPUSH
55169: LD_VAR 0 5
55173: PPUSH
55174: CALL_OW 77
55178: ST_TO_ADDR
// end ;
55179: LD_VAR 0 3
55183: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55184: LD_INT 0
55186: PPUSH
55187: PPUSH
// task := GetTaskList ( mech ) ;
55188: LD_ADDR_VAR 0 4
55192: PUSH
55193: LD_VAR 0 1
55197: PPUSH
55198: CALL_OW 437
55202: ST_TO_ADDR
// if not task then
55203: LD_VAR 0 4
55207: NOT
55208: IFFALSE 55212
// exit ;
55210: GO 55254
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55212: LD_ADDR_VAR 0 3
55216: PUSH
55217: LD_VAR 0 4
55221: PUSH
55222: LD_INT 1
55224: ARRAY
55225: PUSH
55226: LD_INT 1
55228: ARRAY
55229: PUSH
55230: LD_STRING r
55232: EQUAL
55233: PUSH
55234: LD_VAR 0 4
55238: PUSH
55239: LD_INT 1
55241: ARRAY
55242: PUSH
55243: LD_INT 4
55245: ARRAY
55246: PUSH
55247: LD_VAR 0 2
55251: EQUAL
55252: AND
55253: ST_TO_ADDR
// end ;
55254: LD_VAR 0 3
55258: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55259: LD_INT 0
55261: PPUSH
// SetDir ( unit , d ) ;
55262: LD_VAR 0 1
55266: PPUSH
55267: LD_VAR 0 4
55271: PPUSH
55272: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55276: LD_VAR 0 1
55280: PPUSH
55281: LD_VAR 0 2
55285: PPUSH
55286: LD_VAR 0 3
55290: PPUSH
55291: LD_VAR 0 5
55295: PPUSH
55296: CALL_OW 48
// end ;
55300: LD_VAR 0 6
55304: RET
// export function ToNaturalNumber ( number ) ; begin
55305: LD_INT 0
55307: PPUSH
// result := number div 1 ;
55308: LD_ADDR_VAR 0 2
55312: PUSH
55313: LD_VAR 0 1
55317: PUSH
55318: LD_INT 1
55320: DIV
55321: ST_TO_ADDR
// if number < 0 then
55322: LD_VAR 0 1
55326: PUSH
55327: LD_INT 0
55329: LESS
55330: IFFALSE 55340
// result := 0 ;
55332: LD_ADDR_VAR 0 2
55336: PUSH
55337: LD_INT 0
55339: ST_TO_ADDR
// end ;
55340: LD_VAR 0 2
55344: RET
// export function SortByClass ( units , class ) ; var un ; begin
55345: LD_INT 0
55347: PPUSH
55348: PPUSH
// if not units or not class then
55349: LD_VAR 0 1
55353: NOT
55354: PUSH
55355: LD_VAR 0 2
55359: NOT
55360: OR
55361: IFFALSE 55365
// exit ;
55363: GO 55460
// result := [ ] ;
55365: LD_ADDR_VAR 0 3
55369: PUSH
55370: EMPTY
55371: ST_TO_ADDR
// for un in units do
55372: LD_ADDR_VAR 0 4
55376: PUSH
55377: LD_VAR 0 1
55381: PUSH
55382: FOR_IN
55383: IFFALSE 55458
// if GetClass ( un ) = class then
55385: LD_VAR 0 4
55389: PPUSH
55390: CALL_OW 257
55394: PUSH
55395: LD_VAR 0 2
55399: EQUAL
55400: IFFALSE 55427
// result := Insert ( result , 1 , un ) else
55402: LD_ADDR_VAR 0 3
55406: PUSH
55407: LD_VAR 0 3
55411: PPUSH
55412: LD_INT 1
55414: PPUSH
55415: LD_VAR 0 4
55419: PPUSH
55420: CALL_OW 2
55424: ST_TO_ADDR
55425: GO 55456
// result := Replace ( result , result + 1 , un ) ;
55427: LD_ADDR_VAR 0 3
55431: PUSH
55432: LD_VAR 0 3
55436: PPUSH
55437: LD_VAR 0 3
55441: PUSH
55442: LD_INT 1
55444: PLUS
55445: PPUSH
55446: LD_VAR 0 4
55450: PPUSH
55451: CALL_OW 1
55455: ST_TO_ADDR
55456: GO 55382
55458: POP
55459: POP
// end ;
55460: LD_VAR 0 3
55464: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55465: LD_INT 0
55467: PPUSH
55468: PPUSH
55469: PPUSH
55470: PPUSH
55471: PPUSH
55472: PPUSH
55473: PPUSH
// result := [ ] ;
55474: LD_ADDR_VAR 0 4
55478: PUSH
55479: EMPTY
55480: ST_TO_ADDR
// if x - r < 0 then
55481: LD_VAR 0 1
55485: PUSH
55486: LD_VAR 0 3
55490: MINUS
55491: PUSH
55492: LD_INT 0
55494: LESS
55495: IFFALSE 55507
// min_x := 0 else
55497: LD_ADDR_VAR 0 8
55501: PUSH
55502: LD_INT 0
55504: ST_TO_ADDR
55505: GO 55523
// min_x := x - r ;
55507: LD_ADDR_VAR 0 8
55511: PUSH
55512: LD_VAR 0 1
55516: PUSH
55517: LD_VAR 0 3
55521: MINUS
55522: ST_TO_ADDR
// if y - r < 0 then
55523: LD_VAR 0 2
55527: PUSH
55528: LD_VAR 0 3
55532: MINUS
55533: PUSH
55534: LD_INT 0
55536: LESS
55537: IFFALSE 55549
// min_y := 0 else
55539: LD_ADDR_VAR 0 7
55543: PUSH
55544: LD_INT 0
55546: ST_TO_ADDR
55547: GO 55565
// min_y := y - r ;
55549: LD_ADDR_VAR 0 7
55553: PUSH
55554: LD_VAR 0 2
55558: PUSH
55559: LD_VAR 0 3
55563: MINUS
55564: ST_TO_ADDR
// max_x := x + r ;
55565: LD_ADDR_VAR 0 9
55569: PUSH
55570: LD_VAR 0 1
55574: PUSH
55575: LD_VAR 0 3
55579: PLUS
55580: ST_TO_ADDR
// max_y := y + r ;
55581: LD_ADDR_VAR 0 10
55585: PUSH
55586: LD_VAR 0 2
55590: PUSH
55591: LD_VAR 0 3
55595: PLUS
55596: ST_TO_ADDR
// for _x = min_x to max_x do
55597: LD_ADDR_VAR 0 5
55601: PUSH
55602: DOUBLE
55603: LD_VAR 0 8
55607: DEC
55608: ST_TO_ADDR
55609: LD_VAR 0 9
55613: PUSH
55614: FOR_TO
55615: IFFALSE 55716
// for _y = min_y to max_y do
55617: LD_ADDR_VAR 0 6
55621: PUSH
55622: DOUBLE
55623: LD_VAR 0 7
55627: DEC
55628: ST_TO_ADDR
55629: LD_VAR 0 10
55633: PUSH
55634: FOR_TO
55635: IFFALSE 55712
// begin if not ValidHex ( _x , _y ) then
55637: LD_VAR 0 5
55641: PPUSH
55642: LD_VAR 0 6
55646: PPUSH
55647: CALL_OW 488
55651: NOT
55652: IFFALSE 55656
// continue ;
55654: GO 55634
// if GetResourceTypeXY ( _x , _y ) then
55656: LD_VAR 0 5
55660: PPUSH
55661: LD_VAR 0 6
55665: PPUSH
55666: CALL_OW 283
55670: IFFALSE 55710
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55672: LD_ADDR_VAR 0 4
55676: PUSH
55677: LD_VAR 0 4
55681: PPUSH
55682: LD_VAR 0 4
55686: PUSH
55687: LD_INT 1
55689: PLUS
55690: PPUSH
55691: LD_VAR 0 5
55695: PUSH
55696: LD_VAR 0 6
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PPUSH
55705: CALL_OW 1
55709: ST_TO_ADDR
// end ;
55710: GO 55634
55712: POP
55713: POP
55714: GO 55614
55716: POP
55717: POP
// end ;
55718: LD_VAR 0 4
55722: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55723: LD_INT 0
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
// if not units then
55733: LD_VAR 0 1
55737: NOT
55738: IFFALSE 55742
// exit ;
55740: GO 56266
// result := UnitFilter ( units , [ f_ok ] ) ;
55742: LD_ADDR_VAR 0 3
55746: PUSH
55747: LD_VAR 0 1
55751: PPUSH
55752: LD_INT 50
55754: PUSH
55755: EMPTY
55756: LIST
55757: PPUSH
55758: CALL_OW 72
55762: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55763: LD_ADDR_VAR 0 8
55767: PUSH
55768: LD_VAR 0 1
55772: PUSH
55773: LD_INT 1
55775: ARRAY
55776: PPUSH
55777: CALL_OW 255
55781: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55782: LD_ADDR_VAR 0 10
55786: PUSH
55787: LD_INT 29
55789: PUSH
55790: LD_INT 91
55792: PUSH
55793: LD_INT 49
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// if not result then
55801: LD_VAR 0 3
55805: NOT
55806: IFFALSE 55810
// exit ;
55808: GO 56266
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55810: LD_ADDR_VAR 0 5
55814: PUSH
55815: LD_INT 81
55817: PUSH
55818: LD_VAR 0 8
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PPUSH
55827: CALL_OW 69
55831: ST_TO_ADDR
// for i in result do
55832: LD_ADDR_VAR 0 4
55836: PUSH
55837: LD_VAR 0 3
55841: PUSH
55842: FOR_IN
55843: IFFALSE 56264
// begin tag := GetTag ( i ) + 1 ;
55845: LD_ADDR_VAR 0 9
55849: PUSH
55850: LD_VAR 0 4
55854: PPUSH
55855: CALL_OW 110
55859: PUSH
55860: LD_INT 1
55862: PLUS
55863: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55864: LD_ADDR_VAR 0 7
55868: PUSH
55869: LD_VAR 0 4
55873: PPUSH
55874: CALL_OW 250
55878: PPUSH
55879: LD_VAR 0 4
55883: PPUSH
55884: CALL_OW 251
55888: PPUSH
55889: LD_INT 6
55891: PPUSH
55892: CALL 55465 0 3
55896: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55897: LD_VAR 0 4
55901: PPUSH
55902: CALL_OW 247
55906: PUSH
55907: LD_INT 2
55909: EQUAL
55910: PUSH
55911: LD_VAR 0 7
55915: AND
55916: PUSH
55917: LD_VAR 0 4
55921: PPUSH
55922: CALL_OW 264
55926: PUSH
55927: LD_VAR 0 10
55931: IN
55932: NOT
55933: AND
55934: IFFALSE 55973
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55936: LD_VAR 0 4
55940: PPUSH
55941: LD_VAR 0 7
55945: PUSH
55946: LD_INT 1
55948: ARRAY
55949: PUSH
55950: LD_INT 1
55952: ARRAY
55953: PPUSH
55954: LD_VAR 0 7
55958: PUSH
55959: LD_INT 1
55961: ARRAY
55962: PUSH
55963: LD_INT 2
55965: ARRAY
55966: PPUSH
55967: CALL_OW 116
55971: GO 56262
// if path > tag then
55973: LD_VAR 0 2
55977: PUSH
55978: LD_VAR 0 9
55982: GREATER
55983: IFFALSE 56191
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55985: LD_ADDR_VAR 0 6
55989: PUSH
55990: LD_VAR 0 5
55994: PPUSH
55995: LD_INT 91
55997: PUSH
55998: LD_VAR 0 4
56002: PUSH
56003: LD_INT 8
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: LIST
56010: PPUSH
56011: CALL_OW 72
56015: ST_TO_ADDR
// if nearEnemy then
56016: LD_VAR 0 6
56020: IFFALSE 56089
// begin if GetWeapon ( i ) = ru_time_lapser then
56022: LD_VAR 0 4
56026: PPUSH
56027: CALL_OW 264
56031: PUSH
56032: LD_INT 49
56034: EQUAL
56035: IFFALSE 56063
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56037: LD_VAR 0 4
56041: PPUSH
56042: LD_VAR 0 6
56046: PPUSH
56047: LD_VAR 0 4
56051: PPUSH
56052: CALL_OW 74
56056: PPUSH
56057: CALL_OW 112
56061: GO 56087
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56063: LD_VAR 0 4
56067: PPUSH
56068: LD_VAR 0 6
56072: PPUSH
56073: LD_VAR 0 4
56077: PPUSH
56078: CALL_OW 74
56082: PPUSH
56083: CALL_OW 115
// end else
56087: GO 56189
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56089: LD_VAR 0 4
56093: PPUSH
56094: LD_VAR 0 2
56098: PUSH
56099: LD_VAR 0 9
56103: ARRAY
56104: PUSH
56105: LD_INT 1
56107: ARRAY
56108: PPUSH
56109: LD_VAR 0 2
56113: PUSH
56114: LD_VAR 0 9
56118: ARRAY
56119: PUSH
56120: LD_INT 2
56122: ARRAY
56123: PPUSH
56124: CALL_OW 297
56128: PUSH
56129: LD_INT 6
56131: GREATER
56132: IFFALSE 56175
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56134: LD_VAR 0 4
56138: PPUSH
56139: LD_VAR 0 2
56143: PUSH
56144: LD_VAR 0 9
56148: ARRAY
56149: PUSH
56150: LD_INT 1
56152: ARRAY
56153: PPUSH
56154: LD_VAR 0 2
56158: PUSH
56159: LD_VAR 0 9
56163: ARRAY
56164: PUSH
56165: LD_INT 2
56167: ARRAY
56168: PPUSH
56169: CALL_OW 114
56173: GO 56189
// SetTag ( i , tag ) ;
56175: LD_VAR 0 4
56179: PPUSH
56180: LD_VAR 0 9
56184: PPUSH
56185: CALL_OW 109
// end else
56189: GO 56262
// if enemy then
56191: LD_VAR 0 5
56195: IFFALSE 56262
// begin if GetWeapon ( i ) = ru_time_lapser then
56197: LD_VAR 0 4
56201: PPUSH
56202: CALL_OW 264
56206: PUSH
56207: LD_INT 49
56209: EQUAL
56210: IFFALSE 56238
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56212: LD_VAR 0 4
56216: PPUSH
56217: LD_VAR 0 5
56221: PPUSH
56222: LD_VAR 0 4
56226: PPUSH
56227: CALL_OW 74
56231: PPUSH
56232: CALL_OW 112
56236: GO 56262
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56238: LD_VAR 0 4
56242: PPUSH
56243: LD_VAR 0 5
56247: PPUSH
56248: LD_VAR 0 4
56252: PPUSH
56253: CALL_OW 74
56257: PPUSH
56258: CALL_OW 115
// end ; end ;
56262: GO 55842
56264: POP
56265: POP
// end ;
56266: LD_VAR 0 3
56270: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56271: LD_INT 0
56273: PPUSH
56274: PPUSH
56275: PPUSH
// if not unit or IsInUnit ( unit ) then
56276: LD_VAR 0 1
56280: NOT
56281: PUSH
56282: LD_VAR 0 1
56286: PPUSH
56287: CALL_OW 310
56291: OR
56292: IFFALSE 56296
// exit ;
56294: GO 56387
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56296: LD_ADDR_VAR 0 4
56300: PUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: CALL_OW 250
56310: PPUSH
56311: LD_VAR 0 2
56315: PPUSH
56316: LD_INT 1
56318: PPUSH
56319: CALL_OW 272
56323: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56324: LD_ADDR_VAR 0 5
56328: PUSH
56329: LD_VAR 0 1
56333: PPUSH
56334: CALL_OW 251
56338: PPUSH
56339: LD_VAR 0 2
56343: PPUSH
56344: LD_INT 1
56346: PPUSH
56347: CALL_OW 273
56351: ST_TO_ADDR
// if ValidHex ( x , y ) then
56352: LD_VAR 0 4
56356: PPUSH
56357: LD_VAR 0 5
56361: PPUSH
56362: CALL_OW 488
56366: IFFALSE 56387
// ComTurnXY ( unit , x , y ) ;
56368: LD_VAR 0 1
56372: PPUSH
56373: LD_VAR 0 4
56377: PPUSH
56378: LD_VAR 0 5
56382: PPUSH
56383: CALL_OW 118
// end ;
56387: LD_VAR 0 3
56391: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56392: LD_INT 0
56394: PPUSH
56395: PPUSH
// result := false ;
56396: LD_ADDR_VAR 0 3
56400: PUSH
56401: LD_INT 0
56403: ST_TO_ADDR
// if not units then
56404: LD_VAR 0 2
56408: NOT
56409: IFFALSE 56413
// exit ;
56411: GO 56458
// for i in units do
56413: LD_ADDR_VAR 0 4
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: FOR_IN
56424: IFFALSE 56456
// if See ( side , i ) then
56426: LD_VAR 0 1
56430: PPUSH
56431: LD_VAR 0 4
56435: PPUSH
56436: CALL_OW 292
56440: IFFALSE 56454
// begin result := true ;
56442: LD_ADDR_VAR 0 3
56446: PUSH
56447: LD_INT 1
56449: ST_TO_ADDR
// exit ;
56450: POP
56451: POP
56452: GO 56458
// end ;
56454: GO 56423
56456: POP
56457: POP
// end ;
56458: LD_VAR 0 3
56462: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56463: LD_INT 0
56465: PPUSH
56466: PPUSH
56467: PPUSH
56468: PPUSH
// if not unit or not points then
56469: LD_VAR 0 1
56473: NOT
56474: PUSH
56475: LD_VAR 0 2
56479: NOT
56480: OR
56481: IFFALSE 56485
// exit ;
56483: GO 56575
// dist := 99999 ;
56485: LD_ADDR_VAR 0 5
56489: PUSH
56490: LD_INT 99999
56492: ST_TO_ADDR
// for i in points do
56493: LD_ADDR_VAR 0 4
56497: PUSH
56498: LD_VAR 0 2
56502: PUSH
56503: FOR_IN
56504: IFFALSE 56573
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56506: LD_ADDR_VAR 0 6
56510: PUSH
56511: LD_VAR 0 1
56515: PPUSH
56516: LD_VAR 0 4
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PPUSH
56525: LD_VAR 0 4
56529: PUSH
56530: LD_INT 2
56532: ARRAY
56533: PPUSH
56534: CALL_OW 297
56538: ST_TO_ADDR
// if tmpDist < dist then
56539: LD_VAR 0 6
56543: PUSH
56544: LD_VAR 0 5
56548: LESS
56549: IFFALSE 56571
// begin result := i ;
56551: LD_ADDR_VAR 0 3
56555: PUSH
56556: LD_VAR 0 4
56560: ST_TO_ADDR
// dist := tmpDist ;
56561: LD_ADDR_VAR 0 5
56565: PUSH
56566: LD_VAR 0 6
56570: ST_TO_ADDR
// end ; end ;
56571: GO 56503
56573: POP
56574: POP
// end ;
56575: LD_VAR 0 3
56579: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56580: LD_INT 0
56582: PPUSH
// uc_side := side ;
56583: LD_ADDR_OWVAR 20
56587: PUSH
56588: LD_VAR 0 1
56592: ST_TO_ADDR
// uc_nation := 3 ;
56593: LD_ADDR_OWVAR 21
56597: PUSH
56598: LD_INT 3
56600: ST_TO_ADDR
// vc_chassis := 25 ;
56601: LD_ADDR_OWVAR 37
56605: PUSH
56606: LD_INT 25
56608: ST_TO_ADDR
// vc_engine := engine_siberite ;
56609: LD_ADDR_OWVAR 39
56613: PUSH
56614: LD_INT 3
56616: ST_TO_ADDR
// vc_control := control_computer ;
56617: LD_ADDR_OWVAR 38
56621: PUSH
56622: LD_INT 3
56624: ST_TO_ADDR
// vc_weapon := 59 ;
56625: LD_ADDR_OWVAR 40
56629: PUSH
56630: LD_INT 59
56632: ST_TO_ADDR
// result := CreateVehicle ;
56633: LD_ADDR_VAR 0 5
56637: PUSH
56638: CALL_OW 45
56642: ST_TO_ADDR
// SetDir ( result , d ) ;
56643: LD_VAR 0 5
56647: PPUSH
56648: LD_VAR 0 4
56652: PPUSH
56653: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56657: LD_VAR 0 5
56661: PPUSH
56662: LD_VAR 0 2
56666: PPUSH
56667: LD_VAR 0 3
56671: PPUSH
56672: LD_INT 0
56674: PPUSH
56675: CALL_OW 48
// end ;
56679: LD_VAR 0 5
56683: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56684: LD_INT 0
56686: PPUSH
56687: PPUSH
56688: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56689: LD_ADDR_VAR 0 2
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56712: LD_VAR 0 1
56716: NOT
56717: PUSH
56718: LD_VAR 0 1
56722: PPUSH
56723: CALL_OW 264
56727: PUSH
56728: LD_INT 12
56730: PUSH
56731: LD_INT 51
56733: PUSH
56734: LD_INT 32
56736: PUSH
56737: LD_INT 89
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: IN
56746: NOT
56747: OR
56748: IFFALSE 56752
// exit ;
56750: GO 56850
// for i := 1 to 3 do
56752: LD_ADDR_VAR 0 3
56756: PUSH
56757: DOUBLE
56758: LD_INT 1
56760: DEC
56761: ST_TO_ADDR
56762: LD_INT 3
56764: PUSH
56765: FOR_TO
56766: IFFALSE 56848
// begin tmp := GetCargo ( cargo , i ) ;
56768: LD_ADDR_VAR 0 4
56772: PUSH
56773: LD_VAR 0 1
56777: PPUSH
56778: LD_VAR 0 3
56782: PPUSH
56783: CALL_OW 289
56787: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56788: LD_ADDR_VAR 0 2
56792: PUSH
56793: LD_VAR 0 2
56797: PPUSH
56798: LD_VAR 0 3
56802: PPUSH
56803: LD_VAR 0 4
56807: PPUSH
56808: CALL_OW 1
56812: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56813: LD_ADDR_VAR 0 2
56817: PUSH
56818: LD_VAR 0 2
56822: PPUSH
56823: LD_INT 4
56825: PPUSH
56826: LD_VAR 0 2
56830: PUSH
56831: LD_INT 4
56833: ARRAY
56834: PUSH
56835: LD_VAR 0 4
56839: PLUS
56840: PPUSH
56841: CALL_OW 1
56845: ST_TO_ADDR
// end ;
56846: GO 56765
56848: POP
56849: POP
// end ;
56850: LD_VAR 0 2
56854: RET
// export function Length ( array ) ; begin
56855: LD_INT 0
56857: PPUSH
// result := array + 0 ;
56858: LD_ADDR_VAR 0 2
56862: PUSH
56863: LD_VAR 0 1
56867: PUSH
56868: LD_INT 0
56870: PLUS
56871: ST_TO_ADDR
// end ;
56872: LD_VAR 0 2
56876: RET
// export function PrepareArray ( array ) ; begin
56877: LD_INT 0
56879: PPUSH
// result := array diff 0 ;
56880: LD_ADDR_VAR 0 2
56884: PUSH
56885: LD_VAR 0 1
56889: PUSH
56890: LD_INT 0
56892: DIFF
56893: ST_TO_ADDR
// if not result [ 1 ] then
56894: LD_VAR 0 2
56898: PUSH
56899: LD_INT 1
56901: ARRAY
56902: NOT
56903: IFFALSE 56923
// result := Delete ( result , 1 ) ;
56905: LD_ADDR_VAR 0 2
56909: PUSH
56910: LD_VAR 0 2
56914: PPUSH
56915: LD_INT 1
56917: PPUSH
56918: CALL_OW 3
56922: ST_TO_ADDR
// end ;
56923: LD_VAR 0 2
56927: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56928: LD_INT 0
56930: PPUSH
56931: PPUSH
56932: PPUSH
56933: PPUSH
// sibRocketRange := 25 ;
56934: LD_ADDR_VAR 0 6
56938: PUSH
56939: LD_INT 25
56941: ST_TO_ADDR
// result := false ;
56942: LD_ADDR_VAR 0 4
56946: PUSH
56947: LD_INT 0
56949: ST_TO_ADDR
// for i := 0 to 5 do
56950: LD_ADDR_VAR 0 5
56954: PUSH
56955: DOUBLE
56956: LD_INT 0
56958: DEC
56959: ST_TO_ADDR
56960: LD_INT 5
56962: PUSH
56963: FOR_TO
56964: IFFALSE 57031
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56966: LD_VAR 0 1
56970: PPUSH
56971: LD_VAR 0 5
56975: PPUSH
56976: LD_VAR 0 6
56980: PPUSH
56981: CALL_OW 272
56985: PPUSH
56986: LD_VAR 0 2
56990: PPUSH
56991: LD_VAR 0 5
56995: PPUSH
56996: LD_VAR 0 6
57000: PPUSH
57001: CALL_OW 273
57005: PPUSH
57006: LD_VAR 0 3
57010: PPUSH
57011: CALL_OW 309
57015: IFFALSE 57029
// begin result := true ;
57017: LD_ADDR_VAR 0 4
57021: PUSH
57022: LD_INT 1
57024: ST_TO_ADDR
// exit ;
57025: POP
57026: POP
57027: GO 57033
// end ;
57029: GO 56963
57031: POP
57032: POP
// end ;
57033: LD_VAR 0 4
57037: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57038: LD_INT 0
57040: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57041: LD_VAR 0 1
57045: PPUSH
57046: LD_VAR 0 2
57050: PPUSH
57051: LD_INT 0
57053: PPUSH
57054: LD_INT 0
57056: PPUSH
57057: LD_INT 1
57059: PPUSH
57060: LD_INT 0
57062: PPUSH
57063: CALL_OW 587
// end ;
57067: LD_VAR 0 3
57071: RET
// export function CenterOnNow ( unit ) ; begin
57072: LD_INT 0
57074: PPUSH
// result := IsInUnit ( unit ) ;
57075: LD_ADDR_VAR 0 2
57079: PUSH
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 310
57089: ST_TO_ADDR
// if not result then
57090: LD_VAR 0 2
57094: NOT
57095: IFFALSE 57107
// result := unit ;
57097: LD_ADDR_VAR 0 2
57101: PUSH
57102: LD_VAR 0 1
57106: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57107: LD_VAR 0 1
57111: PPUSH
57112: CALL_OW 87
// end ; end_of_file
57116: LD_VAR 0 2
57120: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57121: LD_VAR 0 1
57125: PUSH
57126: LD_INT 200
57128: DOUBLE
57129: GREATEREQUAL
57130: IFFALSE 57138
57132: LD_INT 299
57134: DOUBLE
57135: LESSEQUAL
57136: IFTRUE 57140
57138: GO 57172
57140: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57141: LD_VAR 0 1
57145: PPUSH
57146: LD_VAR 0 2
57150: PPUSH
57151: LD_VAR 0 3
57155: PPUSH
57156: LD_VAR 0 4
57160: PPUSH
57161: LD_VAR 0 5
57165: PPUSH
57166: CALL 57660 0 5
57170: GO 57249
57172: LD_INT 300
57174: DOUBLE
57175: GREATEREQUAL
57176: IFFALSE 57184
57178: LD_INT 399
57180: DOUBLE
57181: LESSEQUAL
57182: IFTRUE 57186
57184: GO 57248
57186: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57187: LD_VAR 0 1
57191: PPUSH
57192: LD_VAR 0 2
57196: PPUSH
57197: LD_VAR 0 3
57201: PPUSH
57202: LD_VAR 0 4
57206: PPUSH
57207: LD_VAR 0 5
57211: PPUSH
57212: LD_VAR 0 6
57216: PPUSH
57217: LD_VAR 0 7
57221: PPUSH
57222: LD_VAR 0 8
57226: PPUSH
57227: LD_VAR 0 9
57231: PPUSH
57232: LD_VAR 0 10
57236: PPUSH
57237: LD_VAR 0 11
57241: PPUSH
57242: CALL 74076 0 11
57246: GO 57249
57248: POP
// end ;
57249: PPOPN 11
57251: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57252: LD_VAR 0 1
57256: PPUSH
57257: LD_VAR 0 2
57261: PPUSH
57262: LD_VAR 0 3
57266: PPUSH
57267: LD_VAR 0 4
57271: PPUSH
57272: LD_VAR 0 5
57276: PPUSH
57277: CALL 57396 0 5
// end ; end_of_file
57281: PPOPN 5
57283: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57284: LD_INT 0
57286: PPUSH
57287: PPUSH
57288: PPUSH
57289: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57290: LD_VAR 0 1
57294: PPUSH
57295: CALL_OW 264
57299: PUSH
57300: LD_INT 91
57302: EQUAL
57303: IFFALSE 57375
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57305: LD_INT 68
57307: PPUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 255
57317: PPUSH
57318: CALL_OW 321
57322: PUSH
57323: LD_INT 2
57325: EQUAL
57326: IFFALSE 57338
// eff := 70 else
57328: LD_ADDR_VAR 0 4
57332: PUSH
57333: LD_INT 70
57335: ST_TO_ADDR
57336: GO 57346
// eff := 30 ;
57338: LD_ADDR_VAR 0 4
57342: PUSH
57343: LD_INT 30
57345: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57346: LD_VAR 0 1
57350: PPUSH
57351: CALL_OW 250
57355: PPUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: CALL_OW 251
57365: PPUSH
57366: LD_VAR 0 4
57370: PPUSH
57371: CALL_OW 495
// end ; end ;
57375: LD_VAR 0 2
57379: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57380: LD_INT 0
57382: PPUSH
// end ;
57383: LD_VAR 0 4
57387: RET
// export function SOS_Command ( cmd ) ; begin
57388: LD_INT 0
57390: PPUSH
// end ;
57391: LD_VAR 0 2
57395: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57396: LD_INT 0
57398: PPUSH
// end ;
57399: LD_VAR 0 6
57403: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57404: LD_INT 0
57406: PPUSH
57407: PPUSH
// if not vehicle or not factory then
57408: LD_VAR 0 1
57412: NOT
57413: PUSH
57414: LD_VAR 0 2
57418: NOT
57419: OR
57420: IFFALSE 57424
// exit ;
57422: GO 57655
// if factoryWaypoints >= factory then
57424: LD_EXP 104
57428: PUSH
57429: LD_VAR 0 2
57433: GREATEREQUAL
57434: IFFALSE 57655
// if factoryWaypoints [ factory ] then
57436: LD_EXP 104
57440: PUSH
57441: LD_VAR 0 2
57445: ARRAY
57446: IFFALSE 57655
// begin if GetControl ( vehicle ) = control_manual then
57448: LD_VAR 0 1
57452: PPUSH
57453: CALL_OW 263
57457: PUSH
57458: LD_INT 1
57460: EQUAL
57461: IFFALSE 57542
// begin driver := IsDrivenBy ( vehicle ) ;
57463: LD_ADDR_VAR 0 4
57467: PUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: CALL_OW 311
57477: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57478: LD_VAR 0 4
57482: PPUSH
57483: LD_EXP 104
57487: PUSH
57488: LD_VAR 0 2
57492: ARRAY
57493: PUSH
57494: LD_INT 3
57496: ARRAY
57497: PPUSH
57498: LD_EXP 104
57502: PUSH
57503: LD_VAR 0 2
57507: ARRAY
57508: PUSH
57509: LD_INT 4
57511: ARRAY
57512: PPUSH
57513: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57517: LD_VAR 0 4
57521: PPUSH
57522: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57526: LD_VAR 0 4
57530: PPUSH
57531: LD_VAR 0 2
57535: PPUSH
57536: CALL_OW 180
// end else
57540: GO 57655
// if GetControl ( vehicle ) = control_remote then
57542: LD_VAR 0 1
57546: PPUSH
57547: CALL_OW 263
57551: PUSH
57552: LD_INT 2
57554: EQUAL
57555: IFFALSE 57616
// begin wait ( 0 0$2 ) ;
57557: LD_INT 70
57559: PPUSH
57560: CALL_OW 67
// if Connect ( vehicle ) then
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL 23758 0 1
57573: IFFALSE 57614
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57575: LD_VAR 0 1
57579: PPUSH
57580: LD_EXP 104
57584: PUSH
57585: LD_VAR 0 2
57589: ARRAY
57590: PUSH
57591: LD_INT 3
57593: ARRAY
57594: PPUSH
57595: LD_EXP 104
57599: PUSH
57600: LD_VAR 0 2
57604: ARRAY
57605: PUSH
57606: LD_INT 4
57608: ARRAY
57609: PPUSH
57610: CALL_OW 171
// end else
57614: GO 57655
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57616: LD_VAR 0 1
57620: PPUSH
57621: LD_EXP 104
57625: PUSH
57626: LD_VAR 0 2
57630: ARRAY
57631: PUSH
57632: LD_INT 3
57634: ARRAY
57635: PPUSH
57636: LD_EXP 104
57640: PUSH
57641: LD_VAR 0 2
57645: ARRAY
57646: PUSH
57647: LD_INT 4
57649: ARRAY
57650: PPUSH
57651: CALL_OW 171
// end ; end ;
57655: LD_VAR 0 3
57659: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57660: LD_INT 0
57662: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57663: LD_VAR 0 1
57667: PUSH
57668: LD_INT 250
57670: EQUAL
57671: PUSH
57672: LD_VAR 0 2
57676: PPUSH
57677: CALL_OW 264
57681: PUSH
57682: LD_INT 81
57684: EQUAL
57685: AND
57686: IFFALSE 57707
// MinerPlaceMine ( unit , x , y ) ;
57688: LD_VAR 0 2
57692: PPUSH
57693: LD_VAR 0 4
57697: PPUSH
57698: LD_VAR 0 5
57702: PPUSH
57703: CALL 60092 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57707: LD_VAR 0 1
57711: PUSH
57712: LD_INT 251
57714: EQUAL
57715: PUSH
57716: LD_VAR 0 2
57720: PPUSH
57721: CALL_OW 264
57725: PUSH
57726: LD_INT 81
57728: EQUAL
57729: AND
57730: IFFALSE 57751
// MinerDetonateMine ( unit , x , y ) ;
57732: LD_VAR 0 2
57736: PPUSH
57737: LD_VAR 0 4
57741: PPUSH
57742: LD_VAR 0 5
57746: PPUSH
57747: CALL 60367 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57751: LD_VAR 0 1
57755: PUSH
57756: LD_INT 252
57758: EQUAL
57759: PUSH
57760: LD_VAR 0 2
57764: PPUSH
57765: CALL_OW 264
57769: PUSH
57770: LD_INT 81
57772: EQUAL
57773: AND
57774: IFFALSE 57795
// MinerCreateMinefield ( unit , x , y ) ;
57776: LD_VAR 0 2
57780: PPUSH
57781: LD_VAR 0 4
57785: PPUSH
57786: LD_VAR 0 5
57790: PPUSH
57791: CALL 60784 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57795: LD_VAR 0 1
57799: PUSH
57800: LD_INT 253
57802: EQUAL
57803: PUSH
57804: LD_VAR 0 2
57808: PPUSH
57809: CALL_OW 257
57813: PUSH
57814: LD_INT 5
57816: EQUAL
57817: AND
57818: IFFALSE 57839
// ComBinocular ( unit , x , y ) ;
57820: LD_VAR 0 2
57824: PPUSH
57825: LD_VAR 0 4
57829: PPUSH
57830: LD_VAR 0 5
57834: PPUSH
57835: CALL 61153 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57839: LD_VAR 0 1
57843: PUSH
57844: LD_INT 254
57846: EQUAL
57847: PUSH
57848: LD_VAR 0 2
57852: PPUSH
57853: CALL_OW 264
57857: PUSH
57858: LD_INT 99
57860: EQUAL
57861: AND
57862: PUSH
57863: LD_VAR 0 3
57867: PPUSH
57868: CALL_OW 263
57872: PUSH
57873: LD_INT 3
57875: EQUAL
57876: AND
57877: IFFALSE 57893
// HackDestroyVehicle ( unit , selectedUnit ) ;
57879: LD_VAR 0 2
57883: PPUSH
57884: LD_VAR 0 3
57888: PPUSH
57889: CALL 59456 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57893: LD_VAR 0 1
57897: PUSH
57898: LD_INT 255
57900: EQUAL
57901: PUSH
57902: LD_VAR 0 2
57906: PPUSH
57907: CALL_OW 264
57911: PUSH
57912: LD_INT 14
57914: PUSH
57915: LD_INT 53
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: IN
57922: AND
57923: PUSH
57924: LD_VAR 0 4
57928: PPUSH
57929: LD_VAR 0 5
57933: PPUSH
57934: CALL_OW 488
57938: AND
57939: IFFALSE 57963
// CutTreeXYR ( unit , x , y , 12 ) ;
57941: LD_VAR 0 2
57945: PPUSH
57946: LD_VAR 0 4
57950: PPUSH
57951: LD_VAR 0 5
57955: PPUSH
57956: LD_INT 12
57958: PPUSH
57959: CALL 58026 0 4
// if cmd = 256 then
57963: LD_VAR 0 1
57967: PUSH
57968: LD_INT 256
57970: EQUAL
57971: IFFALSE 57992
// SetFactoryWaypoint ( unit , x , y ) ;
57973: LD_VAR 0 2
57977: PPUSH
57978: LD_VAR 0 4
57982: PPUSH
57983: LD_VAR 0 5
57987: PPUSH
57988: CALL 76056 0 3
// if cmd = 257 then
57992: LD_VAR 0 1
57996: PUSH
57997: LD_INT 257
57999: EQUAL
58000: IFFALSE 58021
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58002: LD_VAR 0 2
58006: PPUSH
58007: LD_VAR 0 4
58011: PPUSH
58012: LD_VAR 0 5
58016: PPUSH
58017: CALL 76418 0 3
// end ;
58021: LD_VAR 0 6
58025: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58026: LD_INT 0
58028: PPUSH
58029: PPUSH
58030: PPUSH
58031: PPUSH
58032: PPUSH
58033: PPUSH
58034: PPUSH
58035: PPUSH
58036: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58037: LD_VAR 0 1
58041: NOT
58042: PUSH
58043: LD_VAR 0 2
58047: PPUSH
58048: LD_VAR 0 3
58052: PPUSH
58053: CALL_OW 488
58057: NOT
58058: OR
58059: PUSH
58060: LD_VAR 0 4
58064: NOT
58065: OR
58066: IFFALSE 58070
// exit ;
58068: GO 58410
// list := [ ] ;
58070: LD_ADDR_VAR 0 13
58074: PUSH
58075: EMPTY
58076: ST_TO_ADDR
// if x - r < 0 then
58077: LD_VAR 0 2
58081: PUSH
58082: LD_VAR 0 4
58086: MINUS
58087: PUSH
58088: LD_INT 0
58090: LESS
58091: IFFALSE 58103
// min_x := 0 else
58093: LD_ADDR_VAR 0 7
58097: PUSH
58098: LD_INT 0
58100: ST_TO_ADDR
58101: GO 58119
// min_x := x - r ;
58103: LD_ADDR_VAR 0 7
58107: PUSH
58108: LD_VAR 0 2
58112: PUSH
58113: LD_VAR 0 4
58117: MINUS
58118: ST_TO_ADDR
// if y - r < 0 then
58119: LD_VAR 0 3
58123: PUSH
58124: LD_VAR 0 4
58128: MINUS
58129: PUSH
58130: LD_INT 0
58132: LESS
58133: IFFALSE 58145
// min_y := 0 else
58135: LD_ADDR_VAR 0 8
58139: PUSH
58140: LD_INT 0
58142: ST_TO_ADDR
58143: GO 58161
// min_y := y - r ;
58145: LD_ADDR_VAR 0 8
58149: PUSH
58150: LD_VAR 0 3
58154: PUSH
58155: LD_VAR 0 4
58159: MINUS
58160: ST_TO_ADDR
// max_x := x + r ;
58161: LD_ADDR_VAR 0 9
58165: PUSH
58166: LD_VAR 0 2
58170: PUSH
58171: LD_VAR 0 4
58175: PLUS
58176: ST_TO_ADDR
// max_y := y + r ;
58177: LD_ADDR_VAR 0 10
58181: PUSH
58182: LD_VAR 0 3
58186: PUSH
58187: LD_VAR 0 4
58191: PLUS
58192: ST_TO_ADDR
// for _x = min_x to max_x do
58193: LD_ADDR_VAR 0 11
58197: PUSH
58198: DOUBLE
58199: LD_VAR 0 7
58203: DEC
58204: ST_TO_ADDR
58205: LD_VAR 0 9
58209: PUSH
58210: FOR_TO
58211: IFFALSE 58328
// for _y = min_y to max_y do
58213: LD_ADDR_VAR 0 12
58217: PUSH
58218: DOUBLE
58219: LD_VAR 0 8
58223: DEC
58224: ST_TO_ADDR
58225: LD_VAR 0 10
58229: PUSH
58230: FOR_TO
58231: IFFALSE 58324
// begin if not ValidHex ( _x , _y ) then
58233: LD_VAR 0 11
58237: PPUSH
58238: LD_VAR 0 12
58242: PPUSH
58243: CALL_OW 488
58247: NOT
58248: IFFALSE 58252
// continue ;
58250: GO 58230
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58252: LD_VAR 0 11
58256: PPUSH
58257: LD_VAR 0 12
58261: PPUSH
58262: CALL_OW 351
58266: PUSH
58267: LD_VAR 0 11
58271: PPUSH
58272: LD_VAR 0 12
58276: PPUSH
58277: CALL_OW 554
58281: AND
58282: IFFALSE 58322
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58284: LD_ADDR_VAR 0 13
58288: PUSH
58289: LD_VAR 0 13
58293: PPUSH
58294: LD_VAR 0 13
58298: PUSH
58299: LD_INT 1
58301: PLUS
58302: PPUSH
58303: LD_VAR 0 11
58307: PUSH
58308: LD_VAR 0 12
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PPUSH
58317: CALL_OW 2
58321: ST_TO_ADDR
// end ;
58322: GO 58230
58324: POP
58325: POP
58326: GO 58210
58328: POP
58329: POP
// if not list then
58330: LD_VAR 0 13
58334: NOT
58335: IFFALSE 58339
// exit ;
58337: GO 58410
// for i in list do
58339: LD_ADDR_VAR 0 6
58343: PUSH
58344: LD_VAR 0 13
58348: PUSH
58349: FOR_IN
58350: IFFALSE 58408
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58352: LD_VAR 0 1
58356: PPUSH
58357: LD_STRING M
58359: PUSH
58360: LD_VAR 0 6
58364: PUSH
58365: LD_INT 1
58367: ARRAY
58368: PUSH
58369: LD_VAR 0 6
58373: PUSH
58374: LD_INT 2
58376: ARRAY
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: PUSH
58399: EMPTY
58400: LIST
58401: PPUSH
58402: CALL_OW 447
58406: GO 58349
58408: POP
58409: POP
// end ;
58410: LD_VAR 0 5
58414: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58415: LD_EXP 35
58419: NOT
58420: IFFALSE 58470
58422: GO 58424
58424: DISABLE
// begin initHack := true ;
58425: LD_ADDR_EXP 35
58429: PUSH
58430: LD_INT 1
58432: ST_TO_ADDR
// hackTanks := [ ] ;
58433: LD_ADDR_EXP 36
58437: PUSH
58438: EMPTY
58439: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58440: LD_ADDR_EXP 37
58444: PUSH
58445: EMPTY
58446: ST_TO_ADDR
// hackLimit := 3 ;
58447: LD_ADDR_EXP 38
58451: PUSH
58452: LD_INT 3
58454: ST_TO_ADDR
// hackDist := 12 ;
58455: LD_ADDR_EXP 39
58459: PUSH
58460: LD_INT 12
58462: ST_TO_ADDR
// hackCounter := [ ] ;
58463: LD_ADDR_EXP 40
58467: PUSH
58468: EMPTY
58469: ST_TO_ADDR
// end ;
58470: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58471: LD_EXP 35
58475: PUSH
58476: LD_INT 34
58478: PUSH
58479: LD_INT 99
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PPUSH
58486: CALL_OW 69
58490: AND
58491: IFFALSE 58744
58493: GO 58495
58495: DISABLE
58496: LD_INT 0
58498: PPUSH
58499: PPUSH
// begin enable ;
58500: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58501: LD_ADDR_VAR 0 1
58505: PUSH
58506: LD_INT 34
58508: PUSH
58509: LD_INT 99
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PPUSH
58516: CALL_OW 69
58520: PUSH
58521: FOR_IN
58522: IFFALSE 58742
// begin if not i in hackTanks then
58524: LD_VAR 0 1
58528: PUSH
58529: LD_EXP 36
58533: IN
58534: NOT
58535: IFFALSE 58618
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58537: LD_ADDR_EXP 36
58541: PUSH
58542: LD_EXP 36
58546: PPUSH
58547: LD_EXP 36
58551: PUSH
58552: LD_INT 1
58554: PLUS
58555: PPUSH
58556: LD_VAR 0 1
58560: PPUSH
58561: CALL_OW 1
58565: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58566: LD_ADDR_EXP 37
58570: PUSH
58571: LD_EXP 37
58575: PPUSH
58576: LD_EXP 37
58580: PUSH
58581: LD_INT 1
58583: PLUS
58584: PPUSH
58585: EMPTY
58586: PPUSH
58587: CALL_OW 1
58591: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58592: LD_ADDR_EXP 40
58596: PUSH
58597: LD_EXP 40
58601: PPUSH
58602: LD_EXP 40
58606: PUSH
58607: LD_INT 1
58609: PLUS
58610: PPUSH
58611: EMPTY
58612: PPUSH
58613: CALL_OW 1
58617: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58618: LD_VAR 0 1
58622: PPUSH
58623: CALL_OW 302
58627: NOT
58628: IFFALSE 58641
// begin HackUnlinkAll ( i ) ;
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL 58747 0 1
// continue ;
58639: GO 58521
// end ; HackCheckCapturedStatus ( i ) ;
58641: LD_VAR 0 1
58645: PPUSH
58646: CALL 59190 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58650: LD_ADDR_VAR 0 2
58654: PUSH
58655: LD_INT 81
58657: PUSH
58658: LD_VAR 0 1
58662: PPUSH
58663: CALL_OW 255
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 33
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 91
58684: PUSH
58685: LD_VAR 0 1
58689: PUSH
58690: LD_EXP 39
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 50
58702: PUSH
58703: EMPTY
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: PPUSH
58712: CALL_OW 69
58716: ST_TO_ADDR
// if not tmp then
58717: LD_VAR 0 2
58721: NOT
58722: IFFALSE 58726
// continue ;
58724: GO 58521
// HackLink ( i , tmp ) ;
58726: LD_VAR 0 1
58730: PPUSH
58731: LD_VAR 0 2
58735: PPUSH
58736: CALL 58883 0 2
// end ;
58740: GO 58521
58742: POP
58743: POP
// end ;
58744: PPOPN 2
58746: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58747: LD_INT 0
58749: PPUSH
58750: PPUSH
58751: PPUSH
// if not hack in hackTanks then
58752: LD_VAR 0 1
58756: PUSH
58757: LD_EXP 36
58761: IN
58762: NOT
58763: IFFALSE 58767
// exit ;
58765: GO 58878
// index := GetElementIndex ( hackTanks , hack ) ;
58767: LD_ADDR_VAR 0 4
58771: PUSH
58772: LD_EXP 36
58776: PPUSH
58777: LD_VAR 0 1
58781: PPUSH
58782: CALL 20574 0 2
58786: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58787: LD_EXP 37
58791: PUSH
58792: LD_VAR 0 4
58796: ARRAY
58797: IFFALSE 58878
// begin for i in hackTanksCaptured [ index ] do
58799: LD_ADDR_VAR 0 3
58803: PUSH
58804: LD_EXP 37
58808: PUSH
58809: LD_VAR 0 4
58813: ARRAY
58814: PUSH
58815: FOR_IN
58816: IFFALSE 58842
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58818: LD_VAR 0 3
58822: PUSH
58823: LD_INT 1
58825: ARRAY
58826: PPUSH
58827: LD_VAR 0 3
58831: PUSH
58832: LD_INT 2
58834: ARRAY
58835: PPUSH
58836: CALL_OW 235
58840: GO 58815
58842: POP
58843: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58844: LD_ADDR_EXP 37
58848: PUSH
58849: LD_EXP 37
58853: PPUSH
58854: LD_VAR 0 4
58858: PPUSH
58859: EMPTY
58860: PPUSH
58861: CALL_OW 1
58865: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58866: LD_VAR 0 1
58870: PPUSH
58871: LD_INT 0
58873: PPUSH
58874: CALL_OW 505
// end ; end ;
58878: LD_VAR 0 2
58882: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58883: LD_INT 0
58885: PPUSH
58886: PPUSH
58887: PPUSH
// if not hack in hackTanks or not vehicles then
58888: LD_VAR 0 1
58892: PUSH
58893: LD_EXP 36
58897: IN
58898: NOT
58899: PUSH
58900: LD_VAR 0 2
58904: NOT
58905: OR
58906: IFFALSE 58910
// exit ;
58908: GO 59185
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58910: LD_ADDR_VAR 0 2
58914: PUSH
58915: LD_VAR 0 1
58919: PPUSH
58920: LD_VAR 0 2
58924: PPUSH
58925: LD_INT 1
58927: PPUSH
58928: LD_INT 1
58930: PPUSH
58931: CALL 21224 0 4
58935: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58936: LD_ADDR_VAR 0 5
58940: PUSH
58941: LD_EXP 36
58945: PPUSH
58946: LD_VAR 0 1
58950: PPUSH
58951: CALL 20574 0 2
58955: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58956: LD_EXP 37
58960: PUSH
58961: LD_VAR 0 5
58965: ARRAY
58966: PUSH
58967: LD_EXP 38
58971: LESS
58972: IFFALSE 59161
// begin for i := 1 to vehicles do
58974: LD_ADDR_VAR 0 4
58978: PUSH
58979: DOUBLE
58980: LD_INT 1
58982: DEC
58983: ST_TO_ADDR
58984: LD_VAR 0 2
58988: PUSH
58989: FOR_TO
58990: IFFALSE 59159
// begin if hackTanksCaptured [ index ] = hackLimit then
58992: LD_EXP 37
58996: PUSH
58997: LD_VAR 0 5
59001: ARRAY
59002: PUSH
59003: LD_EXP 38
59007: EQUAL
59008: IFFALSE 59012
// break ;
59010: GO 59159
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59012: LD_ADDR_EXP 40
59016: PUSH
59017: LD_EXP 40
59021: PPUSH
59022: LD_VAR 0 5
59026: PPUSH
59027: LD_EXP 40
59031: PUSH
59032: LD_VAR 0 5
59036: ARRAY
59037: PUSH
59038: LD_INT 1
59040: PLUS
59041: PPUSH
59042: CALL_OW 1
59046: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59047: LD_ADDR_EXP 37
59051: PUSH
59052: LD_EXP 37
59056: PPUSH
59057: LD_VAR 0 5
59061: PUSH
59062: LD_EXP 37
59066: PUSH
59067: LD_VAR 0 5
59071: ARRAY
59072: PUSH
59073: LD_INT 1
59075: PLUS
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PPUSH
59081: LD_VAR 0 2
59085: PUSH
59086: LD_VAR 0 4
59090: ARRAY
59091: PUSH
59092: LD_VAR 0 2
59096: PUSH
59097: LD_VAR 0 4
59101: ARRAY
59102: PPUSH
59103: CALL_OW 255
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PPUSH
59112: CALL 20789 0 3
59116: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59117: LD_VAR 0 2
59121: PUSH
59122: LD_VAR 0 4
59126: ARRAY
59127: PPUSH
59128: LD_VAR 0 1
59132: PPUSH
59133: CALL_OW 255
59137: PPUSH
59138: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59142: LD_VAR 0 2
59146: PUSH
59147: LD_VAR 0 4
59151: ARRAY
59152: PPUSH
59153: CALL_OW 141
// end ;
59157: GO 58989
59159: POP
59160: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59161: LD_VAR 0 1
59165: PPUSH
59166: LD_EXP 37
59170: PUSH
59171: LD_VAR 0 5
59175: ARRAY
59176: PUSH
59177: LD_INT 0
59179: PLUS
59180: PPUSH
59181: CALL_OW 505
// end ;
59185: LD_VAR 0 3
59189: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59190: LD_INT 0
59192: PPUSH
59193: PPUSH
59194: PPUSH
59195: PPUSH
// if not hack in hackTanks then
59196: LD_VAR 0 1
59200: PUSH
59201: LD_EXP 36
59205: IN
59206: NOT
59207: IFFALSE 59211
// exit ;
59209: GO 59451
// index := GetElementIndex ( hackTanks , hack ) ;
59211: LD_ADDR_VAR 0 4
59215: PUSH
59216: LD_EXP 36
59220: PPUSH
59221: LD_VAR 0 1
59225: PPUSH
59226: CALL 20574 0 2
59230: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59231: LD_ADDR_VAR 0 3
59235: PUSH
59236: DOUBLE
59237: LD_EXP 37
59241: PUSH
59242: LD_VAR 0 4
59246: ARRAY
59247: INC
59248: ST_TO_ADDR
59249: LD_INT 1
59251: PUSH
59252: FOR_DOWNTO
59253: IFFALSE 59425
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59255: LD_ADDR_VAR 0 5
59259: PUSH
59260: LD_EXP 37
59264: PUSH
59265: LD_VAR 0 4
59269: ARRAY
59270: PUSH
59271: LD_VAR 0 3
59275: ARRAY
59276: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59277: LD_VAR 0 5
59281: PUSH
59282: LD_INT 1
59284: ARRAY
59285: PPUSH
59286: CALL_OW 302
59290: NOT
59291: PUSH
59292: LD_VAR 0 5
59296: PUSH
59297: LD_INT 1
59299: ARRAY
59300: PPUSH
59301: CALL_OW 255
59305: PUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 255
59315: NONEQUAL
59316: OR
59317: IFFALSE 59423
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59319: LD_VAR 0 5
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PPUSH
59328: CALL_OW 305
59332: PUSH
59333: LD_VAR 0 5
59337: PUSH
59338: LD_INT 1
59340: ARRAY
59341: PPUSH
59342: CALL_OW 255
59346: PUSH
59347: LD_VAR 0 1
59351: PPUSH
59352: CALL_OW 255
59356: EQUAL
59357: AND
59358: IFFALSE 59382
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59360: LD_VAR 0 5
59364: PUSH
59365: LD_INT 1
59367: ARRAY
59368: PPUSH
59369: LD_VAR 0 5
59373: PUSH
59374: LD_INT 2
59376: ARRAY
59377: PPUSH
59378: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59382: LD_ADDR_EXP 37
59386: PUSH
59387: LD_EXP 37
59391: PPUSH
59392: LD_VAR 0 4
59396: PPUSH
59397: LD_EXP 37
59401: PUSH
59402: LD_VAR 0 4
59406: ARRAY
59407: PPUSH
59408: LD_VAR 0 3
59412: PPUSH
59413: CALL_OW 3
59417: PPUSH
59418: CALL_OW 1
59422: ST_TO_ADDR
// end ; end ;
59423: GO 59252
59425: POP
59426: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59427: LD_VAR 0 1
59431: PPUSH
59432: LD_EXP 37
59436: PUSH
59437: LD_VAR 0 4
59441: ARRAY
59442: PUSH
59443: LD_INT 0
59445: PLUS
59446: PPUSH
59447: CALL_OW 505
// end ;
59451: LD_VAR 0 2
59455: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
59461: PPUSH
// if not hack in hackTanks then
59462: LD_VAR 0 1
59466: PUSH
59467: LD_EXP 36
59471: IN
59472: NOT
59473: IFFALSE 59477
// exit ;
59475: GO 59562
// index := GetElementIndex ( hackTanks , hack ) ;
59477: LD_ADDR_VAR 0 5
59481: PUSH
59482: LD_EXP 36
59486: PPUSH
59487: LD_VAR 0 1
59491: PPUSH
59492: CALL 20574 0 2
59496: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59497: LD_ADDR_VAR 0 4
59501: PUSH
59502: DOUBLE
59503: LD_INT 1
59505: DEC
59506: ST_TO_ADDR
59507: LD_EXP 37
59511: PUSH
59512: LD_VAR 0 5
59516: ARRAY
59517: PUSH
59518: FOR_TO
59519: IFFALSE 59560
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59521: LD_EXP 37
59525: PUSH
59526: LD_VAR 0 5
59530: ARRAY
59531: PUSH
59532: LD_VAR 0 4
59536: ARRAY
59537: PUSH
59538: LD_INT 1
59540: ARRAY
59541: PUSH
59542: LD_VAR 0 2
59546: EQUAL
59547: IFFALSE 59558
// KillUnit ( vehicle ) ;
59549: LD_VAR 0 2
59553: PPUSH
59554: CALL_OW 66
59558: GO 59518
59560: POP
59561: POP
// end ;
59562: LD_VAR 0 3
59566: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59567: LD_EXP 41
59571: NOT
59572: IFFALSE 59607
59574: GO 59576
59576: DISABLE
// begin initMiner := true ;
59577: LD_ADDR_EXP 41
59581: PUSH
59582: LD_INT 1
59584: ST_TO_ADDR
// minersList := [ ] ;
59585: LD_ADDR_EXP 42
59589: PUSH
59590: EMPTY
59591: ST_TO_ADDR
// minerMinesList := [ ] ;
59592: LD_ADDR_EXP 43
59596: PUSH
59597: EMPTY
59598: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59599: LD_ADDR_EXP 44
59603: PUSH
59604: LD_INT 5
59606: ST_TO_ADDR
// end ;
59607: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59608: LD_EXP 41
59612: PUSH
59613: LD_INT 34
59615: PUSH
59616: LD_INT 81
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PPUSH
59623: CALL_OW 69
59627: AND
59628: IFFALSE 60089
59630: GO 59632
59632: DISABLE
59633: LD_INT 0
59635: PPUSH
59636: PPUSH
59637: PPUSH
59638: PPUSH
// begin enable ;
59639: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59640: LD_ADDR_VAR 0 1
59644: PUSH
59645: LD_INT 34
59647: PUSH
59648: LD_INT 81
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PPUSH
59655: CALL_OW 69
59659: PUSH
59660: FOR_IN
59661: IFFALSE 59733
// begin if not i in minersList then
59663: LD_VAR 0 1
59667: PUSH
59668: LD_EXP 42
59672: IN
59673: NOT
59674: IFFALSE 59731
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59676: LD_ADDR_EXP 42
59680: PUSH
59681: LD_EXP 42
59685: PPUSH
59686: LD_EXP 42
59690: PUSH
59691: LD_INT 1
59693: PLUS
59694: PPUSH
59695: LD_VAR 0 1
59699: PPUSH
59700: CALL_OW 1
59704: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59705: LD_ADDR_EXP 43
59709: PUSH
59710: LD_EXP 43
59714: PPUSH
59715: LD_EXP 43
59719: PUSH
59720: LD_INT 1
59722: PLUS
59723: PPUSH
59724: EMPTY
59725: PPUSH
59726: CALL_OW 1
59730: ST_TO_ADDR
// end end ;
59731: GO 59660
59733: POP
59734: POP
// for i := minerMinesList downto 1 do
59735: LD_ADDR_VAR 0 1
59739: PUSH
59740: DOUBLE
59741: LD_EXP 43
59745: INC
59746: ST_TO_ADDR
59747: LD_INT 1
59749: PUSH
59750: FOR_DOWNTO
59751: IFFALSE 60087
// begin if IsLive ( minersList [ i ] ) then
59753: LD_EXP 42
59757: PUSH
59758: LD_VAR 0 1
59762: ARRAY
59763: PPUSH
59764: CALL_OW 300
59768: IFFALSE 59796
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59770: LD_EXP 42
59774: PUSH
59775: LD_VAR 0 1
59779: ARRAY
59780: PPUSH
59781: LD_EXP 43
59785: PUSH
59786: LD_VAR 0 1
59790: ARRAY
59791: PPUSH
59792: CALL_OW 505
// if not minerMinesList [ i ] then
59796: LD_EXP 43
59800: PUSH
59801: LD_VAR 0 1
59805: ARRAY
59806: NOT
59807: IFFALSE 59811
// continue ;
59809: GO 59750
// for j := minerMinesList [ i ] downto 1 do
59811: LD_ADDR_VAR 0 2
59815: PUSH
59816: DOUBLE
59817: LD_EXP 43
59821: PUSH
59822: LD_VAR 0 1
59826: ARRAY
59827: INC
59828: ST_TO_ADDR
59829: LD_INT 1
59831: PUSH
59832: FOR_DOWNTO
59833: IFFALSE 60083
// begin side := GetSide ( minersList [ i ] ) ;
59835: LD_ADDR_VAR 0 3
59839: PUSH
59840: LD_EXP 42
59844: PUSH
59845: LD_VAR 0 1
59849: ARRAY
59850: PPUSH
59851: CALL_OW 255
59855: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59856: LD_ADDR_VAR 0 4
59860: PUSH
59861: LD_EXP 43
59865: PUSH
59866: LD_VAR 0 1
59870: ARRAY
59871: PUSH
59872: LD_VAR 0 2
59876: ARRAY
59877: PUSH
59878: LD_INT 1
59880: ARRAY
59881: PPUSH
59882: LD_EXP 43
59886: PUSH
59887: LD_VAR 0 1
59891: ARRAY
59892: PUSH
59893: LD_VAR 0 2
59897: ARRAY
59898: PUSH
59899: LD_INT 2
59901: ARRAY
59902: PPUSH
59903: CALL_OW 428
59907: ST_TO_ADDR
// if not tmp then
59908: LD_VAR 0 4
59912: NOT
59913: IFFALSE 59917
// continue ;
59915: GO 59832
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59917: LD_VAR 0 4
59921: PUSH
59922: LD_INT 81
59924: PUSH
59925: LD_VAR 0 3
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PPUSH
59934: CALL_OW 69
59938: IN
59939: PUSH
59940: LD_EXP 43
59944: PUSH
59945: LD_VAR 0 1
59949: ARRAY
59950: PUSH
59951: LD_VAR 0 2
59955: ARRAY
59956: PUSH
59957: LD_INT 1
59959: ARRAY
59960: PPUSH
59961: LD_EXP 43
59965: PUSH
59966: LD_VAR 0 1
59970: ARRAY
59971: PUSH
59972: LD_VAR 0 2
59976: ARRAY
59977: PUSH
59978: LD_INT 2
59980: ARRAY
59981: PPUSH
59982: CALL_OW 458
59986: AND
59987: IFFALSE 60081
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59989: LD_EXP 43
59993: PUSH
59994: LD_VAR 0 1
59998: ARRAY
59999: PUSH
60000: LD_VAR 0 2
60004: ARRAY
60005: PUSH
60006: LD_INT 1
60008: ARRAY
60009: PPUSH
60010: LD_EXP 43
60014: PUSH
60015: LD_VAR 0 1
60019: ARRAY
60020: PUSH
60021: LD_VAR 0 2
60025: ARRAY
60026: PUSH
60027: LD_INT 2
60029: ARRAY
60030: PPUSH
60031: LD_VAR 0 3
60035: PPUSH
60036: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60040: LD_ADDR_EXP 43
60044: PUSH
60045: LD_EXP 43
60049: PPUSH
60050: LD_VAR 0 1
60054: PPUSH
60055: LD_EXP 43
60059: PUSH
60060: LD_VAR 0 1
60064: ARRAY
60065: PPUSH
60066: LD_VAR 0 2
60070: PPUSH
60071: CALL_OW 3
60075: PPUSH
60076: CALL_OW 1
60080: ST_TO_ADDR
// end ; end ;
60081: GO 59832
60083: POP
60084: POP
// end ;
60085: GO 59750
60087: POP
60088: POP
// end ;
60089: PPOPN 4
60091: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
// result := false ;
60096: LD_ADDR_VAR 0 4
60100: PUSH
60101: LD_INT 0
60103: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60104: LD_VAR 0 1
60108: PPUSH
60109: CALL_OW 264
60113: PUSH
60114: LD_INT 81
60116: EQUAL
60117: NOT
60118: IFFALSE 60122
// exit ;
60120: GO 60362
// index := GetElementIndex ( minersList , unit ) ;
60122: LD_ADDR_VAR 0 5
60126: PUSH
60127: LD_EXP 42
60131: PPUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL 20574 0 2
60141: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60142: LD_EXP 43
60146: PUSH
60147: LD_VAR 0 5
60151: ARRAY
60152: PUSH
60153: LD_EXP 44
60157: GREATEREQUAL
60158: IFFALSE 60162
// exit ;
60160: GO 60362
// ComMoveXY ( unit , x , y ) ;
60162: LD_VAR 0 1
60166: PPUSH
60167: LD_VAR 0 2
60171: PPUSH
60172: LD_VAR 0 3
60176: PPUSH
60177: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60181: LD_INT 35
60183: PPUSH
60184: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60188: LD_VAR 0 1
60192: PPUSH
60193: LD_VAR 0 2
60197: PPUSH
60198: LD_VAR 0 3
60202: PPUSH
60203: CALL 51929 0 3
60207: NOT
60208: PUSH
60209: LD_VAR 0 1
60213: PPUSH
60214: CALL_OW 314
60218: AND
60219: IFFALSE 60223
// exit ;
60221: GO 60362
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60223: LD_VAR 0 2
60227: PPUSH
60228: LD_VAR 0 3
60232: PPUSH
60233: CALL_OW 428
60237: PUSH
60238: LD_VAR 0 1
60242: EQUAL
60243: PUSH
60244: LD_VAR 0 1
60248: PPUSH
60249: CALL_OW 314
60253: NOT
60254: AND
60255: IFFALSE 60181
// PlaySoundXY ( x , y , PlantMine ) ;
60257: LD_VAR 0 2
60261: PPUSH
60262: LD_VAR 0 3
60266: PPUSH
60267: LD_STRING PlantMine
60269: PPUSH
60270: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60274: LD_VAR 0 2
60278: PPUSH
60279: LD_VAR 0 3
60283: PPUSH
60284: LD_VAR 0 1
60288: PPUSH
60289: CALL_OW 255
60293: PPUSH
60294: LD_INT 0
60296: PPUSH
60297: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60301: LD_ADDR_EXP 43
60305: PUSH
60306: LD_EXP 43
60310: PPUSH
60311: LD_VAR 0 5
60315: PUSH
60316: LD_EXP 43
60320: PUSH
60321: LD_VAR 0 5
60325: ARRAY
60326: PUSH
60327: LD_INT 1
60329: PLUS
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PPUSH
60335: LD_VAR 0 2
60339: PUSH
60340: LD_VAR 0 3
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PPUSH
60349: CALL 20789 0 3
60353: ST_TO_ADDR
// result := true ;
60354: LD_ADDR_VAR 0 4
60358: PUSH
60359: LD_INT 1
60361: ST_TO_ADDR
// end ;
60362: LD_VAR 0 4
60366: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60367: LD_INT 0
60369: PPUSH
60370: PPUSH
60371: PPUSH
// if not unit in minersList then
60372: LD_VAR 0 1
60376: PUSH
60377: LD_EXP 42
60381: IN
60382: NOT
60383: IFFALSE 60387
// exit ;
60385: GO 60779
// index := GetElementIndex ( minersList , unit ) ;
60387: LD_ADDR_VAR 0 6
60391: PUSH
60392: LD_EXP 42
60396: PPUSH
60397: LD_VAR 0 1
60401: PPUSH
60402: CALL 20574 0 2
60406: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60407: LD_ADDR_VAR 0 5
60411: PUSH
60412: DOUBLE
60413: LD_EXP 43
60417: PUSH
60418: LD_VAR 0 6
60422: ARRAY
60423: INC
60424: ST_TO_ADDR
60425: LD_INT 1
60427: PUSH
60428: FOR_DOWNTO
60429: IFFALSE 60590
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60431: LD_EXP 43
60435: PUSH
60436: LD_VAR 0 6
60440: ARRAY
60441: PUSH
60442: LD_VAR 0 5
60446: ARRAY
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: PUSH
60452: LD_VAR 0 2
60456: EQUAL
60457: PUSH
60458: LD_EXP 43
60462: PUSH
60463: LD_VAR 0 6
60467: ARRAY
60468: PUSH
60469: LD_VAR 0 5
60473: ARRAY
60474: PUSH
60475: LD_INT 2
60477: ARRAY
60478: PUSH
60479: LD_VAR 0 3
60483: EQUAL
60484: AND
60485: IFFALSE 60588
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60487: LD_EXP 43
60491: PUSH
60492: LD_VAR 0 6
60496: ARRAY
60497: PUSH
60498: LD_VAR 0 5
60502: ARRAY
60503: PUSH
60504: LD_INT 1
60506: ARRAY
60507: PPUSH
60508: LD_EXP 43
60512: PUSH
60513: LD_VAR 0 6
60517: ARRAY
60518: PUSH
60519: LD_VAR 0 5
60523: ARRAY
60524: PUSH
60525: LD_INT 2
60527: ARRAY
60528: PPUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: CALL_OW 255
60538: PPUSH
60539: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60543: LD_ADDR_EXP 43
60547: PUSH
60548: LD_EXP 43
60552: PPUSH
60553: LD_VAR 0 6
60557: PPUSH
60558: LD_EXP 43
60562: PUSH
60563: LD_VAR 0 6
60567: ARRAY
60568: PPUSH
60569: LD_VAR 0 5
60573: PPUSH
60574: CALL_OW 3
60578: PPUSH
60579: CALL_OW 1
60583: ST_TO_ADDR
// exit ;
60584: POP
60585: POP
60586: GO 60779
// end ; end ;
60588: GO 60428
60590: POP
60591: POP
// for i := minerMinesList [ index ] downto 1 do
60592: LD_ADDR_VAR 0 5
60596: PUSH
60597: DOUBLE
60598: LD_EXP 43
60602: PUSH
60603: LD_VAR 0 6
60607: ARRAY
60608: INC
60609: ST_TO_ADDR
60610: LD_INT 1
60612: PUSH
60613: FOR_DOWNTO
60614: IFFALSE 60777
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60616: LD_EXP 43
60620: PUSH
60621: LD_VAR 0 6
60625: ARRAY
60626: PUSH
60627: LD_VAR 0 5
60631: ARRAY
60632: PUSH
60633: LD_INT 1
60635: ARRAY
60636: PPUSH
60637: LD_EXP 43
60641: PUSH
60642: LD_VAR 0 6
60646: ARRAY
60647: PUSH
60648: LD_VAR 0 5
60652: ARRAY
60653: PUSH
60654: LD_INT 2
60656: ARRAY
60657: PPUSH
60658: LD_VAR 0 2
60662: PPUSH
60663: LD_VAR 0 3
60667: PPUSH
60668: CALL_OW 298
60672: PUSH
60673: LD_INT 6
60675: LESS
60676: IFFALSE 60775
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60678: LD_EXP 43
60682: PUSH
60683: LD_VAR 0 6
60687: ARRAY
60688: PUSH
60689: LD_VAR 0 5
60693: ARRAY
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: PPUSH
60699: LD_EXP 43
60703: PUSH
60704: LD_VAR 0 6
60708: ARRAY
60709: PUSH
60710: LD_VAR 0 5
60714: ARRAY
60715: PUSH
60716: LD_INT 2
60718: ARRAY
60719: PPUSH
60720: LD_VAR 0 1
60724: PPUSH
60725: CALL_OW 255
60729: PPUSH
60730: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60734: LD_ADDR_EXP 43
60738: PUSH
60739: LD_EXP 43
60743: PPUSH
60744: LD_VAR 0 6
60748: PPUSH
60749: LD_EXP 43
60753: PUSH
60754: LD_VAR 0 6
60758: ARRAY
60759: PPUSH
60760: LD_VAR 0 5
60764: PPUSH
60765: CALL_OW 3
60769: PPUSH
60770: CALL_OW 1
60774: ST_TO_ADDR
// end ; end ;
60775: GO 60613
60777: POP
60778: POP
// end ;
60779: LD_VAR 0 4
60783: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60784: LD_INT 0
60786: PPUSH
60787: PPUSH
60788: PPUSH
60789: PPUSH
60790: PPUSH
60791: PPUSH
60792: PPUSH
60793: PPUSH
60794: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60795: LD_VAR 0 1
60799: PPUSH
60800: CALL_OW 264
60804: PUSH
60805: LD_INT 81
60807: EQUAL
60808: NOT
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: LD_EXP 42
60819: IN
60820: NOT
60821: OR
60822: IFFALSE 60826
// exit ;
60824: GO 61148
// index := GetElementIndex ( minersList , unit ) ;
60826: LD_ADDR_VAR 0 6
60830: PUSH
60831: LD_EXP 42
60835: PPUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: CALL 20574 0 2
60845: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60846: LD_ADDR_VAR 0 8
60850: PUSH
60851: LD_EXP 44
60855: PUSH
60856: LD_EXP 43
60860: PUSH
60861: LD_VAR 0 6
60865: ARRAY
60866: MINUS
60867: ST_TO_ADDR
// if not minesFreeAmount then
60868: LD_VAR 0 8
60872: NOT
60873: IFFALSE 60877
// exit ;
60875: GO 61148
// tmp := [ ] ;
60877: LD_ADDR_VAR 0 7
60881: PUSH
60882: EMPTY
60883: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60884: LD_ADDR_VAR 0 5
60888: PUSH
60889: DOUBLE
60890: LD_INT 1
60892: DEC
60893: ST_TO_ADDR
60894: LD_VAR 0 8
60898: PUSH
60899: FOR_TO
60900: IFFALSE 61095
// begin _d := rand ( 0 , 5 ) ;
60902: LD_ADDR_VAR 0 11
60906: PUSH
60907: LD_INT 0
60909: PPUSH
60910: LD_INT 5
60912: PPUSH
60913: CALL_OW 12
60917: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60918: LD_ADDR_VAR 0 12
60922: PUSH
60923: LD_INT 2
60925: PPUSH
60926: LD_INT 6
60928: PPUSH
60929: CALL_OW 12
60933: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60934: LD_ADDR_VAR 0 9
60938: PUSH
60939: LD_VAR 0 2
60943: PPUSH
60944: LD_VAR 0 11
60948: PPUSH
60949: LD_VAR 0 12
60953: PPUSH
60954: CALL_OW 272
60958: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60959: LD_ADDR_VAR 0 10
60963: PUSH
60964: LD_VAR 0 3
60968: PPUSH
60969: LD_VAR 0 11
60973: PPUSH
60974: LD_VAR 0 12
60978: PPUSH
60979: CALL_OW 273
60983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60984: LD_VAR 0 9
60988: PPUSH
60989: LD_VAR 0 10
60993: PPUSH
60994: CALL_OW 488
60998: PUSH
60999: LD_VAR 0 9
61003: PUSH
61004: LD_VAR 0 10
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_VAR 0 7
61017: IN
61018: NOT
61019: AND
61020: PUSH
61021: LD_VAR 0 9
61025: PPUSH
61026: LD_VAR 0 10
61030: PPUSH
61031: CALL_OW 458
61035: NOT
61036: AND
61037: IFFALSE 61079
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61039: LD_ADDR_VAR 0 7
61043: PUSH
61044: LD_VAR 0 7
61048: PPUSH
61049: LD_VAR 0 7
61053: PUSH
61054: LD_INT 1
61056: PLUS
61057: PPUSH
61058: LD_VAR 0 9
61062: PUSH
61063: LD_VAR 0 10
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PPUSH
61072: CALL_OW 1
61076: ST_TO_ADDR
61077: GO 61093
// i := i - 1 ;
61079: LD_ADDR_VAR 0 5
61083: PUSH
61084: LD_VAR 0 5
61088: PUSH
61089: LD_INT 1
61091: MINUS
61092: ST_TO_ADDR
// end ;
61093: GO 60899
61095: POP
61096: POP
// for i in tmp do
61097: LD_ADDR_VAR 0 5
61101: PUSH
61102: LD_VAR 0 7
61106: PUSH
61107: FOR_IN
61108: IFFALSE 61146
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61110: LD_VAR 0 1
61114: PPUSH
61115: LD_VAR 0 5
61119: PUSH
61120: LD_INT 1
61122: ARRAY
61123: PPUSH
61124: LD_VAR 0 5
61128: PUSH
61129: LD_INT 2
61131: ARRAY
61132: PPUSH
61133: CALL 60092 0 3
61137: NOT
61138: IFFALSE 61144
// exit ;
61140: POP
61141: POP
61142: GO 61148
61144: GO 61107
61146: POP
61147: POP
// end ;
61148: LD_VAR 0 4
61152: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61153: LD_INT 0
61155: PPUSH
61156: PPUSH
61157: PPUSH
61158: PPUSH
61159: PPUSH
61160: PPUSH
61161: PPUSH
// if not GetClass ( unit ) = class_sniper then
61162: LD_VAR 0 1
61166: PPUSH
61167: CALL_OW 257
61171: PUSH
61172: LD_INT 5
61174: EQUAL
61175: NOT
61176: IFFALSE 61180
// exit ;
61178: GO 61568
// dist := 8 ;
61180: LD_ADDR_VAR 0 5
61184: PUSH
61185: LD_INT 8
61187: ST_TO_ADDR
// viewRange := 12 ;
61188: LD_ADDR_VAR 0 7
61192: PUSH
61193: LD_INT 12
61195: ST_TO_ADDR
// side := GetSide ( unit ) ;
61196: LD_ADDR_VAR 0 6
61200: PUSH
61201: LD_VAR 0 1
61205: PPUSH
61206: CALL_OW 255
61210: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61211: LD_INT 61
61213: PPUSH
61214: LD_VAR 0 6
61218: PPUSH
61219: CALL_OW 321
61223: PUSH
61224: LD_INT 2
61226: EQUAL
61227: IFFALSE 61237
// viewRange := 16 ;
61229: LD_ADDR_VAR 0 7
61233: PUSH
61234: LD_INT 16
61236: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61237: LD_VAR 0 1
61241: PPUSH
61242: LD_VAR 0 2
61246: PPUSH
61247: LD_VAR 0 3
61251: PPUSH
61252: CALL_OW 297
61256: PUSH
61257: LD_VAR 0 5
61261: GREATER
61262: IFFALSE 61341
// begin ComMoveXY ( unit , x , y ) ;
61264: LD_VAR 0 1
61268: PPUSH
61269: LD_VAR 0 2
61273: PPUSH
61274: LD_VAR 0 3
61278: PPUSH
61279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61283: LD_INT 35
61285: PPUSH
61286: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61290: LD_VAR 0 1
61294: PPUSH
61295: LD_VAR 0 2
61299: PPUSH
61300: LD_VAR 0 3
61304: PPUSH
61305: CALL 51929 0 3
61309: NOT
61310: IFFALSE 61314
// exit ;
61312: GO 61568
// until GetDistUnitXY ( unit , x , y ) < dist ;
61314: LD_VAR 0 1
61318: PPUSH
61319: LD_VAR 0 2
61323: PPUSH
61324: LD_VAR 0 3
61328: PPUSH
61329: CALL_OW 297
61333: PUSH
61334: LD_VAR 0 5
61338: LESS
61339: IFFALSE 61283
// end ; ComTurnXY ( unit , x , y ) ;
61341: LD_VAR 0 1
61345: PPUSH
61346: LD_VAR 0 2
61350: PPUSH
61351: LD_VAR 0 3
61355: PPUSH
61356: CALL_OW 118
// wait ( 5 ) ;
61360: LD_INT 5
61362: PPUSH
61363: CALL_OW 67
// _d := GetDir ( unit ) ;
61367: LD_ADDR_VAR 0 10
61371: PUSH
61372: LD_VAR 0 1
61376: PPUSH
61377: CALL_OW 254
61381: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61382: LD_ADDR_VAR 0 8
61386: PUSH
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 250
61396: PPUSH
61397: LD_VAR 0 10
61401: PPUSH
61402: LD_VAR 0 5
61406: PPUSH
61407: CALL_OW 272
61411: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61412: LD_ADDR_VAR 0 9
61416: PUSH
61417: LD_VAR 0 1
61421: PPUSH
61422: CALL_OW 251
61426: PPUSH
61427: LD_VAR 0 10
61431: PPUSH
61432: LD_VAR 0 5
61436: PPUSH
61437: CALL_OW 273
61441: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61442: LD_VAR 0 8
61446: PPUSH
61447: LD_VAR 0 9
61451: PPUSH
61452: CALL_OW 488
61456: NOT
61457: IFFALSE 61461
// exit ;
61459: GO 61568
// ComAnimCustom ( unit , 1 ) ;
61461: LD_VAR 0 1
61465: PPUSH
61466: LD_INT 1
61468: PPUSH
61469: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61473: LD_VAR 0 8
61477: PPUSH
61478: LD_VAR 0 9
61482: PPUSH
61483: LD_VAR 0 6
61487: PPUSH
61488: LD_VAR 0 7
61492: PPUSH
61493: CALL_OW 330
// repeat wait ( 1 ) ;
61497: LD_INT 1
61499: PPUSH
61500: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61504: LD_VAR 0 1
61508: PPUSH
61509: CALL_OW 316
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 314
61523: OR
61524: PUSH
61525: LD_VAR 0 1
61529: PPUSH
61530: CALL_OW 302
61534: NOT
61535: OR
61536: PUSH
61537: LD_VAR 0 1
61541: PPUSH
61542: CALL_OW 301
61546: OR
61547: IFFALSE 61497
// RemoveSeeing ( _x , _y , side ) ;
61549: LD_VAR 0 8
61553: PPUSH
61554: LD_VAR 0 9
61558: PPUSH
61559: LD_VAR 0 6
61563: PPUSH
61564: CALL_OW 331
// end ; end_of_file
61568: LD_VAR 0 4
61572: RET
// export globalGameSaveCounter ; every 0 0$1 do
61573: GO 61575
61575: DISABLE
// begin enable ;
61576: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61577: LD_STRING updateTimer(
61579: PUSH
61580: LD_OWVAR 1
61584: STR
61585: PUSH
61586: LD_STRING );
61588: STR
61589: PPUSH
61590: CALL_OW 559
// end ;
61594: END
// every 0 0$1 do
61595: GO 61597
61597: DISABLE
// begin globalGameSaveCounter := 0 ;
61598: LD_ADDR_EXP 45
61602: PUSH
61603: LD_INT 0
61605: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61606: LD_STRING setGameSaveCounter(0)
61608: PPUSH
61609: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61613: LD_STRING initStreamRollete();
61615: PPUSH
61616: CALL_OW 559
// InitStreamMode ;
61620: CALL 62946 0 0
// DefineStreamItems ( false ) ;
61624: LD_INT 0
61626: PPUSH
61627: CALL 63410 0 1
// end ;
61631: END
// export function SOS_MapStart ( ) ; begin
61632: LD_INT 0
61634: PPUSH
// if streamModeActive then
61635: LD_EXP 46
61639: IFFALSE 61648
// DefineStreamItems ( true ) ;
61641: LD_INT 1
61643: PPUSH
61644: CALL 63410 0 1
// UpdateLuaVariables ( ) ;
61648: CALL 61665 0 0
// UpdateFactoryWaypoints ( ) ;
61652: CALL 76271 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61656: CALL 76528 0 0
// end ;
61660: LD_VAR 0 1
61664: RET
// function UpdateLuaVariables ( ) ; begin
61665: LD_INT 0
61667: PPUSH
// if globalGameSaveCounter then
61668: LD_EXP 45
61672: IFFALSE 61706
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61674: LD_ADDR_EXP 45
61678: PUSH
61679: LD_EXP 45
61683: PPUSH
61684: CALL 54480 0 1
61688: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61689: LD_STRING setGameSaveCounter(
61691: PUSH
61692: LD_EXP 45
61696: STR
61697: PUSH
61698: LD_STRING )
61700: STR
61701: PPUSH
61702: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61706: LD_STRING setGameDifficulty(
61708: PUSH
61709: LD_OWVAR 67
61713: STR
61714: PUSH
61715: LD_STRING )
61717: STR
61718: PPUSH
61719: CALL_OW 559
// end ;
61723: LD_VAR 0 1
61727: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61728: LD_INT 0
61730: PPUSH
// if p2 = stream_mode then
61731: LD_VAR 0 2
61735: PUSH
61736: LD_INT 100
61738: EQUAL
61739: IFFALSE 62742
// begin if not StreamModeActive then
61741: LD_EXP 46
61745: NOT
61746: IFFALSE 61756
// StreamModeActive := true ;
61748: LD_ADDR_EXP 46
61752: PUSH
61753: LD_INT 1
61755: ST_TO_ADDR
// if p3 = 0 then
61756: LD_VAR 0 3
61760: PUSH
61761: LD_INT 0
61763: EQUAL
61764: IFFALSE 61770
// InitStreamMode ;
61766: CALL 62946 0 0
// if p3 = 1 then
61770: LD_VAR 0 3
61774: PUSH
61775: LD_INT 1
61777: EQUAL
61778: IFFALSE 61788
// sRocket := true ;
61780: LD_ADDR_EXP 51
61784: PUSH
61785: LD_INT 1
61787: ST_TO_ADDR
// if p3 = 2 then
61788: LD_VAR 0 3
61792: PUSH
61793: LD_INT 2
61795: EQUAL
61796: IFFALSE 61806
// sSpeed := true ;
61798: LD_ADDR_EXP 50
61802: PUSH
61803: LD_INT 1
61805: ST_TO_ADDR
// if p3 = 3 then
61806: LD_VAR 0 3
61810: PUSH
61811: LD_INT 3
61813: EQUAL
61814: IFFALSE 61824
// sEngine := true ;
61816: LD_ADDR_EXP 52
61820: PUSH
61821: LD_INT 1
61823: ST_TO_ADDR
// if p3 = 4 then
61824: LD_VAR 0 3
61828: PUSH
61829: LD_INT 4
61831: EQUAL
61832: IFFALSE 61842
// sSpec := true ;
61834: LD_ADDR_EXP 49
61838: PUSH
61839: LD_INT 1
61841: ST_TO_ADDR
// if p3 = 5 then
61842: LD_VAR 0 3
61846: PUSH
61847: LD_INT 5
61849: EQUAL
61850: IFFALSE 61860
// sLevel := true ;
61852: LD_ADDR_EXP 53
61856: PUSH
61857: LD_INT 1
61859: ST_TO_ADDR
// if p3 = 6 then
61860: LD_VAR 0 3
61864: PUSH
61865: LD_INT 6
61867: EQUAL
61868: IFFALSE 61878
// sArmoury := true ;
61870: LD_ADDR_EXP 54
61874: PUSH
61875: LD_INT 1
61877: ST_TO_ADDR
// if p3 = 7 then
61878: LD_VAR 0 3
61882: PUSH
61883: LD_INT 7
61885: EQUAL
61886: IFFALSE 61896
// sRadar := true ;
61888: LD_ADDR_EXP 55
61892: PUSH
61893: LD_INT 1
61895: ST_TO_ADDR
// if p3 = 8 then
61896: LD_VAR 0 3
61900: PUSH
61901: LD_INT 8
61903: EQUAL
61904: IFFALSE 61914
// sBunker := true ;
61906: LD_ADDR_EXP 56
61910: PUSH
61911: LD_INT 1
61913: ST_TO_ADDR
// if p3 = 9 then
61914: LD_VAR 0 3
61918: PUSH
61919: LD_INT 9
61921: EQUAL
61922: IFFALSE 61932
// sHack := true ;
61924: LD_ADDR_EXP 57
61928: PUSH
61929: LD_INT 1
61931: ST_TO_ADDR
// if p3 = 10 then
61932: LD_VAR 0 3
61936: PUSH
61937: LD_INT 10
61939: EQUAL
61940: IFFALSE 61950
// sFire := true ;
61942: LD_ADDR_EXP 58
61946: PUSH
61947: LD_INT 1
61949: ST_TO_ADDR
// if p3 = 11 then
61950: LD_VAR 0 3
61954: PUSH
61955: LD_INT 11
61957: EQUAL
61958: IFFALSE 61968
// sRefresh := true ;
61960: LD_ADDR_EXP 59
61964: PUSH
61965: LD_INT 1
61967: ST_TO_ADDR
// if p3 = 12 then
61968: LD_VAR 0 3
61972: PUSH
61973: LD_INT 12
61975: EQUAL
61976: IFFALSE 61986
// sExp := true ;
61978: LD_ADDR_EXP 60
61982: PUSH
61983: LD_INT 1
61985: ST_TO_ADDR
// if p3 = 13 then
61986: LD_VAR 0 3
61990: PUSH
61991: LD_INT 13
61993: EQUAL
61994: IFFALSE 62004
// sDepot := true ;
61996: LD_ADDR_EXP 61
62000: PUSH
62001: LD_INT 1
62003: ST_TO_ADDR
// if p3 = 14 then
62004: LD_VAR 0 3
62008: PUSH
62009: LD_INT 14
62011: EQUAL
62012: IFFALSE 62022
// sFlag := true ;
62014: LD_ADDR_EXP 62
62018: PUSH
62019: LD_INT 1
62021: ST_TO_ADDR
// if p3 = 15 then
62022: LD_VAR 0 3
62026: PUSH
62027: LD_INT 15
62029: EQUAL
62030: IFFALSE 62040
// sKamikadze := true ;
62032: LD_ADDR_EXP 70
62036: PUSH
62037: LD_INT 1
62039: ST_TO_ADDR
// if p3 = 16 then
62040: LD_VAR 0 3
62044: PUSH
62045: LD_INT 16
62047: EQUAL
62048: IFFALSE 62058
// sTroll := true ;
62050: LD_ADDR_EXP 71
62054: PUSH
62055: LD_INT 1
62057: ST_TO_ADDR
// if p3 = 17 then
62058: LD_VAR 0 3
62062: PUSH
62063: LD_INT 17
62065: EQUAL
62066: IFFALSE 62076
// sSlow := true ;
62068: LD_ADDR_EXP 72
62072: PUSH
62073: LD_INT 1
62075: ST_TO_ADDR
// if p3 = 18 then
62076: LD_VAR 0 3
62080: PUSH
62081: LD_INT 18
62083: EQUAL
62084: IFFALSE 62094
// sLack := true ;
62086: LD_ADDR_EXP 73
62090: PUSH
62091: LD_INT 1
62093: ST_TO_ADDR
// if p3 = 19 then
62094: LD_VAR 0 3
62098: PUSH
62099: LD_INT 19
62101: EQUAL
62102: IFFALSE 62112
// sTank := true ;
62104: LD_ADDR_EXP 75
62108: PUSH
62109: LD_INT 1
62111: ST_TO_ADDR
// if p3 = 20 then
62112: LD_VAR 0 3
62116: PUSH
62117: LD_INT 20
62119: EQUAL
62120: IFFALSE 62130
// sRemote := true ;
62122: LD_ADDR_EXP 76
62126: PUSH
62127: LD_INT 1
62129: ST_TO_ADDR
// if p3 = 21 then
62130: LD_VAR 0 3
62134: PUSH
62135: LD_INT 21
62137: EQUAL
62138: IFFALSE 62148
// sPowell := true ;
62140: LD_ADDR_EXP 77
62144: PUSH
62145: LD_INT 1
62147: ST_TO_ADDR
// if p3 = 22 then
62148: LD_VAR 0 3
62152: PUSH
62153: LD_INT 22
62155: EQUAL
62156: IFFALSE 62166
// sTeleport := true ;
62158: LD_ADDR_EXP 80
62162: PUSH
62163: LD_INT 1
62165: ST_TO_ADDR
// if p3 = 23 then
62166: LD_VAR 0 3
62170: PUSH
62171: LD_INT 23
62173: EQUAL
62174: IFFALSE 62184
// sOilTower := true ;
62176: LD_ADDR_EXP 82
62180: PUSH
62181: LD_INT 1
62183: ST_TO_ADDR
// if p3 = 24 then
62184: LD_VAR 0 3
62188: PUSH
62189: LD_INT 24
62191: EQUAL
62192: IFFALSE 62202
// sShovel := true ;
62194: LD_ADDR_EXP 83
62198: PUSH
62199: LD_INT 1
62201: ST_TO_ADDR
// if p3 = 25 then
62202: LD_VAR 0 3
62206: PUSH
62207: LD_INT 25
62209: EQUAL
62210: IFFALSE 62220
// sSheik := true ;
62212: LD_ADDR_EXP 84
62216: PUSH
62217: LD_INT 1
62219: ST_TO_ADDR
// if p3 = 26 then
62220: LD_VAR 0 3
62224: PUSH
62225: LD_INT 26
62227: EQUAL
62228: IFFALSE 62238
// sEarthquake := true ;
62230: LD_ADDR_EXP 86
62234: PUSH
62235: LD_INT 1
62237: ST_TO_ADDR
// if p3 = 27 then
62238: LD_VAR 0 3
62242: PUSH
62243: LD_INT 27
62245: EQUAL
62246: IFFALSE 62256
// sAI := true ;
62248: LD_ADDR_EXP 87
62252: PUSH
62253: LD_INT 1
62255: ST_TO_ADDR
// if p3 = 28 then
62256: LD_VAR 0 3
62260: PUSH
62261: LD_INT 28
62263: EQUAL
62264: IFFALSE 62274
// sCargo := true ;
62266: LD_ADDR_EXP 90
62270: PUSH
62271: LD_INT 1
62273: ST_TO_ADDR
// if p3 = 29 then
62274: LD_VAR 0 3
62278: PUSH
62279: LD_INT 29
62281: EQUAL
62282: IFFALSE 62292
// sDLaser := true ;
62284: LD_ADDR_EXP 91
62288: PUSH
62289: LD_INT 1
62291: ST_TO_ADDR
// if p3 = 30 then
62292: LD_VAR 0 3
62296: PUSH
62297: LD_INT 30
62299: EQUAL
62300: IFFALSE 62310
// sExchange := true ;
62302: LD_ADDR_EXP 92
62306: PUSH
62307: LD_INT 1
62309: ST_TO_ADDR
// if p3 = 31 then
62310: LD_VAR 0 3
62314: PUSH
62315: LD_INT 31
62317: EQUAL
62318: IFFALSE 62328
// sFac := true ;
62320: LD_ADDR_EXP 93
62324: PUSH
62325: LD_INT 1
62327: ST_TO_ADDR
// if p3 = 32 then
62328: LD_VAR 0 3
62332: PUSH
62333: LD_INT 32
62335: EQUAL
62336: IFFALSE 62346
// sPower := true ;
62338: LD_ADDR_EXP 94
62342: PUSH
62343: LD_INT 1
62345: ST_TO_ADDR
// if p3 = 33 then
62346: LD_VAR 0 3
62350: PUSH
62351: LD_INT 33
62353: EQUAL
62354: IFFALSE 62364
// sRandom := true ;
62356: LD_ADDR_EXP 95
62360: PUSH
62361: LD_INT 1
62363: ST_TO_ADDR
// if p3 = 34 then
62364: LD_VAR 0 3
62368: PUSH
62369: LD_INT 34
62371: EQUAL
62372: IFFALSE 62382
// sShield := true ;
62374: LD_ADDR_EXP 96
62378: PUSH
62379: LD_INT 1
62381: ST_TO_ADDR
// if p3 = 35 then
62382: LD_VAR 0 3
62386: PUSH
62387: LD_INT 35
62389: EQUAL
62390: IFFALSE 62400
// sTime := true ;
62392: LD_ADDR_EXP 97
62396: PUSH
62397: LD_INT 1
62399: ST_TO_ADDR
// if p3 = 36 then
62400: LD_VAR 0 3
62404: PUSH
62405: LD_INT 36
62407: EQUAL
62408: IFFALSE 62418
// sTools := true ;
62410: LD_ADDR_EXP 98
62414: PUSH
62415: LD_INT 1
62417: ST_TO_ADDR
// if p3 = 101 then
62418: LD_VAR 0 3
62422: PUSH
62423: LD_INT 101
62425: EQUAL
62426: IFFALSE 62436
// sSold := true ;
62428: LD_ADDR_EXP 63
62432: PUSH
62433: LD_INT 1
62435: ST_TO_ADDR
// if p3 = 102 then
62436: LD_VAR 0 3
62440: PUSH
62441: LD_INT 102
62443: EQUAL
62444: IFFALSE 62454
// sDiff := true ;
62446: LD_ADDR_EXP 64
62450: PUSH
62451: LD_INT 1
62453: ST_TO_ADDR
// if p3 = 103 then
62454: LD_VAR 0 3
62458: PUSH
62459: LD_INT 103
62461: EQUAL
62462: IFFALSE 62472
// sFog := true ;
62464: LD_ADDR_EXP 67
62468: PUSH
62469: LD_INT 1
62471: ST_TO_ADDR
// if p3 = 104 then
62472: LD_VAR 0 3
62476: PUSH
62477: LD_INT 104
62479: EQUAL
62480: IFFALSE 62490
// sReset := true ;
62482: LD_ADDR_EXP 68
62486: PUSH
62487: LD_INT 1
62489: ST_TO_ADDR
// if p3 = 105 then
62490: LD_VAR 0 3
62494: PUSH
62495: LD_INT 105
62497: EQUAL
62498: IFFALSE 62508
// sSun := true ;
62500: LD_ADDR_EXP 69
62504: PUSH
62505: LD_INT 1
62507: ST_TO_ADDR
// if p3 = 106 then
62508: LD_VAR 0 3
62512: PUSH
62513: LD_INT 106
62515: EQUAL
62516: IFFALSE 62526
// sTiger := true ;
62518: LD_ADDR_EXP 65
62522: PUSH
62523: LD_INT 1
62525: ST_TO_ADDR
// if p3 = 107 then
62526: LD_VAR 0 3
62530: PUSH
62531: LD_INT 107
62533: EQUAL
62534: IFFALSE 62544
// sBomb := true ;
62536: LD_ADDR_EXP 66
62540: PUSH
62541: LD_INT 1
62543: ST_TO_ADDR
// if p3 = 108 then
62544: LD_VAR 0 3
62548: PUSH
62549: LD_INT 108
62551: EQUAL
62552: IFFALSE 62562
// sWound := true ;
62554: LD_ADDR_EXP 74
62558: PUSH
62559: LD_INT 1
62561: ST_TO_ADDR
// if p3 = 109 then
62562: LD_VAR 0 3
62566: PUSH
62567: LD_INT 109
62569: EQUAL
62570: IFFALSE 62580
// sBetray := true ;
62572: LD_ADDR_EXP 78
62576: PUSH
62577: LD_INT 1
62579: ST_TO_ADDR
// if p3 = 110 then
62580: LD_VAR 0 3
62584: PUSH
62585: LD_INT 110
62587: EQUAL
62588: IFFALSE 62598
// sContamin := true ;
62590: LD_ADDR_EXP 79
62594: PUSH
62595: LD_INT 1
62597: ST_TO_ADDR
// if p3 = 111 then
62598: LD_VAR 0 3
62602: PUSH
62603: LD_INT 111
62605: EQUAL
62606: IFFALSE 62616
// sOil := true ;
62608: LD_ADDR_EXP 81
62612: PUSH
62613: LD_INT 1
62615: ST_TO_ADDR
// if p3 = 112 then
62616: LD_VAR 0 3
62620: PUSH
62621: LD_INT 112
62623: EQUAL
62624: IFFALSE 62634
// sStu := true ;
62626: LD_ADDR_EXP 85
62630: PUSH
62631: LD_INT 1
62633: ST_TO_ADDR
// if p3 = 113 then
62634: LD_VAR 0 3
62638: PUSH
62639: LD_INT 113
62641: EQUAL
62642: IFFALSE 62652
// sBazooka := true ;
62644: LD_ADDR_EXP 88
62648: PUSH
62649: LD_INT 1
62651: ST_TO_ADDR
// if p3 = 114 then
62652: LD_VAR 0 3
62656: PUSH
62657: LD_INT 114
62659: EQUAL
62660: IFFALSE 62670
// sMortar := true ;
62662: LD_ADDR_EXP 89
62666: PUSH
62667: LD_INT 1
62669: ST_TO_ADDR
// if p3 = 115 then
62670: LD_VAR 0 3
62674: PUSH
62675: LD_INT 115
62677: EQUAL
62678: IFFALSE 62688
// sRanger := true ;
62680: LD_ADDR_EXP 99
62684: PUSH
62685: LD_INT 1
62687: ST_TO_ADDR
// if p3 = 116 then
62688: LD_VAR 0 3
62692: PUSH
62693: LD_INT 116
62695: EQUAL
62696: IFFALSE 62706
// sComputer := true ;
62698: LD_ADDR_EXP 100
62702: PUSH
62703: LD_INT 1
62705: ST_TO_ADDR
// if p3 = 117 then
62706: LD_VAR 0 3
62710: PUSH
62711: LD_INT 117
62713: EQUAL
62714: IFFALSE 62724
// s30 := true ;
62716: LD_ADDR_EXP 101
62720: PUSH
62721: LD_INT 1
62723: ST_TO_ADDR
// if p3 = 118 then
62724: LD_VAR 0 3
62728: PUSH
62729: LD_INT 118
62731: EQUAL
62732: IFFALSE 62742
// s60 := true ;
62734: LD_ADDR_EXP 102
62738: PUSH
62739: LD_INT 1
62741: ST_TO_ADDR
// end ; if p2 = hack_mode then
62742: LD_VAR 0 2
62746: PUSH
62747: LD_INT 101
62749: EQUAL
62750: IFFALSE 62878
// begin case p3 of 1 :
62752: LD_VAR 0 3
62756: PUSH
62757: LD_INT 1
62759: DOUBLE
62760: EQUAL
62761: IFTRUE 62765
62763: GO 62772
62765: POP
// hHackUnlimitedResources ; 2 :
62766: CALL 75017 0 0
62770: GO 62878
62772: LD_INT 2
62774: DOUBLE
62775: EQUAL
62776: IFTRUE 62780
62778: GO 62787
62780: POP
// hHackSetLevel10 ; 3 :
62781: CALL 75150 0 0
62785: GO 62878
62787: LD_INT 3
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62795
62793: GO 62802
62795: POP
// hHackSetLevel10YourUnits ; 4 :
62796: CALL 75235 0 0
62800: GO 62878
62802: LD_INT 4
62804: DOUBLE
62805: EQUAL
62806: IFTRUE 62810
62808: GO 62817
62810: POP
// hHackInvincible ; 5 :
62811: CALL 75683 0 0
62815: GO 62878
62817: LD_INT 5
62819: DOUBLE
62820: EQUAL
62821: IFTRUE 62825
62823: GO 62832
62825: POP
// hHackInvisible ; 6 :
62826: CALL 75794 0 0
62830: GO 62878
62832: LD_INT 6
62834: DOUBLE
62835: EQUAL
62836: IFTRUE 62840
62838: GO 62847
62840: POP
// hHackChangeYourSide ; 7 :
62841: CALL 75851 0 0
62845: GO 62878
62847: LD_INT 7
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62855
62853: GO 62862
62855: POP
// hHackChangeUnitSide ; 8 :
62856: CALL 75893 0 0
62860: GO 62878
62862: LD_INT 8
62864: DOUBLE
62865: EQUAL
62866: IFTRUE 62870
62868: GO 62877
62870: POP
// hHackFog ; end ;
62871: CALL 75994 0 0
62875: GO 62878
62877: POP
// end ; if p2 = game_save_mode then
62878: LD_VAR 0 2
62882: PUSH
62883: LD_INT 102
62885: EQUAL
62886: IFFALSE 62941
// begin if p3 = 1 then
62888: LD_VAR 0 3
62892: PUSH
62893: LD_INT 1
62895: EQUAL
62896: IFFALSE 62908
// globalGameSaveCounter := p4 ;
62898: LD_ADDR_EXP 45
62902: PUSH
62903: LD_VAR 0 4
62907: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62908: LD_VAR 0 3
62912: PUSH
62913: LD_INT 2
62915: EQUAL
62916: PUSH
62917: LD_EXP 45
62921: AND
62922: IFFALSE 62941
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62924: LD_STRING setGameSaveCounter(
62926: PUSH
62927: LD_EXP 45
62931: STR
62932: PUSH
62933: LD_STRING )
62935: STR
62936: PPUSH
62937: CALL_OW 559
// end ; end ;
62941: LD_VAR 0 7
62945: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62946: LD_INT 0
62948: PPUSH
// streamModeActive := false ;
62949: LD_ADDR_EXP 46
62953: PUSH
62954: LD_INT 0
62956: ST_TO_ADDR
// normalCounter := 36 ;
62957: LD_ADDR_EXP 47
62961: PUSH
62962: LD_INT 36
62964: ST_TO_ADDR
// hardcoreCounter := 18 ;
62965: LD_ADDR_EXP 48
62969: PUSH
62970: LD_INT 18
62972: ST_TO_ADDR
// sRocket := false ;
62973: LD_ADDR_EXP 51
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// sSpeed := false ;
62981: LD_ADDR_EXP 50
62985: PUSH
62986: LD_INT 0
62988: ST_TO_ADDR
// sEngine := false ;
62989: LD_ADDR_EXP 52
62993: PUSH
62994: LD_INT 0
62996: ST_TO_ADDR
// sSpec := false ;
62997: LD_ADDR_EXP 49
63001: PUSH
63002: LD_INT 0
63004: ST_TO_ADDR
// sLevel := false ;
63005: LD_ADDR_EXP 53
63009: PUSH
63010: LD_INT 0
63012: ST_TO_ADDR
// sArmoury := false ;
63013: LD_ADDR_EXP 54
63017: PUSH
63018: LD_INT 0
63020: ST_TO_ADDR
// sRadar := false ;
63021: LD_ADDR_EXP 55
63025: PUSH
63026: LD_INT 0
63028: ST_TO_ADDR
// sBunker := false ;
63029: LD_ADDR_EXP 56
63033: PUSH
63034: LD_INT 0
63036: ST_TO_ADDR
// sHack := false ;
63037: LD_ADDR_EXP 57
63041: PUSH
63042: LD_INT 0
63044: ST_TO_ADDR
// sFire := false ;
63045: LD_ADDR_EXP 58
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// sRefresh := false ;
63053: LD_ADDR_EXP 59
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// sExp := false ;
63061: LD_ADDR_EXP 60
63065: PUSH
63066: LD_INT 0
63068: ST_TO_ADDR
// sDepot := false ;
63069: LD_ADDR_EXP 61
63073: PUSH
63074: LD_INT 0
63076: ST_TO_ADDR
// sFlag := false ;
63077: LD_ADDR_EXP 62
63081: PUSH
63082: LD_INT 0
63084: ST_TO_ADDR
// sKamikadze := false ;
63085: LD_ADDR_EXP 70
63089: PUSH
63090: LD_INT 0
63092: ST_TO_ADDR
// sTroll := false ;
63093: LD_ADDR_EXP 71
63097: PUSH
63098: LD_INT 0
63100: ST_TO_ADDR
// sSlow := false ;
63101: LD_ADDR_EXP 72
63105: PUSH
63106: LD_INT 0
63108: ST_TO_ADDR
// sLack := false ;
63109: LD_ADDR_EXP 73
63113: PUSH
63114: LD_INT 0
63116: ST_TO_ADDR
// sTank := false ;
63117: LD_ADDR_EXP 75
63121: PUSH
63122: LD_INT 0
63124: ST_TO_ADDR
// sRemote := false ;
63125: LD_ADDR_EXP 76
63129: PUSH
63130: LD_INT 0
63132: ST_TO_ADDR
// sPowell := false ;
63133: LD_ADDR_EXP 77
63137: PUSH
63138: LD_INT 0
63140: ST_TO_ADDR
// sTeleport := false ;
63141: LD_ADDR_EXP 80
63145: PUSH
63146: LD_INT 0
63148: ST_TO_ADDR
// sOilTower := false ;
63149: LD_ADDR_EXP 82
63153: PUSH
63154: LD_INT 0
63156: ST_TO_ADDR
// sShovel := false ;
63157: LD_ADDR_EXP 83
63161: PUSH
63162: LD_INT 0
63164: ST_TO_ADDR
// sSheik := false ;
63165: LD_ADDR_EXP 84
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
// sEarthquake := false ;
63173: LD_ADDR_EXP 86
63177: PUSH
63178: LD_INT 0
63180: ST_TO_ADDR
// sAI := false ;
63181: LD_ADDR_EXP 87
63185: PUSH
63186: LD_INT 0
63188: ST_TO_ADDR
// sCargo := false ;
63189: LD_ADDR_EXP 90
63193: PUSH
63194: LD_INT 0
63196: ST_TO_ADDR
// sDLaser := false ;
63197: LD_ADDR_EXP 91
63201: PUSH
63202: LD_INT 0
63204: ST_TO_ADDR
// sExchange := false ;
63205: LD_ADDR_EXP 92
63209: PUSH
63210: LD_INT 0
63212: ST_TO_ADDR
// sFac := false ;
63213: LD_ADDR_EXP 93
63217: PUSH
63218: LD_INT 0
63220: ST_TO_ADDR
// sPower := false ;
63221: LD_ADDR_EXP 94
63225: PUSH
63226: LD_INT 0
63228: ST_TO_ADDR
// sRandom := false ;
63229: LD_ADDR_EXP 95
63233: PUSH
63234: LD_INT 0
63236: ST_TO_ADDR
// sShield := false ;
63237: LD_ADDR_EXP 96
63241: PUSH
63242: LD_INT 0
63244: ST_TO_ADDR
// sTime := false ;
63245: LD_ADDR_EXP 97
63249: PUSH
63250: LD_INT 0
63252: ST_TO_ADDR
// sTools := false ;
63253: LD_ADDR_EXP 98
63257: PUSH
63258: LD_INT 0
63260: ST_TO_ADDR
// sSold := false ;
63261: LD_ADDR_EXP 63
63265: PUSH
63266: LD_INT 0
63268: ST_TO_ADDR
// sDiff := false ;
63269: LD_ADDR_EXP 64
63273: PUSH
63274: LD_INT 0
63276: ST_TO_ADDR
// sFog := false ;
63277: LD_ADDR_EXP 67
63281: PUSH
63282: LD_INT 0
63284: ST_TO_ADDR
// sReset := false ;
63285: LD_ADDR_EXP 68
63289: PUSH
63290: LD_INT 0
63292: ST_TO_ADDR
// sSun := false ;
63293: LD_ADDR_EXP 69
63297: PUSH
63298: LD_INT 0
63300: ST_TO_ADDR
// sTiger := false ;
63301: LD_ADDR_EXP 65
63305: PUSH
63306: LD_INT 0
63308: ST_TO_ADDR
// sBomb := false ;
63309: LD_ADDR_EXP 66
63313: PUSH
63314: LD_INT 0
63316: ST_TO_ADDR
// sWound := false ;
63317: LD_ADDR_EXP 74
63321: PUSH
63322: LD_INT 0
63324: ST_TO_ADDR
// sBetray := false ;
63325: LD_ADDR_EXP 78
63329: PUSH
63330: LD_INT 0
63332: ST_TO_ADDR
// sContamin := false ;
63333: LD_ADDR_EXP 79
63337: PUSH
63338: LD_INT 0
63340: ST_TO_ADDR
// sOil := false ;
63341: LD_ADDR_EXP 81
63345: PUSH
63346: LD_INT 0
63348: ST_TO_ADDR
// sStu := false ;
63349: LD_ADDR_EXP 85
63353: PUSH
63354: LD_INT 0
63356: ST_TO_ADDR
// sBazooka := false ;
63357: LD_ADDR_EXP 88
63361: PUSH
63362: LD_INT 0
63364: ST_TO_ADDR
// sMortar := false ;
63365: LD_ADDR_EXP 89
63369: PUSH
63370: LD_INT 0
63372: ST_TO_ADDR
// sRanger := false ;
63373: LD_ADDR_EXP 99
63377: PUSH
63378: LD_INT 0
63380: ST_TO_ADDR
// sComputer := false ;
63381: LD_ADDR_EXP 100
63385: PUSH
63386: LD_INT 0
63388: ST_TO_ADDR
// s30 := false ;
63389: LD_ADDR_EXP 101
63393: PUSH
63394: LD_INT 0
63396: ST_TO_ADDR
// s60 := false ;
63397: LD_ADDR_EXP 102
63401: PUSH
63402: LD_INT 0
63404: ST_TO_ADDR
// end ;
63405: LD_VAR 0 1
63409: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63410: LD_INT 0
63412: PPUSH
63413: PPUSH
63414: PPUSH
63415: PPUSH
63416: PPUSH
63417: PPUSH
63418: PPUSH
// result := [ ] ;
63419: LD_ADDR_VAR 0 2
63423: PUSH
63424: EMPTY
63425: ST_TO_ADDR
// if campaign_id = 1 then
63426: LD_OWVAR 69
63430: PUSH
63431: LD_INT 1
63433: EQUAL
63434: IFFALSE 66600
// begin case mission_number of 1 :
63436: LD_OWVAR 70
63440: PUSH
63441: LD_INT 1
63443: DOUBLE
63444: EQUAL
63445: IFTRUE 63449
63447: GO 63525
63449: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63450: LD_ADDR_VAR 0 2
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: LD_INT 4
63460: PUSH
63461: LD_INT 11
63463: PUSH
63464: LD_INT 12
63466: PUSH
63467: LD_INT 15
63469: PUSH
63470: LD_INT 16
63472: PUSH
63473: LD_INT 22
63475: PUSH
63476: LD_INT 23
63478: PUSH
63479: LD_INT 26
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 101
63495: PUSH
63496: LD_INT 102
63498: PUSH
63499: LD_INT 106
63501: PUSH
63502: LD_INT 116
63504: PUSH
63505: LD_INT 117
63507: PUSH
63508: LD_INT 118
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: ST_TO_ADDR
63523: GO 66598
63525: LD_INT 2
63527: DOUBLE
63528: EQUAL
63529: IFTRUE 63533
63531: GO 63617
63533: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63534: LD_ADDR_VAR 0 2
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 4
63544: PUSH
63545: LD_INT 11
63547: PUSH
63548: LD_INT 12
63550: PUSH
63551: LD_INT 15
63553: PUSH
63554: LD_INT 16
63556: PUSH
63557: LD_INT 22
63559: PUSH
63560: LD_INT 23
63562: PUSH
63563: LD_INT 26
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 101
63579: PUSH
63580: LD_INT 102
63582: PUSH
63583: LD_INT 105
63585: PUSH
63586: LD_INT 106
63588: PUSH
63589: LD_INT 108
63591: PUSH
63592: LD_INT 116
63594: PUSH
63595: LD_INT 117
63597: PUSH
63598: LD_INT 118
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: ST_TO_ADDR
63615: GO 66598
63617: LD_INT 3
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63625
63623: GO 63713
63625: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63626: LD_ADDR_VAR 0 2
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: LD_INT 5
63639: PUSH
63640: LD_INT 11
63642: PUSH
63643: LD_INT 12
63645: PUSH
63646: LD_INT 15
63648: PUSH
63649: LD_INT 16
63651: PUSH
63652: LD_INT 22
63654: PUSH
63655: LD_INT 26
63657: PUSH
63658: LD_INT 36
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 101
63675: PUSH
63676: LD_INT 102
63678: PUSH
63679: LD_INT 105
63681: PUSH
63682: LD_INT 106
63684: PUSH
63685: LD_INT 108
63687: PUSH
63688: LD_INT 116
63690: PUSH
63691: LD_INT 117
63693: PUSH
63694: LD_INT 118
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: ST_TO_ADDR
63711: GO 66598
63713: LD_INT 4
63715: DOUBLE
63716: EQUAL
63717: IFTRUE 63721
63719: GO 63817
63721: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63722: LD_ADDR_VAR 0 2
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 4
63732: PUSH
63733: LD_INT 5
63735: PUSH
63736: LD_INT 8
63738: PUSH
63739: LD_INT 11
63741: PUSH
63742: LD_INT 12
63744: PUSH
63745: LD_INT 15
63747: PUSH
63748: LD_INT 16
63750: PUSH
63751: LD_INT 22
63753: PUSH
63754: LD_INT 23
63756: PUSH
63757: LD_INT 26
63759: PUSH
63760: LD_INT 36
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 101
63779: PUSH
63780: LD_INT 102
63782: PUSH
63783: LD_INT 105
63785: PUSH
63786: LD_INT 106
63788: PUSH
63789: LD_INT 108
63791: PUSH
63792: LD_INT 116
63794: PUSH
63795: LD_INT 117
63797: PUSH
63798: LD_INT 118
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: ST_TO_ADDR
63815: GO 66598
63817: LD_INT 5
63819: DOUBLE
63820: EQUAL
63821: IFTRUE 63825
63823: GO 63937
63825: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63826: LD_ADDR_VAR 0 2
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 4
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: LD_INT 6
63842: PUSH
63843: LD_INT 8
63845: PUSH
63846: LD_INT 11
63848: PUSH
63849: LD_INT 12
63851: PUSH
63852: LD_INT 15
63854: PUSH
63855: LD_INT 16
63857: PUSH
63858: LD_INT 22
63860: PUSH
63861: LD_INT 23
63863: PUSH
63864: LD_INT 25
63866: PUSH
63867: LD_INT 26
63869: PUSH
63870: LD_INT 36
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 101
63891: PUSH
63892: LD_INT 102
63894: PUSH
63895: LD_INT 105
63897: PUSH
63898: LD_INT 106
63900: PUSH
63901: LD_INT 108
63903: PUSH
63904: LD_INT 109
63906: PUSH
63907: LD_INT 112
63909: PUSH
63910: LD_INT 116
63912: PUSH
63913: LD_INT 117
63915: PUSH
63916: LD_INT 118
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: ST_TO_ADDR
63935: GO 66598
63937: LD_INT 6
63939: DOUBLE
63940: EQUAL
63941: IFTRUE 63945
63943: GO 64077
63945: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63946: LD_ADDR_VAR 0 2
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 4
63956: PUSH
63957: LD_INT 5
63959: PUSH
63960: LD_INT 6
63962: PUSH
63963: LD_INT 8
63965: PUSH
63966: LD_INT 11
63968: PUSH
63969: LD_INT 12
63971: PUSH
63972: LD_INT 15
63974: PUSH
63975: LD_INT 16
63977: PUSH
63978: LD_INT 20
63980: PUSH
63981: LD_INT 21
63983: PUSH
63984: LD_INT 22
63986: PUSH
63987: LD_INT 23
63989: PUSH
63990: LD_INT 25
63992: PUSH
63993: LD_INT 26
63995: PUSH
63996: LD_INT 30
63998: PUSH
63999: LD_INT 31
64001: PUSH
64002: LD_INT 32
64004: PUSH
64005: LD_INT 36
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 101
64031: PUSH
64032: LD_INT 102
64034: PUSH
64035: LD_INT 105
64037: PUSH
64038: LD_INT 106
64040: PUSH
64041: LD_INT 108
64043: PUSH
64044: LD_INT 109
64046: PUSH
64047: LD_INT 112
64049: PUSH
64050: LD_INT 116
64052: PUSH
64053: LD_INT 117
64055: PUSH
64056: LD_INT 118
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: ST_TO_ADDR
64075: GO 66598
64077: LD_INT 7
64079: DOUBLE
64080: EQUAL
64081: IFTRUE 64085
64083: GO 64197
64085: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64086: LD_ADDR_VAR 0 2
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: LD_INT 4
64096: PUSH
64097: LD_INT 5
64099: PUSH
64100: LD_INT 7
64102: PUSH
64103: LD_INT 11
64105: PUSH
64106: LD_INT 12
64108: PUSH
64109: LD_INT 15
64111: PUSH
64112: LD_INT 16
64114: PUSH
64115: LD_INT 20
64117: PUSH
64118: LD_INT 21
64120: PUSH
64121: LD_INT 22
64123: PUSH
64124: LD_INT 23
64126: PUSH
64127: LD_INT 25
64129: PUSH
64130: LD_INT 26
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 101
64151: PUSH
64152: LD_INT 102
64154: PUSH
64155: LD_INT 103
64157: PUSH
64158: LD_INT 105
64160: PUSH
64161: LD_INT 106
64163: PUSH
64164: LD_INT 108
64166: PUSH
64167: LD_INT 112
64169: PUSH
64170: LD_INT 116
64172: PUSH
64173: LD_INT 117
64175: PUSH
64176: LD_INT 118
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: ST_TO_ADDR
64195: GO 66598
64197: LD_INT 8
64199: DOUBLE
64200: EQUAL
64201: IFTRUE 64205
64203: GO 64345
64205: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64206: LD_ADDR_VAR 0 2
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 4
64216: PUSH
64217: LD_INT 5
64219: PUSH
64220: LD_INT 6
64222: PUSH
64223: LD_INT 7
64225: PUSH
64226: LD_INT 8
64228: PUSH
64229: LD_INT 11
64231: PUSH
64232: LD_INT 12
64234: PUSH
64235: LD_INT 15
64237: PUSH
64238: LD_INT 16
64240: PUSH
64241: LD_INT 20
64243: PUSH
64244: LD_INT 21
64246: PUSH
64247: LD_INT 22
64249: PUSH
64250: LD_INT 23
64252: PUSH
64253: LD_INT 25
64255: PUSH
64256: LD_INT 26
64258: PUSH
64259: LD_INT 30
64261: PUSH
64262: LD_INT 31
64264: PUSH
64265: LD_INT 32
64267: PUSH
64268: LD_INT 36
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 101
64295: PUSH
64296: LD_INT 102
64298: PUSH
64299: LD_INT 103
64301: PUSH
64302: LD_INT 105
64304: PUSH
64305: LD_INT 106
64307: PUSH
64308: LD_INT 108
64310: PUSH
64311: LD_INT 109
64313: PUSH
64314: LD_INT 112
64316: PUSH
64317: LD_INT 116
64319: PUSH
64320: LD_INT 117
64322: PUSH
64323: LD_INT 118
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: ST_TO_ADDR
64343: GO 66598
64345: LD_INT 9
64347: DOUBLE
64348: EQUAL
64349: IFTRUE 64353
64351: GO 64501
64353: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64354: LD_ADDR_VAR 0 2
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: LD_INT 4
64364: PUSH
64365: LD_INT 5
64367: PUSH
64368: LD_INT 6
64370: PUSH
64371: LD_INT 7
64373: PUSH
64374: LD_INT 8
64376: PUSH
64377: LD_INT 11
64379: PUSH
64380: LD_INT 12
64382: PUSH
64383: LD_INT 15
64385: PUSH
64386: LD_INT 16
64388: PUSH
64389: LD_INT 20
64391: PUSH
64392: LD_INT 21
64394: PUSH
64395: LD_INT 22
64397: PUSH
64398: LD_INT 23
64400: PUSH
64401: LD_INT 25
64403: PUSH
64404: LD_INT 26
64406: PUSH
64407: LD_INT 28
64409: PUSH
64410: LD_INT 30
64412: PUSH
64413: LD_INT 31
64415: PUSH
64416: LD_INT 32
64418: PUSH
64419: LD_INT 36
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 101
64447: PUSH
64448: LD_INT 102
64450: PUSH
64451: LD_INT 103
64453: PUSH
64454: LD_INT 105
64456: PUSH
64457: LD_INT 106
64459: PUSH
64460: LD_INT 108
64462: PUSH
64463: LD_INT 109
64465: PUSH
64466: LD_INT 112
64468: PUSH
64469: LD_INT 114
64471: PUSH
64472: LD_INT 116
64474: PUSH
64475: LD_INT 117
64477: PUSH
64478: LD_INT 118
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: ST_TO_ADDR
64499: GO 66598
64501: LD_INT 10
64503: DOUBLE
64504: EQUAL
64505: IFTRUE 64509
64507: GO 64705
64509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64510: LD_ADDR_VAR 0 2
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 4
64520: PUSH
64521: LD_INT 5
64523: PUSH
64524: LD_INT 6
64526: PUSH
64527: LD_INT 7
64529: PUSH
64530: LD_INT 8
64532: PUSH
64533: LD_INT 9
64535: PUSH
64536: LD_INT 10
64538: PUSH
64539: LD_INT 11
64541: PUSH
64542: LD_INT 12
64544: PUSH
64545: LD_INT 13
64547: PUSH
64548: LD_INT 14
64550: PUSH
64551: LD_INT 15
64553: PUSH
64554: LD_INT 16
64556: PUSH
64557: LD_INT 17
64559: PUSH
64560: LD_INT 18
64562: PUSH
64563: LD_INT 19
64565: PUSH
64566: LD_INT 20
64568: PUSH
64569: LD_INT 21
64571: PUSH
64572: LD_INT 22
64574: PUSH
64575: LD_INT 23
64577: PUSH
64578: LD_INT 24
64580: PUSH
64581: LD_INT 25
64583: PUSH
64584: LD_INT 26
64586: PUSH
64587: LD_INT 28
64589: PUSH
64590: LD_INT 30
64592: PUSH
64593: LD_INT 31
64595: PUSH
64596: LD_INT 32
64598: PUSH
64599: LD_INT 36
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 101
64635: PUSH
64636: LD_INT 102
64638: PUSH
64639: LD_INT 103
64641: PUSH
64642: LD_INT 104
64644: PUSH
64645: LD_INT 105
64647: PUSH
64648: LD_INT 106
64650: PUSH
64651: LD_INT 107
64653: PUSH
64654: LD_INT 108
64656: PUSH
64657: LD_INT 109
64659: PUSH
64660: LD_INT 110
64662: PUSH
64663: LD_INT 111
64665: PUSH
64666: LD_INT 112
64668: PUSH
64669: LD_INT 114
64671: PUSH
64672: LD_INT 116
64674: PUSH
64675: LD_INT 117
64677: PUSH
64678: LD_INT 118
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: ST_TO_ADDR
64703: GO 66598
64705: LD_INT 11
64707: DOUBLE
64708: EQUAL
64709: IFTRUE 64713
64711: GO 64917
64713: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64714: LD_ADDR_VAR 0 2
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: LD_INT 5
64730: PUSH
64731: LD_INT 6
64733: PUSH
64734: LD_INT 7
64736: PUSH
64737: LD_INT 8
64739: PUSH
64740: LD_INT 9
64742: PUSH
64743: LD_INT 10
64745: PUSH
64746: LD_INT 11
64748: PUSH
64749: LD_INT 12
64751: PUSH
64752: LD_INT 13
64754: PUSH
64755: LD_INT 14
64757: PUSH
64758: LD_INT 15
64760: PUSH
64761: LD_INT 16
64763: PUSH
64764: LD_INT 17
64766: PUSH
64767: LD_INT 18
64769: PUSH
64770: LD_INT 19
64772: PUSH
64773: LD_INT 20
64775: PUSH
64776: LD_INT 21
64778: PUSH
64779: LD_INT 22
64781: PUSH
64782: LD_INT 23
64784: PUSH
64785: LD_INT 24
64787: PUSH
64788: LD_INT 25
64790: PUSH
64791: LD_INT 26
64793: PUSH
64794: LD_INT 28
64796: PUSH
64797: LD_INT 30
64799: PUSH
64800: LD_INT 31
64802: PUSH
64803: LD_INT 32
64805: PUSH
64806: LD_INT 34
64808: PUSH
64809: LD_INT 36
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 101
64847: PUSH
64848: LD_INT 102
64850: PUSH
64851: LD_INT 103
64853: PUSH
64854: LD_INT 104
64856: PUSH
64857: LD_INT 105
64859: PUSH
64860: LD_INT 106
64862: PUSH
64863: LD_INT 107
64865: PUSH
64866: LD_INT 108
64868: PUSH
64869: LD_INT 109
64871: PUSH
64872: LD_INT 110
64874: PUSH
64875: LD_INT 111
64877: PUSH
64878: LD_INT 112
64880: PUSH
64881: LD_INT 114
64883: PUSH
64884: LD_INT 116
64886: PUSH
64887: LD_INT 117
64889: PUSH
64890: LD_INT 118
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: ST_TO_ADDR
64915: GO 66598
64917: LD_INT 12
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64925
64923: GO 65145
64925: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64926: LD_ADDR_VAR 0 2
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: LD_INT 4
64942: PUSH
64943: LD_INT 5
64945: PUSH
64946: LD_INT 6
64948: PUSH
64949: LD_INT 7
64951: PUSH
64952: LD_INT 8
64954: PUSH
64955: LD_INT 9
64957: PUSH
64958: LD_INT 10
64960: PUSH
64961: LD_INT 11
64963: PUSH
64964: LD_INT 12
64966: PUSH
64967: LD_INT 13
64969: PUSH
64970: LD_INT 14
64972: PUSH
64973: LD_INT 15
64975: PUSH
64976: LD_INT 16
64978: PUSH
64979: LD_INT 17
64981: PUSH
64982: LD_INT 18
64984: PUSH
64985: LD_INT 19
64987: PUSH
64988: LD_INT 20
64990: PUSH
64991: LD_INT 21
64993: PUSH
64994: LD_INT 22
64996: PUSH
64997: LD_INT 23
64999: PUSH
65000: LD_INT 24
65002: PUSH
65003: LD_INT 25
65005: PUSH
65006: LD_INT 26
65008: PUSH
65009: LD_INT 27
65011: PUSH
65012: LD_INT 28
65014: PUSH
65015: LD_INT 30
65017: PUSH
65018: LD_INT 31
65020: PUSH
65021: LD_INT 32
65023: PUSH
65024: LD_INT 33
65026: PUSH
65027: LD_INT 34
65029: PUSH
65030: LD_INT 36
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 101
65071: PUSH
65072: LD_INT 102
65074: PUSH
65075: LD_INT 103
65077: PUSH
65078: LD_INT 104
65080: PUSH
65081: LD_INT 105
65083: PUSH
65084: LD_INT 106
65086: PUSH
65087: LD_INT 107
65089: PUSH
65090: LD_INT 108
65092: PUSH
65093: LD_INT 109
65095: PUSH
65096: LD_INT 110
65098: PUSH
65099: LD_INT 111
65101: PUSH
65102: LD_INT 112
65104: PUSH
65105: LD_INT 113
65107: PUSH
65108: LD_INT 114
65110: PUSH
65111: LD_INT 116
65113: PUSH
65114: LD_INT 117
65116: PUSH
65117: LD_INT 118
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: ST_TO_ADDR
65143: GO 66598
65145: LD_INT 13
65147: DOUBLE
65148: EQUAL
65149: IFTRUE 65153
65151: GO 65361
65153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65154: LD_ADDR_VAR 0 2
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: LD_INT 5
65173: PUSH
65174: LD_INT 8
65176: PUSH
65177: LD_INT 9
65179: PUSH
65180: LD_INT 10
65182: PUSH
65183: LD_INT 11
65185: PUSH
65186: LD_INT 12
65188: PUSH
65189: LD_INT 14
65191: PUSH
65192: LD_INT 15
65194: PUSH
65195: LD_INT 16
65197: PUSH
65198: LD_INT 17
65200: PUSH
65201: LD_INT 18
65203: PUSH
65204: LD_INT 19
65206: PUSH
65207: LD_INT 20
65209: PUSH
65210: LD_INT 21
65212: PUSH
65213: LD_INT 22
65215: PUSH
65216: LD_INT 23
65218: PUSH
65219: LD_INT 24
65221: PUSH
65222: LD_INT 25
65224: PUSH
65225: LD_INT 26
65227: PUSH
65228: LD_INT 27
65230: PUSH
65231: LD_INT 28
65233: PUSH
65234: LD_INT 30
65236: PUSH
65237: LD_INT 31
65239: PUSH
65240: LD_INT 32
65242: PUSH
65243: LD_INT 33
65245: PUSH
65246: LD_INT 34
65248: PUSH
65249: LD_INT 36
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 101
65287: PUSH
65288: LD_INT 102
65290: PUSH
65291: LD_INT 103
65293: PUSH
65294: LD_INT 104
65296: PUSH
65297: LD_INT 105
65299: PUSH
65300: LD_INT 106
65302: PUSH
65303: LD_INT 107
65305: PUSH
65306: LD_INT 108
65308: PUSH
65309: LD_INT 109
65311: PUSH
65312: LD_INT 110
65314: PUSH
65315: LD_INT 111
65317: PUSH
65318: LD_INT 112
65320: PUSH
65321: LD_INT 113
65323: PUSH
65324: LD_INT 114
65326: PUSH
65327: LD_INT 116
65329: PUSH
65330: LD_INT 117
65332: PUSH
65333: LD_INT 118
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: ST_TO_ADDR
65359: GO 66598
65361: LD_INT 14
65363: DOUBLE
65364: EQUAL
65365: IFTRUE 65369
65367: GO 65593
65369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65370: LD_ADDR_VAR 0 2
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: LD_INT 2
65380: PUSH
65381: LD_INT 3
65383: PUSH
65384: LD_INT 4
65386: PUSH
65387: LD_INT 5
65389: PUSH
65390: LD_INT 6
65392: PUSH
65393: LD_INT 7
65395: PUSH
65396: LD_INT 8
65398: PUSH
65399: LD_INT 9
65401: PUSH
65402: LD_INT 10
65404: PUSH
65405: LD_INT 11
65407: PUSH
65408: LD_INT 12
65410: PUSH
65411: LD_INT 13
65413: PUSH
65414: LD_INT 14
65416: PUSH
65417: LD_INT 15
65419: PUSH
65420: LD_INT 16
65422: PUSH
65423: LD_INT 17
65425: PUSH
65426: LD_INT 18
65428: PUSH
65429: LD_INT 19
65431: PUSH
65432: LD_INT 20
65434: PUSH
65435: LD_INT 21
65437: PUSH
65438: LD_INT 22
65440: PUSH
65441: LD_INT 23
65443: PUSH
65444: LD_INT 24
65446: PUSH
65447: LD_INT 25
65449: PUSH
65450: LD_INT 26
65452: PUSH
65453: LD_INT 27
65455: PUSH
65456: LD_INT 28
65458: PUSH
65459: LD_INT 29
65461: PUSH
65462: LD_INT 30
65464: PUSH
65465: LD_INT 31
65467: PUSH
65468: LD_INT 32
65470: PUSH
65471: LD_INT 33
65473: PUSH
65474: LD_INT 34
65476: PUSH
65477: LD_INT 36
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 101
65519: PUSH
65520: LD_INT 102
65522: PUSH
65523: LD_INT 103
65525: PUSH
65526: LD_INT 104
65528: PUSH
65529: LD_INT 105
65531: PUSH
65532: LD_INT 106
65534: PUSH
65535: LD_INT 107
65537: PUSH
65538: LD_INT 108
65540: PUSH
65541: LD_INT 109
65543: PUSH
65544: LD_INT 110
65546: PUSH
65547: LD_INT 111
65549: PUSH
65550: LD_INT 112
65552: PUSH
65553: LD_INT 113
65555: PUSH
65556: LD_INT 114
65558: PUSH
65559: LD_INT 116
65561: PUSH
65562: LD_INT 117
65564: PUSH
65565: LD_INT 118
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: ST_TO_ADDR
65591: GO 66598
65593: LD_INT 15
65595: DOUBLE
65596: EQUAL
65597: IFTRUE 65601
65599: GO 65825
65601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65602: LD_ADDR_VAR 0 2
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: LD_INT 4
65618: PUSH
65619: LD_INT 5
65621: PUSH
65622: LD_INT 6
65624: PUSH
65625: LD_INT 7
65627: PUSH
65628: LD_INT 8
65630: PUSH
65631: LD_INT 9
65633: PUSH
65634: LD_INT 10
65636: PUSH
65637: LD_INT 11
65639: PUSH
65640: LD_INT 12
65642: PUSH
65643: LD_INT 13
65645: PUSH
65646: LD_INT 14
65648: PUSH
65649: LD_INT 15
65651: PUSH
65652: LD_INT 16
65654: PUSH
65655: LD_INT 17
65657: PUSH
65658: LD_INT 18
65660: PUSH
65661: LD_INT 19
65663: PUSH
65664: LD_INT 20
65666: PUSH
65667: LD_INT 21
65669: PUSH
65670: LD_INT 22
65672: PUSH
65673: LD_INT 23
65675: PUSH
65676: LD_INT 24
65678: PUSH
65679: LD_INT 25
65681: PUSH
65682: LD_INT 26
65684: PUSH
65685: LD_INT 27
65687: PUSH
65688: LD_INT 28
65690: PUSH
65691: LD_INT 29
65693: PUSH
65694: LD_INT 30
65696: PUSH
65697: LD_INT 31
65699: PUSH
65700: LD_INT 32
65702: PUSH
65703: LD_INT 33
65705: PUSH
65706: LD_INT 34
65708: PUSH
65709: LD_INT 36
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 101
65751: PUSH
65752: LD_INT 102
65754: PUSH
65755: LD_INT 103
65757: PUSH
65758: LD_INT 104
65760: PUSH
65761: LD_INT 105
65763: PUSH
65764: LD_INT 106
65766: PUSH
65767: LD_INT 107
65769: PUSH
65770: LD_INT 108
65772: PUSH
65773: LD_INT 109
65775: PUSH
65776: LD_INT 110
65778: PUSH
65779: LD_INT 111
65781: PUSH
65782: LD_INT 112
65784: PUSH
65785: LD_INT 113
65787: PUSH
65788: LD_INT 114
65790: PUSH
65791: LD_INT 116
65793: PUSH
65794: LD_INT 117
65796: PUSH
65797: LD_INT 118
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: ST_TO_ADDR
65823: GO 66598
65825: LD_INT 16
65827: DOUBLE
65828: EQUAL
65829: IFTRUE 65833
65831: GO 65969
65833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65834: LD_ADDR_VAR 0 2
65838: PUSH
65839: LD_INT 2
65841: PUSH
65842: LD_INT 4
65844: PUSH
65845: LD_INT 5
65847: PUSH
65848: LD_INT 7
65850: PUSH
65851: LD_INT 11
65853: PUSH
65854: LD_INT 12
65856: PUSH
65857: LD_INT 15
65859: PUSH
65860: LD_INT 16
65862: PUSH
65863: LD_INT 20
65865: PUSH
65866: LD_INT 21
65868: PUSH
65869: LD_INT 22
65871: PUSH
65872: LD_INT 23
65874: PUSH
65875: LD_INT 25
65877: PUSH
65878: LD_INT 26
65880: PUSH
65881: LD_INT 30
65883: PUSH
65884: LD_INT 31
65886: PUSH
65887: LD_INT 32
65889: PUSH
65890: LD_INT 33
65892: PUSH
65893: LD_INT 34
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 101
65919: PUSH
65920: LD_INT 102
65922: PUSH
65923: LD_INT 103
65925: PUSH
65926: LD_INT 106
65928: PUSH
65929: LD_INT 108
65931: PUSH
65932: LD_INT 112
65934: PUSH
65935: LD_INT 113
65937: PUSH
65938: LD_INT 114
65940: PUSH
65941: LD_INT 116
65943: PUSH
65944: LD_INT 117
65946: PUSH
65947: LD_INT 118
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: ST_TO_ADDR
65967: GO 66598
65969: LD_INT 17
65971: DOUBLE
65972: EQUAL
65973: IFTRUE 65977
65975: GO 66201
65977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65978: LD_ADDR_VAR 0 2
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: LD_INT 4
65994: PUSH
65995: LD_INT 5
65997: PUSH
65998: LD_INT 6
66000: PUSH
66001: LD_INT 7
66003: PUSH
66004: LD_INT 8
66006: PUSH
66007: LD_INT 9
66009: PUSH
66010: LD_INT 10
66012: PUSH
66013: LD_INT 11
66015: PUSH
66016: LD_INT 12
66018: PUSH
66019: LD_INT 13
66021: PUSH
66022: LD_INT 14
66024: PUSH
66025: LD_INT 15
66027: PUSH
66028: LD_INT 16
66030: PUSH
66031: LD_INT 17
66033: PUSH
66034: LD_INT 18
66036: PUSH
66037: LD_INT 19
66039: PUSH
66040: LD_INT 20
66042: PUSH
66043: LD_INT 21
66045: PUSH
66046: LD_INT 22
66048: PUSH
66049: LD_INT 23
66051: PUSH
66052: LD_INT 24
66054: PUSH
66055: LD_INT 25
66057: PUSH
66058: LD_INT 26
66060: PUSH
66061: LD_INT 27
66063: PUSH
66064: LD_INT 28
66066: PUSH
66067: LD_INT 29
66069: PUSH
66070: LD_INT 30
66072: PUSH
66073: LD_INT 31
66075: PUSH
66076: LD_INT 32
66078: PUSH
66079: LD_INT 33
66081: PUSH
66082: LD_INT 34
66084: PUSH
66085: LD_INT 36
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 101
66127: PUSH
66128: LD_INT 102
66130: PUSH
66131: LD_INT 103
66133: PUSH
66134: LD_INT 104
66136: PUSH
66137: LD_INT 105
66139: PUSH
66140: LD_INT 106
66142: PUSH
66143: LD_INT 107
66145: PUSH
66146: LD_INT 108
66148: PUSH
66149: LD_INT 109
66151: PUSH
66152: LD_INT 110
66154: PUSH
66155: LD_INT 111
66157: PUSH
66158: LD_INT 112
66160: PUSH
66161: LD_INT 113
66163: PUSH
66164: LD_INT 114
66166: PUSH
66167: LD_INT 116
66169: PUSH
66170: LD_INT 117
66172: PUSH
66173: LD_INT 118
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: ST_TO_ADDR
66199: GO 66598
66201: LD_INT 18
66203: DOUBLE
66204: EQUAL
66205: IFTRUE 66209
66207: GO 66357
66209: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66210: LD_ADDR_VAR 0 2
66214: PUSH
66215: LD_INT 2
66217: PUSH
66218: LD_INT 4
66220: PUSH
66221: LD_INT 5
66223: PUSH
66224: LD_INT 7
66226: PUSH
66227: LD_INT 11
66229: PUSH
66230: LD_INT 12
66232: PUSH
66233: LD_INT 15
66235: PUSH
66236: LD_INT 16
66238: PUSH
66239: LD_INT 20
66241: PUSH
66242: LD_INT 21
66244: PUSH
66245: LD_INT 22
66247: PUSH
66248: LD_INT 23
66250: PUSH
66251: LD_INT 25
66253: PUSH
66254: LD_INT 26
66256: PUSH
66257: LD_INT 30
66259: PUSH
66260: LD_INT 31
66262: PUSH
66263: LD_INT 32
66265: PUSH
66266: LD_INT 33
66268: PUSH
66269: LD_INT 34
66271: PUSH
66272: LD_INT 35
66274: PUSH
66275: LD_INT 36
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 101
66303: PUSH
66304: LD_INT 102
66306: PUSH
66307: LD_INT 103
66309: PUSH
66310: LD_INT 106
66312: PUSH
66313: LD_INT 108
66315: PUSH
66316: LD_INT 112
66318: PUSH
66319: LD_INT 113
66321: PUSH
66322: LD_INT 114
66324: PUSH
66325: LD_INT 115
66327: PUSH
66328: LD_INT 116
66330: PUSH
66331: LD_INT 117
66333: PUSH
66334: LD_INT 118
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: ST_TO_ADDR
66355: GO 66598
66357: LD_INT 19
66359: DOUBLE
66360: EQUAL
66361: IFTRUE 66365
66363: GO 66597
66365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66366: LD_ADDR_VAR 0 2
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: LD_INT 4
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: LD_INT 6
66388: PUSH
66389: LD_INT 7
66391: PUSH
66392: LD_INT 8
66394: PUSH
66395: LD_INT 9
66397: PUSH
66398: LD_INT 10
66400: PUSH
66401: LD_INT 11
66403: PUSH
66404: LD_INT 12
66406: PUSH
66407: LD_INT 13
66409: PUSH
66410: LD_INT 14
66412: PUSH
66413: LD_INT 15
66415: PUSH
66416: LD_INT 16
66418: PUSH
66419: LD_INT 17
66421: PUSH
66422: LD_INT 18
66424: PUSH
66425: LD_INT 19
66427: PUSH
66428: LD_INT 20
66430: PUSH
66431: LD_INT 21
66433: PUSH
66434: LD_INT 22
66436: PUSH
66437: LD_INT 23
66439: PUSH
66440: LD_INT 24
66442: PUSH
66443: LD_INT 25
66445: PUSH
66446: LD_INT 26
66448: PUSH
66449: LD_INT 27
66451: PUSH
66452: LD_INT 28
66454: PUSH
66455: LD_INT 29
66457: PUSH
66458: LD_INT 30
66460: PUSH
66461: LD_INT 31
66463: PUSH
66464: LD_INT 32
66466: PUSH
66467: LD_INT 33
66469: PUSH
66470: LD_INT 34
66472: PUSH
66473: LD_INT 35
66475: PUSH
66476: LD_INT 36
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 101
66519: PUSH
66520: LD_INT 102
66522: PUSH
66523: LD_INT 103
66525: PUSH
66526: LD_INT 104
66528: PUSH
66529: LD_INT 105
66531: PUSH
66532: LD_INT 106
66534: PUSH
66535: LD_INT 107
66537: PUSH
66538: LD_INT 108
66540: PUSH
66541: LD_INT 109
66543: PUSH
66544: LD_INT 110
66546: PUSH
66547: LD_INT 111
66549: PUSH
66550: LD_INT 112
66552: PUSH
66553: LD_INT 113
66555: PUSH
66556: LD_INT 114
66558: PUSH
66559: LD_INT 115
66561: PUSH
66562: LD_INT 116
66564: PUSH
66565: LD_INT 117
66567: PUSH
66568: LD_INT 118
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: ST_TO_ADDR
66595: GO 66598
66597: POP
// end else
66598: GO 66829
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66600: LD_ADDR_VAR 0 2
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: LD_INT 3
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: LD_INT 6
66622: PUSH
66623: LD_INT 7
66625: PUSH
66626: LD_INT 8
66628: PUSH
66629: LD_INT 9
66631: PUSH
66632: LD_INT 10
66634: PUSH
66635: LD_INT 11
66637: PUSH
66638: LD_INT 12
66640: PUSH
66641: LD_INT 13
66643: PUSH
66644: LD_INT 14
66646: PUSH
66647: LD_INT 15
66649: PUSH
66650: LD_INT 16
66652: PUSH
66653: LD_INT 17
66655: PUSH
66656: LD_INT 18
66658: PUSH
66659: LD_INT 19
66661: PUSH
66662: LD_INT 20
66664: PUSH
66665: LD_INT 21
66667: PUSH
66668: LD_INT 22
66670: PUSH
66671: LD_INT 23
66673: PUSH
66674: LD_INT 24
66676: PUSH
66677: LD_INT 25
66679: PUSH
66680: LD_INT 26
66682: PUSH
66683: LD_INT 27
66685: PUSH
66686: LD_INT 28
66688: PUSH
66689: LD_INT 29
66691: PUSH
66692: LD_INT 30
66694: PUSH
66695: LD_INT 31
66697: PUSH
66698: LD_INT 32
66700: PUSH
66701: LD_INT 33
66703: PUSH
66704: LD_INT 34
66706: PUSH
66707: LD_INT 35
66709: PUSH
66710: LD_INT 36
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 101
66753: PUSH
66754: LD_INT 102
66756: PUSH
66757: LD_INT 103
66759: PUSH
66760: LD_INT 104
66762: PUSH
66763: LD_INT 105
66765: PUSH
66766: LD_INT 106
66768: PUSH
66769: LD_INT 107
66771: PUSH
66772: LD_INT 108
66774: PUSH
66775: LD_INT 109
66777: PUSH
66778: LD_INT 110
66780: PUSH
66781: LD_INT 111
66783: PUSH
66784: LD_INT 112
66786: PUSH
66787: LD_INT 113
66789: PUSH
66790: LD_INT 114
66792: PUSH
66793: LD_INT 115
66795: PUSH
66796: LD_INT 116
66798: PUSH
66799: LD_INT 117
66801: PUSH
66802: LD_INT 118
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// if result then
66829: LD_VAR 0 2
66833: IFFALSE 67619
// begin normal :=  ;
66835: LD_ADDR_VAR 0 5
66839: PUSH
66840: LD_STRING 
66842: ST_TO_ADDR
// hardcore :=  ;
66843: LD_ADDR_VAR 0 6
66847: PUSH
66848: LD_STRING 
66850: ST_TO_ADDR
// active :=  ;
66851: LD_ADDR_VAR 0 7
66855: PUSH
66856: LD_STRING 
66858: ST_TO_ADDR
// for i = 1 to normalCounter do
66859: LD_ADDR_VAR 0 8
66863: PUSH
66864: DOUBLE
66865: LD_INT 1
66867: DEC
66868: ST_TO_ADDR
66869: LD_EXP 47
66873: PUSH
66874: FOR_TO
66875: IFFALSE 66976
// begin tmp := 0 ;
66877: LD_ADDR_VAR 0 3
66881: PUSH
66882: LD_STRING 0
66884: ST_TO_ADDR
// if result [ 1 ] then
66885: LD_VAR 0 2
66889: PUSH
66890: LD_INT 1
66892: ARRAY
66893: IFFALSE 66958
// if result [ 1 ] [ 1 ] = i then
66895: LD_VAR 0 2
66899: PUSH
66900: LD_INT 1
66902: ARRAY
66903: PUSH
66904: LD_INT 1
66906: ARRAY
66907: PUSH
66908: LD_VAR 0 8
66912: EQUAL
66913: IFFALSE 66958
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66915: LD_ADDR_VAR 0 2
66919: PUSH
66920: LD_VAR 0 2
66924: PPUSH
66925: LD_INT 1
66927: PPUSH
66928: LD_VAR 0 2
66932: PUSH
66933: LD_INT 1
66935: ARRAY
66936: PPUSH
66937: LD_INT 1
66939: PPUSH
66940: CALL_OW 3
66944: PPUSH
66945: CALL_OW 1
66949: ST_TO_ADDR
// tmp := 1 ;
66950: LD_ADDR_VAR 0 3
66954: PUSH
66955: LD_STRING 1
66957: ST_TO_ADDR
// end ; normal := normal & tmp ;
66958: LD_ADDR_VAR 0 5
66962: PUSH
66963: LD_VAR 0 5
66967: PUSH
66968: LD_VAR 0 3
66972: STR
66973: ST_TO_ADDR
// end ;
66974: GO 66874
66976: POP
66977: POP
// for i = 1 to hardcoreCounter do
66978: LD_ADDR_VAR 0 8
66982: PUSH
66983: DOUBLE
66984: LD_INT 1
66986: DEC
66987: ST_TO_ADDR
66988: LD_EXP 48
66992: PUSH
66993: FOR_TO
66994: IFFALSE 67099
// begin tmp := 0 ;
66996: LD_ADDR_VAR 0 3
67000: PUSH
67001: LD_STRING 0
67003: ST_TO_ADDR
// if result [ 2 ] then
67004: LD_VAR 0 2
67008: PUSH
67009: LD_INT 2
67011: ARRAY
67012: IFFALSE 67081
// if result [ 2 ] [ 1 ] = 100 + i then
67014: LD_VAR 0 2
67018: PUSH
67019: LD_INT 2
67021: ARRAY
67022: PUSH
67023: LD_INT 1
67025: ARRAY
67026: PUSH
67027: LD_INT 100
67029: PUSH
67030: LD_VAR 0 8
67034: PLUS
67035: EQUAL
67036: IFFALSE 67081
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67038: LD_ADDR_VAR 0 2
67042: PUSH
67043: LD_VAR 0 2
67047: PPUSH
67048: LD_INT 2
67050: PPUSH
67051: LD_VAR 0 2
67055: PUSH
67056: LD_INT 2
67058: ARRAY
67059: PPUSH
67060: LD_INT 1
67062: PPUSH
67063: CALL_OW 3
67067: PPUSH
67068: CALL_OW 1
67072: ST_TO_ADDR
// tmp := 1 ;
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: LD_STRING 1
67080: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67081: LD_ADDR_VAR 0 6
67085: PUSH
67086: LD_VAR 0 6
67090: PUSH
67091: LD_VAR 0 3
67095: STR
67096: ST_TO_ADDR
// end ;
67097: GO 66993
67099: POP
67100: POP
// if isGameLoad then
67101: LD_VAR 0 1
67105: IFFALSE 67580
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67107: LD_ADDR_VAR 0 4
67111: PUSH
67112: LD_EXP 51
67116: PUSH
67117: LD_EXP 50
67121: PUSH
67122: LD_EXP 52
67126: PUSH
67127: LD_EXP 49
67131: PUSH
67132: LD_EXP 53
67136: PUSH
67137: LD_EXP 54
67141: PUSH
67142: LD_EXP 55
67146: PUSH
67147: LD_EXP 56
67151: PUSH
67152: LD_EXP 57
67156: PUSH
67157: LD_EXP 58
67161: PUSH
67162: LD_EXP 59
67166: PUSH
67167: LD_EXP 60
67171: PUSH
67172: LD_EXP 61
67176: PUSH
67177: LD_EXP 62
67181: PUSH
67182: LD_EXP 70
67186: PUSH
67187: LD_EXP 71
67191: PUSH
67192: LD_EXP 72
67196: PUSH
67197: LD_EXP 73
67201: PUSH
67202: LD_EXP 75
67206: PUSH
67207: LD_EXP 76
67211: PUSH
67212: LD_EXP 77
67216: PUSH
67217: LD_EXP 80
67221: PUSH
67222: LD_EXP 82
67226: PUSH
67227: LD_EXP 83
67231: PUSH
67232: LD_EXP 84
67236: PUSH
67237: LD_EXP 86
67241: PUSH
67242: LD_EXP 87
67246: PUSH
67247: LD_EXP 90
67251: PUSH
67252: LD_EXP 91
67256: PUSH
67257: LD_EXP 92
67261: PUSH
67262: LD_EXP 93
67266: PUSH
67267: LD_EXP 94
67271: PUSH
67272: LD_EXP 95
67276: PUSH
67277: LD_EXP 96
67281: PUSH
67282: LD_EXP 97
67286: PUSH
67287: LD_EXP 98
67291: PUSH
67292: LD_EXP 63
67296: PUSH
67297: LD_EXP 64
67301: PUSH
67302: LD_EXP 67
67306: PUSH
67307: LD_EXP 68
67311: PUSH
67312: LD_EXP 69
67316: PUSH
67317: LD_EXP 65
67321: PUSH
67322: LD_EXP 66
67326: PUSH
67327: LD_EXP 74
67331: PUSH
67332: LD_EXP 78
67336: PUSH
67337: LD_EXP 79
67341: PUSH
67342: LD_EXP 81
67346: PUSH
67347: LD_EXP 85
67351: PUSH
67352: LD_EXP 88
67356: PUSH
67357: LD_EXP 89
67361: PUSH
67362: LD_EXP 99
67366: PUSH
67367: LD_EXP 100
67371: PUSH
67372: LD_EXP 101
67376: PUSH
67377: LD_EXP 102
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: ST_TO_ADDR
// tmp :=  ;
67438: LD_ADDR_VAR 0 3
67442: PUSH
67443: LD_STRING 
67445: ST_TO_ADDR
// for i = 1 to normalCounter do
67446: LD_ADDR_VAR 0 8
67450: PUSH
67451: DOUBLE
67452: LD_INT 1
67454: DEC
67455: ST_TO_ADDR
67456: LD_EXP 47
67460: PUSH
67461: FOR_TO
67462: IFFALSE 67498
// begin if flags [ i ] then
67464: LD_VAR 0 4
67468: PUSH
67469: LD_VAR 0 8
67473: ARRAY
67474: IFFALSE 67496
// tmp := tmp & i & ; ;
67476: LD_ADDR_VAR 0 3
67480: PUSH
67481: LD_VAR 0 3
67485: PUSH
67486: LD_VAR 0 8
67490: STR
67491: PUSH
67492: LD_STRING ;
67494: STR
67495: ST_TO_ADDR
// end ;
67496: GO 67461
67498: POP
67499: POP
// for i = 1 to hardcoreCounter do
67500: LD_ADDR_VAR 0 8
67504: PUSH
67505: DOUBLE
67506: LD_INT 1
67508: DEC
67509: ST_TO_ADDR
67510: LD_EXP 48
67514: PUSH
67515: FOR_TO
67516: IFFALSE 67562
// begin if flags [ normalCounter + i ] then
67518: LD_VAR 0 4
67522: PUSH
67523: LD_EXP 47
67527: PUSH
67528: LD_VAR 0 8
67532: PLUS
67533: ARRAY
67534: IFFALSE 67560
// tmp := tmp & ( 100 + i ) & ; ;
67536: LD_ADDR_VAR 0 3
67540: PUSH
67541: LD_VAR 0 3
67545: PUSH
67546: LD_INT 100
67548: PUSH
67549: LD_VAR 0 8
67553: PLUS
67554: STR
67555: PUSH
67556: LD_STRING ;
67558: STR
67559: ST_TO_ADDR
// end ;
67560: GO 67515
67562: POP
67563: POP
// if tmp then
67564: LD_VAR 0 3
67568: IFFALSE 67580
// active := tmp ;
67570: LD_ADDR_VAR 0 7
67574: PUSH
67575: LD_VAR 0 3
67579: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67580: LD_STRING getStreamItemsFromMission("
67582: PUSH
67583: LD_VAR 0 5
67587: STR
67588: PUSH
67589: LD_STRING ","
67591: STR
67592: PUSH
67593: LD_VAR 0 6
67597: STR
67598: PUSH
67599: LD_STRING ","
67601: STR
67602: PUSH
67603: LD_VAR 0 7
67607: STR
67608: PUSH
67609: LD_STRING ")
67611: STR
67612: PPUSH
67613: CALL_OW 559
// end else
67617: GO 67626
// ToLua ( getStreamItemsFromMission("","","") ) ;
67619: LD_STRING getStreamItemsFromMission("","","")
67621: PPUSH
67622: CALL_OW 559
// end ;
67626: LD_VAR 0 2
67630: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67631: LD_EXP 46
67635: PUSH
67636: LD_EXP 51
67640: AND
67641: IFFALSE 67765
67643: GO 67645
67645: DISABLE
67646: LD_INT 0
67648: PPUSH
67649: PPUSH
// begin enable ;
67650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67651: LD_ADDR_VAR 0 2
67655: PUSH
67656: LD_INT 22
67658: PUSH
67659: LD_OWVAR 2
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: LD_INT 34
67673: PUSH
67674: LD_INT 7
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 34
67683: PUSH
67684: LD_INT 45
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 34
67693: PUSH
67694: LD_INT 28
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 34
67703: PUSH
67704: LD_INT 47
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PPUSH
67722: CALL_OW 69
67726: ST_TO_ADDR
// if not tmp then
67727: LD_VAR 0 2
67731: NOT
67732: IFFALSE 67736
// exit ;
67734: GO 67765
// for i in tmp do
67736: LD_ADDR_VAR 0 1
67740: PUSH
67741: LD_VAR 0 2
67745: PUSH
67746: FOR_IN
67747: IFFALSE 67763
// begin SetLives ( i , 0 ) ;
67749: LD_VAR 0 1
67753: PPUSH
67754: LD_INT 0
67756: PPUSH
67757: CALL_OW 234
// end ;
67761: GO 67746
67763: POP
67764: POP
// end ;
67765: PPOPN 2
67767: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67768: LD_EXP 46
67772: PUSH
67773: LD_EXP 52
67777: AND
67778: IFFALSE 67862
67780: GO 67782
67782: DISABLE
67783: LD_INT 0
67785: PPUSH
67786: PPUSH
// begin enable ;
67787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67788: LD_ADDR_VAR 0 2
67792: PUSH
67793: LD_INT 22
67795: PUSH
67796: LD_OWVAR 2
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 32
67807: PUSH
67808: LD_INT 3
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PPUSH
67819: CALL_OW 69
67823: ST_TO_ADDR
// if not tmp then
67824: LD_VAR 0 2
67828: NOT
67829: IFFALSE 67833
// exit ;
67831: GO 67862
// for i in tmp do
67833: LD_ADDR_VAR 0 1
67837: PUSH
67838: LD_VAR 0 2
67842: PUSH
67843: FOR_IN
67844: IFFALSE 67860
// begin SetLives ( i , 0 ) ;
67846: LD_VAR 0 1
67850: PPUSH
67851: LD_INT 0
67853: PPUSH
67854: CALL_OW 234
// end ;
67858: GO 67843
67860: POP
67861: POP
// end ;
67862: PPOPN 2
67864: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67865: LD_EXP 46
67869: PUSH
67870: LD_EXP 49
67874: AND
67875: IFFALSE 67968
67877: GO 67879
67879: DISABLE
67880: LD_INT 0
67882: PPUSH
// begin enable ;
67883: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67884: LD_ADDR_VAR 0 1
67888: PUSH
67889: LD_INT 22
67891: PUSH
67892: LD_OWVAR 2
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: LD_INT 25
67906: PUSH
67907: LD_INT 5
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 25
67916: PUSH
67917: LD_INT 9
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 25
67926: PUSH
67927: LD_INT 8
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PPUSH
67944: CALL_OW 69
67948: PUSH
67949: FOR_IN
67950: IFFALSE 67966
// begin SetClass ( i , 1 ) ;
67952: LD_VAR 0 1
67956: PPUSH
67957: LD_INT 1
67959: PPUSH
67960: CALL_OW 336
// end ;
67964: GO 67949
67966: POP
67967: POP
// end ;
67968: PPOPN 1
67970: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67971: LD_EXP 46
67975: PUSH
67976: LD_EXP 50
67980: AND
67981: PUSH
67982: LD_OWVAR 65
67986: PUSH
67987: LD_INT 7
67989: LESS
67990: AND
67991: IFFALSE 68005
67993: GO 67995
67995: DISABLE
// begin enable ;
67996: ENABLE
// game_speed := 7 ;
67997: LD_ADDR_OWVAR 65
68001: PUSH
68002: LD_INT 7
68004: ST_TO_ADDR
// end ;
68005: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68006: LD_EXP 46
68010: PUSH
68011: LD_EXP 53
68015: AND
68016: IFFALSE 68218
68018: GO 68020
68020: DISABLE
68021: LD_INT 0
68023: PPUSH
68024: PPUSH
68025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68026: LD_ADDR_VAR 0 3
68030: PUSH
68031: LD_INT 81
68033: PUSH
68034: LD_OWVAR 2
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 21
68045: PUSH
68046: LD_INT 1
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PPUSH
68057: CALL_OW 69
68061: ST_TO_ADDR
// if not tmp then
68062: LD_VAR 0 3
68066: NOT
68067: IFFALSE 68071
// exit ;
68069: GO 68218
// if tmp > 5 then
68071: LD_VAR 0 3
68075: PUSH
68076: LD_INT 5
68078: GREATER
68079: IFFALSE 68091
// k := 5 else
68081: LD_ADDR_VAR 0 2
68085: PUSH
68086: LD_INT 5
68088: ST_TO_ADDR
68089: GO 68101
// k := tmp ;
68091: LD_ADDR_VAR 0 2
68095: PUSH
68096: LD_VAR 0 3
68100: ST_TO_ADDR
// for i := 1 to k do
68101: LD_ADDR_VAR 0 1
68105: PUSH
68106: DOUBLE
68107: LD_INT 1
68109: DEC
68110: ST_TO_ADDR
68111: LD_VAR 0 2
68115: PUSH
68116: FOR_TO
68117: IFFALSE 68216
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68119: LD_VAR 0 3
68123: PUSH
68124: LD_VAR 0 1
68128: ARRAY
68129: PPUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_INT 4
68137: MOD
68138: PUSH
68139: LD_INT 1
68141: PLUS
68142: PPUSH
68143: CALL_OW 259
68147: PUSH
68148: LD_INT 10
68150: LESS
68151: IFFALSE 68214
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68153: LD_VAR 0 3
68157: PUSH
68158: LD_VAR 0 1
68162: ARRAY
68163: PPUSH
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 4
68171: MOD
68172: PUSH
68173: LD_INT 1
68175: PLUS
68176: PPUSH
68177: LD_VAR 0 3
68181: PUSH
68182: LD_VAR 0 1
68186: ARRAY
68187: PPUSH
68188: LD_VAR 0 1
68192: PUSH
68193: LD_INT 4
68195: MOD
68196: PUSH
68197: LD_INT 1
68199: PLUS
68200: PPUSH
68201: CALL_OW 259
68205: PUSH
68206: LD_INT 1
68208: PLUS
68209: PPUSH
68210: CALL_OW 237
68214: GO 68116
68216: POP
68217: POP
// end ;
68218: PPOPN 3
68220: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68221: LD_EXP 46
68225: PUSH
68226: LD_EXP 54
68230: AND
68231: IFFALSE 68251
68233: GO 68235
68235: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68236: LD_INT 4
68238: PPUSH
68239: LD_OWVAR 2
68243: PPUSH
68244: LD_INT 0
68246: PPUSH
68247: CALL_OW 324
68251: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68252: LD_EXP 46
68256: PUSH
68257: LD_EXP 83
68261: AND
68262: IFFALSE 68282
68264: GO 68266
68266: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68267: LD_INT 19
68269: PPUSH
68270: LD_OWVAR 2
68274: PPUSH
68275: LD_INT 0
68277: PPUSH
68278: CALL_OW 324
68282: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68283: LD_EXP 46
68287: PUSH
68288: LD_EXP 55
68292: AND
68293: IFFALSE 68395
68295: GO 68297
68297: DISABLE
68298: LD_INT 0
68300: PPUSH
68301: PPUSH
// begin enable ;
68302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68303: LD_ADDR_VAR 0 2
68307: PUSH
68308: LD_INT 22
68310: PUSH
68311: LD_OWVAR 2
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: LD_INT 34
68325: PUSH
68326: LD_INT 11
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 34
68335: PUSH
68336: LD_INT 30
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: LIST
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 69
68356: ST_TO_ADDR
// if not tmp then
68357: LD_VAR 0 2
68361: NOT
68362: IFFALSE 68366
// exit ;
68364: GO 68395
// for i in tmp do
68366: LD_ADDR_VAR 0 1
68370: PUSH
68371: LD_VAR 0 2
68375: PUSH
68376: FOR_IN
68377: IFFALSE 68393
// begin SetLives ( i , 0 ) ;
68379: LD_VAR 0 1
68383: PPUSH
68384: LD_INT 0
68386: PPUSH
68387: CALL_OW 234
// end ;
68391: GO 68376
68393: POP
68394: POP
// end ;
68395: PPOPN 2
68397: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68398: LD_EXP 46
68402: PUSH
68403: LD_EXP 56
68407: AND
68408: IFFALSE 68428
68410: GO 68412
68412: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68413: LD_INT 32
68415: PPUSH
68416: LD_OWVAR 2
68420: PPUSH
68421: LD_INT 0
68423: PPUSH
68424: CALL_OW 324
68428: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68429: LD_EXP 46
68433: PUSH
68434: LD_EXP 57
68438: AND
68439: IFFALSE 68620
68441: GO 68443
68443: DISABLE
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
68448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68449: LD_ADDR_VAR 0 2
68453: PUSH
68454: LD_INT 22
68456: PUSH
68457: LD_OWVAR 2
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 33
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PPUSH
68480: CALL_OW 69
68484: ST_TO_ADDR
// if not tmp then
68485: LD_VAR 0 2
68489: NOT
68490: IFFALSE 68494
// exit ;
68492: GO 68620
// side := 0 ;
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_INT 0
68501: ST_TO_ADDR
// for i := 1 to 8 do
68502: LD_ADDR_VAR 0 1
68506: PUSH
68507: DOUBLE
68508: LD_INT 1
68510: DEC
68511: ST_TO_ADDR
68512: LD_INT 8
68514: PUSH
68515: FOR_TO
68516: IFFALSE 68564
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68518: LD_OWVAR 2
68522: PUSH
68523: LD_VAR 0 1
68527: NONEQUAL
68528: PUSH
68529: LD_OWVAR 2
68533: PPUSH
68534: LD_VAR 0 1
68538: PPUSH
68539: CALL_OW 81
68543: PUSH
68544: LD_INT 2
68546: EQUAL
68547: AND
68548: IFFALSE 68562
// begin side := i ;
68550: LD_ADDR_VAR 0 3
68554: PUSH
68555: LD_VAR 0 1
68559: ST_TO_ADDR
// break ;
68560: GO 68564
// end ;
68562: GO 68515
68564: POP
68565: POP
// if not side then
68566: LD_VAR 0 3
68570: NOT
68571: IFFALSE 68575
// exit ;
68573: GO 68620
// for i := 1 to tmp do
68575: LD_ADDR_VAR 0 1
68579: PUSH
68580: DOUBLE
68581: LD_INT 1
68583: DEC
68584: ST_TO_ADDR
68585: LD_VAR 0 2
68589: PUSH
68590: FOR_TO
68591: IFFALSE 68618
// if Prob ( 60 ) then
68593: LD_INT 60
68595: PPUSH
68596: CALL_OW 13
68600: IFFALSE 68616
// SetSide ( i , side ) ;
68602: LD_VAR 0 1
68606: PPUSH
68607: LD_VAR 0 3
68611: PPUSH
68612: CALL_OW 235
68616: GO 68590
68618: POP
68619: POP
// end ;
68620: PPOPN 3
68622: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68623: LD_EXP 46
68627: PUSH
68628: LD_EXP 59
68632: AND
68633: IFFALSE 68752
68635: GO 68637
68637: DISABLE
68638: LD_INT 0
68640: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68641: LD_ADDR_VAR 0 1
68645: PUSH
68646: LD_INT 22
68648: PUSH
68649: LD_OWVAR 2
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 21
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 3
68670: PUSH
68671: LD_INT 23
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: PPUSH
68690: CALL_OW 69
68694: PUSH
68695: FOR_IN
68696: IFFALSE 68750
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68698: LD_VAR 0 1
68702: PPUSH
68703: CALL_OW 257
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: LD_INT 4
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: IN
68726: IFFALSE 68748
// SetClass ( un , rand ( 1 , 4 ) ) ;
68728: LD_VAR 0 1
68732: PPUSH
68733: LD_INT 1
68735: PPUSH
68736: LD_INT 4
68738: PPUSH
68739: CALL_OW 12
68743: PPUSH
68744: CALL_OW 336
68748: GO 68695
68750: POP
68751: POP
// end ;
68752: PPOPN 1
68754: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68755: LD_EXP 46
68759: PUSH
68760: LD_EXP 58
68764: AND
68765: IFFALSE 68844
68767: GO 68769
68769: DISABLE
68770: LD_INT 0
68772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68773: LD_ADDR_VAR 0 1
68777: PUSH
68778: LD_INT 22
68780: PUSH
68781: LD_OWVAR 2
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 21
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PPUSH
68804: CALL_OW 69
68808: ST_TO_ADDR
// if not tmp then
68809: LD_VAR 0 1
68813: NOT
68814: IFFALSE 68818
// exit ;
68816: GO 68844
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68818: LD_VAR 0 1
68822: PUSH
68823: LD_INT 1
68825: PPUSH
68826: LD_VAR 0 1
68830: PPUSH
68831: CALL_OW 12
68835: ARRAY
68836: PPUSH
68837: LD_INT 100
68839: PPUSH
68840: CALL_OW 234
// end ;
68844: PPOPN 1
68846: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68847: LD_EXP 46
68851: PUSH
68852: LD_EXP 60
68856: AND
68857: IFFALSE 68955
68859: GO 68861
68861: DISABLE
68862: LD_INT 0
68864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68865: LD_ADDR_VAR 0 1
68869: PUSH
68870: LD_INT 22
68872: PUSH
68873: LD_OWVAR 2
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 21
68884: PUSH
68885: LD_INT 1
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PPUSH
68896: CALL_OW 69
68900: ST_TO_ADDR
// if not tmp then
68901: LD_VAR 0 1
68905: NOT
68906: IFFALSE 68910
// exit ;
68908: GO 68955
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68910: LD_VAR 0 1
68914: PUSH
68915: LD_INT 1
68917: PPUSH
68918: LD_VAR 0 1
68922: PPUSH
68923: CALL_OW 12
68927: ARRAY
68928: PPUSH
68929: LD_INT 1
68931: PPUSH
68932: LD_INT 4
68934: PPUSH
68935: CALL_OW 12
68939: PPUSH
68940: LD_INT 3000
68942: PPUSH
68943: LD_INT 9000
68945: PPUSH
68946: CALL_OW 12
68950: PPUSH
68951: CALL_OW 492
// end ;
68955: PPOPN 1
68957: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68958: LD_EXP 46
68962: PUSH
68963: LD_EXP 61
68967: AND
68968: IFFALSE 68988
68970: GO 68972
68972: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68973: LD_INT 1
68975: PPUSH
68976: LD_OWVAR 2
68980: PPUSH
68981: LD_INT 0
68983: PPUSH
68984: CALL_OW 324
68988: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68989: LD_EXP 46
68993: PUSH
68994: LD_EXP 62
68998: AND
68999: IFFALSE 69082
69001: GO 69003
69003: DISABLE
69004: LD_INT 0
69006: PPUSH
69007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69008: LD_ADDR_VAR 0 2
69012: PUSH
69013: LD_INT 22
69015: PUSH
69016: LD_OWVAR 2
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 21
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PPUSH
69039: CALL_OW 69
69043: ST_TO_ADDR
// if not tmp then
69044: LD_VAR 0 2
69048: NOT
69049: IFFALSE 69053
// exit ;
69051: GO 69082
// for i in tmp do
69053: LD_ADDR_VAR 0 1
69057: PUSH
69058: LD_VAR 0 2
69062: PUSH
69063: FOR_IN
69064: IFFALSE 69080
// SetBLevel ( i , 10 ) ;
69066: LD_VAR 0 1
69070: PPUSH
69071: LD_INT 10
69073: PPUSH
69074: CALL_OW 241
69078: GO 69063
69080: POP
69081: POP
// end ;
69082: PPOPN 2
69084: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69085: LD_EXP 46
69089: PUSH
69090: LD_EXP 63
69094: AND
69095: IFFALSE 69206
69097: GO 69099
69099: DISABLE
69100: LD_INT 0
69102: PPUSH
69103: PPUSH
69104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69105: LD_ADDR_VAR 0 3
69109: PUSH
69110: LD_INT 22
69112: PUSH
69113: LD_OWVAR 2
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 25
69124: PUSH
69125: LD_INT 1
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PPUSH
69136: CALL_OW 69
69140: ST_TO_ADDR
// if not tmp then
69141: LD_VAR 0 3
69145: NOT
69146: IFFALSE 69150
// exit ;
69148: GO 69206
// un := tmp [ rand ( 1 , tmp ) ] ;
69150: LD_ADDR_VAR 0 2
69154: PUSH
69155: LD_VAR 0 3
69159: PUSH
69160: LD_INT 1
69162: PPUSH
69163: LD_VAR 0 3
69167: PPUSH
69168: CALL_OW 12
69172: ARRAY
69173: ST_TO_ADDR
// if Crawls ( un ) then
69174: LD_VAR 0 2
69178: PPUSH
69179: CALL_OW 318
69183: IFFALSE 69194
// ComWalk ( un ) ;
69185: LD_VAR 0 2
69189: PPUSH
69190: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69194: LD_VAR 0 2
69198: PPUSH
69199: LD_INT 5
69201: PPUSH
69202: CALL_OW 336
// end ;
69206: PPOPN 3
69208: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69209: LD_EXP 46
69213: PUSH
69214: LD_EXP 64
69218: AND
69219: PUSH
69220: LD_OWVAR 67
69224: PUSH
69225: LD_INT 4
69227: LESS
69228: AND
69229: IFFALSE 69248
69231: GO 69233
69233: DISABLE
// begin Difficulty := Difficulty + 1 ;
69234: LD_ADDR_OWVAR 67
69238: PUSH
69239: LD_OWVAR 67
69243: PUSH
69244: LD_INT 1
69246: PLUS
69247: ST_TO_ADDR
// end ;
69248: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69249: LD_EXP 46
69253: PUSH
69254: LD_EXP 65
69258: AND
69259: IFFALSE 69362
69261: GO 69263
69263: DISABLE
69264: LD_INT 0
69266: PPUSH
// begin for i := 1 to 5 do
69267: LD_ADDR_VAR 0 1
69271: PUSH
69272: DOUBLE
69273: LD_INT 1
69275: DEC
69276: ST_TO_ADDR
69277: LD_INT 5
69279: PUSH
69280: FOR_TO
69281: IFFALSE 69360
// begin uc_nation := nation_nature ;
69283: LD_ADDR_OWVAR 21
69287: PUSH
69288: LD_INT 0
69290: ST_TO_ADDR
// uc_side := 0 ;
69291: LD_ADDR_OWVAR 20
69295: PUSH
69296: LD_INT 0
69298: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69299: LD_ADDR_OWVAR 29
69303: PUSH
69304: LD_INT 12
69306: PUSH
69307: LD_INT 12
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: ST_TO_ADDR
// hc_agressivity := 20 ;
69314: LD_ADDR_OWVAR 35
69318: PUSH
69319: LD_INT 20
69321: ST_TO_ADDR
// hc_class := class_tiger ;
69322: LD_ADDR_OWVAR 28
69326: PUSH
69327: LD_INT 14
69329: ST_TO_ADDR
// hc_gallery :=  ;
69330: LD_ADDR_OWVAR 33
69334: PUSH
69335: LD_STRING 
69337: ST_TO_ADDR
// hc_name :=  ;
69338: LD_ADDR_OWVAR 26
69342: PUSH
69343: LD_STRING 
69345: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69346: CALL_OW 44
69350: PPUSH
69351: LD_INT 0
69353: PPUSH
69354: CALL_OW 51
// end ;
69358: GO 69280
69360: POP
69361: POP
// end ;
69362: PPOPN 1
69364: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69365: LD_EXP 46
69369: PUSH
69370: LD_EXP 66
69374: AND
69375: IFFALSE 69384
69377: GO 69379
69379: DISABLE
// StreamSibBomb ;
69380: CALL 69385 0 0
69384: END
// export function StreamSibBomb ; var i , x , y ; begin
69385: LD_INT 0
69387: PPUSH
69388: PPUSH
69389: PPUSH
69390: PPUSH
// result := false ;
69391: LD_ADDR_VAR 0 1
69395: PUSH
69396: LD_INT 0
69398: ST_TO_ADDR
// for i := 1 to 16 do
69399: LD_ADDR_VAR 0 2
69403: PUSH
69404: DOUBLE
69405: LD_INT 1
69407: DEC
69408: ST_TO_ADDR
69409: LD_INT 16
69411: PUSH
69412: FOR_TO
69413: IFFALSE 69612
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69415: LD_ADDR_VAR 0 3
69419: PUSH
69420: LD_INT 10
69422: PUSH
69423: LD_INT 20
69425: PUSH
69426: LD_INT 30
69428: PUSH
69429: LD_INT 40
69431: PUSH
69432: LD_INT 50
69434: PUSH
69435: LD_INT 60
69437: PUSH
69438: LD_INT 70
69440: PUSH
69441: LD_INT 80
69443: PUSH
69444: LD_INT 90
69446: PUSH
69447: LD_INT 100
69449: PUSH
69450: LD_INT 110
69452: PUSH
69453: LD_INT 120
69455: PUSH
69456: LD_INT 130
69458: PUSH
69459: LD_INT 140
69461: PUSH
69462: LD_INT 150
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 1
69484: PPUSH
69485: LD_INT 15
69487: PPUSH
69488: CALL_OW 12
69492: ARRAY
69493: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69494: LD_ADDR_VAR 0 4
69498: PUSH
69499: LD_INT 10
69501: PUSH
69502: LD_INT 20
69504: PUSH
69505: LD_INT 30
69507: PUSH
69508: LD_INT 40
69510: PUSH
69511: LD_INT 50
69513: PUSH
69514: LD_INT 60
69516: PUSH
69517: LD_INT 70
69519: PUSH
69520: LD_INT 80
69522: PUSH
69523: LD_INT 90
69525: PUSH
69526: LD_INT 100
69528: PUSH
69529: LD_INT 110
69531: PUSH
69532: LD_INT 120
69534: PUSH
69535: LD_INT 130
69537: PUSH
69538: LD_INT 140
69540: PUSH
69541: LD_INT 150
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: PPUSH
69564: LD_INT 15
69566: PPUSH
69567: CALL_OW 12
69571: ARRAY
69572: ST_TO_ADDR
// if ValidHex ( x , y ) then
69573: LD_VAR 0 3
69577: PPUSH
69578: LD_VAR 0 4
69582: PPUSH
69583: CALL_OW 488
69587: IFFALSE 69610
// begin result := [ x , y ] ;
69589: LD_ADDR_VAR 0 1
69593: PUSH
69594: LD_VAR 0 3
69598: PUSH
69599: LD_VAR 0 4
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: ST_TO_ADDR
// break ;
69608: GO 69612
// end ; end ;
69610: GO 69412
69612: POP
69613: POP
// if result then
69614: LD_VAR 0 1
69618: IFFALSE 69678
// begin ToLua ( playSibBomb() ) ;
69620: LD_STRING playSibBomb()
69622: PPUSH
69623: CALL_OW 559
// wait ( 0 0$14 ) ;
69627: LD_INT 490
69629: PPUSH
69630: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69634: LD_VAR 0 1
69638: PUSH
69639: LD_INT 1
69641: ARRAY
69642: PPUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 2
69650: ARRAY
69651: PPUSH
69652: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 1
69663: ARRAY
69664: PPUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_INT 2
69672: ARRAY
69673: PPUSH
69674: CALL_OW 429
// end ; end ;
69678: LD_VAR 0 1
69682: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69683: LD_EXP 46
69687: PUSH
69688: LD_EXP 68
69692: AND
69693: IFFALSE 69705
69695: GO 69697
69697: DISABLE
// YouLost (  ) ;
69698: LD_STRING 
69700: PPUSH
69701: CALL_OW 104
69705: END
// every 0 0$1 trigger StreamModeActive and sFog do
69706: LD_EXP 46
69710: PUSH
69711: LD_EXP 67
69715: AND
69716: IFFALSE 69730
69718: GO 69720
69720: DISABLE
// FogOff ( your_side ) ;
69721: LD_OWVAR 2
69725: PPUSH
69726: CALL_OW 344
69730: END
// every 0 0$1 trigger StreamModeActive and sSun do
69731: LD_EXP 46
69735: PUSH
69736: LD_EXP 69
69740: AND
69741: IFFALSE 69769
69743: GO 69745
69745: DISABLE
// begin solar_recharge_percent := 0 ;
69746: LD_ADDR_OWVAR 79
69750: PUSH
69751: LD_INT 0
69753: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69754: LD_INT 10500
69756: PPUSH
69757: CALL_OW 67
// solar_recharge_percent := 100 ;
69761: LD_ADDR_OWVAR 79
69765: PUSH
69766: LD_INT 100
69768: ST_TO_ADDR
// end ;
69769: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69770: LD_EXP 46
69774: PUSH
69775: LD_EXP 70
69779: AND
69780: IFFALSE 70019
69782: GO 69784
69784: DISABLE
69785: LD_INT 0
69787: PPUSH
69788: PPUSH
69789: PPUSH
// begin tmp := [ ] ;
69790: LD_ADDR_VAR 0 3
69794: PUSH
69795: EMPTY
69796: ST_TO_ADDR
// for i := 1 to 6 do
69797: LD_ADDR_VAR 0 1
69801: PUSH
69802: DOUBLE
69803: LD_INT 1
69805: DEC
69806: ST_TO_ADDR
69807: LD_INT 6
69809: PUSH
69810: FOR_TO
69811: IFFALSE 69916
// begin uc_nation := nation_nature ;
69813: LD_ADDR_OWVAR 21
69817: PUSH
69818: LD_INT 0
69820: ST_TO_ADDR
// uc_side := 0 ;
69821: LD_ADDR_OWVAR 20
69825: PUSH
69826: LD_INT 0
69828: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69829: LD_ADDR_OWVAR 29
69833: PUSH
69834: LD_INT 12
69836: PUSH
69837: LD_INT 12
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: ST_TO_ADDR
// hc_agressivity := 20 ;
69844: LD_ADDR_OWVAR 35
69848: PUSH
69849: LD_INT 20
69851: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69852: LD_ADDR_OWVAR 28
69856: PUSH
69857: LD_INT 17
69859: ST_TO_ADDR
// hc_gallery :=  ;
69860: LD_ADDR_OWVAR 33
69864: PUSH
69865: LD_STRING 
69867: ST_TO_ADDR
// hc_name :=  ;
69868: LD_ADDR_OWVAR 26
69872: PUSH
69873: LD_STRING 
69875: ST_TO_ADDR
// un := CreateHuman ;
69876: LD_ADDR_VAR 0 2
69880: PUSH
69881: CALL_OW 44
69885: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69886: LD_VAR 0 2
69890: PPUSH
69891: LD_INT 1
69893: PPUSH
69894: CALL_OW 51
// tmp := tmp ^ un ;
69898: LD_ADDR_VAR 0 3
69902: PUSH
69903: LD_VAR 0 3
69907: PUSH
69908: LD_VAR 0 2
69912: ADD
69913: ST_TO_ADDR
// end ;
69914: GO 69810
69916: POP
69917: POP
// repeat wait ( 0 0$1 ) ;
69918: LD_INT 35
69920: PPUSH
69921: CALL_OW 67
// for un in tmp do
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_VAR 0 3
69934: PUSH
69935: FOR_IN
69936: IFFALSE 70010
// begin if IsDead ( un ) then
69938: LD_VAR 0 2
69942: PPUSH
69943: CALL_OW 301
69947: IFFALSE 69967
// begin tmp := tmp diff un ;
69949: LD_ADDR_VAR 0 3
69953: PUSH
69954: LD_VAR 0 3
69958: PUSH
69959: LD_VAR 0 2
69963: DIFF
69964: ST_TO_ADDR
// continue ;
69965: GO 69935
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69967: LD_VAR 0 2
69971: PPUSH
69972: LD_INT 3
69974: PUSH
69975: LD_INT 22
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PPUSH
69989: CALL_OW 69
69993: PPUSH
69994: LD_VAR 0 2
69998: PPUSH
69999: CALL_OW 74
70003: PPUSH
70004: CALL_OW 115
// end ;
70008: GO 69935
70010: POP
70011: POP
// until not tmp ;
70012: LD_VAR 0 3
70016: NOT
70017: IFFALSE 69918
// end ;
70019: PPOPN 3
70021: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70022: LD_EXP 46
70026: PUSH
70027: LD_EXP 71
70031: AND
70032: IFFALSE 70086
70034: GO 70036
70036: DISABLE
// begin ToLua ( displayTroll(); ) ;
70037: LD_STRING displayTroll();
70039: PPUSH
70040: CALL_OW 559
// wait ( 3 3$00 ) ;
70044: LD_INT 6300
70046: PPUSH
70047: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70051: LD_STRING hideTroll();
70053: PPUSH
70054: CALL_OW 559
// wait ( 1 1$00 ) ;
70058: LD_INT 2100
70060: PPUSH
70061: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70065: LD_STRING displayTroll();
70067: PPUSH
70068: CALL_OW 559
// wait ( 1 1$00 ) ;
70072: LD_INT 2100
70074: PPUSH
70075: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70079: LD_STRING hideTroll();
70081: PPUSH
70082: CALL_OW 559
// end ;
70086: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70087: LD_EXP 46
70091: PUSH
70092: LD_EXP 72
70096: AND
70097: IFFALSE 70160
70099: GO 70101
70101: DISABLE
70102: LD_INT 0
70104: PPUSH
// begin p := 0 ;
70105: LD_ADDR_VAR 0 1
70109: PUSH
70110: LD_INT 0
70112: ST_TO_ADDR
// repeat game_speed := 1 ;
70113: LD_ADDR_OWVAR 65
70117: PUSH
70118: LD_INT 1
70120: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70121: LD_INT 35
70123: PPUSH
70124: CALL_OW 67
// p := p + 1 ;
70128: LD_ADDR_VAR 0 1
70132: PUSH
70133: LD_VAR 0 1
70137: PUSH
70138: LD_INT 1
70140: PLUS
70141: ST_TO_ADDR
// until p >= 60 ;
70142: LD_VAR 0 1
70146: PUSH
70147: LD_INT 60
70149: GREATEREQUAL
70150: IFFALSE 70113
// game_speed := 4 ;
70152: LD_ADDR_OWVAR 65
70156: PUSH
70157: LD_INT 4
70159: ST_TO_ADDR
// end ;
70160: PPOPN 1
70162: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70163: LD_EXP 46
70167: PUSH
70168: LD_EXP 73
70172: AND
70173: IFFALSE 70319
70175: GO 70177
70177: DISABLE
70178: LD_INT 0
70180: PPUSH
70181: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70182: LD_ADDR_VAR 0 1
70186: PUSH
70187: LD_INT 22
70189: PUSH
70190: LD_OWVAR 2
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: PUSH
70202: LD_INT 30
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 30
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PPUSH
70231: CALL_OW 69
70235: ST_TO_ADDR
// if not depot then
70236: LD_VAR 0 1
70240: NOT
70241: IFFALSE 70245
// exit ;
70243: GO 70319
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70245: LD_ADDR_VAR 0 2
70249: PUSH
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 1
70257: PPUSH
70258: LD_VAR 0 1
70262: PPUSH
70263: CALL_OW 12
70267: ARRAY
70268: PPUSH
70269: CALL_OW 274
70273: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70274: LD_VAR 0 2
70278: PPUSH
70279: LD_INT 1
70281: PPUSH
70282: LD_INT 0
70284: PPUSH
70285: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70289: LD_VAR 0 2
70293: PPUSH
70294: LD_INT 2
70296: PPUSH
70297: LD_INT 0
70299: PPUSH
70300: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70304: LD_VAR 0 2
70308: PPUSH
70309: LD_INT 3
70311: PPUSH
70312: LD_INT 0
70314: PPUSH
70315: CALL_OW 277
// end ;
70319: PPOPN 2
70321: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70322: LD_EXP 46
70326: PUSH
70327: LD_EXP 74
70331: AND
70332: IFFALSE 70429
70334: GO 70336
70336: DISABLE
70337: LD_INT 0
70339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70340: LD_ADDR_VAR 0 1
70344: PUSH
70345: LD_INT 22
70347: PUSH
70348: LD_OWVAR 2
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 21
70359: PUSH
70360: LD_INT 1
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: LD_INT 23
70372: PUSH
70373: LD_INT 0
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: LIST
70388: PPUSH
70389: CALL_OW 69
70393: ST_TO_ADDR
// if not tmp then
70394: LD_VAR 0 1
70398: NOT
70399: IFFALSE 70403
// exit ;
70401: GO 70429
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70403: LD_VAR 0 1
70407: PUSH
70408: LD_INT 1
70410: PPUSH
70411: LD_VAR 0 1
70415: PPUSH
70416: CALL_OW 12
70420: ARRAY
70421: PPUSH
70422: LD_INT 200
70424: PPUSH
70425: CALL_OW 234
// end ;
70429: PPOPN 1
70431: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70432: LD_EXP 46
70436: PUSH
70437: LD_EXP 75
70441: AND
70442: IFFALSE 70521
70444: GO 70446
70446: DISABLE
70447: LD_INT 0
70449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70450: LD_ADDR_VAR 0 1
70454: PUSH
70455: LD_INT 22
70457: PUSH
70458: LD_OWVAR 2
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 21
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PPUSH
70481: CALL_OW 69
70485: ST_TO_ADDR
// if not tmp then
70486: LD_VAR 0 1
70490: NOT
70491: IFFALSE 70495
// exit ;
70493: GO 70521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70495: LD_VAR 0 1
70499: PUSH
70500: LD_INT 1
70502: PPUSH
70503: LD_VAR 0 1
70507: PPUSH
70508: CALL_OW 12
70512: ARRAY
70513: PPUSH
70514: LD_INT 60
70516: PPUSH
70517: CALL_OW 234
// end ;
70521: PPOPN 1
70523: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70524: LD_EXP 46
70528: PUSH
70529: LD_EXP 76
70533: AND
70534: IFFALSE 70633
70536: GO 70538
70538: DISABLE
70539: LD_INT 0
70541: PPUSH
70542: PPUSH
// begin enable ;
70543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70544: LD_ADDR_VAR 0 1
70548: PUSH
70549: LD_INT 22
70551: PUSH
70552: LD_OWVAR 2
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 61
70563: PUSH
70564: EMPTY
70565: LIST
70566: PUSH
70567: LD_INT 33
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: LIST
70581: PPUSH
70582: CALL_OW 69
70586: ST_TO_ADDR
// if not tmp then
70587: LD_VAR 0 1
70591: NOT
70592: IFFALSE 70596
// exit ;
70594: GO 70633
// for i in tmp do
70596: LD_ADDR_VAR 0 2
70600: PUSH
70601: LD_VAR 0 1
70605: PUSH
70606: FOR_IN
70607: IFFALSE 70631
// if IsControledBy ( i ) then
70609: LD_VAR 0 2
70613: PPUSH
70614: CALL_OW 312
70618: IFFALSE 70629
// ComUnlink ( i ) ;
70620: LD_VAR 0 2
70624: PPUSH
70625: CALL_OW 136
70629: GO 70606
70631: POP
70632: POP
// end ;
70633: PPOPN 2
70635: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70636: LD_EXP 46
70640: PUSH
70641: LD_EXP 77
70645: AND
70646: IFFALSE 70786
70648: GO 70650
70650: DISABLE
70651: LD_INT 0
70653: PPUSH
70654: PPUSH
// begin ToLua ( displayPowell(); ) ;
70655: LD_STRING displayPowell();
70657: PPUSH
70658: CALL_OW 559
// uc_side := 0 ;
70662: LD_ADDR_OWVAR 20
70666: PUSH
70667: LD_INT 0
70669: ST_TO_ADDR
// uc_nation := 2 ;
70670: LD_ADDR_OWVAR 21
70674: PUSH
70675: LD_INT 2
70677: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70678: LD_ADDR_OWVAR 37
70682: PUSH
70683: LD_INT 14
70685: ST_TO_ADDR
// vc_engine := engine_siberite ;
70686: LD_ADDR_OWVAR 39
70690: PUSH
70691: LD_INT 3
70693: ST_TO_ADDR
// vc_control := control_apeman ;
70694: LD_ADDR_OWVAR 38
70698: PUSH
70699: LD_INT 5
70701: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70702: LD_ADDR_OWVAR 40
70706: PUSH
70707: LD_INT 29
70709: ST_TO_ADDR
// un := CreateVehicle ;
70710: LD_ADDR_VAR 0 2
70714: PUSH
70715: CALL_OW 45
70719: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70720: LD_VAR 0 2
70724: PPUSH
70725: LD_INT 1
70727: PPUSH
70728: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70732: LD_INT 35
70734: PPUSH
70735: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70739: LD_VAR 0 2
70743: PPUSH
70744: LD_INT 22
70746: PUSH
70747: LD_OWVAR 2
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PPUSH
70756: CALL_OW 69
70760: PPUSH
70761: LD_VAR 0 2
70765: PPUSH
70766: CALL_OW 74
70770: PPUSH
70771: CALL_OW 115
// until IsDead ( un ) ;
70775: LD_VAR 0 2
70779: PPUSH
70780: CALL_OW 301
70784: IFFALSE 70732
// end ;
70786: PPOPN 2
70788: END
// every 0 0$1 trigger StreamModeActive and sStu do
70789: LD_EXP 46
70793: PUSH
70794: LD_EXP 85
70798: AND
70799: IFFALSE 70815
70801: GO 70803
70803: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70804: LD_STRING displayStucuk();
70806: PPUSH
70807: CALL_OW 559
// ResetFog ;
70811: CALL_OW 335
// end ;
70815: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70816: LD_EXP 46
70820: PUSH
70821: LD_EXP 78
70825: AND
70826: IFFALSE 70967
70828: GO 70830
70830: DISABLE
70831: LD_INT 0
70833: PPUSH
70834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70835: LD_ADDR_VAR 0 2
70839: PUSH
70840: LD_INT 22
70842: PUSH
70843: LD_OWVAR 2
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 21
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PPUSH
70866: CALL_OW 69
70870: ST_TO_ADDR
// if not tmp then
70871: LD_VAR 0 2
70875: NOT
70876: IFFALSE 70880
// exit ;
70878: GO 70967
// un := tmp [ rand ( 1 , tmp ) ] ;
70880: LD_ADDR_VAR 0 1
70884: PUSH
70885: LD_VAR 0 2
70889: PUSH
70890: LD_INT 1
70892: PPUSH
70893: LD_VAR 0 2
70897: PPUSH
70898: CALL_OW 12
70902: ARRAY
70903: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70904: LD_VAR 0 1
70908: PPUSH
70909: LD_INT 0
70911: PPUSH
70912: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70916: LD_VAR 0 1
70920: PPUSH
70921: LD_OWVAR 3
70925: PUSH
70926: LD_VAR 0 1
70930: DIFF
70931: PPUSH
70932: LD_VAR 0 1
70936: PPUSH
70937: CALL_OW 74
70941: PPUSH
70942: CALL_OW 115
// wait ( 0 0$20 ) ;
70946: LD_INT 700
70948: PPUSH
70949: CALL_OW 67
// SetSide ( un , your_side ) ;
70953: LD_VAR 0 1
70957: PPUSH
70958: LD_OWVAR 2
70962: PPUSH
70963: CALL_OW 235
// end ;
70967: PPOPN 2
70969: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70970: LD_EXP 46
70974: PUSH
70975: LD_EXP 79
70979: AND
70980: IFFALSE 71086
70982: GO 70984
70984: DISABLE
70985: LD_INT 0
70987: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70988: LD_ADDR_VAR 0 1
70992: PUSH
70993: LD_INT 22
70995: PUSH
70996: LD_OWVAR 2
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 2
71007: PUSH
71008: LD_INT 30
71010: PUSH
71011: LD_INT 0
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 30
71020: PUSH
71021: LD_INT 1
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PPUSH
71037: CALL_OW 69
71041: ST_TO_ADDR
// if not depot then
71042: LD_VAR 0 1
71046: NOT
71047: IFFALSE 71051
// exit ;
71049: GO 71086
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71051: LD_VAR 0 1
71055: PUSH
71056: LD_INT 1
71058: ARRAY
71059: PPUSH
71060: CALL_OW 250
71064: PPUSH
71065: LD_VAR 0 1
71069: PUSH
71070: LD_INT 1
71072: ARRAY
71073: PPUSH
71074: CALL_OW 251
71078: PPUSH
71079: LD_INT 70
71081: PPUSH
71082: CALL_OW 495
// end ;
71086: PPOPN 1
71088: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71089: LD_EXP 46
71093: PUSH
71094: LD_EXP 80
71098: AND
71099: IFFALSE 71310
71101: GO 71103
71103: DISABLE
71104: LD_INT 0
71106: PPUSH
71107: PPUSH
71108: PPUSH
71109: PPUSH
71110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71111: LD_ADDR_VAR 0 5
71115: PUSH
71116: LD_INT 22
71118: PUSH
71119: LD_OWVAR 2
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 21
71130: PUSH
71131: LD_INT 1
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PPUSH
71142: CALL_OW 69
71146: ST_TO_ADDR
// if not tmp then
71147: LD_VAR 0 5
71151: NOT
71152: IFFALSE 71156
// exit ;
71154: GO 71310
// for i in tmp do
71156: LD_ADDR_VAR 0 1
71160: PUSH
71161: LD_VAR 0 5
71165: PUSH
71166: FOR_IN
71167: IFFALSE 71308
// begin d := rand ( 0 , 5 ) ;
71169: LD_ADDR_VAR 0 4
71173: PUSH
71174: LD_INT 0
71176: PPUSH
71177: LD_INT 5
71179: PPUSH
71180: CALL_OW 12
71184: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71185: LD_ADDR_VAR 0 2
71189: PUSH
71190: LD_VAR 0 1
71194: PPUSH
71195: CALL_OW 250
71199: PPUSH
71200: LD_VAR 0 4
71204: PPUSH
71205: LD_INT 3
71207: PPUSH
71208: LD_INT 12
71210: PPUSH
71211: CALL_OW 12
71215: PPUSH
71216: CALL_OW 272
71220: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71221: LD_ADDR_VAR 0 3
71225: PUSH
71226: LD_VAR 0 1
71230: PPUSH
71231: CALL_OW 251
71235: PPUSH
71236: LD_VAR 0 4
71240: PPUSH
71241: LD_INT 3
71243: PPUSH
71244: LD_INT 12
71246: PPUSH
71247: CALL_OW 12
71251: PPUSH
71252: CALL_OW 273
71256: ST_TO_ADDR
// if ValidHex ( x , y ) then
71257: LD_VAR 0 2
71261: PPUSH
71262: LD_VAR 0 3
71266: PPUSH
71267: CALL_OW 488
71271: IFFALSE 71306
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71273: LD_VAR 0 1
71277: PPUSH
71278: LD_VAR 0 2
71282: PPUSH
71283: LD_VAR 0 3
71287: PPUSH
71288: LD_INT 3
71290: PPUSH
71291: LD_INT 6
71293: PPUSH
71294: CALL_OW 12
71298: PPUSH
71299: LD_INT 1
71301: PPUSH
71302: CALL_OW 483
// end ;
71306: GO 71166
71308: POP
71309: POP
// end ;
71310: PPOPN 5
71312: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71313: LD_EXP 46
71317: PUSH
71318: LD_EXP 81
71322: AND
71323: IFFALSE 71417
71325: GO 71327
71327: DISABLE
71328: LD_INT 0
71330: PPUSH
71331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71332: LD_ADDR_VAR 0 2
71336: PUSH
71337: LD_INT 22
71339: PUSH
71340: LD_OWVAR 2
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 32
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 21
71361: PUSH
71362: LD_INT 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: LIST
71373: PPUSH
71374: CALL_OW 69
71378: ST_TO_ADDR
// if not tmp then
71379: LD_VAR 0 2
71383: NOT
71384: IFFALSE 71388
// exit ;
71386: GO 71417
// for i in tmp do
71388: LD_ADDR_VAR 0 1
71392: PUSH
71393: LD_VAR 0 2
71397: PUSH
71398: FOR_IN
71399: IFFALSE 71415
// SetFuel ( i , 0 ) ;
71401: LD_VAR 0 1
71405: PPUSH
71406: LD_INT 0
71408: PPUSH
71409: CALL_OW 240
71413: GO 71398
71415: POP
71416: POP
// end ;
71417: PPOPN 2
71419: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71420: LD_EXP 46
71424: PUSH
71425: LD_EXP 82
71429: AND
71430: IFFALSE 71496
71432: GO 71434
71434: DISABLE
71435: LD_INT 0
71437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71438: LD_ADDR_VAR 0 1
71442: PUSH
71443: LD_INT 22
71445: PUSH
71446: LD_OWVAR 2
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 30
71457: PUSH
71458: LD_INT 29
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PPUSH
71469: CALL_OW 69
71473: ST_TO_ADDR
// if not tmp then
71474: LD_VAR 0 1
71478: NOT
71479: IFFALSE 71483
// exit ;
71481: GO 71496
// DestroyUnit ( tmp [ 1 ] ) ;
71483: LD_VAR 0 1
71487: PUSH
71488: LD_INT 1
71490: ARRAY
71491: PPUSH
71492: CALL_OW 65
// end ;
71496: PPOPN 1
71498: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71499: LD_EXP 46
71503: PUSH
71504: LD_EXP 84
71508: AND
71509: IFFALSE 71638
71511: GO 71513
71513: DISABLE
71514: LD_INT 0
71516: PPUSH
// begin uc_side := 0 ;
71517: LD_ADDR_OWVAR 20
71521: PUSH
71522: LD_INT 0
71524: ST_TO_ADDR
// uc_nation := nation_arabian ;
71525: LD_ADDR_OWVAR 21
71529: PUSH
71530: LD_INT 2
71532: ST_TO_ADDR
// hc_gallery :=  ;
71533: LD_ADDR_OWVAR 33
71537: PUSH
71538: LD_STRING 
71540: ST_TO_ADDR
// hc_name :=  ;
71541: LD_ADDR_OWVAR 26
71545: PUSH
71546: LD_STRING 
71548: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71549: LD_INT 1
71551: PPUSH
71552: LD_INT 11
71554: PPUSH
71555: LD_INT 10
71557: PPUSH
71558: CALL_OW 380
// un := CreateHuman ;
71562: LD_ADDR_VAR 0 1
71566: PUSH
71567: CALL_OW 44
71571: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71572: LD_VAR 0 1
71576: PPUSH
71577: LD_INT 1
71579: PPUSH
71580: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71584: LD_INT 35
71586: PPUSH
71587: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71591: LD_VAR 0 1
71595: PPUSH
71596: LD_INT 22
71598: PUSH
71599: LD_OWVAR 2
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PPUSH
71608: CALL_OW 69
71612: PPUSH
71613: LD_VAR 0 1
71617: PPUSH
71618: CALL_OW 74
71622: PPUSH
71623: CALL_OW 115
// until IsDead ( un ) ;
71627: LD_VAR 0 1
71631: PPUSH
71632: CALL_OW 301
71636: IFFALSE 71584
// end ;
71638: PPOPN 1
71640: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71641: LD_EXP 46
71645: PUSH
71646: LD_EXP 86
71650: AND
71651: IFFALSE 71663
71653: GO 71655
71655: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71656: LD_STRING earthquake(getX(game), 0, 32)
71658: PPUSH
71659: CALL_OW 559
71663: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71664: LD_EXP 46
71668: PUSH
71669: LD_EXP 87
71673: AND
71674: IFFALSE 71765
71676: GO 71678
71678: DISABLE
71679: LD_INT 0
71681: PPUSH
// begin enable ;
71682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71683: LD_ADDR_VAR 0 1
71687: PUSH
71688: LD_INT 22
71690: PUSH
71691: LD_OWVAR 2
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 21
71702: PUSH
71703: LD_INT 2
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 33
71712: PUSH
71713: LD_INT 3
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: LIST
71724: PPUSH
71725: CALL_OW 69
71729: ST_TO_ADDR
// if not tmp then
71730: LD_VAR 0 1
71734: NOT
71735: IFFALSE 71739
// exit ;
71737: GO 71765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71739: LD_VAR 0 1
71743: PUSH
71744: LD_INT 1
71746: PPUSH
71747: LD_VAR 0 1
71751: PPUSH
71752: CALL_OW 12
71756: ARRAY
71757: PPUSH
71758: LD_INT 1
71760: PPUSH
71761: CALL_OW 234
// end ;
71765: PPOPN 1
71767: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71768: LD_EXP 46
71772: PUSH
71773: LD_EXP 88
71777: AND
71778: IFFALSE 71919
71780: GO 71782
71782: DISABLE
71783: LD_INT 0
71785: PPUSH
71786: PPUSH
71787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71788: LD_ADDR_VAR 0 3
71792: PUSH
71793: LD_INT 22
71795: PUSH
71796: LD_OWVAR 2
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 25
71807: PUSH
71808: LD_INT 1
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PPUSH
71819: CALL_OW 69
71823: ST_TO_ADDR
// if not tmp then
71824: LD_VAR 0 3
71828: NOT
71829: IFFALSE 71833
// exit ;
71831: GO 71919
// un := tmp [ rand ( 1 , tmp ) ] ;
71833: LD_ADDR_VAR 0 2
71837: PUSH
71838: LD_VAR 0 3
71842: PUSH
71843: LD_INT 1
71845: PPUSH
71846: LD_VAR 0 3
71850: PPUSH
71851: CALL_OW 12
71855: ARRAY
71856: ST_TO_ADDR
// if Crawls ( un ) then
71857: LD_VAR 0 2
71861: PPUSH
71862: CALL_OW 318
71866: IFFALSE 71877
// ComWalk ( un ) ;
71868: LD_VAR 0 2
71872: PPUSH
71873: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71877: LD_VAR 0 2
71881: PPUSH
71882: LD_INT 9
71884: PPUSH
71885: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71889: LD_INT 28
71891: PPUSH
71892: LD_OWVAR 2
71896: PPUSH
71897: LD_INT 2
71899: PPUSH
71900: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71904: LD_INT 29
71906: PPUSH
71907: LD_OWVAR 2
71911: PPUSH
71912: LD_INT 2
71914: PPUSH
71915: CALL_OW 322
// end ;
71919: PPOPN 3
71921: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71922: LD_EXP 46
71926: PUSH
71927: LD_EXP 89
71931: AND
71932: IFFALSE 72043
71934: GO 71936
71936: DISABLE
71937: LD_INT 0
71939: PPUSH
71940: PPUSH
71941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71942: LD_ADDR_VAR 0 3
71946: PUSH
71947: LD_INT 22
71949: PUSH
71950: LD_OWVAR 2
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 25
71961: PUSH
71962: LD_INT 1
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PPUSH
71973: CALL_OW 69
71977: ST_TO_ADDR
// if not tmp then
71978: LD_VAR 0 3
71982: NOT
71983: IFFALSE 71987
// exit ;
71985: GO 72043
// un := tmp [ rand ( 1 , tmp ) ] ;
71987: LD_ADDR_VAR 0 2
71991: PUSH
71992: LD_VAR 0 3
71996: PUSH
71997: LD_INT 1
71999: PPUSH
72000: LD_VAR 0 3
72004: PPUSH
72005: CALL_OW 12
72009: ARRAY
72010: ST_TO_ADDR
// if Crawls ( un ) then
72011: LD_VAR 0 2
72015: PPUSH
72016: CALL_OW 318
72020: IFFALSE 72031
// ComWalk ( un ) ;
72022: LD_VAR 0 2
72026: PPUSH
72027: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72031: LD_VAR 0 2
72035: PPUSH
72036: LD_INT 8
72038: PPUSH
72039: CALL_OW 336
// end ;
72043: PPOPN 3
72045: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72046: LD_EXP 46
72050: PUSH
72051: LD_EXP 90
72055: AND
72056: IFFALSE 72200
72058: GO 72060
72060: DISABLE
72061: LD_INT 0
72063: PPUSH
72064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72065: LD_ADDR_VAR 0 2
72069: PUSH
72070: LD_INT 22
72072: PUSH
72073: LD_OWVAR 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 21
72084: PUSH
72085: LD_INT 2
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 2
72094: PUSH
72095: LD_INT 34
72097: PUSH
72098: LD_INT 12
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 34
72107: PUSH
72108: LD_INT 51
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 34
72117: PUSH
72118: LD_INT 32
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: PPUSH
72136: CALL_OW 69
72140: ST_TO_ADDR
// if not tmp then
72141: LD_VAR 0 2
72145: NOT
72146: IFFALSE 72150
// exit ;
72148: GO 72200
// for i in tmp do
72150: LD_ADDR_VAR 0 1
72154: PUSH
72155: LD_VAR 0 2
72159: PUSH
72160: FOR_IN
72161: IFFALSE 72198
// if GetCargo ( i , mat_artifact ) = 0 then
72163: LD_VAR 0 1
72167: PPUSH
72168: LD_INT 4
72170: PPUSH
72171: CALL_OW 289
72175: PUSH
72176: LD_INT 0
72178: EQUAL
72179: IFFALSE 72196
// SetCargo ( i , mat_siberit , 100 ) ;
72181: LD_VAR 0 1
72185: PPUSH
72186: LD_INT 3
72188: PPUSH
72189: LD_INT 100
72191: PPUSH
72192: CALL_OW 290
72196: GO 72160
72198: POP
72199: POP
// end ;
72200: PPOPN 2
72202: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72203: LD_EXP 46
72207: PUSH
72208: LD_EXP 91
72212: AND
72213: IFFALSE 72396
72215: GO 72217
72217: DISABLE
72218: LD_INT 0
72220: PPUSH
72221: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72222: LD_ADDR_VAR 0 2
72226: PUSH
72227: LD_INT 22
72229: PUSH
72230: LD_OWVAR 2
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PPUSH
72239: CALL_OW 69
72243: ST_TO_ADDR
// if not tmp then
72244: LD_VAR 0 2
72248: NOT
72249: IFFALSE 72253
// exit ;
72251: GO 72396
// for i := 1 to 2 do
72253: LD_ADDR_VAR 0 1
72257: PUSH
72258: DOUBLE
72259: LD_INT 1
72261: DEC
72262: ST_TO_ADDR
72263: LD_INT 2
72265: PUSH
72266: FOR_TO
72267: IFFALSE 72394
// begin uc_side := your_side ;
72269: LD_ADDR_OWVAR 20
72273: PUSH
72274: LD_OWVAR 2
72278: ST_TO_ADDR
// uc_nation := nation_american ;
72279: LD_ADDR_OWVAR 21
72283: PUSH
72284: LD_INT 1
72286: ST_TO_ADDR
// vc_chassis := us_morphling ;
72287: LD_ADDR_OWVAR 37
72291: PUSH
72292: LD_INT 5
72294: ST_TO_ADDR
// vc_engine := engine_siberite ;
72295: LD_ADDR_OWVAR 39
72299: PUSH
72300: LD_INT 3
72302: ST_TO_ADDR
// vc_control := control_computer ;
72303: LD_ADDR_OWVAR 38
72307: PUSH
72308: LD_INT 3
72310: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72311: LD_ADDR_OWVAR 40
72315: PUSH
72316: LD_INT 10
72318: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72319: LD_VAR 0 2
72323: PUSH
72324: LD_INT 1
72326: ARRAY
72327: PPUSH
72328: CALL_OW 310
72332: NOT
72333: IFFALSE 72380
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72335: CALL_OW 45
72339: PPUSH
72340: LD_VAR 0 2
72344: PUSH
72345: LD_INT 1
72347: ARRAY
72348: PPUSH
72349: CALL_OW 250
72353: PPUSH
72354: LD_VAR 0 2
72358: PUSH
72359: LD_INT 1
72361: ARRAY
72362: PPUSH
72363: CALL_OW 251
72367: PPUSH
72368: LD_INT 12
72370: PPUSH
72371: LD_INT 1
72373: PPUSH
72374: CALL_OW 50
72378: GO 72392
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72380: CALL_OW 45
72384: PPUSH
72385: LD_INT 1
72387: PPUSH
72388: CALL_OW 51
// end ;
72392: GO 72266
72394: POP
72395: POP
// end ;
72396: PPOPN 2
72398: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72399: LD_EXP 46
72403: PUSH
72404: LD_EXP 92
72408: AND
72409: IFFALSE 72631
72411: GO 72413
72413: DISABLE
72414: LD_INT 0
72416: PPUSH
72417: PPUSH
72418: PPUSH
72419: PPUSH
72420: PPUSH
72421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72422: LD_ADDR_VAR 0 6
72426: PUSH
72427: LD_INT 22
72429: PUSH
72430: LD_OWVAR 2
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 21
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 3
72451: PUSH
72452: LD_INT 23
72454: PUSH
72455: LD_INT 0
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: LIST
72470: PPUSH
72471: CALL_OW 69
72475: ST_TO_ADDR
// if not tmp then
72476: LD_VAR 0 6
72480: NOT
72481: IFFALSE 72485
// exit ;
72483: GO 72631
// s1 := rand ( 1 , 4 ) ;
72485: LD_ADDR_VAR 0 2
72489: PUSH
72490: LD_INT 1
72492: PPUSH
72493: LD_INT 4
72495: PPUSH
72496: CALL_OW 12
72500: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72501: LD_ADDR_VAR 0 4
72505: PUSH
72506: LD_VAR 0 6
72510: PUSH
72511: LD_INT 1
72513: ARRAY
72514: PPUSH
72515: LD_VAR 0 2
72519: PPUSH
72520: CALL_OW 259
72524: ST_TO_ADDR
// if s1 = 1 then
72525: LD_VAR 0 2
72529: PUSH
72530: LD_INT 1
72532: EQUAL
72533: IFFALSE 72553
// s2 := rand ( 2 , 4 ) else
72535: LD_ADDR_VAR 0 3
72539: PUSH
72540: LD_INT 2
72542: PPUSH
72543: LD_INT 4
72545: PPUSH
72546: CALL_OW 12
72550: ST_TO_ADDR
72551: GO 72561
// s2 := 1 ;
72553: LD_ADDR_VAR 0 3
72557: PUSH
72558: LD_INT 1
72560: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72561: LD_ADDR_VAR 0 5
72565: PUSH
72566: LD_VAR 0 6
72570: PUSH
72571: LD_INT 1
72573: ARRAY
72574: PPUSH
72575: LD_VAR 0 3
72579: PPUSH
72580: CALL_OW 259
72584: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72585: LD_VAR 0 6
72589: PUSH
72590: LD_INT 1
72592: ARRAY
72593: PPUSH
72594: LD_VAR 0 2
72598: PPUSH
72599: LD_VAR 0 5
72603: PPUSH
72604: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72608: LD_VAR 0 6
72612: PUSH
72613: LD_INT 1
72615: ARRAY
72616: PPUSH
72617: LD_VAR 0 3
72621: PPUSH
72622: LD_VAR 0 4
72626: PPUSH
72627: CALL_OW 237
// end ;
72631: PPOPN 6
72633: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72634: LD_EXP 46
72638: PUSH
72639: LD_EXP 93
72643: AND
72644: IFFALSE 72723
72646: GO 72648
72648: DISABLE
72649: LD_INT 0
72651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72652: LD_ADDR_VAR 0 1
72656: PUSH
72657: LD_INT 22
72659: PUSH
72660: LD_OWVAR 2
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 30
72671: PUSH
72672: LD_INT 3
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PPUSH
72683: CALL_OW 69
72687: ST_TO_ADDR
// if not tmp then
72688: LD_VAR 0 1
72692: NOT
72693: IFFALSE 72697
// exit ;
72695: GO 72723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72697: LD_VAR 0 1
72701: PUSH
72702: LD_INT 1
72704: PPUSH
72705: LD_VAR 0 1
72709: PPUSH
72710: CALL_OW 12
72714: ARRAY
72715: PPUSH
72716: LD_INT 1
72718: PPUSH
72719: CALL_OW 234
// end ;
72723: PPOPN 1
72725: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72726: LD_EXP 46
72730: PUSH
72731: LD_EXP 94
72735: AND
72736: IFFALSE 72848
72738: GO 72740
72740: DISABLE
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72745: LD_ADDR_VAR 0 2
72749: PUSH
72750: LD_INT 22
72752: PUSH
72753: LD_OWVAR 2
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: LD_INT 30
72767: PUSH
72768: LD_INT 27
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 30
72777: PUSH
72778: LD_INT 26
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 30
72787: PUSH
72788: LD_INT 28
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PPUSH
72805: CALL_OW 69
72809: ST_TO_ADDR
// if not tmp then
72810: LD_VAR 0 2
72814: NOT
72815: IFFALSE 72819
// exit ;
72817: GO 72848
// for i in tmp do
72819: LD_ADDR_VAR 0 1
72823: PUSH
72824: LD_VAR 0 2
72828: PUSH
72829: FOR_IN
72830: IFFALSE 72846
// SetLives ( i , 1 ) ;
72832: LD_VAR 0 1
72836: PPUSH
72837: LD_INT 1
72839: PPUSH
72840: CALL_OW 234
72844: GO 72829
72846: POP
72847: POP
// end ;
72848: PPOPN 2
72850: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72851: LD_EXP 46
72855: PUSH
72856: LD_EXP 95
72860: AND
72861: IFFALSE 73148
72863: GO 72865
72865: DISABLE
72866: LD_INT 0
72868: PPUSH
72869: PPUSH
72870: PPUSH
// begin i := rand ( 1 , 7 ) ;
72871: LD_ADDR_VAR 0 1
72875: PUSH
72876: LD_INT 1
72878: PPUSH
72879: LD_INT 7
72881: PPUSH
72882: CALL_OW 12
72886: ST_TO_ADDR
// case i of 1 :
72887: LD_VAR 0 1
72891: PUSH
72892: LD_INT 1
72894: DOUBLE
72895: EQUAL
72896: IFTRUE 72900
72898: GO 72910
72900: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72901: LD_STRING earthquake(getX(game), 0, 32)
72903: PPUSH
72904: CALL_OW 559
72908: GO 73148
72910: LD_INT 2
72912: DOUBLE
72913: EQUAL
72914: IFTRUE 72918
72916: GO 72932
72918: POP
// begin ToLua ( displayStucuk(); ) ;
72919: LD_STRING displayStucuk();
72921: PPUSH
72922: CALL_OW 559
// ResetFog ;
72926: CALL_OW 335
// end ; 3 :
72930: GO 73148
72932: LD_INT 3
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72940
72938: GO 73044
72940: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72941: LD_ADDR_VAR 0 2
72945: PUSH
72946: LD_INT 22
72948: PUSH
72949: LD_OWVAR 2
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 25
72960: PUSH
72961: LD_INT 1
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PPUSH
72972: CALL_OW 69
72976: ST_TO_ADDR
// if not tmp then
72977: LD_VAR 0 2
72981: NOT
72982: IFFALSE 72986
// exit ;
72984: GO 73148
// un := tmp [ rand ( 1 , tmp ) ] ;
72986: LD_ADDR_VAR 0 3
72990: PUSH
72991: LD_VAR 0 2
72995: PUSH
72996: LD_INT 1
72998: PPUSH
72999: LD_VAR 0 2
73003: PPUSH
73004: CALL_OW 12
73008: ARRAY
73009: ST_TO_ADDR
// if Crawls ( un ) then
73010: LD_VAR 0 3
73014: PPUSH
73015: CALL_OW 318
73019: IFFALSE 73030
// ComWalk ( un ) ;
73021: LD_VAR 0 3
73025: PPUSH
73026: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73030: LD_VAR 0 3
73034: PPUSH
73035: LD_INT 8
73037: PPUSH
73038: CALL_OW 336
// end ; 4 :
73042: GO 73148
73044: LD_INT 4
73046: DOUBLE
73047: EQUAL
73048: IFTRUE 73052
73050: GO 73126
73052: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73053: LD_ADDR_VAR 0 2
73057: PUSH
73058: LD_INT 22
73060: PUSH
73061: LD_OWVAR 2
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 30
73072: PUSH
73073: LD_INT 29
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PPUSH
73084: CALL_OW 69
73088: ST_TO_ADDR
// if not tmp then
73089: LD_VAR 0 2
73093: NOT
73094: IFFALSE 73098
// exit ;
73096: GO 73148
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73098: LD_VAR 0 2
73102: PUSH
73103: LD_INT 1
73105: ARRAY
73106: PPUSH
73107: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73111: LD_VAR 0 2
73115: PUSH
73116: LD_INT 1
73118: ARRAY
73119: PPUSH
73120: CALL_OW 65
// end ; 5 .. 7 :
73124: GO 73148
73126: LD_INT 5
73128: DOUBLE
73129: GREATEREQUAL
73130: IFFALSE 73138
73132: LD_INT 7
73134: DOUBLE
73135: LESSEQUAL
73136: IFTRUE 73140
73138: GO 73147
73140: POP
// StreamSibBomb ; end ;
73141: CALL 69385 0 0
73145: GO 73148
73147: POP
// end ;
73148: PPOPN 3
73150: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73151: LD_EXP 46
73155: PUSH
73156: LD_EXP 96
73160: AND
73161: IFFALSE 73317
73163: GO 73165
73165: DISABLE
73166: LD_INT 0
73168: PPUSH
73169: PPUSH
73170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73171: LD_ADDR_VAR 0 2
73175: PUSH
73176: LD_INT 81
73178: PUSH
73179: LD_OWVAR 2
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 2
73190: PUSH
73191: LD_INT 21
73193: PUSH
73194: LD_INT 1
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 21
73203: PUSH
73204: LD_INT 2
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: LIST
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PPUSH
73220: CALL_OW 69
73224: ST_TO_ADDR
// if not tmp then
73225: LD_VAR 0 2
73229: NOT
73230: IFFALSE 73234
// exit ;
73232: GO 73317
// p := 0 ;
73234: LD_ADDR_VAR 0 3
73238: PUSH
73239: LD_INT 0
73241: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73242: LD_INT 35
73244: PPUSH
73245: CALL_OW 67
// p := p + 1 ;
73249: LD_ADDR_VAR 0 3
73253: PUSH
73254: LD_VAR 0 3
73258: PUSH
73259: LD_INT 1
73261: PLUS
73262: ST_TO_ADDR
// for i in tmp do
73263: LD_ADDR_VAR 0 1
73267: PUSH
73268: LD_VAR 0 2
73272: PUSH
73273: FOR_IN
73274: IFFALSE 73305
// if GetLives ( i ) < 1000 then
73276: LD_VAR 0 1
73280: PPUSH
73281: CALL_OW 256
73285: PUSH
73286: LD_INT 1000
73288: LESS
73289: IFFALSE 73303
// SetLives ( i , 1000 ) ;
73291: LD_VAR 0 1
73295: PPUSH
73296: LD_INT 1000
73298: PPUSH
73299: CALL_OW 234
73303: GO 73273
73305: POP
73306: POP
// until p > 20 ;
73307: LD_VAR 0 3
73311: PUSH
73312: LD_INT 20
73314: GREATER
73315: IFFALSE 73242
// end ;
73317: PPOPN 3
73319: END
// every 0 0$1 trigger StreamModeActive and sTime do
73320: LD_EXP 46
73324: PUSH
73325: LD_EXP 97
73329: AND
73330: IFFALSE 73365
73332: GO 73334
73334: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73335: LD_INT 28
73337: PPUSH
73338: LD_OWVAR 2
73342: PPUSH
73343: LD_INT 2
73345: PPUSH
73346: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73350: LD_INT 30
73352: PPUSH
73353: LD_OWVAR 2
73357: PPUSH
73358: LD_INT 2
73360: PPUSH
73361: CALL_OW 322
// end ;
73365: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73366: LD_EXP 46
73370: PUSH
73371: LD_EXP 98
73375: AND
73376: IFFALSE 73497
73378: GO 73380
73380: DISABLE
73381: LD_INT 0
73383: PPUSH
73384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73385: LD_ADDR_VAR 0 2
73389: PUSH
73390: LD_INT 22
73392: PUSH
73393: LD_OWVAR 2
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 21
73404: PUSH
73405: LD_INT 1
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 3
73414: PUSH
73415: LD_INT 23
73417: PUSH
73418: LD_INT 0
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: LIST
73433: PPUSH
73434: CALL_OW 69
73438: ST_TO_ADDR
// if not tmp then
73439: LD_VAR 0 2
73443: NOT
73444: IFFALSE 73448
// exit ;
73446: GO 73497
// for i in tmp do
73448: LD_ADDR_VAR 0 1
73452: PUSH
73453: LD_VAR 0 2
73457: PUSH
73458: FOR_IN
73459: IFFALSE 73495
// begin if Crawls ( i ) then
73461: LD_VAR 0 1
73465: PPUSH
73466: CALL_OW 318
73470: IFFALSE 73481
// ComWalk ( i ) ;
73472: LD_VAR 0 1
73476: PPUSH
73477: CALL_OW 138
// SetClass ( i , 2 ) ;
73481: LD_VAR 0 1
73485: PPUSH
73486: LD_INT 2
73488: PPUSH
73489: CALL_OW 336
// end ;
73493: GO 73458
73495: POP
73496: POP
// end ;
73497: PPOPN 2
73499: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73500: LD_EXP 46
73504: PUSH
73505: LD_EXP 99
73509: AND
73510: IFFALSE 73798
73512: GO 73514
73514: DISABLE
73515: LD_INT 0
73517: PPUSH
73518: PPUSH
73519: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73520: LD_OWVAR 2
73524: PPUSH
73525: LD_INT 9
73527: PPUSH
73528: LD_INT 1
73530: PPUSH
73531: LD_INT 1
73533: PPUSH
73534: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73538: LD_INT 9
73540: PPUSH
73541: LD_OWVAR 2
73545: PPUSH
73546: CALL_OW 343
// uc_side := 9 ;
73550: LD_ADDR_OWVAR 20
73554: PUSH
73555: LD_INT 9
73557: ST_TO_ADDR
// uc_nation := 2 ;
73558: LD_ADDR_OWVAR 21
73562: PUSH
73563: LD_INT 2
73565: ST_TO_ADDR
// hc_name := Dark Warrior ;
73566: LD_ADDR_OWVAR 26
73570: PUSH
73571: LD_STRING Dark Warrior
73573: ST_TO_ADDR
// hc_gallery :=  ;
73574: LD_ADDR_OWVAR 33
73578: PUSH
73579: LD_STRING 
73581: ST_TO_ADDR
// hc_noskilllimit := true ;
73582: LD_ADDR_OWVAR 76
73586: PUSH
73587: LD_INT 1
73589: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73590: LD_ADDR_OWVAR 31
73594: PUSH
73595: LD_INT 30
73597: PUSH
73598: LD_INT 30
73600: PUSH
73601: LD_INT 30
73603: PUSH
73604: LD_INT 30
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: ST_TO_ADDR
// un := CreateHuman ;
73613: LD_ADDR_VAR 0 3
73617: PUSH
73618: CALL_OW 44
73622: ST_TO_ADDR
// hc_noskilllimit := false ;
73623: LD_ADDR_OWVAR 76
73627: PUSH
73628: LD_INT 0
73630: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73631: LD_VAR 0 3
73635: PPUSH
73636: LD_INT 1
73638: PPUSH
73639: CALL_OW 51
// ToLua ( playRanger() ) ;
73643: LD_STRING playRanger()
73645: PPUSH
73646: CALL_OW 559
// p := 0 ;
73650: LD_ADDR_VAR 0 2
73654: PUSH
73655: LD_INT 0
73657: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73658: LD_INT 35
73660: PPUSH
73661: CALL_OW 67
// p := p + 1 ;
73665: LD_ADDR_VAR 0 2
73669: PUSH
73670: LD_VAR 0 2
73674: PUSH
73675: LD_INT 1
73677: PLUS
73678: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73679: LD_VAR 0 3
73683: PPUSH
73684: CALL_OW 256
73688: PUSH
73689: LD_INT 1000
73691: LESS
73692: IFFALSE 73706
// SetLives ( un , 1000 ) ;
73694: LD_VAR 0 3
73698: PPUSH
73699: LD_INT 1000
73701: PPUSH
73702: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73706: LD_VAR 0 3
73710: PPUSH
73711: LD_INT 81
73713: PUSH
73714: LD_OWVAR 2
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: PUSH
73723: LD_INT 91
73725: PUSH
73726: LD_VAR 0 3
73730: PUSH
73731: LD_INT 30
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PPUSH
73743: CALL_OW 69
73747: PPUSH
73748: LD_VAR 0 3
73752: PPUSH
73753: CALL_OW 74
73757: PPUSH
73758: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73762: LD_VAR 0 2
73766: PUSH
73767: LD_INT 80
73769: GREATER
73770: PUSH
73771: LD_VAR 0 3
73775: PPUSH
73776: CALL_OW 301
73780: OR
73781: IFFALSE 73658
// if un then
73783: LD_VAR 0 3
73787: IFFALSE 73798
// RemoveUnit ( un ) ;
73789: LD_VAR 0 3
73793: PPUSH
73794: CALL_OW 64
// end ;
73798: PPOPN 3
73800: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73801: LD_EXP 100
73805: IFFALSE 73921
73807: GO 73809
73809: DISABLE
73810: LD_INT 0
73812: PPUSH
73813: PPUSH
73814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73815: LD_ADDR_VAR 0 2
73819: PUSH
73820: LD_INT 81
73822: PUSH
73823: LD_OWVAR 2
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 21
73834: PUSH
73835: LD_INT 1
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PPUSH
73846: CALL_OW 69
73850: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73851: LD_STRING playComputer()
73853: PPUSH
73854: CALL_OW 559
// if not tmp then
73858: LD_VAR 0 2
73862: NOT
73863: IFFALSE 73867
// exit ;
73865: GO 73921
// for i in tmp do
73867: LD_ADDR_VAR 0 1
73871: PUSH
73872: LD_VAR 0 2
73876: PUSH
73877: FOR_IN
73878: IFFALSE 73919
// for j := 1 to 4 do
73880: LD_ADDR_VAR 0 3
73884: PUSH
73885: DOUBLE
73886: LD_INT 1
73888: DEC
73889: ST_TO_ADDR
73890: LD_INT 4
73892: PUSH
73893: FOR_TO
73894: IFFALSE 73915
// SetSkill ( i , j , 10 ) ;
73896: LD_VAR 0 1
73900: PPUSH
73901: LD_VAR 0 3
73905: PPUSH
73906: LD_INT 10
73908: PPUSH
73909: CALL_OW 237
73913: GO 73893
73915: POP
73916: POP
73917: GO 73877
73919: POP
73920: POP
// end ;
73921: PPOPN 3
73923: END
// every 0 0$1 trigger s30 do var i , tmp ;
73924: LD_EXP 101
73928: IFFALSE 73997
73930: GO 73932
73932: DISABLE
73933: LD_INT 0
73935: PPUSH
73936: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73937: LD_ADDR_VAR 0 2
73941: PUSH
73942: LD_INT 22
73944: PUSH
73945: LD_OWVAR 2
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PPUSH
73954: CALL_OW 69
73958: ST_TO_ADDR
// if not tmp then
73959: LD_VAR 0 2
73963: NOT
73964: IFFALSE 73968
// exit ;
73966: GO 73997
// for i in tmp do
73968: LD_ADDR_VAR 0 1
73972: PUSH
73973: LD_VAR 0 2
73977: PUSH
73978: FOR_IN
73979: IFFALSE 73995
// SetLives ( i , 300 ) ;
73981: LD_VAR 0 1
73985: PPUSH
73986: LD_INT 300
73988: PPUSH
73989: CALL_OW 234
73993: GO 73978
73995: POP
73996: POP
// end ;
73997: PPOPN 2
73999: END
// every 0 0$1 trigger s60 do var i , tmp ;
74000: LD_EXP 102
74004: IFFALSE 74073
74006: GO 74008
74008: DISABLE
74009: LD_INT 0
74011: PPUSH
74012: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74013: LD_ADDR_VAR 0 2
74017: PUSH
74018: LD_INT 22
74020: PUSH
74021: LD_OWVAR 2
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PPUSH
74030: CALL_OW 69
74034: ST_TO_ADDR
// if not tmp then
74035: LD_VAR 0 2
74039: NOT
74040: IFFALSE 74044
// exit ;
74042: GO 74073
// for i in tmp do
74044: LD_ADDR_VAR 0 1
74048: PUSH
74049: LD_VAR 0 2
74053: PUSH
74054: FOR_IN
74055: IFFALSE 74071
// SetLives ( i , 600 ) ;
74057: LD_VAR 0 1
74061: PPUSH
74062: LD_INT 600
74064: PPUSH
74065: CALL_OW 234
74069: GO 74054
74071: POP
74072: POP
// end ;
74073: PPOPN 2
74075: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74076: LD_INT 0
74078: PPUSH
// case cmd of 301 :
74079: LD_VAR 0 1
74083: PUSH
74084: LD_INT 301
74086: DOUBLE
74087: EQUAL
74088: IFTRUE 74092
74090: GO 74124
74092: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74093: LD_VAR 0 6
74097: PPUSH
74098: LD_VAR 0 7
74102: PPUSH
74103: LD_VAR 0 8
74107: PPUSH
74108: LD_VAR 0 4
74112: PPUSH
74113: LD_VAR 0 5
74117: PPUSH
74118: CALL 75325 0 5
74122: GO 74245
74124: LD_INT 302
74126: DOUBLE
74127: EQUAL
74128: IFTRUE 74132
74130: GO 74169
74132: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74133: LD_VAR 0 6
74137: PPUSH
74138: LD_VAR 0 7
74142: PPUSH
74143: LD_VAR 0 8
74147: PPUSH
74148: LD_VAR 0 9
74152: PPUSH
74153: LD_VAR 0 4
74157: PPUSH
74158: LD_VAR 0 5
74162: PPUSH
74163: CALL 75416 0 6
74167: GO 74245
74169: LD_INT 303
74171: DOUBLE
74172: EQUAL
74173: IFTRUE 74177
74175: GO 74214
74177: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74178: LD_VAR 0 6
74182: PPUSH
74183: LD_VAR 0 7
74187: PPUSH
74188: LD_VAR 0 8
74192: PPUSH
74193: LD_VAR 0 9
74197: PPUSH
74198: LD_VAR 0 4
74202: PPUSH
74203: LD_VAR 0 5
74207: PPUSH
74208: CALL 74250 0 6
74212: GO 74245
74214: LD_INT 304
74216: DOUBLE
74217: EQUAL
74218: IFTRUE 74222
74220: GO 74244
74222: POP
// hHackTeleport ( unit , x , y ) ; end ;
74223: LD_VAR 0 2
74227: PPUSH
74228: LD_VAR 0 4
74232: PPUSH
74233: LD_VAR 0 5
74237: PPUSH
74238: CALL 76009 0 3
74242: GO 74245
74244: POP
// end ;
74245: LD_VAR 0 12
74249: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74250: LD_INT 0
74252: PPUSH
74253: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74254: LD_VAR 0 1
74258: PUSH
74259: LD_INT 1
74261: LESS
74262: PUSH
74263: LD_VAR 0 1
74267: PUSH
74268: LD_INT 3
74270: GREATER
74271: OR
74272: PUSH
74273: LD_VAR 0 5
74277: PPUSH
74278: LD_VAR 0 6
74282: PPUSH
74283: CALL_OW 428
74287: OR
74288: IFFALSE 74292
// exit ;
74290: GO 75012
// uc_side := your_side ;
74292: LD_ADDR_OWVAR 20
74296: PUSH
74297: LD_OWVAR 2
74301: ST_TO_ADDR
// uc_nation := nation ;
74302: LD_ADDR_OWVAR 21
74306: PUSH
74307: LD_VAR 0 1
74311: ST_TO_ADDR
// bc_level = 1 ;
74312: LD_ADDR_OWVAR 43
74316: PUSH
74317: LD_INT 1
74319: ST_TO_ADDR
// case btype of 1 :
74320: LD_VAR 0 2
74324: PUSH
74325: LD_INT 1
74327: DOUBLE
74328: EQUAL
74329: IFTRUE 74333
74331: GO 74344
74333: POP
// bc_type := b_depot ; 2 :
74334: LD_ADDR_OWVAR 42
74338: PUSH
74339: LD_INT 0
74341: ST_TO_ADDR
74342: GO 74956
74344: LD_INT 2
74346: DOUBLE
74347: EQUAL
74348: IFTRUE 74352
74350: GO 74363
74352: POP
// bc_type := b_warehouse ; 3 :
74353: LD_ADDR_OWVAR 42
74357: PUSH
74358: LD_INT 1
74360: ST_TO_ADDR
74361: GO 74956
74363: LD_INT 3
74365: DOUBLE
74366: EQUAL
74367: IFTRUE 74371
74369: GO 74382
74371: POP
// bc_type := b_lab ; 4 .. 9 :
74372: LD_ADDR_OWVAR 42
74376: PUSH
74377: LD_INT 6
74379: ST_TO_ADDR
74380: GO 74956
74382: LD_INT 4
74384: DOUBLE
74385: GREATEREQUAL
74386: IFFALSE 74394
74388: LD_INT 9
74390: DOUBLE
74391: LESSEQUAL
74392: IFTRUE 74396
74394: GO 74448
74396: POP
// begin bc_type := b_lab_half ;
74397: LD_ADDR_OWVAR 42
74401: PUSH
74402: LD_INT 7
74404: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74405: LD_ADDR_OWVAR 44
74409: PUSH
74410: LD_INT 10
74412: PUSH
74413: LD_INT 11
74415: PUSH
74416: LD_INT 12
74418: PUSH
74419: LD_INT 15
74421: PUSH
74422: LD_INT 14
74424: PUSH
74425: LD_INT 13
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 2
74440: PUSH
74441: LD_INT 3
74443: MINUS
74444: ARRAY
74445: ST_TO_ADDR
// end ; 10 .. 13 :
74446: GO 74956
74448: LD_INT 10
74450: DOUBLE
74451: GREATEREQUAL
74452: IFFALSE 74460
74454: LD_INT 13
74456: DOUBLE
74457: LESSEQUAL
74458: IFTRUE 74462
74460: GO 74539
74462: POP
// begin bc_type := b_lab_full ;
74463: LD_ADDR_OWVAR 42
74467: PUSH
74468: LD_INT 8
74470: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74471: LD_ADDR_OWVAR 44
74475: PUSH
74476: LD_INT 10
74478: PUSH
74479: LD_INT 12
74481: PUSH
74482: LD_INT 14
74484: PUSH
74485: LD_INT 13
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: PUSH
74494: LD_VAR 0 2
74498: PUSH
74499: LD_INT 9
74501: MINUS
74502: ARRAY
74503: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74504: LD_ADDR_OWVAR 45
74508: PUSH
74509: LD_INT 11
74511: PUSH
74512: LD_INT 15
74514: PUSH
74515: LD_INT 12
74517: PUSH
74518: LD_INT 15
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: PUSH
74527: LD_VAR 0 2
74531: PUSH
74532: LD_INT 9
74534: MINUS
74535: ARRAY
74536: ST_TO_ADDR
// end ; 14 :
74537: GO 74956
74539: LD_INT 14
74541: DOUBLE
74542: EQUAL
74543: IFTRUE 74547
74545: GO 74558
74547: POP
// bc_type := b_workshop ; 15 :
74548: LD_ADDR_OWVAR 42
74552: PUSH
74553: LD_INT 2
74555: ST_TO_ADDR
74556: GO 74956
74558: LD_INT 15
74560: DOUBLE
74561: EQUAL
74562: IFTRUE 74566
74564: GO 74577
74566: POP
// bc_type := b_factory ; 16 :
74567: LD_ADDR_OWVAR 42
74571: PUSH
74572: LD_INT 3
74574: ST_TO_ADDR
74575: GO 74956
74577: LD_INT 16
74579: DOUBLE
74580: EQUAL
74581: IFTRUE 74585
74583: GO 74596
74585: POP
// bc_type := b_ext_gun ; 17 :
74586: LD_ADDR_OWVAR 42
74590: PUSH
74591: LD_INT 17
74593: ST_TO_ADDR
74594: GO 74956
74596: LD_INT 17
74598: DOUBLE
74599: EQUAL
74600: IFTRUE 74604
74602: GO 74632
74604: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74605: LD_ADDR_OWVAR 42
74609: PUSH
74610: LD_INT 19
74612: PUSH
74613: LD_INT 23
74615: PUSH
74616: LD_INT 19
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: LIST
74623: PUSH
74624: LD_VAR 0 1
74628: ARRAY
74629: ST_TO_ADDR
74630: GO 74956
74632: LD_INT 18
74634: DOUBLE
74635: EQUAL
74636: IFTRUE 74640
74638: GO 74651
74640: POP
// bc_type := b_ext_radar ; 19 :
74641: LD_ADDR_OWVAR 42
74645: PUSH
74646: LD_INT 20
74648: ST_TO_ADDR
74649: GO 74956
74651: LD_INT 19
74653: DOUBLE
74654: EQUAL
74655: IFTRUE 74659
74657: GO 74670
74659: POP
// bc_type := b_ext_radio ; 20 :
74660: LD_ADDR_OWVAR 42
74664: PUSH
74665: LD_INT 22
74667: ST_TO_ADDR
74668: GO 74956
74670: LD_INT 20
74672: DOUBLE
74673: EQUAL
74674: IFTRUE 74678
74676: GO 74689
74678: POP
// bc_type := b_ext_siberium ; 21 :
74679: LD_ADDR_OWVAR 42
74683: PUSH
74684: LD_INT 21
74686: ST_TO_ADDR
74687: GO 74956
74689: LD_INT 21
74691: DOUBLE
74692: EQUAL
74693: IFTRUE 74697
74695: GO 74708
74697: POP
// bc_type := b_ext_computer ; 22 :
74698: LD_ADDR_OWVAR 42
74702: PUSH
74703: LD_INT 24
74705: ST_TO_ADDR
74706: GO 74956
74708: LD_INT 22
74710: DOUBLE
74711: EQUAL
74712: IFTRUE 74716
74714: GO 74727
74716: POP
// bc_type := b_ext_track ; 23 :
74717: LD_ADDR_OWVAR 42
74721: PUSH
74722: LD_INT 16
74724: ST_TO_ADDR
74725: GO 74956
74727: LD_INT 23
74729: DOUBLE
74730: EQUAL
74731: IFTRUE 74735
74733: GO 74746
74735: POP
// bc_type := b_ext_laser ; 24 :
74736: LD_ADDR_OWVAR 42
74740: PUSH
74741: LD_INT 25
74743: ST_TO_ADDR
74744: GO 74956
74746: LD_INT 24
74748: DOUBLE
74749: EQUAL
74750: IFTRUE 74754
74752: GO 74765
74754: POP
// bc_type := b_control_tower ; 25 :
74755: LD_ADDR_OWVAR 42
74759: PUSH
74760: LD_INT 36
74762: ST_TO_ADDR
74763: GO 74956
74765: LD_INT 25
74767: DOUBLE
74768: EQUAL
74769: IFTRUE 74773
74771: GO 74784
74773: POP
// bc_type := b_breastwork ; 26 :
74774: LD_ADDR_OWVAR 42
74778: PUSH
74779: LD_INT 31
74781: ST_TO_ADDR
74782: GO 74956
74784: LD_INT 26
74786: DOUBLE
74787: EQUAL
74788: IFTRUE 74792
74790: GO 74803
74792: POP
// bc_type := b_bunker ; 27 :
74793: LD_ADDR_OWVAR 42
74797: PUSH
74798: LD_INT 32
74800: ST_TO_ADDR
74801: GO 74956
74803: LD_INT 27
74805: DOUBLE
74806: EQUAL
74807: IFTRUE 74811
74809: GO 74822
74811: POP
// bc_type := b_turret ; 28 :
74812: LD_ADDR_OWVAR 42
74816: PUSH
74817: LD_INT 33
74819: ST_TO_ADDR
74820: GO 74956
74822: LD_INT 28
74824: DOUBLE
74825: EQUAL
74826: IFTRUE 74830
74828: GO 74841
74830: POP
// bc_type := b_armoury ; 29 :
74831: LD_ADDR_OWVAR 42
74835: PUSH
74836: LD_INT 4
74838: ST_TO_ADDR
74839: GO 74956
74841: LD_INT 29
74843: DOUBLE
74844: EQUAL
74845: IFTRUE 74849
74847: GO 74860
74849: POP
// bc_type := b_barracks ; 30 :
74850: LD_ADDR_OWVAR 42
74854: PUSH
74855: LD_INT 5
74857: ST_TO_ADDR
74858: GO 74956
74860: LD_INT 30
74862: DOUBLE
74863: EQUAL
74864: IFTRUE 74868
74866: GO 74879
74868: POP
// bc_type := b_solar_power ; 31 :
74869: LD_ADDR_OWVAR 42
74873: PUSH
74874: LD_INT 27
74876: ST_TO_ADDR
74877: GO 74956
74879: LD_INT 31
74881: DOUBLE
74882: EQUAL
74883: IFTRUE 74887
74885: GO 74898
74887: POP
// bc_type := b_oil_power ; 32 :
74888: LD_ADDR_OWVAR 42
74892: PUSH
74893: LD_INT 26
74895: ST_TO_ADDR
74896: GO 74956
74898: LD_INT 32
74900: DOUBLE
74901: EQUAL
74902: IFTRUE 74906
74904: GO 74917
74906: POP
// bc_type := b_siberite_power ; 33 :
74907: LD_ADDR_OWVAR 42
74911: PUSH
74912: LD_INT 28
74914: ST_TO_ADDR
74915: GO 74956
74917: LD_INT 33
74919: DOUBLE
74920: EQUAL
74921: IFTRUE 74925
74923: GO 74936
74925: POP
// bc_type := b_oil_mine ; 34 :
74926: LD_ADDR_OWVAR 42
74930: PUSH
74931: LD_INT 29
74933: ST_TO_ADDR
74934: GO 74956
74936: LD_INT 34
74938: DOUBLE
74939: EQUAL
74940: IFTRUE 74944
74942: GO 74955
74944: POP
// bc_type := b_siberite_mine ; end ;
74945: LD_ADDR_OWVAR 42
74949: PUSH
74950: LD_INT 30
74952: ST_TO_ADDR
74953: GO 74956
74955: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74956: LD_ADDR_VAR 0 8
74960: PUSH
74961: LD_VAR 0 5
74965: PPUSH
74966: LD_VAR 0 6
74970: PPUSH
74971: LD_VAR 0 3
74975: PPUSH
74976: CALL_OW 47
74980: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74981: LD_OWVAR 42
74985: PUSH
74986: LD_INT 32
74988: PUSH
74989: LD_INT 33
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: IN
74996: IFFALSE 75012
// PlaceWeaponTurret ( b , weapon ) ;
74998: LD_VAR 0 8
75002: PPUSH
75003: LD_VAR 0 4
75007: PPUSH
75008: CALL_OW 431
// end ;
75012: LD_VAR 0 7
75016: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75017: LD_INT 0
75019: PPUSH
75020: PPUSH
75021: PPUSH
75022: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75023: LD_ADDR_VAR 0 4
75027: PUSH
75028: LD_INT 22
75030: PUSH
75031: LD_OWVAR 2
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 2
75042: PUSH
75043: LD_INT 30
75045: PUSH
75046: LD_INT 0
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 30
75055: PUSH
75056: LD_INT 1
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: LIST
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PPUSH
75072: CALL_OW 69
75076: ST_TO_ADDR
// if not tmp then
75077: LD_VAR 0 4
75081: NOT
75082: IFFALSE 75086
// exit ;
75084: GO 75145
// for i in tmp do
75086: LD_ADDR_VAR 0 2
75090: PUSH
75091: LD_VAR 0 4
75095: PUSH
75096: FOR_IN
75097: IFFALSE 75143
// for j = 1 to 3 do
75099: LD_ADDR_VAR 0 3
75103: PUSH
75104: DOUBLE
75105: LD_INT 1
75107: DEC
75108: ST_TO_ADDR
75109: LD_INT 3
75111: PUSH
75112: FOR_TO
75113: IFFALSE 75139
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75115: LD_VAR 0 2
75119: PPUSH
75120: CALL_OW 274
75124: PPUSH
75125: LD_VAR 0 3
75129: PPUSH
75130: LD_INT 99999
75132: PPUSH
75133: CALL_OW 277
75137: GO 75112
75139: POP
75140: POP
75141: GO 75096
75143: POP
75144: POP
// end ;
75145: LD_VAR 0 1
75149: RET
// export function hHackSetLevel10 ; var i , j ; begin
75150: LD_INT 0
75152: PPUSH
75153: PPUSH
75154: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75155: LD_ADDR_VAR 0 2
75159: PUSH
75160: LD_INT 21
75162: PUSH
75163: LD_INT 1
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PPUSH
75170: CALL_OW 69
75174: PUSH
75175: FOR_IN
75176: IFFALSE 75228
// if IsSelected ( i ) then
75178: LD_VAR 0 2
75182: PPUSH
75183: CALL_OW 306
75187: IFFALSE 75226
// begin for j := 1 to 4 do
75189: LD_ADDR_VAR 0 3
75193: PUSH
75194: DOUBLE
75195: LD_INT 1
75197: DEC
75198: ST_TO_ADDR
75199: LD_INT 4
75201: PUSH
75202: FOR_TO
75203: IFFALSE 75224
// SetSkill ( i , j , 10 ) ;
75205: LD_VAR 0 2
75209: PPUSH
75210: LD_VAR 0 3
75214: PPUSH
75215: LD_INT 10
75217: PPUSH
75218: CALL_OW 237
75222: GO 75202
75224: POP
75225: POP
// end ;
75226: GO 75175
75228: POP
75229: POP
// end ;
75230: LD_VAR 0 1
75234: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
75239: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75240: LD_ADDR_VAR 0 2
75244: PUSH
75245: LD_INT 22
75247: PUSH
75248: LD_OWVAR 2
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 21
75259: PUSH
75260: LD_INT 1
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PPUSH
75271: CALL_OW 69
75275: PUSH
75276: FOR_IN
75277: IFFALSE 75318
// begin for j := 1 to 4 do
75279: LD_ADDR_VAR 0 3
75283: PUSH
75284: DOUBLE
75285: LD_INT 1
75287: DEC
75288: ST_TO_ADDR
75289: LD_INT 4
75291: PUSH
75292: FOR_TO
75293: IFFALSE 75314
// SetSkill ( i , j , 10 ) ;
75295: LD_VAR 0 2
75299: PPUSH
75300: LD_VAR 0 3
75304: PPUSH
75305: LD_INT 10
75307: PPUSH
75308: CALL_OW 237
75312: GO 75292
75314: POP
75315: POP
// end ;
75316: GO 75276
75318: POP
75319: POP
// end ;
75320: LD_VAR 0 1
75324: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75325: LD_INT 0
75327: PPUSH
// uc_side := your_side ;
75328: LD_ADDR_OWVAR 20
75332: PUSH
75333: LD_OWVAR 2
75337: ST_TO_ADDR
// uc_nation := nation ;
75338: LD_ADDR_OWVAR 21
75342: PUSH
75343: LD_VAR 0 1
75347: ST_TO_ADDR
// InitHc ;
75348: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75352: LD_INT 0
75354: PPUSH
75355: LD_VAR 0 2
75359: PPUSH
75360: LD_VAR 0 3
75364: PPUSH
75365: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75369: LD_VAR 0 4
75373: PPUSH
75374: LD_VAR 0 5
75378: PPUSH
75379: CALL_OW 428
75383: PUSH
75384: LD_INT 0
75386: EQUAL
75387: IFFALSE 75411
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75389: CALL_OW 44
75393: PPUSH
75394: LD_VAR 0 4
75398: PPUSH
75399: LD_VAR 0 5
75403: PPUSH
75404: LD_INT 1
75406: PPUSH
75407: CALL_OW 48
// end ;
75411: LD_VAR 0 6
75415: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75416: LD_INT 0
75418: PPUSH
75419: PPUSH
// uc_side := your_side ;
75420: LD_ADDR_OWVAR 20
75424: PUSH
75425: LD_OWVAR 2
75429: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75430: LD_VAR 0 1
75434: PUSH
75435: LD_INT 1
75437: PUSH
75438: LD_INT 2
75440: PUSH
75441: LD_INT 3
75443: PUSH
75444: LD_INT 4
75446: PUSH
75447: LD_INT 5
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: IN
75457: IFFALSE 75469
// uc_nation := nation_american else
75459: LD_ADDR_OWVAR 21
75463: PUSH
75464: LD_INT 1
75466: ST_TO_ADDR
75467: GO 75512
// if chassis in [ 11 , 12 , 13 , 14 ] then
75469: LD_VAR 0 1
75473: PUSH
75474: LD_INT 11
75476: PUSH
75477: LD_INT 12
75479: PUSH
75480: LD_INT 13
75482: PUSH
75483: LD_INT 14
75485: PUSH
75486: EMPTY
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: IN
75492: IFFALSE 75504
// uc_nation := nation_arabian else
75494: LD_ADDR_OWVAR 21
75498: PUSH
75499: LD_INT 2
75501: ST_TO_ADDR
75502: GO 75512
// uc_nation := nation_russian ;
75504: LD_ADDR_OWVAR 21
75508: PUSH
75509: LD_INT 3
75511: ST_TO_ADDR
// vc_chassis := chassis ;
75512: LD_ADDR_OWVAR 37
75516: PUSH
75517: LD_VAR 0 1
75521: ST_TO_ADDR
// vc_engine := engine ;
75522: LD_ADDR_OWVAR 39
75526: PUSH
75527: LD_VAR 0 2
75531: ST_TO_ADDR
// vc_control := control ;
75532: LD_ADDR_OWVAR 38
75536: PUSH
75537: LD_VAR 0 3
75541: ST_TO_ADDR
// vc_weapon := weapon ;
75542: LD_ADDR_OWVAR 40
75546: PUSH
75547: LD_VAR 0 4
75551: ST_TO_ADDR
// un := CreateVehicle ;
75552: LD_ADDR_VAR 0 8
75556: PUSH
75557: CALL_OW 45
75561: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75562: LD_VAR 0 8
75566: PPUSH
75567: LD_INT 0
75569: PPUSH
75570: LD_INT 5
75572: PPUSH
75573: CALL_OW 12
75577: PPUSH
75578: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75582: LD_VAR 0 8
75586: PPUSH
75587: LD_VAR 0 5
75591: PPUSH
75592: LD_VAR 0 6
75596: PPUSH
75597: LD_INT 1
75599: PPUSH
75600: CALL_OW 48
// end ;
75604: LD_VAR 0 7
75608: RET
// export hInvincible ; every 1 do
75609: GO 75611
75611: DISABLE
// hInvincible := [ ] ;
75612: LD_ADDR_EXP 103
75616: PUSH
75617: EMPTY
75618: ST_TO_ADDR
75619: END
// every 10 do var i ;
75620: GO 75622
75622: DISABLE
75623: LD_INT 0
75625: PPUSH
// begin enable ;
75626: ENABLE
// if not hInvincible then
75627: LD_EXP 103
75631: NOT
75632: IFFALSE 75636
// exit ;
75634: GO 75680
// for i in hInvincible do
75636: LD_ADDR_VAR 0 1
75640: PUSH
75641: LD_EXP 103
75645: PUSH
75646: FOR_IN
75647: IFFALSE 75678
// if GetLives ( i ) < 1000 then
75649: LD_VAR 0 1
75653: PPUSH
75654: CALL_OW 256
75658: PUSH
75659: LD_INT 1000
75661: LESS
75662: IFFALSE 75676
// SetLives ( i , 1000 ) ;
75664: LD_VAR 0 1
75668: PPUSH
75669: LD_INT 1000
75671: PPUSH
75672: CALL_OW 234
75676: GO 75646
75678: POP
75679: POP
// end ;
75680: PPOPN 1
75682: END
// export function hHackInvincible ; var i ; begin
75683: LD_INT 0
75685: PPUSH
75686: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75687: LD_ADDR_VAR 0 2
75691: PUSH
75692: LD_INT 2
75694: PUSH
75695: LD_INT 21
75697: PUSH
75698: LD_INT 1
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 21
75707: PUSH
75708: LD_INT 2
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: LIST
75719: PPUSH
75720: CALL_OW 69
75724: PUSH
75725: FOR_IN
75726: IFFALSE 75787
// if IsSelected ( i ) then
75728: LD_VAR 0 2
75732: PPUSH
75733: CALL_OW 306
75737: IFFALSE 75785
// begin if i in hInvincible then
75739: LD_VAR 0 2
75743: PUSH
75744: LD_EXP 103
75748: IN
75749: IFFALSE 75769
// hInvincible := hInvincible diff i else
75751: LD_ADDR_EXP 103
75755: PUSH
75756: LD_EXP 103
75760: PUSH
75761: LD_VAR 0 2
75765: DIFF
75766: ST_TO_ADDR
75767: GO 75785
// hInvincible := hInvincible union i ;
75769: LD_ADDR_EXP 103
75773: PUSH
75774: LD_EXP 103
75778: PUSH
75779: LD_VAR 0 2
75783: UNION
75784: ST_TO_ADDR
// end ;
75785: GO 75725
75787: POP
75788: POP
// end ;
75789: LD_VAR 0 1
75793: RET
// export function hHackInvisible ; var i , j ; begin
75794: LD_INT 0
75796: PPUSH
75797: PPUSH
75798: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75799: LD_ADDR_VAR 0 2
75803: PUSH
75804: LD_INT 21
75806: PUSH
75807: LD_INT 1
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PPUSH
75814: CALL_OW 69
75818: PUSH
75819: FOR_IN
75820: IFFALSE 75844
// if IsSelected ( i ) then
75822: LD_VAR 0 2
75826: PPUSH
75827: CALL_OW 306
75831: IFFALSE 75842
// ComForceInvisible ( i ) ;
75833: LD_VAR 0 2
75837: PPUSH
75838: CALL_OW 496
75842: GO 75819
75844: POP
75845: POP
// end ;
75846: LD_VAR 0 1
75850: RET
// export function hHackChangeYourSide ; begin
75851: LD_INT 0
75853: PPUSH
// if your_side = 8 then
75854: LD_OWVAR 2
75858: PUSH
75859: LD_INT 8
75861: EQUAL
75862: IFFALSE 75874
// your_side := 0 else
75864: LD_ADDR_OWVAR 2
75868: PUSH
75869: LD_INT 0
75871: ST_TO_ADDR
75872: GO 75888
// your_side := your_side + 1 ;
75874: LD_ADDR_OWVAR 2
75878: PUSH
75879: LD_OWVAR 2
75883: PUSH
75884: LD_INT 1
75886: PLUS
75887: ST_TO_ADDR
// end ;
75888: LD_VAR 0 1
75892: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75893: LD_INT 0
75895: PPUSH
75896: PPUSH
75897: PPUSH
// for i in all_units do
75898: LD_ADDR_VAR 0 2
75902: PUSH
75903: LD_OWVAR 3
75907: PUSH
75908: FOR_IN
75909: IFFALSE 75987
// if IsSelected ( i ) then
75911: LD_VAR 0 2
75915: PPUSH
75916: CALL_OW 306
75920: IFFALSE 75985
// begin j := GetSide ( i ) ;
75922: LD_ADDR_VAR 0 3
75926: PUSH
75927: LD_VAR 0 2
75931: PPUSH
75932: CALL_OW 255
75936: ST_TO_ADDR
// if j = 8 then
75937: LD_VAR 0 3
75941: PUSH
75942: LD_INT 8
75944: EQUAL
75945: IFFALSE 75957
// j := 0 else
75947: LD_ADDR_VAR 0 3
75951: PUSH
75952: LD_INT 0
75954: ST_TO_ADDR
75955: GO 75971
// j := j + 1 ;
75957: LD_ADDR_VAR 0 3
75961: PUSH
75962: LD_VAR 0 3
75966: PUSH
75967: LD_INT 1
75969: PLUS
75970: ST_TO_ADDR
// SetSide ( i , j ) ;
75971: LD_VAR 0 2
75975: PPUSH
75976: LD_VAR 0 3
75980: PPUSH
75981: CALL_OW 235
// end ;
75985: GO 75908
75987: POP
75988: POP
// end ;
75989: LD_VAR 0 1
75993: RET
// export function hHackFog ; begin
75994: LD_INT 0
75996: PPUSH
// FogOff ( true ) ;
75997: LD_INT 1
75999: PPUSH
76000: CALL_OW 344
// end ;
76004: LD_VAR 0 1
76008: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76009: LD_INT 0
76011: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76012: LD_VAR 0 1
76016: PPUSH
76017: LD_VAR 0 2
76021: PPUSH
76022: LD_VAR 0 3
76026: PPUSH
76027: LD_INT 1
76029: PPUSH
76030: LD_INT 1
76032: PPUSH
76033: CALL_OW 483
// CenterOnXY ( x , y ) ;
76037: LD_VAR 0 2
76041: PPUSH
76042: LD_VAR 0 3
76046: PPUSH
76047: CALL_OW 84
// end ;
76051: LD_VAR 0 4
76055: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76056: LD_INT 0
76058: PPUSH
76059: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76060: LD_VAR 0 1
76064: NOT
76065: PUSH
76066: LD_VAR 0 2
76070: PPUSH
76071: LD_VAR 0 3
76075: PPUSH
76076: CALL_OW 488
76080: NOT
76081: OR
76082: PUSH
76083: LD_VAR 0 1
76087: PPUSH
76088: CALL_OW 266
76092: PUSH
76093: LD_INT 3
76095: NONEQUAL
76096: PUSH
76097: LD_VAR 0 1
76101: PPUSH
76102: CALL_OW 247
76106: PUSH
76107: LD_INT 1
76109: EQUAL
76110: NOT
76111: AND
76112: OR
76113: IFFALSE 76117
// exit ;
76115: GO 76266
// if GetType ( factory ) = unit_human then
76117: LD_VAR 0 1
76121: PPUSH
76122: CALL_OW 247
76126: PUSH
76127: LD_INT 1
76129: EQUAL
76130: IFFALSE 76147
// factory := IsInUnit ( factory ) ;
76132: LD_ADDR_VAR 0 1
76136: PUSH
76137: LD_VAR 0 1
76141: PPUSH
76142: CALL_OW 310
76146: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76147: LD_VAR 0 1
76151: PPUSH
76152: CALL_OW 266
76156: PUSH
76157: LD_INT 3
76159: NONEQUAL
76160: IFFALSE 76164
// exit ;
76162: GO 76266
// if HexInfo ( x , y ) = factory then
76164: LD_VAR 0 2
76168: PPUSH
76169: LD_VAR 0 3
76173: PPUSH
76174: CALL_OW 428
76178: PUSH
76179: LD_VAR 0 1
76183: EQUAL
76184: IFFALSE 76211
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76186: LD_ADDR_EXP 104
76190: PUSH
76191: LD_EXP 104
76195: PPUSH
76196: LD_VAR 0 1
76200: PPUSH
76201: LD_INT 0
76203: PPUSH
76204: CALL_OW 1
76208: ST_TO_ADDR
76209: GO 76262
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76211: LD_ADDR_EXP 104
76215: PUSH
76216: LD_EXP 104
76220: PPUSH
76221: LD_VAR 0 1
76225: PPUSH
76226: LD_VAR 0 1
76230: PPUSH
76231: CALL_OW 255
76235: PUSH
76236: LD_VAR 0 1
76240: PUSH
76241: LD_VAR 0 2
76245: PUSH
76246: LD_VAR 0 3
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: PPUSH
76257: CALL_OW 1
76261: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76262: CALL 76271 0 0
// end ;
76266: LD_VAR 0 4
76270: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76271: LD_INT 0
76273: PPUSH
76274: PPUSH
76275: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76276: LD_STRING resetFactoryWaypoint();
76278: PPUSH
76279: CALL_OW 559
// if factoryWaypoints then
76283: LD_EXP 104
76287: IFFALSE 76413
// begin list := PrepareArray ( factoryWaypoints ) ;
76289: LD_ADDR_VAR 0 3
76293: PUSH
76294: LD_EXP 104
76298: PPUSH
76299: CALL 56877 0 1
76303: ST_TO_ADDR
// for i := 1 to list do
76304: LD_ADDR_VAR 0 2
76308: PUSH
76309: DOUBLE
76310: LD_INT 1
76312: DEC
76313: ST_TO_ADDR
76314: LD_VAR 0 3
76318: PUSH
76319: FOR_TO
76320: IFFALSE 76411
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76322: LD_STRING setFactoryWaypointXY(
76324: PUSH
76325: LD_VAR 0 3
76329: PUSH
76330: LD_VAR 0 2
76334: ARRAY
76335: PUSH
76336: LD_INT 1
76338: ARRAY
76339: STR
76340: PUSH
76341: LD_STRING ,
76343: STR
76344: PUSH
76345: LD_VAR 0 3
76349: PUSH
76350: LD_VAR 0 2
76354: ARRAY
76355: PUSH
76356: LD_INT 2
76358: ARRAY
76359: STR
76360: PUSH
76361: LD_STRING ,
76363: STR
76364: PUSH
76365: LD_VAR 0 3
76369: PUSH
76370: LD_VAR 0 2
76374: ARRAY
76375: PUSH
76376: LD_INT 3
76378: ARRAY
76379: STR
76380: PUSH
76381: LD_STRING ,
76383: STR
76384: PUSH
76385: LD_VAR 0 3
76389: PUSH
76390: LD_VAR 0 2
76394: ARRAY
76395: PUSH
76396: LD_INT 4
76398: ARRAY
76399: STR
76400: PUSH
76401: LD_STRING )
76403: STR
76404: PPUSH
76405: CALL_OW 559
76409: GO 76319
76411: POP
76412: POP
// end ; end ;
76413: LD_VAR 0 1
76417: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76418: LD_INT 0
76420: PPUSH
// if HexInfo ( x , y ) = warehouse then
76421: LD_VAR 0 2
76425: PPUSH
76426: LD_VAR 0 3
76430: PPUSH
76431: CALL_OW 428
76435: PUSH
76436: LD_VAR 0 1
76440: EQUAL
76441: IFFALSE 76468
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76443: LD_ADDR_EXP 105
76447: PUSH
76448: LD_EXP 105
76452: PPUSH
76453: LD_VAR 0 1
76457: PPUSH
76458: LD_INT 0
76460: PPUSH
76461: CALL_OW 1
76465: ST_TO_ADDR
76466: GO 76519
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76468: LD_ADDR_EXP 105
76472: PUSH
76473: LD_EXP 105
76477: PPUSH
76478: LD_VAR 0 1
76482: PPUSH
76483: LD_VAR 0 1
76487: PPUSH
76488: CALL_OW 255
76492: PUSH
76493: LD_VAR 0 1
76497: PUSH
76498: LD_VAR 0 2
76502: PUSH
76503: LD_VAR 0 3
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: PPUSH
76514: CALL_OW 1
76518: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76519: CALL 76528 0 0
// end ;
76523: LD_VAR 0 4
76527: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76528: LD_INT 0
76530: PPUSH
76531: PPUSH
76532: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76533: LD_STRING resetWarehouseGatheringPoints();
76535: PPUSH
76536: CALL_OW 559
// if warehouseGatheringPoints then
76540: LD_EXP 105
76544: IFFALSE 76670
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76546: LD_ADDR_VAR 0 3
76550: PUSH
76551: LD_EXP 105
76555: PPUSH
76556: CALL 56877 0 1
76560: ST_TO_ADDR
// for i := 1 to list do
76561: LD_ADDR_VAR 0 2
76565: PUSH
76566: DOUBLE
76567: LD_INT 1
76569: DEC
76570: ST_TO_ADDR
76571: LD_VAR 0 3
76575: PUSH
76576: FOR_TO
76577: IFFALSE 76668
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76579: LD_STRING setWarehouseGatheringPointXY(
76581: PUSH
76582: LD_VAR 0 3
76586: PUSH
76587: LD_VAR 0 2
76591: ARRAY
76592: PUSH
76593: LD_INT 1
76595: ARRAY
76596: STR
76597: PUSH
76598: LD_STRING ,
76600: STR
76601: PUSH
76602: LD_VAR 0 3
76606: PUSH
76607: LD_VAR 0 2
76611: ARRAY
76612: PUSH
76613: LD_INT 2
76615: ARRAY
76616: STR
76617: PUSH
76618: LD_STRING ,
76620: STR
76621: PUSH
76622: LD_VAR 0 3
76626: PUSH
76627: LD_VAR 0 2
76631: ARRAY
76632: PUSH
76633: LD_INT 3
76635: ARRAY
76636: STR
76637: PUSH
76638: LD_STRING ,
76640: STR
76641: PUSH
76642: LD_VAR 0 3
76646: PUSH
76647: LD_VAR 0 2
76651: ARRAY
76652: PUSH
76653: LD_INT 4
76655: ARRAY
76656: STR
76657: PUSH
76658: LD_STRING )
76660: STR
76661: PPUSH
76662: CALL_OW 559
76666: GO 76576
76668: POP
76669: POP
// end ; end ;
76670: LD_VAR 0 1
76674: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76675: LD_EXP 105
76679: IFFALSE 77364
76681: GO 76683
76683: DISABLE
76684: LD_INT 0
76686: PPUSH
76687: PPUSH
76688: PPUSH
76689: PPUSH
76690: PPUSH
76691: PPUSH
76692: PPUSH
76693: PPUSH
76694: PPUSH
// begin enable ;
76695: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76696: LD_ADDR_VAR 0 3
76700: PUSH
76701: LD_EXP 105
76705: PPUSH
76706: CALL 56877 0 1
76710: ST_TO_ADDR
// if not list then
76711: LD_VAR 0 3
76715: NOT
76716: IFFALSE 76720
// exit ;
76718: GO 77364
// for i := 1 to list do
76720: LD_ADDR_VAR 0 1
76724: PUSH
76725: DOUBLE
76726: LD_INT 1
76728: DEC
76729: ST_TO_ADDR
76730: LD_VAR 0 3
76734: PUSH
76735: FOR_TO
76736: IFFALSE 77362
// begin depot := list [ i ] [ 2 ] ;
76738: LD_ADDR_VAR 0 8
76742: PUSH
76743: LD_VAR 0 3
76747: PUSH
76748: LD_VAR 0 1
76752: ARRAY
76753: PUSH
76754: LD_INT 2
76756: ARRAY
76757: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76758: LD_ADDR_VAR 0 5
76762: PUSH
76763: LD_VAR 0 3
76767: PUSH
76768: LD_VAR 0 1
76772: ARRAY
76773: PUSH
76774: LD_INT 1
76776: ARRAY
76777: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76778: LD_VAR 0 8
76782: PPUSH
76783: CALL_OW 301
76787: PUSH
76788: LD_VAR 0 5
76792: PUSH
76793: LD_VAR 0 8
76797: PPUSH
76798: CALL_OW 255
76802: NONEQUAL
76803: OR
76804: IFFALSE 76833
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76806: LD_ADDR_EXP 105
76810: PUSH
76811: LD_EXP 105
76815: PPUSH
76816: LD_VAR 0 8
76820: PPUSH
76821: LD_INT 0
76823: PPUSH
76824: CALL_OW 1
76828: ST_TO_ADDR
// exit ;
76829: POP
76830: POP
76831: GO 77364
// end ; x := list [ i ] [ 3 ] ;
76833: LD_ADDR_VAR 0 6
76837: PUSH
76838: LD_VAR 0 3
76842: PUSH
76843: LD_VAR 0 1
76847: ARRAY
76848: PUSH
76849: LD_INT 3
76851: ARRAY
76852: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76853: LD_ADDR_VAR 0 7
76857: PUSH
76858: LD_VAR 0 3
76862: PUSH
76863: LD_VAR 0 1
76867: ARRAY
76868: PUSH
76869: LD_INT 4
76871: ARRAY
76872: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76873: LD_ADDR_VAR 0 9
76877: PUSH
76878: LD_VAR 0 6
76882: PPUSH
76883: LD_VAR 0 7
76887: PPUSH
76888: LD_INT 16
76890: PPUSH
76891: CALL 55465 0 3
76895: ST_TO_ADDR
// if not cratesNearbyPoint then
76896: LD_VAR 0 9
76900: NOT
76901: IFFALSE 76907
// exit ;
76903: POP
76904: POP
76905: GO 77364
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76907: LD_ADDR_VAR 0 4
76911: PUSH
76912: LD_INT 22
76914: PUSH
76915: LD_VAR 0 5
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PUSH
76924: LD_INT 3
76926: PUSH
76927: LD_INT 60
76929: PUSH
76930: EMPTY
76931: LIST
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 91
76939: PUSH
76940: LD_VAR 0 8
76944: PUSH
76945: LD_INT 6
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: LIST
76952: PUSH
76953: LD_INT 2
76955: PUSH
76956: LD_INT 25
76958: PUSH
76959: LD_INT 2
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: LD_INT 25
76968: PUSH
76969: LD_INT 16
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: LIST
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: PPUSH
76987: CALL_OW 69
76991: PUSH
76992: LD_VAR 0 8
76996: PPUSH
76997: CALL_OW 313
77001: PPUSH
77002: LD_INT 3
77004: PUSH
77005: LD_INT 60
77007: PUSH
77008: EMPTY
77009: LIST
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: PUSH
77015: LD_INT 2
77017: PUSH
77018: LD_INT 25
77020: PUSH
77021: LD_INT 2
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 25
77030: PUSH
77031: LD_INT 16
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: LIST
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PPUSH
77047: CALL_OW 72
77051: UNION
77052: ST_TO_ADDR
// if tmp then
77053: LD_VAR 0 4
77057: IFFALSE 77137
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77059: LD_ADDR_VAR 0 4
77063: PUSH
77064: LD_VAR 0 4
77068: PPUSH
77069: LD_INT 3
77071: PPUSH
77072: CALL 53434 0 2
77076: ST_TO_ADDR
// for j in tmp do
77077: LD_ADDR_VAR 0 2
77081: PUSH
77082: LD_VAR 0 4
77086: PUSH
77087: FOR_IN
77088: IFFALSE 77131
// begin if IsInUnit ( j ) then
77090: LD_VAR 0 2
77094: PPUSH
77095: CALL_OW 310
77099: IFFALSE 77110
// ComExit ( j ) ;
77101: LD_VAR 0 2
77105: PPUSH
77106: CALL 53517 0 1
// AddComCollect ( j , x , y ) ;
77110: LD_VAR 0 2
77114: PPUSH
77115: LD_VAR 0 6
77119: PPUSH
77120: LD_VAR 0 7
77124: PPUSH
77125: CALL_OW 177
// end ;
77129: GO 77087
77131: POP
77132: POP
// exit ;
77133: POP
77134: POP
77135: GO 77364
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77137: LD_ADDR_VAR 0 4
77141: PUSH
77142: LD_INT 22
77144: PUSH
77145: LD_VAR 0 5
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 91
77156: PUSH
77157: LD_VAR 0 8
77161: PUSH
77162: LD_INT 8
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: LIST
77169: PUSH
77170: LD_INT 2
77172: PUSH
77173: LD_INT 34
77175: PUSH
77176: LD_INT 12
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: LD_INT 34
77185: PUSH
77186: LD_INT 51
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 34
77195: PUSH
77196: LD_INT 32
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 34
77205: PUSH
77206: LD_INT 89
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: LIST
77224: PPUSH
77225: CALL_OW 69
77229: ST_TO_ADDR
// if tmp then
77230: LD_VAR 0 4
77234: IFFALSE 77360
// begin for j in tmp do
77236: LD_ADDR_VAR 0 2
77240: PUSH
77241: LD_VAR 0 4
77245: PUSH
77246: FOR_IN
77247: IFFALSE 77358
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77249: LD_VAR 0 2
77253: PPUSH
77254: CALL_OW 262
77258: PUSH
77259: LD_INT 3
77261: EQUAL
77262: PUSH
77263: LD_VAR 0 2
77267: PPUSH
77268: CALL_OW 261
77272: PUSH
77273: LD_INT 20
77275: GREATER
77276: OR
77277: PUSH
77278: LD_VAR 0 2
77282: PPUSH
77283: CALL_OW 314
77287: NOT
77288: AND
77289: PUSH
77290: LD_VAR 0 2
77294: PPUSH
77295: CALL_OW 263
77299: PUSH
77300: LD_INT 1
77302: NONEQUAL
77303: PUSH
77304: LD_VAR 0 2
77308: PPUSH
77309: CALL_OW 311
77313: OR
77314: AND
77315: IFFALSE 77356
// begin ComCollect ( j , x , y ) ;
77317: LD_VAR 0 2
77321: PPUSH
77322: LD_VAR 0 6
77326: PPUSH
77327: LD_VAR 0 7
77331: PPUSH
77332: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77336: LD_VAR 0 2
77340: PPUSH
77341: LD_VAR 0 8
77345: PPUSH
77346: CALL_OW 172
// exit ;
77350: POP
77351: POP
77352: POP
77353: POP
77354: GO 77364
// end ;
77356: GO 77246
77358: POP
77359: POP
// end ; end ;
77360: GO 76735
77362: POP
77363: POP
// end ; end_of_file
77364: PPOPN 9
77366: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77367: LD_VAR 0 1
77371: PPUSH
77372: LD_VAR 0 2
77376: PPUSH
77377: LD_VAR 0 3
77381: PPUSH
77382: LD_VAR 0 4
77386: PPUSH
77387: LD_VAR 0 5
77391: PPUSH
77392: LD_VAR 0 6
77396: PPUSH
77397: CALL 61728 0 6
// end ;
77401: PPOPN 6
77403: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77404: LD_INT 0
77406: PPUSH
// begin if not units then
77407: LD_VAR 0 1
77411: NOT
77412: IFFALSE 77416
// exit ;
77414: GO 77416
// end ;
77416: PPOPN 7
77418: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77419: CALL 61632 0 0
// end ; end_of_file
77423: PPOPN 1
77425: END
