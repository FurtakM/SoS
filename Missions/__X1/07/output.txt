// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 404 0 3
// PrepareAmerican ;
  28: CALL 2445 0 0
// PrepareArabian ;
  32: CALL 1124 0 0
// Action ;
  36: CALL 7187 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// end ; end_of_file
 182: LD_VAR 0 1
 186: RET
// export function SayX ( units , ident ) ; var i ; begin
 187: LD_INT 0
 189: PPUSH
 190: PPUSH
// result := false ;
 191: LD_ADDR_VAR 0 3
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// if not units then
 199: LD_VAR 0 1
 203: NOT
 204: IFFALSE 208
// exit ;
 206: GO 262
// for i in units do
 208: LD_ADDR_VAR 0 4
 212: PUSH
 213: LD_VAR 0 1
 217: PUSH
 218: FOR_IN
 219: IFFALSE 260
// if IsOk ( i ) then
 221: LD_VAR 0 4
 225: PPUSH
 226: CALL_OW 302
 230: IFFALSE 258
// begin Say ( i , ident ) ;
 232: LD_VAR 0 4
 236: PPUSH
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 88
// result := i ;
 246: LD_ADDR_VAR 0 3
 250: PUSH
 251: LD_VAR 0 4
 255: ST_TO_ADDR
// break ;
 256: GO 260
// end ;
 258: GO 218
 260: POP
 261: POP
// end ;
 262: LD_VAR 0 3
 266: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 267: LD_INT 0
 269: PPUSH
 270: PPUSH
// InitUc ;
 271: CALL_OW 18
// InitHc ;
 275: CALL_OW 19
// uc_side := 0 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// uc_nation := 0 ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// for i = 1 to amount do
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: DOUBLE
 301: LD_INT 1
 303: DEC
 304: ST_TO_ADDR
 305: LD_VAR 0 2
 309: PUSH
 310: FOR_TO
 311: IFFALSE 393
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 313: LD_ADDR_OWVAR 29
 317: PUSH
 318: LD_INT 9
 320: PPUSH
 321: LD_INT 12
 323: PPUSH
 324: CALL_OW 12
 328: PUSH
 329: LD_INT 9
 331: PPUSH
 332: LD_INT 12
 334: PPUSH
 335: CALL_OW 12
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 344: LD_ADDR_OWVAR 35
 348: PUSH
 349: LD_INT 1
 351: NEG
 352: PPUSH
 353: LD_INT 1
 355: PPUSH
 356: CALL_OW 12
 360: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 361: LD_INT 0
 363: PPUSH
 364: LD_INT 12
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 374: CALL_OW 44
 378: PPUSH
 379: LD_VAR 0 1
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL_OW 49
// end ;
 391: GO 310
 393: POP
 394: POP
// InitHc ;
 395: CALL_OW 19
// end ;
 399: LD_VAR 0 3
 403: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
// uc_side := 0 ;
 408: LD_ADDR_OWVAR 20
 412: PUSH
 413: LD_INT 0
 415: ST_TO_ADDR
// uc_nation := 0 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 0
 423: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 9
 431: PUSH
 432: LD_INT 8
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: PPUSH
 453: CALL 267 0 2
// for i := 1 to 4 do
 457: LD_ADDR_VAR 0 5
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 4
 469: PUSH
 470: FOR_TO
 471: IFFALSE 508
// begin hc_class := class_horse ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 21
 480: ST_TO_ADDR
// hc_gallery :=  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 489: CALL_OW 44
 493: PPUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL_OW 49
// end ;
 506: GO 470
 508: POP
 509: POP
// for i = 1 to 5 do
 510: LD_ADDR_VAR 0 5
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_INT 5
 522: PUSH
 523: FOR_TO
 524: IFFALSE 578
// begin hc_class = class_tiger ;
 526: LD_ADDR_OWVAR 28
 530: PUSH
 531: LD_INT 14
 533: ST_TO_ADDR
// hc_gallery =  ;
 534: LD_ADDR_OWVAR 33
 538: PUSH
 539: LD_STRING 
 541: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 542: LD_ADDR_OWVAR 35
 546: PUSH
 547: LD_INT 7
 549: NEG
 550: PPUSH
 551: LD_INT 7
 553: PPUSH
 554: CALL_OW 12
 558: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 2
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 523
 578: POP
 579: POP
// for i := 1 to 4 do
 580: LD_ADDR_VAR 0 5
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 4
 592: PUSH
 593: FOR_TO
 594: IFFALSE 631
// begin hc_class := class_phororhacos ;
 596: LD_ADDR_OWVAR 28
 600: PUSH
 601: LD_INT 18
 603: ST_TO_ADDR
// hc_gallery :=  ;
 604: LD_ADDR_OWVAR 33
 608: PUSH
 609: LD_STRING 
 611: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ;
 629: GO 593
 631: POP
 632: POP
// for i := 1 to 4 do
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: DOUBLE
 639: LD_INT 1
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 684
// begin hc_class := class_baggie ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 13
 656: ST_TO_ADDR
// hc_gallery :=  ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING 
 664: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 665: CALL_OW 44
 669: PPUSH
 670: LD_VAR 0 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 646
 684: POP
 685: POP
// for i := 1 to 5 do
 686: LD_ADDR_VAR 0 5
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 5
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := class_fish ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 20
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 3
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// end ;
 739: LD_VAR 0 4
 743: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
// if not observer or not unit then
 749: LD_VAR 0 1
 753: NOT
 754: PUSH
 755: LD_VAR 0 2
 759: NOT
 760: OR
 761: IFFALSE 765
// exit ;
 763: GO 813
// if not See ( GetSide ( observer ) , unit ) then
 765: LD_VAR 0 1
 769: PPUSH
 770: CALL_OW 255
 774: PPUSH
 775: LD_VAR 0 2
 779: PPUSH
 780: CALL_OW 292
 784: NOT
 785: IFFALSE 789
// exit ;
 787: GO 813
// result := GetDistUnits ( observer , unit ) < 12 ;
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 1
 798: PPUSH
 799: LD_VAR 0 2
 803: PPUSH
 804: CALL_OW 296
 808: PUSH
 809: LD_INT 12
 811: LESS
 812: ST_TO_ADDR
// end ;
 813: LD_VAR 0 3
 817: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 818: LD_INT 0
 820: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 488
 843: PUSH
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: CALL_OW 428
 866: PUSH
 867: LD_INT 0
 869: EQUAL
 870: AND
 871: IFFALSE 905
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_VAR 0 3
 900: PPUSH
 901: CALL_OW 48
// end ;
 905: LD_VAR 0 4
 909: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 910: LD_INT 0
 912: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: LD_VAR 0 2
 922: PPUSH
 923: LD_VAR 0 3
 927: PPUSH
 928: LD_VAR 0 4
 932: PPUSH
 933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PPUSH
 947: LD_VAR 0 3
 951: PPUSH
 952: CALL_OW 331
// end ;
 956: LD_VAR 0 5
 960: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 961: LD_INT 0
 963: PPUSH
// if not units then
 964: LD_VAR 0 1
 968: NOT
 969: IFFALSE 973
// exit ;
 971: GO 1056
// result := true ;
 973: LD_ADDR_VAR 0 4
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_INT 26
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PPUSH
 996: CALL_OW 72
1000: PUSH
1001: LD_INT 1
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 2
1009: PPUSH
1010: CALL_OW 88
1014: NOT
1015: IFFALSE 1056
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1017: LD_ADDR_VAR 0 4
1021: PUSH
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 3
1050: PPUSH
1051: CALL_OW 88
1055: ST_TO_ADDR
// end ;
1056: LD_VAR 0 4
1060: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1061: LD_INT 0
1063: PPUSH
1064: PPUSH
// if not group then
1065: LD_VAR 0 2
1069: NOT
1070: IFFALSE 1074
// exit ;
1072: GO 1119
// for i in group do
1074: LD_ADDR_VAR 0 4
1078: PUSH
1079: LD_VAR 0 2
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1117
// if See ( side , i ) then
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 4
1096: PPUSH
1097: CALL_OW 292
1101: IFFALSE 1115
// begin result := true ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// exit ;
1111: POP
1112: POP
1113: GO 1119
// end ;
1115: GO 1084
1117: POP
1118: POP
// end ; end_of_file
1119: LD_VAR 0 3
1123: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// uc_nation := 2 ;
1130: LD_ADDR_OWVAR 21
1134: PUSH
1135: LD_INT 2
1137: ST_TO_ADDR
// uc_side := 5 ;
1138: LD_ADDR_OWVAR 20
1142: PUSH
1143: LD_INT 5
1145: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1146: LD_ADDR_EXP 21
1150: PUSH
1151: LD_STRING Abdul
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: LD_STRING 
1159: PPUSH
1160: CALL 15313 0 3
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1173: LD_ADDR_EXP 13
1177: PUSH
1178: LD_STRING Heike
1180: PPUSH
1181: LD_EXP 1
1185: NOT
1186: PPUSH
1187: LD_EXP 2
1191: PPUSH
1192: CALL 15313 0 3
1196: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1197: LD_ADDR_EXP 16
1201: PUSH
1202: LD_STRING Ibrahim
1204: PPUSH
1205: LD_EXP 1
1209: NOT
1210: PPUSH
1211: LD_EXP 2
1215: PPUSH
1216: CALL 15313 0 3
1220: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_STRING Givi
1228: PPUSH
1229: LD_EXP 1
1233: NOT
1234: PPUSH
1235: LD_EXP 2
1239: PPUSH
1240: CALL 15313 0 3
1244: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_STRING Kamil
1252: PPUSH
1253: LD_EXP 1
1257: NOT
1258: PPUSH
1259: LD_EXP 2
1263: PPUSH
1264: CALL 15313 0 3
1268: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1269: LD_ADDR_EXP 18
1273: PUSH
1274: LD_STRING Kaia
1276: PPUSH
1277: LD_EXP 1
1281: NOT
1282: PPUSH
1283: LD_EXP 2
1287: PPUSH
1288: CALL 15313 0 3
1292: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1293: LD_ADDR_EXP 19
1297: PUSH
1298: LD_STRING Sophia
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_EXP 2
1311: PPUSH
1312: CALL 15313 0 3
1316: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1317: LD_ADDR_EXP 20
1321: PUSH
1322: LD_STRING Markov
1324: PPUSH
1325: LD_EXP 1
1329: NOT
1330: PPUSH
1331: LD_EXP 2
1335: PPUSH
1336: CALL 15313 0 3
1340: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1341: LD_ADDR_EXP 24
1345: PUSH
1346: LD_STRING Aviradze
1348: PPUSH
1349: LD_EXP 1
1353: NOT
1354: PPUSH
1355: LD_EXP 2
1359: PPUSH
1360: CALL 15313 0 3
1364: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1365: LD_ADDR_EXP 23
1369: PUSH
1370: LD_STRING Kurt
1372: PPUSH
1373: LD_EXP 1
1377: NOT
1378: PPUSH
1379: LD_EXP 2
1383: PPUSH
1384: CALL 15313 0 3
1388: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 15
1393: PUSH
1394: LD_STRING Mike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 15313 0 3
1412: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 22
1417: PUSH
1418: LD_STRING Olaf
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 15313 0 3
1436: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1437: LD_ADDR_EXP 25
1441: PUSH
1442: LD_STRING 06_others
1444: PPUSH
1445: CALL_OW 31
1449: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1450: LD_ADDR_EXP 26
1454: PUSH
1455: LD_STRING 06_apes
1457: PPUSH
1458: CALL_OW 31
1462: ST_TO_ADDR
// if debug then
1463: LD_EXP 1
1467: IFFALSE 1740
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1469: LD_ADDR_VAR 0 3
1473: PUSH
1474: LD_INT 14
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: LD_INT 2
1482: PUSH
1483: LD_INT 25
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 1000
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: LD_INT 31
1515: PUSH
1516: LD_INT 2
1518: PUSH
1519: LD_INT 1000
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 14
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 27
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 750
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: LD_INT 27
1575: PUSH
1576: LD_INT 2
1578: PUSH
1579: LD_INT 900
1581: PUSH
1582: LD_INT 0
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 14
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: LD_INT 32
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: LD_INT 1000
1611: PUSH
1612: LD_INT 100
1614: PUSH
1615: LD_INT 0
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 14
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 32
1642: PUSH
1643: LD_INT 2
1645: PUSH
1646: LD_INT 1000
1648: PUSH
1649: LD_INT 50
1651: PUSH
1652: LD_INT 50
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 14
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 27
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: LD_INT 1000
1685: PUSH
1686: LD_INT 0
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 14
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 92
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end else
1738: GO 1747
// tmp := [ ] ;
1740: LD_ADDR_VAR 0 3
1744: PUSH
1745: EMPTY
1746: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1747: LD_ADDR_EXP 27
1751: PUSH
1752: LD_STRING 06_Vehicles
1754: PPUSH
1755: LD_VAR 0 3
1759: PPUSH
1760: CALL_OW 30
1764: ST_TO_ADDR
// counter := 0 ;
1765: LD_ADDR_VAR 0 4
1769: PUSH
1770: LD_INT 0
1772: ST_TO_ADDR
// if heikeVehicles then
1773: LD_EXP 27
1777: IFFALSE 1899
// begin for i := heikeVehicles downto 1 do
1779: LD_ADDR_VAR 0 2
1783: PUSH
1784: DOUBLE
1785: LD_EXP 27
1789: INC
1790: ST_TO_ADDR
1791: LD_INT 1
1793: PUSH
1794: FOR_DOWNTO
1795: IFFALSE 1897
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1797: LD_EXP 27
1801: PUSH
1802: LD_VAR 0 2
1806: ARRAY
1807: PUSH
1808: LD_INT 3
1810: ARRAY
1811: PUSH
1812: LD_INT 2
1814: EQUAL
1815: IFFALSE 1895
// begin if counter < remoteControlLimit then
1817: LD_VAR 0 4
1821: PUSH
1822: LD_EXP 12
1826: LESS
1827: IFFALSE 1875
// begin counter := Inc ( counter ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 54114 0 1
1843: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1844: LD_ADDR_EXP 27
1848: PUSH
1849: LD_EXP 27
1853: PPUSH
1854: LD_EXP 27
1858: PPUSH
1859: LD_EXP 27
1863: PUSH
1864: LD_VAR 0 2
1868: ARRAY
1869: PPUSH
1870: CALL_OW 2
1874: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1875: LD_ADDR_EXP 27
1879: PUSH
1880: LD_EXP 27
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: CALL_OW 3
1894: ST_TO_ADDR
// end ; end ;
1895: GO 1794
1897: POP
1898: POP
// end ; end ;
1899: LD_VAR 0 1
1903: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1904: LD_EXP 3
1908: IFFALSE 2442
1910: GO 1912
1912: DISABLE
1913: LD_INT 0
1915: PPUSH
1916: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_INT 96
1924: PUSH
1925: LD_INT 50
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 49
1934: PUSH
1935: LD_INT 52
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 34
1944: PUSH
1945: LD_INT 55
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 41
1954: PUSH
1955: LD_INT 70
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 53
1964: PUSH
1965: LD_INT 96
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 103
1974: PUSH
1975: LD_INT 64
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 104
1992: PUSH
1993: LD_INT 70
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 111
2002: PUSH
2003: LD_INT 103
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 131
2012: PUSH
2013: LD_INT 147
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 130
2022: PUSH
2023: LD_INT 153
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 110
2032: PUSH
2033: LD_INT 93
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 103
2042: PUSH
2043: LD_INT 65
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// for i in tmp [ 1 ] do
2062: LD_ADDR_VAR 0 1
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 1
2074: ARRAY
2075: PUSH
2076: FOR_IN
2077: IFFALSE 2129
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2079: LD_EXP 15
2083: PPUSH
2084: LD_VAR 0 1
2088: PUSH
2089: LD_INT 1
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 1
2097: PUSH
2098: LD_INT 2
2100: ARRAY
2101: PPUSH
2102: CALL_OW 174
// AddComHold ( Mike ) ;
2106: LD_EXP 15
2110: PPUSH
2111: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2115: LD_EXP 15
2119: PPUSH
2120: LD_INT 175
2122: PPUSH
2123: CALL_OW 202
// end ;
2127: GO 2076
2129: POP
2130: POP
// for i in tmp [ 2 ] do
2131: LD_ADDR_VAR 0 1
2135: PUSH
2136: LD_VAR 0 2
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: FOR_IN
2146: IFFALSE 2198
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2148: LD_EXP 23
2152: PPUSH
2153: LD_VAR 0 1
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 1
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 174
// AddComHold ( Kurt ) ;
2175: LD_EXP 23
2179: PPUSH
2180: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2184: LD_EXP 23
2188: PPUSH
2189: LD_INT 175
2191: PPUSH
2192: CALL_OW 202
// end ;
2196: GO 2145
2198: POP
2199: POP
// wait ( 2 2$00 ) ;
2200: LD_INT 4200
2202: PPUSH
2203: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2207: LD_INT 35
2209: PPUSH
2210: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2214: LD_EXP 15
2218: PPUSH
2219: CALL_OW 314
2223: NOT
2224: PUSH
2225: LD_EXP 15
2229: PPUSH
2230: CALL_OW 301
2234: OR
2235: PUSH
2236: LD_EXP 23
2240: PPUSH
2241: CALL_OW 314
2245: NOT
2246: PUSH
2247: LD_EXP 23
2251: PPUSH
2252: CALL_OW 301
2256: OR
2257: AND
2258: IFFALSE 2207
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2260: LD_EXP 23
2264: PPUSH
2265: CALL_OW 301
2269: PUSH
2270: LD_EXP 15
2274: PPUSH
2275: CALL_OW 301
2279: AND
2280: IFFALSE 2292
// begin scoutFailed := true ;
2282: LD_ADDR_EXP 4
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// exit ;
2290: GO 2442
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2292: LD_EXP 23
2296: PUSH
2297: LD_EXP 15
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: LD_INT 132
2308: PPUSH
2309: LD_INT 52
2311: PPUSH
2312: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2316: LD_EXP 23
2320: PUSH
2321: LD_EXP 15
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PPUSH
2330: LD_INT 22
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PPUSH
2340: CALL_OW 69
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2353: LD_INT 35
2355: PPUSH
2356: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2360: LD_INT 2
2362: PPUSH
2363: LD_EXP 23
2367: PPUSH
2368: CALL_OW 292
2372: PUSH
2373: LD_INT 2
2375: PPUSH
2376: LD_EXP 15
2380: PPUSH
2381: CALL_OW 292
2385: OR
2386: IFFALSE 2353
// if IsLive ( Kurt ) then
2388: LD_EXP 23
2392: PPUSH
2393: CALL_OW 300
2397: IFFALSE 2411
// SetSide ( Kurt , 2 ) ;
2399: LD_EXP 23
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 235
// if IsLive ( Mike ) then
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 300
2420: IFFALSE 2434
// SetSide ( Mike , 2 ) ;
2422: LD_EXP 15
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 235
// scoutSuccess := true ;
2434: LD_ADDR_EXP 5
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// end ; end_of_file
2442: PPOPN 2
2444: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
// uc_side := 1 ;
2451: LD_ADDR_OWVAR 20
2455: PUSH
2456: LD_INT 1
2458: ST_TO_ADDR
// uc_nation := 1 ;
2459: LD_ADDR_OWVAR 21
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2467: LD_INT 1
2469: PPUSH
2470: CALL_OW 274
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 2500
2480: PUSH
2481: LD_INT 3200
2483: PUSH
2484: LD_INT 3500
2486: PUSH
2487: LD_INT 3900
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_OWVAR 67
2500: ARRAY
2501: PPUSH
2502: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2506: LD_INT 1
2508: PPUSH
2509: CALL_OW 274
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: LD_INT 800
2519: PPUSH
2520: CALL_OW 277
// usForces := [ ] ;
2524: LD_ADDR_EXP 29
2528: PUSH
2529: EMPTY
2530: ST_TO_ADDR
// usToBuild := [ ] ;
2531: LD_ADDR_EXP 31
2535: PUSH
2536: EMPTY
2537: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2538: LD_ADDR_EXP 32
2542: PUSH
2543: EMPTY
2544: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2545: LD_ADDR_VAR 0 2
2549: PUSH
2550: LD_INT 21
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: PUSH
2565: FOR_IN
2566: IFFALSE 2603
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: LD_INT 8
2581: PUSH
2582: LD_INT 8
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_OWVAR 67
2595: ARRAY
2596: PPUSH
2597: CALL_OW 241
2601: GO 2565
2603: POP
2604: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2605: LD_ADDR_VAR 0 2
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 32
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PPUSH
2620: CALL_OW 69
2624: PUSH
2625: FOR_IN
2626: IFFALSE 2716
// begin if GetBWeapon ( i ) = us_radar then
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL_OW 269
2637: PUSH
2638: LD_INT 11
2640: EQUAL
2641: IFFALSE 2666
// begin uc_nation := 0 ;
2643: LD_ADDR_OWVAR 21
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 16
2656: PPUSH
2657: LD_INT 2
2659: PPUSH
2660: CALL_OW 380
// end else
2664: GO 2700
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2666: LD_INT 0
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 5
2674: PUSH
2675: LD_INT 6
2677: PUSH
2678: LD_INT 7
2680: PUSH
2681: LD_INT 8
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: LD_OWVAR 67
2694: ARRAY
2695: PPUSH
2696: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2700: CALL_OW 44
2704: PPUSH
2705: LD_VAR 0 2
2709: PPUSH
2710: CALL_OW 52
// end ;
2714: GO 2625
2716: POP
2717: POP
// b := HexInfo ( 74 , 120 ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 74
2725: PPUSH
2726: LD_INT 120
2728: PPUSH
2729: CALL_OW 428
2733: ST_TO_ADDR
// uc_nation := 1 ;
2734: LD_ADDR_OWVAR 21
2738: PUSH
2739: LD_INT 1
2741: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: DOUBLE
2748: LD_INT 1
2750: DEC
2751: ST_TO_ADDR
2752: LD_INT 1
2754: PUSH
2755: LD_INT 2
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 4
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PUSH
2776: FOR_TO
2777: IFFALSE 2829
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2779: LD_INT 0
2781: PPUSH
2782: LD_INT 1
2784: PPUSH
2785: LD_INT 5
2787: PUSH
2788: LD_INT 6
2790: PUSH
2791: LD_INT 7
2793: PUSH
2794: LD_INT 8
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_OWVAR 67
2807: ARRAY
2808: PPUSH
2809: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2813: CALL_OW 44
2817: PPUSH
2818: LD_VAR 0 3
2822: PPUSH
2823: CALL_OW 52
// end ;
2827: GO 2776
2829: POP
2830: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 313
2840: PPUSH
2841: LD_INT 5
2843: PPUSH
2844: CALL_OW 336
// for i := 1 to 6 do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 6
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2912
// begin PrepareHuman ( false , 4 , 6 ) ;
2864: LD_INT 0
2866: PPUSH
2867: LD_INT 4
2869: PPUSH
2870: LD_INT 6
2872: PPUSH
2873: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2877: CALL_OW 44
2881: PPUSH
2882: LD_INT 32
2884: PUSH
2885: LD_INT 33
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_VAR 0 2
2896: PUSH
2897: LD_INT 2
2899: MOD
2900: PUSH
2901: LD_INT 1
2903: PLUS
2904: ARRAY
2905: PPUSH
2906: CALL_OW 52
// end ;
2910: GO 2861
2912: POP
2913: POP
// for i := 1 to 3 do
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: DOUBLE
2920: LD_INT 1
2922: DEC
2923: ST_TO_ADDR
2924: LD_INT 3
2926: PUSH
2927: FOR_TO
2928: IFFALSE 2957
// begin PrepareHuman ( false , 3 , 6 ) ;
2930: LD_INT 0
2932: PPUSH
2933: LD_INT 3
2935: PPUSH
2936: LD_INT 6
2938: PPUSH
2939: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2943: CALL_OW 44
2947: PPUSH
2948: LD_INT 25
2950: PPUSH
2951: CALL_OW 52
// end ;
2955: GO 2927
2957: POP
2958: POP
// for i := 1 to 3 do
2959: LD_ADDR_VAR 0 2
2963: PUSH
2964: DOUBLE
2965: LD_INT 1
2967: DEC
2968: ST_TO_ADDR
2969: LD_INT 3
2971: PUSH
2972: FOR_TO
2973: IFFALSE 3031
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2975: LD_INT 0
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 6
2983: PUSH
2984: LD_INT 7
2986: PUSH
2987: LD_INT 7
2989: PUSH
2990: LD_INT 7
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_OWVAR 67
3003: ARRAY
3004: PPUSH
3005: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3009: CALL_OW 44
3013: PPUSH
3014: LD_INT 78
3016: PPUSH
3017: LD_INT 130
3019: PPUSH
3020: CALL_OW 428
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: GO 2972
3031: POP
3032: POP
// for i := 1 to 3 do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_INT 3
3045: PUSH
3046: FOR_TO
3047: IFFALSE 3134
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: LD_INT 13
3060: PPUSH
3061: LD_INT 100
3063: PPUSH
3064: CALL 20328 0 5
// veh := CreateVehicle ;
3068: LD_ADDR_VAR 0 4
3072: PUSH
3073: CALL_OW 45
3077: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_INT 3
3085: PPUSH
3086: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 9
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3105: LD_INT 0
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 6
3113: PPUSH
3114: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3118: CALL_OW 44
3122: PPUSH
3123: LD_VAR 0 4
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3046
3134: POP
3135: POP
// InitHc ;
3136: CALL_OW 19
// hc_gallery := us ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING us
3147: ST_TO_ADDR
// hc_face_number := 26 ;
3148: LD_ADDR_OWVAR 34
3152: PUSH
3153: LD_INT 26
3155: ST_TO_ADDR
// hc_name := Doug Callahan ;
3156: LD_ADDR_OWVAR 26
3160: PUSH
3161: LD_STRING Doug Callahan
3163: ST_TO_ADDR
// hc_class := class_engineer ;
3164: LD_ADDR_OWVAR 28
3168: PUSH
3169: LD_INT 2
3171: ST_TO_ADDR
// hc_sex := sex_male ;
3172: LD_ADDR_OWVAR 27
3176: PUSH
3177: LD_INT 1
3179: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3180: LD_ADDR_OWVAR 29
3184: PUSH
3185: LD_INT 10
3187: PUSH
3188: LD_INT 11
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3195: LD_ADDR_OWVAR 30
3199: PUSH
3200: LD_INT 2
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 0
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3218: LD_ADDR_OWVAR 31
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 6
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: ST_TO_ADDR
// usCommander := CreateHuman ;
3241: LD_ADDR_EXP 28
3245: PUSH
3246: CALL_OW 44
3250: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3251: LD_EXP 28
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 52
// InitHC_All ( ) ;
3263: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3267: LD_INT 2
3269: PPUSH
3270: LD_INT 1
3272: PPUSH
3273: LD_INT 2
3275: PPUSH
3276: LD_INT 12
3278: PPUSH
3279: LD_INT 100
3281: PPUSH
3282: CALL 20328 0 5
// usCargo := CreateVehicle ;
3286: LD_ADDR_EXP 30
3290: PUSH
3291: CALL_OW 45
3295: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3296: LD_EXP 30
3300: PPUSH
3301: LD_INT 81
3303: PPUSH
3304: LD_INT 143
3306: PPUSH
3307: LD_INT 0
3309: PPUSH
3310: CALL_OW 48
// Connect ( usCargo ) ;
3314: LD_EXP 30
3318: PPUSH
3319: CALL 23419 0 1
// DoNotAttack ( 5 , usCargo ) ;
3323: LD_INT 5
3325: PPUSH
3326: LD_EXP 30
3330: PPUSH
3331: CALL_OW 471
// end ;
3335: LD_VAR 0 1
3339: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3340: LD_EXP 29
3344: NOT
3345: PUSH
3346: LD_EXP 6
3350: AND
3351: PUSH
3352: LD_INT 25
3354: PPUSH
3355: CALL_OW 302
3359: AND
3360: PUSH
3361: LD_INT 25
3363: PPUSH
3364: CALL_OW 461
3368: PUSH
3369: LD_INT 2
3371: EQUAL
3372: AND
3373: IFFALSE 3530
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 4
3396: PUSH
3397: LD_INT 5
3399: PUSH
3400: LD_INT 6
3402: PUSH
3403: LD_INT 6
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_OWVAR 67
3416: ARRAY
3417: PUSH
3418: FOR_TO
3419: IFFALSE 3528
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3421: LD_ADDR_VAR 0 2
3425: PUSH
3426: LD_INT 2
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3452: LD_VAR 0 2
3456: PUSH
3457: LD_INT 4
3459: EQUAL
3460: IFFALSE 3472
// weapon := us_heavy_gun else
3462: LD_ADDR_VAR 0 3
3466: PUSH
3467: LD_INT 6
3469: ST_TO_ADDR
3470: GO 3503
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3472: LD_ADDR_VAR 0 3
3476: PUSH
3477: LD_INT 5
3479: PUSH
3480: LD_INT 7
3482: PUSH
3483: LD_INT 4
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: CALL_OW 12
3501: ARRAY
3502: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3503: LD_INT 25
3505: PPUSH
3506: LD_VAR 0 2
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 2
3516: PPUSH
3517: LD_VAR 0 3
3521: PPUSH
3522: CALL_OW 185
// end ;
3526: GO 3418
3528: POP
3529: POP
// end ;
3530: PPOPN 3
3532: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3533: LD_EXP 29
3537: PUSH
3538: LD_INT 4
3540: PUSH
3541: LD_INT 5
3543: PUSH
3544: LD_INT 6
3546: PUSH
3547: LD_INT 6
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: GREATEREQUAL
3562: IFFALSE 3673
3564: GO 3566
3566: DISABLE
3567: LD_INT 0
3569: PPUSH
3570: PPUSH
// begin enable ;
3571: ENABLE
// tmp := usForces ;
3572: LD_ADDR_VAR 0 2
3576: PUSH
3577: LD_EXP 29
3581: ST_TO_ADDR
// usForces := [ ] ;
3582: LD_ADDR_EXP 29
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// if not tmp then
3589: LD_VAR 0 2
3593: NOT
3594: IFFALSE 3598
// exit ;
3596: GO 3673
// repeat wait ( 0 0$1 ) ;
3598: LD_INT 35
3600: PPUSH
3601: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_VAR 0 2
3614: PPUSH
3615: LD_INT 98
3617: PUSH
3618: LD_INT 50
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 114
3627: PUSH
3628: LD_INT 50
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 127
3637: PUSH
3638: LD_INT 51
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 131
3647: PUSH
3648: LD_INT 35
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PPUSH
3661: CALL 55357 0 2
3665: ST_TO_ADDR
// until not tmp ;
3666: LD_VAR 0 2
3670: NOT
3671: IFFALSE 3598
// end ;
3673: PPOPN 2
3675: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3676: LD_EXP 3
3680: PUSH
3681: LD_EXP 5
3685: NOT
3686: AND
3687: PUSH
3688: LD_INT 11
3690: PPUSH
3691: LD_INT 22
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PPUSH
3701: CALL_OW 70
3705: AND
3706: IFFALSE 3827
3708: GO 3710
3710: DISABLE
3711: LD_INT 0
3713: PPUSH
3714: PPUSH
3715: PPUSH
// begin uc_side := 1 ;
3716: LD_ADDR_OWVAR 20
3720: PUSH
3721: LD_INT 1
3723: ST_TO_ADDR
// uc_nation := 1 ;
3724: LD_ADDR_OWVAR 21
3728: PUSH
3729: LD_INT 1
3731: ST_TO_ADDR
// tmp := [ ] ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: EMPTY
3738: ST_TO_ADDR
// for i := 1 to 2 do
3739: LD_ADDR_VAR 0 1
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 2
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3825
// begin PrepareSoldier ( false , 7 ) ;
3755: LD_INT 0
3757: PPUSH
3758: LD_INT 7
3760: PPUSH
3761: CALL_OW 381
// un := CreateHuman ;
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: CALL_OW 44
3774: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3775: LD_VAR 0 2
3779: PPUSH
3780: LD_INT 130
3782: PPUSH
3783: LD_INT 153
3785: PPUSH
3786: LD_INT 3
3788: PPUSH
3789: LD_INT 0
3791: PPUSH
3792: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3796: LD_VAR 0 2
3800: PPUSH
3801: LD_INT 5
3803: PPUSH
3804: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3808: LD_VAR 0 2
3812: PPUSH
3813: LD_INT 108
3815: PPUSH
3816: LD_INT 108
3818: PPUSH
3819: CALL_OW 174
// end ;
3823: GO 3752
3825: POP
3826: POP
// end ;
3827: PPOPN 3
3829: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3830: LD_EXP 3
3834: PUSH
3835: LD_EXP 5
3839: NOT
3840: AND
3841: PUSH
3842: LD_INT 10
3844: PPUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 70
3859: AND
3860: IFFALSE 3981
3862: GO 3864
3864: DISABLE
3865: LD_INT 0
3867: PPUSH
3868: PPUSH
3869: PPUSH
// begin uc_side := 1 ;
3870: LD_ADDR_OWVAR 20
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// uc_nation := 1 ;
3878: LD_ADDR_OWVAR 21
3882: PUSH
3883: LD_INT 1
3885: ST_TO_ADDR
// tmp := [ ] ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: EMPTY
3892: ST_TO_ADDR
// for i := 1 to 2 do
3893: LD_ADDR_VAR 0 1
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_INT 2
3905: PUSH
3906: FOR_TO
3907: IFFALSE 3979
// begin PrepareSoldier ( false , 7 ) ;
3909: LD_INT 0
3911: PPUSH
3912: LD_INT 7
3914: PPUSH
3915: CALL_OW 381
// un := CreateHuman ;
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: CALL_OW 44
3928: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3929: LD_VAR 0 2
3933: PPUSH
3934: LD_INT 56
3936: PPUSH
3937: LD_INT 101
3939: PPUSH
3940: LD_INT 3
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3950: LD_VAR 0 2
3954: PPUSH
3955: LD_INT 5
3957: PPUSH
3958: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_INT 72
3969: PPUSH
3970: LD_INT 92
3972: PPUSH
3973: CALL_OW 174
// end ;
3977: GO 3906
3979: POP
3980: POP
// end ;
3981: PPOPN 3
3983: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3984: LD_EXP 30
3988: PPUSH
3989: CALL_OW 302
3993: PUSH
3994: LD_EXP 7
3998: NOT
3999: AND
4000: IFFALSE 4263
4002: GO 4004
4004: DISABLE
4005: LD_INT 0
4007: PPUSH
4008: PPUSH
// begin enable ;
4009: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: LD_INT 14
4017: PPUSH
4018: LD_INT 81
4020: PUSH
4021: LD_INT 1
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 50
4030: PUSH
4031: EMPTY
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4043: LD_ADDR_VAR 0 1
4047: PUSH
4048: LD_INT 12
4050: PPUSH
4051: CALL_OW 435
4055: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4056: LD_EXP 30
4060: PPUSH
4061: CALL_OW 261
4065: PUSH
4066: LD_INT 10
4068: LESS
4069: PUSH
4070: LD_INT 2
4072: PPUSH
4073: LD_EXP 30
4077: PPUSH
4078: CALL_OW 292
4082: NOT
4083: AND
4084: IFFALSE 4098
// SetFuel ( usCargo , 100 ) ;
4086: LD_EXP 30
4090: PPUSH
4091: LD_INT 100
4093: PPUSH
4094: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4098: LD_EXP 30
4102: PPUSH
4103: CALL_OW 314
4107: NOT
4108: PUSH
4109: LD_EXP 30
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 289
4121: PUSH
4122: LD_INT 100
4124: LESS
4125: AND
4126: PUSH
4127: LD_VAR 0 2
4131: NOT
4132: AND
4133: IFFALSE 4199
// begin if cr then
4135: LD_VAR 0 1
4139: IFFALSE 4170
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4141: LD_EXP 30
4145: PPUSH
4146: LD_VAR 0 1
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_VAR 0 1
4159: PUSH
4160: LD_INT 2
4162: ARRAY
4163: PPUSH
4164: CALL_OW 117
4168: GO 4197
// if not IsInArea ( usCargo , usCratesArea ) then
4170: LD_EXP 30
4174: PPUSH
4175: LD_INT 12
4177: PPUSH
4178: CALL_OW 308
4182: NOT
4183: IFFALSE 4197
// ComMoveToArea ( usCargo , usCratesArea ) ;
4185: LD_EXP 30
4189: PPUSH
4190: LD_INT 12
4192: PPUSH
4193: CALL_OW 113
// exit ;
4197: GO 4263
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4199: LD_VAR 0 2
4203: PUSH
4204: LD_EXP 30
4208: PPUSH
4209: LD_INT 14
4211: PPUSH
4212: CALL_OW 308
4216: NOT
4217: AND
4218: IFFALSE 4237
// ComMoveXY ( usCargo , 80 , 143 ) else
4220: LD_EXP 30
4224: PPUSH
4225: LD_INT 80
4227: PPUSH
4228: LD_INT 143
4230: PPUSH
4231: CALL_OW 111
4235: GO 4263
// if GetCargo ( usCargo , mat_cans ) then
4237: LD_EXP 30
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: CALL_OW 289
4249: IFFALSE 4263
// ComGive ( usCargo , usDepot ) ;
4251: LD_EXP 30
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 161
// end ;
4263: PPOPN 2
4265: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4266: LD_EXP 7
4270: NOT
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 21
4284: PUSH
4285: LD_INT 1
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: LD_INT 3
4294: PUSH
4295: LD_INT 50
4297: PUSH
4298: EMPTY
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: AND
4315: PUSH
4316: LD_INT 22
4318: PUSH
4319: LD_INT 1
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 3
4328: PUSH
4329: LD_INT 60
4331: PUSH
4332: EMPTY
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: LD_INT 25
4341: PUSH
4342: LD_INT 4
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: AND
4359: IFFALSE 4562
4361: GO 4363
4363: DISABLE
4364: LD_INT 0
4366: PPUSH
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_INT 22
4376: PUSH
4377: LD_INT 1
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 21
4386: PUSH
4387: LD_INT 1
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: LD_INT 50
4399: PUSH
4400: EMPTY
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: PPUSH
4412: CALL_OW 69
4416: PUSH
4417: FOR_IN
4418: IFFALSE 4560
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_INT 22
4427: PUSH
4428: LD_INT 1
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 3
4437: PUSH
4438: LD_INT 60
4440: PUSH
4441: EMPTY
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 25
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 69
4467: ST_TO_ADDR
// if not sci then
4468: LD_VAR 0 2
4472: NOT
4473: IFFALSE 4477
// break ;
4475: GO 4560
// sci := sci [ 1 ] ;
4477: LD_ADDR_VAR 0 2
4481: PUSH
4482: LD_VAR 0 2
4486: PUSH
4487: LD_INT 1
4489: ARRAY
4490: ST_TO_ADDR
// if IsInUnit ( sci ) then
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 310
4500: IFFALSE 4513
// ComExit ( sci ) else
4502: LD_VAR 0 2
4506: PPUSH
4507: CALL 53151 0 1
4511: GO 4558
// begin ComHeal ( sci , i ) ;
4513: LD_VAR 0 2
4517: PPUSH
4518: LD_VAR 0 1
4522: PPUSH
4523: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_INT 32
4534: PUSH
4535: LD_INT 33
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 2
4547: PPUSH
4548: CALL_OW 12
4552: ARRAY
4553: PPUSH
4554: CALL_OW 180
// end ; end ;
4558: GO 4417
4560: POP
4561: POP
// end ;
4562: PPOPN 2
4564: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4565: LD_EXP 7
4569: NOT
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 60
4586: PUSH
4587: EMPTY
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 50
4596: PUSH
4597: EMPTY
4598: LIST
4599: PUSH
4600: LD_INT 34
4602: PUSH
4603: LD_INT 13
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: PPUSH
4616: CALL_OW 69
4620: AND
4621: PUSH
4622: LD_INT 22
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 24
4637: PUSH
4638: LD_INT 1000
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 21
4651: PUSH
4652: LD_INT 3
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 29
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: AND
4687: IFFALSE 4956
4689: GO 4691
4691: DISABLE
4692: LD_INT 0
4694: PPUSH
4695: PPUSH
4696: PPUSH
// begin enable ;
4697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4698: LD_ADDR_VAR 0 2
4702: PUSH
4703: LD_INT 22
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: LD_INT 24
4718: PUSH
4719: LD_INT 1000
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 21
4732: PUSH
4733: LD_INT 3
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 30
4745: PUSH
4746: LD_INT 29
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4768: LD_ADDR_VAR 0 3
4772: PUSH
4773: LD_INT 22
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 24
4788: PUSH
4789: LD_INT 600
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 21
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 30
4815: PUSH
4816: LD_INT 29
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 69
4837: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4838: LD_ADDR_VAR 0 1
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: LD_INT 60
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 50
4868: PUSH
4869: EMPTY
4870: LIST
4871: PUSH
4872: LD_INT 34
4874: PUSH
4875: LD_INT 13
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: CALL_OW 69
4892: PUSH
4893: FOR_IN
4894: IFFALSE 4954
// begin if tmp2 then
4896: LD_VAR 0 3
4900: IFFALSE 4928
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4902: LD_VAR 0 1
4906: PPUSH
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 74
4921: PPUSH
4922: CALL_OW 130
4926: GO 4952
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4928: LD_VAR 0 1
4932: PPUSH
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_VAR 0 1
4942: PPUSH
4943: CALL_OW 74
4947: PPUSH
4948: CALL_OW 130
// end ;
4952: GO 4893
4954: POP
4955: POP
// end ;
4956: PPOPN 3
4958: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4959: LD_EXP 7
4963: NOT
4964: PUSH
4965: LD_INT 14
4967: PPUSH
4968: LD_INT 81
4970: PUSH
4971: LD_INT 1
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 50
4980: PUSH
4981: EMPTY
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 70
4992: NOT
4993: AND
4994: PUSH
4995: LD_EXP 31
4999: AND
5000: PUSH
5001: LD_INT 22
5003: PUSH
5004: LD_INT 1
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 3
5013: PUSH
5014: LD_INT 60
5016: PUSH
5017: EMPTY
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 34
5032: PUSH
5033: LD_INT 13
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: AND
5051: IFFALSE 5163
5053: GO 5055
5055: DISABLE
// begin enable ;
5056: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5057: LD_INT 22
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 3
5069: PUSH
5070: LD_INT 60
5072: PUSH
5073: EMPTY
5074: LIST
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 50
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 34
5088: PUSH
5089: LD_INT 13
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 69
5106: PPUSH
5107: LD_EXP 31
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: LD_EXP 31
5124: PUSH
5125: LD_INT 1
5127: ARRAY
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: LD_EXP 31
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: PUSH
5142: LD_INT 3
5144: ARRAY
5145: PPUSH
5146: LD_EXP 31
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PUSH
5155: LD_INT 4
5157: ARRAY
5158: PPUSH
5159: CALL_OW 566
// end ;
5163: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5164: LD_INT 22
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 50
5176: PUSH
5177: EMPTY
5178: LIST
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: LD_INT 54
5185: PUSH
5186: EMPTY
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: LD_INT 25
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 25
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 16
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: IFFALSE 5604
5244: GO 5246
5246: DISABLE
5247: LD_INT 0
5249: PPUSH
5250: PPUSH
5251: PPUSH
5252: PPUSH
// begin enable ;
5253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5254: LD_ADDR_VAR 0 2
5258: PUSH
5259: LD_INT 22
5261: PUSH
5262: LD_INT 1
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 50
5271: PUSH
5272: EMPTY
5273: LIST
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: LD_INT 54
5280: PUSH
5281: EMPTY
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: LD_INT 25
5293: PUSH
5294: LD_INT 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 25
5303: PUSH
5304: LD_INT 5
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 25
5313: PUSH
5314: LD_INT 16
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5338: LD_ADDR_VAR 0 3
5342: PUSH
5343: LD_INT 22
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: LD_INT 50
5355: PUSH
5356: EMPTY
5357: LIST
5358: PUSH
5359: LD_INT 21
5361: PUSH
5362: LD_INT 3
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 30
5371: PUSH
5372: LD_INT 32
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: LD_INT 58
5381: PUSH
5382: EMPTY
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 69
5396: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5397: LD_ADDR_VAR 0 4
5401: PUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 50
5414: PUSH
5415: EMPTY
5416: LIST
5417: PUSH
5418: LD_INT 30
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: ST_TO_ADDR
// if not tmp then
5438: LD_VAR 0 2
5442: NOT
5443: IFFALSE 5447
// exit ;
5445: GO 5604
// for i in tmp do
5447: LD_ADDR_VAR 0 1
5451: PUSH
5452: LD_VAR 0 2
5456: PUSH
5457: FOR_IN
5458: IFFALSE 5602
// begin btmp := FilterByTag ( btmp , 0 ) ;
5460: LD_ADDR_VAR 0 3
5464: PUSH
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 0
5472: PPUSH
5473: CALL 50336 0 2
5477: ST_TO_ADDR
// if not btmp then
5478: LD_VAR 0 3
5482: NOT
5483: IFFALSE 5528
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5485: LD_VAR 0 1
5489: PPUSH
5490: CALL_OW 257
5494: PUSH
5495: LD_INT 16
5497: NONEQUAL
5498: PUSH
5499: LD_VAR 0 4
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 4
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
// continue ;
5524: GO 5457
// end else
5526: GO 5600
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_VAR 0 3
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 120
// wait ( 0 0$9 ) ;
5562: LD_INT 315
5564: PPUSH
5565: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL 17469 0 1
5582: IFFALSE 5600
// SetTag ( btmp [ 1 ] , 0 ) ;
5584: LD_VAR 0 3
5588: PUSH
5589: LD_INT 1
5591: ARRAY
5592: PPUSH
5593: LD_INT 0
5595: PPUSH
5596: CALL_OW 109
// end ; end ;
5600: GO 5457
5602: POP
5603: POP
// end ;
5604: PPOPN 4
5606: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5607: LD_INT 22
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: LD_INT 33
5619: PUSH
5620: LD_INT 2
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 50
5629: PUSH
5630: EMPTY
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 61
5638: PUSH
5639: EMPTY
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: PPUSH
5652: CALL_OW 69
5656: IFFALSE 5747
5658: GO 5660
5660: DISABLE
5661: LD_INT 0
5663: PPUSH
5664: PPUSH
// begin enable ;
5665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5666: LD_ADDR_VAR 0 2
5670: PUSH
5671: LD_INT 22
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 33
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 50
5693: PUSH
5694: EMPTY
5695: LIST
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: LD_INT 61
5702: PUSH
5703: EMPTY
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: ST_TO_ADDR
// for i in tmp do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_VAR 0 2
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5745
// Connect ( i ) ;
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL 23419 0 1
5743: GO 5731
5745: POP
5746: POP
// end ;
5747: PPOPN 2
5749: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5750: LD_EXP 6
5754: PUSH
5755: LD_OWVAR 67
5759: PUSH
5760: LD_INT 1
5762: GREATER
5763: AND
5764: IFFALSE 6206
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5776: LD_INT 31500
5778: PUSH
5779: LD_INT 31500
5781: PUSH
5782: LD_INT 29400
5784: PUSH
5785: LD_INT 27300
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 67
// if usSurrender then
5804: LD_EXP 7
5808: IFFALSE 5812
// exit ;
5810: GO 6206
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5812: LD_ADDR_VAR 0 1
5816: PUSH
5817: DOUBLE
5818: LD_INT 1
5820: DEC
5821: ST_TO_ADDR
5822: LD_INT 4
5824: PUSH
5825: LD_INT 5
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_OWVAR 67
5844: ARRAY
5845: PUSH
5846: FOR_TO
5847: IFFALSE 6151
// begin uc_side := 1 ;
5849: LD_ADDR_OWVAR 20
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// uc_nation := 1 ;
5857: LD_ADDR_OWVAR 21
5861: PUSH
5862: LD_INT 1
5864: ST_TO_ADDR
// InitHc_All ( ) ;
5865: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5869: LD_INT 0
5871: PPUSH
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 5
5877: PUSH
5878: LD_INT 6
5880: PUSH
5881: LD_INT 7
5883: PUSH
5884: LD_INT 8
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PUSH
5893: LD_OWVAR 67
5897: ARRAY
5898: PPUSH
5899: CALL_OW 380
// un := CreateHuman ;
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: CALL_OW 44
5912: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5913: LD_ADDR_VAR 0 4
5917: PUSH
5918: LD_INT 2
5920: PUSH
5921: LD_INT 3
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_VAR 0 1
5936: PUSH
5937: LD_INT 3
5939: MOD
5940: PUSH
5941: LD_INT 1
5943: PLUS
5944: ARRAY
5945: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5946: LD_VAR 0 4
5950: PUSH
5951: LD_INT 4
5953: EQUAL
5954: IFFALSE 5989
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 6
5963: PUSH
5964: LD_INT 4
5966: PUSH
5967: LD_INT 5
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 3
5980: PPUSH
5981: CALL_OW 12
5985: ARRAY
5986: ST_TO_ADDR
5987: GO 6024
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
5989: LD_ADDR_VAR 0 5
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: LD_INT 5
5999: PUSH
6000: LD_INT 7
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: PUSH
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 4
6017: PPUSH
6018: CALL_OW 12
6022: ARRAY
6023: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6024: LD_VAR 0 4
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_VAR 0 5
6039: PPUSH
6040: LD_INT 30
6042: PPUSH
6043: CALL 20328 0 5
// veh := CreateVehicle ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: CALL_OW 45
6056: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6057: LD_ADDR_EXP 32
6061: PUSH
6062: LD_EXP 32
6066: PPUSH
6067: LD_EXP 32
6071: PUSH
6072: LD_INT 1
6074: PLUS
6075: PPUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: CALL_OW 1
6085: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6086: LD_VAR 0 3
6090: PPUSH
6091: LD_INT 4
6093: PPUSH
6094: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6098: LD_VAR 0 3
6102: PPUSH
6103: LD_INT 15
6105: PPUSH
6106: LD_INT 0
6108: PPUSH
6109: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_VAR 0 3
6122: PPUSH
6123: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6127: LD_VAR 0 3
6131: PPUSH
6132: LD_INT 153
6134: PPUSH
6135: LD_INT 45
6137: PPUSH
6138: CALL_OW 111
// wait ( 0 0$2 ) ;
6142: LD_INT 70
6144: PPUSH
6145: CALL_OW 67
// end ;
6149: GO 5846
6151: POP
6152: POP
// repeat wait ( 0 0$1 ) ;
6153: LD_INT 35
6155: PPUSH
6156: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6160: LD_ADDR_EXP 32
6164: PUSH
6165: LD_EXP 32
6169: PPUSH
6170: LD_INT 150
6172: PUSH
6173: LD_INT 36
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 138
6182: PUSH
6183: LD_INT 25
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PPUSH
6194: CALL 55357 0 2
6198: ST_TO_ADDR
// until not usAdditionalForces ;
6199: LD_EXP 32
6203: NOT
6204: IFFALSE 6153
// end ;
6206: PPOPN 5
6208: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6209: LD_INT 22
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 101
6221: PUSH
6222: LD_INT 2
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 69
6237: IFFALSE 6257
6239: GO 6241
6241: DISABLE
// begin wait ( 0 0$30 ) ;
6242: LD_INT 1050
6244: PPUSH
6245: CALL_OW 67
// usAttacksAllowed := true ;
6249: LD_ADDR_EXP 6
6253: PUSH
6254: LD_INT 1
6256: ST_TO_ADDR
// end ; end_of_file
6257: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6258: LD_VAR 0 1
6262: PPUSH
6263: CALL 56869 0 1
// if un = Heike then
6267: LD_VAR 0 1
6271: PUSH
6272: LD_EXP 13
6276: EQUAL
6277: IFFALSE 6286
// YouLost ( Heike ) ;
6279: LD_STRING Heike
6281: PPUSH
6282: CALL_OW 104
// if un = usCommander then
6286: LD_VAR 0 1
6290: PUSH
6291: LD_EXP 28
6295: EQUAL
6296: IFFALSE 6305
// YouLost ( Commander ) ;
6298: LD_STRING Commander
6300: PPUSH
6301: CALL_OW 104
// if GetSide ( un ) = 1 then
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 255
6314: PUSH
6315: LD_INT 1
6317: EQUAL
6318: IFFALSE 6569
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6320: LD_VAR 0 1
6324: PPUSH
6325: CALL_OW 264
6329: PUSH
6330: LD_INT 13
6332: EQUAL
6333: PUSH
6334: LD_INT 25
6336: PPUSH
6337: CALL_OW 302
6341: AND
6342: IFFALSE 6363
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6344: LD_INT 25
6346: PPUSH
6347: LD_INT 2
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: LD_INT 2
6355: PPUSH
6356: LD_INT 13
6358: PPUSH
6359: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6363: LD_VAR 0 1
6367: PPUSH
6368: CALL_OW 264
6372: PUSH
6373: LD_INT 12
6375: EQUAL
6376: PUSH
6377: LD_INT 25
6379: PPUSH
6380: CALL_OW 302
6384: AND
6385: IFFALSE 6406
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6387: LD_INT 25
6389: PPUSH
6390: LD_INT 2
6392: PPUSH
6393: LD_INT 1
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 12
6401: PPUSH
6402: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 266
6415: PUSH
6416: LD_INT 32
6418: EQUAL
6419: IFFALSE 6484
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6421: LD_ADDR_EXP 31
6425: PUSH
6426: LD_EXP 31
6430: PPUSH
6431: LD_EXP 31
6435: PUSH
6436: LD_INT 1
6438: PLUS
6439: PPUSH
6440: LD_INT 32
6442: PUSH
6443: LD_VAR 0 1
6447: PPUSH
6448: CALL_OW 250
6452: PUSH
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 251
6462: PUSH
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 254
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 1
6483: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 266
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: IN
6504: IFFALSE 6569
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6506: LD_ADDR_EXP 31
6510: PUSH
6511: LD_EXP 31
6515: PPUSH
6516: LD_EXP 31
6520: PUSH
6521: LD_INT 1
6523: PLUS
6524: PPUSH
6525: LD_INT 4
6527: PUSH
6528: LD_VAR 0 1
6532: PPUSH
6533: CALL_OW 250
6537: PUSH
6538: LD_VAR 0 1
6542: PPUSH
6543: CALL_OW 251
6547: PUSH
6548: LD_VAR 0 1
6552: PPUSH
6553: CALL_OW 254
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PPUSH
6564: CALL_OW 1
6568: ST_TO_ADDR
// end ; end ;
6569: PPOPN 1
6571: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6572: LD_VAR 0 1
6576: PPUSH
6577: CALL_OW 255
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: PUSH
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 110
6595: PUSH
6596: LD_INT 1
6598: EQUAL
6599: AND
6600: IFFALSE 6614
// SetTag ( un , 0 ) ;
6602: LD_VAR 0 1
6606: PPUSH
6607: LD_INT 0
6609: PPUSH
6610: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6614: LD_VAR 0 1
6618: PPUSH
6619: CALL_OW 255
6623: PUSH
6624: LD_INT 1
6626: EQUAL
6627: PUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: CALL_OW 264
6637: PUSH
6638: LD_INT 6
6640: EQUAL
6641: AND
6642: PUSH
6643: LD_EXP 11
6647: NOT
6648: AND
6649: IFFALSE 6659
// seeHeavyGun := true ;
6651: LD_ADDR_EXP 11
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6659: LD_VAR 0 1
6663: PPUSH
6664: CALL_OW 263
6668: PUSH
6669: LD_INT 2
6671: EQUAL
6672: PUSH
6673: LD_VAR 0 1
6677: PPUSH
6678: CALL_OW 255
6682: PUSH
6683: LD_INT 2
6685: NONEQUAL
6686: AND
6687: IFFALSE 6713
// begin ComUnlink ( un ) ;
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 136
// if not seeRemoteVehicle then
6698: LD_EXP 10
6702: NOT
6703: IFFALSE 6713
// seeRemoteVehicle := true ;
6705: LD_ADDR_EXP 10
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// end ; end ;
6713: PPOPN 1
6715: END
// on BuildingComplete ( b ) do var i , barracks ;
6716: LD_INT 0
6718: PPUSH
6719: PPUSH
// begin if GetSide ( b ) = 1 then
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 255
6729: PUSH
6730: LD_INT 1
6732: EQUAL
6733: IFFALSE 6885
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6735: LD_ADDR_EXP 31
6739: PUSH
6740: LD_EXP 31
6744: PPUSH
6745: LD_INT 1
6747: PPUSH
6748: CALL_OW 3
6752: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 266
6762: PUSH
6763: LD_INT 4
6765: EQUAL
6766: IFFALSE 6777
// ComUpgrade ( b ) ;
6768: LD_VAR 0 1
6772: PPUSH
6773: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6777: LD_VAR 0 1
6781: PPUSH
6782: CALL_OW 266
6786: PUSH
6787: LD_INT 32
6789: EQUAL
6790: IFFALSE 6885
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6792: LD_VAR 0 1
6796: PPUSH
6797: LD_INT 6
6799: PUSH
6800: LD_INT 7
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 2
6812: PPUSH
6813: CALL_OW 12
6817: ARRAY
6818: PPUSH
6819: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6823: LD_ADDR_VAR 0 3
6827: PUSH
6828: LD_INT 22
6830: PUSH
6831: LD_INT 1
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 30
6840: PUSH
6841: LD_INT 5
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PPUSH
6852: CALL_OW 69
6856: ST_TO_ADDR
// if barracks then
6857: LD_VAR 0 3
6861: IFFALSE 6885
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: CALL_OW 313
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PPUSH
6881: CALL_OW 122
// end ; end ; end ;
6885: PPOPN 3
6887: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_VAR 0 2
6897: PPUSH
6898: CALL 56989 0 2
// if GetSide ( factory ) = 1 then
6902: LD_VAR 0 2
6906: PPUSH
6907: CALL_OW 255
6911: PUSH
6912: LD_INT 1
6914: EQUAL
6915: IFFALSE 6994
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6917: LD_VAR 0 1
6921: PPUSH
6922: CALL_OW 264
6926: PUSH
6927: LD_INT 12
6929: EQUAL
6930: IFFALSE 6942
// usCargo := vehicle ;
6932: LD_ADDR_EXP 30
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6942: LD_VAR 0 1
6946: PPUSH
6947: CALL_OW 264
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: LD_INT 13
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: IN
6962: NOT
6963: IFFALSE 6994
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6965: LD_ADDR_EXP 29
6969: PUSH
6970: LD_EXP 29
6974: PPUSH
6975: LD_EXP 29
6979: PUSH
6980: LD_INT 1
6982: PLUS
6983: PPUSH
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 1
6993: ST_TO_ADDR
// end ; end ;
6994: PPOPN 2
6996: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
6997: LD_VAR 0 2
7001: PPUSH
7002: CALL_OW 255
7006: PUSH
7007: LD_INT 1
7009: EQUAL
7010: IFFALSE 7024
// AddComEnterUnit ( un , amFac ) ;
7012: LD_VAR 0 1
7016: PPUSH
7017: LD_INT 25
7019: PPUSH
7020: CALL_OW 180
// end ;
7024: PPOPN 4
7026: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7027: LD_VAR 0 1
7031: PPUSH
7032: CALL_OW 255
7036: PUSH
7037: LD_INT 1
7039: EQUAL
7040: PUSH
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 266
7050: PUSH
7051: LD_INT 32
7053: EQUAL
7054: AND
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 257
7065: PUSH
7066: LD_INT 1
7068: PUSH
7069: LD_INT 5
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: IN
7076: AND
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_INT 1
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 30
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 50
7100: PUSH
7101: EMPTY
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 69
7113: AND
7114: IFFALSE 7184
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7116: LD_INT 74
7118: PPUSH
7119: LD_INT 120
7121: PPUSH
7122: CALL_OW 428
7126: PPUSH
7127: CALL_OW 313
7131: PUSH
7132: LD_INT 6
7134: LESS
7135: IFFALSE 7184
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7137: LD_VAR 0 2
7141: PPUSH
7142: LD_INT 74
7144: PPUSH
7145: LD_INT 120
7147: PPUSH
7148: CALL_OW 428
7152: PPUSH
7153: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 257
7166: PUSH
7167: LD_INT 1
7169: EQUAL
7170: IFFALSE 7184
// AddComChangeProfession ( un , class_sniper ) ;
7172: LD_VAR 0 2
7176: PPUSH
7177: LD_INT 5
7179: PPUSH
7180: CALL_OW 183
// end ; end ; end_of_file
7184: PPOPN 2
7186: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7187: LD_INT 0
7189: PPUSH
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
// Video ( true ) ;
7198: LD_INT 1
7200: PPUSH
7201: CALL 52725 0 1
// music_nat := 1 ;
7205: LD_ADDR_OWVAR 71
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// music_class := music_recon ;
7213: LD_ADDR_OWVAR 72
7217: PUSH
7218: LD_INT 3
7220: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7221: LD_INT 184
7223: PPUSH
7224: LD_INT 142
7226: PPUSH
7227: LD_INT 2
7229: PPUSH
7230: LD_INT 10
7232: NEG
7233: PPUSH
7234: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7238: LD_INT 184
7240: PPUSH
7241: LD_INT 142
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7251: LD_INT 204
7253: PPUSH
7254: LD_INT 151
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: LD_INT 10
7262: NEG
7263: PPUSH
7264: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7268: LD_INT 204
7270: PPUSH
7271: LD_INT 151
7273: PPUSH
7274: LD_INT 2
7276: PPUSH
7277: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7281: LD_INT 184
7283: PPUSH
7284: LD_INT 142
7286: PPUSH
7287: CALL_OW 86
// wait ( 0 0$2 ) ;
7291: LD_INT 70
7293: PPUSH
7294: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7298: LD_ADDR_VAR 0 5
7302: PUSH
7303: LD_EXP 13
7307: PUSH
7308: LD_EXP 14
7312: PUSH
7313: LD_EXP 15
7317: PUSH
7318: LD_EXP 16
7322: PUSH
7323: LD_EXP 17
7327: PUSH
7328: LD_EXP 18
7332: PUSH
7333: LD_EXP 19
7337: PUSH
7338: LD_EXP 20
7342: PUSH
7343: LD_EXP 22
7347: PUSH
7348: LD_EXP 23
7352: PUSH
7353: LD_EXP 24
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_EXP 25
7375: UNION
7376: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7377: LD_ADDR_VAR 0 6
7381: PUSH
7382: LD_VAR 0 5
7386: PPUSH
7387: LD_INT 25
7389: PUSH
7390: LD_INT 2
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PPUSH
7397: CALL_OW 72
7401: PUSH
7402: LD_INT 0
7404: GREATER
7405: ST_TO_ADDR
// hasCamera := false ;
7406: LD_ADDR_VAR 0 7
7410: PUSH
7411: LD_INT 0
7413: ST_TO_ADDR
// if not hasEng then
7414: LD_VAR 0 6
7418: NOT
7419: IFFALSE 7447
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7421: LD_VAR 0 5
7425: PUSH
7426: LD_INT 1
7428: PPUSH
7429: LD_VAR 0 5
7433: PPUSH
7434: CALL_OW 12
7438: ARRAY
7439: PPUSH
7440: LD_INT 2
7442: PPUSH
7443: CALL_OW 336
// if heikeVehicles then
7447: LD_EXP 27
7451: IFFALSE 8075
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7453: LD_ADDR_VAR 0 5
7457: PUSH
7458: LD_VAR 0 5
7462: PPUSH
7463: LD_INT 3
7465: PPUSH
7466: CALL 54979 0 2
7470: ST_TO_ADDR
// for i in heikeVehicles do
7471: LD_ADDR_VAR 0 2
7475: PUSH
7476: LD_EXP 27
7480: PUSH
7481: FOR_IN
7482: IFFALSE 8073
// begin if not tmp then
7484: LD_VAR 0 5
7488: NOT
7489: IFFALSE 7493
// break ;
7491: GO 8073
// uc_side := 2 ;
7493: LD_ADDR_OWVAR 20
7497: PUSH
7498: LD_INT 2
7500: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7501: LD_ADDR_OWVAR 21
7505: PUSH
7506: LD_VAR 0 2
7510: PUSH
7511: LD_INT 5
7513: ARRAY
7514: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7515: LD_ADDR_OWVAR 37
7519: PUSH
7520: LD_VAR 0 2
7524: PUSH
7525: LD_INT 1
7527: ARRAY
7528: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7529: LD_ADDR_OWVAR 39
7533: PUSH
7534: LD_VAR 0 2
7538: PUSH
7539: LD_INT 2
7541: ARRAY
7542: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7543: LD_ADDR_OWVAR 38
7547: PUSH
7548: LD_VAR 0 2
7552: PUSH
7553: LD_INT 3
7555: ARRAY
7556: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7557: LD_ADDR_OWVAR 40
7561: PUSH
7562: LD_VAR 0 2
7566: PUSH
7567: LD_INT 4
7569: ARRAY
7570: ST_TO_ADDR
// veh := CreateVehicle ;
7571: LD_ADDR_VAR 0 4
7575: PUSH
7576: CALL_OW 45
7580: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7581: LD_VAR 0 4
7585: PPUSH
7586: LD_INT 4
7588: PPUSH
7589: CALL_OW 233
// if i [ 3 ] = control_manual then
7593: LD_VAR 0 2
7597: PUSH
7598: LD_INT 3
7600: ARRAY
7601: PUSH
7602: LD_INT 1
7604: EQUAL
7605: IFFALSE 7690
// begin PlaceUnitArea ( veh , startArea , false ) ;
7607: LD_VAR 0 4
7611: PPUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_INT 0
7617: PPUSH
7618: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 4
7629: ARRAY
7630: PUSH
7631: LD_INT 31
7633: EQUAL
7634: IFFALSE 7652
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7636: LD_VAR 0 5
7640: PUSH
7641: LD_INT 1
7643: ARRAY
7644: PPUSH
7645: LD_INT 3
7647: PPUSH
7648: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7652: LD_VAR 0 5
7656: PUSH
7657: LD_INT 1
7659: ARRAY
7660: PPUSH
7661: LD_VAR 0 4
7665: PPUSH
7666: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7670: LD_ADDR_VAR 0 5
7674: PUSH
7675: LD_VAR 0 5
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: CALL_OW 3
7687: ST_TO_ADDR
// end else
7688: GO 7751
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7690: LD_INT 22
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 34
7702: PUSH
7703: LD_INT 31
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 69
7718: IFFALSE 7751
// begin PlaceUnitArea ( veh , startArea , false ) ;
7720: LD_VAR 0 4
7724: PPUSH
7725: LD_INT 1
7727: PPUSH
7728: LD_INT 0
7730: PPUSH
7731: CALL_OW 49
// Connect ( veh ) ;
7735: LD_VAR 0 4
7739: PPUSH
7740: CALL 23419 0 1
// wait ( 0 0$2 ) ;
7744: LD_INT 70
7746: PPUSH
7747: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7751: LD_VAR 0 4
7755: PPUSH
7756: LD_VAR 0 2
7760: PUSH
7761: LD_INT 6
7763: ARRAY
7764: PPUSH
7765: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7769: LD_VAR 0 4
7773: PPUSH
7774: LD_INT 20
7776: PPUSH
7777: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7781: LD_VAR 0 2
7785: PUSH
7786: LD_INT 7
7788: ARRAY
7789: PUSH
7790: LD_VAR 0 4
7794: PPUSH
7795: CALL_OW 264
7799: PUSH
7800: LD_INT 51
7802: PUSH
7803: LD_INT 32
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: IN
7810: AND
7811: IFFALSE 7862
// begin for j := 1 to 2 do
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: DOUBLE
7819: LD_INT 1
7821: DEC
7822: ST_TO_ADDR
7823: LD_INT 2
7825: PUSH
7826: FOR_TO
7827: IFFALSE 7860
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7829: LD_VAR 0 4
7833: PPUSH
7834: LD_VAR 0 3
7838: PPUSH
7839: LD_VAR 0 2
7843: PUSH
7844: LD_INT 7
7846: ARRAY
7847: PUSH
7848: LD_VAR 0 3
7852: ARRAY
7853: PPUSH
7854: CALL_OW 291
7858: GO 7826
7860: POP
7861: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7862: LD_VAR 0 4
7866: PPUSH
7867: LD_INT 185
7869: PPUSH
7870: LD_INT 144
7872: PPUSH
7873: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7877: LD_VAR 0 4
7881: PPUSH
7882: CALL_OW 263
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 7
7895: NOT
7896: AND
7897: PUSH
7898: LD_VAR 0 4
7902: PPUSH
7903: CALL_OW 311
7907: PPUSH
7908: CALL_OW 257
7912: PUSH
7913: LD_INT 2
7915: EQUAL
7916: AND
7917: IFFALSE 8022
// begin hasCamera := true ;
7919: LD_ADDR_VAR 0 7
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7927: LD_ADDR_VAR 0 8
7931: PUSH
7932: LD_VAR 0 4
7936: PPUSH
7937: CALL_OW 311
7941: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7942: LD_VAR 0 4
7946: PPUSH
7947: LD_INT 177
7949: PPUSH
7950: LD_INT 138
7952: PPUSH
7953: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7957: LD_VAR 0 8
7961: PPUSH
7962: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7966: LD_VAR 0 8
7970: PPUSH
7971: LD_INT 190
7973: PPUSH
7974: LD_INT 150
7976: PPUSH
7977: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7981: LD_VAR 0 8
7985: PPUSH
7986: LD_VAR 0 4
7990: PPUSH
7991: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7995: LD_VAR 0 8
7999: PPUSH
8000: LD_INT 170
8002: PPUSH
8003: LD_INT 103
8005: PPUSH
8006: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8010: LD_INT 190
8012: PPUSH
8013: LD_INT 150
8015: PPUSH
8016: CALL_OW 84
// end else
8020: GO 8064
// begin AddComWait ( veh , 0 0$2 ) ;
8022: LD_VAR 0 4
8026: PPUSH
8027: LD_INT 70
8029: PPUSH
8030: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8034: LD_VAR 0 4
8038: PPUSH
8039: LD_INT 179
8041: PPUSH
8042: LD_INT 129
8044: PPUSH
8045: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8049: LD_VAR 0 4
8053: PPUSH
8054: LD_INT 170
8056: PPUSH
8057: LD_INT 103
8059: PPUSH
8060: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8064: LD_INT 70
8066: PPUSH
8067: CALL_OW 67
// end ;
8071: GO 7481
8073: POP
8074: POP
// end ; if tmp then
8075: LD_VAR 0 5
8079: IFFALSE 8224
// begin for i in tmp do
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 5
8090: PUSH
8091: FOR_IN
8092: IFFALSE 8222
// begin SetDir ( i , 4 ) ;
8094: LD_VAR 0 2
8098: PPUSH
8099: LD_INT 4
8101: PPUSH
8102: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_INT 1
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8121: LD_VAR 0 2
8125: PPUSH
8126: LD_INT 185
8128: PPUSH
8129: LD_INT 144
8131: PPUSH
8132: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 2
8148: EQUAL
8149: PUSH
8150: LD_VAR 0 7
8154: NOT
8155: AND
8156: IFFALSE 8183
// begin hasCamera := true ;
8158: LD_ADDR_VAR 0 7
8162: PUSH
8163: LD_INT 1
8165: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 190
8173: PPUSH
8174: LD_INT 150
8176: PPUSH
8177: CALL_OW 217
// end else
8181: GO 8198
// AddComMoveXY ( i , 179 , 129 ) ;
8183: LD_VAR 0 2
8187: PPUSH
8188: LD_INT 179
8190: PPUSH
8191: LD_INT 129
8193: PPUSH
8194: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8198: LD_VAR 0 2
8202: PPUSH
8203: LD_INT 170
8205: PPUSH
8206: LD_INT 103
8208: PPUSH
8209: CALL_OW 171
// wait ( 0 0$2 ) ;
8213: LD_INT 70
8215: PPUSH
8216: CALL_OW 67
// end ;
8220: GO 8091
8222: POP
8223: POP
// end ; if heikeApes then
8224: LD_EXP 26
8228: IFFALSE 8346
// begin counter := 0 ;
8230: LD_ADDR_VAR 0 9
8234: PUSH
8235: LD_INT 0
8237: ST_TO_ADDR
// for i in heikeApes do
8238: LD_ADDR_VAR 0 2
8242: PUSH
8243: LD_EXP 26
8247: PUSH
8248: FOR_IN
8249: IFFALSE 8344
// begin if counter > 2 then
8251: LD_VAR 0 9
8255: PUSH
8256: LD_INT 2
8258: GREATER
8259: IFFALSE 8263
// break ;
8261: GO 8344
// counter := Inc ( counter ) ;
8263: LD_ADDR_VAR 0 9
8267: PUSH
8268: LD_VAR 0 9
8272: PPUSH
8273: CALL 54114 0 1
8277: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8278: LD_VAR 0 2
8282: PPUSH
8283: LD_INT 4
8285: PPUSH
8286: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 0
8300: PPUSH
8301: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8305: LD_VAR 0 2
8309: PPUSH
8310: LD_INT 185
8312: PPUSH
8313: LD_INT 144
8315: PPUSH
8316: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_INT 170
8327: PPUSH
8328: LD_INT 103
8330: PPUSH
8331: CALL_OW 171
// wait ( 0 0$2 ) ;
8335: LD_INT 70
8337: PPUSH
8338: CALL_OW 67
// end ;
8342: GO 8248
8344: POP
8345: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8346: LD_EXP 13
8350: PPUSH
8351: LD_INT 163
8353: PPUSH
8354: LD_INT 89
8356: PPUSH
8357: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8361: LD_EXP 13
8365: PPUSH
8366: LD_STRING DH-Intro-1
8368: PPUSH
8369: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8373: LD_INT 175
8375: PPUSH
8376: LD_INT 117
8378: PPUSH
8379: CALL_OW 84
// if Markov then
8383: LD_EXP 20
8387: IFFALSE 8962
// begin Say ( Markov , DMar-Intro-2 ) ;
8389: LD_EXP 20
8393: PPUSH
8394: LD_STRING DMar-Intro-2
8396: PPUSH
8397: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8401: LD_EXP 20
8405: PPUSH
8406: LD_STRING DMar-Intro-3
8408: PPUSH
8409: CALL_OW 88
// wait ( 0 0$1 ) ;
8413: LD_INT 35
8415: PPUSH
8416: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8420: LD_EXP 13
8424: PPUSH
8425: CALL_OW 85
// if Kurt then
8429: LD_EXP 23
8433: IFFALSE 8485
// begin if IsInUnit ( Kurt ) then
8435: LD_EXP 23
8439: PPUSH
8440: CALL_OW 310
8444: IFFALSE 8455
// ComExit ( Kurt ) ;
8446: LD_EXP 23
8450: PPUSH
8451: CALL 53151 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8455: LD_EXP 23
8459: PPUSH
8460: LD_INT 130
8462: PPUSH
8463: LD_INT 56
8465: PPUSH
8466: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8470: LD_EXP 23
8474: PPUSH
8475: LD_INT 129
8477: PPUSH
8478: LD_INT 56
8480: PPUSH
8481: CALL_OW 178
// end ; if Kaia then
8485: LD_EXP 18
8489: IFFALSE 8669
// begin Say ( Kaia , DK-Intro-4 ) ;
8491: LD_EXP 18
8495: PPUSH
8496: LD_STRING DK-Intro-4
8498: PPUSH
8499: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8503: LD_EXP 20
8507: PPUSH
8508: LD_STRING DMar-Intro-5
8510: PPUSH
8511: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8515: LD_EXP 20
8519: PPUSH
8520: LD_STRING DMar-Intro-6
8522: PPUSH
8523: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8527: LD_EXP 22
8531: PPUSH
8532: LD_STRING DO-Intro-7
8534: PPUSH
8535: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8539: LD_INT 160
8541: PPUSH
8542: LD_INT 85
8544: PPUSH
8545: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8549: LD_EXP 20
8553: PPUSH
8554: LD_STRING DMar-Intro-8
8556: PPUSH
8557: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8561: LD_EXP 20
8565: PPUSH
8566: LD_STRING DMar-Intro-9
8568: PPUSH
8569: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8573: LD_EXP 20
8577: PPUSH
8578: LD_STRING DMar-Intro-10
8580: PPUSH
8581: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8585: LD_EXP 20
8589: PPUSH
8590: LD_STRING DMar-Intro-11
8592: PPUSH
8593: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8597: LD_EXP 14
8601: PPUSH
8602: LD_STRING DG-Intro-12
8604: PPUSH
8605: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8609: LD_EXP 14
8613: PPUSH
8614: LD_STRING DG-Intro-13
8616: PPUSH
8617: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8621: LD_EXP 14
8625: PPUSH
8626: LD_STRING DG-Intro-14
8628: PPUSH
8629: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8633: LD_EXP 14
8637: PPUSH
8638: LD_STRING DG-Intro-15
8640: PPUSH
8641: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8645: LD_EXP 13
8649: PPUSH
8650: LD_STRING DH-Intro-16
8652: PPUSH
8653: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8657: LD_EXP 20
8661: PPUSH
8662: LD_STRING DMar-Intro-17
8664: PPUSH
8665: CALL_OW 88
// end ; if Kurt and Mike then
8669: LD_EXP 23
8673: PUSH
8674: LD_EXP 15
8678: AND
8679: IFFALSE 8962
// begin CenterNowOnUnits ( Kurt ) ;
8681: LD_EXP 23
8685: PPUSH
8686: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8690: LD_EXP 23
8694: PPUSH
8695: LD_EXP 13
8699: PPUSH
8700: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8704: LD_EXP 23
8708: PPUSH
8709: LD_STRING DKs-Intro-18
8711: PPUSH
8712: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8716: LD_EXP 23
8720: PPUSH
8721: LD_STRING DKs-Intro-19
8723: PPUSH
8724: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8728: LD_EXP 15
8732: PPUSH
8733: CALL_OW 87
// if IsInUnit ( Mike ) then
8737: LD_EXP 15
8741: PPUSH
8742: CALL_OW 310
8746: IFFALSE 8757
// ComExit ( Mike ) ;
8748: LD_EXP 15
8752: PPUSH
8753: CALL 53151 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8757: LD_EXP 15
8761: PPUSH
8762: LD_INT 129
8764: PPUSH
8765: LD_INT 53
8767: PPUSH
8768: CALL_OW 171
// AddComHold ( Mike ) ;
8772: LD_EXP 15
8776: PPUSH
8777: CALL_OW 200
// wait ( 0 0$2 ) ;
8781: LD_INT 70
8783: PPUSH
8784: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8788: LD_EXP 15
8792: PPUSH
8793: LD_STRING DM-Intro-20
8795: PPUSH
8796: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8800: LD_ADDR_EXP 3
8804: PUSH
8805: LD_STRING Scout
8807: PPUSH
8808: CALL_OW 97
8812: ST_TO_ADDR
// if scoutActive = 1 then
8813: LD_EXP 3
8817: PUSH
8818: LD_INT 1
8820: EQUAL
8821: IFFALSE 8918
// begin CenterNowOnUnits ( Kurt ) ;
8823: LD_EXP 23
8827: PPUSH
8828: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8832: LD_EXP 13
8836: PPUSH
8837: LD_STRING DH-Intro-21
8839: PPUSH
8840: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8844: LD_EXP 15
8848: PPUSH
8849: LD_STRING DM-Intro-22
8851: PPUSH
8852: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8856: LD_EXP 23
8860: PPUSH
8861: LD_STRING DKs-Intro-23
8863: PPUSH
8864: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8868: LD_EXP 23
8872: PPUSH
8873: LD_INT 5
8875: PPUSH
8876: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8880: LD_EXP 15
8884: PPUSH
8885: LD_INT 5
8887: PPUSH
8888: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8892: LD_EXP 23
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PPUSH
8906: LD_INT 104
8908: PPUSH
8909: LD_INT 66
8911: PPUSH
8912: CALL_OW 111
// end else
8916: GO 8962
// begin scoutActive := 0 ;
8918: LD_ADDR_EXP 3
8922: PUSH
8923: LD_INT 0
8925: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8926: LD_EXP 13
8930: PPUSH
8931: LD_STRING DH-Intro-a-21
8933: PPUSH
8934: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8938: LD_EXP 15
8942: PPUSH
8943: LD_STRING DM-Intro-a-22
8945: PPUSH
8946: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8950: LD_EXP 23
8954: PPUSH
8955: LD_STRING DKs-Intro-a-23
8957: PPUSH
8958: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8962: LD_INT 0
8964: PPUSH
8965: CALL 52725 0 1
// music_nat := music_auto ;
8969: LD_ADDR_OWVAR 71
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// music_class := music_auto ;
8977: LD_ADDR_OWVAR 72
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8985: LD_STRING M1
8987: PPUSH
8988: CALL_OW 337
// wait ( 0 0$3 ) ;
8992: LD_INT 105
8994: PPUSH
8995: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8999: LD_EXP 13
9003: PPUSH
9004: LD_STRING DH-Base-1
9006: PPUSH
9007: CALL_OW 88
// if Kaia then
9011: LD_EXP 18
9015: IFFALSE 9125
// begin Say ( Kaia , DK-Base-2 ) ;
9017: LD_EXP 18
9021: PPUSH
9022: LD_STRING DK-Base-2
9024: PPUSH
9025: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9029: LD_EXP 13
9033: PPUSH
9034: LD_STRING DH-Base-3
9036: PPUSH
9037: CALL_OW 88
// if Aviradze then
9041: LD_EXP 24
9045: IFFALSE 9125
// begin Say ( Aviradze , DA-Base-4 ) ;
9047: LD_EXP 24
9051: PPUSH
9052: LD_STRING DA-Base-4
9054: PPUSH
9055: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9059: LD_EXP 18
9063: PPUSH
9064: LD_STRING DK-Base-5
9066: PPUSH
9067: CALL_OW 88
// if Markov then
9071: LD_EXP 20
9075: IFFALSE 9125
// begin Say ( Markov , DMar-Base-6 ) ;
9077: LD_EXP 20
9081: PPUSH
9082: LD_STRING DMar-Base-6
9084: PPUSH
9085: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9089: LD_EXP 18
9093: PPUSH
9094: LD_STRING DK-Base-7
9096: PPUSH
9097: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9101: LD_EXP 20
9105: PPUSH
9106: LD_STRING DMar-Base-8
9108: PPUSH
9109: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9113: LD_EXP 20
9117: PPUSH
9118: LD_STRING DMar-Base-9
9120: PPUSH
9121: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9125: CALL_OW 22
// end ;
9129: LD_VAR 0 1
9133: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9134: LD_EXP 5
9138: IFFALSE 10249
9140: GO 9142
9142: DISABLE
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
// begin InGameOn ;
9147: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9151: LD_EXP 15
9155: PUSH
9156: LD_EXP 23
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: LD_EXP 13
9169: PPUSH
9170: CALL_OW 119
// ComExit ( Heike ) ;
9174: LD_EXP 13
9178: PPUSH
9179: CALL 53151 0 1
// if IsOk ( Mike ) then
9183: LD_EXP 15
9187: PPUSH
9188: CALL_OW 302
9192: IFFALSE 9210
// AddComTurnUnit ( Heike , Mike ) else
9194: LD_EXP 13
9198: PPUSH
9199: LD_EXP 15
9203: PPUSH
9204: CALL_OW 179
9208: GO 9224
// AddComTurnUnit ( Heike , Kurt ) ;
9210: LD_EXP 13
9214: PPUSH
9215: LD_EXP 23
9219: PPUSH
9220: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9224: LD_EXP 15
9228: PPUSH
9229: CALL_OW 302
9233: PUSH
9234: LD_EXP 23
9238: PPUSH
9239: CALL_OW 302
9243: AND
9244: IFFALSE 9495
// begin CenterNowOnUnits ( Mike ) ;
9246: LD_EXP 15
9250: PPUSH
9251: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9255: LD_EXP 15
9259: PPUSH
9260: LD_STRING DM-Scout-1
9262: PPUSH
9263: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9267: LD_EXP 13
9271: PPUSH
9272: LD_STRING DH-Scout-2
9274: PPUSH
9275: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9279: LD_EXP 23
9283: PPUSH
9284: LD_STRING DKs-Scout-3
9286: PPUSH
9287: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9291: LD_EXP 13
9295: PPUSH
9296: LD_STRING DH-Scout-4
9298: PPUSH
9299: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9303: LD_EXP 13
9307: PPUSH
9308: LD_STRING DH-Scout-5
9310: PPUSH
9311: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9315: LD_ADDR_VAR 0 2
9319: PUSH
9320: LD_INT 72
9322: PUSH
9323: LD_INT 122
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 89
9332: PUSH
9333: LD_INT 131
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 99
9342: PUSH
9343: LD_INT 139
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 100
9352: PUSH
9353: LD_INT 148
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: ST_TO_ADDR
// for i in tmp do
9366: LD_ADDR_VAR 0 1
9370: PUSH
9371: LD_VAR 0 2
9375: PUSH
9376: FOR_IN
9377: IFFALSE 9435
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9379: LD_VAR 0 1
9383: PUSH
9384: LD_INT 1
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 1
9392: PUSH
9393: LD_INT 2
9395: ARRAY
9396: PPUSH
9397: LD_INT 2
9399: PPUSH
9400: LD_INT 6
9402: NEG
9403: PPUSH
9404: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9408: LD_VAR 0 1
9412: PUSH
9413: LD_INT 1
9415: ARRAY
9416: PPUSH
9417: LD_VAR 0 1
9421: PUSH
9422: LD_INT 2
9424: ARRAY
9425: PPUSH
9426: LD_INT 2
9428: PPUSH
9429: CALL_OW 331
// end ;
9433: GO 9376
9435: POP
9436: POP
// CenterOnXY ( 83 , 132 ) ;
9437: LD_INT 83
9439: PPUSH
9440: LD_INT 132
9442: PPUSH
9443: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9447: LD_EXP 23
9451: PPUSH
9452: LD_STRING DKs-Scout-6
9454: PPUSH
9455: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9459: LD_EXP 15
9463: PPUSH
9464: LD_STRING DM-Scout-7
9466: PPUSH
9467: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9471: LD_EXP 15
9475: PPUSH
9476: LD_STRING DM-Scout-8
9478: PPUSH
9479: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9483: LD_EXP 23
9487: PPUSH
9488: LD_STRING DKs-Scout-9
9490: PPUSH
9491: CALL_OW 88
// end ; if IsDead ( Mike ) then
9495: LD_EXP 15
9499: PPUSH
9500: CALL_OW 301
9504: IFFALSE 9671
// begin CenterNowOnUnits ( Kurt ) ;
9506: LD_EXP 23
9510: PPUSH
9511: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9515: LD_EXP 23
9519: PPUSH
9520: LD_STRING DKs-Scout-b-1
9522: PPUSH
9523: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9527: LD_EXP 23
9531: PPUSH
9532: LD_STRING DKs-Scout-b-2
9534: PPUSH
9535: CALL_OW 88
// if IsOk ( Givi ) then
9539: LD_EXP 14
9543: PPUSH
9544: CALL_OW 302
9548: IFFALSE 9623
// begin ComExit ( Givi ) ;
9550: LD_EXP 14
9554: PPUSH
9555: CALL 53151 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9559: LD_EXP 14
9563: PPUSH
9564: LD_EXP 23
9568: PPUSH
9569: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9573: LD_EXP 14
9577: PPUSH
9578: LD_STRING DG-Scout-b-3
9580: PPUSH
9581: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9585: LD_EXP 14
9589: PPUSH
9590: LD_STRING DG-Scout-b-4
9592: PPUSH
9593: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9597: LD_EXP 14
9601: PPUSH
9602: LD_STRING DG-Scout-b-5
9604: PPUSH
9605: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9609: LD_EXP 13
9613: PPUSH
9614: LD_STRING DH-Scout-b-6
9616: PPUSH
9617: CALL_OW 88
// end else
9621: GO 9635
// Say ( Heike , DH-Scout-a-4 ) ;
9623: LD_EXP 13
9627: PPUSH
9628: LD_STRING DH-Scout-a-4
9630: PPUSH
9631: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9635: LD_EXP 23
9639: PPUSH
9640: LD_STRING DKs-Scout-b-7
9642: PPUSH
9643: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9647: LD_EXP 23
9651: PPUSH
9652: LD_STRING DKs-Scout-b-8
9654: PPUSH
9655: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9659: LD_EXP 23
9663: PPUSH
9664: LD_STRING DKs-Scout-b-9
9666: PPUSH
9667: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9671: LD_EXP 23
9675: PPUSH
9676: CALL_OW 301
9680: IFFALSE 9959
// begin CenterNowOnUnits ( Mike ) ;
9682: LD_EXP 15
9686: PPUSH
9687: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9691: LD_EXP 15
9695: PPUSH
9696: LD_STRING DM-Scout-a-1
9698: PPUSH
9699: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9703: LD_EXP 15
9707: PPUSH
9708: LD_STRING DM-Scout-a-2
9710: PPUSH
9711: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9715: LD_EXP 15
9719: PPUSH
9720: CALL_OW 256
9724: PUSH
9725: LD_INT 1000
9727: LESS
9728: IFFALSE 9744
// Say ( Heike , DH-Scout-a-3 ) else
9730: LD_EXP 13
9734: PPUSH
9735: LD_STRING DH-Scout-a-3
9737: PPUSH
9738: CALL_OW 88
9742: GO 9756
// Say ( Heike , DH-Scout-a-4 ) ;
9744: LD_EXP 13
9748: PPUSH
9749: LD_STRING DH-Scout-a-4
9751: PPUSH
9752: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9756: LD_EXP 15
9760: PPUSH
9761: LD_STRING DM-Scout-a-5
9763: PPUSH
9764: CALL_OW 88
// if IsOk ( Kaia ) then
9768: LD_EXP 18
9772: PPUSH
9773: CALL_OW 302
9777: IFFALSE 9959
// begin ComExit ( Kaia ) ;
9779: LD_EXP 18
9783: PPUSH
9784: CALL 53151 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9788: LD_EXP 18
9792: PPUSH
9793: LD_EXP 15
9797: PPUSH
9798: CALL_OW 172
// wait ( 0 0$2 ) ;
9802: LD_INT 70
9804: PPUSH
9805: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9809: LD_EXP 18
9813: PPUSH
9814: LD_EXP 15
9818: PPUSH
9819: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9823: LD_EXP 15
9827: PPUSH
9828: LD_EXP 18
9832: PPUSH
9833: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9837: LD_EXP 18
9841: PPUSH
9842: LD_STRING DK-Scout-a-6
9844: PPUSH
9845: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9849: LD_EXP 15
9853: PPUSH
9854: LD_STRING DM-Scout-a-7
9856: PPUSH
9857: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9861: LD_EXP 18
9865: PPUSH
9866: LD_STRING DK-Scout-a-8
9868: PPUSH
9869: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9873: LD_EXP 18
9877: PPUSH
9878: LD_STRING DK-Scout-a-9
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9885: LD_EXP 13
9889: PPUSH
9890: LD_STRING DH-Scout-a-10
9892: PPUSH
9893: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9897: LD_EXP 15
9901: PPUSH
9902: LD_EXP 13
9906: PPUSH
9907: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9911: LD_EXP 15
9915: PPUSH
9916: LD_STRING DM-Scout-a-11
9918: PPUSH
9919: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9923: LD_EXP 15
9927: PPUSH
9928: LD_STRING DM-Scout-a-12
9930: PPUSH
9931: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9935: LD_EXP 15
9939: PPUSH
9940: LD_STRING DM-Scout-a-13
9942: PPUSH
9943: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9947: LD_EXP 15
9951: PPUSH
9952: LD_STRING DM-Scout-a-14
9954: PPUSH
9955: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9959: LD_EXP 14
9963: PPUSH
9964: CALL_OW 302
9968: IFFALSE 9996
// begin Say ( Givi , DG-Scout-10 ) ;
9970: LD_EXP 14
9974: PPUSH
9975: LD_STRING DG-Scout-10
9977: PPUSH
9978: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9982: LD_EXP 14
9986: PPUSH
9987: LD_STRING DG-Scout-11
9989: PPUSH
9990: CALL_OW 88
// end else
9994: GO 10053
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9996: LD_EXP 25
10000: PPUSH
10001: LD_INT 26
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 72
10015: PPUSH
10016: LD_STRING DArm-Scout-10
10018: PPUSH
10019: CALL 187 0 2
10023: NOT
10024: IFFALSE 10053
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10026: LD_EXP 25
10030: PPUSH
10031: LD_INT 26
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 72
10045: PPUSH
10046: LD_STRING DArf-Scout-10
10048: PPUSH
10049: CALL 187 0 2
// Say ( Heike , DH-Scout-12 ) ;
10053: LD_EXP 13
10057: PPUSH
10058: LD_STRING DH-Scout-12
10060: PPUSH
10061: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10065: LD_EXP 13
10069: PPUSH
10070: LD_STRING DH-Scout-13
10072: PPUSH
10073: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10077: LD_EXP 15
10081: PPUSH
10082: CALL_OW 302
10086: PUSH
10087: LD_EXP 23
10091: PPUSH
10092: CALL_OW 302
10096: AND
10097: IFFALSE 10125
// begin Say ( Mike , DM-Scout-14 ) ;
10099: LD_EXP 15
10103: PPUSH
10104: LD_STRING DM-Scout-14
10106: PPUSH
10107: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10111: LD_EXP 13
10115: PPUSH
10116: LD_STRING DH-Scout-c-14
10118: PPUSH
10119: CALL_OW 88
// end else
10123: GO 10218
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10125: LD_EXP 15
10129: PPUSH
10130: CALL_OW 302
10134: PUSH
10135: LD_EXP 23
10139: PPUSH
10140: CALL_OW 302
10144: XOR
10145: IFFALSE 10206
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10147: LD_EXP 25
10151: PPUSH
10152: LD_INT 26
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 72
10166: PPUSH
10167: LD_STRING DArm-Scout-a-14
10169: PPUSH
10170: CALL 187 0 2
10174: NOT
10175: IFFALSE 10204
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10177: LD_EXP 25
10181: PPUSH
10182: LD_INT 26
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 72
10196: PPUSH
10197: LD_STRING DArf-Scout-a-14
10199: PPUSH
10200: CALL 187 0 2
// end else
10204: GO 10218
// Say ( Heike , DH-Scout-d-14 ) ;
10206: LD_EXP 13
10210: PPUSH
10211: LD_STRING DH-Scout-d-14
10213: PPUSH
10214: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10218: LD_EXP 13
10222: PPUSH
10223: LD_STRING DH-Scout-15
10225: PPUSH
10226: CALL_OW 88
// InGameOff ;
10230: CALL_OW 9
// wait ( 1 1$00 ) ;
10234: LD_INT 2100
10236: PPUSH
10237: CALL_OW 67
// usAttacksAllowed := true ;
10241: LD_ADDR_EXP 6
10245: PUSH
10246: LD_INT 1
10248: ST_TO_ADDR
// end ;
10249: PPOPN 2
10251: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10252: LD_EXP 4
10256: IFFALSE 10433
10258: GO 10260
10260: DISABLE
10261: LD_INT 0
10263: PPUSH
// begin spoken := true ;
10264: LD_ADDR_VAR 0 1
10268: PUSH
10269: LD_INT 1
10271: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10272: LD_INT 1050
10274: PPUSH
10275: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10279: LD_EXP 13
10283: PPUSH
10284: LD_STRING DH-Scout-c-1
10286: PPUSH
10287: CALL_OW 88
// if not IsOk ( Givi ) then
10291: LD_EXP 14
10295: PPUSH
10296: CALL_OW 302
10300: NOT
10301: IFFALSE 10305
// exit ;
10303: GO 10433
// if IsOk ( Givi ) then
10305: LD_EXP 14
10309: PPUSH
10310: CALL_OW 302
10314: IFFALSE 10342
// begin Say ( Givi , DG-Scout-c-2 ) ;
10316: LD_EXP 14
10320: PPUSH
10321: LD_STRING DG-Scout-c-2
10323: PPUSH
10324: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10328: LD_EXP 14
10332: PPUSH
10333: LD_STRING DG-Scout-c-3
10335: PPUSH
10336: CALL_OW 88
// end else
10340: GO 10415
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_EXP 25
10351: PPUSH
10352: LD_INT 26
10354: PUSH
10355: LD_INT 1
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 72
10366: PPUSH
10367: LD_STRING DArm-Scout-c-3
10369: PPUSH
10370: CALL 187 0 2
10374: ST_TO_ADDR
// if not spoken then
10375: LD_VAR 0 1
10379: NOT
10380: IFFALSE 10415
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10382: LD_ADDR_VAR 0 1
10386: PUSH
10387: LD_EXP 25
10391: PPUSH
10392: LD_INT 26
10394: PUSH
10395: LD_INT 2
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 72
10406: PPUSH
10407: LD_STRING DArf-Scout-c-3
10409: PPUSH
10410: CALL 187 0 2
10414: ST_TO_ADDR
// ; end ; if spoken then
10415: LD_VAR 0 1
10419: IFFALSE 10433
// Say ( Heike , DH-Scout-c-4 ) ;
10421: LD_EXP 13
10425: PPUSH
10426: LD_STRING DH-Scout-c-4
10428: PPUSH
10429: CALL_OW 88
// end ;
10433: PPOPN 1
10435: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10436: LD_INT 22
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 30
10448: PUSH
10449: LD_INT 7
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PPUSH
10460: CALL_OW 69
10464: PUSH
10465: LD_EXP 24
10469: PPUSH
10470: CALL_OW 302
10474: AND
10475: IFFALSE 10560
10477: GO 10479
10479: DISABLE
// begin DialogueOn ;
10480: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10484: LD_EXP 24
10488: PPUSH
10489: LD_STRING DA-Lab-1
10491: PPUSH
10492: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING DH-Lab-2
10503: PPUSH
10504: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10508: LD_EXP 24
10512: PPUSH
10513: LD_STRING DA-Lab-3
10515: PPUSH
10516: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10520: LD_EXP 24
10524: PPUSH
10525: LD_STRING DA-Lab-4
10527: PPUSH
10528: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10532: LD_EXP 24
10536: PPUSH
10537: LD_STRING DA-Lab-5
10539: PPUSH
10540: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING DH-Lab-6
10551: PPUSH
10552: CALL_OW 88
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10561: LD_INT 7
10563: PPUSH
10564: LD_INT 2
10566: PPUSH
10567: CALL_OW 321
10571: PUSH
10572: LD_INT 2
10574: EQUAL
10575: PUSH
10576: LD_EXP 14
10580: PPUSH
10581: CALL_OW 302
10585: AND
10586: IFFALSE 10755
10588: GO 10590
10590: DISABLE
// begin DialogueOn ;
10591: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10595: LD_EXP 14
10599: PPUSH
10600: LD_STRING DG-Opt-1
10602: PPUSH
10603: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10607: LD_EXP 13
10611: PPUSH
10612: LD_STRING DH-Opt-2
10614: PPUSH
10615: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10619: LD_EXP 14
10623: PPUSH
10624: LD_STRING DG-Opt-3
10626: PPUSH
10627: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10631: LD_EXP 14
10635: PPUSH
10636: LD_STRING DG-Opt-4
10638: PPUSH
10639: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10643: LD_EXP 13
10647: PPUSH
10648: LD_STRING DH-Opt-5
10650: PPUSH
10651: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_STRING DG-Opt-6
10662: PPUSH
10663: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10667: LD_EXP 13
10671: PPUSH
10672: LD_STRING DH-Opt-7
10674: PPUSH
10675: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10679: LD_EXP 14
10683: PPUSH
10684: LD_STRING DG-Opt-8
10686: PPUSH
10687: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10691: LD_EXP 14
10695: PPUSH
10696: LD_STRING DG-Opt-9
10698: PPUSH
10699: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10703: LD_EXP 13
10707: PPUSH
10708: LD_STRING DH-Opt-10
10710: PPUSH
10711: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10715: LD_EXP 14
10719: PPUSH
10720: LD_STRING DG-Opt-11
10722: PPUSH
10723: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10727: LD_EXP 14
10731: PPUSH
10732: LD_STRING DG-Opt-12
10734: PPUSH
10735: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10739: LD_EXP 13
10743: PPUSH
10744: LD_STRING DH-Opt-13
10746: PPUSH
10747: CALL_OW 88
// DialogueOff ;
10751: CALL_OW 7
// end ;
10755: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
10756: LD_EXP 25
10760: PPUSH
10761: LD_INT 95
10763: PUSH
10764: LD_INT 7
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 23
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 26
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 72
10800: IFFALSE 10861
10802: GO 10804
10804: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
10805: LD_EXP 25
10809: PPUSH
10810: LD_INT 95
10812: PUSH
10813: LD_INT 7
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 23
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 26
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 72
10849: PUSH
10850: LD_INT 1
10852: ARRAY
10853: PPUSH
10854: LD_STRING DArm-River
10856: PPUSH
10857: CALL_OW 88
// end ;
10861: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10862: LD_INT 40
10864: PPUSH
10865: LD_INT 2
10867: PPUSH
10868: CALL_OW 321
10872: PUSH
10873: LD_INT 2
10875: EQUAL
10876: PUSH
10877: LD_EXP 16
10881: PPUSH
10882: CALL_OW 302
10886: AND
10887: IFFALSE 11137
10889: GO 10891
10891: DISABLE
// begin DialogueOn ;
10892: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10896: LD_EXP 16
10900: PPUSH
10901: LD_STRING DI-Roc-1
10903: PPUSH
10904: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10908: LD_EXP 13
10912: PPUSH
10913: LD_STRING DH-Roc-2
10915: PPUSH
10916: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10920: LD_EXP 16
10924: PPUSH
10925: LD_STRING DI-Roc-3
10927: PPUSH
10928: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10932: LD_EXP 16
10936: PPUSH
10937: LD_STRING DI-Roc-4
10939: PPUSH
10940: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10944: LD_EXP 18
10948: PPUSH
10949: LD_STRING DK-Roc-5
10951: PPUSH
10952: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10956: LD_EXP 18
10960: PPUSH
10961: LD_STRING DK-Roc-6
10963: PPUSH
10964: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10968: LD_EXP 14
10972: PPUSH
10973: LD_STRING DG-Roc-7
10975: PPUSH
10976: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10980: LD_EXP 14
10984: PPUSH
10985: LD_STRING DG-Roc-8
10987: PPUSH
10988: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10992: LD_EXP 20
10996: PPUSH
10997: CALL_OW 302
11001: PUSH
11002: LD_EXP 18
11006: PPUSH
11007: CALL_OW 302
11011: AND
11012: PUSH
11013: LD_EXP 14
11017: PPUSH
11018: CALL_OW 302
11022: AND
11023: IFFALSE 11133
// begin Say ( Markov , DMar-Roc-9 ) ;
11025: LD_EXP 20
11029: PPUSH
11030: LD_STRING DMar-Roc-9
11032: PPUSH
11033: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11037: LD_EXP 20
11041: PPUSH
11042: LD_STRING DMar-Roc-10
11044: PPUSH
11045: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11049: LD_EXP 18
11053: PPUSH
11054: LD_STRING DK-Roc-11
11056: PPUSH
11057: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11061: LD_EXP 20
11065: PPUSH
11066: LD_STRING DMar-Roc-12
11068: PPUSH
11069: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11073: LD_EXP 18
11077: PPUSH
11078: LD_STRING DK-Roc-13
11080: PPUSH
11081: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11085: LD_EXP 14
11089: PPUSH
11090: LD_STRING DG-Roc-14
11092: PPUSH
11093: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11097: LD_EXP 20
11101: PPUSH
11102: LD_STRING DMar-Roc-15
11104: PPUSH
11105: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11109: LD_EXP 20
11113: PPUSH
11114: LD_STRING DMar-Roc-16
11116: PPUSH
11117: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11121: LD_EXP 18
11125: PPUSH
11126: LD_STRING DK-Roc-17
11128: PPUSH
11129: CALL_OW 88
// end ; DialogueOff ;
11133: CALL_OW 7
// end ;
11137: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11138: LD_EXP 28
11142: PPUSH
11143: CALL_OW 256
11147: PUSH
11148: LD_INT 1000
11150: LESS
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 21
11164: PUSH
11165: LD_INT 1
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 69
11191: PUSH
11192: LD_INT 6
11194: LESS
11195: OR
11196: PUSH
11197: LD_INT 22
11199: PUSH
11200: LD_INT 1
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 21
11209: PUSH
11210: LD_INT 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: PPUSH
11232: CALL_OW 69
11236: PUSH
11237: LD_INT 2
11239: LESS
11240: OR
11241: IFFALSE 12450
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
11249: PPUSH
11250: PPUSH
// begin usAttacksAllowed := false ;
11251: LD_ADDR_EXP 6
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// usSurrender := true ;
11259: LD_ADDR_EXP 7
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11267: LD_INT 1
11269: PPUSH
11270: LD_INT 2
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_INT 22
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 1
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 60
11310: PUSH
11311: EMPTY
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 69
11323: PUSH
11324: FOR_IN
11325: IFFALSE 11338
// ComStop ( i ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 141
11336: GO 11324
11338: POP
11339: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11340: LD_ADDR_VAR 0 1
11344: PUSH
11345: LD_INT 22
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: LD_INT 50
11360: PUSH
11361: EMPTY
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 21
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 69
11387: PUSH
11388: FOR_IN
11389: IFFALSE 11405
// SetLives ( i , 251 ) ;
11391: LD_VAR 0 1
11395: PPUSH
11396: LD_INT 251
11398: PPUSH
11399: CALL_OW 234
11403: GO 11388
11405: POP
11406: POP
// InGameOn ;
11407: CALL_OW 8
// ComExit ( usCommander ) ;
11411: LD_EXP 28
11415: PPUSH
11416: CALL 53151 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11420: LD_EXP 28
11424: PPUSH
11425: LD_INT 81
11427: PPUSH
11428: LD_INT 143
11430: PPUSH
11431: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11435: LD_EXP 28
11439: PPUSH
11440: LD_INT 81
11442: PPUSH
11443: LD_INT 139
11445: PPUSH
11446: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11450: LD_INT 81
11452: PPUSH
11453: LD_INT 144
11455: PPUSH
11456: LD_INT 2
11458: PPUSH
11459: LD_INT 10
11461: NEG
11462: PPUSH
11463: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11467: LD_EXP 28
11471: PPUSH
11472: CALL_OW 87
// wait ( 0 0$2 ) ;
11476: LD_INT 70
11478: PPUSH
11479: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11483: LD_EXP 28
11487: PPUSH
11488: LD_STRING DCa-Surrender-1
11490: PPUSH
11491: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11495: LD_EXP 13
11499: PPUSH
11500: LD_STRING DH-Surrender-2
11502: PPUSH
11503: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11507: LD_EXP 13
11511: PPUSH
11512: CALL_OW 310
11516: PPUSH
11517: CALL_OW 247
11521: PUSH
11522: LD_INT 3
11524: EQUAL
11525: IFFALSE 11543
// begin ComExit ( Heike ) ;
11527: LD_EXP 13
11531: PPUSH
11532: CALL 53151 0 1
// wait ( 3 ) ;
11536: LD_INT 3
11538: PPUSH
11539: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11543: LD_EXP 13
11547: PPUSH
11548: LD_INT 82
11550: PPUSH
11551: LD_INT 133
11553: PPUSH
11554: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11558: LD_EXP 13
11562: PPUSH
11563: LD_EXP 28
11567: PPUSH
11568: CALL_OW 179
// wait ( 0 0$3 ) ;
11572: LD_INT 105
11574: PPUSH
11575: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11579: LD_EXP 13
11583: PPUSH
11584: LD_STRING DH-Surrender-3
11586: PPUSH
11587: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11591: LD_EXP 13
11595: PPUSH
11596: LD_STRING DH-Surrender-4
11598: PPUSH
11599: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11603: LD_INT 81
11605: PPUSH
11606: LD_INT 144
11608: PPUSH
11609: LD_INT 2
11611: PPUSH
11612: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11616: LD_INT 1
11618: PPUSH
11619: LD_INT 2
11621: PPUSH
11622: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11626: LD_ADDR_VAR 0 1
11630: PUSH
11631: LD_INT 22
11633: PUSH
11634: LD_INT 1
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 23
11643: PUSH
11644: LD_INT 1
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 54
11653: PUSH
11654: EMPTY
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: PUSH
11667: FOR_IN
11668: IFFALSE 11681
// ComExit ( i ) ;
11670: LD_VAR 0 1
11674: PPUSH
11675: CALL 53151 0 1
11679: GO 11667
11681: POP
11682: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11683: LD_ADDR_VAR 0 3
11687: PUSH
11688: LD_INT 22
11690: PUSH
11691: LD_INT 1
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 4
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PPUSH
11712: CALL_OW 69
11716: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 3
11734: PUSH
11735: LD_INT 50
11737: PUSH
11738: EMPTY
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: ST_TO_ADDR
// if sci and hurts then
11754: LD_VAR 0 3
11758: PUSH
11759: LD_VAR 0 2
11763: AND
11764: IFFALSE 11826
// begin for i := 1 to hurts do
11766: LD_ADDR_VAR 0 1
11770: PUSH
11771: DOUBLE
11772: LD_INT 1
11774: DEC
11775: ST_TO_ADDR
11776: LD_VAR 0 2
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11824
// if i <= sci then
11784: LD_VAR 0 1
11788: PUSH
11789: LD_VAR 0 3
11793: LESSEQUAL
11794: IFFALSE 11822
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11796: LD_VAR 0 3
11800: PUSH
11801: LD_VAR 0 1
11805: ARRAY
11806: PPUSH
11807: LD_VAR 0 2
11811: PUSH
11812: LD_VAR 0 1
11816: ARRAY
11817: PPUSH
11818: CALL_OW 188
11822: GO 11781
11824: POP
11825: POP
// end ; if IsOk ( Givi ) then
11826: LD_EXP 14
11830: PPUSH
11831: CALL_OW 302
11835: IFFALSE 11851
// Say ( Givi , DG-Surrender-5 ) else
11837: LD_EXP 14
11841: PPUSH
11842: LD_STRING DG-Surrender-5
11844: PPUSH
11845: CALL_OW 88
11849: GO 11863
// Say ( Heike , DH-Surrender-a-5 ) ;
11851: LD_EXP 13
11855: PPUSH
11856: LD_STRING DH-Surrender-a-5
11858: PPUSH
11859: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11863: LD_EXP 28
11867: PPUSH
11868: LD_STRING DCa-Surrender-6
11870: PPUSH
11871: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11875: LD_EXP 28
11879: PPUSH
11880: LD_STRING DCa-Surrender-7
11882: PPUSH
11883: CALL_OW 88
// if IsOk ( Givi ) then
11887: LD_EXP 14
11891: PPUSH
11892: CALL_OW 302
11896: IFFALSE 11912
// Say ( Givi , DG-Surrender-8 ) else
11898: LD_EXP 14
11902: PPUSH
11903: LD_STRING DG-Surrender-8
11905: PPUSH
11906: CALL_OW 88
11910: GO 11924
// Say ( Heike , DH-Surrender-a-8 ) ;
11912: LD_EXP 13
11916: PPUSH
11917: LD_STRING DH-Surrender-a-8
11919: PPUSH
11920: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11924: LD_EXP 28
11928: PPUSH
11929: LD_STRING DCa-Surrender-9
11931: PPUSH
11932: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11936: LD_EXP 13
11940: PPUSH
11941: LD_STRING DH-Surrender-10
11943: PPUSH
11944: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11948: LD_EXP 28
11952: PPUSH
11953: LD_STRING DCa-Surrender-11
11955: PPUSH
11956: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11960: LD_EXP 13
11964: PPUSH
11965: LD_STRING DH-Surrender-12
11967: PPUSH
11968: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11972: LD_EXP 28
11976: PPUSH
11977: LD_STRING DCa-Surrender-13
11979: PPUSH
11980: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11984: LD_EXP 28
11988: PPUSH
11989: LD_STRING DCa-Surrender-14
11991: PPUSH
11992: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11996: LD_EXP 28
12000: PPUSH
12001: LD_STRING DCa-Surrender-15
12003: PPUSH
12004: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12008: LD_EXP 28
12012: PPUSH
12013: LD_STRING DCa-Surrender-16
12015: PPUSH
12016: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12020: LD_EXP 18
12024: PPUSH
12025: LD_STRING DK-Surrender-17
12027: PPUSH
12028: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12032: LD_EXP 22
12036: PPUSH
12037: LD_STRING DO-Surrender-18
12039: PPUSH
12040: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12044: LD_EXP 22
12048: PPUSH
12049: LD_STRING DO-Surrender-19
12051: PPUSH
12052: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12056: LD_EXP 23
12060: PPUSH
12061: LD_STRING DKs-Surrender-20
12063: PPUSH
12064: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12068: LD_EXP 23
12072: PPUSH
12073: LD_STRING DKs-Surrender-21
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12080: LD_EXP 20
12084: PPUSH
12085: LD_STRING DMar-Surrender-22
12087: PPUSH
12088: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12092: LD_EXP 20
12096: PPUSH
12097: LD_STRING DMar-Surrender-23
12099: PPUSH
12100: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12104: LD_EXP 19
12108: PPUSH
12109: LD_STRING DS-Surrender-24
12111: PPUSH
12112: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12116: LD_EXP 24
12120: PPUSH
12121: LD_STRING DA-Surrender-25
12123: PPUSH
12124: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12128: LD_EXP 16
12132: PPUSH
12133: LD_STRING DI-Surrender-26
12135: PPUSH
12136: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12140: LD_EXP 17
12144: PPUSH
12145: LD_STRING DKam-Surrender-27
12147: PPUSH
12148: CALL_OW 88
// if IsOk ( Givi ) then
12152: LD_EXP 14
12156: PPUSH
12157: CALL_OW 302
12161: IFFALSE 12201
// begin Say ( Givi , DG-Surrender-28 ) ;
12163: LD_EXP 14
12167: PPUSH
12168: LD_STRING DG-Surrender-28
12170: PPUSH
12171: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12175: LD_EXP 14
12179: PPUSH
12180: LD_STRING DG-Surrender-29
12182: PPUSH
12183: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12187: LD_EXP 14
12191: PPUSH
12192: LD_STRING DG-Surrender-30
12194: PPUSH
12195: CALL_OW 88
// end else
12199: GO 12237
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12201: LD_EXP 13
12205: PPUSH
12206: LD_STRING DH-Surrender-a-28
12208: PPUSH
12209: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12213: LD_EXP 13
12217: PPUSH
12218: LD_STRING DH-Surrender-a-29
12220: PPUSH
12221: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12225: LD_EXP 13
12229: PPUSH
12230: LD_STRING DH-Surrender-a-30
12232: PPUSH
12233: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12237: CALL 14139 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12241: LD_INT 22
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 69
12255: PPUSH
12256: LD_INT 176
12258: PUSH
12259: LD_INT 123
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: EMPTY
12267: LIST
12268: PPUSH
12269: CALL 55357 0 2
// if not IsEnvironment ( 190 , 150 ) then
12273: LD_INT 190
12275: PPUSH
12276: LD_INT 150
12278: PPUSH
12279: CALL_OW 351
12283: NOT
12284: IFFALSE 12303
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12286: LD_INT 190
12288: PPUSH
12289: LD_INT 150
12291: PPUSH
12292: LD_INT 2
12294: PPUSH
12295: LD_INT 8
12297: NEG
12298: PPUSH
12299: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12303: LD_INT 193
12305: PPUSH
12306: LD_INT 150
12308: PPUSH
12309: CALL_OW 84
// if IsOk ( Markov ) then
12313: LD_EXP 20
12317: PPUSH
12318: CALL_OW 302
12322: IFFALSE 12338
// Say ( Markov , DMar-Surrender-31 ) else
12324: LD_EXP 20
12328: PPUSH
12329: LD_STRING DMar-Surrender-31
12331: PPUSH
12332: CALL_OW 88
12336: GO 12395
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12338: LD_EXP 25
12342: PPUSH
12343: LD_INT 26
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 72
12357: PPUSH
12358: LD_STRING DArm-Surrender-a-31
12360: PPUSH
12361: CALL 187 0 2
12365: NOT
12366: IFFALSE 12395
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12368: LD_EXP 25
12372: PPUSH
12373: LD_INT 26
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: PPUSH
12388: LD_STRING DArf-Surrender-a-31
12390: PPUSH
12391: CALL 187 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12395: LD_EXP 13
12399: PPUSH
12400: LD_STRING DH-Surrender-32
12402: PPUSH
12403: CALL_OW 88
// InGameOff ;
12407: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12411: LD_STRING M2
12413: PPUSH
12414: CALL_OW 337
// wait ( 0 0$20 ) ;
12418: LD_INT 700
12420: PPUSH
12421: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12425: CALL 14501 0 0
// russianAttack := true ;
12429: LD_ADDR_EXP 8
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12437: LD_INT 190
12439: PPUSH
12440: LD_INT 150
12442: PPUSH
12443: LD_INT 2
12445: PPUSH
12446: CALL_OW 331
// end ;
12450: PPOPN 3
12452: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12453: LD_EXP 11
12457: PUSH
12458: LD_INT 2
12460: PPUSH
12461: CALL_OW 463
12465: NOT
12466: AND
12467: PUSH
12468: LD_EXP 13
12472: PPUSH
12473: CALL_OW 302
12477: AND
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 30
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PPUSH
12503: CALL_OW 69
12507: AND
12508: PUSH
12509: LD_EXP 20
12513: PPUSH
12514: CALL_OW 302
12518: PUSH
12519: LD_EXP 25
12523: PPUSH
12524: LD_INT 50
12526: PUSH
12527: EMPTY
12528: LIST
12529: PPUSH
12530: CALL_OW 72
12534: OR
12535: AND
12536: IFFALSE 12764
12538: GO 12540
12540: DISABLE
// begin DialogueOn ;
12541: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12545: LD_EXP 13
12549: PPUSH
12550: LD_STRING DH-Heavy-1
12552: PPUSH
12553: CALL_OW 88
// if IsOk ( Markov ) then
12557: LD_EXP 20
12561: PPUSH
12562: CALL_OW 302
12566: IFFALSE 12691
// begin Say ( Markov , DMar-Heavy-2 ) ;
12568: LD_EXP 20
12572: PPUSH
12573: LD_STRING DMar-Heavy-2
12575: PPUSH
12576: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12580: LD_INT 22
12582: PUSH
12583: LD_INT 2
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 30
12592: PUSH
12593: LD_INT 3
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 69
12608: PUSH
12609: LD_INT 1
12611: ARRAY
12612: PPUSH
12613: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12617: LD_EXP 20
12621: PPUSH
12622: LD_STRING DMar-Heavy-3
12624: PPUSH
12625: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12629: LD_EXP 20
12633: PPUSH
12634: LD_STRING DMar-Heavy-4
12636: PPUSH
12637: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12641: LD_EXP 20
12645: PPUSH
12646: LD_STRING DMar-Heavy-5
12648: PPUSH
12649: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12653: LD_EXP 20
12657: PPUSH
12658: LD_STRING DMar-Heavy-6
12660: PPUSH
12661: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12665: LD_EXP 13
12669: PPUSH
12670: LD_STRING DH-Heavy-7
12672: PPUSH
12673: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12677: LD_EXP 13
12681: PPUSH
12682: LD_STRING DH-Heavy-8
12684: PPUSH
12685: CALL_OW 88
// end else
12689: GO 12748
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12691: LD_EXP 25
12695: PPUSH
12696: LD_INT 26
12698: PUSH
12699: LD_INT 1
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 72
12710: PPUSH
12711: LD_STRING DArm-Heavy-a-2
12713: PPUSH
12714: CALL 187 0 2
12718: NOT
12719: IFFALSE 12748
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12721: LD_EXP 25
12725: PPUSH
12726: LD_INT 26
12728: PUSH
12729: LD_INT 2
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 72
12740: PPUSH
12741: LD_STRING DArf-Heavy-a-2
12743: PPUSH
12744: CALL 187 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12748: LD_EXP 13
12752: PPUSH
12753: LD_STRING DH-Heavy-9
12755: PPUSH
12756: CALL_OW 88
// DialogueOff ;
12760: CALL_OW 7
// end ;
12764: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12765: LD_EXP 32
12769: PPUSH
12770: LD_INT 101
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 72
12784: PUSH
12785: LD_EXP 13
12789: PPUSH
12790: CALL_OW 302
12794: AND
12795: IFFALSE 12938
12797: GO 12799
12799: DISABLE
// begin DialogueOn ;
12800: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12804: LD_EXP 32
12808: PPUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 2
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 72
12823: PPUSH
12824: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12828: LD_EXP 13
12832: PPUSH
12833: LD_STRING DH-Flank-1
12835: PPUSH
12836: CALL_OW 88
// if IsOk ( Mike ) then
12840: LD_EXP 15
12844: PPUSH
12845: CALL_OW 302
12849: IFFALSE 12865
// Say ( Mike , DM-Flank-2 ) else
12851: LD_EXP 15
12855: PPUSH
12856: LD_STRING DM-Flank-2
12858: PPUSH
12859: CALL_OW 88
12863: GO 12922
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12865: LD_EXP 25
12869: PPUSH
12870: LD_INT 26
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 72
12884: PPUSH
12885: LD_STRING DArm-Flank-a-2
12887: PPUSH
12888: CALL 187 0 2
12892: NOT
12893: IFFALSE 12922
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12895: LD_EXP 25
12899: PPUSH
12900: LD_INT 26
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 72
12914: PPUSH
12915: LD_STRING DArm-Flank-a-2
12917: PPUSH
12918: CALL 187 0 2
// Say ( Heike , DH-Flank-3 ) ;
12922: LD_EXP 13
12926: PPUSH
12927: LD_STRING DH-Flank-3
12929: PPUSH
12930: CALL_OW 88
// DialogueOff ;
12934: CALL_OW 7
// end ;
12938: END
// every 0 0$3 trigger seeRemoteVehicle do
12939: LD_EXP 10
12943: IFFALSE 13167
12945: GO 12947
12947: DISABLE
// begin DialogueOn ;
12948: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12952: LD_EXP 13
12956: PPUSH
12957: LD_STRING DH-USRC-1
12959: PPUSH
12960: CALL_OW 88
// if IsOk ( Markov ) then
12964: LD_EXP 20
12968: PPUSH
12969: CALL_OW 302
12973: IFFALSE 12989
// Say ( Markov , DMar-USRC-2 ) else
12975: LD_EXP 20
12979: PPUSH
12980: LD_STRING DMar-USRC-2
12982: PPUSH
12983: CALL_OW 88
12987: GO 13046
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12989: LD_EXP 25
12993: PPUSH
12994: LD_INT 26
12996: PUSH
12997: LD_INT 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PPUSH
13004: CALL_OW 72
13008: PPUSH
13009: LD_STRING DArm-USRC-a-2
13011: PPUSH
13012: CALL 187 0 2
13016: NOT
13017: IFFALSE 13046
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13019: LD_EXP 25
13023: PPUSH
13024: LD_INT 26
13026: PUSH
13027: LD_INT 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PPUSH
13034: CALL_OW 72
13038: PPUSH
13039: LD_STRING DArf-USRC-a-2
13041: PPUSH
13042: CALL 187 0 2
// DialogueOff ;
13046: CALL_OW 7
// wait ( 0 0$10 ) ;
13050: LD_INT 350
13052: PPUSH
13053: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13057: LD_EXP 13
13061: PPUSH
13062: LD_STRING DH-USRC-3
13064: PPUSH
13065: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13069: LD_INT 35
13071: PPUSH
13072: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13076: LD_INT 2
13078: PPUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 36
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 1
13110: ARRAY
13111: PPUSH
13112: CALL_OW 292
13116: IFFALSE 13069
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13118: LD_INT 22
13120: PUSH
13121: LD_INT 1
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 30
13130: PUSH
13131: LD_INT 36
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: PUSH
13147: LD_INT 1
13149: ARRAY
13150: PPUSH
13151: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13155: LD_EXP 13
13159: PPUSH
13160: LD_STRING DH-USRCFound-1
13162: PPUSH
13163: CALL_OW 88
// end ;
13167: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13168: LD_EXP 18
13172: PPUSH
13173: CALL_OW 256
13177: PUSH
13178: LD_INT 3
13180: LESS
13181: IFFALSE 13218
13183: GO 13185
13185: DISABLE
// begin DialogueOn ;
13186: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13190: LD_EXP 18
13194: PPUSH
13195: LD_STRING DK-Dead-1
13197: PPUSH
13198: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13202: LD_EXP 18
13206: PPUSH
13207: LD_STRING DK-Dead-2
13209: PPUSH
13210: CALL_OW 91
// DialogueOff ;
13214: CALL_OW 7
// end ;
13218: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13219: LD_INT 22
13221: PUSH
13222: LD_INT 2
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 35
13234: PUSH
13235: LD_INT 28
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 34
13244: PUSH
13245: LD_INT 28
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PPUSH
13261: CALL_OW 69
13265: IFFALSE 13278
13267: GO 13269
13269: DISABLE
// hasRockets := true ;
13270: LD_ADDR_EXP 9
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
13278: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13279: LD_EXP 8
13283: PUSH
13284: LD_INT 22
13286: PUSH
13287: LD_INT 3
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: NOT
13299: AND
13300: IFFALSE 13928
13302: GO 13304
13304: DISABLE
// begin DialogueOn ;
13305: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13309: LD_EXP 13
13313: PPUSH
13314: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13318: LD_EXP 13
13322: PPUSH
13323: LD_STRING DH-End-1
13325: PPUSH
13326: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13330: LD_EXP 21
13334: PPUSH
13335: LD_STRING DShar-End-2
13337: PPUSH
13338: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13342: LD_EXP 18
13346: PPUSH
13347: LD_STRING DK-End-3
13349: PPUSH
13350: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13354: LD_EXP 13
13358: PPUSH
13359: LD_STRING DH-End-4
13361: PPUSH
13362: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13366: LD_EXP 21
13370: PPUSH
13371: LD_STRING DShar-End-5
13373: PPUSH
13374: CALL_OW 94
// if IsOk ( Markov ) then
13378: LD_EXP 20
13382: PPUSH
13383: CALL_OW 302
13387: IFFALSE 13401
// Say ( Kaia , DK-End-6 ) ;
13389: LD_EXP 18
13393: PPUSH
13394: LD_STRING DK-End-6
13396: PPUSH
13397: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13401: LD_EXP 18
13405: PPUSH
13406: LD_STRING DK-End-7
13408: PPUSH
13409: CALL_OW 88
// if IsOk ( Kaia ) then
13413: LD_EXP 18
13417: PPUSH
13418: CALL_OW 302
13422: IFFALSE 13460
// begin Say ( Givi , DG-End-8 ) ;
13424: LD_EXP 14
13428: PPUSH
13429: LD_STRING DG-End-8
13431: PPUSH
13432: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13436: LD_EXP 14
13440: PPUSH
13441: LD_STRING DG-End-9
13443: PPUSH
13444: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13448: LD_EXP 13
13452: PPUSH
13453: LD_STRING DH-End-10
13455: PPUSH
13456: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13460: LD_EXP 13
13464: PPUSH
13465: LD_STRING DH-End-11
13467: PPUSH
13468: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13472: LD_INT 7
13474: PPUSH
13475: LD_INT 2
13477: PPUSH
13478: CALL_OW 321
13482: PUSH
13483: LD_INT 2
13485: EQUAL
13486: IFFALSE 13500
// AddMedal ( med1 , 1 ) else
13488: LD_STRING med1
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: CALL_OW 101
13498: GO 13511
// AddMedal ( med1 , - 1 ) ;
13500: LD_STRING med1
13502: PPUSH
13503: LD_INT 1
13505: NEG
13506: PPUSH
13507: CALL_OW 101
// if hasRockets then
13511: LD_EXP 9
13515: IFFALSE 13529
// AddMedal ( med2 , 1 ) else
13517: LD_STRING med2
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 101
13527: GO 13540
// AddMedal ( med2 , - 1 ) ;
13529: LD_STRING med2
13531: PPUSH
13532: LD_INT 1
13534: NEG
13535: PPUSH
13536: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13540: LD_OWVAR 1
13544: PUSH
13545: LD_INT 105000
13547: PUSH
13548: LD_INT 94500
13550: PUSH
13551: LD_INT 84000
13553: PUSH
13554: LD_INT 73500
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_OWVAR 67
13567: ARRAY
13568: LESS
13569: IFFALSE 13583
// AddMedal ( med3 , 1 ) else
13571: LD_STRING med3
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 101
13581: GO 13594
// AddMedal ( med3 , - 1 ) ;
13583: LD_STRING med3
13585: PPUSH
13586: LD_INT 1
13588: NEG
13589: PPUSH
13590: CALL_OW 101
// GiveMedals ( MAIN ) ;
13594: LD_STRING MAIN
13596: PPUSH
13597: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13601: LD_INT 22
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 23
13613: PUSH
13614: LD_INT 2
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: PPUSH
13636: CALL_OW 69
13640: PPUSH
13641: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13645: LD_EXP 28
13649: PPUSH
13650: LD_STRING 07_UsCommander
13652: PPUSH
13653: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13657: LD_INT 22
13659: PUSH
13660: LD_INT 1
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 23
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 21
13679: PUSH
13680: LD_INT 1
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PUSH
13697: LD_EXP 28
13701: DIFF
13702: PPUSH
13703: LD_STRING 07_Americans
13705: PPUSH
13706: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13710: LD_EXP 13
13714: PPUSH
13715: LD_STRING 07_Heike
13717: PPUSH
13718: CALL_OW 38
// if Aviradze then
13722: LD_EXP 24
13726: IFFALSE 13740
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13728: LD_EXP 24
13732: PPUSH
13733: LD_STRING 07_Aviradze
13735: PPUSH
13736: CALL_OW 38
// if Ibrahim then
13740: LD_EXP 16
13744: IFFALSE 13758
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13746: LD_EXP 16
13750: PPUSH
13751: LD_STRING 07_Ibrahim
13753: PPUSH
13754: CALL_OW 38
// if Kamil then
13758: LD_EXP 17
13762: IFFALSE 13776
// SaveCharacters ( Kamil , 07_Kamil ) ;
13764: LD_EXP 17
13768: PPUSH
13769: LD_STRING 07_Kamil
13771: PPUSH
13772: CALL_OW 38
// if Sophia then
13776: LD_EXP 19
13780: IFFALSE 13794
// SaveCharacters ( Sophia , 07_Sophia ) ;
13782: LD_EXP 19
13786: PPUSH
13787: LD_STRING 07_Sophia
13789: PPUSH
13790: CALL_OW 38
// if Kaia then
13794: LD_EXP 18
13798: IFFALSE 13812
// SaveCharacters ( Kaia , 07_Kaia ) ;
13800: LD_EXP 18
13804: PPUSH
13805: LD_STRING 07_Kaia
13807: PPUSH
13808: CALL_OW 38
// if Givi then
13812: LD_EXP 14
13816: IFFALSE 13830
// SaveCharacters ( Givi , 07_Givi ) ;
13818: LD_EXP 14
13822: PPUSH
13823: LD_STRING 07_Givi
13825: PPUSH
13826: CALL_OW 38
// if Mike then
13830: LD_EXP 15
13834: IFFALSE 13848
// SaveCharacters ( Mike , 07_Mike ) ;
13836: LD_EXP 15
13840: PPUSH
13841: LD_STRING 07_Mike
13843: PPUSH
13844: CALL_OW 38
// if Markov then
13848: LD_EXP 20
13852: IFFALSE 13866
// SaveCharacters ( Markov , 07_Markov ) ;
13854: LD_EXP 20
13858: PPUSH
13859: LD_STRING 07_Markov
13861: PPUSH
13862: CALL_OW 38
// if Kurt then
13866: LD_EXP 23
13870: IFFALSE 13884
// SaveCharacters ( Kurt , 07_Kurt ) ;
13872: LD_EXP 23
13876: PPUSH
13877: LD_STRING 07_Kurt
13879: PPUSH
13880: CALL_OW 38
// if Olaf then
13884: LD_EXP 22
13888: IFFALSE 13902
// SaveCharacters ( Olaf , 07_Olaf ) ;
13890: LD_EXP 22
13894: PPUSH
13895: LD_STRING 07_Olaf
13897: PPUSH
13898: CALL_OW 38
// if heikeSecondSquad then
13902: LD_EXP 25
13906: IFFALSE 13920
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13908: LD_EXP 25
13912: PPUSH
13913: LD_STRING 07_others
13915: PPUSH
13916: CALL_OW 38
// YouWin ;
13920: CALL_OW 103
// DialogueOff ;
13924: CALL_OW 7
// end ; end_of_file
13928: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13929: LD_INT 7
13931: PPUSH
13932: LD_INT 1
13934: PPUSH
13935: CALL_OW 287
13939: PUSH
13940: LD_INT 300
13942: PUSH
13943: LD_INT 150
13945: PUSH
13946: LD_INT 100
13948: PUSH
13949: LD_INT 80
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: PUSH
13958: LD_OWVAR 67
13962: ARRAY
13963: LESS
13964: IFFALSE 13991
13966: GO 13968
13968: DISABLE
// begin enable ;
13969: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13970: LD_INT 1
13972: PPUSH
13973: LD_INT 5
13975: PPUSH
13976: CALL_OW 12
13980: PPUSH
13981: LD_INT 7
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 55
// end ;
13991: END
// every 0 0$30 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 350 , 320 , 270 , 240 ] [ Difficulty ] do
13992: LD_INT 8
13994: PPUSH
13995: LD_INT 1
13997: PPUSH
13998: CALL_OW 287
14002: PUSH
14003: LD_INT 350
14005: PUSH
14006: LD_INT 320
14008: PUSH
14009: LD_INT 270
14011: PUSH
14012: LD_INT 240
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_OWVAR 67
14025: ARRAY
14026: LESS
14027: IFFALSE 14054
14029: GO 14031
14031: DISABLE
// begin enable ;
14032: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14033: LD_INT 1
14035: PPUSH
14036: LD_INT 5
14038: PPUSH
14039: CALL_OW 12
14043: PPUSH
14044: LD_INT 8
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 55
// end ;
14054: END
// every 0 0$40 trigger tick < 12 12$10 do
14055: LD_OWVAR 1
14059: PUSH
14060: LD_INT 25550
14062: LESS
14063: IFFALSE 14096
14065: GO 14067
14067: DISABLE
// begin enable ;
14068: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14069: LD_INT 1
14071: PPUSH
14072: LD_INT 5
14074: PPUSH
14075: CALL_OW 12
14079: PPUSH
14080: LD_INT 130
14082: PPUSH
14083: LD_INT 18
14085: PPUSH
14086: LD_INT 12
14088: PPUSH
14089: LD_INT 1
14091: PPUSH
14092: CALL_OW 56
// end ;
14096: END
// every 1 1$00 + 0 0$30 trigger tick < 8 8$10 do
14097: LD_OWVAR 1
14101: PUSH
14102: LD_INT 17150
14104: LESS
14105: IFFALSE 14138
14107: GO 14109
14109: DISABLE
// begin enable ;
14110: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14111: LD_INT 1
14113: PPUSH
14114: LD_INT 5
14116: PPUSH
14117: CALL_OW 12
14121: PPUSH
14122: LD_INT 172
14124: PPUSH
14125: LD_INT 97
14127: PPUSH
14128: LD_INT 12
14130: PPUSH
14131: LD_INT 1
14133: PPUSH
14134: CALL_OW 56
// end ; end_of_file
14138: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14139: LD_INT 0
14141: PPUSH
14142: PPUSH
14143: PPUSH
14144: PPUSH
14145: PPUSH
// uc_side := 3 ;
14146: LD_ADDR_OWVAR 20
14150: PUSH
14151: LD_INT 3
14153: ST_TO_ADDR
// uc_nation := 3 ;
14154: LD_ADDR_OWVAR 21
14158: PUSH
14159: LD_INT 3
14161: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: LD_INT 184
14169: PUSH
14170: LD_INT 144
14172: PUSH
14173: LD_INT 5
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 191
14183: PUSH
14184: LD_INT 147
14186: PUSH
14187: LD_INT 5
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 202
14197: PUSH
14198: LD_INT 151
14200: PUSH
14201: LD_INT 4
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 210
14211: PUSH
14212: LD_INT 152
14214: PUSH
14215: LD_INT 4
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: ST_TO_ADDR
// for i := 1 to 4 do
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: DOUBLE
14235: LD_INT 1
14237: DEC
14238: ST_TO_ADDR
14239: LD_INT 4
14241: PUSH
14242: FOR_TO
14243: IFFALSE 14412
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14245: LD_INT 24
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: LD_INT 43
14256: PUSH
14257: LD_INT 44
14259: PUSH
14260: LD_INT 46
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PUSH
14268: LD_VAR 0 2
14272: PUSH
14273: LD_INT 3
14275: MOD
14276: PUSH
14277: LD_INT 1
14279: PLUS
14280: ARRAY
14281: PPUSH
14282: LD_INT 40
14284: PPUSH
14285: CALL 20328 0 5
// veh := CreateVehicle ;
14289: LD_ADDR_VAR 0 5
14293: PUSH
14294: CALL_OW 45
14298: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14299: LD_VAR 0 5
14303: PPUSH
14304: LD_VAR 0 3
14308: PUSH
14309: LD_VAR 0 2
14313: ARRAY
14314: PUSH
14315: LD_INT 3
14317: ARRAY
14318: PPUSH
14319: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14323: LD_VAR 0 5
14327: PPUSH
14328: LD_VAR 0 3
14332: PUSH
14333: LD_VAR 0 2
14337: ARRAY
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: PPUSH
14343: LD_VAR 0 3
14347: PUSH
14348: LD_VAR 0 2
14352: ARRAY
14353: PUSH
14354: LD_INT 2
14356: ARRAY
14357: PPUSH
14358: LD_INT 0
14360: PPUSH
14361: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14365: LD_INT 0
14367: PPUSH
14368: LD_INT 6
14370: PUSH
14371: LD_INT 7
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 8
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: LD_OWVAR 67
14390: ARRAY
14391: PPUSH
14392: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14396: CALL_OW 44
14400: PPUSH
14401: LD_VAR 0 5
14405: PPUSH
14406: CALL_OW 52
// end ;
14410: GO 14242
14412: POP
14413: POP
// for i := 1 to 4 do
14414: LD_ADDR_VAR 0 2
14418: PUSH
14419: DOUBLE
14420: LD_INT 1
14422: DEC
14423: ST_TO_ADDR
14424: LD_INT 4
14426: PUSH
14427: FOR_TO
14428: IFFALSE 14494
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14430: LD_INT 0
14432: PPUSH
14433: LD_INT 6
14435: PUSH
14436: LD_INT 7
14438: PUSH
14439: LD_INT 8
14441: PUSH
14442: LD_INT 8
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: PUSH
14451: LD_OWVAR 67
14455: ARRAY
14456: PPUSH
14457: CALL_OW 381
// un := CreateHuman ;
14461: LD_ADDR_VAR 0 4
14465: PUSH
14466: CALL_OW 44
14470: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14471: LD_VAR 0 4
14475: PPUSH
14476: LD_INT 185
14478: PPUSH
14479: LD_INT 145
14481: PPUSH
14482: LD_INT 6
14484: PPUSH
14485: LD_INT 0
14487: PPUSH
14488: CALL_OW 50
// end ;
14492: GO 14427
14494: POP
14495: POP
// end ;
14496: LD_VAR 0 1
14500: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
// uc_side := 3 ;
14506: LD_ADDR_OWVAR 20
14510: PUSH
14511: LD_INT 3
14513: ST_TO_ADDR
// if Difficulty > 1 then
14514: LD_OWVAR 67
14518: PUSH
14519: LD_INT 1
14521: GREATER
14522: IFFALSE 14684
// begin uc_nation := 0 ;
14524: LD_ADDR_OWVAR 21
14528: PUSH
14529: LD_INT 0
14531: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14532: LD_ADDR_VAR 0 2
14536: PUSH
14537: DOUBLE
14538: LD_INT 1
14540: DEC
14541: ST_TO_ADDR
14542: LD_INT 4
14544: PUSH
14545: LD_INT 5
14547: PUSH
14548: LD_INT 6
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: LD_OWVAR 67
14560: PUSH
14561: LD_INT 1
14563: PLUS
14564: ARRAY
14565: PUSH
14566: FOR_TO
14567: IFFALSE 14682
// begin hc_class := class_apeman_soldier ;
14569: LD_ADDR_OWVAR 28
14573: PUSH
14574: LD_INT 15
14576: ST_TO_ADDR
// hc_gallery :=  ;
14577: LD_ADDR_OWVAR 33
14581: PUSH
14582: LD_STRING 
14584: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14585: LD_ADDR_OWVAR 26
14589: PUSH
14590: LD_STRING Treci
14592: PUSH
14593: LD_STRING Ivan
14595: PUSH
14596: LD_STRING Yaromir
14598: PUSH
14599: LD_STRING Nadzieia
14601: PUSH
14602: LD_STRING Krasna
14604: PUSH
14605: LD_STRING Piaty
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_INT 6
14621: PPUSH
14622: CALL_OW 12
14626: ARRAY
14627: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14628: LD_ADDR_OWVAR 31
14632: PUSH
14633: LD_INT 5
14635: PUSH
14636: LD_INT 0
14638: PUSH
14639: LD_INT 0
14641: PUSH
14642: LD_INT 0
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: ST_TO_ADDR
// hc_sex := sex_male ;
14651: LD_ADDR_OWVAR 27
14655: PUSH
14656: LD_INT 1
14658: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14659: CALL_OW 44
14663: PPUSH
14664: LD_INT 178
14666: PPUSH
14667: LD_INT 148
14669: PPUSH
14670: LD_INT 6
14672: PPUSH
14673: LD_INT 0
14675: PPUSH
14676: CALL_OW 50
// end ;
14680: GO 14566
14682: POP
14683: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: DOUBLE
14690: LD_INT 1
14692: DEC
14693: ST_TO_ADDR
14694: LD_INT 4
14696: PUSH
14697: LD_INT 6
14699: PUSH
14700: LD_INT 7
14702: PUSH
14703: LD_INT 9
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: PUSH
14712: LD_OWVAR 67
14716: ARRAY
14717: PUSH
14718: FOR_TO
14719: IFFALSE 14886
// begin uc_nation := 3 ;
14721: LD_ADDR_OWVAR 21
14725: PUSH
14726: LD_INT 3
14728: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14729: LD_INT 22
14731: PPUSH
14732: LD_INT 1
14734: PPUSH
14735: LD_INT 1
14737: PPUSH
14738: LD_INT 45
14740: PUSH
14741: LD_INT 43
14743: PUSH
14744: LD_INT 44
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: LD_VAR 0 2
14756: PUSH
14757: LD_INT 3
14759: MOD
14760: PUSH
14761: LD_INT 1
14763: PLUS
14764: ARRAY
14765: PPUSH
14766: LD_INT 44
14768: PPUSH
14769: CALL 20328 0 5
// veh := CreateVehicle ;
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: CALL_OW 45
14782: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_INT 4
14790: PPUSH
14791: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14795: LD_VAR 0 3
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: LD_INT 0
14805: PPUSH
14806: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14810: LD_INT 0
14812: PPUSH
14813: LD_INT 6
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: LD_INT 8
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: PUSH
14831: LD_OWVAR 67
14835: ARRAY
14836: PPUSH
14837: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14841: CALL_OW 44
14845: PPUSH
14846: LD_VAR 0 3
14850: PPUSH
14851: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14855: LD_VAR 0 3
14859: PPUSH
14860: LD_INT 178
14862: PUSH
14863: LD_INT 137
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: PPUSH
14873: CALL 55357 0 2
// wait ( 0 0$2 ) ;
14877: LD_INT 70
14879: PPUSH
14880: CALL_OW 67
// end ;
14884: GO 14718
14886: POP
14887: POP
// end ;
14888: LD_VAR 0 1
14892: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14893: LD_INT 22
14895: PUSH
14896: LD_INT 3
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 32
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PPUSH
14917: CALL_OW 69
14921: IFFALSE 15009
14923: GO 14925
14925: DISABLE
14926: LD_INT 0
14928: PPUSH
14929: PPUSH
// begin enable ;
14930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14931: LD_ADDR_VAR 0 2
14935: PUSH
14936: LD_INT 22
14938: PUSH
14939: LD_INT 3
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 32
14948: PUSH
14949: LD_INT 1
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: ST_TO_ADDR
// for i in tmp do
14965: LD_ADDR_VAR 0 1
14969: PUSH
14970: LD_VAR 0 2
14974: PUSH
14975: FOR_IN
14976: IFFALSE 15007
// if GetFuel ( i ) < 3 then
14978: LD_VAR 0 1
14982: PPUSH
14983: CALL_OW 261
14987: PUSH
14988: LD_INT 3
14990: LESS
14991: IFFALSE 15005
// SetFuel ( i , 3 ) ;
14993: LD_VAR 0 1
14997: PPUSH
14998: LD_INT 3
15000: PPUSH
15001: CALL_OW 240
15005: GO 14975
15007: POP
15008: POP
// end ;
15009: PPOPN 2
15011: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15012: LD_EXP 8
15016: PUSH
15017: LD_INT 22
15019: PUSH
15020: LD_INT 3
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 1
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: AND
15046: IFFALSE 15310
15048: GO 15050
15050: DISABLE
15051: LD_INT 0
15053: PPUSH
15054: PPUSH
15055: PPUSH
// begin enable ;
15056: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15057: LD_ADDR_VAR 0 2
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 3
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 25
15074: PUSH
15075: LD_INT 3
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 3
15084: PUSH
15085: LD_INT 55
15087: PUSH
15088: EMPTY
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if mech then
15105: LD_VAR 0 2
15109: IFFALSE 15179
// for i in mech do
15111: LD_ADDR_VAR 0 1
15115: PUSH
15116: LD_VAR 0 2
15120: PUSH
15121: FOR_IN
15122: IFFALSE 15177
// begin if IsInArea ( i , escapeArea ) then
15124: LD_VAR 0 1
15128: PPUSH
15129: LD_INT 13
15131: PPUSH
15132: CALL_OW 308
15136: IFFALSE 15149
// RemoveUnit ( i ) else
15138: LD_VAR 0 1
15142: PPUSH
15143: CALL_OW 64
15147: GO 15175
// if IsOk ( i ) then
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 302
15158: IFFALSE 15175
// ComMoveXY ( i , 196 , 155 ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_INT 196
15167: PPUSH
15168: LD_INT 155
15170: PPUSH
15171: CALL_OW 111
// end ;
15175: GO 15121
15177: POP
15178: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15179: LD_ADDR_VAR 0 3
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 2
15196: PUSH
15197: LD_INT 25
15199: PUSH
15200: LD_INT 1
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 25
15209: PUSH
15210: LD_INT 15
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 21
15219: PUSH
15220: LD_INT 2
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: PUSH
15233: LD_INT 50
15235: PUSH
15236: EMPTY
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: PPUSH
15244: CALL_OW 69
15248: ST_TO_ADDR
// if tmp then
15249: LD_VAR 0 3
15253: IFFALSE 15310
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15255: LD_VAR 0 3
15259: PPUSH
15260: LD_INT 171
15262: PUSH
15263: LD_INT 106
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 145
15272: PUSH
15273: LD_INT 69
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 132
15282: PUSH
15283: LD_INT 38
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 126
15292: PUSH
15293: LD_INT 15
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL 55357 0 2
// end ; end_of_file
15310: PPOPN 3
15312: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15313: LD_INT 0
15315: PPUSH
15316: PPUSH
// if exist_mode then
15317: LD_VAR 0 2
15321: IFFALSE 15346
// unit := CreateCharacter ( prefix & ident ) else
15323: LD_ADDR_VAR 0 5
15327: PUSH
15328: LD_VAR 0 3
15332: PUSH
15333: LD_VAR 0 1
15337: STR
15338: PPUSH
15339: CALL_OW 34
15343: ST_TO_ADDR
15344: GO 15361
// unit := NewCharacter ( ident ) ;
15346: LD_ADDR_VAR 0 5
15350: PUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: CALL_OW 25
15360: ST_TO_ADDR
// result := unit ;
15361: LD_ADDR_VAR 0 4
15365: PUSH
15366: LD_VAR 0 5
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 4
15375: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
// if not side or not nation then
15380: LD_VAR 0 1
15384: NOT
15385: PUSH
15386: LD_VAR 0 2
15390: NOT
15391: OR
15392: IFFALSE 15396
// exit ;
15394: GO 16164
// case nation of nation_american :
15396: LD_VAR 0 2
15400: PUSH
15401: LD_INT 1
15403: DOUBLE
15404: EQUAL
15405: IFTRUE 15409
15407: GO 15623
15409: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15410: LD_ADDR_VAR 0 4
15414: PUSH
15415: LD_INT 35
15417: PUSH
15418: LD_INT 45
15420: PUSH
15421: LD_INT 46
15423: PUSH
15424: LD_INT 47
15426: PUSH
15427: LD_INT 82
15429: PUSH
15430: LD_INT 83
15432: PUSH
15433: LD_INT 84
15435: PUSH
15436: LD_INT 85
15438: PUSH
15439: LD_INT 86
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: LD_INT 2
15447: PUSH
15448: LD_INT 6
15450: PUSH
15451: LD_INT 15
15453: PUSH
15454: LD_INT 16
15456: PUSH
15457: LD_INT 7
15459: PUSH
15460: LD_INT 12
15462: PUSH
15463: LD_INT 13
15465: PUSH
15466: LD_INT 10
15468: PUSH
15469: LD_INT 14
15471: PUSH
15472: LD_INT 20
15474: PUSH
15475: LD_INT 21
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_INT 25
15483: PUSH
15484: LD_INT 32
15486: PUSH
15487: LD_INT 27
15489: PUSH
15490: LD_INT 36
15492: PUSH
15493: LD_INT 69
15495: PUSH
15496: LD_INT 39
15498: PUSH
15499: LD_INT 34
15501: PUSH
15502: LD_INT 40
15504: PUSH
15505: LD_INT 48
15507: PUSH
15508: LD_INT 49
15510: PUSH
15511: LD_INT 50
15513: PUSH
15514: LD_INT 51
15516: PUSH
15517: LD_INT 52
15519: PUSH
15520: LD_INT 53
15522: PUSH
15523: LD_INT 54
15525: PUSH
15526: LD_INT 55
15528: PUSH
15529: LD_INT 56
15531: PUSH
15532: LD_INT 57
15534: PUSH
15535: LD_INT 58
15537: PUSH
15538: LD_INT 59
15540: PUSH
15541: LD_INT 60
15543: PUSH
15544: LD_INT 61
15546: PUSH
15547: LD_INT 62
15549: PUSH
15550: LD_INT 80
15552: PUSH
15553: LD_INT 82
15555: PUSH
15556: LD_INT 83
15558: PUSH
15559: LD_INT 84
15561: PUSH
15562: LD_INT 85
15564: PUSH
15565: LD_INT 86
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: ST_TO_ADDR
15621: GO 16088
15623: LD_INT 2
15625: DOUBLE
15626: EQUAL
15627: IFTRUE 15631
15629: GO 15857
15631: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15632: LD_ADDR_VAR 0 4
15636: PUSH
15637: LD_INT 35
15639: PUSH
15640: LD_INT 45
15642: PUSH
15643: LD_INT 46
15645: PUSH
15646: LD_INT 47
15648: PUSH
15649: LD_INT 82
15651: PUSH
15652: LD_INT 83
15654: PUSH
15655: LD_INT 84
15657: PUSH
15658: LD_INT 85
15660: PUSH
15661: LD_INT 87
15663: PUSH
15664: LD_INT 70
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: LD_INT 11
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 4
15678: PUSH
15679: LD_INT 5
15681: PUSH
15682: LD_INT 6
15684: PUSH
15685: LD_INT 15
15687: PUSH
15688: LD_INT 18
15690: PUSH
15691: LD_INT 7
15693: PUSH
15694: LD_INT 17
15696: PUSH
15697: LD_INT 8
15699: PUSH
15700: LD_INT 20
15702: PUSH
15703: LD_INT 21
15705: PUSH
15706: LD_INT 22
15708: PUSH
15709: LD_INT 72
15711: PUSH
15712: LD_INT 26
15714: PUSH
15715: LD_INT 69
15717: PUSH
15718: LD_INT 39
15720: PUSH
15721: LD_INT 40
15723: PUSH
15724: LD_INT 41
15726: PUSH
15727: LD_INT 42
15729: PUSH
15730: LD_INT 43
15732: PUSH
15733: LD_INT 48
15735: PUSH
15736: LD_INT 49
15738: PUSH
15739: LD_INT 50
15741: PUSH
15742: LD_INT 51
15744: PUSH
15745: LD_INT 52
15747: PUSH
15748: LD_INT 53
15750: PUSH
15751: LD_INT 54
15753: PUSH
15754: LD_INT 55
15756: PUSH
15757: LD_INT 56
15759: PUSH
15760: LD_INT 60
15762: PUSH
15763: LD_INT 61
15765: PUSH
15766: LD_INT 62
15768: PUSH
15769: LD_INT 66
15771: PUSH
15772: LD_INT 67
15774: PUSH
15775: LD_INT 68
15777: PUSH
15778: LD_INT 81
15780: PUSH
15781: LD_INT 82
15783: PUSH
15784: LD_INT 83
15786: PUSH
15787: LD_INT 84
15789: PUSH
15790: LD_INT 85
15792: PUSH
15793: LD_INT 87
15795: PUSH
15796: LD_INT 88
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
15855: GO 16088
15857: LD_INT 3
15859: DOUBLE
15860: EQUAL
15861: IFTRUE 15865
15863: GO 16087
15865: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15866: LD_ADDR_VAR 0 4
15870: PUSH
15871: LD_INT 46
15873: PUSH
15874: LD_INT 47
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 82
15885: PUSH
15886: LD_INT 83
15888: PUSH
15889: LD_INT 84
15891: PUSH
15892: LD_INT 85
15894: PUSH
15895: LD_INT 86
15897: PUSH
15898: LD_INT 11
15900: PUSH
15901: LD_INT 9
15903: PUSH
15904: LD_INT 20
15906: PUSH
15907: LD_INT 19
15909: PUSH
15910: LD_INT 21
15912: PUSH
15913: LD_INT 24
15915: PUSH
15916: LD_INT 22
15918: PUSH
15919: LD_INT 25
15921: PUSH
15922: LD_INT 28
15924: PUSH
15925: LD_INT 29
15927: PUSH
15928: LD_INT 30
15930: PUSH
15931: LD_INT 31
15933: PUSH
15934: LD_INT 37
15936: PUSH
15937: LD_INT 38
15939: PUSH
15940: LD_INT 32
15942: PUSH
15943: LD_INT 27
15945: PUSH
15946: LD_INT 33
15948: PUSH
15949: LD_INT 69
15951: PUSH
15952: LD_INT 39
15954: PUSH
15955: LD_INT 34
15957: PUSH
15958: LD_INT 40
15960: PUSH
15961: LD_INT 71
15963: PUSH
15964: LD_INT 23
15966: PUSH
15967: LD_INT 44
15969: PUSH
15970: LD_INT 48
15972: PUSH
15973: LD_INT 49
15975: PUSH
15976: LD_INT 50
15978: PUSH
15979: LD_INT 51
15981: PUSH
15982: LD_INT 52
15984: PUSH
15985: LD_INT 53
15987: PUSH
15988: LD_INT 54
15990: PUSH
15991: LD_INT 55
15993: PUSH
15994: LD_INT 56
15996: PUSH
15997: LD_INT 57
15999: PUSH
16000: LD_INT 58
16002: PUSH
16003: LD_INT 59
16005: PUSH
16006: LD_INT 63
16008: PUSH
16009: LD_INT 64
16011: PUSH
16012: LD_INT 65
16014: PUSH
16015: LD_INT 82
16017: PUSH
16018: LD_INT 83
16020: PUSH
16021: LD_INT 84
16023: PUSH
16024: LD_INT 85
16026: PUSH
16027: LD_INT 86
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: ST_TO_ADDR
16085: GO 16088
16087: POP
// if state > - 1 and state < 3 then
16088: LD_VAR 0 3
16092: PUSH
16093: LD_INT 1
16095: NEG
16096: GREATER
16097: PUSH
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 3
16105: LESS
16106: AND
16107: IFFALSE 16164
// for i in result do
16109: LD_ADDR_VAR 0 5
16113: PUSH
16114: LD_VAR 0 4
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16162
// if GetTech ( i , side ) <> state then
16122: LD_VAR 0 5
16126: PPUSH
16127: LD_VAR 0 1
16131: PPUSH
16132: CALL_OW 321
16136: PUSH
16137: LD_VAR 0 3
16141: NONEQUAL
16142: IFFALSE 16160
// result := result diff i ;
16144: LD_ADDR_VAR 0 4
16148: PUSH
16149: LD_VAR 0 4
16153: PUSH
16154: LD_VAR 0 5
16158: DIFF
16159: ST_TO_ADDR
16160: GO 16119
16162: POP
16163: POP
// end ;
16164: LD_VAR 0 4
16168: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16169: LD_INT 0
16171: PPUSH
16172: PPUSH
16173: PPUSH
// result := true ;
16174: LD_ADDR_VAR 0 3
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16182: LD_ADDR_VAR 0 5
16186: PUSH
16187: LD_VAR 0 2
16191: PPUSH
16192: CALL_OW 480
16196: ST_TO_ADDR
// if not tmp then
16197: LD_VAR 0 5
16201: NOT
16202: IFFALSE 16206
// exit ;
16204: GO 16255
// for i in tmp do
16206: LD_ADDR_VAR 0 4
16210: PUSH
16211: LD_VAR 0 5
16215: PUSH
16216: FOR_IN
16217: IFFALSE 16253
// if GetTech ( i , side ) <> state_researched then
16219: LD_VAR 0 4
16223: PPUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 321
16233: PUSH
16234: LD_INT 2
16236: NONEQUAL
16237: IFFALSE 16251
// begin result := false ;
16239: LD_ADDR_VAR 0 3
16243: PUSH
16244: LD_INT 0
16246: ST_TO_ADDR
// exit ;
16247: POP
16248: POP
16249: GO 16255
// end ;
16251: GO 16216
16253: POP
16254: POP
// end ;
16255: LD_VAR 0 3
16259: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16260: LD_INT 0
16262: PPUSH
16263: PPUSH
16264: PPUSH
16265: PPUSH
16266: PPUSH
16267: PPUSH
16268: PPUSH
16269: PPUSH
16270: PPUSH
16271: PPUSH
16272: PPUSH
16273: PPUSH
16274: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16275: LD_VAR 0 1
16279: NOT
16280: PUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 257
16290: PUSH
16291: LD_INT 9
16293: NONEQUAL
16294: OR
16295: IFFALSE 16299
// exit ;
16297: GO 16872
// side := GetSide ( unit ) ;
16299: LD_ADDR_VAR 0 9
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 255
16313: ST_TO_ADDR
// tech_space := tech_spacanom ;
16314: LD_ADDR_VAR 0 12
16318: PUSH
16319: LD_INT 29
16321: ST_TO_ADDR
// tech_time := tech_taurad ;
16322: LD_ADDR_VAR 0 13
16326: PUSH
16327: LD_INT 28
16329: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16330: LD_ADDR_VAR 0 11
16334: PUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 310
16344: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16345: LD_VAR 0 11
16349: PPUSH
16350: CALL_OW 247
16354: PUSH
16355: LD_INT 2
16357: EQUAL
16358: IFFALSE 16362
// exit ;
16360: GO 16872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16362: LD_ADDR_VAR 0 8
16366: PUSH
16367: LD_INT 81
16369: PUSH
16370: LD_VAR 0 9
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: LD_INT 21
16384: PUSH
16385: LD_INT 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PPUSH
16400: CALL_OW 69
16404: ST_TO_ADDR
// if not tmp then
16405: LD_VAR 0 8
16409: NOT
16410: IFFALSE 16414
// exit ;
16412: GO 16872
// if in_unit then
16414: LD_VAR 0 11
16418: IFFALSE 16442
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16420: LD_ADDR_VAR 0 10
16424: PUSH
16425: LD_VAR 0 8
16429: PPUSH
16430: LD_VAR 0 11
16434: PPUSH
16435: CALL_OW 74
16439: ST_TO_ADDR
16440: GO 16462
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16442: LD_ADDR_VAR 0 10
16446: PUSH
16447: LD_VAR 0 8
16451: PPUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 74
16461: ST_TO_ADDR
// if not enemy then
16462: LD_VAR 0 10
16466: NOT
16467: IFFALSE 16471
// exit ;
16469: GO 16872
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16471: LD_VAR 0 11
16475: PUSH
16476: LD_VAR 0 11
16480: PPUSH
16481: LD_VAR 0 10
16485: PPUSH
16486: CALL_OW 296
16490: PUSH
16491: LD_INT 13
16493: GREATER
16494: AND
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: LD_VAR 0 10
16505: PPUSH
16506: CALL_OW 296
16510: PUSH
16511: LD_INT 12
16513: GREATER
16514: OR
16515: IFFALSE 16519
// exit ;
16517: GO 16872
// missile := [ 1 ] ;
16519: LD_ADDR_VAR 0 14
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16530: LD_VAR 0 9
16534: PPUSH
16535: LD_VAR 0 12
16539: PPUSH
16540: CALL_OW 325
16544: IFFALSE 16573
// missile := Replace ( missile , missile + 1 , 2 ) ;
16546: LD_ADDR_VAR 0 14
16550: PUSH
16551: LD_VAR 0 14
16555: PPUSH
16556: LD_VAR 0 14
16560: PUSH
16561: LD_INT 1
16563: PLUS
16564: PPUSH
16565: LD_INT 2
16567: PPUSH
16568: CALL_OW 1
16572: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16573: LD_VAR 0 9
16577: PPUSH
16578: LD_VAR 0 13
16582: PPUSH
16583: CALL_OW 325
16587: PUSH
16588: LD_VAR 0 10
16592: PPUSH
16593: CALL_OW 255
16597: PPUSH
16598: LD_VAR 0 13
16602: PPUSH
16603: CALL_OW 325
16607: NOT
16608: AND
16609: IFFALSE 16638
// missile := Replace ( missile , missile + 1 , 3 ) ;
16611: LD_ADDR_VAR 0 14
16615: PUSH
16616: LD_VAR 0 14
16620: PPUSH
16621: LD_VAR 0 14
16625: PUSH
16626: LD_INT 1
16628: PLUS
16629: PPUSH
16630: LD_INT 3
16632: PPUSH
16633: CALL_OW 1
16637: ST_TO_ADDR
// if missile < 2 then
16638: LD_VAR 0 14
16642: PUSH
16643: LD_INT 2
16645: LESS
16646: IFFALSE 16650
// exit ;
16648: GO 16872
// x := GetX ( enemy ) ;
16650: LD_ADDR_VAR 0 4
16654: PUSH
16655: LD_VAR 0 10
16659: PPUSH
16660: CALL_OW 250
16664: ST_TO_ADDR
// y := GetY ( enemy ) ;
16665: LD_ADDR_VAR 0 5
16669: PUSH
16670: LD_VAR 0 10
16674: PPUSH
16675: CALL_OW 251
16679: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16680: LD_ADDR_VAR 0 6
16684: PUSH
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: NEG
16693: PPUSH
16694: LD_INT 1
16696: PPUSH
16697: CALL_OW 12
16701: PLUS
16702: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16703: LD_ADDR_VAR 0 7
16707: PUSH
16708: LD_VAR 0 5
16712: PUSH
16713: LD_INT 1
16715: NEG
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 12
16724: PLUS
16725: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16726: LD_VAR 0 6
16730: PPUSH
16731: LD_VAR 0 7
16735: PPUSH
16736: CALL_OW 488
16740: NOT
16741: IFFALSE 16763
// begin _x := x ;
16743: LD_ADDR_VAR 0 6
16747: PUSH
16748: LD_VAR 0 4
16752: ST_TO_ADDR
// _y := y ;
16753: LD_ADDR_VAR 0 7
16757: PUSH
16758: LD_VAR 0 5
16762: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16763: LD_ADDR_VAR 0 3
16767: PUSH
16768: LD_INT 1
16770: PPUSH
16771: LD_VAR 0 14
16775: PPUSH
16776: CALL_OW 12
16780: ST_TO_ADDR
// case i of 1 :
16781: LD_VAR 0 3
16785: PUSH
16786: LD_INT 1
16788: DOUBLE
16789: EQUAL
16790: IFTRUE 16794
16792: GO 16811
16794: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16795: LD_VAR 0 1
16799: PPUSH
16800: LD_VAR 0 10
16804: PPUSH
16805: CALL_OW 115
16809: GO 16872
16811: LD_INT 2
16813: DOUBLE
16814: EQUAL
16815: IFTRUE 16819
16817: GO 16841
16819: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_VAR 0 6
16829: PPUSH
16830: LD_VAR 0 7
16834: PPUSH
16835: CALL_OW 153
16839: GO 16872
16841: LD_INT 3
16843: DOUBLE
16844: EQUAL
16845: IFTRUE 16849
16847: GO 16871
16849: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_VAR 0 6
16859: PPUSH
16860: LD_VAR 0 7
16864: PPUSH
16865: CALL_OW 154
16869: GO 16872
16871: POP
// end ;
16872: LD_VAR 0 2
16876: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16877: LD_INT 0
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
// if not unit or not building then
16885: LD_VAR 0 1
16889: NOT
16890: PUSH
16891: LD_VAR 0 2
16895: NOT
16896: OR
16897: IFFALSE 16901
// exit ;
16899: GO 17059
// x := GetX ( building ) ;
16901: LD_ADDR_VAR 0 5
16905: PUSH
16906: LD_VAR 0 2
16910: PPUSH
16911: CALL_OW 250
16915: ST_TO_ADDR
// y := GetY ( building ) ;
16916: LD_ADDR_VAR 0 6
16920: PUSH
16921: LD_VAR 0 2
16925: PPUSH
16926: CALL_OW 251
16930: ST_TO_ADDR
// for i = 0 to 5 do
16931: LD_ADDR_VAR 0 4
16935: PUSH
16936: DOUBLE
16937: LD_INT 0
16939: DEC
16940: ST_TO_ADDR
16941: LD_INT 5
16943: PUSH
16944: FOR_TO
16945: IFFALSE 17057
// begin _x := ShiftX ( x , i , 3 ) ;
16947: LD_ADDR_VAR 0 7
16951: PUSH
16952: LD_VAR 0 5
16956: PPUSH
16957: LD_VAR 0 4
16961: PPUSH
16962: LD_INT 3
16964: PPUSH
16965: CALL_OW 272
16969: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16970: LD_ADDR_VAR 0 8
16974: PUSH
16975: LD_VAR 0 6
16979: PPUSH
16980: LD_VAR 0 4
16984: PPUSH
16985: LD_INT 3
16987: PPUSH
16988: CALL_OW 273
16992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16993: LD_VAR 0 7
16997: PPUSH
16998: LD_VAR 0 8
17002: PPUSH
17003: CALL_OW 488
17007: NOT
17008: IFFALSE 17012
// continue ;
17010: GO 16944
// if HexInfo ( _x , _y ) = 0 then
17012: LD_VAR 0 7
17016: PPUSH
17017: LD_VAR 0 8
17021: PPUSH
17022: CALL_OW 428
17026: PUSH
17027: LD_INT 0
17029: EQUAL
17030: IFFALSE 17055
// begin ComMoveXY ( unit , _x , _y ) ;
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_VAR 0 7
17041: PPUSH
17042: LD_VAR 0 8
17046: PPUSH
17047: CALL_OW 111
// exit ;
17051: POP
17052: POP
17053: GO 17059
// end ; end ;
17055: GO 16944
17057: POP
17058: POP
// end ;
17059: LD_VAR 0 3
17063: RET
// export function ScanBase ( side , base_area ) ; begin
17064: LD_INT 0
17066: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_VAR 0 2
17076: PPUSH
17077: LD_INT 81
17079: PUSH
17080: LD_VAR 0 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 70
17093: ST_TO_ADDR
// end ;
17094: LD_VAR 0 3
17098: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17099: LD_INT 0
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
// result := false ;
17105: LD_ADDR_VAR 0 2
17109: PUSH
17110: LD_INT 0
17112: ST_TO_ADDR
// side := GetSide ( unit ) ;
17113: LD_ADDR_VAR 0 3
17117: PUSH
17118: LD_VAR 0 1
17122: PPUSH
17123: CALL_OW 255
17127: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17128: LD_ADDR_VAR 0 4
17132: PUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 248
17142: ST_TO_ADDR
// case nat of 1 :
17143: LD_VAR 0 4
17147: PUSH
17148: LD_INT 1
17150: DOUBLE
17151: EQUAL
17152: IFTRUE 17156
17154: GO 17167
17156: POP
// tech := tech_lassight ; 2 :
17157: LD_ADDR_VAR 0 5
17161: PUSH
17162: LD_INT 12
17164: ST_TO_ADDR
17165: GO 17206
17167: LD_INT 2
17169: DOUBLE
17170: EQUAL
17171: IFTRUE 17175
17173: GO 17186
17175: POP
// tech := tech_mortar ; 3 :
17176: LD_ADDR_VAR 0 5
17180: PUSH
17181: LD_INT 41
17183: ST_TO_ADDR
17184: GO 17206
17186: LD_INT 3
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17205
17194: POP
// tech := tech_bazooka ; end ;
17195: LD_ADDR_VAR 0 5
17199: PUSH
17200: LD_INT 44
17202: ST_TO_ADDR
17203: GO 17206
17205: POP
// if Researched ( side , tech ) then
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_VAR 0 5
17215: PPUSH
17216: CALL_OW 325
17220: IFFALSE 17247
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_INT 5
17229: PUSH
17230: LD_INT 8
17232: PUSH
17233: LD_INT 9
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: LD_VAR 0 4
17245: ARRAY
17246: ST_TO_ADDR
// end ;
17247: LD_VAR 0 2
17251: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
17256: PPUSH
// if not mines then
17257: LD_VAR 0 2
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 17410
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: LD_INT 81
17273: PUSH
17274: LD_VAR 0 1
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: LD_INT 21
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PPUSH
17304: CALL_OW 69
17308: ST_TO_ADDR
// for i in mines do
17309: LD_ADDR_VAR 0 4
17313: PUSH
17314: LD_VAR 0 2
17318: PUSH
17319: FOR_IN
17320: IFFALSE 17408
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17322: LD_VAR 0 4
17326: PUSH
17327: LD_INT 1
17329: ARRAY
17330: PPUSH
17331: LD_VAR 0 4
17335: PUSH
17336: LD_INT 2
17338: ARRAY
17339: PPUSH
17340: CALL_OW 458
17344: NOT
17345: IFFALSE 17349
// continue ;
17347: GO 17319
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17349: LD_VAR 0 4
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: PPUSH
17358: LD_VAR 0 4
17362: PUSH
17363: LD_INT 2
17365: ARRAY
17366: PPUSH
17367: CALL_OW 428
17371: PUSH
17372: LD_VAR 0 5
17376: IN
17377: IFFALSE 17406
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17379: LD_VAR 0 4
17383: PUSH
17384: LD_INT 1
17386: ARRAY
17387: PPUSH
17388: LD_VAR 0 4
17392: PUSH
17393: LD_INT 2
17395: ARRAY
17396: PPUSH
17397: LD_VAR 0 1
17401: PPUSH
17402: CALL_OW 456
// end ;
17406: GO 17319
17408: POP
17409: POP
// end ;
17410: LD_VAR 0 3
17414: RET
// export function Count ( array ) ; var i ; begin
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
// result := 0 ;
17419: LD_ADDR_VAR 0 2
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// for i in array do
17427: LD_ADDR_VAR 0 3
17431: PUSH
17432: LD_VAR 0 1
17436: PUSH
17437: FOR_IN
17438: IFFALSE 17462
// if i then
17440: LD_VAR 0 3
17444: IFFALSE 17460
// result := result + 1 ;
17446: LD_ADDR_VAR 0 2
17450: PUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_INT 1
17458: PLUS
17459: ST_TO_ADDR
17460: GO 17437
17462: POP
17463: POP
// end ;
17464: LD_VAR 0 2
17468: RET
// export function IsEmpty ( building ) ; begin
17469: LD_INT 0
17471: PPUSH
// if not building then
17472: LD_VAR 0 1
17476: NOT
17477: IFFALSE 17481
// exit ;
17479: GO 17524
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 22
17493: PUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 255
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 58
17510: PUSH
17511: EMPTY
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: IN
17523: ST_TO_ADDR
// end ;
17524: LD_VAR 0 2
17528: RET
// export function IsNotFull ( building ) ; var places ; begin
17529: LD_INT 0
17531: PPUSH
17532: PPUSH
// if not building then
17533: LD_VAR 0 1
17537: NOT
17538: IFFALSE 17542
// exit ;
17540: GO 17713
// result := false ;
17542: LD_ADDR_VAR 0 2
17546: PUSH
17547: LD_INT 0
17549: ST_TO_ADDR
// places := 0 ;
17550: LD_ADDR_VAR 0 3
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17558: LD_VAR 0 1
17562: PPUSH
17563: CALL_OW 266
17567: PUSH
17568: LD_INT 0
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17630
17574: LD_INT 1
17576: DOUBLE
17577: EQUAL
17578: IFTRUE 17630
17580: LD_INT 6
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17630
17586: LD_INT 7
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17630
17592: LD_INT 8
17594: DOUBLE
17595: EQUAL
17596: IFTRUE 17630
17598: LD_INT 4
17600: DOUBLE
17601: EQUAL
17602: IFTRUE 17630
17604: LD_INT 5
17606: DOUBLE
17607: EQUAL
17608: IFTRUE 17630
17610: LD_INT 2
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17630
17616: LD_INT 3
17618: DOUBLE
17619: EQUAL
17620: IFTRUE 17630
17622: LD_INT 35
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17641
17630: POP
// places := 6 ; b_bunker , b_breastwork :
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_INT 6
17638: ST_TO_ADDR
17639: GO 17686
17641: LD_INT 32
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17655
17647: LD_INT 31
17649: DOUBLE
17650: EQUAL
17651: IFTRUE 17655
17653: GO 17666
17655: POP
// places := 1 ; b_control_tower :
17656: LD_ADDR_VAR 0 3
17660: PUSH
17661: LD_INT 1
17663: ST_TO_ADDR
17664: GO 17686
17666: LD_INT 36
17668: DOUBLE
17669: EQUAL
17670: IFTRUE 17674
17672: GO 17685
17674: POP
// places := 3 ; end ;
17675: LD_ADDR_VAR 0 3
17679: PUSH
17680: LD_INT 3
17682: ST_TO_ADDR
17683: GO 17686
17685: POP
// if places then
17686: LD_VAR 0 3
17690: IFFALSE 17713
// result := UnitsInside ( building ) < places ;
17692: LD_ADDR_VAR 0 2
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 313
17706: PUSH
17707: LD_VAR 0 3
17711: LESS
17712: ST_TO_ADDR
// end ;
17713: LD_VAR 0 2
17717: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
// tmp := [ ] ;
17724: LD_ADDR_VAR 0 3
17728: PUSH
17729: EMPTY
17730: ST_TO_ADDR
// list := [ ] ;
17731: LD_ADDR_VAR 0 5
17735: PUSH
17736: EMPTY
17737: ST_TO_ADDR
// for i = 16 to 25 do
17738: LD_ADDR_VAR 0 4
17742: PUSH
17743: DOUBLE
17744: LD_INT 16
17746: DEC
17747: ST_TO_ADDR
17748: LD_INT 25
17750: PUSH
17751: FOR_TO
17752: IFFALSE 17825
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_VAR 0 3
17763: PUSH
17764: LD_INT 22
17766: PUSH
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 255
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 91
17783: PUSH
17784: LD_VAR 0 1
17788: PUSH
17789: LD_INT 6
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_VAR 0 4
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: PPUSH
17817: CALL_OW 69
17821: ADD
17822: ST_TO_ADDR
17823: GO 17751
17825: POP
17826: POP
// for i = 1 to tmp do
17827: LD_ADDR_VAR 0 4
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_VAR 0 3
17841: PUSH
17842: FOR_TO
17843: IFFALSE 17931
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17845: LD_ADDR_VAR 0 5
17849: PUSH
17850: LD_VAR 0 5
17854: PUSH
17855: LD_VAR 0 3
17859: PUSH
17860: LD_VAR 0 4
17864: ARRAY
17865: PPUSH
17866: CALL_OW 266
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_VAR 0 4
17880: ARRAY
17881: PPUSH
17882: CALL_OW 250
17886: PUSH
17887: LD_VAR 0 3
17891: PUSH
17892: LD_VAR 0 4
17896: ARRAY
17897: PPUSH
17898: CALL_OW 251
17902: PUSH
17903: LD_VAR 0 3
17907: PUSH
17908: LD_VAR 0 4
17912: ARRAY
17913: PPUSH
17914: CALL_OW 254
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: ADD
17928: ST_TO_ADDR
17929: GO 17842
17931: POP
17932: POP
// result := list ;
17933: LD_ADDR_VAR 0 2
17937: PUSH
17938: LD_VAR 0 5
17942: ST_TO_ADDR
// end ;
17943: LD_VAR 0 2
17947: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17948: LD_INT 0
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
17954: PPUSH
17955: PPUSH
17956: PPUSH
// if not factory then
17957: LD_VAR 0 1
17961: NOT
17962: IFFALSE 17966
// exit ;
17964: GO 18559
// if control = control_apeman then
17966: LD_VAR 0 4
17970: PUSH
17971: LD_INT 5
17973: EQUAL
17974: IFFALSE 18083
// begin tmp := UnitsInside ( factory ) ;
17976: LD_ADDR_VAR 0 8
17980: PUSH
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL_OW 313
17990: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17991: LD_VAR 0 8
17995: PPUSH
17996: LD_INT 25
17998: PUSH
17999: LD_INT 12
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PPUSH
18006: CALL_OW 72
18010: NOT
18011: IFFALSE 18021
// control := control_manual ;
18013: LD_ADDR_VAR 0 4
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18021: LD_ADDR_VAR 0 8
18025: PUSH
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL 17718 0 1
18035: ST_TO_ADDR
// if tmp then
18036: LD_VAR 0 8
18040: IFFALSE 18083
// begin for i in tmp do
18042: LD_ADDR_VAR 0 7
18046: PUSH
18047: LD_VAR 0 8
18051: PUSH
18052: FOR_IN
18053: IFFALSE 18081
// if i [ 1 ] = b_ext_radio then
18055: LD_VAR 0 7
18059: PUSH
18060: LD_INT 1
18062: ARRAY
18063: PUSH
18064: LD_INT 22
18066: EQUAL
18067: IFFALSE 18079
// begin control := control_remote ;
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: LD_INT 2
18076: ST_TO_ADDR
// break ;
18077: GO 18081
// end ;
18079: GO 18052
18081: POP
18082: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18083: LD_VAR 0 1
18087: PPUSH
18088: LD_VAR 0 2
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_VAR 0 4
18102: PPUSH
18103: LD_VAR 0 5
18107: PPUSH
18108: CALL_OW 448
18112: IFFALSE 18147
// begin result := [ chassis , engine , control , weapon ] ;
18114: LD_ADDR_VAR 0 6
18118: PUSH
18119: LD_VAR 0 2
18123: PUSH
18124: LD_VAR 0 3
18128: PUSH
18129: LD_VAR 0 4
18133: PUSH
18134: LD_VAR 0 5
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: ST_TO_ADDR
// exit ;
18145: GO 18559
// end ; _chassis := AvailableChassisList ( factory ) ;
18147: LD_ADDR_VAR 0 9
18151: PUSH
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 475
18161: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18162: LD_ADDR_VAR 0 11
18166: PUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 476
18176: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18177: LD_ADDR_VAR 0 12
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 477
18191: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18192: LD_ADDR_VAR 0 10
18196: PUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 478
18206: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18207: LD_VAR 0 9
18211: NOT
18212: PUSH
18213: LD_VAR 0 11
18217: NOT
18218: OR
18219: PUSH
18220: LD_VAR 0 12
18224: NOT
18225: OR
18226: PUSH
18227: LD_VAR 0 10
18231: NOT
18232: OR
18233: IFFALSE 18268
// begin result := [ chassis , engine , control , weapon ] ;
18235: LD_ADDR_VAR 0 6
18239: PUSH
18240: LD_VAR 0 2
18244: PUSH
18245: LD_VAR 0 3
18249: PUSH
18250: LD_VAR 0 4
18254: PUSH
18255: LD_VAR 0 5
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: ST_TO_ADDR
// exit ;
18266: GO 18559
// end ; if not chassis in _chassis then
18268: LD_VAR 0 2
18272: PUSH
18273: LD_VAR 0 9
18277: IN
18278: NOT
18279: IFFALSE 18305
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_VAR 0 9
18290: PUSH
18291: LD_INT 1
18293: PPUSH
18294: LD_VAR 0 9
18298: PPUSH
18299: CALL_OW 12
18303: ARRAY
18304: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18305: LD_VAR 0 2
18309: PPUSH
18310: LD_VAR 0 3
18314: PPUSH
18315: CALL 18564 0 2
18319: NOT
18320: IFFALSE 18379
// repeat engine := _engine [ 1 ] ;
18322: LD_ADDR_VAR 0 3
18326: PUSH
18327: LD_VAR 0 11
18331: PUSH
18332: LD_INT 1
18334: ARRAY
18335: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18336: LD_ADDR_VAR 0 11
18340: PUSH
18341: LD_VAR 0 11
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: CALL_OW 3
18353: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_VAR 0 3
18363: PPUSH
18364: CALL 18564 0 2
18368: PUSH
18369: LD_VAR 0 11
18373: PUSH
18374: EMPTY
18375: EQUAL
18376: OR
18377: IFFALSE 18322
// if not control in _control then
18379: LD_VAR 0 4
18383: PUSH
18384: LD_VAR 0 12
18388: IN
18389: NOT
18390: IFFALSE 18416
// control := _control [ rand ( 1 , _control ) ] ;
18392: LD_ADDR_VAR 0 4
18396: PUSH
18397: LD_VAR 0 12
18401: PUSH
18402: LD_INT 1
18404: PPUSH
18405: LD_VAR 0 12
18409: PPUSH
18410: CALL_OW 12
18414: ARRAY
18415: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18416: LD_VAR 0 2
18420: PPUSH
18421: LD_VAR 0 5
18425: PPUSH
18426: CALL 18784 0 2
18430: NOT
18431: IFFALSE 18490
// repeat weapon := _weapon [ 1 ] ;
18433: LD_ADDR_VAR 0 5
18437: PUSH
18438: LD_VAR 0 10
18442: PUSH
18443: LD_INT 1
18445: ARRAY
18446: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18447: LD_ADDR_VAR 0 10
18451: PUSH
18452: LD_VAR 0 10
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 3
18464: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18465: LD_VAR 0 2
18469: PPUSH
18470: LD_VAR 0 5
18474: PPUSH
18475: CALL 18784 0 2
18479: PUSH
18480: LD_VAR 0 10
18484: PUSH
18485: EMPTY
18486: EQUAL
18487: OR
18488: IFFALSE 18433
// result := [ ] ;
18490: LD_ADDR_VAR 0 6
18494: PUSH
18495: EMPTY
18496: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18497: LD_VAR 0 1
18501: PPUSH
18502: LD_VAR 0 2
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_VAR 0 4
18516: PPUSH
18517: LD_VAR 0 5
18521: PPUSH
18522: CALL_OW 448
18526: IFFALSE 18559
// result := [ chassis , engine , control , weapon ] ;
18528: LD_ADDR_VAR 0 6
18532: PUSH
18533: LD_VAR 0 2
18537: PUSH
18538: LD_VAR 0 3
18542: PUSH
18543: LD_VAR 0 4
18547: PUSH
18548: LD_VAR 0 5
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: ST_TO_ADDR
// end ;
18559: LD_VAR 0 6
18563: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18564: LD_INT 0
18566: PPUSH
// if not chassis or not engine then
18567: LD_VAR 0 1
18571: NOT
18572: PUSH
18573: LD_VAR 0 2
18577: NOT
18578: OR
18579: IFFALSE 18583
// exit ;
18581: GO 18779
// case engine of engine_solar :
18583: LD_VAR 0 2
18587: PUSH
18588: LD_INT 2
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18634
18596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18597: LD_ADDR_VAR 0 3
18601: PUSH
18602: LD_INT 11
18604: PUSH
18605: LD_INT 12
18607: PUSH
18608: LD_INT 13
18610: PUSH
18611: LD_INT 14
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: ST_TO_ADDR
18632: GO 18763
18634: LD_INT 1
18636: DOUBLE
18637: EQUAL
18638: IFTRUE 18642
18640: GO 18704
18642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_INT 11
18650: PUSH
18651: LD_INT 12
18653: PUSH
18654: LD_INT 13
18656: PUSH
18657: LD_INT 14
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: LD_INT 4
18671: PUSH
18672: LD_INT 5
18674: PUSH
18675: LD_INT 21
18677: PUSH
18678: LD_INT 23
18680: PUSH
18681: LD_INT 22
18683: PUSH
18684: LD_INT 24
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: ST_TO_ADDR
18702: GO 18763
18704: LD_INT 3
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18762
18712: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18713: LD_ADDR_VAR 0 3
18717: PUSH
18718: LD_INT 13
18720: PUSH
18721: LD_INT 14
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: LD_INT 4
18732: PUSH
18733: LD_INT 5
18735: PUSH
18736: LD_INT 21
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 23
18744: PUSH
18745: LD_INT 24
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: ST_TO_ADDR
18760: GO 18763
18762: POP
// result := ( chassis in result ) ;
18763: LD_ADDR_VAR 0 3
18767: PUSH
18768: LD_VAR 0 1
18772: PUSH
18773: LD_VAR 0 3
18777: IN
18778: ST_TO_ADDR
// end ;
18779: LD_VAR 0 3
18783: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18784: LD_INT 0
18786: PPUSH
// if not chassis or not weapon then
18787: LD_VAR 0 1
18791: NOT
18792: PUSH
18793: LD_VAR 0 2
18797: NOT
18798: OR
18799: IFFALSE 18803
// exit ;
18801: GO 19863
// case weapon of us_machine_gun :
18803: LD_VAR 0 2
18807: PUSH
18808: LD_INT 2
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18846
18816: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18817: LD_ADDR_VAR 0 3
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: LD_INT 4
18833: PUSH
18834: LD_INT 5
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: ST_TO_ADDR
18844: GO 19847
18846: LD_INT 3
18848: DOUBLE
18849: EQUAL
18850: IFTRUE 18854
18852: GO 18884
18854: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: LD_INT 3
18868: PUSH
18869: LD_INT 4
18871: PUSH
18872: LD_INT 5
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: ST_TO_ADDR
18882: GO 19847
18884: LD_INT 11
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18922
18892: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 4
18909: PUSH
18910: LD_INT 5
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: ST_TO_ADDR
18920: GO 19847
18922: LD_INT 4
18924: DOUBLE
18925: EQUAL
18926: IFTRUE 18930
18928: GO 18956
18930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18931: LD_ADDR_VAR 0 3
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: LD_INT 4
18944: PUSH
18945: LD_INT 5
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: ST_TO_ADDR
18954: GO 19847
18956: LD_INT 5
18958: DOUBLE
18959: EQUAL
18960: IFTRUE 18964
18962: GO 18990
18964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18965: LD_ADDR_VAR 0 3
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: LD_INT 4
18978: PUSH
18979: LD_INT 5
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: ST_TO_ADDR
18988: GO 19847
18990: LD_INT 9
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19024
18998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: LD_INT 4
19012: PUSH
19013: LD_INT 5
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: ST_TO_ADDR
19022: GO 19847
19024: LD_INT 7
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19058
19032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19033: LD_ADDR_VAR 0 3
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: LD_INT 4
19046: PUSH
19047: LD_INT 5
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: ST_TO_ADDR
19056: GO 19847
19058: LD_INT 12
19060: DOUBLE
19061: EQUAL
19062: IFTRUE 19066
19064: GO 19092
19066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19067: LD_ADDR_VAR 0 3
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 3
19077: PUSH
19078: LD_INT 4
19080: PUSH
19081: LD_INT 5
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 19847
19092: LD_INT 13
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19126
19100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 3
19111: PUSH
19112: LD_INT 4
19114: PUSH
19115: LD_INT 5
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: ST_TO_ADDR
19124: GO 19847
19126: LD_INT 14
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19152
19134: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_INT 4
19142: PUSH
19143: LD_INT 5
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: ST_TO_ADDR
19150: GO 19847
19152: LD_INT 6
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19178
19160: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19161: LD_ADDR_VAR 0 3
19165: PUSH
19166: LD_INT 4
19168: PUSH
19169: LD_INT 5
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: ST_TO_ADDR
19176: GO 19847
19178: LD_INT 10
19180: DOUBLE
19181: EQUAL
19182: IFTRUE 19186
19184: GO 19204
19186: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19187: LD_ADDR_VAR 0 3
19191: PUSH
19192: LD_INT 4
19194: PUSH
19195: LD_INT 5
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: ST_TO_ADDR
19202: GO 19847
19204: LD_INT 22
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19238
19212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19213: LD_ADDR_VAR 0 3
19217: PUSH
19218: LD_INT 11
19220: PUSH
19221: LD_INT 12
19223: PUSH
19224: LD_INT 13
19226: PUSH
19227: LD_INT 14
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: ST_TO_ADDR
19236: GO 19847
19238: LD_INT 23
19240: DOUBLE
19241: EQUAL
19242: IFTRUE 19246
19244: GO 19272
19246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_INT 11
19254: PUSH
19255: LD_INT 12
19257: PUSH
19258: LD_INT 13
19260: PUSH
19261: LD_INT 14
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: ST_TO_ADDR
19270: GO 19847
19272: LD_INT 24
19274: DOUBLE
19275: EQUAL
19276: IFTRUE 19280
19278: GO 19306
19280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: LD_INT 11
19288: PUSH
19289: LD_INT 12
19291: PUSH
19292: LD_INT 13
19294: PUSH
19295: LD_INT 14
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: ST_TO_ADDR
19304: GO 19847
19306: LD_INT 30
19308: DOUBLE
19309: EQUAL
19310: IFTRUE 19314
19312: GO 19340
19314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19315: LD_ADDR_VAR 0 3
19319: PUSH
19320: LD_INT 11
19322: PUSH
19323: LD_INT 12
19325: PUSH
19326: LD_INT 13
19328: PUSH
19329: LD_INT 14
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
19338: GO 19847
19340: LD_INT 25
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19366
19348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 13
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19847
19366: LD_INT 27
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19392
19374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 13
19382: PUSH
19383: LD_INT 14
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 19847
19392: LD_INT 92
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19426
19400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 11
19408: PUSH
19409: LD_INT 12
19411: PUSH
19412: LD_INT 13
19414: PUSH
19415: LD_INT 14
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: ST_TO_ADDR
19424: GO 19847
19426: LD_INT 28
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19452
19434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19435: LD_ADDR_VAR 0 3
19439: PUSH
19440: LD_INT 13
19442: PUSH
19443: LD_INT 14
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 19847
19452: LD_INT 29
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19478
19460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 13
19468: PUSH
19469: LD_INT 14
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: ST_TO_ADDR
19476: GO 19847
19478: LD_INT 31
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19504
19486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: LD_INT 13
19494: PUSH
19495: LD_INT 14
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: ST_TO_ADDR
19502: GO 19847
19504: LD_INT 26
19506: DOUBLE
19507: EQUAL
19508: IFTRUE 19512
19510: GO 19530
19512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19513: LD_ADDR_VAR 0 3
19517: PUSH
19518: LD_INT 13
19520: PUSH
19521: LD_INT 14
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: ST_TO_ADDR
19528: GO 19847
19530: LD_INT 42
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19564
19538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19539: LD_ADDR_VAR 0 3
19543: PUSH
19544: LD_INT 21
19546: PUSH
19547: LD_INT 22
19549: PUSH
19550: LD_INT 23
19552: PUSH
19553: LD_INT 24
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: ST_TO_ADDR
19562: GO 19847
19564: LD_INT 43
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19598
19572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: LD_INT 21
19580: PUSH
19581: LD_INT 22
19583: PUSH
19584: LD_INT 23
19586: PUSH
19587: LD_INT 24
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: ST_TO_ADDR
19596: GO 19847
19598: LD_INT 44
19600: DOUBLE
19601: EQUAL
19602: IFTRUE 19606
19604: GO 19632
19606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_INT 23
19620: PUSH
19621: LD_INT 24
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 19847
19632: LD_INT 45
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19666
19640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 21
19648: PUSH
19649: LD_INT 22
19651: PUSH
19652: LD_INT 23
19654: PUSH
19655: LD_INT 24
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: ST_TO_ADDR
19664: GO 19847
19666: LD_INT 49
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19700
19674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19675: LD_ADDR_VAR 0 3
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 23
19688: PUSH
19689: LD_INT 24
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: ST_TO_ADDR
19698: GO 19847
19700: LD_INT 51
19702: DOUBLE
19703: EQUAL
19704: IFTRUE 19708
19706: GO 19734
19708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19709: LD_ADDR_VAR 0 3
19713: PUSH
19714: LD_INT 21
19716: PUSH
19717: LD_INT 22
19719: PUSH
19720: LD_INT 23
19722: PUSH
19723: LD_INT 24
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: ST_TO_ADDR
19732: GO 19847
19734: LD_INT 52
19736: DOUBLE
19737: EQUAL
19738: IFTRUE 19742
19740: GO 19768
19742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: LD_INT 21
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_INT 23
19756: PUSH
19757: LD_INT 24
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: ST_TO_ADDR
19766: GO 19847
19768: LD_INT 53
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19794
19776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19777: LD_ADDR_VAR 0 3
19781: PUSH
19782: LD_INT 23
19784: PUSH
19785: LD_INT 24
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: ST_TO_ADDR
19792: GO 19847
19794: LD_INT 46
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19820
19802: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 23
19810: PUSH
19811: LD_INT 24
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: ST_TO_ADDR
19818: GO 19847
19820: LD_INT 47
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19846
19828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19829: LD_ADDR_VAR 0 3
19833: PUSH
19834: LD_INT 23
19836: PUSH
19837: LD_INT 24
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: ST_TO_ADDR
19844: GO 19847
19846: POP
// result := ( chassis in result ) ;
19847: LD_ADDR_VAR 0 3
19851: PUSH
19852: LD_VAR 0 1
19856: PUSH
19857: LD_VAR 0 3
19861: IN
19862: ST_TO_ADDR
// end ;
19863: LD_VAR 0 3
19867: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19868: LD_INT 0
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
19874: PPUSH
19875: PPUSH
19876: PPUSH
// result := array ;
19877: LD_ADDR_VAR 0 5
19881: PUSH
19882: LD_VAR 0 1
19886: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19887: LD_VAR 0 1
19891: NOT
19892: PUSH
19893: LD_VAR 0 2
19897: NOT
19898: OR
19899: PUSH
19900: LD_VAR 0 3
19904: NOT
19905: OR
19906: PUSH
19907: LD_VAR 0 2
19911: PUSH
19912: LD_VAR 0 1
19916: GREATER
19917: OR
19918: PUSH
19919: LD_VAR 0 3
19923: PUSH
19924: LD_VAR 0 1
19928: GREATER
19929: OR
19930: IFFALSE 19934
// exit ;
19932: GO 20230
// if direction then
19934: LD_VAR 0 4
19938: IFFALSE 20002
// begin d := 1 ;
19940: LD_ADDR_VAR 0 9
19944: PUSH
19945: LD_INT 1
19947: ST_TO_ADDR
// if i_from > i_to then
19948: LD_VAR 0 2
19952: PUSH
19953: LD_VAR 0 3
19957: GREATER
19958: IFFALSE 19984
// length := ( array - i_from ) + i_to else
19960: LD_ADDR_VAR 0 11
19964: PUSH
19965: LD_VAR 0 1
19969: PUSH
19970: LD_VAR 0 2
19974: MINUS
19975: PUSH
19976: LD_VAR 0 3
19980: PLUS
19981: ST_TO_ADDR
19982: GO 20000
// length := i_to - i_from ;
19984: LD_ADDR_VAR 0 11
19988: PUSH
19989: LD_VAR 0 3
19993: PUSH
19994: LD_VAR 0 2
19998: MINUS
19999: ST_TO_ADDR
// end else
20000: GO 20063
// begin d := - 1 ;
20002: LD_ADDR_VAR 0 9
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: ST_TO_ADDR
// if i_from > i_to then
20011: LD_VAR 0 2
20015: PUSH
20016: LD_VAR 0 3
20020: GREATER
20021: IFFALSE 20041
// length := i_from - i_to else
20023: LD_ADDR_VAR 0 11
20027: PUSH
20028: LD_VAR 0 2
20032: PUSH
20033: LD_VAR 0 3
20037: MINUS
20038: ST_TO_ADDR
20039: GO 20063
// length := ( array - i_to ) + i_from ;
20041: LD_ADDR_VAR 0 11
20045: PUSH
20046: LD_VAR 0 1
20050: PUSH
20051: LD_VAR 0 3
20055: MINUS
20056: PUSH
20057: LD_VAR 0 2
20061: PLUS
20062: ST_TO_ADDR
// end ; if not length then
20063: LD_VAR 0 11
20067: NOT
20068: IFFALSE 20072
// exit ;
20070: GO 20230
// tmp := array ;
20072: LD_ADDR_VAR 0 10
20076: PUSH
20077: LD_VAR 0 1
20081: ST_TO_ADDR
// for i = 1 to length do
20082: LD_ADDR_VAR 0 6
20086: PUSH
20087: DOUBLE
20088: LD_INT 1
20090: DEC
20091: ST_TO_ADDR
20092: LD_VAR 0 11
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20218
// begin for j = 1 to array do
20100: LD_ADDR_VAR 0 7
20104: PUSH
20105: DOUBLE
20106: LD_INT 1
20108: DEC
20109: ST_TO_ADDR
20110: LD_VAR 0 1
20114: PUSH
20115: FOR_TO
20116: IFFALSE 20204
// begin k := j + d ;
20118: LD_ADDR_VAR 0 8
20122: PUSH
20123: LD_VAR 0 7
20127: PUSH
20128: LD_VAR 0 9
20132: PLUS
20133: ST_TO_ADDR
// if k > array then
20134: LD_VAR 0 8
20138: PUSH
20139: LD_VAR 0 1
20143: GREATER
20144: IFFALSE 20154
// k := 1 ;
20146: LD_ADDR_VAR 0 8
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// if not k then
20154: LD_VAR 0 8
20158: NOT
20159: IFFALSE 20171
// k := array ;
20161: LD_ADDR_VAR 0 8
20165: PUSH
20166: LD_VAR 0 1
20170: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20171: LD_ADDR_VAR 0 10
20175: PUSH
20176: LD_VAR 0 10
20180: PPUSH
20181: LD_VAR 0 8
20185: PPUSH
20186: LD_VAR 0 1
20190: PUSH
20191: LD_VAR 0 7
20195: ARRAY
20196: PPUSH
20197: CALL_OW 1
20201: ST_TO_ADDR
// end ;
20202: GO 20115
20204: POP
20205: POP
// array := tmp ;
20206: LD_ADDR_VAR 0 1
20210: PUSH
20211: LD_VAR 0 10
20215: ST_TO_ADDR
// end ;
20216: GO 20097
20218: POP
20219: POP
// result := array ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_VAR 0 1
20229: ST_TO_ADDR
// end ;
20230: LD_VAR 0 5
20234: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20235: LD_INT 0
20237: PPUSH
20238: PPUSH
// result := 0 ;
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_INT 0
20246: ST_TO_ADDR
// if not array or not value in array then
20247: LD_VAR 0 1
20251: NOT
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: LD_VAR 0 1
20262: IN
20263: NOT
20264: OR
20265: IFFALSE 20269
// exit ;
20267: GO 20323
// for i = 1 to array do
20269: LD_ADDR_VAR 0 4
20273: PUSH
20274: DOUBLE
20275: LD_INT 1
20277: DEC
20278: ST_TO_ADDR
20279: LD_VAR 0 1
20283: PUSH
20284: FOR_TO
20285: IFFALSE 20321
// if value = array [ i ] then
20287: LD_VAR 0 2
20291: PUSH
20292: LD_VAR 0 1
20296: PUSH
20297: LD_VAR 0 4
20301: ARRAY
20302: EQUAL
20303: IFFALSE 20319
// begin result := i ;
20305: LD_ADDR_VAR 0 3
20309: PUSH
20310: LD_VAR 0 4
20314: ST_TO_ADDR
// exit ;
20315: POP
20316: POP
20317: GO 20323
// end ;
20319: GO 20284
20321: POP
20322: POP
// end ;
20323: LD_VAR 0 3
20327: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20328: LD_INT 0
20330: PPUSH
// vc_chassis := chassis ;
20331: LD_ADDR_OWVAR 37
20335: PUSH
20336: LD_VAR 0 1
20340: ST_TO_ADDR
// vc_engine := engine ;
20341: LD_ADDR_OWVAR 39
20345: PUSH
20346: LD_VAR 0 2
20350: ST_TO_ADDR
// vc_control := control ;
20351: LD_ADDR_OWVAR 38
20355: PUSH
20356: LD_VAR 0 3
20360: ST_TO_ADDR
// vc_weapon := weapon ;
20361: LD_ADDR_OWVAR 40
20365: PUSH
20366: LD_VAR 0 4
20370: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20371: LD_ADDR_OWVAR 41
20375: PUSH
20376: LD_VAR 0 5
20380: ST_TO_ADDR
// end ;
20381: LD_VAR 0 6
20385: RET
// export function WantPlant ( unit ) ; var task ; begin
20386: LD_INT 0
20388: PPUSH
20389: PPUSH
// result := false ;
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20398: LD_ADDR_VAR 0 3
20402: PUSH
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 437
20412: ST_TO_ADDR
// if task then
20413: LD_VAR 0 3
20417: IFFALSE 20445
// if task [ 1 ] [ 1 ] = p then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PUSH
20428: LD_INT 1
20430: ARRAY
20431: PUSH
20432: LD_STRING p
20434: EQUAL
20435: IFFALSE 20445
// result := true ;
20437: LD_ADDR_VAR 0 2
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// end ;
20445: LD_VAR 0 2
20449: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20450: LD_INT 0
20452: PPUSH
20453: PPUSH
20454: PPUSH
20455: PPUSH
// if pos < 1 then
20456: LD_VAR 0 2
20460: PUSH
20461: LD_INT 1
20463: LESS
20464: IFFALSE 20468
// exit ;
20466: GO 20771
// if pos = 1 then
20468: LD_VAR 0 2
20472: PUSH
20473: LD_INT 1
20475: EQUAL
20476: IFFALSE 20509
// result := Replace ( arr , pos [ 1 ] , value ) else
20478: LD_ADDR_VAR 0 4
20482: PUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: LD_VAR 0 2
20492: PUSH
20493: LD_INT 1
20495: ARRAY
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 1
20506: ST_TO_ADDR
20507: GO 20771
// begin tmp := arr ;
20509: LD_ADDR_VAR 0 6
20513: PUSH
20514: LD_VAR 0 1
20518: ST_TO_ADDR
// s_arr := [ tmp ] ;
20519: LD_ADDR_VAR 0 7
20523: PUSH
20524: LD_VAR 0 6
20528: PUSH
20529: EMPTY
20530: LIST
20531: ST_TO_ADDR
// for i = 1 to pos - 1 do
20532: LD_ADDR_VAR 0 5
20536: PUSH
20537: DOUBLE
20538: LD_INT 1
20540: DEC
20541: ST_TO_ADDR
20542: LD_VAR 0 2
20546: PUSH
20547: LD_INT 1
20549: MINUS
20550: PUSH
20551: FOR_TO
20552: IFFALSE 20597
// begin tmp := tmp [ pos [ i ] ] ;
20554: LD_ADDR_VAR 0 6
20558: PUSH
20559: LD_VAR 0 6
20563: PUSH
20564: LD_VAR 0 2
20568: PUSH
20569: LD_VAR 0 5
20573: ARRAY
20574: ARRAY
20575: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20576: LD_ADDR_VAR 0 7
20580: PUSH
20581: LD_VAR 0 7
20585: PUSH
20586: LD_VAR 0 6
20590: PUSH
20591: EMPTY
20592: LIST
20593: ADD
20594: ST_TO_ADDR
// end ;
20595: GO 20551
20597: POP
20598: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20599: LD_ADDR_VAR 0 6
20603: PUSH
20604: LD_VAR 0 6
20608: PPUSH
20609: LD_VAR 0 2
20613: PUSH
20614: LD_VAR 0 2
20618: ARRAY
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: CALL_OW 1
20629: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20630: LD_ADDR_VAR 0 7
20634: PUSH
20635: LD_VAR 0 7
20639: PPUSH
20640: LD_VAR 0 7
20644: PPUSH
20645: LD_VAR 0 6
20649: PPUSH
20650: CALL_OW 1
20654: ST_TO_ADDR
// for i = s_arr downto 2 do
20655: LD_ADDR_VAR 0 5
20659: PUSH
20660: DOUBLE
20661: LD_VAR 0 7
20665: INC
20666: ST_TO_ADDR
20667: LD_INT 2
20669: PUSH
20670: FOR_DOWNTO
20671: IFFALSE 20755
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20673: LD_ADDR_VAR 0 6
20677: PUSH
20678: LD_VAR 0 7
20682: PUSH
20683: LD_VAR 0 5
20687: PUSH
20688: LD_INT 1
20690: MINUS
20691: ARRAY
20692: PPUSH
20693: LD_VAR 0 2
20697: PUSH
20698: LD_VAR 0 5
20702: PUSH
20703: LD_INT 1
20705: MINUS
20706: ARRAY
20707: PPUSH
20708: LD_VAR 0 7
20712: PUSH
20713: LD_VAR 0 5
20717: ARRAY
20718: PPUSH
20719: CALL_OW 1
20723: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20724: LD_ADDR_VAR 0 7
20728: PUSH
20729: LD_VAR 0 7
20733: PPUSH
20734: LD_VAR 0 5
20738: PUSH
20739: LD_INT 1
20741: MINUS
20742: PPUSH
20743: LD_VAR 0 6
20747: PPUSH
20748: CALL_OW 1
20752: ST_TO_ADDR
// end ;
20753: GO 20670
20755: POP
20756: POP
// result := s_arr [ 1 ] ;
20757: LD_ADDR_VAR 0 4
20761: PUSH
20762: LD_VAR 0 7
20766: PUSH
20767: LD_INT 1
20769: ARRAY
20770: ST_TO_ADDR
// end ; end ;
20771: LD_VAR 0 4
20775: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20776: LD_INT 0
20778: PPUSH
20779: PPUSH
// if not list then
20780: LD_VAR 0 1
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20880
// i := list [ pos1 ] ;
20789: LD_ADDR_VAR 0 5
20793: PUSH
20794: LD_VAR 0 1
20798: PUSH
20799: LD_VAR 0 2
20803: ARRAY
20804: ST_TO_ADDR
// if not i then
20805: LD_VAR 0 5
20809: NOT
20810: IFFALSE 20814
// exit ;
20812: GO 20880
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20814: LD_ADDR_VAR 0 1
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: LD_VAR 0 2
20828: PPUSH
20829: LD_VAR 0 1
20833: PUSH
20834: LD_VAR 0 3
20838: ARRAY
20839: PPUSH
20840: CALL_OW 1
20844: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20845: LD_ADDR_VAR 0 1
20849: PUSH
20850: LD_VAR 0 1
20854: PPUSH
20855: LD_VAR 0 3
20859: PPUSH
20860: LD_VAR 0 5
20864: PPUSH
20865: CALL_OW 1
20869: ST_TO_ADDR
// result := list ;
20870: LD_ADDR_VAR 0 4
20874: PUSH
20875: LD_VAR 0 1
20879: ST_TO_ADDR
// end ;
20880: LD_VAR 0 4
20884: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20885: LD_INT 0
20887: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20888: LD_ADDR_VAR 0 5
20892: PUSH
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL_OW 250
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 251
20912: PPUSH
20913: LD_VAR 0 2
20917: PPUSH
20918: LD_VAR 0 3
20922: PPUSH
20923: LD_VAR 0 4
20927: PPUSH
20928: CALL 20938 0 5
20932: ST_TO_ADDR
// end ;
20933: LD_VAR 0 5
20937: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
// if not list then
20944: LD_VAR 0 3
20948: NOT
20949: IFFALSE 20953
// exit ;
20951: GO 21341
// result := [ ] ;
20953: LD_ADDR_VAR 0 6
20957: PUSH
20958: EMPTY
20959: ST_TO_ADDR
// for i in list do
20960: LD_ADDR_VAR 0 7
20964: PUSH
20965: LD_VAR 0 3
20969: PUSH
20970: FOR_IN
20971: IFFALSE 21173
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20973: LD_ADDR_VAR 0 9
20977: PUSH
20978: LD_VAR 0 7
20982: PPUSH
20983: LD_VAR 0 1
20987: PPUSH
20988: LD_VAR 0 2
20992: PPUSH
20993: CALL_OW 297
20997: ST_TO_ADDR
// if not result then
20998: LD_VAR 0 6
21002: NOT
21003: IFFALSE 21029
// result := [ [ i , tmp ] ] else
21005: LD_ADDR_VAR 0 6
21009: PUSH
21010: LD_VAR 0 7
21014: PUSH
21015: LD_VAR 0 9
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: ST_TO_ADDR
21027: GO 21171
// begin if result [ result ] [ 2 ] < tmp then
21029: LD_VAR 0 6
21033: PUSH
21034: LD_VAR 0 6
21038: ARRAY
21039: PUSH
21040: LD_INT 2
21042: ARRAY
21043: PUSH
21044: LD_VAR 0 9
21048: LESS
21049: IFFALSE 21091
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21051: LD_ADDR_VAR 0 6
21055: PUSH
21056: LD_VAR 0 6
21060: PPUSH
21061: LD_VAR 0 6
21065: PUSH
21066: LD_INT 1
21068: PLUS
21069: PPUSH
21070: LD_VAR 0 7
21074: PUSH
21075: LD_VAR 0 9
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PPUSH
21084: CALL_OW 2
21088: ST_TO_ADDR
21089: GO 21171
// for j = 1 to result do
21091: LD_ADDR_VAR 0 8
21095: PUSH
21096: DOUBLE
21097: LD_INT 1
21099: DEC
21100: ST_TO_ADDR
21101: LD_VAR 0 6
21105: PUSH
21106: FOR_TO
21107: IFFALSE 21169
// begin if tmp < result [ j ] [ 2 ] then
21109: LD_VAR 0 9
21113: PUSH
21114: LD_VAR 0 6
21118: PUSH
21119: LD_VAR 0 8
21123: ARRAY
21124: PUSH
21125: LD_INT 2
21127: ARRAY
21128: LESS
21129: IFFALSE 21167
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21131: LD_ADDR_VAR 0 6
21135: PUSH
21136: LD_VAR 0 6
21140: PPUSH
21141: LD_VAR 0 8
21145: PPUSH
21146: LD_VAR 0 7
21150: PUSH
21151: LD_VAR 0 9
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 2
21164: ST_TO_ADDR
// break ;
21165: GO 21169
// end ; end ;
21167: GO 21106
21169: POP
21170: POP
// end ; end ;
21171: GO 20970
21173: POP
21174: POP
// if result and not asc then
21175: LD_VAR 0 6
21179: PUSH
21180: LD_VAR 0 4
21184: NOT
21185: AND
21186: IFFALSE 21261
// begin tmp := result ;
21188: LD_ADDR_VAR 0 9
21192: PUSH
21193: LD_VAR 0 6
21197: ST_TO_ADDR
// for i = tmp downto 1 do
21198: LD_ADDR_VAR 0 7
21202: PUSH
21203: DOUBLE
21204: LD_VAR 0 9
21208: INC
21209: ST_TO_ADDR
21210: LD_INT 1
21212: PUSH
21213: FOR_DOWNTO
21214: IFFALSE 21259
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21216: LD_ADDR_VAR 0 6
21220: PUSH
21221: LD_VAR 0 6
21225: PPUSH
21226: LD_VAR 0 9
21230: PUSH
21231: LD_VAR 0 7
21235: MINUS
21236: PUSH
21237: LD_INT 1
21239: PLUS
21240: PPUSH
21241: LD_VAR 0 9
21245: PUSH
21246: LD_VAR 0 7
21250: ARRAY
21251: PPUSH
21252: CALL_OW 1
21256: ST_TO_ADDR
21257: GO 21213
21259: POP
21260: POP
// end ; tmp := [ ] ;
21261: LD_ADDR_VAR 0 9
21265: PUSH
21266: EMPTY
21267: ST_TO_ADDR
// if mode then
21268: LD_VAR 0 5
21272: IFFALSE 21341
// begin for i = 1 to result do
21274: LD_ADDR_VAR 0 7
21278: PUSH
21279: DOUBLE
21280: LD_INT 1
21282: DEC
21283: ST_TO_ADDR
21284: LD_VAR 0 6
21288: PUSH
21289: FOR_TO
21290: IFFALSE 21329
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21292: LD_ADDR_VAR 0 9
21296: PUSH
21297: LD_VAR 0 9
21301: PPUSH
21302: LD_VAR 0 7
21306: PPUSH
21307: LD_VAR 0 6
21311: PUSH
21312: LD_VAR 0 7
21316: ARRAY
21317: PUSH
21318: LD_INT 1
21320: ARRAY
21321: PPUSH
21322: CALL_OW 1
21326: ST_TO_ADDR
21327: GO 21289
21329: POP
21330: POP
// result := tmp ;
21331: LD_ADDR_VAR 0 6
21335: PUSH
21336: LD_VAR 0 9
21340: ST_TO_ADDR
// end ; end ;
21341: LD_VAR 0 6
21345: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21346: LD_INT 0
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
21352: PPUSH
21353: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21354: LD_ADDR_VAR 0 5
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: EMPTY
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: ST_TO_ADDR
// if not x or not y then
21376: LD_VAR 0 2
21380: NOT
21381: PUSH
21382: LD_VAR 0 3
21386: NOT
21387: OR
21388: IFFALSE 21392
// exit ;
21390: GO 23042
// if not range then
21392: LD_VAR 0 4
21396: NOT
21397: IFFALSE 21407
// range := 10 ;
21399: LD_ADDR_VAR 0 4
21403: PUSH
21404: LD_INT 10
21406: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21407: LD_ADDR_VAR 0 8
21411: PUSH
21412: LD_INT 81
21414: PUSH
21415: LD_VAR 0 1
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 92
21426: PUSH
21427: LD_VAR 0 2
21431: PUSH
21432: LD_VAR 0 3
21436: PUSH
21437: LD_VAR 0 4
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: LD_INT 21
21453: PUSH
21454: LD_INT 3
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: PPUSH
21470: CALL_OW 69
21474: ST_TO_ADDR
// if not tmp then
21475: LD_VAR 0 8
21479: NOT
21480: IFFALSE 21484
// exit ;
21482: GO 23042
// for i in tmp do
21484: LD_ADDR_VAR 0 6
21488: PUSH
21489: LD_VAR 0 8
21493: PUSH
21494: FOR_IN
21495: IFFALSE 23017
// begin points := [ 0 , 0 , 0 ] ;
21497: LD_ADDR_VAR 0 9
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: ST_TO_ADDR
// bpoints := 1 ;
21516: LD_ADDR_VAR 0 10
21520: PUSH
21521: LD_INT 1
21523: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21524: LD_VAR 0 6
21528: PPUSH
21529: CALL_OW 247
21533: PUSH
21534: LD_INT 1
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 22120
21542: POP
// begin if GetClass ( i ) = 1 then
21543: LD_VAR 0 6
21547: PPUSH
21548: CALL_OW 257
21552: PUSH
21553: LD_INT 1
21555: EQUAL
21556: IFFALSE 21577
// points := [ 10 , 5 , 3 ] ;
21558: LD_ADDR_VAR 0 9
21562: PUSH
21563: LD_INT 10
21565: PUSH
21566: LD_INT 5
21568: PUSH
21569: LD_INT 3
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21577: LD_VAR 0 6
21581: PPUSH
21582: CALL_OW 257
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: LD_INT 3
21592: PUSH
21593: LD_INT 4
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: IN
21601: IFFALSE 21622
// points := [ 3 , 2 , 1 ] ;
21603: LD_ADDR_VAR 0 9
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21622: LD_VAR 0 6
21626: PPUSH
21627: CALL_OW 257
21631: PUSH
21632: LD_INT 5
21634: EQUAL
21635: IFFALSE 21656
// points := [ 130 , 5 , 2 ] ;
21637: LD_ADDR_VAR 0 9
21641: PUSH
21642: LD_INT 130
21644: PUSH
21645: LD_INT 5
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21656: LD_VAR 0 6
21660: PPUSH
21661: CALL_OW 257
21665: PUSH
21666: LD_INT 8
21668: EQUAL
21669: IFFALSE 21690
// points := [ 35 , 35 , 30 ] ;
21671: LD_ADDR_VAR 0 9
21675: PUSH
21676: LD_INT 35
21678: PUSH
21679: LD_INT 35
21681: PUSH
21682: LD_INT 30
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21690: LD_VAR 0 6
21694: PPUSH
21695: CALL_OW 257
21699: PUSH
21700: LD_INT 9
21702: EQUAL
21703: IFFALSE 21724
// points := [ 20 , 55 , 40 ] ;
21705: LD_ADDR_VAR 0 9
21709: PUSH
21710: LD_INT 20
21712: PUSH
21713: LD_INT 55
21715: PUSH
21716: LD_INT 40
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21724: LD_VAR 0 6
21728: PPUSH
21729: CALL_OW 257
21733: PUSH
21734: LD_INT 12
21736: PUSH
21737: LD_INT 16
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: IN
21744: IFFALSE 21765
// points := [ 5 , 3 , 2 ] ;
21746: LD_ADDR_VAR 0 9
21750: PUSH
21751: LD_INT 5
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21765: LD_VAR 0 6
21769: PPUSH
21770: CALL_OW 257
21774: PUSH
21775: LD_INT 17
21777: EQUAL
21778: IFFALSE 21799
// points := [ 100 , 50 , 75 ] ;
21780: LD_ADDR_VAR 0 9
21784: PUSH
21785: LD_INT 100
21787: PUSH
21788: LD_INT 50
21790: PUSH
21791: LD_INT 75
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21799: LD_VAR 0 6
21803: PPUSH
21804: CALL_OW 257
21808: PUSH
21809: LD_INT 15
21811: EQUAL
21812: IFFALSE 21833
// points := [ 10 , 5 , 3 ] ;
21814: LD_ADDR_VAR 0 9
21818: PUSH
21819: LD_INT 10
21821: PUSH
21822: LD_INT 5
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21833: LD_VAR 0 6
21837: PPUSH
21838: CALL_OW 257
21842: PUSH
21843: LD_INT 14
21845: EQUAL
21846: IFFALSE 21867
// points := [ 10 , 0 , 0 ] ;
21848: LD_ADDR_VAR 0 9
21852: PUSH
21853: LD_INT 10
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21867: LD_VAR 0 6
21871: PPUSH
21872: CALL_OW 257
21876: PUSH
21877: LD_INT 11
21879: EQUAL
21880: IFFALSE 21901
// points := [ 30 , 10 , 5 ] ;
21882: LD_ADDR_VAR 0 9
21886: PUSH
21887: LD_INT 30
21889: PUSH
21890: LD_INT 10
21892: PUSH
21893: LD_INT 5
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21901: LD_VAR 0 1
21905: PPUSH
21906: LD_INT 5
21908: PPUSH
21909: CALL_OW 321
21913: PUSH
21914: LD_INT 2
21916: EQUAL
21917: IFFALSE 21934
// bpoints := bpoints * 1.8 ;
21919: LD_ADDR_VAR 0 10
21923: PUSH
21924: LD_VAR 0 10
21928: PUSH
21929: LD_REAL  1.80000000000000E+0000
21932: MUL
21933: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21934: LD_VAR 0 6
21938: PPUSH
21939: CALL_OW 257
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 4
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: IN
21962: PUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: LD_INT 51
21970: PPUSH
21971: CALL_OW 321
21975: PUSH
21976: LD_INT 2
21978: EQUAL
21979: AND
21980: IFFALSE 21997
// bpoints := bpoints * 1.2 ;
21982: LD_ADDR_VAR 0 10
21986: PUSH
21987: LD_VAR 0 10
21991: PUSH
21992: LD_REAL  1.20000000000000E+0000
21995: MUL
21996: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21997: LD_VAR 0 6
22001: PPUSH
22002: CALL_OW 257
22006: PUSH
22007: LD_INT 5
22009: PUSH
22010: LD_INT 7
22012: PUSH
22013: LD_INT 9
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: IN
22021: PUSH
22022: LD_VAR 0 1
22026: PPUSH
22027: LD_INT 52
22029: PPUSH
22030: CALL_OW 321
22034: PUSH
22035: LD_INT 2
22037: EQUAL
22038: AND
22039: IFFALSE 22056
// bpoints := bpoints * 1.5 ;
22041: LD_ADDR_VAR 0 10
22045: PUSH
22046: LD_VAR 0 10
22050: PUSH
22051: LD_REAL  1.50000000000000E+0000
22054: MUL
22055: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22056: LD_VAR 0 1
22060: PPUSH
22061: LD_INT 66
22063: PPUSH
22064: CALL_OW 321
22068: PUSH
22069: LD_INT 2
22071: EQUAL
22072: IFFALSE 22089
// bpoints := bpoints * 1.1 ;
22074: LD_ADDR_VAR 0 10
22078: PUSH
22079: LD_VAR 0 10
22083: PUSH
22084: LD_REAL  1.10000000000000E+0000
22087: MUL
22088: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22089: LD_ADDR_VAR 0 10
22093: PUSH
22094: LD_VAR 0 10
22098: PUSH
22099: LD_VAR 0 6
22103: PPUSH
22104: LD_INT 1
22106: PPUSH
22107: CALL_OW 259
22111: PUSH
22112: LD_REAL  1.15000000000000E+0000
22115: MUL
22116: MUL
22117: ST_TO_ADDR
// end ; unit_vehicle :
22118: GO 22946
22120: LD_INT 2
22122: DOUBLE
22123: EQUAL
22124: IFTRUE 22128
22126: GO 22934
22128: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22129: LD_VAR 0 6
22133: PPUSH
22134: CALL_OW 264
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 42
22144: PUSH
22145: LD_INT 24
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: IN
22153: IFFALSE 22174
// points := [ 25 , 5 , 3 ] ;
22155: LD_ADDR_VAR 0 9
22159: PUSH
22160: LD_INT 25
22162: PUSH
22163: LD_INT 5
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 264
22183: PUSH
22184: LD_INT 4
22186: PUSH
22187: LD_INT 43
22189: PUSH
22190: LD_INT 25
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: IN
22198: IFFALSE 22219
// points := [ 40 , 15 , 5 ] ;
22200: LD_ADDR_VAR 0 9
22204: PUSH
22205: LD_INT 40
22207: PUSH
22208: LD_INT 15
22210: PUSH
22211: LD_INT 5
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22219: LD_VAR 0 6
22223: PPUSH
22224: CALL_OW 264
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: LD_INT 23
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: IN
22239: IFFALSE 22260
// points := [ 7 , 25 , 8 ] ;
22241: LD_ADDR_VAR 0 9
22245: PUSH
22246: LD_INT 7
22248: PUSH
22249: LD_INT 25
22251: PUSH
22252: LD_INT 8
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22260: LD_VAR 0 6
22264: PPUSH
22265: CALL_OW 264
22269: PUSH
22270: LD_INT 5
22272: PUSH
22273: LD_INT 27
22275: PUSH
22276: LD_INT 44
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: IN
22284: IFFALSE 22305
// points := [ 14 , 50 , 16 ] ;
22286: LD_ADDR_VAR 0 9
22290: PUSH
22291: LD_INT 14
22293: PUSH
22294: LD_INT 50
22296: PUSH
22297: LD_INT 16
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22305: LD_VAR 0 6
22309: PPUSH
22310: CALL_OW 264
22314: PUSH
22315: LD_INT 6
22317: PUSH
22318: LD_INT 46
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: IN
22325: IFFALSE 22346
// points := [ 32 , 120 , 70 ] ;
22327: LD_ADDR_VAR 0 9
22331: PUSH
22332: LD_INT 32
22334: PUSH
22335: LD_INT 120
22337: PUSH
22338: LD_INT 70
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22346: LD_VAR 0 6
22350: PPUSH
22351: CALL_OW 264
22355: PUSH
22356: LD_INT 7
22358: PUSH
22359: LD_INT 28
22361: PUSH
22362: LD_INT 45
22364: PUSH
22365: LD_INT 92
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: IN
22374: IFFALSE 22395
// points := [ 35 , 20 , 45 ] ;
22376: LD_ADDR_VAR 0 9
22380: PUSH
22381: LD_INT 35
22383: PUSH
22384: LD_INT 20
22386: PUSH
22387: LD_INT 45
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22395: LD_VAR 0 6
22399: PPUSH
22400: CALL_OW 264
22404: PUSH
22405: LD_INT 47
22407: PUSH
22408: EMPTY
22409: LIST
22410: IN
22411: IFFALSE 22432
// points := [ 67 , 45 , 75 ] ;
22413: LD_ADDR_VAR 0 9
22417: PUSH
22418: LD_INT 67
22420: PUSH
22421: LD_INT 45
22423: PUSH
22424: LD_INT 75
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22432: LD_VAR 0 6
22436: PPUSH
22437: CALL_OW 264
22441: PUSH
22442: LD_INT 26
22444: PUSH
22445: EMPTY
22446: LIST
22447: IN
22448: IFFALSE 22469
// points := [ 120 , 30 , 80 ] ;
22450: LD_ADDR_VAR 0 9
22454: PUSH
22455: LD_INT 120
22457: PUSH
22458: LD_INT 30
22460: PUSH
22461: LD_INT 80
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22469: LD_VAR 0 6
22473: PPUSH
22474: CALL_OW 264
22478: PUSH
22479: LD_INT 22
22481: PUSH
22482: EMPTY
22483: LIST
22484: IN
22485: IFFALSE 22506
// points := [ 40 , 1 , 1 ] ;
22487: LD_ADDR_VAR 0 9
22491: PUSH
22492: LD_INT 40
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22506: LD_VAR 0 6
22510: PPUSH
22511: CALL_OW 264
22515: PUSH
22516: LD_INT 29
22518: PUSH
22519: EMPTY
22520: LIST
22521: IN
22522: IFFALSE 22543
// points := [ 70 , 200 , 400 ] ;
22524: LD_ADDR_VAR 0 9
22528: PUSH
22529: LD_INT 70
22531: PUSH
22532: LD_INT 200
22534: PUSH
22535: LD_INT 400
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22543: LD_VAR 0 6
22547: PPUSH
22548: CALL_OW 264
22552: PUSH
22553: LD_INT 14
22555: PUSH
22556: LD_INT 53
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: IN
22563: IFFALSE 22584
// points := [ 40 , 10 , 20 ] ;
22565: LD_ADDR_VAR 0 9
22569: PUSH
22570: LD_INT 40
22572: PUSH
22573: LD_INT 10
22575: PUSH
22576: LD_INT 20
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22584: LD_VAR 0 6
22588: PPUSH
22589: CALL_OW 264
22593: PUSH
22594: LD_INT 9
22596: PUSH
22597: EMPTY
22598: LIST
22599: IN
22600: IFFALSE 22621
// points := [ 5 , 70 , 20 ] ;
22602: LD_ADDR_VAR 0 9
22606: PUSH
22607: LD_INT 5
22609: PUSH
22610: LD_INT 70
22612: PUSH
22613: LD_INT 20
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22621: LD_VAR 0 6
22625: PPUSH
22626: CALL_OW 264
22630: PUSH
22631: LD_INT 10
22633: PUSH
22634: EMPTY
22635: LIST
22636: IN
22637: IFFALSE 22658
// points := [ 35 , 110 , 70 ] ;
22639: LD_ADDR_VAR 0 9
22643: PUSH
22644: LD_INT 35
22646: PUSH
22647: LD_INT 110
22649: PUSH
22650: LD_INT 70
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22658: LD_VAR 0 6
22662: PPUSH
22663: CALL_OW 265
22667: PUSH
22668: LD_INT 25
22670: EQUAL
22671: IFFALSE 22692
// points := [ 80 , 65 , 100 ] ;
22673: LD_ADDR_VAR 0 9
22677: PUSH
22678: LD_INT 80
22680: PUSH
22681: LD_INT 65
22683: PUSH
22684: LD_INT 100
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22692: LD_VAR 0 6
22696: PPUSH
22697: CALL_OW 263
22701: PUSH
22702: LD_INT 1
22704: EQUAL
22705: IFFALSE 22740
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22707: LD_ADDR_VAR 0 10
22711: PUSH
22712: LD_VAR 0 10
22716: PUSH
22717: LD_VAR 0 6
22721: PPUSH
22722: CALL_OW 311
22726: PPUSH
22727: LD_INT 3
22729: PPUSH
22730: CALL_OW 259
22734: PUSH
22735: LD_INT 4
22737: MUL
22738: MUL
22739: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22740: LD_VAR 0 6
22744: PPUSH
22745: CALL_OW 263
22749: PUSH
22750: LD_INT 2
22752: EQUAL
22753: IFFALSE 22804
// begin j := IsControledBy ( i ) ;
22755: LD_ADDR_VAR 0 7
22759: PUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: CALL_OW 312
22769: ST_TO_ADDR
// if j then
22770: LD_VAR 0 7
22774: IFFALSE 22804
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22776: LD_ADDR_VAR 0 10
22780: PUSH
22781: LD_VAR 0 10
22785: PUSH
22786: LD_VAR 0 7
22790: PPUSH
22791: LD_INT 3
22793: PPUSH
22794: CALL_OW 259
22798: PUSH
22799: LD_INT 3
22801: MUL
22802: MUL
22803: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22804: LD_VAR 0 6
22808: PPUSH
22809: CALL_OW 264
22813: PUSH
22814: LD_INT 5
22816: PUSH
22817: LD_INT 6
22819: PUSH
22820: LD_INT 46
22822: PUSH
22823: LD_INT 44
22825: PUSH
22826: LD_INT 47
22828: PUSH
22829: LD_INT 45
22831: PUSH
22832: LD_INT 28
22834: PUSH
22835: LD_INT 7
22837: PUSH
22838: LD_INT 27
22840: PUSH
22841: LD_INT 29
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: IN
22856: PUSH
22857: LD_VAR 0 1
22861: PPUSH
22862: LD_INT 52
22864: PPUSH
22865: CALL_OW 321
22869: PUSH
22870: LD_INT 2
22872: EQUAL
22873: AND
22874: IFFALSE 22891
// bpoints := bpoints * 1.2 ;
22876: LD_ADDR_VAR 0 10
22880: PUSH
22881: LD_VAR 0 10
22885: PUSH
22886: LD_REAL  1.20000000000000E+0000
22889: MUL
22890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22891: LD_VAR 0 6
22895: PPUSH
22896: CALL_OW 264
22900: PUSH
22901: LD_INT 6
22903: PUSH
22904: LD_INT 46
22906: PUSH
22907: LD_INT 47
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: IN
22915: IFFALSE 22932
// bpoints := bpoints * 1.2 ;
22917: LD_ADDR_VAR 0 10
22921: PUSH
22922: LD_VAR 0 10
22926: PUSH
22927: LD_REAL  1.20000000000000E+0000
22930: MUL
22931: ST_TO_ADDR
// end ; unit_building :
22932: GO 22946
22934: LD_INT 3
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 22945
22942: POP
// ; end ;
22943: GO 22946
22945: POP
// for j = 1 to 3 do
22946: LD_ADDR_VAR 0 7
22950: PUSH
22951: DOUBLE
22952: LD_INT 1
22954: DEC
22955: ST_TO_ADDR
22956: LD_INT 3
22958: PUSH
22959: FOR_TO
22960: IFFALSE 23013
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22962: LD_ADDR_VAR 0 5
22966: PUSH
22967: LD_VAR 0 5
22971: PPUSH
22972: LD_VAR 0 7
22976: PPUSH
22977: LD_VAR 0 5
22981: PUSH
22982: LD_VAR 0 7
22986: ARRAY
22987: PUSH
22988: LD_VAR 0 9
22992: PUSH
22993: LD_VAR 0 7
22997: ARRAY
22998: PUSH
22999: LD_VAR 0 10
23003: MUL
23004: PLUS
23005: PPUSH
23006: CALL_OW 1
23010: ST_TO_ADDR
23011: GO 22959
23013: POP
23014: POP
// end ;
23015: GO 21494
23017: POP
23018: POP
// result := Replace ( result , 4 , tmp ) ;
23019: LD_ADDR_VAR 0 5
23023: PUSH
23024: LD_VAR 0 5
23028: PPUSH
23029: LD_INT 4
23031: PPUSH
23032: LD_VAR 0 8
23036: PPUSH
23037: CALL_OW 1
23041: ST_TO_ADDR
// end ;
23042: LD_VAR 0 5
23046: RET
// export function DangerAtRange ( unit , range ) ; begin
23047: LD_INT 0
23049: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23050: LD_ADDR_VAR 0 3
23054: PUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 255
23064: PPUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 250
23074: PPUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 251
23084: PPUSH
23085: LD_VAR 0 2
23089: PPUSH
23090: CALL 21346 0 4
23094: ST_TO_ADDR
// end ;
23095: LD_VAR 0 3
23099: RET
// export function DangerInArea ( side , area ) ; begin
23100: LD_INT 0
23102: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23103: LD_ADDR_VAR 0 3
23107: PUSH
23108: LD_VAR 0 2
23112: PPUSH
23113: LD_INT 81
23115: PUSH
23116: LD_VAR 0 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: ST_TO_ADDR
// end ;
23130: LD_VAR 0 3
23134: RET
// export function IsExtension ( b ) ; begin
23135: LD_INT 0
23137: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23138: LD_ADDR_VAR 0 2
23142: PUSH
23143: LD_VAR 0 1
23147: PUSH
23148: LD_INT 23
23150: PUSH
23151: LD_INT 20
23153: PUSH
23154: LD_INT 22
23156: PUSH
23157: LD_INT 17
23159: PUSH
23160: LD_INT 24
23162: PUSH
23163: LD_INT 21
23165: PUSH
23166: LD_INT 19
23168: PUSH
23169: LD_INT 16
23171: PUSH
23172: LD_INT 25
23174: PUSH
23175: LD_INT 18
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: IN
23190: ST_TO_ADDR
// end ;
23191: LD_VAR 0 2
23195: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23196: LD_INT 0
23198: PPUSH
23199: PPUSH
23200: PPUSH
// result := [ ] ;
23201: LD_ADDR_VAR 0 4
23205: PUSH
23206: EMPTY
23207: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23208: LD_ADDR_VAR 0 5
23212: PUSH
23213: LD_VAR 0 2
23217: PPUSH
23218: LD_INT 21
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PPUSH
23228: CALL_OW 70
23232: ST_TO_ADDR
// if not tmp then
23233: LD_VAR 0 5
23237: NOT
23238: IFFALSE 23242
// exit ;
23240: GO 23306
// if checkLink then
23242: LD_VAR 0 3
23246: IFFALSE 23296
// begin for i in tmp do
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 5
23257: PUSH
23258: FOR_IN
23259: IFFALSE 23294
// if GetBase ( i ) <> base then
23261: LD_VAR 0 6
23265: PPUSH
23266: CALL_OW 274
23270: PUSH
23271: LD_VAR 0 1
23275: NONEQUAL
23276: IFFALSE 23292
// ComLinkToBase ( base , i ) ;
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_VAR 0 6
23287: PPUSH
23288: CALL_OW 169
23292: GO 23258
23294: POP
23295: POP
// end ; result := tmp ;
23296: LD_ADDR_VAR 0 4
23300: PUSH
23301: LD_VAR 0 5
23305: ST_TO_ADDR
// end ;
23306: LD_VAR 0 4
23310: RET
// export function ComComplete ( units , b ) ; var i ; begin
23311: LD_INT 0
23313: PPUSH
23314: PPUSH
// if not units then
23315: LD_VAR 0 1
23319: NOT
23320: IFFALSE 23324
// exit ;
23322: GO 23414
// for i in units do
23324: LD_ADDR_VAR 0 4
23328: PUSH
23329: LD_VAR 0 1
23333: PUSH
23334: FOR_IN
23335: IFFALSE 23412
// if BuildingStatus ( b ) = bs_build then
23337: LD_VAR 0 2
23341: PPUSH
23342: CALL_OW 461
23346: PUSH
23347: LD_INT 1
23349: EQUAL
23350: IFFALSE 23410
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23352: LD_VAR 0 4
23356: PPUSH
23357: LD_STRING h
23359: PUSH
23360: LD_VAR 0 2
23364: PPUSH
23365: CALL_OW 250
23369: PUSH
23370: LD_VAR 0 2
23374: PPUSH
23375: CALL_OW 251
23379: PUSH
23380: LD_VAR 0 2
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: PUSH
23403: EMPTY
23404: LIST
23405: PPUSH
23406: CALL_OW 446
23410: GO 23334
23412: POP
23413: POP
// end ;
23414: LD_VAR 0 3
23418: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23419: LD_INT 0
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
23426: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23427: LD_VAR 0 1
23431: NOT
23432: PUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 263
23442: PUSH
23443: LD_INT 2
23445: NONEQUAL
23446: OR
23447: IFFALSE 23451
// exit ;
23449: GO 23767
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23451: LD_ADDR_VAR 0 6
23455: PUSH
23456: LD_INT 22
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 255
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 36
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 34
23488: PUSH
23489: LD_INT 31
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL_OW 69
23509: ST_TO_ADDR
// if not tmp then
23510: LD_VAR 0 6
23514: NOT
23515: IFFALSE 23519
// exit ;
23517: GO 23767
// result := [ ] ;
23519: LD_ADDR_VAR 0 2
23523: PUSH
23524: EMPTY
23525: ST_TO_ADDR
// for i in tmp do
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_VAR 0 6
23535: PUSH
23536: FOR_IN
23537: IFFALSE 23608
// begin t := UnitsInside ( i ) ;
23539: LD_ADDR_VAR 0 4
23543: PUSH
23544: LD_VAR 0 3
23548: PPUSH
23549: CALL_OW 313
23553: ST_TO_ADDR
// if t then
23554: LD_VAR 0 4
23558: IFFALSE 23606
// for j in t do
23560: LD_ADDR_VAR 0 7
23564: PUSH
23565: LD_VAR 0 4
23569: PUSH
23570: FOR_IN
23571: IFFALSE 23604
// result := Replace ( result , result + 1 , j ) ;
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_VAR 0 2
23582: PPUSH
23583: LD_VAR 0 2
23587: PUSH
23588: LD_INT 1
23590: PLUS
23591: PPUSH
23592: LD_VAR 0 7
23596: PPUSH
23597: CALL_OW 1
23601: ST_TO_ADDR
23602: GO 23570
23604: POP
23605: POP
// end ;
23606: GO 23536
23608: POP
23609: POP
// if not result then
23610: LD_VAR 0 2
23614: NOT
23615: IFFALSE 23619
// exit ;
23617: GO 23767
// mech := result [ 1 ] ;
23619: LD_ADDR_VAR 0 5
23623: PUSH
23624: LD_VAR 0 2
23628: PUSH
23629: LD_INT 1
23631: ARRAY
23632: ST_TO_ADDR
// if result > 1 then
23633: LD_VAR 0 2
23637: PUSH
23638: LD_INT 1
23640: GREATER
23641: IFFALSE 23753
// begin for i = 2 to result do
23643: LD_ADDR_VAR 0 3
23647: PUSH
23648: DOUBLE
23649: LD_INT 2
23651: DEC
23652: ST_TO_ADDR
23653: LD_VAR 0 2
23657: PUSH
23658: FOR_TO
23659: IFFALSE 23751
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23661: LD_ADDR_VAR 0 4
23665: PUSH
23666: LD_VAR 0 2
23670: PUSH
23671: LD_VAR 0 3
23675: ARRAY
23676: PPUSH
23677: LD_INT 3
23679: PPUSH
23680: CALL_OW 259
23684: PUSH
23685: LD_VAR 0 2
23689: PUSH
23690: LD_VAR 0 3
23694: ARRAY
23695: PPUSH
23696: CALL_OW 432
23700: MINUS
23701: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23702: LD_VAR 0 4
23706: PUSH
23707: LD_VAR 0 5
23711: PPUSH
23712: LD_INT 3
23714: PPUSH
23715: CALL_OW 259
23719: PUSH
23720: LD_VAR 0 5
23724: PPUSH
23725: CALL_OW 432
23729: MINUS
23730: GREATEREQUAL
23731: IFFALSE 23749
// mech := result [ i ] ;
23733: LD_ADDR_VAR 0 5
23737: PUSH
23738: LD_VAR 0 2
23742: PUSH
23743: LD_VAR 0 3
23747: ARRAY
23748: ST_TO_ADDR
// end ;
23749: GO 23658
23751: POP
23752: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23753: LD_VAR 0 1
23757: PPUSH
23758: LD_VAR 0 5
23762: PPUSH
23763: CALL_OW 135
// end ;
23767: LD_VAR 0 2
23771: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23772: LD_INT 0
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
// result := [ ] ;
23787: LD_ADDR_VAR 0 7
23791: PUSH
23792: EMPTY
23793: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 266
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: IN
23814: NOT
23815: IFFALSE 23819
// exit ;
23817: GO 25453
// if name then
23819: LD_VAR 0 3
23823: IFFALSE 23839
// SetBName ( base_dep , name ) ;
23825: LD_VAR 0 1
23829: PPUSH
23830: LD_VAR 0 3
23834: PPUSH
23835: CALL_OW 500
// base := GetBase ( base_dep ) ;
23839: LD_ADDR_VAR 0 15
23843: PUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 274
23853: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23854: LD_ADDR_VAR 0 16
23858: PUSH
23859: LD_VAR 0 1
23863: PPUSH
23864: CALL_OW 255
23868: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23869: LD_ADDR_VAR 0 17
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 248
23883: ST_TO_ADDR
// if sources then
23884: LD_VAR 0 5
23888: IFFALSE 23935
// for i = 1 to 3 do
23890: LD_ADDR_VAR 0 8
23894: PUSH
23895: DOUBLE
23896: LD_INT 1
23898: DEC
23899: ST_TO_ADDR
23900: LD_INT 3
23902: PUSH
23903: FOR_TO
23904: IFFALSE 23933
// AddResourceType ( base , i , sources [ i ] ) ;
23906: LD_VAR 0 15
23910: PPUSH
23911: LD_VAR 0 8
23915: PPUSH
23916: LD_VAR 0 5
23920: PUSH
23921: LD_VAR 0 8
23925: ARRAY
23926: PPUSH
23927: CALL_OW 276
23931: GO 23903
23933: POP
23934: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23935: LD_ADDR_VAR 0 18
23939: PUSH
23940: LD_VAR 0 15
23944: PPUSH
23945: LD_VAR 0 2
23949: PPUSH
23950: LD_INT 1
23952: PPUSH
23953: CALL 23196 0 3
23957: ST_TO_ADDR
// InitHc ;
23958: CALL_OW 19
// InitUc ;
23962: CALL_OW 18
// uc_side := side ;
23966: LD_ADDR_OWVAR 20
23970: PUSH
23971: LD_VAR 0 16
23975: ST_TO_ADDR
// uc_nation := nation ;
23976: LD_ADDR_OWVAR 21
23980: PUSH
23981: LD_VAR 0 17
23985: ST_TO_ADDR
// if buildings then
23986: LD_VAR 0 18
23990: IFFALSE 25312
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23992: LD_ADDR_VAR 0 19
23996: PUSH
23997: LD_VAR 0 18
24001: PPUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 30
24007: PUSH
24008: LD_INT 29
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 30
24017: PUSH
24018: LD_INT 30
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 72
24034: ST_TO_ADDR
// if tmp then
24035: LD_VAR 0 19
24039: IFFALSE 24087
// for i in tmp do
24041: LD_ADDR_VAR 0 8
24045: PUSH
24046: LD_VAR 0 19
24050: PUSH
24051: FOR_IN
24052: IFFALSE 24085
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24054: LD_VAR 0 8
24058: PPUSH
24059: CALL_OW 250
24063: PPUSH
24064: LD_VAR 0 8
24068: PPUSH
24069: CALL_OW 251
24073: PPUSH
24074: LD_VAR 0 16
24078: PPUSH
24079: CALL_OW 441
24083: GO 24051
24085: POP
24086: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24087: LD_VAR 0 18
24091: PPUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 32
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 30
24107: PUSH
24108: LD_INT 33
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: PPUSH
24120: CALL_OW 72
24124: IFFALSE 24212
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24126: LD_ADDR_VAR 0 8
24130: PUSH
24131: LD_VAR 0 18
24135: PPUSH
24136: LD_INT 2
24138: PUSH
24139: LD_INT 30
24141: PUSH
24142: LD_INT 32
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_INT 33
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: PPUSH
24164: CALL_OW 72
24168: PUSH
24169: FOR_IN
24170: IFFALSE 24210
// begin if not GetBWeapon ( i ) then
24172: LD_VAR 0 8
24176: PPUSH
24177: CALL_OW 269
24181: NOT
24182: IFFALSE 24208
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24184: LD_VAR 0 8
24188: PPUSH
24189: LD_VAR 0 8
24193: PPUSH
24194: LD_VAR 0 2
24198: PPUSH
24199: CALL 25458 0 2
24203: PPUSH
24204: CALL_OW 431
// end ;
24208: GO 24169
24210: POP
24211: POP
// end ; for i = 1 to personel do
24212: LD_ADDR_VAR 0 8
24216: PUSH
24217: DOUBLE
24218: LD_INT 1
24220: DEC
24221: ST_TO_ADDR
24222: LD_VAR 0 6
24226: PUSH
24227: FOR_TO
24228: IFFALSE 25292
// begin if i > 4 then
24230: LD_VAR 0 8
24234: PUSH
24235: LD_INT 4
24237: GREATER
24238: IFFALSE 24242
// break ;
24240: GO 25292
// case i of 1 :
24242: LD_VAR 0 8
24246: PUSH
24247: LD_INT 1
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24335
24255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24256: LD_ADDR_VAR 0 12
24260: PUSH
24261: LD_VAR 0 18
24265: PPUSH
24266: LD_INT 22
24268: PUSH
24269: LD_VAR 0 16
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 58
24280: PUSH
24281: EMPTY
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 32
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 30
24299: PUSH
24300: LD_INT 4
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 30
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: PPUSH
24328: CALL_OW 72
24332: ST_TO_ADDR
24333: GO 24557
24335: LD_INT 2
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 24405
24343: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24344: LD_ADDR_VAR 0 12
24348: PUSH
24349: LD_VAR 0 18
24353: PPUSH
24354: LD_INT 22
24356: PUSH
24357: LD_VAR 0 16
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 30
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 30
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 72
24402: ST_TO_ADDR
24403: GO 24557
24405: LD_INT 3
24407: DOUBLE
24408: EQUAL
24409: IFTRUE 24413
24411: GO 24475
24413: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24414: LD_ADDR_VAR 0 12
24418: PUSH
24419: LD_VAR 0 18
24423: PPUSH
24424: LD_INT 22
24426: PUSH
24427: LD_VAR 0 16
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 30
24441: PUSH
24442: LD_INT 2
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 30
24451: PUSH
24452: LD_INT 3
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 72
24472: ST_TO_ADDR
24473: GO 24557
24475: LD_INT 4
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24556
24483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24484: LD_ADDR_VAR 0 12
24488: PUSH
24489: LD_VAR 0 18
24493: PPUSH
24494: LD_INT 22
24496: PUSH
24497: LD_VAR 0 16
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 30
24511: PUSH
24512: LD_INT 6
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 30
24521: PUSH
24522: LD_INT 7
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 30
24531: PUSH
24532: LD_INT 8
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PPUSH
24549: CALL_OW 72
24553: ST_TO_ADDR
24554: GO 24557
24556: POP
// if i = 1 then
24557: LD_VAR 0 8
24561: PUSH
24562: LD_INT 1
24564: EQUAL
24565: IFFALSE 24676
// begin tmp := [ ] ;
24567: LD_ADDR_VAR 0 19
24571: PUSH
24572: EMPTY
24573: ST_TO_ADDR
// for j in f do
24574: LD_ADDR_VAR 0 9
24578: PUSH
24579: LD_VAR 0 12
24583: PUSH
24584: FOR_IN
24585: IFFALSE 24658
// if GetBType ( j ) = b_bunker then
24587: LD_VAR 0 9
24591: PPUSH
24592: CALL_OW 266
24596: PUSH
24597: LD_INT 32
24599: EQUAL
24600: IFFALSE 24627
// tmp := Insert ( tmp , 1 , j ) else
24602: LD_ADDR_VAR 0 19
24606: PUSH
24607: LD_VAR 0 19
24611: PPUSH
24612: LD_INT 1
24614: PPUSH
24615: LD_VAR 0 9
24619: PPUSH
24620: CALL_OW 2
24624: ST_TO_ADDR
24625: GO 24656
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24627: LD_ADDR_VAR 0 19
24631: PUSH
24632: LD_VAR 0 19
24636: PPUSH
24637: LD_VAR 0 19
24641: PUSH
24642: LD_INT 1
24644: PLUS
24645: PPUSH
24646: LD_VAR 0 9
24650: PPUSH
24651: CALL_OW 2
24655: ST_TO_ADDR
24656: GO 24584
24658: POP
24659: POP
// if tmp then
24660: LD_VAR 0 19
24664: IFFALSE 24676
// f := tmp ;
24666: LD_ADDR_VAR 0 12
24670: PUSH
24671: LD_VAR 0 19
24675: ST_TO_ADDR
// end ; x := personel [ i ] ;
24676: LD_ADDR_VAR 0 13
24680: PUSH
24681: LD_VAR 0 6
24685: PUSH
24686: LD_VAR 0 8
24690: ARRAY
24691: ST_TO_ADDR
// if x = - 1 then
24692: LD_VAR 0 13
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: EQUAL
24701: IFFALSE 24910
// begin for j in f do
24703: LD_ADDR_VAR 0 9
24707: PUSH
24708: LD_VAR 0 12
24712: PUSH
24713: FOR_IN
24714: IFFALSE 24906
// repeat InitHc ;
24716: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24720: LD_VAR 0 9
24724: PPUSH
24725: CALL_OW 266
24729: PUSH
24730: LD_INT 5
24732: EQUAL
24733: IFFALSE 24803
// begin if UnitsInside ( j ) < 3 then
24735: LD_VAR 0 9
24739: PPUSH
24740: CALL_OW 313
24744: PUSH
24745: LD_INT 3
24747: LESS
24748: IFFALSE 24784
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24750: LD_INT 0
24752: PPUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 8
24758: PUSH
24759: LD_INT 9
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: LIST
24766: PUSH
24767: LD_VAR 0 17
24771: ARRAY
24772: PPUSH
24773: LD_VAR 0 4
24777: PPUSH
24778: CALL_OW 380
24782: GO 24801
// PrepareHuman ( false , i , skill ) ;
24784: LD_INT 0
24786: PPUSH
24787: LD_VAR 0 8
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: CALL_OW 380
// end else
24801: GO 24820
// PrepareHuman ( false , i , skill ) ;
24803: LD_INT 0
24805: PPUSH
24806: LD_VAR 0 8
24810: PPUSH
24811: LD_VAR 0 4
24815: PPUSH
24816: CALL_OW 380
// un := CreateHuman ;
24820: LD_ADDR_VAR 0 14
24824: PUSH
24825: CALL_OW 44
24829: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24830: LD_ADDR_VAR 0 7
24834: PUSH
24835: LD_VAR 0 7
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: LD_VAR 0 14
24847: PPUSH
24848: CALL_OW 2
24852: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24853: LD_VAR 0 14
24857: PPUSH
24858: LD_VAR 0 9
24862: PPUSH
24863: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24867: LD_VAR 0 9
24871: PPUSH
24872: CALL_OW 313
24876: PUSH
24877: LD_INT 6
24879: EQUAL
24880: PUSH
24881: LD_VAR 0 9
24885: PPUSH
24886: CALL_OW 266
24890: PUSH
24891: LD_INT 32
24893: PUSH
24894: LD_INT 31
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: IN
24901: OR
24902: IFFALSE 24716
24904: GO 24713
24906: POP
24907: POP
// end else
24908: GO 25290
// for j = 1 to x do
24910: LD_ADDR_VAR 0 9
24914: PUSH
24915: DOUBLE
24916: LD_INT 1
24918: DEC
24919: ST_TO_ADDR
24920: LD_VAR 0 13
24924: PUSH
24925: FOR_TO
24926: IFFALSE 25288
// begin InitHc ;
24928: CALL_OW 19
// if not f then
24932: LD_VAR 0 12
24936: NOT
24937: IFFALSE 25026
// begin PrepareHuman ( false , i , skill ) ;
24939: LD_INT 0
24941: PPUSH
24942: LD_VAR 0 8
24946: PPUSH
24947: LD_VAR 0 4
24951: PPUSH
24952: CALL_OW 380
// un := CreateHuman ;
24956: LD_ADDR_VAR 0 14
24960: PUSH
24961: CALL_OW 44
24965: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24966: LD_ADDR_VAR 0 7
24970: PUSH
24971: LD_VAR 0 7
24975: PPUSH
24976: LD_INT 1
24978: PPUSH
24979: LD_VAR 0 14
24983: PPUSH
24984: CALL_OW 2
24988: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24989: LD_VAR 0 14
24993: PPUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 250
25003: PPUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 251
25013: PPUSH
25014: LD_INT 10
25016: PPUSH
25017: LD_INT 0
25019: PPUSH
25020: CALL_OW 50
// continue ;
25024: GO 24925
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25026: LD_VAR 0 12
25030: PUSH
25031: LD_INT 1
25033: ARRAY
25034: PPUSH
25035: CALL_OW 313
25039: PUSH
25040: LD_VAR 0 12
25044: PUSH
25045: LD_INT 1
25047: ARRAY
25048: PPUSH
25049: CALL_OW 266
25053: PUSH
25054: LD_INT 32
25056: PUSH
25057: LD_INT 31
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: IN
25064: AND
25065: PUSH
25066: LD_VAR 0 12
25070: PUSH
25071: LD_INT 1
25073: ARRAY
25074: PPUSH
25075: CALL_OW 313
25079: PUSH
25080: LD_INT 6
25082: EQUAL
25083: OR
25084: IFFALSE 25104
// f := Delete ( f , 1 ) ;
25086: LD_ADDR_VAR 0 12
25090: PUSH
25091: LD_VAR 0 12
25095: PPUSH
25096: LD_INT 1
25098: PPUSH
25099: CALL_OW 3
25103: ST_TO_ADDR
// if not f then
25104: LD_VAR 0 12
25108: NOT
25109: IFFALSE 25127
// begin x := x + 2 ;
25111: LD_ADDR_VAR 0 13
25115: PUSH
25116: LD_VAR 0 13
25120: PUSH
25121: LD_INT 2
25123: PLUS
25124: ST_TO_ADDR
// continue ;
25125: GO 24925
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25127: LD_VAR 0 12
25131: PUSH
25132: LD_INT 1
25134: ARRAY
25135: PPUSH
25136: CALL_OW 266
25140: PUSH
25141: LD_INT 5
25143: EQUAL
25144: IFFALSE 25218
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25146: LD_VAR 0 12
25150: PUSH
25151: LD_INT 1
25153: ARRAY
25154: PPUSH
25155: CALL_OW 313
25159: PUSH
25160: LD_INT 3
25162: LESS
25163: IFFALSE 25199
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25165: LD_INT 0
25167: PPUSH
25168: LD_INT 5
25170: PUSH
25171: LD_INT 8
25173: PUSH
25174: LD_INT 9
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: PUSH
25182: LD_VAR 0 17
25186: ARRAY
25187: PPUSH
25188: LD_VAR 0 4
25192: PPUSH
25193: CALL_OW 380
25197: GO 25216
// PrepareHuman ( false , i , skill ) ;
25199: LD_INT 0
25201: PPUSH
25202: LD_VAR 0 8
25206: PPUSH
25207: LD_VAR 0 4
25211: PPUSH
25212: CALL_OW 380
// end else
25216: GO 25235
// PrepareHuman ( false , i , skill ) ;
25218: LD_INT 0
25220: PPUSH
25221: LD_VAR 0 8
25225: PPUSH
25226: LD_VAR 0 4
25230: PPUSH
25231: CALL_OW 380
// un := CreateHuman ;
25235: LD_ADDR_VAR 0 14
25239: PUSH
25240: CALL_OW 44
25244: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25245: LD_ADDR_VAR 0 7
25249: PUSH
25250: LD_VAR 0 7
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: LD_VAR 0 14
25262: PPUSH
25263: CALL_OW 2
25267: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25268: LD_VAR 0 14
25272: PPUSH
25273: LD_VAR 0 12
25277: PUSH
25278: LD_INT 1
25280: ARRAY
25281: PPUSH
25282: CALL_OW 52
// end ;
25286: GO 24925
25288: POP
25289: POP
// end ;
25290: GO 24227
25292: POP
25293: POP
// result := result ^ buildings ;
25294: LD_ADDR_VAR 0 7
25298: PUSH
25299: LD_VAR 0 7
25303: PUSH
25304: LD_VAR 0 18
25308: ADD
25309: ST_TO_ADDR
// end else
25310: GO 25453
// begin for i = 1 to personel do
25312: LD_ADDR_VAR 0 8
25316: PUSH
25317: DOUBLE
25318: LD_INT 1
25320: DEC
25321: ST_TO_ADDR
25322: LD_VAR 0 6
25326: PUSH
25327: FOR_TO
25328: IFFALSE 25451
// begin if i > 4 then
25330: LD_VAR 0 8
25334: PUSH
25335: LD_INT 4
25337: GREATER
25338: IFFALSE 25342
// break ;
25340: GO 25451
// x := personel [ i ] ;
25342: LD_ADDR_VAR 0 13
25346: PUSH
25347: LD_VAR 0 6
25351: PUSH
25352: LD_VAR 0 8
25356: ARRAY
25357: ST_TO_ADDR
// if x = - 1 then
25358: LD_VAR 0 13
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: EQUAL
25367: IFFALSE 25371
// continue ;
25369: GO 25327
// PrepareHuman ( false , i , skill ) ;
25371: LD_INT 0
25373: PPUSH
25374: LD_VAR 0 8
25378: PPUSH
25379: LD_VAR 0 4
25383: PPUSH
25384: CALL_OW 380
// un := CreateHuman ;
25388: LD_ADDR_VAR 0 14
25392: PUSH
25393: CALL_OW 44
25397: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25398: LD_VAR 0 14
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 250
25412: PPUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 251
25422: PPUSH
25423: LD_INT 10
25425: PPUSH
25426: LD_INT 0
25428: PPUSH
25429: CALL_OW 50
// result := result ^ un ;
25433: LD_ADDR_VAR 0 7
25437: PUSH
25438: LD_VAR 0 7
25442: PUSH
25443: LD_VAR 0 14
25447: ADD
25448: ST_TO_ADDR
// end ;
25449: GO 25327
25451: POP
25452: POP
// end ; end ;
25453: LD_VAR 0 7
25457: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25458: LD_INT 0
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
// result := false ;
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: LD_INT 0
25483: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25484: LD_VAR 0 1
25488: NOT
25489: PUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 266
25499: PUSH
25500: LD_INT 32
25502: PUSH
25503: LD_INT 33
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: IN
25510: NOT
25511: OR
25512: IFFALSE 25516
// exit ;
25514: GO 26625
// nat := GetNation ( tower ) ;
25516: LD_ADDR_VAR 0 12
25520: PUSH
25521: LD_VAR 0 1
25525: PPUSH
25526: CALL_OW 248
25530: ST_TO_ADDR
// side := GetSide ( tower ) ;
25531: LD_ADDR_VAR 0 16
25535: PUSH
25536: LD_VAR 0 1
25540: PPUSH
25541: CALL_OW 255
25545: ST_TO_ADDR
// x := GetX ( tower ) ;
25546: LD_ADDR_VAR 0 10
25550: PUSH
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL_OW 250
25560: ST_TO_ADDR
// y := GetY ( tower ) ;
25561: LD_ADDR_VAR 0 11
25565: PUSH
25566: LD_VAR 0 1
25570: PPUSH
25571: CALL_OW 251
25575: ST_TO_ADDR
// if not x or not y then
25576: LD_VAR 0 10
25580: NOT
25581: PUSH
25582: LD_VAR 0 11
25586: NOT
25587: OR
25588: IFFALSE 25592
// exit ;
25590: GO 26625
// weapon := 0 ;
25592: LD_ADDR_VAR 0 18
25596: PUSH
25597: LD_INT 0
25599: ST_TO_ADDR
// fac_list := [ ] ;
25600: LD_ADDR_VAR 0 17
25604: PUSH
25605: EMPTY
25606: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25607: LD_ADDR_VAR 0 6
25611: PUSH
25612: LD_VAR 0 1
25616: PPUSH
25617: CALL_OW 274
25621: PPUSH
25622: LD_VAR 0 2
25626: PPUSH
25627: LD_INT 0
25629: PPUSH
25630: CALL 23196 0 3
25634: PPUSH
25635: LD_INT 30
25637: PUSH
25638: LD_INT 3
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PPUSH
25645: CALL_OW 72
25649: ST_TO_ADDR
// if not factories then
25650: LD_VAR 0 6
25654: NOT
25655: IFFALSE 25659
// exit ;
25657: GO 26625
// for i in factories do
25659: LD_ADDR_VAR 0 8
25663: PUSH
25664: LD_VAR 0 6
25668: PUSH
25669: FOR_IN
25670: IFFALSE 25695
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25672: LD_ADDR_VAR 0 17
25676: PUSH
25677: LD_VAR 0 17
25681: PUSH
25682: LD_VAR 0 8
25686: PPUSH
25687: CALL_OW 478
25691: UNION
25692: ST_TO_ADDR
25693: GO 25669
25695: POP
25696: POP
// if not fac_list then
25697: LD_VAR 0 17
25701: NOT
25702: IFFALSE 25706
// exit ;
25704: GO 26625
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25706: LD_ADDR_VAR 0 5
25710: PUSH
25711: LD_INT 4
25713: PUSH
25714: LD_INT 5
25716: PUSH
25717: LD_INT 9
25719: PUSH
25720: LD_INT 10
25722: PUSH
25723: LD_INT 6
25725: PUSH
25726: LD_INT 7
25728: PUSH
25729: LD_INT 11
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 27
25743: PUSH
25744: LD_INT 28
25746: PUSH
25747: LD_INT 26
25749: PUSH
25750: LD_INT 30
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 43
25761: PUSH
25762: LD_INT 44
25764: PUSH
25765: LD_INT 46
25767: PUSH
25768: LD_INT 45
25770: PUSH
25771: LD_INT 47
25773: PUSH
25774: LD_INT 49
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: LIST
25789: PUSH
25790: LD_VAR 0 12
25794: ARRAY
25795: ST_TO_ADDR
// list := list isect fac_list ;
25796: LD_ADDR_VAR 0 5
25800: PUSH
25801: LD_VAR 0 5
25805: PUSH
25806: LD_VAR 0 17
25810: ISECT
25811: ST_TO_ADDR
// if not list then
25812: LD_VAR 0 5
25816: NOT
25817: IFFALSE 25821
// exit ;
25819: GO 26625
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25821: LD_VAR 0 12
25825: PUSH
25826: LD_INT 3
25828: EQUAL
25829: PUSH
25830: LD_INT 49
25832: PUSH
25833: LD_VAR 0 5
25837: IN
25838: AND
25839: PUSH
25840: LD_INT 31
25842: PPUSH
25843: LD_VAR 0 16
25847: PPUSH
25848: CALL_OW 321
25852: PUSH
25853: LD_INT 2
25855: EQUAL
25856: AND
25857: IFFALSE 25917
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25859: LD_INT 22
25861: PUSH
25862: LD_VAR 0 16
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 35
25873: PUSH
25874: LD_INT 49
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 91
25883: PUSH
25884: LD_VAR 0 1
25888: PUSH
25889: LD_INT 10
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: PPUSH
25902: CALL_OW 69
25906: NOT
25907: IFFALSE 25917
// weapon := ru_time_lapser ;
25909: LD_ADDR_VAR 0 18
25913: PUSH
25914: LD_INT 49
25916: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25917: LD_VAR 0 12
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: LD_INT 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: IN
25932: PUSH
25933: LD_INT 11
25935: PUSH
25936: LD_VAR 0 5
25940: IN
25941: PUSH
25942: LD_INT 30
25944: PUSH
25945: LD_VAR 0 5
25949: IN
25950: OR
25951: AND
25952: PUSH
25953: LD_INT 6
25955: PPUSH
25956: LD_VAR 0 16
25960: PPUSH
25961: CALL_OW 321
25965: PUSH
25966: LD_INT 2
25968: EQUAL
25969: AND
25970: IFFALSE 26135
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25972: LD_INT 22
25974: PUSH
25975: LD_VAR 0 16
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 35
25989: PUSH
25990: LD_INT 11
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 35
25999: PUSH
26000: LD_INT 30
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 91
26014: PUSH
26015: LD_VAR 0 1
26019: PUSH
26020: LD_INT 18
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: PPUSH
26033: CALL_OW 69
26037: NOT
26038: PUSH
26039: LD_INT 22
26041: PUSH
26042: LD_VAR 0 16
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 30
26056: PUSH
26057: LD_INT 32
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 30
26066: PUSH
26067: LD_INT 33
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 91
26081: PUSH
26082: LD_VAR 0 1
26086: PUSH
26087: LD_INT 12
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: PUSH
26100: EMPTY
26101: LIST
26102: PPUSH
26103: CALL_OW 69
26107: PUSH
26108: LD_INT 2
26110: GREATER
26111: AND
26112: IFFALSE 26135
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26114: LD_ADDR_VAR 0 18
26118: PUSH
26119: LD_INT 11
26121: PUSH
26122: LD_INT 30
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_VAR 0 12
26133: ARRAY
26134: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26135: LD_VAR 0 18
26139: NOT
26140: PUSH
26141: LD_INT 40
26143: PPUSH
26144: LD_VAR 0 16
26148: PPUSH
26149: CALL_OW 321
26153: PUSH
26154: LD_INT 2
26156: EQUAL
26157: AND
26158: PUSH
26159: LD_INT 7
26161: PUSH
26162: LD_VAR 0 5
26166: IN
26167: PUSH
26168: LD_INT 28
26170: PUSH
26171: LD_VAR 0 5
26175: IN
26176: OR
26177: PUSH
26178: LD_INT 45
26180: PUSH
26181: LD_VAR 0 5
26185: IN
26186: OR
26187: AND
26188: IFFALSE 26442
// begin hex := GetHexInfo ( x , y ) ;
26190: LD_ADDR_VAR 0 4
26194: PUSH
26195: LD_VAR 0 10
26199: PPUSH
26200: LD_VAR 0 11
26204: PPUSH
26205: CALL_OW 546
26209: ST_TO_ADDR
// if hex [ 1 ] then
26210: LD_VAR 0 4
26214: PUSH
26215: LD_INT 1
26217: ARRAY
26218: IFFALSE 26222
// exit ;
26220: GO 26625
// height := hex [ 2 ] ;
26222: LD_ADDR_VAR 0 15
26226: PUSH
26227: LD_VAR 0 4
26231: PUSH
26232: LD_INT 2
26234: ARRAY
26235: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26236: LD_ADDR_VAR 0 14
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: LD_INT 3
26249: PUSH
26250: LD_INT 5
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// for i in tmp do
26259: LD_ADDR_VAR 0 8
26263: PUSH
26264: LD_VAR 0 14
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26440
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26272: LD_ADDR_VAR 0 9
26276: PUSH
26277: LD_VAR 0 10
26281: PPUSH
26282: LD_VAR 0 8
26286: PPUSH
26287: LD_INT 5
26289: PPUSH
26290: CALL_OW 272
26294: PUSH
26295: LD_VAR 0 11
26299: PPUSH
26300: LD_VAR 0 8
26304: PPUSH
26305: LD_INT 5
26307: PPUSH
26308: CALL_OW 273
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26317: LD_VAR 0 9
26321: PUSH
26322: LD_INT 1
26324: ARRAY
26325: PPUSH
26326: LD_VAR 0 9
26330: PUSH
26331: LD_INT 2
26333: ARRAY
26334: PPUSH
26335: CALL_OW 488
26339: IFFALSE 26438
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26341: LD_ADDR_VAR 0 4
26345: PUSH
26346: LD_VAR 0 9
26350: PUSH
26351: LD_INT 1
26353: ARRAY
26354: PPUSH
26355: LD_VAR 0 9
26359: PUSH
26360: LD_INT 2
26362: ARRAY
26363: PPUSH
26364: CALL_OW 546
26368: ST_TO_ADDR
// if hex [ 1 ] then
26369: LD_VAR 0 4
26373: PUSH
26374: LD_INT 1
26376: ARRAY
26377: IFFALSE 26381
// continue ;
26379: GO 26269
// h := hex [ 2 ] ;
26381: LD_ADDR_VAR 0 13
26385: PUSH
26386: LD_VAR 0 4
26390: PUSH
26391: LD_INT 2
26393: ARRAY
26394: ST_TO_ADDR
// if h + 7 < height then
26395: LD_VAR 0 13
26399: PUSH
26400: LD_INT 7
26402: PLUS
26403: PUSH
26404: LD_VAR 0 15
26408: LESS
26409: IFFALSE 26438
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26411: LD_ADDR_VAR 0 18
26415: PUSH
26416: LD_INT 7
26418: PUSH
26419: LD_INT 28
26421: PUSH
26422: LD_INT 45
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: PUSH
26430: LD_VAR 0 12
26434: ARRAY
26435: ST_TO_ADDR
// break ;
26436: GO 26440
// end ; end ; end ;
26438: GO 26269
26440: POP
26441: POP
// end ; if not weapon then
26442: LD_VAR 0 18
26446: NOT
26447: IFFALSE 26507
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26449: LD_ADDR_VAR 0 5
26453: PUSH
26454: LD_VAR 0 5
26458: PUSH
26459: LD_INT 11
26461: PUSH
26462: LD_INT 30
26464: PUSH
26465: LD_INT 49
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: DIFF
26473: ST_TO_ADDR
// if not list then
26474: LD_VAR 0 5
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26625
// weapon := list [ rand ( 1 , list ) ] ;
26483: LD_ADDR_VAR 0 18
26487: PUSH
26488: LD_VAR 0 5
26492: PUSH
26493: LD_INT 1
26495: PPUSH
26496: LD_VAR 0 5
26500: PPUSH
26501: CALL_OW 12
26505: ARRAY
26506: ST_TO_ADDR
// end ; if weapon then
26507: LD_VAR 0 18
26511: IFFALSE 26625
// begin tmp := CostOfWeapon ( weapon ) ;
26513: LD_ADDR_VAR 0 14
26517: PUSH
26518: LD_VAR 0 18
26522: PPUSH
26523: CALL_OW 451
26527: ST_TO_ADDR
// j := GetBase ( tower ) ;
26528: LD_ADDR_VAR 0 9
26532: PUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL_OW 274
26542: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26543: LD_VAR 0 9
26547: PPUSH
26548: LD_INT 1
26550: PPUSH
26551: CALL_OW 275
26555: PUSH
26556: LD_VAR 0 14
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: GREATEREQUAL
26565: PUSH
26566: LD_VAR 0 9
26570: PPUSH
26571: LD_INT 2
26573: PPUSH
26574: CALL_OW 275
26578: PUSH
26579: LD_VAR 0 14
26583: PUSH
26584: LD_INT 2
26586: ARRAY
26587: GREATEREQUAL
26588: AND
26589: PUSH
26590: LD_VAR 0 9
26594: PPUSH
26595: LD_INT 3
26597: PPUSH
26598: CALL_OW 275
26602: PUSH
26603: LD_VAR 0 14
26607: PUSH
26608: LD_INT 3
26610: ARRAY
26611: GREATEREQUAL
26612: AND
26613: IFFALSE 26625
// result := weapon ;
26615: LD_ADDR_VAR 0 3
26619: PUSH
26620: LD_VAR 0 18
26624: ST_TO_ADDR
// end ; end ;
26625: LD_VAR 0 3
26629: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26630: LD_INT 0
26632: PPUSH
26633: PPUSH
// result := true ;
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 1
26641: ST_TO_ADDR
// if array1 = array2 then
26642: LD_VAR 0 1
26646: PUSH
26647: LD_VAR 0 2
26651: EQUAL
26652: IFFALSE 26712
// begin for i = 1 to array1 do
26654: LD_ADDR_VAR 0 4
26658: PUSH
26659: DOUBLE
26660: LD_INT 1
26662: DEC
26663: ST_TO_ADDR
26664: LD_VAR 0 1
26668: PUSH
26669: FOR_TO
26670: IFFALSE 26708
// if array1 [ i ] <> array2 [ i ] then
26672: LD_VAR 0 1
26676: PUSH
26677: LD_VAR 0 4
26681: ARRAY
26682: PUSH
26683: LD_VAR 0 2
26687: PUSH
26688: LD_VAR 0 4
26692: ARRAY
26693: NONEQUAL
26694: IFFALSE 26706
// begin result := false ;
26696: LD_ADDR_VAR 0 3
26700: PUSH
26701: LD_INT 0
26703: ST_TO_ADDR
// break ;
26704: GO 26708
// end ;
26706: GO 26669
26708: POP
26709: POP
// end else
26710: GO 26720
// result := false ;
26712: LD_ADDR_VAR 0 3
26716: PUSH
26717: LD_INT 0
26719: ST_TO_ADDR
// end ;
26720: LD_VAR 0 3
26724: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
// if not array1 or not array2 then
26729: LD_VAR 0 1
26733: NOT
26734: PUSH
26735: LD_VAR 0 2
26739: NOT
26740: OR
26741: IFFALSE 26745
// exit ;
26743: GO 26809
// result := true ;
26745: LD_ADDR_VAR 0 3
26749: PUSH
26750: LD_INT 1
26752: ST_TO_ADDR
// for i = 1 to array1 do
26753: LD_ADDR_VAR 0 4
26757: PUSH
26758: DOUBLE
26759: LD_INT 1
26761: DEC
26762: ST_TO_ADDR
26763: LD_VAR 0 1
26767: PUSH
26768: FOR_TO
26769: IFFALSE 26807
// if array1 [ i ] <> array2 [ i ] then
26771: LD_VAR 0 1
26775: PUSH
26776: LD_VAR 0 4
26780: ARRAY
26781: PUSH
26782: LD_VAR 0 2
26786: PUSH
26787: LD_VAR 0 4
26791: ARRAY
26792: NONEQUAL
26793: IFFALSE 26805
// begin result := false ;
26795: LD_ADDR_VAR 0 3
26799: PUSH
26800: LD_INT 0
26802: ST_TO_ADDR
// break ;
26803: GO 26807
// end ;
26805: GO 26768
26807: POP
26808: POP
// end ;
26809: LD_VAR 0 3
26813: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
26818: PPUSH
// pom := GetBase ( fac ) ;
26819: LD_ADDR_VAR 0 5
26823: PUSH
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 274
26833: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26834: LD_ADDR_VAR 0 4
26838: PUSH
26839: LD_VAR 0 2
26843: PUSH
26844: LD_INT 1
26846: ARRAY
26847: PPUSH
26848: LD_VAR 0 2
26852: PUSH
26853: LD_INT 2
26855: ARRAY
26856: PPUSH
26857: LD_VAR 0 2
26861: PUSH
26862: LD_INT 3
26864: ARRAY
26865: PPUSH
26866: LD_VAR 0 2
26870: PUSH
26871: LD_INT 4
26873: ARRAY
26874: PPUSH
26875: CALL_OW 449
26879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26880: LD_ADDR_VAR 0 3
26884: PUSH
26885: LD_VAR 0 5
26889: PPUSH
26890: LD_INT 1
26892: PPUSH
26893: CALL_OW 275
26897: PUSH
26898: LD_VAR 0 4
26902: PUSH
26903: LD_INT 1
26905: ARRAY
26906: GREATEREQUAL
26907: PUSH
26908: LD_VAR 0 5
26912: PPUSH
26913: LD_INT 2
26915: PPUSH
26916: CALL_OW 275
26920: PUSH
26921: LD_VAR 0 4
26925: PUSH
26926: LD_INT 2
26928: ARRAY
26929: GREATEREQUAL
26930: AND
26931: PUSH
26932: LD_VAR 0 5
26936: PPUSH
26937: LD_INT 3
26939: PPUSH
26940: CALL_OW 275
26944: PUSH
26945: LD_VAR 0 4
26949: PUSH
26950: LD_INT 3
26952: ARRAY
26953: GREATEREQUAL
26954: AND
26955: ST_TO_ADDR
// end ;
26956: LD_VAR 0 3
26960: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26961: LD_INT 0
26963: PPUSH
26964: PPUSH
26965: PPUSH
26966: PPUSH
// pom := GetBase ( building ) ;
26967: LD_ADDR_VAR 0 3
26971: PUSH
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL_OW 274
26981: ST_TO_ADDR
// if not pom then
26982: LD_VAR 0 3
26986: NOT
26987: IFFALSE 26991
// exit ;
26989: GO 27161
// btype := GetBType ( building ) ;
26991: LD_ADDR_VAR 0 5
26995: PUSH
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL_OW 266
27005: ST_TO_ADDR
// if btype = b_armoury then
27006: LD_VAR 0 5
27010: PUSH
27011: LD_INT 4
27013: EQUAL
27014: IFFALSE 27024
// btype := b_barracks ;
27016: LD_ADDR_VAR 0 5
27020: PUSH
27021: LD_INT 5
27023: ST_TO_ADDR
// if btype = b_depot then
27024: LD_VAR 0 5
27028: PUSH
27029: LD_INT 0
27031: EQUAL
27032: IFFALSE 27042
// btype := b_warehouse ;
27034: LD_ADDR_VAR 0 5
27038: PUSH
27039: LD_INT 1
27041: ST_TO_ADDR
// if btype = b_workshop then
27042: LD_VAR 0 5
27046: PUSH
27047: LD_INT 2
27049: EQUAL
27050: IFFALSE 27060
// btype := b_factory ;
27052: LD_ADDR_VAR 0 5
27056: PUSH
27057: LD_INT 3
27059: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27060: LD_ADDR_VAR 0 4
27064: PUSH
27065: LD_VAR 0 5
27069: PPUSH
27070: LD_VAR 0 1
27074: PPUSH
27075: CALL_OW 248
27079: PPUSH
27080: CALL_OW 450
27084: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27085: LD_ADDR_VAR 0 2
27089: PUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: LD_INT 1
27097: PPUSH
27098: CALL_OW 275
27102: PUSH
27103: LD_VAR 0 4
27107: PUSH
27108: LD_INT 1
27110: ARRAY
27111: GREATEREQUAL
27112: PUSH
27113: LD_VAR 0 3
27117: PPUSH
27118: LD_INT 2
27120: PPUSH
27121: CALL_OW 275
27125: PUSH
27126: LD_VAR 0 4
27130: PUSH
27131: LD_INT 2
27133: ARRAY
27134: GREATEREQUAL
27135: AND
27136: PUSH
27137: LD_VAR 0 3
27141: PPUSH
27142: LD_INT 3
27144: PPUSH
27145: CALL_OW 275
27149: PUSH
27150: LD_VAR 0 4
27154: PUSH
27155: LD_INT 3
27157: ARRAY
27158: GREATEREQUAL
27159: AND
27160: ST_TO_ADDR
// end ;
27161: LD_VAR 0 2
27165: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27166: LD_INT 0
27168: PPUSH
27169: PPUSH
27170: PPUSH
// pom := GetBase ( building ) ;
27171: LD_ADDR_VAR 0 4
27175: PUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 274
27185: ST_TO_ADDR
// if not pom then
27186: LD_VAR 0 4
27190: NOT
27191: IFFALSE 27195
// exit ;
27193: GO 27296
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27195: LD_ADDR_VAR 0 5
27199: PUSH
27200: LD_VAR 0 2
27204: PPUSH
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL_OW 248
27214: PPUSH
27215: CALL_OW 450
27219: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: LD_VAR 0 4
27229: PPUSH
27230: LD_INT 1
27232: PPUSH
27233: CALL_OW 275
27237: PUSH
27238: LD_VAR 0 5
27242: PUSH
27243: LD_INT 1
27245: ARRAY
27246: GREATEREQUAL
27247: PUSH
27248: LD_VAR 0 4
27252: PPUSH
27253: LD_INT 2
27255: PPUSH
27256: CALL_OW 275
27260: PUSH
27261: LD_VAR 0 5
27265: PUSH
27266: LD_INT 2
27268: ARRAY
27269: GREATEREQUAL
27270: AND
27271: PUSH
27272: LD_VAR 0 4
27276: PPUSH
27277: LD_INT 3
27279: PPUSH
27280: CALL_OW 275
27284: PUSH
27285: LD_VAR 0 5
27289: PUSH
27290: LD_INT 3
27292: ARRAY
27293: GREATEREQUAL
27294: AND
27295: ST_TO_ADDR
// end ;
27296: LD_VAR 0 3
27300: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27301: LD_INT 0
27303: PPUSH
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// result := false ;
27314: LD_ADDR_VAR 0 8
27318: PUSH
27319: LD_INT 0
27321: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27322: LD_VAR 0 5
27326: NOT
27327: PUSH
27328: LD_VAR 0 1
27332: NOT
27333: OR
27334: PUSH
27335: LD_VAR 0 2
27339: NOT
27340: OR
27341: PUSH
27342: LD_VAR 0 3
27346: NOT
27347: OR
27348: IFFALSE 27352
// exit ;
27350: GO 28166
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27352: LD_ADDR_VAR 0 14
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_VAR 0 3
27371: PPUSH
27372: LD_VAR 0 4
27376: PPUSH
27377: LD_VAR 0 5
27381: PUSH
27382: LD_INT 1
27384: ARRAY
27385: PPUSH
27386: CALL_OW 248
27390: PPUSH
27391: LD_INT 0
27393: PPUSH
27394: CALL 29399 0 6
27398: ST_TO_ADDR
// if not hexes then
27399: LD_VAR 0 14
27403: NOT
27404: IFFALSE 27408
// exit ;
27406: GO 28166
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27408: LD_ADDR_VAR 0 17
27412: PUSH
27413: LD_VAR 0 5
27417: PPUSH
27418: LD_INT 22
27420: PUSH
27421: LD_VAR 0 13
27425: PPUSH
27426: CALL_OW 255
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: LD_INT 30
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 30
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 72
27471: ST_TO_ADDR
// for i = 1 to hexes do
27472: LD_ADDR_VAR 0 9
27476: PUSH
27477: DOUBLE
27478: LD_INT 1
27480: DEC
27481: ST_TO_ADDR
27482: LD_VAR 0 14
27486: PUSH
27487: FOR_TO
27488: IFFALSE 28164
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27490: LD_ADDR_VAR 0 13
27494: PUSH
27495: LD_VAR 0 14
27499: PUSH
27500: LD_VAR 0 9
27504: ARRAY
27505: PUSH
27506: LD_INT 1
27508: ARRAY
27509: PPUSH
27510: LD_VAR 0 14
27514: PUSH
27515: LD_VAR 0 9
27519: ARRAY
27520: PUSH
27521: LD_INT 2
27523: ARRAY
27524: PPUSH
27525: CALL_OW 428
27529: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27530: LD_VAR 0 14
27534: PUSH
27535: LD_VAR 0 9
27539: ARRAY
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: PPUSH
27545: LD_VAR 0 14
27549: PUSH
27550: LD_VAR 0 9
27554: ARRAY
27555: PUSH
27556: LD_INT 2
27558: ARRAY
27559: PPUSH
27560: CALL_OW 351
27564: PUSH
27565: LD_VAR 0 14
27569: PUSH
27570: LD_VAR 0 9
27574: ARRAY
27575: PUSH
27576: LD_INT 1
27578: ARRAY
27579: PPUSH
27580: LD_VAR 0 14
27584: PUSH
27585: LD_VAR 0 9
27589: ARRAY
27590: PUSH
27591: LD_INT 2
27593: ARRAY
27594: PPUSH
27595: CALL_OW 488
27599: NOT
27600: OR
27601: PUSH
27602: LD_VAR 0 13
27606: PPUSH
27607: CALL_OW 247
27611: PUSH
27612: LD_INT 3
27614: EQUAL
27615: OR
27616: IFFALSE 27622
// exit ;
27618: POP
27619: POP
27620: GO 28166
// if not tmp then
27622: LD_VAR 0 13
27626: NOT
27627: IFFALSE 27631
// continue ;
27629: GO 27487
// result := true ;
27631: LD_ADDR_VAR 0 8
27635: PUSH
27636: LD_INT 1
27638: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27639: LD_VAR 0 6
27643: PUSH
27644: LD_VAR 0 13
27648: PPUSH
27649: CALL_OW 247
27653: PUSH
27654: LD_INT 2
27656: EQUAL
27657: AND
27658: PUSH
27659: LD_VAR 0 13
27663: PPUSH
27664: CALL_OW 263
27668: PUSH
27669: LD_INT 1
27671: EQUAL
27672: AND
27673: IFFALSE 27837
// begin if IsDrivenBy ( tmp ) then
27675: LD_VAR 0 13
27679: PPUSH
27680: CALL_OW 311
27684: IFFALSE 27688
// continue ;
27686: GO 27487
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27688: LD_VAR 0 6
27692: PPUSH
27693: LD_INT 3
27695: PUSH
27696: LD_INT 60
27698: PUSH
27699: EMPTY
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 3
27708: PUSH
27709: LD_INT 55
27711: PUSH
27712: EMPTY
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PPUSH
27723: CALL_OW 72
27727: IFFALSE 27835
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27729: LD_ADDR_VAR 0 18
27733: PUSH
27734: LD_VAR 0 6
27738: PPUSH
27739: LD_INT 3
27741: PUSH
27742: LD_INT 60
27744: PUSH
27745: EMPTY
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: LD_INT 55
27757: PUSH
27758: EMPTY
27759: LIST
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 72
27773: PUSH
27774: LD_INT 1
27776: ARRAY
27777: ST_TO_ADDR
// if IsInUnit ( driver ) then
27778: LD_VAR 0 18
27782: PPUSH
27783: CALL_OW 310
27787: IFFALSE 27798
// ComExit ( driver ) ;
27789: LD_VAR 0 18
27793: PPUSH
27794: CALL 53151 0 1
// AddComEnterUnit ( driver , tmp ) ;
27798: LD_VAR 0 18
27802: PPUSH
27803: LD_VAR 0 13
27807: PPUSH
27808: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27812: LD_VAR 0 18
27816: PPUSH
27817: LD_VAR 0 7
27821: PPUSH
27822: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27826: LD_VAR 0 18
27830: PPUSH
27831: CALL_OW 181
// end ; continue ;
27835: GO 27487
// end ; if not cleaners or not tmp in cleaners then
27837: LD_VAR 0 6
27841: NOT
27842: PUSH
27843: LD_VAR 0 13
27847: PUSH
27848: LD_VAR 0 6
27852: IN
27853: NOT
27854: OR
27855: IFFALSE 28162
// begin if dep then
27857: LD_VAR 0 17
27861: IFFALSE 27997
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27863: LD_ADDR_VAR 0 16
27867: PUSH
27868: LD_VAR 0 17
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: CALL_OW 250
27881: PPUSH
27882: LD_VAR 0 17
27886: PUSH
27887: LD_INT 1
27889: ARRAY
27890: PPUSH
27891: CALL_OW 254
27895: PPUSH
27896: LD_INT 5
27898: PPUSH
27899: CALL_OW 272
27903: PUSH
27904: LD_VAR 0 17
27908: PUSH
27909: LD_INT 1
27911: ARRAY
27912: PPUSH
27913: CALL_OW 251
27917: PPUSH
27918: LD_VAR 0 17
27922: PUSH
27923: LD_INT 1
27925: ARRAY
27926: PPUSH
27927: CALL_OW 254
27931: PPUSH
27932: LD_INT 5
27934: PPUSH
27935: CALL_OW 273
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27944: LD_VAR 0 16
27948: PUSH
27949: LD_INT 1
27951: ARRAY
27952: PPUSH
27953: LD_VAR 0 16
27957: PUSH
27958: LD_INT 2
27960: ARRAY
27961: PPUSH
27962: CALL_OW 488
27966: IFFALSE 27997
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27968: LD_VAR 0 13
27972: PPUSH
27973: LD_VAR 0 16
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: PPUSH
27982: LD_VAR 0 16
27986: PUSH
27987: LD_INT 2
27989: ARRAY
27990: PPUSH
27991: CALL_OW 111
// continue ;
27995: GO 27487
// end ; end ; r := GetDir ( tmp ) ;
27997: LD_ADDR_VAR 0 15
28001: PUSH
28002: LD_VAR 0 13
28006: PPUSH
28007: CALL_OW 254
28011: ST_TO_ADDR
// if r = 5 then
28012: LD_VAR 0 15
28016: PUSH
28017: LD_INT 5
28019: EQUAL
28020: IFFALSE 28030
// r := 0 ;
28022: LD_ADDR_VAR 0 15
28026: PUSH
28027: LD_INT 0
28029: ST_TO_ADDR
// for j = r to 5 do
28030: LD_ADDR_VAR 0 10
28034: PUSH
28035: DOUBLE
28036: LD_VAR 0 15
28040: DEC
28041: ST_TO_ADDR
28042: LD_INT 5
28044: PUSH
28045: FOR_TO
28046: IFFALSE 28160
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28048: LD_ADDR_VAR 0 11
28052: PUSH
28053: LD_VAR 0 13
28057: PPUSH
28058: CALL_OW 250
28062: PPUSH
28063: LD_VAR 0 10
28067: PPUSH
28068: LD_INT 2
28070: PPUSH
28071: CALL_OW 272
28075: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28076: LD_ADDR_VAR 0 12
28080: PUSH
28081: LD_VAR 0 13
28085: PPUSH
28086: CALL_OW 251
28090: PPUSH
28091: LD_VAR 0 10
28095: PPUSH
28096: LD_INT 2
28098: PPUSH
28099: CALL_OW 273
28103: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28104: LD_VAR 0 11
28108: PPUSH
28109: LD_VAR 0 12
28113: PPUSH
28114: CALL_OW 488
28118: PUSH
28119: LD_VAR 0 11
28123: PPUSH
28124: LD_VAR 0 12
28128: PPUSH
28129: CALL_OW 428
28133: NOT
28134: AND
28135: IFFALSE 28158
// begin ComMoveXY ( tmp , _x , _y ) ;
28137: LD_VAR 0 13
28141: PPUSH
28142: LD_VAR 0 11
28146: PPUSH
28147: LD_VAR 0 12
28151: PPUSH
28152: CALL_OW 111
// break ;
28156: GO 28160
// end ; end ;
28158: GO 28045
28160: POP
28161: POP
// end ; end ;
28162: GO 27487
28164: POP
28165: POP
// end ;
28166: LD_VAR 0 8
28170: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28171: LD_INT 0
28173: PPUSH
// result := true ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28182: LD_VAR 0 2
28186: PUSH
28187: LD_INT 24
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28201
28193: LD_INT 33
28195: DOUBLE
28196: EQUAL
28197: IFTRUE 28201
28199: GO 28226
28201: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28202: LD_ADDR_VAR 0 3
28206: PUSH
28207: LD_INT 32
28209: PPUSH
28210: LD_VAR 0 1
28214: PPUSH
28215: CALL_OW 321
28219: PUSH
28220: LD_INT 2
28222: EQUAL
28223: ST_TO_ADDR
28224: GO 28542
28226: LD_INT 20
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28234
28232: GO 28259
28234: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28235: LD_ADDR_VAR 0 3
28239: PUSH
28240: LD_INT 6
28242: PPUSH
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 321
28252: PUSH
28253: LD_INT 2
28255: EQUAL
28256: ST_TO_ADDR
28257: GO 28542
28259: LD_INT 22
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28273
28265: LD_INT 36
28267: DOUBLE
28268: EQUAL
28269: IFTRUE 28273
28271: GO 28298
28273: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: LD_INT 15
28281: PPUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 321
28291: PUSH
28292: LD_INT 2
28294: EQUAL
28295: ST_TO_ADDR
28296: GO 28542
28298: LD_INT 30
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 28331
28306: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28307: LD_ADDR_VAR 0 3
28311: PUSH
28312: LD_INT 20
28314: PPUSH
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL_OW 321
28324: PUSH
28325: LD_INT 2
28327: EQUAL
28328: ST_TO_ADDR
28329: GO 28542
28331: LD_INT 28
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28345
28337: LD_INT 21
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28370
28345: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_INT 21
28353: PPUSH
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 321
28363: PUSH
28364: LD_INT 2
28366: EQUAL
28367: ST_TO_ADDR
28368: GO 28542
28370: LD_INT 16
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28403
28378: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28379: LD_ADDR_VAR 0 3
28383: PUSH
28384: LD_INT 84
28386: PPUSH
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 321
28396: PUSH
28397: LD_INT 2
28399: EQUAL
28400: ST_TO_ADDR
28401: GO 28542
28403: LD_INT 19
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28417
28409: LD_INT 23
28411: DOUBLE
28412: EQUAL
28413: IFTRUE 28417
28415: GO 28442
28417: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28418: LD_ADDR_VAR 0 3
28422: PUSH
28423: LD_INT 83
28425: PPUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 321
28435: PUSH
28436: LD_INT 2
28438: EQUAL
28439: ST_TO_ADDR
28440: GO 28542
28442: LD_INT 17
28444: DOUBLE
28445: EQUAL
28446: IFTRUE 28450
28448: GO 28475
28450: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: LD_INT 39
28458: PPUSH
28459: LD_VAR 0 1
28463: PPUSH
28464: CALL_OW 321
28468: PUSH
28469: LD_INT 2
28471: EQUAL
28472: ST_TO_ADDR
28473: GO 28542
28475: LD_INT 18
28477: DOUBLE
28478: EQUAL
28479: IFTRUE 28483
28481: GO 28508
28483: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28484: LD_ADDR_VAR 0 3
28488: PUSH
28489: LD_INT 40
28491: PPUSH
28492: LD_VAR 0 1
28496: PPUSH
28497: CALL_OW 321
28501: PUSH
28502: LD_INT 2
28504: EQUAL
28505: ST_TO_ADDR
28506: GO 28542
28508: LD_INT 27
28510: DOUBLE
28511: EQUAL
28512: IFTRUE 28516
28514: GO 28541
28516: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_INT 35
28524: PPUSH
28525: LD_VAR 0 1
28529: PPUSH
28530: CALL_OW 321
28534: PUSH
28535: LD_INT 2
28537: EQUAL
28538: ST_TO_ADDR
28539: GO 28542
28541: POP
// end ;
28542: LD_VAR 0 3
28546: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28547: LD_INT 0
28549: PPUSH
28550: PPUSH
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
// result := false ;
28560: LD_ADDR_VAR 0 6
28564: PUSH
28565: LD_INT 0
28567: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28568: LD_VAR 0 1
28572: NOT
28573: PUSH
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL_OW 266
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: IN
28594: NOT
28595: OR
28596: PUSH
28597: LD_VAR 0 2
28601: NOT
28602: OR
28603: PUSH
28604: LD_VAR 0 5
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: LD_INT 4
28623: PUSH
28624: LD_INT 5
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: IN
28635: NOT
28636: OR
28637: PUSH
28638: LD_VAR 0 3
28642: PPUSH
28643: LD_VAR 0 4
28647: PPUSH
28648: CALL_OW 488
28652: NOT
28653: OR
28654: IFFALSE 28658
// exit ;
28656: GO 29394
// side := GetSide ( depot ) ;
28658: LD_ADDR_VAR 0 9
28662: PUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 255
28672: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28673: LD_VAR 0 9
28677: PPUSH
28678: LD_VAR 0 2
28682: PPUSH
28683: CALL 28171 0 2
28687: NOT
28688: IFFALSE 28692
// exit ;
28690: GO 29394
// pom := GetBase ( depot ) ;
28692: LD_ADDR_VAR 0 10
28696: PUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL_OW 274
28706: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28707: LD_ADDR_VAR 0 11
28711: PUSH
28712: LD_VAR 0 2
28716: PPUSH
28717: LD_VAR 0 1
28721: PPUSH
28722: CALL_OW 248
28726: PPUSH
28727: CALL_OW 450
28731: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28732: LD_VAR 0 10
28736: PPUSH
28737: LD_INT 1
28739: PPUSH
28740: CALL_OW 275
28744: PUSH
28745: LD_VAR 0 11
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: GREATEREQUAL
28754: PUSH
28755: LD_VAR 0 10
28759: PPUSH
28760: LD_INT 2
28762: PPUSH
28763: CALL_OW 275
28767: PUSH
28768: LD_VAR 0 11
28772: PUSH
28773: LD_INT 2
28775: ARRAY
28776: GREATEREQUAL
28777: AND
28778: PUSH
28779: LD_VAR 0 10
28783: PPUSH
28784: LD_INT 3
28786: PPUSH
28787: CALL_OW 275
28791: PUSH
28792: LD_VAR 0 11
28796: PUSH
28797: LD_INT 3
28799: ARRAY
28800: GREATEREQUAL
28801: AND
28802: NOT
28803: IFFALSE 28807
// exit ;
28805: GO 29394
// if GetBType ( depot ) = b_depot then
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 266
28816: PUSH
28817: LD_INT 0
28819: EQUAL
28820: IFFALSE 28832
// dist := 28 else
28822: LD_ADDR_VAR 0 14
28826: PUSH
28827: LD_INT 28
28829: ST_TO_ADDR
28830: GO 28840
// dist := 36 ;
28832: LD_ADDR_VAR 0 14
28836: PUSH
28837: LD_INT 36
28839: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28840: LD_VAR 0 1
28844: PPUSH
28845: LD_VAR 0 3
28849: PPUSH
28850: LD_VAR 0 4
28854: PPUSH
28855: CALL_OW 297
28859: PUSH
28860: LD_VAR 0 14
28864: GREATER
28865: IFFALSE 28869
// exit ;
28867: GO 29394
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28869: LD_ADDR_VAR 0 12
28873: PUSH
28874: LD_VAR 0 2
28878: PPUSH
28879: LD_VAR 0 3
28883: PPUSH
28884: LD_VAR 0 4
28888: PPUSH
28889: LD_VAR 0 5
28893: PPUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 248
28903: PPUSH
28904: LD_INT 0
28906: PPUSH
28907: CALL 29399 0 6
28911: ST_TO_ADDR
// if not hexes then
28912: LD_VAR 0 12
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 29394
// hex := GetHexInfo ( x , y ) ;
28921: LD_ADDR_VAR 0 15
28925: PUSH
28926: LD_VAR 0 3
28930: PPUSH
28931: LD_VAR 0 4
28935: PPUSH
28936: CALL_OW 546
28940: ST_TO_ADDR
// if hex [ 1 ] then
28941: LD_VAR 0 15
28945: PUSH
28946: LD_INT 1
28948: ARRAY
28949: IFFALSE 28953
// exit ;
28951: GO 29394
// height := hex [ 2 ] ;
28953: LD_ADDR_VAR 0 13
28957: PUSH
28958: LD_VAR 0 15
28962: PUSH
28963: LD_INT 2
28965: ARRAY
28966: ST_TO_ADDR
// for i = 1 to hexes do
28967: LD_ADDR_VAR 0 7
28971: PUSH
28972: DOUBLE
28973: LD_INT 1
28975: DEC
28976: ST_TO_ADDR
28977: LD_VAR 0 12
28981: PUSH
28982: FOR_TO
28983: IFFALSE 29313
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28985: LD_VAR 0 12
28989: PUSH
28990: LD_VAR 0 7
28994: ARRAY
28995: PUSH
28996: LD_INT 1
28998: ARRAY
28999: PPUSH
29000: LD_VAR 0 12
29004: PUSH
29005: LD_VAR 0 7
29009: ARRAY
29010: PUSH
29011: LD_INT 2
29013: ARRAY
29014: PPUSH
29015: CALL_OW 488
29019: NOT
29020: PUSH
29021: LD_VAR 0 12
29025: PUSH
29026: LD_VAR 0 7
29030: ARRAY
29031: PUSH
29032: LD_INT 1
29034: ARRAY
29035: PPUSH
29036: LD_VAR 0 12
29040: PUSH
29041: LD_VAR 0 7
29045: ARRAY
29046: PUSH
29047: LD_INT 2
29049: ARRAY
29050: PPUSH
29051: CALL_OW 428
29055: PUSH
29056: LD_INT 0
29058: GREATER
29059: OR
29060: PUSH
29061: LD_VAR 0 12
29065: PUSH
29066: LD_VAR 0 7
29070: ARRAY
29071: PUSH
29072: LD_INT 1
29074: ARRAY
29075: PPUSH
29076: LD_VAR 0 12
29080: PUSH
29081: LD_VAR 0 7
29085: ARRAY
29086: PUSH
29087: LD_INT 2
29089: ARRAY
29090: PPUSH
29091: CALL_OW 351
29095: OR
29096: IFFALSE 29102
// exit ;
29098: POP
29099: POP
29100: GO 29394
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29102: LD_ADDR_VAR 0 8
29106: PUSH
29107: LD_VAR 0 12
29111: PUSH
29112: LD_VAR 0 7
29116: ARRAY
29117: PUSH
29118: LD_INT 1
29120: ARRAY
29121: PPUSH
29122: LD_VAR 0 12
29126: PUSH
29127: LD_VAR 0 7
29131: ARRAY
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PPUSH
29137: CALL_OW 546
29141: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29142: LD_VAR 0 8
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PUSH
29151: LD_VAR 0 8
29155: PUSH
29156: LD_INT 2
29158: ARRAY
29159: PUSH
29160: LD_VAR 0 13
29164: PUSH
29165: LD_INT 2
29167: PLUS
29168: GREATER
29169: OR
29170: PUSH
29171: LD_VAR 0 8
29175: PUSH
29176: LD_INT 2
29178: ARRAY
29179: PUSH
29180: LD_VAR 0 13
29184: PUSH
29185: LD_INT 2
29187: MINUS
29188: LESS
29189: OR
29190: PUSH
29191: LD_VAR 0 8
29195: PUSH
29196: LD_INT 3
29198: ARRAY
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 8
29205: PUSH
29206: LD_INT 9
29208: PUSH
29209: LD_INT 10
29211: PUSH
29212: LD_INT 11
29214: PUSH
29215: LD_INT 12
29217: PUSH
29218: LD_INT 13
29220: PUSH
29221: LD_INT 16
29223: PUSH
29224: LD_INT 17
29226: PUSH
29227: LD_INT 18
29229: PUSH
29230: LD_INT 19
29232: PUSH
29233: LD_INT 20
29235: PUSH
29236: LD_INT 21
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: IN
29254: NOT
29255: OR
29256: PUSH
29257: LD_VAR 0 8
29261: PUSH
29262: LD_INT 5
29264: ARRAY
29265: NOT
29266: OR
29267: PUSH
29268: LD_VAR 0 8
29272: PUSH
29273: LD_INT 6
29275: ARRAY
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 7
29285: PUSH
29286: LD_INT 9
29288: PUSH
29289: LD_INT 10
29291: PUSH
29292: LD_INT 11
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: IN
29303: NOT
29304: OR
29305: IFFALSE 29311
// exit ;
29307: POP
29308: POP
29309: GO 29394
// end ;
29311: GO 28982
29313: POP
29314: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29315: LD_VAR 0 9
29319: PPUSH
29320: LD_VAR 0 3
29324: PPUSH
29325: LD_VAR 0 4
29329: PPUSH
29330: LD_INT 20
29332: PPUSH
29333: CALL 21346 0 4
29337: PUSH
29338: LD_INT 4
29340: ARRAY
29341: IFFALSE 29345
// exit ;
29343: GO 29394
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29345: LD_VAR 0 2
29349: PUSH
29350: LD_INT 29
29352: PUSH
29353: LD_INT 30
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: IN
29360: PUSH
29361: LD_VAR 0 3
29365: PPUSH
29366: LD_VAR 0 4
29370: PPUSH
29371: LD_VAR 0 9
29375: PPUSH
29376: CALL_OW 440
29380: NOT
29381: AND
29382: IFFALSE 29386
// exit ;
29384: GO 29394
// result := true ;
29386: LD_ADDR_VAR 0 6
29390: PUSH
29391: LD_INT 1
29393: ST_TO_ADDR
// end ;
29394: LD_VAR 0 6
29398: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29399: LD_INT 0
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
29431: PPUSH
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
// result = [ ] ;
29459: LD_ADDR_VAR 0 7
29463: PUSH
29464: EMPTY
29465: ST_TO_ADDR
// temp_list = [ ] ;
29466: LD_ADDR_VAR 0 9
29470: PUSH
29471: EMPTY
29472: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29473: LD_VAR 0 4
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 3
29489: PUSH
29490: LD_INT 4
29492: PUSH
29493: LD_INT 5
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: IN
29504: NOT
29505: PUSH
29506: LD_VAR 0 1
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: IN
29521: PUSH
29522: LD_VAR 0 5
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: IN
29541: NOT
29542: AND
29543: OR
29544: IFFALSE 29548
// exit ;
29546: GO 47939
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29548: LD_VAR 0 1
29552: PUSH
29553: LD_INT 6
29555: PUSH
29556: LD_INT 7
29558: PUSH
29559: LD_INT 8
29561: PUSH
29562: LD_INT 13
29564: PUSH
29565: LD_INT 12
29567: PUSH
29568: LD_INT 15
29570: PUSH
29571: LD_INT 11
29573: PUSH
29574: LD_INT 14
29576: PUSH
29577: LD_INT 10
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: IN
29591: IFFALSE 29601
// btype = b_lab ;
29593: LD_ADDR_VAR 0 1
29597: PUSH
29598: LD_INT 6
29600: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29601: LD_VAR 0 6
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: IN
29620: NOT
29621: PUSH
29622: LD_VAR 0 1
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: LD_INT 6
29641: PUSH
29642: LD_INT 36
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 5
29650: PUSH
29651: LD_INT 31
29653: PUSH
29654: LD_INT 32
29656: PUSH
29657: LD_INT 33
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: IN
29673: NOT
29674: PUSH
29675: LD_VAR 0 6
29679: PUSH
29680: LD_INT 1
29682: EQUAL
29683: AND
29684: OR
29685: PUSH
29686: LD_VAR 0 1
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: IN
29701: NOT
29702: PUSH
29703: LD_VAR 0 6
29707: PUSH
29708: LD_INT 2
29710: EQUAL
29711: AND
29712: OR
29713: IFFALSE 29723
// mode = 0 ;
29715: LD_ADDR_VAR 0 6
29719: PUSH
29720: LD_INT 0
29722: ST_TO_ADDR
// case mode of 0 :
29723: LD_VAR 0 6
29727: PUSH
29728: LD_INT 0
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 41189
29736: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29737: LD_ADDR_VAR 0 11
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: LD_INT 2
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: LD_INT 2
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: LD_INT 3
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29930: LD_ADDR_VAR 0 12
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: NEG
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 3
30087: NEG
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30126: LD_ADDR_VAR 0 13
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 2
30249: NEG
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 2
30261: NEG
30262: PUSH
30263: LD_INT 2
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: NEG
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 3
30285: NEG
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 3
30297: NEG
30298: PUSH
30299: LD_INT 3
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30325: LD_ADDR_VAR 0 14
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30521: LD_ADDR_VAR 0 15
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: LD_INT 1
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30714: LD_ADDR_VAR 0 16
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 2
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 3
30861: PUSH
30862: LD_INT 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30907: LD_ADDR_VAR 0 17
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: NEG
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31137: LD_ADDR_VAR 0 18
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 2
31336: NEG
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31367: LD_ADDR_VAR 0 19
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 2
31566: NEG
31567: PUSH
31568: LD_INT 2
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31597: LD_ADDR_VAR 0 20
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 2
31773: NEG
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31827: LD_ADDR_VAR 0 21
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32057: LD_ADDR_VAR 0 22
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32287: LD_ADDR_VAR 0 23
32291: PUSH
32292: LD_INT 0
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: LD_INT 3
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32567: LD_ADDR_VAR 0 24
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: NEG
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32843: LD_ADDR_VAR 0 25
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 3
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33117: LD_ADDR_VAR 0 26
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33393: LD_ADDR_VAR 0 27
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: NEG
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: LD_INT 2
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33673: LD_ADDR_VAR 0 28
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: NEG
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33955: LD_ADDR_VAR 0 29
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: LD_INT 3
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 3
34199: NEG
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34234: LD_ADDR_VAR 0 30
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: NEG
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 3
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: LD_INT 3
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 3
34477: NEG
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34512: LD_ADDR_VAR 0 31
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 3
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 3
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34790: LD_ADDR_VAR 0 32
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: NEG
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: LD_INT 3
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 3
35033: NEG
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35068: LD_ADDR_VAR 0 33
35072: PUSH
35073: LD_INT 0
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 2
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 3
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 3
35312: NEG
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35347: LD_ADDR_VAR 0 34
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: LD_INT 3
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 3
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35627: LD_ADDR_VAR 0 35
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35739: LD_ADDR_VAR 0 36
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 2
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35851: LD_ADDR_VAR 0 37
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35963: LD_ADDR_VAR 0 38
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36075: LD_ADDR_VAR 0 39
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36187: LD_ADDR_VAR 0 40
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36299: LD_ADDR_VAR 0 41
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: NEG
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: NEG
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: LD_INT 3
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 3
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 3
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 3
36596: NEG
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 3
36608: NEG
36609: PUSH
36610: LD_INT 3
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36649: LD_ADDR_VAR 0 42
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 2
36827: NEG
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: LD_INT 3
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 3
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 3
36895: PUSH
36896: LD_INT 3
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 3
36946: NEG
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 3
36958: NEG
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36999: LD_ADDR_VAR 0 43
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 3
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 3
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 3
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 3
37295: NEG
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 3
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37347: LD_ADDR_VAR 0 44
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: LD_INT 3
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 3
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: NEG
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 3
37621: NEG
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 3
37632: NEG
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 3
37644: NEG
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 3
37656: NEG
37657: PUSH
37658: LD_INT 3
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37697: LD_ADDR_VAR 0 45
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: LD_INT 3
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 3
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 3
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 3
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: LD_INT 3
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: NEG
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 3
38006: NEG
38007: PUSH
38008: LD_INT 3
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38047: LD_ADDR_VAR 0 46
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 3
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 3
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 3
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 3
38343: NEG
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38395: LD_ADDR_VAR 0 47
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38546: LD_ADDR_VAR 0 48
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38693: LD_ADDR_VAR 0 49
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38837: LD_ADDR_VAR 0 50
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38981: LD_ADDR_VAR 0 51
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39128: LD_ADDR_VAR 0 52
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39279: LD_ADDR_VAR 0 53
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39509: LD_ADDR_VAR 0 54
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39739: LD_ADDR_VAR 0 55
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: NEG
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: LD_INT 2
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39969: LD_ADDR_VAR 0 56
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40199: LD_ADDR_VAR 0 57
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40429: LD_ADDR_VAR 0 58
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40659: LD_ADDR_VAR 0 59
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40747: LD_ADDR_VAR 0 60
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40835: LD_ADDR_VAR 0 61
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40923: LD_ADDR_VAR 0 62
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41011: LD_ADDR_VAR 0 63
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41099: LD_ADDR_VAR 0 64
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// end ; 1 :
41187: GO 47084
41189: LD_INT 1
41191: DOUBLE
41192: EQUAL
41193: IFTRUE 41197
41195: GO 43820
41197: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41198: LD_ADDR_VAR 0 11
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41242: LD_ADDR_VAR 0 12
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41283: LD_ADDR_VAR 0 13
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41323: LD_ADDR_VAR 0 14
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41364: LD_ADDR_VAR 0 15
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41408: LD_ADDR_VAR 0 16
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: LD_INT 3
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 3
41427: NEG
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: LD_INT 3
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41454: LD_ADDR_VAR 0 17
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 3
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41498: LD_ADDR_VAR 0 18
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 3
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41539: LD_ADDR_VAR 0 19
41543: PUSH
41544: LD_INT 3
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 3
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41579: LD_ADDR_VAR 0 20
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 3
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41620: LD_ADDR_VAR 0 21
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 3
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41664: LD_ADDR_VAR 0 22
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 3
41683: NEG
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 3
41695: NEG
41696: PUSH
41697: LD_INT 3
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41710: LD_ADDR_VAR 0 23
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 4
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 3
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41754: LD_ADDR_VAR 0 24
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 4
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41795: LD_ADDR_VAR 0 25
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: LD_INT 3
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 4
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: LD_INT 4
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41835: LD_ADDR_VAR 0 26
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 4
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41876: LD_ADDR_VAR 0 27
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 4
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41920: LD_ADDR_VAR 0 28
41924: PUSH
41925: LD_INT 3
41927: NEG
41928: PUSH
41929: LD_INT 3
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 3
41939: NEG
41940: PUSH
41941: LD_INT 4
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 4
41951: NEG
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41966: LD_ADDR_VAR 0 29
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 3
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 3
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 4
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 4
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 3
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 5
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 5
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 4
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 6
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 6
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 5
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42121: LD_ADDR_VAR 0 30
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 4
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 4
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 5
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 5
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 5
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 6
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 6
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42264: LD_ADDR_VAR 0 31
42268: PUSH
42269: LD_INT 3
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 4
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 4
42311: PUSH
42312: LD_INT 4
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: LD_INT 4
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 5
42331: PUSH
42332: LD_INT 4
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 5
42341: PUSH
42342: LD_INT 5
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 4
42351: PUSH
42352: LD_INT 5
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 6
42361: PUSH
42362: LD_INT 5
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 6
42371: PUSH
42372: LD_INT 6
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 5
42381: PUSH
42382: LD_INT 6
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42403: LD_ADDR_VAR 0 32
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 4
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 4
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 5
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 4
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 6
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 6
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 5
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42546: LD_ADDR_VAR 0 33
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 3
42564: NEG
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 3
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 3
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 4
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 4
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 4
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 5
42632: NEG
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 5
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 5
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 6
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 6
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42701: LD_ADDR_VAR 0 34
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: LD_INT 3
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 3
42732: NEG
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 3
42744: NEG
42745: PUSH
42746: LD_INT 4
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 4
42756: NEG
42757: PUSH
42758: LD_INT 3
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 4
42768: NEG
42769: PUSH
42770: LD_INT 4
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 4
42780: NEG
42781: PUSH
42782: LD_INT 5
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 5
42792: NEG
42793: PUSH
42794: LD_INT 4
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 5
42804: NEG
42805: PUSH
42806: LD_INT 5
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 5
42816: NEG
42817: PUSH
42818: LD_INT 6
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 6
42828: NEG
42829: PUSH
42830: LD_INT 5
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 6
42840: NEG
42841: PUSH
42842: LD_INT 6
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42864: LD_ADDR_VAR 0 41
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 3
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42908: LD_ADDR_VAR 0 42
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42949: LD_ADDR_VAR 0 43
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42989: LD_ADDR_VAR 0 44
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 3
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43030: LD_ADDR_VAR 0 45
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: NEG
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43074: LD_ADDR_VAR 0 46
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: LD_INT 3
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43120: LD_ADDR_VAR 0 47
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43153: LD_ADDR_VAR 0 48
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43184: LD_ADDR_VAR 0 49
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43213: LD_ADDR_VAR 0 50
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43242: LD_ADDR_VAR 0 51
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43273: LD_ADDR_VAR 0 52
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: NEG
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43306: LD_ADDR_VAR 0 53
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43350: LD_ADDR_VAR 0 54
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43391: LD_ADDR_VAR 0 55
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 3
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43431: LD_ADDR_VAR 0 56
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43472: LD_ADDR_VAR 0 57
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 3
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43516: LD_ADDR_VAR 0 58
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 3
43547: NEG
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43562: LD_ADDR_VAR 0 59
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43606: LD_ADDR_VAR 0 60
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43647: LD_ADDR_VAR 0 61
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: LIST
43686: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43687: LD_ADDR_VAR 0 62
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43728: LD_ADDR_VAR 0 63
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43772: LD_ADDR_VAR 0 64
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// end ; 2 :
43818: GO 47084
43820: LD_INT 2
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 47083
43828: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43829: LD_ADDR_VAR 0 29
43833: PUSH
43834: LD_INT 4
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 4
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 5
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 5
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 5
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: LD_INT 3
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 4
43959: PUSH
43960: LD_INT 4
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 4
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 4
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 4
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 3
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 4
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 5
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 4
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 3
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 4
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 4
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 4
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 4
44214: NEG
44215: PUSH
44216: LD_INT 4
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 4
44226: NEG
44227: PUSH
44228: LD_INT 5
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: NEG
44239: PUSH
44240: LD_INT 4
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 4
44262: NEG
44263: PUSH
44264: LD_INT 3
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 5
44274: NEG
44275: PUSH
44276: LD_INT 4
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 5
44286: NEG
44287: PUSH
44288: LD_INT 5
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: NEG
44299: PUSH
44300: LD_INT 5
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 5
44310: NEG
44311: PUSH
44312: LD_INT 3
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44367: LD_ADDR_VAR 0 30
44371: PUSH
44372: LD_INT 4
44374: PUSH
44375: LD_INT 4
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 4
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 5
44394: PUSH
44395: LD_INT 4
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 5
44404: PUSH
44405: LD_INT 5
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 4
44414: PUSH
44415: LD_INT 5
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: LD_INT 4
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: LD_INT 3
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 5
44444: PUSH
44445: LD_INT 3
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 5
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 4
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 4
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 4
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 4
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 4
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 4
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 5
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 5
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 5
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 3
44659: NEG
44660: PUSH
44661: LD_INT 3
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: NEG
44672: PUSH
44673: LD_INT 4
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: LD_INT 3
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 3
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 4
44719: NEG
44720: PUSH
44721: LD_INT 3
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 4
44731: NEG
44732: PUSH
44733: LD_INT 4
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 4
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 4
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 4
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 5
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 4
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 3
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 3
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 4
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 5
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 3
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 5
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44914: LD_ADDR_VAR 0 31
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 4
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 5
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 5
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 4
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 5
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 3
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 3
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 4
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 4
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 4
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 4
45116: NEG
45117: PUSH
45118: LD_INT 4
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 4
45128: NEG
45129: PUSH
45130: LD_INT 5
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: LD_INT 4
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: LD_INT 3
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 4
45164: NEG
45165: PUSH
45166: LD_INT 3
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 5
45176: NEG
45177: PUSH
45178: LD_INT 4
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 5
45188: NEG
45189: PUSH
45190: LD_INT 5
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 5
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 5
45212: NEG
45213: PUSH
45214: LD_INT 3
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 4
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 3
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 3
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 4
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 4
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 4
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 4
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 5
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 5
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 4
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 3
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 5
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45464: LD_ADDR_VAR 0 32
45468: PUSH
45469: LD_INT 4
45471: NEG
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 4
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 4
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 5
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 5
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 5
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 3
45573: NEG
45574: PUSH
45575: LD_INT 3
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: LD_INT 4
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 3
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 3
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 4
45633: NEG
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 4
45645: NEG
45646: PUSH
45647: LD_INT 4
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: LD_INT 4
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 4
45669: NEG
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 4
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 5
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 4
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 4
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 5
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 5
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 3
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 4
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 4
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 4
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 4
45876: PUSH
45877: LD_INT 4
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 4
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: PUSH
45897: LD_INT 4
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 5
45906: PUSH
45907: LD_INT 5
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 4
45916: PUSH
45917: LD_INT 5
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: LD_INT 5
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46011: LD_ADDR_VAR 0 33
46015: PUSH
46016: LD_INT 4
46018: NEG
46019: PUSH
46020: LD_INT 4
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: LD_INT 5
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: LD_INT 4
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 4
46066: NEG
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 5
46078: NEG
46079: PUSH
46080: LD_INT 4
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 5
46090: NEG
46091: PUSH
46092: LD_INT 5
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: LD_INT 5
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: LD_INT 3
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 4
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 4
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 4
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 5
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 5
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 5
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 4
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 4
46351: PUSH
46352: LD_INT 4
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: LD_INT 4
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 4
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 4
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 4
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 4
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 5
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 5
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 4
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 5
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46549: LD_ADDR_VAR 0 34
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 5
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 4
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 5
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 4
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 4
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 4
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 5
46771: PUSH
46772: LD_INT 4
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 5
46781: PUSH
46782: LD_INT 5
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: LD_INT 5
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 4
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 5
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 5
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 4
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 4
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: LD_INT 4
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 4
46934: NEG
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 4
46945: NEG
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 3
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 4
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 5
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 5
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 5
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// end ; end ;
47081: GO 47084
47083: POP
// case btype of b_depot , b_warehouse :
47084: LD_VAR 0 1
47088: PUSH
47089: LD_INT 0
47091: DOUBLE
47092: EQUAL
47093: IFTRUE 47103
47095: LD_INT 1
47097: DOUBLE
47098: EQUAL
47099: IFTRUE 47103
47101: GO 47304
47103: POP
// case nation of nation_american :
47104: LD_VAR 0 5
47108: PUSH
47109: LD_INT 1
47111: DOUBLE
47112: EQUAL
47113: IFTRUE 47117
47115: GO 47173
47117: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47118: LD_ADDR_VAR 0 9
47122: PUSH
47123: LD_VAR 0 11
47127: PUSH
47128: LD_VAR 0 12
47132: PUSH
47133: LD_VAR 0 13
47137: PUSH
47138: LD_VAR 0 14
47142: PUSH
47143: LD_VAR 0 15
47147: PUSH
47148: LD_VAR 0 16
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: PUSH
47161: LD_VAR 0 4
47165: PUSH
47166: LD_INT 1
47168: PLUS
47169: ARRAY
47170: ST_TO_ADDR
47171: GO 47302
47173: LD_INT 2
47175: DOUBLE
47176: EQUAL
47177: IFTRUE 47181
47179: GO 47237
47181: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47182: LD_ADDR_VAR 0 9
47186: PUSH
47187: LD_VAR 0 17
47191: PUSH
47192: LD_VAR 0 18
47196: PUSH
47197: LD_VAR 0 19
47201: PUSH
47202: LD_VAR 0 20
47206: PUSH
47207: LD_VAR 0 21
47211: PUSH
47212: LD_VAR 0 22
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: LD_VAR 0 4
47229: PUSH
47230: LD_INT 1
47232: PLUS
47233: ARRAY
47234: ST_TO_ADDR
47235: GO 47302
47237: LD_INT 3
47239: DOUBLE
47240: EQUAL
47241: IFTRUE 47245
47243: GO 47301
47245: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47246: LD_ADDR_VAR 0 9
47250: PUSH
47251: LD_VAR 0 23
47255: PUSH
47256: LD_VAR 0 24
47260: PUSH
47261: LD_VAR 0 25
47265: PUSH
47266: LD_VAR 0 26
47270: PUSH
47271: LD_VAR 0 27
47275: PUSH
47276: LD_VAR 0 28
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: PUSH
47289: LD_VAR 0 4
47293: PUSH
47294: LD_INT 1
47296: PLUS
47297: ARRAY
47298: ST_TO_ADDR
47299: GO 47302
47301: POP
47302: GO 47857
47304: LD_INT 2
47306: DOUBLE
47307: EQUAL
47308: IFTRUE 47318
47310: LD_INT 3
47312: DOUBLE
47313: EQUAL
47314: IFTRUE 47318
47316: GO 47374
47318: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47319: LD_ADDR_VAR 0 9
47323: PUSH
47324: LD_VAR 0 29
47328: PUSH
47329: LD_VAR 0 30
47333: PUSH
47334: LD_VAR 0 31
47338: PUSH
47339: LD_VAR 0 32
47343: PUSH
47344: LD_VAR 0 33
47348: PUSH
47349: LD_VAR 0 34
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: PUSH
47362: LD_VAR 0 4
47366: PUSH
47367: LD_INT 1
47369: PLUS
47370: ARRAY
47371: ST_TO_ADDR
47372: GO 47857
47374: LD_INT 16
47376: DOUBLE
47377: EQUAL
47378: IFTRUE 47436
47380: LD_INT 17
47382: DOUBLE
47383: EQUAL
47384: IFTRUE 47436
47386: LD_INT 18
47388: DOUBLE
47389: EQUAL
47390: IFTRUE 47436
47392: LD_INT 19
47394: DOUBLE
47395: EQUAL
47396: IFTRUE 47436
47398: LD_INT 22
47400: DOUBLE
47401: EQUAL
47402: IFTRUE 47436
47404: LD_INT 20
47406: DOUBLE
47407: EQUAL
47408: IFTRUE 47436
47410: LD_INT 21
47412: DOUBLE
47413: EQUAL
47414: IFTRUE 47436
47416: LD_INT 23
47418: DOUBLE
47419: EQUAL
47420: IFTRUE 47436
47422: LD_INT 24
47424: DOUBLE
47425: EQUAL
47426: IFTRUE 47436
47428: LD_INT 25
47430: DOUBLE
47431: EQUAL
47432: IFTRUE 47436
47434: GO 47492
47436: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_VAR 0 35
47446: PUSH
47447: LD_VAR 0 36
47451: PUSH
47452: LD_VAR 0 37
47456: PUSH
47457: LD_VAR 0 38
47461: PUSH
47462: LD_VAR 0 39
47466: PUSH
47467: LD_VAR 0 40
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: PUSH
47480: LD_VAR 0 4
47484: PUSH
47485: LD_INT 1
47487: PLUS
47488: ARRAY
47489: ST_TO_ADDR
47490: GO 47857
47492: LD_INT 6
47494: DOUBLE
47495: EQUAL
47496: IFTRUE 47548
47498: LD_INT 7
47500: DOUBLE
47501: EQUAL
47502: IFTRUE 47548
47504: LD_INT 8
47506: DOUBLE
47507: EQUAL
47508: IFTRUE 47548
47510: LD_INT 13
47512: DOUBLE
47513: EQUAL
47514: IFTRUE 47548
47516: LD_INT 12
47518: DOUBLE
47519: EQUAL
47520: IFTRUE 47548
47522: LD_INT 15
47524: DOUBLE
47525: EQUAL
47526: IFTRUE 47548
47528: LD_INT 11
47530: DOUBLE
47531: EQUAL
47532: IFTRUE 47548
47534: LD_INT 14
47536: DOUBLE
47537: EQUAL
47538: IFTRUE 47548
47540: LD_INT 10
47542: DOUBLE
47543: EQUAL
47544: IFTRUE 47548
47546: GO 47604
47548: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47549: LD_ADDR_VAR 0 9
47553: PUSH
47554: LD_VAR 0 41
47558: PUSH
47559: LD_VAR 0 42
47563: PUSH
47564: LD_VAR 0 43
47568: PUSH
47569: LD_VAR 0 44
47573: PUSH
47574: LD_VAR 0 45
47578: PUSH
47579: LD_VAR 0 46
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: PUSH
47592: LD_VAR 0 4
47596: PUSH
47597: LD_INT 1
47599: PLUS
47600: ARRAY
47601: ST_TO_ADDR
47602: GO 47857
47604: LD_INT 36
47606: DOUBLE
47607: EQUAL
47608: IFTRUE 47612
47610: GO 47668
47612: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47613: LD_ADDR_VAR 0 9
47617: PUSH
47618: LD_VAR 0 47
47622: PUSH
47623: LD_VAR 0 48
47627: PUSH
47628: LD_VAR 0 49
47632: PUSH
47633: LD_VAR 0 50
47637: PUSH
47638: LD_VAR 0 51
47642: PUSH
47643: LD_VAR 0 52
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: PUSH
47656: LD_VAR 0 4
47660: PUSH
47661: LD_INT 1
47663: PLUS
47664: ARRAY
47665: ST_TO_ADDR
47666: GO 47857
47668: LD_INT 4
47670: DOUBLE
47671: EQUAL
47672: IFTRUE 47694
47674: LD_INT 5
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47694
47680: LD_INT 34
47682: DOUBLE
47683: EQUAL
47684: IFTRUE 47694
47686: LD_INT 37
47688: DOUBLE
47689: EQUAL
47690: IFTRUE 47694
47692: GO 47750
47694: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47695: LD_ADDR_VAR 0 9
47699: PUSH
47700: LD_VAR 0 53
47704: PUSH
47705: LD_VAR 0 54
47709: PUSH
47710: LD_VAR 0 55
47714: PUSH
47715: LD_VAR 0 56
47719: PUSH
47720: LD_VAR 0 57
47724: PUSH
47725: LD_VAR 0 58
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: PUSH
47738: LD_VAR 0 4
47742: PUSH
47743: LD_INT 1
47745: PLUS
47746: ARRAY
47747: ST_TO_ADDR
47748: GO 47857
47750: LD_INT 31
47752: DOUBLE
47753: EQUAL
47754: IFTRUE 47800
47756: LD_INT 32
47758: DOUBLE
47759: EQUAL
47760: IFTRUE 47800
47762: LD_INT 33
47764: DOUBLE
47765: EQUAL
47766: IFTRUE 47800
47768: LD_INT 27
47770: DOUBLE
47771: EQUAL
47772: IFTRUE 47800
47774: LD_INT 26
47776: DOUBLE
47777: EQUAL
47778: IFTRUE 47800
47780: LD_INT 28
47782: DOUBLE
47783: EQUAL
47784: IFTRUE 47800
47786: LD_INT 29
47788: DOUBLE
47789: EQUAL
47790: IFTRUE 47800
47792: LD_INT 30
47794: DOUBLE
47795: EQUAL
47796: IFTRUE 47800
47798: GO 47856
47800: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47801: LD_ADDR_VAR 0 9
47805: PUSH
47806: LD_VAR 0 59
47810: PUSH
47811: LD_VAR 0 60
47815: PUSH
47816: LD_VAR 0 61
47820: PUSH
47821: LD_VAR 0 62
47825: PUSH
47826: LD_VAR 0 63
47830: PUSH
47831: LD_VAR 0 64
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: PUSH
47844: LD_VAR 0 4
47848: PUSH
47849: LD_INT 1
47851: PLUS
47852: ARRAY
47853: ST_TO_ADDR
47854: GO 47857
47856: POP
// temp_list2 = [ ] ;
47857: LD_ADDR_VAR 0 10
47861: PUSH
47862: EMPTY
47863: ST_TO_ADDR
// for i in temp_list do
47864: LD_ADDR_VAR 0 8
47868: PUSH
47869: LD_VAR 0 9
47873: PUSH
47874: FOR_IN
47875: IFFALSE 47927
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47877: LD_ADDR_VAR 0 10
47881: PUSH
47882: LD_VAR 0 10
47886: PUSH
47887: LD_VAR 0 8
47891: PUSH
47892: LD_INT 1
47894: ARRAY
47895: PUSH
47896: LD_VAR 0 2
47900: PLUS
47901: PUSH
47902: LD_VAR 0 8
47906: PUSH
47907: LD_INT 2
47909: ARRAY
47910: PUSH
47911: LD_VAR 0 3
47915: PLUS
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: ADD
47924: ST_TO_ADDR
47925: GO 47874
47927: POP
47928: POP
// result = temp_list2 ;
47929: LD_ADDR_VAR 0 7
47933: PUSH
47934: LD_VAR 0 10
47938: ST_TO_ADDR
// end ;
47939: LD_VAR 0 7
47943: RET
// export function EnemyInRange ( unit , dist ) ; begin
47944: LD_INT 0
47946: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: LD_VAR 0 1
47956: PPUSH
47957: CALL_OW 255
47961: PPUSH
47962: LD_VAR 0 1
47966: PPUSH
47967: CALL_OW 250
47971: PPUSH
47972: LD_VAR 0 1
47976: PPUSH
47977: CALL_OW 251
47981: PPUSH
47982: LD_VAR 0 2
47986: PPUSH
47987: CALL 21346 0 4
47991: PUSH
47992: LD_INT 4
47994: ARRAY
47995: ST_TO_ADDR
// end ;
47996: LD_VAR 0 3
48000: RET
// export function PlayerSeeMe ( unit ) ; begin
48001: LD_INT 0
48003: PPUSH
// result := See ( your_side , unit ) ;
48004: LD_ADDR_VAR 0 2
48008: PUSH
48009: LD_OWVAR 2
48013: PPUSH
48014: LD_VAR 0 1
48018: PPUSH
48019: CALL_OW 292
48023: ST_TO_ADDR
// end ;
48024: LD_VAR 0 2
48028: RET
// export function ReverseDir ( unit ) ; begin
48029: LD_INT 0
48031: PPUSH
// if not unit then
48032: LD_VAR 0 1
48036: NOT
48037: IFFALSE 48041
// exit ;
48039: GO 48064
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48041: LD_ADDR_VAR 0 2
48045: PUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: CALL_OW 254
48055: PUSH
48056: LD_INT 3
48058: PLUS
48059: PUSH
48060: LD_INT 6
48062: MOD
48063: ST_TO_ADDR
// end ;
48064: LD_VAR 0 2
48068: RET
// export function ReverseArray ( array ) ; var i ; begin
48069: LD_INT 0
48071: PPUSH
48072: PPUSH
// if not array then
48073: LD_VAR 0 1
48077: NOT
48078: IFFALSE 48082
// exit ;
48080: GO 48137
// result := [ ] ;
48082: LD_ADDR_VAR 0 2
48086: PUSH
48087: EMPTY
48088: ST_TO_ADDR
// for i := array downto 1 do
48089: LD_ADDR_VAR 0 3
48093: PUSH
48094: DOUBLE
48095: LD_VAR 0 1
48099: INC
48100: ST_TO_ADDR
48101: LD_INT 1
48103: PUSH
48104: FOR_DOWNTO
48105: IFFALSE 48135
// result := Join ( result , array [ i ] ) ;
48107: LD_ADDR_VAR 0 2
48111: PUSH
48112: LD_VAR 0 2
48116: PPUSH
48117: LD_VAR 0 1
48121: PUSH
48122: LD_VAR 0 3
48126: ARRAY
48127: PPUSH
48128: CALL 52753 0 2
48132: ST_TO_ADDR
48133: GO 48104
48135: POP
48136: POP
// end ;
48137: LD_VAR 0 2
48141: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48142: LD_INT 0
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
// if not unit or not hexes then
48150: LD_VAR 0 1
48154: NOT
48155: PUSH
48156: LD_VAR 0 2
48160: NOT
48161: OR
48162: IFFALSE 48166
// exit ;
48164: GO 48289
// dist := 9999 ;
48166: LD_ADDR_VAR 0 5
48170: PUSH
48171: LD_INT 9999
48173: ST_TO_ADDR
// for i = 1 to hexes do
48174: LD_ADDR_VAR 0 4
48178: PUSH
48179: DOUBLE
48180: LD_INT 1
48182: DEC
48183: ST_TO_ADDR
48184: LD_VAR 0 2
48188: PUSH
48189: FOR_TO
48190: IFFALSE 48277
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48192: LD_ADDR_VAR 0 6
48196: PUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: LD_VAR 0 2
48206: PUSH
48207: LD_VAR 0 4
48211: ARRAY
48212: PUSH
48213: LD_INT 1
48215: ARRAY
48216: PPUSH
48217: LD_VAR 0 2
48221: PUSH
48222: LD_VAR 0 4
48226: ARRAY
48227: PUSH
48228: LD_INT 2
48230: ARRAY
48231: PPUSH
48232: CALL_OW 297
48236: ST_TO_ADDR
// if tdist < dist then
48237: LD_VAR 0 6
48241: PUSH
48242: LD_VAR 0 5
48246: LESS
48247: IFFALSE 48275
// begin hex := hexes [ i ] ;
48249: LD_ADDR_VAR 0 8
48253: PUSH
48254: LD_VAR 0 2
48258: PUSH
48259: LD_VAR 0 4
48263: ARRAY
48264: ST_TO_ADDR
// dist := tdist ;
48265: LD_ADDR_VAR 0 5
48269: PUSH
48270: LD_VAR 0 6
48274: ST_TO_ADDR
// end ; end ;
48275: GO 48189
48277: POP
48278: POP
// result := hex ;
48279: LD_ADDR_VAR 0 3
48283: PUSH
48284: LD_VAR 0 8
48288: ST_TO_ADDR
// end ;
48289: LD_VAR 0 3
48293: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48294: LD_INT 0
48296: PPUSH
48297: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48298: LD_VAR 0 1
48302: NOT
48303: PUSH
48304: LD_VAR 0 1
48308: PUSH
48309: LD_INT 21
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 23
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PPUSH
48333: CALL_OW 69
48337: IN
48338: NOT
48339: OR
48340: IFFALSE 48344
// exit ;
48342: GO 48391
// for i = 1 to 3 do
48344: LD_ADDR_VAR 0 3
48348: PUSH
48349: DOUBLE
48350: LD_INT 1
48352: DEC
48353: ST_TO_ADDR
48354: LD_INT 3
48356: PUSH
48357: FOR_TO
48358: IFFALSE 48389
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48360: LD_VAR 0 1
48364: PPUSH
48365: CALL_OW 250
48369: PPUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 251
48379: PPUSH
48380: LD_INT 1
48382: PPUSH
48383: CALL_OW 453
48387: GO 48357
48389: POP
48390: POP
// end ;
48391: LD_VAR 0 2
48395: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48396: LD_INT 0
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48404: LD_VAR 0 1
48408: NOT
48409: PUSH
48410: LD_VAR 0 2
48414: NOT
48415: OR
48416: PUSH
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 314
48426: OR
48427: IFFALSE 48431
// exit ;
48429: GO 48872
// x := GetX ( enemy_unit ) ;
48431: LD_ADDR_VAR 0 7
48435: PUSH
48436: LD_VAR 0 2
48440: PPUSH
48441: CALL_OW 250
48445: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48446: LD_ADDR_VAR 0 8
48450: PUSH
48451: LD_VAR 0 2
48455: PPUSH
48456: CALL_OW 251
48460: ST_TO_ADDR
// if not x or not y then
48461: LD_VAR 0 7
48465: NOT
48466: PUSH
48467: LD_VAR 0 8
48471: NOT
48472: OR
48473: IFFALSE 48477
// exit ;
48475: GO 48872
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48477: LD_ADDR_VAR 0 6
48481: PUSH
48482: LD_VAR 0 7
48486: PPUSH
48487: LD_INT 0
48489: PPUSH
48490: LD_INT 4
48492: PPUSH
48493: CALL_OW 272
48497: PUSH
48498: LD_VAR 0 8
48502: PPUSH
48503: LD_INT 0
48505: PPUSH
48506: LD_INT 4
48508: PPUSH
48509: CALL_OW 273
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_VAR 0 7
48522: PPUSH
48523: LD_INT 1
48525: PPUSH
48526: LD_INT 4
48528: PPUSH
48529: CALL_OW 272
48533: PUSH
48534: LD_VAR 0 8
48538: PPUSH
48539: LD_INT 1
48541: PPUSH
48542: LD_INT 4
48544: PPUSH
48545: CALL_OW 273
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_VAR 0 7
48558: PPUSH
48559: LD_INT 2
48561: PPUSH
48562: LD_INT 4
48564: PPUSH
48565: CALL_OW 272
48569: PUSH
48570: LD_VAR 0 8
48574: PPUSH
48575: LD_INT 2
48577: PPUSH
48578: LD_INT 4
48580: PPUSH
48581: CALL_OW 273
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_VAR 0 7
48594: PPUSH
48595: LD_INT 3
48597: PPUSH
48598: LD_INT 4
48600: PPUSH
48601: CALL_OW 272
48605: PUSH
48606: LD_VAR 0 8
48610: PPUSH
48611: LD_INT 3
48613: PPUSH
48614: LD_INT 4
48616: PPUSH
48617: CALL_OW 273
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_VAR 0 7
48630: PPUSH
48631: LD_INT 4
48633: PPUSH
48634: LD_INT 4
48636: PPUSH
48637: CALL_OW 272
48641: PUSH
48642: LD_VAR 0 8
48646: PPUSH
48647: LD_INT 4
48649: PPUSH
48650: LD_INT 4
48652: PPUSH
48653: CALL_OW 273
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_VAR 0 7
48666: PPUSH
48667: LD_INT 5
48669: PPUSH
48670: LD_INT 4
48672: PPUSH
48673: CALL_OW 272
48677: PUSH
48678: LD_VAR 0 8
48682: PPUSH
48683: LD_INT 5
48685: PPUSH
48686: LD_INT 4
48688: PPUSH
48689: CALL_OW 273
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: ST_TO_ADDR
// for i = tmp downto 1 do
48706: LD_ADDR_VAR 0 4
48710: PUSH
48711: DOUBLE
48712: LD_VAR 0 6
48716: INC
48717: ST_TO_ADDR
48718: LD_INT 1
48720: PUSH
48721: FOR_DOWNTO
48722: IFFALSE 48823
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48724: LD_VAR 0 6
48728: PUSH
48729: LD_VAR 0 4
48733: ARRAY
48734: PUSH
48735: LD_INT 1
48737: ARRAY
48738: PPUSH
48739: LD_VAR 0 6
48743: PUSH
48744: LD_VAR 0 4
48748: ARRAY
48749: PUSH
48750: LD_INT 2
48752: ARRAY
48753: PPUSH
48754: CALL_OW 488
48758: NOT
48759: PUSH
48760: LD_VAR 0 6
48764: PUSH
48765: LD_VAR 0 4
48769: ARRAY
48770: PUSH
48771: LD_INT 1
48773: ARRAY
48774: PPUSH
48775: LD_VAR 0 6
48779: PUSH
48780: LD_VAR 0 4
48784: ARRAY
48785: PUSH
48786: LD_INT 2
48788: ARRAY
48789: PPUSH
48790: CALL_OW 428
48794: PUSH
48795: LD_INT 0
48797: NONEQUAL
48798: OR
48799: IFFALSE 48821
// tmp := Delete ( tmp , i ) ;
48801: LD_ADDR_VAR 0 6
48805: PUSH
48806: LD_VAR 0 6
48810: PPUSH
48811: LD_VAR 0 4
48815: PPUSH
48816: CALL_OW 3
48820: ST_TO_ADDR
48821: GO 48721
48823: POP
48824: POP
// j := GetClosestHex ( unit , tmp ) ;
48825: LD_ADDR_VAR 0 5
48829: PUSH
48830: LD_VAR 0 1
48834: PPUSH
48835: LD_VAR 0 6
48839: PPUSH
48840: CALL 48142 0 2
48844: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48845: LD_VAR 0 1
48849: PPUSH
48850: LD_VAR 0 5
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: PPUSH
48859: LD_VAR 0 5
48863: PUSH
48864: LD_INT 2
48866: ARRAY
48867: PPUSH
48868: CALL_OW 111
// end ;
48872: LD_VAR 0 3
48876: RET
// export function PrepareApemanSoldier ( ) ; begin
48877: LD_INT 0
48879: PPUSH
// uc_nation := 0 ;
48880: LD_ADDR_OWVAR 21
48884: PUSH
48885: LD_INT 0
48887: ST_TO_ADDR
// hc_sex := sex_male ;
48888: LD_ADDR_OWVAR 27
48892: PUSH
48893: LD_INT 1
48895: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48896: LD_ADDR_OWVAR 28
48900: PUSH
48901: LD_INT 15
48903: ST_TO_ADDR
// hc_gallery :=  ;
48904: LD_ADDR_OWVAR 33
48908: PUSH
48909: LD_STRING 
48911: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48912: LD_ADDR_OWVAR 31
48916: PUSH
48917: LD_INT 0
48919: PPUSH
48920: LD_INT 3
48922: PPUSH
48923: CALL_OW 12
48927: PUSH
48928: LD_INT 0
48930: PPUSH
48931: LD_INT 3
48933: PPUSH
48934: CALL_OW 12
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// end ;
48951: LD_VAR 0 1
48955: RET
// export function PrepareApemanEngineer ( ) ; begin
48956: LD_INT 0
48958: PPUSH
// uc_nation := 0 ;
48959: LD_ADDR_OWVAR 21
48963: PUSH
48964: LD_INT 0
48966: ST_TO_ADDR
// hc_sex := sex_male ;
48967: LD_ADDR_OWVAR 27
48971: PUSH
48972: LD_INT 1
48974: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48975: LD_ADDR_OWVAR 28
48979: PUSH
48980: LD_INT 16
48982: ST_TO_ADDR
// hc_gallery :=  ;
48983: LD_ADDR_OWVAR 33
48987: PUSH
48988: LD_STRING 
48990: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48991: LD_ADDR_OWVAR 31
48995: PUSH
48996: LD_INT 0
48998: PPUSH
48999: LD_INT 3
49001: PPUSH
49002: CALL_OW 12
49006: PUSH
49007: LD_INT 0
49009: PPUSH
49010: LD_INT 3
49012: PPUSH
49013: CALL_OW 12
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// end ;
49030: LD_VAR 0 1
49034: RET
// export function PrepareApeman ( agressivity ) ; begin
49035: LD_INT 0
49037: PPUSH
// uc_side := 0 ;
49038: LD_ADDR_OWVAR 20
49042: PUSH
49043: LD_INT 0
49045: ST_TO_ADDR
// uc_nation := 0 ;
49046: LD_ADDR_OWVAR 21
49050: PUSH
49051: LD_INT 0
49053: ST_TO_ADDR
// hc_sex := sex_male ;
49054: LD_ADDR_OWVAR 27
49058: PUSH
49059: LD_INT 1
49061: ST_TO_ADDR
// hc_class := class_apeman ;
49062: LD_ADDR_OWVAR 28
49066: PUSH
49067: LD_INT 12
49069: ST_TO_ADDR
// hc_gallery :=  ;
49070: LD_ADDR_OWVAR 33
49074: PUSH
49075: LD_STRING 
49077: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49078: LD_ADDR_OWVAR 35
49082: PUSH
49083: LD_VAR 0 1
49087: NEG
49088: PPUSH
49089: LD_VAR 0 1
49093: PPUSH
49094: CALL_OW 12
49098: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49099: LD_ADDR_OWVAR 31
49103: PUSH
49104: LD_INT 0
49106: PPUSH
49107: LD_INT 3
49109: PPUSH
49110: CALL_OW 12
49114: PUSH
49115: LD_INT 0
49117: PPUSH
49118: LD_INT 3
49120: PPUSH
49121: CALL_OW 12
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// end ;
49138: LD_VAR 0 2
49142: RET
// export function PrepareTiger ( agressivity ) ; begin
49143: LD_INT 0
49145: PPUSH
// uc_side := 0 ;
49146: LD_ADDR_OWVAR 20
49150: PUSH
49151: LD_INT 0
49153: ST_TO_ADDR
// uc_nation := 0 ;
49154: LD_ADDR_OWVAR 21
49158: PUSH
49159: LD_INT 0
49161: ST_TO_ADDR
// hc_class := class_tiger ;
49162: LD_ADDR_OWVAR 28
49166: PUSH
49167: LD_INT 14
49169: ST_TO_ADDR
// hc_gallery :=  ;
49170: LD_ADDR_OWVAR 33
49174: PUSH
49175: LD_STRING 
49177: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49178: LD_ADDR_OWVAR 35
49182: PUSH
49183: LD_VAR 0 1
49187: NEG
49188: PPUSH
49189: LD_VAR 0 1
49193: PPUSH
49194: CALL_OW 12
49198: ST_TO_ADDR
// end ;
49199: LD_VAR 0 2
49203: RET
// export function PrepareEnchidna ( ) ; begin
49204: LD_INT 0
49206: PPUSH
// uc_side := 0 ;
49207: LD_ADDR_OWVAR 20
49211: PUSH
49212: LD_INT 0
49214: ST_TO_ADDR
// uc_nation := 0 ;
49215: LD_ADDR_OWVAR 21
49219: PUSH
49220: LD_INT 0
49222: ST_TO_ADDR
// hc_class := class_baggie ;
49223: LD_ADDR_OWVAR 28
49227: PUSH
49228: LD_INT 13
49230: ST_TO_ADDR
// hc_gallery :=  ;
49231: LD_ADDR_OWVAR 33
49235: PUSH
49236: LD_STRING 
49238: ST_TO_ADDR
// end ;
49239: LD_VAR 0 1
49243: RET
// export function PrepareFrog ( ) ; begin
49244: LD_INT 0
49246: PPUSH
// uc_side := 0 ;
49247: LD_ADDR_OWVAR 20
49251: PUSH
49252: LD_INT 0
49254: ST_TO_ADDR
// uc_nation := 0 ;
49255: LD_ADDR_OWVAR 21
49259: PUSH
49260: LD_INT 0
49262: ST_TO_ADDR
// hc_class := class_frog ;
49263: LD_ADDR_OWVAR 28
49267: PUSH
49268: LD_INT 19
49270: ST_TO_ADDR
// hc_gallery :=  ;
49271: LD_ADDR_OWVAR 33
49275: PUSH
49276: LD_STRING 
49278: ST_TO_ADDR
// end ;
49279: LD_VAR 0 1
49283: RET
// export function PrepareFish ( ) ; begin
49284: LD_INT 0
49286: PPUSH
// uc_side := 0 ;
49287: LD_ADDR_OWVAR 20
49291: PUSH
49292: LD_INT 0
49294: ST_TO_ADDR
// uc_nation := 0 ;
49295: LD_ADDR_OWVAR 21
49299: PUSH
49300: LD_INT 0
49302: ST_TO_ADDR
// hc_class := class_fish ;
49303: LD_ADDR_OWVAR 28
49307: PUSH
49308: LD_INT 20
49310: ST_TO_ADDR
// hc_gallery :=  ;
49311: LD_ADDR_OWVAR 33
49315: PUSH
49316: LD_STRING 
49318: ST_TO_ADDR
// end ;
49319: LD_VAR 0 1
49323: RET
// export function PrepareBird ( ) ; begin
49324: LD_INT 0
49326: PPUSH
// uc_side := 0 ;
49327: LD_ADDR_OWVAR 20
49331: PUSH
49332: LD_INT 0
49334: ST_TO_ADDR
// uc_nation := 0 ;
49335: LD_ADDR_OWVAR 21
49339: PUSH
49340: LD_INT 0
49342: ST_TO_ADDR
// hc_class := class_phororhacos ;
49343: LD_ADDR_OWVAR 28
49347: PUSH
49348: LD_INT 18
49350: ST_TO_ADDR
// hc_gallery :=  ;
49351: LD_ADDR_OWVAR 33
49355: PUSH
49356: LD_STRING 
49358: ST_TO_ADDR
// end ;
49359: LD_VAR 0 1
49363: RET
// export function PrepareHorse ( ) ; begin
49364: LD_INT 0
49366: PPUSH
// uc_side := 0 ;
49367: LD_ADDR_OWVAR 20
49371: PUSH
49372: LD_INT 0
49374: ST_TO_ADDR
// uc_nation := 0 ;
49375: LD_ADDR_OWVAR 21
49379: PUSH
49380: LD_INT 0
49382: ST_TO_ADDR
// hc_class := class_horse ;
49383: LD_ADDR_OWVAR 28
49387: PUSH
49388: LD_INT 21
49390: ST_TO_ADDR
// hc_gallery :=  ;
49391: LD_ADDR_OWVAR 33
49395: PUSH
49396: LD_STRING 
49398: ST_TO_ADDR
// end ;
49399: LD_VAR 0 1
49403: RET
// export function PrepareMastodont ( ) ; begin
49404: LD_INT 0
49406: PPUSH
// uc_side := 0 ;
49407: LD_ADDR_OWVAR 20
49411: PUSH
49412: LD_INT 0
49414: ST_TO_ADDR
// uc_nation := 0 ;
49415: LD_ADDR_OWVAR 21
49419: PUSH
49420: LD_INT 0
49422: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49423: LD_ADDR_OWVAR 37
49427: PUSH
49428: LD_INT 31
49430: ST_TO_ADDR
// vc_control := control_rider ;
49431: LD_ADDR_OWVAR 38
49435: PUSH
49436: LD_INT 4
49438: ST_TO_ADDR
// end ;
49439: LD_VAR 0 1
49443: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49444: LD_INT 0
49446: PPUSH
49447: PPUSH
49448: PPUSH
// uc_side = 0 ;
49449: LD_ADDR_OWVAR 20
49453: PUSH
49454: LD_INT 0
49456: ST_TO_ADDR
// uc_nation = 0 ;
49457: LD_ADDR_OWVAR 21
49461: PUSH
49462: LD_INT 0
49464: ST_TO_ADDR
// InitHc_All ( ) ;
49465: CALL_OW 584
// InitVc ;
49469: CALL_OW 20
// if mastodonts then
49473: LD_VAR 0 6
49477: IFFALSE 49544
// for i = 1 to mastodonts do
49479: LD_ADDR_VAR 0 11
49483: PUSH
49484: DOUBLE
49485: LD_INT 1
49487: DEC
49488: ST_TO_ADDR
49489: LD_VAR 0 6
49493: PUSH
49494: FOR_TO
49495: IFFALSE 49542
// begin vc_chassis := 31 ;
49497: LD_ADDR_OWVAR 37
49501: PUSH
49502: LD_INT 31
49504: ST_TO_ADDR
// vc_control := control_rider ;
49505: LD_ADDR_OWVAR 38
49509: PUSH
49510: LD_INT 4
49512: ST_TO_ADDR
// animal := CreateVehicle ;
49513: LD_ADDR_VAR 0 12
49517: PUSH
49518: CALL_OW 45
49522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49523: LD_VAR 0 12
49527: PPUSH
49528: LD_VAR 0 8
49532: PPUSH
49533: LD_INT 0
49535: PPUSH
49536: CALL 51670 0 3
// end ;
49540: GO 49494
49542: POP
49543: POP
// if horses then
49544: LD_VAR 0 5
49548: IFFALSE 49615
// for i = 1 to horses do
49550: LD_ADDR_VAR 0 11
49554: PUSH
49555: DOUBLE
49556: LD_INT 1
49558: DEC
49559: ST_TO_ADDR
49560: LD_VAR 0 5
49564: PUSH
49565: FOR_TO
49566: IFFALSE 49613
// begin hc_class := 21 ;
49568: LD_ADDR_OWVAR 28
49572: PUSH
49573: LD_INT 21
49575: ST_TO_ADDR
// hc_gallery :=  ;
49576: LD_ADDR_OWVAR 33
49580: PUSH
49581: LD_STRING 
49583: ST_TO_ADDR
// animal := CreateHuman ;
49584: LD_ADDR_VAR 0 12
49588: PUSH
49589: CALL_OW 44
49593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49594: LD_VAR 0 12
49598: PPUSH
49599: LD_VAR 0 8
49603: PPUSH
49604: LD_INT 0
49606: PPUSH
49607: CALL 51670 0 3
// end ;
49611: GO 49565
49613: POP
49614: POP
// if birds then
49615: LD_VAR 0 1
49619: IFFALSE 49686
// for i = 1 to birds do
49621: LD_ADDR_VAR 0 11
49625: PUSH
49626: DOUBLE
49627: LD_INT 1
49629: DEC
49630: ST_TO_ADDR
49631: LD_VAR 0 1
49635: PUSH
49636: FOR_TO
49637: IFFALSE 49684
// begin hc_class = 18 ;
49639: LD_ADDR_OWVAR 28
49643: PUSH
49644: LD_INT 18
49646: ST_TO_ADDR
// hc_gallery =  ;
49647: LD_ADDR_OWVAR 33
49651: PUSH
49652: LD_STRING 
49654: ST_TO_ADDR
// animal := CreateHuman ;
49655: LD_ADDR_VAR 0 12
49659: PUSH
49660: CALL_OW 44
49664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49665: LD_VAR 0 12
49669: PPUSH
49670: LD_VAR 0 8
49674: PPUSH
49675: LD_INT 0
49677: PPUSH
49678: CALL 51670 0 3
// end ;
49682: GO 49636
49684: POP
49685: POP
// if tigers then
49686: LD_VAR 0 2
49690: IFFALSE 49774
// for i = 1 to tigers do
49692: LD_ADDR_VAR 0 11
49696: PUSH
49697: DOUBLE
49698: LD_INT 1
49700: DEC
49701: ST_TO_ADDR
49702: LD_VAR 0 2
49706: PUSH
49707: FOR_TO
49708: IFFALSE 49772
// begin hc_class = class_tiger ;
49710: LD_ADDR_OWVAR 28
49714: PUSH
49715: LD_INT 14
49717: ST_TO_ADDR
// hc_gallery =  ;
49718: LD_ADDR_OWVAR 33
49722: PUSH
49723: LD_STRING 
49725: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49726: LD_ADDR_OWVAR 35
49730: PUSH
49731: LD_INT 7
49733: NEG
49734: PPUSH
49735: LD_INT 7
49737: PPUSH
49738: CALL_OW 12
49742: ST_TO_ADDR
// animal := CreateHuman ;
49743: LD_ADDR_VAR 0 12
49747: PUSH
49748: CALL_OW 44
49752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49753: LD_VAR 0 12
49757: PPUSH
49758: LD_VAR 0 8
49762: PPUSH
49763: LD_INT 0
49765: PPUSH
49766: CALL 51670 0 3
// end ;
49770: GO 49707
49772: POP
49773: POP
// if apemans then
49774: LD_VAR 0 3
49778: IFFALSE 49901
// for i = 1 to apemans do
49780: LD_ADDR_VAR 0 11
49784: PUSH
49785: DOUBLE
49786: LD_INT 1
49788: DEC
49789: ST_TO_ADDR
49790: LD_VAR 0 3
49794: PUSH
49795: FOR_TO
49796: IFFALSE 49899
// begin hc_class = class_apeman ;
49798: LD_ADDR_OWVAR 28
49802: PUSH
49803: LD_INT 12
49805: ST_TO_ADDR
// hc_gallery =  ;
49806: LD_ADDR_OWVAR 33
49810: PUSH
49811: LD_STRING 
49813: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49814: LD_ADDR_OWVAR 35
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PPUSH
49823: LD_INT 2
49825: PPUSH
49826: CALL_OW 12
49830: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49831: LD_ADDR_OWVAR 31
49835: PUSH
49836: LD_INT 1
49838: PPUSH
49839: LD_INT 3
49841: PPUSH
49842: CALL_OW 12
49846: PUSH
49847: LD_INT 1
49849: PPUSH
49850: LD_INT 3
49852: PPUSH
49853: CALL_OW 12
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// animal := CreateHuman ;
49870: LD_ADDR_VAR 0 12
49874: PUSH
49875: CALL_OW 44
49879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49880: LD_VAR 0 12
49884: PPUSH
49885: LD_VAR 0 8
49889: PPUSH
49890: LD_INT 0
49892: PPUSH
49893: CALL 51670 0 3
// end ;
49897: GO 49795
49899: POP
49900: POP
// if enchidnas then
49901: LD_VAR 0 4
49905: IFFALSE 49972
// for i = 1 to enchidnas do
49907: LD_ADDR_VAR 0 11
49911: PUSH
49912: DOUBLE
49913: LD_INT 1
49915: DEC
49916: ST_TO_ADDR
49917: LD_VAR 0 4
49921: PUSH
49922: FOR_TO
49923: IFFALSE 49970
// begin hc_class = 13 ;
49925: LD_ADDR_OWVAR 28
49929: PUSH
49930: LD_INT 13
49932: ST_TO_ADDR
// hc_gallery =  ;
49933: LD_ADDR_OWVAR 33
49937: PUSH
49938: LD_STRING 
49940: ST_TO_ADDR
// animal := CreateHuman ;
49941: LD_ADDR_VAR 0 12
49945: PUSH
49946: CALL_OW 44
49950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49951: LD_VAR 0 12
49955: PPUSH
49956: LD_VAR 0 8
49960: PPUSH
49961: LD_INT 0
49963: PPUSH
49964: CALL 51670 0 3
// end ;
49968: GO 49922
49970: POP
49971: POP
// if fishes then
49972: LD_VAR 0 7
49976: IFFALSE 50043
// for i = 1 to fishes do
49978: LD_ADDR_VAR 0 11
49982: PUSH
49983: DOUBLE
49984: LD_INT 1
49986: DEC
49987: ST_TO_ADDR
49988: LD_VAR 0 7
49992: PUSH
49993: FOR_TO
49994: IFFALSE 50041
// begin hc_class = 20 ;
49996: LD_ADDR_OWVAR 28
50000: PUSH
50001: LD_INT 20
50003: ST_TO_ADDR
// hc_gallery =  ;
50004: LD_ADDR_OWVAR 33
50008: PUSH
50009: LD_STRING 
50011: ST_TO_ADDR
// animal := CreateHuman ;
50012: LD_ADDR_VAR 0 12
50016: PUSH
50017: CALL_OW 44
50021: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50022: LD_VAR 0 12
50026: PPUSH
50027: LD_VAR 0 9
50031: PPUSH
50032: LD_INT 0
50034: PPUSH
50035: CALL 51670 0 3
// end ;
50039: GO 49993
50041: POP
50042: POP
// end ;
50043: LD_VAR 0 10
50047: RET
// export function WantHeal ( sci , unit ) ; begin
50048: LD_INT 0
50050: PPUSH
// if GetTaskList ( sci ) > 0 then
50051: LD_VAR 0 1
50055: PPUSH
50056: CALL_OW 437
50060: PUSH
50061: LD_INT 0
50063: GREATER
50064: IFFALSE 50134
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50066: LD_VAR 0 1
50070: PPUSH
50071: CALL_OW 437
50075: PUSH
50076: LD_INT 1
50078: ARRAY
50079: PUSH
50080: LD_INT 1
50082: ARRAY
50083: PUSH
50084: LD_STRING l
50086: EQUAL
50087: PUSH
50088: LD_VAR 0 1
50092: PPUSH
50093: CALL_OW 437
50097: PUSH
50098: LD_INT 1
50100: ARRAY
50101: PUSH
50102: LD_INT 4
50104: ARRAY
50105: PUSH
50106: LD_VAR 0 2
50110: EQUAL
50111: AND
50112: IFFALSE 50124
// result := true else
50114: LD_ADDR_VAR 0 3
50118: PUSH
50119: LD_INT 1
50121: ST_TO_ADDR
50122: GO 50132
// result := false ;
50124: LD_ADDR_VAR 0 3
50128: PUSH
50129: LD_INT 0
50131: ST_TO_ADDR
// end else
50132: GO 50142
// result := false ;
50134: LD_ADDR_VAR 0 3
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// end ;
50142: LD_VAR 0 3
50146: RET
// export function HealTarget ( sci ) ; begin
50147: LD_INT 0
50149: PPUSH
// if not sci then
50150: LD_VAR 0 1
50154: NOT
50155: IFFALSE 50159
// exit ;
50157: GO 50224
// result := 0 ;
50159: LD_ADDR_VAR 0 2
50163: PUSH
50164: LD_INT 0
50166: ST_TO_ADDR
// if GetTaskList ( sci ) then
50167: LD_VAR 0 1
50171: PPUSH
50172: CALL_OW 437
50176: IFFALSE 50224
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50178: LD_VAR 0 1
50182: PPUSH
50183: CALL_OW 437
50187: PUSH
50188: LD_INT 1
50190: ARRAY
50191: PUSH
50192: LD_INT 1
50194: ARRAY
50195: PUSH
50196: LD_STRING l
50198: EQUAL
50199: IFFALSE 50224
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50201: LD_ADDR_VAR 0 2
50205: PUSH
50206: LD_VAR 0 1
50210: PPUSH
50211: CALL_OW 437
50215: PUSH
50216: LD_INT 1
50218: ARRAY
50219: PUSH
50220: LD_INT 4
50222: ARRAY
50223: ST_TO_ADDR
// end ;
50224: LD_VAR 0 2
50228: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50229: LD_INT 0
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
// if not base_units then
50235: LD_VAR 0 1
50239: NOT
50240: IFFALSE 50244
// exit ;
50242: GO 50331
// result := false ;
50244: LD_ADDR_VAR 0 2
50248: PUSH
50249: LD_INT 0
50251: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50252: LD_ADDR_VAR 0 5
50256: PUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: LD_INT 21
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PPUSH
50272: CALL_OW 72
50276: ST_TO_ADDR
// if not tmp then
50277: LD_VAR 0 5
50281: NOT
50282: IFFALSE 50286
// exit ;
50284: GO 50331
// for i in tmp do
50286: LD_ADDR_VAR 0 3
50290: PUSH
50291: LD_VAR 0 5
50295: PUSH
50296: FOR_IN
50297: IFFALSE 50329
// begin result := EnemyInRange ( i , 22 ) ;
50299: LD_ADDR_VAR 0 2
50303: PUSH
50304: LD_VAR 0 3
50308: PPUSH
50309: LD_INT 22
50311: PPUSH
50312: CALL 47944 0 2
50316: ST_TO_ADDR
// if result then
50317: LD_VAR 0 2
50321: IFFALSE 50327
// exit ;
50323: POP
50324: POP
50325: GO 50331
// end ;
50327: GO 50296
50329: POP
50330: POP
// end ;
50331: LD_VAR 0 2
50335: RET
// export function FilterByTag ( units , tag ) ; begin
50336: LD_INT 0
50338: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50339: LD_ADDR_VAR 0 3
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: LD_INT 120
50351: PUSH
50352: LD_VAR 0 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PPUSH
50361: CALL_OW 72
50365: ST_TO_ADDR
// end ;
50366: LD_VAR 0 3
50370: RET
// export function IsDriver ( un ) ; begin
50371: LD_INT 0
50373: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50374: LD_ADDR_VAR 0 2
50378: PUSH
50379: LD_VAR 0 1
50383: PUSH
50384: LD_INT 55
50386: PUSH
50387: EMPTY
50388: LIST
50389: PPUSH
50390: CALL_OW 69
50394: IN
50395: ST_TO_ADDR
// end ;
50396: LD_VAR 0 2
50400: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50401: LD_INT 0
50403: PPUSH
50404: PPUSH
// list := [ ] ;
50405: LD_ADDR_VAR 0 5
50409: PUSH
50410: EMPTY
50411: ST_TO_ADDR
// case d of 0 :
50412: LD_VAR 0 3
50416: PUSH
50417: LD_INT 0
50419: DOUBLE
50420: EQUAL
50421: IFTRUE 50425
50423: GO 50558
50425: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50426: LD_ADDR_VAR 0 5
50430: PUSH
50431: LD_VAR 0 1
50435: PUSH
50436: LD_INT 4
50438: MINUS
50439: PUSH
50440: LD_VAR 0 2
50444: PUSH
50445: LD_INT 4
50447: MINUS
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: PUSH
50457: LD_VAR 0 1
50461: PUSH
50462: LD_INT 3
50464: MINUS
50465: PUSH
50466: LD_VAR 0 2
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: PUSH
50479: LD_VAR 0 1
50483: PUSH
50484: LD_INT 4
50486: PLUS
50487: PUSH
50488: LD_VAR 0 2
50492: PUSH
50493: LD_INT 4
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: PUSH
50501: LD_VAR 0 1
50505: PUSH
50506: LD_INT 3
50508: PLUS
50509: PUSH
50510: LD_VAR 0 2
50514: PUSH
50515: LD_INT 3
50517: PLUS
50518: PUSH
50519: LD_INT 5
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: PUSH
50527: LD_VAR 0 1
50531: PUSH
50532: LD_VAR 0 2
50536: PUSH
50537: LD_INT 4
50539: PLUS
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// end ; 1 :
50556: GO 51256
50558: LD_INT 1
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50566
50564: GO 50699
50566: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50567: LD_ADDR_VAR 0 5
50571: PUSH
50572: LD_VAR 0 1
50576: PUSH
50577: LD_VAR 0 2
50581: PUSH
50582: LD_INT 4
50584: MINUS
50585: PUSH
50586: LD_INT 3
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: PUSH
50594: LD_VAR 0 1
50598: PUSH
50599: LD_INT 3
50601: MINUS
50602: PUSH
50603: LD_VAR 0 2
50607: PUSH
50608: LD_INT 3
50610: MINUS
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: PUSH
50620: LD_VAR 0 1
50624: PUSH
50625: LD_INT 4
50627: MINUS
50628: PUSH
50629: LD_VAR 0 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: PUSH
50642: LD_VAR 0 1
50646: PUSH
50647: LD_VAR 0 2
50651: PUSH
50652: LD_INT 3
50654: PLUS
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: LD_VAR 0 1
50668: PUSH
50669: LD_INT 4
50671: PLUS
50672: PUSH
50673: LD_VAR 0 2
50677: PUSH
50678: LD_INT 4
50680: PLUS
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: ST_TO_ADDR
// end ; 2 :
50697: GO 51256
50699: LD_INT 2
50701: DOUBLE
50702: EQUAL
50703: IFTRUE 50707
50705: GO 50836
50707: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50708: LD_ADDR_VAR 0 5
50712: PUSH
50713: LD_VAR 0 1
50717: PUSH
50718: LD_VAR 0 2
50722: PUSH
50723: LD_INT 3
50725: MINUS
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: PUSH
50735: LD_VAR 0 1
50739: PUSH
50740: LD_INT 4
50742: PLUS
50743: PUSH
50744: LD_VAR 0 2
50748: PUSH
50749: LD_INT 4
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: PUSH
50757: LD_VAR 0 1
50761: PUSH
50762: LD_VAR 0 2
50766: PUSH
50767: LD_INT 4
50769: PLUS
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: PUSH
50779: LD_VAR 0 1
50783: PUSH
50784: LD_INT 3
50786: MINUS
50787: PUSH
50788: LD_VAR 0 2
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: LD_VAR 0 1
50805: PUSH
50806: LD_INT 4
50808: MINUS
50809: PUSH
50810: LD_VAR 0 2
50814: PUSH
50815: LD_INT 4
50817: MINUS
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: ST_TO_ADDR
// end ; 3 :
50834: GO 51256
50836: LD_INT 3
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 50977
50844: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50845: LD_ADDR_VAR 0 5
50849: PUSH
50850: LD_VAR 0 1
50854: PUSH
50855: LD_INT 3
50857: PLUS
50858: PUSH
50859: LD_VAR 0 2
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: PUSH
50872: LD_VAR 0 1
50876: PUSH
50877: LD_INT 4
50879: PLUS
50880: PUSH
50881: LD_VAR 0 2
50885: PUSH
50886: LD_INT 4
50888: PLUS
50889: PUSH
50890: LD_INT 5
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: PUSH
50898: LD_VAR 0 1
50902: PUSH
50903: LD_INT 4
50905: MINUS
50906: PUSH
50907: LD_VAR 0 2
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: PUSH
50920: LD_VAR 0 1
50924: PUSH
50925: LD_VAR 0 2
50929: PUSH
50930: LD_INT 4
50932: MINUS
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: PUSH
50942: LD_VAR 0 1
50946: PUSH
50947: LD_INT 3
50949: MINUS
50950: PUSH
50951: LD_VAR 0 2
50955: PUSH
50956: LD_INT 3
50958: MINUS
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: ST_TO_ADDR
// end ; 4 :
50975: GO 51256
50977: LD_INT 4
50979: DOUBLE
50980: EQUAL
50981: IFTRUE 50985
50983: GO 51118
50985: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50986: LD_ADDR_VAR 0 5
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_VAR 0 2
51000: PUSH
51001: LD_INT 4
51003: PLUS
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: PUSH
51013: LD_VAR 0 1
51017: PUSH
51018: LD_INT 3
51020: PLUS
51021: PUSH
51022: LD_VAR 0 2
51026: PUSH
51027: LD_INT 3
51029: PLUS
51030: PUSH
51031: LD_INT 5
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: PUSH
51039: LD_VAR 0 1
51043: PUSH
51044: LD_INT 4
51046: PLUS
51047: PUSH
51048: LD_VAR 0 2
51052: PUSH
51053: LD_INT 4
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: PUSH
51061: LD_VAR 0 1
51065: PUSH
51066: LD_VAR 0 2
51070: PUSH
51071: LD_INT 3
51073: MINUS
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: PUSH
51083: LD_VAR 0 1
51087: PUSH
51088: LD_INT 4
51090: MINUS
51091: PUSH
51092: LD_VAR 0 2
51096: PUSH
51097: LD_INT 4
51099: MINUS
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// end ; 5 :
51116: GO 51256
51118: LD_INT 5
51120: DOUBLE
51121: EQUAL
51122: IFTRUE 51126
51124: GO 51255
51126: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51127: LD_ADDR_VAR 0 5
51131: PUSH
51132: LD_VAR 0 1
51136: PUSH
51137: LD_INT 4
51139: MINUS
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: PUSH
51154: LD_VAR 0 1
51158: PUSH
51159: LD_VAR 0 2
51163: PUSH
51164: LD_INT 4
51166: MINUS
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: PUSH
51176: LD_VAR 0 1
51180: PUSH
51181: LD_INT 4
51183: PLUS
51184: PUSH
51185: LD_VAR 0 2
51189: PUSH
51190: LD_INT 4
51192: PLUS
51193: PUSH
51194: LD_INT 5
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: PUSH
51202: LD_VAR 0 1
51206: PUSH
51207: LD_INT 3
51209: PLUS
51210: PUSH
51211: LD_VAR 0 2
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: PUSH
51224: LD_VAR 0 1
51228: PUSH
51229: LD_VAR 0 2
51233: PUSH
51234: LD_INT 3
51236: PLUS
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// end ; end ;
51253: GO 51256
51255: POP
// result := list ;
51256: LD_ADDR_VAR 0 4
51260: PUSH
51261: LD_VAR 0 5
51265: ST_TO_ADDR
// end ;
51266: LD_VAR 0 4
51270: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51271: LD_INT 0
51273: PPUSH
51274: PPUSH
51275: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51276: LD_VAR 0 1
51280: NOT
51281: PUSH
51282: LD_VAR 0 2
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: IN
51305: NOT
51306: OR
51307: IFFALSE 51311
// exit ;
51309: GO 51394
// tmp := [ ] ;
51311: LD_ADDR_VAR 0 5
51315: PUSH
51316: EMPTY
51317: ST_TO_ADDR
// for i in units do
51318: LD_ADDR_VAR 0 4
51322: PUSH
51323: LD_VAR 0 1
51327: PUSH
51328: FOR_IN
51329: IFFALSE 51363
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51331: LD_ADDR_VAR 0 5
51335: PUSH
51336: LD_VAR 0 5
51340: PPUSH
51341: LD_VAR 0 4
51345: PPUSH
51346: LD_VAR 0 2
51350: PPUSH
51351: CALL_OW 259
51355: PPUSH
51356: CALL 52753 0 2
51360: ST_TO_ADDR
51361: GO 51328
51363: POP
51364: POP
// if not tmp then
51365: LD_VAR 0 5
51369: NOT
51370: IFFALSE 51374
// exit ;
51372: GO 51394
// result := SortListByListDesc ( units , tmp ) ;
51374: LD_ADDR_VAR 0 3
51378: PUSH
51379: LD_VAR 0 1
51383: PPUSH
51384: LD_VAR 0 5
51388: PPUSH
51389: CALL_OW 77
51393: ST_TO_ADDR
// end ;
51394: LD_VAR 0 3
51398: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51399: LD_INT 0
51401: PPUSH
51402: PPUSH
51403: PPUSH
// result := false ;
51404: LD_ADDR_VAR 0 3
51408: PUSH
51409: LD_INT 0
51411: ST_TO_ADDR
// x := GetX ( building ) ;
51412: LD_ADDR_VAR 0 4
51416: PUSH
51417: LD_VAR 0 2
51421: PPUSH
51422: CALL_OW 250
51426: ST_TO_ADDR
// y := GetY ( building ) ;
51427: LD_ADDR_VAR 0 5
51431: PUSH
51432: LD_VAR 0 2
51436: PPUSH
51437: CALL_OW 251
51441: ST_TO_ADDR
// if not building or not x or not y then
51442: LD_VAR 0 2
51446: NOT
51447: PUSH
51448: LD_VAR 0 4
51452: NOT
51453: OR
51454: PUSH
51455: LD_VAR 0 5
51459: NOT
51460: OR
51461: IFFALSE 51465
// exit ;
51463: GO 51557
// if GetTaskList ( unit ) then
51465: LD_VAR 0 1
51469: PPUSH
51470: CALL_OW 437
51474: IFFALSE 51557
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51476: LD_STRING e
51478: PUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 437
51488: PUSH
51489: LD_INT 1
51491: ARRAY
51492: PUSH
51493: LD_INT 1
51495: ARRAY
51496: EQUAL
51497: PUSH
51498: LD_VAR 0 4
51502: PUSH
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 437
51512: PUSH
51513: LD_INT 1
51515: ARRAY
51516: PUSH
51517: LD_INT 2
51519: ARRAY
51520: EQUAL
51521: AND
51522: PUSH
51523: LD_VAR 0 5
51527: PUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 437
51537: PUSH
51538: LD_INT 1
51540: ARRAY
51541: PUSH
51542: LD_INT 3
51544: ARRAY
51545: EQUAL
51546: AND
51547: IFFALSE 51557
// result := true end ;
51549: LD_ADDR_VAR 0 3
51553: PUSH
51554: LD_INT 1
51556: ST_TO_ADDR
// end ;
51557: LD_VAR 0 3
51561: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51562: LD_INT 0
51564: PPUSH
// result := false ;
51565: LD_ADDR_VAR 0 4
51569: PUSH
51570: LD_INT 0
51572: ST_TO_ADDR
// if GetTaskList ( unit ) then
51573: LD_VAR 0 1
51577: PPUSH
51578: CALL_OW 437
51582: IFFALSE 51665
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51584: LD_STRING M
51586: PUSH
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 437
51596: PUSH
51597: LD_INT 1
51599: ARRAY
51600: PUSH
51601: LD_INT 1
51603: ARRAY
51604: EQUAL
51605: PUSH
51606: LD_VAR 0 2
51610: PUSH
51611: LD_VAR 0 1
51615: PPUSH
51616: CALL_OW 437
51620: PUSH
51621: LD_INT 1
51623: ARRAY
51624: PUSH
51625: LD_INT 2
51627: ARRAY
51628: EQUAL
51629: AND
51630: PUSH
51631: LD_VAR 0 3
51635: PUSH
51636: LD_VAR 0 1
51640: PPUSH
51641: CALL_OW 437
51645: PUSH
51646: LD_INT 1
51648: ARRAY
51649: PUSH
51650: LD_INT 3
51652: ARRAY
51653: EQUAL
51654: AND
51655: IFFALSE 51665
// result := true ;
51657: LD_ADDR_VAR 0 4
51661: PUSH
51662: LD_INT 1
51664: ST_TO_ADDR
// end ; end ;
51665: LD_VAR 0 4
51669: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51670: LD_INT 0
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
// if not unit or not area then
51676: LD_VAR 0 1
51680: NOT
51681: PUSH
51682: LD_VAR 0 2
51686: NOT
51687: OR
51688: IFFALSE 51692
// exit ;
51690: GO 51856
// tmp := AreaToList ( area , i ) ;
51692: LD_ADDR_VAR 0 6
51696: PUSH
51697: LD_VAR 0 2
51701: PPUSH
51702: LD_VAR 0 5
51706: PPUSH
51707: CALL_OW 517
51711: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51712: LD_ADDR_VAR 0 5
51716: PUSH
51717: DOUBLE
51718: LD_INT 1
51720: DEC
51721: ST_TO_ADDR
51722: LD_VAR 0 6
51726: PUSH
51727: LD_INT 1
51729: ARRAY
51730: PUSH
51731: FOR_TO
51732: IFFALSE 51854
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51734: LD_ADDR_VAR 0 7
51738: PUSH
51739: LD_VAR 0 6
51743: PUSH
51744: LD_INT 1
51746: ARRAY
51747: PUSH
51748: LD_VAR 0 5
51752: ARRAY
51753: PUSH
51754: LD_VAR 0 6
51758: PUSH
51759: LD_INT 2
51761: ARRAY
51762: PUSH
51763: LD_VAR 0 5
51767: ARRAY
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51773: LD_VAR 0 7
51777: PUSH
51778: LD_INT 1
51780: ARRAY
51781: PPUSH
51782: LD_VAR 0 7
51786: PUSH
51787: LD_INT 2
51789: ARRAY
51790: PPUSH
51791: CALL_OW 428
51795: PUSH
51796: LD_INT 0
51798: EQUAL
51799: IFFALSE 51852
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51801: LD_VAR 0 1
51805: PPUSH
51806: LD_VAR 0 7
51810: PUSH
51811: LD_INT 1
51813: ARRAY
51814: PPUSH
51815: LD_VAR 0 7
51819: PUSH
51820: LD_INT 2
51822: ARRAY
51823: PPUSH
51824: LD_VAR 0 3
51828: PPUSH
51829: CALL_OW 48
// result := IsPlaced ( unit ) ;
51833: LD_ADDR_VAR 0 4
51837: PUSH
51838: LD_VAR 0 1
51842: PPUSH
51843: CALL_OW 305
51847: ST_TO_ADDR
// exit ;
51848: POP
51849: POP
51850: GO 51856
// end ; end ;
51852: GO 51731
51854: POP
51855: POP
// end ;
51856: LD_VAR 0 4
51860: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51861: LD_INT 0
51863: PPUSH
51864: PPUSH
51865: PPUSH
// if not side or side > 8 then
51866: LD_VAR 0 1
51870: NOT
51871: PUSH
51872: LD_VAR 0 1
51876: PUSH
51877: LD_INT 8
51879: GREATER
51880: OR
51881: IFFALSE 51885
// exit ;
51883: GO 52072
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51885: LD_ADDR_VAR 0 4
51889: PUSH
51890: LD_INT 22
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 21
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PPUSH
51916: CALL_OW 69
51920: ST_TO_ADDR
// if not tmp then
51921: LD_VAR 0 4
51925: NOT
51926: IFFALSE 51930
// exit ;
51928: GO 52072
// enable_addtolog := true ;
51930: LD_ADDR_OWVAR 81
51934: PUSH
51935: LD_INT 1
51937: ST_TO_ADDR
// AddToLog ( [ ) ;
51938: LD_STRING [
51940: PPUSH
51941: CALL_OW 561
// for i in tmp do
51945: LD_ADDR_VAR 0 3
51949: PUSH
51950: LD_VAR 0 4
51954: PUSH
51955: FOR_IN
51956: IFFALSE 52063
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51958: LD_STRING [
51960: PUSH
51961: LD_VAR 0 3
51965: PPUSH
51966: CALL_OW 266
51970: STR
51971: PUSH
51972: LD_STRING , 
51974: STR
51975: PUSH
51976: LD_VAR 0 3
51980: PPUSH
51981: CALL_OW 250
51985: STR
51986: PUSH
51987: LD_STRING , 
51989: STR
51990: PUSH
51991: LD_VAR 0 3
51995: PPUSH
51996: CALL_OW 251
52000: STR
52001: PUSH
52002: LD_STRING , 
52004: STR
52005: PUSH
52006: LD_VAR 0 3
52010: PPUSH
52011: CALL_OW 254
52015: STR
52016: PUSH
52017: LD_STRING , 
52019: STR
52020: PUSH
52021: LD_VAR 0 3
52025: PPUSH
52026: LD_INT 1
52028: PPUSH
52029: CALL_OW 268
52033: STR
52034: PUSH
52035: LD_STRING , 
52037: STR
52038: PUSH
52039: LD_VAR 0 3
52043: PPUSH
52044: LD_INT 2
52046: PPUSH
52047: CALL_OW 268
52051: STR
52052: PUSH
52053: LD_STRING ],
52055: STR
52056: PPUSH
52057: CALL_OW 561
// end ;
52061: GO 51955
52063: POP
52064: POP
// AddToLog ( ]; ) ;
52065: LD_STRING ];
52067: PPUSH
52068: CALL_OW 561
// end ;
52072: LD_VAR 0 2
52076: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52077: LD_INT 0
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
// if not area or not rate or not max then
52084: LD_VAR 0 1
52088: NOT
52089: PUSH
52090: LD_VAR 0 2
52094: NOT
52095: OR
52096: PUSH
52097: LD_VAR 0 4
52101: NOT
52102: OR
52103: IFFALSE 52107
// exit ;
52105: GO 52296
// while 1 do
52107: LD_INT 1
52109: IFFALSE 52296
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52111: LD_ADDR_VAR 0 9
52115: PUSH
52116: LD_VAR 0 1
52120: PPUSH
52121: LD_INT 1
52123: PPUSH
52124: CALL_OW 287
52128: PUSH
52129: LD_INT 10
52131: MUL
52132: ST_TO_ADDR
// r := rate / 10 ;
52133: LD_ADDR_VAR 0 7
52137: PUSH
52138: LD_VAR 0 2
52142: PUSH
52143: LD_INT 10
52145: DIVREAL
52146: ST_TO_ADDR
// time := 1 1$00 ;
52147: LD_ADDR_VAR 0 8
52151: PUSH
52152: LD_INT 2100
52154: ST_TO_ADDR
// if amount < min then
52155: LD_VAR 0 9
52159: PUSH
52160: LD_VAR 0 3
52164: LESS
52165: IFFALSE 52183
// r := r * 2 else
52167: LD_ADDR_VAR 0 7
52171: PUSH
52172: LD_VAR 0 7
52176: PUSH
52177: LD_INT 2
52179: MUL
52180: ST_TO_ADDR
52181: GO 52209
// if amount > max then
52183: LD_VAR 0 9
52187: PUSH
52188: LD_VAR 0 4
52192: GREATER
52193: IFFALSE 52209
// r := r / 2 ;
52195: LD_ADDR_VAR 0 7
52199: PUSH
52200: LD_VAR 0 7
52204: PUSH
52205: LD_INT 2
52207: DIVREAL
52208: ST_TO_ADDR
// time := time / r ;
52209: LD_ADDR_VAR 0 8
52213: PUSH
52214: LD_VAR 0 8
52218: PUSH
52219: LD_VAR 0 7
52223: DIVREAL
52224: ST_TO_ADDR
// if time < 0 then
52225: LD_VAR 0 8
52229: PUSH
52230: LD_INT 0
52232: LESS
52233: IFFALSE 52250
// time := time * - 1 ;
52235: LD_ADDR_VAR 0 8
52239: PUSH
52240: LD_VAR 0 8
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: MUL
52249: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52250: LD_VAR 0 8
52254: PUSH
52255: LD_INT 35
52257: PPUSH
52258: LD_INT 875
52260: PPUSH
52261: CALL_OW 12
52265: PLUS
52266: PPUSH
52267: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52271: LD_INT 1
52273: PPUSH
52274: LD_INT 5
52276: PPUSH
52277: CALL_OW 12
52281: PPUSH
52282: LD_VAR 0 1
52286: PPUSH
52287: LD_INT 1
52289: PPUSH
52290: CALL_OW 55
// end ;
52294: GO 52107
// end ;
52296: LD_VAR 0 5
52300: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52301: LD_INT 0
52303: PPUSH
52304: PPUSH
52305: PPUSH
52306: PPUSH
52307: PPUSH
52308: PPUSH
52309: PPUSH
52310: PPUSH
// if not turrets or not factories then
52311: LD_VAR 0 1
52315: NOT
52316: PUSH
52317: LD_VAR 0 2
52321: NOT
52322: OR
52323: IFFALSE 52327
// exit ;
52325: GO 52634
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52327: LD_ADDR_VAR 0 10
52331: PUSH
52332: LD_INT 5
52334: PUSH
52335: LD_INT 6
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: LD_INT 5
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 24
52369: PUSH
52370: LD_INT 25
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 23
52379: PUSH
52380: LD_INT 27
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 42
52393: PUSH
52394: LD_INT 43
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 44
52403: PUSH
52404: LD_INT 46
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 45
52413: PUSH
52414: LD_INT 47
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// result := [ ] ;
52431: LD_ADDR_VAR 0 3
52435: PUSH
52436: EMPTY
52437: ST_TO_ADDR
// for i in turrets do
52438: LD_ADDR_VAR 0 4
52442: PUSH
52443: LD_VAR 0 1
52447: PUSH
52448: FOR_IN
52449: IFFALSE 52632
// begin nat := GetNation ( i ) ;
52451: LD_ADDR_VAR 0 7
52455: PUSH
52456: LD_VAR 0 4
52460: PPUSH
52461: CALL_OW 248
52465: ST_TO_ADDR
// weapon := 0 ;
52466: LD_ADDR_VAR 0 8
52470: PUSH
52471: LD_INT 0
52473: ST_TO_ADDR
// if not nat then
52474: LD_VAR 0 7
52478: NOT
52479: IFFALSE 52483
// continue ;
52481: GO 52448
// for j in list [ nat ] do
52483: LD_ADDR_VAR 0 5
52487: PUSH
52488: LD_VAR 0 10
52492: PUSH
52493: LD_VAR 0 7
52497: ARRAY
52498: PUSH
52499: FOR_IN
52500: IFFALSE 52541
// if GetBWeapon ( i ) = j [ 1 ] then
52502: LD_VAR 0 4
52506: PPUSH
52507: CALL_OW 269
52511: PUSH
52512: LD_VAR 0 5
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: EQUAL
52521: IFFALSE 52539
// begin weapon := j [ 2 ] ;
52523: LD_ADDR_VAR 0 8
52527: PUSH
52528: LD_VAR 0 5
52532: PUSH
52533: LD_INT 2
52535: ARRAY
52536: ST_TO_ADDR
// break ;
52537: GO 52541
// end ;
52539: GO 52499
52541: POP
52542: POP
// if not weapon then
52543: LD_VAR 0 8
52547: NOT
52548: IFFALSE 52552
// continue ;
52550: GO 52448
// for k in factories do
52552: LD_ADDR_VAR 0 6
52556: PUSH
52557: LD_VAR 0 2
52561: PUSH
52562: FOR_IN
52563: IFFALSE 52628
// begin weapons := AvailableWeaponList ( k ) ;
52565: LD_ADDR_VAR 0 9
52569: PUSH
52570: LD_VAR 0 6
52574: PPUSH
52575: CALL_OW 478
52579: ST_TO_ADDR
// if not weapons then
52580: LD_VAR 0 9
52584: NOT
52585: IFFALSE 52589
// continue ;
52587: GO 52562
// if weapon in weapons then
52589: LD_VAR 0 8
52593: PUSH
52594: LD_VAR 0 9
52598: IN
52599: IFFALSE 52626
// begin result := [ i , weapon ] ;
52601: LD_ADDR_VAR 0 3
52605: PUSH
52606: LD_VAR 0 4
52610: PUSH
52611: LD_VAR 0 8
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// exit ;
52620: POP
52621: POP
52622: POP
52623: POP
52624: GO 52634
// end ; end ;
52626: GO 52562
52628: POP
52629: POP
// end ;
52630: GO 52448
52632: POP
52633: POP
// end ;
52634: LD_VAR 0 3
52638: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52639: LD_INT 0
52641: PPUSH
// if not side or side > 8 then
52642: LD_VAR 0 3
52646: NOT
52647: PUSH
52648: LD_VAR 0 3
52652: PUSH
52653: LD_INT 8
52655: GREATER
52656: OR
52657: IFFALSE 52661
// exit ;
52659: GO 52720
// if not range then
52661: LD_VAR 0 4
52665: NOT
52666: IFFALSE 52677
// range := - 12 ;
52668: LD_ADDR_VAR 0 4
52672: PUSH
52673: LD_INT 12
52675: NEG
52676: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52677: LD_VAR 0 1
52681: PPUSH
52682: LD_VAR 0 2
52686: PPUSH
52687: LD_VAR 0 3
52691: PPUSH
52692: LD_VAR 0 4
52696: PPUSH
52697: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52701: LD_VAR 0 1
52705: PPUSH
52706: LD_VAR 0 2
52710: PPUSH
52711: LD_VAR 0 3
52715: PPUSH
52716: CALL_OW 331
// end ;
52720: LD_VAR 0 5
52724: RET
// export function Video ( mode ) ; begin
52725: LD_INT 0
52727: PPUSH
// ingame_video = mode ;
52728: LD_ADDR_OWVAR 52
52732: PUSH
52733: LD_VAR 0 1
52737: ST_TO_ADDR
// interface_hidden = mode ;
52738: LD_ADDR_OWVAR 54
52742: PUSH
52743: LD_VAR 0 1
52747: ST_TO_ADDR
// end ;
52748: LD_VAR 0 2
52752: RET
// export function Join ( array , element ) ; begin
52753: LD_INT 0
52755: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: LD_VAR 0 1
52765: PPUSH
52766: LD_VAR 0 1
52770: PUSH
52771: LD_INT 1
52773: PLUS
52774: PPUSH
52775: LD_VAR 0 2
52779: PPUSH
52780: CALL_OW 1
52784: ST_TO_ADDR
// end ;
52785: LD_VAR 0 3
52789: RET
// export function JoinUnion ( array , element ) ; begin
52790: LD_INT 0
52792: PPUSH
// result := array union element ;
52793: LD_ADDR_VAR 0 3
52797: PUSH
52798: LD_VAR 0 1
52802: PUSH
52803: LD_VAR 0 2
52807: UNION
52808: ST_TO_ADDR
// end ;
52809: LD_VAR 0 3
52813: RET
// export function GetBehemoths ( side ) ; begin
52814: LD_INT 0
52816: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52817: LD_ADDR_VAR 0 2
52821: PUSH
52822: LD_INT 22
52824: PUSH
52825: LD_VAR 0 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 31
52836: PUSH
52837: LD_INT 25
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PPUSH
52848: CALL_OW 69
52852: ST_TO_ADDR
// end ;
52853: LD_VAR 0 2
52857: RET
// export function Shuffle ( array ) ; var i , index ; begin
52858: LD_INT 0
52860: PPUSH
52861: PPUSH
52862: PPUSH
// result := [ ] ;
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: EMPTY
52869: ST_TO_ADDR
// if not array then
52870: LD_VAR 0 1
52874: NOT
52875: IFFALSE 52879
// exit ;
52877: GO 52978
// Randomize ;
52879: CALL_OW 10
// for i = array downto 1 do
52883: LD_ADDR_VAR 0 3
52887: PUSH
52888: DOUBLE
52889: LD_VAR 0 1
52893: INC
52894: ST_TO_ADDR
52895: LD_INT 1
52897: PUSH
52898: FOR_DOWNTO
52899: IFFALSE 52976
// begin index := rand ( 1 , array ) ;
52901: LD_ADDR_VAR 0 4
52905: PUSH
52906: LD_INT 1
52908: PPUSH
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL_OW 12
52918: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52919: LD_ADDR_VAR 0 2
52923: PUSH
52924: LD_VAR 0 2
52928: PPUSH
52929: LD_VAR 0 2
52933: PUSH
52934: LD_INT 1
52936: PLUS
52937: PPUSH
52938: LD_VAR 0 1
52942: PUSH
52943: LD_VAR 0 4
52947: ARRAY
52948: PPUSH
52949: CALL_OW 2
52953: ST_TO_ADDR
// array := Delete ( array , index ) ;
52954: LD_ADDR_VAR 0 1
52958: PUSH
52959: LD_VAR 0 1
52963: PPUSH
52964: LD_VAR 0 4
52968: PPUSH
52969: CALL_OW 3
52973: ST_TO_ADDR
// end ;
52974: GO 52898
52976: POP
52977: POP
// end ;
52978: LD_VAR 0 2
52982: RET
// export function GetBaseMaterials ( base ) ; begin
52983: LD_INT 0
52985: PPUSH
// result := [ 0 , 0 , 0 ] ;
52986: LD_ADDR_VAR 0 2
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: ST_TO_ADDR
// if not base then
53005: LD_VAR 0 1
53009: NOT
53010: IFFALSE 53014
// exit ;
53012: GO 53063
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53014: LD_ADDR_VAR 0 2
53018: PUSH
53019: LD_VAR 0 1
53023: PPUSH
53024: LD_INT 1
53026: PPUSH
53027: CALL_OW 275
53031: PUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: LD_INT 2
53039: PPUSH
53040: CALL_OW 275
53044: PUSH
53045: LD_VAR 0 1
53049: PPUSH
53050: LD_INT 3
53052: PPUSH
53053: CALL_OW 275
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// end ;
53063: LD_VAR 0 2
53067: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53068: LD_INT 0
53070: PPUSH
53071: PPUSH
// result := array ;
53072: LD_ADDR_VAR 0 3
53076: PUSH
53077: LD_VAR 0 1
53081: ST_TO_ADDR
// if size >= result then
53082: LD_VAR 0 2
53086: PUSH
53087: LD_VAR 0 3
53091: GREATEREQUAL
53092: IFFALSE 53096
// exit ;
53094: GO 53146
// if size then
53096: LD_VAR 0 2
53100: IFFALSE 53146
// for i := array downto size do
53102: LD_ADDR_VAR 0 4
53106: PUSH
53107: DOUBLE
53108: LD_VAR 0 1
53112: INC
53113: ST_TO_ADDR
53114: LD_VAR 0 2
53118: PUSH
53119: FOR_DOWNTO
53120: IFFALSE 53144
// result := Delete ( result , result ) ;
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: LD_VAR 0 3
53131: PPUSH
53132: LD_VAR 0 3
53136: PPUSH
53137: CALL_OW 3
53141: ST_TO_ADDR
53142: GO 53119
53144: POP
53145: POP
// end ;
53146: LD_VAR 0 3
53150: RET
// export function ComExit ( unit ) ; var tmp ; begin
53151: LD_INT 0
53153: PPUSH
53154: PPUSH
// if not IsInUnit ( unit ) then
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 310
53164: NOT
53165: IFFALSE 53169
// exit ;
53167: GO 53229
// tmp := IsInUnit ( unit ) ;
53169: LD_ADDR_VAR 0 3
53173: PUSH
53174: LD_VAR 0 1
53178: PPUSH
53179: CALL_OW 310
53183: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53184: LD_VAR 0 3
53188: PPUSH
53189: CALL_OW 247
53193: PUSH
53194: LD_INT 2
53196: EQUAL
53197: IFFALSE 53210
// ComExitVehicle ( unit ) else
53199: LD_VAR 0 1
53203: PPUSH
53204: CALL_OW 121
53208: GO 53219
// ComExitBuilding ( unit ) ;
53210: LD_VAR 0 1
53214: PPUSH
53215: CALL_OW 122
// result := tmp ;
53219: LD_ADDR_VAR 0 2
53223: PUSH
53224: LD_VAR 0 3
53228: ST_TO_ADDR
// end ;
53229: LD_VAR 0 2
53233: RET
// export function ComExitAll ( units ) ; var i ; begin
53234: LD_INT 0
53236: PPUSH
53237: PPUSH
// if not units then
53238: LD_VAR 0 1
53242: NOT
53243: IFFALSE 53247
// exit ;
53245: GO 53273
// for i in units do
53247: LD_ADDR_VAR 0 3
53251: PUSH
53252: LD_VAR 0 1
53256: PUSH
53257: FOR_IN
53258: IFFALSE 53271
// ComExit ( i ) ;
53260: LD_VAR 0 3
53264: PPUSH
53265: CALL 53151 0 1
53269: GO 53257
53271: POP
53272: POP
// end ;
53273: LD_VAR 0 2
53277: RET
// export function ResetHc ; begin
53278: LD_INT 0
53280: PPUSH
// InitHc ;
53281: CALL_OW 19
// hc_importance := 0 ;
53285: LD_ADDR_OWVAR 32
53289: PUSH
53290: LD_INT 0
53292: ST_TO_ADDR
// end ;
53293: LD_VAR 0 1
53297: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
53302: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53303: LD_ADDR_VAR 0 6
53307: PUSH
53308: LD_VAR 0 1
53312: PUSH
53313: LD_VAR 0 3
53317: PLUS
53318: PUSH
53319: LD_INT 2
53321: DIV
53322: ST_TO_ADDR
// if _x < 0 then
53323: LD_VAR 0 6
53327: PUSH
53328: LD_INT 0
53330: LESS
53331: IFFALSE 53348
// _x := _x * - 1 ;
53333: LD_ADDR_VAR 0 6
53337: PUSH
53338: LD_VAR 0 6
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: MUL
53347: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53348: LD_ADDR_VAR 0 7
53352: PUSH
53353: LD_VAR 0 2
53357: PUSH
53358: LD_VAR 0 4
53362: PLUS
53363: PUSH
53364: LD_INT 2
53366: DIV
53367: ST_TO_ADDR
// if _y < 0 then
53368: LD_VAR 0 7
53372: PUSH
53373: LD_INT 0
53375: LESS
53376: IFFALSE 53393
// _y := _y * - 1 ;
53378: LD_ADDR_VAR 0 7
53382: PUSH
53383: LD_VAR 0 7
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: MUL
53392: ST_TO_ADDR
// result := [ _x , _y ] ;
53393: LD_ADDR_VAR 0 5
53397: PUSH
53398: LD_VAR 0 6
53402: PUSH
53403: LD_VAR 0 7
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// end ;
53412: LD_VAR 0 5
53416: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53417: LD_INT 0
53419: PPUSH
53420: PPUSH
53421: PPUSH
53422: PPUSH
// task := GetTaskList ( unit ) ;
53423: LD_ADDR_VAR 0 7
53427: PUSH
53428: LD_VAR 0 1
53432: PPUSH
53433: CALL_OW 437
53437: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53438: LD_VAR 0 7
53442: NOT
53443: PUSH
53444: LD_VAR 0 1
53448: PPUSH
53449: LD_VAR 0 2
53453: PPUSH
53454: CALL_OW 308
53458: NOT
53459: AND
53460: IFFALSE 53464
// exit ;
53462: GO 53582
// if IsInArea ( unit , area ) then
53464: LD_VAR 0 1
53468: PPUSH
53469: LD_VAR 0 2
53473: PPUSH
53474: CALL_OW 308
53478: IFFALSE 53496
// begin ComMoveToArea ( unit , goAway ) ;
53480: LD_VAR 0 1
53484: PPUSH
53485: LD_VAR 0 3
53489: PPUSH
53490: CALL_OW 113
// exit ;
53494: GO 53582
// end ; if task [ 1 ] [ 1 ] <> M then
53496: LD_VAR 0 7
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: PUSH
53505: LD_INT 1
53507: ARRAY
53508: PUSH
53509: LD_STRING M
53511: NONEQUAL
53512: IFFALSE 53516
// exit ;
53514: GO 53582
// x := task [ 1 ] [ 2 ] ;
53516: LD_ADDR_VAR 0 5
53520: PUSH
53521: LD_VAR 0 7
53525: PUSH
53526: LD_INT 1
53528: ARRAY
53529: PUSH
53530: LD_INT 2
53532: ARRAY
53533: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53534: LD_ADDR_VAR 0 6
53538: PUSH
53539: LD_VAR 0 7
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PUSH
53548: LD_INT 3
53550: ARRAY
53551: ST_TO_ADDR
// if InArea ( x , y , area ) then
53552: LD_VAR 0 5
53556: PPUSH
53557: LD_VAR 0 6
53561: PPUSH
53562: LD_VAR 0 2
53566: PPUSH
53567: CALL_OW 309
53571: IFFALSE 53582
// ComStop ( unit ) ;
53573: LD_VAR 0 1
53577: PPUSH
53578: CALL_OW 141
// end ;
53582: LD_VAR 0 4
53586: RET
// export function Abs ( value ) ; begin
53587: LD_INT 0
53589: PPUSH
// result := value ;
53590: LD_ADDR_VAR 0 2
53594: PUSH
53595: LD_VAR 0 1
53599: ST_TO_ADDR
// if value < 0 then
53600: LD_VAR 0 1
53604: PUSH
53605: LD_INT 0
53607: LESS
53608: IFFALSE 53625
// result := value * - 1 ;
53610: LD_ADDR_VAR 0 2
53614: PUSH
53615: LD_VAR 0 1
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: MUL
53624: ST_TO_ADDR
// end ;
53625: LD_VAR 0 2
53629: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53630: LD_INT 0
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
53636: PPUSH
53637: PPUSH
53638: PPUSH
53639: PPUSH
// if not unit or not building then
53640: LD_VAR 0 1
53644: NOT
53645: PUSH
53646: LD_VAR 0 2
53650: NOT
53651: OR
53652: IFFALSE 53656
// exit ;
53654: GO 53882
// x := GetX ( building ) ;
53656: LD_ADDR_VAR 0 4
53660: PUSH
53661: LD_VAR 0 2
53665: PPUSH
53666: CALL_OW 250
53670: ST_TO_ADDR
// y := GetY ( building ) ;
53671: LD_ADDR_VAR 0 6
53675: PUSH
53676: LD_VAR 0 2
53680: PPUSH
53681: CALL_OW 251
53685: ST_TO_ADDR
// d := GetDir ( building ) ;
53686: LD_ADDR_VAR 0 8
53690: PUSH
53691: LD_VAR 0 2
53695: PPUSH
53696: CALL_OW 254
53700: ST_TO_ADDR
// r := 4 ;
53701: LD_ADDR_VAR 0 9
53705: PUSH
53706: LD_INT 4
53708: ST_TO_ADDR
// for i := 1 to 5 do
53709: LD_ADDR_VAR 0 10
53713: PUSH
53714: DOUBLE
53715: LD_INT 1
53717: DEC
53718: ST_TO_ADDR
53719: LD_INT 5
53721: PUSH
53722: FOR_TO
53723: IFFALSE 53880
// begin _x := ShiftX ( x , d , r + i ) ;
53725: LD_ADDR_VAR 0 5
53729: PUSH
53730: LD_VAR 0 4
53734: PPUSH
53735: LD_VAR 0 8
53739: PPUSH
53740: LD_VAR 0 9
53744: PUSH
53745: LD_VAR 0 10
53749: PLUS
53750: PPUSH
53751: CALL_OW 272
53755: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53756: LD_ADDR_VAR 0 7
53760: PUSH
53761: LD_VAR 0 6
53765: PPUSH
53766: LD_VAR 0 8
53770: PPUSH
53771: LD_VAR 0 9
53775: PUSH
53776: LD_VAR 0 10
53780: PLUS
53781: PPUSH
53782: CALL_OW 273
53786: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53787: LD_VAR 0 5
53791: PPUSH
53792: LD_VAR 0 7
53796: PPUSH
53797: CALL_OW 488
53801: PUSH
53802: LD_VAR 0 5
53806: PPUSH
53807: LD_VAR 0 7
53811: PPUSH
53812: CALL_OW 428
53816: PPUSH
53817: CALL_OW 247
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: IN
53832: NOT
53833: AND
53834: IFFALSE 53878
// begin ComMoveXY ( unit , _x , _y ) ;
53836: LD_VAR 0 1
53840: PPUSH
53841: LD_VAR 0 5
53845: PPUSH
53846: LD_VAR 0 7
53850: PPUSH
53851: CALL_OW 111
// result := [ _x , _y ] ;
53855: LD_ADDR_VAR 0 3
53859: PUSH
53860: LD_VAR 0 5
53864: PUSH
53865: LD_VAR 0 7
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// exit ;
53874: POP
53875: POP
53876: GO 53882
// end ; end ;
53878: GO 53722
53880: POP
53881: POP
// end ;
53882: LD_VAR 0 3
53886: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53887: LD_INT 0
53889: PPUSH
53890: PPUSH
53891: PPUSH
// result := 0 ;
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_INT 0
53899: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53900: LD_VAR 0 1
53904: PUSH
53905: LD_INT 0
53907: LESS
53908: PUSH
53909: LD_VAR 0 1
53913: PUSH
53914: LD_INT 8
53916: GREATER
53917: OR
53918: PUSH
53919: LD_VAR 0 2
53923: PUSH
53924: LD_INT 0
53926: LESS
53927: OR
53928: PUSH
53929: LD_VAR 0 2
53933: PUSH
53934: LD_INT 8
53936: GREATER
53937: OR
53938: IFFALSE 53942
// exit ;
53940: GO 54017
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53942: LD_ADDR_VAR 0 4
53946: PUSH
53947: LD_INT 22
53949: PUSH
53950: LD_VAR 0 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PPUSH
53959: CALL_OW 69
53963: PUSH
53964: FOR_IN
53965: IFFALSE 54015
// begin un := UnitShoot ( i ) ;
53967: LD_ADDR_VAR 0 5
53971: PUSH
53972: LD_VAR 0 4
53976: PPUSH
53977: CALL_OW 504
53981: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53982: LD_VAR 0 5
53986: PPUSH
53987: CALL_OW 255
53991: PUSH
53992: LD_VAR 0 1
53996: EQUAL
53997: IFFALSE 54013
// begin result := un ;
53999: LD_ADDR_VAR 0 3
54003: PUSH
54004: LD_VAR 0 5
54008: ST_TO_ADDR
// exit ;
54009: POP
54010: POP
54011: GO 54017
// end ; end ;
54013: GO 53964
54015: POP
54016: POP
// end ;
54017: LD_VAR 0 3
54021: RET
// export function GetCargoBay ( units ) ; begin
54022: LD_INT 0
54024: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54025: LD_ADDR_VAR 0 2
54029: PUSH
54030: LD_VAR 0 1
54034: PPUSH
54035: LD_INT 2
54037: PUSH
54038: LD_INT 34
54040: PUSH
54041: LD_INT 12
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 34
54050: PUSH
54051: LD_INT 51
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 34
54060: PUSH
54061: LD_INT 32
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 34
54070: PUSH
54071: LD_INT 89
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: PPUSH
54085: CALL_OW 72
54089: ST_TO_ADDR
// end ;
54090: LD_VAR 0 2
54094: RET
// export function Negate ( value ) ; begin
54095: LD_INT 0
54097: PPUSH
// result := not value ;
54098: LD_ADDR_VAR 0 2
54102: PUSH
54103: LD_VAR 0 1
54107: NOT
54108: ST_TO_ADDR
// end ;
54109: LD_VAR 0 2
54113: RET
// export function Inc ( value ) ; begin
54114: LD_INT 0
54116: PPUSH
// result := value + 1 ;
54117: LD_ADDR_VAR 0 2
54121: PUSH
54122: LD_VAR 0 1
54126: PUSH
54127: LD_INT 1
54129: PLUS
54130: ST_TO_ADDR
// end ;
54131: LD_VAR 0 2
54135: RET
// export function Dec ( value ) ; begin
54136: LD_INT 0
54138: PPUSH
// result := value - 1 ;
54139: LD_ADDR_VAR 0 2
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: LD_INT 1
54151: MINUS
54152: ST_TO_ADDR
// end ;
54153: LD_VAR 0 2
54157: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54158: LD_INT 0
54160: PPUSH
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54168: LD_VAR 0 1
54172: PPUSH
54173: LD_VAR 0 2
54177: PPUSH
54178: CALL_OW 488
54182: NOT
54183: PUSH
54184: LD_VAR 0 3
54188: PPUSH
54189: LD_VAR 0 4
54193: PPUSH
54194: CALL_OW 488
54198: NOT
54199: OR
54200: IFFALSE 54213
// begin result := - 1 ;
54202: LD_ADDR_VAR 0 5
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: ST_TO_ADDR
// exit ;
54211: GO 54448
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54213: LD_ADDR_VAR 0 12
54217: PUSH
54218: LD_VAR 0 1
54222: PPUSH
54223: LD_VAR 0 2
54227: PPUSH
54228: LD_VAR 0 3
54232: PPUSH
54233: LD_VAR 0 4
54237: PPUSH
54238: CALL 53298 0 4
54242: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54243: LD_ADDR_VAR 0 11
54247: PUSH
54248: LD_VAR 0 1
54252: PPUSH
54253: LD_VAR 0 2
54257: PPUSH
54258: LD_VAR 0 12
54262: PUSH
54263: LD_INT 1
54265: ARRAY
54266: PPUSH
54267: LD_VAR 0 12
54271: PUSH
54272: LD_INT 2
54274: ARRAY
54275: PPUSH
54276: CALL_OW 298
54280: ST_TO_ADDR
// distance := 9999 ;
54281: LD_ADDR_VAR 0 10
54285: PUSH
54286: LD_INT 9999
54288: ST_TO_ADDR
// for i := 0 to 5 do
54289: LD_ADDR_VAR 0 6
54293: PUSH
54294: DOUBLE
54295: LD_INT 0
54297: DEC
54298: ST_TO_ADDR
54299: LD_INT 5
54301: PUSH
54302: FOR_TO
54303: IFFALSE 54446
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54305: LD_ADDR_VAR 0 7
54309: PUSH
54310: LD_VAR 0 1
54314: PPUSH
54315: LD_VAR 0 6
54319: PPUSH
54320: LD_VAR 0 11
54324: PPUSH
54325: CALL_OW 272
54329: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54330: LD_ADDR_VAR 0 8
54334: PUSH
54335: LD_VAR 0 2
54339: PPUSH
54340: LD_VAR 0 6
54344: PPUSH
54345: LD_VAR 0 11
54349: PPUSH
54350: CALL_OW 273
54354: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54355: LD_VAR 0 7
54359: PPUSH
54360: LD_VAR 0 8
54364: PPUSH
54365: CALL_OW 488
54369: NOT
54370: IFFALSE 54374
// continue ;
54372: GO 54302
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54374: LD_ADDR_VAR 0 9
54378: PUSH
54379: LD_VAR 0 12
54383: PUSH
54384: LD_INT 1
54386: ARRAY
54387: PPUSH
54388: LD_VAR 0 12
54392: PUSH
54393: LD_INT 2
54395: ARRAY
54396: PPUSH
54397: LD_VAR 0 7
54401: PPUSH
54402: LD_VAR 0 8
54406: PPUSH
54407: CALL_OW 298
54411: ST_TO_ADDR
// if tmp < distance then
54412: LD_VAR 0 9
54416: PUSH
54417: LD_VAR 0 10
54421: LESS
54422: IFFALSE 54444
// begin result := i ;
54424: LD_ADDR_VAR 0 5
54428: PUSH
54429: LD_VAR 0 6
54433: ST_TO_ADDR
// distance := tmp ;
54434: LD_ADDR_VAR 0 10
54438: PUSH
54439: LD_VAR 0 9
54443: ST_TO_ADDR
// end ; end ;
54444: GO 54302
54446: POP
54447: POP
// end ;
54448: LD_VAR 0 5
54452: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54453: LD_INT 0
54455: PPUSH
54456: PPUSH
// if not driver or not IsInUnit ( driver ) then
54457: LD_VAR 0 1
54461: NOT
54462: PUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL_OW 310
54472: NOT
54473: OR
54474: IFFALSE 54478
// exit ;
54476: GO 54568
// vehicle := IsInUnit ( driver ) ;
54478: LD_ADDR_VAR 0 3
54482: PUSH
54483: LD_VAR 0 1
54487: PPUSH
54488: CALL_OW 310
54492: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54493: LD_VAR 0 1
54497: PPUSH
54498: LD_STRING \
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: PUSH
54528: LD_STRING E
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_VAR 0 3
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PPUSH
54564: CALL_OW 446
// end ;
54568: LD_VAR 0 2
54572: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54573: LD_INT 0
54575: PPUSH
54576: PPUSH
// if not driver or not IsInUnit ( driver ) then
54577: LD_VAR 0 1
54581: NOT
54582: PUSH
54583: LD_VAR 0 1
54587: PPUSH
54588: CALL_OW 310
54592: NOT
54593: OR
54594: IFFALSE 54598
// exit ;
54596: GO 54688
// vehicle := IsInUnit ( driver ) ;
54598: LD_ADDR_VAR 0 3
54602: PUSH
54603: LD_VAR 0 1
54607: PPUSH
54608: CALL_OW 310
54612: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54613: LD_VAR 0 1
54617: PPUSH
54618: LD_STRING \
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: PUSH
54648: LD_STRING E
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_VAR 0 3
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PPUSH
54684: CALL_OW 447
// end ;
54688: LD_VAR 0 2
54692: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54693: LD_INT 0
54695: PPUSH
54696: PPUSH
54697: PPUSH
// tmp := [ ] ;
54698: LD_ADDR_VAR 0 5
54702: PUSH
54703: EMPTY
54704: ST_TO_ADDR
// for i in units do
54705: LD_ADDR_VAR 0 4
54709: PUSH
54710: LD_VAR 0 1
54714: PUSH
54715: FOR_IN
54716: IFFALSE 54754
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54718: LD_ADDR_VAR 0 5
54722: PUSH
54723: LD_VAR 0 5
54727: PPUSH
54728: LD_VAR 0 5
54732: PUSH
54733: LD_INT 1
54735: PLUS
54736: PPUSH
54737: LD_VAR 0 4
54741: PPUSH
54742: CALL_OW 256
54746: PPUSH
54747: CALL_OW 2
54751: ST_TO_ADDR
54752: GO 54715
54754: POP
54755: POP
// if not tmp then
54756: LD_VAR 0 5
54760: NOT
54761: IFFALSE 54765
// exit ;
54763: GO 54813
// if asc then
54765: LD_VAR 0 2
54769: IFFALSE 54793
// result := SortListByListAsc ( units , tmp ) else
54771: LD_ADDR_VAR 0 3
54775: PUSH
54776: LD_VAR 0 1
54780: PPUSH
54781: LD_VAR 0 5
54785: PPUSH
54786: CALL_OW 76
54790: ST_TO_ADDR
54791: GO 54813
// result := SortListByListDesc ( units , tmp ) ;
54793: LD_ADDR_VAR 0 3
54797: PUSH
54798: LD_VAR 0 1
54802: PPUSH
54803: LD_VAR 0 5
54807: PPUSH
54808: CALL_OW 77
54812: ST_TO_ADDR
// end ;
54813: LD_VAR 0 3
54817: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54818: LD_INT 0
54820: PPUSH
54821: PPUSH
// task := GetTaskList ( mech ) ;
54822: LD_ADDR_VAR 0 4
54826: PUSH
54827: LD_VAR 0 1
54831: PPUSH
54832: CALL_OW 437
54836: ST_TO_ADDR
// if not task then
54837: LD_VAR 0 4
54841: NOT
54842: IFFALSE 54846
// exit ;
54844: GO 54888
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54846: LD_ADDR_VAR 0 3
54850: PUSH
54851: LD_VAR 0 4
54855: PUSH
54856: LD_INT 1
54858: ARRAY
54859: PUSH
54860: LD_INT 1
54862: ARRAY
54863: PUSH
54864: LD_STRING r
54866: EQUAL
54867: PUSH
54868: LD_VAR 0 4
54872: PUSH
54873: LD_INT 1
54875: ARRAY
54876: PUSH
54877: LD_INT 4
54879: ARRAY
54880: PUSH
54881: LD_VAR 0 2
54885: EQUAL
54886: AND
54887: ST_TO_ADDR
// end ;
54888: LD_VAR 0 3
54892: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54893: LD_INT 0
54895: PPUSH
// SetDir ( unit , d ) ;
54896: LD_VAR 0 1
54900: PPUSH
54901: LD_VAR 0 4
54905: PPUSH
54906: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54910: LD_VAR 0 1
54914: PPUSH
54915: LD_VAR 0 2
54919: PPUSH
54920: LD_VAR 0 3
54924: PPUSH
54925: LD_VAR 0 5
54929: PPUSH
54930: CALL_OW 48
// end ;
54934: LD_VAR 0 6
54938: RET
// export function ToNaturalNumber ( number ) ; begin
54939: LD_INT 0
54941: PPUSH
// result := number div 1 ;
54942: LD_ADDR_VAR 0 2
54946: PUSH
54947: LD_VAR 0 1
54951: PUSH
54952: LD_INT 1
54954: DIV
54955: ST_TO_ADDR
// if number < 0 then
54956: LD_VAR 0 1
54960: PUSH
54961: LD_INT 0
54963: LESS
54964: IFFALSE 54974
// result := 0 ;
54966: LD_ADDR_VAR 0 2
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
// end ;
54974: LD_VAR 0 2
54978: RET
// export function SortByClass ( units , class ) ; var un ; begin
54979: LD_INT 0
54981: PPUSH
54982: PPUSH
// if not units or not class then
54983: LD_VAR 0 1
54987: NOT
54988: PUSH
54989: LD_VAR 0 2
54993: NOT
54994: OR
54995: IFFALSE 54999
// exit ;
54997: GO 55094
// result := [ ] ;
54999: LD_ADDR_VAR 0 3
55003: PUSH
55004: EMPTY
55005: ST_TO_ADDR
// for un in units do
55006: LD_ADDR_VAR 0 4
55010: PUSH
55011: LD_VAR 0 1
55015: PUSH
55016: FOR_IN
55017: IFFALSE 55092
// if GetClass ( un ) = class then
55019: LD_VAR 0 4
55023: PPUSH
55024: CALL_OW 257
55028: PUSH
55029: LD_VAR 0 2
55033: EQUAL
55034: IFFALSE 55061
// result := Insert ( result , 1 , un ) else
55036: LD_ADDR_VAR 0 3
55040: PUSH
55041: LD_VAR 0 3
55045: PPUSH
55046: LD_INT 1
55048: PPUSH
55049: LD_VAR 0 4
55053: PPUSH
55054: CALL_OW 2
55058: ST_TO_ADDR
55059: GO 55090
// result := Replace ( result , result + 1 , un ) ;
55061: LD_ADDR_VAR 0 3
55065: PUSH
55066: LD_VAR 0 3
55070: PPUSH
55071: LD_VAR 0 3
55075: PUSH
55076: LD_INT 1
55078: PLUS
55079: PPUSH
55080: LD_VAR 0 4
55084: PPUSH
55085: CALL_OW 1
55089: ST_TO_ADDR
55090: GO 55016
55092: POP
55093: POP
// end ;
55094: LD_VAR 0 3
55098: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55099: LD_INT 0
55101: PPUSH
55102: PPUSH
55103: PPUSH
55104: PPUSH
55105: PPUSH
55106: PPUSH
55107: PPUSH
// result := [ ] ;
55108: LD_ADDR_VAR 0 4
55112: PUSH
55113: EMPTY
55114: ST_TO_ADDR
// if x - r < 0 then
55115: LD_VAR 0 1
55119: PUSH
55120: LD_VAR 0 3
55124: MINUS
55125: PUSH
55126: LD_INT 0
55128: LESS
55129: IFFALSE 55141
// min_x := 0 else
55131: LD_ADDR_VAR 0 8
55135: PUSH
55136: LD_INT 0
55138: ST_TO_ADDR
55139: GO 55157
// min_x := x - r ;
55141: LD_ADDR_VAR 0 8
55145: PUSH
55146: LD_VAR 0 1
55150: PUSH
55151: LD_VAR 0 3
55155: MINUS
55156: ST_TO_ADDR
// if y - r < 0 then
55157: LD_VAR 0 2
55161: PUSH
55162: LD_VAR 0 3
55166: MINUS
55167: PUSH
55168: LD_INT 0
55170: LESS
55171: IFFALSE 55183
// min_y := 0 else
55173: LD_ADDR_VAR 0 7
55177: PUSH
55178: LD_INT 0
55180: ST_TO_ADDR
55181: GO 55199
// min_y := y - r ;
55183: LD_ADDR_VAR 0 7
55187: PUSH
55188: LD_VAR 0 2
55192: PUSH
55193: LD_VAR 0 3
55197: MINUS
55198: ST_TO_ADDR
// max_x := x + r ;
55199: LD_ADDR_VAR 0 9
55203: PUSH
55204: LD_VAR 0 1
55208: PUSH
55209: LD_VAR 0 3
55213: PLUS
55214: ST_TO_ADDR
// max_y := y + r ;
55215: LD_ADDR_VAR 0 10
55219: PUSH
55220: LD_VAR 0 2
55224: PUSH
55225: LD_VAR 0 3
55229: PLUS
55230: ST_TO_ADDR
// for _x = min_x to max_x do
55231: LD_ADDR_VAR 0 5
55235: PUSH
55236: DOUBLE
55237: LD_VAR 0 8
55241: DEC
55242: ST_TO_ADDR
55243: LD_VAR 0 9
55247: PUSH
55248: FOR_TO
55249: IFFALSE 55350
// for _y = min_y to max_y do
55251: LD_ADDR_VAR 0 6
55255: PUSH
55256: DOUBLE
55257: LD_VAR 0 7
55261: DEC
55262: ST_TO_ADDR
55263: LD_VAR 0 10
55267: PUSH
55268: FOR_TO
55269: IFFALSE 55346
// begin if not ValidHex ( _x , _y ) then
55271: LD_VAR 0 5
55275: PPUSH
55276: LD_VAR 0 6
55280: PPUSH
55281: CALL_OW 488
55285: NOT
55286: IFFALSE 55290
// continue ;
55288: GO 55268
// if GetResourceTypeXY ( _x , _y ) then
55290: LD_VAR 0 5
55294: PPUSH
55295: LD_VAR 0 6
55299: PPUSH
55300: CALL_OW 283
55304: IFFALSE 55344
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55306: LD_ADDR_VAR 0 4
55310: PUSH
55311: LD_VAR 0 4
55315: PPUSH
55316: LD_VAR 0 4
55320: PUSH
55321: LD_INT 1
55323: PLUS
55324: PPUSH
55325: LD_VAR 0 5
55329: PUSH
55330: LD_VAR 0 6
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PPUSH
55339: CALL_OW 1
55343: ST_TO_ADDR
// end ;
55344: GO 55268
55346: POP
55347: POP
55348: GO 55248
55350: POP
55351: POP
// end ;
55352: LD_VAR 0 4
55356: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55357: LD_INT 0
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
55364: PPUSH
55365: PPUSH
55366: PPUSH
// if not units then
55367: LD_VAR 0 1
55371: NOT
55372: IFFALSE 55376
// exit ;
55374: GO 55900
// result := UnitFilter ( units , [ f_ok ] ) ;
55376: LD_ADDR_VAR 0 3
55380: PUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: LD_INT 50
55388: PUSH
55389: EMPTY
55390: LIST
55391: PPUSH
55392: CALL_OW 72
55396: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55397: LD_ADDR_VAR 0 8
55401: PUSH
55402: LD_VAR 0 1
55406: PUSH
55407: LD_INT 1
55409: ARRAY
55410: PPUSH
55411: CALL_OW 255
55415: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55416: LD_ADDR_VAR 0 10
55420: PUSH
55421: LD_INT 29
55423: PUSH
55424: LD_INT 91
55426: PUSH
55427: LD_INT 49
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: LIST
55434: ST_TO_ADDR
// if not result then
55435: LD_VAR 0 3
55439: NOT
55440: IFFALSE 55444
// exit ;
55442: GO 55900
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55444: LD_ADDR_VAR 0 5
55448: PUSH
55449: LD_INT 81
55451: PUSH
55452: LD_VAR 0 8
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PPUSH
55461: CALL_OW 69
55465: ST_TO_ADDR
// for i in result do
55466: LD_ADDR_VAR 0 4
55470: PUSH
55471: LD_VAR 0 3
55475: PUSH
55476: FOR_IN
55477: IFFALSE 55898
// begin tag := GetTag ( i ) + 1 ;
55479: LD_ADDR_VAR 0 9
55483: PUSH
55484: LD_VAR 0 4
55488: PPUSH
55489: CALL_OW 110
55493: PUSH
55494: LD_INT 1
55496: PLUS
55497: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55498: LD_ADDR_VAR 0 7
55502: PUSH
55503: LD_VAR 0 4
55507: PPUSH
55508: CALL_OW 250
55512: PPUSH
55513: LD_VAR 0 4
55517: PPUSH
55518: CALL_OW 251
55522: PPUSH
55523: LD_INT 6
55525: PPUSH
55526: CALL 55099 0 3
55530: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55531: LD_VAR 0 4
55535: PPUSH
55536: CALL_OW 247
55540: PUSH
55541: LD_INT 2
55543: EQUAL
55544: PUSH
55545: LD_VAR 0 7
55549: AND
55550: PUSH
55551: LD_VAR 0 4
55555: PPUSH
55556: CALL_OW 264
55560: PUSH
55561: LD_VAR 0 10
55565: IN
55566: NOT
55567: AND
55568: IFFALSE 55607
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55570: LD_VAR 0 4
55574: PPUSH
55575: LD_VAR 0 7
55579: PUSH
55580: LD_INT 1
55582: ARRAY
55583: PUSH
55584: LD_INT 1
55586: ARRAY
55587: PPUSH
55588: LD_VAR 0 7
55592: PUSH
55593: LD_INT 1
55595: ARRAY
55596: PUSH
55597: LD_INT 2
55599: ARRAY
55600: PPUSH
55601: CALL_OW 116
55605: GO 55896
// if path > tag then
55607: LD_VAR 0 2
55611: PUSH
55612: LD_VAR 0 9
55616: GREATER
55617: IFFALSE 55825
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55619: LD_ADDR_VAR 0 6
55623: PUSH
55624: LD_VAR 0 5
55628: PPUSH
55629: LD_INT 91
55631: PUSH
55632: LD_VAR 0 4
55636: PUSH
55637: LD_INT 8
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: PPUSH
55645: CALL_OW 72
55649: ST_TO_ADDR
// if nearEnemy then
55650: LD_VAR 0 6
55654: IFFALSE 55723
// begin if GetWeapon ( i ) = ru_time_lapser then
55656: LD_VAR 0 4
55660: PPUSH
55661: CALL_OW 264
55665: PUSH
55666: LD_INT 49
55668: EQUAL
55669: IFFALSE 55697
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55671: LD_VAR 0 4
55675: PPUSH
55676: LD_VAR 0 6
55680: PPUSH
55681: LD_VAR 0 4
55685: PPUSH
55686: CALL_OW 74
55690: PPUSH
55691: CALL_OW 112
55695: GO 55721
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55697: LD_VAR 0 4
55701: PPUSH
55702: LD_VAR 0 6
55706: PPUSH
55707: LD_VAR 0 4
55711: PPUSH
55712: CALL_OW 74
55716: PPUSH
55717: CALL_OW 115
// end else
55721: GO 55823
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55723: LD_VAR 0 4
55727: PPUSH
55728: LD_VAR 0 2
55732: PUSH
55733: LD_VAR 0 9
55737: ARRAY
55738: PUSH
55739: LD_INT 1
55741: ARRAY
55742: PPUSH
55743: LD_VAR 0 2
55747: PUSH
55748: LD_VAR 0 9
55752: ARRAY
55753: PUSH
55754: LD_INT 2
55756: ARRAY
55757: PPUSH
55758: CALL_OW 297
55762: PUSH
55763: LD_INT 6
55765: GREATER
55766: IFFALSE 55809
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55768: LD_VAR 0 4
55772: PPUSH
55773: LD_VAR 0 2
55777: PUSH
55778: LD_VAR 0 9
55782: ARRAY
55783: PUSH
55784: LD_INT 1
55786: ARRAY
55787: PPUSH
55788: LD_VAR 0 2
55792: PUSH
55793: LD_VAR 0 9
55797: ARRAY
55798: PUSH
55799: LD_INT 2
55801: ARRAY
55802: PPUSH
55803: CALL_OW 114
55807: GO 55823
// SetTag ( i , tag ) ;
55809: LD_VAR 0 4
55813: PPUSH
55814: LD_VAR 0 9
55818: PPUSH
55819: CALL_OW 109
// end else
55823: GO 55896
// if enemy then
55825: LD_VAR 0 5
55829: IFFALSE 55896
// begin if GetWeapon ( i ) = ru_time_lapser then
55831: LD_VAR 0 4
55835: PPUSH
55836: CALL_OW 264
55840: PUSH
55841: LD_INT 49
55843: EQUAL
55844: IFFALSE 55872
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55846: LD_VAR 0 4
55850: PPUSH
55851: LD_VAR 0 5
55855: PPUSH
55856: LD_VAR 0 4
55860: PPUSH
55861: CALL_OW 74
55865: PPUSH
55866: CALL_OW 112
55870: GO 55896
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55872: LD_VAR 0 4
55876: PPUSH
55877: LD_VAR 0 5
55881: PPUSH
55882: LD_VAR 0 4
55886: PPUSH
55887: CALL_OW 74
55891: PPUSH
55892: CALL_OW 115
// end ; end ;
55896: GO 55476
55898: POP
55899: POP
// end ;
55900: LD_VAR 0 3
55904: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55905: LD_INT 0
55907: PPUSH
55908: PPUSH
55909: PPUSH
// if not unit or IsInUnit ( unit ) then
55910: LD_VAR 0 1
55914: NOT
55915: PUSH
55916: LD_VAR 0 1
55920: PPUSH
55921: CALL_OW 310
55925: OR
55926: IFFALSE 55930
// exit ;
55928: GO 56021
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55930: LD_ADDR_VAR 0 4
55934: PUSH
55935: LD_VAR 0 1
55939: PPUSH
55940: CALL_OW 250
55944: PPUSH
55945: LD_VAR 0 2
55949: PPUSH
55950: LD_INT 1
55952: PPUSH
55953: CALL_OW 272
55957: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55958: LD_ADDR_VAR 0 5
55962: PUSH
55963: LD_VAR 0 1
55967: PPUSH
55968: CALL_OW 251
55972: PPUSH
55973: LD_VAR 0 2
55977: PPUSH
55978: LD_INT 1
55980: PPUSH
55981: CALL_OW 273
55985: ST_TO_ADDR
// if ValidHex ( x , y ) then
55986: LD_VAR 0 4
55990: PPUSH
55991: LD_VAR 0 5
55995: PPUSH
55996: CALL_OW 488
56000: IFFALSE 56021
// ComTurnXY ( unit , x , y ) ;
56002: LD_VAR 0 1
56006: PPUSH
56007: LD_VAR 0 4
56011: PPUSH
56012: LD_VAR 0 5
56016: PPUSH
56017: CALL_OW 118
// end ;
56021: LD_VAR 0 3
56025: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56026: LD_INT 0
56028: PPUSH
56029: PPUSH
// result := false ;
56030: LD_ADDR_VAR 0 3
56034: PUSH
56035: LD_INT 0
56037: ST_TO_ADDR
// if not units then
56038: LD_VAR 0 2
56042: NOT
56043: IFFALSE 56047
// exit ;
56045: GO 56092
// for i in units do
56047: LD_ADDR_VAR 0 4
56051: PUSH
56052: LD_VAR 0 2
56056: PUSH
56057: FOR_IN
56058: IFFALSE 56090
// if See ( side , i ) then
56060: LD_VAR 0 1
56064: PPUSH
56065: LD_VAR 0 4
56069: PPUSH
56070: CALL_OW 292
56074: IFFALSE 56088
// begin result := true ;
56076: LD_ADDR_VAR 0 3
56080: PUSH
56081: LD_INT 1
56083: ST_TO_ADDR
// exit ;
56084: POP
56085: POP
56086: GO 56092
// end ;
56088: GO 56057
56090: POP
56091: POP
// end ;
56092: LD_VAR 0 3
56096: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56097: LD_INT 0
56099: PPUSH
56100: PPUSH
56101: PPUSH
56102: PPUSH
// if not unit or not points then
56103: LD_VAR 0 1
56107: NOT
56108: PUSH
56109: LD_VAR 0 2
56113: NOT
56114: OR
56115: IFFALSE 56119
// exit ;
56117: GO 56209
// dist := 99999 ;
56119: LD_ADDR_VAR 0 5
56123: PUSH
56124: LD_INT 99999
56126: ST_TO_ADDR
// for i in points do
56127: LD_ADDR_VAR 0 4
56131: PUSH
56132: LD_VAR 0 2
56136: PUSH
56137: FOR_IN
56138: IFFALSE 56207
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56140: LD_ADDR_VAR 0 6
56144: PUSH
56145: LD_VAR 0 1
56149: PPUSH
56150: LD_VAR 0 4
56154: PUSH
56155: LD_INT 1
56157: ARRAY
56158: PPUSH
56159: LD_VAR 0 4
56163: PUSH
56164: LD_INT 2
56166: ARRAY
56167: PPUSH
56168: CALL_OW 297
56172: ST_TO_ADDR
// if tmpDist < dist then
56173: LD_VAR 0 6
56177: PUSH
56178: LD_VAR 0 5
56182: LESS
56183: IFFALSE 56205
// begin result := i ;
56185: LD_ADDR_VAR 0 3
56189: PUSH
56190: LD_VAR 0 4
56194: ST_TO_ADDR
// dist := tmpDist ;
56195: LD_ADDR_VAR 0 5
56199: PUSH
56200: LD_VAR 0 6
56204: ST_TO_ADDR
// end ; end ;
56205: GO 56137
56207: POP
56208: POP
// end ;
56209: LD_VAR 0 3
56213: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56214: LD_INT 0
56216: PPUSH
// uc_side := side ;
56217: LD_ADDR_OWVAR 20
56221: PUSH
56222: LD_VAR 0 1
56226: ST_TO_ADDR
// uc_nation := 3 ;
56227: LD_ADDR_OWVAR 21
56231: PUSH
56232: LD_INT 3
56234: ST_TO_ADDR
// vc_chassis := 25 ;
56235: LD_ADDR_OWVAR 37
56239: PUSH
56240: LD_INT 25
56242: ST_TO_ADDR
// vc_engine := engine_siberite ;
56243: LD_ADDR_OWVAR 39
56247: PUSH
56248: LD_INT 3
56250: ST_TO_ADDR
// vc_control := control_computer ;
56251: LD_ADDR_OWVAR 38
56255: PUSH
56256: LD_INT 3
56258: ST_TO_ADDR
// vc_weapon := 59 ;
56259: LD_ADDR_OWVAR 40
56263: PUSH
56264: LD_INT 59
56266: ST_TO_ADDR
// result := CreateVehicle ;
56267: LD_ADDR_VAR 0 5
56271: PUSH
56272: CALL_OW 45
56276: ST_TO_ADDR
// SetDir ( result , d ) ;
56277: LD_VAR 0 5
56281: PPUSH
56282: LD_VAR 0 4
56286: PPUSH
56287: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56291: LD_VAR 0 5
56295: PPUSH
56296: LD_VAR 0 2
56300: PPUSH
56301: LD_VAR 0 3
56305: PPUSH
56306: LD_INT 0
56308: PPUSH
56309: CALL_OW 48
// end ;
56313: LD_VAR 0 5
56317: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56318: LD_INT 0
56320: PPUSH
56321: PPUSH
56322: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56323: LD_ADDR_VAR 0 2
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56346: LD_VAR 0 1
56350: NOT
56351: PUSH
56352: LD_VAR 0 1
56356: PPUSH
56357: CALL_OW 264
56361: PUSH
56362: LD_INT 12
56364: PUSH
56365: LD_INT 51
56367: PUSH
56368: LD_INT 32
56370: PUSH
56371: LD_INT 89
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: IN
56380: NOT
56381: OR
56382: IFFALSE 56386
// exit ;
56384: GO 56484
// for i := 1 to 3 do
56386: LD_ADDR_VAR 0 3
56390: PUSH
56391: DOUBLE
56392: LD_INT 1
56394: DEC
56395: ST_TO_ADDR
56396: LD_INT 3
56398: PUSH
56399: FOR_TO
56400: IFFALSE 56482
// begin tmp := GetCargo ( cargo , i ) ;
56402: LD_ADDR_VAR 0 4
56406: PUSH
56407: LD_VAR 0 1
56411: PPUSH
56412: LD_VAR 0 3
56416: PPUSH
56417: CALL_OW 289
56421: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56422: LD_ADDR_VAR 0 2
56426: PUSH
56427: LD_VAR 0 2
56431: PPUSH
56432: LD_VAR 0 3
56436: PPUSH
56437: LD_VAR 0 4
56441: PPUSH
56442: CALL_OW 1
56446: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56447: LD_ADDR_VAR 0 2
56451: PUSH
56452: LD_VAR 0 2
56456: PPUSH
56457: LD_INT 4
56459: PPUSH
56460: LD_VAR 0 2
56464: PUSH
56465: LD_INT 4
56467: ARRAY
56468: PUSH
56469: LD_VAR 0 4
56473: PLUS
56474: PPUSH
56475: CALL_OW 1
56479: ST_TO_ADDR
// end ;
56480: GO 56399
56482: POP
56483: POP
// end ;
56484: LD_VAR 0 2
56488: RET
// export function Length ( array ) ; begin
56489: LD_INT 0
56491: PPUSH
// result := array + 0 ;
56492: LD_ADDR_VAR 0 2
56496: PUSH
56497: LD_VAR 0 1
56501: PUSH
56502: LD_INT 0
56504: PLUS
56505: ST_TO_ADDR
// end ;
56506: LD_VAR 0 2
56510: RET
// export function PrepareArray ( array ) ; begin
56511: LD_INT 0
56513: PPUSH
// result := array diff 0 ;
56514: LD_ADDR_VAR 0 2
56518: PUSH
56519: LD_VAR 0 1
56523: PUSH
56524: LD_INT 0
56526: DIFF
56527: ST_TO_ADDR
// if not result [ 1 ] then
56528: LD_VAR 0 2
56532: PUSH
56533: LD_INT 1
56535: ARRAY
56536: NOT
56537: IFFALSE 56557
// result := Delete ( result , 1 ) ;
56539: LD_ADDR_VAR 0 2
56543: PUSH
56544: LD_VAR 0 2
56548: PPUSH
56549: LD_INT 1
56551: PPUSH
56552: CALL_OW 3
56556: ST_TO_ADDR
// end ;
56557: LD_VAR 0 2
56561: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56562: LD_INT 0
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
// sibRocketRange := 25 ;
56568: LD_ADDR_VAR 0 6
56572: PUSH
56573: LD_INT 25
56575: ST_TO_ADDR
// result := false ;
56576: LD_ADDR_VAR 0 4
56580: PUSH
56581: LD_INT 0
56583: ST_TO_ADDR
// for i := 0 to 5 do
56584: LD_ADDR_VAR 0 5
56588: PUSH
56589: DOUBLE
56590: LD_INT 0
56592: DEC
56593: ST_TO_ADDR
56594: LD_INT 5
56596: PUSH
56597: FOR_TO
56598: IFFALSE 56665
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56600: LD_VAR 0 1
56604: PPUSH
56605: LD_VAR 0 5
56609: PPUSH
56610: LD_VAR 0 6
56614: PPUSH
56615: CALL_OW 272
56619: PPUSH
56620: LD_VAR 0 2
56624: PPUSH
56625: LD_VAR 0 5
56629: PPUSH
56630: LD_VAR 0 6
56634: PPUSH
56635: CALL_OW 273
56639: PPUSH
56640: LD_VAR 0 3
56644: PPUSH
56645: CALL_OW 309
56649: IFFALSE 56663
// begin result := true ;
56651: LD_ADDR_VAR 0 4
56655: PUSH
56656: LD_INT 1
56658: ST_TO_ADDR
// exit ;
56659: POP
56660: POP
56661: GO 56667
// end ;
56663: GO 56597
56665: POP
56666: POP
// end ;
56667: LD_VAR 0 4
56671: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56672: LD_INT 0
56674: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56675: LD_VAR 0 1
56679: PPUSH
56680: LD_VAR 0 2
56684: PPUSH
56685: LD_INT 0
56687: PPUSH
56688: LD_INT 0
56690: PPUSH
56691: LD_INT 1
56693: PPUSH
56694: LD_INT 0
56696: PPUSH
56697: CALL_OW 587
// end ; end_of_file
56701: LD_VAR 0 3
56705: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56706: LD_VAR 0 1
56710: PUSH
56711: LD_INT 200
56713: DOUBLE
56714: GREATEREQUAL
56715: IFFALSE 56723
56717: LD_INT 299
56719: DOUBLE
56720: LESSEQUAL
56721: IFTRUE 56725
56723: GO 56757
56725: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56726: LD_VAR 0 1
56730: PPUSH
56731: LD_VAR 0 2
56735: PPUSH
56736: LD_VAR 0 3
56740: PPUSH
56741: LD_VAR 0 4
56745: PPUSH
56746: LD_VAR 0 5
56750: PPUSH
56751: CALL 57245 0 5
56755: GO 56834
56757: LD_INT 300
56759: DOUBLE
56760: GREATEREQUAL
56761: IFFALSE 56769
56763: LD_INT 399
56765: DOUBLE
56766: LESSEQUAL
56767: IFTRUE 56771
56769: GO 56833
56771: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56772: LD_VAR 0 1
56776: PPUSH
56777: LD_VAR 0 2
56781: PPUSH
56782: LD_VAR 0 3
56786: PPUSH
56787: LD_VAR 0 4
56791: PPUSH
56792: LD_VAR 0 5
56796: PPUSH
56797: LD_VAR 0 6
56801: PPUSH
56802: LD_VAR 0 7
56806: PPUSH
56807: LD_VAR 0 8
56811: PPUSH
56812: LD_VAR 0 9
56816: PPUSH
56817: LD_VAR 0 10
56821: PPUSH
56822: LD_VAR 0 11
56826: PPUSH
56827: CALL 73516 0 11
56831: GO 56834
56833: POP
// end ;
56834: PPOPN 11
56836: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56837: LD_VAR 0 1
56841: PPUSH
56842: LD_VAR 0 2
56846: PPUSH
56847: LD_VAR 0 3
56851: PPUSH
56852: LD_VAR 0 4
56856: PPUSH
56857: LD_VAR 0 5
56861: PPUSH
56862: CALL 56981 0 5
// end ; end_of_file
56866: PPOPN 5
56868: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56869: LD_INT 0
56871: PPUSH
56872: PPUSH
56873: PPUSH
56874: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56875: LD_VAR 0 1
56879: PPUSH
56880: CALL_OW 264
56884: PUSH
56885: LD_INT 91
56887: EQUAL
56888: IFFALSE 56960
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56890: LD_INT 68
56892: PPUSH
56893: LD_VAR 0 1
56897: PPUSH
56898: CALL_OW 255
56902: PPUSH
56903: CALL_OW 321
56907: PUSH
56908: LD_INT 2
56910: EQUAL
56911: IFFALSE 56923
// eff := 70 else
56913: LD_ADDR_VAR 0 4
56917: PUSH
56918: LD_INT 70
56920: ST_TO_ADDR
56921: GO 56931
// eff := 30 ;
56923: LD_ADDR_VAR 0 4
56927: PUSH
56928: LD_INT 30
56930: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56931: LD_VAR 0 1
56935: PPUSH
56936: CALL_OW 250
56940: PPUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 251
56950: PPUSH
56951: LD_VAR 0 4
56955: PPUSH
56956: CALL_OW 495
// end ; end ;
56960: LD_VAR 0 2
56964: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56965: LD_INT 0
56967: PPUSH
// end ;
56968: LD_VAR 0 4
56972: RET
// export function SOS_Command ( cmd ) ; begin
56973: LD_INT 0
56975: PPUSH
// end ;
56976: LD_VAR 0 2
56980: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56981: LD_INT 0
56983: PPUSH
// end ;
56984: LD_VAR 0 6
56988: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
56989: LD_INT 0
56991: PPUSH
56992: PPUSH
// if not vehicle or not factory then
56993: LD_VAR 0 1
56997: NOT
56998: PUSH
56999: LD_VAR 0 2
57003: NOT
57004: OR
57005: IFFALSE 57009
// exit ;
57007: GO 57240
// if factoryWaypoints >= factory then
57009: LD_EXP 101
57013: PUSH
57014: LD_VAR 0 2
57018: GREATEREQUAL
57019: IFFALSE 57240
// if factoryWaypoints [ factory ] then
57021: LD_EXP 101
57025: PUSH
57026: LD_VAR 0 2
57030: ARRAY
57031: IFFALSE 57240
// begin if GetControl ( vehicle ) = control_manual then
57033: LD_VAR 0 1
57037: PPUSH
57038: CALL_OW 263
57042: PUSH
57043: LD_INT 1
57045: EQUAL
57046: IFFALSE 57127
// begin driver := IsDrivenBy ( vehicle ) ;
57048: LD_ADDR_VAR 0 4
57052: PUSH
57053: LD_VAR 0 1
57057: PPUSH
57058: CALL_OW 311
57062: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57063: LD_VAR 0 4
57067: PPUSH
57068: LD_EXP 101
57072: PUSH
57073: LD_VAR 0 2
57077: ARRAY
57078: PUSH
57079: LD_INT 3
57081: ARRAY
57082: PPUSH
57083: LD_EXP 101
57087: PUSH
57088: LD_VAR 0 2
57092: ARRAY
57093: PUSH
57094: LD_INT 4
57096: ARRAY
57097: PPUSH
57098: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57102: LD_VAR 0 4
57106: PPUSH
57107: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57111: LD_VAR 0 4
57115: PPUSH
57116: LD_VAR 0 2
57120: PPUSH
57121: CALL_OW 180
// end else
57125: GO 57240
// if GetControl ( vehicle ) = control_remote then
57127: LD_VAR 0 1
57131: PPUSH
57132: CALL_OW 263
57136: PUSH
57137: LD_INT 2
57139: EQUAL
57140: IFFALSE 57201
// begin wait ( 0 0$2 ) ;
57142: LD_INT 70
57144: PPUSH
57145: CALL_OW 67
// if Connect ( vehicle ) then
57149: LD_VAR 0 1
57153: PPUSH
57154: CALL 23419 0 1
57158: IFFALSE 57199
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57160: LD_VAR 0 1
57164: PPUSH
57165: LD_EXP 101
57169: PUSH
57170: LD_VAR 0 2
57174: ARRAY
57175: PUSH
57176: LD_INT 3
57178: ARRAY
57179: PPUSH
57180: LD_EXP 101
57184: PUSH
57185: LD_VAR 0 2
57189: ARRAY
57190: PUSH
57191: LD_INT 4
57193: ARRAY
57194: PPUSH
57195: CALL_OW 171
// end else
57199: GO 57240
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57201: LD_VAR 0 1
57205: PPUSH
57206: LD_EXP 101
57210: PUSH
57211: LD_VAR 0 2
57215: ARRAY
57216: PUSH
57217: LD_INT 3
57219: ARRAY
57220: PPUSH
57221: LD_EXP 101
57225: PUSH
57226: LD_VAR 0 2
57230: ARRAY
57231: PUSH
57232: LD_INT 4
57234: ARRAY
57235: PPUSH
57236: CALL_OW 171
// end ; end ;
57240: LD_VAR 0 3
57244: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57245: LD_INT 0
57247: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57248: LD_VAR 0 1
57252: PUSH
57253: LD_INT 250
57255: EQUAL
57256: PUSH
57257: LD_VAR 0 2
57261: PPUSH
57262: CALL_OW 264
57266: PUSH
57267: LD_INT 81
57269: EQUAL
57270: AND
57271: IFFALSE 57292
// MinerPlaceMine ( unit , x , y ) ;
57273: LD_VAR 0 2
57277: PPUSH
57278: LD_VAR 0 4
57282: PPUSH
57283: LD_VAR 0 5
57287: PPUSH
57288: CALL 59677 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57292: LD_VAR 0 1
57296: PUSH
57297: LD_INT 251
57299: EQUAL
57300: PUSH
57301: LD_VAR 0 2
57305: PPUSH
57306: CALL_OW 264
57310: PUSH
57311: LD_INT 81
57313: EQUAL
57314: AND
57315: IFFALSE 57336
// MinerDetonateMine ( unit , x , y ) ;
57317: LD_VAR 0 2
57321: PPUSH
57322: LD_VAR 0 4
57326: PPUSH
57327: LD_VAR 0 5
57331: PPUSH
57332: CALL 59952 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57336: LD_VAR 0 1
57340: PUSH
57341: LD_INT 252
57343: EQUAL
57344: PUSH
57345: LD_VAR 0 2
57349: PPUSH
57350: CALL_OW 264
57354: PUSH
57355: LD_INT 81
57357: EQUAL
57358: AND
57359: IFFALSE 57380
// MinerCreateMinefield ( unit , x , y ) ;
57361: LD_VAR 0 2
57365: PPUSH
57366: LD_VAR 0 4
57370: PPUSH
57371: LD_VAR 0 5
57375: PPUSH
57376: CALL 60369 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57380: LD_VAR 0 1
57384: PUSH
57385: LD_INT 253
57387: EQUAL
57388: PUSH
57389: LD_VAR 0 2
57393: PPUSH
57394: CALL_OW 257
57398: PUSH
57399: LD_INT 5
57401: EQUAL
57402: AND
57403: IFFALSE 57424
// ComBinocular ( unit , x , y ) ;
57405: LD_VAR 0 2
57409: PPUSH
57410: LD_VAR 0 4
57414: PPUSH
57415: LD_VAR 0 5
57419: PPUSH
57420: CALL 60738 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57424: LD_VAR 0 1
57428: PUSH
57429: LD_INT 254
57431: EQUAL
57432: PUSH
57433: LD_VAR 0 2
57437: PPUSH
57438: CALL_OW 264
57442: PUSH
57443: LD_INT 99
57445: EQUAL
57446: AND
57447: PUSH
57448: LD_VAR 0 3
57452: PPUSH
57453: CALL_OW 263
57457: PUSH
57458: LD_INT 3
57460: EQUAL
57461: AND
57462: IFFALSE 57478
// HackDestroyVehicle ( unit , selectedUnit ) ;
57464: LD_VAR 0 2
57468: PPUSH
57469: LD_VAR 0 3
57473: PPUSH
57474: CALL 59041 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57478: LD_VAR 0 1
57482: PUSH
57483: LD_INT 255
57485: EQUAL
57486: PUSH
57487: LD_VAR 0 2
57491: PPUSH
57492: CALL_OW 264
57496: PUSH
57497: LD_INT 14
57499: PUSH
57500: LD_INT 53
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: IN
57507: AND
57508: PUSH
57509: LD_VAR 0 4
57513: PPUSH
57514: LD_VAR 0 5
57518: PPUSH
57519: CALL_OW 488
57523: AND
57524: IFFALSE 57548
// CutTreeXYR ( unit , x , y , 12 ) ;
57526: LD_VAR 0 2
57530: PPUSH
57531: LD_VAR 0 4
57535: PPUSH
57536: LD_VAR 0 5
57540: PPUSH
57541: LD_INT 12
57543: PPUSH
57544: CALL 57611 0 4
// if cmd = 256 then
57548: LD_VAR 0 1
57552: PUSH
57553: LD_INT 256
57555: EQUAL
57556: IFFALSE 57577
// SetFactoryWaypoint ( unit , x , y ) ;
57558: LD_VAR 0 2
57562: PPUSH
57563: LD_VAR 0 4
57567: PPUSH
57568: LD_VAR 0 5
57572: PPUSH
57573: CALL 75496 0 3
// if cmd = 257 then
57577: LD_VAR 0 1
57581: PUSH
57582: LD_INT 257
57584: EQUAL
57585: IFFALSE 57606
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57587: LD_VAR 0 2
57591: PPUSH
57592: LD_VAR 0 4
57596: PPUSH
57597: LD_VAR 0 5
57601: PPUSH
57602: CALL 75858 0 3
// end ;
57606: LD_VAR 0 6
57610: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57611: LD_INT 0
57613: PPUSH
57614: PPUSH
57615: PPUSH
57616: PPUSH
57617: PPUSH
57618: PPUSH
57619: PPUSH
57620: PPUSH
57621: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57622: LD_VAR 0 1
57626: NOT
57627: PUSH
57628: LD_VAR 0 2
57632: PPUSH
57633: LD_VAR 0 3
57637: PPUSH
57638: CALL_OW 488
57642: NOT
57643: OR
57644: PUSH
57645: LD_VAR 0 4
57649: NOT
57650: OR
57651: IFFALSE 57655
// exit ;
57653: GO 57995
// list := [ ] ;
57655: LD_ADDR_VAR 0 13
57659: PUSH
57660: EMPTY
57661: ST_TO_ADDR
// if x - r < 0 then
57662: LD_VAR 0 2
57666: PUSH
57667: LD_VAR 0 4
57671: MINUS
57672: PUSH
57673: LD_INT 0
57675: LESS
57676: IFFALSE 57688
// min_x := 0 else
57678: LD_ADDR_VAR 0 7
57682: PUSH
57683: LD_INT 0
57685: ST_TO_ADDR
57686: GO 57704
// min_x := x - r ;
57688: LD_ADDR_VAR 0 7
57692: PUSH
57693: LD_VAR 0 2
57697: PUSH
57698: LD_VAR 0 4
57702: MINUS
57703: ST_TO_ADDR
// if y - r < 0 then
57704: LD_VAR 0 3
57708: PUSH
57709: LD_VAR 0 4
57713: MINUS
57714: PUSH
57715: LD_INT 0
57717: LESS
57718: IFFALSE 57730
// min_y := 0 else
57720: LD_ADDR_VAR 0 8
57724: PUSH
57725: LD_INT 0
57727: ST_TO_ADDR
57728: GO 57746
// min_y := y - r ;
57730: LD_ADDR_VAR 0 8
57734: PUSH
57735: LD_VAR 0 3
57739: PUSH
57740: LD_VAR 0 4
57744: MINUS
57745: ST_TO_ADDR
// max_x := x + r ;
57746: LD_ADDR_VAR 0 9
57750: PUSH
57751: LD_VAR 0 2
57755: PUSH
57756: LD_VAR 0 4
57760: PLUS
57761: ST_TO_ADDR
// max_y := y + r ;
57762: LD_ADDR_VAR 0 10
57766: PUSH
57767: LD_VAR 0 3
57771: PUSH
57772: LD_VAR 0 4
57776: PLUS
57777: ST_TO_ADDR
// for _x = min_x to max_x do
57778: LD_ADDR_VAR 0 11
57782: PUSH
57783: DOUBLE
57784: LD_VAR 0 7
57788: DEC
57789: ST_TO_ADDR
57790: LD_VAR 0 9
57794: PUSH
57795: FOR_TO
57796: IFFALSE 57913
// for _y = min_y to max_y do
57798: LD_ADDR_VAR 0 12
57802: PUSH
57803: DOUBLE
57804: LD_VAR 0 8
57808: DEC
57809: ST_TO_ADDR
57810: LD_VAR 0 10
57814: PUSH
57815: FOR_TO
57816: IFFALSE 57909
// begin if not ValidHex ( _x , _y ) then
57818: LD_VAR 0 11
57822: PPUSH
57823: LD_VAR 0 12
57827: PPUSH
57828: CALL_OW 488
57832: NOT
57833: IFFALSE 57837
// continue ;
57835: GO 57815
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57837: LD_VAR 0 11
57841: PPUSH
57842: LD_VAR 0 12
57846: PPUSH
57847: CALL_OW 351
57851: PUSH
57852: LD_VAR 0 11
57856: PPUSH
57857: LD_VAR 0 12
57861: PPUSH
57862: CALL_OW 554
57866: AND
57867: IFFALSE 57907
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57869: LD_ADDR_VAR 0 13
57873: PUSH
57874: LD_VAR 0 13
57878: PPUSH
57879: LD_VAR 0 13
57883: PUSH
57884: LD_INT 1
57886: PLUS
57887: PPUSH
57888: LD_VAR 0 11
57892: PUSH
57893: LD_VAR 0 12
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PPUSH
57902: CALL_OW 2
57906: ST_TO_ADDR
// end ;
57907: GO 57815
57909: POP
57910: POP
57911: GO 57795
57913: POP
57914: POP
// if not list then
57915: LD_VAR 0 13
57919: NOT
57920: IFFALSE 57924
// exit ;
57922: GO 57995
// for i in list do
57924: LD_ADDR_VAR 0 6
57928: PUSH
57929: LD_VAR 0 13
57933: PUSH
57934: FOR_IN
57935: IFFALSE 57993
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57937: LD_VAR 0 1
57941: PPUSH
57942: LD_STRING M
57944: PUSH
57945: LD_VAR 0 6
57949: PUSH
57950: LD_INT 1
57952: ARRAY
57953: PUSH
57954: LD_VAR 0 6
57958: PUSH
57959: LD_INT 2
57961: ARRAY
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: PPUSH
57987: CALL_OW 447
57991: GO 57934
57993: POP
57994: POP
// end ;
57995: LD_VAR 0 5
57999: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58000: LD_EXP 33
58004: NOT
58005: IFFALSE 58055
58007: GO 58009
58009: DISABLE
// begin initHack := true ;
58010: LD_ADDR_EXP 33
58014: PUSH
58015: LD_INT 1
58017: ST_TO_ADDR
// hackTanks := [ ] ;
58018: LD_ADDR_EXP 34
58022: PUSH
58023: EMPTY
58024: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58025: LD_ADDR_EXP 35
58029: PUSH
58030: EMPTY
58031: ST_TO_ADDR
// hackLimit := 3 ;
58032: LD_ADDR_EXP 36
58036: PUSH
58037: LD_INT 3
58039: ST_TO_ADDR
// hackDist := 12 ;
58040: LD_ADDR_EXP 37
58044: PUSH
58045: LD_INT 12
58047: ST_TO_ADDR
// hackCounter := [ ] ;
58048: LD_ADDR_EXP 38
58052: PUSH
58053: EMPTY
58054: ST_TO_ADDR
// end ;
58055: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58056: LD_EXP 33
58060: PUSH
58061: LD_INT 34
58063: PUSH
58064: LD_INT 99
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PPUSH
58071: CALL_OW 69
58075: AND
58076: IFFALSE 58329
58078: GO 58080
58080: DISABLE
58081: LD_INT 0
58083: PPUSH
58084: PPUSH
// begin enable ;
58085: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58086: LD_ADDR_VAR 0 1
58090: PUSH
58091: LD_INT 34
58093: PUSH
58094: LD_INT 99
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PPUSH
58101: CALL_OW 69
58105: PUSH
58106: FOR_IN
58107: IFFALSE 58327
// begin if not i in hackTanks then
58109: LD_VAR 0 1
58113: PUSH
58114: LD_EXP 34
58118: IN
58119: NOT
58120: IFFALSE 58203
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58122: LD_ADDR_EXP 34
58126: PUSH
58127: LD_EXP 34
58131: PPUSH
58132: LD_EXP 34
58136: PUSH
58137: LD_INT 1
58139: PLUS
58140: PPUSH
58141: LD_VAR 0 1
58145: PPUSH
58146: CALL_OW 1
58150: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58151: LD_ADDR_EXP 35
58155: PUSH
58156: LD_EXP 35
58160: PPUSH
58161: LD_EXP 35
58165: PUSH
58166: LD_INT 1
58168: PLUS
58169: PPUSH
58170: EMPTY
58171: PPUSH
58172: CALL_OW 1
58176: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58177: LD_ADDR_EXP 38
58181: PUSH
58182: LD_EXP 38
58186: PPUSH
58187: LD_EXP 38
58191: PUSH
58192: LD_INT 1
58194: PLUS
58195: PPUSH
58196: EMPTY
58197: PPUSH
58198: CALL_OW 1
58202: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 302
58212: NOT
58213: IFFALSE 58226
// begin HackUnlinkAll ( i ) ;
58215: LD_VAR 0 1
58219: PPUSH
58220: CALL 58332 0 1
// continue ;
58224: GO 58106
// end ; HackCheckCapturedStatus ( i ) ;
58226: LD_VAR 0 1
58230: PPUSH
58231: CALL 58775 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58235: LD_ADDR_VAR 0 2
58239: PUSH
58240: LD_INT 81
58242: PUSH
58243: LD_VAR 0 1
58247: PPUSH
58248: CALL_OW 255
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 33
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 91
58269: PUSH
58270: LD_VAR 0 1
58274: PUSH
58275: LD_EXP 37
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 50
58287: PUSH
58288: EMPTY
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: PPUSH
58297: CALL_OW 69
58301: ST_TO_ADDR
// if not tmp then
58302: LD_VAR 0 2
58306: NOT
58307: IFFALSE 58311
// continue ;
58309: GO 58106
// HackLink ( i , tmp ) ;
58311: LD_VAR 0 1
58315: PPUSH
58316: LD_VAR 0 2
58320: PPUSH
58321: CALL 58468 0 2
// end ;
58325: GO 58106
58327: POP
58328: POP
// end ;
58329: PPOPN 2
58331: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58332: LD_INT 0
58334: PPUSH
58335: PPUSH
58336: PPUSH
// if not hack in hackTanks then
58337: LD_VAR 0 1
58341: PUSH
58342: LD_EXP 34
58346: IN
58347: NOT
58348: IFFALSE 58352
// exit ;
58350: GO 58463
// index := GetElementIndex ( hackTanks , hack ) ;
58352: LD_ADDR_VAR 0 4
58356: PUSH
58357: LD_EXP 34
58361: PPUSH
58362: LD_VAR 0 1
58366: PPUSH
58367: CALL 20235 0 2
58371: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58372: LD_EXP 35
58376: PUSH
58377: LD_VAR 0 4
58381: ARRAY
58382: IFFALSE 58463
// begin for i in hackTanksCaptured [ index ] do
58384: LD_ADDR_VAR 0 3
58388: PUSH
58389: LD_EXP 35
58393: PUSH
58394: LD_VAR 0 4
58398: ARRAY
58399: PUSH
58400: FOR_IN
58401: IFFALSE 58427
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58403: LD_VAR 0 3
58407: PUSH
58408: LD_INT 1
58410: ARRAY
58411: PPUSH
58412: LD_VAR 0 3
58416: PUSH
58417: LD_INT 2
58419: ARRAY
58420: PPUSH
58421: CALL_OW 235
58425: GO 58400
58427: POP
58428: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58429: LD_ADDR_EXP 35
58433: PUSH
58434: LD_EXP 35
58438: PPUSH
58439: LD_VAR 0 4
58443: PPUSH
58444: EMPTY
58445: PPUSH
58446: CALL_OW 1
58450: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58451: LD_VAR 0 1
58455: PPUSH
58456: LD_INT 0
58458: PPUSH
58459: CALL_OW 505
// end ; end ;
58463: LD_VAR 0 2
58467: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58468: LD_INT 0
58470: PPUSH
58471: PPUSH
58472: PPUSH
// if not hack in hackTanks or not vehicles then
58473: LD_VAR 0 1
58477: PUSH
58478: LD_EXP 34
58482: IN
58483: NOT
58484: PUSH
58485: LD_VAR 0 2
58489: NOT
58490: OR
58491: IFFALSE 58495
// exit ;
58493: GO 58770
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58495: LD_ADDR_VAR 0 2
58499: PUSH
58500: LD_VAR 0 1
58504: PPUSH
58505: LD_VAR 0 2
58509: PPUSH
58510: LD_INT 1
58512: PPUSH
58513: LD_INT 1
58515: PPUSH
58516: CALL 20885 0 4
58520: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58521: LD_ADDR_VAR 0 5
58525: PUSH
58526: LD_EXP 34
58530: PPUSH
58531: LD_VAR 0 1
58535: PPUSH
58536: CALL 20235 0 2
58540: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58541: LD_EXP 35
58545: PUSH
58546: LD_VAR 0 5
58550: ARRAY
58551: PUSH
58552: LD_EXP 36
58556: LESS
58557: IFFALSE 58746
// begin for i := 1 to vehicles do
58559: LD_ADDR_VAR 0 4
58563: PUSH
58564: DOUBLE
58565: LD_INT 1
58567: DEC
58568: ST_TO_ADDR
58569: LD_VAR 0 2
58573: PUSH
58574: FOR_TO
58575: IFFALSE 58744
// begin if hackTanksCaptured [ index ] = hackLimit then
58577: LD_EXP 35
58581: PUSH
58582: LD_VAR 0 5
58586: ARRAY
58587: PUSH
58588: LD_EXP 36
58592: EQUAL
58593: IFFALSE 58597
// break ;
58595: GO 58744
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58597: LD_ADDR_EXP 38
58601: PUSH
58602: LD_EXP 38
58606: PPUSH
58607: LD_VAR 0 5
58611: PPUSH
58612: LD_EXP 38
58616: PUSH
58617: LD_VAR 0 5
58621: ARRAY
58622: PUSH
58623: LD_INT 1
58625: PLUS
58626: PPUSH
58627: CALL_OW 1
58631: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58632: LD_ADDR_EXP 35
58636: PUSH
58637: LD_EXP 35
58641: PPUSH
58642: LD_VAR 0 5
58646: PUSH
58647: LD_EXP 35
58651: PUSH
58652: LD_VAR 0 5
58656: ARRAY
58657: PUSH
58658: LD_INT 1
58660: PLUS
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PPUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_VAR 0 4
58675: ARRAY
58676: PUSH
58677: LD_VAR 0 2
58681: PUSH
58682: LD_VAR 0 4
58686: ARRAY
58687: PPUSH
58688: CALL_OW 255
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PPUSH
58697: CALL 20450 0 3
58701: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58702: LD_VAR 0 2
58706: PUSH
58707: LD_VAR 0 4
58711: ARRAY
58712: PPUSH
58713: LD_VAR 0 1
58717: PPUSH
58718: CALL_OW 255
58722: PPUSH
58723: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58727: LD_VAR 0 2
58731: PUSH
58732: LD_VAR 0 4
58736: ARRAY
58737: PPUSH
58738: CALL_OW 141
// end ;
58742: GO 58574
58744: POP
58745: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58746: LD_VAR 0 1
58750: PPUSH
58751: LD_EXP 35
58755: PUSH
58756: LD_VAR 0 5
58760: ARRAY
58761: PUSH
58762: LD_INT 0
58764: PLUS
58765: PPUSH
58766: CALL_OW 505
// end ;
58770: LD_VAR 0 3
58774: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58775: LD_INT 0
58777: PPUSH
58778: PPUSH
58779: PPUSH
58780: PPUSH
// if not hack in hackTanks then
58781: LD_VAR 0 1
58785: PUSH
58786: LD_EXP 34
58790: IN
58791: NOT
58792: IFFALSE 58796
// exit ;
58794: GO 59036
// index := GetElementIndex ( hackTanks , hack ) ;
58796: LD_ADDR_VAR 0 4
58800: PUSH
58801: LD_EXP 34
58805: PPUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: CALL 20235 0 2
58815: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58816: LD_ADDR_VAR 0 3
58820: PUSH
58821: DOUBLE
58822: LD_EXP 35
58826: PUSH
58827: LD_VAR 0 4
58831: ARRAY
58832: INC
58833: ST_TO_ADDR
58834: LD_INT 1
58836: PUSH
58837: FOR_DOWNTO
58838: IFFALSE 59010
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58840: LD_ADDR_VAR 0 5
58844: PUSH
58845: LD_EXP 35
58849: PUSH
58850: LD_VAR 0 4
58854: ARRAY
58855: PUSH
58856: LD_VAR 0 3
58860: ARRAY
58861: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58862: LD_VAR 0 5
58866: PUSH
58867: LD_INT 1
58869: ARRAY
58870: PPUSH
58871: CALL_OW 302
58875: NOT
58876: PUSH
58877: LD_VAR 0 5
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PPUSH
58886: CALL_OW 255
58890: PUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: CALL_OW 255
58900: NONEQUAL
58901: OR
58902: IFFALSE 59008
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58904: LD_VAR 0 5
58908: PUSH
58909: LD_INT 1
58911: ARRAY
58912: PPUSH
58913: CALL_OW 305
58917: PUSH
58918: LD_VAR 0 5
58922: PUSH
58923: LD_INT 1
58925: ARRAY
58926: PPUSH
58927: CALL_OW 255
58931: PUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 255
58941: EQUAL
58942: AND
58943: IFFALSE 58967
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58945: LD_VAR 0 5
58949: PUSH
58950: LD_INT 1
58952: ARRAY
58953: PPUSH
58954: LD_VAR 0 5
58958: PUSH
58959: LD_INT 2
58961: ARRAY
58962: PPUSH
58963: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58967: LD_ADDR_EXP 35
58971: PUSH
58972: LD_EXP 35
58976: PPUSH
58977: LD_VAR 0 4
58981: PPUSH
58982: LD_EXP 35
58986: PUSH
58987: LD_VAR 0 4
58991: ARRAY
58992: PPUSH
58993: LD_VAR 0 3
58997: PPUSH
58998: CALL_OW 3
59002: PPUSH
59003: CALL_OW 1
59007: ST_TO_ADDR
// end ; end ;
59008: GO 58837
59010: POP
59011: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59012: LD_VAR 0 1
59016: PPUSH
59017: LD_EXP 35
59021: PUSH
59022: LD_VAR 0 4
59026: ARRAY
59027: PUSH
59028: LD_INT 0
59030: PLUS
59031: PPUSH
59032: CALL_OW 505
// end ;
59036: LD_VAR 0 2
59040: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59041: LD_INT 0
59043: PPUSH
59044: PPUSH
59045: PPUSH
59046: PPUSH
// if not hack in hackTanks then
59047: LD_VAR 0 1
59051: PUSH
59052: LD_EXP 34
59056: IN
59057: NOT
59058: IFFALSE 59062
// exit ;
59060: GO 59147
// index := GetElementIndex ( hackTanks , hack ) ;
59062: LD_ADDR_VAR 0 5
59066: PUSH
59067: LD_EXP 34
59071: PPUSH
59072: LD_VAR 0 1
59076: PPUSH
59077: CALL 20235 0 2
59081: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59082: LD_ADDR_VAR 0 4
59086: PUSH
59087: DOUBLE
59088: LD_INT 1
59090: DEC
59091: ST_TO_ADDR
59092: LD_EXP 35
59096: PUSH
59097: LD_VAR 0 5
59101: ARRAY
59102: PUSH
59103: FOR_TO
59104: IFFALSE 59145
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59106: LD_EXP 35
59110: PUSH
59111: LD_VAR 0 5
59115: ARRAY
59116: PUSH
59117: LD_VAR 0 4
59121: ARRAY
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: PUSH
59127: LD_VAR 0 2
59131: EQUAL
59132: IFFALSE 59143
// KillUnit ( vehicle ) ;
59134: LD_VAR 0 2
59138: PPUSH
59139: CALL_OW 66
59143: GO 59103
59145: POP
59146: POP
// end ;
59147: LD_VAR 0 3
59151: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59152: LD_EXP 39
59156: NOT
59157: IFFALSE 59192
59159: GO 59161
59161: DISABLE
// begin initMiner := true ;
59162: LD_ADDR_EXP 39
59166: PUSH
59167: LD_INT 1
59169: ST_TO_ADDR
// minersList := [ ] ;
59170: LD_ADDR_EXP 40
59174: PUSH
59175: EMPTY
59176: ST_TO_ADDR
// minerMinesList := [ ] ;
59177: LD_ADDR_EXP 41
59181: PUSH
59182: EMPTY
59183: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59184: LD_ADDR_EXP 42
59188: PUSH
59189: LD_INT 5
59191: ST_TO_ADDR
// end ;
59192: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59193: LD_EXP 39
59197: PUSH
59198: LD_INT 34
59200: PUSH
59201: LD_INT 81
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PPUSH
59208: CALL_OW 69
59212: AND
59213: IFFALSE 59674
59215: GO 59217
59217: DISABLE
59218: LD_INT 0
59220: PPUSH
59221: PPUSH
59222: PPUSH
59223: PPUSH
// begin enable ;
59224: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59225: LD_ADDR_VAR 0 1
59229: PUSH
59230: LD_INT 34
59232: PUSH
59233: LD_INT 81
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PPUSH
59240: CALL_OW 69
59244: PUSH
59245: FOR_IN
59246: IFFALSE 59318
// begin if not i in minersList then
59248: LD_VAR 0 1
59252: PUSH
59253: LD_EXP 40
59257: IN
59258: NOT
59259: IFFALSE 59316
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59261: LD_ADDR_EXP 40
59265: PUSH
59266: LD_EXP 40
59270: PPUSH
59271: LD_EXP 40
59275: PUSH
59276: LD_INT 1
59278: PLUS
59279: PPUSH
59280: LD_VAR 0 1
59284: PPUSH
59285: CALL_OW 1
59289: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59290: LD_ADDR_EXP 41
59294: PUSH
59295: LD_EXP 41
59299: PPUSH
59300: LD_EXP 41
59304: PUSH
59305: LD_INT 1
59307: PLUS
59308: PPUSH
59309: EMPTY
59310: PPUSH
59311: CALL_OW 1
59315: ST_TO_ADDR
// end end ;
59316: GO 59245
59318: POP
59319: POP
// for i := minerMinesList downto 1 do
59320: LD_ADDR_VAR 0 1
59324: PUSH
59325: DOUBLE
59326: LD_EXP 41
59330: INC
59331: ST_TO_ADDR
59332: LD_INT 1
59334: PUSH
59335: FOR_DOWNTO
59336: IFFALSE 59672
// begin if IsLive ( minersList [ i ] ) then
59338: LD_EXP 40
59342: PUSH
59343: LD_VAR 0 1
59347: ARRAY
59348: PPUSH
59349: CALL_OW 300
59353: IFFALSE 59381
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59355: LD_EXP 40
59359: PUSH
59360: LD_VAR 0 1
59364: ARRAY
59365: PPUSH
59366: LD_EXP 41
59370: PUSH
59371: LD_VAR 0 1
59375: ARRAY
59376: PPUSH
59377: CALL_OW 505
// if not minerMinesList [ i ] then
59381: LD_EXP 41
59385: PUSH
59386: LD_VAR 0 1
59390: ARRAY
59391: NOT
59392: IFFALSE 59396
// continue ;
59394: GO 59335
// for j := minerMinesList [ i ] downto 1 do
59396: LD_ADDR_VAR 0 2
59400: PUSH
59401: DOUBLE
59402: LD_EXP 41
59406: PUSH
59407: LD_VAR 0 1
59411: ARRAY
59412: INC
59413: ST_TO_ADDR
59414: LD_INT 1
59416: PUSH
59417: FOR_DOWNTO
59418: IFFALSE 59668
// begin side := GetSide ( minersList [ i ] ) ;
59420: LD_ADDR_VAR 0 3
59424: PUSH
59425: LD_EXP 40
59429: PUSH
59430: LD_VAR 0 1
59434: ARRAY
59435: PPUSH
59436: CALL_OW 255
59440: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59441: LD_ADDR_VAR 0 4
59445: PUSH
59446: LD_EXP 41
59450: PUSH
59451: LD_VAR 0 1
59455: ARRAY
59456: PUSH
59457: LD_VAR 0 2
59461: ARRAY
59462: PUSH
59463: LD_INT 1
59465: ARRAY
59466: PPUSH
59467: LD_EXP 41
59471: PUSH
59472: LD_VAR 0 1
59476: ARRAY
59477: PUSH
59478: LD_VAR 0 2
59482: ARRAY
59483: PUSH
59484: LD_INT 2
59486: ARRAY
59487: PPUSH
59488: CALL_OW 428
59492: ST_TO_ADDR
// if not tmp then
59493: LD_VAR 0 4
59497: NOT
59498: IFFALSE 59502
// continue ;
59500: GO 59417
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59502: LD_VAR 0 4
59506: PUSH
59507: LD_INT 81
59509: PUSH
59510: LD_VAR 0 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PPUSH
59519: CALL_OW 69
59523: IN
59524: PUSH
59525: LD_EXP 41
59529: PUSH
59530: LD_VAR 0 1
59534: ARRAY
59535: PUSH
59536: LD_VAR 0 2
59540: ARRAY
59541: PUSH
59542: LD_INT 1
59544: ARRAY
59545: PPUSH
59546: LD_EXP 41
59550: PUSH
59551: LD_VAR 0 1
59555: ARRAY
59556: PUSH
59557: LD_VAR 0 2
59561: ARRAY
59562: PUSH
59563: LD_INT 2
59565: ARRAY
59566: PPUSH
59567: CALL_OW 458
59571: AND
59572: IFFALSE 59666
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59574: LD_EXP 41
59578: PUSH
59579: LD_VAR 0 1
59583: ARRAY
59584: PUSH
59585: LD_VAR 0 2
59589: ARRAY
59590: PUSH
59591: LD_INT 1
59593: ARRAY
59594: PPUSH
59595: LD_EXP 41
59599: PUSH
59600: LD_VAR 0 1
59604: ARRAY
59605: PUSH
59606: LD_VAR 0 2
59610: ARRAY
59611: PUSH
59612: LD_INT 2
59614: ARRAY
59615: PPUSH
59616: LD_VAR 0 3
59620: PPUSH
59621: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59625: LD_ADDR_EXP 41
59629: PUSH
59630: LD_EXP 41
59634: PPUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: LD_EXP 41
59644: PUSH
59645: LD_VAR 0 1
59649: ARRAY
59650: PPUSH
59651: LD_VAR 0 2
59655: PPUSH
59656: CALL_OW 3
59660: PPUSH
59661: CALL_OW 1
59665: ST_TO_ADDR
// end ; end ;
59666: GO 59417
59668: POP
59669: POP
// end ;
59670: GO 59335
59672: POP
59673: POP
// end ;
59674: PPOPN 4
59676: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59677: LD_INT 0
59679: PPUSH
59680: PPUSH
// result := false ;
59681: LD_ADDR_VAR 0 4
59685: PUSH
59686: LD_INT 0
59688: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL_OW 264
59698: PUSH
59699: LD_INT 81
59701: EQUAL
59702: NOT
59703: IFFALSE 59707
// exit ;
59705: GO 59947
// index := GetElementIndex ( minersList , unit ) ;
59707: LD_ADDR_VAR 0 5
59711: PUSH
59712: LD_EXP 40
59716: PPUSH
59717: LD_VAR 0 1
59721: PPUSH
59722: CALL 20235 0 2
59726: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59727: LD_EXP 41
59731: PUSH
59732: LD_VAR 0 5
59736: ARRAY
59737: PUSH
59738: LD_EXP 42
59742: GREATEREQUAL
59743: IFFALSE 59747
// exit ;
59745: GO 59947
// ComMoveXY ( unit , x , y ) ;
59747: LD_VAR 0 1
59751: PPUSH
59752: LD_VAR 0 2
59756: PPUSH
59757: LD_VAR 0 3
59761: PPUSH
59762: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59766: LD_INT 35
59768: PPUSH
59769: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59773: LD_VAR 0 1
59777: PPUSH
59778: LD_VAR 0 2
59782: PPUSH
59783: LD_VAR 0 3
59787: PPUSH
59788: CALL 51562 0 3
59792: NOT
59793: PUSH
59794: LD_VAR 0 1
59798: PPUSH
59799: CALL_OW 314
59803: AND
59804: IFFALSE 59808
// exit ;
59806: GO 59947
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59808: LD_VAR 0 2
59812: PPUSH
59813: LD_VAR 0 3
59817: PPUSH
59818: CALL_OW 428
59822: PUSH
59823: LD_VAR 0 1
59827: EQUAL
59828: PUSH
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 314
59838: NOT
59839: AND
59840: IFFALSE 59766
// PlaySoundXY ( x , y , PlantMine ) ;
59842: LD_VAR 0 2
59846: PPUSH
59847: LD_VAR 0 3
59851: PPUSH
59852: LD_STRING PlantMine
59854: PPUSH
59855: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59859: LD_VAR 0 2
59863: PPUSH
59864: LD_VAR 0 3
59868: PPUSH
59869: LD_VAR 0 1
59873: PPUSH
59874: CALL_OW 255
59878: PPUSH
59879: LD_INT 0
59881: PPUSH
59882: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59886: LD_ADDR_EXP 41
59890: PUSH
59891: LD_EXP 41
59895: PPUSH
59896: LD_VAR 0 5
59900: PUSH
59901: LD_EXP 41
59905: PUSH
59906: LD_VAR 0 5
59910: ARRAY
59911: PUSH
59912: LD_INT 1
59914: PLUS
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PPUSH
59920: LD_VAR 0 2
59924: PUSH
59925: LD_VAR 0 3
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PPUSH
59934: CALL 20450 0 3
59938: ST_TO_ADDR
// result := true ;
59939: LD_ADDR_VAR 0 4
59943: PUSH
59944: LD_INT 1
59946: ST_TO_ADDR
// end ;
59947: LD_VAR 0 4
59951: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59952: LD_INT 0
59954: PPUSH
59955: PPUSH
59956: PPUSH
// if not unit in minersList then
59957: LD_VAR 0 1
59961: PUSH
59962: LD_EXP 40
59966: IN
59967: NOT
59968: IFFALSE 59972
// exit ;
59970: GO 60364
// index := GetElementIndex ( minersList , unit ) ;
59972: LD_ADDR_VAR 0 6
59976: PUSH
59977: LD_EXP 40
59981: PPUSH
59982: LD_VAR 0 1
59986: PPUSH
59987: CALL 20235 0 2
59991: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59992: LD_ADDR_VAR 0 5
59996: PUSH
59997: DOUBLE
59998: LD_EXP 41
60002: PUSH
60003: LD_VAR 0 6
60007: ARRAY
60008: INC
60009: ST_TO_ADDR
60010: LD_INT 1
60012: PUSH
60013: FOR_DOWNTO
60014: IFFALSE 60175
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60016: LD_EXP 41
60020: PUSH
60021: LD_VAR 0 6
60025: ARRAY
60026: PUSH
60027: LD_VAR 0 5
60031: ARRAY
60032: PUSH
60033: LD_INT 1
60035: ARRAY
60036: PUSH
60037: LD_VAR 0 2
60041: EQUAL
60042: PUSH
60043: LD_EXP 41
60047: PUSH
60048: LD_VAR 0 6
60052: ARRAY
60053: PUSH
60054: LD_VAR 0 5
60058: ARRAY
60059: PUSH
60060: LD_INT 2
60062: ARRAY
60063: PUSH
60064: LD_VAR 0 3
60068: EQUAL
60069: AND
60070: IFFALSE 60173
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60072: LD_EXP 41
60076: PUSH
60077: LD_VAR 0 6
60081: ARRAY
60082: PUSH
60083: LD_VAR 0 5
60087: ARRAY
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PPUSH
60093: LD_EXP 41
60097: PUSH
60098: LD_VAR 0 6
60102: ARRAY
60103: PUSH
60104: LD_VAR 0 5
60108: ARRAY
60109: PUSH
60110: LD_INT 2
60112: ARRAY
60113: PPUSH
60114: LD_VAR 0 1
60118: PPUSH
60119: CALL_OW 255
60123: PPUSH
60124: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60128: LD_ADDR_EXP 41
60132: PUSH
60133: LD_EXP 41
60137: PPUSH
60138: LD_VAR 0 6
60142: PPUSH
60143: LD_EXP 41
60147: PUSH
60148: LD_VAR 0 6
60152: ARRAY
60153: PPUSH
60154: LD_VAR 0 5
60158: PPUSH
60159: CALL_OW 3
60163: PPUSH
60164: CALL_OW 1
60168: ST_TO_ADDR
// exit ;
60169: POP
60170: POP
60171: GO 60364
// end ; end ;
60173: GO 60013
60175: POP
60176: POP
// for i := minerMinesList [ index ] downto 1 do
60177: LD_ADDR_VAR 0 5
60181: PUSH
60182: DOUBLE
60183: LD_EXP 41
60187: PUSH
60188: LD_VAR 0 6
60192: ARRAY
60193: INC
60194: ST_TO_ADDR
60195: LD_INT 1
60197: PUSH
60198: FOR_DOWNTO
60199: IFFALSE 60362
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60201: LD_EXP 41
60205: PUSH
60206: LD_VAR 0 6
60210: ARRAY
60211: PUSH
60212: LD_VAR 0 5
60216: ARRAY
60217: PUSH
60218: LD_INT 1
60220: ARRAY
60221: PPUSH
60222: LD_EXP 41
60226: PUSH
60227: LD_VAR 0 6
60231: ARRAY
60232: PUSH
60233: LD_VAR 0 5
60237: ARRAY
60238: PUSH
60239: LD_INT 2
60241: ARRAY
60242: PPUSH
60243: LD_VAR 0 2
60247: PPUSH
60248: LD_VAR 0 3
60252: PPUSH
60253: CALL_OW 298
60257: PUSH
60258: LD_INT 6
60260: LESS
60261: IFFALSE 60360
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60263: LD_EXP 41
60267: PUSH
60268: LD_VAR 0 6
60272: ARRAY
60273: PUSH
60274: LD_VAR 0 5
60278: ARRAY
60279: PUSH
60280: LD_INT 1
60282: ARRAY
60283: PPUSH
60284: LD_EXP 41
60288: PUSH
60289: LD_VAR 0 6
60293: ARRAY
60294: PUSH
60295: LD_VAR 0 5
60299: ARRAY
60300: PUSH
60301: LD_INT 2
60303: ARRAY
60304: PPUSH
60305: LD_VAR 0 1
60309: PPUSH
60310: CALL_OW 255
60314: PPUSH
60315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60319: LD_ADDR_EXP 41
60323: PUSH
60324: LD_EXP 41
60328: PPUSH
60329: LD_VAR 0 6
60333: PPUSH
60334: LD_EXP 41
60338: PUSH
60339: LD_VAR 0 6
60343: ARRAY
60344: PPUSH
60345: LD_VAR 0 5
60349: PPUSH
60350: CALL_OW 3
60354: PPUSH
60355: CALL_OW 1
60359: ST_TO_ADDR
// end ; end ;
60360: GO 60198
60362: POP
60363: POP
// end ;
60364: LD_VAR 0 4
60368: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60369: LD_INT 0
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
60379: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60380: LD_VAR 0 1
60384: PPUSH
60385: CALL_OW 264
60389: PUSH
60390: LD_INT 81
60392: EQUAL
60393: NOT
60394: PUSH
60395: LD_VAR 0 1
60399: PUSH
60400: LD_EXP 40
60404: IN
60405: NOT
60406: OR
60407: IFFALSE 60411
// exit ;
60409: GO 60733
// index := GetElementIndex ( minersList , unit ) ;
60411: LD_ADDR_VAR 0 6
60415: PUSH
60416: LD_EXP 40
60420: PPUSH
60421: LD_VAR 0 1
60425: PPUSH
60426: CALL 20235 0 2
60430: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60431: LD_ADDR_VAR 0 8
60435: PUSH
60436: LD_EXP 42
60440: PUSH
60441: LD_EXP 41
60445: PUSH
60446: LD_VAR 0 6
60450: ARRAY
60451: MINUS
60452: ST_TO_ADDR
// if not minesFreeAmount then
60453: LD_VAR 0 8
60457: NOT
60458: IFFALSE 60462
// exit ;
60460: GO 60733
// tmp := [ ] ;
60462: LD_ADDR_VAR 0 7
60466: PUSH
60467: EMPTY
60468: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60469: LD_ADDR_VAR 0 5
60473: PUSH
60474: DOUBLE
60475: LD_INT 1
60477: DEC
60478: ST_TO_ADDR
60479: LD_VAR 0 8
60483: PUSH
60484: FOR_TO
60485: IFFALSE 60680
// begin _d := rand ( 0 , 5 ) ;
60487: LD_ADDR_VAR 0 11
60491: PUSH
60492: LD_INT 0
60494: PPUSH
60495: LD_INT 5
60497: PPUSH
60498: CALL_OW 12
60502: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60503: LD_ADDR_VAR 0 12
60507: PUSH
60508: LD_INT 2
60510: PPUSH
60511: LD_INT 6
60513: PPUSH
60514: CALL_OW 12
60518: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60519: LD_ADDR_VAR 0 9
60523: PUSH
60524: LD_VAR 0 2
60528: PPUSH
60529: LD_VAR 0 11
60533: PPUSH
60534: LD_VAR 0 12
60538: PPUSH
60539: CALL_OW 272
60543: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60544: LD_ADDR_VAR 0 10
60548: PUSH
60549: LD_VAR 0 3
60553: PPUSH
60554: LD_VAR 0 11
60558: PPUSH
60559: LD_VAR 0 12
60563: PPUSH
60564: CALL_OW 273
60568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60569: LD_VAR 0 9
60573: PPUSH
60574: LD_VAR 0 10
60578: PPUSH
60579: CALL_OW 488
60583: PUSH
60584: LD_VAR 0 9
60588: PUSH
60589: LD_VAR 0 10
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 7
60602: IN
60603: NOT
60604: AND
60605: PUSH
60606: LD_VAR 0 9
60610: PPUSH
60611: LD_VAR 0 10
60615: PPUSH
60616: CALL_OW 458
60620: NOT
60621: AND
60622: IFFALSE 60664
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60624: LD_ADDR_VAR 0 7
60628: PUSH
60629: LD_VAR 0 7
60633: PPUSH
60634: LD_VAR 0 7
60638: PUSH
60639: LD_INT 1
60641: PLUS
60642: PPUSH
60643: LD_VAR 0 9
60647: PUSH
60648: LD_VAR 0 10
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PPUSH
60657: CALL_OW 1
60661: ST_TO_ADDR
60662: GO 60678
// i := i - 1 ;
60664: LD_ADDR_VAR 0 5
60668: PUSH
60669: LD_VAR 0 5
60673: PUSH
60674: LD_INT 1
60676: MINUS
60677: ST_TO_ADDR
// end ;
60678: GO 60484
60680: POP
60681: POP
// for i in tmp do
60682: LD_ADDR_VAR 0 5
60686: PUSH
60687: LD_VAR 0 7
60691: PUSH
60692: FOR_IN
60693: IFFALSE 60731
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60695: LD_VAR 0 1
60699: PPUSH
60700: LD_VAR 0 5
60704: PUSH
60705: LD_INT 1
60707: ARRAY
60708: PPUSH
60709: LD_VAR 0 5
60713: PUSH
60714: LD_INT 2
60716: ARRAY
60717: PPUSH
60718: CALL 59677 0 3
60722: NOT
60723: IFFALSE 60729
// exit ;
60725: POP
60726: POP
60727: GO 60733
60729: GO 60692
60731: POP
60732: POP
// end ;
60733: LD_VAR 0 4
60737: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60738: LD_INT 0
60740: PPUSH
60741: PPUSH
60742: PPUSH
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
// if not GetClass ( unit ) = class_sniper then
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL_OW 257
60756: PUSH
60757: LD_INT 5
60759: EQUAL
60760: NOT
60761: IFFALSE 60765
// exit ;
60763: GO 61153
// dist := 8 ;
60765: LD_ADDR_VAR 0 5
60769: PUSH
60770: LD_INT 8
60772: ST_TO_ADDR
// viewRange := 12 ;
60773: LD_ADDR_VAR 0 7
60777: PUSH
60778: LD_INT 12
60780: ST_TO_ADDR
// side := GetSide ( unit ) ;
60781: LD_ADDR_VAR 0 6
60785: PUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL_OW 255
60795: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60796: LD_INT 61
60798: PPUSH
60799: LD_VAR 0 6
60803: PPUSH
60804: CALL_OW 321
60808: PUSH
60809: LD_INT 2
60811: EQUAL
60812: IFFALSE 60822
// viewRange := 16 ;
60814: LD_ADDR_VAR 0 7
60818: PUSH
60819: LD_INT 16
60821: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60822: LD_VAR 0 1
60826: PPUSH
60827: LD_VAR 0 2
60831: PPUSH
60832: LD_VAR 0 3
60836: PPUSH
60837: CALL_OW 297
60841: PUSH
60842: LD_VAR 0 5
60846: GREATER
60847: IFFALSE 60926
// begin ComMoveXY ( unit , x , y ) ;
60849: LD_VAR 0 1
60853: PPUSH
60854: LD_VAR 0 2
60858: PPUSH
60859: LD_VAR 0 3
60863: PPUSH
60864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60868: LD_INT 35
60870: PPUSH
60871: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60875: LD_VAR 0 1
60879: PPUSH
60880: LD_VAR 0 2
60884: PPUSH
60885: LD_VAR 0 3
60889: PPUSH
60890: CALL 51562 0 3
60894: NOT
60895: IFFALSE 60899
// exit ;
60897: GO 61153
// until GetDistUnitXY ( unit , x , y ) < dist ;
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_VAR 0 2
60908: PPUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 297
60918: PUSH
60919: LD_VAR 0 5
60923: LESS
60924: IFFALSE 60868
// end ; ComTurnXY ( unit , x , y ) ;
60926: LD_VAR 0 1
60930: PPUSH
60931: LD_VAR 0 2
60935: PPUSH
60936: LD_VAR 0 3
60940: PPUSH
60941: CALL_OW 118
// wait ( 5 ) ;
60945: LD_INT 5
60947: PPUSH
60948: CALL_OW 67
// _d := GetDir ( unit ) ;
60952: LD_ADDR_VAR 0 10
60956: PUSH
60957: LD_VAR 0 1
60961: PPUSH
60962: CALL_OW 254
60966: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60967: LD_ADDR_VAR 0 8
60971: PUSH
60972: LD_VAR 0 1
60976: PPUSH
60977: CALL_OW 250
60981: PPUSH
60982: LD_VAR 0 10
60986: PPUSH
60987: LD_VAR 0 5
60991: PPUSH
60992: CALL_OW 272
60996: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60997: LD_ADDR_VAR 0 9
61001: PUSH
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 251
61011: PPUSH
61012: LD_VAR 0 10
61016: PPUSH
61017: LD_VAR 0 5
61021: PPUSH
61022: CALL_OW 273
61026: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61027: LD_VAR 0 8
61031: PPUSH
61032: LD_VAR 0 9
61036: PPUSH
61037: CALL_OW 488
61041: NOT
61042: IFFALSE 61046
// exit ;
61044: GO 61153
// ComAnimCustom ( unit , 1 ) ;
61046: LD_VAR 0 1
61050: PPUSH
61051: LD_INT 1
61053: PPUSH
61054: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61058: LD_VAR 0 8
61062: PPUSH
61063: LD_VAR 0 9
61067: PPUSH
61068: LD_VAR 0 6
61072: PPUSH
61073: LD_VAR 0 7
61077: PPUSH
61078: CALL_OW 330
// repeat wait ( 1 ) ;
61082: LD_INT 1
61084: PPUSH
61085: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61089: LD_VAR 0 1
61093: PPUSH
61094: CALL_OW 316
61098: PUSH
61099: LD_VAR 0 1
61103: PPUSH
61104: CALL_OW 314
61108: OR
61109: PUSH
61110: LD_VAR 0 1
61114: PPUSH
61115: CALL_OW 302
61119: NOT
61120: OR
61121: PUSH
61122: LD_VAR 0 1
61126: PPUSH
61127: CALL_OW 301
61131: OR
61132: IFFALSE 61082
// RemoveSeeing ( _x , _y , side ) ;
61134: LD_VAR 0 8
61138: PPUSH
61139: LD_VAR 0 9
61143: PPUSH
61144: LD_VAR 0 6
61148: PPUSH
61149: CALL_OW 331
// end ; end_of_file
61153: LD_VAR 0 4
61157: RET
// every 0 0$1 do
61158: GO 61160
61160: DISABLE
// begin enable ;
61161: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61162: LD_STRING updateTimer(
61164: PUSH
61165: LD_OWVAR 1
61169: STR
61170: PUSH
61171: LD_STRING );
61173: STR
61174: PPUSH
61175: CALL_OW 559
// end ;
61179: END
// export function SOS_MapStart ( ) ; begin
61180: LD_INT 0
61182: PPUSH
// if streamModeActive then
61183: LD_EXP 43
61187: IFFALSE 61196
// DefineStreamItems ( true ) ;
61189: LD_INT 1
61191: PPUSH
61192: CALL 62850 0 1
// UpdateFactoryWaypoints ( ) ;
61196: CALL 75711 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61200: CALL 75968 0 0
// end ;
61204: LD_VAR 0 1
61208: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61209: LD_INT 0
61211: PPUSH
// if p2 = hack_mode then
61212: LD_VAR 0 2
61216: PUSH
61217: LD_INT 100
61219: EQUAL
61220: IFFALSE 62223
// begin if not StreamModeActive then
61222: LD_EXP 43
61226: NOT
61227: IFFALSE 61237
// StreamModeActive := true ;
61229: LD_ADDR_EXP 43
61233: PUSH
61234: LD_INT 1
61236: ST_TO_ADDR
// if p3 = 0 then
61237: LD_VAR 0 3
61241: PUSH
61242: LD_INT 0
61244: EQUAL
61245: IFFALSE 61251
// InitStreamMode ;
61247: CALL 62386 0 0
// if p3 = 1 then
61251: LD_VAR 0 3
61255: PUSH
61256: LD_INT 1
61258: EQUAL
61259: IFFALSE 61269
// sRocket := true ;
61261: LD_ADDR_EXP 48
61265: PUSH
61266: LD_INT 1
61268: ST_TO_ADDR
// if p3 = 2 then
61269: LD_VAR 0 3
61273: PUSH
61274: LD_INT 2
61276: EQUAL
61277: IFFALSE 61287
// sSpeed := true ;
61279: LD_ADDR_EXP 47
61283: PUSH
61284: LD_INT 1
61286: ST_TO_ADDR
// if p3 = 3 then
61287: LD_VAR 0 3
61291: PUSH
61292: LD_INT 3
61294: EQUAL
61295: IFFALSE 61305
// sEngine := true ;
61297: LD_ADDR_EXP 49
61301: PUSH
61302: LD_INT 1
61304: ST_TO_ADDR
// if p3 = 4 then
61305: LD_VAR 0 3
61309: PUSH
61310: LD_INT 4
61312: EQUAL
61313: IFFALSE 61323
// sSpec := true ;
61315: LD_ADDR_EXP 46
61319: PUSH
61320: LD_INT 1
61322: ST_TO_ADDR
// if p3 = 5 then
61323: LD_VAR 0 3
61327: PUSH
61328: LD_INT 5
61330: EQUAL
61331: IFFALSE 61341
// sLevel := true ;
61333: LD_ADDR_EXP 50
61337: PUSH
61338: LD_INT 1
61340: ST_TO_ADDR
// if p3 = 6 then
61341: LD_VAR 0 3
61345: PUSH
61346: LD_INT 6
61348: EQUAL
61349: IFFALSE 61359
// sArmoury := true ;
61351: LD_ADDR_EXP 51
61355: PUSH
61356: LD_INT 1
61358: ST_TO_ADDR
// if p3 = 7 then
61359: LD_VAR 0 3
61363: PUSH
61364: LD_INT 7
61366: EQUAL
61367: IFFALSE 61377
// sRadar := true ;
61369: LD_ADDR_EXP 52
61373: PUSH
61374: LD_INT 1
61376: ST_TO_ADDR
// if p3 = 8 then
61377: LD_VAR 0 3
61381: PUSH
61382: LD_INT 8
61384: EQUAL
61385: IFFALSE 61395
// sBunker := true ;
61387: LD_ADDR_EXP 53
61391: PUSH
61392: LD_INT 1
61394: ST_TO_ADDR
// if p3 = 9 then
61395: LD_VAR 0 3
61399: PUSH
61400: LD_INT 9
61402: EQUAL
61403: IFFALSE 61413
// sHack := true ;
61405: LD_ADDR_EXP 54
61409: PUSH
61410: LD_INT 1
61412: ST_TO_ADDR
// if p3 = 10 then
61413: LD_VAR 0 3
61417: PUSH
61418: LD_INT 10
61420: EQUAL
61421: IFFALSE 61431
// sFire := true ;
61423: LD_ADDR_EXP 55
61427: PUSH
61428: LD_INT 1
61430: ST_TO_ADDR
// if p3 = 11 then
61431: LD_VAR 0 3
61435: PUSH
61436: LD_INT 11
61438: EQUAL
61439: IFFALSE 61449
// sRefresh := true ;
61441: LD_ADDR_EXP 56
61445: PUSH
61446: LD_INT 1
61448: ST_TO_ADDR
// if p3 = 12 then
61449: LD_VAR 0 3
61453: PUSH
61454: LD_INT 12
61456: EQUAL
61457: IFFALSE 61467
// sExp := true ;
61459: LD_ADDR_EXP 57
61463: PUSH
61464: LD_INT 1
61466: ST_TO_ADDR
// if p3 = 13 then
61467: LD_VAR 0 3
61471: PUSH
61472: LD_INT 13
61474: EQUAL
61475: IFFALSE 61485
// sDepot := true ;
61477: LD_ADDR_EXP 58
61481: PUSH
61482: LD_INT 1
61484: ST_TO_ADDR
// if p3 = 14 then
61485: LD_VAR 0 3
61489: PUSH
61490: LD_INT 14
61492: EQUAL
61493: IFFALSE 61503
// sFlag := true ;
61495: LD_ADDR_EXP 59
61499: PUSH
61500: LD_INT 1
61502: ST_TO_ADDR
// if p3 = 15 then
61503: LD_VAR 0 3
61507: PUSH
61508: LD_INT 15
61510: EQUAL
61511: IFFALSE 61521
// sKamikadze := true ;
61513: LD_ADDR_EXP 67
61517: PUSH
61518: LD_INT 1
61520: ST_TO_ADDR
// if p3 = 16 then
61521: LD_VAR 0 3
61525: PUSH
61526: LD_INT 16
61528: EQUAL
61529: IFFALSE 61539
// sTroll := true ;
61531: LD_ADDR_EXP 68
61535: PUSH
61536: LD_INT 1
61538: ST_TO_ADDR
// if p3 = 17 then
61539: LD_VAR 0 3
61543: PUSH
61544: LD_INT 17
61546: EQUAL
61547: IFFALSE 61557
// sSlow := true ;
61549: LD_ADDR_EXP 69
61553: PUSH
61554: LD_INT 1
61556: ST_TO_ADDR
// if p3 = 18 then
61557: LD_VAR 0 3
61561: PUSH
61562: LD_INT 18
61564: EQUAL
61565: IFFALSE 61575
// sLack := true ;
61567: LD_ADDR_EXP 70
61571: PUSH
61572: LD_INT 1
61574: ST_TO_ADDR
// if p3 = 19 then
61575: LD_VAR 0 3
61579: PUSH
61580: LD_INT 19
61582: EQUAL
61583: IFFALSE 61593
// sTank := true ;
61585: LD_ADDR_EXP 72
61589: PUSH
61590: LD_INT 1
61592: ST_TO_ADDR
// if p3 = 20 then
61593: LD_VAR 0 3
61597: PUSH
61598: LD_INT 20
61600: EQUAL
61601: IFFALSE 61611
// sRemote := true ;
61603: LD_ADDR_EXP 73
61607: PUSH
61608: LD_INT 1
61610: ST_TO_ADDR
// if p3 = 21 then
61611: LD_VAR 0 3
61615: PUSH
61616: LD_INT 21
61618: EQUAL
61619: IFFALSE 61629
// sPowell := true ;
61621: LD_ADDR_EXP 74
61625: PUSH
61626: LD_INT 1
61628: ST_TO_ADDR
// if p3 = 22 then
61629: LD_VAR 0 3
61633: PUSH
61634: LD_INT 22
61636: EQUAL
61637: IFFALSE 61647
// sTeleport := true ;
61639: LD_ADDR_EXP 77
61643: PUSH
61644: LD_INT 1
61646: ST_TO_ADDR
// if p3 = 23 then
61647: LD_VAR 0 3
61651: PUSH
61652: LD_INT 23
61654: EQUAL
61655: IFFALSE 61665
// sOilTower := true ;
61657: LD_ADDR_EXP 79
61661: PUSH
61662: LD_INT 1
61664: ST_TO_ADDR
// if p3 = 24 then
61665: LD_VAR 0 3
61669: PUSH
61670: LD_INT 24
61672: EQUAL
61673: IFFALSE 61683
// sShovel := true ;
61675: LD_ADDR_EXP 80
61679: PUSH
61680: LD_INT 1
61682: ST_TO_ADDR
// if p3 = 25 then
61683: LD_VAR 0 3
61687: PUSH
61688: LD_INT 25
61690: EQUAL
61691: IFFALSE 61701
// sSheik := true ;
61693: LD_ADDR_EXP 81
61697: PUSH
61698: LD_INT 1
61700: ST_TO_ADDR
// if p3 = 26 then
61701: LD_VAR 0 3
61705: PUSH
61706: LD_INT 26
61708: EQUAL
61709: IFFALSE 61719
// sEarthquake := true ;
61711: LD_ADDR_EXP 83
61715: PUSH
61716: LD_INT 1
61718: ST_TO_ADDR
// if p3 = 27 then
61719: LD_VAR 0 3
61723: PUSH
61724: LD_INT 27
61726: EQUAL
61727: IFFALSE 61737
// sAI := true ;
61729: LD_ADDR_EXP 84
61733: PUSH
61734: LD_INT 1
61736: ST_TO_ADDR
// if p3 = 28 then
61737: LD_VAR 0 3
61741: PUSH
61742: LD_INT 28
61744: EQUAL
61745: IFFALSE 61755
// sCargo := true ;
61747: LD_ADDR_EXP 87
61751: PUSH
61752: LD_INT 1
61754: ST_TO_ADDR
// if p3 = 29 then
61755: LD_VAR 0 3
61759: PUSH
61760: LD_INT 29
61762: EQUAL
61763: IFFALSE 61773
// sDLaser := true ;
61765: LD_ADDR_EXP 88
61769: PUSH
61770: LD_INT 1
61772: ST_TO_ADDR
// if p3 = 30 then
61773: LD_VAR 0 3
61777: PUSH
61778: LD_INT 30
61780: EQUAL
61781: IFFALSE 61791
// sExchange := true ;
61783: LD_ADDR_EXP 89
61787: PUSH
61788: LD_INT 1
61790: ST_TO_ADDR
// if p3 = 31 then
61791: LD_VAR 0 3
61795: PUSH
61796: LD_INT 31
61798: EQUAL
61799: IFFALSE 61809
// sFac := true ;
61801: LD_ADDR_EXP 90
61805: PUSH
61806: LD_INT 1
61808: ST_TO_ADDR
// if p3 = 32 then
61809: LD_VAR 0 3
61813: PUSH
61814: LD_INT 32
61816: EQUAL
61817: IFFALSE 61827
// sPower := true ;
61819: LD_ADDR_EXP 91
61823: PUSH
61824: LD_INT 1
61826: ST_TO_ADDR
// if p3 = 33 then
61827: LD_VAR 0 3
61831: PUSH
61832: LD_INT 33
61834: EQUAL
61835: IFFALSE 61845
// sRandom := true ;
61837: LD_ADDR_EXP 92
61841: PUSH
61842: LD_INT 1
61844: ST_TO_ADDR
// if p3 = 34 then
61845: LD_VAR 0 3
61849: PUSH
61850: LD_INT 34
61852: EQUAL
61853: IFFALSE 61863
// sShield := true ;
61855: LD_ADDR_EXP 93
61859: PUSH
61860: LD_INT 1
61862: ST_TO_ADDR
// if p3 = 35 then
61863: LD_VAR 0 3
61867: PUSH
61868: LD_INT 35
61870: EQUAL
61871: IFFALSE 61881
// sTime := true ;
61873: LD_ADDR_EXP 94
61877: PUSH
61878: LD_INT 1
61880: ST_TO_ADDR
// if p3 = 36 then
61881: LD_VAR 0 3
61885: PUSH
61886: LD_INT 36
61888: EQUAL
61889: IFFALSE 61899
// sTools := true ;
61891: LD_ADDR_EXP 95
61895: PUSH
61896: LD_INT 1
61898: ST_TO_ADDR
// if p3 = 101 then
61899: LD_VAR 0 3
61903: PUSH
61904: LD_INT 101
61906: EQUAL
61907: IFFALSE 61917
// sSold := true ;
61909: LD_ADDR_EXP 60
61913: PUSH
61914: LD_INT 1
61916: ST_TO_ADDR
// if p3 = 102 then
61917: LD_VAR 0 3
61921: PUSH
61922: LD_INT 102
61924: EQUAL
61925: IFFALSE 61935
// sDiff := true ;
61927: LD_ADDR_EXP 61
61931: PUSH
61932: LD_INT 1
61934: ST_TO_ADDR
// if p3 = 103 then
61935: LD_VAR 0 3
61939: PUSH
61940: LD_INT 103
61942: EQUAL
61943: IFFALSE 61953
// sFog := true ;
61945: LD_ADDR_EXP 64
61949: PUSH
61950: LD_INT 1
61952: ST_TO_ADDR
// if p3 = 104 then
61953: LD_VAR 0 3
61957: PUSH
61958: LD_INT 104
61960: EQUAL
61961: IFFALSE 61971
// sReset := true ;
61963: LD_ADDR_EXP 65
61967: PUSH
61968: LD_INT 1
61970: ST_TO_ADDR
// if p3 = 105 then
61971: LD_VAR 0 3
61975: PUSH
61976: LD_INT 105
61978: EQUAL
61979: IFFALSE 61989
// sSun := true ;
61981: LD_ADDR_EXP 66
61985: PUSH
61986: LD_INT 1
61988: ST_TO_ADDR
// if p3 = 106 then
61989: LD_VAR 0 3
61993: PUSH
61994: LD_INT 106
61996: EQUAL
61997: IFFALSE 62007
// sTiger := true ;
61999: LD_ADDR_EXP 62
62003: PUSH
62004: LD_INT 1
62006: ST_TO_ADDR
// if p3 = 107 then
62007: LD_VAR 0 3
62011: PUSH
62012: LD_INT 107
62014: EQUAL
62015: IFFALSE 62025
// sBomb := true ;
62017: LD_ADDR_EXP 63
62021: PUSH
62022: LD_INT 1
62024: ST_TO_ADDR
// if p3 = 108 then
62025: LD_VAR 0 3
62029: PUSH
62030: LD_INT 108
62032: EQUAL
62033: IFFALSE 62043
// sWound := true ;
62035: LD_ADDR_EXP 71
62039: PUSH
62040: LD_INT 1
62042: ST_TO_ADDR
// if p3 = 109 then
62043: LD_VAR 0 3
62047: PUSH
62048: LD_INT 109
62050: EQUAL
62051: IFFALSE 62061
// sBetray := true ;
62053: LD_ADDR_EXP 75
62057: PUSH
62058: LD_INT 1
62060: ST_TO_ADDR
// if p3 = 110 then
62061: LD_VAR 0 3
62065: PUSH
62066: LD_INT 110
62068: EQUAL
62069: IFFALSE 62079
// sContamin := true ;
62071: LD_ADDR_EXP 76
62075: PUSH
62076: LD_INT 1
62078: ST_TO_ADDR
// if p3 = 111 then
62079: LD_VAR 0 3
62083: PUSH
62084: LD_INT 111
62086: EQUAL
62087: IFFALSE 62097
// sOil := true ;
62089: LD_ADDR_EXP 78
62093: PUSH
62094: LD_INT 1
62096: ST_TO_ADDR
// if p3 = 112 then
62097: LD_VAR 0 3
62101: PUSH
62102: LD_INT 112
62104: EQUAL
62105: IFFALSE 62115
// sStu := true ;
62107: LD_ADDR_EXP 82
62111: PUSH
62112: LD_INT 1
62114: ST_TO_ADDR
// if p3 = 113 then
62115: LD_VAR 0 3
62119: PUSH
62120: LD_INT 113
62122: EQUAL
62123: IFFALSE 62133
// sBazooka := true ;
62125: LD_ADDR_EXP 85
62129: PUSH
62130: LD_INT 1
62132: ST_TO_ADDR
// if p3 = 114 then
62133: LD_VAR 0 3
62137: PUSH
62138: LD_INT 114
62140: EQUAL
62141: IFFALSE 62151
// sMortar := true ;
62143: LD_ADDR_EXP 86
62147: PUSH
62148: LD_INT 1
62150: ST_TO_ADDR
// if p3 = 115 then
62151: LD_VAR 0 3
62155: PUSH
62156: LD_INT 115
62158: EQUAL
62159: IFFALSE 62169
// sRanger := true ;
62161: LD_ADDR_EXP 96
62165: PUSH
62166: LD_INT 1
62168: ST_TO_ADDR
// if p3 = 116 then
62169: LD_VAR 0 3
62173: PUSH
62174: LD_INT 116
62176: EQUAL
62177: IFFALSE 62187
// sComputer := true ;
62179: LD_ADDR_EXP 97
62183: PUSH
62184: LD_INT 1
62186: ST_TO_ADDR
// if p3 = 117 then
62187: LD_VAR 0 3
62191: PUSH
62192: LD_INT 117
62194: EQUAL
62195: IFFALSE 62205
// s30 := true ;
62197: LD_ADDR_EXP 98
62201: PUSH
62202: LD_INT 1
62204: ST_TO_ADDR
// if p3 = 118 then
62205: LD_VAR 0 3
62209: PUSH
62210: LD_INT 118
62212: EQUAL
62213: IFFALSE 62223
// s60 := true ;
62215: LD_ADDR_EXP 99
62219: PUSH
62220: LD_INT 1
62222: ST_TO_ADDR
// end ; if p2 = stream_mode then
62223: LD_VAR 0 2
62227: PUSH
62228: LD_INT 101
62230: EQUAL
62231: IFFALSE 62359
// begin case p3 of 1 :
62233: LD_VAR 0 3
62237: PUSH
62238: LD_INT 1
62240: DOUBLE
62241: EQUAL
62242: IFTRUE 62246
62244: GO 62253
62246: POP
// hHackUnlimitedResources ; 2 :
62247: CALL 74457 0 0
62251: GO 62359
62253: LD_INT 2
62255: DOUBLE
62256: EQUAL
62257: IFTRUE 62261
62259: GO 62268
62261: POP
// hHackSetLevel10 ; 3 :
62262: CALL 74590 0 0
62266: GO 62359
62268: LD_INT 3
62270: DOUBLE
62271: EQUAL
62272: IFTRUE 62276
62274: GO 62283
62276: POP
// hHackSetLevel10YourUnits ; 4 :
62277: CALL 74675 0 0
62281: GO 62359
62283: LD_INT 4
62285: DOUBLE
62286: EQUAL
62287: IFTRUE 62291
62289: GO 62298
62291: POP
// hHackInvincible ; 5 :
62292: CALL 75123 0 0
62296: GO 62359
62298: LD_INT 5
62300: DOUBLE
62301: EQUAL
62302: IFTRUE 62306
62304: GO 62313
62306: POP
// hHackInvisible ; 6 :
62307: CALL 75234 0 0
62311: GO 62359
62313: LD_INT 6
62315: DOUBLE
62316: EQUAL
62317: IFTRUE 62321
62319: GO 62328
62321: POP
// hHackChangeYourSide ; 7 :
62322: CALL 75291 0 0
62326: GO 62359
62328: LD_INT 7
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62336
62334: GO 62343
62336: POP
// hHackChangeUnitSide ; 8 :
62337: CALL 75333 0 0
62341: GO 62359
62343: LD_INT 8
62345: DOUBLE
62346: EQUAL
62347: IFTRUE 62351
62349: GO 62358
62351: POP
// hHackFog ; end ;
62352: CALL 75434 0 0
62356: GO 62359
62358: POP
// end ; end ;
62359: LD_VAR 0 7
62363: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
62364: GO 62366
62366: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
62367: LD_STRING initStreamRollete();
62369: PPUSH
62370: CALL_OW 559
// InitStreamMode ;
62374: CALL 62386 0 0
// DefineStreamItems ( false ) ;
62378: LD_INT 0
62380: PPUSH
62381: CALL 62850 0 1
// end ;
62385: END
// function InitStreamMode ; begin
62386: LD_INT 0
62388: PPUSH
// streamModeActive := false ;
62389: LD_ADDR_EXP 43
62393: PUSH
62394: LD_INT 0
62396: ST_TO_ADDR
// normalCounter := 36 ;
62397: LD_ADDR_EXP 44
62401: PUSH
62402: LD_INT 36
62404: ST_TO_ADDR
// hardcoreCounter := 18 ;
62405: LD_ADDR_EXP 45
62409: PUSH
62410: LD_INT 18
62412: ST_TO_ADDR
// sRocket := false ;
62413: LD_ADDR_EXP 48
62417: PUSH
62418: LD_INT 0
62420: ST_TO_ADDR
// sSpeed := false ;
62421: LD_ADDR_EXP 47
62425: PUSH
62426: LD_INT 0
62428: ST_TO_ADDR
// sEngine := false ;
62429: LD_ADDR_EXP 49
62433: PUSH
62434: LD_INT 0
62436: ST_TO_ADDR
// sSpec := false ;
62437: LD_ADDR_EXP 46
62441: PUSH
62442: LD_INT 0
62444: ST_TO_ADDR
// sLevel := false ;
62445: LD_ADDR_EXP 50
62449: PUSH
62450: LD_INT 0
62452: ST_TO_ADDR
// sArmoury := false ;
62453: LD_ADDR_EXP 51
62457: PUSH
62458: LD_INT 0
62460: ST_TO_ADDR
// sRadar := false ;
62461: LD_ADDR_EXP 52
62465: PUSH
62466: LD_INT 0
62468: ST_TO_ADDR
// sBunker := false ;
62469: LD_ADDR_EXP 53
62473: PUSH
62474: LD_INT 0
62476: ST_TO_ADDR
// sHack := false ;
62477: LD_ADDR_EXP 54
62481: PUSH
62482: LD_INT 0
62484: ST_TO_ADDR
// sFire := false ;
62485: LD_ADDR_EXP 55
62489: PUSH
62490: LD_INT 0
62492: ST_TO_ADDR
// sRefresh := false ;
62493: LD_ADDR_EXP 56
62497: PUSH
62498: LD_INT 0
62500: ST_TO_ADDR
// sExp := false ;
62501: LD_ADDR_EXP 57
62505: PUSH
62506: LD_INT 0
62508: ST_TO_ADDR
// sDepot := false ;
62509: LD_ADDR_EXP 58
62513: PUSH
62514: LD_INT 0
62516: ST_TO_ADDR
// sFlag := false ;
62517: LD_ADDR_EXP 59
62521: PUSH
62522: LD_INT 0
62524: ST_TO_ADDR
// sKamikadze := false ;
62525: LD_ADDR_EXP 67
62529: PUSH
62530: LD_INT 0
62532: ST_TO_ADDR
// sTroll := false ;
62533: LD_ADDR_EXP 68
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// sSlow := false ;
62541: LD_ADDR_EXP 69
62545: PUSH
62546: LD_INT 0
62548: ST_TO_ADDR
// sLack := false ;
62549: LD_ADDR_EXP 70
62553: PUSH
62554: LD_INT 0
62556: ST_TO_ADDR
// sTank := false ;
62557: LD_ADDR_EXP 72
62561: PUSH
62562: LD_INT 0
62564: ST_TO_ADDR
// sRemote := false ;
62565: LD_ADDR_EXP 73
62569: PUSH
62570: LD_INT 0
62572: ST_TO_ADDR
// sPowell := false ;
62573: LD_ADDR_EXP 74
62577: PUSH
62578: LD_INT 0
62580: ST_TO_ADDR
// sTeleport := false ;
62581: LD_ADDR_EXP 77
62585: PUSH
62586: LD_INT 0
62588: ST_TO_ADDR
// sOilTower := false ;
62589: LD_ADDR_EXP 79
62593: PUSH
62594: LD_INT 0
62596: ST_TO_ADDR
// sShovel := false ;
62597: LD_ADDR_EXP 80
62601: PUSH
62602: LD_INT 0
62604: ST_TO_ADDR
// sSheik := false ;
62605: LD_ADDR_EXP 81
62609: PUSH
62610: LD_INT 0
62612: ST_TO_ADDR
// sEarthquake := false ;
62613: LD_ADDR_EXP 83
62617: PUSH
62618: LD_INT 0
62620: ST_TO_ADDR
// sAI := false ;
62621: LD_ADDR_EXP 84
62625: PUSH
62626: LD_INT 0
62628: ST_TO_ADDR
// sCargo := false ;
62629: LD_ADDR_EXP 87
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// sDLaser := false ;
62637: LD_ADDR_EXP 88
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// sExchange := false ;
62645: LD_ADDR_EXP 89
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// sFac := false ;
62653: LD_ADDR_EXP 90
62657: PUSH
62658: LD_INT 0
62660: ST_TO_ADDR
// sPower := false ;
62661: LD_ADDR_EXP 91
62665: PUSH
62666: LD_INT 0
62668: ST_TO_ADDR
// sRandom := false ;
62669: LD_ADDR_EXP 92
62673: PUSH
62674: LD_INT 0
62676: ST_TO_ADDR
// sShield := false ;
62677: LD_ADDR_EXP 93
62681: PUSH
62682: LD_INT 0
62684: ST_TO_ADDR
// sTime := false ;
62685: LD_ADDR_EXP 94
62689: PUSH
62690: LD_INT 0
62692: ST_TO_ADDR
// sTools := false ;
62693: LD_ADDR_EXP 95
62697: PUSH
62698: LD_INT 0
62700: ST_TO_ADDR
// sSold := false ;
62701: LD_ADDR_EXP 60
62705: PUSH
62706: LD_INT 0
62708: ST_TO_ADDR
// sDiff := false ;
62709: LD_ADDR_EXP 61
62713: PUSH
62714: LD_INT 0
62716: ST_TO_ADDR
// sFog := false ;
62717: LD_ADDR_EXP 64
62721: PUSH
62722: LD_INT 0
62724: ST_TO_ADDR
// sReset := false ;
62725: LD_ADDR_EXP 65
62729: PUSH
62730: LD_INT 0
62732: ST_TO_ADDR
// sSun := false ;
62733: LD_ADDR_EXP 66
62737: PUSH
62738: LD_INT 0
62740: ST_TO_ADDR
// sTiger := false ;
62741: LD_ADDR_EXP 62
62745: PUSH
62746: LD_INT 0
62748: ST_TO_ADDR
// sBomb := false ;
62749: LD_ADDR_EXP 63
62753: PUSH
62754: LD_INT 0
62756: ST_TO_ADDR
// sWound := false ;
62757: LD_ADDR_EXP 71
62761: PUSH
62762: LD_INT 0
62764: ST_TO_ADDR
// sBetray := false ;
62765: LD_ADDR_EXP 75
62769: PUSH
62770: LD_INT 0
62772: ST_TO_ADDR
// sContamin := false ;
62773: LD_ADDR_EXP 76
62777: PUSH
62778: LD_INT 0
62780: ST_TO_ADDR
// sOil := false ;
62781: LD_ADDR_EXP 78
62785: PUSH
62786: LD_INT 0
62788: ST_TO_ADDR
// sStu := false ;
62789: LD_ADDR_EXP 82
62793: PUSH
62794: LD_INT 0
62796: ST_TO_ADDR
// sBazooka := false ;
62797: LD_ADDR_EXP 85
62801: PUSH
62802: LD_INT 0
62804: ST_TO_ADDR
// sMortar := false ;
62805: LD_ADDR_EXP 86
62809: PUSH
62810: LD_INT 0
62812: ST_TO_ADDR
// sRanger := false ;
62813: LD_ADDR_EXP 96
62817: PUSH
62818: LD_INT 0
62820: ST_TO_ADDR
// sComputer := false ;
62821: LD_ADDR_EXP 97
62825: PUSH
62826: LD_INT 0
62828: ST_TO_ADDR
// s30 := false ;
62829: LD_ADDR_EXP 98
62833: PUSH
62834: LD_INT 0
62836: ST_TO_ADDR
// s60 := false ;
62837: LD_ADDR_EXP 99
62841: PUSH
62842: LD_INT 0
62844: ST_TO_ADDR
// end ;
62845: LD_VAR 0 1
62849: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62850: LD_INT 0
62852: PPUSH
62853: PPUSH
62854: PPUSH
62855: PPUSH
62856: PPUSH
62857: PPUSH
62858: PPUSH
// result := [ ] ;
62859: LD_ADDR_VAR 0 2
62863: PUSH
62864: EMPTY
62865: ST_TO_ADDR
// if campaign_id = 1 then
62866: LD_OWVAR 69
62870: PUSH
62871: LD_INT 1
62873: EQUAL
62874: IFFALSE 66040
// begin case mission_number of 1 :
62876: LD_OWVAR 70
62880: PUSH
62881: LD_INT 1
62883: DOUBLE
62884: EQUAL
62885: IFTRUE 62889
62887: GO 62965
62889: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62890: LD_ADDR_VAR 0 2
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: LD_INT 4
62900: PUSH
62901: LD_INT 11
62903: PUSH
62904: LD_INT 12
62906: PUSH
62907: LD_INT 15
62909: PUSH
62910: LD_INT 16
62912: PUSH
62913: LD_INT 22
62915: PUSH
62916: LD_INT 23
62918: PUSH
62919: LD_INT 26
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 101
62935: PUSH
62936: LD_INT 102
62938: PUSH
62939: LD_INT 106
62941: PUSH
62942: LD_INT 116
62944: PUSH
62945: LD_INT 117
62947: PUSH
62948: LD_INT 118
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: ST_TO_ADDR
62963: GO 66038
62965: LD_INT 2
62967: DOUBLE
62968: EQUAL
62969: IFTRUE 62973
62971: GO 63057
62973: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62974: LD_ADDR_VAR 0 2
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: LD_INT 4
62984: PUSH
62985: LD_INT 11
62987: PUSH
62988: LD_INT 12
62990: PUSH
62991: LD_INT 15
62993: PUSH
62994: LD_INT 16
62996: PUSH
62997: LD_INT 22
62999: PUSH
63000: LD_INT 23
63002: PUSH
63003: LD_INT 26
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 101
63019: PUSH
63020: LD_INT 102
63022: PUSH
63023: LD_INT 105
63025: PUSH
63026: LD_INT 106
63028: PUSH
63029: LD_INT 108
63031: PUSH
63032: LD_INT 116
63034: PUSH
63035: LD_INT 117
63037: PUSH
63038: LD_INT 118
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: ST_TO_ADDR
63055: GO 66038
63057: LD_INT 3
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63065
63063: GO 63153
63065: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63066: LD_ADDR_VAR 0 2
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 4
63076: PUSH
63077: LD_INT 5
63079: PUSH
63080: LD_INT 11
63082: PUSH
63083: LD_INT 12
63085: PUSH
63086: LD_INT 15
63088: PUSH
63089: LD_INT 16
63091: PUSH
63092: LD_INT 22
63094: PUSH
63095: LD_INT 26
63097: PUSH
63098: LD_INT 36
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 101
63115: PUSH
63116: LD_INT 102
63118: PUSH
63119: LD_INT 105
63121: PUSH
63122: LD_INT 106
63124: PUSH
63125: LD_INT 108
63127: PUSH
63128: LD_INT 116
63130: PUSH
63131: LD_INT 117
63133: PUSH
63134: LD_INT 118
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: ST_TO_ADDR
63151: GO 66038
63153: LD_INT 4
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63161
63159: GO 63257
63161: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63162: LD_ADDR_VAR 0 2
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 4
63172: PUSH
63173: LD_INT 5
63175: PUSH
63176: LD_INT 8
63178: PUSH
63179: LD_INT 11
63181: PUSH
63182: LD_INT 12
63184: PUSH
63185: LD_INT 15
63187: PUSH
63188: LD_INT 16
63190: PUSH
63191: LD_INT 22
63193: PUSH
63194: LD_INT 23
63196: PUSH
63197: LD_INT 26
63199: PUSH
63200: LD_INT 36
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 101
63219: PUSH
63220: LD_INT 102
63222: PUSH
63223: LD_INT 105
63225: PUSH
63226: LD_INT 106
63228: PUSH
63229: LD_INT 108
63231: PUSH
63232: LD_INT 116
63234: PUSH
63235: LD_INT 117
63237: PUSH
63238: LD_INT 118
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: ST_TO_ADDR
63255: GO 66038
63257: LD_INT 5
63259: DOUBLE
63260: EQUAL
63261: IFTRUE 63265
63263: GO 63377
63265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63266: LD_ADDR_VAR 0 2
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: LD_INT 4
63276: PUSH
63277: LD_INT 5
63279: PUSH
63280: LD_INT 6
63282: PUSH
63283: LD_INT 8
63285: PUSH
63286: LD_INT 11
63288: PUSH
63289: LD_INT 12
63291: PUSH
63292: LD_INT 15
63294: PUSH
63295: LD_INT 16
63297: PUSH
63298: LD_INT 22
63300: PUSH
63301: LD_INT 23
63303: PUSH
63304: LD_INT 25
63306: PUSH
63307: LD_INT 26
63309: PUSH
63310: LD_INT 36
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 101
63331: PUSH
63332: LD_INT 102
63334: PUSH
63335: LD_INT 105
63337: PUSH
63338: LD_INT 106
63340: PUSH
63341: LD_INT 108
63343: PUSH
63344: LD_INT 109
63346: PUSH
63347: LD_INT 112
63349: PUSH
63350: LD_INT 116
63352: PUSH
63353: LD_INT 117
63355: PUSH
63356: LD_INT 118
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: ST_TO_ADDR
63375: GO 66038
63377: LD_INT 6
63379: DOUBLE
63380: EQUAL
63381: IFTRUE 63385
63383: GO 63517
63385: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63386: LD_ADDR_VAR 0 2
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: LD_INT 4
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: LD_INT 6
63402: PUSH
63403: LD_INT 8
63405: PUSH
63406: LD_INT 11
63408: PUSH
63409: LD_INT 12
63411: PUSH
63412: LD_INT 15
63414: PUSH
63415: LD_INT 16
63417: PUSH
63418: LD_INT 20
63420: PUSH
63421: LD_INT 21
63423: PUSH
63424: LD_INT 22
63426: PUSH
63427: LD_INT 23
63429: PUSH
63430: LD_INT 25
63432: PUSH
63433: LD_INT 26
63435: PUSH
63436: LD_INT 30
63438: PUSH
63439: LD_INT 31
63441: PUSH
63442: LD_INT 32
63444: PUSH
63445: LD_INT 36
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 101
63471: PUSH
63472: LD_INT 102
63474: PUSH
63475: LD_INT 105
63477: PUSH
63478: LD_INT 106
63480: PUSH
63481: LD_INT 108
63483: PUSH
63484: LD_INT 109
63486: PUSH
63487: LD_INT 112
63489: PUSH
63490: LD_INT 116
63492: PUSH
63493: LD_INT 117
63495: PUSH
63496: LD_INT 118
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: ST_TO_ADDR
63515: GO 66038
63517: LD_INT 7
63519: DOUBLE
63520: EQUAL
63521: IFTRUE 63525
63523: GO 63637
63525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63526: LD_ADDR_VAR 0 2
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: LD_INT 4
63536: PUSH
63537: LD_INT 5
63539: PUSH
63540: LD_INT 7
63542: PUSH
63543: LD_INT 11
63545: PUSH
63546: LD_INT 12
63548: PUSH
63549: LD_INT 15
63551: PUSH
63552: LD_INT 16
63554: PUSH
63555: LD_INT 20
63557: PUSH
63558: LD_INT 21
63560: PUSH
63561: LD_INT 22
63563: PUSH
63564: LD_INT 23
63566: PUSH
63567: LD_INT 25
63569: PUSH
63570: LD_INT 26
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 101
63591: PUSH
63592: LD_INT 102
63594: PUSH
63595: LD_INT 103
63597: PUSH
63598: LD_INT 105
63600: PUSH
63601: LD_INT 106
63603: PUSH
63604: LD_INT 108
63606: PUSH
63607: LD_INT 112
63609: PUSH
63610: LD_INT 116
63612: PUSH
63613: LD_INT 117
63615: PUSH
63616: LD_INT 118
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: ST_TO_ADDR
63635: GO 66038
63637: LD_INT 8
63639: DOUBLE
63640: EQUAL
63641: IFTRUE 63645
63643: GO 63785
63645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63646: LD_ADDR_VAR 0 2
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: LD_INT 4
63656: PUSH
63657: LD_INT 5
63659: PUSH
63660: LD_INT 6
63662: PUSH
63663: LD_INT 7
63665: PUSH
63666: LD_INT 8
63668: PUSH
63669: LD_INT 11
63671: PUSH
63672: LD_INT 12
63674: PUSH
63675: LD_INT 15
63677: PUSH
63678: LD_INT 16
63680: PUSH
63681: LD_INT 20
63683: PUSH
63684: LD_INT 21
63686: PUSH
63687: LD_INT 22
63689: PUSH
63690: LD_INT 23
63692: PUSH
63693: LD_INT 25
63695: PUSH
63696: LD_INT 26
63698: PUSH
63699: LD_INT 30
63701: PUSH
63702: LD_INT 31
63704: PUSH
63705: LD_INT 32
63707: PUSH
63708: LD_INT 36
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 101
63735: PUSH
63736: LD_INT 102
63738: PUSH
63739: LD_INT 103
63741: PUSH
63742: LD_INT 105
63744: PUSH
63745: LD_INT 106
63747: PUSH
63748: LD_INT 108
63750: PUSH
63751: LD_INT 109
63753: PUSH
63754: LD_INT 112
63756: PUSH
63757: LD_INT 116
63759: PUSH
63760: LD_INT 117
63762: PUSH
63763: LD_INT 118
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: ST_TO_ADDR
63783: GO 66038
63785: LD_INT 9
63787: DOUBLE
63788: EQUAL
63789: IFTRUE 63793
63791: GO 63941
63793: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63794: LD_ADDR_VAR 0 2
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: LD_INT 5
63807: PUSH
63808: LD_INT 6
63810: PUSH
63811: LD_INT 7
63813: PUSH
63814: LD_INT 8
63816: PUSH
63817: LD_INT 11
63819: PUSH
63820: LD_INT 12
63822: PUSH
63823: LD_INT 15
63825: PUSH
63826: LD_INT 16
63828: PUSH
63829: LD_INT 20
63831: PUSH
63832: LD_INT 21
63834: PUSH
63835: LD_INT 22
63837: PUSH
63838: LD_INT 23
63840: PUSH
63841: LD_INT 25
63843: PUSH
63844: LD_INT 26
63846: PUSH
63847: LD_INT 28
63849: PUSH
63850: LD_INT 30
63852: PUSH
63853: LD_INT 31
63855: PUSH
63856: LD_INT 32
63858: PUSH
63859: LD_INT 36
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 101
63887: PUSH
63888: LD_INT 102
63890: PUSH
63891: LD_INT 103
63893: PUSH
63894: LD_INT 105
63896: PUSH
63897: LD_INT 106
63899: PUSH
63900: LD_INT 108
63902: PUSH
63903: LD_INT 109
63905: PUSH
63906: LD_INT 112
63908: PUSH
63909: LD_INT 114
63911: PUSH
63912: LD_INT 116
63914: PUSH
63915: LD_INT 117
63917: PUSH
63918: LD_INT 118
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: ST_TO_ADDR
63939: GO 66038
63941: LD_INT 10
63943: DOUBLE
63944: EQUAL
63945: IFTRUE 63949
63947: GO 64145
63949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63950: LD_ADDR_VAR 0 2
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: LD_INT 4
63960: PUSH
63961: LD_INT 5
63963: PUSH
63964: LD_INT 6
63966: PUSH
63967: LD_INT 7
63969: PUSH
63970: LD_INT 8
63972: PUSH
63973: LD_INT 9
63975: PUSH
63976: LD_INT 10
63978: PUSH
63979: LD_INT 11
63981: PUSH
63982: LD_INT 12
63984: PUSH
63985: LD_INT 13
63987: PUSH
63988: LD_INT 14
63990: PUSH
63991: LD_INT 15
63993: PUSH
63994: LD_INT 16
63996: PUSH
63997: LD_INT 17
63999: PUSH
64000: LD_INT 18
64002: PUSH
64003: LD_INT 19
64005: PUSH
64006: LD_INT 20
64008: PUSH
64009: LD_INT 21
64011: PUSH
64012: LD_INT 22
64014: PUSH
64015: LD_INT 23
64017: PUSH
64018: LD_INT 24
64020: PUSH
64021: LD_INT 25
64023: PUSH
64024: LD_INT 26
64026: PUSH
64027: LD_INT 28
64029: PUSH
64030: LD_INT 30
64032: PUSH
64033: LD_INT 31
64035: PUSH
64036: LD_INT 32
64038: PUSH
64039: LD_INT 36
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 101
64075: PUSH
64076: LD_INT 102
64078: PUSH
64079: LD_INT 103
64081: PUSH
64082: LD_INT 104
64084: PUSH
64085: LD_INT 105
64087: PUSH
64088: LD_INT 106
64090: PUSH
64091: LD_INT 107
64093: PUSH
64094: LD_INT 108
64096: PUSH
64097: LD_INT 109
64099: PUSH
64100: LD_INT 110
64102: PUSH
64103: LD_INT 111
64105: PUSH
64106: LD_INT 112
64108: PUSH
64109: LD_INT 114
64111: PUSH
64112: LD_INT 116
64114: PUSH
64115: LD_INT 117
64117: PUSH
64118: LD_INT 118
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: ST_TO_ADDR
64143: GO 66038
64145: LD_INT 11
64147: DOUBLE
64148: EQUAL
64149: IFTRUE 64153
64151: GO 64357
64153: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64154: LD_ADDR_VAR 0 2
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: LD_INT 4
64167: PUSH
64168: LD_INT 5
64170: PUSH
64171: LD_INT 6
64173: PUSH
64174: LD_INT 7
64176: PUSH
64177: LD_INT 8
64179: PUSH
64180: LD_INT 9
64182: PUSH
64183: LD_INT 10
64185: PUSH
64186: LD_INT 11
64188: PUSH
64189: LD_INT 12
64191: PUSH
64192: LD_INT 13
64194: PUSH
64195: LD_INT 14
64197: PUSH
64198: LD_INT 15
64200: PUSH
64201: LD_INT 16
64203: PUSH
64204: LD_INT 17
64206: PUSH
64207: LD_INT 18
64209: PUSH
64210: LD_INT 19
64212: PUSH
64213: LD_INT 20
64215: PUSH
64216: LD_INT 21
64218: PUSH
64219: LD_INT 22
64221: PUSH
64222: LD_INT 23
64224: PUSH
64225: LD_INT 24
64227: PUSH
64228: LD_INT 25
64230: PUSH
64231: LD_INT 26
64233: PUSH
64234: LD_INT 28
64236: PUSH
64237: LD_INT 30
64239: PUSH
64240: LD_INT 31
64242: PUSH
64243: LD_INT 32
64245: PUSH
64246: LD_INT 34
64248: PUSH
64249: LD_INT 36
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 101
64287: PUSH
64288: LD_INT 102
64290: PUSH
64291: LD_INT 103
64293: PUSH
64294: LD_INT 104
64296: PUSH
64297: LD_INT 105
64299: PUSH
64300: LD_INT 106
64302: PUSH
64303: LD_INT 107
64305: PUSH
64306: LD_INT 108
64308: PUSH
64309: LD_INT 109
64311: PUSH
64312: LD_INT 110
64314: PUSH
64315: LD_INT 111
64317: PUSH
64318: LD_INT 112
64320: PUSH
64321: LD_INT 114
64323: PUSH
64324: LD_INT 116
64326: PUSH
64327: LD_INT 117
64329: PUSH
64330: LD_INT 118
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: ST_TO_ADDR
64355: GO 66038
64357: LD_INT 12
64359: DOUBLE
64360: EQUAL
64361: IFTRUE 64365
64363: GO 64585
64365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64366: LD_ADDR_VAR 0 2
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: LD_INT 4
64382: PUSH
64383: LD_INT 5
64385: PUSH
64386: LD_INT 6
64388: PUSH
64389: LD_INT 7
64391: PUSH
64392: LD_INT 8
64394: PUSH
64395: LD_INT 9
64397: PUSH
64398: LD_INT 10
64400: PUSH
64401: LD_INT 11
64403: PUSH
64404: LD_INT 12
64406: PUSH
64407: LD_INT 13
64409: PUSH
64410: LD_INT 14
64412: PUSH
64413: LD_INT 15
64415: PUSH
64416: LD_INT 16
64418: PUSH
64419: LD_INT 17
64421: PUSH
64422: LD_INT 18
64424: PUSH
64425: LD_INT 19
64427: PUSH
64428: LD_INT 20
64430: PUSH
64431: LD_INT 21
64433: PUSH
64434: LD_INT 22
64436: PUSH
64437: LD_INT 23
64439: PUSH
64440: LD_INT 24
64442: PUSH
64443: LD_INT 25
64445: PUSH
64446: LD_INT 26
64448: PUSH
64449: LD_INT 27
64451: PUSH
64452: LD_INT 28
64454: PUSH
64455: LD_INT 30
64457: PUSH
64458: LD_INT 31
64460: PUSH
64461: LD_INT 32
64463: PUSH
64464: LD_INT 33
64466: PUSH
64467: LD_INT 34
64469: PUSH
64470: LD_INT 36
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 101
64511: PUSH
64512: LD_INT 102
64514: PUSH
64515: LD_INT 103
64517: PUSH
64518: LD_INT 104
64520: PUSH
64521: LD_INT 105
64523: PUSH
64524: LD_INT 106
64526: PUSH
64527: LD_INT 107
64529: PUSH
64530: LD_INT 108
64532: PUSH
64533: LD_INT 109
64535: PUSH
64536: LD_INT 110
64538: PUSH
64539: LD_INT 111
64541: PUSH
64542: LD_INT 112
64544: PUSH
64545: LD_INT 113
64547: PUSH
64548: LD_INT 114
64550: PUSH
64551: LD_INT 116
64553: PUSH
64554: LD_INT 117
64556: PUSH
64557: LD_INT 118
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: ST_TO_ADDR
64583: GO 66038
64585: LD_INT 13
64587: DOUBLE
64588: EQUAL
64589: IFTRUE 64593
64591: GO 64801
64593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64594: LD_ADDR_VAR 0 2
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: LD_INT 4
64610: PUSH
64611: LD_INT 5
64613: PUSH
64614: LD_INT 8
64616: PUSH
64617: LD_INT 9
64619: PUSH
64620: LD_INT 10
64622: PUSH
64623: LD_INT 11
64625: PUSH
64626: LD_INT 12
64628: PUSH
64629: LD_INT 14
64631: PUSH
64632: LD_INT 15
64634: PUSH
64635: LD_INT 16
64637: PUSH
64638: LD_INT 17
64640: PUSH
64641: LD_INT 18
64643: PUSH
64644: LD_INT 19
64646: PUSH
64647: LD_INT 20
64649: PUSH
64650: LD_INT 21
64652: PUSH
64653: LD_INT 22
64655: PUSH
64656: LD_INT 23
64658: PUSH
64659: LD_INT 24
64661: PUSH
64662: LD_INT 25
64664: PUSH
64665: LD_INT 26
64667: PUSH
64668: LD_INT 27
64670: PUSH
64671: LD_INT 28
64673: PUSH
64674: LD_INT 30
64676: PUSH
64677: LD_INT 31
64679: PUSH
64680: LD_INT 32
64682: PUSH
64683: LD_INT 33
64685: PUSH
64686: LD_INT 34
64688: PUSH
64689: LD_INT 36
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 101
64727: PUSH
64728: LD_INT 102
64730: PUSH
64731: LD_INT 103
64733: PUSH
64734: LD_INT 104
64736: PUSH
64737: LD_INT 105
64739: PUSH
64740: LD_INT 106
64742: PUSH
64743: LD_INT 107
64745: PUSH
64746: LD_INT 108
64748: PUSH
64749: LD_INT 109
64751: PUSH
64752: LD_INT 110
64754: PUSH
64755: LD_INT 111
64757: PUSH
64758: LD_INT 112
64760: PUSH
64761: LD_INT 113
64763: PUSH
64764: LD_INT 114
64766: PUSH
64767: LD_INT 116
64769: PUSH
64770: LD_INT 117
64772: PUSH
64773: LD_INT 118
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: ST_TO_ADDR
64799: GO 66038
64801: LD_INT 14
64803: DOUBLE
64804: EQUAL
64805: IFTRUE 64809
64807: GO 65033
64809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64810: LD_ADDR_VAR 0 2
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: LD_INT 4
64826: PUSH
64827: LD_INT 5
64829: PUSH
64830: LD_INT 6
64832: PUSH
64833: LD_INT 7
64835: PUSH
64836: LD_INT 8
64838: PUSH
64839: LD_INT 9
64841: PUSH
64842: LD_INT 10
64844: PUSH
64845: LD_INT 11
64847: PUSH
64848: LD_INT 12
64850: PUSH
64851: LD_INT 13
64853: PUSH
64854: LD_INT 14
64856: PUSH
64857: LD_INT 15
64859: PUSH
64860: LD_INT 16
64862: PUSH
64863: LD_INT 17
64865: PUSH
64866: LD_INT 18
64868: PUSH
64869: LD_INT 19
64871: PUSH
64872: LD_INT 20
64874: PUSH
64875: LD_INT 21
64877: PUSH
64878: LD_INT 22
64880: PUSH
64881: LD_INT 23
64883: PUSH
64884: LD_INT 24
64886: PUSH
64887: LD_INT 25
64889: PUSH
64890: LD_INT 26
64892: PUSH
64893: LD_INT 27
64895: PUSH
64896: LD_INT 28
64898: PUSH
64899: LD_INT 29
64901: PUSH
64902: LD_INT 30
64904: PUSH
64905: LD_INT 31
64907: PUSH
64908: LD_INT 32
64910: PUSH
64911: LD_INT 33
64913: PUSH
64914: LD_INT 34
64916: PUSH
64917: LD_INT 36
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 101
64959: PUSH
64960: LD_INT 102
64962: PUSH
64963: LD_INT 103
64965: PUSH
64966: LD_INT 104
64968: PUSH
64969: LD_INT 105
64971: PUSH
64972: LD_INT 106
64974: PUSH
64975: LD_INT 107
64977: PUSH
64978: LD_INT 108
64980: PUSH
64981: LD_INT 109
64983: PUSH
64984: LD_INT 110
64986: PUSH
64987: LD_INT 111
64989: PUSH
64990: LD_INT 112
64992: PUSH
64993: LD_INT 113
64995: PUSH
64996: LD_INT 114
64998: PUSH
64999: LD_INT 116
65001: PUSH
65002: LD_INT 117
65004: PUSH
65005: LD_INT 118
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: ST_TO_ADDR
65031: GO 66038
65033: LD_INT 15
65035: DOUBLE
65036: EQUAL
65037: IFTRUE 65041
65039: GO 65265
65041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65042: LD_ADDR_VAR 0 2
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 3
65055: PUSH
65056: LD_INT 4
65058: PUSH
65059: LD_INT 5
65061: PUSH
65062: LD_INT 6
65064: PUSH
65065: LD_INT 7
65067: PUSH
65068: LD_INT 8
65070: PUSH
65071: LD_INT 9
65073: PUSH
65074: LD_INT 10
65076: PUSH
65077: LD_INT 11
65079: PUSH
65080: LD_INT 12
65082: PUSH
65083: LD_INT 13
65085: PUSH
65086: LD_INT 14
65088: PUSH
65089: LD_INT 15
65091: PUSH
65092: LD_INT 16
65094: PUSH
65095: LD_INT 17
65097: PUSH
65098: LD_INT 18
65100: PUSH
65101: LD_INT 19
65103: PUSH
65104: LD_INT 20
65106: PUSH
65107: LD_INT 21
65109: PUSH
65110: LD_INT 22
65112: PUSH
65113: LD_INT 23
65115: PUSH
65116: LD_INT 24
65118: PUSH
65119: LD_INT 25
65121: PUSH
65122: LD_INT 26
65124: PUSH
65125: LD_INT 27
65127: PUSH
65128: LD_INT 28
65130: PUSH
65131: LD_INT 29
65133: PUSH
65134: LD_INT 30
65136: PUSH
65137: LD_INT 31
65139: PUSH
65140: LD_INT 32
65142: PUSH
65143: LD_INT 33
65145: PUSH
65146: LD_INT 34
65148: PUSH
65149: LD_INT 36
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 101
65191: PUSH
65192: LD_INT 102
65194: PUSH
65195: LD_INT 103
65197: PUSH
65198: LD_INT 104
65200: PUSH
65201: LD_INT 105
65203: PUSH
65204: LD_INT 106
65206: PUSH
65207: LD_INT 107
65209: PUSH
65210: LD_INT 108
65212: PUSH
65213: LD_INT 109
65215: PUSH
65216: LD_INT 110
65218: PUSH
65219: LD_INT 111
65221: PUSH
65222: LD_INT 112
65224: PUSH
65225: LD_INT 113
65227: PUSH
65228: LD_INT 114
65230: PUSH
65231: LD_INT 116
65233: PUSH
65234: LD_INT 117
65236: PUSH
65237: LD_INT 118
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: ST_TO_ADDR
65263: GO 66038
65265: LD_INT 16
65267: DOUBLE
65268: EQUAL
65269: IFTRUE 65273
65271: GO 65409
65273: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65274: LD_ADDR_VAR 0 2
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: LD_INT 4
65284: PUSH
65285: LD_INT 5
65287: PUSH
65288: LD_INT 7
65290: PUSH
65291: LD_INT 11
65293: PUSH
65294: LD_INT 12
65296: PUSH
65297: LD_INT 15
65299: PUSH
65300: LD_INT 16
65302: PUSH
65303: LD_INT 20
65305: PUSH
65306: LD_INT 21
65308: PUSH
65309: LD_INT 22
65311: PUSH
65312: LD_INT 23
65314: PUSH
65315: LD_INT 25
65317: PUSH
65318: LD_INT 26
65320: PUSH
65321: LD_INT 30
65323: PUSH
65324: LD_INT 31
65326: PUSH
65327: LD_INT 32
65329: PUSH
65330: LD_INT 33
65332: PUSH
65333: LD_INT 34
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 101
65359: PUSH
65360: LD_INT 102
65362: PUSH
65363: LD_INT 103
65365: PUSH
65366: LD_INT 106
65368: PUSH
65369: LD_INT 108
65371: PUSH
65372: LD_INT 112
65374: PUSH
65375: LD_INT 113
65377: PUSH
65378: LD_INT 114
65380: PUSH
65381: LD_INT 116
65383: PUSH
65384: LD_INT 117
65386: PUSH
65387: LD_INT 118
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: ST_TO_ADDR
65407: GO 66038
65409: LD_INT 17
65411: DOUBLE
65412: EQUAL
65413: IFTRUE 65417
65415: GO 65641
65417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65418: LD_ADDR_VAR 0 2
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: LD_INT 5
65437: PUSH
65438: LD_INT 6
65440: PUSH
65441: LD_INT 7
65443: PUSH
65444: LD_INT 8
65446: PUSH
65447: LD_INT 9
65449: PUSH
65450: LD_INT 10
65452: PUSH
65453: LD_INT 11
65455: PUSH
65456: LD_INT 12
65458: PUSH
65459: LD_INT 13
65461: PUSH
65462: LD_INT 14
65464: PUSH
65465: LD_INT 15
65467: PUSH
65468: LD_INT 16
65470: PUSH
65471: LD_INT 17
65473: PUSH
65474: LD_INT 18
65476: PUSH
65477: LD_INT 19
65479: PUSH
65480: LD_INT 20
65482: PUSH
65483: LD_INT 21
65485: PUSH
65486: LD_INT 22
65488: PUSH
65489: LD_INT 23
65491: PUSH
65492: LD_INT 24
65494: PUSH
65495: LD_INT 25
65497: PUSH
65498: LD_INT 26
65500: PUSH
65501: LD_INT 27
65503: PUSH
65504: LD_INT 28
65506: PUSH
65507: LD_INT 29
65509: PUSH
65510: LD_INT 30
65512: PUSH
65513: LD_INT 31
65515: PUSH
65516: LD_INT 32
65518: PUSH
65519: LD_INT 33
65521: PUSH
65522: LD_INT 34
65524: PUSH
65525: LD_INT 36
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 101
65567: PUSH
65568: LD_INT 102
65570: PUSH
65571: LD_INT 103
65573: PUSH
65574: LD_INT 104
65576: PUSH
65577: LD_INT 105
65579: PUSH
65580: LD_INT 106
65582: PUSH
65583: LD_INT 107
65585: PUSH
65586: LD_INT 108
65588: PUSH
65589: LD_INT 109
65591: PUSH
65592: LD_INT 110
65594: PUSH
65595: LD_INT 111
65597: PUSH
65598: LD_INT 112
65600: PUSH
65601: LD_INT 113
65603: PUSH
65604: LD_INT 114
65606: PUSH
65607: LD_INT 116
65609: PUSH
65610: LD_INT 117
65612: PUSH
65613: LD_INT 118
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: ST_TO_ADDR
65639: GO 66038
65641: LD_INT 18
65643: DOUBLE
65644: EQUAL
65645: IFTRUE 65649
65647: GO 65797
65649: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65650: LD_ADDR_VAR 0 2
65654: PUSH
65655: LD_INT 2
65657: PUSH
65658: LD_INT 4
65660: PUSH
65661: LD_INT 5
65663: PUSH
65664: LD_INT 7
65666: PUSH
65667: LD_INT 11
65669: PUSH
65670: LD_INT 12
65672: PUSH
65673: LD_INT 15
65675: PUSH
65676: LD_INT 16
65678: PUSH
65679: LD_INT 20
65681: PUSH
65682: LD_INT 21
65684: PUSH
65685: LD_INT 22
65687: PUSH
65688: LD_INT 23
65690: PUSH
65691: LD_INT 25
65693: PUSH
65694: LD_INT 26
65696: PUSH
65697: LD_INT 30
65699: PUSH
65700: LD_INT 31
65702: PUSH
65703: LD_INT 32
65705: PUSH
65706: LD_INT 33
65708: PUSH
65709: LD_INT 34
65711: PUSH
65712: LD_INT 35
65714: PUSH
65715: LD_INT 36
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 101
65743: PUSH
65744: LD_INT 102
65746: PUSH
65747: LD_INT 103
65749: PUSH
65750: LD_INT 106
65752: PUSH
65753: LD_INT 108
65755: PUSH
65756: LD_INT 112
65758: PUSH
65759: LD_INT 113
65761: PUSH
65762: LD_INT 114
65764: PUSH
65765: LD_INT 115
65767: PUSH
65768: LD_INT 116
65770: PUSH
65771: LD_INT 117
65773: PUSH
65774: LD_INT 118
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: ST_TO_ADDR
65795: GO 66038
65797: LD_INT 19
65799: DOUBLE
65800: EQUAL
65801: IFTRUE 65805
65803: GO 66037
65805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65806: LD_ADDR_VAR 0 2
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: LD_INT 4
65822: PUSH
65823: LD_INT 5
65825: PUSH
65826: LD_INT 6
65828: PUSH
65829: LD_INT 7
65831: PUSH
65832: LD_INT 8
65834: PUSH
65835: LD_INT 9
65837: PUSH
65838: LD_INT 10
65840: PUSH
65841: LD_INT 11
65843: PUSH
65844: LD_INT 12
65846: PUSH
65847: LD_INT 13
65849: PUSH
65850: LD_INT 14
65852: PUSH
65853: LD_INT 15
65855: PUSH
65856: LD_INT 16
65858: PUSH
65859: LD_INT 17
65861: PUSH
65862: LD_INT 18
65864: PUSH
65865: LD_INT 19
65867: PUSH
65868: LD_INT 20
65870: PUSH
65871: LD_INT 21
65873: PUSH
65874: LD_INT 22
65876: PUSH
65877: LD_INT 23
65879: PUSH
65880: LD_INT 24
65882: PUSH
65883: LD_INT 25
65885: PUSH
65886: LD_INT 26
65888: PUSH
65889: LD_INT 27
65891: PUSH
65892: LD_INT 28
65894: PUSH
65895: LD_INT 29
65897: PUSH
65898: LD_INT 30
65900: PUSH
65901: LD_INT 31
65903: PUSH
65904: LD_INT 32
65906: PUSH
65907: LD_INT 33
65909: PUSH
65910: LD_INT 34
65912: PUSH
65913: LD_INT 35
65915: PUSH
65916: LD_INT 36
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 101
65959: PUSH
65960: LD_INT 102
65962: PUSH
65963: LD_INT 103
65965: PUSH
65966: LD_INT 104
65968: PUSH
65969: LD_INT 105
65971: PUSH
65972: LD_INT 106
65974: PUSH
65975: LD_INT 107
65977: PUSH
65978: LD_INT 108
65980: PUSH
65981: LD_INT 109
65983: PUSH
65984: LD_INT 110
65986: PUSH
65987: LD_INT 111
65989: PUSH
65990: LD_INT 112
65992: PUSH
65993: LD_INT 113
65995: PUSH
65996: LD_INT 114
65998: PUSH
65999: LD_INT 115
66001: PUSH
66002: LD_INT 116
66004: PUSH
66005: LD_INT 117
66007: PUSH
66008: LD_INT 118
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: ST_TO_ADDR
66035: GO 66038
66037: POP
// end else
66038: GO 66269
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66040: LD_ADDR_VAR 0 2
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: LD_INT 3
66053: PUSH
66054: LD_INT 4
66056: PUSH
66057: LD_INT 5
66059: PUSH
66060: LD_INT 6
66062: PUSH
66063: LD_INT 7
66065: PUSH
66066: LD_INT 8
66068: PUSH
66069: LD_INT 9
66071: PUSH
66072: LD_INT 10
66074: PUSH
66075: LD_INT 11
66077: PUSH
66078: LD_INT 12
66080: PUSH
66081: LD_INT 13
66083: PUSH
66084: LD_INT 14
66086: PUSH
66087: LD_INT 15
66089: PUSH
66090: LD_INT 16
66092: PUSH
66093: LD_INT 17
66095: PUSH
66096: LD_INT 18
66098: PUSH
66099: LD_INT 19
66101: PUSH
66102: LD_INT 20
66104: PUSH
66105: LD_INT 21
66107: PUSH
66108: LD_INT 22
66110: PUSH
66111: LD_INT 23
66113: PUSH
66114: LD_INT 24
66116: PUSH
66117: LD_INT 25
66119: PUSH
66120: LD_INT 26
66122: PUSH
66123: LD_INT 27
66125: PUSH
66126: LD_INT 28
66128: PUSH
66129: LD_INT 29
66131: PUSH
66132: LD_INT 30
66134: PUSH
66135: LD_INT 31
66137: PUSH
66138: LD_INT 32
66140: PUSH
66141: LD_INT 33
66143: PUSH
66144: LD_INT 34
66146: PUSH
66147: LD_INT 35
66149: PUSH
66150: LD_INT 36
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 101
66193: PUSH
66194: LD_INT 102
66196: PUSH
66197: LD_INT 103
66199: PUSH
66200: LD_INT 104
66202: PUSH
66203: LD_INT 105
66205: PUSH
66206: LD_INT 106
66208: PUSH
66209: LD_INT 107
66211: PUSH
66212: LD_INT 108
66214: PUSH
66215: LD_INT 109
66217: PUSH
66218: LD_INT 110
66220: PUSH
66221: LD_INT 111
66223: PUSH
66224: LD_INT 112
66226: PUSH
66227: LD_INT 113
66229: PUSH
66230: LD_INT 114
66232: PUSH
66233: LD_INT 115
66235: PUSH
66236: LD_INT 116
66238: PUSH
66239: LD_INT 117
66241: PUSH
66242: LD_INT 118
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: ST_TO_ADDR
// if result then
66269: LD_VAR 0 2
66273: IFFALSE 67059
// begin normal :=  ;
66275: LD_ADDR_VAR 0 5
66279: PUSH
66280: LD_STRING 
66282: ST_TO_ADDR
// hardcore :=  ;
66283: LD_ADDR_VAR 0 6
66287: PUSH
66288: LD_STRING 
66290: ST_TO_ADDR
// active :=  ;
66291: LD_ADDR_VAR 0 7
66295: PUSH
66296: LD_STRING 
66298: ST_TO_ADDR
// for i = 1 to normalCounter do
66299: LD_ADDR_VAR 0 8
66303: PUSH
66304: DOUBLE
66305: LD_INT 1
66307: DEC
66308: ST_TO_ADDR
66309: LD_EXP 44
66313: PUSH
66314: FOR_TO
66315: IFFALSE 66416
// begin tmp := 0 ;
66317: LD_ADDR_VAR 0 3
66321: PUSH
66322: LD_STRING 0
66324: ST_TO_ADDR
// if result [ 1 ] then
66325: LD_VAR 0 2
66329: PUSH
66330: LD_INT 1
66332: ARRAY
66333: IFFALSE 66398
// if result [ 1 ] [ 1 ] = i then
66335: LD_VAR 0 2
66339: PUSH
66340: LD_INT 1
66342: ARRAY
66343: PUSH
66344: LD_INT 1
66346: ARRAY
66347: PUSH
66348: LD_VAR 0 8
66352: EQUAL
66353: IFFALSE 66398
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66355: LD_ADDR_VAR 0 2
66359: PUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: LD_INT 1
66367: PPUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PPUSH
66377: LD_INT 1
66379: PPUSH
66380: CALL_OW 3
66384: PPUSH
66385: CALL_OW 1
66389: ST_TO_ADDR
// tmp := 1 ;
66390: LD_ADDR_VAR 0 3
66394: PUSH
66395: LD_STRING 1
66397: ST_TO_ADDR
// end ; normal := normal & tmp ;
66398: LD_ADDR_VAR 0 5
66402: PUSH
66403: LD_VAR 0 5
66407: PUSH
66408: LD_VAR 0 3
66412: STR
66413: ST_TO_ADDR
// end ;
66414: GO 66314
66416: POP
66417: POP
// for i = 1 to hardcoreCounter do
66418: LD_ADDR_VAR 0 8
66422: PUSH
66423: DOUBLE
66424: LD_INT 1
66426: DEC
66427: ST_TO_ADDR
66428: LD_EXP 45
66432: PUSH
66433: FOR_TO
66434: IFFALSE 66539
// begin tmp := 0 ;
66436: LD_ADDR_VAR 0 3
66440: PUSH
66441: LD_STRING 0
66443: ST_TO_ADDR
// if result [ 2 ] then
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 2
66451: ARRAY
66452: IFFALSE 66521
// if result [ 2 ] [ 1 ] = 100 + i then
66454: LD_VAR 0 2
66458: PUSH
66459: LD_INT 2
66461: ARRAY
66462: PUSH
66463: LD_INT 1
66465: ARRAY
66466: PUSH
66467: LD_INT 100
66469: PUSH
66470: LD_VAR 0 8
66474: PLUS
66475: EQUAL
66476: IFFALSE 66521
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66478: LD_ADDR_VAR 0 2
66482: PUSH
66483: LD_VAR 0 2
66487: PPUSH
66488: LD_INT 2
66490: PPUSH
66491: LD_VAR 0 2
66495: PUSH
66496: LD_INT 2
66498: ARRAY
66499: PPUSH
66500: LD_INT 1
66502: PPUSH
66503: CALL_OW 3
66507: PPUSH
66508: CALL_OW 1
66512: ST_TO_ADDR
// tmp := 1 ;
66513: LD_ADDR_VAR 0 3
66517: PUSH
66518: LD_STRING 1
66520: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66521: LD_ADDR_VAR 0 6
66525: PUSH
66526: LD_VAR 0 6
66530: PUSH
66531: LD_VAR 0 3
66535: STR
66536: ST_TO_ADDR
// end ;
66537: GO 66433
66539: POP
66540: POP
// if isGameLoad then
66541: LD_VAR 0 1
66545: IFFALSE 67020
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66547: LD_ADDR_VAR 0 4
66551: PUSH
66552: LD_EXP 48
66556: PUSH
66557: LD_EXP 47
66561: PUSH
66562: LD_EXP 49
66566: PUSH
66567: LD_EXP 46
66571: PUSH
66572: LD_EXP 50
66576: PUSH
66577: LD_EXP 51
66581: PUSH
66582: LD_EXP 52
66586: PUSH
66587: LD_EXP 53
66591: PUSH
66592: LD_EXP 54
66596: PUSH
66597: LD_EXP 55
66601: PUSH
66602: LD_EXP 56
66606: PUSH
66607: LD_EXP 57
66611: PUSH
66612: LD_EXP 58
66616: PUSH
66617: LD_EXP 59
66621: PUSH
66622: LD_EXP 67
66626: PUSH
66627: LD_EXP 68
66631: PUSH
66632: LD_EXP 69
66636: PUSH
66637: LD_EXP 70
66641: PUSH
66642: LD_EXP 72
66646: PUSH
66647: LD_EXP 73
66651: PUSH
66652: LD_EXP 74
66656: PUSH
66657: LD_EXP 77
66661: PUSH
66662: LD_EXP 79
66666: PUSH
66667: LD_EXP 80
66671: PUSH
66672: LD_EXP 81
66676: PUSH
66677: LD_EXP 83
66681: PUSH
66682: LD_EXP 84
66686: PUSH
66687: LD_EXP 87
66691: PUSH
66692: LD_EXP 88
66696: PUSH
66697: LD_EXP 89
66701: PUSH
66702: LD_EXP 90
66706: PUSH
66707: LD_EXP 91
66711: PUSH
66712: LD_EXP 92
66716: PUSH
66717: LD_EXP 93
66721: PUSH
66722: LD_EXP 94
66726: PUSH
66727: LD_EXP 95
66731: PUSH
66732: LD_EXP 60
66736: PUSH
66737: LD_EXP 61
66741: PUSH
66742: LD_EXP 64
66746: PUSH
66747: LD_EXP 65
66751: PUSH
66752: LD_EXP 66
66756: PUSH
66757: LD_EXP 62
66761: PUSH
66762: LD_EXP 63
66766: PUSH
66767: LD_EXP 71
66771: PUSH
66772: LD_EXP 75
66776: PUSH
66777: LD_EXP 76
66781: PUSH
66782: LD_EXP 78
66786: PUSH
66787: LD_EXP 82
66791: PUSH
66792: LD_EXP 85
66796: PUSH
66797: LD_EXP 86
66801: PUSH
66802: LD_EXP 96
66806: PUSH
66807: LD_EXP 97
66811: PUSH
66812: LD_EXP 98
66816: PUSH
66817: LD_EXP 99
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: ST_TO_ADDR
// tmp :=  ;
66878: LD_ADDR_VAR 0 3
66882: PUSH
66883: LD_STRING 
66885: ST_TO_ADDR
// for i = 1 to normalCounter do
66886: LD_ADDR_VAR 0 8
66890: PUSH
66891: DOUBLE
66892: LD_INT 1
66894: DEC
66895: ST_TO_ADDR
66896: LD_EXP 44
66900: PUSH
66901: FOR_TO
66902: IFFALSE 66938
// begin if flags [ i ] then
66904: LD_VAR 0 4
66908: PUSH
66909: LD_VAR 0 8
66913: ARRAY
66914: IFFALSE 66936
// tmp := tmp & i & ; ;
66916: LD_ADDR_VAR 0 3
66920: PUSH
66921: LD_VAR 0 3
66925: PUSH
66926: LD_VAR 0 8
66930: STR
66931: PUSH
66932: LD_STRING ;
66934: STR
66935: ST_TO_ADDR
// end ;
66936: GO 66901
66938: POP
66939: POP
// for i = 1 to hardcoreCounter do
66940: LD_ADDR_VAR 0 8
66944: PUSH
66945: DOUBLE
66946: LD_INT 1
66948: DEC
66949: ST_TO_ADDR
66950: LD_EXP 45
66954: PUSH
66955: FOR_TO
66956: IFFALSE 67002
// begin if flags [ normalCounter + i ] then
66958: LD_VAR 0 4
66962: PUSH
66963: LD_EXP 44
66967: PUSH
66968: LD_VAR 0 8
66972: PLUS
66973: ARRAY
66974: IFFALSE 67000
// tmp := tmp & ( 100 + i ) & ; ;
66976: LD_ADDR_VAR 0 3
66980: PUSH
66981: LD_VAR 0 3
66985: PUSH
66986: LD_INT 100
66988: PUSH
66989: LD_VAR 0 8
66993: PLUS
66994: STR
66995: PUSH
66996: LD_STRING ;
66998: STR
66999: ST_TO_ADDR
// end ;
67000: GO 66955
67002: POP
67003: POP
// if tmp then
67004: LD_VAR 0 3
67008: IFFALSE 67020
// active := tmp ;
67010: LD_ADDR_VAR 0 7
67014: PUSH
67015: LD_VAR 0 3
67019: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67020: LD_STRING getStreamItemsFromMission("
67022: PUSH
67023: LD_VAR 0 5
67027: STR
67028: PUSH
67029: LD_STRING ","
67031: STR
67032: PUSH
67033: LD_VAR 0 6
67037: STR
67038: PUSH
67039: LD_STRING ","
67041: STR
67042: PUSH
67043: LD_VAR 0 7
67047: STR
67048: PUSH
67049: LD_STRING ")
67051: STR
67052: PPUSH
67053: CALL_OW 559
// end else
67057: GO 67066
// ToLua ( getStreamItemsFromMission("","","") ) ;
67059: LD_STRING getStreamItemsFromMission("","","")
67061: PPUSH
67062: CALL_OW 559
// end ;
67066: LD_VAR 0 2
67070: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67071: LD_EXP 43
67075: PUSH
67076: LD_EXP 48
67080: AND
67081: IFFALSE 67205
67083: GO 67085
67085: DISABLE
67086: LD_INT 0
67088: PPUSH
67089: PPUSH
// begin enable ;
67090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67091: LD_ADDR_VAR 0 2
67095: PUSH
67096: LD_INT 22
67098: PUSH
67099: LD_OWVAR 2
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: PUSH
67111: LD_INT 34
67113: PUSH
67114: LD_INT 7
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 34
67123: PUSH
67124: LD_INT 45
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 34
67133: PUSH
67134: LD_INT 28
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 34
67143: PUSH
67144: LD_INT 47
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PPUSH
67162: CALL_OW 69
67166: ST_TO_ADDR
// if not tmp then
67167: LD_VAR 0 2
67171: NOT
67172: IFFALSE 67176
// exit ;
67174: GO 67205
// for i in tmp do
67176: LD_ADDR_VAR 0 1
67180: PUSH
67181: LD_VAR 0 2
67185: PUSH
67186: FOR_IN
67187: IFFALSE 67203
// begin SetLives ( i , 0 ) ;
67189: LD_VAR 0 1
67193: PPUSH
67194: LD_INT 0
67196: PPUSH
67197: CALL_OW 234
// end ;
67201: GO 67186
67203: POP
67204: POP
// end ;
67205: PPOPN 2
67207: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67208: LD_EXP 43
67212: PUSH
67213: LD_EXP 49
67217: AND
67218: IFFALSE 67302
67220: GO 67222
67222: DISABLE
67223: LD_INT 0
67225: PPUSH
67226: PPUSH
// begin enable ;
67227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67228: LD_ADDR_VAR 0 2
67232: PUSH
67233: LD_INT 22
67235: PUSH
67236: LD_OWVAR 2
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 32
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PPUSH
67259: CALL_OW 69
67263: ST_TO_ADDR
// if not tmp then
67264: LD_VAR 0 2
67268: NOT
67269: IFFALSE 67273
// exit ;
67271: GO 67302
// for i in tmp do
67273: LD_ADDR_VAR 0 1
67277: PUSH
67278: LD_VAR 0 2
67282: PUSH
67283: FOR_IN
67284: IFFALSE 67300
// begin SetLives ( i , 0 ) ;
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_INT 0
67293: PPUSH
67294: CALL_OW 234
// end ;
67298: GO 67283
67300: POP
67301: POP
// end ;
67302: PPOPN 2
67304: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67305: LD_EXP 43
67309: PUSH
67310: LD_EXP 46
67314: AND
67315: IFFALSE 67408
67317: GO 67319
67319: DISABLE
67320: LD_INT 0
67322: PPUSH
// begin enable ;
67323: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67324: LD_ADDR_VAR 0 1
67328: PUSH
67329: LD_INT 22
67331: PUSH
67332: LD_OWVAR 2
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 25
67346: PUSH
67347: LD_INT 5
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 25
67356: PUSH
67357: LD_INT 9
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 25
67366: PUSH
67367: LD_INT 8
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PPUSH
67384: CALL_OW 69
67388: PUSH
67389: FOR_IN
67390: IFFALSE 67406
// begin SetClass ( i , 1 ) ;
67392: LD_VAR 0 1
67396: PPUSH
67397: LD_INT 1
67399: PPUSH
67400: CALL_OW 336
// end ;
67404: GO 67389
67406: POP
67407: POP
// end ;
67408: PPOPN 1
67410: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67411: LD_EXP 43
67415: PUSH
67416: LD_EXP 47
67420: AND
67421: PUSH
67422: LD_OWVAR 65
67426: PUSH
67427: LD_INT 7
67429: LESS
67430: AND
67431: IFFALSE 67445
67433: GO 67435
67435: DISABLE
// begin enable ;
67436: ENABLE
// game_speed := 7 ;
67437: LD_ADDR_OWVAR 65
67441: PUSH
67442: LD_INT 7
67444: ST_TO_ADDR
// end ;
67445: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67446: LD_EXP 43
67450: PUSH
67451: LD_EXP 50
67455: AND
67456: IFFALSE 67658
67458: GO 67460
67460: DISABLE
67461: LD_INT 0
67463: PPUSH
67464: PPUSH
67465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67466: LD_ADDR_VAR 0 3
67470: PUSH
67471: LD_INT 81
67473: PUSH
67474: LD_OWVAR 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 21
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PPUSH
67497: CALL_OW 69
67501: ST_TO_ADDR
// if not tmp then
67502: LD_VAR 0 3
67506: NOT
67507: IFFALSE 67511
// exit ;
67509: GO 67658
// if tmp > 5 then
67511: LD_VAR 0 3
67515: PUSH
67516: LD_INT 5
67518: GREATER
67519: IFFALSE 67531
// k := 5 else
67521: LD_ADDR_VAR 0 2
67525: PUSH
67526: LD_INT 5
67528: ST_TO_ADDR
67529: GO 67541
// k := tmp ;
67531: LD_ADDR_VAR 0 2
67535: PUSH
67536: LD_VAR 0 3
67540: ST_TO_ADDR
// for i := 1 to k do
67541: LD_ADDR_VAR 0 1
67545: PUSH
67546: DOUBLE
67547: LD_INT 1
67549: DEC
67550: ST_TO_ADDR
67551: LD_VAR 0 2
67555: PUSH
67556: FOR_TO
67557: IFFALSE 67656
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67559: LD_VAR 0 3
67563: PUSH
67564: LD_VAR 0 1
67568: ARRAY
67569: PPUSH
67570: LD_VAR 0 1
67574: PUSH
67575: LD_INT 4
67577: MOD
67578: PUSH
67579: LD_INT 1
67581: PLUS
67582: PPUSH
67583: CALL_OW 259
67587: PUSH
67588: LD_INT 10
67590: LESS
67591: IFFALSE 67654
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67593: LD_VAR 0 3
67597: PUSH
67598: LD_VAR 0 1
67602: ARRAY
67603: PPUSH
67604: LD_VAR 0 1
67608: PUSH
67609: LD_INT 4
67611: MOD
67612: PUSH
67613: LD_INT 1
67615: PLUS
67616: PPUSH
67617: LD_VAR 0 3
67621: PUSH
67622: LD_VAR 0 1
67626: ARRAY
67627: PPUSH
67628: LD_VAR 0 1
67632: PUSH
67633: LD_INT 4
67635: MOD
67636: PUSH
67637: LD_INT 1
67639: PLUS
67640: PPUSH
67641: CALL_OW 259
67645: PUSH
67646: LD_INT 1
67648: PLUS
67649: PPUSH
67650: CALL_OW 237
67654: GO 67556
67656: POP
67657: POP
// end ;
67658: PPOPN 3
67660: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67661: LD_EXP 43
67665: PUSH
67666: LD_EXP 51
67670: AND
67671: IFFALSE 67691
67673: GO 67675
67675: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67676: LD_INT 4
67678: PPUSH
67679: LD_OWVAR 2
67683: PPUSH
67684: LD_INT 0
67686: PPUSH
67687: CALL_OW 324
67691: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67692: LD_EXP 43
67696: PUSH
67697: LD_EXP 80
67701: AND
67702: IFFALSE 67722
67704: GO 67706
67706: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67707: LD_INT 19
67709: PPUSH
67710: LD_OWVAR 2
67714: PPUSH
67715: LD_INT 0
67717: PPUSH
67718: CALL_OW 324
67722: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67723: LD_EXP 43
67727: PUSH
67728: LD_EXP 52
67732: AND
67733: IFFALSE 67835
67735: GO 67737
67737: DISABLE
67738: LD_INT 0
67740: PPUSH
67741: PPUSH
// begin enable ;
67742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67743: LD_ADDR_VAR 0 2
67747: PUSH
67748: LD_INT 22
67750: PUSH
67751: LD_OWVAR 2
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: LD_INT 34
67765: PUSH
67766: LD_INT 11
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 34
67775: PUSH
67776: LD_INT 30
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PPUSH
67792: CALL_OW 69
67796: ST_TO_ADDR
// if not tmp then
67797: LD_VAR 0 2
67801: NOT
67802: IFFALSE 67806
// exit ;
67804: GO 67835
// for i in tmp do
67806: LD_ADDR_VAR 0 1
67810: PUSH
67811: LD_VAR 0 2
67815: PUSH
67816: FOR_IN
67817: IFFALSE 67833
// begin SetLives ( i , 0 ) ;
67819: LD_VAR 0 1
67823: PPUSH
67824: LD_INT 0
67826: PPUSH
67827: CALL_OW 234
// end ;
67831: GO 67816
67833: POP
67834: POP
// end ;
67835: PPOPN 2
67837: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67838: LD_EXP 43
67842: PUSH
67843: LD_EXP 53
67847: AND
67848: IFFALSE 67868
67850: GO 67852
67852: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67853: LD_INT 32
67855: PPUSH
67856: LD_OWVAR 2
67860: PPUSH
67861: LD_INT 0
67863: PPUSH
67864: CALL_OW 324
67868: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67869: LD_EXP 43
67873: PUSH
67874: LD_EXP 54
67878: AND
67879: IFFALSE 68060
67881: GO 67883
67883: DISABLE
67884: LD_INT 0
67886: PPUSH
67887: PPUSH
67888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67889: LD_ADDR_VAR 0 2
67893: PUSH
67894: LD_INT 22
67896: PUSH
67897: LD_OWVAR 2
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 33
67908: PUSH
67909: LD_INT 3
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PPUSH
67920: CALL_OW 69
67924: ST_TO_ADDR
// if not tmp then
67925: LD_VAR 0 2
67929: NOT
67930: IFFALSE 67934
// exit ;
67932: GO 68060
// side := 0 ;
67934: LD_ADDR_VAR 0 3
67938: PUSH
67939: LD_INT 0
67941: ST_TO_ADDR
// for i := 1 to 8 do
67942: LD_ADDR_VAR 0 1
67946: PUSH
67947: DOUBLE
67948: LD_INT 1
67950: DEC
67951: ST_TO_ADDR
67952: LD_INT 8
67954: PUSH
67955: FOR_TO
67956: IFFALSE 68004
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67958: LD_OWVAR 2
67962: PUSH
67963: LD_VAR 0 1
67967: NONEQUAL
67968: PUSH
67969: LD_OWVAR 2
67973: PPUSH
67974: LD_VAR 0 1
67978: PPUSH
67979: CALL_OW 81
67983: PUSH
67984: LD_INT 2
67986: EQUAL
67987: AND
67988: IFFALSE 68002
// begin side := i ;
67990: LD_ADDR_VAR 0 3
67994: PUSH
67995: LD_VAR 0 1
67999: ST_TO_ADDR
// break ;
68000: GO 68004
// end ;
68002: GO 67955
68004: POP
68005: POP
// if not side then
68006: LD_VAR 0 3
68010: NOT
68011: IFFALSE 68015
// exit ;
68013: GO 68060
// for i := 1 to tmp do
68015: LD_ADDR_VAR 0 1
68019: PUSH
68020: DOUBLE
68021: LD_INT 1
68023: DEC
68024: ST_TO_ADDR
68025: LD_VAR 0 2
68029: PUSH
68030: FOR_TO
68031: IFFALSE 68058
// if Prob ( 60 ) then
68033: LD_INT 60
68035: PPUSH
68036: CALL_OW 13
68040: IFFALSE 68056
// SetSide ( i , side ) ;
68042: LD_VAR 0 1
68046: PPUSH
68047: LD_VAR 0 3
68051: PPUSH
68052: CALL_OW 235
68056: GO 68030
68058: POP
68059: POP
// end ;
68060: PPOPN 3
68062: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68063: LD_EXP 43
68067: PUSH
68068: LD_EXP 56
68072: AND
68073: IFFALSE 68192
68075: GO 68077
68077: DISABLE
68078: LD_INT 0
68080: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68081: LD_ADDR_VAR 0 1
68085: PUSH
68086: LD_INT 22
68088: PUSH
68089: LD_OWVAR 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 21
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 23
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: PPUSH
68130: CALL_OW 69
68134: PUSH
68135: FOR_IN
68136: IFFALSE 68190
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68138: LD_VAR 0 1
68142: PPUSH
68143: CALL_OW 257
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 2
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: LD_INT 4
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: IN
68166: IFFALSE 68188
// SetClass ( un , rand ( 1 , 4 ) ) ;
68168: LD_VAR 0 1
68172: PPUSH
68173: LD_INT 1
68175: PPUSH
68176: LD_INT 4
68178: PPUSH
68179: CALL_OW 12
68183: PPUSH
68184: CALL_OW 336
68188: GO 68135
68190: POP
68191: POP
// end ;
68192: PPOPN 1
68194: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68195: LD_EXP 43
68199: PUSH
68200: LD_EXP 55
68204: AND
68205: IFFALSE 68284
68207: GO 68209
68209: DISABLE
68210: LD_INT 0
68212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68213: LD_ADDR_VAR 0 1
68217: PUSH
68218: LD_INT 22
68220: PUSH
68221: LD_OWVAR 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 21
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PPUSH
68244: CALL_OW 69
68248: ST_TO_ADDR
// if not tmp then
68249: LD_VAR 0 1
68253: NOT
68254: IFFALSE 68258
// exit ;
68256: GO 68284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 1
68265: PPUSH
68266: LD_VAR 0 1
68270: PPUSH
68271: CALL_OW 12
68275: ARRAY
68276: PPUSH
68277: LD_INT 100
68279: PPUSH
68280: CALL_OW 234
// end ;
68284: PPOPN 1
68286: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68287: LD_EXP 43
68291: PUSH
68292: LD_EXP 57
68296: AND
68297: IFFALSE 68395
68299: GO 68301
68301: DISABLE
68302: LD_INT 0
68304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68305: LD_ADDR_VAR 0 1
68309: PUSH
68310: LD_INT 22
68312: PUSH
68313: LD_OWVAR 2
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 21
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PPUSH
68336: CALL_OW 69
68340: ST_TO_ADDR
// if not tmp then
68341: LD_VAR 0 1
68345: NOT
68346: IFFALSE 68350
// exit ;
68348: GO 68395
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68350: LD_VAR 0 1
68354: PUSH
68355: LD_INT 1
68357: PPUSH
68358: LD_VAR 0 1
68362: PPUSH
68363: CALL_OW 12
68367: ARRAY
68368: PPUSH
68369: LD_INT 1
68371: PPUSH
68372: LD_INT 4
68374: PPUSH
68375: CALL_OW 12
68379: PPUSH
68380: LD_INT 3000
68382: PPUSH
68383: LD_INT 9000
68385: PPUSH
68386: CALL_OW 12
68390: PPUSH
68391: CALL_OW 492
// end ;
68395: PPOPN 1
68397: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68398: LD_EXP 43
68402: PUSH
68403: LD_EXP 58
68407: AND
68408: IFFALSE 68428
68410: GO 68412
68412: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68413: LD_INT 1
68415: PPUSH
68416: LD_OWVAR 2
68420: PPUSH
68421: LD_INT 0
68423: PPUSH
68424: CALL_OW 324
68428: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68429: LD_EXP 43
68433: PUSH
68434: LD_EXP 59
68438: AND
68439: IFFALSE 68522
68441: GO 68443
68443: DISABLE
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68448: LD_ADDR_VAR 0 2
68452: PUSH
68453: LD_INT 22
68455: PUSH
68456: LD_OWVAR 2
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 21
68467: PUSH
68468: LD_INT 3
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PPUSH
68479: CALL_OW 69
68483: ST_TO_ADDR
// if not tmp then
68484: LD_VAR 0 2
68488: NOT
68489: IFFALSE 68493
// exit ;
68491: GO 68522
// for i in tmp do
68493: LD_ADDR_VAR 0 1
68497: PUSH
68498: LD_VAR 0 2
68502: PUSH
68503: FOR_IN
68504: IFFALSE 68520
// SetBLevel ( i , 10 ) ;
68506: LD_VAR 0 1
68510: PPUSH
68511: LD_INT 10
68513: PPUSH
68514: CALL_OW 241
68518: GO 68503
68520: POP
68521: POP
// end ;
68522: PPOPN 2
68524: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68525: LD_EXP 43
68529: PUSH
68530: LD_EXP 60
68534: AND
68535: IFFALSE 68646
68537: GO 68539
68539: DISABLE
68540: LD_INT 0
68542: PPUSH
68543: PPUSH
68544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68545: LD_ADDR_VAR 0 3
68549: PUSH
68550: LD_INT 22
68552: PUSH
68553: LD_OWVAR 2
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 25
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PPUSH
68576: CALL_OW 69
68580: ST_TO_ADDR
// if not tmp then
68581: LD_VAR 0 3
68585: NOT
68586: IFFALSE 68590
// exit ;
68588: GO 68646
// un := tmp [ rand ( 1 , tmp ) ] ;
68590: LD_ADDR_VAR 0 2
68594: PUSH
68595: LD_VAR 0 3
68599: PUSH
68600: LD_INT 1
68602: PPUSH
68603: LD_VAR 0 3
68607: PPUSH
68608: CALL_OW 12
68612: ARRAY
68613: ST_TO_ADDR
// if Crawls ( un ) then
68614: LD_VAR 0 2
68618: PPUSH
68619: CALL_OW 318
68623: IFFALSE 68634
// ComWalk ( un ) ;
68625: LD_VAR 0 2
68629: PPUSH
68630: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68634: LD_VAR 0 2
68638: PPUSH
68639: LD_INT 5
68641: PPUSH
68642: CALL_OW 336
// end ;
68646: PPOPN 3
68648: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68649: LD_EXP 43
68653: PUSH
68654: LD_EXP 61
68658: AND
68659: PUSH
68660: LD_OWVAR 67
68664: PUSH
68665: LD_INT 4
68667: LESS
68668: AND
68669: IFFALSE 68688
68671: GO 68673
68673: DISABLE
// begin Difficulty := Difficulty + 1 ;
68674: LD_ADDR_OWVAR 67
68678: PUSH
68679: LD_OWVAR 67
68683: PUSH
68684: LD_INT 1
68686: PLUS
68687: ST_TO_ADDR
// end ;
68688: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68689: LD_EXP 43
68693: PUSH
68694: LD_EXP 62
68698: AND
68699: IFFALSE 68802
68701: GO 68703
68703: DISABLE
68704: LD_INT 0
68706: PPUSH
// begin for i := 1 to 5 do
68707: LD_ADDR_VAR 0 1
68711: PUSH
68712: DOUBLE
68713: LD_INT 1
68715: DEC
68716: ST_TO_ADDR
68717: LD_INT 5
68719: PUSH
68720: FOR_TO
68721: IFFALSE 68800
// begin uc_nation := nation_nature ;
68723: LD_ADDR_OWVAR 21
68727: PUSH
68728: LD_INT 0
68730: ST_TO_ADDR
// uc_side := 0 ;
68731: LD_ADDR_OWVAR 20
68735: PUSH
68736: LD_INT 0
68738: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68739: LD_ADDR_OWVAR 29
68743: PUSH
68744: LD_INT 12
68746: PUSH
68747: LD_INT 12
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: ST_TO_ADDR
// hc_agressivity := 20 ;
68754: LD_ADDR_OWVAR 35
68758: PUSH
68759: LD_INT 20
68761: ST_TO_ADDR
// hc_class := class_tiger ;
68762: LD_ADDR_OWVAR 28
68766: PUSH
68767: LD_INT 14
68769: ST_TO_ADDR
// hc_gallery :=  ;
68770: LD_ADDR_OWVAR 33
68774: PUSH
68775: LD_STRING 
68777: ST_TO_ADDR
// hc_name :=  ;
68778: LD_ADDR_OWVAR 26
68782: PUSH
68783: LD_STRING 
68785: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68786: CALL_OW 44
68790: PPUSH
68791: LD_INT 0
68793: PPUSH
68794: CALL_OW 51
// end ;
68798: GO 68720
68800: POP
68801: POP
// end ;
68802: PPOPN 1
68804: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68805: LD_EXP 43
68809: PUSH
68810: LD_EXP 63
68814: AND
68815: IFFALSE 68824
68817: GO 68819
68819: DISABLE
// StreamSibBomb ;
68820: CALL 68825 0 0
68824: END
// export function StreamSibBomb ; var i , x , y ; begin
68825: LD_INT 0
68827: PPUSH
68828: PPUSH
68829: PPUSH
68830: PPUSH
// result := false ;
68831: LD_ADDR_VAR 0 1
68835: PUSH
68836: LD_INT 0
68838: ST_TO_ADDR
// for i := 1 to 16 do
68839: LD_ADDR_VAR 0 2
68843: PUSH
68844: DOUBLE
68845: LD_INT 1
68847: DEC
68848: ST_TO_ADDR
68849: LD_INT 16
68851: PUSH
68852: FOR_TO
68853: IFFALSE 69052
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68855: LD_ADDR_VAR 0 3
68859: PUSH
68860: LD_INT 10
68862: PUSH
68863: LD_INT 20
68865: PUSH
68866: LD_INT 30
68868: PUSH
68869: LD_INT 40
68871: PUSH
68872: LD_INT 50
68874: PUSH
68875: LD_INT 60
68877: PUSH
68878: LD_INT 70
68880: PUSH
68881: LD_INT 80
68883: PUSH
68884: LD_INT 90
68886: PUSH
68887: LD_INT 100
68889: PUSH
68890: LD_INT 110
68892: PUSH
68893: LD_INT 120
68895: PUSH
68896: LD_INT 130
68898: PUSH
68899: LD_INT 140
68901: PUSH
68902: LD_INT 150
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: PPUSH
68925: LD_INT 15
68927: PPUSH
68928: CALL_OW 12
68932: ARRAY
68933: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68934: LD_ADDR_VAR 0 4
68938: PUSH
68939: LD_INT 10
68941: PUSH
68942: LD_INT 20
68944: PUSH
68945: LD_INT 30
68947: PUSH
68948: LD_INT 40
68950: PUSH
68951: LD_INT 50
68953: PUSH
68954: LD_INT 60
68956: PUSH
68957: LD_INT 70
68959: PUSH
68960: LD_INT 80
68962: PUSH
68963: LD_INT 90
68965: PUSH
68966: LD_INT 100
68968: PUSH
68969: LD_INT 110
68971: PUSH
68972: LD_INT 120
68974: PUSH
68975: LD_INT 130
68977: PUSH
68978: LD_INT 140
68980: PUSH
68981: LD_INT 150
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 1
69003: PPUSH
69004: LD_INT 15
69006: PPUSH
69007: CALL_OW 12
69011: ARRAY
69012: ST_TO_ADDR
// if ValidHex ( x , y ) then
69013: LD_VAR 0 3
69017: PPUSH
69018: LD_VAR 0 4
69022: PPUSH
69023: CALL_OW 488
69027: IFFALSE 69050
// begin result := [ x , y ] ;
69029: LD_ADDR_VAR 0 1
69033: PUSH
69034: LD_VAR 0 3
69038: PUSH
69039: LD_VAR 0 4
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: ST_TO_ADDR
// break ;
69048: GO 69052
// end ; end ;
69050: GO 68852
69052: POP
69053: POP
// if result then
69054: LD_VAR 0 1
69058: IFFALSE 69118
// begin ToLua ( playSibBomb() ) ;
69060: LD_STRING playSibBomb()
69062: PPUSH
69063: CALL_OW 559
// wait ( 0 0$14 ) ;
69067: LD_INT 490
69069: PPUSH
69070: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69074: LD_VAR 0 1
69078: PUSH
69079: LD_INT 1
69081: ARRAY
69082: PPUSH
69083: LD_VAR 0 1
69087: PUSH
69088: LD_INT 2
69090: ARRAY
69091: PPUSH
69092: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69096: LD_VAR 0 1
69100: PUSH
69101: LD_INT 1
69103: ARRAY
69104: PPUSH
69105: LD_VAR 0 1
69109: PUSH
69110: LD_INT 2
69112: ARRAY
69113: PPUSH
69114: CALL_OW 429
// end ; end ;
69118: LD_VAR 0 1
69122: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69123: LD_EXP 43
69127: PUSH
69128: LD_EXP 65
69132: AND
69133: IFFALSE 69145
69135: GO 69137
69137: DISABLE
// YouLost (  ) ;
69138: LD_STRING 
69140: PPUSH
69141: CALL_OW 104
69145: END
// every 0 0$1 trigger StreamModeActive and sFog do
69146: LD_EXP 43
69150: PUSH
69151: LD_EXP 64
69155: AND
69156: IFFALSE 69170
69158: GO 69160
69160: DISABLE
// FogOff ( your_side ) ;
69161: LD_OWVAR 2
69165: PPUSH
69166: CALL_OW 344
69170: END
// every 0 0$1 trigger StreamModeActive and sSun do
69171: LD_EXP 43
69175: PUSH
69176: LD_EXP 66
69180: AND
69181: IFFALSE 69209
69183: GO 69185
69185: DISABLE
// begin solar_recharge_percent := 0 ;
69186: LD_ADDR_OWVAR 79
69190: PUSH
69191: LD_INT 0
69193: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69194: LD_INT 10500
69196: PPUSH
69197: CALL_OW 67
// solar_recharge_percent := 100 ;
69201: LD_ADDR_OWVAR 79
69205: PUSH
69206: LD_INT 100
69208: ST_TO_ADDR
// end ;
69209: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69210: LD_EXP 43
69214: PUSH
69215: LD_EXP 67
69219: AND
69220: IFFALSE 69459
69222: GO 69224
69224: DISABLE
69225: LD_INT 0
69227: PPUSH
69228: PPUSH
69229: PPUSH
// begin tmp := [ ] ;
69230: LD_ADDR_VAR 0 3
69234: PUSH
69235: EMPTY
69236: ST_TO_ADDR
// for i := 1 to 6 do
69237: LD_ADDR_VAR 0 1
69241: PUSH
69242: DOUBLE
69243: LD_INT 1
69245: DEC
69246: ST_TO_ADDR
69247: LD_INT 6
69249: PUSH
69250: FOR_TO
69251: IFFALSE 69356
// begin uc_nation := nation_nature ;
69253: LD_ADDR_OWVAR 21
69257: PUSH
69258: LD_INT 0
69260: ST_TO_ADDR
// uc_side := 0 ;
69261: LD_ADDR_OWVAR 20
69265: PUSH
69266: LD_INT 0
69268: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69269: LD_ADDR_OWVAR 29
69273: PUSH
69274: LD_INT 12
69276: PUSH
69277: LD_INT 12
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: ST_TO_ADDR
// hc_agressivity := 20 ;
69284: LD_ADDR_OWVAR 35
69288: PUSH
69289: LD_INT 20
69291: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69292: LD_ADDR_OWVAR 28
69296: PUSH
69297: LD_INT 17
69299: ST_TO_ADDR
// hc_gallery :=  ;
69300: LD_ADDR_OWVAR 33
69304: PUSH
69305: LD_STRING 
69307: ST_TO_ADDR
// hc_name :=  ;
69308: LD_ADDR_OWVAR 26
69312: PUSH
69313: LD_STRING 
69315: ST_TO_ADDR
// un := CreateHuman ;
69316: LD_ADDR_VAR 0 2
69320: PUSH
69321: CALL_OW 44
69325: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69326: LD_VAR 0 2
69330: PPUSH
69331: LD_INT 1
69333: PPUSH
69334: CALL_OW 51
// tmp := tmp ^ un ;
69338: LD_ADDR_VAR 0 3
69342: PUSH
69343: LD_VAR 0 3
69347: PUSH
69348: LD_VAR 0 2
69352: ADD
69353: ST_TO_ADDR
// end ;
69354: GO 69250
69356: POP
69357: POP
// repeat wait ( 0 0$1 ) ;
69358: LD_INT 35
69360: PPUSH
69361: CALL_OW 67
// for un in tmp do
69365: LD_ADDR_VAR 0 2
69369: PUSH
69370: LD_VAR 0 3
69374: PUSH
69375: FOR_IN
69376: IFFALSE 69450
// begin if IsDead ( un ) then
69378: LD_VAR 0 2
69382: PPUSH
69383: CALL_OW 301
69387: IFFALSE 69407
// begin tmp := tmp diff un ;
69389: LD_ADDR_VAR 0 3
69393: PUSH
69394: LD_VAR 0 3
69398: PUSH
69399: LD_VAR 0 2
69403: DIFF
69404: ST_TO_ADDR
// continue ;
69405: GO 69375
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69407: LD_VAR 0 2
69411: PPUSH
69412: LD_INT 3
69414: PUSH
69415: LD_INT 22
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PPUSH
69429: CALL_OW 69
69433: PPUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: CALL_OW 74
69443: PPUSH
69444: CALL_OW 115
// end ;
69448: GO 69375
69450: POP
69451: POP
// until not tmp ;
69452: LD_VAR 0 3
69456: NOT
69457: IFFALSE 69358
// end ;
69459: PPOPN 3
69461: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69462: LD_EXP 43
69466: PUSH
69467: LD_EXP 68
69471: AND
69472: IFFALSE 69526
69474: GO 69476
69476: DISABLE
// begin ToLua ( displayTroll(); ) ;
69477: LD_STRING displayTroll();
69479: PPUSH
69480: CALL_OW 559
// wait ( 3 3$00 ) ;
69484: LD_INT 6300
69486: PPUSH
69487: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69491: LD_STRING hideTroll();
69493: PPUSH
69494: CALL_OW 559
// wait ( 1 1$00 ) ;
69498: LD_INT 2100
69500: PPUSH
69501: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69505: LD_STRING displayTroll();
69507: PPUSH
69508: CALL_OW 559
// wait ( 1 1$00 ) ;
69512: LD_INT 2100
69514: PPUSH
69515: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69519: LD_STRING hideTroll();
69521: PPUSH
69522: CALL_OW 559
// end ;
69526: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69527: LD_EXP 43
69531: PUSH
69532: LD_EXP 69
69536: AND
69537: IFFALSE 69600
69539: GO 69541
69541: DISABLE
69542: LD_INT 0
69544: PPUSH
// begin p := 0 ;
69545: LD_ADDR_VAR 0 1
69549: PUSH
69550: LD_INT 0
69552: ST_TO_ADDR
// repeat game_speed := 1 ;
69553: LD_ADDR_OWVAR 65
69557: PUSH
69558: LD_INT 1
69560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69561: LD_INT 35
69563: PPUSH
69564: CALL_OW 67
// p := p + 1 ;
69568: LD_ADDR_VAR 0 1
69572: PUSH
69573: LD_VAR 0 1
69577: PUSH
69578: LD_INT 1
69580: PLUS
69581: ST_TO_ADDR
// until p >= 60 ;
69582: LD_VAR 0 1
69586: PUSH
69587: LD_INT 60
69589: GREATEREQUAL
69590: IFFALSE 69553
// game_speed := 4 ;
69592: LD_ADDR_OWVAR 65
69596: PUSH
69597: LD_INT 4
69599: ST_TO_ADDR
// end ;
69600: PPOPN 1
69602: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69603: LD_EXP 43
69607: PUSH
69608: LD_EXP 70
69612: AND
69613: IFFALSE 69759
69615: GO 69617
69617: DISABLE
69618: LD_INT 0
69620: PPUSH
69621: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69622: LD_ADDR_VAR 0 1
69626: PUSH
69627: LD_INT 22
69629: PUSH
69630: LD_OWVAR 2
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: LD_INT 30
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 30
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: LIST
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PPUSH
69671: CALL_OW 69
69675: ST_TO_ADDR
// if not depot then
69676: LD_VAR 0 1
69680: NOT
69681: IFFALSE 69685
// exit ;
69683: GO 69759
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69685: LD_ADDR_VAR 0 2
69689: PUSH
69690: LD_VAR 0 1
69694: PUSH
69695: LD_INT 1
69697: PPUSH
69698: LD_VAR 0 1
69702: PPUSH
69703: CALL_OW 12
69707: ARRAY
69708: PPUSH
69709: CALL_OW 274
69713: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69714: LD_VAR 0 2
69718: PPUSH
69719: LD_INT 1
69721: PPUSH
69722: LD_INT 0
69724: PPUSH
69725: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69729: LD_VAR 0 2
69733: PPUSH
69734: LD_INT 2
69736: PPUSH
69737: LD_INT 0
69739: PPUSH
69740: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69744: LD_VAR 0 2
69748: PPUSH
69749: LD_INT 3
69751: PPUSH
69752: LD_INT 0
69754: PPUSH
69755: CALL_OW 277
// end ;
69759: PPOPN 2
69761: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69762: LD_EXP 43
69766: PUSH
69767: LD_EXP 71
69771: AND
69772: IFFALSE 69869
69774: GO 69776
69776: DISABLE
69777: LD_INT 0
69779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69780: LD_ADDR_VAR 0 1
69784: PUSH
69785: LD_INT 22
69787: PUSH
69788: LD_OWVAR 2
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 21
69799: PUSH
69800: LD_INT 1
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 3
69809: PUSH
69810: LD_INT 23
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: LIST
69828: PPUSH
69829: CALL_OW 69
69833: ST_TO_ADDR
// if not tmp then
69834: LD_VAR 0 1
69838: NOT
69839: IFFALSE 69843
// exit ;
69841: GO 69869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69843: LD_VAR 0 1
69847: PUSH
69848: LD_INT 1
69850: PPUSH
69851: LD_VAR 0 1
69855: PPUSH
69856: CALL_OW 12
69860: ARRAY
69861: PPUSH
69862: LD_INT 200
69864: PPUSH
69865: CALL_OW 234
// end ;
69869: PPOPN 1
69871: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69872: LD_EXP 43
69876: PUSH
69877: LD_EXP 72
69881: AND
69882: IFFALSE 69961
69884: GO 69886
69886: DISABLE
69887: LD_INT 0
69889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69890: LD_ADDR_VAR 0 1
69894: PUSH
69895: LD_INT 22
69897: PUSH
69898: LD_OWVAR 2
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 21
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PPUSH
69921: CALL_OW 69
69925: ST_TO_ADDR
// if not tmp then
69926: LD_VAR 0 1
69930: NOT
69931: IFFALSE 69935
// exit ;
69933: GO 69961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69935: LD_VAR 0 1
69939: PUSH
69940: LD_INT 1
69942: PPUSH
69943: LD_VAR 0 1
69947: PPUSH
69948: CALL_OW 12
69952: ARRAY
69953: PPUSH
69954: LD_INT 60
69956: PPUSH
69957: CALL_OW 234
// end ;
69961: PPOPN 1
69963: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69964: LD_EXP 43
69968: PUSH
69969: LD_EXP 73
69973: AND
69974: IFFALSE 70073
69976: GO 69978
69978: DISABLE
69979: LD_INT 0
69981: PPUSH
69982: PPUSH
// begin enable ;
69983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69984: LD_ADDR_VAR 0 1
69988: PUSH
69989: LD_INT 22
69991: PUSH
69992: LD_OWVAR 2
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 61
70003: PUSH
70004: EMPTY
70005: LIST
70006: PUSH
70007: LD_INT 33
70009: PUSH
70010: LD_INT 2
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: LIST
70021: PPUSH
70022: CALL_OW 69
70026: ST_TO_ADDR
// if not tmp then
70027: LD_VAR 0 1
70031: NOT
70032: IFFALSE 70036
// exit ;
70034: GO 70073
// for i in tmp do
70036: LD_ADDR_VAR 0 2
70040: PUSH
70041: LD_VAR 0 1
70045: PUSH
70046: FOR_IN
70047: IFFALSE 70071
// if IsControledBy ( i ) then
70049: LD_VAR 0 2
70053: PPUSH
70054: CALL_OW 312
70058: IFFALSE 70069
// ComUnlink ( i ) ;
70060: LD_VAR 0 2
70064: PPUSH
70065: CALL_OW 136
70069: GO 70046
70071: POP
70072: POP
// end ;
70073: PPOPN 2
70075: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70076: LD_EXP 43
70080: PUSH
70081: LD_EXP 74
70085: AND
70086: IFFALSE 70226
70088: GO 70090
70090: DISABLE
70091: LD_INT 0
70093: PPUSH
70094: PPUSH
// begin ToLua ( displayPowell(); ) ;
70095: LD_STRING displayPowell();
70097: PPUSH
70098: CALL_OW 559
// uc_side := 0 ;
70102: LD_ADDR_OWVAR 20
70106: PUSH
70107: LD_INT 0
70109: ST_TO_ADDR
// uc_nation := 2 ;
70110: LD_ADDR_OWVAR 21
70114: PUSH
70115: LD_INT 2
70117: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70118: LD_ADDR_OWVAR 37
70122: PUSH
70123: LD_INT 14
70125: ST_TO_ADDR
// vc_engine := engine_siberite ;
70126: LD_ADDR_OWVAR 39
70130: PUSH
70131: LD_INT 3
70133: ST_TO_ADDR
// vc_control := control_apeman ;
70134: LD_ADDR_OWVAR 38
70138: PUSH
70139: LD_INT 5
70141: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70142: LD_ADDR_OWVAR 40
70146: PUSH
70147: LD_INT 29
70149: ST_TO_ADDR
// un := CreateVehicle ;
70150: LD_ADDR_VAR 0 2
70154: PUSH
70155: CALL_OW 45
70159: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70160: LD_VAR 0 2
70164: PPUSH
70165: LD_INT 1
70167: PPUSH
70168: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70172: LD_INT 35
70174: PPUSH
70175: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70179: LD_VAR 0 2
70183: PPUSH
70184: LD_INT 22
70186: PUSH
70187: LD_OWVAR 2
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PPUSH
70196: CALL_OW 69
70200: PPUSH
70201: LD_VAR 0 2
70205: PPUSH
70206: CALL_OW 74
70210: PPUSH
70211: CALL_OW 115
// until IsDead ( un ) ;
70215: LD_VAR 0 2
70219: PPUSH
70220: CALL_OW 301
70224: IFFALSE 70172
// end ;
70226: PPOPN 2
70228: END
// every 0 0$1 trigger StreamModeActive and sStu do
70229: LD_EXP 43
70233: PUSH
70234: LD_EXP 82
70238: AND
70239: IFFALSE 70255
70241: GO 70243
70243: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70244: LD_STRING displayStucuk();
70246: PPUSH
70247: CALL_OW 559
// ResetFog ;
70251: CALL_OW 335
// end ;
70255: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70256: LD_EXP 43
70260: PUSH
70261: LD_EXP 75
70265: AND
70266: IFFALSE 70407
70268: GO 70270
70270: DISABLE
70271: LD_INT 0
70273: PPUSH
70274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70275: LD_ADDR_VAR 0 2
70279: PUSH
70280: LD_INT 22
70282: PUSH
70283: LD_OWVAR 2
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 21
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PPUSH
70306: CALL_OW 69
70310: ST_TO_ADDR
// if not tmp then
70311: LD_VAR 0 2
70315: NOT
70316: IFFALSE 70320
// exit ;
70318: GO 70407
// un := tmp [ rand ( 1 , tmp ) ] ;
70320: LD_ADDR_VAR 0 1
70324: PUSH
70325: LD_VAR 0 2
70329: PUSH
70330: LD_INT 1
70332: PPUSH
70333: LD_VAR 0 2
70337: PPUSH
70338: CALL_OW 12
70342: ARRAY
70343: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70344: LD_VAR 0 1
70348: PPUSH
70349: LD_INT 0
70351: PPUSH
70352: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70356: LD_VAR 0 1
70360: PPUSH
70361: LD_OWVAR 3
70365: PUSH
70366: LD_VAR 0 1
70370: DIFF
70371: PPUSH
70372: LD_VAR 0 1
70376: PPUSH
70377: CALL_OW 74
70381: PPUSH
70382: CALL_OW 115
// wait ( 0 0$20 ) ;
70386: LD_INT 700
70388: PPUSH
70389: CALL_OW 67
// SetSide ( un , your_side ) ;
70393: LD_VAR 0 1
70397: PPUSH
70398: LD_OWVAR 2
70402: PPUSH
70403: CALL_OW 235
// end ;
70407: PPOPN 2
70409: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70410: LD_EXP 43
70414: PUSH
70415: LD_EXP 76
70419: AND
70420: IFFALSE 70526
70422: GO 70424
70424: DISABLE
70425: LD_INT 0
70427: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70428: LD_ADDR_VAR 0 1
70432: PUSH
70433: LD_INT 22
70435: PUSH
70436: LD_OWVAR 2
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 2
70447: PUSH
70448: LD_INT 30
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 30
70460: PUSH
70461: LD_INT 1
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: LIST
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PPUSH
70477: CALL_OW 69
70481: ST_TO_ADDR
// if not depot then
70482: LD_VAR 0 1
70486: NOT
70487: IFFALSE 70491
// exit ;
70489: GO 70526
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70491: LD_VAR 0 1
70495: PUSH
70496: LD_INT 1
70498: ARRAY
70499: PPUSH
70500: CALL_OW 250
70504: PPUSH
70505: LD_VAR 0 1
70509: PUSH
70510: LD_INT 1
70512: ARRAY
70513: PPUSH
70514: CALL_OW 251
70518: PPUSH
70519: LD_INT 70
70521: PPUSH
70522: CALL_OW 495
// end ;
70526: PPOPN 1
70528: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70529: LD_EXP 43
70533: PUSH
70534: LD_EXP 77
70538: AND
70539: IFFALSE 70750
70541: GO 70543
70543: DISABLE
70544: LD_INT 0
70546: PPUSH
70547: PPUSH
70548: PPUSH
70549: PPUSH
70550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70551: LD_ADDR_VAR 0 5
70555: PUSH
70556: LD_INT 22
70558: PUSH
70559: LD_OWVAR 2
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 21
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PPUSH
70582: CALL_OW 69
70586: ST_TO_ADDR
// if not tmp then
70587: LD_VAR 0 5
70591: NOT
70592: IFFALSE 70596
// exit ;
70594: GO 70750
// for i in tmp do
70596: LD_ADDR_VAR 0 1
70600: PUSH
70601: LD_VAR 0 5
70605: PUSH
70606: FOR_IN
70607: IFFALSE 70748
// begin d := rand ( 0 , 5 ) ;
70609: LD_ADDR_VAR 0 4
70613: PUSH
70614: LD_INT 0
70616: PPUSH
70617: LD_INT 5
70619: PPUSH
70620: CALL_OW 12
70624: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70625: LD_ADDR_VAR 0 2
70629: PUSH
70630: LD_VAR 0 1
70634: PPUSH
70635: CALL_OW 250
70639: PPUSH
70640: LD_VAR 0 4
70644: PPUSH
70645: LD_INT 3
70647: PPUSH
70648: LD_INT 12
70650: PPUSH
70651: CALL_OW 12
70655: PPUSH
70656: CALL_OW 272
70660: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70661: LD_ADDR_VAR 0 3
70665: PUSH
70666: LD_VAR 0 1
70670: PPUSH
70671: CALL_OW 251
70675: PPUSH
70676: LD_VAR 0 4
70680: PPUSH
70681: LD_INT 3
70683: PPUSH
70684: LD_INT 12
70686: PPUSH
70687: CALL_OW 12
70691: PPUSH
70692: CALL_OW 273
70696: ST_TO_ADDR
// if ValidHex ( x , y ) then
70697: LD_VAR 0 2
70701: PPUSH
70702: LD_VAR 0 3
70706: PPUSH
70707: CALL_OW 488
70711: IFFALSE 70746
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70713: LD_VAR 0 1
70717: PPUSH
70718: LD_VAR 0 2
70722: PPUSH
70723: LD_VAR 0 3
70727: PPUSH
70728: LD_INT 3
70730: PPUSH
70731: LD_INT 6
70733: PPUSH
70734: CALL_OW 12
70738: PPUSH
70739: LD_INT 1
70741: PPUSH
70742: CALL_OW 483
// end ;
70746: GO 70606
70748: POP
70749: POP
// end ;
70750: PPOPN 5
70752: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70753: LD_EXP 43
70757: PUSH
70758: LD_EXP 78
70762: AND
70763: IFFALSE 70857
70765: GO 70767
70767: DISABLE
70768: LD_INT 0
70770: PPUSH
70771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70772: LD_ADDR_VAR 0 2
70776: PUSH
70777: LD_INT 22
70779: PUSH
70780: LD_OWVAR 2
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 32
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 21
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: LIST
70813: PPUSH
70814: CALL_OW 69
70818: ST_TO_ADDR
// if not tmp then
70819: LD_VAR 0 2
70823: NOT
70824: IFFALSE 70828
// exit ;
70826: GO 70857
// for i in tmp do
70828: LD_ADDR_VAR 0 1
70832: PUSH
70833: LD_VAR 0 2
70837: PUSH
70838: FOR_IN
70839: IFFALSE 70855
// SetFuel ( i , 0 ) ;
70841: LD_VAR 0 1
70845: PPUSH
70846: LD_INT 0
70848: PPUSH
70849: CALL_OW 240
70853: GO 70838
70855: POP
70856: POP
// end ;
70857: PPOPN 2
70859: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70860: LD_EXP 43
70864: PUSH
70865: LD_EXP 79
70869: AND
70870: IFFALSE 70936
70872: GO 70874
70874: DISABLE
70875: LD_INT 0
70877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70878: LD_ADDR_VAR 0 1
70882: PUSH
70883: LD_INT 22
70885: PUSH
70886: LD_OWVAR 2
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 30
70897: PUSH
70898: LD_INT 29
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PPUSH
70909: CALL_OW 69
70913: ST_TO_ADDR
// if not tmp then
70914: LD_VAR 0 1
70918: NOT
70919: IFFALSE 70923
// exit ;
70921: GO 70936
// DestroyUnit ( tmp [ 1 ] ) ;
70923: LD_VAR 0 1
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PPUSH
70932: CALL_OW 65
// end ;
70936: PPOPN 1
70938: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70939: LD_EXP 43
70943: PUSH
70944: LD_EXP 81
70948: AND
70949: IFFALSE 71078
70951: GO 70953
70953: DISABLE
70954: LD_INT 0
70956: PPUSH
// begin uc_side := 0 ;
70957: LD_ADDR_OWVAR 20
70961: PUSH
70962: LD_INT 0
70964: ST_TO_ADDR
// uc_nation := nation_arabian ;
70965: LD_ADDR_OWVAR 21
70969: PUSH
70970: LD_INT 2
70972: ST_TO_ADDR
// hc_gallery :=  ;
70973: LD_ADDR_OWVAR 33
70977: PUSH
70978: LD_STRING 
70980: ST_TO_ADDR
// hc_name :=  ;
70981: LD_ADDR_OWVAR 26
70985: PUSH
70986: LD_STRING 
70988: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70989: LD_INT 1
70991: PPUSH
70992: LD_INT 11
70994: PPUSH
70995: LD_INT 10
70997: PPUSH
70998: CALL_OW 380
// un := CreateHuman ;
71002: LD_ADDR_VAR 0 1
71006: PUSH
71007: CALL_OW 44
71011: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71012: LD_VAR 0 1
71016: PPUSH
71017: LD_INT 1
71019: PPUSH
71020: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71024: LD_INT 35
71026: PPUSH
71027: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71031: LD_VAR 0 1
71035: PPUSH
71036: LD_INT 22
71038: PUSH
71039: LD_OWVAR 2
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PPUSH
71048: CALL_OW 69
71052: PPUSH
71053: LD_VAR 0 1
71057: PPUSH
71058: CALL_OW 74
71062: PPUSH
71063: CALL_OW 115
// until IsDead ( un ) ;
71067: LD_VAR 0 1
71071: PPUSH
71072: CALL_OW 301
71076: IFFALSE 71024
// end ;
71078: PPOPN 1
71080: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71081: LD_EXP 43
71085: PUSH
71086: LD_EXP 83
71090: AND
71091: IFFALSE 71103
71093: GO 71095
71095: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71096: LD_STRING earthquake(getX(game), 0, 32)
71098: PPUSH
71099: CALL_OW 559
71103: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71104: LD_EXP 43
71108: PUSH
71109: LD_EXP 84
71113: AND
71114: IFFALSE 71205
71116: GO 71118
71118: DISABLE
71119: LD_INT 0
71121: PPUSH
// begin enable ;
71122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71123: LD_ADDR_VAR 0 1
71127: PUSH
71128: LD_INT 22
71130: PUSH
71131: LD_OWVAR 2
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 21
71142: PUSH
71143: LD_INT 2
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 33
71152: PUSH
71153: LD_INT 3
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: LIST
71164: PPUSH
71165: CALL_OW 69
71169: ST_TO_ADDR
// if not tmp then
71170: LD_VAR 0 1
71174: NOT
71175: IFFALSE 71179
// exit ;
71177: GO 71205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71179: LD_VAR 0 1
71183: PUSH
71184: LD_INT 1
71186: PPUSH
71187: LD_VAR 0 1
71191: PPUSH
71192: CALL_OW 12
71196: ARRAY
71197: PPUSH
71198: LD_INT 1
71200: PPUSH
71201: CALL_OW 234
// end ;
71205: PPOPN 1
71207: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71208: LD_EXP 43
71212: PUSH
71213: LD_EXP 85
71217: AND
71218: IFFALSE 71359
71220: GO 71222
71222: DISABLE
71223: LD_INT 0
71225: PPUSH
71226: PPUSH
71227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71228: LD_ADDR_VAR 0 3
71232: PUSH
71233: LD_INT 22
71235: PUSH
71236: LD_OWVAR 2
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 25
71247: PUSH
71248: LD_INT 1
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PPUSH
71259: CALL_OW 69
71263: ST_TO_ADDR
// if not tmp then
71264: LD_VAR 0 3
71268: NOT
71269: IFFALSE 71273
// exit ;
71271: GO 71359
// un := tmp [ rand ( 1 , tmp ) ] ;
71273: LD_ADDR_VAR 0 2
71277: PUSH
71278: LD_VAR 0 3
71282: PUSH
71283: LD_INT 1
71285: PPUSH
71286: LD_VAR 0 3
71290: PPUSH
71291: CALL_OW 12
71295: ARRAY
71296: ST_TO_ADDR
// if Crawls ( un ) then
71297: LD_VAR 0 2
71301: PPUSH
71302: CALL_OW 318
71306: IFFALSE 71317
// ComWalk ( un ) ;
71308: LD_VAR 0 2
71312: PPUSH
71313: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71317: LD_VAR 0 2
71321: PPUSH
71322: LD_INT 9
71324: PPUSH
71325: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71329: LD_INT 28
71331: PPUSH
71332: LD_OWVAR 2
71336: PPUSH
71337: LD_INT 2
71339: PPUSH
71340: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71344: LD_INT 29
71346: PPUSH
71347: LD_OWVAR 2
71351: PPUSH
71352: LD_INT 2
71354: PPUSH
71355: CALL_OW 322
// end ;
71359: PPOPN 3
71361: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71362: LD_EXP 43
71366: PUSH
71367: LD_EXP 86
71371: AND
71372: IFFALSE 71483
71374: GO 71376
71376: DISABLE
71377: LD_INT 0
71379: PPUSH
71380: PPUSH
71381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71382: LD_ADDR_VAR 0 3
71386: PUSH
71387: LD_INT 22
71389: PUSH
71390: LD_OWVAR 2
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 25
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PPUSH
71413: CALL_OW 69
71417: ST_TO_ADDR
// if not tmp then
71418: LD_VAR 0 3
71422: NOT
71423: IFFALSE 71427
// exit ;
71425: GO 71483
// un := tmp [ rand ( 1 , tmp ) ] ;
71427: LD_ADDR_VAR 0 2
71431: PUSH
71432: LD_VAR 0 3
71436: PUSH
71437: LD_INT 1
71439: PPUSH
71440: LD_VAR 0 3
71444: PPUSH
71445: CALL_OW 12
71449: ARRAY
71450: ST_TO_ADDR
// if Crawls ( un ) then
71451: LD_VAR 0 2
71455: PPUSH
71456: CALL_OW 318
71460: IFFALSE 71471
// ComWalk ( un ) ;
71462: LD_VAR 0 2
71466: PPUSH
71467: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71471: LD_VAR 0 2
71475: PPUSH
71476: LD_INT 8
71478: PPUSH
71479: CALL_OW 336
// end ;
71483: PPOPN 3
71485: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71486: LD_EXP 43
71490: PUSH
71491: LD_EXP 87
71495: AND
71496: IFFALSE 71640
71498: GO 71500
71500: DISABLE
71501: LD_INT 0
71503: PPUSH
71504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71505: LD_ADDR_VAR 0 2
71509: PUSH
71510: LD_INT 22
71512: PUSH
71513: LD_OWVAR 2
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 21
71524: PUSH
71525: LD_INT 2
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: LD_INT 34
71537: PUSH
71538: LD_INT 12
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 34
71547: PUSH
71548: LD_INT 51
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 34
71557: PUSH
71558: LD_INT 32
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: LIST
71575: PPUSH
71576: CALL_OW 69
71580: ST_TO_ADDR
// if not tmp then
71581: LD_VAR 0 2
71585: NOT
71586: IFFALSE 71590
// exit ;
71588: GO 71640
// for i in tmp do
71590: LD_ADDR_VAR 0 1
71594: PUSH
71595: LD_VAR 0 2
71599: PUSH
71600: FOR_IN
71601: IFFALSE 71638
// if GetCargo ( i , mat_artifact ) = 0 then
71603: LD_VAR 0 1
71607: PPUSH
71608: LD_INT 4
71610: PPUSH
71611: CALL_OW 289
71615: PUSH
71616: LD_INT 0
71618: EQUAL
71619: IFFALSE 71636
// SetCargo ( i , mat_siberit , 100 ) ;
71621: LD_VAR 0 1
71625: PPUSH
71626: LD_INT 3
71628: PPUSH
71629: LD_INT 100
71631: PPUSH
71632: CALL_OW 290
71636: GO 71600
71638: POP
71639: POP
// end ;
71640: PPOPN 2
71642: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71643: LD_EXP 43
71647: PUSH
71648: LD_EXP 88
71652: AND
71653: IFFALSE 71836
71655: GO 71657
71657: DISABLE
71658: LD_INT 0
71660: PPUSH
71661: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71662: LD_ADDR_VAR 0 2
71666: PUSH
71667: LD_INT 22
71669: PUSH
71670: LD_OWVAR 2
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PPUSH
71679: CALL_OW 69
71683: ST_TO_ADDR
// if not tmp then
71684: LD_VAR 0 2
71688: NOT
71689: IFFALSE 71693
// exit ;
71691: GO 71836
// for i := 1 to 2 do
71693: LD_ADDR_VAR 0 1
71697: PUSH
71698: DOUBLE
71699: LD_INT 1
71701: DEC
71702: ST_TO_ADDR
71703: LD_INT 2
71705: PUSH
71706: FOR_TO
71707: IFFALSE 71834
// begin uc_side := your_side ;
71709: LD_ADDR_OWVAR 20
71713: PUSH
71714: LD_OWVAR 2
71718: ST_TO_ADDR
// uc_nation := nation_american ;
71719: LD_ADDR_OWVAR 21
71723: PUSH
71724: LD_INT 1
71726: ST_TO_ADDR
// vc_chassis := us_morphling ;
71727: LD_ADDR_OWVAR 37
71731: PUSH
71732: LD_INT 5
71734: ST_TO_ADDR
// vc_engine := engine_siberite ;
71735: LD_ADDR_OWVAR 39
71739: PUSH
71740: LD_INT 3
71742: ST_TO_ADDR
// vc_control := control_computer ;
71743: LD_ADDR_OWVAR 38
71747: PUSH
71748: LD_INT 3
71750: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71751: LD_ADDR_OWVAR 40
71755: PUSH
71756: LD_INT 10
71758: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71759: LD_VAR 0 2
71763: PUSH
71764: LD_INT 1
71766: ARRAY
71767: PPUSH
71768: CALL_OW 310
71772: NOT
71773: IFFALSE 71820
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71775: CALL_OW 45
71779: PPUSH
71780: LD_VAR 0 2
71784: PUSH
71785: LD_INT 1
71787: ARRAY
71788: PPUSH
71789: CALL_OW 250
71793: PPUSH
71794: LD_VAR 0 2
71798: PUSH
71799: LD_INT 1
71801: ARRAY
71802: PPUSH
71803: CALL_OW 251
71807: PPUSH
71808: LD_INT 12
71810: PPUSH
71811: LD_INT 1
71813: PPUSH
71814: CALL_OW 50
71818: GO 71832
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71820: CALL_OW 45
71824: PPUSH
71825: LD_INT 1
71827: PPUSH
71828: CALL_OW 51
// end ;
71832: GO 71706
71834: POP
71835: POP
// end ;
71836: PPOPN 2
71838: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71839: LD_EXP 43
71843: PUSH
71844: LD_EXP 89
71848: AND
71849: IFFALSE 72071
71851: GO 71853
71853: DISABLE
71854: LD_INT 0
71856: PPUSH
71857: PPUSH
71858: PPUSH
71859: PPUSH
71860: PPUSH
71861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71862: LD_ADDR_VAR 0 6
71866: PUSH
71867: LD_INT 22
71869: PUSH
71870: LD_OWVAR 2
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 21
71881: PUSH
71882: LD_INT 1
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 3
71891: PUSH
71892: LD_INT 23
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: LIST
71910: PPUSH
71911: CALL_OW 69
71915: ST_TO_ADDR
// if not tmp then
71916: LD_VAR 0 6
71920: NOT
71921: IFFALSE 71925
// exit ;
71923: GO 72071
// s1 := rand ( 1 , 4 ) ;
71925: LD_ADDR_VAR 0 2
71929: PUSH
71930: LD_INT 1
71932: PPUSH
71933: LD_INT 4
71935: PPUSH
71936: CALL_OW 12
71940: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71941: LD_ADDR_VAR 0 4
71945: PUSH
71946: LD_VAR 0 6
71950: PUSH
71951: LD_INT 1
71953: ARRAY
71954: PPUSH
71955: LD_VAR 0 2
71959: PPUSH
71960: CALL_OW 259
71964: ST_TO_ADDR
// if s1 = 1 then
71965: LD_VAR 0 2
71969: PUSH
71970: LD_INT 1
71972: EQUAL
71973: IFFALSE 71993
// s2 := rand ( 2 , 4 ) else
71975: LD_ADDR_VAR 0 3
71979: PUSH
71980: LD_INT 2
71982: PPUSH
71983: LD_INT 4
71985: PPUSH
71986: CALL_OW 12
71990: ST_TO_ADDR
71991: GO 72001
// s2 := 1 ;
71993: LD_ADDR_VAR 0 3
71997: PUSH
71998: LD_INT 1
72000: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72001: LD_ADDR_VAR 0 5
72005: PUSH
72006: LD_VAR 0 6
72010: PUSH
72011: LD_INT 1
72013: ARRAY
72014: PPUSH
72015: LD_VAR 0 3
72019: PPUSH
72020: CALL_OW 259
72024: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72025: LD_VAR 0 6
72029: PUSH
72030: LD_INT 1
72032: ARRAY
72033: PPUSH
72034: LD_VAR 0 2
72038: PPUSH
72039: LD_VAR 0 5
72043: PPUSH
72044: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72048: LD_VAR 0 6
72052: PUSH
72053: LD_INT 1
72055: ARRAY
72056: PPUSH
72057: LD_VAR 0 3
72061: PPUSH
72062: LD_VAR 0 4
72066: PPUSH
72067: CALL_OW 237
// end ;
72071: PPOPN 6
72073: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72074: LD_EXP 43
72078: PUSH
72079: LD_EXP 90
72083: AND
72084: IFFALSE 72163
72086: GO 72088
72088: DISABLE
72089: LD_INT 0
72091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72092: LD_ADDR_VAR 0 1
72096: PUSH
72097: LD_INT 22
72099: PUSH
72100: LD_OWVAR 2
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 30
72111: PUSH
72112: LD_INT 3
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PPUSH
72123: CALL_OW 69
72127: ST_TO_ADDR
// if not tmp then
72128: LD_VAR 0 1
72132: NOT
72133: IFFALSE 72137
// exit ;
72135: GO 72163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72137: LD_VAR 0 1
72141: PUSH
72142: LD_INT 1
72144: PPUSH
72145: LD_VAR 0 1
72149: PPUSH
72150: CALL_OW 12
72154: ARRAY
72155: PPUSH
72156: LD_INT 1
72158: PPUSH
72159: CALL_OW 234
// end ;
72163: PPOPN 1
72165: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72166: LD_EXP 43
72170: PUSH
72171: LD_EXP 91
72175: AND
72176: IFFALSE 72288
72178: GO 72180
72180: DISABLE
72181: LD_INT 0
72183: PPUSH
72184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72185: LD_ADDR_VAR 0 2
72189: PUSH
72190: LD_INT 22
72192: PUSH
72193: LD_OWVAR 2
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 2
72204: PUSH
72205: LD_INT 30
72207: PUSH
72208: LD_INT 27
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 30
72217: PUSH
72218: LD_INT 26
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 30
72227: PUSH
72228: LD_INT 28
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PPUSH
72245: CALL_OW 69
72249: ST_TO_ADDR
// if not tmp then
72250: LD_VAR 0 2
72254: NOT
72255: IFFALSE 72259
// exit ;
72257: GO 72288
// for i in tmp do
72259: LD_ADDR_VAR 0 1
72263: PUSH
72264: LD_VAR 0 2
72268: PUSH
72269: FOR_IN
72270: IFFALSE 72286
// SetLives ( i , 1 ) ;
72272: LD_VAR 0 1
72276: PPUSH
72277: LD_INT 1
72279: PPUSH
72280: CALL_OW 234
72284: GO 72269
72286: POP
72287: POP
// end ;
72288: PPOPN 2
72290: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72291: LD_EXP 43
72295: PUSH
72296: LD_EXP 92
72300: AND
72301: IFFALSE 72588
72303: GO 72305
72305: DISABLE
72306: LD_INT 0
72308: PPUSH
72309: PPUSH
72310: PPUSH
// begin i := rand ( 1 , 7 ) ;
72311: LD_ADDR_VAR 0 1
72315: PUSH
72316: LD_INT 1
72318: PPUSH
72319: LD_INT 7
72321: PPUSH
72322: CALL_OW 12
72326: ST_TO_ADDR
// case i of 1 :
72327: LD_VAR 0 1
72331: PUSH
72332: LD_INT 1
72334: DOUBLE
72335: EQUAL
72336: IFTRUE 72340
72338: GO 72350
72340: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72341: LD_STRING earthquake(getX(game), 0, 32)
72343: PPUSH
72344: CALL_OW 559
72348: GO 72588
72350: LD_INT 2
72352: DOUBLE
72353: EQUAL
72354: IFTRUE 72358
72356: GO 72372
72358: POP
// begin ToLua ( displayStucuk(); ) ;
72359: LD_STRING displayStucuk();
72361: PPUSH
72362: CALL_OW 559
// ResetFog ;
72366: CALL_OW 335
// end ; 3 :
72370: GO 72588
72372: LD_INT 3
72374: DOUBLE
72375: EQUAL
72376: IFTRUE 72380
72378: GO 72484
72380: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72381: LD_ADDR_VAR 0 2
72385: PUSH
72386: LD_INT 22
72388: PUSH
72389: LD_OWVAR 2
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 25
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PPUSH
72412: CALL_OW 69
72416: ST_TO_ADDR
// if not tmp then
72417: LD_VAR 0 2
72421: NOT
72422: IFFALSE 72426
// exit ;
72424: GO 72588
// un := tmp [ rand ( 1 , tmp ) ] ;
72426: LD_ADDR_VAR 0 3
72430: PUSH
72431: LD_VAR 0 2
72435: PUSH
72436: LD_INT 1
72438: PPUSH
72439: LD_VAR 0 2
72443: PPUSH
72444: CALL_OW 12
72448: ARRAY
72449: ST_TO_ADDR
// if Crawls ( un ) then
72450: LD_VAR 0 3
72454: PPUSH
72455: CALL_OW 318
72459: IFFALSE 72470
// ComWalk ( un ) ;
72461: LD_VAR 0 3
72465: PPUSH
72466: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72470: LD_VAR 0 3
72474: PPUSH
72475: LD_INT 8
72477: PPUSH
72478: CALL_OW 336
// end ; 4 :
72482: GO 72588
72484: LD_INT 4
72486: DOUBLE
72487: EQUAL
72488: IFTRUE 72492
72490: GO 72566
72492: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72493: LD_ADDR_VAR 0 2
72497: PUSH
72498: LD_INT 22
72500: PUSH
72501: LD_OWVAR 2
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 30
72512: PUSH
72513: LD_INT 29
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PPUSH
72524: CALL_OW 69
72528: ST_TO_ADDR
// if not tmp then
72529: LD_VAR 0 2
72533: NOT
72534: IFFALSE 72538
// exit ;
72536: GO 72588
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72538: LD_VAR 0 2
72542: PUSH
72543: LD_INT 1
72545: ARRAY
72546: PPUSH
72547: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72551: LD_VAR 0 2
72555: PUSH
72556: LD_INT 1
72558: ARRAY
72559: PPUSH
72560: CALL_OW 65
// end ; 5 .. 7 :
72564: GO 72588
72566: LD_INT 5
72568: DOUBLE
72569: GREATEREQUAL
72570: IFFALSE 72578
72572: LD_INT 7
72574: DOUBLE
72575: LESSEQUAL
72576: IFTRUE 72580
72578: GO 72587
72580: POP
// StreamSibBomb ; end ;
72581: CALL 68825 0 0
72585: GO 72588
72587: POP
// end ;
72588: PPOPN 3
72590: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72591: LD_EXP 43
72595: PUSH
72596: LD_EXP 93
72600: AND
72601: IFFALSE 72757
72603: GO 72605
72605: DISABLE
72606: LD_INT 0
72608: PPUSH
72609: PPUSH
72610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72611: LD_ADDR_VAR 0 2
72615: PUSH
72616: LD_INT 81
72618: PUSH
72619: LD_OWVAR 2
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 2
72630: PUSH
72631: LD_INT 21
72633: PUSH
72634: LD_INT 1
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 21
72643: PUSH
72644: LD_INT 2
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PPUSH
72660: CALL_OW 69
72664: ST_TO_ADDR
// if not tmp then
72665: LD_VAR 0 2
72669: NOT
72670: IFFALSE 72674
// exit ;
72672: GO 72757
// p := 0 ;
72674: LD_ADDR_VAR 0 3
72678: PUSH
72679: LD_INT 0
72681: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72682: LD_INT 35
72684: PPUSH
72685: CALL_OW 67
// p := p + 1 ;
72689: LD_ADDR_VAR 0 3
72693: PUSH
72694: LD_VAR 0 3
72698: PUSH
72699: LD_INT 1
72701: PLUS
72702: ST_TO_ADDR
// for i in tmp do
72703: LD_ADDR_VAR 0 1
72707: PUSH
72708: LD_VAR 0 2
72712: PUSH
72713: FOR_IN
72714: IFFALSE 72745
// if GetLives ( i ) < 1000 then
72716: LD_VAR 0 1
72720: PPUSH
72721: CALL_OW 256
72725: PUSH
72726: LD_INT 1000
72728: LESS
72729: IFFALSE 72743
// SetLives ( i , 1000 ) ;
72731: LD_VAR 0 1
72735: PPUSH
72736: LD_INT 1000
72738: PPUSH
72739: CALL_OW 234
72743: GO 72713
72745: POP
72746: POP
// until p > 20 ;
72747: LD_VAR 0 3
72751: PUSH
72752: LD_INT 20
72754: GREATER
72755: IFFALSE 72682
// end ;
72757: PPOPN 3
72759: END
// every 0 0$1 trigger StreamModeActive and sTime do
72760: LD_EXP 43
72764: PUSH
72765: LD_EXP 94
72769: AND
72770: IFFALSE 72805
72772: GO 72774
72774: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72775: LD_INT 28
72777: PPUSH
72778: LD_OWVAR 2
72782: PPUSH
72783: LD_INT 2
72785: PPUSH
72786: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72790: LD_INT 30
72792: PPUSH
72793: LD_OWVAR 2
72797: PPUSH
72798: LD_INT 2
72800: PPUSH
72801: CALL_OW 322
// end ;
72805: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72806: LD_EXP 43
72810: PUSH
72811: LD_EXP 95
72815: AND
72816: IFFALSE 72937
72818: GO 72820
72820: DISABLE
72821: LD_INT 0
72823: PPUSH
72824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72825: LD_ADDR_VAR 0 2
72829: PUSH
72830: LD_INT 22
72832: PUSH
72833: LD_OWVAR 2
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 21
72844: PUSH
72845: LD_INT 1
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 3
72854: PUSH
72855: LD_INT 23
72857: PUSH
72858: LD_INT 0
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: LIST
72873: PPUSH
72874: CALL_OW 69
72878: ST_TO_ADDR
// if not tmp then
72879: LD_VAR 0 2
72883: NOT
72884: IFFALSE 72888
// exit ;
72886: GO 72937
// for i in tmp do
72888: LD_ADDR_VAR 0 1
72892: PUSH
72893: LD_VAR 0 2
72897: PUSH
72898: FOR_IN
72899: IFFALSE 72935
// begin if Crawls ( i ) then
72901: LD_VAR 0 1
72905: PPUSH
72906: CALL_OW 318
72910: IFFALSE 72921
// ComWalk ( i ) ;
72912: LD_VAR 0 1
72916: PPUSH
72917: CALL_OW 138
// SetClass ( i , 2 ) ;
72921: LD_VAR 0 1
72925: PPUSH
72926: LD_INT 2
72928: PPUSH
72929: CALL_OW 336
// end ;
72933: GO 72898
72935: POP
72936: POP
// end ;
72937: PPOPN 2
72939: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72940: LD_EXP 43
72944: PUSH
72945: LD_EXP 96
72949: AND
72950: IFFALSE 73238
72952: GO 72954
72954: DISABLE
72955: LD_INT 0
72957: PPUSH
72958: PPUSH
72959: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72960: LD_OWVAR 2
72964: PPUSH
72965: LD_INT 9
72967: PPUSH
72968: LD_INT 1
72970: PPUSH
72971: LD_INT 1
72973: PPUSH
72974: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72978: LD_INT 9
72980: PPUSH
72981: LD_OWVAR 2
72985: PPUSH
72986: CALL_OW 343
// uc_side := 9 ;
72990: LD_ADDR_OWVAR 20
72994: PUSH
72995: LD_INT 9
72997: ST_TO_ADDR
// uc_nation := 2 ;
72998: LD_ADDR_OWVAR 21
73002: PUSH
73003: LD_INT 2
73005: ST_TO_ADDR
// hc_name := Dark Warrior ;
73006: LD_ADDR_OWVAR 26
73010: PUSH
73011: LD_STRING Dark Warrior
73013: ST_TO_ADDR
// hc_gallery :=  ;
73014: LD_ADDR_OWVAR 33
73018: PUSH
73019: LD_STRING 
73021: ST_TO_ADDR
// hc_noskilllimit := true ;
73022: LD_ADDR_OWVAR 76
73026: PUSH
73027: LD_INT 1
73029: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73030: LD_ADDR_OWVAR 31
73034: PUSH
73035: LD_INT 30
73037: PUSH
73038: LD_INT 30
73040: PUSH
73041: LD_INT 30
73043: PUSH
73044: LD_INT 30
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: ST_TO_ADDR
// un := CreateHuman ;
73053: LD_ADDR_VAR 0 3
73057: PUSH
73058: CALL_OW 44
73062: ST_TO_ADDR
// hc_noskilllimit := false ;
73063: LD_ADDR_OWVAR 76
73067: PUSH
73068: LD_INT 0
73070: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73071: LD_VAR 0 3
73075: PPUSH
73076: LD_INT 1
73078: PPUSH
73079: CALL_OW 51
// ToLua ( playRanger() ) ;
73083: LD_STRING playRanger()
73085: PPUSH
73086: CALL_OW 559
// p := 0 ;
73090: LD_ADDR_VAR 0 2
73094: PUSH
73095: LD_INT 0
73097: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73098: LD_INT 35
73100: PPUSH
73101: CALL_OW 67
// p := p + 1 ;
73105: LD_ADDR_VAR 0 2
73109: PUSH
73110: LD_VAR 0 2
73114: PUSH
73115: LD_INT 1
73117: PLUS
73118: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73119: LD_VAR 0 3
73123: PPUSH
73124: CALL_OW 256
73128: PUSH
73129: LD_INT 1000
73131: LESS
73132: IFFALSE 73146
// SetLives ( un , 1000 ) ;
73134: LD_VAR 0 3
73138: PPUSH
73139: LD_INT 1000
73141: PPUSH
73142: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73146: LD_VAR 0 3
73150: PPUSH
73151: LD_INT 81
73153: PUSH
73154: LD_OWVAR 2
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 91
73165: PUSH
73166: LD_VAR 0 3
73170: PUSH
73171: LD_INT 30
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PPUSH
73183: CALL_OW 69
73187: PPUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: CALL_OW 74
73197: PPUSH
73198: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73202: LD_VAR 0 2
73206: PUSH
73207: LD_INT 80
73209: GREATER
73210: PUSH
73211: LD_VAR 0 3
73215: PPUSH
73216: CALL_OW 301
73220: OR
73221: IFFALSE 73098
// if un then
73223: LD_VAR 0 3
73227: IFFALSE 73238
// RemoveUnit ( un ) ;
73229: LD_VAR 0 3
73233: PPUSH
73234: CALL_OW 64
// end ;
73238: PPOPN 3
73240: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73241: LD_EXP 97
73245: IFFALSE 73361
73247: GO 73249
73249: DISABLE
73250: LD_INT 0
73252: PPUSH
73253: PPUSH
73254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73255: LD_ADDR_VAR 0 2
73259: PUSH
73260: LD_INT 81
73262: PUSH
73263: LD_OWVAR 2
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 21
73274: PUSH
73275: LD_INT 1
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PPUSH
73286: CALL_OW 69
73290: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73291: LD_STRING playComputer()
73293: PPUSH
73294: CALL_OW 559
// if not tmp then
73298: LD_VAR 0 2
73302: NOT
73303: IFFALSE 73307
// exit ;
73305: GO 73361
// for i in tmp do
73307: LD_ADDR_VAR 0 1
73311: PUSH
73312: LD_VAR 0 2
73316: PUSH
73317: FOR_IN
73318: IFFALSE 73359
// for j := 1 to 4 do
73320: LD_ADDR_VAR 0 3
73324: PUSH
73325: DOUBLE
73326: LD_INT 1
73328: DEC
73329: ST_TO_ADDR
73330: LD_INT 4
73332: PUSH
73333: FOR_TO
73334: IFFALSE 73355
// SetSkill ( i , j , 10 ) ;
73336: LD_VAR 0 1
73340: PPUSH
73341: LD_VAR 0 3
73345: PPUSH
73346: LD_INT 10
73348: PPUSH
73349: CALL_OW 237
73353: GO 73333
73355: POP
73356: POP
73357: GO 73317
73359: POP
73360: POP
// end ;
73361: PPOPN 3
73363: END
// every 0 0$1 trigger s30 do var i , tmp ;
73364: LD_EXP 98
73368: IFFALSE 73437
73370: GO 73372
73372: DISABLE
73373: LD_INT 0
73375: PPUSH
73376: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73377: LD_ADDR_VAR 0 2
73381: PUSH
73382: LD_INT 22
73384: PUSH
73385: LD_OWVAR 2
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PPUSH
73394: CALL_OW 69
73398: ST_TO_ADDR
// if not tmp then
73399: LD_VAR 0 2
73403: NOT
73404: IFFALSE 73408
// exit ;
73406: GO 73437
// for i in tmp do
73408: LD_ADDR_VAR 0 1
73412: PUSH
73413: LD_VAR 0 2
73417: PUSH
73418: FOR_IN
73419: IFFALSE 73435
// SetLives ( i , 300 ) ;
73421: LD_VAR 0 1
73425: PPUSH
73426: LD_INT 300
73428: PPUSH
73429: CALL_OW 234
73433: GO 73418
73435: POP
73436: POP
// end ;
73437: PPOPN 2
73439: END
// every 0 0$1 trigger s60 do var i , tmp ;
73440: LD_EXP 99
73444: IFFALSE 73513
73446: GO 73448
73448: DISABLE
73449: LD_INT 0
73451: PPUSH
73452: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73453: LD_ADDR_VAR 0 2
73457: PUSH
73458: LD_INT 22
73460: PUSH
73461: LD_OWVAR 2
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PPUSH
73470: CALL_OW 69
73474: ST_TO_ADDR
// if not tmp then
73475: LD_VAR 0 2
73479: NOT
73480: IFFALSE 73484
// exit ;
73482: GO 73513
// for i in tmp do
73484: LD_ADDR_VAR 0 1
73488: PUSH
73489: LD_VAR 0 2
73493: PUSH
73494: FOR_IN
73495: IFFALSE 73511
// SetLives ( i , 600 ) ;
73497: LD_VAR 0 1
73501: PPUSH
73502: LD_INT 600
73504: PPUSH
73505: CALL_OW 234
73509: GO 73494
73511: POP
73512: POP
// end ;
73513: PPOPN 2
73515: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73516: LD_INT 0
73518: PPUSH
// case cmd of 301 :
73519: LD_VAR 0 1
73523: PUSH
73524: LD_INT 301
73526: DOUBLE
73527: EQUAL
73528: IFTRUE 73532
73530: GO 73564
73532: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73533: LD_VAR 0 6
73537: PPUSH
73538: LD_VAR 0 7
73542: PPUSH
73543: LD_VAR 0 8
73547: PPUSH
73548: LD_VAR 0 4
73552: PPUSH
73553: LD_VAR 0 5
73557: PPUSH
73558: CALL 74765 0 5
73562: GO 73685
73564: LD_INT 302
73566: DOUBLE
73567: EQUAL
73568: IFTRUE 73572
73570: GO 73609
73572: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73573: LD_VAR 0 6
73577: PPUSH
73578: LD_VAR 0 7
73582: PPUSH
73583: LD_VAR 0 8
73587: PPUSH
73588: LD_VAR 0 9
73592: PPUSH
73593: LD_VAR 0 4
73597: PPUSH
73598: LD_VAR 0 5
73602: PPUSH
73603: CALL 74856 0 6
73607: GO 73685
73609: LD_INT 303
73611: DOUBLE
73612: EQUAL
73613: IFTRUE 73617
73615: GO 73654
73617: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73618: LD_VAR 0 6
73622: PPUSH
73623: LD_VAR 0 7
73627: PPUSH
73628: LD_VAR 0 8
73632: PPUSH
73633: LD_VAR 0 9
73637: PPUSH
73638: LD_VAR 0 4
73642: PPUSH
73643: LD_VAR 0 5
73647: PPUSH
73648: CALL 73690 0 6
73652: GO 73685
73654: LD_INT 304
73656: DOUBLE
73657: EQUAL
73658: IFTRUE 73662
73660: GO 73684
73662: POP
// hHackTeleport ( unit , x , y ) ; end ;
73663: LD_VAR 0 2
73667: PPUSH
73668: LD_VAR 0 4
73672: PPUSH
73673: LD_VAR 0 5
73677: PPUSH
73678: CALL 75449 0 3
73682: GO 73685
73684: POP
// end ;
73685: LD_VAR 0 12
73689: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73690: LD_INT 0
73692: PPUSH
73693: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73694: LD_VAR 0 1
73698: PUSH
73699: LD_INT 1
73701: LESS
73702: PUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_INT 3
73710: GREATER
73711: OR
73712: PUSH
73713: LD_VAR 0 5
73717: PPUSH
73718: LD_VAR 0 6
73722: PPUSH
73723: CALL_OW 428
73727: OR
73728: IFFALSE 73732
// exit ;
73730: GO 74452
// uc_side := your_side ;
73732: LD_ADDR_OWVAR 20
73736: PUSH
73737: LD_OWVAR 2
73741: ST_TO_ADDR
// uc_nation := nation ;
73742: LD_ADDR_OWVAR 21
73746: PUSH
73747: LD_VAR 0 1
73751: ST_TO_ADDR
// bc_level = 1 ;
73752: LD_ADDR_OWVAR 43
73756: PUSH
73757: LD_INT 1
73759: ST_TO_ADDR
// case btype of 1 :
73760: LD_VAR 0 2
73764: PUSH
73765: LD_INT 1
73767: DOUBLE
73768: EQUAL
73769: IFTRUE 73773
73771: GO 73784
73773: POP
// bc_type := b_depot ; 2 :
73774: LD_ADDR_OWVAR 42
73778: PUSH
73779: LD_INT 0
73781: ST_TO_ADDR
73782: GO 74396
73784: LD_INT 2
73786: DOUBLE
73787: EQUAL
73788: IFTRUE 73792
73790: GO 73803
73792: POP
// bc_type := b_warehouse ; 3 :
73793: LD_ADDR_OWVAR 42
73797: PUSH
73798: LD_INT 1
73800: ST_TO_ADDR
73801: GO 74396
73803: LD_INT 3
73805: DOUBLE
73806: EQUAL
73807: IFTRUE 73811
73809: GO 73822
73811: POP
// bc_type := b_lab ; 4 .. 9 :
73812: LD_ADDR_OWVAR 42
73816: PUSH
73817: LD_INT 6
73819: ST_TO_ADDR
73820: GO 74396
73822: LD_INT 4
73824: DOUBLE
73825: GREATEREQUAL
73826: IFFALSE 73834
73828: LD_INT 9
73830: DOUBLE
73831: LESSEQUAL
73832: IFTRUE 73836
73834: GO 73888
73836: POP
// begin bc_type := b_lab_half ;
73837: LD_ADDR_OWVAR 42
73841: PUSH
73842: LD_INT 7
73844: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73845: LD_ADDR_OWVAR 44
73849: PUSH
73850: LD_INT 10
73852: PUSH
73853: LD_INT 11
73855: PUSH
73856: LD_INT 12
73858: PUSH
73859: LD_INT 15
73861: PUSH
73862: LD_INT 14
73864: PUSH
73865: LD_INT 13
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: PUSH
73876: LD_VAR 0 2
73880: PUSH
73881: LD_INT 3
73883: MINUS
73884: ARRAY
73885: ST_TO_ADDR
// end ; 10 .. 13 :
73886: GO 74396
73888: LD_INT 10
73890: DOUBLE
73891: GREATEREQUAL
73892: IFFALSE 73900
73894: LD_INT 13
73896: DOUBLE
73897: LESSEQUAL
73898: IFTRUE 73902
73900: GO 73979
73902: POP
// begin bc_type := b_lab_full ;
73903: LD_ADDR_OWVAR 42
73907: PUSH
73908: LD_INT 8
73910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73911: LD_ADDR_OWVAR 44
73915: PUSH
73916: LD_INT 10
73918: PUSH
73919: LD_INT 12
73921: PUSH
73922: LD_INT 14
73924: PUSH
73925: LD_INT 13
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: PUSH
73934: LD_VAR 0 2
73938: PUSH
73939: LD_INT 9
73941: MINUS
73942: ARRAY
73943: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73944: LD_ADDR_OWVAR 45
73948: PUSH
73949: LD_INT 11
73951: PUSH
73952: LD_INT 15
73954: PUSH
73955: LD_INT 12
73957: PUSH
73958: LD_INT 15
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: PUSH
73967: LD_VAR 0 2
73971: PUSH
73972: LD_INT 9
73974: MINUS
73975: ARRAY
73976: ST_TO_ADDR
// end ; 14 :
73977: GO 74396
73979: LD_INT 14
73981: DOUBLE
73982: EQUAL
73983: IFTRUE 73987
73985: GO 73998
73987: POP
// bc_type := b_workshop ; 15 :
73988: LD_ADDR_OWVAR 42
73992: PUSH
73993: LD_INT 2
73995: ST_TO_ADDR
73996: GO 74396
73998: LD_INT 15
74000: DOUBLE
74001: EQUAL
74002: IFTRUE 74006
74004: GO 74017
74006: POP
// bc_type := b_factory ; 16 :
74007: LD_ADDR_OWVAR 42
74011: PUSH
74012: LD_INT 3
74014: ST_TO_ADDR
74015: GO 74396
74017: LD_INT 16
74019: DOUBLE
74020: EQUAL
74021: IFTRUE 74025
74023: GO 74036
74025: POP
// bc_type := b_ext_gun ; 17 :
74026: LD_ADDR_OWVAR 42
74030: PUSH
74031: LD_INT 17
74033: ST_TO_ADDR
74034: GO 74396
74036: LD_INT 17
74038: DOUBLE
74039: EQUAL
74040: IFTRUE 74044
74042: GO 74072
74044: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74045: LD_ADDR_OWVAR 42
74049: PUSH
74050: LD_INT 19
74052: PUSH
74053: LD_INT 23
74055: PUSH
74056: LD_INT 19
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: LIST
74063: PUSH
74064: LD_VAR 0 1
74068: ARRAY
74069: ST_TO_ADDR
74070: GO 74396
74072: LD_INT 18
74074: DOUBLE
74075: EQUAL
74076: IFTRUE 74080
74078: GO 74091
74080: POP
// bc_type := b_ext_radar ; 19 :
74081: LD_ADDR_OWVAR 42
74085: PUSH
74086: LD_INT 20
74088: ST_TO_ADDR
74089: GO 74396
74091: LD_INT 19
74093: DOUBLE
74094: EQUAL
74095: IFTRUE 74099
74097: GO 74110
74099: POP
// bc_type := b_ext_radio ; 20 :
74100: LD_ADDR_OWVAR 42
74104: PUSH
74105: LD_INT 22
74107: ST_TO_ADDR
74108: GO 74396
74110: LD_INT 20
74112: DOUBLE
74113: EQUAL
74114: IFTRUE 74118
74116: GO 74129
74118: POP
// bc_type := b_ext_siberium ; 21 :
74119: LD_ADDR_OWVAR 42
74123: PUSH
74124: LD_INT 21
74126: ST_TO_ADDR
74127: GO 74396
74129: LD_INT 21
74131: DOUBLE
74132: EQUAL
74133: IFTRUE 74137
74135: GO 74148
74137: POP
// bc_type := b_ext_computer ; 22 :
74138: LD_ADDR_OWVAR 42
74142: PUSH
74143: LD_INT 24
74145: ST_TO_ADDR
74146: GO 74396
74148: LD_INT 22
74150: DOUBLE
74151: EQUAL
74152: IFTRUE 74156
74154: GO 74167
74156: POP
// bc_type := b_ext_track ; 23 :
74157: LD_ADDR_OWVAR 42
74161: PUSH
74162: LD_INT 16
74164: ST_TO_ADDR
74165: GO 74396
74167: LD_INT 23
74169: DOUBLE
74170: EQUAL
74171: IFTRUE 74175
74173: GO 74186
74175: POP
// bc_type := b_ext_laser ; 24 :
74176: LD_ADDR_OWVAR 42
74180: PUSH
74181: LD_INT 25
74183: ST_TO_ADDR
74184: GO 74396
74186: LD_INT 24
74188: DOUBLE
74189: EQUAL
74190: IFTRUE 74194
74192: GO 74205
74194: POP
// bc_type := b_control_tower ; 25 :
74195: LD_ADDR_OWVAR 42
74199: PUSH
74200: LD_INT 36
74202: ST_TO_ADDR
74203: GO 74396
74205: LD_INT 25
74207: DOUBLE
74208: EQUAL
74209: IFTRUE 74213
74211: GO 74224
74213: POP
// bc_type := b_breastwork ; 26 :
74214: LD_ADDR_OWVAR 42
74218: PUSH
74219: LD_INT 31
74221: ST_TO_ADDR
74222: GO 74396
74224: LD_INT 26
74226: DOUBLE
74227: EQUAL
74228: IFTRUE 74232
74230: GO 74243
74232: POP
// bc_type := b_bunker ; 27 :
74233: LD_ADDR_OWVAR 42
74237: PUSH
74238: LD_INT 32
74240: ST_TO_ADDR
74241: GO 74396
74243: LD_INT 27
74245: DOUBLE
74246: EQUAL
74247: IFTRUE 74251
74249: GO 74262
74251: POP
// bc_type := b_turret ; 28 :
74252: LD_ADDR_OWVAR 42
74256: PUSH
74257: LD_INT 33
74259: ST_TO_ADDR
74260: GO 74396
74262: LD_INT 28
74264: DOUBLE
74265: EQUAL
74266: IFTRUE 74270
74268: GO 74281
74270: POP
// bc_type := b_armoury ; 29 :
74271: LD_ADDR_OWVAR 42
74275: PUSH
74276: LD_INT 4
74278: ST_TO_ADDR
74279: GO 74396
74281: LD_INT 29
74283: DOUBLE
74284: EQUAL
74285: IFTRUE 74289
74287: GO 74300
74289: POP
// bc_type := b_barracks ; 30 :
74290: LD_ADDR_OWVAR 42
74294: PUSH
74295: LD_INT 5
74297: ST_TO_ADDR
74298: GO 74396
74300: LD_INT 30
74302: DOUBLE
74303: EQUAL
74304: IFTRUE 74308
74306: GO 74319
74308: POP
// bc_type := b_solar_power ; 31 :
74309: LD_ADDR_OWVAR 42
74313: PUSH
74314: LD_INT 27
74316: ST_TO_ADDR
74317: GO 74396
74319: LD_INT 31
74321: DOUBLE
74322: EQUAL
74323: IFTRUE 74327
74325: GO 74338
74327: POP
// bc_type := b_oil_power ; 32 :
74328: LD_ADDR_OWVAR 42
74332: PUSH
74333: LD_INT 26
74335: ST_TO_ADDR
74336: GO 74396
74338: LD_INT 32
74340: DOUBLE
74341: EQUAL
74342: IFTRUE 74346
74344: GO 74357
74346: POP
// bc_type := b_siberite_power ; 33 :
74347: LD_ADDR_OWVAR 42
74351: PUSH
74352: LD_INT 28
74354: ST_TO_ADDR
74355: GO 74396
74357: LD_INT 33
74359: DOUBLE
74360: EQUAL
74361: IFTRUE 74365
74363: GO 74376
74365: POP
// bc_type := b_oil_mine ; 34 :
74366: LD_ADDR_OWVAR 42
74370: PUSH
74371: LD_INT 29
74373: ST_TO_ADDR
74374: GO 74396
74376: LD_INT 34
74378: DOUBLE
74379: EQUAL
74380: IFTRUE 74384
74382: GO 74395
74384: POP
// bc_type := b_siberite_mine ; end ;
74385: LD_ADDR_OWVAR 42
74389: PUSH
74390: LD_INT 30
74392: ST_TO_ADDR
74393: GO 74396
74395: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74396: LD_ADDR_VAR 0 8
74400: PUSH
74401: LD_VAR 0 5
74405: PPUSH
74406: LD_VAR 0 6
74410: PPUSH
74411: LD_VAR 0 3
74415: PPUSH
74416: CALL_OW 47
74420: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74421: LD_OWVAR 42
74425: PUSH
74426: LD_INT 32
74428: PUSH
74429: LD_INT 33
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: IN
74436: IFFALSE 74452
// PlaceWeaponTurret ( b , weapon ) ;
74438: LD_VAR 0 8
74442: PPUSH
74443: LD_VAR 0 4
74447: PPUSH
74448: CALL_OW 431
// end ;
74452: LD_VAR 0 7
74456: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74457: LD_INT 0
74459: PPUSH
74460: PPUSH
74461: PPUSH
74462: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74463: LD_ADDR_VAR 0 4
74467: PUSH
74468: LD_INT 22
74470: PUSH
74471: LD_OWVAR 2
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 2
74482: PUSH
74483: LD_INT 30
74485: PUSH
74486: LD_INT 0
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 30
74495: PUSH
74496: LD_INT 1
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: LIST
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PPUSH
74512: CALL_OW 69
74516: ST_TO_ADDR
// if not tmp then
74517: LD_VAR 0 4
74521: NOT
74522: IFFALSE 74526
// exit ;
74524: GO 74585
// for i in tmp do
74526: LD_ADDR_VAR 0 2
74530: PUSH
74531: LD_VAR 0 4
74535: PUSH
74536: FOR_IN
74537: IFFALSE 74583
// for j = 1 to 3 do
74539: LD_ADDR_VAR 0 3
74543: PUSH
74544: DOUBLE
74545: LD_INT 1
74547: DEC
74548: ST_TO_ADDR
74549: LD_INT 3
74551: PUSH
74552: FOR_TO
74553: IFFALSE 74579
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74555: LD_VAR 0 2
74559: PPUSH
74560: CALL_OW 274
74564: PPUSH
74565: LD_VAR 0 3
74569: PPUSH
74570: LD_INT 99999
74572: PPUSH
74573: CALL_OW 277
74577: GO 74552
74579: POP
74580: POP
74581: GO 74536
74583: POP
74584: POP
// end ;
74585: LD_VAR 0 1
74589: RET
// export function hHackSetLevel10 ; var i , j ; begin
74590: LD_INT 0
74592: PPUSH
74593: PPUSH
74594: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74595: LD_ADDR_VAR 0 2
74599: PUSH
74600: LD_INT 21
74602: PUSH
74603: LD_INT 1
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PPUSH
74610: CALL_OW 69
74614: PUSH
74615: FOR_IN
74616: IFFALSE 74668
// if IsSelected ( i ) then
74618: LD_VAR 0 2
74622: PPUSH
74623: CALL_OW 306
74627: IFFALSE 74666
// begin for j := 1 to 4 do
74629: LD_ADDR_VAR 0 3
74633: PUSH
74634: DOUBLE
74635: LD_INT 1
74637: DEC
74638: ST_TO_ADDR
74639: LD_INT 4
74641: PUSH
74642: FOR_TO
74643: IFFALSE 74664
// SetSkill ( i , j , 10 ) ;
74645: LD_VAR 0 2
74649: PPUSH
74650: LD_VAR 0 3
74654: PPUSH
74655: LD_INT 10
74657: PPUSH
74658: CALL_OW 237
74662: GO 74642
74664: POP
74665: POP
// end ;
74666: GO 74615
74668: POP
74669: POP
// end ;
74670: LD_VAR 0 1
74674: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74675: LD_INT 0
74677: PPUSH
74678: PPUSH
74679: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74680: LD_ADDR_VAR 0 2
74684: PUSH
74685: LD_INT 22
74687: PUSH
74688: LD_OWVAR 2
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 21
74699: PUSH
74700: LD_INT 1
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PPUSH
74711: CALL_OW 69
74715: PUSH
74716: FOR_IN
74717: IFFALSE 74758
// begin for j := 1 to 4 do
74719: LD_ADDR_VAR 0 3
74723: PUSH
74724: DOUBLE
74725: LD_INT 1
74727: DEC
74728: ST_TO_ADDR
74729: LD_INT 4
74731: PUSH
74732: FOR_TO
74733: IFFALSE 74754
// SetSkill ( i , j , 10 ) ;
74735: LD_VAR 0 2
74739: PPUSH
74740: LD_VAR 0 3
74744: PPUSH
74745: LD_INT 10
74747: PPUSH
74748: CALL_OW 237
74752: GO 74732
74754: POP
74755: POP
// end ;
74756: GO 74716
74758: POP
74759: POP
// end ;
74760: LD_VAR 0 1
74764: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74765: LD_INT 0
74767: PPUSH
// uc_side := your_side ;
74768: LD_ADDR_OWVAR 20
74772: PUSH
74773: LD_OWVAR 2
74777: ST_TO_ADDR
// uc_nation := nation ;
74778: LD_ADDR_OWVAR 21
74782: PUSH
74783: LD_VAR 0 1
74787: ST_TO_ADDR
// InitHc ;
74788: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74792: LD_INT 0
74794: PPUSH
74795: LD_VAR 0 2
74799: PPUSH
74800: LD_VAR 0 3
74804: PPUSH
74805: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74809: LD_VAR 0 4
74813: PPUSH
74814: LD_VAR 0 5
74818: PPUSH
74819: CALL_OW 428
74823: PUSH
74824: LD_INT 0
74826: EQUAL
74827: IFFALSE 74851
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74829: CALL_OW 44
74833: PPUSH
74834: LD_VAR 0 4
74838: PPUSH
74839: LD_VAR 0 5
74843: PPUSH
74844: LD_INT 1
74846: PPUSH
74847: CALL_OW 48
// end ;
74851: LD_VAR 0 6
74855: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74856: LD_INT 0
74858: PPUSH
74859: PPUSH
// uc_side := your_side ;
74860: LD_ADDR_OWVAR 20
74864: PUSH
74865: LD_OWVAR 2
74869: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74870: LD_VAR 0 1
74874: PUSH
74875: LD_INT 1
74877: PUSH
74878: LD_INT 2
74880: PUSH
74881: LD_INT 3
74883: PUSH
74884: LD_INT 4
74886: PUSH
74887: LD_INT 5
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: IN
74897: IFFALSE 74909
// uc_nation := nation_american else
74899: LD_ADDR_OWVAR 21
74903: PUSH
74904: LD_INT 1
74906: ST_TO_ADDR
74907: GO 74952
// if chassis in [ 11 , 12 , 13 , 14 ] then
74909: LD_VAR 0 1
74913: PUSH
74914: LD_INT 11
74916: PUSH
74917: LD_INT 12
74919: PUSH
74920: LD_INT 13
74922: PUSH
74923: LD_INT 14
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: IN
74932: IFFALSE 74944
// uc_nation := nation_arabian else
74934: LD_ADDR_OWVAR 21
74938: PUSH
74939: LD_INT 2
74941: ST_TO_ADDR
74942: GO 74952
// uc_nation := nation_russian ;
74944: LD_ADDR_OWVAR 21
74948: PUSH
74949: LD_INT 3
74951: ST_TO_ADDR
// vc_chassis := chassis ;
74952: LD_ADDR_OWVAR 37
74956: PUSH
74957: LD_VAR 0 1
74961: ST_TO_ADDR
// vc_engine := engine ;
74962: LD_ADDR_OWVAR 39
74966: PUSH
74967: LD_VAR 0 2
74971: ST_TO_ADDR
// vc_control := control ;
74972: LD_ADDR_OWVAR 38
74976: PUSH
74977: LD_VAR 0 3
74981: ST_TO_ADDR
// vc_weapon := weapon ;
74982: LD_ADDR_OWVAR 40
74986: PUSH
74987: LD_VAR 0 4
74991: ST_TO_ADDR
// un := CreateVehicle ;
74992: LD_ADDR_VAR 0 8
74996: PUSH
74997: CALL_OW 45
75001: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75002: LD_VAR 0 8
75006: PPUSH
75007: LD_INT 0
75009: PPUSH
75010: LD_INT 5
75012: PPUSH
75013: CALL_OW 12
75017: PPUSH
75018: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75022: LD_VAR 0 8
75026: PPUSH
75027: LD_VAR 0 5
75031: PPUSH
75032: LD_VAR 0 6
75036: PPUSH
75037: LD_INT 1
75039: PPUSH
75040: CALL_OW 48
// end ;
75044: LD_VAR 0 7
75048: RET
// export hInvincible ; every 1 do
75049: GO 75051
75051: DISABLE
// hInvincible := [ ] ;
75052: LD_ADDR_EXP 100
75056: PUSH
75057: EMPTY
75058: ST_TO_ADDR
75059: END
// every 10 do var i ;
75060: GO 75062
75062: DISABLE
75063: LD_INT 0
75065: PPUSH
// begin enable ;
75066: ENABLE
// if not hInvincible then
75067: LD_EXP 100
75071: NOT
75072: IFFALSE 75076
// exit ;
75074: GO 75120
// for i in hInvincible do
75076: LD_ADDR_VAR 0 1
75080: PUSH
75081: LD_EXP 100
75085: PUSH
75086: FOR_IN
75087: IFFALSE 75118
// if GetLives ( i ) < 1000 then
75089: LD_VAR 0 1
75093: PPUSH
75094: CALL_OW 256
75098: PUSH
75099: LD_INT 1000
75101: LESS
75102: IFFALSE 75116
// SetLives ( i , 1000 ) ;
75104: LD_VAR 0 1
75108: PPUSH
75109: LD_INT 1000
75111: PPUSH
75112: CALL_OW 234
75116: GO 75086
75118: POP
75119: POP
// end ;
75120: PPOPN 1
75122: END
// export function hHackInvincible ; var i ; begin
75123: LD_INT 0
75125: PPUSH
75126: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75127: LD_ADDR_VAR 0 2
75131: PUSH
75132: LD_INT 2
75134: PUSH
75135: LD_INT 21
75137: PUSH
75138: LD_INT 1
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: PUSH
75145: LD_INT 21
75147: PUSH
75148: LD_INT 2
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: LIST
75159: PPUSH
75160: CALL_OW 69
75164: PUSH
75165: FOR_IN
75166: IFFALSE 75227
// if IsSelected ( i ) then
75168: LD_VAR 0 2
75172: PPUSH
75173: CALL_OW 306
75177: IFFALSE 75225
// begin if i in hInvincible then
75179: LD_VAR 0 2
75183: PUSH
75184: LD_EXP 100
75188: IN
75189: IFFALSE 75209
// hInvincible := hInvincible diff i else
75191: LD_ADDR_EXP 100
75195: PUSH
75196: LD_EXP 100
75200: PUSH
75201: LD_VAR 0 2
75205: DIFF
75206: ST_TO_ADDR
75207: GO 75225
// hInvincible := hInvincible union i ;
75209: LD_ADDR_EXP 100
75213: PUSH
75214: LD_EXP 100
75218: PUSH
75219: LD_VAR 0 2
75223: UNION
75224: ST_TO_ADDR
// end ;
75225: GO 75165
75227: POP
75228: POP
// end ;
75229: LD_VAR 0 1
75233: RET
// export function hHackInvisible ; var i , j ; begin
75234: LD_INT 0
75236: PPUSH
75237: PPUSH
75238: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75239: LD_ADDR_VAR 0 2
75243: PUSH
75244: LD_INT 21
75246: PUSH
75247: LD_INT 1
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PPUSH
75254: CALL_OW 69
75258: PUSH
75259: FOR_IN
75260: IFFALSE 75284
// if IsSelected ( i ) then
75262: LD_VAR 0 2
75266: PPUSH
75267: CALL_OW 306
75271: IFFALSE 75282
// ComForceInvisible ( i ) ;
75273: LD_VAR 0 2
75277: PPUSH
75278: CALL_OW 496
75282: GO 75259
75284: POP
75285: POP
// end ;
75286: LD_VAR 0 1
75290: RET
// export function hHackChangeYourSide ; begin
75291: LD_INT 0
75293: PPUSH
// if your_side = 8 then
75294: LD_OWVAR 2
75298: PUSH
75299: LD_INT 8
75301: EQUAL
75302: IFFALSE 75314
// your_side := 0 else
75304: LD_ADDR_OWVAR 2
75308: PUSH
75309: LD_INT 0
75311: ST_TO_ADDR
75312: GO 75328
// your_side := your_side + 1 ;
75314: LD_ADDR_OWVAR 2
75318: PUSH
75319: LD_OWVAR 2
75323: PUSH
75324: LD_INT 1
75326: PLUS
75327: ST_TO_ADDR
// end ;
75328: LD_VAR 0 1
75332: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75333: LD_INT 0
75335: PPUSH
75336: PPUSH
75337: PPUSH
// for i in all_units do
75338: LD_ADDR_VAR 0 2
75342: PUSH
75343: LD_OWVAR 3
75347: PUSH
75348: FOR_IN
75349: IFFALSE 75427
// if IsSelected ( i ) then
75351: LD_VAR 0 2
75355: PPUSH
75356: CALL_OW 306
75360: IFFALSE 75425
// begin j := GetSide ( i ) ;
75362: LD_ADDR_VAR 0 3
75366: PUSH
75367: LD_VAR 0 2
75371: PPUSH
75372: CALL_OW 255
75376: ST_TO_ADDR
// if j = 8 then
75377: LD_VAR 0 3
75381: PUSH
75382: LD_INT 8
75384: EQUAL
75385: IFFALSE 75397
// j := 0 else
75387: LD_ADDR_VAR 0 3
75391: PUSH
75392: LD_INT 0
75394: ST_TO_ADDR
75395: GO 75411
// j := j + 1 ;
75397: LD_ADDR_VAR 0 3
75401: PUSH
75402: LD_VAR 0 3
75406: PUSH
75407: LD_INT 1
75409: PLUS
75410: ST_TO_ADDR
// SetSide ( i , j ) ;
75411: LD_VAR 0 2
75415: PPUSH
75416: LD_VAR 0 3
75420: PPUSH
75421: CALL_OW 235
// end ;
75425: GO 75348
75427: POP
75428: POP
// end ;
75429: LD_VAR 0 1
75433: RET
// export function hHackFog ; begin
75434: LD_INT 0
75436: PPUSH
// FogOff ( true ) ;
75437: LD_INT 1
75439: PPUSH
75440: CALL_OW 344
// end ;
75444: LD_VAR 0 1
75448: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75449: LD_INT 0
75451: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75452: LD_VAR 0 1
75456: PPUSH
75457: LD_VAR 0 2
75461: PPUSH
75462: LD_VAR 0 3
75466: PPUSH
75467: LD_INT 1
75469: PPUSH
75470: LD_INT 1
75472: PPUSH
75473: CALL_OW 483
// CenterOnXY ( x , y ) ;
75477: LD_VAR 0 2
75481: PPUSH
75482: LD_VAR 0 3
75486: PPUSH
75487: CALL_OW 84
// end ;
75491: LD_VAR 0 4
75495: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75496: LD_INT 0
75498: PPUSH
75499: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75500: LD_VAR 0 1
75504: NOT
75505: PUSH
75506: LD_VAR 0 2
75510: PPUSH
75511: LD_VAR 0 3
75515: PPUSH
75516: CALL_OW 488
75520: NOT
75521: OR
75522: PUSH
75523: LD_VAR 0 1
75527: PPUSH
75528: CALL_OW 266
75532: PUSH
75533: LD_INT 3
75535: NONEQUAL
75536: PUSH
75537: LD_VAR 0 1
75541: PPUSH
75542: CALL_OW 247
75546: PUSH
75547: LD_INT 1
75549: EQUAL
75550: NOT
75551: AND
75552: OR
75553: IFFALSE 75557
// exit ;
75555: GO 75706
// if GetType ( factory ) = unit_human then
75557: LD_VAR 0 1
75561: PPUSH
75562: CALL_OW 247
75566: PUSH
75567: LD_INT 1
75569: EQUAL
75570: IFFALSE 75587
// factory := IsInUnit ( factory ) ;
75572: LD_ADDR_VAR 0 1
75576: PUSH
75577: LD_VAR 0 1
75581: PPUSH
75582: CALL_OW 310
75586: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75587: LD_VAR 0 1
75591: PPUSH
75592: CALL_OW 266
75596: PUSH
75597: LD_INT 3
75599: NONEQUAL
75600: IFFALSE 75604
// exit ;
75602: GO 75706
// if HexInfo ( x , y ) = factory then
75604: LD_VAR 0 2
75608: PPUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: CALL_OW 428
75618: PUSH
75619: LD_VAR 0 1
75623: EQUAL
75624: IFFALSE 75651
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75626: LD_ADDR_EXP 101
75630: PUSH
75631: LD_EXP 101
75635: PPUSH
75636: LD_VAR 0 1
75640: PPUSH
75641: LD_INT 0
75643: PPUSH
75644: CALL_OW 1
75648: ST_TO_ADDR
75649: GO 75702
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75651: LD_ADDR_EXP 101
75655: PUSH
75656: LD_EXP 101
75660: PPUSH
75661: LD_VAR 0 1
75665: PPUSH
75666: LD_VAR 0 1
75670: PPUSH
75671: CALL_OW 255
75675: PUSH
75676: LD_VAR 0 1
75680: PUSH
75681: LD_VAR 0 2
75685: PUSH
75686: LD_VAR 0 3
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: PPUSH
75697: CALL_OW 1
75701: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75702: CALL 75711 0 0
// end ;
75706: LD_VAR 0 4
75710: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75711: LD_INT 0
75713: PPUSH
75714: PPUSH
75715: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75716: LD_STRING resetFactoryWaypoint();
75718: PPUSH
75719: CALL_OW 559
// if factoryWaypoints then
75723: LD_EXP 101
75727: IFFALSE 75853
// begin list := PrepareArray ( factoryWaypoints ) ;
75729: LD_ADDR_VAR 0 3
75733: PUSH
75734: LD_EXP 101
75738: PPUSH
75739: CALL 56511 0 1
75743: ST_TO_ADDR
// for i := 1 to list do
75744: LD_ADDR_VAR 0 2
75748: PUSH
75749: DOUBLE
75750: LD_INT 1
75752: DEC
75753: ST_TO_ADDR
75754: LD_VAR 0 3
75758: PUSH
75759: FOR_TO
75760: IFFALSE 75851
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75762: LD_STRING setFactoryWaypointXY(
75764: PUSH
75765: LD_VAR 0 3
75769: PUSH
75770: LD_VAR 0 2
75774: ARRAY
75775: PUSH
75776: LD_INT 1
75778: ARRAY
75779: STR
75780: PUSH
75781: LD_STRING ,
75783: STR
75784: PUSH
75785: LD_VAR 0 3
75789: PUSH
75790: LD_VAR 0 2
75794: ARRAY
75795: PUSH
75796: LD_INT 2
75798: ARRAY
75799: STR
75800: PUSH
75801: LD_STRING ,
75803: STR
75804: PUSH
75805: LD_VAR 0 3
75809: PUSH
75810: LD_VAR 0 2
75814: ARRAY
75815: PUSH
75816: LD_INT 3
75818: ARRAY
75819: STR
75820: PUSH
75821: LD_STRING ,
75823: STR
75824: PUSH
75825: LD_VAR 0 3
75829: PUSH
75830: LD_VAR 0 2
75834: ARRAY
75835: PUSH
75836: LD_INT 4
75838: ARRAY
75839: STR
75840: PUSH
75841: LD_STRING )
75843: STR
75844: PPUSH
75845: CALL_OW 559
75849: GO 75759
75851: POP
75852: POP
// end ; end ;
75853: LD_VAR 0 1
75857: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75858: LD_INT 0
75860: PPUSH
// if HexInfo ( x , y ) = warehouse then
75861: LD_VAR 0 2
75865: PPUSH
75866: LD_VAR 0 3
75870: PPUSH
75871: CALL_OW 428
75875: PUSH
75876: LD_VAR 0 1
75880: EQUAL
75881: IFFALSE 75908
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75883: LD_ADDR_EXP 102
75887: PUSH
75888: LD_EXP 102
75892: PPUSH
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_INT 0
75900: PPUSH
75901: CALL_OW 1
75905: ST_TO_ADDR
75906: GO 75959
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75908: LD_ADDR_EXP 102
75912: PUSH
75913: LD_EXP 102
75917: PPUSH
75918: LD_VAR 0 1
75922: PPUSH
75923: LD_VAR 0 1
75927: PPUSH
75928: CALL_OW 255
75932: PUSH
75933: LD_VAR 0 1
75937: PUSH
75938: LD_VAR 0 2
75942: PUSH
75943: LD_VAR 0 3
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: PPUSH
75954: CALL_OW 1
75958: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75959: CALL 75968 0 0
// end ;
75963: LD_VAR 0 4
75967: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75968: LD_INT 0
75970: PPUSH
75971: PPUSH
75972: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75973: LD_STRING resetWarehouseGatheringPoints();
75975: PPUSH
75976: CALL_OW 559
// if warehouseGatheringPoints then
75980: LD_EXP 102
75984: IFFALSE 76110
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75986: LD_ADDR_VAR 0 3
75990: PUSH
75991: LD_EXP 102
75995: PPUSH
75996: CALL 56511 0 1
76000: ST_TO_ADDR
// for i := 1 to list do
76001: LD_ADDR_VAR 0 2
76005: PUSH
76006: DOUBLE
76007: LD_INT 1
76009: DEC
76010: ST_TO_ADDR
76011: LD_VAR 0 3
76015: PUSH
76016: FOR_TO
76017: IFFALSE 76108
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76019: LD_STRING setWarehouseGatheringPointXY(
76021: PUSH
76022: LD_VAR 0 3
76026: PUSH
76027: LD_VAR 0 2
76031: ARRAY
76032: PUSH
76033: LD_INT 1
76035: ARRAY
76036: STR
76037: PUSH
76038: LD_STRING ,
76040: STR
76041: PUSH
76042: LD_VAR 0 3
76046: PUSH
76047: LD_VAR 0 2
76051: ARRAY
76052: PUSH
76053: LD_INT 2
76055: ARRAY
76056: STR
76057: PUSH
76058: LD_STRING ,
76060: STR
76061: PUSH
76062: LD_VAR 0 3
76066: PUSH
76067: LD_VAR 0 2
76071: ARRAY
76072: PUSH
76073: LD_INT 3
76075: ARRAY
76076: STR
76077: PUSH
76078: LD_STRING ,
76080: STR
76081: PUSH
76082: LD_VAR 0 3
76086: PUSH
76087: LD_VAR 0 2
76091: ARRAY
76092: PUSH
76093: LD_INT 4
76095: ARRAY
76096: STR
76097: PUSH
76098: LD_STRING )
76100: STR
76101: PPUSH
76102: CALL_OW 559
76106: GO 76016
76108: POP
76109: POP
// end ; end ;
76110: LD_VAR 0 1
76114: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76115: LD_EXP 102
76119: IFFALSE 76804
76121: GO 76123
76123: DISABLE
76124: LD_INT 0
76126: PPUSH
76127: PPUSH
76128: PPUSH
76129: PPUSH
76130: PPUSH
76131: PPUSH
76132: PPUSH
76133: PPUSH
76134: PPUSH
// begin enable ;
76135: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76136: LD_ADDR_VAR 0 3
76140: PUSH
76141: LD_EXP 102
76145: PPUSH
76146: CALL 56511 0 1
76150: ST_TO_ADDR
// if not list then
76151: LD_VAR 0 3
76155: NOT
76156: IFFALSE 76160
// exit ;
76158: GO 76804
// for i := 1 to list do
76160: LD_ADDR_VAR 0 1
76164: PUSH
76165: DOUBLE
76166: LD_INT 1
76168: DEC
76169: ST_TO_ADDR
76170: LD_VAR 0 3
76174: PUSH
76175: FOR_TO
76176: IFFALSE 76802
// begin depot := list [ i ] [ 2 ] ;
76178: LD_ADDR_VAR 0 8
76182: PUSH
76183: LD_VAR 0 3
76187: PUSH
76188: LD_VAR 0 1
76192: ARRAY
76193: PUSH
76194: LD_INT 2
76196: ARRAY
76197: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76198: LD_ADDR_VAR 0 5
76202: PUSH
76203: LD_VAR 0 3
76207: PUSH
76208: LD_VAR 0 1
76212: ARRAY
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76218: LD_VAR 0 8
76222: PPUSH
76223: CALL_OW 301
76227: PUSH
76228: LD_VAR 0 5
76232: PUSH
76233: LD_VAR 0 8
76237: PPUSH
76238: CALL_OW 255
76242: NONEQUAL
76243: OR
76244: IFFALSE 76273
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76246: LD_ADDR_EXP 102
76250: PUSH
76251: LD_EXP 102
76255: PPUSH
76256: LD_VAR 0 8
76260: PPUSH
76261: LD_INT 0
76263: PPUSH
76264: CALL_OW 1
76268: ST_TO_ADDR
// exit ;
76269: POP
76270: POP
76271: GO 76804
// end ; x := list [ i ] [ 3 ] ;
76273: LD_ADDR_VAR 0 6
76277: PUSH
76278: LD_VAR 0 3
76282: PUSH
76283: LD_VAR 0 1
76287: ARRAY
76288: PUSH
76289: LD_INT 3
76291: ARRAY
76292: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76293: LD_ADDR_VAR 0 7
76297: PUSH
76298: LD_VAR 0 3
76302: PUSH
76303: LD_VAR 0 1
76307: ARRAY
76308: PUSH
76309: LD_INT 4
76311: ARRAY
76312: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76313: LD_ADDR_VAR 0 9
76317: PUSH
76318: LD_VAR 0 6
76322: PPUSH
76323: LD_VAR 0 7
76327: PPUSH
76328: LD_INT 16
76330: PPUSH
76331: CALL 55099 0 3
76335: ST_TO_ADDR
// if not cratesNearbyPoint then
76336: LD_VAR 0 9
76340: NOT
76341: IFFALSE 76347
// exit ;
76343: POP
76344: POP
76345: GO 76804
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76347: LD_ADDR_VAR 0 4
76351: PUSH
76352: LD_INT 22
76354: PUSH
76355: LD_VAR 0 5
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 3
76366: PUSH
76367: LD_INT 60
76369: PUSH
76370: EMPTY
76371: LIST
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 91
76379: PUSH
76380: LD_VAR 0 8
76384: PUSH
76385: LD_INT 6
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 2
76395: PUSH
76396: LD_INT 25
76398: PUSH
76399: LD_INT 2
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PUSH
76406: LD_INT 25
76408: PUSH
76409: LD_INT 16
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: LIST
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: PPUSH
76427: CALL_OW 69
76431: PUSH
76432: LD_VAR 0 8
76436: PPUSH
76437: CALL_OW 313
76441: PPUSH
76442: LD_INT 3
76444: PUSH
76445: LD_INT 60
76447: PUSH
76448: EMPTY
76449: LIST
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: PUSH
76455: LD_INT 2
76457: PUSH
76458: LD_INT 25
76460: PUSH
76461: LD_INT 2
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 25
76470: PUSH
76471: LD_INT 16
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: LIST
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: PPUSH
76487: CALL_OW 72
76491: UNION
76492: ST_TO_ADDR
// if tmp then
76493: LD_VAR 0 4
76497: IFFALSE 76577
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76499: LD_ADDR_VAR 0 4
76503: PUSH
76504: LD_VAR 0 4
76508: PPUSH
76509: LD_INT 3
76511: PPUSH
76512: CALL 53068 0 2
76516: ST_TO_ADDR
// for j in tmp do
76517: LD_ADDR_VAR 0 2
76521: PUSH
76522: LD_VAR 0 4
76526: PUSH
76527: FOR_IN
76528: IFFALSE 76571
// begin if IsInUnit ( j ) then
76530: LD_VAR 0 2
76534: PPUSH
76535: CALL_OW 310
76539: IFFALSE 76550
// ComExit ( j ) ;
76541: LD_VAR 0 2
76545: PPUSH
76546: CALL 53151 0 1
// AddComCollect ( j , x , y ) ;
76550: LD_VAR 0 2
76554: PPUSH
76555: LD_VAR 0 6
76559: PPUSH
76560: LD_VAR 0 7
76564: PPUSH
76565: CALL_OW 177
// end ;
76569: GO 76527
76571: POP
76572: POP
// exit ;
76573: POP
76574: POP
76575: GO 76804
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76577: LD_ADDR_VAR 0 4
76581: PUSH
76582: LD_INT 22
76584: PUSH
76585: LD_VAR 0 5
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 91
76596: PUSH
76597: LD_VAR 0 8
76601: PUSH
76602: LD_INT 8
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: LIST
76609: PUSH
76610: LD_INT 2
76612: PUSH
76613: LD_INT 34
76615: PUSH
76616: LD_INT 12
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 34
76625: PUSH
76626: LD_INT 51
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 34
76635: PUSH
76636: LD_INT 32
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 34
76645: PUSH
76646: LD_INT 89
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: LIST
76664: PPUSH
76665: CALL_OW 69
76669: ST_TO_ADDR
// if tmp then
76670: LD_VAR 0 4
76674: IFFALSE 76800
// begin for j in tmp do
76676: LD_ADDR_VAR 0 2
76680: PUSH
76681: LD_VAR 0 4
76685: PUSH
76686: FOR_IN
76687: IFFALSE 76798
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76689: LD_VAR 0 2
76693: PPUSH
76694: CALL_OW 262
76698: PUSH
76699: LD_INT 3
76701: EQUAL
76702: PUSH
76703: LD_VAR 0 2
76707: PPUSH
76708: CALL_OW 261
76712: PUSH
76713: LD_INT 20
76715: GREATER
76716: OR
76717: PUSH
76718: LD_VAR 0 2
76722: PPUSH
76723: CALL_OW 314
76727: NOT
76728: AND
76729: PUSH
76730: LD_VAR 0 2
76734: PPUSH
76735: CALL_OW 263
76739: PUSH
76740: LD_INT 1
76742: NONEQUAL
76743: PUSH
76744: LD_VAR 0 2
76748: PPUSH
76749: CALL_OW 311
76753: OR
76754: AND
76755: IFFALSE 76796
// begin ComCollect ( j , x , y ) ;
76757: LD_VAR 0 2
76761: PPUSH
76762: LD_VAR 0 6
76766: PPUSH
76767: LD_VAR 0 7
76771: PPUSH
76772: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76776: LD_VAR 0 2
76780: PPUSH
76781: LD_VAR 0 8
76785: PPUSH
76786: CALL_OW 172
// exit ;
76790: POP
76791: POP
76792: POP
76793: POP
76794: GO 76804
// end ;
76796: GO 76686
76798: POP
76799: POP
// end ; end ;
76800: GO 76175
76802: POP
76803: POP
// end ; end_of_file
76804: PPOPN 9
76806: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76807: LD_VAR 0 1
76811: PPUSH
76812: LD_VAR 0 2
76816: PPUSH
76817: LD_VAR 0 3
76821: PPUSH
76822: LD_VAR 0 4
76826: PPUSH
76827: LD_VAR 0 5
76831: PPUSH
76832: LD_VAR 0 6
76836: PPUSH
76837: CALL 61209 0 6
// end ;
76841: PPOPN 6
76843: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76844: LD_INT 0
76846: PPUSH
// begin if not units then
76847: LD_VAR 0 1
76851: NOT
76852: IFFALSE 76856
// exit ;
76854: GO 76856
// end ;
76856: PPOPN 7
76858: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76859: CALL 61180 0 0
// end ; end_of_file
76863: PPOPN 1
76865: END
