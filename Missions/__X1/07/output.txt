// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2534 0 0
// PrepareArabian ;
  32: CALL 1165 0 0
// Action ;
  36: CALL 8376 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: IFTRUE 800
 793: PUSH
 794: LD_VAR 0 2
 798: NOT
 799: OR
 800: IFFALSE 804
// exit ;
 802: GO 852
// if not See ( GetSide ( observer ) , unit ) then
 804: LD_VAR 0 1
 808: PPUSH
 809: CALL_OW 255
 813: PPUSH
 814: LD_VAR 0 2
 818: PPUSH
 819: CALL_OW 292
 823: NOT
 824: IFFALSE 828
// exit ;
 826: GO 852
// result := GetDistUnits ( observer , unit ) < 12 ;
 828: LD_ADDR_VAR 0 3
 832: PUSH
 833: LD_VAR 0 1
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 296
 847: PUSH
 848: LD_INT 12
 850: LESS
 851: ST_TO_ADDR
// end ;
 852: LD_VAR 0 3
 856: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 857: LD_INT 0
 859: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: CALL_OW 488
 882: IFFALSE 912
 884: PUSH
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: CALL_OW 428
 907: PUSH
 908: LD_INT 0
 910: EQUAL
 911: AND
 912: IFFALSE 946
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 3
 941: PPUSH
 942: CALL_OW 48
// end ;
 946: LD_VAR 0 4
 950: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 951: LD_INT 0
 953: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_VAR 0 4
 973: PPUSH
 974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 978: LD_VAR 0 1
 982: PPUSH
 983: LD_VAR 0 2
 987: PPUSH
 988: LD_VAR 0 3
 992: PPUSH
 993: CALL_OW 331
// end ;
 997: LD_VAR 0 5
1001: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1002: LD_INT 0
1004: PPUSH
// if not units then
1005: LD_VAR 0 1
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1097
// result := true ;
1014: LD_ADDR_VAR 0 4
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PPUSH
1051: CALL_OW 88
1055: NOT
1056: IFFALSE 1097
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 2
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: LD_VAR 0 3
1091: PPUSH
1092: CALL_OW 88
1096: ST_TO_ADDR
// end ;
1097: LD_VAR 0 4
1101: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
// if not group then
1106: LD_VAR 0 2
1110: NOT
1111: IFFALSE 1115
// exit ;
1113: GO 1160
// for i in group do
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_VAR 0 2
1124: PUSH
1125: FOR_IN
1126: IFFALSE 1158
// if See ( side , i ) then
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 4
1137: PPUSH
1138: CALL_OW 292
1142: IFFALSE 1156
// begin result := true ;
1144: LD_ADDR_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// exit ;
1152: POP
1153: POP
1154: GO 1160
// end ;
1156: GO 1125
1158: POP
1159: POP
// end ; end_of_file
1160: LD_VAR 0 3
1164: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
1171: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: LD_STRING 05_DrugsTested
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 30
1189: ST_TO_ADDR
// if hasDrugs then
1190: LD_VAR 0 5
1194: IFFALSE 1209
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1196: LD_INT 5
1198: PPUSH
1199: LD_INT 2
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 322
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// uc_side := 5 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1225: LD_ADDR_EXP 23
1229: PUSH
1230: LD_STRING Abdul
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: LD_STRING 
1238: PPUSH
1239: CALL 17053 0 3
1243: ST_TO_ADDR
// uc_side := 2 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 2
1251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1252: LD_ADDR_EXP 15
1256: PUSH
1257: LD_STRING Heike
1259: PPUSH
1260: LD_EXP 1
1264: NOT
1265: PPUSH
1266: LD_EXP 2
1270: PPUSH
1271: CALL 17053 0 3
1275: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1276: LD_ADDR_EXP 18
1280: PUSH
1281: LD_STRING Ibrahim
1283: PPUSH
1284: LD_EXP 1
1288: NOT
1289: PPUSH
1290: LD_EXP 2
1294: PPUSH
1295: CALL 17053 0 3
1299: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1300: LD_ADDR_EXP 16
1304: PUSH
1305: LD_STRING Givi
1307: PPUSH
1308: LD_EXP 1
1312: NOT
1313: PPUSH
1314: LD_EXP 2
1318: PPUSH
1319: CALL 17053 0 3
1323: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 19
1328: PUSH
1329: LD_STRING Kamil
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 17053 0 3
1347: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 20
1352: PUSH
1353: LD_STRING Kaia
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 17053 0 3
1371: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 21
1376: PUSH
1377: LD_STRING Sophia
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 17053 0 3
1395: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 22
1400: PUSH
1401: LD_STRING Markov
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 17053 0 3
1419: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 26
1424: PUSH
1425: LD_STRING Aviradze
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 17053 0 3
1443: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 25
1448: PUSH
1449: LD_STRING Kurt
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 17053 0 3
1467: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 17
1472: PUSH
1473: LD_STRING Mike
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 17053 0 3
1491: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 24
1496: PUSH
1497: LD_STRING Olaf
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 17053 0 3
1515: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1516: LD_ADDR_EXP 27
1520: PUSH
1521: LD_STRING 06_others
1523: PPUSH
1524: CALL_OW 31
1528: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1529: LD_ADDR_EXP 28
1533: PUSH
1534: LD_STRING 06_apes
1536: PPUSH
1537: CALL_OW 31
1541: ST_TO_ADDR
// if debug then
1542: LD_EXP 1
1546: IFFALSE 1819
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1548: LD_ADDR_VAR 0 3
1552: PUSH
1553: LD_INT 14
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 2
1561: PUSH
1562: LD_INT 25
1564: PUSH
1565: LD_INT 2
1567: PUSH
1568: LD_INT 1000
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 14
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: LD_INT 2
1597: PUSH
1598: LD_INT 1000
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 14
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 27
1624: PUSH
1625: LD_INT 2
1627: PUSH
1628: LD_INT 750
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 14
1645: PUSH
1646: LD_INT 1
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: LD_INT 27
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 900
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 14
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: LD_INT 2
1687: PUSH
1688: LD_INT 1000
1690: PUSH
1691: LD_INT 100
1693: PUSH
1694: LD_INT 0
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 14
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 50
1730: PUSH
1731: LD_INT 50
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 14
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 27
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: LD_INT 1000
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 14
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: LD_INT 1
1785: PUSH
1786: LD_INT 92
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 1000
1794: PUSH
1795: LD_INT 0
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// end else
1817: GO 1826
// tmp := [ ] ;
1819: LD_ADDR_VAR 0 3
1823: PUSH
1824: EMPTY
1825: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1826: LD_ADDR_EXP 29
1830: PUSH
1831: LD_STRING 06_Vehicles
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: CALL_OW 30
1843: ST_TO_ADDR
// counter := 0 ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 0
1851: ST_TO_ADDR
// if heikeVehicles then
1852: LD_EXP 29
1856: IFFALSE 1978
// begin for i := heikeVehicles downto 1 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_EXP 29
1868: INC
1869: ST_TO_ADDR
1870: LD_INT 1
1872: PUSH
1873: FOR_DOWNTO
1874: IFFALSE 1976
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1876: LD_EXP 29
1880: PUSH
1881: LD_VAR 0 2
1885: ARRAY
1886: PUSH
1887: LD_INT 3
1889: ARRAY
1890: PUSH
1891: LD_INT 2
1893: EQUAL
1894: IFFALSE 1974
// begin if counter < remoteControlLimit then
1896: LD_VAR 0 4
1900: PUSH
1901: LD_EXP 12
1905: LESS
1906: IFFALSE 1954
// begin counter := Inc ( counter ) ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: LD_VAR 0 4
1917: PPUSH
1918: CALL 56626 0 1
1922: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1923: LD_ADDR_EXP 29
1927: PUSH
1928: LD_EXP 29
1932: PPUSH
1933: LD_EXP 29
1937: PPUSH
1938: LD_EXP 29
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: CALL_OW 2
1953: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1954: LD_ADDR_EXP 29
1958: PUSH
1959: LD_EXP 29
1963: PPUSH
1964: LD_VAR 0 2
1968: PPUSH
1969: CALL_OW 3
1973: ST_TO_ADDR
// end ; end ;
1974: GO 1873
1976: POP
1977: POP
// end ; end ;
1978: LD_VAR 0 1
1982: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1983: LD_EXP 3
1987: IFFALSE 2531
1989: GO 1991
1991: DISABLE
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_INT 96
2003: PUSH
2004: LD_INT 50
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 49
2013: PUSH
2014: LD_INT 52
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 34
2023: PUSH
2024: LD_INT 55
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 41
2033: PUSH
2034: LD_INT 70
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 53
2043: PUSH
2044: LD_INT 96
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 103
2053: PUSH
2054: LD_INT 64
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 104
2071: PUSH
2072: LD_INT 70
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 111
2081: PUSH
2082: LD_INT 103
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 131
2091: PUSH
2092: LD_INT 147
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 130
2101: PUSH
2102: LD_INT 153
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 110
2111: PUSH
2112: LD_INT 93
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 103
2121: PUSH
2122: LD_INT 65
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// for i in tmp [ 1 ] do
2141: LD_ADDR_VAR 0 1
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 1
2153: ARRAY
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2208
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2158: LD_EXP 17
2162: PPUSH
2163: LD_VAR 0 1
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 1
2176: PUSH
2177: LD_INT 2
2179: ARRAY
2180: PPUSH
2181: CALL_OW 174
// AddComHold ( Mike ) ;
2185: LD_EXP 17
2189: PPUSH
2190: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2194: LD_EXP 17
2198: PPUSH
2199: LD_INT 175
2201: PPUSH
2202: CALL_OW 202
// end ;
2206: GO 2155
2208: POP
2209: POP
// for i in tmp [ 2 ] do
2210: LD_ADDR_VAR 0 1
2214: PUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_INT 2
2222: ARRAY
2223: PUSH
2224: FOR_IN
2225: IFFALSE 2277
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2227: LD_EXP 25
2231: PPUSH
2232: LD_VAR 0 1
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: LD_VAR 0 1
2245: PUSH
2246: LD_INT 2
2248: ARRAY
2249: PPUSH
2250: CALL_OW 174
// AddComHold ( Kurt ) ;
2254: LD_EXP 25
2258: PPUSH
2259: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2263: LD_EXP 25
2267: PPUSH
2268: LD_INT 175
2270: PPUSH
2271: CALL_OW 202
// end ;
2275: GO 2224
2277: POP
2278: POP
// wait ( 2 2$00 ) ;
2279: LD_INT 4200
2281: PPUSH
2282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2286: LD_INT 35
2288: PPUSH
2289: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2293: LD_EXP 17
2297: PPUSH
2298: CALL_OW 314
2302: NOT
2303: IFTRUE 2316
2305: PUSH
2306: LD_EXP 17
2310: PPUSH
2311: CALL_OW 301
2315: OR
2316: IFFALSE 2343
2318: PUSH
2319: LD_EXP 25
2323: PPUSH
2324: CALL_OW 314
2328: NOT
2329: IFTRUE 2342
2331: PUSH
2332: LD_EXP 25
2336: PPUSH
2337: CALL_OW 301
2341: OR
2342: AND
2343: IFFALSE 2286
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2345: LD_EXP 25
2349: PPUSH
2350: CALL_OW 301
2354: IFFALSE 2367
2356: PUSH
2357: LD_EXP 17
2361: PPUSH
2362: CALL_OW 301
2366: AND
2367: IFFALSE 2379
// begin scoutFailed := true ;
2369: LD_ADDR_EXP 4
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// exit ;
2377: GO 2531
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2379: LD_EXP 25
2383: PUSH
2384: LD_EXP 17
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: LD_INT 132
2395: PPUSH
2396: LD_INT 52
2398: PPUSH
2399: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2403: LD_EXP 25
2407: PUSH
2408: LD_EXP 17
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: LD_INT 22
2419: PUSH
2420: LD_INT 2
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2440: LD_INT 35
2442: PPUSH
2443: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 25
2454: PPUSH
2455: CALL_OW 292
2459: IFTRUE 2475
2461: PUSH
2462: LD_INT 2
2464: PPUSH
2465: LD_EXP 17
2469: PPUSH
2470: CALL_OW 292
2474: OR
2475: IFFALSE 2440
// if IsLive ( Kurt ) then
2477: LD_EXP 25
2481: PPUSH
2482: CALL_OW 300
2486: IFFALSE 2500
// SetSide ( Kurt , 2 ) ;
2488: LD_EXP 25
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: CALL_OW 235
// if IsLive ( Mike ) then
2500: LD_EXP 17
2504: PPUSH
2505: CALL_OW 300
2509: IFFALSE 2523
// SetSide ( Mike , 2 ) ;
2511: LD_EXP 17
2515: PPUSH
2516: LD_INT 2
2518: PPUSH
2519: CALL_OW 235
// scoutSuccess := true ;
2523: LD_ADDR_EXP 5
2527: PUSH
2528: LD_INT 1
2530: ST_TO_ADDR
// end ; end_of_file
2531: PPOPN 2
2533: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
// uc_side := 1 ;
2540: LD_ADDR_OWVAR 20
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// uc_nation := 1 ;
2548: LD_ADDR_OWVAR 21
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 1500
2569: PUSH
2570: LD_INT 2200
2572: PUSH
2573: LD_INT 3500
2575: PUSH
2576: LD_INT 3900
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2595: LD_INT 1
2597: PPUSH
2598: CALL_OW 274
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 800
2608: PPUSH
2609: CALL_OW 277
// usForces := [ ] ;
2613: LD_ADDR_EXP 31
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usToBuild := [ ] ;
2620: LD_ADDR_EXP 33
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2627: LD_ADDR_EXP 34
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// usCratesCollector := [ ] ;
2634: LD_ADDR_EXP 35
2638: PUSH
2639: EMPTY
2640: ST_TO_ADDR
// for i := 1 to 3 do
2641: LD_ADDR_VAR 0 2
2645: PUSH
2646: DOUBLE
2647: LD_INT 1
2649: DEC
2650: ST_TO_ADDR
2651: LD_INT 3
2653: PUSH
2654: FOR_TO
2655: IFFALSE 2709
// begin PrepareApemanEngineer ( ) ;
2657: CALL 51278 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2661: LD_ADDR_EXP 35
2665: PUSH
2666: LD_EXP 35
2670: PPUSH
2671: CALL_OW 44
2675: PPUSH
2676: CALL 55253 0 2
2680: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2681: LD_EXP 35
2685: PPUSH
2686: CALL 60080 0 1
2690: PPUSH
2691: LD_INT 81
2693: PPUSH
2694: LD_INT 142
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 50
// end ;
2707: GO 2654
2709: POP
2710: POP
// InitHc ;
2711: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: LD_INT 21
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: FOR_IN
2736: IFFALSE 2773
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2738: LD_VAR 0 2
2742: PPUSH
2743: LD_INT 6
2745: PUSH
2746: LD_INT 7
2748: PUSH
2749: LD_INT 8
2751: PUSH
2752: LD_INT 8
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_OWVAR 67
2765: ARRAY
2766: PPUSH
2767: CALL_OW 241
2771: GO 2735
2773: POP
2774: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 32
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 69
2794: PUSH
2795: FOR_IN
2796: IFFALSE 2886
// begin if GetBWeapon ( i ) = us_radar then
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 269
2807: PUSH
2808: LD_INT 11
2810: EQUAL
2811: IFFALSE 2836
// begin uc_nation := 0 ;
2813: LD_ADDR_OWVAR 21
2817: PUSH
2818: LD_INT 0
2820: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 16
2826: PPUSH
2827: LD_INT 2
2829: PPUSH
2830: CALL_OW 380
// end else
2834: GO 2870
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2836: LD_INT 0
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 5
2844: PUSH
2845: LD_INT 6
2847: PUSH
2848: LD_INT 7
2850: PUSH
2851: LD_INT 8
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PPUSH
2866: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2870: CALL_OW 44
2874: PPUSH
2875: LD_VAR 0 2
2879: PPUSH
2880: CALL_OW 52
// end ;
2884: GO 2795
2886: POP
2887: POP
// b := HexInfo ( 74 , 120 ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_INT 74
2895: PPUSH
2896: LD_INT 120
2898: PPUSH
2899: CALL_OW 428
2903: ST_TO_ADDR
// uc_nation := 1 ;
2904: LD_ADDR_OWVAR 21
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: DOUBLE
2918: LD_INT 1
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 1
2924: PUSH
2925: LD_INT 2
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 4
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: LD_OWVAR 67
2944: ARRAY
2945: PUSH
2946: FOR_TO
2947: IFFALSE 2999
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 5
2957: PUSH
2958: LD_INT 6
2960: PUSH
2961: LD_INT 7
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PPUSH
2979: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2946
2999: POP
3000: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
3001: LD_VAR 0 3
3005: PPUSH
3006: CALL_OW 313
3010: PPUSH
3011: LD_INT 5
3013: PPUSH
3014: CALL_OW 336
// for i := 1 to 6 do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 6
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3082
// begin PrepareHuman ( false , 4 , 6 ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_INT 6
3042: PPUSH
3043: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3047: CALL_OW 44
3051: PPUSH
3052: LD_INT 32
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_VAR 0 2
3066: PUSH
3067: LD_INT 2
3069: MOD
3070: PUSH
3071: LD_INT 1
3073: PLUS
3074: ARRAY
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: GO 3031
3082: POP
3083: POP
// for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3127
// begin PrepareHuman ( false , 3 , 6 ) ;
3100: LD_INT 0
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3113: CALL_OW 44
3117: PPUSH
3118: LD_INT 25
3120: PPUSH
3121: CALL_OW 52
// end ;
3125: GO 3097
3127: POP
3128: POP
// for i := 1 to 3 do
3129: LD_ADDR_VAR 0 2
3133: PUSH
3134: DOUBLE
3135: LD_INT 1
3137: DEC
3138: ST_TO_ADDR
3139: LD_INT 3
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3201
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3145: LD_INT 0
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 6
3153: PUSH
3154: LD_INT 7
3156: PUSH
3157: LD_INT 7
3159: PUSH
3160: LD_INT 7
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: PUSH
3169: LD_OWVAR 67
3173: ARRAY
3174: PPUSH
3175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3179: CALL_OW 44
3183: PPUSH
3184: LD_INT 78
3186: PPUSH
3187: LD_INT 130
3189: PPUSH
3190: CALL_OW 428
3194: PPUSH
3195: CALL_OW 52
// end ;
3199: GO 3142
3201: POP
3202: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: DOUBLE
3209: LD_INT 1
3211: DEC
3212: ST_TO_ADDR
3213: LD_INT 1
3215: PUSH
3216: LD_INT 2
3218: PUSH
3219: LD_INT 3
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_OWVAR 67
3235: ARRAY
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3325
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3240: LD_INT 2
3242: PPUSH
3243: LD_INT 2
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 13
3251: PPUSH
3252: LD_INT 100
3254: PPUSH
3255: CALL 22073 0 5
// veh := CreateVehicle ;
3259: LD_ADDR_VAR 0 4
3263: PUSH
3264: CALL_OW 45
3268: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3281: LD_VAR 0 4
3285: PPUSH
3286: LD_INT 9
3288: PPUSH
3289: LD_INT 0
3291: PPUSH
3292: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3296: LD_INT 0
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 6
3304: PPUSH
3305: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3309: CALL_OW 44
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 52
// end ;
3323: GO 3237
3325: POP
3326: POP
// InitHc ;
3327: CALL_OW 19
// hc_gallery := sandar ;
3331: LD_ADDR_OWVAR 33
3335: PUSH
3336: LD_STRING sandar
3338: ST_TO_ADDR
// hc_face_number := 38 ;
3339: LD_ADDR_OWVAR 34
3343: PUSH
3344: LD_INT 38
3346: ST_TO_ADDR
// hc_name := Doug Callahan ;
3347: LD_ADDR_OWVAR 26
3351: PUSH
3352: LD_STRING Doug Callahan
3354: ST_TO_ADDR
// hc_class := class_engineer ;
3355: LD_ADDR_OWVAR 28
3359: PUSH
3360: LD_INT 2
3362: ST_TO_ADDR
// hc_sex := sex_male ;
3363: LD_ADDR_OWVAR 27
3367: PUSH
3368: LD_INT 1
3370: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3371: LD_ADDR_OWVAR 29
3375: PUSH
3376: LD_INT 10
3378: PUSH
3379: LD_INT 11
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3386: LD_ADDR_OWVAR 30
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 1
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3409: LD_ADDR_OWVAR 31
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: ST_TO_ADDR
// usCommander := CreateHuman ;
3432: LD_ADDR_EXP 30
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3442: LD_EXP 30
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3454: LD_INT 2
3456: PPUSH
3457: LD_EXP 30
3461: PPUSH
3462: CALL_OW 471
// InitHC_All ( ) ;
3466: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3470: LD_INT 2
3472: PPUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_INT 2
3478: PPUSH
3479: LD_INT 12
3481: PPUSH
3482: LD_INT 100
3484: PPUSH
3485: CALL 22073 0 5
// usCargo := CreateVehicle ;
3489: LD_ADDR_EXP 32
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3499: LD_EXP 32
3503: PPUSH
3504: LD_INT 81
3506: PPUSH
3507: LD_INT 143
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL_OW 48
// Connect ( usCargo ) ;
3517: LD_EXP 32
3521: PPUSH
3522: CALL 25555 0 1
// DoNotAttack ( 5 , usCargo ) ;
3526: LD_INT 5
3528: PPUSH
3529: LD_EXP 32
3533: PPUSH
3534: CALL_OW 471
// end ;
3538: LD_VAR 0 1
3542: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3543: LD_EXP 6
3547: IFFALSE 3558
3549: PUSH
3550: LD_INT 25
3552: PPUSH
3553: CALL_OW 302
3557: AND
3558: IFFALSE 3573
3560: PUSH
3561: LD_INT 25
3563: PPUSH
3564: CALL_OW 461
3568: PUSH
3569: LD_INT 2
3571: EQUAL
3572: AND
3573: IFFALSE 3730
3575: GO 3577
3577: DISABLE
3578: LD_INT 0
3580: PPUSH
3581: PPUSH
3582: PPUSH
// begin enable ;
3583: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3584: LD_ADDR_VAR 0 1
3588: PUSH
3589: DOUBLE
3590: LD_INT 1
3592: DEC
3593: ST_TO_ADDR
3594: LD_INT 4
3596: PUSH
3597: LD_INT 5
3599: PUSH
3600: LD_INT 6
3602: PUSH
3603: LD_INT 6
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: LD_OWVAR 67
3616: ARRAY
3617: PUSH
3618: FOR_TO
3619: IFFALSE 3728
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3652: LD_VAR 0 2
3656: PUSH
3657: LD_INT 4
3659: EQUAL
3660: IFFALSE 3672
// weapon := us_heavy_gun else
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: LD_INT 6
3669: ST_TO_ADDR
3670: GO 3703
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: LD_INT 7
3682: PUSH
3683: LD_INT 4
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 3
3696: PPUSH
3697: CALL_OW 12
3701: ARRAY
3702: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3703: LD_INT 25
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_INT 2
3716: PPUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 185
// end ;
3726: GO 3618
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$01 do var i , un , tmp ;
3733: GO 3735
3735: DISABLE
3736: LD_INT 0
3738: PPUSH
3739: PPUSH
3740: PPUSH
// begin if Difficulty < 2 then
3741: LD_OWVAR 67
3745: PUSH
3746: LD_INT 2
3748: LESS
3749: IFFALSE 3753
// exit ;
3751: GO 4036
// tmp := [ ] ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// for i := 1 to Difficulty do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_OWVAR 67
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3872
// begin uc_side := 4 ;
3778: LD_ADDR_OWVAR 20
3782: PUSH
3783: LD_INT 4
3785: ST_TO_ADDR
// uc_nation := nation_american ;
3786: LD_ADDR_OWVAR 21
3790: PUSH
3791: LD_INT 1
3793: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3794: LD_INT 0
3796: PPUSH
3797: LD_INT 3
3799: PUSH
3800: LD_INT 4
3802: PUSH
3803: LD_INT 5
3805: PUSH
3806: LD_INT 6
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: LD_OWVAR 67
3819: ARRAY
3820: PPUSH
3821: CALL_OW 381
// un := CreateHuman ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: CALL 55253 0 2
3854: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3855: LD_VAR 0 2
3859: PPUSH
3860: LD_INT 19
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 49
// end ;
3870: GO 3775
3872: POP
3873: POP
// for i in tmp do
3874: LD_ADDR_VAR 0 1
3878: PUSH
3879: LD_VAR 0 3
3883: PUSH
3884: FOR_IN
3885: IFFALSE 3931
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_INT 54
3894: PPUSH
3895: LD_INT 51
3897: PPUSH
3898: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3902: LD_VAR 0 1
3906: PPUSH
3907: LD_INT 700
3909: PPUSH
3910: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 35
3921: PPUSH
3922: LD_INT 6
3924: PPUSH
3925: CALL_OW 174
// end ;
3929: GO 3884
3931: POP
3932: POP
// repeat wait ( 7 7$00 ) ;
3933: LD_INT 14700
3935: PPUSH
3936: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_VAR 0 3
3949: PPUSH
3950: LD_INT 50
3952: PUSH
3953: EMPTY
3954: LIST
3955: PPUSH
3956: CALL_OW 72
3960: ST_TO_ADDR
// if not tmp then
3961: LD_VAR 0 3
3965: NOT
3966: IFFALSE 3970
// exit ;
3968: GO 4036
// for i in tmp do
3970: LD_ADDR_VAR 0 1
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: FOR_IN
3981: IFFALSE 4027
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_INT 54
3990: PPUSH
3991: LD_INT 51
3993: PPUSH
3994: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3998: LD_VAR 0 1
4002: PPUSH
4003: LD_INT 700
4005: PPUSH
4006: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 35
4017: PPUSH
4018: LD_INT 6
4020: PPUSH
4021: CALL_OW 174
// end ;
4025: GO 3980
4027: POP
4028: POP
// until not tmp ;
4029: LD_VAR 0 3
4033: NOT
4034: IFFALSE 3933
// end ;
4036: PPOPN 3
4038: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4039: LD_EXP 31
4043: PUSH
4044: LD_INT 4
4046: PUSH
4047: LD_INT 5
4049: PUSH
4050: LD_INT 6
4052: PUSH
4053: LD_INT 6
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_OWVAR 67
4066: ARRAY
4067: GREATEREQUAL
4068: IFFALSE 4250
4070: GO 4072
4072: DISABLE
4073: LD_INT 0
4075: PPUSH
4076: PPUSH
// begin enable ;
4077: ENABLE
// tmp := usForces ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: LD_EXP 31
4087: ST_TO_ADDR
// usForces := [ ] ;
4088: LD_ADDR_EXP 31
4092: PUSH
4093: EMPTY
4094: ST_TO_ADDR
// if not tmp then
4095: LD_VAR 0 2
4099: NOT
4100: IFFALSE 4104
// exit ;
4102: GO 4250
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4104: LD_INT 22
4106: PUSH
4107: LD_INT 2
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 92
4116: PUSH
4117: LD_INT 123
4119: PUSH
4120: LD_INT 141
4122: PUSH
4123: LD_INT 20
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: IFFALSE 4164
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_INT 126
4149: PPUSH
4150: LD_INT 143
4152: PPUSH
4153: CALL_OW 114
// wait ( 0 0$30 ) ;
4157: LD_INT 1050
4159: PPUSH
4160: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4164: LD_INT 35
4166: PPUSH
4167: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: LD_VAR 0 2
4180: PPUSH
4181: LD_INT 51
4183: PUSH
4184: LD_INT 50
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 98
4193: PUSH
4194: LD_INT 50
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 114
4203: PUSH
4204: LD_INT 50
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 127
4213: PUSH
4214: LD_INT 51
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 131
4223: PUSH
4224: LD_INT 35
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL 58019 0 2
4242: ST_TO_ADDR
// until not tmp ;
4243: LD_VAR 0 2
4247: NOT
4248: IFFALSE 4164
// end ;
4250: PPOPN 2
4252: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4253: LD_EXP 3
4257: IFFALSE 4266
4259: PUSH
4260: LD_EXP 5
4264: NOT
4265: AND
4266: IFFALSE 4287
4268: PUSH
4269: LD_INT 11
4271: PPUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 70
4286: AND
4287: IFFALSE 4408
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
4296: PPUSH
// begin uc_side := 1 ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// uc_nation := 1 ;
4305: LD_ADDR_OWVAR 21
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// tmp := [ ] ;
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: EMPTY
4319: ST_TO_ADDR
// for i := 1 to 2 do
4320: LD_ADDR_VAR 0 1
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 2
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4406
// begin PrepareSoldier ( false , 7 ) ;
4336: LD_INT 0
4338: PPUSH
4339: LD_INT 7
4341: PPUSH
4342: CALL_OW 381
// un := CreateHuman ;
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4356: LD_VAR 0 2
4360: PPUSH
4361: LD_INT 130
4363: PPUSH
4364: LD_INT 153
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_INT 5
4384: PPUSH
4385: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4389: LD_VAR 0 2
4393: PPUSH
4394: LD_INT 108
4396: PPUSH
4397: LD_INT 108
4399: PPUSH
4400: CALL_OW 174
// end ;
4404: GO 4333
4406: POP
4407: POP
// end ;
4408: PPOPN 3
4410: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4411: LD_EXP 3
4415: IFFALSE 4424
4417: PUSH
4418: LD_EXP 5
4422: NOT
4423: AND
4424: IFFALSE 4445
4426: PUSH
4427: LD_INT 10
4429: PPUSH
4430: LD_INT 22
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 70
4444: AND
4445: IFFALSE 4566
4447: GO 4449
4449: DISABLE
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
4454: PPUSH
// begin uc_side := 1 ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// uc_nation := 1 ;
4463: LD_ADDR_OWVAR 21
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// tmp := [ ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: EMPTY
4477: ST_TO_ADDR
// for i := 1 to 2 do
4478: LD_ADDR_VAR 0 1
4482: PUSH
4483: DOUBLE
4484: LD_INT 1
4486: DEC
4487: ST_TO_ADDR
4488: LD_INT 2
4490: PUSH
4491: FOR_TO
4492: IFFALSE 4564
// begin PrepareSoldier ( false , 7 ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 7
4499: PPUSH
4500: CALL_OW 381
// un := CreateHuman ;
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: CALL_OW 44
4513: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4514: LD_VAR 0 2
4518: PPUSH
4519: LD_INT 56
4521: PPUSH
4522: LD_INT 101
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4535: LD_VAR 0 2
4539: PPUSH
4540: LD_INT 5
4542: PPUSH
4543: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4547: LD_VAR 0 2
4551: PPUSH
4552: LD_INT 72
4554: PPUSH
4555: LD_INT 92
4557: PPUSH
4558: CALL_OW 174
// end ;
4562: GO 4491
4564: POP
4565: POP
// end ;
4566: PPOPN 3
4568: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4569: LD_EXP 7
4573: NOT
4574: IFFALSE 4779
4576: GO 4578
4578: DISABLE
4579: LD_INT 0
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
// begin enable ;
4585: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4586: LD_ADDR_VAR 0 4
4590: PUSH
4591: LD_INT 81
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 92
4603: PUSH
4604: LD_INT 113
4606: PUSH
4607: LD_INT 139
4609: PUSH
4610: LD_INT 15
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PPUSH
4623: CALL_OW 69
4627: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 20
4635: PPUSH
4636: CALL_OW 435
4640: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_EXP 35
4650: PPUSH
4651: LD_INT 50
4653: PUSH
4654: EMPTY
4655: LIST
4656: PPUSH
4657: CALL_OW 72
4661: ST_TO_ADDR
// if not tmp then
4662: LD_VAR 0 2
4666: NOT
4667: IFFALSE 4672
// begin disable ;
4669: DISABLE
// exit ;
4670: GO 4779
// end ; for i in tmp do
4672: LD_ADDR_VAR 0 1
4676: PUSH
4677: LD_VAR 0 2
4681: PUSH
4682: FOR_IN
4683: IFFALSE 4777
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4685: LD_VAR 0 4
4689: IFFALSE 4709
4691: PUSH
4692: LD_VAR 0 1
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 296
4704: PUSH
4705: LD_INT 12
4707: GREATER
4708: AND
4709: IFFALSE 4728
// ComMoveXY ( i , 83 , 147 ) else
4711: LD_VAR 0 1
4715: PPUSH
4716: LD_INT 83
4718: PPUSH
4719: LD_INT 147
4721: PPUSH
4722: CALL_OW 111
4726: GO 4775
// if not HasTask ( i ) and cr then
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL_OW 314
4737: NOT
4738: IFFALSE 4746
4740: PUSH
4741: LD_VAR 0 3
4745: AND
4746: IFFALSE 4775
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_VAR 0 3
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: PPUSH
4771: CALL_OW 117
// end ;
4775: GO 4682
4777: POP
4778: POP
// end ;
4779: PPOPN 4
4781: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4782: LD_EXP 32
4786: PPUSH
4787: CALL_OW 302
4791: IFFALSE 4800
4793: PUSH
4794: LD_EXP 7
4798: NOT
4799: AND
4800: IFFALSE 5071
4802: GO 4804
4804: DISABLE
4805: LD_INT 0
4807: PPUSH
4808: PPUSH
// begin enable ;
4809: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: LD_INT 16
4817: PPUSH
4818: LD_INT 81
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 50
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 70
4842: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4843: LD_ADDR_VAR 0 1
4847: PUSH
4848: LD_INT 12
4850: PPUSH
4851: CALL_OW 435
4855: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4856: LD_EXP 32
4860: PPUSH
4861: CALL_OW 261
4865: PUSH
4866: LD_INT 10
4868: LESS
4869: IFFALSE 4886
4871: PUSH
4872: LD_INT 2
4874: PPUSH
4875: LD_EXP 32
4879: PPUSH
4880: CALL_OW 292
4884: NOT
4885: AND
4886: IFFALSE 4900
// SetFuel ( usCargo , 100 ) ;
4888: LD_EXP 32
4892: PPUSH
4893: LD_INT 100
4895: PPUSH
4896: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4900: LD_EXP 32
4904: PPUSH
4905: CALL_OW 314
4909: NOT
4910: IFFALSE 4930
4912: PUSH
4913: LD_EXP 32
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 289
4925: PUSH
4926: LD_INT 100
4928: LESS
4929: AND
4930: IFFALSE 4939
4932: PUSH
4933: LD_VAR 0 2
4937: NOT
4938: AND
4939: IFFALSE 5005
// begin if cr then
4941: LD_VAR 0 1
4945: IFFALSE 4976
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4947: LD_EXP 32
4951: PPUSH
4952: LD_VAR 0 1
4956: PUSH
4957: LD_INT 1
4959: ARRAY
4960: PPUSH
4961: LD_VAR 0 1
4965: PUSH
4966: LD_INT 2
4968: ARRAY
4969: PPUSH
4970: CALL_OW 117
4974: GO 5003
// if not IsInArea ( usCargo , usCratesArea ) then
4976: LD_EXP 32
4980: PPUSH
4981: LD_INT 12
4983: PPUSH
4984: CALL_OW 308
4988: NOT
4989: IFFALSE 5003
// ComMoveToArea ( usCargo , usCratesArea ) ;
4991: LD_EXP 32
4995: PPUSH
4996: LD_INT 12
4998: PPUSH
4999: CALL_OW 113
// exit ;
5003: GO 5071
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
5005: LD_VAR 0 2
5009: IFFALSE 5026
5011: PUSH
5012: LD_EXP 32
5016: PPUSH
5017: LD_INT 16
5019: PPUSH
5020: CALL_OW 308
5024: NOT
5025: AND
5026: IFFALSE 5045
// ComMoveXY ( usCargo , 80 , 143 ) else
5028: LD_EXP 32
5032: PPUSH
5033: LD_INT 80
5035: PPUSH
5036: LD_INT 143
5038: PPUSH
5039: CALL_OW 111
5043: GO 5071
// if GetCargo ( usCargo , mat_cans ) then
5045: LD_EXP 32
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 289
5057: IFFALSE 5071
// ComGive ( usCargo , usDepot ) ;
5059: LD_EXP 32
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 161
// end ;
5071: PPOPN 2
5073: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5074: LD_EXP 7
5078: NOT
5079: IFFALSE 5125
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 1
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 21
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 3
5104: PUSH
5105: LD_INT 50
5107: PUSH
5108: EMPTY
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: AND
5125: IFFALSE 5171
5127: PUSH
5128: LD_INT 22
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 60
5143: PUSH
5144: EMPTY
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 25
5153: PUSH
5154: LD_INT 4
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: AND
5171: IFFALSE 5374
5173: GO 5175
5175: DISABLE
5176: LD_INT 0
5178: PPUSH
5179: PPUSH
// begin enable ;
5180: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5181: LD_ADDR_VAR 0 1
5185: PUSH
5186: LD_INT 22
5188: PUSH
5189: LD_INT 1
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: LD_INT 50
5211: PUSH
5212: EMPTY
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PUSH
5229: FOR_IN
5230: IFFALSE 5372
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 60
5252: PUSH
5253: EMPTY
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 25
5262: PUSH
5263: LD_INT 4
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if not sci then
5280: LD_VAR 0 2
5284: NOT
5285: IFFALSE 5289
// break ;
5287: GO 5372
// sci := sci [ 1 ] ;
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: LD_VAR 0 2
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: ST_TO_ADDR
// if IsInUnit ( sci ) then
5303: LD_VAR 0 2
5307: PPUSH
5308: CALL_OW 310
5312: IFFALSE 5325
// ComExit ( sci ) else
5314: LD_VAR 0 2
5318: PPUSH
5319: CALL 55651 0 1
5323: GO 5370
// begin ComHeal ( sci , i ) ;
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 32
5346: PUSH
5347: LD_INT 33
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 1
5356: PPUSH
5357: LD_INT 2
5359: PPUSH
5360: CALL_OW 12
5364: ARRAY
5365: PPUSH
5366: CALL_OW 180
// end ; end ;
5370: GO 5229
5372: POP
5373: POP
// end ;
5374: PPOPN 2
5376: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5377: LD_EXP 7
5381: NOT
5382: IFFALSE 5435
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: LD_INT 60
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 50
5410: PUSH
5411: EMPTY
5412: LIST
5413: PUSH
5414: LD_INT 34
5416: PUSH
5417: LD_INT 13
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: PPUSH
5430: CALL_OW 69
5434: AND
5435: IFFALSE 5503
5437: PUSH
5438: LD_INT 22
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 3
5450: PUSH
5451: LD_INT 24
5453: PUSH
5454: LD_INT 1000
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 21
5467: PUSH
5468: LD_INT 3
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 3
5477: PUSH
5478: LD_INT 30
5480: PUSH
5481: LD_INT 29
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: AND
5503: IFFALSE 5772
5505: GO 5507
5507: DISABLE
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
// begin enable ;
5513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 3
5531: PUSH
5532: LD_INT 24
5534: PUSH
5535: LD_INT 1000
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5584: LD_ADDR_VAR 0 3
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 3
5601: PUSH
5602: LD_INT 24
5604: PUSH
5605: LD_INT 600
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 21
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 29
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 22
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 3
5671: PUSH
5672: LD_INT 60
5674: PUSH
5675: EMPTY
5676: LIST
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 50
5684: PUSH
5685: EMPTY
5686: LIST
5687: PUSH
5688: LD_INT 34
5690: PUSH
5691: LD_INT 13
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5770
// begin if tmp2 then
5712: LD_VAR 0 3
5716: IFFALSE 5744
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 3
5727: PPUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: CALL_OW 74
5737: PPUSH
5738: CALL_OW 130
5742: GO 5768
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: CALL_OW 74
5763: PPUSH
5764: CALL_OW 130
// end ;
5768: GO 5709
5770: POP
5771: POP
// end ;
5772: PPOPN 3
5774: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5775: LD_EXP 7
5779: NOT
5780: IFFALSE 5812
5782: PUSH
5783: LD_INT 16
5785: PPUSH
5786: LD_INT 81
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 70
5810: NOT
5811: AND
5812: IFFALSE 5820
5814: PUSH
5815: LD_EXP 33
5819: AND
5820: IFFALSE 5873
5822: PUSH
5823: LD_INT 22
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 60
5838: PUSH
5839: EMPTY
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 50
5848: PUSH
5849: EMPTY
5850: LIST
5851: PUSH
5852: LD_INT 34
5854: PUSH
5855: LD_INT 13
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: AND
5873: IFFALSE 5985
5875: GO 5877
5877: DISABLE
// begin enable ;
5878: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5879: LD_INT 22
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 60
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 50
5904: PUSH
5905: EMPTY
5906: LIST
5907: PUSH
5908: LD_INT 34
5910: PUSH
5911: LD_INT 13
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PPUSH
5924: CALL_OW 69
5928: PPUSH
5929: LD_EXP 33
5933: PUSH
5934: LD_INT 1
5936: ARRAY
5937: PUSH
5938: LD_INT 1
5940: ARRAY
5941: PPUSH
5942: LD_EXP 33
5946: PUSH
5947: LD_INT 1
5949: ARRAY
5950: PUSH
5951: LD_INT 2
5953: ARRAY
5954: PPUSH
5955: LD_EXP 33
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PUSH
5964: LD_INT 3
5966: ARRAY
5967: PPUSH
5968: LD_EXP 33
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: PUSH
5977: LD_INT 4
5979: ARRAY
5980: PPUSH
5981: CALL_OW 566
// end ;
5985: END
// every 0 0$10 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks , inside ;
5986: LD_EXP 7
5990: NOT
5991: IFFALSE 6059
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 50
6006: PUSH
6007: EMPTY
6008: LIST
6009: PUSH
6010: LD_INT 2
6012: PUSH
6013: LD_INT 25
6015: PUSH
6016: LD_INT 1
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 25
6025: PUSH
6026: LD_INT 5
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 25
6035: PUSH
6036: LD_INT 16
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: AND
6059: IFFALSE 6492
6061: GO 6063
6063: DISABLE
6064: LD_INT 0
6066: PPUSH
6067: PPUSH
6068: PPUSH
6069: PPUSH
6070: PPUSH
// begin enable ;
6071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) diff usCratesCollector ;
6072: LD_ADDR_VAR 0 2
6076: PUSH
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 50
6089: PUSH
6090: EMPTY
6091: LIST
6092: PUSH
6093: LD_INT 2
6095: PUSH
6096: LD_INT 25
6098: PUSH
6099: LD_INT 1
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 5
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 16
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL_OW 69
6141: PUSH
6142: LD_EXP 35
6146: DIFF
6147: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6148: LD_ADDR_VAR 0 3
6152: PUSH
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 50
6165: PUSH
6166: EMPTY
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 30
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 58
6191: PUSH
6192: EMPTY
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: PPUSH
6202: CALL_OW 69
6206: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6207: LD_ADDR_VAR 0 4
6211: PUSH
6212: LD_INT 22
6214: PUSH
6215: LD_INT 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 50
6224: PUSH
6225: EMPTY
6226: LIST
6227: PUSH
6228: LD_INT 30
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 69
6247: ST_TO_ADDR
// if not tmp then
6248: LD_VAR 0 2
6252: NOT
6253: IFFALSE 6257
// exit ;
6255: GO 6492
// for i in tmp do
6257: LD_ADDR_VAR 0 1
6261: PUSH
6262: LD_VAR 0 2
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6490
// begin inside := IsInUnit ( i ) ;
6270: LD_ADDR_VAR 0 5
6274: PUSH
6275: LD_VAR 0 1
6279: PPUSH
6280: CALL_OW 310
6284: ST_TO_ADDR
// if inside and GetBType ( inside ) = b_bunker then
6285: LD_VAR 0 5
6289: IFFALSE 6306
6291: PUSH
6292: LD_VAR 0 5
6296: PPUSH
6297: CALL_OW 266
6301: PUSH
6302: LD_INT 32
6304: EQUAL
6305: AND
6306: IFFALSE 6310
// continue ;
6308: GO 6267
// if GetTag ( i ) = 1 and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: IFFALSE 6337
6325: PUSH
6326: LD_VAR 0 1
6330: PPUSH
6331: CALL_OW 314
6335: NOT
6336: AND
6337: IFFALSE 6351
// SetTag ( i , 0 ) ;
6339: LD_VAR 0 1
6343: PPUSH
6344: LD_INT 0
6346: PPUSH
6347: CALL_OW 109
// btmp := FilterByTag ( btmp , 0 ) ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_VAR 0 3
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 52798 0 2
6368: ST_TO_ADDR
// if not btmp then
6369: LD_VAR 0 3
6373: NOT
6374: IFFALSE 6442
// begin if not inside and GetClass ( i ) <> class_apeman_engineer and barracks and not GetTag ( i ) then
6376: LD_VAR 0 5
6380: NOT
6381: IFFALSE 6398
6383: PUSH
6384: LD_VAR 0 1
6388: PPUSH
6389: CALL_OW 257
6393: PUSH
6394: LD_INT 16
6396: NONEQUAL
6397: AND
6398: IFFALSE 6406
6400: PUSH
6401: LD_VAR 0 4
6405: AND
6406: IFFALSE 6420
6408: PUSH
6409: LD_VAR 0 1
6413: PPUSH
6414: CALL_OW 110
6418: NOT
6419: AND
6420: IFFALSE 6440
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6422: LD_VAR 0 1
6426: PPUSH
6427: LD_VAR 0 4
6431: PUSH
6432: LD_INT 1
6434: ARRAY
6435: PPUSH
6436: CALL_OW 120
// end else
6440: GO 6488
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6442: LD_VAR 0 3
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6458: LD_VAR 0 1
6462: PPUSH
6463: LD_VAR 0 3
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: CALL_OW 120
// SetTag ( i , 1 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 109
// end ; end ;
6488: GO 6267
6490: POP
6491: POP
// end ;
6492: PPOPN 5
6494: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6495: LD_INT 22
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 33
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 50
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: LD_INT 61
6526: PUSH
6527: EMPTY
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: IFFALSE 6635
6546: GO 6548
6548: DISABLE
6549: LD_INT 0
6551: PPUSH
6552: PPUSH
// begin enable ;
6553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6554: LD_ADDR_VAR 0 2
6558: PUSH
6559: LD_INT 22
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 33
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 50
6581: PUSH
6582: EMPTY
6583: LIST
6584: PUSH
6585: LD_INT 3
6587: PUSH
6588: LD_INT 61
6590: PUSH
6591: EMPTY
6592: LIST
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 69
6608: ST_TO_ADDR
// for i in tmp do
6609: LD_ADDR_VAR 0 1
6613: PUSH
6614: LD_VAR 0 2
6618: PUSH
6619: FOR_IN
6620: IFFALSE 6633
// Connect ( i ) ;
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL 25555 0 1
6631: GO 6619
6633: POP
6634: POP
// end ;
6635: PPOPN 2
6637: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6638: LD_EXP 6
6642: IFFALSE 6654
6644: PUSH
6645: LD_OWVAR 67
6649: PUSH
6650: LD_INT 1
6652: GREATER
6653: AND
6654: IFFALSE 7105
6656: GO 6658
6658: DISABLE
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6666: LD_INT 31500
6668: PUSH
6669: LD_INT 31500
6671: PUSH
6672: LD_INT 29400
6674: PUSH
6675: LD_INT 27300
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_OWVAR 67
6688: ARRAY
6689: PPUSH
6690: CALL_OW 67
// if usSurrender then
6694: LD_EXP 7
6698: IFFALSE 6702
// exit ;
6700: GO 7105
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6702: LD_ADDR_VAR 0 1
6706: PUSH
6707: DOUBLE
6708: LD_INT 1
6710: DEC
6711: ST_TO_ADDR
6712: LD_INT 4
6714: PUSH
6715: LD_INT 5
6717: PUSH
6718: LD_INT 5
6720: PUSH
6721: LD_INT 6
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PUSH
6730: LD_OWVAR 67
6734: ARRAY
6735: PUSH
6736: FOR_TO
6737: IFFALSE 7050
// begin uc_side := 1 ;
6739: LD_ADDR_OWVAR 20
6743: PUSH
6744: LD_INT 1
6746: ST_TO_ADDR
// uc_nation := 1 ;
6747: LD_ADDR_OWVAR 21
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// InitHc_All ( ) ;
6755: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6759: LD_INT 0
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: PUSH
6783: LD_OWVAR 67
6787: ARRAY
6788: PPUSH
6789: CALL_OW 380
// un := CreateHuman ;
6793: LD_ADDR_VAR 0 2
6797: PUSH
6798: CALL_OW 44
6802: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6803: LD_ADDR_VAR 0 4
6807: PUSH
6808: LD_INT 2
6810: PUSH
6811: LD_INT 3
6813: PUSH
6814: LD_INT 4
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 3
6829: MOD
6830: PUSH
6831: LD_INT 1
6833: PLUS
6834: ARRAY
6835: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6836: LD_VAR 0 4
6840: PUSH
6841: LD_INT 4
6843: EQUAL
6844: IFFALSE 6879
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6846: LD_ADDR_VAR 0 5
6850: PUSH
6851: LD_INT 6
6853: PUSH
6854: LD_INT 4
6856: PUSH
6857: LD_INT 5
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 1
6867: PPUSH
6868: LD_INT 3
6870: PPUSH
6871: CALL_OW 12
6875: ARRAY
6876: ST_TO_ADDR
6877: GO 6914
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6879: LD_ADDR_VAR 0 5
6883: PUSH
6884: LD_INT 5
6886: PUSH
6887: LD_INT 5
6889: PUSH
6890: LD_INT 7
6892: PUSH
6893: LD_INT 4
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 1
6904: PPUSH
6905: LD_INT 4
6907: PPUSH
6908: CALL_OW 12
6912: ARRAY
6913: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6914: LD_VAR 0 4
6918: PPUSH
6919: LD_INT 1
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: LD_VAR 0 5
6929: PPUSH
6930: LD_INT 30
6932: PPUSH
6933: CALL 22073 0 5
// veh := CreateVehicle ;
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: CALL_OW 45
6946: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6947: LD_ADDR_EXP 34
6951: PUSH
6952: LD_EXP 34
6956: PPUSH
6957: LD_EXP 34
6961: PUSH
6962: LD_INT 1
6964: PLUS
6965: PPUSH
6966: LD_VAR 0 3
6970: PPUSH
6971: CALL_OW 1
6975: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6976: LD_VAR 0 3
6980: PPUSH
6981: LD_INT 4
6983: PPUSH
6984: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
6988: LD_INT 35
6990: PPUSH
6991: CALL_OW 67
// until PlaceUnitArea ( veh , americanEastArea , false ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 17
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
7010: IFFALSE 6988
// PlaceHumanInUnit ( un , veh ) ;
7012: LD_VAR 0 2
7016: PPUSH
7017: LD_VAR 0 3
7021: PPUSH
7022: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
7026: LD_VAR 0 3
7030: PPUSH
7031: LD_INT 153
7033: PPUSH
7034: LD_INT 45
7036: PPUSH
7037: CALL_OW 111
// wait ( 0 0$2 ) ;
7041: LD_INT 70
7043: PPUSH
7044: CALL_OW 67
// end ;
7048: GO 6736
7050: POP
7051: POP
// repeat wait ( 0 0$1 ) ;
7052: LD_INT 35
7054: PPUSH
7055: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
7059: LD_ADDR_EXP 34
7063: PUSH
7064: LD_EXP 34
7068: PPUSH
7069: LD_INT 150
7071: PUSH
7072: LD_INT 36
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 138
7081: PUSH
7082: LD_INT 25
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL 58019 0 2
7097: ST_TO_ADDR
// until not usAdditionalForces ;
7098: LD_EXP 34
7102: NOT
7103: IFFALSE 7052
// end ;
7105: PPOPN 5
7107: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
7108: LD_INT 22
7110: PUSH
7111: LD_INT 1
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 101
7120: PUSH
7121: LD_INT 2
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: IFFALSE 7156
7138: GO 7140
7140: DISABLE
// begin wait ( 0 0$30 ) ;
7141: LD_INT 1050
7143: PPUSH
7144: CALL_OW 67
// usAttacksAllowed := true ;
7148: LD_ADDR_EXP 6
7152: PUSH
7153: LD_INT 1
7155: ST_TO_ADDR
// end ; end_of_file
7156: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL 60770 0 1
// if un = Heike then
7166: LD_VAR 0 1
7170: PUSH
7171: LD_EXP 15
7175: EQUAL
7176: IFFALSE 7185
// YouLost ( Heike ) ;
7178: LD_STRING Heike
7180: PPUSH
7181: CALL_OW 104
// if un = usCommander then
7185: LD_VAR 0 1
7189: PUSH
7190: LD_EXP 30
7194: EQUAL
7195: IFFALSE 7204
// YouLost ( Commander ) ;
7197: LD_STRING Commander
7199: PPUSH
7200: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 255
7213: PUSH
7214: LD_INT 2
7216: EQUAL
7217: IFFALSE 7234
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 247
7229: PUSH
7230: LD_INT 2
7232: EQUAL
7233: AND
7234: IFFALSE 7251
// vehLossCounter := Inc ( vehLossCounter ) ;
7236: LD_ADDR_EXP 14
7240: PUSH
7241: LD_EXP 14
7245: PPUSH
7246: CALL 56626 0 1
7250: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 255
7260: PUSH
7261: LD_INT 1
7263: EQUAL
7264: IFFALSE 7610
// begin if GetClass ( un ) = class_sniper then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 257
7275: PUSH
7276: LD_INT 5
7278: EQUAL
7279: IFFALSE 7296
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7281: LD_ADDR_EXP 13
7285: PUSH
7286: LD_EXP 13
7290: PPUSH
7291: CALL 56626 0 1
7295: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7296: LD_VAR 0 1
7300: PPUSH
7301: CALL_OW 264
7305: PUSH
7306: LD_INT 13
7308: EQUAL
7309: IFFALSE 7320
7311: PUSH
7312: LD_INT 25
7314: PPUSH
7315: CALL_OW 302
7319: AND
7320: IFFALSE 7383
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7322: LD_INT 175
7324: PUSH
7325: LD_INT 22
7327: PUSH
7328: LD_INT 1
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 34
7337: PUSH
7338: LD_INT 13
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PPUSH
7349: CALL_OW 69
7353: PPUSH
7354: CALL 19277 0 1
7358: MUL
7359: PPUSH
7360: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7364: LD_INT 25
7366: PPUSH
7367: LD_INT 2
7369: PPUSH
7370: LD_INT 2
7372: PPUSH
7373: LD_INT 2
7375: PPUSH
7376: LD_INT 13
7378: PPUSH
7379: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 264
7392: PUSH
7393: LD_INT 12
7395: EQUAL
7396: IFFALSE 7407
7398: PUSH
7399: LD_INT 25
7401: PPUSH
7402: CALL_OW 302
7406: AND
7407: IFFALSE 7428
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7409: LD_INT 25
7411: PPUSH
7412: LD_INT 2
7414: PPUSH
7415: LD_INT 1
7417: PPUSH
7418: LD_INT 2
7420: PPUSH
7421: LD_INT 12
7423: PPUSH
7424: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 266
7437: PUSH
7438: LD_INT 32
7440: EQUAL
7441: IFFALSE 7525
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7443: LD_ADDR_EXP 33
7447: PUSH
7448: LD_EXP 33
7452: PPUSH
7453: LD_EXP 33
7457: PUSH
7458: LD_INT 1
7460: PLUS
7461: PPUSH
7462: LD_INT 32
7464: PUSH
7465: LD_INT 33
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 1
7474: PPUSH
7475: LD_INT 2
7477: PPUSH
7478: CALL_OW 12
7482: ARRAY
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 250
7493: PUSH
7494: LD_VAR 0 1
7498: PPUSH
7499: CALL_OW 251
7503: PUSH
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 254
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 1
7524: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 266
7534: PUSH
7535: LD_INT 5
7537: PUSH
7538: LD_INT 4
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: IN
7545: IFFALSE 7610
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7547: LD_ADDR_EXP 33
7551: PUSH
7552: LD_EXP 33
7556: PPUSH
7557: LD_EXP 33
7561: PUSH
7562: LD_INT 1
7564: PLUS
7565: PPUSH
7566: LD_INT 4
7568: PUSH
7569: LD_VAR 0 1
7573: PPUSH
7574: CALL_OW 250
7578: PUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 251
7588: PUSH
7589: LD_VAR 0 1
7593: PPUSH
7594: CALL_OW 254
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 1
7609: ST_TO_ADDR
// end ; end ;
7610: PPOPN 1
7612: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7613: LD_VAR 0 1
7617: PPUSH
7618: CALL_OW 255
7622: PUSH
7623: LD_INT 1
7625: EQUAL
7626: IFFALSE 7643
7628: PUSH
7629: LD_VAR 0 1
7633: PPUSH
7634: CALL_OW 110
7638: PUSH
7639: LD_INT 1
7641: EQUAL
7642: AND
7643: IFFALSE 7657
// SetTag ( un , 0 ) ;
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 0
7652: PPUSH
7653: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: LD_INT 1
7669: EQUAL
7670: IFFALSE 7687
7672: PUSH
7673: LD_VAR 0 1
7677: PPUSH
7678: CALL_OW 264
7682: PUSH
7683: LD_INT 6
7685: EQUAL
7686: AND
7687: IFFALSE 7696
7689: PUSH
7690: LD_EXP 11
7694: NOT
7695: AND
7696: IFFALSE 7706
// seeHeavyGun := true ;
7698: LD_ADDR_EXP 11
7702: PUSH
7703: LD_INT 1
7705: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7706: LD_VAR 0 1
7710: PPUSH
7711: CALL_OW 263
7715: PUSH
7716: LD_INT 2
7718: EQUAL
7719: IFFALSE 7736
7721: PUSH
7722: LD_VAR 0 1
7726: PPUSH
7727: CALL_OW 255
7731: PUSH
7732: LD_INT 2
7734: NONEQUAL
7735: AND
7736: IFFALSE 7762
// begin ComUnlink ( un ) ;
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 136
// if not seeRemoteVehicle then
7747: LD_EXP 10
7751: NOT
7752: IFFALSE 7762
// seeRemoteVehicle := true ;
7754: LD_ADDR_EXP 10
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// end ; end ;
7762: PPOPN 1
7764: END
// on BuildingComplete ( b ) do var i , barracks ;
7765: LD_INT 0
7767: PPUSH
7768: PPUSH
// begin if GetSide ( b ) = 2 then
7769: LD_VAR 0 1
7773: PPUSH
7774: CALL_OW 255
7778: PUSH
7779: LD_INT 2
7781: EQUAL
7782: IFFALSE 7822
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7784: LD_VAR 0 1
7788: PPUSH
7789: CALL_OW 266
7793: PUSH
7794: LD_INT 0
7796: EQUAL
7797: IFFALSE 7813
7799: PUSH
7800: LD_VAR 0 1
7804: PPUSH
7805: LD_INT 18
7807: PPUSH
7808: CALL_OW 308
7812: AND
7813: IFFALSE 7822
// SetAchievement ( ACH_WEST ) ;
7815: LD_STRING ACH_WEST
7817: PPUSH
7818: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 255
7831: PUSH
7832: LD_INT 1
7834: EQUAL
7835: IFFALSE 8011
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7837: LD_ADDR_EXP 33
7841: PUSH
7842: LD_EXP 33
7846: PPUSH
7847: LD_INT 1
7849: PPUSH
7850: CALL_OW 3
7854: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7855: LD_VAR 0 1
7859: PPUSH
7860: CALL_OW 266
7864: PUSH
7865: LD_INT 4
7867: EQUAL
7868: IFFALSE 7879
// ComUpgrade ( b ) ;
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 266
7888: PUSH
7889: LD_INT 32
7891: PUSH
7892: LD_INT 33
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: IN
7899: IFFALSE 8011
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 6
7908: PUSH
7909: LD_INT 7
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 1
7918: PPUSH
7919: LD_INT 2
7921: PPUSH
7922: CALL_OW 12
7926: ARRAY
7927: PPUSH
7928: CALL_OW 208
// if GetBType ( b ) = b_turret then
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 266
7941: PUSH
7942: LD_INT 33
7944: EQUAL
7945: IFFALSE 7949
// exit ;
7947: GO 8011
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 1
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 30
7966: PUSH
7967: LD_INT 5
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 69
7982: ST_TO_ADDR
// if barracks then
7983: LD_VAR 0 3
7987: IFFALSE 8011
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 1
7996: ARRAY
7997: PPUSH
7998: CALL_OW 313
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: CALL_OW 122
// end ; end ; end ;
8011: PPOPN 3
8013: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_VAR 0 2
8023: PPUSH
8024: CALL 60828 0 2
// if GetSide ( factory ) = 1 then
8028: LD_VAR 0 2
8032: PPUSH
8033: CALL_OW 255
8037: PUSH
8038: LD_INT 1
8040: EQUAL
8041: IFFALSE 8120
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 264
8052: PUSH
8053: LD_INT 12
8055: EQUAL
8056: IFFALSE 8068
// usCargo := vehicle ;
8058: LD_ADDR_EXP 32
8062: PUSH
8063: LD_VAR 0 1
8067: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 264
8077: PUSH
8078: LD_INT 12
8080: PUSH
8081: LD_INT 13
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: IN
8088: NOT
8089: IFFALSE 8120
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
8091: LD_ADDR_EXP 31
8095: PUSH
8096: LD_EXP 31
8100: PPUSH
8101: LD_EXP 31
8105: PUSH
8106: LD_INT 1
8108: PLUS
8109: PPUSH
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 1
8119: ST_TO_ADDR
// end ; end ;
8120: PPOPN 2
8122: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
8123: LD_VAR 0 2
8127: PPUSH
8128: CALL_OW 255
8132: PUSH
8133: LD_INT 1
8135: EQUAL
8136: IFFALSE 8150
// AddComEnterUnit ( un , amFac ) ;
8138: LD_VAR 0 1
8142: PPUSH
8143: LD_INT 25
8145: PPUSH
8146: CALL_OW 180
// end ;
8150: PPOPN 4
8152: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 255
8162: PUSH
8163: LD_INT 1
8165: EQUAL
8166: IFFALSE 8183
8168: PUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 266
8178: PUSH
8179: LD_INT 32
8181: EQUAL
8182: AND
8183: IFFALSE 8207
8185: PUSH
8186: LD_VAR 0 2
8190: PPUSH
8191: CALL_OW 257
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: LD_INT 5
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: IN
8206: AND
8207: IFFALSE 8246
8209: PUSH
8210: LD_INT 22
8212: PUSH
8213: LD_INT 1
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 5
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 50
8232: PUSH
8233: EMPTY
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 69
8245: AND
8246: IFFALSE 8316
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8248: LD_INT 74
8250: PPUSH
8251: LD_INT 120
8253: PPUSH
8254: CALL_OW 428
8258: PPUSH
8259: CALL_OW 313
8263: PUSH
8264: LD_INT 6
8266: LESS
8267: IFFALSE 8316
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_INT 74
8276: PPUSH
8277: LD_INT 120
8279: PPUSH
8280: CALL_OW 428
8284: PPUSH
8285: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8289: LD_VAR 0 2
8293: PPUSH
8294: CALL_OW 257
8298: PUSH
8299: LD_INT 1
8301: EQUAL
8302: IFFALSE 8316
// AddComChangeProfession ( un , class_sniper ) ;
8304: LD_VAR 0 2
8308: PPUSH
8309: LD_INT 5
8311: PPUSH
8312: CALL_OW 183
// end ; end ;
8316: PPOPN 2
8318: END
// on EnterBuilding ( b , un ) do begin if GetSide ( un ) = 1 then
8319: LD_VAR 0 2
8323: PPUSH
8324: CALL_OW 255
8328: PUSH
8329: LD_INT 1
8331: EQUAL
8332: IFFALSE 8373
// if GetTag ( un ) = 1 then
8334: LD_VAR 0 2
8338: PPUSH
8339: CALL_OW 110
8343: PUSH
8344: LD_INT 1
8346: EQUAL
8347: IFFALSE 8373
// begin SetTag ( b , 0 ) ;
8349: LD_VAR 0 1
8353: PPUSH
8354: LD_INT 0
8356: PPUSH
8357: CALL_OW 109
// SetTag ( un , 0 ) ;
8361: LD_VAR 0 2
8365: PPUSH
8366: LD_INT 0
8368: PPUSH
8369: CALL_OW 109
// end ; end ; end_of_file
8373: PPOPN 2
8375: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8376: LD_INT 0
8378: PPUSH
8379: PPUSH
8380: PPUSH
8381: PPUSH
8382: PPUSH
8383: PPUSH
8384: PPUSH
8385: PPUSH
8386: PPUSH
8387: PPUSH
// Video ( true ) ;
8388: LD_INT 1
8390: PPUSH
8391: CALL 55225 0 1
// music_nat := 1 ;
8395: LD_ADDR_OWVAR 71
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// music_class := music_recon ;
8403: LD_ADDR_OWVAR 72
8407: PUSH
8408: LD_INT 3
8410: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8411: LD_INT 184
8413: PPUSH
8414: LD_INT 142
8416: PPUSH
8417: LD_INT 2
8419: PPUSH
8420: LD_INT 10
8422: NEG
8423: PPUSH
8424: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8428: LD_INT 184
8430: PPUSH
8431: LD_INT 142
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8441: LD_INT 204
8443: PPUSH
8444: LD_INT 151
8446: PPUSH
8447: LD_INT 2
8449: PPUSH
8450: LD_INT 10
8452: NEG
8453: PPUSH
8454: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8458: LD_INT 204
8460: PPUSH
8461: LD_INT 151
8463: PPUSH
8464: LD_INT 2
8466: PPUSH
8467: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8471: LD_INT 184
8473: PPUSH
8474: LD_INT 142
8476: PPUSH
8477: CALL_OW 86
// wait ( 0 0$2 ) ;
8481: LD_INT 70
8483: PPUSH
8484: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8488: LD_ADDR_VAR 0 5
8492: PUSH
8493: LD_EXP 15
8497: PUSH
8498: LD_EXP 16
8502: PUSH
8503: LD_EXP 17
8507: PUSH
8508: LD_EXP 18
8512: PUSH
8513: LD_EXP 19
8517: PUSH
8518: LD_EXP 20
8522: PUSH
8523: LD_EXP 21
8527: PUSH
8528: LD_EXP 22
8532: PUSH
8533: LD_EXP 24
8537: PUSH
8538: LD_EXP 25
8542: PUSH
8543: LD_EXP 26
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: PUSH
8561: LD_EXP 27
8565: UNION
8566: ST_TO_ADDR
// tmp := tmp diff 0 ;
8567: LD_ADDR_VAR 0 5
8571: PUSH
8572: LD_VAR 0 5
8576: PUSH
8577: LD_INT 0
8579: DIFF
8580: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8581: LD_ADDR_VAR 0 7
8585: PUSH
8586: LD_VAR 0 5
8590: PPUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 72
8605: PUSH
8606: LD_INT 0
8608: GREATER
8609: ST_TO_ADDR
// hasCamera := false ;
8610: LD_ADDR_VAR 0 8
8614: PUSH
8615: LD_INT 0
8617: ST_TO_ADDR
// if not hasEng then
8618: LD_VAR 0 7
8622: NOT
8623: IFFALSE 8676
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8625: LD_ADDR_VAR 0 6
8629: PUSH
8630: LD_VAR 0 5
8634: PUSH
8635: LD_EXP 25
8639: PUSH
8640: LD_EXP 17
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: DIFF
8649: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8650: LD_VAR 0 6
8654: PUSH
8655: LD_INT 1
8657: PPUSH
8658: LD_VAR 0 6
8662: PPUSH
8663: CALL_OW 12
8667: ARRAY
8668: PPUSH
8669: LD_INT 2
8671: PPUSH
8672: CALL_OW 336
// end ; if heikeVehicles then
8676: LD_EXP 29
8680: IFFALSE 9328
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8682: LD_ADDR_VAR 0 5
8686: PUSH
8687: LD_VAR 0 5
8691: PPUSH
8692: LD_INT 3
8694: PPUSH
8695: CALL 57639 0 2
8699: ST_TO_ADDR
// for i in heikeVehicles do
8700: LD_ADDR_VAR 0 2
8704: PUSH
8705: LD_EXP 29
8709: PUSH
8710: FOR_IN
8711: IFFALSE 9326
// begin if not tmp then
8713: LD_VAR 0 5
8717: NOT
8718: IFFALSE 8722
// break ;
8720: GO 9326
// uc_side := 2 ;
8722: LD_ADDR_OWVAR 20
8726: PUSH
8727: LD_INT 2
8729: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8730: LD_ADDR_OWVAR 21
8734: PUSH
8735: LD_VAR 0 2
8739: PUSH
8740: LD_INT 5
8742: ARRAY
8743: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8744: LD_ADDR_OWVAR 37
8748: PUSH
8749: LD_VAR 0 2
8753: PUSH
8754: LD_INT 1
8756: ARRAY
8757: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8758: LD_ADDR_OWVAR 39
8762: PUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_INT 2
8770: ARRAY
8771: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8772: LD_ADDR_OWVAR 38
8776: PUSH
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 3
8784: ARRAY
8785: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8786: LD_ADDR_OWVAR 40
8790: PUSH
8791: LD_VAR 0 2
8795: PUSH
8796: LD_INT 4
8798: ARRAY
8799: ST_TO_ADDR
// veh := CreateVehicle ;
8800: LD_ADDR_VAR 0 4
8804: PUSH
8805: CALL_OW 45
8809: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8810: LD_VAR 0 4
8814: PPUSH
8815: LD_INT 4
8817: PPUSH
8818: CALL_OW 233
// if i [ 3 ] = control_manual then
8822: LD_VAR 0 2
8826: PUSH
8827: LD_INT 3
8829: ARRAY
8830: PUSH
8831: LD_INT 1
8833: EQUAL
8834: IFFALSE 8928
// begin repeat wait ( 1 ) ;
8836: LD_INT 1
8838: PPUSH
8839: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8843: LD_VAR 0 4
8847: PPUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 0
8853: PPUSH
8854: CALL_OW 49
8858: IFFALSE 8836
// if i [ 4 ] = ar_control_tower then
8860: LD_VAR 0 2
8864: PUSH
8865: LD_INT 4
8867: ARRAY
8868: PUSH
8869: LD_INT 31
8871: EQUAL
8872: IFFALSE 8890
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_INT 3
8885: PPUSH
8886: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8890: LD_VAR 0 5
8894: PUSH
8895: LD_INT 1
8897: ARRAY
8898: PPUSH
8899: LD_VAR 0 4
8903: PPUSH
8904: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8908: LD_ADDR_VAR 0 5
8912: PUSH
8913: LD_VAR 0 5
8917: PPUSH
8918: LD_INT 1
8920: PPUSH
8921: CALL_OW 3
8925: ST_TO_ADDR
// end else
8926: GO 8998
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8928: LD_INT 22
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 34
8940: PUSH
8941: LD_INT 31
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: IFFALSE 8998
// begin repeat wait ( 1 ) ;
8958: LD_INT 1
8960: PPUSH
8961: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8965: LD_VAR 0 4
8969: PPUSH
8970: LD_INT 1
8972: PPUSH
8973: LD_INT 0
8975: PPUSH
8976: CALL_OW 49
8980: IFFALSE 8958
// Connect ( veh ) ;
8982: LD_VAR 0 4
8986: PPUSH
8987: CALL 25555 0 1
// wait ( 0 0$2 ) ;
8991: LD_INT 70
8993: PPUSH
8994: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8998: LD_VAR 0 4
9002: PPUSH
9003: LD_VAR 0 2
9007: PUSH
9008: LD_INT 6
9010: ARRAY
9011: PPUSH
9012: CALL_OW 234
// SetFuel ( veh , 20 ) ;
9016: LD_VAR 0 4
9020: PPUSH
9021: LD_INT 20
9023: PPUSH
9024: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
9028: LD_VAR 0 2
9032: PUSH
9033: LD_INT 7
9035: ARRAY
9036: IFFALSE 9060
9038: PUSH
9039: LD_VAR 0 4
9043: PPUSH
9044: CALL_OW 264
9048: PUSH
9049: LD_INT 51
9051: PUSH
9052: LD_INT 32
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: IN
9059: AND
9060: IFFALSE 9111
// begin for j := 1 to 2 do
9062: LD_ADDR_VAR 0 3
9066: PUSH
9067: DOUBLE
9068: LD_INT 1
9070: DEC
9071: ST_TO_ADDR
9072: LD_INT 2
9074: PUSH
9075: FOR_TO
9076: IFFALSE 9109
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
9078: LD_VAR 0 4
9082: PPUSH
9083: LD_VAR 0 3
9087: PPUSH
9088: LD_VAR 0 2
9092: PUSH
9093: LD_INT 7
9095: ARRAY
9096: PUSH
9097: LD_VAR 0 3
9101: ARRAY
9102: PPUSH
9103: CALL_OW 291
9107: GO 9075
9109: POP
9110: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
9111: LD_VAR 0 4
9115: PPUSH
9116: LD_INT 185
9118: PPUSH
9119: LD_INT 144
9121: PPUSH
9122: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
9126: LD_VAR 0 4
9130: PPUSH
9131: CALL_OW 263
9135: PUSH
9136: LD_INT 1
9138: EQUAL
9139: IFFALSE 9148
9141: PUSH
9142: LD_VAR 0 8
9146: NOT
9147: AND
9148: IFFALSE 9170
9150: PUSH
9151: LD_VAR 0 4
9155: PPUSH
9156: CALL_OW 311
9160: PPUSH
9161: CALL_OW 257
9165: PUSH
9166: LD_INT 2
9168: EQUAL
9169: AND
9170: IFFALSE 9275
// begin hasCamera := true ;
9172: LD_ADDR_VAR 0 8
9176: PUSH
9177: LD_INT 1
9179: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
9180: LD_ADDR_VAR 0 9
9184: PUSH
9185: LD_VAR 0 4
9189: PPUSH
9190: CALL_OW 311
9194: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
9195: LD_VAR 0 4
9199: PPUSH
9200: LD_INT 177
9202: PPUSH
9203: LD_INT 138
9205: PPUSH
9206: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9210: LD_VAR 0 9
9214: PPUSH
9215: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
9219: LD_VAR 0 9
9223: PPUSH
9224: LD_INT 190
9226: PPUSH
9227: LD_INT 150
9229: PPUSH
9230: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9234: LD_VAR 0 9
9238: PPUSH
9239: LD_VAR 0 4
9243: PPUSH
9244: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9248: LD_VAR 0 9
9252: PPUSH
9253: LD_INT 170
9255: PPUSH
9256: LD_INT 103
9258: PPUSH
9259: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9263: LD_INT 190
9265: PPUSH
9266: LD_INT 150
9268: PPUSH
9269: CALL_OW 84
// end else
9273: GO 9317
// begin AddComWait ( veh , 0 0$2 ) ;
9275: LD_VAR 0 4
9279: PPUSH
9280: LD_INT 70
9282: PPUSH
9283: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9287: LD_VAR 0 4
9291: PPUSH
9292: LD_INT 179
9294: PPUSH
9295: LD_INT 129
9297: PPUSH
9298: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9302: LD_VAR 0 4
9306: PPUSH
9307: LD_INT 170
9309: PPUSH
9310: LD_INT 103
9312: PPUSH
9313: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9317: LD_INT 70
9319: PPUSH
9320: CALL_OW 67
// end ;
9324: GO 8710
9326: POP
9327: POP
// end ; if tmp then
9328: LD_VAR 0 5
9332: IFFALSE 9488
// begin for i in tmp do
9334: LD_ADDR_VAR 0 2
9338: PUSH
9339: LD_VAR 0 5
9343: PUSH
9344: FOR_IN
9345: IFFALSE 9486
// begin SetDir ( i , 4 ) ;
9347: LD_VAR 0 2
9351: PPUSH
9352: LD_INT 4
9354: PPUSH
9355: CALL_OW 233
// repeat wait ( 1 ) ;
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9366: LD_VAR 0 2
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: LD_INT 0
9376: PPUSH
9377: CALL_OW 49
9381: IFFALSE 9359
// ComMoveXY ( i , 185 , 144 ) ;
9383: LD_VAR 0 2
9387: PPUSH
9388: LD_INT 185
9390: PPUSH
9391: LD_INT 144
9393: PPUSH
9394: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9398: LD_VAR 0 2
9402: PPUSH
9403: CALL_OW 257
9407: PUSH
9408: LD_INT 2
9410: EQUAL
9411: IFFALSE 9420
9413: PUSH
9414: LD_VAR 0 8
9418: NOT
9419: AND
9420: IFFALSE 9447
// begin hasCamera := true ;
9422: LD_ADDR_VAR 0 8
9426: PUSH
9427: LD_INT 1
9429: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 190
9437: PPUSH
9438: LD_INT 150
9440: PPUSH
9441: CALL_OW 217
// end else
9445: GO 9462
// AddComMoveXY ( i , 179 , 129 ) ;
9447: LD_VAR 0 2
9451: PPUSH
9452: LD_INT 179
9454: PPUSH
9455: LD_INT 129
9457: PPUSH
9458: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9462: LD_VAR 0 2
9466: PPUSH
9467: LD_INT 170
9469: PPUSH
9470: LD_INT 103
9472: PPUSH
9473: CALL_OW 171
// wait ( 0 0$2 ) ;
9477: LD_INT 70
9479: PPUSH
9480: CALL_OW 67
// end ;
9484: GO 9344
9486: POP
9487: POP
// end ; if heikeApes then
9488: LD_EXP 28
9492: IFFALSE 9619
// begin counter := 0 ;
9494: LD_ADDR_VAR 0 10
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// for i in heikeApes do
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_EXP 28
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9617
// begin if counter > 2 then
9515: LD_VAR 0 10
9519: PUSH
9520: LD_INT 2
9522: GREATER
9523: IFFALSE 9527
// break ;
9525: GO 9617
// counter := Inc ( counter ) ;
9527: LD_ADDR_VAR 0 10
9531: PUSH
9532: LD_VAR 0 10
9536: PPUSH
9537: CALL 56626 0 1
9541: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9542: LD_VAR 0 2
9546: PPUSH
9547: LD_INT 4
9549: PPUSH
9550: CALL_OW 233
// repeat wait ( 1 ) ;
9554: LD_INT 1
9556: PPUSH
9557: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9561: LD_VAR 0 2
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: LD_INT 0
9571: PPUSH
9572: CALL_OW 49
9576: IFFALSE 9554
// ComMoveXY ( i , 185 , 144 ) ;
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 185
9585: PPUSH
9586: LD_INT 144
9588: PPUSH
9589: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 170
9600: PPUSH
9601: LD_INT 103
9603: PPUSH
9604: CALL_OW 171
// wait ( 0 0$2 ) ;
9608: LD_INT 70
9610: PPUSH
9611: CALL_OW 67
// end ;
9615: GO 9512
9617: POP
9618: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9619: LD_EXP 15
9623: PPUSH
9624: LD_INT 163
9626: PPUSH
9627: LD_INT 89
9629: PPUSH
9630: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9634: LD_EXP 15
9638: PPUSH
9639: LD_STRING DH-Intro-1
9641: PPUSH
9642: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9646: LD_INT 175
9648: PPUSH
9649: LD_INT 117
9651: PPUSH
9652: CALL_OW 84
// if Markov then
9656: LD_EXP 22
9660: IFFALSE 10237
// begin Say ( Markov , DMar-Intro-2 ) ;
9662: LD_EXP 22
9666: PPUSH
9667: LD_STRING DMar-Intro-2
9669: PPUSH
9670: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9674: LD_EXP 22
9678: PPUSH
9679: LD_STRING DMar-Intro-3
9681: PPUSH
9682: CALL_OW 88
// wait ( 0 0$1 ) ;
9686: LD_INT 35
9688: PPUSH
9689: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9693: LD_EXP 15
9697: PPUSH
9698: CALL_OW 85
// if Kurt then
9702: LD_EXP 25
9706: IFFALSE 9758
// begin if IsInUnit ( Kurt ) then
9708: LD_EXP 25
9712: PPUSH
9713: CALL_OW 310
9717: IFFALSE 9728
// ComExit ( Kurt ) ;
9719: LD_EXP 25
9723: PPUSH
9724: CALL 55651 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9728: LD_EXP 25
9732: PPUSH
9733: LD_INT 130
9735: PPUSH
9736: LD_INT 56
9738: PPUSH
9739: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9743: LD_EXP 25
9747: PPUSH
9748: LD_INT 129
9750: PPUSH
9751: LD_INT 56
9753: PPUSH
9754: CALL_OW 178
// end ; if Kaia then
9758: LD_EXP 20
9762: IFFALSE 9942
// begin Say ( Kaia , DK-Intro-4 ) ;
9764: LD_EXP 20
9768: PPUSH
9769: LD_STRING DK-Intro-4
9771: PPUSH
9772: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9776: LD_EXP 22
9780: PPUSH
9781: LD_STRING DMar-Intro-5
9783: PPUSH
9784: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9788: LD_EXP 22
9792: PPUSH
9793: LD_STRING DMar-Intro-6
9795: PPUSH
9796: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9800: LD_EXP 24
9804: PPUSH
9805: LD_STRING DO-Intro-7
9807: PPUSH
9808: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9812: LD_INT 160
9814: PPUSH
9815: LD_INT 85
9817: PPUSH
9818: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9822: LD_EXP 22
9826: PPUSH
9827: LD_STRING DMar-Intro-8
9829: PPUSH
9830: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9834: LD_EXP 22
9838: PPUSH
9839: LD_STRING DMar-Intro-9
9841: PPUSH
9842: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9846: LD_EXP 22
9850: PPUSH
9851: LD_STRING DMar-Intro-10
9853: PPUSH
9854: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9858: LD_EXP 22
9862: PPUSH
9863: LD_STRING DMar-Intro-11
9865: PPUSH
9866: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9870: LD_EXP 16
9874: PPUSH
9875: LD_STRING DG-Intro-12
9877: PPUSH
9878: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9882: LD_EXP 16
9886: PPUSH
9887: LD_STRING DG-Intro-13
9889: PPUSH
9890: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9894: LD_EXP 16
9898: PPUSH
9899: LD_STRING DG-Intro-14
9901: PPUSH
9902: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9906: LD_EXP 16
9910: PPUSH
9911: LD_STRING DG-Intro-15
9913: PPUSH
9914: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9918: LD_EXP 15
9922: PPUSH
9923: LD_STRING DH-Intro-16
9925: PPUSH
9926: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9930: LD_EXP 22
9934: PPUSH
9935: LD_STRING DMar-Intro-17
9937: PPUSH
9938: CALL_OW 88
// end ; if Kurt and Mike then
9942: LD_EXP 25
9946: IFFALSE 9954
9948: PUSH
9949: LD_EXP 17
9953: AND
9954: IFFALSE 10237
// begin CenterNowOnUnits ( Kurt ) ;
9956: LD_EXP 25
9960: PPUSH
9961: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9965: LD_EXP 25
9969: PPUSH
9970: LD_EXP 15
9974: PPUSH
9975: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9979: LD_EXP 25
9983: PPUSH
9984: LD_STRING DKs-Intro-18
9986: PPUSH
9987: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9991: LD_EXP 25
9995: PPUSH
9996: LD_STRING DKs-Intro-19
9998: PPUSH
9999: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
10003: LD_EXP 17
10007: PPUSH
10008: CALL_OW 87
// if IsInUnit ( Mike ) then
10012: LD_EXP 17
10016: PPUSH
10017: CALL_OW 310
10021: IFFALSE 10032
// ComExit ( Mike ) ;
10023: LD_EXP 17
10027: PPUSH
10028: CALL 55651 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
10032: LD_EXP 17
10036: PPUSH
10037: LD_INT 129
10039: PPUSH
10040: LD_INT 53
10042: PPUSH
10043: CALL_OW 171
// AddComHold ( Mike ) ;
10047: LD_EXP 17
10051: PPUSH
10052: CALL_OW 200
// wait ( 0 0$2 ) ;
10056: LD_INT 70
10058: PPUSH
10059: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
10063: LD_EXP 17
10067: PPUSH
10068: LD_STRING DM-Intro-20
10070: PPUSH
10071: CALL_OW 88
// scoutActive := Query ( Scout ) ;
10075: LD_ADDR_EXP 3
10079: PUSH
10080: LD_STRING Scout
10082: PPUSH
10083: CALL_OW 97
10087: ST_TO_ADDR
// if scoutActive = 1 then
10088: LD_EXP 3
10092: PUSH
10093: LD_INT 1
10095: EQUAL
10096: IFFALSE 10193
// begin CenterNowOnUnits ( Kurt ) ;
10098: LD_EXP 25
10102: PPUSH
10103: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
10107: LD_EXP 15
10111: PPUSH
10112: LD_STRING DH-Intro-21
10114: PPUSH
10115: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
10119: LD_EXP 17
10123: PPUSH
10124: LD_STRING DM-Intro-22
10126: PPUSH
10127: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
10131: LD_EXP 25
10135: PPUSH
10136: LD_STRING DKs-Intro-23
10138: PPUSH
10139: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
10143: LD_EXP 25
10147: PPUSH
10148: LD_INT 5
10150: PPUSH
10151: CALL_OW 235
// SetSide ( Mike , 5 ) ;
10155: LD_EXP 17
10159: PPUSH
10160: LD_INT 5
10162: PPUSH
10163: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
10167: LD_EXP 25
10171: PUSH
10172: LD_EXP 17
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: LD_INT 104
10183: PPUSH
10184: LD_INT 66
10186: PPUSH
10187: CALL_OW 111
// end else
10191: GO 10237
// begin scoutActive := 0 ;
10193: LD_ADDR_EXP 3
10197: PUSH
10198: LD_INT 0
10200: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
10201: LD_EXP 15
10205: PPUSH
10206: LD_STRING DH-Intro-a-21
10208: PPUSH
10209: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
10213: LD_EXP 17
10217: PPUSH
10218: LD_STRING DM-Intro-a-22
10220: PPUSH
10221: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
10225: LD_EXP 25
10229: PPUSH
10230: LD_STRING DKs-Intro-a-23
10232: PPUSH
10233: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
10237: LD_INT 0
10239: PPUSH
10240: CALL 55225 0 1
// tick := 0 ;
10244: LD_ADDR_OWVAR 1
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// music_nat := music_auto ;
10252: LD_ADDR_OWVAR 71
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// music_class := music_auto ;
10260: LD_ADDR_OWVAR 72
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10268: LD_STRING M1
10270: PPUSH
10271: CALL_OW 337
// wait ( 0 0$3 ) ;
10275: LD_INT 105
10277: PPUSH
10278: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10282: LD_EXP 15
10286: PPUSH
10287: LD_STRING DH-Base-1
10289: PPUSH
10290: CALL_OW 88
// if Kaia then
10294: LD_EXP 20
10298: IFFALSE 10408
// begin Say ( Kaia , DK-Base-2 ) ;
10300: LD_EXP 20
10304: PPUSH
10305: LD_STRING DK-Base-2
10307: PPUSH
10308: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10312: LD_EXP 15
10316: PPUSH
10317: LD_STRING DH-Base-3
10319: PPUSH
10320: CALL_OW 88
// if Aviradze then
10324: LD_EXP 26
10328: IFFALSE 10408
// begin Say ( Aviradze , DA-Base-4 ) ;
10330: LD_EXP 26
10334: PPUSH
10335: LD_STRING DA-Base-4
10337: PPUSH
10338: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10342: LD_EXP 20
10346: PPUSH
10347: LD_STRING DK-Base-5
10349: PPUSH
10350: CALL_OW 88
// if Markov then
10354: LD_EXP 22
10358: IFFALSE 10408
// begin Say ( Markov , DMar-Base-6 ) ;
10360: LD_EXP 22
10364: PPUSH
10365: LD_STRING DMar-Base-6
10367: PPUSH
10368: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10372: LD_EXP 20
10376: PPUSH
10377: LD_STRING DK-Base-7
10379: PPUSH
10380: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10384: LD_EXP 22
10388: PPUSH
10389: LD_STRING DMar-Base-8
10391: PPUSH
10392: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10396: LD_EXP 22
10400: PPUSH
10401: LD_STRING DMar-Base-9
10403: PPUSH
10404: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10408: CALL_OW 22
// end ;
10412: LD_VAR 0 1
10416: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10417: LD_EXP 5
10421: IFFALSE 11536
10423: GO 10425
10425: DISABLE
10426: LD_INT 0
10428: PPUSH
10429: PPUSH
// begin InGameOn ;
10430: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10434: LD_EXP 17
10438: PUSH
10439: LD_EXP 25
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: LD_EXP 15
10452: PPUSH
10453: CALL_OW 119
// ComExit ( Heike ) ;
10457: LD_EXP 15
10461: PPUSH
10462: CALL 55651 0 1
// if IsOk ( Mike ) then
10466: LD_EXP 17
10470: PPUSH
10471: CALL_OW 302
10475: IFFALSE 10493
// AddComTurnUnit ( Heike , Mike ) else
10477: LD_EXP 15
10481: PPUSH
10482: LD_EXP 17
10486: PPUSH
10487: CALL_OW 179
10491: GO 10507
// AddComTurnUnit ( Heike , Kurt ) ;
10493: LD_EXP 15
10497: PPUSH
10498: LD_EXP 25
10502: PPUSH
10503: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10507: LD_EXP 17
10511: PPUSH
10512: CALL_OW 302
10516: IFFALSE 10529
10518: PUSH
10519: LD_EXP 25
10523: PPUSH
10524: CALL_OW 302
10528: AND
10529: IFFALSE 10780
// begin CenterNowOnUnits ( Mike ) ;
10531: LD_EXP 17
10535: PPUSH
10536: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10540: LD_EXP 17
10544: PPUSH
10545: LD_STRING DM-Scout-1
10547: PPUSH
10548: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10552: LD_EXP 15
10556: PPUSH
10557: LD_STRING DH-Scout-2
10559: PPUSH
10560: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10564: LD_EXP 25
10568: PPUSH
10569: LD_STRING DKs-Scout-3
10571: PPUSH
10572: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10576: LD_EXP 15
10580: PPUSH
10581: LD_STRING DH-Scout-4
10583: PPUSH
10584: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10588: LD_EXP 15
10592: PPUSH
10593: LD_STRING DH-Scout-5
10595: PPUSH
10596: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10600: LD_ADDR_VAR 0 2
10604: PUSH
10605: LD_INT 72
10607: PUSH
10608: LD_INT 122
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 89
10617: PUSH
10618: LD_INT 131
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 99
10627: PUSH
10628: LD_INT 139
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 100
10637: PUSH
10638: LD_INT 148
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: ST_TO_ADDR
// for i in tmp do
10651: LD_ADDR_VAR 0 1
10655: PUSH
10656: LD_VAR 0 2
10660: PUSH
10661: FOR_IN
10662: IFFALSE 10720
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10664: LD_VAR 0 1
10668: PUSH
10669: LD_INT 1
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 1
10677: PUSH
10678: LD_INT 2
10680: ARRAY
10681: PPUSH
10682: LD_INT 2
10684: PPUSH
10685: LD_INT 6
10687: NEG
10688: PPUSH
10689: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10693: LD_VAR 0 1
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PPUSH
10702: LD_VAR 0 1
10706: PUSH
10707: LD_INT 2
10709: ARRAY
10710: PPUSH
10711: LD_INT 2
10713: PPUSH
10714: CALL_OW 331
// end ;
10718: GO 10661
10720: POP
10721: POP
// CenterOnXY ( 83 , 132 ) ;
10722: LD_INT 83
10724: PPUSH
10725: LD_INT 132
10727: PPUSH
10728: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10732: LD_EXP 25
10736: PPUSH
10737: LD_STRING DKs-Scout-6
10739: PPUSH
10740: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10744: LD_EXP 17
10748: PPUSH
10749: LD_STRING DM-Scout-7
10751: PPUSH
10752: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10756: LD_EXP 17
10760: PPUSH
10761: LD_STRING DM-Scout-8
10763: PPUSH
10764: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10768: LD_EXP 25
10772: PPUSH
10773: LD_STRING DKs-Scout-9
10775: PPUSH
10776: CALL_OW 88
// end ; if IsDead ( Mike ) then
10780: LD_EXP 17
10784: PPUSH
10785: CALL_OW 301
10789: IFFALSE 10956
// begin CenterNowOnUnits ( Kurt ) ;
10791: LD_EXP 25
10795: PPUSH
10796: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10800: LD_EXP 25
10804: PPUSH
10805: LD_STRING DKs-Scout-b-1
10807: PPUSH
10808: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10812: LD_EXP 25
10816: PPUSH
10817: LD_STRING DKs-Scout-b-2
10819: PPUSH
10820: CALL_OW 88
// if IsOk ( Givi ) then
10824: LD_EXP 16
10828: PPUSH
10829: CALL_OW 302
10833: IFFALSE 10908
// begin ComExit ( Givi ) ;
10835: LD_EXP 16
10839: PPUSH
10840: CALL 55651 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10844: LD_EXP 16
10848: PPUSH
10849: LD_EXP 25
10853: PPUSH
10854: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10858: LD_EXP 16
10862: PPUSH
10863: LD_STRING DG-Scout-b-3
10865: PPUSH
10866: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10870: LD_EXP 16
10874: PPUSH
10875: LD_STRING DG-Scout-b-4
10877: PPUSH
10878: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10882: LD_EXP 16
10886: PPUSH
10887: LD_STRING DG-Scout-b-5
10889: PPUSH
10890: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10894: LD_EXP 15
10898: PPUSH
10899: LD_STRING DH-Scout-b-6
10901: PPUSH
10902: CALL_OW 88
// end else
10906: GO 10920
// Say ( Heike , DH-Scout-a-4 ) ;
10908: LD_EXP 15
10912: PPUSH
10913: LD_STRING DH-Scout-a-4
10915: PPUSH
10916: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10920: LD_EXP 25
10924: PPUSH
10925: LD_STRING DKs-Scout-b-7
10927: PPUSH
10928: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10932: LD_EXP 25
10936: PPUSH
10937: LD_STRING DKs-Scout-b-8
10939: PPUSH
10940: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10944: LD_EXP 25
10948: PPUSH
10949: LD_STRING DKs-Scout-b-9
10951: PPUSH
10952: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10956: LD_EXP 25
10960: PPUSH
10961: CALL_OW 301
10965: IFFALSE 11244
// begin CenterNowOnUnits ( Mike ) ;
10967: LD_EXP 17
10971: PPUSH
10972: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10976: LD_EXP 17
10980: PPUSH
10981: LD_STRING DM-Scout-a-1
10983: PPUSH
10984: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10988: LD_EXP 17
10992: PPUSH
10993: LD_STRING DM-Scout-a-2
10995: PPUSH
10996: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
11000: LD_EXP 17
11004: PPUSH
11005: CALL_OW 256
11009: PUSH
11010: LD_INT 1000
11012: LESS
11013: IFFALSE 11029
// Say ( Heike , DH-Scout-a-3 ) else
11015: LD_EXP 15
11019: PPUSH
11020: LD_STRING DH-Scout-a-3
11022: PPUSH
11023: CALL_OW 88
11027: GO 11041
// Say ( Heike , DH-Scout-a-4 ) ;
11029: LD_EXP 15
11033: PPUSH
11034: LD_STRING DH-Scout-a-4
11036: PPUSH
11037: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
11041: LD_EXP 17
11045: PPUSH
11046: LD_STRING DM-Scout-a-5
11048: PPUSH
11049: CALL_OW 88
// if IsOk ( Kaia ) then
11053: LD_EXP 20
11057: PPUSH
11058: CALL_OW 302
11062: IFFALSE 11244
// begin ComExit ( Kaia ) ;
11064: LD_EXP 20
11068: PPUSH
11069: CALL 55651 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
11073: LD_EXP 20
11077: PPUSH
11078: LD_EXP 17
11082: PPUSH
11083: CALL_OW 172
// wait ( 0 0$2 ) ;
11087: LD_INT 70
11089: PPUSH
11090: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
11094: LD_EXP 20
11098: PPUSH
11099: LD_EXP 17
11103: PPUSH
11104: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
11108: LD_EXP 17
11112: PPUSH
11113: LD_EXP 20
11117: PPUSH
11118: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
11122: LD_EXP 20
11126: PPUSH
11127: LD_STRING DK-Scout-a-6
11129: PPUSH
11130: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
11134: LD_EXP 17
11138: PPUSH
11139: LD_STRING DM-Scout-a-7
11141: PPUSH
11142: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
11146: LD_EXP 20
11150: PPUSH
11151: LD_STRING DK-Scout-a-8
11153: PPUSH
11154: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
11158: LD_EXP 20
11162: PPUSH
11163: LD_STRING DK-Scout-a-9
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
11170: LD_EXP 15
11174: PPUSH
11175: LD_STRING DH-Scout-a-10
11177: PPUSH
11178: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
11182: LD_EXP 17
11186: PPUSH
11187: LD_EXP 15
11191: PPUSH
11192: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
11196: LD_EXP 17
11200: PPUSH
11201: LD_STRING DM-Scout-a-11
11203: PPUSH
11204: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
11208: LD_EXP 17
11212: PPUSH
11213: LD_STRING DM-Scout-a-12
11215: PPUSH
11216: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
11220: LD_EXP 17
11224: PPUSH
11225: LD_STRING DM-Scout-a-13
11227: PPUSH
11228: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
11232: LD_EXP 17
11236: PPUSH
11237: LD_STRING DM-Scout-a-14
11239: PPUSH
11240: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
11244: LD_EXP 16
11248: PPUSH
11249: CALL_OW 302
11253: IFFALSE 11281
// begin Say ( Givi , DG-Scout-10 ) ;
11255: LD_EXP 16
11259: PPUSH
11260: LD_STRING DG-Scout-10
11262: PPUSH
11263: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11267: LD_EXP 16
11271: PPUSH
11272: LD_STRING DG-Scout-11
11274: PPUSH
11275: CALL_OW 88
// end else
11279: GO 11338
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11281: LD_EXP 27
11285: PPUSH
11286: LD_INT 26
11288: PUSH
11289: LD_INT 1
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 72
11300: PPUSH
11301: LD_STRING DArm-Scout-10
11303: PPUSH
11304: CALL 224 0 2
11308: NOT
11309: IFFALSE 11338
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11311: LD_EXP 27
11315: PPUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 2
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 72
11330: PPUSH
11331: LD_STRING DArf-Scout-10
11333: PPUSH
11334: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11338: LD_EXP 15
11342: PPUSH
11343: LD_STRING DH-Scout-12
11345: PPUSH
11346: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11350: LD_EXP 15
11354: PPUSH
11355: LD_STRING DH-Scout-13
11357: PPUSH
11358: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11362: LD_EXP 17
11366: PPUSH
11367: CALL_OW 302
11371: IFFALSE 11384
11373: PUSH
11374: LD_EXP 25
11378: PPUSH
11379: CALL_OW 302
11383: AND
11384: IFFALSE 11412
// begin Say ( Mike , DM-Scout-14 ) ;
11386: LD_EXP 17
11390: PPUSH
11391: LD_STRING DM-Scout-14
11393: PPUSH
11394: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11398: LD_EXP 15
11402: PPUSH
11403: LD_STRING DH-Scout-c-14
11405: PPUSH
11406: CALL_OW 88
// end else
11410: GO 11505
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11412: LD_EXP 17
11416: PPUSH
11417: CALL_OW 302
11421: PUSH
11422: LD_EXP 25
11426: PPUSH
11427: CALL_OW 302
11431: XOR
11432: IFFALSE 11493
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11434: LD_EXP 27
11438: PPUSH
11439: LD_INT 26
11441: PUSH
11442: LD_INT 1
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PPUSH
11449: CALL_OW 72
11453: PPUSH
11454: LD_STRING DArm-Scout-a-14
11456: PPUSH
11457: CALL 224 0 2
11461: NOT
11462: IFFALSE 11491
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11464: LD_EXP 27
11468: PPUSH
11469: LD_INT 26
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PPUSH
11479: CALL_OW 72
11483: PPUSH
11484: LD_STRING DArf-Scout-a-14
11486: PPUSH
11487: CALL 224 0 2
// end else
11491: GO 11505
// Say ( Heike , DH-Scout-d-14 ) ;
11493: LD_EXP 15
11497: PPUSH
11498: LD_STRING DH-Scout-d-14
11500: PPUSH
11501: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11505: LD_EXP 15
11509: PPUSH
11510: LD_STRING DH-Scout-15
11512: PPUSH
11513: CALL_OW 88
// InGameOff ;
11517: CALL_OW 9
// wait ( 1 1$00 ) ;
11521: LD_INT 2100
11523: PPUSH
11524: CALL_OW 67
// usAttacksAllowed := true ;
11528: LD_ADDR_EXP 6
11532: PUSH
11533: LD_INT 1
11535: ST_TO_ADDR
// end ;
11536: PPOPN 2
11538: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11539: LD_EXP 4
11543: IFFALSE 11720
11545: GO 11547
11547: DISABLE
11548: LD_INT 0
11550: PPUSH
// begin spoken := true ;
11551: LD_ADDR_VAR 0 1
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11559: LD_INT 1050
11561: PPUSH
11562: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11566: LD_EXP 15
11570: PPUSH
11571: LD_STRING DH-Scout-c-1
11573: PPUSH
11574: CALL_OW 88
// if not IsOk ( Givi ) then
11578: LD_EXP 16
11582: PPUSH
11583: CALL_OW 302
11587: NOT
11588: IFFALSE 11592
// exit ;
11590: GO 11720
// if IsOk ( Givi ) then
11592: LD_EXP 16
11596: PPUSH
11597: CALL_OW 302
11601: IFFALSE 11629
// begin Say ( Givi , DG-Scout-c-2 ) ;
11603: LD_EXP 16
11607: PPUSH
11608: LD_STRING DG-Scout-c-2
11610: PPUSH
11611: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11615: LD_EXP 16
11619: PPUSH
11620: LD_STRING DG-Scout-c-3
11622: PPUSH
11623: CALL_OW 88
// end else
11627: GO 11702
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_EXP 27
11638: PPUSH
11639: LD_INT 26
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PPUSH
11649: CALL_OW 72
11653: PPUSH
11654: LD_STRING DArm-Scout-c-3
11656: PPUSH
11657: CALL 224 0 2
11661: ST_TO_ADDR
// if not spoken then
11662: LD_VAR 0 1
11666: NOT
11667: IFFALSE 11702
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11669: LD_ADDR_VAR 0 1
11673: PUSH
11674: LD_EXP 27
11678: PPUSH
11679: LD_INT 26
11681: PUSH
11682: LD_INT 2
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 72
11693: PPUSH
11694: LD_STRING DArf-Scout-c-3
11696: PPUSH
11697: CALL 224 0 2
11701: ST_TO_ADDR
// ; end ; if spoken then
11702: LD_VAR 0 1
11706: IFFALSE 11720
// Say ( Heike , DH-Scout-c-4 ) ;
11708: LD_EXP 15
11712: PPUSH
11713: LD_STRING DH-Scout-c-4
11715: PPUSH
11716: CALL_OW 88
// end ;
11720: PPOPN 1
11722: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11723: LD_INT 22
11725: PUSH
11726: LD_INT 2
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 30
11735: PUSH
11736: LD_INT 7
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: IFFALSE 11764
11753: PUSH
11754: LD_EXP 26
11758: PPUSH
11759: CALL_OW 302
11763: AND
11764: IFFALSE 11849
11766: GO 11768
11768: DISABLE
// begin DialogueOn ;
11769: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11773: LD_EXP 26
11777: PPUSH
11778: LD_STRING DA-Lab-1
11780: PPUSH
11781: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11785: LD_EXP 15
11789: PPUSH
11790: LD_STRING DH-Lab-2
11792: PPUSH
11793: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11797: LD_EXP 26
11801: PPUSH
11802: LD_STRING DA-Lab-3
11804: PPUSH
11805: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11809: LD_EXP 26
11813: PPUSH
11814: LD_STRING DA-Lab-4
11816: PPUSH
11817: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11821: LD_EXP 26
11825: PPUSH
11826: LD_STRING DA-Lab-5
11828: PPUSH
11829: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11833: LD_EXP 15
11837: PPUSH
11838: LD_STRING DH-Lab-6
11840: PPUSH
11841: CALL_OW 88
// DialogueOff ;
11845: CALL_OW 7
// end ;
11849: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do var i ;
11850: LD_INT 7
11852: PPUSH
11853: LD_INT 2
11855: PPUSH
11856: CALL_OW 321
11860: PUSH
11861: LD_INT 2
11863: EQUAL
11864: IFFALSE 11877
11866: PUSH
11867: LD_EXP 16
11871: PPUSH
11872: CALL_OW 302
11876: AND
11877: IFFALSE 12097
11879: GO 11881
11881: DISABLE
11882: LD_INT 0
11884: PPUSH
// begin DialogueOn ;
11885: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11889: LD_EXP 16
11893: PPUSH
11894: LD_STRING DG-Opt-1
11896: PPUSH
11897: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11901: LD_EXP 15
11905: PPUSH
11906: LD_STRING DH-Opt-2
11908: PPUSH
11909: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11913: LD_EXP 16
11917: PPUSH
11918: LD_STRING DG-Opt-3
11920: PPUSH
11921: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11925: LD_EXP 16
11929: PPUSH
11930: LD_STRING DG-Opt-4
11932: PPUSH
11933: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11937: LD_EXP 15
11941: PPUSH
11942: LD_STRING DH-Opt-5
11944: PPUSH
11945: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11949: LD_EXP 16
11953: PPUSH
11954: LD_STRING DG-Opt-6
11956: PPUSH
11957: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11961: LD_EXP 15
11965: PPUSH
11966: LD_STRING DH-Opt-7
11968: PPUSH
11969: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11973: LD_EXP 16
11977: PPUSH
11978: LD_STRING DG-Opt-8
11980: PPUSH
11981: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11985: LD_EXP 16
11989: PPUSH
11990: LD_STRING DG-Opt-9
11992: PPUSH
11993: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11997: LD_EXP 15
12001: PPUSH
12002: LD_STRING DH-Opt-10
12004: PPUSH
12005: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
12009: LD_EXP 16
12013: PPUSH
12014: LD_STRING DG-Opt-11
12016: PPUSH
12017: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
12021: LD_EXP 16
12025: PPUSH
12026: LD_STRING DG-Opt-12
12028: PPUSH
12029: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
12033: LD_EXP 15
12037: PPUSH
12038: LD_STRING DH-Opt-13
12040: PPUSH
12041: CALL_OW 88
// DialogueOff ;
12045: CALL_OW 7
// for i := 1 to 3 do
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: DOUBLE
12055: LD_INT 1
12057: DEC
12058: ST_TO_ADDR
12059: LD_INT 3
12061: PUSH
12062: FOR_TO
12063: IFFALSE 12095
// begin wait ( 0 0$10 ) ;
12065: LD_INT 350
12067: PPUSH
12068: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
12072: LD_INT 1
12074: PPUSH
12075: LD_INT 5
12077: PPUSH
12078: CALL_OW 12
12082: PPUSH
12083: LD_INT 7
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 55
// end ;
12093: GO 12062
12095: POP
12096: POP
// end ;
12097: PPOPN 1
12099: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
12100: LD_EXP 27
12104: PPUSH
12105: LD_INT 95
12107: PUSH
12108: LD_INT 7
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 23
12117: PUSH
12118: LD_INT 2
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 26
12127: PUSH
12128: LD_INT 1
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 72
12144: IFFALSE 12205
12146: GO 12148
12148: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
12149: LD_EXP 27
12153: PPUSH
12154: LD_INT 95
12156: PUSH
12157: LD_INT 7
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 23
12166: PUSH
12167: LD_INT 2
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 1
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 72
12193: PUSH
12194: LD_INT 1
12196: ARRAY
12197: PPUSH
12198: LD_STRING DArm-River
12200: PPUSH
12201: CALL_OW 88
// end ;
12205: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
12206: LD_INT 40
12208: PPUSH
12209: LD_INT 2
12211: PPUSH
12212: CALL_OW 321
12216: PUSH
12217: LD_INT 2
12219: EQUAL
12220: IFFALSE 12233
12222: PUSH
12223: LD_EXP 18
12227: PPUSH
12228: CALL_OW 302
12232: AND
12233: IFFALSE 12487
12235: GO 12237
12237: DISABLE
// begin DialogueOn ;
12238: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
12242: LD_EXP 18
12246: PPUSH
12247: LD_STRING DI-Roc-1
12249: PPUSH
12250: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
12254: LD_EXP 15
12258: PPUSH
12259: LD_STRING DH-Roc-2
12261: PPUSH
12262: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
12266: LD_EXP 18
12270: PPUSH
12271: LD_STRING DI-Roc-3
12273: PPUSH
12274: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
12278: LD_EXP 18
12282: PPUSH
12283: LD_STRING DI-Roc-4
12285: PPUSH
12286: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
12290: LD_EXP 20
12294: PPUSH
12295: LD_STRING DK-Roc-5
12297: PPUSH
12298: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
12302: LD_EXP 20
12306: PPUSH
12307: LD_STRING DK-Roc-6
12309: PPUSH
12310: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
12314: LD_EXP 16
12318: PPUSH
12319: LD_STRING DG-Roc-7
12321: PPUSH
12322: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
12326: LD_EXP 16
12330: PPUSH
12331: LD_STRING DG-Roc-8
12333: PPUSH
12334: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12338: LD_EXP 22
12342: PPUSH
12343: CALL_OW 302
12347: IFFALSE 12360
12349: PUSH
12350: LD_EXP 20
12354: PPUSH
12355: CALL_OW 302
12359: AND
12360: IFFALSE 12373
12362: PUSH
12363: LD_EXP 16
12367: PPUSH
12368: CALL_OW 302
12372: AND
12373: IFFALSE 12483
// begin Say ( Markov , DMar-Roc-9 ) ;
12375: LD_EXP 22
12379: PPUSH
12380: LD_STRING DMar-Roc-9
12382: PPUSH
12383: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12387: LD_EXP 22
12391: PPUSH
12392: LD_STRING DMar-Roc-10
12394: PPUSH
12395: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12399: LD_EXP 20
12403: PPUSH
12404: LD_STRING DK-Roc-11
12406: PPUSH
12407: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12411: LD_EXP 22
12415: PPUSH
12416: LD_STRING DMar-Roc-12
12418: PPUSH
12419: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12423: LD_EXP 20
12427: PPUSH
12428: LD_STRING DK-Roc-13
12430: PPUSH
12431: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12435: LD_EXP 16
12439: PPUSH
12440: LD_STRING DG-Roc-14
12442: PPUSH
12443: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12447: LD_EXP 22
12451: PPUSH
12452: LD_STRING DMar-Roc-15
12454: PPUSH
12455: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12459: LD_EXP 22
12463: PPUSH
12464: LD_STRING DMar-Roc-16
12466: PPUSH
12467: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12471: LD_EXP 20
12475: PPUSH
12476: LD_STRING DK-Roc-17
12478: PPUSH
12479: CALL_OW 88
// end ; DialogueOff ;
12483: CALL_OW 7
// end ;
12487: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12488: LD_EXP 30
12492: PPUSH
12493: CALL_OW 256
12497: PUSH
12498: LD_INT 1000
12500: LESS
12501: IFTRUE 12548
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 23
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: PUSH
12544: LD_INT 6
12546: LESS
12547: OR
12548: IFTRUE 12595
12550: PUSH
12551: LD_INT 22
12553: PUSH
12554: LD_INT 1
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 25
12573: PUSH
12574: LD_INT 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: PUSH
12591: LD_INT 2
12593: LESS
12594: OR
12595: IFFALSE 13927
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
12603: PPUSH
12604: PPUSH
// begin usAttacksAllowed := false ;
12605: LD_ADDR_EXP 6
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// usSurrender := true ;
12613: LD_ADDR_EXP 7
12617: PUSH
12618: LD_INT 1
12620: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 2
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 80
// if IsDead ( usCommander ) then
12637: LD_EXP 30
12641: PPUSH
12642: CALL_OW 301
12646: IFFALSE 12650
// exit ;
12648: GO 13927
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_hastask ] ] ) do
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: LD_INT 22
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: LD_INT 21
12670: PUSH
12671: LD_INT 1
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 21
12680: PUSH
12681: LD_INT 2
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 60
12695: PUSH
12696: EMPTY
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: PPUSH
12704: CALL_OW 69
12708: PUSH
12709: FOR_IN
12710: IFFALSE 12723
// ComStop ( i ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: CALL_OW 141
12721: GO 12709
12723: POP
12724: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 3
12742: PUSH
12743: LD_INT 50
12745: PUSH
12746: EMPTY
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: PPUSH
12768: CALL_OW 69
12772: PUSH
12773: FOR_IN
12774: IFFALSE 12790
// SetLives ( i , 251 ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: LD_INT 251
12783: PPUSH
12784: CALL_OW 234
12788: GO 12773
12790: POP
12791: POP
// Video ( true ) ;
12792: LD_INT 1
12794: PPUSH
12795: CALL 55225 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12799: LD_ADDR_VAR 0 1
12803: PUSH
12804: LD_INT 22
12806: PUSH
12807: LD_INT 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PPUSH
12814: CALL_OW 69
12818: PUSH
12819: FOR_IN
12820: IFFALSE 12833
// ComStop ( i ) ;
12822: LD_VAR 0 1
12826: PPUSH
12827: CALL_OW 141
12831: GO 12819
12833: POP
12834: POP
// if not IsOk ( usCommander ) then
12835: LD_EXP 30
12839: PPUSH
12840: CALL_OW 302
12844: NOT
12845: IFFALSE 12859
// SetLives ( usCommander , 1000 ) ;
12847: LD_EXP 30
12851: PPUSH
12852: LD_INT 1000
12854: PPUSH
12855: CALL_OW 234
// InGameOn ;
12859: CALL_OW 8
// ComExit ( usCommander ) ;
12863: LD_EXP 30
12867: PPUSH
12868: CALL 55651 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12872: LD_EXP 30
12876: PPUSH
12877: LD_INT 81
12879: PPUSH
12880: LD_INT 143
12882: PPUSH
12883: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12887: LD_EXP 30
12891: PPUSH
12892: LD_INT 81
12894: PPUSH
12895: LD_INT 139
12897: PPUSH
12898: CALL_OW 178
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12902: LD_ADDR_VAR 0 1
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: FOR_IN
12923: IFFALSE 12936
// ComStop ( i ) ;
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 141
12934: GO 12922
12936: POP
12937: POP
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12938: LD_INT 81
12940: PPUSH
12941: LD_INT 144
12943: PPUSH
12944: LD_INT 2
12946: PPUSH
12947: LD_INT 10
12949: NEG
12950: PPUSH
12951: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12955: LD_EXP 30
12959: PPUSH
12960: CALL_OW 87
// wait ( 0 0$2 ) ;
12964: LD_INT 70
12966: PPUSH
12967: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12971: LD_EXP 30
12975: PPUSH
12976: LD_STRING DCa-Surrender-1
12978: PPUSH
12979: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12983: LD_EXP 15
12987: PPUSH
12988: LD_STRING DH-Surrender-2
12990: PPUSH
12991: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12995: LD_EXP 15
12999: PPUSH
13000: CALL_OW 310
13004: PPUSH
13005: CALL_OW 247
13009: PUSH
13010: LD_INT 3
13012: EQUAL
13013: IFFALSE 13031
// begin ComExit ( Heike ) ;
13015: LD_EXP 15
13019: PPUSH
13020: CALL 55651 0 1
// wait ( 3 ) ;
13024: LD_INT 3
13026: PPUSH
13027: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
13031: LD_EXP 15
13035: PPUSH
13036: LD_INT 82
13038: PPUSH
13039: LD_INT 133
13041: PPUSH
13042: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
13046: LD_EXP 15
13050: PPUSH
13051: LD_EXP 30
13055: PPUSH
13056: CALL_OW 179
// wait ( 0 0$3 ) ;
13060: LD_INT 105
13062: PPUSH
13063: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
13067: LD_EXP 15
13071: PPUSH
13072: LD_STRING DH-Surrender-3
13074: PPUSH
13075: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
13079: LD_EXP 15
13083: PPUSH
13084: LD_STRING DH-Surrender-4
13086: PPUSH
13087: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
13091: LD_INT 81
13093: PPUSH
13094: LD_INT 144
13096: PPUSH
13097: LD_INT 2
13099: PPUSH
13100: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
13104: LD_INT 1
13106: PPUSH
13107: LD_INT 2
13109: PPUSH
13110: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
13114: LD_ADDR_VAR 0 1
13118: PUSH
13119: LD_INT 22
13121: PUSH
13122: LD_INT 1
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 23
13131: PUSH
13132: LD_INT 1
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 54
13141: PUSH
13142: EMPTY
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: PPUSH
13150: CALL_OW 69
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13169
// ComExit ( i ) ;
13158: LD_VAR 0 1
13162: PPUSH
13163: CALL 55651 0 1
13167: GO 13155
13169: POP
13170: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
13171: LD_ADDR_VAR 0 3
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_INT 1
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 25
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
13205: LD_ADDR_VAR 0 2
13209: PUSH
13210: LD_INT 22
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 3
13222: PUSH
13223: LD_INT 50
13225: PUSH
13226: EMPTY
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PPUSH
13237: CALL_OW 69
13241: ST_TO_ADDR
// if sci and hurts then
13242: LD_VAR 0 3
13246: IFFALSE 13254
13248: PUSH
13249: LD_VAR 0 2
13253: AND
13254: IFFALSE 13316
// begin for i := 1 to hurts do
13256: LD_ADDR_VAR 0 1
13260: PUSH
13261: DOUBLE
13262: LD_INT 1
13264: DEC
13265: ST_TO_ADDR
13266: LD_VAR 0 2
13270: PUSH
13271: FOR_TO
13272: IFFALSE 13314
// if i <= sci then
13274: LD_VAR 0 1
13278: PUSH
13279: LD_VAR 0 3
13283: LESSEQUAL
13284: IFFALSE 13312
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
13286: LD_VAR 0 3
13290: PUSH
13291: LD_VAR 0 1
13295: ARRAY
13296: PPUSH
13297: LD_VAR 0 2
13301: PUSH
13302: LD_VAR 0 1
13306: ARRAY
13307: PPUSH
13308: CALL_OW 188
13312: GO 13271
13314: POP
13315: POP
// end ; if IsOk ( Givi ) then
13316: LD_EXP 16
13320: PPUSH
13321: CALL_OW 302
13325: IFFALSE 13341
// Say ( Givi , DG-Surrender-5 ) else
13327: LD_EXP 16
13331: PPUSH
13332: LD_STRING DG-Surrender-5
13334: PPUSH
13335: CALL_OW 88
13339: GO 13353
// Say ( Heike , DH-Surrender-a-5 ) ;
13341: LD_EXP 15
13345: PPUSH
13346: LD_STRING DH-Surrender-a-5
13348: PPUSH
13349: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
13353: LD_EXP 30
13357: PPUSH
13358: LD_STRING DCa-Surrender-6
13360: PPUSH
13361: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
13365: LD_EXP 30
13369: PPUSH
13370: LD_STRING DCa-Surrender-7
13372: PPUSH
13373: CALL_OW 88
// if IsOk ( Givi ) then
13377: LD_EXP 16
13381: PPUSH
13382: CALL_OW 302
13386: IFFALSE 13402
// Say ( Givi , DG-Surrender-8 ) else
13388: LD_EXP 16
13392: PPUSH
13393: LD_STRING DG-Surrender-8
13395: PPUSH
13396: CALL_OW 88
13400: GO 13414
// Say ( Heike , DH-Surrender-a-8 ) ;
13402: LD_EXP 15
13406: PPUSH
13407: LD_STRING DH-Surrender-a-8
13409: PPUSH
13410: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13414: LD_EXP 30
13418: PPUSH
13419: LD_STRING DCa-Surrender-9
13421: PPUSH
13422: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13426: LD_EXP 15
13430: PPUSH
13431: LD_STRING DH-Surrender-10
13433: PPUSH
13434: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13438: LD_EXP 30
13442: PPUSH
13443: LD_STRING DCa-Surrender-11
13445: PPUSH
13446: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13450: LD_EXP 15
13454: PPUSH
13455: LD_STRING DH-Surrender-12
13457: PPUSH
13458: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13462: LD_EXP 30
13466: PPUSH
13467: LD_STRING DCa-Surrender-13
13469: PPUSH
13470: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13474: LD_EXP 30
13478: PPUSH
13479: LD_STRING DCa-Surrender-14
13481: PPUSH
13482: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13486: LD_EXP 30
13490: PPUSH
13491: LD_STRING DCa-Surrender-15
13493: PPUSH
13494: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13498: LD_EXP 30
13502: PPUSH
13503: LD_STRING DCa-Surrender-16
13505: PPUSH
13506: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13510: LD_EXP 20
13514: PPUSH
13515: LD_STRING DK-Surrender-17
13517: PPUSH
13518: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13522: LD_EXP 24
13526: PPUSH
13527: LD_STRING DO-Surrender-18
13529: PPUSH
13530: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13534: LD_EXP 24
13538: PPUSH
13539: LD_STRING DO-Surrender-19
13541: PPUSH
13542: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13546: LD_EXP 25
13550: PPUSH
13551: LD_STRING DKs-Surrender-20
13553: PPUSH
13554: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13558: LD_EXP 25
13562: PPUSH
13563: LD_STRING DKs-Surrender-21
13565: PPUSH
13566: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13570: LD_EXP 22
13574: PPUSH
13575: LD_STRING DMar-Surrender-22
13577: PPUSH
13578: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13582: LD_EXP 22
13586: PPUSH
13587: LD_STRING DMar-Surrender-23
13589: PPUSH
13590: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13594: LD_EXP 21
13598: PPUSH
13599: LD_STRING DS-Surrender-24
13601: PPUSH
13602: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13606: LD_EXP 26
13610: PPUSH
13611: LD_STRING DA-Surrender-25
13613: PPUSH
13614: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13618: LD_EXP 18
13622: PPUSH
13623: LD_STRING DI-Surrender-26
13625: PPUSH
13626: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13630: LD_EXP 19
13634: PPUSH
13635: LD_STRING DKam-Surrender-27
13637: PPUSH
13638: CALL_OW 88
// if IsOk ( Givi ) then
13642: LD_EXP 16
13646: PPUSH
13647: CALL_OW 302
13651: IFFALSE 13691
// begin Say ( Givi , DG-Surrender-28 ) ;
13653: LD_EXP 16
13657: PPUSH
13658: LD_STRING DG-Surrender-28
13660: PPUSH
13661: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13665: LD_EXP 16
13669: PPUSH
13670: LD_STRING DG-Surrender-29
13672: PPUSH
13673: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13677: LD_EXP 16
13681: PPUSH
13682: LD_STRING DG-Surrender-30
13684: PPUSH
13685: CALL_OW 88
// end else
13689: GO 13727
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13691: LD_EXP 15
13695: PPUSH
13696: LD_STRING DH-Surrender-a-28
13698: PPUSH
13699: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13703: LD_EXP 15
13707: PPUSH
13708: LD_STRING DH-Surrender-a-29
13710: PPUSH
13711: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13715: LD_EXP 15
13719: PPUSH
13720: LD_STRING DH-Surrender-a-30
13722: PPUSH
13723: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13727: CALL 15877 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13731: LD_INT 22
13733: PUSH
13734: LD_INT 3
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PPUSH
13746: LD_INT 176
13748: PUSH
13749: LD_INT 123
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: PPUSH
13759: CALL 58019 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13763: LD_INT 190
13765: PPUSH
13766: LD_INT 150
13768: PPUSH
13769: LD_INT 2
13771: PPUSH
13772: LD_INT 8
13774: NEG
13775: PPUSH
13776: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13780: LD_INT 193
13782: PPUSH
13783: LD_INT 150
13785: PPUSH
13786: CALL_OW 84
// if IsOk ( Markov ) then
13790: LD_EXP 22
13794: PPUSH
13795: CALL_OW 302
13799: IFFALSE 13815
// Say ( Markov , DMar-Surrender-31 ) else
13801: LD_EXP 22
13805: PPUSH
13806: LD_STRING DMar-Surrender-31
13808: PPUSH
13809: CALL_OW 88
13813: GO 13872
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13815: LD_EXP 27
13819: PPUSH
13820: LD_INT 26
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PPUSH
13830: CALL_OW 72
13834: PPUSH
13835: LD_STRING DArm-Surrender-a-31
13837: PPUSH
13838: CALL 224 0 2
13842: NOT
13843: IFFALSE 13872
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13845: LD_EXP 27
13849: PPUSH
13850: LD_INT 26
13852: PUSH
13853: LD_INT 2
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PPUSH
13860: CALL_OW 72
13864: PPUSH
13865: LD_STRING DArf-Surrender-a-31
13867: PPUSH
13868: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13872: LD_EXP 15
13876: PPUSH
13877: LD_STRING DH-Surrender-32
13879: PPUSH
13880: CALL_OW 88
// InGameOff ;
13884: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13888: LD_STRING M2
13890: PPUSH
13891: CALL_OW 337
// wait ( 0 0$20 ) ;
13895: LD_INT 700
13897: PPUSH
13898: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13902: CALL 16239 0 0
// russianAttack := true ;
13906: LD_ADDR_EXP 8
13910: PUSH
13911: LD_INT 1
13913: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13914: LD_INT 190
13916: PPUSH
13917: LD_INT 150
13919: PPUSH
13920: LD_INT 2
13922: PPUSH
13923: CALL_OW 331
// end ;
13927: PPOPN 3
13929: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13930: LD_EXP 11
13934: IFFALSE 13946
13936: PUSH
13937: LD_INT 2
13939: PPUSH
13940: CALL_OW 463
13944: NOT
13945: AND
13946: IFFALSE 13959
13948: PUSH
13949: LD_EXP 15
13953: PPUSH
13954: CALL_OW 302
13958: AND
13959: IFFALSE 13991
13961: PUSH
13962: LD_INT 22
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 30
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: AND
13991: IFFALSE 14023
13993: PUSH
13994: LD_EXP 22
13998: PPUSH
13999: CALL_OW 302
14003: IFTRUE 14022
14005: PUSH
14006: LD_EXP 27
14010: PPUSH
14011: LD_INT 50
14013: PUSH
14014: EMPTY
14015: LIST
14016: PPUSH
14017: CALL_OW 72
14021: OR
14022: AND
14023: IFFALSE 14251
14025: GO 14027
14027: DISABLE
// begin DialogueOn ;
14028: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
14032: LD_EXP 15
14036: PPUSH
14037: LD_STRING DH-Heavy-1
14039: PPUSH
14040: CALL_OW 88
// if IsOk ( Markov ) then
14044: LD_EXP 22
14048: PPUSH
14049: CALL_OW 302
14053: IFFALSE 14178
// begin Say ( Markov , DMar-Heavy-2 ) ;
14055: LD_EXP 22
14059: PPUSH
14060: LD_STRING DMar-Heavy-2
14062: PPUSH
14063: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
14067: LD_INT 22
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: LD_INT 3
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: PUSH
14096: LD_INT 1
14098: ARRAY
14099: PPUSH
14100: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
14104: LD_EXP 22
14108: PPUSH
14109: LD_STRING DMar-Heavy-3
14111: PPUSH
14112: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
14116: LD_EXP 22
14120: PPUSH
14121: LD_STRING DMar-Heavy-4
14123: PPUSH
14124: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
14128: LD_EXP 22
14132: PPUSH
14133: LD_STRING DMar-Heavy-5
14135: PPUSH
14136: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
14140: LD_EXP 22
14144: PPUSH
14145: LD_STRING DMar-Heavy-6
14147: PPUSH
14148: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
14152: LD_EXP 15
14156: PPUSH
14157: LD_STRING DH-Heavy-7
14159: PPUSH
14160: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
14164: LD_EXP 15
14168: PPUSH
14169: LD_STRING DH-Heavy-8
14171: PPUSH
14172: CALL_OW 88
// end else
14176: GO 14235
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
14178: LD_EXP 27
14182: PPUSH
14183: LD_INT 26
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 72
14197: PPUSH
14198: LD_STRING DArm-Heavy-a-2
14200: PPUSH
14201: CALL 224 0 2
14205: NOT
14206: IFFALSE 14235
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
14208: LD_EXP 27
14212: PPUSH
14213: LD_INT 26
14215: PUSH
14216: LD_INT 2
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 72
14227: PPUSH
14228: LD_STRING DArf-Heavy-a-2
14230: PPUSH
14231: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
14235: LD_EXP 15
14239: PPUSH
14240: LD_STRING DH-Heavy-9
14242: PPUSH
14243: CALL_OW 88
// DialogueOff ;
14247: CALL_OW 7
// end ;
14251: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
14252: LD_EXP 34
14256: PPUSH
14257: LD_INT 101
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 72
14271: IFFALSE 14284
14273: PUSH
14274: LD_EXP 15
14278: PPUSH
14279: CALL_OW 302
14283: AND
14284: IFFALSE 14293
14286: PUSH
14287: LD_EXP 7
14291: NOT
14292: AND
14293: IFFALSE 14436
14295: GO 14297
14297: DISABLE
// begin DialogueOn ;
14298: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
14302: LD_EXP 34
14306: PPUSH
14307: LD_INT 101
14309: PUSH
14310: LD_INT 2
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 72
14321: PPUSH
14322: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
14326: LD_EXP 15
14330: PPUSH
14331: LD_STRING DH-Flank-1
14333: PPUSH
14334: CALL_OW 88
// if IsOk ( Mike ) then
14338: LD_EXP 17
14342: PPUSH
14343: CALL_OW 302
14347: IFFALSE 14363
// Say ( Mike , DM-Flank-2 ) else
14349: LD_EXP 17
14353: PPUSH
14354: LD_STRING DM-Flank-2
14356: PPUSH
14357: CALL_OW 88
14361: GO 14420
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
14363: LD_EXP 27
14367: PPUSH
14368: LD_INT 26
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 72
14382: PPUSH
14383: LD_STRING DArm-Flank-a-2
14385: PPUSH
14386: CALL 224 0 2
14390: NOT
14391: IFFALSE 14420
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
14393: LD_EXP 27
14397: PPUSH
14398: LD_INT 26
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PPUSH
14408: CALL_OW 72
14412: PPUSH
14413: LD_STRING DArm-Flank-a-2
14415: PPUSH
14416: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14420: LD_EXP 15
14424: PPUSH
14425: LD_STRING DH-Flank-3
14427: PPUSH
14428: CALL_OW 88
// DialogueOff ;
14432: CALL_OW 7
// end ;
14436: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14437: LD_EXP 10
14441: IFFALSE 14450
14443: PUSH
14444: LD_EXP 7
14448: NOT
14449: AND
14450: IFFALSE 14674
14452: GO 14454
14454: DISABLE
// begin DialogueOn ;
14455: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14459: LD_EXP 15
14463: PPUSH
14464: LD_STRING DH-USRC-1
14466: PPUSH
14467: CALL_OW 88
// if IsOk ( Markov ) then
14471: LD_EXP 22
14475: PPUSH
14476: CALL_OW 302
14480: IFFALSE 14496
// Say ( Markov , DMar-USRC-2 ) else
14482: LD_EXP 22
14486: PPUSH
14487: LD_STRING DMar-USRC-2
14489: PPUSH
14490: CALL_OW 88
14494: GO 14553
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14496: LD_EXP 27
14500: PPUSH
14501: LD_INT 26
14503: PUSH
14504: LD_INT 1
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 72
14515: PPUSH
14516: LD_STRING DArm-USRC-a-2
14518: PPUSH
14519: CALL 224 0 2
14523: NOT
14524: IFFALSE 14553
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14526: LD_EXP 27
14530: PPUSH
14531: LD_INT 26
14533: PUSH
14534: LD_INT 2
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 72
14545: PPUSH
14546: LD_STRING DArf-USRC-a-2
14548: PPUSH
14549: CALL 224 0 2
// DialogueOff ;
14553: CALL_OW 7
// wait ( 0 0$10 ) ;
14557: LD_INT 350
14559: PPUSH
14560: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14564: LD_EXP 15
14568: PPUSH
14569: LD_STRING DH-USRC-3
14571: PPUSH
14572: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14576: LD_INT 35
14578: PPUSH
14579: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14583: LD_INT 2
14585: PPUSH
14586: LD_INT 22
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 30
14598: PUSH
14599: LD_INT 36
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PPUSH
14610: CALL_OW 69
14614: PUSH
14615: LD_INT 1
14617: ARRAY
14618: PPUSH
14619: CALL_OW 292
14623: IFFALSE 14576
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14625: LD_INT 22
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 30
14637: PUSH
14638: LD_INT 36
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PPUSH
14649: CALL_OW 69
14653: PUSH
14654: LD_INT 1
14656: ARRAY
14657: PPUSH
14658: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14662: LD_EXP 15
14666: PPUSH
14667: LD_STRING DH-USRCFound-1
14669: PPUSH
14670: CALL_OW 88
// end ;
14674: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14675: LD_EXP 20
14679: PPUSH
14680: CALL_OW 256
14684: PUSH
14685: LD_INT 3
14687: LESS
14688: IFFALSE 14725
14690: GO 14692
14692: DISABLE
// begin DialogueOn ;
14693: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14697: LD_EXP 20
14701: PPUSH
14702: LD_STRING DK-Dead-1
14704: PPUSH
14705: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14709: LD_EXP 20
14713: PPUSH
14714: LD_STRING DK-Dead-2
14716: PPUSH
14717: CALL_OW 91
// DialogueOff ;
14721: CALL_OW 7
// end ;
14725: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14726: LD_INT 22
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: LD_INT 35
14741: PUSH
14742: LD_INT 28
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 34
14751: PUSH
14752: LD_INT 28
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 69
14772: IFFALSE 14785
14774: GO 14776
14776: DISABLE
// hasRockets := true ;
14777: LD_ADDR_EXP 9
14781: PUSH
14782: LD_INT 1
14784: ST_TO_ADDR
14785: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do var m1 , m2 , m3 ;
14786: LD_EXP 8
14790: IFFALSE 14809
14792: PUSH
14793: LD_INT 22
14795: PUSH
14796: LD_INT 3
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PPUSH
14803: CALL_OW 69
14807: NOT
14808: AND
14809: IFFALSE 15568
14811: GO 14813
14813: DISABLE
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
14818: PPUSH
// begin m1 := false ;
14819: LD_ADDR_VAR 0 1
14823: PUSH
14824: LD_INT 0
14826: ST_TO_ADDR
// m2 := false ;
14827: LD_ADDR_VAR 0 2
14831: PUSH
14832: LD_INT 0
14834: ST_TO_ADDR
// m3 := false ;
14835: LD_ADDR_VAR 0 3
14839: PUSH
14840: LD_INT 0
14842: ST_TO_ADDR
// DialogueOn ;
14843: CALL_OW 6
// if vehLossCounter = 0 then
14847: LD_EXP 14
14851: PUSH
14852: LD_INT 0
14854: EQUAL
14855: IFFALSE 14864
// SetAchievement ( ACH_UNTOUCH ) ;
14857: LD_STRING ACH_UNTOUCH
14859: PPUSH
14860: CALL_OW 543
// if tick < 35 35$00 then
14864: LD_OWVAR 1
14868: PUSH
14869: LD_INT 73500
14871: LESS
14872: IFFALSE 14881
// SetAchievement ( ACH_HSPEED_7 ) ;
14874: LD_STRING ACH_HSPEED_7
14876: PPUSH
14877: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14881: LD_EXP 15
14885: PPUSH
14886: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14890: LD_EXP 15
14894: PPUSH
14895: LD_STRING DH-End-1
14897: PPUSH
14898: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14902: LD_EXP 23
14906: PPUSH
14907: LD_STRING DShar-End-2
14909: PPUSH
14910: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14914: LD_EXP 20
14918: PPUSH
14919: LD_STRING DK-End-3
14921: PPUSH
14922: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14926: LD_EXP 15
14930: PPUSH
14931: LD_STRING DH-End-4
14933: PPUSH
14934: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14938: LD_EXP 23
14942: PPUSH
14943: LD_STRING DShar-End-5
14945: PPUSH
14946: CALL_OW 94
// if IsOk ( Markov ) then
14950: LD_EXP 22
14954: PPUSH
14955: CALL_OW 302
14959: IFFALSE 14973
// Say ( Kaia , DK-End-6 ) ;
14961: LD_EXP 20
14965: PPUSH
14966: LD_STRING DK-End-6
14968: PPUSH
14969: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14973: LD_EXP 20
14977: PPUSH
14978: LD_STRING DK-End-7
14980: PPUSH
14981: CALL_OW 88
// if IsOk ( Kaia ) then
14985: LD_EXP 20
14989: PPUSH
14990: CALL_OW 302
14994: IFFALSE 15032
// begin Say ( Givi , DG-End-8 ) ;
14996: LD_EXP 16
15000: PPUSH
15001: LD_STRING DG-End-8
15003: PPUSH
15004: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
15008: LD_EXP 16
15012: PPUSH
15013: LD_STRING DG-End-9
15015: PPUSH
15016: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
15020: LD_EXP 15
15024: PPUSH
15025: LD_STRING DH-End-10
15027: PPUSH
15028: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
15032: LD_EXP 15
15036: PPUSH
15037: LD_STRING DH-End-11
15039: PPUSH
15040: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
15044: LD_INT 7
15046: PPUSH
15047: LD_INT 2
15049: PPUSH
15050: CALL_OW 321
15054: PUSH
15055: LD_INT 2
15057: EQUAL
15058: IFFALSE 15080
// begin m1 := true ;
15060: LD_ADDR_VAR 0 1
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
15068: LD_STRING med1
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: CALL_OW 101
// end else
15078: GO 15091
// AddMedal ( med1 , - 1 ) ;
15080: LD_STRING med1
15082: PPUSH
15083: LD_INT 1
15085: NEG
15086: PPUSH
15087: CALL_OW 101
// if hasRockets then
15091: LD_EXP 9
15095: IFFALSE 15117
// begin m2 := true ;
15097: LD_ADDR_VAR 0 2
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
15105: LD_STRING med2
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 101
// end else
15115: GO 15128
// AddMedal ( med2 , - 1 ) ;
15117: LD_STRING med2
15119: PPUSH
15120: LD_INT 1
15122: NEG
15123: PPUSH
15124: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
15128: LD_OWVAR 1
15132: PUSH
15133: LD_INT 105000
15135: PUSH
15136: LD_INT 94500
15138: PUSH
15139: LD_INT 84000
15141: PUSH
15142: LD_INT 73500
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: LD_OWVAR 67
15155: ARRAY
15156: LESS
15157: IFFALSE 15179
// begin m3 := true ;
15159: LD_ADDR_VAR 0 3
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
15167: LD_STRING med3
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 101
// end else
15177: GO 15190
// AddMedal ( med3 , - 1 ) ;
15179: LD_STRING med3
15181: PPUSH
15182: LD_INT 1
15184: NEG
15185: PPUSH
15186: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
15190: LD_VAR 0 1
15194: IFFALSE 15202
15196: PUSH
15197: LD_VAR 0 2
15201: AND
15202: IFFALSE 15210
15204: PUSH
15205: LD_VAR 0 3
15209: AND
15210: IFFALSE 15222
15212: PUSH
15213: LD_OWVAR 67
15217: PUSH
15218: LD_INT 3
15220: GREATEREQUAL
15221: AND
15222: IFFALSE 15234
// SetAchievementEX ( ACH_ARES , 7 ) ;
15224: LD_STRING ACH_ARES
15226: PPUSH
15227: LD_INT 7
15229: PPUSH
15230: CALL_OW 564
// GiveMedals ( MAIN ) ;
15234: LD_STRING MAIN
15236: PPUSH
15237: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
15241: LD_INT 22
15243: PUSH
15244: LD_INT 2
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 23
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 21
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 69
15280: PPUSH
15281: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
15285: LD_EXP 30
15289: PPUSH
15290: LD_STRING 07_UsCommander
15292: PPUSH
15293: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
15297: LD_INT 22
15299: PUSH
15300: LD_INT 1
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 23
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 21
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: PPUSH
15332: CALL_OW 69
15336: PUSH
15337: LD_EXP 30
15341: DIFF
15342: PPUSH
15343: LD_STRING 07_Americans
15345: PPUSH
15346: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
15350: LD_EXP 15
15354: PPUSH
15355: LD_STRING 07_Heike
15357: PPUSH
15358: CALL_OW 38
// if Aviradze then
15362: LD_EXP 26
15366: IFFALSE 15380
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
15368: LD_EXP 26
15372: PPUSH
15373: LD_STRING 07_Aviradze
15375: PPUSH
15376: CALL_OW 38
// if Ibrahim then
15380: LD_EXP 18
15384: IFFALSE 15398
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
15386: LD_EXP 18
15390: PPUSH
15391: LD_STRING 07_Ibrahim
15393: PPUSH
15394: CALL_OW 38
// if Kamil then
15398: LD_EXP 19
15402: IFFALSE 15416
// SaveCharacters ( Kamil , 07_Kamil ) ;
15404: LD_EXP 19
15408: PPUSH
15409: LD_STRING 07_Kamil
15411: PPUSH
15412: CALL_OW 38
// if Sophia then
15416: LD_EXP 21
15420: IFFALSE 15434
// SaveCharacters ( Sophia , 07_Sophia ) ;
15422: LD_EXP 21
15426: PPUSH
15427: LD_STRING 07_Sophia
15429: PPUSH
15430: CALL_OW 38
// if Kaia then
15434: LD_EXP 20
15438: IFFALSE 15452
// SaveCharacters ( Kaia , 07_Kaia ) ;
15440: LD_EXP 20
15444: PPUSH
15445: LD_STRING 07_Kaia
15447: PPUSH
15448: CALL_OW 38
// if Givi then
15452: LD_EXP 16
15456: IFFALSE 15470
// SaveCharacters ( Givi , 07_Givi ) ;
15458: LD_EXP 16
15462: PPUSH
15463: LD_STRING 07_Givi
15465: PPUSH
15466: CALL_OW 38
// if Mike then
15470: LD_EXP 17
15474: IFFALSE 15488
// SaveCharacters ( Mike , 07_Mike ) ;
15476: LD_EXP 17
15480: PPUSH
15481: LD_STRING 07_Mike
15483: PPUSH
15484: CALL_OW 38
// if Markov then
15488: LD_EXP 22
15492: IFFALSE 15506
// SaveCharacters ( Markov , 07_Markov ) ;
15494: LD_EXP 22
15498: PPUSH
15499: LD_STRING 07_Markov
15501: PPUSH
15502: CALL_OW 38
// if Kurt then
15506: LD_EXP 25
15510: IFFALSE 15524
// SaveCharacters ( Kurt , 07_Kurt ) ;
15512: LD_EXP 25
15516: PPUSH
15517: LD_STRING 07_Kurt
15519: PPUSH
15520: CALL_OW 38
// if Olaf then
15524: LD_EXP 24
15528: IFFALSE 15542
// SaveCharacters ( Olaf , 07_Olaf ) ;
15530: LD_EXP 24
15534: PPUSH
15535: LD_STRING 07_Olaf
15537: PPUSH
15538: CALL_OW 38
// if heikeSecondSquad then
15542: LD_EXP 27
15546: IFFALSE 15560
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15548: LD_EXP 27
15552: PPUSH
15553: LD_STRING 07_others
15555: PPUSH
15556: CALL_OW 38
// YouWin ;
15560: CALL_OW 103
// DialogueOff ;
15564: CALL_OW 7
// end ; end_of_file
15568: PPOPN 3
15570: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15571: LD_INT 7
15573: PPUSH
15574: LD_INT 1
15576: PPUSH
15577: CALL_OW 287
15581: PUSH
15582: LD_INT 12
15584: PUSH
15585: LD_INT 10
15587: PUSH
15588: LD_INT 8
15590: PUSH
15591: LD_INT 8
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: PUSH
15600: LD_OWVAR 67
15604: ARRAY
15605: LESS
15606: IFFALSE 15633
15608: GO 15610
15610: DISABLE
// begin enable ;
15611: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15612: LD_INT 1
15614: PPUSH
15615: LD_INT 5
15617: PPUSH
15618: CALL_OW 12
15622: PPUSH
15623: LD_INT 7
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 55
// end ;
15633: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15634: LD_INT 8
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: CALL_OW 287
15644: PUSH
15645: LD_INT 25
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_INT 17
15653: PUSH
15654: LD_INT 14
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: PUSH
15663: LD_OWVAR 67
15667: ARRAY
15668: LESS
15669: IFFALSE 15681
15671: PUSH
15672: LD_OWVAR 1
15676: PUSH
15677: LD_INT 50400
15679: LESS
15680: AND
15681: IFFALSE 15708
15683: GO 15685
15685: DISABLE
// begin enable ;
15686: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15687: LD_INT 1
15689: PPUSH
15690: LD_INT 5
15692: PPUSH
15693: CALL_OW 12
15697: PPUSH
15698: LD_INT 8
15700: PPUSH
15701: LD_INT 1
15703: PPUSH
15704: CALL_OW 55
// end ;
15708: END
// every 0 0$40 trigger tick < 8 8$10 do
15709: LD_OWVAR 1
15713: PUSH
15714: LD_INT 17150
15716: LESS
15717: IFFALSE 15750
15719: GO 15721
15721: DISABLE
// begin enable ;
15722: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15723: LD_INT 1
15725: PPUSH
15726: LD_INT 5
15728: PPUSH
15729: CALL_OW 12
15733: PPUSH
15734: LD_INT 130
15736: PPUSH
15737: LD_INT 18
15739: PPUSH
15740: LD_INT 12
15742: PPUSH
15743: LD_INT 1
15745: PPUSH
15746: CALL_OW 56
// end ;
15750: END
// every 6 6$20 trigger GetResourceArea ( rareSouthCratesArea , mat_cans ) < 6 do
15751: LD_INT 21
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: CALL_OW 287
15761: PUSH
15762: LD_INT 6
15764: LESS
15765: IFFALSE 15792
15767: GO 15769
15769: DISABLE
// begin enable ;
15770: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , rareSouthCratesArea , true ) ;
15771: LD_INT 1
15773: PPUSH
15774: LD_INT 5
15776: PPUSH
15777: CALL_OW 12
15781: PPUSH
15782: LD_INT 21
15784: PPUSH
15785: LD_INT 1
15787: PPUSH
15788: CALL_OW 55
// end ;
15792: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15793: LD_OWVAR 1
15797: PUSH
15798: LD_INT 12950
15800: LESS
15801: IFFALSE 15834
15803: GO 15805
15805: DISABLE
// begin enable ;
15806: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15807: LD_INT 1
15809: PPUSH
15810: LD_INT 5
15812: PPUSH
15813: CALL_OW 12
15817: PPUSH
15818: LD_INT 172
15820: PPUSH
15821: LD_INT 97
15823: PPUSH
15824: LD_INT 12
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 56
// end ;
15834: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15835: LD_INT 20
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 287
15845: PUSH
15846: LD_INT 6
15848: LESS
15849: IFFALSE 15876
15851: GO 15853
15853: DISABLE
// begin enable ;
15854: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15855: LD_INT 1
15857: PPUSH
15858: LD_INT 5
15860: PPUSH
15861: CALL_OW 12
15865: PPUSH
15866: LD_INT 20
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 55
// end ; end_of_file
15876: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15877: LD_INT 0
15879: PPUSH
15880: PPUSH
15881: PPUSH
15882: PPUSH
15883: PPUSH
// uc_side := 3 ;
15884: LD_ADDR_OWVAR 20
15888: PUSH
15889: LD_INT 3
15891: ST_TO_ADDR
// uc_nation := 3 ;
15892: LD_ADDR_OWVAR 21
15896: PUSH
15897: LD_INT 3
15899: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15900: LD_ADDR_VAR 0 3
15904: PUSH
15905: LD_INT 184
15907: PUSH
15908: LD_INT 144
15910: PUSH
15911: LD_INT 5
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 191
15921: PUSH
15922: LD_INT 147
15924: PUSH
15925: LD_INT 5
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 202
15935: PUSH
15936: LD_INT 151
15938: PUSH
15939: LD_INT 4
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 210
15949: PUSH
15950: LD_INT 152
15952: PUSH
15953: LD_INT 4
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: ST_TO_ADDR
// for i := 1 to 3 do
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: DOUBLE
15973: LD_INT 1
15975: DEC
15976: ST_TO_ADDR
15977: LD_INT 3
15979: PUSH
15980: FOR_TO
15981: IFFALSE 16150
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15983: LD_INT 24
15985: PPUSH
15986: LD_INT 1
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: LD_INT 43
15994: PUSH
15995: LD_INT 44
15997: PUSH
15998: LD_INT 46
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: LD_VAR 0 2
16010: PUSH
16011: LD_INT 3
16013: MOD
16014: PUSH
16015: LD_INT 1
16017: PLUS
16018: ARRAY
16019: PPUSH
16020: LD_INT 40
16022: PPUSH
16023: CALL 22073 0 5
// veh := CreateVehicle ;
16027: LD_ADDR_VAR 0 5
16031: PUSH
16032: CALL_OW 45
16036: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_VAR 0 3
16046: PUSH
16047: LD_VAR 0 2
16051: ARRAY
16052: PUSH
16053: LD_INT 3
16055: ARRAY
16056: PPUSH
16057: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
16061: LD_VAR 0 5
16065: PPUSH
16066: LD_VAR 0 3
16070: PUSH
16071: LD_VAR 0 2
16075: ARRAY
16076: PUSH
16077: LD_INT 1
16079: ARRAY
16080: PPUSH
16081: LD_VAR 0 3
16085: PUSH
16086: LD_VAR 0 2
16090: ARRAY
16091: PUSH
16092: LD_INT 2
16094: ARRAY
16095: PPUSH
16096: LD_INT 0
16098: PPUSH
16099: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16103: LD_INT 0
16105: PPUSH
16106: LD_INT 6
16108: PUSH
16109: LD_INT 7
16111: PUSH
16112: LD_INT 8
16114: PUSH
16115: LD_INT 8
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: PUSH
16124: LD_OWVAR 67
16128: ARRAY
16129: PPUSH
16130: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16134: CALL_OW 44
16138: PPUSH
16139: LD_VAR 0 5
16143: PPUSH
16144: CALL_OW 52
// end ;
16148: GO 15980
16150: POP
16151: POP
// for i := 1 to 4 do
16152: LD_ADDR_VAR 0 2
16156: PUSH
16157: DOUBLE
16158: LD_INT 1
16160: DEC
16161: ST_TO_ADDR
16162: LD_INT 4
16164: PUSH
16165: FOR_TO
16166: IFFALSE 16232
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16168: LD_INT 0
16170: PPUSH
16171: LD_INT 6
16173: PUSH
16174: LD_INT 7
16176: PUSH
16177: LD_INT 8
16179: PUSH
16180: LD_INT 8
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PUSH
16189: LD_OWVAR 67
16193: ARRAY
16194: PPUSH
16195: CALL_OW 381
// un := CreateHuman ;
16199: LD_ADDR_VAR 0 4
16203: PUSH
16204: CALL_OW 44
16208: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
16209: LD_VAR 0 4
16213: PPUSH
16214: LD_INT 185
16216: PPUSH
16217: LD_INT 145
16219: PPUSH
16220: LD_INT 6
16222: PPUSH
16223: LD_INT 0
16225: PPUSH
16226: CALL_OW 50
// end ;
16230: GO 16165
16232: POP
16233: POP
// end ;
16234: LD_VAR 0 1
16238: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
16239: LD_INT 0
16241: PPUSH
16242: PPUSH
16243: PPUSH
// uc_side := 3 ;
16244: LD_ADDR_OWVAR 20
16248: PUSH
16249: LD_INT 3
16251: ST_TO_ADDR
// if Difficulty > 1 then
16252: LD_OWVAR 67
16256: PUSH
16257: LD_INT 1
16259: GREATER
16260: IFFALSE 16422
// begin uc_nation := 0 ;
16262: LD_ADDR_OWVAR 21
16266: PUSH
16267: LD_INT 0
16269: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
16270: LD_ADDR_VAR 0 2
16274: PUSH
16275: DOUBLE
16276: LD_INT 1
16278: DEC
16279: ST_TO_ADDR
16280: LD_INT 4
16282: PUSH
16283: LD_INT 5
16285: PUSH
16286: LD_INT 6
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PUSH
16294: LD_OWVAR 67
16298: PUSH
16299: LD_INT 1
16301: PLUS
16302: ARRAY
16303: PUSH
16304: FOR_TO
16305: IFFALSE 16420
// begin hc_class := class_apeman_soldier ;
16307: LD_ADDR_OWVAR 28
16311: PUSH
16312: LD_INT 15
16314: ST_TO_ADDR
// hc_gallery :=  ;
16315: LD_ADDR_OWVAR 33
16319: PUSH
16320: LD_STRING 
16322: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
16323: LD_ADDR_OWVAR 26
16327: PUSH
16328: LD_STRING Treci
16330: PUSH
16331: LD_STRING Ivan
16333: PUSH
16334: LD_STRING Yaromir
16336: PUSH
16337: LD_STRING Nadzieia
16339: PUSH
16340: LD_STRING Krasna
16342: PUSH
16343: LD_STRING Piaty
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 6
16359: PPUSH
16360: CALL_OW 12
16364: ARRAY
16365: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
16366: LD_ADDR_OWVAR 31
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: ST_TO_ADDR
// hc_sex := sex_male ;
16389: LD_ADDR_OWVAR 27
16393: PUSH
16394: LD_INT 1
16396: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
16397: CALL_OW 44
16401: PPUSH
16402: LD_INT 178
16404: PPUSH
16405: LD_INT 148
16407: PPUSH
16408: LD_INT 6
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 50
// end ;
16418: GO 16304
16420: POP
16421: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
16422: LD_ADDR_VAR 0 2
16426: PUSH
16427: DOUBLE
16428: LD_INT 1
16430: DEC
16431: ST_TO_ADDR
16432: LD_INT 2
16434: PUSH
16435: LD_INT 3
16437: PUSH
16438: LD_INT 4
16440: PUSH
16441: LD_INT 5
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: PUSH
16450: LD_OWVAR 67
16454: ARRAY
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16624
// begin uc_nation := 3 ;
16459: LD_ADDR_OWVAR 21
16463: PUSH
16464: LD_INT 3
16466: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
16467: LD_INT 22
16469: PPUSH
16470: LD_INT 1
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: LD_INT 45
16478: PUSH
16479: LD_INT 43
16481: PUSH
16482: LD_INT 44
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: PUSH
16490: LD_VAR 0 2
16494: PUSH
16495: LD_INT 3
16497: MOD
16498: PUSH
16499: LD_INT 1
16501: PLUS
16502: ARRAY
16503: PPUSH
16504: LD_INT 44
16506: PPUSH
16507: CALL 22073 0 5
// veh := CreateVehicle ;
16511: LD_ADDR_VAR 0 3
16515: PUSH
16516: CALL_OW 45
16520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16521: LD_VAR 0 3
16525: PPUSH
16526: LD_INT 4
16528: PPUSH
16529: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
16533: LD_VAR 0 3
16537: PPUSH
16538: LD_INT 1
16540: PPUSH
16541: LD_INT 0
16543: PPUSH
16544: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16548: LD_INT 0
16550: PPUSH
16551: LD_INT 6
16553: PUSH
16554: LD_INT 7
16556: PUSH
16557: LD_INT 8
16559: PUSH
16560: LD_INT 8
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: PUSH
16569: LD_OWVAR 67
16573: ARRAY
16574: PPUSH
16575: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16579: CALL_OW 44
16583: PPUSH
16584: LD_VAR 0 3
16588: PPUSH
16589: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16593: LD_VAR 0 3
16597: PPUSH
16598: LD_INT 178
16600: PUSH
16601: LD_INT 137
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: PPUSH
16611: CALL 58019 0 2
// wait ( 0 0$2 ) ;
16615: LD_INT 70
16617: PPUSH
16618: CALL_OW 67
// end ;
16622: GO 16456
16624: POP
16625: POP
// end ;
16626: LD_VAR 0 1
16630: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16631: LD_INT 22
16633: PUSH
16634: LD_INT 3
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 32
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: IFFALSE 16747
16661: GO 16663
16663: DISABLE
16664: LD_INT 0
16666: PPUSH
16667: PPUSH
// begin enable ;
16668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_INT 3
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 32
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 69
16702: ST_TO_ADDR
// for i in tmp do
16703: LD_ADDR_VAR 0 1
16707: PUSH
16708: LD_VAR 0 2
16712: PUSH
16713: FOR_IN
16714: IFFALSE 16745
// if GetFuel ( i ) < 3 then
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 261
16725: PUSH
16726: LD_INT 3
16728: LESS
16729: IFFALSE 16743
// SetFuel ( i , 3 ) ;
16731: LD_VAR 0 1
16735: PPUSH
16736: LD_INT 3
16738: PPUSH
16739: CALL_OW 240
16743: GO 16713
16745: POP
16746: POP
// end ;
16747: PPOPN 2
16749: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16750: LD_EXP 8
16754: IFFALSE 16786
16756: PUSH
16757: LD_INT 22
16759: PUSH
16760: LD_INT 3
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 21
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PPUSH
16781: CALL_OW 69
16785: AND
16786: IFFALSE 17050
16788: GO 16790
16790: DISABLE
16791: LD_INT 0
16793: PPUSH
16794: PPUSH
16795: PPUSH
// begin enable ;
16796: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_INT 3
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 25
16814: PUSH
16815: LD_INT 3
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 3
16824: PUSH
16825: LD_INT 55
16827: PUSH
16828: EMPTY
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: ST_TO_ADDR
// if mech then
16845: LD_VAR 0 2
16849: IFFALSE 16919
// for i in mech do
16851: LD_ADDR_VAR 0 1
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: FOR_IN
16862: IFFALSE 16917
// begin if IsInArea ( i , escapeArea ) then
16864: LD_VAR 0 1
16868: PPUSH
16869: LD_INT 13
16871: PPUSH
16872: CALL_OW 308
16876: IFFALSE 16889
// RemoveUnit ( i ) else
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 64
16887: GO 16915
// if IsOk ( i ) then
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 302
16898: IFFALSE 16915
// ComMoveXY ( i , 196 , 155 ) ;
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 196
16907: PPUSH
16908: LD_INT 155
16910: PPUSH
16911: CALL_OW 111
// end ;
16915: GO 16861
16917: POP
16918: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 3
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: LD_INT 25
16939: PUSH
16940: LD_INT 1
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 25
16949: PUSH
16950: LD_INT 15
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 21
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 50
16975: PUSH
16976: EMPTY
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: ST_TO_ADDR
// if tmp then
16989: LD_VAR 0 3
16993: IFFALSE 17050
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 171
17002: PUSH
17003: LD_INT 106
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 145
17012: PUSH
17013: LD_INT 69
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 132
17022: PUSH
17023: LD_INT 38
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 126
17032: PUSH
17033: LD_INT 15
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL 58019 0 2
// end ; end_of_file
17050: PPOPN 3
17052: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17053: LD_INT 0
17055: PPUSH
17056: PPUSH
// if exist_mode then
17057: LD_VAR 0 2
17061: IFFALSE 17107
// begin unit := CreateCharacter ( prefix & ident ) ;
17063: LD_ADDR_VAR 0 5
17067: PUSH
17068: LD_VAR 0 3
17072: PUSH
17073: LD_VAR 0 1
17077: STR
17078: PPUSH
17079: CALL_OW 34
17083: ST_TO_ADDR
// if unit then
17084: LD_VAR 0 5
17088: IFFALSE 17105
// DeleteCharacters ( prefix & ident ) ;
17090: LD_VAR 0 3
17094: PUSH
17095: LD_VAR 0 1
17099: STR
17100: PPUSH
17101: CALL_OW 40
// end else
17105: GO 17122
// unit := NewCharacter ( ident ) ;
17107: LD_ADDR_VAR 0 5
17111: PUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 25
17121: ST_TO_ADDR
// result := unit ;
17122: LD_ADDR_VAR 0 4
17126: PUSH
17127: LD_VAR 0 5
17131: ST_TO_ADDR
// end ;
17132: LD_VAR 0 4
17136: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
// if exist_mode then
17141: LD_VAR 0 2
17145: IFFALSE 17170
// unit := CreateCharacter ( prefix & ident ) else
17147: LD_ADDR_VAR 0 5
17151: PUSH
17152: LD_VAR 0 3
17156: PUSH
17157: LD_VAR 0 1
17161: STR
17162: PPUSH
17163: CALL_OW 34
17167: ST_TO_ADDR
17168: GO 17185
// unit := NewCharacter ( ident ) ;
17170: LD_ADDR_VAR 0 5
17174: PUSH
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 25
17184: ST_TO_ADDR
// result := unit ;
17185: LD_ADDR_VAR 0 4
17189: PUSH
17190: LD_VAR 0 5
17194: ST_TO_ADDR
// end ;
17195: LD_VAR 0 4
17199: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
// if not side or not nation then
17204: LD_VAR 0 1
17208: NOT
17209: IFTRUE 17218
17211: PUSH
17212: LD_VAR 0 2
17216: NOT
17217: OR
17218: IFFALSE 17222
// exit ;
17220: GO 18016
// case nation of nation_american :
17222: LD_VAR 0 2
17226: PUSH
17227: LD_INT 1
17229: DOUBLE
17230: EQUAL
17231: IFTRUE 17235
17233: GO 17457
17235: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17236: LD_ADDR_VAR 0 4
17240: PUSH
17241: LD_INT 35
17243: PUSH
17244: LD_INT 45
17246: PUSH
17247: LD_INT 46
17249: PUSH
17250: LD_INT 47
17252: PUSH
17253: LD_INT 82
17255: PUSH
17256: LD_INT 83
17258: PUSH
17259: LD_INT 84
17261: PUSH
17262: LD_INT 85
17264: PUSH
17265: LD_INT 86
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: LD_INT 6
17276: PUSH
17277: LD_INT 15
17279: PUSH
17280: LD_INT 16
17282: PUSH
17283: LD_INT 7
17285: PUSH
17286: LD_INT 12
17288: PUSH
17289: LD_INT 13
17291: PUSH
17292: LD_INT 10
17294: PUSH
17295: LD_INT 14
17297: PUSH
17298: LD_INT 20
17300: PUSH
17301: LD_INT 21
17303: PUSH
17304: LD_INT 22
17306: PUSH
17307: LD_INT 25
17309: PUSH
17310: LD_INT 32
17312: PUSH
17313: LD_INT 27
17315: PUSH
17316: LD_INT 36
17318: PUSH
17319: LD_INT 69
17321: PUSH
17322: LD_INT 39
17324: PUSH
17325: LD_INT 34
17327: PUSH
17328: LD_INT 40
17330: PUSH
17331: LD_INT 48
17333: PUSH
17334: LD_INT 49
17336: PUSH
17337: LD_INT 50
17339: PUSH
17340: LD_INT 51
17342: PUSH
17343: LD_INT 52
17345: PUSH
17346: LD_INT 53
17348: PUSH
17349: LD_INT 54
17351: PUSH
17352: LD_INT 55
17354: PUSH
17355: LD_INT 56
17357: PUSH
17358: LD_INT 57
17360: PUSH
17361: LD_INT 58
17363: PUSH
17364: LD_INT 59
17366: PUSH
17367: LD_INT 60
17369: PUSH
17370: LD_INT 61
17372: PUSH
17373: LD_INT 62
17375: PUSH
17376: LD_INT 80
17378: PUSH
17379: LD_INT 82
17381: PUSH
17382: LD_INT 83
17384: PUSH
17385: LD_INT 84
17387: PUSH
17388: LD_INT 85
17390: PUSH
17391: LD_INT 86
17393: PUSH
17394: LD_INT 90
17396: PUSH
17397: LD_INT 93
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: ST_TO_ADDR
17455: GO 17938
17457: LD_INT 2
17459: DOUBLE
17460: EQUAL
17461: IFTRUE 17465
17463: GO 17699
17465: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
17466: LD_ADDR_VAR 0 4
17470: PUSH
17471: LD_INT 35
17473: PUSH
17474: LD_INT 45
17476: PUSH
17477: LD_INT 46
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: LD_INT 82
17485: PUSH
17486: LD_INT 83
17488: PUSH
17489: LD_INT 84
17491: PUSH
17492: LD_INT 85
17494: PUSH
17495: LD_INT 87
17497: PUSH
17498: LD_INT 70
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: LD_INT 11
17506: PUSH
17507: LD_INT 3
17509: PUSH
17510: LD_INT 4
17512: PUSH
17513: LD_INT 5
17515: PUSH
17516: LD_INT 6
17518: PUSH
17519: LD_INT 15
17521: PUSH
17522: LD_INT 18
17524: PUSH
17525: LD_INT 7
17527: PUSH
17528: LD_INT 17
17530: PUSH
17531: LD_INT 8
17533: PUSH
17534: LD_INT 20
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 22
17542: PUSH
17543: LD_INT 72
17545: PUSH
17546: LD_INT 26
17548: PUSH
17549: LD_INT 69
17551: PUSH
17552: LD_INT 39
17554: PUSH
17555: LD_INT 40
17557: PUSH
17558: LD_INT 41
17560: PUSH
17561: LD_INT 42
17563: PUSH
17564: LD_INT 43
17566: PUSH
17567: LD_INT 48
17569: PUSH
17570: LD_INT 49
17572: PUSH
17573: LD_INT 50
17575: PUSH
17576: LD_INT 51
17578: PUSH
17579: LD_INT 52
17581: PUSH
17582: LD_INT 53
17584: PUSH
17585: LD_INT 54
17587: PUSH
17588: LD_INT 55
17590: PUSH
17591: LD_INT 56
17593: PUSH
17594: LD_INT 60
17596: PUSH
17597: LD_INT 61
17599: PUSH
17600: LD_INT 62
17602: PUSH
17603: LD_INT 66
17605: PUSH
17606: LD_INT 67
17608: PUSH
17609: LD_INT 68
17611: PUSH
17612: LD_INT 81
17614: PUSH
17615: LD_INT 82
17617: PUSH
17618: LD_INT 83
17620: PUSH
17621: LD_INT 84
17623: PUSH
17624: LD_INT 85
17626: PUSH
17627: LD_INT 87
17629: PUSH
17630: LD_INT 88
17632: PUSH
17633: LD_INT 92
17635: PUSH
17636: LD_INT 94
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: ST_TO_ADDR
17697: GO 17938
17699: LD_INT 3
17701: DOUBLE
17702: EQUAL
17703: IFTRUE 17707
17705: GO 17937
17707: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
17708: LD_ADDR_VAR 0 4
17712: PUSH
17713: LD_INT 46
17715: PUSH
17716: LD_INT 47
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 82
17727: PUSH
17728: LD_INT 83
17730: PUSH
17731: LD_INT 84
17733: PUSH
17734: LD_INT 85
17736: PUSH
17737: LD_INT 86
17739: PUSH
17740: LD_INT 11
17742: PUSH
17743: LD_INT 9
17745: PUSH
17746: LD_INT 20
17748: PUSH
17749: LD_INT 19
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 24
17757: PUSH
17758: LD_INT 22
17760: PUSH
17761: LD_INT 25
17763: PUSH
17764: LD_INT 28
17766: PUSH
17767: LD_INT 29
17769: PUSH
17770: LD_INT 30
17772: PUSH
17773: LD_INT 31
17775: PUSH
17776: LD_INT 37
17778: PUSH
17779: LD_INT 38
17781: PUSH
17782: LD_INT 32
17784: PUSH
17785: LD_INT 27
17787: PUSH
17788: LD_INT 33
17790: PUSH
17791: LD_INT 69
17793: PUSH
17794: LD_INT 39
17796: PUSH
17797: LD_INT 34
17799: PUSH
17800: LD_INT 40
17802: PUSH
17803: LD_INT 71
17805: PUSH
17806: LD_INT 23
17808: PUSH
17809: LD_INT 44
17811: PUSH
17812: LD_INT 48
17814: PUSH
17815: LD_INT 49
17817: PUSH
17818: LD_INT 50
17820: PUSH
17821: LD_INT 51
17823: PUSH
17824: LD_INT 52
17826: PUSH
17827: LD_INT 53
17829: PUSH
17830: LD_INT 54
17832: PUSH
17833: LD_INT 55
17835: PUSH
17836: LD_INT 56
17838: PUSH
17839: LD_INT 57
17841: PUSH
17842: LD_INT 58
17844: PUSH
17845: LD_INT 59
17847: PUSH
17848: LD_INT 63
17850: PUSH
17851: LD_INT 64
17853: PUSH
17854: LD_INT 65
17856: PUSH
17857: LD_INT 82
17859: PUSH
17860: LD_INT 83
17862: PUSH
17863: LD_INT 84
17865: PUSH
17866: LD_INT 85
17868: PUSH
17869: LD_INT 86
17871: PUSH
17872: LD_INT 89
17874: PUSH
17875: LD_INT 91
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: ST_TO_ADDR
17935: GO 17938
17937: POP
// if state > - 1 and state < 3 then
17938: LD_VAR 0 3
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: GREATER
17947: IFFALSE 17959
17949: PUSH
17950: LD_VAR 0 3
17954: PUSH
17955: LD_INT 3
17957: LESS
17958: AND
17959: IFFALSE 18016
// for i in result do
17961: LD_ADDR_VAR 0 5
17965: PUSH
17966: LD_VAR 0 4
17970: PUSH
17971: FOR_IN
17972: IFFALSE 18014
// if GetTech ( i , side ) <> state then
17974: LD_VAR 0 5
17978: PPUSH
17979: LD_VAR 0 1
17983: PPUSH
17984: CALL_OW 321
17988: PUSH
17989: LD_VAR 0 3
17993: NONEQUAL
17994: IFFALSE 18012
// result := result diff i ;
17996: LD_ADDR_VAR 0 4
18000: PUSH
18001: LD_VAR 0 4
18005: PUSH
18006: LD_VAR 0 5
18010: DIFF
18011: ST_TO_ADDR
18012: GO 17971
18014: POP
18015: POP
// end ;
18016: LD_VAR 0 4
18020: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
18025: PPUSH
// result := true ;
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: LD_INT 1
18033: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18034: LD_ADDR_VAR 0 5
18038: PUSH
18039: LD_VAR 0 2
18043: PPUSH
18044: CALL_OW 480
18048: ST_TO_ADDR
// if not tmp then
18049: LD_VAR 0 5
18053: NOT
18054: IFFALSE 18058
// exit ;
18056: GO 18107
// for i in tmp do
18058: LD_ADDR_VAR 0 4
18062: PUSH
18063: LD_VAR 0 5
18067: PUSH
18068: FOR_IN
18069: IFFALSE 18105
// if GetTech ( i , side ) <> state_researched then
18071: LD_VAR 0 4
18075: PPUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 321
18085: PUSH
18086: LD_INT 2
18088: NONEQUAL
18089: IFFALSE 18103
// begin result := false ;
18091: LD_ADDR_VAR 0 3
18095: PUSH
18096: LD_INT 0
18098: ST_TO_ADDR
// exit ;
18099: POP
18100: POP
18101: GO 18107
// end ;
18103: GO 18068
18105: POP
18106: POP
// end ;
18107: LD_VAR 0 3
18111: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18112: LD_INT 0
18114: PPUSH
18115: PPUSH
18116: PPUSH
18117: PPUSH
18118: PPUSH
18119: PPUSH
18120: PPUSH
18121: PPUSH
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
18126: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18127: LD_VAR 0 1
18131: NOT
18132: IFTRUE 18149
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 257
18144: PUSH
18145: LD_INT 9
18147: NONEQUAL
18148: OR
18149: IFFALSE 18153
// exit ;
18151: GO 18732
// side := GetSide ( unit ) ;
18153: LD_ADDR_VAR 0 9
18157: PUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 255
18167: ST_TO_ADDR
// tech_space := tech_spacanom ;
18168: LD_ADDR_VAR 0 12
18172: PUSH
18173: LD_INT 29
18175: ST_TO_ADDR
// tech_time := tech_taurad ;
18176: LD_ADDR_VAR 0 13
18180: PUSH
18181: LD_INT 28
18183: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18184: LD_ADDR_VAR 0 11
18188: PUSH
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 310
18198: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18199: LD_VAR 0 11
18203: PPUSH
18204: CALL_OW 247
18208: PUSH
18209: LD_INT 2
18211: EQUAL
18212: IFFALSE 18216
// exit ;
18214: GO 18732
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18216: LD_ADDR_VAR 0 8
18220: PUSH
18221: LD_INT 81
18223: PUSH
18224: LD_VAR 0 9
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 3
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 69
18258: ST_TO_ADDR
// if not tmp then
18259: LD_VAR 0 8
18263: NOT
18264: IFFALSE 18268
// exit ;
18266: GO 18732
// if in_unit then
18268: LD_VAR 0 11
18272: IFFALSE 18296
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18274: LD_ADDR_VAR 0 10
18278: PUSH
18279: LD_VAR 0 8
18283: PPUSH
18284: LD_VAR 0 11
18288: PPUSH
18289: CALL_OW 74
18293: ST_TO_ADDR
18294: GO 18316
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18296: LD_ADDR_VAR 0 10
18300: PUSH
18301: LD_VAR 0 8
18305: PPUSH
18306: LD_VAR 0 1
18310: PPUSH
18311: CALL_OW 74
18315: ST_TO_ADDR
// if not enemy then
18316: LD_VAR 0 10
18320: NOT
18321: IFFALSE 18325
// exit ;
18323: GO 18732
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18325: LD_VAR 0 11
18329: IFFALSE 18351
18331: PUSH
18332: LD_VAR 0 11
18336: PPUSH
18337: LD_VAR 0 10
18341: PPUSH
18342: CALL_OW 296
18346: PUSH
18347: LD_INT 13
18349: GREATER
18350: AND
18351: IFTRUE 18373
18353: PUSH
18354: LD_VAR 0 1
18358: PPUSH
18359: LD_VAR 0 10
18363: PPUSH
18364: CALL_OW 296
18368: PUSH
18369: LD_INT 12
18371: GREATER
18372: OR
18373: IFFALSE 18377
// exit ;
18375: GO 18732
// missile := [ 1 ] ;
18377: LD_ADDR_VAR 0 14
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18388: LD_VAR 0 9
18392: PPUSH
18393: LD_VAR 0 12
18397: PPUSH
18398: CALL_OW 325
18402: IFFALSE 18431
// missile := Replace ( missile , missile + 1 , 2 ) ;
18404: LD_ADDR_VAR 0 14
18408: PUSH
18409: LD_VAR 0 14
18413: PPUSH
18414: LD_VAR 0 14
18418: PUSH
18419: LD_INT 1
18421: PLUS
18422: PPUSH
18423: LD_INT 2
18425: PPUSH
18426: CALL_OW 1
18430: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18431: LD_VAR 0 9
18435: PPUSH
18436: LD_VAR 0 13
18440: PPUSH
18441: CALL_OW 325
18445: IFFALSE 18469
18447: PUSH
18448: LD_VAR 0 10
18452: PPUSH
18453: CALL_OW 255
18457: PPUSH
18458: LD_VAR 0 13
18462: PPUSH
18463: CALL_OW 325
18467: NOT
18468: AND
18469: IFFALSE 18498
// missile := Replace ( missile , missile + 1 , 3 ) ;
18471: LD_ADDR_VAR 0 14
18475: PUSH
18476: LD_VAR 0 14
18480: PPUSH
18481: LD_VAR 0 14
18485: PUSH
18486: LD_INT 1
18488: PLUS
18489: PPUSH
18490: LD_INT 3
18492: PPUSH
18493: CALL_OW 1
18497: ST_TO_ADDR
// if missile < 2 then
18498: LD_VAR 0 14
18502: PUSH
18503: LD_INT 2
18505: LESS
18506: IFFALSE 18510
// exit ;
18508: GO 18732
// x := GetX ( enemy ) ;
18510: LD_ADDR_VAR 0 4
18514: PUSH
18515: LD_VAR 0 10
18519: PPUSH
18520: CALL_OW 250
18524: ST_TO_ADDR
// y := GetY ( enemy ) ;
18525: LD_ADDR_VAR 0 5
18529: PUSH
18530: LD_VAR 0 10
18534: PPUSH
18535: CALL_OW 251
18539: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18540: LD_ADDR_VAR 0 6
18544: PUSH
18545: LD_VAR 0 4
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 12
18561: PLUS
18562: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18563: LD_ADDR_VAR 0 7
18567: PUSH
18568: LD_VAR 0 5
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PPUSH
18577: LD_INT 1
18579: PPUSH
18580: CALL_OW 12
18584: PLUS
18585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18586: LD_VAR 0 6
18590: PPUSH
18591: LD_VAR 0 7
18595: PPUSH
18596: CALL_OW 488
18600: NOT
18601: IFFALSE 18623
// begin _x := x ;
18603: LD_ADDR_VAR 0 6
18607: PUSH
18608: LD_VAR 0 4
18612: ST_TO_ADDR
// _y := y ;
18613: LD_ADDR_VAR 0 7
18617: PUSH
18618: LD_VAR 0 5
18622: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18623: LD_ADDR_VAR 0 3
18627: PUSH
18628: LD_INT 1
18630: PPUSH
18631: LD_VAR 0 14
18635: PPUSH
18636: CALL_OW 12
18640: ST_TO_ADDR
// case i of 1 :
18641: LD_VAR 0 3
18645: PUSH
18646: LD_INT 1
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18671
18654: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_VAR 0 10
18664: PPUSH
18665: CALL_OW 115
18669: GO 18732
18671: LD_INT 2
18673: DOUBLE
18674: EQUAL
18675: IFTRUE 18679
18677: GO 18701
18679: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18680: LD_VAR 0 1
18684: PPUSH
18685: LD_VAR 0 6
18689: PPUSH
18690: LD_VAR 0 7
18694: PPUSH
18695: CALL_OW 153
18699: GO 18732
18701: LD_INT 3
18703: DOUBLE
18704: EQUAL
18705: IFTRUE 18709
18707: GO 18731
18709: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18710: LD_VAR 0 1
18714: PPUSH
18715: LD_VAR 0 6
18719: PPUSH
18720: LD_VAR 0 7
18724: PPUSH
18725: CALL_OW 154
18729: GO 18732
18731: POP
// end ;
18732: LD_VAR 0 2
18736: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
18741: PPUSH
18742: PPUSH
18743: PPUSH
18744: PPUSH
// if not unit or not building then
18745: LD_VAR 0 1
18749: NOT
18750: IFTRUE 18759
18752: PUSH
18753: LD_VAR 0 2
18757: NOT
18758: OR
18759: IFFALSE 18763
// exit ;
18761: GO 18921
// x := GetX ( building ) ;
18763: LD_ADDR_VAR 0 5
18767: PUSH
18768: LD_VAR 0 2
18772: PPUSH
18773: CALL_OW 250
18777: ST_TO_ADDR
// y := GetY ( building ) ;
18778: LD_ADDR_VAR 0 6
18782: PUSH
18783: LD_VAR 0 2
18787: PPUSH
18788: CALL_OW 251
18792: ST_TO_ADDR
// for i := 0 to 5 do
18793: LD_ADDR_VAR 0 4
18797: PUSH
18798: DOUBLE
18799: LD_INT 0
18801: DEC
18802: ST_TO_ADDR
18803: LD_INT 5
18805: PUSH
18806: FOR_TO
18807: IFFALSE 18919
// begin _x := ShiftX ( x , i , 3 ) ;
18809: LD_ADDR_VAR 0 7
18813: PUSH
18814: LD_VAR 0 5
18818: PPUSH
18819: LD_VAR 0 4
18823: PPUSH
18824: LD_INT 3
18826: PPUSH
18827: CALL_OW 272
18831: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18832: LD_ADDR_VAR 0 8
18836: PUSH
18837: LD_VAR 0 6
18841: PPUSH
18842: LD_VAR 0 4
18846: PPUSH
18847: LD_INT 3
18849: PPUSH
18850: CALL_OW 273
18854: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18855: LD_VAR 0 7
18859: PPUSH
18860: LD_VAR 0 8
18864: PPUSH
18865: CALL_OW 488
18869: NOT
18870: IFFALSE 18874
// continue ;
18872: GO 18806
// if HexInfo ( _x , _y ) = 0 then
18874: LD_VAR 0 7
18878: PPUSH
18879: LD_VAR 0 8
18883: PPUSH
18884: CALL_OW 428
18888: PUSH
18889: LD_INT 0
18891: EQUAL
18892: IFFALSE 18917
// begin ComMoveXY ( unit , _x , _y ) ;
18894: LD_VAR 0 1
18898: PPUSH
18899: LD_VAR 0 7
18903: PPUSH
18904: LD_VAR 0 8
18908: PPUSH
18909: CALL_OW 111
// exit ;
18913: POP
18914: POP
18915: GO 18921
// end ; end ;
18917: GO 18806
18919: POP
18920: POP
// end ;
18921: LD_VAR 0 3
18925: RET
// export function ScanBase ( side , base_area ) ; begin
18926: LD_INT 0
18928: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18929: LD_ADDR_VAR 0 3
18933: PUSH
18934: LD_VAR 0 2
18938: PPUSH
18939: LD_INT 81
18941: PUSH
18942: LD_VAR 0 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 70
18955: ST_TO_ADDR
// end ;
18956: LD_VAR 0 3
18960: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18961: LD_INT 0
18963: PPUSH
18964: PPUSH
18965: PPUSH
18966: PPUSH
// result := false ;
18967: LD_ADDR_VAR 0 2
18971: PUSH
18972: LD_INT 0
18974: ST_TO_ADDR
// side := GetSide ( unit ) ;
18975: LD_ADDR_VAR 0 3
18979: PUSH
18980: LD_VAR 0 1
18984: PPUSH
18985: CALL_OW 255
18989: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18990: LD_ADDR_VAR 0 4
18994: PUSH
18995: LD_VAR 0 1
18999: PPUSH
19000: CALL_OW 248
19004: ST_TO_ADDR
// case nat of 1 :
19005: LD_VAR 0 4
19009: PUSH
19010: LD_INT 1
19012: DOUBLE
19013: EQUAL
19014: IFTRUE 19018
19016: GO 19029
19018: POP
// tech := tech_lassight ; 2 :
19019: LD_ADDR_VAR 0 5
19023: PUSH
19024: LD_INT 12
19026: ST_TO_ADDR
19027: GO 19068
19029: LD_INT 2
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19048
19037: POP
// tech := tech_mortar ; 3 :
19038: LD_ADDR_VAR 0 5
19042: PUSH
19043: LD_INT 41
19045: ST_TO_ADDR
19046: GO 19068
19048: LD_INT 3
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19067
19056: POP
// tech := tech_bazooka ; end ;
19057: LD_ADDR_VAR 0 5
19061: PUSH
19062: LD_INT 44
19064: ST_TO_ADDR
19065: GO 19068
19067: POP
// if Researched ( side , tech ) then
19068: LD_VAR 0 3
19072: PPUSH
19073: LD_VAR 0 5
19077: PPUSH
19078: CALL_OW 325
19082: IFFALSE 19109
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19084: LD_ADDR_VAR 0 2
19088: PUSH
19089: LD_INT 5
19091: PUSH
19092: LD_INT 8
19094: PUSH
19095: LD_INT 9
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: PUSH
19103: LD_VAR 0 4
19107: ARRAY
19108: ST_TO_ADDR
// end ;
19109: LD_VAR 0 2
19113: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// if not mines then
19119: LD_VAR 0 2
19123: NOT
19124: IFFALSE 19128
// exit ;
19126: GO 19272
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19128: LD_ADDR_VAR 0 5
19132: PUSH
19133: LD_INT 81
19135: PUSH
19136: LD_VAR 0 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 3
19147: PUSH
19148: LD_INT 21
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PPUSH
19166: CALL_OW 69
19170: ST_TO_ADDR
// for i in mines do
19171: LD_ADDR_VAR 0 4
19175: PUSH
19176: LD_VAR 0 2
19180: PUSH
19181: FOR_IN
19182: IFFALSE 19270
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19184: LD_VAR 0 4
19188: PUSH
19189: LD_INT 1
19191: ARRAY
19192: PPUSH
19193: LD_VAR 0 4
19197: PUSH
19198: LD_INT 2
19200: ARRAY
19201: PPUSH
19202: CALL_OW 458
19206: NOT
19207: IFFALSE 19211
// continue ;
19209: GO 19181
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19211: LD_VAR 0 4
19215: PUSH
19216: LD_INT 1
19218: ARRAY
19219: PPUSH
19220: LD_VAR 0 4
19224: PUSH
19225: LD_INT 2
19227: ARRAY
19228: PPUSH
19229: CALL_OW 428
19233: PUSH
19234: LD_VAR 0 5
19238: IN
19239: IFFALSE 19268
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19241: LD_VAR 0 4
19245: PUSH
19246: LD_INT 1
19248: ARRAY
19249: PPUSH
19250: LD_VAR 0 4
19254: PUSH
19255: LD_INT 2
19257: ARRAY
19258: PPUSH
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 456
// end ;
19268: GO 19181
19270: POP
19271: POP
// end ;
19272: LD_VAR 0 3
19276: RET
// export function Count ( array ) ; begin
19277: LD_INT 0
19279: PPUSH
// result := array + 0 ;
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: LD_VAR 0 1
19289: PUSH
19290: LD_INT 0
19292: PLUS
19293: ST_TO_ADDR
// end ;
19294: LD_VAR 0 2
19298: RET
// export function IsEmpty ( building ) ; begin
19299: LD_INT 0
19301: PPUSH
// if not building then
19302: LD_VAR 0 1
19306: NOT
19307: IFFALSE 19311
// exit ;
19309: GO 19354
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19311: LD_ADDR_VAR 0 2
19315: PUSH
19316: LD_VAR 0 1
19320: PUSH
19321: LD_INT 22
19323: PUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 255
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 58
19340: PUSH
19341: EMPTY
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 69
19352: IN
19353: ST_TO_ADDR
// end ;
19354: LD_VAR 0 2
19358: RET
// export function IsNotFull ( building ) ; var places ; begin
19359: LD_INT 0
19361: PPUSH
19362: PPUSH
// if not building then
19363: LD_VAR 0 1
19367: NOT
19368: IFFALSE 19372
// exit ;
19370: GO 19400
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19372: LD_ADDR_VAR 0 2
19376: PUSH
19377: LD_VAR 0 1
19381: PPUSH
19382: LD_INT 3
19384: PUSH
19385: LD_INT 62
19387: PUSH
19388: EMPTY
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PPUSH
19395: CALL_OW 72
19399: ST_TO_ADDR
// end ;
19400: LD_VAR 0 2
19404: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19405: LD_INT 0
19407: PPUSH
19408: PPUSH
19409: PPUSH
19410: PPUSH
// tmp := [ ] ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: EMPTY
19417: ST_TO_ADDR
// list := [ ] ;
19418: LD_ADDR_VAR 0 5
19422: PUSH
19423: EMPTY
19424: ST_TO_ADDR
// for i = 16 to 25 do
19425: LD_ADDR_VAR 0 4
19429: PUSH
19430: DOUBLE
19431: LD_INT 16
19433: DEC
19434: ST_TO_ADDR
19435: LD_INT 25
19437: PUSH
19438: FOR_TO
19439: IFFALSE 19512
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19441: LD_ADDR_VAR 0 3
19445: PUSH
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 22
19453: PUSH
19454: LD_VAR 0 1
19458: PPUSH
19459: CALL_OW 255
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 91
19470: PUSH
19471: LD_VAR 0 1
19475: PUSH
19476: LD_INT 6
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 30
19486: PUSH
19487: LD_VAR 0 4
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: PUSH
19501: EMPTY
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: ADD
19509: ST_TO_ADDR
19510: GO 19438
19512: POP
19513: POP
// for i = 1 to tmp do
19514: LD_ADDR_VAR 0 4
19518: PUSH
19519: DOUBLE
19520: LD_INT 1
19522: DEC
19523: ST_TO_ADDR
19524: LD_VAR 0 3
19528: PUSH
19529: FOR_TO
19530: IFFALSE 19618
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19532: LD_ADDR_VAR 0 5
19536: PUSH
19537: LD_VAR 0 5
19541: PUSH
19542: LD_VAR 0 3
19546: PUSH
19547: LD_VAR 0 4
19551: ARRAY
19552: PPUSH
19553: CALL_OW 266
19557: PUSH
19558: LD_VAR 0 3
19562: PUSH
19563: LD_VAR 0 4
19567: ARRAY
19568: PPUSH
19569: CALL_OW 250
19573: PUSH
19574: LD_VAR 0 3
19578: PUSH
19579: LD_VAR 0 4
19583: ARRAY
19584: PPUSH
19585: CALL_OW 251
19589: PUSH
19590: LD_VAR 0 3
19594: PUSH
19595: LD_VAR 0 4
19599: ARRAY
19600: PPUSH
19601: CALL_OW 254
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: ADD
19615: ST_TO_ADDR
19616: GO 19529
19618: POP
19619: POP
// result := list ;
19620: LD_ADDR_VAR 0 2
19624: PUSH
19625: LD_VAR 0 5
19629: ST_TO_ADDR
// end ;
19630: LD_VAR 0 2
19634: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19635: LD_INT 0
19637: PPUSH
19638: PPUSH
19639: PPUSH
19640: PPUSH
19641: PPUSH
19642: PPUSH
19643: PPUSH
// if not factory then
19644: LD_VAR 0 1
19648: NOT
19649: IFFALSE 19653
// exit ;
19651: GO 20256
// if control = control_apeman then
19653: LD_VAR 0 4
19657: PUSH
19658: LD_INT 5
19660: EQUAL
19661: IFFALSE 19770
// begin tmp := UnitsInside ( factory ) ;
19663: LD_ADDR_VAR 0 8
19667: PUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 313
19677: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19678: LD_VAR 0 8
19682: PPUSH
19683: LD_INT 25
19685: PUSH
19686: LD_INT 12
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PPUSH
19693: CALL_OW 72
19697: NOT
19698: IFFALSE 19708
// control := control_manual ;
19700: LD_ADDR_VAR 0 4
19704: PUSH
19705: LD_INT 1
19707: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19708: LD_ADDR_VAR 0 8
19712: PUSH
19713: LD_VAR 0 1
19717: PPUSH
19718: CALL 19405 0 1
19722: ST_TO_ADDR
// if tmp then
19723: LD_VAR 0 8
19727: IFFALSE 19770
// begin for i in tmp do
19729: LD_ADDR_VAR 0 7
19733: PUSH
19734: LD_VAR 0 8
19738: PUSH
19739: FOR_IN
19740: IFFALSE 19768
// if i [ 1 ] = b_ext_radio then
19742: LD_VAR 0 7
19746: PUSH
19747: LD_INT 1
19749: ARRAY
19750: PUSH
19751: LD_INT 22
19753: EQUAL
19754: IFFALSE 19766
// begin control := control_remote ;
19756: LD_ADDR_VAR 0 4
19760: PUSH
19761: LD_INT 2
19763: ST_TO_ADDR
// break ;
19764: GO 19768
// end ;
19766: GO 19739
19768: POP
19769: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19770: LD_VAR 0 1
19774: PPUSH
19775: LD_VAR 0 2
19779: PPUSH
19780: LD_VAR 0 3
19784: PPUSH
19785: LD_VAR 0 4
19789: PPUSH
19790: LD_VAR 0 5
19794: PPUSH
19795: CALL_OW 448
19799: IFFALSE 19834
// begin result := [ chassis , engine , control , weapon ] ;
19801: LD_ADDR_VAR 0 6
19805: PUSH
19806: LD_VAR 0 2
19810: PUSH
19811: LD_VAR 0 3
19815: PUSH
19816: LD_VAR 0 4
19820: PUSH
19821: LD_VAR 0 5
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: ST_TO_ADDR
// exit ;
19832: GO 20256
// end ; _chassis := AvailableChassisList ( factory ) ;
19834: LD_ADDR_VAR 0 9
19838: PUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 475
19848: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19849: LD_ADDR_VAR 0 11
19853: PUSH
19854: LD_VAR 0 1
19858: PPUSH
19859: CALL_OW 476
19863: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19864: LD_ADDR_VAR 0 12
19868: PUSH
19869: LD_VAR 0 1
19873: PPUSH
19874: CALL_OW 477
19878: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19879: LD_ADDR_VAR 0 10
19883: PUSH
19884: LD_VAR 0 1
19888: PPUSH
19889: CALL_OW 478
19893: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19894: LD_VAR 0 9
19898: NOT
19899: IFTRUE 19908
19901: PUSH
19902: LD_VAR 0 11
19906: NOT
19907: OR
19908: IFTRUE 19917
19910: PUSH
19911: LD_VAR 0 12
19915: NOT
19916: OR
19917: IFTRUE 19926
19919: PUSH
19920: LD_VAR 0 10
19924: NOT
19925: OR
19926: IFFALSE 19961
// begin result := [ chassis , engine , control , weapon ] ;
19928: LD_ADDR_VAR 0 6
19932: PUSH
19933: LD_VAR 0 2
19937: PUSH
19938: LD_VAR 0 3
19942: PUSH
19943: LD_VAR 0 4
19947: PUSH
19948: LD_VAR 0 5
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: ST_TO_ADDR
// exit ;
19959: GO 20256
// end ; if not chassis in _chassis then
19961: LD_VAR 0 2
19965: PUSH
19966: LD_VAR 0 9
19970: IN
19971: NOT
19972: IFFALSE 19998
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19974: LD_ADDR_VAR 0 2
19978: PUSH
19979: LD_VAR 0 9
19983: PUSH
19984: LD_INT 1
19986: PPUSH
19987: LD_VAR 0 9
19991: PPUSH
19992: CALL_OW 12
19996: ARRAY
19997: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19998: LD_VAR 0 2
20002: PPUSH
20003: LD_VAR 0 3
20007: PPUSH
20008: CALL 20261 0 2
20012: NOT
20013: IFFALSE 20074
// repeat engine := _engine [ 1 ] ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_VAR 0 11
20024: PUSH
20025: LD_INT 1
20027: ARRAY
20028: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20029: LD_ADDR_VAR 0 11
20033: PUSH
20034: LD_VAR 0 11
20038: PPUSH
20039: LD_INT 1
20041: PPUSH
20042: CALL_OW 3
20046: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20047: LD_VAR 0 2
20051: PPUSH
20052: LD_VAR 0 3
20056: PPUSH
20057: CALL 20261 0 2
20061: IFTRUE 20072
20063: PUSH
20064: LD_VAR 0 11
20068: PUSH
20069: EMPTY
20070: EQUAL
20071: OR
20072: IFFALSE 20015
// if not control in _control then
20074: LD_VAR 0 4
20078: PUSH
20079: LD_VAR 0 12
20083: IN
20084: NOT
20085: IFFALSE 20111
// control := _control [ rand ( 1 , _control ) ] ;
20087: LD_ADDR_VAR 0 4
20091: PUSH
20092: LD_VAR 0 12
20096: PUSH
20097: LD_INT 1
20099: PPUSH
20100: LD_VAR 0 12
20104: PPUSH
20105: CALL_OW 12
20109: ARRAY
20110: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20111: LD_VAR 0 2
20115: PPUSH
20116: LD_VAR 0 5
20120: PPUSH
20121: CALL 20483 0 2
20125: NOT
20126: IFFALSE 20187
// repeat weapon := _weapon [ 1 ] ;
20128: LD_ADDR_VAR 0 5
20132: PUSH
20133: LD_VAR 0 10
20137: PUSH
20138: LD_INT 1
20140: ARRAY
20141: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20142: LD_ADDR_VAR 0 10
20146: PUSH
20147: LD_VAR 0 10
20151: PPUSH
20152: LD_INT 1
20154: PPUSH
20155: CALL_OW 3
20159: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20160: LD_VAR 0 2
20164: PPUSH
20165: LD_VAR 0 5
20169: PPUSH
20170: CALL 20483 0 2
20174: IFTRUE 20185
20176: PUSH
20177: LD_VAR 0 10
20181: PUSH
20182: EMPTY
20183: EQUAL
20184: OR
20185: IFFALSE 20128
// result := [ ] ;
20187: LD_ADDR_VAR 0 6
20191: PUSH
20192: EMPTY
20193: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20194: LD_VAR 0 1
20198: PPUSH
20199: LD_VAR 0 2
20203: PPUSH
20204: LD_VAR 0 3
20208: PPUSH
20209: LD_VAR 0 4
20213: PPUSH
20214: LD_VAR 0 5
20218: PPUSH
20219: CALL_OW 448
20223: IFFALSE 20256
// result := [ chassis , engine , control , weapon ] ;
20225: LD_ADDR_VAR 0 6
20229: PUSH
20230: LD_VAR 0 2
20234: PUSH
20235: LD_VAR 0 3
20239: PUSH
20240: LD_VAR 0 4
20244: PUSH
20245: LD_VAR 0 5
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// end ;
20256: LD_VAR 0 6
20260: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20261: LD_INT 0
20263: PPUSH
// if not chassis or not engine then
20264: LD_VAR 0 1
20268: NOT
20269: IFTRUE 20278
20271: PUSH
20272: LD_VAR 0 2
20276: NOT
20277: OR
20278: IFFALSE 20282
// exit ;
20280: GO 20478
// case engine of engine_solar :
20282: LD_VAR 0 2
20286: PUSH
20287: LD_INT 2
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20333
20295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20296: LD_ADDR_VAR 0 3
20300: PUSH
20301: LD_INT 11
20303: PUSH
20304: LD_INT 12
20306: PUSH
20307: LD_INT 13
20309: PUSH
20310: LD_INT 14
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: LD_INT 3
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: ST_TO_ADDR
20331: GO 20462
20333: LD_INT 1
20335: DOUBLE
20336: EQUAL
20337: IFTRUE 20341
20339: GO 20403
20341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20342: LD_ADDR_VAR 0 3
20346: PUSH
20347: LD_INT 11
20349: PUSH
20350: LD_INT 12
20352: PUSH
20353: LD_INT 13
20355: PUSH
20356: LD_INT 14
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 3
20367: PUSH
20368: LD_INT 4
20370: PUSH
20371: LD_INT 5
20373: PUSH
20374: LD_INT 21
20376: PUSH
20377: LD_INT 23
20379: PUSH
20380: LD_INT 22
20382: PUSH
20383: LD_INT 24
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: ST_TO_ADDR
20401: GO 20462
20403: LD_INT 3
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20461
20411: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20412: LD_ADDR_VAR 0 3
20416: PUSH
20417: LD_INT 13
20419: PUSH
20420: LD_INT 14
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 3
20428: PUSH
20429: LD_INT 4
20431: PUSH
20432: LD_INT 5
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 23
20443: PUSH
20444: LD_INT 24
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: ST_TO_ADDR
20459: GO 20462
20461: POP
// result := ( chassis in result ) ;
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_VAR 0 1
20471: PUSH
20472: LD_VAR 0 3
20476: IN
20477: ST_TO_ADDR
// end ;
20478: LD_VAR 0 3
20482: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20483: LD_INT 0
20485: PPUSH
// if not chassis or not weapon then
20486: LD_VAR 0 1
20490: NOT
20491: IFTRUE 20500
20493: PUSH
20494: LD_VAR 0 2
20498: NOT
20499: OR
20500: IFFALSE 20504
// exit ;
20502: GO 21598
// case weapon of us_machine_gun :
20504: LD_VAR 0 2
20508: PUSH
20509: LD_INT 2
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20547
20517: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 3
20531: PUSH
20532: LD_INT 4
20534: PUSH
20535: LD_INT 5
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: ST_TO_ADDR
20545: GO 21582
20547: LD_INT 3
20549: DOUBLE
20550: EQUAL
20551: IFTRUE 20555
20553: GO 20585
20555: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20556: LD_ADDR_VAR 0 3
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: LD_INT 3
20569: PUSH
20570: LD_INT 4
20572: PUSH
20573: LD_INT 5
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: ST_TO_ADDR
20583: GO 21582
20585: LD_INT 11
20587: DOUBLE
20588: EQUAL
20589: IFTRUE 20593
20591: GO 20623
20593: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: LD_INT 3
20607: PUSH
20608: LD_INT 4
20610: PUSH
20611: LD_INT 5
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 21582
20623: LD_INT 4
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20657
20631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20632: LD_ADDR_VAR 0 3
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 3
20642: PUSH
20643: LD_INT 4
20645: PUSH
20646: LD_INT 5
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: ST_TO_ADDR
20655: GO 21582
20657: LD_INT 5
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20691
20665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20666: LD_ADDR_VAR 0 3
20670: PUSH
20671: LD_INT 2
20673: PUSH
20674: LD_INT 3
20676: PUSH
20677: LD_INT 4
20679: PUSH
20680: LD_INT 5
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: ST_TO_ADDR
20689: GO 21582
20691: LD_INT 9
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20725
20699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20700: LD_ADDR_VAR 0 3
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 3
20710: PUSH
20711: LD_INT 4
20713: PUSH
20714: LD_INT 5
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: ST_TO_ADDR
20723: GO 21582
20725: LD_INT 7
20727: DOUBLE
20728: EQUAL
20729: IFTRUE 20733
20731: GO 20759
20733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: LD_INT 2
20741: PUSH
20742: LD_INT 3
20744: PUSH
20745: LD_INT 4
20747: PUSH
20748: LD_INT 5
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: ST_TO_ADDR
20757: GO 21582
20759: LD_INT 12
20761: DOUBLE
20762: EQUAL
20763: IFTRUE 20767
20765: GO 20793
20767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 3
20778: PUSH
20779: LD_INT 4
20781: PUSH
20782: LD_INT 5
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: ST_TO_ADDR
20791: GO 21582
20793: LD_INT 13
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20827
20801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20802: LD_ADDR_VAR 0 3
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 3
20812: PUSH
20813: LD_INT 4
20815: PUSH
20816: LD_INT 5
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: ST_TO_ADDR
20825: GO 21582
20827: LD_INT 14
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20853
20835: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20836: LD_ADDR_VAR 0 3
20840: PUSH
20841: LD_INT 4
20843: PUSH
20844: LD_INT 5
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: ST_TO_ADDR
20851: GO 21582
20853: LD_INT 6
20855: DOUBLE
20856: EQUAL
20857: IFTRUE 20861
20859: GO 20879
20861: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20862: LD_ADDR_VAR 0 3
20866: PUSH
20867: LD_INT 4
20869: PUSH
20870: LD_INT 5
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: ST_TO_ADDR
20877: GO 21582
20879: LD_INT 10
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20905
20887: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_INT 4
20895: PUSH
20896: LD_INT 5
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: ST_TO_ADDR
20903: GO 21582
20905: LD_INT 22
20907: DOUBLE
20908: EQUAL
20909: IFTRUE 20913
20911: GO 20939
20913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20914: LD_ADDR_VAR 0 3
20918: PUSH
20919: LD_INT 11
20921: PUSH
20922: LD_INT 12
20924: PUSH
20925: LD_INT 13
20927: PUSH
20928: LD_INT 14
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: ST_TO_ADDR
20937: GO 21582
20939: LD_INT 23
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20973
20947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: LD_INT 13
20961: PUSH
20962: LD_INT 14
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: ST_TO_ADDR
20971: GO 21582
20973: LD_INT 24
20975: DOUBLE
20976: EQUAL
20977: IFTRUE 20981
20979: GO 21007
20981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20982: LD_ADDR_VAR 0 3
20986: PUSH
20987: LD_INT 11
20989: PUSH
20990: LD_INT 12
20992: PUSH
20993: LD_INT 13
20995: PUSH
20996: LD_INT 14
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
21005: GO 21582
21007: LD_INT 30
21009: DOUBLE
21010: EQUAL
21011: IFTRUE 21015
21013: GO 21041
21015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21016: LD_ADDR_VAR 0 3
21020: PUSH
21021: LD_INT 11
21023: PUSH
21024: LD_INT 12
21026: PUSH
21027: LD_INT 13
21029: PUSH
21030: LD_INT 14
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: ST_TO_ADDR
21039: GO 21582
21041: LD_INT 25
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21067
21049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21050: LD_ADDR_VAR 0 3
21054: PUSH
21055: LD_INT 13
21057: PUSH
21058: LD_INT 14
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: ST_TO_ADDR
21065: GO 21582
21067: LD_INT 27
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21093
21075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21076: LD_ADDR_VAR 0 3
21080: PUSH
21081: LD_INT 13
21083: PUSH
21084: LD_INT 14
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: ST_TO_ADDR
21091: GO 21582
21093: LD_INT 92
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21127
21101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21102: LD_ADDR_VAR 0 3
21106: PUSH
21107: LD_INT 11
21109: PUSH
21110: LD_INT 12
21112: PUSH
21113: LD_INT 13
21115: PUSH
21116: LD_INT 14
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: ST_TO_ADDR
21125: GO 21582
21127: LD_INT 28
21129: DOUBLE
21130: EQUAL
21131: IFTRUE 21135
21133: GO 21153
21135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21136: LD_ADDR_VAR 0 3
21140: PUSH
21141: LD_INT 13
21143: PUSH
21144: LD_INT 14
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: ST_TO_ADDR
21151: GO 21582
21153: LD_INT 29
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21179
21161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_INT 13
21169: PUSH
21170: LD_INT 14
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: ST_TO_ADDR
21177: GO 21582
21179: LD_INT 31
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21205
21187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21188: LD_ADDR_VAR 0 3
21192: PUSH
21193: LD_INT 13
21195: PUSH
21196: LD_INT 14
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: ST_TO_ADDR
21203: GO 21582
21205: LD_INT 26
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21231
21213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21214: LD_ADDR_VAR 0 3
21218: PUSH
21219: LD_INT 13
21221: PUSH
21222: LD_INT 14
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: ST_TO_ADDR
21229: GO 21582
21231: LD_INT 42
21233: DOUBLE
21234: EQUAL
21235: IFTRUE 21239
21237: GO 21265
21239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21240: LD_ADDR_VAR 0 3
21244: PUSH
21245: LD_INT 21
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 24
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: ST_TO_ADDR
21263: GO 21582
21265: LD_INT 43
21267: DOUBLE
21268: EQUAL
21269: IFTRUE 21273
21271: GO 21299
21273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21274: LD_ADDR_VAR 0 3
21278: PUSH
21279: LD_INT 21
21281: PUSH
21282: LD_INT 22
21284: PUSH
21285: LD_INT 23
21287: PUSH
21288: LD_INT 24
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: ST_TO_ADDR
21297: GO 21582
21299: LD_INT 44
21301: DOUBLE
21302: EQUAL
21303: IFTRUE 21307
21305: GO 21333
21307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21308: LD_ADDR_VAR 0 3
21312: PUSH
21313: LD_INT 21
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_INT 23
21321: PUSH
21322: LD_INT 24
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: ST_TO_ADDR
21331: GO 21582
21333: LD_INT 45
21335: DOUBLE
21336: EQUAL
21337: IFTRUE 21341
21339: GO 21367
21341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21342: LD_ADDR_VAR 0 3
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 22
21352: PUSH
21353: LD_INT 23
21355: PUSH
21356: LD_INT 24
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: ST_TO_ADDR
21365: GO 21582
21367: LD_INT 49
21369: DOUBLE
21370: EQUAL
21371: IFTRUE 21375
21373: GO 21401
21375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21376: LD_ADDR_VAR 0 3
21380: PUSH
21381: LD_INT 21
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_INT 23
21389: PUSH
21390: LD_INT 24
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: ST_TO_ADDR
21399: GO 21582
21401: LD_INT 51
21403: DOUBLE
21404: EQUAL
21405: IFTRUE 21409
21407: GO 21435
21409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21410: LD_ADDR_VAR 0 3
21414: PUSH
21415: LD_INT 21
21417: PUSH
21418: LD_INT 22
21420: PUSH
21421: LD_INT 23
21423: PUSH
21424: LD_INT 24
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: ST_TO_ADDR
21433: GO 21582
21435: LD_INT 52
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21469
21443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_INT 21
21451: PUSH
21452: LD_INT 22
21454: PUSH
21455: LD_INT 23
21457: PUSH
21458: LD_INT 24
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: ST_TO_ADDR
21467: GO 21582
21469: LD_INT 53
21471: DOUBLE
21472: EQUAL
21473: IFTRUE 21477
21475: GO 21495
21477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21478: LD_ADDR_VAR 0 3
21482: PUSH
21483: LD_INT 23
21485: PUSH
21486: LD_INT 24
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: ST_TO_ADDR
21493: GO 21582
21495: LD_INT 46
21497: DOUBLE
21498: EQUAL
21499: IFTRUE 21503
21501: GO 21521
21503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21504: LD_ADDR_VAR 0 3
21508: PUSH
21509: LD_INT 23
21511: PUSH
21512: LD_INT 24
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: ST_TO_ADDR
21519: GO 21582
21521: LD_INT 47
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21547
21529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_INT 23
21537: PUSH
21538: LD_INT 24
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: ST_TO_ADDR
21545: GO 21582
21547: LD_INT 98
21549: DOUBLE
21550: EQUAL
21551: IFTRUE 21555
21553: GO 21581
21555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21556: LD_ADDR_VAR 0 3
21560: PUSH
21561: LD_INT 21
21563: PUSH
21564: LD_INT 22
21566: PUSH
21567: LD_INT 23
21569: PUSH
21570: LD_INT 24
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: ST_TO_ADDR
21579: GO 21582
21581: POP
// result := ( chassis in result ) ;
21582: LD_ADDR_VAR 0 3
21586: PUSH
21587: LD_VAR 0 1
21591: PUSH
21592: LD_VAR 0 3
21596: IN
21597: ST_TO_ADDR
// end ;
21598: LD_VAR 0 3
21602: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
// result := array ;
21612: LD_ADDR_VAR 0 5
21616: PUSH
21617: LD_VAR 0 1
21621: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21622: LD_VAR 0 1
21626: NOT
21627: IFTRUE 21636
21629: PUSH
21630: LD_VAR 0 2
21634: NOT
21635: OR
21636: IFTRUE 21645
21638: PUSH
21639: LD_VAR 0 3
21643: NOT
21644: OR
21645: IFTRUE 21659
21647: PUSH
21648: LD_VAR 0 2
21652: PUSH
21653: LD_VAR 0 1
21657: GREATER
21658: OR
21659: IFTRUE 21673
21661: PUSH
21662: LD_VAR 0 3
21666: PUSH
21667: LD_VAR 0 1
21671: GREATER
21672: OR
21673: IFFALSE 21677
// exit ;
21675: GO 21973
// if direction then
21677: LD_VAR 0 4
21681: IFFALSE 21745
// begin d := 1 ;
21683: LD_ADDR_VAR 0 9
21687: PUSH
21688: LD_INT 1
21690: ST_TO_ADDR
// if i_from > i_to then
21691: LD_VAR 0 2
21695: PUSH
21696: LD_VAR 0 3
21700: GREATER
21701: IFFALSE 21727
// length := ( array - i_from ) + i_to else
21703: LD_ADDR_VAR 0 11
21707: PUSH
21708: LD_VAR 0 1
21712: PUSH
21713: LD_VAR 0 2
21717: MINUS
21718: PUSH
21719: LD_VAR 0 3
21723: PLUS
21724: ST_TO_ADDR
21725: GO 21743
// length := i_to - i_from ;
21727: LD_ADDR_VAR 0 11
21731: PUSH
21732: LD_VAR 0 3
21736: PUSH
21737: LD_VAR 0 2
21741: MINUS
21742: ST_TO_ADDR
// end else
21743: GO 21806
// begin d := - 1 ;
21745: LD_ADDR_VAR 0 9
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: ST_TO_ADDR
// if i_from > i_to then
21754: LD_VAR 0 2
21758: PUSH
21759: LD_VAR 0 3
21763: GREATER
21764: IFFALSE 21784
// length := i_from - i_to else
21766: LD_ADDR_VAR 0 11
21770: PUSH
21771: LD_VAR 0 2
21775: PUSH
21776: LD_VAR 0 3
21780: MINUS
21781: ST_TO_ADDR
21782: GO 21806
// length := ( array - i_to ) + i_from ;
21784: LD_ADDR_VAR 0 11
21788: PUSH
21789: LD_VAR 0 1
21793: PUSH
21794: LD_VAR 0 3
21798: MINUS
21799: PUSH
21800: LD_VAR 0 2
21804: PLUS
21805: ST_TO_ADDR
// end ; if not length then
21806: LD_VAR 0 11
21810: NOT
21811: IFFALSE 21815
// exit ;
21813: GO 21973
// tmp := array ;
21815: LD_ADDR_VAR 0 10
21819: PUSH
21820: LD_VAR 0 1
21824: ST_TO_ADDR
// for i = 1 to length do
21825: LD_ADDR_VAR 0 6
21829: PUSH
21830: DOUBLE
21831: LD_INT 1
21833: DEC
21834: ST_TO_ADDR
21835: LD_VAR 0 11
21839: PUSH
21840: FOR_TO
21841: IFFALSE 21961
// begin for j = 1 to array do
21843: LD_ADDR_VAR 0 7
21847: PUSH
21848: DOUBLE
21849: LD_INT 1
21851: DEC
21852: ST_TO_ADDR
21853: LD_VAR 0 1
21857: PUSH
21858: FOR_TO
21859: IFFALSE 21947
// begin k := j + d ;
21861: LD_ADDR_VAR 0 8
21865: PUSH
21866: LD_VAR 0 7
21870: PUSH
21871: LD_VAR 0 9
21875: PLUS
21876: ST_TO_ADDR
// if k > array then
21877: LD_VAR 0 8
21881: PUSH
21882: LD_VAR 0 1
21886: GREATER
21887: IFFALSE 21897
// k := 1 ;
21889: LD_ADDR_VAR 0 8
21893: PUSH
21894: LD_INT 1
21896: ST_TO_ADDR
// if not k then
21897: LD_VAR 0 8
21901: NOT
21902: IFFALSE 21914
// k := array ;
21904: LD_ADDR_VAR 0 8
21908: PUSH
21909: LD_VAR 0 1
21913: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21914: LD_ADDR_VAR 0 10
21918: PUSH
21919: LD_VAR 0 10
21923: PPUSH
21924: LD_VAR 0 8
21928: PPUSH
21929: LD_VAR 0 1
21933: PUSH
21934: LD_VAR 0 7
21938: ARRAY
21939: PPUSH
21940: CALL_OW 1
21944: ST_TO_ADDR
// end ;
21945: GO 21858
21947: POP
21948: POP
// array := tmp ;
21949: LD_ADDR_VAR 0 1
21953: PUSH
21954: LD_VAR 0 10
21958: ST_TO_ADDR
// end ;
21959: GO 21840
21961: POP
21962: POP
// result := array ;
21963: LD_ADDR_VAR 0 5
21967: PUSH
21968: LD_VAR 0 1
21972: ST_TO_ADDR
// end ;
21973: LD_VAR 0 5
21977: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21978: LD_INT 0
21980: PPUSH
21981: PPUSH
// result := 0 ;
21982: LD_ADDR_VAR 0 3
21986: PUSH
21987: LD_INT 0
21989: ST_TO_ADDR
// if not array or not value in array then
21990: LD_VAR 0 1
21994: NOT
21995: IFTRUE 22010
21997: PUSH
21998: LD_VAR 0 2
22002: PUSH
22003: LD_VAR 0 1
22007: IN
22008: NOT
22009: OR
22010: IFFALSE 22014
// exit ;
22012: GO 22068
// for i = 1 to array do
22014: LD_ADDR_VAR 0 4
22018: PUSH
22019: DOUBLE
22020: LD_INT 1
22022: DEC
22023: ST_TO_ADDR
22024: LD_VAR 0 1
22028: PUSH
22029: FOR_TO
22030: IFFALSE 22066
// if value = array [ i ] then
22032: LD_VAR 0 2
22036: PUSH
22037: LD_VAR 0 1
22041: PUSH
22042: LD_VAR 0 4
22046: ARRAY
22047: EQUAL
22048: IFFALSE 22064
// begin result := i ;
22050: LD_ADDR_VAR 0 3
22054: PUSH
22055: LD_VAR 0 4
22059: ST_TO_ADDR
// exit ;
22060: POP
22061: POP
22062: GO 22068
// end ;
22064: GO 22029
22066: POP
22067: POP
// end ;
22068: LD_VAR 0 3
22072: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22073: LD_INT 0
22075: PPUSH
// vc_chassis := chassis ;
22076: LD_ADDR_OWVAR 37
22080: PUSH
22081: LD_VAR 0 1
22085: ST_TO_ADDR
// vc_engine := engine ;
22086: LD_ADDR_OWVAR 39
22090: PUSH
22091: LD_VAR 0 2
22095: ST_TO_ADDR
// vc_control := control ;
22096: LD_ADDR_OWVAR 38
22100: PUSH
22101: LD_VAR 0 3
22105: ST_TO_ADDR
// vc_weapon := weapon ;
22106: LD_ADDR_OWVAR 40
22110: PUSH
22111: LD_VAR 0 4
22115: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22116: LD_ADDR_OWVAR 41
22120: PUSH
22121: LD_VAR 0 5
22125: ST_TO_ADDR
// end ;
22126: LD_VAR 0 6
22130: RET
// export function WantPlant ( unit ) ; var task ; begin
22131: LD_INT 0
22133: PPUSH
22134: PPUSH
// result := false ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22143: LD_ADDR_VAR 0 3
22147: PUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 437
22157: ST_TO_ADDR
// if task then
22158: LD_VAR 0 3
22162: IFFALSE 22190
// if task [ 1 ] [ 1 ] = p then
22164: LD_VAR 0 3
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PUSH
22173: LD_INT 1
22175: ARRAY
22176: PUSH
22177: LD_STRING p
22179: EQUAL
22180: IFFALSE 22190
// result := true ;
22182: LD_ADDR_VAR 0 2
22186: PUSH
22187: LD_INT 1
22189: ST_TO_ADDR
// end ;
22190: LD_VAR 0 2
22194: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
// if pos < 1 then
22201: LD_VAR 0 2
22205: PUSH
22206: LD_INT 1
22208: LESS
22209: IFFALSE 22213
// exit ;
22211: GO 22516
// if pos = 1 then
22213: LD_VAR 0 2
22217: PUSH
22218: LD_INT 1
22220: EQUAL
22221: IFFALSE 22254
// result := Replace ( arr , pos [ 1 ] , value ) else
22223: LD_ADDR_VAR 0 4
22227: PUSH
22228: LD_VAR 0 1
22232: PPUSH
22233: LD_VAR 0 2
22237: PUSH
22238: LD_INT 1
22240: ARRAY
22241: PPUSH
22242: LD_VAR 0 3
22246: PPUSH
22247: CALL_OW 1
22251: ST_TO_ADDR
22252: GO 22516
// begin tmp := arr ;
22254: LD_ADDR_VAR 0 6
22258: PUSH
22259: LD_VAR 0 1
22263: ST_TO_ADDR
// s_arr := [ tmp ] ;
22264: LD_ADDR_VAR 0 7
22268: PUSH
22269: LD_VAR 0 6
22273: PUSH
22274: EMPTY
22275: LIST
22276: ST_TO_ADDR
// for i = 1 to pos - 1 do
22277: LD_ADDR_VAR 0 5
22281: PUSH
22282: DOUBLE
22283: LD_INT 1
22285: DEC
22286: ST_TO_ADDR
22287: LD_VAR 0 2
22291: PUSH
22292: LD_INT 1
22294: MINUS
22295: PUSH
22296: FOR_TO
22297: IFFALSE 22342
// begin tmp := tmp [ pos [ i ] ] ;
22299: LD_ADDR_VAR 0 6
22303: PUSH
22304: LD_VAR 0 6
22308: PUSH
22309: LD_VAR 0 2
22313: PUSH
22314: LD_VAR 0 5
22318: ARRAY
22319: ARRAY
22320: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22321: LD_ADDR_VAR 0 7
22325: PUSH
22326: LD_VAR 0 7
22330: PUSH
22331: LD_VAR 0 6
22335: PUSH
22336: EMPTY
22337: LIST
22338: ADD
22339: ST_TO_ADDR
// end ;
22340: GO 22296
22342: POP
22343: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22344: LD_ADDR_VAR 0 6
22348: PUSH
22349: LD_VAR 0 6
22353: PPUSH
22354: LD_VAR 0 2
22358: PUSH
22359: LD_VAR 0 2
22363: ARRAY
22364: PPUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: CALL_OW 1
22374: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22375: LD_ADDR_VAR 0 7
22379: PUSH
22380: LD_VAR 0 7
22384: PPUSH
22385: LD_VAR 0 7
22389: PPUSH
22390: LD_VAR 0 6
22394: PPUSH
22395: CALL_OW 1
22399: ST_TO_ADDR
// for i = s_arr downto 2 do
22400: LD_ADDR_VAR 0 5
22404: PUSH
22405: DOUBLE
22406: LD_VAR 0 7
22410: INC
22411: ST_TO_ADDR
22412: LD_INT 2
22414: PUSH
22415: FOR_DOWNTO
22416: IFFALSE 22500
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22418: LD_ADDR_VAR 0 6
22422: PUSH
22423: LD_VAR 0 7
22427: PUSH
22428: LD_VAR 0 5
22432: PUSH
22433: LD_INT 1
22435: MINUS
22436: ARRAY
22437: PPUSH
22438: LD_VAR 0 2
22442: PUSH
22443: LD_VAR 0 5
22447: PUSH
22448: LD_INT 1
22450: MINUS
22451: ARRAY
22452: PPUSH
22453: LD_VAR 0 7
22457: PUSH
22458: LD_VAR 0 5
22462: ARRAY
22463: PPUSH
22464: CALL_OW 1
22468: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22469: LD_ADDR_VAR 0 7
22473: PUSH
22474: LD_VAR 0 7
22478: PPUSH
22479: LD_VAR 0 5
22483: PUSH
22484: LD_INT 1
22486: MINUS
22487: PPUSH
22488: LD_VAR 0 6
22492: PPUSH
22493: CALL_OW 1
22497: ST_TO_ADDR
// end ;
22498: GO 22415
22500: POP
22501: POP
// result := s_arr [ 1 ] ;
22502: LD_ADDR_VAR 0 4
22506: PUSH
22507: LD_VAR 0 7
22511: PUSH
22512: LD_INT 1
22514: ARRAY
22515: ST_TO_ADDR
// end ; end ;
22516: LD_VAR 0 4
22520: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22521: LD_INT 0
22523: PPUSH
22524: PPUSH
// if not list then
22525: LD_VAR 0 1
22529: NOT
22530: IFFALSE 22534
// exit ;
22532: GO 22625
// i := list [ pos1 ] ;
22534: LD_ADDR_VAR 0 5
22538: PUSH
22539: LD_VAR 0 1
22543: PUSH
22544: LD_VAR 0 2
22548: ARRAY
22549: ST_TO_ADDR
// if not i then
22550: LD_VAR 0 5
22554: NOT
22555: IFFALSE 22559
// exit ;
22557: GO 22625
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22559: LD_ADDR_VAR 0 1
22563: PUSH
22564: LD_VAR 0 1
22568: PPUSH
22569: LD_VAR 0 2
22573: PPUSH
22574: LD_VAR 0 1
22578: PUSH
22579: LD_VAR 0 3
22583: ARRAY
22584: PPUSH
22585: CALL_OW 1
22589: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22590: LD_ADDR_VAR 0 1
22594: PUSH
22595: LD_VAR 0 1
22599: PPUSH
22600: LD_VAR 0 3
22604: PPUSH
22605: LD_VAR 0 5
22609: PPUSH
22610: CALL_OW 1
22614: ST_TO_ADDR
// result := list ;
22615: LD_ADDR_VAR 0 4
22619: PUSH
22620: LD_VAR 0 1
22624: ST_TO_ADDR
// end ;
22625: LD_VAR 0 4
22629: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22630: LD_INT 0
22632: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22633: LD_ADDR_VAR 0 5
22637: PUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 250
22647: PPUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 251
22657: PPUSH
22658: LD_VAR 0 2
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_VAR 0 4
22672: PPUSH
22673: CALL 23055 0 5
22677: ST_TO_ADDR
// end ;
22678: LD_VAR 0 5
22682: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22683: LD_INT 0
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
// if not list or not unit then
22689: LD_VAR 0 2
22693: NOT
22694: IFTRUE 22703
22696: PUSH
22697: LD_VAR 0 1
22701: NOT
22702: OR
22703: IFFALSE 22707
// exit ;
22705: GO 23050
// result := [ ] ;
22707: LD_ADDR_VAR 0 5
22711: PUSH
22712: EMPTY
22713: ST_TO_ADDR
// for i in list do
22714: LD_ADDR_VAR 0 6
22718: PUSH
22719: LD_VAR 0 2
22723: PUSH
22724: FOR_IN
22725: IFFALSE 22943
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22727: LD_ADDR_VAR 0 8
22731: PUSH
22732: LD_VAR 0 1
22736: PPUSH
22737: LD_VAR 0 6
22741: PUSH
22742: LD_INT 1
22744: ARRAY
22745: PPUSH
22746: LD_VAR 0 6
22750: PUSH
22751: LD_INT 2
22753: ARRAY
22754: PPUSH
22755: CALL_OW 297
22759: ST_TO_ADDR
// if not Count ( result ) then
22760: LD_VAR 0 5
22764: PPUSH
22765: CALL 19277 0 1
22769: NOT
22770: IFFALSE 22803
// begin result := Join ( result , [ i , tmp ] ) ;
22772: LD_ADDR_VAR 0 5
22776: PUSH
22777: LD_VAR 0 5
22781: PPUSH
22782: LD_VAR 0 6
22786: PUSH
22787: LD_VAR 0 8
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL 55253 0 2
22800: ST_TO_ADDR
// continue ;
22801: GO 22724
// end ; if result [ result ] [ 2 ] <= tmp then
22803: LD_VAR 0 5
22807: PUSH
22808: LD_VAR 0 5
22812: ARRAY
22813: PUSH
22814: LD_INT 2
22816: ARRAY
22817: PUSH
22818: LD_VAR 0 8
22822: LESSEQUAL
22823: IFFALSE 22856
// result := Join ( result , [ i , tmp ] ) else
22825: LD_ADDR_VAR 0 5
22829: PUSH
22830: LD_VAR 0 5
22834: PPUSH
22835: LD_VAR 0 6
22839: PUSH
22840: LD_VAR 0 8
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL 55253 0 2
22853: ST_TO_ADDR
22854: GO 22941
// begin for j := 1 to Count ( result ) do
22856: LD_ADDR_VAR 0 7
22860: PUSH
22861: DOUBLE
22862: LD_INT 1
22864: DEC
22865: ST_TO_ADDR
22866: LD_VAR 0 5
22870: PPUSH
22871: CALL 19277 0 1
22875: PUSH
22876: FOR_TO
22877: IFFALSE 22939
// begin if tmp < result [ j ] [ 2 ] then
22879: LD_VAR 0 8
22883: PUSH
22884: LD_VAR 0 5
22888: PUSH
22889: LD_VAR 0 7
22893: ARRAY
22894: PUSH
22895: LD_INT 2
22897: ARRAY
22898: LESS
22899: IFFALSE 22937
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22901: LD_ADDR_VAR 0 5
22905: PUSH
22906: LD_VAR 0 5
22910: PPUSH
22911: LD_VAR 0 7
22915: PPUSH
22916: LD_VAR 0 6
22920: PUSH
22921: LD_VAR 0 8
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 2
22934: ST_TO_ADDR
// break ;
22935: GO 22939
// end ; end ;
22937: GO 22876
22939: POP
22940: POP
// end ; end ;
22941: GO 22724
22943: POP
22944: POP
// if result and not asc then
22945: LD_VAR 0 5
22949: IFFALSE 22958
22951: PUSH
22952: LD_VAR 0 3
22956: NOT
22957: AND
22958: IFFALSE 22975
// result := ReverseArray ( result ) ;
22960: LD_ADDR_VAR 0 5
22964: PUSH
22965: LD_VAR 0 5
22969: PPUSH
22970: CALL 50333 0 1
22974: ST_TO_ADDR
// tmp := [ ] ;
22975: LD_ADDR_VAR 0 8
22979: PUSH
22980: EMPTY
22981: ST_TO_ADDR
// if mode then
22982: LD_VAR 0 4
22986: IFFALSE 23050
// begin for i := 1 to result do
22988: LD_ADDR_VAR 0 6
22992: PUSH
22993: DOUBLE
22994: LD_INT 1
22996: DEC
22997: ST_TO_ADDR
22998: LD_VAR 0 5
23002: PUSH
23003: FOR_TO
23004: IFFALSE 23038
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23006: LD_ADDR_VAR 0 8
23010: PUSH
23011: LD_VAR 0 8
23015: PPUSH
23016: LD_VAR 0 5
23020: PUSH
23021: LD_VAR 0 6
23025: ARRAY
23026: PUSH
23027: LD_INT 1
23029: ARRAY
23030: PPUSH
23031: CALL 55253 0 2
23035: ST_TO_ADDR
23036: GO 23003
23038: POP
23039: POP
// result := tmp ;
23040: LD_ADDR_VAR 0 5
23044: PUSH
23045: LD_VAR 0 8
23049: ST_TO_ADDR
// end ; end ;
23050: LD_VAR 0 5
23054: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
// if not list then
23061: LD_VAR 0 3
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23460
// result := [ ] ;
23070: LD_ADDR_VAR 0 6
23074: PUSH
23075: EMPTY
23076: ST_TO_ADDR
// for i in list do
23077: LD_ADDR_VAR 0 7
23081: PUSH
23082: LD_VAR 0 3
23086: PUSH
23087: FOR_IN
23088: IFFALSE 23290
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23090: LD_ADDR_VAR 0 9
23094: PUSH
23095: LD_VAR 0 7
23099: PPUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL_OW 297
23114: ST_TO_ADDR
// if not result then
23115: LD_VAR 0 6
23119: NOT
23120: IFFALSE 23146
// result := [ [ i , tmp ] ] else
23122: LD_ADDR_VAR 0 6
23126: PUSH
23127: LD_VAR 0 7
23131: PUSH
23132: LD_VAR 0 9
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: ST_TO_ADDR
23144: GO 23288
// begin if result [ result ] [ 2 ] <= tmp then
23146: LD_VAR 0 6
23150: PUSH
23151: LD_VAR 0 6
23155: ARRAY
23156: PUSH
23157: LD_INT 2
23159: ARRAY
23160: PUSH
23161: LD_VAR 0 9
23165: LESSEQUAL
23166: IFFALSE 23208
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23168: LD_ADDR_VAR 0 6
23172: PUSH
23173: LD_VAR 0 6
23177: PPUSH
23178: LD_VAR 0 6
23182: PUSH
23183: LD_INT 1
23185: PLUS
23186: PPUSH
23187: LD_VAR 0 7
23191: PUSH
23192: LD_VAR 0 9
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PPUSH
23201: CALL_OW 2
23205: ST_TO_ADDR
23206: GO 23288
// for j := 1 to result do
23208: LD_ADDR_VAR 0 8
23212: PUSH
23213: DOUBLE
23214: LD_INT 1
23216: DEC
23217: ST_TO_ADDR
23218: LD_VAR 0 6
23222: PUSH
23223: FOR_TO
23224: IFFALSE 23286
// begin if tmp < result [ j ] [ 2 ] then
23226: LD_VAR 0 9
23230: PUSH
23231: LD_VAR 0 6
23235: PUSH
23236: LD_VAR 0 8
23240: ARRAY
23241: PUSH
23242: LD_INT 2
23244: ARRAY
23245: LESS
23246: IFFALSE 23284
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 6
23257: PPUSH
23258: LD_VAR 0 8
23262: PPUSH
23263: LD_VAR 0 7
23267: PUSH
23268: LD_VAR 0 9
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PPUSH
23277: CALL_OW 2
23281: ST_TO_ADDR
// break ;
23282: GO 23286
// end ; end ;
23284: GO 23223
23286: POP
23287: POP
// end ; end ;
23288: GO 23087
23290: POP
23291: POP
// if result and not asc then
23292: LD_VAR 0 6
23296: IFFALSE 23305
23298: PUSH
23299: LD_VAR 0 4
23303: NOT
23304: AND
23305: IFFALSE 23380
// begin tmp := result ;
23307: LD_ADDR_VAR 0 9
23311: PUSH
23312: LD_VAR 0 6
23316: ST_TO_ADDR
// for i = tmp downto 1 do
23317: LD_ADDR_VAR 0 7
23321: PUSH
23322: DOUBLE
23323: LD_VAR 0 9
23327: INC
23328: ST_TO_ADDR
23329: LD_INT 1
23331: PUSH
23332: FOR_DOWNTO
23333: IFFALSE 23378
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23335: LD_ADDR_VAR 0 6
23339: PUSH
23340: LD_VAR 0 6
23344: PPUSH
23345: LD_VAR 0 9
23349: PUSH
23350: LD_VAR 0 7
23354: MINUS
23355: PUSH
23356: LD_INT 1
23358: PLUS
23359: PPUSH
23360: LD_VAR 0 9
23364: PUSH
23365: LD_VAR 0 7
23369: ARRAY
23370: PPUSH
23371: CALL_OW 1
23375: ST_TO_ADDR
23376: GO 23332
23378: POP
23379: POP
// end ; tmp := [ ] ;
23380: LD_ADDR_VAR 0 9
23384: PUSH
23385: EMPTY
23386: ST_TO_ADDR
// if mode then
23387: LD_VAR 0 5
23391: IFFALSE 23460
// begin for i = 1 to result do
23393: LD_ADDR_VAR 0 7
23397: PUSH
23398: DOUBLE
23399: LD_INT 1
23401: DEC
23402: ST_TO_ADDR
23403: LD_VAR 0 6
23407: PUSH
23408: FOR_TO
23409: IFFALSE 23448
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23411: LD_ADDR_VAR 0 9
23415: PUSH
23416: LD_VAR 0 9
23420: PPUSH
23421: LD_VAR 0 7
23425: PPUSH
23426: LD_VAR 0 6
23430: PUSH
23431: LD_VAR 0 7
23435: ARRAY
23436: PUSH
23437: LD_INT 1
23439: ARRAY
23440: PPUSH
23441: CALL_OW 1
23445: ST_TO_ADDR
23446: GO 23408
23448: POP
23449: POP
// result := tmp ;
23450: LD_ADDR_VAR 0 6
23454: PUSH
23455: LD_VAR 0 9
23459: ST_TO_ADDR
// end ; end ;
23460: LD_VAR 0 6
23464: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23465: LD_INT 0
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23473: LD_ADDR_VAR 0 5
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
// if not x or not y then
23495: LD_VAR 0 2
23499: NOT
23500: IFTRUE 23509
23502: PUSH
23503: LD_VAR 0 3
23507: NOT
23508: OR
23509: IFFALSE 23513
// exit ;
23511: GO 25169
// if not range then
23513: LD_VAR 0 4
23517: NOT
23518: IFFALSE 23528
// range := 10 ;
23520: LD_ADDR_VAR 0 4
23524: PUSH
23525: LD_INT 10
23527: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23528: LD_ADDR_VAR 0 8
23532: PUSH
23533: LD_INT 81
23535: PUSH
23536: LD_VAR 0 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 92
23547: PUSH
23548: LD_VAR 0 2
23552: PUSH
23553: LD_VAR 0 3
23557: PUSH
23558: LD_VAR 0 4
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 3
23571: PUSH
23572: LD_INT 21
23574: PUSH
23575: LD_INT 3
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: ST_TO_ADDR
// if not tmp then
23596: LD_VAR 0 8
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 25169
// for i in tmp do
23605: LD_ADDR_VAR 0 6
23609: PUSH
23610: LD_VAR 0 8
23614: PUSH
23615: FOR_IN
23616: IFFALSE 25144
// begin points := [ 0 , 0 , 0 ] ;
23618: LD_ADDR_VAR 0 9
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: ST_TO_ADDR
// bpoints := 1 ;
23637: LD_ADDR_VAR 0 10
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23645: LD_VAR 0 6
23649: PPUSH
23650: CALL_OW 247
23654: PUSH
23655: LD_INT 1
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 24245
23663: POP
// begin if GetClass ( i ) = 1 then
23664: LD_VAR 0 6
23668: PPUSH
23669: CALL_OW 257
23673: PUSH
23674: LD_INT 1
23676: EQUAL
23677: IFFALSE 23698
// points := [ 10 , 5 , 3 ] ;
23679: LD_ADDR_VAR 0 9
23683: PUSH
23684: LD_INT 10
23686: PUSH
23687: LD_INT 5
23689: PUSH
23690: LD_INT 3
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23698: LD_VAR 0 6
23702: PPUSH
23703: CALL_OW 257
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: LD_INT 3
23713: PUSH
23714: LD_INT 4
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: IN
23722: IFFALSE 23743
// points := [ 3 , 2 , 1 ] ;
23724: LD_ADDR_VAR 0 9
23728: PUSH
23729: LD_INT 3
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23743: LD_VAR 0 6
23747: PPUSH
23748: CALL_OW 257
23752: PUSH
23753: LD_INT 5
23755: EQUAL
23756: IFFALSE 23777
// points := [ 130 , 5 , 2 ] ;
23758: LD_ADDR_VAR 0 9
23762: PUSH
23763: LD_INT 130
23765: PUSH
23766: LD_INT 5
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23777: LD_VAR 0 6
23781: PPUSH
23782: CALL_OW 257
23786: PUSH
23787: LD_INT 8
23789: EQUAL
23790: IFFALSE 23811
// points := [ 35 , 35 , 30 ] ;
23792: LD_ADDR_VAR 0 9
23796: PUSH
23797: LD_INT 35
23799: PUSH
23800: LD_INT 35
23802: PUSH
23803: LD_INT 30
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23811: LD_VAR 0 6
23815: PPUSH
23816: CALL_OW 257
23820: PUSH
23821: LD_INT 9
23823: EQUAL
23824: IFFALSE 23845
// points := [ 20 , 55 , 40 ] ;
23826: LD_ADDR_VAR 0 9
23830: PUSH
23831: LD_INT 20
23833: PUSH
23834: LD_INT 55
23836: PUSH
23837: LD_INT 40
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23845: LD_VAR 0 6
23849: PPUSH
23850: CALL_OW 257
23854: PUSH
23855: LD_INT 12
23857: PUSH
23858: LD_INT 16
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: IN
23865: IFFALSE 23886
// points := [ 5 , 3 , 2 ] ;
23867: LD_ADDR_VAR 0 9
23871: PUSH
23872: LD_INT 5
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23886: LD_VAR 0 6
23890: PPUSH
23891: CALL_OW 257
23895: PUSH
23896: LD_INT 17
23898: EQUAL
23899: IFFALSE 23920
// points := [ 100 , 50 , 75 ] ;
23901: LD_ADDR_VAR 0 9
23905: PUSH
23906: LD_INT 100
23908: PUSH
23909: LD_INT 50
23911: PUSH
23912: LD_INT 75
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23920: LD_VAR 0 6
23924: PPUSH
23925: CALL_OW 257
23929: PUSH
23930: LD_INT 15
23932: EQUAL
23933: IFFALSE 23954
// points := [ 10 , 5 , 3 ] ;
23935: LD_ADDR_VAR 0 9
23939: PUSH
23940: LD_INT 10
23942: PUSH
23943: LD_INT 5
23945: PUSH
23946: LD_INT 3
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: LIST
23953: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23954: LD_VAR 0 6
23958: PPUSH
23959: CALL_OW 257
23963: PUSH
23964: LD_INT 14
23966: EQUAL
23967: IFFALSE 23988
// points := [ 10 , 0 , 0 ] ;
23969: LD_ADDR_VAR 0 9
23973: PUSH
23974: LD_INT 10
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23988: LD_VAR 0 6
23992: PPUSH
23993: CALL_OW 257
23997: PUSH
23998: LD_INT 11
24000: EQUAL
24001: IFFALSE 24022
// points := [ 30 , 10 , 5 ] ;
24003: LD_ADDR_VAR 0 9
24007: PUSH
24008: LD_INT 30
24010: PUSH
24011: LD_INT 10
24013: PUSH
24014: LD_INT 5
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24022: LD_VAR 0 1
24026: PPUSH
24027: LD_INT 5
24029: PPUSH
24030: CALL_OW 321
24034: PUSH
24035: LD_INT 2
24037: EQUAL
24038: IFFALSE 24055
// bpoints := bpoints * 1.8 ;
24040: LD_ADDR_VAR 0 10
24044: PUSH
24045: LD_VAR 0 10
24049: PUSH
24050: LD_REAL  1.80000000000000E+0000
24053: MUL
24054: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24055: LD_VAR 0 6
24059: PPUSH
24060: CALL_OW 257
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 4
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: IN
24083: IFFALSE 24103
24085: PUSH
24086: LD_VAR 0 1
24090: PPUSH
24091: LD_INT 51
24093: PPUSH
24094: CALL_OW 321
24098: PUSH
24099: LD_INT 2
24101: EQUAL
24102: AND
24103: IFFALSE 24120
// bpoints := bpoints * 1.2 ;
24105: LD_ADDR_VAR 0 10
24109: PUSH
24110: LD_VAR 0 10
24114: PUSH
24115: LD_REAL  1.20000000000000E+0000
24118: MUL
24119: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24120: LD_VAR 0 6
24124: PPUSH
24125: CALL_OW 257
24129: PUSH
24130: LD_INT 5
24132: PUSH
24133: LD_INT 7
24135: PUSH
24136: LD_INT 9
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: IN
24144: IFFALSE 24164
24146: PUSH
24147: LD_VAR 0 1
24151: PPUSH
24152: LD_INT 52
24154: PPUSH
24155: CALL_OW 321
24159: PUSH
24160: LD_INT 2
24162: EQUAL
24163: AND
24164: IFFALSE 24181
// bpoints := bpoints * 1.5 ;
24166: LD_ADDR_VAR 0 10
24170: PUSH
24171: LD_VAR 0 10
24175: PUSH
24176: LD_REAL  1.50000000000000E+0000
24179: MUL
24180: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 66
24188: PPUSH
24189: CALL_OW 321
24193: PUSH
24194: LD_INT 2
24196: EQUAL
24197: IFFALSE 24214
// bpoints := bpoints * 1.1 ;
24199: LD_ADDR_VAR 0 10
24203: PUSH
24204: LD_VAR 0 10
24208: PUSH
24209: LD_REAL  1.10000000000000E+0000
24212: MUL
24213: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24214: LD_ADDR_VAR 0 10
24218: PUSH
24219: LD_VAR 0 10
24223: PUSH
24224: LD_VAR 0 6
24228: PPUSH
24229: LD_INT 1
24231: PPUSH
24232: CALL_OW 259
24236: PUSH
24237: LD_REAL  1.15000000000000E+0000
24240: MUL
24241: MUL
24242: ST_TO_ADDR
// end ; unit_vehicle :
24243: GO 25073
24245: LD_INT 2
24247: DOUBLE
24248: EQUAL
24249: IFTRUE 24253
24251: GO 25061
24253: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24254: LD_VAR 0 6
24258: PPUSH
24259: CALL_OW 264
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: LD_INT 42
24269: PUSH
24270: LD_INT 24
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: IN
24278: IFFALSE 24299
// points := [ 25 , 5 , 3 ] ;
24280: LD_ADDR_VAR 0 9
24284: PUSH
24285: LD_INT 25
24287: PUSH
24288: LD_INT 5
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24299: LD_VAR 0 6
24303: PPUSH
24304: CALL_OW 264
24308: PUSH
24309: LD_INT 4
24311: PUSH
24312: LD_INT 43
24314: PUSH
24315: LD_INT 25
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: IN
24323: IFFALSE 24344
// points := [ 40 , 15 , 5 ] ;
24325: LD_ADDR_VAR 0 9
24329: PUSH
24330: LD_INT 40
24332: PUSH
24333: LD_INT 15
24335: PUSH
24336: LD_INT 5
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24344: LD_VAR 0 6
24348: PPUSH
24349: CALL_OW 264
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: LD_INT 23
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: IN
24364: IFFALSE 24385
// points := [ 7 , 25 , 8 ] ;
24366: LD_ADDR_VAR 0 9
24370: PUSH
24371: LD_INT 7
24373: PUSH
24374: LD_INT 25
24376: PUSH
24377: LD_INT 8
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24385: LD_VAR 0 6
24389: PPUSH
24390: CALL_OW 264
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: LD_INT 27
24400: PUSH
24401: LD_INT 44
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: IN
24409: IFFALSE 24430
// points := [ 14 , 50 , 16 ] ;
24411: LD_ADDR_VAR 0 9
24415: PUSH
24416: LD_INT 14
24418: PUSH
24419: LD_INT 50
24421: PUSH
24422: LD_INT 16
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24430: LD_VAR 0 6
24434: PPUSH
24435: CALL_OW 264
24439: PUSH
24440: LD_INT 6
24442: PUSH
24443: LD_INT 46
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: IN
24450: IFFALSE 24471
// points := [ 32 , 120 , 70 ] ;
24452: LD_ADDR_VAR 0 9
24456: PUSH
24457: LD_INT 32
24459: PUSH
24460: LD_INT 120
24462: PUSH
24463: LD_INT 70
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24471: LD_VAR 0 6
24475: PPUSH
24476: CALL_OW 264
24480: PUSH
24481: LD_INT 7
24483: PUSH
24484: LD_INT 28
24486: PUSH
24487: LD_INT 45
24489: PUSH
24490: LD_INT 92
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: IN
24499: IFFALSE 24520
// points := [ 35 , 20 , 45 ] ;
24501: LD_ADDR_VAR 0 9
24505: PUSH
24506: LD_INT 35
24508: PUSH
24509: LD_INT 20
24511: PUSH
24512: LD_INT 45
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24520: LD_VAR 0 6
24524: PPUSH
24525: CALL_OW 264
24529: PUSH
24530: LD_INT 47
24532: PUSH
24533: EMPTY
24534: LIST
24535: IN
24536: IFFALSE 24557
// points := [ 67 , 45 , 75 ] ;
24538: LD_ADDR_VAR 0 9
24542: PUSH
24543: LD_INT 67
24545: PUSH
24546: LD_INT 45
24548: PUSH
24549: LD_INT 75
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24557: LD_VAR 0 6
24561: PPUSH
24562: CALL_OW 264
24566: PUSH
24567: LD_INT 26
24569: PUSH
24570: EMPTY
24571: LIST
24572: IN
24573: IFFALSE 24594
// points := [ 120 , 30 , 80 ] ;
24575: LD_ADDR_VAR 0 9
24579: PUSH
24580: LD_INT 120
24582: PUSH
24583: LD_INT 30
24585: PUSH
24586: LD_INT 80
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24594: LD_VAR 0 6
24598: PPUSH
24599: CALL_OW 264
24603: PUSH
24604: LD_INT 22
24606: PUSH
24607: EMPTY
24608: LIST
24609: IN
24610: IFFALSE 24631
// points := [ 40 , 1 , 1 ] ;
24612: LD_ADDR_VAR 0 9
24616: PUSH
24617: LD_INT 40
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24631: LD_VAR 0 6
24635: PPUSH
24636: CALL_OW 264
24640: PUSH
24641: LD_INT 29
24643: PUSH
24644: EMPTY
24645: LIST
24646: IN
24647: IFFALSE 24668
// points := [ 70 , 200 , 400 ] ;
24649: LD_ADDR_VAR 0 9
24653: PUSH
24654: LD_INT 70
24656: PUSH
24657: LD_INT 200
24659: PUSH
24660: LD_INT 400
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24668: LD_VAR 0 6
24672: PPUSH
24673: CALL_OW 264
24677: PUSH
24678: LD_INT 14
24680: PUSH
24681: LD_INT 53
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: IN
24688: IFFALSE 24709
// points := [ 40 , 10 , 20 ] ;
24690: LD_ADDR_VAR 0 9
24694: PUSH
24695: LD_INT 40
24697: PUSH
24698: LD_INT 10
24700: PUSH
24701: LD_INT 20
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24709: LD_VAR 0 6
24713: PPUSH
24714: CALL_OW 264
24718: PUSH
24719: LD_INT 9
24721: PUSH
24722: EMPTY
24723: LIST
24724: IN
24725: IFFALSE 24746
// points := [ 5 , 70 , 20 ] ;
24727: LD_ADDR_VAR 0 9
24731: PUSH
24732: LD_INT 5
24734: PUSH
24735: LD_INT 70
24737: PUSH
24738: LD_INT 20
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24746: LD_VAR 0 6
24750: PPUSH
24751: CALL_OW 264
24755: PUSH
24756: LD_INT 10
24758: PUSH
24759: EMPTY
24760: LIST
24761: IN
24762: IFFALSE 24783
// points := [ 35 , 110 , 70 ] ;
24764: LD_ADDR_VAR 0 9
24768: PUSH
24769: LD_INT 35
24771: PUSH
24772: LD_INT 110
24774: PUSH
24775: LD_INT 70
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24783: LD_VAR 0 6
24787: PPUSH
24788: CALL_OW 265
24792: PUSH
24793: LD_INT 25
24795: EQUAL
24796: IFFALSE 24817
// points := [ 80 , 65 , 100 ] ;
24798: LD_ADDR_VAR 0 9
24802: PUSH
24803: LD_INT 80
24805: PUSH
24806: LD_INT 65
24808: PUSH
24809: LD_INT 100
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24817: LD_VAR 0 6
24821: PPUSH
24822: CALL_OW 263
24826: PUSH
24827: LD_INT 1
24829: EQUAL
24830: IFFALSE 24865
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24832: LD_ADDR_VAR 0 10
24836: PUSH
24837: LD_VAR 0 10
24841: PUSH
24842: LD_VAR 0 6
24846: PPUSH
24847: CALL_OW 311
24851: PPUSH
24852: LD_INT 3
24854: PPUSH
24855: CALL_OW 259
24859: PUSH
24860: LD_INT 4
24862: MUL
24863: MUL
24864: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24865: LD_VAR 0 6
24869: PPUSH
24870: CALL_OW 263
24874: PUSH
24875: LD_INT 2
24877: EQUAL
24878: IFFALSE 24929
// begin j := IsControledBy ( i ) ;
24880: LD_ADDR_VAR 0 7
24884: PUSH
24885: LD_VAR 0 6
24889: PPUSH
24890: CALL_OW 312
24894: ST_TO_ADDR
// if j then
24895: LD_VAR 0 7
24899: IFFALSE 24929
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24901: LD_ADDR_VAR 0 10
24905: PUSH
24906: LD_VAR 0 10
24910: PUSH
24911: LD_VAR 0 7
24915: PPUSH
24916: LD_INT 3
24918: PPUSH
24919: CALL_OW 259
24923: PUSH
24924: LD_INT 3
24926: MUL
24927: MUL
24928: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24929: LD_VAR 0 6
24933: PPUSH
24934: CALL_OW 264
24938: PUSH
24939: LD_INT 5
24941: PUSH
24942: LD_INT 6
24944: PUSH
24945: LD_INT 46
24947: PUSH
24948: LD_INT 44
24950: PUSH
24951: LD_INT 47
24953: PUSH
24954: LD_INT 45
24956: PUSH
24957: LD_INT 28
24959: PUSH
24960: LD_INT 7
24962: PUSH
24963: LD_INT 27
24965: PUSH
24966: LD_INT 29
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: IN
24981: IFFALSE 25001
24983: PUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: LD_INT 52
24991: PPUSH
24992: CALL_OW 321
24996: PUSH
24997: LD_INT 2
24999: EQUAL
25000: AND
25001: IFFALSE 25018
// bpoints := bpoints * 1.2 ;
25003: LD_ADDR_VAR 0 10
25007: PUSH
25008: LD_VAR 0 10
25012: PUSH
25013: LD_REAL  1.20000000000000E+0000
25016: MUL
25017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25018: LD_VAR 0 6
25022: PPUSH
25023: CALL_OW 264
25027: PUSH
25028: LD_INT 6
25030: PUSH
25031: LD_INT 46
25033: PUSH
25034: LD_INT 47
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: IN
25042: IFFALSE 25059
// bpoints := bpoints * 1.2 ;
25044: LD_ADDR_VAR 0 10
25048: PUSH
25049: LD_VAR 0 10
25053: PUSH
25054: LD_REAL  1.20000000000000E+0000
25057: MUL
25058: ST_TO_ADDR
// end ; unit_building :
25059: GO 25073
25061: LD_INT 3
25063: DOUBLE
25064: EQUAL
25065: IFTRUE 25069
25067: GO 25072
25069: POP
// ; end ;
25070: GO 25073
25072: POP
// for j = 1 to 3 do
25073: LD_ADDR_VAR 0 7
25077: PUSH
25078: DOUBLE
25079: LD_INT 1
25081: DEC
25082: ST_TO_ADDR
25083: LD_INT 3
25085: PUSH
25086: FOR_TO
25087: IFFALSE 25140
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25089: LD_ADDR_VAR 0 5
25093: PUSH
25094: LD_VAR 0 5
25098: PPUSH
25099: LD_VAR 0 7
25103: PPUSH
25104: LD_VAR 0 5
25108: PUSH
25109: LD_VAR 0 7
25113: ARRAY
25114: PUSH
25115: LD_VAR 0 9
25119: PUSH
25120: LD_VAR 0 7
25124: ARRAY
25125: PUSH
25126: LD_VAR 0 10
25130: MUL
25131: PLUS
25132: PPUSH
25133: CALL_OW 1
25137: ST_TO_ADDR
25138: GO 25086
25140: POP
25141: POP
// end ;
25142: GO 23615
25144: POP
25145: POP
// result := Replace ( result , 4 , tmp ) ;
25146: LD_ADDR_VAR 0 5
25150: PUSH
25151: LD_VAR 0 5
25155: PPUSH
25156: LD_INT 4
25158: PPUSH
25159: LD_VAR 0 8
25163: PPUSH
25164: CALL_OW 1
25168: ST_TO_ADDR
// end ;
25169: LD_VAR 0 5
25173: RET
// export function DangerAtRange ( unit , range ) ; begin
25174: LD_INT 0
25176: PPUSH
// if not unit then
25177: LD_VAR 0 1
25181: NOT
25182: IFFALSE 25186
// exit ;
25184: GO 25231
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25186: LD_ADDR_VAR 0 3
25190: PUSH
25191: LD_VAR 0 1
25195: PPUSH
25196: CALL_OW 255
25200: PPUSH
25201: LD_VAR 0 1
25205: PPUSH
25206: CALL_OW 250
25210: PPUSH
25211: LD_VAR 0 1
25215: PPUSH
25216: CALL_OW 251
25220: PPUSH
25221: LD_VAR 0 2
25225: PPUSH
25226: CALL 23465 0 4
25230: ST_TO_ADDR
// end ;
25231: LD_VAR 0 3
25235: RET
// export function DangerInArea ( side , area ) ; begin
25236: LD_INT 0
25238: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_INT 81
25251: PUSH
25252: LD_VAR 0 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PPUSH
25261: CALL_OW 70
25265: ST_TO_ADDR
// end ;
25266: LD_VAR 0 3
25270: RET
// export function IsExtension ( b ) ; begin
25271: LD_INT 0
25273: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25274: LD_ADDR_VAR 0 2
25278: PUSH
25279: LD_VAR 0 1
25283: PUSH
25284: LD_INT 23
25286: PUSH
25287: LD_INT 20
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 17
25295: PUSH
25296: LD_INT 24
25298: PUSH
25299: LD_INT 21
25301: PUSH
25302: LD_INT 19
25304: PUSH
25305: LD_INT 16
25307: PUSH
25308: LD_INT 25
25310: PUSH
25311: LD_INT 18
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: IN
25326: ST_TO_ADDR
// end ;
25327: LD_VAR 0 2
25331: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25332: LD_INT 0
25334: PPUSH
25335: PPUSH
25336: PPUSH
// result := [ ] ;
25337: LD_ADDR_VAR 0 4
25341: PUSH
25342: EMPTY
25343: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25344: LD_ADDR_VAR 0 5
25348: PUSH
25349: LD_VAR 0 2
25353: PPUSH
25354: LD_INT 21
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PPUSH
25364: CALL_OW 70
25368: ST_TO_ADDR
// if not tmp then
25369: LD_VAR 0 5
25373: NOT
25374: IFFALSE 25378
// exit ;
25376: GO 25442
// if checkLink then
25378: LD_VAR 0 3
25382: IFFALSE 25432
// begin for i in tmp do
25384: LD_ADDR_VAR 0 6
25388: PUSH
25389: LD_VAR 0 5
25393: PUSH
25394: FOR_IN
25395: IFFALSE 25430
// if GetBase ( i ) <> base then
25397: LD_VAR 0 6
25401: PPUSH
25402: CALL_OW 274
25406: PUSH
25407: LD_VAR 0 1
25411: NONEQUAL
25412: IFFALSE 25428
// ComLinkToBase ( base , i ) ;
25414: LD_VAR 0 1
25418: PPUSH
25419: LD_VAR 0 6
25423: PPUSH
25424: CALL_OW 169
25428: GO 25394
25430: POP
25431: POP
// end ; result := tmp ;
25432: LD_ADDR_VAR 0 4
25436: PUSH
25437: LD_VAR 0 5
25441: ST_TO_ADDR
// end ;
25442: LD_VAR 0 4
25446: RET
// export function ComComplete ( units , b ) ; var i ; begin
25447: LD_INT 0
25449: PPUSH
25450: PPUSH
// if not units then
25451: LD_VAR 0 1
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25550
// for i in units do
25460: LD_ADDR_VAR 0 4
25464: PUSH
25465: LD_VAR 0 1
25469: PUSH
25470: FOR_IN
25471: IFFALSE 25548
// if BuildingStatus ( b ) = bs_build then
25473: LD_VAR 0 2
25477: PPUSH
25478: CALL_OW 461
25482: PUSH
25483: LD_INT 1
25485: EQUAL
25486: IFFALSE 25546
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25488: LD_VAR 0 4
25492: PPUSH
25493: LD_STRING h
25495: PUSH
25496: LD_VAR 0 2
25500: PPUSH
25501: CALL_OW 250
25505: PUSH
25506: LD_VAR 0 2
25510: PPUSH
25511: CALL_OW 251
25515: PUSH
25516: LD_VAR 0 2
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: PPUSH
25542: CALL_OW 446
25546: GO 25470
25548: POP
25549: POP
// end ;
25550: LD_VAR 0 3
25554: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25555: LD_INT 0
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25563: LD_VAR 0 1
25567: NOT
25568: IFTRUE 25585
25570: PUSH
25571: LD_VAR 0 1
25575: PPUSH
25576: CALL_OW 263
25580: PUSH
25581: LD_INT 2
25583: NONEQUAL
25584: OR
25585: IFFALSE 25589
// exit ;
25587: GO 25905
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25589: LD_ADDR_VAR 0 6
25593: PUSH
25594: LD_INT 22
25596: PUSH
25597: LD_VAR 0 1
25601: PPUSH
25602: CALL_OW 255
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: LD_INT 36
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 34
25626: PUSH
25627: LD_INT 31
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PPUSH
25643: CALL_OW 69
25647: ST_TO_ADDR
// if not tmp then
25648: LD_VAR 0 6
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 25905
// result := [ ] ;
25657: LD_ADDR_VAR 0 2
25661: PUSH
25662: EMPTY
25663: ST_TO_ADDR
// for i in tmp do
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_VAR 0 6
25673: PUSH
25674: FOR_IN
25675: IFFALSE 25746
// begin t := UnitsInside ( i ) ;
25677: LD_ADDR_VAR 0 4
25681: PUSH
25682: LD_VAR 0 3
25686: PPUSH
25687: CALL_OW 313
25691: ST_TO_ADDR
// if t then
25692: LD_VAR 0 4
25696: IFFALSE 25744
// for j in t do
25698: LD_ADDR_VAR 0 7
25702: PUSH
25703: LD_VAR 0 4
25707: PUSH
25708: FOR_IN
25709: IFFALSE 25742
// result := Replace ( result , result + 1 , j ) ;
25711: LD_ADDR_VAR 0 2
25715: PUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_VAR 0 2
25725: PUSH
25726: LD_INT 1
25728: PLUS
25729: PPUSH
25730: LD_VAR 0 7
25734: PPUSH
25735: CALL_OW 1
25739: ST_TO_ADDR
25740: GO 25708
25742: POP
25743: POP
// end ;
25744: GO 25674
25746: POP
25747: POP
// if not result then
25748: LD_VAR 0 2
25752: NOT
25753: IFFALSE 25757
// exit ;
25755: GO 25905
// mech := result [ 1 ] ;
25757: LD_ADDR_VAR 0 5
25761: PUSH
25762: LD_VAR 0 2
25766: PUSH
25767: LD_INT 1
25769: ARRAY
25770: ST_TO_ADDR
// if result > 1 then
25771: LD_VAR 0 2
25775: PUSH
25776: LD_INT 1
25778: GREATER
25779: IFFALSE 25891
// begin for i = 2 to result do
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: DOUBLE
25787: LD_INT 2
25789: DEC
25790: ST_TO_ADDR
25791: LD_VAR 0 2
25795: PUSH
25796: FOR_TO
25797: IFFALSE 25889
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25799: LD_ADDR_VAR 0 4
25803: PUSH
25804: LD_VAR 0 2
25808: PUSH
25809: LD_VAR 0 3
25813: ARRAY
25814: PPUSH
25815: LD_INT 3
25817: PPUSH
25818: CALL_OW 259
25822: PUSH
25823: LD_VAR 0 2
25827: PUSH
25828: LD_VAR 0 3
25832: ARRAY
25833: PPUSH
25834: CALL_OW 432
25838: MINUS
25839: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25840: LD_VAR 0 4
25844: PUSH
25845: LD_VAR 0 5
25849: PPUSH
25850: LD_INT 3
25852: PPUSH
25853: CALL_OW 259
25857: PUSH
25858: LD_VAR 0 5
25862: PPUSH
25863: CALL_OW 432
25867: MINUS
25868: GREATEREQUAL
25869: IFFALSE 25887
// mech := result [ i ] ;
25871: LD_ADDR_VAR 0 5
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: LD_VAR 0 3
25885: ARRAY
25886: ST_TO_ADDR
// end ;
25887: GO 25796
25889: POP
25890: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25891: LD_VAR 0 1
25895: PPUSH
25896: LD_VAR 0 5
25900: PPUSH
25901: CALL_OW 135
// end ;
25905: LD_VAR 0 2
25909: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
25915: PPUSH
25916: PPUSH
25917: PPUSH
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
// result := [ ] ;
25925: LD_ADDR_VAR 0 7
25929: PUSH
25930: EMPTY
25931: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25932: LD_VAR 0 1
25936: PPUSH
25937: CALL_OW 266
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: IN
25952: NOT
25953: IFFALSE 25957
// exit ;
25955: GO 27597
// if name then
25957: LD_VAR 0 3
25961: IFFALSE 25977
// SetBName ( base_dep , name ) ;
25963: LD_VAR 0 1
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 500
// base := GetBase ( base_dep ) ;
25977: LD_ADDR_VAR 0 15
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 274
25991: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25992: LD_ADDR_VAR 0 16
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 255
26006: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26007: LD_ADDR_VAR 0 17
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 248
26021: ST_TO_ADDR
// if sources then
26022: LD_VAR 0 5
26026: IFFALSE 26073
// for i = 1 to 3 do
26028: LD_ADDR_VAR 0 8
26032: PUSH
26033: DOUBLE
26034: LD_INT 1
26036: DEC
26037: ST_TO_ADDR
26038: LD_INT 3
26040: PUSH
26041: FOR_TO
26042: IFFALSE 26071
// AddResourceType ( base , i , sources [ i ] ) ;
26044: LD_VAR 0 15
26048: PPUSH
26049: LD_VAR 0 8
26053: PPUSH
26054: LD_VAR 0 5
26058: PUSH
26059: LD_VAR 0 8
26063: ARRAY
26064: PPUSH
26065: CALL_OW 276
26069: GO 26041
26071: POP
26072: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26073: LD_ADDR_VAR 0 18
26077: PUSH
26078: LD_VAR 0 15
26082: PPUSH
26083: LD_VAR 0 2
26087: PPUSH
26088: LD_INT 1
26090: PPUSH
26091: CALL 25332 0 3
26095: ST_TO_ADDR
// InitHc ;
26096: CALL_OW 19
// InitUc ;
26100: CALL_OW 18
// uc_side := side ;
26104: LD_ADDR_OWVAR 20
26108: PUSH
26109: LD_VAR 0 16
26113: ST_TO_ADDR
// uc_nation := nation ;
26114: LD_ADDR_OWVAR 21
26118: PUSH
26119: LD_VAR 0 17
26123: ST_TO_ADDR
// if buildings then
26124: LD_VAR 0 18
26128: IFFALSE 27456
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26130: LD_ADDR_VAR 0 19
26134: PUSH
26135: LD_VAR 0 18
26139: PPUSH
26140: LD_INT 2
26142: PUSH
26143: LD_INT 30
26145: PUSH
26146: LD_INT 29
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 30
26155: PUSH
26156: LD_INT 30
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: PPUSH
26168: CALL_OW 72
26172: ST_TO_ADDR
// if tmp then
26173: LD_VAR 0 19
26177: IFFALSE 26225
// for i in tmp do
26179: LD_ADDR_VAR 0 8
26183: PUSH
26184: LD_VAR 0 19
26188: PUSH
26189: FOR_IN
26190: IFFALSE 26223
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26192: LD_VAR 0 8
26196: PPUSH
26197: CALL_OW 250
26201: PPUSH
26202: LD_VAR 0 8
26206: PPUSH
26207: CALL_OW 251
26211: PPUSH
26212: LD_VAR 0 16
26216: PPUSH
26217: CALL_OW 441
26221: GO 26189
26223: POP
26224: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26225: LD_VAR 0 18
26229: PPUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 30
26235: PUSH
26236: LD_INT 32
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 30
26245: PUSH
26246: LD_INT 33
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 72
26262: IFFALSE 26350
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26264: LD_ADDR_VAR 0 8
26268: PUSH
26269: LD_VAR 0 18
26273: PPUSH
26274: LD_INT 2
26276: PUSH
26277: LD_INT 30
26279: PUSH
26280: LD_INT 32
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 30
26289: PUSH
26290: LD_INT 33
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 72
26306: PUSH
26307: FOR_IN
26308: IFFALSE 26348
// begin if not GetBWeapon ( i ) then
26310: LD_VAR 0 8
26314: PPUSH
26315: CALL_OW 269
26319: NOT
26320: IFFALSE 26346
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26322: LD_VAR 0 8
26326: PPUSH
26327: LD_VAR 0 8
26331: PPUSH
26332: LD_VAR 0 2
26336: PPUSH
26337: CALL 27602 0 2
26341: PPUSH
26342: CALL_OW 431
// end ;
26346: GO 26307
26348: POP
26349: POP
// end ; for i = 1 to personel do
26350: LD_ADDR_VAR 0 8
26354: PUSH
26355: DOUBLE
26356: LD_INT 1
26358: DEC
26359: ST_TO_ADDR
26360: LD_VAR 0 6
26364: PUSH
26365: FOR_TO
26366: IFFALSE 27436
// begin if i > 4 then
26368: LD_VAR 0 8
26372: PUSH
26373: LD_INT 4
26375: GREATER
26376: IFFALSE 26380
// break ;
26378: GO 27436
// case i of 1 :
26380: LD_VAR 0 8
26384: PUSH
26385: LD_INT 1
26387: DOUBLE
26388: EQUAL
26389: IFTRUE 26393
26391: GO 26473
26393: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26394: LD_ADDR_VAR 0 12
26398: PUSH
26399: LD_VAR 0 18
26403: PPUSH
26404: LD_INT 22
26406: PUSH
26407: LD_VAR 0 16
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 58
26418: PUSH
26419: EMPTY
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 30
26427: PUSH
26428: LD_INT 32
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 30
26437: PUSH
26438: LD_INT 4
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 30
26447: PUSH
26448: LD_INT 5
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: PPUSH
26466: CALL_OW 72
26470: ST_TO_ADDR
26471: GO 26695
26473: LD_INT 2
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26543
26481: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26482: LD_ADDR_VAR 0 12
26486: PUSH
26487: LD_VAR 0 18
26491: PPUSH
26492: LD_INT 22
26494: PUSH
26495: LD_VAR 0 16
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 30
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 30
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PPUSH
26536: CALL_OW 72
26540: ST_TO_ADDR
26541: GO 26695
26543: LD_INT 3
26545: DOUBLE
26546: EQUAL
26547: IFTRUE 26551
26549: GO 26613
26551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26552: LD_ADDR_VAR 0 12
26556: PUSH
26557: LD_VAR 0 18
26561: PPUSH
26562: LD_INT 22
26564: PUSH
26565: LD_VAR 0 16
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 30
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 30
26589: PUSH
26590: LD_INT 3
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 72
26610: ST_TO_ADDR
26611: GO 26695
26613: LD_INT 4
26615: DOUBLE
26616: EQUAL
26617: IFTRUE 26621
26619: GO 26694
26621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26622: LD_ADDR_VAR 0 12
26626: PUSH
26627: LD_VAR 0 18
26631: PPUSH
26632: LD_INT 22
26634: PUSH
26635: LD_VAR 0 16
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: LD_INT 30
26649: PUSH
26650: LD_INT 6
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 30
26659: PUSH
26660: LD_INT 7
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 30
26669: PUSH
26670: LD_INT 8
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PPUSH
26687: CALL_OW 72
26691: ST_TO_ADDR
26692: GO 26695
26694: POP
// if i = 1 then
26695: LD_VAR 0 8
26699: PUSH
26700: LD_INT 1
26702: EQUAL
26703: IFFALSE 26814
// begin tmp := [ ] ;
26705: LD_ADDR_VAR 0 19
26709: PUSH
26710: EMPTY
26711: ST_TO_ADDR
// for j in f do
26712: LD_ADDR_VAR 0 9
26716: PUSH
26717: LD_VAR 0 12
26721: PUSH
26722: FOR_IN
26723: IFFALSE 26796
// if GetBType ( j ) = b_bunker then
26725: LD_VAR 0 9
26729: PPUSH
26730: CALL_OW 266
26734: PUSH
26735: LD_INT 32
26737: EQUAL
26738: IFFALSE 26765
// tmp := Insert ( tmp , 1 , j ) else
26740: LD_ADDR_VAR 0 19
26744: PUSH
26745: LD_VAR 0 19
26749: PPUSH
26750: LD_INT 1
26752: PPUSH
26753: LD_VAR 0 9
26757: PPUSH
26758: CALL_OW 2
26762: ST_TO_ADDR
26763: GO 26794
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26765: LD_ADDR_VAR 0 19
26769: PUSH
26770: LD_VAR 0 19
26774: PPUSH
26775: LD_VAR 0 19
26779: PUSH
26780: LD_INT 1
26782: PLUS
26783: PPUSH
26784: LD_VAR 0 9
26788: PPUSH
26789: CALL_OW 2
26793: ST_TO_ADDR
26794: GO 26722
26796: POP
26797: POP
// if tmp then
26798: LD_VAR 0 19
26802: IFFALSE 26814
// f := tmp ;
26804: LD_ADDR_VAR 0 12
26808: PUSH
26809: LD_VAR 0 19
26813: ST_TO_ADDR
// end ; x := personel [ i ] ;
26814: LD_ADDR_VAR 0 13
26818: PUSH
26819: LD_VAR 0 6
26823: PUSH
26824: LD_VAR 0 8
26828: ARRAY
26829: ST_TO_ADDR
// if x = - 1 then
26830: LD_VAR 0 13
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: EQUAL
26839: IFFALSE 27050
// begin for j in f do
26841: LD_ADDR_VAR 0 9
26845: PUSH
26846: LD_VAR 0 12
26850: PUSH
26851: FOR_IN
26852: IFFALSE 27046
// repeat InitHc ;
26854: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26858: LD_VAR 0 9
26862: PPUSH
26863: CALL_OW 266
26867: PUSH
26868: LD_INT 5
26870: EQUAL
26871: IFFALSE 26941
// begin if UnitsInside ( j ) < 3 then
26873: LD_VAR 0 9
26877: PPUSH
26878: CALL_OW 313
26882: PUSH
26883: LD_INT 3
26885: LESS
26886: IFFALSE 26922
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26888: LD_INT 0
26890: PPUSH
26891: LD_INT 5
26893: PUSH
26894: LD_INT 8
26896: PUSH
26897: LD_INT 9
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: PUSH
26905: LD_VAR 0 17
26909: ARRAY
26910: PPUSH
26911: LD_VAR 0 4
26915: PPUSH
26916: CALL_OW 380
26920: GO 26939
// PrepareHuman ( false , i , skill ) ;
26922: LD_INT 0
26924: PPUSH
26925: LD_VAR 0 8
26929: PPUSH
26930: LD_VAR 0 4
26934: PPUSH
26935: CALL_OW 380
// end else
26939: GO 26958
// PrepareHuman ( false , i , skill ) ;
26941: LD_INT 0
26943: PPUSH
26944: LD_VAR 0 8
26948: PPUSH
26949: LD_VAR 0 4
26953: PPUSH
26954: CALL_OW 380
// un := CreateHuman ;
26958: LD_ADDR_VAR 0 14
26962: PUSH
26963: CALL_OW 44
26967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26968: LD_ADDR_VAR 0 7
26972: PUSH
26973: LD_VAR 0 7
26977: PPUSH
26978: LD_INT 1
26980: PPUSH
26981: LD_VAR 0 14
26985: PPUSH
26986: CALL_OW 2
26990: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26991: LD_VAR 0 14
26995: PPUSH
26996: LD_VAR 0 9
27000: PPUSH
27001: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27005: LD_VAR 0 9
27009: PPUSH
27010: CALL_OW 313
27014: PUSH
27015: LD_INT 6
27017: EQUAL
27018: IFTRUE 27042
27020: PUSH
27021: LD_VAR 0 9
27025: PPUSH
27026: CALL_OW 266
27030: PUSH
27031: LD_INT 32
27033: PUSH
27034: LD_INT 31
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: IN
27041: OR
27042: IFFALSE 26854
27044: GO 26851
27046: POP
27047: POP
// end else
27048: GO 27434
// for j = 1 to x do
27050: LD_ADDR_VAR 0 9
27054: PUSH
27055: DOUBLE
27056: LD_INT 1
27058: DEC
27059: ST_TO_ADDR
27060: LD_VAR 0 13
27064: PUSH
27065: FOR_TO
27066: IFFALSE 27432
// begin InitHc ;
27068: CALL_OW 19
// if not f then
27072: LD_VAR 0 12
27076: NOT
27077: IFFALSE 27166
// begin PrepareHuman ( false , i , skill ) ;
27079: LD_INT 0
27081: PPUSH
27082: LD_VAR 0 8
27086: PPUSH
27087: LD_VAR 0 4
27091: PPUSH
27092: CALL_OW 380
// un := CreateHuman ;
27096: LD_ADDR_VAR 0 14
27100: PUSH
27101: CALL_OW 44
27105: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27106: LD_ADDR_VAR 0 7
27110: PUSH
27111: LD_VAR 0 7
27115: PPUSH
27116: LD_INT 1
27118: PPUSH
27119: LD_VAR 0 14
27123: PPUSH
27124: CALL_OW 2
27128: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27129: LD_VAR 0 14
27133: PPUSH
27134: LD_VAR 0 1
27138: PPUSH
27139: CALL_OW 250
27143: PPUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 251
27153: PPUSH
27154: LD_INT 10
27156: PPUSH
27157: LD_INT 0
27159: PPUSH
27160: CALL_OW 50
// continue ;
27164: GO 27065
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27166: LD_VAR 0 12
27170: PUSH
27171: LD_INT 1
27173: ARRAY
27174: PPUSH
27175: CALL_OW 313
27179: IFFALSE 27207
27181: PUSH
27182: LD_VAR 0 12
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: PPUSH
27191: CALL_OW 266
27195: PUSH
27196: LD_INT 32
27198: PUSH
27199: LD_INT 31
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: IN
27206: AND
27207: IFTRUE 27228
27209: PUSH
27210: LD_VAR 0 12
27214: PUSH
27215: LD_INT 1
27217: ARRAY
27218: PPUSH
27219: CALL_OW 313
27223: PUSH
27224: LD_INT 6
27226: EQUAL
27227: OR
27228: IFFALSE 27248
// f := Delete ( f , 1 ) ;
27230: LD_ADDR_VAR 0 12
27234: PUSH
27235: LD_VAR 0 12
27239: PPUSH
27240: LD_INT 1
27242: PPUSH
27243: CALL_OW 3
27247: ST_TO_ADDR
// if not f then
27248: LD_VAR 0 12
27252: NOT
27253: IFFALSE 27271
// begin x := x + 2 ;
27255: LD_ADDR_VAR 0 13
27259: PUSH
27260: LD_VAR 0 13
27264: PUSH
27265: LD_INT 2
27267: PLUS
27268: ST_TO_ADDR
// continue ;
27269: GO 27065
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27271: LD_VAR 0 12
27275: PUSH
27276: LD_INT 1
27278: ARRAY
27279: PPUSH
27280: CALL_OW 266
27284: PUSH
27285: LD_INT 5
27287: EQUAL
27288: IFFALSE 27362
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27290: LD_VAR 0 12
27294: PUSH
27295: LD_INT 1
27297: ARRAY
27298: PPUSH
27299: CALL_OW 313
27303: PUSH
27304: LD_INT 3
27306: LESS
27307: IFFALSE 27343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27309: LD_INT 0
27311: PPUSH
27312: LD_INT 5
27314: PUSH
27315: LD_INT 8
27317: PUSH
27318: LD_INT 9
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: PUSH
27326: LD_VAR 0 17
27330: ARRAY
27331: PPUSH
27332: LD_VAR 0 4
27336: PPUSH
27337: CALL_OW 380
27341: GO 27360
// PrepareHuman ( false , i , skill ) ;
27343: LD_INT 0
27345: PPUSH
27346: LD_VAR 0 8
27350: PPUSH
27351: LD_VAR 0 4
27355: PPUSH
27356: CALL_OW 380
// end else
27360: GO 27379
// PrepareHuman ( false , i , skill ) ;
27362: LD_INT 0
27364: PPUSH
27365: LD_VAR 0 8
27369: PPUSH
27370: LD_VAR 0 4
27374: PPUSH
27375: CALL_OW 380
// un := CreateHuman ;
27379: LD_ADDR_VAR 0 14
27383: PUSH
27384: CALL_OW 44
27388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27389: LD_ADDR_VAR 0 7
27393: PUSH
27394: LD_VAR 0 7
27398: PPUSH
27399: LD_INT 1
27401: PPUSH
27402: LD_VAR 0 14
27406: PPUSH
27407: CALL_OW 2
27411: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27412: LD_VAR 0 14
27416: PPUSH
27417: LD_VAR 0 12
27421: PUSH
27422: LD_INT 1
27424: ARRAY
27425: PPUSH
27426: CALL_OW 52
// end ;
27430: GO 27065
27432: POP
27433: POP
// end ;
27434: GO 26365
27436: POP
27437: POP
// result := result ^ buildings ;
27438: LD_ADDR_VAR 0 7
27442: PUSH
27443: LD_VAR 0 7
27447: PUSH
27448: LD_VAR 0 18
27452: ADD
27453: ST_TO_ADDR
// end else
27454: GO 27597
// begin for i = 1 to personel do
27456: LD_ADDR_VAR 0 8
27460: PUSH
27461: DOUBLE
27462: LD_INT 1
27464: DEC
27465: ST_TO_ADDR
27466: LD_VAR 0 6
27470: PUSH
27471: FOR_TO
27472: IFFALSE 27595
// begin if i > 4 then
27474: LD_VAR 0 8
27478: PUSH
27479: LD_INT 4
27481: GREATER
27482: IFFALSE 27486
// break ;
27484: GO 27595
// x := personel [ i ] ;
27486: LD_ADDR_VAR 0 13
27490: PUSH
27491: LD_VAR 0 6
27495: PUSH
27496: LD_VAR 0 8
27500: ARRAY
27501: ST_TO_ADDR
// if x = - 1 then
27502: LD_VAR 0 13
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: EQUAL
27511: IFFALSE 27515
// continue ;
27513: GO 27471
// PrepareHuman ( false , i , skill ) ;
27515: LD_INT 0
27517: PPUSH
27518: LD_VAR 0 8
27522: PPUSH
27523: LD_VAR 0 4
27527: PPUSH
27528: CALL_OW 380
// un := CreateHuman ;
27532: LD_ADDR_VAR 0 14
27536: PUSH
27537: CALL_OW 44
27541: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27542: LD_VAR 0 14
27546: PPUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 250
27556: PPUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 251
27566: PPUSH
27567: LD_INT 10
27569: PPUSH
27570: LD_INT 0
27572: PPUSH
27573: CALL_OW 50
// result := result ^ un ;
27577: LD_ADDR_VAR 0 7
27581: PUSH
27582: LD_VAR 0 7
27586: PUSH
27587: LD_VAR 0 14
27591: ADD
27592: ST_TO_ADDR
// end ;
27593: GO 27471
27595: POP
27596: POP
// end ; end ;
27597: LD_VAR 0 7
27601: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27602: LD_INT 0
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
// result := false ;
27620: LD_ADDR_VAR 0 3
27624: PUSH
27625: LD_INT 0
27627: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27628: LD_VAR 0 1
27632: NOT
27633: IFTRUE 27658
27635: PUSH
27636: LD_VAR 0 1
27640: PPUSH
27641: CALL_OW 266
27645: PUSH
27646: LD_INT 32
27648: PUSH
27649: LD_INT 33
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: IN
27656: NOT
27657: OR
27658: IFFALSE 27662
// exit ;
27660: GO 28797
// nat := GetNation ( tower ) ;
27662: LD_ADDR_VAR 0 12
27666: PUSH
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL_OW 248
27676: ST_TO_ADDR
// side := GetSide ( tower ) ;
27677: LD_ADDR_VAR 0 16
27681: PUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 255
27691: ST_TO_ADDR
// x := GetX ( tower ) ;
27692: LD_ADDR_VAR 0 10
27696: PUSH
27697: LD_VAR 0 1
27701: PPUSH
27702: CALL_OW 250
27706: ST_TO_ADDR
// y := GetY ( tower ) ;
27707: LD_ADDR_VAR 0 11
27711: PUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL_OW 251
27721: ST_TO_ADDR
// if not x or not y then
27722: LD_VAR 0 10
27726: NOT
27727: IFTRUE 27736
27729: PUSH
27730: LD_VAR 0 11
27734: NOT
27735: OR
27736: IFFALSE 27740
// exit ;
27738: GO 28797
// weapon := 0 ;
27740: LD_ADDR_VAR 0 18
27744: PUSH
27745: LD_INT 0
27747: ST_TO_ADDR
// fac_list := [ ] ;
27748: LD_ADDR_VAR 0 17
27752: PUSH
27753: EMPTY
27754: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27755: LD_ADDR_VAR 0 6
27759: PUSH
27760: LD_VAR 0 1
27764: PPUSH
27765: CALL_OW 274
27769: PPUSH
27770: LD_VAR 0 2
27774: PPUSH
27775: LD_INT 0
27777: PPUSH
27778: CALL 25332 0 3
27782: PPUSH
27783: LD_INT 30
27785: PUSH
27786: LD_INT 3
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PPUSH
27793: CALL_OW 72
27797: ST_TO_ADDR
// if not factories then
27798: LD_VAR 0 6
27802: NOT
27803: IFFALSE 27807
// exit ;
27805: GO 28797
// for i in factories do
27807: LD_ADDR_VAR 0 8
27811: PUSH
27812: LD_VAR 0 6
27816: PUSH
27817: FOR_IN
27818: IFFALSE 27843
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27820: LD_ADDR_VAR 0 17
27824: PUSH
27825: LD_VAR 0 17
27829: PUSH
27830: LD_VAR 0 8
27834: PPUSH
27835: CALL_OW 478
27839: UNION
27840: ST_TO_ADDR
27841: GO 27817
27843: POP
27844: POP
// if not fac_list then
27845: LD_VAR 0 17
27849: NOT
27850: IFFALSE 27854
// exit ;
27852: GO 28797
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27854: LD_ADDR_VAR 0 5
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: LD_INT 9
27867: PUSH
27868: LD_INT 10
27870: PUSH
27871: LD_INT 6
27873: PUSH
27874: LD_INT 7
27876: PUSH
27877: LD_INT 11
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 27
27891: PUSH
27892: LD_INT 28
27894: PUSH
27895: LD_INT 26
27897: PUSH
27898: LD_INT 30
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 43
27909: PUSH
27910: LD_INT 44
27912: PUSH
27913: LD_INT 46
27915: PUSH
27916: LD_INT 45
27918: PUSH
27919: LD_INT 47
27921: PUSH
27922: LD_INT 49
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: LD_VAR 0 12
27942: ARRAY
27943: ST_TO_ADDR
// list := list isect fac_list ;
27944: LD_ADDR_VAR 0 5
27948: PUSH
27949: LD_VAR 0 5
27953: PUSH
27954: LD_VAR 0 17
27958: ISECT
27959: ST_TO_ADDR
// if not list then
27960: LD_VAR 0 5
27964: NOT
27965: IFFALSE 27969
// exit ;
27967: GO 28797
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27969: LD_VAR 0 12
27973: PUSH
27974: LD_INT 3
27976: EQUAL
27977: IFFALSE 27989
27979: PUSH
27980: LD_INT 49
27982: PUSH
27983: LD_VAR 0 5
27987: IN
27988: AND
27989: IFFALSE 28009
27991: PUSH
27992: LD_INT 31
27994: PPUSH
27995: LD_VAR 0 16
27999: PPUSH
28000: CALL_OW 321
28004: PUSH
28005: LD_INT 2
28007: EQUAL
28008: AND
28009: IFFALSE 28069
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28011: LD_INT 22
28013: PUSH
28014: LD_VAR 0 16
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 35
28025: PUSH
28026: LD_INT 49
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 91
28035: PUSH
28036: LD_VAR 0 1
28040: PUSH
28041: LD_INT 10
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: PPUSH
28054: CALL_OW 69
28058: NOT
28059: IFFALSE 28069
// weapon := ru_time_lapser ;
28061: LD_ADDR_VAR 0 18
28065: PUSH
28066: LD_INT 49
28068: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28069: LD_VAR 0 12
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: IN
28084: IFFALSE 28108
28086: PUSH
28087: LD_INT 11
28089: PUSH
28090: LD_VAR 0 5
28094: IN
28095: IFTRUE 28107
28097: PUSH
28098: LD_INT 30
28100: PUSH
28101: LD_VAR 0 5
28105: IN
28106: OR
28107: AND
28108: IFFALSE 28128
28110: PUSH
28111: LD_INT 6
28113: PPUSH
28114: LD_VAR 0 16
28118: PPUSH
28119: CALL_OW 321
28123: PUSH
28124: LD_INT 2
28126: EQUAL
28127: AND
28128: IFFALSE 28295
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28130: LD_INT 22
28132: PUSH
28133: LD_VAR 0 16
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 35
28147: PUSH
28148: LD_INT 11
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 35
28157: PUSH
28158: LD_INT 30
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 91
28172: PUSH
28173: LD_VAR 0 1
28177: PUSH
28178: LD_INT 18
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: LIST
28190: PPUSH
28191: CALL_OW 69
28195: NOT
28196: IFFALSE 28272
28198: PUSH
28199: LD_INT 22
28201: PUSH
28202: LD_VAR 0 16
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 30
28216: PUSH
28217: LD_INT 32
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 30
28226: PUSH
28227: LD_INT 33
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 91
28241: PUSH
28242: LD_VAR 0 1
28246: PUSH
28247: LD_INT 12
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: PUSH
28260: EMPTY
28261: LIST
28262: PPUSH
28263: CALL_OW 69
28267: PUSH
28268: LD_INT 2
28270: GREATER
28271: AND
28272: IFFALSE 28295
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28274: LD_ADDR_VAR 0 18
28278: PUSH
28279: LD_INT 11
28281: PUSH
28282: LD_INT 30
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_VAR 0 12
28293: ARRAY
28294: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28295: LD_VAR 0 18
28299: NOT
28300: IFFALSE 28320
28302: PUSH
28303: LD_INT 40
28305: PPUSH
28306: LD_VAR 0 16
28310: PPUSH
28311: CALL_OW 321
28315: PUSH
28316: LD_INT 2
28318: EQUAL
28319: AND
28320: IFFALSE 28356
28322: PUSH
28323: LD_INT 7
28325: PUSH
28326: LD_VAR 0 5
28330: IN
28331: IFTRUE 28343
28333: PUSH
28334: LD_INT 28
28336: PUSH
28337: LD_VAR 0 5
28341: IN
28342: OR
28343: IFTRUE 28355
28345: PUSH
28346: LD_INT 45
28348: PUSH
28349: LD_VAR 0 5
28353: IN
28354: OR
28355: AND
28356: IFFALSE 28610
// begin hex := GetHexInfo ( x , y ) ;
28358: LD_ADDR_VAR 0 4
28362: PUSH
28363: LD_VAR 0 10
28367: PPUSH
28368: LD_VAR 0 11
28372: PPUSH
28373: CALL_OW 546
28377: ST_TO_ADDR
// if hex [ 1 ] then
28378: LD_VAR 0 4
28382: PUSH
28383: LD_INT 1
28385: ARRAY
28386: IFFALSE 28390
// exit ;
28388: GO 28797
// height := hex [ 2 ] ;
28390: LD_ADDR_VAR 0 15
28394: PUSH
28395: LD_VAR 0 4
28399: PUSH
28400: LD_INT 2
28402: ARRAY
28403: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28404: LD_ADDR_VAR 0 14
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 3
28417: PUSH
28418: LD_INT 5
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// for i in tmp do
28427: LD_ADDR_VAR 0 8
28431: PUSH
28432: LD_VAR 0 14
28436: PUSH
28437: FOR_IN
28438: IFFALSE 28608
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28440: LD_ADDR_VAR 0 9
28444: PUSH
28445: LD_VAR 0 10
28449: PPUSH
28450: LD_VAR 0 8
28454: PPUSH
28455: LD_INT 5
28457: PPUSH
28458: CALL_OW 272
28462: PUSH
28463: LD_VAR 0 11
28467: PPUSH
28468: LD_VAR 0 8
28472: PPUSH
28473: LD_INT 5
28475: PPUSH
28476: CALL_OW 273
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28485: LD_VAR 0 9
28489: PUSH
28490: LD_INT 1
28492: ARRAY
28493: PPUSH
28494: LD_VAR 0 9
28498: PUSH
28499: LD_INT 2
28501: ARRAY
28502: PPUSH
28503: CALL_OW 488
28507: IFFALSE 28606
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28509: LD_ADDR_VAR 0 4
28513: PUSH
28514: LD_VAR 0 9
28518: PUSH
28519: LD_INT 1
28521: ARRAY
28522: PPUSH
28523: LD_VAR 0 9
28527: PUSH
28528: LD_INT 2
28530: ARRAY
28531: PPUSH
28532: CALL_OW 546
28536: ST_TO_ADDR
// if hex [ 1 ] then
28537: LD_VAR 0 4
28541: PUSH
28542: LD_INT 1
28544: ARRAY
28545: IFFALSE 28549
// continue ;
28547: GO 28437
// h := hex [ 2 ] ;
28549: LD_ADDR_VAR 0 13
28553: PUSH
28554: LD_VAR 0 4
28558: PUSH
28559: LD_INT 2
28561: ARRAY
28562: ST_TO_ADDR
// if h + 7 < height then
28563: LD_VAR 0 13
28567: PUSH
28568: LD_INT 7
28570: PLUS
28571: PUSH
28572: LD_VAR 0 15
28576: LESS
28577: IFFALSE 28606
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28579: LD_ADDR_VAR 0 18
28583: PUSH
28584: LD_INT 7
28586: PUSH
28587: LD_INT 28
28589: PUSH
28590: LD_INT 45
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: PUSH
28598: LD_VAR 0 12
28602: ARRAY
28603: ST_TO_ADDR
// break ;
28604: GO 28608
// end ; end ; end ;
28606: GO 28437
28608: POP
28609: POP
// end ; if not weapon then
28610: LD_VAR 0 18
28614: NOT
28615: IFFALSE 28675
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28617: LD_ADDR_VAR 0 5
28621: PUSH
28622: LD_VAR 0 5
28626: PUSH
28627: LD_INT 11
28629: PUSH
28630: LD_INT 30
28632: PUSH
28633: LD_INT 49
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: DIFF
28641: ST_TO_ADDR
// if not list then
28642: LD_VAR 0 5
28646: NOT
28647: IFFALSE 28651
// exit ;
28649: GO 28797
// weapon := list [ rand ( 1 , list ) ] ;
28651: LD_ADDR_VAR 0 18
28655: PUSH
28656: LD_VAR 0 5
28660: PUSH
28661: LD_INT 1
28663: PPUSH
28664: LD_VAR 0 5
28668: PPUSH
28669: CALL_OW 12
28673: ARRAY
28674: ST_TO_ADDR
// end ; if weapon then
28675: LD_VAR 0 18
28679: IFFALSE 28797
// begin tmp := CostOfWeapon ( weapon ) ;
28681: LD_ADDR_VAR 0 14
28685: PUSH
28686: LD_VAR 0 18
28690: PPUSH
28691: CALL_OW 451
28695: ST_TO_ADDR
// j := GetBase ( tower ) ;
28696: LD_ADDR_VAR 0 9
28700: PUSH
28701: LD_VAR 0 1
28705: PPUSH
28706: CALL_OW 274
28710: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28711: LD_VAR 0 9
28715: PPUSH
28716: LD_INT 1
28718: PPUSH
28719: CALL_OW 275
28723: PUSH
28724: LD_VAR 0 14
28728: PUSH
28729: LD_INT 1
28731: ARRAY
28732: GREATEREQUAL
28733: IFFALSE 28759
28735: PUSH
28736: LD_VAR 0 9
28740: PPUSH
28741: LD_INT 2
28743: PPUSH
28744: CALL_OW 275
28748: PUSH
28749: LD_VAR 0 14
28753: PUSH
28754: LD_INT 2
28756: ARRAY
28757: GREATEREQUAL
28758: AND
28759: IFFALSE 28785
28761: PUSH
28762: LD_VAR 0 9
28766: PPUSH
28767: LD_INT 3
28769: PPUSH
28770: CALL_OW 275
28774: PUSH
28775: LD_VAR 0 14
28779: PUSH
28780: LD_INT 3
28782: ARRAY
28783: GREATEREQUAL
28784: AND
28785: IFFALSE 28797
// result := weapon ;
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_VAR 0 18
28796: ST_TO_ADDR
// end ; end ;
28797: LD_VAR 0 3
28801: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
// result := true ;
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_INT 1
28813: ST_TO_ADDR
// if array1 = array2 then
28814: LD_VAR 0 1
28818: PUSH
28819: LD_VAR 0 2
28823: EQUAL
28824: IFFALSE 28884
// begin for i = 1 to array1 do
28826: LD_ADDR_VAR 0 4
28830: PUSH
28831: DOUBLE
28832: LD_INT 1
28834: DEC
28835: ST_TO_ADDR
28836: LD_VAR 0 1
28840: PUSH
28841: FOR_TO
28842: IFFALSE 28880
// if array1 [ i ] <> array2 [ i ] then
28844: LD_VAR 0 1
28848: PUSH
28849: LD_VAR 0 4
28853: ARRAY
28854: PUSH
28855: LD_VAR 0 2
28859: PUSH
28860: LD_VAR 0 4
28864: ARRAY
28865: NONEQUAL
28866: IFFALSE 28878
// begin result := false ;
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: LD_INT 0
28875: ST_TO_ADDR
// break ;
28876: GO 28880
// end ;
28878: GO 28841
28880: POP
28881: POP
// end else
28882: GO 28892
// result := false ;
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: LD_INT 0
28891: ST_TO_ADDR
// end ;
28892: LD_VAR 0 3
28896: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if not array1 or not array2 then
28901: LD_VAR 0 1
28905: NOT
28906: IFTRUE 28915
28908: PUSH
28909: LD_VAR 0 2
28913: NOT
28914: OR
28915: IFFALSE 28919
// exit ;
28917: GO 28983
// result := true ;
28919: LD_ADDR_VAR 0 3
28923: PUSH
28924: LD_INT 1
28926: ST_TO_ADDR
// for i = 1 to array1 do
28927: LD_ADDR_VAR 0 4
28931: PUSH
28932: DOUBLE
28933: LD_INT 1
28935: DEC
28936: ST_TO_ADDR
28937: LD_VAR 0 1
28941: PUSH
28942: FOR_TO
28943: IFFALSE 28981
// if array1 [ i ] <> array2 [ i ] then
28945: LD_VAR 0 1
28949: PUSH
28950: LD_VAR 0 4
28954: ARRAY
28955: PUSH
28956: LD_VAR 0 2
28960: PUSH
28961: LD_VAR 0 4
28965: ARRAY
28966: NONEQUAL
28967: IFFALSE 28979
// begin result := false ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 0
28976: ST_TO_ADDR
// break ;
28977: GO 28981
// end ;
28979: GO 28942
28981: POP
28982: POP
// end ;
28983: LD_VAR 0 3
28987: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28988: LD_INT 0
28990: PPUSH
28991: PPUSH
28992: PPUSH
// pom := GetBase ( fac ) ;
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL_OW 274
29007: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29008: LD_ADDR_VAR 0 4
29012: PUSH
29013: LD_VAR 0 2
29017: PUSH
29018: LD_INT 1
29020: ARRAY
29021: PPUSH
29022: LD_VAR 0 2
29026: PUSH
29027: LD_INT 2
29029: ARRAY
29030: PPUSH
29031: LD_VAR 0 2
29035: PUSH
29036: LD_INT 3
29038: ARRAY
29039: PPUSH
29040: LD_VAR 0 2
29044: PUSH
29045: LD_INT 4
29047: ARRAY
29048: PPUSH
29049: CALL_OW 449
29053: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29054: LD_ADDR_VAR 0 3
29058: PUSH
29059: LD_VAR 0 5
29063: PPUSH
29064: LD_INT 1
29066: PPUSH
29067: CALL_OW 275
29071: PUSH
29072: LD_VAR 0 4
29076: PUSH
29077: LD_INT 1
29079: ARRAY
29080: GREATEREQUAL
29081: IFFALSE 29107
29083: PUSH
29084: LD_VAR 0 5
29088: PPUSH
29089: LD_INT 2
29091: PPUSH
29092: CALL_OW 275
29096: PUSH
29097: LD_VAR 0 4
29101: PUSH
29102: LD_INT 2
29104: ARRAY
29105: GREATEREQUAL
29106: AND
29107: IFFALSE 29133
29109: PUSH
29110: LD_VAR 0 5
29114: PPUSH
29115: LD_INT 3
29117: PPUSH
29118: CALL_OW 275
29122: PUSH
29123: LD_VAR 0 4
29127: PUSH
29128: LD_INT 3
29130: ARRAY
29131: GREATEREQUAL
29132: AND
29133: ST_TO_ADDR
// end ;
29134: LD_VAR 0 3
29138: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29139: LD_INT 0
29141: PPUSH
29142: PPUSH
29143: PPUSH
29144: PPUSH
// pom := GetBase ( building ) ;
29145: LD_ADDR_VAR 0 3
29149: PUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 274
29159: ST_TO_ADDR
// if not pom then
29160: LD_VAR 0 3
29164: NOT
29165: IFFALSE 29169
// exit ;
29167: GO 29343
// btype := GetBType ( building ) ;
29169: LD_ADDR_VAR 0 5
29173: PUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 266
29183: ST_TO_ADDR
// if btype = b_armoury then
29184: LD_VAR 0 5
29188: PUSH
29189: LD_INT 4
29191: EQUAL
29192: IFFALSE 29202
// btype := b_barracks ;
29194: LD_ADDR_VAR 0 5
29198: PUSH
29199: LD_INT 5
29201: ST_TO_ADDR
// if btype = b_depot then
29202: LD_VAR 0 5
29206: PUSH
29207: LD_INT 0
29209: EQUAL
29210: IFFALSE 29220
// btype := b_warehouse ;
29212: LD_ADDR_VAR 0 5
29216: PUSH
29217: LD_INT 1
29219: ST_TO_ADDR
// if btype = b_workshop then
29220: LD_VAR 0 5
29224: PUSH
29225: LD_INT 2
29227: EQUAL
29228: IFFALSE 29238
// btype := b_factory ;
29230: LD_ADDR_VAR 0 5
29234: PUSH
29235: LD_INT 3
29237: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29238: LD_ADDR_VAR 0 4
29242: PUSH
29243: LD_VAR 0 5
29247: PPUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 248
29257: PPUSH
29258: CALL_OW 450
29262: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29263: LD_ADDR_VAR 0 2
29267: PUSH
29268: LD_VAR 0 3
29272: PPUSH
29273: LD_INT 1
29275: PPUSH
29276: CALL_OW 275
29280: PUSH
29281: LD_VAR 0 4
29285: PUSH
29286: LD_INT 1
29288: ARRAY
29289: GREATEREQUAL
29290: IFFALSE 29316
29292: PUSH
29293: LD_VAR 0 3
29297: PPUSH
29298: LD_INT 2
29300: PPUSH
29301: CALL_OW 275
29305: PUSH
29306: LD_VAR 0 4
29310: PUSH
29311: LD_INT 2
29313: ARRAY
29314: GREATEREQUAL
29315: AND
29316: IFFALSE 29342
29318: PUSH
29319: LD_VAR 0 3
29323: PPUSH
29324: LD_INT 3
29326: PPUSH
29327: CALL_OW 275
29331: PUSH
29332: LD_VAR 0 4
29336: PUSH
29337: LD_INT 3
29339: ARRAY
29340: GREATEREQUAL
29341: AND
29342: ST_TO_ADDR
// end ;
29343: LD_VAR 0 2
29347: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29348: LD_INT 0
29350: PPUSH
29351: PPUSH
29352: PPUSH
// pom := GetBase ( building ) ;
29353: LD_ADDR_VAR 0 4
29357: PUSH
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL_OW 274
29367: ST_TO_ADDR
// if not pom then
29368: LD_VAR 0 4
29372: NOT
29373: IFFALSE 29377
// exit ;
29375: GO 29482
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29377: LD_ADDR_VAR 0 5
29381: PUSH
29382: LD_VAR 0 2
29386: PPUSH
29387: LD_VAR 0 1
29391: PPUSH
29392: CALL_OW 248
29396: PPUSH
29397: CALL_OW 450
29401: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29402: LD_ADDR_VAR 0 3
29406: PUSH
29407: LD_VAR 0 4
29411: PPUSH
29412: LD_INT 1
29414: PPUSH
29415: CALL_OW 275
29419: PUSH
29420: LD_VAR 0 5
29424: PUSH
29425: LD_INT 1
29427: ARRAY
29428: GREATEREQUAL
29429: IFFALSE 29455
29431: PUSH
29432: LD_VAR 0 4
29436: PPUSH
29437: LD_INT 2
29439: PPUSH
29440: CALL_OW 275
29444: PUSH
29445: LD_VAR 0 5
29449: PUSH
29450: LD_INT 2
29452: ARRAY
29453: GREATEREQUAL
29454: AND
29455: IFFALSE 29481
29457: PUSH
29458: LD_VAR 0 4
29462: PPUSH
29463: LD_INT 3
29465: PPUSH
29466: CALL_OW 275
29470: PUSH
29471: LD_VAR 0 5
29475: PUSH
29476: LD_INT 3
29478: ARRAY
29479: GREATEREQUAL
29480: AND
29481: ST_TO_ADDR
// end ;
29482: LD_VAR 0 3
29486: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29487: LD_INT 0
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
29498: PPUSH
29499: PPUSH
// result := false ;
29500: LD_ADDR_VAR 0 8
29504: PUSH
29505: LD_INT 0
29507: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29508: LD_VAR 0 5
29512: NOT
29513: IFTRUE 29522
29515: PUSH
29516: LD_VAR 0 1
29520: NOT
29521: OR
29522: IFTRUE 29531
29524: PUSH
29525: LD_VAR 0 2
29529: NOT
29530: OR
29531: IFTRUE 29540
29533: PUSH
29534: LD_VAR 0 3
29538: NOT
29539: OR
29540: IFFALSE 29544
// exit ;
29542: GO 30370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29544: LD_ADDR_VAR 0 14
29548: PUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: LD_VAR 0 2
29558: PPUSH
29559: LD_VAR 0 3
29563: PPUSH
29564: LD_VAR 0 4
29568: PPUSH
29569: LD_VAR 0 5
29573: PUSH
29574: LD_INT 1
29576: ARRAY
29577: PPUSH
29578: CALL_OW 248
29582: PPUSH
29583: LD_INT 0
29585: PPUSH
29586: CALL 31651 0 6
29590: ST_TO_ADDR
// if not hexes then
29591: LD_VAR 0 14
29595: NOT
29596: IFFALSE 29600
// exit ;
29598: GO 30370
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29600: LD_ADDR_VAR 0 17
29604: PUSH
29605: LD_VAR 0 5
29609: PPUSH
29610: LD_INT 22
29612: PUSH
29613: LD_VAR 0 13
29617: PPUSH
29618: CALL_OW 255
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 30
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 30
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PPUSH
29659: CALL_OW 72
29663: ST_TO_ADDR
// for i = 1 to hexes do
29664: LD_ADDR_VAR 0 9
29668: PUSH
29669: DOUBLE
29670: LD_INT 1
29672: DEC
29673: ST_TO_ADDR
29674: LD_VAR 0 14
29678: PUSH
29679: FOR_TO
29680: IFFALSE 30368
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29682: LD_ADDR_VAR 0 13
29686: PUSH
29687: LD_VAR 0 14
29691: PUSH
29692: LD_VAR 0 9
29696: ARRAY
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: PPUSH
29702: LD_VAR 0 14
29706: PUSH
29707: LD_VAR 0 9
29711: ARRAY
29712: PUSH
29713: LD_INT 2
29715: ARRAY
29716: PPUSH
29717: CALL_OW 428
29721: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29722: LD_VAR 0 14
29726: PUSH
29727: LD_VAR 0 9
29731: ARRAY
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: PPUSH
29737: LD_VAR 0 14
29741: PUSH
29742: LD_VAR 0 9
29746: ARRAY
29747: PUSH
29748: LD_INT 2
29750: ARRAY
29751: PPUSH
29752: CALL_OW 351
29756: IFTRUE 29795
29758: PUSH
29759: LD_VAR 0 14
29763: PUSH
29764: LD_VAR 0 9
29768: ARRAY
29769: PUSH
29770: LD_INT 1
29772: ARRAY
29773: PPUSH
29774: LD_VAR 0 14
29778: PUSH
29779: LD_VAR 0 9
29783: ARRAY
29784: PUSH
29785: LD_INT 2
29787: ARRAY
29788: PPUSH
29789: CALL_OW 488
29793: NOT
29794: OR
29795: IFTRUE 29812
29797: PUSH
29798: LD_VAR 0 13
29802: PPUSH
29803: CALL_OW 247
29807: PUSH
29808: LD_INT 3
29810: EQUAL
29811: OR
29812: IFFALSE 29818
// exit ;
29814: POP
29815: POP
29816: GO 30370
// if not tmp then
29818: LD_VAR 0 13
29822: NOT
29823: IFFALSE 29827
// continue ;
29825: GO 29679
// result := true ;
29827: LD_ADDR_VAR 0 8
29831: PUSH
29832: LD_INT 1
29834: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29835: LD_VAR 0 6
29839: IFFALSE 29856
29841: PUSH
29842: LD_VAR 0 13
29846: PPUSH
29847: CALL_OW 247
29851: PUSH
29852: LD_INT 2
29854: EQUAL
29855: AND
29856: IFFALSE 29873
29858: PUSH
29859: LD_VAR 0 13
29863: PPUSH
29864: CALL_OW 263
29868: PUSH
29869: LD_INT 1
29871: EQUAL
29872: AND
29873: IFFALSE 30037
// begin if IsDrivenBy ( tmp ) then
29875: LD_VAR 0 13
29879: PPUSH
29880: CALL_OW 311
29884: IFFALSE 29888
// continue ;
29886: GO 29679
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29888: LD_VAR 0 6
29892: PPUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 60
29898: PUSH
29899: EMPTY
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: LD_INT 55
29911: PUSH
29912: EMPTY
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 72
29927: IFFALSE 30035
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29929: LD_ADDR_VAR 0 18
29933: PUSH
29934: LD_VAR 0 6
29938: PPUSH
29939: LD_INT 3
29941: PUSH
29942: LD_INT 60
29944: PUSH
29945: EMPTY
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: LD_INT 55
29957: PUSH
29958: EMPTY
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 72
29973: PUSH
29974: LD_INT 1
29976: ARRAY
29977: ST_TO_ADDR
// if IsInUnit ( driver ) then
29978: LD_VAR 0 18
29982: PPUSH
29983: CALL_OW 310
29987: IFFALSE 29998
// ComExit ( driver ) ;
29989: LD_VAR 0 18
29993: PPUSH
29994: CALL 55651 0 1
// AddComEnterUnit ( driver , tmp ) ;
29998: LD_VAR 0 18
30002: PPUSH
30003: LD_VAR 0 13
30007: PPUSH
30008: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30012: LD_VAR 0 18
30016: PPUSH
30017: LD_VAR 0 7
30021: PPUSH
30022: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30026: LD_VAR 0 18
30030: PPUSH
30031: CALL_OW 181
// end ; continue ;
30035: GO 29679
// end ; if not cleaners or not tmp in cleaners then
30037: LD_VAR 0 6
30041: NOT
30042: IFTRUE 30057
30044: PUSH
30045: LD_VAR 0 13
30049: PUSH
30050: LD_VAR 0 6
30054: IN
30055: NOT
30056: OR
30057: IFFALSE 30366
// begin if dep then
30059: LD_VAR 0 17
30063: IFFALSE 30199
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30065: LD_ADDR_VAR 0 16
30069: PUSH
30070: LD_VAR 0 17
30074: PUSH
30075: LD_INT 1
30077: ARRAY
30078: PPUSH
30079: CALL_OW 250
30083: PPUSH
30084: LD_VAR 0 17
30088: PUSH
30089: LD_INT 1
30091: ARRAY
30092: PPUSH
30093: CALL_OW 254
30097: PPUSH
30098: LD_INT 5
30100: PPUSH
30101: CALL_OW 272
30105: PUSH
30106: LD_VAR 0 17
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: PPUSH
30115: CALL_OW 251
30119: PPUSH
30120: LD_VAR 0 17
30124: PUSH
30125: LD_INT 1
30127: ARRAY
30128: PPUSH
30129: CALL_OW 254
30133: PPUSH
30134: LD_INT 5
30136: PPUSH
30137: CALL_OW 273
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30146: LD_VAR 0 16
30150: PUSH
30151: LD_INT 1
30153: ARRAY
30154: PPUSH
30155: LD_VAR 0 16
30159: PUSH
30160: LD_INT 2
30162: ARRAY
30163: PPUSH
30164: CALL_OW 488
30168: IFFALSE 30199
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30170: LD_VAR 0 13
30174: PPUSH
30175: LD_VAR 0 16
30179: PUSH
30180: LD_INT 1
30182: ARRAY
30183: PPUSH
30184: LD_VAR 0 16
30188: PUSH
30189: LD_INT 2
30191: ARRAY
30192: PPUSH
30193: CALL_OW 111
// continue ;
30197: GO 29679
// end ; end ; r := GetDir ( tmp ) ;
30199: LD_ADDR_VAR 0 15
30203: PUSH
30204: LD_VAR 0 13
30208: PPUSH
30209: CALL_OW 254
30213: ST_TO_ADDR
// if r = 5 then
30214: LD_VAR 0 15
30218: PUSH
30219: LD_INT 5
30221: EQUAL
30222: IFFALSE 30232
// r := 0 ;
30224: LD_ADDR_VAR 0 15
30228: PUSH
30229: LD_INT 0
30231: ST_TO_ADDR
// for j = r to 5 do
30232: LD_ADDR_VAR 0 10
30236: PUSH
30237: DOUBLE
30238: LD_VAR 0 15
30242: DEC
30243: ST_TO_ADDR
30244: LD_INT 5
30246: PUSH
30247: FOR_TO
30248: IFFALSE 30364
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30250: LD_ADDR_VAR 0 11
30254: PUSH
30255: LD_VAR 0 13
30259: PPUSH
30260: CALL_OW 250
30264: PPUSH
30265: LD_VAR 0 10
30269: PPUSH
30270: LD_INT 2
30272: PPUSH
30273: CALL_OW 272
30277: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30278: LD_ADDR_VAR 0 12
30282: PUSH
30283: LD_VAR 0 13
30287: PPUSH
30288: CALL_OW 251
30292: PPUSH
30293: LD_VAR 0 10
30297: PPUSH
30298: LD_INT 2
30300: PPUSH
30301: CALL_OW 273
30305: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30306: LD_VAR 0 11
30310: PPUSH
30311: LD_VAR 0 12
30315: PPUSH
30316: CALL_OW 488
30320: IFFALSE 30339
30322: PUSH
30323: LD_VAR 0 11
30327: PPUSH
30328: LD_VAR 0 12
30332: PPUSH
30333: CALL_OW 428
30337: NOT
30338: AND
30339: IFFALSE 30362
// begin ComMoveXY ( tmp , _x , _y ) ;
30341: LD_VAR 0 13
30345: PPUSH
30346: LD_VAR 0 11
30350: PPUSH
30351: LD_VAR 0 12
30355: PPUSH
30356: CALL_OW 111
// break ;
30360: GO 30364
// end ; end ;
30362: GO 30247
30364: POP
30365: POP
// end ; end ;
30366: GO 29679
30368: POP
30369: POP
// end ;
30370: LD_VAR 0 8
30374: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30375: LD_INT 0
30377: PPUSH
// result := true ;
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 1
30385: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30386: LD_VAR 0 2
30390: PUSH
30391: LD_INT 24
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30405
30397: LD_INT 33
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30430
30405: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 32
30413: PPUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 321
30423: PUSH
30424: LD_INT 2
30426: EQUAL
30427: ST_TO_ADDR
30428: GO 30746
30430: LD_INT 20
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30463
30438: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 6
30446: PPUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 321
30456: PUSH
30457: LD_INT 2
30459: EQUAL
30460: ST_TO_ADDR
30461: GO 30746
30463: LD_INT 22
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30477
30469: LD_INT 36
30471: DOUBLE
30472: EQUAL
30473: IFTRUE 30477
30475: GO 30502
30477: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: LD_INT 15
30485: PPUSH
30486: LD_VAR 0 1
30490: PPUSH
30491: CALL_OW 321
30495: PUSH
30496: LD_INT 2
30498: EQUAL
30499: ST_TO_ADDR
30500: GO 30746
30502: LD_INT 30
30504: DOUBLE
30505: EQUAL
30506: IFTRUE 30510
30508: GO 30535
30510: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_INT 20
30518: PPUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 321
30528: PUSH
30529: LD_INT 2
30531: EQUAL
30532: ST_TO_ADDR
30533: GO 30746
30535: LD_INT 28
30537: DOUBLE
30538: EQUAL
30539: IFTRUE 30549
30541: LD_INT 21
30543: DOUBLE
30544: EQUAL
30545: IFTRUE 30549
30547: GO 30574
30549: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30550: LD_ADDR_VAR 0 3
30554: PUSH
30555: LD_INT 21
30557: PPUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 321
30567: PUSH
30568: LD_INT 2
30570: EQUAL
30571: ST_TO_ADDR
30572: GO 30746
30574: LD_INT 16
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30607
30582: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 84
30590: PPUSH
30591: LD_VAR 0 1
30595: PPUSH
30596: CALL_OW 321
30600: PUSH
30601: LD_INT 2
30603: EQUAL
30604: ST_TO_ADDR
30605: GO 30746
30607: LD_INT 19
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30621
30613: LD_INT 23
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30646
30621: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30622: LD_ADDR_VAR 0 3
30626: PUSH
30627: LD_INT 83
30629: PPUSH
30630: LD_VAR 0 1
30634: PPUSH
30635: CALL_OW 321
30639: PUSH
30640: LD_INT 2
30642: EQUAL
30643: ST_TO_ADDR
30644: GO 30746
30646: LD_INT 17
30648: DOUBLE
30649: EQUAL
30650: IFTRUE 30654
30652: GO 30679
30654: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30655: LD_ADDR_VAR 0 3
30659: PUSH
30660: LD_INT 39
30662: PPUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 321
30672: PUSH
30673: LD_INT 2
30675: EQUAL
30676: ST_TO_ADDR
30677: GO 30746
30679: LD_INT 18
30681: DOUBLE
30682: EQUAL
30683: IFTRUE 30687
30685: GO 30712
30687: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30688: LD_ADDR_VAR 0 3
30692: PUSH
30693: LD_INT 40
30695: PPUSH
30696: LD_VAR 0 1
30700: PPUSH
30701: CALL_OW 321
30705: PUSH
30706: LD_INT 2
30708: EQUAL
30709: ST_TO_ADDR
30710: GO 30746
30712: LD_INT 27
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30745
30720: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 35
30728: PPUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 321
30738: PUSH
30739: LD_INT 2
30741: EQUAL
30742: ST_TO_ADDR
30743: GO 30746
30745: POP
// end ;
30746: LD_VAR 0 3
30750: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30751: LD_INT 0
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
// result := false ;
30764: LD_ADDR_VAR 0 6
30768: PUSH
30769: LD_INT 0
30771: ST_TO_ADDR
// if btype = b_depot then
30772: LD_VAR 0 2
30776: PUSH
30777: LD_INT 0
30779: EQUAL
30780: IFFALSE 30792
// begin result := true ;
30782: LD_ADDR_VAR 0 6
30786: PUSH
30787: LD_INT 1
30789: ST_TO_ADDR
// exit ;
30790: GO 31646
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30792: LD_VAR 0 1
30796: NOT
30797: IFTRUE 30822
30799: PUSH
30800: LD_VAR 0 1
30804: PPUSH
30805: CALL_OW 266
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: IN
30820: NOT
30821: OR
30822: IFTRUE 30831
30824: PUSH
30825: LD_VAR 0 2
30829: NOT
30830: OR
30831: IFTRUE 30867
30833: PUSH
30834: LD_VAR 0 5
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: LD_INT 2
30847: PUSH
30848: LD_INT 3
30850: PUSH
30851: LD_INT 4
30853: PUSH
30854: LD_INT 5
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: IN
30865: NOT
30866: OR
30867: IFTRUE 30886
30869: PUSH
30870: LD_VAR 0 3
30874: PPUSH
30875: LD_VAR 0 4
30879: PPUSH
30880: CALL_OW 488
30884: NOT
30885: OR
30886: IFFALSE 30890
// exit ;
30888: GO 31646
// side := GetSide ( depot ) ;
30890: LD_ADDR_VAR 0 9
30894: PUSH
30895: LD_VAR 0 1
30899: PPUSH
30900: CALL_OW 255
30904: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30905: LD_VAR 0 9
30909: PPUSH
30910: LD_VAR 0 2
30914: PPUSH
30915: CALL 30375 0 2
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 31646
// pom := GetBase ( depot ) ;
30924: LD_ADDR_VAR 0 10
30928: PUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 274
30938: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30939: LD_ADDR_VAR 0 11
30943: PUSH
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 248
30958: PPUSH
30959: CALL_OW 450
30963: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30964: LD_VAR 0 10
30968: PPUSH
30969: LD_INT 1
30971: PPUSH
30972: CALL_OW 275
30976: PUSH
30977: LD_VAR 0 11
30981: PUSH
30982: LD_INT 1
30984: ARRAY
30985: GREATEREQUAL
30986: IFFALSE 31012
30988: PUSH
30989: LD_VAR 0 10
30993: PPUSH
30994: LD_INT 2
30996: PPUSH
30997: CALL_OW 275
31001: PUSH
31002: LD_VAR 0 11
31006: PUSH
31007: LD_INT 2
31009: ARRAY
31010: GREATEREQUAL
31011: AND
31012: IFFALSE 31038
31014: PUSH
31015: LD_VAR 0 10
31019: PPUSH
31020: LD_INT 3
31022: PPUSH
31023: CALL_OW 275
31027: PUSH
31028: LD_VAR 0 11
31032: PUSH
31033: LD_INT 3
31035: ARRAY
31036: GREATEREQUAL
31037: AND
31038: NOT
31039: IFFALSE 31043
// exit ;
31041: GO 31646
// if GetBType ( depot ) = b_depot then
31043: LD_VAR 0 1
31047: PPUSH
31048: CALL_OW 266
31052: PUSH
31053: LD_INT 0
31055: EQUAL
31056: IFFALSE 31068
// dist := 28 else
31058: LD_ADDR_VAR 0 14
31062: PUSH
31063: LD_INT 28
31065: ST_TO_ADDR
31066: GO 31076
// dist := 36 ;
31068: LD_ADDR_VAR 0 14
31072: PUSH
31073: LD_INT 36
31075: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31076: LD_VAR 0 1
31080: PPUSH
31081: LD_VAR 0 3
31085: PPUSH
31086: LD_VAR 0 4
31090: PPUSH
31091: CALL_OW 297
31095: PUSH
31096: LD_VAR 0 14
31100: GREATER
31101: IFFALSE 31105
// exit ;
31103: GO 31646
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31105: LD_ADDR_VAR 0 12
31109: PUSH
31110: LD_VAR 0 2
31114: PPUSH
31115: LD_VAR 0 3
31119: PPUSH
31120: LD_VAR 0 4
31124: PPUSH
31125: LD_VAR 0 5
31129: PPUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL_OW 248
31139: PPUSH
31140: LD_INT 0
31142: PPUSH
31143: CALL 31651 0 6
31147: ST_TO_ADDR
// if not hexes then
31148: LD_VAR 0 12
31152: NOT
31153: IFFALSE 31157
// exit ;
31155: GO 31646
// hex := GetHexInfo ( x , y ) ;
31157: LD_ADDR_VAR 0 15
31161: PUSH
31162: LD_VAR 0 3
31166: PPUSH
31167: LD_VAR 0 4
31171: PPUSH
31172: CALL_OW 546
31176: ST_TO_ADDR
// if hex [ 1 ] then
31177: LD_VAR 0 15
31181: PUSH
31182: LD_INT 1
31184: ARRAY
31185: IFFALSE 31189
// exit ;
31187: GO 31646
// height := hex [ 2 ] ;
31189: LD_ADDR_VAR 0 13
31193: PUSH
31194: LD_VAR 0 15
31198: PUSH
31199: LD_INT 2
31201: ARRAY
31202: ST_TO_ADDR
// for i = 1 to hexes do
31203: LD_ADDR_VAR 0 7
31207: PUSH
31208: DOUBLE
31209: LD_INT 1
31211: DEC
31212: ST_TO_ADDR
31213: LD_VAR 0 12
31217: PUSH
31218: FOR_TO
31219: IFFALSE 31563
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31221: LD_VAR 0 12
31225: PUSH
31226: LD_VAR 0 7
31230: ARRAY
31231: PUSH
31232: LD_INT 1
31234: ARRAY
31235: PPUSH
31236: LD_VAR 0 12
31240: PUSH
31241: LD_VAR 0 7
31245: ARRAY
31246: PUSH
31247: LD_INT 2
31249: ARRAY
31250: PPUSH
31251: CALL_OW 488
31255: NOT
31256: IFTRUE 31298
31258: PUSH
31259: LD_VAR 0 12
31263: PUSH
31264: LD_VAR 0 7
31268: ARRAY
31269: PUSH
31270: LD_INT 1
31272: ARRAY
31273: PPUSH
31274: LD_VAR 0 12
31278: PUSH
31279: LD_VAR 0 7
31283: ARRAY
31284: PUSH
31285: LD_INT 2
31287: ARRAY
31288: PPUSH
31289: CALL_OW 428
31293: PUSH
31294: LD_INT 0
31296: GREATER
31297: OR
31298: IFTRUE 31336
31300: PUSH
31301: LD_VAR 0 12
31305: PUSH
31306: LD_VAR 0 7
31310: ARRAY
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: PPUSH
31316: LD_VAR 0 12
31320: PUSH
31321: LD_VAR 0 7
31325: ARRAY
31326: PUSH
31327: LD_INT 2
31329: ARRAY
31330: PPUSH
31331: CALL_OW 351
31335: OR
31336: IFFALSE 31342
// exit ;
31338: POP
31339: POP
31340: GO 31646
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31342: LD_ADDR_VAR 0 8
31346: PUSH
31347: LD_VAR 0 12
31351: PUSH
31352: LD_VAR 0 7
31356: ARRAY
31357: PUSH
31358: LD_INT 1
31360: ARRAY
31361: PPUSH
31362: LD_VAR 0 12
31366: PUSH
31367: LD_VAR 0 7
31371: ARRAY
31372: PUSH
31373: LD_INT 2
31375: ARRAY
31376: PPUSH
31377: CALL_OW 546
31381: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31382: LD_VAR 0 8
31386: PUSH
31387: LD_INT 1
31389: ARRAY
31390: IFTRUE 31412
31392: PUSH
31393: LD_VAR 0 8
31397: PUSH
31398: LD_INT 2
31400: ARRAY
31401: PUSH
31402: LD_VAR 0 13
31406: PUSH
31407: LD_INT 2
31409: PLUS
31410: GREATER
31411: OR
31412: IFTRUE 31434
31414: PUSH
31415: LD_VAR 0 8
31419: PUSH
31420: LD_INT 2
31422: ARRAY
31423: PUSH
31424: LD_VAR 0 13
31428: PUSH
31429: LD_INT 2
31431: MINUS
31432: LESS
31433: OR
31434: IFTRUE 31502
31436: PUSH
31437: LD_VAR 0 8
31441: PUSH
31442: LD_INT 3
31444: ARRAY
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 8
31451: PUSH
31452: LD_INT 9
31454: PUSH
31455: LD_INT 10
31457: PUSH
31458: LD_INT 11
31460: PUSH
31461: LD_INT 12
31463: PUSH
31464: LD_INT 13
31466: PUSH
31467: LD_INT 16
31469: PUSH
31470: LD_INT 17
31472: PUSH
31473: LD_INT 18
31475: PUSH
31476: LD_INT 19
31478: PUSH
31479: LD_INT 20
31481: PUSH
31482: LD_INT 21
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: IN
31500: NOT
31501: OR
31502: IFTRUE 31515
31504: PUSH
31505: LD_VAR 0 8
31509: PUSH
31510: LD_INT 5
31512: ARRAY
31513: NOT
31514: OR
31515: IFTRUE 31555
31517: PUSH
31518: LD_VAR 0 8
31522: PUSH
31523: LD_INT 6
31525: ARRAY
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 7
31535: PUSH
31536: LD_INT 9
31538: PUSH
31539: LD_INT 10
31541: PUSH
31542: LD_INT 11
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: IN
31553: NOT
31554: OR
31555: IFFALSE 31561
// exit ;
31557: POP
31558: POP
31559: GO 31646
// end ;
31561: GO 31218
31563: POP
31564: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31565: LD_VAR 0 9
31569: PPUSH
31570: LD_VAR 0 3
31574: PPUSH
31575: LD_VAR 0 4
31579: PPUSH
31580: LD_INT 20
31582: PPUSH
31583: CALL 23465 0 4
31587: PUSH
31588: LD_INT 4
31590: ARRAY
31591: IFFALSE 31595
// exit ;
31593: GO 31646
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31595: LD_VAR 0 2
31599: PUSH
31600: LD_INT 29
31602: PUSH
31603: LD_INT 30
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: IN
31610: IFFALSE 31634
31612: PUSH
31613: LD_VAR 0 3
31617: PPUSH
31618: LD_VAR 0 4
31622: PPUSH
31623: LD_VAR 0 9
31627: PPUSH
31628: CALL_OW 440
31632: NOT
31633: AND
31634: IFFALSE 31638
// exit ;
31636: GO 31646
// result := true ;
31638: LD_ADDR_VAR 0 6
31642: PUSH
31643: LD_INT 1
31645: ST_TO_ADDR
// end ;
31646: LD_VAR 0 6
31650: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31651: LD_INT 0
31653: PPUSH
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
31665: PPUSH
31666: PPUSH
31667: PPUSH
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
31694: PPUSH
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
31707: PPUSH
31708: PPUSH
31709: PPUSH
31710: PPUSH
// result = [ ] ;
31711: LD_ADDR_VAR 0 7
31715: PUSH
31716: EMPTY
31717: ST_TO_ADDR
// temp_list = [ ] ;
31718: LD_ADDR_VAR 0 9
31722: PUSH
31723: EMPTY
31724: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31725: LD_VAR 0 4
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: LD_INT 4
31744: PUSH
31745: LD_INT 5
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: IN
31756: NOT
31757: IFTRUE 31800
31759: PUSH
31760: LD_VAR 0 1
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: IN
31775: IFFALSE 31799
31777: PUSH
31778: LD_VAR 0 5
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 3
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: IN
31797: NOT
31798: AND
31799: OR
31800: IFFALSE 31804
// exit ;
31802: GO 50203
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31804: LD_VAR 0 1
31808: PUSH
31809: LD_INT 6
31811: PUSH
31812: LD_INT 7
31814: PUSH
31815: LD_INT 8
31817: PUSH
31818: LD_INT 13
31820: PUSH
31821: LD_INT 12
31823: PUSH
31824: LD_INT 15
31826: PUSH
31827: LD_INT 11
31829: PUSH
31830: LD_INT 14
31832: PUSH
31833: LD_INT 10
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: IN
31847: IFFALSE 31857
// btype = b_lab ;
31849: LD_ADDR_VAR 0 1
31853: PUSH
31854: LD_INT 6
31856: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31857: LD_VAR 0 6
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: IN
31876: NOT
31877: IFTRUE 31945
31879: PUSH
31880: LD_VAR 0 1
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 3
31896: PUSH
31897: LD_INT 6
31899: PUSH
31900: LD_INT 36
31902: PUSH
31903: LD_INT 4
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: LD_INT 31
31911: PUSH
31912: LD_INT 32
31914: PUSH
31915: LD_INT 33
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: IN
31931: NOT
31932: IFFALSE 31944
31934: PUSH
31935: LD_VAR 0 6
31939: PUSH
31940: LD_INT 1
31942: EQUAL
31943: AND
31944: OR
31945: IFTRUE 31977
31947: PUSH
31948: LD_VAR 0 1
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: IN
31963: NOT
31964: IFFALSE 31976
31966: PUSH
31967: LD_VAR 0 6
31971: PUSH
31972: LD_INT 2
31974: EQUAL
31975: AND
31976: OR
31977: IFFALSE 31987
// mode = 0 ;
31979: LD_ADDR_VAR 0 6
31983: PUSH
31984: LD_INT 0
31986: ST_TO_ADDR
// case mode of 0 :
31987: LD_VAR 0 6
31991: PUSH
31992: LD_INT 0
31994: DOUBLE
31995: EQUAL
31996: IFTRUE 32000
31998: GO 43453
32000: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32001: LD_ADDR_VAR 0 11
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: LD_INT 3
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32194: LD_ADDR_VAR 0 12
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: NEG
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: NEG
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 3
32362: NEG
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32390: LD_ADDR_VAR 0 13
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: LD_INT 3
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: NEG
32550: PUSH
32551: LD_INT 2
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: LD_INT 3
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32589: LD_ADDR_VAR 0 14
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: LD_INT 2
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 3
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: LD_INT 3
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32785: LD_ADDR_VAR 0 15
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32978: LD_ADDR_VAR 0 16
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: LD_INT 2
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 3
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 2
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33171: LD_ADDR_VAR 0 17
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33401: LD_ADDR_VAR 0 18
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: NEG
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: LD_INT 2
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33631: LD_ADDR_VAR 0 19
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33861: LD_ADDR_VAR 0 20
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: LD_INT 2
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34091: LD_ADDR_VAR 0 21
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: NEG
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34321: LD_ADDR_VAR 0 22
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 2
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: NEG
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34551: LD_ADDR_VAR 0 23
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 2
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34831: LD_ADDR_VAR 0 24
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: LD_INT 2
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 2
35007: NEG
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: LD_INT 2
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35107: LD_ADDR_VAR 0 25
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 2
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 3
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35381: LD_ADDR_VAR 0 26
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 3
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35657: LD_ADDR_VAR 0 27
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: NEG
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: NEG
35857: PUSH
35858: LD_INT 2
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: NEG
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 3
35902: NEG
35903: PUSH
35904: LD_INT 2
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35937: LD_ADDR_VAR 0 28
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: NEG
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: NEG
36137: PUSH
36138: LD_INT 2
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: LD_INT 3
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 3
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 3
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36219: LD_ADDR_VAR 0 29
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: LD_INT 3
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 3
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: LD_INT 2
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36498: LD_ADDR_VAR 0 30
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: NEG
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: LD_INT 3
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 3
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: NEG
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: NEG
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36776: LD_ADDR_VAR 0 31
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: LD_INT 3
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 3
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 3
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37054: LD_ADDR_VAR 0 32
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 3
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37332: LD_ADDR_VAR 0 33
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: LD_INT 3
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 3
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 3
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37611: LD_ADDR_VAR 0 34
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: NEG
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 3
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 3
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37891: LD_ADDR_VAR 0 35
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38003: LD_ADDR_VAR 0 36
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38115: LD_ADDR_VAR 0 37
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38227: LD_ADDR_VAR 0 38
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38339: LD_ADDR_VAR 0 39
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 2
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38451: LD_ADDR_VAR 0 40
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38563: LD_ADDR_VAR 0 41
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: LD_INT 3
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 3
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 3
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 3
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: NEG
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 3
38872: NEG
38873: PUSH
38874: LD_INT 3
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38913: LD_ADDR_VAR 0 42
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 3
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 3
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: LD_INT 3
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 3
39222: NEG
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39263: LD_ADDR_VAR 0 43
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: LD_INT 3
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 3
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 3
39559: NEG
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 3
39570: NEG
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39611: LD_ADDR_VAR 0 44
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: LD_INT 3
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 3
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 3
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: PUSH
39855: LD_INT 3
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 3
39920: NEG
39921: PUSH
39922: LD_INT 3
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39961: LD_ADDR_VAR 0 45
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 3
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 3
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 3
40258: NEG
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 3
40270: NEG
40271: PUSH
40272: LD_INT 3
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40311: LD_ADDR_VAR 0 46
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 3
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 3
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 3
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40659: LD_ADDR_VAR 0 47
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40810: LD_ADDR_VAR 0 48
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40957: LD_ADDR_VAR 0 49
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41101: LD_ADDR_VAR 0 50
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41245: LD_ADDR_VAR 0 51
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41392: LD_ADDR_VAR 0 52
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41543: LD_ADDR_VAR 0 53
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41773: LD_ADDR_VAR 0 54
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42003: LD_ADDR_VAR 0 55
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42233: LD_ADDR_VAR 0 56
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42463: LD_ADDR_VAR 0 57
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42693: LD_ADDR_VAR 0 58
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42923: LD_ADDR_VAR 0 59
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43011: LD_ADDR_VAR 0 60
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43099: LD_ADDR_VAR 0 61
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43187: LD_ADDR_VAR 0 62
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43275: LD_ADDR_VAR 0 63
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43363: LD_ADDR_VAR 0 64
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
// end ; 1 :
43451: GO 49348
43453: LD_INT 1
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43461
43459: GO 46084
43461: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43462: LD_ADDR_VAR 0 11
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43506: LD_ADDR_VAR 0 12
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43547: LD_ADDR_VAR 0 13
43551: PUSH
43552: LD_INT 3
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43587: LD_ADDR_VAR 0 14
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43628: LD_ADDR_VAR 0 15
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43672: LD_ADDR_VAR 0 16
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 3
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43718: LD_ADDR_VAR 0 17
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 3
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 3
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43762: LD_ADDR_VAR 0 18
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43803: LD_ADDR_VAR 0 19
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43843: LD_ADDR_VAR 0 20
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43884: LD_ADDR_VAR 0 21
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 3
43902: NEG
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43928: LD_ADDR_VAR 0 22
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 3
43947: NEG
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: NEG
43960: PUSH
43961: LD_INT 3
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43974: LD_ADDR_VAR 0 23
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 3
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 4
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 3
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44018: LD_ADDR_VAR 0 24
44022: PUSH
44023: LD_INT 3
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 4
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44059: LD_ADDR_VAR 0 25
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 4
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: LD_INT 4
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44099: LD_ADDR_VAR 0 26
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 3
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 4
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44140: LD_ADDR_VAR 0 27
44144: PUSH
44145: LD_INT 3
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 3
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 4
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44184: LD_ADDR_VAR 0 28
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 3
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 4
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 4
44215: NEG
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44230: LD_ADDR_VAR 0 29
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 3
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 3
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 4
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 4
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 5
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 5
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 4
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 6
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 6
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 5
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44385: LD_ADDR_VAR 0 30
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 3
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 4
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 4
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 4
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 5
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 5
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 5
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 6
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 6
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44528: LD_ADDR_VAR 0 31
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 4
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 4
44575: PUSH
44576: LD_INT 4
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: LD_INT 4
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 5
44595: PUSH
44596: LD_INT 4
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: LD_INT 5
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 4
44615: PUSH
44616: LD_INT 5
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 6
44625: PUSH
44626: LD_INT 5
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 6
44635: PUSH
44636: LD_INT 6
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 5
44645: PUSH
44646: LD_INT 6
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44667: LD_ADDR_VAR 0 32
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 4
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 4
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 5
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 5
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 6
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 6
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 5
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44810: LD_ADDR_VAR 0 33
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: NEG
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 3
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 4
44862: NEG
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 4
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 4
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 5
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 5
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 5
44919: NEG
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 6
44930: NEG
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 6
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44965: LD_ADDR_VAR 0 34
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 3
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: LD_INT 4
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 4
45020: NEG
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 4
45032: NEG
45033: PUSH
45034: LD_INT 4
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 4
45044: NEG
45045: PUSH
45046: LD_INT 5
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 5
45056: NEG
45057: PUSH
45058: LD_INT 4
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 5
45068: NEG
45069: PUSH
45070: LD_INT 5
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 5
45080: NEG
45081: PUSH
45082: LD_INT 6
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 6
45092: NEG
45093: PUSH
45094: LD_INT 5
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 6
45104: NEG
45105: PUSH
45106: LD_INT 6
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45128: LD_ADDR_VAR 0 41
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45172: LD_ADDR_VAR 0 42
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: LIST
45212: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45213: LD_ADDR_VAR 0 43
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45253: LD_ADDR_VAR 0 44
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45294: LD_ADDR_VAR 0 45
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45338: LD_ADDR_VAR 0 46
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 3
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45384: LD_ADDR_VAR 0 47
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 3
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45417: LD_ADDR_VAR 0 48
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45448: LD_ADDR_VAR 0 49
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45477: LD_ADDR_VAR 0 50
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45506: LD_ADDR_VAR 0 51
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45537: LD_ADDR_VAR 0 52
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45570: LD_ADDR_VAR 0 53
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45614: LD_ADDR_VAR 0 54
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45655: LD_ADDR_VAR 0 55
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: PUSH
45673: LD_INT 3
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 3
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45695: LD_ADDR_VAR 0 56
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45736: LD_ADDR_VAR 0 57
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 3
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 3
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45780: LD_ADDR_VAR 0 58
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 3
45811: NEG
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45826: LD_ADDR_VAR 0 59
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45870: LD_ADDR_VAR 0 60
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45911: LD_ADDR_VAR 0 61
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45951: LD_ADDR_VAR 0 62
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45992: LD_ADDR_VAR 0 63
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46036: LD_ADDR_VAR 0 64
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: ST_TO_ADDR
// end ; 2 :
46082: GO 49348
46084: LD_INT 2
46086: DOUBLE
46087: EQUAL
46088: IFTRUE 46092
46090: GO 49347
46092: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46093: LD_ADDR_VAR 0 29
46097: PUSH
46098: LD_INT 4
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 5
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 5
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 4
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 5
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 3
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 4
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 4
46223: PUSH
46224: LD_INT 4
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: LD_INT 4
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 3
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 4
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 4
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 4
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 5
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 5
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 4
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 5
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 3
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: NEG
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 4
46432: NEG
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 4
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 4
46455: NEG
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 4
46478: NEG
46479: PUSH
46480: LD_INT 4
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 4
46490: NEG
46491: PUSH
46492: LD_INT 5
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 4
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: LD_INT 3
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 4
46526: NEG
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 5
46538: NEG
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 5
46550: NEG
46551: PUSH
46552: LD_INT 5
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: LD_INT 5
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 5
46574: NEG
46575: PUSH
46576: LD_INT 3
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46631: LD_ADDR_VAR 0 30
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: LD_INT 4
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 5
46658: PUSH
46659: LD_INT 4
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 5
46668: PUSH
46669: LD_INT 5
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 4
46678: PUSH
46679: LD_INT 5
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: LD_INT 4
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 5
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 5
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 4
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 4
46821: NEG
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 4
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: NEG
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 5
46877: NEG
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 5
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 5
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: NEG
46996: PUSH
46997: LD_INT 4
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 4
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 4
47019: NEG
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 4
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 5
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 4
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 3
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 4
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 5
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 3
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: LD_INT 5
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47178: LD_ADDR_VAR 0 31
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 4
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 5
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 5
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 4
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 4
47334: NEG
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 4
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 4
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 4
47380: NEG
47381: PUSH
47382: LD_INT 4
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 4
47392: NEG
47393: PUSH
47394: LD_INT 5
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: LD_INT 4
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: NEG
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 4
47428: NEG
47429: PUSH
47430: LD_INT 3
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 5
47440: NEG
47441: PUSH
47442: LD_INT 4
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 5
47452: NEG
47453: PUSH
47454: LD_INT 5
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: LD_INT 5
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 5
47476: NEG
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 4
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 3
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 4
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 4
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 4
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 4
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 5
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 5
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 4
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 3
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 5
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47728: LD_ADDR_VAR 0 32
47732: PUSH
47733: LD_INT 4
47735: NEG
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 4
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: NEG
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 4
47780: NEG
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 5
47791: NEG
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 5
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 5
47814: NEG
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 4
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: NEG
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: NEG
47898: PUSH
47899: LD_INT 3
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 4
47909: NEG
47910: PUSH
47911: LD_INT 4
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 4
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 4
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 5
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 4
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 3
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 4
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 5
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 5
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 3
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 4
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 4
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 4
48140: PUSH
48141: LD_INT 4
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 4
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 5
48160: PUSH
48161: LD_INT 4
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 5
48170: PUSH
48171: LD_INT 5
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 4
48180: PUSH
48181: LD_INT 5
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: LD_INT 4
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 5
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 5
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48275: LD_ADDR_VAR 0 33
48279: PUSH
48280: LD_INT 4
48282: NEG
48283: PUSH
48284: LD_INT 4
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 4
48294: NEG
48295: PUSH
48296: LD_INT 5
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: LD_INT 4
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 3
48318: NEG
48319: PUSH
48320: LD_INT 3
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 4
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 5
48342: NEG
48343: PUSH
48344: LD_INT 4
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 5
48354: NEG
48355: PUSH
48356: LD_INT 5
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 3
48366: NEG
48367: PUSH
48368: LD_INT 5
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 5
48378: NEG
48379: PUSH
48380: LD_INT 3
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 4
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 4
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 4
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 4
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 4
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 5
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 5
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 4
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 5
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 4
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 4
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 4
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 4
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 4
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 3
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 4
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 5
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 5
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 4
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 5
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48813: LD_ADDR_VAR 0 34
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 4
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 5
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 4
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 3
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 3
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 4
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 5
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 3
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 5
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 4
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 4
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 5
49035: PUSH
49036: LD_INT 4
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 5
49045: PUSH
49046: LD_INT 5
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 4
49055: PUSH
49056: LD_INT 5
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: LD_INT 4
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 5
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: PUSH
49096: LD_INT 5
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 4
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 4
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 4
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 4
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 4
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 4
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 5
49254: NEG
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 5
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 5
49277: NEG
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: ST_TO_ADDR
// end ; end ;
49345: GO 49348
49347: POP
// case btype of b_depot , b_warehouse :
49348: LD_VAR 0 1
49352: PUSH
49353: LD_INT 0
49355: DOUBLE
49356: EQUAL
49357: IFTRUE 49367
49359: LD_INT 1
49361: DOUBLE
49362: EQUAL
49363: IFTRUE 49367
49365: GO 49568
49367: POP
// case nation of nation_american :
49368: LD_VAR 0 5
49372: PUSH
49373: LD_INT 1
49375: DOUBLE
49376: EQUAL
49377: IFTRUE 49381
49379: GO 49437
49381: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49382: LD_ADDR_VAR 0 9
49386: PUSH
49387: LD_VAR 0 11
49391: PUSH
49392: LD_VAR 0 12
49396: PUSH
49397: LD_VAR 0 13
49401: PUSH
49402: LD_VAR 0 14
49406: PUSH
49407: LD_VAR 0 15
49411: PUSH
49412: LD_VAR 0 16
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: PUSH
49425: LD_VAR 0 4
49429: PUSH
49430: LD_INT 1
49432: PLUS
49433: ARRAY
49434: ST_TO_ADDR
49435: GO 49566
49437: LD_INT 2
49439: DOUBLE
49440: EQUAL
49441: IFTRUE 49445
49443: GO 49501
49445: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49446: LD_ADDR_VAR 0 9
49450: PUSH
49451: LD_VAR 0 17
49455: PUSH
49456: LD_VAR 0 18
49460: PUSH
49461: LD_VAR 0 19
49465: PUSH
49466: LD_VAR 0 20
49470: PUSH
49471: LD_VAR 0 21
49475: PUSH
49476: LD_VAR 0 22
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: PUSH
49489: LD_VAR 0 4
49493: PUSH
49494: LD_INT 1
49496: PLUS
49497: ARRAY
49498: ST_TO_ADDR
49499: GO 49566
49501: LD_INT 3
49503: DOUBLE
49504: EQUAL
49505: IFTRUE 49509
49507: GO 49565
49509: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49510: LD_ADDR_VAR 0 9
49514: PUSH
49515: LD_VAR 0 23
49519: PUSH
49520: LD_VAR 0 24
49524: PUSH
49525: LD_VAR 0 25
49529: PUSH
49530: LD_VAR 0 26
49534: PUSH
49535: LD_VAR 0 27
49539: PUSH
49540: LD_VAR 0 28
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: PUSH
49553: LD_VAR 0 4
49557: PUSH
49558: LD_INT 1
49560: PLUS
49561: ARRAY
49562: ST_TO_ADDR
49563: GO 49566
49565: POP
49566: GO 50121
49568: LD_INT 2
49570: DOUBLE
49571: EQUAL
49572: IFTRUE 49582
49574: LD_INT 3
49576: DOUBLE
49577: EQUAL
49578: IFTRUE 49582
49580: GO 49638
49582: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49583: LD_ADDR_VAR 0 9
49587: PUSH
49588: LD_VAR 0 29
49592: PUSH
49593: LD_VAR 0 30
49597: PUSH
49598: LD_VAR 0 31
49602: PUSH
49603: LD_VAR 0 32
49607: PUSH
49608: LD_VAR 0 33
49612: PUSH
49613: LD_VAR 0 34
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: PUSH
49626: LD_VAR 0 4
49630: PUSH
49631: LD_INT 1
49633: PLUS
49634: ARRAY
49635: ST_TO_ADDR
49636: GO 50121
49638: LD_INT 16
49640: DOUBLE
49641: EQUAL
49642: IFTRUE 49700
49644: LD_INT 17
49646: DOUBLE
49647: EQUAL
49648: IFTRUE 49700
49650: LD_INT 18
49652: DOUBLE
49653: EQUAL
49654: IFTRUE 49700
49656: LD_INT 19
49658: DOUBLE
49659: EQUAL
49660: IFTRUE 49700
49662: LD_INT 22
49664: DOUBLE
49665: EQUAL
49666: IFTRUE 49700
49668: LD_INT 20
49670: DOUBLE
49671: EQUAL
49672: IFTRUE 49700
49674: LD_INT 21
49676: DOUBLE
49677: EQUAL
49678: IFTRUE 49700
49680: LD_INT 23
49682: DOUBLE
49683: EQUAL
49684: IFTRUE 49700
49686: LD_INT 24
49688: DOUBLE
49689: EQUAL
49690: IFTRUE 49700
49692: LD_INT 25
49694: DOUBLE
49695: EQUAL
49696: IFTRUE 49700
49698: GO 49756
49700: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49701: LD_ADDR_VAR 0 9
49705: PUSH
49706: LD_VAR 0 35
49710: PUSH
49711: LD_VAR 0 36
49715: PUSH
49716: LD_VAR 0 37
49720: PUSH
49721: LD_VAR 0 38
49725: PUSH
49726: LD_VAR 0 39
49730: PUSH
49731: LD_VAR 0 40
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: PUSH
49744: LD_VAR 0 4
49748: PUSH
49749: LD_INT 1
49751: PLUS
49752: ARRAY
49753: ST_TO_ADDR
49754: GO 50121
49756: LD_INT 6
49758: DOUBLE
49759: EQUAL
49760: IFTRUE 49812
49762: LD_INT 7
49764: DOUBLE
49765: EQUAL
49766: IFTRUE 49812
49768: LD_INT 8
49770: DOUBLE
49771: EQUAL
49772: IFTRUE 49812
49774: LD_INT 13
49776: DOUBLE
49777: EQUAL
49778: IFTRUE 49812
49780: LD_INT 12
49782: DOUBLE
49783: EQUAL
49784: IFTRUE 49812
49786: LD_INT 15
49788: DOUBLE
49789: EQUAL
49790: IFTRUE 49812
49792: LD_INT 11
49794: DOUBLE
49795: EQUAL
49796: IFTRUE 49812
49798: LD_INT 14
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49812
49804: LD_INT 10
49806: DOUBLE
49807: EQUAL
49808: IFTRUE 49812
49810: GO 49868
49812: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49813: LD_ADDR_VAR 0 9
49817: PUSH
49818: LD_VAR 0 41
49822: PUSH
49823: LD_VAR 0 42
49827: PUSH
49828: LD_VAR 0 43
49832: PUSH
49833: LD_VAR 0 44
49837: PUSH
49838: LD_VAR 0 45
49842: PUSH
49843: LD_VAR 0 46
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: PUSH
49856: LD_VAR 0 4
49860: PUSH
49861: LD_INT 1
49863: PLUS
49864: ARRAY
49865: ST_TO_ADDR
49866: GO 50121
49868: LD_INT 36
49870: DOUBLE
49871: EQUAL
49872: IFTRUE 49876
49874: GO 49932
49876: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49877: LD_ADDR_VAR 0 9
49881: PUSH
49882: LD_VAR 0 47
49886: PUSH
49887: LD_VAR 0 48
49891: PUSH
49892: LD_VAR 0 49
49896: PUSH
49897: LD_VAR 0 50
49901: PUSH
49902: LD_VAR 0 51
49906: PUSH
49907: LD_VAR 0 52
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: PUSH
49920: LD_VAR 0 4
49924: PUSH
49925: LD_INT 1
49927: PLUS
49928: ARRAY
49929: ST_TO_ADDR
49930: GO 50121
49932: LD_INT 4
49934: DOUBLE
49935: EQUAL
49936: IFTRUE 49958
49938: LD_INT 5
49940: DOUBLE
49941: EQUAL
49942: IFTRUE 49958
49944: LD_INT 34
49946: DOUBLE
49947: EQUAL
49948: IFTRUE 49958
49950: LD_INT 37
49952: DOUBLE
49953: EQUAL
49954: IFTRUE 49958
49956: GO 50014
49958: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49959: LD_ADDR_VAR 0 9
49963: PUSH
49964: LD_VAR 0 53
49968: PUSH
49969: LD_VAR 0 54
49973: PUSH
49974: LD_VAR 0 55
49978: PUSH
49979: LD_VAR 0 56
49983: PUSH
49984: LD_VAR 0 57
49988: PUSH
49989: LD_VAR 0 58
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: PUSH
50002: LD_VAR 0 4
50006: PUSH
50007: LD_INT 1
50009: PLUS
50010: ARRAY
50011: ST_TO_ADDR
50012: GO 50121
50014: LD_INT 31
50016: DOUBLE
50017: EQUAL
50018: IFTRUE 50064
50020: LD_INT 32
50022: DOUBLE
50023: EQUAL
50024: IFTRUE 50064
50026: LD_INT 33
50028: DOUBLE
50029: EQUAL
50030: IFTRUE 50064
50032: LD_INT 27
50034: DOUBLE
50035: EQUAL
50036: IFTRUE 50064
50038: LD_INT 26
50040: DOUBLE
50041: EQUAL
50042: IFTRUE 50064
50044: LD_INT 28
50046: DOUBLE
50047: EQUAL
50048: IFTRUE 50064
50050: LD_INT 29
50052: DOUBLE
50053: EQUAL
50054: IFTRUE 50064
50056: LD_INT 30
50058: DOUBLE
50059: EQUAL
50060: IFTRUE 50064
50062: GO 50120
50064: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50065: LD_ADDR_VAR 0 9
50069: PUSH
50070: LD_VAR 0 59
50074: PUSH
50075: LD_VAR 0 60
50079: PUSH
50080: LD_VAR 0 61
50084: PUSH
50085: LD_VAR 0 62
50089: PUSH
50090: LD_VAR 0 63
50094: PUSH
50095: LD_VAR 0 64
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: PUSH
50108: LD_VAR 0 4
50112: PUSH
50113: LD_INT 1
50115: PLUS
50116: ARRAY
50117: ST_TO_ADDR
50118: GO 50121
50120: POP
// temp_list2 = [ ] ;
50121: LD_ADDR_VAR 0 10
50125: PUSH
50126: EMPTY
50127: ST_TO_ADDR
// for i in temp_list do
50128: LD_ADDR_VAR 0 8
50132: PUSH
50133: LD_VAR 0 9
50137: PUSH
50138: FOR_IN
50139: IFFALSE 50191
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50141: LD_ADDR_VAR 0 10
50145: PUSH
50146: LD_VAR 0 10
50150: PUSH
50151: LD_VAR 0 8
50155: PUSH
50156: LD_INT 1
50158: ARRAY
50159: PUSH
50160: LD_VAR 0 2
50164: PLUS
50165: PUSH
50166: LD_VAR 0 8
50170: PUSH
50171: LD_INT 2
50173: ARRAY
50174: PUSH
50175: LD_VAR 0 3
50179: PLUS
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: EMPTY
50186: LIST
50187: ADD
50188: ST_TO_ADDR
50189: GO 50138
50191: POP
50192: POP
// result = temp_list2 ;
50193: LD_ADDR_VAR 0 7
50197: PUSH
50198: LD_VAR 0 10
50202: ST_TO_ADDR
// end ;
50203: LD_VAR 0 7
50207: RET
// export function EnemyInRange ( unit , dist ) ; begin
50208: LD_INT 0
50210: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50211: LD_ADDR_VAR 0 3
50215: PUSH
50216: LD_VAR 0 1
50220: PPUSH
50221: CALL_OW 255
50225: PPUSH
50226: LD_VAR 0 1
50230: PPUSH
50231: CALL_OW 250
50235: PPUSH
50236: LD_VAR 0 1
50240: PPUSH
50241: CALL_OW 251
50245: PPUSH
50246: LD_VAR 0 2
50250: PPUSH
50251: CALL 23465 0 4
50255: PUSH
50256: LD_INT 4
50258: ARRAY
50259: ST_TO_ADDR
// end ;
50260: LD_VAR 0 3
50264: RET
// export function PlayerSeeMe ( unit ) ; begin
50265: LD_INT 0
50267: PPUSH
// result := See ( your_side , unit ) ;
50268: LD_ADDR_VAR 0 2
50272: PUSH
50273: LD_OWVAR 2
50277: PPUSH
50278: LD_VAR 0 1
50282: PPUSH
50283: CALL_OW 292
50287: ST_TO_ADDR
// end ;
50288: LD_VAR 0 2
50292: RET
// export function ReverseDir ( unit ) ; begin
50293: LD_INT 0
50295: PPUSH
// if not unit then
50296: LD_VAR 0 1
50300: NOT
50301: IFFALSE 50305
// exit ;
50303: GO 50328
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50305: LD_ADDR_VAR 0 2
50309: PUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: CALL_OW 254
50319: PUSH
50320: LD_INT 3
50322: PLUS
50323: PUSH
50324: LD_INT 6
50326: MOD
50327: ST_TO_ADDR
// end ;
50328: LD_VAR 0 2
50332: RET
// export function ReverseArray ( array ) ; var i ; begin
50333: LD_INT 0
50335: PPUSH
50336: PPUSH
// if not array then
50337: LD_VAR 0 1
50341: NOT
50342: IFFALSE 50346
// exit ;
50344: GO 50401
// result := [ ] ;
50346: LD_ADDR_VAR 0 2
50350: PUSH
50351: EMPTY
50352: ST_TO_ADDR
// for i := array downto 1 do
50353: LD_ADDR_VAR 0 3
50357: PUSH
50358: DOUBLE
50359: LD_VAR 0 1
50363: INC
50364: ST_TO_ADDR
50365: LD_INT 1
50367: PUSH
50368: FOR_DOWNTO
50369: IFFALSE 50399
// result := Join ( result , array [ i ] ) ;
50371: LD_ADDR_VAR 0 2
50375: PUSH
50376: LD_VAR 0 2
50380: PPUSH
50381: LD_VAR 0 1
50385: PUSH
50386: LD_VAR 0 3
50390: ARRAY
50391: PPUSH
50392: CALL 55253 0 2
50396: ST_TO_ADDR
50397: GO 50368
50399: POP
50400: POP
// end ;
50401: LD_VAR 0 2
50405: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50406: LD_INT 0
50408: PPUSH
50409: PPUSH
50410: PPUSH
50411: PPUSH
50412: PPUSH
50413: PPUSH
// if not unit or not hexes then
50414: LD_VAR 0 1
50418: NOT
50419: IFTRUE 50428
50421: PUSH
50422: LD_VAR 0 2
50426: NOT
50427: OR
50428: IFFALSE 50432
// exit ;
50430: GO 50555
// dist := 9999 ;
50432: LD_ADDR_VAR 0 5
50436: PUSH
50437: LD_INT 9999
50439: ST_TO_ADDR
// for i = 1 to hexes do
50440: LD_ADDR_VAR 0 4
50444: PUSH
50445: DOUBLE
50446: LD_INT 1
50448: DEC
50449: ST_TO_ADDR
50450: LD_VAR 0 2
50454: PUSH
50455: FOR_TO
50456: IFFALSE 50543
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50458: LD_ADDR_VAR 0 6
50462: PUSH
50463: LD_VAR 0 1
50467: PPUSH
50468: LD_VAR 0 2
50472: PUSH
50473: LD_VAR 0 4
50477: ARRAY
50478: PUSH
50479: LD_INT 1
50481: ARRAY
50482: PPUSH
50483: LD_VAR 0 2
50487: PUSH
50488: LD_VAR 0 4
50492: ARRAY
50493: PUSH
50494: LD_INT 2
50496: ARRAY
50497: PPUSH
50498: CALL_OW 297
50502: ST_TO_ADDR
// if tdist < dist then
50503: LD_VAR 0 6
50507: PUSH
50508: LD_VAR 0 5
50512: LESS
50513: IFFALSE 50541
// begin hex := hexes [ i ] ;
50515: LD_ADDR_VAR 0 8
50519: PUSH
50520: LD_VAR 0 2
50524: PUSH
50525: LD_VAR 0 4
50529: ARRAY
50530: ST_TO_ADDR
// dist := tdist ;
50531: LD_ADDR_VAR 0 5
50535: PUSH
50536: LD_VAR 0 6
50540: ST_TO_ADDR
// end ; end ;
50541: GO 50455
50543: POP
50544: POP
// result := hex ;
50545: LD_ADDR_VAR 0 3
50549: PUSH
50550: LD_VAR 0 8
50554: ST_TO_ADDR
// end ;
50555: LD_VAR 0 3
50559: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50560: LD_INT 0
50562: PPUSH
50563: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50564: LD_VAR 0 1
50568: NOT
50569: IFTRUE 50608
50571: PUSH
50572: LD_VAR 0 1
50576: PUSH
50577: LD_INT 21
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 23
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PPUSH
50601: CALL_OW 69
50605: IN
50606: NOT
50607: OR
50608: IFFALSE 50612
// exit ;
50610: GO 50659
// for i = 1 to 3 do
50612: LD_ADDR_VAR 0 3
50616: PUSH
50617: DOUBLE
50618: LD_INT 1
50620: DEC
50621: ST_TO_ADDR
50622: LD_INT 3
50624: PUSH
50625: FOR_TO
50626: IFFALSE 50657
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50628: LD_VAR 0 1
50632: PPUSH
50633: CALL_OW 250
50637: PPUSH
50638: LD_VAR 0 1
50642: PPUSH
50643: CALL_OW 251
50647: PPUSH
50648: LD_INT 1
50650: PPUSH
50651: CALL_OW 453
50655: GO 50625
50657: POP
50658: POP
// end ;
50659: LD_VAR 0 2
50663: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50664: LD_INT 0
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
// if not unit or not enemy_unit then
50672: LD_VAR 0 1
50676: NOT
50677: IFTRUE 50686
50679: PUSH
50680: LD_VAR 0 2
50684: NOT
50685: OR
50686: IFFALSE 50690
// exit ;
50688: GO 51171
// if GetLives ( i ) < 250 then
50690: LD_VAR 0 4
50694: PPUSH
50695: CALL_OW 256
50699: PUSH
50700: LD_INT 250
50702: LESS
50703: IFFALSE 50716
// begin ComAutodestruct ( i ) ;
50705: LD_VAR 0 4
50709: PPUSH
50710: CALL 50560 0 1
// exit ;
50714: GO 51171
// end ; x := GetX ( enemy_unit ) ;
50716: LD_ADDR_VAR 0 7
50720: PUSH
50721: LD_VAR 0 2
50725: PPUSH
50726: CALL_OW 250
50730: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50731: LD_ADDR_VAR 0 8
50735: PUSH
50736: LD_VAR 0 2
50740: PPUSH
50741: CALL_OW 251
50745: ST_TO_ADDR
// if not x or not y then
50746: LD_VAR 0 7
50750: NOT
50751: IFTRUE 50760
50753: PUSH
50754: LD_VAR 0 8
50758: NOT
50759: OR
50760: IFFALSE 50764
// exit ;
50762: GO 51171
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50764: LD_ADDR_VAR 0 6
50768: PUSH
50769: LD_VAR 0 7
50773: PPUSH
50774: LD_INT 0
50776: PPUSH
50777: LD_INT 4
50779: PPUSH
50780: CALL_OW 272
50784: PUSH
50785: LD_VAR 0 8
50789: PPUSH
50790: LD_INT 0
50792: PPUSH
50793: LD_INT 4
50795: PPUSH
50796: CALL_OW 273
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_VAR 0 7
50809: PPUSH
50810: LD_INT 1
50812: PPUSH
50813: LD_INT 4
50815: PPUSH
50816: CALL_OW 272
50820: PUSH
50821: LD_VAR 0 8
50825: PPUSH
50826: LD_INT 1
50828: PPUSH
50829: LD_INT 4
50831: PPUSH
50832: CALL_OW 273
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_VAR 0 7
50845: PPUSH
50846: LD_INT 2
50848: PPUSH
50849: LD_INT 4
50851: PPUSH
50852: CALL_OW 272
50856: PUSH
50857: LD_VAR 0 8
50861: PPUSH
50862: LD_INT 2
50864: PPUSH
50865: LD_INT 4
50867: PPUSH
50868: CALL_OW 273
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_VAR 0 7
50881: PPUSH
50882: LD_INT 3
50884: PPUSH
50885: LD_INT 4
50887: PPUSH
50888: CALL_OW 272
50892: PUSH
50893: LD_VAR 0 8
50897: PPUSH
50898: LD_INT 3
50900: PPUSH
50901: LD_INT 4
50903: PPUSH
50904: CALL_OW 273
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_VAR 0 7
50917: PPUSH
50918: LD_INT 4
50920: PPUSH
50921: LD_INT 4
50923: PPUSH
50924: CALL_OW 272
50928: PUSH
50929: LD_VAR 0 8
50933: PPUSH
50934: LD_INT 4
50936: PPUSH
50937: LD_INT 4
50939: PPUSH
50940: CALL_OW 273
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_VAR 0 7
50953: PPUSH
50954: LD_INT 5
50956: PPUSH
50957: LD_INT 4
50959: PPUSH
50960: CALL_OW 272
50964: PUSH
50965: LD_VAR 0 8
50969: PPUSH
50970: LD_INT 5
50972: PPUSH
50973: LD_INT 4
50975: PPUSH
50976: CALL_OW 273
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: ST_TO_ADDR
// for i = tmp downto 1 do
50993: LD_ADDR_VAR 0 4
50997: PUSH
50998: DOUBLE
50999: LD_VAR 0 6
51003: INC
51004: ST_TO_ADDR
51005: LD_INT 1
51007: PUSH
51008: FOR_DOWNTO
51009: IFFALSE 51112
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51011: LD_VAR 0 6
51015: PUSH
51016: LD_VAR 0 4
51020: ARRAY
51021: PUSH
51022: LD_INT 1
51024: ARRAY
51025: PPUSH
51026: LD_VAR 0 6
51030: PUSH
51031: LD_VAR 0 4
51035: ARRAY
51036: PUSH
51037: LD_INT 2
51039: ARRAY
51040: PPUSH
51041: CALL_OW 488
51045: NOT
51046: IFTRUE 51088
51048: PUSH
51049: LD_VAR 0 6
51053: PUSH
51054: LD_VAR 0 4
51058: ARRAY
51059: PUSH
51060: LD_INT 1
51062: ARRAY
51063: PPUSH
51064: LD_VAR 0 6
51068: PUSH
51069: LD_VAR 0 4
51073: ARRAY
51074: PUSH
51075: LD_INT 2
51077: ARRAY
51078: PPUSH
51079: CALL_OW 428
51083: PUSH
51084: LD_INT 0
51086: NONEQUAL
51087: OR
51088: IFFALSE 51110
// tmp := Delete ( tmp , i ) ;
51090: LD_ADDR_VAR 0 6
51094: PUSH
51095: LD_VAR 0 6
51099: PPUSH
51100: LD_VAR 0 4
51104: PPUSH
51105: CALL_OW 3
51109: ST_TO_ADDR
51110: GO 51008
51112: POP
51113: POP
// j := GetClosestHex ( unit , tmp ) ;
51114: LD_ADDR_VAR 0 5
51118: PUSH
51119: LD_VAR 0 1
51123: PPUSH
51124: LD_VAR 0 6
51128: PPUSH
51129: CALL 50406 0 2
51133: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51134: LD_VAR 0 1
51138: PPUSH
51139: LD_VAR 0 5
51143: PUSH
51144: LD_INT 1
51146: ARRAY
51147: PPUSH
51148: LD_VAR 0 5
51152: PUSH
51153: LD_INT 2
51155: ARRAY
51156: PPUSH
51157: CALL_OW 111
// result := j ;
51161: LD_ADDR_VAR 0 3
51165: PUSH
51166: LD_VAR 0 5
51170: ST_TO_ADDR
// end ;
51171: LD_VAR 0 3
51175: RET
// export function PrepareApemanSoldier ( ) ; begin
51176: LD_INT 0
51178: PPUSH
// uc_nation := 0 ;
51179: LD_ADDR_OWVAR 21
51183: PUSH
51184: LD_INT 0
51186: ST_TO_ADDR
// hc_sex := sex_male ;
51187: LD_ADDR_OWVAR 27
51191: PUSH
51192: LD_INT 1
51194: ST_TO_ADDR
// hc_name :=  ;
51195: LD_ADDR_OWVAR 26
51199: PUSH
51200: LD_STRING 
51202: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51203: LD_ADDR_OWVAR 28
51207: PUSH
51208: LD_INT 15
51210: ST_TO_ADDR
// hc_gallery :=  ;
51211: LD_ADDR_OWVAR 33
51215: PUSH
51216: LD_STRING 
51218: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51219: LD_ADDR_OWVAR 31
51223: PUSH
51224: LD_INT 0
51226: PPUSH
51227: LD_INT 3
51229: PPUSH
51230: CALL_OW 12
51234: PUSH
51235: LD_INT 0
51237: PPUSH
51238: LD_INT 3
51240: PPUSH
51241: CALL_OW 12
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51258: LD_ADDR_OWVAR 29
51262: PUSH
51263: LD_INT 10
51265: PUSH
51266: LD_INT 12
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// end ;
51273: LD_VAR 0 1
51277: RET
// export function PrepareApemanEngineer ( ) ; begin
51278: LD_INT 0
51280: PPUSH
// uc_nation := 0 ;
51281: LD_ADDR_OWVAR 21
51285: PUSH
51286: LD_INT 0
51288: ST_TO_ADDR
// hc_sex := sex_male ;
51289: LD_ADDR_OWVAR 27
51293: PUSH
51294: LD_INT 1
51296: ST_TO_ADDR
// hc_name :=  ;
51297: LD_ADDR_OWVAR 26
51301: PUSH
51302: LD_STRING 
51304: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51305: LD_ADDR_OWVAR 28
51309: PUSH
51310: LD_INT 16
51312: ST_TO_ADDR
// hc_gallery :=  ;
51313: LD_ADDR_OWVAR 33
51317: PUSH
51318: LD_STRING 
51320: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51321: LD_ADDR_OWVAR 31
51325: PUSH
51326: LD_INT 0
51328: PPUSH
51329: LD_INT 3
51331: PPUSH
51332: CALL_OW 12
51336: PUSH
51337: LD_INT 0
51339: PPUSH
51340: LD_INT 3
51342: PPUSH
51343: CALL_OW 12
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51360: LD_ADDR_OWVAR 29
51364: PUSH
51365: LD_INT 10
51367: PUSH
51368: LD_INT 12
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// end ;
51375: LD_VAR 0 1
51379: RET
// export function PrepareApeman ( agressivity ) ; begin
51380: LD_INT 0
51382: PPUSH
// uc_side := 0 ;
51383: LD_ADDR_OWVAR 20
51387: PUSH
51388: LD_INT 0
51390: ST_TO_ADDR
// uc_nation := 0 ;
51391: LD_ADDR_OWVAR 21
51395: PUSH
51396: LD_INT 0
51398: ST_TO_ADDR
// hc_sex := sex_male ;
51399: LD_ADDR_OWVAR 27
51403: PUSH
51404: LD_INT 1
51406: ST_TO_ADDR
// hc_class := class_apeman ;
51407: LD_ADDR_OWVAR 28
51411: PUSH
51412: LD_INT 12
51414: ST_TO_ADDR
// hc_gallery :=  ;
51415: LD_ADDR_OWVAR 33
51419: PUSH
51420: LD_STRING 
51422: ST_TO_ADDR
// hc_name :=  ;
51423: LD_ADDR_OWVAR 26
51427: PUSH
51428: LD_STRING 
51430: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51431: LD_ADDR_OWVAR 29
51435: PUSH
51436: LD_INT 10
51438: PUSH
51439: LD_INT 12
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// if agressivity = 0 then
51446: LD_VAR 0 1
51450: PUSH
51451: LD_INT 0
51453: EQUAL
51454: IFFALSE 51466
// hc_agressivity := 0 else
51456: LD_ADDR_OWVAR 35
51460: PUSH
51461: LD_INT 0
51463: ST_TO_ADDR
51464: GO 51487
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51466: LD_ADDR_OWVAR 35
51470: PUSH
51471: LD_VAR 0 1
51475: NEG
51476: PPUSH
51477: LD_VAR 0 1
51481: PPUSH
51482: CALL_OW 12
51486: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51487: LD_ADDR_OWVAR 31
51491: PUSH
51492: LD_INT 0
51494: PPUSH
51495: LD_INT 3
51497: PPUSH
51498: CALL_OW 12
51502: PUSH
51503: LD_INT 0
51505: PPUSH
51506: LD_INT 3
51508: PPUSH
51509: CALL_OW 12
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// end ;
51526: LD_VAR 0 2
51530: RET
// export function PrepareTiger ( agressivity ) ; begin
51531: LD_INT 0
51533: PPUSH
// uc_side := 0 ;
51534: LD_ADDR_OWVAR 20
51538: PUSH
51539: LD_INT 0
51541: ST_TO_ADDR
// uc_nation := 0 ;
51542: LD_ADDR_OWVAR 21
51546: PUSH
51547: LD_INT 0
51549: ST_TO_ADDR
// InitHc ;
51550: CALL_OW 19
// hc_class := class_tiger ;
51554: LD_ADDR_OWVAR 28
51558: PUSH
51559: LD_INT 14
51561: ST_TO_ADDR
// hc_gallery :=  ;
51562: LD_ADDR_OWVAR 33
51566: PUSH
51567: LD_STRING 
51569: ST_TO_ADDR
// hc_name :=  ;
51570: LD_ADDR_OWVAR 26
51574: PUSH
51575: LD_STRING 
51577: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51578: LD_ADDR_OWVAR 35
51582: PUSH
51583: LD_VAR 0 1
51587: NEG
51588: PPUSH
51589: LD_VAR 0 1
51593: PPUSH
51594: CALL_OW 12
51598: ST_TO_ADDR
// end ;
51599: LD_VAR 0 2
51603: RET
// export function PrepareEnchidna ( ) ; begin
51604: LD_INT 0
51606: PPUSH
// uc_side := 0 ;
51607: LD_ADDR_OWVAR 20
51611: PUSH
51612: LD_INT 0
51614: ST_TO_ADDR
// uc_nation := 0 ;
51615: LD_ADDR_OWVAR 21
51619: PUSH
51620: LD_INT 0
51622: ST_TO_ADDR
// InitHc ;
51623: CALL_OW 19
// hc_class := class_baggie ;
51627: LD_ADDR_OWVAR 28
51631: PUSH
51632: LD_INT 13
51634: ST_TO_ADDR
// hc_gallery :=  ;
51635: LD_ADDR_OWVAR 33
51639: PUSH
51640: LD_STRING 
51642: ST_TO_ADDR
// hc_name :=  ;
51643: LD_ADDR_OWVAR 26
51647: PUSH
51648: LD_STRING 
51650: ST_TO_ADDR
// end ;
51651: LD_VAR 0 1
51655: RET
// export function PrepareFrog ( ) ; begin
51656: LD_INT 0
51658: PPUSH
// uc_side := 0 ;
51659: LD_ADDR_OWVAR 20
51663: PUSH
51664: LD_INT 0
51666: ST_TO_ADDR
// uc_nation := 0 ;
51667: LD_ADDR_OWVAR 21
51671: PUSH
51672: LD_INT 0
51674: ST_TO_ADDR
// InitHc ;
51675: CALL_OW 19
// hc_class := class_frog ;
51679: LD_ADDR_OWVAR 28
51683: PUSH
51684: LD_INT 19
51686: ST_TO_ADDR
// hc_gallery :=  ;
51687: LD_ADDR_OWVAR 33
51691: PUSH
51692: LD_STRING 
51694: ST_TO_ADDR
// hc_name :=  ;
51695: LD_ADDR_OWVAR 26
51699: PUSH
51700: LD_STRING 
51702: ST_TO_ADDR
// end ;
51703: LD_VAR 0 1
51707: RET
// export function PrepareFish ( ) ; begin
51708: LD_INT 0
51710: PPUSH
// uc_side := 0 ;
51711: LD_ADDR_OWVAR 20
51715: PUSH
51716: LD_INT 0
51718: ST_TO_ADDR
// uc_nation := 0 ;
51719: LD_ADDR_OWVAR 21
51723: PUSH
51724: LD_INT 0
51726: ST_TO_ADDR
// InitHc ;
51727: CALL_OW 19
// hc_class := class_fish ;
51731: LD_ADDR_OWVAR 28
51735: PUSH
51736: LD_INT 20
51738: ST_TO_ADDR
// hc_gallery :=  ;
51739: LD_ADDR_OWVAR 33
51743: PUSH
51744: LD_STRING 
51746: ST_TO_ADDR
// hc_name :=  ;
51747: LD_ADDR_OWVAR 26
51751: PUSH
51752: LD_STRING 
51754: ST_TO_ADDR
// end ;
51755: LD_VAR 0 1
51759: RET
// export function PrepareBird ( ) ; begin
51760: LD_INT 0
51762: PPUSH
// uc_side := 0 ;
51763: LD_ADDR_OWVAR 20
51767: PUSH
51768: LD_INT 0
51770: ST_TO_ADDR
// uc_nation := 0 ;
51771: LD_ADDR_OWVAR 21
51775: PUSH
51776: LD_INT 0
51778: ST_TO_ADDR
// InitHc ;
51779: CALL_OW 19
// hc_class := class_phororhacos ;
51783: LD_ADDR_OWVAR 28
51787: PUSH
51788: LD_INT 18
51790: ST_TO_ADDR
// hc_gallery :=  ;
51791: LD_ADDR_OWVAR 33
51795: PUSH
51796: LD_STRING 
51798: ST_TO_ADDR
// hc_name :=  ;
51799: LD_ADDR_OWVAR 26
51803: PUSH
51804: LD_STRING 
51806: ST_TO_ADDR
// end ;
51807: LD_VAR 0 1
51811: RET
// export function PrepareHorse ( ) ; begin
51812: LD_INT 0
51814: PPUSH
// uc_side := 0 ;
51815: LD_ADDR_OWVAR 20
51819: PUSH
51820: LD_INT 0
51822: ST_TO_ADDR
// uc_nation := 0 ;
51823: LD_ADDR_OWVAR 21
51827: PUSH
51828: LD_INT 0
51830: ST_TO_ADDR
// InitHc ;
51831: CALL_OW 19
// hc_class := class_horse ;
51835: LD_ADDR_OWVAR 28
51839: PUSH
51840: LD_INT 21
51842: ST_TO_ADDR
// hc_gallery :=  ;
51843: LD_ADDR_OWVAR 33
51847: PUSH
51848: LD_STRING 
51850: ST_TO_ADDR
// hc_name :=  ;
51851: LD_ADDR_OWVAR 26
51855: PUSH
51856: LD_STRING 
51858: ST_TO_ADDR
// end ;
51859: LD_VAR 0 1
51863: RET
// export function PrepareMastodont ( ) ; begin
51864: LD_INT 0
51866: PPUSH
// uc_side := 0 ;
51867: LD_ADDR_OWVAR 20
51871: PUSH
51872: LD_INT 0
51874: ST_TO_ADDR
// uc_nation := 0 ;
51875: LD_ADDR_OWVAR 21
51879: PUSH
51880: LD_INT 0
51882: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51883: LD_ADDR_OWVAR 37
51887: PUSH
51888: LD_INT 31
51890: ST_TO_ADDR
// vc_control := control_rider ;
51891: LD_ADDR_OWVAR 38
51895: PUSH
51896: LD_INT 4
51898: ST_TO_ADDR
// end ;
51899: LD_VAR 0 1
51903: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51904: LD_INT 0
51906: PPUSH
51907: PPUSH
51908: PPUSH
// uc_side = 0 ;
51909: LD_ADDR_OWVAR 20
51913: PUSH
51914: LD_INT 0
51916: ST_TO_ADDR
// uc_nation = 0 ;
51917: LD_ADDR_OWVAR 21
51921: PUSH
51922: LD_INT 0
51924: ST_TO_ADDR
// InitHc_All ( ) ;
51925: CALL_OW 584
// InitVc ;
51929: CALL_OW 20
// if mastodonts then
51933: LD_VAR 0 6
51937: IFFALSE 52004
// for i = 1 to mastodonts do
51939: LD_ADDR_VAR 0 11
51943: PUSH
51944: DOUBLE
51945: LD_INT 1
51947: DEC
51948: ST_TO_ADDR
51949: LD_VAR 0 6
51953: PUSH
51954: FOR_TO
51955: IFFALSE 52002
// begin vc_chassis := 31 ;
51957: LD_ADDR_OWVAR 37
51961: PUSH
51962: LD_INT 31
51964: ST_TO_ADDR
// vc_control := control_rider ;
51965: LD_ADDR_OWVAR 38
51969: PUSH
51970: LD_INT 4
51972: ST_TO_ADDR
// animal := CreateVehicle ;
51973: LD_ADDR_VAR 0 12
51977: PUSH
51978: CALL_OW 45
51982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51983: LD_VAR 0 12
51987: PPUSH
51988: LD_VAR 0 8
51992: PPUSH
51993: LD_INT 0
51995: PPUSH
51996: CALL 54146 0 3
// end ;
52000: GO 51954
52002: POP
52003: POP
// if horses then
52004: LD_VAR 0 5
52008: IFFALSE 52075
// for i = 1 to horses do
52010: LD_ADDR_VAR 0 11
52014: PUSH
52015: DOUBLE
52016: LD_INT 1
52018: DEC
52019: ST_TO_ADDR
52020: LD_VAR 0 5
52024: PUSH
52025: FOR_TO
52026: IFFALSE 52073
// begin hc_class := 21 ;
52028: LD_ADDR_OWVAR 28
52032: PUSH
52033: LD_INT 21
52035: ST_TO_ADDR
// hc_gallery :=  ;
52036: LD_ADDR_OWVAR 33
52040: PUSH
52041: LD_STRING 
52043: ST_TO_ADDR
// animal := CreateHuman ;
52044: LD_ADDR_VAR 0 12
52048: PUSH
52049: CALL_OW 44
52053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52054: LD_VAR 0 12
52058: PPUSH
52059: LD_VAR 0 8
52063: PPUSH
52064: LD_INT 0
52066: PPUSH
52067: CALL 54146 0 3
// end ;
52071: GO 52025
52073: POP
52074: POP
// if birds then
52075: LD_VAR 0 1
52079: IFFALSE 52146
// for i = 1 to birds do
52081: LD_ADDR_VAR 0 11
52085: PUSH
52086: DOUBLE
52087: LD_INT 1
52089: DEC
52090: ST_TO_ADDR
52091: LD_VAR 0 1
52095: PUSH
52096: FOR_TO
52097: IFFALSE 52144
// begin hc_class := 18 ;
52099: LD_ADDR_OWVAR 28
52103: PUSH
52104: LD_INT 18
52106: ST_TO_ADDR
// hc_gallery =  ;
52107: LD_ADDR_OWVAR 33
52111: PUSH
52112: LD_STRING 
52114: ST_TO_ADDR
// animal := CreateHuman ;
52115: LD_ADDR_VAR 0 12
52119: PUSH
52120: CALL_OW 44
52124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52125: LD_VAR 0 12
52129: PPUSH
52130: LD_VAR 0 8
52134: PPUSH
52135: LD_INT 0
52137: PPUSH
52138: CALL 54146 0 3
// end ;
52142: GO 52096
52144: POP
52145: POP
// if tigers then
52146: LD_VAR 0 2
52150: IFFALSE 52234
// for i = 1 to tigers do
52152: LD_ADDR_VAR 0 11
52156: PUSH
52157: DOUBLE
52158: LD_INT 1
52160: DEC
52161: ST_TO_ADDR
52162: LD_VAR 0 2
52166: PUSH
52167: FOR_TO
52168: IFFALSE 52232
// begin hc_class = class_tiger ;
52170: LD_ADDR_OWVAR 28
52174: PUSH
52175: LD_INT 14
52177: ST_TO_ADDR
// hc_gallery =  ;
52178: LD_ADDR_OWVAR 33
52182: PUSH
52183: LD_STRING 
52185: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52186: LD_ADDR_OWVAR 35
52190: PUSH
52191: LD_INT 7
52193: NEG
52194: PPUSH
52195: LD_INT 7
52197: PPUSH
52198: CALL_OW 12
52202: ST_TO_ADDR
// animal := CreateHuman ;
52203: LD_ADDR_VAR 0 12
52207: PUSH
52208: CALL_OW 44
52212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52213: LD_VAR 0 12
52217: PPUSH
52218: LD_VAR 0 8
52222: PPUSH
52223: LD_INT 0
52225: PPUSH
52226: CALL 54146 0 3
// end ;
52230: GO 52167
52232: POP
52233: POP
// if apemans then
52234: LD_VAR 0 3
52238: IFFALSE 52361
// for i = 1 to apemans do
52240: LD_ADDR_VAR 0 11
52244: PUSH
52245: DOUBLE
52246: LD_INT 1
52248: DEC
52249: ST_TO_ADDR
52250: LD_VAR 0 3
52254: PUSH
52255: FOR_TO
52256: IFFALSE 52359
// begin hc_class = class_apeman ;
52258: LD_ADDR_OWVAR 28
52262: PUSH
52263: LD_INT 12
52265: ST_TO_ADDR
// hc_gallery =  ;
52266: LD_ADDR_OWVAR 33
52270: PUSH
52271: LD_STRING 
52273: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52274: LD_ADDR_OWVAR 35
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PPUSH
52283: LD_INT 2
52285: PPUSH
52286: CALL_OW 12
52290: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52291: LD_ADDR_OWVAR 31
52295: PUSH
52296: LD_INT 1
52298: PPUSH
52299: LD_INT 3
52301: PPUSH
52302: CALL_OW 12
52306: PUSH
52307: LD_INT 1
52309: PPUSH
52310: LD_INT 3
52312: PPUSH
52313: CALL_OW 12
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// animal := CreateHuman ;
52330: LD_ADDR_VAR 0 12
52334: PUSH
52335: CALL_OW 44
52339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52340: LD_VAR 0 12
52344: PPUSH
52345: LD_VAR 0 8
52349: PPUSH
52350: LD_INT 0
52352: PPUSH
52353: CALL 54146 0 3
// end ;
52357: GO 52255
52359: POP
52360: POP
// if enchidnas then
52361: LD_VAR 0 4
52365: IFFALSE 52432
// for i = 1 to enchidnas do
52367: LD_ADDR_VAR 0 11
52371: PUSH
52372: DOUBLE
52373: LD_INT 1
52375: DEC
52376: ST_TO_ADDR
52377: LD_VAR 0 4
52381: PUSH
52382: FOR_TO
52383: IFFALSE 52430
// begin hc_class = 13 ;
52385: LD_ADDR_OWVAR 28
52389: PUSH
52390: LD_INT 13
52392: ST_TO_ADDR
// hc_gallery =  ;
52393: LD_ADDR_OWVAR 33
52397: PUSH
52398: LD_STRING 
52400: ST_TO_ADDR
// animal := CreateHuman ;
52401: LD_ADDR_VAR 0 12
52405: PUSH
52406: CALL_OW 44
52410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52411: LD_VAR 0 12
52415: PPUSH
52416: LD_VAR 0 8
52420: PPUSH
52421: LD_INT 0
52423: PPUSH
52424: CALL 54146 0 3
// end ;
52428: GO 52382
52430: POP
52431: POP
// if fishes then
52432: LD_VAR 0 7
52436: IFFALSE 52503
// for i = 1 to fishes do
52438: LD_ADDR_VAR 0 11
52442: PUSH
52443: DOUBLE
52444: LD_INT 1
52446: DEC
52447: ST_TO_ADDR
52448: LD_VAR 0 7
52452: PUSH
52453: FOR_TO
52454: IFFALSE 52501
// begin hc_class = 20 ;
52456: LD_ADDR_OWVAR 28
52460: PUSH
52461: LD_INT 20
52463: ST_TO_ADDR
// hc_gallery =  ;
52464: LD_ADDR_OWVAR 33
52468: PUSH
52469: LD_STRING 
52471: ST_TO_ADDR
// animal := CreateHuman ;
52472: LD_ADDR_VAR 0 12
52476: PUSH
52477: CALL_OW 44
52481: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52482: LD_VAR 0 12
52486: PPUSH
52487: LD_VAR 0 9
52491: PPUSH
52492: LD_INT 0
52494: PPUSH
52495: CALL 54146 0 3
// end ;
52499: GO 52453
52501: POP
52502: POP
// end ;
52503: LD_VAR 0 10
52507: RET
// export function WantHeal ( sci , unit ) ; begin
52508: LD_INT 0
52510: PPUSH
// if GetTaskList ( sci ) > 0 then
52511: LD_VAR 0 1
52515: PPUSH
52516: CALL_OW 437
52520: PUSH
52521: LD_INT 0
52523: GREATER
52524: IFFALSE 52596
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52526: LD_VAR 0 1
52530: PPUSH
52531: CALL_OW 437
52535: PUSH
52536: LD_INT 1
52538: ARRAY
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PUSH
52544: LD_STRING l
52546: EQUAL
52547: IFFALSE 52574
52549: PUSH
52550: LD_VAR 0 1
52554: PPUSH
52555: CALL_OW 437
52559: PUSH
52560: LD_INT 1
52562: ARRAY
52563: PUSH
52564: LD_INT 4
52566: ARRAY
52567: PUSH
52568: LD_VAR 0 2
52572: EQUAL
52573: AND
52574: IFFALSE 52586
// result := true else
52576: LD_ADDR_VAR 0 3
52580: PUSH
52581: LD_INT 1
52583: ST_TO_ADDR
52584: GO 52594
// result := false ;
52586: LD_ADDR_VAR 0 3
52590: PUSH
52591: LD_INT 0
52593: ST_TO_ADDR
// end else
52594: GO 52604
// result := false ;
52596: LD_ADDR_VAR 0 3
52600: PUSH
52601: LD_INT 0
52603: ST_TO_ADDR
// end ;
52604: LD_VAR 0 3
52608: RET
// export function HealTarget ( sci ) ; begin
52609: LD_INT 0
52611: PPUSH
// if not sci then
52612: LD_VAR 0 1
52616: NOT
52617: IFFALSE 52621
// exit ;
52619: GO 52686
// result := 0 ;
52621: LD_ADDR_VAR 0 2
52625: PUSH
52626: LD_INT 0
52628: ST_TO_ADDR
// if GetTaskList ( sci ) then
52629: LD_VAR 0 1
52633: PPUSH
52634: CALL_OW 437
52638: IFFALSE 52686
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52640: LD_VAR 0 1
52644: PPUSH
52645: CALL_OW 437
52649: PUSH
52650: LD_INT 1
52652: ARRAY
52653: PUSH
52654: LD_INT 1
52656: ARRAY
52657: PUSH
52658: LD_STRING l
52660: EQUAL
52661: IFFALSE 52686
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52663: LD_ADDR_VAR 0 2
52667: PUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 437
52677: PUSH
52678: LD_INT 1
52680: ARRAY
52681: PUSH
52682: LD_INT 4
52684: ARRAY
52685: ST_TO_ADDR
// end ;
52686: LD_VAR 0 2
52690: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52691: LD_INT 0
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
// if not base_units then
52697: LD_VAR 0 1
52701: NOT
52702: IFFALSE 52706
// exit ;
52704: GO 52793
// result := false ;
52706: LD_ADDR_VAR 0 2
52710: PUSH
52711: LD_INT 0
52713: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52714: LD_ADDR_VAR 0 5
52718: PUSH
52719: LD_VAR 0 1
52723: PPUSH
52724: LD_INT 21
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PPUSH
52734: CALL_OW 72
52738: ST_TO_ADDR
// if not tmp then
52739: LD_VAR 0 5
52743: NOT
52744: IFFALSE 52748
// exit ;
52746: GO 52793
// for i in tmp do
52748: LD_ADDR_VAR 0 3
52752: PUSH
52753: LD_VAR 0 5
52757: PUSH
52758: FOR_IN
52759: IFFALSE 52791
// begin result := EnemyInRange ( i , 22 ) ;
52761: LD_ADDR_VAR 0 2
52765: PUSH
52766: LD_VAR 0 3
52770: PPUSH
52771: LD_INT 22
52773: PPUSH
52774: CALL 50208 0 2
52778: ST_TO_ADDR
// if result then
52779: LD_VAR 0 2
52783: IFFALSE 52789
// exit ;
52785: POP
52786: POP
52787: GO 52793
// end ;
52789: GO 52758
52791: POP
52792: POP
// end ;
52793: LD_VAR 0 2
52797: RET
// export function FilterByTag ( units , tag ) ; begin
52798: LD_INT 0
52800: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52801: LD_ADDR_VAR 0 3
52805: PUSH
52806: LD_VAR 0 1
52810: PPUSH
52811: LD_INT 120
52813: PUSH
52814: LD_VAR 0 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PPUSH
52823: CALL_OW 72
52827: ST_TO_ADDR
// end ;
52828: LD_VAR 0 3
52832: RET
// export function IsDriver ( un ) ; begin
52833: LD_INT 0
52835: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52836: LD_ADDR_VAR 0 2
52840: PUSH
52841: LD_VAR 0 1
52845: PUSH
52846: LD_INT 55
52848: PUSH
52849: EMPTY
52850: LIST
52851: PPUSH
52852: CALL_OW 69
52856: IN
52857: ST_TO_ADDR
// end ;
52858: LD_VAR 0 2
52862: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52863: LD_INT 0
52865: PPUSH
52866: PPUSH
// list := [ ] ;
52867: LD_ADDR_VAR 0 5
52871: PUSH
52872: EMPTY
52873: ST_TO_ADDR
// case d of 0 :
52874: LD_VAR 0 3
52878: PUSH
52879: LD_INT 0
52881: DOUBLE
52882: EQUAL
52883: IFTRUE 52887
52885: GO 53020
52887: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52888: LD_ADDR_VAR 0 5
52892: PUSH
52893: LD_VAR 0 1
52897: PUSH
52898: LD_INT 4
52900: MINUS
52901: PUSH
52902: LD_VAR 0 2
52906: PUSH
52907: LD_INT 4
52909: MINUS
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: PUSH
52919: LD_VAR 0 1
52923: PUSH
52924: LD_INT 3
52926: MINUS
52927: PUSH
52928: LD_VAR 0 2
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: PUSH
52941: LD_VAR 0 1
52945: PUSH
52946: LD_INT 4
52948: PLUS
52949: PUSH
52950: LD_VAR 0 2
52954: PUSH
52955: LD_INT 4
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: PUSH
52963: LD_VAR 0 1
52967: PUSH
52968: LD_INT 3
52970: PLUS
52971: PUSH
52972: LD_VAR 0 2
52976: PUSH
52977: LD_INT 3
52979: PLUS
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: PUSH
52989: LD_VAR 0 1
52993: PUSH
52994: LD_VAR 0 2
52998: PUSH
52999: LD_INT 4
53001: PLUS
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// end ; 1 :
53018: GO 53718
53020: LD_INT 1
53022: DOUBLE
53023: EQUAL
53024: IFTRUE 53028
53026: GO 53161
53028: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53029: LD_ADDR_VAR 0 5
53033: PUSH
53034: LD_VAR 0 1
53038: PUSH
53039: LD_VAR 0 2
53043: PUSH
53044: LD_INT 4
53046: MINUS
53047: PUSH
53048: LD_INT 3
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: PUSH
53056: LD_VAR 0 1
53060: PUSH
53061: LD_INT 3
53063: MINUS
53064: PUSH
53065: LD_VAR 0 2
53069: PUSH
53070: LD_INT 3
53072: MINUS
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: PUSH
53082: LD_VAR 0 1
53086: PUSH
53087: LD_INT 4
53089: MINUS
53090: PUSH
53091: LD_VAR 0 2
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: PUSH
53104: LD_VAR 0 1
53108: PUSH
53109: LD_VAR 0 2
53113: PUSH
53114: LD_INT 3
53116: PLUS
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: PUSH
53126: LD_VAR 0 1
53130: PUSH
53131: LD_INT 4
53133: PLUS
53134: PUSH
53135: LD_VAR 0 2
53139: PUSH
53140: LD_INT 4
53142: PLUS
53143: PUSH
53144: LD_INT 5
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: ST_TO_ADDR
// end ; 2 :
53159: GO 53718
53161: LD_INT 2
53163: DOUBLE
53164: EQUAL
53165: IFTRUE 53169
53167: GO 53298
53169: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53170: LD_ADDR_VAR 0 5
53174: PUSH
53175: LD_VAR 0 1
53179: PUSH
53180: LD_VAR 0 2
53184: PUSH
53185: LD_INT 3
53187: MINUS
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: PUSH
53197: LD_VAR 0 1
53201: PUSH
53202: LD_INT 4
53204: PLUS
53205: PUSH
53206: LD_VAR 0 2
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: PUSH
53219: LD_VAR 0 1
53223: PUSH
53224: LD_VAR 0 2
53228: PUSH
53229: LD_INT 4
53231: PLUS
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: PUSH
53241: LD_VAR 0 1
53245: PUSH
53246: LD_INT 3
53248: MINUS
53249: PUSH
53250: LD_VAR 0 2
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: PUSH
53263: LD_VAR 0 1
53267: PUSH
53268: LD_INT 4
53270: MINUS
53271: PUSH
53272: LD_VAR 0 2
53276: PUSH
53277: LD_INT 4
53279: MINUS
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// end ; 3 :
53296: GO 53718
53298: LD_INT 3
53300: DOUBLE
53301: EQUAL
53302: IFTRUE 53306
53304: GO 53439
53306: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53307: LD_ADDR_VAR 0 5
53311: PUSH
53312: LD_VAR 0 1
53316: PUSH
53317: LD_INT 3
53319: PLUS
53320: PUSH
53321: LD_VAR 0 2
53325: PUSH
53326: LD_INT 4
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: PUSH
53334: LD_VAR 0 1
53338: PUSH
53339: LD_INT 4
53341: PLUS
53342: PUSH
53343: LD_VAR 0 2
53347: PUSH
53348: LD_INT 4
53350: PLUS
53351: PUSH
53352: LD_INT 5
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: PUSH
53360: LD_VAR 0 1
53364: PUSH
53365: LD_INT 4
53367: MINUS
53368: PUSH
53369: LD_VAR 0 2
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: PUSH
53382: LD_VAR 0 1
53386: PUSH
53387: LD_VAR 0 2
53391: PUSH
53392: LD_INT 4
53394: MINUS
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: PUSH
53404: LD_VAR 0 1
53408: PUSH
53409: LD_INT 3
53411: MINUS
53412: PUSH
53413: LD_VAR 0 2
53417: PUSH
53418: LD_INT 3
53420: MINUS
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: ST_TO_ADDR
// end ; 4 :
53437: GO 53718
53439: LD_INT 4
53441: DOUBLE
53442: EQUAL
53443: IFTRUE 53447
53445: GO 53580
53447: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53448: LD_ADDR_VAR 0 5
53452: PUSH
53453: LD_VAR 0 1
53457: PUSH
53458: LD_VAR 0 2
53462: PUSH
53463: LD_INT 4
53465: PLUS
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: PUSH
53475: LD_VAR 0 1
53479: PUSH
53480: LD_INT 3
53482: PLUS
53483: PUSH
53484: LD_VAR 0 2
53488: PUSH
53489: LD_INT 3
53491: PLUS
53492: PUSH
53493: LD_INT 5
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: LIST
53500: PUSH
53501: LD_VAR 0 1
53505: PUSH
53506: LD_INT 4
53508: PLUS
53509: PUSH
53510: LD_VAR 0 2
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: PUSH
53523: LD_VAR 0 1
53527: PUSH
53528: LD_VAR 0 2
53532: PUSH
53533: LD_INT 3
53535: MINUS
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_INT 4
53552: MINUS
53553: PUSH
53554: LD_VAR 0 2
53558: PUSH
53559: LD_INT 4
53561: MINUS
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: ST_TO_ADDR
// end ; 5 :
53578: GO 53718
53580: LD_INT 5
53582: DOUBLE
53583: EQUAL
53584: IFTRUE 53588
53586: GO 53717
53588: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53589: LD_ADDR_VAR 0 5
53593: PUSH
53594: LD_VAR 0 1
53598: PUSH
53599: LD_INT 4
53601: MINUS
53602: PUSH
53603: LD_VAR 0 2
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: PUSH
53616: LD_VAR 0 1
53620: PUSH
53621: LD_VAR 0 2
53625: PUSH
53626: LD_INT 4
53628: MINUS
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: LIST
53637: PUSH
53638: LD_VAR 0 1
53642: PUSH
53643: LD_INT 4
53645: PLUS
53646: PUSH
53647: LD_VAR 0 2
53651: PUSH
53652: LD_INT 4
53654: PLUS
53655: PUSH
53656: LD_INT 5
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: PUSH
53664: LD_VAR 0 1
53668: PUSH
53669: LD_INT 3
53671: PLUS
53672: PUSH
53673: LD_VAR 0 2
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: PUSH
53686: LD_VAR 0 1
53690: PUSH
53691: LD_VAR 0 2
53695: PUSH
53696: LD_INT 3
53698: PLUS
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// end ; end ;
53715: GO 53718
53717: POP
// result := list ;
53718: LD_ADDR_VAR 0 4
53722: PUSH
53723: LD_VAR 0 5
53727: ST_TO_ADDR
// end ;
53728: LD_VAR 0 4
53732: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53733: LD_INT 0
53735: PPUSH
53736: PPUSH
53737: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53738: LD_VAR 0 1
53742: NOT
53743: IFTRUE 53771
53745: PUSH
53746: LD_VAR 0 2
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: LD_INT 4
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: IN
53769: NOT
53770: OR
53771: IFFALSE 53775
// exit ;
53773: GO 53858
// tmp := [ ] ;
53775: LD_ADDR_VAR 0 5
53779: PUSH
53780: EMPTY
53781: ST_TO_ADDR
// for i in units do
53782: LD_ADDR_VAR 0 4
53786: PUSH
53787: LD_VAR 0 1
53791: PUSH
53792: FOR_IN
53793: IFFALSE 53827
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53795: LD_ADDR_VAR 0 5
53799: PUSH
53800: LD_VAR 0 5
53804: PPUSH
53805: LD_VAR 0 4
53809: PPUSH
53810: LD_VAR 0 2
53814: PPUSH
53815: CALL_OW 259
53819: PPUSH
53820: CALL 55253 0 2
53824: ST_TO_ADDR
53825: GO 53792
53827: POP
53828: POP
// if not tmp then
53829: LD_VAR 0 5
53833: NOT
53834: IFFALSE 53838
// exit ;
53836: GO 53858
// result := SortListByListDesc ( units , tmp ) ;
53838: LD_ADDR_VAR 0 3
53842: PUSH
53843: LD_VAR 0 1
53847: PPUSH
53848: LD_VAR 0 5
53852: PPUSH
53853: CALL_OW 77
53857: ST_TO_ADDR
// end ;
53858: LD_VAR 0 3
53862: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53863: LD_INT 0
53865: PPUSH
53866: PPUSH
53867: PPUSH
// result := false ;
53868: LD_ADDR_VAR 0 3
53872: PUSH
53873: LD_INT 0
53875: ST_TO_ADDR
// if not building then
53876: LD_VAR 0 2
53880: NOT
53881: IFFALSE 53885
// exit ;
53883: GO 54029
// x := GetX ( building ) ;
53885: LD_ADDR_VAR 0 4
53889: PUSH
53890: LD_VAR 0 2
53894: PPUSH
53895: CALL_OW 250
53899: ST_TO_ADDR
// y := GetY ( building ) ;
53900: LD_ADDR_VAR 0 5
53904: PUSH
53905: LD_VAR 0 2
53909: PPUSH
53910: CALL_OW 251
53914: ST_TO_ADDR
// if not x or not y then
53915: LD_VAR 0 4
53919: NOT
53920: IFTRUE 53929
53922: PUSH
53923: LD_VAR 0 5
53927: NOT
53928: OR
53929: IFFALSE 53933
// exit ;
53931: GO 54029
// if GetTaskList ( unit ) then
53933: LD_VAR 0 1
53937: PPUSH
53938: CALL_OW 437
53942: IFFALSE 54029
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53944: LD_STRING e
53946: PUSH
53947: LD_VAR 0 1
53951: PPUSH
53952: CALL_OW 437
53956: PUSH
53957: LD_INT 1
53959: ARRAY
53960: PUSH
53961: LD_INT 1
53963: ARRAY
53964: EQUAL
53965: IFFALSE 53992
53967: PUSH
53968: LD_VAR 0 4
53972: PUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: CALL_OW 437
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: PUSH
53987: LD_INT 2
53989: ARRAY
53990: EQUAL
53991: AND
53992: IFFALSE 54019
53994: PUSH
53995: LD_VAR 0 5
53999: PUSH
54000: LD_VAR 0 1
54004: PPUSH
54005: CALL_OW 437
54009: PUSH
54010: LD_INT 1
54012: ARRAY
54013: PUSH
54014: LD_INT 3
54016: ARRAY
54017: EQUAL
54018: AND
54019: IFFALSE 54029
// result := true end ;
54021: LD_ADDR_VAR 0 3
54025: PUSH
54026: LD_INT 1
54028: ST_TO_ADDR
// end ;
54029: LD_VAR 0 3
54033: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54034: LD_INT 0
54036: PPUSH
// result := false ;
54037: LD_ADDR_VAR 0 4
54041: PUSH
54042: LD_INT 0
54044: ST_TO_ADDR
// if GetTaskList ( unit ) then
54045: LD_VAR 0 1
54049: PPUSH
54050: CALL_OW 437
54054: IFFALSE 54141
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54056: LD_STRING M
54058: PUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: CALL_OW 437
54068: PUSH
54069: LD_INT 1
54071: ARRAY
54072: PUSH
54073: LD_INT 1
54075: ARRAY
54076: EQUAL
54077: IFFALSE 54104
54079: PUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_VAR 0 1
54089: PPUSH
54090: CALL_OW 437
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: PUSH
54099: LD_INT 2
54101: ARRAY
54102: EQUAL
54103: AND
54104: IFFALSE 54131
54106: PUSH
54107: LD_VAR 0 3
54111: PUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: CALL_OW 437
54121: PUSH
54122: LD_INT 1
54124: ARRAY
54125: PUSH
54126: LD_INT 3
54128: ARRAY
54129: EQUAL
54130: AND
54131: IFFALSE 54141
// result := true ;
54133: LD_ADDR_VAR 0 4
54137: PUSH
54138: LD_INT 1
54140: ST_TO_ADDR
// end ; end ;
54141: LD_VAR 0 4
54145: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54146: LD_INT 0
54148: PPUSH
54149: PPUSH
54150: PPUSH
54151: PPUSH
// if not unit or not area then
54152: LD_VAR 0 1
54156: NOT
54157: IFTRUE 54166
54159: PUSH
54160: LD_VAR 0 2
54164: NOT
54165: OR
54166: IFFALSE 54170
// exit ;
54168: GO 54346
// tmp := AreaToList ( area , i ) ;
54170: LD_ADDR_VAR 0 6
54174: PUSH
54175: LD_VAR 0 2
54179: PPUSH
54180: LD_VAR 0 5
54184: PPUSH
54185: CALL_OW 517
54189: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54190: LD_ADDR_VAR 0 5
54194: PUSH
54195: DOUBLE
54196: LD_INT 1
54198: DEC
54199: ST_TO_ADDR
54200: LD_VAR 0 6
54204: PUSH
54205: LD_INT 1
54207: ARRAY
54208: PUSH
54209: FOR_TO
54210: IFFALSE 54344
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54212: LD_ADDR_VAR 0 7
54216: PUSH
54217: LD_VAR 0 6
54221: PUSH
54222: LD_INT 1
54224: ARRAY
54225: PUSH
54226: LD_VAR 0 5
54230: ARRAY
54231: PUSH
54232: LD_VAR 0 6
54236: PUSH
54237: LD_INT 2
54239: ARRAY
54240: PUSH
54241: LD_VAR 0 5
54245: ARRAY
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54251: LD_INT 92
54253: PUSH
54254: LD_VAR 0 7
54258: PUSH
54259: LD_INT 1
54261: ARRAY
54262: PUSH
54263: LD_VAR 0 7
54267: PUSH
54268: LD_INT 2
54270: ARRAY
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: PPUSH
54281: CALL_OW 69
54285: PUSH
54286: LD_INT 0
54288: EQUAL
54289: IFFALSE 54342
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54291: LD_VAR 0 1
54295: PPUSH
54296: LD_VAR 0 7
54300: PUSH
54301: LD_INT 1
54303: ARRAY
54304: PPUSH
54305: LD_VAR 0 7
54309: PUSH
54310: LD_INT 2
54312: ARRAY
54313: PPUSH
54314: LD_VAR 0 3
54318: PPUSH
54319: CALL_OW 48
// result := IsPlaced ( unit ) ;
54323: LD_ADDR_VAR 0 4
54327: PUSH
54328: LD_VAR 0 1
54332: PPUSH
54333: CALL_OW 305
54337: ST_TO_ADDR
// exit ;
54338: POP
54339: POP
54340: GO 54346
// end ; end ;
54342: GO 54209
54344: POP
54345: POP
// end ;
54346: LD_VAR 0 4
54350: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54351: LD_INT 0
54353: PPUSH
54354: PPUSH
54355: PPUSH
// if not side or side > 8 then
54356: LD_VAR 0 1
54360: NOT
54361: IFTRUE 54373
54363: PUSH
54364: LD_VAR 0 1
54368: PUSH
54369: LD_INT 8
54371: GREATER
54372: OR
54373: IFFALSE 54377
// exit ;
54375: GO 54564
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54377: LD_ADDR_VAR 0 4
54381: PUSH
54382: LD_INT 22
54384: PUSH
54385: LD_VAR 0 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 21
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PPUSH
54408: CALL_OW 69
54412: ST_TO_ADDR
// if not tmp then
54413: LD_VAR 0 4
54417: NOT
54418: IFFALSE 54422
// exit ;
54420: GO 54564
// enable_addtolog := true ;
54422: LD_ADDR_OWVAR 81
54426: PUSH
54427: LD_INT 1
54429: ST_TO_ADDR
// AddToLog ( [ ) ;
54430: LD_STRING [
54432: PPUSH
54433: CALL_OW 561
// for i in tmp do
54437: LD_ADDR_VAR 0 3
54441: PUSH
54442: LD_VAR 0 4
54446: PUSH
54447: FOR_IN
54448: IFFALSE 54555
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54450: LD_STRING [
54452: PUSH
54453: LD_VAR 0 3
54457: PPUSH
54458: CALL_OW 266
54462: STR
54463: PUSH
54464: LD_STRING , 
54466: STR
54467: PUSH
54468: LD_VAR 0 3
54472: PPUSH
54473: CALL_OW 250
54477: STR
54478: PUSH
54479: LD_STRING , 
54481: STR
54482: PUSH
54483: LD_VAR 0 3
54487: PPUSH
54488: CALL_OW 251
54492: STR
54493: PUSH
54494: LD_STRING , 
54496: STR
54497: PUSH
54498: LD_VAR 0 3
54502: PPUSH
54503: CALL_OW 254
54507: STR
54508: PUSH
54509: LD_STRING , 
54511: STR
54512: PUSH
54513: LD_VAR 0 3
54517: PPUSH
54518: LD_INT 1
54520: PPUSH
54521: CALL_OW 268
54525: STR
54526: PUSH
54527: LD_STRING , 
54529: STR
54530: PUSH
54531: LD_VAR 0 3
54535: PPUSH
54536: LD_INT 2
54538: PPUSH
54539: CALL_OW 268
54543: STR
54544: PUSH
54545: LD_STRING ],
54547: STR
54548: PPUSH
54549: CALL_OW 561
// end ;
54553: GO 54447
54555: POP
54556: POP
// AddToLog ( ]; ) ;
54557: LD_STRING ];
54559: PPUSH
54560: CALL_OW 561
// end ;
54564: LD_VAR 0 2
54568: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54569: LD_INT 0
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
// if not area or not rate or not max then
54576: LD_VAR 0 1
54580: NOT
54581: IFTRUE 54590
54583: PUSH
54584: LD_VAR 0 2
54588: NOT
54589: OR
54590: IFTRUE 54599
54592: PUSH
54593: LD_VAR 0 4
54597: NOT
54598: OR
54599: IFFALSE 54603
// exit ;
54601: GO 54792
// while 1 do
54603: LD_INT 1
54605: IFFALSE 54792
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54607: LD_ADDR_VAR 0 9
54611: PUSH
54612: LD_VAR 0 1
54616: PPUSH
54617: LD_INT 1
54619: PPUSH
54620: CALL_OW 287
54624: PUSH
54625: LD_INT 10
54627: MUL
54628: ST_TO_ADDR
// r := rate / 10 ;
54629: LD_ADDR_VAR 0 7
54633: PUSH
54634: LD_VAR 0 2
54638: PUSH
54639: LD_INT 10
54641: DIVREAL
54642: ST_TO_ADDR
// time := 1 1$00 ;
54643: LD_ADDR_VAR 0 8
54647: PUSH
54648: LD_INT 2100
54650: ST_TO_ADDR
// if amount < min then
54651: LD_VAR 0 9
54655: PUSH
54656: LD_VAR 0 3
54660: LESS
54661: IFFALSE 54679
// r := r * 2 else
54663: LD_ADDR_VAR 0 7
54667: PUSH
54668: LD_VAR 0 7
54672: PUSH
54673: LD_INT 2
54675: MUL
54676: ST_TO_ADDR
54677: GO 54705
// if amount > max then
54679: LD_VAR 0 9
54683: PUSH
54684: LD_VAR 0 4
54688: GREATER
54689: IFFALSE 54705
// r := r / 2 ;
54691: LD_ADDR_VAR 0 7
54695: PUSH
54696: LD_VAR 0 7
54700: PUSH
54701: LD_INT 2
54703: DIVREAL
54704: ST_TO_ADDR
// time := time / r ;
54705: LD_ADDR_VAR 0 8
54709: PUSH
54710: LD_VAR 0 8
54714: PUSH
54715: LD_VAR 0 7
54719: DIVREAL
54720: ST_TO_ADDR
// if time < 0 then
54721: LD_VAR 0 8
54725: PUSH
54726: LD_INT 0
54728: LESS
54729: IFFALSE 54746
// time := time * - 1 ;
54731: LD_ADDR_VAR 0 8
54735: PUSH
54736: LD_VAR 0 8
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: MUL
54745: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54746: LD_VAR 0 8
54750: PUSH
54751: LD_INT 35
54753: PPUSH
54754: LD_INT 875
54756: PPUSH
54757: CALL_OW 12
54761: PLUS
54762: PPUSH
54763: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54767: LD_INT 1
54769: PPUSH
54770: LD_INT 5
54772: PPUSH
54773: CALL_OW 12
54777: PPUSH
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_INT 1
54785: PPUSH
54786: CALL_OW 55
// end ;
54790: GO 54603
// end ;
54792: LD_VAR 0 5
54796: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54797: LD_INT 0
54799: PPUSH
54800: PPUSH
54801: PPUSH
54802: PPUSH
54803: PPUSH
54804: PPUSH
54805: PPUSH
54806: PPUSH
// if not turrets or not factories then
54807: LD_VAR 0 1
54811: NOT
54812: IFTRUE 54821
54814: PUSH
54815: LD_VAR 0 2
54819: NOT
54820: OR
54821: IFFALSE 54825
// exit ;
54823: GO 55132
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54825: LD_ADDR_VAR 0 10
54829: PUSH
54830: LD_INT 5
54832: PUSH
54833: LD_INT 6
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: PUSH
54853: LD_INT 5
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 24
54867: PUSH
54868: LD_INT 25
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 23
54877: PUSH
54878: LD_INT 27
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 42
54891: PUSH
54892: LD_INT 43
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 44
54901: PUSH
54902: LD_INT 46
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 45
54911: PUSH
54912: LD_INT 47
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// result := [ ] ;
54929: LD_ADDR_VAR 0 3
54933: PUSH
54934: EMPTY
54935: ST_TO_ADDR
// for i in turrets do
54936: LD_ADDR_VAR 0 4
54940: PUSH
54941: LD_VAR 0 1
54945: PUSH
54946: FOR_IN
54947: IFFALSE 55130
// begin nat := GetNation ( i ) ;
54949: LD_ADDR_VAR 0 7
54953: PUSH
54954: LD_VAR 0 4
54958: PPUSH
54959: CALL_OW 248
54963: ST_TO_ADDR
// weapon := 0 ;
54964: LD_ADDR_VAR 0 8
54968: PUSH
54969: LD_INT 0
54971: ST_TO_ADDR
// if not nat then
54972: LD_VAR 0 7
54976: NOT
54977: IFFALSE 54981
// continue ;
54979: GO 54946
// for j in list [ nat ] do
54981: LD_ADDR_VAR 0 5
54985: PUSH
54986: LD_VAR 0 10
54990: PUSH
54991: LD_VAR 0 7
54995: ARRAY
54996: PUSH
54997: FOR_IN
54998: IFFALSE 55039
// if GetBWeapon ( i ) = j [ 1 ] then
55000: LD_VAR 0 4
55004: PPUSH
55005: CALL_OW 269
55009: PUSH
55010: LD_VAR 0 5
55014: PUSH
55015: LD_INT 1
55017: ARRAY
55018: EQUAL
55019: IFFALSE 55037
// begin weapon := j [ 2 ] ;
55021: LD_ADDR_VAR 0 8
55025: PUSH
55026: LD_VAR 0 5
55030: PUSH
55031: LD_INT 2
55033: ARRAY
55034: ST_TO_ADDR
// break ;
55035: GO 55039
// end ;
55037: GO 54997
55039: POP
55040: POP
// if not weapon then
55041: LD_VAR 0 8
55045: NOT
55046: IFFALSE 55050
// continue ;
55048: GO 54946
// for k in factories do
55050: LD_ADDR_VAR 0 6
55054: PUSH
55055: LD_VAR 0 2
55059: PUSH
55060: FOR_IN
55061: IFFALSE 55126
// begin weapons := AvailableWeaponList ( k ) ;
55063: LD_ADDR_VAR 0 9
55067: PUSH
55068: LD_VAR 0 6
55072: PPUSH
55073: CALL_OW 478
55077: ST_TO_ADDR
// if not weapons then
55078: LD_VAR 0 9
55082: NOT
55083: IFFALSE 55087
// continue ;
55085: GO 55060
// if weapon in weapons then
55087: LD_VAR 0 8
55091: PUSH
55092: LD_VAR 0 9
55096: IN
55097: IFFALSE 55124
// begin result := [ i , weapon ] ;
55099: LD_ADDR_VAR 0 3
55103: PUSH
55104: LD_VAR 0 4
55108: PUSH
55109: LD_VAR 0 8
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// exit ;
55118: POP
55119: POP
55120: POP
55121: POP
55122: GO 55132
// end ; end ;
55124: GO 55060
55126: POP
55127: POP
// end ;
55128: GO 54946
55130: POP
55131: POP
// end ;
55132: LD_VAR 0 3
55136: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55137: LD_INT 0
55139: PPUSH
// if not side or side > 8 then
55140: LD_VAR 0 3
55144: NOT
55145: IFTRUE 55157
55147: PUSH
55148: LD_VAR 0 3
55152: PUSH
55153: LD_INT 8
55155: GREATER
55156: OR
55157: IFFALSE 55161
// exit ;
55159: GO 55220
// if not range then
55161: LD_VAR 0 4
55165: NOT
55166: IFFALSE 55177
// range := - 12 ;
55168: LD_ADDR_VAR 0 4
55172: PUSH
55173: LD_INT 12
55175: NEG
55176: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55177: LD_VAR 0 1
55181: PPUSH
55182: LD_VAR 0 2
55186: PPUSH
55187: LD_VAR 0 3
55191: PPUSH
55192: LD_VAR 0 4
55196: PPUSH
55197: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55201: LD_VAR 0 1
55205: PPUSH
55206: LD_VAR 0 2
55210: PPUSH
55211: LD_VAR 0 3
55215: PPUSH
55216: CALL_OW 331
// end ;
55220: LD_VAR 0 5
55224: RET
// export function Video ( mode ) ; begin
55225: LD_INT 0
55227: PPUSH
// ingame_video = mode ;
55228: LD_ADDR_OWVAR 52
55232: PUSH
55233: LD_VAR 0 1
55237: ST_TO_ADDR
// interface_hidden = mode ;
55238: LD_ADDR_OWVAR 54
55242: PUSH
55243: LD_VAR 0 1
55247: ST_TO_ADDR
// end ;
55248: LD_VAR 0 2
55252: RET
// export function Join ( array , element ) ; begin
55253: LD_INT 0
55255: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55256: LD_ADDR_VAR 0 3
55260: PUSH
55261: LD_VAR 0 1
55265: PPUSH
55266: LD_VAR 0 1
55270: PUSH
55271: LD_INT 1
55273: PLUS
55274: PPUSH
55275: LD_VAR 0 2
55279: PPUSH
55280: CALL_OW 1
55284: ST_TO_ADDR
// end ;
55285: LD_VAR 0 3
55289: RET
// export function JoinUnion ( array , element ) ; begin
55290: LD_INT 0
55292: PPUSH
// result := array union element ;
55293: LD_ADDR_VAR 0 3
55297: PUSH
55298: LD_VAR 0 1
55302: PUSH
55303: LD_VAR 0 2
55307: UNION
55308: ST_TO_ADDR
// end ;
55309: LD_VAR 0 3
55313: RET
// export function GetBehemoths ( side ) ; begin
55314: LD_INT 0
55316: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55317: LD_ADDR_VAR 0 2
55321: PUSH
55322: LD_INT 22
55324: PUSH
55325: LD_VAR 0 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 31
55336: PUSH
55337: LD_INT 25
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PPUSH
55348: CALL_OW 69
55352: ST_TO_ADDR
// end ;
55353: LD_VAR 0 2
55357: RET
// export function Shuffle ( array ) ; var i , index ; begin
55358: LD_INT 0
55360: PPUSH
55361: PPUSH
55362: PPUSH
// result := [ ] ;
55363: LD_ADDR_VAR 0 2
55367: PUSH
55368: EMPTY
55369: ST_TO_ADDR
// if not array then
55370: LD_VAR 0 1
55374: NOT
55375: IFFALSE 55379
// exit ;
55377: GO 55478
// Randomize ;
55379: CALL_OW 10
// for i = array downto 1 do
55383: LD_ADDR_VAR 0 3
55387: PUSH
55388: DOUBLE
55389: LD_VAR 0 1
55393: INC
55394: ST_TO_ADDR
55395: LD_INT 1
55397: PUSH
55398: FOR_DOWNTO
55399: IFFALSE 55476
// begin index := rand ( 1 , array ) ;
55401: LD_ADDR_VAR 0 4
55405: PUSH
55406: LD_INT 1
55408: PPUSH
55409: LD_VAR 0 1
55413: PPUSH
55414: CALL_OW 12
55418: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55419: LD_ADDR_VAR 0 2
55423: PUSH
55424: LD_VAR 0 2
55428: PPUSH
55429: LD_VAR 0 2
55433: PUSH
55434: LD_INT 1
55436: PLUS
55437: PPUSH
55438: LD_VAR 0 1
55442: PUSH
55443: LD_VAR 0 4
55447: ARRAY
55448: PPUSH
55449: CALL_OW 2
55453: ST_TO_ADDR
// array := Delete ( array , index ) ;
55454: LD_ADDR_VAR 0 1
55458: PUSH
55459: LD_VAR 0 1
55463: PPUSH
55464: LD_VAR 0 4
55468: PPUSH
55469: CALL_OW 3
55473: ST_TO_ADDR
// end ;
55474: GO 55398
55476: POP
55477: POP
// end ;
55478: LD_VAR 0 2
55482: RET
// export function GetBaseMaterials ( base ) ; begin
55483: LD_INT 0
55485: PPUSH
// result := [ 0 , 0 , 0 ] ;
55486: LD_ADDR_VAR 0 2
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// if not base then
55505: LD_VAR 0 1
55509: NOT
55510: IFFALSE 55514
// exit ;
55512: GO 55563
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55514: LD_ADDR_VAR 0 2
55518: PUSH
55519: LD_VAR 0 1
55523: PPUSH
55524: LD_INT 1
55526: PPUSH
55527: CALL_OW 275
55531: PUSH
55532: LD_VAR 0 1
55536: PPUSH
55537: LD_INT 2
55539: PPUSH
55540: CALL_OW 275
55544: PUSH
55545: LD_VAR 0 1
55549: PPUSH
55550: LD_INT 3
55552: PPUSH
55553: CALL_OW 275
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: ST_TO_ADDR
// end ;
55563: LD_VAR 0 2
55567: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55568: LD_INT 0
55570: PPUSH
55571: PPUSH
// result := array ;
55572: LD_ADDR_VAR 0 3
55576: PUSH
55577: LD_VAR 0 1
55581: ST_TO_ADDR
// if size >= result then
55582: LD_VAR 0 2
55586: PUSH
55587: LD_VAR 0 3
55591: GREATEREQUAL
55592: IFFALSE 55596
// exit ;
55594: GO 55646
// if size then
55596: LD_VAR 0 2
55600: IFFALSE 55646
// for i := array downto size do
55602: LD_ADDR_VAR 0 4
55606: PUSH
55607: DOUBLE
55608: LD_VAR 0 1
55612: INC
55613: ST_TO_ADDR
55614: LD_VAR 0 2
55618: PUSH
55619: FOR_DOWNTO
55620: IFFALSE 55644
// result := Delete ( result , result ) ;
55622: LD_ADDR_VAR 0 3
55626: PUSH
55627: LD_VAR 0 3
55631: PPUSH
55632: LD_VAR 0 3
55636: PPUSH
55637: CALL_OW 3
55641: ST_TO_ADDR
55642: GO 55619
55644: POP
55645: POP
// end ;
55646: LD_VAR 0 3
55650: RET
// export function ComExit ( unit ) ; var tmp ; begin
55651: LD_INT 0
55653: PPUSH
55654: PPUSH
// if not IsInUnit ( unit ) then
55655: LD_VAR 0 1
55659: PPUSH
55660: CALL_OW 310
55664: NOT
55665: IFFALSE 55669
// exit ;
55667: GO 55729
// tmp := IsInUnit ( unit ) ;
55669: LD_ADDR_VAR 0 3
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 310
55683: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55684: LD_VAR 0 3
55688: PPUSH
55689: CALL_OW 247
55693: PUSH
55694: LD_INT 2
55696: EQUAL
55697: IFFALSE 55710
// ComExitVehicle ( unit ) else
55699: LD_VAR 0 1
55703: PPUSH
55704: CALL_OW 121
55708: GO 55719
// ComExitBuilding ( unit ) ;
55710: LD_VAR 0 1
55714: PPUSH
55715: CALL_OW 122
// result := tmp ;
55719: LD_ADDR_VAR 0 2
55723: PUSH
55724: LD_VAR 0 3
55728: ST_TO_ADDR
// end ;
55729: LD_VAR 0 2
55733: RET
// export function ComExitAll ( units ) ; var i ; begin
55734: LD_INT 0
55736: PPUSH
55737: PPUSH
// if not units then
55738: LD_VAR 0 1
55742: NOT
55743: IFFALSE 55747
// exit ;
55745: GO 55773
// for i in units do
55747: LD_ADDR_VAR 0 3
55751: PUSH
55752: LD_VAR 0 1
55756: PUSH
55757: FOR_IN
55758: IFFALSE 55771
// ComExit ( i ) ;
55760: LD_VAR 0 3
55764: PPUSH
55765: CALL 55651 0 1
55769: GO 55757
55771: POP
55772: POP
// end ;
55773: LD_VAR 0 2
55777: RET
// export function ResetHc ; begin
55778: LD_INT 0
55780: PPUSH
// InitHc ;
55781: CALL_OW 19
// hc_importance := 0 ;
55785: LD_ADDR_OWVAR 32
55789: PUSH
55790: LD_INT 0
55792: ST_TO_ADDR
// end ;
55793: LD_VAR 0 1
55797: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55798: LD_INT 0
55800: PPUSH
55801: PPUSH
55802: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55803: LD_ADDR_VAR 0 6
55807: PUSH
55808: LD_VAR 0 1
55812: PUSH
55813: LD_VAR 0 3
55817: PLUS
55818: PUSH
55819: LD_INT 2
55821: DIV
55822: ST_TO_ADDR
// if _x < 0 then
55823: LD_VAR 0 6
55827: PUSH
55828: LD_INT 0
55830: LESS
55831: IFFALSE 55848
// _x := _x * - 1 ;
55833: LD_ADDR_VAR 0 6
55837: PUSH
55838: LD_VAR 0 6
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: MUL
55847: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55848: LD_ADDR_VAR 0 7
55852: PUSH
55853: LD_VAR 0 2
55857: PUSH
55858: LD_VAR 0 4
55862: PLUS
55863: PUSH
55864: LD_INT 2
55866: DIV
55867: ST_TO_ADDR
// if _y < 0 then
55868: LD_VAR 0 7
55872: PUSH
55873: LD_INT 0
55875: LESS
55876: IFFALSE 55893
// _y := _y * - 1 ;
55878: LD_ADDR_VAR 0 7
55882: PUSH
55883: LD_VAR 0 7
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: MUL
55892: ST_TO_ADDR
// result := [ _x , _y ] ;
55893: LD_ADDR_VAR 0 5
55897: PUSH
55898: LD_VAR 0 6
55902: PUSH
55903: LD_VAR 0 7
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// end ;
55912: LD_VAR 0 5
55916: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55917: LD_INT 0
55919: PPUSH
55920: PPUSH
55921: PPUSH
55922: PPUSH
// task := GetTaskList ( unit ) ;
55923: LD_ADDR_VAR 0 7
55927: PUSH
55928: LD_VAR 0 1
55932: PPUSH
55933: CALL_OW 437
55937: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55938: LD_VAR 0 7
55942: NOT
55943: IFFALSE 55962
55945: PUSH
55946: LD_VAR 0 1
55950: PPUSH
55951: LD_VAR 0 2
55955: PPUSH
55956: CALL_OW 308
55960: NOT
55961: AND
55962: IFFALSE 55966
// exit ;
55964: GO 56084
// if IsInArea ( unit , area ) then
55966: LD_VAR 0 1
55970: PPUSH
55971: LD_VAR 0 2
55975: PPUSH
55976: CALL_OW 308
55980: IFFALSE 55998
// begin ComMoveToArea ( unit , goAway ) ;
55982: LD_VAR 0 1
55986: PPUSH
55987: LD_VAR 0 3
55991: PPUSH
55992: CALL_OW 113
// exit ;
55996: GO 56084
// end ; if task [ 1 ] [ 1 ] <> M then
55998: LD_VAR 0 7
56002: PUSH
56003: LD_INT 1
56005: ARRAY
56006: PUSH
56007: LD_INT 1
56009: ARRAY
56010: PUSH
56011: LD_STRING M
56013: NONEQUAL
56014: IFFALSE 56018
// exit ;
56016: GO 56084
// x := task [ 1 ] [ 2 ] ;
56018: LD_ADDR_VAR 0 5
56022: PUSH
56023: LD_VAR 0 7
56027: PUSH
56028: LD_INT 1
56030: ARRAY
56031: PUSH
56032: LD_INT 2
56034: ARRAY
56035: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56036: LD_ADDR_VAR 0 6
56040: PUSH
56041: LD_VAR 0 7
56045: PUSH
56046: LD_INT 1
56048: ARRAY
56049: PUSH
56050: LD_INT 3
56052: ARRAY
56053: ST_TO_ADDR
// if InArea ( x , y , area ) then
56054: LD_VAR 0 5
56058: PPUSH
56059: LD_VAR 0 6
56063: PPUSH
56064: LD_VAR 0 2
56068: PPUSH
56069: CALL_OW 309
56073: IFFALSE 56084
// ComStop ( unit ) ;
56075: LD_VAR 0 1
56079: PPUSH
56080: CALL_OW 141
// end ;
56084: LD_VAR 0 4
56088: RET
// export function Abs ( value ) ; begin
56089: LD_INT 0
56091: PPUSH
// result := value ;
56092: LD_ADDR_VAR 0 2
56096: PUSH
56097: LD_VAR 0 1
56101: ST_TO_ADDR
// if value < 0 then
56102: LD_VAR 0 1
56106: PUSH
56107: LD_INT 0
56109: LESS
56110: IFFALSE 56127
// result := value * - 1 ;
56112: LD_ADDR_VAR 0 2
56116: PUSH
56117: LD_VAR 0 1
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: MUL
56126: ST_TO_ADDR
// end ;
56127: LD_VAR 0 2
56131: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56132: LD_INT 0
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
// if not unit or not building then
56142: LD_VAR 0 1
56146: NOT
56147: IFTRUE 56156
56149: PUSH
56150: LD_VAR 0 2
56154: NOT
56155: OR
56156: IFFALSE 56160
// exit ;
56158: GO 56388
// x := GetX ( building ) ;
56160: LD_ADDR_VAR 0 4
56164: PUSH
56165: LD_VAR 0 2
56169: PPUSH
56170: CALL_OW 250
56174: ST_TO_ADDR
// y := GetY ( building ) ;
56175: LD_ADDR_VAR 0 6
56179: PUSH
56180: LD_VAR 0 2
56184: PPUSH
56185: CALL_OW 251
56189: ST_TO_ADDR
// d := GetDir ( building ) ;
56190: LD_ADDR_VAR 0 8
56194: PUSH
56195: LD_VAR 0 2
56199: PPUSH
56200: CALL_OW 254
56204: ST_TO_ADDR
// r := 4 ;
56205: LD_ADDR_VAR 0 9
56209: PUSH
56210: LD_INT 4
56212: ST_TO_ADDR
// for i := 1 to 5 do
56213: LD_ADDR_VAR 0 10
56217: PUSH
56218: DOUBLE
56219: LD_INT 1
56221: DEC
56222: ST_TO_ADDR
56223: LD_INT 5
56225: PUSH
56226: FOR_TO
56227: IFFALSE 56386
// begin _x := ShiftX ( x , d , r + i ) ;
56229: LD_ADDR_VAR 0 5
56233: PUSH
56234: LD_VAR 0 4
56238: PPUSH
56239: LD_VAR 0 8
56243: PPUSH
56244: LD_VAR 0 9
56248: PUSH
56249: LD_VAR 0 10
56253: PLUS
56254: PPUSH
56255: CALL_OW 272
56259: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56260: LD_ADDR_VAR 0 7
56264: PUSH
56265: LD_VAR 0 6
56269: PPUSH
56270: LD_VAR 0 8
56274: PPUSH
56275: LD_VAR 0 9
56279: PUSH
56280: LD_VAR 0 10
56284: PLUS
56285: PPUSH
56286: CALL_OW 273
56290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56291: LD_VAR 0 5
56295: PPUSH
56296: LD_VAR 0 7
56300: PPUSH
56301: CALL_OW 488
56305: IFFALSE 56340
56307: PUSH
56308: LD_VAR 0 5
56312: PPUSH
56313: LD_VAR 0 7
56317: PPUSH
56318: CALL_OW 428
56322: PPUSH
56323: CALL_OW 247
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: IN
56338: NOT
56339: AND
56340: IFFALSE 56384
// begin ComMoveXY ( unit , _x , _y ) ;
56342: LD_VAR 0 1
56346: PPUSH
56347: LD_VAR 0 5
56351: PPUSH
56352: LD_VAR 0 7
56356: PPUSH
56357: CALL_OW 111
// result := [ _x , _y ] ;
56361: LD_ADDR_VAR 0 3
56365: PUSH
56366: LD_VAR 0 5
56370: PUSH
56371: LD_VAR 0 7
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// exit ;
56380: POP
56381: POP
56382: GO 56388
// end ; end ;
56384: GO 56226
56386: POP
56387: POP
// end ;
56388: LD_VAR 0 3
56392: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56393: LD_INT 0
56395: PPUSH
56396: PPUSH
56397: PPUSH
// result := 0 ;
56398: LD_ADDR_VAR 0 3
56402: PUSH
56403: LD_INT 0
56405: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56406: LD_VAR 0 1
56410: PUSH
56411: LD_INT 0
56413: LESS
56414: IFTRUE 56426
56416: PUSH
56417: LD_VAR 0 1
56421: PUSH
56422: LD_INT 8
56424: GREATER
56425: OR
56426: IFTRUE 56438
56428: PUSH
56429: LD_VAR 0 2
56433: PUSH
56434: LD_INT 0
56436: LESS
56437: OR
56438: IFTRUE 56450
56440: PUSH
56441: LD_VAR 0 2
56445: PUSH
56446: LD_INT 8
56448: GREATER
56449: OR
56450: IFFALSE 56454
// exit ;
56452: GO 56529
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56454: LD_ADDR_VAR 0 4
56458: PUSH
56459: LD_INT 22
56461: PUSH
56462: LD_VAR 0 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PPUSH
56471: CALL_OW 69
56475: PUSH
56476: FOR_IN
56477: IFFALSE 56527
// begin un := UnitShoot ( i ) ;
56479: LD_ADDR_VAR 0 5
56483: PUSH
56484: LD_VAR 0 4
56488: PPUSH
56489: CALL_OW 504
56493: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56494: LD_VAR 0 5
56498: PPUSH
56499: CALL_OW 255
56503: PUSH
56504: LD_VAR 0 1
56508: EQUAL
56509: IFFALSE 56525
// begin result := un ;
56511: LD_ADDR_VAR 0 3
56515: PUSH
56516: LD_VAR 0 5
56520: ST_TO_ADDR
// exit ;
56521: POP
56522: POP
56523: GO 56529
// end ; end ;
56525: GO 56476
56527: POP
56528: POP
// end ;
56529: LD_VAR 0 3
56533: RET
// export function GetCargoBay ( units ) ; begin
56534: LD_INT 0
56536: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56537: LD_ADDR_VAR 0 2
56541: PUSH
56542: LD_VAR 0 1
56546: PPUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 34
56552: PUSH
56553: LD_INT 12
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 34
56562: PUSH
56563: LD_INT 51
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 34
56572: PUSH
56573: LD_INT 32
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 34
56582: PUSH
56583: LD_INT 89
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: PPUSH
56597: CALL_OW 72
56601: ST_TO_ADDR
// end ;
56602: LD_VAR 0 2
56606: RET
// export function Negate ( value ) ; begin
56607: LD_INT 0
56609: PPUSH
// result := not value ;
56610: LD_ADDR_VAR 0 2
56614: PUSH
56615: LD_VAR 0 1
56619: NOT
56620: ST_TO_ADDR
// end ;
56621: LD_VAR 0 2
56625: RET
// export function Inc ( value ) ; begin
56626: LD_INT 0
56628: PPUSH
// result := value + 1 ;
56629: LD_ADDR_VAR 0 2
56633: PUSH
56634: LD_VAR 0 1
56638: PUSH
56639: LD_INT 1
56641: PLUS
56642: ST_TO_ADDR
// end ;
56643: LD_VAR 0 2
56647: RET
// export function Dec ( value ) ; begin
56648: LD_INT 0
56650: PPUSH
// result := value - 1 ;
56651: LD_ADDR_VAR 0 2
56655: PUSH
56656: LD_VAR 0 1
56660: PUSH
56661: LD_INT 1
56663: MINUS
56664: ST_TO_ADDR
// end ;
56665: LD_VAR 0 2
56669: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56670: LD_INT 0
56672: PPUSH
56673: PPUSH
56674: PPUSH
56675: PPUSH
56676: PPUSH
56677: PPUSH
56678: PPUSH
56679: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56680: LD_VAR 0 1
56684: PPUSH
56685: LD_VAR 0 2
56689: PPUSH
56690: CALL_OW 488
56694: NOT
56695: IFTRUE 56714
56697: PUSH
56698: LD_VAR 0 3
56702: PPUSH
56703: LD_VAR 0 4
56707: PPUSH
56708: CALL_OW 488
56712: NOT
56713: OR
56714: IFFALSE 56727
// begin result := - 1 ;
56716: LD_ADDR_VAR 0 5
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: ST_TO_ADDR
// exit ;
56725: GO 56962
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56727: LD_ADDR_VAR 0 12
56731: PUSH
56732: LD_VAR 0 1
56736: PPUSH
56737: LD_VAR 0 2
56741: PPUSH
56742: LD_VAR 0 3
56746: PPUSH
56747: LD_VAR 0 4
56751: PPUSH
56752: CALL 55798 0 4
56756: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56757: LD_ADDR_VAR 0 11
56761: PUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: LD_VAR 0 2
56771: PPUSH
56772: LD_VAR 0 12
56776: PUSH
56777: LD_INT 1
56779: ARRAY
56780: PPUSH
56781: LD_VAR 0 12
56785: PUSH
56786: LD_INT 2
56788: ARRAY
56789: PPUSH
56790: CALL_OW 298
56794: ST_TO_ADDR
// distance := 9999 ;
56795: LD_ADDR_VAR 0 10
56799: PUSH
56800: LD_INT 9999
56802: ST_TO_ADDR
// for i := 0 to 5 do
56803: LD_ADDR_VAR 0 6
56807: PUSH
56808: DOUBLE
56809: LD_INT 0
56811: DEC
56812: ST_TO_ADDR
56813: LD_INT 5
56815: PUSH
56816: FOR_TO
56817: IFFALSE 56960
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56819: LD_ADDR_VAR 0 7
56823: PUSH
56824: LD_VAR 0 1
56828: PPUSH
56829: LD_VAR 0 6
56833: PPUSH
56834: LD_VAR 0 11
56838: PPUSH
56839: CALL_OW 272
56843: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56844: LD_ADDR_VAR 0 8
56848: PUSH
56849: LD_VAR 0 2
56853: PPUSH
56854: LD_VAR 0 6
56858: PPUSH
56859: LD_VAR 0 11
56863: PPUSH
56864: CALL_OW 273
56868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56869: LD_VAR 0 7
56873: PPUSH
56874: LD_VAR 0 8
56878: PPUSH
56879: CALL_OW 488
56883: NOT
56884: IFFALSE 56888
// continue ;
56886: GO 56816
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56888: LD_ADDR_VAR 0 9
56892: PUSH
56893: LD_VAR 0 12
56897: PUSH
56898: LD_INT 1
56900: ARRAY
56901: PPUSH
56902: LD_VAR 0 12
56906: PUSH
56907: LD_INT 2
56909: ARRAY
56910: PPUSH
56911: LD_VAR 0 7
56915: PPUSH
56916: LD_VAR 0 8
56920: PPUSH
56921: CALL_OW 298
56925: ST_TO_ADDR
// if tmp < distance then
56926: LD_VAR 0 9
56930: PUSH
56931: LD_VAR 0 10
56935: LESS
56936: IFFALSE 56958
// begin result := i ;
56938: LD_ADDR_VAR 0 5
56942: PUSH
56943: LD_VAR 0 6
56947: ST_TO_ADDR
// distance := tmp ;
56948: LD_ADDR_VAR 0 10
56952: PUSH
56953: LD_VAR 0 9
56957: ST_TO_ADDR
// end ; end ;
56958: GO 56816
56960: POP
56961: POP
// end ;
56962: LD_VAR 0 5
56966: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56967: LD_INT 0
56969: PPUSH
56970: PPUSH
// if not driver or not IsInUnit ( driver ) then
56971: LD_VAR 0 1
56975: NOT
56976: IFTRUE 56990
56978: PUSH
56979: LD_VAR 0 1
56983: PPUSH
56984: CALL_OW 310
56988: NOT
56989: OR
56990: IFFALSE 56994
// exit ;
56992: GO 57084
// vehicle := IsInUnit ( driver ) ;
56994: LD_ADDR_VAR 0 3
56998: PUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 310
57008: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57009: LD_VAR 0 1
57013: PPUSH
57014: LD_STRING \
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: PUSH
57044: LD_STRING E
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_VAR 0 3
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PPUSH
57080: CALL_OW 446
// end ;
57084: LD_VAR 0 2
57088: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57089: LD_INT 0
57091: PPUSH
57092: PPUSH
// if not driver or not IsInUnit ( driver ) then
57093: LD_VAR 0 1
57097: NOT
57098: IFTRUE 57112
57100: PUSH
57101: LD_VAR 0 1
57105: PPUSH
57106: CALL_OW 310
57110: NOT
57111: OR
57112: IFFALSE 57116
// exit ;
57114: GO 57206
// vehicle := IsInUnit ( driver ) ;
57116: LD_ADDR_VAR 0 3
57120: PUSH
57121: LD_VAR 0 1
57125: PPUSH
57126: CALL_OW 310
57130: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57131: LD_VAR 0 1
57135: PPUSH
57136: LD_STRING \
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: PUSH
57166: LD_STRING E
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_VAR 0 3
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PPUSH
57202: CALL_OW 447
// end ;
57206: LD_VAR 0 2
57210: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57211: LD_INT 0
57213: PPUSH
57214: PPUSH
57215: PPUSH
// tmp := [ ] ;
57216: LD_ADDR_VAR 0 5
57220: PUSH
57221: EMPTY
57222: ST_TO_ADDR
// for i in units do
57223: LD_ADDR_VAR 0 4
57227: PUSH
57228: LD_VAR 0 1
57232: PUSH
57233: FOR_IN
57234: IFFALSE 57272
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57236: LD_ADDR_VAR 0 5
57240: PUSH
57241: LD_VAR 0 5
57245: PPUSH
57246: LD_VAR 0 5
57250: PUSH
57251: LD_INT 1
57253: PLUS
57254: PPUSH
57255: LD_VAR 0 4
57259: PPUSH
57260: CALL_OW 256
57264: PPUSH
57265: CALL_OW 2
57269: ST_TO_ADDR
57270: GO 57233
57272: POP
57273: POP
// if not tmp then
57274: LD_VAR 0 5
57278: NOT
57279: IFFALSE 57283
// exit ;
57281: GO 57331
// if asc then
57283: LD_VAR 0 2
57287: IFFALSE 57311
// result := SortListByListAsc ( units , tmp ) else
57289: LD_ADDR_VAR 0 3
57293: PUSH
57294: LD_VAR 0 1
57298: PPUSH
57299: LD_VAR 0 5
57303: PPUSH
57304: CALL_OW 76
57308: ST_TO_ADDR
57309: GO 57331
// result := SortListByListDesc ( units , tmp ) ;
57311: LD_ADDR_VAR 0 3
57315: PUSH
57316: LD_VAR 0 1
57320: PPUSH
57321: LD_VAR 0 5
57325: PPUSH
57326: CALL_OW 77
57330: ST_TO_ADDR
// end ;
57331: LD_VAR 0 3
57335: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57336: LD_INT 0
57338: PPUSH
57339: PPUSH
// task := GetTaskList ( mech ) ;
57340: LD_ADDR_VAR 0 4
57344: PUSH
57345: LD_VAR 0 1
57349: PPUSH
57350: CALL_OW 437
57354: ST_TO_ADDR
// if not task then
57355: LD_VAR 0 4
57359: NOT
57360: IFFALSE 57364
// exit ;
57362: GO 57408
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57364: LD_ADDR_VAR 0 3
57368: PUSH
57369: LD_VAR 0 4
57373: PUSH
57374: LD_INT 1
57376: ARRAY
57377: PUSH
57378: LD_INT 1
57380: ARRAY
57381: PUSH
57382: LD_STRING r
57384: EQUAL
57385: IFFALSE 57407
57387: PUSH
57388: LD_VAR 0 4
57392: PUSH
57393: LD_INT 1
57395: ARRAY
57396: PUSH
57397: LD_INT 4
57399: ARRAY
57400: PUSH
57401: LD_VAR 0 2
57405: EQUAL
57406: AND
57407: ST_TO_ADDR
// end ;
57408: LD_VAR 0 3
57412: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57413: LD_INT 0
57415: PPUSH
// SetDir ( unit , d ) ;
57416: LD_VAR 0 1
57420: PPUSH
57421: LD_VAR 0 4
57425: PPUSH
57426: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57430: LD_ADDR_VAR 0 6
57434: PUSH
57435: LD_VAR 0 1
57439: PPUSH
57440: LD_VAR 0 2
57444: PPUSH
57445: LD_VAR 0 3
57449: PPUSH
57450: LD_VAR 0 5
57454: PPUSH
57455: CALL_OW 48
57459: ST_TO_ADDR
// end ;
57460: LD_VAR 0 6
57464: RET
// export function ToNaturalNumber ( number ) ; begin
57465: LD_INT 0
57467: PPUSH
// result := number div 1 ;
57468: LD_ADDR_VAR 0 2
57472: PUSH
57473: LD_VAR 0 1
57477: PUSH
57478: LD_INT 1
57480: DIV
57481: ST_TO_ADDR
// if number < 0 then
57482: LD_VAR 0 1
57486: PUSH
57487: LD_INT 0
57489: LESS
57490: IFFALSE 57500
// result := 0 ;
57492: LD_ADDR_VAR 0 2
57496: PUSH
57497: LD_INT 0
57499: ST_TO_ADDR
// end ;
57500: LD_VAR 0 2
57504: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57505: LD_INT 0
57507: PPUSH
57508: PPUSH
57509: PPUSH
// if not buildings then
57510: LD_VAR 0 1
57514: NOT
57515: IFFALSE 57519
// exit ;
57517: GO 57634
// tmp := [ ] ;
57519: LD_ADDR_VAR 0 5
57523: PUSH
57524: EMPTY
57525: ST_TO_ADDR
// for b in buildings do
57526: LD_ADDR_VAR 0 4
57530: PUSH
57531: LD_VAR 0 1
57535: PUSH
57536: FOR_IN
57537: IFFALSE 57575
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57539: LD_ADDR_VAR 0 5
57543: PUSH
57544: LD_VAR 0 5
57548: PPUSH
57549: LD_VAR 0 5
57553: PUSH
57554: LD_INT 1
57556: PLUS
57557: PPUSH
57558: LD_VAR 0 4
57562: PPUSH
57563: CALL_OW 266
57567: PPUSH
57568: CALL_OW 1
57572: ST_TO_ADDR
57573: GO 57536
57575: POP
57576: POP
// if not tmp then
57577: LD_VAR 0 5
57581: NOT
57582: IFFALSE 57586
// exit ;
57584: GO 57634
// if asc then
57586: LD_VAR 0 2
57590: IFFALSE 57614
// result := SortListByListAsc ( buildings , tmp ) else
57592: LD_ADDR_VAR 0 3
57596: PUSH
57597: LD_VAR 0 1
57601: PPUSH
57602: LD_VAR 0 5
57606: PPUSH
57607: CALL_OW 76
57611: ST_TO_ADDR
57612: GO 57634
// result := SortListByListDesc ( buildings , tmp ) ;
57614: LD_ADDR_VAR 0 3
57618: PUSH
57619: LD_VAR 0 1
57623: PPUSH
57624: LD_VAR 0 5
57628: PPUSH
57629: CALL_OW 77
57633: ST_TO_ADDR
// end ;
57634: LD_VAR 0 3
57638: RET
// export function SortByClass ( units , class ) ; var un ; begin
57639: LD_INT 0
57641: PPUSH
57642: PPUSH
// if not units or not class then
57643: LD_VAR 0 1
57647: NOT
57648: IFTRUE 57657
57650: PUSH
57651: LD_VAR 0 2
57655: NOT
57656: OR
57657: IFFALSE 57661
// exit ;
57659: GO 57756
// result := [ ] ;
57661: LD_ADDR_VAR 0 3
57665: PUSH
57666: EMPTY
57667: ST_TO_ADDR
// for un in units do
57668: LD_ADDR_VAR 0 4
57672: PUSH
57673: LD_VAR 0 1
57677: PUSH
57678: FOR_IN
57679: IFFALSE 57754
// if GetClass ( un ) = class then
57681: LD_VAR 0 4
57685: PPUSH
57686: CALL_OW 257
57690: PUSH
57691: LD_VAR 0 2
57695: EQUAL
57696: IFFALSE 57723
// result := Insert ( result , 1 , un ) else
57698: LD_ADDR_VAR 0 3
57702: PUSH
57703: LD_VAR 0 3
57707: PPUSH
57708: LD_INT 1
57710: PPUSH
57711: LD_VAR 0 4
57715: PPUSH
57716: CALL_OW 2
57720: ST_TO_ADDR
57721: GO 57752
// result := Replace ( result , result + 1 , un ) ;
57723: LD_ADDR_VAR 0 3
57727: PUSH
57728: LD_VAR 0 3
57732: PPUSH
57733: LD_VAR 0 3
57737: PUSH
57738: LD_INT 1
57740: PLUS
57741: PPUSH
57742: LD_VAR 0 4
57746: PPUSH
57747: CALL_OW 1
57751: ST_TO_ADDR
57752: GO 57678
57754: POP
57755: POP
// end ;
57756: LD_VAR 0 3
57760: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57761: LD_INT 0
57763: PPUSH
57764: PPUSH
57765: PPUSH
57766: PPUSH
57767: PPUSH
57768: PPUSH
57769: PPUSH
// result := [ ] ;
57770: LD_ADDR_VAR 0 4
57774: PUSH
57775: EMPTY
57776: ST_TO_ADDR
// if x - r < 0 then
57777: LD_VAR 0 1
57781: PUSH
57782: LD_VAR 0 3
57786: MINUS
57787: PUSH
57788: LD_INT 0
57790: LESS
57791: IFFALSE 57803
// min_x := 0 else
57793: LD_ADDR_VAR 0 8
57797: PUSH
57798: LD_INT 0
57800: ST_TO_ADDR
57801: GO 57819
// min_x := x - r ;
57803: LD_ADDR_VAR 0 8
57807: PUSH
57808: LD_VAR 0 1
57812: PUSH
57813: LD_VAR 0 3
57817: MINUS
57818: ST_TO_ADDR
// if y - r < 0 then
57819: LD_VAR 0 2
57823: PUSH
57824: LD_VAR 0 3
57828: MINUS
57829: PUSH
57830: LD_INT 0
57832: LESS
57833: IFFALSE 57845
// min_y := 0 else
57835: LD_ADDR_VAR 0 7
57839: PUSH
57840: LD_INT 0
57842: ST_TO_ADDR
57843: GO 57861
// min_y := y - r ;
57845: LD_ADDR_VAR 0 7
57849: PUSH
57850: LD_VAR 0 2
57854: PUSH
57855: LD_VAR 0 3
57859: MINUS
57860: ST_TO_ADDR
// max_x := x + r ;
57861: LD_ADDR_VAR 0 9
57865: PUSH
57866: LD_VAR 0 1
57870: PUSH
57871: LD_VAR 0 3
57875: PLUS
57876: ST_TO_ADDR
// max_y := y + r ;
57877: LD_ADDR_VAR 0 10
57881: PUSH
57882: LD_VAR 0 2
57886: PUSH
57887: LD_VAR 0 3
57891: PLUS
57892: ST_TO_ADDR
// for _x = min_x to max_x do
57893: LD_ADDR_VAR 0 5
57897: PUSH
57898: DOUBLE
57899: LD_VAR 0 8
57903: DEC
57904: ST_TO_ADDR
57905: LD_VAR 0 9
57909: PUSH
57910: FOR_TO
57911: IFFALSE 58012
// for _y = min_y to max_y do
57913: LD_ADDR_VAR 0 6
57917: PUSH
57918: DOUBLE
57919: LD_VAR 0 7
57923: DEC
57924: ST_TO_ADDR
57925: LD_VAR 0 10
57929: PUSH
57930: FOR_TO
57931: IFFALSE 58008
// begin if not ValidHex ( _x , _y ) then
57933: LD_VAR 0 5
57937: PPUSH
57938: LD_VAR 0 6
57942: PPUSH
57943: CALL_OW 488
57947: NOT
57948: IFFALSE 57952
// continue ;
57950: GO 57930
// if GetResourceTypeXY ( _x , _y ) then
57952: LD_VAR 0 5
57956: PPUSH
57957: LD_VAR 0 6
57961: PPUSH
57962: CALL_OW 283
57966: IFFALSE 58006
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57968: LD_ADDR_VAR 0 4
57972: PUSH
57973: LD_VAR 0 4
57977: PPUSH
57978: LD_VAR 0 4
57982: PUSH
57983: LD_INT 1
57985: PLUS
57986: PPUSH
57987: LD_VAR 0 5
57991: PUSH
57992: LD_VAR 0 6
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PPUSH
58001: CALL_OW 1
58005: ST_TO_ADDR
// end ;
58006: GO 57930
58008: POP
58009: POP
58010: GO 57910
58012: POP
58013: POP
// end ;
58014: LD_VAR 0 4
58018: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58019: LD_INT 0
58021: PPUSH
58022: PPUSH
58023: PPUSH
58024: PPUSH
58025: PPUSH
58026: PPUSH
58027: PPUSH
58028: PPUSH
// if not units then
58029: LD_VAR 0 1
58033: NOT
58034: IFFALSE 58038
// exit ;
58036: GO 58570
// result := UnitFilter ( units , [ f_ok ] ) ;
58038: LD_ADDR_VAR 0 3
58042: PUSH
58043: LD_VAR 0 1
58047: PPUSH
58048: LD_INT 50
58050: PUSH
58051: EMPTY
58052: LIST
58053: PPUSH
58054: CALL_OW 72
58058: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58059: LD_ADDR_VAR 0 8
58063: PUSH
58064: LD_VAR 0 1
58068: PUSH
58069: LD_INT 1
58071: ARRAY
58072: PPUSH
58073: CALL_OW 255
58077: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58078: LD_ADDR_VAR 0 10
58082: PUSH
58083: LD_INT 29
58085: PUSH
58086: LD_INT 91
58088: PUSH
58089: LD_INT 49
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: LIST
58096: ST_TO_ADDR
// if not result then
58097: LD_VAR 0 3
58101: NOT
58102: IFFALSE 58106
// exit ;
58104: GO 58570
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58106: LD_ADDR_VAR 0 5
58110: PUSH
58111: LD_INT 81
58113: PUSH
58114: LD_VAR 0 8
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PPUSH
58123: CALL_OW 69
58127: ST_TO_ADDR
// for i in result do
58128: LD_ADDR_VAR 0 4
58132: PUSH
58133: LD_VAR 0 3
58137: PUSH
58138: FOR_IN
58139: IFFALSE 58568
// begin tag := GetTag ( i ) + 1 ;
58141: LD_ADDR_VAR 0 9
58145: PUSH
58146: LD_VAR 0 4
58150: PPUSH
58151: CALL_OW 110
58155: PUSH
58156: LD_INT 1
58158: PLUS
58159: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58160: LD_ADDR_VAR 0 7
58164: PUSH
58165: LD_VAR 0 4
58169: PPUSH
58170: CALL_OW 250
58174: PPUSH
58175: LD_VAR 0 4
58179: PPUSH
58180: CALL_OW 251
58184: PPUSH
58185: LD_INT 4
58187: PPUSH
58188: CALL 57761 0 3
58192: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58193: LD_VAR 0 4
58197: PPUSH
58198: CALL_OW 247
58202: PUSH
58203: LD_INT 2
58205: EQUAL
58206: IFFALSE 58218
58208: PUSH
58209: LD_VAR 0 7
58213: PUSH
58214: LD_INT 2
58216: GREATER
58217: AND
58218: IFFALSE 58238
58220: PUSH
58221: LD_VAR 0 4
58225: PPUSH
58226: CALL_OW 264
58230: PUSH
58231: LD_VAR 0 10
58235: IN
58236: NOT
58237: AND
58238: IFFALSE 58277
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58240: LD_VAR 0 4
58244: PPUSH
58245: LD_VAR 0 7
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: PUSH
58254: LD_INT 1
58256: ARRAY
58257: PPUSH
58258: LD_VAR 0 7
58262: PUSH
58263: LD_INT 1
58265: ARRAY
58266: PUSH
58267: LD_INT 2
58269: ARRAY
58270: PPUSH
58271: CALL_OW 116
58275: GO 58566
// if path > tag then
58277: LD_VAR 0 2
58281: PUSH
58282: LD_VAR 0 9
58286: GREATER
58287: IFFALSE 58495
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58289: LD_ADDR_VAR 0 6
58293: PUSH
58294: LD_VAR 0 5
58298: PPUSH
58299: LD_INT 91
58301: PUSH
58302: LD_VAR 0 4
58306: PUSH
58307: LD_INT 8
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: PPUSH
58315: CALL_OW 72
58319: ST_TO_ADDR
// if nearEnemy then
58320: LD_VAR 0 6
58324: IFFALSE 58393
// begin if GetWeapon ( i ) = ru_time_lapser then
58326: LD_VAR 0 4
58330: PPUSH
58331: CALL_OW 264
58335: PUSH
58336: LD_INT 49
58338: EQUAL
58339: IFFALSE 58367
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58341: LD_VAR 0 4
58345: PPUSH
58346: LD_VAR 0 6
58350: PPUSH
58351: LD_VAR 0 4
58355: PPUSH
58356: CALL_OW 74
58360: PPUSH
58361: CALL_OW 112
58365: GO 58391
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58367: LD_VAR 0 4
58371: PPUSH
58372: LD_VAR 0 6
58376: PPUSH
58377: LD_VAR 0 4
58381: PPUSH
58382: CALL_OW 74
58386: PPUSH
58387: CALL 59651 0 2
// end else
58391: GO 58493
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58393: LD_VAR 0 4
58397: PPUSH
58398: LD_VAR 0 2
58402: PUSH
58403: LD_VAR 0 9
58407: ARRAY
58408: PUSH
58409: LD_INT 1
58411: ARRAY
58412: PPUSH
58413: LD_VAR 0 2
58417: PUSH
58418: LD_VAR 0 9
58422: ARRAY
58423: PUSH
58424: LD_INT 2
58426: ARRAY
58427: PPUSH
58428: CALL_OW 297
58432: PUSH
58433: LD_INT 6
58435: GREATER
58436: IFFALSE 58479
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58438: LD_VAR 0 4
58442: PPUSH
58443: LD_VAR 0 2
58447: PUSH
58448: LD_VAR 0 9
58452: ARRAY
58453: PUSH
58454: LD_INT 1
58456: ARRAY
58457: PPUSH
58458: LD_VAR 0 2
58462: PUSH
58463: LD_VAR 0 9
58467: ARRAY
58468: PUSH
58469: LD_INT 2
58471: ARRAY
58472: PPUSH
58473: CALL_OW 114
58477: GO 58493
// SetTag ( i , tag ) ;
58479: LD_VAR 0 4
58483: PPUSH
58484: LD_VAR 0 9
58488: PPUSH
58489: CALL_OW 109
// end else
58493: GO 58566
// if enemy then
58495: LD_VAR 0 5
58499: IFFALSE 58566
// begin if GetWeapon ( i ) = ru_time_lapser then
58501: LD_VAR 0 4
58505: PPUSH
58506: CALL_OW 264
58510: PUSH
58511: LD_INT 49
58513: EQUAL
58514: IFFALSE 58542
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58516: LD_VAR 0 4
58520: PPUSH
58521: LD_VAR 0 5
58525: PPUSH
58526: LD_VAR 0 4
58530: PPUSH
58531: CALL_OW 74
58535: PPUSH
58536: CALL_OW 112
58540: GO 58566
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58542: LD_VAR 0 4
58546: PPUSH
58547: LD_VAR 0 5
58551: PPUSH
58552: LD_VAR 0 4
58556: PPUSH
58557: CALL_OW 74
58561: PPUSH
58562: CALL 59651 0 2
// end ; end ;
58566: GO 58138
58568: POP
58569: POP
// end ;
58570: LD_VAR 0 3
58574: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58575: LD_INT 0
58577: PPUSH
58578: PPUSH
58579: PPUSH
// if not unit or IsInUnit ( unit ) then
58580: LD_VAR 0 1
58584: NOT
58585: IFTRUE 58598
58587: PUSH
58588: LD_VAR 0 1
58592: PPUSH
58593: CALL_OW 310
58597: OR
58598: IFFALSE 58602
// exit ;
58600: GO 58693
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58602: LD_ADDR_VAR 0 4
58606: PUSH
58607: LD_VAR 0 1
58611: PPUSH
58612: CALL_OW 250
58616: PPUSH
58617: LD_VAR 0 2
58621: PPUSH
58622: LD_INT 1
58624: PPUSH
58625: CALL_OW 272
58629: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58630: LD_ADDR_VAR 0 5
58634: PUSH
58635: LD_VAR 0 1
58639: PPUSH
58640: CALL_OW 251
58644: PPUSH
58645: LD_VAR 0 2
58649: PPUSH
58650: LD_INT 1
58652: PPUSH
58653: CALL_OW 273
58657: ST_TO_ADDR
// if ValidHex ( x , y ) then
58658: LD_VAR 0 4
58662: PPUSH
58663: LD_VAR 0 5
58667: PPUSH
58668: CALL_OW 488
58672: IFFALSE 58693
// ComTurnXY ( unit , x , y ) ;
58674: LD_VAR 0 1
58678: PPUSH
58679: LD_VAR 0 4
58683: PPUSH
58684: LD_VAR 0 5
58688: PPUSH
58689: CALL_OW 118
// end ;
58693: LD_VAR 0 3
58697: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58698: LD_INT 0
58700: PPUSH
58701: PPUSH
// result := false ;
58702: LD_ADDR_VAR 0 3
58706: PUSH
58707: LD_INT 0
58709: ST_TO_ADDR
// if not units then
58710: LD_VAR 0 2
58714: NOT
58715: IFFALSE 58719
// exit ;
58717: GO 58764
// for i in units do
58719: LD_ADDR_VAR 0 4
58723: PUSH
58724: LD_VAR 0 2
58728: PUSH
58729: FOR_IN
58730: IFFALSE 58762
// if See ( side , i ) then
58732: LD_VAR 0 1
58736: PPUSH
58737: LD_VAR 0 4
58741: PPUSH
58742: CALL_OW 292
58746: IFFALSE 58760
// begin result := true ;
58748: LD_ADDR_VAR 0 3
58752: PUSH
58753: LD_INT 1
58755: ST_TO_ADDR
// exit ;
58756: POP
58757: POP
58758: GO 58764
// end ;
58760: GO 58729
58762: POP
58763: POP
// end ;
58764: LD_VAR 0 3
58768: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58769: LD_INT 0
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
// if not unit or not points then
58775: LD_VAR 0 1
58779: NOT
58780: IFTRUE 58789
58782: PUSH
58783: LD_VAR 0 2
58787: NOT
58788: OR
58789: IFFALSE 58793
// exit ;
58791: GO 58883
// dist := 99999 ;
58793: LD_ADDR_VAR 0 5
58797: PUSH
58798: LD_INT 99999
58800: ST_TO_ADDR
// for i in points do
58801: LD_ADDR_VAR 0 4
58805: PUSH
58806: LD_VAR 0 2
58810: PUSH
58811: FOR_IN
58812: IFFALSE 58881
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58814: LD_ADDR_VAR 0 6
58818: PUSH
58819: LD_VAR 0 1
58823: PPUSH
58824: LD_VAR 0 4
58828: PUSH
58829: LD_INT 1
58831: ARRAY
58832: PPUSH
58833: LD_VAR 0 4
58837: PUSH
58838: LD_INT 2
58840: ARRAY
58841: PPUSH
58842: CALL_OW 297
58846: ST_TO_ADDR
// if tmpDist < dist then
58847: LD_VAR 0 6
58851: PUSH
58852: LD_VAR 0 5
58856: LESS
58857: IFFALSE 58879
// begin result := i ;
58859: LD_ADDR_VAR 0 3
58863: PUSH
58864: LD_VAR 0 4
58868: ST_TO_ADDR
// dist := tmpDist ;
58869: LD_ADDR_VAR 0 5
58873: PUSH
58874: LD_VAR 0 6
58878: ST_TO_ADDR
// end ; end ;
58879: GO 58811
58881: POP
58882: POP
// end ;
58883: LD_VAR 0 3
58887: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58888: LD_INT 0
58890: PPUSH
// uc_side := side ;
58891: LD_ADDR_OWVAR 20
58895: PUSH
58896: LD_VAR 0 1
58900: ST_TO_ADDR
// uc_nation := 3 ;
58901: LD_ADDR_OWVAR 21
58905: PUSH
58906: LD_INT 3
58908: ST_TO_ADDR
// vc_chassis := 25 ;
58909: LD_ADDR_OWVAR 37
58913: PUSH
58914: LD_INT 25
58916: ST_TO_ADDR
// vc_engine := engine_siberite ;
58917: LD_ADDR_OWVAR 39
58921: PUSH
58922: LD_INT 3
58924: ST_TO_ADDR
// vc_control := control_computer ;
58925: LD_ADDR_OWVAR 38
58929: PUSH
58930: LD_INT 3
58932: ST_TO_ADDR
// vc_weapon := 59 ;
58933: LD_ADDR_OWVAR 40
58937: PUSH
58938: LD_INT 59
58940: ST_TO_ADDR
// result := CreateVehicle ;
58941: LD_ADDR_VAR 0 5
58945: PUSH
58946: CALL_OW 45
58950: ST_TO_ADDR
// SetDir ( result , d ) ;
58951: LD_VAR 0 5
58955: PPUSH
58956: LD_VAR 0 4
58960: PPUSH
58961: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58965: LD_VAR 0 5
58969: PPUSH
58970: LD_VAR 0 2
58974: PPUSH
58975: LD_VAR 0 3
58979: PPUSH
58980: LD_INT 0
58982: PPUSH
58983: CALL_OW 48
// end ;
58987: LD_VAR 0 5
58991: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58992: LD_INT 0
58994: PPUSH
58995: PPUSH
58996: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58997: LD_ADDR_VAR 0 2
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59020: LD_VAR 0 1
59024: NOT
59025: IFTRUE 59058
59027: PUSH
59028: LD_VAR 0 1
59032: PPUSH
59033: CALL_OW 264
59037: PUSH
59038: LD_INT 12
59040: PUSH
59041: LD_INT 51
59043: PUSH
59044: LD_INT 32
59046: PUSH
59047: LD_INT 89
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: IN
59056: NOT
59057: OR
59058: IFFALSE 59062
// exit ;
59060: GO 59160
// for i := 1 to 3 do
59062: LD_ADDR_VAR 0 3
59066: PUSH
59067: DOUBLE
59068: LD_INT 1
59070: DEC
59071: ST_TO_ADDR
59072: LD_INT 3
59074: PUSH
59075: FOR_TO
59076: IFFALSE 59158
// begin tmp := GetCargo ( cargo , i ) ;
59078: LD_ADDR_VAR 0 4
59082: PUSH
59083: LD_VAR 0 1
59087: PPUSH
59088: LD_VAR 0 3
59092: PPUSH
59093: CALL_OW 289
59097: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59098: LD_ADDR_VAR 0 2
59102: PUSH
59103: LD_VAR 0 2
59107: PPUSH
59108: LD_VAR 0 3
59112: PPUSH
59113: LD_VAR 0 4
59117: PPUSH
59118: CALL_OW 1
59122: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59123: LD_ADDR_VAR 0 2
59127: PUSH
59128: LD_VAR 0 2
59132: PPUSH
59133: LD_INT 4
59135: PPUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_INT 4
59143: ARRAY
59144: PUSH
59145: LD_VAR 0 4
59149: PLUS
59150: PPUSH
59151: CALL_OW 1
59155: ST_TO_ADDR
// end ;
59156: GO 59075
59158: POP
59159: POP
// end ;
59160: LD_VAR 0 2
59164: RET
// export function Length ( array ) ; begin
59165: LD_INT 0
59167: PPUSH
// result := array + 0 ;
59168: LD_ADDR_VAR 0 2
59172: PUSH
59173: LD_VAR 0 1
59177: PUSH
59178: LD_INT 0
59180: PLUS
59181: ST_TO_ADDR
// end ;
59182: LD_VAR 0 2
59186: RET
// export function PrepareArray ( array ) ; begin
59187: LD_INT 0
59189: PPUSH
// result := array diff 0 ;
59190: LD_ADDR_VAR 0 2
59194: PUSH
59195: LD_VAR 0 1
59199: PUSH
59200: LD_INT 0
59202: DIFF
59203: ST_TO_ADDR
// if not result [ 1 ] then
59204: LD_VAR 0 2
59208: PUSH
59209: LD_INT 1
59211: ARRAY
59212: NOT
59213: IFFALSE 59233
// result := Delete ( result , 1 ) ;
59215: LD_ADDR_VAR 0 2
59219: PUSH
59220: LD_VAR 0 2
59224: PPUSH
59225: LD_INT 1
59227: PPUSH
59228: CALL_OW 3
59232: ST_TO_ADDR
// end ;
59233: LD_VAR 0 2
59237: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59238: LD_INT 0
59240: PPUSH
59241: PPUSH
59242: PPUSH
59243: PPUSH
// sibRocketRange := 25 ;
59244: LD_ADDR_VAR 0 6
59248: PUSH
59249: LD_INT 25
59251: ST_TO_ADDR
// result := false ;
59252: LD_ADDR_VAR 0 4
59256: PUSH
59257: LD_INT 0
59259: ST_TO_ADDR
// for i := 0 to 5 do
59260: LD_ADDR_VAR 0 5
59264: PUSH
59265: DOUBLE
59266: LD_INT 0
59268: DEC
59269: ST_TO_ADDR
59270: LD_INT 5
59272: PUSH
59273: FOR_TO
59274: IFFALSE 59341
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59276: LD_VAR 0 1
59280: PPUSH
59281: LD_VAR 0 5
59285: PPUSH
59286: LD_VAR 0 6
59290: PPUSH
59291: CALL_OW 272
59295: PPUSH
59296: LD_VAR 0 2
59300: PPUSH
59301: LD_VAR 0 5
59305: PPUSH
59306: LD_VAR 0 6
59310: PPUSH
59311: CALL_OW 273
59315: PPUSH
59316: LD_VAR 0 3
59320: PPUSH
59321: CALL_OW 309
59325: IFFALSE 59339
// begin result := true ;
59327: LD_ADDR_VAR 0 4
59331: PUSH
59332: LD_INT 1
59334: ST_TO_ADDR
// exit ;
59335: POP
59336: POP
59337: GO 59343
// end ;
59339: GO 59273
59341: POP
59342: POP
// end ;
59343: LD_VAR 0 4
59347: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59348: LD_INT 0
59350: PPUSH
59351: PPUSH
59352: PPUSH
// if btype = b_depot then
59353: LD_VAR 0 2
59357: PUSH
59358: LD_INT 0
59360: EQUAL
59361: IFFALSE 59373
// begin result := true ;
59363: LD_ADDR_VAR 0 3
59367: PUSH
59368: LD_INT 1
59370: ST_TO_ADDR
// exit ;
59371: GO 59493
// end ; pom := GetBase ( depot ) ;
59373: LD_ADDR_VAR 0 4
59377: PUSH
59378: LD_VAR 0 1
59382: PPUSH
59383: CALL_OW 274
59387: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59388: LD_ADDR_VAR 0 5
59392: PUSH
59393: LD_VAR 0 2
59397: PPUSH
59398: LD_VAR 0 1
59402: PPUSH
59403: CALL_OW 248
59407: PPUSH
59408: CALL_OW 450
59412: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59413: LD_ADDR_VAR 0 3
59417: PUSH
59418: LD_VAR 0 4
59422: PPUSH
59423: LD_INT 1
59425: PPUSH
59426: CALL_OW 275
59430: PUSH
59431: LD_VAR 0 5
59435: PUSH
59436: LD_INT 1
59438: ARRAY
59439: GREATEREQUAL
59440: IFFALSE 59466
59442: PUSH
59443: LD_VAR 0 4
59447: PPUSH
59448: LD_INT 2
59450: PPUSH
59451: CALL_OW 275
59455: PUSH
59456: LD_VAR 0 5
59460: PUSH
59461: LD_INT 2
59463: ARRAY
59464: GREATEREQUAL
59465: AND
59466: IFFALSE 59492
59468: PUSH
59469: LD_VAR 0 4
59473: PPUSH
59474: LD_INT 3
59476: PPUSH
59477: CALL_OW 275
59481: PUSH
59482: LD_VAR 0 5
59486: PUSH
59487: LD_INT 3
59489: ARRAY
59490: GREATEREQUAL
59491: AND
59492: ST_TO_ADDR
// end ;
59493: LD_VAR 0 3
59497: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59498: LD_INT 0
59500: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59501: LD_VAR 0 1
59505: PPUSH
59506: LD_VAR 0 2
59510: PPUSH
59511: LD_INT 0
59513: PPUSH
59514: LD_INT 0
59516: PPUSH
59517: LD_INT 1
59519: PPUSH
59520: LD_INT 0
59522: PPUSH
59523: CALL_OW 587
// end ;
59527: LD_VAR 0 3
59531: RET
// export function CenterOnNow ( unit ) ; begin
59532: LD_INT 0
59534: PPUSH
// result := IsInUnit ( unit ) ;
59535: LD_ADDR_VAR 0 2
59539: PUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL_OW 310
59549: ST_TO_ADDR
// if not result then
59550: LD_VAR 0 2
59554: NOT
59555: IFFALSE 59567
// result := unit ;
59557: LD_ADDR_VAR 0 2
59561: PUSH
59562: LD_VAR 0 1
59566: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
59567: LD_VAR 0 1
59571: PPUSH
59572: CALL_OW 87
// end ;
59576: LD_VAR 0 2
59580: RET
// export function ComMoveHex ( unit , hex ) ; begin
59581: LD_INT 0
59583: PPUSH
// if not hex then
59584: LD_VAR 0 2
59588: NOT
59589: IFFALSE 59593
// exit ;
59591: GO 59646
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
59593: LD_VAR 0 2
59597: PUSH
59598: LD_INT 1
59600: ARRAY
59601: PPUSH
59602: LD_VAR 0 2
59606: PUSH
59607: LD_INT 2
59609: ARRAY
59610: PPUSH
59611: CALL_OW 428
59615: IFFALSE 59619
// exit ;
59617: GO 59646
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
59619: LD_VAR 0 1
59623: PPUSH
59624: LD_VAR 0 2
59628: PUSH
59629: LD_INT 1
59631: ARRAY
59632: PPUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_INT 2
59640: ARRAY
59641: PPUSH
59642: CALL_OW 111
// end ;
59646: LD_VAR 0 3
59650: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
59651: LD_INT 0
59653: PPUSH
59654: PPUSH
59655: PPUSH
// if not unit or not enemy then
59656: LD_VAR 0 1
59660: NOT
59661: IFTRUE 59670
59663: PUSH
59664: LD_VAR 0 2
59668: NOT
59669: OR
59670: IFFALSE 59674
// exit ;
59672: GO 59800
// x := GetX ( enemy ) ;
59674: LD_ADDR_VAR 0 4
59678: PUSH
59679: LD_VAR 0 2
59683: PPUSH
59684: CALL_OW 250
59688: ST_TO_ADDR
// y := GetY ( enemy ) ;
59689: LD_ADDR_VAR 0 5
59693: PUSH
59694: LD_VAR 0 2
59698: PPUSH
59699: CALL_OW 251
59703: ST_TO_ADDR
// if ValidHex ( x , y ) then
59704: LD_VAR 0 4
59708: PPUSH
59709: LD_VAR 0 5
59713: PPUSH
59714: CALL_OW 488
59718: IFFALSE 59800
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59720: LD_VAR 0 2
59724: PPUSH
59725: CALL_OW 247
59729: PUSH
59730: LD_INT 3
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: IN
59740: IFTRUE 59763
59742: PUSH
59743: LD_VAR 0 1
59747: PPUSH
59748: CALL_OW 255
59752: PPUSH
59753: LD_VAR 0 2
59757: PPUSH
59758: CALL_OW 292
59762: OR
59763: IFFALSE 59781
// ComAttackUnit ( unit , enemy ) else
59765: LD_VAR 0 1
59769: PPUSH
59770: LD_VAR 0 2
59774: PPUSH
59775: CALL_OW 115
59779: GO 59800
// ComAgressiveMove ( unit , x , y ) ;
59781: LD_VAR 0 1
59785: PPUSH
59786: LD_VAR 0 4
59790: PPUSH
59791: LD_VAR 0 5
59795: PPUSH
59796: CALL_OW 114
// end ;
59800: LD_VAR 0 3
59804: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59805: LD_INT 0
59807: PPUSH
59808: PPUSH
59809: PPUSH
// list := AreaToList ( area , 0 ) ;
59810: LD_ADDR_VAR 0 5
59814: PUSH
59815: LD_VAR 0 1
59819: PPUSH
59820: LD_INT 0
59822: PPUSH
59823: CALL_OW 517
59827: ST_TO_ADDR
// if not list then
59828: LD_VAR 0 5
59832: NOT
59833: IFFALSE 59837
// exit ;
59835: GO 59967
// if all then
59837: LD_VAR 0 2
59841: IFFALSE 59929
// begin for i := 1 to list [ 1 ] do
59843: LD_ADDR_VAR 0 4
59847: PUSH
59848: DOUBLE
59849: LD_INT 1
59851: DEC
59852: ST_TO_ADDR
59853: LD_VAR 0 5
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PUSH
59862: FOR_TO
59863: IFFALSE 59925
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59865: LD_ADDR_VAR 0 3
59869: PUSH
59870: LD_VAR 0 3
59874: PPUSH
59875: LD_VAR 0 3
59879: PUSH
59880: LD_INT 1
59882: PLUS
59883: PPUSH
59884: LD_VAR 0 5
59888: PUSH
59889: LD_INT 1
59891: ARRAY
59892: PUSH
59893: LD_VAR 0 4
59897: ARRAY
59898: PUSH
59899: LD_VAR 0 5
59903: PUSH
59904: LD_INT 2
59906: ARRAY
59907: PUSH
59908: LD_VAR 0 4
59912: ARRAY
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PPUSH
59918: CALL_OW 1
59922: ST_TO_ADDR
59923: GO 59862
59925: POP
59926: POP
// exit ;
59927: GO 59967
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59929: LD_ADDR_VAR 0 3
59933: PUSH
59934: LD_VAR 0 5
59938: PUSH
59939: LD_INT 1
59941: ARRAY
59942: PUSH
59943: LD_INT 1
59945: ARRAY
59946: PUSH
59947: LD_VAR 0 5
59951: PUSH
59952: LD_INT 2
59954: ARRAY
59955: PUSH
59956: LD_INT 1
59958: ARRAY
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: ST_TO_ADDR
// end ;
59967: LD_VAR 0 3
59971: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59972: LD_INT 0
59974: PPUSH
59975: PPUSH
// list := AreaToList ( area , 0 ) ;
59976: LD_ADDR_VAR 0 4
59980: PUSH
59981: LD_VAR 0 1
59985: PPUSH
59986: LD_INT 0
59988: PPUSH
59989: CALL_OW 517
59993: ST_TO_ADDR
// if not list then
59994: LD_VAR 0 4
59998: NOT
59999: IFFALSE 60003
// exit ;
60001: GO 60044
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60003: LD_ADDR_VAR 0 3
60007: PUSH
60008: LD_VAR 0 4
60012: PUSH
60013: LD_INT 1
60015: ARRAY
60016: PUSH
60017: LD_INT 1
60019: ARRAY
60020: PUSH
60021: LD_VAR 0 4
60025: PUSH
60026: LD_INT 2
60028: ARRAY
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PUSH
60034: LD_VAR 0 2
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: LIST
60043: ST_TO_ADDR
// end ;
60044: LD_VAR 0 3
60048: RET
// export function First ( array ) ; begin
60049: LD_INT 0
60051: PPUSH
// if not array then
60052: LD_VAR 0 1
60056: NOT
60057: IFFALSE 60061
// exit ;
60059: GO 60075
// result := array [ 1 ] ;
60061: LD_ADDR_VAR 0 2
60065: PUSH
60066: LD_VAR 0 1
60070: PUSH
60071: LD_INT 1
60073: ARRAY
60074: ST_TO_ADDR
// end ;
60075: LD_VAR 0 2
60079: RET
// export function Last ( array ) ; begin
60080: LD_INT 0
60082: PPUSH
// if not array then
60083: LD_VAR 0 1
60087: NOT
60088: IFFALSE 60092
// exit ;
60090: GO 60108
// result := array [ array ] ;
60092: LD_ADDR_VAR 0 2
60096: PUSH
60097: LD_VAR 0 1
60101: PUSH
60102: LD_VAR 0 1
60106: ARRAY
60107: ST_TO_ADDR
// end ;
60108: LD_VAR 0 2
60112: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60113: LD_INT 0
60115: PPUSH
60116: PPUSH
// result := [ ] ;
60117: LD_ADDR_VAR 0 5
60121: PUSH
60122: EMPTY
60123: ST_TO_ADDR
// if not array then
60124: LD_VAR 0 1
60128: NOT
60129: IFFALSE 60133
// exit ;
60131: GO 60245
// for i := 1 to array do
60133: LD_ADDR_VAR 0 6
60137: PUSH
60138: DOUBLE
60139: LD_INT 1
60141: DEC
60142: ST_TO_ADDR
60143: LD_VAR 0 1
60147: PUSH
60148: FOR_TO
60149: IFFALSE 60243
// if array [ i ] [ index ] = value then
60151: LD_VAR 0 1
60155: PUSH
60156: LD_VAR 0 6
60160: ARRAY
60161: PUSH
60162: LD_VAR 0 2
60166: ARRAY
60167: PUSH
60168: LD_VAR 0 3
60172: EQUAL
60173: IFFALSE 60241
// begin if indexColumn then
60175: LD_VAR 0 4
60179: IFFALSE 60215
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60181: LD_ADDR_VAR 0 5
60185: PUSH
60186: LD_VAR 0 5
60190: PPUSH
60191: LD_VAR 0 1
60195: PUSH
60196: LD_VAR 0 6
60200: ARRAY
60201: PUSH
60202: LD_VAR 0 4
60206: ARRAY
60207: PPUSH
60208: CALL 55253 0 2
60212: ST_TO_ADDR
60213: GO 60241
// result := Join ( result , array [ i ] ) ;
60215: LD_ADDR_VAR 0 5
60219: PUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: LD_VAR 0 1
60229: PUSH
60230: LD_VAR 0 6
60234: ARRAY
60235: PPUSH
60236: CALL 55253 0 2
60240: ST_TO_ADDR
// end ;
60241: GO 60148
60243: POP
60244: POP
// end ;
60245: LD_VAR 0 5
60249: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60250: LD_INT 0
60252: PPUSH
// if not vehicles or not parkingPoint then
60253: LD_VAR 0 1
60257: NOT
60258: IFTRUE 60267
60260: PUSH
60261: LD_VAR 0 2
60265: NOT
60266: OR
60267: IFFALSE 60271
// exit ;
60269: GO 60369
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60271: LD_ADDR_VAR 0 1
60275: PUSH
60276: LD_VAR 0 1
60280: PPUSH
60281: LD_INT 50
60283: PUSH
60284: EMPTY
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 92
60292: PUSH
60293: LD_VAR 0 2
60297: PUSH
60298: LD_INT 1
60300: ARRAY
60301: PUSH
60302: LD_VAR 0 2
60306: PUSH
60307: LD_INT 2
60309: ARRAY
60310: PUSH
60311: LD_INT 8
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PPUSH
60328: CALL_OW 72
60332: ST_TO_ADDR
// if not vehicles then
60333: LD_VAR 0 1
60337: NOT
60338: IFFALSE 60342
// exit ;
60340: GO 60369
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60342: LD_VAR 0 1
60346: PPUSH
60347: LD_VAR 0 2
60351: PUSH
60352: LD_INT 1
60354: ARRAY
60355: PPUSH
60356: LD_VAR 0 2
60360: PUSH
60361: LD_INT 2
60363: ARRAY
60364: PPUSH
60365: CALL_OW 111
// end ;
60369: LD_VAR 0 3
60373: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60374: LD_INT 0
60376: PPUSH
60377: PPUSH
60378: PPUSH
// if not side or not area then
60379: LD_VAR 0 1
60383: NOT
60384: IFTRUE 60393
60386: PUSH
60387: LD_VAR 0 2
60391: NOT
60392: OR
60393: IFFALSE 60397
// exit ;
60395: GO 60516
// tmp := AreaToList ( area , 0 ) ;
60397: LD_ADDR_VAR 0 5
60401: PUSH
60402: LD_VAR 0 2
60406: PPUSH
60407: LD_INT 0
60409: PPUSH
60410: CALL_OW 517
60414: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60415: LD_ADDR_VAR 0 4
60419: PUSH
60420: DOUBLE
60421: LD_INT 1
60423: DEC
60424: ST_TO_ADDR
60425: LD_VAR 0 5
60429: PUSH
60430: LD_INT 1
60432: ARRAY
60433: PUSH
60434: FOR_TO
60435: IFFALSE 60514
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60437: LD_VAR 0 5
60441: PUSH
60442: LD_INT 1
60444: ARRAY
60445: PUSH
60446: LD_VAR 0 4
60450: ARRAY
60451: PPUSH
60452: LD_VAR 0 5
60456: PUSH
60457: LD_INT 2
60459: ARRAY
60460: PUSH
60461: LD_VAR 0 4
60465: ARRAY
60466: PPUSH
60467: CALL_OW 351
60471: IFFALSE 60512
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60473: LD_VAR 0 5
60477: PUSH
60478: LD_INT 1
60480: ARRAY
60481: PUSH
60482: LD_VAR 0 4
60486: ARRAY
60487: PPUSH
60488: LD_VAR 0 5
60492: PUSH
60493: LD_INT 2
60495: ARRAY
60496: PUSH
60497: LD_VAR 0 4
60501: ARRAY
60502: PPUSH
60503: LD_VAR 0 1
60507: PPUSH
60508: CALL_OW 244
// end ;
60512: GO 60434
60514: POP
60515: POP
// end ;
60516: LD_VAR 0 3
60520: RET
// export function UniqueArray ( array ) ; var i ; begin
60521: LD_INT 0
60523: PPUSH
60524: PPUSH
// result := [ ] ;
60525: LD_ADDR_VAR 0 2
60529: PUSH
60530: EMPTY
60531: ST_TO_ADDR
// if not array then
60532: LD_VAR 0 1
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60602
// for i := 1 to array do
60541: LD_ADDR_VAR 0 3
60545: PUSH
60546: DOUBLE
60547: LD_INT 1
60549: DEC
60550: ST_TO_ADDR
60551: LD_VAR 0 1
60555: PUSH
60556: FOR_TO
60557: IFFALSE 60600
// if not array [ i ] in result then
60559: LD_VAR 0 1
60563: PUSH
60564: LD_VAR 0 3
60568: ARRAY
60569: PUSH
60570: LD_VAR 0 2
60574: IN
60575: NOT
60576: IFFALSE 60598
// result := Join ( result , i ) ;
60578: LD_ADDR_VAR 0 2
60582: PUSH
60583: LD_VAR 0 2
60587: PPUSH
60588: LD_VAR 0 3
60592: PPUSH
60593: CALL 55253 0 2
60597: ST_TO_ADDR
60598: GO 60556
60600: POP
60601: POP
// end ; end_of_file
60602: LD_VAR 0 2
60606: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60607: LD_VAR 0 1
60611: PUSH
60612: LD_INT 200
60614: DOUBLE
60615: GREATEREQUAL
60616: IFFALSE 60624
60618: LD_INT 299
60620: DOUBLE
60621: LESSEQUAL
60622: IFTRUE 60626
60624: GO 60658
60626: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60627: LD_VAR 0 1
60631: PPUSH
60632: LD_VAR 0 2
60636: PPUSH
60637: LD_VAR 0 3
60641: PPUSH
60642: LD_VAR 0 4
60646: PPUSH
60647: LD_VAR 0 5
60651: PPUSH
60652: CALL 61520 0 5
60656: GO 60735
60658: LD_INT 300
60660: DOUBLE
60661: GREATEREQUAL
60662: IFFALSE 60670
60664: LD_INT 399
60666: DOUBLE
60667: LESSEQUAL
60668: IFTRUE 60672
60670: GO 60734
60672: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60673: LD_VAR 0 1
60677: PPUSH
60678: LD_VAR 0 2
60682: PPUSH
60683: LD_VAR 0 3
60687: PPUSH
60688: LD_VAR 0 4
60692: PPUSH
60693: LD_VAR 0 5
60697: PPUSH
60698: LD_VAR 0 6
60702: PPUSH
60703: LD_VAR 0 7
60707: PPUSH
60708: LD_VAR 0 8
60712: PPUSH
60713: LD_VAR 0 9
60717: PPUSH
60718: LD_VAR 0 10
60722: PPUSH
60723: LD_VAR 0 11
60727: PPUSH
60728: CALL 79883 0 11
60732: GO 60735
60734: POP
// end ;
60735: PPOPN 11
60737: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60738: LD_VAR 0 1
60742: PPUSH
60743: LD_VAR 0 2
60747: PPUSH
60748: LD_VAR 0 3
60752: PPUSH
60753: LD_VAR 0 4
60757: PPUSH
60758: LD_VAR 0 5
60762: PPUSH
60763: CALL 60820 0 5
// end ; end_of_file
60767: PPOPN 5
60769: END
// export function SOS_UnitDestroyed ( un ) ; begin
60770: LD_INT 0
60772: PPUSH
// ComRadiation ( un ) ;
60773: LD_VAR 0 1
60777: PPUSH
60778: CALL 61940 0 1
// end ;
60782: LD_VAR 0 2
60786: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60787: LD_INT 0
60789: PPUSH
// ComRadiation ( un ) ;
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL 61940 0 1
// end ;
60799: LD_VAR 0 2
60803: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60804: LD_INT 0
60806: PPUSH
// end ;
60807: LD_VAR 0 4
60811: RET
// export function SOS_Command ( cmd ) ; begin
60812: LD_INT 0
60814: PPUSH
// end ;
60815: LD_VAR 0 2
60819: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60820: LD_INT 0
60822: PPUSH
// end ;
60823: LD_VAR 0 6
60827: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
60828: LD_INT 0
60830: PPUSH
60831: PPUSH
60832: PPUSH
60833: PPUSH
60834: PPUSH
// if not vehicle or not factory then
60835: LD_VAR 0 1
60839: NOT
60840: IFTRUE 60849
60842: PUSH
60843: LD_VAR 0 2
60847: NOT
60848: OR
60849: IFFALSE 60853
// exit ;
60851: GO 61515
// weapon := GetWeapon ( vehicle ) ;
60853: LD_ADDR_VAR 0 7
60857: PUSH
60858: LD_VAR 0 1
60862: PPUSH
60863: CALL_OW 264
60867: ST_TO_ADDR
// if weapon = ar_miner then
60868: LD_VAR 0 7
60872: PUSH
60873: LD_INT 81
60875: EQUAL
60876: IFFALSE 60933
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
60878: LD_ADDR_EXP 43
60882: PUSH
60883: LD_EXP 43
60887: PPUSH
60888: LD_EXP 43
60892: PUSH
60893: LD_INT 1
60895: PLUS
60896: PPUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 1
60906: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60907: LD_ADDR_EXP 44
60911: PUSH
60912: LD_EXP 44
60916: PPUSH
60917: LD_EXP 44
60921: PUSH
60922: LD_INT 1
60924: PLUS
60925: PPUSH
60926: EMPTY
60927: PPUSH
60928: CALL_OW 1
60932: ST_TO_ADDR
// end ; if not factoryWaypoints then
60933: LD_EXP 105
60937: NOT
60938: IFFALSE 60942
// exit ;
60940: GO 61515
// for i := 1 to Count ( factoryWaypoints ) do
60942: LD_ADDR_VAR 0 4
60946: PUSH
60947: DOUBLE
60948: LD_INT 1
60950: DEC
60951: ST_TO_ADDR
60952: LD_EXP 105
60956: PPUSH
60957: CALL 19277 0 1
60961: PUSH
60962: FOR_TO
60963: IFFALSE 61513
// if factoryWaypoints [ i ] [ 2 ] = factory then
60965: LD_EXP 105
60969: PUSH
60970: LD_VAR 0 4
60974: ARRAY
60975: PUSH
60976: LD_INT 2
60978: ARRAY
60979: PUSH
60980: LD_VAR 0 2
60984: EQUAL
60985: IFFALSE 61511
// begin if GetControl ( vehicle ) = control_manual then
60987: LD_VAR 0 1
60991: PPUSH
60992: CALL_OW 263
60996: PUSH
60997: LD_INT 1
60999: EQUAL
61000: IFFALSE 61364
// begin driver := IsDrivenBy ( vehicle ) ;
61002: LD_ADDR_VAR 0 5
61006: PUSH
61007: LD_VAR 0 1
61011: PPUSH
61012: CALL_OW 311
61016: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
61017: LD_VAR 0 5
61021: PUSH
61022: LD_EXP 106
61026: IN
61027: IFTRUE 61041
61029: PUSH
61030: LD_VAR 0 1
61034: PUSH
61035: LD_EXP 106
61039: IN
61040: OR
61041: IFFALSE 61047
// exit ;
61043: POP
61044: POP
61045: GO 61515
// if not HasTask ( driver ) then
61047: LD_VAR 0 5
61051: PPUSH
61052: CALL_OW 314
61056: NOT
61057: IFFALSE 61362
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
61059: LD_ADDR_EXP 106
61063: PUSH
61064: LD_EXP 106
61068: PPUSH
61069: LD_VAR 0 5
61073: PPUSH
61074: CALL 55253 0 2
61078: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
61079: LD_ADDR_EXP 106
61083: PUSH
61084: LD_EXP 106
61088: PPUSH
61089: LD_VAR 0 1
61093: PPUSH
61094: CALL 55253 0 2
61098: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61099: LD_ADDR_VAR 0 6
61103: PUSH
61104: LD_EXP 105
61108: PUSH
61109: LD_VAR 0 4
61113: ARRAY
61114: PUSH
61115: LD_INT 3
61117: ARRAY
61118: PPUSH
61119: LD_EXP 105
61123: PUSH
61124: LD_VAR 0 4
61128: ARRAY
61129: PUSH
61130: LD_INT 4
61132: ARRAY
61133: PPUSH
61134: CALL_OW 428
61138: ST_TO_ADDR
// if hex then
61139: LD_VAR 0 6
61143: IFFALSE 61161
// ComMoveUnit ( driver , hex ) else
61145: LD_VAR 0 5
61149: PPUSH
61150: LD_VAR 0 6
61154: PPUSH
61155: CALL_OW 112
61159: GO 61245
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
61161: LD_VAR 0 1
61165: PPUSH
61166: LD_EXP 105
61170: PUSH
61171: LD_VAR 0 4
61175: ARRAY
61176: PUSH
61177: LD_INT 3
61179: ARRAY
61180: PPUSH
61181: LD_EXP 105
61185: PUSH
61186: LD_VAR 0 4
61190: ARRAY
61191: PUSH
61192: LD_INT 4
61194: ARRAY
61195: PPUSH
61196: CALL_OW 297
61200: PUSH
61201: LD_INT 0
61203: GREATER
61204: IFFALSE 61245
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61206: LD_VAR 0 5
61210: PPUSH
61211: LD_EXP 105
61215: PUSH
61216: LD_VAR 0 4
61220: ARRAY
61221: PUSH
61222: LD_INT 3
61224: ARRAY
61225: PPUSH
61226: LD_EXP 105
61230: PUSH
61231: LD_VAR 0 4
61235: ARRAY
61236: PUSH
61237: LD_INT 4
61239: ARRAY
61240: PPUSH
61241: CALL_OW 111
// AddComExitVehicle ( driver ) ;
61245: LD_VAR 0 5
61249: PPUSH
61250: CALL_OW 181
// if Multiplayer then
61254: LD_OWVAR 4
61258: IFFALSE 61307
// begin repeat wait ( 10 ) ;
61260: LD_INT 10
61262: PPUSH
61263: CALL_OW 67
// until not IsInUnit ( driver ) ;
61267: LD_VAR 0 5
61271: PPUSH
61272: CALL_OW 310
61276: NOT
61277: IFFALSE 61260
// if not HasTask ( driver ) then
61279: LD_VAR 0 5
61283: PPUSH
61284: CALL_OW 314
61288: NOT
61289: IFFALSE 61305
// ComEnterUnit ( driver , factory ) ;
61291: LD_VAR 0 5
61295: PPUSH
61296: LD_VAR 0 2
61300: PPUSH
61301: CALL_OW 120
// end else
61305: GO 61321
// AddComEnterUnit ( driver , factory ) ;
61307: LD_VAR 0 5
61311: PPUSH
61312: LD_VAR 0 2
61316: PPUSH
61317: CALL_OW 180
// wait ( 0 0$1 ) ;
61321: LD_INT 35
61323: PPUSH
61324: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
61328: LD_ADDR_EXP 106
61332: PUSH
61333: LD_EXP 106
61337: PUSH
61338: LD_VAR 0 5
61342: DIFF
61343: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
61344: LD_ADDR_EXP 106
61348: PUSH
61349: LD_EXP 106
61353: PUSH
61354: LD_VAR 0 1
61358: DIFF
61359: ST_TO_ADDR
// break ;
61360: GO 61513
// end ; end else
61362: GO 61511
// if GetControl ( vehicle ) = control_remote then
61364: LD_VAR 0 1
61368: PPUSH
61369: CALL_OW 263
61373: PUSH
61374: LD_INT 2
61376: EQUAL
61377: IFFALSE 61463
// begin wait ( 0 0$2 ) ;
61379: LD_INT 70
61381: PPUSH
61382: CALL_OW 67
// repeat wait ( 10 ) ;
61386: LD_INT 10
61388: PPUSH
61389: CALL_OW 67
// Connect ( vehicle ) ;
61393: LD_VAR 0 1
61397: PPUSH
61398: CALL 25555 0 1
// until IsControledBy ( vehicle ) ;
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 312
61411: IFFALSE 61386
// wait ( 10 ) ;
61413: LD_INT 10
61415: PPUSH
61416: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61420: LD_VAR 0 1
61424: PPUSH
61425: LD_EXP 105
61429: PUSH
61430: LD_VAR 0 4
61434: ARRAY
61435: PUSH
61436: LD_INT 3
61438: ARRAY
61439: PPUSH
61440: LD_EXP 105
61444: PUSH
61445: LD_VAR 0 4
61449: ARRAY
61450: PUSH
61451: LD_INT 4
61453: ARRAY
61454: PPUSH
61455: CALL_OW 111
// break ;
61459: GO 61513
// end else
61461: GO 61511
// begin wait ( 0 0$3 ) ;
61463: LD_INT 105
61465: PPUSH
61466: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
61470: LD_VAR 0 1
61474: PPUSH
61475: LD_EXP 105
61479: PUSH
61480: LD_VAR 0 4
61484: ARRAY
61485: PUSH
61486: LD_INT 3
61488: ARRAY
61489: PPUSH
61490: LD_EXP 105
61494: PUSH
61495: LD_VAR 0 4
61499: ARRAY
61500: PUSH
61501: LD_INT 4
61503: ARRAY
61504: PPUSH
61505: CALL_OW 111
// break ;
61509: GO 61513
// end ; end ;
61511: GO 60962
61513: POP
61514: POP
// end ;
61515: LD_VAR 0 3
61519: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61520: LD_INT 0
61522: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61523: LD_VAR 0 1
61527: PUSH
61528: LD_INT 250
61530: EQUAL
61531: IFFALSE 61548
61533: PUSH
61534: LD_VAR 0 2
61538: PPUSH
61539: CALL_OW 264
61543: PUSH
61544: LD_INT 81
61546: EQUAL
61547: AND
61548: IFFALSE 61569
// MinerPlaceMine ( unit , x , y ) ;
61550: LD_VAR 0 2
61554: PPUSH
61555: LD_VAR 0 4
61559: PPUSH
61560: LD_VAR 0 5
61564: PPUSH
61565: CALL 64915 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61569: LD_VAR 0 1
61573: PUSH
61574: LD_INT 251
61576: EQUAL
61577: IFFALSE 61594
61579: PUSH
61580: LD_VAR 0 2
61584: PPUSH
61585: CALL_OW 264
61589: PUSH
61590: LD_INT 81
61592: EQUAL
61593: AND
61594: IFFALSE 61615
// MinerDetonateMine ( unit , x , y ) ;
61596: LD_VAR 0 2
61600: PPUSH
61601: LD_VAR 0 4
61605: PPUSH
61606: LD_VAR 0 5
61610: PPUSH
61611: CALL 65322 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61615: LD_VAR 0 1
61619: PUSH
61620: LD_INT 252
61622: EQUAL
61623: IFFALSE 61640
61625: PUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: CALL_OW 264
61635: PUSH
61636: LD_INT 81
61638: EQUAL
61639: AND
61640: IFFALSE 61661
// MinerCreateMinefield ( unit , x , y ) ;
61642: LD_VAR 0 2
61646: PPUSH
61647: LD_VAR 0 4
61651: PPUSH
61652: LD_VAR 0 5
61656: PPUSH
61657: CALL 65554 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61661: LD_VAR 0 1
61665: PUSH
61666: LD_INT 253
61668: EQUAL
61669: IFFALSE 61686
61671: PUSH
61672: LD_VAR 0 2
61676: PPUSH
61677: CALL_OW 257
61681: PUSH
61682: LD_INT 5
61684: EQUAL
61685: AND
61686: IFFALSE 61707
// ComBinocular ( unit , x , y ) ;
61688: LD_VAR 0 2
61692: PPUSH
61693: LD_VAR 0 4
61697: PPUSH
61698: LD_VAR 0 5
61702: PPUSH
61703: CALL 65929 0 3
// if selectedUnit then
61707: LD_VAR 0 3
61711: IFFALSE 61771
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61713: LD_VAR 0 1
61717: PUSH
61718: LD_INT 254
61720: EQUAL
61721: IFFALSE 61738
61723: PUSH
61724: LD_VAR 0 2
61728: PPUSH
61729: CALL_OW 264
61733: PUSH
61734: LD_INT 99
61736: EQUAL
61737: AND
61738: IFFALSE 61755
61740: PUSH
61741: LD_VAR 0 3
61745: PPUSH
61746: CALL_OW 263
61750: PUSH
61751: LD_INT 3
61753: EQUAL
61754: AND
61755: IFFALSE 61771
// HackDestroyVehicle ( unit , selectedUnit ) ;
61757: LD_VAR 0 2
61761: PPUSH
61762: LD_VAR 0 3
61766: PPUSH
61767: CALL 64105 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61771: LD_VAR 0 1
61775: PUSH
61776: LD_INT 255
61778: EQUAL
61779: IFFALSE 61803
61781: PUSH
61782: LD_VAR 0 2
61786: PPUSH
61787: CALL_OW 264
61791: PUSH
61792: LD_INT 14
61794: PUSH
61795: LD_INT 53
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: IN
61802: AND
61803: IFFALSE 61821
61805: PUSH
61806: LD_VAR 0 4
61810: PPUSH
61811: LD_VAR 0 5
61815: PPUSH
61816: CALL_OW 488
61820: AND
61821: IFFALSE 61845
// CutTreeXYR ( unit , x , y , 12 ) ;
61823: LD_VAR 0 2
61827: PPUSH
61828: LD_VAR 0 4
61832: PPUSH
61833: LD_VAR 0 5
61837: PPUSH
61838: LD_INT 12
61840: PPUSH
61841: CALL 62036 0 4
// if cmd = 256 then
61845: LD_VAR 0 1
61849: PUSH
61850: LD_INT 256
61852: EQUAL
61853: IFFALSE 61874
// SetFactoryWaypoint ( unit , x , y ) ;
61855: LD_VAR 0 2
61859: PPUSH
61860: LD_VAR 0 4
61864: PPUSH
61865: LD_VAR 0 5
61869: PPUSH
61870: CALL 81875 0 3
// if cmd = 257 then
61874: LD_VAR 0 1
61878: PUSH
61879: LD_INT 257
61881: EQUAL
61882: IFFALSE 61903
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61884: LD_VAR 0 2
61888: PPUSH
61889: LD_VAR 0 4
61893: PPUSH
61894: LD_VAR 0 5
61898: PPUSH
61899: CALL 82371 0 3
// if cmd = 258 then
61903: LD_VAR 0 1
61907: PUSH
61908: LD_INT 258
61910: EQUAL
61911: IFFALSE 61935
// BurnTreeXYR ( unit , x , y , 8 ) ;
61913: LD_VAR 0 2
61917: PPUSH
61918: LD_VAR 0 4
61922: PPUSH
61923: LD_VAR 0 5
61927: PPUSH
61928: LD_INT 8
61930: PPUSH
61931: CALL 62458 0 4
// end ;
61935: LD_VAR 0 6
61939: RET
// export function ComRadiation ( un ) ; var eff ; begin
61940: LD_INT 0
61942: PPUSH
61943: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61944: LD_VAR 0 1
61948: PPUSH
61949: CALL_OW 264
61953: PUSH
61954: LD_INT 91
61956: NONEQUAL
61957: IFFALSE 61961
// exit ;
61959: GO 62031
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61961: LD_INT 68
61963: PPUSH
61964: LD_VAR 0 1
61968: PPUSH
61969: CALL_OW 255
61973: PPUSH
61974: CALL_OW 321
61978: PUSH
61979: LD_INT 2
61981: EQUAL
61982: IFFALSE 61994
// eff := 50 else
61984: LD_ADDR_VAR 0 3
61988: PUSH
61989: LD_INT 50
61991: ST_TO_ADDR
61992: GO 62002
// eff := 25 ;
61994: LD_ADDR_VAR 0 3
61998: PUSH
61999: LD_INT 25
62001: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62002: LD_VAR 0 1
62006: PPUSH
62007: CALL_OW 250
62011: PPUSH
62012: LD_VAR 0 1
62016: PPUSH
62017: CALL_OW 251
62021: PPUSH
62022: LD_VAR 0 3
62026: PPUSH
62027: CALL_OW 495
// end ;
62031: LD_VAR 0 2
62035: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62036: LD_INT 0
62038: PPUSH
62039: PPUSH
62040: PPUSH
62041: PPUSH
62042: PPUSH
62043: PPUSH
62044: PPUSH
62045: PPUSH
62046: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
62047: LD_VAR 0 1
62051: PPUSH
62052: CALL_OW 302
62056: NOT
62057: IFTRUE 62076
62059: PUSH
62060: LD_VAR 0 2
62064: PPUSH
62065: LD_VAR 0 3
62069: PPUSH
62070: CALL_OW 488
62074: NOT
62075: OR
62076: IFTRUE 62085
62078: PUSH
62079: LD_VAR 0 4
62083: NOT
62084: OR
62085: IFFALSE 62089
// exit ;
62087: GO 62453
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
62089: LD_VAR 0 1
62093: PPUSH
62094: CALL_OW 437
62098: PPUSH
62099: CALL 19277 0 1
62103: PUSH
62104: LD_INT 10
62106: GREATER
62107: IFFALSE 62111
// exit ;
62109: GO 62453
// list := [ ] ;
62111: LD_ADDR_VAR 0 13
62115: PUSH
62116: EMPTY
62117: ST_TO_ADDR
// if x - r < 0 then
62118: LD_VAR 0 2
62122: PUSH
62123: LD_VAR 0 4
62127: MINUS
62128: PUSH
62129: LD_INT 0
62131: LESS
62132: IFFALSE 62144
// min_x := 0 else
62134: LD_ADDR_VAR 0 7
62138: PUSH
62139: LD_INT 0
62141: ST_TO_ADDR
62142: GO 62160
// min_x := x - r ;
62144: LD_ADDR_VAR 0 7
62148: PUSH
62149: LD_VAR 0 2
62153: PUSH
62154: LD_VAR 0 4
62158: MINUS
62159: ST_TO_ADDR
// if y - r < 0 then
62160: LD_VAR 0 3
62164: PUSH
62165: LD_VAR 0 4
62169: MINUS
62170: PUSH
62171: LD_INT 0
62173: LESS
62174: IFFALSE 62186
// min_y := 0 else
62176: LD_ADDR_VAR 0 8
62180: PUSH
62181: LD_INT 0
62183: ST_TO_ADDR
62184: GO 62202
// min_y := y - r ;
62186: LD_ADDR_VAR 0 8
62190: PUSH
62191: LD_VAR 0 3
62195: PUSH
62196: LD_VAR 0 4
62200: MINUS
62201: ST_TO_ADDR
// max_x := x + r ;
62202: LD_ADDR_VAR 0 9
62206: PUSH
62207: LD_VAR 0 2
62211: PUSH
62212: LD_VAR 0 4
62216: PLUS
62217: ST_TO_ADDR
// max_y := y + r ;
62218: LD_ADDR_VAR 0 10
62222: PUSH
62223: LD_VAR 0 3
62227: PUSH
62228: LD_VAR 0 4
62232: PLUS
62233: ST_TO_ADDR
// for _x = min_x to max_x do
62234: LD_ADDR_VAR 0 11
62238: PUSH
62239: DOUBLE
62240: LD_VAR 0 7
62244: DEC
62245: ST_TO_ADDR
62246: LD_VAR 0 9
62250: PUSH
62251: FOR_TO
62252: IFFALSE 62371
// for _y = min_y to max_y do
62254: LD_ADDR_VAR 0 12
62258: PUSH
62259: DOUBLE
62260: LD_VAR 0 8
62264: DEC
62265: ST_TO_ADDR
62266: LD_VAR 0 10
62270: PUSH
62271: FOR_TO
62272: IFFALSE 62367
// begin if not ValidHex ( _x , _y ) then
62274: LD_VAR 0 11
62278: PPUSH
62279: LD_VAR 0 12
62283: PPUSH
62284: CALL_OW 488
62288: NOT
62289: IFFALSE 62293
// continue ;
62291: GO 62271
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62293: LD_VAR 0 11
62297: PPUSH
62298: LD_VAR 0 12
62302: PPUSH
62303: CALL_OW 351
62307: IFFALSE 62325
62309: PUSH
62310: LD_VAR 0 11
62314: PPUSH
62315: LD_VAR 0 12
62319: PPUSH
62320: CALL_OW 554
62324: AND
62325: IFFALSE 62365
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62327: LD_ADDR_VAR 0 13
62331: PUSH
62332: LD_VAR 0 13
62336: PPUSH
62337: LD_VAR 0 13
62341: PUSH
62342: LD_INT 1
62344: PLUS
62345: PPUSH
62346: LD_VAR 0 11
62350: PUSH
62351: LD_VAR 0 12
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PPUSH
62360: CALL_OW 2
62364: ST_TO_ADDR
// end ;
62365: GO 62271
62367: POP
62368: POP
62369: GO 62251
62371: POP
62372: POP
// if not list then
62373: LD_VAR 0 13
62377: NOT
62378: IFFALSE 62382
// exit ;
62380: GO 62453
// for i in list do
62382: LD_ADDR_VAR 0 6
62386: PUSH
62387: LD_VAR 0 13
62391: PUSH
62392: FOR_IN
62393: IFFALSE 62451
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62395: LD_VAR 0 1
62399: PPUSH
62400: LD_STRING M
62402: PUSH
62403: LD_VAR 0 6
62407: PUSH
62408: LD_INT 1
62410: ARRAY
62411: PUSH
62412: LD_VAR 0 6
62416: PUSH
62417: LD_INT 2
62419: ARRAY
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: PPUSH
62445: CALL_OW 447
62449: GO 62392
62451: POP
62452: POP
// end ;
62453: LD_VAR 0 5
62457: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
62458: LD_INT 0
62460: PPUSH
62461: PPUSH
62462: PPUSH
62463: PPUSH
62464: PPUSH
62465: PPUSH
62466: PPUSH
62467: PPUSH
62468: PPUSH
62469: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
62470: LD_VAR 0 1
62474: PPUSH
62475: CALL_OW 302
62479: NOT
62480: IFTRUE 62499
62482: PUSH
62483: LD_VAR 0 2
62487: PPUSH
62488: LD_VAR 0 3
62492: PPUSH
62493: CALL_OW 488
62497: NOT
62498: OR
62499: IFTRUE 62508
62501: PUSH
62502: LD_VAR 0 4
62506: NOT
62507: OR
62508: IFFALSE 62512
// exit ;
62510: GO 63051
// if Count ( GetTaskList ( flame ) ) > 10 then
62512: LD_VAR 0 1
62516: PPUSH
62517: CALL_OW 437
62521: PPUSH
62522: CALL 19277 0 1
62526: PUSH
62527: LD_INT 10
62529: GREATER
62530: IFFALSE 62534
// exit ;
62532: GO 63051
// list := [ ] ;
62534: LD_ADDR_VAR 0 13
62538: PUSH
62539: EMPTY
62540: ST_TO_ADDR
// if x - r < 0 then
62541: LD_VAR 0 2
62545: PUSH
62546: LD_VAR 0 4
62550: MINUS
62551: PUSH
62552: LD_INT 0
62554: LESS
62555: IFFALSE 62567
// min_x := 0 else
62557: LD_ADDR_VAR 0 7
62561: PUSH
62562: LD_INT 0
62564: ST_TO_ADDR
62565: GO 62583
// min_x := x - r ;
62567: LD_ADDR_VAR 0 7
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_VAR 0 4
62581: MINUS
62582: ST_TO_ADDR
// if y - r < 0 then
62583: LD_VAR 0 3
62587: PUSH
62588: LD_VAR 0 4
62592: MINUS
62593: PUSH
62594: LD_INT 0
62596: LESS
62597: IFFALSE 62609
// min_y := 0 else
62599: LD_ADDR_VAR 0 8
62603: PUSH
62604: LD_INT 0
62606: ST_TO_ADDR
62607: GO 62625
// min_y := y - r ;
62609: LD_ADDR_VAR 0 8
62613: PUSH
62614: LD_VAR 0 3
62618: PUSH
62619: LD_VAR 0 4
62623: MINUS
62624: ST_TO_ADDR
// max_x := x + r ;
62625: LD_ADDR_VAR 0 9
62629: PUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_VAR 0 4
62639: PLUS
62640: ST_TO_ADDR
// max_y := y + r ;
62641: LD_ADDR_VAR 0 10
62645: PUSH
62646: LD_VAR 0 3
62650: PUSH
62651: LD_VAR 0 4
62655: PLUS
62656: ST_TO_ADDR
// for _x = min_x to max_x do
62657: LD_ADDR_VAR 0 11
62661: PUSH
62662: DOUBLE
62663: LD_VAR 0 7
62667: DEC
62668: ST_TO_ADDR
62669: LD_VAR 0 9
62673: PUSH
62674: FOR_TO
62675: IFFALSE 62794
// for _y = min_y to max_y do
62677: LD_ADDR_VAR 0 12
62681: PUSH
62682: DOUBLE
62683: LD_VAR 0 8
62687: DEC
62688: ST_TO_ADDR
62689: LD_VAR 0 10
62693: PUSH
62694: FOR_TO
62695: IFFALSE 62790
// begin if not ValidHex ( _x , _y ) then
62697: LD_VAR 0 11
62701: PPUSH
62702: LD_VAR 0 12
62706: PPUSH
62707: CALL_OW 488
62711: NOT
62712: IFFALSE 62716
// continue ;
62714: GO 62694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62716: LD_VAR 0 11
62720: PPUSH
62721: LD_VAR 0 12
62725: PPUSH
62726: CALL_OW 351
62730: IFFALSE 62748
62732: PUSH
62733: LD_VAR 0 11
62737: PPUSH
62738: LD_VAR 0 12
62742: PPUSH
62743: CALL_OW 554
62747: AND
62748: IFFALSE 62788
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62750: LD_ADDR_VAR 0 13
62754: PUSH
62755: LD_VAR 0 13
62759: PPUSH
62760: LD_VAR 0 13
62764: PUSH
62765: LD_INT 1
62767: PLUS
62768: PPUSH
62769: LD_VAR 0 11
62773: PUSH
62774: LD_VAR 0 12
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PPUSH
62783: CALL_OW 2
62787: ST_TO_ADDR
// end ;
62788: GO 62694
62790: POP
62791: POP
62792: GO 62674
62794: POP
62795: POP
// if not list then
62796: LD_VAR 0 13
62800: NOT
62801: IFFALSE 62805
// exit ;
62803: GO 63051
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62805: LD_ADDR_VAR 0 13
62809: PUSH
62810: LD_VAR 0 1
62814: PPUSH
62815: LD_VAR 0 13
62819: PPUSH
62820: LD_INT 1
62822: PPUSH
62823: LD_INT 1
62825: PPUSH
62826: CALL 22683 0 4
62830: ST_TO_ADDR
// ComStop ( flame ) ;
62831: LD_VAR 0 1
62835: PPUSH
62836: CALL_OW 141
// for i in list do
62840: LD_ADDR_VAR 0 6
62844: PUSH
62845: LD_VAR 0 13
62849: PUSH
62850: FOR_IN
62851: IFFALSE 62882
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62853: LD_VAR 0 1
62857: PPUSH
62858: LD_VAR 0 6
62862: PUSH
62863: LD_INT 1
62865: ARRAY
62866: PPUSH
62867: LD_VAR 0 6
62871: PUSH
62872: LD_INT 2
62874: ARRAY
62875: PPUSH
62876: CALL_OW 176
62880: GO 62850
62882: POP
62883: POP
// repeat wait ( 0 0$1 ) ;
62884: LD_INT 35
62886: PPUSH
62887: CALL_OW 67
// task := GetTaskList ( flame ) ;
62891: LD_ADDR_VAR 0 14
62895: PUSH
62896: LD_VAR 0 1
62900: PPUSH
62901: CALL_OW 437
62905: ST_TO_ADDR
// if not task then
62906: LD_VAR 0 14
62910: NOT
62911: IFFALSE 62915
// exit ;
62913: GO 63051
// if task [ 1 ] [ 1 ] <> | then
62915: LD_VAR 0 14
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: PUSH
62924: LD_INT 1
62926: ARRAY
62927: PUSH
62928: LD_STRING |
62930: NONEQUAL
62931: IFFALSE 62935
// exit ;
62933: GO 63051
// _x := task [ 1 ] [ 2 ] ;
62935: LD_ADDR_VAR 0 11
62939: PUSH
62940: LD_VAR 0 14
62944: PUSH
62945: LD_INT 1
62947: ARRAY
62948: PUSH
62949: LD_INT 2
62951: ARRAY
62952: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62953: LD_ADDR_VAR 0 12
62957: PUSH
62958: LD_VAR 0 14
62962: PUSH
62963: LD_INT 1
62965: ARRAY
62966: PUSH
62967: LD_INT 3
62969: ARRAY
62970: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62971: LD_VAR 0 11
62975: PPUSH
62976: LD_VAR 0 12
62980: PPUSH
62981: CALL_OW 351
62985: NOT
62986: IFTRUE 63005
62988: PUSH
62989: LD_VAR 0 11
62993: PPUSH
62994: LD_VAR 0 12
62998: PPUSH
62999: CALL_OW 554
63003: NOT
63004: OR
63005: IFFALSE 63039
// begin task := Delete ( task , 1 ) ;
63007: LD_ADDR_VAR 0 14
63011: PUSH
63012: LD_VAR 0 14
63016: PPUSH
63017: LD_INT 1
63019: PPUSH
63020: CALL_OW 3
63024: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
63025: LD_VAR 0 1
63029: PPUSH
63030: LD_VAR 0 14
63034: PPUSH
63035: CALL_OW 446
// end ; until not HasTask ( flame ) ;
63039: LD_VAR 0 1
63043: PPUSH
63044: CALL_OW 314
63048: NOT
63049: IFFALSE 62884
// end ;
63051: LD_VAR 0 5
63055: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63056: LD_EXP 36
63060: NOT
63061: IFFALSE 63111
63063: GO 63065
63065: DISABLE
// begin initHack := true ;
63066: LD_ADDR_EXP 36
63070: PUSH
63071: LD_INT 1
63073: ST_TO_ADDR
// hackTanks := [ ] ;
63074: LD_ADDR_EXP 37
63078: PUSH
63079: EMPTY
63080: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63081: LD_ADDR_EXP 38
63085: PUSH
63086: EMPTY
63087: ST_TO_ADDR
// hackLimit := 3 ;
63088: LD_ADDR_EXP 39
63092: PUSH
63093: LD_INT 3
63095: ST_TO_ADDR
// hackDist := 12 ;
63096: LD_ADDR_EXP 40
63100: PUSH
63101: LD_INT 12
63103: ST_TO_ADDR
// hackCounter := [ ] ;
63104: LD_ADDR_EXP 41
63108: PUSH
63109: EMPTY
63110: ST_TO_ADDR
// end ;
63111: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63112: LD_EXP 36
63116: IFFALSE 63134
63118: PUSH
63119: LD_INT 34
63121: PUSH
63122: LD_INT 99
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PPUSH
63129: CALL_OW 69
63133: AND
63134: IFFALSE 63387
63136: GO 63138
63138: DISABLE
63139: LD_INT 0
63141: PPUSH
63142: PPUSH
// begin enable ;
63143: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63144: LD_ADDR_VAR 0 1
63148: PUSH
63149: LD_INT 34
63151: PUSH
63152: LD_INT 99
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PPUSH
63159: CALL_OW 69
63163: PUSH
63164: FOR_IN
63165: IFFALSE 63385
// begin if not i in hackTanks then
63167: LD_VAR 0 1
63171: PUSH
63172: LD_EXP 37
63176: IN
63177: NOT
63178: IFFALSE 63261
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63180: LD_ADDR_EXP 37
63184: PUSH
63185: LD_EXP 37
63189: PPUSH
63190: LD_EXP 37
63194: PUSH
63195: LD_INT 1
63197: PLUS
63198: PPUSH
63199: LD_VAR 0 1
63203: PPUSH
63204: CALL_OW 1
63208: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63209: LD_ADDR_EXP 38
63213: PUSH
63214: LD_EXP 38
63218: PPUSH
63219: LD_EXP 38
63223: PUSH
63224: LD_INT 1
63226: PLUS
63227: PPUSH
63228: EMPTY
63229: PPUSH
63230: CALL_OW 1
63234: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63235: LD_ADDR_EXP 41
63239: PUSH
63240: LD_EXP 41
63244: PPUSH
63245: LD_EXP 41
63249: PUSH
63250: LD_INT 1
63252: PLUS
63253: PPUSH
63254: EMPTY
63255: PPUSH
63256: CALL_OW 1
63260: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63261: LD_VAR 0 1
63265: PPUSH
63266: CALL_OW 302
63270: NOT
63271: IFFALSE 63284
// begin HackUnlinkAll ( i ) ;
63273: LD_VAR 0 1
63277: PPUSH
63278: CALL 63390 0 1
// continue ;
63282: GO 63164
// end ; HackCheckCapturedStatus ( i ) ;
63284: LD_VAR 0 1
63288: PPUSH
63289: CALL 63835 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63293: LD_ADDR_VAR 0 2
63297: PUSH
63298: LD_INT 81
63300: PUSH
63301: LD_VAR 0 1
63305: PPUSH
63306: CALL_OW 255
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 33
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 91
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_EXP 40
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 50
63345: PUSH
63346: EMPTY
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: PPUSH
63355: CALL_OW 69
63359: ST_TO_ADDR
// if not tmp then
63360: LD_VAR 0 2
63364: NOT
63365: IFFALSE 63369
// continue ;
63367: GO 63164
// HackLink ( i , tmp ) ;
63369: LD_VAR 0 1
63373: PPUSH
63374: LD_VAR 0 2
63378: PPUSH
63379: CALL 63526 0 2
// end ;
63383: GO 63164
63385: POP
63386: POP
// end ;
63387: PPOPN 2
63389: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63390: LD_INT 0
63392: PPUSH
63393: PPUSH
63394: PPUSH
// if not hack in hackTanks then
63395: LD_VAR 0 1
63399: PUSH
63400: LD_EXP 37
63404: IN
63405: NOT
63406: IFFALSE 63410
// exit ;
63408: GO 63521
// index := GetElementIndex ( hackTanks , hack ) ;
63410: LD_ADDR_VAR 0 4
63414: PUSH
63415: LD_EXP 37
63419: PPUSH
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL 21978 0 2
63429: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63430: LD_EXP 38
63434: PUSH
63435: LD_VAR 0 4
63439: ARRAY
63440: IFFALSE 63521
// begin for i in hackTanksCaptured [ index ] do
63442: LD_ADDR_VAR 0 3
63446: PUSH
63447: LD_EXP 38
63451: PUSH
63452: LD_VAR 0 4
63456: ARRAY
63457: PUSH
63458: FOR_IN
63459: IFFALSE 63485
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63461: LD_VAR 0 3
63465: PUSH
63466: LD_INT 1
63468: ARRAY
63469: PPUSH
63470: LD_VAR 0 3
63474: PUSH
63475: LD_INT 2
63477: ARRAY
63478: PPUSH
63479: CALL_OW 235
63483: GO 63458
63485: POP
63486: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63487: LD_ADDR_EXP 38
63491: PUSH
63492: LD_EXP 38
63496: PPUSH
63497: LD_VAR 0 4
63501: PPUSH
63502: EMPTY
63503: PPUSH
63504: CALL_OW 1
63508: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63509: LD_VAR 0 1
63513: PPUSH
63514: LD_INT 0
63516: PPUSH
63517: CALL_OW 505
// end ; end ;
63521: LD_VAR 0 2
63525: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63526: LD_INT 0
63528: PPUSH
63529: PPUSH
63530: PPUSH
// if not hack in hackTanks or not vehicles then
63531: LD_VAR 0 1
63535: PUSH
63536: LD_EXP 37
63540: IN
63541: NOT
63542: IFTRUE 63551
63544: PUSH
63545: LD_VAR 0 2
63549: NOT
63550: OR
63551: IFFALSE 63555
// exit ;
63553: GO 63830
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63555: LD_ADDR_VAR 0 2
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: LD_VAR 0 2
63569: PPUSH
63570: LD_INT 1
63572: PPUSH
63573: LD_INT 1
63575: PPUSH
63576: CALL 22630 0 4
63580: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63581: LD_ADDR_VAR 0 5
63585: PUSH
63586: LD_EXP 37
63590: PPUSH
63591: LD_VAR 0 1
63595: PPUSH
63596: CALL 21978 0 2
63600: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63601: LD_EXP 38
63605: PUSH
63606: LD_VAR 0 5
63610: ARRAY
63611: PUSH
63612: LD_EXP 39
63616: LESS
63617: IFFALSE 63806
// begin for i := 1 to vehicles do
63619: LD_ADDR_VAR 0 4
63623: PUSH
63624: DOUBLE
63625: LD_INT 1
63627: DEC
63628: ST_TO_ADDR
63629: LD_VAR 0 2
63633: PUSH
63634: FOR_TO
63635: IFFALSE 63804
// begin if hackTanksCaptured [ index ] = hackLimit then
63637: LD_EXP 38
63641: PUSH
63642: LD_VAR 0 5
63646: ARRAY
63647: PUSH
63648: LD_EXP 39
63652: EQUAL
63653: IFFALSE 63657
// break ;
63655: GO 63804
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63657: LD_ADDR_EXP 41
63661: PUSH
63662: LD_EXP 41
63666: PPUSH
63667: LD_VAR 0 5
63671: PPUSH
63672: LD_EXP 41
63676: PUSH
63677: LD_VAR 0 5
63681: ARRAY
63682: PUSH
63683: LD_INT 1
63685: PLUS
63686: PPUSH
63687: CALL_OW 1
63691: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63692: LD_ADDR_EXP 38
63696: PUSH
63697: LD_EXP 38
63701: PPUSH
63702: LD_VAR 0 5
63706: PUSH
63707: LD_EXP 38
63711: PUSH
63712: LD_VAR 0 5
63716: ARRAY
63717: PUSH
63718: LD_INT 1
63720: PLUS
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PPUSH
63726: LD_VAR 0 2
63730: PUSH
63731: LD_VAR 0 4
63735: ARRAY
63736: PUSH
63737: LD_VAR 0 2
63741: PUSH
63742: LD_VAR 0 4
63746: ARRAY
63747: PPUSH
63748: CALL_OW 255
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PPUSH
63757: CALL 22195 0 3
63761: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63762: LD_VAR 0 2
63766: PUSH
63767: LD_VAR 0 4
63771: ARRAY
63772: PPUSH
63773: LD_VAR 0 1
63777: PPUSH
63778: CALL_OW 255
63782: PPUSH
63783: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63787: LD_VAR 0 2
63791: PUSH
63792: LD_VAR 0 4
63796: ARRAY
63797: PPUSH
63798: CALL_OW 141
// end ;
63802: GO 63634
63804: POP
63805: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63806: LD_VAR 0 1
63810: PPUSH
63811: LD_EXP 38
63815: PUSH
63816: LD_VAR 0 5
63820: ARRAY
63821: PUSH
63822: LD_INT 0
63824: PLUS
63825: PPUSH
63826: CALL_OW 505
// end ;
63830: LD_VAR 0 3
63834: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63835: LD_INT 0
63837: PPUSH
63838: PPUSH
63839: PPUSH
63840: PPUSH
// if not hack in hackTanks then
63841: LD_VAR 0 1
63845: PUSH
63846: LD_EXP 37
63850: IN
63851: NOT
63852: IFFALSE 63856
// exit ;
63854: GO 64100
// index := GetElementIndex ( hackTanks , hack ) ;
63856: LD_ADDR_VAR 0 4
63860: PUSH
63861: LD_EXP 37
63865: PPUSH
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL 21978 0 2
63875: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63876: LD_ADDR_VAR 0 3
63880: PUSH
63881: DOUBLE
63882: LD_EXP 38
63886: PUSH
63887: LD_VAR 0 4
63891: ARRAY
63892: INC
63893: ST_TO_ADDR
63894: LD_INT 1
63896: PUSH
63897: FOR_DOWNTO
63898: IFFALSE 64074
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63900: LD_ADDR_VAR 0 5
63904: PUSH
63905: LD_EXP 38
63909: PUSH
63910: LD_VAR 0 4
63914: ARRAY
63915: PUSH
63916: LD_VAR 0 3
63920: ARRAY
63921: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63922: LD_VAR 0 5
63926: PUSH
63927: LD_INT 1
63929: ARRAY
63930: PPUSH
63931: CALL_OW 302
63935: NOT
63936: IFTRUE 63964
63938: PUSH
63939: LD_VAR 0 5
63943: PUSH
63944: LD_INT 1
63946: ARRAY
63947: PPUSH
63948: CALL_OW 255
63952: PUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 255
63962: NONEQUAL
63963: OR
63964: IFFALSE 64072
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63966: LD_VAR 0 5
63970: PUSH
63971: LD_INT 1
63973: ARRAY
63974: PPUSH
63975: CALL_OW 305
63979: IFFALSE 64007
63981: PUSH
63982: LD_VAR 0 5
63986: PUSH
63987: LD_INT 1
63989: ARRAY
63990: PPUSH
63991: CALL_OW 255
63995: PUSH
63996: LD_VAR 0 1
64000: PPUSH
64001: CALL_OW 255
64005: EQUAL
64006: AND
64007: IFFALSE 64031
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64009: LD_VAR 0 5
64013: PUSH
64014: LD_INT 1
64016: ARRAY
64017: PPUSH
64018: LD_VAR 0 5
64022: PUSH
64023: LD_INT 2
64025: ARRAY
64026: PPUSH
64027: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64031: LD_ADDR_EXP 38
64035: PUSH
64036: LD_EXP 38
64040: PPUSH
64041: LD_VAR 0 4
64045: PPUSH
64046: LD_EXP 38
64050: PUSH
64051: LD_VAR 0 4
64055: ARRAY
64056: PPUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: CALL_OW 3
64066: PPUSH
64067: CALL_OW 1
64071: ST_TO_ADDR
// end ; end ;
64072: GO 63897
64074: POP
64075: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64076: LD_VAR 0 1
64080: PPUSH
64081: LD_EXP 38
64085: PUSH
64086: LD_VAR 0 4
64090: ARRAY
64091: PUSH
64092: LD_INT 0
64094: PLUS
64095: PPUSH
64096: CALL_OW 505
// end ;
64100: LD_VAR 0 2
64104: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64105: LD_INT 0
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
// if not hack in hackTanks then
64111: LD_VAR 0 1
64115: PUSH
64116: LD_EXP 37
64120: IN
64121: NOT
64122: IFFALSE 64126
// exit ;
64124: GO 64211
// index := GetElementIndex ( hackTanks , hack ) ;
64126: LD_ADDR_VAR 0 5
64130: PUSH
64131: LD_EXP 37
64135: PPUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL 21978 0 2
64145: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64146: LD_ADDR_VAR 0 4
64150: PUSH
64151: DOUBLE
64152: LD_INT 1
64154: DEC
64155: ST_TO_ADDR
64156: LD_EXP 38
64160: PUSH
64161: LD_VAR 0 5
64165: ARRAY
64166: PUSH
64167: FOR_TO
64168: IFFALSE 64209
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64170: LD_EXP 38
64174: PUSH
64175: LD_VAR 0 5
64179: ARRAY
64180: PUSH
64181: LD_VAR 0 4
64185: ARRAY
64186: PUSH
64187: LD_INT 1
64189: ARRAY
64190: PUSH
64191: LD_VAR 0 2
64195: EQUAL
64196: IFFALSE 64207
// KillUnit ( vehicle ) ;
64198: LD_VAR 0 2
64202: PPUSH
64203: CALL_OW 66
64207: GO 64167
64209: POP
64210: POP
// end ;
64211: LD_VAR 0 3
64215: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
64216: LD_EXP 42
64220: NOT
64221: IFFALSE 64354
64223: GO 64225
64225: DISABLE
64226: LD_INT 0
64228: PPUSH
// begin initMiner := true ;
64229: LD_ADDR_EXP 42
64233: PUSH
64234: LD_INT 1
64236: ST_TO_ADDR
// minersList := [ ] ;
64237: LD_ADDR_EXP 43
64241: PUSH
64242: EMPTY
64243: ST_TO_ADDR
// minerMinesList := [ ] ;
64244: LD_ADDR_EXP 44
64248: PUSH
64249: EMPTY
64250: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
64251: LD_ADDR_EXP 45
64255: PUSH
64256: LD_INT 10
64258: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64259: LD_ADDR_VAR 0 1
64263: PUSH
64264: LD_INT 34
64266: PUSH
64267: LD_INT 81
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PPUSH
64274: CALL_OW 69
64278: PUSH
64279: FOR_IN
64280: IFFALSE 64352
// begin if not i in minersList then
64282: LD_VAR 0 1
64286: PUSH
64287: LD_EXP 43
64291: IN
64292: NOT
64293: IFFALSE 64350
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64295: LD_ADDR_EXP 43
64299: PUSH
64300: LD_EXP 43
64304: PPUSH
64305: LD_EXP 43
64309: PUSH
64310: LD_INT 1
64312: PLUS
64313: PPUSH
64314: LD_VAR 0 1
64318: PPUSH
64319: CALL_OW 1
64323: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64324: LD_ADDR_EXP 44
64328: PUSH
64329: LD_EXP 44
64333: PPUSH
64334: LD_EXP 44
64338: PUSH
64339: LD_INT 1
64341: PLUS
64342: PPUSH
64343: EMPTY
64344: PPUSH
64345: CALL_OW 1
64349: ST_TO_ADDR
// end end ;
64350: GO 64279
64352: POP
64353: POP
// end ;
64354: PPOPN 1
64356: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
64357: LD_EXP 42
64361: IFFALSE 64392
64363: PUSH
64364: LD_EXP 44
64368: PPUSH
64369: CALL 19277 0 1
64373: IFTRUE 64391
64375: PUSH
64376: LD_INT 34
64378: PUSH
64379: LD_INT 81
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PPUSH
64386: CALL_OW 69
64390: OR
64391: AND
64392: IFFALSE 64912
64394: GO 64396
64396: DISABLE
64397: LD_INT 0
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
// begin enable ;
64403: ENABLE
// for i := minerMinesList downto 1 do
64404: LD_ADDR_VAR 0 1
64408: PUSH
64409: DOUBLE
64410: LD_EXP 44
64414: INC
64415: ST_TO_ADDR
64416: LD_INT 1
64418: PUSH
64419: FOR_DOWNTO
64420: IFFALSE 64910
// begin side := GetSide ( minersList [ i ] ) ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_EXP 43
64431: PUSH
64432: LD_VAR 0 1
64436: ARRAY
64437: PPUSH
64438: CALL_OW 255
64442: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
64443: LD_EXP 43
64447: PUSH
64448: LD_VAR 0 1
64452: ARRAY
64453: PPUSH
64454: CALL_OW 300
64458: IFFALSE 64479
64460: PUSH
64461: LD_VAR 0 3
64465: PUSH
64466: LD_OWVAR 2
64470: PUSH
64471: LD_INT 9
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: IN
64478: AND
64479: IFFALSE 64512
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
64481: LD_EXP 43
64485: PUSH
64486: LD_VAR 0 1
64490: ARRAY
64491: PPUSH
64492: LD_EXP 44
64496: PUSH
64497: LD_VAR 0 1
64501: ARRAY
64502: PPUSH
64503: CALL 19277 0 1
64507: PPUSH
64508: CALL_OW 505
// if not minerMinesList [ i ] then
64512: LD_EXP 44
64516: PUSH
64517: LD_VAR 0 1
64521: ARRAY
64522: NOT
64523: IFFALSE 64527
// continue ;
64525: GO 64419
// for j := minerMinesList [ i ] downto 1 do
64527: LD_ADDR_VAR 0 2
64531: PUSH
64532: DOUBLE
64533: LD_EXP 44
64537: PUSH
64538: LD_VAR 0 1
64542: ARRAY
64543: INC
64544: ST_TO_ADDR
64545: LD_INT 1
64547: PUSH
64548: FOR_DOWNTO
64549: IFFALSE 64906
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
64551: LD_EXP 43
64555: PUSH
64556: LD_VAR 0 1
64560: ARRAY
64561: PPUSH
64562: CALL_OW 301
64566: IFTRUE 64586
64568: PUSH
64569: LD_EXP 43
64573: PUSH
64574: LD_VAR 0 1
64578: ARRAY
64579: PPUSH
64580: CALL_OW 305
64584: NOT
64585: OR
64586: IFFALSE 64677
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64588: LD_EXP 44
64592: PUSH
64593: LD_VAR 0 1
64597: ARRAY
64598: PUSH
64599: LD_VAR 0 2
64603: ARRAY
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PPUSH
64609: LD_EXP 44
64613: PUSH
64614: LD_VAR 0 1
64618: ARRAY
64619: PUSH
64620: LD_VAR 0 2
64624: ARRAY
64625: PUSH
64626: LD_INT 2
64628: ARRAY
64629: PPUSH
64630: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64634: LD_ADDR_EXP 44
64638: PUSH
64639: LD_EXP 44
64643: PPUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_EXP 44
64653: PUSH
64654: LD_VAR 0 1
64658: ARRAY
64659: PPUSH
64660: LD_VAR 0 2
64664: PPUSH
64665: CALL_OW 3
64669: PPUSH
64670: CALL_OW 1
64674: ST_TO_ADDR
// continue ;
64675: GO 64548
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64677: LD_ADDR_VAR 0 4
64681: PUSH
64682: LD_EXP 44
64686: PUSH
64687: LD_VAR 0 1
64691: ARRAY
64692: PUSH
64693: LD_VAR 0 2
64697: ARRAY
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PPUSH
64703: LD_EXP 44
64707: PUSH
64708: LD_VAR 0 1
64712: ARRAY
64713: PUSH
64714: LD_VAR 0 2
64718: ARRAY
64719: PUSH
64720: LD_INT 2
64722: ARRAY
64723: PPUSH
64724: CALL_OW 428
64728: ST_TO_ADDR
// if not tmp then
64729: LD_VAR 0 4
64733: NOT
64734: IFFALSE 64738
// continue ;
64736: GO 64548
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64738: LD_VAR 0 4
64742: PUSH
64743: LD_INT 81
64745: PUSH
64746: LD_VAR 0 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PPUSH
64755: CALL_OW 69
64759: IN
64760: IFFALSE 64810
64762: PUSH
64763: LD_EXP 44
64767: PUSH
64768: LD_VAR 0 1
64772: ARRAY
64773: PUSH
64774: LD_VAR 0 2
64778: ARRAY
64779: PUSH
64780: LD_INT 1
64782: ARRAY
64783: PPUSH
64784: LD_EXP 44
64788: PUSH
64789: LD_VAR 0 1
64793: ARRAY
64794: PUSH
64795: LD_VAR 0 2
64799: ARRAY
64800: PUSH
64801: LD_INT 2
64803: ARRAY
64804: PPUSH
64805: CALL_OW 458
64809: AND
64810: IFFALSE 64904
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64812: LD_EXP 44
64816: PUSH
64817: LD_VAR 0 1
64821: ARRAY
64822: PUSH
64823: LD_VAR 0 2
64827: ARRAY
64828: PUSH
64829: LD_INT 1
64831: ARRAY
64832: PPUSH
64833: LD_EXP 44
64837: PUSH
64838: LD_VAR 0 1
64842: ARRAY
64843: PUSH
64844: LD_VAR 0 2
64848: ARRAY
64849: PUSH
64850: LD_INT 2
64852: ARRAY
64853: PPUSH
64854: LD_VAR 0 3
64858: PPUSH
64859: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64863: LD_ADDR_EXP 44
64867: PUSH
64868: LD_EXP 44
64872: PPUSH
64873: LD_VAR 0 1
64877: PPUSH
64878: LD_EXP 44
64882: PUSH
64883: LD_VAR 0 1
64887: ARRAY
64888: PPUSH
64889: LD_VAR 0 2
64893: PPUSH
64894: CALL_OW 3
64898: PPUSH
64899: CALL_OW 1
64903: ST_TO_ADDR
// end ; end ;
64904: GO 64548
64906: POP
64907: POP
// end ;
64908: GO 64419
64910: POP
64911: POP
// end ;
64912: PPOPN 4
64914: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
64915: LD_INT 0
64917: PPUSH
64918: PPUSH
64919: PPUSH
64920: PPUSH
// result := false ;
64921: LD_ADDR_VAR 0 4
64925: PUSH
64926: LD_INT 0
64928: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64929: LD_VAR 0 1
64933: PPUSH
64934: CALL_OW 264
64938: PUSH
64939: LD_INT 81
64941: EQUAL
64942: NOT
64943: IFFALSE 64947
// exit ;
64945: GO 65317
// side := GetSide ( unit ) ;
64947: LD_ADDR_VAR 0 6
64951: PUSH
64952: LD_VAR 0 1
64956: PPUSH
64957: CALL_OW 255
64961: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
64962: LD_ADDR_VAR 0 5
64966: PUSH
64967: LD_EXP 43
64971: PPUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL 21978 0 2
64981: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64982: LD_EXP 44
64986: PUSH
64987: LD_VAR 0 5
64991: ARRAY
64992: PUSH
64993: LD_EXP 45
64997: GREATEREQUAL
64998: IFFALSE 65002
// exit ;
65000: GO 65317
// ComMoveXY ( unit , x , y ) ;
65002: LD_VAR 0 1
65006: PPUSH
65007: LD_VAR 0 2
65011: PPUSH
65012: LD_VAR 0 3
65016: PPUSH
65017: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65021: LD_INT 35
65023: PPUSH
65024: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65028: LD_VAR 0 1
65032: PPUSH
65033: LD_VAR 0 2
65037: PPUSH
65038: LD_VAR 0 3
65042: PPUSH
65043: CALL 54034 0 3
65047: NOT
65048: IFFALSE 65061
65050: PUSH
65051: LD_VAR 0 1
65055: PPUSH
65056: CALL_OW 314
65060: AND
65061: IFFALSE 65065
// exit ;
65063: GO 65317
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65065: LD_VAR 0 2
65069: PPUSH
65070: LD_VAR 0 3
65074: PPUSH
65075: CALL_OW 428
65079: PUSH
65080: LD_VAR 0 1
65084: EQUAL
65085: IFFALSE 65099
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 314
65097: NOT
65098: AND
65099: IFFALSE 65021
// if MineAtPos ( x , y ) then
65101: LD_VAR 0 2
65105: PPUSH
65106: LD_VAR 0 3
65110: PPUSH
65111: CALL_OW 458
65115: IFFALSE 65119
// exit ;
65117: GO 65317
// if your_side = side then
65119: LD_OWVAR 2
65123: PUSH
65124: LD_VAR 0 6
65128: EQUAL
65129: IFFALSE 65148
// PlaySoundXY ( x , y , PlantMine ) ;
65131: LD_VAR 0 2
65135: PPUSH
65136: LD_VAR 0 3
65140: PPUSH
65141: LD_STRING PlantMine
65143: PPUSH
65144: CALL_OW 366
// repeat wait ( 1 ) ;
65148: LD_INT 1
65150: PPUSH
65151: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
65155: LD_VAR 0 2
65159: PPUSH
65160: LD_VAR 0 3
65164: PPUSH
65165: LD_VAR 0 6
65169: PPUSH
65170: LD_INT 0
65172: PPUSH
65173: CALL_OW 454
65177: IFFALSE 65148
// if MineAtPos ( x , y ) then
65179: LD_VAR 0 2
65183: PPUSH
65184: LD_VAR 0 3
65188: PPUSH
65189: CALL_OW 458
65193: IFFALSE 65309
// begin for i in minerMinesList [ index ] do
65195: LD_ADDR_VAR 0 7
65199: PUSH
65200: LD_EXP 44
65204: PUSH
65205: LD_VAR 0 5
65209: ARRAY
65210: PUSH
65211: FOR_IN
65212: IFFALSE 65254
// if i [ 1 ] = x and i [ 2 ] = y then
65214: LD_VAR 0 7
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PUSH
65223: LD_VAR 0 2
65227: EQUAL
65228: IFFALSE 65246
65230: PUSH
65231: LD_VAR 0 7
65235: PUSH
65236: LD_INT 2
65238: ARRAY
65239: PUSH
65240: LD_VAR 0 3
65244: EQUAL
65245: AND
65246: IFFALSE 65252
// exit ;
65248: POP
65249: POP
65250: GO 65317
65252: GO 65211
65254: POP
65255: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65256: LD_ADDR_EXP 44
65260: PUSH
65261: LD_EXP 44
65265: PPUSH
65266: LD_VAR 0 5
65270: PUSH
65271: LD_EXP 44
65275: PUSH
65276: LD_VAR 0 5
65280: ARRAY
65281: PUSH
65282: LD_INT 1
65284: PLUS
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PPUSH
65290: LD_VAR 0 2
65294: PUSH
65295: LD_VAR 0 3
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PPUSH
65304: CALL 22195 0 3
65308: ST_TO_ADDR
// end ; result := true ;
65309: LD_ADDR_VAR 0 4
65313: PUSH
65314: LD_INT 1
65316: ST_TO_ADDR
// end ;
65317: LD_VAR 0 4
65321: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65322: LD_INT 0
65324: PPUSH
65325: PPUSH
65326: PPUSH
// if not unit in minersList then
65327: LD_VAR 0 1
65331: PUSH
65332: LD_EXP 43
65336: IN
65337: NOT
65338: IFFALSE 65342
// exit ;
65340: GO 65549
// index := GetElementIndex ( minersList , unit ) ;
65342: LD_ADDR_VAR 0 6
65346: PUSH
65347: LD_EXP 43
65351: PPUSH
65352: LD_VAR 0 1
65356: PPUSH
65357: CALL 21978 0 2
65361: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65362: LD_ADDR_VAR 0 5
65366: PUSH
65367: DOUBLE
65368: LD_EXP 44
65372: PUSH
65373: LD_VAR 0 6
65377: ARRAY
65378: INC
65379: ST_TO_ADDR
65380: LD_INT 1
65382: PUSH
65383: FOR_DOWNTO
65384: IFFALSE 65547
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65386: LD_EXP 44
65390: PUSH
65391: LD_VAR 0 6
65395: ARRAY
65396: PUSH
65397: LD_VAR 0 5
65401: ARRAY
65402: PUSH
65403: LD_INT 1
65405: ARRAY
65406: PPUSH
65407: LD_EXP 44
65411: PUSH
65412: LD_VAR 0 6
65416: ARRAY
65417: PUSH
65418: LD_VAR 0 5
65422: ARRAY
65423: PUSH
65424: LD_INT 2
65426: ARRAY
65427: PPUSH
65428: LD_VAR 0 2
65432: PPUSH
65433: LD_VAR 0 3
65437: PPUSH
65438: CALL_OW 298
65442: PUSH
65443: LD_INT 6
65445: LESS
65446: IFFALSE 65545
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65448: LD_EXP 44
65452: PUSH
65453: LD_VAR 0 6
65457: ARRAY
65458: PUSH
65459: LD_VAR 0 5
65463: ARRAY
65464: PUSH
65465: LD_INT 1
65467: ARRAY
65468: PPUSH
65469: LD_EXP 44
65473: PUSH
65474: LD_VAR 0 6
65478: ARRAY
65479: PUSH
65480: LD_VAR 0 5
65484: ARRAY
65485: PUSH
65486: LD_INT 2
65488: ARRAY
65489: PPUSH
65490: LD_VAR 0 1
65494: PPUSH
65495: CALL_OW 255
65499: PPUSH
65500: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65504: LD_ADDR_EXP 44
65508: PUSH
65509: LD_EXP 44
65513: PPUSH
65514: LD_VAR 0 6
65518: PPUSH
65519: LD_EXP 44
65523: PUSH
65524: LD_VAR 0 6
65528: ARRAY
65529: PPUSH
65530: LD_VAR 0 5
65534: PPUSH
65535: CALL_OW 3
65539: PPUSH
65540: CALL_OW 1
65544: ST_TO_ADDR
// end ; end ;
65545: GO 65383
65547: POP
65548: POP
// end ;
65549: LD_VAR 0 4
65553: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65554: LD_INT 0
65556: PPUSH
65557: PPUSH
65558: PPUSH
65559: PPUSH
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 264
65574: PUSH
65575: LD_INT 81
65577: EQUAL
65578: NOT
65579: IFTRUE 65594
65581: PUSH
65582: LD_VAR 0 1
65586: PUSH
65587: LD_EXP 43
65591: IN
65592: NOT
65593: OR
65594: IFFALSE 65598
// exit ;
65596: GO 65924
// index := GetElementIndex ( minersList , unit ) ;
65598: LD_ADDR_VAR 0 6
65602: PUSH
65603: LD_EXP 43
65607: PPUSH
65608: LD_VAR 0 1
65612: PPUSH
65613: CALL 21978 0 2
65617: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65618: LD_ADDR_VAR 0 8
65622: PUSH
65623: LD_EXP 45
65627: PUSH
65628: LD_EXP 44
65632: PUSH
65633: LD_VAR 0 6
65637: ARRAY
65638: MINUS
65639: ST_TO_ADDR
// if not minesFreeAmount then
65640: LD_VAR 0 8
65644: NOT
65645: IFFALSE 65649
// exit ;
65647: GO 65924
// tmp := [ ] ;
65649: LD_ADDR_VAR 0 7
65653: PUSH
65654: EMPTY
65655: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65656: LD_ADDR_VAR 0 5
65660: PUSH
65661: DOUBLE
65662: LD_INT 1
65664: DEC
65665: ST_TO_ADDR
65666: LD_VAR 0 8
65670: PUSH
65671: FOR_TO
65672: IFFALSE 65871
// begin _d := rand ( 0 , 5 ) ;
65674: LD_ADDR_VAR 0 11
65678: PUSH
65679: LD_INT 0
65681: PPUSH
65682: LD_INT 5
65684: PPUSH
65685: CALL_OW 12
65689: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65690: LD_ADDR_VAR 0 12
65694: PUSH
65695: LD_INT 2
65697: PPUSH
65698: LD_INT 6
65700: PPUSH
65701: CALL_OW 12
65705: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65706: LD_ADDR_VAR 0 9
65710: PUSH
65711: LD_VAR 0 2
65715: PPUSH
65716: LD_VAR 0 11
65720: PPUSH
65721: LD_VAR 0 12
65725: PPUSH
65726: CALL_OW 272
65730: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65731: LD_ADDR_VAR 0 10
65735: PUSH
65736: LD_VAR 0 3
65740: PPUSH
65741: LD_VAR 0 11
65745: PPUSH
65746: LD_VAR 0 12
65750: PPUSH
65751: CALL_OW 273
65755: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65756: LD_VAR 0 9
65760: PPUSH
65761: LD_VAR 0 10
65765: PPUSH
65766: CALL_OW 488
65770: IFFALSE 65794
65772: PUSH
65773: LD_VAR 0 9
65777: PUSH
65778: LD_VAR 0 10
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_VAR 0 7
65791: IN
65792: NOT
65793: AND
65794: IFFALSE 65813
65796: PUSH
65797: LD_VAR 0 9
65801: PPUSH
65802: LD_VAR 0 10
65806: PPUSH
65807: CALL_OW 458
65811: NOT
65812: AND
65813: IFFALSE 65855
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65815: LD_ADDR_VAR 0 7
65819: PUSH
65820: LD_VAR 0 7
65824: PPUSH
65825: LD_VAR 0 7
65829: PUSH
65830: LD_INT 1
65832: PLUS
65833: PPUSH
65834: LD_VAR 0 9
65838: PUSH
65839: LD_VAR 0 10
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PPUSH
65848: CALL_OW 1
65852: ST_TO_ADDR
65853: GO 65869
// i := i - 1 ;
65855: LD_ADDR_VAR 0 5
65859: PUSH
65860: LD_VAR 0 5
65864: PUSH
65865: LD_INT 1
65867: MINUS
65868: ST_TO_ADDR
// end ;
65869: GO 65671
65871: POP
65872: POP
// for i in tmp do
65873: LD_ADDR_VAR 0 5
65877: PUSH
65878: LD_VAR 0 7
65882: PUSH
65883: FOR_IN
65884: IFFALSE 65922
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65886: LD_VAR 0 1
65890: PPUSH
65891: LD_VAR 0 5
65895: PUSH
65896: LD_INT 1
65898: ARRAY
65899: PPUSH
65900: LD_VAR 0 5
65904: PUSH
65905: LD_INT 2
65907: ARRAY
65908: PPUSH
65909: CALL 64915 0 3
65913: NOT
65914: IFFALSE 65920
// exit ;
65916: POP
65917: POP
65918: GO 65924
65920: GO 65883
65922: POP
65923: POP
// end ;
65924: LD_VAR 0 4
65928: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65929: LD_INT 0
65931: PPUSH
65932: PPUSH
65933: PPUSH
65934: PPUSH
65935: PPUSH
65936: PPUSH
65937: PPUSH
65938: PPUSH
65939: PPUSH
// if GetClass ( unit ) <> class_sniper then
65940: LD_VAR 0 1
65944: PPUSH
65945: CALL_OW 257
65949: PUSH
65950: LD_INT 5
65952: NONEQUAL
65953: IFFALSE 65957
// exit ;
65955: GO 66427
// dist := 8 ;
65957: LD_ADDR_VAR 0 5
65961: PUSH
65962: LD_INT 8
65964: ST_TO_ADDR
// viewRange := 12 ;
65965: LD_ADDR_VAR 0 8
65969: PUSH
65970: LD_INT 12
65972: ST_TO_ADDR
// side := GetSide ( unit ) ;
65973: LD_ADDR_VAR 0 6
65977: PUSH
65978: LD_VAR 0 1
65982: PPUSH
65983: CALL_OW 255
65987: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65988: LD_INT 61
65990: PPUSH
65991: LD_VAR 0 6
65995: PPUSH
65996: CALL_OW 321
66000: PUSH
66001: LD_INT 2
66003: EQUAL
66004: IFFALSE 66014
// viewRange := 16 ;
66006: LD_ADDR_VAR 0 8
66010: PUSH
66011: LD_INT 16
66013: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66014: LD_VAR 0 1
66018: PPUSH
66019: LD_VAR 0 2
66023: PPUSH
66024: LD_VAR 0 3
66028: PPUSH
66029: CALL_OW 297
66033: PUSH
66034: LD_VAR 0 5
66038: GREATER
66039: IFFALSE 66118
// begin ComMoveXY ( unit , x , y ) ;
66041: LD_VAR 0 1
66045: PPUSH
66046: LD_VAR 0 2
66050: PPUSH
66051: LD_VAR 0 3
66055: PPUSH
66056: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66060: LD_INT 35
66062: PPUSH
66063: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66067: LD_VAR 0 1
66071: PPUSH
66072: LD_VAR 0 2
66076: PPUSH
66077: LD_VAR 0 3
66081: PPUSH
66082: CALL 54034 0 3
66086: NOT
66087: IFFALSE 66091
// exit ;
66089: GO 66427
// until GetDistUnitXY ( unit , x , y ) < dist ;
66091: LD_VAR 0 1
66095: PPUSH
66096: LD_VAR 0 2
66100: PPUSH
66101: LD_VAR 0 3
66105: PPUSH
66106: CALL_OW 297
66110: PUSH
66111: LD_VAR 0 5
66115: LESS
66116: IFFALSE 66060
// end ; ComTurnXY ( unit , x , y ) ;
66118: LD_VAR 0 1
66122: PPUSH
66123: LD_VAR 0 2
66127: PPUSH
66128: LD_VAR 0 3
66132: PPUSH
66133: CALL_OW 118
// repeat if Multiplayer then
66137: LD_OWVAR 4
66141: IFFALSE 66152
// wait ( 35 ) else
66143: LD_INT 35
66145: PPUSH
66146: CALL_OW 67
66150: GO 66159
// wait ( 5 ) ;
66152: LD_INT 5
66154: PPUSH
66155: CALL_OW 67
// _d := GetDir ( unit ) ;
66159: LD_ADDR_VAR 0 11
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 254
66173: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
66174: LD_ADDR_VAR 0 7
66178: PUSH
66179: LD_VAR 0 1
66183: PPUSH
66184: CALL_OW 250
66188: PPUSH
66189: LD_VAR 0 1
66193: PPUSH
66194: CALL_OW 251
66198: PPUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 3
66208: PPUSH
66209: CALL 56670 0 4
66213: ST_TO_ADDR
// until dir = _d ;
66214: LD_VAR 0 7
66218: PUSH
66219: LD_VAR 0 11
66223: EQUAL
66224: IFFALSE 66137
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
66226: LD_ADDR_VAR 0 9
66230: PUSH
66231: LD_VAR 0 1
66235: PPUSH
66236: CALL_OW 250
66240: PPUSH
66241: LD_VAR 0 7
66245: PPUSH
66246: LD_VAR 0 5
66250: PPUSH
66251: CALL_OW 272
66255: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
66256: LD_ADDR_VAR 0 10
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: CALL_OW 251
66270: PPUSH
66271: LD_VAR 0 7
66275: PPUSH
66276: LD_VAR 0 5
66280: PPUSH
66281: CALL_OW 273
66285: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66286: LD_VAR 0 9
66290: PPUSH
66291: LD_VAR 0 10
66295: PPUSH
66296: CALL_OW 488
66300: NOT
66301: IFFALSE 66305
// exit ;
66303: GO 66427
// ComAnimCustom ( unit , 1 ) ;
66305: LD_VAR 0 1
66309: PPUSH
66310: LD_INT 1
66312: PPUSH
66313: CALL_OW 592
// p := 0 ;
66317: LD_ADDR_VAR 0 12
66321: PUSH
66322: LD_INT 0
66324: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66325: LD_VAR 0 9
66329: PPUSH
66330: LD_VAR 0 10
66334: PPUSH
66335: LD_VAR 0 6
66339: PPUSH
66340: LD_VAR 0 8
66344: PPUSH
66345: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
66349: LD_INT 35
66351: PPUSH
66352: CALL_OW 67
// p := Inc ( p ) ;
66356: LD_ADDR_VAR 0 12
66360: PUSH
66361: LD_VAR 0 12
66365: PPUSH
66366: CALL 56626 0 1
66370: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
66371: LD_VAR 0 12
66375: PUSH
66376: LD_INT 3
66378: EQUAL
66379: IFTRUE 66393
66381: PUSH
66382: LD_VAR 0 1
66386: PPUSH
66387: CALL_OW 302
66391: NOT
66392: OR
66393: IFTRUE 66406
66395: PUSH
66396: LD_VAR 0 1
66400: PPUSH
66401: CALL_OW 301
66405: OR
66406: IFFALSE 66349
// RemoveSeeing ( _x , _y , side ) ;
66408: LD_VAR 0 9
66412: PPUSH
66413: LD_VAR 0 10
66417: PPUSH
66418: LD_VAR 0 6
66422: PPUSH
66423: CALL_OW 331
// end ;
66427: LD_VAR 0 4
66431: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
66432: LD_INT 0
66434: PPUSH
66435: PPUSH
66436: PPUSH
66437: PPUSH
66438: PPUSH
66439: PPUSH
66440: PPUSH
66441: PPUSH
66442: PPUSH
66443: PPUSH
66444: PPUSH
// if not unit then
66445: LD_VAR 0 1
66449: NOT
66450: IFFALSE 66454
// exit ;
66452: GO 66725
// side := GetSide ( unit ) ;
66454: LD_ADDR_VAR 0 3
66458: PUSH
66459: LD_VAR 0 1
66463: PPUSH
66464: CALL_OW 255
66468: ST_TO_ADDR
// x := GetX ( unit ) ;
66469: LD_ADDR_VAR 0 5
66473: PUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 250
66483: ST_TO_ADDR
// y := GetY ( unit ) ;
66484: LD_ADDR_VAR 0 6
66488: PUSH
66489: LD_VAR 0 1
66493: PPUSH
66494: CALL_OW 251
66498: ST_TO_ADDR
// r := 8 ;
66499: LD_ADDR_VAR 0 4
66503: PUSH
66504: LD_INT 8
66506: ST_TO_ADDR
// if x - r < 0 then
66507: LD_VAR 0 5
66511: PUSH
66512: LD_VAR 0 4
66516: MINUS
66517: PUSH
66518: LD_INT 0
66520: LESS
66521: IFFALSE 66533
// min_x := 0 else
66523: LD_ADDR_VAR 0 7
66527: PUSH
66528: LD_INT 0
66530: ST_TO_ADDR
66531: GO 66549
// min_x := x - r ;
66533: LD_ADDR_VAR 0 7
66537: PUSH
66538: LD_VAR 0 5
66542: PUSH
66543: LD_VAR 0 4
66547: MINUS
66548: ST_TO_ADDR
// if y - r < 0 then
66549: LD_VAR 0 6
66553: PUSH
66554: LD_VAR 0 4
66558: MINUS
66559: PUSH
66560: LD_INT 0
66562: LESS
66563: IFFALSE 66575
// min_y := 0 else
66565: LD_ADDR_VAR 0 8
66569: PUSH
66570: LD_INT 0
66572: ST_TO_ADDR
66573: GO 66591
// min_y := y - r ;
66575: LD_ADDR_VAR 0 8
66579: PUSH
66580: LD_VAR 0 6
66584: PUSH
66585: LD_VAR 0 4
66589: MINUS
66590: ST_TO_ADDR
// max_x := x + r ;
66591: LD_ADDR_VAR 0 9
66595: PUSH
66596: LD_VAR 0 5
66600: PUSH
66601: LD_VAR 0 4
66605: PLUS
66606: ST_TO_ADDR
// max_y := y + r ;
66607: LD_ADDR_VAR 0 10
66611: PUSH
66612: LD_VAR 0 6
66616: PUSH
66617: LD_VAR 0 4
66621: PLUS
66622: ST_TO_ADDR
// for _x = min_x to max_x do
66623: LD_ADDR_VAR 0 11
66627: PUSH
66628: DOUBLE
66629: LD_VAR 0 7
66633: DEC
66634: ST_TO_ADDR
66635: LD_VAR 0 9
66639: PUSH
66640: FOR_TO
66641: IFFALSE 66723
// for _y = min_y to max_y do
66643: LD_ADDR_VAR 0 12
66647: PUSH
66648: DOUBLE
66649: LD_VAR 0 8
66653: DEC
66654: ST_TO_ADDR
66655: LD_VAR 0 10
66659: PUSH
66660: FOR_TO
66661: IFFALSE 66719
// begin if not ValidHex ( _x , _y ) then
66663: LD_VAR 0 11
66667: PPUSH
66668: LD_VAR 0 12
66672: PPUSH
66673: CALL_OW 488
66677: NOT
66678: IFFALSE 66682
// continue ;
66680: GO 66660
// if MineAtPos ( _x , _y ) then
66682: LD_VAR 0 11
66686: PPUSH
66687: LD_VAR 0 12
66691: PPUSH
66692: CALL_OW 458
66696: IFFALSE 66717
// ViewMineAtPos ( _x , _y , side ) ;
66698: LD_VAR 0 11
66702: PPUSH
66703: LD_VAR 0 12
66707: PPUSH
66708: LD_VAR 0 3
66712: PPUSH
66713: CALL_OW 457
// end ;
66717: GO 66660
66719: POP
66720: POP
66721: GO 66640
66723: POP
66724: POP
// end ;
66725: LD_VAR 0 2
66729: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
66730: LD_INT 0
66732: PPUSH
66733: PPUSH
66734: PPUSH
66735: PPUSH
66736: PPUSH
66737: PPUSH
66738: PPUSH
// if not units then
66739: LD_VAR 0 1
66743: NOT
66744: IFFALSE 66748
// exit ;
66746: GO 67212
// scaners := [ ] ;
66748: LD_ADDR_VAR 0 6
66752: PUSH
66753: EMPTY
66754: ST_TO_ADDR
// for i in units do
66755: LD_ADDR_VAR 0 3
66759: PUSH
66760: LD_VAR 0 1
66764: PUSH
66765: FOR_IN
66766: IFFALSE 66923
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
66768: LD_VAR 0 3
66772: PPUSH
66773: CALL_OW 264
66777: PUSH
66778: LD_INT 11
66780: NONEQUAL
66781: IFTRUE 66795
66783: PUSH
66784: LD_VAR 0 3
66788: PPUSH
66789: CALL_OW 302
66793: NOT
66794: OR
66795: IFTRUE 66812
66797: PUSH
66798: LD_VAR 0 3
66802: PPUSH
66803: CALL_OW 110
66807: PUSH
66808: LD_INT 502
66810: EQUAL
66811: OR
66812: IFFALSE 66816
// continue ;
66814: GO 66765
// ComStop ( i ) ;
66816: LD_VAR 0 3
66820: PPUSH
66821: CALL_OW 141
// x := GetX ( i ) ;
66825: LD_ADDR_VAR 0 4
66829: PUSH
66830: LD_VAR 0 3
66834: PPUSH
66835: CALL_OW 250
66839: ST_TO_ADDR
// y := GetY ( i ) ;
66840: LD_ADDR_VAR 0 5
66844: PUSH
66845: LD_VAR 0 3
66849: PPUSH
66850: CALL_OW 251
66854: ST_TO_ADDR
// if GetSide ( i ) = your_side then
66855: LD_VAR 0 3
66859: PPUSH
66860: CALL_OW 255
66864: PUSH
66865: LD_OWVAR 2
66869: EQUAL
66870: IFFALSE 66889
// PlaySoundXY ( x , y , mineDetector ) ;
66872: LD_VAR 0 4
66876: PPUSH
66877: LD_VAR 0 5
66881: PPUSH
66882: LD_STRING mineDetector
66884: PPUSH
66885: CALL_OW 366
// scaners := Join ( scaners , i ) ;
66889: LD_ADDR_VAR 0 6
66893: PUSH
66894: LD_VAR 0 6
66898: PPUSH
66899: LD_VAR 0 3
66903: PPUSH
66904: CALL 55253 0 2
66908: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
66909: LD_VAR 0 3
66913: PPUSH
66914: LD_INT 502
66916: PPUSH
66917: CALL_OW 109
// end ;
66921: GO 66765
66923: POP
66924: POP
// if not scaners then
66925: LD_VAR 0 6
66929: NOT
66930: IFFALSE 66934
// exit ;
66932: GO 67212
// wait ( 3 ) ;
66934: LD_INT 3
66936: PPUSH
66937: CALL_OW 67
// timer := 6 ;
66941: LD_ADDR_VAR 0 7
66945: PUSH
66946: LD_INT 6
66948: ST_TO_ADDR
// repeat for i in scaners do
66949: LD_ADDR_VAR 0 3
66953: PUSH
66954: LD_VAR 0 6
66958: PUSH
66959: FOR_IN
66960: IFFALSE 67110
// begin side := GetSide ( i ) ;
66962: LD_ADDR_VAR 0 8
66966: PUSH
66967: LD_VAR 0 3
66971: PPUSH
66972: CALL_OW 255
66976: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
66977: LD_VAR 0 3
66981: PPUSH
66982: CALL_OW 302
66986: NOT
66987: IFTRUE 67000
66989: PUSH
66990: LD_VAR 0 3
66994: PPUSH
66995: CALL_OW 314
66999: OR
67000: IFTRUE 67031
67002: PUSH
67003: LD_VAR 0 3
67007: PPUSH
67008: CALL_OW 263
67012: PUSH
67013: LD_INT 1
67015: EQUAL
67016: IFFALSE 67030
67018: PUSH
67019: LD_VAR 0 3
67023: PPUSH
67024: CALL_OW 311
67028: NOT
67029: AND
67030: OR
67031: IFFALSE 67075
// begin SetUnitDisplayNumber ( i , 0 ) ;
67033: LD_VAR 0 3
67037: PPUSH
67038: LD_INT 0
67040: PPUSH
67041: CALL_OW 505
// SetTag ( i , 0 ) ;
67045: LD_VAR 0 3
67049: PPUSH
67050: LD_INT 0
67052: PPUSH
67053: CALL_OW 109
// scaners := scaners diff i ;
67057: LD_ADDR_VAR 0 6
67061: PUSH
67062: LD_VAR 0 6
67066: PUSH
67067: LD_VAR 0 3
67071: DIFF
67072: ST_TO_ADDR
// continue ;
67073: GO 66959
// end ; if side in [ your_side , 9 ] then
67075: LD_VAR 0 8
67079: PUSH
67080: LD_OWVAR 2
67084: PUSH
67085: LD_INT 9
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: IN
67092: IFFALSE 67108
// SetUnitDisplayNumber ( i , timer ) ;
67094: LD_VAR 0 3
67098: PPUSH
67099: LD_VAR 0 7
67103: PPUSH
67104: CALL_OW 505
// end ;
67108: GO 66959
67110: POP
67111: POP
// if not scaners then
67112: LD_VAR 0 6
67116: NOT
67117: IFFALSE 67121
// exit ;
67119: GO 67212
// timer := Dec ( timer ) ;
67121: LD_ADDR_VAR 0 7
67125: PUSH
67126: LD_VAR 0 7
67130: PPUSH
67131: CALL 56648 0 1
67135: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67136: LD_INT 35
67138: PPUSH
67139: CALL_OW 67
// until timer = 0 ;
67143: LD_VAR 0 7
67147: PUSH
67148: LD_INT 0
67150: EQUAL
67151: IFFALSE 66949
// if not scaners then
67153: LD_VAR 0 6
67157: NOT
67158: IFFALSE 67162
// exit ;
67160: GO 67212
// for i in scaners do
67162: LD_ADDR_VAR 0 3
67166: PUSH
67167: LD_VAR 0 6
67171: PUSH
67172: FOR_IN
67173: IFFALSE 67210
// begin SetUnitDisplayNumber ( i , 0 ) ;
67175: LD_VAR 0 3
67179: PPUSH
67180: LD_INT 0
67182: PPUSH
67183: CALL_OW 505
// SetTag ( i , 0 ) ;
67187: LD_VAR 0 3
67191: PPUSH
67192: LD_INT 0
67194: PPUSH
67195: CALL_OW 109
// RevealDetectorMine ( i ) ;
67199: LD_VAR 0 3
67203: PPUSH
67204: CALL 66432 0 1
// end ;
67208: GO 67172
67210: POP
67211: POP
// end ;
67212: LD_VAR 0 2
67216: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
67217: LD_INT 0
67219: PPUSH
// if p1 = mine_detector_mode then
67220: LD_VAR 0 2
67224: PUSH
67225: LD_INT 103
67227: EQUAL
67228: IFFALSE 67239
// DetectMine ( units ) ;
67230: LD_VAR 0 1
67234: PPUSH
67235: CALL 66730 0 1
// end ; end_of_file
67239: LD_VAR 0 7
67243: RET
// export globalGameSaveCounter ; every 0 0$1 do
67244: GO 67246
67246: DISABLE
// begin enable ;
67247: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67248: LD_STRING updateTimer(
67250: PUSH
67251: LD_OWVAR 1
67255: STR
67256: PUSH
67257: LD_STRING );
67259: STR
67260: PPUSH
67261: CALL_OW 559
// end ;
67265: END
// every 0 0$1 do
67266: GO 67268
67268: DISABLE
// begin globalGameSaveCounter := 0 ;
67269: LD_ADDR_EXP 46
67273: PUSH
67274: LD_INT 0
67276: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
67277: LD_STRING setGameSaveCounter(0)
67279: PPUSH
67280: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
67284: LD_STRING initStreamRollete();
67286: PPUSH
67287: CALL_OW 559
// InitStreamMode ;
67291: CALL 68643 0 0
// DefineStreamItems ( false ) ;
67295: LD_INT 0
67297: PPUSH
67298: CALL 69107 0 1
// end ;
67302: END
// export function SOS_MapStart ( ) ; begin
67303: LD_INT 0
67305: PPUSH
// if streamModeActive then
67306: LD_EXP 47
67310: IFFALSE 67319
// DefineStreamItems ( true ) ;
67312: LD_INT 1
67314: PPUSH
67315: CALL 69107 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
67319: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
67321: PPUSH
67322: CALL_OW 559
// UpdateLuaVariables ( ) ;
67326: CALL 67343 0 0
// UpdateFactoryWaypoints ( ) ;
67330: CALL 82229 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67334: CALL 82481 0 0
// end ;
67338: LD_VAR 0 1
67342: RET
// function UpdateLuaVariables ( ) ; begin
67343: LD_INT 0
67345: PPUSH
// if globalGameSaveCounter then
67346: LD_EXP 46
67350: IFFALSE 67384
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
67352: LD_ADDR_EXP 46
67356: PUSH
67357: LD_EXP 46
67361: PPUSH
67362: CALL 56626 0 1
67366: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
67367: LD_STRING setGameSaveCounter(
67369: PUSH
67370: LD_EXP 46
67374: STR
67375: PUSH
67376: LD_STRING )
67378: STR
67379: PPUSH
67380: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
67384: LD_STRING setGameDifficulty(
67386: PUSH
67387: LD_OWVAR 67
67391: STR
67392: PUSH
67393: LD_STRING )
67395: STR
67396: PPUSH
67397: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
67401: LD_STRING displayDifficulty(
67403: PUSH
67404: LD_OWVAR 67
67408: STR
67409: PUSH
67410: LD_STRING )
67412: STR
67413: PPUSH
67414: CALL_OW 559
// end ;
67418: LD_VAR 0 1
67422: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67423: LD_INT 0
67425: PPUSH
// if p2 = stream_mode then
67426: LD_VAR 0 2
67430: PUSH
67431: LD_INT 100
67433: EQUAL
67434: IFFALSE 68437
// begin if not StreamModeActive then
67436: LD_EXP 47
67440: NOT
67441: IFFALSE 67451
// StreamModeActive := true ;
67443: LD_ADDR_EXP 47
67447: PUSH
67448: LD_INT 1
67450: ST_TO_ADDR
// if p3 = 0 then
67451: LD_VAR 0 3
67455: PUSH
67456: LD_INT 0
67458: EQUAL
67459: IFFALSE 67465
// InitStreamMode ;
67461: CALL 68643 0 0
// if p3 = 1 then
67465: LD_VAR 0 3
67469: PUSH
67470: LD_INT 1
67472: EQUAL
67473: IFFALSE 67483
// sRocket := true ;
67475: LD_ADDR_EXP 52
67479: PUSH
67480: LD_INT 1
67482: ST_TO_ADDR
// if p3 = 2 then
67483: LD_VAR 0 3
67487: PUSH
67488: LD_INT 2
67490: EQUAL
67491: IFFALSE 67501
// sSpeed := true ;
67493: LD_ADDR_EXP 51
67497: PUSH
67498: LD_INT 1
67500: ST_TO_ADDR
// if p3 = 3 then
67501: LD_VAR 0 3
67505: PUSH
67506: LD_INT 3
67508: EQUAL
67509: IFFALSE 67519
// sEngine := true ;
67511: LD_ADDR_EXP 53
67515: PUSH
67516: LD_INT 1
67518: ST_TO_ADDR
// if p3 = 4 then
67519: LD_VAR 0 3
67523: PUSH
67524: LD_INT 4
67526: EQUAL
67527: IFFALSE 67537
// sSpec := true ;
67529: LD_ADDR_EXP 50
67533: PUSH
67534: LD_INT 1
67536: ST_TO_ADDR
// if p3 = 5 then
67537: LD_VAR 0 3
67541: PUSH
67542: LD_INT 5
67544: EQUAL
67545: IFFALSE 67555
// sLevel := true ;
67547: LD_ADDR_EXP 54
67551: PUSH
67552: LD_INT 1
67554: ST_TO_ADDR
// if p3 = 6 then
67555: LD_VAR 0 3
67559: PUSH
67560: LD_INT 6
67562: EQUAL
67563: IFFALSE 67573
// sArmoury := true ;
67565: LD_ADDR_EXP 55
67569: PUSH
67570: LD_INT 1
67572: ST_TO_ADDR
// if p3 = 7 then
67573: LD_VAR 0 3
67577: PUSH
67578: LD_INT 7
67580: EQUAL
67581: IFFALSE 67591
// sRadar := true ;
67583: LD_ADDR_EXP 56
67587: PUSH
67588: LD_INT 1
67590: ST_TO_ADDR
// if p3 = 8 then
67591: LD_VAR 0 3
67595: PUSH
67596: LD_INT 8
67598: EQUAL
67599: IFFALSE 67609
// sBunker := true ;
67601: LD_ADDR_EXP 57
67605: PUSH
67606: LD_INT 1
67608: ST_TO_ADDR
// if p3 = 9 then
67609: LD_VAR 0 3
67613: PUSH
67614: LD_INT 9
67616: EQUAL
67617: IFFALSE 67627
// sHack := true ;
67619: LD_ADDR_EXP 58
67623: PUSH
67624: LD_INT 1
67626: ST_TO_ADDR
// if p3 = 10 then
67627: LD_VAR 0 3
67631: PUSH
67632: LD_INT 10
67634: EQUAL
67635: IFFALSE 67645
// sFire := true ;
67637: LD_ADDR_EXP 59
67641: PUSH
67642: LD_INT 1
67644: ST_TO_ADDR
// if p3 = 11 then
67645: LD_VAR 0 3
67649: PUSH
67650: LD_INT 11
67652: EQUAL
67653: IFFALSE 67663
// sRefresh := true ;
67655: LD_ADDR_EXP 60
67659: PUSH
67660: LD_INT 1
67662: ST_TO_ADDR
// if p3 = 12 then
67663: LD_VAR 0 3
67667: PUSH
67668: LD_INT 12
67670: EQUAL
67671: IFFALSE 67681
// sExp := true ;
67673: LD_ADDR_EXP 61
67677: PUSH
67678: LD_INT 1
67680: ST_TO_ADDR
// if p3 = 13 then
67681: LD_VAR 0 3
67685: PUSH
67686: LD_INT 13
67688: EQUAL
67689: IFFALSE 67699
// sDepot := true ;
67691: LD_ADDR_EXP 62
67695: PUSH
67696: LD_INT 1
67698: ST_TO_ADDR
// if p3 = 14 then
67699: LD_VAR 0 3
67703: PUSH
67704: LD_INT 14
67706: EQUAL
67707: IFFALSE 67717
// sFlag := true ;
67709: LD_ADDR_EXP 63
67713: PUSH
67714: LD_INT 1
67716: ST_TO_ADDR
// if p3 = 15 then
67717: LD_VAR 0 3
67721: PUSH
67722: LD_INT 15
67724: EQUAL
67725: IFFALSE 67735
// sKamikadze := true ;
67727: LD_ADDR_EXP 71
67731: PUSH
67732: LD_INT 1
67734: ST_TO_ADDR
// if p3 = 16 then
67735: LD_VAR 0 3
67739: PUSH
67740: LD_INT 16
67742: EQUAL
67743: IFFALSE 67753
// sTroll := true ;
67745: LD_ADDR_EXP 72
67749: PUSH
67750: LD_INT 1
67752: ST_TO_ADDR
// if p3 = 17 then
67753: LD_VAR 0 3
67757: PUSH
67758: LD_INT 17
67760: EQUAL
67761: IFFALSE 67771
// sSlow := true ;
67763: LD_ADDR_EXP 73
67767: PUSH
67768: LD_INT 1
67770: ST_TO_ADDR
// if p3 = 18 then
67771: LD_VAR 0 3
67775: PUSH
67776: LD_INT 18
67778: EQUAL
67779: IFFALSE 67789
// sLack := true ;
67781: LD_ADDR_EXP 74
67785: PUSH
67786: LD_INT 1
67788: ST_TO_ADDR
// if p3 = 19 then
67789: LD_VAR 0 3
67793: PUSH
67794: LD_INT 19
67796: EQUAL
67797: IFFALSE 67807
// sTank := true ;
67799: LD_ADDR_EXP 76
67803: PUSH
67804: LD_INT 1
67806: ST_TO_ADDR
// if p3 = 20 then
67807: LD_VAR 0 3
67811: PUSH
67812: LD_INT 20
67814: EQUAL
67815: IFFALSE 67825
// sRemote := true ;
67817: LD_ADDR_EXP 77
67821: PUSH
67822: LD_INT 1
67824: ST_TO_ADDR
// if p3 = 21 then
67825: LD_VAR 0 3
67829: PUSH
67830: LD_INT 21
67832: EQUAL
67833: IFFALSE 67843
// sPowell := true ;
67835: LD_ADDR_EXP 78
67839: PUSH
67840: LD_INT 1
67842: ST_TO_ADDR
// if p3 = 22 then
67843: LD_VAR 0 3
67847: PUSH
67848: LD_INT 22
67850: EQUAL
67851: IFFALSE 67861
// sTeleport := true ;
67853: LD_ADDR_EXP 81
67857: PUSH
67858: LD_INT 1
67860: ST_TO_ADDR
// if p3 = 23 then
67861: LD_VAR 0 3
67865: PUSH
67866: LD_INT 23
67868: EQUAL
67869: IFFALSE 67879
// sOilTower := true ;
67871: LD_ADDR_EXP 83
67875: PUSH
67876: LD_INT 1
67878: ST_TO_ADDR
// if p3 = 24 then
67879: LD_VAR 0 3
67883: PUSH
67884: LD_INT 24
67886: EQUAL
67887: IFFALSE 67897
// sShovel := true ;
67889: LD_ADDR_EXP 84
67893: PUSH
67894: LD_INT 1
67896: ST_TO_ADDR
// if p3 = 25 then
67897: LD_VAR 0 3
67901: PUSH
67902: LD_INT 25
67904: EQUAL
67905: IFFALSE 67915
// sSheik := true ;
67907: LD_ADDR_EXP 85
67911: PUSH
67912: LD_INT 1
67914: ST_TO_ADDR
// if p3 = 26 then
67915: LD_VAR 0 3
67919: PUSH
67920: LD_INT 26
67922: EQUAL
67923: IFFALSE 67933
// sEarthquake := true ;
67925: LD_ADDR_EXP 87
67929: PUSH
67930: LD_INT 1
67932: ST_TO_ADDR
// if p3 = 27 then
67933: LD_VAR 0 3
67937: PUSH
67938: LD_INT 27
67940: EQUAL
67941: IFFALSE 67951
// sAI := true ;
67943: LD_ADDR_EXP 88
67947: PUSH
67948: LD_INT 1
67950: ST_TO_ADDR
// if p3 = 28 then
67951: LD_VAR 0 3
67955: PUSH
67956: LD_INT 28
67958: EQUAL
67959: IFFALSE 67969
// sCargo := true ;
67961: LD_ADDR_EXP 91
67965: PUSH
67966: LD_INT 1
67968: ST_TO_ADDR
// if p3 = 29 then
67969: LD_VAR 0 3
67973: PUSH
67974: LD_INT 29
67976: EQUAL
67977: IFFALSE 67987
// sDLaser := true ;
67979: LD_ADDR_EXP 92
67983: PUSH
67984: LD_INT 1
67986: ST_TO_ADDR
// if p3 = 30 then
67987: LD_VAR 0 3
67991: PUSH
67992: LD_INT 30
67994: EQUAL
67995: IFFALSE 68005
// sExchange := true ;
67997: LD_ADDR_EXP 93
68001: PUSH
68002: LD_INT 1
68004: ST_TO_ADDR
// if p3 = 31 then
68005: LD_VAR 0 3
68009: PUSH
68010: LD_INT 31
68012: EQUAL
68013: IFFALSE 68023
// sFac := true ;
68015: LD_ADDR_EXP 94
68019: PUSH
68020: LD_INT 1
68022: ST_TO_ADDR
// if p3 = 32 then
68023: LD_VAR 0 3
68027: PUSH
68028: LD_INT 32
68030: EQUAL
68031: IFFALSE 68041
// sPower := true ;
68033: LD_ADDR_EXP 95
68037: PUSH
68038: LD_INT 1
68040: ST_TO_ADDR
// if p3 = 33 then
68041: LD_VAR 0 3
68045: PUSH
68046: LD_INT 33
68048: EQUAL
68049: IFFALSE 68059
// sRandom := true ;
68051: LD_ADDR_EXP 96
68055: PUSH
68056: LD_INT 1
68058: ST_TO_ADDR
// if p3 = 34 then
68059: LD_VAR 0 3
68063: PUSH
68064: LD_INT 34
68066: EQUAL
68067: IFFALSE 68077
// sShield := true ;
68069: LD_ADDR_EXP 97
68073: PUSH
68074: LD_INT 1
68076: ST_TO_ADDR
// if p3 = 35 then
68077: LD_VAR 0 3
68081: PUSH
68082: LD_INT 35
68084: EQUAL
68085: IFFALSE 68095
// sTime := true ;
68087: LD_ADDR_EXP 98
68091: PUSH
68092: LD_INT 1
68094: ST_TO_ADDR
// if p3 = 36 then
68095: LD_VAR 0 3
68099: PUSH
68100: LD_INT 36
68102: EQUAL
68103: IFFALSE 68113
// sTools := true ;
68105: LD_ADDR_EXP 99
68109: PUSH
68110: LD_INT 1
68112: ST_TO_ADDR
// if p3 = 101 then
68113: LD_VAR 0 3
68117: PUSH
68118: LD_INT 101
68120: EQUAL
68121: IFFALSE 68131
// sSold := true ;
68123: LD_ADDR_EXP 64
68127: PUSH
68128: LD_INT 1
68130: ST_TO_ADDR
// if p3 = 102 then
68131: LD_VAR 0 3
68135: PUSH
68136: LD_INT 102
68138: EQUAL
68139: IFFALSE 68149
// sDiff := true ;
68141: LD_ADDR_EXP 65
68145: PUSH
68146: LD_INT 1
68148: ST_TO_ADDR
// if p3 = 103 then
68149: LD_VAR 0 3
68153: PUSH
68154: LD_INT 103
68156: EQUAL
68157: IFFALSE 68167
// sFog := true ;
68159: LD_ADDR_EXP 68
68163: PUSH
68164: LD_INT 1
68166: ST_TO_ADDR
// if p3 = 104 then
68167: LD_VAR 0 3
68171: PUSH
68172: LD_INT 104
68174: EQUAL
68175: IFFALSE 68185
// sReset := true ;
68177: LD_ADDR_EXP 69
68181: PUSH
68182: LD_INT 1
68184: ST_TO_ADDR
// if p3 = 105 then
68185: LD_VAR 0 3
68189: PUSH
68190: LD_INT 105
68192: EQUAL
68193: IFFALSE 68203
// sSun := true ;
68195: LD_ADDR_EXP 70
68199: PUSH
68200: LD_INT 1
68202: ST_TO_ADDR
// if p3 = 106 then
68203: LD_VAR 0 3
68207: PUSH
68208: LD_INT 106
68210: EQUAL
68211: IFFALSE 68221
// sTiger := true ;
68213: LD_ADDR_EXP 66
68217: PUSH
68218: LD_INT 1
68220: ST_TO_ADDR
// if p3 = 107 then
68221: LD_VAR 0 3
68225: PUSH
68226: LD_INT 107
68228: EQUAL
68229: IFFALSE 68239
// sBomb := true ;
68231: LD_ADDR_EXP 67
68235: PUSH
68236: LD_INT 1
68238: ST_TO_ADDR
// if p3 = 108 then
68239: LD_VAR 0 3
68243: PUSH
68244: LD_INT 108
68246: EQUAL
68247: IFFALSE 68257
// sWound := true ;
68249: LD_ADDR_EXP 75
68253: PUSH
68254: LD_INT 1
68256: ST_TO_ADDR
// if p3 = 109 then
68257: LD_VAR 0 3
68261: PUSH
68262: LD_INT 109
68264: EQUAL
68265: IFFALSE 68275
// sBetray := true ;
68267: LD_ADDR_EXP 79
68271: PUSH
68272: LD_INT 1
68274: ST_TO_ADDR
// if p3 = 110 then
68275: LD_VAR 0 3
68279: PUSH
68280: LD_INT 110
68282: EQUAL
68283: IFFALSE 68293
// sContamin := true ;
68285: LD_ADDR_EXP 80
68289: PUSH
68290: LD_INT 1
68292: ST_TO_ADDR
// if p3 = 111 then
68293: LD_VAR 0 3
68297: PUSH
68298: LD_INT 111
68300: EQUAL
68301: IFFALSE 68311
// sOil := true ;
68303: LD_ADDR_EXP 82
68307: PUSH
68308: LD_INT 1
68310: ST_TO_ADDR
// if p3 = 112 then
68311: LD_VAR 0 3
68315: PUSH
68316: LD_INT 112
68318: EQUAL
68319: IFFALSE 68329
// sStu := true ;
68321: LD_ADDR_EXP 86
68325: PUSH
68326: LD_INT 1
68328: ST_TO_ADDR
// if p3 = 113 then
68329: LD_VAR 0 3
68333: PUSH
68334: LD_INT 113
68336: EQUAL
68337: IFFALSE 68347
// sBazooka := true ;
68339: LD_ADDR_EXP 89
68343: PUSH
68344: LD_INT 1
68346: ST_TO_ADDR
// if p3 = 114 then
68347: LD_VAR 0 3
68351: PUSH
68352: LD_INT 114
68354: EQUAL
68355: IFFALSE 68365
// sMortar := true ;
68357: LD_ADDR_EXP 90
68361: PUSH
68362: LD_INT 1
68364: ST_TO_ADDR
// if p3 = 115 then
68365: LD_VAR 0 3
68369: PUSH
68370: LD_INT 115
68372: EQUAL
68373: IFFALSE 68383
// sRanger := true ;
68375: LD_ADDR_EXP 100
68379: PUSH
68380: LD_INT 1
68382: ST_TO_ADDR
// if p3 = 116 then
68383: LD_VAR 0 3
68387: PUSH
68388: LD_INT 116
68390: EQUAL
68391: IFFALSE 68401
// sComputer := true ;
68393: LD_ADDR_EXP 101
68397: PUSH
68398: LD_INT 1
68400: ST_TO_ADDR
// if p3 = 117 then
68401: LD_VAR 0 3
68405: PUSH
68406: LD_INT 117
68408: EQUAL
68409: IFFALSE 68419
// s30 := true ;
68411: LD_ADDR_EXP 102
68415: PUSH
68416: LD_INT 1
68418: ST_TO_ADDR
// if p3 = 118 then
68419: LD_VAR 0 3
68423: PUSH
68424: LD_INT 118
68426: EQUAL
68427: IFFALSE 68437
// s60 := true ;
68429: LD_ADDR_EXP 103
68433: PUSH
68434: LD_INT 1
68436: ST_TO_ADDR
// end ; if p2 = hack_mode then
68437: LD_VAR 0 2
68441: PUSH
68442: LD_INT 101
68444: EQUAL
68445: IFFALSE 68573
// begin case p3 of 1 :
68447: LD_VAR 0 3
68451: PUSH
68452: LD_INT 1
68454: DOUBLE
68455: EQUAL
68456: IFTRUE 68460
68458: GO 68467
68460: POP
// hHackUnlimitedResources ; 2 :
68461: CALL 80836 0 0
68465: GO 68573
68467: LD_INT 2
68469: DOUBLE
68470: EQUAL
68471: IFTRUE 68475
68473: GO 68482
68475: POP
// hHackSetLevel10 ; 3 :
68476: CALL 80969 0 0
68480: GO 68573
68482: LD_INT 3
68484: DOUBLE
68485: EQUAL
68486: IFTRUE 68490
68488: GO 68497
68490: POP
// hHackSetLevel10YourUnits ; 4 :
68491: CALL 81054 0 0
68495: GO 68573
68497: LD_INT 4
68499: DOUBLE
68500: EQUAL
68501: IFTRUE 68505
68503: GO 68512
68505: POP
// hHackInvincible ; 5 :
68506: CALL 81502 0 0
68510: GO 68573
68512: LD_INT 5
68514: DOUBLE
68515: EQUAL
68516: IFTRUE 68520
68518: GO 68527
68520: POP
// hHackInvisible ; 6 :
68521: CALL 81613 0 0
68525: GO 68573
68527: LD_INT 6
68529: DOUBLE
68530: EQUAL
68531: IFTRUE 68535
68533: GO 68542
68535: POP
// hHackChangeYourSide ; 7 :
68536: CALL 81670 0 0
68540: GO 68573
68542: LD_INT 7
68544: DOUBLE
68545: EQUAL
68546: IFTRUE 68550
68548: GO 68557
68550: POP
// hHackChangeUnitSide ; 8 :
68551: CALL 81712 0 0
68555: GO 68573
68557: LD_INT 8
68559: DOUBLE
68560: EQUAL
68561: IFTRUE 68565
68563: GO 68572
68565: POP
// hHackFog ; end ;
68566: CALL 81813 0 0
68570: GO 68573
68572: POP
// end ; if p2 = game_save_mode then
68573: LD_VAR 0 2
68577: PUSH
68578: LD_INT 102
68580: EQUAL
68581: IFFALSE 68638
// begin if p3 = 1 then
68583: LD_VAR 0 3
68587: PUSH
68588: LD_INT 1
68590: EQUAL
68591: IFFALSE 68603
// globalGameSaveCounter := p4 ;
68593: LD_ADDR_EXP 46
68597: PUSH
68598: LD_VAR 0 4
68602: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
68603: LD_VAR 0 3
68607: PUSH
68608: LD_INT 2
68610: EQUAL
68611: IFFALSE 68619
68613: PUSH
68614: LD_EXP 46
68618: AND
68619: IFFALSE 68638
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
68621: LD_STRING setGameSaveCounter(
68623: PUSH
68624: LD_EXP 46
68628: STR
68629: PUSH
68630: LD_STRING )
68632: STR
68633: PPUSH
68634: CALL_OW 559
// end ; end ;
68638: LD_VAR 0 7
68642: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
68643: LD_INT 0
68645: PPUSH
// streamModeActive := false ;
68646: LD_ADDR_EXP 47
68650: PUSH
68651: LD_INT 0
68653: ST_TO_ADDR
// normalCounter := 36 ;
68654: LD_ADDR_EXP 48
68658: PUSH
68659: LD_INT 36
68661: ST_TO_ADDR
// hardcoreCounter := 18 ;
68662: LD_ADDR_EXP 49
68666: PUSH
68667: LD_INT 18
68669: ST_TO_ADDR
// sRocket := false ;
68670: LD_ADDR_EXP 52
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
// sSpeed := false ;
68678: LD_ADDR_EXP 51
68682: PUSH
68683: LD_INT 0
68685: ST_TO_ADDR
// sEngine := false ;
68686: LD_ADDR_EXP 53
68690: PUSH
68691: LD_INT 0
68693: ST_TO_ADDR
// sSpec := false ;
68694: LD_ADDR_EXP 50
68698: PUSH
68699: LD_INT 0
68701: ST_TO_ADDR
// sLevel := false ;
68702: LD_ADDR_EXP 54
68706: PUSH
68707: LD_INT 0
68709: ST_TO_ADDR
// sArmoury := false ;
68710: LD_ADDR_EXP 55
68714: PUSH
68715: LD_INT 0
68717: ST_TO_ADDR
// sRadar := false ;
68718: LD_ADDR_EXP 56
68722: PUSH
68723: LD_INT 0
68725: ST_TO_ADDR
// sBunker := false ;
68726: LD_ADDR_EXP 57
68730: PUSH
68731: LD_INT 0
68733: ST_TO_ADDR
// sHack := false ;
68734: LD_ADDR_EXP 58
68738: PUSH
68739: LD_INT 0
68741: ST_TO_ADDR
// sFire := false ;
68742: LD_ADDR_EXP 59
68746: PUSH
68747: LD_INT 0
68749: ST_TO_ADDR
// sRefresh := false ;
68750: LD_ADDR_EXP 60
68754: PUSH
68755: LD_INT 0
68757: ST_TO_ADDR
// sExp := false ;
68758: LD_ADDR_EXP 61
68762: PUSH
68763: LD_INT 0
68765: ST_TO_ADDR
// sDepot := false ;
68766: LD_ADDR_EXP 62
68770: PUSH
68771: LD_INT 0
68773: ST_TO_ADDR
// sFlag := false ;
68774: LD_ADDR_EXP 63
68778: PUSH
68779: LD_INT 0
68781: ST_TO_ADDR
// sKamikadze := false ;
68782: LD_ADDR_EXP 71
68786: PUSH
68787: LD_INT 0
68789: ST_TO_ADDR
// sTroll := false ;
68790: LD_ADDR_EXP 72
68794: PUSH
68795: LD_INT 0
68797: ST_TO_ADDR
// sSlow := false ;
68798: LD_ADDR_EXP 73
68802: PUSH
68803: LD_INT 0
68805: ST_TO_ADDR
// sLack := false ;
68806: LD_ADDR_EXP 74
68810: PUSH
68811: LD_INT 0
68813: ST_TO_ADDR
// sTank := false ;
68814: LD_ADDR_EXP 76
68818: PUSH
68819: LD_INT 0
68821: ST_TO_ADDR
// sRemote := false ;
68822: LD_ADDR_EXP 77
68826: PUSH
68827: LD_INT 0
68829: ST_TO_ADDR
// sPowell := false ;
68830: LD_ADDR_EXP 78
68834: PUSH
68835: LD_INT 0
68837: ST_TO_ADDR
// sTeleport := false ;
68838: LD_ADDR_EXP 81
68842: PUSH
68843: LD_INT 0
68845: ST_TO_ADDR
// sOilTower := false ;
68846: LD_ADDR_EXP 83
68850: PUSH
68851: LD_INT 0
68853: ST_TO_ADDR
// sShovel := false ;
68854: LD_ADDR_EXP 84
68858: PUSH
68859: LD_INT 0
68861: ST_TO_ADDR
// sSheik := false ;
68862: LD_ADDR_EXP 85
68866: PUSH
68867: LD_INT 0
68869: ST_TO_ADDR
// sEarthquake := false ;
68870: LD_ADDR_EXP 87
68874: PUSH
68875: LD_INT 0
68877: ST_TO_ADDR
// sAI := false ;
68878: LD_ADDR_EXP 88
68882: PUSH
68883: LD_INT 0
68885: ST_TO_ADDR
// sCargo := false ;
68886: LD_ADDR_EXP 91
68890: PUSH
68891: LD_INT 0
68893: ST_TO_ADDR
// sDLaser := false ;
68894: LD_ADDR_EXP 92
68898: PUSH
68899: LD_INT 0
68901: ST_TO_ADDR
// sExchange := false ;
68902: LD_ADDR_EXP 93
68906: PUSH
68907: LD_INT 0
68909: ST_TO_ADDR
// sFac := false ;
68910: LD_ADDR_EXP 94
68914: PUSH
68915: LD_INT 0
68917: ST_TO_ADDR
// sPower := false ;
68918: LD_ADDR_EXP 95
68922: PUSH
68923: LD_INT 0
68925: ST_TO_ADDR
// sRandom := false ;
68926: LD_ADDR_EXP 96
68930: PUSH
68931: LD_INT 0
68933: ST_TO_ADDR
// sShield := false ;
68934: LD_ADDR_EXP 97
68938: PUSH
68939: LD_INT 0
68941: ST_TO_ADDR
// sTime := false ;
68942: LD_ADDR_EXP 98
68946: PUSH
68947: LD_INT 0
68949: ST_TO_ADDR
// sTools := false ;
68950: LD_ADDR_EXP 99
68954: PUSH
68955: LD_INT 0
68957: ST_TO_ADDR
// sSold := false ;
68958: LD_ADDR_EXP 64
68962: PUSH
68963: LD_INT 0
68965: ST_TO_ADDR
// sDiff := false ;
68966: LD_ADDR_EXP 65
68970: PUSH
68971: LD_INT 0
68973: ST_TO_ADDR
// sFog := false ;
68974: LD_ADDR_EXP 68
68978: PUSH
68979: LD_INT 0
68981: ST_TO_ADDR
// sReset := false ;
68982: LD_ADDR_EXP 69
68986: PUSH
68987: LD_INT 0
68989: ST_TO_ADDR
// sSun := false ;
68990: LD_ADDR_EXP 70
68994: PUSH
68995: LD_INT 0
68997: ST_TO_ADDR
// sTiger := false ;
68998: LD_ADDR_EXP 66
69002: PUSH
69003: LD_INT 0
69005: ST_TO_ADDR
// sBomb := false ;
69006: LD_ADDR_EXP 67
69010: PUSH
69011: LD_INT 0
69013: ST_TO_ADDR
// sWound := false ;
69014: LD_ADDR_EXP 75
69018: PUSH
69019: LD_INT 0
69021: ST_TO_ADDR
// sBetray := false ;
69022: LD_ADDR_EXP 79
69026: PUSH
69027: LD_INT 0
69029: ST_TO_ADDR
// sContamin := false ;
69030: LD_ADDR_EXP 80
69034: PUSH
69035: LD_INT 0
69037: ST_TO_ADDR
// sOil := false ;
69038: LD_ADDR_EXP 82
69042: PUSH
69043: LD_INT 0
69045: ST_TO_ADDR
// sStu := false ;
69046: LD_ADDR_EXP 86
69050: PUSH
69051: LD_INT 0
69053: ST_TO_ADDR
// sBazooka := false ;
69054: LD_ADDR_EXP 89
69058: PUSH
69059: LD_INT 0
69061: ST_TO_ADDR
// sMortar := false ;
69062: LD_ADDR_EXP 90
69066: PUSH
69067: LD_INT 0
69069: ST_TO_ADDR
// sRanger := false ;
69070: LD_ADDR_EXP 100
69074: PUSH
69075: LD_INT 0
69077: ST_TO_ADDR
// sComputer := false ;
69078: LD_ADDR_EXP 101
69082: PUSH
69083: LD_INT 0
69085: ST_TO_ADDR
// s30 := false ;
69086: LD_ADDR_EXP 102
69090: PUSH
69091: LD_INT 0
69093: ST_TO_ADDR
// s60 := false ;
69094: LD_ADDR_EXP 103
69098: PUSH
69099: LD_INT 0
69101: ST_TO_ADDR
// end ;
69102: LD_VAR 0 1
69106: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
69107: LD_INT 0
69109: PPUSH
69110: PPUSH
69111: PPUSH
69112: PPUSH
69113: PPUSH
69114: PPUSH
69115: PPUSH
// result := [ ] ;
69116: LD_ADDR_VAR 0 2
69120: PUSH
69121: EMPTY
69122: ST_TO_ADDR
// if campaign_id = 1 then
69123: LD_OWVAR 69
69127: PUSH
69128: LD_INT 1
69130: EQUAL
69131: IFFALSE 72297
// begin case mission_number of 1 :
69133: LD_OWVAR 70
69137: PUSH
69138: LD_INT 1
69140: DOUBLE
69141: EQUAL
69142: IFTRUE 69146
69144: GO 69222
69146: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
69147: LD_ADDR_VAR 0 2
69151: PUSH
69152: LD_INT 2
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: LD_INT 11
69160: PUSH
69161: LD_INT 12
69163: PUSH
69164: LD_INT 15
69166: PUSH
69167: LD_INT 16
69169: PUSH
69170: LD_INT 22
69172: PUSH
69173: LD_INT 23
69175: PUSH
69176: LD_INT 26
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 101
69192: PUSH
69193: LD_INT 102
69195: PUSH
69196: LD_INT 106
69198: PUSH
69199: LD_INT 116
69201: PUSH
69202: LD_INT 117
69204: PUSH
69205: LD_INT 118
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: ST_TO_ADDR
69220: GO 72295
69222: LD_INT 2
69224: DOUBLE
69225: EQUAL
69226: IFTRUE 69230
69228: GO 69314
69230: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69231: LD_ADDR_VAR 0 2
69235: PUSH
69236: LD_INT 2
69238: PUSH
69239: LD_INT 4
69241: PUSH
69242: LD_INT 11
69244: PUSH
69245: LD_INT 12
69247: PUSH
69248: LD_INT 15
69250: PUSH
69251: LD_INT 16
69253: PUSH
69254: LD_INT 22
69256: PUSH
69257: LD_INT 23
69259: PUSH
69260: LD_INT 26
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 101
69276: PUSH
69277: LD_INT 102
69279: PUSH
69280: LD_INT 105
69282: PUSH
69283: LD_INT 106
69285: PUSH
69286: LD_INT 108
69288: PUSH
69289: LD_INT 116
69291: PUSH
69292: LD_INT 117
69294: PUSH
69295: LD_INT 118
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: ST_TO_ADDR
69312: GO 72295
69314: LD_INT 3
69316: DOUBLE
69317: EQUAL
69318: IFTRUE 69322
69320: GO 69410
69322: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
69323: LD_ADDR_VAR 0 2
69327: PUSH
69328: LD_INT 2
69330: PUSH
69331: LD_INT 4
69333: PUSH
69334: LD_INT 5
69336: PUSH
69337: LD_INT 11
69339: PUSH
69340: LD_INT 12
69342: PUSH
69343: LD_INT 15
69345: PUSH
69346: LD_INT 16
69348: PUSH
69349: LD_INT 22
69351: PUSH
69352: LD_INT 26
69354: PUSH
69355: LD_INT 36
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 101
69372: PUSH
69373: LD_INT 102
69375: PUSH
69376: LD_INT 105
69378: PUSH
69379: LD_INT 106
69381: PUSH
69382: LD_INT 108
69384: PUSH
69385: LD_INT 116
69387: PUSH
69388: LD_INT 117
69390: PUSH
69391: LD_INT 118
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: ST_TO_ADDR
69408: GO 72295
69410: LD_INT 4
69412: DOUBLE
69413: EQUAL
69414: IFTRUE 69418
69416: GO 69514
69418: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69419: LD_ADDR_VAR 0 2
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: LD_INT 4
69429: PUSH
69430: LD_INT 5
69432: PUSH
69433: LD_INT 8
69435: PUSH
69436: LD_INT 11
69438: PUSH
69439: LD_INT 12
69441: PUSH
69442: LD_INT 15
69444: PUSH
69445: LD_INT 16
69447: PUSH
69448: LD_INT 22
69450: PUSH
69451: LD_INT 23
69453: PUSH
69454: LD_INT 26
69456: PUSH
69457: LD_INT 36
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 101
69476: PUSH
69477: LD_INT 102
69479: PUSH
69480: LD_INT 105
69482: PUSH
69483: LD_INT 106
69485: PUSH
69486: LD_INT 108
69488: PUSH
69489: LD_INT 116
69491: PUSH
69492: LD_INT 117
69494: PUSH
69495: LD_INT 118
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: ST_TO_ADDR
69512: GO 72295
69514: LD_INT 5
69516: DOUBLE
69517: EQUAL
69518: IFTRUE 69522
69520: GO 69634
69522: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
69523: LD_ADDR_VAR 0 2
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: LD_INT 4
69533: PUSH
69534: LD_INT 5
69536: PUSH
69537: LD_INT 6
69539: PUSH
69540: LD_INT 8
69542: PUSH
69543: LD_INT 11
69545: PUSH
69546: LD_INT 12
69548: PUSH
69549: LD_INT 15
69551: PUSH
69552: LD_INT 16
69554: PUSH
69555: LD_INT 22
69557: PUSH
69558: LD_INT 23
69560: PUSH
69561: LD_INT 25
69563: PUSH
69564: LD_INT 26
69566: PUSH
69567: LD_INT 36
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 101
69588: PUSH
69589: LD_INT 102
69591: PUSH
69592: LD_INT 105
69594: PUSH
69595: LD_INT 106
69597: PUSH
69598: LD_INT 108
69600: PUSH
69601: LD_INT 109
69603: PUSH
69604: LD_INT 112
69606: PUSH
69607: LD_INT 116
69609: PUSH
69610: LD_INT 117
69612: PUSH
69613: LD_INT 118
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: ST_TO_ADDR
69632: GO 72295
69634: LD_INT 6
69636: DOUBLE
69637: EQUAL
69638: IFTRUE 69642
69640: GO 69774
69642: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
69643: LD_ADDR_VAR 0 2
69647: PUSH
69648: LD_INT 2
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: LD_INT 5
69656: PUSH
69657: LD_INT 6
69659: PUSH
69660: LD_INT 8
69662: PUSH
69663: LD_INT 11
69665: PUSH
69666: LD_INT 12
69668: PUSH
69669: LD_INT 15
69671: PUSH
69672: LD_INT 16
69674: PUSH
69675: LD_INT 20
69677: PUSH
69678: LD_INT 21
69680: PUSH
69681: LD_INT 22
69683: PUSH
69684: LD_INT 23
69686: PUSH
69687: LD_INT 25
69689: PUSH
69690: LD_INT 26
69692: PUSH
69693: LD_INT 30
69695: PUSH
69696: LD_INT 31
69698: PUSH
69699: LD_INT 32
69701: PUSH
69702: LD_INT 36
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 101
69728: PUSH
69729: LD_INT 102
69731: PUSH
69732: LD_INT 105
69734: PUSH
69735: LD_INT 106
69737: PUSH
69738: LD_INT 108
69740: PUSH
69741: LD_INT 109
69743: PUSH
69744: LD_INT 112
69746: PUSH
69747: LD_INT 116
69749: PUSH
69750: LD_INT 117
69752: PUSH
69753: LD_INT 118
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: ST_TO_ADDR
69772: GO 72295
69774: LD_INT 7
69776: DOUBLE
69777: EQUAL
69778: IFTRUE 69782
69780: GO 69894
69782: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69783: LD_ADDR_VAR 0 2
69787: PUSH
69788: LD_INT 2
69790: PUSH
69791: LD_INT 4
69793: PUSH
69794: LD_INT 5
69796: PUSH
69797: LD_INT 7
69799: PUSH
69800: LD_INT 11
69802: PUSH
69803: LD_INT 12
69805: PUSH
69806: LD_INT 15
69808: PUSH
69809: LD_INT 16
69811: PUSH
69812: LD_INT 20
69814: PUSH
69815: LD_INT 21
69817: PUSH
69818: LD_INT 22
69820: PUSH
69821: LD_INT 23
69823: PUSH
69824: LD_INT 25
69826: PUSH
69827: LD_INT 26
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 101
69848: PUSH
69849: LD_INT 102
69851: PUSH
69852: LD_INT 103
69854: PUSH
69855: LD_INT 105
69857: PUSH
69858: LD_INT 106
69860: PUSH
69861: LD_INT 108
69863: PUSH
69864: LD_INT 112
69866: PUSH
69867: LD_INT 116
69869: PUSH
69870: LD_INT 117
69872: PUSH
69873: LD_INT 118
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: ST_TO_ADDR
69892: GO 72295
69894: LD_INT 8
69896: DOUBLE
69897: EQUAL
69898: IFTRUE 69902
69900: GO 70042
69902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69903: LD_ADDR_VAR 0 2
69907: PUSH
69908: LD_INT 2
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: LD_INT 5
69916: PUSH
69917: LD_INT 6
69919: PUSH
69920: LD_INT 7
69922: PUSH
69923: LD_INT 8
69925: PUSH
69926: LD_INT 11
69928: PUSH
69929: LD_INT 12
69931: PUSH
69932: LD_INT 15
69934: PUSH
69935: LD_INT 16
69937: PUSH
69938: LD_INT 20
69940: PUSH
69941: LD_INT 21
69943: PUSH
69944: LD_INT 22
69946: PUSH
69947: LD_INT 23
69949: PUSH
69950: LD_INT 25
69952: PUSH
69953: LD_INT 26
69955: PUSH
69956: LD_INT 30
69958: PUSH
69959: LD_INT 31
69961: PUSH
69962: LD_INT 32
69964: PUSH
69965: LD_INT 36
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 101
69992: PUSH
69993: LD_INT 102
69995: PUSH
69996: LD_INT 103
69998: PUSH
69999: LD_INT 105
70001: PUSH
70002: LD_INT 106
70004: PUSH
70005: LD_INT 108
70007: PUSH
70008: LD_INT 109
70010: PUSH
70011: LD_INT 112
70013: PUSH
70014: LD_INT 116
70016: PUSH
70017: LD_INT 117
70019: PUSH
70020: LD_INT 118
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: ST_TO_ADDR
70040: GO 72295
70042: LD_INT 9
70044: DOUBLE
70045: EQUAL
70046: IFTRUE 70050
70048: GO 70198
70050: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
70051: LD_ADDR_VAR 0 2
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: LD_INT 4
70061: PUSH
70062: LD_INT 5
70064: PUSH
70065: LD_INT 6
70067: PUSH
70068: LD_INT 7
70070: PUSH
70071: LD_INT 8
70073: PUSH
70074: LD_INT 11
70076: PUSH
70077: LD_INT 12
70079: PUSH
70080: LD_INT 15
70082: PUSH
70083: LD_INT 16
70085: PUSH
70086: LD_INT 20
70088: PUSH
70089: LD_INT 21
70091: PUSH
70092: LD_INT 22
70094: PUSH
70095: LD_INT 23
70097: PUSH
70098: LD_INT 25
70100: PUSH
70101: LD_INT 26
70103: PUSH
70104: LD_INT 28
70106: PUSH
70107: LD_INT 30
70109: PUSH
70110: LD_INT 31
70112: PUSH
70113: LD_INT 32
70115: PUSH
70116: LD_INT 36
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 101
70144: PUSH
70145: LD_INT 102
70147: PUSH
70148: LD_INT 103
70150: PUSH
70151: LD_INT 105
70153: PUSH
70154: LD_INT 106
70156: PUSH
70157: LD_INT 108
70159: PUSH
70160: LD_INT 109
70162: PUSH
70163: LD_INT 112
70165: PUSH
70166: LD_INT 114
70168: PUSH
70169: LD_INT 116
70171: PUSH
70172: LD_INT 117
70174: PUSH
70175: LD_INT 118
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: ST_TO_ADDR
70196: GO 72295
70198: LD_INT 10
70200: DOUBLE
70201: EQUAL
70202: IFTRUE 70206
70204: GO 70402
70206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
70207: LD_ADDR_VAR 0 2
70211: PUSH
70212: LD_INT 2
70214: PUSH
70215: LD_INT 4
70217: PUSH
70218: LD_INT 5
70220: PUSH
70221: LD_INT 6
70223: PUSH
70224: LD_INT 7
70226: PUSH
70227: LD_INT 8
70229: PUSH
70230: LD_INT 9
70232: PUSH
70233: LD_INT 10
70235: PUSH
70236: LD_INT 11
70238: PUSH
70239: LD_INT 12
70241: PUSH
70242: LD_INT 13
70244: PUSH
70245: LD_INT 14
70247: PUSH
70248: LD_INT 15
70250: PUSH
70251: LD_INT 16
70253: PUSH
70254: LD_INT 17
70256: PUSH
70257: LD_INT 18
70259: PUSH
70260: LD_INT 19
70262: PUSH
70263: LD_INT 20
70265: PUSH
70266: LD_INT 21
70268: PUSH
70269: LD_INT 22
70271: PUSH
70272: LD_INT 23
70274: PUSH
70275: LD_INT 24
70277: PUSH
70278: LD_INT 25
70280: PUSH
70281: LD_INT 26
70283: PUSH
70284: LD_INT 28
70286: PUSH
70287: LD_INT 30
70289: PUSH
70290: LD_INT 31
70292: PUSH
70293: LD_INT 32
70295: PUSH
70296: LD_INT 36
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 101
70332: PUSH
70333: LD_INT 102
70335: PUSH
70336: LD_INT 103
70338: PUSH
70339: LD_INT 104
70341: PUSH
70342: LD_INT 105
70344: PUSH
70345: LD_INT 106
70347: PUSH
70348: LD_INT 107
70350: PUSH
70351: LD_INT 108
70353: PUSH
70354: LD_INT 109
70356: PUSH
70357: LD_INT 110
70359: PUSH
70360: LD_INT 111
70362: PUSH
70363: LD_INT 112
70365: PUSH
70366: LD_INT 114
70368: PUSH
70369: LD_INT 116
70371: PUSH
70372: LD_INT 117
70374: PUSH
70375: LD_INT 118
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: ST_TO_ADDR
70400: GO 72295
70402: LD_INT 11
70404: DOUBLE
70405: EQUAL
70406: IFTRUE 70410
70408: GO 70614
70410: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70411: LD_ADDR_VAR 0 2
70415: PUSH
70416: LD_INT 2
70418: PUSH
70419: LD_INT 3
70421: PUSH
70422: LD_INT 4
70424: PUSH
70425: LD_INT 5
70427: PUSH
70428: LD_INT 6
70430: PUSH
70431: LD_INT 7
70433: PUSH
70434: LD_INT 8
70436: PUSH
70437: LD_INT 9
70439: PUSH
70440: LD_INT 10
70442: PUSH
70443: LD_INT 11
70445: PUSH
70446: LD_INT 12
70448: PUSH
70449: LD_INT 13
70451: PUSH
70452: LD_INT 14
70454: PUSH
70455: LD_INT 15
70457: PUSH
70458: LD_INT 16
70460: PUSH
70461: LD_INT 17
70463: PUSH
70464: LD_INT 18
70466: PUSH
70467: LD_INT 19
70469: PUSH
70470: LD_INT 20
70472: PUSH
70473: LD_INT 21
70475: PUSH
70476: LD_INT 22
70478: PUSH
70479: LD_INT 23
70481: PUSH
70482: LD_INT 24
70484: PUSH
70485: LD_INT 25
70487: PUSH
70488: LD_INT 26
70490: PUSH
70491: LD_INT 28
70493: PUSH
70494: LD_INT 30
70496: PUSH
70497: LD_INT 31
70499: PUSH
70500: LD_INT 32
70502: PUSH
70503: LD_INT 34
70505: PUSH
70506: LD_INT 36
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 101
70544: PUSH
70545: LD_INT 102
70547: PUSH
70548: LD_INT 103
70550: PUSH
70551: LD_INT 104
70553: PUSH
70554: LD_INT 105
70556: PUSH
70557: LD_INT 106
70559: PUSH
70560: LD_INT 107
70562: PUSH
70563: LD_INT 108
70565: PUSH
70566: LD_INT 109
70568: PUSH
70569: LD_INT 110
70571: PUSH
70572: LD_INT 111
70574: PUSH
70575: LD_INT 112
70577: PUSH
70578: LD_INT 114
70580: PUSH
70581: LD_INT 116
70583: PUSH
70584: LD_INT 117
70586: PUSH
70587: LD_INT 118
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: ST_TO_ADDR
70612: GO 72295
70614: LD_INT 12
70616: DOUBLE
70617: EQUAL
70618: IFTRUE 70622
70620: GO 70842
70622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
70623: LD_ADDR_VAR 0 2
70627: PUSH
70628: LD_INT 1
70630: PUSH
70631: LD_INT 2
70633: PUSH
70634: LD_INT 3
70636: PUSH
70637: LD_INT 4
70639: PUSH
70640: LD_INT 5
70642: PUSH
70643: LD_INT 6
70645: PUSH
70646: LD_INT 7
70648: PUSH
70649: LD_INT 8
70651: PUSH
70652: LD_INT 9
70654: PUSH
70655: LD_INT 10
70657: PUSH
70658: LD_INT 11
70660: PUSH
70661: LD_INT 12
70663: PUSH
70664: LD_INT 13
70666: PUSH
70667: LD_INT 14
70669: PUSH
70670: LD_INT 15
70672: PUSH
70673: LD_INT 16
70675: PUSH
70676: LD_INT 17
70678: PUSH
70679: LD_INT 18
70681: PUSH
70682: LD_INT 19
70684: PUSH
70685: LD_INT 20
70687: PUSH
70688: LD_INT 21
70690: PUSH
70691: LD_INT 22
70693: PUSH
70694: LD_INT 23
70696: PUSH
70697: LD_INT 24
70699: PUSH
70700: LD_INT 25
70702: PUSH
70703: LD_INT 26
70705: PUSH
70706: LD_INT 27
70708: PUSH
70709: LD_INT 28
70711: PUSH
70712: LD_INT 30
70714: PUSH
70715: LD_INT 31
70717: PUSH
70718: LD_INT 32
70720: PUSH
70721: LD_INT 33
70723: PUSH
70724: LD_INT 34
70726: PUSH
70727: LD_INT 36
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 101
70768: PUSH
70769: LD_INT 102
70771: PUSH
70772: LD_INT 103
70774: PUSH
70775: LD_INT 104
70777: PUSH
70778: LD_INT 105
70780: PUSH
70781: LD_INT 106
70783: PUSH
70784: LD_INT 107
70786: PUSH
70787: LD_INT 108
70789: PUSH
70790: LD_INT 109
70792: PUSH
70793: LD_INT 110
70795: PUSH
70796: LD_INT 111
70798: PUSH
70799: LD_INT 112
70801: PUSH
70802: LD_INT 113
70804: PUSH
70805: LD_INT 114
70807: PUSH
70808: LD_INT 116
70810: PUSH
70811: LD_INT 117
70813: PUSH
70814: LD_INT 118
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: ST_TO_ADDR
70840: GO 72295
70842: LD_INT 13
70844: DOUBLE
70845: EQUAL
70846: IFTRUE 70850
70848: GO 71058
70850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70851: LD_ADDR_VAR 0 2
70855: PUSH
70856: LD_INT 1
70858: PUSH
70859: LD_INT 2
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: LD_INT 4
70867: PUSH
70868: LD_INT 5
70870: PUSH
70871: LD_INT 8
70873: PUSH
70874: LD_INT 9
70876: PUSH
70877: LD_INT 10
70879: PUSH
70880: LD_INT 11
70882: PUSH
70883: LD_INT 12
70885: PUSH
70886: LD_INT 14
70888: PUSH
70889: LD_INT 15
70891: PUSH
70892: LD_INT 16
70894: PUSH
70895: LD_INT 17
70897: PUSH
70898: LD_INT 18
70900: PUSH
70901: LD_INT 19
70903: PUSH
70904: LD_INT 20
70906: PUSH
70907: LD_INT 21
70909: PUSH
70910: LD_INT 22
70912: PUSH
70913: LD_INT 23
70915: PUSH
70916: LD_INT 24
70918: PUSH
70919: LD_INT 25
70921: PUSH
70922: LD_INT 26
70924: PUSH
70925: LD_INT 27
70927: PUSH
70928: LD_INT 28
70930: PUSH
70931: LD_INT 30
70933: PUSH
70934: LD_INT 31
70936: PUSH
70937: LD_INT 32
70939: PUSH
70940: LD_INT 33
70942: PUSH
70943: LD_INT 34
70945: PUSH
70946: LD_INT 36
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 101
70984: PUSH
70985: LD_INT 102
70987: PUSH
70988: LD_INT 103
70990: PUSH
70991: LD_INT 104
70993: PUSH
70994: LD_INT 105
70996: PUSH
70997: LD_INT 106
70999: PUSH
71000: LD_INT 107
71002: PUSH
71003: LD_INT 108
71005: PUSH
71006: LD_INT 109
71008: PUSH
71009: LD_INT 110
71011: PUSH
71012: LD_INT 111
71014: PUSH
71015: LD_INT 112
71017: PUSH
71018: LD_INT 113
71020: PUSH
71021: LD_INT 114
71023: PUSH
71024: LD_INT 116
71026: PUSH
71027: LD_INT 117
71029: PUSH
71030: LD_INT 118
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: ST_TO_ADDR
71056: GO 72295
71058: LD_INT 14
71060: DOUBLE
71061: EQUAL
71062: IFTRUE 71066
71064: GO 71290
71066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
71067: LD_ADDR_VAR 0 2
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: LD_INT 4
71083: PUSH
71084: LD_INT 5
71086: PUSH
71087: LD_INT 6
71089: PUSH
71090: LD_INT 7
71092: PUSH
71093: LD_INT 8
71095: PUSH
71096: LD_INT 9
71098: PUSH
71099: LD_INT 10
71101: PUSH
71102: LD_INT 11
71104: PUSH
71105: LD_INT 12
71107: PUSH
71108: LD_INT 13
71110: PUSH
71111: LD_INT 14
71113: PUSH
71114: LD_INT 15
71116: PUSH
71117: LD_INT 16
71119: PUSH
71120: LD_INT 17
71122: PUSH
71123: LD_INT 18
71125: PUSH
71126: LD_INT 19
71128: PUSH
71129: LD_INT 20
71131: PUSH
71132: LD_INT 21
71134: PUSH
71135: LD_INT 22
71137: PUSH
71138: LD_INT 23
71140: PUSH
71141: LD_INT 24
71143: PUSH
71144: LD_INT 25
71146: PUSH
71147: LD_INT 26
71149: PUSH
71150: LD_INT 27
71152: PUSH
71153: LD_INT 28
71155: PUSH
71156: LD_INT 29
71158: PUSH
71159: LD_INT 30
71161: PUSH
71162: LD_INT 31
71164: PUSH
71165: LD_INT 32
71167: PUSH
71168: LD_INT 33
71170: PUSH
71171: LD_INT 34
71173: PUSH
71174: LD_INT 36
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 101
71216: PUSH
71217: LD_INT 102
71219: PUSH
71220: LD_INT 103
71222: PUSH
71223: LD_INT 104
71225: PUSH
71226: LD_INT 105
71228: PUSH
71229: LD_INT 106
71231: PUSH
71232: LD_INT 107
71234: PUSH
71235: LD_INT 108
71237: PUSH
71238: LD_INT 109
71240: PUSH
71241: LD_INT 110
71243: PUSH
71244: LD_INT 111
71246: PUSH
71247: LD_INT 112
71249: PUSH
71250: LD_INT 113
71252: PUSH
71253: LD_INT 114
71255: PUSH
71256: LD_INT 116
71258: PUSH
71259: LD_INT 117
71261: PUSH
71262: LD_INT 118
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: ST_TO_ADDR
71288: GO 72295
71290: LD_INT 15
71292: DOUBLE
71293: EQUAL
71294: IFTRUE 71298
71296: GO 71522
71298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71299: LD_ADDR_VAR 0 2
71303: PUSH
71304: LD_INT 1
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: LD_INT 3
71312: PUSH
71313: LD_INT 4
71315: PUSH
71316: LD_INT 5
71318: PUSH
71319: LD_INT 6
71321: PUSH
71322: LD_INT 7
71324: PUSH
71325: LD_INT 8
71327: PUSH
71328: LD_INT 9
71330: PUSH
71331: LD_INT 10
71333: PUSH
71334: LD_INT 11
71336: PUSH
71337: LD_INT 12
71339: PUSH
71340: LD_INT 13
71342: PUSH
71343: LD_INT 14
71345: PUSH
71346: LD_INT 15
71348: PUSH
71349: LD_INT 16
71351: PUSH
71352: LD_INT 17
71354: PUSH
71355: LD_INT 18
71357: PUSH
71358: LD_INT 19
71360: PUSH
71361: LD_INT 20
71363: PUSH
71364: LD_INT 21
71366: PUSH
71367: LD_INT 22
71369: PUSH
71370: LD_INT 23
71372: PUSH
71373: LD_INT 24
71375: PUSH
71376: LD_INT 25
71378: PUSH
71379: LD_INT 26
71381: PUSH
71382: LD_INT 27
71384: PUSH
71385: LD_INT 28
71387: PUSH
71388: LD_INT 29
71390: PUSH
71391: LD_INT 30
71393: PUSH
71394: LD_INT 31
71396: PUSH
71397: LD_INT 32
71399: PUSH
71400: LD_INT 33
71402: PUSH
71403: LD_INT 34
71405: PUSH
71406: LD_INT 36
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 101
71448: PUSH
71449: LD_INT 102
71451: PUSH
71452: LD_INT 103
71454: PUSH
71455: LD_INT 104
71457: PUSH
71458: LD_INT 105
71460: PUSH
71461: LD_INT 106
71463: PUSH
71464: LD_INT 107
71466: PUSH
71467: LD_INT 108
71469: PUSH
71470: LD_INT 109
71472: PUSH
71473: LD_INT 110
71475: PUSH
71476: LD_INT 111
71478: PUSH
71479: LD_INT 112
71481: PUSH
71482: LD_INT 113
71484: PUSH
71485: LD_INT 114
71487: PUSH
71488: LD_INT 116
71490: PUSH
71491: LD_INT 117
71493: PUSH
71494: LD_INT 118
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: ST_TO_ADDR
71520: GO 72295
71522: LD_INT 16
71524: DOUBLE
71525: EQUAL
71526: IFTRUE 71530
71528: GO 71666
71530: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: LD_INT 2
71538: PUSH
71539: LD_INT 4
71541: PUSH
71542: LD_INT 5
71544: PUSH
71545: LD_INT 7
71547: PUSH
71548: LD_INT 11
71550: PUSH
71551: LD_INT 12
71553: PUSH
71554: LD_INT 15
71556: PUSH
71557: LD_INT 16
71559: PUSH
71560: LD_INT 20
71562: PUSH
71563: LD_INT 21
71565: PUSH
71566: LD_INT 22
71568: PUSH
71569: LD_INT 23
71571: PUSH
71572: LD_INT 25
71574: PUSH
71575: LD_INT 26
71577: PUSH
71578: LD_INT 30
71580: PUSH
71581: LD_INT 31
71583: PUSH
71584: LD_INT 32
71586: PUSH
71587: LD_INT 33
71589: PUSH
71590: LD_INT 34
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 101
71616: PUSH
71617: LD_INT 102
71619: PUSH
71620: LD_INT 103
71622: PUSH
71623: LD_INT 106
71625: PUSH
71626: LD_INT 108
71628: PUSH
71629: LD_INT 112
71631: PUSH
71632: LD_INT 113
71634: PUSH
71635: LD_INT 114
71637: PUSH
71638: LD_INT 116
71640: PUSH
71641: LD_INT 117
71643: PUSH
71644: LD_INT 118
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: ST_TO_ADDR
71664: GO 72295
71666: LD_INT 17
71668: DOUBLE
71669: EQUAL
71670: IFTRUE 71674
71672: GO 71898
71674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
71675: LD_ADDR_VAR 0 2
71679: PUSH
71680: LD_INT 1
71682: PUSH
71683: LD_INT 2
71685: PUSH
71686: LD_INT 3
71688: PUSH
71689: LD_INT 4
71691: PUSH
71692: LD_INT 5
71694: PUSH
71695: LD_INT 6
71697: PUSH
71698: LD_INT 7
71700: PUSH
71701: LD_INT 8
71703: PUSH
71704: LD_INT 9
71706: PUSH
71707: LD_INT 10
71709: PUSH
71710: LD_INT 11
71712: PUSH
71713: LD_INT 12
71715: PUSH
71716: LD_INT 13
71718: PUSH
71719: LD_INT 14
71721: PUSH
71722: LD_INT 15
71724: PUSH
71725: LD_INT 16
71727: PUSH
71728: LD_INT 17
71730: PUSH
71731: LD_INT 18
71733: PUSH
71734: LD_INT 19
71736: PUSH
71737: LD_INT 20
71739: PUSH
71740: LD_INT 21
71742: PUSH
71743: LD_INT 22
71745: PUSH
71746: LD_INT 23
71748: PUSH
71749: LD_INT 24
71751: PUSH
71752: LD_INT 25
71754: PUSH
71755: LD_INT 26
71757: PUSH
71758: LD_INT 27
71760: PUSH
71761: LD_INT 28
71763: PUSH
71764: LD_INT 29
71766: PUSH
71767: LD_INT 30
71769: PUSH
71770: LD_INT 31
71772: PUSH
71773: LD_INT 32
71775: PUSH
71776: LD_INT 33
71778: PUSH
71779: LD_INT 34
71781: PUSH
71782: LD_INT 36
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 101
71824: PUSH
71825: LD_INT 102
71827: PUSH
71828: LD_INT 103
71830: PUSH
71831: LD_INT 104
71833: PUSH
71834: LD_INT 105
71836: PUSH
71837: LD_INT 106
71839: PUSH
71840: LD_INT 107
71842: PUSH
71843: LD_INT 108
71845: PUSH
71846: LD_INT 109
71848: PUSH
71849: LD_INT 110
71851: PUSH
71852: LD_INT 111
71854: PUSH
71855: LD_INT 112
71857: PUSH
71858: LD_INT 113
71860: PUSH
71861: LD_INT 114
71863: PUSH
71864: LD_INT 116
71866: PUSH
71867: LD_INT 117
71869: PUSH
71870: LD_INT 118
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: ST_TO_ADDR
71896: GO 72295
71898: LD_INT 18
71900: DOUBLE
71901: EQUAL
71902: IFTRUE 71906
71904: GO 72054
71906: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71907: LD_ADDR_VAR 0 2
71911: PUSH
71912: LD_INT 2
71914: PUSH
71915: LD_INT 4
71917: PUSH
71918: LD_INT 5
71920: PUSH
71921: LD_INT 7
71923: PUSH
71924: LD_INT 11
71926: PUSH
71927: LD_INT 12
71929: PUSH
71930: LD_INT 15
71932: PUSH
71933: LD_INT 16
71935: PUSH
71936: LD_INT 20
71938: PUSH
71939: LD_INT 21
71941: PUSH
71942: LD_INT 22
71944: PUSH
71945: LD_INT 23
71947: PUSH
71948: LD_INT 25
71950: PUSH
71951: LD_INT 26
71953: PUSH
71954: LD_INT 30
71956: PUSH
71957: LD_INT 31
71959: PUSH
71960: LD_INT 32
71962: PUSH
71963: LD_INT 33
71965: PUSH
71966: LD_INT 34
71968: PUSH
71969: LD_INT 35
71971: PUSH
71972: LD_INT 36
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 101
72000: PUSH
72001: LD_INT 102
72003: PUSH
72004: LD_INT 103
72006: PUSH
72007: LD_INT 106
72009: PUSH
72010: LD_INT 108
72012: PUSH
72013: LD_INT 112
72015: PUSH
72016: LD_INT 113
72018: PUSH
72019: LD_INT 114
72021: PUSH
72022: LD_INT 115
72024: PUSH
72025: LD_INT 116
72027: PUSH
72028: LD_INT 117
72030: PUSH
72031: LD_INT 118
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: ST_TO_ADDR
72052: GO 72295
72054: LD_INT 19
72056: DOUBLE
72057: EQUAL
72058: IFTRUE 72062
72060: GO 72294
72062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
72063: LD_ADDR_VAR 0 2
72067: PUSH
72068: LD_INT 1
72070: PUSH
72071: LD_INT 2
72073: PUSH
72074: LD_INT 3
72076: PUSH
72077: LD_INT 4
72079: PUSH
72080: LD_INT 5
72082: PUSH
72083: LD_INT 6
72085: PUSH
72086: LD_INT 7
72088: PUSH
72089: LD_INT 8
72091: PUSH
72092: LD_INT 9
72094: PUSH
72095: LD_INT 10
72097: PUSH
72098: LD_INT 11
72100: PUSH
72101: LD_INT 12
72103: PUSH
72104: LD_INT 13
72106: PUSH
72107: LD_INT 14
72109: PUSH
72110: LD_INT 15
72112: PUSH
72113: LD_INT 16
72115: PUSH
72116: LD_INT 17
72118: PUSH
72119: LD_INT 18
72121: PUSH
72122: LD_INT 19
72124: PUSH
72125: LD_INT 20
72127: PUSH
72128: LD_INT 21
72130: PUSH
72131: LD_INT 22
72133: PUSH
72134: LD_INT 23
72136: PUSH
72137: LD_INT 24
72139: PUSH
72140: LD_INT 25
72142: PUSH
72143: LD_INT 26
72145: PUSH
72146: LD_INT 27
72148: PUSH
72149: LD_INT 28
72151: PUSH
72152: LD_INT 29
72154: PUSH
72155: LD_INT 30
72157: PUSH
72158: LD_INT 31
72160: PUSH
72161: LD_INT 32
72163: PUSH
72164: LD_INT 33
72166: PUSH
72167: LD_INT 34
72169: PUSH
72170: LD_INT 35
72172: PUSH
72173: LD_INT 36
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 101
72216: PUSH
72217: LD_INT 102
72219: PUSH
72220: LD_INT 103
72222: PUSH
72223: LD_INT 104
72225: PUSH
72226: LD_INT 105
72228: PUSH
72229: LD_INT 106
72231: PUSH
72232: LD_INT 107
72234: PUSH
72235: LD_INT 108
72237: PUSH
72238: LD_INT 109
72240: PUSH
72241: LD_INT 110
72243: PUSH
72244: LD_INT 111
72246: PUSH
72247: LD_INT 112
72249: PUSH
72250: LD_INT 113
72252: PUSH
72253: LD_INT 114
72255: PUSH
72256: LD_INT 115
72258: PUSH
72259: LD_INT 116
72261: PUSH
72262: LD_INT 117
72264: PUSH
72265: LD_INT 118
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: ST_TO_ADDR
72292: GO 72295
72294: POP
// end else
72295: GO 72526
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72297: LD_ADDR_VAR 0 2
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: LD_INT 2
72307: PUSH
72308: LD_INT 3
72310: PUSH
72311: LD_INT 4
72313: PUSH
72314: LD_INT 5
72316: PUSH
72317: LD_INT 6
72319: PUSH
72320: LD_INT 7
72322: PUSH
72323: LD_INT 8
72325: PUSH
72326: LD_INT 9
72328: PUSH
72329: LD_INT 10
72331: PUSH
72332: LD_INT 11
72334: PUSH
72335: LD_INT 12
72337: PUSH
72338: LD_INT 13
72340: PUSH
72341: LD_INT 14
72343: PUSH
72344: LD_INT 15
72346: PUSH
72347: LD_INT 16
72349: PUSH
72350: LD_INT 17
72352: PUSH
72353: LD_INT 18
72355: PUSH
72356: LD_INT 19
72358: PUSH
72359: LD_INT 20
72361: PUSH
72362: LD_INT 21
72364: PUSH
72365: LD_INT 22
72367: PUSH
72368: LD_INT 23
72370: PUSH
72371: LD_INT 24
72373: PUSH
72374: LD_INT 25
72376: PUSH
72377: LD_INT 26
72379: PUSH
72380: LD_INT 27
72382: PUSH
72383: LD_INT 28
72385: PUSH
72386: LD_INT 29
72388: PUSH
72389: LD_INT 30
72391: PUSH
72392: LD_INT 31
72394: PUSH
72395: LD_INT 32
72397: PUSH
72398: LD_INT 33
72400: PUSH
72401: LD_INT 34
72403: PUSH
72404: LD_INT 35
72406: PUSH
72407: LD_INT 36
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 101
72450: PUSH
72451: LD_INT 102
72453: PUSH
72454: LD_INT 103
72456: PUSH
72457: LD_INT 104
72459: PUSH
72460: LD_INT 105
72462: PUSH
72463: LD_INT 106
72465: PUSH
72466: LD_INT 107
72468: PUSH
72469: LD_INT 108
72471: PUSH
72472: LD_INT 109
72474: PUSH
72475: LD_INT 110
72477: PUSH
72478: LD_INT 111
72480: PUSH
72481: LD_INT 112
72483: PUSH
72484: LD_INT 113
72486: PUSH
72487: LD_INT 114
72489: PUSH
72490: LD_INT 115
72492: PUSH
72493: LD_INT 116
72495: PUSH
72496: LD_INT 117
72498: PUSH
72499: LD_INT 118
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: ST_TO_ADDR
// if result then
72526: LD_VAR 0 2
72530: IFFALSE 73316
// begin normal :=  ;
72532: LD_ADDR_VAR 0 5
72536: PUSH
72537: LD_STRING 
72539: ST_TO_ADDR
// hardcore :=  ;
72540: LD_ADDR_VAR 0 6
72544: PUSH
72545: LD_STRING 
72547: ST_TO_ADDR
// active :=  ;
72548: LD_ADDR_VAR 0 7
72552: PUSH
72553: LD_STRING 
72555: ST_TO_ADDR
// for i = 1 to normalCounter do
72556: LD_ADDR_VAR 0 8
72560: PUSH
72561: DOUBLE
72562: LD_INT 1
72564: DEC
72565: ST_TO_ADDR
72566: LD_EXP 48
72570: PUSH
72571: FOR_TO
72572: IFFALSE 72673
// begin tmp := 0 ;
72574: LD_ADDR_VAR 0 3
72578: PUSH
72579: LD_STRING 0
72581: ST_TO_ADDR
// if result [ 1 ] then
72582: LD_VAR 0 2
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: IFFALSE 72655
// if result [ 1 ] [ 1 ] = i then
72592: LD_VAR 0 2
72596: PUSH
72597: LD_INT 1
72599: ARRAY
72600: PUSH
72601: LD_INT 1
72603: ARRAY
72604: PUSH
72605: LD_VAR 0 8
72609: EQUAL
72610: IFFALSE 72655
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72612: LD_ADDR_VAR 0 2
72616: PUSH
72617: LD_VAR 0 2
72621: PPUSH
72622: LD_INT 1
72624: PPUSH
72625: LD_VAR 0 2
72629: PUSH
72630: LD_INT 1
72632: ARRAY
72633: PPUSH
72634: LD_INT 1
72636: PPUSH
72637: CALL_OW 3
72641: PPUSH
72642: CALL_OW 1
72646: ST_TO_ADDR
// tmp := 1 ;
72647: LD_ADDR_VAR 0 3
72651: PUSH
72652: LD_STRING 1
72654: ST_TO_ADDR
// end ; normal := normal & tmp ;
72655: LD_ADDR_VAR 0 5
72659: PUSH
72660: LD_VAR 0 5
72664: PUSH
72665: LD_VAR 0 3
72669: STR
72670: ST_TO_ADDR
// end ;
72671: GO 72571
72673: POP
72674: POP
// for i = 1 to hardcoreCounter do
72675: LD_ADDR_VAR 0 8
72679: PUSH
72680: DOUBLE
72681: LD_INT 1
72683: DEC
72684: ST_TO_ADDR
72685: LD_EXP 49
72689: PUSH
72690: FOR_TO
72691: IFFALSE 72796
// begin tmp := 0 ;
72693: LD_ADDR_VAR 0 3
72697: PUSH
72698: LD_STRING 0
72700: ST_TO_ADDR
// if result [ 2 ] then
72701: LD_VAR 0 2
72705: PUSH
72706: LD_INT 2
72708: ARRAY
72709: IFFALSE 72778
// if result [ 2 ] [ 1 ] = 100 + i then
72711: LD_VAR 0 2
72715: PUSH
72716: LD_INT 2
72718: ARRAY
72719: PUSH
72720: LD_INT 1
72722: ARRAY
72723: PUSH
72724: LD_INT 100
72726: PUSH
72727: LD_VAR 0 8
72731: PLUS
72732: EQUAL
72733: IFFALSE 72778
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72735: LD_ADDR_VAR 0 2
72739: PUSH
72740: LD_VAR 0 2
72744: PPUSH
72745: LD_INT 2
72747: PPUSH
72748: LD_VAR 0 2
72752: PUSH
72753: LD_INT 2
72755: ARRAY
72756: PPUSH
72757: LD_INT 1
72759: PPUSH
72760: CALL_OW 3
72764: PPUSH
72765: CALL_OW 1
72769: ST_TO_ADDR
// tmp := 1 ;
72770: LD_ADDR_VAR 0 3
72774: PUSH
72775: LD_STRING 1
72777: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72778: LD_ADDR_VAR 0 6
72782: PUSH
72783: LD_VAR 0 6
72787: PUSH
72788: LD_VAR 0 3
72792: STR
72793: ST_TO_ADDR
// end ;
72794: GO 72690
72796: POP
72797: POP
// if isGameLoad then
72798: LD_VAR 0 1
72802: IFFALSE 73277
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72804: LD_ADDR_VAR 0 4
72808: PUSH
72809: LD_EXP 52
72813: PUSH
72814: LD_EXP 51
72818: PUSH
72819: LD_EXP 53
72823: PUSH
72824: LD_EXP 50
72828: PUSH
72829: LD_EXP 54
72833: PUSH
72834: LD_EXP 55
72838: PUSH
72839: LD_EXP 56
72843: PUSH
72844: LD_EXP 57
72848: PUSH
72849: LD_EXP 58
72853: PUSH
72854: LD_EXP 59
72858: PUSH
72859: LD_EXP 60
72863: PUSH
72864: LD_EXP 61
72868: PUSH
72869: LD_EXP 62
72873: PUSH
72874: LD_EXP 63
72878: PUSH
72879: LD_EXP 71
72883: PUSH
72884: LD_EXP 72
72888: PUSH
72889: LD_EXP 73
72893: PUSH
72894: LD_EXP 74
72898: PUSH
72899: LD_EXP 76
72903: PUSH
72904: LD_EXP 77
72908: PUSH
72909: LD_EXP 78
72913: PUSH
72914: LD_EXP 81
72918: PUSH
72919: LD_EXP 83
72923: PUSH
72924: LD_EXP 84
72928: PUSH
72929: LD_EXP 85
72933: PUSH
72934: LD_EXP 87
72938: PUSH
72939: LD_EXP 88
72943: PUSH
72944: LD_EXP 91
72948: PUSH
72949: LD_EXP 92
72953: PUSH
72954: LD_EXP 93
72958: PUSH
72959: LD_EXP 94
72963: PUSH
72964: LD_EXP 95
72968: PUSH
72969: LD_EXP 96
72973: PUSH
72974: LD_EXP 97
72978: PUSH
72979: LD_EXP 98
72983: PUSH
72984: LD_EXP 99
72988: PUSH
72989: LD_EXP 64
72993: PUSH
72994: LD_EXP 65
72998: PUSH
72999: LD_EXP 68
73003: PUSH
73004: LD_EXP 69
73008: PUSH
73009: LD_EXP 70
73013: PUSH
73014: LD_EXP 66
73018: PUSH
73019: LD_EXP 67
73023: PUSH
73024: LD_EXP 75
73028: PUSH
73029: LD_EXP 79
73033: PUSH
73034: LD_EXP 80
73038: PUSH
73039: LD_EXP 82
73043: PUSH
73044: LD_EXP 86
73048: PUSH
73049: LD_EXP 89
73053: PUSH
73054: LD_EXP 90
73058: PUSH
73059: LD_EXP 100
73063: PUSH
73064: LD_EXP 101
73068: PUSH
73069: LD_EXP 102
73073: PUSH
73074: LD_EXP 103
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: ST_TO_ADDR
// tmp :=  ;
73135: LD_ADDR_VAR 0 3
73139: PUSH
73140: LD_STRING 
73142: ST_TO_ADDR
// for i = 1 to normalCounter do
73143: LD_ADDR_VAR 0 8
73147: PUSH
73148: DOUBLE
73149: LD_INT 1
73151: DEC
73152: ST_TO_ADDR
73153: LD_EXP 48
73157: PUSH
73158: FOR_TO
73159: IFFALSE 73195
// begin if flags [ i ] then
73161: LD_VAR 0 4
73165: PUSH
73166: LD_VAR 0 8
73170: ARRAY
73171: IFFALSE 73193
// tmp := tmp & i & ; ;
73173: LD_ADDR_VAR 0 3
73177: PUSH
73178: LD_VAR 0 3
73182: PUSH
73183: LD_VAR 0 8
73187: STR
73188: PUSH
73189: LD_STRING ;
73191: STR
73192: ST_TO_ADDR
// end ;
73193: GO 73158
73195: POP
73196: POP
// for i = 1 to hardcoreCounter do
73197: LD_ADDR_VAR 0 8
73201: PUSH
73202: DOUBLE
73203: LD_INT 1
73205: DEC
73206: ST_TO_ADDR
73207: LD_EXP 49
73211: PUSH
73212: FOR_TO
73213: IFFALSE 73259
// begin if flags [ normalCounter + i ] then
73215: LD_VAR 0 4
73219: PUSH
73220: LD_EXP 48
73224: PUSH
73225: LD_VAR 0 8
73229: PLUS
73230: ARRAY
73231: IFFALSE 73257
// tmp := tmp & ( 100 + i ) & ; ;
73233: LD_ADDR_VAR 0 3
73237: PUSH
73238: LD_VAR 0 3
73242: PUSH
73243: LD_INT 100
73245: PUSH
73246: LD_VAR 0 8
73250: PLUS
73251: STR
73252: PUSH
73253: LD_STRING ;
73255: STR
73256: ST_TO_ADDR
// end ;
73257: GO 73212
73259: POP
73260: POP
// if tmp then
73261: LD_VAR 0 3
73265: IFFALSE 73277
// active := tmp ;
73267: LD_ADDR_VAR 0 7
73271: PUSH
73272: LD_VAR 0 3
73276: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73277: LD_STRING getStreamItemsFromMission("
73279: PUSH
73280: LD_VAR 0 5
73284: STR
73285: PUSH
73286: LD_STRING ","
73288: STR
73289: PUSH
73290: LD_VAR 0 6
73294: STR
73295: PUSH
73296: LD_STRING ","
73298: STR
73299: PUSH
73300: LD_VAR 0 7
73304: STR
73305: PUSH
73306: LD_STRING ")
73308: STR
73309: PPUSH
73310: CALL_OW 559
// end else
73314: GO 73323
// ToLua ( getStreamItemsFromMission("","","") ) ;
73316: LD_STRING getStreamItemsFromMission("","","")
73318: PPUSH
73319: CALL_OW 559
// end ;
73323: LD_VAR 0 2
73327: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73328: LD_EXP 47
73332: IFFALSE 73340
73334: PUSH
73335: LD_EXP 52
73339: AND
73340: IFFALSE 73464
73342: GO 73344
73344: DISABLE
73345: LD_INT 0
73347: PPUSH
73348: PPUSH
// begin enable ;
73349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73350: LD_ADDR_VAR 0 2
73354: PUSH
73355: LD_INT 22
73357: PUSH
73358: LD_OWVAR 2
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 2
73369: PUSH
73370: LD_INT 34
73372: PUSH
73373: LD_INT 7
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 34
73382: PUSH
73383: LD_INT 45
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 34
73392: PUSH
73393: LD_INT 28
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 34
73402: PUSH
73403: LD_INT 47
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PPUSH
73421: CALL_OW 69
73425: ST_TO_ADDR
// if not tmp then
73426: LD_VAR 0 2
73430: NOT
73431: IFFALSE 73435
// exit ;
73433: GO 73464
// for i in tmp do
73435: LD_ADDR_VAR 0 1
73439: PUSH
73440: LD_VAR 0 2
73444: PUSH
73445: FOR_IN
73446: IFFALSE 73462
// begin SetLives ( i , 0 ) ;
73448: LD_VAR 0 1
73452: PPUSH
73453: LD_INT 0
73455: PPUSH
73456: CALL_OW 234
// end ;
73460: GO 73445
73462: POP
73463: POP
// end ;
73464: PPOPN 2
73466: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73467: LD_EXP 47
73471: IFFALSE 73479
73473: PUSH
73474: LD_EXP 53
73478: AND
73479: IFFALSE 73563
73481: GO 73483
73483: DISABLE
73484: LD_INT 0
73486: PPUSH
73487: PPUSH
// begin enable ;
73488: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73489: LD_ADDR_VAR 0 2
73493: PUSH
73494: LD_INT 22
73496: PUSH
73497: LD_OWVAR 2
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 32
73508: PUSH
73509: LD_INT 3
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PPUSH
73520: CALL_OW 69
73524: ST_TO_ADDR
// if not tmp then
73525: LD_VAR 0 2
73529: NOT
73530: IFFALSE 73534
// exit ;
73532: GO 73563
// for i in tmp do
73534: LD_ADDR_VAR 0 1
73538: PUSH
73539: LD_VAR 0 2
73543: PUSH
73544: FOR_IN
73545: IFFALSE 73561
// begin SetLives ( i , 0 ) ;
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_INT 0
73554: PPUSH
73555: CALL_OW 234
// end ;
73559: GO 73544
73561: POP
73562: POP
// end ;
73563: PPOPN 2
73565: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73566: LD_EXP 47
73570: IFFALSE 73578
73572: PUSH
73573: LD_EXP 50
73577: AND
73578: IFFALSE 73671
73580: GO 73582
73582: DISABLE
73583: LD_INT 0
73585: PPUSH
// begin enable ;
73586: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73587: LD_ADDR_VAR 0 1
73591: PUSH
73592: LD_INT 22
73594: PUSH
73595: LD_OWVAR 2
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 2
73606: PUSH
73607: LD_INT 25
73609: PUSH
73610: LD_INT 5
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 25
73619: PUSH
73620: LD_INT 9
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 25
73629: PUSH
73630: LD_INT 8
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PPUSH
73647: CALL_OW 69
73651: PUSH
73652: FOR_IN
73653: IFFALSE 73669
// begin SetClass ( i , 1 ) ;
73655: LD_VAR 0 1
73659: PPUSH
73660: LD_INT 1
73662: PPUSH
73663: CALL_OW 336
// end ;
73667: GO 73652
73669: POP
73670: POP
// end ;
73671: PPOPN 1
73673: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73674: LD_EXP 47
73678: IFFALSE 73686
73680: PUSH
73681: LD_EXP 51
73685: AND
73686: IFFALSE 73698
73688: PUSH
73689: LD_OWVAR 65
73693: PUSH
73694: LD_INT 7
73696: LESS
73697: AND
73698: IFFALSE 73712
73700: GO 73702
73702: DISABLE
// begin enable ;
73703: ENABLE
// game_speed := 7 ;
73704: LD_ADDR_OWVAR 65
73708: PUSH
73709: LD_INT 7
73711: ST_TO_ADDR
// end ;
73712: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73713: LD_EXP 47
73717: IFFALSE 73725
73719: PUSH
73720: LD_EXP 54
73724: AND
73725: IFFALSE 73927
73727: GO 73729
73729: DISABLE
73730: LD_INT 0
73732: PPUSH
73733: PPUSH
73734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73735: LD_ADDR_VAR 0 3
73739: PUSH
73740: LD_INT 81
73742: PUSH
73743: LD_OWVAR 2
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 21
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PPUSH
73766: CALL_OW 69
73770: ST_TO_ADDR
// if not tmp then
73771: LD_VAR 0 3
73775: NOT
73776: IFFALSE 73780
// exit ;
73778: GO 73927
// if tmp > 5 then
73780: LD_VAR 0 3
73784: PUSH
73785: LD_INT 5
73787: GREATER
73788: IFFALSE 73800
// k := 5 else
73790: LD_ADDR_VAR 0 2
73794: PUSH
73795: LD_INT 5
73797: ST_TO_ADDR
73798: GO 73810
// k := tmp ;
73800: LD_ADDR_VAR 0 2
73804: PUSH
73805: LD_VAR 0 3
73809: ST_TO_ADDR
// for i := 1 to k do
73810: LD_ADDR_VAR 0 1
73814: PUSH
73815: DOUBLE
73816: LD_INT 1
73818: DEC
73819: ST_TO_ADDR
73820: LD_VAR 0 2
73824: PUSH
73825: FOR_TO
73826: IFFALSE 73925
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73828: LD_VAR 0 3
73832: PUSH
73833: LD_VAR 0 1
73837: ARRAY
73838: PPUSH
73839: LD_VAR 0 1
73843: PUSH
73844: LD_INT 4
73846: MOD
73847: PUSH
73848: LD_INT 1
73850: PLUS
73851: PPUSH
73852: CALL_OW 259
73856: PUSH
73857: LD_INT 10
73859: LESS
73860: IFFALSE 73923
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73862: LD_VAR 0 3
73866: PUSH
73867: LD_VAR 0 1
73871: ARRAY
73872: PPUSH
73873: LD_VAR 0 1
73877: PUSH
73878: LD_INT 4
73880: MOD
73881: PUSH
73882: LD_INT 1
73884: PLUS
73885: PPUSH
73886: LD_VAR 0 3
73890: PUSH
73891: LD_VAR 0 1
73895: ARRAY
73896: PPUSH
73897: LD_VAR 0 1
73901: PUSH
73902: LD_INT 4
73904: MOD
73905: PUSH
73906: LD_INT 1
73908: PLUS
73909: PPUSH
73910: CALL_OW 259
73914: PUSH
73915: LD_INT 1
73917: PLUS
73918: PPUSH
73919: CALL_OW 237
73923: GO 73825
73925: POP
73926: POP
// end ;
73927: PPOPN 3
73929: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73930: LD_EXP 47
73934: IFFALSE 73942
73936: PUSH
73937: LD_EXP 55
73941: AND
73942: IFFALSE 73962
73944: GO 73946
73946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73947: LD_INT 4
73949: PPUSH
73950: LD_OWVAR 2
73954: PPUSH
73955: LD_INT 0
73957: PPUSH
73958: CALL_OW 324
73962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73963: LD_EXP 47
73967: IFFALSE 73975
73969: PUSH
73970: LD_EXP 84
73974: AND
73975: IFFALSE 73995
73977: GO 73979
73979: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73980: LD_INT 19
73982: PPUSH
73983: LD_OWVAR 2
73987: PPUSH
73988: LD_INT 0
73990: PPUSH
73991: CALL_OW 324
73995: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73996: LD_EXP 47
74000: IFFALSE 74008
74002: PUSH
74003: LD_EXP 56
74007: AND
74008: IFFALSE 74110
74010: GO 74012
74012: DISABLE
74013: LD_INT 0
74015: PPUSH
74016: PPUSH
// begin enable ;
74017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74018: LD_ADDR_VAR 0 2
74022: PUSH
74023: LD_INT 22
74025: PUSH
74026: LD_OWVAR 2
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 2
74037: PUSH
74038: LD_INT 34
74040: PUSH
74041: LD_INT 11
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 34
74050: PUSH
74051: LD_INT 30
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: LIST
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PPUSH
74067: CALL_OW 69
74071: ST_TO_ADDR
// if not tmp then
74072: LD_VAR 0 2
74076: NOT
74077: IFFALSE 74081
// exit ;
74079: GO 74110
// for i in tmp do
74081: LD_ADDR_VAR 0 1
74085: PUSH
74086: LD_VAR 0 2
74090: PUSH
74091: FOR_IN
74092: IFFALSE 74108
// begin SetLives ( i , 0 ) ;
74094: LD_VAR 0 1
74098: PPUSH
74099: LD_INT 0
74101: PPUSH
74102: CALL_OW 234
// end ;
74106: GO 74091
74108: POP
74109: POP
// end ;
74110: PPOPN 2
74112: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74113: LD_EXP 47
74117: IFFALSE 74125
74119: PUSH
74120: LD_EXP 57
74124: AND
74125: IFFALSE 74145
74127: GO 74129
74129: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74130: LD_INT 32
74132: PPUSH
74133: LD_OWVAR 2
74137: PPUSH
74138: LD_INT 0
74140: PPUSH
74141: CALL_OW 324
74145: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74146: LD_EXP 47
74150: IFFALSE 74158
74152: PUSH
74153: LD_EXP 58
74157: AND
74158: IFFALSE 74341
74160: GO 74162
74162: DISABLE
74163: LD_INT 0
74165: PPUSH
74166: PPUSH
74167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74168: LD_ADDR_VAR 0 2
74172: PUSH
74173: LD_INT 22
74175: PUSH
74176: LD_OWVAR 2
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 33
74187: PUSH
74188: LD_INT 3
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PPUSH
74199: CALL_OW 69
74203: ST_TO_ADDR
// if not tmp then
74204: LD_VAR 0 2
74208: NOT
74209: IFFALSE 74213
// exit ;
74211: GO 74341
// side := 0 ;
74213: LD_ADDR_VAR 0 3
74217: PUSH
74218: LD_INT 0
74220: ST_TO_ADDR
// for i := 1 to 8 do
74221: LD_ADDR_VAR 0 1
74225: PUSH
74226: DOUBLE
74227: LD_INT 1
74229: DEC
74230: ST_TO_ADDR
74231: LD_INT 8
74233: PUSH
74234: FOR_TO
74235: IFFALSE 74285
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74237: LD_OWVAR 2
74241: PUSH
74242: LD_VAR 0 1
74246: NONEQUAL
74247: IFFALSE 74269
74249: PUSH
74250: LD_OWVAR 2
74254: PPUSH
74255: LD_VAR 0 1
74259: PPUSH
74260: CALL_OW 81
74264: PUSH
74265: LD_INT 2
74267: EQUAL
74268: AND
74269: IFFALSE 74283
// begin side := i ;
74271: LD_ADDR_VAR 0 3
74275: PUSH
74276: LD_VAR 0 1
74280: ST_TO_ADDR
// break ;
74281: GO 74285
// end ;
74283: GO 74234
74285: POP
74286: POP
// if not side then
74287: LD_VAR 0 3
74291: NOT
74292: IFFALSE 74296
// exit ;
74294: GO 74341
// for i := 1 to tmp do
74296: LD_ADDR_VAR 0 1
74300: PUSH
74301: DOUBLE
74302: LD_INT 1
74304: DEC
74305: ST_TO_ADDR
74306: LD_VAR 0 2
74310: PUSH
74311: FOR_TO
74312: IFFALSE 74339
// if Prob ( 60 ) then
74314: LD_INT 60
74316: PPUSH
74317: CALL_OW 13
74321: IFFALSE 74337
// SetSide ( i , side ) ;
74323: LD_VAR 0 1
74327: PPUSH
74328: LD_VAR 0 3
74332: PPUSH
74333: CALL_OW 235
74337: GO 74311
74339: POP
74340: POP
// end ;
74341: PPOPN 3
74343: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74344: LD_EXP 47
74348: IFFALSE 74356
74350: PUSH
74351: LD_EXP 60
74355: AND
74356: IFFALSE 74475
74358: GO 74360
74360: DISABLE
74361: LD_INT 0
74363: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74364: LD_ADDR_VAR 0 1
74368: PUSH
74369: LD_INT 22
74371: PUSH
74372: LD_OWVAR 2
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 21
74383: PUSH
74384: LD_INT 1
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 3
74393: PUSH
74394: LD_INT 23
74396: PUSH
74397: LD_INT 0
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: PPUSH
74413: CALL_OW 69
74417: PUSH
74418: FOR_IN
74419: IFFALSE 74473
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74421: LD_VAR 0 1
74425: PPUSH
74426: CALL_OW 257
74430: PUSH
74431: LD_INT 1
74433: PUSH
74434: LD_INT 2
74436: PUSH
74437: LD_INT 3
74439: PUSH
74440: LD_INT 4
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: IN
74449: IFFALSE 74471
// SetClass ( un , rand ( 1 , 4 ) ) ;
74451: LD_VAR 0 1
74455: PPUSH
74456: LD_INT 1
74458: PPUSH
74459: LD_INT 4
74461: PPUSH
74462: CALL_OW 12
74466: PPUSH
74467: CALL_OW 336
74471: GO 74418
74473: POP
74474: POP
// end ;
74475: PPOPN 1
74477: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74478: LD_EXP 47
74482: IFFALSE 74490
74484: PUSH
74485: LD_EXP 59
74489: AND
74490: IFFALSE 74569
74492: GO 74494
74494: DISABLE
74495: LD_INT 0
74497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74498: LD_ADDR_VAR 0 1
74502: PUSH
74503: LD_INT 22
74505: PUSH
74506: LD_OWVAR 2
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 21
74517: PUSH
74518: LD_INT 3
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PPUSH
74529: CALL_OW 69
74533: ST_TO_ADDR
// if not tmp then
74534: LD_VAR 0 1
74538: NOT
74539: IFFALSE 74543
// exit ;
74541: GO 74569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74543: LD_VAR 0 1
74547: PUSH
74548: LD_INT 1
74550: PPUSH
74551: LD_VAR 0 1
74555: PPUSH
74556: CALL_OW 12
74560: ARRAY
74561: PPUSH
74562: LD_INT 100
74564: PPUSH
74565: CALL_OW 234
// end ;
74569: PPOPN 1
74571: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74572: LD_EXP 47
74576: IFFALSE 74584
74578: PUSH
74579: LD_EXP 61
74583: AND
74584: IFFALSE 74682
74586: GO 74588
74588: DISABLE
74589: LD_INT 0
74591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74592: LD_ADDR_VAR 0 1
74596: PUSH
74597: LD_INT 22
74599: PUSH
74600: LD_OWVAR 2
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 21
74611: PUSH
74612: LD_INT 1
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PPUSH
74623: CALL_OW 69
74627: ST_TO_ADDR
// if not tmp then
74628: LD_VAR 0 1
74632: NOT
74633: IFFALSE 74637
// exit ;
74635: GO 74682
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74637: LD_VAR 0 1
74641: PUSH
74642: LD_INT 1
74644: PPUSH
74645: LD_VAR 0 1
74649: PPUSH
74650: CALL_OW 12
74654: ARRAY
74655: PPUSH
74656: LD_INT 1
74658: PPUSH
74659: LD_INT 4
74661: PPUSH
74662: CALL_OW 12
74666: PPUSH
74667: LD_INT 3000
74669: PPUSH
74670: LD_INT 9000
74672: PPUSH
74673: CALL_OW 12
74677: PPUSH
74678: CALL_OW 492
// end ;
74682: PPOPN 1
74684: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74685: LD_EXP 47
74689: IFFALSE 74697
74691: PUSH
74692: LD_EXP 62
74696: AND
74697: IFFALSE 74717
74699: GO 74701
74701: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74702: LD_INT 1
74704: PPUSH
74705: LD_OWVAR 2
74709: PPUSH
74710: LD_INT 0
74712: PPUSH
74713: CALL_OW 324
74717: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74718: LD_EXP 47
74722: IFFALSE 74730
74724: PUSH
74725: LD_EXP 63
74729: AND
74730: IFFALSE 74813
74732: GO 74734
74734: DISABLE
74735: LD_INT 0
74737: PPUSH
74738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74739: LD_ADDR_VAR 0 2
74743: PUSH
74744: LD_INT 22
74746: PUSH
74747: LD_OWVAR 2
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 21
74758: PUSH
74759: LD_INT 3
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PPUSH
74770: CALL_OW 69
74774: ST_TO_ADDR
// if not tmp then
74775: LD_VAR 0 2
74779: NOT
74780: IFFALSE 74784
// exit ;
74782: GO 74813
// for i in tmp do
74784: LD_ADDR_VAR 0 1
74788: PUSH
74789: LD_VAR 0 2
74793: PUSH
74794: FOR_IN
74795: IFFALSE 74811
// SetBLevel ( i , 10 ) ;
74797: LD_VAR 0 1
74801: PPUSH
74802: LD_INT 10
74804: PPUSH
74805: CALL_OW 241
74809: GO 74794
74811: POP
74812: POP
// end ;
74813: PPOPN 2
74815: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74816: LD_EXP 47
74820: IFFALSE 74828
74822: PUSH
74823: LD_EXP 64
74827: AND
74828: IFFALSE 74939
74830: GO 74832
74832: DISABLE
74833: LD_INT 0
74835: PPUSH
74836: PPUSH
74837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74838: LD_ADDR_VAR 0 3
74842: PUSH
74843: LD_INT 22
74845: PUSH
74846: LD_OWVAR 2
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 25
74857: PUSH
74858: LD_INT 1
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PPUSH
74869: CALL_OW 69
74873: ST_TO_ADDR
// if not tmp then
74874: LD_VAR 0 3
74878: NOT
74879: IFFALSE 74883
// exit ;
74881: GO 74939
// un := tmp [ rand ( 1 , tmp ) ] ;
74883: LD_ADDR_VAR 0 2
74887: PUSH
74888: LD_VAR 0 3
74892: PUSH
74893: LD_INT 1
74895: PPUSH
74896: LD_VAR 0 3
74900: PPUSH
74901: CALL_OW 12
74905: ARRAY
74906: ST_TO_ADDR
// if Crawls ( un ) then
74907: LD_VAR 0 2
74911: PPUSH
74912: CALL_OW 318
74916: IFFALSE 74927
// ComWalk ( un ) ;
74918: LD_VAR 0 2
74922: PPUSH
74923: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74927: LD_VAR 0 2
74931: PPUSH
74932: LD_INT 5
74934: PPUSH
74935: CALL_OW 336
// end ;
74939: PPOPN 3
74941: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74942: LD_EXP 47
74946: IFFALSE 74954
74948: PUSH
74949: LD_EXP 65
74953: AND
74954: IFFALSE 74966
74956: PUSH
74957: LD_OWVAR 67
74961: PUSH
74962: LD_INT 4
74964: LESS
74965: AND
74966: IFFALSE 74985
74968: GO 74970
74970: DISABLE
// begin Difficulty := Difficulty + 1 ;
74971: LD_ADDR_OWVAR 67
74975: PUSH
74976: LD_OWVAR 67
74980: PUSH
74981: LD_INT 1
74983: PLUS
74984: ST_TO_ADDR
// end ;
74985: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74986: LD_EXP 47
74990: IFFALSE 74998
74992: PUSH
74993: LD_EXP 66
74997: AND
74998: IFFALSE 75101
75000: GO 75002
75002: DISABLE
75003: LD_INT 0
75005: PPUSH
// begin for i := 1 to 5 do
75006: LD_ADDR_VAR 0 1
75010: PUSH
75011: DOUBLE
75012: LD_INT 1
75014: DEC
75015: ST_TO_ADDR
75016: LD_INT 5
75018: PUSH
75019: FOR_TO
75020: IFFALSE 75099
// begin uc_nation := nation_nature ;
75022: LD_ADDR_OWVAR 21
75026: PUSH
75027: LD_INT 0
75029: ST_TO_ADDR
// uc_side := 0 ;
75030: LD_ADDR_OWVAR 20
75034: PUSH
75035: LD_INT 0
75037: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75038: LD_ADDR_OWVAR 29
75042: PUSH
75043: LD_INT 12
75045: PUSH
75046: LD_INT 12
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: ST_TO_ADDR
// hc_agressivity := 20 ;
75053: LD_ADDR_OWVAR 35
75057: PUSH
75058: LD_INT 20
75060: ST_TO_ADDR
// hc_class := class_tiger ;
75061: LD_ADDR_OWVAR 28
75065: PUSH
75066: LD_INT 14
75068: ST_TO_ADDR
// hc_gallery :=  ;
75069: LD_ADDR_OWVAR 33
75073: PUSH
75074: LD_STRING 
75076: ST_TO_ADDR
// hc_name :=  ;
75077: LD_ADDR_OWVAR 26
75081: PUSH
75082: LD_STRING 
75084: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75085: CALL_OW 44
75089: PPUSH
75090: LD_INT 0
75092: PPUSH
75093: CALL_OW 51
// end ;
75097: GO 75019
75099: POP
75100: POP
// end ;
75101: PPOPN 1
75103: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75104: LD_EXP 47
75108: IFFALSE 75116
75110: PUSH
75111: LD_EXP 67
75115: AND
75116: IFFALSE 75125
75118: GO 75120
75120: DISABLE
// StreamSibBomb ;
75121: CALL 75126 0 0
75125: END
// export function StreamSibBomb ; var i , x , y ; begin
75126: LD_INT 0
75128: PPUSH
75129: PPUSH
75130: PPUSH
75131: PPUSH
// result := false ;
75132: LD_ADDR_VAR 0 1
75136: PUSH
75137: LD_INT 0
75139: ST_TO_ADDR
// for i := 1 to 16 do
75140: LD_ADDR_VAR 0 2
75144: PUSH
75145: DOUBLE
75146: LD_INT 1
75148: DEC
75149: ST_TO_ADDR
75150: LD_INT 16
75152: PUSH
75153: FOR_TO
75154: IFFALSE 75353
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75156: LD_ADDR_VAR 0 3
75160: PUSH
75161: LD_INT 10
75163: PUSH
75164: LD_INT 20
75166: PUSH
75167: LD_INT 30
75169: PUSH
75170: LD_INT 40
75172: PUSH
75173: LD_INT 50
75175: PUSH
75176: LD_INT 60
75178: PUSH
75179: LD_INT 70
75181: PUSH
75182: LD_INT 80
75184: PUSH
75185: LD_INT 90
75187: PUSH
75188: LD_INT 100
75190: PUSH
75191: LD_INT 110
75193: PUSH
75194: LD_INT 120
75196: PUSH
75197: LD_INT 130
75199: PUSH
75200: LD_INT 140
75202: PUSH
75203: LD_INT 150
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 1
75225: PPUSH
75226: LD_INT 15
75228: PPUSH
75229: CALL_OW 12
75233: ARRAY
75234: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75235: LD_ADDR_VAR 0 4
75239: PUSH
75240: LD_INT 10
75242: PUSH
75243: LD_INT 20
75245: PUSH
75246: LD_INT 30
75248: PUSH
75249: LD_INT 40
75251: PUSH
75252: LD_INT 50
75254: PUSH
75255: LD_INT 60
75257: PUSH
75258: LD_INT 70
75260: PUSH
75261: LD_INT 80
75263: PUSH
75264: LD_INT 90
75266: PUSH
75267: LD_INT 100
75269: PUSH
75270: LD_INT 110
75272: PUSH
75273: LD_INT 120
75275: PUSH
75276: LD_INT 130
75278: PUSH
75279: LD_INT 140
75281: PUSH
75282: LD_INT 150
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 1
75304: PPUSH
75305: LD_INT 15
75307: PPUSH
75308: CALL_OW 12
75312: ARRAY
75313: ST_TO_ADDR
// if ValidHex ( x , y ) then
75314: LD_VAR 0 3
75318: PPUSH
75319: LD_VAR 0 4
75323: PPUSH
75324: CALL_OW 488
75328: IFFALSE 75351
// begin result := [ x , y ] ;
75330: LD_ADDR_VAR 0 1
75334: PUSH
75335: LD_VAR 0 3
75339: PUSH
75340: LD_VAR 0 4
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: ST_TO_ADDR
// break ;
75349: GO 75353
// end ; end ;
75351: GO 75153
75353: POP
75354: POP
// if result then
75355: LD_VAR 0 1
75359: IFFALSE 75419
// begin ToLua ( playSibBomb() ) ;
75361: LD_STRING playSibBomb()
75363: PPUSH
75364: CALL_OW 559
// wait ( 0 0$14 ) ;
75368: LD_INT 490
75370: PPUSH
75371: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75375: LD_VAR 0 1
75379: PUSH
75380: LD_INT 1
75382: ARRAY
75383: PPUSH
75384: LD_VAR 0 1
75388: PUSH
75389: LD_INT 2
75391: ARRAY
75392: PPUSH
75393: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75397: LD_VAR 0 1
75401: PUSH
75402: LD_INT 1
75404: ARRAY
75405: PPUSH
75406: LD_VAR 0 1
75410: PUSH
75411: LD_INT 2
75413: ARRAY
75414: PPUSH
75415: CALL_OW 429
// end ; end ;
75419: LD_VAR 0 1
75423: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75424: LD_EXP 47
75428: IFFALSE 75436
75430: PUSH
75431: LD_EXP 69
75435: AND
75436: IFFALSE 75448
75438: GO 75440
75440: DISABLE
// YouLost (  ) ;
75441: LD_STRING 
75443: PPUSH
75444: CALL_OW 104
75448: END
// every 0 0$1 trigger StreamModeActive and sFog do
75449: LD_EXP 47
75453: IFFALSE 75461
75455: PUSH
75456: LD_EXP 68
75460: AND
75461: IFFALSE 75475
75463: GO 75465
75465: DISABLE
// FogOff ( your_side ) ;
75466: LD_OWVAR 2
75470: PPUSH
75471: CALL_OW 344
75475: END
// every 0 0$1 trigger StreamModeActive and sSun do
75476: LD_EXP 47
75480: IFFALSE 75488
75482: PUSH
75483: LD_EXP 70
75487: AND
75488: IFFALSE 75516
75490: GO 75492
75492: DISABLE
// begin solar_recharge_percent := 0 ;
75493: LD_ADDR_OWVAR 79
75497: PUSH
75498: LD_INT 0
75500: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75501: LD_INT 10500
75503: PPUSH
75504: CALL_OW 67
// solar_recharge_percent := 100 ;
75508: LD_ADDR_OWVAR 79
75512: PUSH
75513: LD_INT 100
75515: ST_TO_ADDR
// end ;
75516: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75517: LD_EXP 47
75521: IFFALSE 75529
75523: PUSH
75524: LD_EXP 71
75528: AND
75529: IFFALSE 75768
75531: GO 75533
75533: DISABLE
75534: LD_INT 0
75536: PPUSH
75537: PPUSH
75538: PPUSH
// begin tmp := [ ] ;
75539: LD_ADDR_VAR 0 3
75543: PUSH
75544: EMPTY
75545: ST_TO_ADDR
// for i := 1 to 6 do
75546: LD_ADDR_VAR 0 1
75550: PUSH
75551: DOUBLE
75552: LD_INT 1
75554: DEC
75555: ST_TO_ADDR
75556: LD_INT 6
75558: PUSH
75559: FOR_TO
75560: IFFALSE 75665
// begin uc_nation := nation_nature ;
75562: LD_ADDR_OWVAR 21
75566: PUSH
75567: LD_INT 0
75569: ST_TO_ADDR
// uc_side := 0 ;
75570: LD_ADDR_OWVAR 20
75574: PUSH
75575: LD_INT 0
75577: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75578: LD_ADDR_OWVAR 29
75582: PUSH
75583: LD_INT 12
75585: PUSH
75586: LD_INT 12
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: ST_TO_ADDR
// hc_agressivity := 20 ;
75593: LD_ADDR_OWVAR 35
75597: PUSH
75598: LD_INT 20
75600: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75601: LD_ADDR_OWVAR 28
75605: PUSH
75606: LD_INT 17
75608: ST_TO_ADDR
// hc_gallery :=  ;
75609: LD_ADDR_OWVAR 33
75613: PUSH
75614: LD_STRING 
75616: ST_TO_ADDR
// hc_name :=  ;
75617: LD_ADDR_OWVAR 26
75621: PUSH
75622: LD_STRING 
75624: ST_TO_ADDR
// un := CreateHuman ;
75625: LD_ADDR_VAR 0 2
75629: PUSH
75630: CALL_OW 44
75634: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75635: LD_VAR 0 2
75639: PPUSH
75640: LD_INT 1
75642: PPUSH
75643: CALL_OW 51
// tmp := tmp ^ un ;
75647: LD_ADDR_VAR 0 3
75651: PUSH
75652: LD_VAR 0 3
75656: PUSH
75657: LD_VAR 0 2
75661: ADD
75662: ST_TO_ADDR
// end ;
75663: GO 75559
75665: POP
75666: POP
// repeat wait ( 0 0$1 ) ;
75667: LD_INT 35
75669: PPUSH
75670: CALL_OW 67
// for un in tmp do
75674: LD_ADDR_VAR 0 2
75678: PUSH
75679: LD_VAR 0 3
75683: PUSH
75684: FOR_IN
75685: IFFALSE 75759
// begin if IsDead ( un ) then
75687: LD_VAR 0 2
75691: PPUSH
75692: CALL_OW 301
75696: IFFALSE 75716
// begin tmp := tmp diff un ;
75698: LD_ADDR_VAR 0 3
75702: PUSH
75703: LD_VAR 0 3
75707: PUSH
75708: LD_VAR 0 2
75712: DIFF
75713: ST_TO_ADDR
// continue ;
75714: GO 75684
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75716: LD_VAR 0 2
75720: PPUSH
75721: LD_INT 3
75723: PUSH
75724: LD_INT 22
75726: PUSH
75727: LD_INT 0
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PPUSH
75738: CALL_OW 69
75742: PPUSH
75743: LD_VAR 0 2
75747: PPUSH
75748: CALL_OW 74
75752: PPUSH
75753: CALL_OW 115
// end ;
75757: GO 75684
75759: POP
75760: POP
// until not tmp ;
75761: LD_VAR 0 3
75765: NOT
75766: IFFALSE 75667
// end ;
75768: PPOPN 3
75770: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75771: LD_EXP 47
75775: IFFALSE 75783
75777: PUSH
75778: LD_EXP 72
75782: AND
75783: IFFALSE 75837
75785: GO 75787
75787: DISABLE
// begin ToLua ( displayTroll(); ) ;
75788: LD_STRING displayTroll();
75790: PPUSH
75791: CALL_OW 559
// wait ( 3 3$00 ) ;
75795: LD_INT 6300
75797: PPUSH
75798: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75802: LD_STRING hideTroll();
75804: PPUSH
75805: CALL_OW 559
// wait ( 1 1$00 ) ;
75809: LD_INT 2100
75811: PPUSH
75812: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75816: LD_STRING displayTroll();
75818: PPUSH
75819: CALL_OW 559
// wait ( 1 1$00 ) ;
75823: LD_INT 2100
75825: PPUSH
75826: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75830: LD_STRING hideTroll();
75832: PPUSH
75833: CALL_OW 559
// end ;
75837: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75838: LD_EXP 47
75842: IFFALSE 75850
75844: PUSH
75845: LD_EXP 73
75849: AND
75850: IFFALSE 75913
75852: GO 75854
75854: DISABLE
75855: LD_INT 0
75857: PPUSH
// begin p := 0 ;
75858: LD_ADDR_VAR 0 1
75862: PUSH
75863: LD_INT 0
75865: ST_TO_ADDR
// repeat game_speed := 1 ;
75866: LD_ADDR_OWVAR 65
75870: PUSH
75871: LD_INT 1
75873: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75874: LD_INT 35
75876: PPUSH
75877: CALL_OW 67
// p := p + 1 ;
75881: LD_ADDR_VAR 0 1
75885: PUSH
75886: LD_VAR 0 1
75890: PUSH
75891: LD_INT 1
75893: PLUS
75894: ST_TO_ADDR
// until p >= 60 ;
75895: LD_VAR 0 1
75899: PUSH
75900: LD_INT 60
75902: GREATEREQUAL
75903: IFFALSE 75866
// game_speed := 4 ;
75905: LD_ADDR_OWVAR 65
75909: PUSH
75910: LD_INT 4
75912: ST_TO_ADDR
// end ;
75913: PPOPN 1
75915: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75916: LD_EXP 47
75920: IFFALSE 75928
75922: PUSH
75923: LD_EXP 74
75927: AND
75928: IFFALSE 76074
75930: GO 75932
75932: DISABLE
75933: LD_INT 0
75935: PPUSH
75936: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75937: LD_ADDR_VAR 0 1
75941: PUSH
75942: LD_INT 22
75944: PUSH
75945: LD_OWVAR 2
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: PUSH
75954: LD_INT 2
75956: PUSH
75957: LD_INT 30
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PUSH
75967: LD_INT 30
75969: PUSH
75970: LD_INT 1
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: LIST
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PPUSH
75986: CALL_OW 69
75990: ST_TO_ADDR
// if not depot then
75991: LD_VAR 0 1
75995: NOT
75996: IFFALSE 76000
// exit ;
75998: GO 76074
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76000: LD_ADDR_VAR 0 2
76004: PUSH
76005: LD_VAR 0 1
76009: PUSH
76010: LD_INT 1
76012: PPUSH
76013: LD_VAR 0 1
76017: PPUSH
76018: CALL_OW 12
76022: ARRAY
76023: PPUSH
76024: CALL_OW 274
76028: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76029: LD_VAR 0 2
76033: PPUSH
76034: LD_INT 1
76036: PPUSH
76037: LD_INT 0
76039: PPUSH
76040: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76044: LD_VAR 0 2
76048: PPUSH
76049: LD_INT 2
76051: PPUSH
76052: LD_INT 0
76054: PPUSH
76055: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76059: LD_VAR 0 2
76063: PPUSH
76064: LD_INT 3
76066: PPUSH
76067: LD_INT 0
76069: PPUSH
76070: CALL_OW 277
// end ;
76074: PPOPN 2
76076: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76077: LD_EXP 47
76081: IFFALSE 76089
76083: PUSH
76084: LD_EXP 75
76088: AND
76089: IFFALSE 76186
76091: GO 76093
76093: DISABLE
76094: LD_INT 0
76096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76097: LD_ADDR_VAR 0 1
76101: PUSH
76102: LD_INT 22
76104: PUSH
76105: LD_OWVAR 2
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 21
76116: PUSH
76117: LD_INT 1
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 3
76126: PUSH
76127: LD_INT 23
76129: PUSH
76130: LD_INT 0
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: LIST
76145: PPUSH
76146: CALL_OW 69
76150: ST_TO_ADDR
// if not tmp then
76151: LD_VAR 0 1
76155: NOT
76156: IFFALSE 76160
// exit ;
76158: GO 76186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76160: LD_VAR 0 1
76164: PUSH
76165: LD_INT 1
76167: PPUSH
76168: LD_VAR 0 1
76172: PPUSH
76173: CALL_OW 12
76177: ARRAY
76178: PPUSH
76179: LD_INT 200
76181: PPUSH
76182: CALL_OW 234
// end ;
76186: PPOPN 1
76188: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76189: LD_EXP 47
76193: IFFALSE 76201
76195: PUSH
76196: LD_EXP 76
76200: AND
76201: IFFALSE 76280
76203: GO 76205
76205: DISABLE
76206: LD_INT 0
76208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76209: LD_ADDR_VAR 0 1
76213: PUSH
76214: LD_INT 22
76216: PUSH
76217: LD_OWVAR 2
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: PUSH
76226: LD_INT 21
76228: PUSH
76229: LD_INT 2
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PPUSH
76240: CALL_OW 69
76244: ST_TO_ADDR
// if not tmp then
76245: LD_VAR 0 1
76249: NOT
76250: IFFALSE 76254
// exit ;
76252: GO 76280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76254: LD_VAR 0 1
76258: PUSH
76259: LD_INT 1
76261: PPUSH
76262: LD_VAR 0 1
76266: PPUSH
76267: CALL_OW 12
76271: ARRAY
76272: PPUSH
76273: LD_INT 60
76275: PPUSH
76276: CALL_OW 234
// end ;
76280: PPOPN 1
76282: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76283: LD_EXP 47
76287: IFFALSE 76295
76289: PUSH
76290: LD_EXP 77
76294: AND
76295: IFFALSE 76394
76297: GO 76299
76299: DISABLE
76300: LD_INT 0
76302: PPUSH
76303: PPUSH
// begin enable ;
76304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76305: LD_ADDR_VAR 0 1
76309: PUSH
76310: LD_INT 22
76312: PUSH
76313: LD_OWVAR 2
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: LD_INT 61
76324: PUSH
76325: EMPTY
76326: LIST
76327: PUSH
76328: LD_INT 33
76330: PUSH
76331: LD_INT 2
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: LIST
76342: PPUSH
76343: CALL_OW 69
76347: ST_TO_ADDR
// if not tmp then
76348: LD_VAR 0 1
76352: NOT
76353: IFFALSE 76357
// exit ;
76355: GO 76394
// for i in tmp do
76357: LD_ADDR_VAR 0 2
76361: PUSH
76362: LD_VAR 0 1
76366: PUSH
76367: FOR_IN
76368: IFFALSE 76392
// if IsControledBy ( i ) then
76370: LD_VAR 0 2
76374: PPUSH
76375: CALL_OW 312
76379: IFFALSE 76390
// ComUnlink ( i ) ;
76381: LD_VAR 0 2
76385: PPUSH
76386: CALL_OW 136
76390: GO 76367
76392: POP
76393: POP
// end ;
76394: PPOPN 2
76396: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76397: LD_EXP 47
76401: IFFALSE 76409
76403: PUSH
76404: LD_EXP 78
76408: AND
76409: IFFALSE 76549
76411: GO 76413
76413: DISABLE
76414: LD_INT 0
76416: PPUSH
76417: PPUSH
// begin ToLua ( displayPowell(); ) ;
76418: LD_STRING displayPowell();
76420: PPUSH
76421: CALL_OW 559
// uc_side := 0 ;
76425: LD_ADDR_OWVAR 20
76429: PUSH
76430: LD_INT 0
76432: ST_TO_ADDR
// uc_nation := 2 ;
76433: LD_ADDR_OWVAR 21
76437: PUSH
76438: LD_INT 2
76440: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76441: LD_ADDR_OWVAR 37
76445: PUSH
76446: LD_INT 14
76448: ST_TO_ADDR
// vc_engine := engine_siberite ;
76449: LD_ADDR_OWVAR 39
76453: PUSH
76454: LD_INT 3
76456: ST_TO_ADDR
// vc_control := control_apeman ;
76457: LD_ADDR_OWVAR 38
76461: PUSH
76462: LD_INT 5
76464: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76465: LD_ADDR_OWVAR 40
76469: PUSH
76470: LD_INT 29
76472: ST_TO_ADDR
// un := CreateVehicle ;
76473: LD_ADDR_VAR 0 2
76477: PUSH
76478: CALL_OW 45
76482: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76483: LD_VAR 0 2
76487: PPUSH
76488: LD_INT 1
76490: PPUSH
76491: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76495: LD_INT 35
76497: PPUSH
76498: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76502: LD_VAR 0 2
76506: PPUSH
76507: LD_INT 22
76509: PUSH
76510: LD_OWVAR 2
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PPUSH
76519: CALL_OW 69
76523: PPUSH
76524: LD_VAR 0 2
76528: PPUSH
76529: CALL_OW 74
76533: PPUSH
76534: CALL_OW 115
// until IsDead ( un ) ;
76538: LD_VAR 0 2
76542: PPUSH
76543: CALL_OW 301
76547: IFFALSE 76495
// end ;
76549: PPOPN 2
76551: END
// every 0 0$1 trigger StreamModeActive and sStu do
76552: LD_EXP 47
76556: IFFALSE 76564
76558: PUSH
76559: LD_EXP 86
76563: AND
76564: IFFALSE 76580
76566: GO 76568
76568: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76569: LD_STRING displayStucuk();
76571: PPUSH
76572: CALL_OW 559
// ResetFog ;
76576: CALL_OW 335
// end ;
76580: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76581: LD_EXP 47
76585: IFFALSE 76593
76587: PUSH
76588: LD_EXP 79
76592: AND
76593: IFFALSE 76734
76595: GO 76597
76597: DISABLE
76598: LD_INT 0
76600: PPUSH
76601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76602: LD_ADDR_VAR 0 2
76606: PUSH
76607: LD_INT 22
76609: PUSH
76610: LD_OWVAR 2
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: PUSH
76619: LD_INT 21
76621: PUSH
76622: LD_INT 1
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PPUSH
76633: CALL_OW 69
76637: ST_TO_ADDR
// if not tmp then
76638: LD_VAR 0 2
76642: NOT
76643: IFFALSE 76647
// exit ;
76645: GO 76734
// un := tmp [ rand ( 1 , tmp ) ] ;
76647: LD_ADDR_VAR 0 1
76651: PUSH
76652: LD_VAR 0 2
76656: PUSH
76657: LD_INT 1
76659: PPUSH
76660: LD_VAR 0 2
76664: PPUSH
76665: CALL_OW 12
76669: ARRAY
76670: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76671: LD_VAR 0 1
76675: PPUSH
76676: LD_INT 0
76678: PPUSH
76679: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76683: LD_VAR 0 1
76687: PPUSH
76688: LD_OWVAR 3
76692: PUSH
76693: LD_VAR 0 1
76697: DIFF
76698: PPUSH
76699: LD_VAR 0 1
76703: PPUSH
76704: CALL_OW 74
76708: PPUSH
76709: CALL_OW 115
// wait ( 0 0$20 ) ;
76713: LD_INT 700
76715: PPUSH
76716: CALL_OW 67
// SetSide ( un , your_side ) ;
76720: LD_VAR 0 1
76724: PPUSH
76725: LD_OWVAR 2
76729: PPUSH
76730: CALL_OW 235
// end ;
76734: PPOPN 2
76736: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76737: LD_EXP 47
76741: IFFALSE 76749
76743: PUSH
76744: LD_EXP 80
76748: AND
76749: IFFALSE 76855
76751: GO 76753
76753: DISABLE
76754: LD_INT 0
76756: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76757: LD_ADDR_VAR 0 1
76761: PUSH
76762: LD_INT 22
76764: PUSH
76765: LD_OWVAR 2
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: PUSH
76774: LD_INT 2
76776: PUSH
76777: LD_INT 30
76779: PUSH
76780: LD_INT 0
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 30
76789: PUSH
76790: LD_INT 1
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PPUSH
76806: CALL_OW 69
76810: ST_TO_ADDR
// if not depot then
76811: LD_VAR 0 1
76815: NOT
76816: IFFALSE 76820
// exit ;
76818: GO 76855
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76820: LD_VAR 0 1
76824: PUSH
76825: LD_INT 1
76827: ARRAY
76828: PPUSH
76829: CALL_OW 250
76833: PPUSH
76834: LD_VAR 0 1
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PPUSH
76843: CALL_OW 251
76847: PPUSH
76848: LD_INT 70
76850: PPUSH
76851: CALL_OW 495
// end ;
76855: PPOPN 1
76857: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76858: LD_EXP 47
76862: IFFALSE 76870
76864: PUSH
76865: LD_EXP 81
76869: AND
76870: IFFALSE 77081
76872: GO 76874
76874: DISABLE
76875: LD_INT 0
76877: PPUSH
76878: PPUSH
76879: PPUSH
76880: PPUSH
76881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76882: LD_ADDR_VAR 0 5
76886: PUSH
76887: LD_INT 22
76889: PUSH
76890: LD_OWVAR 2
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: PUSH
76899: LD_INT 21
76901: PUSH
76902: LD_INT 1
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PPUSH
76913: CALL_OW 69
76917: ST_TO_ADDR
// if not tmp then
76918: LD_VAR 0 5
76922: NOT
76923: IFFALSE 76927
// exit ;
76925: GO 77081
// for i in tmp do
76927: LD_ADDR_VAR 0 1
76931: PUSH
76932: LD_VAR 0 5
76936: PUSH
76937: FOR_IN
76938: IFFALSE 77079
// begin d := rand ( 0 , 5 ) ;
76940: LD_ADDR_VAR 0 4
76944: PUSH
76945: LD_INT 0
76947: PPUSH
76948: LD_INT 5
76950: PPUSH
76951: CALL_OW 12
76955: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76956: LD_ADDR_VAR 0 2
76960: PUSH
76961: LD_VAR 0 1
76965: PPUSH
76966: CALL_OW 250
76970: PPUSH
76971: LD_VAR 0 4
76975: PPUSH
76976: LD_INT 3
76978: PPUSH
76979: LD_INT 12
76981: PPUSH
76982: CALL_OW 12
76986: PPUSH
76987: CALL_OW 272
76991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76992: LD_ADDR_VAR 0 3
76996: PUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: CALL_OW 251
77006: PPUSH
77007: LD_VAR 0 4
77011: PPUSH
77012: LD_INT 3
77014: PPUSH
77015: LD_INT 12
77017: PPUSH
77018: CALL_OW 12
77022: PPUSH
77023: CALL_OW 273
77027: ST_TO_ADDR
// if ValidHex ( x , y ) then
77028: LD_VAR 0 2
77032: PPUSH
77033: LD_VAR 0 3
77037: PPUSH
77038: CALL_OW 488
77042: IFFALSE 77077
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77044: LD_VAR 0 1
77048: PPUSH
77049: LD_VAR 0 2
77053: PPUSH
77054: LD_VAR 0 3
77058: PPUSH
77059: LD_INT 3
77061: PPUSH
77062: LD_INT 6
77064: PPUSH
77065: CALL_OW 12
77069: PPUSH
77070: LD_INT 1
77072: PPUSH
77073: CALL_OW 483
// end ;
77077: GO 76937
77079: POP
77080: POP
// end ;
77081: PPOPN 5
77083: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77084: LD_EXP 47
77088: IFFALSE 77096
77090: PUSH
77091: LD_EXP 82
77095: AND
77096: IFFALSE 77190
77098: GO 77100
77100: DISABLE
77101: LD_INT 0
77103: PPUSH
77104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77105: LD_ADDR_VAR 0 2
77109: PUSH
77110: LD_INT 22
77112: PUSH
77113: LD_OWVAR 2
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 32
77124: PUSH
77125: LD_INT 1
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 21
77134: PUSH
77135: LD_INT 2
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: LIST
77146: PPUSH
77147: CALL_OW 69
77151: ST_TO_ADDR
// if not tmp then
77152: LD_VAR 0 2
77156: NOT
77157: IFFALSE 77161
// exit ;
77159: GO 77190
// for i in tmp do
77161: LD_ADDR_VAR 0 1
77165: PUSH
77166: LD_VAR 0 2
77170: PUSH
77171: FOR_IN
77172: IFFALSE 77188
// SetFuel ( i , 0 ) ;
77174: LD_VAR 0 1
77178: PPUSH
77179: LD_INT 0
77181: PPUSH
77182: CALL_OW 240
77186: GO 77171
77188: POP
77189: POP
// end ;
77190: PPOPN 2
77192: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77193: LD_EXP 47
77197: IFFALSE 77205
77199: PUSH
77200: LD_EXP 83
77204: AND
77205: IFFALSE 77271
77207: GO 77209
77209: DISABLE
77210: LD_INT 0
77212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77213: LD_ADDR_VAR 0 1
77217: PUSH
77218: LD_INT 22
77220: PUSH
77221: LD_OWVAR 2
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 30
77232: PUSH
77233: LD_INT 29
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: PPUSH
77244: CALL_OW 69
77248: ST_TO_ADDR
// if not tmp then
77249: LD_VAR 0 1
77253: NOT
77254: IFFALSE 77258
// exit ;
77256: GO 77271
// DestroyUnit ( tmp [ 1 ] ) ;
77258: LD_VAR 0 1
77262: PUSH
77263: LD_INT 1
77265: ARRAY
77266: PPUSH
77267: CALL_OW 65
// end ;
77271: PPOPN 1
77273: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77274: LD_EXP 47
77278: IFFALSE 77286
77280: PUSH
77281: LD_EXP 85
77285: AND
77286: IFFALSE 77415
77288: GO 77290
77290: DISABLE
77291: LD_INT 0
77293: PPUSH
// begin uc_side := 0 ;
77294: LD_ADDR_OWVAR 20
77298: PUSH
77299: LD_INT 0
77301: ST_TO_ADDR
// uc_nation := nation_arabian ;
77302: LD_ADDR_OWVAR 21
77306: PUSH
77307: LD_INT 2
77309: ST_TO_ADDR
// hc_gallery :=  ;
77310: LD_ADDR_OWVAR 33
77314: PUSH
77315: LD_STRING 
77317: ST_TO_ADDR
// hc_name :=  ;
77318: LD_ADDR_OWVAR 26
77322: PUSH
77323: LD_STRING 
77325: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77326: LD_INT 1
77328: PPUSH
77329: LD_INT 11
77331: PPUSH
77332: LD_INT 10
77334: PPUSH
77335: CALL_OW 380
// un := CreateHuman ;
77339: LD_ADDR_VAR 0 1
77343: PUSH
77344: CALL_OW 44
77348: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77349: LD_VAR 0 1
77353: PPUSH
77354: LD_INT 1
77356: PPUSH
77357: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77361: LD_INT 35
77363: PPUSH
77364: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77368: LD_VAR 0 1
77372: PPUSH
77373: LD_INT 22
77375: PUSH
77376: LD_OWVAR 2
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PPUSH
77385: CALL_OW 69
77389: PPUSH
77390: LD_VAR 0 1
77394: PPUSH
77395: CALL_OW 74
77399: PPUSH
77400: CALL_OW 115
// until IsDead ( un ) ;
77404: LD_VAR 0 1
77408: PPUSH
77409: CALL_OW 301
77413: IFFALSE 77361
// end ;
77415: PPOPN 1
77417: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77418: LD_EXP 47
77422: IFFALSE 77430
77424: PUSH
77425: LD_EXP 87
77429: AND
77430: IFFALSE 77442
77432: GO 77434
77434: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77435: LD_STRING earthquake(getX(game), 0, 32)
77437: PPUSH
77438: CALL_OW 559
77442: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77443: LD_EXP 47
77447: IFFALSE 77455
77449: PUSH
77450: LD_EXP 88
77454: AND
77455: IFFALSE 77546
77457: GO 77459
77459: DISABLE
77460: LD_INT 0
77462: PPUSH
// begin enable ;
77463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77464: LD_ADDR_VAR 0 1
77468: PUSH
77469: LD_INT 22
77471: PUSH
77472: LD_OWVAR 2
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: PUSH
77481: LD_INT 21
77483: PUSH
77484: LD_INT 2
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: LD_INT 33
77493: PUSH
77494: LD_INT 3
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: LIST
77505: PPUSH
77506: CALL_OW 69
77510: ST_TO_ADDR
// if not tmp then
77511: LD_VAR 0 1
77515: NOT
77516: IFFALSE 77520
// exit ;
77518: GO 77546
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77520: LD_VAR 0 1
77524: PUSH
77525: LD_INT 1
77527: PPUSH
77528: LD_VAR 0 1
77532: PPUSH
77533: CALL_OW 12
77537: ARRAY
77538: PPUSH
77539: LD_INT 1
77541: PPUSH
77542: CALL_OW 234
// end ;
77546: PPOPN 1
77548: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77549: LD_EXP 47
77553: IFFALSE 77561
77555: PUSH
77556: LD_EXP 89
77560: AND
77561: IFFALSE 77702
77563: GO 77565
77565: DISABLE
77566: LD_INT 0
77568: PPUSH
77569: PPUSH
77570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77571: LD_ADDR_VAR 0 3
77575: PUSH
77576: LD_INT 22
77578: PUSH
77579: LD_OWVAR 2
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: LD_INT 25
77590: PUSH
77591: LD_INT 1
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PPUSH
77602: CALL_OW 69
77606: ST_TO_ADDR
// if not tmp then
77607: LD_VAR 0 3
77611: NOT
77612: IFFALSE 77616
// exit ;
77614: GO 77702
// un := tmp [ rand ( 1 , tmp ) ] ;
77616: LD_ADDR_VAR 0 2
77620: PUSH
77621: LD_VAR 0 3
77625: PUSH
77626: LD_INT 1
77628: PPUSH
77629: LD_VAR 0 3
77633: PPUSH
77634: CALL_OW 12
77638: ARRAY
77639: ST_TO_ADDR
// if Crawls ( un ) then
77640: LD_VAR 0 2
77644: PPUSH
77645: CALL_OW 318
77649: IFFALSE 77660
// ComWalk ( un ) ;
77651: LD_VAR 0 2
77655: PPUSH
77656: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77660: LD_VAR 0 2
77664: PPUSH
77665: LD_INT 9
77667: PPUSH
77668: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77672: LD_INT 28
77674: PPUSH
77675: LD_OWVAR 2
77679: PPUSH
77680: LD_INT 2
77682: PPUSH
77683: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77687: LD_INT 29
77689: PPUSH
77690: LD_OWVAR 2
77694: PPUSH
77695: LD_INT 2
77697: PPUSH
77698: CALL_OW 322
// end ;
77702: PPOPN 3
77704: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77705: LD_EXP 47
77709: IFFALSE 77717
77711: PUSH
77712: LD_EXP 90
77716: AND
77717: IFFALSE 77828
77719: GO 77721
77721: DISABLE
77722: LD_INT 0
77724: PPUSH
77725: PPUSH
77726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77727: LD_ADDR_VAR 0 3
77731: PUSH
77732: LD_INT 22
77734: PUSH
77735: LD_OWVAR 2
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 25
77746: PUSH
77747: LD_INT 1
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PPUSH
77758: CALL_OW 69
77762: ST_TO_ADDR
// if not tmp then
77763: LD_VAR 0 3
77767: NOT
77768: IFFALSE 77772
// exit ;
77770: GO 77828
// un := tmp [ rand ( 1 , tmp ) ] ;
77772: LD_ADDR_VAR 0 2
77776: PUSH
77777: LD_VAR 0 3
77781: PUSH
77782: LD_INT 1
77784: PPUSH
77785: LD_VAR 0 3
77789: PPUSH
77790: CALL_OW 12
77794: ARRAY
77795: ST_TO_ADDR
// if Crawls ( un ) then
77796: LD_VAR 0 2
77800: PPUSH
77801: CALL_OW 318
77805: IFFALSE 77816
// ComWalk ( un ) ;
77807: LD_VAR 0 2
77811: PPUSH
77812: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77816: LD_VAR 0 2
77820: PPUSH
77821: LD_INT 8
77823: PPUSH
77824: CALL_OW 336
// end ;
77828: PPOPN 3
77830: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77831: LD_EXP 47
77835: IFFALSE 77843
77837: PUSH
77838: LD_EXP 91
77842: AND
77843: IFFALSE 77987
77845: GO 77847
77847: DISABLE
77848: LD_INT 0
77850: PPUSH
77851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77852: LD_ADDR_VAR 0 2
77856: PUSH
77857: LD_INT 22
77859: PUSH
77860: LD_OWVAR 2
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: LD_INT 21
77871: PUSH
77872: LD_INT 2
77874: PUSH
77875: EMPTY
77876: LIST
77877: LIST
77878: PUSH
77879: LD_INT 2
77881: PUSH
77882: LD_INT 34
77884: PUSH
77885: LD_INT 12
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: LD_INT 34
77894: PUSH
77895: LD_INT 51
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: PUSH
77902: LD_INT 34
77904: PUSH
77905: LD_INT 32
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: LIST
77922: PPUSH
77923: CALL_OW 69
77927: ST_TO_ADDR
// if not tmp then
77928: LD_VAR 0 2
77932: NOT
77933: IFFALSE 77937
// exit ;
77935: GO 77987
// for i in tmp do
77937: LD_ADDR_VAR 0 1
77941: PUSH
77942: LD_VAR 0 2
77946: PUSH
77947: FOR_IN
77948: IFFALSE 77985
// if GetCargo ( i , mat_artifact ) = 0 then
77950: LD_VAR 0 1
77954: PPUSH
77955: LD_INT 4
77957: PPUSH
77958: CALL_OW 289
77962: PUSH
77963: LD_INT 0
77965: EQUAL
77966: IFFALSE 77983
// SetCargo ( i , mat_siberit , 100 ) ;
77968: LD_VAR 0 1
77972: PPUSH
77973: LD_INT 3
77975: PPUSH
77976: LD_INT 100
77978: PPUSH
77979: CALL_OW 290
77983: GO 77947
77985: POP
77986: POP
// end ;
77987: PPOPN 2
77989: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77990: LD_EXP 47
77994: IFFALSE 78002
77996: PUSH
77997: LD_EXP 92
78001: AND
78002: IFFALSE 78185
78004: GO 78006
78006: DISABLE
78007: LD_INT 0
78009: PPUSH
78010: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78011: LD_ADDR_VAR 0 2
78015: PUSH
78016: LD_INT 22
78018: PUSH
78019: LD_OWVAR 2
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PPUSH
78028: CALL_OW 69
78032: ST_TO_ADDR
// if not tmp then
78033: LD_VAR 0 2
78037: NOT
78038: IFFALSE 78042
// exit ;
78040: GO 78185
// for i := 1 to 2 do
78042: LD_ADDR_VAR 0 1
78046: PUSH
78047: DOUBLE
78048: LD_INT 1
78050: DEC
78051: ST_TO_ADDR
78052: LD_INT 2
78054: PUSH
78055: FOR_TO
78056: IFFALSE 78183
// begin uc_side := your_side ;
78058: LD_ADDR_OWVAR 20
78062: PUSH
78063: LD_OWVAR 2
78067: ST_TO_ADDR
// uc_nation := nation_american ;
78068: LD_ADDR_OWVAR 21
78072: PUSH
78073: LD_INT 1
78075: ST_TO_ADDR
// vc_chassis := us_morphling ;
78076: LD_ADDR_OWVAR 37
78080: PUSH
78081: LD_INT 5
78083: ST_TO_ADDR
// vc_engine := engine_siberite ;
78084: LD_ADDR_OWVAR 39
78088: PUSH
78089: LD_INT 3
78091: ST_TO_ADDR
// vc_control := control_computer ;
78092: LD_ADDR_OWVAR 38
78096: PUSH
78097: LD_INT 3
78099: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78100: LD_ADDR_OWVAR 40
78104: PUSH
78105: LD_INT 10
78107: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78108: LD_VAR 0 2
78112: PUSH
78113: LD_INT 1
78115: ARRAY
78116: PPUSH
78117: CALL_OW 310
78121: NOT
78122: IFFALSE 78169
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78124: CALL_OW 45
78128: PPUSH
78129: LD_VAR 0 2
78133: PUSH
78134: LD_INT 1
78136: ARRAY
78137: PPUSH
78138: CALL_OW 250
78142: PPUSH
78143: LD_VAR 0 2
78147: PUSH
78148: LD_INT 1
78150: ARRAY
78151: PPUSH
78152: CALL_OW 251
78156: PPUSH
78157: LD_INT 12
78159: PPUSH
78160: LD_INT 1
78162: PPUSH
78163: CALL_OW 50
78167: GO 78181
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78169: CALL_OW 45
78173: PPUSH
78174: LD_INT 1
78176: PPUSH
78177: CALL_OW 51
// end ;
78181: GO 78055
78183: POP
78184: POP
// end ;
78185: PPOPN 2
78187: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78188: LD_EXP 47
78192: IFFALSE 78200
78194: PUSH
78195: LD_EXP 93
78199: AND
78200: IFFALSE 78422
78202: GO 78204
78204: DISABLE
78205: LD_INT 0
78207: PPUSH
78208: PPUSH
78209: PPUSH
78210: PPUSH
78211: PPUSH
78212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78213: LD_ADDR_VAR 0 6
78217: PUSH
78218: LD_INT 22
78220: PUSH
78221: LD_OWVAR 2
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: PUSH
78230: LD_INT 21
78232: PUSH
78233: LD_INT 1
78235: PUSH
78236: EMPTY
78237: LIST
78238: LIST
78239: PUSH
78240: LD_INT 3
78242: PUSH
78243: LD_INT 23
78245: PUSH
78246: LD_INT 0
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: EMPTY
78254: LIST
78255: LIST
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: LIST
78261: PPUSH
78262: CALL_OW 69
78266: ST_TO_ADDR
// if not tmp then
78267: LD_VAR 0 6
78271: NOT
78272: IFFALSE 78276
// exit ;
78274: GO 78422
// s1 := rand ( 1 , 4 ) ;
78276: LD_ADDR_VAR 0 2
78280: PUSH
78281: LD_INT 1
78283: PPUSH
78284: LD_INT 4
78286: PPUSH
78287: CALL_OW 12
78291: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78292: LD_ADDR_VAR 0 4
78296: PUSH
78297: LD_VAR 0 6
78301: PUSH
78302: LD_INT 1
78304: ARRAY
78305: PPUSH
78306: LD_VAR 0 2
78310: PPUSH
78311: CALL_OW 259
78315: ST_TO_ADDR
// if s1 = 1 then
78316: LD_VAR 0 2
78320: PUSH
78321: LD_INT 1
78323: EQUAL
78324: IFFALSE 78344
// s2 := rand ( 2 , 4 ) else
78326: LD_ADDR_VAR 0 3
78330: PUSH
78331: LD_INT 2
78333: PPUSH
78334: LD_INT 4
78336: PPUSH
78337: CALL_OW 12
78341: ST_TO_ADDR
78342: GO 78352
// s2 := 1 ;
78344: LD_ADDR_VAR 0 3
78348: PUSH
78349: LD_INT 1
78351: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78352: LD_ADDR_VAR 0 5
78356: PUSH
78357: LD_VAR 0 6
78361: PUSH
78362: LD_INT 1
78364: ARRAY
78365: PPUSH
78366: LD_VAR 0 3
78370: PPUSH
78371: CALL_OW 259
78375: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78376: LD_VAR 0 6
78380: PUSH
78381: LD_INT 1
78383: ARRAY
78384: PPUSH
78385: LD_VAR 0 2
78389: PPUSH
78390: LD_VAR 0 5
78394: PPUSH
78395: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78399: LD_VAR 0 6
78403: PUSH
78404: LD_INT 1
78406: ARRAY
78407: PPUSH
78408: LD_VAR 0 3
78412: PPUSH
78413: LD_VAR 0 4
78417: PPUSH
78418: CALL_OW 237
// end ;
78422: PPOPN 6
78424: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78425: LD_EXP 47
78429: IFFALSE 78437
78431: PUSH
78432: LD_EXP 94
78436: AND
78437: IFFALSE 78516
78439: GO 78441
78441: DISABLE
78442: LD_INT 0
78444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78445: LD_ADDR_VAR 0 1
78449: PUSH
78450: LD_INT 22
78452: PUSH
78453: LD_OWVAR 2
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 30
78464: PUSH
78465: LD_INT 3
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: PPUSH
78476: CALL_OW 69
78480: ST_TO_ADDR
// if not tmp then
78481: LD_VAR 0 1
78485: NOT
78486: IFFALSE 78490
// exit ;
78488: GO 78516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78490: LD_VAR 0 1
78494: PUSH
78495: LD_INT 1
78497: PPUSH
78498: LD_VAR 0 1
78502: PPUSH
78503: CALL_OW 12
78507: ARRAY
78508: PPUSH
78509: LD_INT 1
78511: PPUSH
78512: CALL_OW 234
// end ;
78516: PPOPN 1
78518: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78519: LD_EXP 47
78523: IFFALSE 78531
78525: PUSH
78526: LD_EXP 95
78530: AND
78531: IFFALSE 78643
78533: GO 78535
78535: DISABLE
78536: LD_INT 0
78538: PPUSH
78539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78540: LD_ADDR_VAR 0 2
78544: PUSH
78545: LD_INT 22
78547: PUSH
78548: LD_OWVAR 2
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 2
78559: PUSH
78560: LD_INT 30
78562: PUSH
78563: LD_INT 27
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 30
78572: PUSH
78573: LD_INT 26
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 30
78582: PUSH
78583: LD_INT 28
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PPUSH
78600: CALL_OW 69
78604: ST_TO_ADDR
// if not tmp then
78605: LD_VAR 0 2
78609: NOT
78610: IFFALSE 78614
// exit ;
78612: GO 78643
// for i in tmp do
78614: LD_ADDR_VAR 0 1
78618: PUSH
78619: LD_VAR 0 2
78623: PUSH
78624: FOR_IN
78625: IFFALSE 78641
// SetLives ( i , 1 ) ;
78627: LD_VAR 0 1
78631: PPUSH
78632: LD_INT 1
78634: PPUSH
78635: CALL_OW 234
78639: GO 78624
78641: POP
78642: POP
// end ;
78643: PPOPN 2
78645: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78646: LD_EXP 47
78650: IFFALSE 78658
78652: PUSH
78653: LD_EXP 96
78657: AND
78658: IFFALSE 78945
78660: GO 78662
78662: DISABLE
78663: LD_INT 0
78665: PPUSH
78666: PPUSH
78667: PPUSH
// begin i := rand ( 1 , 7 ) ;
78668: LD_ADDR_VAR 0 1
78672: PUSH
78673: LD_INT 1
78675: PPUSH
78676: LD_INT 7
78678: PPUSH
78679: CALL_OW 12
78683: ST_TO_ADDR
// case i of 1 :
78684: LD_VAR 0 1
78688: PUSH
78689: LD_INT 1
78691: DOUBLE
78692: EQUAL
78693: IFTRUE 78697
78695: GO 78707
78697: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78698: LD_STRING earthquake(getX(game), 0, 32)
78700: PPUSH
78701: CALL_OW 559
78705: GO 78945
78707: LD_INT 2
78709: DOUBLE
78710: EQUAL
78711: IFTRUE 78715
78713: GO 78729
78715: POP
// begin ToLua ( displayStucuk(); ) ;
78716: LD_STRING displayStucuk();
78718: PPUSH
78719: CALL_OW 559
// ResetFog ;
78723: CALL_OW 335
// end ; 3 :
78727: GO 78945
78729: LD_INT 3
78731: DOUBLE
78732: EQUAL
78733: IFTRUE 78737
78735: GO 78841
78737: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78738: LD_ADDR_VAR 0 2
78742: PUSH
78743: LD_INT 22
78745: PUSH
78746: LD_OWVAR 2
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PUSH
78755: LD_INT 25
78757: PUSH
78758: LD_INT 1
78760: PUSH
78761: EMPTY
78762: LIST
78763: LIST
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: PPUSH
78769: CALL_OW 69
78773: ST_TO_ADDR
// if not tmp then
78774: LD_VAR 0 2
78778: NOT
78779: IFFALSE 78783
// exit ;
78781: GO 78945
// un := tmp [ rand ( 1 , tmp ) ] ;
78783: LD_ADDR_VAR 0 3
78787: PUSH
78788: LD_VAR 0 2
78792: PUSH
78793: LD_INT 1
78795: PPUSH
78796: LD_VAR 0 2
78800: PPUSH
78801: CALL_OW 12
78805: ARRAY
78806: ST_TO_ADDR
// if Crawls ( un ) then
78807: LD_VAR 0 3
78811: PPUSH
78812: CALL_OW 318
78816: IFFALSE 78827
// ComWalk ( un ) ;
78818: LD_VAR 0 3
78822: PPUSH
78823: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78827: LD_VAR 0 3
78831: PPUSH
78832: LD_INT 8
78834: PPUSH
78835: CALL_OW 336
// end ; 4 :
78839: GO 78945
78841: LD_INT 4
78843: DOUBLE
78844: EQUAL
78845: IFTRUE 78849
78847: GO 78923
78849: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78850: LD_ADDR_VAR 0 2
78854: PUSH
78855: LD_INT 22
78857: PUSH
78858: LD_OWVAR 2
78862: PUSH
78863: EMPTY
78864: LIST
78865: LIST
78866: PUSH
78867: LD_INT 30
78869: PUSH
78870: LD_INT 29
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PPUSH
78881: CALL_OW 69
78885: ST_TO_ADDR
// if not tmp then
78886: LD_VAR 0 2
78890: NOT
78891: IFFALSE 78895
// exit ;
78893: GO 78945
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78895: LD_VAR 0 2
78899: PUSH
78900: LD_INT 1
78902: ARRAY
78903: PPUSH
78904: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78908: LD_VAR 0 2
78912: PUSH
78913: LD_INT 1
78915: ARRAY
78916: PPUSH
78917: CALL_OW 65
// end ; 5 .. 7 :
78921: GO 78945
78923: LD_INT 5
78925: DOUBLE
78926: GREATEREQUAL
78927: IFFALSE 78935
78929: LD_INT 7
78931: DOUBLE
78932: LESSEQUAL
78933: IFTRUE 78937
78935: GO 78944
78937: POP
// StreamSibBomb ; end ;
78938: CALL 75126 0 0
78942: GO 78945
78944: POP
// end ;
78945: PPOPN 3
78947: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78948: LD_EXP 47
78952: IFFALSE 78960
78954: PUSH
78955: LD_EXP 97
78959: AND
78960: IFFALSE 79116
78962: GO 78964
78964: DISABLE
78965: LD_INT 0
78967: PPUSH
78968: PPUSH
78969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78970: LD_ADDR_VAR 0 2
78974: PUSH
78975: LD_INT 81
78977: PUSH
78978: LD_OWVAR 2
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PUSH
78987: LD_INT 2
78989: PUSH
78990: LD_INT 21
78992: PUSH
78993: LD_INT 1
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 21
79002: PUSH
79003: LD_INT 2
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: LIST
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PPUSH
79019: CALL_OW 69
79023: ST_TO_ADDR
// if not tmp then
79024: LD_VAR 0 2
79028: NOT
79029: IFFALSE 79033
// exit ;
79031: GO 79116
// p := 0 ;
79033: LD_ADDR_VAR 0 3
79037: PUSH
79038: LD_INT 0
79040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79041: LD_INT 35
79043: PPUSH
79044: CALL_OW 67
// p := p + 1 ;
79048: LD_ADDR_VAR 0 3
79052: PUSH
79053: LD_VAR 0 3
79057: PUSH
79058: LD_INT 1
79060: PLUS
79061: ST_TO_ADDR
// for i in tmp do
79062: LD_ADDR_VAR 0 1
79066: PUSH
79067: LD_VAR 0 2
79071: PUSH
79072: FOR_IN
79073: IFFALSE 79104
// if GetLives ( i ) < 1000 then
79075: LD_VAR 0 1
79079: PPUSH
79080: CALL_OW 256
79084: PUSH
79085: LD_INT 1000
79087: LESS
79088: IFFALSE 79102
// SetLives ( i , 1000 ) ;
79090: LD_VAR 0 1
79094: PPUSH
79095: LD_INT 1000
79097: PPUSH
79098: CALL_OW 234
79102: GO 79072
79104: POP
79105: POP
// until p > 20 ;
79106: LD_VAR 0 3
79110: PUSH
79111: LD_INT 20
79113: GREATER
79114: IFFALSE 79041
// end ;
79116: PPOPN 3
79118: END
// every 0 0$1 trigger StreamModeActive and sTime do
79119: LD_EXP 47
79123: IFFALSE 79131
79125: PUSH
79126: LD_EXP 98
79130: AND
79131: IFFALSE 79166
79133: GO 79135
79135: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79136: LD_INT 28
79138: PPUSH
79139: LD_OWVAR 2
79143: PPUSH
79144: LD_INT 2
79146: PPUSH
79147: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79151: LD_INT 30
79153: PPUSH
79154: LD_OWVAR 2
79158: PPUSH
79159: LD_INT 2
79161: PPUSH
79162: CALL_OW 322
// end ;
79166: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79167: LD_EXP 47
79171: IFFALSE 79179
79173: PUSH
79174: LD_EXP 99
79178: AND
79179: IFFALSE 79300
79181: GO 79183
79183: DISABLE
79184: LD_INT 0
79186: PPUSH
79187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79188: LD_ADDR_VAR 0 2
79192: PUSH
79193: LD_INT 22
79195: PUSH
79196: LD_OWVAR 2
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: LD_INT 21
79207: PUSH
79208: LD_INT 1
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: LD_INT 3
79217: PUSH
79218: LD_INT 23
79220: PUSH
79221: LD_INT 0
79223: PUSH
79224: EMPTY
79225: LIST
79226: LIST
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: LIST
79236: PPUSH
79237: CALL_OW 69
79241: ST_TO_ADDR
// if not tmp then
79242: LD_VAR 0 2
79246: NOT
79247: IFFALSE 79251
// exit ;
79249: GO 79300
// for i in tmp do
79251: LD_ADDR_VAR 0 1
79255: PUSH
79256: LD_VAR 0 2
79260: PUSH
79261: FOR_IN
79262: IFFALSE 79298
// begin if Crawls ( i ) then
79264: LD_VAR 0 1
79268: PPUSH
79269: CALL_OW 318
79273: IFFALSE 79284
// ComWalk ( i ) ;
79275: LD_VAR 0 1
79279: PPUSH
79280: CALL_OW 138
// SetClass ( i , 2 ) ;
79284: LD_VAR 0 1
79288: PPUSH
79289: LD_INT 2
79291: PPUSH
79292: CALL_OW 336
// end ;
79296: GO 79261
79298: POP
79299: POP
// end ;
79300: PPOPN 2
79302: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79303: LD_EXP 47
79307: IFFALSE 79315
79309: PUSH
79310: LD_EXP 100
79314: AND
79315: IFFALSE 79605
79317: GO 79319
79319: DISABLE
79320: LD_INT 0
79322: PPUSH
79323: PPUSH
79324: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79325: LD_OWVAR 2
79329: PPUSH
79330: LD_INT 9
79332: PPUSH
79333: LD_INT 1
79335: PPUSH
79336: LD_INT 1
79338: PPUSH
79339: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79343: LD_INT 9
79345: PPUSH
79346: LD_OWVAR 2
79350: PPUSH
79351: CALL_OW 343
// uc_side := 9 ;
79355: LD_ADDR_OWVAR 20
79359: PUSH
79360: LD_INT 9
79362: ST_TO_ADDR
// uc_nation := 2 ;
79363: LD_ADDR_OWVAR 21
79367: PUSH
79368: LD_INT 2
79370: ST_TO_ADDR
// hc_name := Dark Warrior ;
79371: LD_ADDR_OWVAR 26
79375: PUSH
79376: LD_STRING Dark Warrior
79378: ST_TO_ADDR
// hc_gallery :=  ;
79379: LD_ADDR_OWVAR 33
79383: PUSH
79384: LD_STRING 
79386: ST_TO_ADDR
// hc_noskilllimit := true ;
79387: LD_ADDR_OWVAR 76
79391: PUSH
79392: LD_INT 1
79394: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79395: LD_ADDR_OWVAR 31
79399: PUSH
79400: LD_INT 30
79402: PUSH
79403: LD_INT 30
79405: PUSH
79406: LD_INT 30
79408: PUSH
79409: LD_INT 30
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: LIST
79416: LIST
79417: ST_TO_ADDR
// un := CreateHuman ;
79418: LD_ADDR_VAR 0 3
79422: PUSH
79423: CALL_OW 44
79427: ST_TO_ADDR
// hc_noskilllimit := false ;
79428: LD_ADDR_OWVAR 76
79432: PUSH
79433: LD_INT 0
79435: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79436: LD_VAR 0 3
79440: PPUSH
79441: LD_INT 1
79443: PPUSH
79444: CALL_OW 51
// ToLua ( playRanger() ) ;
79448: LD_STRING playRanger()
79450: PPUSH
79451: CALL_OW 559
// p := 0 ;
79455: LD_ADDR_VAR 0 2
79459: PUSH
79460: LD_INT 0
79462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79463: LD_INT 35
79465: PPUSH
79466: CALL_OW 67
// p := p + 1 ;
79470: LD_ADDR_VAR 0 2
79474: PUSH
79475: LD_VAR 0 2
79479: PUSH
79480: LD_INT 1
79482: PLUS
79483: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79484: LD_VAR 0 3
79488: PPUSH
79489: CALL_OW 256
79493: PUSH
79494: LD_INT 1000
79496: LESS
79497: IFFALSE 79511
// SetLives ( un , 1000 ) ;
79499: LD_VAR 0 3
79503: PPUSH
79504: LD_INT 1000
79506: PPUSH
79507: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79511: LD_VAR 0 3
79515: PPUSH
79516: LD_INT 81
79518: PUSH
79519: LD_OWVAR 2
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 91
79530: PUSH
79531: LD_VAR 0 3
79535: PUSH
79536: LD_INT 30
79538: PUSH
79539: EMPTY
79540: LIST
79541: LIST
79542: LIST
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PPUSH
79548: CALL_OW 69
79552: PPUSH
79553: LD_VAR 0 3
79557: PPUSH
79558: CALL_OW 74
79562: PPUSH
79563: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
79567: LD_VAR 0 2
79571: PUSH
79572: LD_INT 80
79574: GREATER
79575: IFTRUE 79588
79577: PUSH
79578: LD_VAR 0 3
79582: PPUSH
79583: CALL_OW 301
79587: OR
79588: IFFALSE 79463
// if un then
79590: LD_VAR 0 3
79594: IFFALSE 79605
// RemoveUnit ( un ) ;
79596: LD_VAR 0 3
79600: PPUSH
79601: CALL_OW 64
// end ;
79605: PPOPN 3
79607: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
79608: LD_EXP 101
79612: IFFALSE 79728
79614: GO 79616
79616: DISABLE
79617: LD_INT 0
79619: PPUSH
79620: PPUSH
79621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79622: LD_ADDR_VAR 0 2
79626: PUSH
79627: LD_INT 81
79629: PUSH
79630: LD_OWVAR 2
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: PUSH
79639: LD_INT 21
79641: PUSH
79642: LD_INT 1
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: PPUSH
79653: CALL_OW 69
79657: ST_TO_ADDR
// ToLua ( playComputer() ) ;
79658: LD_STRING playComputer()
79660: PPUSH
79661: CALL_OW 559
// if not tmp then
79665: LD_VAR 0 2
79669: NOT
79670: IFFALSE 79674
// exit ;
79672: GO 79728
// for i in tmp do
79674: LD_ADDR_VAR 0 1
79678: PUSH
79679: LD_VAR 0 2
79683: PUSH
79684: FOR_IN
79685: IFFALSE 79726
// for j := 1 to 4 do
79687: LD_ADDR_VAR 0 3
79691: PUSH
79692: DOUBLE
79693: LD_INT 1
79695: DEC
79696: ST_TO_ADDR
79697: LD_INT 4
79699: PUSH
79700: FOR_TO
79701: IFFALSE 79722
// SetSkill ( i , j , 10 ) ;
79703: LD_VAR 0 1
79707: PPUSH
79708: LD_VAR 0 3
79712: PPUSH
79713: LD_INT 10
79715: PPUSH
79716: CALL_OW 237
79720: GO 79700
79722: POP
79723: POP
79724: GO 79684
79726: POP
79727: POP
// end ;
79728: PPOPN 3
79730: END
// every 0 0$1 trigger s30 do var i , tmp ;
79731: LD_EXP 102
79735: IFFALSE 79804
79737: GO 79739
79739: DISABLE
79740: LD_INT 0
79742: PPUSH
79743: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79744: LD_ADDR_VAR 0 2
79748: PUSH
79749: LD_INT 22
79751: PUSH
79752: LD_OWVAR 2
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PPUSH
79761: CALL_OW 69
79765: ST_TO_ADDR
// if not tmp then
79766: LD_VAR 0 2
79770: NOT
79771: IFFALSE 79775
// exit ;
79773: GO 79804
// for i in tmp do
79775: LD_ADDR_VAR 0 1
79779: PUSH
79780: LD_VAR 0 2
79784: PUSH
79785: FOR_IN
79786: IFFALSE 79802
// SetLives ( i , 300 ) ;
79788: LD_VAR 0 1
79792: PPUSH
79793: LD_INT 300
79795: PPUSH
79796: CALL_OW 234
79800: GO 79785
79802: POP
79803: POP
// end ;
79804: PPOPN 2
79806: END
// every 0 0$1 trigger s60 do var i , tmp ;
79807: LD_EXP 103
79811: IFFALSE 79880
79813: GO 79815
79815: DISABLE
79816: LD_INT 0
79818: PPUSH
79819: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79820: LD_ADDR_VAR 0 2
79824: PUSH
79825: LD_INT 22
79827: PUSH
79828: LD_OWVAR 2
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: PPUSH
79837: CALL_OW 69
79841: ST_TO_ADDR
// if not tmp then
79842: LD_VAR 0 2
79846: NOT
79847: IFFALSE 79851
// exit ;
79849: GO 79880
// for i in tmp do
79851: LD_ADDR_VAR 0 1
79855: PUSH
79856: LD_VAR 0 2
79860: PUSH
79861: FOR_IN
79862: IFFALSE 79878
// SetLives ( i , 600 ) ;
79864: LD_VAR 0 1
79868: PPUSH
79869: LD_INT 600
79871: PPUSH
79872: CALL_OW 234
79876: GO 79861
79878: POP
79879: POP
// end ;
79880: PPOPN 2
79882: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79883: LD_INT 0
79885: PPUSH
// case cmd of 301 :
79886: LD_VAR 0 1
79890: PUSH
79891: LD_INT 301
79893: DOUBLE
79894: EQUAL
79895: IFTRUE 79899
79897: GO 79931
79899: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79900: LD_VAR 0 6
79904: PPUSH
79905: LD_VAR 0 7
79909: PPUSH
79910: LD_VAR 0 8
79914: PPUSH
79915: LD_VAR 0 4
79919: PPUSH
79920: LD_VAR 0 5
79924: PPUSH
79925: CALL 81144 0 5
79929: GO 80052
79931: LD_INT 302
79933: DOUBLE
79934: EQUAL
79935: IFTRUE 79939
79937: GO 79976
79939: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79940: LD_VAR 0 6
79944: PPUSH
79945: LD_VAR 0 7
79949: PPUSH
79950: LD_VAR 0 8
79954: PPUSH
79955: LD_VAR 0 9
79959: PPUSH
79960: LD_VAR 0 4
79964: PPUSH
79965: LD_VAR 0 5
79969: PPUSH
79970: CALL 81235 0 6
79974: GO 80052
79976: LD_INT 303
79978: DOUBLE
79979: EQUAL
79980: IFTRUE 79984
79982: GO 80021
79984: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79985: LD_VAR 0 6
79989: PPUSH
79990: LD_VAR 0 7
79994: PPUSH
79995: LD_VAR 0 8
79999: PPUSH
80000: LD_VAR 0 9
80004: PPUSH
80005: LD_VAR 0 4
80009: PPUSH
80010: LD_VAR 0 5
80014: PPUSH
80015: CALL 80057 0 6
80019: GO 80052
80021: LD_INT 304
80023: DOUBLE
80024: EQUAL
80025: IFTRUE 80029
80027: GO 80051
80029: POP
// hHackTeleport ( unit , x , y ) ; end ;
80030: LD_VAR 0 2
80034: PPUSH
80035: LD_VAR 0 4
80039: PPUSH
80040: LD_VAR 0 5
80044: PPUSH
80045: CALL 81828 0 3
80049: GO 80052
80051: POP
// end ;
80052: LD_VAR 0 12
80056: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80057: LD_INT 0
80059: PPUSH
80060: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80061: LD_VAR 0 1
80065: PUSH
80066: LD_INT 1
80068: LESS
80069: IFTRUE 80081
80071: PUSH
80072: LD_VAR 0 1
80076: PUSH
80077: LD_INT 3
80079: GREATER
80080: OR
80081: IFTRUE 80099
80083: PUSH
80084: LD_VAR 0 5
80088: PPUSH
80089: LD_VAR 0 6
80093: PPUSH
80094: CALL_OW 428
80098: OR
80099: IFFALSE 80103
// exit ;
80101: GO 80831
// uc_side := your_side ;
80103: LD_ADDR_OWVAR 20
80107: PUSH
80108: LD_OWVAR 2
80112: ST_TO_ADDR
// uc_nation := nation ;
80113: LD_ADDR_OWVAR 21
80117: PUSH
80118: LD_VAR 0 1
80122: ST_TO_ADDR
// bc_level = 1 ;
80123: LD_ADDR_OWVAR 43
80127: PUSH
80128: LD_INT 1
80130: ST_TO_ADDR
// case btype of 1 :
80131: LD_VAR 0 2
80135: PUSH
80136: LD_INT 1
80138: DOUBLE
80139: EQUAL
80140: IFTRUE 80144
80142: GO 80155
80144: POP
// bc_type := b_depot ; 2 :
80145: LD_ADDR_OWVAR 42
80149: PUSH
80150: LD_INT 0
80152: ST_TO_ADDR
80153: GO 80775
80155: LD_INT 2
80157: DOUBLE
80158: EQUAL
80159: IFTRUE 80163
80161: GO 80174
80163: POP
// bc_type := b_warehouse ; 3 :
80164: LD_ADDR_OWVAR 42
80168: PUSH
80169: LD_INT 1
80171: ST_TO_ADDR
80172: GO 80775
80174: LD_INT 3
80176: DOUBLE
80177: EQUAL
80178: IFTRUE 80182
80180: GO 80193
80182: POP
// bc_type := b_lab ; 4 .. 9 :
80183: LD_ADDR_OWVAR 42
80187: PUSH
80188: LD_INT 6
80190: ST_TO_ADDR
80191: GO 80775
80193: LD_INT 4
80195: DOUBLE
80196: GREATEREQUAL
80197: IFFALSE 80205
80199: LD_INT 9
80201: DOUBLE
80202: LESSEQUAL
80203: IFTRUE 80207
80205: GO 80267
80207: POP
// begin bc_type := b_lab_half ;
80208: LD_ADDR_OWVAR 42
80212: PUSH
80213: LD_INT 7
80215: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80216: LD_ADDR_OWVAR 44
80220: PUSH
80221: LD_INT 10
80223: PUSH
80224: LD_INT 11
80226: PUSH
80227: LD_INT 12
80229: PUSH
80230: LD_INT 15
80232: PUSH
80233: LD_INT 14
80235: PUSH
80236: LD_INT 13
80238: PUSH
80239: EMPTY
80240: LIST
80241: LIST
80242: LIST
80243: LIST
80244: LIST
80245: LIST
80246: PUSH
80247: LD_VAR 0 2
80251: PUSH
80252: LD_INT 3
80254: MINUS
80255: ARRAY
80256: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
80257: LD_ADDR_OWVAR 45
80261: PUSH
80262: LD_INT 9
80264: ST_TO_ADDR
// end ; 10 .. 13 :
80265: GO 80775
80267: LD_INT 10
80269: DOUBLE
80270: GREATEREQUAL
80271: IFFALSE 80279
80273: LD_INT 13
80275: DOUBLE
80276: LESSEQUAL
80277: IFTRUE 80281
80279: GO 80358
80281: POP
// begin bc_type := b_lab_full ;
80282: LD_ADDR_OWVAR 42
80286: PUSH
80287: LD_INT 8
80289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80290: LD_ADDR_OWVAR 44
80294: PUSH
80295: LD_INT 10
80297: PUSH
80298: LD_INT 12
80300: PUSH
80301: LD_INT 14
80303: PUSH
80304: LD_INT 13
80306: PUSH
80307: EMPTY
80308: LIST
80309: LIST
80310: LIST
80311: LIST
80312: PUSH
80313: LD_VAR 0 2
80317: PUSH
80318: LD_INT 9
80320: MINUS
80321: ARRAY
80322: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80323: LD_ADDR_OWVAR 45
80327: PUSH
80328: LD_INT 11
80330: PUSH
80331: LD_INT 15
80333: PUSH
80334: LD_INT 12
80336: PUSH
80337: LD_INT 15
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: LIST
80344: LIST
80345: PUSH
80346: LD_VAR 0 2
80350: PUSH
80351: LD_INT 9
80353: MINUS
80354: ARRAY
80355: ST_TO_ADDR
// end ; 14 :
80356: GO 80775
80358: LD_INT 14
80360: DOUBLE
80361: EQUAL
80362: IFTRUE 80366
80364: GO 80377
80366: POP
// bc_type := b_workshop ; 15 :
80367: LD_ADDR_OWVAR 42
80371: PUSH
80372: LD_INT 2
80374: ST_TO_ADDR
80375: GO 80775
80377: LD_INT 15
80379: DOUBLE
80380: EQUAL
80381: IFTRUE 80385
80383: GO 80396
80385: POP
// bc_type := b_factory ; 16 :
80386: LD_ADDR_OWVAR 42
80390: PUSH
80391: LD_INT 3
80393: ST_TO_ADDR
80394: GO 80775
80396: LD_INT 16
80398: DOUBLE
80399: EQUAL
80400: IFTRUE 80404
80402: GO 80415
80404: POP
// bc_type := b_ext_gun ; 17 :
80405: LD_ADDR_OWVAR 42
80409: PUSH
80410: LD_INT 17
80412: ST_TO_ADDR
80413: GO 80775
80415: LD_INT 17
80417: DOUBLE
80418: EQUAL
80419: IFTRUE 80423
80421: GO 80451
80423: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80424: LD_ADDR_OWVAR 42
80428: PUSH
80429: LD_INT 19
80431: PUSH
80432: LD_INT 23
80434: PUSH
80435: LD_INT 19
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: LIST
80442: PUSH
80443: LD_VAR 0 1
80447: ARRAY
80448: ST_TO_ADDR
80449: GO 80775
80451: LD_INT 18
80453: DOUBLE
80454: EQUAL
80455: IFTRUE 80459
80457: GO 80470
80459: POP
// bc_type := b_ext_radar ; 19 :
80460: LD_ADDR_OWVAR 42
80464: PUSH
80465: LD_INT 20
80467: ST_TO_ADDR
80468: GO 80775
80470: LD_INT 19
80472: DOUBLE
80473: EQUAL
80474: IFTRUE 80478
80476: GO 80489
80478: POP
// bc_type := b_ext_radio ; 20 :
80479: LD_ADDR_OWVAR 42
80483: PUSH
80484: LD_INT 22
80486: ST_TO_ADDR
80487: GO 80775
80489: LD_INT 20
80491: DOUBLE
80492: EQUAL
80493: IFTRUE 80497
80495: GO 80508
80497: POP
// bc_type := b_ext_siberium ; 21 :
80498: LD_ADDR_OWVAR 42
80502: PUSH
80503: LD_INT 21
80505: ST_TO_ADDR
80506: GO 80775
80508: LD_INT 21
80510: DOUBLE
80511: EQUAL
80512: IFTRUE 80516
80514: GO 80527
80516: POP
// bc_type := b_ext_computer ; 22 :
80517: LD_ADDR_OWVAR 42
80521: PUSH
80522: LD_INT 24
80524: ST_TO_ADDR
80525: GO 80775
80527: LD_INT 22
80529: DOUBLE
80530: EQUAL
80531: IFTRUE 80535
80533: GO 80546
80535: POP
// bc_type := b_ext_track ; 23 :
80536: LD_ADDR_OWVAR 42
80540: PUSH
80541: LD_INT 16
80543: ST_TO_ADDR
80544: GO 80775
80546: LD_INT 23
80548: DOUBLE
80549: EQUAL
80550: IFTRUE 80554
80552: GO 80565
80554: POP
// bc_type := b_ext_laser ; 24 :
80555: LD_ADDR_OWVAR 42
80559: PUSH
80560: LD_INT 25
80562: ST_TO_ADDR
80563: GO 80775
80565: LD_INT 24
80567: DOUBLE
80568: EQUAL
80569: IFTRUE 80573
80571: GO 80584
80573: POP
// bc_type := b_control_tower ; 25 :
80574: LD_ADDR_OWVAR 42
80578: PUSH
80579: LD_INT 36
80581: ST_TO_ADDR
80582: GO 80775
80584: LD_INT 25
80586: DOUBLE
80587: EQUAL
80588: IFTRUE 80592
80590: GO 80603
80592: POP
// bc_type := b_breastwork ; 26 :
80593: LD_ADDR_OWVAR 42
80597: PUSH
80598: LD_INT 31
80600: ST_TO_ADDR
80601: GO 80775
80603: LD_INT 26
80605: DOUBLE
80606: EQUAL
80607: IFTRUE 80611
80609: GO 80622
80611: POP
// bc_type := b_bunker ; 27 :
80612: LD_ADDR_OWVAR 42
80616: PUSH
80617: LD_INT 32
80619: ST_TO_ADDR
80620: GO 80775
80622: LD_INT 27
80624: DOUBLE
80625: EQUAL
80626: IFTRUE 80630
80628: GO 80641
80630: POP
// bc_type := b_turret ; 28 :
80631: LD_ADDR_OWVAR 42
80635: PUSH
80636: LD_INT 33
80638: ST_TO_ADDR
80639: GO 80775
80641: LD_INT 28
80643: DOUBLE
80644: EQUAL
80645: IFTRUE 80649
80647: GO 80660
80649: POP
// bc_type := b_armoury ; 29 :
80650: LD_ADDR_OWVAR 42
80654: PUSH
80655: LD_INT 4
80657: ST_TO_ADDR
80658: GO 80775
80660: LD_INT 29
80662: DOUBLE
80663: EQUAL
80664: IFTRUE 80668
80666: GO 80679
80668: POP
// bc_type := b_barracks ; 30 :
80669: LD_ADDR_OWVAR 42
80673: PUSH
80674: LD_INT 5
80676: ST_TO_ADDR
80677: GO 80775
80679: LD_INT 30
80681: DOUBLE
80682: EQUAL
80683: IFTRUE 80687
80685: GO 80698
80687: POP
// bc_type := b_solar_power ; 31 :
80688: LD_ADDR_OWVAR 42
80692: PUSH
80693: LD_INT 27
80695: ST_TO_ADDR
80696: GO 80775
80698: LD_INT 31
80700: DOUBLE
80701: EQUAL
80702: IFTRUE 80706
80704: GO 80717
80706: POP
// bc_type := b_oil_power ; 32 :
80707: LD_ADDR_OWVAR 42
80711: PUSH
80712: LD_INT 26
80714: ST_TO_ADDR
80715: GO 80775
80717: LD_INT 32
80719: DOUBLE
80720: EQUAL
80721: IFTRUE 80725
80723: GO 80736
80725: POP
// bc_type := b_siberite_power ; 33 :
80726: LD_ADDR_OWVAR 42
80730: PUSH
80731: LD_INT 28
80733: ST_TO_ADDR
80734: GO 80775
80736: LD_INT 33
80738: DOUBLE
80739: EQUAL
80740: IFTRUE 80744
80742: GO 80755
80744: POP
// bc_type := b_oil_mine ; 34 :
80745: LD_ADDR_OWVAR 42
80749: PUSH
80750: LD_INT 29
80752: ST_TO_ADDR
80753: GO 80775
80755: LD_INT 34
80757: DOUBLE
80758: EQUAL
80759: IFTRUE 80763
80761: GO 80774
80763: POP
// bc_type := b_siberite_mine ; end ;
80764: LD_ADDR_OWVAR 42
80768: PUSH
80769: LD_INT 30
80771: ST_TO_ADDR
80772: GO 80775
80774: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
80775: LD_ADDR_VAR 0 8
80779: PUSH
80780: LD_VAR 0 5
80784: PPUSH
80785: LD_VAR 0 6
80789: PPUSH
80790: LD_VAR 0 3
80794: PPUSH
80795: CALL_OW 47
80799: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
80800: LD_OWVAR 42
80804: PUSH
80805: LD_INT 32
80807: PUSH
80808: LD_INT 33
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: IN
80815: IFFALSE 80831
// PlaceWeaponTurret ( b , weapon ) ;
80817: LD_VAR 0 8
80821: PPUSH
80822: LD_VAR 0 4
80826: PPUSH
80827: CALL_OW 431
// end ;
80831: LD_VAR 0 7
80835: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
80836: LD_INT 0
80838: PPUSH
80839: PPUSH
80840: PPUSH
80841: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80842: LD_ADDR_VAR 0 4
80846: PUSH
80847: LD_INT 22
80849: PUSH
80850: LD_OWVAR 2
80854: PUSH
80855: EMPTY
80856: LIST
80857: LIST
80858: PUSH
80859: LD_INT 2
80861: PUSH
80862: LD_INT 30
80864: PUSH
80865: LD_INT 0
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: PUSH
80872: LD_INT 30
80874: PUSH
80875: LD_INT 1
80877: PUSH
80878: EMPTY
80879: LIST
80880: LIST
80881: PUSH
80882: EMPTY
80883: LIST
80884: LIST
80885: LIST
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PPUSH
80891: CALL_OW 69
80895: ST_TO_ADDR
// if not tmp then
80896: LD_VAR 0 4
80900: NOT
80901: IFFALSE 80905
// exit ;
80903: GO 80964
// for i in tmp do
80905: LD_ADDR_VAR 0 2
80909: PUSH
80910: LD_VAR 0 4
80914: PUSH
80915: FOR_IN
80916: IFFALSE 80962
// for j = 1 to 3 do
80918: LD_ADDR_VAR 0 3
80922: PUSH
80923: DOUBLE
80924: LD_INT 1
80926: DEC
80927: ST_TO_ADDR
80928: LD_INT 3
80930: PUSH
80931: FOR_TO
80932: IFFALSE 80958
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80934: LD_VAR 0 2
80938: PPUSH
80939: CALL_OW 274
80943: PPUSH
80944: LD_VAR 0 3
80948: PPUSH
80949: LD_INT 99999
80951: PPUSH
80952: CALL_OW 277
80956: GO 80931
80958: POP
80959: POP
80960: GO 80915
80962: POP
80963: POP
// end ;
80964: LD_VAR 0 1
80968: RET
// export function hHackSetLevel10 ; var i , j ; begin
80969: LD_INT 0
80971: PPUSH
80972: PPUSH
80973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80974: LD_ADDR_VAR 0 2
80978: PUSH
80979: LD_INT 21
80981: PUSH
80982: LD_INT 1
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PPUSH
80989: CALL_OW 69
80993: PUSH
80994: FOR_IN
80995: IFFALSE 81047
// if IsSelected ( i ) then
80997: LD_VAR 0 2
81001: PPUSH
81002: CALL_OW 306
81006: IFFALSE 81045
// begin for j := 1 to 4 do
81008: LD_ADDR_VAR 0 3
81012: PUSH
81013: DOUBLE
81014: LD_INT 1
81016: DEC
81017: ST_TO_ADDR
81018: LD_INT 4
81020: PUSH
81021: FOR_TO
81022: IFFALSE 81043
// SetSkill ( i , j , 10 ) ;
81024: LD_VAR 0 2
81028: PPUSH
81029: LD_VAR 0 3
81033: PPUSH
81034: LD_INT 10
81036: PPUSH
81037: CALL_OW 237
81041: GO 81021
81043: POP
81044: POP
// end ;
81045: GO 80994
81047: POP
81048: POP
// end ;
81049: LD_VAR 0 1
81053: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81054: LD_INT 0
81056: PPUSH
81057: PPUSH
81058: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81059: LD_ADDR_VAR 0 2
81063: PUSH
81064: LD_INT 22
81066: PUSH
81067: LD_OWVAR 2
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: PUSH
81076: LD_INT 21
81078: PUSH
81079: LD_INT 1
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PUSH
81086: EMPTY
81087: LIST
81088: LIST
81089: PPUSH
81090: CALL_OW 69
81094: PUSH
81095: FOR_IN
81096: IFFALSE 81137
// begin for j := 1 to 4 do
81098: LD_ADDR_VAR 0 3
81102: PUSH
81103: DOUBLE
81104: LD_INT 1
81106: DEC
81107: ST_TO_ADDR
81108: LD_INT 4
81110: PUSH
81111: FOR_TO
81112: IFFALSE 81133
// SetSkill ( i , j , 10 ) ;
81114: LD_VAR 0 2
81118: PPUSH
81119: LD_VAR 0 3
81123: PPUSH
81124: LD_INT 10
81126: PPUSH
81127: CALL_OW 237
81131: GO 81111
81133: POP
81134: POP
// end ;
81135: GO 81095
81137: POP
81138: POP
// end ;
81139: LD_VAR 0 1
81143: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81144: LD_INT 0
81146: PPUSH
// uc_side := your_side ;
81147: LD_ADDR_OWVAR 20
81151: PUSH
81152: LD_OWVAR 2
81156: ST_TO_ADDR
// uc_nation := nation ;
81157: LD_ADDR_OWVAR 21
81161: PUSH
81162: LD_VAR 0 1
81166: ST_TO_ADDR
// InitHc ;
81167: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81171: LD_INT 0
81173: PPUSH
81174: LD_VAR 0 2
81178: PPUSH
81179: LD_VAR 0 3
81183: PPUSH
81184: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81188: LD_VAR 0 4
81192: PPUSH
81193: LD_VAR 0 5
81197: PPUSH
81198: CALL_OW 428
81202: PUSH
81203: LD_INT 0
81205: EQUAL
81206: IFFALSE 81230
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81208: CALL_OW 44
81212: PPUSH
81213: LD_VAR 0 4
81217: PPUSH
81218: LD_VAR 0 5
81222: PPUSH
81223: LD_INT 1
81225: PPUSH
81226: CALL_OW 48
// end ;
81230: LD_VAR 0 6
81234: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81235: LD_INT 0
81237: PPUSH
81238: PPUSH
// uc_side := your_side ;
81239: LD_ADDR_OWVAR 20
81243: PUSH
81244: LD_OWVAR 2
81248: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81249: LD_VAR 0 1
81253: PUSH
81254: LD_INT 1
81256: PUSH
81257: LD_INT 2
81259: PUSH
81260: LD_INT 3
81262: PUSH
81263: LD_INT 4
81265: PUSH
81266: LD_INT 5
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: LIST
81273: LIST
81274: LIST
81275: IN
81276: IFFALSE 81288
// uc_nation := nation_american else
81278: LD_ADDR_OWVAR 21
81282: PUSH
81283: LD_INT 1
81285: ST_TO_ADDR
81286: GO 81331
// if chassis in [ 11 , 12 , 13 , 14 ] then
81288: LD_VAR 0 1
81292: PUSH
81293: LD_INT 11
81295: PUSH
81296: LD_INT 12
81298: PUSH
81299: LD_INT 13
81301: PUSH
81302: LD_INT 14
81304: PUSH
81305: EMPTY
81306: LIST
81307: LIST
81308: LIST
81309: LIST
81310: IN
81311: IFFALSE 81323
// uc_nation := nation_arabian else
81313: LD_ADDR_OWVAR 21
81317: PUSH
81318: LD_INT 2
81320: ST_TO_ADDR
81321: GO 81331
// uc_nation := nation_russian ;
81323: LD_ADDR_OWVAR 21
81327: PUSH
81328: LD_INT 3
81330: ST_TO_ADDR
// vc_chassis := chassis ;
81331: LD_ADDR_OWVAR 37
81335: PUSH
81336: LD_VAR 0 1
81340: ST_TO_ADDR
// vc_engine := engine ;
81341: LD_ADDR_OWVAR 39
81345: PUSH
81346: LD_VAR 0 2
81350: ST_TO_ADDR
// vc_control := control ;
81351: LD_ADDR_OWVAR 38
81355: PUSH
81356: LD_VAR 0 3
81360: ST_TO_ADDR
// vc_weapon := weapon ;
81361: LD_ADDR_OWVAR 40
81365: PUSH
81366: LD_VAR 0 4
81370: ST_TO_ADDR
// un := CreateVehicle ;
81371: LD_ADDR_VAR 0 8
81375: PUSH
81376: CALL_OW 45
81380: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81381: LD_VAR 0 8
81385: PPUSH
81386: LD_INT 0
81388: PPUSH
81389: LD_INT 5
81391: PPUSH
81392: CALL_OW 12
81396: PPUSH
81397: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81401: LD_VAR 0 8
81405: PPUSH
81406: LD_VAR 0 5
81410: PPUSH
81411: LD_VAR 0 6
81415: PPUSH
81416: LD_INT 1
81418: PPUSH
81419: CALL_OW 48
// end ;
81423: LD_VAR 0 7
81427: RET
// export hInvincible ; every 1 do
81428: GO 81430
81430: DISABLE
// hInvincible := [ ] ;
81431: LD_ADDR_EXP 104
81435: PUSH
81436: EMPTY
81437: ST_TO_ADDR
81438: END
// every 10 do var i ;
81439: GO 81441
81441: DISABLE
81442: LD_INT 0
81444: PPUSH
// begin enable ;
81445: ENABLE
// if not hInvincible then
81446: LD_EXP 104
81450: NOT
81451: IFFALSE 81455
// exit ;
81453: GO 81499
// for i in hInvincible do
81455: LD_ADDR_VAR 0 1
81459: PUSH
81460: LD_EXP 104
81464: PUSH
81465: FOR_IN
81466: IFFALSE 81497
// if GetLives ( i ) < 1000 then
81468: LD_VAR 0 1
81472: PPUSH
81473: CALL_OW 256
81477: PUSH
81478: LD_INT 1000
81480: LESS
81481: IFFALSE 81495
// SetLives ( i , 1000 ) ;
81483: LD_VAR 0 1
81487: PPUSH
81488: LD_INT 1000
81490: PPUSH
81491: CALL_OW 234
81495: GO 81465
81497: POP
81498: POP
// end ;
81499: PPOPN 1
81501: END
// export function hHackInvincible ; var i ; begin
81502: LD_INT 0
81504: PPUSH
81505: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81506: LD_ADDR_VAR 0 2
81510: PUSH
81511: LD_INT 2
81513: PUSH
81514: LD_INT 21
81516: PUSH
81517: LD_INT 1
81519: PUSH
81520: EMPTY
81521: LIST
81522: LIST
81523: PUSH
81524: LD_INT 21
81526: PUSH
81527: LD_INT 2
81529: PUSH
81530: EMPTY
81531: LIST
81532: LIST
81533: PUSH
81534: EMPTY
81535: LIST
81536: LIST
81537: LIST
81538: PPUSH
81539: CALL_OW 69
81543: PUSH
81544: FOR_IN
81545: IFFALSE 81606
// if IsSelected ( i ) then
81547: LD_VAR 0 2
81551: PPUSH
81552: CALL_OW 306
81556: IFFALSE 81604
// begin if i in hInvincible then
81558: LD_VAR 0 2
81562: PUSH
81563: LD_EXP 104
81567: IN
81568: IFFALSE 81588
// hInvincible := hInvincible diff i else
81570: LD_ADDR_EXP 104
81574: PUSH
81575: LD_EXP 104
81579: PUSH
81580: LD_VAR 0 2
81584: DIFF
81585: ST_TO_ADDR
81586: GO 81604
// hInvincible := hInvincible union i ;
81588: LD_ADDR_EXP 104
81592: PUSH
81593: LD_EXP 104
81597: PUSH
81598: LD_VAR 0 2
81602: UNION
81603: ST_TO_ADDR
// end ;
81604: GO 81544
81606: POP
81607: POP
// end ;
81608: LD_VAR 0 1
81612: RET
// export function hHackInvisible ; var i , j ; begin
81613: LD_INT 0
81615: PPUSH
81616: PPUSH
81617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81618: LD_ADDR_VAR 0 2
81622: PUSH
81623: LD_INT 21
81625: PUSH
81626: LD_INT 1
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PPUSH
81633: CALL_OW 69
81637: PUSH
81638: FOR_IN
81639: IFFALSE 81663
// if IsSelected ( i ) then
81641: LD_VAR 0 2
81645: PPUSH
81646: CALL_OW 306
81650: IFFALSE 81661
// ComForceInvisible ( i ) ;
81652: LD_VAR 0 2
81656: PPUSH
81657: CALL_OW 496
81661: GO 81638
81663: POP
81664: POP
// end ;
81665: LD_VAR 0 1
81669: RET
// export function hHackChangeYourSide ; begin
81670: LD_INT 0
81672: PPUSH
// if your_side = 8 then
81673: LD_OWVAR 2
81677: PUSH
81678: LD_INT 8
81680: EQUAL
81681: IFFALSE 81693
// your_side := 0 else
81683: LD_ADDR_OWVAR 2
81687: PUSH
81688: LD_INT 0
81690: ST_TO_ADDR
81691: GO 81707
// your_side := your_side + 1 ;
81693: LD_ADDR_OWVAR 2
81697: PUSH
81698: LD_OWVAR 2
81702: PUSH
81703: LD_INT 1
81705: PLUS
81706: ST_TO_ADDR
// end ;
81707: LD_VAR 0 1
81711: RET
// export function hHackChangeUnitSide ; var i , j ; begin
81712: LD_INT 0
81714: PPUSH
81715: PPUSH
81716: PPUSH
// for i in all_units do
81717: LD_ADDR_VAR 0 2
81721: PUSH
81722: LD_OWVAR 3
81726: PUSH
81727: FOR_IN
81728: IFFALSE 81806
// if IsSelected ( i ) then
81730: LD_VAR 0 2
81734: PPUSH
81735: CALL_OW 306
81739: IFFALSE 81804
// begin j := GetSide ( i ) ;
81741: LD_ADDR_VAR 0 3
81745: PUSH
81746: LD_VAR 0 2
81750: PPUSH
81751: CALL_OW 255
81755: ST_TO_ADDR
// if j = 8 then
81756: LD_VAR 0 3
81760: PUSH
81761: LD_INT 8
81763: EQUAL
81764: IFFALSE 81776
// j := 0 else
81766: LD_ADDR_VAR 0 3
81770: PUSH
81771: LD_INT 0
81773: ST_TO_ADDR
81774: GO 81790
// j := j + 1 ;
81776: LD_ADDR_VAR 0 3
81780: PUSH
81781: LD_VAR 0 3
81785: PUSH
81786: LD_INT 1
81788: PLUS
81789: ST_TO_ADDR
// SetSide ( i , j ) ;
81790: LD_VAR 0 2
81794: PPUSH
81795: LD_VAR 0 3
81799: PPUSH
81800: CALL_OW 235
// end ;
81804: GO 81727
81806: POP
81807: POP
// end ;
81808: LD_VAR 0 1
81812: RET
// export function hHackFog ; begin
81813: LD_INT 0
81815: PPUSH
// FogOff ( true ) ;
81816: LD_INT 1
81818: PPUSH
81819: CALL_OW 344
// end ;
81823: LD_VAR 0 1
81827: RET
// export function hHackTeleport ( unit , x , y ) ; begin
81828: LD_INT 0
81830: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
81831: LD_VAR 0 1
81835: PPUSH
81836: LD_VAR 0 2
81840: PPUSH
81841: LD_VAR 0 3
81845: PPUSH
81846: LD_INT 1
81848: PPUSH
81849: LD_INT 1
81851: PPUSH
81852: CALL_OW 483
// CenterOnXY ( x , y ) ;
81856: LD_VAR 0 2
81860: PPUSH
81861: LD_VAR 0 3
81865: PPUSH
81866: CALL_OW 84
// end ;
81870: LD_VAR 0 4
81874: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81875: LD_INT 0
81877: PPUSH
81878: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81879: LD_VAR 0 1
81883: NOT
81884: IFTRUE 81903
81886: PUSH
81887: LD_VAR 0 2
81891: PPUSH
81892: LD_VAR 0 3
81896: PPUSH
81897: CALL_OW 488
81901: NOT
81902: OR
81903: IFTRUE 81938
81905: PUSH
81906: LD_VAR 0 1
81910: PPUSH
81911: CALL_OW 266
81915: PUSH
81916: LD_INT 3
81918: NONEQUAL
81919: IFFALSE 81937
81921: PUSH
81922: LD_VAR 0 1
81926: PPUSH
81927: CALL_OW 247
81931: PUSH
81932: LD_INT 1
81934: EQUAL
81935: NOT
81936: AND
81937: OR
81938: IFFALSE 81942
// exit ;
81940: GO 82224
// if GetType ( factory ) = unit_human then
81942: LD_VAR 0 1
81946: PPUSH
81947: CALL_OW 247
81951: PUSH
81952: LD_INT 1
81954: EQUAL
81955: IFFALSE 81972
// factory := IsInUnit ( factory ) ;
81957: LD_ADDR_VAR 0 1
81961: PUSH
81962: LD_VAR 0 1
81966: PPUSH
81967: CALL_OW 310
81971: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81972: LD_VAR 0 1
81976: PPUSH
81977: CALL_OW 266
81981: PUSH
81982: LD_INT 3
81984: NONEQUAL
81985: IFFALSE 81989
// exit ;
81987: GO 82224
// for i := 1 to Count ( factoryWaypoints ) do
81989: LD_ADDR_VAR 0 5
81993: PUSH
81994: DOUBLE
81995: LD_INT 1
81997: DEC
81998: ST_TO_ADDR
81999: LD_EXP 105
82003: PPUSH
82004: CALL 19277 0 1
82008: PUSH
82009: FOR_TO
82010: IFFALSE 82172
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
82012: LD_VAR 0 2
82016: PPUSH
82017: LD_VAR 0 3
82021: PPUSH
82022: CALL_OW 428
82026: PUSH
82027: LD_EXP 105
82031: PUSH
82032: LD_VAR 0 5
82036: ARRAY
82037: PUSH
82038: LD_INT 2
82040: ARRAY
82041: EQUAL
82042: IFFALSE 82074
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
82044: LD_ADDR_EXP 105
82048: PUSH
82049: LD_EXP 105
82053: PPUSH
82054: LD_VAR 0 5
82058: PPUSH
82059: CALL_OW 3
82063: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82064: CALL 82229 0 0
// exit ;
82068: POP
82069: POP
82070: GO 82224
// end else
82072: GO 82170
// if factory = factoryWaypoints [ i ] [ 2 ] then
82074: LD_VAR 0 1
82078: PUSH
82079: LD_EXP 105
82083: PUSH
82084: LD_VAR 0 5
82088: ARRAY
82089: PUSH
82090: LD_INT 2
82092: ARRAY
82093: EQUAL
82094: IFFALSE 82170
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
82096: LD_ADDR_EXP 105
82100: PUSH
82101: LD_EXP 105
82105: PPUSH
82106: LD_VAR 0 5
82110: PPUSH
82111: CALL_OW 3
82115: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
82116: LD_ADDR_EXP 105
82120: PUSH
82121: LD_EXP 105
82125: PPUSH
82126: LD_VAR 0 1
82130: PPUSH
82131: CALL_OW 255
82135: PUSH
82136: LD_VAR 0 1
82140: PUSH
82141: LD_VAR 0 2
82145: PUSH
82146: LD_VAR 0 3
82150: PUSH
82151: EMPTY
82152: LIST
82153: LIST
82154: LIST
82155: LIST
82156: PPUSH
82157: CALL 55253 0 2
82161: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82162: CALL 82229 0 0
// exit ;
82166: POP
82167: POP
82168: GO 82224
// end ; end ;
82170: GO 82009
82172: POP
82173: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
82174: LD_ADDR_EXP 105
82178: PUSH
82179: LD_EXP 105
82183: PPUSH
82184: LD_VAR 0 1
82188: PPUSH
82189: CALL_OW 255
82193: PUSH
82194: LD_VAR 0 1
82198: PUSH
82199: LD_VAR 0 2
82203: PUSH
82204: LD_VAR 0 3
82208: PUSH
82209: EMPTY
82210: LIST
82211: LIST
82212: LIST
82213: LIST
82214: PPUSH
82215: CALL 55253 0 2
82219: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82220: CALL 82229 0 0
// end ;
82224: LD_VAR 0 4
82228: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82229: LD_INT 0
82231: PPUSH
82232: PPUSH
82233: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82234: LD_STRING resetFactoryWaypoint();
82236: PPUSH
82237: CALL_OW 559
// if factoryWaypoints then
82241: LD_EXP 105
82245: IFFALSE 82366
// begin list := factoryWaypoints ;
82247: LD_ADDR_VAR 0 3
82251: PUSH
82252: LD_EXP 105
82256: ST_TO_ADDR
// for i := 1 to list do
82257: LD_ADDR_VAR 0 2
82261: PUSH
82262: DOUBLE
82263: LD_INT 1
82265: DEC
82266: ST_TO_ADDR
82267: LD_VAR 0 3
82271: PUSH
82272: FOR_TO
82273: IFFALSE 82364
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82275: LD_STRING setFactoryWaypointXY(
82277: PUSH
82278: LD_VAR 0 3
82282: PUSH
82283: LD_VAR 0 2
82287: ARRAY
82288: PUSH
82289: LD_INT 1
82291: ARRAY
82292: STR
82293: PUSH
82294: LD_STRING ,
82296: STR
82297: PUSH
82298: LD_VAR 0 3
82302: PUSH
82303: LD_VAR 0 2
82307: ARRAY
82308: PUSH
82309: LD_INT 2
82311: ARRAY
82312: STR
82313: PUSH
82314: LD_STRING ,
82316: STR
82317: PUSH
82318: LD_VAR 0 3
82322: PUSH
82323: LD_VAR 0 2
82327: ARRAY
82328: PUSH
82329: LD_INT 3
82331: ARRAY
82332: STR
82333: PUSH
82334: LD_STRING ,
82336: STR
82337: PUSH
82338: LD_VAR 0 3
82342: PUSH
82343: LD_VAR 0 2
82347: ARRAY
82348: PUSH
82349: LD_INT 4
82351: ARRAY
82352: STR
82353: PUSH
82354: LD_STRING )
82356: STR
82357: PPUSH
82358: CALL_OW 559
82362: GO 82272
82364: POP
82365: POP
// end ; end ;
82366: LD_VAR 0 1
82370: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82371: LD_INT 0
82373: PPUSH
// if HexInfo ( x , y ) = warehouse then
82374: LD_VAR 0 2
82378: PPUSH
82379: LD_VAR 0 3
82383: PPUSH
82384: CALL_OW 428
82388: PUSH
82389: LD_VAR 0 1
82393: EQUAL
82394: IFFALSE 82421
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82396: LD_ADDR_EXP 107
82400: PUSH
82401: LD_EXP 107
82405: PPUSH
82406: LD_VAR 0 1
82410: PPUSH
82411: LD_INT 0
82413: PPUSH
82414: CALL_OW 1
82418: ST_TO_ADDR
82419: GO 82472
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82421: LD_ADDR_EXP 107
82425: PUSH
82426: LD_EXP 107
82430: PPUSH
82431: LD_VAR 0 1
82435: PPUSH
82436: LD_VAR 0 1
82440: PPUSH
82441: CALL_OW 255
82445: PUSH
82446: LD_VAR 0 1
82450: PUSH
82451: LD_VAR 0 2
82455: PUSH
82456: LD_VAR 0 3
82460: PUSH
82461: EMPTY
82462: LIST
82463: LIST
82464: LIST
82465: LIST
82466: PPUSH
82467: CALL_OW 1
82471: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82472: CALL 82481 0 0
// end ;
82476: LD_VAR 0 4
82480: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82481: LD_INT 0
82483: PPUSH
82484: PPUSH
82485: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82486: LD_STRING resetWarehouseGatheringPoints();
82488: PPUSH
82489: CALL_OW 559
// if warehouseGatheringPoints then
82493: LD_EXP 107
82497: IFFALSE 82623
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82499: LD_ADDR_VAR 0 3
82503: PUSH
82504: LD_EXP 107
82508: PPUSH
82509: CALL 59187 0 1
82513: ST_TO_ADDR
// for i := 1 to list do
82514: LD_ADDR_VAR 0 2
82518: PUSH
82519: DOUBLE
82520: LD_INT 1
82522: DEC
82523: ST_TO_ADDR
82524: LD_VAR 0 3
82528: PUSH
82529: FOR_TO
82530: IFFALSE 82621
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82532: LD_STRING setWarehouseGatheringPointXY(
82534: PUSH
82535: LD_VAR 0 3
82539: PUSH
82540: LD_VAR 0 2
82544: ARRAY
82545: PUSH
82546: LD_INT 1
82548: ARRAY
82549: STR
82550: PUSH
82551: LD_STRING ,
82553: STR
82554: PUSH
82555: LD_VAR 0 3
82559: PUSH
82560: LD_VAR 0 2
82564: ARRAY
82565: PUSH
82566: LD_INT 2
82568: ARRAY
82569: STR
82570: PUSH
82571: LD_STRING ,
82573: STR
82574: PUSH
82575: LD_VAR 0 3
82579: PUSH
82580: LD_VAR 0 2
82584: ARRAY
82585: PUSH
82586: LD_INT 3
82588: ARRAY
82589: STR
82590: PUSH
82591: LD_STRING ,
82593: STR
82594: PUSH
82595: LD_VAR 0 3
82599: PUSH
82600: LD_VAR 0 2
82604: ARRAY
82605: PUSH
82606: LD_INT 4
82608: ARRAY
82609: STR
82610: PUSH
82611: LD_STRING )
82613: STR
82614: PPUSH
82615: CALL_OW 559
82619: GO 82529
82621: POP
82622: POP
// end ; end ;
82623: LD_VAR 0 1
82627: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82628: LD_EXP 107
82632: IFFALSE 83327
82634: GO 82636
82636: DISABLE
82637: LD_INT 0
82639: PPUSH
82640: PPUSH
82641: PPUSH
82642: PPUSH
82643: PPUSH
82644: PPUSH
82645: PPUSH
82646: PPUSH
82647: PPUSH
// begin enable ;
82648: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82649: LD_ADDR_VAR 0 3
82653: PUSH
82654: LD_EXP 107
82658: PPUSH
82659: CALL 59187 0 1
82663: ST_TO_ADDR
// if not list then
82664: LD_VAR 0 3
82668: NOT
82669: IFFALSE 82673
// exit ;
82671: GO 83327
// for i := 1 to list do
82673: LD_ADDR_VAR 0 1
82677: PUSH
82678: DOUBLE
82679: LD_INT 1
82681: DEC
82682: ST_TO_ADDR
82683: LD_VAR 0 3
82687: PUSH
82688: FOR_TO
82689: IFFALSE 83325
// begin depot := list [ i ] [ 2 ] ;
82691: LD_ADDR_VAR 0 8
82695: PUSH
82696: LD_VAR 0 3
82700: PUSH
82701: LD_VAR 0 1
82705: ARRAY
82706: PUSH
82707: LD_INT 2
82709: ARRAY
82710: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82711: LD_ADDR_VAR 0 5
82715: PUSH
82716: LD_VAR 0 3
82720: PUSH
82721: LD_VAR 0 1
82725: ARRAY
82726: PUSH
82727: LD_INT 1
82729: ARRAY
82730: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82731: LD_VAR 0 8
82735: PPUSH
82736: CALL_OW 301
82740: IFTRUE 82759
82742: PUSH
82743: LD_VAR 0 5
82747: PUSH
82748: LD_VAR 0 8
82752: PPUSH
82753: CALL_OW 255
82757: NONEQUAL
82758: OR
82759: IFFALSE 82788
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
82761: LD_ADDR_EXP 107
82765: PUSH
82766: LD_EXP 107
82770: PPUSH
82771: LD_VAR 0 8
82775: PPUSH
82776: LD_INT 0
82778: PPUSH
82779: CALL_OW 1
82783: ST_TO_ADDR
// exit ;
82784: POP
82785: POP
82786: GO 83327
// end ; x := list [ i ] [ 3 ] ;
82788: LD_ADDR_VAR 0 6
82792: PUSH
82793: LD_VAR 0 3
82797: PUSH
82798: LD_VAR 0 1
82802: ARRAY
82803: PUSH
82804: LD_INT 3
82806: ARRAY
82807: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
82808: LD_ADDR_VAR 0 7
82812: PUSH
82813: LD_VAR 0 3
82817: PUSH
82818: LD_VAR 0 1
82822: ARRAY
82823: PUSH
82824: LD_INT 4
82826: ARRAY
82827: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
82828: LD_ADDR_VAR 0 9
82832: PUSH
82833: LD_VAR 0 6
82837: PPUSH
82838: LD_VAR 0 7
82842: PPUSH
82843: LD_INT 16
82845: PPUSH
82846: CALL 57761 0 3
82850: ST_TO_ADDR
// if not cratesNearbyPoint then
82851: LD_VAR 0 9
82855: NOT
82856: IFFALSE 82862
// exit ;
82858: POP
82859: POP
82860: GO 83327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
82862: LD_ADDR_VAR 0 4
82866: PUSH
82867: LD_INT 22
82869: PUSH
82870: LD_VAR 0 5
82874: PUSH
82875: EMPTY
82876: LIST
82877: LIST
82878: PUSH
82879: LD_INT 3
82881: PUSH
82882: LD_INT 60
82884: PUSH
82885: EMPTY
82886: LIST
82887: PUSH
82888: EMPTY
82889: LIST
82890: LIST
82891: PUSH
82892: LD_INT 91
82894: PUSH
82895: LD_VAR 0 8
82899: PUSH
82900: LD_INT 6
82902: PUSH
82903: EMPTY
82904: LIST
82905: LIST
82906: LIST
82907: PUSH
82908: LD_INT 2
82910: PUSH
82911: LD_INT 25
82913: PUSH
82914: LD_INT 2
82916: PUSH
82917: EMPTY
82918: LIST
82919: LIST
82920: PUSH
82921: LD_INT 25
82923: PUSH
82924: LD_INT 16
82926: PUSH
82927: EMPTY
82928: LIST
82929: LIST
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: LIST
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: LIST
82940: LIST
82941: PPUSH
82942: CALL_OW 69
82946: PUSH
82947: LD_VAR 0 8
82951: PPUSH
82952: CALL_OW 313
82956: PPUSH
82957: LD_INT 3
82959: PUSH
82960: LD_INT 60
82962: PUSH
82963: EMPTY
82964: LIST
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: PUSH
82970: LD_INT 2
82972: PUSH
82973: LD_INT 25
82975: PUSH
82976: LD_INT 2
82978: PUSH
82979: EMPTY
82980: LIST
82981: LIST
82982: PUSH
82983: LD_INT 25
82985: PUSH
82986: LD_INT 16
82988: PUSH
82989: EMPTY
82990: LIST
82991: LIST
82992: PUSH
82993: EMPTY
82994: LIST
82995: LIST
82996: LIST
82997: PUSH
82998: EMPTY
82999: LIST
83000: LIST
83001: PPUSH
83002: CALL_OW 72
83006: UNION
83007: ST_TO_ADDR
// if tmp then
83008: LD_VAR 0 4
83012: IFFALSE 83092
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83014: LD_ADDR_VAR 0 4
83018: PUSH
83019: LD_VAR 0 4
83023: PPUSH
83024: LD_INT 3
83026: PPUSH
83027: CALL 55568 0 2
83031: ST_TO_ADDR
// for j in tmp do
83032: LD_ADDR_VAR 0 2
83036: PUSH
83037: LD_VAR 0 4
83041: PUSH
83042: FOR_IN
83043: IFFALSE 83086
// begin if IsInUnit ( j ) then
83045: LD_VAR 0 2
83049: PPUSH
83050: CALL_OW 310
83054: IFFALSE 83065
// ComExit ( j ) ;
83056: LD_VAR 0 2
83060: PPUSH
83061: CALL 55651 0 1
// AddComCollect ( j , x , y ) ;
83065: LD_VAR 0 2
83069: PPUSH
83070: LD_VAR 0 6
83074: PPUSH
83075: LD_VAR 0 7
83079: PPUSH
83080: CALL_OW 177
// end ;
83084: GO 83042
83086: POP
83087: POP
// exit ;
83088: POP
83089: POP
83090: GO 83327
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83092: LD_ADDR_VAR 0 4
83096: PUSH
83097: LD_INT 22
83099: PUSH
83100: LD_VAR 0 5
83104: PUSH
83105: EMPTY
83106: LIST
83107: LIST
83108: PUSH
83109: LD_INT 91
83111: PUSH
83112: LD_VAR 0 8
83116: PUSH
83117: LD_INT 8
83119: PUSH
83120: EMPTY
83121: LIST
83122: LIST
83123: LIST
83124: PUSH
83125: LD_INT 2
83127: PUSH
83128: LD_INT 34
83130: PUSH
83131: LD_INT 12
83133: PUSH
83134: EMPTY
83135: LIST
83136: LIST
83137: PUSH
83138: LD_INT 34
83140: PUSH
83141: LD_INT 51
83143: PUSH
83144: EMPTY
83145: LIST
83146: LIST
83147: PUSH
83148: LD_INT 34
83150: PUSH
83151: LD_INT 32
83153: PUSH
83154: EMPTY
83155: LIST
83156: LIST
83157: PUSH
83158: LD_INT 34
83160: PUSH
83161: LD_INT 89
83163: PUSH
83164: EMPTY
83165: LIST
83166: LIST
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: LIST
83172: LIST
83173: LIST
83174: PUSH
83175: EMPTY
83176: LIST
83177: LIST
83178: LIST
83179: PPUSH
83180: CALL_OW 69
83184: ST_TO_ADDR
// if tmp then
83185: LD_VAR 0 4
83189: IFFALSE 83323
// begin for j in tmp do
83191: LD_ADDR_VAR 0 2
83195: PUSH
83196: LD_VAR 0 4
83200: PUSH
83201: FOR_IN
83202: IFFALSE 83321
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83204: LD_VAR 0 2
83208: PPUSH
83209: CALL_OW 262
83213: PUSH
83214: LD_INT 3
83216: EQUAL
83217: IFTRUE 83234
83219: PUSH
83220: LD_VAR 0 2
83224: PPUSH
83225: CALL_OW 261
83229: PUSH
83230: LD_INT 20
83232: GREATER
83233: OR
83234: IFFALSE 83248
83236: PUSH
83237: LD_VAR 0 2
83241: PPUSH
83242: CALL_OW 314
83246: NOT
83247: AND
83248: IFFALSE 83278
83250: PUSH
83251: LD_VAR 0 2
83255: PPUSH
83256: CALL_OW 263
83260: PUSH
83261: LD_INT 1
83263: NONEQUAL
83264: IFTRUE 83277
83266: PUSH
83267: LD_VAR 0 2
83271: PPUSH
83272: CALL_OW 311
83276: OR
83277: AND
83278: IFFALSE 83319
// begin ComCollect ( j , x , y ) ;
83280: LD_VAR 0 2
83284: PPUSH
83285: LD_VAR 0 6
83289: PPUSH
83290: LD_VAR 0 7
83294: PPUSH
83295: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83299: LD_VAR 0 2
83303: PPUSH
83304: LD_VAR 0 8
83308: PPUSH
83309: CALL_OW 172
// exit ;
83313: POP
83314: POP
83315: POP
83316: POP
83317: GO 83327
// end ;
83319: GO 83201
83321: POP
83322: POP
// end ; end ;
83323: GO 82688
83325: POP
83326: POP
// end ; end_of_file
83327: PPOPN 9
83329: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83330: LD_VAR 0 1
83334: PPUSH
83335: LD_VAR 0 2
83339: PPUSH
83340: LD_VAR 0 3
83344: PPUSH
83345: LD_VAR 0 4
83349: PPUSH
83350: LD_VAR 0 5
83354: PPUSH
83355: LD_VAR 0 6
83359: PPUSH
83360: CALL 67423 0 6
// end ;
83364: PPOPN 6
83366: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83367: LD_INT 0
83369: PPUSH
// begin if not units then
83370: LD_VAR 0 1
83374: NOT
83375: IFFALSE 83379
// exit ;
83377: GO 83413
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
83379: LD_VAR 0 1
83383: PPUSH
83384: LD_VAR 0 2
83388: PPUSH
83389: LD_VAR 0 3
83393: PPUSH
83394: LD_VAR 0 4
83398: PPUSH
83399: LD_VAR 0 5
83403: PPUSH
83404: LD_VAR 0 6
83408: PPUSH
83409: CALL 67217 0 6
// end ;
83413: PPOPN 7
83415: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83416: CALL 67303 0 0
// end ; end_of_file
83420: PPOPN 1
83422: END
