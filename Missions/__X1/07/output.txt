// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 69581 0 0
// Init ;
   8: CALL 58 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 443 0 3
// PrepareAmerican ;
  32: CALL 2519 0 0
// PrepareArabian ;
  36: CALL 1237 0 0
// Action ;
  40: CALL 6430 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 06_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 06_
  76: ST_TO_ADDR
// scoutActive := 0 ;
  77: LD_ADDR_EXP 3
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// scoutFailed := false ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutSuccess := false ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// usAttacksAllowed := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usSurrender := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// russianAttack := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasRockets := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// end ; end_of_file
 133: LD_VAR 0 1
 137: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 138: LD_INT 0
 140: PPUSH
// uc_side := side ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_VAR 0 1
 150: ST_TO_ADDR
// uc_nation := nation ;
 151: LD_ADDR_OWVAR 21
 155: PUSH
 156: LD_VAR 0 2
 160: ST_TO_ADDR
// vc_chassis := chassis ;
 161: LD_ADDR_OWVAR 37
 165: PUSH
 166: LD_VAR 0 3
 170: ST_TO_ADDR
// vc_engine := engine ;
 171: LD_ADDR_OWVAR 39
 175: PUSH
 176: LD_VAR 0 4
 180: ST_TO_ADDR
// vc_control := control ;
 181: LD_ADDR_OWVAR 38
 185: PUSH
 186: LD_VAR 0 5
 190: ST_TO_ADDR
// vc_weapon := weapon ;
 191: LD_ADDR_OWVAR 40
 195: PUSH
 196: LD_VAR 0 6
 200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 201: LD_ADDR_OWVAR 41
 205: PUSH
 206: LD_VAR 0 7
 210: ST_TO_ADDR
// result := CreateVehicle ;
 211: LD_ADDR_VAR 0 8
 215: PUSH
 216: CALL_OW 45
 220: ST_TO_ADDR
// end ;
 221: LD_VAR 0 8
 225: RET
// export function SayX ( units , ident ) ; var i ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
// result := false ;
 230: LD_ADDR_VAR 0 3
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// if not units then
 238: LD_VAR 0 1
 242: NOT
 243: IFFALSE 247
// exit ;
 245: GO 301
// for i in units do
 247: LD_ADDR_VAR 0 4
 251: PUSH
 252: LD_VAR 0 1
 256: PUSH
 257: FOR_IN
 258: IFFALSE 299
// if IsOk ( i ) then
 260: LD_VAR 0 4
 264: PPUSH
 265: CALL_OW 302
 269: IFFALSE 297
// begin Say ( i , ident ) ;
 271: LD_VAR 0 4
 275: PPUSH
 276: LD_VAR 0 2
 280: PPUSH
 281: CALL_OW 88
// result := i ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: LD_VAR 0 4
 294: ST_TO_ADDR
// break ;
 295: GO 299
// end ;
 297: GO 257
 299: POP
 300: POP
// end ;
 301: LD_VAR 0 3
 305: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 306: LD_INT 0
 308: PPUSH
 309: PPUSH
// InitUc ;
 310: CALL_OW 18
// InitHc ;
 314: CALL_OW 19
// uc_side := 0 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// uc_nation := 0 ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_INT 0
 333: ST_TO_ADDR
// for i = 1 to amount do
 334: LD_ADDR_VAR 0 4
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_TO
 350: IFFALSE 432
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 352: LD_ADDR_OWVAR 29
 356: PUSH
 357: LD_INT 9
 359: PPUSH
 360: LD_INT 12
 362: PPUSH
 363: CALL_OW 12
 367: PUSH
 368: LD_INT 9
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 12
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 383: LD_ADDR_OWVAR 35
 387: PUSH
 388: LD_INT 1
 390: NEG
 391: PPUSH
 392: LD_INT 1
 394: PPUSH
 395: CALL_OW 12
 399: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 400: LD_INT 0
 402: PPUSH
 403: LD_INT 12
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 413: CALL_OW 44
 417: PPUSH
 418: LD_VAR 0 1
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 49
// end ;
 430: GO 349
 432: POP
 433: POP
// InitHc ;
 434: CALL_OW 19
// end ;
 438: LD_VAR 0 3
 442: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 443: LD_INT 0
 445: PPUSH
 446: PPUSH
// uc_side := 0 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// uc_nation := 0 ;
 455: LD_ADDR_OWVAR 21
 459: PUSH
 460: LD_INT 0
 462: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 ] [ Difficulty ] ) ;
 463: LD_VAR 0 1
 467: PPUSH
 468: LD_INT 9
 470: PUSH
 471: LD_INT 8
 473: PUSH
 474: LD_INT 7
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 306 0 2
// for i := 1 to 4 do
 492: LD_ADDR_VAR 0 5
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 4
 504: PUSH
 505: FOR_TO
 506: IFFALSE 545
// begin hc_class := class_horse ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_EXP 114
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 505
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL 48971 0 3
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function ReverseArray ( array ) ; var i ; begin
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
// if not array then
 951: LD_VAR 0 1
 955: NOT
 956: IFFALSE 960
// exit ;
 958: GO 1018
// result := [ ] ;
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: EMPTY
 966: ST_TO_ADDR
// for i := 1 to array do
 967: LD_ADDR_VAR 0 3
 971: PUSH
 972: DOUBLE
 973: LD_INT 1
 975: DEC
 976: ST_TO_ADDR
 977: LD_VAR 0 1
 981: PUSH
 982: FOR_TO
 983: IFFALSE 1016
// result := Insert ( result , 1 , array [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_VAR 0 2
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_VAR 0 1
1002: PUSH
1003: LD_VAR 0 3
1007: ARRAY
1008: PPUSH
1009: CALL_OW 2
1013: ST_TO_ADDR
1014: GO 982
1016: POP
1017: POP
// end ;
1018: LD_VAR 0 2
1022: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1023: LD_INT 0
1025: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1026: LD_VAR 0 1
1030: PPUSH
1031: LD_VAR 0 2
1035: PPUSH
1036: LD_VAR 0 3
1040: PPUSH
1041: LD_VAR 0 4
1045: PPUSH
1046: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1050: LD_VAR 0 1
1054: PPUSH
1055: LD_VAR 0 2
1059: PPUSH
1060: LD_VAR 0 3
1064: PPUSH
1065: CALL_OW 331
// end ;
1069: LD_VAR 0 5
1073: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1074: LD_INT 0
1076: PPUSH
// if not units then
1077: LD_VAR 0 1
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1169
// result := true ;
1086: LD_ADDR_VAR 0 4
1090: PUSH
1091: LD_INT 1
1093: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1094: LD_VAR 0 1
1098: PPUSH
1099: LD_INT 26
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PPUSH
1109: CALL_OW 72
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PPUSH
1123: CALL_OW 88
1127: NOT
1128: IFFALSE 1169
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 26
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PPUSH
1150: CALL_OW 72
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 88
1168: ST_TO_ADDR
// end ;
1169: LD_VAR 0 4
1173: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1174: LD_INT 0
1176: PPUSH
1177: PPUSH
// if not group then
1178: LD_VAR 0 2
1182: NOT
1183: IFFALSE 1187
// exit ;
1185: GO 1232
// for i in group do
1187: LD_ADDR_VAR 0 4
1191: PUSH
1192: LD_VAR 0 2
1196: PUSH
1197: FOR_IN
1198: IFFALSE 1230
// if See ( side , i ) then
1200: LD_VAR 0 1
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 292
1214: IFFALSE 1228
// begin result := true ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// exit ;
1224: POP
1225: POP
1226: GO 1232
// end ;
1228: GO 1197
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 3
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// uc_side := 5 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 5
1257: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1258: LD_ADDR_EXP 18
1262: PUSH
1263: LD_STRING Abdul
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: LD_STRING 
1271: PPUSH
1272: CALL 13320 0 3
1276: ST_TO_ADDR
// uc_side := 2 ;
1277: LD_ADDR_OWVAR 20
1281: PUSH
1282: LD_INT 2
1284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1285: LD_ADDR_EXP 10
1289: PUSH
1290: LD_STRING Heike
1292: PPUSH
1293: LD_EXP 1
1297: NOT
1298: PPUSH
1299: LD_EXP 2
1303: PPUSH
1304: CALL 13320 0 3
1308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1309: LD_ADDR_EXP 13
1313: PUSH
1314: LD_STRING Ibrahim
1316: PPUSH
1317: LD_EXP 1
1321: NOT
1322: PPUSH
1323: LD_EXP 2
1327: PPUSH
1328: CALL 13320 0 3
1332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1333: LD_ADDR_EXP 11
1337: PUSH
1338: LD_STRING Givi
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_EXP 2
1351: PPUSH
1352: CALL 13320 0 3
1356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1357: LD_ADDR_EXP 14
1361: PUSH
1362: LD_STRING Kamil
1364: PPUSH
1365: LD_EXP 1
1369: NOT
1370: PPUSH
1371: LD_EXP 2
1375: PPUSH
1376: CALL 13320 0 3
1380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 15
1385: PUSH
1386: LD_STRING Kaia
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 13320 0 3
1404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 16
1409: PUSH
1410: LD_STRING Sophia
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 13320 0 3
1428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 17
1433: PUSH
1434: LD_STRING Markov
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 13320 0 3
1452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Aviradze
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 13320 0 3
1476: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 20
1481: PUSH
1482: LD_STRING Kurt
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 13320 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 12
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 13320 0 3
1524: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1525: LD_ADDR_EXP 19
1529: PUSH
1530: LD_STRING Olaf
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: LD_STRING 
1538: PPUSH
1539: CALL 13320 0 3
1543: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1544: LD_ADDR_EXP 22
1548: PUSH
1549: LD_STRING 06_others
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1557: LD_ADDR_EXP 23
1561: PUSH
1562: LD_STRING 06_apes
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// if debug then
1570: LD_EXP 1
1574: IFFALSE 1849
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1576: LD_ADDR_VAR 0 3
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 25
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 1000
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 1000
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 27
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 750
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 14
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 27
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 900
1688: PUSH
1689: LD_INT 0
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 14
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 32
1712: PUSH
1713: LD_INT 2
1715: PUSH
1716: LD_INT 1000
1718: PUSH
1719: LD_INT 100
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 14
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 1
1746: PUSH
1747: LD_INT 32
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 1000
1755: PUSH
1756: LD_INT 50
1758: PUSH
1759: LD_INT 50
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: LD_INT 27
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 1000
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 14
1807: PUSH
1808: LD_INT 1
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_EXP 101
1818: PUSH
1819: LD_INT 2
1821: PUSH
1822: LD_INT 1000
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// end else
1847: GO 1856
// tmp := [ ] ;
1849: LD_ADDR_VAR 0 3
1853: PUSH
1854: EMPTY
1855: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1856: LD_ADDR_EXP 24
1860: PUSH
1861: LD_STRING 06_Vehicles
1863: PPUSH
1864: LD_VAR 0 3
1868: PPUSH
1869: CALL_OW 30
1873: ST_TO_ADDR
// if heikeVehicles then
1874: LD_EXP 24
1878: IFFALSE 1973
// begin for i := heikeVehicles downto 1 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: DOUBLE
1886: LD_EXP 24
1890: INC
1891: ST_TO_ADDR
1892: LD_INT 1
1894: PUSH
1895: FOR_DOWNTO
1896: IFFALSE 1971
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1898: LD_EXP 24
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PUSH
1913: LD_INT 2
1915: EQUAL
1916: IFFALSE 1969
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1918: LD_ADDR_EXP 24
1922: PUSH
1923: LD_EXP 24
1927: PPUSH
1928: LD_EXP 24
1932: PPUSH
1933: LD_EXP 24
1937: PUSH
1938: LD_VAR 0 2
1942: ARRAY
1943: PPUSH
1944: CALL_OW 2
1948: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1949: LD_ADDR_EXP 24
1953: PUSH
1954: LD_EXP 24
1958: PPUSH
1959: LD_VAR 0 2
1963: PPUSH
1964: CALL_OW 3
1968: ST_TO_ADDR
// end ; end ;
1969: GO 1895
1971: POP
1972: POP
// end ; end ;
1973: LD_VAR 0 1
1977: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1978: LD_EXP 3
1982: IFFALSE 2516
1984: GO 1986
1986: DISABLE
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1991: LD_ADDR_VAR 0 2
1995: PUSH
1996: LD_INT 96
1998: PUSH
1999: LD_INT 50
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 49
2008: PUSH
2009: LD_INT 52
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 34
2018: PUSH
2019: LD_INT 55
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 41
2028: PUSH
2029: LD_INT 70
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 53
2038: PUSH
2039: LD_INT 96
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 103
2048: PUSH
2049: LD_INT 64
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 104
2066: PUSH
2067: LD_INT 70
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 111
2076: PUSH
2077: LD_INT 103
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: LD_INT 131
2086: PUSH
2087: LD_INT 147
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 130
2096: PUSH
2097: LD_INT 153
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 110
2106: PUSH
2107: LD_INT 93
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 103
2116: PUSH
2117: LD_INT 65
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// for i in tmp [ 1 ] do
2136: LD_ADDR_VAR 0 1
2140: PUSH
2141: LD_VAR 0 2
2145: PUSH
2146: LD_INT 1
2148: ARRAY
2149: PUSH
2150: FOR_IN
2151: IFFALSE 2203
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2153: LD_EXP 12
2157: PPUSH
2158: LD_VAR 0 1
2162: PUSH
2163: LD_INT 1
2165: ARRAY
2166: PPUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 2
2174: ARRAY
2175: PPUSH
2176: CALL_OW 174
// AddComHold ( Mike ) ;
2180: LD_EXP 12
2184: PPUSH
2185: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2189: LD_EXP 12
2193: PPUSH
2194: LD_INT 175
2196: PPUSH
2197: CALL_OW 202
// end ;
2201: GO 2150
2203: POP
2204: POP
// for i in tmp [ 2 ] do
2205: LD_ADDR_VAR 0 1
2209: PUSH
2210: LD_VAR 0 2
2214: PUSH
2215: LD_INT 2
2217: ARRAY
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2272
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2222: LD_EXP 20
2226: PPUSH
2227: LD_VAR 0 1
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PPUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_INT 2
2243: ARRAY
2244: PPUSH
2245: CALL_OW 174
// AddComHold ( Kurt ) ;
2249: LD_EXP 20
2253: PPUSH
2254: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2258: LD_EXP 20
2262: PPUSH
2263: LD_INT 175
2265: PPUSH
2266: CALL_OW 202
// end ;
2270: GO 2219
2272: POP
2273: POP
// wait ( 0 0$1 ) ;
2274: LD_INT 35
2276: PPUSH
2277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2288: LD_EXP 12
2292: PPUSH
2293: CALL_OW 314
2297: NOT
2298: PUSH
2299: LD_EXP 12
2303: PPUSH
2304: CALL_OW 301
2308: OR
2309: PUSH
2310: LD_EXP 20
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: PUSH
2321: LD_EXP 20
2325: PPUSH
2326: CALL_OW 301
2330: OR
2331: AND
2332: IFFALSE 2281
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2334: LD_EXP 20
2338: PPUSH
2339: CALL_OW 301
2343: PUSH
2344: LD_EXP 12
2348: PPUSH
2349: CALL_OW 301
2353: AND
2354: IFFALSE 2366
// begin scoutFailed := true ;
2356: LD_ADDR_EXP 4
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// exit ;
2364: GO 2516
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2366: LD_EXP 20
2370: PUSH
2371: LD_EXP 12
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: LD_INT 132
2382: PPUSH
2383: LD_INT 52
2385: PPUSH
2386: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2390: LD_EXP 20
2394: PUSH
2395: LD_EXP 12
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PPUSH
2414: CALL_OW 69
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2427: LD_INT 35
2429: PPUSH
2430: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2434: LD_INT 2
2436: PPUSH
2437: LD_EXP 20
2441: PPUSH
2442: CALL_OW 292
2446: PUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 12
2454: PPUSH
2455: CALL_OW 292
2459: OR
2460: IFFALSE 2427
// if IsLive ( Kurt ) then
2462: LD_EXP 20
2466: PPUSH
2467: CALL_OW 300
2471: IFFALSE 2485
// SetSide ( Kurt , 2 ) ;
2473: LD_EXP 20
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 235
// if IsLive ( Mike ) then
2485: LD_EXP 12
2489: PPUSH
2490: CALL_OW 300
2494: IFFALSE 2508
// SetSide ( Mike , 2 ) ;
2496: LD_EXP 12
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: CALL_OW 235
// scoutSuccess := true ;
2508: LD_ADDR_EXP 5
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// end ; end_of_file
2516: PPOPN 2
2518: END
// export usCommander , usForces , usCargo , usToBuild ; export function PrepareAmerican ; var i , b , veh ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
2524: PPUSH
// uc_side := 1 ;
2525: LD_ADDR_OWVAR 20
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// uc_nation := 1 ;
2533: LD_ADDR_OWVAR 21
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2000 , 2500 , 3000 , 3500 ] [ Difficulty ] ) ;
2541: LD_INT 1
2543: PPUSH
2544: CALL_OW 274
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: LD_INT 2000
2554: PUSH
2555: LD_INT 2500
2557: PUSH
2558: LD_INT 3000
2560: PUSH
2561: LD_INT 3500
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_OWVAR 67
2574: ARRAY
2575: PPUSH
2576: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 600 ) ;
2580: LD_INT 1
2582: PPUSH
2583: CALL_OW 274
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 600
2593: PPUSH
2594: CALL_OW 277
// usForces := [ ] ;
2598: LD_ADDR_EXP 26
2602: PUSH
2603: EMPTY
2604: ST_TO_ADDR
// usToBuild := [ ] ;
2605: LD_ADDR_EXP 28
2609: PUSH
2610: EMPTY
2611: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2612: LD_ADDR_VAR 0 2
2616: PUSH
2617: LD_INT 30
2619: PUSH
2620: LD_INT 32
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2723
// begin if GetBWeapon ( i ) = us_radar then
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 269
2644: PUSH
2645: LD_INT 11
2647: EQUAL
2648: IFFALSE 2673
// begin uc_nation := 0 ;
2650: LD_ADDR_OWVAR 21
2654: PUSH
2655: LD_INT 0
2657: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2658: LD_INT 0
2660: PPUSH
2661: LD_INT 16
2663: PPUSH
2664: LD_INT 2
2666: PPUSH
2667: CALL_OW 380
// end else
2671: GO 2707
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 6
2684: PUSH
2685: LD_INT 7
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: PUSH
2697: LD_OWVAR 67
2701: ARRAY
2702: PPUSH
2703: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2707: CALL_OW 44
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL_OW 52
// end ;
2721: GO 2632
2723: POP
2724: POP
// b := HexInfo ( 74 , 120 ) ;
2725: LD_ADDR_VAR 0 3
2729: PUSH
2730: LD_INT 74
2732: PPUSH
2733: LD_INT 120
2735: PPUSH
2736: CALL_OW 428
2740: ST_TO_ADDR
// uc_nation := 1 ;
2741: LD_ADDR_OWVAR 21
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: DOUBLE
2755: LD_INT 1
2757: DEC
2758: ST_TO_ADDR
2759: LD_INT 1
2761: PUSH
2762: LD_INT 2
2764: PUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 4
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_OWVAR 67
2781: ARRAY
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2836
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 5
2794: PUSH
2795: LD_INT 6
2797: PUSH
2798: LD_INT 7
2800: PUSH
2801: LD_INT 8
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: PUSH
2810: LD_OWVAR 67
2814: ARRAY
2815: PPUSH
2816: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2820: CALL_OW 44
2824: PPUSH
2825: LD_VAR 0 3
2829: PPUSH
2830: CALL_OW 52
// end ;
2834: GO 2783
2836: POP
2837: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: CALL_OW 313
2847: PPUSH
2848: LD_INT 5
2850: PPUSH
2851: CALL_OW 336
// for i := 1 to 6 do
2855: LD_ADDR_VAR 0 2
2859: PUSH
2860: DOUBLE
2861: LD_INT 1
2863: DEC
2864: ST_TO_ADDR
2865: LD_INT 6
2867: PUSH
2868: FOR_TO
2869: IFFALSE 2919
// begin PrepareHuman ( false , 4 , 6 ) ;
2871: LD_INT 0
2873: PPUSH
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 6
2879: PPUSH
2880: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2884: CALL_OW 44
2888: PPUSH
2889: LD_INT 32
2891: PUSH
2892: LD_INT 33
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: MOD
2907: PUSH
2908: LD_INT 1
2910: PLUS
2911: ARRAY
2912: PPUSH
2913: CALL_OW 52
// end ;
2917: GO 2868
2919: POP
2920: POP
// for i := 1 to 3 do
2921: LD_ADDR_VAR 0 2
2925: PUSH
2926: DOUBLE
2927: LD_INT 1
2929: DEC
2930: ST_TO_ADDR
2931: LD_INT 3
2933: PUSH
2934: FOR_TO
2935: IFFALSE 2964
// begin PrepareHuman ( false , 3 , 6 ) ;
2937: LD_INT 0
2939: PPUSH
2940: LD_INT 3
2942: PPUSH
2943: LD_INT 6
2945: PPUSH
2946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2950: CALL_OW 44
2954: PPUSH
2955: LD_INT 25
2957: PPUSH
2958: CALL_OW 52
// end ;
2962: GO 2934
2964: POP
2965: POP
// for i := 1 to 3 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 3
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3038
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 3
2987: PPUSH
2988: LD_INT 6
2990: PUSH
2991: LD_INT 7
2993: PUSH
2994: LD_INT 7
2996: PUSH
2997: LD_INT 7
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: PUSH
3006: LD_OWVAR 67
3010: ARRAY
3011: PPUSH
3012: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 84 , 154 ) ) ;
3016: CALL_OW 44
3020: PPUSH
3021: LD_INT 84
3023: PPUSH
3024: LD_INT 154
3026: PPUSH
3027: CALL_OW 428
3031: PPUSH
3032: CALL_OW 52
// end ;
3036: GO 2979
3038: POP
3039: POP
// for i := 1 to 3 do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 3
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3141
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3056: LD_INT 2
3058: PPUSH
3059: LD_INT 2
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: LD_INT 13
3067: PPUSH
3068: LD_INT 100
3070: PPUSH
3071: CALL 18184 0 5
// veh := CreateVehicle ;
3075: LD_ADDR_VAR 0 4
3079: PUSH
3080: CALL_OW 45
3084: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3085: LD_VAR 0 4
3089: PPUSH
3090: LD_INT 3
3092: PPUSH
3093: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3097: LD_VAR 0 4
3101: PPUSH
3102: LD_INT 9
3104: PPUSH
3105: LD_INT 0
3107: PPUSH
3108: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3112: LD_INT 0
3114: PPUSH
3115: LD_INT 3
3117: PPUSH
3118: LD_INT 6
3120: PPUSH
3121: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3125: CALL_OW 44
3129: PPUSH
3130: LD_VAR 0 4
3134: PPUSH
3135: CALL_OW 52
// end ;
3139: GO 3053
3141: POP
3142: POP
// InitHc ;
3143: CALL_OW 19
// hc_gallery := us ;
3147: LD_ADDR_OWVAR 33
3151: PUSH
3152: LD_STRING us
3154: ST_TO_ADDR
// hc_face_number := 26 ;
3155: LD_ADDR_OWVAR 34
3159: PUSH
3160: LD_INT 26
3162: ST_TO_ADDR
// hc_name := Max Caldera ;
3163: LD_ADDR_OWVAR 26
3167: PUSH
3168: LD_STRING Max Caldera
3170: ST_TO_ADDR
// hc_sex := sex_male ;
3171: LD_ADDR_OWVAR 27
3175: PUSH
3176: LD_INT 1
3178: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3179: LD_ADDR_OWVAR 29
3183: PUSH
3184: LD_INT 10
3186: PUSH
3187: LD_INT 11
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3194: LD_ADDR_OWVAR 30
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: LD_INT 1
3204: PUSH
3205: LD_INT 0
3207: PUSH
3208: LD_INT 0
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: ST_TO_ADDR
// hc_skills := [ 8 , 4 , 3 , 1 ] ;
3217: LD_ADDR_OWVAR 31
3221: PUSH
3222: LD_INT 8
3224: PUSH
3225: LD_INT 4
3227: PUSH
3228: LD_INT 3
3230: PUSH
3231: LD_INT 1
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: ST_TO_ADDR
// usCommander := CreateHuman ;
3240: LD_ADDR_EXP 25
3244: PUSH
3245: CALL_OW 44
3249: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3250: LD_EXP 25
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: CALL_OW 52
// InitHC_All ( ) ;
3262: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3266: LD_INT 2
3268: PPUSH
3269: LD_INT 1
3271: PPUSH
3272: LD_INT 2
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 100
3280: PPUSH
3281: CALL 18184 0 5
// usCargo := CreateVehicle ;
3285: LD_ADDR_EXP 27
3289: PUSH
3290: CALL_OW 45
3294: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3295: LD_EXP 27
3299: PPUSH
3300: LD_INT 81
3302: PPUSH
3303: LD_INT 143
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 48
// Connect ( usCargo ) ;
3313: LD_EXP 27
3317: PPUSH
3318: CALL 21277 0 1
// DoNotAttack ( 5 , usCargo ) ;
3322: LD_INT 5
3324: PPUSH
3325: LD_EXP 27
3329: PPUSH
3330: CALL_OW 471
// end ;
3334: LD_VAR 0 1
3338: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3339: LD_EXP 26
3343: NOT
3344: PUSH
3345: LD_EXP 6
3349: AND
3350: PUSH
3351: LD_INT 25
3353: PPUSH
3354: CALL_OW 302
3358: AND
3359: PUSH
3360: LD_INT 25
3362: PPUSH
3363: CALL_OW 461
3367: PUSH
3368: LD_INT 2
3370: EQUAL
3371: AND
3372: IFFALSE 3529
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
3380: PPUSH
3381: PPUSH
// begin enable ;
3382: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3383: LD_ADDR_VAR 0 1
3387: PUSH
3388: DOUBLE
3389: LD_INT 1
3391: DEC
3392: ST_TO_ADDR
3393: LD_INT 4
3395: PUSH
3396: LD_INT 5
3398: PUSH
3399: LD_INT 6
3401: PUSH
3402: LD_INT 7
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: PUSH
3411: LD_OWVAR 67
3415: ARRAY
3416: PUSH
3417: FOR_TO
3418: IFFALSE 3527
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: LD_INT 2
3427: PUSH
3428: LD_INT 3
3430: PUSH
3431: LD_INT 4
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: LD_INT 1
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: CALL_OW 12
3449: ARRAY
3450: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3451: LD_VAR 0 2
3455: PUSH
3456: LD_INT 4
3458: EQUAL
3459: IFFALSE 3471
// weapon := us_heavy_gun else
3461: LD_ADDR_VAR 0 3
3465: PUSH
3466: LD_INT 6
3468: ST_TO_ADDR
3469: GO 3502
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 7
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_INT 3
3495: PPUSH
3496: CALL_OW 12
3500: ARRAY
3501: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3502: LD_INT 25
3504: PPUSH
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 2
3515: PPUSH
3516: LD_VAR 0 3
3520: PPUSH
3521: CALL_OW 185
// end ;
3525: GO 3417
3527: POP
3528: POP
// end ;
3529: PPOPN 3
3531: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] do var i , tmp ;
3532: LD_EXP 26
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: LD_INT 5
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: LD_INT 7
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: PUSH
3555: LD_OWVAR 67
3559: ARRAY
3560: GREATEREQUAL
3561: IFFALSE 3701
3563: GO 3565
3565: DISABLE
3566: LD_INT 0
3568: PPUSH
3569: PPUSH
// begin enable ;
3570: ENABLE
// tmp := usForces ;
3571: LD_ADDR_VAR 0 2
3575: PUSH
3576: LD_EXP 26
3580: ST_TO_ADDR
// usForces := [ ] ;
3581: LD_ADDR_EXP 26
3585: PUSH
3586: EMPTY
3587: ST_TO_ADDR
// if not tmp then
3588: LD_VAR 0 2
3592: NOT
3593: IFFALSE 3597
// exit ;
3595: GO 3701
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// for i in tmp do
3604: LD_ADDR_VAR 0 1
3608: PUSH
3609: LD_VAR 0 2
3613: PUSH
3614: FOR_IN
3615: IFFALSE 3692
// begin if not IsOk ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 302
3626: NOT
3627: IFFALSE 3656
// begin ComUnlink ( i ) ;
3629: LD_VAR 0 1
3633: PPUSH
3634: CALL_OW 136
// tmp := tmp diff i ;
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_VAR 0 2
3647: PUSH
3648: LD_VAR 0 1
3652: DIFF
3653: ST_TO_ADDR
// end else
3654: GO 3690
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3656: LD_VAR 0 1
3660: PPUSH
3661: LD_INT 22
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PPUSH
3671: CALL_OW 69
3675: PPUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: CALL_OW 74
3685: PPUSH
3686: CALL_OW 115
// end ;
3690: GO 3614
3692: POP
3693: POP
// until not tmp ;
3694: LD_VAR 0 2
3698: NOT
3699: IFFALSE 3597
// end ;
3701: PPOPN 2
3703: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3704: LD_EXP 3
3708: PUSH
3709: LD_EXP 5
3713: NOT
3714: AND
3715: PUSH
3716: LD_INT 11
3718: PPUSH
3719: LD_INT 22
3721: PUSH
3722: LD_INT 2
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PPUSH
3729: CALL_OW 70
3733: AND
3734: IFFALSE 3855
3736: GO 3738
3738: DISABLE
3739: LD_INT 0
3741: PPUSH
3742: PPUSH
3743: PPUSH
// begin uc_side := 1 ;
3744: LD_ADDR_OWVAR 20
3748: PUSH
3749: LD_INT 1
3751: ST_TO_ADDR
// uc_nation := 1 ;
3752: LD_ADDR_OWVAR 21
3756: PUSH
3757: LD_INT 1
3759: ST_TO_ADDR
// tmp := [ ] ;
3760: LD_ADDR_VAR 0 3
3764: PUSH
3765: EMPTY
3766: ST_TO_ADDR
// for i := 1 to 2 do
3767: LD_ADDR_VAR 0 1
3771: PUSH
3772: DOUBLE
3773: LD_INT 1
3775: DEC
3776: ST_TO_ADDR
3777: LD_INT 2
3779: PUSH
3780: FOR_TO
3781: IFFALSE 3853
// begin PrepareSoldier ( false , 7 ) ;
3783: LD_INT 0
3785: PPUSH
3786: LD_INT 7
3788: PPUSH
3789: CALL_OW 381
// un := CreateHuman ;
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: CALL_OW 44
3802: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3803: LD_VAR 0 2
3807: PPUSH
3808: LD_INT 130
3810: PPUSH
3811: LD_INT 153
3813: PPUSH
3814: LD_INT 3
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 5
3831: PPUSH
3832: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3836: LD_VAR 0 2
3840: PPUSH
3841: LD_INT 108
3843: PPUSH
3844: LD_INT 108
3846: PPUSH
3847: CALL_OW 174
// end ;
3851: GO 3780
3853: POP
3854: POP
// end ;
3855: PPOPN 3
3857: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3858: LD_EXP 3
3862: PUSH
3863: LD_EXP 5
3867: NOT
3868: AND
3869: PUSH
3870: LD_INT 10
3872: PPUSH
3873: LD_INT 22
3875: PUSH
3876: LD_INT 2
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 70
3887: AND
3888: IFFALSE 4009
3890: GO 3892
3892: DISABLE
3893: LD_INT 0
3895: PPUSH
3896: PPUSH
3897: PPUSH
// begin uc_side := 1 ;
3898: LD_ADDR_OWVAR 20
3902: PUSH
3903: LD_INT 1
3905: ST_TO_ADDR
// uc_nation := 1 ;
3906: LD_ADDR_OWVAR 21
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// tmp := [ ] ;
3914: LD_ADDR_VAR 0 3
3918: PUSH
3919: EMPTY
3920: ST_TO_ADDR
// for i := 1 to 2 do
3921: LD_ADDR_VAR 0 1
3925: PUSH
3926: DOUBLE
3927: LD_INT 1
3929: DEC
3930: ST_TO_ADDR
3931: LD_INT 2
3933: PUSH
3934: FOR_TO
3935: IFFALSE 4007
// begin PrepareSoldier ( false , 7 ) ;
3937: LD_INT 0
3939: PPUSH
3940: LD_INT 7
3942: PPUSH
3943: CALL_OW 381
// un := CreateHuman ;
3947: LD_ADDR_VAR 0 2
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_INT 56
3964: PPUSH
3965: LD_INT 101
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3978: LD_VAR 0 2
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3990: LD_VAR 0 2
3994: PPUSH
3995: LD_INT 72
3997: PPUSH
3998: LD_INT 92
4000: PPUSH
4001: CALL_OW 174
// end ;
4005: GO 3934
4007: POP
4008: POP
// end ;
4009: PPOPN 3
4011: END
// every 0 0$1 trigger IsOk ( usCargo ) and not usSurrender do var cr ;
4012: LD_EXP 27
4016: PPUSH
4017: CALL_OW 302
4021: PUSH
4022: LD_EXP 7
4026: NOT
4027: AND
4028: IFFALSE 4259
4030: GO 4032
4032: DISABLE
4033: LD_INT 0
4035: PPUSH
// begin enable ;
4036: ENABLE
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4037: LD_EXP 27
4041: PPUSH
4042: CALL_OW 261
4046: PUSH
4047: LD_INT 10
4049: LESS
4050: PUSH
4051: LD_INT 2
4053: PPUSH
4054: LD_EXP 27
4058: PPUSH
4059: CALL_OW 292
4063: NOT
4064: AND
4065: IFFALSE 4079
// SetFuel ( usCargo , 100 ) ;
4067: LD_EXP 27
4071: PPUSH
4072: LD_INT 100
4074: PPUSH
4075: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not IsInArea ( usCargo , usCratesArea ) and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) then
4079: LD_EXP 27
4083: PPUSH
4084: CALL_OW 314
4088: NOT
4089: PUSH
4090: LD_EXP 27
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: CALL_OW 289
4102: PUSH
4103: LD_INT 100
4105: LESS
4106: AND
4107: PUSH
4108: LD_EXP 27
4112: PPUSH
4113: LD_INT 12
4115: PPUSH
4116: CALL_OW 308
4120: NOT
4121: AND
4122: PUSH
4123: LD_INT 14
4125: PPUSH
4126: LD_INT 81
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 50
4138: PUSH
4139: EMPTY
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 70
4150: NOT
4151: AND
4152: IFFALSE 4229
// begin cr := GetListOfCratesInArea ( usCratesArea ) ;
4154: LD_ADDR_VAR 0 1
4158: PUSH
4159: LD_INT 12
4161: PPUSH
4162: CALL_OW 435
4166: ST_TO_ADDR
// if cr then
4167: LD_VAR 0 1
4171: IFFALSE 4202
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4173: LD_EXP 27
4177: PPUSH
4178: LD_VAR 0 1
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: LD_VAR 0 1
4191: PUSH
4192: LD_INT 2
4194: ARRAY
4195: PPUSH
4196: CALL_OW 117
4200: GO 4229
// if not IsInArea ( usCargo , usCratesArea ) then
4202: LD_EXP 27
4206: PPUSH
4207: LD_INT 12
4209: PPUSH
4210: CALL_OW 308
4214: NOT
4215: IFFALSE 4229
// ComMoveToArea ( usCargo , usCratesArea ) ;
4217: LD_EXP 27
4221: PPUSH
4222: LD_INT 12
4224: PPUSH
4225: CALL_OW 113
// end ; if GetCargo ( usCargo , mat_cans ) = 100 then
4229: LD_EXP 27
4233: PPUSH
4234: LD_INT 1
4236: PPUSH
4237: CALL_OW 289
4241: PUSH
4242: LD_INT 100
4244: EQUAL
4245: IFFALSE 4259
// ComGive ( usCargo , usDepot ) ;
4247: LD_EXP 27
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: CALL_OW 161
// end ;
4259: PPOPN 1
4261: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4262: LD_EXP 7
4266: NOT
4267: PUSH
4268: LD_INT 22
4270: PUSH
4271: LD_INT 1
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_INT 21
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 50
4293: PUSH
4294: EMPTY
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: PPUSH
4306: CALL_OW 69
4310: AND
4311: PUSH
4312: LD_INT 22
4314: PUSH
4315: LD_INT 1
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: LD_INT 60
4327: PUSH
4328: EMPTY
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 25
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PPUSH
4350: CALL_OW 69
4354: AND
4355: IFFALSE 4558
4357: GO 4359
4359: DISABLE
4360: LD_INT 0
4362: PPUSH
4363: PPUSH
// begin enable ;
4364: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4365: LD_ADDR_VAR 0 1
4369: PUSH
4370: LD_INT 22
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 50
4395: PUSH
4396: EMPTY
4397: LIST
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: PPUSH
4408: CALL_OW 69
4412: PUSH
4413: FOR_IN
4414: IFFALSE 4556
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 3
4433: PUSH
4434: LD_INT 60
4436: PUSH
4437: EMPTY
4438: LIST
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 25
4446: PUSH
4447: LD_INT 4
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: LIST
4458: PPUSH
4459: CALL_OW 69
4463: ST_TO_ADDR
// if not sci then
4464: LD_VAR 0 2
4468: NOT
4469: IFFALSE 4473
// break ;
4471: GO 4556
// sci := sci [ 1 ] ;
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 2
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: ST_TO_ADDR
// if IsInUnit ( sci ) then
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 310
4496: IFFALSE 4509
// ComExit ( sci ) else
4498: LD_VAR 0 2
4502: PPUSH
4503: CALL 50445 0 1
4507: GO 4554
// begin ComHeal ( sci , i ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_INT 32
4530: PUSH
4531: LD_INT 33
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 1
4540: PPUSH
4541: LD_INT 2
4543: PPUSH
4544: CALL_OW 12
4548: ARRAY
4549: PPUSH
4550: CALL_OW 180
// end ; end ;
4554: GO 4413
4556: POP
4557: POP
// end ;
4558: PPOPN 2
4560: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4561: LD_EXP 7
4565: NOT
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 60
4582: PUSH
4583: EMPTY
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 50
4592: PUSH
4593: EMPTY
4594: LIST
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 13
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: PPUSH
4612: CALL_OW 69
4616: AND
4617: PUSH
4618: LD_INT 22
4620: PUSH
4621: LD_INT 1
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: LD_INT 24
4633: PUSH
4634: LD_INT 1000
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 21
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: LD_INT 30
4660: PUSH
4661: LD_INT 29
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: PPUSH
4678: CALL_OW 69
4682: AND
4683: IFFALSE 4952
4685: GO 4687
4687: DISABLE
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
4692: PPUSH
// begin enable ;
4693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4694: LD_ADDR_VAR 0 2
4698: PUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 3
4711: PUSH
4712: LD_INT 24
4714: PUSH
4715: LD_INT 1000
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 30
4741: PUSH
4742: LD_INT 29
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4764: LD_ADDR_VAR 0 3
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 1
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: LD_INT 24
4784: PUSH
4785: LD_INT 600
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 21
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: LD_INT 30
4811: PUSH
4812: LD_INT 29
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: PPUSH
4829: CALL_OW 69
4833: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4834: LD_ADDR_VAR 0 1
4838: PUSH
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 60
4854: PUSH
4855: EMPTY
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 50
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: LD_INT 34
4870: PUSH
4871: LD_INT 13
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: PPUSH
4884: CALL_OW 69
4888: PUSH
4889: FOR_IN
4890: IFFALSE 4950
// begin if tmp2 then
4892: LD_VAR 0 3
4896: IFFALSE 4924
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4898: LD_VAR 0 1
4902: PPUSH
4903: LD_VAR 0 3
4907: PPUSH
4908: LD_VAR 0 1
4912: PPUSH
4913: CALL_OW 74
4917: PPUSH
4918: CALL_OW 130
4922: GO 4948
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4924: LD_VAR 0 1
4928: PPUSH
4929: LD_VAR 0 2
4933: PPUSH
4934: LD_VAR 0 1
4938: PPUSH
4939: CALL_OW 74
4943: PPUSH
4944: CALL_OW 130
// end ;
4948: GO 4889
4950: POP
4951: POP
// end ;
4952: PPOPN 3
4954: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4955: LD_EXP 7
4959: NOT
4960: PUSH
4961: LD_INT 14
4963: PPUSH
4964: LD_INT 81
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 50
4976: PUSH
4977: EMPTY
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 70
4988: NOT
4989: AND
4990: PUSH
4991: LD_EXP 28
4995: AND
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 1
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: LD_INT 60
5012: PUSH
5013: EMPTY
5014: LIST
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 50
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: LD_INT 34
5028: PUSH
5029: LD_INT 13
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: PPUSH
5042: CALL_OW 69
5046: AND
5047: IFFALSE 5159
5049: GO 5051
5051: DISABLE
// begin enable ;
5052: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5053: LD_INT 22
5055: PUSH
5056: LD_INT 1
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 3
5065: PUSH
5066: LD_INT 60
5068: PUSH
5069: EMPTY
5070: LIST
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 50
5078: PUSH
5079: EMPTY
5080: LIST
5081: PUSH
5082: LD_INT 34
5084: PUSH
5085: LD_INT 13
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: PPUSH
5103: LD_EXP 28
5107: PUSH
5108: LD_INT 1
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PPUSH
5116: LD_EXP 28
5120: PUSH
5121: LD_INT 1
5123: ARRAY
5124: PUSH
5125: LD_INT 2
5127: ARRAY
5128: PPUSH
5129: LD_EXP 28
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PUSH
5138: LD_INT 3
5140: ARRAY
5141: PPUSH
5142: LD_EXP 28
5146: PUSH
5147: LD_INT 1
5149: ARRAY
5150: PUSH
5151: LD_INT 4
5153: ARRAY
5154: PPUSH
5155: CALL_OW 566
// end ;
5159: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5160: LD_INT 22
5162: PUSH
5163: LD_INT 1
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 50
5172: PUSH
5173: EMPTY
5174: LIST
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: LD_INT 54
5181: PUSH
5182: EMPTY
5183: LIST
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 25
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 5
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 25
5214: PUSH
5215: LD_INT 16
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: PPUSH
5234: CALL_OW 69
5238: IFFALSE 5600
5240: GO 5242
5242: DISABLE
5243: LD_INT 0
5245: PPUSH
5246: PPUSH
5247: PPUSH
5248: PPUSH
// begin enable ;
5249: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5250: LD_ADDR_VAR 0 2
5254: PUSH
5255: LD_INT 22
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 50
5267: PUSH
5268: EMPTY
5269: LIST
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 54
5276: PUSH
5277: EMPTY
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 2
5286: PUSH
5287: LD_INT 25
5289: PUSH
5290: LD_INT 1
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 25
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: LD_INT 25
5309: PUSH
5310: LD_INT 16
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PPUSH
5329: CALL_OW 69
5333: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5334: LD_ADDR_VAR 0 3
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 50
5351: PUSH
5352: EMPTY
5353: LIST
5354: PUSH
5355: LD_INT 21
5357: PUSH
5358: LD_INT 3
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 30
5367: PUSH
5368: LD_INT 32
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 58
5377: PUSH
5378: EMPTY
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: PPUSH
5388: CALL_OW 69
5392: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_INT 22
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 50
5410: PUSH
5411: EMPTY
5412: LIST
5413: PUSH
5414: LD_INT 30
5416: PUSH
5417: LD_INT 5
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: PPUSH
5429: CALL_OW 69
5433: ST_TO_ADDR
// if not tmp then
5434: LD_VAR 0 2
5438: NOT
5439: IFFALSE 5443
// exit ;
5441: GO 5600
// for i in tmp do
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_VAR 0 2
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5598
// begin btmp := FilterByTag ( btmp , 0 ) ;
5456: LD_ADDR_VAR 0 3
5460: PUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 47575 0 2
5473: ST_TO_ADDR
// if not btmp then
5474: LD_VAR 0 3
5478: NOT
5479: IFFALSE 5524
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 257
5490: PUSH
5491: LD_INT 16
5493: NONEQUAL
5494: PUSH
5495: LD_VAR 0 4
5499: AND
5500: IFFALSE 5520
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: LD_VAR 0 4
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: CALL_OW 120
// continue ;
5520: GO 5453
// end else
5522: GO 5596
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 1
5531: ARRAY
5532: PPUSH
5533: LD_INT 1
5535: PPUSH
5536: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5540: LD_VAR 0 1
5544: PPUSH
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 1
5552: ARRAY
5553: PPUSH
5554: CALL_OW 120
// wait ( 0 0$9 ) ;
5558: LD_INT 315
5560: PPUSH
5561: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5565: LD_VAR 0 3
5569: PUSH
5570: LD_INT 1
5572: ARRAY
5573: PPUSH
5574: CALL 15476 0 1
5578: IFFALSE 5596
// SetTag ( btmp [ 1 ] , 0 ) ;
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 1
5587: ARRAY
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 109
// end ; end ;
5596: GO 5453
5598: POP
5599: POP
// end ; end_of_file
5600: PPOPN 4
5602: END
// on UnitDestroyed ( un ) do begin if un = Heike then
5603: LD_VAR 0 1
5607: PUSH
5608: LD_EXP 10
5612: EQUAL
5613: IFFALSE 5622
// YouLost ( Heike ) ;
5615: LD_STRING Heike
5617: PPUSH
5618: CALL_OW 104
// if GetSide ( un ) = 1 then
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 255
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5886
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 264
5646: PUSH
5647: LD_INT 13
5649: EQUAL
5650: PUSH
5651: LD_INT 25
5653: PPUSH
5654: CALL_OW 302
5658: AND
5659: IFFALSE 5680
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
5661: LD_INT 25
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: LD_INT 2
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 13
5675: PPUSH
5676: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 264
5689: PUSH
5690: LD_INT 12
5692: EQUAL
5693: PUSH
5694: LD_INT 25
5696: PPUSH
5697: CALL_OW 302
5701: AND
5702: IFFALSE 5723
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
5704: LD_INT 25
5706: PPUSH
5707: LD_INT 2
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_INT 2
5715: PPUSH
5716: LD_INT 12
5718: PPUSH
5719: CALL_OW 185
// if GetBType ( un ) = b_bunker then
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 266
5732: PUSH
5733: LD_INT 32
5735: EQUAL
5736: IFFALSE 5801
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
5738: LD_ADDR_EXP 28
5742: PUSH
5743: LD_EXP 28
5747: PPUSH
5748: LD_EXP 28
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PPUSH
5757: LD_INT 32
5759: PUSH
5760: LD_VAR 0 1
5764: PPUSH
5765: CALL_OW 250
5769: PUSH
5770: LD_VAR 0 1
5774: PPUSH
5775: CALL_OW 251
5779: PUSH
5780: LD_VAR 0 1
5784: PPUSH
5785: CALL_OW 254
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: PPUSH
5796: CALL_OW 1
5800: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 266
5810: PUSH
5811: LD_INT 5
5813: PUSH
5814: LD_INT 4
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: IN
5821: IFFALSE 5886
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
5823: LD_ADDR_EXP 28
5827: PUSH
5828: LD_EXP 28
5832: PPUSH
5833: LD_EXP 28
5837: PUSH
5838: LD_INT 1
5840: PLUS
5841: PPUSH
5842: LD_INT 4
5844: PUSH
5845: LD_VAR 0 1
5849: PPUSH
5850: CALL_OW 250
5854: PUSH
5855: LD_VAR 0 1
5859: PPUSH
5860: CALL_OW 251
5864: PUSH
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 254
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 1
5885: ST_TO_ADDR
// end ; end ;
5886: PPOPN 1
5888: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 255
5898: PUSH
5899: LD_INT 1
5901: EQUAL
5902: PUSH
5903: LD_VAR 0 1
5907: PPUSH
5908: CALL_OW 110
5912: PUSH
5913: LD_INT 1
5915: EQUAL
5916: AND
5917: IFFALSE 5931
// SetTag ( un , 0 ) ;
5919: LD_VAR 0 1
5923: PPUSH
5924: LD_INT 0
5926: PPUSH
5927: CALL_OW 109
// end ;
5931: PPOPN 1
5933: END
// on BuildingComplete ( b ) do var i , barracks ;
5934: LD_INT 0
5936: PPUSH
5937: PPUSH
// begin if GetSide ( b ) = 1 then
5938: LD_VAR 0 1
5942: PPUSH
5943: CALL_OW 255
5947: PUSH
5948: LD_INT 1
5950: EQUAL
5951: IFFALSE 6103
// begin usToBuild := Delete ( usToBuild , 1 ) ;
5953: LD_ADDR_EXP 28
5957: PUSH
5958: LD_EXP 28
5962: PPUSH
5963: LD_INT 1
5965: PPUSH
5966: CALL_OW 3
5970: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
5971: LD_VAR 0 1
5975: PPUSH
5976: CALL_OW 266
5980: PUSH
5981: LD_INT 4
5983: EQUAL
5984: IFFALSE 5995
// ComUpgrade ( b ) ;
5986: LD_VAR 0 1
5990: PPUSH
5991: CALL_OW 146
// if GetBType ( b ) = b_bunker then
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 266
6004: PUSH
6005: LD_INT 32
6007: EQUAL
6008: IFFALSE 6103
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6010: LD_VAR 0 1
6014: PPUSH
6015: LD_INT 6
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_INT 2
6030: PPUSH
6031: CALL_OW 12
6035: ARRAY
6036: PPUSH
6037: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 22
6048: PUSH
6049: LD_INT 1
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 30
6058: PUSH
6059: LD_INT 5
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PPUSH
6070: CALL_OW 69
6074: ST_TO_ADDR
// if barracks then
6075: LD_VAR 0 3
6079: IFFALSE 6103
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 313
6094: PUSH
6095: LD_INT 1
6097: ARRAY
6098: PPUSH
6099: CALL_OW 122
// end ; end ; end ;
6103: PPOPN 3
6105: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 1
6118: EQUAL
6119: IFFALSE 6222
// begin if GetControl ( vehicle ) = control_remote then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL_OW 263
6130: PUSH
6131: LD_INT 2
6133: EQUAL
6134: IFFALSE 6145
// Connect ( vehicle ) ;
6136: LD_VAR 0 1
6140: PPUSH
6141: CALL 21277 0 1
// if GetWeapon ( vehicle ) = us_cargo_bay then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 12
6157: EQUAL
6158: IFFALSE 6170
// usCargo := vehicle ;
6160: LD_ADDR_EXP 27
6164: PUSH
6165: LD_VAR 0 1
6169: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6170: LD_VAR 0 1
6174: PPUSH
6175: CALL_OW 264
6179: PUSH
6180: LD_INT 12
6182: PUSH
6183: LD_INT 13
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: IN
6190: NOT
6191: IFFALSE 6222
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6193: LD_ADDR_EXP 26
6197: PUSH
6198: LD_EXP 26
6202: PPUSH
6203: LD_EXP 26
6207: PUSH
6208: LD_INT 1
6210: PLUS
6211: PPUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 1
6221: ST_TO_ADDR
// end ; end ;
6222: PPOPN 2
6224: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 and GetWeapon ( veh ) = us_crane then
6225: LD_VAR 0 2
6229: PPUSH
6230: CALL_OW 255
6234: PUSH
6235: LD_INT 1
6237: EQUAL
6238: PUSH
6239: LD_VAR 0 2
6243: PPUSH
6244: CALL_OW 264
6248: PUSH
6249: LD_INT 13
6251: EQUAL
6252: AND
6253: IFFALSE 6267
// AddComEnterUnit ( un , amFac ) ;
6255: LD_VAR 0 1
6259: PPUSH
6260: LD_INT 25
6262: PPUSH
6263: CALL_OW 180
// end ;
6267: PPOPN 4
6269: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
6270: LD_VAR 0 1
6274: PPUSH
6275: CALL_OW 255
6279: PUSH
6280: LD_INT 1
6282: EQUAL
6283: PUSH
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 266
6293: PUSH
6294: LD_INT 32
6296: EQUAL
6297: AND
6298: PUSH
6299: LD_VAR 0 2
6303: PPUSH
6304: CALL_OW 257
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: LD_INT 5
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: IN
6319: AND
6320: PUSH
6321: LD_INT 22
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 30
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 50
6343: PUSH
6344: EMPTY
6345: LIST
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: AND
6357: IFFALSE 6427
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
6359: LD_INT 74
6361: PPUSH
6362: LD_INT 120
6364: PPUSH
6365: CALL_OW 428
6369: PPUSH
6370: CALL_OW 313
6374: PUSH
6375: LD_INT 6
6377: LESS
6378: IFFALSE 6427
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
6380: LD_VAR 0 2
6384: PPUSH
6385: LD_INT 74
6387: PPUSH
6388: LD_INT 120
6390: PPUSH
6391: CALL_OW 428
6395: PPUSH
6396: CALL_OW 120
// if GetClass ( un ) = class_soldier then
6400: LD_VAR 0 2
6404: PPUSH
6405: CALL_OW 257
6409: PUSH
6410: LD_INT 1
6412: EQUAL
6413: IFFALSE 6427
// AddComChangeProfession ( un , class_sniper ) ;
6415: LD_VAR 0 2
6419: PPUSH
6420: LD_INT 5
6422: PPUSH
6423: CALL_OW 183
// end ; end ; end_of_file
6427: PPOPN 2
6429: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
6430: LD_INT 0
6432: PPUSH
6433: PPUSH
6434: PPUSH
6435: PPUSH
6436: PPUSH
6437: PPUSH
6438: PPUSH
6439: PPUSH
// Video ( true ) ;
6440: LD_INT 1
6442: PPUSH
6443: CALL 50029 0 1
// music_nat := 1 ;
6447: LD_ADDR_OWVAR 71
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// music_class := music_recon ;
6455: LD_ADDR_OWVAR 72
6459: PUSH
6460: LD_INT 3
6462: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
6463: LD_INT 184
6465: PPUSH
6466: LD_INT 142
6468: PPUSH
6469: LD_INT 2
6471: PPUSH
6472: LD_INT 10
6474: NEG
6475: PPUSH
6476: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
6480: LD_INT 184
6482: PPUSH
6483: LD_INT 142
6485: PPUSH
6486: LD_INT 2
6488: PPUSH
6489: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
6493: LD_INT 204
6495: PPUSH
6496: LD_INT 151
6498: PPUSH
6499: LD_INT 2
6501: PPUSH
6502: LD_INT 10
6504: NEG
6505: PPUSH
6506: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
6510: LD_INT 204
6512: PPUSH
6513: LD_INT 151
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
6523: LD_INT 184
6525: PPUSH
6526: LD_INT 142
6528: PPUSH
6529: CALL_OW 86
// wait ( 0 0$2 ) ;
6533: LD_INT 70
6535: PPUSH
6536: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_EXP 10
6549: PUSH
6550: LD_EXP 11
6554: PUSH
6555: LD_EXP 12
6559: PUSH
6560: LD_EXP 13
6564: PUSH
6565: LD_EXP 14
6569: PUSH
6570: LD_EXP 15
6574: PUSH
6575: LD_EXP 16
6579: PUSH
6580: LD_EXP 17
6584: PUSH
6585: LD_EXP 19
6589: PUSH
6590: LD_EXP 20
6594: PUSH
6595: LD_EXP 21
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: LD_EXP 22
6617: UNION
6618: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
6619: LD_ADDR_VAR 0 6
6623: PUSH
6624: LD_VAR 0 5
6628: PPUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 2
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 72
6643: PUSH
6644: LD_INT 0
6646: GREATER
6647: ST_TO_ADDR
// hasCamera := false ;
6648: LD_ADDR_VAR 0 7
6652: PUSH
6653: LD_INT 0
6655: ST_TO_ADDR
// if not hasEng then
6656: LD_VAR 0 6
6660: NOT
6661: IFFALSE 6689
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
6663: LD_VAR 0 5
6667: PUSH
6668: LD_INT 1
6670: PPUSH
6671: LD_VAR 0 5
6675: PPUSH
6676: CALL_OW 12
6680: ARRAY
6681: PPUSH
6682: LD_INT 2
6684: PPUSH
6685: CALL_OW 336
// if heikeVehicles then
6689: LD_EXP 24
6693: IFFALSE 7307
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
6695: LD_ADDR_VAR 0 5
6699: PUSH
6700: LD_VAR 0 5
6704: PPUSH
6705: LD_INT 3
6707: PPUSH
6708: CALL 52074 0 2
6712: ST_TO_ADDR
// for i in heikeVehicles do
6713: LD_ADDR_VAR 0 2
6717: PUSH
6718: LD_EXP 24
6722: PUSH
6723: FOR_IN
6724: IFFALSE 7305
// begin if not tmp then
6726: LD_VAR 0 5
6730: NOT
6731: IFFALSE 6735
// break ;
6733: GO 7305
// uc_side := 2 ;
6735: LD_ADDR_OWVAR 20
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
6743: LD_ADDR_OWVAR 21
6747: PUSH
6748: LD_VAR 0 2
6752: PUSH
6753: LD_INT 5
6755: ARRAY
6756: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
6757: LD_ADDR_OWVAR 37
6761: PUSH
6762: LD_VAR 0 2
6766: PUSH
6767: LD_INT 1
6769: ARRAY
6770: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
6771: LD_ADDR_OWVAR 39
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 2
6783: ARRAY
6784: ST_TO_ADDR
// vc_control := i [ 3 ] ;
6785: LD_ADDR_OWVAR 38
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 3
6797: ARRAY
6798: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
6799: LD_ADDR_OWVAR 40
6803: PUSH
6804: LD_VAR 0 2
6808: PUSH
6809: LD_INT 4
6811: ARRAY
6812: ST_TO_ADDR
// veh := CreateVehicle ;
6813: LD_ADDR_VAR 0 4
6817: PUSH
6818: CALL_OW 45
6822: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6823: LD_VAR 0 4
6827: PPUSH
6828: LD_INT 4
6830: PPUSH
6831: CALL_OW 233
// if i [ 3 ] = control_manual then
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 3
6842: ARRAY
6843: PUSH
6844: LD_INT 1
6846: EQUAL
6847: IFFALSE 6932
// begin PlaceUnitArea ( veh , startArea , false ) ;
6849: LD_VAR 0 4
6853: PPUSH
6854: LD_INT 1
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
6864: LD_VAR 0 2
6868: PUSH
6869: LD_INT 4
6871: ARRAY
6872: PUSH
6873: LD_INT 31
6875: EQUAL
6876: IFFALSE 6894
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
6878: LD_VAR 0 5
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: PPUSH
6887: LD_INT 3
6889: PPUSH
6890: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6894: LD_VAR 0 5
6898: PUSH
6899: LD_INT 1
6901: ARRAY
6902: PPUSH
6903: LD_VAR 0 4
6907: PPUSH
6908: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6912: LD_ADDR_VAR 0 5
6916: PUSH
6917: LD_VAR 0 5
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL_OW 3
6929: ST_TO_ADDR
// end else
6930: GO 6993
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
6932: LD_INT 22
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 34
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: IFFALSE 6993
// begin PlaceUnitArea ( veh , startArea , false ) ;
6962: LD_VAR 0 4
6966: PPUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_INT 0
6972: PPUSH
6973: CALL_OW 49
// Connect ( veh ) ;
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL 21277 0 1
// wait ( 0 0$2 ) ;
6986: LD_INT 70
6988: PPUSH
6989: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
6993: LD_VAR 0 4
6997: PPUSH
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 6
7005: ARRAY
7006: PPUSH
7007: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7011: LD_VAR 0 4
7015: PPUSH
7016: LD_INT 20
7018: PPUSH
7019: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7023: LD_VAR 0 2
7027: PUSH
7028: LD_INT 7
7030: ARRAY
7031: PUSH
7032: LD_VAR 0 4
7036: PPUSH
7037: CALL_OW 264
7041: PUSH
7042: LD_INT 51
7044: PUSH
7045: LD_INT 32
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: IN
7052: AND
7053: IFFALSE 7104
// begin for j := 1 to 2 do
7055: LD_ADDR_VAR 0 3
7059: PUSH
7060: DOUBLE
7061: LD_INT 1
7063: DEC
7064: ST_TO_ADDR
7065: LD_INT 2
7067: PUSH
7068: FOR_TO
7069: IFFALSE 7102
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7071: LD_VAR 0 4
7075: PPUSH
7076: LD_VAR 0 3
7080: PPUSH
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 7
7088: ARRAY
7089: PUSH
7090: LD_VAR 0 3
7094: ARRAY
7095: PPUSH
7096: CALL_OW 291
7100: GO 7068
7102: POP
7103: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7104: LD_VAR 0 4
7108: PPUSH
7109: LD_INT 185
7111: PPUSH
7112: LD_INT 144
7114: PPUSH
7115: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7119: LD_VAR 0 4
7123: PPUSH
7124: CALL_OW 263
7128: PUSH
7129: LD_INT 1
7131: EQUAL
7132: PUSH
7133: LD_VAR 0 7
7137: NOT
7138: AND
7139: PUSH
7140: LD_VAR 0 4
7144: PPUSH
7145: CALL_OW 311
7149: PPUSH
7150: CALL_OW 257
7154: PUSH
7155: LD_INT 2
7157: EQUAL
7158: AND
7159: IFFALSE 7254
// begin hasCamera := true ;
7161: LD_ADDR_VAR 0 7
7165: PUSH
7166: LD_INT 1
7168: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7169: LD_ADDR_VAR 0 8
7173: PUSH
7174: LD_VAR 0 4
7178: PPUSH
7179: CALL_OW 311
7183: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_INT 177
7191: PPUSH
7192: LD_INT 138
7194: PPUSH
7195: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7199: LD_VAR 0 8
7203: PPUSH
7204: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7208: LD_VAR 0 8
7212: PPUSH
7213: LD_INT 190
7215: PPUSH
7216: LD_INT 150
7218: PPUSH
7219: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7223: LD_VAR 0 8
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7237: LD_VAR 0 8
7241: PPUSH
7242: LD_INT 170
7244: PPUSH
7245: LD_INT 103
7247: PPUSH
7248: CALL_OW 171
// end else
7252: GO 7296
// begin AddComWait ( veh , 0 0$2 ) ;
7254: LD_VAR 0 4
7258: PPUSH
7259: LD_INT 70
7261: PPUSH
7262: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
7266: LD_VAR 0 4
7270: PPUSH
7271: LD_INT 179
7273: PPUSH
7274: LD_INT 129
7276: PPUSH
7277: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
7281: LD_VAR 0 4
7285: PPUSH
7286: LD_INT 170
7288: PPUSH
7289: LD_INT 103
7291: PPUSH
7292: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
7296: LD_INT 70
7298: PPUSH
7299: CALL_OW 67
// end ;
7303: GO 6723
7305: POP
7306: POP
// end ; if tmp then
7307: LD_VAR 0 5
7311: IFFALSE 7456
// begin for i in tmp do
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_VAR 0 5
7322: PUSH
7323: FOR_IN
7324: IFFALSE 7454
// begin SetDir ( i , 4 ) ;
7326: LD_VAR 0 2
7330: PPUSH
7331: LD_INT 4
7333: PPUSH
7334: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7338: LD_VAR 0 2
7342: PPUSH
7343: LD_INT 1
7345: PPUSH
7346: LD_INT 0
7348: PPUSH
7349: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7353: LD_VAR 0 2
7357: PPUSH
7358: LD_INT 185
7360: PPUSH
7361: LD_INT 144
7363: PPUSH
7364: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
7368: LD_VAR 0 2
7372: PPUSH
7373: CALL_OW 257
7377: PUSH
7378: LD_INT 2
7380: EQUAL
7381: PUSH
7382: LD_VAR 0 7
7386: NOT
7387: AND
7388: IFFALSE 7415
// begin hasCamera := true ;
7390: LD_ADDR_VAR 0 7
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
7398: LD_VAR 0 2
7402: PPUSH
7403: LD_INT 190
7405: PPUSH
7406: LD_INT 150
7408: PPUSH
7409: CALL_OW 217
// end else
7413: GO 7430
// AddComMoveXY ( i , 179 , 129 ) ;
7415: LD_VAR 0 2
7419: PPUSH
7420: LD_INT 179
7422: PPUSH
7423: LD_INT 129
7425: PPUSH
7426: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
7430: LD_VAR 0 2
7434: PPUSH
7435: LD_INT 170
7437: PPUSH
7438: LD_INT 103
7440: PPUSH
7441: CALL_OW 171
// wait ( 0 0$2 ) ;
7445: LD_INT 70
7447: PPUSH
7448: CALL_OW 67
// end ;
7452: GO 7323
7454: POP
7455: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
7456: LD_EXP 10
7460: PPUSH
7461: LD_INT 163
7463: PPUSH
7464: LD_INT 89
7466: PPUSH
7467: CALL_OW 171
// wait ( 0 0$2 ) ;
7471: LD_INT 70
7473: PPUSH
7474: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
7478: LD_INT 175
7480: PPUSH
7481: LD_INT 117
7483: PPUSH
7484: CALL_OW 84
// CenterOnUnits ( Heike ) ;
7488: LD_EXP 10
7492: PPUSH
7493: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
7497: LD_EXP 10
7501: PPUSH
7502: LD_STRING DH-Intro-1
7504: PPUSH
7505: CALL_OW 88
// if Markov then
7509: LD_EXP 17
7513: IFFALSE 8080
// begin Say ( Markov , DMar-Intro-2 ) ;
7515: LD_EXP 17
7519: PPUSH
7520: LD_STRING DMar-Intro-2
7522: PPUSH
7523: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
7527: LD_EXP 17
7531: PPUSH
7532: LD_STRING DMar-Intro-3
7534: PPUSH
7535: CALL_OW 88
// wait ( 0 0$1 ) ;
7539: LD_INT 35
7541: PPUSH
7542: CALL_OW 67
// CenterOnUnits ( Heike ) ;
7546: LD_EXP 10
7550: PPUSH
7551: CALL_OW 85
// if Kurt then
7555: LD_EXP 20
7559: IFFALSE 7611
// begin if IsInUnit ( Kurt ) then
7561: LD_EXP 20
7565: PPUSH
7566: CALL_OW 310
7570: IFFALSE 7581
// ComExit ( Kurt ) ;
7572: LD_EXP 20
7576: PPUSH
7577: CALL 50445 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
7581: LD_EXP 20
7585: PPUSH
7586: LD_INT 130
7588: PPUSH
7589: LD_INT 56
7591: PPUSH
7592: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
7596: LD_EXP 20
7600: PPUSH
7601: LD_INT 129
7603: PPUSH
7604: LD_INT 56
7606: PPUSH
7607: CALL_OW 178
// end ; if Kaia then
7611: LD_EXP 15
7615: IFFALSE 7795
// begin Say ( Kaia , DK-Intro-4 ) ;
7617: LD_EXP 15
7621: PPUSH
7622: LD_STRING DK-Intro-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
7629: LD_EXP 17
7633: PPUSH
7634: LD_STRING DMar-Intro-5
7636: PPUSH
7637: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
7641: LD_EXP 17
7645: PPUSH
7646: LD_STRING DMar-Intro-6
7648: PPUSH
7649: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
7653: LD_EXP 19
7657: PPUSH
7658: LD_STRING DO-Intro-7
7660: PPUSH
7661: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
7665: LD_INT 160
7667: PPUSH
7668: LD_INT 85
7670: PPUSH
7671: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
7675: LD_EXP 17
7679: PPUSH
7680: LD_STRING DMar-Intro-8
7682: PPUSH
7683: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
7687: LD_EXP 17
7691: PPUSH
7692: LD_STRING DMar-Intro-9
7694: PPUSH
7695: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
7699: LD_EXP 17
7703: PPUSH
7704: LD_STRING DMar-Intro-10
7706: PPUSH
7707: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
7711: LD_EXP 17
7715: PPUSH
7716: LD_STRING DMar-Intro-11
7718: PPUSH
7719: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
7723: LD_EXP 11
7727: PPUSH
7728: LD_STRING DG-Intro-12
7730: PPUSH
7731: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
7735: LD_EXP 11
7739: PPUSH
7740: LD_STRING DG-Intro-13
7742: PPUSH
7743: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
7747: LD_EXP 11
7751: PPUSH
7752: LD_STRING DG-Intro-14
7754: PPUSH
7755: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
7759: LD_EXP 11
7763: PPUSH
7764: LD_STRING DG-Intro-15
7766: PPUSH
7767: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
7771: LD_EXP 10
7775: PPUSH
7776: LD_STRING DH-Intro-16
7778: PPUSH
7779: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
7783: LD_EXP 17
7787: PPUSH
7788: LD_STRING DMar-Intro-17
7790: PPUSH
7791: CALL_OW 88
// end ; if Kurt and Mike then
7795: LD_EXP 20
7799: PUSH
7800: LD_EXP 12
7804: AND
7805: IFFALSE 8080
// begin CenterNowOnUnits ( Kurt ) ;
7807: LD_EXP 20
7811: PPUSH
7812: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
7816: LD_EXP 20
7820: PPUSH
7821: LD_EXP 10
7825: PPUSH
7826: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
7830: LD_EXP 20
7834: PPUSH
7835: LD_STRING DKs-Intro-18
7837: PPUSH
7838: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
7842: LD_EXP 20
7846: PPUSH
7847: LD_STRING DKs-Intro-19
7849: PPUSH
7850: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
7854: LD_EXP 12
7858: PPUSH
7859: CALL_OW 87
// if IsInUnit ( Mike ) then
7863: LD_EXP 12
7867: PPUSH
7868: CALL_OW 310
7872: IFFALSE 7883
// ComExit ( Mike ) ;
7874: LD_EXP 12
7878: PPUSH
7879: CALL 50445 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
7883: LD_EXP 12
7887: PPUSH
7888: LD_INT 129
7890: PPUSH
7891: LD_INT 53
7893: PPUSH
7894: CALL_OW 171
// AddComHold ( Mike ) ;
7898: LD_EXP 12
7902: PPUSH
7903: CALL_OW 200
// wait ( 0 0$2 ) ;
7907: LD_INT 70
7909: PPUSH
7910: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
7914: LD_EXP 12
7918: PPUSH
7919: LD_STRING DM-Intro-20
7921: PPUSH
7922: CALL_OW 88
// scoutActive := Query ( Scout ) ;
7926: LD_ADDR_EXP 3
7930: PUSH
7931: LD_STRING Scout
7933: PPUSH
7934: CALL_OW 97
7938: ST_TO_ADDR
// if scoutActive = 1 then
7939: LD_EXP 3
7943: PUSH
7944: LD_INT 1
7946: EQUAL
7947: IFFALSE 8044
// begin CenterNowOnUnits ( Kurt ) ;
7949: LD_EXP 20
7953: PPUSH
7954: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
7958: LD_EXP 10
7962: PPUSH
7963: LD_STRING DH-Intro-21
7965: PPUSH
7966: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
7970: LD_EXP 12
7974: PPUSH
7975: LD_STRING DM-Intro-22
7977: PPUSH
7978: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
7982: LD_EXP 20
7986: PPUSH
7987: LD_STRING DKs-Intro-23
7989: PPUSH
7990: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
7994: LD_EXP 20
7998: PPUSH
7999: LD_INT 5
8001: PPUSH
8002: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8006: LD_EXP 12
8010: PPUSH
8011: LD_INT 5
8013: PPUSH
8014: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8018: LD_EXP 20
8022: PUSH
8023: LD_EXP 12
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PPUSH
8032: LD_INT 104
8034: PPUSH
8035: LD_INT 66
8037: PPUSH
8038: CALL_OW 111
// end else
8042: GO 8080
// begin Say ( Heike , DH-Intro-a-21 ) ;
8044: LD_EXP 10
8048: PPUSH
8049: LD_STRING DH-Intro-a-21
8051: PPUSH
8052: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8056: LD_EXP 12
8060: PPUSH
8061: LD_STRING DM-Intro-a-22
8063: PPUSH
8064: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8068: LD_EXP 20
8072: PPUSH
8073: LD_STRING DKs-Intro-a-23
8075: PPUSH
8076: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8080: LD_INT 0
8082: PPUSH
8083: CALL 50029 0 1
// music_nat := music_auto ;
8087: LD_ADDR_OWVAR 71
8091: PUSH
8092: LD_INT 0
8094: ST_TO_ADDR
// music_class := music_auto ;
8095: LD_ADDR_OWVAR 72
8099: PUSH
8100: LD_INT 0
8102: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8103: LD_STRING M1
8105: PPUSH
8106: CALL_OW 337
// wait ( 0 0$3 ) ;
8110: LD_INT 105
8112: PPUSH
8113: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8117: LD_EXP 10
8121: PPUSH
8122: LD_STRING DH-Base-1
8124: PPUSH
8125: CALL_OW 88
// if Kaia then
8129: LD_EXP 15
8133: IFFALSE 8243
// begin Say ( Kaia , DK-Base-2 ) ;
8135: LD_EXP 15
8139: PPUSH
8140: LD_STRING DK-Base-2
8142: PPUSH
8143: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8147: LD_EXP 10
8151: PPUSH
8152: LD_STRING DH-Base-3
8154: PPUSH
8155: CALL_OW 88
// if Aviradze then
8159: LD_EXP 21
8163: IFFALSE 8243
// begin Say ( Aviradze , DA-Base-4 ) ;
8165: LD_EXP 21
8169: PPUSH
8170: LD_STRING DA-Base-4
8172: PPUSH
8173: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
8177: LD_EXP 15
8181: PPUSH
8182: LD_STRING DK-Base-5
8184: PPUSH
8185: CALL_OW 88
// if Markov then
8189: LD_EXP 17
8193: IFFALSE 8243
// begin Say ( Markov , DMar-Base-6 ) ;
8195: LD_EXP 17
8199: PPUSH
8200: LD_STRING DMar-Base-6
8202: PPUSH
8203: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
8207: LD_EXP 15
8211: PPUSH
8212: LD_STRING DK-Base-7
8214: PPUSH
8215: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
8219: LD_EXP 17
8223: PPUSH
8224: LD_STRING DMar-Base-8
8226: PPUSH
8227: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
8231: LD_EXP 17
8235: PPUSH
8236: LD_STRING DMar-Base-9
8238: PPUSH
8239: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
8243: CALL_OW 22
// end ;
8247: LD_VAR 0 1
8251: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
8252: LD_EXP 5
8256: IFFALSE 9207
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin InGameOn ;
8265: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
8269: LD_EXP 12
8273: PUSH
8274: LD_EXP 20
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PPUSH
8283: LD_EXP 10
8287: PPUSH
8288: CALL_OW 119
// ComExit ( Heike ) ;
8292: LD_EXP 10
8296: PPUSH
8297: CALL 50445 0 1
// if IsOk ( Mike ) then
8301: LD_EXP 12
8305: PPUSH
8306: CALL_OW 302
8310: IFFALSE 8328
// AddComTurnUnit ( Heike , Mike ) else
8312: LD_EXP 10
8316: PPUSH
8317: LD_EXP 12
8321: PPUSH
8322: CALL_OW 179
8326: GO 8342
// AddComTurnUnit ( Heike , Kurt ) ;
8328: LD_EXP 10
8332: PPUSH
8333: LD_EXP 20
8337: PPUSH
8338: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
8342: LD_EXP 12
8346: PPUSH
8347: CALL_OW 302
8351: PUSH
8352: LD_EXP 20
8356: PPUSH
8357: CALL_OW 302
8361: AND
8362: IFFALSE 8613
// begin CenterNowOnUnits ( Mike ) ;
8364: LD_EXP 12
8368: PPUSH
8369: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
8373: LD_EXP 12
8377: PPUSH
8378: LD_STRING DM-Scout-1
8380: PPUSH
8381: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
8385: LD_EXP 10
8389: PPUSH
8390: LD_STRING DH-Scout-2
8392: PPUSH
8393: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
8397: LD_EXP 20
8401: PPUSH
8402: LD_STRING DKs-Scout-3
8404: PPUSH
8405: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
8409: LD_EXP 10
8413: PPUSH
8414: LD_STRING DH-Scout-4
8416: PPUSH
8417: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
8421: LD_EXP 10
8425: PPUSH
8426: LD_STRING DH-Scout-5
8428: PPUSH
8429: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
8433: LD_ADDR_VAR 0 2
8437: PUSH
8438: LD_INT 72
8440: PUSH
8441: LD_INT 122
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 89
8450: PUSH
8451: LD_INT 131
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 99
8460: PUSH
8461: LD_INT 139
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 100
8470: PUSH
8471: LD_INT 148
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: ST_TO_ADDR
// for i in tmp do
8484: LD_ADDR_VAR 0 1
8488: PUSH
8489: LD_VAR 0 2
8493: PUSH
8494: FOR_IN
8495: IFFALSE 8553
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
8497: LD_VAR 0 1
8501: PUSH
8502: LD_INT 1
8504: ARRAY
8505: PPUSH
8506: LD_VAR 0 1
8510: PUSH
8511: LD_INT 2
8513: ARRAY
8514: PPUSH
8515: LD_INT 2
8517: PPUSH
8518: LD_INT 6
8520: NEG
8521: PPUSH
8522: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
8526: LD_VAR 0 1
8530: PUSH
8531: LD_INT 1
8533: ARRAY
8534: PPUSH
8535: LD_VAR 0 1
8539: PUSH
8540: LD_INT 2
8542: ARRAY
8543: PPUSH
8544: LD_INT 2
8546: PPUSH
8547: CALL_OW 331
// end ;
8551: GO 8494
8553: POP
8554: POP
// CenterOnXY ( 83 , 132 ) ;
8555: LD_INT 83
8557: PPUSH
8558: LD_INT 132
8560: PPUSH
8561: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
8565: LD_EXP 20
8569: PPUSH
8570: LD_STRING DKs-Scout-6
8572: PPUSH
8573: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
8577: LD_EXP 12
8581: PPUSH
8582: LD_STRING DM-Scout-7
8584: PPUSH
8585: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
8589: LD_EXP 12
8593: PPUSH
8594: LD_STRING DM-Scout-8
8596: PPUSH
8597: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
8601: LD_EXP 20
8605: PPUSH
8606: LD_STRING DKs-Scout-9
8608: PPUSH
8609: CALL_OW 88
// end ; if IsDead ( Mike ) then
8613: LD_EXP 12
8617: PPUSH
8618: CALL_OW 301
8622: IFFALSE 8789
// begin CenterNowOnUnits ( Kurt ) ;
8624: LD_EXP 20
8628: PPUSH
8629: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
8633: LD_EXP 20
8637: PPUSH
8638: LD_STRING DKs-Scout-b-1
8640: PPUSH
8641: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
8645: LD_EXP 20
8649: PPUSH
8650: LD_STRING DKs-Scout-b-2
8652: PPUSH
8653: CALL_OW 88
// if IsOk ( Givi ) then
8657: LD_EXP 11
8661: PPUSH
8662: CALL_OW 302
8666: IFFALSE 8741
// begin ComExit ( Givi ) ;
8668: LD_EXP 11
8672: PPUSH
8673: CALL 50445 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
8677: LD_EXP 11
8681: PPUSH
8682: LD_EXP 20
8686: PPUSH
8687: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
8691: LD_EXP 11
8695: PPUSH
8696: LD_STRING DG-Scout-b-3
8698: PPUSH
8699: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
8703: LD_EXP 11
8707: PPUSH
8708: LD_STRING DG-Scout-b-4
8710: PPUSH
8711: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
8715: LD_EXP 11
8719: PPUSH
8720: LD_STRING DG-Scout-b-5
8722: PPUSH
8723: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
8727: LD_EXP 10
8731: PPUSH
8732: LD_STRING DH-Scout-b-6
8734: PPUSH
8735: CALL_OW 88
// end else
8739: GO 8753
// Say ( Heike , DH-Scout-a-4 ) ;
8741: LD_EXP 10
8745: PPUSH
8746: LD_STRING DH-Scout-a-4
8748: PPUSH
8749: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
8753: LD_EXP 20
8757: PPUSH
8758: LD_STRING DKs-Scout-b-7
8760: PPUSH
8761: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
8765: LD_EXP 20
8769: PPUSH
8770: LD_STRING DKs-Scout-b-8
8772: PPUSH
8773: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
8777: LD_EXP 20
8781: PPUSH
8782: LD_STRING DKs-Scout-b-9
8784: PPUSH
8785: CALL_OW 88
// end ; if IsDead ( Kurt ) then
8789: LD_EXP 20
8793: PPUSH
8794: CALL_OW 301
8798: IFFALSE 9077
// begin CenterNowOnUnits ( Mike ) ;
8800: LD_EXP 12
8804: PPUSH
8805: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
8809: LD_EXP 12
8813: PPUSH
8814: LD_STRING DM-Scout-a-1
8816: PPUSH
8817: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
8821: LD_EXP 12
8825: PPUSH
8826: LD_STRING DM-Scout-a-2
8828: PPUSH
8829: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
8833: LD_EXP 12
8837: PPUSH
8838: CALL_OW 256
8842: PUSH
8843: LD_INT 1000
8845: LESS
8846: IFFALSE 8862
// Say ( Heike , DH-Scout-a-3 ) else
8848: LD_EXP 10
8852: PPUSH
8853: LD_STRING DH-Scout-a-3
8855: PPUSH
8856: CALL_OW 88
8860: GO 8874
// Say ( Heike , DH-Scout-a-4 ) ;
8862: LD_EXP 10
8866: PPUSH
8867: LD_STRING DH-Scout-a-4
8869: PPUSH
8870: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
8874: LD_EXP 12
8878: PPUSH
8879: LD_STRING DM-Scout-a-5
8881: PPUSH
8882: CALL_OW 88
// if IsOk ( Kaia ) then
8886: LD_EXP 15
8890: PPUSH
8891: CALL_OW 302
8895: IFFALSE 9077
// begin ComExit ( Kaia ) ;
8897: LD_EXP 15
8901: PPUSH
8902: CALL 50445 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
8906: LD_EXP 15
8910: PPUSH
8911: LD_EXP 12
8915: PPUSH
8916: CALL_OW 172
// wait ( 0 0$2 ) ;
8920: LD_INT 70
8922: PPUSH
8923: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
8927: LD_EXP 15
8931: PPUSH
8932: LD_EXP 12
8936: PPUSH
8937: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
8941: LD_EXP 12
8945: PPUSH
8946: LD_EXP 15
8950: PPUSH
8951: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
8955: LD_EXP 15
8959: PPUSH
8960: LD_STRING DK-Scout-a-6
8962: PPUSH
8963: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
8967: LD_EXP 12
8971: PPUSH
8972: LD_STRING DM-Scout-a-7
8974: PPUSH
8975: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
8979: LD_EXP 15
8983: PPUSH
8984: LD_STRING DK-Scout-a-8
8986: PPUSH
8987: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
8991: LD_EXP 15
8995: PPUSH
8996: LD_STRING DK-Scout-a-9
8998: PPUSH
8999: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9003: LD_EXP 10
9007: PPUSH
9008: LD_STRING DH-Scout-a-10
9010: PPUSH
9011: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9015: LD_EXP 12
9019: PPUSH
9020: LD_EXP 10
9024: PPUSH
9025: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9029: LD_EXP 12
9033: PPUSH
9034: LD_STRING DM-Scout-a-11
9036: PPUSH
9037: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9041: LD_EXP 12
9045: PPUSH
9046: LD_STRING DM-Scout-a-12
9048: PPUSH
9049: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9053: LD_EXP 12
9057: PPUSH
9058: LD_STRING DM-Scout-a-13
9060: PPUSH
9061: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9065: LD_EXP 12
9069: PPUSH
9070: LD_STRING DM-Scout-a-14
9072: PPUSH
9073: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9077: LD_EXP 11
9081: PPUSH
9082: CALL_OW 302
9086: IFFALSE 9114
// begin Say ( Givi , DG-Scout-10 ) ;
9088: LD_EXP 11
9092: PPUSH
9093: LD_STRING DG-Scout-10
9095: PPUSH
9096: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9100: LD_EXP 11
9104: PPUSH
9105: LD_STRING DG-Scout-11
9107: PPUSH
9108: CALL_OW 88
// end else
9112: GO 9171
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9114: LD_EXP 22
9118: PPUSH
9119: LD_INT 26
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: PPUSH
9134: LD_STRING DArm-Scout-10
9136: PPUSH
9137: CALL 226 0 2
9141: NOT
9142: IFFALSE 9171
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9144: LD_EXP 22
9148: PPUSH
9149: LD_INT 26
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PPUSH
9159: CALL_OW 72
9163: PPUSH
9164: LD_STRING DArf-Scout-10
9166: PPUSH
9167: CALL 226 0 2
// Say ( Heike , DH-Scout-12 ) ;
9171: LD_EXP 10
9175: PPUSH
9176: LD_STRING DH-Scout-12
9178: PPUSH
9179: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
9183: LD_EXP 10
9187: PPUSH
9188: LD_STRING DH-Scout-13
9190: PPUSH
9191: CALL_OW 88
// InGameOff ;
9195: CALL_OW 9
// usAttacksAllowed := true ;
9199: LD_ADDR_EXP 6
9203: PUSH
9204: LD_INT 1
9206: ST_TO_ADDR
// end ;
9207: PPOPN 2
9209: END
// every 0 0$1 trigger scoutFailed do
9210: LD_EXP 4
9214: IFFALSE 9288
9216: GO 9218
9218: DISABLE
// begin wait ( 0 0$30 ) ;
9219: LD_INT 1050
9221: PPUSH
9222: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
9226: LD_EXP 10
9230: PPUSH
9231: LD_STRING DH-Scout-c-1
9233: PPUSH
9234: CALL_OW 88
// if not IsOk ( Givi ) then
9238: LD_EXP 11
9242: PPUSH
9243: CALL_OW 302
9247: NOT
9248: IFFALSE 9252
// exit ;
9250: GO 9288
// Say ( Givi , DG-Scout-c-2 ) ;
9252: LD_EXP 11
9256: PPUSH
9257: LD_STRING DG-Scout-c-2
9259: PPUSH
9260: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
9264: LD_EXP 11
9268: PPUSH
9269: LD_STRING DG-Scout-c-3
9271: PPUSH
9272: CALL_OW 88
// Say ( Heike , DH-Scout-c-4 ) ;
9276: LD_EXP 10
9280: PPUSH
9281: LD_STRING DH-Scout-c-4
9283: PPUSH
9284: CALL_OW 88
// end ;
9288: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
9289: LD_INT 22
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 7
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PPUSH
9313: CALL_OW 69
9317: PUSH
9318: LD_EXP 21
9322: PPUSH
9323: CALL_OW 302
9327: AND
9328: IFFALSE 9413
9330: GO 9332
9332: DISABLE
// begin DialogueOn ;
9333: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
9337: LD_EXP 21
9341: PPUSH
9342: LD_STRING DA-Lab-1
9344: PPUSH
9345: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
9349: LD_EXP 10
9353: PPUSH
9354: LD_STRING DH-Lab-2
9356: PPUSH
9357: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
9361: LD_EXP 21
9365: PPUSH
9366: LD_STRING DA-Lab-3
9368: PPUSH
9369: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
9373: LD_EXP 21
9377: PPUSH
9378: LD_STRING DA-Lab-4
9380: PPUSH
9381: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
9385: LD_EXP 21
9389: PPUSH
9390: LD_STRING DA-Lab-5
9392: PPUSH
9393: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
9397: LD_EXP 10
9401: PPUSH
9402: LD_STRING DH-Lab-6
9404: PPUSH
9405: CALL_OW 88
// DialogueOff ;
9409: CALL_OW 7
// end ;
9413: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
9414: LD_INT 7
9416: PPUSH
9417: LD_INT 2
9419: PPUSH
9420: CALL_OW 321
9424: PUSH
9425: LD_INT 2
9427: EQUAL
9428: PUSH
9429: LD_EXP 11
9433: PPUSH
9434: CALL_OW 302
9438: AND
9439: IFFALSE 9608
9441: GO 9443
9443: DISABLE
// begin DialogueOn ;
9444: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
9448: LD_EXP 11
9452: PPUSH
9453: LD_STRING DG-Opt-1
9455: PPUSH
9456: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
9460: LD_EXP 10
9464: PPUSH
9465: LD_STRING DH-Opt-2
9467: PPUSH
9468: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
9472: LD_EXP 11
9476: PPUSH
9477: LD_STRING DG-Opt-3
9479: PPUSH
9480: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
9484: LD_EXP 11
9488: PPUSH
9489: LD_STRING DG-Opt-4
9491: PPUSH
9492: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
9496: LD_EXP 10
9500: PPUSH
9501: LD_STRING DH-Opt-5
9503: PPUSH
9504: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
9508: LD_EXP 11
9512: PPUSH
9513: LD_STRING DG-Opt-6
9515: PPUSH
9516: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
9520: LD_EXP 10
9524: PPUSH
9525: LD_STRING DH-Opt-7
9527: PPUSH
9528: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
9532: LD_EXP 11
9536: PPUSH
9537: LD_STRING DG-Opt-8
9539: PPUSH
9540: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
9544: LD_EXP 11
9548: PPUSH
9549: LD_STRING DG-Opt-9
9551: PPUSH
9552: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
9556: LD_EXP 10
9560: PPUSH
9561: LD_STRING DH-Opt-10
9563: PPUSH
9564: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
9568: LD_EXP 11
9572: PPUSH
9573: LD_STRING DG-Opt-11
9575: PPUSH
9576: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
9580: LD_EXP 11
9584: PPUSH
9585: LD_STRING DG-Opt-12
9587: PPUSH
9588: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
9592: LD_EXP 10
9596: PPUSH
9597: LD_STRING DH-Opt-13
9599: PPUSH
9600: CALL_OW 88
// DialogueOff ;
9604: CALL_OW 7
// end ;
9608: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
9609: LD_INT 40
9611: PPUSH
9612: LD_INT 2
9614: PPUSH
9615: CALL_OW 321
9619: PUSH
9620: LD_INT 2
9622: EQUAL
9623: PUSH
9624: LD_EXP 13
9628: PPUSH
9629: CALL_OW 302
9633: AND
9634: IFFALSE 9884
9636: GO 9638
9638: DISABLE
// begin DialogueOn ;
9639: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
9643: LD_EXP 13
9647: PPUSH
9648: LD_STRING DI-Roc-1
9650: PPUSH
9651: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
9655: LD_EXP 10
9659: PPUSH
9660: LD_STRING DH-Roc-2
9662: PPUSH
9663: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
9667: LD_EXP 13
9671: PPUSH
9672: LD_STRING DI-Roc-3
9674: PPUSH
9675: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
9679: LD_EXP 13
9683: PPUSH
9684: LD_STRING DI-Roc-4
9686: PPUSH
9687: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
9691: LD_EXP 15
9695: PPUSH
9696: LD_STRING DK-Roc-5
9698: PPUSH
9699: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
9703: LD_EXP 15
9707: PPUSH
9708: LD_STRING DK-Roc-6
9710: PPUSH
9711: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
9715: LD_EXP 11
9719: PPUSH
9720: LD_STRING DG-Roc-7
9722: PPUSH
9723: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
9727: LD_EXP 11
9731: PPUSH
9732: LD_STRING DG-Roc-8
9734: PPUSH
9735: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
9739: LD_EXP 17
9743: PPUSH
9744: CALL_OW 302
9748: PUSH
9749: LD_EXP 15
9753: PPUSH
9754: CALL_OW 302
9758: AND
9759: PUSH
9760: LD_EXP 11
9764: PPUSH
9765: CALL_OW 302
9769: AND
9770: IFFALSE 9880
// begin Say ( Markov , DMar-Roc-9 ) ;
9772: LD_EXP 17
9776: PPUSH
9777: LD_STRING DMar-Roc-9
9779: PPUSH
9780: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
9784: LD_EXP 17
9788: PPUSH
9789: LD_STRING DMar-Roc-10
9791: PPUSH
9792: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
9796: LD_EXP 15
9800: PPUSH
9801: LD_STRING DK-Roc-11
9803: PPUSH
9804: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
9808: LD_EXP 17
9812: PPUSH
9813: LD_STRING DMar-Roc-12
9815: PPUSH
9816: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
9820: LD_EXP 15
9824: PPUSH
9825: LD_STRING DK-Roc-13
9827: PPUSH
9828: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
9832: LD_EXP 11
9836: PPUSH
9837: LD_STRING DG-Roc-14
9839: PPUSH
9840: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
9844: LD_EXP 17
9848: PPUSH
9849: LD_STRING DMar-Roc-15
9851: PPUSH
9852: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
9856: LD_EXP 17
9860: PPUSH
9861: LD_STRING DMar-Roc-16
9863: PPUSH
9864: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
9868: LD_EXP 15
9872: PPUSH
9873: LD_STRING DK-Roc-17
9875: PPUSH
9876: CALL_OW 88
// end ; DialogueOff ;
9880: CALL_OW 7
// end ;
9884: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
9885: LD_INT 22
9887: PUSH
9888: LD_INT 1
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 21
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 23
9907: PUSH
9908: LD_INT 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PUSH
9925: LD_INT 6
9927: LESS
9928: PUSH
9929: LD_INT 22
9931: PUSH
9932: LD_INT 1
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 21
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 25
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: PUSH
9969: LD_INT 2
9971: LESS
9972: OR
9973: IFFALSE 11017
9975: GO 9977
9977: DISABLE
9978: LD_INT 0
9980: PPUSH
9981: PPUSH
9982: PPUSH
// begin usAttacksAllowed := false ;
9983: LD_ADDR_EXP 6
9987: PUSH
9988: LD_INT 0
9990: ST_TO_ADDR
// usSurrender := true ;
9991: LD_ADDR_EXP 7
9995: PUSH
9996: LD_INT 1
9998: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
9999: LD_INT 1
10001: PPUSH
10002: LD_INT 2
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: LD_INT 1
10010: PPUSH
10011: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
10015: LD_ADDR_VAR 0 1
10019: PUSH
10020: LD_INT 22
10022: PUSH
10023: LD_INT 2
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 1
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 60
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: PUSH
10056: FOR_IN
10057: IFFALSE 10070
// ComStop ( i ) ;
10059: LD_VAR 0 1
10063: PPUSH
10064: CALL_OW 141
10068: GO 10056
10070: POP
10071: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
10072: LD_ADDR_VAR 0 1
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_INT 2
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 3
10089: PUSH
10090: LD_INT 50
10092: PUSH
10093: EMPTY
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: PPUSH
10115: CALL_OW 69
10119: PUSH
10120: FOR_IN
10121: IFFALSE 10137
// SetLives ( i , 251 ) ;
10123: LD_VAR 0 1
10127: PPUSH
10128: LD_INT 251
10130: PPUSH
10131: CALL_OW 234
10135: GO 10120
10137: POP
10138: POP
// InGameOn ;
10139: CALL_OW 8
// ComExit ( usCommander ) ;
10143: LD_EXP 25
10147: PPUSH
10148: CALL 50445 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
10152: LD_EXP 25
10156: PPUSH
10157: LD_INT 81
10159: PPUSH
10160: LD_INT 143
10162: PPUSH
10163: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
10167: LD_EXP 25
10171: PPUSH
10172: LD_INT 81
10174: PPUSH
10175: LD_INT 139
10177: PPUSH
10178: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
10182: LD_INT 81
10184: PPUSH
10185: LD_INT 144
10187: PPUSH
10188: LD_INT 2
10190: PPUSH
10191: LD_INT 10
10193: NEG
10194: PPUSH
10195: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
10199: LD_EXP 25
10203: PPUSH
10204: CALL_OW 87
// wait ( 0 0$2 ) ;
10208: LD_INT 70
10210: PPUSH
10211: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
10215: LD_EXP 25
10219: PPUSH
10220: LD_STRING DCa-Surrender-1
10222: PPUSH
10223: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
10227: LD_EXP 10
10231: PPUSH
10232: LD_STRING DH-Surrender-2
10234: PPUSH
10235: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
10239: LD_EXP 10
10243: PPUSH
10244: CALL_OW 310
10248: PPUSH
10249: CALL_OW 247
10253: PUSH
10254: LD_INT 3
10256: EQUAL
10257: IFFALSE 10275
// begin ComExit ( Heike ) ;
10259: LD_EXP 10
10263: PPUSH
10264: CALL 50445 0 1
// wait ( 3 ) ;
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
10275: LD_EXP 10
10279: PPUSH
10280: LD_INT 82
10282: PPUSH
10283: LD_INT 133
10285: PPUSH
10286: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
10290: LD_EXP 10
10294: PPUSH
10295: LD_EXP 25
10299: PPUSH
10300: CALL_OW 179
// wait ( 0 0$3 ) ;
10304: LD_INT 105
10306: PPUSH
10307: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
10311: LD_EXP 10
10315: PPUSH
10316: LD_STRING DH-Surrender-3
10318: PPUSH
10319: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
10323: LD_EXP 10
10327: PPUSH
10328: LD_STRING DH-Surrender-4
10330: PPUSH
10331: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
10335: LD_INT 81
10337: PPUSH
10338: LD_INT 144
10340: PPUSH
10341: LD_INT 2
10343: PPUSH
10344: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
10348: LD_INT 1
10350: PPUSH
10351: LD_INT 2
10353: PPUSH
10354: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
10358: LD_ADDR_VAR 0 1
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_INT 1
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 23
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 54
10385: PUSH
10386: EMPTY
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: PUSH
10399: FOR_IN
10400: IFFALSE 10413
// ComExit ( i ) ;
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL 50445 0 1
10411: GO 10399
10413: POP
10414: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
10415: LD_ADDR_VAR 0 3
10419: PUSH
10420: LD_INT 22
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 25
10432: PUSH
10433: LD_INT 4
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_INT 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: LD_INT 50
10469: PUSH
10470: EMPTY
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 69
10485: ST_TO_ADDR
// if sci and hurts then
10486: LD_VAR 0 3
10490: PUSH
10491: LD_VAR 0 2
10495: AND
10496: IFFALSE 10558
// begin for i := 1 to hurts do
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: DOUBLE
10504: LD_INT 1
10506: DEC
10507: ST_TO_ADDR
10508: LD_VAR 0 2
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10556
// if i <= sci then
10516: LD_VAR 0 1
10520: PUSH
10521: LD_VAR 0 3
10525: LESSEQUAL
10526: IFFALSE 10554
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
10528: LD_VAR 0 3
10532: PUSH
10533: LD_VAR 0 1
10537: ARRAY
10538: PPUSH
10539: LD_VAR 0 2
10543: PUSH
10544: LD_VAR 0 1
10548: ARRAY
10549: PPUSH
10550: CALL_OW 188
10554: GO 10513
10556: POP
10557: POP
// end ; if IsOk ( Givi ) then
10558: LD_EXP 11
10562: PPUSH
10563: CALL_OW 302
10567: IFFALSE 10581
// Say ( Givi , DG-Surrender-5 ) ;
10569: LD_EXP 11
10573: PPUSH
10574: LD_STRING DG-Surrender-5
10576: PPUSH
10577: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
10581: LD_EXP 25
10585: PPUSH
10586: LD_STRING DCa-Surrender-6
10588: PPUSH
10589: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
10593: LD_EXP 25
10597: PPUSH
10598: LD_STRING DCa-Surrender-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Givi , DG-Surrender-8 ) ;
10605: LD_EXP 11
10609: PPUSH
10610: LD_STRING DG-Surrender-8
10612: PPUSH
10613: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
10617: LD_EXP 25
10621: PPUSH
10622: LD_STRING DCa-Surrender-9
10624: PPUSH
10625: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
10629: LD_EXP 10
10633: PPUSH
10634: LD_STRING DH-Surrender-10
10636: PPUSH
10637: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
10641: LD_EXP 25
10645: PPUSH
10646: LD_STRING DCa-Surrender-11
10648: PPUSH
10649: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
10653: LD_EXP 10
10657: PPUSH
10658: LD_STRING DH-Surrender-12
10660: PPUSH
10661: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
10665: LD_EXP 25
10669: PPUSH
10670: LD_STRING DCa-Surrender-13
10672: PPUSH
10673: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
10677: LD_EXP 25
10681: PPUSH
10682: LD_STRING DCa-Surrender-14
10684: PPUSH
10685: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
10689: LD_EXP 25
10693: PPUSH
10694: LD_STRING DCa-Surrender-15
10696: PPUSH
10697: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
10701: LD_EXP 25
10705: PPUSH
10706: LD_STRING DCa-Surrender-16
10708: PPUSH
10709: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
10713: LD_EXP 15
10717: PPUSH
10718: LD_STRING DK-Surrender-17
10720: PPUSH
10721: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
10725: LD_EXP 19
10729: PPUSH
10730: LD_STRING DO-Surrender-18
10732: PPUSH
10733: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
10737: LD_EXP 19
10741: PPUSH
10742: LD_STRING DO-Surrender-19
10744: PPUSH
10745: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
10749: LD_EXP 20
10753: PPUSH
10754: LD_STRING DKs-Surrender-20
10756: PPUSH
10757: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
10761: LD_EXP 20
10765: PPUSH
10766: LD_STRING DKs-Surrender-21
10768: PPUSH
10769: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
10773: LD_EXP 17
10777: PPUSH
10778: LD_STRING DMar-Surrender-22
10780: PPUSH
10781: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
10785: LD_EXP 17
10789: PPUSH
10790: LD_STRING DMar-Surrender-23
10792: PPUSH
10793: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
10797: LD_EXP 16
10801: PPUSH
10802: LD_STRING DS-Surrender-24
10804: PPUSH
10805: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
10809: LD_EXP 21
10813: PPUSH
10814: LD_STRING DA-Surrender-25
10816: PPUSH
10817: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
10821: LD_EXP 13
10825: PPUSH
10826: LD_STRING DI-Surrender-26
10828: PPUSH
10829: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
10833: LD_EXP 14
10837: PPUSH
10838: LD_STRING DKam-Surrender-27
10840: PPUSH
10841: CALL_OW 88
// Say ( Givi , DG-Surrender-28 ) ;
10845: LD_EXP 11
10849: PPUSH
10850: LD_STRING DG-Surrender-28
10852: PPUSH
10853: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
10857: LD_EXP 11
10861: PPUSH
10862: LD_STRING DG-Surrender-29
10864: PPUSH
10865: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
10869: LD_EXP 11
10873: PPUSH
10874: LD_STRING DG-Surrender-30
10876: PPUSH
10877: CALL_OW 88
// PrepareRussianFirstWaveAttack ;
10881: CALL 11913 0 0
// ComMoveXY ( FilterAllUnits ( [ f_side , 3 ] ) , 176 , 123 ) ;
10885: LD_INT 22
10887: PUSH
10888: LD_INT 3
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: PPUSH
10900: LD_INT 176
10902: PPUSH
10903: LD_INT 123
10905: PPUSH
10906: CALL_OW 111
// if not IsEnvironment ( 190 , 150 ) then
10910: LD_INT 190
10912: PPUSH
10913: LD_INT 150
10915: PPUSH
10916: CALL_OW 351
10920: NOT
10921: IFFALSE 10940
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
10923: LD_INT 190
10925: PPUSH
10926: LD_INT 150
10928: PPUSH
10929: LD_INT 2
10931: PPUSH
10932: LD_INT 8
10934: NEG
10935: PPUSH
10936: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
10940: LD_INT 193
10942: PPUSH
10943: LD_INT 150
10945: PPUSH
10946: CALL_OW 84
// Say ( Markov , DMar-Surrender-31 ) ;
10950: LD_EXP 17
10954: PPUSH
10955: LD_STRING DMar-Surrender-31
10957: PPUSH
10958: CALL_OW 88
// Say ( Heike , DH-Surrender-32 ) ;
10962: LD_EXP 10
10966: PPUSH
10967: LD_STRING DH-Surrender-32
10969: PPUSH
10970: CALL_OW 88
// InGameOff ;
10974: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
10978: LD_STRING M2
10980: PPUSH
10981: CALL_OW 337
// wait ( 0 0$20 ) ;
10985: LD_INT 700
10987: PPUSH
10988: CALL_OW 67
// PrepareRussianLastWaveAttack ;
10992: CALL 12275 0 0
// russianAttack := true ;
10996: LD_ADDR_EXP 8
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
11004: LD_INT 190
11006: PPUSH
11007: LD_INT 150
11009: PPUSH
11010: LD_INT 2
11012: PPUSH
11013: CALL_OW 331
// end ;
11017: PPOPN 3
11019: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
11020: LD_EXP 15
11024: PPUSH
11025: CALL_OW 256
11029: PUSH
11030: LD_INT 3
11032: LESS
11033: IFFALSE 11070
11035: GO 11037
11037: DISABLE
// begin DialogueOn ;
11038: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
11042: LD_EXP 15
11046: PPUSH
11047: LD_STRING DK-Dead-1
11049: PPUSH
11050: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
11054: LD_EXP 15
11058: PPUSH
11059: LD_STRING DK-Dead-2
11061: PPUSH
11062: CALL_OW 91
// DialogueOff ;
11066: CALL_OW 7
// end ;
11070: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , ar_rocket_launcher ] ] ) do
11071: LD_INT 22
11073: PUSH
11074: LD_INT 2
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 21
11083: PUSH
11084: LD_INT 28
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PPUSH
11095: CALL_OW 69
11099: IFFALSE 11112
11101: GO 11103
11103: DISABLE
// hasRockets := true ;
11104: LD_ADDR_EXP 9
11108: PUSH
11109: LD_INT 1
11111: ST_TO_ADDR
11112: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
11113: LD_EXP 8
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PPUSH
11128: CALL_OW 69
11132: NOT
11133: AND
11134: IFFALSE 11744
11136: GO 11138
11138: DISABLE
// begin DialogueOn ;
11139: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
11143: LD_EXP 10
11147: PPUSH
11148: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
11152: LD_EXP 10
11156: PPUSH
11157: LD_STRING DH-End-1
11159: PPUSH
11160: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
11164: LD_EXP 18
11168: PPUSH
11169: LD_STRING DShar-End-2
11171: PPUSH
11172: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
11176: LD_EXP 15
11180: PPUSH
11181: LD_STRING DK-End-3
11183: PPUSH
11184: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
11188: LD_EXP 10
11192: PPUSH
11193: LD_STRING DH-End-4
11195: PPUSH
11196: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
11200: LD_EXP 18
11204: PPUSH
11205: LD_STRING DShar-End-5
11207: PPUSH
11208: CALL_OW 94
// if IsOk ( Markov ) then
11212: LD_EXP 17
11216: PPUSH
11217: CALL_OW 302
11221: IFFALSE 11235
// Say ( Kaia , DK-End-6 ) ;
11223: LD_EXP 15
11227: PPUSH
11228: LD_STRING DK-End-6
11230: PPUSH
11231: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
11235: LD_EXP 15
11239: PPUSH
11240: LD_STRING DK-End-7
11242: PPUSH
11243: CALL_OW 88
// if IsOk ( Kaia ) then
11247: LD_EXP 15
11251: PPUSH
11252: CALL_OW 302
11256: IFFALSE 11294
// begin Say ( Givi , DG-End-8 ) ;
11258: LD_EXP 11
11262: PPUSH
11263: LD_STRING DG-End-8
11265: PPUSH
11266: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
11270: LD_EXP 11
11274: PPUSH
11275: LD_STRING DG-End-9
11277: PPUSH
11278: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
11282: LD_EXP 10
11286: PPUSH
11287: LD_STRING DH-End-10
11289: PPUSH
11290: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
11294: LD_EXP 10
11298: PPUSH
11299: LD_STRING DH-End-11
11301: PPUSH
11302: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
11306: LD_INT 7
11308: PPUSH
11309: LD_INT 2
11311: PPUSH
11312: CALL_OW 321
11316: PUSH
11317: LD_INT 2
11319: EQUAL
11320: IFFALSE 11334
// AddMedal ( med1 , 1 ) else
11322: LD_STRING med1
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 101
11332: GO 11345
// AddMedal ( med1 , - 1 ) ;
11334: LD_STRING med1
11336: PPUSH
11337: LD_INT 1
11339: NEG
11340: PPUSH
11341: CALL_OW 101
// if hasRockets then
11345: LD_EXP 9
11349: IFFALSE 11363
// AddMedal ( med2 , 1 ) else
11351: LD_STRING med2
11353: PPUSH
11354: LD_INT 1
11356: PPUSH
11357: CALL_OW 101
11361: GO 11374
// AddMedal ( med2 , - 1 ) ;
11363: LD_STRING med2
11365: PPUSH
11366: LD_INT 1
11368: NEG
11369: PPUSH
11370: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
11374: LD_OWVAR 1
11378: PUSH
11379: LD_INT 105000
11381: PUSH
11382: LD_INT 94500
11384: PUSH
11385: LD_INT 84000
11387: PUSH
11388: LD_INT 73500
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: PUSH
11397: LD_OWVAR 67
11401: ARRAY
11402: LESS
11403: IFFALSE 11417
// AddMedal ( med3 , 1 ) else
11405: LD_STRING med3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 101
11415: GO 11428
// AddMedal ( med3 , - 1 ) ;
11417: LD_STRING med3
11419: PPUSH
11420: LD_INT 1
11422: NEG
11423: PPUSH
11424: CALL_OW 101
// GiveMedals ( MAIN ) ;
11428: LD_STRING MAIN
11430: PPUSH
11431: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
11435: LD_INT 22
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 23
11447: PUSH
11448: LD_INT 2
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 21
11457: PUSH
11458: LD_INT 1
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: PPUSH
11475: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
11479: LD_EXP 25
11483: PPUSH
11484: LD_STRING 07_UsCommander
11486: PPUSH
11487: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
11491: LD_INT 22
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 23
11503: PUSH
11504: LD_INT 1
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 1
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PPUSH
11526: CALL_OW 69
11530: PUSH
11531: LD_EXP 25
11535: DIFF
11536: PPUSH
11537: LD_STRING 07_Americans
11539: PPUSH
11540: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
11544: LD_EXP 10
11548: PPUSH
11549: LD_STRING 07_Heike
11551: PPUSH
11552: CALL_OW 38
// if Aviradze then
11556: LD_EXP 21
11560: IFFALSE 11574
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
11562: LD_EXP 21
11566: PPUSH
11567: LD_STRING 07_Aviradze
11569: PPUSH
11570: CALL_OW 38
// if Ibrahim then
11574: LD_EXP 13
11578: IFFALSE 11592
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
11580: LD_EXP 13
11584: PPUSH
11585: LD_STRING 07_Ibrahim
11587: PPUSH
11588: CALL_OW 38
// if Kamil then
11592: LD_EXP 14
11596: IFFALSE 11610
// SaveCharacters ( Kamil , 07_Kamil ) ;
11598: LD_EXP 14
11602: PPUSH
11603: LD_STRING 07_Kamil
11605: PPUSH
11606: CALL_OW 38
// if Sophia then
11610: LD_EXP 16
11614: IFFALSE 11628
// SaveCharacters ( Sophia , 07_Sophia ) ;
11616: LD_EXP 16
11620: PPUSH
11621: LD_STRING 07_Sophia
11623: PPUSH
11624: CALL_OW 38
// if Kaia then
11628: LD_EXP 15
11632: IFFALSE 11646
// SaveCharacters ( Kaia , 07_Kaia ) ;
11634: LD_EXP 15
11638: PPUSH
11639: LD_STRING 07_Kaia
11641: PPUSH
11642: CALL_OW 38
// if Givi then
11646: LD_EXP 11
11650: IFFALSE 11664
// SaveCharacters ( Givi , 07_Givi ) ;
11652: LD_EXP 11
11656: PPUSH
11657: LD_STRING 07_Givi
11659: PPUSH
11660: CALL_OW 38
// if Mike then
11664: LD_EXP 12
11668: IFFALSE 11682
// SaveCharacters ( Mike , 07_Mike ) ;
11670: LD_EXP 12
11674: PPUSH
11675: LD_STRING 07_Mike
11677: PPUSH
11678: CALL_OW 38
// if Markov then
11682: LD_EXP 17
11686: IFFALSE 11700
// SaveCharacters ( Markov , 07_Markov ) ;
11688: LD_EXP 17
11692: PPUSH
11693: LD_STRING 07_Markov
11695: PPUSH
11696: CALL_OW 38
// if Kurt then
11700: LD_EXP 20
11704: IFFALSE 11718
// SaveCharacters ( Kurt , 07_Kurt ) ;
11706: LD_EXP 20
11710: PPUSH
11711: LD_STRING 07_Kurt
11713: PPUSH
11714: CALL_OW 38
// if heikeSecondSquad then
11718: LD_EXP 22
11722: IFFALSE 11736
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
11724: LD_EXP 22
11728: PPUSH
11729: LD_STRING 07_others
11731: PPUSH
11732: CALL_OW 38
// YouWin ;
11736: CALL_OW 103
// DialogueOff ;
11740: CALL_OW 7
// end ; end_of_file
11744: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 500 , 450 , 400 , 380 ] [ Difficulty ] do
11745: LD_INT 7
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 287
11755: PUSH
11756: LD_INT 500
11758: PUSH
11759: LD_INT 450
11761: PUSH
11762: LD_INT 400
11764: PUSH
11765: LD_INT 380
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: PUSH
11774: LD_OWVAR 67
11778: ARRAY
11779: LESS
11780: IFFALSE 11807
11782: GO 11784
11784: DISABLE
// begin enable ;
11785: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
11786: LD_INT 1
11788: PPUSH
11789: LD_INT 5
11791: PPUSH
11792: CALL_OW 12
11796: PPUSH
11797: LD_INT 7
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 55
// end ;
11807: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
11808: LD_INT 8
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 287
11818: PUSH
11819: LD_INT 300
11821: PUSH
11822: LD_INT 250
11824: PUSH
11825: LD_INT 200
11827: PUSH
11828: LD_INT 180
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: LD_OWVAR 67
11841: ARRAY
11842: LESS
11843: IFFALSE 11870
11845: GO 11847
11847: DISABLE
// begin enable ;
11848: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 5
11854: PPUSH
11855: CALL_OW 12
11859: PPUSH
11860: LD_INT 8
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 55
// end ;
11870: END
// every 0 0$30 trigger tick < 4 4$10 do
11871: LD_OWVAR 1
11875: PUSH
11876: LD_INT 8750
11878: LESS
11879: IFFALSE 11912
11881: GO 11883
11883: DISABLE
// begin enable ;
11884: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
11885: LD_INT 1
11887: PPUSH
11888: LD_INT 5
11890: PPUSH
11891: CALL_OW 12
11895: PPUSH
11896: LD_INT 130
11898: PPUSH
11899: LD_INT 18
11901: PPUSH
11902: LD_INT 12
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 56
// end ; end_of_file
11912: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
11913: LD_INT 0
11915: PPUSH
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
// uc_side := 3 ;
11920: LD_ADDR_OWVAR 20
11924: PUSH
11925: LD_INT 3
11927: ST_TO_ADDR
// uc_nation := 3 ;
11928: LD_ADDR_OWVAR 21
11932: PUSH
11933: LD_INT 3
11935: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
11936: LD_ADDR_VAR 0 3
11940: PUSH
11941: LD_INT 184
11943: PUSH
11944: LD_INT 144
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 191
11957: PUSH
11958: LD_INT 147
11960: PUSH
11961: LD_INT 5
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 202
11971: PUSH
11972: LD_INT 151
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 210
11985: PUSH
11986: LD_INT 152
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: ST_TO_ADDR
// for i := 1 to 4 do
12003: LD_ADDR_VAR 0 2
12007: PUSH
12008: DOUBLE
12009: LD_INT 1
12011: DEC
12012: ST_TO_ADDR
12013: LD_INT 4
12015: PUSH
12016: FOR_TO
12017: IFFALSE 12186
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
12019: LD_INT 24
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: LD_INT 1
12027: PPUSH
12028: LD_INT 43
12030: PUSH
12031: LD_INT 44
12033: PUSH
12034: LD_INT 46
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: LD_INT 3
12049: MOD
12050: PUSH
12051: LD_INT 1
12053: PLUS
12054: ARRAY
12055: PPUSH
12056: LD_INT 40
12058: PPUSH
12059: CALL 18184 0 5
// veh := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_VAR 0 3
12082: PUSH
12083: LD_VAR 0 2
12087: ARRAY
12088: PUSH
12089: LD_INT 3
12091: ARRAY
12092: PPUSH
12093: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12097: LD_VAR 0 5
12101: PPUSH
12102: LD_VAR 0 3
12106: PUSH
12107: LD_VAR 0 2
12111: ARRAY
12112: PUSH
12113: LD_INT 1
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 3
12121: PUSH
12122: LD_VAR 0 2
12126: ARRAY
12127: PUSH
12128: LD_INT 2
12130: ARRAY
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12139: LD_INT 0
12141: PPUSH
12142: LD_INT 6
12144: PUSH
12145: LD_INT 7
12147: PUSH
12148: LD_INT 8
12150: PUSH
12151: LD_INT 8
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: LD_OWVAR 67
12164: ARRAY
12165: PPUSH
12166: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12170: CALL_OW 44
12174: PPUSH
12175: LD_VAR 0 5
12179: PPUSH
12180: CALL_OW 52
// end ;
12184: GO 12016
12186: POP
12187: POP
// for i := 1 to 4 do
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: DOUBLE
12194: LD_INT 1
12196: DEC
12197: ST_TO_ADDR
12198: LD_INT 4
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12268
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12204: LD_INT 0
12206: PPUSH
12207: LD_INT 6
12209: PUSH
12210: LD_INT 7
12212: PUSH
12213: LD_INT 8
12215: PUSH
12216: LD_INT 8
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_OWVAR 67
12229: ARRAY
12230: PPUSH
12231: CALL_OW 381
// un := CreateHuman ;
12235: LD_ADDR_VAR 0 4
12239: PUSH
12240: CALL_OW 44
12244: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
12245: LD_VAR 0 4
12249: PPUSH
12250: LD_INT 185
12252: PPUSH
12253: LD_INT 145
12255: PPUSH
12256: LD_INT 6
12258: PPUSH
12259: LD_INT 0
12261: PPUSH
12262: CALL_OW 50
// end ;
12266: GO 12201
12268: POP
12269: POP
// end ;
12270: LD_VAR 0 1
12274: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
12275: LD_INT 0
12277: PPUSH
12278: PPUSH
12279: PPUSH
// uc_side := 3 ;
12280: LD_ADDR_OWVAR 20
12284: PUSH
12285: LD_INT 3
12287: ST_TO_ADDR
// if Difficulty > 1 then
12288: LD_OWVAR 67
12292: PUSH
12293: LD_INT 1
12295: GREATER
12296: IFFALSE 12458
// begin uc_nation := 0 ;
12298: LD_ADDR_OWVAR 21
12302: PUSH
12303: LD_INT 0
12305: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_INT 4
12318: PUSH
12319: LD_INT 5
12321: PUSH
12322: LD_INT 6
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_OWVAR 67
12334: PUSH
12335: LD_INT 1
12337: PLUS
12338: ARRAY
12339: PUSH
12340: FOR_TO
12341: IFFALSE 12456
// begin hc_class := class_apeman_soldier ;
12343: LD_ADDR_OWVAR 28
12347: PUSH
12348: LD_INT 15
12350: ST_TO_ADDR
// hc_gallery :=  ;
12351: LD_ADDR_OWVAR 33
12355: PUSH
12356: LD_STRING 
12358: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
12359: LD_ADDR_OWVAR 26
12363: PUSH
12364: LD_STRING Treci
12366: PUSH
12367: LD_STRING Ivan
12369: PUSH
12370: LD_STRING Yaromir
12372: PUSH
12373: LD_STRING Nadzieia
12375: PUSH
12376: LD_STRING Krasna
12378: PUSH
12379: LD_STRING Piaty
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 1
12392: PPUSH
12393: LD_INT 6
12395: PPUSH
12396: CALL_OW 12
12400: ARRAY
12401: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
12402: LD_ADDR_OWVAR 31
12406: PUSH
12407: LD_INT 5
12409: PUSH
12410: LD_INT 0
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: LD_INT 0
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: ST_TO_ADDR
// hc_sex := sex_male ;
12425: LD_ADDR_OWVAR 27
12429: PUSH
12430: LD_INT 1
12432: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
12433: CALL_OW 44
12437: PPUSH
12438: LD_INT 178
12440: PPUSH
12441: LD_INT 148
12443: PPUSH
12444: LD_INT 6
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: CALL_OW 50
// end ;
12454: GO 12340
12456: POP
12457: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
12458: LD_ADDR_VAR 0 2
12462: PUSH
12463: DOUBLE
12464: LD_INT 1
12466: DEC
12467: ST_TO_ADDR
12468: LD_INT 4
12470: PUSH
12471: LD_INT 6
12473: PUSH
12474: LD_INT 7
12476: PUSH
12477: LD_INT 9
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: PUSH
12486: LD_OWVAR 67
12490: ARRAY
12491: PUSH
12492: FOR_TO
12493: IFFALSE 12653
// begin uc_nation := 3 ;
12495: LD_ADDR_OWVAR 21
12499: PUSH
12500: LD_INT 3
12502: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
12503: LD_INT 22
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: LD_INT 45
12514: PUSH
12515: LD_INT 43
12517: PUSH
12518: LD_INT 44
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_VAR 0 2
12530: PUSH
12531: LD_INT 3
12533: MOD
12534: PUSH
12535: LD_INT 1
12537: PLUS
12538: ARRAY
12539: PPUSH
12540: LD_INT 44
12542: PPUSH
12543: CALL 18184 0 5
// veh := CreateVehicle ;
12547: LD_ADDR_VAR 0 3
12551: PUSH
12552: CALL_OW 45
12556: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 4
12564: PPUSH
12565: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: LD_INT 0
12579: PPUSH
12580: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_INT 6
12589: PUSH
12590: LD_INT 7
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: LD_INT 8
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: PUSH
12605: LD_OWVAR 67
12609: ARRAY
12610: PPUSH
12611: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12615: CALL_OW 44
12619: PPUSH
12620: LD_VAR 0 3
12624: PPUSH
12625: CALL_OW 52
// ComMoveXY ( veh , 178 , 137 ) ;
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 178
12636: PPUSH
12637: LD_INT 137
12639: PPUSH
12640: CALL_OW 111
// wait ( 0 0$2 ) ;
12644: LD_INT 70
12646: PPUSH
12647: CALL_OW 67
// end ;
12651: GO 12492
12653: POP
12654: POP
// end ;
12655: LD_VAR 0 1
12659: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
12660: LD_INT 22
12662: PUSH
12663: LD_INT 3
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 32
12672: PUSH
12673: LD_INT 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PPUSH
12684: CALL_OW 69
12688: IFFALSE 12776
12690: GO 12692
12692: DISABLE
12693: LD_INT 0
12695: PPUSH
12696: PPUSH
// begin enable ;
12697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 32
12715: PUSH
12716: LD_INT 1
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 69
12731: ST_TO_ADDR
// for i in tmp do
12732: LD_ADDR_VAR 0 1
12736: PUSH
12737: LD_VAR 0 2
12741: PUSH
12742: FOR_IN
12743: IFFALSE 12774
// if GetFuel ( i ) < 3 then
12745: LD_VAR 0 1
12749: PPUSH
12750: CALL_OW 261
12754: PUSH
12755: LD_INT 3
12757: LESS
12758: IFFALSE 12772
// SetFuel ( i , 3 ) ;
12760: LD_VAR 0 1
12764: PPUSH
12765: LD_INT 3
12767: PPUSH
12768: CALL_OW 240
12772: GO 12742
12774: POP
12775: POP
// end ;
12776: PPOPN 2
12778: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp , nearest , isInBase , isInAmericanBase , enemy ;
12779: LD_EXP 8
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_INT 3
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 21
12796: PUSH
12797: LD_INT 1
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: AND
12813: IFFALSE 13317
12815: GO 12817
12817: DISABLE
12818: LD_INT 0
12820: PPUSH
12821: PPUSH
12822: PPUSH
12823: PPUSH
12824: PPUSH
12825: PPUSH
12826: PPUSH
// begin enable ;
12827: ENABLE
// isInBase := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_distxy , 137 , 28 , 30 ] ] ) ;
12828: LD_ADDR_VAR 0 5
12832: PUSH
12833: LD_INT 22
12835: PUSH
12836: LD_INT 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 21
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 92
12855: PUSH
12856: LD_INT 137
12858: PUSH
12859: LD_INT 28
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 69
12880: ST_TO_ADDR
// isInAmericanBase := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_distxy , 82 , 138 , 30 ] ] ) ;
12881: LD_ADDR_VAR 0 6
12885: PUSH
12886: LD_INT 22
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 1
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 92
12908: PUSH
12909: LD_INT 82
12911: PUSH
12912: LD_INT 138
12914: PUSH
12915: LD_INT 30
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 69
12933: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
12934: LD_ADDR_VAR 0 7
12938: PUSH
12939: LD_INT 81
12941: PUSH
12942: LD_INT 3
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: ST_TO_ADDR
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: LD_INT 22
12961: PUSH
12962: LD_INT 3
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 25
12971: PUSH
12972: LD_INT 3
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: LD_INT 55
12984: PUSH
12985: EMPTY
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: PPUSH
12997: CALL_OW 69
13001: ST_TO_ADDR
// if mech then
13002: LD_VAR 0 2
13006: IFFALSE 13076
// for i in mech do
13008: LD_ADDR_VAR 0 1
13012: PUSH
13013: LD_VAR 0 2
13017: PUSH
13018: FOR_IN
13019: IFFALSE 13074
// begin if IsInArea ( i , escapeArea ) then
13021: LD_VAR 0 1
13025: PPUSH
13026: LD_INT 13
13028: PPUSH
13029: CALL_OW 308
13033: IFFALSE 13046
// RemoveUnit ( i ) else
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL_OW 64
13044: GO 13072
// if IsOk ( i ) then
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 302
13055: IFFALSE 13072
// ComMoveXY ( i , 196 , 155 ) ;
13057: LD_VAR 0 1
13061: PPUSH
13062: LD_INT 196
13064: PPUSH
13065: LD_INT 155
13067: PPUSH
13068: CALL_OW 111
// end ;
13072: GO 13018
13074: POP
13075: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
13076: LD_ADDR_VAR 0 3
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_INT 3
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 25
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 25
13106: PUSH
13107: LD_INT 15
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 21
13116: PUSH
13117: LD_INT 2
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 50
13132: PUSH
13133: EMPTY
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: ST_TO_ADDR
// if tmp then
13146: LD_VAR 0 3
13150: IFFALSE 13317
// for i in tmp do
13152: LD_ADDR_VAR 0 1
13156: PUSH
13157: LD_VAR 0 3
13161: PUSH
13162: FOR_IN
13163: IFFALSE 13315
// begin if isInBase then
13165: LD_VAR 0 5
13169: IFFALSE 13222
// begin nearest := NearestUnitToUnit ( isInBase , i ) ;
13171: LD_ADDR_VAR 0 4
13175: PUSH
13176: LD_VAR 0 5
13180: PPUSH
13181: LD_VAR 0 1
13185: PPUSH
13186: CALL_OW 74
13190: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearest ) , GetY ( nearest ) ) ;
13191: LD_VAR 0 1
13195: PPUSH
13196: LD_VAR 0 4
13200: PPUSH
13201: CALL_OW 250
13205: PPUSH
13206: LD_VAR 0 4
13210: PPUSH
13211: CALL_OW 251
13215: PPUSH
13216: CALL_OW 114
// end else
13220: GO 13313
// if isInAmericanBase then
13222: LD_VAR 0 6
13226: IFFALSE 13279
// begin nearest := NearestUnitToUnit ( isInAmericanBase , i ) ;
13228: LD_ADDR_VAR 0 4
13232: PUSH
13233: LD_VAR 0 6
13237: PPUSH
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL_OW 74
13247: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearest ) , GetY ( nearest ) ) ;
13248: LD_VAR 0 1
13252: PPUSH
13253: LD_VAR 0 4
13257: PPUSH
13258: CALL_OW 250
13262: PPUSH
13263: LD_VAR 0 4
13267: PPUSH
13268: CALL_OW 251
13272: PPUSH
13273: CALL_OW 114
// end else
13277: GO 13313
// begin nearest := NearestUnitToUnit ( enemy , i ) ;
13279: LD_ADDR_VAR 0 4
13283: PUSH
13284: LD_VAR 0 7
13288: PPUSH
13289: LD_VAR 0 1
13293: PPUSH
13294: CALL_OW 74
13298: ST_TO_ADDR
// ComAttackUnit ( i , nearest ) ;
13299: LD_VAR 0 1
13303: PPUSH
13304: LD_VAR 0 4
13308: PPUSH
13309: CALL_OW 115
// end ; end ;
13313: GO 13162
13315: POP
13316: POP
// end ; end_of_file
13317: PPOPN 7
13319: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13320: LD_INT 0
13322: PPUSH
13323: PPUSH
// if exist_mode then
13324: LD_VAR 0 2
13328: IFFALSE 13353
// unit := CreateCharacter ( prefix & ident ) else
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: LD_VAR 0 3
13339: PUSH
13340: LD_VAR 0 1
13344: STR
13345: PPUSH
13346: CALL_OW 34
13350: ST_TO_ADDR
13351: GO 13368
// unit := NewCharacter ( ident ) ;
13353: LD_ADDR_VAR 0 5
13357: PUSH
13358: LD_VAR 0 1
13362: PPUSH
13363: CALL_OW 25
13367: ST_TO_ADDR
// result := unit ;
13368: LD_ADDR_VAR 0 4
13372: PUSH
13373: LD_VAR 0 5
13377: ST_TO_ADDR
// end ;
13378: LD_VAR 0 4
13382: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13383: LD_INT 0
13385: PPUSH
13386: PPUSH
// if not side or not nation then
13387: LD_VAR 0 1
13391: NOT
13392: PUSH
13393: LD_VAR 0 2
13397: NOT
13398: OR
13399: IFFALSE 13403
// exit ;
13401: GO 14171
// case nation of nation_american :
13403: LD_VAR 0 2
13407: PUSH
13408: LD_INT 1
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13630
13416: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13417: LD_ADDR_VAR 0 4
13421: PUSH
13422: LD_INT 35
13424: PUSH
13425: LD_INT 45
13427: PUSH
13428: LD_INT 46
13430: PUSH
13431: LD_INT 47
13433: PUSH
13434: LD_INT 82
13436: PUSH
13437: LD_INT 83
13439: PUSH
13440: LD_INT 84
13442: PUSH
13443: LD_INT 85
13445: PUSH
13446: LD_INT 86
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: LD_INT 2
13454: PUSH
13455: LD_INT 6
13457: PUSH
13458: LD_INT 15
13460: PUSH
13461: LD_INT 16
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: LD_INT 12
13469: PUSH
13470: LD_INT 13
13472: PUSH
13473: LD_INT 10
13475: PUSH
13476: LD_INT 14
13478: PUSH
13479: LD_INT 20
13481: PUSH
13482: LD_INT 21
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 32
13493: PUSH
13494: LD_INT 27
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: LD_INT 69
13502: PUSH
13503: LD_INT 39
13505: PUSH
13506: LD_INT 34
13508: PUSH
13509: LD_INT 40
13511: PUSH
13512: LD_INT 48
13514: PUSH
13515: LD_INT 49
13517: PUSH
13518: LD_INT 50
13520: PUSH
13521: LD_INT 51
13523: PUSH
13524: LD_INT 52
13526: PUSH
13527: LD_INT 53
13529: PUSH
13530: LD_INT 54
13532: PUSH
13533: LD_INT 55
13535: PUSH
13536: LD_INT 56
13538: PUSH
13539: LD_INT 57
13541: PUSH
13542: LD_INT 58
13544: PUSH
13545: LD_INT 59
13547: PUSH
13548: LD_INT 60
13550: PUSH
13551: LD_INT 61
13553: PUSH
13554: LD_INT 62
13556: PUSH
13557: LD_INT 80
13559: PUSH
13560: LD_INT 82
13562: PUSH
13563: LD_INT 83
13565: PUSH
13566: LD_INT 84
13568: PUSH
13569: LD_INT 85
13571: PUSH
13572: LD_INT 86
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: ST_TO_ADDR
13628: GO 14095
13630: LD_INT 2
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13864
13638: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13639: LD_ADDR_VAR 0 4
13643: PUSH
13644: LD_INT 35
13646: PUSH
13647: LD_INT 45
13649: PUSH
13650: LD_INT 46
13652: PUSH
13653: LD_INT 47
13655: PUSH
13656: LD_INT 82
13658: PUSH
13659: LD_INT 83
13661: PUSH
13662: LD_INT 84
13664: PUSH
13665: LD_INT 85
13667: PUSH
13668: LD_INT 87
13670: PUSH
13671: LD_INT 70
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: LD_INT 11
13679: PUSH
13680: LD_INT 3
13682: PUSH
13683: LD_INT 4
13685: PUSH
13686: LD_INT 5
13688: PUSH
13689: LD_INT 6
13691: PUSH
13692: LD_INT 15
13694: PUSH
13695: LD_INT 18
13697: PUSH
13698: LD_INT 7
13700: PUSH
13701: LD_INT 17
13703: PUSH
13704: LD_INT 8
13706: PUSH
13707: LD_INT 20
13709: PUSH
13710: LD_INT 21
13712: PUSH
13713: LD_INT 22
13715: PUSH
13716: LD_INT 72
13718: PUSH
13719: LD_INT 26
13721: PUSH
13722: LD_INT 69
13724: PUSH
13725: LD_INT 39
13727: PUSH
13728: LD_INT 40
13730: PUSH
13731: LD_INT 41
13733: PUSH
13734: LD_INT 42
13736: PUSH
13737: LD_INT 43
13739: PUSH
13740: LD_INT 48
13742: PUSH
13743: LD_INT 49
13745: PUSH
13746: LD_INT 50
13748: PUSH
13749: LD_INT 51
13751: PUSH
13752: LD_INT 52
13754: PUSH
13755: LD_INT 53
13757: PUSH
13758: LD_INT 54
13760: PUSH
13761: LD_INT 55
13763: PUSH
13764: LD_INT 56
13766: PUSH
13767: LD_INT 60
13769: PUSH
13770: LD_INT 61
13772: PUSH
13773: LD_INT 62
13775: PUSH
13776: LD_INT 66
13778: PUSH
13779: LD_INT 67
13781: PUSH
13782: LD_INT 68
13784: PUSH
13785: LD_INT 81
13787: PUSH
13788: LD_INT 82
13790: PUSH
13791: LD_INT 83
13793: PUSH
13794: LD_INT 84
13796: PUSH
13797: LD_INT 85
13799: PUSH
13800: LD_INT 87
13802: PUSH
13803: LD_INT 88
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: ST_TO_ADDR
13862: GO 14095
13864: LD_INT 3
13866: DOUBLE
13867: EQUAL
13868: IFTRUE 13872
13870: GO 14094
13872: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13873: LD_ADDR_VAR 0 4
13877: PUSH
13878: LD_INT 46
13880: PUSH
13881: LD_INT 47
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 82
13892: PUSH
13893: LD_INT 83
13895: PUSH
13896: LD_INT 84
13898: PUSH
13899: LD_INT 85
13901: PUSH
13902: LD_INT 86
13904: PUSH
13905: LD_INT 11
13907: PUSH
13908: LD_INT 9
13910: PUSH
13911: LD_INT 20
13913: PUSH
13914: LD_INT 19
13916: PUSH
13917: LD_INT 21
13919: PUSH
13920: LD_INT 24
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_INT 25
13928: PUSH
13929: LD_INT 28
13931: PUSH
13932: LD_INT 29
13934: PUSH
13935: LD_INT 30
13937: PUSH
13938: LD_INT 31
13940: PUSH
13941: LD_INT 37
13943: PUSH
13944: LD_INT 38
13946: PUSH
13947: LD_INT 32
13949: PUSH
13950: LD_INT 27
13952: PUSH
13953: LD_INT 33
13955: PUSH
13956: LD_INT 69
13958: PUSH
13959: LD_INT 39
13961: PUSH
13962: LD_INT 34
13964: PUSH
13965: LD_INT 40
13967: PUSH
13968: LD_INT 71
13970: PUSH
13971: LD_INT 23
13973: PUSH
13974: LD_INT 44
13976: PUSH
13977: LD_INT 48
13979: PUSH
13980: LD_INT 49
13982: PUSH
13983: LD_INT 50
13985: PUSH
13986: LD_INT 51
13988: PUSH
13989: LD_INT 52
13991: PUSH
13992: LD_INT 53
13994: PUSH
13995: LD_INT 54
13997: PUSH
13998: LD_INT 55
14000: PUSH
14001: LD_INT 56
14003: PUSH
14004: LD_INT 57
14006: PUSH
14007: LD_INT 58
14009: PUSH
14010: LD_INT 59
14012: PUSH
14013: LD_INT 63
14015: PUSH
14016: LD_INT 64
14018: PUSH
14019: LD_INT 65
14021: PUSH
14022: LD_INT 82
14024: PUSH
14025: LD_INT 83
14027: PUSH
14028: LD_INT 84
14030: PUSH
14031: LD_INT 85
14033: PUSH
14034: LD_INT 86
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: ST_TO_ADDR
14092: GO 14095
14094: POP
// if state > - 1 and state < 3 then
14095: LD_VAR 0 3
14099: PUSH
14100: LD_INT 1
14102: NEG
14103: GREATER
14104: PUSH
14105: LD_VAR 0 3
14109: PUSH
14110: LD_INT 3
14112: LESS
14113: AND
14114: IFFALSE 14171
// for i in result do
14116: LD_ADDR_VAR 0 5
14120: PUSH
14121: LD_VAR 0 4
14125: PUSH
14126: FOR_IN
14127: IFFALSE 14169
// if GetTech ( i , side ) <> state then
14129: LD_VAR 0 5
14133: PPUSH
14134: LD_VAR 0 1
14138: PPUSH
14139: CALL_OW 321
14143: PUSH
14144: LD_VAR 0 3
14148: NONEQUAL
14149: IFFALSE 14167
// result := result diff i ;
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_VAR 0 4
14160: PUSH
14161: LD_VAR 0 5
14165: DIFF
14166: ST_TO_ADDR
14167: GO 14126
14169: POP
14170: POP
// end ;
14171: LD_VAR 0 4
14175: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14176: LD_INT 0
14178: PPUSH
14179: PPUSH
14180: PPUSH
// result := true ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 1
14188: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14189: LD_ADDR_VAR 0 5
14193: PUSH
14194: LD_VAR 0 2
14198: PPUSH
14199: CALL_OW 480
14203: ST_TO_ADDR
// if not tmp then
14204: LD_VAR 0 5
14208: NOT
14209: IFFALSE 14213
// exit ;
14211: GO 14262
// for i in tmp do
14213: LD_ADDR_VAR 0 4
14217: PUSH
14218: LD_VAR 0 5
14222: PUSH
14223: FOR_IN
14224: IFFALSE 14260
// if GetTech ( i , side ) <> state_researched then
14226: LD_VAR 0 4
14230: PPUSH
14231: LD_VAR 0 1
14235: PPUSH
14236: CALL_OW 321
14240: PUSH
14241: LD_INT 2
14243: NONEQUAL
14244: IFFALSE 14258
// begin result := false ;
14246: LD_ADDR_VAR 0 3
14250: PUSH
14251: LD_INT 0
14253: ST_TO_ADDR
// exit ;
14254: POP
14255: POP
14256: GO 14262
// end ;
14258: GO 14223
14260: POP
14261: POP
// end ;
14262: LD_VAR 0 3
14266: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14267: LD_INT 0
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
14280: PPUSH
14281: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14282: LD_VAR 0 1
14286: NOT
14287: PUSH
14288: LD_VAR 0 1
14292: PPUSH
14293: CALL_OW 257
14297: PUSH
14298: LD_INT 9
14300: NONEQUAL
14301: OR
14302: IFFALSE 14306
// exit ;
14304: GO 14879
// side := GetSide ( unit ) ;
14306: LD_ADDR_VAR 0 9
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 255
14320: ST_TO_ADDR
// tech_space := tech_spacanom ;
14321: LD_ADDR_VAR 0 12
14325: PUSH
14326: LD_INT 29
14328: ST_TO_ADDR
// tech_time := tech_taurad ;
14329: LD_ADDR_VAR 0 13
14333: PUSH
14334: LD_INT 28
14336: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14337: LD_ADDR_VAR 0 11
14341: PUSH
14342: LD_VAR 0 1
14346: PPUSH
14347: CALL_OW 310
14351: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14352: LD_VAR 0 11
14356: PPUSH
14357: CALL_OW 247
14361: PUSH
14362: LD_INT 2
14364: EQUAL
14365: IFFALSE 14369
// exit ;
14367: GO 14879
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14369: LD_ADDR_VAR 0 8
14373: PUSH
14374: LD_INT 81
14376: PUSH
14377: LD_VAR 0 9
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: LD_INT 21
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PPUSH
14407: CALL_OW 69
14411: ST_TO_ADDR
// if not tmp then
14412: LD_VAR 0 8
14416: NOT
14417: IFFALSE 14421
// exit ;
14419: GO 14879
// if in_unit then
14421: LD_VAR 0 11
14425: IFFALSE 14449
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14427: LD_ADDR_VAR 0 10
14431: PUSH
14432: LD_VAR 0 8
14436: PPUSH
14437: LD_VAR 0 11
14441: PPUSH
14442: CALL_OW 74
14446: ST_TO_ADDR
14447: GO 14469
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14449: LD_ADDR_VAR 0 10
14453: PUSH
14454: LD_VAR 0 8
14458: PPUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 74
14468: ST_TO_ADDR
// if not enemy then
14469: LD_VAR 0 10
14473: NOT
14474: IFFALSE 14478
// exit ;
14476: GO 14879
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14478: LD_VAR 0 11
14482: PUSH
14483: LD_VAR 0 11
14487: PPUSH
14488: LD_VAR 0 10
14492: PPUSH
14493: CALL_OW 296
14497: PUSH
14498: LD_INT 13
14500: GREATER
14501: AND
14502: PUSH
14503: LD_VAR 0 1
14507: PPUSH
14508: LD_VAR 0 10
14512: PPUSH
14513: CALL_OW 296
14517: PUSH
14518: LD_INT 12
14520: GREATER
14521: OR
14522: IFFALSE 14526
// exit ;
14524: GO 14879
// missile := [ 1 ] ;
14526: LD_ADDR_VAR 0 14
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14537: LD_VAR 0 9
14541: PPUSH
14542: LD_VAR 0 12
14546: PPUSH
14547: CALL_OW 325
14551: IFFALSE 14580
// missile := Insert ( missile , missile + 1 , 2 ) ;
14553: LD_ADDR_VAR 0 14
14557: PUSH
14558: LD_VAR 0 14
14562: PPUSH
14563: LD_VAR 0 14
14567: PUSH
14568: LD_INT 1
14570: PLUS
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 2
14579: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14580: LD_VAR 0 9
14584: PPUSH
14585: LD_VAR 0 13
14589: PPUSH
14590: CALL_OW 325
14594: PUSH
14595: LD_VAR 0 10
14599: PPUSH
14600: CALL_OW 255
14604: PPUSH
14605: LD_VAR 0 13
14609: PPUSH
14610: CALL_OW 325
14614: NOT
14615: AND
14616: IFFALSE 14645
// missile := Insert ( missile , missile + 1 , 3 ) ;
14618: LD_ADDR_VAR 0 14
14622: PUSH
14623: LD_VAR 0 14
14627: PPUSH
14628: LD_VAR 0 14
14632: PUSH
14633: LD_INT 1
14635: PLUS
14636: PPUSH
14637: LD_INT 3
14639: PPUSH
14640: CALL_OW 2
14644: ST_TO_ADDR
// if missile < 2 then
14645: LD_VAR 0 14
14649: PUSH
14650: LD_INT 2
14652: LESS
14653: IFFALSE 14657
// exit ;
14655: GO 14879
// x := GetX ( enemy ) ;
14657: LD_ADDR_VAR 0 4
14661: PUSH
14662: LD_VAR 0 10
14666: PPUSH
14667: CALL_OW 250
14671: ST_TO_ADDR
// y := GetY ( enemy ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_VAR 0 10
14681: PPUSH
14682: CALL_OW 251
14686: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14687: LD_ADDR_VAR 0 6
14691: PUSH
14692: LD_VAR 0 4
14696: PUSH
14697: LD_INT 1
14699: NEG
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: CALL_OW 12
14708: PLUS
14709: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14710: LD_ADDR_VAR 0 7
14714: PUSH
14715: LD_VAR 0 5
14719: PUSH
14720: LD_INT 1
14722: NEG
14723: PPUSH
14724: LD_INT 1
14726: PPUSH
14727: CALL_OW 12
14731: PLUS
14732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14733: LD_VAR 0 6
14737: PPUSH
14738: LD_VAR 0 7
14742: PPUSH
14743: CALL_OW 488
14747: NOT
14748: IFFALSE 14770
// begin _x := x ;
14750: LD_ADDR_VAR 0 6
14754: PUSH
14755: LD_VAR 0 4
14759: ST_TO_ADDR
// _y := y ;
14760: LD_ADDR_VAR 0 7
14764: PUSH
14765: LD_VAR 0 5
14769: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_INT 1
14777: PPUSH
14778: LD_VAR 0 14
14782: PPUSH
14783: CALL_OW 12
14787: ST_TO_ADDR
// case i of 1 :
14788: LD_VAR 0 3
14792: PUSH
14793: LD_INT 1
14795: DOUBLE
14796: EQUAL
14797: IFTRUE 14801
14799: GO 14818
14801: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14802: LD_VAR 0 1
14806: PPUSH
14807: LD_VAR 0 10
14811: PPUSH
14812: CALL_OW 115
14816: GO 14879
14818: LD_INT 2
14820: DOUBLE
14821: EQUAL
14822: IFTRUE 14826
14824: GO 14848
14826: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_VAR 0 6
14836: PPUSH
14837: LD_VAR 0 7
14841: PPUSH
14842: CALL_OW 153
14846: GO 14879
14848: LD_INT 3
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14856
14854: GO 14878
14856: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14857: LD_VAR 0 1
14861: PPUSH
14862: LD_VAR 0 6
14866: PPUSH
14867: LD_VAR 0 7
14871: PPUSH
14872: CALL_OW 154
14876: GO 14879
14878: POP
// end ;
14879: LD_VAR 0 2
14883: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
14891: PPUSH
// if not unit or not building then
14892: LD_VAR 0 1
14896: NOT
14897: PUSH
14898: LD_VAR 0 2
14902: NOT
14903: OR
14904: IFFALSE 14908
// exit ;
14906: GO 15066
// x := GetX ( building ) ;
14908: LD_ADDR_VAR 0 5
14912: PUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 250
14922: ST_TO_ADDR
// y := GetY ( building ) ;
14923: LD_ADDR_VAR 0 6
14927: PUSH
14928: LD_VAR 0 2
14932: PPUSH
14933: CALL_OW 251
14937: ST_TO_ADDR
// for i = 0 to 5 do
14938: LD_ADDR_VAR 0 4
14942: PUSH
14943: DOUBLE
14944: LD_INT 0
14946: DEC
14947: ST_TO_ADDR
14948: LD_INT 5
14950: PUSH
14951: FOR_TO
14952: IFFALSE 15064
// begin _x := ShiftX ( x , i , 3 ) ;
14954: LD_ADDR_VAR 0 7
14958: PUSH
14959: LD_VAR 0 5
14963: PPUSH
14964: LD_VAR 0 4
14968: PPUSH
14969: LD_INT 3
14971: PPUSH
14972: CALL_OW 272
14976: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14977: LD_ADDR_VAR 0 8
14981: PUSH
14982: LD_VAR 0 6
14986: PPUSH
14987: LD_VAR 0 4
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 273
14999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15000: LD_VAR 0 7
15004: PPUSH
15005: LD_VAR 0 8
15009: PPUSH
15010: CALL_OW 488
15014: NOT
15015: IFFALSE 15019
// continue ;
15017: GO 14951
// if HexInfo ( _x , _y ) = 0 then
15019: LD_VAR 0 7
15023: PPUSH
15024: LD_VAR 0 8
15028: PPUSH
15029: CALL_OW 428
15033: PUSH
15034: LD_INT 0
15036: EQUAL
15037: IFFALSE 15062
// begin ComMoveXY ( unit , _x , _y ) ;
15039: LD_VAR 0 1
15043: PPUSH
15044: LD_VAR 0 7
15048: PPUSH
15049: LD_VAR 0 8
15053: PPUSH
15054: CALL_OW 111
// exit ;
15058: POP
15059: POP
15060: GO 15066
// end ; end ;
15062: GO 14951
15064: POP
15065: POP
// end ;
15066: LD_VAR 0 3
15070: RET
// export function ScanBase ( side , base_area ) ; begin
15071: LD_INT 0
15073: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15074: LD_ADDR_VAR 0 3
15078: PUSH
15079: LD_VAR 0 2
15083: PPUSH
15084: LD_INT 81
15086: PUSH
15087: LD_VAR 0 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 70
15100: ST_TO_ADDR
// end ;
15101: LD_VAR 0 3
15105: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15106: LD_INT 0
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
// result := false ;
15112: LD_ADDR_VAR 0 2
15116: PUSH
15117: LD_INT 0
15119: ST_TO_ADDR
// side := GetSide ( unit ) ;
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_VAR 0 1
15129: PPUSH
15130: CALL_OW 255
15134: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15135: LD_ADDR_VAR 0 4
15139: PUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 248
15149: ST_TO_ADDR
// case nat of 1 :
15150: LD_VAR 0 4
15154: PUSH
15155: LD_INT 1
15157: DOUBLE
15158: EQUAL
15159: IFTRUE 15163
15161: GO 15174
15163: POP
// tech := tech_lassight ; 2 :
15164: LD_ADDR_VAR 0 5
15168: PUSH
15169: LD_INT 12
15171: ST_TO_ADDR
15172: GO 15213
15174: LD_INT 2
15176: DOUBLE
15177: EQUAL
15178: IFTRUE 15182
15180: GO 15193
15182: POP
// tech := tech_mortar ; 3 :
15183: LD_ADDR_VAR 0 5
15187: PUSH
15188: LD_INT 41
15190: ST_TO_ADDR
15191: GO 15213
15193: LD_INT 3
15195: DOUBLE
15196: EQUAL
15197: IFTRUE 15201
15199: GO 15212
15201: POP
// tech := tech_bazooka ; end ;
15202: LD_ADDR_VAR 0 5
15206: PUSH
15207: LD_INT 44
15209: ST_TO_ADDR
15210: GO 15213
15212: POP
// if Researched ( side , tech ) then
15213: LD_VAR 0 3
15217: PPUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: CALL_OW 325
15227: IFFALSE 15254
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 5
15236: PUSH
15237: LD_INT 8
15239: PUSH
15240: LD_INT 9
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: LD_VAR 0 4
15252: ARRAY
15253: ST_TO_ADDR
// end ;
15254: LD_VAR 0 2
15258: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15259: LD_INT 0
15261: PPUSH
15262: PPUSH
15263: PPUSH
// if not mines then
15264: LD_VAR 0 2
15268: NOT
15269: IFFALSE 15273
// exit ;
15271: GO 15417
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15273: LD_ADDR_VAR 0 5
15277: PUSH
15278: LD_INT 81
15280: PUSH
15281: LD_VAR 0 1
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 3
15292: PUSH
15293: LD_INT 21
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: ST_TO_ADDR
// for i in mines do
15316: LD_ADDR_VAR 0 4
15320: PUSH
15321: LD_VAR 0 2
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15415
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15329: LD_VAR 0 4
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: LD_VAR 0 4
15342: PUSH
15343: LD_INT 2
15345: ARRAY
15346: PPUSH
15347: CALL_OW 458
15351: NOT
15352: IFFALSE 15356
// continue ;
15354: GO 15326
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15356: LD_VAR 0 4
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: LD_VAR 0 4
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: PPUSH
15374: CALL_OW 428
15378: PUSH
15379: LD_VAR 0 5
15383: IN
15384: IFFALSE 15413
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15386: LD_VAR 0 4
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: LD_VAR 0 4
15399: PUSH
15400: LD_INT 2
15402: ARRAY
15403: PPUSH
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 456
// end ;
15413: GO 15326
15415: POP
15416: POP
// end ;
15417: LD_VAR 0 3
15421: RET
// export function Count ( array ) ; var i ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
// result := 0 ;
15426: LD_ADDR_VAR 0 2
15430: PUSH
15431: LD_INT 0
15433: ST_TO_ADDR
// for i in array do
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_VAR 0 1
15443: PUSH
15444: FOR_IN
15445: IFFALSE 15469
// if i then
15447: LD_VAR 0 3
15451: IFFALSE 15467
// result := result + 1 ;
15453: LD_ADDR_VAR 0 2
15457: PUSH
15458: LD_VAR 0 2
15462: PUSH
15463: LD_INT 1
15465: PLUS
15466: ST_TO_ADDR
15467: GO 15444
15469: POP
15470: POP
// end ;
15471: LD_VAR 0 2
15475: RET
// export function IsEmpty ( building ) ; begin
15476: LD_INT 0
15478: PPUSH
// if not building then
15479: LD_VAR 0 1
15483: NOT
15484: IFFALSE 15488
// exit ;
15486: GO 15531
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_VAR 0 1
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 255
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 58
15517: PUSH
15518: EMPTY
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PPUSH
15525: CALL_OW 69
15529: IN
15530: ST_TO_ADDR
// end ;
15531: LD_VAR 0 2
15535: RET
// export function IsNotFull ( building ) ; begin
15536: LD_INT 0
15538: PPUSH
// if not building then
15539: LD_VAR 0 1
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15567
// result := UnitsInside ( building ) < 6 ;
15548: LD_ADDR_VAR 0 2
15552: PUSH
15553: LD_VAR 0 1
15557: PPUSH
15558: CALL_OW 313
15562: PUSH
15563: LD_INT 6
15565: LESS
15566: ST_TO_ADDR
// end ;
15567: LD_VAR 0 2
15571: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
// tmp := [ ] ;
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: EMPTY
15584: ST_TO_ADDR
// list := [ ] ;
15585: LD_ADDR_VAR 0 5
15589: PUSH
15590: EMPTY
15591: ST_TO_ADDR
// for i = 16 to 25 do
15592: LD_ADDR_VAR 0 4
15596: PUSH
15597: DOUBLE
15598: LD_INT 16
15600: DEC
15601: ST_TO_ADDR
15602: LD_INT 25
15604: PUSH
15605: FOR_TO
15606: IFFALSE 15679
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15608: LD_ADDR_VAR 0 3
15612: PUSH
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: CALL_OW 255
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 91
15637: PUSH
15638: LD_VAR 0 1
15642: PUSH
15643: LD_INT 6
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_VAR 0 4
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: PPUSH
15671: CALL_OW 69
15675: ADD
15676: ST_TO_ADDR
15677: GO 15605
15679: POP
15680: POP
// for i = 1 to tmp do
15681: LD_ADDR_VAR 0 4
15685: PUSH
15686: DOUBLE
15687: LD_INT 1
15689: DEC
15690: ST_TO_ADDR
15691: LD_VAR 0 3
15695: PUSH
15696: FOR_TO
15697: IFFALSE 15785
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_VAR 0 5
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_VAR 0 4
15718: ARRAY
15719: PPUSH
15720: CALL_OW 266
15724: PUSH
15725: LD_VAR 0 3
15729: PUSH
15730: LD_VAR 0 4
15734: ARRAY
15735: PPUSH
15736: CALL_OW 250
15740: PUSH
15741: LD_VAR 0 3
15745: PUSH
15746: LD_VAR 0 4
15750: ARRAY
15751: PPUSH
15752: CALL_OW 251
15756: PUSH
15757: LD_VAR 0 3
15761: PUSH
15762: LD_VAR 0 4
15766: ARRAY
15767: PPUSH
15768: CALL_OW 254
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: ADD
15782: ST_TO_ADDR
15783: GO 15696
15785: POP
15786: POP
// result := list ;
15787: LD_ADDR_VAR 0 2
15791: PUSH
15792: LD_VAR 0 5
15796: ST_TO_ADDR
// end ;
15797: LD_VAR 0 2
15801: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
// if not factory then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 16413
// if control = control_apeman then
15820: LD_VAR 0 4
15824: PUSH
15825: LD_INT 5
15827: EQUAL
15828: IFFALSE 15937
// begin tmp := UnitsInside ( factory ) ;
15830: LD_ADDR_VAR 0 8
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 313
15844: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15845: LD_VAR 0 8
15849: PPUSH
15850: LD_INT 25
15852: PUSH
15853: LD_INT 12
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 72
15864: NOT
15865: IFFALSE 15875
// control := control_manual ;
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_INT 1
15874: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15875: LD_ADDR_VAR 0 8
15879: PUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL 15572 0 1
15889: ST_TO_ADDR
// if tmp then
15890: LD_VAR 0 8
15894: IFFALSE 15937
// begin for i in tmp do
15896: LD_ADDR_VAR 0 7
15900: PUSH
15901: LD_VAR 0 8
15905: PUSH
15906: FOR_IN
15907: IFFALSE 15935
// if i [ 1 ] = b_ext_radio then
15909: LD_VAR 0 7
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PUSH
15918: LD_INT 22
15920: EQUAL
15921: IFFALSE 15933
// begin control := control_remote ;
15923: LD_ADDR_VAR 0 4
15927: PUSH
15928: LD_INT 2
15930: ST_TO_ADDR
// break ;
15931: GO 15935
// end ;
15933: GO 15906
15935: POP
15936: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15937: LD_VAR 0 1
15941: PPUSH
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_VAR 0 4
15956: PPUSH
15957: LD_VAR 0 5
15961: PPUSH
15962: CALL_OW 448
15966: IFFALSE 16001
// begin result := [ chassis , engine , control , weapon ] ;
15968: LD_ADDR_VAR 0 6
15972: PUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_VAR 0 3
15982: PUSH
15983: LD_VAR 0 4
15987: PUSH
15988: LD_VAR 0 5
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// exit ;
15999: GO 16413
// end ; _chassis := AvailableChassisList ( factory ) ;
16001: LD_ADDR_VAR 0 9
16005: PUSH
16006: LD_VAR 0 1
16010: PPUSH
16011: CALL_OW 475
16015: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16016: LD_ADDR_VAR 0 11
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 476
16030: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16031: LD_ADDR_VAR 0 12
16035: PUSH
16036: LD_VAR 0 1
16040: PPUSH
16041: CALL_OW 477
16045: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16046: LD_ADDR_VAR 0 10
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 478
16060: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16061: LD_VAR 0 9
16065: NOT
16066: PUSH
16067: LD_VAR 0 11
16071: NOT
16072: OR
16073: PUSH
16074: LD_VAR 0 12
16078: NOT
16079: OR
16080: PUSH
16081: LD_VAR 0 10
16085: NOT
16086: OR
16087: IFFALSE 16122
// begin result := [ chassis , engine , control , weapon ] ;
16089: LD_ADDR_VAR 0 6
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_VAR 0 3
16103: PUSH
16104: LD_VAR 0 4
16108: PUSH
16109: LD_VAR 0 5
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: ST_TO_ADDR
// exit ;
16120: GO 16413
// end ; if not chassis in _chassis then
16122: LD_VAR 0 2
16126: PUSH
16127: LD_VAR 0 9
16131: IN
16132: NOT
16133: IFFALSE 16159
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_VAR 0 9
16144: PUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_VAR 0 9
16152: PPUSH
16153: CALL_OW 12
16157: ARRAY
16158: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16159: LD_VAR 0 2
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: CALL 16418 0 2
16173: NOT
16174: IFFALSE 16233
// repeat engine := _engine [ 1 ] ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_VAR 0 11
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16190: LD_ADDR_VAR 0 11
16194: PUSH
16195: LD_VAR 0 11
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: CALL_OW 3
16207: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16208: LD_VAR 0 2
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: CALL 16418 0 2
16222: PUSH
16223: LD_VAR 0 11
16227: PUSH
16228: EMPTY
16229: EQUAL
16230: OR
16231: IFFALSE 16176
// if not control in _control then
16233: LD_VAR 0 4
16237: PUSH
16238: LD_VAR 0 12
16242: IN
16243: NOT
16244: IFFALSE 16270
// control := _control [ rand ( 1 , _control ) ] ;
16246: LD_ADDR_VAR 0 4
16250: PUSH
16251: LD_VAR 0 12
16255: PUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_VAR 0 12
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_VAR 0 5
16279: PPUSH
16280: CALL 16638 0 2
16284: NOT
16285: IFFALSE 16344
// repeat weapon := _weapon [ 1 ] ;
16287: LD_ADDR_VAR 0 5
16291: PUSH
16292: LD_VAR 0 10
16296: PUSH
16297: LD_INT 1
16299: ARRAY
16300: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16301: LD_ADDR_VAR 0 10
16305: PUSH
16306: LD_VAR 0 10
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 3
16318: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16319: LD_VAR 0 2
16323: PPUSH
16324: LD_VAR 0 5
16328: PPUSH
16329: CALL 16638 0 2
16333: PUSH
16334: LD_VAR 0 10
16338: PUSH
16339: EMPTY
16340: EQUAL
16341: OR
16342: IFFALSE 16287
// result := [ ] ;
16344: LD_ADDR_VAR 0 6
16348: PUSH
16349: EMPTY
16350: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: LD_VAR 0 5
16375: PPUSH
16376: CALL_OW 448
16380: IFFALSE 16413
// result := [ chassis , engine , control , weapon ] ;
16382: LD_ADDR_VAR 0 6
16386: PUSH
16387: LD_VAR 0 2
16391: PUSH
16392: LD_VAR 0 3
16396: PUSH
16397: LD_VAR 0 4
16401: PUSH
16402: LD_VAR 0 5
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// end ;
16413: LD_VAR 0 6
16417: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16418: LD_INT 0
16420: PPUSH
// if not chassis or not engine then
16421: LD_VAR 0 1
16425: NOT
16426: PUSH
16427: LD_VAR 0 2
16431: NOT
16432: OR
16433: IFFALSE 16437
// exit ;
16435: GO 16633
// case engine of engine_solar :
16437: LD_VAR 0 2
16441: PUSH
16442: LD_INT 2
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16488
16450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_INT 11
16458: PUSH
16459: LD_INT 12
16461: PUSH
16462: LD_INT 13
16464: PUSH
16465: LD_INT 14
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: ST_TO_ADDR
16486: GO 16617
16488: LD_INT 1
16490: DOUBLE
16491: EQUAL
16492: IFTRUE 16496
16494: GO 16558
16496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16497: LD_ADDR_VAR 0 3
16501: PUSH
16502: LD_INT 11
16504: PUSH
16505: LD_INT 12
16507: PUSH
16508: LD_INT 13
16510: PUSH
16511: LD_INT 14
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 23
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_INT 24
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: ST_TO_ADDR
16556: GO 16617
16558: LD_INT 3
16560: DOUBLE
16561: EQUAL
16562: IFTRUE 16566
16564: GO 16616
16566: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16567: LD_ADDR_VAR 0 3
16571: PUSH
16572: LD_INT 13
16574: PUSH
16575: LD_INT 14
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 4
16586: PUSH
16587: LD_INT 5
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_INT 23
16598: PUSH
16599: LD_INT 24
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: ST_TO_ADDR
16614: GO 16617
16616: POP
// result := ( chassis in result ) ;
16617: LD_ADDR_VAR 0 3
16621: PUSH
16622: LD_VAR 0 1
16626: PUSH
16627: LD_VAR 0 3
16631: IN
16632: ST_TO_ADDR
// end ;
16633: LD_VAR 0 3
16637: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16638: LD_INT 0
16640: PPUSH
// if not chassis or not weapon then
16641: LD_VAR 0 1
16645: NOT
16646: PUSH
16647: LD_VAR 0 2
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 17719
// case weapon of us_machine_gun :
16657: LD_VAR 0 2
16661: PUSH
16662: LD_INT 2
16664: DOUBLE
16665: EQUAL
16666: IFTRUE 16670
16668: GO 16700
16670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 3
16684: PUSH
16685: LD_INT 4
16687: PUSH
16688: LD_INT 5
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: ST_TO_ADDR
16698: GO 17703
16700: LD_INT 3
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16738
16708: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 4
16725: PUSH
16726: LD_INT 5
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
16736: GO 17703
16738: LD_INT 11
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16776
16746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16747: LD_ADDR_VAR 0 3
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: LD_INT 3
16760: PUSH
16761: LD_INT 4
16763: PUSH
16764: LD_INT 5
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: ST_TO_ADDR
16774: GO 17703
16776: LD_INT 4
16778: DOUBLE
16779: EQUAL
16780: IFTRUE 16784
16782: GO 16810
16784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 3
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: LD_INT 5
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: ST_TO_ADDR
16808: GO 17703
16810: LD_INT 5
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16844
16818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16819: LD_ADDR_VAR 0 3
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: LD_INT 3
16829: PUSH
16830: LD_INT 4
16832: PUSH
16833: LD_INT 5
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: ST_TO_ADDR
16842: GO 17703
16844: LD_INT 9
16846: DOUBLE
16847: EQUAL
16848: IFTRUE 16852
16850: GO 16878
16852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16853: LD_ADDR_VAR 0 3
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: ST_TO_ADDR
16876: GO 17703
16878: LD_INT 7
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16912
16886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 3
16897: PUSH
16898: LD_INT 4
16900: PUSH
16901: LD_INT 5
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: ST_TO_ADDR
16910: GO 17703
16912: LD_INT 12
16914: DOUBLE
16915: EQUAL
16916: IFTRUE 16920
16918: GO 16946
16920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16921: LD_ADDR_VAR 0 3
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: LD_INT 5
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: ST_TO_ADDR
16944: GO 17703
16946: LD_INT 13
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 16980
16954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: LD_INT 3
16965: PUSH
16966: LD_INT 4
16968: PUSH
16969: LD_INT 5
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: ST_TO_ADDR
16978: GO 17703
16980: LD_INT 14
16982: DOUBLE
16983: EQUAL
16984: IFTRUE 16988
16986: GO 17006
16988: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16989: LD_ADDR_VAR 0 3
16993: PUSH
16994: LD_INT 4
16996: PUSH
16997: LD_INT 5
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: ST_TO_ADDR
17004: GO 17703
17006: LD_INT 6
17008: DOUBLE
17009: EQUAL
17010: IFTRUE 17014
17012: GO 17032
17014: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: LD_INT 4
17022: PUSH
17023: LD_INT 5
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: ST_TO_ADDR
17030: GO 17703
17032: LD_INT 10
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17058
17040: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17041: LD_ADDR_VAR 0 3
17045: PUSH
17046: LD_INT 4
17048: PUSH
17049: LD_INT 5
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: ST_TO_ADDR
17056: GO 17703
17058: LD_INT 22
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17092
17066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_INT 11
17074: PUSH
17075: LD_INT 12
17077: PUSH
17078: LD_INT 13
17080: PUSH
17081: LD_INT 14
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: ST_TO_ADDR
17090: GO 17703
17092: LD_INT 23
17094: DOUBLE
17095: EQUAL
17096: IFTRUE 17100
17098: GO 17126
17100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17101: LD_ADDR_VAR 0 3
17105: PUSH
17106: LD_INT 11
17108: PUSH
17109: LD_INT 12
17111: PUSH
17112: LD_INT 13
17114: PUSH
17115: LD_INT 14
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: ST_TO_ADDR
17124: GO 17703
17126: LD_INT 24
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17160
17134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17135: LD_ADDR_VAR 0 3
17139: PUSH
17140: LD_INT 11
17142: PUSH
17143: LD_INT 12
17145: PUSH
17146: LD_INT 13
17148: PUSH
17149: LD_INT 14
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: ST_TO_ADDR
17158: GO 17703
17160: LD_INT 30
17162: DOUBLE
17163: EQUAL
17164: IFTRUE 17168
17166: GO 17194
17168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17169: LD_ADDR_VAR 0 3
17173: PUSH
17174: LD_INT 11
17176: PUSH
17177: LD_INT 12
17179: PUSH
17180: LD_INT 13
17182: PUSH
17183: LD_INT 14
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: ST_TO_ADDR
17192: GO 17703
17194: LD_INT 25
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17220
17202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17203: LD_ADDR_VAR 0 3
17207: PUSH
17208: LD_INT 13
17210: PUSH
17211: LD_INT 14
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: ST_TO_ADDR
17218: GO 17703
17220: LD_INT 27
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17246
17228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 13
17236: PUSH
17237: LD_INT 14
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: ST_TO_ADDR
17244: GO 17703
17246: LD_EXP 101
17250: DOUBLE
17251: EQUAL
17252: IFTRUE 17256
17254: GO 17282
17256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_INT 11
17264: PUSH
17265: LD_INT 12
17267: PUSH
17268: LD_INT 13
17270: PUSH
17271: LD_INT 14
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: ST_TO_ADDR
17280: GO 17703
17282: LD_INT 28
17284: DOUBLE
17285: EQUAL
17286: IFTRUE 17290
17288: GO 17308
17290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_INT 13
17298: PUSH
17299: LD_INT 14
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: ST_TO_ADDR
17306: GO 17703
17308: LD_INT 29
17310: DOUBLE
17311: EQUAL
17312: IFTRUE 17316
17314: GO 17334
17316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17317: LD_ADDR_VAR 0 3
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: ST_TO_ADDR
17332: GO 17703
17334: LD_INT 31
17336: DOUBLE
17337: EQUAL
17338: IFTRUE 17342
17340: GO 17360
17342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17343: LD_ADDR_VAR 0 3
17347: PUSH
17348: LD_INT 13
17350: PUSH
17351: LD_INT 14
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: ST_TO_ADDR
17358: GO 17703
17360: LD_INT 26
17362: DOUBLE
17363: EQUAL
17364: IFTRUE 17368
17366: GO 17386
17368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17369: LD_ADDR_VAR 0 3
17373: PUSH
17374: LD_INT 13
17376: PUSH
17377: LD_INT 14
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: ST_TO_ADDR
17384: GO 17703
17386: LD_INT 42
17388: DOUBLE
17389: EQUAL
17390: IFTRUE 17394
17392: GO 17420
17394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17395: LD_ADDR_VAR 0 3
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 23
17408: PUSH
17409: LD_INT 24
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: ST_TO_ADDR
17418: GO 17703
17420: LD_INT 43
17422: DOUBLE
17423: EQUAL
17424: IFTRUE 17428
17426: GO 17454
17428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17429: LD_ADDR_VAR 0 3
17433: PUSH
17434: LD_INT 21
17436: PUSH
17437: LD_INT 22
17439: PUSH
17440: LD_INT 23
17442: PUSH
17443: LD_INT 24
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: ST_TO_ADDR
17452: GO 17703
17454: LD_INT 44
17456: DOUBLE
17457: EQUAL
17458: IFTRUE 17462
17460: GO 17488
17462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17463: LD_ADDR_VAR 0 3
17467: PUSH
17468: LD_INT 21
17470: PUSH
17471: LD_INT 22
17473: PUSH
17474: LD_INT 23
17476: PUSH
17477: LD_INT 24
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: ST_TO_ADDR
17486: GO 17703
17488: LD_INT 45
17490: DOUBLE
17491: EQUAL
17492: IFTRUE 17496
17494: GO 17522
17496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17497: LD_ADDR_VAR 0 3
17501: PUSH
17502: LD_INT 21
17504: PUSH
17505: LD_INT 22
17507: PUSH
17508: LD_INT 23
17510: PUSH
17511: LD_INT 24
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: ST_TO_ADDR
17520: GO 17703
17522: LD_INT 49
17524: DOUBLE
17525: EQUAL
17526: IFTRUE 17530
17528: GO 17556
17530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17531: LD_ADDR_VAR 0 3
17535: PUSH
17536: LD_INT 21
17538: PUSH
17539: LD_INT 22
17541: PUSH
17542: LD_INT 23
17544: PUSH
17545: LD_INT 24
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: ST_TO_ADDR
17554: GO 17703
17556: LD_INT 51
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17590
17564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17565: LD_ADDR_VAR 0 3
17569: PUSH
17570: LD_INT 21
17572: PUSH
17573: LD_INT 22
17575: PUSH
17576: LD_INT 23
17578: PUSH
17579: LD_INT 24
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: ST_TO_ADDR
17588: GO 17703
17590: LD_INT 52
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17624
17598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17599: LD_ADDR_VAR 0 3
17603: PUSH
17604: LD_INT 21
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 23
17612: PUSH
17613: LD_INT 24
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: ST_TO_ADDR
17622: GO 17703
17624: LD_INT 53
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17650
17632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17633: LD_ADDR_VAR 0 3
17637: PUSH
17638: LD_INT 23
17640: PUSH
17641: LD_INT 24
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: ST_TO_ADDR
17648: GO 17703
17650: LD_INT 46
17652: DOUBLE
17653: EQUAL
17654: IFTRUE 17658
17656: GO 17676
17658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: LD_INT 23
17666: PUSH
17667: LD_INT 24
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: ST_TO_ADDR
17674: GO 17703
17676: LD_INT 47
17678: DOUBLE
17679: EQUAL
17680: IFTRUE 17684
17682: GO 17702
17684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17685: LD_ADDR_VAR 0 3
17689: PUSH
17690: LD_INT 23
17692: PUSH
17693: LD_INT 24
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: ST_TO_ADDR
17700: GO 17703
17702: POP
// result := ( chassis in result ) ;
17703: LD_ADDR_VAR 0 3
17707: PUSH
17708: LD_VAR 0 1
17712: PUSH
17713: LD_VAR 0 3
17717: IN
17718: ST_TO_ADDR
// end ;
17719: LD_VAR 0 3
17723: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// result := array ;
17733: LD_ADDR_VAR 0 5
17737: PUSH
17738: LD_VAR 0 1
17742: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17743: LD_VAR 0 1
17747: NOT
17748: PUSH
17749: LD_VAR 0 2
17753: NOT
17754: OR
17755: PUSH
17756: LD_VAR 0 3
17760: NOT
17761: OR
17762: PUSH
17763: LD_VAR 0 2
17767: PUSH
17768: LD_VAR 0 1
17772: GREATER
17773: OR
17774: PUSH
17775: LD_VAR 0 3
17779: PUSH
17780: LD_VAR 0 1
17784: GREATER
17785: OR
17786: IFFALSE 17790
// exit ;
17788: GO 18086
// if direction then
17790: LD_VAR 0 4
17794: IFFALSE 17858
// begin d := 1 ;
17796: LD_ADDR_VAR 0 9
17800: PUSH
17801: LD_INT 1
17803: ST_TO_ADDR
// if i_from > i_to then
17804: LD_VAR 0 2
17808: PUSH
17809: LD_VAR 0 3
17813: GREATER
17814: IFFALSE 17840
// length := ( array - i_from ) + i_to else
17816: LD_ADDR_VAR 0 11
17820: PUSH
17821: LD_VAR 0 1
17825: PUSH
17826: LD_VAR 0 2
17830: MINUS
17831: PUSH
17832: LD_VAR 0 3
17836: PLUS
17837: ST_TO_ADDR
17838: GO 17856
// length := i_to - i_from ;
17840: LD_ADDR_VAR 0 11
17844: PUSH
17845: LD_VAR 0 3
17849: PUSH
17850: LD_VAR 0 2
17854: MINUS
17855: ST_TO_ADDR
// end else
17856: GO 17919
// begin d := - 1 ;
17858: LD_ADDR_VAR 0 9
17862: PUSH
17863: LD_INT 1
17865: NEG
17866: ST_TO_ADDR
// if i_from > i_to then
17867: LD_VAR 0 2
17871: PUSH
17872: LD_VAR 0 3
17876: GREATER
17877: IFFALSE 17897
// length := i_from - i_to else
17879: LD_ADDR_VAR 0 11
17883: PUSH
17884: LD_VAR 0 2
17888: PUSH
17889: LD_VAR 0 3
17893: MINUS
17894: ST_TO_ADDR
17895: GO 17919
// length := ( array - i_to ) + i_from ;
17897: LD_ADDR_VAR 0 11
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_VAR 0 3
17911: MINUS
17912: PUSH
17913: LD_VAR 0 2
17917: PLUS
17918: ST_TO_ADDR
// end ; if not length then
17919: LD_VAR 0 11
17923: NOT
17924: IFFALSE 17928
// exit ;
17926: GO 18086
// tmp := array ;
17928: LD_ADDR_VAR 0 10
17932: PUSH
17933: LD_VAR 0 1
17937: ST_TO_ADDR
// for i = 1 to length do
17938: LD_ADDR_VAR 0 6
17942: PUSH
17943: DOUBLE
17944: LD_INT 1
17946: DEC
17947: ST_TO_ADDR
17948: LD_VAR 0 11
17952: PUSH
17953: FOR_TO
17954: IFFALSE 18074
// begin for j = 1 to array do
17956: LD_ADDR_VAR 0 7
17960: PUSH
17961: DOUBLE
17962: LD_INT 1
17964: DEC
17965: ST_TO_ADDR
17966: LD_VAR 0 1
17970: PUSH
17971: FOR_TO
17972: IFFALSE 18060
// begin k := j + d ;
17974: LD_ADDR_VAR 0 8
17978: PUSH
17979: LD_VAR 0 7
17983: PUSH
17984: LD_VAR 0 9
17988: PLUS
17989: ST_TO_ADDR
// if k > array then
17990: LD_VAR 0 8
17994: PUSH
17995: LD_VAR 0 1
17999: GREATER
18000: IFFALSE 18010
// k := 1 ;
18002: LD_ADDR_VAR 0 8
18006: PUSH
18007: LD_INT 1
18009: ST_TO_ADDR
// if not k then
18010: LD_VAR 0 8
18014: NOT
18015: IFFALSE 18027
// k := array ;
18017: LD_ADDR_VAR 0 8
18021: PUSH
18022: LD_VAR 0 1
18026: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18027: LD_ADDR_VAR 0 10
18031: PUSH
18032: LD_VAR 0 10
18036: PPUSH
18037: LD_VAR 0 8
18041: PPUSH
18042: LD_VAR 0 1
18046: PUSH
18047: LD_VAR 0 7
18051: ARRAY
18052: PPUSH
18053: CALL_OW 1
18057: ST_TO_ADDR
// end ;
18058: GO 17971
18060: POP
18061: POP
// array := tmp ;
18062: LD_ADDR_VAR 0 1
18066: PUSH
18067: LD_VAR 0 10
18071: ST_TO_ADDR
// end ;
18072: GO 17953
18074: POP
18075: POP
// result := array ;
18076: LD_ADDR_VAR 0 5
18080: PUSH
18081: LD_VAR 0 1
18085: ST_TO_ADDR
// end ;
18086: LD_VAR 0 5
18090: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18091: LD_INT 0
18093: PPUSH
18094: PPUSH
// result := 0 ;
18095: LD_ADDR_VAR 0 3
18099: PUSH
18100: LD_INT 0
18102: ST_TO_ADDR
// if not array or not value in array then
18103: LD_VAR 0 1
18107: NOT
18108: PUSH
18109: LD_VAR 0 2
18113: PUSH
18114: LD_VAR 0 1
18118: IN
18119: NOT
18120: OR
18121: IFFALSE 18125
// exit ;
18123: GO 18179
// for i = 1 to array do
18125: LD_ADDR_VAR 0 4
18129: PUSH
18130: DOUBLE
18131: LD_INT 1
18133: DEC
18134: ST_TO_ADDR
18135: LD_VAR 0 1
18139: PUSH
18140: FOR_TO
18141: IFFALSE 18177
// if value = array [ i ] then
18143: LD_VAR 0 2
18147: PUSH
18148: LD_VAR 0 1
18152: PUSH
18153: LD_VAR 0 4
18157: ARRAY
18158: EQUAL
18159: IFFALSE 18175
// begin result := i ;
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_VAR 0 4
18170: ST_TO_ADDR
// exit ;
18171: POP
18172: POP
18173: GO 18179
// end ;
18175: GO 18140
18177: POP
18178: POP
// end ;
18179: LD_VAR 0 3
18183: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18184: LD_INT 0
18186: PPUSH
// vc_chassis := chassis ;
18187: LD_ADDR_OWVAR 37
18191: PUSH
18192: LD_VAR 0 1
18196: ST_TO_ADDR
// vc_engine := engine ;
18197: LD_ADDR_OWVAR 39
18201: PUSH
18202: LD_VAR 0 2
18206: ST_TO_ADDR
// vc_control := control ;
18207: LD_ADDR_OWVAR 38
18211: PUSH
18212: LD_VAR 0 3
18216: ST_TO_ADDR
// vc_weapon := weapon ;
18217: LD_ADDR_OWVAR 40
18221: PUSH
18222: LD_VAR 0 4
18226: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18227: LD_ADDR_OWVAR 41
18231: PUSH
18232: LD_VAR 0 5
18236: ST_TO_ADDR
// end ;
18237: LD_VAR 0 6
18241: RET
// export function WantPlant ( unit ) ; var task ; begin
18242: LD_INT 0
18244: PPUSH
18245: PPUSH
// result := false ;
18246: LD_ADDR_VAR 0 2
18250: PUSH
18251: LD_INT 0
18253: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18254: LD_ADDR_VAR 0 3
18258: PUSH
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 437
18268: ST_TO_ADDR
// if task then
18269: LD_VAR 0 3
18273: IFFALSE 18301
// if task [ 1 ] [ 1 ] = p then
18275: LD_VAR 0 3
18279: PUSH
18280: LD_INT 1
18282: ARRAY
18283: PUSH
18284: LD_INT 1
18286: ARRAY
18287: PUSH
18288: LD_STRING p
18290: EQUAL
18291: IFFALSE 18301
// result := true ;
18293: LD_ADDR_VAR 0 2
18297: PUSH
18298: LD_INT 1
18300: ST_TO_ADDR
// end ;
18301: LD_VAR 0 2
18305: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
18310: PPUSH
18311: PPUSH
// if pos < 1 then
18312: LD_VAR 0 2
18316: PUSH
18317: LD_INT 1
18319: LESS
18320: IFFALSE 18324
// exit ;
18322: GO 18627
// if pos = 1 then
18324: LD_VAR 0 2
18328: PUSH
18329: LD_INT 1
18331: EQUAL
18332: IFFALSE 18365
// result := Replace ( arr , pos [ 1 ] , value ) else
18334: LD_ADDR_VAR 0 4
18338: PUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: LD_VAR 0 2
18348: PUSH
18349: LD_INT 1
18351: ARRAY
18352: PPUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: CALL_OW 1
18362: ST_TO_ADDR
18363: GO 18627
// begin tmp := arr ;
18365: LD_ADDR_VAR 0 6
18369: PUSH
18370: LD_VAR 0 1
18374: ST_TO_ADDR
// s_arr := [ tmp ] ;
18375: LD_ADDR_VAR 0 7
18379: PUSH
18380: LD_VAR 0 6
18384: PUSH
18385: EMPTY
18386: LIST
18387: ST_TO_ADDR
// for i = 1 to pos - 1 do
18388: LD_ADDR_VAR 0 5
18392: PUSH
18393: DOUBLE
18394: LD_INT 1
18396: DEC
18397: ST_TO_ADDR
18398: LD_VAR 0 2
18402: PUSH
18403: LD_INT 1
18405: MINUS
18406: PUSH
18407: FOR_TO
18408: IFFALSE 18453
// begin tmp := tmp [ pos [ i ] ] ;
18410: LD_ADDR_VAR 0 6
18414: PUSH
18415: LD_VAR 0 6
18419: PUSH
18420: LD_VAR 0 2
18424: PUSH
18425: LD_VAR 0 5
18429: ARRAY
18430: ARRAY
18431: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18432: LD_ADDR_VAR 0 7
18436: PUSH
18437: LD_VAR 0 7
18441: PUSH
18442: LD_VAR 0 6
18446: PUSH
18447: EMPTY
18448: LIST
18449: ADD
18450: ST_TO_ADDR
// end ;
18451: GO 18407
18453: POP
18454: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18455: LD_ADDR_VAR 0 6
18459: PUSH
18460: LD_VAR 0 6
18464: PPUSH
18465: LD_VAR 0 2
18469: PUSH
18470: LD_VAR 0 2
18474: ARRAY
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: CALL_OW 1
18485: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18486: LD_ADDR_VAR 0 7
18490: PUSH
18491: LD_VAR 0 7
18495: PPUSH
18496: LD_VAR 0 7
18500: PPUSH
18501: LD_VAR 0 6
18505: PPUSH
18506: CALL_OW 1
18510: ST_TO_ADDR
// for i = s_arr downto 2 do
18511: LD_ADDR_VAR 0 5
18515: PUSH
18516: DOUBLE
18517: LD_VAR 0 7
18521: INC
18522: ST_TO_ADDR
18523: LD_INT 2
18525: PUSH
18526: FOR_DOWNTO
18527: IFFALSE 18611
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18529: LD_ADDR_VAR 0 6
18533: PUSH
18534: LD_VAR 0 7
18538: PUSH
18539: LD_VAR 0 5
18543: PUSH
18544: LD_INT 1
18546: MINUS
18547: ARRAY
18548: PPUSH
18549: LD_VAR 0 2
18553: PUSH
18554: LD_VAR 0 5
18558: PUSH
18559: LD_INT 1
18561: MINUS
18562: ARRAY
18563: PPUSH
18564: LD_VAR 0 7
18568: PUSH
18569: LD_VAR 0 5
18573: ARRAY
18574: PPUSH
18575: CALL_OW 1
18579: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18580: LD_ADDR_VAR 0 7
18584: PUSH
18585: LD_VAR 0 7
18589: PPUSH
18590: LD_VAR 0 5
18594: PUSH
18595: LD_INT 1
18597: MINUS
18598: PPUSH
18599: LD_VAR 0 6
18603: PPUSH
18604: CALL_OW 1
18608: ST_TO_ADDR
// end ;
18609: GO 18526
18611: POP
18612: POP
// result := s_arr [ 1 ] ;
18613: LD_ADDR_VAR 0 4
18617: PUSH
18618: LD_VAR 0 7
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: ST_TO_ADDR
// end ; end ;
18627: LD_VAR 0 4
18631: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18632: LD_INT 0
18634: PPUSH
18635: PPUSH
// if not list then
18636: LD_VAR 0 1
18640: NOT
18641: IFFALSE 18645
// exit ;
18643: GO 18736
// i := list [ pos1 ] ;
18645: LD_ADDR_VAR 0 5
18649: PUSH
18650: LD_VAR 0 1
18654: PUSH
18655: LD_VAR 0 2
18659: ARRAY
18660: ST_TO_ADDR
// if not i then
18661: LD_VAR 0 5
18665: NOT
18666: IFFALSE 18670
// exit ;
18668: GO 18736
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18670: LD_ADDR_VAR 0 1
18674: PUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_VAR 0 2
18684: PPUSH
18685: LD_VAR 0 1
18689: PUSH
18690: LD_VAR 0 3
18694: ARRAY
18695: PPUSH
18696: CALL_OW 1
18700: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18701: LD_ADDR_VAR 0 1
18705: PUSH
18706: LD_VAR 0 1
18710: PPUSH
18711: LD_VAR 0 3
18715: PPUSH
18716: LD_VAR 0 5
18720: PPUSH
18721: CALL_OW 1
18725: ST_TO_ADDR
// result := list ;
18726: LD_ADDR_VAR 0 4
18730: PUSH
18731: LD_VAR 0 1
18735: ST_TO_ADDR
// end ;
18736: LD_VAR 0 4
18740: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18741: LD_INT 0
18743: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18744: LD_ADDR_VAR 0 5
18748: PUSH
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 250
18758: PPUSH
18759: LD_VAR 0 1
18763: PPUSH
18764: CALL_OW 251
18768: PPUSH
18769: LD_VAR 0 2
18773: PPUSH
18774: LD_VAR 0 3
18778: PPUSH
18779: LD_VAR 0 4
18783: PPUSH
18784: CALL 18794 0 5
18788: ST_TO_ADDR
// end ;
18789: LD_VAR 0 5
18793: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18794: LD_INT 0
18796: PPUSH
18797: PPUSH
18798: PPUSH
18799: PPUSH
// if not list then
18800: LD_VAR 0 3
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 19197
// result := [ ] ;
18809: LD_ADDR_VAR 0 6
18813: PUSH
18814: EMPTY
18815: ST_TO_ADDR
// for i in list do
18816: LD_ADDR_VAR 0 7
18820: PUSH
18821: LD_VAR 0 3
18825: PUSH
18826: FOR_IN
18827: IFFALSE 19029
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18829: LD_ADDR_VAR 0 9
18833: PUSH
18834: LD_VAR 0 7
18838: PPUSH
18839: LD_VAR 0 1
18843: PPUSH
18844: LD_VAR 0 2
18848: PPUSH
18849: CALL_OW 297
18853: ST_TO_ADDR
// if not result then
18854: LD_VAR 0 6
18858: NOT
18859: IFFALSE 18885
// result := [ [ i , tmp ] ] else
18861: LD_ADDR_VAR 0 6
18865: PUSH
18866: LD_VAR 0 7
18870: PUSH
18871: LD_VAR 0 9
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: EMPTY
18881: LIST
18882: ST_TO_ADDR
18883: GO 19027
// begin if result [ result ] [ 2 ] < tmp then
18885: LD_VAR 0 6
18889: PUSH
18890: LD_VAR 0 6
18894: ARRAY
18895: PUSH
18896: LD_INT 2
18898: ARRAY
18899: PUSH
18900: LD_VAR 0 9
18904: LESS
18905: IFFALSE 18947
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18907: LD_ADDR_VAR 0 6
18911: PUSH
18912: LD_VAR 0 6
18916: PPUSH
18917: LD_VAR 0 6
18921: PUSH
18922: LD_INT 1
18924: PLUS
18925: PPUSH
18926: LD_VAR 0 7
18930: PUSH
18931: LD_VAR 0 9
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PPUSH
18940: CALL_OW 2
18944: ST_TO_ADDR
18945: GO 19027
// for j = 1 to result do
18947: LD_ADDR_VAR 0 8
18951: PUSH
18952: DOUBLE
18953: LD_INT 1
18955: DEC
18956: ST_TO_ADDR
18957: LD_VAR 0 6
18961: PUSH
18962: FOR_TO
18963: IFFALSE 19025
// begin if tmp < result [ j ] [ 2 ] then
18965: LD_VAR 0 9
18969: PUSH
18970: LD_VAR 0 6
18974: PUSH
18975: LD_VAR 0 8
18979: ARRAY
18980: PUSH
18981: LD_INT 2
18983: ARRAY
18984: LESS
18985: IFFALSE 19023
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18987: LD_ADDR_VAR 0 6
18991: PUSH
18992: LD_VAR 0 6
18996: PPUSH
18997: LD_VAR 0 8
19001: PPUSH
19002: LD_VAR 0 7
19006: PUSH
19007: LD_VAR 0 9
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PPUSH
19016: CALL_OW 2
19020: ST_TO_ADDR
// break ;
19021: GO 19025
// end ; end ;
19023: GO 18962
19025: POP
19026: POP
// end ; end ;
19027: GO 18826
19029: POP
19030: POP
// if result and not asc then
19031: LD_VAR 0 6
19035: PUSH
19036: LD_VAR 0 4
19040: NOT
19041: AND
19042: IFFALSE 19117
// begin tmp := result ;
19044: LD_ADDR_VAR 0 9
19048: PUSH
19049: LD_VAR 0 6
19053: ST_TO_ADDR
// for i = tmp downto 1 do
19054: LD_ADDR_VAR 0 7
19058: PUSH
19059: DOUBLE
19060: LD_VAR 0 9
19064: INC
19065: ST_TO_ADDR
19066: LD_INT 1
19068: PUSH
19069: FOR_DOWNTO
19070: IFFALSE 19115
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19072: LD_ADDR_VAR 0 6
19076: PUSH
19077: LD_VAR 0 6
19081: PPUSH
19082: LD_VAR 0 9
19086: PUSH
19087: LD_VAR 0 7
19091: MINUS
19092: PUSH
19093: LD_INT 1
19095: PLUS
19096: PPUSH
19097: LD_VAR 0 9
19101: PUSH
19102: LD_VAR 0 7
19106: ARRAY
19107: PPUSH
19108: CALL_OW 1
19112: ST_TO_ADDR
19113: GO 19069
19115: POP
19116: POP
// end ; tmp := [ ] ;
19117: LD_ADDR_VAR 0 9
19121: PUSH
19122: EMPTY
19123: ST_TO_ADDR
// if mode then
19124: LD_VAR 0 5
19128: IFFALSE 19197
// begin for i = 1 to result do
19130: LD_ADDR_VAR 0 7
19134: PUSH
19135: DOUBLE
19136: LD_INT 1
19138: DEC
19139: ST_TO_ADDR
19140: LD_VAR 0 6
19144: PUSH
19145: FOR_TO
19146: IFFALSE 19185
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19148: LD_ADDR_VAR 0 9
19152: PUSH
19153: LD_VAR 0 9
19157: PPUSH
19158: LD_VAR 0 7
19162: PPUSH
19163: LD_VAR 0 6
19167: PUSH
19168: LD_VAR 0 7
19172: ARRAY
19173: PUSH
19174: LD_INT 1
19176: ARRAY
19177: PPUSH
19178: CALL_OW 1
19182: ST_TO_ADDR
19183: GO 19145
19185: POP
19186: POP
// result := tmp ;
19187: LD_ADDR_VAR 0 6
19191: PUSH
19192: LD_VAR 0 9
19196: ST_TO_ADDR
// end ; end ;
19197: LD_VAR 0 6
19201: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19202: LD_INT 0
19204: PPUSH
19205: PPUSH
19206: PPUSH
19207: PPUSH
19208: PPUSH
19209: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19210: LD_ADDR_VAR 0 5
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: EMPTY
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: ST_TO_ADDR
// if not x or not y then
19232: LD_VAR 0 2
19236: NOT
19237: PUSH
19238: LD_VAR 0 3
19242: NOT
19243: OR
19244: IFFALSE 19248
// exit ;
19246: GO 20900
// if not range then
19248: LD_VAR 0 4
19252: NOT
19253: IFFALSE 19263
// range := 10 ;
19255: LD_ADDR_VAR 0 4
19259: PUSH
19260: LD_INT 10
19262: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19263: LD_ADDR_VAR 0 8
19267: PUSH
19268: LD_INT 81
19270: PUSH
19271: LD_VAR 0 1
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 92
19282: PUSH
19283: LD_VAR 0 2
19287: PUSH
19288: LD_VAR 0 3
19292: PUSH
19293: LD_VAR 0 4
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: LD_INT 21
19309: PUSH
19310: LD_INT 3
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: LIST
19325: PPUSH
19326: CALL_OW 69
19330: ST_TO_ADDR
// if not tmp then
19331: LD_VAR 0 8
19335: NOT
19336: IFFALSE 19340
// exit ;
19338: GO 20900
// for i in tmp do
19340: LD_ADDR_VAR 0 6
19344: PUSH
19345: LD_VAR 0 8
19349: PUSH
19350: FOR_IN
19351: IFFALSE 20875
// begin points := [ 0 , 0 , 0 ] ;
19353: LD_ADDR_VAR 0 9
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: ST_TO_ADDR
// bpoints := 1 ;
19372: LD_ADDR_VAR 0 10
19376: PUSH
19377: LD_INT 1
19379: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19380: LD_VAR 0 6
19384: PPUSH
19385: CALL_OW 247
19389: PUSH
19390: LD_INT 1
19392: DOUBLE
19393: EQUAL
19394: IFTRUE 19398
19396: GO 19976
19398: POP
// begin if GetClass ( i ) = 1 then
19399: LD_VAR 0 6
19403: PPUSH
19404: CALL_OW 257
19408: PUSH
19409: LD_INT 1
19411: EQUAL
19412: IFFALSE 19433
// points := [ 10 , 5 , 3 ] ;
19414: LD_ADDR_VAR 0 9
19418: PUSH
19419: LD_INT 10
19421: PUSH
19422: LD_INT 5
19424: PUSH
19425: LD_INT 3
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19433: LD_VAR 0 6
19437: PPUSH
19438: CALL_OW 257
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 3
19448: PUSH
19449: LD_INT 4
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: IN
19457: IFFALSE 19478
// points := [ 3 , 2 , 1 ] ;
19459: LD_ADDR_VAR 0 9
19463: PUSH
19464: LD_INT 3
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19478: LD_VAR 0 6
19482: PPUSH
19483: CALL_OW 257
19487: PUSH
19488: LD_INT 5
19490: EQUAL
19491: IFFALSE 19512
// points := [ 130 , 5 , 2 ] ;
19493: LD_ADDR_VAR 0 9
19497: PUSH
19498: LD_INT 130
19500: PUSH
19501: LD_INT 5
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19512: LD_VAR 0 6
19516: PPUSH
19517: CALL_OW 257
19521: PUSH
19522: LD_INT 8
19524: EQUAL
19525: IFFALSE 19546
// points := [ 35 , 35 , 30 ] ;
19527: LD_ADDR_VAR 0 9
19531: PUSH
19532: LD_INT 35
19534: PUSH
19535: LD_INT 35
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19546: LD_VAR 0 6
19550: PPUSH
19551: CALL_OW 257
19555: PUSH
19556: LD_INT 9
19558: EQUAL
19559: IFFALSE 19580
// points := [ 20 , 55 , 40 ] ;
19561: LD_ADDR_VAR 0 9
19565: PUSH
19566: LD_INT 20
19568: PUSH
19569: LD_INT 55
19571: PUSH
19572: LD_INT 40
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19580: LD_VAR 0 6
19584: PPUSH
19585: CALL_OW 257
19589: PUSH
19590: LD_INT 12
19592: PUSH
19593: LD_INT 16
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: IN
19600: IFFALSE 19621
// points := [ 5 , 3 , 2 ] ;
19602: LD_ADDR_VAR 0 9
19606: PUSH
19607: LD_INT 5
19609: PUSH
19610: LD_INT 3
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19621: LD_VAR 0 6
19625: PPUSH
19626: CALL_OW 257
19630: PUSH
19631: LD_INT 17
19633: EQUAL
19634: IFFALSE 19655
// points := [ 100 , 50 , 75 ] ;
19636: LD_ADDR_VAR 0 9
19640: PUSH
19641: LD_INT 100
19643: PUSH
19644: LD_INT 50
19646: PUSH
19647: LD_INT 75
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19655: LD_VAR 0 6
19659: PPUSH
19660: CALL_OW 257
19664: PUSH
19665: LD_INT 15
19667: EQUAL
19668: IFFALSE 19689
// points := [ 10 , 5 , 3 ] ;
19670: LD_ADDR_VAR 0 9
19674: PUSH
19675: LD_INT 10
19677: PUSH
19678: LD_INT 5
19680: PUSH
19681: LD_INT 3
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19689: LD_VAR 0 6
19693: PPUSH
19694: CALL_OW 257
19698: PUSH
19699: LD_INT 14
19701: EQUAL
19702: IFFALSE 19723
// points := [ 10 , 0 , 0 ] ;
19704: LD_ADDR_VAR 0 9
19708: PUSH
19709: LD_INT 10
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19723: LD_VAR 0 6
19727: PPUSH
19728: CALL_OW 257
19732: PUSH
19733: LD_INT 11
19735: EQUAL
19736: IFFALSE 19757
// points := [ 30 , 10 , 5 ] ;
19738: LD_ADDR_VAR 0 9
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: LD_INT 10
19748: PUSH
19749: LD_INT 5
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19757: LD_VAR 0 1
19761: PPUSH
19762: LD_INT 5
19764: PPUSH
19765: CALL_OW 321
19769: PUSH
19770: LD_INT 2
19772: EQUAL
19773: IFFALSE 19790
// bpoints := bpoints * 1.8 ;
19775: LD_ADDR_VAR 0 10
19779: PUSH
19780: LD_VAR 0 10
19784: PUSH
19785: LD_REAL  1.80000000000000E+0000
19788: MUL
19789: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19790: LD_VAR 0 6
19794: PPUSH
19795: CALL_OW 257
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: LD_INT 3
19808: PUSH
19809: LD_INT 4
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: IN
19818: PUSH
19819: LD_VAR 0 1
19823: PPUSH
19824: LD_INT 51
19826: PPUSH
19827: CALL_OW 321
19831: PUSH
19832: LD_INT 2
19834: EQUAL
19835: AND
19836: IFFALSE 19853
// bpoints := bpoints * 1.2 ;
19838: LD_ADDR_VAR 0 10
19842: PUSH
19843: LD_VAR 0 10
19847: PUSH
19848: LD_REAL  1.20000000000000E+0000
19851: MUL
19852: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19853: LD_VAR 0 6
19857: PPUSH
19858: CALL_OW 257
19862: PUSH
19863: LD_INT 5
19865: PUSH
19866: LD_INT 7
19868: PUSH
19869: LD_INT 9
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: IN
19877: PUSH
19878: LD_VAR 0 1
19882: PPUSH
19883: LD_INT 52
19885: PPUSH
19886: CALL_OW 321
19890: PUSH
19891: LD_INT 2
19893: EQUAL
19894: AND
19895: IFFALSE 19912
// bpoints := bpoints * 1.5 ;
19897: LD_ADDR_VAR 0 10
19901: PUSH
19902: LD_VAR 0 10
19906: PUSH
19907: LD_REAL  1.50000000000000E+0000
19910: MUL
19911: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19912: LD_VAR 0 1
19916: PPUSH
19917: LD_INT 66
19919: PPUSH
19920: CALL_OW 321
19924: PUSH
19925: LD_INT 2
19927: EQUAL
19928: IFFALSE 19945
// bpoints := bpoints * 1.1 ;
19930: LD_ADDR_VAR 0 10
19934: PUSH
19935: LD_VAR 0 10
19939: PUSH
19940: LD_REAL  1.10000000000000E+0000
19943: MUL
19944: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19945: LD_ADDR_VAR 0 10
19949: PUSH
19950: LD_VAR 0 10
19954: PUSH
19955: LD_VAR 0 6
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 259
19967: PUSH
19968: LD_REAL  1.15000000000000E+0000
19971: MUL
19972: MUL
19973: ST_TO_ADDR
// end ; unit_vehicle :
19974: GO 20804
19976: LD_INT 2
19978: DOUBLE
19979: EQUAL
19980: IFTRUE 19984
19982: GO 20792
19984: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19985: LD_VAR 0 6
19989: PPUSH
19990: CALL_OW 264
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: LD_INT 42
20000: PUSH
20001: LD_INT 24
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: IN
20009: IFFALSE 20030
// points := [ 25 , 5 , 3 ] ;
20011: LD_ADDR_VAR 0 9
20015: PUSH
20016: LD_INT 25
20018: PUSH
20019: LD_INT 5
20021: PUSH
20022: LD_INT 3
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20030: LD_VAR 0 6
20034: PPUSH
20035: CALL_OW 264
20039: PUSH
20040: LD_INT 4
20042: PUSH
20043: LD_INT 43
20045: PUSH
20046: LD_INT 25
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: IN
20054: IFFALSE 20075
// points := [ 40 , 15 , 5 ] ;
20056: LD_ADDR_VAR 0 9
20060: PUSH
20061: LD_INT 40
20063: PUSH
20064: LD_INT 15
20066: PUSH
20067: LD_INT 5
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: LIST
20074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20075: LD_VAR 0 6
20079: PPUSH
20080: CALL_OW 264
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: LD_INT 23
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: IN
20095: IFFALSE 20116
// points := [ 7 , 25 , 8 ] ;
20097: LD_ADDR_VAR 0 9
20101: PUSH
20102: LD_INT 7
20104: PUSH
20105: LD_INT 25
20107: PUSH
20108: LD_INT 8
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20116: LD_VAR 0 6
20120: PPUSH
20121: CALL_OW 264
20125: PUSH
20126: LD_INT 5
20128: PUSH
20129: LD_INT 27
20131: PUSH
20132: LD_INT 44
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: IN
20140: IFFALSE 20161
// points := [ 14 , 50 , 16 ] ;
20142: LD_ADDR_VAR 0 9
20146: PUSH
20147: LD_INT 14
20149: PUSH
20150: LD_INT 50
20152: PUSH
20153: LD_INT 16
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20161: LD_VAR 0 6
20165: PPUSH
20166: CALL_OW 264
20170: PUSH
20171: LD_INT 6
20173: PUSH
20174: LD_INT 46
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: IN
20181: IFFALSE 20202
// points := [ 32 , 120 , 70 ] ;
20183: LD_ADDR_VAR 0 9
20187: PUSH
20188: LD_INT 32
20190: PUSH
20191: LD_INT 120
20193: PUSH
20194: LD_INT 70
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20202: LD_VAR 0 6
20206: PPUSH
20207: CALL_OW 264
20211: PUSH
20212: LD_INT 7
20214: PUSH
20215: LD_INT 28
20217: PUSH
20218: LD_INT 45
20220: PUSH
20221: LD_EXP 101
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: IN
20232: IFFALSE 20253
// points := [ 35 , 20 , 45 ] ;
20234: LD_ADDR_VAR 0 9
20238: PUSH
20239: LD_INT 35
20241: PUSH
20242: LD_INT 20
20244: PUSH
20245: LD_INT 45
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20253: LD_VAR 0 6
20257: PPUSH
20258: CALL_OW 264
20262: PUSH
20263: LD_INT 47
20265: PUSH
20266: EMPTY
20267: LIST
20268: IN
20269: IFFALSE 20290
// points := [ 67 , 45 , 75 ] ;
20271: LD_ADDR_VAR 0 9
20275: PUSH
20276: LD_INT 67
20278: PUSH
20279: LD_INT 45
20281: PUSH
20282: LD_INT 75
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20290: LD_VAR 0 6
20294: PPUSH
20295: CALL_OW 264
20299: PUSH
20300: LD_INT 26
20302: PUSH
20303: EMPTY
20304: LIST
20305: IN
20306: IFFALSE 20327
// points := [ 120 , 30 , 80 ] ;
20308: LD_ADDR_VAR 0 9
20312: PUSH
20313: LD_INT 120
20315: PUSH
20316: LD_INT 30
20318: PUSH
20319: LD_INT 80
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20327: LD_VAR 0 6
20331: PPUSH
20332: CALL_OW 264
20336: PUSH
20337: LD_INT 22
20339: PUSH
20340: EMPTY
20341: LIST
20342: IN
20343: IFFALSE 20364
// points := [ 40 , 1 , 1 ] ;
20345: LD_ADDR_VAR 0 9
20349: PUSH
20350: LD_INT 40
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20364: LD_VAR 0 6
20368: PPUSH
20369: CALL_OW 264
20373: PUSH
20374: LD_INT 29
20376: PUSH
20377: EMPTY
20378: LIST
20379: IN
20380: IFFALSE 20401
// points := [ 70 , 200 , 400 ] ;
20382: LD_ADDR_VAR 0 9
20386: PUSH
20387: LD_INT 70
20389: PUSH
20390: LD_INT 200
20392: PUSH
20393: LD_INT 400
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20401: LD_VAR 0 6
20405: PPUSH
20406: CALL_OW 264
20410: PUSH
20411: LD_INT 14
20413: PUSH
20414: LD_INT 53
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: IN
20421: IFFALSE 20442
// points := [ 40 , 10 , 20 ] ;
20423: LD_ADDR_VAR 0 9
20427: PUSH
20428: LD_INT 40
20430: PUSH
20431: LD_INT 10
20433: PUSH
20434: LD_INT 20
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20442: LD_VAR 0 6
20446: PPUSH
20447: CALL_OW 264
20451: PUSH
20452: LD_INT 9
20454: PUSH
20455: EMPTY
20456: LIST
20457: IN
20458: IFFALSE 20479
// points := [ 5 , 70 , 20 ] ;
20460: LD_ADDR_VAR 0 9
20464: PUSH
20465: LD_INT 5
20467: PUSH
20468: LD_INT 70
20470: PUSH
20471: LD_INT 20
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20479: LD_VAR 0 6
20483: PPUSH
20484: CALL_OW 264
20488: PUSH
20489: LD_INT 10
20491: PUSH
20492: EMPTY
20493: LIST
20494: IN
20495: IFFALSE 20516
// points := [ 35 , 110 , 70 ] ;
20497: LD_ADDR_VAR 0 9
20501: PUSH
20502: LD_INT 35
20504: PUSH
20505: LD_INT 110
20507: PUSH
20508: LD_INT 70
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20516: LD_VAR 0 6
20520: PPUSH
20521: CALL_OW 265
20525: PUSH
20526: LD_INT 25
20528: EQUAL
20529: IFFALSE 20550
// points := [ 80 , 65 , 100 ] ;
20531: LD_ADDR_VAR 0 9
20535: PUSH
20536: LD_INT 80
20538: PUSH
20539: LD_INT 65
20541: PUSH
20542: LD_INT 100
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20550: LD_VAR 0 6
20554: PPUSH
20555: CALL_OW 263
20559: PUSH
20560: LD_INT 1
20562: EQUAL
20563: IFFALSE 20598
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20565: LD_ADDR_VAR 0 10
20569: PUSH
20570: LD_VAR 0 10
20574: PUSH
20575: LD_VAR 0 6
20579: PPUSH
20580: CALL_OW 311
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: CALL_OW 259
20592: PUSH
20593: LD_INT 4
20595: MUL
20596: MUL
20597: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20598: LD_VAR 0 6
20602: PPUSH
20603: CALL_OW 263
20607: PUSH
20608: LD_INT 2
20610: EQUAL
20611: IFFALSE 20662
// begin j := IsControledBy ( i ) ;
20613: LD_ADDR_VAR 0 7
20617: PUSH
20618: LD_VAR 0 6
20622: PPUSH
20623: CALL_OW 312
20627: ST_TO_ADDR
// if j then
20628: LD_VAR 0 7
20632: IFFALSE 20662
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20634: LD_ADDR_VAR 0 10
20638: PUSH
20639: LD_VAR 0 10
20643: PUSH
20644: LD_VAR 0 7
20648: PPUSH
20649: LD_INT 3
20651: PPUSH
20652: CALL_OW 259
20656: PUSH
20657: LD_INT 3
20659: MUL
20660: MUL
20661: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20662: LD_VAR 0 6
20666: PPUSH
20667: CALL_OW 264
20671: PUSH
20672: LD_INT 5
20674: PUSH
20675: LD_INT 6
20677: PUSH
20678: LD_INT 46
20680: PUSH
20681: LD_INT 44
20683: PUSH
20684: LD_INT 47
20686: PUSH
20687: LD_INT 45
20689: PUSH
20690: LD_INT 28
20692: PUSH
20693: LD_INT 7
20695: PUSH
20696: LD_INT 27
20698: PUSH
20699: LD_INT 29
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: IN
20714: PUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: LD_INT 52
20722: PPUSH
20723: CALL_OW 321
20727: PUSH
20728: LD_INT 2
20730: EQUAL
20731: AND
20732: IFFALSE 20749
// bpoints := bpoints * 1.2 ;
20734: LD_ADDR_VAR 0 10
20738: PUSH
20739: LD_VAR 0 10
20743: PUSH
20744: LD_REAL  1.20000000000000E+0000
20747: MUL
20748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20749: LD_VAR 0 6
20753: PPUSH
20754: CALL_OW 264
20758: PUSH
20759: LD_INT 6
20761: PUSH
20762: LD_INT 46
20764: PUSH
20765: LD_INT 47
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: IN
20773: IFFALSE 20790
// bpoints := bpoints * 1.2 ;
20775: LD_ADDR_VAR 0 10
20779: PUSH
20780: LD_VAR 0 10
20784: PUSH
20785: LD_REAL  1.20000000000000E+0000
20788: MUL
20789: ST_TO_ADDR
// end ; unit_building :
20790: GO 20804
20792: LD_INT 3
20794: DOUBLE
20795: EQUAL
20796: IFTRUE 20800
20798: GO 20803
20800: POP
// ; end ;
20801: GO 20804
20803: POP
// for j = 1 to 3 do
20804: LD_ADDR_VAR 0 7
20808: PUSH
20809: DOUBLE
20810: LD_INT 1
20812: DEC
20813: ST_TO_ADDR
20814: LD_INT 3
20816: PUSH
20817: FOR_TO
20818: IFFALSE 20871
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20820: LD_ADDR_VAR 0 5
20824: PUSH
20825: LD_VAR 0 5
20829: PPUSH
20830: LD_VAR 0 7
20834: PPUSH
20835: LD_VAR 0 5
20839: PUSH
20840: LD_VAR 0 7
20844: ARRAY
20845: PUSH
20846: LD_VAR 0 9
20850: PUSH
20851: LD_VAR 0 7
20855: ARRAY
20856: PUSH
20857: LD_VAR 0 10
20861: MUL
20862: PLUS
20863: PPUSH
20864: CALL_OW 1
20868: ST_TO_ADDR
20869: GO 20817
20871: POP
20872: POP
// end ;
20873: GO 19350
20875: POP
20876: POP
// result := Replace ( result , 4 , tmp ) ;
20877: LD_ADDR_VAR 0 5
20881: PUSH
20882: LD_VAR 0 5
20886: PPUSH
20887: LD_INT 4
20889: PPUSH
20890: LD_VAR 0 8
20894: PPUSH
20895: CALL_OW 1
20899: ST_TO_ADDR
// end ;
20900: LD_VAR 0 5
20904: RET
// export function DangerAtRange ( unit , range ) ; begin
20905: LD_INT 0
20907: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20908: LD_ADDR_VAR 0 3
20912: PUSH
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL_OW 255
20922: PPUSH
20923: LD_VAR 0 1
20927: PPUSH
20928: CALL_OW 250
20932: PPUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 251
20942: PPUSH
20943: LD_VAR 0 2
20947: PPUSH
20948: CALL 19202 0 4
20952: ST_TO_ADDR
// end ;
20953: LD_VAR 0 3
20957: RET
// export function DangerInArea ( side , area ) ; begin
20958: LD_INT 0
20960: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_VAR 0 2
20970: PPUSH
20971: LD_INT 81
20973: PUSH
20974: LD_VAR 0 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 70
20987: ST_TO_ADDR
// end ;
20988: LD_VAR 0 3
20992: RET
// export function IsExtension ( b ) ; begin
20993: LD_INT 0
20995: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20996: LD_ADDR_VAR 0 2
21000: PUSH
21001: LD_VAR 0 1
21005: PUSH
21006: LD_INT 23
21008: PUSH
21009: LD_INT 20
21011: PUSH
21012: LD_INT 22
21014: PUSH
21015: LD_INT 17
21017: PUSH
21018: LD_INT 24
21020: PUSH
21021: LD_INT 21
21023: PUSH
21024: LD_INT 19
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 18
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: IN
21048: ST_TO_ADDR
// end ;
21049: LD_VAR 0 2
21053: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21054: LD_INT 0
21056: PPUSH
21057: PPUSH
21058: PPUSH
// result := [ ] ;
21059: LD_ADDR_VAR 0 4
21063: PUSH
21064: EMPTY
21065: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21066: LD_ADDR_VAR 0 5
21070: PUSH
21071: LD_VAR 0 2
21075: PPUSH
21076: LD_INT 21
21078: PUSH
21079: LD_INT 3
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PPUSH
21086: CALL_OW 70
21090: ST_TO_ADDR
// if not tmp then
21091: LD_VAR 0 5
21095: NOT
21096: IFFALSE 21100
// exit ;
21098: GO 21164
// if checkLink then
21100: LD_VAR 0 3
21104: IFFALSE 21154
// begin for i in tmp do
21106: LD_ADDR_VAR 0 6
21110: PUSH
21111: LD_VAR 0 5
21115: PUSH
21116: FOR_IN
21117: IFFALSE 21152
// if GetBase ( i ) <> base then
21119: LD_VAR 0 6
21123: PPUSH
21124: CALL_OW 274
21128: PUSH
21129: LD_VAR 0 1
21133: NONEQUAL
21134: IFFALSE 21150
// ComLinkToBase ( base , i ) ;
21136: LD_VAR 0 1
21140: PPUSH
21141: LD_VAR 0 6
21145: PPUSH
21146: CALL_OW 169
21150: GO 21116
21152: POP
21153: POP
// end ; result := tmp ;
21154: LD_ADDR_VAR 0 4
21158: PUSH
21159: LD_VAR 0 5
21163: ST_TO_ADDR
// end ;
21164: LD_VAR 0 4
21168: RET
// export function ComComplete ( units , b ) ; var i ; begin
21169: LD_INT 0
21171: PPUSH
21172: PPUSH
// if not units then
21173: LD_VAR 0 1
21177: NOT
21178: IFFALSE 21182
// exit ;
21180: GO 21272
// for i in units do
21182: LD_ADDR_VAR 0 4
21186: PUSH
21187: LD_VAR 0 1
21191: PUSH
21192: FOR_IN
21193: IFFALSE 21270
// if BuildingStatus ( b ) = bs_build then
21195: LD_VAR 0 2
21199: PPUSH
21200: CALL_OW 461
21204: PUSH
21205: LD_INT 1
21207: EQUAL
21208: IFFALSE 21268
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21210: LD_VAR 0 4
21214: PPUSH
21215: LD_STRING h
21217: PUSH
21218: LD_VAR 0 2
21222: PPUSH
21223: CALL_OW 250
21227: PUSH
21228: LD_VAR 0 2
21232: PPUSH
21233: CALL_OW 251
21237: PUSH
21238: LD_VAR 0 2
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: PPUSH
21264: CALL_OW 446
21268: GO 21192
21270: POP
21271: POP
// end ;
21272: LD_VAR 0 3
21276: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21277: LD_INT 0
21279: PPUSH
21280: PPUSH
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21285: LD_VAR 0 1
21289: NOT
21290: PUSH
21291: LD_VAR 0 1
21295: PPUSH
21296: CALL_OW 263
21300: PUSH
21301: LD_INT 2
21303: NONEQUAL
21304: OR
21305: IFFALSE 21309
// exit ;
21307: GO 21625
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21309: LD_ADDR_VAR 0 6
21313: PUSH
21314: LD_INT 22
21316: PUSH
21317: LD_VAR 0 1
21321: PPUSH
21322: CALL_OW 255
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 30
21336: PUSH
21337: LD_INT 36
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 34
21346: PUSH
21347: LD_INT 31
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PPUSH
21363: CALL_OW 69
21367: ST_TO_ADDR
// if not tmp then
21368: LD_VAR 0 6
21372: NOT
21373: IFFALSE 21377
// exit ;
21375: GO 21625
// result := [ ] ;
21377: LD_ADDR_VAR 0 2
21381: PUSH
21382: EMPTY
21383: ST_TO_ADDR
// for i in tmp do
21384: LD_ADDR_VAR 0 3
21388: PUSH
21389: LD_VAR 0 6
21393: PUSH
21394: FOR_IN
21395: IFFALSE 21466
// begin t := UnitsInside ( i ) ;
21397: LD_ADDR_VAR 0 4
21401: PUSH
21402: LD_VAR 0 3
21406: PPUSH
21407: CALL_OW 313
21411: ST_TO_ADDR
// if t then
21412: LD_VAR 0 4
21416: IFFALSE 21464
// for j in t do
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_VAR 0 4
21427: PUSH
21428: FOR_IN
21429: IFFALSE 21462
// result := Replace ( result , result + 1 , j ) ;
21431: LD_ADDR_VAR 0 2
21435: PUSH
21436: LD_VAR 0 2
21440: PPUSH
21441: LD_VAR 0 2
21445: PUSH
21446: LD_INT 1
21448: PLUS
21449: PPUSH
21450: LD_VAR 0 7
21454: PPUSH
21455: CALL_OW 1
21459: ST_TO_ADDR
21460: GO 21428
21462: POP
21463: POP
// end ;
21464: GO 21394
21466: POP
21467: POP
// if not result then
21468: LD_VAR 0 2
21472: NOT
21473: IFFALSE 21477
// exit ;
21475: GO 21625
// mech := result [ 1 ] ;
21477: LD_ADDR_VAR 0 5
21481: PUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_INT 1
21489: ARRAY
21490: ST_TO_ADDR
// if result > 1 then
21491: LD_VAR 0 2
21495: PUSH
21496: LD_INT 1
21498: GREATER
21499: IFFALSE 21611
// begin for i = 2 to result do
21501: LD_ADDR_VAR 0 3
21505: PUSH
21506: DOUBLE
21507: LD_INT 2
21509: DEC
21510: ST_TO_ADDR
21511: LD_VAR 0 2
21515: PUSH
21516: FOR_TO
21517: IFFALSE 21609
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21519: LD_ADDR_VAR 0 4
21523: PUSH
21524: LD_VAR 0 2
21528: PUSH
21529: LD_VAR 0 3
21533: ARRAY
21534: PPUSH
21535: LD_INT 3
21537: PPUSH
21538: CALL_OW 259
21542: PUSH
21543: LD_VAR 0 2
21547: PUSH
21548: LD_VAR 0 3
21552: ARRAY
21553: PPUSH
21554: CALL_OW 432
21558: MINUS
21559: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21560: LD_VAR 0 4
21564: PUSH
21565: LD_VAR 0 5
21569: PPUSH
21570: LD_INT 3
21572: PPUSH
21573: CALL_OW 259
21577: PUSH
21578: LD_VAR 0 5
21582: PPUSH
21583: CALL_OW 432
21587: MINUS
21588: GREATEREQUAL
21589: IFFALSE 21607
// mech := result [ i ] ;
21591: LD_ADDR_VAR 0 5
21595: PUSH
21596: LD_VAR 0 2
21600: PUSH
21601: LD_VAR 0 3
21605: ARRAY
21606: ST_TO_ADDR
// end ;
21607: GO 21516
21609: POP
21610: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21611: LD_VAR 0 1
21615: PPUSH
21616: LD_VAR 0 5
21620: PPUSH
21621: CALL_OW 135
// end ;
21625: LD_VAR 0 2
21629: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
// result := [ ] ;
21645: LD_ADDR_VAR 0 7
21649: PUSH
21650: EMPTY
21651: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 266
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: IN
21672: NOT
21673: IFFALSE 21677
// exit ;
21675: GO 23311
// if name then
21677: LD_VAR 0 3
21681: IFFALSE 21697
// SetBName ( base_dep , name ) ;
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_VAR 0 3
21692: PPUSH
21693: CALL_OW 500
// base := GetBase ( base_dep ) ;
21697: LD_ADDR_VAR 0 15
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL_OW 274
21711: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21712: LD_ADDR_VAR 0 16
21716: PUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 255
21726: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21727: LD_ADDR_VAR 0 17
21731: PUSH
21732: LD_VAR 0 1
21736: PPUSH
21737: CALL_OW 248
21741: ST_TO_ADDR
// if sources then
21742: LD_VAR 0 5
21746: IFFALSE 21793
// for i = 1 to 3 do
21748: LD_ADDR_VAR 0 8
21752: PUSH
21753: DOUBLE
21754: LD_INT 1
21756: DEC
21757: ST_TO_ADDR
21758: LD_INT 3
21760: PUSH
21761: FOR_TO
21762: IFFALSE 21791
// AddResourceType ( base , i , sources [ i ] ) ;
21764: LD_VAR 0 15
21768: PPUSH
21769: LD_VAR 0 8
21773: PPUSH
21774: LD_VAR 0 5
21778: PUSH
21779: LD_VAR 0 8
21783: ARRAY
21784: PPUSH
21785: CALL_OW 276
21789: GO 21761
21791: POP
21792: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21793: LD_ADDR_VAR 0 18
21797: PUSH
21798: LD_VAR 0 15
21802: PPUSH
21803: LD_VAR 0 2
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: CALL 21054 0 3
21815: ST_TO_ADDR
// InitHc ;
21816: CALL_OW 19
// InitUc ;
21820: CALL_OW 18
// uc_side := side ;
21824: LD_ADDR_OWVAR 20
21828: PUSH
21829: LD_VAR 0 16
21833: ST_TO_ADDR
// uc_nation := nation ;
21834: LD_ADDR_OWVAR 21
21838: PUSH
21839: LD_VAR 0 17
21843: ST_TO_ADDR
// if buildings then
21844: LD_VAR 0 18
21848: IFFALSE 23170
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21850: LD_ADDR_VAR 0 19
21854: PUSH
21855: LD_VAR 0 18
21859: PPUSH
21860: LD_INT 2
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 29
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 30
21875: PUSH
21876: LD_INT 30
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 72
21892: ST_TO_ADDR
// if tmp then
21893: LD_VAR 0 19
21897: IFFALSE 21945
// for i in tmp do
21899: LD_ADDR_VAR 0 8
21903: PUSH
21904: LD_VAR 0 19
21908: PUSH
21909: FOR_IN
21910: IFFALSE 21943
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21912: LD_VAR 0 8
21916: PPUSH
21917: CALL_OW 250
21921: PPUSH
21922: LD_VAR 0 8
21926: PPUSH
21927: CALL_OW 251
21931: PPUSH
21932: LD_VAR 0 16
21936: PPUSH
21937: CALL_OW 441
21941: GO 21909
21943: POP
21944: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21945: LD_VAR 0 18
21949: PPUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 30
21955: PUSH
21956: LD_INT 32
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 30
21965: PUSH
21966: LD_INT 33
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: PPUSH
21978: CALL_OW 72
21982: IFFALSE 22070
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21984: LD_ADDR_VAR 0 8
21988: PUSH
21989: LD_VAR 0 18
21993: PPUSH
21994: LD_INT 2
21996: PUSH
21997: LD_INT 30
21999: PUSH
22000: LD_INT 32
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 30
22009: PUSH
22010: LD_INT 33
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: PPUSH
22022: CALL_OW 72
22026: PUSH
22027: FOR_IN
22028: IFFALSE 22068
// begin if not GetBWeapon ( i ) then
22030: LD_VAR 0 8
22034: PPUSH
22035: CALL_OW 269
22039: NOT
22040: IFFALSE 22066
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22042: LD_VAR 0 8
22046: PPUSH
22047: LD_VAR 0 8
22051: PPUSH
22052: LD_VAR 0 2
22056: PPUSH
22057: CALL 23316 0 2
22061: PPUSH
22062: CALL_OW 431
// end ;
22066: GO 22027
22068: POP
22069: POP
// end ; for i = 1 to personel do
22070: LD_ADDR_VAR 0 8
22074: PUSH
22075: DOUBLE
22076: LD_INT 1
22078: DEC
22079: ST_TO_ADDR
22080: LD_VAR 0 6
22084: PUSH
22085: FOR_TO
22086: IFFALSE 23150
// begin if i > 4 then
22088: LD_VAR 0 8
22092: PUSH
22093: LD_INT 4
22095: GREATER
22096: IFFALSE 22100
// break ;
22098: GO 23150
// case i of 1 :
22100: LD_VAR 0 8
22104: PUSH
22105: LD_INT 1
22107: DOUBLE
22108: EQUAL
22109: IFTRUE 22113
22111: GO 22193
22113: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22114: LD_ADDR_VAR 0 12
22118: PUSH
22119: LD_VAR 0 18
22123: PPUSH
22124: LD_INT 22
22126: PUSH
22127: LD_VAR 0 16
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 58
22138: PUSH
22139: EMPTY
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 32
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 30
22157: PUSH
22158: LD_INT 4
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: PPUSH
22186: CALL_OW 72
22190: ST_TO_ADDR
22191: GO 22415
22193: LD_INT 2
22195: DOUBLE
22196: EQUAL
22197: IFTRUE 22201
22199: GO 22263
22201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22202: LD_ADDR_VAR 0 12
22206: PUSH
22207: LD_VAR 0 18
22211: PPUSH
22212: LD_INT 22
22214: PUSH
22215: LD_VAR 0 16
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 30
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PPUSH
22256: CALL_OW 72
22260: ST_TO_ADDR
22261: GO 22415
22263: LD_INT 3
22265: DOUBLE
22266: EQUAL
22267: IFTRUE 22271
22269: GO 22333
22271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22272: LD_ADDR_VAR 0 12
22276: PUSH
22277: LD_VAR 0 18
22281: PPUSH
22282: LD_INT 22
22284: PUSH
22285: LD_VAR 0 16
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: LD_INT 30
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 30
22309: PUSH
22310: LD_INT 3
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 72
22330: ST_TO_ADDR
22331: GO 22415
22333: LD_INT 4
22335: DOUBLE
22336: EQUAL
22337: IFTRUE 22341
22339: GO 22414
22341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22342: LD_ADDR_VAR 0 12
22346: PUSH
22347: LD_VAR 0 18
22351: PPUSH
22352: LD_INT 22
22354: PUSH
22355: LD_VAR 0 16
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: LD_INT 30
22369: PUSH
22370: LD_INT 6
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 30
22379: PUSH
22380: LD_INT 7
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 30
22389: PUSH
22390: LD_INT 8
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PPUSH
22407: CALL_OW 72
22411: ST_TO_ADDR
22412: GO 22415
22414: POP
// if i = 1 then
22415: LD_VAR 0 8
22419: PUSH
22420: LD_INT 1
22422: EQUAL
22423: IFFALSE 22534
// begin tmp := [ ] ;
22425: LD_ADDR_VAR 0 19
22429: PUSH
22430: EMPTY
22431: ST_TO_ADDR
// for j in f do
22432: LD_ADDR_VAR 0 9
22436: PUSH
22437: LD_VAR 0 12
22441: PUSH
22442: FOR_IN
22443: IFFALSE 22516
// if GetBType ( j ) = b_bunker then
22445: LD_VAR 0 9
22449: PPUSH
22450: CALL_OW 266
22454: PUSH
22455: LD_INT 32
22457: EQUAL
22458: IFFALSE 22485
// tmp := Insert ( tmp , 1 , j ) else
22460: LD_ADDR_VAR 0 19
22464: PUSH
22465: LD_VAR 0 19
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: LD_VAR 0 9
22477: PPUSH
22478: CALL_OW 2
22482: ST_TO_ADDR
22483: GO 22514
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22485: LD_ADDR_VAR 0 19
22489: PUSH
22490: LD_VAR 0 19
22494: PPUSH
22495: LD_VAR 0 19
22499: PUSH
22500: LD_INT 1
22502: PLUS
22503: PPUSH
22504: LD_VAR 0 9
22508: PPUSH
22509: CALL_OW 2
22513: ST_TO_ADDR
22514: GO 22442
22516: POP
22517: POP
// if tmp then
22518: LD_VAR 0 19
22522: IFFALSE 22534
// f := tmp ;
22524: LD_ADDR_VAR 0 12
22528: PUSH
22529: LD_VAR 0 19
22533: ST_TO_ADDR
// end ; x := personel [ i ] ;
22534: LD_ADDR_VAR 0 13
22538: PUSH
22539: LD_VAR 0 6
22543: PUSH
22544: LD_VAR 0 8
22548: ARRAY
22549: ST_TO_ADDR
// if x = - 1 then
22550: LD_VAR 0 13
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: EQUAL
22559: IFFALSE 22768
// begin for j in f do
22561: LD_ADDR_VAR 0 9
22565: PUSH
22566: LD_VAR 0 12
22570: PUSH
22571: FOR_IN
22572: IFFALSE 22764
// repeat InitHc ;
22574: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22578: LD_VAR 0 9
22582: PPUSH
22583: CALL_OW 266
22587: PUSH
22588: LD_INT 5
22590: EQUAL
22591: IFFALSE 22661
// begin if UnitsInside ( j ) < 3 then
22593: LD_VAR 0 9
22597: PPUSH
22598: CALL_OW 313
22602: PUSH
22603: LD_INT 3
22605: LESS
22606: IFFALSE 22642
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22608: LD_INT 0
22610: PPUSH
22611: LD_INT 5
22613: PUSH
22614: LD_INT 8
22616: PUSH
22617: LD_INT 9
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: LD_VAR 0 17
22629: ARRAY
22630: PPUSH
22631: LD_VAR 0 4
22635: PPUSH
22636: CALL_OW 380
22640: GO 22659
// PrepareHuman ( false , i , skill ) ;
22642: LD_INT 0
22644: PPUSH
22645: LD_VAR 0 8
22649: PPUSH
22650: LD_VAR 0 4
22654: PPUSH
22655: CALL_OW 380
// end else
22659: GO 22678
// PrepareHuman ( false , i , skill ) ;
22661: LD_INT 0
22663: PPUSH
22664: LD_VAR 0 8
22668: PPUSH
22669: LD_VAR 0 4
22673: PPUSH
22674: CALL_OW 380
// un := CreateHuman ;
22678: LD_ADDR_VAR 0 14
22682: PUSH
22683: CALL_OW 44
22687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22688: LD_ADDR_VAR 0 7
22692: PUSH
22693: LD_VAR 0 7
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: LD_VAR 0 14
22705: PPUSH
22706: CALL_OW 2
22710: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22711: LD_VAR 0 14
22715: PPUSH
22716: LD_VAR 0 9
22720: PPUSH
22721: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22725: LD_VAR 0 9
22729: PPUSH
22730: CALL_OW 313
22734: PUSH
22735: LD_INT 6
22737: EQUAL
22738: PUSH
22739: LD_VAR 0 9
22743: PPUSH
22744: CALL_OW 266
22748: PUSH
22749: LD_INT 32
22751: PUSH
22752: LD_INT 31
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: IN
22759: OR
22760: IFFALSE 22574
22762: GO 22571
22764: POP
22765: POP
// end else
22766: GO 23148
// for j = 1 to x do
22768: LD_ADDR_VAR 0 9
22772: PUSH
22773: DOUBLE
22774: LD_INT 1
22776: DEC
22777: ST_TO_ADDR
22778: LD_VAR 0 13
22782: PUSH
22783: FOR_TO
22784: IFFALSE 23146
// begin InitHc ;
22786: CALL_OW 19
// if not f then
22790: LD_VAR 0 12
22794: NOT
22795: IFFALSE 22884
// begin PrepareHuman ( false , i , skill ) ;
22797: LD_INT 0
22799: PPUSH
22800: LD_VAR 0 8
22804: PPUSH
22805: LD_VAR 0 4
22809: PPUSH
22810: CALL_OW 380
// un := CreateHuman ;
22814: LD_ADDR_VAR 0 14
22818: PUSH
22819: CALL_OW 44
22823: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22824: LD_ADDR_VAR 0 7
22828: PUSH
22829: LD_VAR 0 7
22833: PPUSH
22834: LD_INT 1
22836: PPUSH
22837: LD_VAR 0 14
22841: PPUSH
22842: CALL_OW 2
22846: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22847: LD_VAR 0 14
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 250
22861: PPUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL_OW 251
22871: PPUSH
22872: LD_INT 10
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 50
// continue ;
22882: GO 22783
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22884: LD_VAR 0 12
22888: PUSH
22889: LD_INT 1
22891: ARRAY
22892: PPUSH
22893: CALL_OW 313
22897: PUSH
22898: LD_VAR 0 12
22902: PUSH
22903: LD_INT 1
22905: ARRAY
22906: PPUSH
22907: CALL_OW 266
22911: PUSH
22912: LD_INT 32
22914: PUSH
22915: LD_INT 31
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: IN
22922: AND
22923: PUSH
22924: LD_VAR 0 12
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: CALL_OW 313
22937: PUSH
22938: LD_INT 6
22940: EQUAL
22941: OR
22942: IFFALSE 22962
// f := Delete ( f , 1 ) ;
22944: LD_ADDR_VAR 0 12
22948: PUSH
22949: LD_VAR 0 12
22953: PPUSH
22954: LD_INT 1
22956: PPUSH
22957: CALL_OW 3
22961: ST_TO_ADDR
// if not f then
22962: LD_VAR 0 12
22966: NOT
22967: IFFALSE 22985
// begin x := x + 2 ;
22969: LD_ADDR_VAR 0 13
22973: PUSH
22974: LD_VAR 0 13
22978: PUSH
22979: LD_INT 2
22981: PLUS
22982: ST_TO_ADDR
// continue ;
22983: GO 22783
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22985: LD_VAR 0 12
22989: PUSH
22990: LD_INT 1
22992: ARRAY
22993: PPUSH
22994: CALL_OW 266
22998: PUSH
22999: LD_INT 5
23001: EQUAL
23002: IFFALSE 23076
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23004: LD_VAR 0 12
23008: PUSH
23009: LD_INT 1
23011: ARRAY
23012: PPUSH
23013: CALL_OW 313
23017: PUSH
23018: LD_INT 3
23020: LESS
23021: IFFALSE 23057
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23023: LD_INT 0
23025: PPUSH
23026: LD_INT 5
23028: PUSH
23029: LD_INT 8
23031: PUSH
23032: LD_INT 9
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: PUSH
23040: LD_VAR 0 17
23044: ARRAY
23045: PPUSH
23046: LD_VAR 0 4
23050: PPUSH
23051: CALL_OW 380
23055: GO 23074
// PrepareHuman ( false , i , skill ) ;
23057: LD_INT 0
23059: PPUSH
23060: LD_VAR 0 8
23064: PPUSH
23065: LD_VAR 0 4
23069: PPUSH
23070: CALL_OW 380
// end else
23074: GO 23093
// PrepareHuman ( false , i , skill ) ;
23076: LD_INT 0
23078: PPUSH
23079: LD_VAR 0 8
23083: PPUSH
23084: LD_VAR 0 4
23088: PPUSH
23089: CALL_OW 380
// un := CreateHuman ;
23093: LD_ADDR_VAR 0 14
23097: PUSH
23098: CALL_OW 44
23102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23103: LD_ADDR_VAR 0 7
23107: PUSH
23108: LD_VAR 0 7
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: LD_VAR 0 14
23120: PPUSH
23121: CALL_OW 2
23125: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23126: LD_VAR 0 14
23130: PPUSH
23131: LD_VAR 0 12
23135: PUSH
23136: LD_INT 1
23138: ARRAY
23139: PPUSH
23140: CALL_OW 52
// end ;
23144: GO 22783
23146: POP
23147: POP
// end ;
23148: GO 22085
23150: POP
23151: POP
// result := result ^ buildings ;
23152: LD_ADDR_VAR 0 7
23156: PUSH
23157: LD_VAR 0 7
23161: PUSH
23162: LD_VAR 0 18
23166: ADD
23167: ST_TO_ADDR
// end else
23168: GO 23311
// begin for i = 1 to personel do
23170: LD_ADDR_VAR 0 8
23174: PUSH
23175: DOUBLE
23176: LD_INT 1
23178: DEC
23179: ST_TO_ADDR
23180: LD_VAR 0 6
23184: PUSH
23185: FOR_TO
23186: IFFALSE 23309
// begin if i > 4 then
23188: LD_VAR 0 8
23192: PUSH
23193: LD_INT 4
23195: GREATER
23196: IFFALSE 23200
// break ;
23198: GO 23309
// x := personel [ i ] ;
23200: LD_ADDR_VAR 0 13
23204: PUSH
23205: LD_VAR 0 6
23209: PUSH
23210: LD_VAR 0 8
23214: ARRAY
23215: ST_TO_ADDR
// if x = - 1 then
23216: LD_VAR 0 13
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: EQUAL
23225: IFFALSE 23229
// continue ;
23227: GO 23185
// PrepareHuman ( false , i , skill ) ;
23229: LD_INT 0
23231: PPUSH
23232: LD_VAR 0 8
23236: PPUSH
23237: LD_VAR 0 4
23241: PPUSH
23242: CALL_OW 380
// un := CreateHuman ;
23246: LD_ADDR_VAR 0 14
23250: PUSH
23251: CALL_OW 44
23255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23256: LD_VAR 0 14
23260: PPUSH
23261: LD_VAR 0 1
23265: PPUSH
23266: CALL_OW 250
23270: PPUSH
23271: LD_VAR 0 1
23275: PPUSH
23276: CALL_OW 251
23280: PPUSH
23281: LD_INT 10
23283: PPUSH
23284: LD_INT 0
23286: PPUSH
23287: CALL_OW 50
// result := result ^ un ;
23291: LD_ADDR_VAR 0 7
23295: PUSH
23296: LD_VAR 0 7
23300: PUSH
23301: LD_VAR 0 14
23305: ADD
23306: ST_TO_ADDR
// end ;
23307: GO 23185
23309: POP
23310: POP
// end ; end ;
23311: LD_VAR 0 7
23315: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23316: LD_INT 0
23318: PPUSH
23319: PPUSH
23320: PPUSH
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
// result := false ;
23334: LD_ADDR_VAR 0 3
23338: PUSH
23339: LD_INT 0
23341: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23342: LD_VAR 0 1
23346: NOT
23347: PUSH
23348: LD_VAR 0 1
23352: PPUSH
23353: CALL_OW 266
23357: PUSH
23358: LD_INT 32
23360: PUSH
23361: LD_INT 33
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: IN
23368: NOT
23369: OR
23370: IFFALSE 23374
// exit ;
23372: GO 24483
// nat := GetNation ( tower ) ;
23374: LD_ADDR_VAR 0 12
23378: PUSH
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 248
23388: ST_TO_ADDR
// side := GetSide ( tower ) ;
23389: LD_ADDR_VAR 0 16
23393: PUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 255
23403: ST_TO_ADDR
// x := GetX ( tower ) ;
23404: LD_ADDR_VAR 0 10
23408: PUSH
23409: LD_VAR 0 1
23413: PPUSH
23414: CALL_OW 250
23418: ST_TO_ADDR
// y := GetY ( tower ) ;
23419: LD_ADDR_VAR 0 11
23423: PUSH
23424: LD_VAR 0 1
23428: PPUSH
23429: CALL_OW 251
23433: ST_TO_ADDR
// if not x or not y then
23434: LD_VAR 0 10
23438: NOT
23439: PUSH
23440: LD_VAR 0 11
23444: NOT
23445: OR
23446: IFFALSE 23450
// exit ;
23448: GO 24483
// weapon := 0 ;
23450: LD_ADDR_VAR 0 18
23454: PUSH
23455: LD_INT 0
23457: ST_TO_ADDR
// fac_list := [ ] ;
23458: LD_ADDR_VAR 0 17
23462: PUSH
23463: EMPTY
23464: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23465: LD_ADDR_VAR 0 6
23469: PUSH
23470: LD_VAR 0 1
23474: PPUSH
23475: CALL_OW 274
23479: PPUSH
23480: LD_VAR 0 2
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: CALL 21054 0 3
23492: PPUSH
23493: LD_INT 30
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PPUSH
23503: CALL_OW 72
23507: ST_TO_ADDR
// if not factories then
23508: LD_VAR 0 6
23512: NOT
23513: IFFALSE 23517
// exit ;
23515: GO 24483
// for i in factories do
23517: LD_ADDR_VAR 0 8
23521: PUSH
23522: LD_VAR 0 6
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23553
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23530: LD_ADDR_VAR 0 17
23534: PUSH
23535: LD_VAR 0 17
23539: PUSH
23540: LD_VAR 0 8
23544: PPUSH
23545: CALL_OW 478
23549: UNION
23550: ST_TO_ADDR
23551: GO 23527
23553: POP
23554: POP
// if not fac_list then
23555: LD_VAR 0 17
23559: NOT
23560: IFFALSE 23564
// exit ;
23562: GO 24483
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23564: LD_ADDR_VAR 0 5
23568: PUSH
23569: LD_INT 4
23571: PUSH
23572: LD_INT 5
23574: PUSH
23575: LD_INT 9
23577: PUSH
23578: LD_INT 10
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: LD_INT 7
23586: PUSH
23587: LD_INT 11
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 27
23601: PUSH
23602: LD_INT 28
23604: PUSH
23605: LD_INT 26
23607: PUSH
23608: LD_INT 30
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 43
23619: PUSH
23620: LD_INT 44
23622: PUSH
23623: LD_INT 46
23625: PUSH
23626: LD_INT 45
23628: PUSH
23629: LD_INT 47
23631: PUSH
23632: LD_INT 49
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PUSH
23648: LD_VAR 0 12
23652: ARRAY
23653: ST_TO_ADDR
// list := list isect fac_list ;
23654: LD_ADDR_VAR 0 5
23658: PUSH
23659: LD_VAR 0 5
23663: PUSH
23664: LD_VAR 0 17
23668: ISECT
23669: ST_TO_ADDR
// if not list then
23670: LD_VAR 0 5
23674: NOT
23675: IFFALSE 23679
// exit ;
23677: GO 24483
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23679: LD_VAR 0 12
23683: PUSH
23684: LD_INT 3
23686: EQUAL
23687: PUSH
23688: LD_INT 49
23690: PUSH
23691: LD_VAR 0 5
23695: IN
23696: AND
23697: PUSH
23698: LD_INT 31
23700: PPUSH
23701: LD_VAR 0 16
23705: PPUSH
23706: CALL_OW 321
23710: PUSH
23711: LD_INT 2
23713: EQUAL
23714: AND
23715: IFFALSE 23775
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23717: LD_INT 22
23719: PUSH
23720: LD_VAR 0 16
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 35
23731: PUSH
23732: LD_INT 49
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 91
23741: PUSH
23742: LD_VAR 0 1
23746: PUSH
23747: LD_INT 10
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: PPUSH
23760: CALL_OW 69
23764: NOT
23765: IFFALSE 23775
// weapon := ru_time_lapser ;
23767: LD_ADDR_VAR 0 18
23771: PUSH
23772: LD_INT 49
23774: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23775: LD_VAR 0 12
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: IN
23790: PUSH
23791: LD_INT 11
23793: PUSH
23794: LD_VAR 0 5
23798: IN
23799: PUSH
23800: LD_INT 30
23802: PUSH
23803: LD_VAR 0 5
23807: IN
23808: OR
23809: AND
23810: PUSH
23811: LD_INT 6
23813: PPUSH
23814: LD_VAR 0 16
23818: PPUSH
23819: CALL_OW 321
23823: PUSH
23824: LD_INT 2
23826: EQUAL
23827: AND
23828: IFFALSE 23993
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23830: LD_INT 22
23832: PUSH
23833: LD_VAR 0 16
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 35
23847: PUSH
23848: LD_INT 11
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 35
23857: PUSH
23858: LD_INT 30
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 91
23872: PUSH
23873: LD_VAR 0 1
23877: PUSH
23878: LD_INT 18
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: PPUSH
23891: CALL_OW 69
23895: NOT
23896: PUSH
23897: LD_INT 22
23899: PUSH
23900: LD_VAR 0 16
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 30
23914: PUSH
23915: LD_INT 32
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 30
23924: PUSH
23925: LD_INT 33
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 91
23939: PUSH
23940: LD_VAR 0 1
23944: PUSH
23945: LD_INT 12
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: PPUSH
23961: CALL_OW 69
23965: PUSH
23966: LD_INT 2
23968: GREATER
23969: AND
23970: IFFALSE 23993
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23972: LD_ADDR_VAR 0 18
23976: PUSH
23977: LD_INT 11
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_VAR 0 12
23991: ARRAY
23992: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23993: LD_VAR 0 18
23997: NOT
23998: PUSH
23999: LD_INT 40
24001: PPUSH
24002: LD_VAR 0 16
24006: PPUSH
24007: CALL_OW 321
24011: PUSH
24012: LD_INT 2
24014: EQUAL
24015: AND
24016: PUSH
24017: LD_INT 7
24019: PUSH
24020: LD_VAR 0 5
24024: IN
24025: PUSH
24026: LD_INT 28
24028: PUSH
24029: LD_VAR 0 5
24033: IN
24034: OR
24035: PUSH
24036: LD_INT 45
24038: PUSH
24039: LD_VAR 0 5
24043: IN
24044: OR
24045: AND
24046: IFFALSE 24300
// begin hex := GetHexInfo ( x , y ) ;
24048: LD_ADDR_VAR 0 4
24052: PUSH
24053: LD_VAR 0 10
24057: PPUSH
24058: LD_VAR 0 11
24062: PPUSH
24063: CALL_OW 546
24067: ST_TO_ADDR
// if hex [ 1 ] then
24068: LD_VAR 0 4
24072: PUSH
24073: LD_INT 1
24075: ARRAY
24076: IFFALSE 24080
// exit ;
24078: GO 24483
// height := hex [ 2 ] ;
24080: LD_ADDR_VAR 0 15
24084: PUSH
24085: LD_VAR 0 4
24089: PUSH
24090: LD_INT 2
24092: ARRAY
24093: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24094: LD_ADDR_VAR 0 14
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: ST_TO_ADDR
// for i in tmp do
24117: LD_ADDR_VAR 0 8
24121: PUSH
24122: LD_VAR 0 14
24126: PUSH
24127: FOR_IN
24128: IFFALSE 24298
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24130: LD_ADDR_VAR 0 9
24134: PUSH
24135: LD_VAR 0 10
24139: PPUSH
24140: LD_VAR 0 8
24144: PPUSH
24145: LD_INT 5
24147: PPUSH
24148: CALL_OW 272
24152: PUSH
24153: LD_VAR 0 11
24157: PPUSH
24158: LD_VAR 0 8
24162: PPUSH
24163: LD_INT 5
24165: PPUSH
24166: CALL_OW 273
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24175: LD_VAR 0 9
24179: PUSH
24180: LD_INT 1
24182: ARRAY
24183: PPUSH
24184: LD_VAR 0 9
24188: PUSH
24189: LD_INT 2
24191: ARRAY
24192: PPUSH
24193: CALL_OW 488
24197: IFFALSE 24296
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24199: LD_ADDR_VAR 0 4
24203: PUSH
24204: LD_VAR 0 9
24208: PUSH
24209: LD_INT 1
24211: ARRAY
24212: PPUSH
24213: LD_VAR 0 9
24217: PUSH
24218: LD_INT 2
24220: ARRAY
24221: PPUSH
24222: CALL_OW 546
24226: ST_TO_ADDR
// if hex [ 1 ] then
24227: LD_VAR 0 4
24231: PUSH
24232: LD_INT 1
24234: ARRAY
24235: IFFALSE 24239
// continue ;
24237: GO 24127
// h := hex [ 2 ] ;
24239: LD_ADDR_VAR 0 13
24243: PUSH
24244: LD_VAR 0 4
24248: PUSH
24249: LD_INT 2
24251: ARRAY
24252: ST_TO_ADDR
// if h + 7 < height then
24253: LD_VAR 0 13
24257: PUSH
24258: LD_INT 7
24260: PLUS
24261: PUSH
24262: LD_VAR 0 15
24266: LESS
24267: IFFALSE 24296
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24269: LD_ADDR_VAR 0 18
24273: PUSH
24274: LD_INT 7
24276: PUSH
24277: LD_INT 28
24279: PUSH
24280: LD_INT 45
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: PUSH
24288: LD_VAR 0 12
24292: ARRAY
24293: ST_TO_ADDR
// break ;
24294: GO 24298
// end ; end ; end ;
24296: GO 24127
24298: POP
24299: POP
// end ; if not weapon then
24300: LD_VAR 0 18
24304: NOT
24305: IFFALSE 24365
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24307: LD_ADDR_VAR 0 5
24311: PUSH
24312: LD_VAR 0 5
24316: PUSH
24317: LD_INT 11
24319: PUSH
24320: LD_INT 30
24322: PUSH
24323: LD_INT 49
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: LIST
24330: DIFF
24331: ST_TO_ADDR
// if not list then
24332: LD_VAR 0 5
24336: NOT
24337: IFFALSE 24341
// exit ;
24339: GO 24483
// weapon := list [ rand ( 1 , list ) ] ;
24341: LD_ADDR_VAR 0 18
24345: PUSH
24346: LD_VAR 0 5
24350: PUSH
24351: LD_INT 1
24353: PPUSH
24354: LD_VAR 0 5
24358: PPUSH
24359: CALL_OW 12
24363: ARRAY
24364: ST_TO_ADDR
// end ; if weapon then
24365: LD_VAR 0 18
24369: IFFALSE 24483
// begin tmp := CostOfWeapon ( weapon ) ;
24371: LD_ADDR_VAR 0 14
24375: PUSH
24376: LD_VAR 0 18
24380: PPUSH
24381: CALL_OW 451
24385: ST_TO_ADDR
// j := GetBase ( tower ) ;
24386: LD_ADDR_VAR 0 9
24390: PUSH
24391: LD_VAR 0 1
24395: PPUSH
24396: CALL_OW 274
24400: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24401: LD_VAR 0 9
24405: PPUSH
24406: LD_INT 1
24408: PPUSH
24409: CALL_OW 275
24413: PUSH
24414: LD_VAR 0 14
24418: PUSH
24419: LD_INT 1
24421: ARRAY
24422: GREATEREQUAL
24423: PUSH
24424: LD_VAR 0 9
24428: PPUSH
24429: LD_INT 2
24431: PPUSH
24432: CALL_OW 275
24436: PUSH
24437: LD_VAR 0 14
24441: PUSH
24442: LD_INT 2
24444: ARRAY
24445: GREATEREQUAL
24446: AND
24447: PUSH
24448: LD_VAR 0 9
24452: PPUSH
24453: LD_INT 3
24455: PPUSH
24456: CALL_OW 275
24460: PUSH
24461: LD_VAR 0 14
24465: PUSH
24466: LD_INT 3
24468: ARRAY
24469: GREATEREQUAL
24470: AND
24471: IFFALSE 24483
// result := weapon ;
24473: LD_ADDR_VAR 0 3
24477: PUSH
24478: LD_VAR 0 18
24482: ST_TO_ADDR
// end ; end ;
24483: LD_VAR 0 3
24487: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24488: LD_INT 0
24490: PPUSH
24491: PPUSH
// result := true ;
24492: LD_ADDR_VAR 0 3
24496: PUSH
24497: LD_INT 1
24499: ST_TO_ADDR
// if array1 = array2 then
24500: LD_VAR 0 1
24504: PUSH
24505: LD_VAR 0 2
24509: EQUAL
24510: IFFALSE 24570
// begin for i = 1 to array1 do
24512: LD_ADDR_VAR 0 4
24516: PUSH
24517: DOUBLE
24518: LD_INT 1
24520: DEC
24521: ST_TO_ADDR
24522: LD_VAR 0 1
24526: PUSH
24527: FOR_TO
24528: IFFALSE 24566
// if array1 [ i ] <> array2 [ i ] then
24530: LD_VAR 0 1
24534: PUSH
24535: LD_VAR 0 4
24539: ARRAY
24540: PUSH
24541: LD_VAR 0 2
24545: PUSH
24546: LD_VAR 0 4
24550: ARRAY
24551: NONEQUAL
24552: IFFALSE 24564
// begin result := false ;
24554: LD_ADDR_VAR 0 3
24558: PUSH
24559: LD_INT 0
24561: ST_TO_ADDR
// break ;
24562: GO 24566
// end ;
24564: GO 24527
24566: POP
24567: POP
// end else
24568: GO 24578
// result := false ;
24570: LD_ADDR_VAR 0 3
24574: PUSH
24575: LD_INT 0
24577: ST_TO_ADDR
// end ;
24578: LD_VAR 0 3
24582: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
// if not array1 or not array2 then
24587: LD_VAR 0 1
24591: NOT
24592: PUSH
24593: LD_VAR 0 2
24597: NOT
24598: OR
24599: IFFALSE 24603
// exit ;
24601: GO 24667
// result := true ;
24603: LD_ADDR_VAR 0 3
24607: PUSH
24608: LD_INT 1
24610: ST_TO_ADDR
// for i = 1 to array1 do
24611: LD_ADDR_VAR 0 4
24615: PUSH
24616: DOUBLE
24617: LD_INT 1
24619: DEC
24620: ST_TO_ADDR
24621: LD_VAR 0 1
24625: PUSH
24626: FOR_TO
24627: IFFALSE 24665
// if array1 [ i ] <> array2 [ i ] then
24629: LD_VAR 0 1
24633: PUSH
24634: LD_VAR 0 4
24638: ARRAY
24639: PUSH
24640: LD_VAR 0 2
24644: PUSH
24645: LD_VAR 0 4
24649: ARRAY
24650: NONEQUAL
24651: IFFALSE 24663
// begin result := false ;
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_INT 0
24660: ST_TO_ADDR
// break ;
24661: GO 24665
// end ;
24663: GO 24626
24665: POP
24666: POP
// end ;
24667: LD_VAR 0 3
24671: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24672: LD_INT 0
24674: PPUSH
24675: PPUSH
24676: PPUSH
// pom := GetBase ( fac ) ;
24677: LD_ADDR_VAR 0 5
24681: PUSH
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 274
24691: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24692: LD_ADDR_VAR 0 4
24696: PUSH
24697: LD_VAR 0 2
24701: PUSH
24702: LD_INT 1
24704: ARRAY
24705: PPUSH
24706: LD_VAR 0 2
24710: PUSH
24711: LD_INT 2
24713: ARRAY
24714: PPUSH
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 3
24722: ARRAY
24723: PPUSH
24724: LD_VAR 0 2
24728: PUSH
24729: LD_INT 4
24731: ARRAY
24732: PPUSH
24733: CALL_OW 449
24737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24738: LD_ADDR_VAR 0 3
24742: PUSH
24743: LD_VAR 0 5
24747: PPUSH
24748: LD_INT 1
24750: PPUSH
24751: CALL_OW 275
24755: PUSH
24756: LD_VAR 0 4
24760: PUSH
24761: LD_INT 1
24763: ARRAY
24764: GREATEREQUAL
24765: PUSH
24766: LD_VAR 0 5
24770: PPUSH
24771: LD_INT 2
24773: PPUSH
24774: CALL_OW 275
24778: PUSH
24779: LD_VAR 0 4
24783: PUSH
24784: LD_INT 2
24786: ARRAY
24787: GREATEREQUAL
24788: AND
24789: PUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: LD_INT 3
24797: PPUSH
24798: CALL_OW 275
24802: PUSH
24803: LD_VAR 0 4
24807: PUSH
24808: LD_INT 3
24810: ARRAY
24811: GREATEREQUAL
24812: AND
24813: ST_TO_ADDR
// end ;
24814: LD_VAR 0 3
24818: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24819: LD_INT 0
24821: PPUSH
24822: PPUSH
24823: PPUSH
24824: PPUSH
// pom := GetBase ( building ) ;
24825: LD_ADDR_VAR 0 3
24829: PUSH
24830: LD_VAR 0 1
24834: PPUSH
24835: CALL_OW 274
24839: ST_TO_ADDR
// if not pom then
24840: LD_VAR 0 3
24844: NOT
24845: IFFALSE 24849
// exit ;
24847: GO 25019
// btype := GetBType ( building ) ;
24849: LD_ADDR_VAR 0 5
24853: PUSH
24854: LD_VAR 0 1
24858: PPUSH
24859: CALL_OW 266
24863: ST_TO_ADDR
// if btype = b_armoury then
24864: LD_VAR 0 5
24868: PUSH
24869: LD_INT 4
24871: EQUAL
24872: IFFALSE 24882
// btype := b_barracks ;
24874: LD_ADDR_VAR 0 5
24878: PUSH
24879: LD_INT 5
24881: ST_TO_ADDR
// if btype = b_depot then
24882: LD_VAR 0 5
24886: PUSH
24887: LD_INT 0
24889: EQUAL
24890: IFFALSE 24900
// btype := b_warehouse ;
24892: LD_ADDR_VAR 0 5
24896: PUSH
24897: LD_INT 1
24899: ST_TO_ADDR
// if btype = b_workshop then
24900: LD_VAR 0 5
24904: PUSH
24905: LD_INT 2
24907: EQUAL
24908: IFFALSE 24918
// btype := b_factory ;
24910: LD_ADDR_VAR 0 5
24914: PUSH
24915: LD_INT 3
24917: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24918: LD_ADDR_VAR 0 4
24922: PUSH
24923: LD_VAR 0 5
24927: PPUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: CALL_OW 248
24937: PPUSH
24938: CALL_OW 450
24942: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24943: LD_ADDR_VAR 0 2
24947: PUSH
24948: LD_VAR 0 3
24952: PPUSH
24953: LD_INT 1
24955: PPUSH
24956: CALL_OW 275
24960: PUSH
24961: LD_VAR 0 4
24965: PUSH
24966: LD_INT 1
24968: ARRAY
24969: GREATEREQUAL
24970: PUSH
24971: LD_VAR 0 3
24975: PPUSH
24976: LD_INT 2
24978: PPUSH
24979: CALL_OW 275
24983: PUSH
24984: LD_VAR 0 4
24988: PUSH
24989: LD_INT 2
24991: ARRAY
24992: GREATEREQUAL
24993: AND
24994: PUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: LD_INT 3
25002: PPUSH
25003: CALL_OW 275
25007: PUSH
25008: LD_VAR 0 4
25012: PUSH
25013: LD_INT 3
25015: ARRAY
25016: GREATEREQUAL
25017: AND
25018: ST_TO_ADDR
// end ;
25019: LD_VAR 0 2
25023: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25024: LD_INT 0
25026: PPUSH
25027: PPUSH
25028: PPUSH
// pom := GetBase ( building ) ;
25029: LD_ADDR_VAR 0 4
25033: PUSH
25034: LD_VAR 0 1
25038: PPUSH
25039: CALL_OW 274
25043: ST_TO_ADDR
// if not pom then
25044: LD_VAR 0 4
25048: NOT
25049: IFFALSE 25053
// exit ;
25051: GO 25154
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25053: LD_ADDR_VAR 0 5
25057: PUSH
25058: LD_VAR 0 2
25062: PPUSH
25063: LD_VAR 0 1
25067: PPUSH
25068: CALL_OW 248
25072: PPUSH
25073: CALL_OW 450
25077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: LD_VAR 0 4
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 275
25095: PUSH
25096: LD_VAR 0 5
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: GREATEREQUAL
25105: PUSH
25106: LD_VAR 0 4
25110: PPUSH
25111: LD_INT 2
25113: PPUSH
25114: CALL_OW 275
25118: PUSH
25119: LD_VAR 0 5
25123: PUSH
25124: LD_INT 2
25126: ARRAY
25127: GREATEREQUAL
25128: AND
25129: PUSH
25130: LD_VAR 0 4
25134: PPUSH
25135: LD_INT 3
25137: PPUSH
25138: CALL_OW 275
25142: PUSH
25143: LD_VAR 0 5
25147: PUSH
25148: LD_INT 3
25150: ARRAY
25151: GREATEREQUAL
25152: AND
25153: ST_TO_ADDR
// end ;
25154: LD_VAR 0 3
25158: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25159: LD_INT 0
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
// result := false ;
25172: LD_ADDR_VAR 0 8
25176: PUSH
25177: LD_INT 0
25179: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25180: LD_VAR 0 5
25184: NOT
25185: PUSH
25186: LD_VAR 0 1
25190: NOT
25191: OR
25192: PUSH
25193: LD_VAR 0 2
25197: NOT
25198: OR
25199: PUSH
25200: LD_VAR 0 3
25204: NOT
25205: OR
25206: IFFALSE 25210
// exit ;
25208: GO 26024
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25210: LD_ADDR_VAR 0 14
25214: PUSH
25215: LD_VAR 0 1
25219: PPUSH
25220: LD_VAR 0 2
25224: PPUSH
25225: LD_VAR 0 3
25229: PPUSH
25230: LD_VAR 0 4
25234: PPUSH
25235: LD_VAR 0 5
25239: PUSH
25240: LD_INT 1
25242: ARRAY
25243: PPUSH
25244: CALL_OW 248
25248: PPUSH
25249: LD_INT 0
25251: PPUSH
25252: CALL 27261 0 6
25256: ST_TO_ADDR
// if not hexes then
25257: LD_VAR 0 14
25261: NOT
25262: IFFALSE 25266
// exit ;
25264: GO 26024
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25266: LD_ADDR_VAR 0 17
25270: PUSH
25271: LD_VAR 0 5
25275: PPUSH
25276: LD_INT 22
25278: PUSH
25279: LD_VAR 0 13
25283: PPUSH
25284: CALL_OW 255
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 30
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 30
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PPUSH
25325: CALL_OW 72
25329: ST_TO_ADDR
// for i = 1 to hexes do
25330: LD_ADDR_VAR 0 9
25334: PUSH
25335: DOUBLE
25336: LD_INT 1
25338: DEC
25339: ST_TO_ADDR
25340: LD_VAR 0 14
25344: PUSH
25345: FOR_TO
25346: IFFALSE 26022
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25348: LD_ADDR_VAR 0 13
25352: PUSH
25353: LD_VAR 0 14
25357: PUSH
25358: LD_VAR 0 9
25362: ARRAY
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PPUSH
25368: LD_VAR 0 14
25372: PUSH
25373: LD_VAR 0 9
25377: ARRAY
25378: PUSH
25379: LD_INT 2
25381: ARRAY
25382: PPUSH
25383: CALL_OW 428
25387: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25388: LD_VAR 0 14
25392: PUSH
25393: LD_VAR 0 9
25397: ARRAY
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PPUSH
25403: LD_VAR 0 14
25407: PUSH
25408: LD_VAR 0 9
25412: ARRAY
25413: PUSH
25414: LD_INT 2
25416: ARRAY
25417: PPUSH
25418: CALL_OW 351
25422: PUSH
25423: LD_VAR 0 14
25427: PUSH
25428: LD_VAR 0 9
25432: ARRAY
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: PPUSH
25438: LD_VAR 0 14
25442: PUSH
25443: LD_VAR 0 9
25447: ARRAY
25448: PUSH
25449: LD_INT 2
25451: ARRAY
25452: PPUSH
25453: CALL_OW 488
25457: NOT
25458: OR
25459: PUSH
25460: LD_VAR 0 13
25464: PPUSH
25465: CALL_OW 247
25469: PUSH
25470: LD_INT 3
25472: EQUAL
25473: OR
25474: IFFALSE 25480
// exit ;
25476: POP
25477: POP
25478: GO 26024
// if not tmp then
25480: LD_VAR 0 13
25484: NOT
25485: IFFALSE 25489
// continue ;
25487: GO 25345
// result := true ;
25489: LD_ADDR_VAR 0 8
25493: PUSH
25494: LD_INT 1
25496: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25497: LD_VAR 0 6
25501: PUSH
25502: LD_VAR 0 13
25506: PPUSH
25507: CALL_OW 247
25511: PUSH
25512: LD_INT 2
25514: EQUAL
25515: AND
25516: PUSH
25517: LD_VAR 0 13
25521: PPUSH
25522: CALL_OW 263
25526: PUSH
25527: LD_INT 1
25529: EQUAL
25530: AND
25531: IFFALSE 25695
// begin if IsDrivenBy ( tmp ) then
25533: LD_VAR 0 13
25537: PPUSH
25538: CALL_OW 311
25542: IFFALSE 25546
// continue ;
25544: GO 25345
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25546: LD_VAR 0 6
25550: PPUSH
25551: LD_INT 3
25553: PUSH
25554: LD_INT 60
25556: PUSH
25557: EMPTY
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 3
25566: PUSH
25567: LD_INT 55
25569: PUSH
25570: EMPTY
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PPUSH
25581: CALL_OW 72
25585: IFFALSE 25693
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25587: LD_ADDR_VAR 0 18
25591: PUSH
25592: LD_VAR 0 6
25596: PPUSH
25597: LD_INT 3
25599: PUSH
25600: LD_INT 60
25602: PUSH
25603: EMPTY
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 3
25612: PUSH
25613: LD_INT 55
25615: PUSH
25616: EMPTY
25617: LIST
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PPUSH
25627: CALL_OW 72
25631: PUSH
25632: LD_INT 1
25634: ARRAY
25635: ST_TO_ADDR
// if IsInUnit ( driver ) then
25636: LD_VAR 0 18
25640: PPUSH
25641: CALL_OW 310
25645: IFFALSE 25656
// ComExit ( driver ) ;
25647: LD_VAR 0 18
25651: PPUSH
25652: CALL 50445 0 1
// AddComEnterUnit ( driver , tmp ) ;
25656: LD_VAR 0 18
25660: PPUSH
25661: LD_VAR 0 13
25665: PPUSH
25666: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25670: LD_VAR 0 18
25674: PPUSH
25675: LD_VAR 0 7
25679: PPUSH
25680: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25684: LD_VAR 0 18
25688: PPUSH
25689: CALL_OW 181
// end ; continue ;
25693: GO 25345
// end ; if not cleaners or not tmp in cleaners then
25695: LD_VAR 0 6
25699: NOT
25700: PUSH
25701: LD_VAR 0 13
25705: PUSH
25706: LD_VAR 0 6
25710: IN
25711: NOT
25712: OR
25713: IFFALSE 26020
// begin if dep then
25715: LD_VAR 0 17
25719: IFFALSE 25855
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25721: LD_ADDR_VAR 0 16
25725: PUSH
25726: LD_VAR 0 17
25730: PUSH
25731: LD_INT 1
25733: ARRAY
25734: PPUSH
25735: CALL_OW 250
25739: PPUSH
25740: LD_VAR 0 17
25744: PUSH
25745: LD_INT 1
25747: ARRAY
25748: PPUSH
25749: CALL_OW 254
25753: PPUSH
25754: LD_INT 5
25756: PPUSH
25757: CALL_OW 272
25761: PUSH
25762: LD_VAR 0 17
25766: PUSH
25767: LD_INT 1
25769: ARRAY
25770: PPUSH
25771: CALL_OW 251
25775: PPUSH
25776: LD_VAR 0 17
25780: PUSH
25781: LD_INT 1
25783: ARRAY
25784: PPUSH
25785: CALL_OW 254
25789: PPUSH
25790: LD_INT 5
25792: PPUSH
25793: CALL_OW 273
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25802: LD_VAR 0 16
25806: PUSH
25807: LD_INT 1
25809: ARRAY
25810: PPUSH
25811: LD_VAR 0 16
25815: PUSH
25816: LD_INT 2
25818: ARRAY
25819: PPUSH
25820: CALL_OW 488
25824: IFFALSE 25855
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25826: LD_VAR 0 13
25830: PPUSH
25831: LD_VAR 0 16
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PPUSH
25840: LD_VAR 0 16
25844: PUSH
25845: LD_INT 2
25847: ARRAY
25848: PPUSH
25849: CALL_OW 111
// continue ;
25853: GO 25345
// end ; end ; r := GetDir ( tmp ) ;
25855: LD_ADDR_VAR 0 15
25859: PUSH
25860: LD_VAR 0 13
25864: PPUSH
25865: CALL_OW 254
25869: ST_TO_ADDR
// if r = 5 then
25870: LD_VAR 0 15
25874: PUSH
25875: LD_INT 5
25877: EQUAL
25878: IFFALSE 25888
// r := 0 ;
25880: LD_ADDR_VAR 0 15
25884: PUSH
25885: LD_INT 0
25887: ST_TO_ADDR
// for j = r to 5 do
25888: LD_ADDR_VAR 0 10
25892: PUSH
25893: DOUBLE
25894: LD_VAR 0 15
25898: DEC
25899: ST_TO_ADDR
25900: LD_INT 5
25902: PUSH
25903: FOR_TO
25904: IFFALSE 26018
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25906: LD_ADDR_VAR 0 11
25910: PUSH
25911: LD_VAR 0 13
25915: PPUSH
25916: CALL_OW 250
25920: PPUSH
25921: LD_VAR 0 10
25925: PPUSH
25926: LD_INT 2
25928: PPUSH
25929: CALL_OW 272
25933: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25934: LD_ADDR_VAR 0 12
25938: PUSH
25939: LD_VAR 0 13
25943: PPUSH
25944: CALL_OW 251
25948: PPUSH
25949: LD_VAR 0 10
25953: PPUSH
25954: LD_INT 2
25956: PPUSH
25957: CALL_OW 273
25961: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25962: LD_VAR 0 11
25966: PPUSH
25967: LD_VAR 0 12
25971: PPUSH
25972: CALL_OW 488
25976: PUSH
25977: LD_VAR 0 11
25981: PPUSH
25982: LD_VAR 0 12
25986: PPUSH
25987: CALL_OW 428
25991: NOT
25992: AND
25993: IFFALSE 26016
// begin ComMoveXY ( tmp , _x , _y ) ;
25995: LD_VAR 0 13
25999: PPUSH
26000: LD_VAR 0 11
26004: PPUSH
26005: LD_VAR 0 12
26009: PPUSH
26010: CALL_OW 111
// break ;
26014: GO 26018
// end ; end ;
26016: GO 25903
26018: POP
26019: POP
// end ; end ;
26020: GO 25345
26022: POP
26023: POP
// end ;
26024: LD_VAR 0 8
26028: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26029: LD_INT 0
26031: PPUSH
// result := true ;
26032: LD_ADDR_VAR 0 3
26036: PUSH
26037: LD_INT 1
26039: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26040: LD_VAR 0 2
26044: PUSH
26045: LD_INT 24
26047: DOUBLE
26048: EQUAL
26049: IFTRUE 26059
26051: LD_INT 33
26053: DOUBLE
26054: EQUAL
26055: IFTRUE 26059
26057: GO 26084
26059: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26060: LD_ADDR_VAR 0 3
26064: PUSH
26065: LD_INT 32
26067: PPUSH
26068: LD_VAR 0 1
26072: PPUSH
26073: CALL_OW 321
26077: PUSH
26078: LD_INT 2
26080: EQUAL
26081: ST_TO_ADDR
26082: GO 26404
26084: LD_INT 20
26086: DOUBLE
26087: EQUAL
26088: IFTRUE 26092
26090: GO 26117
26092: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_INT 6
26100: PPUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 321
26110: PUSH
26111: LD_INT 2
26113: EQUAL
26114: ST_TO_ADDR
26115: GO 26404
26117: LD_INT 22
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26131
26123: LD_INT 36
26125: DOUBLE
26126: EQUAL
26127: IFTRUE 26131
26129: GO 26156
26131: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_INT 15
26139: PPUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 321
26149: PUSH
26150: LD_INT 2
26152: EQUAL
26153: ST_TO_ADDR
26154: GO 26404
26156: LD_INT 30
26158: DOUBLE
26159: EQUAL
26160: IFTRUE 26164
26162: GO 26189
26164: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26165: LD_ADDR_VAR 0 3
26169: PUSH
26170: LD_INT 20
26172: PPUSH
26173: LD_VAR 0 1
26177: PPUSH
26178: CALL_OW 321
26182: PUSH
26183: LD_INT 2
26185: EQUAL
26186: ST_TO_ADDR
26187: GO 26404
26189: LD_INT 28
26191: DOUBLE
26192: EQUAL
26193: IFTRUE 26203
26195: LD_INT 21
26197: DOUBLE
26198: EQUAL
26199: IFTRUE 26203
26201: GO 26228
26203: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26204: LD_ADDR_VAR 0 3
26208: PUSH
26209: LD_INT 21
26211: PPUSH
26212: LD_VAR 0 1
26216: PPUSH
26217: CALL_OW 321
26221: PUSH
26222: LD_INT 2
26224: EQUAL
26225: ST_TO_ADDR
26226: GO 26404
26228: LD_INT 16
26230: DOUBLE
26231: EQUAL
26232: IFTRUE 26236
26234: GO 26263
26236: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26237: LD_ADDR_VAR 0 3
26241: PUSH
26242: LD_EXP 108
26246: PPUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 321
26256: PUSH
26257: LD_INT 2
26259: EQUAL
26260: ST_TO_ADDR
26261: GO 26404
26263: LD_INT 19
26265: DOUBLE
26266: EQUAL
26267: IFTRUE 26277
26269: LD_INT 23
26271: DOUBLE
26272: EQUAL
26273: IFTRUE 26277
26275: GO 26304
26277: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26278: LD_ADDR_VAR 0 3
26282: PUSH
26283: LD_EXP 107
26287: PPUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 321
26297: PUSH
26298: LD_INT 2
26300: EQUAL
26301: ST_TO_ADDR
26302: GO 26404
26304: LD_INT 17
26306: DOUBLE
26307: EQUAL
26308: IFTRUE 26312
26310: GO 26337
26312: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_INT 39
26320: PPUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 321
26330: PUSH
26331: LD_INT 2
26333: EQUAL
26334: ST_TO_ADDR
26335: GO 26404
26337: LD_INT 18
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26370
26345: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26346: LD_ADDR_VAR 0 3
26350: PUSH
26351: LD_INT 40
26353: PPUSH
26354: LD_VAR 0 1
26358: PPUSH
26359: CALL_OW 321
26363: PUSH
26364: LD_INT 2
26366: EQUAL
26367: ST_TO_ADDR
26368: GO 26404
26370: LD_INT 27
26372: DOUBLE
26373: EQUAL
26374: IFTRUE 26378
26376: GO 26403
26378: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26379: LD_ADDR_VAR 0 3
26383: PUSH
26384: LD_INT 35
26386: PPUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL_OW 321
26396: PUSH
26397: LD_INT 2
26399: EQUAL
26400: ST_TO_ADDR
26401: GO 26404
26403: POP
// end ;
26404: LD_VAR 0 3
26408: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26409: LD_INT 0
26411: PPUSH
26412: PPUSH
26413: PPUSH
26414: PPUSH
26415: PPUSH
26416: PPUSH
26417: PPUSH
26418: PPUSH
26419: PPUSH
26420: PPUSH
26421: PPUSH
// result := false ;
26422: LD_ADDR_VAR 0 6
26426: PUSH
26427: LD_INT 0
26429: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26430: LD_VAR 0 1
26434: NOT
26435: PUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 266
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: IN
26456: NOT
26457: OR
26458: PUSH
26459: LD_VAR 0 2
26463: NOT
26464: OR
26465: PUSH
26466: LD_VAR 0 5
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: LD_INT 4
26485: PUSH
26486: LD_INT 5
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: IN
26497: NOT
26498: OR
26499: PUSH
26500: LD_VAR 0 3
26504: PPUSH
26505: LD_VAR 0 4
26509: PPUSH
26510: CALL_OW 488
26514: NOT
26515: OR
26516: IFFALSE 26520
// exit ;
26518: GO 27256
// side := GetSide ( depot ) ;
26520: LD_ADDR_VAR 0 9
26524: PUSH
26525: LD_VAR 0 1
26529: PPUSH
26530: CALL_OW 255
26534: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26535: LD_VAR 0 9
26539: PPUSH
26540: LD_VAR 0 2
26544: PPUSH
26545: CALL 26029 0 2
26549: NOT
26550: IFFALSE 26554
// exit ;
26552: GO 27256
// pom := GetBase ( depot ) ;
26554: LD_ADDR_VAR 0 10
26558: PUSH
26559: LD_VAR 0 1
26563: PPUSH
26564: CALL_OW 274
26568: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26569: LD_ADDR_VAR 0 11
26573: PUSH
26574: LD_VAR 0 2
26578: PPUSH
26579: LD_VAR 0 1
26583: PPUSH
26584: CALL_OW 248
26588: PPUSH
26589: CALL_OW 450
26593: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26594: LD_VAR 0 10
26598: PPUSH
26599: LD_INT 1
26601: PPUSH
26602: CALL_OW 275
26606: PUSH
26607: LD_VAR 0 11
26611: PUSH
26612: LD_INT 1
26614: ARRAY
26615: GREATEREQUAL
26616: PUSH
26617: LD_VAR 0 10
26621: PPUSH
26622: LD_INT 2
26624: PPUSH
26625: CALL_OW 275
26629: PUSH
26630: LD_VAR 0 11
26634: PUSH
26635: LD_INT 2
26637: ARRAY
26638: GREATEREQUAL
26639: AND
26640: PUSH
26641: LD_VAR 0 10
26645: PPUSH
26646: LD_INT 3
26648: PPUSH
26649: CALL_OW 275
26653: PUSH
26654: LD_VAR 0 11
26658: PUSH
26659: LD_INT 3
26661: ARRAY
26662: GREATEREQUAL
26663: AND
26664: NOT
26665: IFFALSE 26669
// exit ;
26667: GO 27256
// if GetBType ( depot ) = b_depot then
26669: LD_VAR 0 1
26673: PPUSH
26674: CALL_OW 266
26678: PUSH
26679: LD_INT 0
26681: EQUAL
26682: IFFALSE 26694
// dist := 28 else
26684: LD_ADDR_VAR 0 14
26688: PUSH
26689: LD_INT 28
26691: ST_TO_ADDR
26692: GO 26702
// dist := 36 ;
26694: LD_ADDR_VAR 0 14
26698: PUSH
26699: LD_INT 36
26701: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_VAR 0 3
26711: PPUSH
26712: LD_VAR 0 4
26716: PPUSH
26717: CALL_OW 297
26721: PUSH
26722: LD_VAR 0 14
26726: GREATER
26727: IFFALSE 26731
// exit ;
26729: GO 27256
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26731: LD_ADDR_VAR 0 12
26735: PUSH
26736: LD_VAR 0 2
26740: PPUSH
26741: LD_VAR 0 3
26745: PPUSH
26746: LD_VAR 0 4
26750: PPUSH
26751: LD_VAR 0 5
26755: PPUSH
26756: LD_VAR 0 1
26760: PPUSH
26761: CALL_OW 248
26765: PPUSH
26766: LD_INT 0
26768: PPUSH
26769: CALL 27261 0 6
26773: ST_TO_ADDR
// if not hexes then
26774: LD_VAR 0 12
26778: NOT
26779: IFFALSE 26783
// exit ;
26781: GO 27256
// hex := GetHexInfo ( x , y ) ;
26783: LD_ADDR_VAR 0 15
26787: PUSH
26788: LD_VAR 0 3
26792: PPUSH
26793: LD_VAR 0 4
26797: PPUSH
26798: CALL_OW 546
26802: ST_TO_ADDR
// if hex [ 1 ] then
26803: LD_VAR 0 15
26807: PUSH
26808: LD_INT 1
26810: ARRAY
26811: IFFALSE 26815
// exit ;
26813: GO 27256
// height := hex [ 2 ] ;
26815: LD_ADDR_VAR 0 13
26819: PUSH
26820: LD_VAR 0 15
26824: PUSH
26825: LD_INT 2
26827: ARRAY
26828: ST_TO_ADDR
// for i = 1 to hexes do
26829: LD_ADDR_VAR 0 7
26833: PUSH
26834: DOUBLE
26835: LD_INT 1
26837: DEC
26838: ST_TO_ADDR
26839: LD_VAR 0 12
26843: PUSH
26844: FOR_TO
26845: IFFALSE 27175
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26847: LD_VAR 0 12
26851: PUSH
26852: LD_VAR 0 7
26856: ARRAY
26857: PUSH
26858: LD_INT 1
26860: ARRAY
26861: PPUSH
26862: LD_VAR 0 12
26866: PUSH
26867: LD_VAR 0 7
26871: ARRAY
26872: PUSH
26873: LD_INT 2
26875: ARRAY
26876: PPUSH
26877: CALL_OW 488
26881: NOT
26882: PUSH
26883: LD_VAR 0 12
26887: PUSH
26888: LD_VAR 0 7
26892: ARRAY
26893: PUSH
26894: LD_INT 1
26896: ARRAY
26897: PPUSH
26898: LD_VAR 0 12
26902: PUSH
26903: LD_VAR 0 7
26907: ARRAY
26908: PUSH
26909: LD_INT 2
26911: ARRAY
26912: PPUSH
26913: CALL_OW 428
26917: PUSH
26918: LD_INT 0
26920: GREATER
26921: OR
26922: PUSH
26923: LD_VAR 0 12
26927: PUSH
26928: LD_VAR 0 7
26932: ARRAY
26933: PUSH
26934: LD_INT 1
26936: ARRAY
26937: PPUSH
26938: LD_VAR 0 12
26942: PUSH
26943: LD_VAR 0 7
26947: ARRAY
26948: PUSH
26949: LD_INT 2
26951: ARRAY
26952: PPUSH
26953: CALL_OW 351
26957: OR
26958: IFFALSE 26964
// exit ;
26960: POP
26961: POP
26962: GO 27256
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26964: LD_ADDR_VAR 0 8
26968: PUSH
26969: LD_VAR 0 12
26973: PUSH
26974: LD_VAR 0 7
26978: ARRAY
26979: PUSH
26980: LD_INT 1
26982: ARRAY
26983: PPUSH
26984: LD_VAR 0 12
26988: PUSH
26989: LD_VAR 0 7
26993: ARRAY
26994: PUSH
26995: LD_INT 2
26997: ARRAY
26998: PPUSH
26999: CALL_OW 546
27003: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27004: LD_VAR 0 8
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PUSH
27013: LD_VAR 0 8
27017: PUSH
27018: LD_INT 2
27020: ARRAY
27021: PUSH
27022: LD_VAR 0 13
27026: PUSH
27027: LD_INT 2
27029: PLUS
27030: GREATER
27031: OR
27032: PUSH
27033: LD_VAR 0 8
27037: PUSH
27038: LD_INT 2
27040: ARRAY
27041: PUSH
27042: LD_VAR 0 13
27046: PUSH
27047: LD_INT 2
27049: MINUS
27050: LESS
27051: OR
27052: PUSH
27053: LD_VAR 0 8
27057: PUSH
27058: LD_INT 3
27060: ARRAY
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 8
27067: PUSH
27068: LD_INT 9
27070: PUSH
27071: LD_INT 10
27073: PUSH
27074: LD_INT 11
27076: PUSH
27077: LD_INT 12
27079: PUSH
27080: LD_INT 13
27082: PUSH
27083: LD_INT 16
27085: PUSH
27086: LD_INT 17
27088: PUSH
27089: LD_INT 18
27091: PUSH
27092: LD_INT 19
27094: PUSH
27095: LD_INT 20
27097: PUSH
27098: LD_INT 21
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: IN
27116: NOT
27117: OR
27118: PUSH
27119: LD_VAR 0 8
27123: PUSH
27124: LD_INT 5
27126: ARRAY
27127: NOT
27128: OR
27129: PUSH
27130: LD_VAR 0 8
27134: PUSH
27135: LD_INT 6
27137: ARRAY
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 7
27147: PUSH
27148: LD_INT 9
27150: PUSH
27151: LD_INT 10
27153: PUSH
27154: LD_INT 11
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: IN
27165: NOT
27166: OR
27167: IFFALSE 27173
// exit ;
27169: POP
27170: POP
27171: GO 27256
// end ;
27173: GO 26844
27175: POP
27176: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27177: LD_VAR 0 9
27181: PPUSH
27182: LD_VAR 0 3
27186: PPUSH
27187: LD_VAR 0 4
27191: PPUSH
27192: LD_INT 20
27194: PPUSH
27195: CALL 19202 0 4
27199: PUSH
27200: LD_INT 4
27202: ARRAY
27203: IFFALSE 27207
// exit ;
27205: GO 27256
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27207: LD_VAR 0 2
27211: PUSH
27212: LD_INT 29
27214: PUSH
27215: LD_INT 30
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: IN
27222: PUSH
27223: LD_VAR 0 3
27227: PPUSH
27228: LD_VAR 0 4
27232: PPUSH
27233: LD_VAR 0 9
27237: PPUSH
27238: CALL_OW 440
27242: NOT
27243: AND
27244: IFFALSE 27248
// exit ;
27246: GO 27256
// result := true ;
27248: LD_ADDR_VAR 0 6
27252: PUSH
27253: LD_INT 1
27255: ST_TO_ADDR
// end ;
27256: LD_VAR 0 6
27260: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27261: LD_INT 0
27263: PPUSH
27264: PPUSH
27265: PPUSH
27266: PPUSH
27267: PPUSH
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
27273: PPUSH
27274: PPUSH
27275: PPUSH
27276: PPUSH
27277: PPUSH
27278: PPUSH
27279: PPUSH
27280: PPUSH
27281: PPUSH
27282: PPUSH
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
27300: PPUSH
27301: PPUSH
27302: PPUSH
27303: PPUSH
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
27319: PPUSH
27320: PPUSH
// result = [ ] ;
27321: LD_ADDR_VAR 0 7
27325: PUSH
27326: EMPTY
27327: ST_TO_ADDR
// temp_list = [ ] ;
27328: LD_ADDR_VAR 0 9
27332: PUSH
27333: EMPTY
27334: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27335: LD_VAR 0 4
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: LD_INT 3
27351: PUSH
27352: LD_INT 4
27354: PUSH
27355: LD_INT 5
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: IN
27366: NOT
27367: PUSH
27368: LD_VAR 0 1
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: IN
27383: PUSH
27384: LD_VAR 0 5
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: LD_INT 3
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: IN
27403: NOT
27404: AND
27405: OR
27406: IFFALSE 27410
// exit ;
27408: GO 45801
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27410: LD_VAR 0 1
27414: PUSH
27415: LD_INT 6
27417: PUSH
27418: LD_INT 7
27420: PUSH
27421: LD_INT 8
27423: PUSH
27424: LD_INT 13
27426: PUSH
27427: LD_INT 12
27429: PUSH
27430: LD_INT 15
27432: PUSH
27433: LD_INT 11
27435: PUSH
27436: LD_INT 14
27438: PUSH
27439: LD_INT 10
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: IN
27453: IFFALSE 27463
// btype = b_lab ;
27455: LD_ADDR_VAR 0 1
27459: PUSH
27460: LD_INT 6
27462: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27463: LD_VAR 0 6
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: IN
27482: NOT
27483: PUSH
27484: LD_VAR 0 1
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 6
27503: PUSH
27504: LD_INT 36
27506: PUSH
27507: LD_INT 4
27509: PUSH
27510: LD_INT 5
27512: PUSH
27513: LD_INT 31
27515: PUSH
27516: LD_INT 32
27518: PUSH
27519: LD_INT 33
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: IN
27535: NOT
27536: PUSH
27537: LD_VAR 0 6
27541: PUSH
27542: LD_INT 1
27544: EQUAL
27545: AND
27546: OR
27547: PUSH
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 2
27555: PUSH
27556: LD_INT 3
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: IN
27563: NOT
27564: PUSH
27565: LD_VAR 0 6
27569: PUSH
27570: LD_INT 2
27572: EQUAL
27573: AND
27574: OR
27575: IFFALSE 27585
// mode = 0 ;
27577: LD_ADDR_VAR 0 6
27581: PUSH
27582: LD_INT 0
27584: ST_TO_ADDR
// case mode of 0 :
27585: LD_VAR 0 6
27589: PUSH
27590: LD_INT 0
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27598
27596: GO 39051
27598: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27599: LD_ADDR_VAR 0 11
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 3
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27792: LD_ADDR_VAR 0 12
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 3
27949: NEG
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 3
27960: NEG
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27988: LD_ADDR_VAR 0 13
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 2
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 3
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 3
28147: NEG
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 3
28159: NEG
28160: PUSH
28161: LD_INT 3
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28187: LD_ADDR_VAR 0 14
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 2
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 3
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 3
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28383: LD_ADDR_VAR 0 15
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: NEG
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 1
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 3
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 3
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28576: LD_ADDR_VAR 0 16
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: LD_INT 3
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28769: LD_ADDR_VAR 0 17
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: LD_INT 2
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: LD_INT 2
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28999: LD_ADDR_VAR 0 18
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: LD_INT 0
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: NEG
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29229: LD_ADDR_VAR 0 19
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: LD_INT 2
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: NEG
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: LD_INT 2
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29459: LD_ADDR_VAR 0 20
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: LD_INT 2
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: LD_INT 2
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 2
29646: NEG
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29689: LD_ADDR_VAR 0 21
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 2
29876: NEG
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: LD_INT 2
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29919: LD_ADDR_VAR 0 22
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: LD_INT 2
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 2
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 2
30095: NEG
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: NEG
30119: PUSH
30120: LD_INT 2
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30149: LD_ADDR_VAR 0 23
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: LD_INT 2
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 2
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 2
30325: NEG
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: LD_INT 2
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 3
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: LD_INT 3
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30429: LD_ADDR_VAR 0 24
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: LD_INT 2
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30705: LD_ADDR_VAR 0 25
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 2
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: NEG
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: LD_INT 2
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30979: LD_ADDR_VAR 0 26
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 2
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: NEG
31179: PUSH
31180: LD_INT 2
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31255: LD_ADDR_VAR 0 27
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31535: LD_ADDR_VAR 0 28
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: LD_INT 3
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31817: LD_ADDR_VAR 0 29
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: LD_INT 2
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: LD_INT 2
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: NEG
32008: PUSH
32009: LD_INT 3
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 3
32061: NEG
32062: PUSH
32063: LD_INT 2
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32096: LD_ADDR_VAR 0 30
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: LD_INT 3
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 3
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32374: LD_ADDR_VAR 0 31
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: NEG
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32652: LD_ADDR_VAR 0 32
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: NEG
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 2
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 3
32895: NEG
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32930: LD_ADDR_VAR 0 33
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33209: LD_ADDR_VAR 0 34
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 3
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 3
33454: NEG
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33489: LD_ADDR_VAR 0 35
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33601: LD_ADDR_VAR 0 36
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33713: LD_ADDR_VAR 0 37
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33825: LD_ADDR_VAR 0 38
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 2
33916: NEG
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33937: LD_ADDR_VAR 0 39
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34049: LD_ADDR_VAR 0 40
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: NEG
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34161: LD_ADDR_VAR 0 41
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: NEG
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: LD_INT 2
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: LD_INT 3
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 3
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 3
34435: NEG
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 3
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 3
34458: NEG
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: LD_INT 3
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34511: LD_ADDR_VAR 0 42
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 3
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 3
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: NEG
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: NEG
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34861: LD_ADDR_VAR 0 43
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 2
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 3
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: NEG
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 3
35157: NEG
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 3
35168: NEG
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35209: LD_ADDR_VAR 0 44
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: NEG
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: LD_INT 3
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 3
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 3
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 3
35452: PUSH
35453: LD_INT 3
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 3
35483: NEG
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 3
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 3
35506: NEG
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 3
35518: NEG
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35559: LD_ADDR_VAR 0 45
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: NEG
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: LD_INT 3
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 3
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: LD_INT 2
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 3
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: LD_INT 3
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 3
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 3
35856: NEG
35857: PUSH
35858: LD_INT 2
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 3
35868: NEG
35869: PUSH
35870: LD_INT 3
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35909: LD_ADDR_VAR 0 46
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: LD_INT 3
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 3
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 3
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: LD_INT 3
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 3
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 2
36194: NEG
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 3
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 3
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36257: LD_ADDR_VAR 0 47
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36408: LD_ADDR_VAR 0 48
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 2
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36555: LD_ADDR_VAR 0 49
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36699: LD_ADDR_VAR 0 50
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36843: LD_ADDR_VAR 0 51
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36990: LD_ADDR_VAR 0 52
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 2
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37141: LD_ADDR_VAR 0 53
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37371: LD_ADDR_VAR 0 54
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37601: LD_ADDR_VAR 0 55
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37831: LD_ADDR_VAR 0 56
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: NEG
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38061: LD_ADDR_VAR 0 57
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: LD_INT 2
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38291: LD_ADDR_VAR 0 58
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 2
38478: NEG
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38521: LD_ADDR_VAR 0 59
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38609: LD_ADDR_VAR 0 60
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38697: LD_ADDR_VAR 0 61
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38785: LD_ADDR_VAR 0 62
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38873: LD_ADDR_VAR 0 63
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38961: LD_ADDR_VAR 0 64
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: ST_TO_ADDR
// end ; 1 :
39049: GO 44946
39051: LD_INT 1
39053: DOUBLE
39054: EQUAL
39055: IFTRUE 39059
39057: GO 41682
39059: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39060: LD_ADDR_VAR 0 11
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: LD_INT 3
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 3
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39104: LD_ADDR_VAR 0 12
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39145: LD_ADDR_VAR 0 13
39149: PUSH
39150: LD_INT 3
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39185: LD_ADDR_VAR 0 14
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39226: LD_ADDR_VAR 0 15
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 3
39244: NEG
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39270: LD_ADDR_VAR 0 16
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39316: LD_ADDR_VAR 0 17
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 3
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 3
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39360: LD_ADDR_VAR 0 18
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39401: LD_ADDR_VAR 0 19
39405: PUSH
39406: LD_INT 3
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 3
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39441: LD_ADDR_VAR 0 20
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39482: LD_ADDR_VAR 0 21
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 3
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39526: LD_ADDR_VAR 0 22
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 3
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: NEG
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39572: LD_ADDR_VAR 0 23
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: LD_INT 4
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39616: LD_ADDR_VAR 0 24
39620: PUSH
39621: LD_INT 3
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 3
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 4
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39657: LD_ADDR_VAR 0 25
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 4
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 4
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39697: LD_ADDR_VAR 0 26
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 3
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 4
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39738: LD_ADDR_VAR 0 27
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 3
39756: NEG
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 4
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39782: LD_ADDR_VAR 0 28
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: LD_INT 3
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: LD_INT 4
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 4
39813: NEG
39814: PUSH
39815: LD_INT 3
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39828: LD_ADDR_VAR 0 29
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: LD_INT 3
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: LD_INT 3
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 4
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 4
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 5
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 5
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 4
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 6
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 6
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 5
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39983: LD_ADDR_VAR 0 30
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 4
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 4
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 4
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 5
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 5
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 5
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 6
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 6
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40126: LD_ADDR_VAR 0 31
40130: PUSH
40131: LD_INT 3
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: LD_INT 3
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 4
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 4
40173: PUSH
40174: LD_INT 4
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 5
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 5
40203: PUSH
40204: LD_INT 5
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 4
40213: PUSH
40214: LD_INT 5
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 6
40223: PUSH
40224: LD_INT 5
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 6
40233: PUSH
40234: LD_INT 6
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 5
40243: PUSH
40244: LD_INT 6
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40265: LD_ADDR_VAR 0 32
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 4
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 4
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 5
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 5
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 4
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 6
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 6
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 5
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40408: LD_ADDR_VAR 0 33
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: NEG
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 3
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 4
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 4
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 4
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 5
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 5
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 5
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 6
40528: NEG
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 6
40539: NEG
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40563: LD_ADDR_VAR 0 34
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: NEG
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 3
40594: NEG
40595: PUSH
40596: LD_INT 3
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: NEG
40607: PUSH
40608: LD_INT 4
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 4
40618: NEG
40619: PUSH
40620: LD_INT 3
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 4
40630: NEG
40631: PUSH
40632: LD_INT 4
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 4
40642: NEG
40643: PUSH
40644: LD_INT 5
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 5
40654: NEG
40655: PUSH
40656: LD_INT 4
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 5
40666: NEG
40667: PUSH
40668: LD_INT 5
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 5
40678: NEG
40679: PUSH
40680: LD_INT 6
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 6
40690: NEG
40691: PUSH
40692: LD_INT 5
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 6
40702: NEG
40703: PUSH
40704: LD_INT 6
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40726: LD_ADDR_VAR 0 41
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 3
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40770: LD_ADDR_VAR 0 42
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40811: LD_ADDR_VAR 0 43
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 3
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 3
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40851: LD_ADDR_VAR 0 44
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 3
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40892: LD_ADDR_VAR 0 45
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40936: LD_ADDR_VAR 0 46
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: LD_INT 3
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 3
40967: NEG
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40982: LD_ADDR_VAR 0 47
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: LD_INT 3
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 3
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41015: LD_ADDR_VAR 0 48
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41046: LD_ADDR_VAR 0 49
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 3
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41075: LD_ADDR_VAR 0 50
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 3
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41104: LD_ADDR_VAR 0 51
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41135: LD_ADDR_VAR 0 52
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41168: LD_ADDR_VAR 0 53
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 3
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 3
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41212: LD_ADDR_VAR 0 54
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 3
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41253: LD_ADDR_VAR 0 55
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41293: LD_ADDR_VAR 0 56
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41334: LD_ADDR_VAR 0 57
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 3
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41378: LD_ADDR_VAR 0 58
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: LD_INT 3
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41424: LD_ADDR_VAR 0 59
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41468: LD_ADDR_VAR 0 60
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41509: LD_ADDR_VAR 0 61
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41549: LD_ADDR_VAR 0 62
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41590: LD_ADDR_VAR 0 63
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41634: LD_ADDR_VAR 0 64
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: ST_TO_ADDR
// end ; 2 :
41680: GO 44946
41682: LD_INT 2
41684: DOUBLE
41685: EQUAL
41686: IFTRUE 41690
41688: GO 44945
41690: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41691: LD_ADDR_VAR 0 29
41695: PUSH
41696: LD_INT 4
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 4
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 5
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 5
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 4
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 3
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 5
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 4
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 4
41821: PUSH
41822: LD_INT 4
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 4
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 4
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 4
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 4
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 4
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 5
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 5
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 4
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 3
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 5
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: NEG
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 4
42030: NEG
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 4
42041: NEG
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 4
42053: NEG
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 4
42076: NEG
42077: PUSH
42078: LD_INT 4
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 4
42088: NEG
42089: PUSH
42090: LD_INT 5
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: LD_INT 4
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 4
42124: NEG
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 5
42136: NEG
42137: PUSH
42138: LD_INT 4
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 5
42148: NEG
42149: PUSH
42150: LD_INT 5
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: NEG
42161: PUSH
42162: LD_INT 5
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 5
42172: NEG
42173: PUSH
42174: LD_INT 3
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42229: LD_ADDR_VAR 0 30
42233: PUSH
42234: LD_INT 4
42236: PUSH
42237: LD_INT 4
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 4
42246: PUSH
42247: LD_INT 3
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 5
42256: PUSH
42257: LD_INT 4
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 5
42266: PUSH
42267: LD_INT 5
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 4
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 3
42286: PUSH
42287: LD_INT 4
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: LD_INT 3
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 5
42306: PUSH
42307: LD_INT 3
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 5
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 4
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 4
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: LD_INT 4
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 4
42419: NEG
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 4
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 3
42442: NEG
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 3
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 4
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 5
42475: NEG
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 5
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 5
42498: NEG
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 3
42533: NEG
42534: PUSH
42535: LD_INT 4
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 4
42581: NEG
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 4
42593: NEG
42594: PUSH
42595: LD_INT 4
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: LD_INT 4
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 4
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 5
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 4
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 3
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 4
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 5
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: LD_INT 3
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 5
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42776: LD_ADDR_VAR 0 31
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 4
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 4
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 5
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 5
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 4
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: LD_INT 5
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 3
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 4
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 4
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 4
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 4
42978: NEG
42979: PUSH
42980: LD_INT 4
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 4
42990: NEG
42991: PUSH
42992: LD_INT 5
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: LD_INT 4
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 4
43026: NEG
43027: PUSH
43028: LD_INT 3
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 5
43038: NEG
43039: PUSH
43040: LD_INT 4
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 5
43050: NEG
43051: PUSH
43052: LD_INT 5
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: LD_INT 5
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 5
43074: NEG
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 4
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 3
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 4
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 4
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 5
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 5
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 4
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43326: LD_ADDR_VAR 0 32
43330: PUSH
43331: LD_INT 4
43333: NEG
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 4
43344: NEG
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 4
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 5
43389: NEG
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 5
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 5
43412: NEG
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: LD_INT 4
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 3
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 4
43495: NEG
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 4
43507: NEG
43508: PUSH
43509: LD_INT 4
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 4
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 4
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 4
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 5
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 4
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 3
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 4
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 5
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: LD_INT 5
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 3
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 3
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 4
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 4
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 4
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 4
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 4
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: LD_INT 4
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 5
43768: PUSH
43769: LD_INT 5
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 4
43778: PUSH
43779: LD_INT 5
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 3
43788: PUSH
43789: LD_INT 4
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 3
43798: PUSH
43799: LD_INT 3
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 5
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 5
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43873: LD_ADDR_VAR 0 33
43877: PUSH
43878: LD_INT 4
43880: NEG
43881: PUSH
43882: LD_INT 4
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 4
43892: NEG
43893: PUSH
43894: LD_INT 5
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: LD_INT 4
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 4
43928: NEG
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 5
43940: NEG
43941: PUSH
43942: LD_INT 4
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 5
43952: NEG
43953: PUSH
43954: LD_INT 5
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 3
43964: NEG
43965: PUSH
43966: LD_INT 5
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 5
43976: NEG
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 4
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 3
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 3
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 4
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: LD_INT 4
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 4
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 4
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 5
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 4
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 5
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 4
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 4
44213: PUSH
44214: LD_INT 4
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 4
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 4
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 4
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 4
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 5
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44411: LD_ADDR_VAR 0 34
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 4
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 5
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 4
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 4
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 5
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 3
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: LD_INT 5
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 3
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 3
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 4
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 4
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 4
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 4
44613: PUSH
44614: LD_INT 4
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 4
44623: PUSH
44624: LD_INT 3
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 5
44633: PUSH
44634: LD_INT 4
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 5
44643: PUSH
44644: LD_INT 5
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 4
44653: PUSH
44654: LD_INT 5
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 4
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 5
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 3
44693: PUSH
44694: LD_INT 5
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 4
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 4
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 3
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 4
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 4
44796: NEG
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 4
44807: NEG
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 3
44819: NEG
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 3
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 4
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 5
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 5
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 5
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// end ; end ;
44943: GO 44946
44945: POP
// case btype of b_depot , b_warehouse :
44946: LD_VAR 0 1
44950: PUSH
44951: LD_INT 0
44953: DOUBLE
44954: EQUAL
44955: IFTRUE 44965
44957: LD_INT 1
44959: DOUBLE
44960: EQUAL
44961: IFTRUE 44965
44963: GO 45166
44965: POP
// case nation of nation_american :
44966: LD_VAR 0 5
44970: PUSH
44971: LD_INT 1
44973: DOUBLE
44974: EQUAL
44975: IFTRUE 44979
44977: GO 45035
44979: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44980: LD_ADDR_VAR 0 9
44984: PUSH
44985: LD_VAR 0 11
44989: PUSH
44990: LD_VAR 0 12
44994: PUSH
44995: LD_VAR 0 13
44999: PUSH
45000: LD_VAR 0 14
45004: PUSH
45005: LD_VAR 0 15
45009: PUSH
45010: LD_VAR 0 16
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: PUSH
45023: LD_VAR 0 4
45027: PUSH
45028: LD_INT 1
45030: PLUS
45031: ARRAY
45032: ST_TO_ADDR
45033: GO 45164
45035: LD_INT 2
45037: DOUBLE
45038: EQUAL
45039: IFTRUE 45043
45041: GO 45099
45043: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45044: LD_ADDR_VAR 0 9
45048: PUSH
45049: LD_VAR 0 17
45053: PUSH
45054: LD_VAR 0 18
45058: PUSH
45059: LD_VAR 0 19
45063: PUSH
45064: LD_VAR 0 20
45068: PUSH
45069: LD_VAR 0 21
45073: PUSH
45074: LD_VAR 0 22
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: PUSH
45087: LD_VAR 0 4
45091: PUSH
45092: LD_INT 1
45094: PLUS
45095: ARRAY
45096: ST_TO_ADDR
45097: GO 45164
45099: LD_INT 3
45101: DOUBLE
45102: EQUAL
45103: IFTRUE 45107
45105: GO 45163
45107: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45108: LD_ADDR_VAR 0 9
45112: PUSH
45113: LD_VAR 0 23
45117: PUSH
45118: LD_VAR 0 24
45122: PUSH
45123: LD_VAR 0 25
45127: PUSH
45128: LD_VAR 0 26
45132: PUSH
45133: LD_VAR 0 27
45137: PUSH
45138: LD_VAR 0 28
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: PUSH
45151: LD_VAR 0 4
45155: PUSH
45156: LD_INT 1
45158: PLUS
45159: ARRAY
45160: ST_TO_ADDR
45161: GO 45164
45163: POP
45164: GO 45719
45166: LD_INT 2
45168: DOUBLE
45169: EQUAL
45170: IFTRUE 45180
45172: LD_INT 3
45174: DOUBLE
45175: EQUAL
45176: IFTRUE 45180
45178: GO 45236
45180: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45181: LD_ADDR_VAR 0 9
45185: PUSH
45186: LD_VAR 0 29
45190: PUSH
45191: LD_VAR 0 30
45195: PUSH
45196: LD_VAR 0 31
45200: PUSH
45201: LD_VAR 0 32
45205: PUSH
45206: LD_VAR 0 33
45210: PUSH
45211: LD_VAR 0 34
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: PUSH
45224: LD_VAR 0 4
45228: PUSH
45229: LD_INT 1
45231: PLUS
45232: ARRAY
45233: ST_TO_ADDR
45234: GO 45719
45236: LD_INT 16
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45298
45242: LD_INT 17
45244: DOUBLE
45245: EQUAL
45246: IFTRUE 45298
45248: LD_INT 18
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45298
45254: LD_INT 19
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45298
45260: LD_INT 22
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45298
45266: LD_INT 20
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45298
45272: LD_INT 21
45274: DOUBLE
45275: EQUAL
45276: IFTRUE 45298
45278: LD_INT 23
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45298
45284: LD_INT 24
45286: DOUBLE
45287: EQUAL
45288: IFTRUE 45298
45290: LD_INT 25
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45298
45296: GO 45354
45298: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45299: LD_ADDR_VAR 0 9
45303: PUSH
45304: LD_VAR 0 35
45308: PUSH
45309: LD_VAR 0 36
45313: PUSH
45314: LD_VAR 0 37
45318: PUSH
45319: LD_VAR 0 38
45323: PUSH
45324: LD_VAR 0 39
45328: PUSH
45329: LD_VAR 0 40
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: PUSH
45342: LD_VAR 0 4
45346: PUSH
45347: LD_INT 1
45349: PLUS
45350: ARRAY
45351: ST_TO_ADDR
45352: GO 45719
45354: LD_INT 6
45356: DOUBLE
45357: EQUAL
45358: IFTRUE 45410
45360: LD_INT 7
45362: DOUBLE
45363: EQUAL
45364: IFTRUE 45410
45366: LD_INT 8
45368: DOUBLE
45369: EQUAL
45370: IFTRUE 45410
45372: LD_INT 13
45374: DOUBLE
45375: EQUAL
45376: IFTRUE 45410
45378: LD_INT 12
45380: DOUBLE
45381: EQUAL
45382: IFTRUE 45410
45384: LD_INT 15
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45410
45390: LD_INT 11
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45410
45396: LD_INT 14
45398: DOUBLE
45399: EQUAL
45400: IFTRUE 45410
45402: LD_INT 10
45404: DOUBLE
45405: EQUAL
45406: IFTRUE 45410
45408: GO 45466
45410: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45411: LD_ADDR_VAR 0 9
45415: PUSH
45416: LD_VAR 0 41
45420: PUSH
45421: LD_VAR 0 42
45425: PUSH
45426: LD_VAR 0 43
45430: PUSH
45431: LD_VAR 0 44
45435: PUSH
45436: LD_VAR 0 45
45440: PUSH
45441: LD_VAR 0 46
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: PUSH
45454: LD_VAR 0 4
45458: PUSH
45459: LD_INT 1
45461: PLUS
45462: ARRAY
45463: ST_TO_ADDR
45464: GO 45719
45466: LD_INT 36
45468: DOUBLE
45469: EQUAL
45470: IFTRUE 45474
45472: GO 45530
45474: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45475: LD_ADDR_VAR 0 9
45479: PUSH
45480: LD_VAR 0 47
45484: PUSH
45485: LD_VAR 0 48
45489: PUSH
45490: LD_VAR 0 49
45494: PUSH
45495: LD_VAR 0 50
45499: PUSH
45500: LD_VAR 0 51
45504: PUSH
45505: LD_VAR 0 52
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: PUSH
45518: LD_VAR 0 4
45522: PUSH
45523: LD_INT 1
45525: PLUS
45526: ARRAY
45527: ST_TO_ADDR
45528: GO 45719
45530: LD_INT 4
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45556
45536: LD_INT 5
45538: DOUBLE
45539: EQUAL
45540: IFTRUE 45556
45542: LD_INT 34
45544: DOUBLE
45545: EQUAL
45546: IFTRUE 45556
45548: LD_INT 37
45550: DOUBLE
45551: EQUAL
45552: IFTRUE 45556
45554: GO 45612
45556: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45557: LD_ADDR_VAR 0 9
45561: PUSH
45562: LD_VAR 0 53
45566: PUSH
45567: LD_VAR 0 54
45571: PUSH
45572: LD_VAR 0 55
45576: PUSH
45577: LD_VAR 0 56
45581: PUSH
45582: LD_VAR 0 57
45586: PUSH
45587: LD_VAR 0 58
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: PUSH
45600: LD_VAR 0 4
45604: PUSH
45605: LD_INT 1
45607: PLUS
45608: ARRAY
45609: ST_TO_ADDR
45610: GO 45719
45612: LD_INT 31
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45662
45618: LD_INT 32
45620: DOUBLE
45621: EQUAL
45622: IFTRUE 45662
45624: LD_INT 33
45626: DOUBLE
45627: EQUAL
45628: IFTRUE 45662
45630: LD_INT 27
45632: DOUBLE
45633: EQUAL
45634: IFTRUE 45662
45636: LD_INT 26
45638: DOUBLE
45639: EQUAL
45640: IFTRUE 45662
45642: LD_INT 28
45644: DOUBLE
45645: EQUAL
45646: IFTRUE 45662
45648: LD_INT 29
45650: DOUBLE
45651: EQUAL
45652: IFTRUE 45662
45654: LD_INT 30
45656: DOUBLE
45657: EQUAL
45658: IFTRUE 45662
45660: GO 45718
45662: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45663: LD_ADDR_VAR 0 9
45667: PUSH
45668: LD_VAR 0 59
45672: PUSH
45673: LD_VAR 0 60
45677: PUSH
45678: LD_VAR 0 61
45682: PUSH
45683: LD_VAR 0 62
45687: PUSH
45688: LD_VAR 0 63
45692: PUSH
45693: LD_VAR 0 64
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: PUSH
45706: LD_VAR 0 4
45710: PUSH
45711: LD_INT 1
45713: PLUS
45714: ARRAY
45715: ST_TO_ADDR
45716: GO 45719
45718: POP
// temp_list2 = [ ] ;
45719: LD_ADDR_VAR 0 10
45723: PUSH
45724: EMPTY
45725: ST_TO_ADDR
// for i in temp_list do
45726: LD_ADDR_VAR 0 8
45730: PUSH
45731: LD_VAR 0 9
45735: PUSH
45736: FOR_IN
45737: IFFALSE 45789
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45739: LD_ADDR_VAR 0 10
45743: PUSH
45744: LD_VAR 0 10
45748: PUSH
45749: LD_VAR 0 8
45753: PUSH
45754: LD_INT 1
45756: ARRAY
45757: PUSH
45758: LD_VAR 0 2
45762: PLUS
45763: PUSH
45764: LD_VAR 0 8
45768: PUSH
45769: LD_INT 2
45771: ARRAY
45772: PUSH
45773: LD_VAR 0 3
45777: PLUS
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: ADD
45786: ST_TO_ADDR
45787: GO 45736
45789: POP
45790: POP
// result = temp_list2 ;
45791: LD_ADDR_VAR 0 7
45795: PUSH
45796: LD_VAR 0 10
45800: ST_TO_ADDR
// end ;
45801: LD_VAR 0 7
45805: RET
// export function EnemyInRange ( unit , dist ) ; begin
45806: LD_INT 0
45808: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45809: LD_ADDR_VAR 0 3
45813: PUSH
45814: LD_VAR 0 1
45818: PPUSH
45819: CALL_OW 255
45823: PPUSH
45824: LD_VAR 0 1
45828: PPUSH
45829: CALL_OW 250
45833: PPUSH
45834: LD_VAR 0 1
45838: PPUSH
45839: CALL_OW 251
45843: PPUSH
45844: LD_VAR 0 2
45848: PPUSH
45849: CALL 19202 0 4
45853: PUSH
45854: LD_INT 4
45856: ARRAY
45857: ST_TO_ADDR
// end ;
45858: LD_VAR 0 3
45862: RET
// export function PlayerSeeMe ( unit ) ; begin
45863: LD_INT 0
45865: PPUSH
// result := See ( your_side , unit ) ;
45866: LD_ADDR_VAR 0 2
45870: PUSH
45871: LD_OWVAR 2
45875: PPUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 292
45885: ST_TO_ADDR
// end ;
45886: LD_VAR 0 2
45890: RET
// export function ReverseDir ( unit ) ; begin
45891: LD_INT 0
45893: PPUSH
// if not unit then
45894: LD_VAR 0 1
45898: NOT
45899: IFFALSE 45903
// exit ;
45901: GO 45926
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45903: LD_ADDR_VAR 0 2
45907: PUSH
45908: LD_VAR 0 1
45912: PPUSH
45913: CALL_OW 254
45917: PUSH
45918: LD_INT 3
45920: PLUS
45921: PUSH
45922: LD_INT 6
45924: MOD
45925: ST_TO_ADDR
// end ;
45926: LD_VAR 0 2
45930: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45931: LD_INT 0
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
// if not hexes then
45938: LD_VAR 0 2
45942: NOT
45943: IFFALSE 45947
// exit ;
45945: GO 46095
// dist := 9999 ;
45947: LD_ADDR_VAR 0 5
45951: PUSH
45952: LD_INT 9999
45954: ST_TO_ADDR
// for i = 1 to hexes do
45955: LD_ADDR_VAR 0 4
45959: PUSH
45960: DOUBLE
45961: LD_INT 1
45963: DEC
45964: ST_TO_ADDR
45965: LD_VAR 0 2
45969: PUSH
45970: FOR_TO
45971: IFFALSE 46083
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45973: LD_VAR 0 1
45977: PPUSH
45978: LD_VAR 0 2
45982: PUSH
45983: LD_VAR 0 4
45987: ARRAY
45988: PUSH
45989: LD_INT 1
45991: ARRAY
45992: PPUSH
45993: LD_VAR 0 2
45997: PUSH
45998: LD_VAR 0 4
46002: ARRAY
46003: PUSH
46004: LD_INT 2
46006: ARRAY
46007: PPUSH
46008: CALL_OW 297
46012: PUSH
46013: LD_VAR 0 5
46017: LESS
46018: IFFALSE 46081
// begin hex := hexes [ i ] ;
46020: LD_ADDR_VAR 0 7
46024: PUSH
46025: LD_VAR 0 2
46029: PUSH
46030: LD_VAR 0 4
46034: ARRAY
46035: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_VAR 0 1
46045: PPUSH
46046: LD_VAR 0 2
46050: PUSH
46051: LD_VAR 0 4
46055: ARRAY
46056: PUSH
46057: LD_INT 1
46059: ARRAY
46060: PPUSH
46061: LD_VAR 0 2
46065: PUSH
46066: LD_VAR 0 4
46070: ARRAY
46071: PUSH
46072: LD_INT 2
46074: ARRAY
46075: PPUSH
46076: CALL_OW 297
46080: ST_TO_ADDR
// end ; end ;
46081: GO 45970
46083: POP
46084: POP
// result := hex ;
46085: LD_ADDR_VAR 0 3
46089: PUSH
46090: LD_VAR 0 7
46094: ST_TO_ADDR
// end ;
46095: LD_VAR 0 3
46099: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46100: LD_INT 0
46102: PPUSH
46103: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46104: LD_VAR 0 1
46108: NOT
46109: PUSH
46110: LD_VAR 0 1
46114: PUSH
46115: LD_INT 21
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 23
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PPUSH
46139: CALL_OW 69
46143: IN
46144: NOT
46145: OR
46146: IFFALSE 46150
// exit ;
46148: GO 46197
// for i = 1 to 3 do
46150: LD_ADDR_VAR 0 3
46154: PUSH
46155: DOUBLE
46156: LD_INT 1
46158: DEC
46159: ST_TO_ADDR
46160: LD_INT 3
46162: PUSH
46163: FOR_TO
46164: IFFALSE 46195
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46166: LD_VAR 0 1
46170: PPUSH
46171: CALL_OW 250
46175: PPUSH
46176: LD_VAR 0 1
46180: PPUSH
46181: CALL_OW 251
46185: PPUSH
46186: LD_INT 1
46188: PPUSH
46189: CALL_OW 453
46193: GO 46163
46195: POP
46196: POP
// end ;
46197: LD_VAR 0 2
46201: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46202: LD_INT 0
46204: PPUSH
46205: PPUSH
46206: PPUSH
46207: PPUSH
46208: PPUSH
46209: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46210: LD_VAR 0 1
46214: NOT
46215: PUSH
46216: LD_VAR 0 2
46220: NOT
46221: OR
46222: PUSH
46223: LD_VAR 0 1
46227: PPUSH
46228: CALL_OW 314
46232: OR
46233: IFFALSE 46237
// exit ;
46235: GO 46678
// x := GetX ( enemy_unit ) ;
46237: LD_ADDR_VAR 0 7
46241: PUSH
46242: LD_VAR 0 2
46246: PPUSH
46247: CALL_OW 250
46251: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46252: LD_ADDR_VAR 0 8
46256: PUSH
46257: LD_VAR 0 2
46261: PPUSH
46262: CALL_OW 251
46266: ST_TO_ADDR
// if not x or not y then
46267: LD_VAR 0 7
46271: NOT
46272: PUSH
46273: LD_VAR 0 8
46277: NOT
46278: OR
46279: IFFALSE 46283
// exit ;
46281: GO 46678
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46283: LD_ADDR_VAR 0 6
46287: PUSH
46288: LD_VAR 0 7
46292: PPUSH
46293: LD_INT 0
46295: PPUSH
46296: LD_INT 4
46298: PPUSH
46299: CALL_OW 272
46303: PUSH
46304: LD_VAR 0 8
46308: PPUSH
46309: LD_INT 0
46311: PPUSH
46312: LD_INT 4
46314: PPUSH
46315: CALL_OW 273
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_VAR 0 7
46328: PPUSH
46329: LD_INT 1
46331: PPUSH
46332: LD_INT 4
46334: PPUSH
46335: CALL_OW 272
46339: PUSH
46340: LD_VAR 0 8
46344: PPUSH
46345: LD_INT 1
46347: PPUSH
46348: LD_INT 4
46350: PPUSH
46351: CALL_OW 273
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_VAR 0 7
46364: PPUSH
46365: LD_INT 2
46367: PPUSH
46368: LD_INT 4
46370: PPUSH
46371: CALL_OW 272
46375: PUSH
46376: LD_VAR 0 8
46380: PPUSH
46381: LD_INT 2
46383: PPUSH
46384: LD_INT 4
46386: PPUSH
46387: CALL_OW 273
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_VAR 0 7
46400: PPUSH
46401: LD_INT 3
46403: PPUSH
46404: LD_INT 4
46406: PPUSH
46407: CALL_OW 272
46411: PUSH
46412: LD_VAR 0 8
46416: PPUSH
46417: LD_INT 3
46419: PPUSH
46420: LD_INT 4
46422: PPUSH
46423: CALL_OW 273
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_VAR 0 7
46436: PPUSH
46437: LD_INT 4
46439: PPUSH
46440: LD_INT 4
46442: PPUSH
46443: CALL_OW 272
46447: PUSH
46448: LD_VAR 0 8
46452: PPUSH
46453: LD_INT 4
46455: PPUSH
46456: LD_INT 4
46458: PPUSH
46459: CALL_OW 273
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_VAR 0 7
46472: PPUSH
46473: LD_INT 5
46475: PPUSH
46476: LD_INT 4
46478: PPUSH
46479: CALL_OW 272
46483: PUSH
46484: LD_VAR 0 8
46488: PPUSH
46489: LD_INT 5
46491: PPUSH
46492: LD_INT 4
46494: PPUSH
46495: CALL_OW 273
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: ST_TO_ADDR
// for i = tmp downto 1 do
46512: LD_ADDR_VAR 0 4
46516: PUSH
46517: DOUBLE
46518: LD_VAR 0 6
46522: INC
46523: ST_TO_ADDR
46524: LD_INT 1
46526: PUSH
46527: FOR_DOWNTO
46528: IFFALSE 46629
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46530: LD_VAR 0 6
46534: PUSH
46535: LD_VAR 0 4
46539: ARRAY
46540: PUSH
46541: LD_INT 1
46543: ARRAY
46544: PPUSH
46545: LD_VAR 0 6
46549: PUSH
46550: LD_VAR 0 4
46554: ARRAY
46555: PUSH
46556: LD_INT 2
46558: ARRAY
46559: PPUSH
46560: CALL_OW 488
46564: NOT
46565: PUSH
46566: LD_VAR 0 6
46570: PUSH
46571: LD_VAR 0 4
46575: ARRAY
46576: PUSH
46577: LD_INT 1
46579: ARRAY
46580: PPUSH
46581: LD_VAR 0 6
46585: PUSH
46586: LD_VAR 0 4
46590: ARRAY
46591: PUSH
46592: LD_INT 2
46594: ARRAY
46595: PPUSH
46596: CALL_OW 428
46600: PUSH
46601: LD_INT 0
46603: NONEQUAL
46604: OR
46605: IFFALSE 46627
// tmp := Delete ( tmp , i ) ;
46607: LD_ADDR_VAR 0 6
46611: PUSH
46612: LD_VAR 0 6
46616: PPUSH
46617: LD_VAR 0 4
46621: PPUSH
46622: CALL_OW 3
46626: ST_TO_ADDR
46627: GO 46527
46629: POP
46630: POP
// j := GetClosestHex ( unit , tmp ) ;
46631: LD_ADDR_VAR 0 5
46635: PUSH
46636: LD_VAR 0 1
46640: PPUSH
46641: LD_VAR 0 6
46645: PPUSH
46646: CALL 45931 0 2
46650: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46651: LD_VAR 0 1
46655: PPUSH
46656: LD_VAR 0 5
46660: PUSH
46661: LD_INT 1
46663: ARRAY
46664: PPUSH
46665: LD_VAR 0 5
46669: PUSH
46670: LD_INT 2
46672: ARRAY
46673: PPUSH
46674: CALL_OW 111
// end ;
46678: LD_VAR 0 3
46682: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46683: LD_INT 0
46685: PPUSH
46686: PPUSH
46687: PPUSH
// uc_side = 0 ;
46688: LD_ADDR_OWVAR 20
46692: PUSH
46693: LD_INT 0
46695: ST_TO_ADDR
// uc_nation = 0 ;
46696: LD_ADDR_OWVAR 21
46700: PUSH
46701: LD_INT 0
46703: ST_TO_ADDR
// InitHc_All ( ) ;
46704: CALL_OW 584
// InitVc ;
46708: CALL_OW 20
// if mastodonts then
46712: LD_VAR 0 6
46716: IFFALSE 46783
// for i = 1 to mastodonts do
46718: LD_ADDR_VAR 0 11
46722: PUSH
46723: DOUBLE
46724: LD_INT 1
46726: DEC
46727: ST_TO_ADDR
46728: LD_VAR 0 6
46732: PUSH
46733: FOR_TO
46734: IFFALSE 46781
// begin vc_chassis := 31 ;
46736: LD_ADDR_OWVAR 37
46740: PUSH
46741: LD_INT 31
46743: ST_TO_ADDR
// vc_control := control_rider ;
46744: LD_ADDR_OWVAR 38
46748: PUSH
46749: LD_INT 4
46751: ST_TO_ADDR
// animal := CreateVehicle ;
46752: LD_ADDR_VAR 0 12
46756: PUSH
46757: CALL_OW 45
46761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46762: LD_VAR 0 12
46766: PPUSH
46767: LD_VAR 0 8
46771: PPUSH
46772: LD_INT 0
46774: PPUSH
46775: CALL 48971 0 3
// end ;
46779: GO 46733
46781: POP
46782: POP
// if horses then
46783: LD_VAR 0 5
46787: IFFALSE 46854
// for i = 1 to horses do
46789: LD_ADDR_VAR 0 11
46793: PUSH
46794: DOUBLE
46795: LD_INT 1
46797: DEC
46798: ST_TO_ADDR
46799: LD_VAR 0 5
46803: PUSH
46804: FOR_TO
46805: IFFALSE 46852
// begin hc_class := 21 ;
46807: LD_ADDR_OWVAR 28
46811: PUSH
46812: LD_INT 21
46814: ST_TO_ADDR
// hc_gallery :=  ;
46815: LD_ADDR_OWVAR 33
46819: PUSH
46820: LD_STRING 
46822: ST_TO_ADDR
// animal := CreateHuman ;
46823: LD_ADDR_VAR 0 12
46827: PUSH
46828: CALL_OW 44
46832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46833: LD_VAR 0 12
46837: PPUSH
46838: LD_VAR 0 8
46842: PPUSH
46843: LD_INT 0
46845: PPUSH
46846: CALL 48971 0 3
// end ;
46850: GO 46804
46852: POP
46853: POP
// if birds then
46854: LD_VAR 0 1
46858: IFFALSE 46925
// for i = 1 to birds do
46860: LD_ADDR_VAR 0 11
46864: PUSH
46865: DOUBLE
46866: LD_INT 1
46868: DEC
46869: ST_TO_ADDR
46870: LD_VAR 0 1
46874: PUSH
46875: FOR_TO
46876: IFFALSE 46923
// begin hc_class = 18 ;
46878: LD_ADDR_OWVAR 28
46882: PUSH
46883: LD_INT 18
46885: ST_TO_ADDR
// hc_gallery =  ;
46886: LD_ADDR_OWVAR 33
46890: PUSH
46891: LD_STRING 
46893: ST_TO_ADDR
// animal := CreateHuman ;
46894: LD_ADDR_VAR 0 12
46898: PUSH
46899: CALL_OW 44
46903: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46904: LD_VAR 0 12
46908: PPUSH
46909: LD_VAR 0 8
46913: PPUSH
46914: LD_INT 0
46916: PPUSH
46917: CALL 48971 0 3
// end ;
46921: GO 46875
46923: POP
46924: POP
// if tigers then
46925: LD_VAR 0 2
46929: IFFALSE 47013
// for i = 1 to tigers do
46931: LD_ADDR_VAR 0 11
46935: PUSH
46936: DOUBLE
46937: LD_INT 1
46939: DEC
46940: ST_TO_ADDR
46941: LD_VAR 0 2
46945: PUSH
46946: FOR_TO
46947: IFFALSE 47011
// begin hc_class = class_tiger ;
46949: LD_ADDR_OWVAR 28
46953: PUSH
46954: LD_INT 14
46956: ST_TO_ADDR
// hc_gallery =  ;
46957: LD_ADDR_OWVAR 33
46961: PUSH
46962: LD_STRING 
46964: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46965: LD_ADDR_OWVAR 35
46969: PUSH
46970: LD_INT 7
46972: NEG
46973: PPUSH
46974: LD_INT 7
46976: PPUSH
46977: CALL_OW 12
46981: ST_TO_ADDR
// animal := CreateHuman ;
46982: LD_ADDR_VAR 0 12
46986: PUSH
46987: CALL_OW 44
46991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46992: LD_VAR 0 12
46996: PPUSH
46997: LD_VAR 0 8
47001: PPUSH
47002: LD_INT 0
47004: PPUSH
47005: CALL 48971 0 3
// end ;
47009: GO 46946
47011: POP
47012: POP
// if apemans then
47013: LD_VAR 0 3
47017: IFFALSE 47140
// for i = 1 to apemans do
47019: LD_ADDR_VAR 0 11
47023: PUSH
47024: DOUBLE
47025: LD_INT 1
47027: DEC
47028: ST_TO_ADDR
47029: LD_VAR 0 3
47033: PUSH
47034: FOR_TO
47035: IFFALSE 47138
// begin hc_class = class_apeman ;
47037: LD_ADDR_OWVAR 28
47041: PUSH
47042: LD_INT 12
47044: ST_TO_ADDR
// hc_gallery =  ;
47045: LD_ADDR_OWVAR 33
47049: PUSH
47050: LD_STRING 
47052: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47053: LD_ADDR_OWVAR 35
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PPUSH
47062: LD_INT 2
47064: PPUSH
47065: CALL_OW 12
47069: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47070: LD_ADDR_OWVAR 31
47074: PUSH
47075: LD_INT 1
47077: PPUSH
47078: LD_INT 3
47080: PPUSH
47081: CALL_OW 12
47085: PUSH
47086: LD_INT 1
47088: PPUSH
47089: LD_INT 3
47091: PPUSH
47092: CALL_OW 12
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// animal := CreateHuman ;
47109: LD_ADDR_VAR 0 12
47113: PUSH
47114: CALL_OW 44
47118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47119: LD_VAR 0 12
47123: PPUSH
47124: LD_VAR 0 8
47128: PPUSH
47129: LD_INT 0
47131: PPUSH
47132: CALL 48971 0 3
// end ;
47136: GO 47034
47138: POP
47139: POP
// if enchidnas then
47140: LD_VAR 0 4
47144: IFFALSE 47211
// for i = 1 to enchidnas do
47146: LD_ADDR_VAR 0 11
47150: PUSH
47151: DOUBLE
47152: LD_INT 1
47154: DEC
47155: ST_TO_ADDR
47156: LD_VAR 0 4
47160: PUSH
47161: FOR_TO
47162: IFFALSE 47209
// begin hc_class = 13 ;
47164: LD_ADDR_OWVAR 28
47168: PUSH
47169: LD_INT 13
47171: ST_TO_ADDR
// hc_gallery =  ;
47172: LD_ADDR_OWVAR 33
47176: PUSH
47177: LD_STRING 
47179: ST_TO_ADDR
// animal := CreateHuman ;
47180: LD_ADDR_VAR 0 12
47184: PUSH
47185: CALL_OW 44
47189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47190: LD_VAR 0 12
47194: PPUSH
47195: LD_VAR 0 8
47199: PPUSH
47200: LD_INT 0
47202: PPUSH
47203: CALL 48971 0 3
// end ;
47207: GO 47161
47209: POP
47210: POP
// if fishes then
47211: LD_VAR 0 7
47215: IFFALSE 47282
// for i = 1 to fishes do
47217: LD_ADDR_VAR 0 11
47221: PUSH
47222: DOUBLE
47223: LD_INT 1
47225: DEC
47226: ST_TO_ADDR
47227: LD_VAR 0 7
47231: PUSH
47232: FOR_TO
47233: IFFALSE 47280
// begin hc_class = 20 ;
47235: LD_ADDR_OWVAR 28
47239: PUSH
47240: LD_INT 20
47242: ST_TO_ADDR
// hc_gallery =  ;
47243: LD_ADDR_OWVAR 33
47247: PUSH
47248: LD_STRING 
47250: ST_TO_ADDR
// animal := CreateHuman ;
47251: LD_ADDR_VAR 0 12
47255: PUSH
47256: CALL_OW 44
47260: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47261: LD_VAR 0 12
47265: PPUSH
47266: LD_VAR 0 9
47270: PPUSH
47271: LD_INT 0
47273: PPUSH
47274: CALL 48971 0 3
// end ;
47278: GO 47232
47280: POP
47281: POP
// end ;
47282: LD_VAR 0 10
47286: RET
// export function WantHeal ( sci , unit ) ; begin
47287: LD_INT 0
47289: PPUSH
// if GetTaskList ( sci ) > 0 then
47290: LD_VAR 0 1
47294: PPUSH
47295: CALL_OW 437
47299: PUSH
47300: LD_INT 0
47302: GREATER
47303: IFFALSE 47373
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47305: LD_VAR 0 1
47309: PPUSH
47310: CALL_OW 437
47314: PUSH
47315: LD_INT 1
47317: ARRAY
47318: PUSH
47319: LD_INT 1
47321: ARRAY
47322: PUSH
47323: LD_STRING l
47325: EQUAL
47326: PUSH
47327: LD_VAR 0 1
47331: PPUSH
47332: CALL_OW 437
47336: PUSH
47337: LD_INT 1
47339: ARRAY
47340: PUSH
47341: LD_INT 4
47343: ARRAY
47344: PUSH
47345: LD_VAR 0 2
47349: EQUAL
47350: AND
47351: IFFALSE 47363
// result := true else
47353: LD_ADDR_VAR 0 3
47357: PUSH
47358: LD_INT 1
47360: ST_TO_ADDR
47361: GO 47371
// result := false ;
47363: LD_ADDR_VAR 0 3
47367: PUSH
47368: LD_INT 0
47370: ST_TO_ADDR
// end else
47371: GO 47381
// result := false ;
47373: LD_ADDR_VAR 0 3
47377: PUSH
47378: LD_INT 0
47380: ST_TO_ADDR
// end ;
47381: LD_VAR 0 3
47385: RET
// export function HealTarget ( sci ) ; begin
47386: LD_INT 0
47388: PPUSH
// if not sci then
47389: LD_VAR 0 1
47393: NOT
47394: IFFALSE 47398
// exit ;
47396: GO 47463
// result := 0 ;
47398: LD_ADDR_VAR 0 2
47402: PUSH
47403: LD_INT 0
47405: ST_TO_ADDR
// if GetTaskList ( sci ) then
47406: LD_VAR 0 1
47410: PPUSH
47411: CALL_OW 437
47415: IFFALSE 47463
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47417: LD_VAR 0 1
47421: PPUSH
47422: CALL_OW 437
47426: PUSH
47427: LD_INT 1
47429: ARRAY
47430: PUSH
47431: LD_INT 1
47433: ARRAY
47434: PUSH
47435: LD_STRING l
47437: EQUAL
47438: IFFALSE 47463
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47440: LD_ADDR_VAR 0 2
47444: PUSH
47445: LD_VAR 0 1
47449: PPUSH
47450: CALL_OW 437
47454: PUSH
47455: LD_INT 1
47457: ARRAY
47458: PUSH
47459: LD_INT 4
47461: ARRAY
47462: ST_TO_ADDR
// end ;
47463: LD_VAR 0 2
47467: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47468: LD_INT 0
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
// if not base_units then
47474: LD_VAR 0 1
47478: NOT
47479: IFFALSE 47483
// exit ;
47481: GO 47570
// result := false ;
47483: LD_ADDR_VAR 0 2
47487: PUSH
47488: LD_INT 0
47490: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47491: LD_ADDR_VAR 0 5
47495: PUSH
47496: LD_VAR 0 1
47500: PPUSH
47501: LD_INT 21
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PPUSH
47511: CALL_OW 72
47515: ST_TO_ADDR
// if not tmp then
47516: LD_VAR 0 5
47520: NOT
47521: IFFALSE 47525
// exit ;
47523: GO 47570
// for i in tmp do
47525: LD_ADDR_VAR 0 3
47529: PUSH
47530: LD_VAR 0 5
47534: PUSH
47535: FOR_IN
47536: IFFALSE 47568
// begin result := EnemyInRange ( i , 22 ) ;
47538: LD_ADDR_VAR 0 2
47542: PUSH
47543: LD_VAR 0 3
47547: PPUSH
47548: LD_INT 22
47550: PPUSH
47551: CALL 45806 0 2
47555: ST_TO_ADDR
// if result then
47556: LD_VAR 0 2
47560: IFFALSE 47566
// exit ;
47562: POP
47563: POP
47564: GO 47570
// end ;
47566: GO 47535
47568: POP
47569: POP
// end ;
47570: LD_VAR 0 2
47574: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
47575: LD_INT 0
47577: PPUSH
47578: PPUSH
// if not units then
47579: LD_VAR 0 1
47583: NOT
47584: IFFALSE 47588
// exit ;
47586: GO 47658
// result := [ ] ;
47588: LD_ADDR_VAR 0 3
47592: PUSH
47593: EMPTY
47594: ST_TO_ADDR
// for i in units do
47595: LD_ADDR_VAR 0 4
47599: PUSH
47600: LD_VAR 0 1
47604: PUSH
47605: FOR_IN
47606: IFFALSE 47656
// if GetTag ( i ) = tag then
47608: LD_VAR 0 4
47612: PPUSH
47613: CALL_OW 110
47617: PUSH
47618: LD_VAR 0 2
47622: EQUAL
47623: IFFALSE 47654
// result := Replace ( result , result + 1 , i ) ;
47625: LD_ADDR_VAR 0 3
47629: PUSH
47630: LD_VAR 0 3
47634: PPUSH
47635: LD_VAR 0 3
47639: PUSH
47640: LD_INT 1
47642: PLUS
47643: PPUSH
47644: LD_VAR 0 4
47648: PPUSH
47649: CALL_OW 1
47653: ST_TO_ADDR
47654: GO 47605
47656: POP
47657: POP
// end ;
47658: LD_VAR 0 3
47662: RET
// export function IsDriver ( un ) ; begin
47663: LD_INT 0
47665: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47666: LD_ADDR_VAR 0 2
47670: PUSH
47671: LD_VAR 0 1
47675: PUSH
47676: LD_INT 55
47678: PUSH
47679: EMPTY
47680: LIST
47681: PPUSH
47682: CALL_OW 69
47686: IN
47687: ST_TO_ADDR
// end ;
47688: LD_VAR 0 2
47692: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47693: LD_INT 0
47695: PPUSH
47696: PPUSH
// list := [ ] ;
47697: LD_ADDR_VAR 0 5
47701: PUSH
47702: EMPTY
47703: ST_TO_ADDR
// case d of 0 :
47704: LD_VAR 0 3
47708: PUSH
47709: LD_INT 0
47711: DOUBLE
47712: EQUAL
47713: IFTRUE 47717
47715: GO 47850
47717: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47718: LD_ADDR_VAR 0 5
47722: PUSH
47723: LD_VAR 0 1
47727: PUSH
47728: LD_INT 4
47730: MINUS
47731: PUSH
47732: LD_VAR 0 2
47736: PUSH
47737: LD_INT 4
47739: MINUS
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: LD_VAR 0 1
47753: PUSH
47754: LD_INT 3
47756: MINUS
47757: PUSH
47758: LD_VAR 0 2
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: PUSH
47771: LD_VAR 0 1
47775: PUSH
47776: LD_INT 4
47778: PLUS
47779: PUSH
47780: LD_VAR 0 2
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: LIST
47792: PUSH
47793: LD_VAR 0 1
47797: PUSH
47798: LD_INT 3
47800: PLUS
47801: PUSH
47802: LD_VAR 0 2
47806: PUSH
47807: LD_INT 3
47809: PLUS
47810: PUSH
47811: LD_INT 5
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: PUSH
47819: LD_VAR 0 1
47823: PUSH
47824: LD_VAR 0 2
47828: PUSH
47829: LD_INT 4
47831: PLUS
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// end ; 1 :
47848: GO 48548
47850: LD_INT 1
47852: DOUBLE
47853: EQUAL
47854: IFTRUE 47858
47856: GO 47991
47858: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47859: LD_ADDR_VAR 0 5
47863: PUSH
47864: LD_VAR 0 1
47868: PUSH
47869: LD_VAR 0 2
47873: PUSH
47874: LD_INT 4
47876: MINUS
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: PUSH
47886: LD_VAR 0 1
47890: PUSH
47891: LD_INT 3
47893: MINUS
47894: PUSH
47895: LD_VAR 0 2
47899: PUSH
47900: LD_INT 3
47902: MINUS
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: PUSH
47912: LD_VAR 0 1
47916: PUSH
47917: LD_INT 4
47919: MINUS
47920: PUSH
47921: LD_VAR 0 2
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: PUSH
47934: LD_VAR 0 1
47938: PUSH
47939: LD_VAR 0 2
47943: PUSH
47944: LD_INT 3
47946: PLUS
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: LIST
47955: PUSH
47956: LD_VAR 0 1
47960: PUSH
47961: LD_INT 4
47963: PLUS
47964: PUSH
47965: LD_VAR 0 2
47969: PUSH
47970: LD_INT 4
47972: PLUS
47973: PUSH
47974: LD_INT 5
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: ST_TO_ADDR
// end ; 2 :
47989: GO 48548
47991: LD_INT 2
47993: DOUBLE
47994: EQUAL
47995: IFTRUE 47999
47997: GO 48128
47999: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48000: LD_ADDR_VAR 0 5
48004: PUSH
48005: LD_VAR 0 1
48009: PUSH
48010: LD_VAR 0 2
48014: PUSH
48015: LD_INT 3
48017: MINUS
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: PUSH
48027: LD_VAR 0 1
48031: PUSH
48032: LD_INT 4
48034: PLUS
48035: PUSH
48036: LD_VAR 0 2
48040: PUSH
48041: LD_INT 4
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: PUSH
48049: LD_VAR 0 1
48053: PUSH
48054: LD_VAR 0 2
48058: PUSH
48059: LD_INT 4
48061: PLUS
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: PUSH
48071: LD_VAR 0 1
48075: PUSH
48076: LD_INT 3
48078: MINUS
48079: PUSH
48080: LD_VAR 0 2
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: PUSH
48093: LD_VAR 0 1
48097: PUSH
48098: LD_INT 4
48100: MINUS
48101: PUSH
48102: LD_VAR 0 2
48106: PUSH
48107: LD_INT 4
48109: MINUS
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// end ; 3 :
48126: GO 48548
48128: LD_INT 3
48130: DOUBLE
48131: EQUAL
48132: IFTRUE 48136
48134: GO 48269
48136: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48137: LD_ADDR_VAR 0 5
48141: PUSH
48142: LD_VAR 0 1
48146: PUSH
48147: LD_INT 3
48149: PLUS
48150: PUSH
48151: LD_VAR 0 2
48155: PUSH
48156: LD_INT 4
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: PUSH
48164: LD_VAR 0 1
48168: PUSH
48169: LD_INT 4
48171: PLUS
48172: PUSH
48173: LD_VAR 0 2
48177: PUSH
48178: LD_INT 4
48180: PLUS
48181: PUSH
48182: LD_INT 5
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: PUSH
48190: LD_VAR 0 1
48194: PUSH
48195: LD_INT 4
48197: MINUS
48198: PUSH
48199: LD_VAR 0 2
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: PUSH
48212: LD_VAR 0 1
48216: PUSH
48217: LD_VAR 0 2
48221: PUSH
48222: LD_INT 4
48224: MINUS
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: PUSH
48234: LD_VAR 0 1
48238: PUSH
48239: LD_INT 3
48241: MINUS
48242: PUSH
48243: LD_VAR 0 2
48247: PUSH
48248: LD_INT 3
48250: MINUS
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// end ; 4 :
48267: GO 48548
48269: LD_INT 4
48271: DOUBLE
48272: EQUAL
48273: IFTRUE 48277
48275: GO 48410
48277: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48278: LD_ADDR_VAR 0 5
48282: PUSH
48283: LD_VAR 0 1
48287: PUSH
48288: LD_VAR 0 2
48292: PUSH
48293: LD_INT 4
48295: PLUS
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: PUSH
48305: LD_VAR 0 1
48309: PUSH
48310: LD_INT 3
48312: PLUS
48313: PUSH
48314: LD_VAR 0 2
48318: PUSH
48319: LD_INT 3
48321: PLUS
48322: PUSH
48323: LD_INT 5
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: PUSH
48331: LD_VAR 0 1
48335: PUSH
48336: LD_INT 4
48338: PLUS
48339: PUSH
48340: LD_VAR 0 2
48344: PUSH
48345: LD_INT 4
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: PUSH
48353: LD_VAR 0 1
48357: PUSH
48358: LD_VAR 0 2
48362: PUSH
48363: LD_INT 3
48365: MINUS
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: PUSH
48375: LD_VAR 0 1
48379: PUSH
48380: LD_INT 4
48382: MINUS
48383: PUSH
48384: LD_VAR 0 2
48388: PUSH
48389: LD_INT 4
48391: MINUS
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// end ; 5 :
48408: GO 48548
48410: LD_INT 5
48412: DOUBLE
48413: EQUAL
48414: IFTRUE 48418
48416: GO 48547
48418: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48419: LD_ADDR_VAR 0 5
48423: PUSH
48424: LD_VAR 0 1
48428: PUSH
48429: LD_INT 4
48431: MINUS
48432: PUSH
48433: LD_VAR 0 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: PUSH
48446: LD_VAR 0 1
48450: PUSH
48451: LD_VAR 0 2
48455: PUSH
48456: LD_INT 4
48458: MINUS
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: PUSH
48468: LD_VAR 0 1
48472: PUSH
48473: LD_INT 4
48475: PLUS
48476: PUSH
48477: LD_VAR 0 2
48481: PUSH
48482: LD_INT 4
48484: PLUS
48485: PUSH
48486: LD_INT 5
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: LD_VAR 0 1
48498: PUSH
48499: LD_INT 3
48501: PLUS
48502: PUSH
48503: LD_VAR 0 2
48507: PUSH
48508: LD_INT 4
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: PUSH
48516: LD_VAR 0 1
48520: PUSH
48521: LD_VAR 0 2
48525: PUSH
48526: LD_INT 3
48528: PLUS
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: ST_TO_ADDR
// end ; end ;
48545: GO 48548
48547: POP
// result := list ;
48548: LD_ADDR_VAR 0 4
48552: PUSH
48553: LD_VAR 0 5
48557: ST_TO_ADDR
// end ;
48558: LD_VAR 0 4
48562: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48563: LD_INT 0
48565: PPUSH
48566: PPUSH
48567: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48568: LD_VAR 0 1
48572: NOT
48573: PUSH
48574: LD_VAR 0 2
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: LD_INT 4
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: IN
48597: NOT
48598: OR
48599: IFFALSE 48603
// exit ;
48601: GO 48695
// tmp := [ ] ;
48603: LD_ADDR_VAR 0 5
48607: PUSH
48608: EMPTY
48609: ST_TO_ADDR
// for i in units do
48610: LD_ADDR_VAR 0 4
48614: PUSH
48615: LD_VAR 0 1
48619: PUSH
48620: FOR_IN
48621: IFFALSE 48664
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48623: LD_ADDR_VAR 0 5
48627: PUSH
48628: LD_VAR 0 5
48632: PPUSH
48633: LD_VAR 0 5
48637: PUSH
48638: LD_INT 1
48640: PLUS
48641: PPUSH
48642: LD_VAR 0 4
48646: PPUSH
48647: LD_VAR 0 2
48651: PPUSH
48652: CALL_OW 259
48656: PPUSH
48657: CALL_OW 2
48661: ST_TO_ADDR
48662: GO 48620
48664: POP
48665: POP
// if not tmp then
48666: LD_VAR 0 5
48670: NOT
48671: IFFALSE 48675
// exit ;
48673: GO 48695
// result := SortListByListDesc ( units , tmp ) ;
48675: LD_ADDR_VAR 0 3
48679: PUSH
48680: LD_VAR 0 1
48684: PPUSH
48685: LD_VAR 0 5
48689: PPUSH
48690: CALL_OW 77
48694: ST_TO_ADDR
// end ;
48695: LD_VAR 0 3
48699: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48700: LD_INT 0
48702: PPUSH
48703: PPUSH
48704: PPUSH
// result := false ;
48705: LD_ADDR_VAR 0 3
48709: PUSH
48710: LD_INT 0
48712: ST_TO_ADDR
// x := GetX ( building ) ;
48713: LD_ADDR_VAR 0 4
48717: PUSH
48718: LD_VAR 0 2
48722: PPUSH
48723: CALL_OW 250
48727: ST_TO_ADDR
// y := GetY ( building ) ;
48728: LD_ADDR_VAR 0 5
48732: PUSH
48733: LD_VAR 0 2
48737: PPUSH
48738: CALL_OW 251
48742: ST_TO_ADDR
// if not building or not x or not y then
48743: LD_VAR 0 2
48747: NOT
48748: PUSH
48749: LD_VAR 0 4
48753: NOT
48754: OR
48755: PUSH
48756: LD_VAR 0 5
48760: NOT
48761: OR
48762: IFFALSE 48766
// exit ;
48764: GO 48858
// if GetTaskList ( unit ) then
48766: LD_VAR 0 1
48770: PPUSH
48771: CALL_OW 437
48775: IFFALSE 48858
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48777: LD_STRING e
48779: PUSH
48780: LD_VAR 0 1
48784: PPUSH
48785: CALL_OW 437
48789: PUSH
48790: LD_INT 1
48792: ARRAY
48793: PUSH
48794: LD_INT 1
48796: ARRAY
48797: EQUAL
48798: PUSH
48799: LD_VAR 0 4
48803: PUSH
48804: LD_VAR 0 1
48808: PPUSH
48809: CALL_OW 437
48813: PUSH
48814: LD_INT 1
48816: ARRAY
48817: PUSH
48818: LD_INT 2
48820: ARRAY
48821: EQUAL
48822: AND
48823: PUSH
48824: LD_VAR 0 5
48828: PUSH
48829: LD_VAR 0 1
48833: PPUSH
48834: CALL_OW 437
48838: PUSH
48839: LD_INT 1
48841: ARRAY
48842: PUSH
48843: LD_INT 3
48845: ARRAY
48846: EQUAL
48847: AND
48848: IFFALSE 48858
// result := true end ;
48850: LD_ADDR_VAR 0 3
48854: PUSH
48855: LD_INT 1
48857: ST_TO_ADDR
// end ;
48858: LD_VAR 0 3
48862: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48863: LD_INT 0
48865: PPUSH
// result := false ;
48866: LD_ADDR_VAR 0 4
48870: PUSH
48871: LD_INT 0
48873: ST_TO_ADDR
// if GetTaskList ( unit ) then
48874: LD_VAR 0 1
48878: PPUSH
48879: CALL_OW 437
48883: IFFALSE 48966
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48885: LD_STRING M
48887: PUSH
48888: LD_VAR 0 1
48892: PPUSH
48893: CALL_OW 437
48897: PUSH
48898: LD_INT 1
48900: ARRAY
48901: PUSH
48902: LD_INT 1
48904: ARRAY
48905: EQUAL
48906: PUSH
48907: LD_VAR 0 2
48911: PUSH
48912: LD_VAR 0 1
48916: PPUSH
48917: CALL_OW 437
48921: PUSH
48922: LD_INT 1
48924: ARRAY
48925: PUSH
48926: LD_INT 2
48928: ARRAY
48929: EQUAL
48930: AND
48931: PUSH
48932: LD_VAR 0 3
48936: PUSH
48937: LD_VAR 0 1
48941: PPUSH
48942: CALL_OW 437
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: PUSH
48951: LD_INT 3
48953: ARRAY
48954: EQUAL
48955: AND
48956: IFFALSE 48966
// result := true ;
48958: LD_ADDR_VAR 0 4
48962: PUSH
48963: LD_INT 1
48965: ST_TO_ADDR
// end ; end ;
48966: LD_VAR 0 4
48970: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48971: LD_INT 0
48973: PPUSH
48974: PPUSH
48975: PPUSH
48976: PPUSH
// if not unit or not area then
48977: LD_VAR 0 1
48981: NOT
48982: PUSH
48983: LD_VAR 0 2
48987: NOT
48988: OR
48989: IFFALSE 48993
// exit ;
48991: GO 49157
// tmp := AreaToList ( area , i ) ;
48993: LD_ADDR_VAR 0 6
48997: PUSH
48998: LD_VAR 0 2
49002: PPUSH
49003: LD_VAR 0 5
49007: PPUSH
49008: CALL_OW 517
49012: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49013: LD_ADDR_VAR 0 5
49017: PUSH
49018: DOUBLE
49019: LD_INT 1
49021: DEC
49022: ST_TO_ADDR
49023: LD_VAR 0 6
49027: PUSH
49028: LD_INT 1
49030: ARRAY
49031: PUSH
49032: FOR_TO
49033: IFFALSE 49155
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49035: LD_ADDR_VAR 0 7
49039: PUSH
49040: LD_VAR 0 6
49044: PUSH
49045: LD_INT 1
49047: ARRAY
49048: PUSH
49049: LD_VAR 0 5
49053: ARRAY
49054: PUSH
49055: LD_VAR 0 6
49059: PUSH
49060: LD_INT 2
49062: ARRAY
49063: PUSH
49064: LD_VAR 0 5
49068: ARRAY
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49074: LD_VAR 0 7
49078: PUSH
49079: LD_INT 1
49081: ARRAY
49082: PPUSH
49083: LD_VAR 0 7
49087: PUSH
49088: LD_INT 2
49090: ARRAY
49091: PPUSH
49092: CALL_OW 428
49096: PUSH
49097: LD_INT 0
49099: EQUAL
49100: IFFALSE 49153
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49102: LD_VAR 0 1
49106: PPUSH
49107: LD_VAR 0 7
49111: PUSH
49112: LD_INT 1
49114: ARRAY
49115: PPUSH
49116: LD_VAR 0 7
49120: PUSH
49121: LD_INT 2
49123: ARRAY
49124: PPUSH
49125: LD_VAR 0 3
49129: PPUSH
49130: CALL_OW 48
// result := IsPlaced ( unit ) ;
49134: LD_ADDR_VAR 0 4
49138: PUSH
49139: LD_VAR 0 1
49143: PPUSH
49144: CALL_OW 305
49148: ST_TO_ADDR
// exit ;
49149: POP
49150: POP
49151: GO 49157
// end ; end ;
49153: GO 49032
49155: POP
49156: POP
// end ;
49157: LD_VAR 0 4
49161: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49162: LD_INT 0
49164: PPUSH
49165: PPUSH
49166: PPUSH
// if not side or side > 8 then
49167: LD_VAR 0 1
49171: NOT
49172: PUSH
49173: LD_VAR 0 1
49177: PUSH
49178: LD_INT 8
49180: GREATER
49181: OR
49182: IFFALSE 49186
// exit ;
49184: GO 49373
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49186: LD_ADDR_VAR 0 4
49190: PUSH
49191: LD_INT 22
49193: PUSH
49194: LD_VAR 0 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 21
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PPUSH
49217: CALL_OW 69
49221: ST_TO_ADDR
// if not tmp then
49222: LD_VAR 0 4
49226: NOT
49227: IFFALSE 49231
// exit ;
49229: GO 49373
// enable_addtolog := true ;
49231: LD_ADDR_OWVAR 81
49235: PUSH
49236: LD_INT 1
49238: ST_TO_ADDR
// AddToLog ( [ ) ;
49239: LD_STRING [
49241: PPUSH
49242: CALL_OW 561
// for i in tmp do
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_VAR 0 4
49255: PUSH
49256: FOR_IN
49257: IFFALSE 49364
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49259: LD_STRING [
49261: PUSH
49262: LD_VAR 0 3
49266: PPUSH
49267: CALL_OW 266
49271: STR
49272: PUSH
49273: LD_STRING , 
49275: STR
49276: PUSH
49277: LD_VAR 0 3
49281: PPUSH
49282: CALL_OW 250
49286: STR
49287: PUSH
49288: LD_STRING , 
49290: STR
49291: PUSH
49292: LD_VAR 0 3
49296: PPUSH
49297: CALL_OW 251
49301: STR
49302: PUSH
49303: LD_STRING , 
49305: STR
49306: PUSH
49307: LD_VAR 0 3
49311: PPUSH
49312: CALL_OW 254
49316: STR
49317: PUSH
49318: LD_STRING , 
49320: STR
49321: PUSH
49322: LD_VAR 0 3
49326: PPUSH
49327: LD_INT 1
49329: PPUSH
49330: CALL_OW 268
49334: STR
49335: PUSH
49336: LD_STRING , 
49338: STR
49339: PUSH
49340: LD_VAR 0 3
49344: PPUSH
49345: LD_INT 2
49347: PPUSH
49348: CALL_OW 268
49352: STR
49353: PUSH
49354: LD_STRING ],
49356: STR
49357: PPUSH
49358: CALL_OW 561
// end ;
49362: GO 49256
49364: POP
49365: POP
// AddToLog ( ]; ) ;
49366: LD_STRING ];
49368: PPUSH
49369: CALL_OW 561
// end ;
49373: LD_VAR 0 2
49377: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49378: LD_INT 0
49380: PPUSH
49381: PPUSH
49382: PPUSH
49383: PPUSH
49384: PPUSH
// if not area or not rate or not max then
49385: LD_VAR 0 1
49389: NOT
49390: PUSH
49391: LD_VAR 0 2
49395: NOT
49396: OR
49397: PUSH
49398: LD_VAR 0 4
49402: NOT
49403: OR
49404: IFFALSE 49408
// exit ;
49406: GO 49600
// while 1 do
49408: LD_INT 1
49410: IFFALSE 49600
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49412: LD_ADDR_VAR 0 9
49416: PUSH
49417: LD_VAR 0 1
49421: PPUSH
49422: LD_INT 1
49424: PPUSH
49425: CALL_OW 287
49429: PUSH
49430: LD_INT 10
49432: MUL
49433: ST_TO_ADDR
// r := rate / 10 ;
49434: LD_ADDR_VAR 0 7
49438: PUSH
49439: LD_VAR 0 2
49443: PUSH
49444: LD_INT 10
49446: DIVREAL
49447: ST_TO_ADDR
// time := 1 1$00 ;
49448: LD_ADDR_VAR 0 8
49452: PUSH
49453: LD_INT 2100
49455: ST_TO_ADDR
// if amount < min then
49456: LD_VAR 0 9
49460: PUSH
49461: LD_VAR 0 3
49465: LESS
49466: IFFALSE 49484
// r := r * 2 else
49468: LD_ADDR_VAR 0 7
49472: PUSH
49473: LD_VAR 0 7
49477: PUSH
49478: LD_INT 2
49480: MUL
49481: ST_TO_ADDR
49482: GO 49510
// if amount > max then
49484: LD_VAR 0 9
49488: PUSH
49489: LD_VAR 0 4
49493: GREATER
49494: IFFALSE 49510
// r := r / 2 ;
49496: LD_ADDR_VAR 0 7
49500: PUSH
49501: LD_VAR 0 7
49505: PUSH
49506: LD_INT 2
49508: DIVREAL
49509: ST_TO_ADDR
// time := time / r ;
49510: LD_ADDR_VAR 0 8
49514: PUSH
49515: LD_VAR 0 8
49519: PUSH
49520: LD_VAR 0 7
49524: DIVREAL
49525: ST_TO_ADDR
// if time < 0 then
49526: LD_VAR 0 8
49530: PUSH
49531: LD_INT 0
49533: LESS
49534: IFFALSE 49551
// time := time * - 1 ;
49536: LD_ADDR_VAR 0 8
49540: PUSH
49541: LD_VAR 0 8
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: MUL
49550: ST_TO_ADDR
// wait ( time ) ;
49551: LD_VAR 0 8
49555: PPUSH
49556: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
49560: LD_INT 35
49562: PPUSH
49563: LD_INT 875
49565: PPUSH
49566: CALL_OW 12
49570: PPUSH
49571: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49575: LD_INT 1
49577: PPUSH
49578: LD_INT 5
49580: PPUSH
49581: CALL_OW 12
49585: PPUSH
49586: LD_VAR 0 1
49590: PPUSH
49591: LD_INT 1
49593: PPUSH
49594: CALL_OW 55
// end ;
49598: GO 49408
// end ;
49600: LD_VAR 0 5
49604: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49605: LD_INT 0
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
// if not turrets or not factories then
49615: LD_VAR 0 1
49619: NOT
49620: PUSH
49621: LD_VAR 0 2
49625: NOT
49626: OR
49627: IFFALSE 49631
// exit ;
49629: GO 49938
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49631: LD_ADDR_VAR 0 10
49635: PUSH
49636: LD_INT 5
49638: PUSH
49639: LD_INT 6
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 4
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: LD_INT 5
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 24
49673: PUSH
49674: LD_INT 25
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 23
49683: PUSH
49684: LD_INT 27
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 42
49697: PUSH
49698: LD_INT 43
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 44
49707: PUSH
49708: LD_INT 46
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 45
49717: PUSH
49718: LD_INT 47
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// result := [ ] ;
49735: LD_ADDR_VAR 0 3
49739: PUSH
49740: EMPTY
49741: ST_TO_ADDR
// for i in turrets do
49742: LD_ADDR_VAR 0 4
49746: PUSH
49747: LD_VAR 0 1
49751: PUSH
49752: FOR_IN
49753: IFFALSE 49936
// begin nat := GetNation ( i ) ;
49755: LD_ADDR_VAR 0 7
49759: PUSH
49760: LD_VAR 0 4
49764: PPUSH
49765: CALL_OW 248
49769: ST_TO_ADDR
// weapon := 0 ;
49770: LD_ADDR_VAR 0 8
49774: PUSH
49775: LD_INT 0
49777: ST_TO_ADDR
// if not nat then
49778: LD_VAR 0 7
49782: NOT
49783: IFFALSE 49787
// continue ;
49785: GO 49752
// for j in list [ nat ] do
49787: LD_ADDR_VAR 0 5
49791: PUSH
49792: LD_VAR 0 10
49796: PUSH
49797: LD_VAR 0 7
49801: ARRAY
49802: PUSH
49803: FOR_IN
49804: IFFALSE 49845
// if GetBWeapon ( i ) = j [ 1 ] then
49806: LD_VAR 0 4
49810: PPUSH
49811: CALL_OW 269
49815: PUSH
49816: LD_VAR 0 5
49820: PUSH
49821: LD_INT 1
49823: ARRAY
49824: EQUAL
49825: IFFALSE 49843
// begin weapon := j [ 2 ] ;
49827: LD_ADDR_VAR 0 8
49831: PUSH
49832: LD_VAR 0 5
49836: PUSH
49837: LD_INT 2
49839: ARRAY
49840: ST_TO_ADDR
// break ;
49841: GO 49845
// end ;
49843: GO 49803
49845: POP
49846: POP
// if not weapon then
49847: LD_VAR 0 8
49851: NOT
49852: IFFALSE 49856
// continue ;
49854: GO 49752
// for k in factories do
49856: LD_ADDR_VAR 0 6
49860: PUSH
49861: LD_VAR 0 2
49865: PUSH
49866: FOR_IN
49867: IFFALSE 49932
// begin weapons := AvailableWeaponList ( k ) ;
49869: LD_ADDR_VAR 0 9
49873: PUSH
49874: LD_VAR 0 6
49878: PPUSH
49879: CALL_OW 478
49883: ST_TO_ADDR
// if not weapons then
49884: LD_VAR 0 9
49888: NOT
49889: IFFALSE 49893
// continue ;
49891: GO 49866
// if weapon in weapons then
49893: LD_VAR 0 8
49897: PUSH
49898: LD_VAR 0 9
49902: IN
49903: IFFALSE 49930
// begin result := [ i , weapon ] ;
49905: LD_ADDR_VAR 0 3
49909: PUSH
49910: LD_VAR 0 4
49914: PUSH
49915: LD_VAR 0 8
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: ST_TO_ADDR
// exit ;
49924: POP
49925: POP
49926: POP
49927: POP
49928: GO 49938
// end ; end ;
49930: GO 49866
49932: POP
49933: POP
// end ;
49934: GO 49752
49936: POP
49937: POP
// end ;
49938: LD_VAR 0 3
49942: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49943: LD_INT 0
49945: PPUSH
// if not side or side > 8 then
49946: LD_VAR 0 3
49950: NOT
49951: PUSH
49952: LD_VAR 0 3
49956: PUSH
49957: LD_INT 8
49959: GREATER
49960: OR
49961: IFFALSE 49965
// exit ;
49963: GO 50024
// if not range then
49965: LD_VAR 0 4
49969: NOT
49970: IFFALSE 49981
// range := - 12 ;
49972: LD_ADDR_VAR 0 4
49976: PUSH
49977: LD_INT 12
49979: NEG
49980: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49981: LD_VAR 0 1
49985: PPUSH
49986: LD_VAR 0 2
49990: PPUSH
49991: LD_VAR 0 3
49995: PPUSH
49996: LD_VAR 0 4
50000: PPUSH
50001: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50005: LD_VAR 0 1
50009: PPUSH
50010: LD_VAR 0 2
50014: PPUSH
50015: LD_VAR 0 3
50019: PPUSH
50020: CALL_OW 331
// end ;
50024: LD_VAR 0 5
50028: RET
// export function Video ( mode ) ; begin
50029: LD_INT 0
50031: PPUSH
// ingame_video = mode ;
50032: LD_ADDR_OWVAR 52
50036: PUSH
50037: LD_VAR 0 1
50041: ST_TO_ADDR
// interface_hidden = mode ;
50042: LD_ADDR_OWVAR 54
50046: PUSH
50047: LD_VAR 0 1
50051: ST_TO_ADDR
// end ;
50052: LD_VAR 0 2
50056: RET
// export function Join ( array , element ) ; begin
50057: LD_INT 0
50059: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50060: LD_ADDR_VAR 0 3
50064: PUSH
50065: LD_VAR 0 1
50069: PPUSH
50070: LD_VAR 0 1
50074: PUSH
50075: LD_INT 1
50077: PLUS
50078: PPUSH
50079: LD_VAR 0 2
50083: PPUSH
50084: CALL_OW 1
50088: ST_TO_ADDR
// end ;
50089: LD_VAR 0 3
50093: RET
// export function JoinUnion ( array , element ) ; begin
50094: LD_INT 0
50096: PPUSH
// result := array union element ;
50097: LD_ADDR_VAR 0 3
50101: PUSH
50102: LD_VAR 0 1
50106: PUSH
50107: LD_VAR 0 2
50111: UNION
50112: ST_TO_ADDR
// end ;
50113: LD_VAR 0 3
50117: RET
// export function GetBehemoths ( side ) ; begin
50118: LD_INT 0
50120: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
50121: LD_ADDR_VAR 0 2
50125: PUSH
50126: LD_INT 22
50128: PUSH
50129: LD_VAR 0 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 31
50140: PUSH
50141: LD_INT 25
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PPUSH
50152: CALL_OW 69
50156: ST_TO_ADDR
// end ;
50157: LD_VAR 0 2
50161: RET
// export function Shuffle ( array ) ; var i , index ; begin
50162: LD_INT 0
50164: PPUSH
50165: PPUSH
50166: PPUSH
// result := [ ] ;
50167: LD_ADDR_VAR 0 2
50171: PUSH
50172: EMPTY
50173: ST_TO_ADDR
// if not array then
50174: LD_VAR 0 1
50178: NOT
50179: IFFALSE 50183
// exit ;
50181: GO 50282
// Randomize ;
50183: CALL_OW 10
// for i = array downto 1 do
50187: LD_ADDR_VAR 0 3
50191: PUSH
50192: DOUBLE
50193: LD_VAR 0 1
50197: INC
50198: ST_TO_ADDR
50199: LD_INT 1
50201: PUSH
50202: FOR_DOWNTO
50203: IFFALSE 50280
// begin index := rand ( 1 , array ) ;
50205: LD_ADDR_VAR 0 4
50209: PUSH
50210: LD_INT 1
50212: PPUSH
50213: LD_VAR 0 1
50217: PPUSH
50218: CALL_OW 12
50222: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50223: LD_ADDR_VAR 0 2
50227: PUSH
50228: LD_VAR 0 2
50232: PPUSH
50233: LD_VAR 0 2
50237: PUSH
50238: LD_INT 1
50240: PLUS
50241: PPUSH
50242: LD_VAR 0 1
50246: PUSH
50247: LD_VAR 0 4
50251: ARRAY
50252: PPUSH
50253: CALL_OW 2
50257: ST_TO_ADDR
// array := Delete ( array , index ) ;
50258: LD_ADDR_VAR 0 1
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: LD_VAR 0 4
50272: PPUSH
50273: CALL_OW 3
50277: ST_TO_ADDR
// end ;
50278: GO 50202
50280: POP
50281: POP
// end ;
50282: LD_VAR 0 2
50286: RET
// export function GetBaseMaterials ( base ) ; begin
50287: LD_INT 0
50289: PPUSH
// result := [ 0 , 0 , 0 ] ;
50290: LD_ADDR_VAR 0 2
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// if not base then
50309: LD_VAR 0 1
50313: NOT
50314: IFFALSE 50318
// exit ;
50316: GO 50367
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50318: LD_ADDR_VAR 0 2
50322: PUSH
50323: LD_VAR 0 1
50327: PPUSH
50328: LD_INT 1
50330: PPUSH
50331: CALL_OW 275
50335: PUSH
50336: LD_VAR 0 1
50340: PPUSH
50341: LD_INT 2
50343: PPUSH
50344: CALL_OW 275
50348: PUSH
50349: LD_VAR 0 1
50353: PPUSH
50354: LD_INT 3
50356: PPUSH
50357: CALL_OW 275
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// end ;
50367: LD_VAR 0 2
50371: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50372: LD_INT 0
50374: PPUSH
50375: PPUSH
// result := array ;
50376: LD_ADDR_VAR 0 3
50380: PUSH
50381: LD_VAR 0 1
50385: ST_TO_ADDR
// if size > 0 then
50386: LD_VAR 0 2
50390: PUSH
50391: LD_INT 0
50393: GREATER
50394: IFFALSE 50440
// for i := array downto size do
50396: LD_ADDR_VAR 0 4
50400: PUSH
50401: DOUBLE
50402: LD_VAR 0 1
50406: INC
50407: ST_TO_ADDR
50408: LD_VAR 0 2
50412: PUSH
50413: FOR_DOWNTO
50414: IFFALSE 50438
// result := Delete ( result , result ) ;
50416: LD_ADDR_VAR 0 3
50420: PUSH
50421: LD_VAR 0 3
50425: PPUSH
50426: LD_VAR 0 3
50430: PPUSH
50431: CALL_OW 3
50435: ST_TO_ADDR
50436: GO 50413
50438: POP
50439: POP
// end ;
50440: LD_VAR 0 3
50444: RET
// export function ComExit ( unit ) ; var tmp ; begin
50445: LD_INT 0
50447: PPUSH
50448: PPUSH
// if not IsInUnit ( unit ) then
50449: LD_VAR 0 1
50453: PPUSH
50454: CALL_OW 310
50458: NOT
50459: IFFALSE 50463
// exit ;
50461: GO 50523
// tmp := IsInUnit ( unit ) ;
50463: LD_ADDR_VAR 0 3
50467: PUSH
50468: LD_VAR 0 1
50472: PPUSH
50473: CALL_OW 310
50477: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50478: LD_VAR 0 3
50482: PPUSH
50483: CALL_OW 247
50487: PUSH
50488: LD_INT 2
50490: EQUAL
50491: IFFALSE 50504
// ComExitVehicle ( unit ) else
50493: LD_VAR 0 1
50497: PPUSH
50498: CALL_OW 121
50502: GO 50513
// ComExitBuilding ( unit ) ;
50504: LD_VAR 0 1
50508: PPUSH
50509: CALL_OW 122
// result := tmp ;
50513: LD_ADDR_VAR 0 2
50517: PUSH
50518: LD_VAR 0 3
50522: ST_TO_ADDR
// end ;
50523: LD_VAR 0 2
50527: RET
// export function ComExitAll ( units ) ; var i ; begin
50528: LD_INT 0
50530: PPUSH
50531: PPUSH
// if not units then
50532: LD_VAR 0 1
50536: NOT
50537: IFFALSE 50541
// exit ;
50539: GO 50567
// for i in units do
50541: LD_ADDR_VAR 0 3
50545: PUSH
50546: LD_VAR 0 1
50550: PUSH
50551: FOR_IN
50552: IFFALSE 50565
// ComExit ( i ) ;
50554: LD_VAR 0 3
50558: PPUSH
50559: CALL 50445 0 1
50563: GO 50551
50565: POP
50566: POP
// end ;
50567: LD_VAR 0 2
50571: RET
// export function ResetHc ; begin
50572: LD_INT 0
50574: PPUSH
// InitHc ;
50575: CALL_OW 19
// hc_importance := 0 ;
50579: LD_ADDR_OWVAR 32
50583: PUSH
50584: LD_INT 0
50586: ST_TO_ADDR
// end ;
50587: LD_VAR 0 1
50591: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50592: LD_INT 0
50594: PPUSH
50595: PPUSH
50596: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50597: LD_ADDR_VAR 0 6
50601: PUSH
50602: LD_VAR 0 1
50606: PUSH
50607: LD_VAR 0 3
50611: PLUS
50612: PUSH
50613: LD_INT 2
50615: DIV
50616: ST_TO_ADDR
// if _x < 0 then
50617: LD_VAR 0 6
50621: PUSH
50622: LD_INT 0
50624: LESS
50625: IFFALSE 50642
// _x := _x * - 1 ;
50627: LD_ADDR_VAR 0 6
50631: PUSH
50632: LD_VAR 0 6
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: MUL
50641: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50642: LD_ADDR_VAR 0 7
50646: PUSH
50647: LD_VAR 0 2
50651: PUSH
50652: LD_VAR 0 4
50656: PLUS
50657: PUSH
50658: LD_INT 2
50660: DIV
50661: ST_TO_ADDR
// if _y < 0 then
50662: LD_VAR 0 7
50666: PUSH
50667: LD_INT 0
50669: LESS
50670: IFFALSE 50687
// _y := _y * - 1 ;
50672: LD_ADDR_VAR 0 7
50676: PUSH
50677: LD_VAR 0 7
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: MUL
50686: ST_TO_ADDR
// result := [ _x , _y ] ;
50687: LD_ADDR_VAR 0 5
50691: PUSH
50692: LD_VAR 0 6
50696: PUSH
50697: LD_VAR 0 7
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// end ;
50706: LD_VAR 0 5
50710: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50711: LD_INT 0
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
// task := GetTaskList ( unit ) ;
50717: LD_ADDR_VAR 0 7
50721: PUSH
50722: LD_VAR 0 1
50726: PPUSH
50727: CALL_OW 437
50731: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50732: LD_VAR 0 7
50736: NOT
50737: PUSH
50738: LD_VAR 0 1
50742: PPUSH
50743: LD_VAR 0 2
50747: PPUSH
50748: CALL_OW 308
50752: NOT
50753: AND
50754: IFFALSE 50758
// exit ;
50756: GO 50876
// if IsInArea ( unit , area ) then
50758: LD_VAR 0 1
50762: PPUSH
50763: LD_VAR 0 2
50767: PPUSH
50768: CALL_OW 308
50772: IFFALSE 50790
// begin ComMoveToArea ( unit , goAway ) ;
50774: LD_VAR 0 1
50778: PPUSH
50779: LD_VAR 0 3
50783: PPUSH
50784: CALL_OW 113
// exit ;
50788: GO 50876
// end ; if task [ 1 ] [ 1 ] <> M then
50790: LD_VAR 0 7
50794: PUSH
50795: LD_INT 1
50797: ARRAY
50798: PUSH
50799: LD_INT 1
50801: ARRAY
50802: PUSH
50803: LD_STRING M
50805: NONEQUAL
50806: IFFALSE 50810
// exit ;
50808: GO 50876
// x := task [ 1 ] [ 2 ] ;
50810: LD_ADDR_VAR 0 5
50814: PUSH
50815: LD_VAR 0 7
50819: PUSH
50820: LD_INT 1
50822: ARRAY
50823: PUSH
50824: LD_INT 2
50826: ARRAY
50827: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50828: LD_ADDR_VAR 0 6
50832: PUSH
50833: LD_VAR 0 7
50837: PUSH
50838: LD_INT 1
50840: ARRAY
50841: PUSH
50842: LD_INT 3
50844: ARRAY
50845: ST_TO_ADDR
// if InArea ( x , y , area ) then
50846: LD_VAR 0 5
50850: PPUSH
50851: LD_VAR 0 6
50855: PPUSH
50856: LD_VAR 0 2
50860: PPUSH
50861: CALL_OW 309
50865: IFFALSE 50876
// ComStop ( unit ) ;
50867: LD_VAR 0 1
50871: PPUSH
50872: CALL_OW 141
// end ;
50876: LD_VAR 0 4
50880: RET
// export function Abs ( value ) ; begin
50881: LD_INT 0
50883: PPUSH
// result := value ;
50884: LD_ADDR_VAR 0 2
50888: PUSH
50889: LD_VAR 0 1
50893: ST_TO_ADDR
// if value < 0 then
50894: LD_VAR 0 1
50898: PUSH
50899: LD_INT 0
50901: LESS
50902: IFFALSE 50919
// result := value * - 1 ;
50904: LD_ADDR_VAR 0 2
50908: PUSH
50909: LD_VAR 0 1
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: MUL
50918: ST_TO_ADDR
// end ;
50919: LD_VAR 0 2
50923: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50924: LD_INT 0
50926: PPUSH
50927: PPUSH
50928: PPUSH
50929: PPUSH
50930: PPUSH
50931: PPUSH
50932: PPUSH
50933: PPUSH
// if not unit or not building then
50934: LD_VAR 0 1
50938: NOT
50939: PUSH
50940: LD_VAR 0 2
50944: NOT
50945: OR
50946: IFFALSE 50950
// exit ;
50948: GO 51176
// x := GetX ( building ) ;
50950: LD_ADDR_VAR 0 4
50954: PUSH
50955: LD_VAR 0 2
50959: PPUSH
50960: CALL_OW 250
50964: ST_TO_ADDR
// y := GetY ( building ) ;
50965: LD_ADDR_VAR 0 6
50969: PUSH
50970: LD_VAR 0 2
50974: PPUSH
50975: CALL_OW 251
50979: ST_TO_ADDR
// d := GetDir ( building ) ;
50980: LD_ADDR_VAR 0 8
50984: PUSH
50985: LD_VAR 0 2
50989: PPUSH
50990: CALL_OW 254
50994: ST_TO_ADDR
// r := 4 ;
50995: LD_ADDR_VAR 0 9
50999: PUSH
51000: LD_INT 4
51002: ST_TO_ADDR
// for i := 1 to 5 do
51003: LD_ADDR_VAR 0 10
51007: PUSH
51008: DOUBLE
51009: LD_INT 1
51011: DEC
51012: ST_TO_ADDR
51013: LD_INT 5
51015: PUSH
51016: FOR_TO
51017: IFFALSE 51174
// begin _x := ShiftX ( x , d , r + i ) ;
51019: LD_ADDR_VAR 0 5
51023: PUSH
51024: LD_VAR 0 4
51028: PPUSH
51029: LD_VAR 0 8
51033: PPUSH
51034: LD_VAR 0 9
51038: PUSH
51039: LD_VAR 0 10
51043: PLUS
51044: PPUSH
51045: CALL_OW 272
51049: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51050: LD_ADDR_VAR 0 7
51054: PUSH
51055: LD_VAR 0 6
51059: PPUSH
51060: LD_VAR 0 8
51064: PPUSH
51065: LD_VAR 0 9
51069: PUSH
51070: LD_VAR 0 10
51074: PLUS
51075: PPUSH
51076: CALL_OW 273
51080: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51081: LD_VAR 0 5
51085: PPUSH
51086: LD_VAR 0 7
51090: PPUSH
51091: CALL_OW 488
51095: PUSH
51096: LD_VAR 0 5
51100: PPUSH
51101: LD_VAR 0 7
51105: PPUSH
51106: CALL_OW 428
51110: PPUSH
51111: CALL_OW 247
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: IN
51126: NOT
51127: AND
51128: IFFALSE 51172
// begin ComMoveXY ( unit , _x , _y ) ;
51130: LD_VAR 0 1
51134: PPUSH
51135: LD_VAR 0 5
51139: PPUSH
51140: LD_VAR 0 7
51144: PPUSH
51145: CALL_OW 111
// result := [ _x , _y ] ;
51149: LD_ADDR_VAR 0 3
51153: PUSH
51154: LD_VAR 0 5
51158: PUSH
51159: LD_VAR 0 7
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// exit ;
51168: POP
51169: POP
51170: GO 51176
// end ; end ;
51172: GO 51016
51174: POP
51175: POP
// end ;
51176: LD_VAR 0 3
51180: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51181: LD_INT 0
51183: PPUSH
51184: PPUSH
51185: PPUSH
// result := 0 ;
51186: LD_ADDR_VAR 0 3
51190: PUSH
51191: LD_INT 0
51193: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51194: LD_VAR 0 1
51198: PUSH
51199: LD_INT 0
51201: LESS
51202: PUSH
51203: LD_VAR 0 1
51207: PUSH
51208: LD_INT 8
51210: GREATER
51211: OR
51212: PUSH
51213: LD_VAR 0 2
51217: PUSH
51218: LD_INT 0
51220: LESS
51221: OR
51222: PUSH
51223: LD_VAR 0 2
51227: PUSH
51228: LD_INT 8
51230: GREATER
51231: OR
51232: IFFALSE 51236
// exit ;
51234: GO 51311
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51236: LD_ADDR_VAR 0 4
51240: PUSH
51241: LD_INT 22
51243: PUSH
51244: LD_VAR 0 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PPUSH
51253: CALL_OW 69
51257: PUSH
51258: FOR_IN
51259: IFFALSE 51309
// begin un := UnitShoot ( i ) ;
51261: LD_ADDR_VAR 0 5
51265: PUSH
51266: LD_VAR 0 4
51270: PPUSH
51271: CALL_OW 504
51275: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51276: LD_VAR 0 5
51280: PPUSH
51281: CALL_OW 255
51285: PUSH
51286: LD_VAR 0 1
51290: EQUAL
51291: IFFALSE 51307
// begin result := un ;
51293: LD_ADDR_VAR 0 3
51297: PUSH
51298: LD_VAR 0 5
51302: ST_TO_ADDR
// exit ;
51303: POP
51304: POP
51305: GO 51311
// end ; end ;
51307: GO 51258
51309: POP
51310: POP
// end ;
51311: LD_VAR 0 3
51315: RET
// export function GetCargoBay ( units ) ; begin
51316: LD_INT 0
51318: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51319: LD_ADDR_VAR 0 2
51323: PUSH
51324: LD_VAR 0 1
51328: PPUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 34
51334: PUSH
51335: LD_INT 12
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 34
51344: PUSH
51345: LD_INT 51
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 34
51354: PUSH
51355: LD_INT 32
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 34
51364: PUSH
51365: LD_EXP 97
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: PPUSH
51381: CALL_OW 72
51385: ST_TO_ADDR
// end ;
51386: LD_VAR 0 2
51390: RET
// export function Negate ( value ) ; begin
51391: LD_INT 0
51393: PPUSH
// result := not value ;
51394: LD_ADDR_VAR 0 2
51398: PUSH
51399: LD_VAR 0 1
51403: NOT
51404: ST_TO_ADDR
// end ;
51405: LD_VAR 0 2
51409: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
51410: LD_INT 0
51412: PPUSH
// if x1 = x2 then
51413: LD_VAR 0 1
51417: PUSH
51418: LD_VAR 0 3
51422: EQUAL
51423: IFFALSE 51457
// begin if y1 > y2 then
51425: LD_VAR 0 2
51429: PUSH
51430: LD_VAR 0 4
51434: GREATER
51435: IFFALSE 51447
// result := 0 else
51437: LD_ADDR_VAR 0 5
51441: PUSH
51442: LD_INT 0
51444: ST_TO_ADDR
51445: GO 51455
// result := 3 ;
51447: LD_ADDR_VAR 0 5
51451: PUSH
51452: LD_INT 3
51454: ST_TO_ADDR
// exit ;
51455: GO 51543
// end ; if y1 = y2 then
51457: LD_VAR 0 2
51461: PUSH
51462: LD_VAR 0 4
51466: EQUAL
51467: IFFALSE 51501
// begin if x1 > x2 then
51469: LD_VAR 0 1
51473: PUSH
51474: LD_VAR 0 3
51478: GREATER
51479: IFFALSE 51491
// result := 1 else
51481: LD_ADDR_VAR 0 5
51485: PUSH
51486: LD_INT 1
51488: ST_TO_ADDR
51489: GO 51499
// result := 4 ;
51491: LD_ADDR_VAR 0 5
51495: PUSH
51496: LD_INT 4
51498: ST_TO_ADDR
// exit ;
51499: GO 51543
// end ; if x1 > x2 and y1 > y2 then
51501: LD_VAR 0 1
51505: PUSH
51506: LD_VAR 0 3
51510: GREATER
51511: PUSH
51512: LD_VAR 0 2
51516: PUSH
51517: LD_VAR 0 4
51521: GREATER
51522: AND
51523: IFFALSE 51535
// result := 2 else
51525: LD_ADDR_VAR 0 5
51529: PUSH
51530: LD_INT 2
51532: ST_TO_ADDR
51533: GO 51543
// result := 5 ;
51535: LD_ADDR_VAR 0 5
51539: PUSH
51540: LD_INT 5
51542: ST_TO_ADDR
// end ;
51543: LD_VAR 0 5
51547: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51548: LD_INT 0
51550: PPUSH
51551: PPUSH
// if not driver or not IsInUnit ( driver ) then
51552: LD_VAR 0 1
51556: NOT
51557: PUSH
51558: LD_VAR 0 1
51562: PPUSH
51563: CALL_OW 310
51567: NOT
51568: OR
51569: IFFALSE 51573
// exit ;
51571: GO 51663
// vehicle := IsInUnit ( driver ) ;
51573: LD_ADDR_VAR 0 3
51577: PUSH
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 310
51587: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51588: LD_VAR 0 1
51592: PPUSH
51593: LD_STRING \
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: PUSH
51623: LD_STRING E
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_VAR 0 3
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PPUSH
51659: CALL_OW 446
// end ;
51663: LD_VAR 0 2
51667: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51668: LD_INT 0
51670: PPUSH
51671: PPUSH
// if not driver or not IsInUnit ( driver ) then
51672: LD_VAR 0 1
51676: NOT
51677: PUSH
51678: LD_VAR 0 1
51682: PPUSH
51683: CALL_OW 310
51687: NOT
51688: OR
51689: IFFALSE 51693
// exit ;
51691: GO 51783
// vehicle := IsInUnit ( driver ) ;
51693: LD_ADDR_VAR 0 3
51697: PUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: CALL_OW 310
51707: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51708: LD_VAR 0 1
51712: PPUSH
51713: LD_STRING \
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: PUSH
51743: LD_STRING E
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_VAR 0 3
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PPUSH
51779: CALL_OW 447
// end ;
51783: LD_VAR 0 2
51787: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51788: LD_INT 0
51790: PPUSH
51791: PPUSH
51792: PPUSH
// tmp := [ ] ;
51793: LD_ADDR_VAR 0 5
51797: PUSH
51798: EMPTY
51799: ST_TO_ADDR
// for i in units do
51800: LD_ADDR_VAR 0 4
51804: PUSH
51805: LD_VAR 0 1
51809: PUSH
51810: FOR_IN
51811: IFFALSE 51849
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51813: LD_ADDR_VAR 0 5
51817: PUSH
51818: LD_VAR 0 5
51822: PPUSH
51823: LD_VAR 0 5
51827: PUSH
51828: LD_INT 1
51830: PLUS
51831: PPUSH
51832: LD_VAR 0 4
51836: PPUSH
51837: CALL_OW 256
51841: PPUSH
51842: CALL_OW 2
51846: ST_TO_ADDR
51847: GO 51810
51849: POP
51850: POP
// if not tmp then
51851: LD_VAR 0 5
51855: NOT
51856: IFFALSE 51860
// exit ;
51858: GO 51908
// if asc then
51860: LD_VAR 0 2
51864: IFFALSE 51888
// result := SortListByListAsc ( units , tmp ) else
51866: LD_ADDR_VAR 0 3
51870: PUSH
51871: LD_VAR 0 1
51875: PPUSH
51876: LD_VAR 0 5
51880: PPUSH
51881: CALL_OW 76
51885: ST_TO_ADDR
51886: GO 51908
// result := SortListByListDesc ( units , tmp ) ;
51888: LD_ADDR_VAR 0 3
51892: PUSH
51893: LD_VAR 0 1
51897: PPUSH
51898: LD_VAR 0 5
51902: PPUSH
51903: CALL_OW 77
51907: ST_TO_ADDR
// end ;
51908: LD_VAR 0 3
51912: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51913: LD_INT 0
51915: PPUSH
51916: PPUSH
// task := GetTaskList ( mech ) ;
51917: LD_ADDR_VAR 0 4
51921: PUSH
51922: LD_VAR 0 1
51926: PPUSH
51927: CALL_OW 437
51931: ST_TO_ADDR
// if not task then
51932: LD_VAR 0 4
51936: NOT
51937: IFFALSE 51941
// exit ;
51939: GO 51983
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51941: LD_ADDR_VAR 0 3
51945: PUSH
51946: LD_VAR 0 4
51950: PUSH
51951: LD_INT 1
51953: ARRAY
51954: PUSH
51955: LD_INT 1
51957: ARRAY
51958: PUSH
51959: LD_STRING r
51961: EQUAL
51962: PUSH
51963: LD_VAR 0 4
51967: PUSH
51968: LD_INT 1
51970: ARRAY
51971: PUSH
51972: LD_INT 4
51974: ARRAY
51975: PUSH
51976: LD_VAR 0 2
51980: EQUAL
51981: AND
51982: ST_TO_ADDR
// end ;
51983: LD_VAR 0 3
51987: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51988: LD_INT 0
51990: PPUSH
// SetDir ( unit , d ) ;
51991: LD_VAR 0 1
51995: PPUSH
51996: LD_VAR 0 4
52000: PPUSH
52001: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
52005: LD_VAR 0 1
52009: PPUSH
52010: LD_VAR 0 2
52014: PPUSH
52015: LD_VAR 0 3
52019: PPUSH
52020: LD_VAR 0 5
52024: PPUSH
52025: CALL_OW 48
// end ;
52029: LD_VAR 0 6
52033: RET
// export function ToNaturalNumber ( number ) ; begin
52034: LD_INT 0
52036: PPUSH
// result := number div 1 ;
52037: LD_ADDR_VAR 0 2
52041: PUSH
52042: LD_VAR 0 1
52046: PUSH
52047: LD_INT 1
52049: DIV
52050: ST_TO_ADDR
// if number < 0 then
52051: LD_VAR 0 1
52055: PUSH
52056: LD_INT 0
52058: LESS
52059: IFFALSE 52069
// result := 0 ;
52061: LD_ADDR_VAR 0 2
52065: PUSH
52066: LD_INT 0
52068: ST_TO_ADDR
// end ;
52069: LD_VAR 0 2
52073: RET
// export function SortByClass ( units , class ) ; var un ; begin
52074: LD_INT 0
52076: PPUSH
52077: PPUSH
// if not units or not class then
52078: LD_VAR 0 1
52082: NOT
52083: PUSH
52084: LD_VAR 0 2
52088: NOT
52089: OR
52090: IFFALSE 52094
// exit ;
52092: GO 52189
// result := [ ] ;
52094: LD_ADDR_VAR 0 3
52098: PUSH
52099: EMPTY
52100: ST_TO_ADDR
// for un in units do
52101: LD_ADDR_VAR 0 4
52105: PUSH
52106: LD_VAR 0 1
52110: PUSH
52111: FOR_IN
52112: IFFALSE 52187
// if GetClass ( un ) = class then
52114: LD_VAR 0 4
52118: PPUSH
52119: CALL_OW 257
52123: PUSH
52124: LD_VAR 0 2
52128: EQUAL
52129: IFFALSE 52156
// result := Insert ( result , 1 , un ) else
52131: LD_ADDR_VAR 0 3
52135: PUSH
52136: LD_VAR 0 3
52140: PPUSH
52141: LD_INT 1
52143: PPUSH
52144: LD_VAR 0 4
52148: PPUSH
52149: CALL_OW 2
52153: ST_TO_ADDR
52154: GO 52185
// result := Replace ( result , result + 1 , un ) ;
52156: LD_ADDR_VAR 0 3
52160: PUSH
52161: LD_VAR 0 3
52165: PPUSH
52166: LD_VAR 0 3
52170: PUSH
52171: LD_INT 1
52173: PLUS
52174: PPUSH
52175: LD_VAR 0 4
52179: PPUSH
52180: CALL_OW 1
52184: ST_TO_ADDR
52185: GO 52111
52187: POP
52188: POP
// end ; end_of_file
52189: LD_VAR 0 3
52193: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52194: LD_VAR 0 1
52198: PUSH
52199: LD_INT 200
52201: DOUBLE
52202: GREATEREQUAL
52203: IFFALSE 52211
52205: LD_INT 299
52207: DOUBLE
52208: LESSEQUAL
52209: IFTRUE 52213
52211: GO 52245
52213: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52214: LD_VAR 0 1
52218: PPUSH
52219: LD_VAR 0 2
52223: PPUSH
52224: LD_VAR 0 3
52228: PPUSH
52229: LD_VAR 0 4
52233: PPUSH
52234: LD_VAR 0 5
52238: PPUSH
52239: CALL 52489 0 5
52243: GO 52322
52245: LD_INT 300
52247: DOUBLE
52248: GREATEREQUAL
52249: IFFALSE 52257
52251: LD_INT 399
52253: DOUBLE
52254: LESSEQUAL
52255: IFTRUE 52259
52257: GO 52321
52259: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52260: LD_VAR 0 1
52264: PPUSH
52265: LD_VAR 0 2
52269: PPUSH
52270: LD_VAR 0 3
52274: PPUSH
52275: LD_VAR 0 4
52279: PPUSH
52280: LD_VAR 0 5
52284: PPUSH
52285: LD_VAR 0 6
52289: PPUSH
52290: LD_VAR 0 7
52294: PPUSH
52295: LD_VAR 0 8
52299: PPUSH
52300: LD_VAR 0 9
52304: PPUSH
52305: LD_VAR 0 10
52309: PPUSH
52310: LD_VAR 0 11
52314: PPUSH
52315: CALL 67564 0 11
52319: GO 52322
52321: POP
// end ;
52322: PPOPN 11
52324: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52325: LD_VAR 0 1
52329: PPUSH
52330: LD_VAR 0 2
52334: PPUSH
52335: LD_VAR 0 3
52339: PPUSH
52340: LD_VAR 0 4
52344: PPUSH
52345: LD_VAR 0 5
52349: PPUSH
52350: CALL 52471 0 5
// end ; end_of_file
52354: PPOPN 5
52356: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
52357: LD_INT 0
52359: PPUSH
52360: PPUSH
52361: PPUSH
52362: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
52363: LD_VAR 0 1
52367: PPUSH
52368: CALL_OW 264
52372: PUSH
52373: LD_EXP 100
52377: EQUAL
52378: IFFALSE 52450
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
52380: LD_INT 68
52382: PPUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: CALL_OW 255
52392: PPUSH
52393: CALL_OW 321
52397: PUSH
52398: LD_INT 2
52400: EQUAL
52401: IFFALSE 52413
// eff := 70 else
52403: LD_ADDR_VAR 0 4
52407: PUSH
52408: LD_INT 70
52410: ST_TO_ADDR
52411: GO 52421
// eff := 30 ;
52413: LD_ADDR_VAR 0 4
52417: PUSH
52418: LD_INT 30
52420: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
52421: LD_VAR 0 1
52425: PPUSH
52426: CALL_OW 250
52430: PPUSH
52431: LD_VAR 0 1
52435: PPUSH
52436: CALL_OW 251
52440: PPUSH
52441: LD_VAR 0 4
52445: PPUSH
52446: CALL_OW 495
// end ; end ;
52450: LD_VAR 0 2
52454: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52455: LD_INT 0
52457: PPUSH
// end ;
52458: LD_VAR 0 4
52462: RET
// export function SOS_Command ( cmd ) ; begin
52463: LD_INT 0
52465: PPUSH
// end ;
52466: LD_VAR 0 2
52470: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52471: LD_INT 0
52473: PPUSH
// if cmd = 121 then
52474: LD_VAR 0 1
52478: PUSH
52479: LD_INT 121
52481: EQUAL
52482: IFFALSE 52484
// end ;
52484: LD_VAR 0 6
52488: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52489: LD_INT 0
52491: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52492: LD_VAR 0 1
52496: PUSH
52497: LD_INT 250
52499: EQUAL
52500: PUSH
52501: LD_VAR 0 2
52505: PPUSH
52506: CALL_OW 264
52510: PUSH
52511: LD_EXP 103
52515: EQUAL
52516: AND
52517: IFFALSE 52538
// MinerPlaceMine ( unit , x , y ) ;
52519: LD_VAR 0 2
52523: PPUSH
52524: LD_VAR 0 4
52528: PPUSH
52529: LD_VAR 0 5
52533: PPUSH
52534: CALL 54887 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52538: LD_VAR 0 1
52542: PUSH
52543: LD_INT 251
52545: EQUAL
52546: PUSH
52547: LD_VAR 0 2
52551: PPUSH
52552: CALL_OW 264
52556: PUSH
52557: LD_EXP 103
52561: EQUAL
52562: AND
52563: IFFALSE 52584
// MinerDetonateMine ( unit , x , y ) ;
52565: LD_VAR 0 2
52569: PPUSH
52570: LD_VAR 0 4
52574: PPUSH
52575: LD_VAR 0 5
52579: PPUSH
52580: CALL 55164 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52584: LD_VAR 0 1
52588: PUSH
52589: LD_INT 252
52591: EQUAL
52592: PUSH
52593: LD_VAR 0 2
52597: PPUSH
52598: CALL_OW 264
52602: PUSH
52603: LD_EXP 103
52607: EQUAL
52608: AND
52609: IFFALSE 52630
// MinerCreateMinefield ( unit , x , y ) ;
52611: LD_VAR 0 2
52615: PPUSH
52616: LD_VAR 0 4
52620: PPUSH
52621: LD_VAR 0 5
52625: PPUSH
52626: CALL 55581 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52630: LD_VAR 0 1
52634: PUSH
52635: LD_INT 253
52637: EQUAL
52638: PUSH
52639: LD_VAR 0 2
52643: PPUSH
52644: CALL_OW 257
52648: PUSH
52649: LD_INT 5
52651: EQUAL
52652: AND
52653: IFFALSE 52674
// ComBinocular ( unit , x , y ) ;
52655: LD_VAR 0 2
52659: PPUSH
52660: LD_VAR 0 4
52664: PPUSH
52665: LD_VAR 0 5
52669: PPUSH
52670: CALL 55952 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52674: LD_VAR 0 1
52678: PUSH
52679: LD_INT 254
52681: EQUAL
52682: PUSH
52683: LD_VAR 0 2
52687: PPUSH
52688: CALL_OW 264
52692: PUSH
52693: LD_EXP 98
52697: EQUAL
52698: AND
52699: PUSH
52700: LD_VAR 0 3
52704: PPUSH
52705: CALL_OW 263
52709: PUSH
52710: LD_INT 3
52712: EQUAL
52713: AND
52714: IFFALSE 52730
// HackDestroyVehicle ( unit , selectedUnit ) ;
52716: LD_VAR 0 2
52720: PPUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: CALL 54247 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52730: LD_VAR 0 1
52734: PUSH
52735: LD_INT 255
52737: EQUAL
52738: PUSH
52739: LD_VAR 0 2
52743: PPUSH
52744: CALL_OW 264
52748: PUSH
52749: LD_INT 14
52751: PUSH
52752: LD_INT 53
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: IN
52759: AND
52760: PUSH
52761: LD_VAR 0 4
52765: PPUSH
52766: LD_VAR 0 5
52770: PPUSH
52771: CALL_OW 488
52775: AND
52776: IFFALSE 52800
// CutTreeXYR ( unit , x , y , 12 ) ;
52778: LD_VAR 0 2
52782: PPUSH
52783: LD_VAR 0 4
52787: PPUSH
52788: LD_VAR 0 5
52792: PPUSH
52793: LD_INT 12
52795: PPUSH
52796: CALL 52813 0 4
// end ;
52800: LD_VAR 0 6
52804: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
52805: LD_INT 0
52807: PPUSH
// end ;
52808: LD_VAR 0 4
52812: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
52813: LD_INT 0
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
52824: LD_VAR 0 1
52828: NOT
52829: PUSH
52830: LD_VAR 0 2
52834: PPUSH
52835: LD_VAR 0 3
52839: PPUSH
52840: CALL_OW 488
52844: NOT
52845: OR
52846: PUSH
52847: LD_VAR 0 4
52851: NOT
52852: OR
52853: IFFALSE 52857
// exit ;
52855: GO 53197
// list := [ ] ;
52857: LD_ADDR_VAR 0 13
52861: PUSH
52862: EMPTY
52863: ST_TO_ADDR
// if x - r < 0 then
52864: LD_VAR 0 2
52868: PUSH
52869: LD_VAR 0 4
52873: MINUS
52874: PUSH
52875: LD_INT 0
52877: LESS
52878: IFFALSE 52890
// min_x := 0 else
52880: LD_ADDR_VAR 0 7
52884: PUSH
52885: LD_INT 0
52887: ST_TO_ADDR
52888: GO 52906
// min_x := x - r ;
52890: LD_ADDR_VAR 0 7
52894: PUSH
52895: LD_VAR 0 2
52899: PUSH
52900: LD_VAR 0 4
52904: MINUS
52905: ST_TO_ADDR
// if y - r < 0 then
52906: LD_VAR 0 3
52910: PUSH
52911: LD_VAR 0 4
52915: MINUS
52916: PUSH
52917: LD_INT 0
52919: LESS
52920: IFFALSE 52932
// min_y := 0 else
52922: LD_ADDR_VAR 0 8
52926: PUSH
52927: LD_INT 0
52929: ST_TO_ADDR
52930: GO 52948
// min_y := y - r ;
52932: LD_ADDR_VAR 0 8
52936: PUSH
52937: LD_VAR 0 3
52941: PUSH
52942: LD_VAR 0 4
52946: MINUS
52947: ST_TO_ADDR
// max_x := x + r ;
52948: LD_ADDR_VAR 0 9
52952: PUSH
52953: LD_VAR 0 2
52957: PUSH
52958: LD_VAR 0 4
52962: PLUS
52963: ST_TO_ADDR
// max_y := y + r ;
52964: LD_ADDR_VAR 0 10
52968: PUSH
52969: LD_VAR 0 3
52973: PUSH
52974: LD_VAR 0 4
52978: PLUS
52979: ST_TO_ADDR
// for _x = min_x to max_x do
52980: LD_ADDR_VAR 0 11
52984: PUSH
52985: DOUBLE
52986: LD_VAR 0 7
52990: DEC
52991: ST_TO_ADDR
52992: LD_VAR 0 9
52996: PUSH
52997: FOR_TO
52998: IFFALSE 53115
// for _y = min_y to max_y do
53000: LD_ADDR_VAR 0 12
53004: PUSH
53005: DOUBLE
53006: LD_VAR 0 8
53010: DEC
53011: ST_TO_ADDR
53012: LD_VAR 0 10
53016: PUSH
53017: FOR_TO
53018: IFFALSE 53111
// begin if not ValidHex ( _x , _y ) then
53020: LD_VAR 0 11
53024: PPUSH
53025: LD_VAR 0 12
53029: PPUSH
53030: CALL_OW 488
53034: NOT
53035: IFFALSE 53039
// continue ;
53037: GO 53017
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53039: LD_VAR 0 11
53043: PPUSH
53044: LD_VAR 0 12
53048: PPUSH
53049: CALL_OW 351
53053: PUSH
53054: LD_VAR 0 11
53058: PPUSH
53059: LD_VAR 0 12
53063: PPUSH
53064: CALL_OW 554
53068: AND
53069: IFFALSE 53109
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53071: LD_ADDR_VAR 0 13
53075: PUSH
53076: LD_VAR 0 13
53080: PPUSH
53081: LD_VAR 0 13
53085: PUSH
53086: LD_INT 1
53088: PLUS
53089: PPUSH
53090: LD_VAR 0 11
53094: PUSH
53095: LD_VAR 0 12
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PPUSH
53104: CALL_OW 2
53108: ST_TO_ADDR
// end ;
53109: GO 53017
53111: POP
53112: POP
53113: GO 52997
53115: POP
53116: POP
// if not list then
53117: LD_VAR 0 13
53121: NOT
53122: IFFALSE 53126
// exit ;
53124: GO 53197
// for i in list do
53126: LD_ADDR_VAR 0 6
53130: PUSH
53131: LD_VAR 0 13
53135: PUSH
53136: FOR_IN
53137: IFFALSE 53195
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53139: LD_VAR 0 1
53143: PPUSH
53144: LD_STRING M
53146: PUSH
53147: LD_VAR 0 6
53151: PUSH
53152: LD_INT 1
53154: ARRAY
53155: PUSH
53156: LD_VAR 0 6
53160: PUSH
53161: LD_INT 2
53163: ARRAY
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: PPUSH
53189: CALL_OW 447
53193: GO 53136
53195: POP
53196: POP
// end ;
53197: LD_VAR 0 5
53201: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
53202: LD_EXP 31
53206: NOT
53207: IFFALSE 53257
53209: GO 53211
53211: DISABLE
// begin initHack := true ;
53212: LD_ADDR_EXP 31
53216: PUSH
53217: LD_INT 1
53219: ST_TO_ADDR
// hackTanks := [ ] ;
53220: LD_ADDR_EXP 32
53224: PUSH
53225: EMPTY
53226: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
53227: LD_ADDR_EXP 33
53231: PUSH
53232: EMPTY
53233: ST_TO_ADDR
// hackLimit := 3 ;
53234: LD_ADDR_EXP 34
53238: PUSH
53239: LD_INT 3
53241: ST_TO_ADDR
// hackDist := 12 ;
53242: LD_ADDR_EXP 35
53246: PUSH
53247: LD_INT 12
53249: ST_TO_ADDR
// hackCounter := [ ] ;
53250: LD_ADDR_EXP 36
53254: PUSH
53255: EMPTY
53256: ST_TO_ADDR
// end ;
53257: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
53258: LD_EXP 31
53262: PUSH
53263: LD_INT 34
53265: PUSH
53266: LD_EXP 98
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PPUSH
53275: CALL_OW 69
53279: AND
53280: IFFALSE 53535
53282: GO 53284
53284: DISABLE
53285: LD_INT 0
53287: PPUSH
53288: PPUSH
// begin enable ;
53289: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
53290: LD_ADDR_VAR 0 1
53294: PUSH
53295: LD_INT 34
53297: PUSH
53298: LD_EXP 98
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PPUSH
53307: CALL_OW 69
53311: PUSH
53312: FOR_IN
53313: IFFALSE 53533
// begin if not i in hackTanks then
53315: LD_VAR 0 1
53319: PUSH
53320: LD_EXP 32
53324: IN
53325: NOT
53326: IFFALSE 53409
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
53328: LD_ADDR_EXP 32
53332: PUSH
53333: LD_EXP 32
53337: PPUSH
53338: LD_EXP 32
53342: PUSH
53343: LD_INT 1
53345: PLUS
53346: PPUSH
53347: LD_VAR 0 1
53351: PPUSH
53352: CALL_OW 1
53356: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
53357: LD_ADDR_EXP 33
53361: PUSH
53362: LD_EXP 33
53366: PPUSH
53367: LD_EXP 33
53371: PUSH
53372: LD_INT 1
53374: PLUS
53375: PPUSH
53376: EMPTY
53377: PPUSH
53378: CALL_OW 1
53382: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
53383: LD_ADDR_EXP 36
53387: PUSH
53388: LD_EXP 36
53392: PPUSH
53393: LD_EXP 36
53397: PUSH
53398: LD_INT 1
53400: PLUS
53401: PPUSH
53402: EMPTY
53403: PPUSH
53404: CALL_OW 1
53408: ST_TO_ADDR
// end ; if not IsOk ( i ) then
53409: LD_VAR 0 1
53413: PPUSH
53414: CALL_OW 302
53418: NOT
53419: IFFALSE 53432
// begin HackUnlinkAll ( i ) ;
53421: LD_VAR 0 1
53425: PPUSH
53426: CALL 53538 0 1
// continue ;
53430: GO 53312
// end ; HackCheckCapturedStatus ( i ) ;
53432: LD_VAR 0 1
53436: PPUSH
53437: CALL 53981 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
53441: LD_ADDR_VAR 0 2
53445: PUSH
53446: LD_INT 81
53448: PUSH
53449: LD_VAR 0 1
53453: PPUSH
53454: CALL_OW 255
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 33
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 91
53475: PUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_EXP 35
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 50
53493: PUSH
53494: EMPTY
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: PPUSH
53503: CALL_OW 69
53507: ST_TO_ADDR
// if not tmp then
53508: LD_VAR 0 2
53512: NOT
53513: IFFALSE 53517
// continue ;
53515: GO 53312
// HackLink ( i , tmp ) ;
53517: LD_VAR 0 1
53521: PPUSH
53522: LD_VAR 0 2
53526: PPUSH
53527: CALL 53674 0 2
// end ;
53531: GO 53312
53533: POP
53534: POP
// end ;
53535: PPOPN 2
53537: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
53538: LD_INT 0
53540: PPUSH
53541: PPUSH
53542: PPUSH
// if not hack in hackTanks then
53543: LD_VAR 0 1
53547: PUSH
53548: LD_EXP 32
53552: IN
53553: NOT
53554: IFFALSE 53558
// exit ;
53556: GO 53669
// index := GetElementIndex ( hackTanks , hack ) ;
53558: LD_ADDR_VAR 0 4
53562: PUSH
53563: LD_EXP 32
53567: PPUSH
53568: LD_VAR 0 1
53572: PPUSH
53573: CALL 18091 0 2
53577: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
53578: LD_EXP 33
53582: PUSH
53583: LD_VAR 0 4
53587: ARRAY
53588: IFFALSE 53669
// begin for i in hackTanksCaptured [ index ] do
53590: LD_ADDR_VAR 0 3
53594: PUSH
53595: LD_EXP 33
53599: PUSH
53600: LD_VAR 0 4
53604: ARRAY
53605: PUSH
53606: FOR_IN
53607: IFFALSE 53633
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
53609: LD_VAR 0 3
53613: PUSH
53614: LD_INT 1
53616: ARRAY
53617: PPUSH
53618: LD_VAR 0 3
53622: PUSH
53623: LD_INT 2
53625: ARRAY
53626: PPUSH
53627: CALL_OW 235
53631: GO 53606
53633: POP
53634: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
53635: LD_ADDR_EXP 33
53639: PUSH
53640: LD_EXP 33
53644: PPUSH
53645: LD_VAR 0 4
53649: PPUSH
53650: EMPTY
53651: PPUSH
53652: CALL_OW 1
53656: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
53657: LD_VAR 0 1
53661: PPUSH
53662: LD_INT 0
53664: PPUSH
53665: CALL_OW 505
// end ; end ;
53669: LD_VAR 0 2
53673: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
53674: LD_INT 0
53676: PPUSH
53677: PPUSH
53678: PPUSH
// if not hack in hackTanks or not vehicles then
53679: LD_VAR 0 1
53683: PUSH
53684: LD_EXP 32
53688: IN
53689: NOT
53690: PUSH
53691: LD_VAR 0 2
53695: NOT
53696: OR
53697: IFFALSE 53701
// exit ;
53699: GO 53976
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
53701: LD_ADDR_VAR 0 2
53705: PUSH
53706: LD_VAR 0 1
53710: PPUSH
53711: LD_VAR 0 2
53715: PPUSH
53716: LD_INT 1
53718: PPUSH
53719: LD_INT 1
53721: PPUSH
53722: CALL 18741 0 4
53726: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
53727: LD_ADDR_VAR 0 5
53731: PUSH
53732: LD_EXP 32
53736: PPUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL 18091 0 2
53746: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
53747: LD_EXP 33
53751: PUSH
53752: LD_VAR 0 5
53756: ARRAY
53757: PUSH
53758: LD_EXP 34
53762: LESS
53763: IFFALSE 53952
// begin for i := 1 to vehicles do
53765: LD_ADDR_VAR 0 4
53769: PUSH
53770: DOUBLE
53771: LD_INT 1
53773: DEC
53774: ST_TO_ADDR
53775: LD_VAR 0 2
53779: PUSH
53780: FOR_TO
53781: IFFALSE 53950
// begin if hackTanksCaptured [ index ] = hackLimit then
53783: LD_EXP 33
53787: PUSH
53788: LD_VAR 0 5
53792: ARRAY
53793: PUSH
53794: LD_EXP 34
53798: EQUAL
53799: IFFALSE 53803
// break ;
53801: GO 53950
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53803: LD_ADDR_EXP 36
53807: PUSH
53808: LD_EXP 36
53812: PPUSH
53813: LD_VAR 0 5
53817: PPUSH
53818: LD_EXP 36
53822: PUSH
53823: LD_VAR 0 5
53827: ARRAY
53828: PUSH
53829: LD_INT 1
53831: PLUS
53832: PPUSH
53833: CALL_OW 1
53837: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53838: LD_ADDR_EXP 33
53842: PUSH
53843: LD_EXP 33
53847: PPUSH
53848: LD_VAR 0 5
53852: PUSH
53853: LD_EXP 33
53857: PUSH
53858: LD_VAR 0 5
53862: ARRAY
53863: PUSH
53864: LD_INT 1
53866: PLUS
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PPUSH
53872: LD_VAR 0 2
53876: PUSH
53877: LD_VAR 0 4
53881: ARRAY
53882: PUSH
53883: LD_VAR 0 2
53887: PUSH
53888: LD_VAR 0 4
53892: ARRAY
53893: PPUSH
53894: CALL_OW 255
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PPUSH
53903: CALL 18306 0 3
53907: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53908: LD_VAR 0 2
53912: PUSH
53913: LD_VAR 0 4
53917: ARRAY
53918: PPUSH
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL_OW 255
53928: PPUSH
53929: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53933: LD_VAR 0 2
53937: PUSH
53938: LD_VAR 0 4
53942: ARRAY
53943: PPUSH
53944: CALL_OW 141
// end ;
53948: GO 53780
53950: POP
53951: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53952: LD_VAR 0 1
53956: PPUSH
53957: LD_EXP 33
53961: PUSH
53962: LD_VAR 0 5
53966: ARRAY
53967: PUSH
53968: LD_INT 0
53970: PLUS
53971: PPUSH
53972: CALL_OW 505
// end ;
53976: LD_VAR 0 3
53980: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53981: LD_INT 0
53983: PPUSH
53984: PPUSH
53985: PPUSH
53986: PPUSH
// if not hack in hackTanks then
53987: LD_VAR 0 1
53991: PUSH
53992: LD_EXP 32
53996: IN
53997: NOT
53998: IFFALSE 54002
// exit ;
54000: GO 54242
// index := GetElementIndex ( hackTanks , hack ) ;
54002: LD_ADDR_VAR 0 4
54006: PUSH
54007: LD_EXP 32
54011: PPUSH
54012: LD_VAR 0 1
54016: PPUSH
54017: CALL 18091 0 2
54021: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54022: LD_ADDR_VAR 0 3
54026: PUSH
54027: DOUBLE
54028: LD_EXP 33
54032: PUSH
54033: LD_VAR 0 4
54037: ARRAY
54038: INC
54039: ST_TO_ADDR
54040: LD_INT 1
54042: PUSH
54043: FOR_DOWNTO
54044: IFFALSE 54216
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54046: LD_ADDR_VAR 0 5
54050: PUSH
54051: LD_EXP 33
54055: PUSH
54056: LD_VAR 0 4
54060: ARRAY
54061: PUSH
54062: LD_VAR 0 3
54066: ARRAY
54067: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
54068: LD_VAR 0 5
54072: PUSH
54073: LD_INT 1
54075: ARRAY
54076: PPUSH
54077: CALL_OW 302
54081: NOT
54082: PUSH
54083: LD_VAR 0 5
54087: PUSH
54088: LD_INT 1
54090: ARRAY
54091: PPUSH
54092: CALL_OW 255
54096: PUSH
54097: LD_VAR 0 1
54101: PPUSH
54102: CALL_OW 255
54106: NONEQUAL
54107: OR
54108: IFFALSE 54214
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
54110: LD_VAR 0 5
54114: PUSH
54115: LD_INT 1
54117: ARRAY
54118: PPUSH
54119: CALL_OW 305
54123: PUSH
54124: LD_VAR 0 5
54128: PUSH
54129: LD_INT 1
54131: ARRAY
54132: PPUSH
54133: CALL_OW 255
54137: PUSH
54138: LD_VAR 0 1
54142: PPUSH
54143: CALL_OW 255
54147: EQUAL
54148: AND
54149: IFFALSE 54173
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
54151: LD_VAR 0 5
54155: PUSH
54156: LD_INT 1
54158: ARRAY
54159: PPUSH
54160: LD_VAR 0 5
54164: PUSH
54165: LD_INT 2
54167: ARRAY
54168: PPUSH
54169: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
54173: LD_ADDR_EXP 33
54177: PUSH
54178: LD_EXP 33
54182: PPUSH
54183: LD_VAR 0 4
54187: PPUSH
54188: LD_EXP 33
54192: PUSH
54193: LD_VAR 0 4
54197: ARRAY
54198: PPUSH
54199: LD_VAR 0 3
54203: PPUSH
54204: CALL_OW 3
54208: PPUSH
54209: CALL_OW 1
54213: ST_TO_ADDR
// end ; end ;
54214: GO 54043
54216: POP
54217: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54218: LD_VAR 0 1
54222: PPUSH
54223: LD_EXP 33
54227: PUSH
54228: LD_VAR 0 4
54232: ARRAY
54233: PUSH
54234: LD_INT 0
54236: PLUS
54237: PPUSH
54238: CALL_OW 505
// end ;
54242: LD_VAR 0 2
54246: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
54247: LD_INT 0
54249: PPUSH
54250: PPUSH
54251: PPUSH
54252: PPUSH
// if not hack in hackTanks then
54253: LD_VAR 0 1
54257: PUSH
54258: LD_EXP 32
54262: IN
54263: NOT
54264: IFFALSE 54268
// exit ;
54266: GO 54353
// index := GetElementIndex ( hackTanks , hack ) ;
54268: LD_ADDR_VAR 0 5
54272: PUSH
54273: LD_EXP 32
54277: PPUSH
54278: LD_VAR 0 1
54282: PPUSH
54283: CALL 18091 0 2
54287: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
54288: LD_ADDR_VAR 0 4
54292: PUSH
54293: DOUBLE
54294: LD_INT 1
54296: DEC
54297: ST_TO_ADDR
54298: LD_EXP 33
54302: PUSH
54303: LD_VAR 0 5
54307: ARRAY
54308: PUSH
54309: FOR_TO
54310: IFFALSE 54351
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
54312: LD_EXP 33
54316: PUSH
54317: LD_VAR 0 5
54321: ARRAY
54322: PUSH
54323: LD_VAR 0 4
54327: ARRAY
54328: PUSH
54329: LD_INT 1
54331: ARRAY
54332: PUSH
54333: LD_VAR 0 2
54337: EQUAL
54338: IFFALSE 54349
// KillUnit ( vehicle ) ;
54340: LD_VAR 0 2
54344: PPUSH
54345: CALL_OW 66
54349: GO 54309
54351: POP
54352: POP
// end ;
54353: LD_VAR 0 3
54357: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
54358: LD_EXP 37
54362: NOT
54363: IFFALSE 54398
54365: GO 54367
54367: DISABLE
// begin initMiner := true ;
54368: LD_ADDR_EXP 37
54372: PUSH
54373: LD_INT 1
54375: ST_TO_ADDR
// minersList := [ ] ;
54376: LD_ADDR_EXP 38
54380: PUSH
54381: EMPTY
54382: ST_TO_ADDR
// minerMinesList := [ ] ;
54383: LD_ADDR_EXP 39
54387: PUSH
54388: EMPTY
54389: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
54390: LD_ADDR_EXP 40
54394: PUSH
54395: LD_INT 5
54397: ST_TO_ADDR
// end ;
54398: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
54399: LD_EXP 37
54403: PUSH
54404: LD_INT 34
54406: PUSH
54407: LD_EXP 103
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PPUSH
54416: CALL_OW 69
54420: AND
54421: IFFALSE 54884
54423: GO 54425
54425: DISABLE
54426: LD_INT 0
54428: PPUSH
54429: PPUSH
54430: PPUSH
54431: PPUSH
// begin enable ;
54432: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
54433: LD_ADDR_VAR 0 1
54437: PUSH
54438: LD_INT 34
54440: PUSH
54441: LD_EXP 103
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PPUSH
54450: CALL_OW 69
54454: PUSH
54455: FOR_IN
54456: IFFALSE 54528
// begin if not i in minersList then
54458: LD_VAR 0 1
54462: PUSH
54463: LD_EXP 38
54467: IN
54468: NOT
54469: IFFALSE 54526
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
54471: LD_ADDR_EXP 38
54475: PUSH
54476: LD_EXP 38
54480: PPUSH
54481: LD_EXP 38
54485: PUSH
54486: LD_INT 1
54488: PLUS
54489: PPUSH
54490: LD_VAR 0 1
54494: PPUSH
54495: CALL_OW 1
54499: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54500: LD_ADDR_EXP 39
54504: PUSH
54505: LD_EXP 39
54509: PPUSH
54510: LD_EXP 39
54514: PUSH
54515: LD_INT 1
54517: PLUS
54518: PPUSH
54519: EMPTY
54520: PPUSH
54521: CALL_OW 1
54525: ST_TO_ADDR
// end end ;
54526: GO 54455
54528: POP
54529: POP
// for i := minerMinesList downto 1 do
54530: LD_ADDR_VAR 0 1
54534: PUSH
54535: DOUBLE
54536: LD_EXP 39
54540: INC
54541: ST_TO_ADDR
54542: LD_INT 1
54544: PUSH
54545: FOR_DOWNTO
54546: IFFALSE 54882
// begin if IsLive ( minersList [ i ] ) then
54548: LD_EXP 38
54552: PUSH
54553: LD_VAR 0 1
54557: ARRAY
54558: PPUSH
54559: CALL_OW 300
54563: IFFALSE 54591
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
54565: LD_EXP 38
54569: PUSH
54570: LD_VAR 0 1
54574: ARRAY
54575: PPUSH
54576: LD_EXP 39
54580: PUSH
54581: LD_VAR 0 1
54585: ARRAY
54586: PPUSH
54587: CALL_OW 505
// if not minerMinesList [ i ] then
54591: LD_EXP 39
54595: PUSH
54596: LD_VAR 0 1
54600: ARRAY
54601: NOT
54602: IFFALSE 54606
// continue ;
54604: GO 54545
// for j := minerMinesList [ i ] downto 1 do
54606: LD_ADDR_VAR 0 2
54610: PUSH
54611: DOUBLE
54612: LD_EXP 39
54616: PUSH
54617: LD_VAR 0 1
54621: ARRAY
54622: INC
54623: ST_TO_ADDR
54624: LD_INT 1
54626: PUSH
54627: FOR_DOWNTO
54628: IFFALSE 54878
// begin side := GetSide ( minersList [ i ] ) ;
54630: LD_ADDR_VAR 0 3
54634: PUSH
54635: LD_EXP 38
54639: PUSH
54640: LD_VAR 0 1
54644: ARRAY
54645: PPUSH
54646: CALL_OW 255
54650: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54651: LD_ADDR_VAR 0 4
54655: PUSH
54656: LD_EXP 39
54660: PUSH
54661: LD_VAR 0 1
54665: ARRAY
54666: PUSH
54667: LD_VAR 0 2
54671: ARRAY
54672: PUSH
54673: LD_INT 1
54675: ARRAY
54676: PPUSH
54677: LD_EXP 39
54681: PUSH
54682: LD_VAR 0 1
54686: ARRAY
54687: PUSH
54688: LD_VAR 0 2
54692: ARRAY
54693: PUSH
54694: LD_INT 2
54696: ARRAY
54697: PPUSH
54698: CALL_OW 428
54702: ST_TO_ADDR
// if not tmp then
54703: LD_VAR 0 4
54707: NOT
54708: IFFALSE 54712
// continue ;
54710: GO 54627
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
54712: LD_VAR 0 4
54716: PUSH
54717: LD_INT 81
54719: PUSH
54720: LD_VAR 0 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PPUSH
54729: CALL_OW 69
54733: IN
54734: PUSH
54735: LD_EXP 39
54739: PUSH
54740: LD_VAR 0 1
54744: ARRAY
54745: PUSH
54746: LD_VAR 0 2
54750: ARRAY
54751: PUSH
54752: LD_INT 1
54754: ARRAY
54755: PPUSH
54756: LD_EXP 39
54760: PUSH
54761: LD_VAR 0 1
54765: ARRAY
54766: PUSH
54767: LD_VAR 0 2
54771: ARRAY
54772: PUSH
54773: LD_INT 2
54775: ARRAY
54776: PPUSH
54777: CALL_OW 458
54781: AND
54782: IFFALSE 54876
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54784: LD_EXP 39
54788: PUSH
54789: LD_VAR 0 1
54793: ARRAY
54794: PUSH
54795: LD_VAR 0 2
54799: ARRAY
54800: PUSH
54801: LD_INT 1
54803: ARRAY
54804: PPUSH
54805: LD_EXP 39
54809: PUSH
54810: LD_VAR 0 1
54814: ARRAY
54815: PUSH
54816: LD_VAR 0 2
54820: ARRAY
54821: PUSH
54822: LD_INT 2
54824: ARRAY
54825: PPUSH
54826: LD_VAR 0 3
54830: PPUSH
54831: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54835: LD_ADDR_EXP 39
54839: PUSH
54840: LD_EXP 39
54844: PPUSH
54845: LD_VAR 0 1
54849: PPUSH
54850: LD_EXP 39
54854: PUSH
54855: LD_VAR 0 1
54859: ARRAY
54860: PPUSH
54861: LD_VAR 0 2
54865: PPUSH
54866: CALL_OW 3
54870: PPUSH
54871: CALL_OW 1
54875: ST_TO_ADDR
// end ; end ;
54876: GO 54627
54878: POP
54879: POP
// end ;
54880: GO 54545
54882: POP
54883: POP
// end ;
54884: PPOPN 4
54886: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54887: LD_INT 0
54889: PPUSH
54890: PPUSH
// result := false ;
54891: LD_ADDR_VAR 0 4
54895: PUSH
54896: LD_INT 0
54898: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54899: LD_VAR 0 1
54903: PPUSH
54904: CALL_OW 264
54908: PUSH
54909: LD_EXP 103
54913: EQUAL
54914: NOT
54915: IFFALSE 54919
// exit ;
54917: GO 55159
// index := GetElementIndex ( minersList , unit ) ;
54919: LD_ADDR_VAR 0 5
54923: PUSH
54924: LD_EXP 38
54928: PPUSH
54929: LD_VAR 0 1
54933: PPUSH
54934: CALL 18091 0 2
54938: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54939: LD_EXP 39
54943: PUSH
54944: LD_VAR 0 5
54948: ARRAY
54949: PUSH
54950: LD_EXP 40
54954: GREATEREQUAL
54955: IFFALSE 54959
// exit ;
54957: GO 55159
// ComMoveXY ( unit , x , y ) ;
54959: LD_VAR 0 1
54963: PPUSH
54964: LD_VAR 0 2
54968: PPUSH
54969: LD_VAR 0 3
54973: PPUSH
54974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54978: LD_INT 35
54980: PPUSH
54981: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54985: LD_VAR 0 1
54989: PPUSH
54990: LD_VAR 0 2
54994: PPUSH
54995: LD_VAR 0 3
54999: PPUSH
55000: CALL 48863 0 3
55004: NOT
55005: PUSH
55006: LD_VAR 0 1
55010: PPUSH
55011: CALL_OW 314
55015: AND
55016: IFFALSE 55020
// exit ;
55018: GO 55159
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55020: LD_VAR 0 2
55024: PPUSH
55025: LD_VAR 0 3
55029: PPUSH
55030: CALL_OW 428
55034: PUSH
55035: LD_VAR 0 1
55039: EQUAL
55040: PUSH
55041: LD_VAR 0 1
55045: PPUSH
55046: CALL_OW 314
55050: NOT
55051: AND
55052: IFFALSE 54978
// PlaySoundXY ( x , y , PlantMine ) ;
55054: LD_VAR 0 2
55058: PPUSH
55059: LD_VAR 0 3
55063: PPUSH
55064: LD_STRING PlantMine
55066: PPUSH
55067: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
55071: LD_VAR 0 2
55075: PPUSH
55076: LD_VAR 0 3
55080: PPUSH
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 255
55090: PPUSH
55091: LD_INT 0
55093: PPUSH
55094: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
55098: LD_ADDR_EXP 39
55102: PUSH
55103: LD_EXP 39
55107: PPUSH
55108: LD_VAR 0 5
55112: PUSH
55113: LD_EXP 39
55117: PUSH
55118: LD_VAR 0 5
55122: ARRAY
55123: PUSH
55124: LD_INT 1
55126: PLUS
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PPUSH
55132: LD_VAR 0 2
55136: PUSH
55137: LD_VAR 0 3
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PPUSH
55146: CALL 18306 0 3
55150: ST_TO_ADDR
// result := true ;
55151: LD_ADDR_VAR 0 4
55155: PUSH
55156: LD_INT 1
55158: ST_TO_ADDR
// end ;
55159: LD_VAR 0 4
55163: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
55164: LD_INT 0
55166: PPUSH
55167: PPUSH
55168: PPUSH
// if not unit in minersList then
55169: LD_VAR 0 1
55173: PUSH
55174: LD_EXP 38
55178: IN
55179: NOT
55180: IFFALSE 55184
// exit ;
55182: GO 55576
// index := GetElementIndex ( minersList , unit ) ;
55184: LD_ADDR_VAR 0 6
55188: PUSH
55189: LD_EXP 38
55193: PPUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: CALL 18091 0 2
55203: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
55204: LD_ADDR_VAR 0 5
55208: PUSH
55209: DOUBLE
55210: LD_EXP 39
55214: PUSH
55215: LD_VAR 0 6
55219: ARRAY
55220: INC
55221: ST_TO_ADDR
55222: LD_INT 1
55224: PUSH
55225: FOR_DOWNTO
55226: IFFALSE 55387
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
55228: LD_EXP 39
55232: PUSH
55233: LD_VAR 0 6
55237: ARRAY
55238: PUSH
55239: LD_VAR 0 5
55243: ARRAY
55244: PUSH
55245: LD_INT 1
55247: ARRAY
55248: PUSH
55249: LD_VAR 0 2
55253: EQUAL
55254: PUSH
55255: LD_EXP 39
55259: PUSH
55260: LD_VAR 0 6
55264: ARRAY
55265: PUSH
55266: LD_VAR 0 5
55270: ARRAY
55271: PUSH
55272: LD_INT 2
55274: ARRAY
55275: PUSH
55276: LD_VAR 0 3
55280: EQUAL
55281: AND
55282: IFFALSE 55385
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
55284: LD_EXP 39
55288: PUSH
55289: LD_VAR 0 6
55293: ARRAY
55294: PUSH
55295: LD_VAR 0 5
55299: ARRAY
55300: PUSH
55301: LD_INT 1
55303: ARRAY
55304: PPUSH
55305: LD_EXP 39
55309: PUSH
55310: LD_VAR 0 6
55314: ARRAY
55315: PUSH
55316: LD_VAR 0 5
55320: ARRAY
55321: PUSH
55322: LD_INT 2
55324: ARRAY
55325: PPUSH
55326: LD_VAR 0 1
55330: PPUSH
55331: CALL_OW 255
55335: PPUSH
55336: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55340: LD_ADDR_EXP 39
55344: PUSH
55345: LD_EXP 39
55349: PPUSH
55350: LD_VAR 0 6
55354: PPUSH
55355: LD_EXP 39
55359: PUSH
55360: LD_VAR 0 6
55364: ARRAY
55365: PPUSH
55366: LD_VAR 0 5
55370: PPUSH
55371: CALL_OW 3
55375: PPUSH
55376: CALL_OW 1
55380: ST_TO_ADDR
// exit ;
55381: POP
55382: POP
55383: GO 55576
// end ; end ;
55385: GO 55225
55387: POP
55388: POP
// for i := minerMinesList [ index ] downto 1 do
55389: LD_ADDR_VAR 0 5
55393: PUSH
55394: DOUBLE
55395: LD_EXP 39
55399: PUSH
55400: LD_VAR 0 6
55404: ARRAY
55405: INC
55406: ST_TO_ADDR
55407: LD_INT 1
55409: PUSH
55410: FOR_DOWNTO
55411: IFFALSE 55574
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
55413: LD_EXP 39
55417: PUSH
55418: LD_VAR 0 6
55422: ARRAY
55423: PUSH
55424: LD_VAR 0 5
55428: ARRAY
55429: PUSH
55430: LD_INT 1
55432: ARRAY
55433: PPUSH
55434: LD_EXP 39
55438: PUSH
55439: LD_VAR 0 6
55443: ARRAY
55444: PUSH
55445: LD_VAR 0 5
55449: ARRAY
55450: PUSH
55451: LD_INT 2
55453: ARRAY
55454: PPUSH
55455: LD_VAR 0 2
55459: PPUSH
55460: LD_VAR 0 3
55464: PPUSH
55465: CALL_OW 298
55469: PUSH
55470: LD_INT 6
55472: LESS
55473: IFFALSE 55572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
55475: LD_EXP 39
55479: PUSH
55480: LD_VAR 0 6
55484: ARRAY
55485: PUSH
55486: LD_VAR 0 5
55490: ARRAY
55491: PUSH
55492: LD_INT 1
55494: ARRAY
55495: PPUSH
55496: LD_EXP 39
55500: PUSH
55501: LD_VAR 0 6
55505: ARRAY
55506: PUSH
55507: LD_VAR 0 5
55511: ARRAY
55512: PUSH
55513: LD_INT 2
55515: ARRAY
55516: PPUSH
55517: LD_VAR 0 1
55521: PPUSH
55522: CALL_OW 255
55526: PPUSH
55527: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55531: LD_ADDR_EXP 39
55535: PUSH
55536: LD_EXP 39
55540: PPUSH
55541: LD_VAR 0 6
55545: PPUSH
55546: LD_EXP 39
55550: PUSH
55551: LD_VAR 0 6
55555: ARRAY
55556: PPUSH
55557: LD_VAR 0 5
55561: PPUSH
55562: CALL_OW 3
55566: PPUSH
55567: CALL_OW 1
55571: ST_TO_ADDR
// end ; end ;
55572: GO 55410
55574: POP
55575: POP
// end ;
55576: LD_VAR 0 4
55580: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
55581: LD_INT 0
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
55592: LD_VAR 0 1
55596: PPUSH
55597: CALL_OW 264
55601: PUSH
55602: LD_EXP 103
55606: EQUAL
55607: NOT
55608: PUSH
55609: LD_VAR 0 1
55613: PUSH
55614: LD_EXP 38
55618: IN
55619: NOT
55620: OR
55621: IFFALSE 55625
// exit ;
55623: GO 55947
// index := GetElementIndex ( minersList , unit ) ;
55625: LD_ADDR_VAR 0 6
55629: PUSH
55630: LD_EXP 38
55634: PPUSH
55635: LD_VAR 0 1
55639: PPUSH
55640: CALL 18091 0 2
55644: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
55645: LD_ADDR_VAR 0 8
55649: PUSH
55650: LD_EXP 40
55654: PUSH
55655: LD_EXP 39
55659: PUSH
55660: LD_VAR 0 6
55664: ARRAY
55665: MINUS
55666: ST_TO_ADDR
// if not minesFreeAmount then
55667: LD_VAR 0 8
55671: NOT
55672: IFFALSE 55676
// exit ;
55674: GO 55947
// tmp := [ ] ;
55676: LD_ADDR_VAR 0 7
55680: PUSH
55681: EMPTY
55682: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
55683: LD_ADDR_VAR 0 5
55687: PUSH
55688: DOUBLE
55689: LD_INT 1
55691: DEC
55692: ST_TO_ADDR
55693: LD_VAR 0 8
55697: PUSH
55698: FOR_TO
55699: IFFALSE 55894
// begin _d := rand ( 0 , 5 ) ;
55701: LD_ADDR_VAR 0 11
55705: PUSH
55706: LD_INT 0
55708: PPUSH
55709: LD_INT 5
55711: PPUSH
55712: CALL_OW 12
55716: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
55717: LD_ADDR_VAR 0 12
55721: PUSH
55722: LD_INT 2
55724: PPUSH
55725: LD_INT 6
55727: PPUSH
55728: CALL_OW 12
55732: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
55733: LD_ADDR_VAR 0 9
55737: PUSH
55738: LD_VAR 0 2
55742: PPUSH
55743: LD_VAR 0 11
55747: PPUSH
55748: LD_VAR 0 12
55752: PPUSH
55753: CALL_OW 272
55757: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55758: LD_ADDR_VAR 0 10
55762: PUSH
55763: LD_VAR 0 3
55767: PPUSH
55768: LD_VAR 0 11
55772: PPUSH
55773: LD_VAR 0 12
55777: PPUSH
55778: CALL_OW 273
55782: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55783: LD_VAR 0 9
55787: PPUSH
55788: LD_VAR 0 10
55792: PPUSH
55793: CALL_OW 488
55797: PUSH
55798: LD_VAR 0 9
55802: PUSH
55803: LD_VAR 0 10
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_VAR 0 7
55816: IN
55817: NOT
55818: AND
55819: PUSH
55820: LD_VAR 0 9
55824: PPUSH
55825: LD_VAR 0 10
55829: PPUSH
55830: CALL_OW 458
55834: NOT
55835: AND
55836: IFFALSE 55878
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55838: LD_ADDR_VAR 0 7
55842: PUSH
55843: LD_VAR 0 7
55847: PPUSH
55848: LD_VAR 0 7
55852: PUSH
55853: LD_INT 1
55855: PLUS
55856: PPUSH
55857: LD_VAR 0 9
55861: PUSH
55862: LD_VAR 0 10
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PPUSH
55871: CALL_OW 1
55875: ST_TO_ADDR
55876: GO 55892
// i := i - 1 ;
55878: LD_ADDR_VAR 0 5
55882: PUSH
55883: LD_VAR 0 5
55887: PUSH
55888: LD_INT 1
55890: MINUS
55891: ST_TO_ADDR
// end ;
55892: GO 55698
55894: POP
55895: POP
// for i in tmp do
55896: LD_ADDR_VAR 0 5
55900: PUSH
55901: LD_VAR 0 7
55905: PUSH
55906: FOR_IN
55907: IFFALSE 55945
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55909: LD_VAR 0 1
55913: PPUSH
55914: LD_VAR 0 5
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: PPUSH
55923: LD_VAR 0 5
55927: PUSH
55928: LD_INT 2
55930: ARRAY
55931: PPUSH
55932: CALL 54887 0 3
55936: NOT
55937: IFFALSE 55943
// exit ;
55939: POP
55940: POP
55941: GO 55947
55943: GO 55906
55945: POP
55946: POP
// end ;
55947: LD_VAR 0 4
55951: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
55952: LD_INT 0
55954: PPUSH
55955: PPUSH
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
// if not GetClass ( unit ) = class_sniper then
55961: LD_VAR 0 1
55965: PPUSH
55966: CALL_OW 257
55970: PUSH
55971: LD_INT 5
55973: EQUAL
55974: NOT
55975: IFFALSE 55979
// exit ;
55977: GO 56367
// dist := 8 ;
55979: LD_ADDR_VAR 0 5
55983: PUSH
55984: LD_INT 8
55986: ST_TO_ADDR
// viewRange := 12 ;
55987: LD_ADDR_VAR 0 7
55991: PUSH
55992: LD_INT 12
55994: ST_TO_ADDR
// side := GetSide ( unit ) ;
55995: LD_ADDR_VAR 0 6
55999: PUSH
56000: LD_VAR 0 1
56004: PPUSH
56005: CALL_OW 255
56009: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56010: LD_INT 61
56012: PPUSH
56013: LD_VAR 0 6
56017: PPUSH
56018: CALL_OW 321
56022: PUSH
56023: LD_INT 2
56025: EQUAL
56026: IFFALSE 56036
// viewRange := 16 ;
56028: LD_ADDR_VAR 0 7
56032: PUSH
56033: LD_INT 16
56035: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56036: LD_VAR 0 1
56040: PPUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: LD_VAR 0 3
56050: PPUSH
56051: CALL_OW 297
56055: PUSH
56056: LD_VAR 0 5
56060: GREATER
56061: IFFALSE 56140
// begin ComMoveXY ( unit , x , y ) ;
56063: LD_VAR 0 1
56067: PPUSH
56068: LD_VAR 0 2
56072: PPUSH
56073: LD_VAR 0 3
56077: PPUSH
56078: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56082: LD_INT 35
56084: PPUSH
56085: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
56089: LD_VAR 0 1
56093: PPUSH
56094: LD_VAR 0 2
56098: PPUSH
56099: LD_VAR 0 3
56103: PPUSH
56104: CALL 48863 0 3
56108: NOT
56109: IFFALSE 56113
// exit ;
56111: GO 56367
// until GetDistUnitXY ( unit , x , y ) < dist ;
56113: LD_VAR 0 1
56117: PPUSH
56118: LD_VAR 0 2
56122: PPUSH
56123: LD_VAR 0 3
56127: PPUSH
56128: CALL_OW 297
56132: PUSH
56133: LD_VAR 0 5
56137: LESS
56138: IFFALSE 56082
// end ; ComTurnXY ( unit , x , y ) ;
56140: LD_VAR 0 1
56144: PPUSH
56145: LD_VAR 0 2
56149: PPUSH
56150: LD_VAR 0 3
56154: PPUSH
56155: CALL_OW 118
// wait ( 5 ) ;
56159: LD_INT 5
56161: PPUSH
56162: CALL_OW 67
// _d := GetDir ( unit ) ;
56166: LD_ADDR_VAR 0 10
56170: PUSH
56171: LD_VAR 0 1
56175: PPUSH
56176: CALL_OW 254
56180: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
56181: LD_ADDR_VAR 0 8
56185: PUSH
56186: LD_VAR 0 1
56190: PPUSH
56191: CALL_OW 250
56195: PPUSH
56196: LD_VAR 0 10
56200: PPUSH
56201: LD_VAR 0 5
56205: PPUSH
56206: CALL_OW 272
56210: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
56211: LD_ADDR_VAR 0 9
56215: PUSH
56216: LD_VAR 0 1
56220: PPUSH
56221: CALL_OW 251
56225: PPUSH
56226: LD_VAR 0 10
56230: PPUSH
56231: LD_VAR 0 5
56235: PPUSH
56236: CALL_OW 273
56240: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56241: LD_VAR 0 8
56245: PPUSH
56246: LD_VAR 0 9
56250: PPUSH
56251: CALL_OW 488
56255: NOT
56256: IFFALSE 56260
// exit ;
56258: GO 56367
// ComAnimCustom ( unit , 1 ) ;
56260: LD_VAR 0 1
56264: PPUSH
56265: LD_INT 1
56267: PPUSH
56268: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
56272: LD_VAR 0 8
56276: PPUSH
56277: LD_VAR 0 9
56281: PPUSH
56282: LD_VAR 0 6
56286: PPUSH
56287: LD_VAR 0 7
56291: PPUSH
56292: CALL_OW 330
// repeat wait ( 1 ) ;
56296: LD_INT 1
56298: PPUSH
56299: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
56303: LD_VAR 0 1
56307: PPUSH
56308: CALL_OW 316
56312: PUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 314
56322: OR
56323: PUSH
56324: LD_VAR 0 1
56328: PPUSH
56329: CALL_OW 302
56333: NOT
56334: OR
56335: PUSH
56336: LD_VAR 0 1
56340: PPUSH
56341: CALL_OW 301
56345: OR
56346: IFFALSE 56296
// RemoveSeeing ( _x , _y , side ) ;
56348: LD_VAR 0 8
56352: PPUSH
56353: LD_VAR 0 9
56357: PPUSH
56358: LD_VAR 0 6
56362: PPUSH
56363: CALL_OW 331
// end ; end_of_file
56367: LD_VAR 0 4
56371: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56372: LD_INT 0
56374: PPUSH
// if p2 = 100 then
56375: LD_VAR 0 2
56379: PUSH
56380: LD_INT 100
56382: EQUAL
56383: IFFALSE 57332
// begin if not StreamModeActive then
56385: LD_EXP 41
56389: NOT
56390: IFFALSE 56400
// StreamModeActive := true ;
56392: LD_ADDR_EXP 41
56396: PUSH
56397: LD_INT 1
56399: ST_TO_ADDR
// if p3 = 0 then
56400: LD_VAR 0 3
56404: PUSH
56405: LD_INT 0
56407: EQUAL
56408: IFFALSE 56414
// InitStreamMode ;
56410: CALL 57492 0 0
// if p3 = 1 then
56414: LD_VAR 0 3
56418: PUSH
56419: LD_INT 1
56421: EQUAL
56422: IFFALSE 56432
// sRocket := true ;
56424: LD_ADDR_EXP 46
56428: PUSH
56429: LD_INT 1
56431: ST_TO_ADDR
// if p3 = 2 then
56432: LD_VAR 0 3
56436: PUSH
56437: LD_INT 2
56439: EQUAL
56440: IFFALSE 56450
// sSpeed := true ;
56442: LD_ADDR_EXP 45
56446: PUSH
56447: LD_INT 1
56449: ST_TO_ADDR
// if p3 = 3 then
56450: LD_VAR 0 3
56454: PUSH
56455: LD_INT 3
56457: EQUAL
56458: IFFALSE 56468
// sEngine := true ;
56460: LD_ADDR_EXP 47
56464: PUSH
56465: LD_INT 1
56467: ST_TO_ADDR
// if p3 = 4 then
56468: LD_VAR 0 3
56472: PUSH
56473: LD_INT 4
56475: EQUAL
56476: IFFALSE 56486
// sSpec := true ;
56478: LD_ADDR_EXP 44
56482: PUSH
56483: LD_INT 1
56485: ST_TO_ADDR
// if p3 = 5 then
56486: LD_VAR 0 3
56490: PUSH
56491: LD_INT 5
56493: EQUAL
56494: IFFALSE 56504
// sLevel := true ;
56496: LD_ADDR_EXP 48
56500: PUSH
56501: LD_INT 1
56503: ST_TO_ADDR
// if p3 = 6 then
56504: LD_VAR 0 3
56508: PUSH
56509: LD_INT 6
56511: EQUAL
56512: IFFALSE 56522
// sArmoury := true ;
56514: LD_ADDR_EXP 49
56518: PUSH
56519: LD_INT 1
56521: ST_TO_ADDR
// if p3 = 7 then
56522: LD_VAR 0 3
56526: PUSH
56527: LD_INT 7
56529: EQUAL
56530: IFFALSE 56540
// sRadar := true ;
56532: LD_ADDR_EXP 50
56536: PUSH
56537: LD_INT 1
56539: ST_TO_ADDR
// if p3 = 8 then
56540: LD_VAR 0 3
56544: PUSH
56545: LD_INT 8
56547: EQUAL
56548: IFFALSE 56558
// sBunker := true ;
56550: LD_ADDR_EXP 51
56554: PUSH
56555: LD_INT 1
56557: ST_TO_ADDR
// if p3 = 9 then
56558: LD_VAR 0 3
56562: PUSH
56563: LD_INT 9
56565: EQUAL
56566: IFFALSE 56576
// sHack := true ;
56568: LD_ADDR_EXP 52
56572: PUSH
56573: LD_INT 1
56575: ST_TO_ADDR
// if p3 = 10 then
56576: LD_VAR 0 3
56580: PUSH
56581: LD_INT 10
56583: EQUAL
56584: IFFALSE 56594
// sFire := true ;
56586: LD_ADDR_EXP 53
56590: PUSH
56591: LD_INT 1
56593: ST_TO_ADDR
// if p3 = 11 then
56594: LD_VAR 0 3
56598: PUSH
56599: LD_INT 11
56601: EQUAL
56602: IFFALSE 56612
// sRefresh := true ;
56604: LD_ADDR_EXP 54
56608: PUSH
56609: LD_INT 1
56611: ST_TO_ADDR
// if p3 = 12 then
56612: LD_VAR 0 3
56616: PUSH
56617: LD_INT 12
56619: EQUAL
56620: IFFALSE 56630
// sExp := true ;
56622: LD_ADDR_EXP 55
56626: PUSH
56627: LD_INT 1
56629: ST_TO_ADDR
// if p3 = 13 then
56630: LD_VAR 0 3
56634: PUSH
56635: LD_INT 13
56637: EQUAL
56638: IFFALSE 56648
// sDepot := true ;
56640: LD_ADDR_EXP 56
56644: PUSH
56645: LD_INT 1
56647: ST_TO_ADDR
// if p3 = 14 then
56648: LD_VAR 0 3
56652: PUSH
56653: LD_INT 14
56655: EQUAL
56656: IFFALSE 56666
// sFlag := true ;
56658: LD_ADDR_EXP 57
56662: PUSH
56663: LD_INT 1
56665: ST_TO_ADDR
// if p3 = 15 then
56666: LD_VAR 0 3
56670: PUSH
56671: LD_INT 15
56673: EQUAL
56674: IFFALSE 56684
// sKamikadze := true ;
56676: LD_ADDR_EXP 65
56680: PUSH
56681: LD_INT 1
56683: ST_TO_ADDR
// if p3 = 16 then
56684: LD_VAR 0 3
56688: PUSH
56689: LD_INT 16
56691: EQUAL
56692: IFFALSE 56702
// sTroll := true ;
56694: LD_ADDR_EXP 66
56698: PUSH
56699: LD_INT 1
56701: ST_TO_ADDR
// if p3 = 17 then
56702: LD_VAR 0 3
56706: PUSH
56707: LD_INT 17
56709: EQUAL
56710: IFFALSE 56720
// sSlow := true ;
56712: LD_ADDR_EXP 67
56716: PUSH
56717: LD_INT 1
56719: ST_TO_ADDR
// if p3 = 18 then
56720: LD_VAR 0 3
56724: PUSH
56725: LD_INT 18
56727: EQUAL
56728: IFFALSE 56738
// sLack := true ;
56730: LD_ADDR_EXP 68
56734: PUSH
56735: LD_INT 1
56737: ST_TO_ADDR
// if p3 = 19 then
56738: LD_VAR 0 3
56742: PUSH
56743: LD_INT 19
56745: EQUAL
56746: IFFALSE 56756
// sTank := true ;
56748: LD_ADDR_EXP 70
56752: PUSH
56753: LD_INT 1
56755: ST_TO_ADDR
// if p3 = 20 then
56756: LD_VAR 0 3
56760: PUSH
56761: LD_INT 20
56763: EQUAL
56764: IFFALSE 56774
// sRemote := true ;
56766: LD_ADDR_EXP 71
56770: PUSH
56771: LD_INT 1
56773: ST_TO_ADDR
// if p3 = 21 then
56774: LD_VAR 0 3
56778: PUSH
56779: LD_INT 21
56781: EQUAL
56782: IFFALSE 56792
// sPowell := true ;
56784: LD_ADDR_EXP 72
56788: PUSH
56789: LD_INT 1
56791: ST_TO_ADDR
// if p3 = 22 then
56792: LD_VAR 0 3
56796: PUSH
56797: LD_INT 22
56799: EQUAL
56800: IFFALSE 56810
// sTeleport := true ;
56802: LD_ADDR_EXP 75
56806: PUSH
56807: LD_INT 1
56809: ST_TO_ADDR
// if p3 = 23 then
56810: LD_VAR 0 3
56814: PUSH
56815: LD_INT 23
56817: EQUAL
56818: IFFALSE 56828
// sOilTower := true ;
56820: LD_ADDR_EXP 77
56824: PUSH
56825: LD_INT 1
56827: ST_TO_ADDR
// if p3 = 24 then
56828: LD_VAR 0 3
56832: PUSH
56833: LD_INT 24
56835: EQUAL
56836: IFFALSE 56846
// sShovel := true ;
56838: LD_ADDR_EXP 78
56842: PUSH
56843: LD_INT 1
56845: ST_TO_ADDR
// if p3 = 25 then
56846: LD_VAR 0 3
56850: PUSH
56851: LD_INT 25
56853: EQUAL
56854: IFFALSE 56864
// sSheik := true ;
56856: LD_ADDR_EXP 79
56860: PUSH
56861: LD_INT 1
56863: ST_TO_ADDR
// if p3 = 26 then
56864: LD_VAR 0 3
56868: PUSH
56869: LD_INT 26
56871: EQUAL
56872: IFFALSE 56882
// sEarthquake := true ;
56874: LD_ADDR_EXP 81
56878: PUSH
56879: LD_INT 1
56881: ST_TO_ADDR
// if p3 = 27 then
56882: LD_VAR 0 3
56886: PUSH
56887: LD_INT 27
56889: EQUAL
56890: IFFALSE 56900
// sAI := true ;
56892: LD_ADDR_EXP 82
56896: PUSH
56897: LD_INT 1
56899: ST_TO_ADDR
// if p3 = 28 then
56900: LD_VAR 0 3
56904: PUSH
56905: LD_INT 28
56907: EQUAL
56908: IFFALSE 56918
// sCargo := true ;
56910: LD_ADDR_EXP 85
56914: PUSH
56915: LD_INT 1
56917: ST_TO_ADDR
// if p3 = 29 then
56918: LD_VAR 0 3
56922: PUSH
56923: LD_INT 29
56925: EQUAL
56926: IFFALSE 56936
// sDLaser := true ;
56928: LD_ADDR_EXP 86
56932: PUSH
56933: LD_INT 1
56935: ST_TO_ADDR
// if p3 = 30 then
56936: LD_VAR 0 3
56940: PUSH
56941: LD_INT 30
56943: EQUAL
56944: IFFALSE 56954
// sExchange := true ;
56946: LD_ADDR_EXP 87
56950: PUSH
56951: LD_INT 1
56953: ST_TO_ADDR
// if p3 = 31 then
56954: LD_VAR 0 3
56958: PUSH
56959: LD_INT 31
56961: EQUAL
56962: IFFALSE 56972
// sFac := true ;
56964: LD_ADDR_EXP 88
56968: PUSH
56969: LD_INT 1
56971: ST_TO_ADDR
// if p3 = 32 then
56972: LD_VAR 0 3
56976: PUSH
56977: LD_INT 32
56979: EQUAL
56980: IFFALSE 56990
// sPower := true ;
56982: LD_ADDR_EXP 89
56986: PUSH
56987: LD_INT 1
56989: ST_TO_ADDR
// if p3 = 33 then
56990: LD_VAR 0 3
56994: PUSH
56995: LD_INT 33
56997: EQUAL
56998: IFFALSE 57008
// sRandom := true ;
57000: LD_ADDR_EXP 90
57004: PUSH
57005: LD_INT 1
57007: ST_TO_ADDR
// if p3 = 34 then
57008: LD_VAR 0 3
57012: PUSH
57013: LD_INT 34
57015: EQUAL
57016: IFFALSE 57026
// sShield := true ;
57018: LD_ADDR_EXP 91
57022: PUSH
57023: LD_INT 1
57025: ST_TO_ADDR
// if p3 = 35 then
57026: LD_VAR 0 3
57030: PUSH
57031: LD_INT 35
57033: EQUAL
57034: IFFALSE 57044
// sTime := true ;
57036: LD_ADDR_EXP 92
57040: PUSH
57041: LD_INT 1
57043: ST_TO_ADDR
// if p3 = 36 then
57044: LD_VAR 0 3
57048: PUSH
57049: LD_INT 36
57051: EQUAL
57052: IFFALSE 57062
// sTools := true ;
57054: LD_ADDR_EXP 93
57058: PUSH
57059: LD_INT 1
57061: ST_TO_ADDR
// if p3 = 101 then
57062: LD_VAR 0 3
57066: PUSH
57067: LD_INT 101
57069: EQUAL
57070: IFFALSE 57080
// sSold := true ;
57072: LD_ADDR_EXP 58
57076: PUSH
57077: LD_INT 1
57079: ST_TO_ADDR
// if p3 = 102 then
57080: LD_VAR 0 3
57084: PUSH
57085: LD_INT 102
57087: EQUAL
57088: IFFALSE 57098
// sDiff := true ;
57090: LD_ADDR_EXP 59
57094: PUSH
57095: LD_INT 1
57097: ST_TO_ADDR
// if p3 = 103 then
57098: LD_VAR 0 3
57102: PUSH
57103: LD_INT 103
57105: EQUAL
57106: IFFALSE 57116
// sFog := true ;
57108: LD_ADDR_EXP 62
57112: PUSH
57113: LD_INT 1
57115: ST_TO_ADDR
// if p3 = 104 then
57116: LD_VAR 0 3
57120: PUSH
57121: LD_INT 104
57123: EQUAL
57124: IFFALSE 57134
// sReset := true ;
57126: LD_ADDR_EXP 63
57130: PUSH
57131: LD_INT 1
57133: ST_TO_ADDR
// if p3 = 105 then
57134: LD_VAR 0 3
57138: PUSH
57139: LD_INT 105
57141: EQUAL
57142: IFFALSE 57152
// sSun := true ;
57144: LD_ADDR_EXP 64
57148: PUSH
57149: LD_INT 1
57151: ST_TO_ADDR
// if p3 = 106 then
57152: LD_VAR 0 3
57156: PUSH
57157: LD_INT 106
57159: EQUAL
57160: IFFALSE 57170
// sTiger := true ;
57162: LD_ADDR_EXP 60
57166: PUSH
57167: LD_INT 1
57169: ST_TO_ADDR
// if p3 = 107 then
57170: LD_VAR 0 3
57174: PUSH
57175: LD_INT 107
57177: EQUAL
57178: IFFALSE 57188
// sBomb := true ;
57180: LD_ADDR_EXP 61
57184: PUSH
57185: LD_INT 1
57187: ST_TO_ADDR
// if p3 = 108 then
57188: LD_VAR 0 3
57192: PUSH
57193: LD_INT 108
57195: EQUAL
57196: IFFALSE 57206
// sWound := true ;
57198: LD_ADDR_EXP 69
57202: PUSH
57203: LD_INT 1
57205: ST_TO_ADDR
// if p3 = 109 then
57206: LD_VAR 0 3
57210: PUSH
57211: LD_INT 109
57213: EQUAL
57214: IFFALSE 57224
// sBetray := true ;
57216: LD_ADDR_EXP 73
57220: PUSH
57221: LD_INT 1
57223: ST_TO_ADDR
// if p3 = 110 then
57224: LD_VAR 0 3
57228: PUSH
57229: LD_INT 110
57231: EQUAL
57232: IFFALSE 57242
// sContamin := true ;
57234: LD_ADDR_EXP 74
57238: PUSH
57239: LD_INT 1
57241: ST_TO_ADDR
// if p3 = 111 then
57242: LD_VAR 0 3
57246: PUSH
57247: LD_INT 111
57249: EQUAL
57250: IFFALSE 57260
// sOil := true ;
57252: LD_ADDR_EXP 76
57256: PUSH
57257: LD_INT 1
57259: ST_TO_ADDR
// if p3 = 112 then
57260: LD_VAR 0 3
57264: PUSH
57265: LD_INT 112
57267: EQUAL
57268: IFFALSE 57278
// sStu := true ;
57270: LD_ADDR_EXP 80
57274: PUSH
57275: LD_INT 1
57277: ST_TO_ADDR
// if p3 = 113 then
57278: LD_VAR 0 3
57282: PUSH
57283: LD_INT 113
57285: EQUAL
57286: IFFALSE 57296
// sBazooka := true ;
57288: LD_ADDR_EXP 83
57292: PUSH
57293: LD_INT 1
57295: ST_TO_ADDR
// if p3 = 114 then
57296: LD_VAR 0 3
57300: PUSH
57301: LD_INT 114
57303: EQUAL
57304: IFFALSE 57314
// sMortar := true ;
57306: LD_ADDR_EXP 84
57310: PUSH
57311: LD_INT 1
57313: ST_TO_ADDR
// if p3 = 115 then
57314: LD_VAR 0 3
57318: PUSH
57319: LD_INT 115
57321: EQUAL
57322: IFFALSE 57332
// sRanger := true ;
57324: LD_ADDR_EXP 94
57328: PUSH
57329: LD_INT 1
57331: ST_TO_ADDR
// end ; if p2 = 101 then
57332: LD_VAR 0 2
57336: PUSH
57337: LD_INT 101
57339: EQUAL
57340: IFFALSE 57468
// begin case p3 of 1 :
57342: LD_VAR 0 3
57346: PUSH
57347: LD_INT 1
57349: DOUBLE
57350: EQUAL
57351: IFTRUE 57355
57353: GO 57362
57355: POP
// hHackUnlimitedResources ; 2 :
57356: CALL 68505 0 0
57360: GO 57468
57362: LD_INT 2
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57370
57368: GO 57377
57370: POP
// hHackSetLevel10 ; 3 :
57371: CALL 68638 0 0
57375: GO 57468
57377: LD_INT 3
57379: DOUBLE
57380: EQUAL
57381: IFTRUE 57385
57383: GO 57392
57385: POP
// hHackSetLevel10YourUnits ; 4 :
57386: CALL 68723 0 0
57390: GO 57468
57392: LD_INT 4
57394: DOUBLE
57395: EQUAL
57396: IFTRUE 57400
57398: GO 57407
57400: POP
// hHackInvincible ; 5 :
57401: CALL 69171 0 0
57405: GO 57468
57407: LD_INT 5
57409: DOUBLE
57410: EQUAL
57411: IFTRUE 57415
57413: GO 57422
57415: POP
// hHackInvisible ; 6 :
57416: CALL 69282 0 0
57420: GO 57468
57422: LD_INT 6
57424: DOUBLE
57425: EQUAL
57426: IFTRUE 57430
57428: GO 57437
57430: POP
// hHackChangeYourSide ; 7 :
57431: CALL 69339 0 0
57435: GO 57468
57437: LD_INT 7
57439: DOUBLE
57440: EQUAL
57441: IFTRUE 57445
57443: GO 57452
57445: POP
// hHackChangeUnitSide ; 8 :
57446: CALL 69381 0 0
57450: GO 57468
57452: LD_INT 8
57454: DOUBLE
57455: EQUAL
57456: IFTRUE 57460
57458: GO 57467
57460: POP
// hHackFog ; end ;
57461: CALL 69482 0 0
57465: GO 57468
57467: POP
// end ; end ;
57468: LD_VAR 0 7
57472: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
57473: GO 57475
57475: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
57476: LD_STRING initStreamRollete();
57478: PPUSH
57479: CALL_OW 559
// InitStreamMode ;
57483: CALL 57492 0 0
// DefineStreamItems ( ) ;
57487: CALL 57932 0 0
// end ;
57491: END
// function InitStreamMode ; begin
57492: LD_INT 0
57494: PPUSH
// streamModeActive := false ;
57495: LD_ADDR_EXP 41
57499: PUSH
57500: LD_INT 0
57502: ST_TO_ADDR
// normalCounter := 36 ;
57503: LD_ADDR_EXP 42
57507: PUSH
57508: LD_INT 36
57510: ST_TO_ADDR
// hardcoreCounter := 16 ;
57511: LD_ADDR_EXP 43
57515: PUSH
57516: LD_INT 16
57518: ST_TO_ADDR
// sRocket := false ;
57519: LD_ADDR_EXP 46
57523: PUSH
57524: LD_INT 0
57526: ST_TO_ADDR
// sSpeed := false ;
57527: LD_ADDR_EXP 45
57531: PUSH
57532: LD_INT 0
57534: ST_TO_ADDR
// sEngine := false ;
57535: LD_ADDR_EXP 47
57539: PUSH
57540: LD_INT 0
57542: ST_TO_ADDR
// sSpec := false ;
57543: LD_ADDR_EXP 44
57547: PUSH
57548: LD_INT 0
57550: ST_TO_ADDR
// sLevel := false ;
57551: LD_ADDR_EXP 48
57555: PUSH
57556: LD_INT 0
57558: ST_TO_ADDR
// sArmoury := false ;
57559: LD_ADDR_EXP 49
57563: PUSH
57564: LD_INT 0
57566: ST_TO_ADDR
// sRadar := false ;
57567: LD_ADDR_EXP 50
57571: PUSH
57572: LD_INT 0
57574: ST_TO_ADDR
// sBunker := false ;
57575: LD_ADDR_EXP 51
57579: PUSH
57580: LD_INT 0
57582: ST_TO_ADDR
// sHack := false ;
57583: LD_ADDR_EXP 52
57587: PUSH
57588: LD_INT 0
57590: ST_TO_ADDR
// sFire := false ;
57591: LD_ADDR_EXP 53
57595: PUSH
57596: LD_INT 0
57598: ST_TO_ADDR
// sRefresh := false ;
57599: LD_ADDR_EXP 54
57603: PUSH
57604: LD_INT 0
57606: ST_TO_ADDR
// sExp := false ;
57607: LD_ADDR_EXP 55
57611: PUSH
57612: LD_INT 0
57614: ST_TO_ADDR
// sDepot := false ;
57615: LD_ADDR_EXP 56
57619: PUSH
57620: LD_INT 0
57622: ST_TO_ADDR
// sFlag := false ;
57623: LD_ADDR_EXP 57
57627: PUSH
57628: LD_INT 0
57630: ST_TO_ADDR
// sKamikadze := false ;
57631: LD_ADDR_EXP 65
57635: PUSH
57636: LD_INT 0
57638: ST_TO_ADDR
// sTroll := false ;
57639: LD_ADDR_EXP 66
57643: PUSH
57644: LD_INT 0
57646: ST_TO_ADDR
// sSlow := false ;
57647: LD_ADDR_EXP 67
57651: PUSH
57652: LD_INT 0
57654: ST_TO_ADDR
// sLack := false ;
57655: LD_ADDR_EXP 68
57659: PUSH
57660: LD_INT 0
57662: ST_TO_ADDR
// sTank := false ;
57663: LD_ADDR_EXP 70
57667: PUSH
57668: LD_INT 0
57670: ST_TO_ADDR
// sRemote := false ;
57671: LD_ADDR_EXP 71
57675: PUSH
57676: LD_INT 0
57678: ST_TO_ADDR
// sPowell := false ;
57679: LD_ADDR_EXP 72
57683: PUSH
57684: LD_INT 0
57686: ST_TO_ADDR
// sTeleport := false ;
57687: LD_ADDR_EXP 75
57691: PUSH
57692: LD_INT 0
57694: ST_TO_ADDR
// sOilTower := false ;
57695: LD_ADDR_EXP 77
57699: PUSH
57700: LD_INT 0
57702: ST_TO_ADDR
// sShovel := false ;
57703: LD_ADDR_EXP 78
57707: PUSH
57708: LD_INT 0
57710: ST_TO_ADDR
// sSheik := false ;
57711: LD_ADDR_EXP 79
57715: PUSH
57716: LD_INT 0
57718: ST_TO_ADDR
// sEarthquake := false ;
57719: LD_ADDR_EXP 81
57723: PUSH
57724: LD_INT 0
57726: ST_TO_ADDR
// sAI := false ;
57727: LD_ADDR_EXP 82
57731: PUSH
57732: LD_INT 0
57734: ST_TO_ADDR
// sCargo := false ;
57735: LD_ADDR_EXP 85
57739: PUSH
57740: LD_INT 0
57742: ST_TO_ADDR
// sDLaser := false ;
57743: LD_ADDR_EXP 86
57747: PUSH
57748: LD_INT 0
57750: ST_TO_ADDR
// sExchange := false ;
57751: LD_ADDR_EXP 87
57755: PUSH
57756: LD_INT 0
57758: ST_TO_ADDR
// sFac := false ;
57759: LD_ADDR_EXP 88
57763: PUSH
57764: LD_INT 0
57766: ST_TO_ADDR
// sPower := false ;
57767: LD_ADDR_EXP 89
57771: PUSH
57772: LD_INT 0
57774: ST_TO_ADDR
// sRandom := false ;
57775: LD_ADDR_EXP 90
57779: PUSH
57780: LD_INT 0
57782: ST_TO_ADDR
// sShield := false ;
57783: LD_ADDR_EXP 91
57787: PUSH
57788: LD_INT 0
57790: ST_TO_ADDR
// sTime := false ;
57791: LD_ADDR_EXP 92
57795: PUSH
57796: LD_INT 0
57798: ST_TO_ADDR
// sTools := false ;
57799: LD_ADDR_EXP 93
57803: PUSH
57804: LD_INT 0
57806: ST_TO_ADDR
// sSold := false ;
57807: LD_ADDR_EXP 58
57811: PUSH
57812: LD_INT 0
57814: ST_TO_ADDR
// sDiff := false ;
57815: LD_ADDR_EXP 59
57819: PUSH
57820: LD_INT 0
57822: ST_TO_ADDR
// sFog := false ;
57823: LD_ADDR_EXP 62
57827: PUSH
57828: LD_INT 0
57830: ST_TO_ADDR
// sReset := false ;
57831: LD_ADDR_EXP 63
57835: PUSH
57836: LD_INT 0
57838: ST_TO_ADDR
// sSun := false ;
57839: LD_ADDR_EXP 64
57843: PUSH
57844: LD_INT 0
57846: ST_TO_ADDR
// sTiger := false ;
57847: LD_ADDR_EXP 60
57851: PUSH
57852: LD_INT 0
57854: ST_TO_ADDR
// sBomb := false ;
57855: LD_ADDR_EXP 61
57859: PUSH
57860: LD_INT 0
57862: ST_TO_ADDR
// sWound := false ;
57863: LD_ADDR_EXP 69
57867: PUSH
57868: LD_INT 0
57870: ST_TO_ADDR
// sBetray := false ;
57871: LD_ADDR_EXP 73
57875: PUSH
57876: LD_INT 0
57878: ST_TO_ADDR
// sContamin := false ;
57879: LD_ADDR_EXP 74
57883: PUSH
57884: LD_INT 0
57886: ST_TO_ADDR
// sOil := false ;
57887: LD_ADDR_EXP 76
57891: PUSH
57892: LD_INT 0
57894: ST_TO_ADDR
// sStu := false ;
57895: LD_ADDR_EXP 80
57899: PUSH
57900: LD_INT 0
57902: ST_TO_ADDR
// sBazooka := false ;
57903: LD_ADDR_EXP 83
57907: PUSH
57908: LD_INT 0
57910: ST_TO_ADDR
// sMortar := false ;
57911: LD_ADDR_EXP 84
57915: PUSH
57916: LD_INT 0
57918: ST_TO_ADDR
// sRanger := false ;
57919: LD_ADDR_EXP 94
57923: PUSH
57924: LD_INT 0
57926: ST_TO_ADDR
// end ;
57927: LD_VAR 0 1
57931: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
57932: LD_INT 0
57934: PPUSH
57935: PPUSH
57936: PPUSH
57937: PPUSH
57938: PPUSH
// result := [ ] ;
57939: LD_ADDR_VAR 0 1
57943: PUSH
57944: EMPTY
57945: ST_TO_ADDR
// if campaign_id = 1 then
57946: LD_OWVAR 69
57950: PUSH
57951: LD_INT 1
57953: EQUAL
57954: IFFALSE 60892
// begin case mission_number of 1 :
57956: LD_OWVAR 70
57960: PUSH
57961: LD_INT 1
57963: DOUBLE
57964: EQUAL
57965: IFTRUE 57969
57967: GO 58033
57969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
57970: LD_ADDR_VAR 0 1
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 4
57980: PUSH
57981: LD_INT 11
57983: PUSH
57984: LD_INT 12
57986: PUSH
57987: LD_INT 15
57989: PUSH
57990: LD_INT 16
57992: PUSH
57993: LD_INT 22
57995: PUSH
57996: LD_INT 23
57998: PUSH
57999: LD_INT 26
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 101
58015: PUSH
58016: LD_INT 102
58018: PUSH
58019: LD_INT 106
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: ST_TO_ADDR
58031: GO 60890
58033: LD_INT 2
58035: DOUBLE
58036: EQUAL
58037: IFTRUE 58041
58039: GO 58113
58041: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
58042: LD_ADDR_VAR 0 1
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: LD_INT 4
58052: PUSH
58053: LD_INT 11
58055: PUSH
58056: LD_INT 12
58058: PUSH
58059: LD_INT 15
58061: PUSH
58062: LD_INT 16
58064: PUSH
58065: LD_INT 22
58067: PUSH
58068: LD_INT 23
58070: PUSH
58071: LD_INT 26
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 101
58087: PUSH
58088: LD_INT 102
58090: PUSH
58091: LD_INT 105
58093: PUSH
58094: LD_INT 106
58096: PUSH
58097: LD_INT 108
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: ST_TO_ADDR
58111: GO 60890
58113: LD_INT 3
58115: DOUBLE
58116: EQUAL
58117: IFTRUE 58121
58119: GO 58197
58121: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
58122: LD_ADDR_VAR 0 1
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: LD_INT 11
58138: PUSH
58139: LD_INT 12
58141: PUSH
58142: LD_INT 15
58144: PUSH
58145: LD_INT 16
58147: PUSH
58148: LD_INT 22
58150: PUSH
58151: LD_INT 26
58153: PUSH
58154: LD_INT 36
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 101
58171: PUSH
58172: LD_INT 102
58174: PUSH
58175: LD_INT 105
58177: PUSH
58178: LD_INT 106
58180: PUSH
58181: LD_INT 108
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: ST_TO_ADDR
58195: GO 60890
58197: LD_INT 4
58199: DOUBLE
58200: EQUAL
58201: IFTRUE 58205
58203: GO 58289
58205: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
58206: LD_ADDR_VAR 0 1
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: LD_INT 5
58219: PUSH
58220: LD_INT 8
58222: PUSH
58223: LD_INT 11
58225: PUSH
58226: LD_INT 12
58228: PUSH
58229: LD_INT 15
58231: PUSH
58232: LD_INT 16
58234: PUSH
58235: LD_INT 22
58237: PUSH
58238: LD_INT 23
58240: PUSH
58241: LD_INT 26
58243: PUSH
58244: LD_INT 36
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 101
58263: PUSH
58264: LD_INT 102
58266: PUSH
58267: LD_INT 105
58269: PUSH
58270: LD_INT 106
58272: PUSH
58273: LD_INT 108
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: ST_TO_ADDR
58287: GO 60890
58289: LD_INT 5
58291: DOUBLE
58292: EQUAL
58293: IFTRUE 58297
58295: GO 58397
58297: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
58298: LD_ADDR_VAR 0 1
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: LD_INT 6
58314: PUSH
58315: LD_INT 8
58317: PUSH
58318: LD_INT 11
58320: PUSH
58321: LD_INT 12
58323: PUSH
58324: LD_INT 15
58326: PUSH
58327: LD_INT 16
58329: PUSH
58330: LD_INT 22
58332: PUSH
58333: LD_INT 23
58335: PUSH
58336: LD_INT 25
58338: PUSH
58339: LD_INT 26
58341: PUSH
58342: LD_INT 36
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 101
58363: PUSH
58364: LD_INT 102
58366: PUSH
58367: LD_INT 105
58369: PUSH
58370: LD_INT 106
58372: PUSH
58373: LD_INT 108
58375: PUSH
58376: LD_INT 109
58378: PUSH
58379: LD_INT 112
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: ST_TO_ADDR
58395: GO 60890
58397: LD_INT 6
58399: DOUBLE
58400: EQUAL
58401: IFTRUE 58405
58403: GO 58525
58405: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
58406: LD_ADDR_VAR 0 1
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: LD_INT 5
58419: PUSH
58420: LD_INT 6
58422: PUSH
58423: LD_INT 8
58425: PUSH
58426: LD_INT 11
58428: PUSH
58429: LD_INT 12
58431: PUSH
58432: LD_INT 15
58434: PUSH
58435: LD_INT 16
58437: PUSH
58438: LD_INT 20
58440: PUSH
58441: LD_INT 21
58443: PUSH
58444: LD_INT 22
58446: PUSH
58447: LD_INT 23
58449: PUSH
58450: LD_INT 25
58452: PUSH
58453: LD_INT 26
58455: PUSH
58456: LD_INT 30
58458: PUSH
58459: LD_INT 31
58461: PUSH
58462: LD_INT 32
58464: PUSH
58465: LD_INT 36
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 101
58491: PUSH
58492: LD_INT 102
58494: PUSH
58495: LD_INT 105
58497: PUSH
58498: LD_INT 106
58500: PUSH
58501: LD_INT 108
58503: PUSH
58504: LD_INT 109
58506: PUSH
58507: LD_INT 112
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: ST_TO_ADDR
58523: GO 60890
58525: LD_INT 7
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58533
58531: GO 58633
58533: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
58534: LD_ADDR_VAR 0 1
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: LD_INT 5
58547: PUSH
58548: LD_INT 7
58550: PUSH
58551: LD_INT 11
58553: PUSH
58554: LD_INT 12
58556: PUSH
58557: LD_INT 15
58559: PUSH
58560: LD_INT 16
58562: PUSH
58563: LD_INT 20
58565: PUSH
58566: LD_INT 21
58568: PUSH
58569: LD_INT 22
58571: PUSH
58572: LD_INT 23
58574: PUSH
58575: LD_INT 25
58577: PUSH
58578: LD_INT 26
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 101
58599: PUSH
58600: LD_INT 102
58602: PUSH
58603: LD_INT 103
58605: PUSH
58606: LD_INT 105
58608: PUSH
58609: LD_INT 106
58611: PUSH
58612: LD_INT 108
58614: PUSH
58615: LD_INT 112
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: ST_TO_ADDR
58631: GO 60890
58633: LD_INT 8
58635: DOUBLE
58636: EQUAL
58637: IFTRUE 58641
58639: GO 58769
58641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
58642: LD_ADDR_VAR 0 1
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 4
58652: PUSH
58653: LD_INT 5
58655: PUSH
58656: LD_INT 6
58658: PUSH
58659: LD_INT 7
58661: PUSH
58662: LD_INT 8
58664: PUSH
58665: LD_INT 11
58667: PUSH
58668: LD_INT 12
58670: PUSH
58671: LD_INT 15
58673: PUSH
58674: LD_INT 16
58676: PUSH
58677: LD_INT 20
58679: PUSH
58680: LD_INT 21
58682: PUSH
58683: LD_INT 22
58685: PUSH
58686: LD_INT 23
58688: PUSH
58689: LD_INT 25
58691: PUSH
58692: LD_INT 26
58694: PUSH
58695: LD_INT 30
58697: PUSH
58698: LD_INT 31
58700: PUSH
58701: LD_INT 32
58703: PUSH
58704: LD_INT 36
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 101
58731: PUSH
58732: LD_INT 102
58734: PUSH
58735: LD_INT 103
58737: PUSH
58738: LD_INT 105
58740: PUSH
58741: LD_INT 106
58743: PUSH
58744: LD_INT 108
58746: PUSH
58747: LD_INT 109
58749: PUSH
58750: LD_INT 112
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: ST_TO_ADDR
58767: GO 60890
58769: LD_INT 9
58771: DOUBLE
58772: EQUAL
58773: IFTRUE 58777
58775: GO 58913
58777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
58778: LD_ADDR_VAR 0 1
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: LD_INT 5
58791: PUSH
58792: LD_INT 6
58794: PUSH
58795: LD_INT 7
58797: PUSH
58798: LD_INT 8
58800: PUSH
58801: LD_INT 11
58803: PUSH
58804: LD_INT 12
58806: PUSH
58807: LD_INT 15
58809: PUSH
58810: LD_INT 16
58812: PUSH
58813: LD_INT 20
58815: PUSH
58816: LD_INT 21
58818: PUSH
58819: LD_INT 22
58821: PUSH
58822: LD_INT 23
58824: PUSH
58825: LD_INT 25
58827: PUSH
58828: LD_INT 26
58830: PUSH
58831: LD_INT 28
58833: PUSH
58834: LD_INT 30
58836: PUSH
58837: LD_INT 31
58839: PUSH
58840: LD_INT 32
58842: PUSH
58843: LD_INT 36
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 101
58871: PUSH
58872: LD_INT 102
58874: PUSH
58875: LD_INT 103
58877: PUSH
58878: LD_INT 105
58880: PUSH
58881: LD_INT 106
58883: PUSH
58884: LD_INT 108
58886: PUSH
58887: LD_INT 109
58889: PUSH
58890: LD_INT 112
58892: PUSH
58893: LD_INT 114
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: ST_TO_ADDR
58911: GO 60890
58913: LD_INT 10
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58921
58919: GO 59105
58921: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
58922: LD_ADDR_VAR 0 1
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 4
58932: PUSH
58933: LD_INT 5
58935: PUSH
58936: LD_INT 6
58938: PUSH
58939: LD_INT 7
58941: PUSH
58942: LD_INT 8
58944: PUSH
58945: LD_INT 9
58947: PUSH
58948: LD_INT 10
58950: PUSH
58951: LD_INT 11
58953: PUSH
58954: LD_INT 12
58956: PUSH
58957: LD_INT 13
58959: PUSH
58960: LD_INT 14
58962: PUSH
58963: LD_INT 15
58965: PUSH
58966: LD_INT 16
58968: PUSH
58969: LD_INT 17
58971: PUSH
58972: LD_INT 18
58974: PUSH
58975: LD_INT 19
58977: PUSH
58978: LD_INT 20
58980: PUSH
58981: LD_INT 21
58983: PUSH
58984: LD_INT 22
58986: PUSH
58987: LD_INT 23
58989: PUSH
58990: LD_INT 24
58992: PUSH
58993: LD_INT 25
58995: PUSH
58996: LD_INT 26
58998: PUSH
58999: LD_INT 28
59001: PUSH
59002: LD_INT 30
59004: PUSH
59005: LD_INT 31
59007: PUSH
59008: LD_INT 32
59010: PUSH
59011: LD_INT 36
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 101
59047: PUSH
59048: LD_INT 102
59050: PUSH
59051: LD_INT 103
59053: PUSH
59054: LD_INT 104
59056: PUSH
59057: LD_INT 105
59059: PUSH
59060: LD_INT 106
59062: PUSH
59063: LD_INT 107
59065: PUSH
59066: LD_INT 108
59068: PUSH
59069: LD_INT 109
59071: PUSH
59072: LD_INT 110
59074: PUSH
59075: LD_INT 111
59077: PUSH
59078: LD_INT 112
59080: PUSH
59081: LD_INT 114
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: ST_TO_ADDR
59103: GO 60890
59105: LD_INT 11
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59113
59111: GO 59305
59113: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
59114: LD_ADDR_VAR 0 1
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: LD_INT 5
59130: PUSH
59131: LD_INT 6
59133: PUSH
59134: LD_INT 7
59136: PUSH
59137: LD_INT 8
59139: PUSH
59140: LD_INT 9
59142: PUSH
59143: LD_INT 10
59145: PUSH
59146: LD_INT 11
59148: PUSH
59149: LD_INT 12
59151: PUSH
59152: LD_INT 13
59154: PUSH
59155: LD_INT 14
59157: PUSH
59158: LD_INT 15
59160: PUSH
59161: LD_INT 16
59163: PUSH
59164: LD_INT 17
59166: PUSH
59167: LD_INT 18
59169: PUSH
59170: LD_INT 19
59172: PUSH
59173: LD_INT 20
59175: PUSH
59176: LD_INT 21
59178: PUSH
59179: LD_INT 22
59181: PUSH
59182: LD_INT 23
59184: PUSH
59185: LD_INT 24
59187: PUSH
59188: LD_INT 25
59190: PUSH
59191: LD_INT 26
59193: PUSH
59194: LD_INT 28
59196: PUSH
59197: LD_INT 30
59199: PUSH
59200: LD_INT 31
59202: PUSH
59203: LD_INT 32
59205: PUSH
59206: LD_INT 34
59208: PUSH
59209: LD_INT 36
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 101
59247: PUSH
59248: LD_INT 102
59250: PUSH
59251: LD_INT 103
59253: PUSH
59254: LD_INT 104
59256: PUSH
59257: LD_INT 105
59259: PUSH
59260: LD_INT 106
59262: PUSH
59263: LD_INT 107
59265: PUSH
59266: LD_INT 108
59268: PUSH
59269: LD_INT 109
59271: PUSH
59272: LD_INT 110
59274: PUSH
59275: LD_INT 111
59277: PUSH
59278: LD_INT 112
59280: PUSH
59281: LD_INT 114
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: ST_TO_ADDR
59303: GO 60890
59305: LD_INT 12
59307: DOUBLE
59308: EQUAL
59309: IFTRUE 59313
59311: GO 59521
59313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
59314: LD_ADDR_VAR 0 1
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: LD_INT 5
59333: PUSH
59334: LD_INT 6
59336: PUSH
59337: LD_INT 7
59339: PUSH
59340: LD_INT 8
59342: PUSH
59343: LD_INT 9
59345: PUSH
59346: LD_INT 10
59348: PUSH
59349: LD_INT 11
59351: PUSH
59352: LD_INT 12
59354: PUSH
59355: LD_INT 13
59357: PUSH
59358: LD_INT 14
59360: PUSH
59361: LD_INT 15
59363: PUSH
59364: LD_INT 16
59366: PUSH
59367: LD_INT 17
59369: PUSH
59370: LD_INT 18
59372: PUSH
59373: LD_INT 19
59375: PUSH
59376: LD_INT 20
59378: PUSH
59379: LD_INT 21
59381: PUSH
59382: LD_INT 22
59384: PUSH
59385: LD_INT 23
59387: PUSH
59388: LD_INT 24
59390: PUSH
59391: LD_INT 25
59393: PUSH
59394: LD_INT 26
59396: PUSH
59397: LD_INT 27
59399: PUSH
59400: LD_INT 28
59402: PUSH
59403: LD_INT 30
59405: PUSH
59406: LD_INT 31
59408: PUSH
59409: LD_INT 32
59411: PUSH
59412: LD_INT 33
59414: PUSH
59415: LD_INT 34
59417: PUSH
59418: LD_INT 36
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 101
59459: PUSH
59460: LD_INT 102
59462: PUSH
59463: LD_INT 103
59465: PUSH
59466: LD_INT 104
59468: PUSH
59469: LD_INT 105
59471: PUSH
59472: LD_INT 106
59474: PUSH
59475: LD_INT 107
59477: PUSH
59478: LD_INT 108
59480: PUSH
59481: LD_INT 109
59483: PUSH
59484: LD_INT 110
59486: PUSH
59487: LD_INT 111
59489: PUSH
59490: LD_INT 112
59492: PUSH
59493: LD_INT 113
59495: PUSH
59496: LD_INT 114
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: ST_TO_ADDR
59519: GO 60890
59521: LD_INT 13
59523: DOUBLE
59524: EQUAL
59525: IFTRUE 59529
59527: GO 59725
59529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
59530: LD_ADDR_VAR 0 1
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: LD_INT 4
59546: PUSH
59547: LD_INT 5
59549: PUSH
59550: LD_INT 8
59552: PUSH
59553: LD_INT 9
59555: PUSH
59556: LD_INT 10
59558: PUSH
59559: LD_INT 11
59561: PUSH
59562: LD_INT 12
59564: PUSH
59565: LD_INT 14
59567: PUSH
59568: LD_INT 15
59570: PUSH
59571: LD_INT 16
59573: PUSH
59574: LD_INT 17
59576: PUSH
59577: LD_INT 18
59579: PUSH
59580: LD_INT 19
59582: PUSH
59583: LD_INT 20
59585: PUSH
59586: LD_INT 21
59588: PUSH
59589: LD_INT 22
59591: PUSH
59592: LD_INT 23
59594: PUSH
59595: LD_INT 24
59597: PUSH
59598: LD_INT 25
59600: PUSH
59601: LD_INT 26
59603: PUSH
59604: LD_INT 27
59606: PUSH
59607: LD_INT 28
59609: PUSH
59610: LD_INT 30
59612: PUSH
59613: LD_INT 31
59615: PUSH
59616: LD_INT 32
59618: PUSH
59619: LD_INT 33
59621: PUSH
59622: LD_INT 34
59624: PUSH
59625: LD_INT 36
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 101
59663: PUSH
59664: LD_INT 102
59666: PUSH
59667: LD_INT 103
59669: PUSH
59670: LD_INT 104
59672: PUSH
59673: LD_INT 105
59675: PUSH
59676: LD_INT 106
59678: PUSH
59679: LD_INT 107
59681: PUSH
59682: LD_INT 108
59684: PUSH
59685: LD_INT 109
59687: PUSH
59688: LD_INT 110
59690: PUSH
59691: LD_INT 111
59693: PUSH
59694: LD_INT 112
59696: PUSH
59697: LD_INT 113
59699: PUSH
59700: LD_INT 114
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: ST_TO_ADDR
59723: GO 60890
59725: LD_INT 14
59727: DOUBLE
59728: EQUAL
59729: IFTRUE 59733
59731: GO 59945
59733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
59734: LD_ADDR_VAR 0 1
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 5
59753: PUSH
59754: LD_INT 6
59756: PUSH
59757: LD_INT 7
59759: PUSH
59760: LD_INT 8
59762: PUSH
59763: LD_INT 9
59765: PUSH
59766: LD_INT 10
59768: PUSH
59769: LD_INT 11
59771: PUSH
59772: LD_INT 12
59774: PUSH
59775: LD_INT 13
59777: PUSH
59778: LD_INT 14
59780: PUSH
59781: LD_INT 15
59783: PUSH
59784: LD_INT 16
59786: PUSH
59787: LD_INT 17
59789: PUSH
59790: LD_INT 18
59792: PUSH
59793: LD_INT 19
59795: PUSH
59796: LD_INT 20
59798: PUSH
59799: LD_INT 21
59801: PUSH
59802: LD_INT 22
59804: PUSH
59805: LD_INT 23
59807: PUSH
59808: LD_INT 24
59810: PUSH
59811: LD_INT 25
59813: PUSH
59814: LD_INT 26
59816: PUSH
59817: LD_INT 27
59819: PUSH
59820: LD_INT 28
59822: PUSH
59823: LD_INT 29
59825: PUSH
59826: LD_INT 30
59828: PUSH
59829: LD_INT 31
59831: PUSH
59832: LD_INT 32
59834: PUSH
59835: LD_INT 33
59837: PUSH
59838: LD_INT 34
59840: PUSH
59841: LD_INT 36
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 101
59883: PUSH
59884: LD_INT 102
59886: PUSH
59887: LD_INT 103
59889: PUSH
59890: LD_INT 104
59892: PUSH
59893: LD_INT 105
59895: PUSH
59896: LD_INT 106
59898: PUSH
59899: LD_INT 107
59901: PUSH
59902: LD_INT 108
59904: PUSH
59905: LD_INT 109
59907: PUSH
59908: LD_INT 110
59910: PUSH
59911: LD_INT 111
59913: PUSH
59914: LD_INT 112
59916: PUSH
59917: LD_INT 113
59919: PUSH
59920: LD_INT 114
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: ST_TO_ADDR
59943: GO 60890
59945: LD_INT 15
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 59953
59951: GO 60165
59953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
59954: LD_ADDR_VAR 0 1
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 5
59973: PUSH
59974: LD_INT 6
59976: PUSH
59977: LD_INT 7
59979: PUSH
59980: LD_INT 8
59982: PUSH
59983: LD_INT 9
59985: PUSH
59986: LD_INT 10
59988: PUSH
59989: LD_INT 11
59991: PUSH
59992: LD_INT 12
59994: PUSH
59995: LD_INT 13
59997: PUSH
59998: LD_INT 14
60000: PUSH
60001: LD_INT 15
60003: PUSH
60004: LD_INT 16
60006: PUSH
60007: LD_INT 17
60009: PUSH
60010: LD_INT 18
60012: PUSH
60013: LD_INT 19
60015: PUSH
60016: LD_INT 20
60018: PUSH
60019: LD_INT 21
60021: PUSH
60022: LD_INT 22
60024: PUSH
60025: LD_INT 23
60027: PUSH
60028: LD_INT 24
60030: PUSH
60031: LD_INT 25
60033: PUSH
60034: LD_INT 26
60036: PUSH
60037: LD_INT 27
60039: PUSH
60040: LD_INT 28
60042: PUSH
60043: LD_INT 29
60045: PUSH
60046: LD_INT 30
60048: PUSH
60049: LD_INT 31
60051: PUSH
60052: LD_INT 32
60054: PUSH
60055: LD_INT 33
60057: PUSH
60058: LD_INT 34
60060: PUSH
60061: LD_INT 36
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 101
60103: PUSH
60104: LD_INT 102
60106: PUSH
60107: LD_INT 103
60109: PUSH
60110: LD_INT 104
60112: PUSH
60113: LD_INT 105
60115: PUSH
60116: LD_INT 106
60118: PUSH
60119: LD_INT 107
60121: PUSH
60122: LD_INT 108
60124: PUSH
60125: LD_INT 109
60127: PUSH
60128: LD_INT 110
60130: PUSH
60131: LD_INT 111
60133: PUSH
60134: LD_INT 112
60136: PUSH
60137: LD_INT 113
60139: PUSH
60140: LD_INT 114
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: ST_TO_ADDR
60163: GO 60890
60165: LD_INT 16
60167: DOUBLE
60168: EQUAL
60169: IFTRUE 60173
60171: GO 60297
60173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
60174: LD_ADDR_VAR 0 1
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: LD_INT 5
60187: PUSH
60188: LD_INT 7
60190: PUSH
60191: LD_INT 11
60193: PUSH
60194: LD_INT 12
60196: PUSH
60197: LD_INT 15
60199: PUSH
60200: LD_INT 16
60202: PUSH
60203: LD_INT 20
60205: PUSH
60206: LD_INT 21
60208: PUSH
60209: LD_INT 22
60211: PUSH
60212: LD_INT 23
60214: PUSH
60215: LD_INT 25
60217: PUSH
60218: LD_INT 26
60220: PUSH
60221: LD_INT 30
60223: PUSH
60224: LD_INT 31
60226: PUSH
60227: LD_INT 32
60229: PUSH
60230: LD_INT 33
60232: PUSH
60233: LD_INT 34
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 101
60259: PUSH
60260: LD_INT 102
60262: PUSH
60263: LD_INT 103
60265: PUSH
60266: LD_INT 106
60268: PUSH
60269: LD_INT 108
60271: PUSH
60272: LD_INT 112
60274: PUSH
60275: LD_INT 113
60277: PUSH
60278: LD_INT 114
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: ST_TO_ADDR
60295: GO 60890
60297: LD_INT 17
60299: DOUBLE
60300: EQUAL
60301: IFTRUE 60305
60303: GO 60517
60305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
60306: LD_ADDR_VAR 0 1
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: LD_INT 5
60325: PUSH
60326: LD_INT 6
60328: PUSH
60329: LD_INT 7
60331: PUSH
60332: LD_INT 8
60334: PUSH
60335: LD_INT 9
60337: PUSH
60338: LD_INT 10
60340: PUSH
60341: LD_INT 11
60343: PUSH
60344: LD_INT 12
60346: PUSH
60347: LD_INT 13
60349: PUSH
60350: LD_INT 14
60352: PUSH
60353: LD_INT 15
60355: PUSH
60356: LD_INT 16
60358: PUSH
60359: LD_INT 17
60361: PUSH
60362: LD_INT 18
60364: PUSH
60365: LD_INT 19
60367: PUSH
60368: LD_INT 20
60370: PUSH
60371: LD_INT 21
60373: PUSH
60374: LD_INT 22
60376: PUSH
60377: LD_INT 23
60379: PUSH
60380: LD_INT 24
60382: PUSH
60383: LD_INT 25
60385: PUSH
60386: LD_INT 26
60388: PUSH
60389: LD_INT 27
60391: PUSH
60392: LD_INT 28
60394: PUSH
60395: LD_INT 29
60397: PUSH
60398: LD_INT 30
60400: PUSH
60401: LD_INT 31
60403: PUSH
60404: LD_INT 32
60406: PUSH
60407: LD_INT 33
60409: PUSH
60410: LD_INT 34
60412: PUSH
60413: LD_INT 36
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 101
60455: PUSH
60456: LD_INT 102
60458: PUSH
60459: LD_INT 103
60461: PUSH
60462: LD_INT 104
60464: PUSH
60465: LD_INT 105
60467: PUSH
60468: LD_INT 106
60470: PUSH
60471: LD_INT 107
60473: PUSH
60474: LD_INT 108
60476: PUSH
60477: LD_INT 109
60479: PUSH
60480: LD_INT 110
60482: PUSH
60483: LD_INT 111
60485: PUSH
60486: LD_INT 112
60488: PUSH
60489: LD_INT 113
60491: PUSH
60492: LD_INT 114
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: ST_TO_ADDR
60515: GO 60890
60517: LD_INT 18
60519: DOUBLE
60520: EQUAL
60521: IFTRUE 60525
60523: GO 60661
60525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
60526: LD_ADDR_VAR 0 1
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: LD_INT 5
60539: PUSH
60540: LD_INT 7
60542: PUSH
60543: LD_INT 11
60545: PUSH
60546: LD_INT 12
60548: PUSH
60549: LD_INT 15
60551: PUSH
60552: LD_INT 16
60554: PUSH
60555: LD_INT 20
60557: PUSH
60558: LD_INT 21
60560: PUSH
60561: LD_INT 22
60563: PUSH
60564: LD_INT 23
60566: PUSH
60567: LD_INT 25
60569: PUSH
60570: LD_INT 26
60572: PUSH
60573: LD_INT 30
60575: PUSH
60576: LD_INT 31
60578: PUSH
60579: LD_INT 32
60581: PUSH
60582: LD_INT 33
60584: PUSH
60585: LD_INT 34
60587: PUSH
60588: LD_INT 35
60590: PUSH
60591: LD_INT 36
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 101
60619: PUSH
60620: LD_INT 102
60622: PUSH
60623: LD_INT 103
60625: PUSH
60626: LD_INT 106
60628: PUSH
60629: LD_INT 108
60631: PUSH
60632: LD_INT 112
60634: PUSH
60635: LD_INT 113
60637: PUSH
60638: LD_INT 114
60640: PUSH
60641: LD_INT 115
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: ST_TO_ADDR
60659: GO 60890
60661: LD_INT 19
60663: DOUBLE
60664: EQUAL
60665: IFTRUE 60669
60667: GO 60889
60669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
60670: LD_ADDR_VAR 0 1
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 4
60686: PUSH
60687: LD_INT 5
60689: PUSH
60690: LD_INT 6
60692: PUSH
60693: LD_INT 7
60695: PUSH
60696: LD_INT 8
60698: PUSH
60699: LD_INT 9
60701: PUSH
60702: LD_INT 10
60704: PUSH
60705: LD_INT 11
60707: PUSH
60708: LD_INT 12
60710: PUSH
60711: LD_INT 13
60713: PUSH
60714: LD_INT 14
60716: PUSH
60717: LD_INT 15
60719: PUSH
60720: LD_INT 16
60722: PUSH
60723: LD_INT 17
60725: PUSH
60726: LD_INT 18
60728: PUSH
60729: LD_INT 19
60731: PUSH
60732: LD_INT 20
60734: PUSH
60735: LD_INT 21
60737: PUSH
60738: LD_INT 22
60740: PUSH
60741: LD_INT 23
60743: PUSH
60744: LD_INT 24
60746: PUSH
60747: LD_INT 25
60749: PUSH
60750: LD_INT 26
60752: PUSH
60753: LD_INT 27
60755: PUSH
60756: LD_INT 28
60758: PUSH
60759: LD_INT 29
60761: PUSH
60762: LD_INT 30
60764: PUSH
60765: LD_INT 31
60767: PUSH
60768: LD_INT 32
60770: PUSH
60771: LD_INT 33
60773: PUSH
60774: LD_INT 34
60776: PUSH
60777: LD_INT 35
60779: PUSH
60780: LD_INT 36
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 101
60823: PUSH
60824: LD_INT 102
60826: PUSH
60827: LD_INT 103
60829: PUSH
60830: LD_INT 104
60832: PUSH
60833: LD_INT 105
60835: PUSH
60836: LD_INT 106
60838: PUSH
60839: LD_INT 107
60841: PUSH
60842: LD_INT 108
60844: PUSH
60845: LD_INT 109
60847: PUSH
60848: LD_INT 110
60850: PUSH
60851: LD_INT 111
60853: PUSH
60854: LD_INT 112
60856: PUSH
60857: LD_INT 113
60859: PUSH
60860: LD_INT 114
60862: PUSH
60863: LD_INT 115
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: ST_TO_ADDR
60887: GO 60890
60889: POP
// end else
60890: GO 61109
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
60892: LD_ADDR_VAR 0 1
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 4
60908: PUSH
60909: LD_INT 5
60911: PUSH
60912: LD_INT 6
60914: PUSH
60915: LD_INT 7
60917: PUSH
60918: LD_INT 8
60920: PUSH
60921: LD_INT 9
60923: PUSH
60924: LD_INT 10
60926: PUSH
60927: LD_INT 11
60929: PUSH
60930: LD_INT 12
60932: PUSH
60933: LD_INT 13
60935: PUSH
60936: LD_INT 14
60938: PUSH
60939: LD_INT 15
60941: PUSH
60942: LD_INT 16
60944: PUSH
60945: LD_INT 17
60947: PUSH
60948: LD_INT 18
60950: PUSH
60951: LD_INT 19
60953: PUSH
60954: LD_INT 20
60956: PUSH
60957: LD_INT 21
60959: PUSH
60960: LD_INT 22
60962: PUSH
60963: LD_INT 23
60965: PUSH
60966: LD_INT 24
60968: PUSH
60969: LD_INT 25
60971: PUSH
60972: LD_INT 26
60974: PUSH
60975: LD_INT 27
60977: PUSH
60978: LD_INT 28
60980: PUSH
60981: LD_INT 29
60983: PUSH
60984: LD_INT 30
60986: PUSH
60987: LD_INT 31
60989: PUSH
60990: LD_INT 32
60992: PUSH
60993: LD_INT 33
60995: PUSH
60996: LD_INT 34
60998: PUSH
60999: LD_INT 35
61001: PUSH
61002: LD_INT 36
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 101
61045: PUSH
61046: LD_INT 102
61048: PUSH
61049: LD_INT 103
61051: PUSH
61052: LD_INT 104
61054: PUSH
61055: LD_INT 105
61057: PUSH
61058: LD_INT 106
61060: PUSH
61061: LD_INT 107
61063: PUSH
61064: LD_INT 108
61066: PUSH
61067: LD_INT 109
61069: PUSH
61070: LD_INT 110
61072: PUSH
61073: LD_INT 111
61075: PUSH
61076: LD_INT 112
61078: PUSH
61079: LD_INT 113
61081: PUSH
61082: LD_INT 114
61084: PUSH
61085: LD_INT 115
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// if result then
61109: LD_VAR 0 1
61113: IFFALSE 61402
// begin normal :=  ;
61115: LD_ADDR_VAR 0 3
61119: PUSH
61120: LD_STRING 
61122: ST_TO_ADDR
// hardcore :=  ;
61123: LD_ADDR_VAR 0 4
61127: PUSH
61128: LD_STRING 
61130: ST_TO_ADDR
// for i = 1 to normalCounter do
61131: LD_ADDR_VAR 0 5
61135: PUSH
61136: DOUBLE
61137: LD_INT 1
61139: DEC
61140: ST_TO_ADDR
61141: LD_EXP 42
61145: PUSH
61146: FOR_TO
61147: IFFALSE 61248
// begin tmp := 0 ;
61149: LD_ADDR_VAR 0 2
61153: PUSH
61154: LD_STRING 0
61156: ST_TO_ADDR
// if result [ 1 ] then
61157: LD_VAR 0 1
61161: PUSH
61162: LD_INT 1
61164: ARRAY
61165: IFFALSE 61230
// if result [ 1 ] [ 1 ] = i then
61167: LD_VAR 0 1
61171: PUSH
61172: LD_INT 1
61174: ARRAY
61175: PUSH
61176: LD_INT 1
61178: ARRAY
61179: PUSH
61180: LD_VAR 0 5
61184: EQUAL
61185: IFFALSE 61230
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61187: LD_ADDR_VAR 0 1
61191: PUSH
61192: LD_VAR 0 1
61196: PPUSH
61197: LD_INT 1
61199: PPUSH
61200: LD_VAR 0 1
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PPUSH
61209: LD_INT 1
61211: PPUSH
61212: CALL_OW 3
61216: PPUSH
61217: CALL_OW 1
61221: ST_TO_ADDR
// tmp := 1 ;
61222: LD_ADDR_VAR 0 2
61226: PUSH
61227: LD_STRING 1
61229: ST_TO_ADDR
// end ; normal := normal & tmp ;
61230: LD_ADDR_VAR 0 3
61234: PUSH
61235: LD_VAR 0 3
61239: PUSH
61240: LD_VAR 0 2
61244: STR
61245: ST_TO_ADDR
// end ;
61246: GO 61146
61248: POP
61249: POP
// for i = 1 to hardcoreCounter do
61250: LD_ADDR_VAR 0 5
61254: PUSH
61255: DOUBLE
61256: LD_INT 1
61258: DEC
61259: ST_TO_ADDR
61260: LD_EXP 43
61264: PUSH
61265: FOR_TO
61266: IFFALSE 61371
// begin tmp := 0 ;
61268: LD_ADDR_VAR 0 2
61272: PUSH
61273: LD_STRING 0
61275: ST_TO_ADDR
// if result [ 2 ] then
61276: LD_VAR 0 1
61280: PUSH
61281: LD_INT 2
61283: ARRAY
61284: IFFALSE 61353
// if result [ 2 ] [ 1 ] = 100 + i then
61286: LD_VAR 0 1
61290: PUSH
61291: LD_INT 2
61293: ARRAY
61294: PUSH
61295: LD_INT 1
61297: ARRAY
61298: PUSH
61299: LD_INT 100
61301: PUSH
61302: LD_VAR 0 5
61306: PLUS
61307: EQUAL
61308: IFFALSE 61353
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
61310: LD_ADDR_VAR 0 1
61314: PUSH
61315: LD_VAR 0 1
61319: PPUSH
61320: LD_INT 2
61322: PPUSH
61323: LD_VAR 0 1
61327: PUSH
61328: LD_INT 2
61330: ARRAY
61331: PPUSH
61332: LD_INT 1
61334: PPUSH
61335: CALL_OW 3
61339: PPUSH
61340: CALL_OW 1
61344: ST_TO_ADDR
// tmp := 1 ;
61345: LD_ADDR_VAR 0 2
61349: PUSH
61350: LD_STRING 1
61352: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
61353: LD_ADDR_VAR 0 4
61357: PUSH
61358: LD_VAR 0 4
61362: PUSH
61363: LD_VAR 0 2
61367: STR
61368: ST_TO_ADDR
// end ;
61369: GO 61265
61371: POP
61372: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
61373: LD_STRING getStreamItemsFromMission("
61375: PUSH
61376: LD_VAR 0 3
61380: STR
61381: PUSH
61382: LD_STRING ","
61384: STR
61385: PUSH
61386: LD_VAR 0 4
61390: STR
61391: PUSH
61392: LD_STRING ")
61394: STR
61395: PPUSH
61396: CALL_OW 559
// end else
61400: GO 61409
// ToLua ( getStreamItemsFromMission("","") ) ;
61402: LD_STRING getStreamItemsFromMission("","")
61404: PPUSH
61405: CALL_OW 559
// end ;
61409: LD_VAR 0 1
61413: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
61414: LD_EXP 41
61418: PUSH
61419: LD_EXP 46
61423: AND
61424: IFFALSE 61548
61426: GO 61428
61428: DISABLE
61429: LD_INT 0
61431: PPUSH
61432: PPUSH
// begin enable ;
61433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
61434: LD_ADDR_VAR 0 2
61438: PUSH
61439: LD_INT 22
61441: PUSH
61442: LD_OWVAR 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: LD_INT 34
61456: PUSH
61457: LD_INT 7
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 34
61466: PUSH
61467: LD_INT 45
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 34
61476: PUSH
61477: LD_INT 28
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 34
61486: PUSH
61487: LD_INT 47
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PPUSH
61505: CALL_OW 69
61509: ST_TO_ADDR
// if not tmp then
61510: LD_VAR 0 2
61514: NOT
61515: IFFALSE 61519
// exit ;
61517: GO 61548
// for i in tmp do
61519: LD_ADDR_VAR 0 1
61523: PUSH
61524: LD_VAR 0 2
61528: PUSH
61529: FOR_IN
61530: IFFALSE 61546
// begin SetLives ( i , 0 ) ;
61532: LD_VAR 0 1
61536: PPUSH
61537: LD_INT 0
61539: PPUSH
61540: CALL_OW 234
// end ;
61544: GO 61529
61546: POP
61547: POP
// end ;
61548: PPOPN 2
61550: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
61551: LD_EXP 41
61555: PUSH
61556: LD_EXP 47
61560: AND
61561: IFFALSE 61645
61563: GO 61565
61565: DISABLE
61566: LD_INT 0
61568: PPUSH
61569: PPUSH
// begin enable ;
61570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
61571: LD_ADDR_VAR 0 2
61575: PUSH
61576: LD_INT 22
61578: PUSH
61579: LD_OWVAR 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 32
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PPUSH
61602: CALL_OW 69
61606: ST_TO_ADDR
// if not tmp then
61607: LD_VAR 0 2
61611: NOT
61612: IFFALSE 61616
// exit ;
61614: GO 61645
// for i in tmp do
61616: LD_ADDR_VAR 0 1
61620: PUSH
61621: LD_VAR 0 2
61625: PUSH
61626: FOR_IN
61627: IFFALSE 61643
// begin SetLives ( i , 0 ) ;
61629: LD_VAR 0 1
61633: PPUSH
61634: LD_INT 0
61636: PPUSH
61637: CALL_OW 234
// end ;
61641: GO 61626
61643: POP
61644: POP
// end ;
61645: PPOPN 2
61647: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
61648: LD_EXP 41
61652: PUSH
61653: LD_EXP 44
61657: AND
61658: IFFALSE 61751
61660: GO 61662
61662: DISABLE
61663: LD_INT 0
61665: PPUSH
// begin enable ;
61666: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
61667: LD_ADDR_VAR 0 1
61671: PUSH
61672: LD_INT 22
61674: PUSH
61675: LD_OWVAR 2
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 25
61689: PUSH
61690: LD_INT 5
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 25
61699: PUSH
61700: LD_INT 9
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 25
61709: PUSH
61710: LD_INT 8
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PPUSH
61727: CALL_OW 69
61731: PUSH
61732: FOR_IN
61733: IFFALSE 61749
// begin SetClass ( i , 1 ) ;
61735: LD_VAR 0 1
61739: PPUSH
61740: LD_INT 1
61742: PPUSH
61743: CALL_OW 336
// end ;
61747: GO 61732
61749: POP
61750: POP
// end ;
61751: PPOPN 1
61753: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
61754: LD_EXP 41
61758: PUSH
61759: LD_EXP 45
61763: AND
61764: PUSH
61765: LD_OWVAR 65
61769: PUSH
61770: LD_INT 7
61772: LESS
61773: AND
61774: IFFALSE 61788
61776: GO 61778
61778: DISABLE
// begin enable ;
61779: ENABLE
// game_speed := 7 ;
61780: LD_ADDR_OWVAR 65
61784: PUSH
61785: LD_INT 7
61787: ST_TO_ADDR
// end ;
61788: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
61789: LD_EXP 41
61793: PUSH
61794: LD_EXP 48
61798: AND
61799: IFFALSE 62001
61801: GO 61803
61803: DISABLE
61804: LD_INT 0
61806: PPUSH
61807: PPUSH
61808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61809: LD_ADDR_VAR 0 3
61813: PUSH
61814: LD_INT 81
61816: PUSH
61817: LD_OWVAR 2
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 21
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PPUSH
61840: CALL_OW 69
61844: ST_TO_ADDR
// if not tmp then
61845: LD_VAR 0 3
61849: NOT
61850: IFFALSE 61854
// exit ;
61852: GO 62001
// if tmp > 5 then
61854: LD_VAR 0 3
61858: PUSH
61859: LD_INT 5
61861: GREATER
61862: IFFALSE 61874
// k := 5 else
61864: LD_ADDR_VAR 0 2
61868: PUSH
61869: LD_INT 5
61871: ST_TO_ADDR
61872: GO 61884
// k := tmp ;
61874: LD_ADDR_VAR 0 2
61878: PUSH
61879: LD_VAR 0 3
61883: ST_TO_ADDR
// for i := 1 to k do
61884: LD_ADDR_VAR 0 1
61888: PUSH
61889: DOUBLE
61890: LD_INT 1
61892: DEC
61893: ST_TO_ADDR
61894: LD_VAR 0 2
61898: PUSH
61899: FOR_TO
61900: IFFALSE 61999
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
61902: LD_VAR 0 3
61906: PUSH
61907: LD_VAR 0 1
61911: ARRAY
61912: PPUSH
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 4
61920: MOD
61921: PUSH
61922: LD_INT 1
61924: PLUS
61925: PPUSH
61926: CALL_OW 259
61930: PUSH
61931: LD_INT 10
61933: LESS
61934: IFFALSE 61997
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
61936: LD_VAR 0 3
61940: PUSH
61941: LD_VAR 0 1
61945: ARRAY
61946: PPUSH
61947: LD_VAR 0 1
61951: PUSH
61952: LD_INT 4
61954: MOD
61955: PUSH
61956: LD_INT 1
61958: PLUS
61959: PPUSH
61960: LD_VAR 0 3
61964: PUSH
61965: LD_VAR 0 1
61969: ARRAY
61970: PPUSH
61971: LD_VAR 0 1
61975: PUSH
61976: LD_INT 4
61978: MOD
61979: PUSH
61980: LD_INT 1
61982: PLUS
61983: PPUSH
61984: CALL_OW 259
61988: PUSH
61989: LD_INT 1
61991: PLUS
61992: PPUSH
61993: CALL_OW 237
61997: GO 61899
61999: POP
62000: POP
// end ;
62001: PPOPN 3
62003: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
62004: LD_EXP 41
62008: PUSH
62009: LD_EXP 49
62013: AND
62014: IFFALSE 62034
62016: GO 62018
62018: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
62019: LD_INT 4
62021: PPUSH
62022: LD_OWVAR 2
62026: PPUSH
62027: LD_INT 0
62029: PPUSH
62030: CALL_OW 324
62034: END
// every 0 0$1 trigger StreamModeActive and sShovel do
62035: LD_EXP 41
62039: PUSH
62040: LD_EXP 78
62044: AND
62045: IFFALSE 62065
62047: GO 62049
62049: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
62050: LD_INT 19
62052: PPUSH
62053: LD_OWVAR 2
62057: PPUSH
62058: LD_INT 0
62060: PPUSH
62061: CALL_OW 324
62065: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
62066: LD_EXP 41
62070: PUSH
62071: LD_EXP 50
62075: AND
62076: IFFALSE 62178
62078: GO 62080
62080: DISABLE
62081: LD_INT 0
62083: PPUSH
62084: PPUSH
// begin enable ;
62085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
62086: LD_ADDR_VAR 0 2
62090: PUSH
62091: LD_INT 22
62093: PUSH
62094: LD_OWVAR 2
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 34
62108: PUSH
62109: LD_INT 11
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 34
62118: PUSH
62119: LD_INT 30
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PPUSH
62135: CALL_OW 69
62139: ST_TO_ADDR
// if not tmp then
62140: LD_VAR 0 2
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62178
// for i in tmp do
62149: LD_ADDR_VAR 0 1
62153: PUSH
62154: LD_VAR 0 2
62158: PUSH
62159: FOR_IN
62160: IFFALSE 62176
// begin SetLives ( i , 0 ) ;
62162: LD_VAR 0 1
62166: PPUSH
62167: LD_INT 0
62169: PPUSH
62170: CALL_OW 234
// end ;
62174: GO 62159
62176: POP
62177: POP
// end ;
62178: PPOPN 2
62180: END
// every 0 0$1 trigger StreamModeActive and sBunker do
62181: LD_EXP 41
62185: PUSH
62186: LD_EXP 51
62190: AND
62191: IFFALSE 62211
62193: GO 62195
62195: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
62196: LD_INT 32
62198: PPUSH
62199: LD_OWVAR 2
62203: PPUSH
62204: LD_INT 0
62206: PPUSH
62207: CALL_OW 324
62211: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
62212: LD_EXP 41
62216: PUSH
62217: LD_EXP 52
62221: AND
62222: IFFALSE 62403
62224: GO 62226
62226: DISABLE
62227: LD_INT 0
62229: PPUSH
62230: PPUSH
62231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
62232: LD_ADDR_VAR 0 2
62236: PUSH
62237: LD_INT 22
62239: PUSH
62240: LD_OWVAR 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 33
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PPUSH
62263: CALL_OW 69
62267: ST_TO_ADDR
// if not tmp then
62268: LD_VAR 0 2
62272: NOT
62273: IFFALSE 62277
// exit ;
62275: GO 62403
// side := 0 ;
62277: LD_ADDR_VAR 0 3
62281: PUSH
62282: LD_INT 0
62284: ST_TO_ADDR
// for i := 1 to 8 do
62285: LD_ADDR_VAR 0 1
62289: PUSH
62290: DOUBLE
62291: LD_INT 1
62293: DEC
62294: ST_TO_ADDR
62295: LD_INT 8
62297: PUSH
62298: FOR_TO
62299: IFFALSE 62347
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
62301: LD_OWVAR 2
62305: PUSH
62306: LD_VAR 0 1
62310: NONEQUAL
62311: PUSH
62312: LD_OWVAR 2
62316: PPUSH
62317: LD_VAR 0 1
62321: PPUSH
62322: CALL_OW 81
62326: PUSH
62327: LD_INT 2
62329: EQUAL
62330: AND
62331: IFFALSE 62345
// begin side := i ;
62333: LD_ADDR_VAR 0 3
62337: PUSH
62338: LD_VAR 0 1
62342: ST_TO_ADDR
// break ;
62343: GO 62347
// end ;
62345: GO 62298
62347: POP
62348: POP
// if not side then
62349: LD_VAR 0 3
62353: NOT
62354: IFFALSE 62358
// exit ;
62356: GO 62403
// for i := 1 to tmp do
62358: LD_ADDR_VAR 0 1
62362: PUSH
62363: DOUBLE
62364: LD_INT 1
62366: DEC
62367: ST_TO_ADDR
62368: LD_VAR 0 2
62372: PUSH
62373: FOR_TO
62374: IFFALSE 62401
// if Prob ( 60 ) then
62376: LD_INT 60
62378: PPUSH
62379: CALL_OW 13
62383: IFFALSE 62399
// SetSide ( i , side ) ;
62385: LD_VAR 0 1
62389: PPUSH
62390: LD_VAR 0 3
62394: PPUSH
62395: CALL_OW 235
62399: GO 62373
62401: POP
62402: POP
// end ;
62403: PPOPN 3
62405: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
62406: LD_EXP 41
62410: PUSH
62411: LD_EXP 54
62415: AND
62416: IFFALSE 62535
62418: GO 62420
62420: DISABLE
62421: LD_INT 0
62423: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
62424: LD_ADDR_VAR 0 1
62428: PUSH
62429: LD_INT 22
62431: PUSH
62432: LD_OWVAR 2
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 21
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: LD_INT 23
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: PPUSH
62473: CALL_OW 69
62477: PUSH
62478: FOR_IN
62479: IFFALSE 62533
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
62481: LD_VAR 0 1
62485: PPUSH
62486: CALL_OW 257
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 4
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: IN
62509: IFFALSE 62531
// SetClass ( un , rand ( 1 , 4 ) ) ;
62511: LD_VAR 0 1
62515: PPUSH
62516: LD_INT 1
62518: PPUSH
62519: LD_INT 4
62521: PPUSH
62522: CALL_OW 12
62526: PPUSH
62527: CALL_OW 336
62531: GO 62478
62533: POP
62534: POP
// end ;
62535: PPOPN 1
62537: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
62538: LD_EXP 41
62542: PUSH
62543: LD_EXP 53
62547: AND
62548: IFFALSE 62627
62550: GO 62552
62552: DISABLE
62553: LD_INT 0
62555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62556: LD_ADDR_VAR 0 1
62560: PUSH
62561: LD_INT 22
62563: PUSH
62564: LD_OWVAR 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 21
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PPUSH
62587: CALL_OW 69
62591: ST_TO_ADDR
// if not tmp then
62592: LD_VAR 0 1
62596: NOT
62597: IFFALSE 62601
// exit ;
62599: GO 62627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
62601: LD_VAR 0 1
62605: PUSH
62606: LD_INT 1
62608: PPUSH
62609: LD_VAR 0 1
62613: PPUSH
62614: CALL_OW 12
62618: ARRAY
62619: PPUSH
62620: LD_INT 100
62622: PPUSH
62623: CALL_OW 234
// end ;
62627: PPOPN 1
62629: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
62630: LD_EXP 41
62634: PUSH
62635: LD_EXP 55
62639: AND
62640: IFFALSE 62738
62642: GO 62644
62644: DISABLE
62645: LD_INT 0
62647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62648: LD_ADDR_VAR 0 1
62652: PUSH
62653: LD_INT 22
62655: PUSH
62656: LD_OWVAR 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 21
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PPUSH
62679: CALL_OW 69
62683: ST_TO_ADDR
// if not tmp then
62684: LD_VAR 0 1
62688: NOT
62689: IFFALSE 62693
// exit ;
62691: GO 62738
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
62693: LD_VAR 0 1
62697: PUSH
62698: LD_INT 1
62700: PPUSH
62701: LD_VAR 0 1
62705: PPUSH
62706: CALL_OW 12
62710: ARRAY
62711: PPUSH
62712: LD_INT 1
62714: PPUSH
62715: LD_INT 4
62717: PPUSH
62718: CALL_OW 12
62722: PPUSH
62723: LD_INT 3000
62725: PPUSH
62726: LD_INT 9000
62728: PPUSH
62729: CALL_OW 12
62733: PPUSH
62734: CALL_OW 492
// end ;
62738: PPOPN 1
62740: END
// every 0 0$1 trigger StreamModeActive and sDepot do
62741: LD_EXP 41
62745: PUSH
62746: LD_EXP 56
62750: AND
62751: IFFALSE 62771
62753: GO 62755
62755: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
62756: LD_INT 1
62758: PPUSH
62759: LD_OWVAR 2
62763: PPUSH
62764: LD_INT 0
62766: PPUSH
62767: CALL_OW 324
62771: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
62772: LD_EXP 41
62776: PUSH
62777: LD_EXP 57
62781: AND
62782: IFFALSE 62865
62784: GO 62786
62786: DISABLE
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62791: LD_ADDR_VAR 0 2
62795: PUSH
62796: LD_INT 22
62798: PUSH
62799: LD_OWVAR 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 21
62810: PUSH
62811: LD_INT 3
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PPUSH
62822: CALL_OW 69
62826: ST_TO_ADDR
// if not tmp then
62827: LD_VAR 0 2
62831: NOT
62832: IFFALSE 62836
// exit ;
62834: GO 62865
// for i in tmp do
62836: LD_ADDR_VAR 0 1
62840: PUSH
62841: LD_VAR 0 2
62845: PUSH
62846: FOR_IN
62847: IFFALSE 62863
// SetBLevel ( i , 10 ) ;
62849: LD_VAR 0 1
62853: PPUSH
62854: LD_INT 10
62856: PPUSH
62857: CALL_OW 241
62861: GO 62846
62863: POP
62864: POP
// end ;
62865: PPOPN 2
62867: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
62868: LD_EXP 41
62872: PUSH
62873: LD_EXP 58
62877: AND
62878: IFFALSE 62989
62880: GO 62882
62882: DISABLE
62883: LD_INT 0
62885: PPUSH
62886: PPUSH
62887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62888: LD_ADDR_VAR 0 3
62892: PUSH
62893: LD_INT 22
62895: PUSH
62896: LD_OWVAR 2
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 25
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PPUSH
62919: CALL_OW 69
62923: ST_TO_ADDR
// if not tmp then
62924: LD_VAR 0 3
62928: NOT
62929: IFFALSE 62933
// exit ;
62931: GO 62989
// un := tmp [ rand ( 1 , tmp ) ] ;
62933: LD_ADDR_VAR 0 2
62937: PUSH
62938: LD_VAR 0 3
62942: PUSH
62943: LD_INT 1
62945: PPUSH
62946: LD_VAR 0 3
62950: PPUSH
62951: CALL_OW 12
62955: ARRAY
62956: ST_TO_ADDR
// if Crawls ( un ) then
62957: LD_VAR 0 2
62961: PPUSH
62962: CALL_OW 318
62966: IFFALSE 62977
// ComWalk ( un ) ;
62968: LD_VAR 0 2
62972: PPUSH
62973: CALL_OW 138
// SetClass ( un , class_sniper ) ;
62977: LD_VAR 0 2
62981: PPUSH
62982: LD_INT 5
62984: PPUSH
62985: CALL_OW 336
// end ;
62989: PPOPN 3
62991: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
62992: LD_EXP 41
62996: PUSH
62997: LD_EXP 59
63001: AND
63002: PUSH
63003: LD_OWVAR 67
63007: PUSH
63008: LD_INT 3
63010: LESS
63011: AND
63012: IFFALSE 63031
63014: GO 63016
63016: DISABLE
// Difficulty := Difficulty + 1 ;
63017: LD_ADDR_OWVAR 67
63021: PUSH
63022: LD_OWVAR 67
63026: PUSH
63027: LD_INT 1
63029: PLUS
63030: ST_TO_ADDR
63031: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
63032: LD_EXP 41
63036: PUSH
63037: LD_EXP 60
63041: AND
63042: IFFALSE 63145
63044: GO 63046
63046: DISABLE
63047: LD_INT 0
63049: PPUSH
// begin for i := 1 to 5 do
63050: LD_ADDR_VAR 0 1
63054: PUSH
63055: DOUBLE
63056: LD_INT 1
63058: DEC
63059: ST_TO_ADDR
63060: LD_INT 5
63062: PUSH
63063: FOR_TO
63064: IFFALSE 63143
// begin uc_nation := nation_nature ;
63066: LD_ADDR_OWVAR 21
63070: PUSH
63071: LD_INT 0
63073: ST_TO_ADDR
// uc_side := 0 ;
63074: LD_ADDR_OWVAR 20
63078: PUSH
63079: LD_INT 0
63081: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63082: LD_ADDR_OWVAR 29
63086: PUSH
63087: LD_INT 12
63089: PUSH
63090: LD_INT 12
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: ST_TO_ADDR
// hc_agressivity := 20 ;
63097: LD_ADDR_OWVAR 35
63101: PUSH
63102: LD_INT 20
63104: ST_TO_ADDR
// hc_class := class_tiger ;
63105: LD_ADDR_OWVAR 28
63109: PUSH
63110: LD_INT 14
63112: ST_TO_ADDR
// hc_gallery :=  ;
63113: LD_ADDR_OWVAR 33
63117: PUSH
63118: LD_STRING 
63120: ST_TO_ADDR
// hc_name :=  ;
63121: LD_ADDR_OWVAR 26
63125: PUSH
63126: LD_STRING 
63128: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
63129: CALL_OW 44
63133: PPUSH
63134: LD_INT 0
63136: PPUSH
63137: CALL_OW 51
// end ;
63141: GO 63063
63143: POP
63144: POP
// end ;
63145: PPOPN 1
63147: END
// every 0 0$1 trigger StreamModeActive and sBomb do
63148: LD_EXP 41
63152: PUSH
63153: LD_EXP 61
63157: AND
63158: IFFALSE 63167
63160: GO 63162
63162: DISABLE
// StreamSibBomb ;
63163: CALL 63168 0 0
63167: END
// export function StreamSibBomb ; var i , x , y ; begin
63168: LD_INT 0
63170: PPUSH
63171: PPUSH
63172: PPUSH
63173: PPUSH
// result := false ;
63174: LD_ADDR_VAR 0 1
63178: PUSH
63179: LD_INT 0
63181: ST_TO_ADDR
// for i := 1 to 16 do
63182: LD_ADDR_VAR 0 2
63186: PUSH
63187: DOUBLE
63188: LD_INT 1
63190: DEC
63191: ST_TO_ADDR
63192: LD_INT 16
63194: PUSH
63195: FOR_TO
63196: IFFALSE 63395
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63198: LD_ADDR_VAR 0 3
63202: PUSH
63203: LD_INT 10
63205: PUSH
63206: LD_INT 20
63208: PUSH
63209: LD_INT 30
63211: PUSH
63212: LD_INT 40
63214: PUSH
63215: LD_INT 50
63217: PUSH
63218: LD_INT 60
63220: PUSH
63221: LD_INT 70
63223: PUSH
63224: LD_INT 80
63226: PUSH
63227: LD_INT 90
63229: PUSH
63230: LD_INT 100
63232: PUSH
63233: LD_INT 110
63235: PUSH
63236: LD_INT 120
63238: PUSH
63239: LD_INT 130
63241: PUSH
63242: LD_INT 140
63244: PUSH
63245: LD_INT 150
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 1
63267: PPUSH
63268: LD_INT 15
63270: PPUSH
63271: CALL_OW 12
63275: ARRAY
63276: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63277: LD_ADDR_VAR 0 4
63281: PUSH
63282: LD_INT 10
63284: PUSH
63285: LD_INT 20
63287: PUSH
63288: LD_INT 30
63290: PUSH
63291: LD_INT 40
63293: PUSH
63294: LD_INT 50
63296: PUSH
63297: LD_INT 60
63299: PUSH
63300: LD_INT 70
63302: PUSH
63303: LD_INT 80
63305: PUSH
63306: LD_INT 90
63308: PUSH
63309: LD_INT 100
63311: PUSH
63312: LD_INT 110
63314: PUSH
63315: LD_INT 120
63317: PUSH
63318: LD_INT 130
63320: PUSH
63321: LD_INT 140
63323: PUSH
63324: LD_INT 150
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PPUSH
63347: LD_INT 15
63349: PPUSH
63350: CALL_OW 12
63354: ARRAY
63355: ST_TO_ADDR
// if ValidHex ( x , y ) then
63356: LD_VAR 0 3
63360: PPUSH
63361: LD_VAR 0 4
63365: PPUSH
63366: CALL_OW 488
63370: IFFALSE 63393
// begin result := [ x , y ] ;
63372: LD_ADDR_VAR 0 1
63376: PUSH
63377: LD_VAR 0 3
63381: PUSH
63382: LD_VAR 0 4
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// break ;
63391: GO 63395
// end ; end ;
63393: GO 63195
63395: POP
63396: POP
// if result then
63397: LD_VAR 0 1
63401: IFFALSE 63461
// begin ToLua ( playSibBomb() ) ;
63403: LD_STRING playSibBomb()
63405: PPUSH
63406: CALL_OW 559
// wait ( 0 0$14 ) ;
63410: LD_INT 490
63412: PPUSH
63413: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
63417: LD_VAR 0 1
63421: PUSH
63422: LD_INT 1
63424: ARRAY
63425: PPUSH
63426: LD_VAR 0 1
63430: PUSH
63431: LD_INT 2
63433: ARRAY
63434: PPUSH
63435: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
63439: LD_VAR 0 1
63443: PUSH
63444: LD_INT 1
63446: ARRAY
63447: PPUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 2
63455: ARRAY
63456: PPUSH
63457: CALL_OW 429
// end ; end ;
63461: LD_VAR 0 1
63465: RET
// every 0 0$1 trigger StreamModeActive and sReset do
63466: LD_EXP 41
63470: PUSH
63471: LD_EXP 63
63475: AND
63476: IFFALSE 63488
63478: GO 63480
63480: DISABLE
// YouLost (  ) ;
63481: LD_STRING 
63483: PPUSH
63484: CALL_OW 104
63488: END
// every 0 0$1 trigger StreamModeActive and sFog do
63489: LD_EXP 41
63493: PUSH
63494: LD_EXP 62
63498: AND
63499: IFFALSE 63513
63501: GO 63503
63503: DISABLE
// FogOff ( your_side ) ;
63504: LD_OWVAR 2
63508: PPUSH
63509: CALL_OW 344
63513: END
// every 0 0$1 trigger StreamModeActive and sSun do
63514: LD_EXP 41
63518: PUSH
63519: LD_EXP 64
63523: AND
63524: IFFALSE 63552
63526: GO 63528
63528: DISABLE
// begin solar_recharge_percent := 0 ;
63529: LD_ADDR_OWVAR 79
63533: PUSH
63534: LD_INT 0
63536: ST_TO_ADDR
// wait ( 5 5$00 ) ;
63537: LD_INT 10500
63539: PPUSH
63540: CALL_OW 67
// solar_recharge_percent := 100 ;
63544: LD_ADDR_OWVAR 79
63548: PUSH
63549: LD_INT 100
63551: ST_TO_ADDR
// end ;
63552: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
63553: LD_EXP 41
63557: PUSH
63558: LD_EXP 65
63562: AND
63563: IFFALSE 63802
63565: GO 63567
63567: DISABLE
63568: LD_INT 0
63570: PPUSH
63571: PPUSH
63572: PPUSH
// begin tmp := [ ] ;
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: EMPTY
63579: ST_TO_ADDR
// for i := 1 to 6 do
63580: LD_ADDR_VAR 0 1
63584: PUSH
63585: DOUBLE
63586: LD_INT 1
63588: DEC
63589: ST_TO_ADDR
63590: LD_INT 6
63592: PUSH
63593: FOR_TO
63594: IFFALSE 63699
// begin uc_nation := nation_nature ;
63596: LD_ADDR_OWVAR 21
63600: PUSH
63601: LD_INT 0
63603: ST_TO_ADDR
// uc_side := 0 ;
63604: LD_ADDR_OWVAR 20
63608: PUSH
63609: LD_INT 0
63611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63612: LD_ADDR_OWVAR 29
63616: PUSH
63617: LD_INT 12
63619: PUSH
63620: LD_INT 12
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// hc_agressivity := 20 ;
63627: LD_ADDR_OWVAR 35
63631: PUSH
63632: LD_INT 20
63634: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
63635: LD_ADDR_OWVAR 28
63639: PUSH
63640: LD_INT 17
63642: ST_TO_ADDR
// hc_gallery :=  ;
63643: LD_ADDR_OWVAR 33
63647: PUSH
63648: LD_STRING 
63650: ST_TO_ADDR
// hc_name :=  ;
63651: LD_ADDR_OWVAR 26
63655: PUSH
63656: LD_STRING 
63658: ST_TO_ADDR
// un := CreateHuman ;
63659: LD_ADDR_VAR 0 2
63663: PUSH
63664: CALL_OW 44
63668: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
63669: LD_VAR 0 2
63673: PPUSH
63674: LD_INT 1
63676: PPUSH
63677: CALL_OW 51
// tmp := tmp ^ un ;
63681: LD_ADDR_VAR 0 3
63685: PUSH
63686: LD_VAR 0 3
63690: PUSH
63691: LD_VAR 0 2
63695: ADD
63696: ST_TO_ADDR
// end ;
63697: GO 63593
63699: POP
63700: POP
// repeat wait ( 0 0$1 ) ;
63701: LD_INT 35
63703: PPUSH
63704: CALL_OW 67
// for un in tmp do
63708: LD_ADDR_VAR 0 2
63712: PUSH
63713: LD_VAR 0 3
63717: PUSH
63718: FOR_IN
63719: IFFALSE 63793
// begin if IsDead ( un ) then
63721: LD_VAR 0 2
63725: PPUSH
63726: CALL_OW 301
63730: IFFALSE 63750
// begin tmp := tmp diff un ;
63732: LD_ADDR_VAR 0 3
63736: PUSH
63737: LD_VAR 0 3
63741: PUSH
63742: LD_VAR 0 2
63746: DIFF
63747: ST_TO_ADDR
// continue ;
63748: GO 63718
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
63750: LD_VAR 0 2
63754: PPUSH
63755: LD_INT 3
63757: PUSH
63758: LD_INT 22
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PPUSH
63772: CALL_OW 69
63776: PPUSH
63777: LD_VAR 0 2
63781: PPUSH
63782: CALL_OW 74
63786: PPUSH
63787: CALL_OW 115
// end ;
63791: GO 63718
63793: POP
63794: POP
// until not tmp ;
63795: LD_VAR 0 3
63799: NOT
63800: IFFALSE 63701
// end ;
63802: PPOPN 3
63804: END
// every 0 0$1 trigger StreamModeActive and sTroll do
63805: LD_EXP 41
63809: PUSH
63810: LD_EXP 66
63814: AND
63815: IFFALSE 63869
63817: GO 63819
63819: DISABLE
// begin ToLua ( displayTroll(); ) ;
63820: LD_STRING displayTroll();
63822: PPUSH
63823: CALL_OW 559
// wait ( 3 3$00 ) ;
63827: LD_INT 6300
63829: PPUSH
63830: CALL_OW 67
// ToLua ( hideTroll(); ) ;
63834: LD_STRING hideTroll();
63836: PPUSH
63837: CALL_OW 559
// wait ( 1 1$00 ) ;
63841: LD_INT 2100
63843: PPUSH
63844: CALL_OW 67
// ToLua ( displayTroll(); ) ;
63848: LD_STRING displayTroll();
63850: PPUSH
63851: CALL_OW 559
// wait ( 1 1$00 ) ;
63855: LD_INT 2100
63857: PPUSH
63858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
63862: LD_STRING hideTroll();
63864: PPUSH
63865: CALL_OW 559
// end ;
63869: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
63870: LD_EXP 41
63874: PUSH
63875: LD_EXP 67
63879: AND
63880: IFFALSE 63943
63882: GO 63884
63884: DISABLE
63885: LD_INT 0
63887: PPUSH
// begin p := 0 ;
63888: LD_ADDR_VAR 0 1
63892: PUSH
63893: LD_INT 0
63895: ST_TO_ADDR
// repeat game_speed := 1 ;
63896: LD_ADDR_OWVAR 65
63900: PUSH
63901: LD_INT 1
63903: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63904: LD_INT 35
63906: PPUSH
63907: CALL_OW 67
// p := p + 1 ;
63911: LD_ADDR_VAR 0 1
63915: PUSH
63916: LD_VAR 0 1
63920: PUSH
63921: LD_INT 1
63923: PLUS
63924: ST_TO_ADDR
// until p >= 60 ;
63925: LD_VAR 0 1
63929: PUSH
63930: LD_INT 60
63932: GREATEREQUAL
63933: IFFALSE 63896
// game_speed := 4 ;
63935: LD_ADDR_OWVAR 65
63939: PUSH
63940: LD_INT 4
63942: ST_TO_ADDR
// end ;
63943: PPOPN 1
63945: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
63946: LD_EXP 41
63950: PUSH
63951: LD_EXP 68
63955: AND
63956: IFFALSE 64102
63958: GO 63960
63960: DISABLE
63961: LD_INT 0
63963: PPUSH
63964: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63965: LD_ADDR_VAR 0 1
63969: PUSH
63970: LD_INT 22
63972: PUSH
63973: LD_OWVAR 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 30
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 30
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PPUSH
64014: CALL_OW 69
64018: ST_TO_ADDR
// if not depot then
64019: LD_VAR 0 1
64023: NOT
64024: IFFALSE 64028
// exit ;
64026: GO 64102
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
64028: LD_ADDR_VAR 0 2
64032: PUSH
64033: LD_VAR 0 1
64037: PUSH
64038: LD_INT 1
64040: PPUSH
64041: LD_VAR 0 1
64045: PPUSH
64046: CALL_OW 12
64050: ARRAY
64051: PPUSH
64052: CALL_OW 274
64056: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
64057: LD_VAR 0 2
64061: PPUSH
64062: LD_INT 1
64064: PPUSH
64065: LD_INT 0
64067: PPUSH
64068: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
64072: LD_VAR 0 2
64076: PPUSH
64077: LD_INT 2
64079: PPUSH
64080: LD_INT 0
64082: PPUSH
64083: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
64087: LD_VAR 0 2
64091: PPUSH
64092: LD_INT 3
64094: PPUSH
64095: LD_INT 0
64097: PPUSH
64098: CALL_OW 277
// end ;
64102: PPOPN 2
64104: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
64105: LD_EXP 41
64109: PUSH
64110: LD_EXP 69
64114: AND
64115: IFFALSE 64212
64117: GO 64119
64119: DISABLE
64120: LD_INT 0
64122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64123: LD_ADDR_VAR 0 1
64127: PUSH
64128: LD_INT 22
64130: PUSH
64131: LD_OWVAR 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 21
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 23
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: LIST
64171: PPUSH
64172: CALL_OW 69
64176: ST_TO_ADDR
// if not tmp then
64177: LD_VAR 0 1
64181: NOT
64182: IFFALSE 64186
// exit ;
64184: GO 64212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
64186: LD_VAR 0 1
64190: PUSH
64191: LD_INT 1
64193: PPUSH
64194: LD_VAR 0 1
64198: PPUSH
64199: CALL_OW 12
64203: ARRAY
64204: PPUSH
64205: LD_INT 200
64207: PPUSH
64208: CALL_OW 234
// end ;
64212: PPOPN 1
64214: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
64215: LD_EXP 41
64219: PUSH
64220: LD_EXP 70
64224: AND
64225: IFFALSE 64304
64227: GO 64229
64229: DISABLE
64230: LD_INT 0
64232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
64233: LD_ADDR_VAR 0 1
64237: PUSH
64238: LD_INT 22
64240: PUSH
64241: LD_OWVAR 2
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 21
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PPUSH
64264: CALL_OW 69
64268: ST_TO_ADDR
// if not tmp then
64269: LD_VAR 0 1
64273: NOT
64274: IFFALSE 64278
// exit ;
64276: GO 64304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 1
64285: PPUSH
64286: LD_VAR 0 1
64290: PPUSH
64291: CALL_OW 12
64295: ARRAY
64296: PPUSH
64297: LD_INT 60
64299: PPUSH
64300: CALL_OW 234
// end ;
64304: PPOPN 1
64306: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
64307: LD_EXP 41
64311: PUSH
64312: LD_EXP 71
64316: AND
64317: IFFALSE 64416
64319: GO 64321
64321: DISABLE
64322: LD_INT 0
64324: PPUSH
64325: PPUSH
// begin enable ;
64326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
64327: LD_ADDR_VAR 0 1
64331: PUSH
64332: LD_INT 22
64334: PUSH
64335: LD_OWVAR 2
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 61
64346: PUSH
64347: EMPTY
64348: LIST
64349: PUSH
64350: LD_INT 33
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PPUSH
64365: CALL_OW 69
64369: ST_TO_ADDR
// if not tmp then
64370: LD_VAR 0 1
64374: NOT
64375: IFFALSE 64379
// exit ;
64377: GO 64416
// for i in tmp do
64379: LD_ADDR_VAR 0 2
64383: PUSH
64384: LD_VAR 0 1
64388: PUSH
64389: FOR_IN
64390: IFFALSE 64414
// if IsControledBy ( i ) then
64392: LD_VAR 0 2
64396: PPUSH
64397: CALL_OW 312
64401: IFFALSE 64412
// ComUnlink ( i ) ;
64403: LD_VAR 0 2
64407: PPUSH
64408: CALL_OW 136
64412: GO 64389
64414: POP
64415: POP
// end ;
64416: PPOPN 2
64418: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
64419: LD_EXP 41
64423: PUSH
64424: LD_EXP 72
64428: AND
64429: IFFALSE 64569
64431: GO 64433
64433: DISABLE
64434: LD_INT 0
64436: PPUSH
64437: PPUSH
// begin ToLua ( displayPowell(); ) ;
64438: LD_STRING displayPowell();
64440: PPUSH
64441: CALL_OW 559
// uc_side := 0 ;
64445: LD_ADDR_OWVAR 20
64449: PUSH
64450: LD_INT 0
64452: ST_TO_ADDR
// uc_nation := 2 ;
64453: LD_ADDR_OWVAR 21
64457: PUSH
64458: LD_INT 2
64460: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
64461: LD_ADDR_OWVAR 37
64465: PUSH
64466: LD_INT 14
64468: ST_TO_ADDR
// vc_engine := engine_siberite ;
64469: LD_ADDR_OWVAR 39
64473: PUSH
64474: LD_INT 3
64476: ST_TO_ADDR
// vc_control := control_apeman ;
64477: LD_ADDR_OWVAR 38
64481: PUSH
64482: LD_INT 5
64484: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
64485: LD_ADDR_OWVAR 40
64489: PUSH
64490: LD_INT 29
64492: ST_TO_ADDR
// un := CreateVehicle ;
64493: LD_ADDR_VAR 0 2
64497: PUSH
64498: CALL_OW 45
64502: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64503: LD_VAR 0 2
64507: PPUSH
64508: LD_INT 1
64510: PPUSH
64511: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64515: LD_INT 35
64517: PPUSH
64518: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64522: LD_VAR 0 2
64526: PPUSH
64527: LD_INT 22
64529: PUSH
64530: LD_OWVAR 2
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PPUSH
64539: CALL_OW 69
64543: PPUSH
64544: LD_VAR 0 2
64548: PPUSH
64549: CALL_OW 74
64553: PPUSH
64554: CALL_OW 115
// until IsDead ( un ) ;
64558: LD_VAR 0 2
64562: PPUSH
64563: CALL_OW 301
64567: IFFALSE 64515
// end ;
64569: PPOPN 2
64571: END
// every 0 0$1 trigger StreamModeActive and sStu do
64572: LD_EXP 41
64576: PUSH
64577: LD_EXP 80
64581: AND
64582: IFFALSE 64598
64584: GO 64586
64586: DISABLE
// begin ToLua ( displayStucuk(); ) ;
64587: LD_STRING displayStucuk();
64589: PPUSH
64590: CALL_OW 559
// ResetFog ;
64594: CALL_OW 335
// end ;
64598: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
64599: LD_EXP 41
64603: PUSH
64604: LD_EXP 73
64608: AND
64609: IFFALSE 64750
64611: GO 64613
64613: DISABLE
64614: LD_INT 0
64616: PPUSH
64617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64618: LD_ADDR_VAR 0 2
64622: PUSH
64623: LD_INT 22
64625: PUSH
64626: LD_OWVAR 2
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 21
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PPUSH
64649: CALL_OW 69
64653: ST_TO_ADDR
// if not tmp then
64654: LD_VAR 0 2
64658: NOT
64659: IFFALSE 64663
// exit ;
64661: GO 64750
// un := tmp [ rand ( 1 , tmp ) ] ;
64663: LD_ADDR_VAR 0 1
64667: PUSH
64668: LD_VAR 0 2
64672: PUSH
64673: LD_INT 1
64675: PPUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: CALL_OW 12
64685: ARRAY
64686: ST_TO_ADDR
// SetSide ( un , 0 ) ;
64687: LD_VAR 0 1
64691: PPUSH
64692: LD_INT 0
64694: PPUSH
64695: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
64699: LD_VAR 0 1
64703: PPUSH
64704: LD_OWVAR 3
64708: PUSH
64709: LD_VAR 0 1
64713: DIFF
64714: PPUSH
64715: LD_VAR 0 1
64719: PPUSH
64720: CALL_OW 74
64724: PPUSH
64725: CALL_OW 115
// wait ( 0 0$20 ) ;
64729: LD_INT 700
64731: PPUSH
64732: CALL_OW 67
// SetSide ( un , your_side ) ;
64736: LD_VAR 0 1
64740: PPUSH
64741: LD_OWVAR 2
64745: PPUSH
64746: CALL_OW 235
// end ;
64750: PPOPN 2
64752: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
64753: LD_EXP 41
64757: PUSH
64758: LD_EXP 74
64762: AND
64763: IFFALSE 64869
64765: GO 64767
64767: DISABLE
64768: LD_INT 0
64770: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64771: LD_ADDR_VAR 0 1
64775: PUSH
64776: LD_INT 22
64778: PUSH
64779: LD_OWVAR 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: LD_INT 30
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 30
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PPUSH
64820: CALL_OW 69
64824: ST_TO_ADDR
// if not depot then
64825: LD_VAR 0 1
64829: NOT
64830: IFFALSE 64834
// exit ;
64832: GO 64869
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
64834: LD_VAR 0 1
64838: PUSH
64839: LD_INT 1
64841: ARRAY
64842: PPUSH
64843: CALL_OW 250
64847: PPUSH
64848: LD_VAR 0 1
64852: PUSH
64853: LD_INT 1
64855: ARRAY
64856: PPUSH
64857: CALL_OW 251
64861: PPUSH
64862: LD_INT 70
64864: PPUSH
64865: CALL_OW 495
// end ;
64869: PPOPN 1
64871: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
64872: LD_EXP 41
64876: PUSH
64877: LD_EXP 75
64881: AND
64882: IFFALSE 65093
64884: GO 64886
64886: DISABLE
64887: LD_INT 0
64889: PPUSH
64890: PPUSH
64891: PPUSH
64892: PPUSH
64893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_INT 22
64901: PUSH
64902: LD_OWVAR 2
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 21
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PPUSH
64925: CALL_OW 69
64929: ST_TO_ADDR
// if not tmp then
64930: LD_VAR 0 5
64934: NOT
64935: IFFALSE 64939
// exit ;
64937: GO 65093
// for i in tmp do
64939: LD_ADDR_VAR 0 1
64943: PUSH
64944: LD_VAR 0 5
64948: PUSH
64949: FOR_IN
64950: IFFALSE 65091
// begin d := rand ( 0 , 5 ) ;
64952: LD_ADDR_VAR 0 4
64956: PUSH
64957: LD_INT 0
64959: PPUSH
64960: LD_INT 5
64962: PPUSH
64963: CALL_OW 12
64967: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
64968: LD_ADDR_VAR 0 2
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: CALL_OW 250
64982: PPUSH
64983: LD_VAR 0 4
64987: PPUSH
64988: LD_INT 3
64990: PPUSH
64991: LD_INT 12
64993: PPUSH
64994: CALL_OW 12
64998: PPUSH
64999: CALL_OW 272
65003: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
65004: LD_ADDR_VAR 0 3
65008: PUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 251
65018: PPUSH
65019: LD_VAR 0 4
65023: PPUSH
65024: LD_INT 3
65026: PPUSH
65027: LD_INT 12
65029: PPUSH
65030: CALL_OW 12
65034: PPUSH
65035: CALL_OW 273
65039: ST_TO_ADDR
// if ValidHex ( x , y ) then
65040: LD_VAR 0 2
65044: PPUSH
65045: LD_VAR 0 3
65049: PPUSH
65050: CALL_OW 488
65054: IFFALSE 65089
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
65056: LD_VAR 0 1
65060: PPUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: LD_VAR 0 3
65070: PPUSH
65071: LD_INT 3
65073: PPUSH
65074: LD_INT 6
65076: PPUSH
65077: CALL_OW 12
65081: PPUSH
65082: LD_INT 1
65084: PPUSH
65085: CALL_OW 483
// end ;
65089: GO 64949
65091: POP
65092: POP
// end ;
65093: PPOPN 5
65095: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
65096: LD_EXP 41
65100: PUSH
65101: LD_EXP 76
65105: AND
65106: IFFALSE 65200
65108: GO 65110
65110: DISABLE
65111: LD_INT 0
65113: PPUSH
65114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
65115: LD_ADDR_VAR 0 2
65119: PUSH
65120: LD_INT 22
65122: PUSH
65123: LD_OWVAR 2
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 32
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 21
65144: PUSH
65145: LD_INT 2
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PPUSH
65157: CALL_OW 69
65161: ST_TO_ADDR
// if not tmp then
65162: LD_VAR 0 2
65166: NOT
65167: IFFALSE 65171
// exit ;
65169: GO 65200
// for i in tmp do
65171: LD_ADDR_VAR 0 1
65175: PUSH
65176: LD_VAR 0 2
65180: PUSH
65181: FOR_IN
65182: IFFALSE 65198
// SetFuel ( i , 0 ) ;
65184: LD_VAR 0 1
65188: PPUSH
65189: LD_INT 0
65191: PPUSH
65192: CALL_OW 240
65196: GO 65181
65198: POP
65199: POP
// end ;
65200: PPOPN 2
65202: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
65203: LD_EXP 41
65207: PUSH
65208: LD_EXP 77
65212: AND
65213: IFFALSE 65279
65215: GO 65217
65217: DISABLE
65218: LD_INT 0
65220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65221: LD_ADDR_VAR 0 1
65225: PUSH
65226: LD_INT 22
65228: PUSH
65229: LD_OWVAR 2
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 30
65240: PUSH
65241: LD_INT 29
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PPUSH
65252: CALL_OW 69
65256: ST_TO_ADDR
// if not tmp then
65257: LD_VAR 0 1
65261: NOT
65262: IFFALSE 65266
// exit ;
65264: GO 65279
// DestroyUnit ( tmp [ 1 ] ) ;
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: PPUSH
65275: CALL_OW 65
// end ;
65279: PPOPN 1
65281: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
65282: LD_EXP 41
65286: PUSH
65287: LD_EXP 79
65291: AND
65292: IFFALSE 65421
65294: GO 65296
65296: DISABLE
65297: LD_INT 0
65299: PPUSH
// begin uc_side := 0 ;
65300: LD_ADDR_OWVAR 20
65304: PUSH
65305: LD_INT 0
65307: ST_TO_ADDR
// uc_nation := nation_arabian ;
65308: LD_ADDR_OWVAR 21
65312: PUSH
65313: LD_INT 2
65315: ST_TO_ADDR
// hc_gallery :=  ;
65316: LD_ADDR_OWVAR 33
65320: PUSH
65321: LD_STRING 
65323: ST_TO_ADDR
// hc_name :=  ;
65324: LD_ADDR_OWVAR 26
65328: PUSH
65329: LD_STRING 
65331: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
65332: LD_INT 1
65334: PPUSH
65335: LD_INT 11
65337: PPUSH
65338: LD_INT 10
65340: PPUSH
65341: CALL_OW 380
// un := CreateHuman ;
65345: LD_ADDR_VAR 0 1
65349: PUSH
65350: CALL_OW 44
65354: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65355: LD_VAR 0 1
65359: PPUSH
65360: LD_INT 1
65362: PPUSH
65363: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65367: LD_INT 35
65369: PPUSH
65370: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65374: LD_VAR 0 1
65378: PPUSH
65379: LD_INT 22
65381: PUSH
65382: LD_OWVAR 2
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PPUSH
65391: CALL_OW 69
65395: PPUSH
65396: LD_VAR 0 1
65400: PPUSH
65401: CALL_OW 74
65405: PPUSH
65406: CALL_OW 115
// until IsDead ( un ) ;
65410: LD_VAR 0 1
65414: PPUSH
65415: CALL_OW 301
65419: IFFALSE 65367
// end ;
65421: PPOPN 1
65423: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
65424: LD_EXP 41
65428: PUSH
65429: LD_EXP 81
65433: AND
65434: IFFALSE 65446
65436: GO 65438
65438: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
65439: LD_STRING earthquake(getX(game), 0, 32)
65441: PPUSH
65442: CALL_OW 559
65446: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
65447: LD_EXP 41
65451: PUSH
65452: LD_EXP 82
65456: AND
65457: IFFALSE 65548
65459: GO 65461
65461: DISABLE
65462: LD_INT 0
65464: PPUSH
// begin enable ;
65465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
65466: LD_ADDR_VAR 0 1
65470: PUSH
65471: LD_INT 22
65473: PUSH
65474: LD_OWVAR 2
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 21
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 33
65495: PUSH
65496: LD_INT 3
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: PPUSH
65508: CALL_OW 69
65512: ST_TO_ADDR
// if not tmp then
65513: LD_VAR 0 1
65517: NOT
65518: IFFALSE 65522
// exit ;
65520: GO 65548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65522: LD_VAR 0 1
65526: PUSH
65527: LD_INT 1
65529: PPUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: CALL_OW 12
65539: ARRAY
65540: PPUSH
65541: LD_INT 1
65543: PPUSH
65544: CALL_OW 234
// end ;
65548: PPOPN 1
65550: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
65551: LD_EXP 41
65555: PUSH
65556: LD_EXP 83
65560: AND
65561: IFFALSE 65702
65563: GO 65565
65565: DISABLE
65566: LD_INT 0
65568: PPUSH
65569: PPUSH
65570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65571: LD_ADDR_VAR 0 3
65575: PUSH
65576: LD_INT 22
65578: PUSH
65579: LD_OWVAR 2
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 25
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PPUSH
65602: CALL_OW 69
65606: ST_TO_ADDR
// if not tmp then
65607: LD_VAR 0 3
65611: NOT
65612: IFFALSE 65616
// exit ;
65614: GO 65702
// un := tmp [ rand ( 1 , tmp ) ] ;
65616: LD_ADDR_VAR 0 2
65620: PUSH
65621: LD_VAR 0 3
65625: PUSH
65626: LD_INT 1
65628: PPUSH
65629: LD_VAR 0 3
65633: PPUSH
65634: CALL_OW 12
65638: ARRAY
65639: ST_TO_ADDR
// if Crawls ( un ) then
65640: LD_VAR 0 2
65644: PPUSH
65645: CALL_OW 318
65649: IFFALSE 65660
// ComWalk ( un ) ;
65651: LD_VAR 0 2
65655: PPUSH
65656: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
65660: LD_VAR 0 2
65664: PPUSH
65665: LD_INT 9
65667: PPUSH
65668: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
65672: LD_INT 28
65674: PPUSH
65675: LD_OWVAR 2
65679: PPUSH
65680: LD_INT 2
65682: PPUSH
65683: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
65687: LD_INT 29
65689: PPUSH
65690: LD_OWVAR 2
65694: PPUSH
65695: LD_INT 2
65697: PPUSH
65698: CALL_OW 322
// end ;
65702: PPOPN 3
65704: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
65705: LD_EXP 41
65709: PUSH
65710: LD_EXP 84
65714: AND
65715: IFFALSE 65826
65717: GO 65719
65719: DISABLE
65720: LD_INT 0
65722: PPUSH
65723: PPUSH
65724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65725: LD_ADDR_VAR 0 3
65729: PUSH
65730: LD_INT 22
65732: PUSH
65733: LD_OWVAR 2
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 25
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PPUSH
65756: CALL_OW 69
65760: ST_TO_ADDR
// if not tmp then
65761: LD_VAR 0 3
65765: NOT
65766: IFFALSE 65770
// exit ;
65768: GO 65826
// un := tmp [ rand ( 1 , tmp ) ] ;
65770: LD_ADDR_VAR 0 2
65774: PUSH
65775: LD_VAR 0 3
65779: PUSH
65780: LD_INT 1
65782: PPUSH
65783: LD_VAR 0 3
65787: PPUSH
65788: CALL_OW 12
65792: ARRAY
65793: ST_TO_ADDR
// if Crawls ( un ) then
65794: LD_VAR 0 2
65798: PPUSH
65799: CALL_OW 318
65803: IFFALSE 65814
// ComWalk ( un ) ;
65805: LD_VAR 0 2
65809: PPUSH
65810: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65814: LD_VAR 0 2
65818: PPUSH
65819: LD_INT 8
65821: PPUSH
65822: CALL_OW 336
// end ;
65826: PPOPN 3
65828: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
65829: LD_EXP 41
65833: PUSH
65834: LD_EXP 85
65838: AND
65839: IFFALSE 65983
65841: GO 65843
65843: DISABLE
65844: LD_INT 0
65846: PPUSH
65847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
65848: LD_ADDR_VAR 0 2
65852: PUSH
65853: LD_INT 22
65855: PUSH
65856: LD_OWVAR 2
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 21
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: LD_INT 34
65880: PUSH
65881: LD_INT 12
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 34
65890: PUSH
65891: LD_INT 51
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 34
65900: PUSH
65901: LD_INT 32
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: PPUSH
65919: CALL_OW 69
65923: ST_TO_ADDR
// if not tmp then
65924: LD_VAR 0 2
65928: NOT
65929: IFFALSE 65933
// exit ;
65931: GO 65983
// for i in tmp do
65933: LD_ADDR_VAR 0 1
65937: PUSH
65938: LD_VAR 0 2
65942: PUSH
65943: FOR_IN
65944: IFFALSE 65981
// if GetCargo ( i , mat_artifact ) = 0 then
65946: LD_VAR 0 1
65950: PPUSH
65951: LD_INT 4
65953: PPUSH
65954: CALL_OW 289
65958: PUSH
65959: LD_INT 0
65961: EQUAL
65962: IFFALSE 65979
// SetCargo ( i , mat_siberit , 100 ) ;
65964: LD_VAR 0 1
65968: PPUSH
65969: LD_INT 3
65971: PPUSH
65972: LD_INT 100
65974: PPUSH
65975: CALL_OW 290
65979: GO 65943
65981: POP
65982: POP
// end ;
65983: PPOPN 2
65985: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
65986: LD_EXP 41
65990: PUSH
65991: LD_EXP 86
65995: AND
65996: IFFALSE 66179
65998: GO 66000
66000: DISABLE
66001: LD_INT 0
66003: PPUSH
66004: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66005: LD_ADDR_VAR 0 2
66009: PUSH
66010: LD_INT 22
66012: PUSH
66013: LD_OWVAR 2
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PPUSH
66022: CALL_OW 69
66026: ST_TO_ADDR
// if not tmp then
66027: LD_VAR 0 2
66031: NOT
66032: IFFALSE 66036
// exit ;
66034: GO 66179
// for i := 1 to 2 do
66036: LD_ADDR_VAR 0 1
66040: PUSH
66041: DOUBLE
66042: LD_INT 1
66044: DEC
66045: ST_TO_ADDR
66046: LD_INT 2
66048: PUSH
66049: FOR_TO
66050: IFFALSE 66177
// begin uc_side := your_side ;
66052: LD_ADDR_OWVAR 20
66056: PUSH
66057: LD_OWVAR 2
66061: ST_TO_ADDR
// uc_nation := nation_american ;
66062: LD_ADDR_OWVAR 21
66066: PUSH
66067: LD_INT 1
66069: ST_TO_ADDR
// vc_chassis := us_morphling ;
66070: LD_ADDR_OWVAR 37
66074: PUSH
66075: LD_INT 5
66077: ST_TO_ADDR
// vc_engine := engine_siberite ;
66078: LD_ADDR_OWVAR 39
66082: PUSH
66083: LD_INT 3
66085: ST_TO_ADDR
// vc_control := control_computer ;
66086: LD_ADDR_OWVAR 38
66090: PUSH
66091: LD_INT 3
66093: ST_TO_ADDR
// vc_weapon := us_double_laser ;
66094: LD_ADDR_OWVAR 40
66098: PUSH
66099: LD_INT 10
66101: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 1
66109: ARRAY
66110: PPUSH
66111: CALL_OW 310
66115: NOT
66116: IFFALSE 66163
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
66118: CALL_OW 45
66122: PPUSH
66123: LD_VAR 0 2
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: PPUSH
66132: CALL_OW 250
66136: PPUSH
66137: LD_VAR 0 2
66141: PUSH
66142: LD_INT 1
66144: ARRAY
66145: PPUSH
66146: CALL_OW 251
66150: PPUSH
66151: LD_INT 12
66153: PPUSH
66154: LD_INT 1
66156: PPUSH
66157: CALL_OW 50
66161: GO 66175
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
66163: CALL_OW 45
66167: PPUSH
66168: LD_INT 1
66170: PPUSH
66171: CALL_OW 51
// end ;
66175: GO 66049
66177: POP
66178: POP
// end ;
66179: PPOPN 2
66181: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
66182: LD_EXP 41
66186: PUSH
66187: LD_EXP 87
66191: AND
66192: IFFALSE 66414
66194: GO 66196
66196: DISABLE
66197: LD_INT 0
66199: PPUSH
66200: PPUSH
66201: PPUSH
66202: PPUSH
66203: PPUSH
66204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: LD_INT 22
66212: PUSH
66213: LD_OWVAR 2
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 21
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: LD_INT 23
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: PPUSH
66254: CALL_OW 69
66258: ST_TO_ADDR
// if not tmp then
66259: LD_VAR 0 6
66263: NOT
66264: IFFALSE 66268
// exit ;
66266: GO 66414
// s1 := rand ( 1 , 4 ) ;
66268: LD_ADDR_VAR 0 2
66272: PUSH
66273: LD_INT 1
66275: PPUSH
66276: LD_INT 4
66278: PPUSH
66279: CALL_OW 12
66283: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
66284: LD_ADDR_VAR 0 4
66288: PUSH
66289: LD_VAR 0 6
66293: PUSH
66294: LD_INT 1
66296: ARRAY
66297: PPUSH
66298: LD_VAR 0 2
66302: PPUSH
66303: CALL_OW 259
66307: ST_TO_ADDR
// if s1 = 1 then
66308: LD_VAR 0 2
66312: PUSH
66313: LD_INT 1
66315: EQUAL
66316: IFFALSE 66336
// s2 := rand ( 2 , 4 ) else
66318: LD_ADDR_VAR 0 3
66322: PUSH
66323: LD_INT 2
66325: PPUSH
66326: LD_INT 4
66328: PPUSH
66329: CALL_OW 12
66333: ST_TO_ADDR
66334: GO 66344
// s2 := 1 ;
66336: LD_ADDR_VAR 0 3
66340: PUSH
66341: LD_INT 1
66343: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
66344: LD_ADDR_VAR 0 5
66348: PUSH
66349: LD_VAR 0 6
66353: PUSH
66354: LD_INT 1
66356: ARRAY
66357: PPUSH
66358: LD_VAR 0 3
66362: PPUSH
66363: CALL_OW 259
66367: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
66368: LD_VAR 0 6
66372: PUSH
66373: LD_INT 1
66375: ARRAY
66376: PPUSH
66377: LD_VAR 0 2
66381: PPUSH
66382: LD_VAR 0 5
66386: PPUSH
66387: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
66391: LD_VAR 0 6
66395: PUSH
66396: LD_INT 1
66398: ARRAY
66399: PPUSH
66400: LD_VAR 0 3
66404: PPUSH
66405: LD_VAR 0 4
66409: PPUSH
66410: CALL_OW 237
// end ;
66414: PPOPN 6
66416: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
66417: LD_EXP 41
66421: PUSH
66422: LD_EXP 88
66426: AND
66427: IFFALSE 66506
66429: GO 66431
66431: DISABLE
66432: LD_INT 0
66434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
66435: LD_ADDR_VAR 0 1
66439: PUSH
66440: LD_INT 22
66442: PUSH
66443: LD_OWVAR 2
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 30
66454: PUSH
66455: LD_INT 3
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PPUSH
66466: CALL_OW 69
66470: ST_TO_ADDR
// if not tmp then
66471: LD_VAR 0 1
66475: NOT
66476: IFFALSE 66480
// exit ;
66478: GO 66506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 1
66487: PPUSH
66488: LD_VAR 0 1
66492: PPUSH
66493: CALL_OW 12
66497: ARRAY
66498: PPUSH
66499: LD_INT 1
66501: PPUSH
66502: CALL_OW 234
// end ;
66506: PPOPN 1
66508: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
66509: LD_EXP 41
66513: PUSH
66514: LD_EXP 89
66518: AND
66519: IFFALSE 66631
66521: GO 66523
66523: DISABLE
66524: LD_INT 0
66526: PPUSH
66527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
66528: LD_ADDR_VAR 0 2
66532: PUSH
66533: LD_INT 22
66535: PUSH
66536: LD_OWVAR 2
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: LD_INT 30
66550: PUSH
66551: LD_INT 27
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 30
66560: PUSH
66561: LD_INT 26
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 30
66570: PUSH
66571: LD_INT 28
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PPUSH
66588: CALL_OW 69
66592: ST_TO_ADDR
// if not tmp then
66593: LD_VAR 0 2
66597: NOT
66598: IFFALSE 66602
// exit ;
66600: GO 66631
// for i in tmp do
66602: LD_ADDR_VAR 0 1
66606: PUSH
66607: LD_VAR 0 2
66611: PUSH
66612: FOR_IN
66613: IFFALSE 66629
// SetLives ( i , 1 ) ;
66615: LD_VAR 0 1
66619: PPUSH
66620: LD_INT 1
66622: PPUSH
66623: CALL_OW 234
66627: GO 66612
66629: POP
66630: POP
// end ;
66631: PPOPN 2
66633: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
66634: LD_EXP 41
66638: PUSH
66639: LD_EXP 90
66643: AND
66644: IFFALSE 66918
66646: GO 66648
66648: DISABLE
66649: LD_INT 0
66651: PPUSH
66652: PPUSH
66653: PPUSH
// begin i := rand ( 1 , 7 ) ;
66654: LD_ADDR_VAR 0 1
66658: PUSH
66659: LD_INT 1
66661: PPUSH
66662: LD_INT 7
66664: PPUSH
66665: CALL_OW 12
66669: ST_TO_ADDR
// case i of 1 :
66670: LD_VAR 0 1
66674: PUSH
66675: LD_INT 1
66677: DOUBLE
66678: EQUAL
66679: IFTRUE 66683
66681: GO 66693
66683: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
66684: LD_STRING earthquake(getX(game), 0, 32)
66686: PPUSH
66687: CALL_OW 559
66691: GO 66918
66693: LD_INT 2
66695: DOUBLE
66696: EQUAL
66697: IFTRUE 66701
66699: GO 66715
66701: POP
// begin ToLua ( displayStucuk(); ) ;
66702: LD_STRING displayStucuk();
66704: PPUSH
66705: CALL_OW 559
// ResetFog ;
66709: CALL_OW 335
// end ; 3 :
66713: GO 66918
66715: LD_INT 3
66717: DOUBLE
66718: EQUAL
66719: IFTRUE 66723
66721: GO 66827
66723: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66724: LD_ADDR_VAR 0 2
66728: PUSH
66729: LD_INT 22
66731: PUSH
66732: LD_OWVAR 2
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 25
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PPUSH
66755: CALL_OW 69
66759: ST_TO_ADDR
// if not tmp then
66760: LD_VAR 0 2
66764: NOT
66765: IFFALSE 66769
// exit ;
66767: GO 66918
// un := tmp [ rand ( 1 , tmp ) ] ;
66769: LD_ADDR_VAR 0 3
66773: PUSH
66774: LD_VAR 0 2
66778: PUSH
66779: LD_INT 1
66781: PPUSH
66782: LD_VAR 0 2
66786: PPUSH
66787: CALL_OW 12
66791: ARRAY
66792: ST_TO_ADDR
// if Crawls ( un ) then
66793: LD_VAR 0 3
66797: PPUSH
66798: CALL_OW 318
66802: IFFALSE 66813
// ComWalk ( un ) ;
66804: LD_VAR 0 3
66808: PPUSH
66809: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66813: LD_VAR 0 3
66817: PPUSH
66818: LD_INT 8
66820: PPUSH
66821: CALL_OW 336
// end ; 4 :
66825: GO 66918
66827: LD_INT 4
66829: DOUBLE
66830: EQUAL
66831: IFTRUE 66835
66833: GO 66896
66835: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66836: LD_ADDR_VAR 0 2
66840: PUSH
66841: LD_INT 22
66843: PUSH
66844: LD_OWVAR 2
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 30
66855: PUSH
66856: LD_INT 29
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PPUSH
66867: CALL_OW 69
66871: ST_TO_ADDR
// if not tmp then
66872: LD_VAR 0 2
66876: NOT
66877: IFFALSE 66881
// exit ;
66879: GO 66918
// DestroyUnit ( tmp [ 1 ] ) ;
66881: LD_VAR 0 2
66885: PUSH
66886: LD_INT 1
66888: ARRAY
66889: PPUSH
66890: CALL_OW 65
// end ; 5 .. 7 :
66894: GO 66918
66896: LD_INT 5
66898: DOUBLE
66899: GREATEREQUAL
66900: IFFALSE 66908
66902: LD_INT 7
66904: DOUBLE
66905: LESSEQUAL
66906: IFTRUE 66910
66908: GO 66917
66910: POP
// StreamSibBomb ; end ;
66911: CALL 63168 0 0
66915: GO 66918
66917: POP
// end ;
66918: PPOPN 3
66920: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
66921: LD_EXP 41
66925: PUSH
66926: LD_EXP 91
66930: AND
66931: IFFALSE 67087
66933: GO 66935
66935: DISABLE
66936: LD_INT 0
66938: PPUSH
66939: PPUSH
66940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
66941: LD_ADDR_VAR 0 2
66945: PUSH
66946: LD_INT 81
66948: PUSH
66949: LD_OWVAR 2
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: LD_INT 21
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 21
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: LIST
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PPUSH
66990: CALL_OW 69
66994: ST_TO_ADDR
// if not tmp then
66995: LD_VAR 0 2
66999: NOT
67000: IFFALSE 67004
// exit ;
67002: GO 67087
// p := 0 ;
67004: LD_ADDR_VAR 0 3
67008: PUSH
67009: LD_INT 0
67011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67012: LD_INT 35
67014: PPUSH
67015: CALL_OW 67
// p := p + 1 ;
67019: LD_ADDR_VAR 0 3
67023: PUSH
67024: LD_VAR 0 3
67028: PUSH
67029: LD_INT 1
67031: PLUS
67032: ST_TO_ADDR
// for i in tmp do
67033: LD_ADDR_VAR 0 1
67037: PUSH
67038: LD_VAR 0 2
67042: PUSH
67043: FOR_IN
67044: IFFALSE 67075
// if GetLives ( i ) < 1000 then
67046: LD_VAR 0 1
67050: PPUSH
67051: CALL_OW 256
67055: PUSH
67056: LD_INT 1000
67058: LESS
67059: IFFALSE 67073
// SetLives ( i , 1000 ) ;
67061: LD_VAR 0 1
67065: PPUSH
67066: LD_INT 1000
67068: PPUSH
67069: CALL_OW 234
67073: GO 67043
67075: POP
67076: POP
// until p > 20 ;
67077: LD_VAR 0 3
67081: PUSH
67082: LD_INT 20
67084: GREATER
67085: IFFALSE 67012
// end ;
67087: PPOPN 3
67089: END
// every 0 0$1 trigger StreamModeActive and sTime do
67090: LD_EXP 41
67094: PUSH
67095: LD_EXP 92
67099: AND
67100: IFFALSE 67135
67102: GO 67104
67104: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
67105: LD_INT 28
67107: PPUSH
67108: LD_OWVAR 2
67112: PPUSH
67113: LD_INT 2
67115: PPUSH
67116: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
67120: LD_INT 30
67122: PPUSH
67123: LD_OWVAR 2
67127: PPUSH
67128: LD_INT 2
67130: PPUSH
67131: CALL_OW 322
// end ;
67135: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
67136: LD_EXP 41
67140: PUSH
67141: LD_EXP 93
67145: AND
67146: IFFALSE 67267
67148: GO 67150
67150: DISABLE
67151: LD_INT 0
67153: PPUSH
67154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67155: LD_ADDR_VAR 0 2
67159: PUSH
67160: LD_INT 22
67162: PUSH
67163: LD_OWVAR 2
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 21
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: LD_INT 23
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: PPUSH
67204: CALL_OW 69
67208: ST_TO_ADDR
// if not tmp then
67209: LD_VAR 0 2
67213: NOT
67214: IFFALSE 67218
// exit ;
67216: GO 67267
// for i in tmp do
67218: LD_ADDR_VAR 0 1
67222: PUSH
67223: LD_VAR 0 2
67227: PUSH
67228: FOR_IN
67229: IFFALSE 67265
// begin if Crawls ( i ) then
67231: LD_VAR 0 1
67235: PPUSH
67236: CALL_OW 318
67240: IFFALSE 67251
// ComWalk ( i ) ;
67242: LD_VAR 0 1
67246: PPUSH
67247: CALL_OW 138
// SetClass ( i , 2 ) ;
67251: LD_VAR 0 1
67255: PPUSH
67256: LD_INT 2
67258: PPUSH
67259: CALL_OW 336
// end ;
67263: GO 67228
67265: POP
67266: POP
// end ;
67267: PPOPN 2
67269: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
67270: LD_EXP 41
67274: PUSH
67275: LD_EXP 94
67279: AND
67280: IFFALSE 67561
67282: GO 67284
67284: DISABLE
67285: LD_INT 0
67287: PPUSH
67288: PPUSH
67289: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
67290: LD_OWVAR 2
67294: PPUSH
67295: LD_INT 9
67297: PPUSH
67298: LD_INT 1
67300: PPUSH
67301: LD_INT 1
67303: PPUSH
67304: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
67308: LD_INT 9
67310: PPUSH
67311: LD_OWVAR 2
67315: PPUSH
67316: CALL_OW 343
// uc_side := 9 ;
67320: LD_ADDR_OWVAR 20
67324: PUSH
67325: LD_INT 9
67327: ST_TO_ADDR
// uc_nation := 2 ;
67328: LD_ADDR_OWVAR 21
67332: PUSH
67333: LD_INT 2
67335: ST_TO_ADDR
// hc_name := Dark Warrior ;
67336: LD_ADDR_OWVAR 26
67340: PUSH
67341: LD_STRING Dark Warrior
67343: ST_TO_ADDR
// hc_gallery :=  ;
67344: LD_ADDR_OWVAR 33
67348: PUSH
67349: LD_STRING 
67351: ST_TO_ADDR
// hc_noskilllimit := true ;
67352: LD_ADDR_OWVAR 76
67356: PUSH
67357: LD_INT 1
67359: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
67360: LD_ADDR_OWVAR 31
67364: PUSH
67365: LD_INT 30
67367: PUSH
67368: LD_INT 30
67370: PUSH
67371: LD_INT 30
67373: PUSH
67374: LD_INT 30
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: ST_TO_ADDR
// un := CreateHuman ;
67383: LD_ADDR_VAR 0 3
67387: PUSH
67388: CALL_OW 44
67392: ST_TO_ADDR
// hc_noskilllimit := false ;
67393: LD_ADDR_OWVAR 76
67397: PUSH
67398: LD_INT 0
67400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67401: LD_VAR 0 3
67405: PPUSH
67406: LD_INT 1
67408: PPUSH
67409: CALL_OW 51
// p := 0 ;
67413: LD_ADDR_VAR 0 2
67417: PUSH
67418: LD_INT 0
67420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67421: LD_INT 35
67423: PPUSH
67424: CALL_OW 67
// p := p + 1 ;
67428: LD_ADDR_VAR 0 2
67432: PUSH
67433: LD_VAR 0 2
67437: PUSH
67438: LD_INT 1
67440: PLUS
67441: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
67442: LD_VAR 0 3
67446: PPUSH
67447: CALL_OW 256
67451: PUSH
67452: LD_INT 1000
67454: LESS
67455: IFFALSE 67469
// SetLives ( un , 1000 ) ;
67457: LD_VAR 0 3
67461: PPUSH
67462: LD_INT 1000
67464: PPUSH
67465: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
67469: LD_VAR 0 3
67473: PPUSH
67474: LD_INT 81
67476: PUSH
67477: LD_OWVAR 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 91
67488: PUSH
67489: LD_VAR 0 3
67493: PUSH
67494: LD_INT 30
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PPUSH
67506: CALL_OW 69
67510: PPUSH
67511: LD_VAR 0 3
67515: PPUSH
67516: CALL_OW 74
67520: PPUSH
67521: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
67525: LD_VAR 0 2
67529: PUSH
67530: LD_INT 60
67532: GREATER
67533: PUSH
67534: LD_VAR 0 3
67538: PPUSH
67539: CALL_OW 301
67543: OR
67544: IFFALSE 67421
// if un then
67546: LD_VAR 0 3
67550: IFFALSE 67561
// RemoveUnit ( un ) ;
67552: LD_VAR 0 3
67556: PPUSH
67557: CALL_OW 64
// end ;
67561: PPOPN 3
67563: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67564: LD_INT 0
67566: PPUSH
// case cmd of 301 :
67567: LD_VAR 0 1
67571: PUSH
67572: LD_INT 301
67574: DOUBLE
67575: EQUAL
67576: IFTRUE 67580
67578: GO 67612
67580: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
67581: LD_VAR 0 6
67585: PPUSH
67586: LD_VAR 0 7
67590: PPUSH
67591: LD_VAR 0 8
67595: PPUSH
67596: LD_VAR 0 4
67600: PPUSH
67601: LD_VAR 0 5
67605: PPUSH
67606: CALL 68813 0 5
67610: GO 67733
67612: LD_INT 302
67614: DOUBLE
67615: EQUAL
67616: IFTRUE 67620
67618: GO 67657
67620: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
67621: LD_VAR 0 6
67625: PPUSH
67626: LD_VAR 0 7
67630: PPUSH
67631: LD_VAR 0 8
67635: PPUSH
67636: LD_VAR 0 9
67640: PPUSH
67641: LD_VAR 0 4
67645: PPUSH
67646: LD_VAR 0 5
67650: PPUSH
67651: CALL 68904 0 6
67655: GO 67733
67657: LD_INT 303
67659: DOUBLE
67660: EQUAL
67661: IFTRUE 67665
67663: GO 67702
67665: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
67666: LD_VAR 0 6
67670: PPUSH
67671: LD_VAR 0 7
67675: PPUSH
67676: LD_VAR 0 8
67680: PPUSH
67681: LD_VAR 0 9
67685: PPUSH
67686: LD_VAR 0 4
67690: PPUSH
67691: LD_VAR 0 5
67695: PPUSH
67696: CALL 67738 0 6
67700: GO 67733
67702: LD_INT 304
67704: DOUBLE
67705: EQUAL
67706: IFTRUE 67710
67708: GO 67732
67710: POP
// hHackTeleport ( unit , x , y ) ; end ;
67711: LD_VAR 0 2
67715: PPUSH
67716: LD_VAR 0 4
67720: PPUSH
67721: LD_VAR 0 5
67725: PPUSH
67726: CALL 69497 0 3
67730: GO 67733
67732: POP
// end ;
67733: LD_VAR 0 12
67737: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
67738: LD_INT 0
67740: PPUSH
67741: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
67742: LD_VAR 0 1
67746: PUSH
67747: LD_INT 1
67749: LESS
67750: PUSH
67751: LD_VAR 0 1
67755: PUSH
67756: LD_INT 3
67758: GREATER
67759: OR
67760: PUSH
67761: LD_VAR 0 5
67765: PPUSH
67766: LD_VAR 0 6
67770: PPUSH
67771: CALL_OW 428
67775: OR
67776: IFFALSE 67780
// exit ;
67778: GO 68500
// uc_side := your_side ;
67780: LD_ADDR_OWVAR 20
67784: PUSH
67785: LD_OWVAR 2
67789: ST_TO_ADDR
// uc_nation := nation ;
67790: LD_ADDR_OWVAR 21
67794: PUSH
67795: LD_VAR 0 1
67799: ST_TO_ADDR
// bc_level = 1 ;
67800: LD_ADDR_OWVAR 43
67804: PUSH
67805: LD_INT 1
67807: ST_TO_ADDR
// case btype of 1 :
67808: LD_VAR 0 2
67812: PUSH
67813: LD_INT 1
67815: DOUBLE
67816: EQUAL
67817: IFTRUE 67821
67819: GO 67832
67821: POP
// bc_type := b_depot ; 2 :
67822: LD_ADDR_OWVAR 42
67826: PUSH
67827: LD_INT 0
67829: ST_TO_ADDR
67830: GO 68444
67832: LD_INT 2
67834: DOUBLE
67835: EQUAL
67836: IFTRUE 67840
67838: GO 67851
67840: POP
// bc_type := b_warehouse ; 3 :
67841: LD_ADDR_OWVAR 42
67845: PUSH
67846: LD_INT 1
67848: ST_TO_ADDR
67849: GO 68444
67851: LD_INT 3
67853: DOUBLE
67854: EQUAL
67855: IFTRUE 67859
67857: GO 67870
67859: POP
// bc_type := b_lab ; 4 .. 9 :
67860: LD_ADDR_OWVAR 42
67864: PUSH
67865: LD_INT 6
67867: ST_TO_ADDR
67868: GO 68444
67870: LD_INT 4
67872: DOUBLE
67873: GREATEREQUAL
67874: IFFALSE 67882
67876: LD_INT 9
67878: DOUBLE
67879: LESSEQUAL
67880: IFTRUE 67884
67882: GO 67936
67884: POP
// begin bc_type := b_lab_half ;
67885: LD_ADDR_OWVAR 42
67889: PUSH
67890: LD_INT 7
67892: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
67893: LD_ADDR_OWVAR 44
67897: PUSH
67898: LD_INT 10
67900: PUSH
67901: LD_INT 11
67903: PUSH
67904: LD_INT 12
67906: PUSH
67907: LD_INT 15
67909: PUSH
67910: LD_INT 14
67912: PUSH
67913: LD_INT 13
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 3
67931: MINUS
67932: ARRAY
67933: ST_TO_ADDR
// end ; 10 .. 13 :
67934: GO 68444
67936: LD_INT 10
67938: DOUBLE
67939: GREATEREQUAL
67940: IFFALSE 67948
67942: LD_INT 13
67944: DOUBLE
67945: LESSEQUAL
67946: IFTRUE 67950
67948: GO 68027
67950: POP
// begin bc_type := b_lab_full ;
67951: LD_ADDR_OWVAR 42
67955: PUSH
67956: LD_INT 8
67958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
67959: LD_ADDR_OWVAR 44
67963: PUSH
67964: LD_INT 10
67966: PUSH
67967: LD_INT 12
67969: PUSH
67970: LD_INT 14
67972: PUSH
67973: LD_INT 13
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: PUSH
67982: LD_VAR 0 2
67986: PUSH
67987: LD_INT 9
67989: MINUS
67990: ARRAY
67991: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
67992: LD_ADDR_OWVAR 45
67996: PUSH
67997: LD_INT 11
67999: PUSH
68000: LD_INT 15
68002: PUSH
68003: LD_INT 12
68005: PUSH
68006: LD_INT 15
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: PUSH
68015: LD_VAR 0 2
68019: PUSH
68020: LD_INT 9
68022: MINUS
68023: ARRAY
68024: ST_TO_ADDR
// end ; 14 :
68025: GO 68444
68027: LD_INT 14
68029: DOUBLE
68030: EQUAL
68031: IFTRUE 68035
68033: GO 68046
68035: POP
// bc_type := b_workshop ; 15 :
68036: LD_ADDR_OWVAR 42
68040: PUSH
68041: LD_INT 2
68043: ST_TO_ADDR
68044: GO 68444
68046: LD_INT 15
68048: DOUBLE
68049: EQUAL
68050: IFTRUE 68054
68052: GO 68065
68054: POP
// bc_type := b_factory ; 16 :
68055: LD_ADDR_OWVAR 42
68059: PUSH
68060: LD_INT 3
68062: ST_TO_ADDR
68063: GO 68444
68065: LD_INT 16
68067: DOUBLE
68068: EQUAL
68069: IFTRUE 68073
68071: GO 68084
68073: POP
// bc_type := b_ext_gun ; 17 :
68074: LD_ADDR_OWVAR 42
68078: PUSH
68079: LD_INT 17
68081: ST_TO_ADDR
68082: GO 68444
68084: LD_INT 17
68086: DOUBLE
68087: EQUAL
68088: IFTRUE 68092
68090: GO 68120
68092: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
68093: LD_ADDR_OWVAR 42
68097: PUSH
68098: LD_INT 19
68100: PUSH
68101: LD_INT 23
68103: PUSH
68104: LD_INT 19
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: PUSH
68112: LD_VAR 0 1
68116: ARRAY
68117: ST_TO_ADDR
68118: GO 68444
68120: LD_INT 18
68122: DOUBLE
68123: EQUAL
68124: IFTRUE 68128
68126: GO 68139
68128: POP
// bc_type := b_ext_radar ; 19 :
68129: LD_ADDR_OWVAR 42
68133: PUSH
68134: LD_INT 20
68136: ST_TO_ADDR
68137: GO 68444
68139: LD_INT 19
68141: DOUBLE
68142: EQUAL
68143: IFTRUE 68147
68145: GO 68158
68147: POP
// bc_type := b_ext_radio ; 20 :
68148: LD_ADDR_OWVAR 42
68152: PUSH
68153: LD_INT 22
68155: ST_TO_ADDR
68156: GO 68444
68158: LD_INT 20
68160: DOUBLE
68161: EQUAL
68162: IFTRUE 68166
68164: GO 68177
68166: POP
// bc_type := b_ext_siberium ; 21 :
68167: LD_ADDR_OWVAR 42
68171: PUSH
68172: LD_INT 21
68174: ST_TO_ADDR
68175: GO 68444
68177: LD_INT 21
68179: DOUBLE
68180: EQUAL
68181: IFTRUE 68185
68183: GO 68196
68185: POP
// bc_type := b_ext_computer ; 22 :
68186: LD_ADDR_OWVAR 42
68190: PUSH
68191: LD_INT 24
68193: ST_TO_ADDR
68194: GO 68444
68196: LD_INT 22
68198: DOUBLE
68199: EQUAL
68200: IFTRUE 68204
68202: GO 68215
68204: POP
// bc_type := b_ext_track ; 23 :
68205: LD_ADDR_OWVAR 42
68209: PUSH
68210: LD_INT 16
68212: ST_TO_ADDR
68213: GO 68444
68215: LD_INT 23
68217: DOUBLE
68218: EQUAL
68219: IFTRUE 68223
68221: GO 68234
68223: POP
// bc_type := b_ext_laser ; 24 :
68224: LD_ADDR_OWVAR 42
68228: PUSH
68229: LD_INT 25
68231: ST_TO_ADDR
68232: GO 68444
68234: LD_INT 24
68236: DOUBLE
68237: EQUAL
68238: IFTRUE 68242
68240: GO 68253
68242: POP
// bc_type := b_control_tower ; 25 :
68243: LD_ADDR_OWVAR 42
68247: PUSH
68248: LD_INT 36
68250: ST_TO_ADDR
68251: GO 68444
68253: LD_INT 25
68255: DOUBLE
68256: EQUAL
68257: IFTRUE 68261
68259: GO 68272
68261: POP
// bc_type := b_breastwork ; 26 :
68262: LD_ADDR_OWVAR 42
68266: PUSH
68267: LD_INT 31
68269: ST_TO_ADDR
68270: GO 68444
68272: LD_INT 26
68274: DOUBLE
68275: EQUAL
68276: IFTRUE 68280
68278: GO 68291
68280: POP
// bc_type := b_bunker ; 27 :
68281: LD_ADDR_OWVAR 42
68285: PUSH
68286: LD_INT 32
68288: ST_TO_ADDR
68289: GO 68444
68291: LD_INT 27
68293: DOUBLE
68294: EQUAL
68295: IFTRUE 68299
68297: GO 68310
68299: POP
// bc_type := b_turret ; 28 :
68300: LD_ADDR_OWVAR 42
68304: PUSH
68305: LD_INT 33
68307: ST_TO_ADDR
68308: GO 68444
68310: LD_INT 28
68312: DOUBLE
68313: EQUAL
68314: IFTRUE 68318
68316: GO 68329
68318: POP
// bc_type := b_armoury ; 29 :
68319: LD_ADDR_OWVAR 42
68323: PUSH
68324: LD_INT 4
68326: ST_TO_ADDR
68327: GO 68444
68329: LD_INT 29
68331: DOUBLE
68332: EQUAL
68333: IFTRUE 68337
68335: GO 68348
68337: POP
// bc_type := b_barracks ; 30 :
68338: LD_ADDR_OWVAR 42
68342: PUSH
68343: LD_INT 5
68345: ST_TO_ADDR
68346: GO 68444
68348: LD_INT 30
68350: DOUBLE
68351: EQUAL
68352: IFTRUE 68356
68354: GO 68367
68356: POP
// bc_type := b_solar_power ; 31 :
68357: LD_ADDR_OWVAR 42
68361: PUSH
68362: LD_INT 27
68364: ST_TO_ADDR
68365: GO 68444
68367: LD_INT 31
68369: DOUBLE
68370: EQUAL
68371: IFTRUE 68375
68373: GO 68386
68375: POP
// bc_type := b_oil_power ; 32 :
68376: LD_ADDR_OWVAR 42
68380: PUSH
68381: LD_INT 26
68383: ST_TO_ADDR
68384: GO 68444
68386: LD_INT 32
68388: DOUBLE
68389: EQUAL
68390: IFTRUE 68394
68392: GO 68405
68394: POP
// bc_type := b_siberite_power ; 33 :
68395: LD_ADDR_OWVAR 42
68399: PUSH
68400: LD_INT 28
68402: ST_TO_ADDR
68403: GO 68444
68405: LD_INT 33
68407: DOUBLE
68408: EQUAL
68409: IFTRUE 68413
68411: GO 68424
68413: POP
// bc_type := b_oil_mine ; 34 :
68414: LD_ADDR_OWVAR 42
68418: PUSH
68419: LD_INT 29
68421: ST_TO_ADDR
68422: GO 68444
68424: LD_INT 34
68426: DOUBLE
68427: EQUAL
68428: IFTRUE 68432
68430: GO 68443
68432: POP
// bc_type := b_siberite_mine ; end ;
68433: LD_ADDR_OWVAR 42
68437: PUSH
68438: LD_INT 30
68440: ST_TO_ADDR
68441: GO 68444
68443: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
68444: LD_ADDR_VAR 0 8
68448: PUSH
68449: LD_VAR 0 5
68453: PPUSH
68454: LD_VAR 0 6
68458: PPUSH
68459: LD_VAR 0 3
68463: PPUSH
68464: CALL_OW 47
68468: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
68469: LD_OWVAR 42
68473: PUSH
68474: LD_INT 32
68476: PUSH
68477: LD_INT 33
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: IN
68484: IFFALSE 68500
// PlaceWeaponTurret ( b , weapon ) ;
68486: LD_VAR 0 8
68490: PPUSH
68491: LD_VAR 0 4
68495: PPUSH
68496: CALL_OW 431
// end ;
68500: LD_VAR 0 7
68504: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
68505: LD_INT 0
68507: PPUSH
68508: PPUSH
68509: PPUSH
68510: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68511: LD_ADDR_VAR 0 4
68515: PUSH
68516: LD_INT 22
68518: PUSH
68519: LD_OWVAR 2
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 2
68530: PUSH
68531: LD_INT 30
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 30
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PPUSH
68560: CALL_OW 69
68564: ST_TO_ADDR
// if not tmp then
68565: LD_VAR 0 4
68569: NOT
68570: IFFALSE 68574
// exit ;
68572: GO 68633
// for i in tmp do
68574: LD_ADDR_VAR 0 2
68578: PUSH
68579: LD_VAR 0 4
68583: PUSH
68584: FOR_IN
68585: IFFALSE 68631
// for j = 1 to 3 do
68587: LD_ADDR_VAR 0 3
68591: PUSH
68592: DOUBLE
68593: LD_INT 1
68595: DEC
68596: ST_TO_ADDR
68597: LD_INT 3
68599: PUSH
68600: FOR_TO
68601: IFFALSE 68627
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
68603: LD_VAR 0 2
68607: PPUSH
68608: CALL_OW 274
68612: PPUSH
68613: LD_VAR 0 3
68617: PPUSH
68618: LD_INT 99999
68620: PPUSH
68621: CALL_OW 277
68625: GO 68600
68627: POP
68628: POP
68629: GO 68584
68631: POP
68632: POP
// end ;
68633: LD_VAR 0 1
68637: RET
// export function hHackSetLevel10 ; var i , j ; begin
68638: LD_INT 0
68640: PPUSH
68641: PPUSH
68642: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
68643: LD_ADDR_VAR 0 2
68647: PUSH
68648: LD_INT 21
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PPUSH
68658: CALL_OW 69
68662: PUSH
68663: FOR_IN
68664: IFFALSE 68716
// if IsSelected ( i ) then
68666: LD_VAR 0 2
68670: PPUSH
68671: CALL_OW 306
68675: IFFALSE 68714
// begin for j := 1 to 4 do
68677: LD_ADDR_VAR 0 3
68681: PUSH
68682: DOUBLE
68683: LD_INT 1
68685: DEC
68686: ST_TO_ADDR
68687: LD_INT 4
68689: PUSH
68690: FOR_TO
68691: IFFALSE 68712
// SetSkill ( i , j , 10 ) ;
68693: LD_VAR 0 2
68697: PPUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: LD_INT 10
68705: PPUSH
68706: CALL_OW 237
68710: GO 68690
68712: POP
68713: POP
// end ;
68714: GO 68663
68716: POP
68717: POP
// end ;
68718: LD_VAR 0 1
68722: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
68723: LD_INT 0
68725: PPUSH
68726: PPUSH
68727: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
68728: LD_ADDR_VAR 0 2
68732: PUSH
68733: LD_INT 22
68735: PUSH
68736: LD_OWVAR 2
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 21
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PPUSH
68759: CALL_OW 69
68763: PUSH
68764: FOR_IN
68765: IFFALSE 68806
// begin for j := 1 to 4 do
68767: LD_ADDR_VAR 0 3
68771: PUSH
68772: DOUBLE
68773: LD_INT 1
68775: DEC
68776: ST_TO_ADDR
68777: LD_INT 4
68779: PUSH
68780: FOR_TO
68781: IFFALSE 68802
// SetSkill ( i , j , 10 ) ;
68783: LD_VAR 0 2
68787: PPUSH
68788: LD_VAR 0 3
68792: PPUSH
68793: LD_INT 10
68795: PPUSH
68796: CALL_OW 237
68800: GO 68780
68802: POP
68803: POP
// end ;
68804: GO 68764
68806: POP
68807: POP
// end ;
68808: LD_VAR 0 1
68812: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
68813: LD_INT 0
68815: PPUSH
// uc_side := your_side ;
68816: LD_ADDR_OWVAR 20
68820: PUSH
68821: LD_OWVAR 2
68825: ST_TO_ADDR
// uc_nation := nation ;
68826: LD_ADDR_OWVAR 21
68830: PUSH
68831: LD_VAR 0 1
68835: ST_TO_ADDR
// InitHc ;
68836: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
68840: LD_INT 0
68842: PPUSH
68843: LD_VAR 0 2
68847: PPUSH
68848: LD_VAR 0 3
68852: PPUSH
68853: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
68857: LD_VAR 0 4
68861: PPUSH
68862: LD_VAR 0 5
68866: PPUSH
68867: CALL_OW 428
68871: PUSH
68872: LD_INT 0
68874: EQUAL
68875: IFFALSE 68899
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
68877: CALL_OW 44
68881: PPUSH
68882: LD_VAR 0 4
68886: PPUSH
68887: LD_VAR 0 5
68891: PPUSH
68892: LD_INT 1
68894: PPUSH
68895: CALL_OW 48
// end ;
68899: LD_VAR 0 6
68903: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
// uc_side := your_side ;
68908: LD_ADDR_OWVAR 20
68912: PUSH
68913: LD_OWVAR 2
68917: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
68918: LD_VAR 0 1
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: LD_INT 4
68934: PUSH
68935: LD_INT 5
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: IN
68945: IFFALSE 68957
// uc_nation := nation_american else
68947: LD_ADDR_OWVAR 21
68951: PUSH
68952: LD_INT 1
68954: ST_TO_ADDR
68955: GO 69000
// if chassis in [ 11 , 12 , 13 , 14 ] then
68957: LD_VAR 0 1
68961: PUSH
68962: LD_INT 11
68964: PUSH
68965: LD_INT 12
68967: PUSH
68968: LD_INT 13
68970: PUSH
68971: LD_INT 14
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: IN
68980: IFFALSE 68992
// uc_nation := nation_arabian else
68982: LD_ADDR_OWVAR 21
68986: PUSH
68987: LD_INT 2
68989: ST_TO_ADDR
68990: GO 69000
// uc_nation := nation_russian ;
68992: LD_ADDR_OWVAR 21
68996: PUSH
68997: LD_INT 3
68999: ST_TO_ADDR
// vc_chassis := chassis ;
69000: LD_ADDR_OWVAR 37
69004: PUSH
69005: LD_VAR 0 1
69009: ST_TO_ADDR
// vc_engine := engine ;
69010: LD_ADDR_OWVAR 39
69014: PUSH
69015: LD_VAR 0 2
69019: ST_TO_ADDR
// vc_control := control ;
69020: LD_ADDR_OWVAR 38
69024: PUSH
69025: LD_VAR 0 3
69029: ST_TO_ADDR
// vc_weapon := weapon ;
69030: LD_ADDR_OWVAR 40
69034: PUSH
69035: LD_VAR 0 4
69039: ST_TO_ADDR
// un := CreateVehicle ;
69040: LD_ADDR_VAR 0 8
69044: PUSH
69045: CALL_OW 45
69049: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
69050: LD_VAR 0 8
69054: PPUSH
69055: LD_INT 0
69057: PPUSH
69058: LD_INT 5
69060: PPUSH
69061: CALL_OW 12
69065: PPUSH
69066: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
69070: LD_VAR 0 8
69074: PPUSH
69075: LD_VAR 0 5
69079: PPUSH
69080: LD_VAR 0 6
69084: PPUSH
69085: LD_INT 1
69087: PPUSH
69088: CALL_OW 48
// end ;
69092: LD_VAR 0 7
69096: RET
// export hInvincible ; every 1 do
69097: GO 69099
69099: DISABLE
// hInvincible := [ ] ;
69100: LD_ADDR_EXP 95
69104: PUSH
69105: EMPTY
69106: ST_TO_ADDR
69107: END
// every 10 do var i ;
69108: GO 69110
69110: DISABLE
69111: LD_INT 0
69113: PPUSH
// begin enable ;
69114: ENABLE
// if not hInvincible then
69115: LD_EXP 95
69119: NOT
69120: IFFALSE 69124
// exit ;
69122: GO 69168
// for i in hInvincible do
69124: LD_ADDR_VAR 0 1
69128: PUSH
69129: LD_EXP 95
69133: PUSH
69134: FOR_IN
69135: IFFALSE 69166
// if GetLives ( i ) < 1000 then
69137: LD_VAR 0 1
69141: PPUSH
69142: CALL_OW 256
69146: PUSH
69147: LD_INT 1000
69149: LESS
69150: IFFALSE 69164
// SetLives ( i , 1000 ) ;
69152: LD_VAR 0 1
69156: PPUSH
69157: LD_INT 1000
69159: PPUSH
69160: CALL_OW 234
69164: GO 69134
69166: POP
69167: POP
// end ;
69168: PPOPN 1
69170: END
// export function hHackInvincible ; var i ; begin
69171: LD_INT 0
69173: PPUSH
69174: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
69175: LD_ADDR_VAR 0 2
69179: PUSH
69180: LD_INT 2
69182: PUSH
69183: LD_INT 21
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 21
69195: PUSH
69196: LD_INT 2
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: PPUSH
69208: CALL_OW 69
69212: PUSH
69213: FOR_IN
69214: IFFALSE 69275
// if IsSelected ( i ) then
69216: LD_VAR 0 2
69220: PPUSH
69221: CALL_OW 306
69225: IFFALSE 69273
// begin if i in hInvincible then
69227: LD_VAR 0 2
69231: PUSH
69232: LD_EXP 95
69236: IN
69237: IFFALSE 69257
// hInvincible := hInvincible diff i else
69239: LD_ADDR_EXP 95
69243: PUSH
69244: LD_EXP 95
69248: PUSH
69249: LD_VAR 0 2
69253: DIFF
69254: ST_TO_ADDR
69255: GO 69273
// hInvincible := hInvincible union i ;
69257: LD_ADDR_EXP 95
69261: PUSH
69262: LD_EXP 95
69266: PUSH
69267: LD_VAR 0 2
69271: UNION
69272: ST_TO_ADDR
// end ;
69273: GO 69213
69275: POP
69276: POP
// end ;
69277: LD_VAR 0 1
69281: RET
// export function hHackInvisible ; var i , j ; begin
69282: LD_INT 0
69284: PPUSH
69285: PPUSH
69286: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69287: LD_ADDR_VAR 0 2
69291: PUSH
69292: LD_INT 21
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PPUSH
69302: CALL_OW 69
69306: PUSH
69307: FOR_IN
69308: IFFALSE 69332
// if IsSelected ( i ) then
69310: LD_VAR 0 2
69314: PPUSH
69315: CALL_OW 306
69319: IFFALSE 69330
// ComForceInvisible ( i ) ;
69321: LD_VAR 0 2
69325: PPUSH
69326: CALL_OW 496
69330: GO 69307
69332: POP
69333: POP
// end ;
69334: LD_VAR 0 1
69338: RET
// export function hHackChangeYourSide ; begin
69339: LD_INT 0
69341: PPUSH
// if your_side = 8 then
69342: LD_OWVAR 2
69346: PUSH
69347: LD_INT 8
69349: EQUAL
69350: IFFALSE 69362
// your_side := 0 else
69352: LD_ADDR_OWVAR 2
69356: PUSH
69357: LD_INT 0
69359: ST_TO_ADDR
69360: GO 69376
// your_side := your_side + 1 ;
69362: LD_ADDR_OWVAR 2
69366: PUSH
69367: LD_OWVAR 2
69371: PUSH
69372: LD_INT 1
69374: PLUS
69375: ST_TO_ADDR
// end ;
69376: LD_VAR 0 1
69380: RET
// export function hHackChangeUnitSide ; var i , j ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
69385: PPUSH
// for i in all_units do
69386: LD_ADDR_VAR 0 2
69390: PUSH
69391: LD_OWVAR 3
69395: PUSH
69396: FOR_IN
69397: IFFALSE 69475
// if IsSelected ( i ) then
69399: LD_VAR 0 2
69403: PPUSH
69404: CALL_OW 306
69408: IFFALSE 69473
// begin j := GetSide ( i ) ;
69410: LD_ADDR_VAR 0 3
69414: PUSH
69415: LD_VAR 0 2
69419: PPUSH
69420: CALL_OW 255
69424: ST_TO_ADDR
// if j = 8 then
69425: LD_VAR 0 3
69429: PUSH
69430: LD_INT 8
69432: EQUAL
69433: IFFALSE 69445
// j := 0 else
69435: LD_ADDR_VAR 0 3
69439: PUSH
69440: LD_INT 0
69442: ST_TO_ADDR
69443: GO 69459
// j := j + 1 ;
69445: LD_ADDR_VAR 0 3
69449: PUSH
69450: LD_VAR 0 3
69454: PUSH
69455: LD_INT 1
69457: PLUS
69458: ST_TO_ADDR
// SetSide ( i , j ) ;
69459: LD_VAR 0 2
69463: PPUSH
69464: LD_VAR 0 3
69468: PPUSH
69469: CALL_OW 235
// end ;
69473: GO 69396
69475: POP
69476: POP
// end ;
69477: LD_VAR 0 1
69481: RET
// export function hHackFog ; begin
69482: LD_INT 0
69484: PPUSH
// FogOff ( true ) ;
69485: LD_INT 1
69487: PPUSH
69488: CALL_OW 344
// end ;
69492: LD_VAR 0 1
69496: RET
// export function hHackTeleport ( unit , x , y ) ; begin
69497: LD_INT 0
69499: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
69500: LD_VAR 0 1
69504: PPUSH
69505: LD_VAR 0 2
69509: PPUSH
69510: LD_VAR 0 3
69514: PPUSH
69515: LD_INT 1
69517: PPUSH
69518: LD_INT 1
69520: PPUSH
69521: CALL_OW 483
// CenterOnXY ( x , y ) ;
69525: LD_VAR 0 2
69529: PPUSH
69530: LD_VAR 0 3
69534: PPUSH
69535: CALL_OW 84
// end ; end_of_file
69539: LD_VAR 0 4
69543: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69544: LD_VAR 0 1
69548: PPUSH
69549: LD_VAR 0 2
69553: PPUSH
69554: LD_VAR 0 3
69558: PPUSH
69559: LD_VAR 0 4
69563: PPUSH
69564: LD_VAR 0 5
69568: PPUSH
69569: LD_VAR 0 6
69573: PPUSH
69574: CALL 56372 0 6
// end ; end_of_file end_of_file
69578: PPOPN 6
69580: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
69581: LD_INT 0
69583: PPUSH
// ar_miner := 81 ;
69584: LD_ADDR_EXP 103
69588: PUSH
69589: LD_INT 81
69591: ST_TO_ADDR
// ar_crane := 88 ;
69592: LD_ADDR_EXP 102
69596: PUSH
69597: LD_INT 88
69599: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69600: LD_ADDR_EXP 97
69604: PUSH
69605: LD_INT 89
69607: ST_TO_ADDR
// us_hack := 99 ;
69608: LD_ADDR_EXP 98
69612: PUSH
69613: LD_INT 99
69615: ST_TO_ADDR
// us_artillery := 97 ;
69616: LD_ADDR_EXP 99
69620: PUSH
69621: LD_INT 97
69623: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69624: LD_ADDR_EXP 100
69628: PUSH
69629: LD_INT 91
69631: ST_TO_ADDR
// ar_mortar := 92 ;
69632: LD_ADDR_EXP 101
69636: PUSH
69637: LD_INT 92
69639: ST_TO_ADDR
// ru_radar := 98 ;
69640: LD_ADDR_EXP 96
69644: PUSH
69645: LD_INT 98
69647: ST_TO_ADDR
// tech_Artillery := 80 ;
69648: LD_ADDR_EXP 104
69652: PUSH
69653: LD_INT 80
69655: ST_TO_ADDR
// tech_RadMat := 81 ;
69656: LD_ADDR_EXP 105
69660: PUSH
69661: LD_INT 81
69663: ST_TO_ADDR
// tech_BasicTools := 82 ;
69664: LD_ADDR_EXP 106
69668: PUSH
69669: LD_INT 82
69671: ST_TO_ADDR
// tech_Cargo := 83 ;
69672: LD_ADDR_EXP 107
69676: PUSH
69677: LD_INT 83
69679: ST_TO_ADDR
// tech_Track := 84 ;
69680: LD_ADDR_EXP 108
69684: PUSH
69685: LD_INT 84
69687: ST_TO_ADDR
// tech_Crane := 85 ;
69688: LD_ADDR_EXP 109
69692: PUSH
69693: LD_INT 85
69695: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69696: LD_ADDR_EXP 110
69700: PUSH
69701: LD_INT 86
69703: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69704: LD_ADDR_EXP 111
69708: PUSH
69709: LD_INT 87
69711: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
69712: LD_ADDR_EXP 112
69716: PUSH
69717: LD_INT 88
69719: ST_TO_ADDR
// class_mastodont := 31 ;
69720: LD_ADDR_EXP 113
69724: PUSH
69725: LD_INT 31
69727: ST_TO_ADDR
// class_horse := 21 ;
69728: LD_ADDR_EXP 114
69732: PUSH
69733: LD_INT 21
69735: ST_TO_ADDR
// end ;
69736: LD_VAR 0 1
69740: RET
// every 1 do
69741: GO 69743
69743: DISABLE
// InitGlobalVariables ;
69744: CALL 69581 0 0
69748: END
