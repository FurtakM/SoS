// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 404 0 3
// PrepareAmerican ;
  28: CALL 2445 0 0
// PrepareArabian ;
  32: CALL 1124 0 0
// Action ;
  36: CALL 7180 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// end ; end_of_file
 182: LD_VAR 0 1
 186: RET
// export function SayX ( units , ident ) ; var i ; begin
 187: LD_INT 0
 189: PPUSH
 190: PPUSH
// result := false ;
 191: LD_ADDR_VAR 0 3
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// if not units then
 199: LD_VAR 0 1
 203: NOT
 204: IFFALSE 208
// exit ;
 206: GO 262
// for i in units do
 208: LD_ADDR_VAR 0 4
 212: PUSH
 213: LD_VAR 0 1
 217: PUSH
 218: FOR_IN
 219: IFFALSE 260
// if IsOk ( i ) then
 221: LD_VAR 0 4
 225: PPUSH
 226: CALL_OW 302
 230: IFFALSE 258
// begin Say ( i , ident ) ;
 232: LD_VAR 0 4
 236: PPUSH
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 88
// result := i ;
 246: LD_ADDR_VAR 0 3
 250: PUSH
 251: LD_VAR 0 4
 255: ST_TO_ADDR
// break ;
 256: GO 260
// end ;
 258: GO 218
 260: POP
 261: POP
// end ;
 262: LD_VAR 0 3
 266: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 267: LD_INT 0
 269: PPUSH
 270: PPUSH
// InitUc ;
 271: CALL_OW 18
// InitHc ;
 275: CALL_OW 19
// uc_side := 0 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// uc_nation := 0 ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// for i = 1 to amount do
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: DOUBLE
 301: LD_INT 1
 303: DEC
 304: ST_TO_ADDR
 305: LD_VAR 0 2
 309: PUSH
 310: FOR_TO
 311: IFFALSE 393
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 313: LD_ADDR_OWVAR 29
 317: PUSH
 318: LD_INT 9
 320: PPUSH
 321: LD_INT 12
 323: PPUSH
 324: CALL_OW 12
 328: PUSH
 329: LD_INT 9
 331: PPUSH
 332: LD_INT 12
 334: PPUSH
 335: CALL_OW 12
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 344: LD_ADDR_OWVAR 35
 348: PUSH
 349: LD_INT 1
 351: NEG
 352: PPUSH
 353: LD_INT 1
 355: PPUSH
 356: CALL_OW 12
 360: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 361: LD_INT 0
 363: PPUSH
 364: LD_INT 12
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 374: CALL_OW 44
 378: PPUSH
 379: LD_VAR 0 1
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL_OW 49
// end ;
 391: GO 310
 393: POP
 394: POP
// InitHc ;
 395: CALL_OW 19
// end ;
 399: LD_VAR 0 3
 403: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
// uc_side := 0 ;
 408: LD_ADDR_OWVAR 20
 412: PUSH
 413: LD_INT 0
 415: ST_TO_ADDR
// uc_nation := 0 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 0
 423: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 9
 431: PUSH
 432: LD_INT 8
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: PPUSH
 453: CALL 267 0 2
// for i := 1 to 4 do
 457: LD_ADDR_VAR 0 5
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 4
 469: PUSH
 470: FOR_TO
 471: IFFALSE 508
// begin hc_class := class_horse ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 21
 480: ST_TO_ADDR
// hc_gallery :=  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 489: CALL_OW 44
 493: PPUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL_OW 49
// end ;
 506: GO 470
 508: POP
 509: POP
// for i = 1 to 5 do
 510: LD_ADDR_VAR 0 5
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_INT 5
 522: PUSH
 523: FOR_TO
 524: IFFALSE 578
// begin hc_class = class_tiger ;
 526: LD_ADDR_OWVAR 28
 530: PUSH
 531: LD_INT 14
 533: ST_TO_ADDR
// hc_gallery =  ;
 534: LD_ADDR_OWVAR 33
 538: PUSH
 539: LD_STRING 
 541: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 542: LD_ADDR_OWVAR 35
 546: PUSH
 547: LD_INT 7
 549: NEG
 550: PPUSH
 551: LD_INT 7
 553: PPUSH
 554: CALL_OW 12
 558: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 2
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 523
 578: POP
 579: POP
// for i := 1 to 4 do
 580: LD_ADDR_VAR 0 5
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 4
 592: PUSH
 593: FOR_TO
 594: IFFALSE 631
// begin hc_class := class_phororhacos ;
 596: LD_ADDR_OWVAR 28
 600: PUSH
 601: LD_INT 18
 603: ST_TO_ADDR
// hc_gallery :=  ;
 604: LD_ADDR_OWVAR 33
 608: PUSH
 609: LD_STRING 
 611: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ;
 629: GO 593
 631: POP
 632: POP
// for i := 1 to 4 do
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: DOUBLE
 639: LD_INT 1
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 684
// begin hc_class := class_baggie ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 13
 656: ST_TO_ADDR
// hc_gallery :=  ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING 
 664: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 665: CALL_OW 44
 669: PPUSH
 670: LD_VAR 0 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 646
 684: POP
 685: POP
// for i := 1 to 5 do
 686: LD_ADDR_VAR 0 5
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 5
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := class_fish ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 20
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 3
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// end ;
 739: LD_VAR 0 4
 743: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
// if not observer or not unit then
 749: LD_VAR 0 1
 753: NOT
 754: PUSH
 755: LD_VAR 0 2
 759: NOT
 760: OR
 761: IFFALSE 765
// exit ;
 763: GO 813
// if not See ( GetSide ( observer ) , unit ) then
 765: LD_VAR 0 1
 769: PPUSH
 770: CALL_OW 255
 774: PPUSH
 775: LD_VAR 0 2
 779: PPUSH
 780: CALL_OW 292
 784: NOT
 785: IFFALSE 789
// exit ;
 787: GO 813
// result := GetDistUnits ( observer , unit ) < 12 ;
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 1
 798: PPUSH
 799: LD_VAR 0 2
 803: PPUSH
 804: CALL_OW 296
 808: PUSH
 809: LD_INT 12
 811: LESS
 812: ST_TO_ADDR
// end ;
 813: LD_VAR 0 3
 817: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 818: LD_INT 0
 820: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 488
 843: PUSH
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: CALL_OW 428
 866: PUSH
 867: LD_INT 0
 869: EQUAL
 870: AND
 871: IFFALSE 905
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_VAR 0 3
 900: PPUSH
 901: CALL_OW 48
// end ;
 905: LD_VAR 0 4
 909: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 910: LD_INT 0
 912: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: LD_VAR 0 2
 922: PPUSH
 923: LD_VAR 0 3
 927: PPUSH
 928: LD_VAR 0 4
 932: PPUSH
 933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PPUSH
 947: LD_VAR 0 3
 951: PPUSH
 952: CALL_OW 331
// end ;
 956: LD_VAR 0 5
 960: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 961: LD_INT 0
 963: PPUSH
// if not units then
 964: LD_VAR 0 1
 968: NOT
 969: IFFALSE 973
// exit ;
 971: GO 1056
// result := true ;
 973: LD_ADDR_VAR 0 4
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_INT 26
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PPUSH
 996: CALL_OW 72
1000: PUSH
1001: LD_INT 1
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 2
1009: PPUSH
1010: CALL_OW 88
1014: NOT
1015: IFFALSE 1056
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1017: LD_ADDR_VAR 0 4
1021: PUSH
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 3
1050: PPUSH
1051: CALL_OW 88
1055: ST_TO_ADDR
// end ;
1056: LD_VAR 0 4
1060: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1061: LD_INT 0
1063: PPUSH
1064: PPUSH
// if not group then
1065: LD_VAR 0 2
1069: NOT
1070: IFFALSE 1074
// exit ;
1072: GO 1119
// for i in group do
1074: LD_ADDR_VAR 0 4
1078: PUSH
1079: LD_VAR 0 2
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1117
// if See ( side , i ) then
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 4
1096: PPUSH
1097: CALL_OW 292
1101: IFFALSE 1115
// begin result := true ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// exit ;
1111: POP
1112: POP
1113: GO 1119
// end ;
1115: GO 1084
1117: POP
1118: POP
// end ; end_of_file
1119: LD_VAR 0 3
1123: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// uc_nation := 2 ;
1130: LD_ADDR_OWVAR 21
1134: PUSH
1135: LD_INT 2
1137: ST_TO_ADDR
// uc_side := 5 ;
1138: LD_ADDR_OWVAR 20
1142: PUSH
1143: LD_INT 5
1145: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1146: LD_ADDR_EXP 21
1150: PUSH
1151: LD_STRING Abdul
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: LD_STRING 
1159: PPUSH
1160: CALL 15257 0 3
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1173: LD_ADDR_EXP 13
1177: PUSH
1178: LD_STRING Heike
1180: PPUSH
1181: LD_EXP 1
1185: NOT
1186: PPUSH
1187: LD_EXP 2
1191: PPUSH
1192: CALL 15257 0 3
1196: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1197: LD_ADDR_EXP 16
1201: PUSH
1202: LD_STRING Ibrahim
1204: PPUSH
1205: LD_EXP 1
1209: NOT
1210: PPUSH
1211: LD_EXP 2
1215: PPUSH
1216: CALL 15257 0 3
1220: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_STRING Givi
1228: PPUSH
1229: LD_EXP 1
1233: NOT
1234: PPUSH
1235: LD_EXP 2
1239: PPUSH
1240: CALL 15257 0 3
1244: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_STRING Kamil
1252: PPUSH
1253: LD_EXP 1
1257: NOT
1258: PPUSH
1259: LD_EXP 2
1263: PPUSH
1264: CALL 15257 0 3
1268: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1269: LD_ADDR_EXP 18
1273: PUSH
1274: LD_STRING Kaia
1276: PPUSH
1277: LD_EXP 1
1281: NOT
1282: PPUSH
1283: LD_EXP 2
1287: PPUSH
1288: CALL 15257 0 3
1292: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1293: LD_ADDR_EXP 19
1297: PUSH
1298: LD_STRING Sophia
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_EXP 2
1311: PPUSH
1312: CALL 15257 0 3
1316: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1317: LD_ADDR_EXP 20
1321: PUSH
1322: LD_STRING Markov
1324: PPUSH
1325: LD_EXP 1
1329: NOT
1330: PPUSH
1331: LD_EXP 2
1335: PPUSH
1336: CALL 15257 0 3
1340: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1341: LD_ADDR_EXP 24
1345: PUSH
1346: LD_STRING Aviradze
1348: PPUSH
1349: LD_EXP 1
1353: NOT
1354: PPUSH
1355: LD_EXP 2
1359: PPUSH
1360: CALL 15257 0 3
1364: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1365: LD_ADDR_EXP 23
1369: PUSH
1370: LD_STRING Kurt
1372: PPUSH
1373: LD_EXP 1
1377: NOT
1378: PPUSH
1379: LD_EXP 2
1383: PPUSH
1384: CALL 15257 0 3
1388: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 15
1393: PUSH
1394: LD_STRING Mike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 15257 0 3
1412: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 22
1417: PUSH
1418: LD_STRING Olaf
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 15257 0 3
1436: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1437: LD_ADDR_EXP 25
1441: PUSH
1442: LD_STRING 06_others
1444: PPUSH
1445: CALL_OW 31
1449: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1450: LD_ADDR_EXP 26
1454: PUSH
1455: LD_STRING 06_apes
1457: PPUSH
1458: CALL_OW 31
1462: ST_TO_ADDR
// if debug then
1463: LD_EXP 1
1467: IFFALSE 1740
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1469: LD_ADDR_VAR 0 3
1473: PUSH
1474: LD_INT 14
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: LD_INT 2
1482: PUSH
1483: LD_INT 25
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 1000
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: LD_INT 31
1515: PUSH
1516: LD_INT 2
1518: PUSH
1519: LD_INT 1000
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 14
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 27
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 750
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: LD_INT 27
1575: PUSH
1576: LD_INT 2
1578: PUSH
1579: LD_INT 900
1581: PUSH
1582: LD_INT 0
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 14
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: LD_INT 32
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: LD_INT 1000
1611: PUSH
1612: LD_INT 100
1614: PUSH
1615: LD_INT 0
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 14
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 32
1642: PUSH
1643: LD_INT 2
1645: PUSH
1646: LD_INT 1000
1648: PUSH
1649: LD_INT 50
1651: PUSH
1652: LD_INT 50
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 14
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 27
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: LD_INT 1000
1685: PUSH
1686: LD_INT 0
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 14
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 92
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end else
1738: GO 1747
// tmp := [ ] ;
1740: LD_ADDR_VAR 0 3
1744: PUSH
1745: EMPTY
1746: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1747: LD_ADDR_EXP 27
1751: PUSH
1752: LD_STRING 06_Vehicles
1754: PPUSH
1755: LD_VAR 0 3
1759: PPUSH
1760: CALL_OW 30
1764: ST_TO_ADDR
// counter := 0 ;
1765: LD_ADDR_VAR 0 4
1769: PUSH
1770: LD_INT 0
1772: ST_TO_ADDR
// if heikeVehicles then
1773: LD_EXP 27
1777: IFFALSE 1899
// begin for i := heikeVehicles downto 1 do
1779: LD_ADDR_VAR 0 2
1783: PUSH
1784: DOUBLE
1785: LD_EXP 27
1789: INC
1790: ST_TO_ADDR
1791: LD_INT 1
1793: PUSH
1794: FOR_DOWNTO
1795: IFFALSE 1897
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1797: LD_EXP 27
1801: PUSH
1802: LD_VAR 0 2
1806: ARRAY
1807: PUSH
1808: LD_INT 3
1810: ARRAY
1811: PUSH
1812: LD_INT 2
1814: EQUAL
1815: IFFALSE 1895
// begin if counter < remoteControlLimit then
1817: LD_VAR 0 4
1821: PUSH
1822: LD_EXP 12
1826: LESS
1827: IFFALSE 1875
// begin counter := Inc ( counter ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 54067 0 1
1843: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1844: LD_ADDR_EXP 27
1848: PUSH
1849: LD_EXP 27
1853: PPUSH
1854: LD_EXP 27
1858: PPUSH
1859: LD_EXP 27
1863: PUSH
1864: LD_VAR 0 2
1868: ARRAY
1869: PPUSH
1870: CALL_OW 2
1874: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1875: LD_ADDR_EXP 27
1879: PUSH
1880: LD_EXP 27
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: CALL_OW 3
1894: ST_TO_ADDR
// end ; end ;
1895: GO 1794
1897: POP
1898: POP
// end ; end ;
1899: LD_VAR 0 1
1903: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1904: LD_EXP 3
1908: IFFALSE 2442
1910: GO 1912
1912: DISABLE
1913: LD_INT 0
1915: PPUSH
1916: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_INT 96
1924: PUSH
1925: LD_INT 50
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 49
1934: PUSH
1935: LD_INT 52
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 34
1944: PUSH
1945: LD_INT 55
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 41
1954: PUSH
1955: LD_INT 70
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 53
1964: PUSH
1965: LD_INT 96
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 103
1974: PUSH
1975: LD_INT 64
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 104
1992: PUSH
1993: LD_INT 70
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 111
2002: PUSH
2003: LD_INT 103
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 131
2012: PUSH
2013: LD_INT 147
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 130
2022: PUSH
2023: LD_INT 153
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 110
2032: PUSH
2033: LD_INT 93
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 103
2042: PUSH
2043: LD_INT 65
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// for i in tmp [ 1 ] do
2062: LD_ADDR_VAR 0 1
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 1
2074: ARRAY
2075: PUSH
2076: FOR_IN
2077: IFFALSE 2129
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2079: LD_EXP 15
2083: PPUSH
2084: LD_VAR 0 1
2088: PUSH
2089: LD_INT 1
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 1
2097: PUSH
2098: LD_INT 2
2100: ARRAY
2101: PPUSH
2102: CALL_OW 174
// AddComHold ( Mike ) ;
2106: LD_EXP 15
2110: PPUSH
2111: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2115: LD_EXP 15
2119: PPUSH
2120: LD_INT 175
2122: PPUSH
2123: CALL_OW 202
// end ;
2127: GO 2076
2129: POP
2130: POP
// for i in tmp [ 2 ] do
2131: LD_ADDR_VAR 0 1
2135: PUSH
2136: LD_VAR 0 2
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: FOR_IN
2146: IFFALSE 2198
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2148: LD_EXP 23
2152: PPUSH
2153: LD_VAR 0 1
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 1
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 174
// AddComHold ( Kurt ) ;
2175: LD_EXP 23
2179: PPUSH
2180: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2184: LD_EXP 23
2188: PPUSH
2189: LD_INT 175
2191: PPUSH
2192: CALL_OW 202
// end ;
2196: GO 2145
2198: POP
2199: POP
// wait ( 2 2$00 ) ;
2200: LD_INT 4200
2202: PPUSH
2203: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2207: LD_INT 35
2209: PPUSH
2210: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2214: LD_EXP 15
2218: PPUSH
2219: CALL_OW 314
2223: NOT
2224: PUSH
2225: LD_EXP 15
2229: PPUSH
2230: CALL_OW 301
2234: OR
2235: PUSH
2236: LD_EXP 23
2240: PPUSH
2241: CALL_OW 314
2245: NOT
2246: PUSH
2247: LD_EXP 23
2251: PPUSH
2252: CALL_OW 301
2256: OR
2257: AND
2258: IFFALSE 2207
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2260: LD_EXP 23
2264: PPUSH
2265: CALL_OW 301
2269: PUSH
2270: LD_EXP 15
2274: PPUSH
2275: CALL_OW 301
2279: AND
2280: IFFALSE 2292
// begin scoutFailed := true ;
2282: LD_ADDR_EXP 4
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// exit ;
2290: GO 2442
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2292: LD_EXP 23
2296: PUSH
2297: LD_EXP 15
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: LD_INT 132
2308: PPUSH
2309: LD_INT 52
2311: PPUSH
2312: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2316: LD_EXP 23
2320: PUSH
2321: LD_EXP 15
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PPUSH
2330: LD_INT 22
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PPUSH
2340: CALL_OW 69
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2353: LD_INT 35
2355: PPUSH
2356: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2360: LD_INT 2
2362: PPUSH
2363: LD_EXP 23
2367: PPUSH
2368: CALL_OW 292
2372: PUSH
2373: LD_INT 2
2375: PPUSH
2376: LD_EXP 15
2380: PPUSH
2381: CALL_OW 292
2385: OR
2386: IFFALSE 2353
// if IsLive ( Kurt ) then
2388: LD_EXP 23
2392: PPUSH
2393: CALL_OW 300
2397: IFFALSE 2411
// SetSide ( Kurt , 2 ) ;
2399: LD_EXP 23
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 235
// if IsLive ( Mike ) then
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 300
2420: IFFALSE 2434
// SetSide ( Mike , 2 ) ;
2422: LD_EXP 15
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 235
// scoutSuccess := true ;
2434: LD_ADDR_EXP 5
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// end ; end_of_file
2442: PPOPN 2
2444: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
// uc_side := 1 ;
2451: LD_ADDR_OWVAR 20
2455: PUSH
2456: LD_INT 1
2458: ST_TO_ADDR
// uc_nation := 1 ;
2459: LD_ADDR_OWVAR 21
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2467: LD_INT 1
2469: PPUSH
2470: CALL_OW 274
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 2500
2480: PUSH
2481: LD_INT 3200
2483: PUSH
2484: LD_INT 3500
2486: PUSH
2487: LD_INT 3900
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_OWVAR 67
2500: ARRAY
2501: PPUSH
2502: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2506: LD_INT 1
2508: PPUSH
2509: CALL_OW 274
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: LD_INT 800
2519: PPUSH
2520: CALL_OW 277
// usForces := [ ] ;
2524: LD_ADDR_EXP 29
2528: PUSH
2529: EMPTY
2530: ST_TO_ADDR
// usToBuild := [ ] ;
2531: LD_ADDR_EXP 31
2535: PUSH
2536: EMPTY
2537: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2538: LD_ADDR_EXP 32
2542: PUSH
2543: EMPTY
2544: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2545: LD_ADDR_VAR 0 2
2549: PUSH
2550: LD_INT 21
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: PUSH
2565: FOR_IN
2566: IFFALSE 2603
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: LD_INT 8
2581: PUSH
2582: LD_INT 8
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_OWVAR 67
2595: ARRAY
2596: PPUSH
2597: CALL_OW 241
2601: GO 2565
2603: POP
2604: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2605: LD_ADDR_VAR 0 2
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 32
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PPUSH
2620: CALL_OW 69
2624: PUSH
2625: FOR_IN
2626: IFFALSE 2716
// begin if GetBWeapon ( i ) = us_radar then
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL_OW 269
2637: PUSH
2638: LD_INT 11
2640: EQUAL
2641: IFFALSE 2666
// begin uc_nation := 0 ;
2643: LD_ADDR_OWVAR 21
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 16
2656: PPUSH
2657: LD_INT 2
2659: PPUSH
2660: CALL_OW 380
// end else
2664: GO 2700
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2666: LD_INT 0
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 5
2674: PUSH
2675: LD_INT 6
2677: PUSH
2678: LD_INT 7
2680: PUSH
2681: LD_INT 8
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: LD_OWVAR 67
2694: ARRAY
2695: PPUSH
2696: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2700: CALL_OW 44
2704: PPUSH
2705: LD_VAR 0 2
2709: PPUSH
2710: CALL_OW 52
// end ;
2714: GO 2625
2716: POP
2717: POP
// b := HexInfo ( 74 , 120 ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 74
2725: PPUSH
2726: LD_INT 120
2728: PPUSH
2729: CALL_OW 428
2733: ST_TO_ADDR
// uc_nation := 1 ;
2734: LD_ADDR_OWVAR 21
2738: PUSH
2739: LD_INT 1
2741: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: DOUBLE
2748: LD_INT 1
2750: DEC
2751: ST_TO_ADDR
2752: LD_INT 1
2754: PUSH
2755: LD_INT 2
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 4
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PUSH
2776: FOR_TO
2777: IFFALSE 2829
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2779: LD_INT 0
2781: PPUSH
2782: LD_INT 1
2784: PPUSH
2785: LD_INT 5
2787: PUSH
2788: LD_INT 6
2790: PUSH
2791: LD_INT 7
2793: PUSH
2794: LD_INT 8
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_OWVAR 67
2807: ARRAY
2808: PPUSH
2809: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2813: CALL_OW 44
2817: PPUSH
2818: LD_VAR 0 3
2822: PPUSH
2823: CALL_OW 52
// end ;
2827: GO 2776
2829: POP
2830: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 313
2840: PPUSH
2841: LD_INT 5
2843: PPUSH
2844: CALL_OW 336
// for i := 1 to 6 do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 6
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2912
// begin PrepareHuman ( false , 4 , 6 ) ;
2864: LD_INT 0
2866: PPUSH
2867: LD_INT 4
2869: PPUSH
2870: LD_INT 6
2872: PPUSH
2873: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2877: CALL_OW 44
2881: PPUSH
2882: LD_INT 32
2884: PUSH
2885: LD_INT 33
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_VAR 0 2
2896: PUSH
2897: LD_INT 2
2899: MOD
2900: PUSH
2901: LD_INT 1
2903: PLUS
2904: ARRAY
2905: PPUSH
2906: CALL_OW 52
// end ;
2910: GO 2861
2912: POP
2913: POP
// for i := 1 to 3 do
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: DOUBLE
2920: LD_INT 1
2922: DEC
2923: ST_TO_ADDR
2924: LD_INT 3
2926: PUSH
2927: FOR_TO
2928: IFFALSE 2957
// begin PrepareHuman ( false , 3 , 6 ) ;
2930: LD_INT 0
2932: PPUSH
2933: LD_INT 3
2935: PPUSH
2936: LD_INT 6
2938: PPUSH
2939: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2943: CALL_OW 44
2947: PPUSH
2948: LD_INT 25
2950: PPUSH
2951: CALL_OW 52
// end ;
2955: GO 2927
2957: POP
2958: POP
// for i := 1 to 3 do
2959: LD_ADDR_VAR 0 2
2963: PUSH
2964: DOUBLE
2965: LD_INT 1
2967: DEC
2968: ST_TO_ADDR
2969: LD_INT 3
2971: PUSH
2972: FOR_TO
2973: IFFALSE 3031
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2975: LD_INT 0
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 6
2983: PUSH
2984: LD_INT 7
2986: PUSH
2987: LD_INT 7
2989: PUSH
2990: LD_INT 7
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_OWVAR 67
3003: ARRAY
3004: PPUSH
3005: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3009: CALL_OW 44
3013: PPUSH
3014: LD_INT 78
3016: PPUSH
3017: LD_INT 130
3019: PPUSH
3020: CALL_OW 428
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: GO 2972
3031: POP
3032: POP
// for i := 1 to 3 do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_INT 3
3045: PUSH
3046: FOR_TO
3047: IFFALSE 3134
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: LD_INT 13
3060: PPUSH
3061: LD_INT 100
3063: PPUSH
3064: CALL 20272 0 5
// veh := CreateVehicle ;
3068: LD_ADDR_VAR 0 4
3072: PUSH
3073: CALL_OW 45
3077: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_INT 3
3085: PPUSH
3086: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 9
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3105: LD_INT 0
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 6
3113: PPUSH
3114: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3118: CALL_OW 44
3122: PPUSH
3123: LD_VAR 0 4
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3046
3134: POP
3135: POP
// InitHc ;
3136: CALL_OW 19
// hc_gallery := us ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING us
3147: ST_TO_ADDR
// hc_face_number := 26 ;
3148: LD_ADDR_OWVAR 34
3152: PUSH
3153: LD_INT 26
3155: ST_TO_ADDR
// hc_name := Doug Callahan ;
3156: LD_ADDR_OWVAR 26
3160: PUSH
3161: LD_STRING Doug Callahan
3163: ST_TO_ADDR
// hc_class := class_engineer ;
3164: LD_ADDR_OWVAR 28
3168: PUSH
3169: LD_INT 2
3171: ST_TO_ADDR
// hc_sex := sex_male ;
3172: LD_ADDR_OWVAR 27
3176: PUSH
3177: LD_INT 1
3179: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3180: LD_ADDR_OWVAR 29
3184: PUSH
3185: LD_INT 10
3187: PUSH
3188: LD_INT 11
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3195: LD_ADDR_OWVAR 30
3199: PUSH
3200: LD_INT 2
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 0
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3218: LD_ADDR_OWVAR 31
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 6
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: ST_TO_ADDR
// usCommander := CreateHuman ;
3241: LD_ADDR_EXP 28
3245: PUSH
3246: CALL_OW 44
3250: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3251: LD_EXP 28
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 52
// InitHC_All ( ) ;
3263: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3267: LD_INT 2
3269: PPUSH
3270: LD_INT 1
3272: PPUSH
3273: LD_INT 2
3275: PPUSH
3276: LD_INT 12
3278: PPUSH
3279: LD_INT 100
3281: PPUSH
3282: CALL 20272 0 5
// usCargo := CreateVehicle ;
3286: LD_ADDR_EXP 30
3290: PUSH
3291: CALL_OW 45
3295: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3296: LD_EXP 30
3300: PPUSH
3301: LD_INT 81
3303: PPUSH
3304: LD_INT 143
3306: PPUSH
3307: LD_INT 0
3309: PPUSH
3310: CALL_OW 48
// Connect ( usCargo ) ;
3314: LD_EXP 30
3318: PPUSH
3319: CALL 23363 0 1
// DoNotAttack ( 5 , usCargo ) ;
3323: LD_INT 5
3325: PPUSH
3326: LD_EXP 30
3330: PPUSH
3331: CALL_OW 471
// end ;
3335: LD_VAR 0 1
3339: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3340: LD_EXP 29
3344: NOT
3345: PUSH
3346: LD_EXP 6
3350: AND
3351: PUSH
3352: LD_INT 25
3354: PPUSH
3355: CALL_OW 302
3359: AND
3360: PUSH
3361: LD_INT 25
3363: PPUSH
3364: CALL_OW 461
3368: PUSH
3369: LD_INT 2
3371: EQUAL
3372: AND
3373: IFFALSE 3530
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 5
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: LD_INT 7
3402: PUSH
3403: LD_INT 8
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_OWVAR 67
3416: ARRAY
3417: PUSH
3418: FOR_TO
3419: IFFALSE 3528
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3421: LD_ADDR_VAR 0 2
3425: PUSH
3426: LD_INT 2
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: CALL_OW 12
3450: ARRAY
3451: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3452: LD_VAR 0 2
3456: PUSH
3457: LD_INT 4
3459: EQUAL
3460: IFFALSE 3472
// weapon := us_heavy_gun else
3462: LD_ADDR_VAR 0 3
3466: PUSH
3467: LD_INT 6
3469: ST_TO_ADDR
3470: GO 3503
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3472: LD_ADDR_VAR 0 3
3476: PUSH
3477: LD_INT 5
3479: PUSH
3480: LD_INT 7
3482: PUSH
3483: LD_INT 4
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: CALL_OW 12
3501: ARRAY
3502: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3503: LD_INT 25
3505: PPUSH
3506: LD_VAR 0 2
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 2
3516: PPUSH
3517: LD_VAR 0 3
3521: PPUSH
3522: CALL_OW 185
// end ;
3526: GO 3418
3528: POP
3529: POP
// end ;
3530: PPOPN 3
3532: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3533: LD_EXP 29
3537: PUSH
3538: LD_INT 5
3540: PUSH
3541: LD_INT 6
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: GREATEREQUAL
3562: IFFALSE 3673
3564: GO 3566
3566: DISABLE
3567: LD_INT 0
3569: PPUSH
3570: PPUSH
// begin enable ;
3571: ENABLE
// tmp := usForces ;
3572: LD_ADDR_VAR 0 2
3576: PUSH
3577: LD_EXP 29
3581: ST_TO_ADDR
// usForces := [ ] ;
3582: LD_ADDR_EXP 29
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// if not tmp then
3589: LD_VAR 0 2
3593: NOT
3594: IFFALSE 3598
// exit ;
3596: GO 3673
// repeat wait ( 0 0$1 ) ;
3598: LD_INT 35
3600: PPUSH
3601: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_VAR 0 2
3614: PPUSH
3615: LD_INT 98
3617: PUSH
3618: LD_INT 50
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 114
3627: PUSH
3628: LD_INT 50
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 127
3637: PUSH
3638: LD_INT 51
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 131
3647: PUSH
3648: LD_INT 35
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: PPUSH
3661: CALL 55310 0 2
3665: ST_TO_ADDR
// until not tmp ;
3666: LD_VAR 0 2
3670: NOT
3671: IFFALSE 3598
// end ;
3673: PPOPN 2
3675: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3676: LD_EXP 3
3680: PUSH
3681: LD_EXP 5
3685: NOT
3686: AND
3687: PUSH
3688: LD_INT 11
3690: PPUSH
3691: LD_INT 22
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PPUSH
3701: CALL_OW 70
3705: AND
3706: IFFALSE 3827
3708: GO 3710
3710: DISABLE
3711: LD_INT 0
3713: PPUSH
3714: PPUSH
3715: PPUSH
// begin uc_side := 1 ;
3716: LD_ADDR_OWVAR 20
3720: PUSH
3721: LD_INT 1
3723: ST_TO_ADDR
// uc_nation := 1 ;
3724: LD_ADDR_OWVAR 21
3728: PUSH
3729: LD_INT 1
3731: ST_TO_ADDR
// tmp := [ ] ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: EMPTY
3738: ST_TO_ADDR
// for i := 1 to 2 do
3739: LD_ADDR_VAR 0 1
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 2
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3825
// begin PrepareSoldier ( false , 7 ) ;
3755: LD_INT 0
3757: PPUSH
3758: LD_INT 7
3760: PPUSH
3761: CALL_OW 381
// un := CreateHuman ;
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: CALL_OW 44
3774: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3775: LD_VAR 0 2
3779: PPUSH
3780: LD_INT 130
3782: PPUSH
3783: LD_INT 153
3785: PPUSH
3786: LD_INT 3
3788: PPUSH
3789: LD_INT 0
3791: PPUSH
3792: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3796: LD_VAR 0 2
3800: PPUSH
3801: LD_INT 5
3803: PPUSH
3804: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3808: LD_VAR 0 2
3812: PPUSH
3813: LD_INT 108
3815: PPUSH
3816: LD_INT 108
3818: PPUSH
3819: CALL_OW 174
// end ;
3823: GO 3752
3825: POP
3826: POP
// end ;
3827: PPOPN 3
3829: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3830: LD_EXP 3
3834: PUSH
3835: LD_EXP 5
3839: NOT
3840: AND
3841: PUSH
3842: LD_INT 10
3844: PPUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 70
3859: AND
3860: IFFALSE 3981
3862: GO 3864
3864: DISABLE
3865: LD_INT 0
3867: PPUSH
3868: PPUSH
3869: PPUSH
// begin uc_side := 1 ;
3870: LD_ADDR_OWVAR 20
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// uc_nation := 1 ;
3878: LD_ADDR_OWVAR 21
3882: PUSH
3883: LD_INT 1
3885: ST_TO_ADDR
// tmp := [ ] ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: EMPTY
3892: ST_TO_ADDR
// for i := 1 to 2 do
3893: LD_ADDR_VAR 0 1
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_INT 2
3905: PUSH
3906: FOR_TO
3907: IFFALSE 3979
// begin PrepareSoldier ( false , 7 ) ;
3909: LD_INT 0
3911: PPUSH
3912: LD_INT 7
3914: PPUSH
3915: CALL_OW 381
// un := CreateHuman ;
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: CALL_OW 44
3928: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3929: LD_VAR 0 2
3933: PPUSH
3934: LD_INT 56
3936: PPUSH
3937: LD_INT 101
3939: PPUSH
3940: LD_INT 3
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3950: LD_VAR 0 2
3954: PPUSH
3955: LD_INT 5
3957: PPUSH
3958: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_INT 72
3969: PPUSH
3970: LD_INT 92
3972: PPUSH
3973: CALL_OW 174
// end ;
3977: GO 3906
3979: POP
3980: POP
// end ;
3981: PPOPN 3
3983: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3984: LD_EXP 30
3988: PPUSH
3989: CALL_OW 302
3993: PUSH
3994: LD_EXP 7
3998: NOT
3999: AND
4000: IFFALSE 4263
4002: GO 4004
4004: DISABLE
4005: LD_INT 0
4007: PPUSH
4008: PPUSH
// begin enable ;
4009: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: LD_INT 14
4017: PPUSH
4018: LD_INT 81
4020: PUSH
4021: LD_INT 1
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 50
4030: PUSH
4031: EMPTY
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4043: LD_ADDR_VAR 0 1
4047: PUSH
4048: LD_INT 12
4050: PPUSH
4051: CALL_OW 435
4055: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4056: LD_EXP 30
4060: PPUSH
4061: CALL_OW 261
4065: PUSH
4066: LD_INT 10
4068: LESS
4069: PUSH
4070: LD_INT 2
4072: PPUSH
4073: LD_EXP 30
4077: PPUSH
4078: CALL_OW 292
4082: NOT
4083: AND
4084: IFFALSE 4098
// SetFuel ( usCargo , 100 ) ;
4086: LD_EXP 30
4090: PPUSH
4091: LD_INT 100
4093: PPUSH
4094: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4098: LD_EXP 30
4102: PPUSH
4103: CALL_OW 314
4107: NOT
4108: PUSH
4109: LD_EXP 30
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 289
4121: PUSH
4122: LD_INT 100
4124: LESS
4125: AND
4126: PUSH
4127: LD_VAR 0 2
4131: NOT
4132: AND
4133: IFFALSE 4199
// begin if cr then
4135: LD_VAR 0 1
4139: IFFALSE 4170
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4141: LD_EXP 30
4145: PPUSH
4146: LD_VAR 0 1
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_VAR 0 1
4159: PUSH
4160: LD_INT 2
4162: ARRAY
4163: PPUSH
4164: CALL_OW 117
4168: GO 4197
// if not IsInArea ( usCargo , usCratesArea ) then
4170: LD_EXP 30
4174: PPUSH
4175: LD_INT 12
4177: PPUSH
4178: CALL_OW 308
4182: NOT
4183: IFFALSE 4197
// ComMoveToArea ( usCargo , usCratesArea ) ;
4185: LD_EXP 30
4189: PPUSH
4190: LD_INT 12
4192: PPUSH
4193: CALL_OW 113
// exit ;
4197: GO 4263
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4199: LD_VAR 0 2
4203: PUSH
4204: LD_EXP 30
4208: PPUSH
4209: LD_INT 14
4211: PPUSH
4212: CALL_OW 308
4216: NOT
4217: AND
4218: IFFALSE 4237
// ComMoveXY ( usCargo , 80 , 143 ) else
4220: LD_EXP 30
4224: PPUSH
4225: LD_INT 80
4227: PPUSH
4228: LD_INT 143
4230: PPUSH
4231: CALL_OW 111
4235: GO 4263
// if GetCargo ( usCargo , mat_cans ) then
4237: LD_EXP 30
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: CALL_OW 289
4249: IFFALSE 4263
// ComGive ( usCargo , usDepot ) ;
4251: LD_EXP 30
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 161
// end ;
4263: PPOPN 2
4265: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4266: LD_EXP 7
4270: NOT
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 21
4284: PUSH
4285: LD_INT 1
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: LD_INT 3
4294: PUSH
4295: LD_INT 50
4297: PUSH
4298: EMPTY
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: AND
4315: PUSH
4316: LD_INT 22
4318: PUSH
4319: LD_INT 1
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 3
4328: PUSH
4329: LD_INT 60
4331: PUSH
4332: EMPTY
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: LD_INT 25
4341: PUSH
4342: LD_INT 4
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: AND
4359: IFFALSE 4562
4361: GO 4363
4363: DISABLE
4364: LD_INT 0
4366: PPUSH
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_INT 22
4376: PUSH
4377: LD_INT 1
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 21
4386: PUSH
4387: LD_INT 1
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: LD_INT 50
4399: PUSH
4400: EMPTY
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: PPUSH
4412: CALL_OW 69
4416: PUSH
4417: FOR_IN
4418: IFFALSE 4560
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_INT 22
4427: PUSH
4428: LD_INT 1
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 3
4437: PUSH
4438: LD_INT 60
4440: PUSH
4441: EMPTY
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 25
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 69
4467: ST_TO_ADDR
// if not sci then
4468: LD_VAR 0 2
4472: NOT
4473: IFFALSE 4477
// break ;
4475: GO 4560
// sci := sci [ 1 ] ;
4477: LD_ADDR_VAR 0 2
4481: PUSH
4482: LD_VAR 0 2
4486: PUSH
4487: LD_INT 1
4489: ARRAY
4490: ST_TO_ADDR
// if IsInUnit ( sci ) then
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 310
4500: IFFALSE 4513
// ComExit ( sci ) else
4502: LD_VAR 0 2
4506: PPUSH
4507: CALL 53104 0 1
4511: GO 4558
// begin ComHeal ( sci , i ) ;
4513: LD_VAR 0 2
4517: PPUSH
4518: LD_VAR 0 1
4522: PPUSH
4523: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_INT 32
4534: PUSH
4535: LD_INT 33
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 2
4547: PPUSH
4548: CALL_OW 12
4552: ARRAY
4553: PPUSH
4554: CALL_OW 180
// end ; end ;
4558: GO 4417
4560: POP
4561: POP
// end ;
4562: PPOPN 2
4564: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4565: LD_EXP 7
4569: NOT
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 60
4586: PUSH
4587: EMPTY
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 50
4596: PUSH
4597: EMPTY
4598: LIST
4599: PUSH
4600: LD_INT 34
4602: PUSH
4603: LD_INT 13
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: PPUSH
4616: CALL_OW 69
4620: AND
4621: PUSH
4622: LD_INT 22
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 24
4637: PUSH
4638: LD_INT 1000
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 21
4651: PUSH
4652: LD_INT 3
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 29
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: AND
4687: IFFALSE 4956
4689: GO 4691
4691: DISABLE
4692: LD_INT 0
4694: PPUSH
4695: PPUSH
4696: PPUSH
// begin enable ;
4697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4698: LD_ADDR_VAR 0 2
4702: PUSH
4703: LD_INT 22
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: LD_INT 24
4718: PUSH
4719: LD_INT 1000
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 21
4732: PUSH
4733: LD_INT 3
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 30
4745: PUSH
4746: LD_INT 29
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4768: LD_ADDR_VAR 0 3
4772: PUSH
4773: LD_INT 22
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 24
4788: PUSH
4789: LD_INT 600
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 21
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 30
4815: PUSH
4816: LD_INT 29
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 69
4837: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4838: LD_ADDR_VAR 0 1
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: LD_INT 60
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 50
4868: PUSH
4869: EMPTY
4870: LIST
4871: PUSH
4872: LD_INT 34
4874: PUSH
4875: LD_INT 13
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: CALL_OW 69
4892: PUSH
4893: FOR_IN
4894: IFFALSE 4954
// begin if tmp2 then
4896: LD_VAR 0 3
4900: IFFALSE 4928
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4902: LD_VAR 0 1
4906: PPUSH
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 74
4921: PPUSH
4922: CALL_OW 130
4926: GO 4952
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4928: LD_VAR 0 1
4932: PPUSH
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_VAR 0 1
4942: PPUSH
4943: CALL_OW 74
4947: PPUSH
4948: CALL_OW 130
// end ;
4952: GO 4893
4954: POP
4955: POP
// end ;
4956: PPOPN 3
4958: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4959: LD_EXP 7
4963: NOT
4964: PUSH
4965: LD_INT 14
4967: PPUSH
4968: LD_INT 81
4970: PUSH
4971: LD_INT 1
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 50
4980: PUSH
4981: EMPTY
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 70
4992: NOT
4993: AND
4994: PUSH
4995: LD_EXP 31
4999: AND
5000: PUSH
5001: LD_INT 22
5003: PUSH
5004: LD_INT 1
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 3
5013: PUSH
5014: LD_INT 60
5016: PUSH
5017: EMPTY
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 34
5032: PUSH
5033: LD_INT 13
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: AND
5051: IFFALSE 5163
5053: GO 5055
5055: DISABLE
// begin enable ;
5056: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5057: LD_INT 22
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 3
5069: PUSH
5070: LD_INT 60
5072: PUSH
5073: EMPTY
5074: LIST
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 50
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 34
5088: PUSH
5089: LD_INT 13
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 69
5106: PPUSH
5107: LD_EXP 31
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: LD_EXP 31
5124: PUSH
5125: LD_INT 1
5127: ARRAY
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: LD_EXP 31
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: PUSH
5142: LD_INT 3
5144: ARRAY
5145: PPUSH
5146: LD_EXP 31
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PUSH
5155: LD_INT 4
5157: ARRAY
5158: PPUSH
5159: CALL_OW 566
// end ;
5163: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5164: LD_INT 22
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 50
5176: PUSH
5177: EMPTY
5178: LIST
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: LD_INT 54
5185: PUSH
5186: EMPTY
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: LD_INT 25
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 25
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 16
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: IFFALSE 5604
5244: GO 5246
5246: DISABLE
5247: LD_INT 0
5249: PPUSH
5250: PPUSH
5251: PPUSH
5252: PPUSH
// begin enable ;
5253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5254: LD_ADDR_VAR 0 2
5258: PUSH
5259: LD_INT 22
5261: PUSH
5262: LD_INT 1
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 50
5271: PUSH
5272: EMPTY
5273: LIST
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: LD_INT 54
5280: PUSH
5281: EMPTY
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: LD_INT 25
5293: PUSH
5294: LD_INT 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 25
5303: PUSH
5304: LD_INT 5
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 25
5313: PUSH
5314: LD_INT 16
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5338: LD_ADDR_VAR 0 3
5342: PUSH
5343: LD_INT 22
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: LD_INT 50
5355: PUSH
5356: EMPTY
5357: LIST
5358: PUSH
5359: LD_INT 21
5361: PUSH
5362: LD_INT 3
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 30
5371: PUSH
5372: LD_INT 32
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: LD_INT 58
5381: PUSH
5382: EMPTY
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 69
5396: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5397: LD_ADDR_VAR 0 4
5401: PUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 50
5414: PUSH
5415: EMPTY
5416: LIST
5417: PUSH
5418: LD_INT 30
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: ST_TO_ADDR
// if not tmp then
5438: LD_VAR 0 2
5442: NOT
5443: IFFALSE 5447
// exit ;
5445: GO 5604
// for i in tmp do
5447: LD_ADDR_VAR 0 1
5451: PUSH
5452: LD_VAR 0 2
5456: PUSH
5457: FOR_IN
5458: IFFALSE 5602
// begin btmp := FilterByTag ( btmp , 0 ) ;
5460: LD_ADDR_VAR 0 3
5464: PUSH
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 0
5472: PPUSH
5473: CALL 50280 0 2
5477: ST_TO_ADDR
// if not btmp then
5478: LD_VAR 0 3
5482: NOT
5483: IFFALSE 5528
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5485: LD_VAR 0 1
5489: PPUSH
5490: CALL_OW 257
5494: PUSH
5495: LD_INT 16
5497: NONEQUAL
5498: PUSH
5499: LD_VAR 0 4
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 4
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
// continue ;
5524: GO 5457
// end else
5526: GO 5600
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_VAR 0 3
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 120
// wait ( 0 0$9 ) ;
5562: LD_INT 315
5564: PPUSH
5565: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL 17413 0 1
5582: IFFALSE 5600
// SetTag ( btmp [ 1 ] , 0 ) ;
5584: LD_VAR 0 3
5588: PUSH
5589: LD_INT 1
5591: ARRAY
5592: PPUSH
5593: LD_INT 0
5595: PPUSH
5596: CALL_OW 109
// end ; end ;
5600: GO 5457
5602: POP
5603: POP
// end ;
5604: PPOPN 4
5606: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5607: LD_INT 22
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: LD_INT 33
5619: PUSH
5620: LD_INT 2
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 50
5629: PUSH
5630: EMPTY
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 61
5638: PUSH
5639: EMPTY
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: PPUSH
5652: CALL_OW 69
5656: IFFALSE 5747
5658: GO 5660
5660: DISABLE
5661: LD_INT 0
5663: PPUSH
5664: PPUSH
// begin enable ;
5665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5666: LD_ADDR_VAR 0 2
5670: PUSH
5671: LD_INT 22
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 33
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 50
5693: PUSH
5694: EMPTY
5695: LIST
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: LD_INT 61
5702: PUSH
5703: EMPTY
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: ST_TO_ADDR
// for i in tmp do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_VAR 0 2
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5745
// Connect ( i ) ;
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL 23363 0 1
5743: GO 5731
5745: POP
5746: POP
// end ;
5747: PPOPN 2
5749: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5750: LD_EXP 6
5754: PUSH
5755: LD_OWVAR 67
5759: PUSH
5760: LD_INT 1
5762: GREATER
5763: AND
5764: IFFALSE 6206
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5776: LD_INT 21000
5778: PUSH
5779: LD_INT 18900
5781: PUSH
5782: LD_INT 16800
5784: PUSH
5785: LD_INT 14700
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 67
// if usSurrender then
5804: LD_EXP 7
5808: IFFALSE 5812
// exit ;
5810: GO 6206
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5812: LD_ADDR_VAR 0 1
5816: PUSH
5817: DOUBLE
5818: LD_INT 1
5820: DEC
5821: ST_TO_ADDR
5822: LD_INT 4
5824: PUSH
5825: LD_INT 5
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_OWVAR 67
5844: ARRAY
5845: PUSH
5846: FOR_TO
5847: IFFALSE 6151
// begin uc_side := 1 ;
5849: LD_ADDR_OWVAR 20
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// uc_nation := 1 ;
5857: LD_ADDR_OWVAR 21
5861: PUSH
5862: LD_INT 1
5864: ST_TO_ADDR
// InitHc_All ( ) ;
5865: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5869: LD_INT 0
5871: PPUSH
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 5
5877: PUSH
5878: LD_INT 6
5880: PUSH
5881: LD_INT 7
5883: PUSH
5884: LD_INT 8
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PUSH
5893: LD_OWVAR 67
5897: ARRAY
5898: PPUSH
5899: CALL_OW 380
// un := CreateHuman ;
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: CALL_OW 44
5912: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5913: LD_ADDR_VAR 0 4
5917: PUSH
5918: LD_INT 2
5920: PUSH
5921: LD_INT 3
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_VAR 0 1
5936: PUSH
5937: LD_INT 3
5939: MOD
5940: PUSH
5941: LD_INT 1
5943: PLUS
5944: ARRAY
5945: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5946: LD_VAR 0 4
5950: PUSH
5951: LD_INT 4
5953: EQUAL
5954: IFFALSE 5989
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 6
5963: PUSH
5964: LD_INT 4
5966: PUSH
5967: LD_INT 5
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 3
5980: PPUSH
5981: CALL_OW 12
5985: ARRAY
5986: ST_TO_ADDR
5987: GO 6024
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
5989: LD_ADDR_VAR 0 5
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: LD_INT 5
5999: PUSH
6000: LD_INT 7
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: PUSH
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 4
6017: PPUSH
6018: CALL_OW 12
6022: ARRAY
6023: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6024: LD_VAR 0 4
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_VAR 0 5
6039: PPUSH
6040: LD_INT 30
6042: PPUSH
6043: CALL 20272 0 5
// veh := CreateVehicle ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: CALL_OW 45
6056: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6057: LD_ADDR_EXP 32
6061: PUSH
6062: LD_EXP 32
6066: PPUSH
6067: LD_EXP 32
6071: PUSH
6072: LD_INT 1
6074: PLUS
6075: PPUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: CALL_OW 1
6085: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6086: LD_VAR 0 3
6090: PPUSH
6091: LD_INT 4
6093: PPUSH
6094: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6098: LD_VAR 0 3
6102: PPUSH
6103: LD_INT 15
6105: PPUSH
6106: LD_INT 0
6108: PPUSH
6109: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_VAR 0 3
6122: PPUSH
6123: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6127: LD_VAR 0 3
6131: PPUSH
6132: LD_INT 153
6134: PPUSH
6135: LD_INT 45
6137: PPUSH
6138: CALL_OW 111
// wait ( 0 0$2 ) ;
6142: LD_INT 70
6144: PPUSH
6145: CALL_OW 67
// end ;
6149: GO 5846
6151: POP
6152: POP
// repeat wait ( 0 0$1 ) ;
6153: LD_INT 35
6155: PPUSH
6156: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6160: LD_ADDR_EXP 32
6164: PUSH
6165: LD_EXP 32
6169: PPUSH
6170: LD_INT 150
6172: PUSH
6173: LD_INT 36
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 138
6182: PUSH
6183: LD_INT 25
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PPUSH
6194: CALL 55310 0 2
6198: ST_TO_ADDR
// until not usAdditionalForces ;
6199: LD_EXP 32
6203: NOT
6204: IFFALSE 6153
// end ;
6206: PPOPN 5
6208: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6209: LD_INT 22
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 101
6221: PUSH
6222: LD_INT 2
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 69
6237: IFFALSE 6250
6239: GO 6241
6241: DISABLE
// usAttacksAllowed := true ; end_of_file
6242: LD_ADDR_EXP 6
6246: PUSH
6247: LD_INT 1
6249: ST_TO_ADDR
6250: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6251: LD_VAR 0 1
6255: PPUSH
6256: CALL 56822 0 1
// if un = Heike then
6260: LD_VAR 0 1
6264: PUSH
6265: LD_EXP 13
6269: EQUAL
6270: IFFALSE 6279
// YouLost ( Heike ) ;
6272: LD_STRING Heike
6274: PPUSH
6275: CALL_OW 104
// if un = usCommander then
6279: LD_VAR 0 1
6283: PUSH
6284: LD_EXP 28
6288: EQUAL
6289: IFFALSE 6298
// YouLost ( Commander ) ;
6291: LD_STRING Commander
6293: PPUSH
6294: CALL_OW 104
// if GetSide ( un ) = 1 then
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: IFFALSE 6562
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6313: LD_VAR 0 1
6317: PPUSH
6318: CALL_OW 264
6322: PUSH
6323: LD_INT 13
6325: EQUAL
6326: PUSH
6327: LD_INT 25
6329: PPUSH
6330: CALL_OW 302
6334: AND
6335: IFFALSE 6356
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6337: LD_INT 25
6339: PPUSH
6340: LD_INT 2
6342: PPUSH
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 2
6348: PPUSH
6349: LD_INT 13
6351: PPUSH
6352: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6356: LD_VAR 0 1
6360: PPUSH
6361: CALL_OW 264
6365: PUSH
6366: LD_INT 12
6368: EQUAL
6369: PUSH
6370: LD_INT 25
6372: PPUSH
6373: CALL_OW 302
6377: AND
6378: IFFALSE 6399
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6380: LD_INT 25
6382: PPUSH
6383: LD_INT 2
6385: PPUSH
6386: LD_INT 1
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: LD_INT 12
6394: PPUSH
6395: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6399: LD_VAR 0 1
6403: PPUSH
6404: CALL_OW 266
6408: PUSH
6409: LD_INT 32
6411: EQUAL
6412: IFFALSE 6477
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6414: LD_ADDR_EXP 31
6418: PUSH
6419: LD_EXP 31
6423: PPUSH
6424: LD_EXP 31
6428: PUSH
6429: LD_INT 1
6431: PLUS
6432: PPUSH
6433: LD_INT 32
6435: PUSH
6436: LD_VAR 0 1
6440: PPUSH
6441: CALL_OW 250
6445: PUSH
6446: LD_VAR 0 1
6450: PPUSH
6451: CALL_OW 251
6455: PUSH
6456: LD_VAR 0 1
6460: PPUSH
6461: CALL_OW 254
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6477: LD_VAR 0 1
6481: PPUSH
6482: CALL_OW 266
6486: PUSH
6487: LD_INT 5
6489: PUSH
6490: LD_INT 4
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: IN
6497: IFFALSE 6562
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6499: LD_ADDR_EXP 31
6503: PUSH
6504: LD_EXP 31
6508: PPUSH
6509: LD_EXP 31
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_INT 4
6520: PUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: CALL_OW 250
6530: PUSH
6531: LD_VAR 0 1
6535: PPUSH
6536: CALL_OW 251
6540: PUSH
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 254
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: PPUSH
6557: CALL_OW 1
6561: ST_TO_ADDR
// end ; end ;
6562: PPOPN 1
6564: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 255
6574: PUSH
6575: LD_INT 1
6577: EQUAL
6578: PUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: CALL_OW 110
6588: PUSH
6589: LD_INT 1
6591: EQUAL
6592: AND
6593: IFFALSE 6607
// SetTag ( un , 0 ) ;
6595: LD_VAR 0 1
6599: PPUSH
6600: LD_INT 0
6602: PPUSH
6603: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6607: LD_VAR 0 1
6611: PPUSH
6612: CALL_OW 255
6616: PUSH
6617: LD_INT 1
6619: EQUAL
6620: PUSH
6621: LD_VAR 0 1
6625: PPUSH
6626: CALL_OW 264
6630: PUSH
6631: LD_INT 6
6633: EQUAL
6634: AND
6635: PUSH
6636: LD_EXP 11
6640: NOT
6641: AND
6642: IFFALSE 6652
// seeHeavyGun := true ;
6644: LD_ADDR_EXP 11
6648: PUSH
6649: LD_INT 1
6651: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL_OW 263
6661: PUSH
6662: LD_INT 2
6664: EQUAL
6665: PUSH
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 255
6675: PUSH
6676: LD_INT 2
6678: NONEQUAL
6679: AND
6680: IFFALSE 6706
// begin ComUnlink ( un ) ;
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 136
// if not seeRemoteVehicle then
6691: LD_EXP 10
6695: NOT
6696: IFFALSE 6706
// seeRemoteVehicle := true ;
6698: LD_ADDR_EXP 10
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// end ; end ;
6706: PPOPN 1
6708: END
// on BuildingComplete ( b ) do var i , barracks ;
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
// begin if GetSide ( b ) = 1 then
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 255
6722: PUSH
6723: LD_INT 1
6725: EQUAL
6726: IFFALSE 6878
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6728: LD_ADDR_EXP 31
6732: PUSH
6733: LD_EXP 31
6737: PPUSH
6738: LD_INT 1
6740: PPUSH
6741: CALL_OW 3
6745: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6746: LD_VAR 0 1
6750: PPUSH
6751: CALL_OW 266
6755: PUSH
6756: LD_INT 4
6758: EQUAL
6759: IFFALSE 6770
// ComUpgrade ( b ) ;
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6770: LD_VAR 0 1
6774: PPUSH
6775: CALL_OW 266
6779: PUSH
6780: LD_INT 32
6782: EQUAL
6783: IFFALSE 6878
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_INT 6
6792: PUSH
6793: LD_INT 7
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_INT 2
6805: PPUSH
6806: CALL_OW 12
6810: ARRAY
6811: PPUSH
6812: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 1
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 30
6833: PUSH
6834: LD_INT 5
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: ST_TO_ADDR
// if barracks then
6850: LD_VAR 0 3
6854: IFFALSE 6878
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6856: LD_VAR 0 3
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: CALL_OW 313
6869: PUSH
6870: LD_INT 1
6872: ARRAY
6873: PPUSH
6874: CALL_OW 122
// end ; end ; end ;
6878: PPOPN 3
6880: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL 56942 0 2
// if GetSide ( factory ) = 1 then
6895: LD_VAR 0 2
6899: PPUSH
6900: CALL_OW 255
6904: PUSH
6905: LD_INT 1
6907: EQUAL
6908: IFFALSE 6987
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6910: LD_VAR 0 1
6914: PPUSH
6915: CALL_OW 264
6919: PUSH
6920: LD_INT 12
6922: EQUAL
6923: IFFALSE 6935
// usCargo := vehicle ;
6925: LD_ADDR_EXP 30
6929: PUSH
6930: LD_VAR 0 1
6934: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 264
6944: PUSH
6945: LD_INT 12
6947: PUSH
6948: LD_INT 13
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: IN
6955: NOT
6956: IFFALSE 6987
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6958: LD_ADDR_EXP 29
6962: PUSH
6963: LD_EXP 29
6967: PPUSH
6968: LD_EXP 29
6972: PUSH
6973: LD_INT 1
6975: PLUS
6976: PPUSH
6977: LD_VAR 0 1
6981: PPUSH
6982: CALL_OW 1
6986: ST_TO_ADDR
// end ; end ;
6987: PPOPN 2
6989: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
6990: LD_VAR 0 2
6994: PPUSH
6995: CALL_OW 255
6999: PUSH
7000: LD_INT 1
7002: EQUAL
7003: IFFALSE 7017
// AddComEnterUnit ( un , amFac ) ;
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_INT 25
7012: PPUSH
7013: CALL_OW 180
// end ;
7017: PPOPN 4
7019: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 255
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: PUSH
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 266
7043: PUSH
7044: LD_INT 32
7046: EQUAL
7047: AND
7048: PUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 257
7058: PUSH
7059: LD_INT 1
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: IN
7069: AND
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 1
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 30
7083: PUSH
7084: LD_INT 5
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 50
7093: PUSH
7094: EMPTY
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: PPUSH
7102: CALL_OW 69
7106: AND
7107: IFFALSE 7177
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7109: LD_INT 74
7111: PPUSH
7112: LD_INT 120
7114: PPUSH
7115: CALL_OW 428
7119: PPUSH
7120: CALL_OW 313
7124: PUSH
7125: LD_INT 6
7127: LESS
7128: IFFALSE 7177
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7130: LD_VAR 0 2
7134: PPUSH
7135: LD_INT 74
7137: PPUSH
7138: LD_INT 120
7140: PPUSH
7141: CALL_OW 428
7145: PPUSH
7146: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7150: LD_VAR 0 2
7154: PPUSH
7155: CALL_OW 257
7159: PUSH
7160: LD_INT 1
7162: EQUAL
7163: IFFALSE 7177
// AddComChangeProfession ( un , class_sniper ) ;
7165: LD_VAR 0 2
7169: PPUSH
7170: LD_INT 5
7172: PPUSH
7173: CALL_OW 183
// end ; end ; end_of_file
7177: PPOPN 2
7179: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7180: LD_INT 0
7182: PPUSH
7183: PPUSH
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
7190: PPUSH
// Video ( true ) ;
7191: LD_INT 1
7193: PPUSH
7194: CALL 52678 0 1
// music_nat := 1 ;
7198: LD_ADDR_OWVAR 71
7202: PUSH
7203: LD_INT 1
7205: ST_TO_ADDR
// music_class := music_recon ;
7206: LD_ADDR_OWVAR 72
7210: PUSH
7211: LD_INT 3
7213: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7214: LD_INT 184
7216: PPUSH
7217: LD_INT 142
7219: PPUSH
7220: LD_INT 2
7222: PPUSH
7223: LD_INT 10
7225: NEG
7226: PPUSH
7227: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7231: LD_INT 184
7233: PPUSH
7234: LD_INT 142
7236: PPUSH
7237: LD_INT 2
7239: PPUSH
7240: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7244: LD_INT 204
7246: PPUSH
7247: LD_INT 151
7249: PPUSH
7250: LD_INT 2
7252: PPUSH
7253: LD_INT 10
7255: NEG
7256: PPUSH
7257: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7261: LD_INT 204
7263: PPUSH
7264: LD_INT 151
7266: PPUSH
7267: LD_INT 2
7269: PPUSH
7270: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7274: LD_INT 184
7276: PPUSH
7277: LD_INT 142
7279: PPUSH
7280: CALL_OW 86
// wait ( 0 0$2 ) ;
7284: LD_INT 70
7286: PPUSH
7287: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_EXP 13
7300: PUSH
7301: LD_EXP 14
7305: PUSH
7306: LD_EXP 15
7310: PUSH
7311: LD_EXP 16
7315: PUSH
7316: LD_EXP 17
7320: PUSH
7321: LD_EXP 18
7325: PUSH
7326: LD_EXP 19
7330: PUSH
7331: LD_EXP 20
7335: PUSH
7336: LD_EXP 22
7340: PUSH
7341: LD_EXP 23
7345: PUSH
7346: LD_EXP 24
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_EXP 25
7368: UNION
7369: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7370: LD_ADDR_VAR 0 6
7374: PUSH
7375: LD_VAR 0 5
7379: PPUSH
7380: LD_INT 25
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 72
7394: PUSH
7395: LD_INT 0
7397: GREATER
7398: ST_TO_ADDR
// hasCamera := false ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_INT 0
7406: ST_TO_ADDR
// if not hasEng then
7407: LD_VAR 0 6
7411: NOT
7412: IFFALSE 7440
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7414: LD_VAR 0 5
7418: PUSH
7419: LD_INT 1
7421: PPUSH
7422: LD_VAR 0 5
7426: PPUSH
7427: CALL_OW 12
7431: ARRAY
7432: PPUSH
7433: LD_INT 2
7435: PPUSH
7436: CALL_OW 336
// if heikeVehicles then
7440: LD_EXP 27
7444: IFFALSE 8068
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7446: LD_ADDR_VAR 0 5
7450: PUSH
7451: LD_VAR 0 5
7455: PPUSH
7456: LD_INT 3
7458: PPUSH
7459: CALL 54932 0 2
7463: ST_TO_ADDR
// for i in heikeVehicles do
7464: LD_ADDR_VAR 0 2
7468: PUSH
7469: LD_EXP 27
7473: PUSH
7474: FOR_IN
7475: IFFALSE 8066
// begin if not tmp then
7477: LD_VAR 0 5
7481: NOT
7482: IFFALSE 7486
// break ;
7484: GO 8066
// uc_side := 2 ;
7486: LD_ADDR_OWVAR 20
7490: PUSH
7491: LD_INT 2
7493: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7494: LD_ADDR_OWVAR 21
7498: PUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 5
7506: ARRAY
7507: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7508: LD_ADDR_OWVAR 37
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7522: LD_ADDR_OWVAR 39
7526: PUSH
7527: LD_VAR 0 2
7531: PUSH
7532: LD_INT 2
7534: ARRAY
7535: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7536: LD_ADDR_OWVAR 38
7540: PUSH
7541: LD_VAR 0 2
7545: PUSH
7546: LD_INT 3
7548: ARRAY
7549: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7550: LD_ADDR_OWVAR 40
7554: PUSH
7555: LD_VAR 0 2
7559: PUSH
7560: LD_INT 4
7562: ARRAY
7563: ST_TO_ADDR
// veh := CreateVehicle ;
7564: LD_ADDR_VAR 0 4
7568: PUSH
7569: CALL_OW 45
7573: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7574: LD_VAR 0 4
7578: PPUSH
7579: LD_INT 4
7581: PPUSH
7582: CALL_OW 233
// if i [ 3 ] = control_manual then
7586: LD_VAR 0 2
7590: PUSH
7591: LD_INT 3
7593: ARRAY
7594: PUSH
7595: LD_INT 1
7597: EQUAL
7598: IFFALSE 7683
// begin PlaceUnitArea ( veh , startArea , false ) ;
7600: LD_VAR 0 4
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_INT 0
7610: PPUSH
7611: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7615: LD_VAR 0 2
7619: PUSH
7620: LD_INT 4
7622: ARRAY
7623: PUSH
7624: LD_INT 31
7626: EQUAL
7627: IFFALSE 7645
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7629: LD_VAR 0 5
7633: PUSH
7634: LD_INT 1
7636: ARRAY
7637: PPUSH
7638: LD_INT 3
7640: PPUSH
7641: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7645: LD_VAR 0 5
7649: PUSH
7650: LD_INT 1
7652: ARRAY
7653: PPUSH
7654: LD_VAR 0 4
7658: PPUSH
7659: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7663: LD_ADDR_VAR 0 5
7667: PUSH
7668: LD_VAR 0 5
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: CALL_OW 3
7680: ST_TO_ADDR
// end else
7681: GO 7744
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7683: LD_INT 22
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 34
7695: PUSH
7696: LD_INT 31
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: IFFALSE 7744
// begin PlaceUnitArea ( veh , startArea , false ) ;
7713: LD_VAR 0 4
7717: PPUSH
7718: LD_INT 1
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 49
// Connect ( veh ) ;
7728: LD_VAR 0 4
7732: PPUSH
7733: CALL 23363 0 1
// wait ( 0 0$2 ) ;
7737: LD_INT 70
7739: PPUSH
7740: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7744: LD_VAR 0 4
7748: PPUSH
7749: LD_VAR 0 2
7753: PUSH
7754: LD_INT 6
7756: ARRAY
7757: PPUSH
7758: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7762: LD_VAR 0 4
7766: PPUSH
7767: LD_INT 20
7769: PPUSH
7770: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7774: LD_VAR 0 2
7778: PUSH
7779: LD_INT 7
7781: ARRAY
7782: PUSH
7783: LD_VAR 0 4
7787: PPUSH
7788: CALL_OW 264
7792: PUSH
7793: LD_INT 51
7795: PUSH
7796: LD_INT 32
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: IN
7803: AND
7804: IFFALSE 7855
// begin for j := 1 to 2 do
7806: LD_ADDR_VAR 0 3
7810: PUSH
7811: DOUBLE
7812: LD_INT 1
7814: DEC
7815: ST_TO_ADDR
7816: LD_INT 2
7818: PUSH
7819: FOR_TO
7820: IFFALSE 7853
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7822: LD_VAR 0 4
7826: PPUSH
7827: LD_VAR 0 3
7831: PPUSH
7832: LD_VAR 0 2
7836: PUSH
7837: LD_INT 7
7839: ARRAY
7840: PUSH
7841: LD_VAR 0 3
7845: ARRAY
7846: PPUSH
7847: CALL_OW 291
7851: GO 7819
7853: POP
7854: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 185
7862: PPUSH
7863: LD_INT 144
7865: PPUSH
7866: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7870: LD_VAR 0 4
7874: PPUSH
7875: CALL_OW 263
7879: PUSH
7880: LD_INT 1
7882: EQUAL
7883: PUSH
7884: LD_VAR 0 7
7888: NOT
7889: AND
7890: PUSH
7891: LD_VAR 0 4
7895: PPUSH
7896: CALL_OW 311
7900: PPUSH
7901: CALL_OW 257
7905: PUSH
7906: LD_INT 2
7908: EQUAL
7909: AND
7910: IFFALSE 8015
// begin hasCamera := true ;
7912: LD_ADDR_VAR 0 7
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7920: LD_ADDR_VAR 0 8
7924: PUSH
7925: LD_VAR 0 4
7929: PPUSH
7930: CALL_OW 311
7934: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7935: LD_VAR 0 4
7939: PPUSH
7940: LD_INT 177
7942: PPUSH
7943: LD_INT 138
7945: PPUSH
7946: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7950: LD_VAR 0 8
7954: PPUSH
7955: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7959: LD_VAR 0 8
7963: PPUSH
7964: LD_INT 190
7966: PPUSH
7967: LD_INT 150
7969: PPUSH
7970: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7974: LD_VAR 0 8
7978: PPUSH
7979: LD_VAR 0 4
7983: PPUSH
7984: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7988: LD_VAR 0 8
7992: PPUSH
7993: LD_INT 170
7995: PPUSH
7996: LD_INT 103
7998: PPUSH
7999: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8003: LD_INT 190
8005: PPUSH
8006: LD_INT 150
8008: PPUSH
8009: CALL_OW 84
// end else
8013: GO 8057
// begin AddComWait ( veh , 0 0$2 ) ;
8015: LD_VAR 0 4
8019: PPUSH
8020: LD_INT 70
8022: PPUSH
8023: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8027: LD_VAR 0 4
8031: PPUSH
8032: LD_INT 179
8034: PPUSH
8035: LD_INT 129
8037: PPUSH
8038: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8042: LD_VAR 0 4
8046: PPUSH
8047: LD_INT 170
8049: PPUSH
8050: LD_INT 103
8052: PPUSH
8053: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8057: LD_INT 70
8059: PPUSH
8060: CALL_OW 67
// end ;
8064: GO 7474
8066: POP
8067: POP
// end ; if tmp then
8068: LD_VAR 0 5
8072: IFFALSE 8217
// begin for i in tmp do
8074: LD_ADDR_VAR 0 2
8078: PUSH
8079: LD_VAR 0 5
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8215
// begin SetDir ( i , 4 ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: LD_INT 4
8094: PPUSH
8095: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8099: LD_VAR 0 2
8103: PPUSH
8104: LD_INT 1
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8114: LD_VAR 0 2
8118: PPUSH
8119: LD_INT 185
8121: PPUSH
8122: LD_INT 144
8124: PPUSH
8125: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8129: LD_VAR 0 2
8133: PPUSH
8134: CALL_OW 257
8138: PUSH
8139: LD_INT 2
8141: EQUAL
8142: PUSH
8143: LD_VAR 0 7
8147: NOT
8148: AND
8149: IFFALSE 8176
// begin hasCamera := true ;
8151: LD_ADDR_VAR 0 7
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_INT 190
8166: PPUSH
8167: LD_INT 150
8169: PPUSH
8170: CALL_OW 217
// end else
8174: GO 8191
// AddComMoveXY ( i , 179 , 129 ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_INT 179
8183: PPUSH
8184: LD_INT 129
8186: PPUSH
8187: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8191: LD_VAR 0 2
8195: PPUSH
8196: LD_INT 170
8198: PPUSH
8199: LD_INT 103
8201: PPUSH
8202: CALL_OW 171
// wait ( 0 0$2 ) ;
8206: LD_INT 70
8208: PPUSH
8209: CALL_OW 67
// end ;
8213: GO 8084
8215: POP
8216: POP
// end ; if heikeApes then
8217: LD_EXP 26
8221: IFFALSE 8339
// begin counter := 0 ;
8223: LD_ADDR_VAR 0 9
8227: PUSH
8228: LD_INT 0
8230: ST_TO_ADDR
// for i in heikeApes do
8231: LD_ADDR_VAR 0 2
8235: PUSH
8236: LD_EXP 26
8240: PUSH
8241: FOR_IN
8242: IFFALSE 8337
// begin if counter > 2 then
8244: LD_VAR 0 9
8248: PUSH
8249: LD_INT 2
8251: GREATER
8252: IFFALSE 8256
// break ;
8254: GO 8337
// counter := Inc ( counter ) ;
8256: LD_ADDR_VAR 0 9
8260: PUSH
8261: LD_VAR 0 9
8265: PPUSH
8266: CALL 54067 0 1
8270: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8271: LD_VAR 0 2
8275: PPUSH
8276: LD_INT 4
8278: PPUSH
8279: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8283: LD_VAR 0 2
8287: PPUSH
8288: LD_INT 1
8290: PPUSH
8291: LD_INT 0
8293: PPUSH
8294: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_INT 185
8305: PPUSH
8306: LD_INT 144
8308: PPUSH
8309: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8313: LD_VAR 0 2
8317: PPUSH
8318: LD_INT 170
8320: PPUSH
8321: LD_INT 103
8323: PPUSH
8324: CALL_OW 171
// wait ( 0 0$2 ) ;
8328: LD_INT 70
8330: PPUSH
8331: CALL_OW 67
// end ;
8335: GO 8241
8337: POP
8338: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8339: LD_EXP 13
8343: PPUSH
8344: LD_INT 163
8346: PPUSH
8347: LD_INT 89
8349: PPUSH
8350: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8354: LD_EXP 13
8358: PPUSH
8359: LD_STRING DH-Intro-1
8361: PPUSH
8362: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8366: LD_INT 175
8368: PPUSH
8369: LD_INT 117
8371: PPUSH
8372: CALL_OW 84
// if Markov then
8376: LD_EXP 20
8380: IFFALSE 8955
// begin Say ( Markov , DMar-Intro-2 ) ;
8382: LD_EXP 20
8386: PPUSH
8387: LD_STRING DMar-Intro-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8394: LD_EXP 20
8398: PPUSH
8399: LD_STRING DMar-Intro-3
8401: PPUSH
8402: CALL_OW 88
// wait ( 0 0$1 ) ;
8406: LD_INT 35
8408: PPUSH
8409: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8413: LD_EXP 13
8417: PPUSH
8418: CALL_OW 85
// if Kurt then
8422: LD_EXP 23
8426: IFFALSE 8478
// begin if IsInUnit ( Kurt ) then
8428: LD_EXP 23
8432: PPUSH
8433: CALL_OW 310
8437: IFFALSE 8448
// ComExit ( Kurt ) ;
8439: LD_EXP 23
8443: PPUSH
8444: CALL 53104 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8448: LD_EXP 23
8452: PPUSH
8453: LD_INT 130
8455: PPUSH
8456: LD_INT 56
8458: PPUSH
8459: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8463: LD_EXP 23
8467: PPUSH
8468: LD_INT 129
8470: PPUSH
8471: LD_INT 56
8473: PPUSH
8474: CALL_OW 178
// end ; if Kaia then
8478: LD_EXP 18
8482: IFFALSE 8662
// begin Say ( Kaia , DK-Intro-4 ) ;
8484: LD_EXP 18
8488: PPUSH
8489: LD_STRING DK-Intro-4
8491: PPUSH
8492: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8496: LD_EXP 20
8500: PPUSH
8501: LD_STRING DMar-Intro-5
8503: PPUSH
8504: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8508: LD_EXP 20
8512: PPUSH
8513: LD_STRING DMar-Intro-6
8515: PPUSH
8516: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8520: LD_EXP 22
8524: PPUSH
8525: LD_STRING DO-Intro-7
8527: PPUSH
8528: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8532: LD_INT 160
8534: PPUSH
8535: LD_INT 85
8537: PPUSH
8538: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8542: LD_EXP 20
8546: PPUSH
8547: LD_STRING DMar-Intro-8
8549: PPUSH
8550: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8554: LD_EXP 20
8558: PPUSH
8559: LD_STRING DMar-Intro-9
8561: PPUSH
8562: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8566: LD_EXP 20
8570: PPUSH
8571: LD_STRING DMar-Intro-10
8573: PPUSH
8574: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8578: LD_EXP 20
8582: PPUSH
8583: LD_STRING DMar-Intro-11
8585: PPUSH
8586: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8590: LD_EXP 14
8594: PPUSH
8595: LD_STRING DG-Intro-12
8597: PPUSH
8598: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8602: LD_EXP 14
8606: PPUSH
8607: LD_STRING DG-Intro-13
8609: PPUSH
8610: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8614: LD_EXP 14
8618: PPUSH
8619: LD_STRING DG-Intro-14
8621: PPUSH
8622: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8626: LD_EXP 14
8630: PPUSH
8631: LD_STRING DG-Intro-15
8633: PPUSH
8634: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8638: LD_EXP 13
8642: PPUSH
8643: LD_STRING DH-Intro-16
8645: PPUSH
8646: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8650: LD_EXP 20
8654: PPUSH
8655: LD_STRING DMar-Intro-17
8657: PPUSH
8658: CALL_OW 88
// end ; if Kurt and Mike then
8662: LD_EXP 23
8666: PUSH
8667: LD_EXP 15
8671: AND
8672: IFFALSE 8955
// begin CenterNowOnUnits ( Kurt ) ;
8674: LD_EXP 23
8678: PPUSH
8679: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8683: LD_EXP 23
8687: PPUSH
8688: LD_EXP 13
8692: PPUSH
8693: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8697: LD_EXP 23
8701: PPUSH
8702: LD_STRING DKs-Intro-18
8704: PPUSH
8705: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8709: LD_EXP 23
8713: PPUSH
8714: LD_STRING DKs-Intro-19
8716: PPUSH
8717: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8721: LD_EXP 15
8725: PPUSH
8726: CALL_OW 87
// if IsInUnit ( Mike ) then
8730: LD_EXP 15
8734: PPUSH
8735: CALL_OW 310
8739: IFFALSE 8750
// ComExit ( Mike ) ;
8741: LD_EXP 15
8745: PPUSH
8746: CALL 53104 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8750: LD_EXP 15
8754: PPUSH
8755: LD_INT 129
8757: PPUSH
8758: LD_INT 53
8760: PPUSH
8761: CALL_OW 171
// AddComHold ( Mike ) ;
8765: LD_EXP 15
8769: PPUSH
8770: CALL_OW 200
// wait ( 0 0$2 ) ;
8774: LD_INT 70
8776: PPUSH
8777: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8781: LD_EXP 15
8785: PPUSH
8786: LD_STRING DM-Intro-20
8788: PPUSH
8789: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8793: LD_ADDR_EXP 3
8797: PUSH
8798: LD_STRING Scout
8800: PPUSH
8801: CALL_OW 97
8805: ST_TO_ADDR
// if scoutActive = 1 then
8806: LD_EXP 3
8810: PUSH
8811: LD_INT 1
8813: EQUAL
8814: IFFALSE 8911
// begin CenterNowOnUnits ( Kurt ) ;
8816: LD_EXP 23
8820: PPUSH
8821: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8825: LD_EXP 13
8829: PPUSH
8830: LD_STRING DH-Intro-21
8832: PPUSH
8833: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8837: LD_EXP 15
8841: PPUSH
8842: LD_STRING DM-Intro-22
8844: PPUSH
8845: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8849: LD_EXP 23
8853: PPUSH
8854: LD_STRING DKs-Intro-23
8856: PPUSH
8857: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8861: LD_EXP 23
8865: PPUSH
8866: LD_INT 5
8868: PPUSH
8869: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8873: LD_EXP 15
8877: PPUSH
8878: LD_INT 5
8880: PPUSH
8881: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8885: LD_EXP 23
8889: PUSH
8890: LD_EXP 15
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PPUSH
8899: LD_INT 104
8901: PPUSH
8902: LD_INT 66
8904: PPUSH
8905: CALL_OW 111
// end else
8909: GO 8955
// begin scoutActive := 0 ;
8911: LD_ADDR_EXP 3
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8919: LD_EXP 13
8923: PPUSH
8924: LD_STRING DH-Intro-a-21
8926: PPUSH
8927: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8931: LD_EXP 15
8935: PPUSH
8936: LD_STRING DM-Intro-a-22
8938: PPUSH
8939: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8943: LD_EXP 23
8947: PPUSH
8948: LD_STRING DKs-Intro-a-23
8950: PPUSH
8951: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8955: LD_INT 0
8957: PPUSH
8958: CALL 52678 0 1
// music_nat := music_auto ;
8962: LD_ADDR_OWVAR 71
8966: PUSH
8967: LD_INT 0
8969: ST_TO_ADDR
// music_class := music_auto ;
8970: LD_ADDR_OWVAR 72
8974: PUSH
8975: LD_INT 0
8977: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8978: LD_STRING M1
8980: PPUSH
8981: CALL_OW 337
// wait ( 0 0$3 ) ;
8985: LD_INT 105
8987: PPUSH
8988: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8992: LD_EXP 13
8996: PPUSH
8997: LD_STRING DH-Base-1
8999: PPUSH
9000: CALL_OW 88
// if Kaia then
9004: LD_EXP 18
9008: IFFALSE 9118
// begin Say ( Kaia , DK-Base-2 ) ;
9010: LD_EXP 18
9014: PPUSH
9015: LD_STRING DK-Base-2
9017: PPUSH
9018: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9022: LD_EXP 13
9026: PPUSH
9027: LD_STRING DH-Base-3
9029: PPUSH
9030: CALL_OW 88
// if Aviradze then
9034: LD_EXP 24
9038: IFFALSE 9118
// begin Say ( Aviradze , DA-Base-4 ) ;
9040: LD_EXP 24
9044: PPUSH
9045: LD_STRING DA-Base-4
9047: PPUSH
9048: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9052: LD_EXP 18
9056: PPUSH
9057: LD_STRING DK-Base-5
9059: PPUSH
9060: CALL_OW 88
// if Markov then
9064: LD_EXP 20
9068: IFFALSE 9118
// begin Say ( Markov , DMar-Base-6 ) ;
9070: LD_EXP 20
9074: PPUSH
9075: LD_STRING DMar-Base-6
9077: PPUSH
9078: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9082: LD_EXP 18
9086: PPUSH
9087: LD_STRING DK-Base-7
9089: PPUSH
9090: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9094: LD_EXP 20
9098: PPUSH
9099: LD_STRING DMar-Base-8
9101: PPUSH
9102: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9106: LD_EXP 20
9110: PPUSH
9111: LD_STRING DMar-Base-9
9113: PPUSH
9114: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9118: CALL_OW 22
// end ;
9122: LD_VAR 0 1
9126: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9127: LD_EXP 5
9131: IFFALSE 10235
9133: GO 9135
9135: DISABLE
9136: LD_INT 0
9138: PPUSH
9139: PPUSH
// begin InGameOn ;
9140: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9144: LD_EXP 15
9148: PUSH
9149: LD_EXP 23
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: LD_EXP 13
9162: PPUSH
9163: CALL_OW 119
// ComExit ( Heike ) ;
9167: LD_EXP 13
9171: PPUSH
9172: CALL 53104 0 1
// if IsOk ( Mike ) then
9176: LD_EXP 15
9180: PPUSH
9181: CALL_OW 302
9185: IFFALSE 9203
// AddComTurnUnit ( Heike , Mike ) else
9187: LD_EXP 13
9191: PPUSH
9192: LD_EXP 15
9196: PPUSH
9197: CALL_OW 179
9201: GO 9217
// AddComTurnUnit ( Heike , Kurt ) ;
9203: LD_EXP 13
9207: PPUSH
9208: LD_EXP 23
9212: PPUSH
9213: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9217: LD_EXP 15
9221: PPUSH
9222: CALL_OW 302
9226: PUSH
9227: LD_EXP 23
9231: PPUSH
9232: CALL_OW 302
9236: AND
9237: IFFALSE 9488
// begin CenterNowOnUnits ( Mike ) ;
9239: LD_EXP 15
9243: PPUSH
9244: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9248: LD_EXP 15
9252: PPUSH
9253: LD_STRING DM-Scout-1
9255: PPUSH
9256: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9260: LD_EXP 13
9264: PPUSH
9265: LD_STRING DH-Scout-2
9267: PPUSH
9268: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9272: LD_EXP 23
9276: PPUSH
9277: LD_STRING DKs-Scout-3
9279: PPUSH
9280: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9284: LD_EXP 13
9288: PPUSH
9289: LD_STRING DH-Scout-4
9291: PPUSH
9292: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9296: LD_EXP 13
9300: PPUSH
9301: LD_STRING DH-Scout-5
9303: PPUSH
9304: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 72
9315: PUSH
9316: LD_INT 122
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 89
9325: PUSH
9326: LD_INT 131
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 99
9335: PUSH
9336: LD_INT 139
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 100
9345: PUSH
9346: LD_INT 148
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: ST_TO_ADDR
// for i in tmp do
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_VAR 0 2
9368: PUSH
9369: FOR_IN
9370: IFFALSE 9428
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9372: LD_VAR 0 1
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PPUSH
9381: LD_VAR 0 1
9385: PUSH
9386: LD_INT 2
9388: ARRAY
9389: PPUSH
9390: LD_INT 2
9392: PPUSH
9393: LD_INT 6
9395: NEG
9396: PPUSH
9397: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9401: LD_VAR 0 1
9405: PUSH
9406: LD_INT 1
9408: ARRAY
9409: PPUSH
9410: LD_VAR 0 1
9414: PUSH
9415: LD_INT 2
9417: ARRAY
9418: PPUSH
9419: LD_INT 2
9421: PPUSH
9422: CALL_OW 331
// end ;
9426: GO 9369
9428: POP
9429: POP
// CenterOnXY ( 83 , 132 ) ;
9430: LD_INT 83
9432: PPUSH
9433: LD_INT 132
9435: PPUSH
9436: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9440: LD_EXP 23
9444: PPUSH
9445: LD_STRING DKs-Scout-6
9447: PPUSH
9448: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9452: LD_EXP 15
9456: PPUSH
9457: LD_STRING DM-Scout-7
9459: PPUSH
9460: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9464: LD_EXP 15
9468: PPUSH
9469: LD_STRING DM-Scout-8
9471: PPUSH
9472: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9476: LD_EXP 23
9480: PPUSH
9481: LD_STRING DKs-Scout-9
9483: PPUSH
9484: CALL_OW 88
// end ; if IsDead ( Mike ) then
9488: LD_EXP 15
9492: PPUSH
9493: CALL_OW 301
9497: IFFALSE 9664
// begin CenterNowOnUnits ( Kurt ) ;
9499: LD_EXP 23
9503: PPUSH
9504: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9508: LD_EXP 23
9512: PPUSH
9513: LD_STRING DKs-Scout-b-1
9515: PPUSH
9516: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9520: LD_EXP 23
9524: PPUSH
9525: LD_STRING DKs-Scout-b-2
9527: PPUSH
9528: CALL_OW 88
// if IsOk ( Givi ) then
9532: LD_EXP 14
9536: PPUSH
9537: CALL_OW 302
9541: IFFALSE 9616
// begin ComExit ( Givi ) ;
9543: LD_EXP 14
9547: PPUSH
9548: CALL 53104 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9552: LD_EXP 14
9556: PPUSH
9557: LD_EXP 23
9561: PPUSH
9562: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9566: LD_EXP 14
9570: PPUSH
9571: LD_STRING DG-Scout-b-3
9573: PPUSH
9574: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9578: LD_EXP 14
9582: PPUSH
9583: LD_STRING DG-Scout-b-4
9585: PPUSH
9586: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9590: LD_EXP 14
9594: PPUSH
9595: LD_STRING DG-Scout-b-5
9597: PPUSH
9598: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9602: LD_EXP 13
9606: PPUSH
9607: LD_STRING DH-Scout-b-6
9609: PPUSH
9610: CALL_OW 88
// end else
9614: GO 9628
// Say ( Heike , DH-Scout-a-4 ) ;
9616: LD_EXP 13
9620: PPUSH
9621: LD_STRING DH-Scout-a-4
9623: PPUSH
9624: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9628: LD_EXP 23
9632: PPUSH
9633: LD_STRING DKs-Scout-b-7
9635: PPUSH
9636: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9640: LD_EXP 23
9644: PPUSH
9645: LD_STRING DKs-Scout-b-8
9647: PPUSH
9648: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9652: LD_EXP 23
9656: PPUSH
9657: LD_STRING DKs-Scout-b-9
9659: PPUSH
9660: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9664: LD_EXP 23
9668: PPUSH
9669: CALL_OW 301
9673: IFFALSE 9952
// begin CenterNowOnUnits ( Mike ) ;
9675: LD_EXP 15
9679: PPUSH
9680: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9684: LD_EXP 15
9688: PPUSH
9689: LD_STRING DM-Scout-a-1
9691: PPUSH
9692: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING DM-Scout-a-2
9703: PPUSH
9704: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9708: LD_EXP 15
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 1000
9720: LESS
9721: IFFALSE 9737
// Say ( Heike , DH-Scout-a-3 ) else
9723: LD_EXP 13
9727: PPUSH
9728: LD_STRING DH-Scout-a-3
9730: PPUSH
9731: CALL_OW 88
9735: GO 9749
// Say ( Heike , DH-Scout-a-4 ) ;
9737: LD_EXP 13
9741: PPUSH
9742: LD_STRING DH-Scout-a-4
9744: PPUSH
9745: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9749: LD_EXP 15
9753: PPUSH
9754: LD_STRING DM-Scout-a-5
9756: PPUSH
9757: CALL_OW 88
// if IsOk ( Kaia ) then
9761: LD_EXP 18
9765: PPUSH
9766: CALL_OW 302
9770: IFFALSE 9952
// begin ComExit ( Kaia ) ;
9772: LD_EXP 18
9776: PPUSH
9777: CALL 53104 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9781: LD_EXP 18
9785: PPUSH
9786: LD_EXP 15
9790: PPUSH
9791: CALL_OW 172
// wait ( 0 0$2 ) ;
9795: LD_INT 70
9797: PPUSH
9798: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9802: LD_EXP 18
9806: PPUSH
9807: LD_EXP 15
9811: PPUSH
9812: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9816: LD_EXP 15
9820: PPUSH
9821: LD_EXP 18
9825: PPUSH
9826: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9830: LD_EXP 18
9834: PPUSH
9835: LD_STRING DK-Scout-a-6
9837: PPUSH
9838: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9842: LD_EXP 15
9846: PPUSH
9847: LD_STRING DM-Scout-a-7
9849: PPUSH
9850: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9854: LD_EXP 18
9858: PPUSH
9859: LD_STRING DK-Scout-a-8
9861: PPUSH
9862: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9866: LD_EXP 18
9870: PPUSH
9871: LD_STRING DK-Scout-a-9
9873: PPUSH
9874: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9878: LD_EXP 13
9882: PPUSH
9883: LD_STRING DH-Scout-a-10
9885: PPUSH
9886: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9890: LD_EXP 15
9894: PPUSH
9895: LD_EXP 13
9899: PPUSH
9900: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9904: LD_EXP 15
9908: PPUSH
9909: LD_STRING DM-Scout-a-11
9911: PPUSH
9912: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9916: LD_EXP 15
9920: PPUSH
9921: LD_STRING DM-Scout-a-12
9923: PPUSH
9924: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9928: LD_EXP 15
9932: PPUSH
9933: LD_STRING DM-Scout-a-13
9935: PPUSH
9936: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9940: LD_EXP 15
9944: PPUSH
9945: LD_STRING DM-Scout-a-14
9947: PPUSH
9948: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9952: LD_EXP 14
9956: PPUSH
9957: CALL_OW 302
9961: IFFALSE 9989
// begin Say ( Givi , DG-Scout-10 ) ;
9963: LD_EXP 14
9967: PPUSH
9968: LD_STRING DG-Scout-10
9970: PPUSH
9971: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9975: LD_EXP 14
9979: PPUSH
9980: LD_STRING DG-Scout-11
9982: PPUSH
9983: CALL_OW 88
// end else
9987: GO 10046
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9989: LD_EXP 25
9993: PPUSH
9994: LD_INT 26
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 72
10008: PPUSH
10009: LD_STRING DArm-Scout-10
10011: PPUSH
10012: CALL 187 0 2
10016: NOT
10017: IFFALSE 10046
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10019: LD_EXP 25
10023: PPUSH
10024: LD_INT 26
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 72
10038: PPUSH
10039: LD_STRING DArf-Scout-10
10041: PPUSH
10042: CALL 187 0 2
// Say ( Heike , DH-Scout-12 ) ;
10046: LD_EXP 13
10050: PPUSH
10051: LD_STRING DH-Scout-12
10053: PPUSH
10054: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10058: LD_EXP 13
10062: PPUSH
10063: LD_STRING DH-Scout-13
10065: PPUSH
10066: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 302
10079: PUSH
10080: LD_EXP 23
10084: PPUSH
10085: CALL_OW 302
10089: AND
10090: IFFALSE 10118
// begin Say ( Mike , DM-Scout-14 ) ;
10092: LD_EXP 15
10096: PPUSH
10097: LD_STRING DM-Scout-14
10099: PPUSH
10100: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10104: LD_EXP 13
10108: PPUSH
10109: LD_STRING DH-Scout-c-14
10111: PPUSH
10112: CALL_OW 88
// end else
10116: GO 10211
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10118: LD_EXP 15
10122: PPUSH
10123: CALL_OW 302
10127: PUSH
10128: LD_EXP 23
10132: PPUSH
10133: CALL_OW 302
10137: XOR
10138: IFFALSE 10199
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10140: LD_EXP 25
10144: PPUSH
10145: LD_INT 26
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 72
10159: PPUSH
10160: LD_STRING DArm-Scout-a-14
10162: PPUSH
10163: CALL 187 0 2
10167: NOT
10168: IFFALSE 10197
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10170: LD_EXP 25
10174: PPUSH
10175: LD_INT 26
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PPUSH
10185: CALL_OW 72
10189: PPUSH
10190: LD_STRING DArf-Scout-a-14
10192: PPUSH
10193: CALL 187 0 2
// end else
10197: GO 10211
// Say ( Heike , DH-Scout-d-14 ) ;
10199: LD_EXP 13
10203: PPUSH
10204: LD_STRING DH-Scout-d-14
10206: PPUSH
10207: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10211: LD_EXP 13
10215: PPUSH
10216: LD_STRING DH-Scout-15
10218: PPUSH
10219: CALL_OW 88
// InGameOff ;
10223: CALL_OW 9
// usAttacksAllowed := true ;
10227: LD_ADDR_EXP 6
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// end ;
10235: PPOPN 2
10237: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10238: LD_EXP 4
10242: IFFALSE 10419
10244: GO 10246
10246: DISABLE
10247: LD_INT 0
10249: PPUSH
// begin spoken := true ;
10250: LD_ADDR_VAR 0 1
10254: PUSH
10255: LD_INT 1
10257: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10258: LD_INT 1050
10260: PPUSH
10261: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10265: LD_EXP 13
10269: PPUSH
10270: LD_STRING DH-Scout-c-1
10272: PPUSH
10273: CALL_OW 88
// if not IsOk ( Givi ) then
10277: LD_EXP 14
10281: PPUSH
10282: CALL_OW 302
10286: NOT
10287: IFFALSE 10291
// exit ;
10289: GO 10419
// if IsOk ( Givi ) then
10291: LD_EXP 14
10295: PPUSH
10296: CALL_OW 302
10300: IFFALSE 10328
// begin Say ( Givi , DG-Scout-c-2 ) ;
10302: LD_EXP 14
10306: PPUSH
10307: LD_STRING DG-Scout-c-2
10309: PPUSH
10310: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10314: LD_EXP 14
10318: PPUSH
10319: LD_STRING DG-Scout-c-3
10321: PPUSH
10322: CALL_OW 88
// end else
10326: GO 10401
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10328: LD_ADDR_VAR 0 1
10332: PUSH
10333: LD_EXP 25
10337: PPUSH
10338: LD_INT 26
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 72
10352: PPUSH
10353: LD_STRING DArm-Scout-c-3
10355: PPUSH
10356: CALL 187 0 2
10360: ST_TO_ADDR
// if not spoken then
10361: LD_VAR 0 1
10365: NOT
10366: IFFALSE 10401
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10368: LD_ADDR_VAR 0 1
10372: PUSH
10373: LD_EXP 25
10377: PPUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 72
10392: PPUSH
10393: LD_STRING DArf-Scout-c-3
10395: PPUSH
10396: CALL 187 0 2
10400: ST_TO_ADDR
// ; end ; if spoken then
10401: LD_VAR 0 1
10405: IFFALSE 10419
// Say ( Heike , DH-Scout-c-4 ) ;
10407: LD_EXP 13
10411: PPUSH
10412: LD_STRING DH-Scout-c-4
10414: PPUSH
10415: CALL_OW 88
// end ;
10419: PPOPN 1
10421: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10422: LD_INT 22
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 30
10434: PUSH
10435: LD_INT 7
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 69
10450: PUSH
10451: LD_EXP 24
10455: PPUSH
10456: CALL_OW 302
10460: AND
10461: IFFALSE 10546
10463: GO 10465
10465: DISABLE
// begin DialogueOn ;
10466: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10470: LD_EXP 24
10474: PPUSH
10475: LD_STRING DA-Lab-1
10477: PPUSH
10478: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10482: LD_EXP 13
10486: PPUSH
10487: LD_STRING DH-Lab-2
10489: PPUSH
10490: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10494: LD_EXP 24
10498: PPUSH
10499: LD_STRING DA-Lab-3
10501: PPUSH
10502: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10506: LD_EXP 24
10510: PPUSH
10511: LD_STRING DA-Lab-4
10513: PPUSH
10514: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10518: LD_EXP 24
10522: PPUSH
10523: LD_STRING DA-Lab-5
10525: PPUSH
10526: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10530: LD_EXP 13
10534: PPUSH
10535: LD_STRING DH-Lab-6
10537: PPUSH
10538: CALL_OW 88
// DialogueOff ;
10542: CALL_OW 7
// end ;
10546: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10547: LD_INT 7
10549: PPUSH
10550: LD_INT 2
10552: PPUSH
10553: CALL_OW 321
10557: PUSH
10558: LD_INT 2
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PPUSH
10567: CALL_OW 302
10571: AND
10572: IFFALSE 10741
10574: GO 10576
10576: DISABLE
// begin DialogueOn ;
10577: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10581: LD_EXP 14
10585: PPUSH
10586: LD_STRING DG-Opt-1
10588: PPUSH
10589: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10593: LD_EXP 13
10597: PPUSH
10598: LD_STRING DH-Opt-2
10600: PPUSH
10601: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10605: LD_EXP 14
10609: PPUSH
10610: LD_STRING DG-Opt-3
10612: PPUSH
10613: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10617: LD_EXP 14
10621: PPUSH
10622: LD_STRING DG-Opt-4
10624: PPUSH
10625: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10629: LD_EXP 13
10633: PPUSH
10634: LD_STRING DH-Opt-5
10636: PPUSH
10637: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10641: LD_EXP 14
10645: PPUSH
10646: LD_STRING DG-Opt-6
10648: PPUSH
10649: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10653: LD_EXP 13
10657: PPUSH
10658: LD_STRING DH-Opt-7
10660: PPUSH
10661: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10665: LD_EXP 14
10669: PPUSH
10670: LD_STRING DG-Opt-8
10672: PPUSH
10673: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10677: LD_EXP 14
10681: PPUSH
10682: LD_STRING DG-Opt-9
10684: PPUSH
10685: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10689: LD_EXP 13
10693: PPUSH
10694: LD_STRING DH-Opt-10
10696: PPUSH
10697: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10701: LD_EXP 14
10705: PPUSH
10706: LD_STRING DG-Opt-11
10708: PPUSH
10709: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10713: LD_EXP 14
10717: PPUSH
10718: LD_STRING DG-Opt-12
10720: PPUSH
10721: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10725: LD_EXP 13
10729: PPUSH
10730: LD_STRING DH-Opt-13
10732: PPUSH
10733: CALL_OW 88
// DialogueOff ;
10737: CALL_OW 7
// end ;
10741: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
10742: LD_EXP 25
10746: PPUSH
10747: LD_INT 95
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 26
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: PPUSH
10782: CALL_OW 72
10786: IFFALSE 10847
10788: GO 10790
10790: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
10791: LD_EXP 25
10795: PPUSH
10796: LD_INT 95
10798: PUSH
10799: LD_INT 7
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 23
10808: PUSH
10809: LD_INT 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 26
10818: PUSH
10819: LD_INT 1
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 72
10835: PUSH
10836: LD_INT 1
10838: ARRAY
10839: PPUSH
10840: LD_STRING DArm-River
10842: PPUSH
10843: CALL_OW 88
// end ;
10847: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10848: LD_INT 40
10850: PPUSH
10851: LD_INT 2
10853: PPUSH
10854: CALL_OW 321
10858: PUSH
10859: LD_INT 2
10861: EQUAL
10862: PUSH
10863: LD_EXP 16
10867: PPUSH
10868: CALL_OW 302
10872: AND
10873: IFFALSE 11123
10875: GO 10877
10877: DISABLE
// begin DialogueOn ;
10878: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10882: LD_EXP 16
10886: PPUSH
10887: LD_STRING DI-Roc-1
10889: PPUSH
10890: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10894: LD_EXP 13
10898: PPUSH
10899: LD_STRING DH-Roc-2
10901: PPUSH
10902: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10906: LD_EXP 16
10910: PPUSH
10911: LD_STRING DI-Roc-3
10913: PPUSH
10914: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10918: LD_EXP 16
10922: PPUSH
10923: LD_STRING DI-Roc-4
10925: PPUSH
10926: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10930: LD_EXP 18
10934: PPUSH
10935: LD_STRING DK-Roc-5
10937: PPUSH
10938: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10942: LD_EXP 18
10946: PPUSH
10947: LD_STRING DK-Roc-6
10949: PPUSH
10950: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10954: LD_EXP 14
10958: PPUSH
10959: LD_STRING DG-Roc-7
10961: PPUSH
10962: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10966: LD_EXP 14
10970: PPUSH
10971: LD_STRING DG-Roc-8
10973: PPUSH
10974: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10978: LD_EXP 20
10982: PPUSH
10983: CALL_OW 302
10987: PUSH
10988: LD_EXP 18
10992: PPUSH
10993: CALL_OW 302
10997: AND
10998: PUSH
10999: LD_EXP 14
11003: PPUSH
11004: CALL_OW 302
11008: AND
11009: IFFALSE 11119
// begin Say ( Markov , DMar-Roc-9 ) ;
11011: LD_EXP 20
11015: PPUSH
11016: LD_STRING DMar-Roc-9
11018: PPUSH
11019: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11023: LD_EXP 20
11027: PPUSH
11028: LD_STRING DMar-Roc-10
11030: PPUSH
11031: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11035: LD_EXP 18
11039: PPUSH
11040: LD_STRING DK-Roc-11
11042: PPUSH
11043: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11047: LD_EXP 20
11051: PPUSH
11052: LD_STRING DMar-Roc-12
11054: PPUSH
11055: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11059: LD_EXP 18
11063: PPUSH
11064: LD_STRING DK-Roc-13
11066: PPUSH
11067: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11071: LD_EXP 14
11075: PPUSH
11076: LD_STRING DG-Roc-14
11078: PPUSH
11079: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11083: LD_EXP 20
11087: PPUSH
11088: LD_STRING DMar-Roc-15
11090: PPUSH
11091: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11095: LD_EXP 20
11099: PPUSH
11100: LD_STRING DMar-Roc-16
11102: PPUSH
11103: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11107: LD_EXP 18
11111: PPUSH
11112: LD_STRING DK-Roc-17
11114: PPUSH
11115: CALL_OW 88
// end ; DialogueOff ;
11119: CALL_OW 7
// end ;
11123: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11124: LD_EXP 28
11128: PPUSH
11129: CALL_OW 256
11133: PUSH
11134: LD_INT 1000
11136: LESS
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 21
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 23
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: PUSH
11178: LD_INT 6
11180: LESS
11181: OR
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 69
11222: PUSH
11223: LD_INT 2
11225: LESS
11226: OR
11227: IFFALSE 12436
11229: GO 11231
11231: DISABLE
11232: LD_INT 0
11234: PPUSH
11235: PPUSH
11236: PPUSH
// begin usAttacksAllowed := false ;
11237: LD_ADDR_EXP 6
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// usSurrender := true ;
11245: LD_ADDR_EXP 7
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11253: LD_INT 1
11255: PPUSH
11256: LD_INT 2
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 22
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 60
11296: PUSH
11297: EMPTY
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: PPUSH
11305: CALL_OW 69
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11324
// ComStop ( i ) ;
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 141
11322: GO 11310
11324: POP
11325: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11326: LD_ADDR_VAR 0 1
11330: PUSH
11331: LD_INT 22
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: LD_INT 50
11346: PUSH
11347: EMPTY
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 1
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PPUSH
11369: CALL_OW 69
11373: PUSH
11374: FOR_IN
11375: IFFALSE 11391
// SetLives ( i , 251 ) ;
11377: LD_VAR 0 1
11381: PPUSH
11382: LD_INT 251
11384: PPUSH
11385: CALL_OW 234
11389: GO 11374
11391: POP
11392: POP
// InGameOn ;
11393: CALL_OW 8
// ComExit ( usCommander ) ;
11397: LD_EXP 28
11401: PPUSH
11402: CALL 53104 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11406: LD_EXP 28
11410: PPUSH
11411: LD_INT 81
11413: PPUSH
11414: LD_INT 143
11416: PPUSH
11417: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11421: LD_EXP 28
11425: PPUSH
11426: LD_INT 81
11428: PPUSH
11429: LD_INT 139
11431: PPUSH
11432: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11436: LD_INT 81
11438: PPUSH
11439: LD_INT 144
11441: PPUSH
11442: LD_INT 2
11444: PPUSH
11445: LD_INT 10
11447: NEG
11448: PPUSH
11449: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11453: LD_EXP 28
11457: PPUSH
11458: CALL_OW 87
// wait ( 0 0$2 ) ;
11462: LD_INT 70
11464: PPUSH
11465: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11469: LD_EXP 28
11473: PPUSH
11474: LD_STRING DCa-Surrender-1
11476: PPUSH
11477: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11481: LD_EXP 13
11485: PPUSH
11486: LD_STRING DH-Surrender-2
11488: PPUSH
11489: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11493: LD_EXP 13
11497: PPUSH
11498: CALL_OW 310
11502: PPUSH
11503: CALL_OW 247
11507: PUSH
11508: LD_INT 3
11510: EQUAL
11511: IFFALSE 11529
// begin ComExit ( Heike ) ;
11513: LD_EXP 13
11517: PPUSH
11518: CALL 53104 0 1
// wait ( 3 ) ;
11522: LD_INT 3
11524: PPUSH
11525: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11529: LD_EXP 13
11533: PPUSH
11534: LD_INT 82
11536: PPUSH
11537: LD_INT 133
11539: PPUSH
11540: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11544: LD_EXP 13
11548: PPUSH
11549: LD_EXP 28
11553: PPUSH
11554: CALL_OW 179
// wait ( 0 0$3 ) ;
11558: LD_INT 105
11560: PPUSH
11561: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11565: LD_EXP 13
11569: PPUSH
11570: LD_STRING DH-Surrender-3
11572: PPUSH
11573: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11577: LD_EXP 13
11581: PPUSH
11582: LD_STRING DH-Surrender-4
11584: PPUSH
11585: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11589: LD_INT 81
11591: PPUSH
11592: LD_INT 144
11594: PPUSH
11595: LD_INT 2
11597: PPUSH
11598: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11602: LD_INT 1
11604: PPUSH
11605: LD_INT 2
11607: PPUSH
11608: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 1
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 54
11639: PUSH
11640: EMPTY
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: FOR_IN
11654: IFFALSE 11667
// ComExit ( i ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL 53104 0 1
11665: GO 11653
11667: POP
11668: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11669: LD_ADDR_VAR 0 3
11673: PUSH
11674: LD_INT 22
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 4
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11703: LD_ADDR_VAR 0 2
11707: PUSH
11708: LD_INT 22
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: LD_INT 50
11723: PUSH
11724: EMPTY
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 69
11739: ST_TO_ADDR
// if sci and hurts then
11740: LD_VAR 0 3
11744: PUSH
11745: LD_VAR 0 2
11749: AND
11750: IFFALSE 11812
// begin for i := 1 to hurts do
11752: LD_ADDR_VAR 0 1
11756: PUSH
11757: DOUBLE
11758: LD_INT 1
11760: DEC
11761: ST_TO_ADDR
11762: LD_VAR 0 2
11766: PUSH
11767: FOR_TO
11768: IFFALSE 11810
// if i <= sci then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_VAR 0 3
11779: LESSEQUAL
11780: IFFALSE 11808
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11782: LD_VAR 0 3
11786: PUSH
11787: LD_VAR 0 1
11791: ARRAY
11792: PPUSH
11793: LD_VAR 0 2
11797: PUSH
11798: LD_VAR 0 1
11802: ARRAY
11803: PPUSH
11804: CALL_OW 188
11808: GO 11767
11810: POP
11811: POP
// end ; if IsOk ( Givi ) then
11812: LD_EXP 14
11816: PPUSH
11817: CALL_OW 302
11821: IFFALSE 11837
// Say ( Givi , DG-Surrender-5 ) else
11823: LD_EXP 14
11827: PPUSH
11828: LD_STRING DG-Surrender-5
11830: PPUSH
11831: CALL_OW 88
11835: GO 11849
// Say ( Heike , DH-Surrender-a-5 ) ;
11837: LD_EXP 13
11841: PPUSH
11842: LD_STRING DH-Surrender-a-5
11844: PPUSH
11845: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11849: LD_EXP 28
11853: PPUSH
11854: LD_STRING DCa-Surrender-6
11856: PPUSH
11857: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11861: LD_EXP 28
11865: PPUSH
11866: LD_STRING DCa-Surrender-7
11868: PPUSH
11869: CALL_OW 88
// if IsOk ( Givi ) then
11873: LD_EXP 14
11877: PPUSH
11878: CALL_OW 302
11882: IFFALSE 11898
// Say ( Givi , DG-Surrender-8 ) else
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING DG-Surrender-8
11891: PPUSH
11892: CALL_OW 88
11896: GO 11910
// Say ( Heike , DH-Surrender-a-8 ) ;
11898: LD_EXP 13
11902: PPUSH
11903: LD_STRING DH-Surrender-a-8
11905: PPUSH
11906: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11910: LD_EXP 28
11914: PPUSH
11915: LD_STRING DCa-Surrender-9
11917: PPUSH
11918: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11922: LD_EXP 13
11926: PPUSH
11927: LD_STRING DH-Surrender-10
11929: PPUSH
11930: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11934: LD_EXP 28
11938: PPUSH
11939: LD_STRING DCa-Surrender-11
11941: PPUSH
11942: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11946: LD_EXP 13
11950: PPUSH
11951: LD_STRING DH-Surrender-12
11953: PPUSH
11954: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11958: LD_EXP 28
11962: PPUSH
11963: LD_STRING DCa-Surrender-13
11965: PPUSH
11966: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11970: LD_EXP 28
11974: PPUSH
11975: LD_STRING DCa-Surrender-14
11977: PPUSH
11978: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11982: LD_EXP 28
11986: PPUSH
11987: LD_STRING DCa-Surrender-15
11989: PPUSH
11990: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11994: LD_EXP 28
11998: PPUSH
11999: LD_STRING DCa-Surrender-16
12001: PPUSH
12002: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12006: LD_EXP 18
12010: PPUSH
12011: LD_STRING DK-Surrender-17
12013: PPUSH
12014: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12018: LD_EXP 22
12022: PPUSH
12023: LD_STRING DO-Surrender-18
12025: PPUSH
12026: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12030: LD_EXP 22
12034: PPUSH
12035: LD_STRING DO-Surrender-19
12037: PPUSH
12038: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12042: LD_EXP 23
12046: PPUSH
12047: LD_STRING DKs-Surrender-20
12049: PPUSH
12050: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12054: LD_EXP 23
12058: PPUSH
12059: LD_STRING DKs-Surrender-21
12061: PPUSH
12062: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12066: LD_EXP 20
12070: PPUSH
12071: LD_STRING DMar-Surrender-22
12073: PPUSH
12074: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12078: LD_EXP 20
12082: PPUSH
12083: LD_STRING DMar-Surrender-23
12085: PPUSH
12086: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12090: LD_EXP 19
12094: PPUSH
12095: LD_STRING DS-Surrender-24
12097: PPUSH
12098: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12102: LD_EXP 24
12106: PPUSH
12107: LD_STRING DA-Surrender-25
12109: PPUSH
12110: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12114: LD_EXP 16
12118: PPUSH
12119: LD_STRING DI-Surrender-26
12121: PPUSH
12122: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12126: LD_EXP 17
12130: PPUSH
12131: LD_STRING DKam-Surrender-27
12133: PPUSH
12134: CALL_OW 88
// if IsOk ( Givi ) then
12138: LD_EXP 14
12142: PPUSH
12143: CALL_OW 302
12147: IFFALSE 12187
// begin Say ( Givi , DG-Surrender-28 ) ;
12149: LD_EXP 14
12153: PPUSH
12154: LD_STRING DG-Surrender-28
12156: PPUSH
12157: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12161: LD_EXP 14
12165: PPUSH
12166: LD_STRING DG-Surrender-29
12168: PPUSH
12169: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12173: LD_EXP 14
12177: PPUSH
12178: LD_STRING DG-Surrender-30
12180: PPUSH
12181: CALL_OW 88
// end else
12185: GO 12223
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12187: LD_EXP 13
12191: PPUSH
12192: LD_STRING DH-Surrender-a-28
12194: PPUSH
12195: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12199: LD_EXP 13
12203: PPUSH
12204: LD_STRING DH-Surrender-a-29
12206: PPUSH
12207: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12211: LD_EXP 13
12215: PPUSH
12216: LD_STRING DH-Surrender-a-30
12218: PPUSH
12219: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12223: CALL 14083 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12227: LD_INT 22
12229: PUSH
12230: LD_INT 3
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: PPUSH
12242: LD_INT 176
12244: PUSH
12245: LD_INT 123
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: PPUSH
12255: CALL 55310 0 2
// if not IsEnvironment ( 190 , 150 ) then
12259: LD_INT 190
12261: PPUSH
12262: LD_INT 150
12264: PPUSH
12265: CALL_OW 351
12269: NOT
12270: IFFALSE 12289
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12272: LD_INT 190
12274: PPUSH
12275: LD_INT 150
12277: PPUSH
12278: LD_INT 2
12280: PPUSH
12281: LD_INT 8
12283: NEG
12284: PPUSH
12285: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12289: LD_INT 193
12291: PPUSH
12292: LD_INT 150
12294: PPUSH
12295: CALL_OW 84
// if IsOk ( Markov ) then
12299: LD_EXP 20
12303: PPUSH
12304: CALL_OW 302
12308: IFFALSE 12324
// Say ( Markov , DMar-Surrender-31 ) else
12310: LD_EXP 20
12314: PPUSH
12315: LD_STRING DMar-Surrender-31
12317: PPUSH
12318: CALL_OW 88
12322: GO 12381
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12324: LD_EXP 25
12328: PPUSH
12329: LD_INT 26
12331: PUSH
12332: LD_INT 1
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PPUSH
12339: CALL_OW 72
12343: PPUSH
12344: LD_STRING DArm-Surrender-a-31
12346: PPUSH
12347: CALL 187 0 2
12351: NOT
12352: IFFALSE 12381
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12354: LD_EXP 25
12358: PPUSH
12359: LD_INT 26
12361: PUSH
12362: LD_INT 2
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PPUSH
12369: CALL_OW 72
12373: PPUSH
12374: LD_STRING DArf-Surrender-a-31
12376: PPUSH
12377: CALL 187 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12381: LD_EXP 13
12385: PPUSH
12386: LD_STRING DH-Surrender-32
12388: PPUSH
12389: CALL_OW 88
// InGameOff ;
12393: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12397: LD_STRING M2
12399: PPUSH
12400: CALL_OW 337
// wait ( 0 0$20 ) ;
12404: LD_INT 700
12406: PPUSH
12407: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12411: CALL 14445 0 0
// russianAttack := true ;
12415: LD_ADDR_EXP 8
12419: PUSH
12420: LD_INT 1
12422: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12423: LD_INT 190
12425: PPUSH
12426: LD_INT 150
12428: PPUSH
12429: LD_INT 2
12431: PPUSH
12432: CALL_OW 331
// end ;
12436: PPOPN 3
12438: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12439: LD_EXP 11
12443: PUSH
12444: LD_INT 2
12446: PPUSH
12447: CALL_OW 463
12451: NOT
12452: AND
12453: PUSH
12454: LD_EXP 13
12458: PPUSH
12459: CALL_OW 302
12463: AND
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PPUSH
12489: CALL_OW 69
12493: AND
12494: PUSH
12495: LD_EXP 20
12499: PPUSH
12500: CALL_OW 302
12504: PUSH
12505: LD_EXP 25
12509: PPUSH
12510: LD_INT 50
12512: PUSH
12513: EMPTY
12514: LIST
12515: PPUSH
12516: CALL_OW 72
12520: OR
12521: AND
12522: IFFALSE 12750
12524: GO 12526
12526: DISABLE
// begin DialogueOn ;
12527: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12531: LD_EXP 13
12535: PPUSH
12536: LD_STRING DH-Heavy-1
12538: PPUSH
12539: CALL_OW 88
// if IsOk ( Markov ) then
12543: LD_EXP 20
12547: PPUSH
12548: CALL_OW 302
12552: IFFALSE 12677
// begin Say ( Markov , DMar-Heavy-2 ) ;
12554: LD_EXP 20
12558: PPUSH
12559: LD_STRING DMar-Heavy-2
12561: PPUSH
12562: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12566: LD_INT 22
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 3
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 69
12594: PUSH
12595: LD_INT 1
12597: ARRAY
12598: PPUSH
12599: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12603: LD_EXP 20
12607: PPUSH
12608: LD_STRING DMar-Heavy-3
12610: PPUSH
12611: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12615: LD_EXP 20
12619: PPUSH
12620: LD_STRING DMar-Heavy-4
12622: PPUSH
12623: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12627: LD_EXP 20
12631: PPUSH
12632: LD_STRING DMar-Heavy-5
12634: PPUSH
12635: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12639: LD_EXP 20
12643: PPUSH
12644: LD_STRING DMar-Heavy-6
12646: PPUSH
12647: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12651: LD_EXP 13
12655: PPUSH
12656: LD_STRING DH-Heavy-7
12658: PPUSH
12659: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12663: LD_EXP 13
12667: PPUSH
12668: LD_STRING DH-Heavy-8
12670: PPUSH
12671: CALL_OW 88
// end else
12675: GO 12734
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12677: LD_EXP 25
12681: PPUSH
12682: LD_INT 26
12684: PUSH
12685: LD_INT 1
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 72
12696: PPUSH
12697: LD_STRING DArm-Heavy-a-2
12699: PPUSH
12700: CALL 187 0 2
12704: NOT
12705: IFFALSE 12734
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12707: LD_EXP 25
12711: PPUSH
12712: LD_INT 26
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 72
12726: PPUSH
12727: LD_STRING DArf-Heavy-a-2
12729: PPUSH
12730: CALL 187 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12734: LD_EXP 13
12738: PPUSH
12739: LD_STRING DH-Heavy-9
12741: PPUSH
12742: CALL_OW 88
// DialogueOff ;
12746: CALL_OW 7
// end ;
12750: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12751: LD_EXP 32
12755: PPUSH
12756: LD_INT 101
12758: PUSH
12759: LD_INT 2
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 72
12770: PUSH
12771: LD_EXP 13
12775: PPUSH
12776: CALL_OW 302
12780: AND
12781: IFFALSE 12924
12783: GO 12785
12785: DISABLE
// begin DialogueOn ;
12786: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12790: LD_EXP 32
12794: PPUSH
12795: LD_INT 101
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 72
12809: PPUSH
12810: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12814: LD_EXP 13
12818: PPUSH
12819: LD_STRING DH-Flank-1
12821: PPUSH
12822: CALL_OW 88
// if IsOk ( Mike ) then
12826: LD_EXP 15
12830: PPUSH
12831: CALL_OW 302
12835: IFFALSE 12851
// Say ( Mike , DM-Flank-2 ) else
12837: LD_EXP 15
12841: PPUSH
12842: LD_STRING DM-Flank-2
12844: PPUSH
12845: CALL_OW 88
12849: GO 12908
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12851: LD_EXP 25
12855: PPUSH
12856: LD_INT 26
12858: PUSH
12859: LD_INT 1
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 72
12870: PPUSH
12871: LD_STRING DArm-Flank-a-2
12873: PPUSH
12874: CALL 187 0 2
12878: NOT
12879: IFFALSE 12908
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12881: LD_EXP 25
12885: PPUSH
12886: LD_INT 26
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 72
12900: PPUSH
12901: LD_STRING DArm-Flank-a-2
12903: PPUSH
12904: CALL 187 0 2
// Say ( Heike , DH-Flank-3 ) ;
12908: LD_EXP 13
12912: PPUSH
12913: LD_STRING DH-Flank-3
12915: PPUSH
12916: CALL_OW 88
// DialogueOff ;
12920: CALL_OW 7
// end ;
12924: END
// every 0 0$3 trigger seeRemoteVehicle do
12925: LD_EXP 10
12929: IFFALSE 13153
12931: GO 12933
12933: DISABLE
// begin DialogueOn ;
12934: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12938: LD_EXP 13
12942: PPUSH
12943: LD_STRING DH-USRC-1
12945: PPUSH
12946: CALL_OW 88
// if IsOk ( Markov ) then
12950: LD_EXP 20
12954: PPUSH
12955: CALL_OW 302
12959: IFFALSE 12975
// Say ( Markov , DMar-USRC-2 ) else
12961: LD_EXP 20
12965: PPUSH
12966: LD_STRING DMar-USRC-2
12968: PPUSH
12969: CALL_OW 88
12973: GO 13032
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12975: LD_EXP 25
12979: PPUSH
12980: LD_INT 26
12982: PUSH
12983: LD_INT 1
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 72
12994: PPUSH
12995: LD_STRING DArm-USRC-a-2
12997: PPUSH
12998: CALL 187 0 2
13002: NOT
13003: IFFALSE 13032
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13005: LD_EXP 25
13009: PPUSH
13010: LD_INT 26
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 72
13024: PPUSH
13025: LD_STRING DArf-USRC-a-2
13027: PPUSH
13028: CALL 187 0 2
// DialogueOff ;
13032: CALL_OW 7
// wait ( 0 0$10 ) ;
13036: LD_INT 350
13038: PPUSH
13039: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13043: LD_EXP 13
13047: PPUSH
13048: LD_STRING DH-USRC-3
13050: PPUSH
13051: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13055: LD_INT 35
13057: PPUSH
13058: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13062: LD_INT 2
13064: PPUSH
13065: LD_INT 22
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 30
13077: PUSH
13078: LD_INT 36
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PUSH
13094: LD_INT 1
13096: ARRAY
13097: PPUSH
13098: CALL_OW 292
13102: IFFALSE 13055
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13104: LD_INT 22
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 30
13116: PUSH
13117: LD_INT 36
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 69
13132: PUSH
13133: LD_INT 1
13135: ARRAY
13136: PPUSH
13137: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13141: LD_EXP 13
13145: PPUSH
13146: LD_STRING DH-USRCFound-1
13148: PPUSH
13149: CALL_OW 88
// end ;
13153: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13154: LD_EXP 18
13158: PPUSH
13159: CALL_OW 256
13163: PUSH
13164: LD_INT 3
13166: LESS
13167: IFFALSE 13204
13169: GO 13171
13171: DISABLE
// begin DialogueOn ;
13172: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13176: LD_EXP 18
13180: PPUSH
13181: LD_STRING DK-Dead-1
13183: PPUSH
13184: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13188: LD_EXP 18
13192: PPUSH
13193: LD_STRING DK-Dead-2
13195: PPUSH
13196: CALL_OW 91
// DialogueOff ;
13200: CALL_OW 7
// end ;
13204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13205: LD_INT 22
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: LD_INT 35
13220: PUSH
13221: LD_INT 28
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 34
13230: PUSH
13231: LD_INT 28
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PPUSH
13247: CALL_OW 69
13251: IFFALSE 13264
13253: GO 13255
13255: DISABLE
// hasRockets := true ;
13256: LD_ADDR_EXP 9
13260: PUSH
13261: LD_INT 1
13263: ST_TO_ADDR
13264: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13265: LD_EXP 8
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: NOT
13285: AND
13286: IFFALSE 13914
13288: GO 13290
13290: DISABLE
// begin DialogueOn ;
13291: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13295: LD_EXP 13
13299: PPUSH
13300: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13304: LD_EXP 13
13308: PPUSH
13309: LD_STRING DH-End-1
13311: PPUSH
13312: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13316: LD_EXP 21
13320: PPUSH
13321: LD_STRING DShar-End-2
13323: PPUSH
13324: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13328: LD_EXP 18
13332: PPUSH
13333: LD_STRING DK-End-3
13335: PPUSH
13336: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13340: LD_EXP 13
13344: PPUSH
13345: LD_STRING DH-End-4
13347: PPUSH
13348: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13352: LD_EXP 21
13356: PPUSH
13357: LD_STRING DShar-End-5
13359: PPUSH
13360: CALL_OW 94
// if IsOk ( Markov ) then
13364: LD_EXP 20
13368: PPUSH
13369: CALL_OW 302
13373: IFFALSE 13387
// Say ( Kaia , DK-End-6 ) ;
13375: LD_EXP 18
13379: PPUSH
13380: LD_STRING DK-End-6
13382: PPUSH
13383: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13387: LD_EXP 18
13391: PPUSH
13392: LD_STRING DK-End-7
13394: PPUSH
13395: CALL_OW 88
// if IsOk ( Kaia ) then
13399: LD_EXP 18
13403: PPUSH
13404: CALL_OW 302
13408: IFFALSE 13446
// begin Say ( Givi , DG-End-8 ) ;
13410: LD_EXP 14
13414: PPUSH
13415: LD_STRING DG-End-8
13417: PPUSH
13418: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13422: LD_EXP 14
13426: PPUSH
13427: LD_STRING DG-End-9
13429: PPUSH
13430: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13434: LD_EXP 13
13438: PPUSH
13439: LD_STRING DH-End-10
13441: PPUSH
13442: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13446: LD_EXP 13
13450: PPUSH
13451: LD_STRING DH-End-11
13453: PPUSH
13454: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13458: LD_INT 7
13460: PPUSH
13461: LD_INT 2
13463: PPUSH
13464: CALL_OW 321
13468: PUSH
13469: LD_INT 2
13471: EQUAL
13472: IFFALSE 13486
// AddMedal ( med1 , 1 ) else
13474: LD_STRING med1
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 101
13484: GO 13497
// AddMedal ( med1 , - 1 ) ;
13486: LD_STRING med1
13488: PPUSH
13489: LD_INT 1
13491: NEG
13492: PPUSH
13493: CALL_OW 101
// if hasRockets then
13497: LD_EXP 9
13501: IFFALSE 13515
// AddMedal ( med2 , 1 ) else
13503: LD_STRING med2
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 101
13513: GO 13526
// AddMedal ( med2 , - 1 ) ;
13515: LD_STRING med2
13517: PPUSH
13518: LD_INT 1
13520: NEG
13521: PPUSH
13522: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13526: LD_OWVAR 1
13530: PUSH
13531: LD_INT 105000
13533: PUSH
13534: LD_INT 94500
13536: PUSH
13537: LD_INT 84000
13539: PUSH
13540: LD_INT 73500
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_OWVAR 67
13553: ARRAY
13554: LESS
13555: IFFALSE 13569
// AddMedal ( med3 , 1 ) else
13557: LD_STRING med3
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 101
13567: GO 13580
// AddMedal ( med3 , - 1 ) ;
13569: LD_STRING med3
13571: PPUSH
13572: LD_INT 1
13574: NEG
13575: PPUSH
13576: CALL_OW 101
// GiveMedals ( MAIN ) ;
13580: LD_STRING MAIN
13582: PPUSH
13583: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13587: LD_INT 22
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 23
13599: PUSH
13600: LD_INT 2
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 21
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: PPUSH
13627: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13631: LD_EXP 28
13635: PPUSH
13636: LD_STRING 07_UsCommander
13638: PPUSH
13639: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13643: LD_INT 22
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 23
13655: PUSH
13656: LD_INT 1
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 21
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: PUSH
13683: LD_EXP 28
13687: DIFF
13688: PPUSH
13689: LD_STRING 07_Americans
13691: PPUSH
13692: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13696: LD_EXP 13
13700: PPUSH
13701: LD_STRING 07_Heike
13703: PPUSH
13704: CALL_OW 38
// if Aviradze then
13708: LD_EXP 24
13712: IFFALSE 13726
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13714: LD_EXP 24
13718: PPUSH
13719: LD_STRING 07_Aviradze
13721: PPUSH
13722: CALL_OW 38
// if Ibrahim then
13726: LD_EXP 16
13730: IFFALSE 13744
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13732: LD_EXP 16
13736: PPUSH
13737: LD_STRING 07_Ibrahim
13739: PPUSH
13740: CALL_OW 38
// if Kamil then
13744: LD_EXP 17
13748: IFFALSE 13762
// SaveCharacters ( Kamil , 07_Kamil ) ;
13750: LD_EXP 17
13754: PPUSH
13755: LD_STRING 07_Kamil
13757: PPUSH
13758: CALL_OW 38
// if Sophia then
13762: LD_EXP 19
13766: IFFALSE 13780
// SaveCharacters ( Sophia , 07_Sophia ) ;
13768: LD_EXP 19
13772: PPUSH
13773: LD_STRING 07_Sophia
13775: PPUSH
13776: CALL_OW 38
// if Kaia then
13780: LD_EXP 18
13784: IFFALSE 13798
// SaveCharacters ( Kaia , 07_Kaia ) ;
13786: LD_EXP 18
13790: PPUSH
13791: LD_STRING 07_Kaia
13793: PPUSH
13794: CALL_OW 38
// if Givi then
13798: LD_EXP 14
13802: IFFALSE 13816
// SaveCharacters ( Givi , 07_Givi ) ;
13804: LD_EXP 14
13808: PPUSH
13809: LD_STRING 07_Givi
13811: PPUSH
13812: CALL_OW 38
// if Mike then
13816: LD_EXP 15
13820: IFFALSE 13834
// SaveCharacters ( Mike , 07_Mike ) ;
13822: LD_EXP 15
13826: PPUSH
13827: LD_STRING 07_Mike
13829: PPUSH
13830: CALL_OW 38
// if Markov then
13834: LD_EXP 20
13838: IFFALSE 13852
// SaveCharacters ( Markov , 07_Markov ) ;
13840: LD_EXP 20
13844: PPUSH
13845: LD_STRING 07_Markov
13847: PPUSH
13848: CALL_OW 38
// if Kurt then
13852: LD_EXP 23
13856: IFFALSE 13870
// SaveCharacters ( Kurt , 07_Kurt ) ;
13858: LD_EXP 23
13862: PPUSH
13863: LD_STRING 07_Kurt
13865: PPUSH
13866: CALL_OW 38
// if Olaf then
13870: LD_EXP 22
13874: IFFALSE 13888
// SaveCharacters ( Olaf , 07_Olaf ) ;
13876: LD_EXP 22
13880: PPUSH
13881: LD_STRING 07_Olaf
13883: PPUSH
13884: CALL_OW 38
// if heikeSecondSquad then
13888: LD_EXP 25
13892: IFFALSE 13906
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13894: LD_EXP 25
13898: PPUSH
13899: LD_STRING 07_others
13901: PPUSH
13902: CALL_OW 38
// YouWin ;
13906: CALL_OW 103
// DialogueOff ;
13910: CALL_OW 7
// end ; end_of_file
13914: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13915: LD_INT 7
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 287
13925: PUSH
13926: LD_INT 300
13928: PUSH
13929: LD_INT 150
13931: PUSH
13932: LD_INT 100
13934: PUSH
13935: LD_INT 80
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: PUSH
13944: LD_OWVAR 67
13948: ARRAY
13949: LESS
13950: IFFALSE 13977
13952: GO 13954
13954: DISABLE
// begin enable ;
13955: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13956: LD_INT 1
13958: PPUSH
13959: LD_INT 5
13961: PPUSH
13962: CALL_OW 12
13966: PPUSH
13967: LD_INT 7
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 55
// end ;
13977: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13978: LD_INT 8
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: CALL_OW 287
13988: PUSH
13989: LD_INT 300
13991: PUSH
13992: LD_INT 250
13994: PUSH
13995: LD_INT 200
13997: PUSH
13998: LD_INT 180
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: LD_OWVAR 67
14011: ARRAY
14012: LESS
14013: IFFALSE 14040
14015: GO 14017
14017: DISABLE
// begin enable ;
14018: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14019: LD_INT 1
14021: PPUSH
14022: LD_INT 5
14024: PPUSH
14025: CALL_OW 12
14029: PPUSH
14030: LD_INT 8
14032: PPUSH
14033: LD_INT 1
14035: PPUSH
14036: CALL_OW 55
// end ;
14040: END
// every 0 0$40 trigger tick < 4 4$10 do
14041: LD_OWVAR 1
14045: PUSH
14046: LD_INT 8750
14048: LESS
14049: IFFALSE 14082
14051: GO 14053
14053: DISABLE
// begin enable ;
14054: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14055: LD_INT 1
14057: PPUSH
14058: LD_INT 5
14060: PPUSH
14061: CALL_OW 12
14065: PPUSH
14066: LD_INT 130
14068: PPUSH
14069: LD_INT 18
14071: PPUSH
14072: LD_INT 12
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: CALL_OW 56
// end ; end_of_file
14082: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14083: LD_INT 0
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
// uc_side := 3 ;
14090: LD_ADDR_OWVAR 20
14094: PUSH
14095: LD_INT 3
14097: ST_TO_ADDR
// uc_nation := 3 ;
14098: LD_ADDR_OWVAR 21
14102: PUSH
14103: LD_INT 3
14105: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14106: LD_ADDR_VAR 0 3
14110: PUSH
14111: LD_INT 184
14113: PUSH
14114: LD_INT 144
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 191
14127: PUSH
14128: LD_INT 147
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 202
14141: PUSH
14142: LD_INT 151
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 210
14155: PUSH
14156: LD_INT 152
14158: PUSH
14159: LD_INT 4
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// for i := 1 to 4 do
14173: LD_ADDR_VAR 0 2
14177: PUSH
14178: DOUBLE
14179: LD_INT 1
14181: DEC
14182: ST_TO_ADDR
14183: LD_INT 4
14185: PUSH
14186: FOR_TO
14187: IFFALSE 14356
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14189: LD_INT 24
14191: PPUSH
14192: LD_INT 1
14194: PPUSH
14195: LD_INT 1
14197: PPUSH
14198: LD_INT 43
14200: PUSH
14201: LD_INT 44
14203: PUSH
14204: LD_INT 46
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_VAR 0 2
14216: PUSH
14217: LD_INT 3
14219: MOD
14220: PUSH
14221: LD_INT 1
14223: PLUS
14224: ARRAY
14225: PPUSH
14226: LD_INT 40
14228: PPUSH
14229: CALL 20272 0 5
// veh := CreateVehicle ;
14233: LD_ADDR_VAR 0 5
14237: PUSH
14238: CALL_OW 45
14242: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14243: LD_VAR 0 5
14247: PPUSH
14248: LD_VAR 0 3
14252: PUSH
14253: LD_VAR 0 2
14257: ARRAY
14258: PUSH
14259: LD_INT 3
14261: ARRAY
14262: PPUSH
14263: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14267: LD_VAR 0 5
14271: PPUSH
14272: LD_VAR 0 3
14276: PUSH
14277: LD_VAR 0 2
14281: ARRAY
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: PPUSH
14287: LD_VAR 0 3
14291: PUSH
14292: LD_VAR 0 2
14296: ARRAY
14297: PUSH
14298: LD_INT 2
14300: ARRAY
14301: PPUSH
14302: LD_INT 0
14304: PPUSH
14305: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14309: LD_INT 0
14311: PPUSH
14312: LD_INT 6
14314: PUSH
14315: LD_INT 7
14317: PUSH
14318: LD_INT 8
14320: PUSH
14321: LD_INT 8
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: PUSH
14330: LD_OWVAR 67
14334: ARRAY
14335: PPUSH
14336: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14340: CALL_OW 44
14344: PPUSH
14345: LD_VAR 0 5
14349: PPUSH
14350: CALL_OW 52
// end ;
14354: GO 14186
14356: POP
14357: POP
// for i := 1 to 4 do
14358: LD_ADDR_VAR 0 2
14362: PUSH
14363: DOUBLE
14364: LD_INT 1
14366: DEC
14367: ST_TO_ADDR
14368: LD_INT 4
14370: PUSH
14371: FOR_TO
14372: IFFALSE 14438
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14374: LD_INT 0
14376: PPUSH
14377: LD_INT 6
14379: PUSH
14380: LD_INT 7
14382: PUSH
14383: LD_INT 8
14385: PUSH
14386: LD_INT 8
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_OWVAR 67
14399: ARRAY
14400: PPUSH
14401: CALL_OW 381
// un := CreateHuman ;
14405: LD_ADDR_VAR 0 4
14409: PUSH
14410: CALL_OW 44
14414: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14415: LD_VAR 0 4
14419: PPUSH
14420: LD_INT 185
14422: PPUSH
14423: LD_INT 145
14425: PPUSH
14426: LD_INT 6
14428: PPUSH
14429: LD_INT 0
14431: PPUSH
14432: CALL_OW 50
// end ;
14436: GO 14371
14438: POP
14439: POP
// end ;
14440: LD_VAR 0 1
14444: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14445: LD_INT 0
14447: PPUSH
14448: PPUSH
14449: PPUSH
// uc_side := 3 ;
14450: LD_ADDR_OWVAR 20
14454: PUSH
14455: LD_INT 3
14457: ST_TO_ADDR
// if Difficulty > 1 then
14458: LD_OWVAR 67
14462: PUSH
14463: LD_INT 1
14465: GREATER
14466: IFFALSE 14628
// begin uc_nation := 0 ;
14468: LD_ADDR_OWVAR 21
14472: PUSH
14473: LD_INT 0
14475: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14476: LD_ADDR_VAR 0 2
14480: PUSH
14481: DOUBLE
14482: LD_INT 1
14484: DEC
14485: ST_TO_ADDR
14486: LD_INT 4
14488: PUSH
14489: LD_INT 5
14491: PUSH
14492: LD_INT 6
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: LD_OWVAR 67
14504: PUSH
14505: LD_INT 1
14507: PLUS
14508: ARRAY
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14626
// begin hc_class := class_apeman_soldier ;
14513: LD_ADDR_OWVAR 28
14517: PUSH
14518: LD_INT 15
14520: ST_TO_ADDR
// hc_gallery :=  ;
14521: LD_ADDR_OWVAR 33
14525: PUSH
14526: LD_STRING 
14528: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14529: LD_ADDR_OWVAR 26
14533: PUSH
14534: LD_STRING Treci
14536: PUSH
14537: LD_STRING Ivan
14539: PUSH
14540: LD_STRING Yaromir
14542: PUSH
14543: LD_STRING Nadzieia
14545: PUSH
14546: LD_STRING Krasna
14548: PUSH
14549: LD_STRING Piaty
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_INT 6
14565: PPUSH
14566: CALL_OW 12
14570: ARRAY
14571: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14572: LD_ADDR_OWVAR 31
14576: PUSH
14577: LD_INT 5
14579: PUSH
14580: LD_INT 0
14582: PUSH
14583: LD_INT 0
14585: PUSH
14586: LD_INT 0
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: ST_TO_ADDR
// hc_sex := sex_male ;
14595: LD_ADDR_OWVAR 27
14599: PUSH
14600: LD_INT 1
14602: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14603: CALL_OW 44
14607: PPUSH
14608: LD_INT 178
14610: PPUSH
14611: LD_INT 148
14613: PPUSH
14614: LD_INT 6
14616: PPUSH
14617: LD_INT 0
14619: PPUSH
14620: CALL_OW 50
// end ;
14624: GO 14510
14626: POP
14627: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: DOUBLE
14634: LD_INT 1
14636: DEC
14637: ST_TO_ADDR
14638: LD_INT 4
14640: PUSH
14641: LD_INT 6
14643: PUSH
14644: LD_INT 7
14646: PUSH
14647: LD_INT 9
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: LD_OWVAR 67
14660: ARRAY
14661: PUSH
14662: FOR_TO
14663: IFFALSE 14830
// begin uc_nation := 3 ;
14665: LD_ADDR_OWVAR 21
14669: PUSH
14670: LD_INT 3
14672: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14673: LD_INT 22
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: LD_INT 1
14681: PPUSH
14682: LD_INT 45
14684: PUSH
14685: LD_INT 43
14687: PUSH
14688: LD_INT 44
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_VAR 0 2
14700: PUSH
14701: LD_INT 3
14703: MOD
14704: PUSH
14705: LD_INT 1
14707: PLUS
14708: ARRAY
14709: PPUSH
14710: LD_INT 44
14712: PPUSH
14713: CALL 20272 0 5
// veh := CreateVehicle ;
14717: LD_ADDR_VAR 0 3
14721: PUSH
14722: CALL_OW 45
14726: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14727: LD_VAR 0 3
14731: PPUSH
14732: LD_INT 4
14734: PPUSH
14735: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: LD_INT 0
14749: PPUSH
14750: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14754: LD_INT 0
14756: PPUSH
14757: LD_INT 6
14759: PUSH
14760: LD_INT 7
14762: PUSH
14763: LD_INT 8
14765: PUSH
14766: LD_INT 8
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: PUSH
14775: LD_OWVAR 67
14779: ARRAY
14780: PPUSH
14781: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14785: CALL_OW 44
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 178
14806: PUSH
14807: LD_INT 137
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: PPUSH
14817: CALL 55310 0 2
// wait ( 0 0$2 ) ;
14821: LD_INT 70
14823: PPUSH
14824: CALL_OW 67
// end ;
14828: GO 14662
14830: POP
14831: POP
// end ;
14832: LD_VAR 0 1
14836: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14837: LD_INT 22
14839: PUSH
14840: LD_INT 3
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 32
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 69
14865: IFFALSE 14953
14867: GO 14869
14869: DISABLE
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// begin enable ;
14874: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: LD_INT 22
14882: PUSH
14883: LD_INT 3
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 32
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PPUSH
14904: CALL_OW 69
14908: ST_TO_ADDR
// for i in tmp do
14909: LD_ADDR_VAR 0 1
14913: PUSH
14914: LD_VAR 0 2
14918: PUSH
14919: FOR_IN
14920: IFFALSE 14951
// if GetFuel ( i ) < 3 then
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 261
14931: PUSH
14932: LD_INT 3
14934: LESS
14935: IFFALSE 14949
// SetFuel ( i , 3 ) ;
14937: LD_VAR 0 1
14941: PPUSH
14942: LD_INT 3
14944: PPUSH
14945: CALL_OW 240
14949: GO 14919
14951: POP
14952: POP
// end ;
14953: PPOPN 2
14955: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14956: LD_EXP 8
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_INT 3
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 21
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: AND
14990: IFFALSE 15254
14992: GO 14994
14994: DISABLE
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
// begin enable ;
15000: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: LD_INT 22
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 3
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 3
15028: PUSH
15029: LD_INT 55
15031: PUSH
15032: EMPTY
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: ST_TO_ADDR
// if mech then
15049: LD_VAR 0 2
15053: IFFALSE 15123
// for i in mech do
15055: LD_ADDR_VAR 0 1
15059: PUSH
15060: LD_VAR 0 2
15064: PUSH
15065: FOR_IN
15066: IFFALSE 15121
// begin if IsInArea ( i , escapeArea ) then
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_INT 13
15075: PPUSH
15076: CALL_OW 308
15080: IFFALSE 15093
// RemoveUnit ( i ) else
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL_OW 64
15091: GO 15119
// if IsOk ( i ) then
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 302
15102: IFFALSE 15119
// ComMoveXY ( i , 196 , 155 ) ;
15104: LD_VAR 0 1
15108: PPUSH
15109: LD_INT 196
15111: PPUSH
15112: LD_INT 155
15114: PPUSH
15115: CALL_OW 111
// end ;
15119: GO 15065
15121: POP
15122: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15123: LD_ADDR_VAR 0 3
15127: PUSH
15128: LD_INT 22
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: LD_INT 25
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 25
15153: PUSH
15154: LD_INT 15
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 21
15163: PUSH
15164: LD_INT 2
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 50
15179: PUSH
15180: EMPTY
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if tmp then
15193: LD_VAR 0 3
15197: IFFALSE 15254
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15199: LD_VAR 0 3
15203: PPUSH
15204: LD_INT 171
15206: PUSH
15207: LD_INT 106
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 145
15216: PUSH
15217: LD_INT 69
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 132
15226: PUSH
15227: LD_INT 38
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 126
15236: PUSH
15237: LD_INT 15
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL 55310 0 2
// end ; end_of_file
15254: PPOPN 3
15256: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
// if exist_mode then
15261: LD_VAR 0 2
15265: IFFALSE 15290
// unit := CreateCharacter ( prefix & ident ) else
15267: LD_ADDR_VAR 0 5
15271: PUSH
15272: LD_VAR 0 3
15276: PUSH
15277: LD_VAR 0 1
15281: STR
15282: PPUSH
15283: CALL_OW 34
15287: ST_TO_ADDR
15288: GO 15305
// unit := NewCharacter ( ident ) ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 25
15304: ST_TO_ADDR
// result := unit ;
15305: LD_ADDR_VAR 0 4
15309: PUSH
15310: LD_VAR 0 5
15314: ST_TO_ADDR
// end ;
15315: LD_VAR 0 4
15319: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// if not side or not nation then
15324: LD_VAR 0 1
15328: NOT
15329: PUSH
15330: LD_VAR 0 2
15334: NOT
15335: OR
15336: IFFALSE 15340
// exit ;
15338: GO 16108
// case nation of nation_american :
15340: LD_VAR 0 2
15344: PUSH
15345: LD_INT 1
15347: DOUBLE
15348: EQUAL
15349: IFTRUE 15353
15351: GO 15567
15353: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15354: LD_ADDR_VAR 0 4
15358: PUSH
15359: LD_INT 35
15361: PUSH
15362: LD_INT 45
15364: PUSH
15365: LD_INT 46
15367: PUSH
15368: LD_INT 47
15370: PUSH
15371: LD_INT 82
15373: PUSH
15374: LD_INT 83
15376: PUSH
15377: LD_INT 84
15379: PUSH
15380: LD_INT 85
15382: PUSH
15383: LD_INT 86
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 6
15394: PUSH
15395: LD_INT 15
15397: PUSH
15398: LD_INT 16
15400: PUSH
15401: LD_INT 7
15403: PUSH
15404: LD_INT 12
15406: PUSH
15407: LD_INT 13
15409: PUSH
15410: LD_INT 10
15412: PUSH
15413: LD_INT 14
15415: PUSH
15416: LD_INT 20
15418: PUSH
15419: LD_INT 21
15421: PUSH
15422: LD_INT 22
15424: PUSH
15425: LD_INT 25
15427: PUSH
15428: LD_INT 32
15430: PUSH
15431: LD_INT 27
15433: PUSH
15434: LD_INT 36
15436: PUSH
15437: LD_INT 69
15439: PUSH
15440: LD_INT 39
15442: PUSH
15443: LD_INT 34
15445: PUSH
15446: LD_INT 40
15448: PUSH
15449: LD_INT 48
15451: PUSH
15452: LD_INT 49
15454: PUSH
15455: LD_INT 50
15457: PUSH
15458: LD_INT 51
15460: PUSH
15461: LD_INT 52
15463: PUSH
15464: LD_INT 53
15466: PUSH
15467: LD_INT 54
15469: PUSH
15470: LD_INT 55
15472: PUSH
15473: LD_INT 56
15475: PUSH
15476: LD_INT 57
15478: PUSH
15479: LD_INT 58
15481: PUSH
15482: LD_INT 59
15484: PUSH
15485: LD_INT 60
15487: PUSH
15488: LD_INT 61
15490: PUSH
15491: LD_INT 62
15493: PUSH
15494: LD_INT 80
15496: PUSH
15497: LD_INT 82
15499: PUSH
15500: LD_INT 83
15502: PUSH
15503: LD_INT 84
15505: PUSH
15506: LD_INT 85
15508: PUSH
15509: LD_INT 86
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: ST_TO_ADDR
15565: GO 16032
15567: LD_INT 2
15569: DOUBLE
15570: EQUAL
15571: IFTRUE 15575
15573: GO 15801
15575: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15576: LD_ADDR_VAR 0 4
15580: PUSH
15581: LD_INT 35
15583: PUSH
15584: LD_INT 45
15586: PUSH
15587: LD_INT 46
15589: PUSH
15590: LD_INT 47
15592: PUSH
15593: LD_INT 82
15595: PUSH
15596: LD_INT 83
15598: PUSH
15599: LD_INT 84
15601: PUSH
15602: LD_INT 85
15604: PUSH
15605: LD_INT 87
15607: PUSH
15608: LD_INT 70
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: LD_INT 11
15616: PUSH
15617: LD_INT 3
15619: PUSH
15620: LD_INT 4
15622: PUSH
15623: LD_INT 5
15625: PUSH
15626: LD_INT 6
15628: PUSH
15629: LD_INT 15
15631: PUSH
15632: LD_INT 18
15634: PUSH
15635: LD_INT 7
15637: PUSH
15638: LD_INT 17
15640: PUSH
15641: LD_INT 8
15643: PUSH
15644: LD_INT 20
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 22
15652: PUSH
15653: LD_INT 72
15655: PUSH
15656: LD_INT 26
15658: PUSH
15659: LD_INT 69
15661: PUSH
15662: LD_INT 39
15664: PUSH
15665: LD_INT 40
15667: PUSH
15668: LD_INT 41
15670: PUSH
15671: LD_INT 42
15673: PUSH
15674: LD_INT 43
15676: PUSH
15677: LD_INT 48
15679: PUSH
15680: LD_INT 49
15682: PUSH
15683: LD_INT 50
15685: PUSH
15686: LD_INT 51
15688: PUSH
15689: LD_INT 52
15691: PUSH
15692: LD_INT 53
15694: PUSH
15695: LD_INT 54
15697: PUSH
15698: LD_INT 55
15700: PUSH
15701: LD_INT 56
15703: PUSH
15704: LD_INT 60
15706: PUSH
15707: LD_INT 61
15709: PUSH
15710: LD_INT 62
15712: PUSH
15713: LD_INT 66
15715: PUSH
15716: LD_INT 67
15718: PUSH
15719: LD_INT 68
15721: PUSH
15722: LD_INT 81
15724: PUSH
15725: LD_INT 82
15727: PUSH
15728: LD_INT 83
15730: PUSH
15731: LD_INT 84
15733: PUSH
15734: LD_INT 85
15736: PUSH
15737: LD_INT 87
15739: PUSH
15740: LD_INT 88
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: ST_TO_ADDR
15799: GO 16032
15801: LD_INT 3
15803: DOUBLE
15804: EQUAL
15805: IFTRUE 15809
15807: GO 16031
15809: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15810: LD_ADDR_VAR 0 4
15814: PUSH
15815: LD_INT 46
15817: PUSH
15818: LD_INT 47
15820: PUSH
15821: LD_INT 1
15823: PUSH
15824: LD_INT 2
15826: PUSH
15827: LD_INT 82
15829: PUSH
15830: LD_INT 83
15832: PUSH
15833: LD_INT 84
15835: PUSH
15836: LD_INT 85
15838: PUSH
15839: LD_INT 86
15841: PUSH
15842: LD_INT 11
15844: PUSH
15845: LD_INT 9
15847: PUSH
15848: LD_INT 20
15850: PUSH
15851: LD_INT 19
15853: PUSH
15854: LD_INT 21
15856: PUSH
15857: LD_INT 24
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: LD_INT 28
15868: PUSH
15869: LD_INT 29
15871: PUSH
15872: LD_INT 30
15874: PUSH
15875: LD_INT 31
15877: PUSH
15878: LD_INT 37
15880: PUSH
15881: LD_INT 38
15883: PUSH
15884: LD_INT 32
15886: PUSH
15887: LD_INT 27
15889: PUSH
15890: LD_INT 33
15892: PUSH
15893: LD_INT 69
15895: PUSH
15896: LD_INT 39
15898: PUSH
15899: LD_INT 34
15901: PUSH
15902: LD_INT 40
15904: PUSH
15905: LD_INT 71
15907: PUSH
15908: LD_INT 23
15910: PUSH
15911: LD_INT 44
15913: PUSH
15914: LD_INT 48
15916: PUSH
15917: LD_INT 49
15919: PUSH
15920: LD_INT 50
15922: PUSH
15923: LD_INT 51
15925: PUSH
15926: LD_INT 52
15928: PUSH
15929: LD_INT 53
15931: PUSH
15932: LD_INT 54
15934: PUSH
15935: LD_INT 55
15937: PUSH
15938: LD_INT 56
15940: PUSH
15941: LD_INT 57
15943: PUSH
15944: LD_INT 58
15946: PUSH
15947: LD_INT 59
15949: PUSH
15950: LD_INT 63
15952: PUSH
15953: LD_INT 64
15955: PUSH
15956: LD_INT 65
15958: PUSH
15959: LD_INT 82
15961: PUSH
15962: LD_INT 83
15964: PUSH
15965: LD_INT 84
15967: PUSH
15968: LD_INT 85
15970: PUSH
15971: LD_INT 86
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: ST_TO_ADDR
16029: GO 16032
16031: POP
// if state > - 1 and state < 3 then
16032: LD_VAR 0 3
16036: PUSH
16037: LD_INT 1
16039: NEG
16040: GREATER
16041: PUSH
16042: LD_VAR 0 3
16046: PUSH
16047: LD_INT 3
16049: LESS
16050: AND
16051: IFFALSE 16108
// for i in result do
16053: LD_ADDR_VAR 0 5
16057: PUSH
16058: LD_VAR 0 4
16062: PUSH
16063: FOR_IN
16064: IFFALSE 16106
// if GetTech ( i , side ) <> state then
16066: LD_VAR 0 5
16070: PPUSH
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 321
16080: PUSH
16081: LD_VAR 0 3
16085: NONEQUAL
16086: IFFALSE 16104
// result := result diff i ;
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_VAR 0 4
16097: PUSH
16098: LD_VAR 0 5
16102: DIFF
16103: ST_TO_ADDR
16104: GO 16063
16106: POP
16107: POP
// end ;
16108: LD_VAR 0 4
16112: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16113: LD_INT 0
16115: PPUSH
16116: PPUSH
16117: PPUSH
// result := true ;
16118: LD_ADDR_VAR 0 3
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16126: LD_ADDR_VAR 0 5
16130: PUSH
16131: LD_VAR 0 2
16135: PPUSH
16136: CALL_OW 480
16140: ST_TO_ADDR
// if not tmp then
16141: LD_VAR 0 5
16145: NOT
16146: IFFALSE 16150
// exit ;
16148: GO 16199
// for i in tmp do
16150: LD_ADDR_VAR 0 4
16154: PUSH
16155: LD_VAR 0 5
16159: PUSH
16160: FOR_IN
16161: IFFALSE 16197
// if GetTech ( i , side ) <> state_researched then
16163: LD_VAR 0 4
16167: PPUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 321
16177: PUSH
16178: LD_INT 2
16180: NONEQUAL
16181: IFFALSE 16195
// begin result := false ;
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: LD_INT 0
16190: ST_TO_ADDR
// exit ;
16191: POP
16192: POP
16193: GO 16199
// end ;
16195: GO 16160
16197: POP
16198: POP
// end ;
16199: LD_VAR 0 3
16203: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16204: LD_INT 0
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16219: LD_VAR 0 1
16223: NOT
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 257
16234: PUSH
16235: LD_INT 9
16237: NONEQUAL
16238: OR
16239: IFFALSE 16243
// exit ;
16241: GO 16816
// side := GetSide ( unit ) ;
16243: LD_ADDR_VAR 0 9
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 255
16257: ST_TO_ADDR
// tech_space := tech_spacanom ;
16258: LD_ADDR_VAR 0 12
16262: PUSH
16263: LD_INT 29
16265: ST_TO_ADDR
// tech_time := tech_taurad ;
16266: LD_ADDR_VAR 0 13
16270: PUSH
16271: LD_INT 28
16273: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16274: LD_ADDR_VAR 0 11
16278: PUSH
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 310
16288: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16289: LD_VAR 0 11
16293: PPUSH
16294: CALL_OW 247
16298: PUSH
16299: LD_INT 2
16301: EQUAL
16302: IFFALSE 16306
// exit ;
16304: GO 16816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16306: LD_ADDR_VAR 0 8
16310: PUSH
16311: LD_INT 81
16313: PUSH
16314: LD_VAR 0 9
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 3
16325: PUSH
16326: LD_INT 21
16328: PUSH
16329: LD_INT 3
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if not tmp then
16349: LD_VAR 0 8
16353: NOT
16354: IFFALSE 16358
// exit ;
16356: GO 16816
// if in_unit then
16358: LD_VAR 0 11
16362: IFFALSE 16386
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16364: LD_ADDR_VAR 0 10
16368: PUSH
16369: LD_VAR 0 8
16373: PPUSH
16374: LD_VAR 0 11
16378: PPUSH
16379: CALL_OW 74
16383: ST_TO_ADDR
16384: GO 16406
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16386: LD_ADDR_VAR 0 10
16390: PUSH
16391: LD_VAR 0 8
16395: PPUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 74
16405: ST_TO_ADDR
// if not enemy then
16406: LD_VAR 0 10
16410: NOT
16411: IFFALSE 16415
// exit ;
16413: GO 16816
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16415: LD_VAR 0 11
16419: PUSH
16420: LD_VAR 0 11
16424: PPUSH
16425: LD_VAR 0 10
16429: PPUSH
16430: CALL_OW 296
16434: PUSH
16435: LD_INT 13
16437: GREATER
16438: AND
16439: PUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_VAR 0 10
16449: PPUSH
16450: CALL_OW 296
16454: PUSH
16455: LD_INT 12
16457: GREATER
16458: OR
16459: IFFALSE 16463
// exit ;
16461: GO 16816
// missile := [ 1 ] ;
16463: LD_ADDR_VAR 0 14
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: EMPTY
16472: LIST
16473: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16474: LD_VAR 0 9
16478: PPUSH
16479: LD_VAR 0 12
16483: PPUSH
16484: CALL_OW 325
16488: IFFALSE 16517
// missile := Replace ( missile , missile + 1 , 2 ) ;
16490: LD_ADDR_VAR 0 14
16494: PUSH
16495: LD_VAR 0 14
16499: PPUSH
16500: LD_VAR 0 14
16504: PUSH
16505: LD_INT 1
16507: PLUS
16508: PPUSH
16509: LD_INT 2
16511: PPUSH
16512: CALL_OW 1
16516: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16517: LD_VAR 0 9
16521: PPUSH
16522: LD_VAR 0 13
16526: PPUSH
16527: CALL_OW 325
16531: PUSH
16532: LD_VAR 0 10
16536: PPUSH
16537: CALL_OW 255
16541: PPUSH
16542: LD_VAR 0 13
16546: PPUSH
16547: CALL_OW 325
16551: NOT
16552: AND
16553: IFFALSE 16582
// missile := Replace ( missile , missile + 1 , 3 ) ;
16555: LD_ADDR_VAR 0 14
16559: PUSH
16560: LD_VAR 0 14
16564: PPUSH
16565: LD_VAR 0 14
16569: PUSH
16570: LD_INT 1
16572: PLUS
16573: PPUSH
16574: LD_INT 3
16576: PPUSH
16577: CALL_OW 1
16581: ST_TO_ADDR
// if missile < 2 then
16582: LD_VAR 0 14
16586: PUSH
16587: LD_INT 2
16589: LESS
16590: IFFALSE 16594
// exit ;
16592: GO 16816
// x := GetX ( enemy ) ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_VAR 0 10
16603: PPUSH
16604: CALL_OW 250
16608: ST_TO_ADDR
// y := GetY ( enemy ) ;
16609: LD_ADDR_VAR 0 5
16613: PUSH
16614: LD_VAR 0 10
16618: PPUSH
16619: CALL_OW 251
16623: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16624: LD_ADDR_VAR 0 6
16628: PUSH
16629: LD_VAR 0 4
16633: PUSH
16634: LD_INT 1
16636: NEG
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: CALL_OW 12
16645: PLUS
16646: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16647: LD_ADDR_VAR 0 7
16651: PUSH
16652: LD_VAR 0 5
16656: PUSH
16657: LD_INT 1
16659: NEG
16660: PPUSH
16661: LD_INT 1
16663: PPUSH
16664: CALL_OW 12
16668: PLUS
16669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16670: LD_VAR 0 6
16674: PPUSH
16675: LD_VAR 0 7
16679: PPUSH
16680: CALL_OW 488
16684: NOT
16685: IFFALSE 16707
// begin _x := x ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_VAR 0 4
16696: ST_TO_ADDR
// _y := y ;
16697: LD_ADDR_VAR 0 7
16701: PUSH
16702: LD_VAR 0 5
16706: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16707: LD_ADDR_VAR 0 3
16711: PUSH
16712: LD_INT 1
16714: PPUSH
16715: LD_VAR 0 14
16719: PPUSH
16720: CALL_OW 12
16724: ST_TO_ADDR
// case i of 1 :
16725: LD_VAR 0 3
16729: PUSH
16730: LD_INT 1
16732: DOUBLE
16733: EQUAL
16734: IFTRUE 16738
16736: GO 16755
16738: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16739: LD_VAR 0 1
16743: PPUSH
16744: LD_VAR 0 10
16748: PPUSH
16749: CALL_OW 115
16753: GO 16816
16755: LD_INT 2
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16785
16763: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16764: LD_VAR 0 1
16768: PPUSH
16769: LD_VAR 0 6
16773: PPUSH
16774: LD_VAR 0 7
16778: PPUSH
16779: CALL_OW 153
16783: GO 16816
16785: LD_INT 3
16787: DOUBLE
16788: EQUAL
16789: IFTRUE 16793
16791: GO 16815
16793: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16794: LD_VAR 0 1
16798: PPUSH
16799: LD_VAR 0 6
16803: PPUSH
16804: LD_VAR 0 7
16808: PPUSH
16809: CALL_OW 154
16813: GO 16816
16815: POP
// end ;
16816: LD_VAR 0 2
16820: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16821: LD_INT 0
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
// if not unit or not building then
16829: LD_VAR 0 1
16833: NOT
16834: PUSH
16835: LD_VAR 0 2
16839: NOT
16840: OR
16841: IFFALSE 16845
// exit ;
16843: GO 17003
// x := GetX ( building ) ;
16845: LD_ADDR_VAR 0 5
16849: PUSH
16850: LD_VAR 0 2
16854: PPUSH
16855: CALL_OW 250
16859: ST_TO_ADDR
// y := GetY ( building ) ;
16860: LD_ADDR_VAR 0 6
16864: PUSH
16865: LD_VAR 0 2
16869: PPUSH
16870: CALL_OW 251
16874: ST_TO_ADDR
// for i = 0 to 5 do
16875: LD_ADDR_VAR 0 4
16879: PUSH
16880: DOUBLE
16881: LD_INT 0
16883: DEC
16884: ST_TO_ADDR
16885: LD_INT 5
16887: PUSH
16888: FOR_TO
16889: IFFALSE 17001
// begin _x := ShiftX ( x , i , 3 ) ;
16891: LD_ADDR_VAR 0 7
16895: PUSH
16896: LD_VAR 0 5
16900: PPUSH
16901: LD_VAR 0 4
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL_OW 272
16913: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16914: LD_ADDR_VAR 0 8
16918: PUSH
16919: LD_VAR 0 6
16923: PPUSH
16924: LD_VAR 0 4
16928: PPUSH
16929: LD_INT 3
16931: PPUSH
16932: CALL_OW 273
16936: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16937: LD_VAR 0 7
16941: PPUSH
16942: LD_VAR 0 8
16946: PPUSH
16947: CALL_OW 488
16951: NOT
16952: IFFALSE 16956
// continue ;
16954: GO 16888
// if HexInfo ( _x , _y ) = 0 then
16956: LD_VAR 0 7
16960: PPUSH
16961: LD_VAR 0 8
16965: PPUSH
16966: CALL_OW 428
16970: PUSH
16971: LD_INT 0
16973: EQUAL
16974: IFFALSE 16999
// begin ComMoveXY ( unit , _x , _y ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_VAR 0 7
16985: PPUSH
16986: LD_VAR 0 8
16990: PPUSH
16991: CALL_OW 111
// exit ;
16995: POP
16996: POP
16997: GO 17003
// end ; end ;
16999: GO 16888
17001: POP
17002: POP
// end ;
17003: LD_VAR 0 3
17007: RET
// export function ScanBase ( side , base_area ) ; begin
17008: LD_INT 0
17010: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: LD_VAR 0 2
17020: PPUSH
17021: LD_INT 81
17023: PUSH
17024: LD_VAR 0 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 70
17037: ST_TO_ADDR
// end ;
17038: LD_VAR 0 3
17042: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17043: LD_INT 0
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
// result := false ;
17049: LD_ADDR_VAR 0 2
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
// side := GetSide ( unit ) ;
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_VAR 0 1
17066: PPUSH
17067: CALL_OW 255
17071: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17072: LD_ADDR_VAR 0 4
17076: PUSH
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 248
17086: ST_TO_ADDR
// case nat of 1 :
17087: LD_VAR 0 4
17091: PUSH
17092: LD_INT 1
17094: DOUBLE
17095: EQUAL
17096: IFTRUE 17100
17098: GO 17111
17100: POP
// tech := tech_lassight ; 2 :
17101: LD_ADDR_VAR 0 5
17105: PUSH
17106: LD_INT 12
17108: ST_TO_ADDR
17109: GO 17150
17111: LD_INT 2
17113: DOUBLE
17114: EQUAL
17115: IFTRUE 17119
17117: GO 17130
17119: POP
// tech := tech_mortar ; 3 :
17120: LD_ADDR_VAR 0 5
17124: PUSH
17125: LD_INT 41
17127: ST_TO_ADDR
17128: GO 17150
17130: LD_INT 3
17132: DOUBLE
17133: EQUAL
17134: IFTRUE 17138
17136: GO 17149
17138: POP
// tech := tech_bazooka ; end ;
17139: LD_ADDR_VAR 0 5
17143: PUSH
17144: LD_INT 44
17146: ST_TO_ADDR
17147: GO 17150
17149: POP
// if Researched ( side , tech ) then
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 5
17159: PPUSH
17160: CALL_OW 325
17164: IFFALSE 17191
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17166: LD_ADDR_VAR 0 2
17170: PUSH
17171: LD_INT 5
17173: PUSH
17174: LD_INT 8
17176: PUSH
17177: LD_INT 9
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: PUSH
17185: LD_VAR 0 4
17189: ARRAY
17190: ST_TO_ADDR
// end ;
17191: LD_VAR 0 2
17195: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
17200: PPUSH
// if not mines then
17201: LD_VAR 0 2
17205: NOT
17206: IFFALSE 17210
// exit ;
17208: GO 17354
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17210: LD_ADDR_VAR 0 5
17214: PUSH
17215: LD_INT 81
17217: PUSH
17218: LD_VAR 0 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 3
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 3
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// for i in mines do
17253: LD_ADDR_VAR 0 4
17257: PUSH
17258: LD_VAR 0 2
17262: PUSH
17263: FOR_IN
17264: IFFALSE 17352
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17266: LD_VAR 0 4
17270: PUSH
17271: LD_INT 1
17273: ARRAY
17274: PPUSH
17275: LD_VAR 0 4
17279: PUSH
17280: LD_INT 2
17282: ARRAY
17283: PPUSH
17284: CALL_OW 458
17288: NOT
17289: IFFALSE 17293
// continue ;
17291: GO 17263
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17293: LD_VAR 0 4
17297: PUSH
17298: LD_INT 1
17300: ARRAY
17301: PPUSH
17302: LD_VAR 0 4
17306: PUSH
17307: LD_INT 2
17309: ARRAY
17310: PPUSH
17311: CALL_OW 428
17315: PUSH
17316: LD_VAR 0 5
17320: IN
17321: IFFALSE 17350
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17323: LD_VAR 0 4
17327: PUSH
17328: LD_INT 1
17330: ARRAY
17331: PPUSH
17332: LD_VAR 0 4
17336: PUSH
17337: LD_INT 2
17339: ARRAY
17340: PPUSH
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL_OW 456
// end ;
17350: GO 17263
17352: POP
17353: POP
// end ;
17354: LD_VAR 0 3
17358: RET
// export function Count ( array ) ; var i ; begin
17359: LD_INT 0
17361: PPUSH
17362: PPUSH
// result := 0 ;
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// for i in array do
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_VAR 0 1
17380: PUSH
17381: FOR_IN
17382: IFFALSE 17406
// if i then
17384: LD_VAR 0 3
17388: IFFALSE 17404
// result := result + 1 ;
17390: LD_ADDR_VAR 0 2
17394: PUSH
17395: LD_VAR 0 2
17399: PUSH
17400: LD_INT 1
17402: PLUS
17403: ST_TO_ADDR
17404: GO 17381
17406: POP
17407: POP
// end ;
17408: LD_VAR 0 2
17412: RET
// export function IsEmpty ( building ) ; begin
17413: LD_INT 0
17415: PPUSH
// if not building then
17416: LD_VAR 0 1
17420: NOT
17421: IFFALSE 17425
// exit ;
17423: GO 17468
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17425: LD_ADDR_VAR 0 2
17429: PUSH
17430: LD_VAR 0 1
17434: PUSH
17435: LD_INT 22
17437: PUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 255
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 58
17454: PUSH
17455: EMPTY
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: IN
17467: ST_TO_ADDR
// end ;
17468: LD_VAR 0 2
17472: RET
// export function IsNotFull ( building ) ; var places ; begin
17473: LD_INT 0
17475: PPUSH
17476: PPUSH
// if not building then
17477: LD_VAR 0 1
17481: NOT
17482: IFFALSE 17486
// exit ;
17484: GO 17657
// result := false ;
17486: LD_ADDR_VAR 0 2
17490: PUSH
17491: LD_INT 0
17493: ST_TO_ADDR
// places := 0 ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17502: LD_VAR 0 1
17506: PPUSH
17507: CALL_OW 266
17511: PUSH
17512: LD_INT 0
17514: DOUBLE
17515: EQUAL
17516: IFTRUE 17574
17518: LD_INT 1
17520: DOUBLE
17521: EQUAL
17522: IFTRUE 17574
17524: LD_INT 6
17526: DOUBLE
17527: EQUAL
17528: IFTRUE 17574
17530: LD_INT 7
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17574
17536: LD_INT 8
17538: DOUBLE
17539: EQUAL
17540: IFTRUE 17574
17542: LD_INT 4
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17574
17548: LD_INT 5
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17574
17554: LD_INT 2
17556: DOUBLE
17557: EQUAL
17558: IFTRUE 17574
17560: LD_INT 3
17562: DOUBLE
17563: EQUAL
17564: IFTRUE 17574
17566: LD_INT 35
17568: DOUBLE
17569: EQUAL
17570: IFTRUE 17574
17572: GO 17585
17574: POP
// places := 6 ; b_bunker , b_breastwork :
17575: LD_ADDR_VAR 0 3
17579: PUSH
17580: LD_INT 6
17582: ST_TO_ADDR
17583: GO 17630
17585: LD_INT 32
17587: DOUBLE
17588: EQUAL
17589: IFTRUE 17599
17591: LD_INT 31
17593: DOUBLE
17594: EQUAL
17595: IFTRUE 17599
17597: GO 17610
17599: POP
// places := 1 ; b_control_tower :
17600: LD_ADDR_VAR 0 3
17604: PUSH
17605: LD_INT 1
17607: ST_TO_ADDR
17608: GO 17630
17610: LD_INT 36
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17629
17618: POP
// places := 3 ; end ;
17619: LD_ADDR_VAR 0 3
17623: PUSH
17624: LD_INT 3
17626: ST_TO_ADDR
17627: GO 17630
17629: POP
// if places then
17630: LD_VAR 0 3
17634: IFFALSE 17657
// result := UnitsInside ( building ) < places ;
17636: LD_ADDR_VAR 0 2
17640: PUSH
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL_OW 313
17650: PUSH
17651: LD_VAR 0 3
17655: LESS
17656: ST_TO_ADDR
// end ;
17657: LD_VAR 0 2
17661: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
// tmp := [ ] ;
17668: LD_ADDR_VAR 0 3
17672: PUSH
17673: EMPTY
17674: ST_TO_ADDR
// list := [ ] ;
17675: LD_ADDR_VAR 0 5
17679: PUSH
17680: EMPTY
17681: ST_TO_ADDR
// for i = 16 to 25 do
17682: LD_ADDR_VAR 0 4
17686: PUSH
17687: DOUBLE
17688: LD_INT 16
17690: DEC
17691: ST_TO_ADDR
17692: LD_INT 25
17694: PUSH
17695: FOR_TO
17696: IFFALSE 17769
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17698: LD_ADDR_VAR 0 3
17702: PUSH
17703: LD_VAR 0 3
17707: PUSH
17708: LD_INT 22
17710: PUSH
17711: LD_VAR 0 1
17715: PPUSH
17716: CALL_OW 255
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 91
17727: PUSH
17728: LD_VAR 0 1
17732: PUSH
17733: LD_INT 6
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 30
17743: PUSH
17744: LD_VAR 0 4
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: PUSH
17758: EMPTY
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: ADD
17766: ST_TO_ADDR
17767: GO 17695
17769: POP
17770: POP
// for i = 1 to tmp do
17771: LD_ADDR_VAR 0 4
17775: PUSH
17776: DOUBLE
17777: LD_INT 1
17779: DEC
17780: ST_TO_ADDR
17781: LD_VAR 0 3
17785: PUSH
17786: FOR_TO
17787: IFFALSE 17875
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17789: LD_ADDR_VAR 0 5
17793: PUSH
17794: LD_VAR 0 5
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 4
17808: ARRAY
17809: PPUSH
17810: CALL_OW 266
17814: PUSH
17815: LD_VAR 0 3
17819: PUSH
17820: LD_VAR 0 4
17824: ARRAY
17825: PPUSH
17826: CALL_OW 250
17830: PUSH
17831: LD_VAR 0 3
17835: PUSH
17836: LD_VAR 0 4
17840: ARRAY
17841: PPUSH
17842: CALL_OW 251
17846: PUSH
17847: LD_VAR 0 3
17851: PUSH
17852: LD_VAR 0 4
17856: ARRAY
17857: PPUSH
17858: CALL_OW 254
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: ADD
17872: ST_TO_ADDR
17873: GO 17786
17875: POP
17876: POP
// result := list ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_VAR 0 5
17886: ST_TO_ADDR
// end ;
17887: LD_VAR 0 2
17891: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17892: LD_INT 0
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
17900: PPUSH
// if not factory then
17901: LD_VAR 0 1
17905: NOT
17906: IFFALSE 17910
// exit ;
17908: GO 18503
// if control = control_apeman then
17910: LD_VAR 0 4
17914: PUSH
17915: LD_INT 5
17917: EQUAL
17918: IFFALSE 18027
// begin tmp := UnitsInside ( factory ) ;
17920: LD_ADDR_VAR 0 8
17924: PUSH
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 313
17934: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17935: LD_VAR 0 8
17939: PPUSH
17940: LD_INT 25
17942: PUSH
17943: LD_INT 12
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 72
17954: NOT
17955: IFFALSE 17965
// control := control_manual ;
17957: LD_ADDR_VAR 0 4
17961: PUSH
17962: LD_INT 1
17964: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17965: LD_ADDR_VAR 0 8
17969: PUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: CALL 17662 0 1
17979: ST_TO_ADDR
// if tmp then
17980: LD_VAR 0 8
17984: IFFALSE 18027
// begin for i in tmp do
17986: LD_ADDR_VAR 0 7
17990: PUSH
17991: LD_VAR 0 8
17995: PUSH
17996: FOR_IN
17997: IFFALSE 18025
// if i [ 1 ] = b_ext_radio then
17999: LD_VAR 0 7
18003: PUSH
18004: LD_INT 1
18006: ARRAY
18007: PUSH
18008: LD_INT 22
18010: EQUAL
18011: IFFALSE 18023
// begin control := control_remote ;
18013: LD_ADDR_VAR 0 4
18017: PUSH
18018: LD_INT 2
18020: ST_TO_ADDR
// break ;
18021: GO 18025
// end ;
18023: GO 17996
18025: POP
18026: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18027: LD_VAR 0 1
18031: PPUSH
18032: LD_VAR 0 2
18036: PPUSH
18037: LD_VAR 0 3
18041: PPUSH
18042: LD_VAR 0 4
18046: PPUSH
18047: LD_VAR 0 5
18051: PPUSH
18052: CALL_OW 448
18056: IFFALSE 18091
// begin result := [ chassis , engine , control , weapon ] ;
18058: LD_ADDR_VAR 0 6
18062: PUSH
18063: LD_VAR 0 2
18067: PUSH
18068: LD_VAR 0 3
18072: PUSH
18073: LD_VAR 0 4
18077: PUSH
18078: LD_VAR 0 5
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: ST_TO_ADDR
// exit ;
18089: GO 18503
// end ; _chassis := AvailableChassisList ( factory ) ;
18091: LD_ADDR_VAR 0 9
18095: PUSH
18096: LD_VAR 0 1
18100: PPUSH
18101: CALL_OW 475
18105: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18106: LD_ADDR_VAR 0 11
18110: PUSH
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 476
18120: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18121: LD_ADDR_VAR 0 12
18125: PUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 477
18135: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18136: LD_ADDR_VAR 0 10
18140: PUSH
18141: LD_VAR 0 1
18145: PPUSH
18146: CALL_OW 478
18150: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18151: LD_VAR 0 9
18155: NOT
18156: PUSH
18157: LD_VAR 0 11
18161: NOT
18162: OR
18163: PUSH
18164: LD_VAR 0 12
18168: NOT
18169: OR
18170: PUSH
18171: LD_VAR 0 10
18175: NOT
18176: OR
18177: IFFALSE 18212
// begin result := [ chassis , engine , control , weapon ] ;
18179: LD_ADDR_VAR 0 6
18183: PUSH
18184: LD_VAR 0 2
18188: PUSH
18189: LD_VAR 0 3
18193: PUSH
18194: LD_VAR 0 4
18198: PUSH
18199: LD_VAR 0 5
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: ST_TO_ADDR
// exit ;
18210: GO 18503
// end ; if not chassis in _chassis then
18212: LD_VAR 0 2
18216: PUSH
18217: LD_VAR 0 9
18221: IN
18222: NOT
18223: IFFALSE 18249
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18225: LD_ADDR_VAR 0 2
18229: PUSH
18230: LD_VAR 0 9
18234: PUSH
18235: LD_INT 1
18237: PPUSH
18238: LD_VAR 0 9
18242: PPUSH
18243: CALL_OW 12
18247: ARRAY
18248: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18249: LD_VAR 0 2
18253: PPUSH
18254: LD_VAR 0 3
18258: PPUSH
18259: CALL 18508 0 2
18263: NOT
18264: IFFALSE 18323
// repeat engine := _engine [ 1 ] ;
18266: LD_ADDR_VAR 0 3
18270: PUSH
18271: LD_VAR 0 11
18275: PUSH
18276: LD_INT 1
18278: ARRAY
18279: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18280: LD_ADDR_VAR 0 11
18284: PUSH
18285: LD_VAR 0 11
18289: PPUSH
18290: LD_INT 1
18292: PPUSH
18293: CALL_OW 3
18297: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18298: LD_VAR 0 2
18302: PPUSH
18303: LD_VAR 0 3
18307: PPUSH
18308: CALL 18508 0 2
18312: PUSH
18313: LD_VAR 0 11
18317: PUSH
18318: EMPTY
18319: EQUAL
18320: OR
18321: IFFALSE 18266
// if not control in _control then
18323: LD_VAR 0 4
18327: PUSH
18328: LD_VAR 0 12
18332: IN
18333: NOT
18334: IFFALSE 18360
// control := _control [ rand ( 1 , _control ) ] ;
18336: LD_ADDR_VAR 0 4
18340: PUSH
18341: LD_VAR 0 12
18345: PUSH
18346: LD_INT 1
18348: PPUSH
18349: LD_VAR 0 12
18353: PPUSH
18354: CALL_OW 12
18358: ARRAY
18359: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_VAR 0 5
18369: PPUSH
18370: CALL 18728 0 2
18374: NOT
18375: IFFALSE 18434
// repeat weapon := _weapon [ 1 ] ;
18377: LD_ADDR_VAR 0 5
18381: PUSH
18382: LD_VAR 0 10
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18391: LD_ADDR_VAR 0 10
18395: PUSH
18396: LD_VAR 0 10
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 3
18408: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18409: LD_VAR 0 2
18413: PPUSH
18414: LD_VAR 0 5
18418: PPUSH
18419: CALL 18728 0 2
18423: PUSH
18424: LD_VAR 0 10
18428: PUSH
18429: EMPTY
18430: EQUAL
18431: OR
18432: IFFALSE 18377
// result := [ ] ;
18434: LD_ADDR_VAR 0 6
18438: PUSH
18439: EMPTY
18440: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_VAR 0 4
18460: PPUSH
18461: LD_VAR 0 5
18465: PPUSH
18466: CALL_OW 448
18470: IFFALSE 18503
// result := [ chassis , engine , control , weapon ] ;
18472: LD_ADDR_VAR 0 6
18476: PUSH
18477: LD_VAR 0 2
18481: PUSH
18482: LD_VAR 0 3
18486: PUSH
18487: LD_VAR 0 4
18491: PUSH
18492: LD_VAR 0 5
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: ST_TO_ADDR
// end ;
18503: LD_VAR 0 6
18507: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18508: LD_INT 0
18510: PPUSH
// if not chassis or not engine then
18511: LD_VAR 0 1
18515: NOT
18516: PUSH
18517: LD_VAR 0 2
18521: NOT
18522: OR
18523: IFFALSE 18527
// exit ;
18525: GO 18723
// case engine of engine_solar :
18527: LD_VAR 0 2
18531: PUSH
18532: LD_INT 2
18534: DOUBLE
18535: EQUAL
18536: IFTRUE 18540
18538: GO 18578
18540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18541: LD_ADDR_VAR 0 3
18545: PUSH
18546: LD_INT 11
18548: PUSH
18549: LD_INT 12
18551: PUSH
18552: LD_INT 13
18554: PUSH
18555: LD_INT 14
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: LD_INT 3
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: ST_TO_ADDR
18576: GO 18707
18578: LD_INT 1
18580: DOUBLE
18581: EQUAL
18582: IFTRUE 18586
18584: GO 18648
18586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 11
18594: PUSH
18595: LD_INT 12
18597: PUSH
18598: LD_INT 13
18600: PUSH
18601: LD_INT 14
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: LD_INT 3
18612: PUSH
18613: LD_INT 4
18615: PUSH
18616: LD_INT 5
18618: PUSH
18619: LD_INT 21
18621: PUSH
18622: LD_INT 23
18624: PUSH
18625: LD_INT 22
18627: PUSH
18628: LD_INT 24
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: ST_TO_ADDR
18646: GO 18707
18648: LD_INT 3
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18706
18656: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18657: LD_ADDR_VAR 0 3
18661: PUSH
18662: LD_INT 13
18664: PUSH
18665: LD_INT 14
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: LD_INT 3
18673: PUSH
18674: LD_INT 4
18676: PUSH
18677: LD_INT 5
18679: PUSH
18680: LD_INT 21
18682: PUSH
18683: LD_INT 22
18685: PUSH
18686: LD_INT 23
18688: PUSH
18689: LD_INT 24
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: ST_TO_ADDR
18704: GO 18707
18706: POP
// result := ( chassis in result ) ;
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: LD_VAR 0 1
18716: PUSH
18717: LD_VAR 0 3
18721: IN
18722: ST_TO_ADDR
// end ;
18723: LD_VAR 0 3
18727: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18728: LD_INT 0
18730: PPUSH
// if not chassis or not weapon then
18731: LD_VAR 0 1
18735: NOT
18736: PUSH
18737: LD_VAR 0 2
18741: NOT
18742: OR
18743: IFFALSE 18747
// exit ;
18745: GO 19807
// case weapon of us_machine_gun :
18747: LD_VAR 0 2
18751: PUSH
18752: LD_INT 2
18754: DOUBLE
18755: EQUAL
18756: IFTRUE 18760
18758: GO 18790
18760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18761: LD_ADDR_VAR 0 3
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 2
18771: PUSH
18772: LD_INT 3
18774: PUSH
18775: LD_INT 4
18777: PUSH
18778: LD_INT 5
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: ST_TO_ADDR
18788: GO 19791
18790: LD_INT 3
18792: DOUBLE
18793: EQUAL
18794: IFTRUE 18798
18796: GO 18828
18798: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18799: LD_ADDR_VAR 0 3
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 3
18812: PUSH
18813: LD_INT 4
18815: PUSH
18816: LD_INT 5
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: ST_TO_ADDR
18826: GO 19791
18828: LD_INT 11
18830: DOUBLE
18831: EQUAL
18832: IFTRUE 18836
18834: GO 18866
18836: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18837: LD_ADDR_VAR 0 3
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: LD_INT 4
18853: PUSH
18854: LD_INT 5
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: ST_TO_ADDR
18864: GO 19791
18866: LD_INT 4
18868: DOUBLE
18869: EQUAL
18870: IFTRUE 18874
18872: GO 18900
18874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 3
18885: PUSH
18886: LD_INT 4
18888: PUSH
18889: LD_INT 5
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: ST_TO_ADDR
18898: GO 19791
18900: LD_INT 5
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18934
18908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: LD_INT 3
18919: PUSH
18920: LD_INT 4
18922: PUSH
18923: LD_INT 5
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: ST_TO_ADDR
18932: GO 19791
18934: LD_INT 9
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18968
18942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18943: LD_ADDR_VAR 0 3
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: LD_INT 4
18956: PUSH
18957: LD_INT 5
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: ST_TO_ADDR
18966: GO 19791
18968: LD_INT 7
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19002
18976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 3
18987: PUSH
18988: LD_INT 4
18990: PUSH
18991: LD_INT 5
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: ST_TO_ADDR
19000: GO 19791
19002: LD_INT 12
19004: DOUBLE
19005: EQUAL
19006: IFTRUE 19010
19008: GO 19036
19010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19011: LD_ADDR_VAR 0 3
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: LD_INT 4
19024: PUSH
19025: LD_INT 5
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: ST_TO_ADDR
19034: GO 19791
19036: LD_INT 13
19038: DOUBLE
19039: EQUAL
19040: IFTRUE 19044
19042: GO 19070
19044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19045: LD_ADDR_VAR 0 3
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 4
19058: PUSH
19059: LD_INT 5
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: ST_TO_ADDR
19068: GO 19791
19070: LD_INT 14
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19096
19078: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19079: LD_ADDR_VAR 0 3
19083: PUSH
19084: LD_INT 4
19086: PUSH
19087: LD_INT 5
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: ST_TO_ADDR
19094: GO 19791
19096: LD_INT 6
19098: DOUBLE
19099: EQUAL
19100: IFTRUE 19104
19102: GO 19122
19104: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19105: LD_ADDR_VAR 0 3
19109: PUSH
19110: LD_INT 4
19112: PUSH
19113: LD_INT 5
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: ST_TO_ADDR
19120: GO 19791
19122: LD_INT 10
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19148
19130: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19131: LD_ADDR_VAR 0 3
19135: PUSH
19136: LD_INT 4
19138: PUSH
19139: LD_INT 5
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: ST_TO_ADDR
19146: GO 19791
19148: LD_INT 22
19150: DOUBLE
19151: EQUAL
19152: IFTRUE 19156
19154: GO 19182
19156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19157: LD_ADDR_VAR 0 3
19161: PUSH
19162: LD_INT 11
19164: PUSH
19165: LD_INT 12
19167: PUSH
19168: LD_INT 13
19170: PUSH
19171: LD_INT 14
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: ST_TO_ADDR
19180: GO 19791
19182: LD_INT 23
19184: DOUBLE
19185: EQUAL
19186: IFTRUE 19190
19188: GO 19216
19190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_INT 11
19198: PUSH
19199: LD_INT 12
19201: PUSH
19202: LD_INT 13
19204: PUSH
19205: LD_INT 14
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: ST_TO_ADDR
19214: GO 19791
19216: LD_INT 24
19218: DOUBLE
19219: EQUAL
19220: IFTRUE 19224
19222: GO 19250
19224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_INT 11
19232: PUSH
19233: LD_INT 12
19235: PUSH
19236: LD_INT 13
19238: PUSH
19239: LD_INT 14
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: ST_TO_ADDR
19248: GO 19791
19250: LD_INT 30
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19284
19258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19259: LD_ADDR_VAR 0 3
19263: PUSH
19264: LD_INT 11
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: LD_INT 13
19272: PUSH
19273: LD_INT 14
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: ST_TO_ADDR
19282: GO 19791
19284: LD_INT 25
19286: DOUBLE
19287: EQUAL
19288: IFTRUE 19292
19290: GO 19310
19292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_INT 13
19300: PUSH
19301: LD_INT 14
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: ST_TO_ADDR
19308: GO 19791
19310: LD_INT 27
19312: DOUBLE
19313: EQUAL
19314: IFTRUE 19318
19316: GO 19336
19318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_INT 13
19326: PUSH
19327: LD_INT 14
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: ST_TO_ADDR
19334: GO 19791
19336: LD_INT 92
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19370
19344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 11
19352: PUSH
19353: LD_INT 12
19355: PUSH
19356: LD_INT 13
19358: PUSH
19359: LD_INT 14
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
19368: GO 19791
19370: LD_INT 28
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19396
19378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 13
19386: PUSH
19387: LD_INT 14
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: ST_TO_ADDR
19394: GO 19791
19396: LD_INT 29
19398: DOUBLE
19399: EQUAL
19400: IFTRUE 19404
19402: GO 19422
19404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19405: LD_ADDR_VAR 0 3
19409: PUSH
19410: LD_INT 13
19412: PUSH
19413: LD_INT 14
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: ST_TO_ADDR
19420: GO 19791
19422: LD_INT 31
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19448
19430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19431: LD_ADDR_VAR 0 3
19435: PUSH
19436: LD_INT 13
19438: PUSH
19439: LD_INT 14
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: ST_TO_ADDR
19446: GO 19791
19448: LD_INT 26
19450: DOUBLE
19451: EQUAL
19452: IFTRUE 19456
19454: GO 19474
19456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19457: LD_ADDR_VAR 0 3
19461: PUSH
19462: LD_INT 13
19464: PUSH
19465: LD_INT 14
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: ST_TO_ADDR
19472: GO 19791
19474: LD_INT 42
19476: DOUBLE
19477: EQUAL
19478: IFTRUE 19482
19480: GO 19508
19482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19483: LD_ADDR_VAR 0 3
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_INT 23
19496: PUSH
19497: LD_INT 24
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: ST_TO_ADDR
19506: GO 19791
19508: LD_INT 43
19510: DOUBLE
19511: EQUAL
19512: IFTRUE 19516
19514: GO 19542
19516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19517: LD_ADDR_VAR 0 3
19521: PUSH
19522: LD_INT 21
19524: PUSH
19525: LD_INT 22
19527: PUSH
19528: LD_INT 23
19530: PUSH
19531: LD_INT 24
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: ST_TO_ADDR
19540: GO 19791
19542: LD_INT 44
19544: DOUBLE
19545: EQUAL
19546: IFTRUE 19550
19548: GO 19576
19550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 23
19564: PUSH
19565: LD_INT 24
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 19791
19576: LD_INT 45
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19610
19584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: LD_INT 21
19592: PUSH
19593: LD_INT 22
19595: PUSH
19596: LD_INT 23
19598: PUSH
19599: LD_INT 24
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: ST_TO_ADDR
19608: GO 19791
19610: LD_INT 49
19612: DOUBLE
19613: EQUAL
19614: IFTRUE 19618
19616: GO 19644
19618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19619: LD_ADDR_VAR 0 3
19623: PUSH
19624: LD_INT 21
19626: PUSH
19627: LD_INT 22
19629: PUSH
19630: LD_INT 23
19632: PUSH
19633: LD_INT 24
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: ST_TO_ADDR
19642: GO 19791
19644: LD_INT 51
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19678
19652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_INT 21
19660: PUSH
19661: LD_INT 22
19663: PUSH
19664: LD_INT 23
19666: PUSH
19667: LD_INT 24
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: ST_TO_ADDR
19676: GO 19791
19678: LD_INT 52
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19712
19686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_INT 21
19694: PUSH
19695: LD_INT 22
19697: PUSH
19698: LD_INT 23
19700: PUSH
19701: LD_INT 24
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 19791
19712: LD_INT 53
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19738
19720: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 23
19728: PUSH
19729: LD_INT 24
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: ST_TO_ADDR
19736: GO 19791
19738: LD_INT 46
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19746
19744: GO 19764
19746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19747: LD_ADDR_VAR 0 3
19751: PUSH
19752: LD_INT 23
19754: PUSH
19755: LD_INT 24
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: ST_TO_ADDR
19762: GO 19791
19764: LD_INT 47
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19790
19772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19773: LD_ADDR_VAR 0 3
19777: PUSH
19778: LD_INT 23
19780: PUSH
19781: LD_INT 24
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: ST_TO_ADDR
19788: GO 19791
19790: POP
// result := ( chassis in result ) ;
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_VAR 0 1
19800: PUSH
19801: LD_VAR 0 3
19805: IN
19806: ST_TO_ADDR
// end ;
19807: LD_VAR 0 3
19811: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19812: LD_INT 0
19814: PPUSH
19815: PPUSH
19816: PPUSH
19817: PPUSH
19818: PPUSH
19819: PPUSH
19820: PPUSH
// result := array ;
19821: LD_ADDR_VAR 0 5
19825: PUSH
19826: LD_VAR 0 1
19830: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19831: LD_VAR 0 1
19835: NOT
19836: PUSH
19837: LD_VAR 0 2
19841: NOT
19842: OR
19843: PUSH
19844: LD_VAR 0 3
19848: NOT
19849: OR
19850: PUSH
19851: LD_VAR 0 2
19855: PUSH
19856: LD_VAR 0 1
19860: GREATER
19861: OR
19862: PUSH
19863: LD_VAR 0 3
19867: PUSH
19868: LD_VAR 0 1
19872: GREATER
19873: OR
19874: IFFALSE 19878
// exit ;
19876: GO 20174
// if direction then
19878: LD_VAR 0 4
19882: IFFALSE 19946
// begin d := 1 ;
19884: LD_ADDR_VAR 0 9
19888: PUSH
19889: LD_INT 1
19891: ST_TO_ADDR
// if i_from > i_to then
19892: LD_VAR 0 2
19896: PUSH
19897: LD_VAR 0 3
19901: GREATER
19902: IFFALSE 19928
// length := ( array - i_from ) + i_to else
19904: LD_ADDR_VAR 0 11
19908: PUSH
19909: LD_VAR 0 1
19913: PUSH
19914: LD_VAR 0 2
19918: MINUS
19919: PUSH
19920: LD_VAR 0 3
19924: PLUS
19925: ST_TO_ADDR
19926: GO 19944
// length := i_to - i_from ;
19928: LD_ADDR_VAR 0 11
19932: PUSH
19933: LD_VAR 0 3
19937: PUSH
19938: LD_VAR 0 2
19942: MINUS
19943: ST_TO_ADDR
// end else
19944: GO 20007
// begin d := - 1 ;
19946: LD_ADDR_VAR 0 9
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: ST_TO_ADDR
// if i_from > i_to then
19955: LD_VAR 0 2
19959: PUSH
19960: LD_VAR 0 3
19964: GREATER
19965: IFFALSE 19985
// length := i_from - i_to else
19967: LD_ADDR_VAR 0 11
19971: PUSH
19972: LD_VAR 0 2
19976: PUSH
19977: LD_VAR 0 3
19981: MINUS
19982: ST_TO_ADDR
19983: GO 20007
// length := ( array - i_to ) + i_from ;
19985: LD_ADDR_VAR 0 11
19989: PUSH
19990: LD_VAR 0 1
19994: PUSH
19995: LD_VAR 0 3
19999: MINUS
20000: PUSH
20001: LD_VAR 0 2
20005: PLUS
20006: ST_TO_ADDR
// end ; if not length then
20007: LD_VAR 0 11
20011: NOT
20012: IFFALSE 20016
// exit ;
20014: GO 20174
// tmp := array ;
20016: LD_ADDR_VAR 0 10
20020: PUSH
20021: LD_VAR 0 1
20025: ST_TO_ADDR
// for i = 1 to length do
20026: LD_ADDR_VAR 0 6
20030: PUSH
20031: DOUBLE
20032: LD_INT 1
20034: DEC
20035: ST_TO_ADDR
20036: LD_VAR 0 11
20040: PUSH
20041: FOR_TO
20042: IFFALSE 20162
// begin for j = 1 to array do
20044: LD_ADDR_VAR 0 7
20048: PUSH
20049: DOUBLE
20050: LD_INT 1
20052: DEC
20053: ST_TO_ADDR
20054: LD_VAR 0 1
20058: PUSH
20059: FOR_TO
20060: IFFALSE 20148
// begin k := j + d ;
20062: LD_ADDR_VAR 0 8
20066: PUSH
20067: LD_VAR 0 7
20071: PUSH
20072: LD_VAR 0 9
20076: PLUS
20077: ST_TO_ADDR
// if k > array then
20078: LD_VAR 0 8
20082: PUSH
20083: LD_VAR 0 1
20087: GREATER
20088: IFFALSE 20098
// k := 1 ;
20090: LD_ADDR_VAR 0 8
20094: PUSH
20095: LD_INT 1
20097: ST_TO_ADDR
// if not k then
20098: LD_VAR 0 8
20102: NOT
20103: IFFALSE 20115
// k := array ;
20105: LD_ADDR_VAR 0 8
20109: PUSH
20110: LD_VAR 0 1
20114: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20115: LD_ADDR_VAR 0 10
20119: PUSH
20120: LD_VAR 0 10
20124: PPUSH
20125: LD_VAR 0 8
20129: PPUSH
20130: LD_VAR 0 1
20134: PUSH
20135: LD_VAR 0 7
20139: ARRAY
20140: PPUSH
20141: CALL_OW 1
20145: ST_TO_ADDR
// end ;
20146: GO 20059
20148: POP
20149: POP
// array := tmp ;
20150: LD_ADDR_VAR 0 1
20154: PUSH
20155: LD_VAR 0 10
20159: ST_TO_ADDR
// end ;
20160: GO 20041
20162: POP
20163: POP
// result := array ;
20164: LD_ADDR_VAR 0 5
20168: PUSH
20169: LD_VAR 0 1
20173: ST_TO_ADDR
// end ;
20174: LD_VAR 0 5
20178: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
// result := 0 ;
20183: LD_ADDR_VAR 0 3
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// if not array or not value in array then
20191: LD_VAR 0 1
20195: NOT
20196: PUSH
20197: LD_VAR 0 2
20201: PUSH
20202: LD_VAR 0 1
20206: IN
20207: NOT
20208: OR
20209: IFFALSE 20213
// exit ;
20211: GO 20267
// for i = 1 to array do
20213: LD_ADDR_VAR 0 4
20217: PUSH
20218: DOUBLE
20219: LD_INT 1
20221: DEC
20222: ST_TO_ADDR
20223: LD_VAR 0 1
20227: PUSH
20228: FOR_TO
20229: IFFALSE 20265
// if value = array [ i ] then
20231: LD_VAR 0 2
20235: PUSH
20236: LD_VAR 0 1
20240: PUSH
20241: LD_VAR 0 4
20245: ARRAY
20246: EQUAL
20247: IFFALSE 20263
// begin result := i ;
20249: LD_ADDR_VAR 0 3
20253: PUSH
20254: LD_VAR 0 4
20258: ST_TO_ADDR
// exit ;
20259: POP
20260: POP
20261: GO 20267
// end ;
20263: GO 20228
20265: POP
20266: POP
// end ;
20267: LD_VAR 0 3
20271: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20272: LD_INT 0
20274: PPUSH
// vc_chassis := chassis ;
20275: LD_ADDR_OWVAR 37
20279: PUSH
20280: LD_VAR 0 1
20284: ST_TO_ADDR
// vc_engine := engine ;
20285: LD_ADDR_OWVAR 39
20289: PUSH
20290: LD_VAR 0 2
20294: ST_TO_ADDR
// vc_control := control ;
20295: LD_ADDR_OWVAR 38
20299: PUSH
20300: LD_VAR 0 3
20304: ST_TO_ADDR
// vc_weapon := weapon ;
20305: LD_ADDR_OWVAR 40
20309: PUSH
20310: LD_VAR 0 4
20314: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20315: LD_ADDR_OWVAR 41
20319: PUSH
20320: LD_VAR 0 5
20324: ST_TO_ADDR
// end ;
20325: LD_VAR 0 6
20329: RET
// export function WantPlant ( unit ) ; var task ; begin
20330: LD_INT 0
20332: PPUSH
20333: PPUSH
// result := false ;
20334: LD_ADDR_VAR 0 2
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20342: LD_ADDR_VAR 0 3
20346: PUSH
20347: LD_VAR 0 1
20351: PPUSH
20352: CALL_OW 437
20356: ST_TO_ADDR
// if task then
20357: LD_VAR 0 3
20361: IFFALSE 20389
// if task [ 1 ] [ 1 ] = p then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 1
20370: ARRAY
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: PUSH
20376: LD_STRING p
20378: EQUAL
20379: IFFALSE 20389
// result := true ;
20381: LD_ADDR_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// end ;
20389: LD_VAR 0 2
20393: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20394: LD_INT 0
20396: PPUSH
20397: PPUSH
20398: PPUSH
20399: PPUSH
// if pos < 1 then
20400: LD_VAR 0 2
20404: PUSH
20405: LD_INT 1
20407: LESS
20408: IFFALSE 20412
// exit ;
20410: GO 20715
// if pos = 1 then
20412: LD_VAR 0 2
20416: PUSH
20417: LD_INT 1
20419: EQUAL
20420: IFFALSE 20453
// result := Replace ( arr , pos [ 1 ] , value ) else
20422: LD_ADDR_VAR 0 4
20426: PUSH
20427: LD_VAR 0 1
20431: PPUSH
20432: LD_VAR 0 2
20436: PUSH
20437: LD_INT 1
20439: ARRAY
20440: PPUSH
20441: LD_VAR 0 3
20445: PPUSH
20446: CALL_OW 1
20450: ST_TO_ADDR
20451: GO 20715
// begin tmp := arr ;
20453: LD_ADDR_VAR 0 6
20457: PUSH
20458: LD_VAR 0 1
20462: ST_TO_ADDR
// s_arr := [ tmp ] ;
20463: LD_ADDR_VAR 0 7
20467: PUSH
20468: LD_VAR 0 6
20472: PUSH
20473: EMPTY
20474: LIST
20475: ST_TO_ADDR
// for i = 1 to pos - 1 do
20476: LD_ADDR_VAR 0 5
20480: PUSH
20481: DOUBLE
20482: LD_INT 1
20484: DEC
20485: ST_TO_ADDR
20486: LD_VAR 0 2
20490: PUSH
20491: LD_INT 1
20493: MINUS
20494: PUSH
20495: FOR_TO
20496: IFFALSE 20541
// begin tmp := tmp [ pos [ i ] ] ;
20498: LD_ADDR_VAR 0 6
20502: PUSH
20503: LD_VAR 0 6
20507: PUSH
20508: LD_VAR 0 2
20512: PUSH
20513: LD_VAR 0 5
20517: ARRAY
20518: ARRAY
20519: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20520: LD_ADDR_VAR 0 7
20524: PUSH
20525: LD_VAR 0 7
20529: PUSH
20530: LD_VAR 0 6
20534: PUSH
20535: EMPTY
20536: LIST
20537: ADD
20538: ST_TO_ADDR
// end ;
20539: GO 20495
20541: POP
20542: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20543: LD_ADDR_VAR 0 6
20547: PUSH
20548: LD_VAR 0 6
20552: PPUSH
20553: LD_VAR 0 2
20557: PUSH
20558: LD_VAR 0 2
20562: ARRAY
20563: PPUSH
20564: LD_VAR 0 3
20568: PPUSH
20569: CALL_OW 1
20573: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20574: LD_ADDR_VAR 0 7
20578: PUSH
20579: LD_VAR 0 7
20583: PPUSH
20584: LD_VAR 0 7
20588: PPUSH
20589: LD_VAR 0 6
20593: PPUSH
20594: CALL_OW 1
20598: ST_TO_ADDR
// for i = s_arr downto 2 do
20599: LD_ADDR_VAR 0 5
20603: PUSH
20604: DOUBLE
20605: LD_VAR 0 7
20609: INC
20610: ST_TO_ADDR
20611: LD_INT 2
20613: PUSH
20614: FOR_DOWNTO
20615: IFFALSE 20699
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20617: LD_ADDR_VAR 0 6
20621: PUSH
20622: LD_VAR 0 7
20626: PUSH
20627: LD_VAR 0 5
20631: PUSH
20632: LD_INT 1
20634: MINUS
20635: ARRAY
20636: PPUSH
20637: LD_VAR 0 2
20641: PUSH
20642: LD_VAR 0 5
20646: PUSH
20647: LD_INT 1
20649: MINUS
20650: ARRAY
20651: PPUSH
20652: LD_VAR 0 7
20656: PUSH
20657: LD_VAR 0 5
20661: ARRAY
20662: PPUSH
20663: CALL_OW 1
20667: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20668: LD_ADDR_VAR 0 7
20672: PUSH
20673: LD_VAR 0 7
20677: PPUSH
20678: LD_VAR 0 5
20682: PUSH
20683: LD_INT 1
20685: MINUS
20686: PPUSH
20687: LD_VAR 0 6
20691: PPUSH
20692: CALL_OW 1
20696: ST_TO_ADDR
// end ;
20697: GO 20614
20699: POP
20700: POP
// result := s_arr [ 1 ] ;
20701: LD_ADDR_VAR 0 4
20705: PUSH
20706: LD_VAR 0 7
20710: PUSH
20711: LD_INT 1
20713: ARRAY
20714: ST_TO_ADDR
// end ; end ;
20715: LD_VAR 0 4
20719: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20720: LD_INT 0
20722: PPUSH
20723: PPUSH
// if not list then
20724: LD_VAR 0 1
20728: NOT
20729: IFFALSE 20733
// exit ;
20731: GO 20824
// i := list [ pos1 ] ;
20733: LD_ADDR_VAR 0 5
20737: PUSH
20738: LD_VAR 0 1
20742: PUSH
20743: LD_VAR 0 2
20747: ARRAY
20748: ST_TO_ADDR
// if not i then
20749: LD_VAR 0 5
20753: NOT
20754: IFFALSE 20758
// exit ;
20756: GO 20824
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20758: LD_ADDR_VAR 0 1
20762: PUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_VAR 0 2
20772: PPUSH
20773: LD_VAR 0 1
20777: PUSH
20778: LD_VAR 0 3
20782: ARRAY
20783: PPUSH
20784: CALL_OW 1
20788: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20789: LD_ADDR_VAR 0 1
20793: PUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_VAR 0 3
20803: PPUSH
20804: LD_VAR 0 5
20808: PPUSH
20809: CALL_OW 1
20813: ST_TO_ADDR
// result := list ;
20814: LD_ADDR_VAR 0 4
20818: PUSH
20819: LD_VAR 0 1
20823: ST_TO_ADDR
// end ;
20824: LD_VAR 0 4
20828: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20829: LD_INT 0
20831: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20832: LD_ADDR_VAR 0 5
20836: PUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 250
20846: PPUSH
20847: LD_VAR 0 1
20851: PPUSH
20852: CALL_OW 251
20856: PPUSH
20857: LD_VAR 0 2
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_VAR 0 4
20871: PPUSH
20872: CALL 20882 0 5
20876: ST_TO_ADDR
// end ;
20877: LD_VAR 0 5
20881: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
20886: PPUSH
20887: PPUSH
// if not list then
20888: LD_VAR 0 3
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 21285
// result := [ ] ;
20897: LD_ADDR_VAR 0 6
20901: PUSH
20902: EMPTY
20903: ST_TO_ADDR
// for i in list do
20904: LD_ADDR_VAR 0 7
20908: PUSH
20909: LD_VAR 0 3
20913: PUSH
20914: FOR_IN
20915: IFFALSE 21117
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20917: LD_ADDR_VAR 0 9
20921: PUSH
20922: LD_VAR 0 7
20926: PPUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: LD_VAR 0 2
20936: PPUSH
20937: CALL_OW 297
20941: ST_TO_ADDR
// if not result then
20942: LD_VAR 0 6
20946: NOT
20947: IFFALSE 20973
// result := [ [ i , tmp ] ] else
20949: LD_ADDR_VAR 0 6
20953: PUSH
20954: LD_VAR 0 7
20958: PUSH
20959: LD_VAR 0 9
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: ST_TO_ADDR
20971: GO 21115
// begin if result [ result ] [ 2 ] < tmp then
20973: LD_VAR 0 6
20977: PUSH
20978: LD_VAR 0 6
20982: ARRAY
20983: PUSH
20984: LD_INT 2
20986: ARRAY
20987: PUSH
20988: LD_VAR 0 9
20992: LESS
20993: IFFALSE 21035
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20995: LD_ADDR_VAR 0 6
20999: PUSH
21000: LD_VAR 0 6
21004: PPUSH
21005: LD_VAR 0 6
21009: PUSH
21010: LD_INT 1
21012: PLUS
21013: PPUSH
21014: LD_VAR 0 7
21018: PUSH
21019: LD_VAR 0 9
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PPUSH
21028: CALL_OW 2
21032: ST_TO_ADDR
21033: GO 21115
// for j = 1 to result do
21035: LD_ADDR_VAR 0 8
21039: PUSH
21040: DOUBLE
21041: LD_INT 1
21043: DEC
21044: ST_TO_ADDR
21045: LD_VAR 0 6
21049: PUSH
21050: FOR_TO
21051: IFFALSE 21113
// begin if tmp < result [ j ] [ 2 ] then
21053: LD_VAR 0 9
21057: PUSH
21058: LD_VAR 0 6
21062: PUSH
21063: LD_VAR 0 8
21067: ARRAY
21068: PUSH
21069: LD_INT 2
21071: ARRAY
21072: LESS
21073: IFFALSE 21111
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21075: LD_ADDR_VAR 0 6
21079: PUSH
21080: LD_VAR 0 6
21084: PPUSH
21085: LD_VAR 0 8
21089: PPUSH
21090: LD_VAR 0 7
21094: PUSH
21095: LD_VAR 0 9
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 2
21108: ST_TO_ADDR
// break ;
21109: GO 21113
// end ; end ;
21111: GO 21050
21113: POP
21114: POP
// end ; end ;
21115: GO 20914
21117: POP
21118: POP
// if result and not asc then
21119: LD_VAR 0 6
21123: PUSH
21124: LD_VAR 0 4
21128: NOT
21129: AND
21130: IFFALSE 21205
// begin tmp := result ;
21132: LD_ADDR_VAR 0 9
21136: PUSH
21137: LD_VAR 0 6
21141: ST_TO_ADDR
// for i = tmp downto 1 do
21142: LD_ADDR_VAR 0 7
21146: PUSH
21147: DOUBLE
21148: LD_VAR 0 9
21152: INC
21153: ST_TO_ADDR
21154: LD_INT 1
21156: PUSH
21157: FOR_DOWNTO
21158: IFFALSE 21203
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21160: LD_ADDR_VAR 0 6
21164: PUSH
21165: LD_VAR 0 6
21169: PPUSH
21170: LD_VAR 0 9
21174: PUSH
21175: LD_VAR 0 7
21179: MINUS
21180: PUSH
21181: LD_INT 1
21183: PLUS
21184: PPUSH
21185: LD_VAR 0 9
21189: PUSH
21190: LD_VAR 0 7
21194: ARRAY
21195: PPUSH
21196: CALL_OW 1
21200: ST_TO_ADDR
21201: GO 21157
21203: POP
21204: POP
// end ; tmp := [ ] ;
21205: LD_ADDR_VAR 0 9
21209: PUSH
21210: EMPTY
21211: ST_TO_ADDR
// if mode then
21212: LD_VAR 0 5
21216: IFFALSE 21285
// begin for i = 1 to result do
21218: LD_ADDR_VAR 0 7
21222: PUSH
21223: DOUBLE
21224: LD_INT 1
21226: DEC
21227: ST_TO_ADDR
21228: LD_VAR 0 6
21232: PUSH
21233: FOR_TO
21234: IFFALSE 21273
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21236: LD_ADDR_VAR 0 9
21240: PUSH
21241: LD_VAR 0 9
21245: PPUSH
21246: LD_VAR 0 7
21250: PPUSH
21251: LD_VAR 0 6
21255: PUSH
21256: LD_VAR 0 7
21260: ARRAY
21261: PUSH
21262: LD_INT 1
21264: ARRAY
21265: PPUSH
21266: CALL_OW 1
21270: ST_TO_ADDR
21271: GO 21233
21273: POP
21274: POP
// result := tmp ;
21275: LD_ADDR_VAR 0 6
21279: PUSH
21280: LD_VAR 0 9
21284: ST_TO_ADDR
// end ; end ;
21285: LD_VAR 0 6
21289: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
21294: PPUSH
21295: PPUSH
21296: PPUSH
21297: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21298: LD_ADDR_VAR 0 5
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 0
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: EMPTY
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: ST_TO_ADDR
// if not x or not y then
21320: LD_VAR 0 2
21324: NOT
21325: PUSH
21326: LD_VAR 0 3
21330: NOT
21331: OR
21332: IFFALSE 21336
// exit ;
21334: GO 22986
// if not range then
21336: LD_VAR 0 4
21340: NOT
21341: IFFALSE 21351
// range := 10 ;
21343: LD_ADDR_VAR 0 4
21347: PUSH
21348: LD_INT 10
21350: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21351: LD_ADDR_VAR 0 8
21355: PUSH
21356: LD_INT 81
21358: PUSH
21359: LD_VAR 0 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 92
21370: PUSH
21371: LD_VAR 0 2
21375: PUSH
21376: LD_VAR 0 3
21380: PUSH
21381: LD_VAR 0 4
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: LD_INT 21
21397: PUSH
21398: LD_INT 3
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: PPUSH
21414: CALL_OW 69
21418: ST_TO_ADDR
// if not tmp then
21419: LD_VAR 0 8
21423: NOT
21424: IFFALSE 21428
// exit ;
21426: GO 22986
// for i in tmp do
21428: LD_ADDR_VAR 0 6
21432: PUSH
21433: LD_VAR 0 8
21437: PUSH
21438: FOR_IN
21439: IFFALSE 22961
// begin points := [ 0 , 0 , 0 ] ;
21441: LD_ADDR_VAR 0 9
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
// bpoints := 1 ;
21460: LD_ADDR_VAR 0 10
21464: PUSH
21465: LD_INT 1
21467: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21468: LD_VAR 0 6
21472: PPUSH
21473: CALL_OW 247
21477: PUSH
21478: LD_INT 1
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 22064
21486: POP
// begin if GetClass ( i ) = 1 then
21487: LD_VAR 0 6
21491: PPUSH
21492: CALL_OW 257
21496: PUSH
21497: LD_INT 1
21499: EQUAL
21500: IFFALSE 21521
// points := [ 10 , 5 , 3 ] ;
21502: LD_ADDR_VAR 0 9
21506: PUSH
21507: LD_INT 10
21509: PUSH
21510: LD_INT 5
21512: PUSH
21513: LD_INT 3
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21521: LD_VAR 0 6
21525: PPUSH
21526: CALL_OW 257
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 3
21536: PUSH
21537: LD_INT 4
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: LIST
21544: IN
21545: IFFALSE 21566
// points := [ 3 , 2 , 1 ] ;
21547: LD_ADDR_VAR 0 9
21551: PUSH
21552: LD_INT 3
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21566: LD_VAR 0 6
21570: PPUSH
21571: CALL_OW 257
21575: PUSH
21576: LD_INT 5
21578: EQUAL
21579: IFFALSE 21600
// points := [ 130 , 5 , 2 ] ;
21581: LD_ADDR_VAR 0 9
21585: PUSH
21586: LD_INT 130
21588: PUSH
21589: LD_INT 5
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21600: LD_VAR 0 6
21604: PPUSH
21605: CALL_OW 257
21609: PUSH
21610: LD_INT 8
21612: EQUAL
21613: IFFALSE 21634
// points := [ 35 , 35 , 30 ] ;
21615: LD_ADDR_VAR 0 9
21619: PUSH
21620: LD_INT 35
21622: PUSH
21623: LD_INT 35
21625: PUSH
21626: LD_INT 30
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21634: LD_VAR 0 6
21638: PPUSH
21639: CALL_OW 257
21643: PUSH
21644: LD_INT 9
21646: EQUAL
21647: IFFALSE 21668
// points := [ 20 , 55 , 40 ] ;
21649: LD_ADDR_VAR 0 9
21653: PUSH
21654: LD_INT 20
21656: PUSH
21657: LD_INT 55
21659: PUSH
21660: LD_INT 40
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21668: LD_VAR 0 6
21672: PPUSH
21673: CALL_OW 257
21677: PUSH
21678: LD_INT 12
21680: PUSH
21681: LD_INT 16
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: IN
21688: IFFALSE 21709
// points := [ 5 , 3 , 2 ] ;
21690: LD_ADDR_VAR 0 9
21694: PUSH
21695: LD_INT 5
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21709: LD_VAR 0 6
21713: PPUSH
21714: CALL_OW 257
21718: PUSH
21719: LD_INT 17
21721: EQUAL
21722: IFFALSE 21743
// points := [ 100 , 50 , 75 ] ;
21724: LD_ADDR_VAR 0 9
21728: PUSH
21729: LD_INT 100
21731: PUSH
21732: LD_INT 50
21734: PUSH
21735: LD_INT 75
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21743: LD_VAR 0 6
21747: PPUSH
21748: CALL_OW 257
21752: PUSH
21753: LD_INT 15
21755: EQUAL
21756: IFFALSE 21777
// points := [ 10 , 5 , 3 ] ;
21758: LD_ADDR_VAR 0 9
21762: PUSH
21763: LD_INT 10
21765: PUSH
21766: LD_INT 5
21768: PUSH
21769: LD_INT 3
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21777: LD_VAR 0 6
21781: PPUSH
21782: CALL_OW 257
21786: PUSH
21787: LD_INT 14
21789: EQUAL
21790: IFFALSE 21811
// points := [ 10 , 0 , 0 ] ;
21792: LD_ADDR_VAR 0 9
21796: PUSH
21797: LD_INT 10
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21811: LD_VAR 0 6
21815: PPUSH
21816: CALL_OW 257
21820: PUSH
21821: LD_INT 11
21823: EQUAL
21824: IFFALSE 21845
// points := [ 30 , 10 , 5 ] ;
21826: LD_ADDR_VAR 0 9
21830: PUSH
21831: LD_INT 30
21833: PUSH
21834: LD_INT 10
21836: PUSH
21837: LD_INT 5
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21845: LD_VAR 0 1
21849: PPUSH
21850: LD_INT 5
21852: PPUSH
21853: CALL_OW 321
21857: PUSH
21858: LD_INT 2
21860: EQUAL
21861: IFFALSE 21878
// bpoints := bpoints * 1.8 ;
21863: LD_ADDR_VAR 0 10
21867: PUSH
21868: LD_VAR 0 10
21872: PUSH
21873: LD_REAL  1.80000000000000E+0000
21876: MUL
21877: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21878: LD_VAR 0 6
21882: PPUSH
21883: CALL_OW 257
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: IN
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 51
21914: PPUSH
21915: CALL_OW 321
21919: PUSH
21920: LD_INT 2
21922: EQUAL
21923: AND
21924: IFFALSE 21941
// bpoints := bpoints * 1.2 ;
21926: LD_ADDR_VAR 0 10
21930: PUSH
21931: LD_VAR 0 10
21935: PUSH
21936: LD_REAL  1.20000000000000E+0000
21939: MUL
21940: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21941: LD_VAR 0 6
21945: PPUSH
21946: CALL_OW 257
21950: PUSH
21951: LD_INT 5
21953: PUSH
21954: LD_INT 7
21956: PUSH
21957: LD_INT 9
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: LIST
21964: IN
21965: PUSH
21966: LD_VAR 0 1
21970: PPUSH
21971: LD_INT 52
21973: PPUSH
21974: CALL_OW 321
21978: PUSH
21979: LD_INT 2
21981: EQUAL
21982: AND
21983: IFFALSE 22000
// bpoints := bpoints * 1.5 ;
21985: LD_ADDR_VAR 0 10
21989: PUSH
21990: LD_VAR 0 10
21994: PUSH
21995: LD_REAL  1.50000000000000E+0000
21998: MUL
21999: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22000: LD_VAR 0 1
22004: PPUSH
22005: LD_INT 66
22007: PPUSH
22008: CALL_OW 321
22012: PUSH
22013: LD_INT 2
22015: EQUAL
22016: IFFALSE 22033
// bpoints := bpoints * 1.1 ;
22018: LD_ADDR_VAR 0 10
22022: PUSH
22023: LD_VAR 0 10
22027: PUSH
22028: LD_REAL  1.10000000000000E+0000
22031: MUL
22032: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22033: LD_ADDR_VAR 0 10
22037: PUSH
22038: LD_VAR 0 10
22042: PUSH
22043: LD_VAR 0 6
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 259
22055: PUSH
22056: LD_REAL  1.15000000000000E+0000
22059: MUL
22060: MUL
22061: ST_TO_ADDR
// end ; unit_vehicle :
22062: GO 22890
22064: LD_INT 2
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22878
22072: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22073: LD_VAR 0 6
22077: PPUSH
22078: CALL_OW 264
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 42
22088: PUSH
22089: LD_INT 24
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: IN
22097: IFFALSE 22118
// points := [ 25 , 5 , 3 ] ;
22099: LD_ADDR_VAR 0 9
22103: PUSH
22104: LD_INT 25
22106: PUSH
22107: LD_INT 5
22109: PUSH
22110: LD_INT 3
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22118: LD_VAR 0 6
22122: PPUSH
22123: CALL_OW 264
22127: PUSH
22128: LD_INT 4
22130: PUSH
22131: LD_INT 43
22133: PUSH
22134: LD_INT 25
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: IN
22142: IFFALSE 22163
// points := [ 40 , 15 , 5 ] ;
22144: LD_ADDR_VAR 0 9
22148: PUSH
22149: LD_INT 40
22151: PUSH
22152: LD_INT 15
22154: PUSH
22155: LD_INT 5
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22163: LD_VAR 0 6
22167: PPUSH
22168: CALL_OW 264
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: LD_INT 23
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: IN
22183: IFFALSE 22204
// points := [ 7 , 25 , 8 ] ;
22185: LD_ADDR_VAR 0 9
22189: PUSH
22190: LD_INT 7
22192: PUSH
22193: LD_INT 25
22195: PUSH
22196: LD_INT 8
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22204: LD_VAR 0 6
22208: PPUSH
22209: CALL_OW 264
22213: PUSH
22214: LD_INT 5
22216: PUSH
22217: LD_INT 27
22219: PUSH
22220: LD_INT 44
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: IN
22228: IFFALSE 22249
// points := [ 14 , 50 , 16 ] ;
22230: LD_ADDR_VAR 0 9
22234: PUSH
22235: LD_INT 14
22237: PUSH
22238: LD_INT 50
22240: PUSH
22241: LD_INT 16
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22249: LD_VAR 0 6
22253: PPUSH
22254: CALL_OW 264
22258: PUSH
22259: LD_INT 6
22261: PUSH
22262: LD_INT 46
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: IN
22269: IFFALSE 22290
// points := [ 32 , 120 , 70 ] ;
22271: LD_ADDR_VAR 0 9
22275: PUSH
22276: LD_INT 32
22278: PUSH
22279: LD_INT 120
22281: PUSH
22282: LD_INT 70
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22290: LD_VAR 0 6
22294: PPUSH
22295: CALL_OW 264
22299: PUSH
22300: LD_INT 7
22302: PUSH
22303: LD_INT 28
22305: PUSH
22306: LD_INT 45
22308: PUSH
22309: LD_INT 92
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: IN
22318: IFFALSE 22339
// points := [ 35 , 20 , 45 ] ;
22320: LD_ADDR_VAR 0 9
22324: PUSH
22325: LD_INT 35
22327: PUSH
22328: LD_INT 20
22330: PUSH
22331: LD_INT 45
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22339: LD_VAR 0 6
22343: PPUSH
22344: CALL_OW 264
22348: PUSH
22349: LD_INT 47
22351: PUSH
22352: EMPTY
22353: LIST
22354: IN
22355: IFFALSE 22376
// points := [ 67 , 45 , 75 ] ;
22357: LD_ADDR_VAR 0 9
22361: PUSH
22362: LD_INT 67
22364: PUSH
22365: LD_INT 45
22367: PUSH
22368: LD_INT 75
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22376: LD_VAR 0 6
22380: PPUSH
22381: CALL_OW 264
22385: PUSH
22386: LD_INT 26
22388: PUSH
22389: EMPTY
22390: LIST
22391: IN
22392: IFFALSE 22413
// points := [ 120 , 30 , 80 ] ;
22394: LD_ADDR_VAR 0 9
22398: PUSH
22399: LD_INT 120
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 80
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22413: LD_VAR 0 6
22417: PPUSH
22418: CALL_OW 264
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: EMPTY
22427: LIST
22428: IN
22429: IFFALSE 22450
// points := [ 40 , 1 , 1 ] ;
22431: LD_ADDR_VAR 0 9
22435: PUSH
22436: LD_INT 40
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22450: LD_VAR 0 6
22454: PPUSH
22455: CALL_OW 264
22459: PUSH
22460: LD_INT 29
22462: PUSH
22463: EMPTY
22464: LIST
22465: IN
22466: IFFALSE 22487
// points := [ 70 , 200 , 400 ] ;
22468: LD_ADDR_VAR 0 9
22472: PUSH
22473: LD_INT 70
22475: PUSH
22476: LD_INT 200
22478: PUSH
22479: LD_INT 400
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22487: LD_VAR 0 6
22491: PPUSH
22492: CALL_OW 264
22496: PUSH
22497: LD_INT 14
22499: PUSH
22500: LD_INT 53
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: IN
22507: IFFALSE 22528
// points := [ 40 , 10 , 20 ] ;
22509: LD_ADDR_VAR 0 9
22513: PUSH
22514: LD_INT 40
22516: PUSH
22517: LD_INT 10
22519: PUSH
22520: LD_INT 20
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22528: LD_VAR 0 6
22532: PPUSH
22533: CALL_OW 264
22537: PUSH
22538: LD_INT 9
22540: PUSH
22541: EMPTY
22542: LIST
22543: IN
22544: IFFALSE 22565
// points := [ 5 , 70 , 20 ] ;
22546: LD_ADDR_VAR 0 9
22550: PUSH
22551: LD_INT 5
22553: PUSH
22554: LD_INT 70
22556: PUSH
22557: LD_INT 20
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22565: LD_VAR 0 6
22569: PPUSH
22570: CALL_OW 264
22574: PUSH
22575: LD_INT 10
22577: PUSH
22578: EMPTY
22579: LIST
22580: IN
22581: IFFALSE 22602
// points := [ 35 , 110 , 70 ] ;
22583: LD_ADDR_VAR 0 9
22587: PUSH
22588: LD_INT 35
22590: PUSH
22591: LD_INT 110
22593: PUSH
22594: LD_INT 70
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22602: LD_VAR 0 6
22606: PPUSH
22607: CALL_OW 265
22611: PUSH
22612: LD_INT 25
22614: EQUAL
22615: IFFALSE 22636
// points := [ 80 , 65 , 100 ] ;
22617: LD_ADDR_VAR 0 9
22621: PUSH
22622: LD_INT 80
22624: PUSH
22625: LD_INT 65
22627: PUSH
22628: LD_INT 100
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22636: LD_VAR 0 6
22640: PPUSH
22641: CALL_OW 263
22645: PUSH
22646: LD_INT 1
22648: EQUAL
22649: IFFALSE 22684
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22651: LD_ADDR_VAR 0 10
22655: PUSH
22656: LD_VAR 0 10
22660: PUSH
22661: LD_VAR 0 6
22665: PPUSH
22666: CALL_OW 311
22670: PPUSH
22671: LD_INT 3
22673: PPUSH
22674: CALL_OW 259
22678: PUSH
22679: LD_INT 4
22681: MUL
22682: MUL
22683: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22684: LD_VAR 0 6
22688: PPUSH
22689: CALL_OW 263
22693: PUSH
22694: LD_INT 2
22696: EQUAL
22697: IFFALSE 22748
// begin j := IsControledBy ( i ) ;
22699: LD_ADDR_VAR 0 7
22703: PUSH
22704: LD_VAR 0 6
22708: PPUSH
22709: CALL_OW 312
22713: ST_TO_ADDR
// if j then
22714: LD_VAR 0 7
22718: IFFALSE 22748
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22720: LD_ADDR_VAR 0 10
22724: PUSH
22725: LD_VAR 0 10
22729: PUSH
22730: LD_VAR 0 7
22734: PPUSH
22735: LD_INT 3
22737: PPUSH
22738: CALL_OW 259
22742: PUSH
22743: LD_INT 3
22745: MUL
22746: MUL
22747: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22748: LD_VAR 0 6
22752: PPUSH
22753: CALL_OW 264
22757: PUSH
22758: LD_INT 5
22760: PUSH
22761: LD_INT 6
22763: PUSH
22764: LD_INT 46
22766: PUSH
22767: LD_INT 44
22769: PUSH
22770: LD_INT 47
22772: PUSH
22773: LD_INT 45
22775: PUSH
22776: LD_INT 28
22778: PUSH
22779: LD_INT 7
22781: PUSH
22782: LD_INT 27
22784: PUSH
22785: LD_INT 29
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: IN
22800: PUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: LD_INT 52
22808: PPUSH
22809: CALL_OW 321
22813: PUSH
22814: LD_INT 2
22816: EQUAL
22817: AND
22818: IFFALSE 22835
// bpoints := bpoints * 1.2 ;
22820: LD_ADDR_VAR 0 10
22824: PUSH
22825: LD_VAR 0 10
22829: PUSH
22830: LD_REAL  1.20000000000000E+0000
22833: MUL
22834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22835: LD_VAR 0 6
22839: PPUSH
22840: CALL_OW 264
22844: PUSH
22845: LD_INT 6
22847: PUSH
22848: LD_INT 46
22850: PUSH
22851: LD_INT 47
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: IN
22859: IFFALSE 22876
// bpoints := bpoints * 1.2 ;
22861: LD_ADDR_VAR 0 10
22865: PUSH
22866: LD_VAR 0 10
22870: PUSH
22871: LD_REAL  1.20000000000000E+0000
22874: MUL
22875: ST_TO_ADDR
// end ; unit_building :
22876: GO 22890
22878: LD_INT 3
22880: DOUBLE
22881: EQUAL
22882: IFTRUE 22886
22884: GO 22889
22886: POP
// ; end ;
22887: GO 22890
22889: POP
// for j = 1 to 3 do
22890: LD_ADDR_VAR 0 7
22894: PUSH
22895: DOUBLE
22896: LD_INT 1
22898: DEC
22899: ST_TO_ADDR
22900: LD_INT 3
22902: PUSH
22903: FOR_TO
22904: IFFALSE 22957
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22906: LD_ADDR_VAR 0 5
22910: PUSH
22911: LD_VAR 0 5
22915: PPUSH
22916: LD_VAR 0 7
22920: PPUSH
22921: LD_VAR 0 5
22925: PUSH
22926: LD_VAR 0 7
22930: ARRAY
22931: PUSH
22932: LD_VAR 0 9
22936: PUSH
22937: LD_VAR 0 7
22941: ARRAY
22942: PUSH
22943: LD_VAR 0 10
22947: MUL
22948: PLUS
22949: PPUSH
22950: CALL_OW 1
22954: ST_TO_ADDR
22955: GO 22903
22957: POP
22958: POP
// end ;
22959: GO 21438
22961: POP
22962: POP
// result := Replace ( result , 4 , tmp ) ;
22963: LD_ADDR_VAR 0 5
22967: PUSH
22968: LD_VAR 0 5
22972: PPUSH
22973: LD_INT 4
22975: PPUSH
22976: LD_VAR 0 8
22980: PPUSH
22981: CALL_OW 1
22985: ST_TO_ADDR
// end ;
22986: LD_VAR 0 5
22990: RET
// export function DangerAtRange ( unit , range ) ; begin
22991: LD_INT 0
22993: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22994: LD_ADDR_VAR 0 3
22998: PUSH
22999: LD_VAR 0 1
23003: PPUSH
23004: CALL_OW 255
23008: PPUSH
23009: LD_VAR 0 1
23013: PPUSH
23014: CALL_OW 250
23018: PPUSH
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL_OW 251
23028: PPUSH
23029: LD_VAR 0 2
23033: PPUSH
23034: CALL 21290 0 4
23038: ST_TO_ADDR
// end ;
23039: LD_VAR 0 3
23043: RET
// export function DangerInArea ( side , area ) ; begin
23044: LD_INT 0
23046: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23047: LD_ADDR_VAR 0 3
23051: PUSH
23052: LD_VAR 0 2
23056: PPUSH
23057: LD_INT 81
23059: PUSH
23060: LD_VAR 0 1
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PPUSH
23069: CALL_OW 70
23073: ST_TO_ADDR
// end ;
23074: LD_VAR 0 3
23078: RET
// export function IsExtension ( b ) ; begin
23079: LD_INT 0
23081: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_VAR 0 1
23091: PUSH
23092: LD_INT 23
23094: PUSH
23095: LD_INT 20
23097: PUSH
23098: LD_INT 22
23100: PUSH
23101: LD_INT 17
23103: PUSH
23104: LD_INT 24
23106: PUSH
23107: LD_INT 21
23109: PUSH
23110: LD_INT 19
23112: PUSH
23113: LD_INT 16
23115: PUSH
23116: LD_INT 25
23118: PUSH
23119: LD_INT 18
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: IN
23134: ST_TO_ADDR
// end ;
23135: LD_VAR 0 2
23139: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23140: LD_INT 0
23142: PPUSH
23143: PPUSH
23144: PPUSH
// result := [ ] ;
23145: LD_ADDR_VAR 0 4
23149: PUSH
23150: EMPTY
23151: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23152: LD_ADDR_VAR 0 5
23156: PUSH
23157: LD_VAR 0 2
23161: PPUSH
23162: LD_INT 21
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 70
23176: ST_TO_ADDR
// if not tmp then
23177: LD_VAR 0 5
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23250
// if checkLink then
23186: LD_VAR 0 3
23190: IFFALSE 23240
// begin for i in tmp do
23192: LD_ADDR_VAR 0 6
23196: PUSH
23197: LD_VAR 0 5
23201: PUSH
23202: FOR_IN
23203: IFFALSE 23238
// if GetBase ( i ) <> base then
23205: LD_VAR 0 6
23209: PPUSH
23210: CALL_OW 274
23214: PUSH
23215: LD_VAR 0 1
23219: NONEQUAL
23220: IFFALSE 23236
// ComLinkToBase ( base , i ) ;
23222: LD_VAR 0 1
23226: PPUSH
23227: LD_VAR 0 6
23231: PPUSH
23232: CALL_OW 169
23236: GO 23202
23238: POP
23239: POP
// end ; result := tmp ;
23240: LD_ADDR_VAR 0 4
23244: PUSH
23245: LD_VAR 0 5
23249: ST_TO_ADDR
// end ;
23250: LD_VAR 0 4
23254: RET
// export function ComComplete ( units , b ) ; var i ; begin
23255: LD_INT 0
23257: PPUSH
23258: PPUSH
// if not units then
23259: LD_VAR 0 1
23263: NOT
23264: IFFALSE 23268
// exit ;
23266: GO 23358
// for i in units do
23268: LD_ADDR_VAR 0 4
23272: PUSH
23273: LD_VAR 0 1
23277: PUSH
23278: FOR_IN
23279: IFFALSE 23356
// if BuildingStatus ( b ) = bs_build then
23281: LD_VAR 0 2
23285: PPUSH
23286: CALL_OW 461
23290: PUSH
23291: LD_INT 1
23293: EQUAL
23294: IFFALSE 23354
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23296: LD_VAR 0 4
23300: PPUSH
23301: LD_STRING h
23303: PUSH
23304: LD_VAR 0 2
23308: PPUSH
23309: CALL_OW 250
23313: PUSH
23314: LD_VAR 0 2
23318: PPUSH
23319: CALL_OW 251
23323: PUSH
23324: LD_VAR 0 2
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: PPUSH
23350: CALL_OW 446
23354: GO 23278
23356: POP
23357: POP
// end ;
23358: LD_VAR 0 3
23362: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23363: LD_INT 0
23365: PPUSH
23366: PPUSH
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23371: LD_VAR 0 1
23375: NOT
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 263
23386: PUSH
23387: LD_INT 2
23389: NONEQUAL
23390: OR
23391: IFFALSE 23395
// exit ;
23393: GO 23711
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23395: LD_ADDR_VAR 0 6
23399: PUSH
23400: LD_INT 22
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 255
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: LD_INT 30
23422: PUSH
23423: LD_INT 36
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 34
23432: PUSH
23433: LD_INT 31
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PPUSH
23449: CALL_OW 69
23453: ST_TO_ADDR
// if not tmp then
23454: LD_VAR 0 6
23458: NOT
23459: IFFALSE 23463
// exit ;
23461: GO 23711
// result := [ ] ;
23463: LD_ADDR_VAR 0 2
23467: PUSH
23468: EMPTY
23469: ST_TO_ADDR
// for i in tmp do
23470: LD_ADDR_VAR 0 3
23474: PUSH
23475: LD_VAR 0 6
23479: PUSH
23480: FOR_IN
23481: IFFALSE 23552
// begin t := UnitsInside ( i ) ;
23483: LD_ADDR_VAR 0 4
23487: PUSH
23488: LD_VAR 0 3
23492: PPUSH
23493: CALL_OW 313
23497: ST_TO_ADDR
// if t then
23498: LD_VAR 0 4
23502: IFFALSE 23550
// for j in t do
23504: LD_ADDR_VAR 0 7
23508: PUSH
23509: LD_VAR 0 4
23513: PUSH
23514: FOR_IN
23515: IFFALSE 23548
// result := Replace ( result , result + 1 , j ) ;
23517: LD_ADDR_VAR 0 2
23521: PUSH
23522: LD_VAR 0 2
23526: PPUSH
23527: LD_VAR 0 2
23531: PUSH
23532: LD_INT 1
23534: PLUS
23535: PPUSH
23536: LD_VAR 0 7
23540: PPUSH
23541: CALL_OW 1
23545: ST_TO_ADDR
23546: GO 23514
23548: POP
23549: POP
// end ;
23550: GO 23480
23552: POP
23553: POP
// if not result then
23554: LD_VAR 0 2
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 23711
// mech := result [ 1 ] ;
23563: LD_ADDR_VAR 0 5
23567: PUSH
23568: LD_VAR 0 2
23572: PUSH
23573: LD_INT 1
23575: ARRAY
23576: ST_TO_ADDR
// if result > 1 then
23577: LD_VAR 0 2
23581: PUSH
23582: LD_INT 1
23584: GREATER
23585: IFFALSE 23697
// begin for i = 2 to result do
23587: LD_ADDR_VAR 0 3
23591: PUSH
23592: DOUBLE
23593: LD_INT 2
23595: DEC
23596: ST_TO_ADDR
23597: LD_VAR 0 2
23601: PUSH
23602: FOR_TO
23603: IFFALSE 23695
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23605: LD_ADDR_VAR 0 4
23609: PUSH
23610: LD_VAR 0 2
23614: PUSH
23615: LD_VAR 0 3
23619: ARRAY
23620: PPUSH
23621: LD_INT 3
23623: PPUSH
23624: CALL_OW 259
23628: PUSH
23629: LD_VAR 0 2
23633: PUSH
23634: LD_VAR 0 3
23638: ARRAY
23639: PPUSH
23640: CALL_OW 432
23644: MINUS
23645: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23646: LD_VAR 0 4
23650: PUSH
23651: LD_VAR 0 5
23655: PPUSH
23656: LD_INT 3
23658: PPUSH
23659: CALL_OW 259
23663: PUSH
23664: LD_VAR 0 5
23668: PPUSH
23669: CALL_OW 432
23673: MINUS
23674: GREATEREQUAL
23675: IFFALSE 23693
// mech := result [ i ] ;
23677: LD_ADDR_VAR 0 5
23681: PUSH
23682: LD_VAR 0 2
23686: PUSH
23687: LD_VAR 0 3
23691: ARRAY
23692: ST_TO_ADDR
// end ;
23693: GO 23602
23695: POP
23696: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23697: LD_VAR 0 1
23701: PPUSH
23702: LD_VAR 0 5
23706: PPUSH
23707: CALL_OW 135
// end ;
23711: LD_VAR 0 2
23715: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23716: LD_INT 0
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
23729: PPUSH
23730: PPUSH
// result := [ ] ;
23731: LD_ADDR_VAR 0 7
23735: PUSH
23736: EMPTY
23737: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 266
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: IN
23758: NOT
23759: IFFALSE 23763
// exit ;
23761: GO 25397
// if name then
23763: LD_VAR 0 3
23767: IFFALSE 23783
// SetBName ( base_dep , name ) ;
23769: LD_VAR 0 1
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: CALL_OW 500
// base := GetBase ( base_dep ) ;
23783: LD_ADDR_VAR 0 15
23787: PUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 274
23797: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23798: LD_ADDR_VAR 0 16
23802: PUSH
23803: LD_VAR 0 1
23807: PPUSH
23808: CALL_OW 255
23812: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23813: LD_ADDR_VAR 0 17
23817: PUSH
23818: LD_VAR 0 1
23822: PPUSH
23823: CALL_OW 248
23827: ST_TO_ADDR
// if sources then
23828: LD_VAR 0 5
23832: IFFALSE 23879
// for i = 1 to 3 do
23834: LD_ADDR_VAR 0 8
23838: PUSH
23839: DOUBLE
23840: LD_INT 1
23842: DEC
23843: ST_TO_ADDR
23844: LD_INT 3
23846: PUSH
23847: FOR_TO
23848: IFFALSE 23877
// AddResourceType ( base , i , sources [ i ] ) ;
23850: LD_VAR 0 15
23854: PPUSH
23855: LD_VAR 0 8
23859: PPUSH
23860: LD_VAR 0 5
23864: PUSH
23865: LD_VAR 0 8
23869: ARRAY
23870: PPUSH
23871: CALL_OW 276
23875: GO 23847
23877: POP
23878: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23879: LD_ADDR_VAR 0 18
23883: PUSH
23884: LD_VAR 0 15
23888: PPUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_INT 1
23896: PPUSH
23897: CALL 23140 0 3
23901: ST_TO_ADDR
// InitHc ;
23902: CALL_OW 19
// InitUc ;
23906: CALL_OW 18
// uc_side := side ;
23910: LD_ADDR_OWVAR 20
23914: PUSH
23915: LD_VAR 0 16
23919: ST_TO_ADDR
// uc_nation := nation ;
23920: LD_ADDR_OWVAR 21
23924: PUSH
23925: LD_VAR 0 17
23929: ST_TO_ADDR
// if buildings then
23930: LD_VAR 0 18
23934: IFFALSE 25256
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23936: LD_ADDR_VAR 0 19
23940: PUSH
23941: LD_VAR 0 18
23945: PPUSH
23946: LD_INT 2
23948: PUSH
23949: LD_INT 30
23951: PUSH
23952: LD_INT 29
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 30
23961: PUSH
23962: LD_INT 30
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: PPUSH
23974: CALL_OW 72
23978: ST_TO_ADDR
// if tmp then
23979: LD_VAR 0 19
23983: IFFALSE 24031
// for i in tmp do
23985: LD_ADDR_VAR 0 8
23989: PUSH
23990: LD_VAR 0 19
23994: PUSH
23995: FOR_IN
23996: IFFALSE 24029
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23998: LD_VAR 0 8
24002: PPUSH
24003: CALL_OW 250
24007: PPUSH
24008: LD_VAR 0 8
24012: PPUSH
24013: CALL_OW 251
24017: PPUSH
24018: LD_VAR 0 16
24022: PPUSH
24023: CALL_OW 441
24027: GO 23995
24029: POP
24030: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24031: LD_VAR 0 18
24035: PPUSH
24036: LD_INT 2
24038: PUSH
24039: LD_INT 30
24041: PUSH
24042: LD_INT 32
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: LD_INT 33
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: PPUSH
24064: CALL_OW 72
24068: IFFALSE 24156
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24070: LD_ADDR_VAR 0 8
24074: PUSH
24075: LD_VAR 0 18
24079: PPUSH
24080: LD_INT 2
24082: PUSH
24083: LD_INT 30
24085: PUSH
24086: LD_INT 32
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_INT 33
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: PPUSH
24108: CALL_OW 72
24112: PUSH
24113: FOR_IN
24114: IFFALSE 24154
// begin if not GetBWeapon ( i ) then
24116: LD_VAR 0 8
24120: PPUSH
24121: CALL_OW 269
24125: NOT
24126: IFFALSE 24152
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24128: LD_VAR 0 8
24132: PPUSH
24133: LD_VAR 0 8
24137: PPUSH
24138: LD_VAR 0 2
24142: PPUSH
24143: CALL 25402 0 2
24147: PPUSH
24148: CALL_OW 431
// end ;
24152: GO 24113
24154: POP
24155: POP
// end ; for i = 1 to personel do
24156: LD_ADDR_VAR 0 8
24160: PUSH
24161: DOUBLE
24162: LD_INT 1
24164: DEC
24165: ST_TO_ADDR
24166: LD_VAR 0 6
24170: PUSH
24171: FOR_TO
24172: IFFALSE 25236
// begin if i > 4 then
24174: LD_VAR 0 8
24178: PUSH
24179: LD_INT 4
24181: GREATER
24182: IFFALSE 24186
// break ;
24184: GO 25236
// case i of 1 :
24186: LD_VAR 0 8
24190: PUSH
24191: LD_INT 1
24193: DOUBLE
24194: EQUAL
24195: IFTRUE 24199
24197: GO 24279
24199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24200: LD_ADDR_VAR 0 12
24204: PUSH
24205: LD_VAR 0 18
24209: PPUSH
24210: LD_INT 22
24212: PUSH
24213: LD_VAR 0 16
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 58
24224: PUSH
24225: EMPTY
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 30
24233: PUSH
24234: LD_INT 32
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 30
24243: PUSH
24244: LD_INT 4
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 30
24253: PUSH
24254: LD_INT 5
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: PPUSH
24272: CALL_OW 72
24276: ST_TO_ADDR
24277: GO 24501
24279: LD_INT 2
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24349
24287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24288: LD_ADDR_VAR 0 12
24292: PUSH
24293: LD_VAR 0 18
24297: PPUSH
24298: LD_INT 22
24300: PUSH
24301: LD_VAR 0 16
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 30
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 30
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PPUSH
24342: CALL_OW 72
24346: ST_TO_ADDR
24347: GO 24501
24349: LD_INT 3
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24419
24357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24358: LD_ADDR_VAR 0 12
24362: PUSH
24363: LD_VAR 0 18
24367: PPUSH
24368: LD_INT 22
24370: PUSH
24371: LD_VAR 0 16
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: LD_INT 30
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 30
24395: PUSH
24396: LD_INT 3
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PPUSH
24412: CALL_OW 72
24416: ST_TO_ADDR
24417: GO 24501
24419: LD_INT 4
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24500
24427: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24428: LD_ADDR_VAR 0 12
24432: PUSH
24433: LD_VAR 0 18
24437: PPUSH
24438: LD_INT 22
24440: PUSH
24441: LD_VAR 0 16
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 2
24452: PUSH
24453: LD_INT 30
24455: PUSH
24456: LD_INT 6
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 30
24465: PUSH
24466: LD_INT 7
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 30
24475: PUSH
24476: LD_INT 8
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PPUSH
24493: CALL_OW 72
24497: ST_TO_ADDR
24498: GO 24501
24500: POP
// if i = 1 then
24501: LD_VAR 0 8
24505: PUSH
24506: LD_INT 1
24508: EQUAL
24509: IFFALSE 24620
// begin tmp := [ ] ;
24511: LD_ADDR_VAR 0 19
24515: PUSH
24516: EMPTY
24517: ST_TO_ADDR
// for j in f do
24518: LD_ADDR_VAR 0 9
24522: PUSH
24523: LD_VAR 0 12
24527: PUSH
24528: FOR_IN
24529: IFFALSE 24602
// if GetBType ( j ) = b_bunker then
24531: LD_VAR 0 9
24535: PPUSH
24536: CALL_OW 266
24540: PUSH
24541: LD_INT 32
24543: EQUAL
24544: IFFALSE 24571
// tmp := Insert ( tmp , 1 , j ) else
24546: LD_ADDR_VAR 0 19
24550: PUSH
24551: LD_VAR 0 19
24555: PPUSH
24556: LD_INT 1
24558: PPUSH
24559: LD_VAR 0 9
24563: PPUSH
24564: CALL_OW 2
24568: ST_TO_ADDR
24569: GO 24600
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24571: LD_ADDR_VAR 0 19
24575: PUSH
24576: LD_VAR 0 19
24580: PPUSH
24581: LD_VAR 0 19
24585: PUSH
24586: LD_INT 1
24588: PLUS
24589: PPUSH
24590: LD_VAR 0 9
24594: PPUSH
24595: CALL_OW 2
24599: ST_TO_ADDR
24600: GO 24528
24602: POP
24603: POP
// if tmp then
24604: LD_VAR 0 19
24608: IFFALSE 24620
// f := tmp ;
24610: LD_ADDR_VAR 0 12
24614: PUSH
24615: LD_VAR 0 19
24619: ST_TO_ADDR
// end ; x := personel [ i ] ;
24620: LD_ADDR_VAR 0 13
24624: PUSH
24625: LD_VAR 0 6
24629: PUSH
24630: LD_VAR 0 8
24634: ARRAY
24635: ST_TO_ADDR
// if x = - 1 then
24636: LD_VAR 0 13
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: EQUAL
24645: IFFALSE 24854
// begin for j in f do
24647: LD_ADDR_VAR 0 9
24651: PUSH
24652: LD_VAR 0 12
24656: PUSH
24657: FOR_IN
24658: IFFALSE 24850
// repeat InitHc ;
24660: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24664: LD_VAR 0 9
24668: PPUSH
24669: CALL_OW 266
24673: PUSH
24674: LD_INT 5
24676: EQUAL
24677: IFFALSE 24747
// begin if UnitsInside ( j ) < 3 then
24679: LD_VAR 0 9
24683: PPUSH
24684: CALL_OW 313
24688: PUSH
24689: LD_INT 3
24691: LESS
24692: IFFALSE 24728
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24694: LD_INT 0
24696: PPUSH
24697: LD_INT 5
24699: PUSH
24700: LD_INT 8
24702: PUSH
24703: LD_INT 9
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: PUSH
24711: LD_VAR 0 17
24715: ARRAY
24716: PPUSH
24717: LD_VAR 0 4
24721: PPUSH
24722: CALL_OW 380
24726: GO 24745
// PrepareHuman ( false , i , skill ) ;
24728: LD_INT 0
24730: PPUSH
24731: LD_VAR 0 8
24735: PPUSH
24736: LD_VAR 0 4
24740: PPUSH
24741: CALL_OW 380
// end else
24745: GO 24764
// PrepareHuman ( false , i , skill ) ;
24747: LD_INT 0
24749: PPUSH
24750: LD_VAR 0 8
24754: PPUSH
24755: LD_VAR 0 4
24759: PPUSH
24760: CALL_OW 380
// un := CreateHuman ;
24764: LD_ADDR_VAR 0 14
24768: PUSH
24769: CALL_OW 44
24773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24774: LD_ADDR_VAR 0 7
24778: PUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_INT 1
24786: PPUSH
24787: LD_VAR 0 14
24791: PPUSH
24792: CALL_OW 2
24796: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24797: LD_VAR 0 14
24801: PPUSH
24802: LD_VAR 0 9
24806: PPUSH
24807: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24811: LD_VAR 0 9
24815: PPUSH
24816: CALL_OW 313
24820: PUSH
24821: LD_INT 6
24823: EQUAL
24824: PUSH
24825: LD_VAR 0 9
24829: PPUSH
24830: CALL_OW 266
24834: PUSH
24835: LD_INT 32
24837: PUSH
24838: LD_INT 31
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: IN
24845: OR
24846: IFFALSE 24660
24848: GO 24657
24850: POP
24851: POP
// end else
24852: GO 25234
// for j = 1 to x do
24854: LD_ADDR_VAR 0 9
24858: PUSH
24859: DOUBLE
24860: LD_INT 1
24862: DEC
24863: ST_TO_ADDR
24864: LD_VAR 0 13
24868: PUSH
24869: FOR_TO
24870: IFFALSE 25232
// begin InitHc ;
24872: CALL_OW 19
// if not f then
24876: LD_VAR 0 12
24880: NOT
24881: IFFALSE 24970
// begin PrepareHuman ( false , i , skill ) ;
24883: LD_INT 0
24885: PPUSH
24886: LD_VAR 0 8
24890: PPUSH
24891: LD_VAR 0 4
24895: PPUSH
24896: CALL_OW 380
// un := CreateHuman ;
24900: LD_ADDR_VAR 0 14
24904: PUSH
24905: CALL_OW 44
24909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24910: LD_ADDR_VAR 0 7
24914: PUSH
24915: LD_VAR 0 7
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: LD_VAR 0 14
24927: PPUSH
24928: CALL_OW 2
24932: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24933: LD_VAR 0 14
24937: PPUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 250
24947: PPUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 251
24957: PPUSH
24958: LD_INT 10
24960: PPUSH
24961: LD_INT 0
24963: PPUSH
24964: CALL_OW 50
// continue ;
24968: GO 24869
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24970: LD_VAR 0 12
24974: PUSH
24975: LD_INT 1
24977: ARRAY
24978: PPUSH
24979: CALL_OW 313
24983: PUSH
24984: LD_VAR 0 12
24988: PUSH
24989: LD_INT 1
24991: ARRAY
24992: PPUSH
24993: CALL_OW 266
24997: PUSH
24998: LD_INT 32
25000: PUSH
25001: LD_INT 31
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: IN
25008: AND
25009: PUSH
25010: LD_VAR 0 12
25014: PUSH
25015: LD_INT 1
25017: ARRAY
25018: PPUSH
25019: CALL_OW 313
25023: PUSH
25024: LD_INT 6
25026: EQUAL
25027: OR
25028: IFFALSE 25048
// f := Delete ( f , 1 ) ;
25030: LD_ADDR_VAR 0 12
25034: PUSH
25035: LD_VAR 0 12
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 3
25047: ST_TO_ADDR
// if not f then
25048: LD_VAR 0 12
25052: NOT
25053: IFFALSE 25071
// begin x := x + 2 ;
25055: LD_ADDR_VAR 0 13
25059: PUSH
25060: LD_VAR 0 13
25064: PUSH
25065: LD_INT 2
25067: PLUS
25068: ST_TO_ADDR
// continue ;
25069: GO 24869
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25071: LD_VAR 0 12
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PPUSH
25080: CALL_OW 266
25084: PUSH
25085: LD_INT 5
25087: EQUAL
25088: IFFALSE 25162
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25090: LD_VAR 0 12
25094: PUSH
25095: LD_INT 1
25097: ARRAY
25098: PPUSH
25099: CALL_OW 313
25103: PUSH
25104: LD_INT 3
25106: LESS
25107: IFFALSE 25143
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25109: LD_INT 0
25111: PPUSH
25112: LD_INT 5
25114: PUSH
25115: LD_INT 8
25117: PUSH
25118: LD_INT 9
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: PUSH
25126: LD_VAR 0 17
25130: ARRAY
25131: PPUSH
25132: LD_VAR 0 4
25136: PPUSH
25137: CALL_OW 380
25141: GO 25160
// PrepareHuman ( false , i , skill ) ;
25143: LD_INT 0
25145: PPUSH
25146: LD_VAR 0 8
25150: PPUSH
25151: LD_VAR 0 4
25155: PPUSH
25156: CALL_OW 380
// end else
25160: GO 25179
// PrepareHuman ( false , i , skill ) ;
25162: LD_INT 0
25164: PPUSH
25165: LD_VAR 0 8
25169: PPUSH
25170: LD_VAR 0 4
25174: PPUSH
25175: CALL_OW 380
// un := CreateHuman ;
25179: LD_ADDR_VAR 0 14
25183: PUSH
25184: CALL_OW 44
25188: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25189: LD_ADDR_VAR 0 7
25193: PUSH
25194: LD_VAR 0 7
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: LD_VAR 0 14
25206: PPUSH
25207: CALL_OW 2
25211: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25212: LD_VAR 0 14
25216: PPUSH
25217: LD_VAR 0 12
25221: PUSH
25222: LD_INT 1
25224: ARRAY
25225: PPUSH
25226: CALL_OW 52
// end ;
25230: GO 24869
25232: POP
25233: POP
// end ;
25234: GO 24171
25236: POP
25237: POP
// result := result ^ buildings ;
25238: LD_ADDR_VAR 0 7
25242: PUSH
25243: LD_VAR 0 7
25247: PUSH
25248: LD_VAR 0 18
25252: ADD
25253: ST_TO_ADDR
// end else
25254: GO 25397
// begin for i = 1 to personel do
25256: LD_ADDR_VAR 0 8
25260: PUSH
25261: DOUBLE
25262: LD_INT 1
25264: DEC
25265: ST_TO_ADDR
25266: LD_VAR 0 6
25270: PUSH
25271: FOR_TO
25272: IFFALSE 25395
// begin if i > 4 then
25274: LD_VAR 0 8
25278: PUSH
25279: LD_INT 4
25281: GREATER
25282: IFFALSE 25286
// break ;
25284: GO 25395
// x := personel [ i ] ;
25286: LD_ADDR_VAR 0 13
25290: PUSH
25291: LD_VAR 0 6
25295: PUSH
25296: LD_VAR 0 8
25300: ARRAY
25301: ST_TO_ADDR
// if x = - 1 then
25302: LD_VAR 0 13
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: EQUAL
25311: IFFALSE 25315
// continue ;
25313: GO 25271
// PrepareHuman ( false , i , skill ) ;
25315: LD_INT 0
25317: PPUSH
25318: LD_VAR 0 8
25322: PPUSH
25323: LD_VAR 0 4
25327: PPUSH
25328: CALL_OW 380
// un := CreateHuman ;
25332: LD_ADDR_VAR 0 14
25336: PUSH
25337: CALL_OW 44
25341: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25342: LD_VAR 0 14
25346: PPUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 250
25356: PPUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 251
25366: PPUSH
25367: LD_INT 10
25369: PPUSH
25370: LD_INT 0
25372: PPUSH
25373: CALL_OW 50
// result := result ^ un ;
25377: LD_ADDR_VAR 0 7
25381: PUSH
25382: LD_VAR 0 7
25386: PUSH
25387: LD_VAR 0 14
25391: ADD
25392: ST_TO_ADDR
// end ;
25393: GO 25271
25395: POP
25396: POP
// end ; end ;
25397: LD_VAR 0 7
25401: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
25406: PPUSH
25407: PPUSH
25408: PPUSH
25409: PPUSH
25410: PPUSH
25411: PPUSH
25412: PPUSH
25413: PPUSH
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
// result := false ;
25420: LD_ADDR_VAR 0 3
25424: PUSH
25425: LD_INT 0
25427: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25428: LD_VAR 0 1
25432: NOT
25433: PUSH
25434: LD_VAR 0 1
25438: PPUSH
25439: CALL_OW 266
25443: PUSH
25444: LD_INT 32
25446: PUSH
25447: LD_INT 33
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: IN
25454: NOT
25455: OR
25456: IFFALSE 25460
// exit ;
25458: GO 26569
// nat := GetNation ( tower ) ;
25460: LD_ADDR_VAR 0 12
25464: PUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL_OW 248
25474: ST_TO_ADDR
// side := GetSide ( tower ) ;
25475: LD_ADDR_VAR 0 16
25479: PUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 255
25489: ST_TO_ADDR
// x := GetX ( tower ) ;
25490: LD_ADDR_VAR 0 10
25494: PUSH
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 250
25504: ST_TO_ADDR
// y := GetY ( tower ) ;
25505: LD_ADDR_VAR 0 11
25509: PUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 251
25519: ST_TO_ADDR
// if not x or not y then
25520: LD_VAR 0 10
25524: NOT
25525: PUSH
25526: LD_VAR 0 11
25530: NOT
25531: OR
25532: IFFALSE 25536
// exit ;
25534: GO 26569
// weapon := 0 ;
25536: LD_ADDR_VAR 0 18
25540: PUSH
25541: LD_INT 0
25543: ST_TO_ADDR
// fac_list := [ ] ;
25544: LD_ADDR_VAR 0 17
25548: PUSH
25549: EMPTY
25550: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25551: LD_ADDR_VAR 0 6
25555: PUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 274
25565: PPUSH
25566: LD_VAR 0 2
25570: PPUSH
25571: LD_INT 0
25573: PPUSH
25574: CALL 23140 0 3
25578: PPUSH
25579: LD_INT 30
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL_OW 72
25593: ST_TO_ADDR
// if not factories then
25594: LD_VAR 0 6
25598: NOT
25599: IFFALSE 25603
// exit ;
25601: GO 26569
// for i in factories do
25603: LD_ADDR_VAR 0 8
25607: PUSH
25608: LD_VAR 0 6
25612: PUSH
25613: FOR_IN
25614: IFFALSE 25639
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25616: LD_ADDR_VAR 0 17
25620: PUSH
25621: LD_VAR 0 17
25625: PUSH
25626: LD_VAR 0 8
25630: PPUSH
25631: CALL_OW 478
25635: UNION
25636: ST_TO_ADDR
25637: GO 25613
25639: POP
25640: POP
// if not fac_list then
25641: LD_VAR 0 17
25645: NOT
25646: IFFALSE 25650
// exit ;
25648: GO 26569
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25650: LD_ADDR_VAR 0 5
25654: PUSH
25655: LD_INT 4
25657: PUSH
25658: LD_INT 5
25660: PUSH
25661: LD_INT 9
25663: PUSH
25664: LD_INT 10
25666: PUSH
25667: LD_INT 6
25669: PUSH
25670: LD_INT 7
25672: PUSH
25673: LD_INT 11
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 27
25687: PUSH
25688: LD_INT 28
25690: PUSH
25691: LD_INT 26
25693: PUSH
25694: LD_INT 30
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 43
25705: PUSH
25706: LD_INT 44
25708: PUSH
25709: LD_INT 46
25711: PUSH
25712: LD_INT 45
25714: PUSH
25715: LD_INT 47
25717: PUSH
25718: LD_INT 49
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: PUSH
25734: LD_VAR 0 12
25738: ARRAY
25739: ST_TO_ADDR
// list := list isect fac_list ;
25740: LD_ADDR_VAR 0 5
25744: PUSH
25745: LD_VAR 0 5
25749: PUSH
25750: LD_VAR 0 17
25754: ISECT
25755: ST_TO_ADDR
// if not list then
25756: LD_VAR 0 5
25760: NOT
25761: IFFALSE 25765
// exit ;
25763: GO 26569
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25765: LD_VAR 0 12
25769: PUSH
25770: LD_INT 3
25772: EQUAL
25773: PUSH
25774: LD_INT 49
25776: PUSH
25777: LD_VAR 0 5
25781: IN
25782: AND
25783: PUSH
25784: LD_INT 31
25786: PPUSH
25787: LD_VAR 0 16
25791: PPUSH
25792: CALL_OW 321
25796: PUSH
25797: LD_INT 2
25799: EQUAL
25800: AND
25801: IFFALSE 25861
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25803: LD_INT 22
25805: PUSH
25806: LD_VAR 0 16
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 35
25817: PUSH
25818: LD_INT 49
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 91
25827: PUSH
25828: LD_VAR 0 1
25832: PUSH
25833: LD_INT 10
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: PPUSH
25846: CALL_OW 69
25850: NOT
25851: IFFALSE 25861
// weapon := ru_time_lapser ;
25853: LD_ADDR_VAR 0 18
25857: PUSH
25858: LD_INT 49
25860: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25861: LD_VAR 0 12
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: IN
25876: PUSH
25877: LD_INT 11
25879: PUSH
25880: LD_VAR 0 5
25884: IN
25885: PUSH
25886: LD_INT 30
25888: PUSH
25889: LD_VAR 0 5
25893: IN
25894: OR
25895: AND
25896: PUSH
25897: LD_INT 6
25899: PPUSH
25900: LD_VAR 0 16
25904: PPUSH
25905: CALL_OW 321
25909: PUSH
25910: LD_INT 2
25912: EQUAL
25913: AND
25914: IFFALSE 26079
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25916: LD_INT 22
25918: PUSH
25919: LD_VAR 0 16
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 35
25933: PUSH
25934: LD_INT 11
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 35
25943: PUSH
25944: LD_INT 30
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 91
25958: PUSH
25959: LD_VAR 0 1
25963: PUSH
25964: LD_INT 18
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: NOT
25982: PUSH
25983: LD_INT 22
25985: PUSH
25986: LD_VAR 0 16
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 30
26000: PUSH
26001: LD_INT 32
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 30
26010: PUSH
26011: LD_INT 33
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 91
26025: PUSH
26026: LD_VAR 0 1
26030: PUSH
26031: LD_INT 12
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: PUSH
26044: EMPTY
26045: LIST
26046: PPUSH
26047: CALL_OW 69
26051: PUSH
26052: LD_INT 2
26054: GREATER
26055: AND
26056: IFFALSE 26079
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26058: LD_ADDR_VAR 0 18
26062: PUSH
26063: LD_INT 11
26065: PUSH
26066: LD_INT 30
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_VAR 0 12
26077: ARRAY
26078: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26079: LD_VAR 0 18
26083: NOT
26084: PUSH
26085: LD_INT 40
26087: PPUSH
26088: LD_VAR 0 16
26092: PPUSH
26093: CALL_OW 321
26097: PUSH
26098: LD_INT 2
26100: EQUAL
26101: AND
26102: PUSH
26103: LD_INT 7
26105: PUSH
26106: LD_VAR 0 5
26110: IN
26111: PUSH
26112: LD_INT 28
26114: PUSH
26115: LD_VAR 0 5
26119: IN
26120: OR
26121: PUSH
26122: LD_INT 45
26124: PUSH
26125: LD_VAR 0 5
26129: IN
26130: OR
26131: AND
26132: IFFALSE 26386
// begin hex := GetHexInfo ( x , y ) ;
26134: LD_ADDR_VAR 0 4
26138: PUSH
26139: LD_VAR 0 10
26143: PPUSH
26144: LD_VAR 0 11
26148: PPUSH
26149: CALL_OW 546
26153: ST_TO_ADDR
// if hex [ 1 ] then
26154: LD_VAR 0 4
26158: PUSH
26159: LD_INT 1
26161: ARRAY
26162: IFFALSE 26166
// exit ;
26164: GO 26569
// height := hex [ 2 ] ;
26166: LD_ADDR_VAR 0 15
26170: PUSH
26171: LD_VAR 0 4
26175: PUSH
26176: LD_INT 2
26178: ARRAY
26179: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26180: LD_ADDR_VAR 0 14
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: LD_INT 5
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
// for i in tmp do
26203: LD_ADDR_VAR 0 8
26207: PUSH
26208: LD_VAR 0 14
26212: PUSH
26213: FOR_IN
26214: IFFALSE 26384
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26216: LD_ADDR_VAR 0 9
26220: PUSH
26221: LD_VAR 0 10
26225: PPUSH
26226: LD_VAR 0 8
26230: PPUSH
26231: LD_INT 5
26233: PPUSH
26234: CALL_OW 272
26238: PUSH
26239: LD_VAR 0 11
26243: PPUSH
26244: LD_VAR 0 8
26248: PPUSH
26249: LD_INT 5
26251: PPUSH
26252: CALL_OW 273
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26261: LD_VAR 0 9
26265: PUSH
26266: LD_INT 1
26268: ARRAY
26269: PPUSH
26270: LD_VAR 0 9
26274: PUSH
26275: LD_INT 2
26277: ARRAY
26278: PPUSH
26279: CALL_OW 488
26283: IFFALSE 26382
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26285: LD_ADDR_VAR 0 4
26289: PUSH
26290: LD_VAR 0 9
26294: PUSH
26295: LD_INT 1
26297: ARRAY
26298: PPUSH
26299: LD_VAR 0 9
26303: PUSH
26304: LD_INT 2
26306: ARRAY
26307: PPUSH
26308: CALL_OW 546
26312: ST_TO_ADDR
// if hex [ 1 ] then
26313: LD_VAR 0 4
26317: PUSH
26318: LD_INT 1
26320: ARRAY
26321: IFFALSE 26325
// continue ;
26323: GO 26213
// h := hex [ 2 ] ;
26325: LD_ADDR_VAR 0 13
26329: PUSH
26330: LD_VAR 0 4
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: ST_TO_ADDR
// if h + 7 < height then
26339: LD_VAR 0 13
26343: PUSH
26344: LD_INT 7
26346: PLUS
26347: PUSH
26348: LD_VAR 0 15
26352: LESS
26353: IFFALSE 26382
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26355: LD_ADDR_VAR 0 18
26359: PUSH
26360: LD_INT 7
26362: PUSH
26363: LD_INT 28
26365: PUSH
26366: LD_INT 45
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: PUSH
26374: LD_VAR 0 12
26378: ARRAY
26379: ST_TO_ADDR
// break ;
26380: GO 26384
// end ; end ; end ;
26382: GO 26213
26384: POP
26385: POP
// end ; if not weapon then
26386: LD_VAR 0 18
26390: NOT
26391: IFFALSE 26451
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26393: LD_ADDR_VAR 0 5
26397: PUSH
26398: LD_VAR 0 5
26402: PUSH
26403: LD_INT 11
26405: PUSH
26406: LD_INT 30
26408: PUSH
26409: LD_INT 49
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: DIFF
26417: ST_TO_ADDR
// if not list then
26418: LD_VAR 0 5
26422: NOT
26423: IFFALSE 26427
// exit ;
26425: GO 26569
// weapon := list [ rand ( 1 , list ) ] ;
26427: LD_ADDR_VAR 0 18
26431: PUSH
26432: LD_VAR 0 5
26436: PUSH
26437: LD_INT 1
26439: PPUSH
26440: LD_VAR 0 5
26444: PPUSH
26445: CALL_OW 12
26449: ARRAY
26450: ST_TO_ADDR
// end ; if weapon then
26451: LD_VAR 0 18
26455: IFFALSE 26569
// begin tmp := CostOfWeapon ( weapon ) ;
26457: LD_ADDR_VAR 0 14
26461: PUSH
26462: LD_VAR 0 18
26466: PPUSH
26467: CALL_OW 451
26471: ST_TO_ADDR
// j := GetBase ( tower ) ;
26472: LD_ADDR_VAR 0 9
26476: PUSH
26477: LD_VAR 0 1
26481: PPUSH
26482: CALL_OW 274
26486: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26487: LD_VAR 0 9
26491: PPUSH
26492: LD_INT 1
26494: PPUSH
26495: CALL_OW 275
26499: PUSH
26500: LD_VAR 0 14
26504: PUSH
26505: LD_INT 1
26507: ARRAY
26508: GREATEREQUAL
26509: PUSH
26510: LD_VAR 0 9
26514: PPUSH
26515: LD_INT 2
26517: PPUSH
26518: CALL_OW 275
26522: PUSH
26523: LD_VAR 0 14
26527: PUSH
26528: LD_INT 2
26530: ARRAY
26531: GREATEREQUAL
26532: AND
26533: PUSH
26534: LD_VAR 0 9
26538: PPUSH
26539: LD_INT 3
26541: PPUSH
26542: CALL_OW 275
26546: PUSH
26547: LD_VAR 0 14
26551: PUSH
26552: LD_INT 3
26554: ARRAY
26555: GREATEREQUAL
26556: AND
26557: IFFALSE 26569
// result := weapon ;
26559: LD_ADDR_VAR 0 3
26563: PUSH
26564: LD_VAR 0 18
26568: ST_TO_ADDR
// end ; end ;
26569: LD_VAR 0 3
26573: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
// result := true ;
26578: LD_ADDR_VAR 0 3
26582: PUSH
26583: LD_INT 1
26585: ST_TO_ADDR
// if array1 = array2 then
26586: LD_VAR 0 1
26590: PUSH
26591: LD_VAR 0 2
26595: EQUAL
26596: IFFALSE 26656
// begin for i = 1 to array1 do
26598: LD_ADDR_VAR 0 4
26602: PUSH
26603: DOUBLE
26604: LD_INT 1
26606: DEC
26607: ST_TO_ADDR
26608: LD_VAR 0 1
26612: PUSH
26613: FOR_TO
26614: IFFALSE 26652
// if array1 [ i ] <> array2 [ i ] then
26616: LD_VAR 0 1
26620: PUSH
26621: LD_VAR 0 4
26625: ARRAY
26626: PUSH
26627: LD_VAR 0 2
26631: PUSH
26632: LD_VAR 0 4
26636: ARRAY
26637: NONEQUAL
26638: IFFALSE 26650
// begin result := false ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_INT 0
26647: ST_TO_ADDR
// break ;
26648: GO 26652
// end ;
26650: GO 26613
26652: POP
26653: POP
// end else
26654: GO 26664
// result := false ;
26656: LD_ADDR_VAR 0 3
26660: PUSH
26661: LD_INT 0
26663: ST_TO_ADDR
// end ;
26664: LD_VAR 0 3
26668: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26669: LD_INT 0
26671: PPUSH
26672: PPUSH
// if not array1 or not array2 then
26673: LD_VAR 0 1
26677: NOT
26678: PUSH
26679: LD_VAR 0 2
26683: NOT
26684: OR
26685: IFFALSE 26689
// exit ;
26687: GO 26753
// result := true ;
26689: LD_ADDR_VAR 0 3
26693: PUSH
26694: LD_INT 1
26696: ST_TO_ADDR
// for i = 1 to array1 do
26697: LD_ADDR_VAR 0 4
26701: PUSH
26702: DOUBLE
26703: LD_INT 1
26705: DEC
26706: ST_TO_ADDR
26707: LD_VAR 0 1
26711: PUSH
26712: FOR_TO
26713: IFFALSE 26751
// if array1 [ i ] <> array2 [ i ] then
26715: LD_VAR 0 1
26719: PUSH
26720: LD_VAR 0 4
26724: ARRAY
26725: PUSH
26726: LD_VAR 0 2
26730: PUSH
26731: LD_VAR 0 4
26735: ARRAY
26736: NONEQUAL
26737: IFFALSE 26749
// begin result := false ;
26739: LD_ADDR_VAR 0 3
26743: PUSH
26744: LD_INT 0
26746: ST_TO_ADDR
// break ;
26747: GO 26751
// end ;
26749: GO 26712
26751: POP
26752: POP
// end ;
26753: LD_VAR 0 3
26757: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26758: LD_INT 0
26760: PPUSH
26761: PPUSH
26762: PPUSH
// pom := GetBase ( fac ) ;
26763: LD_ADDR_VAR 0 5
26767: PUSH
26768: LD_VAR 0 1
26772: PPUSH
26773: CALL_OW 274
26777: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26778: LD_ADDR_VAR 0 4
26782: PUSH
26783: LD_VAR 0 2
26787: PUSH
26788: LD_INT 1
26790: ARRAY
26791: PPUSH
26792: LD_VAR 0 2
26796: PUSH
26797: LD_INT 2
26799: ARRAY
26800: PPUSH
26801: LD_VAR 0 2
26805: PUSH
26806: LD_INT 3
26808: ARRAY
26809: PPUSH
26810: LD_VAR 0 2
26814: PUSH
26815: LD_INT 4
26817: ARRAY
26818: PPUSH
26819: CALL_OW 449
26823: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_VAR 0 5
26833: PPUSH
26834: LD_INT 1
26836: PPUSH
26837: CALL_OW 275
26841: PUSH
26842: LD_VAR 0 4
26846: PUSH
26847: LD_INT 1
26849: ARRAY
26850: GREATEREQUAL
26851: PUSH
26852: LD_VAR 0 5
26856: PPUSH
26857: LD_INT 2
26859: PPUSH
26860: CALL_OW 275
26864: PUSH
26865: LD_VAR 0 4
26869: PUSH
26870: LD_INT 2
26872: ARRAY
26873: GREATEREQUAL
26874: AND
26875: PUSH
26876: LD_VAR 0 5
26880: PPUSH
26881: LD_INT 3
26883: PPUSH
26884: CALL_OW 275
26888: PUSH
26889: LD_VAR 0 4
26893: PUSH
26894: LD_INT 3
26896: ARRAY
26897: GREATEREQUAL
26898: AND
26899: ST_TO_ADDR
// end ;
26900: LD_VAR 0 3
26904: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26905: LD_INT 0
26907: PPUSH
26908: PPUSH
26909: PPUSH
26910: PPUSH
// pom := GetBase ( building ) ;
26911: LD_ADDR_VAR 0 3
26915: PUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 274
26925: ST_TO_ADDR
// if not pom then
26926: LD_VAR 0 3
26930: NOT
26931: IFFALSE 26935
// exit ;
26933: GO 27105
// btype := GetBType ( building ) ;
26935: LD_ADDR_VAR 0 5
26939: PUSH
26940: LD_VAR 0 1
26944: PPUSH
26945: CALL_OW 266
26949: ST_TO_ADDR
// if btype = b_armoury then
26950: LD_VAR 0 5
26954: PUSH
26955: LD_INT 4
26957: EQUAL
26958: IFFALSE 26968
// btype := b_barracks ;
26960: LD_ADDR_VAR 0 5
26964: PUSH
26965: LD_INT 5
26967: ST_TO_ADDR
// if btype = b_depot then
26968: LD_VAR 0 5
26972: PUSH
26973: LD_INT 0
26975: EQUAL
26976: IFFALSE 26986
// btype := b_warehouse ;
26978: LD_ADDR_VAR 0 5
26982: PUSH
26983: LD_INT 1
26985: ST_TO_ADDR
// if btype = b_workshop then
26986: LD_VAR 0 5
26990: PUSH
26991: LD_INT 2
26993: EQUAL
26994: IFFALSE 27004
// btype := b_factory ;
26996: LD_ADDR_VAR 0 5
27000: PUSH
27001: LD_INT 3
27003: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27004: LD_ADDR_VAR 0 4
27008: PUSH
27009: LD_VAR 0 5
27013: PPUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 248
27023: PPUSH
27024: CALL_OW 450
27028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27029: LD_ADDR_VAR 0 2
27033: PUSH
27034: LD_VAR 0 3
27038: PPUSH
27039: LD_INT 1
27041: PPUSH
27042: CALL_OW 275
27046: PUSH
27047: LD_VAR 0 4
27051: PUSH
27052: LD_INT 1
27054: ARRAY
27055: GREATEREQUAL
27056: PUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: LD_INT 2
27064: PPUSH
27065: CALL_OW 275
27069: PUSH
27070: LD_VAR 0 4
27074: PUSH
27075: LD_INT 2
27077: ARRAY
27078: GREATEREQUAL
27079: AND
27080: PUSH
27081: LD_VAR 0 3
27085: PPUSH
27086: LD_INT 3
27088: PPUSH
27089: CALL_OW 275
27093: PUSH
27094: LD_VAR 0 4
27098: PUSH
27099: LD_INT 3
27101: ARRAY
27102: GREATEREQUAL
27103: AND
27104: ST_TO_ADDR
// end ;
27105: LD_VAR 0 2
27109: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27110: LD_INT 0
27112: PPUSH
27113: PPUSH
27114: PPUSH
// pom := GetBase ( building ) ;
27115: LD_ADDR_VAR 0 4
27119: PUSH
27120: LD_VAR 0 1
27124: PPUSH
27125: CALL_OW 274
27129: ST_TO_ADDR
// if not pom then
27130: LD_VAR 0 4
27134: NOT
27135: IFFALSE 27139
// exit ;
27137: GO 27240
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27139: LD_ADDR_VAR 0 5
27143: PUSH
27144: LD_VAR 0 2
27148: PPUSH
27149: LD_VAR 0 1
27153: PPUSH
27154: CALL_OW 248
27158: PPUSH
27159: CALL_OW 450
27163: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27164: LD_ADDR_VAR 0 3
27168: PUSH
27169: LD_VAR 0 4
27173: PPUSH
27174: LD_INT 1
27176: PPUSH
27177: CALL_OW 275
27181: PUSH
27182: LD_VAR 0 5
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: GREATEREQUAL
27191: PUSH
27192: LD_VAR 0 4
27196: PPUSH
27197: LD_INT 2
27199: PPUSH
27200: CALL_OW 275
27204: PUSH
27205: LD_VAR 0 5
27209: PUSH
27210: LD_INT 2
27212: ARRAY
27213: GREATEREQUAL
27214: AND
27215: PUSH
27216: LD_VAR 0 4
27220: PPUSH
27221: LD_INT 3
27223: PPUSH
27224: CALL_OW 275
27228: PUSH
27229: LD_VAR 0 5
27233: PUSH
27234: LD_INT 3
27236: ARRAY
27237: GREATEREQUAL
27238: AND
27239: ST_TO_ADDR
// end ;
27240: LD_VAR 0 3
27244: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
27249: PPUSH
27250: PPUSH
27251: PPUSH
27252: PPUSH
27253: PPUSH
27254: PPUSH
27255: PPUSH
27256: PPUSH
27257: PPUSH
// result := false ;
27258: LD_ADDR_VAR 0 8
27262: PUSH
27263: LD_INT 0
27265: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27266: LD_VAR 0 5
27270: NOT
27271: PUSH
27272: LD_VAR 0 1
27276: NOT
27277: OR
27278: PUSH
27279: LD_VAR 0 2
27283: NOT
27284: OR
27285: PUSH
27286: LD_VAR 0 3
27290: NOT
27291: OR
27292: IFFALSE 27296
// exit ;
27294: GO 28110
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27296: LD_ADDR_VAR 0 14
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: LD_VAR 0 2
27310: PPUSH
27311: LD_VAR 0 3
27315: PPUSH
27316: LD_VAR 0 4
27320: PPUSH
27321: LD_VAR 0 5
27325: PUSH
27326: LD_INT 1
27328: ARRAY
27329: PPUSH
27330: CALL_OW 248
27334: PPUSH
27335: LD_INT 0
27337: PPUSH
27338: CALL 29343 0 6
27342: ST_TO_ADDR
// if not hexes then
27343: LD_VAR 0 14
27347: NOT
27348: IFFALSE 27352
// exit ;
27350: GO 28110
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27352: LD_ADDR_VAR 0 17
27356: PUSH
27357: LD_VAR 0 5
27361: PPUSH
27362: LD_INT 22
27364: PUSH
27365: LD_VAR 0 13
27369: PPUSH
27370: CALL_OW 255
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: LD_INT 30
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 30
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PPUSH
27411: CALL_OW 72
27415: ST_TO_ADDR
// for i = 1 to hexes do
27416: LD_ADDR_VAR 0 9
27420: PUSH
27421: DOUBLE
27422: LD_INT 1
27424: DEC
27425: ST_TO_ADDR
27426: LD_VAR 0 14
27430: PUSH
27431: FOR_TO
27432: IFFALSE 28108
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27434: LD_ADDR_VAR 0 13
27438: PUSH
27439: LD_VAR 0 14
27443: PUSH
27444: LD_VAR 0 9
27448: ARRAY
27449: PUSH
27450: LD_INT 1
27452: ARRAY
27453: PPUSH
27454: LD_VAR 0 14
27458: PUSH
27459: LD_VAR 0 9
27463: ARRAY
27464: PUSH
27465: LD_INT 2
27467: ARRAY
27468: PPUSH
27469: CALL_OW 428
27473: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27474: LD_VAR 0 14
27478: PUSH
27479: LD_VAR 0 9
27483: ARRAY
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: PPUSH
27489: LD_VAR 0 14
27493: PUSH
27494: LD_VAR 0 9
27498: ARRAY
27499: PUSH
27500: LD_INT 2
27502: ARRAY
27503: PPUSH
27504: CALL_OW 351
27508: PUSH
27509: LD_VAR 0 14
27513: PUSH
27514: LD_VAR 0 9
27518: ARRAY
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: PPUSH
27524: LD_VAR 0 14
27528: PUSH
27529: LD_VAR 0 9
27533: ARRAY
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: CALL_OW 488
27543: NOT
27544: OR
27545: PUSH
27546: LD_VAR 0 13
27550: PPUSH
27551: CALL_OW 247
27555: PUSH
27556: LD_INT 3
27558: EQUAL
27559: OR
27560: IFFALSE 27566
// exit ;
27562: POP
27563: POP
27564: GO 28110
// if not tmp then
27566: LD_VAR 0 13
27570: NOT
27571: IFFALSE 27575
// continue ;
27573: GO 27431
// result := true ;
27575: LD_ADDR_VAR 0 8
27579: PUSH
27580: LD_INT 1
27582: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27583: LD_VAR 0 6
27587: PUSH
27588: LD_VAR 0 13
27592: PPUSH
27593: CALL_OW 247
27597: PUSH
27598: LD_INT 2
27600: EQUAL
27601: AND
27602: PUSH
27603: LD_VAR 0 13
27607: PPUSH
27608: CALL_OW 263
27612: PUSH
27613: LD_INT 1
27615: EQUAL
27616: AND
27617: IFFALSE 27781
// begin if IsDrivenBy ( tmp ) then
27619: LD_VAR 0 13
27623: PPUSH
27624: CALL_OW 311
27628: IFFALSE 27632
// continue ;
27630: GO 27431
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27632: LD_VAR 0 6
27636: PPUSH
27637: LD_INT 3
27639: PUSH
27640: LD_INT 60
27642: PUSH
27643: EMPTY
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: LD_INT 55
27655: PUSH
27656: EMPTY
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PPUSH
27667: CALL_OW 72
27671: IFFALSE 27779
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27673: LD_ADDR_VAR 0 18
27677: PUSH
27678: LD_VAR 0 6
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 60
27688: PUSH
27689: EMPTY
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: LD_INT 55
27701: PUSH
27702: EMPTY
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PPUSH
27713: CALL_OW 72
27717: PUSH
27718: LD_INT 1
27720: ARRAY
27721: ST_TO_ADDR
// if IsInUnit ( driver ) then
27722: LD_VAR 0 18
27726: PPUSH
27727: CALL_OW 310
27731: IFFALSE 27742
// ComExit ( driver ) ;
27733: LD_VAR 0 18
27737: PPUSH
27738: CALL 53104 0 1
// AddComEnterUnit ( driver , tmp ) ;
27742: LD_VAR 0 18
27746: PPUSH
27747: LD_VAR 0 13
27751: PPUSH
27752: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27756: LD_VAR 0 18
27760: PPUSH
27761: LD_VAR 0 7
27765: PPUSH
27766: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27770: LD_VAR 0 18
27774: PPUSH
27775: CALL_OW 181
// end ; continue ;
27779: GO 27431
// end ; if not cleaners or not tmp in cleaners then
27781: LD_VAR 0 6
27785: NOT
27786: PUSH
27787: LD_VAR 0 13
27791: PUSH
27792: LD_VAR 0 6
27796: IN
27797: NOT
27798: OR
27799: IFFALSE 28106
// begin if dep then
27801: LD_VAR 0 17
27805: IFFALSE 27941
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27807: LD_ADDR_VAR 0 16
27811: PUSH
27812: LD_VAR 0 17
27816: PUSH
27817: LD_INT 1
27819: ARRAY
27820: PPUSH
27821: CALL_OW 250
27825: PPUSH
27826: LD_VAR 0 17
27830: PUSH
27831: LD_INT 1
27833: ARRAY
27834: PPUSH
27835: CALL_OW 254
27839: PPUSH
27840: LD_INT 5
27842: PPUSH
27843: CALL_OW 272
27847: PUSH
27848: LD_VAR 0 17
27852: PUSH
27853: LD_INT 1
27855: ARRAY
27856: PPUSH
27857: CALL_OW 251
27861: PPUSH
27862: LD_VAR 0 17
27866: PUSH
27867: LD_INT 1
27869: ARRAY
27870: PPUSH
27871: CALL_OW 254
27875: PPUSH
27876: LD_INT 5
27878: PPUSH
27879: CALL_OW 273
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27888: LD_VAR 0 16
27892: PUSH
27893: LD_INT 1
27895: ARRAY
27896: PPUSH
27897: LD_VAR 0 16
27901: PUSH
27902: LD_INT 2
27904: ARRAY
27905: PPUSH
27906: CALL_OW 488
27910: IFFALSE 27941
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27912: LD_VAR 0 13
27916: PPUSH
27917: LD_VAR 0 16
27921: PUSH
27922: LD_INT 1
27924: ARRAY
27925: PPUSH
27926: LD_VAR 0 16
27930: PUSH
27931: LD_INT 2
27933: ARRAY
27934: PPUSH
27935: CALL_OW 111
// continue ;
27939: GO 27431
// end ; end ; r := GetDir ( tmp ) ;
27941: LD_ADDR_VAR 0 15
27945: PUSH
27946: LD_VAR 0 13
27950: PPUSH
27951: CALL_OW 254
27955: ST_TO_ADDR
// if r = 5 then
27956: LD_VAR 0 15
27960: PUSH
27961: LD_INT 5
27963: EQUAL
27964: IFFALSE 27974
// r := 0 ;
27966: LD_ADDR_VAR 0 15
27970: PUSH
27971: LD_INT 0
27973: ST_TO_ADDR
// for j = r to 5 do
27974: LD_ADDR_VAR 0 10
27978: PUSH
27979: DOUBLE
27980: LD_VAR 0 15
27984: DEC
27985: ST_TO_ADDR
27986: LD_INT 5
27988: PUSH
27989: FOR_TO
27990: IFFALSE 28104
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27992: LD_ADDR_VAR 0 11
27996: PUSH
27997: LD_VAR 0 13
28001: PPUSH
28002: CALL_OW 250
28006: PPUSH
28007: LD_VAR 0 10
28011: PPUSH
28012: LD_INT 2
28014: PPUSH
28015: CALL_OW 272
28019: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28020: LD_ADDR_VAR 0 12
28024: PUSH
28025: LD_VAR 0 13
28029: PPUSH
28030: CALL_OW 251
28034: PPUSH
28035: LD_VAR 0 10
28039: PPUSH
28040: LD_INT 2
28042: PPUSH
28043: CALL_OW 273
28047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28048: LD_VAR 0 11
28052: PPUSH
28053: LD_VAR 0 12
28057: PPUSH
28058: CALL_OW 488
28062: PUSH
28063: LD_VAR 0 11
28067: PPUSH
28068: LD_VAR 0 12
28072: PPUSH
28073: CALL_OW 428
28077: NOT
28078: AND
28079: IFFALSE 28102
// begin ComMoveXY ( tmp , _x , _y ) ;
28081: LD_VAR 0 13
28085: PPUSH
28086: LD_VAR 0 11
28090: PPUSH
28091: LD_VAR 0 12
28095: PPUSH
28096: CALL_OW 111
// break ;
28100: GO 28104
// end ; end ;
28102: GO 27989
28104: POP
28105: POP
// end ; end ;
28106: GO 27431
28108: POP
28109: POP
// end ;
28110: LD_VAR 0 8
28114: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28115: LD_INT 0
28117: PPUSH
// result := true ;
28118: LD_ADDR_VAR 0 3
28122: PUSH
28123: LD_INT 1
28125: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28126: LD_VAR 0 2
28130: PUSH
28131: LD_INT 24
28133: DOUBLE
28134: EQUAL
28135: IFTRUE 28145
28137: LD_INT 33
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28170
28145: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 32
28153: PPUSH
28154: LD_VAR 0 1
28158: PPUSH
28159: CALL_OW 321
28163: PUSH
28164: LD_INT 2
28166: EQUAL
28167: ST_TO_ADDR
28168: GO 28486
28170: LD_INT 20
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28203
28178: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_INT 6
28186: PPUSH
28187: LD_VAR 0 1
28191: PPUSH
28192: CALL_OW 321
28196: PUSH
28197: LD_INT 2
28199: EQUAL
28200: ST_TO_ADDR
28201: GO 28486
28203: LD_INT 22
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28217
28209: LD_INT 36
28211: DOUBLE
28212: EQUAL
28213: IFTRUE 28217
28215: GO 28242
28217: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_INT 15
28225: PPUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 321
28235: PUSH
28236: LD_INT 2
28238: EQUAL
28239: ST_TO_ADDR
28240: GO 28486
28242: LD_INT 30
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28275
28250: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28251: LD_ADDR_VAR 0 3
28255: PUSH
28256: LD_INT 20
28258: PPUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: CALL_OW 321
28268: PUSH
28269: LD_INT 2
28271: EQUAL
28272: ST_TO_ADDR
28273: GO 28486
28275: LD_INT 28
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28289
28281: LD_INT 21
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28314
28289: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28290: LD_ADDR_VAR 0 3
28294: PUSH
28295: LD_INT 21
28297: PPUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 321
28307: PUSH
28308: LD_INT 2
28310: EQUAL
28311: ST_TO_ADDR
28312: GO 28486
28314: LD_INT 16
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28347
28322: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28323: LD_ADDR_VAR 0 3
28327: PUSH
28328: LD_INT 84
28330: PPUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 321
28340: PUSH
28341: LD_INT 2
28343: EQUAL
28344: ST_TO_ADDR
28345: GO 28486
28347: LD_INT 19
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28361
28353: LD_INT 23
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28386
28361: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28362: LD_ADDR_VAR 0 3
28366: PUSH
28367: LD_INT 83
28369: PPUSH
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 321
28379: PUSH
28380: LD_INT 2
28382: EQUAL
28383: ST_TO_ADDR
28384: GO 28486
28386: LD_INT 17
28388: DOUBLE
28389: EQUAL
28390: IFTRUE 28394
28392: GO 28419
28394: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28395: LD_ADDR_VAR 0 3
28399: PUSH
28400: LD_INT 39
28402: PPUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 321
28412: PUSH
28413: LD_INT 2
28415: EQUAL
28416: ST_TO_ADDR
28417: GO 28486
28419: LD_INT 18
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28452
28427: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 40
28435: PPUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 321
28445: PUSH
28446: LD_INT 2
28448: EQUAL
28449: ST_TO_ADDR
28450: GO 28486
28452: LD_INT 27
28454: DOUBLE
28455: EQUAL
28456: IFTRUE 28460
28458: GO 28485
28460: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28461: LD_ADDR_VAR 0 3
28465: PUSH
28466: LD_INT 35
28468: PPUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 321
28478: PUSH
28479: LD_INT 2
28481: EQUAL
28482: ST_TO_ADDR
28483: GO 28486
28485: POP
// end ;
28486: LD_VAR 0 3
28490: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28491: LD_INT 0
28493: PPUSH
28494: PPUSH
28495: PPUSH
28496: PPUSH
28497: PPUSH
28498: PPUSH
28499: PPUSH
28500: PPUSH
28501: PPUSH
28502: PPUSH
28503: PPUSH
// result := false ;
28504: LD_ADDR_VAR 0 6
28508: PUSH
28509: LD_INT 0
28511: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28512: LD_VAR 0 1
28516: NOT
28517: PUSH
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL_OW 266
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: IN
28538: NOT
28539: OR
28540: PUSH
28541: LD_VAR 0 2
28545: NOT
28546: OR
28547: PUSH
28548: LD_VAR 0 5
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: LD_INT 3
28564: PUSH
28565: LD_INT 4
28567: PUSH
28568: LD_INT 5
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: IN
28579: NOT
28580: OR
28581: PUSH
28582: LD_VAR 0 3
28586: PPUSH
28587: LD_VAR 0 4
28591: PPUSH
28592: CALL_OW 488
28596: NOT
28597: OR
28598: IFFALSE 28602
// exit ;
28600: GO 29338
// side := GetSide ( depot ) ;
28602: LD_ADDR_VAR 0 9
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL_OW 255
28616: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28617: LD_VAR 0 9
28621: PPUSH
28622: LD_VAR 0 2
28626: PPUSH
28627: CALL 28115 0 2
28631: NOT
28632: IFFALSE 28636
// exit ;
28634: GO 29338
// pom := GetBase ( depot ) ;
28636: LD_ADDR_VAR 0 10
28640: PUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 274
28650: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28651: LD_ADDR_VAR 0 11
28655: PUSH
28656: LD_VAR 0 2
28660: PPUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL_OW 248
28670: PPUSH
28671: CALL_OW 450
28675: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28676: LD_VAR 0 10
28680: PPUSH
28681: LD_INT 1
28683: PPUSH
28684: CALL_OW 275
28688: PUSH
28689: LD_VAR 0 11
28693: PUSH
28694: LD_INT 1
28696: ARRAY
28697: GREATEREQUAL
28698: PUSH
28699: LD_VAR 0 10
28703: PPUSH
28704: LD_INT 2
28706: PPUSH
28707: CALL_OW 275
28711: PUSH
28712: LD_VAR 0 11
28716: PUSH
28717: LD_INT 2
28719: ARRAY
28720: GREATEREQUAL
28721: AND
28722: PUSH
28723: LD_VAR 0 10
28727: PPUSH
28728: LD_INT 3
28730: PPUSH
28731: CALL_OW 275
28735: PUSH
28736: LD_VAR 0 11
28740: PUSH
28741: LD_INT 3
28743: ARRAY
28744: GREATEREQUAL
28745: AND
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 29338
// if GetBType ( depot ) = b_depot then
28751: LD_VAR 0 1
28755: PPUSH
28756: CALL_OW 266
28760: PUSH
28761: LD_INT 0
28763: EQUAL
28764: IFFALSE 28776
// dist := 28 else
28766: LD_ADDR_VAR 0 14
28770: PUSH
28771: LD_INT 28
28773: ST_TO_ADDR
28774: GO 28784
// dist := 36 ;
28776: LD_ADDR_VAR 0 14
28780: PUSH
28781: LD_INT 36
28783: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28784: LD_VAR 0 1
28788: PPUSH
28789: LD_VAR 0 3
28793: PPUSH
28794: LD_VAR 0 4
28798: PPUSH
28799: CALL_OW 297
28803: PUSH
28804: LD_VAR 0 14
28808: GREATER
28809: IFFALSE 28813
// exit ;
28811: GO 29338
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28813: LD_ADDR_VAR 0 12
28817: PUSH
28818: LD_VAR 0 2
28822: PPUSH
28823: LD_VAR 0 3
28827: PPUSH
28828: LD_VAR 0 4
28832: PPUSH
28833: LD_VAR 0 5
28837: PPUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 248
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL 29343 0 6
28855: ST_TO_ADDR
// if not hexes then
28856: LD_VAR 0 12
28860: NOT
28861: IFFALSE 28865
// exit ;
28863: GO 29338
// hex := GetHexInfo ( x , y ) ;
28865: LD_ADDR_VAR 0 15
28869: PUSH
28870: LD_VAR 0 3
28874: PPUSH
28875: LD_VAR 0 4
28879: PPUSH
28880: CALL_OW 546
28884: ST_TO_ADDR
// if hex [ 1 ] then
28885: LD_VAR 0 15
28889: PUSH
28890: LD_INT 1
28892: ARRAY
28893: IFFALSE 28897
// exit ;
28895: GO 29338
// height := hex [ 2 ] ;
28897: LD_ADDR_VAR 0 13
28901: PUSH
28902: LD_VAR 0 15
28906: PUSH
28907: LD_INT 2
28909: ARRAY
28910: ST_TO_ADDR
// for i = 1 to hexes do
28911: LD_ADDR_VAR 0 7
28915: PUSH
28916: DOUBLE
28917: LD_INT 1
28919: DEC
28920: ST_TO_ADDR
28921: LD_VAR 0 12
28925: PUSH
28926: FOR_TO
28927: IFFALSE 29257
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28929: LD_VAR 0 12
28933: PUSH
28934: LD_VAR 0 7
28938: ARRAY
28939: PUSH
28940: LD_INT 1
28942: ARRAY
28943: PPUSH
28944: LD_VAR 0 12
28948: PUSH
28949: LD_VAR 0 7
28953: ARRAY
28954: PUSH
28955: LD_INT 2
28957: ARRAY
28958: PPUSH
28959: CALL_OW 488
28963: NOT
28964: PUSH
28965: LD_VAR 0 12
28969: PUSH
28970: LD_VAR 0 7
28974: ARRAY
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: LD_VAR 0 12
28984: PUSH
28985: LD_VAR 0 7
28989: ARRAY
28990: PUSH
28991: LD_INT 2
28993: ARRAY
28994: PPUSH
28995: CALL_OW 428
28999: PUSH
29000: LD_INT 0
29002: GREATER
29003: OR
29004: PUSH
29005: LD_VAR 0 12
29009: PUSH
29010: LD_VAR 0 7
29014: ARRAY
29015: PUSH
29016: LD_INT 1
29018: ARRAY
29019: PPUSH
29020: LD_VAR 0 12
29024: PUSH
29025: LD_VAR 0 7
29029: ARRAY
29030: PUSH
29031: LD_INT 2
29033: ARRAY
29034: PPUSH
29035: CALL_OW 351
29039: OR
29040: IFFALSE 29046
// exit ;
29042: POP
29043: POP
29044: GO 29338
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29046: LD_ADDR_VAR 0 8
29050: PUSH
29051: LD_VAR 0 12
29055: PUSH
29056: LD_VAR 0 7
29060: ARRAY
29061: PUSH
29062: LD_INT 1
29064: ARRAY
29065: PPUSH
29066: LD_VAR 0 12
29070: PUSH
29071: LD_VAR 0 7
29075: ARRAY
29076: PUSH
29077: LD_INT 2
29079: ARRAY
29080: PPUSH
29081: CALL_OW 546
29085: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29086: LD_VAR 0 8
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PUSH
29095: LD_VAR 0 8
29099: PUSH
29100: LD_INT 2
29102: ARRAY
29103: PUSH
29104: LD_VAR 0 13
29108: PUSH
29109: LD_INT 2
29111: PLUS
29112: GREATER
29113: OR
29114: PUSH
29115: LD_VAR 0 8
29119: PUSH
29120: LD_INT 2
29122: ARRAY
29123: PUSH
29124: LD_VAR 0 13
29128: PUSH
29129: LD_INT 2
29131: MINUS
29132: LESS
29133: OR
29134: PUSH
29135: LD_VAR 0 8
29139: PUSH
29140: LD_INT 3
29142: ARRAY
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 8
29149: PUSH
29150: LD_INT 9
29152: PUSH
29153: LD_INT 10
29155: PUSH
29156: LD_INT 11
29158: PUSH
29159: LD_INT 12
29161: PUSH
29162: LD_INT 13
29164: PUSH
29165: LD_INT 16
29167: PUSH
29168: LD_INT 17
29170: PUSH
29171: LD_INT 18
29173: PUSH
29174: LD_INT 19
29176: PUSH
29177: LD_INT 20
29179: PUSH
29180: LD_INT 21
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: IN
29198: NOT
29199: OR
29200: PUSH
29201: LD_VAR 0 8
29205: PUSH
29206: LD_INT 5
29208: ARRAY
29209: NOT
29210: OR
29211: PUSH
29212: LD_VAR 0 8
29216: PUSH
29217: LD_INT 6
29219: ARRAY
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 2
29226: PUSH
29227: LD_INT 7
29229: PUSH
29230: LD_INT 9
29232: PUSH
29233: LD_INT 10
29235: PUSH
29236: LD_INT 11
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: IN
29247: NOT
29248: OR
29249: IFFALSE 29255
// exit ;
29251: POP
29252: POP
29253: GO 29338
// end ;
29255: GO 28926
29257: POP
29258: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29259: LD_VAR 0 9
29263: PPUSH
29264: LD_VAR 0 3
29268: PPUSH
29269: LD_VAR 0 4
29273: PPUSH
29274: LD_INT 20
29276: PPUSH
29277: CALL 21290 0 4
29281: PUSH
29282: LD_INT 4
29284: ARRAY
29285: IFFALSE 29289
// exit ;
29287: GO 29338
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29289: LD_VAR 0 2
29293: PUSH
29294: LD_INT 29
29296: PUSH
29297: LD_INT 30
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: IN
29304: PUSH
29305: LD_VAR 0 3
29309: PPUSH
29310: LD_VAR 0 4
29314: PPUSH
29315: LD_VAR 0 9
29319: PPUSH
29320: CALL_OW 440
29324: NOT
29325: AND
29326: IFFALSE 29330
// exit ;
29328: GO 29338
// result := true ;
29330: LD_ADDR_VAR 0 6
29334: PUSH
29335: LD_INT 1
29337: ST_TO_ADDR
// end ;
29338: LD_VAR 0 6
29342: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29343: LD_INT 0
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
29391: PPUSH
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
// result = [ ] ;
29403: LD_ADDR_VAR 0 7
29407: PUSH
29408: EMPTY
29409: ST_TO_ADDR
// temp_list = [ ] ;
29410: LD_ADDR_VAR 0 9
29414: PUSH
29415: EMPTY
29416: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29417: LD_VAR 0 4
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 2
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: LD_INT 4
29436: PUSH
29437: LD_INT 5
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: IN
29448: NOT
29449: PUSH
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: IN
29465: PUSH
29466: LD_VAR 0 5
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 3
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: IN
29485: NOT
29486: AND
29487: OR
29488: IFFALSE 29492
// exit ;
29490: GO 47883
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29492: LD_VAR 0 1
29496: PUSH
29497: LD_INT 6
29499: PUSH
29500: LD_INT 7
29502: PUSH
29503: LD_INT 8
29505: PUSH
29506: LD_INT 13
29508: PUSH
29509: LD_INT 12
29511: PUSH
29512: LD_INT 15
29514: PUSH
29515: LD_INT 11
29517: PUSH
29518: LD_INT 14
29520: PUSH
29521: LD_INT 10
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: IN
29535: IFFALSE 29545
// btype = b_lab ;
29537: LD_ADDR_VAR 0 1
29541: PUSH
29542: LD_INT 6
29544: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29545: LD_VAR 0 6
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: IN
29564: NOT
29565: PUSH
29566: LD_VAR 0 1
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: LD_INT 6
29585: PUSH
29586: LD_INT 36
29588: PUSH
29589: LD_INT 4
29591: PUSH
29592: LD_INT 5
29594: PUSH
29595: LD_INT 31
29597: PUSH
29598: LD_INT 32
29600: PUSH
29601: LD_INT 33
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: IN
29617: NOT
29618: PUSH
29619: LD_VAR 0 6
29623: PUSH
29624: LD_INT 1
29626: EQUAL
29627: AND
29628: OR
29629: PUSH
29630: LD_VAR 0 1
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: IN
29645: NOT
29646: PUSH
29647: LD_VAR 0 6
29651: PUSH
29652: LD_INT 2
29654: EQUAL
29655: AND
29656: OR
29657: IFFALSE 29667
// mode = 0 ;
29659: LD_ADDR_VAR 0 6
29663: PUSH
29664: LD_INT 0
29666: ST_TO_ADDR
// case mode of 0 :
29667: LD_VAR 0 6
29671: PUSH
29672: LD_INT 0
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 41133
29680: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29681: LD_ADDR_VAR 0 11
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 1
29816: NEG
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: LD_INT 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29874: LD_ADDR_VAR 0 12
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: NEG
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 3
30031: NEG
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: NEG
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30070: LD_ADDR_VAR 0 13
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: LD_INT 1
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: LD_INT 2
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 2
30205: NEG
30206: PUSH
30207: LD_INT 2
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: LD_INT 3
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 3
30241: NEG
30242: PUSH
30243: LD_INT 3
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30269: LD_ADDR_VAR 0 14
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 2
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30465: LD_ADDR_VAR 0 15
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30658: LD_ADDR_VAR 0 16
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 3
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30851: LD_ADDR_VAR 0 17
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 2
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 1
31016: NEG
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31081: LD_ADDR_VAR 0 18
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: LD_INT 2
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31311: LD_ADDR_VAR 0 19
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31541: LD_ADDR_VAR 0 20
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: NEG
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31771: LD_ADDR_VAR 0 21
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 2
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32001: LD_ADDR_VAR 0 22
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 2
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32231: LD_ADDR_VAR 0 23
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: LD_INT 2
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: LD_INT 3
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32511: LD_ADDR_VAR 0 24
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 1
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 2
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 3
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 3
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32787: LD_ADDR_VAR 0 25
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33061: LD_ADDR_VAR 0 26
33065: PUSH
33066: LD_INT 0
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: NEG
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: LD_INT 3
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 3
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33337: LD_ADDR_VAR 0 27
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 3
33570: NEG
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 3
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33617: LD_ADDR_VAR 0 28
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: LD_INT 3
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33899: LD_ADDR_VAR 0 29
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 3
34143: NEG
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34178: LD_ADDR_VAR 0 30
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 2
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 3
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 3
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 3
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34456: LD_ADDR_VAR 0 31
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: LD_INT 2
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 2
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 3
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34734: LD_ADDR_VAR 0 32
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: LD_INT 1
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: LD_INT 2
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: LD_INT 3
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 2
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35012: LD_ADDR_VAR 0 33
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: NEG
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 2
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 3
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: LD_INT 3
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 3
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35291: LD_ADDR_VAR 0 34
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 2
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 3
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: NEG
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35571: LD_ADDR_VAR 0 35
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35683: LD_ADDR_VAR 0 36
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35795: LD_ADDR_VAR 0 37
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35907: LD_ADDR_VAR 0 38
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36019: LD_ADDR_VAR 0 39
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: LD_INT 2
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36131: LD_ADDR_VAR 0 40
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36243: LD_ADDR_VAR 0 41
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 3
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 3
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: LD_INT 2
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 3
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: LD_INT 3
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 3
36528: NEG
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 3
36540: NEG
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 3
36552: NEG
36553: PUSH
36554: LD_INT 3
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36593: LD_ADDR_VAR 0 42
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 2
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 2
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 2
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 3
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 2
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: PUSH
36840: LD_INT 3
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 3
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 3
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: NEG
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: LD_INT 3
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36943: LD_ADDR_VAR 0 43
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 3
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 3
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 3
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 3
37239: NEG
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 3
37250: NEG
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37291: LD_ADDR_VAR 0 44
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: LD_INT 2
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: NEG
37470: PUSH
37471: LD_INT 2
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 3
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: LD_INT 3
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: LD_INT 3
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 3
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 3
37600: NEG
37601: PUSH
37602: LD_INT 3
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37641: LD_ADDR_VAR 0 45
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 3
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 2
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: NEG
37951: PUSH
37952: LD_INT 3
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37991: LD_ADDR_VAR 0 46
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: LD_INT 3
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 3
38298: NEG
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38339: LD_ADDR_VAR 0 47
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 2
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: NEG
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38490: LD_ADDR_VAR 0 48
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38637: LD_ADDR_VAR 0 49
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38781: LD_ADDR_VAR 0 50
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38925: LD_ADDR_VAR 0 51
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39072: LD_ADDR_VAR 0 52
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 2
39199: NEG
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39223: LD_ADDR_VAR 0 53
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39453: LD_ADDR_VAR 0 54
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39683: LD_ADDR_VAR 0 55
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39913: LD_ADDR_VAR 0 56
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40143: LD_ADDR_VAR 0 57
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40373: LD_ADDR_VAR 0 58
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40603: LD_ADDR_VAR 0 59
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40691: LD_ADDR_VAR 0 60
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40779: LD_ADDR_VAR 0 61
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40867: LD_ADDR_VAR 0 62
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40955: LD_ADDR_VAR 0 63
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41043: LD_ADDR_VAR 0 64
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// end ; 1 :
41131: GO 47028
41133: LD_INT 1
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41141
41139: GO 43764
41141: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41142: LD_ADDR_VAR 0 11
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 3
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 3
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41186: LD_ADDR_VAR 0 12
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 3
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: LIST
41226: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41227: LD_ADDR_VAR 0 13
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: LD_INT 3
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: LD_INT 3
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41267: LD_ADDR_VAR 0 14
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41308: LD_ADDR_VAR 0 15
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: NEG
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41352: LD_ADDR_VAR 0 16
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 3
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: NEG
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41398: LD_ADDR_VAR 0 17
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 3
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41442: LD_ADDR_VAR 0 18
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 3
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41483: LD_ADDR_VAR 0 19
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: PUSH
41501: LD_INT 3
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 3
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41523: LD_ADDR_VAR 0 20
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41564: LD_ADDR_VAR 0 21
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: LIST
41607: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41608: LD_ADDR_VAR 0 22
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: LD_INT 3
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41654: LD_ADDR_VAR 0 23
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 3
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 4
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 3
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41698: LD_ADDR_VAR 0 24
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 4
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41739: LD_ADDR_VAR 0 25
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 4
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: LD_INT 4
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41779: LD_ADDR_VAR 0 26
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 4
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41820: LD_ADDR_VAR 0 27
41824: PUSH
41825: LD_INT 3
41827: NEG
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 4
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: LIST
41863: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41864: LD_ADDR_VAR 0 28
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: LD_INT 4
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 4
41895: NEG
41896: PUSH
41897: LD_INT 3
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41910: LD_ADDR_VAR 0 29
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 3
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 4
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 4
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 3
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 5
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 5
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 4
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 6
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 6
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 5
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42065: LD_ADDR_VAR 0 30
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 4
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 4
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 4
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 5
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 5
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 6
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 6
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42208: LD_ADDR_VAR 0 31
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 4
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 4
42255: PUSH
42256: LD_INT 4
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: PUSH
42266: LD_INT 4
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 5
42275: PUSH
42276: LD_INT 4
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 5
42285: PUSH
42286: LD_INT 5
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 4
42295: PUSH
42296: LD_INT 5
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 6
42305: PUSH
42306: LD_INT 5
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 6
42315: PUSH
42316: LD_INT 6
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 5
42325: PUSH
42326: LD_INT 6
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42347: LD_ADDR_VAR 0 32
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 3
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 4
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 4
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 5
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 5
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 4
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 6
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 6
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 5
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42490: LD_ADDR_VAR 0 33
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 4
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 4
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 4
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 5
42576: NEG
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 5
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 5
42599: NEG
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 6
42610: NEG
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 6
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42645: LD_ADDR_VAR 0 34
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: LD_INT 3
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 3
42676: NEG
42677: PUSH
42678: LD_INT 3
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 3
42688: NEG
42689: PUSH
42690: LD_INT 4
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 4
42700: NEG
42701: PUSH
42702: LD_INT 3
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 4
42712: NEG
42713: PUSH
42714: LD_INT 4
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 4
42724: NEG
42725: PUSH
42726: LD_INT 5
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 5
42736: NEG
42737: PUSH
42738: LD_INT 4
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 5
42748: NEG
42749: PUSH
42750: LD_INT 5
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 5
42760: NEG
42761: PUSH
42762: LD_INT 6
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 6
42772: NEG
42773: PUSH
42774: LD_INT 5
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 6
42784: NEG
42785: PUSH
42786: LD_INT 6
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42808: LD_ADDR_VAR 0 41
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42852: LD_ADDR_VAR 0 42
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42893: LD_ADDR_VAR 0 43
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42933: LD_ADDR_VAR 0 44
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 3
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42974: LD_ADDR_VAR 0 45
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43018: LD_ADDR_VAR 0 46
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43064: LD_ADDR_VAR 0 47
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43097: LD_ADDR_VAR 0 48
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43128: LD_ADDR_VAR 0 49
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43157: LD_ADDR_VAR 0 50
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 3
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43186: LD_ADDR_VAR 0 51
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43217: LD_ADDR_VAR 0 52
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 3
43236: NEG
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43250: LD_ADDR_VAR 0 53
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 3
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43294: LD_ADDR_VAR 0 54
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43335: LD_ADDR_VAR 0 55
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43375: LD_ADDR_VAR 0 56
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 3
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43416: LD_ADDR_VAR 0 57
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43460: LD_ADDR_VAR 0 58
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: NEG
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43506: LD_ADDR_VAR 0 59
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43550: LD_ADDR_VAR 0 60
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43591: LD_ADDR_VAR 0 61
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43631: LD_ADDR_VAR 0 62
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43672: LD_ADDR_VAR 0 63
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43716: LD_ADDR_VAR 0 64
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// end ; 2 :
43762: GO 47028
43764: LD_INT 2
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 47027
43772: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43773: LD_ADDR_VAR 0 29
43777: PUSH
43778: LD_INT 4
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 4
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 5
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 4
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 3
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 5
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: LD_INT 4
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: LD_INT 4
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 4
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 4
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 4
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 4
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 5
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 4
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 5
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: NEG
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 3
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 4
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 4
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 4
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 4
44158: NEG
44159: PUSH
44160: LD_INT 4
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 4
44170: NEG
44171: PUSH
44172: LD_INT 5
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: LD_INT 4
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 4
44206: NEG
44207: PUSH
44208: LD_INT 3
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 5
44218: NEG
44219: PUSH
44220: LD_INT 4
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 5
44230: NEG
44231: PUSH
44232: LD_INT 5
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 3
44242: NEG
44243: PUSH
44244: LD_INT 5
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 5
44254: NEG
44255: PUSH
44256: LD_INT 3
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44311: LD_ADDR_VAR 0 30
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: LD_INT 4
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 4
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 5
44338: PUSH
44339: LD_INT 4
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: LD_INT 5
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: LD_INT 5
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 4
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 3
44398: PUSH
44399: LD_INT 5
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 3
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 4
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 4
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 4
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 4
44501: NEG
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 4
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 4
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 5
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 5
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 5
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: NEG
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 3
44615: NEG
44616: PUSH
44617: LD_INT 4
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 3
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 3
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 4
44663: NEG
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 4
44675: NEG
44676: PUSH
44677: LD_INT 4
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: LD_INT 4
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 4
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 4
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 5
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 4
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 4
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 5
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 5
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44858: LD_ADDR_VAR 0 31
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 4
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 5
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 5
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 4
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 3
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 3
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 3
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 4
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 4
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 4
45037: NEG
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 4
45060: NEG
45061: PUSH
45062: LD_INT 4
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 4
45072: NEG
45073: PUSH
45074: LD_INT 5
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: LD_INT 4
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 3
45096: NEG
45097: PUSH
45098: LD_INT 3
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 4
45108: NEG
45109: PUSH
45110: LD_INT 3
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 5
45120: NEG
45121: PUSH
45122: LD_INT 4
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 5
45132: NEG
45133: PUSH
45134: LD_INT 5
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: LD_INT 5
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 5
45156: NEG
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 4
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 4
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 4
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 4
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 4
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 5
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 5
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 4
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45408: LD_ADDR_VAR 0 32
45412: PUSH
45413: LD_INT 4
45415: NEG
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 4
45426: NEG
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 4
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 5
45471: NEG
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 5
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 5
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: LD_INT 4
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 4
45577: NEG
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 4
45589: NEG
45590: PUSH
45591: LD_INT 4
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 4
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 4
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 5
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 4
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 3
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 4
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 5
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 5
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 4
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 4
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 4
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 4
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 5
45840: PUSH
45841: LD_INT 4
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 5
45850: PUSH
45851: LD_INT 5
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 4
45860: PUSH
45861: LD_INT 5
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: LD_INT 4
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 5
45890: PUSH
45891: LD_INT 3
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: LD_INT 5
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45955: LD_ADDR_VAR 0 33
45959: PUSH
45960: LD_INT 4
45962: NEG
45963: PUSH
45964: LD_INT 4
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 4
45974: NEG
45975: PUSH
45976: LD_INT 5
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: LD_INT 4
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 3
45998: NEG
45999: PUSH
46000: LD_INT 3
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 4
46010: NEG
46011: PUSH
46012: LD_INT 3
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 5
46022: NEG
46023: PUSH
46024: LD_INT 4
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 5
46034: NEG
46035: PUSH
46036: LD_INT 5
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: LD_INT 5
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 5
46058: NEG
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 4
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 4
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 4
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 4
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 5
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 5
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 4
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 5
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 4
46295: PUSH
46296: LD_INT 4
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 4
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 4
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 4
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 4
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 5
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 5
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 5
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46493: LD_ADDR_VAR 0 34
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 4
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 5
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 4
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 5
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 5
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 4
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 4
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 4
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 4
46695: PUSH
46696: LD_INT 4
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 4
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 5
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 5
46725: PUSH
46726: LD_INT 5
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: LD_INT 5
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: LD_INT 4
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: LD_INT 3
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 5
46765: PUSH
46766: LD_INT 3
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: LD_INT 5
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 3
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 4
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 4
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 4
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 4
46878: NEG
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 4
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 4
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 5
46934: NEG
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 5
46945: NEG
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 5
46957: NEG
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// end ; end ;
47025: GO 47028
47027: POP
// case btype of b_depot , b_warehouse :
47028: LD_VAR 0 1
47032: PUSH
47033: LD_INT 0
47035: DOUBLE
47036: EQUAL
47037: IFTRUE 47047
47039: LD_INT 1
47041: DOUBLE
47042: EQUAL
47043: IFTRUE 47047
47045: GO 47248
47047: POP
// case nation of nation_american :
47048: LD_VAR 0 5
47052: PUSH
47053: LD_INT 1
47055: DOUBLE
47056: EQUAL
47057: IFTRUE 47061
47059: GO 47117
47061: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47062: LD_ADDR_VAR 0 9
47066: PUSH
47067: LD_VAR 0 11
47071: PUSH
47072: LD_VAR 0 12
47076: PUSH
47077: LD_VAR 0 13
47081: PUSH
47082: LD_VAR 0 14
47086: PUSH
47087: LD_VAR 0 15
47091: PUSH
47092: LD_VAR 0 16
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: PUSH
47105: LD_VAR 0 4
47109: PUSH
47110: LD_INT 1
47112: PLUS
47113: ARRAY
47114: ST_TO_ADDR
47115: GO 47246
47117: LD_INT 2
47119: DOUBLE
47120: EQUAL
47121: IFTRUE 47125
47123: GO 47181
47125: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47126: LD_ADDR_VAR 0 9
47130: PUSH
47131: LD_VAR 0 17
47135: PUSH
47136: LD_VAR 0 18
47140: PUSH
47141: LD_VAR 0 19
47145: PUSH
47146: LD_VAR 0 20
47150: PUSH
47151: LD_VAR 0 21
47155: PUSH
47156: LD_VAR 0 22
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: LD_VAR 0 4
47173: PUSH
47174: LD_INT 1
47176: PLUS
47177: ARRAY
47178: ST_TO_ADDR
47179: GO 47246
47181: LD_INT 3
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47245
47189: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47190: LD_ADDR_VAR 0 9
47194: PUSH
47195: LD_VAR 0 23
47199: PUSH
47200: LD_VAR 0 24
47204: PUSH
47205: LD_VAR 0 25
47209: PUSH
47210: LD_VAR 0 26
47214: PUSH
47215: LD_VAR 0 27
47219: PUSH
47220: LD_VAR 0 28
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: PUSH
47233: LD_VAR 0 4
47237: PUSH
47238: LD_INT 1
47240: PLUS
47241: ARRAY
47242: ST_TO_ADDR
47243: GO 47246
47245: POP
47246: GO 47801
47248: LD_INT 2
47250: DOUBLE
47251: EQUAL
47252: IFTRUE 47262
47254: LD_INT 3
47256: DOUBLE
47257: EQUAL
47258: IFTRUE 47262
47260: GO 47318
47262: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47263: LD_ADDR_VAR 0 9
47267: PUSH
47268: LD_VAR 0 29
47272: PUSH
47273: LD_VAR 0 30
47277: PUSH
47278: LD_VAR 0 31
47282: PUSH
47283: LD_VAR 0 32
47287: PUSH
47288: LD_VAR 0 33
47292: PUSH
47293: LD_VAR 0 34
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_VAR 0 4
47310: PUSH
47311: LD_INT 1
47313: PLUS
47314: ARRAY
47315: ST_TO_ADDR
47316: GO 47801
47318: LD_INT 16
47320: DOUBLE
47321: EQUAL
47322: IFTRUE 47380
47324: LD_INT 17
47326: DOUBLE
47327: EQUAL
47328: IFTRUE 47380
47330: LD_INT 18
47332: DOUBLE
47333: EQUAL
47334: IFTRUE 47380
47336: LD_INT 19
47338: DOUBLE
47339: EQUAL
47340: IFTRUE 47380
47342: LD_INT 22
47344: DOUBLE
47345: EQUAL
47346: IFTRUE 47380
47348: LD_INT 20
47350: DOUBLE
47351: EQUAL
47352: IFTRUE 47380
47354: LD_INT 21
47356: DOUBLE
47357: EQUAL
47358: IFTRUE 47380
47360: LD_INT 23
47362: DOUBLE
47363: EQUAL
47364: IFTRUE 47380
47366: LD_INT 24
47368: DOUBLE
47369: EQUAL
47370: IFTRUE 47380
47372: LD_INT 25
47374: DOUBLE
47375: EQUAL
47376: IFTRUE 47380
47378: GO 47436
47380: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47381: LD_ADDR_VAR 0 9
47385: PUSH
47386: LD_VAR 0 35
47390: PUSH
47391: LD_VAR 0 36
47395: PUSH
47396: LD_VAR 0 37
47400: PUSH
47401: LD_VAR 0 38
47405: PUSH
47406: LD_VAR 0 39
47410: PUSH
47411: LD_VAR 0 40
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: PUSH
47424: LD_VAR 0 4
47428: PUSH
47429: LD_INT 1
47431: PLUS
47432: ARRAY
47433: ST_TO_ADDR
47434: GO 47801
47436: LD_INT 6
47438: DOUBLE
47439: EQUAL
47440: IFTRUE 47492
47442: LD_INT 7
47444: DOUBLE
47445: EQUAL
47446: IFTRUE 47492
47448: LD_INT 8
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47492
47454: LD_INT 13
47456: DOUBLE
47457: EQUAL
47458: IFTRUE 47492
47460: LD_INT 12
47462: DOUBLE
47463: EQUAL
47464: IFTRUE 47492
47466: LD_INT 15
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47492
47472: LD_INT 11
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47492
47478: LD_INT 14
47480: DOUBLE
47481: EQUAL
47482: IFTRUE 47492
47484: LD_INT 10
47486: DOUBLE
47487: EQUAL
47488: IFTRUE 47492
47490: GO 47548
47492: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47493: LD_ADDR_VAR 0 9
47497: PUSH
47498: LD_VAR 0 41
47502: PUSH
47503: LD_VAR 0 42
47507: PUSH
47508: LD_VAR 0 43
47512: PUSH
47513: LD_VAR 0 44
47517: PUSH
47518: LD_VAR 0 45
47522: PUSH
47523: LD_VAR 0 46
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: PUSH
47536: LD_VAR 0 4
47540: PUSH
47541: LD_INT 1
47543: PLUS
47544: ARRAY
47545: ST_TO_ADDR
47546: GO 47801
47548: LD_INT 36
47550: DOUBLE
47551: EQUAL
47552: IFTRUE 47556
47554: GO 47612
47556: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47557: LD_ADDR_VAR 0 9
47561: PUSH
47562: LD_VAR 0 47
47566: PUSH
47567: LD_VAR 0 48
47571: PUSH
47572: LD_VAR 0 49
47576: PUSH
47577: LD_VAR 0 50
47581: PUSH
47582: LD_VAR 0 51
47586: PUSH
47587: LD_VAR 0 52
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: PUSH
47600: LD_VAR 0 4
47604: PUSH
47605: LD_INT 1
47607: PLUS
47608: ARRAY
47609: ST_TO_ADDR
47610: GO 47801
47612: LD_INT 4
47614: DOUBLE
47615: EQUAL
47616: IFTRUE 47638
47618: LD_INT 5
47620: DOUBLE
47621: EQUAL
47622: IFTRUE 47638
47624: LD_INT 34
47626: DOUBLE
47627: EQUAL
47628: IFTRUE 47638
47630: LD_INT 37
47632: DOUBLE
47633: EQUAL
47634: IFTRUE 47638
47636: GO 47694
47638: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47639: LD_ADDR_VAR 0 9
47643: PUSH
47644: LD_VAR 0 53
47648: PUSH
47649: LD_VAR 0 54
47653: PUSH
47654: LD_VAR 0 55
47658: PUSH
47659: LD_VAR 0 56
47663: PUSH
47664: LD_VAR 0 57
47668: PUSH
47669: LD_VAR 0 58
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: PUSH
47682: LD_VAR 0 4
47686: PUSH
47687: LD_INT 1
47689: PLUS
47690: ARRAY
47691: ST_TO_ADDR
47692: GO 47801
47694: LD_INT 31
47696: DOUBLE
47697: EQUAL
47698: IFTRUE 47744
47700: LD_INT 32
47702: DOUBLE
47703: EQUAL
47704: IFTRUE 47744
47706: LD_INT 33
47708: DOUBLE
47709: EQUAL
47710: IFTRUE 47744
47712: LD_INT 27
47714: DOUBLE
47715: EQUAL
47716: IFTRUE 47744
47718: LD_INT 26
47720: DOUBLE
47721: EQUAL
47722: IFTRUE 47744
47724: LD_INT 28
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47744
47730: LD_INT 29
47732: DOUBLE
47733: EQUAL
47734: IFTRUE 47744
47736: LD_INT 30
47738: DOUBLE
47739: EQUAL
47740: IFTRUE 47744
47742: GO 47800
47744: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47745: LD_ADDR_VAR 0 9
47749: PUSH
47750: LD_VAR 0 59
47754: PUSH
47755: LD_VAR 0 60
47759: PUSH
47760: LD_VAR 0 61
47764: PUSH
47765: LD_VAR 0 62
47769: PUSH
47770: LD_VAR 0 63
47774: PUSH
47775: LD_VAR 0 64
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: LD_VAR 0 4
47792: PUSH
47793: LD_INT 1
47795: PLUS
47796: ARRAY
47797: ST_TO_ADDR
47798: GO 47801
47800: POP
// temp_list2 = [ ] ;
47801: LD_ADDR_VAR 0 10
47805: PUSH
47806: EMPTY
47807: ST_TO_ADDR
// for i in temp_list do
47808: LD_ADDR_VAR 0 8
47812: PUSH
47813: LD_VAR 0 9
47817: PUSH
47818: FOR_IN
47819: IFFALSE 47871
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47821: LD_ADDR_VAR 0 10
47825: PUSH
47826: LD_VAR 0 10
47830: PUSH
47831: LD_VAR 0 8
47835: PUSH
47836: LD_INT 1
47838: ARRAY
47839: PUSH
47840: LD_VAR 0 2
47844: PLUS
47845: PUSH
47846: LD_VAR 0 8
47850: PUSH
47851: LD_INT 2
47853: ARRAY
47854: PUSH
47855: LD_VAR 0 3
47859: PLUS
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: ADD
47868: ST_TO_ADDR
47869: GO 47818
47871: POP
47872: POP
// result = temp_list2 ;
47873: LD_ADDR_VAR 0 7
47877: PUSH
47878: LD_VAR 0 10
47882: ST_TO_ADDR
// end ;
47883: LD_VAR 0 7
47887: RET
// export function EnemyInRange ( unit , dist ) ; begin
47888: LD_INT 0
47890: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47891: LD_ADDR_VAR 0 3
47895: PUSH
47896: LD_VAR 0 1
47900: PPUSH
47901: CALL_OW 255
47905: PPUSH
47906: LD_VAR 0 1
47910: PPUSH
47911: CALL_OW 250
47915: PPUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: CALL_OW 251
47925: PPUSH
47926: LD_VAR 0 2
47930: PPUSH
47931: CALL 21290 0 4
47935: PUSH
47936: LD_INT 4
47938: ARRAY
47939: ST_TO_ADDR
// end ;
47940: LD_VAR 0 3
47944: RET
// export function PlayerSeeMe ( unit ) ; begin
47945: LD_INT 0
47947: PPUSH
// result := See ( your_side , unit ) ;
47948: LD_ADDR_VAR 0 2
47952: PUSH
47953: LD_OWVAR 2
47957: PPUSH
47958: LD_VAR 0 1
47962: PPUSH
47963: CALL_OW 292
47967: ST_TO_ADDR
// end ;
47968: LD_VAR 0 2
47972: RET
// export function ReverseDir ( unit ) ; begin
47973: LD_INT 0
47975: PPUSH
// if not unit then
47976: LD_VAR 0 1
47980: NOT
47981: IFFALSE 47985
// exit ;
47983: GO 48008
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47985: LD_ADDR_VAR 0 2
47989: PUSH
47990: LD_VAR 0 1
47994: PPUSH
47995: CALL_OW 254
47999: PUSH
48000: LD_INT 3
48002: PLUS
48003: PUSH
48004: LD_INT 6
48006: MOD
48007: ST_TO_ADDR
// end ;
48008: LD_VAR 0 2
48012: RET
// export function ReverseArray ( array ) ; var i ; begin
48013: LD_INT 0
48015: PPUSH
48016: PPUSH
// if not array then
48017: LD_VAR 0 1
48021: NOT
48022: IFFALSE 48026
// exit ;
48024: GO 48081
// result := [ ] ;
48026: LD_ADDR_VAR 0 2
48030: PUSH
48031: EMPTY
48032: ST_TO_ADDR
// for i := array downto 1 do
48033: LD_ADDR_VAR 0 3
48037: PUSH
48038: DOUBLE
48039: LD_VAR 0 1
48043: INC
48044: ST_TO_ADDR
48045: LD_INT 1
48047: PUSH
48048: FOR_DOWNTO
48049: IFFALSE 48079
// result := Join ( result , array [ i ] ) ;
48051: LD_ADDR_VAR 0 2
48055: PUSH
48056: LD_VAR 0 2
48060: PPUSH
48061: LD_VAR 0 1
48065: PUSH
48066: LD_VAR 0 3
48070: ARRAY
48071: PPUSH
48072: CALL 52706 0 2
48076: ST_TO_ADDR
48077: GO 48048
48079: POP
48080: POP
// end ;
48081: LD_VAR 0 2
48085: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48086: LD_INT 0
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
// if not unit or not hexes then
48094: LD_VAR 0 1
48098: NOT
48099: PUSH
48100: LD_VAR 0 2
48104: NOT
48105: OR
48106: IFFALSE 48110
// exit ;
48108: GO 48233
// dist := 9999 ;
48110: LD_ADDR_VAR 0 5
48114: PUSH
48115: LD_INT 9999
48117: ST_TO_ADDR
// for i = 1 to hexes do
48118: LD_ADDR_VAR 0 4
48122: PUSH
48123: DOUBLE
48124: LD_INT 1
48126: DEC
48127: ST_TO_ADDR
48128: LD_VAR 0 2
48132: PUSH
48133: FOR_TO
48134: IFFALSE 48221
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48136: LD_ADDR_VAR 0 6
48140: PUSH
48141: LD_VAR 0 1
48145: PPUSH
48146: LD_VAR 0 2
48150: PUSH
48151: LD_VAR 0 4
48155: ARRAY
48156: PUSH
48157: LD_INT 1
48159: ARRAY
48160: PPUSH
48161: LD_VAR 0 2
48165: PUSH
48166: LD_VAR 0 4
48170: ARRAY
48171: PUSH
48172: LD_INT 2
48174: ARRAY
48175: PPUSH
48176: CALL_OW 297
48180: ST_TO_ADDR
// if tdist < dist then
48181: LD_VAR 0 6
48185: PUSH
48186: LD_VAR 0 5
48190: LESS
48191: IFFALSE 48219
// begin hex := hexes [ i ] ;
48193: LD_ADDR_VAR 0 8
48197: PUSH
48198: LD_VAR 0 2
48202: PUSH
48203: LD_VAR 0 4
48207: ARRAY
48208: ST_TO_ADDR
// dist := tdist ;
48209: LD_ADDR_VAR 0 5
48213: PUSH
48214: LD_VAR 0 6
48218: ST_TO_ADDR
// end ; end ;
48219: GO 48133
48221: POP
48222: POP
// result := hex ;
48223: LD_ADDR_VAR 0 3
48227: PUSH
48228: LD_VAR 0 8
48232: ST_TO_ADDR
// end ;
48233: LD_VAR 0 3
48237: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48238: LD_INT 0
48240: PPUSH
48241: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48242: LD_VAR 0 1
48246: NOT
48247: PUSH
48248: LD_VAR 0 1
48252: PUSH
48253: LD_INT 21
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 23
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PPUSH
48277: CALL_OW 69
48281: IN
48282: NOT
48283: OR
48284: IFFALSE 48288
// exit ;
48286: GO 48335
// for i = 1 to 3 do
48288: LD_ADDR_VAR 0 3
48292: PUSH
48293: DOUBLE
48294: LD_INT 1
48296: DEC
48297: ST_TO_ADDR
48298: LD_INT 3
48300: PUSH
48301: FOR_TO
48302: IFFALSE 48333
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48304: LD_VAR 0 1
48308: PPUSH
48309: CALL_OW 250
48313: PPUSH
48314: LD_VAR 0 1
48318: PPUSH
48319: CALL_OW 251
48323: PPUSH
48324: LD_INT 1
48326: PPUSH
48327: CALL_OW 453
48331: GO 48301
48333: POP
48334: POP
// end ;
48335: LD_VAR 0 2
48339: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48340: LD_INT 0
48342: PPUSH
48343: PPUSH
48344: PPUSH
48345: PPUSH
48346: PPUSH
48347: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48348: LD_VAR 0 1
48352: NOT
48353: PUSH
48354: LD_VAR 0 2
48358: NOT
48359: OR
48360: PUSH
48361: LD_VAR 0 1
48365: PPUSH
48366: CALL_OW 314
48370: OR
48371: IFFALSE 48375
// exit ;
48373: GO 48816
// x := GetX ( enemy_unit ) ;
48375: LD_ADDR_VAR 0 7
48379: PUSH
48380: LD_VAR 0 2
48384: PPUSH
48385: CALL_OW 250
48389: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48390: LD_ADDR_VAR 0 8
48394: PUSH
48395: LD_VAR 0 2
48399: PPUSH
48400: CALL_OW 251
48404: ST_TO_ADDR
// if not x or not y then
48405: LD_VAR 0 7
48409: NOT
48410: PUSH
48411: LD_VAR 0 8
48415: NOT
48416: OR
48417: IFFALSE 48421
// exit ;
48419: GO 48816
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48421: LD_ADDR_VAR 0 6
48425: PUSH
48426: LD_VAR 0 7
48430: PPUSH
48431: LD_INT 0
48433: PPUSH
48434: LD_INT 4
48436: PPUSH
48437: CALL_OW 272
48441: PUSH
48442: LD_VAR 0 8
48446: PPUSH
48447: LD_INT 0
48449: PPUSH
48450: LD_INT 4
48452: PPUSH
48453: CALL_OW 273
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_VAR 0 7
48466: PPUSH
48467: LD_INT 1
48469: PPUSH
48470: LD_INT 4
48472: PPUSH
48473: CALL_OW 272
48477: PUSH
48478: LD_VAR 0 8
48482: PPUSH
48483: LD_INT 1
48485: PPUSH
48486: LD_INT 4
48488: PPUSH
48489: CALL_OW 273
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_VAR 0 7
48502: PPUSH
48503: LD_INT 2
48505: PPUSH
48506: LD_INT 4
48508: PPUSH
48509: CALL_OW 272
48513: PUSH
48514: LD_VAR 0 8
48518: PPUSH
48519: LD_INT 2
48521: PPUSH
48522: LD_INT 4
48524: PPUSH
48525: CALL_OW 273
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_VAR 0 7
48538: PPUSH
48539: LD_INT 3
48541: PPUSH
48542: LD_INT 4
48544: PPUSH
48545: CALL_OW 272
48549: PUSH
48550: LD_VAR 0 8
48554: PPUSH
48555: LD_INT 3
48557: PPUSH
48558: LD_INT 4
48560: PPUSH
48561: CALL_OW 273
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_VAR 0 7
48574: PPUSH
48575: LD_INT 4
48577: PPUSH
48578: LD_INT 4
48580: PPUSH
48581: CALL_OW 272
48585: PUSH
48586: LD_VAR 0 8
48590: PPUSH
48591: LD_INT 4
48593: PPUSH
48594: LD_INT 4
48596: PPUSH
48597: CALL_OW 273
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_VAR 0 7
48610: PPUSH
48611: LD_INT 5
48613: PPUSH
48614: LD_INT 4
48616: PPUSH
48617: CALL_OW 272
48621: PUSH
48622: LD_VAR 0 8
48626: PPUSH
48627: LD_INT 5
48629: PPUSH
48630: LD_INT 4
48632: PPUSH
48633: CALL_OW 273
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// for i = tmp downto 1 do
48650: LD_ADDR_VAR 0 4
48654: PUSH
48655: DOUBLE
48656: LD_VAR 0 6
48660: INC
48661: ST_TO_ADDR
48662: LD_INT 1
48664: PUSH
48665: FOR_DOWNTO
48666: IFFALSE 48767
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48668: LD_VAR 0 6
48672: PUSH
48673: LD_VAR 0 4
48677: ARRAY
48678: PUSH
48679: LD_INT 1
48681: ARRAY
48682: PPUSH
48683: LD_VAR 0 6
48687: PUSH
48688: LD_VAR 0 4
48692: ARRAY
48693: PUSH
48694: LD_INT 2
48696: ARRAY
48697: PPUSH
48698: CALL_OW 488
48702: NOT
48703: PUSH
48704: LD_VAR 0 6
48708: PUSH
48709: LD_VAR 0 4
48713: ARRAY
48714: PUSH
48715: LD_INT 1
48717: ARRAY
48718: PPUSH
48719: LD_VAR 0 6
48723: PUSH
48724: LD_VAR 0 4
48728: ARRAY
48729: PUSH
48730: LD_INT 2
48732: ARRAY
48733: PPUSH
48734: CALL_OW 428
48738: PUSH
48739: LD_INT 0
48741: NONEQUAL
48742: OR
48743: IFFALSE 48765
// tmp := Delete ( tmp , i ) ;
48745: LD_ADDR_VAR 0 6
48749: PUSH
48750: LD_VAR 0 6
48754: PPUSH
48755: LD_VAR 0 4
48759: PPUSH
48760: CALL_OW 3
48764: ST_TO_ADDR
48765: GO 48665
48767: POP
48768: POP
// j := GetClosestHex ( unit , tmp ) ;
48769: LD_ADDR_VAR 0 5
48773: PUSH
48774: LD_VAR 0 1
48778: PPUSH
48779: LD_VAR 0 6
48783: PPUSH
48784: CALL 48086 0 2
48788: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48789: LD_VAR 0 1
48793: PPUSH
48794: LD_VAR 0 5
48798: PUSH
48799: LD_INT 1
48801: ARRAY
48802: PPUSH
48803: LD_VAR 0 5
48807: PUSH
48808: LD_INT 2
48810: ARRAY
48811: PPUSH
48812: CALL_OW 111
// end ;
48816: LD_VAR 0 3
48820: RET
// export function PrepareApemanSoldier ( ) ; begin
48821: LD_INT 0
48823: PPUSH
// uc_nation := 0 ;
48824: LD_ADDR_OWVAR 21
48828: PUSH
48829: LD_INT 0
48831: ST_TO_ADDR
// hc_sex := sex_male ;
48832: LD_ADDR_OWVAR 27
48836: PUSH
48837: LD_INT 1
48839: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48840: LD_ADDR_OWVAR 28
48844: PUSH
48845: LD_INT 15
48847: ST_TO_ADDR
// hc_gallery :=  ;
48848: LD_ADDR_OWVAR 33
48852: PUSH
48853: LD_STRING 
48855: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48856: LD_ADDR_OWVAR 31
48860: PUSH
48861: LD_INT 0
48863: PPUSH
48864: LD_INT 3
48866: PPUSH
48867: CALL_OW 12
48871: PUSH
48872: LD_INT 0
48874: PPUSH
48875: LD_INT 3
48877: PPUSH
48878: CALL_OW 12
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// end ;
48895: LD_VAR 0 1
48899: RET
// export function PrepareApemanEngineer ( ) ; begin
48900: LD_INT 0
48902: PPUSH
// uc_nation := 0 ;
48903: LD_ADDR_OWVAR 21
48907: PUSH
48908: LD_INT 0
48910: ST_TO_ADDR
// hc_sex := sex_male ;
48911: LD_ADDR_OWVAR 27
48915: PUSH
48916: LD_INT 1
48918: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48919: LD_ADDR_OWVAR 28
48923: PUSH
48924: LD_INT 16
48926: ST_TO_ADDR
// hc_gallery :=  ;
48927: LD_ADDR_OWVAR 33
48931: PUSH
48932: LD_STRING 
48934: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48935: LD_ADDR_OWVAR 31
48939: PUSH
48940: LD_INT 0
48942: PPUSH
48943: LD_INT 3
48945: PPUSH
48946: CALL_OW 12
48950: PUSH
48951: LD_INT 0
48953: PPUSH
48954: LD_INT 3
48956: PPUSH
48957: CALL_OW 12
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// end ;
48974: LD_VAR 0 1
48978: RET
// export function PrepareApeman ( agressivity ) ; begin
48979: LD_INT 0
48981: PPUSH
// uc_side := 0 ;
48982: LD_ADDR_OWVAR 20
48986: PUSH
48987: LD_INT 0
48989: ST_TO_ADDR
// uc_nation := 0 ;
48990: LD_ADDR_OWVAR 21
48994: PUSH
48995: LD_INT 0
48997: ST_TO_ADDR
// hc_sex := sex_male ;
48998: LD_ADDR_OWVAR 27
49002: PUSH
49003: LD_INT 1
49005: ST_TO_ADDR
// hc_class := class_apeman ;
49006: LD_ADDR_OWVAR 28
49010: PUSH
49011: LD_INT 12
49013: ST_TO_ADDR
// hc_gallery :=  ;
49014: LD_ADDR_OWVAR 33
49018: PUSH
49019: LD_STRING 
49021: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49022: LD_ADDR_OWVAR 35
49026: PUSH
49027: LD_VAR 0 1
49031: NEG
49032: PPUSH
49033: LD_VAR 0 1
49037: PPUSH
49038: CALL_OW 12
49042: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49043: LD_ADDR_OWVAR 31
49047: PUSH
49048: LD_INT 0
49050: PPUSH
49051: LD_INT 3
49053: PPUSH
49054: CALL_OW 12
49058: PUSH
49059: LD_INT 0
49061: PPUSH
49062: LD_INT 3
49064: PPUSH
49065: CALL_OW 12
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// end ;
49082: LD_VAR 0 2
49086: RET
// export function PrepareTiger ( agressivity ) ; begin
49087: LD_INT 0
49089: PPUSH
// uc_side := 0 ;
49090: LD_ADDR_OWVAR 20
49094: PUSH
49095: LD_INT 0
49097: ST_TO_ADDR
// uc_nation := 0 ;
49098: LD_ADDR_OWVAR 21
49102: PUSH
49103: LD_INT 0
49105: ST_TO_ADDR
// hc_class := class_tiger ;
49106: LD_ADDR_OWVAR 28
49110: PUSH
49111: LD_INT 14
49113: ST_TO_ADDR
// hc_gallery :=  ;
49114: LD_ADDR_OWVAR 33
49118: PUSH
49119: LD_STRING 
49121: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49122: LD_ADDR_OWVAR 35
49126: PUSH
49127: LD_VAR 0 1
49131: NEG
49132: PPUSH
49133: LD_VAR 0 1
49137: PPUSH
49138: CALL_OW 12
49142: ST_TO_ADDR
// end ;
49143: LD_VAR 0 2
49147: RET
// export function PrepareEnchidna ( ) ; begin
49148: LD_INT 0
49150: PPUSH
// uc_side := 0 ;
49151: LD_ADDR_OWVAR 20
49155: PUSH
49156: LD_INT 0
49158: ST_TO_ADDR
// uc_nation := 0 ;
49159: LD_ADDR_OWVAR 21
49163: PUSH
49164: LD_INT 0
49166: ST_TO_ADDR
// hc_class := class_baggie ;
49167: LD_ADDR_OWVAR 28
49171: PUSH
49172: LD_INT 13
49174: ST_TO_ADDR
// hc_gallery :=  ;
49175: LD_ADDR_OWVAR 33
49179: PUSH
49180: LD_STRING 
49182: ST_TO_ADDR
// end ;
49183: LD_VAR 0 1
49187: RET
// export function PrepareFrog ( ) ; begin
49188: LD_INT 0
49190: PPUSH
// uc_side := 0 ;
49191: LD_ADDR_OWVAR 20
49195: PUSH
49196: LD_INT 0
49198: ST_TO_ADDR
// uc_nation := 0 ;
49199: LD_ADDR_OWVAR 21
49203: PUSH
49204: LD_INT 0
49206: ST_TO_ADDR
// hc_class := class_frog ;
49207: LD_ADDR_OWVAR 28
49211: PUSH
49212: LD_INT 19
49214: ST_TO_ADDR
// hc_gallery :=  ;
49215: LD_ADDR_OWVAR 33
49219: PUSH
49220: LD_STRING 
49222: ST_TO_ADDR
// end ;
49223: LD_VAR 0 1
49227: RET
// export function PrepareFish ( ) ; begin
49228: LD_INT 0
49230: PPUSH
// uc_side := 0 ;
49231: LD_ADDR_OWVAR 20
49235: PUSH
49236: LD_INT 0
49238: ST_TO_ADDR
// uc_nation := 0 ;
49239: LD_ADDR_OWVAR 21
49243: PUSH
49244: LD_INT 0
49246: ST_TO_ADDR
// hc_class := class_fish ;
49247: LD_ADDR_OWVAR 28
49251: PUSH
49252: LD_INT 20
49254: ST_TO_ADDR
// hc_gallery :=  ;
49255: LD_ADDR_OWVAR 33
49259: PUSH
49260: LD_STRING 
49262: ST_TO_ADDR
// end ;
49263: LD_VAR 0 1
49267: RET
// export function PrepareBird ( ) ; begin
49268: LD_INT 0
49270: PPUSH
// uc_side := 0 ;
49271: LD_ADDR_OWVAR 20
49275: PUSH
49276: LD_INT 0
49278: ST_TO_ADDR
// uc_nation := 0 ;
49279: LD_ADDR_OWVAR 21
49283: PUSH
49284: LD_INT 0
49286: ST_TO_ADDR
// hc_class := class_phororhacos ;
49287: LD_ADDR_OWVAR 28
49291: PUSH
49292: LD_INT 18
49294: ST_TO_ADDR
// hc_gallery :=  ;
49295: LD_ADDR_OWVAR 33
49299: PUSH
49300: LD_STRING 
49302: ST_TO_ADDR
// end ;
49303: LD_VAR 0 1
49307: RET
// export function PrepareHorse ( ) ; begin
49308: LD_INT 0
49310: PPUSH
// uc_side := 0 ;
49311: LD_ADDR_OWVAR 20
49315: PUSH
49316: LD_INT 0
49318: ST_TO_ADDR
// uc_nation := 0 ;
49319: LD_ADDR_OWVAR 21
49323: PUSH
49324: LD_INT 0
49326: ST_TO_ADDR
// hc_class := class_horse ;
49327: LD_ADDR_OWVAR 28
49331: PUSH
49332: LD_INT 21
49334: ST_TO_ADDR
// hc_gallery :=  ;
49335: LD_ADDR_OWVAR 33
49339: PUSH
49340: LD_STRING 
49342: ST_TO_ADDR
// end ;
49343: LD_VAR 0 1
49347: RET
// export function PrepareMastodont ( ) ; begin
49348: LD_INT 0
49350: PPUSH
// uc_side := 0 ;
49351: LD_ADDR_OWVAR 20
49355: PUSH
49356: LD_INT 0
49358: ST_TO_ADDR
// uc_nation := 0 ;
49359: LD_ADDR_OWVAR 21
49363: PUSH
49364: LD_INT 0
49366: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49367: LD_ADDR_OWVAR 37
49371: PUSH
49372: LD_INT 31
49374: ST_TO_ADDR
// vc_control := control_rider ;
49375: LD_ADDR_OWVAR 38
49379: PUSH
49380: LD_INT 4
49382: ST_TO_ADDR
// end ;
49383: LD_VAR 0 1
49387: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49388: LD_INT 0
49390: PPUSH
49391: PPUSH
49392: PPUSH
// uc_side = 0 ;
49393: LD_ADDR_OWVAR 20
49397: PUSH
49398: LD_INT 0
49400: ST_TO_ADDR
// uc_nation = 0 ;
49401: LD_ADDR_OWVAR 21
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// InitHc_All ( ) ;
49409: CALL_OW 584
// InitVc ;
49413: CALL_OW 20
// if mastodonts then
49417: LD_VAR 0 6
49421: IFFALSE 49488
// for i = 1 to mastodonts do
49423: LD_ADDR_VAR 0 11
49427: PUSH
49428: DOUBLE
49429: LD_INT 1
49431: DEC
49432: ST_TO_ADDR
49433: LD_VAR 0 6
49437: PUSH
49438: FOR_TO
49439: IFFALSE 49486
// begin vc_chassis := 31 ;
49441: LD_ADDR_OWVAR 37
49445: PUSH
49446: LD_INT 31
49448: ST_TO_ADDR
// vc_control := control_rider ;
49449: LD_ADDR_OWVAR 38
49453: PUSH
49454: LD_INT 4
49456: ST_TO_ADDR
// animal := CreateVehicle ;
49457: LD_ADDR_VAR 0 12
49461: PUSH
49462: CALL_OW 45
49466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49467: LD_VAR 0 12
49471: PPUSH
49472: LD_VAR 0 8
49476: PPUSH
49477: LD_INT 0
49479: PPUSH
49480: CALL 51623 0 3
// end ;
49484: GO 49438
49486: POP
49487: POP
// if horses then
49488: LD_VAR 0 5
49492: IFFALSE 49559
// for i = 1 to horses do
49494: LD_ADDR_VAR 0 11
49498: PUSH
49499: DOUBLE
49500: LD_INT 1
49502: DEC
49503: ST_TO_ADDR
49504: LD_VAR 0 5
49508: PUSH
49509: FOR_TO
49510: IFFALSE 49557
// begin hc_class := 21 ;
49512: LD_ADDR_OWVAR 28
49516: PUSH
49517: LD_INT 21
49519: ST_TO_ADDR
// hc_gallery :=  ;
49520: LD_ADDR_OWVAR 33
49524: PUSH
49525: LD_STRING 
49527: ST_TO_ADDR
// animal := CreateHuman ;
49528: LD_ADDR_VAR 0 12
49532: PUSH
49533: CALL_OW 44
49537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49538: LD_VAR 0 12
49542: PPUSH
49543: LD_VAR 0 8
49547: PPUSH
49548: LD_INT 0
49550: PPUSH
49551: CALL 51623 0 3
// end ;
49555: GO 49509
49557: POP
49558: POP
// if birds then
49559: LD_VAR 0 1
49563: IFFALSE 49630
// for i = 1 to birds do
49565: LD_ADDR_VAR 0 11
49569: PUSH
49570: DOUBLE
49571: LD_INT 1
49573: DEC
49574: ST_TO_ADDR
49575: LD_VAR 0 1
49579: PUSH
49580: FOR_TO
49581: IFFALSE 49628
// begin hc_class = 18 ;
49583: LD_ADDR_OWVAR 28
49587: PUSH
49588: LD_INT 18
49590: ST_TO_ADDR
// hc_gallery =  ;
49591: LD_ADDR_OWVAR 33
49595: PUSH
49596: LD_STRING 
49598: ST_TO_ADDR
// animal := CreateHuman ;
49599: LD_ADDR_VAR 0 12
49603: PUSH
49604: CALL_OW 44
49608: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49609: LD_VAR 0 12
49613: PPUSH
49614: LD_VAR 0 8
49618: PPUSH
49619: LD_INT 0
49621: PPUSH
49622: CALL 51623 0 3
// end ;
49626: GO 49580
49628: POP
49629: POP
// if tigers then
49630: LD_VAR 0 2
49634: IFFALSE 49718
// for i = 1 to tigers do
49636: LD_ADDR_VAR 0 11
49640: PUSH
49641: DOUBLE
49642: LD_INT 1
49644: DEC
49645: ST_TO_ADDR
49646: LD_VAR 0 2
49650: PUSH
49651: FOR_TO
49652: IFFALSE 49716
// begin hc_class = class_tiger ;
49654: LD_ADDR_OWVAR 28
49658: PUSH
49659: LD_INT 14
49661: ST_TO_ADDR
// hc_gallery =  ;
49662: LD_ADDR_OWVAR 33
49666: PUSH
49667: LD_STRING 
49669: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49670: LD_ADDR_OWVAR 35
49674: PUSH
49675: LD_INT 7
49677: NEG
49678: PPUSH
49679: LD_INT 7
49681: PPUSH
49682: CALL_OW 12
49686: ST_TO_ADDR
// animal := CreateHuman ;
49687: LD_ADDR_VAR 0 12
49691: PUSH
49692: CALL_OW 44
49696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49697: LD_VAR 0 12
49701: PPUSH
49702: LD_VAR 0 8
49706: PPUSH
49707: LD_INT 0
49709: PPUSH
49710: CALL 51623 0 3
// end ;
49714: GO 49651
49716: POP
49717: POP
// if apemans then
49718: LD_VAR 0 3
49722: IFFALSE 49845
// for i = 1 to apemans do
49724: LD_ADDR_VAR 0 11
49728: PUSH
49729: DOUBLE
49730: LD_INT 1
49732: DEC
49733: ST_TO_ADDR
49734: LD_VAR 0 3
49738: PUSH
49739: FOR_TO
49740: IFFALSE 49843
// begin hc_class = class_apeman ;
49742: LD_ADDR_OWVAR 28
49746: PUSH
49747: LD_INT 12
49749: ST_TO_ADDR
// hc_gallery =  ;
49750: LD_ADDR_OWVAR 33
49754: PUSH
49755: LD_STRING 
49757: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49758: LD_ADDR_OWVAR 35
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PPUSH
49767: LD_INT 2
49769: PPUSH
49770: CALL_OW 12
49774: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49775: LD_ADDR_OWVAR 31
49779: PUSH
49780: LD_INT 1
49782: PPUSH
49783: LD_INT 3
49785: PPUSH
49786: CALL_OW 12
49790: PUSH
49791: LD_INT 1
49793: PPUSH
49794: LD_INT 3
49796: PPUSH
49797: CALL_OW 12
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// animal := CreateHuman ;
49814: LD_ADDR_VAR 0 12
49818: PUSH
49819: CALL_OW 44
49823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49824: LD_VAR 0 12
49828: PPUSH
49829: LD_VAR 0 8
49833: PPUSH
49834: LD_INT 0
49836: PPUSH
49837: CALL 51623 0 3
// end ;
49841: GO 49739
49843: POP
49844: POP
// if enchidnas then
49845: LD_VAR 0 4
49849: IFFALSE 49916
// for i = 1 to enchidnas do
49851: LD_ADDR_VAR 0 11
49855: PUSH
49856: DOUBLE
49857: LD_INT 1
49859: DEC
49860: ST_TO_ADDR
49861: LD_VAR 0 4
49865: PUSH
49866: FOR_TO
49867: IFFALSE 49914
// begin hc_class = 13 ;
49869: LD_ADDR_OWVAR 28
49873: PUSH
49874: LD_INT 13
49876: ST_TO_ADDR
// hc_gallery =  ;
49877: LD_ADDR_OWVAR 33
49881: PUSH
49882: LD_STRING 
49884: ST_TO_ADDR
// animal := CreateHuman ;
49885: LD_ADDR_VAR 0 12
49889: PUSH
49890: CALL_OW 44
49894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49895: LD_VAR 0 12
49899: PPUSH
49900: LD_VAR 0 8
49904: PPUSH
49905: LD_INT 0
49907: PPUSH
49908: CALL 51623 0 3
// end ;
49912: GO 49866
49914: POP
49915: POP
// if fishes then
49916: LD_VAR 0 7
49920: IFFALSE 49987
// for i = 1 to fishes do
49922: LD_ADDR_VAR 0 11
49926: PUSH
49927: DOUBLE
49928: LD_INT 1
49930: DEC
49931: ST_TO_ADDR
49932: LD_VAR 0 7
49936: PUSH
49937: FOR_TO
49938: IFFALSE 49985
// begin hc_class = 20 ;
49940: LD_ADDR_OWVAR 28
49944: PUSH
49945: LD_INT 20
49947: ST_TO_ADDR
// hc_gallery =  ;
49948: LD_ADDR_OWVAR 33
49952: PUSH
49953: LD_STRING 
49955: ST_TO_ADDR
// animal := CreateHuman ;
49956: LD_ADDR_VAR 0 12
49960: PUSH
49961: CALL_OW 44
49965: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49966: LD_VAR 0 12
49970: PPUSH
49971: LD_VAR 0 9
49975: PPUSH
49976: LD_INT 0
49978: PPUSH
49979: CALL 51623 0 3
// end ;
49983: GO 49937
49985: POP
49986: POP
// end ;
49987: LD_VAR 0 10
49991: RET
// export function WantHeal ( sci , unit ) ; begin
49992: LD_INT 0
49994: PPUSH
// if GetTaskList ( sci ) > 0 then
49995: LD_VAR 0 1
49999: PPUSH
50000: CALL_OW 437
50004: PUSH
50005: LD_INT 0
50007: GREATER
50008: IFFALSE 50078
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50010: LD_VAR 0 1
50014: PPUSH
50015: CALL_OW 437
50019: PUSH
50020: LD_INT 1
50022: ARRAY
50023: PUSH
50024: LD_INT 1
50026: ARRAY
50027: PUSH
50028: LD_STRING l
50030: EQUAL
50031: PUSH
50032: LD_VAR 0 1
50036: PPUSH
50037: CALL_OW 437
50041: PUSH
50042: LD_INT 1
50044: ARRAY
50045: PUSH
50046: LD_INT 4
50048: ARRAY
50049: PUSH
50050: LD_VAR 0 2
50054: EQUAL
50055: AND
50056: IFFALSE 50068
// result := true else
50058: LD_ADDR_VAR 0 3
50062: PUSH
50063: LD_INT 1
50065: ST_TO_ADDR
50066: GO 50076
// result := false ;
50068: LD_ADDR_VAR 0 3
50072: PUSH
50073: LD_INT 0
50075: ST_TO_ADDR
// end else
50076: GO 50086
// result := false ;
50078: LD_ADDR_VAR 0 3
50082: PUSH
50083: LD_INT 0
50085: ST_TO_ADDR
// end ;
50086: LD_VAR 0 3
50090: RET
// export function HealTarget ( sci ) ; begin
50091: LD_INT 0
50093: PPUSH
// if not sci then
50094: LD_VAR 0 1
50098: NOT
50099: IFFALSE 50103
// exit ;
50101: GO 50168
// result := 0 ;
50103: LD_ADDR_VAR 0 2
50107: PUSH
50108: LD_INT 0
50110: ST_TO_ADDR
// if GetTaskList ( sci ) then
50111: LD_VAR 0 1
50115: PPUSH
50116: CALL_OW 437
50120: IFFALSE 50168
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50122: LD_VAR 0 1
50126: PPUSH
50127: CALL_OW 437
50131: PUSH
50132: LD_INT 1
50134: ARRAY
50135: PUSH
50136: LD_INT 1
50138: ARRAY
50139: PUSH
50140: LD_STRING l
50142: EQUAL
50143: IFFALSE 50168
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50145: LD_ADDR_VAR 0 2
50149: PUSH
50150: LD_VAR 0 1
50154: PPUSH
50155: CALL_OW 437
50159: PUSH
50160: LD_INT 1
50162: ARRAY
50163: PUSH
50164: LD_INT 4
50166: ARRAY
50167: ST_TO_ADDR
// end ;
50168: LD_VAR 0 2
50172: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50173: LD_INT 0
50175: PPUSH
50176: PPUSH
50177: PPUSH
50178: PPUSH
// if not base_units then
50179: LD_VAR 0 1
50183: NOT
50184: IFFALSE 50188
// exit ;
50186: GO 50275
// result := false ;
50188: LD_ADDR_VAR 0 2
50192: PUSH
50193: LD_INT 0
50195: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50196: LD_ADDR_VAR 0 5
50200: PUSH
50201: LD_VAR 0 1
50205: PPUSH
50206: LD_INT 21
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PPUSH
50216: CALL_OW 72
50220: ST_TO_ADDR
// if not tmp then
50221: LD_VAR 0 5
50225: NOT
50226: IFFALSE 50230
// exit ;
50228: GO 50275
// for i in tmp do
50230: LD_ADDR_VAR 0 3
50234: PUSH
50235: LD_VAR 0 5
50239: PUSH
50240: FOR_IN
50241: IFFALSE 50273
// begin result := EnemyInRange ( i , 22 ) ;
50243: LD_ADDR_VAR 0 2
50247: PUSH
50248: LD_VAR 0 3
50252: PPUSH
50253: LD_INT 22
50255: PPUSH
50256: CALL 47888 0 2
50260: ST_TO_ADDR
// if result then
50261: LD_VAR 0 2
50265: IFFALSE 50271
// exit ;
50267: POP
50268: POP
50269: GO 50275
// end ;
50271: GO 50240
50273: POP
50274: POP
// end ;
50275: LD_VAR 0 2
50279: RET
// export function FilterByTag ( units , tag ) ; begin
50280: LD_INT 0
50282: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50283: LD_ADDR_VAR 0 3
50287: PUSH
50288: LD_VAR 0 1
50292: PPUSH
50293: LD_INT 120
50295: PUSH
50296: LD_VAR 0 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PPUSH
50305: CALL_OW 72
50309: ST_TO_ADDR
// end ;
50310: LD_VAR 0 3
50314: RET
// export function IsDriver ( un ) ; begin
50315: LD_INT 0
50317: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50318: LD_ADDR_VAR 0 2
50322: PUSH
50323: LD_VAR 0 1
50327: PUSH
50328: LD_INT 55
50330: PUSH
50331: EMPTY
50332: LIST
50333: PPUSH
50334: CALL_OW 69
50338: IN
50339: ST_TO_ADDR
// end ;
50340: LD_VAR 0 2
50344: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50345: LD_INT 0
50347: PPUSH
50348: PPUSH
// list := [ ] ;
50349: LD_ADDR_VAR 0 5
50353: PUSH
50354: EMPTY
50355: ST_TO_ADDR
// case d of 0 :
50356: LD_VAR 0 3
50360: PUSH
50361: LD_INT 0
50363: DOUBLE
50364: EQUAL
50365: IFTRUE 50369
50367: GO 50502
50369: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50370: LD_ADDR_VAR 0 5
50374: PUSH
50375: LD_VAR 0 1
50379: PUSH
50380: LD_INT 4
50382: MINUS
50383: PUSH
50384: LD_VAR 0 2
50388: PUSH
50389: LD_INT 4
50391: MINUS
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: PUSH
50401: LD_VAR 0 1
50405: PUSH
50406: LD_INT 3
50408: MINUS
50409: PUSH
50410: LD_VAR 0 2
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PUSH
50423: LD_VAR 0 1
50427: PUSH
50428: LD_INT 4
50430: PLUS
50431: PUSH
50432: LD_VAR 0 2
50436: PUSH
50437: LD_INT 4
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: PUSH
50445: LD_VAR 0 1
50449: PUSH
50450: LD_INT 3
50452: PLUS
50453: PUSH
50454: LD_VAR 0 2
50458: PUSH
50459: LD_INT 3
50461: PLUS
50462: PUSH
50463: LD_INT 5
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: PUSH
50471: LD_VAR 0 1
50475: PUSH
50476: LD_VAR 0 2
50480: PUSH
50481: LD_INT 4
50483: PLUS
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// end ; 1 :
50500: GO 51200
50502: LD_INT 1
50504: DOUBLE
50505: EQUAL
50506: IFTRUE 50510
50508: GO 50643
50510: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50511: LD_ADDR_VAR 0 5
50515: PUSH
50516: LD_VAR 0 1
50520: PUSH
50521: LD_VAR 0 2
50525: PUSH
50526: LD_INT 4
50528: MINUS
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: PUSH
50538: LD_VAR 0 1
50542: PUSH
50543: LD_INT 3
50545: MINUS
50546: PUSH
50547: LD_VAR 0 2
50551: PUSH
50552: LD_INT 3
50554: MINUS
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: PUSH
50564: LD_VAR 0 1
50568: PUSH
50569: LD_INT 4
50571: MINUS
50572: PUSH
50573: LD_VAR 0 2
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: PUSH
50586: LD_VAR 0 1
50590: PUSH
50591: LD_VAR 0 2
50595: PUSH
50596: LD_INT 3
50598: PLUS
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: PUSH
50608: LD_VAR 0 1
50612: PUSH
50613: LD_INT 4
50615: PLUS
50616: PUSH
50617: LD_VAR 0 2
50621: PUSH
50622: LD_INT 4
50624: PLUS
50625: PUSH
50626: LD_INT 5
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// end ; 2 :
50641: GO 51200
50643: LD_INT 2
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50780
50651: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50652: LD_ADDR_VAR 0 5
50656: PUSH
50657: LD_VAR 0 1
50661: PUSH
50662: LD_VAR 0 2
50666: PUSH
50667: LD_INT 3
50669: MINUS
50670: PUSH
50671: LD_INT 3
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: PUSH
50679: LD_VAR 0 1
50683: PUSH
50684: LD_INT 4
50686: PLUS
50687: PUSH
50688: LD_VAR 0 2
50692: PUSH
50693: LD_INT 4
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: PUSH
50701: LD_VAR 0 1
50705: PUSH
50706: LD_VAR 0 2
50710: PUSH
50711: LD_INT 4
50713: PLUS
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: PUSH
50723: LD_VAR 0 1
50727: PUSH
50728: LD_INT 3
50730: MINUS
50731: PUSH
50732: LD_VAR 0 2
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: PUSH
50745: LD_VAR 0 1
50749: PUSH
50750: LD_INT 4
50752: MINUS
50753: PUSH
50754: LD_VAR 0 2
50758: PUSH
50759: LD_INT 4
50761: MINUS
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// end ; 3 :
50778: GO 51200
50780: LD_INT 3
50782: DOUBLE
50783: EQUAL
50784: IFTRUE 50788
50786: GO 50921
50788: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50789: LD_ADDR_VAR 0 5
50793: PUSH
50794: LD_VAR 0 1
50798: PUSH
50799: LD_INT 3
50801: PLUS
50802: PUSH
50803: LD_VAR 0 2
50807: PUSH
50808: LD_INT 4
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: PUSH
50816: LD_VAR 0 1
50820: PUSH
50821: LD_INT 4
50823: PLUS
50824: PUSH
50825: LD_VAR 0 2
50829: PUSH
50830: LD_INT 4
50832: PLUS
50833: PUSH
50834: LD_INT 5
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: PUSH
50842: LD_VAR 0 1
50846: PUSH
50847: LD_INT 4
50849: MINUS
50850: PUSH
50851: LD_VAR 0 2
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: PUSH
50864: LD_VAR 0 1
50868: PUSH
50869: LD_VAR 0 2
50873: PUSH
50874: LD_INT 4
50876: MINUS
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: PUSH
50886: LD_VAR 0 1
50890: PUSH
50891: LD_INT 3
50893: MINUS
50894: PUSH
50895: LD_VAR 0 2
50899: PUSH
50900: LD_INT 3
50902: MINUS
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: ST_TO_ADDR
// end ; 4 :
50919: GO 51200
50921: LD_INT 4
50923: DOUBLE
50924: EQUAL
50925: IFTRUE 50929
50927: GO 51062
50929: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50930: LD_ADDR_VAR 0 5
50934: PUSH
50935: LD_VAR 0 1
50939: PUSH
50940: LD_VAR 0 2
50944: PUSH
50945: LD_INT 4
50947: PLUS
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: PUSH
50957: LD_VAR 0 1
50961: PUSH
50962: LD_INT 3
50964: PLUS
50965: PUSH
50966: LD_VAR 0 2
50970: PUSH
50971: LD_INT 3
50973: PLUS
50974: PUSH
50975: LD_INT 5
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: PUSH
50983: LD_VAR 0 1
50987: PUSH
50988: LD_INT 4
50990: PLUS
50991: PUSH
50992: LD_VAR 0 2
50996: PUSH
50997: LD_INT 4
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: PUSH
51005: LD_VAR 0 1
51009: PUSH
51010: LD_VAR 0 2
51014: PUSH
51015: LD_INT 3
51017: MINUS
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: PUSH
51027: LD_VAR 0 1
51031: PUSH
51032: LD_INT 4
51034: MINUS
51035: PUSH
51036: LD_VAR 0 2
51040: PUSH
51041: LD_INT 4
51043: MINUS
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// end ; 5 :
51060: GO 51200
51062: LD_INT 5
51064: DOUBLE
51065: EQUAL
51066: IFTRUE 51070
51068: GO 51199
51070: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51071: LD_ADDR_VAR 0 5
51075: PUSH
51076: LD_VAR 0 1
51080: PUSH
51081: LD_INT 4
51083: MINUS
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: PUSH
51098: LD_VAR 0 1
51102: PUSH
51103: LD_VAR 0 2
51107: PUSH
51108: LD_INT 4
51110: MINUS
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: PUSH
51120: LD_VAR 0 1
51124: PUSH
51125: LD_INT 4
51127: PLUS
51128: PUSH
51129: LD_VAR 0 2
51133: PUSH
51134: LD_INT 4
51136: PLUS
51137: PUSH
51138: LD_INT 5
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: PUSH
51146: LD_VAR 0 1
51150: PUSH
51151: LD_INT 3
51153: PLUS
51154: PUSH
51155: LD_VAR 0 2
51159: PUSH
51160: LD_INT 4
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: PUSH
51168: LD_VAR 0 1
51172: PUSH
51173: LD_VAR 0 2
51177: PUSH
51178: LD_INT 3
51180: PLUS
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// end ; end ;
51197: GO 51200
51199: POP
// result := list ;
51200: LD_ADDR_VAR 0 4
51204: PUSH
51205: LD_VAR 0 5
51209: ST_TO_ADDR
// end ;
51210: LD_VAR 0 4
51214: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51215: LD_INT 0
51217: PPUSH
51218: PPUSH
51219: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51220: LD_VAR 0 1
51224: NOT
51225: PUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 4
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: IN
51249: NOT
51250: OR
51251: IFFALSE 51255
// exit ;
51253: GO 51347
// tmp := [ ] ;
51255: LD_ADDR_VAR 0 5
51259: PUSH
51260: EMPTY
51261: ST_TO_ADDR
// for i in units do
51262: LD_ADDR_VAR 0 4
51266: PUSH
51267: LD_VAR 0 1
51271: PUSH
51272: FOR_IN
51273: IFFALSE 51316
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51275: LD_ADDR_VAR 0 5
51279: PUSH
51280: LD_VAR 0 5
51284: PPUSH
51285: LD_VAR 0 5
51289: PUSH
51290: LD_INT 1
51292: PLUS
51293: PPUSH
51294: LD_VAR 0 4
51298: PPUSH
51299: LD_VAR 0 2
51303: PPUSH
51304: CALL_OW 259
51308: PPUSH
51309: CALL_OW 2
51313: ST_TO_ADDR
51314: GO 51272
51316: POP
51317: POP
// if not tmp then
51318: LD_VAR 0 5
51322: NOT
51323: IFFALSE 51327
// exit ;
51325: GO 51347
// result := SortListByListDesc ( units , tmp ) ;
51327: LD_ADDR_VAR 0 3
51331: PUSH
51332: LD_VAR 0 1
51336: PPUSH
51337: LD_VAR 0 5
51341: PPUSH
51342: CALL_OW 77
51346: ST_TO_ADDR
// end ;
51347: LD_VAR 0 3
51351: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51352: LD_INT 0
51354: PPUSH
51355: PPUSH
51356: PPUSH
// result := false ;
51357: LD_ADDR_VAR 0 3
51361: PUSH
51362: LD_INT 0
51364: ST_TO_ADDR
// x := GetX ( building ) ;
51365: LD_ADDR_VAR 0 4
51369: PUSH
51370: LD_VAR 0 2
51374: PPUSH
51375: CALL_OW 250
51379: ST_TO_ADDR
// y := GetY ( building ) ;
51380: LD_ADDR_VAR 0 5
51384: PUSH
51385: LD_VAR 0 2
51389: PPUSH
51390: CALL_OW 251
51394: ST_TO_ADDR
// if not building or not x or not y then
51395: LD_VAR 0 2
51399: NOT
51400: PUSH
51401: LD_VAR 0 4
51405: NOT
51406: OR
51407: PUSH
51408: LD_VAR 0 5
51412: NOT
51413: OR
51414: IFFALSE 51418
// exit ;
51416: GO 51510
// if GetTaskList ( unit ) then
51418: LD_VAR 0 1
51422: PPUSH
51423: CALL_OW 437
51427: IFFALSE 51510
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51429: LD_STRING e
51431: PUSH
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 437
51441: PUSH
51442: LD_INT 1
51444: ARRAY
51445: PUSH
51446: LD_INT 1
51448: ARRAY
51449: EQUAL
51450: PUSH
51451: LD_VAR 0 4
51455: PUSH
51456: LD_VAR 0 1
51460: PPUSH
51461: CALL_OW 437
51465: PUSH
51466: LD_INT 1
51468: ARRAY
51469: PUSH
51470: LD_INT 2
51472: ARRAY
51473: EQUAL
51474: AND
51475: PUSH
51476: LD_VAR 0 5
51480: PUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: CALL_OW 437
51490: PUSH
51491: LD_INT 1
51493: ARRAY
51494: PUSH
51495: LD_INT 3
51497: ARRAY
51498: EQUAL
51499: AND
51500: IFFALSE 51510
// result := true end ;
51502: LD_ADDR_VAR 0 3
51506: PUSH
51507: LD_INT 1
51509: ST_TO_ADDR
// end ;
51510: LD_VAR 0 3
51514: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51515: LD_INT 0
51517: PPUSH
// result := false ;
51518: LD_ADDR_VAR 0 4
51522: PUSH
51523: LD_INT 0
51525: ST_TO_ADDR
// if GetTaskList ( unit ) then
51526: LD_VAR 0 1
51530: PPUSH
51531: CALL_OW 437
51535: IFFALSE 51618
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51537: LD_STRING M
51539: PUSH
51540: LD_VAR 0 1
51544: PPUSH
51545: CALL_OW 437
51549: PUSH
51550: LD_INT 1
51552: ARRAY
51553: PUSH
51554: LD_INT 1
51556: ARRAY
51557: EQUAL
51558: PUSH
51559: LD_VAR 0 2
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 437
51573: PUSH
51574: LD_INT 1
51576: ARRAY
51577: PUSH
51578: LD_INT 2
51580: ARRAY
51581: EQUAL
51582: AND
51583: PUSH
51584: LD_VAR 0 3
51588: PUSH
51589: LD_VAR 0 1
51593: PPUSH
51594: CALL_OW 437
51598: PUSH
51599: LD_INT 1
51601: ARRAY
51602: PUSH
51603: LD_INT 3
51605: ARRAY
51606: EQUAL
51607: AND
51608: IFFALSE 51618
// result := true ;
51610: LD_ADDR_VAR 0 4
51614: PUSH
51615: LD_INT 1
51617: ST_TO_ADDR
// end ; end ;
51618: LD_VAR 0 4
51622: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51623: LD_INT 0
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
// if not unit or not area then
51629: LD_VAR 0 1
51633: NOT
51634: PUSH
51635: LD_VAR 0 2
51639: NOT
51640: OR
51641: IFFALSE 51645
// exit ;
51643: GO 51809
// tmp := AreaToList ( area , i ) ;
51645: LD_ADDR_VAR 0 6
51649: PUSH
51650: LD_VAR 0 2
51654: PPUSH
51655: LD_VAR 0 5
51659: PPUSH
51660: CALL_OW 517
51664: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51665: LD_ADDR_VAR 0 5
51669: PUSH
51670: DOUBLE
51671: LD_INT 1
51673: DEC
51674: ST_TO_ADDR
51675: LD_VAR 0 6
51679: PUSH
51680: LD_INT 1
51682: ARRAY
51683: PUSH
51684: FOR_TO
51685: IFFALSE 51807
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51687: LD_ADDR_VAR 0 7
51691: PUSH
51692: LD_VAR 0 6
51696: PUSH
51697: LD_INT 1
51699: ARRAY
51700: PUSH
51701: LD_VAR 0 5
51705: ARRAY
51706: PUSH
51707: LD_VAR 0 6
51711: PUSH
51712: LD_INT 2
51714: ARRAY
51715: PUSH
51716: LD_VAR 0 5
51720: ARRAY
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51726: LD_VAR 0 7
51730: PUSH
51731: LD_INT 1
51733: ARRAY
51734: PPUSH
51735: LD_VAR 0 7
51739: PUSH
51740: LD_INT 2
51742: ARRAY
51743: PPUSH
51744: CALL_OW 428
51748: PUSH
51749: LD_INT 0
51751: EQUAL
51752: IFFALSE 51805
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51754: LD_VAR 0 1
51758: PPUSH
51759: LD_VAR 0 7
51763: PUSH
51764: LD_INT 1
51766: ARRAY
51767: PPUSH
51768: LD_VAR 0 7
51772: PUSH
51773: LD_INT 2
51775: ARRAY
51776: PPUSH
51777: LD_VAR 0 3
51781: PPUSH
51782: CALL_OW 48
// result := IsPlaced ( unit ) ;
51786: LD_ADDR_VAR 0 4
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 305
51800: ST_TO_ADDR
// exit ;
51801: POP
51802: POP
51803: GO 51809
// end ; end ;
51805: GO 51684
51807: POP
51808: POP
// end ;
51809: LD_VAR 0 4
51813: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51814: LD_INT 0
51816: PPUSH
51817: PPUSH
51818: PPUSH
// if not side or side > 8 then
51819: LD_VAR 0 1
51823: NOT
51824: PUSH
51825: LD_VAR 0 1
51829: PUSH
51830: LD_INT 8
51832: GREATER
51833: OR
51834: IFFALSE 51838
// exit ;
51836: GO 52025
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51838: LD_ADDR_VAR 0 4
51842: PUSH
51843: LD_INT 22
51845: PUSH
51846: LD_VAR 0 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 21
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PPUSH
51869: CALL_OW 69
51873: ST_TO_ADDR
// if not tmp then
51874: LD_VAR 0 4
51878: NOT
51879: IFFALSE 51883
// exit ;
51881: GO 52025
// enable_addtolog := true ;
51883: LD_ADDR_OWVAR 81
51887: PUSH
51888: LD_INT 1
51890: ST_TO_ADDR
// AddToLog ( [ ) ;
51891: LD_STRING [
51893: PPUSH
51894: CALL_OW 561
// for i in tmp do
51898: LD_ADDR_VAR 0 3
51902: PUSH
51903: LD_VAR 0 4
51907: PUSH
51908: FOR_IN
51909: IFFALSE 52016
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51911: LD_STRING [
51913: PUSH
51914: LD_VAR 0 3
51918: PPUSH
51919: CALL_OW 266
51923: STR
51924: PUSH
51925: LD_STRING , 
51927: STR
51928: PUSH
51929: LD_VAR 0 3
51933: PPUSH
51934: CALL_OW 250
51938: STR
51939: PUSH
51940: LD_STRING , 
51942: STR
51943: PUSH
51944: LD_VAR 0 3
51948: PPUSH
51949: CALL_OW 251
51953: STR
51954: PUSH
51955: LD_STRING , 
51957: STR
51958: PUSH
51959: LD_VAR 0 3
51963: PPUSH
51964: CALL_OW 254
51968: STR
51969: PUSH
51970: LD_STRING , 
51972: STR
51973: PUSH
51974: LD_VAR 0 3
51978: PPUSH
51979: LD_INT 1
51981: PPUSH
51982: CALL_OW 268
51986: STR
51987: PUSH
51988: LD_STRING , 
51990: STR
51991: PUSH
51992: LD_VAR 0 3
51996: PPUSH
51997: LD_INT 2
51999: PPUSH
52000: CALL_OW 268
52004: STR
52005: PUSH
52006: LD_STRING ],
52008: STR
52009: PPUSH
52010: CALL_OW 561
// end ;
52014: GO 51908
52016: POP
52017: POP
// AddToLog ( ]; ) ;
52018: LD_STRING ];
52020: PPUSH
52021: CALL_OW 561
// end ;
52025: LD_VAR 0 2
52029: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52030: LD_INT 0
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
// if not area or not rate or not max then
52037: LD_VAR 0 1
52041: NOT
52042: PUSH
52043: LD_VAR 0 2
52047: NOT
52048: OR
52049: PUSH
52050: LD_VAR 0 4
52054: NOT
52055: OR
52056: IFFALSE 52060
// exit ;
52058: GO 52249
// while 1 do
52060: LD_INT 1
52062: IFFALSE 52249
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52064: LD_ADDR_VAR 0 9
52068: PUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: LD_INT 1
52076: PPUSH
52077: CALL_OW 287
52081: PUSH
52082: LD_INT 10
52084: MUL
52085: ST_TO_ADDR
// r := rate / 10 ;
52086: LD_ADDR_VAR 0 7
52090: PUSH
52091: LD_VAR 0 2
52095: PUSH
52096: LD_INT 10
52098: DIVREAL
52099: ST_TO_ADDR
// time := 1 1$00 ;
52100: LD_ADDR_VAR 0 8
52104: PUSH
52105: LD_INT 2100
52107: ST_TO_ADDR
// if amount < min then
52108: LD_VAR 0 9
52112: PUSH
52113: LD_VAR 0 3
52117: LESS
52118: IFFALSE 52136
// r := r * 2 else
52120: LD_ADDR_VAR 0 7
52124: PUSH
52125: LD_VAR 0 7
52129: PUSH
52130: LD_INT 2
52132: MUL
52133: ST_TO_ADDR
52134: GO 52162
// if amount > max then
52136: LD_VAR 0 9
52140: PUSH
52141: LD_VAR 0 4
52145: GREATER
52146: IFFALSE 52162
// r := r / 2 ;
52148: LD_ADDR_VAR 0 7
52152: PUSH
52153: LD_VAR 0 7
52157: PUSH
52158: LD_INT 2
52160: DIVREAL
52161: ST_TO_ADDR
// time := time / r ;
52162: LD_ADDR_VAR 0 8
52166: PUSH
52167: LD_VAR 0 8
52171: PUSH
52172: LD_VAR 0 7
52176: DIVREAL
52177: ST_TO_ADDR
// if time < 0 then
52178: LD_VAR 0 8
52182: PUSH
52183: LD_INT 0
52185: LESS
52186: IFFALSE 52203
// time := time * - 1 ;
52188: LD_ADDR_VAR 0 8
52192: PUSH
52193: LD_VAR 0 8
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: MUL
52202: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52203: LD_VAR 0 8
52207: PUSH
52208: LD_INT 35
52210: PPUSH
52211: LD_INT 875
52213: PPUSH
52214: CALL_OW 12
52218: PLUS
52219: PPUSH
52220: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52224: LD_INT 1
52226: PPUSH
52227: LD_INT 5
52229: PPUSH
52230: CALL_OW 12
52234: PPUSH
52235: LD_VAR 0 1
52239: PPUSH
52240: LD_INT 1
52242: PPUSH
52243: CALL_OW 55
// end ;
52247: GO 52060
// end ;
52249: LD_VAR 0 5
52253: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52254: LD_INT 0
52256: PPUSH
52257: PPUSH
52258: PPUSH
52259: PPUSH
52260: PPUSH
52261: PPUSH
52262: PPUSH
52263: PPUSH
// if not turrets or not factories then
52264: LD_VAR 0 1
52268: NOT
52269: PUSH
52270: LD_VAR 0 2
52274: NOT
52275: OR
52276: IFFALSE 52280
// exit ;
52278: GO 52587
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52280: LD_ADDR_VAR 0 10
52284: PUSH
52285: LD_INT 5
52287: PUSH
52288: LD_INT 6
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 4
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: LD_INT 5
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 24
52322: PUSH
52323: LD_INT 25
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 23
52332: PUSH
52333: LD_INT 27
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 42
52346: PUSH
52347: LD_INT 43
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 44
52356: PUSH
52357: LD_INT 46
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 45
52366: PUSH
52367: LD_INT 47
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// result := [ ] ;
52384: LD_ADDR_VAR 0 3
52388: PUSH
52389: EMPTY
52390: ST_TO_ADDR
// for i in turrets do
52391: LD_ADDR_VAR 0 4
52395: PUSH
52396: LD_VAR 0 1
52400: PUSH
52401: FOR_IN
52402: IFFALSE 52585
// begin nat := GetNation ( i ) ;
52404: LD_ADDR_VAR 0 7
52408: PUSH
52409: LD_VAR 0 4
52413: PPUSH
52414: CALL_OW 248
52418: ST_TO_ADDR
// weapon := 0 ;
52419: LD_ADDR_VAR 0 8
52423: PUSH
52424: LD_INT 0
52426: ST_TO_ADDR
// if not nat then
52427: LD_VAR 0 7
52431: NOT
52432: IFFALSE 52436
// continue ;
52434: GO 52401
// for j in list [ nat ] do
52436: LD_ADDR_VAR 0 5
52440: PUSH
52441: LD_VAR 0 10
52445: PUSH
52446: LD_VAR 0 7
52450: ARRAY
52451: PUSH
52452: FOR_IN
52453: IFFALSE 52494
// if GetBWeapon ( i ) = j [ 1 ] then
52455: LD_VAR 0 4
52459: PPUSH
52460: CALL_OW 269
52464: PUSH
52465: LD_VAR 0 5
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: EQUAL
52474: IFFALSE 52492
// begin weapon := j [ 2 ] ;
52476: LD_ADDR_VAR 0 8
52480: PUSH
52481: LD_VAR 0 5
52485: PUSH
52486: LD_INT 2
52488: ARRAY
52489: ST_TO_ADDR
// break ;
52490: GO 52494
// end ;
52492: GO 52452
52494: POP
52495: POP
// if not weapon then
52496: LD_VAR 0 8
52500: NOT
52501: IFFALSE 52505
// continue ;
52503: GO 52401
// for k in factories do
52505: LD_ADDR_VAR 0 6
52509: PUSH
52510: LD_VAR 0 2
52514: PUSH
52515: FOR_IN
52516: IFFALSE 52581
// begin weapons := AvailableWeaponList ( k ) ;
52518: LD_ADDR_VAR 0 9
52522: PUSH
52523: LD_VAR 0 6
52527: PPUSH
52528: CALL_OW 478
52532: ST_TO_ADDR
// if not weapons then
52533: LD_VAR 0 9
52537: NOT
52538: IFFALSE 52542
// continue ;
52540: GO 52515
// if weapon in weapons then
52542: LD_VAR 0 8
52546: PUSH
52547: LD_VAR 0 9
52551: IN
52552: IFFALSE 52579
// begin result := [ i , weapon ] ;
52554: LD_ADDR_VAR 0 3
52558: PUSH
52559: LD_VAR 0 4
52563: PUSH
52564: LD_VAR 0 8
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: ST_TO_ADDR
// exit ;
52573: POP
52574: POP
52575: POP
52576: POP
52577: GO 52587
// end ; end ;
52579: GO 52515
52581: POP
52582: POP
// end ;
52583: GO 52401
52585: POP
52586: POP
// end ;
52587: LD_VAR 0 3
52591: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52592: LD_INT 0
52594: PPUSH
// if not side or side > 8 then
52595: LD_VAR 0 3
52599: NOT
52600: PUSH
52601: LD_VAR 0 3
52605: PUSH
52606: LD_INT 8
52608: GREATER
52609: OR
52610: IFFALSE 52614
// exit ;
52612: GO 52673
// if not range then
52614: LD_VAR 0 4
52618: NOT
52619: IFFALSE 52630
// range := - 12 ;
52621: LD_ADDR_VAR 0 4
52625: PUSH
52626: LD_INT 12
52628: NEG
52629: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52630: LD_VAR 0 1
52634: PPUSH
52635: LD_VAR 0 2
52639: PPUSH
52640: LD_VAR 0 3
52644: PPUSH
52645: LD_VAR 0 4
52649: PPUSH
52650: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52654: LD_VAR 0 1
52658: PPUSH
52659: LD_VAR 0 2
52663: PPUSH
52664: LD_VAR 0 3
52668: PPUSH
52669: CALL_OW 331
// end ;
52673: LD_VAR 0 5
52677: RET
// export function Video ( mode ) ; begin
52678: LD_INT 0
52680: PPUSH
// ingame_video = mode ;
52681: LD_ADDR_OWVAR 52
52685: PUSH
52686: LD_VAR 0 1
52690: ST_TO_ADDR
// interface_hidden = mode ;
52691: LD_ADDR_OWVAR 54
52695: PUSH
52696: LD_VAR 0 1
52700: ST_TO_ADDR
// end ;
52701: LD_VAR 0 2
52705: RET
// export function Join ( array , element ) ; begin
52706: LD_INT 0
52708: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52709: LD_ADDR_VAR 0 3
52713: PUSH
52714: LD_VAR 0 1
52718: PPUSH
52719: LD_VAR 0 1
52723: PUSH
52724: LD_INT 1
52726: PLUS
52727: PPUSH
52728: LD_VAR 0 2
52732: PPUSH
52733: CALL_OW 1
52737: ST_TO_ADDR
// end ;
52738: LD_VAR 0 3
52742: RET
// export function JoinUnion ( array , element ) ; begin
52743: LD_INT 0
52745: PPUSH
// result := array union element ;
52746: LD_ADDR_VAR 0 3
52750: PUSH
52751: LD_VAR 0 1
52755: PUSH
52756: LD_VAR 0 2
52760: UNION
52761: ST_TO_ADDR
// end ;
52762: LD_VAR 0 3
52766: RET
// export function GetBehemoths ( side ) ; begin
52767: LD_INT 0
52769: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52770: LD_ADDR_VAR 0 2
52774: PUSH
52775: LD_INT 22
52777: PUSH
52778: LD_VAR 0 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 31
52789: PUSH
52790: LD_INT 25
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PPUSH
52801: CALL_OW 69
52805: ST_TO_ADDR
// end ;
52806: LD_VAR 0 2
52810: RET
// export function Shuffle ( array ) ; var i , index ; begin
52811: LD_INT 0
52813: PPUSH
52814: PPUSH
52815: PPUSH
// result := [ ] ;
52816: LD_ADDR_VAR 0 2
52820: PUSH
52821: EMPTY
52822: ST_TO_ADDR
// if not array then
52823: LD_VAR 0 1
52827: NOT
52828: IFFALSE 52832
// exit ;
52830: GO 52931
// Randomize ;
52832: CALL_OW 10
// for i = array downto 1 do
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: DOUBLE
52842: LD_VAR 0 1
52846: INC
52847: ST_TO_ADDR
52848: LD_INT 1
52850: PUSH
52851: FOR_DOWNTO
52852: IFFALSE 52929
// begin index := rand ( 1 , array ) ;
52854: LD_ADDR_VAR 0 4
52858: PUSH
52859: LD_INT 1
52861: PPUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: CALL_OW 12
52871: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52872: LD_ADDR_VAR 0 2
52876: PUSH
52877: LD_VAR 0 2
52881: PPUSH
52882: LD_VAR 0 2
52886: PUSH
52887: LD_INT 1
52889: PLUS
52890: PPUSH
52891: LD_VAR 0 1
52895: PUSH
52896: LD_VAR 0 4
52900: ARRAY
52901: PPUSH
52902: CALL_OW 2
52906: ST_TO_ADDR
// array := Delete ( array , index ) ;
52907: LD_ADDR_VAR 0 1
52911: PUSH
52912: LD_VAR 0 1
52916: PPUSH
52917: LD_VAR 0 4
52921: PPUSH
52922: CALL_OW 3
52926: ST_TO_ADDR
// end ;
52927: GO 52851
52929: POP
52930: POP
// end ;
52931: LD_VAR 0 2
52935: RET
// export function GetBaseMaterials ( base ) ; begin
52936: LD_INT 0
52938: PPUSH
// result := [ 0 , 0 , 0 ] ;
52939: LD_ADDR_VAR 0 2
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// if not base then
52958: LD_VAR 0 1
52962: NOT
52963: IFFALSE 52967
// exit ;
52965: GO 53016
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52967: LD_ADDR_VAR 0 2
52971: PUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: LD_INT 1
52979: PPUSH
52980: CALL_OW 275
52984: PUSH
52985: LD_VAR 0 1
52989: PPUSH
52990: LD_INT 2
52992: PPUSH
52993: CALL_OW 275
52997: PUSH
52998: LD_VAR 0 1
53002: PPUSH
53003: LD_INT 3
53005: PPUSH
53006: CALL_OW 275
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// end ;
53016: LD_VAR 0 2
53020: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53021: LD_INT 0
53023: PPUSH
53024: PPUSH
// result := array ;
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: LD_VAR 0 1
53034: ST_TO_ADDR
// if size >= result then
53035: LD_VAR 0 2
53039: PUSH
53040: LD_VAR 0 3
53044: GREATEREQUAL
53045: IFFALSE 53049
// exit ;
53047: GO 53099
// if size then
53049: LD_VAR 0 2
53053: IFFALSE 53099
// for i := array downto size do
53055: LD_ADDR_VAR 0 4
53059: PUSH
53060: DOUBLE
53061: LD_VAR 0 1
53065: INC
53066: ST_TO_ADDR
53067: LD_VAR 0 2
53071: PUSH
53072: FOR_DOWNTO
53073: IFFALSE 53097
// result := Delete ( result , result ) ;
53075: LD_ADDR_VAR 0 3
53079: PUSH
53080: LD_VAR 0 3
53084: PPUSH
53085: LD_VAR 0 3
53089: PPUSH
53090: CALL_OW 3
53094: ST_TO_ADDR
53095: GO 53072
53097: POP
53098: POP
// end ;
53099: LD_VAR 0 3
53103: RET
// export function ComExit ( unit ) ; var tmp ; begin
53104: LD_INT 0
53106: PPUSH
53107: PPUSH
// if not IsInUnit ( unit ) then
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 310
53117: NOT
53118: IFFALSE 53122
// exit ;
53120: GO 53182
// tmp := IsInUnit ( unit ) ;
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 310
53136: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53137: LD_VAR 0 3
53141: PPUSH
53142: CALL_OW 247
53146: PUSH
53147: LD_INT 2
53149: EQUAL
53150: IFFALSE 53163
// ComExitVehicle ( unit ) else
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 121
53161: GO 53172
// ComExitBuilding ( unit ) ;
53163: LD_VAR 0 1
53167: PPUSH
53168: CALL_OW 122
// result := tmp ;
53172: LD_ADDR_VAR 0 2
53176: PUSH
53177: LD_VAR 0 3
53181: ST_TO_ADDR
// end ;
53182: LD_VAR 0 2
53186: RET
// export function ComExitAll ( units ) ; var i ; begin
53187: LD_INT 0
53189: PPUSH
53190: PPUSH
// if not units then
53191: LD_VAR 0 1
53195: NOT
53196: IFFALSE 53200
// exit ;
53198: GO 53226
// for i in units do
53200: LD_ADDR_VAR 0 3
53204: PUSH
53205: LD_VAR 0 1
53209: PUSH
53210: FOR_IN
53211: IFFALSE 53224
// ComExit ( i ) ;
53213: LD_VAR 0 3
53217: PPUSH
53218: CALL 53104 0 1
53222: GO 53210
53224: POP
53225: POP
// end ;
53226: LD_VAR 0 2
53230: RET
// export function ResetHc ; begin
53231: LD_INT 0
53233: PPUSH
// InitHc ;
53234: CALL_OW 19
// hc_importance := 0 ;
53238: LD_ADDR_OWVAR 32
53242: PUSH
53243: LD_INT 0
53245: ST_TO_ADDR
// end ;
53246: LD_VAR 0 1
53250: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53251: LD_INT 0
53253: PPUSH
53254: PPUSH
53255: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53256: LD_ADDR_VAR 0 6
53260: PUSH
53261: LD_VAR 0 1
53265: PUSH
53266: LD_VAR 0 3
53270: PLUS
53271: PUSH
53272: LD_INT 2
53274: DIV
53275: ST_TO_ADDR
// if _x < 0 then
53276: LD_VAR 0 6
53280: PUSH
53281: LD_INT 0
53283: LESS
53284: IFFALSE 53301
// _x := _x * - 1 ;
53286: LD_ADDR_VAR 0 6
53290: PUSH
53291: LD_VAR 0 6
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: MUL
53300: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53301: LD_ADDR_VAR 0 7
53305: PUSH
53306: LD_VAR 0 2
53310: PUSH
53311: LD_VAR 0 4
53315: PLUS
53316: PUSH
53317: LD_INT 2
53319: DIV
53320: ST_TO_ADDR
// if _y < 0 then
53321: LD_VAR 0 7
53325: PUSH
53326: LD_INT 0
53328: LESS
53329: IFFALSE 53346
// _y := _y * - 1 ;
53331: LD_ADDR_VAR 0 7
53335: PUSH
53336: LD_VAR 0 7
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: MUL
53345: ST_TO_ADDR
// result := [ _x , _y ] ;
53346: LD_ADDR_VAR 0 5
53350: PUSH
53351: LD_VAR 0 6
53355: PUSH
53356: LD_VAR 0 7
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// end ;
53365: LD_VAR 0 5
53369: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53370: LD_INT 0
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
// task := GetTaskList ( unit ) ;
53376: LD_ADDR_VAR 0 7
53380: PUSH
53381: LD_VAR 0 1
53385: PPUSH
53386: CALL_OW 437
53390: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53391: LD_VAR 0 7
53395: NOT
53396: PUSH
53397: LD_VAR 0 1
53401: PPUSH
53402: LD_VAR 0 2
53406: PPUSH
53407: CALL_OW 308
53411: NOT
53412: AND
53413: IFFALSE 53417
// exit ;
53415: GO 53535
// if IsInArea ( unit , area ) then
53417: LD_VAR 0 1
53421: PPUSH
53422: LD_VAR 0 2
53426: PPUSH
53427: CALL_OW 308
53431: IFFALSE 53449
// begin ComMoveToArea ( unit , goAway ) ;
53433: LD_VAR 0 1
53437: PPUSH
53438: LD_VAR 0 3
53442: PPUSH
53443: CALL_OW 113
// exit ;
53447: GO 53535
// end ; if task [ 1 ] [ 1 ] <> M then
53449: LD_VAR 0 7
53453: PUSH
53454: LD_INT 1
53456: ARRAY
53457: PUSH
53458: LD_INT 1
53460: ARRAY
53461: PUSH
53462: LD_STRING M
53464: NONEQUAL
53465: IFFALSE 53469
// exit ;
53467: GO 53535
// x := task [ 1 ] [ 2 ] ;
53469: LD_ADDR_VAR 0 5
53473: PUSH
53474: LD_VAR 0 7
53478: PUSH
53479: LD_INT 1
53481: ARRAY
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53487: LD_ADDR_VAR 0 6
53491: PUSH
53492: LD_VAR 0 7
53496: PUSH
53497: LD_INT 1
53499: ARRAY
53500: PUSH
53501: LD_INT 3
53503: ARRAY
53504: ST_TO_ADDR
// if InArea ( x , y , area ) then
53505: LD_VAR 0 5
53509: PPUSH
53510: LD_VAR 0 6
53514: PPUSH
53515: LD_VAR 0 2
53519: PPUSH
53520: CALL_OW 309
53524: IFFALSE 53535
// ComStop ( unit ) ;
53526: LD_VAR 0 1
53530: PPUSH
53531: CALL_OW 141
// end ;
53535: LD_VAR 0 4
53539: RET
// export function Abs ( value ) ; begin
53540: LD_INT 0
53542: PPUSH
// result := value ;
53543: LD_ADDR_VAR 0 2
53547: PUSH
53548: LD_VAR 0 1
53552: ST_TO_ADDR
// if value < 0 then
53553: LD_VAR 0 1
53557: PUSH
53558: LD_INT 0
53560: LESS
53561: IFFALSE 53578
// result := value * - 1 ;
53563: LD_ADDR_VAR 0 2
53567: PUSH
53568: LD_VAR 0 1
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: MUL
53577: ST_TO_ADDR
// end ;
53578: LD_VAR 0 2
53582: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53583: LD_INT 0
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
// if not unit or not building then
53593: LD_VAR 0 1
53597: NOT
53598: PUSH
53599: LD_VAR 0 2
53603: NOT
53604: OR
53605: IFFALSE 53609
// exit ;
53607: GO 53835
// x := GetX ( building ) ;
53609: LD_ADDR_VAR 0 4
53613: PUSH
53614: LD_VAR 0 2
53618: PPUSH
53619: CALL_OW 250
53623: ST_TO_ADDR
// y := GetY ( building ) ;
53624: LD_ADDR_VAR 0 6
53628: PUSH
53629: LD_VAR 0 2
53633: PPUSH
53634: CALL_OW 251
53638: ST_TO_ADDR
// d := GetDir ( building ) ;
53639: LD_ADDR_VAR 0 8
53643: PUSH
53644: LD_VAR 0 2
53648: PPUSH
53649: CALL_OW 254
53653: ST_TO_ADDR
// r := 4 ;
53654: LD_ADDR_VAR 0 9
53658: PUSH
53659: LD_INT 4
53661: ST_TO_ADDR
// for i := 1 to 5 do
53662: LD_ADDR_VAR 0 10
53666: PUSH
53667: DOUBLE
53668: LD_INT 1
53670: DEC
53671: ST_TO_ADDR
53672: LD_INT 5
53674: PUSH
53675: FOR_TO
53676: IFFALSE 53833
// begin _x := ShiftX ( x , d , r + i ) ;
53678: LD_ADDR_VAR 0 5
53682: PUSH
53683: LD_VAR 0 4
53687: PPUSH
53688: LD_VAR 0 8
53692: PPUSH
53693: LD_VAR 0 9
53697: PUSH
53698: LD_VAR 0 10
53702: PLUS
53703: PPUSH
53704: CALL_OW 272
53708: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53709: LD_ADDR_VAR 0 7
53713: PUSH
53714: LD_VAR 0 6
53718: PPUSH
53719: LD_VAR 0 8
53723: PPUSH
53724: LD_VAR 0 9
53728: PUSH
53729: LD_VAR 0 10
53733: PLUS
53734: PPUSH
53735: CALL_OW 273
53739: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53740: LD_VAR 0 5
53744: PPUSH
53745: LD_VAR 0 7
53749: PPUSH
53750: CALL_OW 488
53754: PUSH
53755: LD_VAR 0 5
53759: PPUSH
53760: LD_VAR 0 7
53764: PPUSH
53765: CALL_OW 428
53769: PPUSH
53770: CALL_OW 247
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: IN
53785: NOT
53786: AND
53787: IFFALSE 53831
// begin ComMoveXY ( unit , _x , _y ) ;
53789: LD_VAR 0 1
53793: PPUSH
53794: LD_VAR 0 5
53798: PPUSH
53799: LD_VAR 0 7
53803: PPUSH
53804: CALL_OW 111
// result := [ _x , _y ] ;
53808: LD_ADDR_VAR 0 3
53812: PUSH
53813: LD_VAR 0 5
53817: PUSH
53818: LD_VAR 0 7
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: ST_TO_ADDR
// exit ;
53827: POP
53828: POP
53829: GO 53835
// end ; end ;
53831: GO 53675
53833: POP
53834: POP
// end ;
53835: LD_VAR 0 3
53839: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53840: LD_INT 0
53842: PPUSH
53843: PPUSH
53844: PPUSH
// result := 0 ;
53845: LD_ADDR_VAR 0 3
53849: PUSH
53850: LD_INT 0
53852: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53853: LD_VAR 0 1
53857: PUSH
53858: LD_INT 0
53860: LESS
53861: PUSH
53862: LD_VAR 0 1
53866: PUSH
53867: LD_INT 8
53869: GREATER
53870: OR
53871: PUSH
53872: LD_VAR 0 2
53876: PUSH
53877: LD_INT 0
53879: LESS
53880: OR
53881: PUSH
53882: LD_VAR 0 2
53886: PUSH
53887: LD_INT 8
53889: GREATER
53890: OR
53891: IFFALSE 53895
// exit ;
53893: GO 53970
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53895: LD_ADDR_VAR 0 4
53899: PUSH
53900: LD_INT 22
53902: PUSH
53903: LD_VAR 0 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PPUSH
53912: CALL_OW 69
53916: PUSH
53917: FOR_IN
53918: IFFALSE 53968
// begin un := UnitShoot ( i ) ;
53920: LD_ADDR_VAR 0 5
53924: PUSH
53925: LD_VAR 0 4
53929: PPUSH
53930: CALL_OW 504
53934: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53935: LD_VAR 0 5
53939: PPUSH
53940: CALL_OW 255
53944: PUSH
53945: LD_VAR 0 1
53949: EQUAL
53950: IFFALSE 53966
// begin result := un ;
53952: LD_ADDR_VAR 0 3
53956: PUSH
53957: LD_VAR 0 5
53961: ST_TO_ADDR
// exit ;
53962: POP
53963: POP
53964: GO 53970
// end ; end ;
53966: GO 53917
53968: POP
53969: POP
// end ;
53970: LD_VAR 0 3
53974: RET
// export function GetCargoBay ( units ) ; begin
53975: LD_INT 0
53977: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53978: LD_ADDR_VAR 0 2
53982: PUSH
53983: LD_VAR 0 1
53987: PPUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 34
53993: PUSH
53994: LD_INT 12
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 34
54003: PUSH
54004: LD_INT 51
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 34
54013: PUSH
54014: LD_INT 32
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 34
54023: PUSH
54024: LD_INT 89
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: PPUSH
54038: CALL_OW 72
54042: ST_TO_ADDR
// end ;
54043: LD_VAR 0 2
54047: RET
// export function Negate ( value ) ; begin
54048: LD_INT 0
54050: PPUSH
// result := not value ;
54051: LD_ADDR_VAR 0 2
54055: PUSH
54056: LD_VAR 0 1
54060: NOT
54061: ST_TO_ADDR
// end ;
54062: LD_VAR 0 2
54066: RET
// export function Inc ( value ) ; begin
54067: LD_INT 0
54069: PPUSH
// result := value + 1 ;
54070: LD_ADDR_VAR 0 2
54074: PUSH
54075: LD_VAR 0 1
54079: PUSH
54080: LD_INT 1
54082: PLUS
54083: ST_TO_ADDR
// end ;
54084: LD_VAR 0 2
54088: RET
// export function Dec ( value ) ; begin
54089: LD_INT 0
54091: PPUSH
// result := value - 1 ;
54092: LD_ADDR_VAR 0 2
54096: PUSH
54097: LD_VAR 0 1
54101: PUSH
54102: LD_INT 1
54104: MINUS
54105: ST_TO_ADDR
// end ;
54106: LD_VAR 0 2
54110: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54111: LD_INT 0
54113: PPUSH
54114: PPUSH
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54121: LD_VAR 0 1
54125: PPUSH
54126: LD_VAR 0 2
54130: PPUSH
54131: CALL_OW 488
54135: NOT
54136: PUSH
54137: LD_VAR 0 3
54141: PPUSH
54142: LD_VAR 0 4
54146: PPUSH
54147: CALL_OW 488
54151: NOT
54152: OR
54153: IFFALSE 54166
// begin result := - 1 ;
54155: LD_ADDR_VAR 0 5
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: ST_TO_ADDR
// exit ;
54164: GO 54401
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54166: LD_ADDR_VAR 0 12
54170: PUSH
54171: LD_VAR 0 1
54175: PPUSH
54176: LD_VAR 0 2
54180: PPUSH
54181: LD_VAR 0 3
54185: PPUSH
54186: LD_VAR 0 4
54190: PPUSH
54191: CALL 53251 0 4
54195: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54196: LD_ADDR_VAR 0 11
54200: PUSH
54201: LD_VAR 0 1
54205: PPUSH
54206: LD_VAR 0 2
54210: PPUSH
54211: LD_VAR 0 12
54215: PUSH
54216: LD_INT 1
54218: ARRAY
54219: PPUSH
54220: LD_VAR 0 12
54224: PUSH
54225: LD_INT 2
54227: ARRAY
54228: PPUSH
54229: CALL_OW 298
54233: ST_TO_ADDR
// distance := 9999 ;
54234: LD_ADDR_VAR 0 10
54238: PUSH
54239: LD_INT 9999
54241: ST_TO_ADDR
// for i := 0 to 5 do
54242: LD_ADDR_VAR 0 6
54246: PUSH
54247: DOUBLE
54248: LD_INT 0
54250: DEC
54251: ST_TO_ADDR
54252: LD_INT 5
54254: PUSH
54255: FOR_TO
54256: IFFALSE 54399
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54258: LD_ADDR_VAR 0 7
54262: PUSH
54263: LD_VAR 0 1
54267: PPUSH
54268: LD_VAR 0 6
54272: PPUSH
54273: LD_VAR 0 11
54277: PPUSH
54278: CALL_OW 272
54282: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54283: LD_ADDR_VAR 0 8
54287: PUSH
54288: LD_VAR 0 2
54292: PPUSH
54293: LD_VAR 0 6
54297: PPUSH
54298: LD_VAR 0 11
54302: PPUSH
54303: CALL_OW 273
54307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54308: LD_VAR 0 7
54312: PPUSH
54313: LD_VAR 0 8
54317: PPUSH
54318: CALL_OW 488
54322: NOT
54323: IFFALSE 54327
// continue ;
54325: GO 54255
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54327: LD_ADDR_VAR 0 9
54331: PUSH
54332: LD_VAR 0 12
54336: PUSH
54337: LD_INT 1
54339: ARRAY
54340: PPUSH
54341: LD_VAR 0 12
54345: PUSH
54346: LD_INT 2
54348: ARRAY
54349: PPUSH
54350: LD_VAR 0 7
54354: PPUSH
54355: LD_VAR 0 8
54359: PPUSH
54360: CALL_OW 298
54364: ST_TO_ADDR
// if tmp < distance then
54365: LD_VAR 0 9
54369: PUSH
54370: LD_VAR 0 10
54374: LESS
54375: IFFALSE 54397
// begin result := i ;
54377: LD_ADDR_VAR 0 5
54381: PUSH
54382: LD_VAR 0 6
54386: ST_TO_ADDR
// distance := tmp ;
54387: LD_ADDR_VAR 0 10
54391: PUSH
54392: LD_VAR 0 9
54396: ST_TO_ADDR
// end ; end ;
54397: GO 54255
54399: POP
54400: POP
// end ;
54401: LD_VAR 0 5
54405: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54406: LD_INT 0
54408: PPUSH
54409: PPUSH
// if not driver or not IsInUnit ( driver ) then
54410: LD_VAR 0 1
54414: NOT
54415: PUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: CALL_OW 310
54425: NOT
54426: OR
54427: IFFALSE 54431
// exit ;
54429: GO 54521
// vehicle := IsInUnit ( driver ) ;
54431: LD_ADDR_VAR 0 3
54435: PUSH
54436: LD_VAR 0 1
54440: PPUSH
54441: CALL_OW 310
54445: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54446: LD_VAR 0 1
54450: PPUSH
54451: LD_STRING \
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: PUSH
54481: LD_STRING E
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_VAR 0 3
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PPUSH
54517: CALL_OW 446
// end ;
54521: LD_VAR 0 2
54525: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54526: LD_INT 0
54528: PPUSH
54529: PPUSH
// if not driver or not IsInUnit ( driver ) then
54530: LD_VAR 0 1
54534: NOT
54535: PUSH
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 310
54545: NOT
54546: OR
54547: IFFALSE 54551
// exit ;
54549: GO 54641
// vehicle := IsInUnit ( driver ) ;
54551: LD_ADDR_VAR 0 3
54555: PUSH
54556: LD_VAR 0 1
54560: PPUSH
54561: CALL_OW 310
54565: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54566: LD_VAR 0 1
54570: PPUSH
54571: LD_STRING \
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: LD_STRING E
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_VAR 0 3
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PPUSH
54637: CALL_OW 447
// end ;
54641: LD_VAR 0 2
54645: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54646: LD_INT 0
54648: PPUSH
54649: PPUSH
54650: PPUSH
// tmp := [ ] ;
54651: LD_ADDR_VAR 0 5
54655: PUSH
54656: EMPTY
54657: ST_TO_ADDR
// for i in units do
54658: LD_ADDR_VAR 0 4
54662: PUSH
54663: LD_VAR 0 1
54667: PUSH
54668: FOR_IN
54669: IFFALSE 54707
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54671: LD_ADDR_VAR 0 5
54675: PUSH
54676: LD_VAR 0 5
54680: PPUSH
54681: LD_VAR 0 5
54685: PUSH
54686: LD_INT 1
54688: PLUS
54689: PPUSH
54690: LD_VAR 0 4
54694: PPUSH
54695: CALL_OW 256
54699: PPUSH
54700: CALL_OW 2
54704: ST_TO_ADDR
54705: GO 54668
54707: POP
54708: POP
// if not tmp then
54709: LD_VAR 0 5
54713: NOT
54714: IFFALSE 54718
// exit ;
54716: GO 54766
// if asc then
54718: LD_VAR 0 2
54722: IFFALSE 54746
// result := SortListByListAsc ( units , tmp ) else
54724: LD_ADDR_VAR 0 3
54728: PUSH
54729: LD_VAR 0 1
54733: PPUSH
54734: LD_VAR 0 5
54738: PPUSH
54739: CALL_OW 76
54743: ST_TO_ADDR
54744: GO 54766
// result := SortListByListDesc ( units , tmp ) ;
54746: LD_ADDR_VAR 0 3
54750: PUSH
54751: LD_VAR 0 1
54755: PPUSH
54756: LD_VAR 0 5
54760: PPUSH
54761: CALL_OW 77
54765: ST_TO_ADDR
// end ;
54766: LD_VAR 0 3
54770: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54771: LD_INT 0
54773: PPUSH
54774: PPUSH
// task := GetTaskList ( mech ) ;
54775: LD_ADDR_VAR 0 4
54779: PUSH
54780: LD_VAR 0 1
54784: PPUSH
54785: CALL_OW 437
54789: ST_TO_ADDR
// if not task then
54790: LD_VAR 0 4
54794: NOT
54795: IFFALSE 54799
// exit ;
54797: GO 54841
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54799: LD_ADDR_VAR 0 3
54803: PUSH
54804: LD_VAR 0 4
54808: PUSH
54809: LD_INT 1
54811: ARRAY
54812: PUSH
54813: LD_INT 1
54815: ARRAY
54816: PUSH
54817: LD_STRING r
54819: EQUAL
54820: PUSH
54821: LD_VAR 0 4
54825: PUSH
54826: LD_INT 1
54828: ARRAY
54829: PUSH
54830: LD_INT 4
54832: ARRAY
54833: PUSH
54834: LD_VAR 0 2
54838: EQUAL
54839: AND
54840: ST_TO_ADDR
// end ;
54841: LD_VAR 0 3
54845: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54846: LD_INT 0
54848: PPUSH
// SetDir ( unit , d ) ;
54849: LD_VAR 0 1
54853: PPUSH
54854: LD_VAR 0 4
54858: PPUSH
54859: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54863: LD_VAR 0 1
54867: PPUSH
54868: LD_VAR 0 2
54872: PPUSH
54873: LD_VAR 0 3
54877: PPUSH
54878: LD_VAR 0 5
54882: PPUSH
54883: CALL_OW 48
// end ;
54887: LD_VAR 0 6
54891: RET
// export function ToNaturalNumber ( number ) ; begin
54892: LD_INT 0
54894: PPUSH
// result := number div 1 ;
54895: LD_ADDR_VAR 0 2
54899: PUSH
54900: LD_VAR 0 1
54904: PUSH
54905: LD_INT 1
54907: DIV
54908: ST_TO_ADDR
// if number < 0 then
54909: LD_VAR 0 1
54913: PUSH
54914: LD_INT 0
54916: LESS
54917: IFFALSE 54927
// result := 0 ;
54919: LD_ADDR_VAR 0 2
54923: PUSH
54924: LD_INT 0
54926: ST_TO_ADDR
// end ;
54927: LD_VAR 0 2
54931: RET
// export function SortByClass ( units , class ) ; var un ; begin
54932: LD_INT 0
54934: PPUSH
54935: PPUSH
// if not units or not class then
54936: LD_VAR 0 1
54940: NOT
54941: PUSH
54942: LD_VAR 0 2
54946: NOT
54947: OR
54948: IFFALSE 54952
// exit ;
54950: GO 55047
// result := [ ] ;
54952: LD_ADDR_VAR 0 3
54956: PUSH
54957: EMPTY
54958: ST_TO_ADDR
// for un in units do
54959: LD_ADDR_VAR 0 4
54963: PUSH
54964: LD_VAR 0 1
54968: PUSH
54969: FOR_IN
54970: IFFALSE 55045
// if GetClass ( un ) = class then
54972: LD_VAR 0 4
54976: PPUSH
54977: CALL_OW 257
54981: PUSH
54982: LD_VAR 0 2
54986: EQUAL
54987: IFFALSE 55014
// result := Insert ( result , 1 , un ) else
54989: LD_ADDR_VAR 0 3
54993: PUSH
54994: LD_VAR 0 3
54998: PPUSH
54999: LD_INT 1
55001: PPUSH
55002: LD_VAR 0 4
55006: PPUSH
55007: CALL_OW 2
55011: ST_TO_ADDR
55012: GO 55043
// result := Replace ( result , result + 1 , un ) ;
55014: LD_ADDR_VAR 0 3
55018: PUSH
55019: LD_VAR 0 3
55023: PPUSH
55024: LD_VAR 0 3
55028: PUSH
55029: LD_INT 1
55031: PLUS
55032: PPUSH
55033: LD_VAR 0 4
55037: PPUSH
55038: CALL_OW 1
55042: ST_TO_ADDR
55043: GO 54969
55045: POP
55046: POP
// end ;
55047: LD_VAR 0 3
55051: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55052: LD_INT 0
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
// result := [ ] ;
55061: LD_ADDR_VAR 0 4
55065: PUSH
55066: EMPTY
55067: ST_TO_ADDR
// if x - r < 0 then
55068: LD_VAR 0 1
55072: PUSH
55073: LD_VAR 0 3
55077: MINUS
55078: PUSH
55079: LD_INT 0
55081: LESS
55082: IFFALSE 55094
// min_x := 0 else
55084: LD_ADDR_VAR 0 8
55088: PUSH
55089: LD_INT 0
55091: ST_TO_ADDR
55092: GO 55110
// min_x := x - r ;
55094: LD_ADDR_VAR 0 8
55098: PUSH
55099: LD_VAR 0 1
55103: PUSH
55104: LD_VAR 0 3
55108: MINUS
55109: ST_TO_ADDR
// if y - r < 0 then
55110: LD_VAR 0 2
55114: PUSH
55115: LD_VAR 0 3
55119: MINUS
55120: PUSH
55121: LD_INT 0
55123: LESS
55124: IFFALSE 55136
// min_y := 0 else
55126: LD_ADDR_VAR 0 7
55130: PUSH
55131: LD_INT 0
55133: ST_TO_ADDR
55134: GO 55152
// min_y := y - r ;
55136: LD_ADDR_VAR 0 7
55140: PUSH
55141: LD_VAR 0 2
55145: PUSH
55146: LD_VAR 0 3
55150: MINUS
55151: ST_TO_ADDR
// max_x := x + r ;
55152: LD_ADDR_VAR 0 9
55156: PUSH
55157: LD_VAR 0 1
55161: PUSH
55162: LD_VAR 0 3
55166: PLUS
55167: ST_TO_ADDR
// max_y := y + r ;
55168: LD_ADDR_VAR 0 10
55172: PUSH
55173: LD_VAR 0 2
55177: PUSH
55178: LD_VAR 0 3
55182: PLUS
55183: ST_TO_ADDR
// for _x = min_x to max_x do
55184: LD_ADDR_VAR 0 5
55188: PUSH
55189: DOUBLE
55190: LD_VAR 0 8
55194: DEC
55195: ST_TO_ADDR
55196: LD_VAR 0 9
55200: PUSH
55201: FOR_TO
55202: IFFALSE 55303
// for _y = min_y to max_y do
55204: LD_ADDR_VAR 0 6
55208: PUSH
55209: DOUBLE
55210: LD_VAR 0 7
55214: DEC
55215: ST_TO_ADDR
55216: LD_VAR 0 10
55220: PUSH
55221: FOR_TO
55222: IFFALSE 55299
// begin if not ValidHex ( _x , _y ) then
55224: LD_VAR 0 5
55228: PPUSH
55229: LD_VAR 0 6
55233: PPUSH
55234: CALL_OW 488
55238: NOT
55239: IFFALSE 55243
// continue ;
55241: GO 55221
// if GetResourceTypeXY ( _x , _y ) then
55243: LD_VAR 0 5
55247: PPUSH
55248: LD_VAR 0 6
55252: PPUSH
55253: CALL_OW 283
55257: IFFALSE 55297
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55259: LD_ADDR_VAR 0 4
55263: PUSH
55264: LD_VAR 0 4
55268: PPUSH
55269: LD_VAR 0 4
55273: PUSH
55274: LD_INT 1
55276: PLUS
55277: PPUSH
55278: LD_VAR 0 5
55282: PUSH
55283: LD_VAR 0 6
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PPUSH
55292: CALL_OW 1
55296: ST_TO_ADDR
// end ;
55297: GO 55221
55299: POP
55300: POP
55301: GO 55201
55303: POP
55304: POP
// end ;
55305: LD_VAR 0 4
55309: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55310: LD_INT 0
55312: PPUSH
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
55317: PPUSH
55318: PPUSH
55319: PPUSH
// if not units then
55320: LD_VAR 0 1
55324: NOT
55325: IFFALSE 55329
// exit ;
55327: GO 55853
// result := UnitFilter ( units , [ f_ok ] ) ;
55329: LD_ADDR_VAR 0 3
55333: PUSH
55334: LD_VAR 0 1
55338: PPUSH
55339: LD_INT 50
55341: PUSH
55342: EMPTY
55343: LIST
55344: PPUSH
55345: CALL_OW 72
55349: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55350: LD_ADDR_VAR 0 8
55354: PUSH
55355: LD_VAR 0 1
55359: PUSH
55360: LD_INT 1
55362: ARRAY
55363: PPUSH
55364: CALL_OW 255
55368: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55369: LD_ADDR_VAR 0 10
55373: PUSH
55374: LD_INT 29
55376: PUSH
55377: LD_INT 91
55379: PUSH
55380: LD_INT 49
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// if not result then
55388: LD_VAR 0 3
55392: NOT
55393: IFFALSE 55397
// exit ;
55395: GO 55853
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55397: LD_ADDR_VAR 0 5
55401: PUSH
55402: LD_INT 81
55404: PUSH
55405: LD_VAR 0 8
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PPUSH
55414: CALL_OW 69
55418: ST_TO_ADDR
// for i in result do
55419: LD_ADDR_VAR 0 4
55423: PUSH
55424: LD_VAR 0 3
55428: PUSH
55429: FOR_IN
55430: IFFALSE 55851
// begin tag := GetTag ( i ) + 1 ;
55432: LD_ADDR_VAR 0 9
55436: PUSH
55437: LD_VAR 0 4
55441: PPUSH
55442: CALL_OW 110
55446: PUSH
55447: LD_INT 1
55449: PLUS
55450: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55451: LD_ADDR_VAR 0 7
55455: PUSH
55456: LD_VAR 0 4
55460: PPUSH
55461: CALL_OW 250
55465: PPUSH
55466: LD_VAR 0 4
55470: PPUSH
55471: CALL_OW 251
55475: PPUSH
55476: LD_INT 6
55478: PPUSH
55479: CALL 55052 0 3
55483: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55484: LD_VAR 0 4
55488: PPUSH
55489: CALL_OW 247
55493: PUSH
55494: LD_INT 2
55496: EQUAL
55497: PUSH
55498: LD_VAR 0 7
55502: AND
55503: PUSH
55504: LD_VAR 0 4
55508: PPUSH
55509: CALL_OW 264
55513: PUSH
55514: LD_VAR 0 10
55518: IN
55519: NOT
55520: AND
55521: IFFALSE 55560
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55523: LD_VAR 0 4
55527: PPUSH
55528: LD_VAR 0 7
55532: PUSH
55533: LD_INT 1
55535: ARRAY
55536: PUSH
55537: LD_INT 1
55539: ARRAY
55540: PPUSH
55541: LD_VAR 0 7
55545: PUSH
55546: LD_INT 1
55548: ARRAY
55549: PUSH
55550: LD_INT 2
55552: ARRAY
55553: PPUSH
55554: CALL_OW 116
55558: GO 55849
// if path > tag then
55560: LD_VAR 0 2
55564: PUSH
55565: LD_VAR 0 9
55569: GREATER
55570: IFFALSE 55778
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55572: LD_ADDR_VAR 0 6
55576: PUSH
55577: LD_VAR 0 5
55581: PPUSH
55582: LD_INT 91
55584: PUSH
55585: LD_VAR 0 4
55589: PUSH
55590: LD_INT 8
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: PPUSH
55598: CALL_OW 72
55602: ST_TO_ADDR
// if nearEnemy then
55603: LD_VAR 0 6
55607: IFFALSE 55676
// begin if GetWeapon ( i ) = ru_time_lapser then
55609: LD_VAR 0 4
55613: PPUSH
55614: CALL_OW 264
55618: PUSH
55619: LD_INT 49
55621: EQUAL
55622: IFFALSE 55650
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55624: LD_VAR 0 4
55628: PPUSH
55629: LD_VAR 0 6
55633: PPUSH
55634: LD_VAR 0 4
55638: PPUSH
55639: CALL_OW 74
55643: PPUSH
55644: CALL_OW 112
55648: GO 55674
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55650: LD_VAR 0 4
55654: PPUSH
55655: LD_VAR 0 6
55659: PPUSH
55660: LD_VAR 0 4
55664: PPUSH
55665: CALL_OW 74
55669: PPUSH
55670: CALL_OW 115
// end else
55674: GO 55776
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55676: LD_VAR 0 4
55680: PPUSH
55681: LD_VAR 0 2
55685: PUSH
55686: LD_VAR 0 9
55690: ARRAY
55691: PUSH
55692: LD_INT 1
55694: ARRAY
55695: PPUSH
55696: LD_VAR 0 2
55700: PUSH
55701: LD_VAR 0 9
55705: ARRAY
55706: PUSH
55707: LD_INT 2
55709: ARRAY
55710: PPUSH
55711: CALL_OW 297
55715: PUSH
55716: LD_INT 6
55718: GREATER
55719: IFFALSE 55762
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55721: LD_VAR 0 4
55725: PPUSH
55726: LD_VAR 0 2
55730: PUSH
55731: LD_VAR 0 9
55735: ARRAY
55736: PUSH
55737: LD_INT 1
55739: ARRAY
55740: PPUSH
55741: LD_VAR 0 2
55745: PUSH
55746: LD_VAR 0 9
55750: ARRAY
55751: PUSH
55752: LD_INT 2
55754: ARRAY
55755: PPUSH
55756: CALL_OW 114
55760: GO 55776
// SetTag ( i , tag ) ;
55762: LD_VAR 0 4
55766: PPUSH
55767: LD_VAR 0 9
55771: PPUSH
55772: CALL_OW 109
// end else
55776: GO 55849
// if enemy then
55778: LD_VAR 0 5
55782: IFFALSE 55849
// begin if GetWeapon ( i ) = ru_time_lapser then
55784: LD_VAR 0 4
55788: PPUSH
55789: CALL_OW 264
55793: PUSH
55794: LD_INT 49
55796: EQUAL
55797: IFFALSE 55825
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55799: LD_VAR 0 4
55803: PPUSH
55804: LD_VAR 0 5
55808: PPUSH
55809: LD_VAR 0 4
55813: PPUSH
55814: CALL_OW 74
55818: PPUSH
55819: CALL_OW 112
55823: GO 55849
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55825: LD_VAR 0 4
55829: PPUSH
55830: LD_VAR 0 5
55834: PPUSH
55835: LD_VAR 0 4
55839: PPUSH
55840: CALL_OW 74
55844: PPUSH
55845: CALL_OW 115
// end ; end ;
55849: GO 55429
55851: POP
55852: POP
// end ;
55853: LD_VAR 0 3
55857: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55858: LD_INT 0
55860: PPUSH
55861: PPUSH
55862: PPUSH
// if not unit or IsInUnit ( unit ) then
55863: LD_VAR 0 1
55867: NOT
55868: PUSH
55869: LD_VAR 0 1
55873: PPUSH
55874: CALL_OW 310
55878: OR
55879: IFFALSE 55883
// exit ;
55881: GO 55974
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55883: LD_ADDR_VAR 0 4
55887: PUSH
55888: LD_VAR 0 1
55892: PPUSH
55893: CALL_OW 250
55897: PPUSH
55898: LD_VAR 0 2
55902: PPUSH
55903: LD_INT 1
55905: PPUSH
55906: CALL_OW 272
55910: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55911: LD_ADDR_VAR 0 5
55915: PUSH
55916: LD_VAR 0 1
55920: PPUSH
55921: CALL_OW 251
55925: PPUSH
55926: LD_VAR 0 2
55930: PPUSH
55931: LD_INT 1
55933: PPUSH
55934: CALL_OW 273
55938: ST_TO_ADDR
// if ValidHex ( x , y ) then
55939: LD_VAR 0 4
55943: PPUSH
55944: LD_VAR 0 5
55948: PPUSH
55949: CALL_OW 488
55953: IFFALSE 55974
// ComTurnXY ( unit , x , y ) ;
55955: LD_VAR 0 1
55959: PPUSH
55960: LD_VAR 0 4
55964: PPUSH
55965: LD_VAR 0 5
55969: PPUSH
55970: CALL_OW 118
// end ;
55974: LD_VAR 0 3
55978: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55979: LD_INT 0
55981: PPUSH
55982: PPUSH
// result := false ;
55983: LD_ADDR_VAR 0 3
55987: PUSH
55988: LD_INT 0
55990: ST_TO_ADDR
// if not units then
55991: LD_VAR 0 2
55995: NOT
55996: IFFALSE 56000
// exit ;
55998: GO 56045
// for i in units do
56000: LD_ADDR_VAR 0 4
56004: PUSH
56005: LD_VAR 0 2
56009: PUSH
56010: FOR_IN
56011: IFFALSE 56043
// if See ( side , i ) then
56013: LD_VAR 0 1
56017: PPUSH
56018: LD_VAR 0 4
56022: PPUSH
56023: CALL_OW 292
56027: IFFALSE 56041
// begin result := true ;
56029: LD_ADDR_VAR 0 3
56033: PUSH
56034: LD_INT 1
56036: ST_TO_ADDR
// exit ;
56037: POP
56038: POP
56039: GO 56045
// end ;
56041: GO 56010
56043: POP
56044: POP
// end ;
56045: LD_VAR 0 3
56049: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56050: LD_INT 0
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
// if not unit or not points then
56056: LD_VAR 0 1
56060: NOT
56061: PUSH
56062: LD_VAR 0 2
56066: NOT
56067: OR
56068: IFFALSE 56072
// exit ;
56070: GO 56162
// dist := 99999 ;
56072: LD_ADDR_VAR 0 5
56076: PUSH
56077: LD_INT 99999
56079: ST_TO_ADDR
// for i in points do
56080: LD_ADDR_VAR 0 4
56084: PUSH
56085: LD_VAR 0 2
56089: PUSH
56090: FOR_IN
56091: IFFALSE 56160
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56093: LD_ADDR_VAR 0 6
56097: PUSH
56098: LD_VAR 0 1
56102: PPUSH
56103: LD_VAR 0 4
56107: PUSH
56108: LD_INT 1
56110: ARRAY
56111: PPUSH
56112: LD_VAR 0 4
56116: PUSH
56117: LD_INT 2
56119: ARRAY
56120: PPUSH
56121: CALL_OW 297
56125: ST_TO_ADDR
// if tmpDist < dist then
56126: LD_VAR 0 6
56130: PUSH
56131: LD_VAR 0 5
56135: LESS
56136: IFFALSE 56158
// begin result := i ;
56138: LD_ADDR_VAR 0 3
56142: PUSH
56143: LD_VAR 0 4
56147: ST_TO_ADDR
// dist := tmpDist ;
56148: LD_ADDR_VAR 0 5
56152: PUSH
56153: LD_VAR 0 6
56157: ST_TO_ADDR
// end ; end ;
56158: GO 56090
56160: POP
56161: POP
// end ;
56162: LD_VAR 0 3
56166: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56167: LD_INT 0
56169: PPUSH
// uc_side := side ;
56170: LD_ADDR_OWVAR 20
56174: PUSH
56175: LD_VAR 0 1
56179: ST_TO_ADDR
// uc_nation := 3 ;
56180: LD_ADDR_OWVAR 21
56184: PUSH
56185: LD_INT 3
56187: ST_TO_ADDR
// vc_chassis := 25 ;
56188: LD_ADDR_OWVAR 37
56192: PUSH
56193: LD_INT 25
56195: ST_TO_ADDR
// vc_engine := engine_siberite ;
56196: LD_ADDR_OWVAR 39
56200: PUSH
56201: LD_INT 3
56203: ST_TO_ADDR
// vc_control := control_computer ;
56204: LD_ADDR_OWVAR 38
56208: PUSH
56209: LD_INT 3
56211: ST_TO_ADDR
// vc_weapon := 59 ;
56212: LD_ADDR_OWVAR 40
56216: PUSH
56217: LD_INT 59
56219: ST_TO_ADDR
// result := CreateVehicle ;
56220: LD_ADDR_VAR 0 5
56224: PUSH
56225: CALL_OW 45
56229: ST_TO_ADDR
// SetDir ( result , d ) ;
56230: LD_VAR 0 5
56234: PPUSH
56235: LD_VAR 0 4
56239: PPUSH
56240: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56244: LD_VAR 0 5
56248: PPUSH
56249: LD_VAR 0 2
56253: PPUSH
56254: LD_VAR 0 3
56258: PPUSH
56259: LD_INT 0
56261: PPUSH
56262: CALL_OW 48
// end ;
56266: LD_VAR 0 5
56270: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56271: LD_INT 0
56273: PPUSH
56274: PPUSH
56275: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56276: LD_ADDR_VAR 0 2
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56299: LD_VAR 0 1
56303: NOT
56304: PUSH
56305: LD_VAR 0 1
56309: PPUSH
56310: CALL_OW 264
56314: PUSH
56315: LD_INT 12
56317: PUSH
56318: LD_INT 51
56320: PUSH
56321: LD_INT 32
56323: PUSH
56324: LD_INT 89
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: IN
56333: NOT
56334: OR
56335: IFFALSE 56339
// exit ;
56337: GO 56437
// for i := 1 to 3 do
56339: LD_ADDR_VAR 0 3
56343: PUSH
56344: DOUBLE
56345: LD_INT 1
56347: DEC
56348: ST_TO_ADDR
56349: LD_INT 3
56351: PUSH
56352: FOR_TO
56353: IFFALSE 56435
// begin tmp := GetCargo ( cargo , i ) ;
56355: LD_ADDR_VAR 0 4
56359: PUSH
56360: LD_VAR 0 1
56364: PPUSH
56365: LD_VAR 0 3
56369: PPUSH
56370: CALL_OW 289
56374: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56375: LD_ADDR_VAR 0 2
56379: PUSH
56380: LD_VAR 0 2
56384: PPUSH
56385: LD_VAR 0 3
56389: PPUSH
56390: LD_VAR 0 4
56394: PPUSH
56395: CALL_OW 1
56399: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56400: LD_ADDR_VAR 0 2
56404: PUSH
56405: LD_VAR 0 2
56409: PPUSH
56410: LD_INT 4
56412: PPUSH
56413: LD_VAR 0 2
56417: PUSH
56418: LD_INT 4
56420: ARRAY
56421: PUSH
56422: LD_VAR 0 4
56426: PLUS
56427: PPUSH
56428: CALL_OW 1
56432: ST_TO_ADDR
// end ;
56433: GO 56352
56435: POP
56436: POP
// end ;
56437: LD_VAR 0 2
56441: RET
// export function Length ( array ) ; begin
56442: LD_INT 0
56444: PPUSH
// result := array + 0 ;
56445: LD_ADDR_VAR 0 2
56449: PUSH
56450: LD_VAR 0 1
56454: PUSH
56455: LD_INT 0
56457: PLUS
56458: ST_TO_ADDR
// end ;
56459: LD_VAR 0 2
56463: RET
// export function PrepareArray ( array ) ; begin
56464: LD_INT 0
56466: PPUSH
// result := array diff 0 ;
56467: LD_ADDR_VAR 0 2
56471: PUSH
56472: LD_VAR 0 1
56476: PUSH
56477: LD_INT 0
56479: DIFF
56480: ST_TO_ADDR
// if not result [ 1 ] then
56481: LD_VAR 0 2
56485: PUSH
56486: LD_INT 1
56488: ARRAY
56489: NOT
56490: IFFALSE 56510
// result := Delete ( result , 1 ) ;
56492: LD_ADDR_VAR 0 2
56496: PUSH
56497: LD_VAR 0 2
56501: PPUSH
56502: LD_INT 1
56504: PPUSH
56505: CALL_OW 3
56509: ST_TO_ADDR
// end ;
56510: LD_VAR 0 2
56514: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56515: LD_INT 0
56517: PPUSH
56518: PPUSH
56519: PPUSH
56520: PPUSH
// sibRocketRange := 25 ;
56521: LD_ADDR_VAR 0 6
56525: PUSH
56526: LD_INT 25
56528: ST_TO_ADDR
// result := false ;
56529: LD_ADDR_VAR 0 4
56533: PUSH
56534: LD_INT 0
56536: ST_TO_ADDR
// for i := 0 to 5 do
56537: LD_ADDR_VAR 0 5
56541: PUSH
56542: DOUBLE
56543: LD_INT 0
56545: DEC
56546: ST_TO_ADDR
56547: LD_INT 5
56549: PUSH
56550: FOR_TO
56551: IFFALSE 56618
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56553: LD_VAR 0 1
56557: PPUSH
56558: LD_VAR 0 5
56562: PPUSH
56563: LD_VAR 0 6
56567: PPUSH
56568: CALL_OW 272
56572: PPUSH
56573: LD_VAR 0 2
56577: PPUSH
56578: LD_VAR 0 5
56582: PPUSH
56583: LD_VAR 0 6
56587: PPUSH
56588: CALL_OW 273
56592: PPUSH
56593: LD_VAR 0 3
56597: PPUSH
56598: CALL_OW 309
56602: IFFALSE 56616
// begin result := true ;
56604: LD_ADDR_VAR 0 4
56608: PUSH
56609: LD_INT 1
56611: ST_TO_ADDR
// exit ;
56612: POP
56613: POP
56614: GO 56620
// end ;
56616: GO 56550
56618: POP
56619: POP
// end ;
56620: LD_VAR 0 4
56624: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56625: LD_INT 0
56627: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56628: LD_VAR 0 1
56632: PPUSH
56633: LD_VAR 0 2
56637: PPUSH
56638: LD_INT 0
56640: PPUSH
56641: LD_INT 0
56643: PPUSH
56644: LD_INT 1
56646: PPUSH
56647: LD_INT 0
56649: PPUSH
56650: CALL_OW 587
// end ; end_of_file
56654: LD_VAR 0 3
56658: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56659: LD_VAR 0 1
56663: PUSH
56664: LD_INT 200
56666: DOUBLE
56667: GREATEREQUAL
56668: IFFALSE 56676
56670: LD_INT 299
56672: DOUBLE
56673: LESSEQUAL
56674: IFTRUE 56678
56676: GO 56710
56678: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56679: LD_VAR 0 1
56683: PPUSH
56684: LD_VAR 0 2
56688: PPUSH
56689: LD_VAR 0 3
56693: PPUSH
56694: LD_VAR 0 4
56698: PPUSH
56699: LD_VAR 0 5
56703: PPUSH
56704: CALL 57198 0 5
56708: GO 56787
56710: LD_INT 300
56712: DOUBLE
56713: GREATEREQUAL
56714: IFFALSE 56722
56716: LD_INT 399
56718: DOUBLE
56719: LESSEQUAL
56720: IFTRUE 56724
56722: GO 56786
56724: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56725: LD_VAR 0 1
56729: PPUSH
56730: LD_VAR 0 2
56734: PPUSH
56735: LD_VAR 0 3
56739: PPUSH
56740: LD_VAR 0 4
56744: PPUSH
56745: LD_VAR 0 5
56749: PPUSH
56750: LD_VAR 0 6
56754: PPUSH
56755: LD_VAR 0 7
56759: PPUSH
56760: LD_VAR 0 8
56764: PPUSH
56765: LD_VAR 0 9
56769: PPUSH
56770: LD_VAR 0 10
56774: PPUSH
56775: LD_VAR 0 11
56779: PPUSH
56780: CALL 73469 0 11
56784: GO 56787
56786: POP
// end ;
56787: PPOPN 11
56789: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56790: LD_VAR 0 1
56794: PPUSH
56795: LD_VAR 0 2
56799: PPUSH
56800: LD_VAR 0 3
56804: PPUSH
56805: LD_VAR 0 4
56809: PPUSH
56810: LD_VAR 0 5
56814: PPUSH
56815: CALL 56934 0 5
// end ; end_of_file
56819: PPOPN 5
56821: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56822: LD_INT 0
56824: PPUSH
56825: PPUSH
56826: PPUSH
56827: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56828: LD_VAR 0 1
56832: PPUSH
56833: CALL_OW 264
56837: PUSH
56838: LD_INT 91
56840: EQUAL
56841: IFFALSE 56913
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56843: LD_INT 68
56845: PPUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: CALL_OW 255
56855: PPUSH
56856: CALL_OW 321
56860: PUSH
56861: LD_INT 2
56863: EQUAL
56864: IFFALSE 56876
// eff := 70 else
56866: LD_ADDR_VAR 0 4
56870: PUSH
56871: LD_INT 70
56873: ST_TO_ADDR
56874: GO 56884
// eff := 30 ;
56876: LD_ADDR_VAR 0 4
56880: PUSH
56881: LD_INT 30
56883: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL_OW 250
56893: PPUSH
56894: LD_VAR 0 1
56898: PPUSH
56899: CALL_OW 251
56903: PPUSH
56904: LD_VAR 0 4
56908: PPUSH
56909: CALL_OW 495
// end ; end ;
56913: LD_VAR 0 2
56917: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56918: LD_INT 0
56920: PPUSH
// end ;
56921: LD_VAR 0 4
56925: RET
// export function SOS_Command ( cmd ) ; begin
56926: LD_INT 0
56928: PPUSH
// end ;
56929: LD_VAR 0 2
56933: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56934: LD_INT 0
56936: PPUSH
// end ;
56937: LD_VAR 0 6
56941: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
56942: LD_INT 0
56944: PPUSH
56945: PPUSH
// if not vehicle or not factory then
56946: LD_VAR 0 1
56950: NOT
56951: PUSH
56952: LD_VAR 0 2
56956: NOT
56957: OR
56958: IFFALSE 56962
// exit ;
56960: GO 57193
// if factoryWaypoints >= factory then
56962: LD_EXP 101
56966: PUSH
56967: LD_VAR 0 2
56971: GREATEREQUAL
56972: IFFALSE 57193
// if factoryWaypoints [ factory ] then
56974: LD_EXP 101
56978: PUSH
56979: LD_VAR 0 2
56983: ARRAY
56984: IFFALSE 57193
// begin if GetControl ( vehicle ) = control_manual then
56986: LD_VAR 0 1
56990: PPUSH
56991: CALL_OW 263
56995: PUSH
56996: LD_INT 1
56998: EQUAL
56999: IFFALSE 57080
// begin driver := IsDrivenBy ( vehicle ) ;
57001: LD_ADDR_VAR 0 4
57005: PUSH
57006: LD_VAR 0 1
57010: PPUSH
57011: CALL_OW 311
57015: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57016: LD_VAR 0 4
57020: PPUSH
57021: LD_EXP 101
57025: PUSH
57026: LD_VAR 0 2
57030: ARRAY
57031: PUSH
57032: LD_INT 3
57034: ARRAY
57035: PPUSH
57036: LD_EXP 101
57040: PUSH
57041: LD_VAR 0 2
57045: ARRAY
57046: PUSH
57047: LD_INT 4
57049: ARRAY
57050: PPUSH
57051: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57055: LD_VAR 0 4
57059: PPUSH
57060: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57064: LD_VAR 0 4
57068: PPUSH
57069: LD_VAR 0 2
57073: PPUSH
57074: CALL_OW 180
// end else
57078: GO 57193
// if GetControl ( vehicle ) = control_remote then
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 263
57089: PUSH
57090: LD_INT 2
57092: EQUAL
57093: IFFALSE 57154
// begin wait ( 0 0$2 ) ;
57095: LD_INT 70
57097: PPUSH
57098: CALL_OW 67
// if Connect ( vehicle ) then
57102: LD_VAR 0 1
57106: PPUSH
57107: CALL 23363 0 1
57111: IFFALSE 57152
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57113: LD_VAR 0 1
57117: PPUSH
57118: LD_EXP 101
57122: PUSH
57123: LD_VAR 0 2
57127: ARRAY
57128: PUSH
57129: LD_INT 3
57131: ARRAY
57132: PPUSH
57133: LD_EXP 101
57137: PUSH
57138: LD_VAR 0 2
57142: ARRAY
57143: PUSH
57144: LD_INT 4
57146: ARRAY
57147: PPUSH
57148: CALL_OW 171
// end else
57152: GO 57193
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57154: LD_VAR 0 1
57158: PPUSH
57159: LD_EXP 101
57163: PUSH
57164: LD_VAR 0 2
57168: ARRAY
57169: PUSH
57170: LD_INT 3
57172: ARRAY
57173: PPUSH
57174: LD_EXP 101
57178: PUSH
57179: LD_VAR 0 2
57183: ARRAY
57184: PUSH
57185: LD_INT 4
57187: ARRAY
57188: PPUSH
57189: CALL_OW 171
// end ; end ;
57193: LD_VAR 0 3
57197: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57198: LD_INT 0
57200: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57201: LD_VAR 0 1
57205: PUSH
57206: LD_INT 250
57208: EQUAL
57209: PUSH
57210: LD_VAR 0 2
57214: PPUSH
57215: CALL_OW 264
57219: PUSH
57220: LD_INT 81
57222: EQUAL
57223: AND
57224: IFFALSE 57245
// MinerPlaceMine ( unit , x , y ) ;
57226: LD_VAR 0 2
57230: PPUSH
57231: LD_VAR 0 4
57235: PPUSH
57236: LD_VAR 0 5
57240: PPUSH
57241: CALL 59630 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57245: LD_VAR 0 1
57249: PUSH
57250: LD_INT 251
57252: EQUAL
57253: PUSH
57254: LD_VAR 0 2
57258: PPUSH
57259: CALL_OW 264
57263: PUSH
57264: LD_INT 81
57266: EQUAL
57267: AND
57268: IFFALSE 57289
// MinerDetonateMine ( unit , x , y ) ;
57270: LD_VAR 0 2
57274: PPUSH
57275: LD_VAR 0 4
57279: PPUSH
57280: LD_VAR 0 5
57284: PPUSH
57285: CALL 59905 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57289: LD_VAR 0 1
57293: PUSH
57294: LD_INT 252
57296: EQUAL
57297: PUSH
57298: LD_VAR 0 2
57302: PPUSH
57303: CALL_OW 264
57307: PUSH
57308: LD_INT 81
57310: EQUAL
57311: AND
57312: IFFALSE 57333
// MinerCreateMinefield ( unit , x , y ) ;
57314: LD_VAR 0 2
57318: PPUSH
57319: LD_VAR 0 4
57323: PPUSH
57324: LD_VAR 0 5
57328: PPUSH
57329: CALL 60322 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57333: LD_VAR 0 1
57337: PUSH
57338: LD_INT 253
57340: EQUAL
57341: PUSH
57342: LD_VAR 0 2
57346: PPUSH
57347: CALL_OW 257
57351: PUSH
57352: LD_INT 5
57354: EQUAL
57355: AND
57356: IFFALSE 57377
// ComBinocular ( unit , x , y ) ;
57358: LD_VAR 0 2
57362: PPUSH
57363: LD_VAR 0 4
57367: PPUSH
57368: LD_VAR 0 5
57372: PPUSH
57373: CALL 60691 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57377: LD_VAR 0 1
57381: PUSH
57382: LD_INT 254
57384: EQUAL
57385: PUSH
57386: LD_VAR 0 2
57390: PPUSH
57391: CALL_OW 264
57395: PUSH
57396: LD_INT 99
57398: EQUAL
57399: AND
57400: PUSH
57401: LD_VAR 0 3
57405: PPUSH
57406: CALL_OW 263
57410: PUSH
57411: LD_INT 3
57413: EQUAL
57414: AND
57415: IFFALSE 57431
// HackDestroyVehicle ( unit , selectedUnit ) ;
57417: LD_VAR 0 2
57421: PPUSH
57422: LD_VAR 0 3
57426: PPUSH
57427: CALL 58994 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57431: LD_VAR 0 1
57435: PUSH
57436: LD_INT 255
57438: EQUAL
57439: PUSH
57440: LD_VAR 0 2
57444: PPUSH
57445: CALL_OW 264
57449: PUSH
57450: LD_INT 14
57452: PUSH
57453: LD_INT 53
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: IN
57460: AND
57461: PUSH
57462: LD_VAR 0 4
57466: PPUSH
57467: LD_VAR 0 5
57471: PPUSH
57472: CALL_OW 488
57476: AND
57477: IFFALSE 57501
// CutTreeXYR ( unit , x , y , 12 ) ;
57479: LD_VAR 0 2
57483: PPUSH
57484: LD_VAR 0 4
57488: PPUSH
57489: LD_VAR 0 5
57493: PPUSH
57494: LD_INT 12
57496: PPUSH
57497: CALL 57564 0 4
// if cmd = 256 then
57501: LD_VAR 0 1
57505: PUSH
57506: LD_INT 256
57508: EQUAL
57509: IFFALSE 57530
// SetFactoryWaypoint ( unit , x , y ) ;
57511: LD_VAR 0 2
57515: PPUSH
57516: LD_VAR 0 4
57520: PPUSH
57521: LD_VAR 0 5
57525: PPUSH
57526: CALL 75449 0 3
// if cmd = 257 then
57530: LD_VAR 0 1
57534: PUSH
57535: LD_INT 257
57537: EQUAL
57538: IFFALSE 57559
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57540: LD_VAR 0 2
57544: PPUSH
57545: LD_VAR 0 4
57549: PPUSH
57550: LD_VAR 0 5
57554: PPUSH
57555: CALL 75811 0 3
// end ;
57559: LD_VAR 0 6
57563: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57564: LD_INT 0
57566: PPUSH
57567: PPUSH
57568: PPUSH
57569: PPUSH
57570: PPUSH
57571: PPUSH
57572: PPUSH
57573: PPUSH
57574: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57575: LD_VAR 0 1
57579: NOT
57580: PUSH
57581: LD_VAR 0 2
57585: PPUSH
57586: LD_VAR 0 3
57590: PPUSH
57591: CALL_OW 488
57595: NOT
57596: OR
57597: PUSH
57598: LD_VAR 0 4
57602: NOT
57603: OR
57604: IFFALSE 57608
// exit ;
57606: GO 57948
// list := [ ] ;
57608: LD_ADDR_VAR 0 13
57612: PUSH
57613: EMPTY
57614: ST_TO_ADDR
// if x - r < 0 then
57615: LD_VAR 0 2
57619: PUSH
57620: LD_VAR 0 4
57624: MINUS
57625: PUSH
57626: LD_INT 0
57628: LESS
57629: IFFALSE 57641
// min_x := 0 else
57631: LD_ADDR_VAR 0 7
57635: PUSH
57636: LD_INT 0
57638: ST_TO_ADDR
57639: GO 57657
// min_x := x - r ;
57641: LD_ADDR_VAR 0 7
57645: PUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_VAR 0 4
57655: MINUS
57656: ST_TO_ADDR
// if y - r < 0 then
57657: LD_VAR 0 3
57661: PUSH
57662: LD_VAR 0 4
57666: MINUS
57667: PUSH
57668: LD_INT 0
57670: LESS
57671: IFFALSE 57683
// min_y := 0 else
57673: LD_ADDR_VAR 0 8
57677: PUSH
57678: LD_INT 0
57680: ST_TO_ADDR
57681: GO 57699
// min_y := y - r ;
57683: LD_ADDR_VAR 0 8
57687: PUSH
57688: LD_VAR 0 3
57692: PUSH
57693: LD_VAR 0 4
57697: MINUS
57698: ST_TO_ADDR
// max_x := x + r ;
57699: LD_ADDR_VAR 0 9
57703: PUSH
57704: LD_VAR 0 2
57708: PUSH
57709: LD_VAR 0 4
57713: PLUS
57714: ST_TO_ADDR
// max_y := y + r ;
57715: LD_ADDR_VAR 0 10
57719: PUSH
57720: LD_VAR 0 3
57724: PUSH
57725: LD_VAR 0 4
57729: PLUS
57730: ST_TO_ADDR
// for _x = min_x to max_x do
57731: LD_ADDR_VAR 0 11
57735: PUSH
57736: DOUBLE
57737: LD_VAR 0 7
57741: DEC
57742: ST_TO_ADDR
57743: LD_VAR 0 9
57747: PUSH
57748: FOR_TO
57749: IFFALSE 57866
// for _y = min_y to max_y do
57751: LD_ADDR_VAR 0 12
57755: PUSH
57756: DOUBLE
57757: LD_VAR 0 8
57761: DEC
57762: ST_TO_ADDR
57763: LD_VAR 0 10
57767: PUSH
57768: FOR_TO
57769: IFFALSE 57862
// begin if not ValidHex ( _x , _y ) then
57771: LD_VAR 0 11
57775: PPUSH
57776: LD_VAR 0 12
57780: PPUSH
57781: CALL_OW 488
57785: NOT
57786: IFFALSE 57790
// continue ;
57788: GO 57768
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57790: LD_VAR 0 11
57794: PPUSH
57795: LD_VAR 0 12
57799: PPUSH
57800: CALL_OW 351
57804: PUSH
57805: LD_VAR 0 11
57809: PPUSH
57810: LD_VAR 0 12
57814: PPUSH
57815: CALL_OW 554
57819: AND
57820: IFFALSE 57860
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57822: LD_ADDR_VAR 0 13
57826: PUSH
57827: LD_VAR 0 13
57831: PPUSH
57832: LD_VAR 0 13
57836: PUSH
57837: LD_INT 1
57839: PLUS
57840: PPUSH
57841: LD_VAR 0 11
57845: PUSH
57846: LD_VAR 0 12
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PPUSH
57855: CALL_OW 2
57859: ST_TO_ADDR
// end ;
57860: GO 57768
57862: POP
57863: POP
57864: GO 57748
57866: POP
57867: POP
// if not list then
57868: LD_VAR 0 13
57872: NOT
57873: IFFALSE 57877
// exit ;
57875: GO 57948
// for i in list do
57877: LD_ADDR_VAR 0 6
57881: PUSH
57882: LD_VAR 0 13
57886: PUSH
57887: FOR_IN
57888: IFFALSE 57946
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57890: LD_VAR 0 1
57894: PPUSH
57895: LD_STRING M
57897: PUSH
57898: LD_VAR 0 6
57902: PUSH
57903: LD_INT 1
57905: ARRAY
57906: PUSH
57907: LD_VAR 0 6
57911: PUSH
57912: LD_INT 2
57914: ARRAY
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: PPUSH
57940: CALL_OW 447
57944: GO 57887
57946: POP
57947: POP
// end ;
57948: LD_VAR 0 5
57952: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57953: LD_EXP 33
57957: NOT
57958: IFFALSE 58008
57960: GO 57962
57962: DISABLE
// begin initHack := true ;
57963: LD_ADDR_EXP 33
57967: PUSH
57968: LD_INT 1
57970: ST_TO_ADDR
// hackTanks := [ ] ;
57971: LD_ADDR_EXP 34
57975: PUSH
57976: EMPTY
57977: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57978: LD_ADDR_EXP 35
57982: PUSH
57983: EMPTY
57984: ST_TO_ADDR
// hackLimit := 3 ;
57985: LD_ADDR_EXP 36
57989: PUSH
57990: LD_INT 3
57992: ST_TO_ADDR
// hackDist := 12 ;
57993: LD_ADDR_EXP 37
57997: PUSH
57998: LD_INT 12
58000: ST_TO_ADDR
// hackCounter := [ ] ;
58001: LD_ADDR_EXP 38
58005: PUSH
58006: EMPTY
58007: ST_TO_ADDR
// end ;
58008: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58009: LD_EXP 33
58013: PUSH
58014: LD_INT 34
58016: PUSH
58017: LD_INT 99
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PPUSH
58024: CALL_OW 69
58028: AND
58029: IFFALSE 58282
58031: GO 58033
58033: DISABLE
58034: LD_INT 0
58036: PPUSH
58037: PPUSH
// begin enable ;
58038: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58039: LD_ADDR_VAR 0 1
58043: PUSH
58044: LD_INT 34
58046: PUSH
58047: LD_INT 99
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PPUSH
58054: CALL_OW 69
58058: PUSH
58059: FOR_IN
58060: IFFALSE 58280
// begin if not i in hackTanks then
58062: LD_VAR 0 1
58066: PUSH
58067: LD_EXP 34
58071: IN
58072: NOT
58073: IFFALSE 58156
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58075: LD_ADDR_EXP 34
58079: PUSH
58080: LD_EXP 34
58084: PPUSH
58085: LD_EXP 34
58089: PUSH
58090: LD_INT 1
58092: PLUS
58093: PPUSH
58094: LD_VAR 0 1
58098: PPUSH
58099: CALL_OW 1
58103: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58104: LD_ADDR_EXP 35
58108: PUSH
58109: LD_EXP 35
58113: PPUSH
58114: LD_EXP 35
58118: PUSH
58119: LD_INT 1
58121: PLUS
58122: PPUSH
58123: EMPTY
58124: PPUSH
58125: CALL_OW 1
58129: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58130: LD_ADDR_EXP 38
58134: PUSH
58135: LD_EXP 38
58139: PPUSH
58140: LD_EXP 38
58144: PUSH
58145: LD_INT 1
58147: PLUS
58148: PPUSH
58149: EMPTY
58150: PPUSH
58151: CALL_OW 1
58155: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58156: LD_VAR 0 1
58160: PPUSH
58161: CALL_OW 302
58165: NOT
58166: IFFALSE 58179
// begin HackUnlinkAll ( i ) ;
58168: LD_VAR 0 1
58172: PPUSH
58173: CALL 58285 0 1
// continue ;
58177: GO 58059
// end ; HackCheckCapturedStatus ( i ) ;
58179: LD_VAR 0 1
58183: PPUSH
58184: CALL 58728 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58188: LD_ADDR_VAR 0 2
58192: PUSH
58193: LD_INT 81
58195: PUSH
58196: LD_VAR 0 1
58200: PPUSH
58201: CALL_OW 255
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 33
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 91
58222: PUSH
58223: LD_VAR 0 1
58227: PUSH
58228: LD_EXP 37
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 50
58240: PUSH
58241: EMPTY
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: PPUSH
58250: CALL_OW 69
58254: ST_TO_ADDR
// if not tmp then
58255: LD_VAR 0 2
58259: NOT
58260: IFFALSE 58264
// continue ;
58262: GO 58059
// HackLink ( i , tmp ) ;
58264: LD_VAR 0 1
58268: PPUSH
58269: LD_VAR 0 2
58273: PPUSH
58274: CALL 58421 0 2
// end ;
58278: GO 58059
58280: POP
58281: POP
// end ;
58282: PPOPN 2
58284: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58285: LD_INT 0
58287: PPUSH
58288: PPUSH
58289: PPUSH
// if not hack in hackTanks then
58290: LD_VAR 0 1
58294: PUSH
58295: LD_EXP 34
58299: IN
58300: NOT
58301: IFFALSE 58305
// exit ;
58303: GO 58416
// index := GetElementIndex ( hackTanks , hack ) ;
58305: LD_ADDR_VAR 0 4
58309: PUSH
58310: LD_EXP 34
58314: PPUSH
58315: LD_VAR 0 1
58319: PPUSH
58320: CALL 20179 0 2
58324: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58325: LD_EXP 35
58329: PUSH
58330: LD_VAR 0 4
58334: ARRAY
58335: IFFALSE 58416
// begin for i in hackTanksCaptured [ index ] do
58337: LD_ADDR_VAR 0 3
58341: PUSH
58342: LD_EXP 35
58346: PUSH
58347: LD_VAR 0 4
58351: ARRAY
58352: PUSH
58353: FOR_IN
58354: IFFALSE 58380
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58356: LD_VAR 0 3
58360: PUSH
58361: LD_INT 1
58363: ARRAY
58364: PPUSH
58365: LD_VAR 0 3
58369: PUSH
58370: LD_INT 2
58372: ARRAY
58373: PPUSH
58374: CALL_OW 235
58378: GO 58353
58380: POP
58381: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58382: LD_ADDR_EXP 35
58386: PUSH
58387: LD_EXP 35
58391: PPUSH
58392: LD_VAR 0 4
58396: PPUSH
58397: EMPTY
58398: PPUSH
58399: CALL_OW 1
58403: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58404: LD_VAR 0 1
58408: PPUSH
58409: LD_INT 0
58411: PPUSH
58412: CALL_OW 505
// end ; end ;
58416: LD_VAR 0 2
58420: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58421: LD_INT 0
58423: PPUSH
58424: PPUSH
58425: PPUSH
// if not hack in hackTanks or not vehicles then
58426: LD_VAR 0 1
58430: PUSH
58431: LD_EXP 34
58435: IN
58436: NOT
58437: PUSH
58438: LD_VAR 0 2
58442: NOT
58443: OR
58444: IFFALSE 58448
// exit ;
58446: GO 58723
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58448: LD_ADDR_VAR 0 2
58452: PUSH
58453: LD_VAR 0 1
58457: PPUSH
58458: LD_VAR 0 2
58462: PPUSH
58463: LD_INT 1
58465: PPUSH
58466: LD_INT 1
58468: PPUSH
58469: CALL 20829 0 4
58473: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58474: LD_ADDR_VAR 0 5
58478: PUSH
58479: LD_EXP 34
58483: PPUSH
58484: LD_VAR 0 1
58488: PPUSH
58489: CALL 20179 0 2
58493: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58494: LD_EXP 35
58498: PUSH
58499: LD_VAR 0 5
58503: ARRAY
58504: PUSH
58505: LD_EXP 36
58509: LESS
58510: IFFALSE 58699
// begin for i := 1 to vehicles do
58512: LD_ADDR_VAR 0 4
58516: PUSH
58517: DOUBLE
58518: LD_INT 1
58520: DEC
58521: ST_TO_ADDR
58522: LD_VAR 0 2
58526: PUSH
58527: FOR_TO
58528: IFFALSE 58697
// begin if hackTanksCaptured [ index ] = hackLimit then
58530: LD_EXP 35
58534: PUSH
58535: LD_VAR 0 5
58539: ARRAY
58540: PUSH
58541: LD_EXP 36
58545: EQUAL
58546: IFFALSE 58550
// break ;
58548: GO 58697
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58550: LD_ADDR_EXP 38
58554: PUSH
58555: LD_EXP 38
58559: PPUSH
58560: LD_VAR 0 5
58564: PPUSH
58565: LD_EXP 38
58569: PUSH
58570: LD_VAR 0 5
58574: ARRAY
58575: PUSH
58576: LD_INT 1
58578: PLUS
58579: PPUSH
58580: CALL_OW 1
58584: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58585: LD_ADDR_EXP 35
58589: PUSH
58590: LD_EXP 35
58594: PPUSH
58595: LD_VAR 0 5
58599: PUSH
58600: LD_EXP 35
58604: PUSH
58605: LD_VAR 0 5
58609: ARRAY
58610: PUSH
58611: LD_INT 1
58613: PLUS
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PPUSH
58619: LD_VAR 0 2
58623: PUSH
58624: LD_VAR 0 4
58628: ARRAY
58629: PUSH
58630: LD_VAR 0 2
58634: PUSH
58635: LD_VAR 0 4
58639: ARRAY
58640: PPUSH
58641: CALL_OW 255
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PPUSH
58650: CALL 20394 0 3
58654: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58655: LD_VAR 0 2
58659: PUSH
58660: LD_VAR 0 4
58664: ARRAY
58665: PPUSH
58666: LD_VAR 0 1
58670: PPUSH
58671: CALL_OW 255
58675: PPUSH
58676: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58680: LD_VAR 0 2
58684: PUSH
58685: LD_VAR 0 4
58689: ARRAY
58690: PPUSH
58691: CALL_OW 141
// end ;
58695: GO 58527
58697: POP
58698: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58699: LD_VAR 0 1
58703: PPUSH
58704: LD_EXP 35
58708: PUSH
58709: LD_VAR 0 5
58713: ARRAY
58714: PUSH
58715: LD_INT 0
58717: PLUS
58718: PPUSH
58719: CALL_OW 505
// end ;
58723: LD_VAR 0 3
58727: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58728: LD_INT 0
58730: PPUSH
58731: PPUSH
58732: PPUSH
58733: PPUSH
// if not hack in hackTanks then
58734: LD_VAR 0 1
58738: PUSH
58739: LD_EXP 34
58743: IN
58744: NOT
58745: IFFALSE 58749
// exit ;
58747: GO 58989
// index := GetElementIndex ( hackTanks , hack ) ;
58749: LD_ADDR_VAR 0 4
58753: PUSH
58754: LD_EXP 34
58758: PPUSH
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL 20179 0 2
58768: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58769: LD_ADDR_VAR 0 3
58773: PUSH
58774: DOUBLE
58775: LD_EXP 35
58779: PUSH
58780: LD_VAR 0 4
58784: ARRAY
58785: INC
58786: ST_TO_ADDR
58787: LD_INT 1
58789: PUSH
58790: FOR_DOWNTO
58791: IFFALSE 58963
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58793: LD_ADDR_VAR 0 5
58797: PUSH
58798: LD_EXP 35
58802: PUSH
58803: LD_VAR 0 4
58807: ARRAY
58808: PUSH
58809: LD_VAR 0 3
58813: ARRAY
58814: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58815: LD_VAR 0 5
58819: PUSH
58820: LD_INT 1
58822: ARRAY
58823: PPUSH
58824: CALL_OW 302
58828: NOT
58829: PUSH
58830: LD_VAR 0 5
58834: PUSH
58835: LD_INT 1
58837: ARRAY
58838: PPUSH
58839: CALL_OW 255
58843: PUSH
58844: LD_VAR 0 1
58848: PPUSH
58849: CALL_OW 255
58853: NONEQUAL
58854: OR
58855: IFFALSE 58961
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58857: LD_VAR 0 5
58861: PUSH
58862: LD_INT 1
58864: ARRAY
58865: PPUSH
58866: CALL_OW 305
58870: PUSH
58871: LD_VAR 0 5
58875: PUSH
58876: LD_INT 1
58878: ARRAY
58879: PPUSH
58880: CALL_OW 255
58884: PUSH
58885: LD_VAR 0 1
58889: PPUSH
58890: CALL_OW 255
58894: EQUAL
58895: AND
58896: IFFALSE 58920
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58898: LD_VAR 0 5
58902: PUSH
58903: LD_INT 1
58905: ARRAY
58906: PPUSH
58907: LD_VAR 0 5
58911: PUSH
58912: LD_INT 2
58914: ARRAY
58915: PPUSH
58916: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58920: LD_ADDR_EXP 35
58924: PUSH
58925: LD_EXP 35
58929: PPUSH
58930: LD_VAR 0 4
58934: PPUSH
58935: LD_EXP 35
58939: PUSH
58940: LD_VAR 0 4
58944: ARRAY
58945: PPUSH
58946: LD_VAR 0 3
58950: PPUSH
58951: CALL_OW 3
58955: PPUSH
58956: CALL_OW 1
58960: ST_TO_ADDR
// end ; end ;
58961: GO 58790
58963: POP
58964: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58965: LD_VAR 0 1
58969: PPUSH
58970: LD_EXP 35
58974: PUSH
58975: LD_VAR 0 4
58979: ARRAY
58980: PUSH
58981: LD_INT 0
58983: PLUS
58984: PPUSH
58985: CALL_OW 505
// end ;
58989: LD_VAR 0 2
58993: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58994: LD_INT 0
58996: PPUSH
58997: PPUSH
58998: PPUSH
58999: PPUSH
// if not hack in hackTanks then
59000: LD_VAR 0 1
59004: PUSH
59005: LD_EXP 34
59009: IN
59010: NOT
59011: IFFALSE 59015
// exit ;
59013: GO 59100
// index := GetElementIndex ( hackTanks , hack ) ;
59015: LD_ADDR_VAR 0 5
59019: PUSH
59020: LD_EXP 34
59024: PPUSH
59025: LD_VAR 0 1
59029: PPUSH
59030: CALL 20179 0 2
59034: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59035: LD_ADDR_VAR 0 4
59039: PUSH
59040: DOUBLE
59041: LD_INT 1
59043: DEC
59044: ST_TO_ADDR
59045: LD_EXP 35
59049: PUSH
59050: LD_VAR 0 5
59054: ARRAY
59055: PUSH
59056: FOR_TO
59057: IFFALSE 59098
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59059: LD_EXP 35
59063: PUSH
59064: LD_VAR 0 5
59068: ARRAY
59069: PUSH
59070: LD_VAR 0 4
59074: ARRAY
59075: PUSH
59076: LD_INT 1
59078: ARRAY
59079: PUSH
59080: LD_VAR 0 2
59084: EQUAL
59085: IFFALSE 59096
// KillUnit ( vehicle ) ;
59087: LD_VAR 0 2
59091: PPUSH
59092: CALL_OW 66
59096: GO 59056
59098: POP
59099: POP
// end ;
59100: LD_VAR 0 3
59104: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59105: LD_EXP 39
59109: NOT
59110: IFFALSE 59145
59112: GO 59114
59114: DISABLE
// begin initMiner := true ;
59115: LD_ADDR_EXP 39
59119: PUSH
59120: LD_INT 1
59122: ST_TO_ADDR
// minersList := [ ] ;
59123: LD_ADDR_EXP 40
59127: PUSH
59128: EMPTY
59129: ST_TO_ADDR
// minerMinesList := [ ] ;
59130: LD_ADDR_EXP 41
59134: PUSH
59135: EMPTY
59136: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59137: LD_ADDR_EXP 42
59141: PUSH
59142: LD_INT 5
59144: ST_TO_ADDR
// end ;
59145: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59146: LD_EXP 39
59150: PUSH
59151: LD_INT 34
59153: PUSH
59154: LD_INT 81
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PPUSH
59161: CALL_OW 69
59165: AND
59166: IFFALSE 59627
59168: GO 59170
59170: DISABLE
59171: LD_INT 0
59173: PPUSH
59174: PPUSH
59175: PPUSH
59176: PPUSH
// begin enable ;
59177: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59178: LD_ADDR_VAR 0 1
59182: PUSH
59183: LD_INT 34
59185: PUSH
59186: LD_INT 81
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PPUSH
59193: CALL_OW 69
59197: PUSH
59198: FOR_IN
59199: IFFALSE 59271
// begin if not i in minersList then
59201: LD_VAR 0 1
59205: PUSH
59206: LD_EXP 40
59210: IN
59211: NOT
59212: IFFALSE 59269
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59214: LD_ADDR_EXP 40
59218: PUSH
59219: LD_EXP 40
59223: PPUSH
59224: LD_EXP 40
59228: PUSH
59229: LD_INT 1
59231: PLUS
59232: PPUSH
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 1
59242: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59243: LD_ADDR_EXP 41
59247: PUSH
59248: LD_EXP 41
59252: PPUSH
59253: LD_EXP 41
59257: PUSH
59258: LD_INT 1
59260: PLUS
59261: PPUSH
59262: EMPTY
59263: PPUSH
59264: CALL_OW 1
59268: ST_TO_ADDR
// end end ;
59269: GO 59198
59271: POP
59272: POP
// for i := minerMinesList downto 1 do
59273: LD_ADDR_VAR 0 1
59277: PUSH
59278: DOUBLE
59279: LD_EXP 41
59283: INC
59284: ST_TO_ADDR
59285: LD_INT 1
59287: PUSH
59288: FOR_DOWNTO
59289: IFFALSE 59625
// begin if IsLive ( minersList [ i ] ) then
59291: LD_EXP 40
59295: PUSH
59296: LD_VAR 0 1
59300: ARRAY
59301: PPUSH
59302: CALL_OW 300
59306: IFFALSE 59334
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59308: LD_EXP 40
59312: PUSH
59313: LD_VAR 0 1
59317: ARRAY
59318: PPUSH
59319: LD_EXP 41
59323: PUSH
59324: LD_VAR 0 1
59328: ARRAY
59329: PPUSH
59330: CALL_OW 505
// if not minerMinesList [ i ] then
59334: LD_EXP 41
59338: PUSH
59339: LD_VAR 0 1
59343: ARRAY
59344: NOT
59345: IFFALSE 59349
// continue ;
59347: GO 59288
// for j := minerMinesList [ i ] downto 1 do
59349: LD_ADDR_VAR 0 2
59353: PUSH
59354: DOUBLE
59355: LD_EXP 41
59359: PUSH
59360: LD_VAR 0 1
59364: ARRAY
59365: INC
59366: ST_TO_ADDR
59367: LD_INT 1
59369: PUSH
59370: FOR_DOWNTO
59371: IFFALSE 59621
// begin side := GetSide ( minersList [ i ] ) ;
59373: LD_ADDR_VAR 0 3
59377: PUSH
59378: LD_EXP 40
59382: PUSH
59383: LD_VAR 0 1
59387: ARRAY
59388: PPUSH
59389: CALL_OW 255
59393: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59394: LD_ADDR_VAR 0 4
59398: PUSH
59399: LD_EXP 41
59403: PUSH
59404: LD_VAR 0 1
59408: ARRAY
59409: PUSH
59410: LD_VAR 0 2
59414: ARRAY
59415: PUSH
59416: LD_INT 1
59418: ARRAY
59419: PPUSH
59420: LD_EXP 41
59424: PUSH
59425: LD_VAR 0 1
59429: ARRAY
59430: PUSH
59431: LD_VAR 0 2
59435: ARRAY
59436: PUSH
59437: LD_INT 2
59439: ARRAY
59440: PPUSH
59441: CALL_OW 428
59445: ST_TO_ADDR
// if not tmp then
59446: LD_VAR 0 4
59450: NOT
59451: IFFALSE 59455
// continue ;
59453: GO 59370
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59455: LD_VAR 0 4
59459: PUSH
59460: LD_INT 81
59462: PUSH
59463: LD_VAR 0 3
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PPUSH
59472: CALL_OW 69
59476: IN
59477: PUSH
59478: LD_EXP 41
59482: PUSH
59483: LD_VAR 0 1
59487: ARRAY
59488: PUSH
59489: LD_VAR 0 2
59493: ARRAY
59494: PUSH
59495: LD_INT 1
59497: ARRAY
59498: PPUSH
59499: LD_EXP 41
59503: PUSH
59504: LD_VAR 0 1
59508: ARRAY
59509: PUSH
59510: LD_VAR 0 2
59514: ARRAY
59515: PUSH
59516: LD_INT 2
59518: ARRAY
59519: PPUSH
59520: CALL_OW 458
59524: AND
59525: IFFALSE 59619
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59527: LD_EXP 41
59531: PUSH
59532: LD_VAR 0 1
59536: ARRAY
59537: PUSH
59538: LD_VAR 0 2
59542: ARRAY
59543: PUSH
59544: LD_INT 1
59546: ARRAY
59547: PPUSH
59548: LD_EXP 41
59552: PUSH
59553: LD_VAR 0 1
59557: ARRAY
59558: PUSH
59559: LD_VAR 0 2
59563: ARRAY
59564: PUSH
59565: LD_INT 2
59567: ARRAY
59568: PPUSH
59569: LD_VAR 0 3
59573: PPUSH
59574: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59578: LD_ADDR_EXP 41
59582: PUSH
59583: LD_EXP 41
59587: PPUSH
59588: LD_VAR 0 1
59592: PPUSH
59593: LD_EXP 41
59597: PUSH
59598: LD_VAR 0 1
59602: ARRAY
59603: PPUSH
59604: LD_VAR 0 2
59608: PPUSH
59609: CALL_OW 3
59613: PPUSH
59614: CALL_OW 1
59618: ST_TO_ADDR
// end ; end ;
59619: GO 59370
59621: POP
59622: POP
// end ;
59623: GO 59288
59625: POP
59626: POP
// end ;
59627: PPOPN 4
59629: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59630: LD_INT 0
59632: PPUSH
59633: PPUSH
// result := false ;
59634: LD_ADDR_VAR 0 4
59638: PUSH
59639: LD_INT 0
59641: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59642: LD_VAR 0 1
59646: PPUSH
59647: CALL_OW 264
59651: PUSH
59652: LD_INT 81
59654: EQUAL
59655: NOT
59656: IFFALSE 59660
// exit ;
59658: GO 59900
// index := GetElementIndex ( minersList , unit ) ;
59660: LD_ADDR_VAR 0 5
59664: PUSH
59665: LD_EXP 40
59669: PPUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL 20179 0 2
59679: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59680: LD_EXP 41
59684: PUSH
59685: LD_VAR 0 5
59689: ARRAY
59690: PUSH
59691: LD_EXP 42
59695: GREATEREQUAL
59696: IFFALSE 59700
// exit ;
59698: GO 59900
// ComMoveXY ( unit , x , y ) ;
59700: LD_VAR 0 1
59704: PPUSH
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 3
59714: PPUSH
59715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59719: LD_INT 35
59721: PPUSH
59722: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59726: LD_VAR 0 1
59730: PPUSH
59731: LD_VAR 0 2
59735: PPUSH
59736: LD_VAR 0 3
59740: PPUSH
59741: CALL 51515 0 3
59745: NOT
59746: PUSH
59747: LD_VAR 0 1
59751: PPUSH
59752: CALL_OW 314
59756: AND
59757: IFFALSE 59761
// exit ;
59759: GO 59900
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59761: LD_VAR 0 2
59765: PPUSH
59766: LD_VAR 0 3
59770: PPUSH
59771: CALL_OW 428
59775: PUSH
59776: LD_VAR 0 1
59780: EQUAL
59781: PUSH
59782: LD_VAR 0 1
59786: PPUSH
59787: CALL_OW 314
59791: NOT
59792: AND
59793: IFFALSE 59719
// PlaySoundXY ( x , y , PlantMine ) ;
59795: LD_VAR 0 2
59799: PPUSH
59800: LD_VAR 0 3
59804: PPUSH
59805: LD_STRING PlantMine
59807: PPUSH
59808: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59812: LD_VAR 0 2
59816: PPUSH
59817: LD_VAR 0 3
59821: PPUSH
59822: LD_VAR 0 1
59826: PPUSH
59827: CALL_OW 255
59831: PPUSH
59832: LD_INT 0
59834: PPUSH
59835: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59839: LD_ADDR_EXP 41
59843: PUSH
59844: LD_EXP 41
59848: PPUSH
59849: LD_VAR 0 5
59853: PUSH
59854: LD_EXP 41
59858: PUSH
59859: LD_VAR 0 5
59863: ARRAY
59864: PUSH
59865: LD_INT 1
59867: PLUS
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PPUSH
59873: LD_VAR 0 2
59877: PUSH
59878: LD_VAR 0 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PPUSH
59887: CALL 20394 0 3
59891: ST_TO_ADDR
// result := true ;
59892: LD_ADDR_VAR 0 4
59896: PUSH
59897: LD_INT 1
59899: ST_TO_ADDR
// end ;
59900: LD_VAR 0 4
59904: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59905: LD_INT 0
59907: PPUSH
59908: PPUSH
59909: PPUSH
// if not unit in minersList then
59910: LD_VAR 0 1
59914: PUSH
59915: LD_EXP 40
59919: IN
59920: NOT
59921: IFFALSE 59925
// exit ;
59923: GO 60317
// index := GetElementIndex ( minersList , unit ) ;
59925: LD_ADDR_VAR 0 6
59929: PUSH
59930: LD_EXP 40
59934: PPUSH
59935: LD_VAR 0 1
59939: PPUSH
59940: CALL 20179 0 2
59944: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59945: LD_ADDR_VAR 0 5
59949: PUSH
59950: DOUBLE
59951: LD_EXP 41
59955: PUSH
59956: LD_VAR 0 6
59960: ARRAY
59961: INC
59962: ST_TO_ADDR
59963: LD_INT 1
59965: PUSH
59966: FOR_DOWNTO
59967: IFFALSE 60128
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59969: LD_EXP 41
59973: PUSH
59974: LD_VAR 0 6
59978: ARRAY
59979: PUSH
59980: LD_VAR 0 5
59984: ARRAY
59985: PUSH
59986: LD_INT 1
59988: ARRAY
59989: PUSH
59990: LD_VAR 0 2
59994: EQUAL
59995: PUSH
59996: LD_EXP 41
60000: PUSH
60001: LD_VAR 0 6
60005: ARRAY
60006: PUSH
60007: LD_VAR 0 5
60011: ARRAY
60012: PUSH
60013: LD_INT 2
60015: ARRAY
60016: PUSH
60017: LD_VAR 0 3
60021: EQUAL
60022: AND
60023: IFFALSE 60126
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60025: LD_EXP 41
60029: PUSH
60030: LD_VAR 0 6
60034: ARRAY
60035: PUSH
60036: LD_VAR 0 5
60040: ARRAY
60041: PUSH
60042: LD_INT 1
60044: ARRAY
60045: PPUSH
60046: LD_EXP 41
60050: PUSH
60051: LD_VAR 0 6
60055: ARRAY
60056: PUSH
60057: LD_VAR 0 5
60061: ARRAY
60062: PUSH
60063: LD_INT 2
60065: ARRAY
60066: PPUSH
60067: LD_VAR 0 1
60071: PPUSH
60072: CALL_OW 255
60076: PPUSH
60077: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60081: LD_ADDR_EXP 41
60085: PUSH
60086: LD_EXP 41
60090: PPUSH
60091: LD_VAR 0 6
60095: PPUSH
60096: LD_EXP 41
60100: PUSH
60101: LD_VAR 0 6
60105: ARRAY
60106: PPUSH
60107: LD_VAR 0 5
60111: PPUSH
60112: CALL_OW 3
60116: PPUSH
60117: CALL_OW 1
60121: ST_TO_ADDR
// exit ;
60122: POP
60123: POP
60124: GO 60317
// end ; end ;
60126: GO 59966
60128: POP
60129: POP
// for i := minerMinesList [ index ] downto 1 do
60130: LD_ADDR_VAR 0 5
60134: PUSH
60135: DOUBLE
60136: LD_EXP 41
60140: PUSH
60141: LD_VAR 0 6
60145: ARRAY
60146: INC
60147: ST_TO_ADDR
60148: LD_INT 1
60150: PUSH
60151: FOR_DOWNTO
60152: IFFALSE 60315
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60154: LD_EXP 41
60158: PUSH
60159: LD_VAR 0 6
60163: ARRAY
60164: PUSH
60165: LD_VAR 0 5
60169: ARRAY
60170: PUSH
60171: LD_INT 1
60173: ARRAY
60174: PPUSH
60175: LD_EXP 41
60179: PUSH
60180: LD_VAR 0 6
60184: ARRAY
60185: PUSH
60186: LD_VAR 0 5
60190: ARRAY
60191: PUSH
60192: LD_INT 2
60194: ARRAY
60195: PPUSH
60196: LD_VAR 0 2
60200: PPUSH
60201: LD_VAR 0 3
60205: PPUSH
60206: CALL_OW 298
60210: PUSH
60211: LD_INT 6
60213: LESS
60214: IFFALSE 60313
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60216: LD_EXP 41
60220: PUSH
60221: LD_VAR 0 6
60225: ARRAY
60226: PUSH
60227: LD_VAR 0 5
60231: ARRAY
60232: PUSH
60233: LD_INT 1
60235: ARRAY
60236: PPUSH
60237: LD_EXP 41
60241: PUSH
60242: LD_VAR 0 6
60246: ARRAY
60247: PUSH
60248: LD_VAR 0 5
60252: ARRAY
60253: PUSH
60254: LD_INT 2
60256: ARRAY
60257: PPUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 255
60267: PPUSH
60268: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60272: LD_ADDR_EXP 41
60276: PUSH
60277: LD_EXP 41
60281: PPUSH
60282: LD_VAR 0 6
60286: PPUSH
60287: LD_EXP 41
60291: PUSH
60292: LD_VAR 0 6
60296: ARRAY
60297: PPUSH
60298: LD_VAR 0 5
60302: PPUSH
60303: CALL_OW 3
60307: PPUSH
60308: CALL_OW 1
60312: ST_TO_ADDR
// end ; end ;
60313: GO 60151
60315: POP
60316: POP
// end ;
60317: LD_VAR 0 4
60321: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60322: LD_INT 0
60324: PPUSH
60325: PPUSH
60326: PPUSH
60327: PPUSH
60328: PPUSH
60329: PPUSH
60330: PPUSH
60331: PPUSH
60332: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60333: LD_VAR 0 1
60337: PPUSH
60338: CALL_OW 264
60342: PUSH
60343: LD_INT 81
60345: EQUAL
60346: NOT
60347: PUSH
60348: LD_VAR 0 1
60352: PUSH
60353: LD_EXP 40
60357: IN
60358: NOT
60359: OR
60360: IFFALSE 60364
// exit ;
60362: GO 60686
// index := GetElementIndex ( minersList , unit ) ;
60364: LD_ADDR_VAR 0 6
60368: PUSH
60369: LD_EXP 40
60373: PPUSH
60374: LD_VAR 0 1
60378: PPUSH
60379: CALL 20179 0 2
60383: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60384: LD_ADDR_VAR 0 8
60388: PUSH
60389: LD_EXP 42
60393: PUSH
60394: LD_EXP 41
60398: PUSH
60399: LD_VAR 0 6
60403: ARRAY
60404: MINUS
60405: ST_TO_ADDR
// if not minesFreeAmount then
60406: LD_VAR 0 8
60410: NOT
60411: IFFALSE 60415
// exit ;
60413: GO 60686
// tmp := [ ] ;
60415: LD_ADDR_VAR 0 7
60419: PUSH
60420: EMPTY
60421: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60422: LD_ADDR_VAR 0 5
60426: PUSH
60427: DOUBLE
60428: LD_INT 1
60430: DEC
60431: ST_TO_ADDR
60432: LD_VAR 0 8
60436: PUSH
60437: FOR_TO
60438: IFFALSE 60633
// begin _d := rand ( 0 , 5 ) ;
60440: LD_ADDR_VAR 0 11
60444: PUSH
60445: LD_INT 0
60447: PPUSH
60448: LD_INT 5
60450: PPUSH
60451: CALL_OW 12
60455: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60456: LD_ADDR_VAR 0 12
60460: PUSH
60461: LD_INT 2
60463: PPUSH
60464: LD_INT 6
60466: PPUSH
60467: CALL_OW 12
60471: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60472: LD_ADDR_VAR 0 9
60476: PUSH
60477: LD_VAR 0 2
60481: PPUSH
60482: LD_VAR 0 11
60486: PPUSH
60487: LD_VAR 0 12
60491: PPUSH
60492: CALL_OW 272
60496: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60497: LD_ADDR_VAR 0 10
60501: PUSH
60502: LD_VAR 0 3
60506: PPUSH
60507: LD_VAR 0 11
60511: PPUSH
60512: LD_VAR 0 12
60516: PPUSH
60517: CALL_OW 273
60521: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60522: LD_VAR 0 9
60526: PPUSH
60527: LD_VAR 0 10
60531: PPUSH
60532: CALL_OW 488
60536: PUSH
60537: LD_VAR 0 9
60541: PUSH
60542: LD_VAR 0 10
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_VAR 0 7
60555: IN
60556: NOT
60557: AND
60558: PUSH
60559: LD_VAR 0 9
60563: PPUSH
60564: LD_VAR 0 10
60568: PPUSH
60569: CALL_OW 458
60573: NOT
60574: AND
60575: IFFALSE 60617
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60577: LD_ADDR_VAR 0 7
60581: PUSH
60582: LD_VAR 0 7
60586: PPUSH
60587: LD_VAR 0 7
60591: PUSH
60592: LD_INT 1
60594: PLUS
60595: PPUSH
60596: LD_VAR 0 9
60600: PUSH
60601: LD_VAR 0 10
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PPUSH
60610: CALL_OW 1
60614: ST_TO_ADDR
60615: GO 60631
// i := i - 1 ;
60617: LD_ADDR_VAR 0 5
60621: PUSH
60622: LD_VAR 0 5
60626: PUSH
60627: LD_INT 1
60629: MINUS
60630: ST_TO_ADDR
// end ;
60631: GO 60437
60633: POP
60634: POP
// for i in tmp do
60635: LD_ADDR_VAR 0 5
60639: PUSH
60640: LD_VAR 0 7
60644: PUSH
60645: FOR_IN
60646: IFFALSE 60684
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60648: LD_VAR 0 1
60652: PPUSH
60653: LD_VAR 0 5
60657: PUSH
60658: LD_INT 1
60660: ARRAY
60661: PPUSH
60662: LD_VAR 0 5
60666: PUSH
60667: LD_INT 2
60669: ARRAY
60670: PPUSH
60671: CALL 59630 0 3
60675: NOT
60676: IFFALSE 60682
// exit ;
60678: POP
60679: POP
60680: GO 60686
60682: GO 60645
60684: POP
60685: POP
// end ;
60686: LD_VAR 0 4
60690: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60691: LD_INT 0
60693: PPUSH
60694: PPUSH
60695: PPUSH
60696: PPUSH
60697: PPUSH
60698: PPUSH
60699: PPUSH
// if not GetClass ( unit ) = class_sniper then
60700: LD_VAR 0 1
60704: PPUSH
60705: CALL_OW 257
60709: PUSH
60710: LD_INT 5
60712: EQUAL
60713: NOT
60714: IFFALSE 60718
// exit ;
60716: GO 61106
// dist := 8 ;
60718: LD_ADDR_VAR 0 5
60722: PUSH
60723: LD_INT 8
60725: ST_TO_ADDR
// viewRange := 12 ;
60726: LD_ADDR_VAR 0 7
60730: PUSH
60731: LD_INT 12
60733: ST_TO_ADDR
// side := GetSide ( unit ) ;
60734: LD_ADDR_VAR 0 6
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 255
60748: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60749: LD_INT 61
60751: PPUSH
60752: LD_VAR 0 6
60756: PPUSH
60757: CALL_OW 321
60761: PUSH
60762: LD_INT 2
60764: EQUAL
60765: IFFALSE 60775
// viewRange := 16 ;
60767: LD_ADDR_VAR 0 7
60771: PUSH
60772: LD_INT 16
60774: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60775: LD_VAR 0 1
60779: PPUSH
60780: LD_VAR 0 2
60784: PPUSH
60785: LD_VAR 0 3
60789: PPUSH
60790: CALL_OW 297
60794: PUSH
60795: LD_VAR 0 5
60799: GREATER
60800: IFFALSE 60879
// begin ComMoveXY ( unit , x , y ) ;
60802: LD_VAR 0 1
60806: PPUSH
60807: LD_VAR 0 2
60811: PPUSH
60812: LD_VAR 0 3
60816: PPUSH
60817: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60821: LD_INT 35
60823: PPUSH
60824: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60828: LD_VAR 0 1
60832: PPUSH
60833: LD_VAR 0 2
60837: PPUSH
60838: LD_VAR 0 3
60842: PPUSH
60843: CALL 51515 0 3
60847: NOT
60848: IFFALSE 60852
// exit ;
60850: GO 61106
// until GetDistUnitXY ( unit , x , y ) < dist ;
60852: LD_VAR 0 1
60856: PPUSH
60857: LD_VAR 0 2
60861: PPUSH
60862: LD_VAR 0 3
60866: PPUSH
60867: CALL_OW 297
60871: PUSH
60872: LD_VAR 0 5
60876: LESS
60877: IFFALSE 60821
// end ; ComTurnXY ( unit , x , y ) ;
60879: LD_VAR 0 1
60883: PPUSH
60884: LD_VAR 0 2
60888: PPUSH
60889: LD_VAR 0 3
60893: PPUSH
60894: CALL_OW 118
// wait ( 5 ) ;
60898: LD_INT 5
60900: PPUSH
60901: CALL_OW 67
// _d := GetDir ( unit ) ;
60905: LD_ADDR_VAR 0 10
60909: PUSH
60910: LD_VAR 0 1
60914: PPUSH
60915: CALL_OW 254
60919: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60920: LD_ADDR_VAR 0 8
60924: PUSH
60925: LD_VAR 0 1
60929: PPUSH
60930: CALL_OW 250
60934: PPUSH
60935: LD_VAR 0 10
60939: PPUSH
60940: LD_VAR 0 5
60944: PPUSH
60945: CALL_OW 272
60949: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60950: LD_ADDR_VAR 0 9
60954: PUSH
60955: LD_VAR 0 1
60959: PPUSH
60960: CALL_OW 251
60964: PPUSH
60965: LD_VAR 0 10
60969: PPUSH
60970: LD_VAR 0 5
60974: PPUSH
60975: CALL_OW 273
60979: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60980: LD_VAR 0 8
60984: PPUSH
60985: LD_VAR 0 9
60989: PPUSH
60990: CALL_OW 488
60994: NOT
60995: IFFALSE 60999
// exit ;
60997: GO 61106
// ComAnimCustom ( unit , 1 ) ;
60999: LD_VAR 0 1
61003: PPUSH
61004: LD_INT 1
61006: PPUSH
61007: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61011: LD_VAR 0 8
61015: PPUSH
61016: LD_VAR 0 9
61020: PPUSH
61021: LD_VAR 0 6
61025: PPUSH
61026: LD_VAR 0 7
61030: PPUSH
61031: CALL_OW 330
// repeat wait ( 1 ) ;
61035: LD_INT 1
61037: PPUSH
61038: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL_OW 316
61051: PUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: CALL_OW 314
61061: OR
61062: PUSH
61063: LD_VAR 0 1
61067: PPUSH
61068: CALL_OW 302
61072: NOT
61073: OR
61074: PUSH
61075: LD_VAR 0 1
61079: PPUSH
61080: CALL_OW 301
61084: OR
61085: IFFALSE 61035
// RemoveSeeing ( _x , _y , side ) ;
61087: LD_VAR 0 8
61091: PPUSH
61092: LD_VAR 0 9
61096: PPUSH
61097: LD_VAR 0 6
61101: PPUSH
61102: CALL_OW 331
// end ; end_of_file
61106: LD_VAR 0 4
61110: RET
// every 0 0$1 do
61111: GO 61113
61113: DISABLE
// begin enable ;
61114: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61115: LD_STRING updateTimer(
61117: PUSH
61118: LD_OWVAR 1
61122: STR
61123: PUSH
61124: LD_STRING );
61126: STR
61127: PPUSH
61128: CALL_OW 559
// end ;
61132: END
// export function SOS_MapStart ( ) ; begin
61133: LD_INT 0
61135: PPUSH
// if streamModeActive then
61136: LD_EXP 43
61140: IFFALSE 61149
// DefineStreamItems ( true ) ;
61142: LD_INT 1
61144: PPUSH
61145: CALL 62803 0 1
// UpdateFactoryWaypoints ( ) ;
61149: CALL 75664 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61153: CALL 75921 0 0
// end ;
61157: LD_VAR 0 1
61161: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61162: LD_INT 0
61164: PPUSH
// if p2 = hack_mode then
61165: LD_VAR 0 2
61169: PUSH
61170: LD_INT 100
61172: EQUAL
61173: IFFALSE 62176
// begin if not StreamModeActive then
61175: LD_EXP 43
61179: NOT
61180: IFFALSE 61190
// StreamModeActive := true ;
61182: LD_ADDR_EXP 43
61186: PUSH
61187: LD_INT 1
61189: ST_TO_ADDR
// if p3 = 0 then
61190: LD_VAR 0 3
61194: PUSH
61195: LD_INT 0
61197: EQUAL
61198: IFFALSE 61204
// InitStreamMode ;
61200: CALL 62339 0 0
// if p3 = 1 then
61204: LD_VAR 0 3
61208: PUSH
61209: LD_INT 1
61211: EQUAL
61212: IFFALSE 61222
// sRocket := true ;
61214: LD_ADDR_EXP 48
61218: PUSH
61219: LD_INT 1
61221: ST_TO_ADDR
// if p3 = 2 then
61222: LD_VAR 0 3
61226: PUSH
61227: LD_INT 2
61229: EQUAL
61230: IFFALSE 61240
// sSpeed := true ;
61232: LD_ADDR_EXP 47
61236: PUSH
61237: LD_INT 1
61239: ST_TO_ADDR
// if p3 = 3 then
61240: LD_VAR 0 3
61244: PUSH
61245: LD_INT 3
61247: EQUAL
61248: IFFALSE 61258
// sEngine := true ;
61250: LD_ADDR_EXP 49
61254: PUSH
61255: LD_INT 1
61257: ST_TO_ADDR
// if p3 = 4 then
61258: LD_VAR 0 3
61262: PUSH
61263: LD_INT 4
61265: EQUAL
61266: IFFALSE 61276
// sSpec := true ;
61268: LD_ADDR_EXP 46
61272: PUSH
61273: LD_INT 1
61275: ST_TO_ADDR
// if p3 = 5 then
61276: LD_VAR 0 3
61280: PUSH
61281: LD_INT 5
61283: EQUAL
61284: IFFALSE 61294
// sLevel := true ;
61286: LD_ADDR_EXP 50
61290: PUSH
61291: LD_INT 1
61293: ST_TO_ADDR
// if p3 = 6 then
61294: LD_VAR 0 3
61298: PUSH
61299: LD_INT 6
61301: EQUAL
61302: IFFALSE 61312
// sArmoury := true ;
61304: LD_ADDR_EXP 51
61308: PUSH
61309: LD_INT 1
61311: ST_TO_ADDR
// if p3 = 7 then
61312: LD_VAR 0 3
61316: PUSH
61317: LD_INT 7
61319: EQUAL
61320: IFFALSE 61330
// sRadar := true ;
61322: LD_ADDR_EXP 52
61326: PUSH
61327: LD_INT 1
61329: ST_TO_ADDR
// if p3 = 8 then
61330: LD_VAR 0 3
61334: PUSH
61335: LD_INT 8
61337: EQUAL
61338: IFFALSE 61348
// sBunker := true ;
61340: LD_ADDR_EXP 53
61344: PUSH
61345: LD_INT 1
61347: ST_TO_ADDR
// if p3 = 9 then
61348: LD_VAR 0 3
61352: PUSH
61353: LD_INT 9
61355: EQUAL
61356: IFFALSE 61366
// sHack := true ;
61358: LD_ADDR_EXP 54
61362: PUSH
61363: LD_INT 1
61365: ST_TO_ADDR
// if p3 = 10 then
61366: LD_VAR 0 3
61370: PUSH
61371: LD_INT 10
61373: EQUAL
61374: IFFALSE 61384
// sFire := true ;
61376: LD_ADDR_EXP 55
61380: PUSH
61381: LD_INT 1
61383: ST_TO_ADDR
// if p3 = 11 then
61384: LD_VAR 0 3
61388: PUSH
61389: LD_INT 11
61391: EQUAL
61392: IFFALSE 61402
// sRefresh := true ;
61394: LD_ADDR_EXP 56
61398: PUSH
61399: LD_INT 1
61401: ST_TO_ADDR
// if p3 = 12 then
61402: LD_VAR 0 3
61406: PUSH
61407: LD_INT 12
61409: EQUAL
61410: IFFALSE 61420
// sExp := true ;
61412: LD_ADDR_EXP 57
61416: PUSH
61417: LD_INT 1
61419: ST_TO_ADDR
// if p3 = 13 then
61420: LD_VAR 0 3
61424: PUSH
61425: LD_INT 13
61427: EQUAL
61428: IFFALSE 61438
// sDepot := true ;
61430: LD_ADDR_EXP 58
61434: PUSH
61435: LD_INT 1
61437: ST_TO_ADDR
// if p3 = 14 then
61438: LD_VAR 0 3
61442: PUSH
61443: LD_INT 14
61445: EQUAL
61446: IFFALSE 61456
// sFlag := true ;
61448: LD_ADDR_EXP 59
61452: PUSH
61453: LD_INT 1
61455: ST_TO_ADDR
// if p3 = 15 then
61456: LD_VAR 0 3
61460: PUSH
61461: LD_INT 15
61463: EQUAL
61464: IFFALSE 61474
// sKamikadze := true ;
61466: LD_ADDR_EXP 67
61470: PUSH
61471: LD_INT 1
61473: ST_TO_ADDR
// if p3 = 16 then
61474: LD_VAR 0 3
61478: PUSH
61479: LD_INT 16
61481: EQUAL
61482: IFFALSE 61492
// sTroll := true ;
61484: LD_ADDR_EXP 68
61488: PUSH
61489: LD_INT 1
61491: ST_TO_ADDR
// if p3 = 17 then
61492: LD_VAR 0 3
61496: PUSH
61497: LD_INT 17
61499: EQUAL
61500: IFFALSE 61510
// sSlow := true ;
61502: LD_ADDR_EXP 69
61506: PUSH
61507: LD_INT 1
61509: ST_TO_ADDR
// if p3 = 18 then
61510: LD_VAR 0 3
61514: PUSH
61515: LD_INT 18
61517: EQUAL
61518: IFFALSE 61528
// sLack := true ;
61520: LD_ADDR_EXP 70
61524: PUSH
61525: LD_INT 1
61527: ST_TO_ADDR
// if p3 = 19 then
61528: LD_VAR 0 3
61532: PUSH
61533: LD_INT 19
61535: EQUAL
61536: IFFALSE 61546
// sTank := true ;
61538: LD_ADDR_EXP 72
61542: PUSH
61543: LD_INT 1
61545: ST_TO_ADDR
// if p3 = 20 then
61546: LD_VAR 0 3
61550: PUSH
61551: LD_INT 20
61553: EQUAL
61554: IFFALSE 61564
// sRemote := true ;
61556: LD_ADDR_EXP 73
61560: PUSH
61561: LD_INT 1
61563: ST_TO_ADDR
// if p3 = 21 then
61564: LD_VAR 0 3
61568: PUSH
61569: LD_INT 21
61571: EQUAL
61572: IFFALSE 61582
// sPowell := true ;
61574: LD_ADDR_EXP 74
61578: PUSH
61579: LD_INT 1
61581: ST_TO_ADDR
// if p3 = 22 then
61582: LD_VAR 0 3
61586: PUSH
61587: LD_INT 22
61589: EQUAL
61590: IFFALSE 61600
// sTeleport := true ;
61592: LD_ADDR_EXP 77
61596: PUSH
61597: LD_INT 1
61599: ST_TO_ADDR
// if p3 = 23 then
61600: LD_VAR 0 3
61604: PUSH
61605: LD_INT 23
61607: EQUAL
61608: IFFALSE 61618
// sOilTower := true ;
61610: LD_ADDR_EXP 79
61614: PUSH
61615: LD_INT 1
61617: ST_TO_ADDR
// if p3 = 24 then
61618: LD_VAR 0 3
61622: PUSH
61623: LD_INT 24
61625: EQUAL
61626: IFFALSE 61636
// sShovel := true ;
61628: LD_ADDR_EXP 80
61632: PUSH
61633: LD_INT 1
61635: ST_TO_ADDR
// if p3 = 25 then
61636: LD_VAR 0 3
61640: PUSH
61641: LD_INT 25
61643: EQUAL
61644: IFFALSE 61654
// sSheik := true ;
61646: LD_ADDR_EXP 81
61650: PUSH
61651: LD_INT 1
61653: ST_TO_ADDR
// if p3 = 26 then
61654: LD_VAR 0 3
61658: PUSH
61659: LD_INT 26
61661: EQUAL
61662: IFFALSE 61672
// sEarthquake := true ;
61664: LD_ADDR_EXP 83
61668: PUSH
61669: LD_INT 1
61671: ST_TO_ADDR
// if p3 = 27 then
61672: LD_VAR 0 3
61676: PUSH
61677: LD_INT 27
61679: EQUAL
61680: IFFALSE 61690
// sAI := true ;
61682: LD_ADDR_EXP 84
61686: PUSH
61687: LD_INT 1
61689: ST_TO_ADDR
// if p3 = 28 then
61690: LD_VAR 0 3
61694: PUSH
61695: LD_INT 28
61697: EQUAL
61698: IFFALSE 61708
// sCargo := true ;
61700: LD_ADDR_EXP 87
61704: PUSH
61705: LD_INT 1
61707: ST_TO_ADDR
// if p3 = 29 then
61708: LD_VAR 0 3
61712: PUSH
61713: LD_INT 29
61715: EQUAL
61716: IFFALSE 61726
// sDLaser := true ;
61718: LD_ADDR_EXP 88
61722: PUSH
61723: LD_INT 1
61725: ST_TO_ADDR
// if p3 = 30 then
61726: LD_VAR 0 3
61730: PUSH
61731: LD_INT 30
61733: EQUAL
61734: IFFALSE 61744
// sExchange := true ;
61736: LD_ADDR_EXP 89
61740: PUSH
61741: LD_INT 1
61743: ST_TO_ADDR
// if p3 = 31 then
61744: LD_VAR 0 3
61748: PUSH
61749: LD_INT 31
61751: EQUAL
61752: IFFALSE 61762
// sFac := true ;
61754: LD_ADDR_EXP 90
61758: PUSH
61759: LD_INT 1
61761: ST_TO_ADDR
// if p3 = 32 then
61762: LD_VAR 0 3
61766: PUSH
61767: LD_INT 32
61769: EQUAL
61770: IFFALSE 61780
// sPower := true ;
61772: LD_ADDR_EXP 91
61776: PUSH
61777: LD_INT 1
61779: ST_TO_ADDR
// if p3 = 33 then
61780: LD_VAR 0 3
61784: PUSH
61785: LD_INT 33
61787: EQUAL
61788: IFFALSE 61798
// sRandom := true ;
61790: LD_ADDR_EXP 92
61794: PUSH
61795: LD_INT 1
61797: ST_TO_ADDR
// if p3 = 34 then
61798: LD_VAR 0 3
61802: PUSH
61803: LD_INT 34
61805: EQUAL
61806: IFFALSE 61816
// sShield := true ;
61808: LD_ADDR_EXP 93
61812: PUSH
61813: LD_INT 1
61815: ST_TO_ADDR
// if p3 = 35 then
61816: LD_VAR 0 3
61820: PUSH
61821: LD_INT 35
61823: EQUAL
61824: IFFALSE 61834
// sTime := true ;
61826: LD_ADDR_EXP 94
61830: PUSH
61831: LD_INT 1
61833: ST_TO_ADDR
// if p3 = 36 then
61834: LD_VAR 0 3
61838: PUSH
61839: LD_INT 36
61841: EQUAL
61842: IFFALSE 61852
// sTools := true ;
61844: LD_ADDR_EXP 95
61848: PUSH
61849: LD_INT 1
61851: ST_TO_ADDR
// if p3 = 101 then
61852: LD_VAR 0 3
61856: PUSH
61857: LD_INT 101
61859: EQUAL
61860: IFFALSE 61870
// sSold := true ;
61862: LD_ADDR_EXP 60
61866: PUSH
61867: LD_INT 1
61869: ST_TO_ADDR
// if p3 = 102 then
61870: LD_VAR 0 3
61874: PUSH
61875: LD_INT 102
61877: EQUAL
61878: IFFALSE 61888
// sDiff := true ;
61880: LD_ADDR_EXP 61
61884: PUSH
61885: LD_INT 1
61887: ST_TO_ADDR
// if p3 = 103 then
61888: LD_VAR 0 3
61892: PUSH
61893: LD_INT 103
61895: EQUAL
61896: IFFALSE 61906
// sFog := true ;
61898: LD_ADDR_EXP 64
61902: PUSH
61903: LD_INT 1
61905: ST_TO_ADDR
// if p3 = 104 then
61906: LD_VAR 0 3
61910: PUSH
61911: LD_INT 104
61913: EQUAL
61914: IFFALSE 61924
// sReset := true ;
61916: LD_ADDR_EXP 65
61920: PUSH
61921: LD_INT 1
61923: ST_TO_ADDR
// if p3 = 105 then
61924: LD_VAR 0 3
61928: PUSH
61929: LD_INT 105
61931: EQUAL
61932: IFFALSE 61942
// sSun := true ;
61934: LD_ADDR_EXP 66
61938: PUSH
61939: LD_INT 1
61941: ST_TO_ADDR
// if p3 = 106 then
61942: LD_VAR 0 3
61946: PUSH
61947: LD_INT 106
61949: EQUAL
61950: IFFALSE 61960
// sTiger := true ;
61952: LD_ADDR_EXP 62
61956: PUSH
61957: LD_INT 1
61959: ST_TO_ADDR
// if p3 = 107 then
61960: LD_VAR 0 3
61964: PUSH
61965: LD_INT 107
61967: EQUAL
61968: IFFALSE 61978
// sBomb := true ;
61970: LD_ADDR_EXP 63
61974: PUSH
61975: LD_INT 1
61977: ST_TO_ADDR
// if p3 = 108 then
61978: LD_VAR 0 3
61982: PUSH
61983: LD_INT 108
61985: EQUAL
61986: IFFALSE 61996
// sWound := true ;
61988: LD_ADDR_EXP 71
61992: PUSH
61993: LD_INT 1
61995: ST_TO_ADDR
// if p3 = 109 then
61996: LD_VAR 0 3
62000: PUSH
62001: LD_INT 109
62003: EQUAL
62004: IFFALSE 62014
// sBetray := true ;
62006: LD_ADDR_EXP 75
62010: PUSH
62011: LD_INT 1
62013: ST_TO_ADDR
// if p3 = 110 then
62014: LD_VAR 0 3
62018: PUSH
62019: LD_INT 110
62021: EQUAL
62022: IFFALSE 62032
// sContamin := true ;
62024: LD_ADDR_EXP 76
62028: PUSH
62029: LD_INT 1
62031: ST_TO_ADDR
// if p3 = 111 then
62032: LD_VAR 0 3
62036: PUSH
62037: LD_INT 111
62039: EQUAL
62040: IFFALSE 62050
// sOil := true ;
62042: LD_ADDR_EXP 78
62046: PUSH
62047: LD_INT 1
62049: ST_TO_ADDR
// if p3 = 112 then
62050: LD_VAR 0 3
62054: PUSH
62055: LD_INT 112
62057: EQUAL
62058: IFFALSE 62068
// sStu := true ;
62060: LD_ADDR_EXP 82
62064: PUSH
62065: LD_INT 1
62067: ST_TO_ADDR
// if p3 = 113 then
62068: LD_VAR 0 3
62072: PUSH
62073: LD_INT 113
62075: EQUAL
62076: IFFALSE 62086
// sBazooka := true ;
62078: LD_ADDR_EXP 85
62082: PUSH
62083: LD_INT 1
62085: ST_TO_ADDR
// if p3 = 114 then
62086: LD_VAR 0 3
62090: PUSH
62091: LD_INT 114
62093: EQUAL
62094: IFFALSE 62104
// sMortar := true ;
62096: LD_ADDR_EXP 86
62100: PUSH
62101: LD_INT 1
62103: ST_TO_ADDR
// if p3 = 115 then
62104: LD_VAR 0 3
62108: PUSH
62109: LD_INT 115
62111: EQUAL
62112: IFFALSE 62122
// sRanger := true ;
62114: LD_ADDR_EXP 96
62118: PUSH
62119: LD_INT 1
62121: ST_TO_ADDR
// if p3 = 116 then
62122: LD_VAR 0 3
62126: PUSH
62127: LD_INT 116
62129: EQUAL
62130: IFFALSE 62140
// sComputer := true ;
62132: LD_ADDR_EXP 97
62136: PUSH
62137: LD_INT 1
62139: ST_TO_ADDR
// if p3 = 117 then
62140: LD_VAR 0 3
62144: PUSH
62145: LD_INT 117
62147: EQUAL
62148: IFFALSE 62158
// s30 := true ;
62150: LD_ADDR_EXP 98
62154: PUSH
62155: LD_INT 1
62157: ST_TO_ADDR
// if p3 = 118 then
62158: LD_VAR 0 3
62162: PUSH
62163: LD_INT 118
62165: EQUAL
62166: IFFALSE 62176
// s60 := true ;
62168: LD_ADDR_EXP 99
62172: PUSH
62173: LD_INT 1
62175: ST_TO_ADDR
// end ; if p2 = stream_mode then
62176: LD_VAR 0 2
62180: PUSH
62181: LD_INT 101
62183: EQUAL
62184: IFFALSE 62312
// begin case p3 of 1 :
62186: LD_VAR 0 3
62190: PUSH
62191: LD_INT 1
62193: DOUBLE
62194: EQUAL
62195: IFTRUE 62199
62197: GO 62206
62199: POP
// hHackUnlimitedResources ; 2 :
62200: CALL 74410 0 0
62204: GO 62312
62206: LD_INT 2
62208: DOUBLE
62209: EQUAL
62210: IFTRUE 62214
62212: GO 62221
62214: POP
// hHackSetLevel10 ; 3 :
62215: CALL 74543 0 0
62219: GO 62312
62221: LD_INT 3
62223: DOUBLE
62224: EQUAL
62225: IFTRUE 62229
62227: GO 62236
62229: POP
// hHackSetLevel10YourUnits ; 4 :
62230: CALL 74628 0 0
62234: GO 62312
62236: LD_INT 4
62238: DOUBLE
62239: EQUAL
62240: IFTRUE 62244
62242: GO 62251
62244: POP
// hHackInvincible ; 5 :
62245: CALL 75076 0 0
62249: GO 62312
62251: LD_INT 5
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62259
62257: GO 62266
62259: POP
// hHackInvisible ; 6 :
62260: CALL 75187 0 0
62264: GO 62312
62266: LD_INT 6
62268: DOUBLE
62269: EQUAL
62270: IFTRUE 62274
62272: GO 62281
62274: POP
// hHackChangeYourSide ; 7 :
62275: CALL 75244 0 0
62279: GO 62312
62281: LD_INT 7
62283: DOUBLE
62284: EQUAL
62285: IFTRUE 62289
62287: GO 62296
62289: POP
// hHackChangeUnitSide ; 8 :
62290: CALL 75286 0 0
62294: GO 62312
62296: LD_INT 8
62298: DOUBLE
62299: EQUAL
62300: IFTRUE 62304
62302: GO 62311
62304: POP
// hHackFog ; end ;
62305: CALL 75387 0 0
62309: GO 62312
62311: POP
// end ; end ;
62312: LD_VAR 0 7
62316: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
62317: GO 62319
62319: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
62320: LD_STRING initStreamRollete();
62322: PPUSH
62323: CALL_OW 559
// InitStreamMode ;
62327: CALL 62339 0 0
// DefineStreamItems ( false ) ;
62331: LD_INT 0
62333: PPUSH
62334: CALL 62803 0 1
// end ;
62338: END
// function InitStreamMode ; begin
62339: LD_INT 0
62341: PPUSH
// streamModeActive := false ;
62342: LD_ADDR_EXP 43
62346: PUSH
62347: LD_INT 0
62349: ST_TO_ADDR
// normalCounter := 36 ;
62350: LD_ADDR_EXP 44
62354: PUSH
62355: LD_INT 36
62357: ST_TO_ADDR
// hardcoreCounter := 18 ;
62358: LD_ADDR_EXP 45
62362: PUSH
62363: LD_INT 18
62365: ST_TO_ADDR
// sRocket := false ;
62366: LD_ADDR_EXP 48
62370: PUSH
62371: LD_INT 0
62373: ST_TO_ADDR
// sSpeed := false ;
62374: LD_ADDR_EXP 47
62378: PUSH
62379: LD_INT 0
62381: ST_TO_ADDR
// sEngine := false ;
62382: LD_ADDR_EXP 49
62386: PUSH
62387: LD_INT 0
62389: ST_TO_ADDR
// sSpec := false ;
62390: LD_ADDR_EXP 46
62394: PUSH
62395: LD_INT 0
62397: ST_TO_ADDR
// sLevel := false ;
62398: LD_ADDR_EXP 50
62402: PUSH
62403: LD_INT 0
62405: ST_TO_ADDR
// sArmoury := false ;
62406: LD_ADDR_EXP 51
62410: PUSH
62411: LD_INT 0
62413: ST_TO_ADDR
// sRadar := false ;
62414: LD_ADDR_EXP 52
62418: PUSH
62419: LD_INT 0
62421: ST_TO_ADDR
// sBunker := false ;
62422: LD_ADDR_EXP 53
62426: PUSH
62427: LD_INT 0
62429: ST_TO_ADDR
// sHack := false ;
62430: LD_ADDR_EXP 54
62434: PUSH
62435: LD_INT 0
62437: ST_TO_ADDR
// sFire := false ;
62438: LD_ADDR_EXP 55
62442: PUSH
62443: LD_INT 0
62445: ST_TO_ADDR
// sRefresh := false ;
62446: LD_ADDR_EXP 56
62450: PUSH
62451: LD_INT 0
62453: ST_TO_ADDR
// sExp := false ;
62454: LD_ADDR_EXP 57
62458: PUSH
62459: LD_INT 0
62461: ST_TO_ADDR
// sDepot := false ;
62462: LD_ADDR_EXP 58
62466: PUSH
62467: LD_INT 0
62469: ST_TO_ADDR
// sFlag := false ;
62470: LD_ADDR_EXP 59
62474: PUSH
62475: LD_INT 0
62477: ST_TO_ADDR
// sKamikadze := false ;
62478: LD_ADDR_EXP 67
62482: PUSH
62483: LD_INT 0
62485: ST_TO_ADDR
// sTroll := false ;
62486: LD_ADDR_EXP 68
62490: PUSH
62491: LD_INT 0
62493: ST_TO_ADDR
// sSlow := false ;
62494: LD_ADDR_EXP 69
62498: PUSH
62499: LD_INT 0
62501: ST_TO_ADDR
// sLack := false ;
62502: LD_ADDR_EXP 70
62506: PUSH
62507: LD_INT 0
62509: ST_TO_ADDR
// sTank := false ;
62510: LD_ADDR_EXP 72
62514: PUSH
62515: LD_INT 0
62517: ST_TO_ADDR
// sRemote := false ;
62518: LD_ADDR_EXP 73
62522: PUSH
62523: LD_INT 0
62525: ST_TO_ADDR
// sPowell := false ;
62526: LD_ADDR_EXP 74
62530: PUSH
62531: LD_INT 0
62533: ST_TO_ADDR
// sTeleport := false ;
62534: LD_ADDR_EXP 77
62538: PUSH
62539: LD_INT 0
62541: ST_TO_ADDR
// sOilTower := false ;
62542: LD_ADDR_EXP 79
62546: PUSH
62547: LD_INT 0
62549: ST_TO_ADDR
// sShovel := false ;
62550: LD_ADDR_EXP 80
62554: PUSH
62555: LD_INT 0
62557: ST_TO_ADDR
// sSheik := false ;
62558: LD_ADDR_EXP 81
62562: PUSH
62563: LD_INT 0
62565: ST_TO_ADDR
// sEarthquake := false ;
62566: LD_ADDR_EXP 83
62570: PUSH
62571: LD_INT 0
62573: ST_TO_ADDR
// sAI := false ;
62574: LD_ADDR_EXP 84
62578: PUSH
62579: LD_INT 0
62581: ST_TO_ADDR
// sCargo := false ;
62582: LD_ADDR_EXP 87
62586: PUSH
62587: LD_INT 0
62589: ST_TO_ADDR
// sDLaser := false ;
62590: LD_ADDR_EXP 88
62594: PUSH
62595: LD_INT 0
62597: ST_TO_ADDR
// sExchange := false ;
62598: LD_ADDR_EXP 89
62602: PUSH
62603: LD_INT 0
62605: ST_TO_ADDR
// sFac := false ;
62606: LD_ADDR_EXP 90
62610: PUSH
62611: LD_INT 0
62613: ST_TO_ADDR
// sPower := false ;
62614: LD_ADDR_EXP 91
62618: PUSH
62619: LD_INT 0
62621: ST_TO_ADDR
// sRandom := false ;
62622: LD_ADDR_EXP 92
62626: PUSH
62627: LD_INT 0
62629: ST_TO_ADDR
// sShield := false ;
62630: LD_ADDR_EXP 93
62634: PUSH
62635: LD_INT 0
62637: ST_TO_ADDR
// sTime := false ;
62638: LD_ADDR_EXP 94
62642: PUSH
62643: LD_INT 0
62645: ST_TO_ADDR
// sTools := false ;
62646: LD_ADDR_EXP 95
62650: PUSH
62651: LD_INT 0
62653: ST_TO_ADDR
// sSold := false ;
62654: LD_ADDR_EXP 60
62658: PUSH
62659: LD_INT 0
62661: ST_TO_ADDR
// sDiff := false ;
62662: LD_ADDR_EXP 61
62666: PUSH
62667: LD_INT 0
62669: ST_TO_ADDR
// sFog := false ;
62670: LD_ADDR_EXP 64
62674: PUSH
62675: LD_INT 0
62677: ST_TO_ADDR
// sReset := false ;
62678: LD_ADDR_EXP 65
62682: PUSH
62683: LD_INT 0
62685: ST_TO_ADDR
// sSun := false ;
62686: LD_ADDR_EXP 66
62690: PUSH
62691: LD_INT 0
62693: ST_TO_ADDR
// sTiger := false ;
62694: LD_ADDR_EXP 62
62698: PUSH
62699: LD_INT 0
62701: ST_TO_ADDR
// sBomb := false ;
62702: LD_ADDR_EXP 63
62706: PUSH
62707: LD_INT 0
62709: ST_TO_ADDR
// sWound := false ;
62710: LD_ADDR_EXP 71
62714: PUSH
62715: LD_INT 0
62717: ST_TO_ADDR
// sBetray := false ;
62718: LD_ADDR_EXP 75
62722: PUSH
62723: LD_INT 0
62725: ST_TO_ADDR
// sContamin := false ;
62726: LD_ADDR_EXP 76
62730: PUSH
62731: LD_INT 0
62733: ST_TO_ADDR
// sOil := false ;
62734: LD_ADDR_EXP 78
62738: PUSH
62739: LD_INT 0
62741: ST_TO_ADDR
// sStu := false ;
62742: LD_ADDR_EXP 82
62746: PUSH
62747: LD_INT 0
62749: ST_TO_ADDR
// sBazooka := false ;
62750: LD_ADDR_EXP 85
62754: PUSH
62755: LD_INT 0
62757: ST_TO_ADDR
// sMortar := false ;
62758: LD_ADDR_EXP 86
62762: PUSH
62763: LD_INT 0
62765: ST_TO_ADDR
// sRanger := false ;
62766: LD_ADDR_EXP 96
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// sComputer := false ;
62774: LD_ADDR_EXP 97
62778: PUSH
62779: LD_INT 0
62781: ST_TO_ADDR
// s30 := false ;
62782: LD_ADDR_EXP 98
62786: PUSH
62787: LD_INT 0
62789: ST_TO_ADDR
// s60 := false ;
62790: LD_ADDR_EXP 99
62794: PUSH
62795: LD_INT 0
62797: ST_TO_ADDR
// end ;
62798: LD_VAR 0 1
62802: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62803: LD_INT 0
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
62809: PPUSH
62810: PPUSH
62811: PPUSH
// result := [ ] ;
62812: LD_ADDR_VAR 0 2
62816: PUSH
62817: EMPTY
62818: ST_TO_ADDR
// if campaign_id = 1 then
62819: LD_OWVAR 69
62823: PUSH
62824: LD_INT 1
62826: EQUAL
62827: IFFALSE 65993
// begin case mission_number of 1 :
62829: LD_OWVAR 70
62833: PUSH
62834: LD_INT 1
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62842
62840: GO 62918
62842: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62843: LD_ADDR_VAR 0 2
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: LD_INT 4
62853: PUSH
62854: LD_INT 11
62856: PUSH
62857: LD_INT 12
62859: PUSH
62860: LD_INT 15
62862: PUSH
62863: LD_INT 16
62865: PUSH
62866: LD_INT 22
62868: PUSH
62869: LD_INT 23
62871: PUSH
62872: LD_INT 26
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 101
62888: PUSH
62889: LD_INT 102
62891: PUSH
62892: LD_INT 106
62894: PUSH
62895: LD_INT 116
62897: PUSH
62898: LD_INT 117
62900: PUSH
62901: LD_INT 118
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: ST_TO_ADDR
62916: GO 65991
62918: LD_INT 2
62920: DOUBLE
62921: EQUAL
62922: IFTRUE 62926
62924: GO 63010
62926: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62927: LD_ADDR_VAR 0 2
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: LD_INT 11
62940: PUSH
62941: LD_INT 12
62943: PUSH
62944: LD_INT 15
62946: PUSH
62947: LD_INT 16
62949: PUSH
62950: LD_INT 22
62952: PUSH
62953: LD_INT 23
62955: PUSH
62956: LD_INT 26
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 101
62972: PUSH
62973: LD_INT 102
62975: PUSH
62976: LD_INT 105
62978: PUSH
62979: LD_INT 106
62981: PUSH
62982: LD_INT 108
62984: PUSH
62985: LD_INT 116
62987: PUSH
62988: LD_INT 117
62990: PUSH
62991: LD_INT 118
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: ST_TO_ADDR
63008: GO 65991
63010: LD_INT 3
63012: DOUBLE
63013: EQUAL
63014: IFTRUE 63018
63016: GO 63106
63018: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63019: LD_ADDR_VAR 0 2
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 4
63029: PUSH
63030: LD_INT 5
63032: PUSH
63033: LD_INT 11
63035: PUSH
63036: LD_INT 12
63038: PUSH
63039: LD_INT 15
63041: PUSH
63042: LD_INT 16
63044: PUSH
63045: LD_INT 22
63047: PUSH
63048: LD_INT 26
63050: PUSH
63051: LD_INT 36
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 101
63068: PUSH
63069: LD_INT 102
63071: PUSH
63072: LD_INT 105
63074: PUSH
63075: LD_INT 106
63077: PUSH
63078: LD_INT 108
63080: PUSH
63081: LD_INT 116
63083: PUSH
63084: LD_INT 117
63086: PUSH
63087: LD_INT 118
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: ST_TO_ADDR
63104: GO 65991
63106: LD_INT 4
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63114
63112: GO 63210
63114: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: LD_INT 5
63128: PUSH
63129: LD_INT 8
63131: PUSH
63132: LD_INT 11
63134: PUSH
63135: LD_INT 12
63137: PUSH
63138: LD_INT 15
63140: PUSH
63141: LD_INT 16
63143: PUSH
63144: LD_INT 22
63146: PUSH
63147: LD_INT 23
63149: PUSH
63150: LD_INT 26
63152: PUSH
63153: LD_INT 36
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 101
63172: PUSH
63173: LD_INT 102
63175: PUSH
63176: LD_INT 105
63178: PUSH
63179: LD_INT 106
63181: PUSH
63182: LD_INT 108
63184: PUSH
63185: LD_INT 116
63187: PUSH
63188: LD_INT 117
63190: PUSH
63191: LD_INT 118
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: ST_TO_ADDR
63208: GO 65991
63210: LD_INT 5
63212: DOUBLE
63213: EQUAL
63214: IFTRUE 63218
63216: GO 63330
63218: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63219: LD_ADDR_VAR 0 2
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: LD_INT 4
63229: PUSH
63230: LD_INT 5
63232: PUSH
63233: LD_INT 6
63235: PUSH
63236: LD_INT 8
63238: PUSH
63239: LD_INT 11
63241: PUSH
63242: LD_INT 12
63244: PUSH
63245: LD_INT 15
63247: PUSH
63248: LD_INT 16
63250: PUSH
63251: LD_INT 22
63253: PUSH
63254: LD_INT 23
63256: PUSH
63257: LD_INT 25
63259: PUSH
63260: LD_INT 26
63262: PUSH
63263: LD_INT 36
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 101
63284: PUSH
63285: LD_INT 102
63287: PUSH
63288: LD_INT 105
63290: PUSH
63291: LD_INT 106
63293: PUSH
63294: LD_INT 108
63296: PUSH
63297: LD_INT 109
63299: PUSH
63300: LD_INT 112
63302: PUSH
63303: LD_INT 116
63305: PUSH
63306: LD_INT 117
63308: PUSH
63309: LD_INT 118
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: ST_TO_ADDR
63328: GO 65991
63330: LD_INT 6
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63338
63336: GO 63470
63338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63339: LD_ADDR_VAR 0 2
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: LD_INT 5
63352: PUSH
63353: LD_INT 6
63355: PUSH
63356: LD_INT 8
63358: PUSH
63359: LD_INT 11
63361: PUSH
63362: LD_INT 12
63364: PUSH
63365: LD_INT 15
63367: PUSH
63368: LD_INT 16
63370: PUSH
63371: LD_INT 20
63373: PUSH
63374: LD_INT 21
63376: PUSH
63377: LD_INT 22
63379: PUSH
63380: LD_INT 23
63382: PUSH
63383: LD_INT 25
63385: PUSH
63386: LD_INT 26
63388: PUSH
63389: LD_INT 30
63391: PUSH
63392: LD_INT 31
63394: PUSH
63395: LD_INT 32
63397: PUSH
63398: LD_INT 36
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 101
63424: PUSH
63425: LD_INT 102
63427: PUSH
63428: LD_INT 105
63430: PUSH
63431: LD_INT 106
63433: PUSH
63434: LD_INT 108
63436: PUSH
63437: LD_INT 109
63439: PUSH
63440: LD_INT 112
63442: PUSH
63443: LD_INT 116
63445: PUSH
63446: LD_INT 117
63448: PUSH
63449: LD_INT 118
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: ST_TO_ADDR
63468: GO 65991
63470: LD_INT 7
63472: DOUBLE
63473: EQUAL
63474: IFTRUE 63478
63476: GO 63590
63478: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63479: LD_ADDR_VAR 0 2
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 4
63489: PUSH
63490: LD_INT 5
63492: PUSH
63493: LD_INT 7
63495: PUSH
63496: LD_INT 11
63498: PUSH
63499: LD_INT 12
63501: PUSH
63502: LD_INT 15
63504: PUSH
63505: LD_INT 16
63507: PUSH
63508: LD_INT 20
63510: PUSH
63511: LD_INT 21
63513: PUSH
63514: LD_INT 22
63516: PUSH
63517: LD_INT 23
63519: PUSH
63520: LD_INT 25
63522: PUSH
63523: LD_INT 26
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 101
63544: PUSH
63545: LD_INT 102
63547: PUSH
63548: LD_INT 103
63550: PUSH
63551: LD_INT 105
63553: PUSH
63554: LD_INT 106
63556: PUSH
63557: LD_INT 108
63559: PUSH
63560: LD_INT 112
63562: PUSH
63563: LD_INT 116
63565: PUSH
63566: LD_INT 117
63568: PUSH
63569: LD_INT 118
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: ST_TO_ADDR
63588: GO 65991
63590: LD_INT 8
63592: DOUBLE
63593: EQUAL
63594: IFTRUE 63598
63596: GO 63738
63598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63599: LD_ADDR_VAR 0 2
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 4
63609: PUSH
63610: LD_INT 5
63612: PUSH
63613: LD_INT 6
63615: PUSH
63616: LD_INT 7
63618: PUSH
63619: LD_INT 8
63621: PUSH
63622: LD_INT 11
63624: PUSH
63625: LD_INT 12
63627: PUSH
63628: LD_INT 15
63630: PUSH
63631: LD_INT 16
63633: PUSH
63634: LD_INT 20
63636: PUSH
63637: LD_INT 21
63639: PUSH
63640: LD_INT 22
63642: PUSH
63643: LD_INT 23
63645: PUSH
63646: LD_INT 25
63648: PUSH
63649: LD_INT 26
63651: PUSH
63652: LD_INT 30
63654: PUSH
63655: LD_INT 31
63657: PUSH
63658: LD_INT 32
63660: PUSH
63661: LD_INT 36
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 101
63688: PUSH
63689: LD_INT 102
63691: PUSH
63692: LD_INT 103
63694: PUSH
63695: LD_INT 105
63697: PUSH
63698: LD_INT 106
63700: PUSH
63701: LD_INT 108
63703: PUSH
63704: LD_INT 109
63706: PUSH
63707: LD_INT 112
63709: PUSH
63710: LD_INT 116
63712: PUSH
63713: LD_INT 117
63715: PUSH
63716: LD_INT 118
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: ST_TO_ADDR
63736: GO 65991
63738: LD_INT 9
63740: DOUBLE
63741: EQUAL
63742: IFTRUE 63746
63744: GO 63894
63746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63747: LD_ADDR_VAR 0 2
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: LD_INT 4
63757: PUSH
63758: LD_INT 5
63760: PUSH
63761: LD_INT 6
63763: PUSH
63764: LD_INT 7
63766: PUSH
63767: LD_INT 8
63769: PUSH
63770: LD_INT 11
63772: PUSH
63773: LD_INT 12
63775: PUSH
63776: LD_INT 15
63778: PUSH
63779: LD_INT 16
63781: PUSH
63782: LD_INT 20
63784: PUSH
63785: LD_INT 21
63787: PUSH
63788: LD_INT 22
63790: PUSH
63791: LD_INT 23
63793: PUSH
63794: LD_INT 25
63796: PUSH
63797: LD_INT 26
63799: PUSH
63800: LD_INT 28
63802: PUSH
63803: LD_INT 30
63805: PUSH
63806: LD_INT 31
63808: PUSH
63809: LD_INT 32
63811: PUSH
63812: LD_INT 36
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 101
63840: PUSH
63841: LD_INT 102
63843: PUSH
63844: LD_INT 103
63846: PUSH
63847: LD_INT 105
63849: PUSH
63850: LD_INT 106
63852: PUSH
63853: LD_INT 108
63855: PUSH
63856: LD_INT 109
63858: PUSH
63859: LD_INT 112
63861: PUSH
63862: LD_INT 114
63864: PUSH
63865: LD_INT 116
63867: PUSH
63868: LD_INT 117
63870: PUSH
63871: LD_INT 118
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: ST_TO_ADDR
63892: GO 65991
63894: LD_INT 10
63896: DOUBLE
63897: EQUAL
63898: IFTRUE 63902
63900: GO 64098
63902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63903: LD_ADDR_VAR 0 2
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 4
63913: PUSH
63914: LD_INT 5
63916: PUSH
63917: LD_INT 6
63919: PUSH
63920: LD_INT 7
63922: PUSH
63923: LD_INT 8
63925: PUSH
63926: LD_INT 9
63928: PUSH
63929: LD_INT 10
63931: PUSH
63932: LD_INT 11
63934: PUSH
63935: LD_INT 12
63937: PUSH
63938: LD_INT 13
63940: PUSH
63941: LD_INT 14
63943: PUSH
63944: LD_INT 15
63946: PUSH
63947: LD_INT 16
63949: PUSH
63950: LD_INT 17
63952: PUSH
63953: LD_INT 18
63955: PUSH
63956: LD_INT 19
63958: PUSH
63959: LD_INT 20
63961: PUSH
63962: LD_INT 21
63964: PUSH
63965: LD_INT 22
63967: PUSH
63968: LD_INT 23
63970: PUSH
63971: LD_INT 24
63973: PUSH
63974: LD_INT 25
63976: PUSH
63977: LD_INT 26
63979: PUSH
63980: LD_INT 28
63982: PUSH
63983: LD_INT 30
63985: PUSH
63986: LD_INT 31
63988: PUSH
63989: LD_INT 32
63991: PUSH
63992: LD_INT 36
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 101
64028: PUSH
64029: LD_INT 102
64031: PUSH
64032: LD_INT 103
64034: PUSH
64035: LD_INT 104
64037: PUSH
64038: LD_INT 105
64040: PUSH
64041: LD_INT 106
64043: PUSH
64044: LD_INT 107
64046: PUSH
64047: LD_INT 108
64049: PUSH
64050: LD_INT 109
64052: PUSH
64053: LD_INT 110
64055: PUSH
64056: LD_INT 111
64058: PUSH
64059: LD_INT 112
64061: PUSH
64062: LD_INT 114
64064: PUSH
64065: LD_INT 116
64067: PUSH
64068: LD_INT 117
64070: PUSH
64071: LD_INT 118
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: ST_TO_ADDR
64096: GO 65991
64098: LD_INT 11
64100: DOUBLE
64101: EQUAL
64102: IFTRUE 64106
64104: GO 64310
64106: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64107: LD_ADDR_VAR 0 2
64111: PUSH
64112: LD_INT 2
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: LD_INT 4
64120: PUSH
64121: LD_INT 5
64123: PUSH
64124: LD_INT 6
64126: PUSH
64127: LD_INT 7
64129: PUSH
64130: LD_INT 8
64132: PUSH
64133: LD_INT 9
64135: PUSH
64136: LD_INT 10
64138: PUSH
64139: LD_INT 11
64141: PUSH
64142: LD_INT 12
64144: PUSH
64145: LD_INT 13
64147: PUSH
64148: LD_INT 14
64150: PUSH
64151: LD_INT 15
64153: PUSH
64154: LD_INT 16
64156: PUSH
64157: LD_INT 17
64159: PUSH
64160: LD_INT 18
64162: PUSH
64163: LD_INT 19
64165: PUSH
64166: LD_INT 20
64168: PUSH
64169: LD_INT 21
64171: PUSH
64172: LD_INT 22
64174: PUSH
64175: LD_INT 23
64177: PUSH
64178: LD_INT 24
64180: PUSH
64181: LD_INT 25
64183: PUSH
64184: LD_INT 26
64186: PUSH
64187: LD_INT 28
64189: PUSH
64190: LD_INT 30
64192: PUSH
64193: LD_INT 31
64195: PUSH
64196: LD_INT 32
64198: PUSH
64199: LD_INT 34
64201: PUSH
64202: LD_INT 36
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 101
64240: PUSH
64241: LD_INT 102
64243: PUSH
64244: LD_INT 103
64246: PUSH
64247: LD_INT 104
64249: PUSH
64250: LD_INT 105
64252: PUSH
64253: LD_INT 106
64255: PUSH
64256: LD_INT 107
64258: PUSH
64259: LD_INT 108
64261: PUSH
64262: LD_INT 109
64264: PUSH
64265: LD_INT 110
64267: PUSH
64268: LD_INT 111
64270: PUSH
64271: LD_INT 112
64273: PUSH
64274: LD_INT 114
64276: PUSH
64277: LD_INT 116
64279: PUSH
64280: LD_INT 117
64282: PUSH
64283: LD_INT 118
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: ST_TO_ADDR
64308: GO 65991
64310: LD_INT 12
64312: DOUBLE
64313: EQUAL
64314: IFTRUE 64318
64316: GO 64538
64318: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64319: LD_ADDR_VAR 0 2
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: LD_INT 4
64335: PUSH
64336: LD_INT 5
64338: PUSH
64339: LD_INT 6
64341: PUSH
64342: LD_INT 7
64344: PUSH
64345: LD_INT 8
64347: PUSH
64348: LD_INT 9
64350: PUSH
64351: LD_INT 10
64353: PUSH
64354: LD_INT 11
64356: PUSH
64357: LD_INT 12
64359: PUSH
64360: LD_INT 13
64362: PUSH
64363: LD_INT 14
64365: PUSH
64366: LD_INT 15
64368: PUSH
64369: LD_INT 16
64371: PUSH
64372: LD_INT 17
64374: PUSH
64375: LD_INT 18
64377: PUSH
64378: LD_INT 19
64380: PUSH
64381: LD_INT 20
64383: PUSH
64384: LD_INT 21
64386: PUSH
64387: LD_INT 22
64389: PUSH
64390: LD_INT 23
64392: PUSH
64393: LD_INT 24
64395: PUSH
64396: LD_INT 25
64398: PUSH
64399: LD_INT 26
64401: PUSH
64402: LD_INT 27
64404: PUSH
64405: LD_INT 28
64407: PUSH
64408: LD_INT 30
64410: PUSH
64411: LD_INT 31
64413: PUSH
64414: LD_INT 32
64416: PUSH
64417: LD_INT 33
64419: PUSH
64420: LD_INT 34
64422: PUSH
64423: LD_INT 36
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 101
64464: PUSH
64465: LD_INT 102
64467: PUSH
64468: LD_INT 103
64470: PUSH
64471: LD_INT 104
64473: PUSH
64474: LD_INT 105
64476: PUSH
64477: LD_INT 106
64479: PUSH
64480: LD_INT 107
64482: PUSH
64483: LD_INT 108
64485: PUSH
64486: LD_INT 109
64488: PUSH
64489: LD_INT 110
64491: PUSH
64492: LD_INT 111
64494: PUSH
64495: LD_INT 112
64497: PUSH
64498: LD_INT 113
64500: PUSH
64501: LD_INT 114
64503: PUSH
64504: LD_INT 116
64506: PUSH
64507: LD_INT 117
64509: PUSH
64510: LD_INT 118
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: ST_TO_ADDR
64536: GO 65991
64538: LD_INT 13
64540: DOUBLE
64541: EQUAL
64542: IFTRUE 64546
64544: GO 64754
64546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64547: LD_ADDR_VAR 0 2
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: LD_INT 5
64566: PUSH
64567: LD_INT 8
64569: PUSH
64570: LD_INT 9
64572: PUSH
64573: LD_INT 10
64575: PUSH
64576: LD_INT 11
64578: PUSH
64579: LD_INT 12
64581: PUSH
64582: LD_INT 14
64584: PUSH
64585: LD_INT 15
64587: PUSH
64588: LD_INT 16
64590: PUSH
64591: LD_INT 17
64593: PUSH
64594: LD_INT 18
64596: PUSH
64597: LD_INT 19
64599: PUSH
64600: LD_INT 20
64602: PUSH
64603: LD_INT 21
64605: PUSH
64606: LD_INT 22
64608: PUSH
64609: LD_INT 23
64611: PUSH
64612: LD_INT 24
64614: PUSH
64615: LD_INT 25
64617: PUSH
64618: LD_INT 26
64620: PUSH
64621: LD_INT 27
64623: PUSH
64624: LD_INT 28
64626: PUSH
64627: LD_INT 30
64629: PUSH
64630: LD_INT 31
64632: PUSH
64633: LD_INT 32
64635: PUSH
64636: LD_INT 33
64638: PUSH
64639: LD_INT 34
64641: PUSH
64642: LD_INT 36
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 101
64680: PUSH
64681: LD_INT 102
64683: PUSH
64684: LD_INT 103
64686: PUSH
64687: LD_INT 104
64689: PUSH
64690: LD_INT 105
64692: PUSH
64693: LD_INT 106
64695: PUSH
64696: LD_INT 107
64698: PUSH
64699: LD_INT 108
64701: PUSH
64702: LD_INT 109
64704: PUSH
64705: LD_INT 110
64707: PUSH
64708: LD_INT 111
64710: PUSH
64711: LD_INT 112
64713: PUSH
64714: LD_INT 113
64716: PUSH
64717: LD_INT 114
64719: PUSH
64720: LD_INT 116
64722: PUSH
64723: LD_INT 117
64725: PUSH
64726: LD_INT 118
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: ST_TO_ADDR
64752: GO 65991
64754: LD_INT 14
64756: DOUBLE
64757: EQUAL
64758: IFTRUE 64762
64760: GO 64986
64762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64763: LD_ADDR_VAR 0 2
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 2
64773: PUSH
64774: LD_INT 3
64776: PUSH
64777: LD_INT 4
64779: PUSH
64780: LD_INT 5
64782: PUSH
64783: LD_INT 6
64785: PUSH
64786: LD_INT 7
64788: PUSH
64789: LD_INT 8
64791: PUSH
64792: LD_INT 9
64794: PUSH
64795: LD_INT 10
64797: PUSH
64798: LD_INT 11
64800: PUSH
64801: LD_INT 12
64803: PUSH
64804: LD_INT 13
64806: PUSH
64807: LD_INT 14
64809: PUSH
64810: LD_INT 15
64812: PUSH
64813: LD_INT 16
64815: PUSH
64816: LD_INT 17
64818: PUSH
64819: LD_INT 18
64821: PUSH
64822: LD_INT 19
64824: PUSH
64825: LD_INT 20
64827: PUSH
64828: LD_INT 21
64830: PUSH
64831: LD_INT 22
64833: PUSH
64834: LD_INT 23
64836: PUSH
64837: LD_INT 24
64839: PUSH
64840: LD_INT 25
64842: PUSH
64843: LD_INT 26
64845: PUSH
64846: LD_INT 27
64848: PUSH
64849: LD_INT 28
64851: PUSH
64852: LD_INT 29
64854: PUSH
64855: LD_INT 30
64857: PUSH
64858: LD_INT 31
64860: PUSH
64861: LD_INT 32
64863: PUSH
64864: LD_INT 33
64866: PUSH
64867: LD_INT 34
64869: PUSH
64870: LD_INT 36
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 101
64912: PUSH
64913: LD_INT 102
64915: PUSH
64916: LD_INT 103
64918: PUSH
64919: LD_INT 104
64921: PUSH
64922: LD_INT 105
64924: PUSH
64925: LD_INT 106
64927: PUSH
64928: LD_INT 107
64930: PUSH
64931: LD_INT 108
64933: PUSH
64934: LD_INT 109
64936: PUSH
64937: LD_INT 110
64939: PUSH
64940: LD_INT 111
64942: PUSH
64943: LD_INT 112
64945: PUSH
64946: LD_INT 113
64948: PUSH
64949: LD_INT 114
64951: PUSH
64952: LD_INT 116
64954: PUSH
64955: LD_INT 117
64957: PUSH
64958: LD_INT 118
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: ST_TO_ADDR
64984: GO 65991
64986: LD_INT 15
64988: DOUBLE
64989: EQUAL
64990: IFTRUE 64994
64992: GO 65218
64994: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64995: LD_ADDR_VAR 0 2
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: LD_INT 4
65011: PUSH
65012: LD_INT 5
65014: PUSH
65015: LD_INT 6
65017: PUSH
65018: LD_INT 7
65020: PUSH
65021: LD_INT 8
65023: PUSH
65024: LD_INT 9
65026: PUSH
65027: LD_INT 10
65029: PUSH
65030: LD_INT 11
65032: PUSH
65033: LD_INT 12
65035: PUSH
65036: LD_INT 13
65038: PUSH
65039: LD_INT 14
65041: PUSH
65042: LD_INT 15
65044: PUSH
65045: LD_INT 16
65047: PUSH
65048: LD_INT 17
65050: PUSH
65051: LD_INT 18
65053: PUSH
65054: LD_INT 19
65056: PUSH
65057: LD_INT 20
65059: PUSH
65060: LD_INT 21
65062: PUSH
65063: LD_INT 22
65065: PUSH
65066: LD_INT 23
65068: PUSH
65069: LD_INT 24
65071: PUSH
65072: LD_INT 25
65074: PUSH
65075: LD_INT 26
65077: PUSH
65078: LD_INT 27
65080: PUSH
65081: LD_INT 28
65083: PUSH
65084: LD_INT 29
65086: PUSH
65087: LD_INT 30
65089: PUSH
65090: LD_INT 31
65092: PUSH
65093: LD_INT 32
65095: PUSH
65096: LD_INT 33
65098: PUSH
65099: LD_INT 34
65101: PUSH
65102: LD_INT 36
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 101
65144: PUSH
65145: LD_INT 102
65147: PUSH
65148: LD_INT 103
65150: PUSH
65151: LD_INT 104
65153: PUSH
65154: LD_INT 105
65156: PUSH
65157: LD_INT 106
65159: PUSH
65160: LD_INT 107
65162: PUSH
65163: LD_INT 108
65165: PUSH
65166: LD_INT 109
65168: PUSH
65169: LD_INT 110
65171: PUSH
65172: LD_INT 111
65174: PUSH
65175: LD_INT 112
65177: PUSH
65178: LD_INT 113
65180: PUSH
65181: LD_INT 114
65183: PUSH
65184: LD_INT 116
65186: PUSH
65187: LD_INT 117
65189: PUSH
65190: LD_INT 118
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: ST_TO_ADDR
65216: GO 65991
65218: LD_INT 16
65220: DOUBLE
65221: EQUAL
65222: IFTRUE 65226
65224: GO 65362
65226: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65227: LD_ADDR_VAR 0 2
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: LD_INT 4
65237: PUSH
65238: LD_INT 5
65240: PUSH
65241: LD_INT 7
65243: PUSH
65244: LD_INT 11
65246: PUSH
65247: LD_INT 12
65249: PUSH
65250: LD_INT 15
65252: PUSH
65253: LD_INT 16
65255: PUSH
65256: LD_INT 20
65258: PUSH
65259: LD_INT 21
65261: PUSH
65262: LD_INT 22
65264: PUSH
65265: LD_INT 23
65267: PUSH
65268: LD_INT 25
65270: PUSH
65271: LD_INT 26
65273: PUSH
65274: LD_INT 30
65276: PUSH
65277: LD_INT 31
65279: PUSH
65280: LD_INT 32
65282: PUSH
65283: LD_INT 33
65285: PUSH
65286: LD_INT 34
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 101
65312: PUSH
65313: LD_INT 102
65315: PUSH
65316: LD_INT 103
65318: PUSH
65319: LD_INT 106
65321: PUSH
65322: LD_INT 108
65324: PUSH
65325: LD_INT 112
65327: PUSH
65328: LD_INT 113
65330: PUSH
65331: LD_INT 114
65333: PUSH
65334: LD_INT 116
65336: PUSH
65337: LD_INT 117
65339: PUSH
65340: LD_INT 118
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: ST_TO_ADDR
65360: GO 65991
65362: LD_INT 17
65364: DOUBLE
65365: EQUAL
65366: IFTRUE 65370
65368: GO 65594
65370: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65371: LD_ADDR_VAR 0 2
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: LD_INT 4
65387: PUSH
65388: LD_INT 5
65390: PUSH
65391: LD_INT 6
65393: PUSH
65394: LD_INT 7
65396: PUSH
65397: LD_INT 8
65399: PUSH
65400: LD_INT 9
65402: PUSH
65403: LD_INT 10
65405: PUSH
65406: LD_INT 11
65408: PUSH
65409: LD_INT 12
65411: PUSH
65412: LD_INT 13
65414: PUSH
65415: LD_INT 14
65417: PUSH
65418: LD_INT 15
65420: PUSH
65421: LD_INT 16
65423: PUSH
65424: LD_INT 17
65426: PUSH
65427: LD_INT 18
65429: PUSH
65430: LD_INT 19
65432: PUSH
65433: LD_INT 20
65435: PUSH
65436: LD_INT 21
65438: PUSH
65439: LD_INT 22
65441: PUSH
65442: LD_INT 23
65444: PUSH
65445: LD_INT 24
65447: PUSH
65448: LD_INT 25
65450: PUSH
65451: LD_INT 26
65453: PUSH
65454: LD_INT 27
65456: PUSH
65457: LD_INT 28
65459: PUSH
65460: LD_INT 29
65462: PUSH
65463: LD_INT 30
65465: PUSH
65466: LD_INT 31
65468: PUSH
65469: LD_INT 32
65471: PUSH
65472: LD_INT 33
65474: PUSH
65475: LD_INT 34
65477: PUSH
65478: LD_INT 36
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 101
65520: PUSH
65521: LD_INT 102
65523: PUSH
65524: LD_INT 103
65526: PUSH
65527: LD_INT 104
65529: PUSH
65530: LD_INT 105
65532: PUSH
65533: LD_INT 106
65535: PUSH
65536: LD_INT 107
65538: PUSH
65539: LD_INT 108
65541: PUSH
65542: LD_INT 109
65544: PUSH
65545: LD_INT 110
65547: PUSH
65548: LD_INT 111
65550: PUSH
65551: LD_INT 112
65553: PUSH
65554: LD_INT 113
65556: PUSH
65557: LD_INT 114
65559: PUSH
65560: LD_INT 116
65562: PUSH
65563: LD_INT 117
65565: PUSH
65566: LD_INT 118
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: ST_TO_ADDR
65592: GO 65991
65594: LD_INT 18
65596: DOUBLE
65597: EQUAL
65598: IFTRUE 65602
65600: GO 65750
65602: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65603: LD_ADDR_VAR 0 2
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: LD_INT 4
65613: PUSH
65614: LD_INT 5
65616: PUSH
65617: LD_INT 7
65619: PUSH
65620: LD_INT 11
65622: PUSH
65623: LD_INT 12
65625: PUSH
65626: LD_INT 15
65628: PUSH
65629: LD_INT 16
65631: PUSH
65632: LD_INT 20
65634: PUSH
65635: LD_INT 21
65637: PUSH
65638: LD_INT 22
65640: PUSH
65641: LD_INT 23
65643: PUSH
65644: LD_INT 25
65646: PUSH
65647: LD_INT 26
65649: PUSH
65650: LD_INT 30
65652: PUSH
65653: LD_INT 31
65655: PUSH
65656: LD_INT 32
65658: PUSH
65659: LD_INT 33
65661: PUSH
65662: LD_INT 34
65664: PUSH
65665: LD_INT 35
65667: PUSH
65668: LD_INT 36
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 101
65696: PUSH
65697: LD_INT 102
65699: PUSH
65700: LD_INT 103
65702: PUSH
65703: LD_INT 106
65705: PUSH
65706: LD_INT 108
65708: PUSH
65709: LD_INT 112
65711: PUSH
65712: LD_INT 113
65714: PUSH
65715: LD_INT 114
65717: PUSH
65718: LD_INT 115
65720: PUSH
65721: LD_INT 116
65723: PUSH
65724: LD_INT 117
65726: PUSH
65727: LD_INT 118
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: ST_TO_ADDR
65748: GO 65991
65750: LD_INT 19
65752: DOUBLE
65753: EQUAL
65754: IFTRUE 65758
65756: GO 65990
65758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65759: LD_ADDR_VAR 0 2
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: LD_INT 5
65778: PUSH
65779: LD_INT 6
65781: PUSH
65782: LD_INT 7
65784: PUSH
65785: LD_INT 8
65787: PUSH
65788: LD_INT 9
65790: PUSH
65791: LD_INT 10
65793: PUSH
65794: LD_INT 11
65796: PUSH
65797: LD_INT 12
65799: PUSH
65800: LD_INT 13
65802: PUSH
65803: LD_INT 14
65805: PUSH
65806: LD_INT 15
65808: PUSH
65809: LD_INT 16
65811: PUSH
65812: LD_INT 17
65814: PUSH
65815: LD_INT 18
65817: PUSH
65818: LD_INT 19
65820: PUSH
65821: LD_INT 20
65823: PUSH
65824: LD_INT 21
65826: PUSH
65827: LD_INT 22
65829: PUSH
65830: LD_INT 23
65832: PUSH
65833: LD_INT 24
65835: PUSH
65836: LD_INT 25
65838: PUSH
65839: LD_INT 26
65841: PUSH
65842: LD_INT 27
65844: PUSH
65845: LD_INT 28
65847: PUSH
65848: LD_INT 29
65850: PUSH
65851: LD_INT 30
65853: PUSH
65854: LD_INT 31
65856: PUSH
65857: LD_INT 32
65859: PUSH
65860: LD_INT 33
65862: PUSH
65863: LD_INT 34
65865: PUSH
65866: LD_INT 35
65868: PUSH
65869: LD_INT 36
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 101
65912: PUSH
65913: LD_INT 102
65915: PUSH
65916: LD_INT 103
65918: PUSH
65919: LD_INT 104
65921: PUSH
65922: LD_INT 105
65924: PUSH
65925: LD_INT 106
65927: PUSH
65928: LD_INT 107
65930: PUSH
65931: LD_INT 108
65933: PUSH
65934: LD_INT 109
65936: PUSH
65937: LD_INT 110
65939: PUSH
65940: LD_INT 111
65942: PUSH
65943: LD_INT 112
65945: PUSH
65946: LD_INT 113
65948: PUSH
65949: LD_INT 114
65951: PUSH
65952: LD_INT 115
65954: PUSH
65955: LD_INT 116
65957: PUSH
65958: LD_INT 117
65960: PUSH
65961: LD_INT 118
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: ST_TO_ADDR
65988: GO 65991
65990: POP
// end else
65991: GO 66222
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65993: LD_ADDR_VAR 0 2
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: LD_INT 4
66009: PUSH
66010: LD_INT 5
66012: PUSH
66013: LD_INT 6
66015: PUSH
66016: LD_INT 7
66018: PUSH
66019: LD_INT 8
66021: PUSH
66022: LD_INT 9
66024: PUSH
66025: LD_INT 10
66027: PUSH
66028: LD_INT 11
66030: PUSH
66031: LD_INT 12
66033: PUSH
66034: LD_INT 13
66036: PUSH
66037: LD_INT 14
66039: PUSH
66040: LD_INT 15
66042: PUSH
66043: LD_INT 16
66045: PUSH
66046: LD_INT 17
66048: PUSH
66049: LD_INT 18
66051: PUSH
66052: LD_INT 19
66054: PUSH
66055: LD_INT 20
66057: PUSH
66058: LD_INT 21
66060: PUSH
66061: LD_INT 22
66063: PUSH
66064: LD_INT 23
66066: PUSH
66067: LD_INT 24
66069: PUSH
66070: LD_INT 25
66072: PUSH
66073: LD_INT 26
66075: PUSH
66076: LD_INT 27
66078: PUSH
66079: LD_INT 28
66081: PUSH
66082: LD_INT 29
66084: PUSH
66085: LD_INT 30
66087: PUSH
66088: LD_INT 31
66090: PUSH
66091: LD_INT 32
66093: PUSH
66094: LD_INT 33
66096: PUSH
66097: LD_INT 34
66099: PUSH
66100: LD_INT 35
66102: PUSH
66103: LD_INT 36
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 101
66146: PUSH
66147: LD_INT 102
66149: PUSH
66150: LD_INT 103
66152: PUSH
66153: LD_INT 104
66155: PUSH
66156: LD_INT 105
66158: PUSH
66159: LD_INT 106
66161: PUSH
66162: LD_INT 107
66164: PUSH
66165: LD_INT 108
66167: PUSH
66168: LD_INT 109
66170: PUSH
66171: LD_INT 110
66173: PUSH
66174: LD_INT 111
66176: PUSH
66177: LD_INT 112
66179: PUSH
66180: LD_INT 113
66182: PUSH
66183: LD_INT 114
66185: PUSH
66186: LD_INT 115
66188: PUSH
66189: LD_INT 116
66191: PUSH
66192: LD_INT 117
66194: PUSH
66195: LD_INT 118
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: ST_TO_ADDR
// if result then
66222: LD_VAR 0 2
66226: IFFALSE 67012
// begin normal :=  ;
66228: LD_ADDR_VAR 0 5
66232: PUSH
66233: LD_STRING 
66235: ST_TO_ADDR
// hardcore :=  ;
66236: LD_ADDR_VAR 0 6
66240: PUSH
66241: LD_STRING 
66243: ST_TO_ADDR
// active :=  ;
66244: LD_ADDR_VAR 0 7
66248: PUSH
66249: LD_STRING 
66251: ST_TO_ADDR
// for i = 1 to normalCounter do
66252: LD_ADDR_VAR 0 8
66256: PUSH
66257: DOUBLE
66258: LD_INT 1
66260: DEC
66261: ST_TO_ADDR
66262: LD_EXP 44
66266: PUSH
66267: FOR_TO
66268: IFFALSE 66369
// begin tmp := 0 ;
66270: LD_ADDR_VAR 0 3
66274: PUSH
66275: LD_STRING 0
66277: ST_TO_ADDR
// if result [ 1 ] then
66278: LD_VAR 0 2
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: IFFALSE 66351
// if result [ 1 ] [ 1 ] = i then
66288: LD_VAR 0 2
66292: PUSH
66293: LD_INT 1
66295: ARRAY
66296: PUSH
66297: LD_INT 1
66299: ARRAY
66300: PUSH
66301: LD_VAR 0 8
66305: EQUAL
66306: IFFALSE 66351
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66308: LD_ADDR_VAR 0 2
66312: PUSH
66313: LD_VAR 0 2
66317: PPUSH
66318: LD_INT 1
66320: PPUSH
66321: LD_VAR 0 2
66325: PUSH
66326: LD_INT 1
66328: ARRAY
66329: PPUSH
66330: LD_INT 1
66332: PPUSH
66333: CALL_OW 3
66337: PPUSH
66338: CALL_OW 1
66342: ST_TO_ADDR
// tmp := 1 ;
66343: LD_ADDR_VAR 0 3
66347: PUSH
66348: LD_STRING 1
66350: ST_TO_ADDR
// end ; normal := normal & tmp ;
66351: LD_ADDR_VAR 0 5
66355: PUSH
66356: LD_VAR 0 5
66360: PUSH
66361: LD_VAR 0 3
66365: STR
66366: ST_TO_ADDR
// end ;
66367: GO 66267
66369: POP
66370: POP
// for i = 1 to hardcoreCounter do
66371: LD_ADDR_VAR 0 8
66375: PUSH
66376: DOUBLE
66377: LD_INT 1
66379: DEC
66380: ST_TO_ADDR
66381: LD_EXP 45
66385: PUSH
66386: FOR_TO
66387: IFFALSE 66492
// begin tmp := 0 ;
66389: LD_ADDR_VAR 0 3
66393: PUSH
66394: LD_STRING 0
66396: ST_TO_ADDR
// if result [ 2 ] then
66397: LD_VAR 0 2
66401: PUSH
66402: LD_INT 2
66404: ARRAY
66405: IFFALSE 66474
// if result [ 2 ] [ 1 ] = 100 + i then
66407: LD_VAR 0 2
66411: PUSH
66412: LD_INT 2
66414: ARRAY
66415: PUSH
66416: LD_INT 1
66418: ARRAY
66419: PUSH
66420: LD_INT 100
66422: PUSH
66423: LD_VAR 0 8
66427: PLUS
66428: EQUAL
66429: IFFALSE 66474
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66431: LD_ADDR_VAR 0 2
66435: PUSH
66436: LD_VAR 0 2
66440: PPUSH
66441: LD_INT 2
66443: PPUSH
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 2
66451: ARRAY
66452: PPUSH
66453: LD_INT 1
66455: PPUSH
66456: CALL_OW 3
66460: PPUSH
66461: CALL_OW 1
66465: ST_TO_ADDR
// tmp := 1 ;
66466: LD_ADDR_VAR 0 3
66470: PUSH
66471: LD_STRING 1
66473: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66474: LD_ADDR_VAR 0 6
66478: PUSH
66479: LD_VAR 0 6
66483: PUSH
66484: LD_VAR 0 3
66488: STR
66489: ST_TO_ADDR
// end ;
66490: GO 66386
66492: POP
66493: POP
// if isGameLoad then
66494: LD_VAR 0 1
66498: IFFALSE 66973
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66500: LD_ADDR_VAR 0 4
66504: PUSH
66505: LD_EXP 48
66509: PUSH
66510: LD_EXP 47
66514: PUSH
66515: LD_EXP 49
66519: PUSH
66520: LD_EXP 46
66524: PUSH
66525: LD_EXP 50
66529: PUSH
66530: LD_EXP 51
66534: PUSH
66535: LD_EXP 52
66539: PUSH
66540: LD_EXP 53
66544: PUSH
66545: LD_EXP 54
66549: PUSH
66550: LD_EXP 55
66554: PUSH
66555: LD_EXP 56
66559: PUSH
66560: LD_EXP 57
66564: PUSH
66565: LD_EXP 58
66569: PUSH
66570: LD_EXP 59
66574: PUSH
66575: LD_EXP 67
66579: PUSH
66580: LD_EXP 68
66584: PUSH
66585: LD_EXP 69
66589: PUSH
66590: LD_EXP 70
66594: PUSH
66595: LD_EXP 72
66599: PUSH
66600: LD_EXP 73
66604: PUSH
66605: LD_EXP 74
66609: PUSH
66610: LD_EXP 77
66614: PUSH
66615: LD_EXP 79
66619: PUSH
66620: LD_EXP 80
66624: PUSH
66625: LD_EXP 81
66629: PUSH
66630: LD_EXP 83
66634: PUSH
66635: LD_EXP 84
66639: PUSH
66640: LD_EXP 87
66644: PUSH
66645: LD_EXP 88
66649: PUSH
66650: LD_EXP 89
66654: PUSH
66655: LD_EXP 90
66659: PUSH
66660: LD_EXP 91
66664: PUSH
66665: LD_EXP 92
66669: PUSH
66670: LD_EXP 93
66674: PUSH
66675: LD_EXP 94
66679: PUSH
66680: LD_EXP 95
66684: PUSH
66685: LD_EXP 60
66689: PUSH
66690: LD_EXP 61
66694: PUSH
66695: LD_EXP 64
66699: PUSH
66700: LD_EXP 65
66704: PUSH
66705: LD_EXP 66
66709: PUSH
66710: LD_EXP 62
66714: PUSH
66715: LD_EXP 63
66719: PUSH
66720: LD_EXP 71
66724: PUSH
66725: LD_EXP 75
66729: PUSH
66730: LD_EXP 76
66734: PUSH
66735: LD_EXP 78
66739: PUSH
66740: LD_EXP 82
66744: PUSH
66745: LD_EXP 85
66749: PUSH
66750: LD_EXP 86
66754: PUSH
66755: LD_EXP 96
66759: PUSH
66760: LD_EXP 97
66764: PUSH
66765: LD_EXP 98
66769: PUSH
66770: LD_EXP 99
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// tmp :=  ;
66831: LD_ADDR_VAR 0 3
66835: PUSH
66836: LD_STRING 
66838: ST_TO_ADDR
// for i = 1 to normalCounter do
66839: LD_ADDR_VAR 0 8
66843: PUSH
66844: DOUBLE
66845: LD_INT 1
66847: DEC
66848: ST_TO_ADDR
66849: LD_EXP 44
66853: PUSH
66854: FOR_TO
66855: IFFALSE 66891
// begin if flags [ i ] then
66857: LD_VAR 0 4
66861: PUSH
66862: LD_VAR 0 8
66866: ARRAY
66867: IFFALSE 66889
// tmp := tmp & i & ; ;
66869: LD_ADDR_VAR 0 3
66873: PUSH
66874: LD_VAR 0 3
66878: PUSH
66879: LD_VAR 0 8
66883: STR
66884: PUSH
66885: LD_STRING ;
66887: STR
66888: ST_TO_ADDR
// end ;
66889: GO 66854
66891: POP
66892: POP
// for i = 1 to hardcoreCounter do
66893: LD_ADDR_VAR 0 8
66897: PUSH
66898: DOUBLE
66899: LD_INT 1
66901: DEC
66902: ST_TO_ADDR
66903: LD_EXP 45
66907: PUSH
66908: FOR_TO
66909: IFFALSE 66955
// begin if flags [ normalCounter + i ] then
66911: LD_VAR 0 4
66915: PUSH
66916: LD_EXP 44
66920: PUSH
66921: LD_VAR 0 8
66925: PLUS
66926: ARRAY
66927: IFFALSE 66953
// tmp := tmp & ( 100 + i ) & ; ;
66929: LD_ADDR_VAR 0 3
66933: PUSH
66934: LD_VAR 0 3
66938: PUSH
66939: LD_INT 100
66941: PUSH
66942: LD_VAR 0 8
66946: PLUS
66947: STR
66948: PUSH
66949: LD_STRING ;
66951: STR
66952: ST_TO_ADDR
// end ;
66953: GO 66908
66955: POP
66956: POP
// if tmp then
66957: LD_VAR 0 3
66961: IFFALSE 66973
// active := tmp ;
66963: LD_ADDR_VAR 0 7
66967: PUSH
66968: LD_VAR 0 3
66972: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66973: LD_STRING getStreamItemsFromMission("
66975: PUSH
66976: LD_VAR 0 5
66980: STR
66981: PUSH
66982: LD_STRING ","
66984: STR
66985: PUSH
66986: LD_VAR 0 6
66990: STR
66991: PUSH
66992: LD_STRING ","
66994: STR
66995: PUSH
66996: LD_VAR 0 7
67000: STR
67001: PUSH
67002: LD_STRING ")
67004: STR
67005: PPUSH
67006: CALL_OW 559
// end else
67010: GO 67019
// ToLua ( getStreamItemsFromMission("","","") ) ;
67012: LD_STRING getStreamItemsFromMission("","","")
67014: PPUSH
67015: CALL_OW 559
// end ;
67019: LD_VAR 0 2
67023: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67024: LD_EXP 43
67028: PUSH
67029: LD_EXP 48
67033: AND
67034: IFFALSE 67158
67036: GO 67038
67038: DISABLE
67039: LD_INT 0
67041: PPUSH
67042: PPUSH
// begin enable ;
67043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67044: LD_ADDR_VAR 0 2
67048: PUSH
67049: LD_INT 22
67051: PUSH
67052: LD_OWVAR 2
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: LD_INT 34
67066: PUSH
67067: LD_INT 7
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 34
67076: PUSH
67077: LD_INT 45
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 34
67086: PUSH
67087: LD_INT 28
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 34
67096: PUSH
67097: LD_INT 47
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PPUSH
67115: CALL_OW 69
67119: ST_TO_ADDR
// if not tmp then
67120: LD_VAR 0 2
67124: NOT
67125: IFFALSE 67129
// exit ;
67127: GO 67158
// for i in tmp do
67129: LD_ADDR_VAR 0 1
67133: PUSH
67134: LD_VAR 0 2
67138: PUSH
67139: FOR_IN
67140: IFFALSE 67156
// begin SetLives ( i , 0 ) ;
67142: LD_VAR 0 1
67146: PPUSH
67147: LD_INT 0
67149: PPUSH
67150: CALL_OW 234
// end ;
67154: GO 67139
67156: POP
67157: POP
// end ;
67158: PPOPN 2
67160: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67161: LD_EXP 43
67165: PUSH
67166: LD_EXP 49
67170: AND
67171: IFFALSE 67255
67173: GO 67175
67175: DISABLE
67176: LD_INT 0
67178: PPUSH
67179: PPUSH
// begin enable ;
67180: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67181: LD_ADDR_VAR 0 2
67185: PUSH
67186: LD_INT 22
67188: PUSH
67189: LD_OWVAR 2
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 32
67200: PUSH
67201: LD_INT 3
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PPUSH
67212: CALL_OW 69
67216: ST_TO_ADDR
// if not tmp then
67217: LD_VAR 0 2
67221: NOT
67222: IFFALSE 67226
// exit ;
67224: GO 67255
// for i in tmp do
67226: LD_ADDR_VAR 0 1
67230: PUSH
67231: LD_VAR 0 2
67235: PUSH
67236: FOR_IN
67237: IFFALSE 67253
// begin SetLives ( i , 0 ) ;
67239: LD_VAR 0 1
67243: PPUSH
67244: LD_INT 0
67246: PPUSH
67247: CALL_OW 234
// end ;
67251: GO 67236
67253: POP
67254: POP
// end ;
67255: PPOPN 2
67257: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67258: LD_EXP 43
67262: PUSH
67263: LD_EXP 46
67267: AND
67268: IFFALSE 67361
67270: GO 67272
67272: DISABLE
67273: LD_INT 0
67275: PPUSH
// begin enable ;
67276: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67277: LD_ADDR_VAR 0 1
67281: PUSH
67282: LD_INT 22
67284: PUSH
67285: LD_OWVAR 2
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: PUSH
67297: LD_INT 25
67299: PUSH
67300: LD_INT 5
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 25
67309: PUSH
67310: LD_INT 9
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 25
67319: PUSH
67320: LD_INT 8
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PPUSH
67337: CALL_OW 69
67341: PUSH
67342: FOR_IN
67343: IFFALSE 67359
// begin SetClass ( i , 1 ) ;
67345: LD_VAR 0 1
67349: PPUSH
67350: LD_INT 1
67352: PPUSH
67353: CALL_OW 336
// end ;
67357: GO 67342
67359: POP
67360: POP
// end ;
67361: PPOPN 1
67363: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67364: LD_EXP 43
67368: PUSH
67369: LD_EXP 47
67373: AND
67374: PUSH
67375: LD_OWVAR 65
67379: PUSH
67380: LD_INT 7
67382: LESS
67383: AND
67384: IFFALSE 67398
67386: GO 67388
67388: DISABLE
// begin enable ;
67389: ENABLE
// game_speed := 7 ;
67390: LD_ADDR_OWVAR 65
67394: PUSH
67395: LD_INT 7
67397: ST_TO_ADDR
// end ;
67398: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67399: LD_EXP 43
67403: PUSH
67404: LD_EXP 50
67408: AND
67409: IFFALSE 67611
67411: GO 67413
67413: DISABLE
67414: LD_INT 0
67416: PPUSH
67417: PPUSH
67418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67419: LD_ADDR_VAR 0 3
67423: PUSH
67424: LD_INT 81
67426: PUSH
67427: LD_OWVAR 2
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 21
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PPUSH
67450: CALL_OW 69
67454: ST_TO_ADDR
// if not tmp then
67455: LD_VAR 0 3
67459: NOT
67460: IFFALSE 67464
// exit ;
67462: GO 67611
// if tmp > 5 then
67464: LD_VAR 0 3
67468: PUSH
67469: LD_INT 5
67471: GREATER
67472: IFFALSE 67484
// k := 5 else
67474: LD_ADDR_VAR 0 2
67478: PUSH
67479: LD_INT 5
67481: ST_TO_ADDR
67482: GO 67494
// k := tmp ;
67484: LD_ADDR_VAR 0 2
67488: PUSH
67489: LD_VAR 0 3
67493: ST_TO_ADDR
// for i := 1 to k do
67494: LD_ADDR_VAR 0 1
67498: PUSH
67499: DOUBLE
67500: LD_INT 1
67502: DEC
67503: ST_TO_ADDR
67504: LD_VAR 0 2
67508: PUSH
67509: FOR_TO
67510: IFFALSE 67609
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67512: LD_VAR 0 3
67516: PUSH
67517: LD_VAR 0 1
67521: ARRAY
67522: PPUSH
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 4
67530: MOD
67531: PUSH
67532: LD_INT 1
67534: PLUS
67535: PPUSH
67536: CALL_OW 259
67540: PUSH
67541: LD_INT 10
67543: LESS
67544: IFFALSE 67607
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67546: LD_VAR 0 3
67550: PUSH
67551: LD_VAR 0 1
67555: ARRAY
67556: PPUSH
67557: LD_VAR 0 1
67561: PUSH
67562: LD_INT 4
67564: MOD
67565: PUSH
67566: LD_INT 1
67568: PLUS
67569: PPUSH
67570: LD_VAR 0 3
67574: PUSH
67575: LD_VAR 0 1
67579: ARRAY
67580: PPUSH
67581: LD_VAR 0 1
67585: PUSH
67586: LD_INT 4
67588: MOD
67589: PUSH
67590: LD_INT 1
67592: PLUS
67593: PPUSH
67594: CALL_OW 259
67598: PUSH
67599: LD_INT 1
67601: PLUS
67602: PPUSH
67603: CALL_OW 237
67607: GO 67509
67609: POP
67610: POP
// end ;
67611: PPOPN 3
67613: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67614: LD_EXP 43
67618: PUSH
67619: LD_EXP 51
67623: AND
67624: IFFALSE 67644
67626: GO 67628
67628: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67629: LD_INT 4
67631: PPUSH
67632: LD_OWVAR 2
67636: PPUSH
67637: LD_INT 0
67639: PPUSH
67640: CALL_OW 324
67644: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67645: LD_EXP 43
67649: PUSH
67650: LD_EXP 80
67654: AND
67655: IFFALSE 67675
67657: GO 67659
67659: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67660: LD_INT 19
67662: PPUSH
67663: LD_OWVAR 2
67667: PPUSH
67668: LD_INT 0
67670: PPUSH
67671: CALL_OW 324
67675: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67676: LD_EXP 43
67680: PUSH
67681: LD_EXP 52
67685: AND
67686: IFFALSE 67788
67688: GO 67690
67690: DISABLE
67691: LD_INT 0
67693: PPUSH
67694: PPUSH
// begin enable ;
67695: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67696: LD_ADDR_VAR 0 2
67700: PUSH
67701: LD_INT 22
67703: PUSH
67704: LD_OWVAR 2
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: LD_INT 34
67718: PUSH
67719: LD_INT 11
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 34
67728: PUSH
67729: LD_INT 30
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PPUSH
67745: CALL_OW 69
67749: ST_TO_ADDR
// if not tmp then
67750: LD_VAR 0 2
67754: NOT
67755: IFFALSE 67759
// exit ;
67757: GO 67788
// for i in tmp do
67759: LD_ADDR_VAR 0 1
67763: PUSH
67764: LD_VAR 0 2
67768: PUSH
67769: FOR_IN
67770: IFFALSE 67786
// begin SetLives ( i , 0 ) ;
67772: LD_VAR 0 1
67776: PPUSH
67777: LD_INT 0
67779: PPUSH
67780: CALL_OW 234
// end ;
67784: GO 67769
67786: POP
67787: POP
// end ;
67788: PPOPN 2
67790: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67791: LD_EXP 43
67795: PUSH
67796: LD_EXP 53
67800: AND
67801: IFFALSE 67821
67803: GO 67805
67805: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67806: LD_INT 32
67808: PPUSH
67809: LD_OWVAR 2
67813: PPUSH
67814: LD_INT 0
67816: PPUSH
67817: CALL_OW 324
67821: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67822: LD_EXP 43
67826: PUSH
67827: LD_EXP 54
67831: AND
67832: IFFALSE 68013
67834: GO 67836
67836: DISABLE
67837: LD_INT 0
67839: PPUSH
67840: PPUSH
67841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67842: LD_ADDR_VAR 0 2
67846: PUSH
67847: LD_INT 22
67849: PUSH
67850: LD_OWVAR 2
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 33
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PPUSH
67873: CALL_OW 69
67877: ST_TO_ADDR
// if not tmp then
67878: LD_VAR 0 2
67882: NOT
67883: IFFALSE 67887
// exit ;
67885: GO 68013
// side := 0 ;
67887: LD_ADDR_VAR 0 3
67891: PUSH
67892: LD_INT 0
67894: ST_TO_ADDR
// for i := 1 to 8 do
67895: LD_ADDR_VAR 0 1
67899: PUSH
67900: DOUBLE
67901: LD_INT 1
67903: DEC
67904: ST_TO_ADDR
67905: LD_INT 8
67907: PUSH
67908: FOR_TO
67909: IFFALSE 67957
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67911: LD_OWVAR 2
67915: PUSH
67916: LD_VAR 0 1
67920: NONEQUAL
67921: PUSH
67922: LD_OWVAR 2
67926: PPUSH
67927: LD_VAR 0 1
67931: PPUSH
67932: CALL_OW 81
67936: PUSH
67937: LD_INT 2
67939: EQUAL
67940: AND
67941: IFFALSE 67955
// begin side := i ;
67943: LD_ADDR_VAR 0 3
67947: PUSH
67948: LD_VAR 0 1
67952: ST_TO_ADDR
// break ;
67953: GO 67957
// end ;
67955: GO 67908
67957: POP
67958: POP
// if not side then
67959: LD_VAR 0 3
67963: NOT
67964: IFFALSE 67968
// exit ;
67966: GO 68013
// for i := 1 to tmp do
67968: LD_ADDR_VAR 0 1
67972: PUSH
67973: DOUBLE
67974: LD_INT 1
67976: DEC
67977: ST_TO_ADDR
67978: LD_VAR 0 2
67982: PUSH
67983: FOR_TO
67984: IFFALSE 68011
// if Prob ( 60 ) then
67986: LD_INT 60
67988: PPUSH
67989: CALL_OW 13
67993: IFFALSE 68009
// SetSide ( i , side ) ;
67995: LD_VAR 0 1
67999: PPUSH
68000: LD_VAR 0 3
68004: PPUSH
68005: CALL_OW 235
68009: GO 67983
68011: POP
68012: POP
// end ;
68013: PPOPN 3
68015: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68016: LD_EXP 43
68020: PUSH
68021: LD_EXP 56
68025: AND
68026: IFFALSE 68145
68028: GO 68030
68030: DISABLE
68031: LD_INT 0
68033: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68034: LD_ADDR_VAR 0 1
68038: PUSH
68039: LD_INT 22
68041: PUSH
68042: LD_OWVAR 2
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 21
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 3
68063: PUSH
68064: LD_INT 23
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: PPUSH
68083: CALL_OW 69
68087: PUSH
68088: FOR_IN
68089: IFFALSE 68143
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68091: LD_VAR 0 1
68095: PPUSH
68096: CALL_OW 257
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 2
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: LD_INT 4
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: IN
68119: IFFALSE 68141
// SetClass ( un , rand ( 1 , 4 ) ) ;
68121: LD_VAR 0 1
68125: PPUSH
68126: LD_INT 1
68128: PPUSH
68129: LD_INT 4
68131: PPUSH
68132: CALL_OW 12
68136: PPUSH
68137: CALL_OW 336
68141: GO 68088
68143: POP
68144: POP
// end ;
68145: PPOPN 1
68147: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68148: LD_EXP 43
68152: PUSH
68153: LD_EXP 55
68157: AND
68158: IFFALSE 68237
68160: GO 68162
68162: DISABLE
68163: LD_INT 0
68165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68166: LD_ADDR_VAR 0 1
68170: PUSH
68171: LD_INT 22
68173: PUSH
68174: LD_OWVAR 2
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 21
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PPUSH
68197: CALL_OW 69
68201: ST_TO_ADDR
// if not tmp then
68202: LD_VAR 0 1
68206: NOT
68207: IFFALSE 68211
// exit ;
68209: GO 68237
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68211: LD_VAR 0 1
68215: PUSH
68216: LD_INT 1
68218: PPUSH
68219: LD_VAR 0 1
68223: PPUSH
68224: CALL_OW 12
68228: ARRAY
68229: PPUSH
68230: LD_INT 100
68232: PPUSH
68233: CALL_OW 234
// end ;
68237: PPOPN 1
68239: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68240: LD_EXP 43
68244: PUSH
68245: LD_EXP 57
68249: AND
68250: IFFALSE 68348
68252: GO 68254
68254: DISABLE
68255: LD_INT 0
68257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68258: LD_ADDR_VAR 0 1
68262: PUSH
68263: LD_INT 22
68265: PUSH
68266: LD_OWVAR 2
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 21
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PPUSH
68289: CALL_OW 69
68293: ST_TO_ADDR
// if not tmp then
68294: LD_VAR 0 1
68298: NOT
68299: IFFALSE 68303
// exit ;
68301: GO 68348
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68303: LD_VAR 0 1
68307: PUSH
68308: LD_INT 1
68310: PPUSH
68311: LD_VAR 0 1
68315: PPUSH
68316: CALL_OW 12
68320: ARRAY
68321: PPUSH
68322: LD_INT 1
68324: PPUSH
68325: LD_INT 4
68327: PPUSH
68328: CALL_OW 12
68332: PPUSH
68333: LD_INT 3000
68335: PPUSH
68336: LD_INT 9000
68338: PPUSH
68339: CALL_OW 12
68343: PPUSH
68344: CALL_OW 492
// end ;
68348: PPOPN 1
68350: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68351: LD_EXP 43
68355: PUSH
68356: LD_EXP 58
68360: AND
68361: IFFALSE 68381
68363: GO 68365
68365: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68366: LD_INT 1
68368: PPUSH
68369: LD_OWVAR 2
68373: PPUSH
68374: LD_INT 0
68376: PPUSH
68377: CALL_OW 324
68381: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68382: LD_EXP 43
68386: PUSH
68387: LD_EXP 59
68391: AND
68392: IFFALSE 68475
68394: GO 68396
68396: DISABLE
68397: LD_INT 0
68399: PPUSH
68400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68401: LD_ADDR_VAR 0 2
68405: PUSH
68406: LD_INT 22
68408: PUSH
68409: LD_OWVAR 2
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 21
68420: PUSH
68421: LD_INT 3
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PPUSH
68432: CALL_OW 69
68436: ST_TO_ADDR
// if not tmp then
68437: LD_VAR 0 2
68441: NOT
68442: IFFALSE 68446
// exit ;
68444: GO 68475
// for i in tmp do
68446: LD_ADDR_VAR 0 1
68450: PUSH
68451: LD_VAR 0 2
68455: PUSH
68456: FOR_IN
68457: IFFALSE 68473
// SetBLevel ( i , 10 ) ;
68459: LD_VAR 0 1
68463: PPUSH
68464: LD_INT 10
68466: PPUSH
68467: CALL_OW 241
68471: GO 68456
68473: POP
68474: POP
// end ;
68475: PPOPN 2
68477: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68478: LD_EXP 43
68482: PUSH
68483: LD_EXP 60
68487: AND
68488: IFFALSE 68599
68490: GO 68492
68492: DISABLE
68493: LD_INT 0
68495: PPUSH
68496: PPUSH
68497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68498: LD_ADDR_VAR 0 3
68502: PUSH
68503: LD_INT 22
68505: PUSH
68506: LD_OWVAR 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 25
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PPUSH
68529: CALL_OW 69
68533: ST_TO_ADDR
// if not tmp then
68534: LD_VAR 0 3
68538: NOT
68539: IFFALSE 68543
// exit ;
68541: GO 68599
// un := tmp [ rand ( 1 , tmp ) ] ;
68543: LD_ADDR_VAR 0 2
68547: PUSH
68548: LD_VAR 0 3
68552: PUSH
68553: LD_INT 1
68555: PPUSH
68556: LD_VAR 0 3
68560: PPUSH
68561: CALL_OW 12
68565: ARRAY
68566: ST_TO_ADDR
// if Crawls ( un ) then
68567: LD_VAR 0 2
68571: PPUSH
68572: CALL_OW 318
68576: IFFALSE 68587
// ComWalk ( un ) ;
68578: LD_VAR 0 2
68582: PPUSH
68583: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68587: LD_VAR 0 2
68591: PPUSH
68592: LD_INT 5
68594: PPUSH
68595: CALL_OW 336
// end ;
68599: PPOPN 3
68601: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68602: LD_EXP 43
68606: PUSH
68607: LD_EXP 61
68611: AND
68612: PUSH
68613: LD_OWVAR 67
68617: PUSH
68618: LD_INT 4
68620: LESS
68621: AND
68622: IFFALSE 68641
68624: GO 68626
68626: DISABLE
// begin Difficulty := Difficulty + 1 ;
68627: LD_ADDR_OWVAR 67
68631: PUSH
68632: LD_OWVAR 67
68636: PUSH
68637: LD_INT 1
68639: PLUS
68640: ST_TO_ADDR
// end ;
68641: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68642: LD_EXP 43
68646: PUSH
68647: LD_EXP 62
68651: AND
68652: IFFALSE 68755
68654: GO 68656
68656: DISABLE
68657: LD_INT 0
68659: PPUSH
// begin for i := 1 to 5 do
68660: LD_ADDR_VAR 0 1
68664: PUSH
68665: DOUBLE
68666: LD_INT 1
68668: DEC
68669: ST_TO_ADDR
68670: LD_INT 5
68672: PUSH
68673: FOR_TO
68674: IFFALSE 68753
// begin uc_nation := nation_nature ;
68676: LD_ADDR_OWVAR 21
68680: PUSH
68681: LD_INT 0
68683: ST_TO_ADDR
// uc_side := 0 ;
68684: LD_ADDR_OWVAR 20
68688: PUSH
68689: LD_INT 0
68691: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68692: LD_ADDR_OWVAR 29
68696: PUSH
68697: LD_INT 12
68699: PUSH
68700: LD_INT 12
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: ST_TO_ADDR
// hc_agressivity := 20 ;
68707: LD_ADDR_OWVAR 35
68711: PUSH
68712: LD_INT 20
68714: ST_TO_ADDR
// hc_class := class_tiger ;
68715: LD_ADDR_OWVAR 28
68719: PUSH
68720: LD_INT 14
68722: ST_TO_ADDR
// hc_gallery :=  ;
68723: LD_ADDR_OWVAR 33
68727: PUSH
68728: LD_STRING 
68730: ST_TO_ADDR
// hc_name :=  ;
68731: LD_ADDR_OWVAR 26
68735: PUSH
68736: LD_STRING 
68738: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68739: CALL_OW 44
68743: PPUSH
68744: LD_INT 0
68746: PPUSH
68747: CALL_OW 51
// end ;
68751: GO 68673
68753: POP
68754: POP
// end ;
68755: PPOPN 1
68757: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68758: LD_EXP 43
68762: PUSH
68763: LD_EXP 63
68767: AND
68768: IFFALSE 68777
68770: GO 68772
68772: DISABLE
// StreamSibBomb ;
68773: CALL 68778 0 0
68777: END
// export function StreamSibBomb ; var i , x , y ; begin
68778: LD_INT 0
68780: PPUSH
68781: PPUSH
68782: PPUSH
68783: PPUSH
// result := false ;
68784: LD_ADDR_VAR 0 1
68788: PUSH
68789: LD_INT 0
68791: ST_TO_ADDR
// for i := 1 to 16 do
68792: LD_ADDR_VAR 0 2
68796: PUSH
68797: DOUBLE
68798: LD_INT 1
68800: DEC
68801: ST_TO_ADDR
68802: LD_INT 16
68804: PUSH
68805: FOR_TO
68806: IFFALSE 69005
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68808: LD_ADDR_VAR 0 3
68812: PUSH
68813: LD_INT 10
68815: PUSH
68816: LD_INT 20
68818: PUSH
68819: LD_INT 30
68821: PUSH
68822: LD_INT 40
68824: PUSH
68825: LD_INT 50
68827: PUSH
68828: LD_INT 60
68830: PUSH
68831: LD_INT 70
68833: PUSH
68834: LD_INT 80
68836: PUSH
68837: LD_INT 90
68839: PUSH
68840: LD_INT 100
68842: PUSH
68843: LD_INT 110
68845: PUSH
68846: LD_INT 120
68848: PUSH
68849: LD_INT 130
68851: PUSH
68852: LD_INT 140
68854: PUSH
68855: LD_INT 150
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: PPUSH
68878: LD_INT 15
68880: PPUSH
68881: CALL_OW 12
68885: ARRAY
68886: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68887: LD_ADDR_VAR 0 4
68891: PUSH
68892: LD_INT 10
68894: PUSH
68895: LD_INT 20
68897: PUSH
68898: LD_INT 30
68900: PUSH
68901: LD_INT 40
68903: PUSH
68904: LD_INT 50
68906: PUSH
68907: LD_INT 60
68909: PUSH
68910: LD_INT 70
68912: PUSH
68913: LD_INT 80
68915: PUSH
68916: LD_INT 90
68918: PUSH
68919: LD_INT 100
68921: PUSH
68922: LD_INT 110
68924: PUSH
68925: LD_INT 120
68927: PUSH
68928: LD_INT 130
68930: PUSH
68931: LD_INT 140
68933: PUSH
68934: LD_INT 150
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: PPUSH
68957: LD_INT 15
68959: PPUSH
68960: CALL_OW 12
68964: ARRAY
68965: ST_TO_ADDR
// if ValidHex ( x , y ) then
68966: LD_VAR 0 3
68970: PPUSH
68971: LD_VAR 0 4
68975: PPUSH
68976: CALL_OW 488
68980: IFFALSE 69003
// begin result := [ x , y ] ;
68982: LD_ADDR_VAR 0 1
68986: PUSH
68987: LD_VAR 0 3
68991: PUSH
68992: LD_VAR 0 4
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: ST_TO_ADDR
// break ;
69001: GO 69005
// end ; end ;
69003: GO 68805
69005: POP
69006: POP
// if result then
69007: LD_VAR 0 1
69011: IFFALSE 69071
// begin ToLua ( playSibBomb() ) ;
69013: LD_STRING playSibBomb()
69015: PPUSH
69016: CALL_OW 559
// wait ( 0 0$14 ) ;
69020: LD_INT 490
69022: PPUSH
69023: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69027: LD_VAR 0 1
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: PPUSH
69036: LD_VAR 0 1
69040: PUSH
69041: LD_INT 2
69043: ARRAY
69044: PPUSH
69045: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69049: LD_VAR 0 1
69053: PUSH
69054: LD_INT 1
69056: ARRAY
69057: PPUSH
69058: LD_VAR 0 1
69062: PUSH
69063: LD_INT 2
69065: ARRAY
69066: PPUSH
69067: CALL_OW 429
// end ; end ;
69071: LD_VAR 0 1
69075: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69076: LD_EXP 43
69080: PUSH
69081: LD_EXP 65
69085: AND
69086: IFFALSE 69098
69088: GO 69090
69090: DISABLE
// YouLost (  ) ;
69091: LD_STRING 
69093: PPUSH
69094: CALL_OW 104
69098: END
// every 0 0$1 trigger StreamModeActive and sFog do
69099: LD_EXP 43
69103: PUSH
69104: LD_EXP 64
69108: AND
69109: IFFALSE 69123
69111: GO 69113
69113: DISABLE
// FogOff ( your_side ) ;
69114: LD_OWVAR 2
69118: PPUSH
69119: CALL_OW 344
69123: END
// every 0 0$1 trigger StreamModeActive and sSun do
69124: LD_EXP 43
69128: PUSH
69129: LD_EXP 66
69133: AND
69134: IFFALSE 69162
69136: GO 69138
69138: DISABLE
// begin solar_recharge_percent := 0 ;
69139: LD_ADDR_OWVAR 79
69143: PUSH
69144: LD_INT 0
69146: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69147: LD_INT 10500
69149: PPUSH
69150: CALL_OW 67
// solar_recharge_percent := 100 ;
69154: LD_ADDR_OWVAR 79
69158: PUSH
69159: LD_INT 100
69161: ST_TO_ADDR
// end ;
69162: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69163: LD_EXP 43
69167: PUSH
69168: LD_EXP 67
69172: AND
69173: IFFALSE 69412
69175: GO 69177
69177: DISABLE
69178: LD_INT 0
69180: PPUSH
69181: PPUSH
69182: PPUSH
// begin tmp := [ ] ;
69183: LD_ADDR_VAR 0 3
69187: PUSH
69188: EMPTY
69189: ST_TO_ADDR
// for i := 1 to 6 do
69190: LD_ADDR_VAR 0 1
69194: PUSH
69195: DOUBLE
69196: LD_INT 1
69198: DEC
69199: ST_TO_ADDR
69200: LD_INT 6
69202: PUSH
69203: FOR_TO
69204: IFFALSE 69309
// begin uc_nation := nation_nature ;
69206: LD_ADDR_OWVAR 21
69210: PUSH
69211: LD_INT 0
69213: ST_TO_ADDR
// uc_side := 0 ;
69214: LD_ADDR_OWVAR 20
69218: PUSH
69219: LD_INT 0
69221: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69222: LD_ADDR_OWVAR 29
69226: PUSH
69227: LD_INT 12
69229: PUSH
69230: LD_INT 12
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: ST_TO_ADDR
// hc_agressivity := 20 ;
69237: LD_ADDR_OWVAR 35
69241: PUSH
69242: LD_INT 20
69244: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69245: LD_ADDR_OWVAR 28
69249: PUSH
69250: LD_INT 17
69252: ST_TO_ADDR
// hc_gallery :=  ;
69253: LD_ADDR_OWVAR 33
69257: PUSH
69258: LD_STRING 
69260: ST_TO_ADDR
// hc_name :=  ;
69261: LD_ADDR_OWVAR 26
69265: PUSH
69266: LD_STRING 
69268: ST_TO_ADDR
// un := CreateHuman ;
69269: LD_ADDR_VAR 0 2
69273: PUSH
69274: CALL_OW 44
69278: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69279: LD_VAR 0 2
69283: PPUSH
69284: LD_INT 1
69286: PPUSH
69287: CALL_OW 51
// tmp := tmp ^ un ;
69291: LD_ADDR_VAR 0 3
69295: PUSH
69296: LD_VAR 0 3
69300: PUSH
69301: LD_VAR 0 2
69305: ADD
69306: ST_TO_ADDR
// end ;
69307: GO 69203
69309: POP
69310: POP
// repeat wait ( 0 0$1 ) ;
69311: LD_INT 35
69313: PPUSH
69314: CALL_OW 67
// for un in tmp do
69318: LD_ADDR_VAR 0 2
69322: PUSH
69323: LD_VAR 0 3
69327: PUSH
69328: FOR_IN
69329: IFFALSE 69403
// begin if IsDead ( un ) then
69331: LD_VAR 0 2
69335: PPUSH
69336: CALL_OW 301
69340: IFFALSE 69360
// begin tmp := tmp diff un ;
69342: LD_ADDR_VAR 0 3
69346: PUSH
69347: LD_VAR 0 3
69351: PUSH
69352: LD_VAR 0 2
69356: DIFF
69357: ST_TO_ADDR
// continue ;
69358: GO 69328
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69360: LD_VAR 0 2
69364: PPUSH
69365: LD_INT 3
69367: PUSH
69368: LD_INT 22
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PPUSH
69382: CALL_OW 69
69386: PPUSH
69387: LD_VAR 0 2
69391: PPUSH
69392: CALL_OW 74
69396: PPUSH
69397: CALL_OW 115
// end ;
69401: GO 69328
69403: POP
69404: POP
// until not tmp ;
69405: LD_VAR 0 3
69409: NOT
69410: IFFALSE 69311
// end ;
69412: PPOPN 3
69414: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69415: LD_EXP 43
69419: PUSH
69420: LD_EXP 68
69424: AND
69425: IFFALSE 69479
69427: GO 69429
69429: DISABLE
// begin ToLua ( displayTroll(); ) ;
69430: LD_STRING displayTroll();
69432: PPUSH
69433: CALL_OW 559
// wait ( 3 3$00 ) ;
69437: LD_INT 6300
69439: PPUSH
69440: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69444: LD_STRING hideTroll();
69446: PPUSH
69447: CALL_OW 559
// wait ( 1 1$00 ) ;
69451: LD_INT 2100
69453: PPUSH
69454: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69458: LD_STRING displayTroll();
69460: PPUSH
69461: CALL_OW 559
// wait ( 1 1$00 ) ;
69465: LD_INT 2100
69467: PPUSH
69468: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69472: LD_STRING hideTroll();
69474: PPUSH
69475: CALL_OW 559
// end ;
69479: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69480: LD_EXP 43
69484: PUSH
69485: LD_EXP 69
69489: AND
69490: IFFALSE 69553
69492: GO 69494
69494: DISABLE
69495: LD_INT 0
69497: PPUSH
// begin p := 0 ;
69498: LD_ADDR_VAR 0 1
69502: PUSH
69503: LD_INT 0
69505: ST_TO_ADDR
// repeat game_speed := 1 ;
69506: LD_ADDR_OWVAR 65
69510: PUSH
69511: LD_INT 1
69513: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69514: LD_INT 35
69516: PPUSH
69517: CALL_OW 67
// p := p + 1 ;
69521: LD_ADDR_VAR 0 1
69525: PUSH
69526: LD_VAR 0 1
69530: PUSH
69531: LD_INT 1
69533: PLUS
69534: ST_TO_ADDR
// until p >= 60 ;
69535: LD_VAR 0 1
69539: PUSH
69540: LD_INT 60
69542: GREATEREQUAL
69543: IFFALSE 69506
// game_speed := 4 ;
69545: LD_ADDR_OWVAR 65
69549: PUSH
69550: LD_INT 4
69552: ST_TO_ADDR
// end ;
69553: PPOPN 1
69555: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69556: LD_EXP 43
69560: PUSH
69561: LD_EXP 70
69565: AND
69566: IFFALSE 69712
69568: GO 69570
69570: DISABLE
69571: LD_INT 0
69573: PPUSH
69574: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69575: LD_ADDR_VAR 0 1
69579: PUSH
69580: LD_INT 22
69582: PUSH
69583: LD_OWVAR 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: PUSH
69595: LD_INT 30
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 30
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PPUSH
69624: CALL_OW 69
69628: ST_TO_ADDR
// if not depot then
69629: LD_VAR 0 1
69633: NOT
69634: IFFALSE 69638
// exit ;
69636: GO 69712
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69638: LD_ADDR_VAR 0 2
69642: PUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 1
69650: PPUSH
69651: LD_VAR 0 1
69655: PPUSH
69656: CALL_OW 12
69660: ARRAY
69661: PPUSH
69662: CALL_OW 274
69666: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69667: LD_VAR 0 2
69671: PPUSH
69672: LD_INT 1
69674: PPUSH
69675: LD_INT 0
69677: PPUSH
69678: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69682: LD_VAR 0 2
69686: PPUSH
69687: LD_INT 2
69689: PPUSH
69690: LD_INT 0
69692: PPUSH
69693: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69697: LD_VAR 0 2
69701: PPUSH
69702: LD_INT 3
69704: PPUSH
69705: LD_INT 0
69707: PPUSH
69708: CALL_OW 277
// end ;
69712: PPOPN 2
69714: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69715: LD_EXP 43
69719: PUSH
69720: LD_EXP 71
69724: AND
69725: IFFALSE 69822
69727: GO 69729
69729: DISABLE
69730: LD_INT 0
69732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69733: LD_ADDR_VAR 0 1
69737: PUSH
69738: LD_INT 22
69740: PUSH
69741: LD_OWVAR 2
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 21
69752: PUSH
69753: LD_INT 1
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 3
69762: PUSH
69763: LD_INT 23
69765: PUSH
69766: LD_INT 0
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: LIST
69781: PPUSH
69782: CALL_OW 69
69786: ST_TO_ADDR
// if not tmp then
69787: LD_VAR 0 1
69791: NOT
69792: IFFALSE 69796
// exit ;
69794: GO 69822
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69796: LD_VAR 0 1
69800: PUSH
69801: LD_INT 1
69803: PPUSH
69804: LD_VAR 0 1
69808: PPUSH
69809: CALL_OW 12
69813: ARRAY
69814: PPUSH
69815: LD_INT 200
69817: PPUSH
69818: CALL_OW 234
// end ;
69822: PPOPN 1
69824: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69825: LD_EXP 43
69829: PUSH
69830: LD_EXP 72
69834: AND
69835: IFFALSE 69914
69837: GO 69839
69839: DISABLE
69840: LD_INT 0
69842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69843: LD_ADDR_VAR 0 1
69847: PUSH
69848: LD_INT 22
69850: PUSH
69851: LD_OWVAR 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 21
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PPUSH
69874: CALL_OW 69
69878: ST_TO_ADDR
// if not tmp then
69879: LD_VAR 0 1
69883: NOT
69884: IFFALSE 69888
// exit ;
69886: GO 69914
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69888: LD_VAR 0 1
69892: PUSH
69893: LD_INT 1
69895: PPUSH
69896: LD_VAR 0 1
69900: PPUSH
69901: CALL_OW 12
69905: ARRAY
69906: PPUSH
69907: LD_INT 60
69909: PPUSH
69910: CALL_OW 234
// end ;
69914: PPOPN 1
69916: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69917: LD_EXP 43
69921: PUSH
69922: LD_EXP 73
69926: AND
69927: IFFALSE 70026
69929: GO 69931
69931: DISABLE
69932: LD_INT 0
69934: PPUSH
69935: PPUSH
// begin enable ;
69936: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69937: LD_ADDR_VAR 0 1
69941: PUSH
69942: LD_INT 22
69944: PUSH
69945: LD_OWVAR 2
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 61
69956: PUSH
69957: EMPTY
69958: LIST
69959: PUSH
69960: LD_INT 33
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: LIST
69974: PPUSH
69975: CALL_OW 69
69979: ST_TO_ADDR
// if not tmp then
69980: LD_VAR 0 1
69984: NOT
69985: IFFALSE 69989
// exit ;
69987: GO 70026
// for i in tmp do
69989: LD_ADDR_VAR 0 2
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: FOR_IN
70000: IFFALSE 70024
// if IsControledBy ( i ) then
70002: LD_VAR 0 2
70006: PPUSH
70007: CALL_OW 312
70011: IFFALSE 70022
// ComUnlink ( i ) ;
70013: LD_VAR 0 2
70017: PPUSH
70018: CALL_OW 136
70022: GO 69999
70024: POP
70025: POP
// end ;
70026: PPOPN 2
70028: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70029: LD_EXP 43
70033: PUSH
70034: LD_EXP 74
70038: AND
70039: IFFALSE 70179
70041: GO 70043
70043: DISABLE
70044: LD_INT 0
70046: PPUSH
70047: PPUSH
// begin ToLua ( displayPowell(); ) ;
70048: LD_STRING displayPowell();
70050: PPUSH
70051: CALL_OW 559
// uc_side := 0 ;
70055: LD_ADDR_OWVAR 20
70059: PUSH
70060: LD_INT 0
70062: ST_TO_ADDR
// uc_nation := 2 ;
70063: LD_ADDR_OWVAR 21
70067: PUSH
70068: LD_INT 2
70070: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70071: LD_ADDR_OWVAR 37
70075: PUSH
70076: LD_INT 14
70078: ST_TO_ADDR
// vc_engine := engine_siberite ;
70079: LD_ADDR_OWVAR 39
70083: PUSH
70084: LD_INT 3
70086: ST_TO_ADDR
// vc_control := control_apeman ;
70087: LD_ADDR_OWVAR 38
70091: PUSH
70092: LD_INT 5
70094: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70095: LD_ADDR_OWVAR 40
70099: PUSH
70100: LD_INT 29
70102: ST_TO_ADDR
// un := CreateVehicle ;
70103: LD_ADDR_VAR 0 2
70107: PUSH
70108: CALL_OW 45
70112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70113: LD_VAR 0 2
70117: PPUSH
70118: LD_INT 1
70120: PPUSH
70121: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70125: LD_INT 35
70127: PPUSH
70128: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70132: LD_VAR 0 2
70136: PPUSH
70137: LD_INT 22
70139: PUSH
70140: LD_OWVAR 2
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PPUSH
70149: CALL_OW 69
70153: PPUSH
70154: LD_VAR 0 2
70158: PPUSH
70159: CALL_OW 74
70163: PPUSH
70164: CALL_OW 115
// until IsDead ( un ) ;
70168: LD_VAR 0 2
70172: PPUSH
70173: CALL_OW 301
70177: IFFALSE 70125
// end ;
70179: PPOPN 2
70181: END
// every 0 0$1 trigger StreamModeActive and sStu do
70182: LD_EXP 43
70186: PUSH
70187: LD_EXP 82
70191: AND
70192: IFFALSE 70208
70194: GO 70196
70196: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70197: LD_STRING displayStucuk();
70199: PPUSH
70200: CALL_OW 559
// ResetFog ;
70204: CALL_OW 335
// end ;
70208: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70209: LD_EXP 43
70213: PUSH
70214: LD_EXP 75
70218: AND
70219: IFFALSE 70360
70221: GO 70223
70223: DISABLE
70224: LD_INT 0
70226: PPUSH
70227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70228: LD_ADDR_VAR 0 2
70232: PUSH
70233: LD_INT 22
70235: PUSH
70236: LD_OWVAR 2
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 21
70247: PUSH
70248: LD_INT 1
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PPUSH
70259: CALL_OW 69
70263: ST_TO_ADDR
// if not tmp then
70264: LD_VAR 0 2
70268: NOT
70269: IFFALSE 70273
// exit ;
70271: GO 70360
// un := tmp [ rand ( 1 , tmp ) ] ;
70273: LD_ADDR_VAR 0 1
70277: PUSH
70278: LD_VAR 0 2
70282: PUSH
70283: LD_INT 1
70285: PPUSH
70286: LD_VAR 0 2
70290: PPUSH
70291: CALL_OW 12
70295: ARRAY
70296: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70297: LD_VAR 0 1
70301: PPUSH
70302: LD_INT 0
70304: PPUSH
70305: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70309: LD_VAR 0 1
70313: PPUSH
70314: LD_OWVAR 3
70318: PUSH
70319: LD_VAR 0 1
70323: DIFF
70324: PPUSH
70325: LD_VAR 0 1
70329: PPUSH
70330: CALL_OW 74
70334: PPUSH
70335: CALL_OW 115
// wait ( 0 0$20 ) ;
70339: LD_INT 700
70341: PPUSH
70342: CALL_OW 67
// SetSide ( un , your_side ) ;
70346: LD_VAR 0 1
70350: PPUSH
70351: LD_OWVAR 2
70355: PPUSH
70356: CALL_OW 235
// end ;
70360: PPOPN 2
70362: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70363: LD_EXP 43
70367: PUSH
70368: LD_EXP 76
70372: AND
70373: IFFALSE 70479
70375: GO 70377
70377: DISABLE
70378: LD_INT 0
70380: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70381: LD_ADDR_VAR 0 1
70385: PUSH
70386: LD_INT 22
70388: PUSH
70389: LD_OWVAR 2
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 2
70400: PUSH
70401: LD_INT 30
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 30
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PPUSH
70430: CALL_OW 69
70434: ST_TO_ADDR
// if not depot then
70435: LD_VAR 0 1
70439: NOT
70440: IFFALSE 70444
// exit ;
70442: GO 70479
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70444: LD_VAR 0 1
70448: PUSH
70449: LD_INT 1
70451: ARRAY
70452: PPUSH
70453: CALL_OW 250
70457: PPUSH
70458: LD_VAR 0 1
70462: PUSH
70463: LD_INT 1
70465: ARRAY
70466: PPUSH
70467: CALL_OW 251
70471: PPUSH
70472: LD_INT 70
70474: PPUSH
70475: CALL_OW 495
// end ;
70479: PPOPN 1
70481: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70482: LD_EXP 43
70486: PUSH
70487: LD_EXP 77
70491: AND
70492: IFFALSE 70703
70494: GO 70496
70496: DISABLE
70497: LD_INT 0
70499: PPUSH
70500: PPUSH
70501: PPUSH
70502: PPUSH
70503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70504: LD_ADDR_VAR 0 5
70508: PUSH
70509: LD_INT 22
70511: PUSH
70512: LD_OWVAR 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 21
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PPUSH
70535: CALL_OW 69
70539: ST_TO_ADDR
// if not tmp then
70540: LD_VAR 0 5
70544: NOT
70545: IFFALSE 70549
// exit ;
70547: GO 70703
// for i in tmp do
70549: LD_ADDR_VAR 0 1
70553: PUSH
70554: LD_VAR 0 5
70558: PUSH
70559: FOR_IN
70560: IFFALSE 70701
// begin d := rand ( 0 , 5 ) ;
70562: LD_ADDR_VAR 0 4
70566: PUSH
70567: LD_INT 0
70569: PPUSH
70570: LD_INT 5
70572: PPUSH
70573: CALL_OW 12
70577: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70578: LD_ADDR_VAR 0 2
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 250
70592: PPUSH
70593: LD_VAR 0 4
70597: PPUSH
70598: LD_INT 3
70600: PPUSH
70601: LD_INT 12
70603: PPUSH
70604: CALL_OW 12
70608: PPUSH
70609: CALL_OW 272
70613: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70614: LD_ADDR_VAR 0 3
70618: PUSH
70619: LD_VAR 0 1
70623: PPUSH
70624: CALL_OW 251
70628: PPUSH
70629: LD_VAR 0 4
70633: PPUSH
70634: LD_INT 3
70636: PPUSH
70637: LD_INT 12
70639: PPUSH
70640: CALL_OW 12
70644: PPUSH
70645: CALL_OW 273
70649: ST_TO_ADDR
// if ValidHex ( x , y ) then
70650: LD_VAR 0 2
70654: PPUSH
70655: LD_VAR 0 3
70659: PPUSH
70660: CALL_OW 488
70664: IFFALSE 70699
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70666: LD_VAR 0 1
70670: PPUSH
70671: LD_VAR 0 2
70675: PPUSH
70676: LD_VAR 0 3
70680: PPUSH
70681: LD_INT 3
70683: PPUSH
70684: LD_INT 6
70686: PPUSH
70687: CALL_OW 12
70691: PPUSH
70692: LD_INT 1
70694: PPUSH
70695: CALL_OW 483
// end ;
70699: GO 70559
70701: POP
70702: POP
// end ;
70703: PPOPN 5
70705: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70706: LD_EXP 43
70710: PUSH
70711: LD_EXP 78
70715: AND
70716: IFFALSE 70810
70718: GO 70720
70720: DISABLE
70721: LD_INT 0
70723: PPUSH
70724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70725: LD_ADDR_VAR 0 2
70729: PUSH
70730: LD_INT 22
70732: PUSH
70733: LD_OWVAR 2
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 32
70744: PUSH
70745: LD_INT 1
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 21
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: LIST
70766: PPUSH
70767: CALL_OW 69
70771: ST_TO_ADDR
// if not tmp then
70772: LD_VAR 0 2
70776: NOT
70777: IFFALSE 70781
// exit ;
70779: GO 70810
// for i in tmp do
70781: LD_ADDR_VAR 0 1
70785: PUSH
70786: LD_VAR 0 2
70790: PUSH
70791: FOR_IN
70792: IFFALSE 70808
// SetFuel ( i , 0 ) ;
70794: LD_VAR 0 1
70798: PPUSH
70799: LD_INT 0
70801: PPUSH
70802: CALL_OW 240
70806: GO 70791
70808: POP
70809: POP
// end ;
70810: PPOPN 2
70812: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70813: LD_EXP 43
70817: PUSH
70818: LD_EXP 79
70822: AND
70823: IFFALSE 70889
70825: GO 70827
70827: DISABLE
70828: LD_INT 0
70830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70831: LD_ADDR_VAR 0 1
70835: PUSH
70836: LD_INT 22
70838: PUSH
70839: LD_OWVAR 2
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 30
70850: PUSH
70851: LD_INT 29
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PPUSH
70862: CALL_OW 69
70866: ST_TO_ADDR
// if not tmp then
70867: LD_VAR 0 1
70871: NOT
70872: IFFALSE 70876
// exit ;
70874: GO 70889
// DestroyUnit ( tmp [ 1 ] ) ;
70876: LD_VAR 0 1
70880: PUSH
70881: LD_INT 1
70883: ARRAY
70884: PPUSH
70885: CALL_OW 65
// end ;
70889: PPOPN 1
70891: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70892: LD_EXP 43
70896: PUSH
70897: LD_EXP 81
70901: AND
70902: IFFALSE 71031
70904: GO 70906
70906: DISABLE
70907: LD_INT 0
70909: PPUSH
// begin uc_side := 0 ;
70910: LD_ADDR_OWVAR 20
70914: PUSH
70915: LD_INT 0
70917: ST_TO_ADDR
// uc_nation := nation_arabian ;
70918: LD_ADDR_OWVAR 21
70922: PUSH
70923: LD_INT 2
70925: ST_TO_ADDR
// hc_gallery :=  ;
70926: LD_ADDR_OWVAR 33
70930: PUSH
70931: LD_STRING 
70933: ST_TO_ADDR
// hc_name :=  ;
70934: LD_ADDR_OWVAR 26
70938: PUSH
70939: LD_STRING 
70941: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70942: LD_INT 1
70944: PPUSH
70945: LD_INT 11
70947: PPUSH
70948: LD_INT 10
70950: PPUSH
70951: CALL_OW 380
// un := CreateHuman ;
70955: LD_ADDR_VAR 0 1
70959: PUSH
70960: CALL_OW 44
70964: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70965: LD_VAR 0 1
70969: PPUSH
70970: LD_INT 1
70972: PPUSH
70973: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70977: LD_INT 35
70979: PPUSH
70980: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70984: LD_VAR 0 1
70988: PPUSH
70989: LD_INT 22
70991: PUSH
70992: LD_OWVAR 2
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PPUSH
71001: CALL_OW 69
71005: PPUSH
71006: LD_VAR 0 1
71010: PPUSH
71011: CALL_OW 74
71015: PPUSH
71016: CALL_OW 115
// until IsDead ( un ) ;
71020: LD_VAR 0 1
71024: PPUSH
71025: CALL_OW 301
71029: IFFALSE 70977
// end ;
71031: PPOPN 1
71033: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71034: LD_EXP 43
71038: PUSH
71039: LD_EXP 83
71043: AND
71044: IFFALSE 71056
71046: GO 71048
71048: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71049: LD_STRING earthquake(getX(game), 0, 32)
71051: PPUSH
71052: CALL_OW 559
71056: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71057: LD_EXP 43
71061: PUSH
71062: LD_EXP 84
71066: AND
71067: IFFALSE 71158
71069: GO 71071
71071: DISABLE
71072: LD_INT 0
71074: PPUSH
// begin enable ;
71075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71076: LD_ADDR_VAR 0 1
71080: PUSH
71081: LD_INT 22
71083: PUSH
71084: LD_OWVAR 2
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 21
71095: PUSH
71096: LD_INT 2
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 33
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: LIST
71117: PPUSH
71118: CALL_OW 69
71122: ST_TO_ADDR
// if not tmp then
71123: LD_VAR 0 1
71127: NOT
71128: IFFALSE 71132
// exit ;
71130: GO 71158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71132: LD_VAR 0 1
71136: PUSH
71137: LD_INT 1
71139: PPUSH
71140: LD_VAR 0 1
71144: PPUSH
71145: CALL_OW 12
71149: ARRAY
71150: PPUSH
71151: LD_INT 1
71153: PPUSH
71154: CALL_OW 234
// end ;
71158: PPOPN 1
71160: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71161: LD_EXP 43
71165: PUSH
71166: LD_EXP 85
71170: AND
71171: IFFALSE 71312
71173: GO 71175
71175: DISABLE
71176: LD_INT 0
71178: PPUSH
71179: PPUSH
71180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71181: LD_ADDR_VAR 0 3
71185: PUSH
71186: LD_INT 22
71188: PUSH
71189: LD_OWVAR 2
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 25
71200: PUSH
71201: LD_INT 1
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PPUSH
71212: CALL_OW 69
71216: ST_TO_ADDR
// if not tmp then
71217: LD_VAR 0 3
71221: NOT
71222: IFFALSE 71226
// exit ;
71224: GO 71312
// un := tmp [ rand ( 1 , tmp ) ] ;
71226: LD_ADDR_VAR 0 2
71230: PUSH
71231: LD_VAR 0 3
71235: PUSH
71236: LD_INT 1
71238: PPUSH
71239: LD_VAR 0 3
71243: PPUSH
71244: CALL_OW 12
71248: ARRAY
71249: ST_TO_ADDR
// if Crawls ( un ) then
71250: LD_VAR 0 2
71254: PPUSH
71255: CALL_OW 318
71259: IFFALSE 71270
// ComWalk ( un ) ;
71261: LD_VAR 0 2
71265: PPUSH
71266: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71270: LD_VAR 0 2
71274: PPUSH
71275: LD_INT 9
71277: PPUSH
71278: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71282: LD_INT 28
71284: PPUSH
71285: LD_OWVAR 2
71289: PPUSH
71290: LD_INT 2
71292: PPUSH
71293: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71297: LD_INT 29
71299: PPUSH
71300: LD_OWVAR 2
71304: PPUSH
71305: LD_INT 2
71307: PPUSH
71308: CALL_OW 322
// end ;
71312: PPOPN 3
71314: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71315: LD_EXP 43
71319: PUSH
71320: LD_EXP 86
71324: AND
71325: IFFALSE 71436
71327: GO 71329
71329: DISABLE
71330: LD_INT 0
71332: PPUSH
71333: PPUSH
71334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: LD_INT 22
71342: PUSH
71343: LD_OWVAR 2
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 25
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PPUSH
71366: CALL_OW 69
71370: ST_TO_ADDR
// if not tmp then
71371: LD_VAR 0 3
71375: NOT
71376: IFFALSE 71380
// exit ;
71378: GO 71436
// un := tmp [ rand ( 1 , tmp ) ] ;
71380: LD_ADDR_VAR 0 2
71384: PUSH
71385: LD_VAR 0 3
71389: PUSH
71390: LD_INT 1
71392: PPUSH
71393: LD_VAR 0 3
71397: PPUSH
71398: CALL_OW 12
71402: ARRAY
71403: ST_TO_ADDR
// if Crawls ( un ) then
71404: LD_VAR 0 2
71408: PPUSH
71409: CALL_OW 318
71413: IFFALSE 71424
// ComWalk ( un ) ;
71415: LD_VAR 0 2
71419: PPUSH
71420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71424: LD_VAR 0 2
71428: PPUSH
71429: LD_INT 8
71431: PPUSH
71432: CALL_OW 336
// end ;
71436: PPOPN 3
71438: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71439: LD_EXP 43
71443: PUSH
71444: LD_EXP 87
71448: AND
71449: IFFALSE 71593
71451: GO 71453
71453: DISABLE
71454: LD_INT 0
71456: PPUSH
71457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71458: LD_ADDR_VAR 0 2
71462: PUSH
71463: LD_INT 22
71465: PUSH
71466: LD_OWVAR 2
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 21
71477: PUSH
71478: LD_INT 2
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 2
71487: PUSH
71488: LD_INT 34
71490: PUSH
71491: LD_INT 12
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 34
71500: PUSH
71501: LD_INT 51
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 34
71510: PUSH
71511: LD_INT 32
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: LIST
71528: PPUSH
71529: CALL_OW 69
71533: ST_TO_ADDR
// if not tmp then
71534: LD_VAR 0 2
71538: NOT
71539: IFFALSE 71543
// exit ;
71541: GO 71593
// for i in tmp do
71543: LD_ADDR_VAR 0 1
71547: PUSH
71548: LD_VAR 0 2
71552: PUSH
71553: FOR_IN
71554: IFFALSE 71591
// if GetCargo ( i , mat_artifact ) = 0 then
71556: LD_VAR 0 1
71560: PPUSH
71561: LD_INT 4
71563: PPUSH
71564: CALL_OW 289
71568: PUSH
71569: LD_INT 0
71571: EQUAL
71572: IFFALSE 71589
// SetCargo ( i , mat_siberit , 100 ) ;
71574: LD_VAR 0 1
71578: PPUSH
71579: LD_INT 3
71581: PPUSH
71582: LD_INT 100
71584: PPUSH
71585: CALL_OW 290
71589: GO 71553
71591: POP
71592: POP
// end ;
71593: PPOPN 2
71595: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71596: LD_EXP 43
71600: PUSH
71601: LD_EXP 88
71605: AND
71606: IFFALSE 71789
71608: GO 71610
71610: DISABLE
71611: LD_INT 0
71613: PPUSH
71614: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71615: LD_ADDR_VAR 0 2
71619: PUSH
71620: LD_INT 22
71622: PUSH
71623: LD_OWVAR 2
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PPUSH
71632: CALL_OW 69
71636: ST_TO_ADDR
// if not tmp then
71637: LD_VAR 0 2
71641: NOT
71642: IFFALSE 71646
// exit ;
71644: GO 71789
// for i := 1 to 2 do
71646: LD_ADDR_VAR 0 1
71650: PUSH
71651: DOUBLE
71652: LD_INT 1
71654: DEC
71655: ST_TO_ADDR
71656: LD_INT 2
71658: PUSH
71659: FOR_TO
71660: IFFALSE 71787
// begin uc_side := your_side ;
71662: LD_ADDR_OWVAR 20
71666: PUSH
71667: LD_OWVAR 2
71671: ST_TO_ADDR
// uc_nation := nation_american ;
71672: LD_ADDR_OWVAR 21
71676: PUSH
71677: LD_INT 1
71679: ST_TO_ADDR
// vc_chassis := us_morphling ;
71680: LD_ADDR_OWVAR 37
71684: PUSH
71685: LD_INT 5
71687: ST_TO_ADDR
// vc_engine := engine_siberite ;
71688: LD_ADDR_OWVAR 39
71692: PUSH
71693: LD_INT 3
71695: ST_TO_ADDR
// vc_control := control_computer ;
71696: LD_ADDR_OWVAR 38
71700: PUSH
71701: LD_INT 3
71703: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71704: LD_ADDR_OWVAR 40
71708: PUSH
71709: LD_INT 10
71711: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71712: LD_VAR 0 2
71716: PUSH
71717: LD_INT 1
71719: ARRAY
71720: PPUSH
71721: CALL_OW 310
71725: NOT
71726: IFFALSE 71773
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71728: CALL_OW 45
71732: PPUSH
71733: LD_VAR 0 2
71737: PUSH
71738: LD_INT 1
71740: ARRAY
71741: PPUSH
71742: CALL_OW 250
71746: PPUSH
71747: LD_VAR 0 2
71751: PUSH
71752: LD_INT 1
71754: ARRAY
71755: PPUSH
71756: CALL_OW 251
71760: PPUSH
71761: LD_INT 12
71763: PPUSH
71764: LD_INT 1
71766: PPUSH
71767: CALL_OW 50
71771: GO 71785
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71773: CALL_OW 45
71777: PPUSH
71778: LD_INT 1
71780: PPUSH
71781: CALL_OW 51
// end ;
71785: GO 71659
71787: POP
71788: POP
// end ;
71789: PPOPN 2
71791: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71792: LD_EXP 43
71796: PUSH
71797: LD_EXP 89
71801: AND
71802: IFFALSE 72024
71804: GO 71806
71806: DISABLE
71807: LD_INT 0
71809: PPUSH
71810: PPUSH
71811: PPUSH
71812: PPUSH
71813: PPUSH
71814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71815: LD_ADDR_VAR 0 6
71819: PUSH
71820: LD_INT 22
71822: PUSH
71823: LD_OWVAR 2
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 21
71834: PUSH
71835: LD_INT 1
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 3
71844: PUSH
71845: LD_INT 23
71847: PUSH
71848: LD_INT 0
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: LIST
71863: PPUSH
71864: CALL_OW 69
71868: ST_TO_ADDR
// if not tmp then
71869: LD_VAR 0 6
71873: NOT
71874: IFFALSE 71878
// exit ;
71876: GO 72024
// s1 := rand ( 1 , 4 ) ;
71878: LD_ADDR_VAR 0 2
71882: PUSH
71883: LD_INT 1
71885: PPUSH
71886: LD_INT 4
71888: PPUSH
71889: CALL_OW 12
71893: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71894: LD_ADDR_VAR 0 4
71898: PUSH
71899: LD_VAR 0 6
71903: PUSH
71904: LD_INT 1
71906: ARRAY
71907: PPUSH
71908: LD_VAR 0 2
71912: PPUSH
71913: CALL_OW 259
71917: ST_TO_ADDR
// if s1 = 1 then
71918: LD_VAR 0 2
71922: PUSH
71923: LD_INT 1
71925: EQUAL
71926: IFFALSE 71946
// s2 := rand ( 2 , 4 ) else
71928: LD_ADDR_VAR 0 3
71932: PUSH
71933: LD_INT 2
71935: PPUSH
71936: LD_INT 4
71938: PPUSH
71939: CALL_OW 12
71943: ST_TO_ADDR
71944: GO 71954
// s2 := 1 ;
71946: LD_ADDR_VAR 0 3
71950: PUSH
71951: LD_INT 1
71953: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71954: LD_ADDR_VAR 0 5
71958: PUSH
71959: LD_VAR 0 6
71963: PUSH
71964: LD_INT 1
71966: ARRAY
71967: PPUSH
71968: LD_VAR 0 3
71972: PPUSH
71973: CALL_OW 259
71977: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71978: LD_VAR 0 6
71982: PUSH
71983: LD_INT 1
71985: ARRAY
71986: PPUSH
71987: LD_VAR 0 2
71991: PPUSH
71992: LD_VAR 0 5
71996: PPUSH
71997: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72001: LD_VAR 0 6
72005: PUSH
72006: LD_INT 1
72008: ARRAY
72009: PPUSH
72010: LD_VAR 0 3
72014: PPUSH
72015: LD_VAR 0 4
72019: PPUSH
72020: CALL_OW 237
// end ;
72024: PPOPN 6
72026: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72027: LD_EXP 43
72031: PUSH
72032: LD_EXP 90
72036: AND
72037: IFFALSE 72116
72039: GO 72041
72041: DISABLE
72042: LD_INT 0
72044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72045: LD_ADDR_VAR 0 1
72049: PUSH
72050: LD_INT 22
72052: PUSH
72053: LD_OWVAR 2
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 30
72064: PUSH
72065: LD_INT 3
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PPUSH
72076: CALL_OW 69
72080: ST_TO_ADDR
// if not tmp then
72081: LD_VAR 0 1
72085: NOT
72086: IFFALSE 72090
// exit ;
72088: GO 72116
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72090: LD_VAR 0 1
72094: PUSH
72095: LD_INT 1
72097: PPUSH
72098: LD_VAR 0 1
72102: PPUSH
72103: CALL_OW 12
72107: ARRAY
72108: PPUSH
72109: LD_INT 1
72111: PPUSH
72112: CALL_OW 234
// end ;
72116: PPOPN 1
72118: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72119: LD_EXP 43
72123: PUSH
72124: LD_EXP 91
72128: AND
72129: IFFALSE 72241
72131: GO 72133
72133: DISABLE
72134: LD_INT 0
72136: PPUSH
72137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72138: LD_ADDR_VAR 0 2
72142: PUSH
72143: LD_INT 22
72145: PUSH
72146: LD_OWVAR 2
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 2
72157: PUSH
72158: LD_INT 30
72160: PUSH
72161: LD_INT 27
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 30
72170: PUSH
72171: LD_INT 26
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 30
72180: PUSH
72181: LD_INT 28
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PPUSH
72198: CALL_OW 69
72202: ST_TO_ADDR
// if not tmp then
72203: LD_VAR 0 2
72207: NOT
72208: IFFALSE 72212
// exit ;
72210: GO 72241
// for i in tmp do
72212: LD_ADDR_VAR 0 1
72216: PUSH
72217: LD_VAR 0 2
72221: PUSH
72222: FOR_IN
72223: IFFALSE 72239
// SetLives ( i , 1 ) ;
72225: LD_VAR 0 1
72229: PPUSH
72230: LD_INT 1
72232: PPUSH
72233: CALL_OW 234
72237: GO 72222
72239: POP
72240: POP
// end ;
72241: PPOPN 2
72243: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72244: LD_EXP 43
72248: PUSH
72249: LD_EXP 92
72253: AND
72254: IFFALSE 72541
72256: GO 72258
72258: DISABLE
72259: LD_INT 0
72261: PPUSH
72262: PPUSH
72263: PPUSH
// begin i := rand ( 1 , 7 ) ;
72264: LD_ADDR_VAR 0 1
72268: PUSH
72269: LD_INT 1
72271: PPUSH
72272: LD_INT 7
72274: PPUSH
72275: CALL_OW 12
72279: ST_TO_ADDR
// case i of 1 :
72280: LD_VAR 0 1
72284: PUSH
72285: LD_INT 1
72287: DOUBLE
72288: EQUAL
72289: IFTRUE 72293
72291: GO 72303
72293: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72294: LD_STRING earthquake(getX(game), 0, 32)
72296: PPUSH
72297: CALL_OW 559
72301: GO 72541
72303: LD_INT 2
72305: DOUBLE
72306: EQUAL
72307: IFTRUE 72311
72309: GO 72325
72311: POP
// begin ToLua ( displayStucuk(); ) ;
72312: LD_STRING displayStucuk();
72314: PPUSH
72315: CALL_OW 559
// ResetFog ;
72319: CALL_OW 335
// end ; 3 :
72323: GO 72541
72325: LD_INT 3
72327: DOUBLE
72328: EQUAL
72329: IFTRUE 72333
72331: GO 72437
72333: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72334: LD_ADDR_VAR 0 2
72338: PUSH
72339: LD_INT 22
72341: PUSH
72342: LD_OWVAR 2
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 25
72353: PUSH
72354: LD_INT 1
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PPUSH
72365: CALL_OW 69
72369: ST_TO_ADDR
// if not tmp then
72370: LD_VAR 0 2
72374: NOT
72375: IFFALSE 72379
// exit ;
72377: GO 72541
// un := tmp [ rand ( 1 , tmp ) ] ;
72379: LD_ADDR_VAR 0 3
72383: PUSH
72384: LD_VAR 0 2
72388: PUSH
72389: LD_INT 1
72391: PPUSH
72392: LD_VAR 0 2
72396: PPUSH
72397: CALL_OW 12
72401: ARRAY
72402: ST_TO_ADDR
// if Crawls ( un ) then
72403: LD_VAR 0 3
72407: PPUSH
72408: CALL_OW 318
72412: IFFALSE 72423
// ComWalk ( un ) ;
72414: LD_VAR 0 3
72418: PPUSH
72419: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72423: LD_VAR 0 3
72427: PPUSH
72428: LD_INT 8
72430: PPUSH
72431: CALL_OW 336
// end ; 4 :
72435: GO 72541
72437: LD_INT 4
72439: DOUBLE
72440: EQUAL
72441: IFTRUE 72445
72443: GO 72519
72445: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_INT 22
72453: PUSH
72454: LD_OWVAR 2
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 30
72465: PUSH
72466: LD_INT 29
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PPUSH
72477: CALL_OW 69
72481: ST_TO_ADDR
// if not tmp then
72482: LD_VAR 0 2
72486: NOT
72487: IFFALSE 72491
// exit ;
72489: GO 72541
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72491: LD_VAR 0 2
72495: PUSH
72496: LD_INT 1
72498: ARRAY
72499: PPUSH
72500: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72504: LD_VAR 0 2
72508: PUSH
72509: LD_INT 1
72511: ARRAY
72512: PPUSH
72513: CALL_OW 65
// end ; 5 .. 7 :
72517: GO 72541
72519: LD_INT 5
72521: DOUBLE
72522: GREATEREQUAL
72523: IFFALSE 72531
72525: LD_INT 7
72527: DOUBLE
72528: LESSEQUAL
72529: IFTRUE 72533
72531: GO 72540
72533: POP
// StreamSibBomb ; end ;
72534: CALL 68778 0 0
72538: GO 72541
72540: POP
// end ;
72541: PPOPN 3
72543: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72544: LD_EXP 43
72548: PUSH
72549: LD_EXP 93
72553: AND
72554: IFFALSE 72710
72556: GO 72558
72558: DISABLE
72559: LD_INT 0
72561: PPUSH
72562: PPUSH
72563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72564: LD_ADDR_VAR 0 2
72568: PUSH
72569: LD_INT 81
72571: PUSH
72572: LD_OWVAR 2
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 2
72583: PUSH
72584: LD_INT 21
72586: PUSH
72587: LD_INT 1
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 21
72596: PUSH
72597: LD_INT 2
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: LIST
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PPUSH
72613: CALL_OW 69
72617: ST_TO_ADDR
// if not tmp then
72618: LD_VAR 0 2
72622: NOT
72623: IFFALSE 72627
// exit ;
72625: GO 72710
// p := 0 ;
72627: LD_ADDR_VAR 0 3
72631: PUSH
72632: LD_INT 0
72634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72635: LD_INT 35
72637: PPUSH
72638: CALL_OW 67
// p := p + 1 ;
72642: LD_ADDR_VAR 0 3
72646: PUSH
72647: LD_VAR 0 3
72651: PUSH
72652: LD_INT 1
72654: PLUS
72655: ST_TO_ADDR
// for i in tmp do
72656: LD_ADDR_VAR 0 1
72660: PUSH
72661: LD_VAR 0 2
72665: PUSH
72666: FOR_IN
72667: IFFALSE 72698
// if GetLives ( i ) < 1000 then
72669: LD_VAR 0 1
72673: PPUSH
72674: CALL_OW 256
72678: PUSH
72679: LD_INT 1000
72681: LESS
72682: IFFALSE 72696
// SetLives ( i , 1000 ) ;
72684: LD_VAR 0 1
72688: PPUSH
72689: LD_INT 1000
72691: PPUSH
72692: CALL_OW 234
72696: GO 72666
72698: POP
72699: POP
// until p > 20 ;
72700: LD_VAR 0 3
72704: PUSH
72705: LD_INT 20
72707: GREATER
72708: IFFALSE 72635
// end ;
72710: PPOPN 3
72712: END
// every 0 0$1 trigger StreamModeActive and sTime do
72713: LD_EXP 43
72717: PUSH
72718: LD_EXP 94
72722: AND
72723: IFFALSE 72758
72725: GO 72727
72727: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72728: LD_INT 28
72730: PPUSH
72731: LD_OWVAR 2
72735: PPUSH
72736: LD_INT 2
72738: PPUSH
72739: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72743: LD_INT 30
72745: PPUSH
72746: LD_OWVAR 2
72750: PPUSH
72751: LD_INT 2
72753: PPUSH
72754: CALL_OW 322
// end ;
72758: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72759: LD_EXP 43
72763: PUSH
72764: LD_EXP 95
72768: AND
72769: IFFALSE 72890
72771: GO 72773
72773: DISABLE
72774: LD_INT 0
72776: PPUSH
72777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72778: LD_ADDR_VAR 0 2
72782: PUSH
72783: LD_INT 22
72785: PUSH
72786: LD_OWVAR 2
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 21
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 3
72807: PUSH
72808: LD_INT 23
72810: PUSH
72811: LD_INT 0
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: LIST
72826: PPUSH
72827: CALL_OW 69
72831: ST_TO_ADDR
// if not tmp then
72832: LD_VAR 0 2
72836: NOT
72837: IFFALSE 72841
// exit ;
72839: GO 72890
// for i in tmp do
72841: LD_ADDR_VAR 0 1
72845: PUSH
72846: LD_VAR 0 2
72850: PUSH
72851: FOR_IN
72852: IFFALSE 72888
// begin if Crawls ( i ) then
72854: LD_VAR 0 1
72858: PPUSH
72859: CALL_OW 318
72863: IFFALSE 72874
// ComWalk ( i ) ;
72865: LD_VAR 0 1
72869: PPUSH
72870: CALL_OW 138
// SetClass ( i , 2 ) ;
72874: LD_VAR 0 1
72878: PPUSH
72879: LD_INT 2
72881: PPUSH
72882: CALL_OW 336
// end ;
72886: GO 72851
72888: POP
72889: POP
// end ;
72890: PPOPN 2
72892: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72893: LD_EXP 43
72897: PUSH
72898: LD_EXP 96
72902: AND
72903: IFFALSE 73191
72905: GO 72907
72907: DISABLE
72908: LD_INT 0
72910: PPUSH
72911: PPUSH
72912: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72913: LD_OWVAR 2
72917: PPUSH
72918: LD_INT 9
72920: PPUSH
72921: LD_INT 1
72923: PPUSH
72924: LD_INT 1
72926: PPUSH
72927: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72931: LD_INT 9
72933: PPUSH
72934: LD_OWVAR 2
72938: PPUSH
72939: CALL_OW 343
// uc_side := 9 ;
72943: LD_ADDR_OWVAR 20
72947: PUSH
72948: LD_INT 9
72950: ST_TO_ADDR
// uc_nation := 2 ;
72951: LD_ADDR_OWVAR 21
72955: PUSH
72956: LD_INT 2
72958: ST_TO_ADDR
// hc_name := Dark Warrior ;
72959: LD_ADDR_OWVAR 26
72963: PUSH
72964: LD_STRING Dark Warrior
72966: ST_TO_ADDR
// hc_gallery :=  ;
72967: LD_ADDR_OWVAR 33
72971: PUSH
72972: LD_STRING 
72974: ST_TO_ADDR
// hc_noskilllimit := true ;
72975: LD_ADDR_OWVAR 76
72979: PUSH
72980: LD_INT 1
72982: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72983: LD_ADDR_OWVAR 31
72987: PUSH
72988: LD_INT 30
72990: PUSH
72991: LD_INT 30
72993: PUSH
72994: LD_INT 30
72996: PUSH
72997: LD_INT 30
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: ST_TO_ADDR
// un := CreateHuman ;
73006: LD_ADDR_VAR 0 3
73010: PUSH
73011: CALL_OW 44
73015: ST_TO_ADDR
// hc_noskilllimit := false ;
73016: LD_ADDR_OWVAR 76
73020: PUSH
73021: LD_INT 0
73023: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73024: LD_VAR 0 3
73028: PPUSH
73029: LD_INT 1
73031: PPUSH
73032: CALL_OW 51
// ToLua ( playRanger() ) ;
73036: LD_STRING playRanger()
73038: PPUSH
73039: CALL_OW 559
// p := 0 ;
73043: LD_ADDR_VAR 0 2
73047: PUSH
73048: LD_INT 0
73050: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73051: LD_INT 35
73053: PPUSH
73054: CALL_OW 67
// p := p + 1 ;
73058: LD_ADDR_VAR 0 2
73062: PUSH
73063: LD_VAR 0 2
73067: PUSH
73068: LD_INT 1
73070: PLUS
73071: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73072: LD_VAR 0 3
73076: PPUSH
73077: CALL_OW 256
73081: PUSH
73082: LD_INT 1000
73084: LESS
73085: IFFALSE 73099
// SetLives ( un , 1000 ) ;
73087: LD_VAR 0 3
73091: PPUSH
73092: LD_INT 1000
73094: PPUSH
73095: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73099: LD_VAR 0 3
73103: PPUSH
73104: LD_INT 81
73106: PUSH
73107: LD_OWVAR 2
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 91
73118: PUSH
73119: LD_VAR 0 3
73123: PUSH
73124: LD_INT 30
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: LIST
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PPUSH
73136: CALL_OW 69
73140: PPUSH
73141: LD_VAR 0 3
73145: PPUSH
73146: CALL_OW 74
73150: PPUSH
73151: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73155: LD_VAR 0 2
73159: PUSH
73160: LD_INT 80
73162: GREATER
73163: PUSH
73164: LD_VAR 0 3
73168: PPUSH
73169: CALL_OW 301
73173: OR
73174: IFFALSE 73051
// if un then
73176: LD_VAR 0 3
73180: IFFALSE 73191
// RemoveUnit ( un ) ;
73182: LD_VAR 0 3
73186: PPUSH
73187: CALL_OW 64
// end ;
73191: PPOPN 3
73193: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73194: LD_EXP 97
73198: IFFALSE 73314
73200: GO 73202
73202: DISABLE
73203: LD_INT 0
73205: PPUSH
73206: PPUSH
73207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73208: LD_ADDR_VAR 0 2
73212: PUSH
73213: LD_INT 81
73215: PUSH
73216: LD_OWVAR 2
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 21
73227: PUSH
73228: LD_INT 1
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PPUSH
73239: CALL_OW 69
73243: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73244: LD_STRING playComputer()
73246: PPUSH
73247: CALL_OW 559
// if not tmp then
73251: LD_VAR 0 2
73255: NOT
73256: IFFALSE 73260
// exit ;
73258: GO 73314
// for i in tmp do
73260: LD_ADDR_VAR 0 1
73264: PUSH
73265: LD_VAR 0 2
73269: PUSH
73270: FOR_IN
73271: IFFALSE 73312
// for j := 1 to 4 do
73273: LD_ADDR_VAR 0 3
73277: PUSH
73278: DOUBLE
73279: LD_INT 1
73281: DEC
73282: ST_TO_ADDR
73283: LD_INT 4
73285: PUSH
73286: FOR_TO
73287: IFFALSE 73308
// SetSkill ( i , j , 10 ) ;
73289: LD_VAR 0 1
73293: PPUSH
73294: LD_VAR 0 3
73298: PPUSH
73299: LD_INT 10
73301: PPUSH
73302: CALL_OW 237
73306: GO 73286
73308: POP
73309: POP
73310: GO 73270
73312: POP
73313: POP
// end ;
73314: PPOPN 3
73316: END
// every 0 0$1 trigger s30 do var i , tmp ;
73317: LD_EXP 98
73321: IFFALSE 73390
73323: GO 73325
73325: DISABLE
73326: LD_INT 0
73328: PPUSH
73329: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73330: LD_ADDR_VAR 0 2
73334: PUSH
73335: LD_INT 22
73337: PUSH
73338: LD_OWVAR 2
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PPUSH
73347: CALL_OW 69
73351: ST_TO_ADDR
// if not tmp then
73352: LD_VAR 0 2
73356: NOT
73357: IFFALSE 73361
// exit ;
73359: GO 73390
// for i in tmp do
73361: LD_ADDR_VAR 0 1
73365: PUSH
73366: LD_VAR 0 2
73370: PUSH
73371: FOR_IN
73372: IFFALSE 73388
// SetLives ( i , 300 ) ;
73374: LD_VAR 0 1
73378: PPUSH
73379: LD_INT 300
73381: PPUSH
73382: CALL_OW 234
73386: GO 73371
73388: POP
73389: POP
// end ;
73390: PPOPN 2
73392: END
// every 0 0$1 trigger s60 do var i , tmp ;
73393: LD_EXP 99
73397: IFFALSE 73466
73399: GO 73401
73401: DISABLE
73402: LD_INT 0
73404: PPUSH
73405: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73406: LD_ADDR_VAR 0 2
73410: PUSH
73411: LD_INT 22
73413: PUSH
73414: LD_OWVAR 2
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PPUSH
73423: CALL_OW 69
73427: ST_TO_ADDR
// if not tmp then
73428: LD_VAR 0 2
73432: NOT
73433: IFFALSE 73437
// exit ;
73435: GO 73466
// for i in tmp do
73437: LD_ADDR_VAR 0 1
73441: PUSH
73442: LD_VAR 0 2
73446: PUSH
73447: FOR_IN
73448: IFFALSE 73464
// SetLives ( i , 600 ) ;
73450: LD_VAR 0 1
73454: PPUSH
73455: LD_INT 600
73457: PPUSH
73458: CALL_OW 234
73462: GO 73447
73464: POP
73465: POP
// end ;
73466: PPOPN 2
73468: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73469: LD_INT 0
73471: PPUSH
// case cmd of 301 :
73472: LD_VAR 0 1
73476: PUSH
73477: LD_INT 301
73479: DOUBLE
73480: EQUAL
73481: IFTRUE 73485
73483: GO 73517
73485: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73486: LD_VAR 0 6
73490: PPUSH
73491: LD_VAR 0 7
73495: PPUSH
73496: LD_VAR 0 8
73500: PPUSH
73501: LD_VAR 0 4
73505: PPUSH
73506: LD_VAR 0 5
73510: PPUSH
73511: CALL 74718 0 5
73515: GO 73638
73517: LD_INT 302
73519: DOUBLE
73520: EQUAL
73521: IFTRUE 73525
73523: GO 73562
73525: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73526: LD_VAR 0 6
73530: PPUSH
73531: LD_VAR 0 7
73535: PPUSH
73536: LD_VAR 0 8
73540: PPUSH
73541: LD_VAR 0 9
73545: PPUSH
73546: LD_VAR 0 4
73550: PPUSH
73551: LD_VAR 0 5
73555: PPUSH
73556: CALL 74809 0 6
73560: GO 73638
73562: LD_INT 303
73564: DOUBLE
73565: EQUAL
73566: IFTRUE 73570
73568: GO 73607
73570: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73571: LD_VAR 0 6
73575: PPUSH
73576: LD_VAR 0 7
73580: PPUSH
73581: LD_VAR 0 8
73585: PPUSH
73586: LD_VAR 0 9
73590: PPUSH
73591: LD_VAR 0 4
73595: PPUSH
73596: LD_VAR 0 5
73600: PPUSH
73601: CALL 73643 0 6
73605: GO 73638
73607: LD_INT 304
73609: DOUBLE
73610: EQUAL
73611: IFTRUE 73615
73613: GO 73637
73615: POP
// hHackTeleport ( unit , x , y ) ; end ;
73616: LD_VAR 0 2
73620: PPUSH
73621: LD_VAR 0 4
73625: PPUSH
73626: LD_VAR 0 5
73630: PPUSH
73631: CALL 75402 0 3
73635: GO 73638
73637: POP
// end ;
73638: LD_VAR 0 12
73642: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73643: LD_INT 0
73645: PPUSH
73646: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73647: LD_VAR 0 1
73651: PUSH
73652: LD_INT 1
73654: LESS
73655: PUSH
73656: LD_VAR 0 1
73660: PUSH
73661: LD_INT 3
73663: GREATER
73664: OR
73665: PUSH
73666: LD_VAR 0 5
73670: PPUSH
73671: LD_VAR 0 6
73675: PPUSH
73676: CALL_OW 428
73680: OR
73681: IFFALSE 73685
// exit ;
73683: GO 74405
// uc_side := your_side ;
73685: LD_ADDR_OWVAR 20
73689: PUSH
73690: LD_OWVAR 2
73694: ST_TO_ADDR
// uc_nation := nation ;
73695: LD_ADDR_OWVAR 21
73699: PUSH
73700: LD_VAR 0 1
73704: ST_TO_ADDR
// bc_level = 1 ;
73705: LD_ADDR_OWVAR 43
73709: PUSH
73710: LD_INT 1
73712: ST_TO_ADDR
// case btype of 1 :
73713: LD_VAR 0 2
73717: PUSH
73718: LD_INT 1
73720: DOUBLE
73721: EQUAL
73722: IFTRUE 73726
73724: GO 73737
73726: POP
// bc_type := b_depot ; 2 :
73727: LD_ADDR_OWVAR 42
73731: PUSH
73732: LD_INT 0
73734: ST_TO_ADDR
73735: GO 74349
73737: LD_INT 2
73739: DOUBLE
73740: EQUAL
73741: IFTRUE 73745
73743: GO 73756
73745: POP
// bc_type := b_warehouse ; 3 :
73746: LD_ADDR_OWVAR 42
73750: PUSH
73751: LD_INT 1
73753: ST_TO_ADDR
73754: GO 74349
73756: LD_INT 3
73758: DOUBLE
73759: EQUAL
73760: IFTRUE 73764
73762: GO 73775
73764: POP
// bc_type := b_lab ; 4 .. 9 :
73765: LD_ADDR_OWVAR 42
73769: PUSH
73770: LD_INT 6
73772: ST_TO_ADDR
73773: GO 74349
73775: LD_INT 4
73777: DOUBLE
73778: GREATEREQUAL
73779: IFFALSE 73787
73781: LD_INT 9
73783: DOUBLE
73784: LESSEQUAL
73785: IFTRUE 73789
73787: GO 73841
73789: POP
// begin bc_type := b_lab_half ;
73790: LD_ADDR_OWVAR 42
73794: PUSH
73795: LD_INT 7
73797: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73798: LD_ADDR_OWVAR 44
73802: PUSH
73803: LD_INT 10
73805: PUSH
73806: LD_INT 11
73808: PUSH
73809: LD_INT 12
73811: PUSH
73812: LD_INT 15
73814: PUSH
73815: LD_INT 14
73817: PUSH
73818: LD_INT 13
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: LD_VAR 0 2
73833: PUSH
73834: LD_INT 3
73836: MINUS
73837: ARRAY
73838: ST_TO_ADDR
// end ; 10 .. 13 :
73839: GO 74349
73841: LD_INT 10
73843: DOUBLE
73844: GREATEREQUAL
73845: IFFALSE 73853
73847: LD_INT 13
73849: DOUBLE
73850: LESSEQUAL
73851: IFTRUE 73855
73853: GO 73932
73855: POP
// begin bc_type := b_lab_full ;
73856: LD_ADDR_OWVAR 42
73860: PUSH
73861: LD_INT 8
73863: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73864: LD_ADDR_OWVAR 44
73868: PUSH
73869: LD_INT 10
73871: PUSH
73872: LD_INT 12
73874: PUSH
73875: LD_INT 14
73877: PUSH
73878: LD_INT 13
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: PUSH
73887: LD_VAR 0 2
73891: PUSH
73892: LD_INT 9
73894: MINUS
73895: ARRAY
73896: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73897: LD_ADDR_OWVAR 45
73901: PUSH
73902: LD_INT 11
73904: PUSH
73905: LD_INT 15
73907: PUSH
73908: LD_INT 12
73910: PUSH
73911: LD_INT 15
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: PUSH
73920: LD_VAR 0 2
73924: PUSH
73925: LD_INT 9
73927: MINUS
73928: ARRAY
73929: ST_TO_ADDR
// end ; 14 :
73930: GO 74349
73932: LD_INT 14
73934: DOUBLE
73935: EQUAL
73936: IFTRUE 73940
73938: GO 73951
73940: POP
// bc_type := b_workshop ; 15 :
73941: LD_ADDR_OWVAR 42
73945: PUSH
73946: LD_INT 2
73948: ST_TO_ADDR
73949: GO 74349
73951: LD_INT 15
73953: DOUBLE
73954: EQUAL
73955: IFTRUE 73959
73957: GO 73970
73959: POP
// bc_type := b_factory ; 16 :
73960: LD_ADDR_OWVAR 42
73964: PUSH
73965: LD_INT 3
73967: ST_TO_ADDR
73968: GO 74349
73970: LD_INT 16
73972: DOUBLE
73973: EQUAL
73974: IFTRUE 73978
73976: GO 73989
73978: POP
// bc_type := b_ext_gun ; 17 :
73979: LD_ADDR_OWVAR 42
73983: PUSH
73984: LD_INT 17
73986: ST_TO_ADDR
73987: GO 74349
73989: LD_INT 17
73991: DOUBLE
73992: EQUAL
73993: IFTRUE 73997
73995: GO 74025
73997: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73998: LD_ADDR_OWVAR 42
74002: PUSH
74003: LD_INT 19
74005: PUSH
74006: LD_INT 23
74008: PUSH
74009: LD_INT 19
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: LIST
74016: PUSH
74017: LD_VAR 0 1
74021: ARRAY
74022: ST_TO_ADDR
74023: GO 74349
74025: LD_INT 18
74027: DOUBLE
74028: EQUAL
74029: IFTRUE 74033
74031: GO 74044
74033: POP
// bc_type := b_ext_radar ; 19 :
74034: LD_ADDR_OWVAR 42
74038: PUSH
74039: LD_INT 20
74041: ST_TO_ADDR
74042: GO 74349
74044: LD_INT 19
74046: DOUBLE
74047: EQUAL
74048: IFTRUE 74052
74050: GO 74063
74052: POP
// bc_type := b_ext_radio ; 20 :
74053: LD_ADDR_OWVAR 42
74057: PUSH
74058: LD_INT 22
74060: ST_TO_ADDR
74061: GO 74349
74063: LD_INT 20
74065: DOUBLE
74066: EQUAL
74067: IFTRUE 74071
74069: GO 74082
74071: POP
// bc_type := b_ext_siberium ; 21 :
74072: LD_ADDR_OWVAR 42
74076: PUSH
74077: LD_INT 21
74079: ST_TO_ADDR
74080: GO 74349
74082: LD_INT 21
74084: DOUBLE
74085: EQUAL
74086: IFTRUE 74090
74088: GO 74101
74090: POP
// bc_type := b_ext_computer ; 22 :
74091: LD_ADDR_OWVAR 42
74095: PUSH
74096: LD_INT 24
74098: ST_TO_ADDR
74099: GO 74349
74101: LD_INT 22
74103: DOUBLE
74104: EQUAL
74105: IFTRUE 74109
74107: GO 74120
74109: POP
// bc_type := b_ext_track ; 23 :
74110: LD_ADDR_OWVAR 42
74114: PUSH
74115: LD_INT 16
74117: ST_TO_ADDR
74118: GO 74349
74120: LD_INT 23
74122: DOUBLE
74123: EQUAL
74124: IFTRUE 74128
74126: GO 74139
74128: POP
// bc_type := b_ext_laser ; 24 :
74129: LD_ADDR_OWVAR 42
74133: PUSH
74134: LD_INT 25
74136: ST_TO_ADDR
74137: GO 74349
74139: LD_INT 24
74141: DOUBLE
74142: EQUAL
74143: IFTRUE 74147
74145: GO 74158
74147: POP
// bc_type := b_control_tower ; 25 :
74148: LD_ADDR_OWVAR 42
74152: PUSH
74153: LD_INT 36
74155: ST_TO_ADDR
74156: GO 74349
74158: LD_INT 25
74160: DOUBLE
74161: EQUAL
74162: IFTRUE 74166
74164: GO 74177
74166: POP
// bc_type := b_breastwork ; 26 :
74167: LD_ADDR_OWVAR 42
74171: PUSH
74172: LD_INT 31
74174: ST_TO_ADDR
74175: GO 74349
74177: LD_INT 26
74179: DOUBLE
74180: EQUAL
74181: IFTRUE 74185
74183: GO 74196
74185: POP
// bc_type := b_bunker ; 27 :
74186: LD_ADDR_OWVAR 42
74190: PUSH
74191: LD_INT 32
74193: ST_TO_ADDR
74194: GO 74349
74196: LD_INT 27
74198: DOUBLE
74199: EQUAL
74200: IFTRUE 74204
74202: GO 74215
74204: POP
// bc_type := b_turret ; 28 :
74205: LD_ADDR_OWVAR 42
74209: PUSH
74210: LD_INT 33
74212: ST_TO_ADDR
74213: GO 74349
74215: LD_INT 28
74217: DOUBLE
74218: EQUAL
74219: IFTRUE 74223
74221: GO 74234
74223: POP
// bc_type := b_armoury ; 29 :
74224: LD_ADDR_OWVAR 42
74228: PUSH
74229: LD_INT 4
74231: ST_TO_ADDR
74232: GO 74349
74234: LD_INT 29
74236: DOUBLE
74237: EQUAL
74238: IFTRUE 74242
74240: GO 74253
74242: POP
// bc_type := b_barracks ; 30 :
74243: LD_ADDR_OWVAR 42
74247: PUSH
74248: LD_INT 5
74250: ST_TO_ADDR
74251: GO 74349
74253: LD_INT 30
74255: DOUBLE
74256: EQUAL
74257: IFTRUE 74261
74259: GO 74272
74261: POP
// bc_type := b_solar_power ; 31 :
74262: LD_ADDR_OWVAR 42
74266: PUSH
74267: LD_INT 27
74269: ST_TO_ADDR
74270: GO 74349
74272: LD_INT 31
74274: DOUBLE
74275: EQUAL
74276: IFTRUE 74280
74278: GO 74291
74280: POP
// bc_type := b_oil_power ; 32 :
74281: LD_ADDR_OWVAR 42
74285: PUSH
74286: LD_INT 26
74288: ST_TO_ADDR
74289: GO 74349
74291: LD_INT 32
74293: DOUBLE
74294: EQUAL
74295: IFTRUE 74299
74297: GO 74310
74299: POP
// bc_type := b_siberite_power ; 33 :
74300: LD_ADDR_OWVAR 42
74304: PUSH
74305: LD_INT 28
74307: ST_TO_ADDR
74308: GO 74349
74310: LD_INT 33
74312: DOUBLE
74313: EQUAL
74314: IFTRUE 74318
74316: GO 74329
74318: POP
// bc_type := b_oil_mine ; 34 :
74319: LD_ADDR_OWVAR 42
74323: PUSH
74324: LD_INT 29
74326: ST_TO_ADDR
74327: GO 74349
74329: LD_INT 34
74331: DOUBLE
74332: EQUAL
74333: IFTRUE 74337
74335: GO 74348
74337: POP
// bc_type := b_siberite_mine ; end ;
74338: LD_ADDR_OWVAR 42
74342: PUSH
74343: LD_INT 30
74345: ST_TO_ADDR
74346: GO 74349
74348: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74349: LD_ADDR_VAR 0 8
74353: PUSH
74354: LD_VAR 0 5
74358: PPUSH
74359: LD_VAR 0 6
74363: PPUSH
74364: LD_VAR 0 3
74368: PPUSH
74369: CALL_OW 47
74373: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74374: LD_OWVAR 42
74378: PUSH
74379: LD_INT 32
74381: PUSH
74382: LD_INT 33
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: IN
74389: IFFALSE 74405
// PlaceWeaponTurret ( b , weapon ) ;
74391: LD_VAR 0 8
74395: PPUSH
74396: LD_VAR 0 4
74400: PPUSH
74401: CALL_OW 431
// end ;
74405: LD_VAR 0 7
74409: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74410: LD_INT 0
74412: PPUSH
74413: PPUSH
74414: PPUSH
74415: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74416: LD_ADDR_VAR 0 4
74420: PUSH
74421: LD_INT 22
74423: PUSH
74424: LD_OWVAR 2
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 2
74435: PUSH
74436: LD_INT 30
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 30
74448: PUSH
74449: LD_INT 1
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PPUSH
74465: CALL_OW 69
74469: ST_TO_ADDR
// if not tmp then
74470: LD_VAR 0 4
74474: NOT
74475: IFFALSE 74479
// exit ;
74477: GO 74538
// for i in tmp do
74479: LD_ADDR_VAR 0 2
74483: PUSH
74484: LD_VAR 0 4
74488: PUSH
74489: FOR_IN
74490: IFFALSE 74536
// for j = 1 to 3 do
74492: LD_ADDR_VAR 0 3
74496: PUSH
74497: DOUBLE
74498: LD_INT 1
74500: DEC
74501: ST_TO_ADDR
74502: LD_INT 3
74504: PUSH
74505: FOR_TO
74506: IFFALSE 74532
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74508: LD_VAR 0 2
74512: PPUSH
74513: CALL_OW 274
74517: PPUSH
74518: LD_VAR 0 3
74522: PPUSH
74523: LD_INT 99999
74525: PPUSH
74526: CALL_OW 277
74530: GO 74505
74532: POP
74533: POP
74534: GO 74489
74536: POP
74537: POP
// end ;
74538: LD_VAR 0 1
74542: RET
// export function hHackSetLevel10 ; var i , j ; begin
74543: LD_INT 0
74545: PPUSH
74546: PPUSH
74547: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74548: LD_ADDR_VAR 0 2
74552: PUSH
74553: LD_INT 21
74555: PUSH
74556: LD_INT 1
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PPUSH
74563: CALL_OW 69
74567: PUSH
74568: FOR_IN
74569: IFFALSE 74621
// if IsSelected ( i ) then
74571: LD_VAR 0 2
74575: PPUSH
74576: CALL_OW 306
74580: IFFALSE 74619
// begin for j := 1 to 4 do
74582: LD_ADDR_VAR 0 3
74586: PUSH
74587: DOUBLE
74588: LD_INT 1
74590: DEC
74591: ST_TO_ADDR
74592: LD_INT 4
74594: PUSH
74595: FOR_TO
74596: IFFALSE 74617
// SetSkill ( i , j , 10 ) ;
74598: LD_VAR 0 2
74602: PPUSH
74603: LD_VAR 0 3
74607: PPUSH
74608: LD_INT 10
74610: PPUSH
74611: CALL_OW 237
74615: GO 74595
74617: POP
74618: POP
// end ;
74619: GO 74568
74621: POP
74622: POP
// end ;
74623: LD_VAR 0 1
74627: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74628: LD_INT 0
74630: PPUSH
74631: PPUSH
74632: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74633: LD_ADDR_VAR 0 2
74637: PUSH
74638: LD_INT 22
74640: PUSH
74641: LD_OWVAR 2
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 21
74652: PUSH
74653: LD_INT 1
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PPUSH
74664: CALL_OW 69
74668: PUSH
74669: FOR_IN
74670: IFFALSE 74711
// begin for j := 1 to 4 do
74672: LD_ADDR_VAR 0 3
74676: PUSH
74677: DOUBLE
74678: LD_INT 1
74680: DEC
74681: ST_TO_ADDR
74682: LD_INT 4
74684: PUSH
74685: FOR_TO
74686: IFFALSE 74707
// SetSkill ( i , j , 10 ) ;
74688: LD_VAR 0 2
74692: PPUSH
74693: LD_VAR 0 3
74697: PPUSH
74698: LD_INT 10
74700: PPUSH
74701: CALL_OW 237
74705: GO 74685
74707: POP
74708: POP
// end ;
74709: GO 74669
74711: POP
74712: POP
// end ;
74713: LD_VAR 0 1
74717: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74718: LD_INT 0
74720: PPUSH
// uc_side := your_side ;
74721: LD_ADDR_OWVAR 20
74725: PUSH
74726: LD_OWVAR 2
74730: ST_TO_ADDR
// uc_nation := nation ;
74731: LD_ADDR_OWVAR 21
74735: PUSH
74736: LD_VAR 0 1
74740: ST_TO_ADDR
// InitHc ;
74741: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74745: LD_INT 0
74747: PPUSH
74748: LD_VAR 0 2
74752: PPUSH
74753: LD_VAR 0 3
74757: PPUSH
74758: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74762: LD_VAR 0 4
74766: PPUSH
74767: LD_VAR 0 5
74771: PPUSH
74772: CALL_OW 428
74776: PUSH
74777: LD_INT 0
74779: EQUAL
74780: IFFALSE 74804
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74782: CALL_OW 44
74786: PPUSH
74787: LD_VAR 0 4
74791: PPUSH
74792: LD_VAR 0 5
74796: PPUSH
74797: LD_INT 1
74799: PPUSH
74800: CALL_OW 48
// end ;
74804: LD_VAR 0 6
74808: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74809: LD_INT 0
74811: PPUSH
74812: PPUSH
// uc_side := your_side ;
74813: LD_ADDR_OWVAR 20
74817: PUSH
74818: LD_OWVAR 2
74822: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74823: LD_VAR 0 1
74827: PUSH
74828: LD_INT 1
74830: PUSH
74831: LD_INT 2
74833: PUSH
74834: LD_INT 3
74836: PUSH
74837: LD_INT 4
74839: PUSH
74840: LD_INT 5
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: IN
74850: IFFALSE 74862
// uc_nation := nation_american else
74852: LD_ADDR_OWVAR 21
74856: PUSH
74857: LD_INT 1
74859: ST_TO_ADDR
74860: GO 74905
// if chassis in [ 11 , 12 , 13 , 14 ] then
74862: LD_VAR 0 1
74866: PUSH
74867: LD_INT 11
74869: PUSH
74870: LD_INT 12
74872: PUSH
74873: LD_INT 13
74875: PUSH
74876: LD_INT 14
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: IN
74885: IFFALSE 74897
// uc_nation := nation_arabian else
74887: LD_ADDR_OWVAR 21
74891: PUSH
74892: LD_INT 2
74894: ST_TO_ADDR
74895: GO 74905
// uc_nation := nation_russian ;
74897: LD_ADDR_OWVAR 21
74901: PUSH
74902: LD_INT 3
74904: ST_TO_ADDR
// vc_chassis := chassis ;
74905: LD_ADDR_OWVAR 37
74909: PUSH
74910: LD_VAR 0 1
74914: ST_TO_ADDR
// vc_engine := engine ;
74915: LD_ADDR_OWVAR 39
74919: PUSH
74920: LD_VAR 0 2
74924: ST_TO_ADDR
// vc_control := control ;
74925: LD_ADDR_OWVAR 38
74929: PUSH
74930: LD_VAR 0 3
74934: ST_TO_ADDR
// vc_weapon := weapon ;
74935: LD_ADDR_OWVAR 40
74939: PUSH
74940: LD_VAR 0 4
74944: ST_TO_ADDR
// un := CreateVehicle ;
74945: LD_ADDR_VAR 0 8
74949: PUSH
74950: CALL_OW 45
74954: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74955: LD_VAR 0 8
74959: PPUSH
74960: LD_INT 0
74962: PPUSH
74963: LD_INT 5
74965: PPUSH
74966: CALL_OW 12
74970: PPUSH
74971: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74975: LD_VAR 0 8
74979: PPUSH
74980: LD_VAR 0 5
74984: PPUSH
74985: LD_VAR 0 6
74989: PPUSH
74990: LD_INT 1
74992: PPUSH
74993: CALL_OW 48
// end ;
74997: LD_VAR 0 7
75001: RET
// export hInvincible ; every 1 do
75002: GO 75004
75004: DISABLE
// hInvincible := [ ] ;
75005: LD_ADDR_EXP 100
75009: PUSH
75010: EMPTY
75011: ST_TO_ADDR
75012: END
// every 10 do var i ;
75013: GO 75015
75015: DISABLE
75016: LD_INT 0
75018: PPUSH
// begin enable ;
75019: ENABLE
// if not hInvincible then
75020: LD_EXP 100
75024: NOT
75025: IFFALSE 75029
// exit ;
75027: GO 75073
// for i in hInvincible do
75029: LD_ADDR_VAR 0 1
75033: PUSH
75034: LD_EXP 100
75038: PUSH
75039: FOR_IN
75040: IFFALSE 75071
// if GetLives ( i ) < 1000 then
75042: LD_VAR 0 1
75046: PPUSH
75047: CALL_OW 256
75051: PUSH
75052: LD_INT 1000
75054: LESS
75055: IFFALSE 75069
// SetLives ( i , 1000 ) ;
75057: LD_VAR 0 1
75061: PPUSH
75062: LD_INT 1000
75064: PPUSH
75065: CALL_OW 234
75069: GO 75039
75071: POP
75072: POP
// end ;
75073: PPOPN 1
75075: END
// export function hHackInvincible ; var i ; begin
75076: LD_INT 0
75078: PPUSH
75079: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75080: LD_ADDR_VAR 0 2
75084: PUSH
75085: LD_INT 2
75087: PUSH
75088: LD_INT 21
75090: PUSH
75091: LD_INT 1
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 21
75100: PUSH
75101: LD_INT 2
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: PPUSH
75113: CALL_OW 69
75117: PUSH
75118: FOR_IN
75119: IFFALSE 75180
// if IsSelected ( i ) then
75121: LD_VAR 0 2
75125: PPUSH
75126: CALL_OW 306
75130: IFFALSE 75178
// begin if i in hInvincible then
75132: LD_VAR 0 2
75136: PUSH
75137: LD_EXP 100
75141: IN
75142: IFFALSE 75162
// hInvincible := hInvincible diff i else
75144: LD_ADDR_EXP 100
75148: PUSH
75149: LD_EXP 100
75153: PUSH
75154: LD_VAR 0 2
75158: DIFF
75159: ST_TO_ADDR
75160: GO 75178
// hInvincible := hInvincible union i ;
75162: LD_ADDR_EXP 100
75166: PUSH
75167: LD_EXP 100
75171: PUSH
75172: LD_VAR 0 2
75176: UNION
75177: ST_TO_ADDR
// end ;
75178: GO 75118
75180: POP
75181: POP
// end ;
75182: LD_VAR 0 1
75186: RET
// export function hHackInvisible ; var i , j ; begin
75187: LD_INT 0
75189: PPUSH
75190: PPUSH
75191: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75192: LD_ADDR_VAR 0 2
75196: PUSH
75197: LD_INT 21
75199: PUSH
75200: LD_INT 1
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PPUSH
75207: CALL_OW 69
75211: PUSH
75212: FOR_IN
75213: IFFALSE 75237
// if IsSelected ( i ) then
75215: LD_VAR 0 2
75219: PPUSH
75220: CALL_OW 306
75224: IFFALSE 75235
// ComForceInvisible ( i ) ;
75226: LD_VAR 0 2
75230: PPUSH
75231: CALL_OW 496
75235: GO 75212
75237: POP
75238: POP
// end ;
75239: LD_VAR 0 1
75243: RET
// export function hHackChangeYourSide ; begin
75244: LD_INT 0
75246: PPUSH
// if your_side = 8 then
75247: LD_OWVAR 2
75251: PUSH
75252: LD_INT 8
75254: EQUAL
75255: IFFALSE 75267
// your_side := 0 else
75257: LD_ADDR_OWVAR 2
75261: PUSH
75262: LD_INT 0
75264: ST_TO_ADDR
75265: GO 75281
// your_side := your_side + 1 ;
75267: LD_ADDR_OWVAR 2
75271: PUSH
75272: LD_OWVAR 2
75276: PUSH
75277: LD_INT 1
75279: PLUS
75280: ST_TO_ADDR
// end ;
75281: LD_VAR 0 1
75285: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75286: LD_INT 0
75288: PPUSH
75289: PPUSH
75290: PPUSH
// for i in all_units do
75291: LD_ADDR_VAR 0 2
75295: PUSH
75296: LD_OWVAR 3
75300: PUSH
75301: FOR_IN
75302: IFFALSE 75380
// if IsSelected ( i ) then
75304: LD_VAR 0 2
75308: PPUSH
75309: CALL_OW 306
75313: IFFALSE 75378
// begin j := GetSide ( i ) ;
75315: LD_ADDR_VAR 0 3
75319: PUSH
75320: LD_VAR 0 2
75324: PPUSH
75325: CALL_OW 255
75329: ST_TO_ADDR
// if j = 8 then
75330: LD_VAR 0 3
75334: PUSH
75335: LD_INT 8
75337: EQUAL
75338: IFFALSE 75350
// j := 0 else
75340: LD_ADDR_VAR 0 3
75344: PUSH
75345: LD_INT 0
75347: ST_TO_ADDR
75348: GO 75364
// j := j + 1 ;
75350: LD_ADDR_VAR 0 3
75354: PUSH
75355: LD_VAR 0 3
75359: PUSH
75360: LD_INT 1
75362: PLUS
75363: ST_TO_ADDR
// SetSide ( i , j ) ;
75364: LD_VAR 0 2
75368: PPUSH
75369: LD_VAR 0 3
75373: PPUSH
75374: CALL_OW 235
// end ;
75378: GO 75301
75380: POP
75381: POP
// end ;
75382: LD_VAR 0 1
75386: RET
// export function hHackFog ; begin
75387: LD_INT 0
75389: PPUSH
// FogOff ( true ) ;
75390: LD_INT 1
75392: PPUSH
75393: CALL_OW 344
// end ;
75397: LD_VAR 0 1
75401: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75402: LD_INT 0
75404: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75405: LD_VAR 0 1
75409: PPUSH
75410: LD_VAR 0 2
75414: PPUSH
75415: LD_VAR 0 3
75419: PPUSH
75420: LD_INT 1
75422: PPUSH
75423: LD_INT 1
75425: PPUSH
75426: CALL_OW 483
// CenterOnXY ( x , y ) ;
75430: LD_VAR 0 2
75434: PPUSH
75435: LD_VAR 0 3
75439: PPUSH
75440: CALL_OW 84
// end ;
75444: LD_VAR 0 4
75448: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75449: LD_INT 0
75451: PPUSH
75452: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75453: LD_VAR 0 1
75457: NOT
75458: PUSH
75459: LD_VAR 0 2
75463: PPUSH
75464: LD_VAR 0 3
75468: PPUSH
75469: CALL_OW 488
75473: NOT
75474: OR
75475: PUSH
75476: LD_VAR 0 1
75480: PPUSH
75481: CALL_OW 266
75485: PUSH
75486: LD_INT 3
75488: NONEQUAL
75489: PUSH
75490: LD_VAR 0 1
75494: PPUSH
75495: CALL_OW 247
75499: PUSH
75500: LD_INT 1
75502: EQUAL
75503: NOT
75504: AND
75505: OR
75506: IFFALSE 75510
// exit ;
75508: GO 75659
// if GetType ( factory ) = unit_human then
75510: LD_VAR 0 1
75514: PPUSH
75515: CALL_OW 247
75519: PUSH
75520: LD_INT 1
75522: EQUAL
75523: IFFALSE 75540
// factory := IsInUnit ( factory ) ;
75525: LD_ADDR_VAR 0 1
75529: PUSH
75530: LD_VAR 0 1
75534: PPUSH
75535: CALL_OW 310
75539: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75540: LD_VAR 0 1
75544: PPUSH
75545: CALL_OW 266
75549: PUSH
75550: LD_INT 3
75552: NONEQUAL
75553: IFFALSE 75557
// exit ;
75555: GO 75659
// if HexInfo ( x , y ) = factory then
75557: LD_VAR 0 2
75561: PPUSH
75562: LD_VAR 0 3
75566: PPUSH
75567: CALL_OW 428
75571: PUSH
75572: LD_VAR 0 1
75576: EQUAL
75577: IFFALSE 75604
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75579: LD_ADDR_EXP 101
75583: PUSH
75584: LD_EXP 101
75588: PPUSH
75589: LD_VAR 0 1
75593: PPUSH
75594: LD_INT 0
75596: PPUSH
75597: CALL_OW 1
75601: ST_TO_ADDR
75602: GO 75655
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75604: LD_ADDR_EXP 101
75608: PUSH
75609: LD_EXP 101
75613: PPUSH
75614: LD_VAR 0 1
75618: PPUSH
75619: LD_VAR 0 1
75623: PPUSH
75624: CALL_OW 255
75628: PUSH
75629: LD_VAR 0 1
75633: PUSH
75634: LD_VAR 0 2
75638: PUSH
75639: LD_VAR 0 3
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: PPUSH
75650: CALL_OW 1
75654: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75655: CALL 75664 0 0
// end ;
75659: LD_VAR 0 4
75663: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75664: LD_INT 0
75666: PPUSH
75667: PPUSH
75668: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75669: LD_STRING resetFactoryWaypoint();
75671: PPUSH
75672: CALL_OW 559
// if factoryWaypoints then
75676: LD_EXP 101
75680: IFFALSE 75806
// begin list := PrepareArray ( factoryWaypoints ) ;
75682: LD_ADDR_VAR 0 3
75686: PUSH
75687: LD_EXP 101
75691: PPUSH
75692: CALL 56464 0 1
75696: ST_TO_ADDR
// for i := 1 to list do
75697: LD_ADDR_VAR 0 2
75701: PUSH
75702: DOUBLE
75703: LD_INT 1
75705: DEC
75706: ST_TO_ADDR
75707: LD_VAR 0 3
75711: PUSH
75712: FOR_TO
75713: IFFALSE 75804
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75715: LD_STRING setFactoryWaypointXY(
75717: PUSH
75718: LD_VAR 0 3
75722: PUSH
75723: LD_VAR 0 2
75727: ARRAY
75728: PUSH
75729: LD_INT 1
75731: ARRAY
75732: STR
75733: PUSH
75734: LD_STRING ,
75736: STR
75737: PUSH
75738: LD_VAR 0 3
75742: PUSH
75743: LD_VAR 0 2
75747: ARRAY
75748: PUSH
75749: LD_INT 2
75751: ARRAY
75752: STR
75753: PUSH
75754: LD_STRING ,
75756: STR
75757: PUSH
75758: LD_VAR 0 3
75762: PUSH
75763: LD_VAR 0 2
75767: ARRAY
75768: PUSH
75769: LD_INT 3
75771: ARRAY
75772: STR
75773: PUSH
75774: LD_STRING ,
75776: STR
75777: PUSH
75778: LD_VAR 0 3
75782: PUSH
75783: LD_VAR 0 2
75787: ARRAY
75788: PUSH
75789: LD_INT 4
75791: ARRAY
75792: STR
75793: PUSH
75794: LD_STRING )
75796: STR
75797: PPUSH
75798: CALL_OW 559
75802: GO 75712
75804: POP
75805: POP
// end ; end ;
75806: LD_VAR 0 1
75810: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75811: LD_INT 0
75813: PPUSH
// if HexInfo ( x , y ) = warehouse then
75814: LD_VAR 0 2
75818: PPUSH
75819: LD_VAR 0 3
75823: PPUSH
75824: CALL_OW 428
75828: PUSH
75829: LD_VAR 0 1
75833: EQUAL
75834: IFFALSE 75861
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75836: LD_ADDR_EXP 102
75840: PUSH
75841: LD_EXP 102
75845: PPUSH
75846: LD_VAR 0 1
75850: PPUSH
75851: LD_INT 0
75853: PPUSH
75854: CALL_OW 1
75858: ST_TO_ADDR
75859: GO 75912
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75861: LD_ADDR_EXP 102
75865: PUSH
75866: LD_EXP 102
75870: PPUSH
75871: LD_VAR 0 1
75875: PPUSH
75876: LD_VAR 0 1
75880: PPUSH
75881: CALL_OW 255
75885: PUSH
75886: LD_VAR 0 1
75890: PUSH
75891: LD_VAR 0 2
75895: PUSH
75896: LD_VAR 0 3
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: PPUSH
75907: CALL_OW 1
75911: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75912: CALL 75921 0 0
// end ;
75916: LD_VAR 0 4
75920: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75921: LD_INT 0
75923: PPUSH
75924: PPUSH
75925: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75926: LD_STRING resetWarehouseGatheringPoints();
75928: PPUSH
75929: CALL_OW 559
// if warehouseGatheringPoints then
75933: LD_EXP 102
75937: IFFALSE 76063
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75939: LD_ADDR_VAR 0 3
75943: PUSH
75944: LD_EXP 102
75948: PPUSH
75949: CALL 56464 0 1
75953: ST_TO_ADDR
// for i := 1 to list do
75954: LD_ADDR_VAR 0 2
75958: PUSH
75959: DOUBLE
75960: LD_INT 1
75962: DEC
75963: ST_TO_ADDR
75964: LD_VAR 0 3
75968: PUSH
75969: FOR_TO
75970: IFFALSE 76061
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75972: LD_STRING setWarehouseGatheringPointXY(
75974: PUSH
75975: LD_VAR 0 3
75979: PUSH
75980: LD_VAR 0 2
75984: ARRAY
75985: PUSH
75986: LD_INT 1
75988: ARRAY
75989: STR
75990: PUSH
75991: LD_STRING ,
75993: STR
75994: PUSH
75995: LD_VAR 0 3
75999: PUSH
76000: LD_VAR 0 2
76004: ARRAY
76005: PUSH
76006: LD_INT 2
76008: ARRAY
76009: STR
76010: PUSH
76011: LD_STRING ,
76013: STR
76014: PUSH
76015: LD_VAR 0 3
76019: PUSH
76020: LD_VAR 0 2
76024: ARRAY
76025: PUSH
76026: LD_INT 3
76028: ARRAY
76029: STR
76030: PUSH
76031: LD_STRING ,
76033: STR
76034: PUSH
76035: LD_VAR 0 3
76039: PUSH
76040: LD_VAR 0 2
76044: ARRAY
76045: PUSH
76046: LD_INT 4
76048: ARRAY
76049: STR
76050: PUSH
76051: LD_STRING )
76053: STR
76054: PPUSH
76055: CALL_OW 559
76059: GO 75969
76061: POP
76062: POP
// end ; end ;
76063: LD_VAR 0 1
76067: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76068: LD_EXP 102
76072: IFFALSE 76757
76074: GO 76076
76076: DISABLE
76077: LD_INT 0
76079: PPUSH
76080: PPUSH
76081: PPUSH
76082: PPUSH
76083: PPUSH
76084: PPUSH
76085: PPUSH
76086: PPUSH
76087: PPUSH
// begin enable ;
76088: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76089: LD_ADDR_VAR 0 3
76093: PUSH
76094: LD_EXP 102
76098: PPUSH
76099: CALL 56464 0 1
76103: ST_TO_ADDR
// if not list then
76104: LD_VAR 0 3
76108: NOT
76109: IFFALSE 76113
// exit ;
76111: GO 76757
// for i := 1 to list do
76113: LD_ADDR_VAR 0 1
76117: PUSH
76118: DOUBLE
76119: LD_INT 1
76121: DEC
76122: ST_TO_ADDR
76123: LD_VAR 0 3
76127: PUSH
76128: FOR_TO
76129: IFFALSE 76755
// begin depot := list [ i ] [ 2 ] ;
76131: LD_ADDR_VAR 0 8
76135: PUSH
76136: LD_VAR 0 3
76140: PUSH
76141: LD_VAR 0 1
76145: ARRAY
76146: PUSH
76147: LD_INT 2
76149: ARRAY
76150: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76151: LD_ADDR_VAR 0 5
76155: PUSH
76156: LD_VAR 0 3
76160: PUSH
76161: LD_VAR 0 1
76165: ARRAY
76166: PUSH
76167: LD_INT 1
76169: ARRAY
76170: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76171: LD_VAR 0 8
76175: PPUSH
76176: CALL_OW 301
76180: PUSH
76181: LD_VAR 0 5
76185: PUSH
76186: LD_VAR 0 8
76190: PPUSH
76191: CALL_OW 255
76195: NONEQUAL
76196: OR
76197: IFFALSE 76226
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76199: LD_ADDR_EXP 102
76203: PUSH
76204: LD_EXP 102
76208: PPUSH
76209: LD_VAR 0 8
76213: PPUSH
76214: LD_INT 0
76216: PPUSH
76217: CALL_OW 1
76221: ST_TO_ADDR
// exit ;
76222: POP
76223: POP
76224: GO 76757
// end ; x := list [ i ] [ 3 ] ;
76226: LD_ADDR_VAR 0 6
76230: PUSH
76231: LD_VAR 0 3
76235: PUSH
76236: LD_VAR 0 1
76240: ARRAY
76241: PUSH
76242: LD_INT 3
76244: ARRAY
76245: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76246: LD_ADDR_VAR 0 7
76250: PUSH
76251: LD_VAR 0 3
76255: PUSH
76256: LD_VAR 0 1
76260: ARRAY
76261: PUSH
76262: LD_INT 4
76264: ARRAY
76265: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76266: LD_ADDR_VAR 0 9
76270: PUSH
76271: LD_VAR 0 6
76275: PPUSH
76276: LD_VAR 0 7
76280: PPUSH
76281: LD_INT 16
76283: PPUSH
76284: CALL 55052 0 3
76288: ST_TO_ADDR
// if not cratesNearbyPoint then
76289: LD_VAR 0 9
76293: NOT
76294: IFFALSE 76300
// exit ;
76296: POP
76297: POP
76298: GO 76757
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76300: LD_ADDR_VAR 0 4
76304: PUSH
76305: LD_INT 22
76307: PUSH
76308: LD_VAR 0 5
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 3
76319: PUSH
76320: LD_INT 60
76322: PUSH
76323: EMPTY
76324: LIST
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 91
76332: PUSH
76333: LD_VAR 0 8
76337: PUSH
76338: LD_INT 6
76340: PUSH
76341: EMPTY
76342: LIST
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 2
76348: PUSH
76349: LD_INT 25
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 25
76361: PUSH
76362: LD_INT 16
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: PPUSH
76380: CALL_OW 69
76384: PUSH
76385: LD_VAR 0 8
76389: PPUSH
76390: CALL_OW 313
76394: PPUSH
76395: LD_INT 3
76397: PUSH
76398: LD_INT 60
76400: PUSH
76401: EMPTY
76402: LIST
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PUSH
76408: LD_INT 2
76410: PUSH
76411: LD_INT 25
76413: PUSH
76414: LD_INT 2
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 25
76423: PUSH
76424: LD_INT 16
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: LIST
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PPUSH
76440: CALL_OW 72
76444: UNION
76445: ST_TO_ADDR
// if tmp then
76446: LD_VAR 0 4
76450: IFFALSE 76530
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76452: LD_ADDR_VAR 0 4
76456: PUSH
76457: LD_VAR 0 4
76461: PPUSH
76462: LD_INT 3
76464: PPUSH
76465: CALL 53021 0 2
76469: ST_TO_ADDR
// for j in tmp do
76470: LD_ADDR_VAR 0 2
76474: PUSH
76475: LD_VAR 0 4
76479: PUSH
76480: FOR_IN
76481: IFFALSE 76524
// begin if IsInUnit ( j ) then
76483: LD_VAR 0 2
76487: PPUSH
76488: CALL_OW 310
76492: IFFALSE 76503
// ComExit ( j ) ;
76494: LD_VAR 0 2
76498: PPUSH
76499: CALL 53104 0 1
// AddComCollect ( j , x , y ) ;
76503: LD_VAR 0 2
76507: PPUSH
76508: LD_VAR 0 6
76512: PPUSH
76513: LD_VAR 0 7
76517: PPUSH
76518: CALL_OW 177
// end ;
76522: GO 76480
76524: POP
76525: POP
// exit ;
76526: POP
76527: POP
76528: GO 76757
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76530: LD_ADDR_VAR 0 4
76534: PUSH
76535: LD_INT 22
76537: PUSH
76538: LD_VAR 0 5
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: LD_INT 91
76549: PUSH
76550: LD_VAR 0 8
76554: PUSH
76555: LD_INT 8
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: LD_INT 34
76568: PUSH
76569: LD_INT 12
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: PUSH
76576: LD_INT 34
76578: PUSH
76579: LD_INT 51
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: LD_INT 34
76588: PUSH
76589: LD_INT 32
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: PUSH
76596: LD_INT 34
76598: PUSH
76599: LD_INT 89
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: LIST
76617: PPUSH
76618: CALL_OW 69
76622: ST_TO_ADDR
// if tmp then
76623: LD_VAR 0 4
76627: IFFALSE 76753
// begin for j in tmp do
76629: LD_ADDR_VAR 0 2
76633: PUSH
76634: LD_VAR 0 4
76638: PUSH
76639: FOR_IN
76640: IFFALSE 76751
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76642: LD_VAR 0 2
76646: PPUSH
76647: CALL_OW 262
76651: PUSH
76652: LD_INT 3
76654: EQUAL
76655: PUSH
76656: LD_VAR 0 2
76660: PPUSH
76661: CALL_OW 261
76665: PUSH
76666: LD_INT 20
76668: GREATER
76669: OR
76670: PUSH
76671: LD_VAR 0 2
76675: PPUSH
76676: CALL_OW 314
76680: NOT
76681: AND
76682: PUSH
76683: LD_VAR 0 2
76687: PPUSH
76688: CALL_OW 263
76692: PUSH
76693: LD_INT 1
76695: NONEQUAL
76696: PUSH
76697: LD_VAR 0 2
76701: PPUSH
76702: CALL_OW 311
76706: OR
76707: AND
76708: IFFALSE 76749
// begin ComCollect ( j , x , y ) ;
76710: LD_VAR 0 2
76714: PPUSH
76715: LD_VAR 0 6
76719: PPUSH
76720: LD_VAR 0 7
76724: PPUSH
76725: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76729: LD_VAR 0 2
76733: PPUSH
76734: LD_VAR 0 8
76738: PPUSH
76739: CALL_OW 172
// exit ;
76743: POP
76744: POP
76745: POP
76746: POP
76747: GO 76757
// end ;
76749: GO 76639
76751: POP
76752: POP
// end ; end ;
76753: GO 76128
76755: POP
76756: POP
// end ; end_of_file
76757: PPOPN 9
76759: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76760: LD_VAR 0 1
76764: PPUSH
76765: LD_VAR 0 2
76769: PPUSH
76770: LD_VAR 0 3
76774: PPUSH
76775: LD_VAR 0 4
76779: PPUSH
76780: LD_VAR 0 5
76784: PPUSH
76785: LD_VAR 0 6
76789: PPUSH
76790: CALL 61162 0 6
// end ;
76794: PPOPN 6
76796: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76797: LD_INT 0
76799: PPUSH
// begin if not units then
76800: LD_VAR 0 1
76804: NOT
76805: IFFALSE 76809
// exit ;
76807: GO 76809
// end ;
76809: PPOPN 7
76811: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76812: CALL 61133 0 0
// end ; end_of_file
76816: PPOPN 1
76818: END
