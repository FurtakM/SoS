// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 441 0 3
// PrepareAmerican ;
  28: CALL 2520 0 0
// PrepareArabian ;
  32: CALL 1161 0 0
// Action ;
  36: CALL 8166 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit , sniperKillCounter , vehLossCounter ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// sniperKillCounter := 0 ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// vehLossCounter := 0 ;
 190: LD_ADDR_EXP 14
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// end ;
 198: LD_VAR 0 1
 202: RET
// every 0 0$2 trigger sniperKillCounter >= 3 do
 203: LD_EXP 13
 207: PUSH
 208: LD_INT 3
 210: GREATEREQUAL
 211: IFFALSE 223
 213: GO 215
 215: DISABLE
// SetAchievement ( ACH_ANTSNIPER ) ; end_of_file
 216: LD_STRING ACH_ANTSNIPER
 218: PPUSH
 219: CALL_OW 543
 223: END
// export function SayX ( units , ident ) ; var i ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
// result := false ;
 228: LD_ADDR_VAR 0 3
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// if not units then
 236: LD_VAR 0 1
 240: NOT
 241: IFFALSE 245
// exit ;
 243: GO 299
// for i in units do
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_VAR 0 1
 254: PUSH
 255: FOR_IN
 256: IFFALSE 297
// if IsOk ( i ) then
 258: LD_VAR 0 4
 262: PPUSH
 263: CALL_OW 302
 267: IFFALSE 295
// begin Say ( i , ident ) ;
 269: LD_VAR 0 4
 273: PPUSH
 274: LD_VAR 0 2
 278: PPUSH
 279: CALL_OW 88
// result := i ;
 283: LD_ADDR_VAR 0 3
 287: PUSH
 288: LD_VAR 0 4
 292: ST_TO_ADDR
// break ;
 293: GO 297
// end ;
 295: GO 255
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 3
 303: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// InitUc ;
 308: CALL_OW 18
// InitHc ;
 312: CALL_OW 19
// uc_side := 0 ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// uc_nation := 0 ;
 324: LD_ADDR_OWVAR 21
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// for i = 1 to amount do
 332: LD_ADDR_VAR 0 4
 336: PUSH
 337: DOUBLE
 338: LD_INT 1
 340: DEC
 341: ST_TO_ADDR
 342: LD_VAR 0 2
 346: PUSH
 347: FOR_TO
 348: IFFALSE 430
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 350: LD_ADDR_OWVAR 29
 354: PUSH
 355: LD_INT 9
 357: PPUSH
 358: LD_INT 12
 360: PPUSH
 361: CALL_OW 12
 365: PUSH
 366: LD_INT 9
 368: PPUSH
 369: LD_INT 12
 371: PPUSH
 372: CALL_OW 12
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 381: LD_ADDR_OWVAR 35
 385: PUSH
 386: LD_INT 1
 388: NEG
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 12
 397: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 398: LD_INT 0
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 411: CALL_OW 44
 415: PPUSH
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 0
 423: PPUSH
 424: CALL_OW 49
// end ;
 428: GO 347
 430: POP
 431: POP
// InitHc ;
 432: CALL_OW 19
// end ;
 436: LD_VAR 0 3
 440: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 441: LD_INT 0
 443: PPUSH
 444: PPUSH
// uc_side := 0 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 0
 452: ST_TO_ADDR
// uc_nation := 0 ;
 453: LD_ADDR_OWVAR 21
 457: PUSH
 458: LD_INT 0
 460: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: LD_INT 6
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PPUSH
 490: CALL 304 0 2
// for i := 1 to 4 do
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: DOUBLE
 500: LD_INT 1
 502: DEC
 503: ST_TO_ADDR
 504: LD_INT 4
 506: PUSH
 507: FOR_TO
 508: IFFALSE 545
// begin hc_class := class_horse ;
 510: LD_ADDR_OWVAR 28
 514: PUSH
 515: LD_INT 21
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 507
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 49
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 947: LD_INT 0
 949: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 950: LD_VAR 0 1
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: LD_VAR 0 4
 969: PPUSH
 970: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 974: LD_VAR 0 1
 978: PPUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_VAR 0 3
 988: PPUSH
 989: CALL_OW 331
// end ;
 993: LD_VAR 0 5
 997: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 998: LD_INT 0
1000: PPUSH
// if not units then
1001: LD_VAR 0 1
1005: NOT
1006: IFFALSE 1010
// exit ;
1008: GO 1093
// result := true ;
1010: LD_ADDR_VAR 0 4
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: LD_INT 26
1025: PUSH
1026: LD_INT 1
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: CALL_OW 88
1051: NOT
1052: IFFALSE 1093
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: LD_INT 26
1066: PUSH
1067: LD_INT 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 72
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 3
1087: PPUSH
1088: CALL_OW 88
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 4
1097: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1098: LD_INT 0
1100: PPUSH
1101: PPUSH
// if not group then
1102: LD_VAR 0 2
1106: NOT
1107: IFFALSE 1111
// exit ;
1109: GO 1156
// for i in group do
1111: LD_ADDR_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1154
// if See ( side , i ) then
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 292
1138: IFFALSE 1152
// begin result := true ;
1140: LD_ADDR_VAR 0 3
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1121
1154: POP
1155: POP
// end ; end_of_file
1156: LD_VAR 0 3
1160: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter , hasDrugs ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
1168: LD_ADDR_VAR 0 5
1172: PUSH
1173: LD_STRING 05_DrugsTested
1175: PPUSH
1176: LD_EXP 1
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// if hasDrugs then
1186: LD_VAR 0 5
1190: IFFALSE 1205
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 322
// uc_nation := 2 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// uc_side := 5 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 5
1220: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1221: LD_ADDR_EXP 23
1225: PUSH
1226: LD_STRING Abdul
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 16535 0 3
1239: ST_TO_ADDR
// uc_side := 2 ;
1240: LD_ADDR_OWVAR 20
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1248: LD_ADDR_EXP 15
1252: PUSH
1253: LD_STRING Heike
1255: PPUSH
1256: LD_EXP 1
1260: NOT
1261: PPUSH
1262: LD_EXP 2
1266: PPUSH
1267: CALL 16535 0 3
1271: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1272: LD_ADDR_EXP 18
1276: PUSH
1277: LD_STRING Ibrahim
1279: PPUSH
1280: LD_EXP 1
1284: NOT
1285: PPUSH
1286: LD_EXP 2
1290: PPUSH
1291: CALL 16535 0 3
1295: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 16
1300: PUSH
1301: LD_STRING Givi
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16535 0 3
1319: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 19
1324: PUSH
1325: LD_STRING Kamil
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16535 0 3
1343: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 20
1348: PUSH
1349: LD_STRING Kaia
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16535 0 3
1367: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: LD_STRING Sophia
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 16535 0 3
1391: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 22
1396: PUSH
1397: LD_STRING Markov
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 16535 0 3
1415: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 26
1420: PUSH
1421: LD_STRING Aviradze
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 16535 0 3
1439: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 25
1444: PUSH
1445: LD_STRING Kurt
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 16535 0 3
1463: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 17
1468: PUSH
1469: LD_STRING Mike
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 16535 0 3
1487: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 24
1492: PUSH
1493: LD_STRING Olaf
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 16535 0 3
1511: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_STRING 06_others
1519: PPUSH
1520: CALL_OW 31
1524: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING 06_apes
1532: PPUSH
1533: CALL_OW 31
1537: ST_TO_ADDR
// if debug then
1538: LD_EXP 1
1542: IFFALSE 1815
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1544: LD_ADDR_VAR 0 3
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 25
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 1000
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 14
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 31
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1000
1596: PUSH
1597: LD_INT 0
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 14
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 27
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: LD_INT 750
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 14
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: LD_INT 27
1650: PUSH
1651: LD_INT 2
1653: PUSH
1654: LD_INT 900
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 14
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 32
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 100
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 2
1720: PUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 50
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 14
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 27
1754: PUSH
1755: LD_INT 2
1757: PUSH
1758: LD_INT 1000
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 14
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 92
1784: PUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 1000
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// end else
1813: GO 1822
// tmp := [ ] ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: EMPTY
1821: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1822: LD_ADDR_EXP 29
1826: PUSH
1827: LD_STRING 06_Vehicles
1829: PPUSH
1830: LD_VAR 0 3
1834: PPUSH
1835: CALL_OW 30
1839: ST_TO_ADDR
// counter := 0 ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// if heikeVehicles then
1848: LD_EXP 29
1852: IFFALSE 1974
// begin for i := heikeVehicles downto 1 do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: DOUBLE
1860: LD_EXP 29
1864: INC
1865: ST_TO_ADDR
1866: LD_INT 1
1868: PUSH
1869: FOR_DOWNTO
1870: IFFALSE 1972
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1872: LD_EXP 29
1876: PUSH
1877: LD_VAR 0 2
1881: ARRAY
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PUSH
1887: LD_INT 2
1889: EQUAL
1890: IFFALSE 1970
// begin if counter < remoteControlLimit then
1892: LD_VAR 0 4
1896: PUSH
1897: LD_EXP 12
1901: LESS
1902: IFFALSE 1950
// begin counter := Inc ( counter ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 55628 0 1
1918: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1919: LD_ADDR_EXP 29
1923: PUSH
1924: LD_EXP 29
1928: PPUSH
1929: LD_EXP 29
1933: PPUSH
1934: LD_EXP 29
1938: PUSH
1939: LD_VAR 0 2
1943: ARRAY
1944: PPUSH
1945: CALL_OW 2
1949: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1950: LD_ADDR_EXP 29
1954: PUSH
1955: LD_EXP 29
1959: PPUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 3
1969: ST_TO_ADDR
// end ; end ;
1970: GO 1869
1972: POP
1973: POP
// end ; end ;
1974: LD_VAR 0 1
1978: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1979: LD_EXP 3
1983: IFFALSE 2517
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: LD_INT 96
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 49
2009: PUSH
2010: LD_INT 52
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 34
2019: PUSH
2020: LD_INT 55
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 41
2029: PUSH
2030: LD_INT 70
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 53
2039: PUSH
2040: LD_INT 96
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 103
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 104
2067: PUSH
2068: LD_INT 70
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 111
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 131
2087: PUSH
2088: LD_INT 147
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 130
2097: PUSH
2098: LD_INT 153
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 110
2107: PUSH
2108: LD_INT 93
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 103
2117: PUSH
2118: LD_INT 65
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: ST_TO_ADDR
// for i in tmp [ 1 ] do
2137: LD_ADDR_VAR 0 1
2141: PUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2204
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2154: LD_EXP 17
2158: PPUSH
2159: LD_VAR 0 1
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: LD_VAR 0 1
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PPUSH
2177: CALL_OW 174
// AddComHold ( Mike ) ;
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2190: LD_EXP 17
2194: PPUSH
2195: LD_INT 175
2197: PPUSH
2198: CALL_OW 202
// end ;
2202: GO 2151
2204: POP
2205: POP
// for i in tmp [ 2 ] do
2206: LD_ADDR_VAR 0 1
2210: PUSH
2211: LD_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2273
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2223: LD_EXP 25
2227: PPUSH
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 1
2235: ARRAY
2236: PPUSH
2237: LD_VAR 0 1
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: PPUSH
2246: CALL_OW 174
// AddComHold ( Kurt ) ;
2250: LD_EXP 25
2254: PPUSH
2255: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2259: LD_EXP 25
2263: PPUSH
2264: LD_INT 175
2266: PPUSH
2267: CALL_OW 202
// end ;
2271: GO 2220
2273: POP
2274: POP
// wait ( 2 2$00 ) ;
2275: LD_INT 4200
2277: PPUSH
2278: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2282: LD_INT 35
2284: PPUSH
2285: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2289: LD_EXP 17
2293: PPUSH
2294: CALL_OW 314
2298: NOT
2299: PUSH
2300: LD_EXP 17
2304: PPUSH
2305: CALL_OW 301
2309: OR
2310: PUSH
2311: LD_EXP 25
2315: PPUSH
2316: CALL_OW 314
2320: NOT
2321: PUSH
2322: LD_EXP 25
2326: PPUSH
2327: CALL_OW 301
2331: OR
2332: AND
2333: IFFALSE 2282
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2335: LD_EXP 25
2339: PPUSH
2340: CALL_OW 301
2344: PUSH
2345: LD_EXP 17
2349: PPUSH
2350: CALL_OW 301
2354: AND
2355: IFFALSE 2367
// begin scoutFailed := true ;
2357: LD_ADDR_EXP 4
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// exit ;
2365: GO 2517
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2367: LD_EXP 25
2371: PUSH
2372: LD_EXP 17
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 132
2383: PPUSH
2384: LD_INT 52
2386: PPUSH
2387: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2391: LD_EXP 25
2395: PUSH
2396: LD_EXP 17
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: PUSH
2420: LD_INT 1
2422: ARRAY
2423: PPUSH
2424: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2428: LD_INT 35
2430: PPUSH
2431: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_EXP 25
2442: PPUSH
2443: CALL_OW 292
2447: PUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_EXP 17
2455: PPUSH
2456: CALL_OW 292
2460: OR
2461: IFFALSE 2428
// if IsLive ( Kurt ) then
2463: LD_EXP 25
2467: PPUSH
2468: CALL_OW 300
2472: IFFALSE 2486
// SetSide ( Kurt , 2 ) ;
2474: LD_EXP 25
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 235
// if IsLive ( Mike ) then
2486: LD_EXP 17
2490: PPUSH
2491: CALL_OW 300
2495: IFFALSE 2509
// SetSide ( Mike , 2 ) ;
2497: LD_EXP 17
2501: PPUSH
2502: LD_INT 2
2504: PPUSH
2505: CALL_OW 235
// scoutSuccess := true ;
2509: LD_ADDR_EXP 5
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// end ; end_of_file
2517: PPOPN 2
2519: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces , usCratesCollector ; export function PrepareAmerican ; var i , b , veh ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// uc_side := 1 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// uc_nation := 1 ;
2534: LD_ADDR_OWVAR 21
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 1500 , 2200 , 3500 , 3900 ] [ Difficulty ] ) ;
2542: LD_INT 1
2544: PPUSH
2545: CALL_OW 274
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 1500
2555: PUSH
2556: LD_INT 2200
2558: PUSH
2559: LD_INT 3500
2561: PUSH
2562: LD_INT 3900
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2581: LD_INT 1
2583: PPUSH
2584: CALL_OW 274
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: LD_INT 800
2594: PPUSH
2595: CALL_OW 277
// usForces := [ ] ;
2599: LD_ADDR_EXP 31
2603: PUSH
2604: EMPTY
2605: ST_TO_ADDR
// usToBuild := [ ] ;
2606: LD_ADDR_EXP 33
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2613: LD_ADDR_EXP 34
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// usCratesCollector := [ ] ;
2620: LD_ADDR_EXP 35
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// for i := 1 to 3 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 3
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2695
// begin PrepareApemanEngineer ( ) ;
2643: CALL 50436 0 0
// usCratesCollector := Join ( usCratesCollector , CreateHuman ) ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_EXP 35
2656: PPUSH
2657: CALL_OW 44
2661: PPUSH
2662: CALL 54267 0 2
2666: ST_TO_ADDR
// PlaceUnitXYR ( Last ( usCratesCollector ) , 81 , 142 , 4 , false ) ;
2667: LD_EXP 35
2671: PPUSH
2672: CALL 58914 0 1
2676: PPUSH
2677: LD_INT 81
2679: PPUSH
2680: LD_INT 142
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 50
// end ;
2693: GO 2640
2695: POP
2696: POP
// InitHc ;
2697: CALL_OW 19
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_INT 21
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: FOR_IN
2722: IFFALSE 2759
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 7
2734: PUSH
2735: LD_INT 8
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PUSH
2747: LD_OWVAR 67
2751: ARRAY
2752: PPUSH
2753: CALL_OW 241
2757: GO 2721
2759: POP
2760: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 32
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: FOR_IN
2782: IFFALSE 2872
// begin if GetBWeapon ( i ) = us_radar then
2784: LD_VAR 0 2
2788: PPUSH
2789: CALL_OW 269
2793: PUSH
2794: LD_INT 11
2796: EQUAL
2797: IFFALSE 2822
// begin uc_nation := 0 ;
2799: LD_ADDR_OWVAR 21
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2807: LD_INT 0
2809: PPUSH
2810: LD_INT 16
2812: PPUSH
2813: LD_INT 2
2815: PPUSH
2816: CALL_OW 380
// end else
2820: GO 2856
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2822: LD_INT 0
2824: PPUSH
2825: LD_INT 1
2827: PPUSH
2828: LD_INT 5
2830: PUSH
2831: LD_INT 6
2833: PUSH
2834: LD_INT 7
2836: PUSH
2837: LD_INT 8
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PPUSH
2852: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2856: CALL_OW 44
2860: PPUSH
2861: LD_VAR 0 2
2865: PPUSH
2866: CALL_OW 52
// end ;
2870: GO 2781
2872: POP
2873: POP
// b := HexInfo ( 74 , 120 ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 74
2881: PPUSH
2882: LD_INT 120
2884: PPUSH
2885: CALL_OW 428
2889: ST_TO_ADDR
// uc_nation := 1 ;
2890: LD_ADDR_OWVAR 21
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2898: LD_ADDR_VAR 0 2
2902: PUSH
2903: DOUBLE
2904: LD_INT 1
2906: DEC
2907: ST_TO_ADDR
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 3
2916: PUSH
2917: LD_INT 4
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: PUSH
2926: LD_OWVAR 67
2930: ARRAY
2931: PUSH
2932: FOR_TO
2933: IFFALSE 2985
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 6
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: LD_INT 8
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_OWVAR 67
2963: ARRAY
2964: PPUSH
2965: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2969: CALL_OW 44
2973: PPUSH
2974: LD_VAR 0 3
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2932
2985: POP
2986: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2987: LD_VAR 0 3
2991: PPUSH
2992: CALL_OW 313
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: CALL_OW 336
// for i := 1 to 6 do
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 6
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3068
// begin PrepareHuman ( false , 4 , 6 ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 4
3025: PPUSH
3026: LD_INT 6
3028: PPUSH
3029: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
3033: CALL_OW 44
3037: PPUSH
3038: LD_INT 32
3040: PUSH
3041: LD_INT 33
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_VAR 0 2
3052: PUSH
3053: LD_INT 2
3055: MOD
3056: PUSH
3057: LD_INT 1
3059: PLUS
3060: ARRAY
3061: PPUSH
3062: CALL_OW 52
// end ;
3066: GO 3017
3068: POP
3069: POP
// for i := 1 to 3 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 3
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3113
// begin PrepareHuman ( false , 3 , 6 ) ;
3086: LD_INT 0
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 6
3094: PPUSH
3095: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3099: CALL_OW 44
3103: PPUSH
3104: LD_INT 25
3106: PPUSH
3107: CALL_OW 52
// end ;
3111: GO 3083
3113: POP
3114: POP
// for i := 1 to 3 do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: DOUBLE
3121: LD_INT 1
3123: DEC
3124: ST_TO_ADDR
3125: LD_INT 3
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3187
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3131: LD_INT 0
3133: PPUSH
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 6
3139: PUSH
3140: LD_INT 7
3142: PUSH
3143: LD_INT 7
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PPUSH
3161: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3165: CALL_OW 44
3169: PPUSH
3170: LD_INT 78
3172: PPUSH
3173: LD_INT 130
3175: PPUSH
3176: CALL_OW 428
3180: PPUSH
3181: CALL_OW 52
// end ;
3185: GO 3128
3187: POP
3188: POP
// for i := 1 to [ 1 , 2 , 3 , 3 ] [ Difficulty ] do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 1
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_OWVAR 67
3221: ARRAY
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3311
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3226: LD_INT 2
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 13
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 21396 0 5
// veh := CreateVehicle ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3267: LD_VAR 0 4
3271: PPUSH
3272: LD_INT 9
3274: PPUSH
3275: LD_INT 0
3277: PPUSH
3278: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 6
3290: PPUSH
3291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3295: CALL_OW 44
3299: PPUSH
3300: LD_VAR 0 4
3304: PPUSH
3305: CALL_OW 52
// end ;
3309: GO 3223
3311: POP
3312: POP
// InitHc ;
3313: CALL_OW 19
// hc_gallery := sandar ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING sandar
3324: ST_TO_ADDR
// hc_face_number := 38 ;
3325: LD_ADDR_OWVAR 34
3329: PUSH
3330: LD_INT 38
3332: ST_TO_ADDR
// hc_name := Doug Callahan ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Doug Callahan
3340: ST_TO_ADDR
// hc_class := class_engineer ;
3341: LD_ADDR_OWVAR 28
3345: PUSH
3346: LD_INT 2
3348: ST_TO_ADDR
// hc_sex := sex_male ;
3349: LD_ADDR_OWVAR 27
3353: PUSH
3354: LD_INT 1
3356: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3357: LD_ADDR_OWVAR 29
3361: PUSH
3362: LD_INT 10
3364: PUSH
3365: LD_INT 11
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3372: LD_ADDR_OWVAR 30
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3395: LD_ADDR_OWVAR 31
3399: PUSH
3400: LD_INT 4
3402: PUSH
3403: LD_INT 6
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 1
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: ST_TO_ADDR
// usCommander := CreateHuman ;
3418: LD_ADDR_EXP 30
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3428: LD_EXP 30
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3440: LD_INT 2
3442: PPUSH
3443: LD_EXP 30
3447: PPUSH
3448: CALL_OW 471
// InitHC_All ( ) ;
3452: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3456: LD_INT 2
3458: PPUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 2
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: CALL 21396 0 5
// usCargo := CreateVehicle ;
3475: LD_ADDR_EXP 32
3479: PUSH
3480: CALL_OW 45
3484: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3485: LD_EXP 32
3489: PPUSH
3490: LD_INT 81
3492: PPUSH
3493: LD_INT 143
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: CALL_OW 48
// Connect ( usCargo ) ;
3503: LD_EXP 32
3507: PPUSH
3508: CALL 24864 0 1
// DoNotAttack ( 5 , usCargo ) ;
3512: LD_INT 5
3514: PPUSH
3515: LD_EXP 32
3519: PPUSH
3520: CALL_OW 471
// end ;
3524: LD_VAR 0 1
3528: RET
// every 6 6$00 trigger usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3529: LD_EXP 6
3533: PUSH
3534: LD_INT 25
3536: PPUSH
3537: CALL_OW 302
3541: AND
3542: PUSH
3543: LD_INT 25
3545: PPUSH
3546: CALL_OW 461
3550: PUSH
3551: LD_INT 2
3553: EQUAL
3554: AND
3555: IFFALSE 3712
3557: GO 3559
3559: DISABLE
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// begin enable ;
3565: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3566: LD_ADDR_VAR 0 1
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_INT 4
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 6
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_OWVAR 67
3598: ARRAY
3599: PUSH
3600: FOR_TO
3601: IFFALSE 3710
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3603: LD_ADDR_VAR 0 2
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3634: LD_VAR 0 2
3638: PUSH
3639: LD_INT 4
3641: EQUAL
3642: IFFALSE 3654
// weapon := us_heavy_gun else
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_INT 6
3651: ST_TO_ADDR
3652: GO 3685
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: LD_INT 5
3661: PUSH
3662: LD_INT 7
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 1
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 12
3683: ARRAY
3684: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3685: LD_INT 25
3687: PPUSH
3688: LD_VAR 0 2
3692: PPUSH
3693: LD_INT 1
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: CALL_OW 185
// end ;
3708: GO 3600
3710: POP
3711: POP
// end ;
3712: PPOPN 3
3714: END
// every 0 0$01 do var i , un , tmp ;
3715: GO 3717
3717: DISABLE
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
// begin if Difficulty < 2 then
3723: LD_OWVAR 67
3727: PUSH
3728: LD_INT 2
3730: LESS
3731: IFFALSE 3735
// exit ;
3733: GO 4018
// tmp := [ ] ;
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// for i := 1 to Difficulty do
3742: LD_ADDR_VAR 0 1
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_OWVAR 67
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3854
// begin uc_side := 4 ;
3760: LD_ADDR_OWVAR 20
3764: PUSH
3765: LD_INT 4
3767: ST_TO_ADDR
// uc_nation := nation_american ;
3768: LD_ADDR_OWVAR 21
3772: PUSH
3773: LD_INT 1
3775: ST_TO_ADDR
// PrepareSoldier ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: LD_INT 6
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PPUSH
3803: CALL_OW 381
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 2
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: LD_VAR 0 2
3831: PPUSH
3832: CALL 54267 0 2
3836: ST_TO_ADDR
// PlaceUnitArea ( un , westSpawnArea , false ) ;
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_INT 19
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// end ;
3852: GO 3757
3854: POP
3855: POP
// for i in tmp do
3856: LD_ADDR_VAR 0 1
3860: PUSH
3861: LD_VAR 0 3
3865: PUSH
3866: FOR_IN
3867: IFFALSE 3913
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3869: LD_VAR 0 1
3873: PPUSH
3874: LD_INT 54
3876: PPUSH
3877: LD_INT 51
3879: PPUSH
3880: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_INT 700
3891: PPUSH
3892: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_INT 35
3903: PPUSH
3904: LD_INT 6
3906: PPUSH
3907: CALL_OW 174
// end ;
3911: GO 3866
3913: POP
3914: POP
// repeat wait ( 7 7$00 ) ;
3915: LD_INT 14700
3917: PPUSH
3918: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: LD_INT 50
3934: PUSH
3935: EMPTY
3936: LIST
3937: PPUSH
3938: CALL_OW 72
3942: ST_TO_ADDR
// if not tmp then
3943: LD_VAR 0 3
3947: NOT
3948: IFFALSE 3952
// exit ;
3950: GO 4018
// for i in tmp do
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_VAR 0 3
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4009
// begin ComAgressiveMove ( i , 54 , 51 ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_INT 54
3972: PPUSH
3973: LD_INT 51
3975: PPUSH
3976: CALL_OW 114
// AddComWait ( i , 0 0$20 ) ;
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_INT 700
3987: PPUSH
3988: CALL_OW 202
// AddComAgressiveMove ( i , 35 , 6 ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_INT 35
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: CALL_OW 174
// end ;
4007: GO 3962
4009: POP
4010: POP
// until not tmp ;
4011: LD_VAR 0 3
4015: NOT
4016: IFFALSE 3915
// end ;
4018: PPOPN 3
4020: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
4021: LD_EXP 31
4025: PUSH
4026: LD_INT 4
4028: PUSH
4029: LD_INT 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_INT 6
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: GREATEREQUAL
4050: IFFALSE 4232
4052: GO 4054
4054: DISABLE
4055: LD_INT 0
4057: PPUSH
4058: PPUSH
// begin enable ;
4059: ENABLE
// tmp := usForces ;
4060: LD_ADDR_VAR 0 2
4064: PUSH
4065: LD_EXP 31
4069: ST_TO_ADDR
// usForces := [ ] ;
4070: LD_ADDR_EXP 31
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// if not tmp then
4077: LD_VAR 0 2
4081: NOT
4082: IFFALSE 4086
// exit ;
4084: GO 4232
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 123 , 141 , 20 ] ] ) then
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 92
4098: PUSH
4099: LD_INT 123
4101: PUSH
4102: LD_INT 141
4104: PUSH
4105: LD_INT 20
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PPUSH
4118: CALL_OW 69
4122: IFFALSE 4146
// begin ComAgressiveMove ( tmp , 126 , 143 ) ;
4124: LD_VAR 0 2
4128: PPUSH
4129: LD_INT 126
4131: PPUSH
4132: LD_INT 143
4134: PPUSH
4135: CALL_OW 114
// wait ( 0 0$30 ) ;
4139: LD_INT 1050
4141: PPUSH
4142: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 51 , 50 ] , [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_VAR 0 2
4162: PPUSH
4163: LD_INT 51
4165: PUSH
4166: LD_INT 50
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 98
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 114
4185: PUSH
4186: LD_INT 50
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 127
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 131
4205: PUSH
4206: LD_INT 35
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL 56871 0 2
4224: ST_TO_ADDR
// until not tmp ;
4225: LD_VAR 0 2
4229: NOT
4230: IFFALSE 4146
// end ;
4232: PPOPN 2
4234: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4235: LD_EXP 3
4239: PUSH
4240: LD_EXP 5
4244: NOT
4245: AND
4246: PUSH
4247: LD_INT 11
4249: PPUSH
4250: LD_INT 22
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 70
4264: AND
4265: IFFALSE 4386
4267: GO 4269
4269: DISABLE
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
// begin uc_side := 1 ;
4275: LD_ADDR_OWVAR 20
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// uc_nation := 1 ;
4283: LD_ADDR_OWVAR 21
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// tmp := [ ] ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// for i := 1 to 2 do
4298: LD_ADDR_VAR 0 1
4302: PUSH
4303: DOUBLE
4304: LD_INT 1
4306: DEC
4307: ST_TO_ADDR
4308: LD_INT 2
4310: PUSH
4311: FOR_TO
4312: IFFALSE 4384
// begin PrepareSoldier ( false , 7 ) ;
4314: LD_INT 0
4316: PPUSH
4317: LD_INT 7
4319: PPUSH
4320: CALL_OW 381
// un := CreateHuman ;
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: CALL_OW 44
4333: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
4334: LD_VAR 0 2
4338: PPUSH
4339: LD_INT 130
4341: PPUSH
4342: LD_INT 153
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 0
4350: PPUSH
4351: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_INT 108
4374: PPUSH
4375: LD_INT 108
4377: PPUSH
4378: CALL_OW 174
// end ;
4382: GO 4311
4384: POP
4385: POP
// end ;
4386: PPOPN 3
4388: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
4389: LD_EXP 3
4393: PUSH
4394: LD_EXP 5
4398: NOT
4399: AND
4400: PUSH
4401: LD_INT 10
4403: PPUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 70
4418: AND
4419: IFFALSE 4540
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
4428: PPUSH
// begin uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// tmp := [ ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: EMPTY
4451: ST_TO_ADDR
// for i := 1 to 2 do
4452: LD_ADDR_VAR 0 1
4456: PUSH
4457: DOUBLE
4458: LD_INT 1
4460: DEC
4461: ST_TO_ADDR
4462: LD_INT 2
4464: PUSH
4465: FOR_TO
4466: IFFALSE 4538
// begin PrepareSoldier ( false , 7 ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 7
4473: PPUSH
4474: CALL_OW 381
// un := CreateHuman ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 56
4495: PPUSH
4496: LD_INT 101
4498: PPUSH
4499: LD_INT 3
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4509: LD_VAR 0 2
4513: PPUSH
4514: LD_INT 5
4516: PPUSH
4517: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4521: LD_VAR 0 2
4525: PPUSH
4526: LD_INT 72
4528: PPUSH
4529: LD_INT 92
4531: PPUSH
4532: CALL_OW 174
// end ;
4536: GO 4465
4538: POP
4539: POP
// end ;
4540: PPOPN 3
4542: END
// every 0 0$2 trigger not usSurrender do var i , tmp , cr , enemyInArea ;
4543: LD_EXP 7
4547: NOT
4548: IFFALSE 4749
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// begin enable ;
4559: ENABLE
// enemyInArea := FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , 113 , 139 , 15 ] ] ) ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: LD_INT 81
4567: PUSH
4568: LD_INT 1
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 92
4577: PUSH
4578: LD_INT 113
4580: PUSH
4581: LD_INT 139
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: ST_TO_ADDR
// cr := GetListOfCratesInArea ( americanCratesArea ) ;
4602: LD_ADDR_VAR 0 3
4606: PUSH
4607: LD_INT 20
4609: PPUSH
4610: CALL_OW 435
4614: ST_TO_ADDR
// tmp := UnitFilter ( usCratesCollector , [ f_ok ] ) ;
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 35
4624: PPUSH
4625: LD_INT 50
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 72
4635: ST_TO_ADDR
// if not tmp then
4636: LD_VAR 0 2
4640: NOT
4641: IFFALSE 4646
// begin disable ;
4643: DISABLE
// exit ;
4644: GO 4749
// end ; for i in tmp do
4646: LD_ADDR_VAR 0 1
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: FOR_IN
4657: IFFALSE 4747
// begin if enemyInArea and GetDistUnits ( i , usDepot ) > 12 then
4659: LD_VAR 0 4
4663: PUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: CALL_OW 296
4676: PUSH
4677: LD_INT 12
4679: GREATER
4680: AND
4681: IFFALSE 4700
// ComMoveXY ( i , 83 , 147 ) else
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 83
4690: PPUSH
4691: LD_INT 147
4693: PPUSH
4694: CALL_OW 111
4698: GO 4745
// if not HasTask ( i ) and cr then
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 314
4709: NOT
4710: PUSH
4711: LD_VAR 0 3
4715: AND
4716: IFFALSE 4745
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
4718: LD_VAR 0 1
4722: PPUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: LD_VAR 0 3
4736: PUSH
4737: LD_INT 2
4739: ARRAY
4740: PPUSH
4741: CALL_OW 117
// end ;
4745: GO 4656
4747: POP
4748: POP
// end ;
4749: PPOPN 4
4751: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4752: LD_EXP 32
4756: PPUSH
4757: CALL_OW 302
4761: PUSH
4762: LD_EXP 7
4766: NOT
4767: AND
4768: IFFALSE 5031
4770: GO 4772
4772: DISABLE
4773: LD_INT 0
4775: PPUSH
4776: PPUSH
// begin enable ;
4777: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: LD_INT 16
4785: PPUSH
4786: LD_INT 81
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 50
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_INT 12
4818: PPUSH
4819: CALL_OW 435
4823: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4824: LD_EXP 32
4828: PPUSH
4829: CALL_OW 261
4833: PUSH
4834: LD_INT 10
4836: LESS
4837: PUSH
4838: LD_INT 2
4840: PPUSH
4841: LD_EXP 32
4845: PPUSH
4846: CALL_OW 292
4850: NOT
4851: AND
4852: IFFALSE 4866
// SetFuel ( usCargo , 100 ) ;
4854: LD_EXP 32
4858: PPUSH
4859: LD_INT 100
4861: PPUSH
4862: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4866: LD_EXP 32
4870: PPUSH
4871: CALL_OW 314
4875: NOT
4876: PUSH
4877: LD_EXP 32
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 289
4889: PUSH
4890: LD_INT 100
4892: LESS
4893: AND
4894: PUSH
4895: LD_VAR 0 2
4899: NOT
4900: AND
4901: IFFALSE 4967
// begin if cr then
4903: LD_VAR 0 1
4907: IFFALSE 4938
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4909: LD_EXP 32
4913: PPUSH
4914: LD_VAR 0 1
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 1
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 117
4936: GO 4965
// if not IsInArea ( usCargo , usCratesArea ) then
4938: LD_EXP 32
4942: PPUSH
4943: LD_INT 12
4945: PPUSH
4946: CALL_OW 308
4950: NOT
4951: IFFALSE 4965
// ComMoveToArea ( usCargo , usCratesArea ) ;
4953: LD_EXP 32
4957: PPUSH
4958: LD_INT 12
4960: PPUSH
4961: CALL_OW 113
// exit ;
4965: GO 5031
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_EXP 32
4976: PPUSH
4977: LD_INT 16
4979: PPUSH
4980: CALL_OW 308
4984: NOT
4985: AND
4986: IFFALSE 5005
// ComMoveXY ( usCargo , 80 , 143 ) else
4988: LD_EXP 32
4992: PPUSH
4993: LD_INT 80
4995: PPUSH
4996: LD_INT 143
4998: PPUSH
4999: CALL_OW 111
5003: GO 5031
// if GetCargo ( usCargo , mat_cans ) then
5005: LD_EXP 32
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 289
5017: IFFALSE 5031
// ComGive ( usCargo , usDepot ) ;
5019: LD_EXP 32
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 161
// end ;
5031: PPOPN 2
5033: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
5034: LD_EXP 7
5038: NOT
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 69
5082: AND
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 60
5099: PUSH
5100: EMPTY
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: LD_INT 25
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: AND
5127: IFFALSE 5330
5129: GO 5131
5131: DISABLE
5132: LD_INT 0
5134: PPUSH
5135: PPUSH
// begin enable ;
5136: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 50
5167: PUSH
5168: EMPTY
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: PPUSH
5180: CALL_OW 69
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5328
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
5188: LD_ADDR_VAR 0 2
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 60
5208: PUSH
5209: EMPTY
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 25
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: ST_TO_ADDR
// if not sci then
5236: LD_VAR 0 2
5240: NOT
5241: IFFALSE 5245
// break ;
5243: GO 5328
// sci := sci [ 1 ] ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 2
5254: PUSH
5255: LD_INT 1
5257: ARRAY
5258: ST_TO_ADDR
// if IsInUnit ( sci ) then
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 310
5268: IFFALSE 5281
// ComExit ( sci ) else
5270: LD_VAR 0 2
5274: PPUSH
5275: CALL 54665 0 1
5279: GO 5326
// begin ComHeal ( sci , i ) ;
5281: LD_VAR 0 2
5285: PPUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_INT 32
5302: PUSH
5303: LD_INT 33
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 1
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: CALL_OW 12
5320: ARRAY
5321: PPUSH
5322: CALL_OW 180
// end ; end ;
5326: GO 5185
5328: POP
5329: POP
// end ;
5330: PPOPN 2
5332: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
5333: LD_EXP 7
5337: NOT
5338: PUSH
5339: LD_INT 22
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 3
5351: PUSH
5352: LD_INT 60
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 50
5364: PUSH
5365: EMPTY
5366: LIST
5367: PUSH
5368: LD_INT 34
5370: PUSH
5371: LD_INT 13
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 69
5388: AND
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: LD_INT 24
5405: PUSH
5406: LD_INT 1000
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 3
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_INT 29
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: AND
5455: IFFALSE 5724
5457: GO 5459
5459: DISABLE
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 3
5483: PUSH
5484: LD_INT 24
5486: PUSH
5487: LD_INT 1000
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: LD_INT 30
5513: PUSH
5514: LD_INT 29
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 22
5543: PUSH
5544: LD_INT 1
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 600
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 21
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 29
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5606: LD_ADDR_VAR 0 1
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 60
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 50
5636: PUSH
5637: EMPTY
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PPUSH
5656: CALL_OW 69
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5722
// begin if tmp2 then
5664: LD_VAR 0 3
5668: IFFALSE 5696
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_VAR 0 3
5679: PPUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 74
5689: PPUSH
5690: CALL_OW 130
5694: GO 5720
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 74
5715: PPUSH
5716: CALL_OW 130
// end ;
5720: GO 5661
5722: POP
5723: POP
// end ;
5724: PPOPN 3
5726: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5727: LD_EXP 7
5731: NOT
5732: PUSH
5733: LD_INT 16
5735: PPUSH
5736: LD_INT 81
5738: PUSH
5739: LD_INT 1
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PUSH
5746: LD_INT 50
5748: PUSH
5749: EMPTY
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 70
5760: NOT
5761: AND
5762: PUSH
5763: LD_EXP 33
5767: AND
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 3
5781: PUSH
5782: LD_INT 60
5784: PUSH
5785: EMPTY
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 50
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: LD_INT 34
5800: PUSH
5801: LD_INT 13
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: AND
5819: IFFALSE 5931
5821: GO 5823
5823: DISABLE
// begin enable ;
5824: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 60
5840: PUSH
5841: EMPTY
5842: LIST
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 50
5850: PUSH
5851: EMPTY
5852: LIST
5853: PUSH
5854: LD_INT 34
5856: PUSH
5857: LD_INT 13
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PPUSH
5875: LD_EXP 33
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: LD_EXP 33
5892: PUSH
5893: LD_INT 1
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: PPUSH
5901: LD_EXP 33
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PUSH
5910: LD_INT 3
5912: ARRAY
5913: PPUSH
5914: LD_EXP 33
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: PUSH
5923: LD_INT 4
5925: ARRAY
5926: PPUSH
5927: CALL_OW 566
// end ;
5931: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 54
5953: PUSH
5954: EMPTY
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 2
5963: PUSH
5964: LD_INT 25
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 25
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 16
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: IFFALSE 6372
6012: GO 6014
6014: DISABLE
6015: LD_INT 0
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
// begin enable ;
6021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6022: LD_ADDR_VAR 0 2
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 50
6039: PUSH
6040: EMPTY
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 54
6048: PUSH
6049: EMPTY
6050: LIST
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 16
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 69
6105: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 22
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 50
6123: PUSH
6124: EMPTY
6125: LIST
6126: PUSH
6127: LD_INT 21
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 32
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 58
6149: PUSH
6150: EMPTY
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PPUSH
6160: CALL_OW 69
6164: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
6165: LD_ADDR_VAR 0 4
6169: PUSH
6170: LD_INT 22
6172: PUSH
6173: LD_INT 1
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: ST_TO_ADDR
// if not tmp then
6206: LD_VAR 0 2
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6372
// for i in tmp do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_VAR 0 2
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6370
// begin btmp := FilterByTag ( btmp , 0 ) ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL 51836 0 2
6245: ST_TO_ADDR
// if not btmp then
6246: LD_VAR 0 3
6250: NOT
6251: IFFALSE 6296
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
6253: LD_VAR 0 1
6257: PPUSH
6258: CALL_OW 257
6262: PUSH
6263: LD_INT 16
6265: NONEQUAL
6266: PUSH
6267: LD_VAR 0 4
6271: AND
6272: IFFALSE 6292
// ComEnterUnit ( i , barracks [ 1 ] ) ;
6274: LD_VAR 0 1
6278: PPUSH
6279: LD_VAR 0 4
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 120
// continue ;
6292: GO 6225
// end else
6294: GO 6368
// begin SetTag ( btmp [ 1 ] , 1 ) ;
6296: LD_VAR 0 3
6300: PUSH
6301: LD_INT 1
6303: ARRAY
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: CALL_OW 120
// wait ( 0 0$9 ) ;
6330: LD_INT 315
6332: PPUSH
6333: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL 18680 0 1
6350: IFFALSE 6368
// SetTag ( btmp [ 1 ] , 0 ) ;
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL_OW 109
// end ; end ;
6368: GO 6225
6370: POP
6371: POP
// end ;
6372: PPOPN 4
6374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
6375: LD_INT 22
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 33
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 50
6397: PUSH
6398: EMPTY
6399: LIST
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 61
6406: PUSH
6407: EMPTY
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PPUSH
6420: CALL_OW 69
6424: IFFALSE 6515
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
// begin enable ;
6433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 50
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 61
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: ST_TO_ADDR
// for i in tmp do
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: FOR_IN
6500: IFFALSE 6513
// Connect ( i ) ;
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL 24864 0 1
6511: GO 6499
6513: POP
6514: POP
// end ;
6515: PPOPN 2
6517: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
6518: LD_EXP 6
6522: PUSH
6523: LD_OWVAR 67
6527: PUSH
6528: LD_INT 1
6530: GREATER
6531: AND
6532: IFFALSE 6974
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
6544: LD_INT 31500
6546: PUSH
6547: LD_INT 31500
6549: PUSH
6550: LD_INT 29400
6552: PUSH
6553: LD_INT 27300
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_OWVAR 67
6566: ARRAY
6567: PPUSH
6568: CALL_OW 67
// if usSurrender then
6572: LD_EXP 7
6576: IFFALSE 6580
// exit ;
6578: GO 6974
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
6580: LD_ADDR_VAR 0 1
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 5
6598: PUSH
6599: LD_INT 6
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_OWVAR 67
6612: ARRAY
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6919
// begin uc_side := 1 ;
6617: LD_ADDR_OWVAR 20
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// uc_nation := 1 ;
6625: LD_ADDR_OWVAR 21
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// InitHc_All ( ) ;
6633: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
6637: LD_INT 0
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_OWVAR 67
6665: ARRAY
6666: PPUSH
6667: CALL_OW 380
// un := CreateHuman ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: CALL_OW 44
6680: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PUSH
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 3
6707: MOD
6708: PUSH
6709: LD_INT 1
6711: PLUS
6712: ARRAY
6713: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6714: LD_VAR 0 4
6718: PUSH
6719: LD_INT 4
6721: EQUAL
6722: IFFALSE 6757
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 6
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 3
6748: PPUSH
6749: CALL_OW 12
6753: ARRAY
6754: ST_TO_ADDR
6755: GO 6792
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6757: LD_ADDR_VAR 0 5
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 7
6770: PUSH
6771: LD_INT 4
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 4
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: LD_INT 30
6810: PPUSH
6811: CALL 21396 0 5
// veh := CreateVehicle ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: CALL_OW 45
6824: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6825: LD_ADDR_EXP 34
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_EXP 34
6839: PUSH
6840: LD_INT 1
6842: PLUS
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: CALL_OW 1
6853: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_INT 4
6861: PPUSH
6862: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6866: LD_VAR 0 3
6870: PPUSH
6871: LD_INT 17
6873: PPUSH
6874: LD_INT 0
6876: PPUSH
6877: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_VAR 0 3
6890: PPUSH
6891: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6895: LD_VAR 0 3
6899: PPUSH
6900: LD_INT 153
6902: PPUSH
6903: LD_INT 45
6905: PPUSH
6906: CALL_OW 111
// wait ( 0 0$2 ) ;
6910: LD_INT 70
6912: PPUSH
6913: CALL_OW 67
// end ;
6917: GO 6614
6919: POP
6920: POP
// repeat wait ( 0 0$1 ) ;
6921: LD_INT 35
6923: PPUSH
6924: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6928: LD_ADDR_EXP 34
6932: PUSH
6933: LD_EXP 34
6937: PPUSH
6938: LD_INT 150
6940: PUSH
6941: LD_INT 36
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 138
6950: PUSH
6951: LD_INT 25
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL 56871 0 2
6966: ST_TO_ADDR
// until not usAdditionalForces ;
6967: LD_EXP 34
6971: NOT
6972: IFFALSE 6921
// end ;
6974: PPOPN 5
6976: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6977: LD_INT 22
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 101
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: IFFALSE 7025
7007: GO 7009
7009: DISABLE
// begin wait ( 0 0$30 ) ;
7010: LD_INT 1050
7012: PPUSH
7013: CALL_OW 67
// usAttacksAllowed := true ;
7017: LD_ADDR_EXP 6
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// end ; end_of_file
7025: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL 59514 0 1
// if un = Heike then
7035: LD_VAR 0 1
7039: PUSH
7040: LD_EXP 15
7044: EQUAL
7045: IFFALSE 7054
// YouLost ( Heike ) ;
7047: LD_STRING Heike
7049: PPUSH
7050: CALL_OW 104
// if un = usCommander then
7054: LD_VAR 0 1
7058: PUSH
7059: LD_EXP 30
7063: EQUAL
7064: IFFALSE 7073
// YouLost ( Commander ) ;
7066: LD_STRING Commander
7068: PPUSH
7069: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_vehicle then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 255
7082: PUSH
7083: LD_INT 2
7085: EQUAL
7086: PUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 247
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: AND
7101: IFFALSE 7118
// vehLossCounter := Inc ( vehLossCounter ) ;
7103: LD_ADDR_EXP 14
7107: PUSH
7108: LD_EXP 14
7112: PPUSH
7113: CALL 55628 0 1
7117: ST_TO_ADDR
// if GetSide ( un ) = 1 then
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 255
7127: PUSH
7128: LD_INT 1
7130: EQUAL
7131: IFFALSE 7473
// begin if GetClass ( un ) = class_sniper then
7133: LD_VAR 0 1
7137: PPUSH
7138: CALL_OW 257
7142: PUSH
7143: LD_INT 5
7145: EQUAL
7146: IFFALSE 7163
// sniperKillCounter := Inc ( sniperKillCounter ) ;
7148: LD_ADDR_EXP 13
7152: PUSH
7153: LD_EXP 13
7157: PPUSH
7158: CALL 55628 0 1
7162: ST_TO_ADDR
// if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 264
7172: PUSH
7173: LD_INT 13
7175: EQUAL
7176: PUSH
7177: LD_INT 25
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7248
// begin wait ( 0 0$05 * Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) ) ) ;
7187: LD_INT 175
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 34
7202: PUSH
7203: LD_INT 13
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PPUSH
7219: CALL 18658 0 1
7223: MUL
7224: PPUSH
7225: CALL_OW 67
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
7229: LD_INT 25
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 13
7243: PPUSH
7244: CALL_OW 185
// end ; if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 264
7257: PUSH
7258: LD_INT 12
7260: EQUAL
7261: PUSH
7262: LD_INT 25
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7291
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
7272: LD_INT 25
7274: PPUSH
7275: LD_INT 2
7277: PPUSH
7278: LD_INT 1
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 12
7286: PPUSH
7287: CALL_OW 185
// if GetBType ( un ) = b_bunker then
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 266
7300: PUSH
7301: LD_INT 32
7303: EQUAL
7304: IFFALSE 7388
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ [ b_bunker , b_turret ] [ rand ( 1 , 2 ) ] , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7306: LD_ADDR_EXP 33
7310: PUSH
7311: LD_EXP 33
7315: PPUSH
7316: LD_EXP 33
7320: PUSH
7321: LD_INT 1
7323: PLUS
7324: PPUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 33
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 250
7356: PUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PUSH
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 254
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 1
7387: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 266
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: LD_INT 4
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: IN
7408: IFFALSE 7473
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
7410: LD_ADDR_EXP 33
7414: PUSH
7415: LD_EXP 33
7419: PPUSH
7420: LD_EXP 33
7424: PUSH
7425: LD_INT 1
7427: PLUS
7428: PPUSH
7429: LD_INT 4
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 250
7441: PUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 251
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 254
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 1
7472: ST_TO_ADDR
// end ; end ;
7473: PPOPN 1
7475: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 255
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: PUSH
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 110
7499: PUSH
7500: LD_INT 1
7502: EQUAL
7503: AND
7504: IFFALSE 7518
// SetTag ( un , 0 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 0
7513: PPUSH
7514: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 255
7527: PUSH
7528: LD_INT 1
7530: EQUAL
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 264
7541: PUSH
7542: LD_INT 6
7544: EQUAL
7545: AND
7546: PUSH
7547: LD_EXP 11
7551: NOT
7552: AND
7553: IFFALSE 7563
// seeHeavyGun := true ;
7555: LD_ADDR_EXP 11
7559: PUSH
7560: LD_INT 1
7562: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 263
7572: PUSH
7573: LD_INT 2
7575: EQUAL
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PUSH
7587: LD_INT 2
7589: NONEQUAL
7590: AND
7591: IFFALSE 7617
// begin ComUnlink ( un ) ;
7593: LD_VAR 0 1
7597: PPUSH
7598: CALL_OW 136
// if not seeRemoteVehicle then
7602: LD_EXP 10
7606: NOT
7607: IFFALSE 7617
// seeRemoteVehicle := true ;
7609: LD_ADDR_EXP 10
7613: PUSH
7614: LD_INT 1
7616: ST_TO_ADDR
// end ; end ;
7617: PPOPN 1
7619: END
// on BuildingComplete ( b ) do var i , barracks ;
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin if GetSide ( b ) = 2 then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 255
7633: PUSH
7634: LD_INT 2
7636: EQUAL
7637: IFFALSE 7675
// begin if GetBType ( b ) = b_depot and IsInArea ( b , westBankArea ) then
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 266
7648: PUSH
7649: LD_INT 0
7651: EQUAL
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: LD_INT 18
7660: PPUSH
7661: CALL_OW 308
7665: AND
7666: IFFALSE 7675
// SetAchievement ( ACH_WEST ) ;
7668: LD_STRING ACH_WEST
7670: PPUSH
7671: CALL_OW 543
// end ; if GetSide ( b ) = 1 then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 255
7684: PUSH
7685: LD_INT 1
7687: EQUAL
7688: IFFALSE 7864
// begin usToBuild := Delete ( usToBuild , 1 ) ;
7690: LD_ADDR_EXP 33
7694: PUSH
7695: LD_EXP 33
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: CALL_OW 3
7707: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 266
7717: PUSH
7718: LD_INT 4
7720: EQUAL
7721: IFFALSE 7732
// ComUpgrade ( b ) ;
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
7732: LD_VAR 0 1
7736: PPUSH
7737: CALL_OW 266
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: IN
7752: IFFALSE 7864
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
7754: LD_VAR 0 1
7758: PPUSH
7759: LD_INT 6
7761: PUSH
7762: LD_INT 7
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ARRAY
7780: PPUSH
7781: CALL_OW 208
// if GetBType ( b ) = b_turret then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 266
7794: PUSH
7795: LD_INT 33
7797: EQUAL
7798: IFFALSE 7802
// exit ;
7800: GO 7864
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 5
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: ST_TO_ADDR
// if barracks then
7836: LD_VAR 0 3
7840: IFFALSE 7864
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: CALL_OW 313
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: CALL_OW 122
// end ; end ; end ;
7864: PPOPN 3
7866: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL 59572 0 2
// if GetSide ( factory ) = 1 then
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 255
7890: PUSH
7891: LD_INT 1
7893: EQUAL
7894: IFFALSE 7973
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 264
7905: PUSH
7906: LD_INT 12
7908: EQUAL
7909: IFFALSE 7921
// usCargo := vehicle ;
7911: LD_ADDR_EXP 32
7915: PUSH
7916: LD_VAR 0 1
7920: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 264
7930: PUSH
7931: LD_INT 12
7933: PUSH
7934: LD_INT 13
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: IN
7941: NOT
7942: IFFALSE 7973
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7944: LD_ADDR_EXP 31
7948: PUSH
7949: LD_EXP 31
7953: PPUSH
7954: LD_EXP 31
7958: PUSH
7959: LD_INT 1
7961: PLUS
7962: PPUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 1
7972: ST_TO_ADDR
// end ; end ;
7973: PPOPN 2
7975: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7976: LD_VAR 0 2
7980: PPUSH
7981: CALL_OW 255
7985: PUSH
7986: LD_INT 1
7988: EQUAL
7989: IFFALSE 8003
// AddComEnterUnit ( un , amFac ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_INT 25
7998: PPUSH
7999: CALL_OW 180
// end ;
8003: PPOPN 4
8005: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 255
8015: PUSH
8016: LD_INT 1
8018: EQUAL
8019: PUSH
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 266
8029: PUSH
8030: LD_INT 32
8032: EQUAL
8033: AND
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 257
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: IN
8055: AND
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 50
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 69
8092: AND
8093: IFFALSE 8163
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
8095: LD_INT 74
8097: PPUSH
8098: LD_INT 120
8100: PPUSH
8101: CALL_OW 428
8105: PPUSH
8106: CALL_OW 313
8110: PUSH
8111: LD_INT 6
8113: LESS
8114: IFFALSE 8163
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 74
8123: PPUSH
8124: LD_INT 120
8126: PPUSH
8127: CALL_OW 428
8131: PPUSH
8132: CALL_OW 120
// if GetClass ( un ) = class_soldier then
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: IFFALSE 8163
// AddComChangeProfession ( un , class_sniper ) ;
8151: LD_VAR 0 2
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: CALL_OW 183
// end ; end ; end_of_file
8163: PPOPN 2
8165: END
// export function Action ; var i , j , veh , tmp , _tmp , hasEng , hasCamera , driver , counter ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
// Video ( true ) ;
8178: LD_INT 1
8180: PPUSH
8181: CALL 54239 0 1
// music_nat := 1 ;
8185: LD_ADDR_OWVAR 71
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// music_class := music_recon ;
8193: LD_ADDR_OWVAR 72
8197: PUSH
8198: LD_INT 3
8200: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
8201: LD_INT 184
8203: PPUSH
8204: LD_INT 142
8206: PPUSH
8207: LD_INT 2
8209: PPUSH
8210: LD_INT 10
8212: NEG
8213: PPUSH
8214: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
8218: LD_INT 184
8220: PPUSH
8221: LD_INT 142
8223: PPUSH
8224: LD_INT 2
8226: PPUSH
8227: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
8231: LD_INT 204
8233: PPUSH
8234: LD_INT 151
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 10
8242: NEG
8243: PPUSH
8244: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
8248: LD_INT 204
8250: PPUSH
8251: LD_INT 151
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
8261: LD_INT 184
8263: PPUSH
8264: LD_INT 142
8266: PPUSH
8267: CALL_OW 86
// wait ( 0 0$2 ) ;
8271: LD_INT 70
8273: PPUSH
8274: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
8278: LD_ADDR_VAR 0 5
8282: PUSH
8283: LD_EXP 15
8287: PUSH
8288: LD_EXP 16
8292: PUSH
8293: LD_EXP 17
8297: PUSH
8298: LD_EXP 18
8302: PUSH
8303: LD_EXP 19
8307: PUSH
8308: LD_EXP 20
8312: PUSH
8313: LD_EXP 21
8317: PUSH
8318: LD_EXP 22
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_EXP 27
8355: UNION
8356: ST_TO_ADDR
// tmp := tmp diff 0 ;
8357: LD_ADDR_VAR 0 5
8361: PUSH
8362: LD_VAR 0 5
8366: PUSH
8367: LD_INT 0
8369: DIFF
8370: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
8371: LD_ADDR_VAR 0 7
8375: PUSH
8376: LD_VAR 0 5
8380: PPUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: PUSH
8396: LD_INT 0
8398: GREATER
8399: ST_TO_ADDR
// hasCamera := false ;
8400: LD_ADDR_VAR 0 8
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// if not hasEng then
8408: LD_VAR 0 7
8412: NOT
8413: IFFALSE 8466
// begin _tmp := tmp diff [ Kurt , Mike ] ;
8415: LD_ADDR_VAR 0 6
8419: PUSH
8420: LD_VAR 0 5
8424: PUSH
8425: LD_EXP 25
8429: PUSH
8430: LD_EXP 17
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: DIFF
8439: ST_TO_ADDR
// SetClass ( _tmp [ rand ( 1 , _tmp ) ] , class_engineer ) ;
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 1
8447: PPUSH
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 12
8457: ARRAY
8458: PPUSH
8459: LD_INT 2
8461: PPUSH
8462: CALL_OW 336
// end ; if heikeVehicles then
8466: LD_EXP 29
8470: IFFALSE 9112
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
8472: LD_ADDR_VAR 0 5
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_INT 3
8484: PPUSH
8485: CALL 56493 0 2
8489: ST_TO_ADDR
// for i in heikeVehicles do
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_EXP 29
8499: PUSH
8500: FOR_IN
8501: IFFALSE 9110
// begin if not tmp then
8503: LD_VAR 0 5
8507: NOT
8508: IFFALSE 8512
// break ;
8510: GO 9110
// uc_side := 2 ;
8512: LD_ADDR_OWVAR 20
8516: PUSH
8517: LD_INT 2
8519: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
8520: LD_ADDR_OWVAR 21
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_INT 5
8532: ARRAY
8533: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
8534: LD_ADDR_OWVAR 37
8538: PUSH
8539: LD_VAR 0 2
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
8548: LD_ADDR_OWVAR 39
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 2
8560: ARRAY
8561: ST_TO_ADDR
// vc_control := i [ 3 ] ;
8562: LD_ADDR_OWVAR 38
8566: PUSH
8567: LD_VAR 0 2
8571: PUSH
8572: LD_INT 3
8574: ARRAY
8575: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
8576: LD_ADDR_OWVAR 40
8580: PUSH
8581: LD_VAR 0 2
8585: PUSH
8586: LD_INT 4
8588: ARRAY
8589: ST_TO_ADDR
// veh := CreateVehicle ;
8590: LD_ADDR_VAR 0 4
8594: PUSH
8595: CALL_OW 45
8599: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8600: LD_VAR 0 4
8604: PPUSH
8605: LD_INT 4
8607: PPUSH
8608: CALL_OW 233
// if i [ 3 ] = control_manual then
8612: LD_VAR 0 2
8616: PUSH
8617: LD_INT 3
8619: ARRAY
8620: PUSH
8621: LD_INT 1
8623: EQUAL
8624: IFFALSE 8718
// begin repeat wait ( 1 ) ;
8626: LD_INT 1
8628: PPUSH
8629: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8633: LD_VAR 0 4
8637: PPUSH
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 0
8643: PPUSH
8644: CALL_OW 49
8648: IFFALSE 8626
// if i [ 4 ] = ar_control_tower then
8650: LD_VAR 0 2
8654: PUSH
8655: LD_INT 4
8657: ARRAY
8658: PUSH
8659: LD_INT 31
8661: EQUAL
8662: IFFALSE 8680
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
8664: LD_VAR 0 5
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: PPUSH
8673: LD_INT 3
8675: PPUSH
8676: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
8680: LD_VAR 0 5
8684: PUSH
8685: LD_INT 1
8687: ARRAY
8688: PPUSH
8689: LD_VAR 0 4
8693: PPUSH
8694: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
8698: LD_ADDR_VAR 0 5
8702: PUSH
8703: LD_VAR 0 5
8707: PPUSH
8708: LD_INT 1
8710: PPUSH
8711: CALL_OW 3
8715: ST_TO_ADDR
// end else
8716: GO 8788
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 34
8730: PUSH
8731: LD_INT 31
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PPUSH
8742: CALL_OW 69
8746: IFFALSE 8788
// begin repeat wait ( 1 ) ;
8748: LD_INT 1
8750: PPUSH
8751: CALL_OW 67
// until PlaceUnitArea ( veh , startArea , false ) ;
8755: LD_VAR 0 4
8759: PPUSH
8760: LD_INT 1
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 49
8770: IFFALSE 8748
// Connect ( veh ) ;
8772: LD_VAR 0 4
8776: PPUSH
8777: CALL 24864 0 1
// wait ( 0 0$2 ) ;
8781: LD_INT 70
8783: PPUSH
8784: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
8788: LD_VAR 0 4
8792: PPUSH
8793: LD_VAR 0 2
8797: PUSH
8798: LD_INT 6
8800: ARRAY
8801: PPUSH
8802: CALL_OW 234
// SetFuel ( veh , 20 ) ;
8806: LD_VAR 0 4
8810: PPUSH
8811: LD_INT 20
8813: PPUSH
8814: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
8818: LD_VAR 0 2
8822: PUSH
8823: LD_INT 7
8825: ARRAY
8826: PUSH
8827: LD_VAR 0 4
8831: PPUSH
8832: CALL_OW 264
8836: PUSH
8837: LD_INT 51
8839: PUSH
8840: LD_INT 32
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: IN
8847: AND
8848: IFFALSE 8899
// begin for j := 1 to 2 do
8850: LD_ADDR_VAR 0 3
8854: PUSH
8855: DOUBLE
8856: LD_INT 1
8858: DEC
8859: ST_TO_ADDR
8860: LD_INT 2
8862: PUSH
8863: FOR_TO
8864: IFFALSE 8897
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
8866: LD_VAR 0 4
8870: PPUSH
8871: LD_VAR 0 3
8875: PPUSH
8876: LD_VAR 0 2
8880: PUSH
8881: LD_INT 7
8883: ARRAY
8884: PUSH
8885: LD_VAR 0 3
8889: ARRAY
8890: PPUSH
8891: CALL_OW 291
8895: GO 8863
8897: POP
8898: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
8899: LD_VAR 0 4
8903: PPUSH
8904: LD_INT 185
8906: PPUSH
8907: LD_INT 144
8909: PPUSH
8910: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
8914: LD_VAR 0 4
8918: PPUSH
8919: CALL_OW 263
8923: PUSH
8924: LD_INT 1
8926: EQUAL
8927: PUSH
8928: LD_VAR 0 8
8932: NOT
8933: AND
8934: PUSH
8935: LD_VAR 0 4
8939: PPUSH
8940: CALL_OW 311
8944: PPUSH
8945: CALL_OW 257
8949: PUSH
8950: LD_INT 2
8952: EQUAL
8953: AND
8954: IFFALSE 9059
// begin hasCamera := true ;
8956: LD_ADDR_VAR 0 8
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
8964: LD_ADDR_VAR 0 9
8968: PUSH
8969: LD_VAR 0 4
8973: PPUSH
8974: CALL_OW 311
8978: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8979: LD_VAR 0 4
8983: PPUSH
8984: LD_INT 177
8986: PPUSH
8987: LD_INT 138
8989: PPUSH
8990: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8994: LD_VAR 0 9
8998: PPUSH
8999: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
9003: LD_VAR 0 9
9007: PPUSH
9008: LD_INT 190
9010: PPUSH
9011: LD_INT 150
9013: PPUSH
9014: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
9018: LD_VAR 0 9
9022: PPUSH
9023: LD_VAR 0 4
9027: PPUSH
9028: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
9032: LD_VAR 0 9
9036: PPUSH
9037: LD_INT 170
9039: PPUSH
9040: LD_INT 103
9042: PPUSH
9043: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
9047: LD_INT 190
9049: PPUSH
9050: LD_INT 150
9052: PPUSH
9053: CALL_OW 84
// end else
9057: GO 9101
// begin AddComWait ( veh , 0 0$2 ) ;
9059: LD_VAR 0 4
9063: PPUSH
9064: LD_INT 70
9066: PPUSH
9067: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
9071: LD_VAR 0 4
9075: PPUSH
9076: LD_INT 179
9078: PPUSH
9079: LD_INT 129
9081: PPUSH
9082: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
9086: LD_VAR 0 4
9090: PPUSH
9091: LD_INT 170
9093: PPUSH
9094: LD_INT 103
9096: PPUSH
9097: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
9101: LD_INT 70
9103: PPUSH
9104: CALL_OW 67
// end ;
9108: GO 8500
9110: POP
9111: POP
// end ; if tmp then
9112: LD_VAR 0 5
9116: IFFALSE 9270
// begin for i in tmp do
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_VAR 0 5
9127: PUSH
9128: FOR_IN
9129: IFFALSE 9268
// begin SetDir ( i , 4 ) ;
9131: LD_VAR 0 2
9135: PPUSH
9136: LD_INT 4
9138: PPUSH
9139: CALL_OW 233
// repeat wait ( 1 ) ;
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: LD_INT 0
9160: PPUSH
9161: CALL_OW 49
9165: IFFALSE 9143
// ComMoveXY ( i , 185 , 144 ) ;
9167: LD_VAR 0 2
9171: PPUSH
9172: LD_INT 185
9174: PPUSH
9175: LD_INT 144
9177: PPUSH
9178: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 257
9191: PUSH
9192: LD_INT 2
9194: EQUAL
9195: PUSH
9196: LD_VAR 0 8
9200: NOT
9201: AND
9202: IFFALSE 9229
// begin hasCamera := true ;
9204: LD_ADDR_VAR 0 8
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
9212: LD_VAR 0 2
9216: PPUSH
9217: LD_INT 190
9219: PPUSH
9220: LD_INT 150
9222: PPUSH
9223: CALL_OW 217
// end else
9227: GO 9244
// AddComMoveXY ( i , 179 , 129 ) ;
9229: LD_VAR 0 2
9233: PPUSH
9234: LD_INT 179
9236: PPUSH
9237: LD_INT 129
9239: PPUSH
9240: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
9244: LD_VAR 0 2
9248: PPUSH
9249: LD_INT 170
9251: PPUSH
9252: LD_INT 103
9254: PPUSH
9255: CALL_OW 171
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// end ;
9266: GO 9128
9268: POP
9269: POP
// end ; if heikeApes then
9270: LD_EXP 28
9274: IFFALSE 9401
// begin counter := 0 ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// for i in heikeApes do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: LD_EXP 28
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9399
// begin if counter > 2 then
9297: LD_VAR 0 10
9301: PUSH
9302: LD_INT 2
9304: GREATER
9305: IFFALSE 9309
// break ;
9307: GO 9399
// counter := Inc ( counter ) ;
9309: LD_ADDR_VAR 0 10
9313: PUSH
9314: LD_VAR 0 10
9318: PPUSH
9319: CALL 55628 0 1
9323: ST_TO_ADDR
// SetDir ( i , 4 ) ;
9324: LD_VAR 0 2
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 233
// repeat wait ( 1 ) ;
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 0
9353: PPUSH
9354: CALL_OW 49
9358: IFFALSE 9336
// ComMoveXY ( i , 185 , 144 ) ;
9360: LD_VAR 0 2
9364: PPUSH
9365: LD_INT 185
9367: PPUSH
9368: LD_INT 144
9370: PPUSH
9371: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
9375: LD_VAR 0 2
9379: PPUSH
9380: LD_INT 170
9382: PPUSH
9383: LD_INT 103
9385: PPUSH
9386: CALL_OW 171
// wait ( 0 0$2 ) ;
9390: LD_INT 70
9392: PPUSH
9393: CALL_OW 67
// end ;
9397: GO 9294
9399: POP
9400: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
9401: LD_EXP 15
9405: PPUSH
9406: LD_INT 163
9408: PPUSH
9409: LD_INT 89
9411: PPUSH
9412: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
9416: LD_EXP 15
9420: PPUSH
9421: LD_STRING DH-Intro-1
9423: PPUSH
9424: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
9428: LD_INT 175
9430: PPUSH
9431: LD_INT 117
9433: PPUSH
9434: CALL_OW 84
// if Markov then
9438: LD_EXP 22
9442: IFFALSE 10017
// begin Say ( Markov , DMar-Intro-2 ) ;
9444: LD_EXP 22
9448: PPUSH
9449: LD_STRING DMar-Intro-2
9451: PPUSH
9452: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
9456: LD_EXP 22
9460: PPUSH
9461: LD_STRING DMar-Intro-3
9463: PPUSH
9464: CALL_OW 88
// wait ( 0 0$1 ) ;
9468: LD_INT 35
9470: PPUSH
9471: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9475: LD_EXP 15
9479: PPUSH
9480: CALL_OW 85
// if Kurt then
9484: LD_EXP 25
9488: IFFALSE 9540
// begin if IsInUnit ( Kurt ) then
9490: LD_EXP 25
9494: PPUSH
9495: CALL_OW 310
9499: IFFALSE 9510
// ComExit ( Kurt ) ;
9501: LD_EXP 25
9505: PPUSH
9506: CALL 54665 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
9510: LD_EXP 25
9514: PPUSH
9515: LD_INT 130
9517: PPUSH
9518: LD_INT 56
9520: PPUSH
9521: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
9525: LD_EXP 25
9529: PPUSH
9530: LD_INT 129
9532: PPUSH
9533: LD_INT 56
9535: PPUSH
9536: CALL_OW 178
// end ; if Kaia then
9540: LD_EXP 20
9544: IFFALSE 9724
// begin Say ( Kaia , DK-Intro-4 ) ;
9546: LD_EXP 20
9550: PPUSH
9551: LD_STRING DK-Intro-4
9553: PPUSH
9554: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_STRING DMar-Intro-5
9565: PPUSH
9566: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
9570: LD_EXP 22
9574: PPUSH
9575: LD_STRING DMar-Intro-6
9577: PPUSH
9578: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
9582: LD_EXP 24
9586: PPUSH
9587: LD_STRING DO-Intro-7
9589: PPUSH
9590: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
9594: LD_INT 160
9596: PPUSH
9597: LD_INT 85
9599: PPUSH
9600: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
9604: LD_EXP 22
9608: PPUSH
9609: LD_STRING DMar-Intro-8
9611: PPUSH
9612: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
9616: LD_EXP 22
9620: PPUSH
9621: LD_STRING DMar-Intro-9
9623: PPUSH
9624: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
9628: LD_EXP 22
9632: PPUSH
9633: LD_STRING DMar-Intro-10
9635: PPUSH
9636: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
9640: LD_EXP 22
9644: PPUSH
9645: LD_STRING DMar-Intro-11
9647: PPUSH
9648: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
9652: LD_EXP 16
9656: PPUSH
9657: LD_STRING DG-Intro-12
9659: PPUSH
9660: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
9664: LD_EXP 16
9668: PPUSH
9669: LD_STRING DG-Intro-13
9671: PPUSH
9672: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
9676: LD_EXP 16
9680: PPUSH
9681: LD_STRING DG-Intro-14
9683: PPUSH
9684: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
9688: LD_EXP 16
9692: PPUSH
9693: LD_STRING DG-Intro-15
9695: PPUSH
9696: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
9700: LD_EXP 15
9704: PPUSH
9705: LD_STRING DH-Intro-16
9707: PPUSH
9708: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
9712: LD_EXP 22
9716: PPUSH
9717: LD_STRING DMar-Intro-17
9719: PPUSH
9720: CALL_OW 88
// end ; if Kurt and Mike then
9724: LD_EXP 25
9728: PUSH
9729: LD_EXP 17
9733: AND
9734: IFFALSE 10017
// begin CenterNowOnUnits ( Kurt ) ;
9736: LD_EXP 25
9740: PPUSH
9741: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
9745: LD_EXP 25
9749: PPUSH
9750: LD_EXP 15
9754: PPUSH
9755: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
9759: LD_EXP 25
9763: PPUSH
9764: LD_STRING DKs-Intro-18
9766: PPUSH
9767: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
9771: LD_EXP 25
9775: PPUSH
9776: LD_STRING DKs-Intro-19
9778: PPUSH
9779: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
9783: LD_EXP 17
9787: PPUSH
9788: CALL_OW 87
// if IsInUnit ( Mike ) then
9792: LD_EXP 17
9796: PPUSH
9797: CALL_OW 310
9801: IFFALSE 9812
// ComExit ( Mike ) ;
9803: LD_EXP 17
9807: PPUSH
9808: CALL 54665 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
9812: LD_EXP 17
9816: PPUSH
9817: LD_INT 129
9819: PPUSH
9820: LD_INT 53
9822: PPUSH
9823: CALL_OW 171
// AddComHold ( Mike ) ;
9827: LD_EXP 17
9831: PPUSH
9832: CALL_OW 200
// wait ( 0 0$2 ) ;
9836: LD_INT 70
9838: PPUSH
9839: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
9843: LD_EXP 17
9847: PPUSH
9848: LD_STRING DM-Intro-20
9850: PPUSH
9851: CALL_OW 88
// scoutActive := Query ( Scout ) ;
9855: LD_ADDR_EXP 3
9859: PUSH
9860: LD_STRING Scout
9862: PPUSH
9863: CALL_OW 97
9867: ST_TO_ADDR
// if scoutActive = 1 then
9868: LD_EXP 3
9872: PUSH
9873: LD_INT 1
9875: EQUAL
9876: IFFALSE 9973
// begin CenterNowOnUnits ( Kurt ) ;
9878: LD_EXP 25
9882: PPUSH
9883: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
9887: LD_EXP 15
9891: PPUSH
9892: LD_STRING DH-Intro-21
9894: PPUSH
9895: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
9899: LD_EXP 17
9903: PPUSH
9904: LD_STRING DM-Intro-22
9906: PPUSH
9907: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
9911: LD_EXP 25
9915: PPUSH
9916: LD_STRING DKs-Intro-23
9918: PPUSH
9919: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_INT 5
9930: PPUSH
9931: CALL_OW 235
// SetSide ( Mike , 5 ) ;
9935: LD_EXP 17
9939: PPUSH
9940: LD_INT 5
9942: PPUSH
9943: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
9947: LD_EXP 25
9951: PUSH
9952: LD_EXP 17
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: LD_INT 104
9963: PPUSH
9964: LD_INT 66
9966: PPUSH
9967: CALL_OW 111
// end else
9971: GO 10017
// begin scoutActive := 0 ;
9973: LD_ADDR_EXP 3
9977: PUSH
9978: LD_INT 0
9980: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
9981: LD_EXP 15
9985: PPUSH
9986: LD_STRING DH-Intro-a-21
9988: PPUSH
9989: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9993: LD_EXP 17
9997: PPUSH
9998: LD_STRING DM-Intro-a-22
10000: PPUSH
10001: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
10005: LD_EXP 25
10009: PPUSH
10010: LD_STRING DKs-Intro-a-23
10012: PPUSH
10013: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
10017: LD_INT 0
10019: PPUSH
10020: CALL 54239 0 1
// music_nat := music_auto ;
10024: LD_ADDR_OWVAR 71
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// music_class := music_auto ;
10032: LD_ADDR_OWVAR 72
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
10040: LD_STRING M1
10042: PPUSH
10043: CALL_OW 337
// wait ( 0 0$3 ) ;
10047: LD_INT 105
10049: PPUSH
10050: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
10054: LD_EXP 15
10058: PPUSH
10059: LD_STRING DH-Base-1
10061: PPUSH
10062: CALL_OW 88
// if Kaia then
10066: LD_EXP 20
10070: IFFALSE 10180
// begin Say ( Kaia , DK-Base-2 ) ;
10072: LD_EXP 20
10076: PPUSH
10077: LD_STRING DK-Base-2
10079: PPUSH
10080: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING DH-Base-3
10091: PPUSH
10092: CALL_OW 88
// if Aviradze then
10096: LD_EXP 26
10100: IFFALSE 10180
// begin Say ( Aviradze , DA-Base-4 ) ;
10102: LD_EXP 26
10106: PPUSH
10107: LD_STRING DA-Base-4
10109: PPUSH
10110: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
10114: LD_EXP 20
10118: PPUSH
10119: LD_STRING DK-Base-5
10121: PPUSH
10122: CALL_OW 88
// if Markov then
10126: LD_EXP 22
10130: IFFALSE 10180
// begin Say ( Markov , DMar-Base-6 ) ;
10132: LD_EXP 22
10136: PPUSH
10137: LD_STRING DMar-Base-6
10139: PPUSH
10140: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
10144: LD_EXP 20
10148: PPUSH
10149: LD_STRING DK-Base-7
10151: PPUSH
10152: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
10156: LD_EXP 22
10160: PPUSH
10161: LD_STRING DMar-Base-8
10163: PPUSH
10164: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
10168: LD_EXP 22
10172: PPUSH
10173: LD_STRING DMar-Base-9
10175: PPUSH
10176: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
10180: CALL_OW 22
// end ;
10184: LD_VAR 0 1
10188: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
10189: LD_EXP 5
10193: IFFALSE 11304
10195: GO 10197
10197: DISABLE
10198: LD_INT 0
10200: PPUSH
10201: PPUSH
// begin InGameOn ;
10202: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
10206: LD_EXP 17
10210: PUSH
10211: LD_EXP 25
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PPUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 119
// ComExit ( Heike ) ;
10229: LD_EXP 15
10233: PPUSH
10234: CALL 54665 0 1
// if IsOk ( Mike ) then
10238: LD_EXP 17
10242: PPUSH
10243: CALL_OW 302
10247: IFFALSE 10265
// AddComTurnUnit ( Heike , Mike ) else
10249: LD_EXP 15
10253: PPUSH
10254: LD_EXP 17
10258: PPUSH
10259: CALL_OW 179
10263: GO 10279
// AddComTurnUnit ( Heike , Kurt ) ;
10265: LD_EXP 15
10269: PPUSH
10270: LD_EXP 25
10274: PPUSH
10275: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10279: LD_EXP 17
10283: PPUSH
10284: CALL_OW 302
10288: PUSH
10289: LD_EXP 25
10293: PPUSH
10294: CALL_OW 302
10298: AND
10299: IFFALSE 10550
// begin CenterNowOnUnits ( Mike ) ;
10301: LD_EXP 17
10305: PPUSH
10306: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
10310: LD_EXP 17
10314: PPUSH
10315: LD_STRING DM-Scout-1
10317: PPUSH
10318: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
10322: LD_EXP 15
10326: PPUSH
10327: LD_STRING DH-Scout-2
10329: PPUSH
10330: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
10334: LD_EXP 25
10338: PPUSH
10339: LD_STRING DKs-Scout-3
10341: PPUSH
10342: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
10346: LD_EXP 15
10350: PPUSH
10351: LD_STRING DH-Scout-4
10353: PPUSH
10354: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
10358: LD_EXP 15
10362: PPUSH
10363: LD_STRING DH-Scout-5
10365: PPUSH
10366: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
10370: LD_ADDR_VAR 0 2
10374: PUSH
10375: LD_INT 72
10377: PUSH
10378: LD_INT 122
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 89
10387: PUSH
10388: LD_INT 131
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 99
10397: PUSH
10398: LD_INT 139
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 100
10407: PUSH
10408: LD_INT 148
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: ST_TO_ADDR
// for i in tmp do
10421: LD_ADDR_VAR 0 1
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: FOR_IN
10432: IFFALSE 10490
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
10434: LD_VAR 0 1
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 1
10447: PUSH
10448: LD_INT 2
10450: ARRAY
10451: PPUSH
10452: LD_INT 2
10454: PPUSH
10455: LD_INT 6
10457: NEG
10458: PPUSH
10459: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
10463: LD_VAR 0 1
10467: PUSH
10468: LD_INT 1
10470: ARRAY
10471: PPUSH
10472: LD_VAR 0 1
10476: PUSH
10477: LD_INT 2
10479: ARRAY
10480: PPUSH
10481: LD_INT 2
10483: PPUSH
10484: CALL_OW 331
// end ;
10488: GO 10431
10490: POP
10491: POP
// CenterOnXY ( 83 , 132 ) ;
10492: LD_INT 83
10494: PPUSH
10495: LD_INT 132
10497: PPUSH
10498: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKs-Scout-6
10509: PPUSH
10510: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
10514: LD_EXP 17
10518: PPUSH
10519: LD_STRING DM-Scout-7
10521: PPUSH
10522: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
10526: LD_EXP 17
10530: PPUSH
10531: LD_STRING DM-Scout-8
10533: PPUSH
10534: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
10538: LD_EXP 25
10542: PPUSH
10543: LD_STRING DKs-Scout-9
10545: PPUSH
10546: CALL_OW 88
// end ; if IsDead ( Mike ) then
10550: LD_EXP 17
10554: PPUSH
10555: CALL_OW 301
10559: IFFALSE 10726
// begin CenterNowOnUnits ( Kurt ) ;
10561: LD_EXP 25
10565: PPUSH
10566: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
10570: LD_EXP 25
10574: PPUSH
10575: LD_STRING DKs-Scout-b-1
10577: PPUSH
10578: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
10582: LD_EXP 25
10586: PPUSH
10587: LD_STRING DKs-Scout-b-2
10589: PPUSH
10590: CALL_OW 88
// if IsOk ( Givi ) then
10594: LD_EXP 16
10598: PPUSH
10599: CALL_OW 302
10603: IFFALSE 10678
// begin ComExit ( Givi ) ;
10605: LD_EXP 16
10609: PPUSH
10610: CALL 54665 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
10614: LD_EXP 16
10618: PPUSH
10619: LD_EXP 25
10623: PPUSH
10624: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
10628: LD_EXP 16
10632: PPUSH
10633: LD_STRING DG-Scout-b-3
10635: PPUSH
10636: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
10640: LD_EXP 16
10644: PPUSH
10645: LD_STRING DG-Scout-b-4
10647: PPUSH
10648: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
10652: LD_EXP 16
10656: PPUSH
10657: LD_STRING DG-Scout-b-5
10659: PPUSH
10660: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
10664: LD_EXP 15
10668: PPUSH
10669: LD_STRING DH-Scout-b-6
10671: PPUSH
10672: CALL_OW 88
// end else
10676: GO 10690
// Say ( Heike , DH-Scout-a-4 ) ;
10678: LD_EXP 15
10682: PPUSH
10683: LD_STRING DH-Scout-a-4
10685: PPUSH
10686: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
10690: LD_EXP 25
10694: PPUSH
10695: LD_STRING DKs-Scout-b-7
10697: PPUSH
10698: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
10702: LD_EXP 25
10706: PPUSH
10707: LD_STRING DKs-Scout-b-8
10709: PPUSH
10710: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKs-Scout-b-9
10721: PPUSH
10722: CALL_OW 88
// end ; if IsDead ( Kurt ) then
10726: LD_EXP 25
10730: PPUSH
10731: CALL_OW 301
10735: IFFALSE 11014
// begin CenterNowOnUnits ( Mike ) ;
10737: LD_EXP 17
10741: PPUSH
10742: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
10746: LD_EXP 17
10750: PPUSH
10751: LD_STRING DM-Scout-a-1
10753: PPUSH
10754: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
10758: LD_EXP 17
10762: PPUSH
10763: LD_STRING DM-Scout-a-2
10765: PPUSH
10766: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
10770: LD_EXP 17
10774: PPUSH
10775: CALL_OW 256
10779: PUSH
10780: LD_INT 1000
10782: LESS
10783: IFFALSE 10799
// Say ( Heike , DH-Scout-a-3 ) else
10785: LD_EXP 15
10789: PPUSH
10790: LD_STRING DH-Scout-a-3
10792: PPUSH
10793: CALL_OW 88
10797: GO 10811
// Say ( Heike , DH-Scout-a-4 ) ;
10799: LD_EXP 15
10803: PPUSH
10804: LD_STRING DH-Scout-a-4
10806: PPUSH
10807: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
10811: LD_EXP 17
10815: PPUSH
10816: LD_STRING DM-Scout-a-5
10818: PPUSH
10819: CALL_OW 88
// if IsOk ( Kaia ) then
10823: LD_EXP 20
10827: PPUSH
10828: CALL_OW 302
10832: IFFALSE 11014
// begin ComExit ( Kaia ) ;
10834: LD_EXP 20
10838: PPUSH
10839: CALL 54665 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
10843: LD_EXP 20
10847: PPUSH
10848: LD_EXP 17
10852: PPUSH
10853: CALL_OW 172
// wait ( 0 0$2 ) ;
10857: LD_INT 70
10859: PPUSH
10860: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
10864: LD_EXP 20
10868: PPUSH
10869: LD_EXP 17
10873: PPUSH
10874: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
10878: LD_EXP 17
10882: PPUSH
10883: LD_EXP 20
10887: PPUSH
10888: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
10892: LD_EXP 20
10896: PPUSH
10897: LD_STRING DK-Scout-a-6
10899: PPUSH
10900: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
10904: LD_EXP 17
10908: PPUSH
10909: LD_STRING DM-Scout-a-7
10911: PPUSH
10912: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
10916: LD_EXP 20
10920: PPUSH
10921: LD_STRING DK-Scout-a-8
10923: PPUSH
10924: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
10928: LD_EXP 20
10932: PPUSH
10933: LD_STRING DK-Scout-a-9
10935: PPUSH
10936: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
10940: LD_EXP 15
10944: PPUSH
10945: LD_STRING DH-Scout-a-10
10947: PPUSH
10948: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
10952: LD_EXP 17
10956: PPUSH
10957: LD_EXP 15
10961: PPUSH
10962: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
10966: LD_EXP 17
10970: PPUSH
10971: LD_STRING DM-Scout-a-11
10973: PPUSH
10974: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
10978: LD_EXP 17
10982: PPUSH
10983: LD_STRING DM-Scout-a-12
10985: PPUSH
10986: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
10990: LD_EXP 17
10994: PPUSH
10995: LD_STRING DM-Scout-a-13
10997: PPUSH
10998: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
11002: LD_EXP 17
11006: PPUSH
11007: LD_STRING DM-Scout-a-14
11009: PPUSH
11010: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
11014: LD_EXP 16
11018: PPUSH
11019: CALL_OW 302
11023: IFFALSE 11051
// begin Say ( Givi , DG-Scout-10 ) ;
11025: LD_EXP 16
11029: PPUSH
11030: LD_STRING DG-Scout-10
11032: PPUSH
11033: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
11037: LD_EXP 16
11041: PPUSH
11042: LD_STRING DG-Scout-11
11044: PPUSH
11045: CALL_OW 88
// end else
11049: GO 11108
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
11051: LD_EXP 27
11055: PPUSH
11056: LD_INT 26
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 72
11070: PPUSH
11071: LD_STRING DArm-Scout-10
11073: PPUSH
11074: CALL 224 0 2
11078: NOT
11079: IFFALSE 11108
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
11081: LD_EXP 27
11085: PPUSH
11086: LD_INT 26
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PPUSH
11096: CALL_OW 72
11100: PPUSH
11101: LD_STRING DArf-Scout-10
11103: PPUSH
11104: CALL 224 0 2
// Say ( Heike , DH-Scout-12 ) ;
11108: LD_EXP 15
11112: PPUSH
11113: LD_STRING DH-Scout-12
11115: PPUSH
11116: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
11120: LD_EXP 15
11124: PPUSH
11125: LD_STRING DH-Scout-13
11127: PPUSH
11128: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
11132: LD_EXP 17
11136: PPUSH
11137: CALL_OW 302
11141: PUSH
11142: LD_EXP 25
11146: PPUSH
11147: CALL_OW 302
11151: AND
11152: IFFALSE 11180
// begin Say ( Mike , DM-Scout-14 ) ;
11154: LD_EXP 17
11158: PPUSH
11159: LD_STRING DM-Scout-14
11161: PPUSH
11162: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
11166: LD_EXP 15
11170: PPUSH
11171: LD_STRING DH-Scout-c-14
11173: PPUSH
11174: CALL_OW 88
// end else
11178: GO 11273
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
11180: LD_EXP 17
11184: PPUSH
11185: CALL_OW 302
11189: PUSH
11190: LD_EXP 25
11194: PPUSH
11195: CALL_OW 302
11199: XOR
11200: IFFALSE 11261
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
11202: LD_EXP 27
11206: PPUSH
11207: LD_INT 26
11209: PUSH
11210: LD_INT 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PPUSH
11217: CALL_OW 72
11221: PPUSH
11222: LD_STRING DArm-Scout-a-14
11224: PPUSH
11225: CALL 224 0 2
11229: NOT
11230: IFFALSE 11259
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
11232: LD_EXP 27
11236: PPUSH
11237: LD_INT 26
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 72
11251: PPUSH
11252: LD_STRING DArf-Scout-a-14
11254: PPUSH
11255: CALL 224 0 2
// end else
11259: GO 11273
// Say ( Heike , DH-Scout-d-14 ) ;
11261: LD_EXP 15
11265: PPUSH
11266: LD_STRING DH-Scout-d-14
11268: PPUSH
11269: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
11273: LD_EXP 15
11277: PPUSH
11278: LD_STRING DH-Scout-15
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// wait ( 1 1$00 ) ;
11289: LD_INT 2100
11291: PPUSH
11292: CALL_OW 67
// usAttacksAllowed := true ;
11296: LD_ADDR_EXP 6
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// end ;
11304: PPOPN 2
11306: END
// every 0 0$1 trigger scoutFailed do var spoken ;
11307: LD_EXP 4
11311: IFFALSE 11488
11313: GO 11315
11315: DISABLE
11316: LD_INT 0
11318: PPUSH
// begin spoken := true ;
11319: LD_ADDR_VAR 0 1
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// wait ( 0 0$30 ) ;
11327: LD_INT 1050
11329: PPUSH
11330: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
11334: LD_EXP 15
11338: PPUSH
11339: LD_STRING DH-Scout-c-1
11341: PPUSH
11342: CALL_OW 88
// if not IsOk ( Givi ) then
11346: LD_EXP 16
11350: PPUSH
11351: CALL_OW 302
11355: NOT
11356: IFFALSE 11360
// exit ;
11358: GO 11488
// if IsOk ( Givi ) then
11360: LD_EXP 16
11364: PPUSH
11365: CALL_OW 302
11369: IFFALSE 11397
// begin Say ( Givi , DG-Scout-c-2 ) ;
11371: LD_EXP 16
11375: PPUSH
11376: LD_STRING DG-Scout-c-2
11378: PPUSH
11379: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
11383: LD_EXP 16
11387: PPUSH
11388: LD_STRING DG-Scout-c-3
11390: PPUSH
11391: CALL_OW 88
// end else
11395: GO 11470
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
11397: LD_ADDR_VAR 0 1
11401: PUSH
11402: LD_EXP 27
11406: PPUSH
11407: LD_INT 26
11409: PUSH
11410: LD_INT 1
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 72
11421: PPUSH
11422: LD_STRING DArm-Scout-c-3
11424: PPUSH
11425: CALL 224 0 2
11429: ST_TO_ADDR
// if not spoken then
11430: LD_VAR 0 1
11434: NOT
11435: IFFALSE 11470
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: LD_EXP 27
11446: PPUSH
11447: LD_INT 26
11449: PUSH
11450: LD_INT 2
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 72
11461: PPUSH
11462: LD_STRING DArf-Scout-c-3
11464: PPUSH
11465: CALL 224 0 2
11469: ST_TO_ADDR
// ; end ; if spoken then
11470: LD_VAR 0 1
11474: IFFALSE 11488
// Say ( Heike , DH-Scout-c-4 ) ;
11476: LD_EXP 15
11480: PPUSH
11481: LD_STRING DH-Scout-c-4
11483: PPUSH
11484: CALL_OW 88
// end ;
11488: PPOPN 1
11490: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
11491: LD_INT 22
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 7
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: PUSH
11520: LD_EXP 26
11524: PPUSH
11525: CALL_OW 302
11529: AND
11530: IFFALSE 11615
11532: GO 11534
11534: DISABLE
// begin DialogueOn ;
11535: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
11539: LD_EXP 26
11543: PPUSH
11544: LD_STRING DA-Lab-1
11546: PPUSH
11547: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
11551: LD_EXP 15
11555: PPUSH
11556: LD_STRING DH-Lab-2
11558: PPUSH
11559: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
11563: LD_EXP 26
11567: PPUSH
11568: LD_STRING DA-Lab-3
11570: PPUSH
11571: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
11575: LD_EXP 26
11579: PPUSH
11580: LD_STRING DA-Lab-4
11582: PPUSH
11583: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
11587: LD_EXP 26
11591: PPUSH
11592: LD_STRING DA-Lab-5
11594: PPUSH
11595: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
11599: LD_EXP 15
11603: PPUSH
11604: LD_STRING DH-Lab-6
11606: PPUSH
11607: CALL_OW 88
// DialogueOff ;
11611: CALL_OW 7
// end ;
11615: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
11616: LD_INT 7
11618: PPUSH
11619: LD_INT 2
11621: PPUSH
11622: CALL_OW 321
11626: PUSH
11627: LD_INT 2
11629: EQUAL
11630: PUSH
11631: LD_EXP 16
11635: PPUSH
11636: CALL_OW 302
11640: AND
11641: IFFALSE 11810
11643: GO 11645
11645: DISABLE
// begin DialogueOn ;
11646: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
11650: LD_EXP 16
11654: PPUSH
11655: LD_STRING DG-Opt-1
11657: PPUSH
11658: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
11662: LD_EXP 15
11666: PPUSH
11667: LD_STRING DH-Opt-2
11669: PPUSH
11670: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
11674: LD_EXP 16
11678: PPUSH
11679: LD_STRING DG-Opt-3
11681: PPUSH
11682: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
11686: LD_EXP 16
11690: PPUSH
11691: LD_STRING DG-Opt-4
11693: PPUSH
11694: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
11698: LD_EXP 15
11702: PPUSH
11703: LD_STRING DH-Opt-5
11705: PPUSH
11706: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
11710: LD_EXP 16
11714: PPUSH
11715: LD_STRING DG-Opt-6
11717: PPUSH
11718: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
11722: LD_EXP 15
11726: PPUSH
11727: LD_STRING DH-Opt-7
11729: PPUSH
11730: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
11734: LD_EXP 16
11738: PPUSH
11739: LD_STRING DG-Opt-8
11741: PPUSH
11742: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
11746: LD_EXP 16
11750: PPUSH
11751: LD_STRING DG-Opt-9
11753: PPUSH
11754: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
11758: LD_EXP 15
11762: PPUSH
11763: LD_STRING DH-Opt-10
11765: PPUSH
11766: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
11770: LD_EXP 16
11774: PPUSH
11775: LD_STRING DG-Opt-11
11777: PPUSH
11778: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
11782: LD_EXP 16
11786: PPUSH
11787: LD_STRING DG-Opt-12
11789: PPUSH
11790: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
11794: LD_EXP 15
11798: PPUSH
11799: LD_STRING DH-Opt-13
11801: PPUSH
11802: CALL_OW 88
// DialogueOff ;
11806: CALL_OW 7
// end ;
11810: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
11811: LD_EXP 27
11815: PPUSH
11816: LD_INT 95
11818: PUSH
11819: LD_INT 7
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 23
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 26
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: IFFALSE 11916
11857: GO 11859
11859: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
11860: LD_EXP 27
11864: PPUSH
11865: LD_INT 95
11867: PUSH
11868: LD_INT 7
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 26
11887: PUSH
11888: LD_INT 1
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 72
11904: PUSH
11905: LD_INT 1
11907: ARRAY
11908: PPUSH
11909: LD_STRING DArm-River
11911: PPUSH
11912: CALL_OW 88
// end ;
11916: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
11917: LD_INT 40
11919: PPUSH
11920: LD_INT 2
11922: PPUSH
11923: CALL_OW 321
11927: PUSH
11928: LD_INT 2
11930: EQUAL
11931: PUSH
11932: LD_EXP 18
11936: PPUSH
11937: CALL_OW 302
11941: AND
11942: IFFALSE 12192
11944: GO 11946
11946: DISABLE
// begin DialogueOn ;
11947: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
11951: LD_EXP 18
11955: PPUSH
11956: LD_STRING DI-Roc-1
11958: PPUSH
11959: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
11963: LD_EXP 15
11967: PPUSH
11968: LD_STRING DH-Roc-2
11970: PPUSH
11971: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
11975: LD_EXP 18
11979: PPUSH
11980: LD_STRING DI-Roc-3
11982: PPUSH
11983: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
11987: LD_EXP 18
11991: PPUSH
11992: LD_STRING DI-Roc-4
11994: PPUSH
11995: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
11999: LD_EXP 20
12003: PPUSH
12004: LD_STRING DK-Roc-5
12006: PPUSH
12007: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
12011: LD_EXP 20
12015: PPUSH
12016: LD_STRING DK-Roc-6
12018: PPUSH
12019: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
12023: LD_EXP 16
12027: PPUSH
12028: LD_STRING DG-Roc-7
12030: PPUSH
12031: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
12035: LD_EXP 16
12039: PPUSH
12040: LD_STRING DG-Roc-8
12042: PPUSH
12043: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
12047: LD_EXP 22
12051: PPUSH
12052: CALL_OW 302
12056: PUSH
12057: LD_EXP 20
12061: PPUSH
12062: CALL_OW 302
12066: AND
12067: PUSH
12068: LD_EXP 16
12072: PPUSH
12073: CALL_OW 302
12077: AND
12078: IFFALSE 12188
// begin Say ( Markov , DMar-Roc-9 ) ;
12080: LD_EXP 22
12084: PPUSH
12085: LD_STRING DMar-Roc-9
12087: PPUSH
12088: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
12092: LD_EXP 22
12096: PPUSH
12097: LD_STRING DMar-Roc-10
12099: PPUSH
12100: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
12104: LD_EXP 20
12108: PPUSH
12109: LD_STRING DK-Roc-11
12111: PPUSH
12112: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
12116: LD_EXP 22
12120: PPUSH
12121: LD_STRING DMar-Roc-12
12123: PPUSH
12124: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
12128: LD_EXP 20
12132: PPUSH
12133: LD_STRING DK-Roc-13
12135: PPUSH
12136: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
12140: LD_EXP 16
12144: PPUSH
12145: LD_STRING DG-Roc-14
12147: PPUSH
12148: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
12152: LD_EXP 22
12156: PPUSH
12157: LD_STRING DMar-Roc-15
12159: PPUSH
12160: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
12164: LD_EXP 22
12168: PPUSH
12169: LD_STRING DMar-Roc-16
12171: PPUSH
12172: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
12176: LD_EXP 20
12180: PPUSH
12181: LD_STRING DK-Roc-17
12183: PPUSH
12184: CALL_OW 88
// end ; DialogueOff ;
12188: CALL_OW 7
// end ;
12192: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
12193: LD_EXP 30
12197: PPUSH
12198: CALL_OW 256
12202: PUSH
12203: LD_INT 1000
12205: LESS
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 1
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 21
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 23
12229: PUSH
12230: LD_INT 1
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: PUSH
12247: LD_INT 6
12249: LESS
12250: OR
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 21
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: PUSH
12292: LD_INT 2
12294: LESS
12295: OR
12296: IFFALSE 13572
12298: GO 12300
12300: DISABLE
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
// begin usAttacksAllowed := false ;
12306: LD_ADDR_EXP 6
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// usSurrender := true ;
12314: LD_ADDR_EXP 7
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
12322: LD_INT 1
12324: PPUSH
12325: LD_INT 2
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 80
// if IsDead ( usCommander ) then
12338: LD_EXP 30
12342: PPUSH
12343: CALL_OW 301
12347: IFFALSE 12351
// exit ;
12349: GO 13572
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
12351: LD_ADDR_VAR 0 1
12355: PUSH
12356: LD_INT 22
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 21
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 60
12378: PUSH
12379: EMPTY
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: PUSH
12392: FOR_IN
12393: IFFALSE 12406
// ComStop ( i ) ;
12395: LD_VAR 0 1
12399: PPUSH
12400: CALL_OW 141
12404: GO 12392
12406: POP
12407: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
12408: LD_ADDR_VAR 0 1
12412: PUSH
12413: LD_INT 22
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 3
12425: PUSH
12426: LD_INT 50
12428: PUSH
12429: EMPTY
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: FOR_IN
12457: IFFALSE 12473
// SetLives ( i , 251 ) ;
12459: LD_VAR 0 1
12463: PPUSH
12464: LD_INT 251
12466: PPUSH
12467: CALL_OW 234
12471: GO 12456
12473: POP
12474: POP
// Video ( true ) ;
12475: LD_INT 1
12477: PPUSH
12478: CALL 54239 0 1
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
12482: LD_ADDR_VAR 0 1
12486: PUSH
12487: LD_INT 22
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PPUSH
12497: CALL_OW 69
12501: PUSH
12502: FOR_IN
12503: IFFALSE 12516
// ComStop ( i ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 141
12514: GO 12502
12516: POP
12517: POP
// if not IsOk ( usCommander ) then
12518: LD_EXP 30
12522: PPUSH
12523: CALL_OW 302
12527: NOT
12528: IFFALSE 12542
// SetLives ( usCommander , 1000 ) ;
12530: LD_EXP 30
12534: PPUSH
12535: LD_INT 1000
12537: PPUSH
12538: CALL_OW 234
// InGameOn ;
12542: CALL_OW 8
// ComExit ( usCommander ) ;
12546: LD_EXP 30
12550: PPUSH
12551: CALL 54665 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
12555: LD_EXP 30
12559: PPUSH
12560: LD_INT 81
12562: PPUSH
12563: LD_INT 143
12565: PPUSH
12566: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
12570: LD_EXP 30
12574: PPUSH
12575: LD_INT 81
12577: PPUSH
12578: LD_INT 139
12580: PPUSH
12581: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
12585: LD_INT 81
12587: PPUSH
12588: LD_INT 144
12590: PPUSH
12591: LD_INT 2
12593: PPUSH
12594: LD_INT 10
12596: NEG
12597: PPUSH
12598: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
12602: LD_EXP 30
12606: PPUSH
12607: CALL_OW 87
// wait ( 0 0$2 ) ;
12611: LD_INT 70
12613: PPUSH
12614: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
12618: LD_EXP 30
12622: PPUSH
12623: LD_STRING DCa-Surrender-1
12625: PPUSH
12626: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
12630: LD_EXP 15
12634: PPUSH
12635: LD_STRING DH-Surrender-2
12637: PPUSH
12638: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
12642: LD_EXP 15
12646: PPUSH
12647: CALL_OW 310
12651: PPUSH
12652: CALL_OW 247
12656: PUSH
12657: LD_INT 3
12659: EQUAL
12660: IFFALSE 12678
// begin ComExit ( Heike ) ;
12662: LD_EXP 15
12666: PPUSH
12667: CALL 54665 0 1
// wait ( 3 ) ;
12671: LD_INT 3
12673: PPUSH
12674: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
12678: LD_EXP 15
12682: PPUSH
12683: LD_INT 82
12685: PPUSH
12686: LD_INT 133
12688: PPUSH
12689: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
12693: LD_EXP 15
12697: PPUSH
12698: LD_EXP 30
12702: PPUSH
12703: CALL_OW 179
// wait ( 0 0$3 ) ;
12707: LD_INT 105
12709: PPUSH
12710: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
12714: LD_EXP 15
12718: PPUSH
12719: LD_STRING DH-Surrender-3
12721: PPUSH
12722: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
12726: LD_EXP 15
12730: PPUSH
12731: LD_STRING DH-Surrender-4
12733: PPUSH
12734: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
12738: LD_INT 81
12740: PPUSH
12741: LD_INT 144
12743: PPUSH
12744: LD_INT 2
12746: PPUSH
12747: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
12751: LD_INT 1
12753: PPUSH
12754: LD_INT 2
12756: PPUSH
12757: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_INT 22
12768: PUSH
12769: LD_INT 1
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 23
12778: PUSH
12779: LD_INT 1
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 54
12788: PUSH
12789: EMPTY
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 69
12801: PUSH
12802: FOR_IN
12803: IFFALSE 12816
// ComExit ( i ) ;
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL 54665 0 1
12814: GO 12802
12816: POP
12817: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
12818: LD_ADDR_VAR 0 3
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 25
12835: PUSH
12836: LD_INT 4
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
12852: LD_ADDR_VAR 0 2
12856: PUSH
12857: LD_INT 22
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 3
12869: PUSH
12870: LD_INT 50
12872: PUSH
12873: EMPTY
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PPUSH
12884: CALL_OW 69
12888: ST_TO_ADDR
// if sci and hurts then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_VAR 0 2
12898: AND
12899: IFFALSE 12961
// begin for i := 1 to hurts do
12901: LD_ADDR_VAR 0 1
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_VAR 0 2
12915: PUSH
12916: FOR_TO
12917: IFFALSE 12959
// if i <= sci then
12919: LD_VAR 0 1
12923: PUSH
12924: LD_VAR 0 3
12928: LESSEQUAL
12929: IFFALSE 12957
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
12931: LD_VAR 0 3
12935: PUSH
12936: LD_VAR 0 1
12940: ARRAY
12941: PPUSH
12942: LD_VAR 0 2
12946: PUSH
12947: LD_VAR 0 1
12951: ARRAY
12952: PPUSH
12953: CALL_OW 188
12957: GO 12916
12959: POP
12960: POP
// end ; if IsOk ( Givi ) then
12961: LD_EXP 16
12965: PPUSH
12966: CALL_OW 302
12970: IFFALSE 12986
// Say ( Givi , DG-Surrender-5 ) else
12972: LD_EXP 16
12976: PPUSH
12977: LD_STRING DG-Surrender-5
12979: PPUSH
12980: CALL_OW 88
12984: GO 12998
// Say ( Heike , DH-Surrender-a-5 ) ;
12986: LD_EXP 15
12990: PPUSH
12991: LD_STRING DH-Surrender-a-5
12993: PPUSH
12994: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
12998: LD_EXP 30
13002: PPUSH
13003: LD_STRING DCa-Surrender-6
13005: PPUSH
13006: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
13010: LD_EXP 30
13014: PPUSH
13015: LD_STRING DCa-Surrender-7
13017: PPUSH
13018: CALL_OW 88
// if IsOk ( Givi ) then
13022: LD_EXP 16
13026: PPUSH
13027: CALL_OW 302
13031: IFFALSE 13047
// Say ( Givi , DG-Surrender-8 ) else
13033: LD_EXP 16
13037: PPUSH
13038: LD_STRING DG-Surrender-8
13040: PPUSH
13041: CALL_OW 88
13045: GO 13059
// Say ( Heike , DH-Surrender-a-8 ) ;
13047: LD_EXP 15
13051: PPUSH
13052: LD_STRING DH-Surrender-a-8
13054: PPUSH
13055: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
13059: LD_EXP 30
13063: PPUSH
13064: LD_STRING DCa-Surrender-9
13066: PPUSH
13067: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
13071: LD_EXP 15
13075: PPUSH
13076: LD_STRING DH-Surrender-10
13078: PPUSH
13079: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
13083: LD_EXP 30
13087: PPUSH
13088: LD_STRING DCa-Surrender-11
13090: PPUSH
13091: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
13095: LD_EXP 15
13099: PPUSH
13100: LD_STRING DH-Surrender-12
13102: PPUSH
13103: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
13107: LD_EXP 30
13111: PPUSH
13112: LD_STRING DCa-Surrender-13
13114: PPUSH
13115: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
13119: LD_EXP 30
13123: PPUSH
13124: LD_STRING DCa-Surrender-14
13126: PPUSH
13127: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
13131: LD_EXP 30
13135: PPUSH
13136: LD_STRING DCa-Surrender-15
13138: PPUSH
13139: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
13143: LD_EXP 30
13147: PPUSH
13148: LD_STRING DCa-Surrender-16
13150: PPUSH
13151: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
13155: LD_EXP 20
13159: PPUSH
13160: LD_STRING DK-Surrender-17
13162: PPUSH
13163: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
13167: LD_EXP 24
13171: PPUSH
13172: LD_STRING DO-Surrender-18
13174: PPUSH
13175: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
13179: LD_EXP 24
13183: PPUSH
13184: LD_STRING DO-Surrender-19
13186: PPUSH
13187: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
13191: LD_EXP 25
13195: PPUSH
13196: LD_STRING DKs-Surrender-20
13198: PPUSH
13199: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
13203: LD_EXP 25
13207: PPUSH
13208: LD_STRING DKs-Surrender-21
13210: PPUSH
13211: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
13215: LD_EXP 22
13219: PPUSH
13220: LD_STRING DMar-Surrender-22
13222: PPUSH
13223: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
13227: LD_EXP 22
13231: PPUSH
13232: LD_STRING DMar-Surrender-23
13234: PPUSH
13235: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
13239: LD_EXP 21
13243: PPUSH
13244: LD_STRING DS-Surrender-24
13246: PPUSH
13247: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
13251: LD_EXP 26
13255: PPUSH
13256: LD_STRING DA-Surrender-25
13258: PPUSH
13259: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
13263: LD_EXP 18
13267: PPUSH
13268: LD_STRING DI-Surrender-26
13270: PPUSH
13271: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
13275: LD_EXP 19
13279: PPUSH
13280: LD_STRING DKam-Surrender-27
13282: PPUSH
13283: CALL_OW 88
// if IsOk ( Givi ) then
13287: LD_EXP 16
13291: PPUSH
13292: CALL_OW 302
13296: IFFALSE 13336
// begin Say ( Givi , DG-Surrender-28 ) ;
13298: LD_EXP 16
13302: PPUSH
13303: LD_STRING DG-Surrender-28
13305: PPUSH
13306: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
13310: LD_EXP 16
13314: PPUSH
13315: LD_STRING DG-Surrender-29
13317: PPUSH
13318: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
13322: LD_EXP 16
13326: PPUSH
13327: LD_STRING DG-Surrender-30
13329: PPUSH
13330: CALL_OW 88
// end else
13334: GO 13372
// begin Say ( Heike , DH-Surrender-a-28 ) ;
13336: LD_EXP 15
13340: PPUSH
13341: LD_STRING DH-Surrender-a-28
13343: PPUSH
13344: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
13348: LD_EXP 15
13352: PPUSH
13353: LD_STRING DH-Surrender-a-29
13355: PPUSH
13356: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
13360: LD_EXP 15
13364: PPUSH
13365: LD_STRING DH-Surrender-a-30
13367: PPUSH
13368: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
13372: CALL 15361 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
13376: LD_INT 22
13378: PUSH
13379: LD_INT 3
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 69
13390: PPUSH
13391: LD_INT 176
13393: PUSH
13394: LD_INT 123
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: EMPTY
13402: LIST
13403: PPUSH
13404: CALL 56871 0 2
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
13408: LD_INT 190
13410: PPUSH
13411: LD_INT 150
13413: PPUSH
13414: LD_INT 2
13416: PPUSH
13417: LD_INT 8
13419: NEG
13420: PPUSH
13421: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
13425: LD_INT 193
13427: PPUSH
13428: LD_INT 150
13430: PPUSH
13431: CALL_OW 84
// if IsOk ( Markov ) then
13435: LD_EXP 22
13439: PPUSH
13440: CALL_OW 302
13444: IFFALSE 13460
// Say ( Markov , DMar-Surrender-31 ) else
13446: LD_EXP 22
13450: PPUSH
13451: LD_STRING DMar-Surrender-31
13453: PPUSH
13454: CALL_OW 88
13458: GO 13517
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
13460: LD_EXP 27
13464: PPUSH
13465: LD_INT 26
13467: PUSH
13468: LD_INT 1
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 72
13479: PPUSH
13480: LD_STRING DArm-Surrender-a-31
13482: PPUSH
13483: CALL 224 0 2
13487: NOT
13488: IFFALSE 13517
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
13490: LD_EXP 27
13494: PPUSH
13495: LD_INT 26
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: PPUSH
13510: LD_STRING DArf-Surrender-a-31
13512: PPUSH
13513: CALL 224 0 2
// Say ( Heike , DH-Surrender-32 ) ;
13517: LD_EXP 15
13521: PPUSH
13522: LD_STRING DH-Surrender-32
13524: PPUSH
13525: CALL_OW 88
// InGameOff ;
13529: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
13533: LD_STRING M2
13535: PPUSH
13536: CALL_OW 337
// wait ( 0 0$20 ) ;
13540: LD_INT 700
13542: PPUSH
13543: CALL_OW 67
// PrepareRussianLastWaveAttack ;
13547: CALL 15723 0 0
// russianAttack := true ;
13551: LD_ADDR_EXP 8
13555: PUSH
13556: LD_INT 1
13558: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
13559: LD_INT 190
13561: PPUSH
13562: LD_INT 150
13564: PPUSH
13565: LD_INT 2
13567: PPUSH
13568: CALL_OW 331
// end ;
13572: PPOPN 3
13574: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
13575: LD_EXP 11
13579: PUSH
13580: LD_INT 2
13582: PPUSH
13583: CALL_OW 463
13587: NOT
13588: AND
13589: PUSH
13590: LD_EXP 15
13594: PPUSH
13595: CALL_OW 302
13599: AND
13600: PUSH
13601: LD_INT 22
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 30
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 69
13629: AND
13630: PUSH
13631: LD_EXP 22
13635: PPUSH
13636: CALL_OW 302
13640: PUSH
13641: LD_EXP 27
13645: PPUSH
13646: LD_INT 50
13648: PUSH
13649: EMPTY
13650: LIST
13651: PPUSH
13652: CALL_OW 72
13656: OR
13657: AND
13658: IFFALSE 13886
13660: GO 13662
13662: DISABLE
// begin DialogueOn ;
13663: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
13667: LD_EXP 15
13671: PPUSH
13672: LD_STRING DH-Heavy-1
13674: PPUSH
13675: CALL_OW 88
// if IsOk ( Markov ) then
13679: LD_EXP 22
13683: PPUSH
13684: CALL_OW 302
13688: IFFALSE 13813
// begin Say ( Markov , DMar-Heavy-2 ) ;
13690: LD_EXP 22
13694: PPUSH
13695: LD_STRING DMar-Heavy-2
13697: PPUSH
13698: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
13702: LD_INT 22
13704: PUSH
13705: LD_INT 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 30
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: PPUSH
13735: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
13739: LD_EXP 22
13743: PPUSH
13744: LD_STRING DMar-Heavy-3
13746: PPUSH
13747: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
13751: LD_EXP 22
13755: PPUSH
13756: LD_STRING DMar-Heavy-4
13758: PPUSH
13759: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
13763: LD_EXP 22
13767: PPUSH
13768: LD_STRING DMar-Heavy-5
13770: PPUSH
13771: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
13775: LD_EXP 22
13779: PPUSH
13780: LD_STRING DMar-Heavy-6
13782: PPUSH
13783: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
13787: LD_EXP 15
13791: PPUSH
13792: LD_STRING DH-Heavy-7
13794: PPUSH
13795: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
13799: LD_EXP 15
13803: PPUSH
13804: LD_STRING DH-Heavy-8
13806: PPUSH
13807: CALL_OW 88
// end else
13811: GO 13870
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
13813: LD_EXP 27
13817: PPUSH
13818: LD_INT 26
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PPUSH
13828: CALL_OW 72
13832: PPUSH
13833: LD_STRING DArm-Heavy-a-2
13835: PPUSH
13836: CALL 224 0 2
13840: NOT
13841: IFFALSE 13870
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
13843: LD_EXP 27
13847: PPUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 72
13862: PPUSH
13863: LD_STRING DArf-Heavy-a-2
13865: PPUSH
13866: CALL 224 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
13870: LD_EXP 15
13874: PPUSH
13875: LD_STRING DH-Heavy-9
13877: PPUSH
13878: CALL_OW 88
// DialogueOff ;
13882: CALL_OW 7
// end ;
13886: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) and not usSurrender do
13887: LD_EXP 34
13891: PPUSH
13892: LD_INT 101
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 72
13906: PUSH
13907: LD_EXP 15
13911: PPUSH
13912: CALL_OW 302
13916: AND
13917: PUSH
13918: LD_EXP 7
13922: NOT
13923: AND
13924: IFFALSE 14067
13926: GO 13928
13928: DISABLE
// begin DialogueOn ;
13929: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
13933: LD_EXP 34
13937: PPUSH
13938: LD_INT 101
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 72
13952: PPUSH
13953: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
13957: LD_EXP 15
13961: PPUSH
13962: LD_STRING DH-Flank-1
13964: PPUSH
13965: CALL_OW 88
// if IsOk ( Mike ) then
13969: LD_EXP 17
13973: PPUSH
13974: CALL_OW 302
13978: IFFALSE 13994
// Say ( Mike , DM-Flank-2 ) else
13980: LD_EXP 17
13984: PPUSH
13985: LD_STRING DM-Flank-2
13987: PPUSH
13988: CALL_OW 88
13992: GO 14051
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
13994: LD_EXP 27
13998: PPUSH
13999: LD_INT 26
14001: PUSH
14002: LD_INT 1
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 72
14013: PPUSH
14014: LD_STRING DArm-Flank-a-2
14016: PPUSH
14017: CALL 224 0 2
14021: NOT
14022: IFFALSE 14051
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
14024: LD_EXP 27
14028: PPUSH
14029: LD_INT 26
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 72
14043: PPUSH
14044: LD_STRING DArm-Flank-a-2
14046: PPUSH
14047: CALL 224 0 2
// Say ( Heike , DH-Flank-3 ) ;
14051: LD_EXP 15
14055: PPUSH
14056: LD_STRING DH-Flank-3
14058: PPUSH
14059: CALL_OW 88
// DialogueOff ;
14063: CALL_OW 7
// end ;
14067: END
// every 0 0$3 trigger seeRemoteVehicle and not usSurrender do
14068: LD_EXP 10
14072: PUSH
14073: LD_EXP 7
14077: NOT
14078: AND
14079: IFFALSE 14303
14081: GO 14083
14083: DISABLE
// begin DialogueOn ;
14084: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
14088: LD_EXP 15
14092: PPUSH
14093: LD_STRING DH-USRC-1
14095: PPUSH
14096: CALL_OW 88
// if IsOk ( Markov ) then
14100: LD_EXP 22
14104: PPUSH
14105: CALL_OW 302
14109: IFFALSE 14125
// Say ( Markov , DMar-USRC-2 ) else
14111: LD_EXP 22
14115: PPUSH
14116: LD_STRING DMar-USRC-2
14118: PPUSH
14119: CALL_OW 88
14123: GO 14182
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
14125: LD_EXP 27
14129: PPUSH
14130: LD_INT 26
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 72
14144: PPUSH
14145: LD_STRING DArm-USRC-a-2
14147: PPUSH
14148: CALL 224 0 2
14152: NOT
14153: IFFALSE 14182
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
14155: LD_EXP 27
14159: PPUSH
14160: LD_INT 26
14162: PUSH
14163: LD_INT 2
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 72
14174: PPUSH
14175: LD_STRING DArf-USRC-a-2
14177: PPUSH
14178: CALL 224 0 2
// DialogueOff ;
14182: CALL_OW 7
// wait ( 0 0$10 ) ;
14186: LD_INT 350
14188: PPUSH
14189: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
14193: LD_EXP 15
14197: PPUSH
14198: LD_STRING DH-USRC-3
14200: PPUSH
14201: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14205: LD_INT 35
14207: PPUSH
14208: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14212: LD_INT 2
14214: PPUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 36
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 69
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: CALL_OW 292
14252: IFFALSE 14205
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
14254: LD_INT 22
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 30
14266: PUSH
14267: LD_INT 36
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 69
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: PPUSH
14287: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
14291: LD_EXP 15
14295: PPUSH
14296: LD_STRING DH-USRCFound-1
14298: PPUSH
14299: CALL_OW 88
// end ;
14303: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
14304: LD_EXP 20
14308: PPUSH
14309: CALL_OW 256
14313: PUSH
14314: LD_INT 3
14316: LESS
14317: IFFALSE 14354
14319: GO 14321
14321: DISABLE
// begin DialogueOn ;
14322: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
14326: LD_EXP 20
14330: PPUSH
14331: LD_STRING DK-Dead-1
14333: PPUSH
14334: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
14338: LD_EXP 20
14342: PPUSH
14343: LD_STRING DK-Dead-2
14345: PPUSH
14346: CALL_OW 91
// DialogueOff ;
14350: CALL_OW 7
// end ;
14354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
14355: LD_INT 22
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 2
14367: PUSH
14368: LD_INT 35
14370: PUSH
14371: LD_INT 28
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 34
14380: PUSH
14381: LD_INT 28
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: IFFALSE 14414
14403: GO 14405
14405: DISABLE
// hasRockets := true ;
14406: LD_ADDR_EXP 9
14410: PUSH
14411: LD_INT 1
14413: ST_TO_ADDR
14414: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
14415: LD_EXP 8
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 3
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PPUSH
14430: CALL_OW 69
14434: NOT
14435: AND
14436: IFFALSE 15098
14438: GO 14440
14440: DISABLE
// begin DialogueOn ;
14441: CALL_OW 6
// if vehLossCounter = 0 then
14445: LD_EXP 14
14449: PUSH
14450: LD_INT 0
14452: EQUAL
14453: IFFALSE 14462
// SetAchievement ( ACH_UNTOUCH ) ;
14455: LD_STRING ACH_UNTOUCH
14457: PPUSH
14458: CALL_OW 543
// if tick < 35 35$00 then
14462: LD_OWVAR 1
14466: PUSH
14467: LD_INT 73500
14469: LESS
14470: IFFALSE 14479
// SetAchievement ( ACH_HSPEED_7 ) ;
14472: LD_STRING ACH_HSPEED_7
14474: PPUSH
14475: CALL_OW 543
// CenterNowOnUnits ( Heike ) ;
14479: LD_EXP 15
14483: PPUSH
14484: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
14488: LD_EXP 15
14492: PPUSH
14493: LD_STRING DH-End-1
14495: PPUSH
14496: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
14500: LD_EXP 23
14504: PPUSH
14505: LD_STRING DShar-End-2
14507: PPUSH
14508: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
14512: LD_EXP 20
14516: PPUSH
14517: LD_STRING DK-End-3
14519: PPUSH
14520: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
14524: LD_EXP 15
14528: PPUSH
14529: LD_STRING DH-End-4
14531: PPUSH
14532: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
14536: LD_EXP 23
14540: PPUSH
14541: LD_STRING DShar-End-5
14543: PPUSH
14544: CALL_OW 94
// if IsOk ( Markov ) then
14548: LD_EXP 22
14552: PPUSH
14553: CALL_OW 302
14557: IFFALSE 14571
// Say ( Kaia , DK-End-6 ) ;
14559: LD_EXP 20
14563: PPUSH
14564: LD_STRING DK-End-6
14566: PPUSH
14567: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
14571: LD_EXP 20
14575: PPUSH
14576: LD_STRING DK-End-7
14578: PPUSH
14579: CALL_OW 88
// if IsOk ( Kaia ) then
14583: LD_EXP 20
14587: PPUSH
14588: CALL_OW 302
14592: IFFALSE 14630
// begin Say ( Givi , DG-End-8 ) ;
14594: LD_EXP 16
14598: PPUSH
14599: LD_STRING DG-End-8
14601: PPUSH
14602: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
14606: LD_EXP 16
14610: PPUSH
14611: LD_STRING DG-End-9
14613: PPUSH
14614: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
14618: LD_EXP 15
14622: PPUSH
14623: LD_STRING DH-End-10
14625: PPUSH
14626: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
14630: LD_EXP 15
14634: PPUSH
14635: LD_STRING DH-End-11
14637: PPUSH
14638: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
14642: LD_INT 7
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 321
14652: PUSH
14653: LD_INT 2
14655: EQUAL
14656: IFFALSE 14670
// AddMedal ( med1 , 1 ) else
14658: LD_STRING med1
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 101
14668: GO 14681
// AddMedal ( med1 , - 1 ) ;
14670: LD_STRING med1
14672: PPUSH
14673: LD_INT 1
14675: NEG
14676: PPUSH
14677: CALL_OW 101
// if hasRockets then
14681: LD_EXP 9
14685: IFFALSE 14699
// AddMedal ( med2 , 1 ) else
14687: LD_STRING med2
14689: PPUSH
14690: LD_INT 1
14692: PPUSH
14693: CALL_OW 101
14697: GO 14710
// AddMedal ( med2 , - 1 ) ;
14699: LD_STRING med2
14701: PPUSH
14702: LD_INT 1
14704: NEG
14705: PPUSH
14706: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
14710: LD_OWVAR 1
14714: PUSH
14715: LD_INT 105000
14717: PUSH
14718: LD_INT 94500
14720: PUSH
14721: LD_INT 84000
14723: PUSH
14724: LD_INT 73500
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: LD_OWVAR 67
14737: ARRAY
14738: LESS
14739: IFFALSE 14753
// AddMedal ( med3 , 1 ) else
14741: LD_STRING med3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 101
14751: GO 14764
// AddMedal ( med3 , - 1 ) ;
14753: LD_STRING med3
14755: PPUSH
14756: LD_INT 1
14758: NEG
14759: PPUSH
14760: CALL_OW 101
// GiveMedals ( MAIN ) ;
14764: LD_STRING MAIN
14766: PPUSH
14767: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14771: LD_INT 22
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 23
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 21
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: PPUSH
14811: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
14815: LD_EXP 30
14819: PPUSH
14820: LD_STRING 07_UsCommander
14822: PPUSH
14823: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
14827: LD_INT 22
14829: PUSH
14830: LD_INT 1
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 23
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: PUSH
14867: LD_EXP 30
14871: DIFF
14872: PPUSH
14873: LD_STRING 07_Americans
14875: PPUSH
14876: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
14880: LD_EXP 15
14884: PPUSH
14885: LD_STRING 07_Heike
14887: PPUSH
14888: CALL_OW 38
// if Aviradze then
14892: LD_EXP 26
14896: IFFALSE 14910
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
14898: LD_EXP 26
14902: PPUSH
14903: LD_STRING 07_Aviradze
14905: PPUSH
14906: CALL_OW 38
// if Ibrahim then
14910: LD_EXP 18
14914: IFFALSE 14928
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
14916: LD_EXP 18
14920: PPUSH
14921: LD_STRING 07_Ibrahim
14923: PPUSH
14924: CALL_OW 38
// if Kamil then
14928: LD_EXP 19
14932: IFFALSE 14946
// SaveCharacters ( Kamil , 07_Kamil ) ;
14934: LD_EXP 19
14938: PPUSH
14939: LD_STRING 07_Kamil
14941: PPUSH
14942: CALL_OW 38
// if Sophia then
14946: LD_EXP 21
14950: IFFALSE 14964
// SaveCharacters ( Sophia , 07_Sophia ) ;
14952: LD_EXP 21
14956: PPUSH
14957: LD_STRING 07_Sophia
14959: PPUSH
14960: CALL_OW 38
// if Kaia then
14964: LD_EXP 20
14968: IFFALSE 14982
// SaveCharacters ( Kaia , 07_Kaia ) ;
14970: LD_EXP 20
14974: PPUSH
14975: LD_STRING 07_Kaia
14977: PPUSH
14978: CALL_OW 38
// if Givi then
14982: LD_EXP 16
14986: IFFALSE 15000
// SaveCharacters ( Givi , 07_Givi ) ;
14988: LD_EXP 16
14992: PPUSH
14993: LD_STRING 07_Givi
14995: PPUSH
14996: CALL_OW 38
// if Mike then
15000: LD_EXP 17
15004: IFFALSE 15018
// SaveCharacters ( Mike , 07_Mike ) ;
15006: LD_EXP 17
15010: PPUSH
15011: LD_STRING 07_Mike
15013: PPUSH
15014: CALL_OW 38
// if Markov then
15018: LD_EXP 22
15022: IFFALSE 15036
// SaveCharacters ( Markov , 07_Markov ) ;
15024: LD_EXP 22
15028: PPUSH
15029: LD_STRING 07_Markov
15031: PPUSH
15032: CALL_OW 38
// if Kurt then
15036: LD_EXP 25
15040: IFFALSE 15054
// SaveCharacters ( Kurt , 07_Kurt ) ;
15042: LD_EXP 25
15046: PPUSH
15047: LD_STRING 07_Kurt
15049: PPUSH
15050: CALL_OW 38
// if Olaf then
15054: LD_EXP 24
15058: IFFALSE 15072
// SaveCharacters ( Olaf , 07_Olaf ) ;
15060: LD_EXP 24
15064: PPUSH
15065: LD_STRING 07_Olaf
15067: PPUSH
15068: CALL_OW 38
// if heikeSecondSquad then
15072: LD_EXP 27
15076: IFFALSE 15090
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
15078: LD_EXP 27
15082: PPUSH
15083: LD_STRING 07_others
15085: PPUSH
15086: CALL_OW 38
// YouWin ;
15090: CALL_OW 103
// DialogueOff ;
15094: CALL_OW 7
// end ; end_of_file
15098: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 12 , 10 , 8 , 8 ] [ Difficulty ] do
15099: LD_INT 7
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 287
15109: PUSH
15110: LD_INT 12
15112: PUSH
15113: LD_INT 10
15115: PUSH
15116: LD_INT 8
15118: PUSH
15119: LD_INT 8
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: PUSH
15128: LD_OWVAR 67
15132: ARRAY
15133: LESS
15134: IFFALSE 15161
15136: GO 15138
15138: DISABLE
// begin enable ;
15139: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
15140: LD_INT 1
15142: PPUSH
15143: LD_INT 5
15145: PPUSH
15146: CALL_OW 12
15150: PPUSH
15151: LD_INT 7
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 55
// end ;
15161: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 25 , 22 , 17 , 14 ] [ Difficulty ] and tick < 24 24$00 do
15162: LD_INT 8
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 287
15172: PUSH
15173: LD_INT 25
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_INT 17
15181: PUSH
15182: LD_INT 14
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: PUSH
15191: LD_OWVAR 67
15195: ARRAY
15196: LESS
15197: PUSH
15198: LD_OWVAR 1
15202: PUSH
15203: LD_INT 50400
15205: LESS
15206: AND
15207: IFFALSE 15234
15209: GO 15211
15211: DISABLE
// begin enable ;
15212: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
15213: LD_INT 1
15215: PPUSH
15216: LD_INT 5
15218: PPUSH
15219: CALL_OW 12
15223: PPUSH
15224: LD_INT 8
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 55
// end ;
15234: END
// every 0 0$40 trigger tick < 8 8$10 do
15235: LD_OWVAR 1
15239: PUSH
15240: LD_INT 17150
15242: LESS
15243: IFFALSE 15276
15245: GO 15247
15247: DISABLE
// begin enable ;
15248: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
15249: LD_INT 1
15251: PPUSH
15252: LD_INT 5
15254: PPUSH
15255: CALL_OW 12
15259: PPUSH
15260: LD_INT 130
15262: PPUSH
15263: LD_INT 18
15265: PPUSH
15266: LD_INT 12
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 56
// end ;
15276: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
15277: LD_OWVAR 1
15281: PUSH
15282: LD_INT 12950
15284: LESS
15285: IFFALSE 15318
15287: GO 15289
15289: DISABLE
// begin enable ;
15290: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
15291: LD_INT 1
15293: PPUSH
15294: LD_INT 5
15296: PPUSH
15297: CALL_OW 12
15301: PPUSH
15302: LD_INT 172
15304: PPUSH
15305: LD_INT 97
15307: PPUSH
15308: LD_INT 12
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: CALL_OW 56
// end ;
15318: END
// every 2 2$20 trigger GetResourceArea ( americanCratesArea , mat_cans ) < 6 do
15319: LD_INT 20
15321: PPUSH
15322: LD_INT 1
15324: PPUSH
15325: CALL_OW 287
15329: PUSH
15330: LD_INT 6
15332: LESS
15333: IFFALSE 15360
15335: GO 15337
15337: DISABLE
// begin enable ;
15338: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , americanCratesArea , true ) ;
15339: LD_INT 1
15341: PPUSH
15342: LD_INT 5
15344: PPUSH
15345: CALL_OW 12
15349: PPUSH
15350: LD_INT 20
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 55
// end ; end_of_file
15360: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
15361: LD_INT 0
15363: PPUSH
15364: PPUSH
15365: PPUSH
15366: PPUSH
15367: PPUSH
// uc_side := 3 ;
15368: LD_ADDR_OWVAR 20
15372: PUSH
15373: LD_INT 3
15375: ST_TO_ADDR
// uc_nation := 3 ;
15376: LD_ADDR_OWVAR 21
15380: PUSH
15381: LD_INT 3
15383: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
15384: LD_ADDR_VAR 0 3
15388: PUSH
15389: LD_INT 184
15391: PUSH
15392: LD_INT 144
15394: PUSH
15395: LD_INT 5
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 191
15405: PUSH
15406: LD_INT 147
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 202
15419: PUSH
15420: LD_INT 151
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 210
15433: PUSH
15434: LD_INT 152
15436: PUSH
15437: LD_INT 4
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: ST_TO_ADDR
// for i := 1 to 3 do
15451: LD_ADDR_VAR 0 2
15455: PUSH
15456: DOUBLE
15457: LD_INT 1
15459: DEC
15460: ST_TO_ADDR
15461: LD_INT 3
15463: PUSH
15464: FOR_TO
15465: IFFALSE 15634
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
15467: LD_INT 24
15469: PPUSH
15470: LD_INT 1
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: LD_INT 43
15478: PUSH
15479: LD_INT 44
15481: PUSH
15482: LD_INT 46
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: PUSH
15490: LD_VAR 0 2
15494: PUSH
15495: LD_INT 3
15497: MOD
15498: PUSH
15499: LD_INT 1
15501: PLUS
15502: ARRAY
15503: PPUSH
15504: LD_INT 40
15506: PPUSH
15507: CALL 21396 0 5
// veh := CreateVehicle ;
15511: LD_ADDR_VAR 0 5
15515: PUSH
15516: CALL_OW 45
15520: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
15521: LD_VAR 0 5
15525: PPUSH
15526: LD_VAR 0 3
15530: PUSH
15531: LD_VAR 0 2
15535: ARRAY
15536: PUSH
15537: LD_INT 3
15539: ARRAY
15540: PPUSH
15541: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
15545: LD_VAR 0 5
15549: PPUSH
15550: LD_VAR 0 3
15554: PUSH
15555: LD_VAR 0 2
15559: ARRAY
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PPUSH
15565: LD_VAR 0 3
15569: PUSH
15570: LD_VAR 0 2
15574: ARRAY
15575: PUSH
15576: LD_INT 2
15578: ARRAY
15579: PPUSH
15580: LD_INT 0
15582: PPUSH
15583: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15587: LD_INT 0
15589: PPUSH
15590: LD_INT 6
15592: PUSH
15593: LD_INT 7
15595: PUSH
15596: LD_INT 8
15598: PUSH
15599: LD_INT 8
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: PUSH
15608: LD_OWVAR 67
15612: ARRAY
15613: PPUSH
15614: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
15618: CALL_OW 44
15622: PPUSH
15623: LD_VAR 0 5
15627: PPUSH
15628: CALL_OW 52
// end ;
15632: GO 15464
15634: POP
15635: POP
// for i := 1 to 4 do
15636: LD_ADDR_VAR 0 2
15640: PUSH
15641: DOUBLE
15642: LD_INT 1
15644: DEC
15645: ST_TO_ADDR
15646: LD_INT 4
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15716
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
15652: LD_INT 0
15654: PPUSH
15655: LD_INT 6
15657: PUSH
15658: LD_INT 7
15660: PUSH
15661: LD_INT 8
15663: PUSH
15664: LD_INT 8
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: PUSH
15673: LD_OWVAR 67
15677: ARRAY
15678: PPUSH
15679: CALL_OW 381
// un := CreateHuman ;
15683: LD_ADDR_VAR 0 4
15687: PUSH
15688: CALL_OW 44
15692: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
15693: LD_VAR 0 4
15697: PPUSH
15698: LD_INT 185
15700: PPUSH
15701: LD_INT 145
15703: PPUSH
15704: LD_INT 6
15706: PPUSH
15707: LD_INT 0
15709: PPUSH
15710: CALL_OW 50
// end ;
15714: GO 15649
15716: POP
15717: POP
// end ;
15718: LD_VAR 0 1
15722: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
15727: PPUSH
// uc_side := 3 ;
15728: LD_ADDR_OWVAR 20
15732: PUSH
15733: LD_INT 3
15735: ST_TO_ADDR
// if Difficulty > 1 then
15736: LD_OWVAR 67
15740: PUSH
15741: LD_INT 1
15743: GREATER
15744: IFFALSE 15906
// begin uc_nation := 0 ;
15746: LD_ADDR_OWVAR 21
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: DOUBLE
15760: LD_INT 1
15762: DEC
15763: ST_TO_ADDR
15764: LD_INT 4
15766: PUSH
15767: LD_INT 5
15769: PUSH
15770: LD_INT 6
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_OWVAR 67
15782: PUSH
15783: LD_INT 1
15785: PLUS
15786: ARRAY
15787: PUSH
15788: FOR_TO
15789: IFFALSE 15904
// begin hc_class := class_apeman_soldier ;
15791: LD_ADDR_OWVAR 28
15795: PUSH
15796: LD_INT 15
15798: ST_TO_ADDR
// hc_gallery :=  ;
15799: LD_ADDR_OWVAR 33
15803: PUSH
15804: LD_STRING 
15806: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
15807: LD_ADDR_OWVAR 26
15811: PUSH
15812: LD_STRING Treci
15814: PUSH
15815: LD_STRING Ivan
15817: PUSH
15818: LD_STRING Yaromir
15820: PUSH
15821: LD_STRING Nadzieia
15823: PUSH
15824: LD_STRING Krasna
15826: PUSH
15827: LD_STRING Piaty
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 1
15840: PPUSH
15841: LD_INT 6
15843: PPUSH
15844: CALL_OW 12
15848: ARRAY
15849: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
15850: LD_ADDR_OWVAR 31
15854: PUSH
15855: LD_INT 5
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: ST_TO_ADDR
// hc_sex := sex_male ;
15873: LD_ADDR_OWVAR 27
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
15881: CALL_OW 44
15885: PPUSH
15886: LD_INT 178
15888: PPUSH
15889: LD_INT 148
15891: PPUSH
15892: LD_INT 6
15894: PPUSH
15895: LD_INT 0
15897: PPUSH
15898: CALL_OW 50
// end ;
15902: GO 15788
15904: POP
15905: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: DOUBLE
15912: LD_INT 1
15914: DEC
15915: ST_TO_ADDR
15916: LD_INT 2
15918: PUSH
15919: LD_INT 3
15921: PUSH
15922: LD_INT 4
15924: PUSH
15925: LD_INT 5
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: LD_OWVAR 67
15938: ARRAY
15939: PUSH
15940: FOR_TO
15941: IFFALSE 16108
// begin uc_nation := 3 ;
15943: LD_ADDR_OWVAR 21
15947: PUSH
15948: LD_INT 3
15950: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
15951: LD_INT 22
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: LD_INT 1
15959: PPUSH
15960: LD_INT 45
15962: PUSH
15963: LD_INT 43
15965: PUSH
15966: LD_INT 44
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PUSH
15974: LD_VAR 0 2
15978: PUSH
15979: LD_INT 3
15981: MOD
15982: PUSH
15983: LD_INT 1
15985: PLUS
15986: ARRAY
15987: PPUSH
15988: LD_INT 44
15990: PPUSH
15991: CALL 21396 0 5
// veh := CreateVehicle ;
15995: LD_ADDR_VAR 0 3
15999: PUSH
16000: CALL_OW 45
16004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
16005: LD_VAR 0 3
16009: PPUSH
16010: LD_INT 4
16012: PPUSH
16013: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: LD_INT 0
16027: PPUSH
16028: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
16032: LD_INT 0
16034: PPUSH
16035: LD_INT 6
16037: PUSH
16038: LD_INT 7
16040: PUSH
16041: LD_INT 8
16043: PUSH
16044: LD_INT 8
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: LD_OWVAR 67
16057: ARRAY
16058: PPUSH
16059: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
16063: CALL_OW 44
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
16077: LD_VAR 0 3
16081: PPUSH
16082: LD_INT 178
16084: PUSH
16085: LD_INT 137
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: PPUSH
16095: CALL 56871 0 2
// wait ( 0 0$2 ) ;
16099: LD_INT 70
16101: PPUSH
16102: CALL_OW 67
// end ;
16106: GO 15940
16108: POP
16109: POP
// end ;
16110: LD_VAR 0 1
16114: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
16115: LD_INT 22
16117: PUSH
16118: LD_INT 3
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 32
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: IFFALSE 16231
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
// begin enable ;
16152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_INT 3
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 32
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// for i in tmp do
16187: LD_ADDR_VAR 0 1
16191: PUSH
16192: LD_VAR 0 2
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16229
// if GetFuel ( i ) < 3 then
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 261
16209: PUSH
16210: LD_INT 3
16212: LESS
16213: IFFALSE 16227
// SetFuel ( i , 3 ) ;
16215: LD_VAR 0 1
16219: PPUSH
16220: LD_INT 3
16222: PPUSH
16223: CALL_OW 240
16227: GO 16197
16229: POP
16230: POP
// end ;
16231: PPOPN 2
16233: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
16234: LD_EXP 8
16238: PUSH
16239: LD_INT 22
16241: PUSH
16242: LD_INT 3
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 21
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: AND
16268: IFFALSE 16532
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// begin enable ;
16278: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
16279: LD_ADDR_VAR 0 2
16283: PUSH
16284: LD_INT 22
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 25
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 3
16306: PUSH
16307: LD_INT 55
16309: PUSH
16310: EMPTY
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: PPUSH
16322: CALL_OW 69
16326: ST_TO_ADDR
// if mech then
16327: LD_VAR 0 2
16331: IFFALSE 16401
// for i in mech do
16333: LD_ADDR_VAR 0 1
16337: PUSH
16338: LD_VAR 0 2
16342: PUSH
16343: FOR_IN
16344: IFFALSE 16399
// begin if IsInArea ( i , escapeArea ) then
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 13
16353: PPUSH
16354: CALL_OW 308
16358: IFFALSE 16371
// RemoveUnit ( i ) else
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 64
16369: GO 16397
// if IsOk ( i ) then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 302
16380: IFFALSE 16397
// ComMoveXY ( i , 196 , 155 ) ;
16382: LD_VAR 0 1
16386: PPUSH
16387: LD_INT 196
16389: PPUSH
16390: LD_INT 155
16392: PPUSH
16393: CALL_OW 111
// end ;
16397: GO 16343
16399: POP
16400: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
16401: LD_ADDR_VAR 0 3
16405: PUSH
16406: LD_INT 22
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 25
16431: PUSH
16432: LD_INT 15
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 21
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 50
16457: PUSH
16458: EMPTY
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if tmp then
16471: LD_VAR 0 3
16475: IFFALSE 16532
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
16477: LD_VAR 0 3
16481: PPUSH
16482: LD_INT 171
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 145
16494: PUSH
16495: LD_INT 69
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 132
16504: PUSH
16505: LD_INT 38
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 126
16514: PUSH
16515: LD_INT 15
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL 56871 0 2
// end ; end_of_file
16532: PPOPN 3
16534: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
// if exist_mode then
16539: LD_VAR 0 2
16543: IFFALSE 16589
// begin unit := CreateCharacter ( prefix & ident ) ;
16545: LD_ADDR_VAR 0 5
16549: PUSH
16550: LD_VAR 0 3
16554: PUSH
16555: LD_VAR 0 1
16559: STR
16560: PPUSH
16561: CALL_OW 34
16565: ST_TO_ADDR
// if unit then
16566: LD_VAR 0 5
16570: IFFALSE 16587
// DeleteCharacters ( prefix & ident ) ;
16572: LD_VAR 0 3
16576: PUSH
16577: LD_VAR 0 1
16581: STR
16582: PPUSH
16583: CALL_OW 40
// end else
16587: GO 16604
// unit := NewCharacter ( ident ) ;
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 25
16603: ST_TO_ADDR
// result := unit ;
16604: LD_ADDR_VAR 0 4
16608: PUSH
16609: LD_VAR 0 5
16613: ST_TO_ADDR
// end ;
16614: LD_VAR 0 4
16618: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16619: LD_INT 0
16621: PPUSH
16622: PPUSH
// if not side or not nation then
16623: LD_VAR 0 1
16627: NOT
16628: PUSH
16629: LD_VAR 0 2
16633: NOT
16634: OR
16635: IFFALSE 16639
// exit ;
16637: GO 17407
// case nation of nation_american :
16639: LD_VAR 0 2
16643: PUSH
16644: LD_INT 1
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16866
16652: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16653: LD_ADDR_VAR 0 4
16657: PUSH
16658: LD_INT 35
16660: PUSH
16661: LD_INT 45
16663: PUSH
16664: LD_INT 46
16666: PUSH
16667: LD_INT 47
16669: PUSH
16670: LD_INT 82
16672: PUSH
16673: LD_INT 83
16675: PUSH
16676: LD_INT 84
16678: PUSH
16679: LD_INT 85
16681: PUSH
16682: LD_INT 86
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: LD_INT 6
16693: PUSH
16694: LD_INT 15
16696: PUSH
16697: LD_INT 16
16699: PUSH
16700: LD_INT 7
16702: PUSH
16703: LD_INT 12
16705: PUSH
16706: LD_INT 13
16708: PUSH
16709: LD_INT 10
16711: PUSH
16712: LD_INT 14
16714: PUSH
16715: LD_INT 20
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 22
16723: PUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 32
16729: PUSH
16730: LD_INT 27
16732: PUSH
16733: LD_INT 36
16735: PUSH
16736: LD_INT 69
16738: PUSH
16739: LD_INT 39
16741: PUSH
16742: LD_INT 34
16744: PUSH
16745: LD_INT 40
16747: PUSH
16748: LD_INT 48
16750: PUSH
16751: LD_INT 49
16753: PUSH
16754: LD_INT 50
16756: PUSH
16757: LD_INT 51
16759: PUSH
16760: LD_INT 52
16762: PUSH
16763: LD_INT 53
16765: PUSH
16766: LD_INT 54
16768: PUSH
16769: LD_INT 55
16771: PUSH
16772: LD_INT 56
16774: PUSH
16775: LD_INT 57
16777: PUSH
16778: LD_INT 58
16780: PUSH
16781: LD_INT 59
16783: PUSH
16784: LD_INT 60
16786: PUSH
16787: LD_INT 61
16789: PUSH
16790: LD_INT 62
16792: PUSH
16793: LD_INT 80
16795: PUSH
16796: LD_INT 82
16798: PUSH
16799: LD_INT 83
16801: PUSH
16802: LD_INT 84
16804: PUSH
16805: LD_INT 85
16807: PUSH
16808: LD_INT 86
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: ST_TO_ADDR
16864: GO 17331
16866: LD_INT 2
16868: DOUBLE
16869: EQUAL
16870: IFTRUE 16874
16872: GO 17100
16874: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16875: LD_ADDR_VAR 0 4
16879: PUSH
16880: LD_INT 35
16882: PUSH
16883: LD_INT 45
16885: PUSH
16886: LD_INT 46
16888: PUSH
16889: LD_INT 47
16891: PUSH
16892: LD_INT 82
16894: PUSH
16895: LD_INT 83
16897: PUSH
16898: LD_INT 84
16900: PUSH
16901: LD_INT 85
16903: PUSH
16904: LD_INT 87
16906: PUSH
16907: LD_INT 70
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: LD_INT 11
16915: PUSH
16916: LD_INT 3
16918: PUSH
16919: LD_INT 4
16921: PUSH
16922: LD_INT 5
16924: PUSH
16925: LD_INT 6
16927: PUSH
16928: LD_INT 15
16930: PUSH
16931: LD_INT 18
16933: PUSH
16934: LD_INT 7
16936: PUSH
16937: LD_INT 17
16939: PUSH
16940: LD_INT 8
16942: PUSH
16943: LD_INT 20
16945: PUSH
16946: LD_INT 21
16948: PUSH
16949: LD_INT 22
16951: PUSH
16952: LD_INT 72
16954: PUSH
16955: LD_INT 26
16957: PUSH
16958: LD_INT 69
16960: PUSH
16961: LD_INT 39
16963: PUSH
16964: LD_INT 40
16966: PUSH
16967: LD_INT 41
16969: PUSH
16970: LD_INT 42
16972: PUSH
16973: LD_INT 43
16975: PUSH
16976: LD_INT 48
16978: PUSH
16979: LD_INT 49
16981: PUSH
16982: LD_INT 50
16984: PUSH
16985: LD_INT 51
16987: PUSH
16988: LD_INT 52
16990: PUSH
16991: LD_INT 53
16993: PUSH
16994: LD_INT 54
16996: PUSH
16997: LD_INT 55
16999: PUSH
17000: LD_INT 56
17002: PUSH
17003: LD_INT 60
17005: PUSH
17006: LD_INT 61
17008: PUSH
17009: LD_INT 62
17011: PUSH
17012: LD_INT 66
17014: PUSH
17015: LD_INT 67
17017: PUSH
17018: LD_INT 68
17020: PUSH
17021: LD_INT 81
17023: PUSH
17024: LD_INT 82
17026: PUSH
17027: LD_INT 83
17029: PUSH
17030: LD_INT 84
17032: PUSH
17033: LD_INT 85
17035: PUSH
17036: LD_INT 87
17038: PUSH
17039: LD_INT 88
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: ST_TO_ADDR
17098: GO 17331
17100: LD_INT 3
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17330
17108: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17109: LD_ADDR_VAR 0 4
17113: PUSH
17114: LD_INT 46
17116: PUSH
17117: LD_INT 47
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: LD_INT 82
17128: PUSH
17129: LD_INT 83
17131: PUSH
17132: LD_INT 84
17134: PUSH
17135: LD_INT 85
17137: PUSH
17138: LD_INT 86
17140: PUSH
17141: LD_INT 11
17143: PUSH
17144: LD_INT 9
17146: PUSH
17147: LD_INT 20
17149: PUSH
17150: LD_INT 19
17152: PUSH
17153: LD_INT 21
17155: PUSH
17156: LD_INT 24
17158: PUSH
17159: LD_INT 22
17161: PUSH
17162: LD_INT 25
17164: PUSH
17165: LD_INT 28
17167: PUSH
17168: LD_INT 29
17170: PUSH
17171: LD_INT 30
17173: PUSH
17174: LD_INT 31
17176: PUSH
17177: LD_INT 37
17179: PUSH
17180: LD_INT 38
17182: PUSH
17183: LD_INT 32
17185: PUSH
17186: LD_INT 27
17188: PUSH
17189: LD_INT 33
17191: PUSH
17192: LD_INT 69
17194: PUSH
17195: LD_INT 39
17197: PUSH
17198: LD_INT 34
17200: PUSH
17201: LD_INT 40
17203: PUSH
17204: LD_INT 71
17206: PUSH
17207: LD_INT 23
17209: PUSH
17210: LD_INT 44
17212: PUSH
17213: LD_INT 48
17215: PUSH
17216: LD_INT 49
17218: PUSH
17219: LD_INT 50
17221: PUSH
17222: LD_INT 51
17224: PUSH
17225: LD_INT 52
17227: PUSH
17228: LD_INT 53
17230: PUSH
17231: LD_INT 54
17233: PUSH
17234: LD_INT 55
17236: PUSH
17237: LD_INT 56
17239: PUSH
17240: LD_INT 57
17242: PUSH
17243: LD_INT 58
17245: PUSH
17246: LD_INT 59
17248: PUSH
17249: LD_INT 63
17251: PUSH
17252: LD_INT 64
17254: PUSH
17255: LD_INT 65
17257: PUSH
17258: LD_INT 82
17260: PUSH
17261: LD_INT 83
17263: PUSH
17264: LD_INT 84
17266: PUSH
17267: LD_INT 85
17269: PUSH
17270: LD_INT 86
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
17328: GO 17331
17330: POP
// if state > - 1 and state < 3 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: GREATER
17340: PUSH
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 3
17348: LESS
17349: AND
17350: IFFALSE 17407
// for i in result do
17352: LD_ADDR_VAR 0 5
17356: PUSH
17357: LD_VAR 0 4
17361: PUSH
17362: FOR_IN
17363: IFFALSE 17405
// if GetTech ( i , side ) <> state then
17365: LD_VAR 0 5
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 321
17379: PUSH
17380: LD_VAR 0 3
17384: NONEQUAL
17385: IFFALSE 17403
// result := result diff i ;
17387: LD_ADDR_VAR 0 4
17391: PUSH
17392: LD_VAR 0 4
17396: PUSH
17397: LD_VAR 0 5
17401: DIFF
17402: ST_TO_ADDR
17403: GO 17362
17405: POP
17406: POP
// end ;
17407: LD_VAR 0 4
17411: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17412: LD_INT 0
17414: PPUSH
17415: PPUSH
17416: PPUSH
// result := true ;
17417: LD_ADDR_VAR 0 3
17421: PUSH
17422: LD_INT 1
17424: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17425: LD_ADDR_VAR 0 5
17429: PUSH
17430: LD_VAR 0 2
17434: PPUSH
17435: CALL_OW 480
17439: ST_TO_ADDR
// if not tmp then
17440: LD_VAR 0 5
17444: NOT
17445: IFFALSE 17449
// exit ;
17447: GO 17498
// for i in tmp do
17449: LD_ADDR_VAR 0 4
17453: PUSH
17454: LD_VAR 0 5
17458: PUSH
17459: FOR_IN
17460: IFFALSE 17496
// if GetTech ( i , side ) <> state_researched then
17462: LD_VAR 0 4
17466: PPUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 321
17476: PUSH
17477: LD_INT 2
17479: NONEQUAL
17480: IFFALSE 17494
// begin result := false ;
17482: LD_ADDR_VAR 0 3
17486: PUSH
17487: LD_INT 0
17489: ST_TO_ADDR
// exit ;
17490: POP
17491: POP
17492: GO 17498
// end ;
17494: GO 17459
17496: POP
17497: POP
// end ;
17498: LD_VAR 0 3
17502: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17503: LD_INT 0
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17518: LD_VAR 0 1
17522: NOT
17523: PUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: CALL_OW 257
17533: PUSH
17534: LD_INT 9
17536: NONEQUAL
17537: OR
17538: IFFALSE 17542
// exit ;
17540: GO 18115
// side := GetSide ( unit ) ;
17542: LD_ADDR_VAR 0 9
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: CALL_OW 255
17556: ST_TO_ADDR
// tech_space := tech_spacanom ;
17557: LD_ADDR_VAR 0 12
17561: PUSH
17562: LD_INT 29
17564: ST_TO_ADDR
// tech_time := tech_taurad ;
17565: LD_ADDR_VAR 0 13
17569: PUSH
17570: LD_INT 28
17572: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17573: LD_ADDR_VAR 0 11
17577: PUSH
17578: LD_VAR 0 1
17582: PPUSH
17583: CALL_OW 310
17587: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17588: LD_VAR 0 11
17592: PPUSH
17593: CALL_OW 247
17597: PUSH
17598: LD_INT 2
17600: EQUAL
17601: IFFALSE 17605
// exit ;
17603: GO 18115
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17605: LD_ADDR_VAR 0 8
17609: PUSH
17610: LD_INT 81
17612: PUSH
17613: LD_VAR 0 9
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: LD_INT 21
17627: PUSH
17628: LD_INT 3
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PPUSH
17643: CALL_OW 69
17647: ST_TO_ADDR
// if not tmp then
17648: LD_VAR 0 8
17652: NOT
17653: IFFALSE 17657
// exit ;
17655: GO 18115
// if in_unit then
17657: LD_VAR 0 11
17661: IFFALSE 17685
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17663: LD_ADDR_VAR 0 10
17667: PUSH
17668: LD_VAR 0 8
17672: PPUSH
17673: LD_VAR 0 11
17677: PPUSH
17678: CALL_OW 74
17682: ST_TO_ADDR
17683: GO 17705
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17685: LD_ADDR_VAR 0 10
17689: PUSH
17690: LD_VAR 0 8
17694: PPUSH
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 74
17704: ST_TO_ADDR
// if not enemy then
17705: LD_VAR 0 10
17709: NOT
17710: IFFALSE 17714
// exit ;
17712: GO 18115
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17714: LD_VAR 0 11
17718: PUSH
17719: LD_VAR 0 11
17723: PPUSH
17724: LD_VAR 0 10
17728: PPUSH
17729: CALL_OW 296
17733: PUSH
17734: LD_INT 13
17736: GREATER
17737: AND
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: LD_VAR 0 10
17748: PPUSH
17749: CALL_OW 296
17753: PUSH
17754: LD_INT 12
17756: GREATER
17757: OR
17758: IFFALSE 17762
// exit ;
17760: GO 18115
// missile := [ 1 ] ;
17762: LD_ADDR_VAR 0 14
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17773: LD_VAR 0 9
17777: PPUSH
17778: LD_VAR 0 12
17782: PPUSH
17783: CALL_OW 325
17787: IFFALSE 17816
// missile := Replace ( missile , missile + 1 , 2 ) ;
17789: LD_ADDR_VAR 0 14
17793: PUSH
17794: LD_VAR 0 14
17798: PPUSH
17799: LD_VAR 0 14
17803: PUSH
17804: LD_INT 1
17806: PLUS
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 1
17815: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17816: LD_VAR 0 9
17820: PPUSH
17821: LD_VAR 0 13
17825: PPUSH
17826: CALL_OW 325
17830: PUSH
17831: LD_VAR 0 10
17835: PPUSH
17836: CALL_OW 255
17840: PPUSH
17841: LD_VAR 0 13
17845: PPUSH
17846: CALL_OW 325
17850: NOT
17851: AND
17852: IFFALSE 17881
// missile := Replace ( missile , missile + 1 , 3 ) ;
17854: LD_ADDR_VAR 0 14
17858: PUSH
17859: LD_VAR 0 14
17863: PPUSH
17864: LD_VAR 0 14
17868: PUSH
17869: LD_INT 1
17871: PLUS
17872: PPUSH
17873: LD_INT 3
17875: PPUSH
17876: CALL_OW 1
17880: ST_TO_ADDR
// if missile < 2 then
17881: LD_VAR 0 14
17885: PUSH
17886: LD_INT 2
17888: LESS
17889: IFFALSE 17893
// exit ;
17891: GO 18115
// x := GetX ( enemy ) ;
17893: LD_ADDR_VAR 0 4
17897: PUSH
17898: LD_VAR 0 10
17902: PPUSH
17903: CALL_OW 250
17907: ST_TO_ADDR
// y := GetY ( enemy ) ;
17908: LD_ADDR_VAR 0 5
17912: PUSH
17913: LD_VAR 0 10
17917: PPUSH
17918: CALL_OW 251
17922: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17923: LD_ADDR_VAR 0 6
17927: PUSH
17928: LD_VAR 0 4
17932: PUSH
17933: LD_INT 1
17935: NEG
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: CALL_OW 12
17944: PLUS
17945: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17946: LD_ADDR_VAR 0 7
17950: PUSH
17951: LD_VAR 0 5
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PPUSH
17960: LD_INT 1
17962: PPUSH
17963: CALL_OW 12
17967: PLUS
17968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17969: LD_VAR 0 6
17973: PPUSH
17974: LD_VAR 0 7
17978: PPUSH
17979: CALL_OW 488
17983: NOT
17984: IFFALSE 18006
// begin _x := x ;
17986: LD_ADDR_VAR 0 6
17990: PUSH
17991: LD_VAR 0 4
17995: ST_TO_ADDR
// _y := y ;
17996: LD_ADDR_VAR 0 7
18000: PUSH
18001: LD_VAR 0 5
18005: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18006: LD_ADDR_VAR 0 3
18010: PUSH
18011: LD_INT 1
18013: PPUSH
18014: LD_VAR 0 14
18018: PPUSH
18019: CALL_OW 12
18023: ST_TO_ADDR
// case i of 1 :
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 1
18031: DOUBLE
18032: EQUAL
18033: IFTRUE 18037
18035: GO 18054
18037: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18038: LD_VAR 0 1
18042: PPUSH
18043: LD_VAR 0 10
18047: PPUSH
18048: CALL_OW 115
18052: GO 18115
18054: LD_INT 2
18056: DOUBLE
18057: EQUAL
18058: IFTRUE 18062
18060: GO 18084
18062: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_VAR 0 6
18072: PPUSH
18073: LD_VAR 0 7
18077: PPUSH
18078: CALL_OW 153
18082: GO 18115
18084: LD_INT 3
18086: DOUBLE
18087: EQUAL
18088: IFTRUE 18092
18090: GO 18114
18092: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_VAR 0 6
18102: PPUSH
18103: LD_VAR 0 7
18107: PPUSH
18108: CALL_OW 154
18112: GO 18115
18114: POP
// end ;
18115: LD_VAR 0 2
18119: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18120: LD_INT 0
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
18126: PPUSH
18127: PPUSH
// if not unit or not building then
18128: LD_VAR 0 1
18132: NOT
18133: PUSH
18134: LD_VAR 0 2
18138: NOT
18139: OR
18140: IFFALSE 18144
// exit ;
18142: GO 18302
// x := GetX ( building ) ;
18144: LD_ADDR_VAR 0 5
18148: PUSH
18149: LD_VAR 0 2
18153: PPUSH
18154: CALL_OW 250
18158: ST_TO_ADDR
// y := GetY ( building ) ;
18159: LD_ADDR_VAR 0 6
18163: PUSH
18164: LD_VAR 0 2
18168: PPUSH
18169: CALL_OW 251
18173: ST_TO_ADDR
// for i = 0 to 5 do
18174: LD_ADDR_VAR 0 4
18178: PUSH
18179: DOUBLE
18180: LD_INT 0
18182: DEC
18183: ST_TO_ADDR
18184: LD_INT 5
18186: PUSH
18187: FOR_TO
18188: IFFALSE 18300
// begin _x := ShiftX ( x , i , 3 ) ;
18190: LD_ADDR_VAR 0 7
18194: PUSH
18195: LD_VAR 0 5
18199: PPUSH
18200: LD_VAR 0 4
18204: PPUSH
18205: LD_INT 3
18207: PPUSH
18208: CALL_OW 272
18212: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18213: LD_ADDR_VAR 0 8
18217: PUSH
18218: LD_VAR 0 6
18222: PPUSH
18223: LD_VAR 0 4
18227: PPUSH
18228: LD_INT 3
18230: PPUSH
18231: CALL_OW 273
18235: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18236: LD_VAR 0 7
18240: PPUSH
18241: LD_VAR 0 8
18245: PPUSH
18246: CALL_OW 488
18250: NOT
18251: IFFALSE 18255
// continue ;
18253: GO 18187
// if HexInfo ( _x , _y ) = 0 then
18255: LD_VAR 0 7
18259: PPUSH
18260: LD_VAR 0 8
18264: PPUSH
18265: CALL_OW 428
18269: PUSH
18270: LD_INT 0
18272: EQUAL
18273: IFFALSE 18298
// begin ComMoveXY ( unit , _x , _y ) ;
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_VAR 0 7
18284: PPUSH
18285: LD_VAR 0 8
18289: PPUSH
18290: CALL_OW 111
// exit ;
18294: POP
18295: POP
18296: GO 18302
// end ; end ;
18298: GO 18187
18300: POP
18301: POP
// end ;
18302: LD_VAR 0 3
18306: RET
// export function ScanBase ( side , base_area ) ; begin
18307: LD_INT 0
18309: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18310: LD_ADDR_VAR 0 3
18314: PUSH
18315: LD_VAR 0 2
18319: PPUSH
18320: LD_INT 81
18322: PUSH
18323: LD_VAR 0 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 70
18336: ST_TO_ADDR
// end ;
18337: LD_VAR 0 3
18341: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18342: LD_INT 0
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
// result := false ;
18348: LD_ADDR_VAR 0 2
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// side := GetSide ( unit ) ;
18356: LD_ADDR_VAR 0 3
18360: PUSH
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 255
18370: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18371: LD_ADDR_VAR 0 4
18375: PUSH
18376: LD_VAR 0 1
18380: PPUSH
18381: CALL_OW 248
18385: ST_TO_ADDR
// case nat of 1 :
18386: LD_VAR 0 4
18390: PUSH
18391: LD_INT 1
18393: DOUBLE
18394: EQUAL
18395: IFTRUE 18399
18397: GO 18410
18399: POP
// tech := tech_lassight ; 2 :
18400: LD_ADDR_VAR 0 5
18404: PUSH
18405: LD_INT 12
18407: ST_TO_ADDR
18408: GO 18449
18410: LD_INT 2
18412: DOUBLE
18413: EQUAL
18414: IFTRUE 18418
18416: GO 18429
18418: POP
// tech := tech_mortar ; 3 :
18419: LD_ADDR_VAR 0 5
18423: PUSH
18424: LD_INT 41
18426: ST_TO_ADDR
18427: GO 18449
18429: LD_INT 3
18431: DOUBLE
18432: EQUAL
18433: IFTRUE 18437
18435: GO 18448
18437: POP
// tech := tech_bazooka ; end ;
18438: LD_ADDR_VAR 0 5
18442: PUSH
18443: LD_INT 44
18445: ST_TO_ADDR
18446: GO 18449
18448: POP
// if Researched ( side , tech ) then
18449: LD_VAR 0 3
18453: PPUSH
18454: LD_VAR 0 5
18458: PPUSH
18459: CALL_OW 325
18463: IFFALSE 18490
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18465: LD_ADDR_VAR 0 2
18469: PUSH
18470: LD_INT 5
18472: PUSH
18473: LD_INT 8
18475: PUSH
18476: LD_INT 9
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: PUSH
18484: LD_VAR 0 4
18488: ARRAY
18489: ST_TO_ADDR
// end ;
18490: LD_VAR 0 2
18494: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
18499: PPUSH
// if not mines then
18500: LD_VAR 0 2
18504: NOT
18505: IFFALSE 18509
// exit ;
18507: GO 18653
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18509: LD_ADDR_VAR 0 5
18513: PUSH
18514: LD_INT 81
18516: PUSH
18517: LD_VAR 0 1
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 3
18528: PUSH
18529: LD_INT 21
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PPUSH
18547: CALL_OW 69
18551: ST_TO_ADDR
// for i in mines do
18552: LD_ADDR_VAR 0 4
18556: PUSH
18557: LD_VAR 0 2
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18651
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18565: LD_VAR 0 4
18569: PUSH
18570: LD_INT 1
18572: ARRAY
18573: PPUSH
18574: LD_VAR 0 4
18578: PUSH
18579: LD_INT 2
18581: ARRAY
18582: PPUSH
18583: CALL_OW 458
18587: NOT
18588: IFFALSE 18592
// continue ;
18590: GO 18562
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18592: LD_VAR 0 4
18596: PUSH
18597: LD_INT 1
18599: ARRAY
18600: PPUSH
18601: LD_VAR 0 4
18605: PUSH
18606: LD_INT 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 428
18614: PUSH
18615: LD_VAR 0 5
18619: IN
18620: IFFALSE 18649
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18622: LD_VAR 0 4
18626: PUSH
18627: LD_INT 1
18629: ARRAY
18630: PPUSH
18631: LD_VAR 0 4
18635: PUSH
18636: LD_INT 2
18638: ARRAY
18639: PPUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 456
// end ;
18649: GO 18562
18651: POP
18652: POP
// end ;
18653: LD_VAR 0 3
18657: RET
// export function Count ( array ) ; begin
18658: LD_INT 0
18660: PPUSH
// result := array + 0 ;
18661: LD_ADDR_VAR 0 2
18665: PUSH
18666: LD_VAR 0 1
18670: PUSH
18671: LD_INT 0
18673: PLUS
18674: ST_TO_ADDR
// end ;
18675: LD_VAR 0 2
18679: RET
// export function IsEmpty ( building ) ; begin
18680: LD_INT 0
18682: PPUSH
// if not building then
18683: LD_VAR 0 1
18687: NOT
18688: IFFALSE 18692
// exit ;
18690: GO 18735
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18692: LD_ADDR_VAR 0 2
18696: PUSH
18697: LD_VAR 0 1
18701: PUSH
18702: LD_INT 22
18704: PUSH
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 255
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 58
18721: PUSH
18722: EMPTY
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PPUSH
18729: CALL_OW 69
18733: IN
18734: ST_TO_ADDR
// end ;
18735: LD_VAR 0 2
18739: RET
// export function IsNotFull ( building ) ; var places ; begin
18740: LD_INT 0
18742: PPUSH
18743: PPUSH
// if not building then
18744: LD_VAR 0 1
18748: NOT
18749: IFFALSE 18753
// exit ;
18751: GO 18781
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18753: LD_ADDR_VAR 0 2
18757: PUSH
18758: LD_VAR 0 1
18762: PPUSH
18763: LD_INT 3
18765: PUSH
18766: LD_INT 62
18768: PUSH
18769: EMPTY
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 72
18780: ST_TO_ADDR
// end ;
18781: LD_VAR 0 2
18785: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18786: LD_INT 0
18788: PPUSH
18789: PPUSH
18790: PPUSH
18791: PPUSH
// tmp := [ ] ;
18792: LD_ADDR_VAR 0 3
18796: PUSH
18797: EMPTY
18798: ST_TO_ADDR
// list := [ ] ;
18799: LD_ADDR_VAR 0 5
18803: PUSH
18804: EMPTY
18805: ST_TO_ADDR
// for i = 16 to 25 do
18806: LD_ADDR_VAR 0 4
18810: PUSH
18811: DOUBLE
18812: LD_INT 16
18814: DEC
18815: ST_TO_ADDR
18816: LD_INT 25
18818: PUSH
18819: FOR_TO
18820: IFFALSE 18893
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_VAR 0 3
18831: PUSH
18832: LD_INT 22
18834: PUSH
18835: LD_VAR 0 1
18839: PPUSH
18840: CALL_OW 255
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 91
18851: PUSH
18852: LD_VAR 0 1
18856: PUSH
18857: LD_INT 6
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_VAR 0 4
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: PPUSH
18885: CALL_OW 69
18889: ADD
18890: ST_TO_ADDR
18891: GO 18819
18893: POP
18894: POP
// for i = 1 to tmp do
18895: LD_ADDR_VAR 0 4
18899: PUSH
18900: DOUBLE
18901: LD_INT 1
18903: DEC
18904: ST_TO_ADDR
18905: LD_VAR 0 3
18909: PUSH
18910: FOR_TO
18911: IFFALSE 18999
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18913: LD_ADDR_VAR 0 5
18917: PUSH
18918: LD_VAR 0 5
18922: PUSH
18923: LD_VAR 0 3
18927: PUSH
18928: LD_VAR 0 4
18932: ARRAY
18933: PPUSH
18934: CALL_OW 266
18938: PUSH
18939: LD_VAR 0 3
18943: PUSH
18944: LD_VAR 0 4
18948: ARRAY
18949: PPUSH
18950: CALL_OW 250
18954: PUSH
18955: LD_VAR 0 3
18959: PUSH
18960: LD_VAR 0 4
18964: ARRAY
18965: PPUSH
18966: CALL_OW 251
18970: PUSH
18971: LD_VAR 0 3
18975: PUSH
18976: LD_VAR 0 4
18980: ARRAY
18981: PPUSH
18982: CALL_OW 254
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: ADD
18996: ST_TO_ADDR
18997: GO 18910
18999: POP
19000: POP
// result := list ;
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: LD_VAR 0 5
19010: ST_TO_ADDR
// end ;
19011: LD_VAR 0 2
19015: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19016: LD_INT 0
19018: PPUSH
19019: PPUSH
19020: PPUSH
19021: PPUSH
19022: PPUSH
19023: PPUSH
19024: PPUSH
// if not factory then
19025: LD_VAR 0 1
19029: NOT
19030: IFFALSE 19034
// exit ;
19032: GO 19627
// if control = control_apeman then
19034: LD_VAR 0 4
19038: PUSH
19039: LD_INT 5
19041: EQUAL
19042: IFFALSE 19151
// begin tmp := UnitsInside ( factory ) ;
19044: LD_ADDR_VAR 0 8
19048: PUSH
19049: LD_VAR 0 1
19053: PPUSH
19054: CALL_OW 313
19058: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19059: LD_VAR 0 8
19063: PPUSH
19064: LD_INT 25
19066: PUSH
19067: LD_INT 12
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PPUSH
19074: CALL_OW 72
19078: NOT
19079: IFFALSE 19089
// control := control_manual ;
19081: LD_ADDR_VAR 0 4
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19089: LD_ADDR_VAR 0 8
19093: PUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: CALL 18786 0 1
19103: ST_TO_ADDR
// if tmp then
19104: LD_VAR 0 8
19108: IFFALSE 19151
// begin for i in tmp do
19110: LD_ADDR_VAR 0 7
19114: PUSH
19115: LD_VAR 0 8
19119: PUSH
19120: FOR_IN
19121: IFFALSE 19149
// if i [ 1 ] = b_ext_radio then
19123: LD_VAR 0 7
19127: PUSH
19128: LD_INT 1
19130: ARRAY
19131: PUSH
19132: LD_INT 22
19134: EQUAL
19135: IFFALSE 19147
// begin control := control_remote ;
19137: LD_ADDR_VAR 0 4
19141: PUSH
19142: LD_INT 2
19144: ST_TO_ADDR
// break ;
19145: GO 19149
// end ;
19147: GO 19120
19149: POP
19150: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19151: LD_VAR 0 1
19155: PPUSH
19156: LD_VAR 0 2
19160: PPUSH
19161: LD_VAR 0 3
19165: PPUSH
19166: LD_VAR 0 4
19170: PPUSH
19171: LD_VAR 0 5
19175: PPUSH
19176: CALL_OW 448
19180: IFFALSE 19215
// begin result := [ chassis , engine , control , weapon ] ;
19182: LD_ADDR_VAR 0 6
19186: PUSH
19187: LD_VAR 0 2
19191: PUSH
19192: LD_VAR 0 3
19196: PUSH
19197: LD_VAR 0 4
19201: PUSH
19202: LD_VAR 0 5
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: ST_TO_ADDR
// exit ;
19213: GO 19627
// end ; _chassis := AvailableChassisList ( factory ) ;
19215: LD_ADDR_VAR 0 9
19219: PUSH
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 475
19229: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19230: LD_ADDR_VAR 0 11
19234: PUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 476
19244: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19245: LD_ADDR_VAR 0 12
19249: PUSH
19250: LD_VAR 0 1
19254: PPUSH
19255: CALL_OW 477
19259: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19260: LD_ADDR_VAR 0 10
19264: PUSH
19265: LD_VAR 0 1
19269: PPUSH
19270: CALL_OW 478
19274: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19275: LD_VAR 0 9
19279: NOT
19280: PUSH
19281: LD_VAR 0 11
19285: NOT
19286: OR
19287: PUSH
19288: LD_VAR 0 12
19292: NOT
19293: OR
19294: PUSH
19295: LD_VAR 0 10
19299: NOT
19300: OR
19301: IFFALSE 19336
// begin result := [ chassis , engine , control , weapon ] ;
19303: LD_ADDR_VAR 0 6
19307: PUSH
19308: LD_VAR 0 2
19312: PUSH
19313: LD_VAR 0 3
19317: PUSH
19318: LD_VAR 0 4
19322: PUSH
19323: LD_VAR 0 5
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: ST_TO_ADDR
// exit ;
19334: GO 19627
// end ; if not chassis in _chassis then
19336: LD_VAR 0 2
19340: PUSH
19341: LD_VAR 0 9
19345: IN
19346: NOT
19347: IFFALSE 19373
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19349: LD_ADDR_VAR 0 2
19353: PUSH
19354: LD_VAR 0 9
19358: PUSH
19359: LD_INT 1
19361: PPUSH
19362: LD_VAR 0 9
19366: PPUSH
19367: CALL_OW 12
19371: ARRAY
19372: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19373: LD_VAR 0 2
19377: PPUSH
19378: LD_VAR 0 3
19382: PPUSH
19383: CALL 19632 0 2
19387: NOT
19388: IFFALSE 19447
// repeat engine := _engine [ 1 ] ;
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: LD_VAR 0 11
19399: PUSH
19400: LD_INT 1
19402: ARRAY
19403: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19404: LD_ADDR_VAR 0 11
19408: PUSH
19409: LD_VAR 0 11
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 3
19421: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19422: LD_VAR 0 2
19426: PPUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL 19632 0 2
19436: PUSH
19437: LD_VAR 0 11
19441: PUSH
19442: EMPTY
19443: EQUAL
19444: OR
19445: IFFALSE 19390
// if not control in _control then
19447: LD_VAR 0 4
19451: PUSH
19452: LD_VAR 0 12
19456: IN
19457: NOT
19458: IFFALSE 19484
// control := _control [ rand ( 1 , _control ) ] ;
19460: LD_ADDR_VAR 0 4
19464: PUSH
19465: LD_VAR 0 12
19469: PUSH
19470: LD_INT 1
19472: PPUSH
19473: LD_VAR 0 12
19477: PPUSH
19478: CALL_OW 12
19482: ARRAY
19483: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19484: LD_VAR 0 2
19488: PPUSH
19489: LD_VAR 0 5
19493: PPUSH
19494: CALL 19852 0 2
19498: NOT
19499: IFFALSE 19558
// repeat weapon := _weapon [ 1 ] ;
19501: LD_ADDR_VAR 0 5
19505: PUSH
19506: LD_VAR 0 10
19510: PUSH
19511: LD_INT 1
19513: ARRAY
19514: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19515: LD_ADDR_VAR 0 10
19519: PUSH
19520: LD_VAR 0 10
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 3
19532: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19533: LD_VAR 0 2
19537: PPUSH
19538: LD_VAR 0 5
19542: PPUSH
19543: CALL 19852 0 2
19547: PUSH
19548: LD_VAR 0 10
19552: PUSH
19553: EMPTY
19554: EQUAL
19555: OR
19556: IFFALSE 19501
// result := [ ] ;
19558: LD_ADDR_VAR 0 6
19562: PUSH
19563: EMPTY
19564: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19565: LD_VAR 0 1
19569: PPUSH
19570: LD_VAR 0 2
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_VAR 0 4
19584: PPUSH
19585: LD_VAR 0 5
19589: PPUSH
19590: CALL_OW 448
19594: IFFALSE 19627
// result := [ chassis , engine , control , weapon ] ;
19596: LD_ADDR_VAR 0 6
19600: PUSH
19601: LD_VAR 0 2
19605: PUSH
19606: LD_VAR 0 3
19610: PUSH
19611: LD_VAR 0 4
19615: PUSH
19616: LD_VAR 0 5
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: ST_TO_ADDR
// end ;
19627: LD_VAR 0 6
19631: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19632: LD_INT 0
19634: PPUSH
// if not chassis or not engine then
19635: LD_VAR 0 1
19639: NOT
19640: PUSH
19641: LD_VAR 0 2
19645: NOT
19646: OR
19647: IFFALSE 19651
// exit ;
19649: GO 19847
// case engine of engine_solar :
19651: LD_VAR 0 2
19655: PUSH
19656: LD_INT 2
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19702
19664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19665: LD_ADDR_VAR 0 3
19669: PUSH
19670: LD_INT 11
19672: PUSH
19673: LD_INT 12
19675: PUSH
19676: LD_INT 13
19678: PUSH
19679: LD_INT 14
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: ST_TO_ADDR
19700: GO 19831
19702: LD_INT 1
19704: DOUBLE
19705: EQUAL
19706: IFTRUE 19710
19708: GO 19772
19710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19711: LD_ADDR_VAR 0 3
19715: PUSH
19716: LD_INT 11
19718: PUSH
19719: LD_INT 12
19721: PUSH
19722: LD_INT 13
19724: PUSH
19725: LD_INT 14
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: LD_INT 3
19736: PUSH
19737: LD_INT 4
19739: PUSH
19740: LD_INT 5
19742: PUSH
19743: LD_INT 21
19745: PUSH
19746: LD_INT 23
19748: PUSH
19749: LD_INT 22
19751: PUSH
19752: LD_INT 24
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: ST_TO_ADDR
19770: GO 19831
19772: LD_INT 3
19774: DOUBLE
19775: EQUAL
19776: IFTRUE 19780
19778: GO 19830
19780: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: LD_INT 13
19788: PUSH
19789: LD_INT 14
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 4
19800: PUSH
19801: LD_INT 5
19803: PUSH
19804: LD_INT 21
19806: PUSH
19807: LD_INT 22
19809: PUSH
19810: LD_INT 23
19812: PUSH
19813: LD_INT 24
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: ST_TO_ADDR
19828: GO 19831
19830: POP
// result := ( chassis in result ) ;
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_VAR 0 1
19840: PUSH
19841: LD_VAR 0 3
19845: IN
19846: ST_TO_ADDR
// end ;
19847: LD_VAR 0 3
19851: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19852: LD_INT 0
19854: PPUSH
// if not chassis or not weapon then
19855: LD_VAR 0 1
19859: NOT
19860: PUSH
19861: LD_VAR 0 2
19865: NOT
19866: OR
19867: IFFALSE 19871
// exit ;
19869: GO 20931
// case weapon of us_machine_gun :
19871: LD_VAR 0 2
19875: PUSH
19876: LD_INT 2
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19914
19884: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19885: LD_ADDR_VAR 0 3
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: LD_INT 4
19901: PUSH
19902: LD_INT 5
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: ST_TO_ADDR
19912: GO 20915
19914: LD_INT 3
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19952
19922: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19923: LD_ADDR_VAR 0 3
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 3
19936: PUSH
19937: LD_INT 4
19939: PUSH
19940: LD_INT 5
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: ST_TO_ADDR
19950: GO 20915
19952: LD_INT 11
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19990
19960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19961: LD_ADDR_VAR 0 3
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: LD_INT 4
19977: PUSH
19978: LD_INT 5
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: ST_TO_ADDR
19988: GO 20915
19990: LD_INT 4
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20024
19998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 3
20009: PUSH
20010: LD_INT 4
20012: PUSH
20013: LD_INT 5
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: ST_TO_ADDR
20022: GO 20915
20024: LD_INT 5
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20058
20032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20033: LD_ADDR_VAR 0 3
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: LD_INT 4
20046: PUSH
20047: LD_INT 5
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: ST_TO_ADDR
20056: GO 20915
20058: LD_INT 9
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20092
20066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20067: LD_ADDR_VAR 0 3
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: LD_INT 3
20077: PUSH
20078: LD_INT 4
20080: PUSH
20081: LD_INT 5
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
20090: GO 20915
20092: LD_INT 7
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20126
20100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20101: LD_ADDR_VAR 0 3
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: LD_INT 3
20111: PUSH
20112: LD_INT 4
20114: PUSH
20115: LD_INT 5
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: ST_TO_ADDR
20124: GO 20915
20126: LD_INT 12
20128: DOUBLE
20129: EQUAL
20130: IFTRUE 20134
20132: GO 20160
20134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20135: LD_ADDR_VAR 0 3
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 4
20148: PUSH
20149: LD_INT 5
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: ST_TO_ADDR
20158: GO 20915
20160: LD_INT 13
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20194
20168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20169: LD_ADDR_VAR 0 3
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 3
20179: PUSH
20180: LD_INT 4
20182: PUSH
20183: LD_INT 5
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: ST_TO_ADDR
20192: GO 20915
20194: LD_INT 14
20196: DOUBLE
20197: EQUAL
20198: IFTRUE 20202
20200: GO 20220
20202: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20203: LD_ADDR_VAR 0 3
20207: PUSH
20208: LD_INT 4
20210: PUSH
20211: LD_INT 5
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: ST_TO_ADDR
20218: GO 20915
20220: LD_INT 6
20222: DOUBLE
20223: EQUAL
20224: IFTRUE 20228
20226: GO 20246
20228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20229: LD_ADDR_VAR 0 3
20233: PUSH
20234: LD_INT 4
20236: PUSH
20237: LD_INT 5
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: ST_TO_ADDR
20244: GO 20915
20246: LD_INT 10
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20272
20254: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20255: LD_ADDR_VAR 0 3
20259: PUSH
20260: LD_INT 4
20262: PUSH
20263: LD_INT 5
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: ST_TO_ADDR
20270: GO 20915
20272: LD_INT 22
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20306
20280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20281: LD_ADDR_VAR 0 3
20285: PUSH
20286: LD_INT 11
20288: PUSH
20289: LD_INT 12
20291: PUSH
20292: LD_INT 13
20294: PUSH
20295: LD_INT 14
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: ST_TO_ADDR
20304: GO 20915
20306: LD_INT 23
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20340
20314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20315: LD_ADDR_VAR 0 3
20319: PUSH
20320: LD_INT 11
20322: PUSH
20323: LD_INT 12
20325: PUSH
20326: LD_INT 13
20328: PUSH
20329: LD_INT 14
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: ST_TO_ADDR
20338: GO 20915
20340: LD_INT 24
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20374
20348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20349: LD_ADDR_VAR 0 3
20353: PUSH
20354: LD_INT 11
20356: PUSH
20357: LD_INT 12
20359: PUSH
20360: LD_INT 13
20362: PUSH
20363: LD_INT 14
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: ST_TO_ADDR
20372: GO 20915
20374: LD_INT 30
20376: DOUBLE
20377: EQUAL
20378: IFTRUE 20382
20380: GO 20408
20382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20383: LD_ADDR_VAR 0 3
20387: PUSH
20388: LD_INT 11
20390: PUSH
20391: LD_INT 12
20393: PUSH
20394: LD_INT 13
20396: PUSH
20397: LD_INT 14
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: ST_TO_ADDR
20406: GO 20915
20408: LD_INT 25
20410: DOUBLE
20411: EQUAL
20412: IFTRUE 20416
20414: GO 20434
20416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20417: LD_ADDR_VAR 0 3
20421: PUSH
20422: LD_INT 13
20424: PUSH
20425: LD_INT 14
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: ST_TO_ADDR
20432: GO 20915
20434: LD_INT 27
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20460
20442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_INT 13
20450: PUSH
20451: LD_INT 14
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 20915
20460: LD_INT 92
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20494
20468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_INT 11
20476: PUSH
20477: LD_INT 12
20479: PUSH
20480: LD_INT 13
20482: PUSH
20483: LD_INT 14
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: ST_TO_ADDR
20492: GO 20915
20494: LD_INT 28
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20520
20502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20503: LD_ADDR_VAR 0 3
20507: PUSH
20508: LD_INT 13
20510: PUSH
20511: LD_INT 14
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: ST_TO_ADDR
20518: GO 20915
20520: LD_INT 29
20522: DOUBLE
20523: EQUAL
20524: IFTRUE 20528
20526: GO 20546
20528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20529: LD_ADDR_VAR 0 3
20533: PUSH
20534: LD_INT 13
20536: PUSH
20537: LD_INT 14
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: ST_TO_ADDR
20544: GO 20915
20546: LD_INT 31
20548: DOUBLE
20549: EQUAL
20550: IFTRUE 20554
20552: GO 20572
20554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20555: LD_ADDR_VAR 0 3
20559: PUSH
20560: LD_INT 13
20562: PUSH
20563: LD_INT 14
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: ST_TO_ADDR
20570: GO 20915
20572: LD_INT 26
20574: DOUBLE
20575: EQUAL
20576: IFTRUE 20580
20578: GO 20598
20580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20581: LD_ADDR_VAR 0 3
20585: PUSH
20586: LD_INT 13
20588: PUSH
20589: LD_INT 14
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: ST_TO_ADDR
20596: GO 20915
20598: LD_INT 42
20600: DOUBLE
20601: EQUAL
20602: IFTRUE 20606
20604: GO 20632
20606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20607: LD_ADDR_VAR 0 3
20611: PUSH
20612: LD_INT 21
20614: PUSH
20615: LD_INT 22
20617: PUSH
20618: LD_INT 23
20620: PUSH
20621: LD_INT 24
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: ST_TO_ADDR
20630: GO 20915
20632: LD_INT 43
20634: DOUBLE
20635: EQUAL
20636: IFTRUE 20640
20638: GO 20666
20640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20641: LD_ADDR_VAR 0 3
20645: PUSH
20646: LD_INT 21
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_INT 23
20654: PUSH
20655: LD_INT 24
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: ST_TO_ADDR
20664: GO 20915
20666: LD_INT 44
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20700
20674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20675: LD_ADDR_VAR 0 3
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_INT 23
20688: PUSH
20689: LD_INT 24
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: ST_TO_ADDR
20698: GO 20915
20700: LD_INT 45
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20734
20708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: LD_INT 21
20716: PUSH
20717: LD_INT 22
20719: PUSH
20720: LD_INT 23
20722: PUSH
20723: LD_INT 24
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: ST_TO_ADDR
20732: GO 20915
20734: LD_INT 49
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20768
20742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20743: LD_ADDR_VAR 0 3
20747: PUSH
20748: LD_INT 21
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 23
20756: PUSH
20757: LD_INT 24
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: ST_TO_ADDR
20766: GO 20915
20768: LD_INT 51
20770: DOUBLE
20771: EQUAL
20772: IFTRUE 20776
20774: GO 20802
20776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20777: LD_ADDR_VAR 0 3
20781: PUSH
20782: LD_INT 21
20784: PUSH
20785: LD_INT 22
20787: PUSH
20788: LD_INT 23
20790: PUSH
20791: LD_INT 24
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: ST_TO_ADDR
20800: GO 20915
20802: LD_INT 52
20804: DOUBLE
20805: EQUAL
20806: IFTRUE 20810
20808: GO 20836
20810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20811: LD_ADDR_VAR 0 3
20815: PUSH
20816: LD_INT 21
20818: PUSH
20819: LD_INT 22
20821: PUSH
20822: LD_INT 23
20824: PUSH
20825: LD_INT 24
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: ST_TO_ADDR
20834: GO 20915
20836: LD_INT 53
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20862
20844: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 23
20852: PUSH
20853: LD_INT 24
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: ST_TO_ADDR
20860: GO 20915
20862: LD_INT 46
20864: DOUBLE
20865: EQUAL
20866: IFTRUE 20870
20868: GO 20888
20870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_INT 23
20878: PUSH
20879: LD_INT 24
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: ST_TO_ADDR
20886: GO 20915
20888: LD_INT 47
20890: DOUBLE
20891: EQUAL
20892: IFTRUE 20896
20894: GO 20914
20896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20897: LD_ADDR_VAR 0 3
20901: PUSH
20902: LD_INT 23
20904: PUSH
20905: LD_INT 24
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: ST_TO_ADDR
20912: GO 20915
20914: POP
// result := ( chassis in result ) ;
20915: LD_ADDR_VAR 0 3
20919: PUSH
20920: LD_VAR 0 1
20924: PUSH
20925: LD_VAR 0 3
20929: IN
20930: ST_TO_ADDR
// end ;
20931: LD_VAR 0 3
20935: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20936: LD_INT 0
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
// result := array ;
20945: LD_ADDR_VAR 0 5
20949: PUSH
20950: LD_VAR 0 1
20954: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20955: LD_VAR 0 1
20959: NOT
20960: PUSH
20961: LD_VAR 0 2
20965: NOT
20966: OR
20967: PUSH
20968: LD_VAR 0 3
20972: NOT
20973: OR
20974: PUSH
20975: LD_VAR 0 2
20979: PUSH
20980: LD_VAR 0 1
20984: GREATER
20985: OR
20986: PUSH
20987: LD_VAR 0 3
20991: PUSH
20992: LD_VAR 0 1
20996: GREATER
20997: OR
20998: IFFALSE 21002
// exit ;
21000: GO 21298
// if direction then
21002: LD_VAR 0 4
21006: IFFALSE 21070
// begin d := 1 ;
21008: LD_ADDR_VAR 0 9
21012: PUSH
21013: LD_INT 1
21015: ST_TO_ADDR
// if i_from > i_to then
21016: LD_VAR 0 2
21020: PUSH
21021: LD_VAR 0 3
21025: GREATER
21026: IFFALSE 21052
// length := ( array - i_from ) + i_to else
21028: LD_ADDR_VAR 0 11
21032: PUSH
21033: LD_VAR 0 1
21037: PUSH
21038: LD_VAR 0 2
21042: MINUS
21043: PUSH
21044: LD_VAR 0 3
21048: PLUS
21049: ST_TO_ADDR
21050: GO 21068
// length := i_to - i_from ;
21052: LD_ADDR_VAR 0 11
21056: PUSH
21057: LD_VAR 0 3
21061: PUSH
21062: LD_VAR 0 2
21066: MINUS
21067: ST_TO_ADDR
// end else
21068: GO 21131
// begin d := - 1 ;
21070: LD_ADDR_VAR 0 9
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: ST_TO_ADDR
// if i_from > i_to then
21079: LD_VAR 0 2
21083: PUSH
21084: LD_VAR 0 3
21088: GREATER
21089: IFFALSE 21109
// length := i_from - i_to else
21091: LD_ADDR_VAR 0 11
21095: PUSH
21096: LD_VAR 0 2
21100: PUSH
21101: LD_VAR 0 3
21105: MINUS
21106: ST_TO_ADDR
21107: GO 21131
// length := ( array - i_to ) + i_from ;
21109: LD_ADDR_VAR 0 11
21113: PUSH
21114: LD_VAR 0 1
21118: PUSH
21119: LD_VAR 0 3
21123: MINUS
21124: PUSH
21125: LD_VAR 0 2
21129: PLUS
21130: ST_TO_ADDR
// end ; if not length then
21131: LD_VAR 0 11
21135: NOT
21136: IFFALSE 21140
// exit ;
21138: GO 21298
// tmp := array ;
21140: LD_ADDR_VAR 0 10
21144: PUSH
21145: LD_VAR 0 1
21149: ST_TO_ADDR
// for i = 1 to length do
21150: LD_ADDR_VAR 0 6
21154: PUSH
21155: DOUBLE
21156: LD_INT 1
21158: DEC
21159: ST_TO_ADDR
21160: LD_VAR 0 11
21164: PUSH
21165: FOR_TO
21166: IFFALSE 21286
// begin for j = 1 to array do
21168: LD_ADDR_VAR 0 7
21172: PUSH
21173: DOUBLE
21174: LD_INT 1
21176: DEC
21177: ST_TO_ADDR
21178: LD_VAR 0 1
21182: PUSH
21183: FOR_TO
21184: IFFALSE 21272
// begin k := j + d ;
21186: LD_ADDR_VAR 0 8
21190: PUSH
21191: LD_VAR 0 7
21195: PUSH
21196: LD_VAR 0 9
21200: PLUS
21201: ST_TO_ADDR
// if k > array then
21202: LD_VAR 0 8
21206: PUSH
21207: LD_VAR 0 1
21211: GREATER
21212: IFFALSE 21222
// k := 1 ;
21214: LD_ADDR_VAR 0 8
21218: PUSH
21219: LD_INT 1
21221: ST_TO_ADDR
// if not k then
21222: LD_VAR 0 8
21226: NOT
21227: IFFALSE 21239
// k := array ;
21229: LD_ADDR_VAR 0 8
21233: PUSH
21234: LD_VAR 0 1
21238: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21239: LD_ADDR_VAR 0 10
21243: PUSH
21244: LD_VAR 0 10
21248: PPUSH
21249: LD_VAR 0 8
21253: PPUSH
21254: LD_VAR 0 1
21258: PUSH
21259: LD_VAR 0 7
21263: ARRAY
21264: PPUSH
21265: CALL_OW 1
21269: ST_TO_ADDR
// end ;
21270: GO 21183
21272: POP
21273: POP
// array := tmp ;
21274: LD_ADDR_VAR 0 1
21278: PUSH
21279: LD_VAR 0 10
21283: ST_TO_ADDR
// end ;
21284: GO 21165
21286: POP
21287: POP
// result := array ;
21288: LD_ADDR_VAR 0 5
21292: PUSH
21293: LD_VAR 0 1
21297: ST_TO_ADDR
// end ;
21298: LD_VAR 0 5
21302: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21303: LD_INT 0
21305: PPUSH
21306: PPUSH
// result := 0 ;
21307: LD_ADDR_VAR 0 3
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
// if not array or not value in array then
21315: LD_VAR 0 1
21319: NOT
21320: PUSH
21321: LD_VAR 0 2
21325: PUSH
21326: LD_VAR 0 1
21330: IN
21331: NOT
21332: OR
21333: IFFALSE 21337
// exit ;
21335: GO 21391
// for i = 1 to array do
21337: LD_ADDR_VAR 0 4
21341: PUSH
21342: DOUBLE
21343: LD_INT 1
21345: DEC
21346: ST_TO_ADDR
21347: LD_VAR 0 1
21351: PUSH
21352: FOR_TO
21353: IFFALSE 21389
// if value = array [ i ] then
21355: LD_VAR 0 2
21359: PUSH
21360: LD_VAR 0 1
21364: PUSH
21365: LD_VAR 0 4
21369: ARRAY
21370: EQUAL
21371: IFFALSE 21387
// begin result := i ;
21373: LD_ADDR_VAR 0 3
21377: PUSH
21378: LD_VAR 0 4
21382: ST_TO_ADDR
// exit ;
21383: POP
21384: POP
21385: GO 21391
// end ;
21387: GO 21352
21389: POP
21390: POP
// end ;
21391: LD_VAR 0 3
21395: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21396: LD_INT 0
21398: PPUSH
// vc_chassis := chassis ;
21399: LD_ADDR_OWVAR 37
21403: PUSH
21404: LD_VAR 0 1
21408: ST_TO_ADDR
// vc_engine := engine ;
21409: LD_ADDR_OWVAR 39
21413: PUSH
21414: LD_VAR 0 2
21418: ST_TO_ADDR
// vc_control := control ;
21419: LD_ADDR_OWVAR 38
21423: PUSH
21424: LD_VAR 0 3
21428: ST_TO_ADDR
// vc_weapon := weapon ;
21429: LD_ADDR_OWVAR 40
21433: PUSH
21434: LD_VAR 0 4
21438: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21439: LD_ADDR_OWVAR 41
21443: PUSH
21444: LD_VAR 0 5
21448: ST_TO_ADDR
// end ;
21449: LD_VAR 0 6
21453: RET
// export function WantPlant ( unit ) ; var task ; begin
21454: LD_INT 0
21456: PPUSH
21457: PPUSH
// result := false ;
21458: LD_ADDR_VAR 0 2
21462: PUSH
21463: LD_INT 0
21465: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_VAR 0 1
21475: PPUSH
21476: CALL_OW 437
21480: ST_TO_ADDR
// if task then
21481: LD_VAR 0 3
21485: IFFALSE 21513
// if task [ 1 ] [ 1 ] = p then
21487: LD_VAR 0 3
21491: PUSH
21492: LD_INT 1
21494: ARRAY
21495: PUSH
21496: LD_INT 1
21498: ARRAY
21499: PUSH
21500: LD_STRING p
21502: EQUAL
21503: IFFALSE 21513
// result := true ;
21505: LD_ADDR_VAR 0 2
21509: PUSH
21510: LD_INT 1
21512: ST_TO_ADDR
// end ;
21513: LD_VAR 0 2
21517: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21518: LD_INT 0
21520: PPUSH
21521: PPUSH
21522: PPUSH
21523: PPUSH
// if pos < 1 then
21524: LD_VAR 0 2
21528: PUSH
21529: LD_INT 1
21531: LESS
21532: IFFALSE 21536
// exit ;
21534: GO 21839
// if pos = 1 then
21536: LD_VAR 0 2
21540: PUSH
21541: LD_INT 1
21543: EQUAL
21544: IFFALSE 21577
// result := Replace ( arr , pos [ 1 ] , value ) else
21546: LD_ADDR_VAR 0 4
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: LD_VAR 0 2
21560: PUSH
21561: LD_INT 1
21563: ARRAY
21564: PPUSH
21565: LD_VAR 0 3
21569: PPUSH
21570: CALL_OW 1
21574: ST_TO_ADDR
21575: GO 21839
// begin tmp := arr ;
21577: LD_ADDR_VAR 0 6
21581: PUSH
21582: LD_VAR 0 1
21586: ST_TO_ADDR
// s_arr := [ tmp ] ;
21587: LD_ADDR_VAR 0 7
21591: PUSH
21592: LD_VAR 0 6
21596: PUSH
21597: EMPTY
21598: LIST
21599: ST_TO_ADDR
// for i = 1 to pos - 1 do
21600: LD_ADDR_VAR 0 5
21604: PUSH
21605: DOUBLE
21606: LD_INT 1
21608: DEC
21609: ST_TO_ADDR
21610: LD_VAR 0 2
21614: PUSH
21615: LD_INT 1
21617: MINUS
21618: PUSH
21619: FOR_TO
21620: IFFALSE 21665
// begin tmp := tmp [ pos [ i ] ] ;
21622: LD_ADDR_VAR 0 6
21626: PUSH
21627: LD_VAR 0 6
21631: PUSH
21632: LD_VAR 0 2
21636: PUSH
21637: LD_VAR 0 5
21641: ARRAY
21642: ARRAY
21643: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21644: LD_ADDR_VAR 0 7
21648: PUSH
21649: LD_VAR 0 7
21653: PUSH
21654: LD_VAR 0 6
21658: PUSH
21659: EMPTY
21660: LIST
21661: ADD
21662: ST_TO_ADDR
// end ;
21663: GO 21619
21665: POP
21666: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21667: LD_ADDR_VAR 0 6
21671: PUSH
21672: LD_VAR 0 6
21676: PPUSH
21677: LD_VAR 0 2
21681: PUSH
21682: LD_VAR 0 2
21686: ARRAY
21687: PPUSH
21688: LD_VAR 0 3
21692: PPUSH
21693: CALL_OW 1
21697: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21698: LD_ADDR_VAR 0 7
21702: PUSH
21703: LD_VAR 0 7
21707: PPUSH
21708: LD_VAR 0 7
21712: PPUSH
21713: LD_VAR 0 6
21717: PPUSH
21718: CALL_OW 1
21722: ST_TO_ADDR
// for i = s_arr downto 2 do
21723: LD_ADDR_VAR 0 5
21727: PUSH
21728: DOUBLE
21729: LD_VAR 0 7
21733: INC
21734: ST_TO_ADDR
21735: LD_INT 2
21737: PUSH
21738: FOR_DOWNTO
21739: IFFALSE 21823
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21741: LD_ADDR_VAR 0 6
21745: PUSH
21746: LD_VAR 0 7
21750: PUSH
21751: LD_VAR 0 5
21755: PUSH
21756: LD_INT 1
21758: MINUS
21759: ARRAY
21760: PPUSH
21761: LD_VAR 0 2
21765: PUSH
21766: LD_VAR 0 5
21770: PUSH
21771: LD_INT 1
21773: MINUS
21774: ARRAY
21775: PPUSH
21776: LD_VAR 0 7
21780: PUSH
21781: LD_VAR 0 5
21785: ARRAY
21786: PPUSH
21787: CALL_OW 1
21791: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21792: LD_ADDR_VAR 0 7
21796: PUSH
21797: LD_VAR 0 7
21801: PPUSH
21802: LD_VAR 0 5
21806: PUSH
21807: LD_INT 1
21809: MINUS
21810: PPUSH
21811: LD_VAR 0 6
21815: PPUSH
21816: CALL_OW 1
21820: ST_TO_ADDR
// end ;
21821: GO 21738
21823: POP
21824: POP
// result := s_arr [ 1 ] ;
21825: LD_ADDR_VAR 0 4
21829: PUSH
21830: LD_VAR 0 7
21834: PUSH
21835: LD_INT 1
21837: ARRAY
21838: ST_TO_ADDR
// end ; end ;
21839: LD_VAR 0 4
21843: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21844: LD_INT 0
21846: PPUSH
21847: PPUSH
// if not list then
21848: LD_VAR 0 1
21852: NOT
21853: IFFALSE 21857
// exit ;
21855: GO 21948
// i := list [ pos1 ] ;
21857: LD_ADDR_VAR 0 5
21861: PUSH
21862: LD_VAR 0 1
21866: PUSH
21867: LD_VAR 0 2
21871: ARRAY
21872: ST_TO_ADDR
// if not i then
21873: LD_VAR 0 5
21877: NOT
21878: IFFALSE 21882
// exit ;
21880: GO 21948
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21882: LD_ADDR_VAR 0 1
21886: PUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_VAR 0 1
21901: PUSH
21902: LD_VAR 0 3
21906: ARRAY
21907: PPUSH
21908: CALL_OW 1
21912: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21913: LD_ADDR_VAR 0 1
21917: PUSH
21918: LD_VAR 0 1
21922: PPUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: LD_VAR 0 5
21932: PPUSH
21933: CALL_OW 1
21937: ST_TO_ADDR
// result := list ;
21938: LD_ADDR_VAR 0 4
21942: PUSH
21943: LD_VAR 0 1
21947: ST_TO_ADDR
// end ;
21948: LD_VAR 0 4
21952: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21953: LD_INT 0
21955: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21956: LD_ADDR_VAR 0 5
21960: PUSH
21961: LD_VAR 0 1
21965: PPUSH
21966: CALL_OW 250
21970: PPUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 251
21980: PPUSH
21981: LD_VAR 0 2
21985: PPUSH
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_VAR 0 4
21995: PPUSH
21996: CALL 22374 0 5
22000: ST_TO_ADDR
// end ;
22001: LD_VAR 0 5
22005: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22006: LD_INT 0
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
// if not list or not unit then
22012: LD_VAR 0 2
22016: NOT
22017: PUSH
22018: LD_VAR 0 1
22022: NOT
22023: OR
22024: IFFALSE 22028
// exit ;
22026: GO 22369
// result := [ ] ;
22028: LD_ADDR_VAR 0 5
22032: PUSH
22033: EMPTY
22034: ST_TO_ADDR
// for i in list do
22035: LD_ADDR_VAR 0 6
22039: PUSH
22040: LD_VAR 0 2
22044: PUSH
22045: FOR_IN
22046: IFFALSE 22264
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22048: LD_ADDR_VAR 0 8
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: LD_VAR 0 6
22062: PUSH
22063: LD_INT 1
22065: ARRAY
22066: PPUSH
22067: LD_VAR 0 6
22071: PUSH
22072: LD_INT 2
22074: ARRAY
22075: PPUSH
22076: CALL_OW 297
22080: ST_TO_ADDR
// if not Count ( result ) then
22081: LD_VAR 0 5
22085: PPUSH
22086: CALL 18658 0 1
22090: NOT
22091: IFFALSE 22124
// begin result := Join ( result , [ i , tmp ] ) ;
22093: LD_ADDR_VAR 0 5
22097: PUSH
22098: LD_VAR 0 5
22102: PPUSH
22103: LD_VAR 0 6
22107: PUSH
22108: LD_VAR 0 8
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL 54267 0 2
22121: ST_TO_ADDR
// continue ;
22122: GO 22045
// end ; if result [ result ] [ 2 ] <= tmp then
22124: LD_VAR 0 5
22128: PUSH
22129: LD_VAR 0 5
22133: ARRAY
22134: PUSH
22135: LD_INT 2
22137: ARRAY
22138: PUSH
22139: LD_VAR 0 8
22143: LESSEQUAL
22144: IFFALSE 22177
// result := Join ( result , [ i , tmp ] ) else
22146: LD_ADDR_VAR 0 5
22150: PUSH
22151: LD_VAR 0 5
22155: PPUSH
22156: LD_VAR 0 6
22160: PUSH
22161: LD_VAR 0 8
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PPUSH
22170: CALL 54267 0 2
22174: ST_TO_ADDR
22175: GO 22262
// begin for j := 1 to Count ( result ) do
22177: LD_ADDR_VAR 0 7
22181: PUSH
22182: DOUBLE
22183: LD_INT 1
22185: DEC
22186: ST_TO_ADDR
22187: LD_VAR 0 5
22191: PPUSH
22192: CALL 18658 0 1
22196: PUSH
22197: FOR_TO
22198: IFFALSE 22260
// begin if tmp < result [ j ] [ 2 ] then
22200: LD_VAR 0 8
22204: PUSH
22205: LD_VAR 0 5
22209: PUSH
22210: LD_VAR 0 7
22214: ARRAY
22215: PUSH
22216: LD_INT 2
22218: ARRAY
22219: LESS
22220: IFFALSE 22258
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22222: LD_ADDR_VAR 0 5
22226: PUSH
22227: LD_VAR 0 5
22231: PPUSH
22232: LD_VAR 0 7
22236: PPUSH
22237: LD_VAR 0 6
22241: PUSH
22242: LD_VAR 0 8
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PPUSH
22251: CALL_OW 2
22255: ST_TO_ADDR
// break ;
22256: GO 22260
// end ; end ;
22258: GO 22197
22260: POP
22261: POP
// end ; end ;
22262: GO 22045
22264: POP
22265: POP
// if result and not asc then
22266: LD_VAR 0 5
22270: PUSH
22271: LD_VAR 0 3
22275: NOT
22276: AND
22277: IFFALSE 22294
// result := ReverseArray ( result ) ;
22279: LD_ADDR_VAR 0 5
22283: PUSH
22284: LD_VAR 0 5
22288: PPUSH
22289: CALL 49534 0 1
22293: ST_TO_ADDR
// tmp := [ ] ;
22294: LD_ADDR_VAR 0 8
22298: PUSH
22299: EMPTY
22300: ST_TO_ADDR
// if mode then
22301: LD_VAR 0 4
22305: IFFALSE 22369
// begin for i := 1 to result do
22307: LD_ADDR_VAR 0 6
22311: PUSH
22312: DOUBLE
22313: LD_INT 1
22315: DEC
22316: ST_TO_ADDR
22317: LD_VAR 0 5
22321: PUSH
22322: FOR_TO
22323: IFFALSE 22357
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22325: LD_ADDR_VAR 0 8
22329: PUSH
22330: LD_VAR 0 8
22334: PPUSH
22335: LD_VAR 0 5
22339: PUSH
22340: LD_VAR 0 6
22344: ARRAY
22345: PUSH
22346: LD_INT 1
22348: ARRAY
22349: PPUSH
22350: CALL 54267 0 2
22354: ST_TO_ADDR
22355: GO 22322
22357: POP
22358: POP
// result := tmp ;
22359: LD_ADDR_VAR 0 5
22363: PUSH
22364: LD_VAR 0 8
22368: ST_TO_ADDR
// end ; end ;
22369: LD_VAR 0 5
22373: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22374: LD_INT 0
22376: PPUSH
22377: PPUSH
22378: PPUSH
22379: PPUSH
// if not list then
22380: LD_VAR 0 3
22384: NOT
22385: IFFALSE 22389
// exit ;
22387: GO 22777
// result := [ ] ;
22389: LD_ADDR_VAR 0 6
22393: PUSH
22394: EMPTY
22395: ST_TO_ADDR
// for i in list do
22396: LD_ADDR_VAR 0 7
22400: PUSH
22401: LD_VAR 0 3
22405: PUSH
22406: FOR_IN
22407: IFFALSE 22609
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22409: LD_ADDR_VAR 0 9
22413: PUSH
22414: LD_VAR 0 7
22418: PPUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: LD_VAR 0 2
22428: PPUSH
22429: CALL_OW 297
22433: ST_TO_ADDR
// if not result then
22434: LD_VAR 0 6
22438: NOT
22439: IFFALSE 22465
// result := [ [ i , tmp ] ] else
22441: LD_ADDR_VAR 0 6
22445: PUSH
22446: LD_VAR 0 7
22450: PUSH
22451: LD_VAR 0 9
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: ST_TO_ADDR
22463: GO 22607
// begin if result [ result ] [ 2 ] <= tmp then
22465: LD_VAR 0 6
22469: PUSH
22470: LD_VAR 0 6
22474: ARRAY
22475: PUSH
22476: LD_INT 2
22478: ARRAY
22479: PUSH
22480: LD_VAR 0 9
22484: LESSEQUAL
22485: IFFALSE 22527
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22487: LD_ADDR_VAR 0 6
22491: PUSH
22492: LD_VAR 0 6
22496: PPUSH
22497: LD_VAR 0 6
22501: PUSH
22502: LD_INT 1
22504: PLUS
22505: PPUSH
22506: LD_VAR 0 7
22510: PUSH
22511: LD_VAR 0 9
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PPUSH
22520: CALL_OW 2
22524: ST_TO_ADDR
22525: GO 22607
// for j := 1 to result do
22527: LD_ADDR_VAR 0 8
22531: PUSH
22532: DOUBLE
22533: LD_INT 1
22535: DEC
22536: ST_TO_ADDR
22537: LD_VAR 0 6
22541: PUSH
22542: FOR_TO
22543: IFFALSE 22605
// begin if tmp < result [ j ] [ 2 ] then
22545: LD_VAR 0 9
22549: PUSH
22550: LD_VAR 0 6
22554: PUSH
22555: LD_VAR 0 8
22559: ARRAY
22560: PUSH
22561: LD_INT 2
22563: ARRAY
22564: LESS
22565: IFFALSE 22603
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22567: LD_ADDR_VAR 0 6
22571: PUSH
22572: LD_VAR 0 6
22576: PPUSH
22577: LD_VAR 0 8
22581: PPUSH
22582: LD_VAR 0 7
22586: PUSH
22587: LD_VAR 0 9
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PPUSH
22596: CALL_OW 2
22600: ST_TO_ADDR
// break ;
22601: GO 22605
// end ; end ;
22603: GO 22542
22605: POP
22606: POP
// end ; end ;
22607: GO 22406
22609: POP
22610: POP
// if result and not asc then
22611: LD_VAR 0 6
22615: PUSH
22616: LD_VAR 0 4
22620: NOT
22621: AND
22622: IFFALSE 22697
// begin tmp := result ;
22624: LD_ADDR_VAR 0 9
22628: PUSH
22629: LD_VAR 0 6
22633: ST_TO_ADDR
// for i = tmp downto 1 do
22634: LD_ADDR_VAR 0 7
22638: PUSH
22639: DOUBLE
22640: LD_VAR 0 9
22644: INC
22645: ST_TO_ADDR
22646: LD_INT 1
22648: PUSH
22649: FOR_DOWNTO
22650: IFFALSE 22695
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22652: LD_ADDR_VAR 0 6
22656: PUSH
22657: LD_VAR 0 6
22661: PPUSH
22662: LD_VAR 0 9
22666: PUSH
22667: LD_VAR 0 7
22671: MINUS
22672: PUSH
22673: LD_INT 1
22675: PLUS
22676: PPUSH
22677: LD_VAR 0 9
22681: PUSH
22682: LD_VAR 0 7
22686: ARRAY
22687: PPUSH
22688: CALL_OW 1
22692: ST_TO_ADDR
22693: GO 22649
22695: POP
22696: POP
// end ; tmp := [ ] ;
22697: LD_ADDR_VAR 0 9
22701: PUSH
22702: EMPTY
22703: ST_TO_ADDR
// if mode then
22704: LD_VAR 0 5
22708: IFFALSE 22777
// begin for i = 1 to result do
22710: LD_ADDR_VAR 0 7
22714: PUSH
22715: DOUBLE
22716: LD_INT 1
22718: DEC
22719: ST_TO_ADDR
22720: LD_VAR 0 6
22724: PUSH
22725: FOR_TO
22726: IFFALSE 22765
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22728: LD_ADDR_VAR 0 9
22732: PUSH
22733: LD_VAR 0 9
22737: PPUSH
22738: LD_VAR 0 7
22742: PPUSH
22743: LD_VAR 0 6
22747: PUSH
22748: LD_VAR 0 7
22752: ARRAY
22753: PUSH
22754: LD_INT 1
22756: ARRAY
22757: PPUSH
22758: CALL_OW 1
22762: ST_TO_ADDR
22763: GO 22725
22765: POP
22766: POP
// result := tmp ;
22767: LD_ADDR_VAR 0 6
22771: PUSH
22772: LD_VAR 0 9
22776: ST_TO_ADDR
// end ; end ;
22777: LD_VAR 0 6
22781: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22790: LD_ADDR_VAR 0 5
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: ST_TO_ADDR
// if not x or not y then
22812: LD_VAR 0 2
22816: NOT
22817: PUSH
22818: LD_VAR 0 3
22822: NOT
22823: OR
22824: IFFALSE 22828
// exit ;
22826: GO 24478
// if not range then
22828: LD_VAR 0 4
22832: NOT
22833: IFFALSE 22843
// range := 10 ;
22835: LD_ADDR_VAR 0 4
22839: PUSH
22840: LD_INT 10
22842: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22843: LD_ADDR_VAR 0 8
22847: PUSH
22848: LD_INT 81
22850: PUSH
22851: LD_VAR 0 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 92
22862: PUSH
22863: LD_VAR 0 2
22867: PUSH
22868: LD_VAR 0 3
22872: PUSH
22873: LD_VAR 0 4
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 21
22889: PUSH
22890: LD_INT 3
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: PPUSH
22906: CALL_OW 69
22910: ST_TO_ADDR
// if not tmp then
22911: LD_VAR 0 8
22915: NOT
22916: IFFALSE 22920
// exit ;
22918: GO 24478
// for i in tmp do
22920: LD_ADDR_VAR 0 6
22924: PUSH
22925: LD_VAR 0 8
22929: PUSH
22930: FOR_IN
22931: IFFALSE 24453
// begin points := [ 0 , 0 , 0 ] ;
22933: LD_ADDR_VAR 0 9
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: ST_TO_ADDR
// bpoints := 1 ;
22952: LD_ADDR_VAR 0 10
22956: PUSH
22957: LD_INT 1
22959: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22960: LD_VAR 0 6
22964: PPUSH
22965: CALL_OW 247
22969: PUSH
22970: LD_INT 1
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23556
22978: POP
// begin if GetClass ( i ) = 1 then
22979: LD_VAR 0 6
22983: PPUSH
22984: CALL_OW 257
22988: PUSH
22989: LD_INT 1
22991: EQUAL
22992: IFFALSE 23013
// points := [ 10 , 5 , 3 ] ;
22994: LD_ADDR_VAR 0 9
22998: PUSH
22999: LD_INT 10
23001: PUSH
23002: LD_INT 5
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23013: LD_VAR 0 6
23017: PPUSH
23018: CALL_OW 257
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: LD_INT 4
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: IN
23037: IFFALSE 23058
// points := [ 3 , 2 , 1 ] ;
23039: LD_ADDR_VAR 0 9
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23058: LD_VAR 0 6
23062: PPUSH
23063: CALL_OW 257
23067: PUSH
23068: LD_INT 5
23070: EQUAL
23071: IFFALSE 23092
// points := [ 130 , 5 , 2 ] ;
23073: LD_ADDR_VAR 0 9
23077: PUSH
23078: LD_INT 130
23080: PUSH
23081: LD_INT 5
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23092: LD_VAR 0 6
23096: PPUSH
23097: CALL_OW 257
23101: PUSH
23102: LD_INT 8
23104: EQUAL
23105: IFFALSE 23126
// points := [ 35 , 35 , 30 ] ;
23107: LD_ADDR_VAR 0 9
23111: PUSH
23112: LD_INT 35
23114: PUSH
23115: LD_INT 35
23117: PUSH
23118: LD_INT 30
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23126: LD_VAR 0 6
23130: PPUSH
23131: CALL_OW 257
23135: PUSH
23136: LD_INT 9
23138: EQUAL
23139: IFFALSE 23160
// points := [ 20 , 55 , 40 ] ;
23141: LD_ADDR_VAR 0 9
23145: PUSH
23146: LD_INT 20
23148: PUSH
23149: LD_INT 55
23151: PUSH
23152: LD_INT 40
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: LIST
23159: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23160: LD_VAR 0 6
23164: PPUSH
23165: CALL_OW 257
23169: PUSH
23170: LD_INT 12
23172: PUSH
23173: LD_INT 16
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: IN
23180: IFFALSE 23201
// points := [ 5 , 3 , 2 ] ;
23182: LD_ADDR_VAR 0 9
23186: PUSH
23187: LD_INT 5
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23201: LD_VAR 0 6
23205: PPUSH
23206: CALL_OW 257
23210: PUSH
23211: LD_INT 17
23213: EQUAL
23214: IFFALSE 23235
// points := [ 100 , 50 , 75 ] ;
23216: LD_ADDR_VAR 0 9
23220: PUSH
23221: LD_INT 100
23223: PUSH
23224: LD_INT 50
23226: PUSH
23227: LD_INT 75
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: LIST
23234: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23235: LD_VAR 0 6
23239: PPUSH
23240: CALL_OW 257
23244: PUSH
23245: LD_INT 15
23247: EQUAL
23248: IFFALSE 23269
// points := [ 10 , 5 , 3 ] ;
23250: LD_ADDR_VAR 0 9
23254: PUSH
23255: LD_INT 10
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: LD_INT 3
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23269: LD_VAR 0 6
23273: PPUSH
23274: CALL_OW 257
23278: PUSH
23279: LD_INT 14
23281: EQUAL
23282: IFFALSE 23303
// points := [ 10 , 0 , 0 ] ;
23284: LD_ADDR_VAR 0 9
23288: PUSH
23289: LD_INT 10
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23303: LD_VAR 0 6
23307: PPUSH
23308: CALL_OW 257
23312: PUSH
23313: LD_INT 11
23315: EQUAL
23316: IFFALSE 23337
// points := [ 30 , 10 , 5 ] ;
23318: LD_ADDR_VAR 0 9
23322: PUSH
23323: LD_INT 30
23325: PUSH
23326: LD_INT 10
23328: PUSH
23329: LD_INT 5
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23337: LD_VAR 0 1
23341: PPUSH
23342: LD_INT 5
23344: PPUSH
23345: CALL_OW 321
23349: PUSH
23350: LD_INT 2
23352: EQUAL
23353: IFFALSE 23370
// bpoints := bpoints * 1.8 ;
23355: LD_ADDR_VAR 0 10
23359: PUSH
23360: LD_VAR 0 10
23364: PUSH
23365: LD_REAL  1.80000000000000E+0000
23368: MUL
23369: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23370: LD_VAR 0 6
23374: PPUSH
23375: CALL_OW 257
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: LD_INT 4
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: IN
23398: PUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: LD_INT 51
23406: PPUSH
23407: CALL_OW 321
23411: PUSH
23412: LD_INT 2
23414: EQUAL
23415: AND
23416: IFFALSE 23433
// bpoints := bpoints * 1.2 ;
23418: LD_ADDR_VAR 0 10
23422: PUSH
23423: LD_VAR 0 10
23427: PUSH
23428: LD_REAL  1.20000000000000E+0000
23431: MUL
23432: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23433: LD_VAR 0 6
23437: PPUSH
23438: CALL_OW 257
23442: PUSH
23443: LD_INT 5
23445: PUSH
23446: LD_INT 7
23448: PUSH
23449: LD_INT 9
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: IN
23457: PUSH
23458: LD_VAR 0 1
23462: PPUSH
23463: LD_INT 52
23465: PPUSH
23466: CALL_OW 321
23470: PUSH
23471: LD_INT 2
23473: EQUAL
23474: AND
23475: IFFALSE 23492
// bpoints := bpoints * 1.5 ;
23477: LD_ADDR_VAR 0 10
23481: PUSH
23482: LD_VAR 0 10
23486: PUSH
23487: LD_REAL  1.50000000000000E+0000
23490: MUL
23491: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23492: LD_VAR 0 1
23496: PPUSH
23497: LD_INT 66
23499: PPUSH
23500: CALL_OW 321
23504: PUSH
23505: LD_INT 2
23507: EQUAL
23508: IFFALSE 23525
// bpoints := bpoints * 1.1 ;
23510: LD_ADDR_VAR 0 10
23514: PUSH
23515: LD_VAR 0 10
23519: PUSH
23520: LD_REAL  1.10000000000000E+0000
23523: MUL
23524: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23525: LD_ADDR_VAR 0 10
23529: PUSH
23530: LD_VAR 0 10
23534: PUSH
23535: LD_VAR 0 6
23539: PPUSH
23540: LD_INT 1
23542: PPUSH
23543: CALL_OW 259
23547: PUSH
23548: LD_REAL  1.15000000000000E+0000
23551: MUL
23552: MUL
23553: ST_TO_ADDR
// end ; unit_vehicle :
23554: GO 24382
23556: LD_INT 2
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23564
23562: GO 24370
23564: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23565: LD_VAR 0 6
23569: PPUSH
23570: CALL_OW 264
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: LD_INT 42
23580: PUSH
23581: LD_INT 24
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: IN
23589: IFFALSE 23610
// points := [ 25 , 5 , 3 ] ;
23591: LD_ADDR_VAR 0 9
23595: PUSH
23596: LD_INT 25
23598: PUSH
23599: LD_INT 5
23601: PUSH
23602: LD_INT 3
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23610: LD_VAR 0 6
23614: PPUSH
23615: CALL_OW 264
23619: PUSH
23620: LD_INT 4
23622: PUSH
23623: LD_INT 43
23625: PUSH
23626: LD_INT 25
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: IN
23634: IFFALSE 23655
// points := [ 40 , 15 , 5 ] ;
23636: LD_ADDR_VAR 0 9
23640: PUSH
23641: LD_INT 40
23643: PUSH
23644: LD_INT 15
23646: PUSH
23647: LD_INT 5
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23655: LD_VAR 0 6
23659: PPUSH
23660: CALL_OW 264
23664: PUSH
23665: LD_INT 3
23667: PUSH
23668: LD_INT 23
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: IN
23675: IFFALSE 23696
// points := [ 7 , 25 , 8 ] ;
23677: LD_ADDR_VAR 0 9
23681: PUSH
23682: LD_INT 7
23684: PUSH
23685: LD_INT 25
23687: PUSH
23688: LD_INT 8
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23696: LD_VAR 0 6
23700: PPUSH
23701: CALL_OW 264
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 27
23711: PUSH
23712: LD_INT 44
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: IN
23720: IFFALSE 23741
// points := [ 14 , 50 , 16 ] ;
23722: LD_ADDR_VAR 0 9
23726: PUSH
23727: LD_INT 14
23729: PUSH
23730: LD_INT 50
23732: PUSH
23733: LD_INT 16
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23741: LD_VAR 0 6
23745: PPUSH
23746: CALL_OW 264
23750: PUSH
23751: LD_INT 6
23753: PUSH
23754: LD_INT 46
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: IN
23761: IFFALSE 23782
// points := [ 32 , 120 , 70 ] ;
23763: LD_ADDR_VAR 0 9
23767: PUSH
23768: LD_INT 32
23770: PUSH
23771: LD_INT 120
23773: PUSH
23774: LD_INT 70
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23782: LD_VAR 0 6
23786: PPUSH
23787: CALL_OW 264
23791: PUSH
23792: LD_INT 7
23794: PUSH
23795: LD_INT 28
23797: PUSH
23798: LD_INT 45
23800: PUSH
23801: LD_INT 92
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: IN
23810: IFFALSE 23831
// points := [ 35 , 20 , 45 ] ;
23812: LD_ADDR_VAR 0 9
23816: PUSH
23817: LD_INT 35
23819: PUSH
23820: LD_INT 20
23822: PUSH
23823: LD_INT 45
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: LIST
23830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23831: LD_VAR 0 6
23835: PPUSH
23836: CALL_OW 264
23840: PUSH
23841: LD_INT 47
23843: PUSH
23844: EMPTY
23845: LIST
23846: IN
23847: IFFALSE 23868
// points := [ 67 , 45 , 75 ] ;
23849: LD_ADDR_VAR 0 9
23853: PUSH
23854: LD_INT 67
23856: PUSH
23857: LD_INT 45
23859: PUSH
23860: LD_INT 75
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23868: LD_VAR 0 6
23872: PPUSH
23873: CALL_OW 264
23877: PUSH
23878: LD_INT 26
23880: PUSH
23881: EMPTY
23882: LIST
23883: IN
23884: IFFALSE 23905
// points := [ 120 , 30 , 80 ] ;
23886: LD_ADDR_VAR 0 9
23890: PUSH
23891: LD_INT 120
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 80
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: LIST
23904: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23905: LD_VAR 0 6
23909: PPUSH
23910: CALL_OW 264
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: EMPTY
23919: LIST
23920: IN
23921: IFFALSE 23942
// points := [ 40 , 1 , 1 ] ;
23923: LD_ADDR_VAR 0 9
23927: PUSH
23928: LD_INT 40
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23942: LD_VAR 0 6
23946: PPUSH
23947: CALL_OW 264
23951: PUSH
23952: LD_INT 29
23954: PUSH
23955: EMPTY
23956: LIST
23957: IN
23958: IFFALSE 23979
// points := [ 70 , 200 , 400 ] ;
23960: LD_ADDR_VAR 0 9
23964: PUSH
23965: LD_INT 70
23967: PUSH
23968: LD_INT 200
23970: PUSH
23971: LD_INT 400
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23979: LD_VAR 0 6
23983: PPUSH
23984: CALL_OW 264
23988: PUSH
23989: LD_INT 14
23991: PUSH
23992: LD_INT 53
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: IN
23999: IFFALSE 24020
// points := [ 40 , 10 , 20 ] ;
24001: LD_ADDR_VAR 0 9
24005: PUSH
24006: LD_INT 40
24008: PUSH
24009: LD_INT 10
24011: PUSH
24012: LD_INT 20
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24020: LD_VAR 0 6
24024: PPUSH
24025: CALL_OW 264
24029: PUSH
24030: LD_INT 9
24032: PUSH
24033: EMPTY
24034: LIST
24035: IN
24036: IFFALSE 24057
// points := [ 5 , 70 , 20 ] ;
24038: LD_ADDR_VAR 0 9
24042: PUSH
24043: LD_INT 5
24045: PUSH
24046: LD_INT 70
24048: PUSH
24049: LD_INT 20
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24057: LD_VAR 0 6
24061: PPUSH
24062: CALL_OW 264
24066: PUSH
24067: LD_INT 10
24069: PUSH
24070: EMPTY
24071: LIST
24072: IN
24073: IFFALSE 24094
// points := [ 35 , 110 , 70 ] ;
24075: LD_ADDR_VAR 0 9
24079: PUSH
24080: LD_INT 35
24082: PUSH
24083: LD_INT 110
24085: PUSH
24086: LD_INT 70
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24094: LD_VAR 0 6
24098: PPUSH
24099: CALL_OW 265
24103: PUSH
24104: LD_INT 25
24106: EQUAL
24107: IFFALSE 24128
// points := [ 80 , 65 , 100 ] ;
24109: LD_ADDR_VAR 0 9
24113: PUSH
24114: LD_INT 80
24116: PUSH
24117: LD_INT 65
24119: PUSH
24120: LD_INT 100
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24128: LD_VAR 0 6
24132: PPUSH
24133: CALL_OW 263
24137: PUSH
24138: LD_INT 1
24140: EQUAL
24141: IFFALSE 24176
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24143: LD_ADDR_VAR 0 10
24147: PUSH
24148: LD_VAR 0 10
24152: PUSH
24153: LD_VAR 0 6
24157: PPUSH
24158: CALL_OW 311
24162: PPUSH
24163: LD_INT 3
24165: PPUSH
24166: CALL_OW 259
24170: PUSH
24171: LD_INT 4
24173: MUL
24174: MUL
24175: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24176: LD_VAR 0 6
24180: PPUSH
24181: CALL_OW 263
24185: PUSH
24186: LD_INT 2
24188: EQUAL
24189: IFFALSE 24240
// begin j := IsControledBy ( i ) ;
24191: LD_ADDR_VAR 0 7
24195: PUSH
24196: LD_VAR 0 6
24200: PPUSH
24201: CALL_OW 312
24205: ST_TO_ADDR
// if j then
24206: LD_VAR 0 7
24210: IFFALSE 24240
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24212: LD_ADDR_VAR 0 10
24216: PUSH
24217: LD_VAR 0 10
24221: PUSH
24222: LD_VAR 0 7
24226: PPUSH
24227: LD_INT 3
24229: PPUSH
24230: CALL_OW 259
24234: PUSH
24235: LD_INT 3
24237: MUL
24238: MUL
24239: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24240: LD_VAR 0 6
24244: PPUSH
24245: CALL_OW 264
24249: PUSH
24250: LD_INT 5
24252: PUSH
24253: LD_INT 6
24255: PUSH
24256: LD_INT 46
24258: PUSH
24259: LD_INT 44
24261: PUSH
24262: LD_INT 47
24264: PUSH
24265: LD_INT 45
24267: PUSH
24268: LD_INT 28
24270: PUSH
24271: LD_INT 7
24273: PUSH
24274: LD_INT 27
24276: PUSH
24277: LD_INT 29
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: IN
24292: PUSH
24293: LD_VAR 0 1
24297: PPUSH
24298: LD_INT 52
24300: PPUSH
24301: CALL_OW 321
24305: PUSH
24306: LD_INT 2
24308: EQUAL
24309: AND
24310: IFFALSE 24327
// bpoints := bpoints * 1.2 ;
24312: LD_ADDR_VAR 0 10
24316: PUSH
24317: LD_VAR 0 10
24321: PUSH
24322: LD_REAL  1.20000000000000E+0000
24325: MUL
24326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24327: LD_VAR 0 6
24331: PPUSH
24332: CALL_OW 264
24336: PUSH
24337: LD_INT 6
24339: PUSH
24340: LD_INT 46
24342: PUSH
24343: LD_INT 47
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: IN
24351: IFFALSE 24368
// bpoints := bpoints * 1.2 ;
24353: LD_ADDR_VAR 0 10
24357: PUSH
24358: LD_VAR 0 10
24362: PUSH
24363: LD_REAL  1.20000000000000E+0000
24366: MUL
24367: ST_TO_ADDR
// end ; unit_building :
24368: GO 24382
24370: LD_INT 3
24372: DOUBLE
24373: EQUAL
24374: IFTRUE 24378
24376: GO 24381
24378: POP
// ; end ;
24379: GO 24382
24381: POP
// for j = 1 to 3 do
24382: LD_ADDR_VAR 0 7
24386: PUSH
24387: DOUBLE
24388: LD_INT 1
24390: DEC
24391: ST_TO_ADDR
24392: LD_INT 3
24394: PUSH
24395: FOR_TO
24396: IFFALSE 24449
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24398: LD_ADDR_VAR 0 5
24402: PUSH
24403: LD_VAR 0 5
24407: PPUSH
24408: LD_VAR 0 7
24412: PPUSH
24413: LD_VAR 0 5
24417: PUSH
24418: LD_VAR 0 7
24422: ARRAY
24423: PUSH
24424: LD_VAR 0 9
24428: PUSH
24429: LD_VAR 0 7
24433: ARRAY
24434: PUSH
24435: LD_VAR 0 10
24439: MUL
24440: PLUS
24441: PPUSH
24442: CALL_OW 1
24446: ST_TO_ADDR
24447: GO 24395
24449: POP
24450: POP
// end ;
24451: GO 22930
24453: POP
24454: POP
// result := Replace ( result , 4 , tmp ) ;
24455: LD_ADDR_VAR 0 5
24459: PUSH
24460: LD_VAR 0 5
24464: PPUSH
24465: LD_INT 4
24467: PPUSH
24468: LD_VAR 0 8
24472: PPUSH
24473: CALL_OW 1
24477: ST_TO_ADDR
// end ;
24478: LD_VAR 0 5
24482: RET
// export function DangerAtRange ( unit , range ) ; begin
24483: LD_INT 0
24485: PPUSH
// if not unit then
24486: LD_VAR 0 1
24490: NOT
24491: IFFALSE 24495
// exit ;
24493: GO 24540
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24495: LD_ADDR_VAR 0 3
24499: PUSH
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL_OW 255
24509: PPUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 250
24519: PPUSH
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL_OW 251
24529: PPUSH
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL 22782 0 4
24539: ST_TO_ADDR
// end ;
24540: LD_VAR 0 3
24544: RET
// export function DangerInArea ( side , area ) ; begin
24545: LD_INT 0
24547: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24548: LD_ADDR_VAR 0 3
24552: PUSH
24553: LD_VAR 0 2
24557: PPUSH
24558: LD_INT 81
24560: PUSH
24561: LD_VAR 0 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PPUSH
24570: CALL_OW 70
24574: ST_TO_ADDR
// end ;
24575: LD_VAR 0 3
24579: RET
// export function IsExtension ( b ) ; begin
24580: LD_INT 0
24582: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24583: LD_ADDR_VAR 0 2
24587: PUSH
24588: LD_VAR 0 1
24592: PUSH
24593: LD_INT 23
24595: PUSH
24596: LD_INT 20
24598: PUSH
24599: LD_INT 22
24601: PUSH
24602: LD_INT 17
24604: PUSH
24605: LD_INT 24
24607: PUSH
24608: LD_INT 21
24610: PUSH
24611: LD_INT 19
24613: PUSH
24614: LD_INT 16
24616: PUSH
24617: LD_INT 25
24619: PUSH
24620: LD_INT 18
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: IN
24635: ST_TO_ADDR
// end ;
24636: LD_VAR 0 2
24640: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24641: LD_INT 0
24643: PPUSH
24644: PPUSH
24645: PPUSH
// result := [ ] ;
24646: LD_ADDR_VAR 0 4
24650: PUSH
24651: EMPTY
24652: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24653: LD_ADDR_VAR 0 5
24657: PUSH
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_INT 21
24665: PUSH
24666: LD_INT 3
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PPUSH
24673: CALL_OW 70
24677: ST_TO_ADDR
// if not tmp then
24678: LD_VAR 0 5
24682: NOT
24683: IFFALSE 24687
// exit ;
24685: GO 24751
// if checkLink then
24687: LD_VAR 0 3
24691: IFFALSE 24741
// begin for i in tmp do
24693: LD_ADDR_VAR 0 6
24697: PUSH
24698: LD_VAR 0 5
24702: PUSH
24703: FOR_IN
24704: IFFALSE 24739
// if GetBase ( i ) <> base then
24706: LD_VAR 0 6
24710: PPUSH
24711: CALL_OW 274
24715: PUSH
24716: LD_VAR 0 1
24720: NONEQUAL
24721: IFFALSE 24737
// ComLinkToBase ( base , i ) ;
24723: LD_VAR 0 1
24727: PPUSH
24728: LD_VAR 0 6
24732: PPUSH
24733: CALL_OW 169
24737: GO 24703
24739: POP
24740: POP
// end ; result := tmp ;
24741: LD_ADDR_VAR 0 4
24745: PUSH
24746: LD_VAR 0 5
24750: ST_TO_ADDR
// end ;
24751: LD_VAR 0 4
24755: RET
// export function ComComplete ( units , b ) ; var i ; begin
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
// if not units then
24760: LD_VAR 0 1
24764: NOT
24765: IFFALSE 24769
// exit ;
24767: GO 24859
// for i in units do
24769: LD_ADDR_VAR 0 4
24773: PUSH
24774: LD_VAR 0 1
24778: PUSH
24779: FOR_IN
24780: IFFALSE 24857
// if BuildingStatus ( b ) = bs_build then
24782: LD_VAR 0 2
24786: PPUSH
24787: CALL_OW 461
24791: PUSH
24792: LD_INT 1
24794: EQUAL
24795: IFFALSE 24855
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24797: LD_VAR 0 4
24801: PPUSH
24802: LD_STRING h
24804: PUSH
24805: LD_VAR 0 2
24809: PPUSH
24810: CALL_OW 250
24814: PUSH
24815: LD_VAR 0 2
24819: PPUSH
24820: CALL_OW 251
24824: PUSH
24825: LD_VAR 0 2
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: PPUSH
24851: CALL_OW 446
24855: GO 24779
24857: POP
24858: POP
// end ;
24859: LD_VAR 0 3
24863: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24864: LD_INT 0
24866: PPUSH
24867: PPUSH
24868: PPUSH
24869: PPUSH
24870: PPUSH
24871: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24872: LD_VAR 0 1
24876: NOT
24877: PUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: CALL_OW 263
24887: PUSH
24888: LD_INT 2
24890: NONEQUAL
24891: OR
24892: IFFALSE 24896
// exit ;
24894: GO 25212
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24896: LD_ADDR_VAR 0 6
24900: PUSH
24901: LD_INT 22
24903: PUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: CALL_OW 255
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 30
24923: PUSH
24924: LD_INT 36
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 34
24933: PUSH
24934: LD_INT 31
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PPUSH
24950: CALL_OW 69
24954: ST_TO_ADDR
// if not tmp then
24955: LD_VAR 0 6
24959: NOT
24960: IFFALSE 24964
// exit ;
24962: GO 25212
// result := [ ] ;
24964: LD_ADDR_VAR 0 2
24968: PUSH
24969: EMPTY
24970: ST_TO_ADDR
// for i in tmp do
24971: LD_ADDR_VAR 0 3
24975: PUSH
24976: LD_VAR 0 6
24980: PUSH
24981: FOR_IN
24982: IFFALSE 25053
// begin t := UnitsInside ( i ) ;
24984: LD_ADDR_VAR 0 4
24988: PUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: CALL_OW 313
24998: ST_TO_ADDR
// if t then
24999: LD_VAR 0 4
25003: IFFALSE 25051
// for j in t do
25005: LD_ADDR_VAR 0 7
25009: PUSH
25010: LD_VAR 0 4
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25049
// result := Replace ( result , result + 1 , j ) ;
25018: LD_ADDR_VAR 0 2
25022: PUSH
25023: LD_VAR 0 2
25027: PPUSH
25028: LD_VAR 0 2
25032: PUSH
25033: LD_INT 1
25035: PLUS
25036: PPUSH
25037: LD_VAR 0 7
25041: PPUSH
25042: CALL_OW 1
25046: ST_TO_ADDR
25047: GO 25015
25049: POP
25050: POP
// end ;
25051: GO 24981
25053: POP
25054: POP
// if not result then
25055: LD_VAR 0 2
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25212
// mech := result [ 1 ] ;
25064: LD_ADDR_VAR 0 5
25068: PUSH
25069: LD_VAR 0 2
25073: PUSH
25074: LD_INT 1
25076: ARRAY
25077: ST_TO_ADDR
// if result > 1 then
25078: LD_VAR 0 2
25082: PUSH
25083: LD_INT 1
25085: GREATER
25086: IFFALSE 25198
// begin for i = 2 to result do
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: DOUBLE
25094: LD_INT 2
25096: DEC
25097: ST_TO_ADDR
25098: LD_VAR 0 2
25102: PUSH
25103: FOR_TO
25104: IFFALSE 25196
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25106: LD_ADDR_VAR 0 4
25110: PUSH
25111: LD_VAR 0 2
25115: PUSH
25116: LD_VAR 0 3
25120: ARRAY
25121: PPUSH
25122: LD_INT 3
25124: PPUSH
25125: CALL_OW 259
25129: PUSH
25130: LD_VAR 0 2
25134: PUSH
25135: LD_VAR 0 3
25139: ARRAY
25140: PPUSH
25141: CALL_OW 432
25145: MINUS
25146: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25147: LD_VAR 0 4
25151: PUSH
25152: LD_VAR 0 5
25156: PPUSH
25157: LD_INT 3
25159: PPUSH
25160: CALL_OW 259
25164: PUSH
25165: LD_VAR 0 5
25169: PPUSH
25170: CALL_OW 432
25174: MINUS
25175: GREATEREQUAL
25176: IFFALSE 25194
// mech := result [ i ] ;
25178: LD_ADDR_VAR 0 5
25182: PUSH
25183: LD_VAR 0 2
25187: PUSH
25188: LD_VAR 0 3
25192: ARRAY
25193: ST_TO_ADDR
// end ;
25194: GO 25103
25196: POP
25197: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25198: LD_VAR 0 1
25202: PPUSH
25203: LD_VAR 0 5
25207: PPUSH
25208: CALL_OW 135
// end ;
25212: LD_VAR 0 2
25216: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25217: LD_INT 0
25219: PPUSH
25220: PPUSH
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
25225: PPUSH
25226: PPUSH
25227: PPUSH
25228: PPUSH
25229: PPUSH
25230: PPUSH
25231: PPUSH
// result := [ ] ;
25232: LD_ADDR_VAR 0 7
25236: PUSH
25237: EMPTY
25238: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25239: LD_VAR 0 1
25243: PPUSH
25244: CALL_OW 266
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: IN
25259: NOT
25260: IFFALSE 25264
// exit ;
25262: GO 26898
// if name then
25264: LD_VAR 0 3
25268: IFFALSE 25284
// SetBName ( base_dep , name ) ;
25270: LD_VAR 0 1
25274: PPUSH
25275: LD_VAR 0 3
25279: PPUSH
25280: CALL_OW 500
// base := GetBase ( base_dep ) ;
25284: LD_ADDR_VAR 0 15
25288: PUSH
25289: LD_VAR 0 1
25293: PPUSH
25294: CALL_OW 274
25298: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25299: LD_ADDR_VAR 0 16
25303: PUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 255
25313: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25314: LD_ADDR_VAR 0 17
25318: PUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL_OW 248
25328: ST_TO_ADDR
// if sources then
25329: LD_VAR 0 5
25333: IFFALSE 25380
// for i = 1 to 3 do
25335: LD_ADDR_VAR 0 8
25339: PUSH
25340: DOUBLE
25341: LD_INT 1
25343: DEC
25344: ST_TO_ADDR
25345: LD_INT 3
25347: PUSH
25348: FOR_TO
25349: IFFALSE 25378
// AddResourceType ( base , i , sources [ i ] ) ;
25351: LD_VAR 0 15
25355: PPUSH
25356: LD_VAR 0 8
25360: PPUSH
25361: LD_VAR 0 5
25365: PUSH
25366: LD_VAR 0 8
25370: ARRAY
25371: PPUSH
25372: CALL_OW 276
25376: GO 25348
25378: POP
25379: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25380: LD_ADDR_VAR 0 18
25384: PUSH
25385: LD_VAR 0 15
25389: PPUSH
25390: LD_VAR 0 2
25394: PPUSH
25395: LD_INT 1
25397: PPUSH
25398: CALL 24641 0 3
25402: ST_TO_ADDR
// InitHc ;
25403: CALL_OW 19
// InitUc ;
25407: CALL_OW 18
// uc_side := side ;
25411: LD_ADDR_OWVAR 20
25415: PUSH
25416: LD_VAR 0 16
25420: ST_TO_ADDR
// uc_nation := nation ;
25421: LD_ADDR_OWVAR 21
25425: PUSH
25426: LD_VAR 0 17
25430: ST_TO_ADDR
// if buildings then
25431: LD_VAR 0 18
25435: IFFALSE 26757
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25437: LD_ADDR_VAR 0 19
25441: PUSH
25442: LD_VAR 0 18
25446: PPUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 30
25452: PUSH
25453: LD_INT 29
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 30
25462: PUSH
25463: LD_INT 30
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: PPUSH
25475: CALL_OW 72
25479: ST_TO_ADDR
// if tmp then
25480: LD_VAR 0 19
25484: IFFALSE 25532
// for i in tmp do
25486: LD_ADDR_VAR 0 8
25490: PUSH
25491: LD_VAR 0 19
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25530
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25499: LD_VAR 0 8
25503: PPUSH
25504: CALL_OW 250
25508: PPUSH
25509: LD_VAR 0 8
25513: PPUSH
25514: CALL_OW 251
25518: PPUSH
25519: LD_VAR 0 16
25523: PPUSH
25524: CALL_OW 441
25528: GO 25496
25530: POP
25531: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25532: LD_VAR 0 18
25536: PPUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 30
25542: PUSH
25543: LD_INT 32
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 30
25552: PUSH
25553: LD_INT 33
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: PPUSH
25565: CALL_OW 72
25569: IFFALSE 25657
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25571: LD_ADDR_VAR 0 8
25575: PUSH
25576: LD_VAR 0 18
25580: PPUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 30
25586: PUSH
25587: LD_INT 32
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 30
25596: PUSH
25597: LD_INT 33
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 72
25613: PUSH
25614: FOR_IN
25615: IFFALSE 25655
// begin if not GetBWeapon ( i ) then
25617: LD_VAR 0 8
25621: PPUSH
25622: CALL_OW 269
25626: NOT
25627: IFFALSE 25653
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25629: LD_VAR 0 8
25633: PPUSH
25634: LD_VAR 0 8
25638: PPUSH
25639: LD_VAR 0 2
25643: PPUSH
25644: CALL 26903 0 2
25648: PPUSH
25649: CALL_OW 431
// end ;
25653: GO 25614
25655: POP
25656: POP
// end ; for i = 1 to personel do
25657: LD_ADDR_VAR 0 8
25661: PUSH
25662: DOUBLE
25663: LD_INT 1
25665: DEC
25666: ST_TO_ADDR
25667: LD_VAR 0 6
25671: PUSH
25672: FOR_TO
25673: IFFALSE 26737
// begin if i > 4 then
25675: LD_VAR 0 8
25679: PUSH
25680: LD_INT 4
25682: GREATER
25683: IFFALSE 25687
// break ;
25685: GO 26737
// case i of 1 :
25687: LD_VAR 0 8
25691: PUSH
25692: LD_INT 1
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25780
25700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25701: LD_ADDR_VAR 0 12
25705: PUSH
25706: LD_VAR 0 18
25710: PPUSH
25711: LD_INT 22
25713: PUSH
25714: LD_VAR 0 16
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 58
25725: PUSH
25726: EMPTY
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 30
25734: PUSH
25735: LD_INT 32
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 30
25744: PUSH
25745: LD_INT 4
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 30
25754: PUSH
25755: LD_INT 5
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: PPUSH
25773: CALL_OW 72
25777: ST_TO_ADDR
25778: GO 26002
25780: LD_INT 2
25782: DOUBLE
25783: EQUAL
25784: IFTRUE 25788
25786: GO 25850
25788: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25789: LD_ADDR_VAR 0 12
25793: PUSH
25794: LD_VAR 0 18
25798: PPUSH
25799: LD_INT 22
25801: PUSH
25802: LD_VAR 0 16
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: LD_INT 30
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 30
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 72
25847: ST_TO_ADDR
25848: GO 26002
25850: LD_INT 3
25852: DOUBLE
25853: EQUAL
25854: IFTRUE 25858
25856: GO 25920
25858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25859: LD_ADDR_VAR 0 12
25863: PUSH
25864: LD_VAR 0 18
25868: PPUSH
25869: LD_INT 22
25871: PUSH
25872: LD_VAR 0 16
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: LD_INT 30
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 30
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 72
25917: ST_TO_ADDR
25918: GO 26002
25920: LD_INT 4
25922: DOUBLE
25923: EQUAL
25924: IFTRUE 25928
25926: GO 26001
25928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25929: LD_ADDR_VAR 0 12
25933: PUSH
25934: LD_VAR 0 18
25938: PPUSH
25939: LD_INT 22
25941: PUSH
25942: LD_VAR 0 16
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 30
25956: PUSH
25957: LD_INT 6
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 30
25966: PUSH
25967: LD_INT 7
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 30
25976: PUSH
25977: LD_INT 8
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PPUSH
25994: CALL_OW 72
25998: ST_TO_ADDR
25999: GO 26002
26001: POP
// if i = 1 then
26002: LD_VAR 0 8
26006: PUSH
26007: LD_INT 1
26009: EQUAL
26010: IFFALSE 26121
// begin tmp := [ ] ;
26012: LD_ADDR_VAR 0 19
26016: PUSH
26017: EMPTY
26018: ST_TO_ADDR
// for j in f do
26019: LD_ADDR_VAR 0 9
26023: PUSH
26024: LD_VAR 0 12
26028: PUSH
26029: FOR_IN
26030: IFFALSE 26103
// if GetBType ( j ) = b_bunker then
26032: LD_VAR 0 9
26036: PPUSH
26037: CALL_OW 266
26041: PUSH
26042: LD_INT 32
26044: EQUAL
26045: IFFALSE 26072
// tmp := Insert ( tmp , 1 , j ) else
26047: LD_ADDR_VAR 0 19
26051: PUSH
26052: LD_VAR 0 19
26056: PPUSH
26057: LD_INT 1
26059: PPUSH
26060: LD_VAR 0 9
26064: PPUSH
26065: CALL_OW 2
26069: ST_TO_ADDR
26070: GO 26101
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26072: LD_ADDR_VAR 0 19
26076: PUSH
26077: LD_VAR 0 19
26081: PPUSH
26082: LD_VAR 0 19
26086: PUSH
26087: LD_INT 1
26089: PLUS
26090: PPUSH
26091: LD_VAR 0 9
26095: PPUSH
26096: CALL_OW 2
26100: ST_TO_ADDR
26101: GO 26029
26103: POP
26104: POP
// if tmp then
26105: LD_VAR 0 19
26109: IFFALSE 26121
// f := tmp ;
26111: LD_ADDR_VAR 0 12
26115: PUSH
26116: LD_VAR 0 19
26120: ST_TO_ADDR
// end ; x := personel [ i ] ;
26121: LD_ADDR_VAR 0 13
26125: PUSH
26126: LD_VAR 0 6
26130: PUSH
26131: LD_VAR 0 8
26135: ARRAY
26136: ST_TO_ADDR
// if x = - 1 then
26137: LD_VAR 0 13
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: EQUAL
26146: IFFALSE 26355
// begin for j in f do
26148: LD_ADDR_VAR 0 9
26152: PUSH
26153: LD_VAR 0 12
26157: PUSH
26158: FOR_IN
26159: IFFALSE 26351
// repeat InitHc ;
26161: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26165: LD_VAR 0 9
26169: PPUSH
26170: CALL_OW 266
26174: PUSH
26175: LD_INT 5
26177: EQUAL
26178: IFFALSE 26248
// begin if UnitsInside ( j ) < 3 then
26180: LD_VAR 0 9
26184: PPUSH
26185: CALL_OW 313
26189: PUSH
26190: LD_INT 3
26192: LESS
26193: IFFALSE 26229
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26195: LD_INT 0
26197: PPUSH
26198: LD_INT 5
26200: PUSH
26201: LD_INT 8
26203: PUSH
26204: LD_INT 9
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: LIST
26211: PUSH
26212: LD_VAR 0 17
26216: ARRAY
26217: PPUSH
26218: LD_VAR 0 4
26222: PPUSH
26223: CALL_OW 380
26227: GO 26246
// PrepareHuman ( false , i , skill ) ;
26229: LD_INT 0
26231: PPUSH
26232: LD_VAR 0 8
26236: PPUSH
26237: LD_VAR 0 4
26241: PPUSH
26242: CALL_OW 380
// end else
26246: GO 26265
// PrepareHuman ( false , i , skill ) ;
26248: LD_INT 0
26250: PPUSH
26251: LD_VAR 0 8
26255: PPUSH
26256: LD_VAR 0 4
26260: PPUSH
26261: CALL_OW 380
// un := CreateHuman ;
26265: LD_ADDR_VAR 0 14
26269: PUSH
26270: CALL_OW 44
26274: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26275: LD_ADDR_VAR 0 7
26279: PUSH
26280: LD_VAR 0 7
26284: PPUSH
26285: LD_INT 1
26287: PPUSH
26288: LD_VAR 0 14
26292: PPUSH
26293: CALL_OW 2
26297: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26298: LD_VAR 0 14
26302: PPUSH
26303: LD_VAR 0 9
26307: PPUSH
26308: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26312: LD_VAR 0 9
26316: PPUSH
26317: CALL_OW 313
26321: PUSH
26322: LD_INT 6
26324: EQUAL
26325: PUSH
26326: LD_VAR 0 9
26330: PPUSH
26331: CALL_OW 266
26335: PUSH
26336: LD_INT 32
26338: PUSH
26339: LD_INT 31
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: IN
26346: OR
26347: IFFALSE 26161
26349: GO 26158
26351: POP
26352: POP
// end else
26353: GO 26735
// for j = 1 to x do
26355: LD_ADDR_VAR 0 9
26359: PUSH
26360: DOUBLE
26361: LD_INT 1
26363: DEC
26364: ST_TO_ADDR
26365: LD_VAR 0 13
26369: PUSH
26370: FOR_TO
26371: IFFALSE 26733
// begin InitHc ;
26373: CALL_OW 19
// if not f then
26377: LD_VAR 0 12
26381: NOT
26382: IFFALSE 26471
// begin PrepareHuman ( false , i , skill ) ;
26384: LD_INT 0
26386: PPUSH
26387: LD_VAR 0 8
26391: PPUSH
26392: LD_VAR 0 4
26396: PPUSH
26397: CALL_OW 380
// un := CreateHuman ;
26401: LD_ADDR_VAR 0 14
26405: PUSH
26406: CALL_OW 44
26410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26411: LD_ADDR_VAR 0 7
26415: PUSH
26416: LD_VAR 0 7
26420: PPUSH
26421: LD_INT 1
26423: PPUSH
26424: LD_VAR 0 14
26428: PPUSH
26429: CALL_OW 2
26433: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26434: LD_VAR 0 14
26438: PPUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 250
26448: PPUSH
26449: LD_VAR 0 1
26453: PPUSH
26454: CALL_OW 251
26458: PPUSH
26459: LD_INT 10
26461: PPUSH
26462: LD_INT 0
26464: PPUSH
26465: CALL_OW 50
// continue ;
26469: GO 26370
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26471: LD_VAR 0 12
26475: PUSH
26476: LD_INT 1
26478: ARRAY
26479: PPUSH
26480: CALL_OW 313
26484: PUSH
26485: LD_VAR 0 12
26489: PUSH
26490: LD_INT 1
26492: ARRAY
26493: PPUSH
26494: CALL_OW 266
26498: PUSH
26499: LD_INT 32
26501: PUSH
26502: LD_INT 31
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: IN
26509: AND
26510: PUSH
26511: LD_VAR 0 12
26515: PUSH
26516: LD_INT 1
26518: ARRAY
26519: PPUSH
26520: CALL_OW 313
26524: PUSH
26525: LD_INT 6
26527: EQUAL
26528: OR
26529: IFFALSE 26549
// f := Delete ( f , 1 ) ;
26531: LD_ADDR_VAR 0 12
26535: PUSH
26536: LD_VAR 0 12
26540: PPUSH
26541: LD_INT 1
26543: PPUSH
26544: CALL_OW 3
26548: ST_TO_ADDR
// if not f then
26549: LD_VAR 0 12
26553: NOT
26554: IFFALSE 26572
// begin x := x + 2 ;
26556: LD_ADDR_VAR 0 13
26560: PUSH
26561: LD_VAR 0 13
26565: PUSH
26566: LD_INT 2
26568: PLUS
26569: ST_TO_ADDR
// continue ;
26570: GO 26370
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26572: LD_VAR 0 12
26576: PUSH
26577: LD_INT 1
26579: ARRAY
26580: PPUSH
26581: CALL_OW 266
26585: PUSH
26586: LD_INT 5
26588: EQUAL
26589: IFFALSE 26663
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26591: LD_VAR 0 12
26595: PUSH
26596: LD_INT 1
26598: ARRAY
26599: PPUSH
26600: CALL_OW 313
26604: PUSH
26605: LD_INT 3
26607: LESS
26608: IFFALSE 26644
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26610: LD_INT 0
26612: PPUSH
26613: LD_INT 5
26615: PUSH
26616: LD_INT 8
26618: PUSH
26619: LD_INT 9
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: PUSH
26627: LD_VAR 0 17
26631: ARRAY
26632: PPUSH
26633: LD_VAR 0 4
26637: PPUSH
26638: CALL_OW 380
26642: GO 26661
// PrepareHuman ( false , i , skill ) ;
26644: LD_INT 0
26646: PPUSH
26647: LD_VAR 0 8
26651: PPUSH
26652: LD_VAR 0 4
26656: PPUSH
26657: CALL_OW 380
// end else
26661: GO 26680
// PrepareHuman ( false , i , skill ) ;
26663: LD_INT 0
26665: PPUSH
26666: LD_VAR 0 8
26670: PPUSH
26671: LD_VAR 0 4
26675: PPUSH
26676: CALL_OW 380
// un := CreateHuman ;
26680: LD_ADDR_VAR 0 14
26684: PUSH
26685: CALL_OW 44
26689: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26690: LD_ADDR_VAR 0 7
26694: PUSH
26695: LD_VAR 0 7
26699: PPUSH
26700: LD_INT 1
26702: PPUSH
26703: LD_VAR 0 14
26707: PPUSH
26708: CALL_OW 2
26712: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26713: LD_VAR 0 14
26717: PPUSH
26718: LD_VAR 0 12
26722: PUSH
26723: LD_INT 1
26725: ARRAY
26726: PPUSH
26727: CALL_OW 52
// end ;
26731: GO 26370
26733: POP
26734: POP
// end ;
26735: GO 25672
26737: POP
26738: POP
// result := result ^ buildings ;
26739: LD_ADDR_VAR 0 7
26743: PUSH
26744: LD_VAR 0 7
26748: PUSH
26749: LD_VAR 0 18
26753: ADD
26754: ST_TO_ADDR
// end else
26755: GO 26898
// begin for i = 1 to personel do
26757: LD_ADDR_VAR 0 8
26761: PUSH
26762: DOUBLE
26763: LD_INT 1
26765: DEC
26766: ST_TO_ADDR
26767: LD_VAR 0 6
26771: PUSH
26772: FOR_TO
26773: IFFALSE 26896
// begin if i > 4 then
26775: LD_VAR 0 8
26779: PUSH
26780: LD_INT 4
26782: GREATER
26783: IFFALSE 26787
// break ;
26785: GO 26896
// x := personel [ i ] ;
26787: LD_ADDR_VAR 0 13
26791: PUSH
26792: LD_VAR 0 6
26796: PUSH
26797: LD_VAR 0 8
26801: ARRAY
26802: ST_TO_ADDR
// if x = - 1 then
26803: LD_VAR 0 13
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: EQUAL
26812: IFFALSE 26816
// continue ;
26814: GO 26772
// PrepareHuman ( false , i , skill ) ;
26816: LD_INT 0
26818: PPUSH
26819: LD_VAR 0 8
26823: PPUSH
26824: LD_VAR 0 4
26828: PPUSH
26829: CALL_OW 380
// un := CreateHuman ;
26833: LD_ADDR_VAR 0 14
26837: PUSH
26838: CALL_OW 44
26842: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26843: LD_VAR 0 14
26847: PPUSH
26848: LD_VAR 0 1
26852: PPUSH
26853: CALL_OW 250
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 251
26867: PPUSH
26868: LD_INT 10
26870: PPUSH
26871: LD_INT 0
26873: PPUSH
26874: CALL_OW 50
// result := result ^ un ;
26878: LD_ADDR_VAR 0 7
26882: PUSH
26883: LD_VAR 0 7
26887: PUSH
26888: LD_VAR 0 14
26892: ADD
26893: ST_TO_ADDR
// end ;
26894: GO 26772
26896: POP
26897: POP
// end ; end ;
26898: LD_VAR 0 7
26902: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
26907: PPUSH
26908: PPUSH
26909: PPUSH
26910: PPUSH
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
// result := false ;
26921: LD_ADDR_VAR 0 3
26925: PUSH
26926: LD_INT 0
26928: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26929: LD_VAR 0 1
26933: NOT
26934: PUSH
26935: LD_VAR 0 1
26939: PPUSH
26940: CALL_OW 266
26944: PUSH
26945: LD_INT 32
26947: PUSH
26948: LD_INT 33
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: IN
26955: NOT
26956: OR
26957: IFFALSE 26961
// exit ;
26959: GO 28070
// nat := GetNation ( tower ) ;
26961: LD_ADDR_VAR 0 12
26965: PUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 248
26975: ST_TO_ADDR
// side := GetSide ( tower ) ;
26976: LD_ADDR_VAR 0 16
26980: PUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: CALL_OW 255
26990: ST_TO_ADDR
// x := GetX ( tower ) ;
26991: LD_ADDR_VAR 0 10
26995: PUSH
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL_OW 250
27005: ST_TO_ADDR
// y := GetY ( tower ) ;
27006: LD_ADDR_VAR 0 11
27010: PUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 251
27020: ST_TO_ADDR
// if not x or not y then
27021: LD_VAR 0 10
27025: NOT
27026: PUSH
27027: LD_VAR 0 11
27031: NOT
27032: OR
27033: IFFALSE 27037
// exit ;
27035: GO 28070
// weapon := 0 ;
27037: LD_ADDR_VAR 0 18
27041: PUSH
27042: LD_INT 0
27044: ST_TO_ADDR
// fac_list := [ ] ;
27045: LD_ADDR_VAR 0 17
27049: PUSH
27050: EMPTY
27051: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27052: LD_ADDR_VAR 0 6
27056: PUSH
27057: LD_VAR 0 1
27061: PPUSH
27062: CALL_OW 274
27066: PPUSH
27067: LD_VAR 0 2
27071: PPUSH
27072: LD_INT 0
27074: PPUSH
27075: CALL 24641 0 3
27079: PPUSH
27080: LD_INT 30
27082: PUSH
27083: LD_INT 3
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 72
27094: ST_TO_ADDR
// if not factories then
27095: LD_VAR 0 6
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 28070
// for i in factories do
27104: LD_ADDR_VAR 0 8
27108: PUSH
27109: LD_VAR 0 6
27113: PUSH
27114: FOR_IN
27115: IFFALSE 27140
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27117: LD_ADDR_VAR 0 17
27121: PUSH
27122: LD_VAR 0 17
27126: PUSH
27127: LD_VAR 0 8
27131: PPUSH
27132: CALL_OW 478
27136: UNION
27137: ST_TO_ADDR
27138: GO 27114
27140: POP
27141: POP
// if not fac_list then
27142: LD_VAR 0 17
27146: NOT
27147: IFFALSE 27151
// exit ;
27149: GO 28070
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27151: LD_ADDR_VAR 0 5
27155: PUSH
27156: LD_INT 4
27158: PUSH
27159: LD_INT 5
27161: PUSH
27162: LD_INT 9
27164: PUSH
27165: LD_INT 10
27167: PUSH
27168: LD_INT 6
27170: PUSH
27171: LD_INT 7
27173: PUSH
27174: LD_INT 11
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 27
27188: PUSH
27189: LD_INT 28
27191: PUSH
27192: LD_INT 26
27194: PUSH
27195: LD_INT 30
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 43
27206: PUSH
27207: LD_INT 44
27209: PUSH
27210: LD_INT 46
27212: PUSH
27213: LD_INT 45
27215: PUSH
27216: LD_INT 47
27218: PUSH
27219: LD_INT 49
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: PUSH
27235: LD_VAR 0 12
27239: ARRAY
27240: ST_TO_ADDR
// list := list isect fac_list ;
27241: LD_ADDR_VAR 0 5
27245: PUSH
27246: LD_VAR 0 5
27250: PUSH
27251: LD_VAR 0 17
27255: ISECT
27256: ST_TO_ADDR
// if not list then
27257: LD_VAR 0 5
27261: NOT
27262: IFFALSE 27266
// exit ;
27264: GO 28070
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27266: LD_VAR 0 12
27270: PUSH
27271: LD_INT 3
27273: EQUAL
27274: PUSH
27275: LD_INT 49
27277: PUSH
27278: LD_VAR 0 5
27282: IN
27283: AND
27284: PUSH
27285: LD_INT 31
27287: PPUSH
27288: LD_VAR 0 16
27292: PPUSH
27293: CALL_OW 321
27297: PUSH
27298: LD_INT 2
27300: EQUAL
27301: AND
27302: IFFALSE 27362
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27304: LD_INT 22
27306: PUSH
27307: LD_VAR 0 16
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 35
27318: PUSH
27319: LD_INT 49
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 91
27328: PUSH
27329: LD_VAR 0 1
27333: PUSH
27334: LD_INT 10
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: LIST
27346: PPUSH
27347: CALL_OW 69
27351: NOT
27352: IFFALSE 27362
// weapon := ru_time_lapser ;
27354: LD_ADDR_VAR 0 18
27358: PUSH
27359: LD_INT 49
27361: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27362: LD_VAR 0 12
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: IN
27377: PUSH
27378: LD_INT 11
27380: PUSH
27381: LD_VAR 0 5
27385: IN
27386: PUSH
27387: LD_INT 30
27389: PUSH
27390: LD_VAR 0 5
27394: IN
27395: OR
27396: AND
27397: PUSH
27398: LD_INT 6
27400: PPUSH
27401: LD_VAR 0 16
27405: PPUSH
27406: CALL_OW 321
27410: PUSH
27411: LD_INT 2
27413: EQUAL
27414: AND
27415: IFFALSE 27580
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27417: LD_INT 22
27419: PUSH
27420: LD_VAR 0 16
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: LD_INT 35
27434: PUSH
27435: LD_INT 11
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 35
27444: PUSH
27445: LD_INT 30
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 91
27459: PUSH
27460: LD_VAR 0 1
27464: PUSH
27465: LD_INT 18
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: NOT
27483: PUSH
27484: LD_INT 22
27486: PUSH
27487: LD_VAR 0 16
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: LD_INT 30
27501: PUSH
27502: LD_INT 32
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 30
27511: PUSH
27512: LD_INT 33
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 91
27526: PUSH
27527: LD_VAR 0 1
27531: PUSH
27532: LD_INT 12
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: LIST
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: PPUSH
27548: CALL_OW 69
27552: PUSH
27553: LD_INT 2
27555: GREATER
27556: AND
27557: IFFALSE 27580
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27559: LD_ADDR_VAR 0 18
27563: PUSH
27564: LD_INT 11
27566: PUSH
27567: LD_INT 30
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_VAR 0 12
27578: ARRAY
27579: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27580: LD_VAR 0 18
27584: NOT
27585: PUSH
27586: LD_INT 40
27588: PPUSH
27589: LD_VAR 0 16
27593: PPUSH
27594: CALL_OW 321
27598: PUSH
27599: LD_INT 2
27601: EQUAL
27602: AND
27603: PUSH
27604: LD_INT 7
27606: PUSH
27607: LD_VAR 0 5
27611: IN
27612: PUSH
27613: LD_INT 28
27615: PUSH
27616: LD_VAR 0 5
27620: IN
27621: OR
27622: PUSH
27623: LD_INT 45
27625: PUSH
27626: LD_VAR 0 5
27630: IN
27631: OR
27632: AND
27633: IFFALSE 27887
// begin hex := GetHexInfo ( x , y ) ;
27635: LD_ADDR_VAR 0 4
27639: PUSH
27640: LD_VAR 0 10
27644: PPUSH
27645: LD_VAR 0 11
27649: PPUSH
27650: CALL_OW 546
27654: ST_TO_ADDR
// if hex [ 1 ] then
27655: LD_VAR 0 4
27659: PUSH
27660: LD_INT 1
27662: ARRAY
27663: IFFALSE 27667
// exit ;
27665: GO 28070
// height := hex [ 2 ] ;
27667: LD_ADDR_VAR 0 15
27671: PUSH
27672: LD_VAR 0 4
27676: PUSH
27677: LD_INT 2
27679: ARRAY
27680: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27681: LD_ADDR_VAR 0 14
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: LD_INT 5
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: ST_TO_ADDR
// for i in tmp do
27704: LD_ADDR_VAR 0 8
27708: PUSH
27709: LD_VAR 0 14
27713: PUSH
27714: FOR_IN
27715: IFFALSE 27885
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27717: LD_ADDR_VAR 0 9
27721: PUSH
27722: LD_VAR 0 10
27726: PPUSH
27727: LD_VAR 0 8
27731: PPUSH
27732: LD_INT 5
27734: PPUSH
27735: CALL_OW 272
27739: PUSH
27740: LD_VAR 0 11
27744: PPUSH
27745: LD_VAR 0 8
27749: PPUSH
27750: LD_INT 5
27752: PPUSH
27753: CALL_OW 273
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27762: LD_VAR 0 9
27766: PUSH
27767: LD_INT 1
27769: ARRAY
27770: PPUSH
27771: LD_VAR 0 9
27775: PUSH
27776: LD_INT 2
27778: ARRAY
27779: PPUSH
27780: CALL_OW 488
27784: IFFALSE 27883
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27786: LD_ADDR_VAR 0 4
27790: PUSH
27791: LD_VAR 0 9
27795: PUSH
27796: LD_INT 1
27798: ARRAY
27799: PPUSH
27800: LD_VAR 0 9
27804: PUSH
27805: LD_INT 2
27807: ARRAY
27808: PPUSH
27809: CALL_OW 546
27813: ST_TO_ADDR
// if hex [ 1 ] then
27814: LD_VAR 0 4
27818: PUSH
27819: LD_INT 1
27821: ARRAY
27822: IFFALSE 27826
// continue ;
27824: GO 27714
// h := hex [ 2 ] ;
27826: LD_ADDR_VAR 0 13
27830: PUSH
27831: LD_VAR 0 4
27835: PUSH
27836: LD_INT 2
27838: ARRAY
27839: ST_TO_ADDR
// if h + 7 < height then
27840: LD_VAR 0 13
27844: PUSH
27845: LD_INT 7
27847: PLUS
27848: PUSH
27849: LD_VAR 0 15
27853: LESS
27854: IFFALSE 27883
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27856: LD_ADDR_VAR 0 18
27860: PUSH
27861: LD_INT 7
27863: PUSH
27864: LD_INT 28
27866: PUSH
27867: LD_INT 45
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: PUSH
27875: LD_VAR 0 12
27879: ARRAY
27880: ST_TO_ADDR
// break ;
27881: GO 27885
// end ; end ; end ;
27883: GO 27714
27885: POP
27886: POP
// end ; if not weapon then
27887: LD_VAR 0 18
27891: NOT
27892: IFFALSE 27952
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27894: LD_ADDR_VAR 0 5
27898: PUSH
27899: LD_VAR 0 5
27903: PUSH
27904: LD_INT 11
27906: PUSH
27907: LD_INT 30
27909: PUSH
27910: LD_INT 49
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: DIFF
27918: ST_TO_ADDR
// if not list then
27919: LD_VAR 0 5
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28070
// weapon := list [ rand ( 1 , list ) ] ;
27928: LD_ADDR_VAR 0 18
27932: PUSH
27933: LD_VAR 0 5
27937: PUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_VAR 0 5
27945: PPUSH
27946: CALL_OW 12
27950: ARRAY
27951: ST_TO_ADDR
// end ; if weapon then
27952: LD_VAR 0 18
27956: IFFALSE 28070
// begin tmp := CostOfWeapon ( weapon ) ;
27958: LD_ADDR_VAR 0 14
27962: PUSH
27963: LD_VAR 0 18
27967: PPUSH
27968: CALL_OW 451
27972: ST_TO_ADDR
// j := GetBase ( tower ) ;
27973: LD_ADDR_VAR 0 9
27977: PUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 274
27987: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27988: LD_VAR 0 9
27992: PPUSH
27993: LD_INT 1
27995: PPUSH
27996: CALL_OW 275
28000: PUSH
28001: LD_VAR 0 14
28005: PUSH
28006: LD_INT 1
28008: ARRAY
28009: GREATEREQUAL
28010: PUSH
28011: LD_VAR 0 9
28015: PPUSH
28016: LD_INT 2
28018: PPUSH
28019: CALL_OW 275
28023: PUSH
28024: LD_VAR 0 14
28028: PUSH
28029: LD_INT 2
28031: ARRAY
28032: GREATEREQUAL
28033: AND
28034: PUSH
28035: LD_VAR 0 9
28039: PPUSH
28040: LD_INT 3
28042: PPUSH
28043: CALL_OW 275
28047: PUSH
28048: LD_VAR 0 14
28052: PUSH
28053: LD_INT 3
28055: ARRAY
28056: GREATEREQUAL
28057: AND
28058: IFFALSE 28070
// result := weapon ;
28060: LD_ADDR_VAR 0 3
28064: PUSH
28065: LD_VAR 0 18
28069: ST_TO_ADDR
// end ; end ;
28070: LD_VAR 0 3
28074: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28075: LD_INT 0
28077: PPUSH
28078: PPUSH
// result := true ;
28079: LD_ADDR_VAR 0 3
28083: PUSH
28084: LD_INT 1
28086: ST_TO_ADDR
// if array1 = array2 then
28087: LD_VAR 0 1
28091: PUSH
28092: LD_VAR 0 2
28096: EQUAL
28097: IFFALSE 28157
// begin for i = 1 to array1 do
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: DOUBLE
28105: LD_INT 1
28107: DEC
28108: ST_TO_ADDR
28109: LD_VAR 0 1
28113: PUSH
28114: FOR_TO
28115: IFFALSE 28153
// if array1 [ i ] <> array2 [ i ] then
28117: LD_VAR 0 1
28121: PUSH
28122: LD_VAR 0 4
28126: ARRAY
28127: PUSH
28128: LD_VAR 0 2
28132: PUSH
28133: LD_VAR 0 4
28137: ARRAY
28138: NONEQUAL
28139: IFFALSE 28151
// begin result := false ;
28141: LD_ADDR_VAR 0 3
28145: PUSH
28146: LD_INT 0
28148: ST_TO_ADDR
// break ;
28149: GO 28153
// end ;
28151: GO 28114
28153: POP
28154: POP
// end else
28155: GO 28165
// result := false ;
28157: LD_ADDR_VAR 0 3
28161: PUSH
28162: LD_INT 0
28164: ST_TO_ADDR
// end ;
28165: LD_VAR 0 3
28169: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28170: LD_INT 0
28172: PPUSH
28173: PPUSH
// if not array1 or not array2 then
28174: LD_VAR 0 1
28178: NOT
28179: PUSH
28180: LD_VAR 0 2
28184: NOT
28185: OR
28186: IFFALSE 28190
// exit ;
28188: GO 28254
// result := true ;
28190: LD_ADDR_VAR 0 3
28194: PUSH
28195: LD_INT 1
28197: ST_TO_ADDR
// for i = 1 to array1 do
28198: LD_ADDR_VAR 0 4
28202: PUSH
28203: DOUBLE
28204: LD_INT 1
28206: DEC
28207: ST_TO_ADDR
28208: LD_VAR 0 1
28212: PUSH
28213: FOR_TO
28214: IFFALSE 28252
// if array1 [ i ] <> array2 [ i ] then
28216: LD_VAR 0 1
28220: PUSH
28221: LD_VAR 0 4
28225: ARRAY
28226: PUSH
28227: LD_VAR 0 2
28231: PUSH
28232: LD_VAR 0 4
28236: ARRAY
28237: NONEQUAL
28238: IFFALSE 28250
// begin result := false ;
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: LD_INT 0
28247: ST_TO_ADDR
// break ;
28248: GO 28252
// end ;
28250: GO 28213
28252: POP
28253: POP
// end ;
28254: LD_VAR 0 3
28258: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28259: LD_INT 0
28261: PPUSH
28262: PPUSH
28263: PPUSH
// pom := GetBase ( fac ) ;
28264: LD_ADDR_VAR 0 5
28268: PUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 274
28278: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28279: LD_ADDR_VAR 0 4
28283: PUSH
28284: LD_VAR 0 2
28288: PUSH
28289: LD_INT 1
28291: ARRAY
28292: PPUSH
28293: LD_VAR 0 2
28297: PUSH
28298: LD_INT 2
28300: ARRAY
28301: PPUSH
28302: LD_VAR 0 2
28306: PUSH
28307: LD_INT 3
28309: ARRAY
28310: PPUSH
28311: LD_VAR 0 2
28315: PUSH
28316: LD_INT 4
28318: ARRAY
28319: PPUSH
28320: CALL_OW 449
28324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_VAR 0 5
28334: PPUSH
28335: LD_INT 1
28337: PPUSH
28338: CALL_OW 275
28342: PUSH
28343: LD_VAR 0 4
28347: PUSH
28348: LD_INT 1
28350: ARRAY
28351: GREATEREQUAL
28352: PUSH
28353: LD_VAR 0 5
28357: PPUSH
28358: LD_INT 2
28360: PPUSH
28361: CALL_OW 275
28365: PUSH
28366: LD_VAR 0 4
28370: PUSH
28371: LD_INT 2
28373: ARRAY
28374: GREATEREQUAL
28375: AND
28376: PUSH
28377: LD_VAR 0 5
28381: PPUSH
28382: LD_INT 3
28384: PPUSH
28385: CALL_OW 275
28389: PUSH
28390: LD_VAR 0 4
28394: PUSH
28395: LD_INT 3
28397: ARRAY
28398: GREATEREQUAL
28399: AND
28400: ST_TO_ADDR
// end ;
28401: LD_VAR 0 3
28405: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28406: LD_INT 0
28408: PPUSH
28409: PPUSH
28410: PPUSH
28411: PPUSH
// pom := GetBase ( building ) ;
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 274
28426: ST_TO_ADDR
// if not pom then
28427: LD_VAR 0 3
28431: NOT
28432: IFFALSE 28436
// exit ;
28434: GO 28606
// btype := GetBType ( building ) ;
28436: LD_ADDR_VAR 0 5
28440: PUSH
28441: LD_VAR 0 1
28445: PPUSH
28446: CALL_OW 266
28450: ST_TO_ADDR
// if btype = b_armoury then
28451: LD_VAR 0 5
28455: PUSH
28456: LD_INT 4
28458: EQUAL
28459: IFFALSE 28469
// btype := b_barracks ;
28461: LD_ADDR_VAR 0 5
28465: PUSH
28466: LD_INT 5
28468: ST_TO_ADDR
// if btype = b_depot then
28469: LD_VAR 0 5
28473: PUSH
28474: LD_INT 0
28476: EQUAL
28477: IFFALSE 28487
// btype := b_warehouse ;
28479: LD_ADDR_VAR 0 5
28483: PUSH
28484: LD_INT 1
28486: ST_TO_ADDR
// if btype = b_workshop then
28487: LD_VAR 0 5
28491: PUSH
28492: LD_INT 2
28494: EQUAL
28495: IFFALSE 28505
// btype := b_factory ;
28497: LD_ADDR_VAR 0 5
28501: PUSH
28502: LD_INT 3
28504: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28505: LD_ADDR_VAR 0 4
28509: PUSH
28510: LD_VAR 0 5
28514: PPUSH
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 248
28524: PPUSH
28525: CALL_OW 450
28529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28530: LD_ADDR_VAR 0 2
28534: PUSH
28535: LD_VAR 0 3
28539: PPUSH
28540: LD_INT 1
28542: PPUSH
28543: CALL_OW 275
28547: PUSH
28548: LD_VAR 0 4
28552: PUSH
28553: LD_INT 1
28555: ARRAY
28556: GREATEREQUAL
28557: PUSH
28558: LD_VAR 0 3
28562: PPUSH
28563: LD_INT 2
28565: PPUSH
28566: CALL_OW 275
28570: PUSH
28571: LD_VAR 0 4
28575: PUSH
28576: LD_INT 2
28578: ARRAY
28579: GREATEREQUAL
28580: AND
28581: PUSH
28582: LD_VAR 0 3
28586: PPUSH
28587: LD_INT 3
28589: PPUSH
28590: CALL_OW 275
28594: PUSH
28595: LD_VAR 0 4
28599: PUSH
28600: LD_INT 3
28602: ARRAY
28603: GREATEREQUAL
28604: AND
28605: ST_TO_ADDR
// end ;
28606: LD_VAR 0 2
28610: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
28615: PPUSH
// pom := GetBase ( building ) ;
28616: LD_ADDR_VAR 0 4
28620: PUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 274
28630: ST_TO_ADDR
// if not pom then
28631: LD_VAR 0 4
28635: NOT
28636: IFFALSE 28640
// exit ;
28638: GO 28741
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_VAR 0 1
28654: PPUSH
28655: CALL_OW 248
28659: PPUSH
28660: CALL_OW 450
28664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28665: LD_ADDR_VAR 0 3
28669: PUSH
28670: LD_VAR 0 4
28674: PPUSH
28675: LD_INT 1
28677: PPUSH
28678: CALL_OW 275
28682: PUSH
28683: LD_VAR 0 5
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: GREATEREQUAL
28692: PUSH
28693: LD_VAR 0 4
28697: PPUSH
28698: LD_INT 2
28700: PPUSH
28701: CALL_OW 275
28705: PUSH
28706: LD_VAR 0 5
28710: PUSH
28711: LD_INT 2
28713: ARRAY
28714: GREATEREQUAL
28715: AND
28716: PUSH
28717: LD_VAR 0 4
28721: PPUSH
28722: LD_INT 3
28724: PPUSH
28725: CALL_OW 275
28729: PUSH
28730: LD_VAR 0 5
28734: PUSH
28735: LD_INT 3
28737: ARRAY
28738: GREATEREQUAL
28739: AND
28740: ST_TO_ADDR
// end ;
28741: LD_VAR 0 3
28745: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28746: LD_INT 0
28748: PPUSH
28749: PPUSH
28750: PPUSH
28751: PPUSH
28752: PPUSH
28753: PPUSH
28754: PPUSH
28755: PPUSH
28756: PPUSH
28757: PPUSH
28758: PPUSH
// result := false ;
28759: LD_ADDR_VAR 0 8
28763: PUSH
28764: LD_INT 0
28766: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28767: LD_VAR 0 5
28771: NOT
28772: PUSH
28773: LD_VAR 0 1
28777: NOT
28778: OR
28779: PUSH
28780: LD_VAR 0 2
28784: NOT
28785: OR
28786: PUSH
28787: LD_VAR 0 3
28791: NOT
28792: OR
28793: IFFALSE 28797
// exit ;
28795: GO 29611
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28797: LD_ADDR_VAR 0 14
28801: PUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: LD_VAR 0 2
28811: PPUSH
28812: LD_VAR 0 3
28816: PPUSH
28817: LD_VAR 0 4
28821: PPUSH
28822: LD_VAR 0 5
28826: PUSH
28827: LD_INT 1
28829: ARRAY
28830: PPUSH
28831: CALL_OW 248
28835: PPUSH
28836: LD_INT 0
28838: PPUSH
28839: CALL 30864 0 6
28843: ST_TO_ADDR
// if not hexes then
28844: LD_VAR 0 14
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 29611
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28853: LD_ADDR_VAR 0 17
28857: PUSH
28858: LD_VAR 0 5
28862: PPUSH
28863: LD_INT 22
28865: PUSH
28866: LD_VAR 0 13
28870: PPUSH
28871: CALL_OW 255
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 30
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 30
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 72
28916: ST_TO_ADDR
// for i = 1 to hexes do
28917: LD_ADDR_VAR 0 9
28921: PUSH
28922: DOUBLE
28923: LD_INT 1
28925: DEC
28926: ST_TO_ADDR
28927: LD_VAR 0 14
28931: PUSH
28932: FOR_TO
28933: IFFALSE 29609
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28935: LD_ADDR_VAR 0 13
28939: PUSH
28940: LD_VAR 0 14
28944: PUSH
28945: LD_VAR 0 9
28949: ARRAY
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PPUSH
28955: LD_VAR 0 14
28959: PUSH
28960: LD_VAR 0 9
28964: ARRAY
28965: PUSH
28966: LD_INT 2
28968: ARRAY
28969: PPUSH
28970: CALL_OW 428
28974: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28975: LD_VAR 0 14
28979: PUSH
28980: LD_VAR 0 9
28984: ARRAY
28985: PUSH
28986: LD_INT 1
28988: ARRAY
28989: PPUSH
28990: LD_VAR 0 14
28994: PUSH
28995: LD_VAR 0 9
28999: ARRAY
29000: PUSH
29001: LD_INT 2
29003: ARRAY
29004: PPUSH
29005: CALL_OW 351
29009: PUSH
29010: LD_VAR 0 14
29014: PUSH
29015: LD_VAR 0 9
29019: ARRAY
29020: PUSH
29021: LD_INT 1
29023: ARRAY
29024: PPUSH
29025: LD_VAR 0 14
29029: PUSH
29030: LD_VAR 0 9
29034: ARRAY
29035: PUSH
29036: LD_INT 2
29038: ARRAY
29039: PPUSH
29040: CALL_OW 488
29044: NOT
29045: OR
29046: PUSH
29047: LD_VAR 0 13
29051: PPUSH
29052: CALL_OW 247
29056: PUSH
29057: LD_INT 3
29059: EQUAL
29060: OR
29061: IFFALSE 29067
// exit ;
29063: POP
29064: POP
29065: GO 29611
// if not tmp then
29067: LD_VAR 0 13
29071: NOT
29072: IFFALSE 29076
// continue ;
29074: GO 28932
// result := true ;
29076: LD_ADDR_VAR 0 8
29080: PUSH
29081: LD_INT 1
29083: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29084: LD_VAR 0 6
29088: PUSH
29089: LD_VAR 0 13
29093: PPUSH
29094: CALL_OW 247
29098: PUSH
29099: LD_INT 2
29101: EQUAL
29102: AND
29103: PUSH
29104: LD_VAR 0 13
29108: PPUSH
29109: CALL_OW 263
29113: PUSH
29114: LD_INT 1
29116: EQUAL
29117: AND
29118: IFFALSE 29282
// begin if IsDrivenBy ( tmp ) then
29120: LD_VAR 0 13
29124: PPUSH
29125: CALL_OW 311
29129: IFFALSE 29133
// continue ;
29131: GO 28932
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29133: LD_VAR 0 6
29137: PPUSH
29138: LD_INT 3
29140: PUSH
29141: LD_INT 60
29143: PUSH
29144: EMPTY
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 3
29153: PUSH
29154: LD_INT 55
29156: PUSH
29157: EMPTY
29158: LIST
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PPUSH
29168: CALL_OW 72
29172: IFFALSE 29280
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29174: LD_ADDR_VAR 0 18
29178: PUSH
29179: LD_VAR 0 6
29183: PPUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 60
29189: PUSH
29190: EMPTY
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: LD_INT 55
29202: PUSH
29203: EMPTY
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 72
29218: PUSH
29219: LD_INT 1
29221: ARRAY
29222: ST_TO_ADDR
// if IsInUnit ( driver ) then
29223: LD_VAR 0 18
29227: PPUSH
29228: CALL_OW 310
29232: IFFALSE 29243
// ComExit ( driver ) ;
29234: LD_VAR 0 18
29238: PPUSH
29239: CALL 54665 0 1
// AddComEnterUnit ( driver , tmp ) ;
29243: LD_VAR 0 18
29247: PPUSH
29248: LD_VAR 0 13
29252: PPUSH
29253: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29257: LD_VAR 0 18
29261: PPUSH
29262: LD_VAR 0 7
29266: PPUSH
29267: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29271: LD_VAR 0 18
29275: PPUSH
29276: CALL_OW 181
// end ; continue ;
29280: GO 28932
// end ; if not cleaners or not tmp in cleaners then
29282: LD_VAR 0 6
29286: NOT
29287: PUSH
29288: LD_VAR 0 13
29292: PUSH
29293: LD_VAR 0 6
29297: IN
29298: NOT
29299: OR
29300: IFFALSE 29607
// begin if dep then
29302: LD_VAR 0 17
29306: IFFALSE 29442
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29308: LD_ADDR_VAR 0 16
29312: PUSH
29313: LD_VAR 0 17
29317: PUSH
29318: LD_INT 1
29320: ARRAY
29321: PPUSH
29322: CALL_OW 250
29326: PPUSH
29327: LD_VAR 0 17
29331: PUSH
29332: LD_INT 1
29334: ARRAY
29335: PPUSH
29336: CALL_OW 254
29340: PPUSH
29341: LD_INT 5
29343: PPUSH
29344: CALL_OW 272
29348: PUSH
29349: LD_VAR 0 17
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PPUSH
29358: CALL_OW 251
29362: PPUSH
29363: LD_VAR 0 17
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PPUSH
29372: CALL_OW 254
29376: PPUSH
29377: LD_INT 5
29379: PPUSH
29380: CALL_OW 273
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29389: LD_VAR 0 16
29393: PUSH
29394: LD_INT 1
29396: ARRAY
29397: PPUSH
29398: LD_VAR 0 16
29402: PUSH
29403: LD_INT 2
29405: ARRAY
29406: PPUSH
29407: CALL_OW 488
29411: IFFALSE 29442
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29413: LD_VAR 0 13
29417: PPUSH
29418: LD_VAR 0 16
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: LD_VAR 0 16
29431: PUSH
29432: LD_INT 2
29434: ARRAY
29435: PPUSH
29436: CALL_OW 111
// continue ;
29440: GO 28932
// end ; end ; r := GetDir ( tmp ) ;
29442: LD_ADDR_VAR 0 15
29446: PUSH
29447: LD_VAR 0 13
29451: PPUSH
29452: CALL_OW 254
29456: ST_TO_ADDR
// if r = 5 then
29457: LD_VAR 0 15
29461: PUSH
29462: LD_INT 5
29464: EQUAL
29465: IFFALSE 29475
// r := 0 ;
29467: LD_ADDR_VAR 0 15
29471: PUSH
29472: LD_INT 0
29474: ST_TO_ADDR
// for j = r to 5 do
29475: LD_ADDR_VAR 0 10
29479: PUSH
29480: DOUBLE
29481: LD_VAR 0 15
29485: DEC
29486: ST_TO_ADDR
29487: LD_INT 5
29489: PUSH
29490: FOR_TO
29491: IFFALSE 29605
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29493: LD_ADDR_VAR 0 11
29497: PUSH
29498: LD_VAR 0 13
29502: PPUSH
29503: CALL_OW 250
29507: PPUSH
29508: LD_VAR 0 10
29512: PPUSH
29513: LD_INT 2
29515: PPUSH
29516: CALL_OW 272
29520: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29521: LD_ADDR_VAR 0 12
29525: PUSH
29526: LD_VAR 0 13
29530: PPUSH
29531: CALL_OW 251
29535: PPUSH
29536: LD_VAR 0 10
29540: PPUSH
29541: LD_INT 2
29543: PPUSH
29544: CALL_OW 273
29548: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29549: LD_VAR 0 11
29553: PPUSH
29554: LD_VAR 0 12
29558: PPUSH
29559: CALL_OW 488
29563: PUSH
29564: LD_VAR 0 11
29568: PPUSH
29569: LD_VAR 0 12
29573: PPUSH
29574: CALL_OW 428
29578: NOT
29579: AND
29580: IFFALSE 29603
// begin ComMoveXY ( tmp , _x , _y ) ;
29582: LD_VAR 0 13
29586: PPUSH
29587: LD_VAR 0 11
29591: PPUSH
29592: LD_VAR 0 12
29596: PPUSH
29597: CALL_OW 111
// break ;
29601: GO 29605
// end ; end ;
29603: GO 29490
29605: POP
29606: POP
// end ; end ;
29607: GO 28932
29609: POP
29610: POP
// end ;
29611: LD_VAR 0 8
29615: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29616: LD_INT 0
29618: PPUSH
// result := true ;
29619: LD_ADDR_VAR 0 3
29623: PUSH
29624: LD_INT 1
29626: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29627: LD_VAR 0 2
29631: PUSH
29632: LD_INT 24
29634: DOUBLE
29635: EQUAL
29636: IFTRUE 29646
29638: LD_INT 33
29640: DOUBLE
29641: EQUAL
29642: IFTRUE 29646
29644: GO 29671
29646: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29647: LD_ADDR_VAR 0 3
29651: PUSH
29652: LD_INT 32
29654: PPUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 321
29664: PUSH
29665: LD_INT 2
29667: EQUAL
29668: ST_TO_ADDR
29669: GO 29987
29671: LD_INT 20
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29704
29679: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29680: LD_ADDR_VAR 0 3
29684: PUSH
29685: LD_INT 6
29687: PPUSH
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 321
29697: PUSH
29698: LD_INT 2
29700: EQUAL
29701: ST_TO_ADDR
29702: GO 29987
29704: LD_INT 22
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29718
29710: LD_INT 36
29712: DOUBLE
29713: EQUAL
29714: IFTRUE 29718
29716: GO 29743
29718: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29719: LD_ADDR_VAR 0 3
29723: PUSH
29724: LD_INT 15
29726: PPUSH
29727: LD_VAR 0 1
29731: PPUSH
29732: CALL_OW 321
29736: PUSH
29737: LD_INT 2
29739: EQUAL
29740: ST_TO_ADDR
29741: GO 29987
29743: LD_INT 30
29745: DOUBLE
29746: EQUAL
29747: IFTRUE 29751
29749: GO 29776
29751: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29752: LD_ADDR_VAR 0 3
29756: PUSH
29757: LD_INT 20
29759: PPUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL_OW 321
29769: PUSH
29770: LD_INT 2
29772: EQUAL
29773: ST_TO_ADDR
29774: GO 29987
29776: LD_INT 28
29778: DOUBLE
29779: EQUAL
29780: IFTRUE 29790
29782: LD_INT 21
29784: DOUBLE
29785: EQUAL
29786: IFTRUE 29790
29788: GO 29815
29790: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29791: LD_ADDR_VAR 0 3
29795: PUSH
29796: LD_INT 21
29798: PPUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 321
29808: PUSH
29809: LD_INT 2
29811: EQUAL
29812: ST_TO_ADDR
29813: GO 29987
29815: LD_INT 16
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 29848
29823: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29824: LD_ADDR_VAR 0 3
29828: PUSH
29829: LD_INT 84
29831: PPUSH
29832: LD_VAR 0 1
29836: PPUSH
29837: CALL_OW 321
29841: PUSH
29842: LD_INT 2
29844: EQUAL
29845: ST_TO_ADDR
29846: GO 29987
29848: LD_INT 19
29850: DOUBLE
29851: EQUAL
29852: IFTRUE 29862
29854: LD_INT 23
29856: DOUBLE
29857: EQUAL
29858: IFTRUE 29862
29860: GO 29887
29862: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29863: LD_ADDR_VAR 0 3
29867: PUSH
29868: LD_INT 83
29870: PPUSH
29871: LD_VAR 0 1
29875: PPUSH
29876: CALL_OW 321
29880: PUSH
29881: LD_INT 2
29883: EQUAL
29884: ST_TO_ADDR
29885: GO 29987
29887: LD_INT 17
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29920
29895: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29896: LD_ADDR_VAR 0 3
29900: PUSH
29901: LD_INT 39
29903: PPUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 321
29913: PUSH
29914: LD_INT 2
29916: EQUAL
29917: ST_TO_ADDR
29918: GO 29987
29920: LD_INT 18
29922: DOUBLE
29923: EQUAL
29924: IFTRUE 29928
29926: GO 29953
29928: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29929: LD_ADDR_VAR 0 3
29933: PUSH
29934: LD_INT 40
29936: PPUSH
29937: LD_VAR 0 1
29941: PPUSH
29942: CALL_OW 321
29946: PUSH
29947: LD_INT 2
29949: EQUAL
29950: ST_TO_ADDR
29951: GO 29987
29953: LD_INT 27
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29986
29961: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29962: LD_ADDR_VAR 0 3
29966: PUSH
29967: LD_INT 35
29969: PPUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: CALL_OW 321
29979: PUSH
29980: LD_INT 2
29982: EQUAL
29983: ST_TO_ADDR
29984: GO 29987
29986: POP
// end ;
29987: LD_VAR 0 3
29991: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29992: LD_INT 0
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
// result := false ;
30005: LD_ADDR_VAR 0 6
30009: PUSH
30010: LD_INT 0
30012: ST_TO_ADDR
// if btype = b_depot then
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 0
30020: EQUAL
30021: IFFALSE 30033
// begin result := true ;
30023: LD_ADDR_VAR 0 6
30027: PUSH
30028: LD_INT 1
30030: ST_TO_ADDR
// exit ;
30031: GO 30859
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30033: LD_VAR 0 1
30037: NOT
30038: PUSH
30039: LD_VAR 0 1
30043: PPUSH
30044: CALL_OW 266
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: IN
30059: NOT
30060: OR
30061: PUSH
30062: LD_VAR 0 2
30066: NOT
30067: OR
30068: PUSH
30069: LD_VAR 0 5
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 4
30088: PUSH
30089: LD_INT 5
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: IN
30100: NOT
30101: OR
30102: PUSH
30103: LD_VAR 0 3
30107: PPUSH
30108: LD_VAR 0 4
30112: PPUSH
30113: CALL_OW 488
30117: NOT
30118: OR
30119: IFFALSE 30123
// exit ;
30121: GO 30859
// side := GetSide ( depot ) ;
30123: LD_ADDR_VAR 0 9
30127: PUSH
30128: LD_VAR 0 1
30132: PPUSH
30133: CALL_OW 255
30137: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30138: LD_VAR 0 9
30142: PPUSH
30143: LD_VAR 0 2
30147: PPUSH
30148: CALL 29616 0 2
30152: NOT
30153: IFFALSE 30157
// exit ;
30155: GO 30859
// pom := GetBase ( depot ) ;
30157: LD_ADDR_VAR 0 10
30161: PUSH
30162: LD_VAR 0 1
30166: PPUSH
30167: CALL_OW 274
30171: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30172: LD_ADDR_VAR 0 11
30176: PUSH
30177: LD_VAR 0 2
30181: PPUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 248
30191: PPUSH
30192: CALL_OW 450
30196: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30197: LD_VAR 0 10
30201: PPUSH
30202: LD_INT 1
30204: PPUSH
30205: CALL_OW 275
30209: PUSH
30210: LD_VAR 0 11
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: GREATEREQUAL
30219: PUSH
30220: LD_VAR 0 10
30224: PPUSH
30225: LD_INT 2
30227: PPUSH
30228: CALL_OW 275
30232: PUSH
30233: LD_VAR 0 11
30237: PUSH
30238: LD_INT 2
30240: ARRAY
30241: GREATEREQUAL
30242: AND
30243: PUSH
30244: LD_VAR 0 10
30248: PPUSH
30249: LD_INT 3
30251: PPUSH
30252: CALL_OW 275
30256: PUSH
30257: LD_VAR 0 11
30261: PUSH
30262: LD_INT 3
30264: ARRAY
30265: GREATEREQUAL
30266: AND
30267: NOT
30268: IFFALSE 30272
// exit ;
30270: GO 30859
// if GetBType ( depot ) = b_depot then
30272: LD_VAR 0 1
30276: PPUSH
30277: CALL_OW 266
30281: PUSH
30282: LD_INT 0
30284: EQUAL
30285: IFFALSE 30297
// dist := 28 else
30287: LD_ADDR_VAR 0 14
30291: PUSH
30292: LD_INT 28
30294: ST_TO_ADDR
30295: GO 30305
// dist := 36 ;
30297: LD_ADDR_VAR 0 14
30301: PUSH
30302: LD_INT 36
30304: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30305: LD_VAR 0 1
30309: PPUSH
30310: LD_VAR 0 3
30314: PPUSH
30315: LD_VAR 0 4
30319: PPUSH
30320: CALL_OW 297
30324: PUSH
30325: LD_VAR 0 14
30329: GREATER
30330: IFFALSE 30334
// exit ;
30332: GO 30859
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30334: LD_ADDR_VAR 0 12
30338: PUSH
30339: LD_VAR 0 2
30343: PPUSH
30344: LD_VAR 0 3
30348: PPUSH
30349: LD_VAR 0 4
30353: PPUSH
30354: LD_VAR 0 5
30358: PPUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 248
30368: PPUSH
30369: LD_INT 0
30371: PPUSH
30372: CALL 30864 0 6
30376: ST_TO_ADDR
// if not hexes then
30377: LD_VAR 0 12
30381: NOT
30382: IFFALSE 30386
// exit ;
30384: GO 30859
// hex := GetHexInfo ( x , y ) ;
30386: LD_ADDR_VAR 0 15
30390: PUSH
30391: LD_VAR 0 3
30395: PPUSH
30396: LD_VAR 0 4
30400: PPUSH
30401: CALL_OW 546
30405: ST_TO_ADDR
// if hex [ 1 ] then
30406: LD_VAR 0 15
30410: PUSH
30411: LD_INT 1
30413: ARRAY
30414: IFFALSE 30418
// exit ;
30416: GO 30859
// height := hex [ 2 ] ;
30418: LD_ADDR_VAR 0 13
30422: PUSH
30423: LD_VAR 0 15
30427: PUSH
30428: LD_INT 2
30430: ARRAY
30431: ST_TO_ADDR
// for i = 1 to hexes do
30432: LD_ADDR_VAR 0 7
30436: PUSH
30437: DOUBLE
30438: LD_INT 1
30440: DEC
30441: ST_TO_ADDR
30442: LD_VAR 0 12
30446: PUSH
30447: FOR_TO
30448: IFFALSE 30778
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30450: LD_VAR 0 12
30454: PUSH
30455: LD_VAR 0 7
30459: ARRAY
30460: PUSH
30461: LD_INT 1
30463: ARRAY
30464: PPUSH
30465: LD_VAR 0 12
30469: PUSH
30470: LD_VAR 0 7
30474: ARRAY
30475: PUSH
30476: LD_INT 2
30478: ARRAY
30479: PPUSH
30480: CALL_OW 488
30484: NOT
30485: PUSH
30486: LD_VAR 0 12
30490: PUSH
30491: LD_VAR 0 7
30495: ARRAY
30496: PUSH
30497: LD_INT 1
30499: ARRAY
30500: PPUSH
30501: LD_VAR 0 12
30505: PUSH
30506: LD_VAR 0 7
30510: ARRAY
30511: PUSH
30512: LD_INT 2
30514: ARRAY
30515: PPUSH
30516: CALL_OW 428
30520: PUSH
30521: LD_INT 0
30523: GREATER
30524: OR
30525: PUSH
30526: LD_VAR 0 12
30530: PUSH
30531: LD_VAR 0 7
30535: ARRAY
30536: PUSH
30537: LD_INT 1
30539: ARRAY
30540: PPUSH
30541: LD_VAR 0 12
30545: PUSH
30546: LD_VAR 0 7
30550: ARRAY
30551: PUSH
30552: LD_INT 2
30554: ARRAY
30555: PPUSH
30556: CALL_OW 351
30560: OR
30561: IFFALSE 30567
// exit ;
30563: POP
30564: POP
30565: GO 30859
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30567: LD_ADDR_VAR 0 8
30571: PUSH
30572: LD_VAR 0 12
30576: PUSH
30577: LD_VAR 0 7
30581: ARRAY
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: PPUSH
30587: LD_VAR 0 12
30591: PUSH
30592: LD_VAR 0 7
30596: ARRAY
30597: PUSH
30598: LD_INT 2
30600: ARRAY
30601: PPUSH
30602: CALL_OW 546
30606: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30607: LD_VAR 0 8
30611: PUSH
30612: LD_INT 1
30614: ARRAY
30615: PUSH
30616: LD_VAR 0 8
30620: PUSH
30621: LD_INT 2
30623: ARRAY
30624: PUSH
30625: LD_VAR 0 13
30629: PUSH
30630: LD_INT 2
30632: PLUS
30633: GREATER
30634: OR
30635: PUSH
30636: LD_VAR 0 8
30640: PUSH
30641: LD_INT 2
30643: ARRAY
30644: PUSH
30645: LD_VAR 0 13
30649: PUSH
30650: LD_INT 2
30652: MINUS
30653: LESS
30654: OR
30655: PUSH
30656: LD_VAR 0 8
30660: PUSH
30661: LD_INT 3
30663: ARRAY
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 8
30670: PUSH
30671: LD_INT 9
30673: PUSH
30674: LD_INT 10
30676: PUSH
30677: LD_INT 11
30679: PUSH
30680: LD_INT 12
30682: PUSH
30683: LD_INT 13
30685: PUSH
30686: LD_INT 16
30688: PUSH
30689: LD_INT 17
30691: PUSH
30692: LD_INT 18
30694: PUSH
30695: LD_INT 19
30697: PUSH
30698: LD_INT 20
30700: PUSH
30701: LD_INT 21
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: IN
30719: NOT
30720: OR
30721: PUSH
30722: LD_VAR 0 8
30726: PUSH
30727: LD_INT 5
30729: ARRAY
30730: NOT
30731: OR
30732: PUSH
30733: LD_VAR 0 8
30737: PUSH
30738: LD_INT 6
30740: ARRAY
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 7
30750: PUSH
30751: LD_INT 9
30753: PUSH
30754: LD_INT 10
30756: PUSH
30757: LD_INT 11
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: IN
30768: NOT
30769: OR
30770: IFFALSE 30776
// exit ;
30772: POP
30773: POP
30774: GO 30859
// end ;
30776: GO 30447
30778: POP
30779: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30780: LD_VAR 0 9
30784: PPUSH
30785: LD_VAR 0 3
30789: PPUSH
30790: LD_VAR 0 4
30794: PPUSH
30795: LD_INT 20
30797: PPUSH
30798: CALL 22782 0 4
30802: PUSH
30803: LD_INT 4
30805: ARRAY
30806: IFFALSE 30810
// exit ;
30808: GO 30859
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30810: LD_VAR 0 2
30814: PUSH
30815: LD_INT 29
30817: PUSH
30818: LD_INT 30
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: IN
30825: PUSH
30826: LD_VAR 0 3
30830: PPUSH
30831: LD_VAR 0 4
30835: PPUSH
30836: LD_VAR 0 9
30840: PPUSH
30841: CALL_OW 440
30845: NOT
30846: AND
30847: IFFALSE 30851
// exit ;
30849: GO 30859
// result := true ;
30851: LD_ADDR_VAR 0 6
30855: PUSH
30856: LD_INT 1
30858: ST_TO_ADDR
// end ;
30859: LD_VAR 0 6
30863: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
// result = [ ] ;
30924: LD_ADDR_VAR 0 7
30928: PUSH
30929: EMPTY
30930: ST_TO_ADDR
// temp_list = [ ] ;
30931: LD_ADDR_VAR 0 9
30935: PUSH
30936: EMPTY
30937: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30938: LD_VAR 0 4
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: IN
30969: NOT
30970: PUSH
30971: LD_VAR 0 1
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: IN
30986: PUSH
30987: LD_VAR 0 5
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 2
30997: PUSH
30998: LD_INT 3
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: IN
31006: NOT
31007: AND
31008: OR
31009: IFFALSE 31013
// exit ;
31011: GO 49404
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31013: LD_VAR 0 1
31017: PUSH
31018: LD_INT 6
31020: PUSH
31021: LD_INT 7
31023: PUSH
31024: LD_INT 8
31026: PUSH
31027: LD_INT 13
31029: PUSH
31030: LD_INT 12
31032: PUSH
31033: LD_INT 15
31035: PUSH
31036: LD_INT 11
31038: PUSH
31039: LD_INT 14
31041: PUSH
31042: LD_INT 10
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: IN
31056: IFFALSE 31066
// btype = b_lab ;
31058: LD_ADDR_VAR 0 1
31062: PUSH
31063: LD_INT 6
31065: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31066: LD_VAR 0 6
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: IN
31085: NOT
31086: PUSH
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 6
31106: PUSH
31107: LD_INT 36
31109: PUSH
31110: LD_INT 4
31112: PUSH
31113: LD_INT 5
31115: PUSH
31116: LD_INT 31
31118: PUSH
31119: LD_INT 32
31121: PUSH
31122: LD_INT 33
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: IN
31138: NOT
31139: PUSH
31140: LD_VAR 0 6
31144: PUSH
31145: LD_INT 1
31147: EQUAL
31148: AND
31149: OR
31150: PUSH
31151: LD_VAR 0 1
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: IN
31166: NOT
31167: PUSH
31168: LD_VAR 0 6
31172: PUSH
31173: LD_INT 2
31175: EQUAL
31176: AND
31177: OR
31178: IFFALSE 31188
// mode = 0 ;
31180: LD_ADDR_VAR 0 6
31184: PUSH
31185: LD_INT 0
31187: ST_TO_ADDR
// case mode of 0 :
31188: LD_VAR 0 6
31192: PUSH
31193: LD_INT 0
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 42654
31201: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31202: LD_ADDR_VAR 0 11
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: LD_INT 2
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: LD_INT 2
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31395: LD_ADDR_VAR 0 12
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31591: LD_ADDR_VAR 0 13
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 3
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 3
31762: NEG
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31790: LD_ADDR_VAR 0 14
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 3
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31986: LD_ADDR_VAR 0 15
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32179: LD_ADDR_VAR 0 16
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: LD_INT 1
32199: NEG
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 3
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32372: LD_ADDR_VAR 0 17
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32602: LD_ADDR_VAR 0 18
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 2
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32832: LD_ADDR_VAR 0 19
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: LD_INT 1
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: NEG
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33062: LD_ADDR_VAR 0 20
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: LD_INT 2
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: NEG
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33292: LD_ADDR_VAR 0 21
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33522: LD_ADDR_VAR 0 22
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33752: LD_ADDR_VAR 0 23
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: LD_INT 2
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 2
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 3
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34032: LD_ADDR_VAR 0 24
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 2
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 3
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34308: LD_ADDR_VAR 0 25
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: NEG
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34582: LD_ADDR_VAR 0 26
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34858: LD_ADDR_VAR 0 27
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 2
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: NEG
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: NEG
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 3
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 3
35103: NEG
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35138: LD_ADDR_VAR 0 28
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: NEG
35350: PUSH
35351: LD_INT 3
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: LD_INT 3
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: LD_INT 2
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35420: LD_ADDR_VAR 0 29
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35699: LD_ADDR_VAR 0 30
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: NEG
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 3
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35977: LD_ADDR_VAR 0 31
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: LD_INT 3
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 3
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 3
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36255: LD_ADDR_VAR 0 32
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: LD_INT 3
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 3
36498: NEG
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36533: LD_ADDR_VAR 0 33
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: LD_INT 3
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 3
36777: NEG
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36812: LD_ADDR_VAR 0 34
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 3
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 3
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37092: LD_ADDR_VAR 0 35
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 2
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37204: LD_ADDR_VAR 0 36
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37316: LD_ADDR_VAR 0 37
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37428: LD_ADDR_VAR 0 38
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37540: LD_ADDR_VAR 0 39
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: LD_INT 2
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37652: LD_ADDR_VAR 0 40
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37764: LD_ADDR_VAR 0 41
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: LD_INT 3
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 3
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 3
38038: NEG
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 3
38049: NEG
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: NEG
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 3
38073: NEG
38074: PUSH
38075: LD_INT 3
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38114: LD_ADDR_VAR 0 42
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: LD_INT 3
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 3
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 3
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: LD_INT 2
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: LD_INT 3
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38464: LD_ADDR_VAR 0 43
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 3
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 3
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 3
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 3
38760: NEG
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 3
38771: NEG
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38812: LD_ADDR_VAR 0 44
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 3
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 3
39086: NEG
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 3
39097: NEG
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: NEG
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39162: LD_ADDR_VAR 0 45
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: LD_INT 3
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 3
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 3
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39512: LD_ADDR_VAR 0 46
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 3
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 3
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 3
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 3
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39860: LD_ADDR_VAR 0 47
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40011: LD_ADDR_VAR 0 48
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40158: LD_ADDR_VAR 0 49
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40302: LD_ADDR_VAR 0 50
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40446: LD_ADDR_VAR 0 51
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40593: LD_ADDR_VAR 0 52
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40744: LD_ADDR_VAR 0 53
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 2
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40974: LD_ADDR_VAR 0 54
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 2
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41204: LD_ADDR_VAR 0 55
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 2
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41434: LD_ADDR_VAR 0 56
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41664: LD_ADDR_VAR 0 57
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41894: LD_ADDR_VAR 0 58
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42124: LD_ADDR_VAR 0 59
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42212: LD_ADDR_VAR 0 60
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42300: LD_ADDR_VAR 0 61
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42388: LD_ADDR_VAR 0 62
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42476: LD_ADDR_VAR 0 63
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42564: LD_ADDR_VAR 0 64
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
// end ; 1 :
42652: GO 48549
42654: LD_INT 1
42656: DOUBLE
42657: EQUAL
42658: IFTRUE 42662
42660: GO 45285
42662: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42663: LD_ADDR_VAR 0 11
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 3
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42707: LD_ADDR_VAR 0 12
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42748: LD_ADDR_VAR 0 13
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 3
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42788: LD_ADDR_VAR 0 14
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42829: LD_ADDR_VAR 0 15
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 3
42847: NEG
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42873: LD_ADDR_VAR 0 16
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42919: LD_ADDR_VAR 0 17
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 3
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42963: LD_ADDR_VAR 0 18
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43004: LD_ADDR_VAR 0 19
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43044: LD_ADDR_VAR 0 20
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43085: LD_ADDR_VAR 0 21
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: NEG
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 3
43114: NEG
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43129: LD_ADDR_VAR 0 22
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: LD_INT 3
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43175: LD_ADDR_VAR 0 23
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 3
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 4
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43219: LD_ADDR_VAR 0 24
43223: PUSH
43224: LD_INT 3
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 4
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43260: LD_ADDR_VAR 0 25
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: LD_INT 4
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43300: LD_ADDR_VAR 0 26
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43341: LD_ADDR_VAR 0 27
43345: PUSH
43346: LD_INT 3
43348: NEG
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 4
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43385: LD_ADDR_VAR 0 28
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: LD_INT 4
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 4
43416: NEG
43417: PUSH
43418: LD_INT 3
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43431: LD_ADDR_VAR 0 29
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 3
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 3
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 4
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 4
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 5
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 5
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 4
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 6
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 6
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 5
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43586: LD_ADDR_VAR 0 30
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 4
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 4
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 4
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 5
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 5
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 5
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 6
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 6
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43729: LD_ADDR_VAR 0 31
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: LD_INT 3
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: LD_INT 4
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: LD_INT 4
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 5
43796: PUSH
43797: LD_INT 4
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 5
43806: PUSH
43807: LD_INT 5
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 4
43816: PUSH
43817: LD_INT 5
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 6
43826: PUSH
43827: LD_INT 5
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 6
43836: PUSH
43837: LD_INT 6
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 5
43846: PUSH
43847: LD_INT 6
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43868: LD_ADDR_VAR 0 32
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 3
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 4
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 4
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 3
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 5
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 5
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 4
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 6
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 6
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 5
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44011: LD_ADDR_VAR 0 33
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 4
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 4
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 4
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 5
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 5
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 5
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 6
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 6
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44166: LD_ADDR_VAR 0 34
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 3
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: LD_INT 4
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 4
44221: NEG
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: LD_INT 4
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: LD_INT 5
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: LD_INT 4
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: NEG
44270: PUSH
44271: LD_INT 5
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: LD_INT 6
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 6
44293: NEG
44294: PUSH
44295: LD_INT 5
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 6
44305: NEG
44306: PUSH
44307: LD_INT 6
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44329: LD_ADDR_VAR 0 41
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44373: LD_ADDR_VAR 0 42
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44414: LD_ADDR_VAR 0 43
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44454: LD_ADDR_VAR 0 44
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44495: LD_ADDR_VAR 0 45
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44539: LD_ADDR_VAR 0 46
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: LD_INT 3
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 3
44570: NEG
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44585: LD_ADDR_VAR 0 47
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: LD_INT 3
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 3
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44618: LD_ADDR_VAR 0 48
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44649: LD_ADDR_VAR 0 49
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44678: LD_ADDR_VAR 0 50
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44707: LD_ADDR_VAR 0 51
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44738: LD_ADDR_VAR 0 52
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44771: LD_ADDR_VAR 0 53
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44815: LD_ADDR_VAR 0 54
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44856: LD_ADDR_VAR 0 55
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: LD_INT 3
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44896: LD_ADDR_VAR 0 56
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 3
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44937: LD_ADDR_VAR 0 57
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44981: LD_ADDR_VAR 0 58
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 3
45012: NEG
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45027: LD_ADDR_VAR 0 59
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45071: LD_ADDR_VAR 0 60
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45112: LD_ADDR_VAR 0 61
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45152: LD_ADDR_VAR 0 62
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45193: LD_ADDR_VAR 0 63
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45237: LD_ADDR_VAR 0 64
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// end ; 2 :
45283: GO 48549
45285: LD_INT 2
45287: DOUBLE
45288: EQUAL
45289: IFTRUE 45293
45291: GO 48548
45293: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45294: LD_ADDR_VAR 0 29
45298: PUSH
45299: LD_INT 4
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 4
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 5
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 5
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 4
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 5
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 4
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: LD_INT 4
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: LD_INT 4
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 4
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 4
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 4
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 4
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 5
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 5
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 4
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: LD_INT 5
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: LD_INT 3
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 3
45577: NEG
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 3
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 4
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 4
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 4
45679: NEG
45680: PUSH
45681: LD_INT 4
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 4
45691: NEG
45692: PUSH
45693: LD_INT 5
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: LD_INT 4
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: NEG
45716: PUSH
45717: LD_INT 3
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 4
45727: NEG
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 5
45739: NEG
45740: PUSH
45741: LD_INT 4
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 5
45751: NEG
45752: PUSH
45753: LD_INT 5
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: LD_INT 5
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 5
45775: NEG
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45832: LD_ADDR_VAR 0 30
45836: PUSH
45837: LD_INT 4
45839: PUSH
45840: LD_INT 4
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 5
45859: PUSH
45860: LD_INT 4
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 5
45869: PUSH
45870: LD_INT 5
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 4
45879: PUSH
45880: LD_INT 5
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: LD_INT 4
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 3
45899: PUSH
45900: LD_INT 3
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 5
45909: PUSH
45910: LD_INT 3
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 3
45919: PUSH
45920: LD_INT 5
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 4
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 4
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 3
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 4
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 4
46022: NEG
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 4
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 4
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 5
46078: NEG
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 5
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 5
46101: NEG
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: LD_INT 4
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 4
46184: NEG
46185: PUSH
46186: LD_INT 3
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: NEG
46197: PUSH
46198: LD_INT 4
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 4
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 4
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 5
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 4
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 4
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 5
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 3
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 5
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46379: LD_ADDR_VAR 0 31
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 4
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 5
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 5
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 4
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 5
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 4
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 4
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 4
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 4
46581: NEG
46582: PUSH
46583: LD_INT 4
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: LD_INT 5
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: LD_INT 4
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: LD_INT 3
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 4
46629: NEG
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 5
46641: NEG
46642: PUSH
46643: LD_INT 4
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 5
46653: NEG
46654: PUSH
46655: LD_INT 5
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: LD_INT 5
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 5
46677: NEG
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 3
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 4
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 3
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 4
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: LD_INT 4
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 4
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 5
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 5
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 5
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46929: LD_ADDR_VAR 0 32
46933: PUSH
46934: LD_INT 4
46936: NEG
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 4
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: NEG
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 4
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 5
46992: NEG
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 5
47003: NEG
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 5
47015: NEG
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: LD_INT 4
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 3
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 4
47098: NEG
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 4
47110: NEG
47111: PUSH
47112: LD_INT 4
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 4
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 4
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 4
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 5
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 4
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 4
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 5
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 5
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 4
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 4
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 4
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 4
47341: PUSH
47342: LD_INT 4
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 4
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 5
47361: PUSH
47362: LD_INT 4
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 5
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 4
47381: PUSH
47382: LD_INT 5
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 4
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 5
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 5
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47476: LD_ADDR_VAR 0 33
47480: PUSH
47481: LD_INT 4
47483: NEG
47484: PUSH
47485: LD_INT 4
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: LD_INT 5
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: LD_INT 4
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 4
47531: NEG
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 5
47543: NEG
47544: PUSH
47545: LD_INT 4
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 5
47555: NEG
47556: PUSH
47557: LD_INT 5
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: NEG
47568: PUSH
47569: LD_INT 5
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 5
47579: NEG
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 4
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 3
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 4
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 4
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 4
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 5
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 5
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 4
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 3
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 5
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 4
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 4
47816: PUSH
47817: LD_INT 4
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 4
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 4
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 4
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 4
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 4
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 5
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 5
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 4
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: LD_INT 5
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48014: LD_ADDR_VAR 0 34
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 4
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 5
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: LD_INT 4
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 4
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 5
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 5
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 4
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 4
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 4
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 4
48216: PUSH
48217: LD_INT 4
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 4
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 5
48236: PUSH
48237: LD_INT 4
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 5
48246: PUSH
48247: LD_INT 5
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 4
48256: PUSH
48257: LD_INT 5
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: LD_INT 4
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: LD_INT 3
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 5
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 5
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 3
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 4
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 4
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 4
48399: NEG
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 4
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 4
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 5
48455: NEG
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 5
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 5
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// end ; end ;
48546: GO 48549
48548: POP
// case btype of b_depot , b_warehouse :
48549: LD_VAR 0 1
48553: PUSH
48554: LD_INT 0
48556: DOUBLE
48557: EQUAL
48558: IFTRUE 48568
48560: LD_INT 1
48562: DOUBLE
48563: EQUAL
48564: IFTRUE 48568
48566: GO 48769
48568: POP
// case nation of nation_american :
48569: LD_VAR 0 5
48573: PUSH
48574: LD_INT 1
48576: DOUBLE
48577: EQUAL
48578: IFTRUE 48582
48580: GO 48638
48582: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48583: LD_ADDR_VAR 0 9
48587: PUSH
48588: LD_VAR 0 11
48592: PUSH
48593: LD_VAR 0 12
48597: PUSH
48598: LD_VAR 0 13
48602: PUSH
48603: LD_VAR 0 14
48607: PUSH
48608: LD_VAR 0 15
48612: PUSH
48613: LD_VAR 0 16
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: PUSH
48626: LD_VAR 0 4
48630: PUSH
48631: LD_INT 1
48633: PLUS
48634: ARRAY
48635: ST_TO_ADDR
48636: GO 48767
48638: LD_INT 2
48640: DOUBLE
48641: EQUAL
48642: IFTRUE 48646
48644: GO 48702
48646: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48647: LD_ADDR_VAR 0 9
48651: PUSH
48652: LD_VAR 0 17
48656: PUSH
48657: LD_VAR 0 18
48661: PUSH
48662: LD_VAR 0 19
48666: PUSH
48667: LD_VAR 0 20
48671: PUSH
48672: LD_VAR 0 21
48676: PUSH
48677: LD_VAR 0 22
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: PUSH
48690: LD_VAR 0 4
48694: PUSH
48695: LD_INT 1
48697: PLUS
48698: ARRAY
48699: ST_TO_ADDR
48700: GO 48767
48702: LD_INT 3
48704: DOUBLE
48705: EQUAL
48706: IFTRUE 48710
48708: GO 48766
48710: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48711: LD_ADDR_VAR 0 9
48715: PUSH
48716: LD_VAR 0 23
48720: PUSH
48721: LD_VAR 0 24
48725: PUSH
48726: LD_VAR 0 25
48730: PUSH
48731: LD_VAR 0 26
48735: PUSH
48736: LD_VAR 0 27
48740: PUSH
48741: LD_VAR 0 28
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: PUSH
48754: LD_VAR 0 4
48758: PUSH
48759: LD_INT 1
48761: PLUS
48762: ARRAY
48763: ST_TO_ADDR
48764: GO 48767
48766: POP
48767: GO 49322
48769: LD_INT 2
48771: DOUBLE
48772: EQUAL
48773: IFTRUE 48783
48775: LD_INT 3
48777: DOUBLE
48778: EQUAL
48779: IFTRUE 48783
48781: GO 48839
48783: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48784: LD_ADDR_VAR 0 9
48788: PUSH
48789: LD_VAR 0 29
48793: PUSH
48794: LD_VAR 0 30
48798: PUSH
48799: LD_VAR 0 31
48803: PUSH
48804: LD_VAR 0 32
48808: PUSH
48809: LD_VAR 0 33
48813: PUSH
48814: LD_VAR 0 34
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: PUSH
48827: LD_VAR 0 4
48831: PUSH
48832: LD_INT 1
48834: PLUS
48835: ARRAY
48836: ST_TO_ADDR
48837: GO 49322
48839: LD_INT 16
48841: DOUBLE
48842: EQUAL
48843: IFTRUE 48901
48845: LD_INT 17
48847: DOUBLE
48848: EQUAL
48849: IFTRUE 48901
48851: LD_INT 18
48853: DOUBLE
48854: EQUAL
48855: IFTRUE 48901
48857: LD_INT 19
48859: DOUBLE
48860: EQUAL
48861: IFTRUE 48901
48863: LD_INT 22
48865: DOUBLE
48866: EQUAL
48867: IFTRUE 48901
48869: LD_INT 20
48871: DOUBLE
48872: EQUAL
48873: IFTRUE 48901
48875: LD_INT 21
48877: DOUBLE
48878: EQUAL
48879: IFTRUE 48901
48881: LD_INT 23
48883: DOUBLE
48884: EQUAL
48885: IFTRUE 48901
48887: LD_INT 24
48889: DOUBLE
48890: EQUAL
48891: IFTRUE 48901
48893: LD_INT 25
48895: DOUBLE
48896: EQUAL
48897: IFTRUE 48901
48899: GO 48957
48901: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48902: LD_ADDR_VAR 0 9
48906: PUSH
48907: LD_VAR 0 35
48911: PUSH
48912: LD_VAR 0 36
48916: PUSH
48917: LD_VAR 0 37
48921: PUSH
48922: LD_VAR 0 38
48926: PUSH
48927: LD_VAR 0 39
48931: PUSH
48932: LD_VAR 0 40
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_VAR 0 4
48949: PUSH
48950: LD_INT 1
48952: PLUS
48953: ARRAY
48954: ST_TO_ADDR
48955: GO 49322
48957: LD_INT 6
48959: DOUBLE
48960: EQUAL
48961: IFTRUE 49013
48963: LD_INT 7
48965: DOUBLE
48966: EQUAL
48967: IFTRUE 49013
48969: LD_INT 8
48971: DOUBLE
48972: EQUAL
48973: IFTRUE 49013
48975: LD_INT 13
48977: DOUBLE
48978: EQUAL
48979: IFTRUE 49013
48981: LD_INT 12
48983: DOUBLE
48984: EQUAL
48985: IFTRUE 49013
48987: LD_INT 15
48989: DOUBLE
48990: EQUAL
48991: IFTRUE 49013
48993: LD_INT 11
48995: DOUBLE
48996: EQUAL
48997: IFTRUE 49013
48999: LD_INT 14
49001: DOUBLE
49002: EQUAL
49003: IFTRUE 49013
49005: LD_INT 10
49007: DOUBLE
49008: EQUAL
49009: IFTRUE 49013
49011: GO 49069
49013: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49014: LD_ADDR_VAR 0 9
49018: PUSH
49019: LD_VAR 0 41
49023: PUSH
49024: LD_VAR 0 42
49028: PUSH
49029: LD_VAR 0 43
49033: PUSH
49034: LD_VAR 0 44
49038: PUSH
49039: LD_VAR 0 45
49043: PUSH
49044: LD_VAR 0 46
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: PUSH
49057: LD_VAR 0 4
49061: PUSH
49062: LD_INT 1
49064: PLUS
49065: ARRAY
49066: ST_TO_ADDR
49067: GO 49322
49069: LD_INT 36
49071: DOUBLE
49072: EQUAL
49073: IFTRUE 49077
49075: GO 49133
49077: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49078: LD_ADDR_VAR 0 9
49082: PUSH
49083: LD_VAR 0 47
49087: PUSH
49088: LD_VAR 0 48
49092: PUSH
49093: LD_VAR 0 49
49097: PUSH
49098: LD_VAR 0 50
49102: PUSH
49103: LD_VAR 0 51
49107: PUSH
49108: LD_VAR 0 52
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: PUSH
49121: LD_VAR 0 4
49125: PUSH
49126: LD_INT 1
49128: PLUS
49129: ARRAY
49130: ST_TO_ADDR
49131: GO 49322
49133: LD_INT 4
49135: DOUBLE
49136: EQUAL
49137: IFTRUE 49159
49139: LD_INT 5
49141: DOUBLE
49142: EQUAL
49143: IFTRUE 49159
49145: LD_INT 34
49147: DOUBLE
49148: EQUAL
49149: IFTRUE 49159
49151: LD_INT 37
49153: DOUBLE
49154: EQUAL
49155: IFTRUE 49159
49157: GO 49215
49159: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49160: LD_ADDR_VAR 0 9
49164: PUSH
49165: LD_VAR 0 53
49169: PUSH
49170: LD_VAR 0 54
49174: PUSH
49175: LD_VAR 0 55
49179: PUSH
49180: LD_VAR 0 56
49184: PUSH
49185: LD_VAR 0 57
49189: PUSH
49190: LD_VAR 0 58
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: PUSH
49203: LD_VAR 0 4
49207: PUSH
49208: LD_INT 1
49210: PLUS
49211: ARRAY
49212: ST_TO_ADDR
49213: GO 49322
49215: LD_INT 31
49217: DOUBLE
49218: EQUAL
49219: IFTRUE 49265
49221: LD_INT 32
49223: DOUBLE
49224: EQUAL
49225: IFTRUE 49265
49227: LD_INT 33
49229: DOUBLE
49230: EQUAL
49231: IFTRUE 49265
49233: LD_INT 27
49235: DOUBLE
49236: EQUAL
49237: IFTRUE 49265
49239: LD_INT 26
49241: DOUBLE
49242: EQUAL
49243: IFTRUE 49265
49245: LD_INT 28
49247: DOUBLE
49248: EQUAL
49249: IFTRUE 49265
49251: LD_INT 29
49253: DOUBLE
49254: EQUAL
49255: IFTRUE 49265
49257: LD_INT 30
49259: DOUBLE
49260: EQUAL
49261: IFTRUE 49265
49263: GO 49321
49265: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49266: LD_ADDR_VAR 0 9
49270: PUSH
49271: LD_VAR 0 59
49275: PUSH
49276: LD_VAR 0 60
49280: PUSH
49281: LD_VAR 0 61
49285: PUSH
49286: LD_VAR 0 62
49290: PUSH
49291: LD_VAR 0 63
49295: PUSH
49296: LD_VAR 0 64
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: PUSH
49309: LD_VAR 0 4
49313: PUSH
49314: LD_INT 1
49316: PLUS
49317: ARRAY
49318: ST_TO_ADDR
49319: GO 49322
49321: POP
// temp_list2 = [ ] ;
49322: LD_ADDR_VAR 0 10
49326: PUSH
49327: EMPTY
49328: ST_TO_ADDR
// for i in temp_list do
49329: LD_ADDR_VAR 0 8
49333: PUSH
49334: LD_VAR 0 9
49338: PUSH
49339: FOR_IN
49340: IFFALSE 49392
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49342: LD_ADDR_VAR 0 10
49346: PUSH
49347: LD_VAR 0 10
49351: PUSH
49352: LD_VAR 0 8
49356: PUSH
49357: LD_INT 1
49359: ARRAY
49360: PUSH
49361: LD_VAR 0 2
49365: PLUS
49366: PUSH
49367: LD_VAR 0 8
49371: PUSH
49372: LD_INT 2
49374: ARRAY
49375: PUSH
49376: LD_VAR 0 3
49380: PLUS
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: ADD
49389: ST_TO_ADDR
49390: GO 49339
49392: POP
49393: POP
// result = temp_list2 ;
49394: LD_ADDR_VAR 0 7
49398: PUSH
49399: LD_VAR 0 10
49403: ST_TO_ADDR
// end ;
49404: LD_VAR 0 7
49408: RET
// export function EnemyInRange ( unit , dist ) ; begin
49409: LD_INT 0
49411: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49412: LD_ADDR_VAR 0 3
49416: PUSH
49417: LD_VAR 0 1
49421: PPUSH
49422: CALL_OW 255
49426: PPUSH
49427: LD_VAR 0 1
49431: PPUSH
49432: CALL_OW 250
49436: PPUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: CALL_OW 251
49446: PPUSH
49447: LD_VAR 0 2
49451: PPUSH
49452: CALL 22782 0 4
49456: PUSH
49457: LD_INT 4
49459: ARRAY
49460: ST_TO_ADDR
// end ;
49461: LD_VAR 0 3
49465: RET
// export function PlayerSeeMe ( unit ) ; begin
49466: LD_INT 0
49468: PPUSH
// result := See ( your_side , unit ) ;
49469: LD_ADDR_VAR 0 2
49473: PUSH
49474: LD_OWVAR 2
49478: PPUSH
49479: LD_VAR 0 1
49483: PPUSH
49484: CALL_OW 292
49488: ST_TO_ADDR
// end ;
49489: LD_VAR 0 2
49493: RET
// export function ReverseDir ( unit ) ; begin
49494: LD_INT 0
49496: PPUSH
// if not unit then
49497: LD_VAR 0 1
49501: NOT
49502: IFFALSE 49506
// exit ;
49504: GO 49529
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49506: LD_ADDR_VAR 0 2
49510: PUSH
49511: LD_VAR 0 1
49515: PPUSH
49516: CALL_OW 254
49520: PUSH
49521: LD_INT 3
49523: PLUS
49524: PUSH
49525: LD_INT 6
49527: MOD
49528: ST_TO_ADDR
// end ;
49529: LD_VAR 0 2
49533: RET
// export function ReverseArray ( array ) ; var i ; begin
49534: LD_INT 0
49536: PPUSH
49537: PPUSH
// if not array then
49538: LD_VAR 0 1
49542: NOT
49543: IFFALSE 49547
// exit ;
49545: GO 49602
// result := [ ] ;
49547: LD_ADDR_VAR 0 2
49551: PUSH
49552: EMPTY
49553: ST_TO_ADDR
// for i := array downto 1 do
49554: LD_ADDR_VAR 0 3
49558: PUSH
49559: DOUBLE
49560: LD_VAR 0 1
49564: INC
49565: ST_TO_ADDR
49566: LD_INT 1
49568: PUSH
49569: FOR_DOWNTO
49570: IFFALSE 49600
// result := Join ( result , array [ i ] ) ;
49572: LD_ADDR_VAR 0 2
49576: PUSH
49577: LD_VAR 0 2
49581: PPUSH
49582: LD_VAR 0 1
49586: PUSH
49587: LD_VAR 0 3
49591: ARRAY
49592: PPUSH
49593: CALL 54267 0 2
49597: ST_TO_ADDR
49598: GO 49569
49600: POP
49601: POP
// end ;
49602: LD_VAR 0 2
49606: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49607: LD_INT 0
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
// if not unit or not hexes then
49615: LD_VAR 0 1
49619: NOT
49620: PUSH
49621: LD_VAR 0 2
49625: NOT
49626: OR
49627: IFFALSE 49631
// exit ;
49629: GO 49754
// dist := 9999 ;
49631: LD_ADDR_VAR 0 5
49635: PUSH
49636: LD_INT 9999
49638: ST_TO_ADDR
// for i = 1 to hexes do
49639: LD_ADDR_VAR 0 4
49643: PUSH
49644: DOUBLE
49645: LD_INT 1
49647: DEC
49648: ST_TO_ADDR
49649: LD_VAR 0 2
49653: PUSH
49654: FOR_TO
49655: IFFALSE 49742
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49657: LD_ADDR_VAR 0 6
49661: PUSH
49662: LD_VAR 0 1
49666: PPUSH
49667: LD_VAR 0 2
49671: PUSH
49672: LD_VAR 0 4
49676: ARRAY
49677: PUSH
49678: LD_INT 1
49680: ARRAY
49681: PPUSH
49682: LD_VAR 0 2
49686: PUSH
49687: LD_VAR 0 4
49691: ARRAY
49692: PUSH
49693: LD_INT 2
49695: ARRAY
49696: PPUSH
49697: CALL_OW 297
49701: ST_TO_ADDR
// if tdist < dist then
49702: LD_VAR 0 6
49706: PUSH
49707: LD_VAR 0 5
49711: LESS
49712: IFFALSE 49740
// begin hex := hexes [ i ] ;
49714: LD_ADDR_VAR 0 8
49718: PUSH
49719: LD_VAR 0 2
49723: PUSH
49724: LD_VAR 0 4
49728: ARRAY
49729: ST_TO_ADDR
// dist := tdist ;
49730: LD_ADDR_VAR 0 5
49734: PUSH
49735: LD_VAR 0 6
49739: ST_TO_ADDR
// end ; end ;
49740: GO 49654
49742: POP
49743: POP
// result := hex ;
49744: LD_ADDR_VAR 0 3
49748: PUSH
49749: LD_VAR 0 8
49753: ST_TO_ADDR
// end ;
49754: LD_VAR 0 3
49758: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49759: LD_INT 0
49761: PPUSH
49762: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49763: LD_VAR 0 1
49767: NOT
49768: PUSH
49769: LD_VAR 0 1
49773: PUSH
49774: LD_INT 21
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 23
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PPUSH
49798: CALL_OW 69
49802: IN
49803: NOT
49804: OR
49805: IFFALSE 49809
// exit ;
49807: GO 49856
// for i = 1 to 3 do
49809: LD_ADDR_VAR 0 3
49813: PUSH
49814: DOUBLE
49815: LD_INT 1
49817: DEC
49818: ST_TO_ADDR
49819: LD_INT 3
49821: PUSH
49822: FOR_TO
49823: IFFALSE 49854
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49825: LD_VAR 0 1
49829: PPUSH
49830: CALL_OW 250
49834: PPUSH
49835: LD_VAR 0 1
49839: PPUSH
49840: CALL_OW 251
49844: PPUSH
49845: LD_INT 1
49847: PPUSH
49848: CALL_OW 453
49852: GO 49822
49854: POP
49855: POP
// end ;
49856: LD_VAR 0 2
49860: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49861: LD_INT 0
49863: PPUSH
49864: PPUSH
49865: PPUSH
49866: PPUSH
49867: PPUSH
49868: PPUSH
// if not unit or not enemy_unit then
49869: LD_VAR 0 1
49873: NOT
49874: PUSH
49875: LD_VAR 0 2
49879: NOT
49880: OR
49881: IFFALSE 49885
// exit ;
49883: GO 50352
// if GetLives ( i ) < 250 then
49885: LD_VAR 0 4
49889: PPUSH
49890: CALL_OW 256
49894: PUSH
49895: LD_INT 250
49897: LESS
49898: IFFALSE 49911
// begin ComAutodestruct ( i ) ;
49900: LD_VAR 0 4
49904: PPUSH
49905: CALL 49759 0 1
// exit ;
49909: GO 50352
// end ; x := GetX ( enemy_unit ) ;
49911: LD_ADDR_VAR 0 7
49915: PUSH
49916: LD_VAR 0 2
49920: PPUSH
49921: CALL_OW 250
49925: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49926: LD_ADDR_VAR 0 8
49930: PUSH
49931: LD_VAR 0 2
49935: PPUSH
49936: CALL_OW 251
49940: ST_TO_ADDR
// if not x or not y then
49941: LD_VAR 0 7
49945: NOT
49946: PUSH
49947: LD_VAR 0 8
49951: NOT
49952: OR
49953: IFFALSE 49957
// exit ;
49955: GO 50352
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49957: LD_ADDR_VAR 0 6
49961: PUSH
49962: LD_VAR 0 7
49966: PPUSH
49967: LD_INT 0
49969: PPUSH
49970: LD_INT 4
49972: PPUSH
49973: CALL_OW 272
49977: PUSH
49978: LD_VAR 0 8
49982: PPUSH
49983: LD_INT 0
49985: PPUSH
49986: LD_INT 4
49988: PPUSH
49989: CALL_OW 273
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_VAR 0 7
50002: PPUSH
50003: LD_INT 1
50005: PPUSH
50006: LD_INT 4
50008: PPUSH
50009: CALL_OW 272
50013: PUSH
50014: LD_VAR 0 8
50018: PPUSH
50019: LD_INT 1
50021: PPUSH
50022: LD_INT 4
50024: PPUSH
50025: CALL_OW 273
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_VAR 0 7
50038: PPUSH
50039: LD_INT 2
50041: PPUSH
50042: LD_INT 4
50044: PPUSH
50045: CALL_OW 272
50049: PUSH
50050: LD_VAR 0 8
50054: PPUSH
50055: LD_INT 2
50057: PPUSH
50058: LD_INT 4
50060: PPUSH
50061: CALL_OW 273
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_VAR 0 7
50074: PPUSH
50075: LD_INT 3
50077: PPUSH
50078: LD_INT 4
50080: PPUSH
50081: CALL_OW 272
50085: PUSH
50086: LD_VAR 0 8
50090: PPUSH
50091: LD_INT 3
50093: PPUSH
50094: LD_INT 4
50096: PPUSH
50097: CALL_OW 273
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_VAR 0 7
50110: PPUSH
50111: LD_INT 4
50113: PPUSH
50114: LD_INT 4
50116: PPUSH
50117: CALL_OW 272
50121: PUSH
50122: LD_VAR 0 8
50126: PPUSH
50127: LD_INT 4
50129: PPUSH
50130: LD_INT 4
50132: PPUSH
50133: CALL_OW 273
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_VAR 0 7
50146: PPUSH
50147: LD_INT 5
50149: PPUSH
50150: LD_INT 4
50152: PPUSH
50153: CALL_OW 272
50157: PUSH
50158: LD_VAR 0 8
50162: PPUSH
50163: LD_INT 5
50165: PPUSH
50166: LD_INT 4
50168: PPUSH
50169: CALL_OW 273
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: ST_TO_ADDR
// for i = tmp downto 1 do
50186: LD_ADDR_VAR 0 4
50190: PUSH
50191: DOUBLE
50192: LD_VAR 0 6
50196: INC
50197: ST_TO_ADDR
50198: LD_INT 1
50200: PUSH
50201: FOR_DOWNTO
50202: IFFALSE 50303
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50204: LD_VAR 0 6
50208: PUSH
50209: LD_VAR 0 4
50213: ARRAY
50214: PUSH
50215: LD_INT 1
50217: ARRAY
50218: PPUSH
50219: LD_VAR 0 6
50223: PUSH
50224: LD_VAR 0 4
50228: ARRAY
50229: PUSH
50230: LD_INT 2
50232: ARRAY
50233: PPUSH
50234: CALL_OW 488
50238: NOT
50239: PUSH
50240: LD_VAR 0 6
50244: PUSH
50245: LD_VAR 0 4
50249: ARRAY
50250: PUSH
50251: LD_INT 1
50253: ARRAY
50254: PPUSH
50255: LD_VAR 0 6
50259: PUSH
50260: LD_VAR 0 4
50264: ARRAY
50265: PUSH
50266: LD_INT 2
50268: ARRAY
50269: PPUSH
50270: CALL_OW 428
50274: PUSH
50275: LD_INT 0
50277: NONEQUAL
50278: OR
50279: IFFALSE 50301
// tmp := Delete ( tmp , i ) ;
50281: LD_ADDR_VAR 0 6
50285: PUSH
50286: LD_VAR 0 6
50290: PPUSH
50291: LD_VAR 0 4
50295: PPUSH
50296: CALL_OW 3
50300: ST_TO_ADDR
50301: GO 50201
50303: POP
50304: POP
// j := GetClosestHex ( unit , tmp ) ;
50305: LD_ADDR_VAR 0 5
50309: PUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: LD_VAR 0 6
50319: PPUSH
50320: CALL 49607 0 2
50324: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50325: LD_VAR 0 1
50329: PPUSH
50330: LD_VAR 0 5
50334: PUSH
50335: LD_INT 1
50337: ARRAY
50338: PPUSH
50339: LD_VAR 0 5
50343: PUSH
50344: LD_INT 2
50346: ARRAY
50347: PPUSH
50348: CALL_OW 111
// end ;
50352: LD_VAR 0 3
50356: RET
// export function PrepareApemanSoldier ( ) ; begin
50357: LD_INT 0
50359: PPUSH
// uc_nation := 0 ;
50360: LD_ADDR_OWVAR 21
50364: PUSH
50365: LD_INT 0
50367: ST_TO_ADDR
// hc_sex := sex_male ;
50368: LD_ADDR_OWVAR 27
50372: PUSH
50373: LD_INT 1
50375: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50376: LD_ADDR_OWVAR 28
50380: PUSH
50381: LD_INT 15
50383: ST_TO_ADDR
// hc_gallery :=  ;
50384: LD_ADDR_OWVAR 33
50388: PUSH
50389: LD_STRING 
50391: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50392: LD_ADDR_OWVAR 31
50396: PUSH
50397: LD_INT 0
50399: PPUSH
50400: LD_INT 3
50402: PPUSH
50403: CALL_OW 12
50407: PUSH
50408: LD_INT 0
50410: PPUSH
50411: LD_INT 3
50413: PPUSH
50414: CALL_OW 12
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// end ;
50431: LD_VAR 0 1
50435: RET
// export function PrepareApemanEngineer ( ) ; begin
50436: LD_INT 0
50438: PPUSH
// uc_nation := 0 ;
50439: LD_ADDR_OWVAR 21
50443: PUSH
50444: LD_INT 0
50446: ST_TO_ADDR
// hc_sex := sex_male ;
50447: LD_ADDR_OWVAR 27
50451: PUSH
50452: LD_INT 1
50454: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50455: LD_ADDR_OWVAR 28
50459: PUSH
50460: LD_INT 16
50462: ST_TO_ADDR
// hc_gallery :=  ;
50463: LD_ADDR_OWVAR 33
50467: PUSH
50468: LD_STRING 
50470: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50471: LD_ADDR_OWVAR 31
50475: PUSH
50476: LD_INT 0
50478: PPUSH
50479: LD_INT 3
50481: PPUSH
50482: CALL_OW 12
50486: PUSH
50487: LD_INT 0
50489: PPUSH
50490: LD_INT 3
50492: PPUSH
50493: CALL_OW 12
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: ST_TO_ADDR
// end ;
50510: LD_VAR 0 1
50514: RET
// export function PrepareApeman ( agressivity ) ; begin
50515: LD_INT 0
50517: PPUSH
// uc_side := 0 ;
50518: LD_ADDR_OWVAR 20
50522: PUSH
50523: LD_INT 0
50525: ST_TO_ADDR
// uc_nation := 0 ;
50526: LD_ADDR_OWVAR 21
50530: PUSH
50531: LD_INT 0
50533: ST_TO_ADDR
// hc_sex := sex_male ;
50534: LD_ADDR_OWVAR 27
50538: PUSH
50539: LD_INT 1
50541: ST_TO_ADDR
// hc_class := class_apeman ;
50542: LD_ADDR_OWVAR 28
50546: PUSH
50547: LD_INT 12
50549: ST_TO_ADDR
// hc_gallery :=  ;
50550: LD_ADDR_OWVAR 33
50554: PUSH
50555: LD_STRING 
50557: ST_TO_ADDR
// if agressivity = 0 then
50558: LD_VAR 0 1
50562: PUSH
50563: LD_INT 0
50565: EQUAL
50566: IFFALSE 50578
// hc_agressivity := 0 else
50568: LD_ADDR_OWVAR 35
50572: PUSH
50573: LD_INT 0
50575: ST_TO_ADDR
50576: GO 50599
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50578: LD_ADDR_OWVAR 35
50582: PUSH
50583: LD_VAR 0 1
50587: NEG
50588: PPUSH
50589: LD_VAR 0 1
50593: PPUSH
50594: CALL_OW 12
50598: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50599: LD_ADDR_OWVAR 31
50603: PUSH
50604: LD_INT 0
50606: PPUSH
50607: LD_INT 3
50609: PPUSH
50610: CALL_OW 12
50614: PUSH
50615: LD_INT 0
50617: PPUSH
50618: LD_INT 3
50620: PPUSH
50621: CALL_OW 12
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// end ;
50638: LD_VAR 0 2
50642: RET
// export function PrepareTiger ( agressivity ) ; begin
50643: LD_INT 0
50645: PPUSH
// uc_side := 0 ;
50646: LD_ADDR_OWVAR 20
50650: PUSH
50651: LD_INT 0
50653: ST_TO_ADDR
// uc_nation := 0 ;
50654: LD_ADDR_OWVAR 21
50658: PUSH
50659: LD_INT 0
50661: ST_TO_ADDR
// hc_class := class_tiger ;
50662: LD_ADDR_OWVAR 28
50666: PUSH
50667: LD_INT 14
50669: ST_TO_ADDR
// hc_gallery :=  ;
50670: LD_ADDR_OWVAR 33
50674: PUSH
50675: LD_STRING 
50677: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50678: LD_ADDR_OWVAR 35
50682: PUSH
50683: LD_VAR 0 1
50687: NEG
50688: PPUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 12
50698: ST_TO_ADDR
// end ;
50699: LD_VAR 0 2
50703: RET
// export function PrepareEnchidna ( ) ; begin
50704: LD_INT 0
50706: PPUSH
// uc_side := 0 ;
50707: LD_ADDR_OWVAR 20
50711: PUSH
50712: LD_INT 0
50714: ST_TO_ADDR
// uc_nation := 0 ;
50715: LD_ADDR_OWVAR 21
50719: PUSH
50720: LD_INT 0
50722: ST_TO_ADDR
// hc_class := class_baggie ;
50723: LD_ADDR_OWVAR 28
50727: PUSH
50728: LD_INT 13
50730: ST_TO_ADDR
// hc_gallery :=  ;
50731: LD_ADDR_OWVAR 33
50735: PUSH
50736: LD_STRING 
50738: ST_TO_ADDR
// end ;
50739: LD_VAR 0 1
50743: RET
// export function PrepareFrog ( ) ; begin
50744: LD_INT 0
50746: PPUSH
// uc_side := 0 ;
50747: LD_ADDR_OWVAR 20
50751: PUSH
50752: LD_INT 0
50754: ST_TO_ADDR
// uc_nation := 0 ;
50755: LD_ADDR_OWVAR 21
50759: PUSH
50760: LD_INT 0
50762: ST_TO_ADDR
// hc_class := class_frog ;
50763: LD_ADDR_OWVAR 28
50767: PUSH
50768: LD_INT 19
50770: ST_TO_ADDR
// hc_gallery :=  ;
50771: LD_ADDR_OWVAR 33
50775: PUSH
50776: LD_STRING 
50778: ST_TO_ADDR
// end ;
50779: LD_VAR 0 1
50783: RET
// export function PrepareFish ( ) ; begin
50784: LD_INT 0
50786: PPUSH
// uc_side := 0 ;
50787: LD_ADDR_OWVAR 20
50791: PUSH
50792: LD_INT 0
50794: ST_TO_ADDR
// uc_nation := 0 ;
50795: LD_ADDR_OWVAR 21
50799: PUSH
50800: LD_INT 0
50802: ST_TO_ADDR
// hc_class := class_fish ;
50803: LD_ADDR_OWVAR 28
50807: PUSH
50808: LD_INT 20
50810: ST_TO_ADDR
// hc_gallery :=  ;
50811: LD_ADDR_OWVAR 33
50815: PUSH
50816: LD_STRING 
50818: ST_TO_ADDR
// end ;
50819: LD_VAR 0 1
50823: RET
// export function PrepareBird ( ) ; begin
50824: LD_INT 0
50826: PPUSH
// uc_side := 0 ;
50827: LD_ADDR_OWVAR 20
50831: PUSH
50832: LD_INT 0
50834: ST_TO_ADDR
// uc_nation := 0 ;
50835: LD_ADDR_OWVAR 21
50839: PUSH
50840: LD_INT 0
50842: ST_TO_ADDR
// hc_class := class_phororhacos ;
50843: LD_ADDR_OWVAR 28
50847: PUSH
50848: LD_INT 18
50850: ST_TO_ADDR
// hc_gallery :=  ;
50851: LD_ADDR_OWVAR 33
50855: PUSH
50856: LD_STRING 
50858: ST_TO_ADDR
// end ;
50859: LD_VAR 0 1
50863: RET
// export function PrepareHorse ( ) ; begin
50864: LD_INT 0
50866: PPUSH
// uc_side := 0 ;
50867: LD_ADDR_OWVAR 20
50871: PUSH
50872: LD_INT 0
50874: ST_TO_ADDR
// uc_nation := 0 ;
50875: LD_ADDR_OWVAR 21
50879: PUSH
50880: LD_INT 0
50882: ST_TO_ADDR
// hc_class := class_horse ;
50883: LD_ADDR_OWVAR 28
50887: PUSH
50888: LD_INT 21
50890: ST_TO_ADDR
// hc_gallery :=  ;
50891: LD_ADDR_OWVAR 33
50895: PUSH
50896: LD_STRING 
50898: ST_TO_ADDR
// end ;
50899: LD_VAR 0 1
50903: RET
// export function PrepareMastodont ( ) ; begin
50904: LD_INT 0
50906: PPUSH
// uc_side := 0 ;
50907: LD_ADDR_OWVAR 20
50911: PUSH
50912: LD_INT 0
50914: ST_TO_ADDR
// uc_nation := 0 ;
50915: LD_ADDR_OWVAR 21
50919: PUSH
50920: LD_INT 0
50922: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50923: LD_ADDR_OWVAR 37
50927: PUSH
50928: LD_INT 31
50930: ST_TO_ADDR
// vc_control := control_rider ;
50931: LD_ADDR_OWVAR 38
50935: PUSH
50936: LD_INT 4
50938: ST_TO_ADDR
// end ;
50939: LD_VAR 0 1
50943: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50944: LD_INT 0
50946: PPUSH
50947: PPUSH
50948: PPUSH
// uc_side = 0 ;
50949: LD_ADDR_OWVAR 20
50953: PUSH
50954: LD_INT 0
50956: ST_TO_ADDR
// uc_nation = 0 ;
50957: LD_ADDR_OWVAR 21
50961: PUSH
50962: LD_INT 0
50964: ST_TO_ADDR
// InitHc_All ( ) ;
50965: CALL_OW 584
// InitVc ;
50969: CALL_OW 20
// if mastodonts then
50973: LD_VAR 0 6
50977: IFFALSE 51044
// for i = 1 to mastodonts do
50979: LD_ADDR_VAR 0 11
50983: PUSH
50984: DOUBLE
50985: LD_INT 1
50987: DEC
50988: ST_TO_ADDR
50989: LD_VAR 0 6
50993: PUSH
50994: FOR_TO
50995: IFFALSE 51042
// begin vc_chassis := 31 ;
50997: LD_ADDR_OWVAR 37
51001: PUSH
51002: LD_INT 31
51004: ST_TO_ADDR
// vc_control := control_rider ;
51005: LD_ADDR_OWVAR 38
51009: PUSH
51010: LD_INT 4
51012: ST_TO_ADDR
// animal := CreateVehicle ;
51013: LD_ADDR_VAR 0 12
51017: PUSH
51018: CALL_OW 45
51022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51023: LD_VAR 0 12
51027: PPUSH
51028: LD_VAR 0 8
51032: PPUSH
51033: LD_INT 0
51035: PPUSH
51036: CALL 53172 0 3
// end ;
51040: GO 50994
51042: POP
51043: POP
// if horses then
51044: LD_VAR 0 5
51048: IFFALSE 51115
// for i = 1 to horses do
51050: LD_ADDR_VAR 0 11
51054: PUSH
51055: DOUBLE
51056: LD_INT 1
51058: DEC
51059: ST_TO_ADDR
51060: LD_VAR 0 5
51064: PUSH
51065: FOR_TO
51066: IFFALSE 51113
// begin hc_class := 21 ;
51068: LD_ADDR_OWVAR 28
51072: PUSH
51073: LD_INT 21
51075: ST_TO_ADDR
// hc_gallery :=  ;
51076: LD_ADDR_OWVAR 33
51080: PUSH
51081: LD_STRING 
51083: ST_TO_ADDR
// animal := CreateHuman ;
51084: LD_ADDR_VAR 0 12
51088: PUSH
51089: CALL_OW 44
51093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51094: LD_VAR 0 12
51098: PPUSH
51099: LD_VAR 0 8
51103: PPUSH
51104: LD_INT 0
51106: PPUSH
51107: CALL 53172 0 3
// end ;
51111: GO 51065
51113: POP
51114: POP
// if birds then
51115: LD_VAR 0 1
51119: IFFALSE 51186
// for i = 1 to birds do
51121: LD_ADDR_VAR 0 11
51125: PUSH
51126: DOUBLE
51127: LD_INT 1
51129: DEC
51130: ST_TO_ADDR
51131: LD_VAR 0 1
51135: PUSH
51136: FOR_TO
51137: IFFALSE 51184
// begin hc_class := 18 ;
51139: LD_ADDR_OWVAR 28
51143: PUSH
51144: LD_INT 18
51146: ST_TO_ADDR
// hc_gallery =  ;
51147: LD_ADDR_OWVAR 33
51151: PUSH
51152: LD_STRING 
51154: ST_TO_ADDR
// animal := CreateHuman ;
51155: LD_ADDR_VAR 0 12
51159: PUSH
51160: CALL_OW 44
51164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51165: LD_VAR 0 12
51169: PPUSH
51170: LD_VAR 0 8
51174: PPUSH
51175: LD_INT 0
51177: PPUSH
51178: CALL 53172 0 3
// end ;
51182: GO 51136
51184: POP
51185: POP
// if tigers then
51186: LD_VAR 0 2
51190: IFFALSE 51274
// for i = 1 to tigers do
51192: LD_ADDR_VAR 0 11
51196: PUSH
51197: DOUBLE
51198: LD_INT 1
51200: DEC
51201: ST_TO_ADDR
51202: LD_VAR 0 2
51206: PUSH
51207: FOR_TO
51208: IFFALSE 51272
// begin hc_class = class_tiger ;
51210: LD_ADDR_OWVAR 28
51214: PUSH
51215: LD_INT 14
51217: ST_TO_ADDR
// hc_gallery =  ;
51218: LD_ADDR_OWVAR 33
51222: PUSH
51223: LD_STRING 
51225: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51226: LD_ADDR_OWVAR 35
51230: PUSH
51231: LD_INT 7
51233: NEG
51234: PPUSH
51235: LD_INT 7
51237: PPUSH
51238: CALL_OW 12
51242: ST_TO_ADDR
// animal := CreateHuman ;
51243: LD_ADDR_VAR 0 12
51247: PUSH
51248: CALL_OW 44
51252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51253: LD_VAR 0 12
51257: PPUSH
51258: LD_VAR 0 8
51262: PPUSH
51263: LD_INT 0
51265: PPUSH
51266: CALL 53172 0 3
// end ;
51270: GO 51207
51272: POP
51273: POP
// if apemans then
51274: LD_VAR 0 3
51278: IFFALSE 51401
// for i = 1 to apemans do
51280: LD_ADDR_VAR 0 11
51284: PUSH
51285: DOUBLE
51286: LD_INT 1
51288: DEC
51289: ST_TO_ADDR
51290: LD_VAR 0 3
51294: PUSH
51295: FOR_TO
51296: IFFALSE 51399
// begin hc_class = class_apeman ;
51298: LD_ADDR_OWVAR 28
51302: PUSH
51303: LD_INT 12
51305: ST_TO_ADDR
// hc_gallery =  ;
51306: LD_ADDR_OWVAR 33
51310: PUSH
51311: LD_STRING 
51313: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51314: LD_ADDR_OWVAR 35
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PPUSH
51323: LD_INT 2
51325: PPUSH
51326: CALL_OW 12
51330: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51331: LD_ADDR_OWVAR 31
51335: PUSH
51336: LD_INT 1
51338: PPUSH
51339: LD_INT 3
51341: PPUSH
51342: CALL_OW 12
51346: PUSH
51347: LD_INT 1
51349: PPUSH
51350: LD_INT 3
51352: PPUSH
51353: CALL_OW 12
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// animal := CreateHuman ;
51370: LD_ADDR_VAR 0 12
51374: PUSH
51375: CALL_OW 44
51379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51380: LD_VAR 0 12
51384: PPUSH
51385: LD_VAR 0 8
51389: PPUSH
51390: LD_INT 0
51392: PPUSH
51393: CALL 53172 0 3
// end ;
51397: GO 51295
51399: POP
51400: POP
// if enchidnas then
51401: LD_VAR 0 4
51405: IFFALSE 51472
// for i = 1 to enchidnas do
51407: LD_ADDR_VAR 0 11
51411: PUSH
51412: DOUBLE
51413: LD_INT 1
51415: DEC
51416: ST_TO_ADDR
51417: LD_VAR 0 4
51421: PUSH
51422: FOR_TO
51423: IFFALSE 51470
// begin hc_class = 13 ;
51425: LD_ADDR_OWVAR 28
51429: PUSH
51430: LD_INT 13
51432: ST_TO_ADDR
// hc_gallery =  ;
51433: LD_ADDR_OWVAR 33
51437: PUSH
51438: LD_STRING 
51440: ST_TO_ADDR
// animal := CreateHuman ;
51441: LD_ADDR_VAR 0 12
51445: PUSH
51446: CALL_OW 44
51450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51451: LD_VAR 0 12
51455: PPUSH
51456: LD_VAR 0 8
51460: PPUSH
51461: LD_INT 0
51463: PPUSH
51464: CALL 53172 0 3
// end ;
51468: GO 51422
51470: POP
51471: POP
// if fishes then
51472: LD_VAR 0 7
51476: IFFALSE 51543
// for i = 1 to fishes do
51478: LD_ADDR_VAR 0 11
51482: PUSH
51483: DOUBLE
51484: LD_INT 1
51486: DEC
51487: ST_TO_ADDR
51488: LD_VAR 0 7
51492: PUSH
51493: FOR_TO
51494: IFFALSE 51541
// begin hc_class = 20 ;
51496: LD_ADDR_OWVAR 28
51500: PUSH
51501: LD_INT 20
51503: ST_TO_ADDR
// hc_gallery =  ;
51504: LD_ADDR_OWVAR 33
51508: PUSH
51509: LD_STRING 
51511: ST_TO_ADDR
// animal := CreateHuman ;
51512: LD_ADDR_VAR 0 12
51516: PUSH
51517: CALL_OW 44
51521: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51522: LD_VAR 0 12
51526: PPUSH
51527: LD_VAR 0 9
51531: PPUSH
51532: LD_INT 0
51534: PPUSH
51535: CALL 53172 0 3
// end ;
51539: GO 51493
51541: POP
51542: POP
// end ;
51543: LD_VAR 0 10
51547: RET
// export function WantHeal ( sci , unit ) ; begin
51548: LD_INT 0
51550: PPUSH
// if GetTaskList ( sci ) > 0 then
51551: LD_VAR 0 1
51555: PPUSH
51556: CALL_OW 437
51560: PUSH
51561: LD_INT 0
51563: GREATER
51564: IFFALSE 51634
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51566: LD_VAR 0 1
51570: PPUSH
51571: CALL_OW 437
51575: PUSH
51576: LD_INT 1
51578: ARRAY
51579: PUSH
51580: LD_INT 1
51582: ARRAY
51583: PUSH
51584: LD_STRING l
51586: EQUAL
51587: PUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: CALL_OW 437
51597: PUSH
51598: LD_INT 1
51600: ARRAY
51601: PUSH
51602: LD_INT 4
51604: ARRAY
51605: PUSH
51606: LD_VAR 0 2
51610: EQUAL
51611: AND
51612: IFFALSE 51624
// result := true else
51614: LD_ADDR_VAR 0 3
51618: PUSH
51619: LD_INT 1
51621: ST_TO_ADDR
51622: GO 51632
// result := false ;
51624: LD_ADDR_VAR 0 3
51628: PUSH
51629: LD_INT 0
51631: ST_TO_ADDR
// end else
51632: GO 51642
// result := false ;
51634: LD_ADDR_VAR 0 3
51638: PUSH
51639: LD_INT 0
51641: ST_TO_ADDR
// end ;
51642: LD_VAR 0 3
51646: RET
// export function HealTarget ( sci ) ; begin
51647: LD_INT 0
51649: PPUSH
// if not sci then
51650: LD_VAR 0 1
51654: NOT
51655: IFFALSE 51659
// exit ;
51657: GO 51724
// result := 0 ;
51659: LD_ADDR_VAR 0 2
51663: PUSH
51664: LD_INT 0
51666: ST_TO_ADDR
// if GetTaskList ( sci ) then
51667: LD_VAR 0 1
51671: PPUSH
51672: CALL_OW 437
51676: IFFALSE 51724
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51678: LD_VAR 0 1
51682: PPUSH
51683: CALL_OW 437
51687: PUSH
51688: LD_INT 1
51690: ARRAY
51691: PUSH
51692: LD_INT 1
51694: ARRAY
51695: PUSH
51696: LD_STRING l
51698: EQUAL
51699: IFFALSE 51724
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51701: LD_ADDR_VAR 0 2
51705: PUSH
51706: LD_VAR 0 1
51710: PPUSH
51711: CALL_OW 437
51715: PUSH
51716: LD_INT 1
51718: ARRAY
51719: PUSH
51720: LD_INT 4
51722: ARRAY
51723: ST_TO_ADDR
// end ;
51724: LD_VAR 0 2
51728: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51729: LD_INT 0
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
// if not base_units then
51735: LD_VAR 0 1
51739: NOT
51740: IFFALSE 51744
// exit ;
51742: GO 51831
// result := false ;
51744: LD_ADDR_VAR 0 2
51748: PUSH
51749: LD_INT 0
51751: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51752: LD_ADDR_VAR 0 5
51756: PUSH
51757: LD_VAR 0 1
51761: PPUSH
51762: LD_INT 21
51764: PUSH
51765: LD_INT 3
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PPUSH
51772: CALL_OW 72
51776: ST_TO_ADDR
// if not tmp then
51777: LD_VAR 0 5
51781: NOT
51782: IFFALSE 51786
// exit ;
51784: GO 51831
// for i in tmp do
51786: LD_ADDR_VAR 0 3
51790: PUSH
51791: LD_VAR 0 5
51795: PUSH
51796: FOR_IN
51797: IFFALSE 51829
// begin result := EnemyInRange ( i , 22 ) ;
51799: LD_ADDR_VAR 0 2
51803: PUSH
51804: LD_VAR 0 3
51808: PPUSH
51809: LD_INT 22
51811: PPUSH
51812: CALL 49409 0 2
51816: ST_TO_ADDR
// if result then
51817: LD_VAR 0 2
51821: IFFALSE 51827
// exit ;
51823: POP
51824: POP
51825: GO 51831
// end ;
51827: GO 51796
51829: POP
51830: POP
// end ;
51831: LD_VAR 0 2
51835: RET
// export function FilterByTag ( units , tag ) ; begin
51836: LD_INT 0
51838: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51839: LD_ADDR_VAR 0 3
51843: PUSH
51844: LD_VAR 0 1
51848: PPUSH
51849: LD_INT 120
51851: PUSH
51852: LD_VAR 0 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PPUSH
51861: CALL_OW 72
51865: ST_TO_ADDR
// end ;
51866: LD_VAR 0 3
51870: RET
// export function IsDriver ( un ) ; begin
51871: LD_INT 0
51873: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51874: LD_ADDR_VAR 0 2
51878: PUSH
51879: LD_VAR 0 1
51883: PUSH
51884: LD_INT 55
51886: PUSH
51887: EMPTY
51888: LIST
51889: PPUSH
51890: CALL_OW 69
51894: IN
51895: ST_TO_ADDR
// end ;
51896: LD_VAR 0 2
51900: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51901: LD_INT 0
51903: PPUSH
51904: PPUSH
// list := [ ] ;
51905: LD_ADDR_VAR 0 5
51909: PUSH
51910: EMPTY
51911: ST_TO_ADDR
// case d of 0 :
51912: LD_VAR 0 3
51916: PUSH
51917: LD_INT 0
51919: DOUBLE
51920: EQUAL
51921: IFTRUE 51925
51923: GO 52058
51925: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51926: LD_ADDR_VAR 0 5
51930: PUSH
51931: LD_VAR 0 1
51935: PUSH
51936: LD_INT 4
51938: MINUS
51939: PUSH
51940: LD_VAR 0 2
51944: PUSH
51945: LD_INT 4
51947: MINUS
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: PUSH
51957: LD_VAR 0 1
51961: PUSH
51962: LD_INT 3
51964: MINUS
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: PUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 4
51986: PLUS
51987: PUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 3
52008: PLUS
52009: PUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 3
52017: PLUS
52018: PUSH
52019: LD_INT 5
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_VAR 0 2
52036: PUSH
52037: LD_INT 4
52039: PLUS
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// end ; 1 :
52056: GO 52756
52058: LD_INT 1
52060: DOUBLE
52061: EQUAL
52062: IFTRUE 52066
52064: GO 52199
52066: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52067: LD_ADDR_VAR 0 5
52071: PUSH
52072: LD_VAR 0 1
52076: PUSH
52077: LD_VAR 0 2
52081: PUSH
52082: LD_INT 4
52084: MINUS
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: PUSH
52094: LD_VAR 0 1
52098: PUSH
52099: LD_INT 3
52101: MINUS
52102: PUSH
52103: LD_VAR 0 2
52107: PUSH
52108: LD_INT 3
52110: MINUS
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_INT 4
52127: MINUS
52128: PUSH
52129: LD_VAR 0 2
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_VAR 0 2
52151: PUSH
52152: LD_INT 3
52154: PLUS
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: PUSH
52164: LD_VAR 0 1
52168: PUSH
52169: LD_INT 4
52171: PLUS
52172: PUSH
52173: LD_VAR 0 2
52177: PUSH
52178: LD_INT 4
52180: PLUS
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// end ; 2 :
52197: GO 52756
52199: LD_INT 2
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52207
52205: GO 52336
52207: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52208: LD_ADDR_VAR 0 5
52212: PUSH
52213: LD_VAR 0 1
52217: PUSH
52218: LD_VAR 0 2
52222: PUSH
52223: LD_INT 3
52225: MINUS
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: PUSH
52235: LD_VAR 0 1
52239: PUSH
52240: LD_INT 4
52242: PLUS
52243: PUSH
52244: LD_VAR 0 2
52248: PUSH
52249: LD_INT 4
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: PUSH
52257: LD_VAR 0 1
52261: PUSH
52262: LD_VAR 0 2
52266: PUSH
52267: LD_INT 4
52269: PLUS
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: PUSH
52279: LD_VAR 0 1
52283: PUSH
52284: LD_INT 3
52286: MINUS
52287: PUSH
52288: LD_VAR 0 2
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: PUSH
52301: LD_VAR 0 1
52305: PUSH
52306: LD_INT 4
52308: MINUS
52309: PUSH
52310: LD_VAR 0 2
52314: PUSH
52315: LD_INT 4
52317: MINUS
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// end ; 3 :
52334: GO 52756
52336: LD_INT 3
52338: DOUBLE
52339: EQUAL
52340: IFTRUE 52344
52342: GO 52477
52344: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52345: LD_ADDR_VAR 0 5
52349: PUSH
52350: LD_VAR 0 1
52354: PUSH
52355: LD_INT 3
52357: PLUS
52358: PUSH
52359: LD_VAR 0 2
52363: PUSH
52364: LD_INT 4
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: LD_VAR 0 1
52376: PUSH
52377: LD_INT 4
52379: PLUS
52380: PUSH
52381: LD_VAR 0 2
52385: PUSH
52386: LD_INT 4
52388: PLUS
52389: PUSH
52390: LD_INT 5
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: PUSH
52398: LD_VAR 0 1
52402: PUSH
52403: LD_INT 4
52405: MINUS
52406: PUSH
52407: LD_VAR 0 2
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: PUSH
52420: LD_VAR 0 1
52424: PUSH
52425: LD_VAR 0 2
52429: PUSH
52430: LD_INT 4
52432: MINUS
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: PUSH
52442: LD_VAR 0 1
52446: PUSH
52447: LD_INT 3
52449: MINUS
52450: PUSH
52451: LD_VAR 0 2
52455: PUSH
52456: LD_INT 3
52458: MINUS
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// end ; 4 :
52475: GO 52756
52477: LD_INT 4
52479: DOUBLE
52480: EQUAL
52481: IFTRUE 52485
52483: GO 52618
52485: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52486: LD_ADDR_VAR 0 5
52490: PUSH
52491: LD_VAR 0 1
52495: PUSH
52496: LD_VAR 0 2
52500: PUSH
52501: LD_INT 4
52503: PLUS
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: PUSH
52513: LD_VAR 0 1
52517: PUSH
52518: LD_INT 3
52520: PLUS
52521: PUSH
52522: LD_VAR 0 2
52526: PUSH
52527: LD_INT 3
52529: PLUS
52530: PUSH
52531: LD_INT 5
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: PUSH
52539: LD_VAR 0 1
52543: PUSH
52544: LD_INT 4
52546: PLUS
52547: PUSH
52548: LD_VAR 0 2
52552: PUSH
52553: LD_INT 4
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: PUSH
52561: LD_VAR 0 1
52565: PUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 3
52573: MINUS
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: PUSH
52583: LD_VAR 0 1
52587: PUSH
52588: LD_INT 4
52590: MINUS
52591: PUSH
52592: LD_VAR 0 2
52596: PUSH
52597: LD_INT 4
52599: MINUS
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// end ; 5 :
52616: GO 52756
52618: LD_INT 5
52620: DOUBLE
52621: EQUAL
52622: IFTRUE 52626
52624: GO 52755
52626: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52627: LD_ADDR_VAR 0 5
52631: PUSH
52632: LD_VAR 0 1
52636: PUSH
52637: LD_INT 4
52639: MINUS
52640: PUSH
52641: LD_VAR 0 2
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: PUSH
52654: LD_VAR 0 1
52658: PUSH
52659: LD_VAR 0 2
52663: PUSH
52664: LD_INT 4
52666: MINUS
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: PUSH
52676: LD_VAR 0 1
52680: PUSH
52681: LD_INT 4
52683: PLUS
52684: PUSH
52685: LD_VAR 0 2
52689: PUSH
52690: LD_INT 4
52692: PLUS
52693: PUSH
52694: LD_INT 5
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_INT 3
52709: PLUS
52710: PUSH
52711: LD_VAR 0 2
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_VAR 0 2
52733: PUSH
52734: LD_INT 3
52736: PLUS
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: ST_TO_ADDR
// end ; end ;
52753: GO 52756
52755: POP
// result := list ;
52756: LD_ADDR_VAR 0 4
52760: PUSH
52761: LD_VAR 0 5
52765: ST_TO_ADDR
// end ;
52766: LD_VAR 0 4
52770: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52771: LD_INT 0
52773: PPUSH
52774: PPUSH
52775: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52776: LD_VAR 0 1
52780: NOT
52781: PUSH
52782: LD_VAR 0 2
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: LD_INT 4
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: IN
52805: NOT
52806: OR
52807: IFFALSE 52811
// exit ;
52809: GO 52894
// tmp := [ ] ;
52811: LD_ADDR_VAR 0 5
52815: PUSH
52816: EMPTY
52817: ST_TO_ADDR
// for i in units do
52818: LD_ADDR_VAR 0 4
52822: PUSH
52823: LD_VAR 0 1
52827: PUSH
52828: FOR_IN
52829: IFFALSE 52863
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52831: LD_ADDR_VAR 0 5
52835: PUSH
52836: LD_VAR 0 5
52840: PPUSH
52841: LD_VAR 0 4
52845: PPUSH
52846: LD_VAR 0 2
52850: PPUSH
52851: CALL_OW 259
52855: PPUSH
52856: CALL 54267 0 2
52860: ST_TO_ADDR
52861: GO 52828
52863: POP
52864: POP
// if not tmp then
52865: LD_VAR 0 5
52869: NOT
52870: IFFALSE 52874
// exit ;
52872: GO 52894
// result := SortListByListDesc ( units , tmp ) ;
52874: LD_ADDR_VAR 0 3
52878: PUSH
52879: LD_VAR 0 1
52883: PPUSH
52884: LD_VAR 0 5
52888: PPUSH
52889: CALL_OW 77
52893: ST_TO_ADDR
// end ;
52894: LD_VAR 0 3
52898: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52899: LD_INT 0
52901: PPUSH
52902: PPUSH
52903: PPUSH
// result := false ;
52904: LD_ADDR_VAR 0 3
52908: PUSH
52909: LD_INT 0
52911: ST_TO_ADDR
// if not building then
52912: LD_VAR 0 2
52916: NOT
52917: IFFALSE 52921
// exit ;
52919: GO 53059
// x := GetX ( building ) ;
52921: LD_ADDR_VAR 0 4
52925: PUSH
52926: LD_VAR 0 2
52930: PPUSH
52931: CALL_OW 250
52935: ST_TO_ADDR
// y := GetY ( building ) ;
52936: LD_ADDR_VAR 0 5
52940: PUSH
52941: LD_VAR 0 2
52945: PPUSH
52946: CALL_OW 251
52950: ST_TO_ADDR
// if not x or not y then
52951: LD_VAR 0 4
52955: NOT
52956: PUSH
52957: LD_VAR 0 5
52961: NOT
52962: OR
52963: IFFALSE 52967
// exit ;
52965: GO 53059
// if GetTaskList ( unit ) then
52967: LD_VAR 0 1
52971: PPUSH
52972: CALL_OW 437
52976: IFFALSE 53059
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52978: LD_STRING e
52980: PUSH
52981: LD_VAR 0 1
52985: PPUSH
52986: CALL_OW 437
52990: PUSH
52991: LD_INT 1
52993: ARRAY
52994: PUSH
52995: LD_INT 1
52997: ARRAY
52998: EQUAL
52999: PUSH
53000: LD_VAR 0 4
53004: PUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 437
53014: PUSH
53015: LD_INT 1
53017: ARRAY
53018: PUSH
53019: LD_INT 2
53021: ARRAY
53022: EQUAL
53023: AND
53024: PUSH
53025: LD_VAR 0 5
53029: PUSH
53030: LD_VAR 0 1
53034: PPUSH
53035: CALL_OW 437
53039: PUSH
53040: LD_INT 1
53042: ARRAY
53043: PUSH
53044: LD_INT 3
53046: ARRAY
53047: EQUAL
53048: AND
53049: IFFALSE 53059
// result := true end ;
53051: LD_ADDR_VAR 0 3
53055: PUSH
53056: LD_INT 1
53058: ST_TO_ADDR
// end ;
53059: LD_VAR 0 3
53063: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53064: LD_INT 0
53066: PPUSH
// result := false ;
53067: LD_ADDR_VAR 0 4
53071: PUSH
53072: LD_INT 0
53074: ST_TO_ADDR
// if GetTaskList ( unit ) then
53075: LD_VAR 0 1
53079: PPUSH
53080: CALL_OW 437
53084: IFFALSE 53167
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53086: LD_STRING M
53088: PUSH
53089: LD_VAR 0 1
53093: PPUSH
53094: CALL_OW 437
53098: PUSH
53099: LD_INT 1
53101: ARRAY
53102: PUSH
53103: LD_INT 1
53105: ARRAY
53106: EQUAL
53107: PUSH
53108: LD_VAR 0 2
53112: PUSH
53113: LD_VAR 0 1
53117: PPUSH
53118: CALL_OW 437
53122: PUSH
53123: LD_INT 1
53125: ARRAY
53126: PUSH
53127: LD_INT 2
53129: ARRAY
53130: EQUAL
53131: AND
53132: PUSH
53133: LD_VAR 0 3
53137: PUSH
53138: LD_VAR 0 1
53142: PPUSH
53143: CALL_OW 437
53147: PUSH
53148: LD_INT 1
53150: ARRAY
53151: PUSH
53152: LD_INT 3
53154: ARRAY
53155: EQUAL
53156: AND
53157: IFFALSE 53167
// result := true ;
53159: LD_ADDR_VAR 0 4
53163: PUSH
53164: LD_INT 1
53166: ST_TO_ADDR
// end ; end ;
53167: LD_VAR 0 4
53171: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53172: LD_INT 0
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
// if not unit or not area then
53178: LD_VAR 0 1
53182: NOT
53183: PUSH
53184: LD_VAR 0 2
53188: NOT
53189: OR
53190: IFFALSE 53194
// exit ;
53192: GO 53370
// tmp := AreaToList ( area , i ) ;
53194: LD_ADDR_VAR 0 6
53198: PUSH
53199: LD_VAR 0 2
53203: PPUSH
53204: LD_VAR 0 5
53208: PPUSH
53209: CALL_OW 517
53213: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53214: LD_ADDR_VAR 0 5
53218: PUSH
53219: DOUBLE
53220: LD_INT 1
53222: DEC
53223: ST_TO_ADDR
53224: LD_VAR 0 6
53228: PUSH
53229: LD_INT 1
53231: ARRAY
53232: PUSH
53233: FOR_TO
53234: IFFALSE 53368
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53236: LD_ADDR_VAR 0 7
53240: PUSH
53241: LD_VAR 0 6
53245: PUSH
53246: LD_INT 1
53248: ARRAY
53249: PUSH
53250: LD_VAR 0 5
53254: ARRAY
53255: PUSH
53256: LD_VAR 0 6
53260: PUSH
53261: LD_INT 2
53263: ARRAY
53264: PUSH
53265: LD_VAR 0 5
53269: ARRAY
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53275: LD_INT 92
53277: PUSH
53278: LD_VAR 0 7
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: PUSH
53287: LD_VAR 0 7
53291: PUSH
53292: LD_INT 2
53294: ARRAY
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: PPUSH
53305: CALL_OW 69
53309: PUSH
53310: LD_INT 0
53312: EQUAL
53313: IFFALSE 53366
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53315: LD_VAR 0 1
53319: PPUSH
53320: LD_VAR 0 7
53324: PUSH
53325: LD_INT 1
53327: ARRAY
53328: PPUSH
53329: LD_VAR 0 7
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PPUSH
53338: LD_VAR 0 3
53342: PPUSH
53343: CALL_OW 48
// result := IsPlaced ( unit ) ;
53347: LD_ADDR_VAR 0 4
53351: PUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 305
53361: ST_TO_ADDR
// exit ;
53362: POP
53363: POP
53364: GO 53370
// end ; end ;
53366: GO 53233
53368: POP
53369: POP
// end ;
53370: LD_VAR 0 4
53374: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53375: LD_INT 0
53377: PPUSH
53378: PPUSH
53379: PPUSH
// if not side or side > 8 then
53380: LD_VAR 0 1
53384: NOT
53385: PUSH
53386: LD_VAR 0 1
53390: PUSH
53391: LD_INT 8
53393: GREATER
53394: OR
53395: IFFALSE 53399
// exit ;
53397: GO 53586
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53399: LD_ADDR_VAR 0 4
53403: PUSH
53404: LD_INT 22
53406: PUSH
53407: LD_VAR 0 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 21
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PPUSH
53430: CALL_OW 69
53434: ST_TO_ADDR
// if not tmp then
53435: LD_VAR 0 4
53439: NOT
53440: IFFALSE 53444
// exit ;
53442: GO 53586
// enable_addtolog := true ;
53444: LD_ADDR_OWVAR 81
53448: PUSH
53449: LD_INT 1
53451: ST_TO_ADDR
// AddToLog ( [ ) ;
53452: LD_STRING [
53454: PPUSH
53455: CALL_OW 561
// for i in tmp do
53459: LD_ADDR_VAR 0 3
53463: PUSH
53464: LD_VAR 0 4
53468: PUSH
53469: FOR_IN
53470: IFFALSE 53577
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53472: LD_STRING [
53474: PUSH
53475: LD_VAR 0 3
53479: PPUSH
53480: CALL_OW 266
53484: STR
53485: PUSH
53486: LD_STRING , 
53488: STR
53489: PUSH
53490: LD_VAR 0 3
53494: PPUSH
53495: CALL_OW 250
53499: STR
53500: PUSH
53501: LD_STRING , 
53503: STR
53504: PUSH
53505: LD_VAR 0 3
53509: PPUSH
53510: CALL_OW 251
53514: STR
53515: PUSH
53516: LD_STRING , 
53518: STR
53519: PUSH
53520: LD_VAR 0 3
53524: PPUSH
53525: CALL_OW 254
53529: STR
53530: PUSH
53531: LD_STRING , 
53533: STR
53534: PUSH
53535: LD_VAR 0 3
53539: PPUSH
53540: LD_INT 1
53542: PPUSH
53543: CALL_OW 268
53547: STR
53548: PUSH
53549: LD_STRING , 
53551: STR
53552: PUSH
53553: LD_VAR 0 3
53557: PPUSH
53558: LD_INT 2
53560: PPUSH
53561: CALL_OW 268
53565: STR
53566: PUSH
53567: LD_STRING ],
53569: STR
53570: PPUSH
53571: CALL_OW 561
// end ;
53575: GO 53469
53577: POP
53578: POP
// AddToLog ( ]; ) ;
53579: LD_STRING ];
53581: PPUSH
53582: CALL_OW 561
// end ;
53586: LD_VAR 0 2
53590: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53591: LD_INT 0
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
// if not area or not rate or not max then
53598: LD_VAR 0 1
53602: NOT
53603: PUSH
53604: LD_VAR 0 2
53608: NOT
53609: OR
53610: PUSH
53611: LD_VAR 0 4
53615: NOT
53616: OR
53617: IFFALSE 53621
// exit ;
53619: GO 53810
// while 1 do
53621: LD_INT 1
53623: IFFALSE 53810
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53625: LD_ADDR_VAR 0 9
53629: PUSH
53630: LD_VAR 0 1
53634: PPUSH
53635: LD_INT 1
53637: PPUSH
53638: CALL_OW 287
53642: PUSH
53643: LD_INT 10
53645: MUL
53646: ST_TO_ADDR
// r := rate / 10 ;
53647: LD_ADDR_VAR 0 7
53651: PUSH
53652: LD_VAR 0 2
53656: PUSH
53657: LD_INT 10
53659: DIVREAL
53660: ST_TO_ADDR
// time := 1 1$00 ;
53661: LD_ADDR_VAR 0 8
53665: PUSH
53666: LD_INT 2100
53668: ST_TO_ADDR
// if amount < min then
53669: LD_VAR 0 9
53673: PUSH
53674: LD_VAR 0 3
53678: LESS
53679: IFFALSE 53697
// r := r * 2 else
53681: LD_ADDR_VAR 0 7
53685: PUSH
53686: LD_VAR 0 7
53690: PUSH
53691: LD_INT 2
53693: MUL
53694: ST_TO_ADDR
53695: GO 53723
// if amount > max then
53697: LD_VAR 0 9
53701: PUSH
53702: LD_VAR 0 4
53706: GREATER
53707: IFFALSE 53723
// r := r / 2 ;
53709: LD_ADDR_VAR 0 7
53713: PUSH
53714: LD_VAR 0 7
53718: PUSH
53719: LD_INT 2
53721: DIVREAL
53722: ST_TO_ADDR
// time := time / r ;
53723: LD_ADDR_VAR 0 8
53727: PUSH
53728: LD_VAR 0 8
53732: PUSH
53733: LD_VAR 0 7
53737: DIVREAL
53738: ST_TO_ADDR
// if time < 0 then
53739: LD_VAR 0 8
53743: PUSH
53744: LD_INT 0
53746: LESS
53747: IFFALSE 53764
// time := time * - 1 ;
53749: LD_ADDR_VAR 0 8
53753: PUSH
53754: LD_VAR 0 8
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: MUL
53763: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53764: LD_VAR 0 8
53768: PUSH
53769: LD_INT 35
53771: PPUSH
53772: LD_INT 875
53774: PPUSH
53775: CALL_OW 12
53779: PLUS
53780: PPUSH
53781: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53785: LD_INT 1
53787: PPUSH
53788: LD_INT 5
53790: PPUSH
53791: CALL_OW 12
53795: PPUSH
53796: LD_VAR 0 1
53800: PPUSH
53801: LD_INT 1
53803: PPUSH
53804: CALL_OW 55
// end ;
53808: GO 53621
// end ;
53810: LD_VAR 0 5
53814: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53815: LD_INT 0
53817: PPUSH
53818: PPUSH
53819: PPUSH
53820: PPUSH
53821: PPUSH
53822: PPUSH
53823: PPUSH
53824: PPUSH
// if not turrets or not factories then
53825: LD_VAR 0 1
53829: NOT
53830: PUSH
53831: LD_VAR 0 2
53835: NOT
53836: OR
53837: IFFALSE 53841
// exit ;
53839: GO 54148
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53841: LD_ADDR_VAR 0 10
53845: PUSH
53846: LD_INT 5
53848: PUSH
53849: LD_INT 6
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: LD_INT 4
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: LD_INT 5
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 24
53883: PUSH
53884: LD_INT 25
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 23
53893: PUSH
53894: LD_INT 27
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 42
53907: PUSH
53908: LD_INT 43
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 44
53917: PUSH
53918: LD_INT 46
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 45
53927: PUSH
53928: LD_INT 47
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// result := [ ] ;
53945: LD_ADDR_VAR 0 3
53949: PUSH
53950: EMPTY
53951: ST_TO_ADDR
// for i in turrets do
53952: LD_ADDR_VAR 0 4
53956: PUSH
53957: LD_VAR 0 1
53961: PUSH
53962: FOR_IN
53963: IFFALSE 54146
// begin nat := GetNation ( i ) ;
53965: LD_ADDR_VAR 0 7
53969: PUSH
53970: LD_VAR 0 4
53974: PPUSH
53975: CALL_OW 248
53979: ST_TO_ADDR
// weapon := 0 ;
53980: LD_ADDR_VAR 0 8
53984: PUSH
53985: LD_INT 0
53987: ST_TO_ADDR
// if not nat then
53988: LD_VAR 0 7
53992: NOT
53993: IFFALSE 53997
// continue ;
53995: GO 53962
// for j in list [ nat ] do
53997: LD_ADDR_VAR 0 5
54001: PUSH
54002: LD_VAR 0 10
54006: PUSH
54007: LD_VAR 0 7
54011: ARRAY
54012: PUSH
54013: FOR_IN
54014: IFFALSE 54055
// if GetBWeapon ( i ) = j [ 1 ] then
54016: LD_VAR 0 4
54020: PPUSH
54021: CALL_OW 269
54025: PUSH
54026: LD_VAR 0 5
54030: PUSH
54031: LD_INT 1
54033: ARRAY
54034: EQUAL
54035: IFFALSE 54053
// begin weapon := j [ 2 ] ;
54037: LD_ADDR_VAR 0 8
54041: PUSH
54042: LD_VAR 0 5
54046: PUSH
54047: LD_INT 2
54049: ARRAY
54050: ST_TO_ADDR
// break ;
54051: GO 54055
// end ;
54053: GO 54013
54055: POP
54056: POP
// if not weapon then
54057: LD_VAR 0 8
54061: NOT
54062: IFFALSE 54066
// continue ;
54064: GO 53962
// for k in factories do
54066: LD_ADDR_VAR 0 6
54070: PUSH
54071: LD_VAR 0 2
54075: PUSH
54076: FOR_IN
54077: IFFALSE 54142
// begin weapons := AvailableWeaponList ( k ) ;
54079: LD_ADDR_VAR 0 9
54083: PUSH
54084: LD_VAR 0 6
54088: PPUSH
54089: CALL_OW 478
54093: ST_TO_ADDR
// if not weapons then
54094: LD_VAR 0 9
54098: NOT
54099: IFFALSE 54103
// continue ;
54101: GO 54076
// if weapon in weapons then
54103: LD_VAR 0 8
54107: PUSH
54108: LD_VAR 0 9
54112: IN
54113: IFFALSE 54140
// begin result := [ i , weapon ] ;
54115: LD_ADDR_VAR 0 3
54119: PUSH
54120: LD_VAR 0 4
54124: PUSH
54125: LD_VAR 0 8
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// exit ;
54134: POP
54135: POP
54136: POP
54137: POP
54138: GO 54148
// end ; end ;
54140: GO 54076
54142: POP
54143: POP
// end ;
54144: GO 53962
54146: POP
54147: POP
// end ;
54148: LD_VAR 0 3
54152: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54153: LD_INT 0
54155: PPUSH
// if not side or side > 8 then
54156: LD_VAR 0 3
54160: NOT
54161: PUSH
54162: LD_VAR 0 3
54166: PUSH
54167: LD_INT 8
54169: GREATER
54170: OR
54171: IFFALSE 54175
// exit ;
54173: GO 54234
// if not range then
54175: LD_VAR 0 4
54179: NOT
54180: IFFALSE 54191
// range := - 12 ;
54182: LD_ADDR_VAR 0 4
54186: PUSH
54187: LD_INT 12
54189: NEG
54190: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54191: LD_VAR 0 1
54195: PPUSH
54196: LD_VAR 0 2
54200: PPUSH
54201: LD_VAR 0 3
54205: PPUSH
54206: LD_VAR 0 4
54210: PPUSH
54211: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54215: LD_VAR 0 1
54219: PPUSH
54220: LD_VAR 0 2
54224: PPUSH
54225: LD_VAR 0 3
54229: PPUSH
54230: CALL_OW 331
// end ;
54234: LD_VAR 0 5
54238: RET
// export function Video ( mode ) ; begin
54239: LD_INT 0
54241: PPUSH
// ingame_video = mode ;
54242: LD_ADDR_OWVAR 52
54246: PUSH
54247: LD_VAR 0 1
54251: ST_TO_ADDR
// interface_hidden = mode ;
54252: LD_ADDR_OWVAR 54
54256: PUSH
54257: LD_VAR 0 1
54261: ST_TO_ADDR
// end ;
54262: LD_VAR 0 2
54266: RET
// export function Join ( array , element ) ; begin
54267: LD_INT 0
54269: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54270: LD_ADDR_VAR 0 3
54274: PUSH
54275: LD_VAR 0 1
54279: PPUSH
54280: LD_VAR 0 1
54284: PUSH
54285: LD_INT 1
54287: PLUS
54288: PPUSH
54289: LD_VAR 0 2
54293: PPUSH
54294: CALL_OW 1
54298: ST_TO_ADDR
// end ;
54299: LD_VAR 0 3
54303: RET
// export function JoinUnion ( array , element ) ; begin
54304: LD_INT 0
54306: PPUSH
// result := array union element ;
54307: LD_ADDR_VAR 0 3
54311: PUSH
54312: LD_VAR 0 1
54316: PUSH
54317: LD_VAR 0 2
54321: UNION
54322: ST_TO_ADDR
// end ;
54323: LD_VAR 0 3
54327: RET
// export function GetBehemoths ( side ) ; begin
54328: LD_INT 0
54330: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54331: LD_ADDR_VAR 0 2
54335: PUSH
54336: LD_INT 22
54338: PUSH
54339: LD_VAR 0 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 31
54350: PUSH
54351: LD_INT 25
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PPUSH
54362: CALL_OW 69
54366: ST_TO_ADDR
// end ;
54367: LD_VAR 0 2
54371: RET
// export function Shuffle ( array ) ; var i , index ; begin
54372: LD_INT 0
54374: PPUSH
54375: PPUSH
54376: PPUSH
// result := [ ] ;
54377: LD_ADDR_VAR 0 2
54381: PUSH
54382: EMPTY
54383: ST_TO_ADDR
// if not array then
54384: LD_VAR 0 1
54388: NOT
54389: IFFALSE 54393
// exit ;
54391: GO 54492
// Randomize ;
54393: CALL_OW 10
// for i = array downto 1 do
54397: LD_ADDR_VAR 0 3
54401: PUSH
54402: DOUBLE
54403: LD_VAR 0 1
54407: INC
54408: ST_TO_ADDR
54409: LD_INT 1
54411: PUSH
54412: FOR_DOWNTO
54413: IFFALSE 54490
// begin index := rand ( 1 , array ) ;
54415: LD_ADDR_VAR 0 4
54419: PUSH
54420: LD_INT 1
54422: PPUSH
54423: LD_VAR 0 1
54427: PPUSH
54428: CALL_OW 12
54432: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54433: LD_ADDR_VAR 0 2
54437: PUSH
54438: LD_VAR 0 2
54442: PPUSH
54443: LD_VAR 0 2
54447: PUSH
54448: LD_INT 1
54450: PLUS
54451: PPUSH
54452: LD_VAR 0 1
54456: PUSH
54457: LD_VAR 0 4
54461: ARRAY
54462: PPUSH
54463: CALL_OW 2
54467: ST_TO_ADDR
// array := Delete ( array , index ) ;
54468: LD_ADDR_VAR 0 1
54472: PUSH
54473: LD_VAR 0 1
54477: PPUSH
54478: LD_VAR 0 4
54482: PPUSH
54483: CALL_OW 3
54487: ST_TO_ADDR
// end ;
54488: GO 54412
54490: POP
54491: POP
// end ;
54492: LD_VAR 0 2
54496: RET
// export function GetBaseMaterials ( base ) ; begin
54497: LD_INT 0
54499: PPUSH
// result := [ 0 , 0 , 0 ] ;
54500: LD_ADDR_VAR 0 2
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: ST_TO_ADDR
// if not base then
54519: LD_VAR 0 1
54523: NOT
54524: IFFALSE 54528
// exit ;
54526: GO 54577
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54528: LD_ADDR_VAR 0 2
54532: PUSH
54533: LD_VAR 0 1
54537: PPUSH
54538: LD_INT 1
54540: PPUSH
54541: CALL_OW 275
54545: PUSH
54546: LD_VAR 0 1
54550: PPUSH
54551: LD_INT 2
54553: PPUSH
54554: CALL_OW 275
54558: PUSH
54559: LD_VAR 0 1
54563: PPUSH
54564: LD_INT 3
54566: PPUSH
54567: CALL_OW 275
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// end ;
54577: LD_VAR 0 2
54581: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54582: LD_INT 0
54584: PPUSH
54585: PPUSH
// result := array ;
54586: LD_ADDR_VAR 0 3
54590: PUSH
54591: LD_VAR 0 1
54595: ST_TO_ADDR
// if size >= result then
54596: LD_VAR 0 2
54600: PUSH
54601: LD_VAR 0 3
54605: GREATEREQUAL
54606: IFFALSE 54610
// exit ;
54608: GO 54660
// if size then
54610: LD_VAR 0 2
54614: IFFALSE 54660
// for i := array downto size do
54616: LD_ADDR_VAR 0 4
54620: PUSH
54621: DOUBLE
54622: LD_VAR 0 1
54626: INC
54627: ST_TO_ADDR
54628: LD_VAR 0 2
54632: PUSH
54633: FOR_DOWNTO
54634: IFFALSE 54658
// result := Delete ( result , result ) ;
54636: LD_ADDR_VAR 0 3
54640: PUSH
54641: LD_VAR 0 3
54645: PPUSH
54646: LD_VAR 0 3
54650: PPUSH
54651: CALL_OW 3
54655: ST_TO_ADDR
54656: GO 54633
54658: POP
54659: POP
// end ;
54660: LD_VAR 0 3
54664: RET
// export function ComExit ( unit ) ; var tmp ; begin
54665: LD_INT 0
54667: PPUSH
54668: PPUSH
// if not IsInUnit ( unit ) then
54669: LD_VAR 0 1
54673: PPUSH
54674: CALL_OW 310
54678: NOT
54679: IFFALSE 54683
// exit ;
54681: GO 54743
// tmp := IsInUnit ( unit ) ;
54683: LD_ADDR_VAR 0 3
54687: PUSH
54688: LD_VAR 0 1
54692: PPUSH
54693: CALL_OW 310
54697: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54698: LD_VAR 0 3
54702: PPUSH
54703: CALL_OW 247
54707: PUSH
54708: LD_INT 2
54710: EQUAL
54711: IFFALSE 54724
// ComExitVehicle ( unit ) else
54713: LD_VAR 0 1
54717: PPUSH
54718: CALL_OW 121
54722: GO 54733
// ComExitBuilding ( unit ) ;
54724: LD_VAR 0 1
54728: PPUSH
54729: CALL_OW 122
// result := tmp ;
54733: LD_ADDR_VAR 0 2
54737: PUSH
54738: LD_VAR 0 3
54742: ST_TO_ADDR
// end ;
54743: LD_VAR 0 2
54747: RET
// export function ComExitAll ( units ) ; var i ; begin
54748: LD_INT 0
54750: PPUSH
54751: PPUSH
// if not units then
54752: LD_VAR 0 1
54756: NOT
54757: IFFALSE 54761
// exit ;
54759: GO 54787
// for i in units do
54761: LD_ADDR_VAR 0 3
54765: PUSH
54766: LD_VAR 0 1
54770: PUSH
54771: FOR_IN
54772: IFFALSE 54785
// ComExit ( i ) ;
54774: LD_VAR 0 3
54778: PPUSH
54779: CALL 54665 0 1
54783: GO 54771
54785: POP
54786: POP
// end ;
54787: LD_VAR 0 2
54791: RET
// export function ResetHc ; begin
54792: LD_INT 0
54794: PPUSH
// InitHc ;
54795: CALL_OW 19
// hc_importance := 0 ;
54799: LD_ADDR_OWVAR 32
54803: PUSH
54804: LD_INT 0
54806: ST_TO_ADDR
// end ;
54807: LD_VAR 0 1
54811: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54812: LD_INT 0
54814: PPUSH
54815: PPUSH
54816: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54817: LD_ADDR_VAR 0 6
54821: PUSH
54822: LD_VAR 0 1
54826: PUSH
54827: LD_VAR 0 3
54831: PLUS
54832: PUSH
54833: LD_INT 2
54835: DIV
54836: ST_TO_ADDR
// if _x < 0 then
54837: LD_VAR 0 6
54841: PUSH
54842: LD_INT 0
54844: LESS
54845: IFFALSE 54862
// _x := _x * - 1 ;
54847: LD_ADDR_VAR 0 6
54851: PUSH
54852: LD_VAR 0 6
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: MUL
54861: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54862: LD_ADDR_VAR 0 7
54866: PUSH
54867: LD_VAR 0 2
54871: PUSH
54872: LD_VAR 0 4
54876: PLUS
54877: PUSH
54878: LD_INT 2
54880: DIV
54881: ST_TO_ADDR
// if _y < 0 then
54882: LD_VAR 0 7
54886: PUSH
54887: LD_INT 0
54889: LESS
54890: IFFALSE 54907
// _y := _y * - 1 ;
54892: LD_ADDR_VAR 0 7
54896: PUSH
54897: LD_VAR 0 7
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: MUL
54906: ST_TO_ADDR
// result := [ _x , _y ] ;
54907: LD_ADDR_VAR 0 5
54911: PUSH
54912: LD_VAR 0 6
54916: PUSH
54917: LD_VAR 0 7
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// end ;
54926: LD_VAR 0 5
54930: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54931: LD_INT 0
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
// task := GetTaskList ( unit ) ;
54937: LD_ADDR_VAR 0 7
54941: PUSH
54942: LD_VAR 0 1
54946: PPUSH
54947: CALL_OW 437
54951: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54952: LD_VAR 0 7
54956: NOT
54957: PUSH
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_VAR 0 2
54967: PPUSH
54968: CALL_OW 308
54972: NOT
54973: AND
54974: IFFALSE 54978
// exit ;
54976: GO 55096
// if IsInArea ( unit , area ) then
54978: LD_VAR 0 1
54982: PPUSH
54983: LD_VAR 0 2
54987: PPUSH
54988: CALL_OW 308
54992: IFFALSE 55010
// begin ComMoveToArea ( unit , goAway ) ;
54994: LD_VAR 0 1
54998: PPUSH
54999: LD_VAR 0 3
55003: PPUSH
55004: CALL_OW 113
// exit ;
55008: GO 55096
// end ; if task [ 1 ] [ 1 ] <> M then
55010: LD_VAR 0 7
55014: PUSH
55015: LD_INT 1
55017: ARRAY
55018: PUSH
55019: LD_INT 1
55021: ARRAY
55022: PUSH
55023: LD_STRING M
55025: NONEQUAL
55026: IFFALSE 55030
// exit ;
55028: GO 55096
// x := task [ 1 ] [ 2 ] ;
55030: LD_ADDR_VAR 0 5
55034: PUSH
55035: LD_VAR 0 7
55039: PUSH
55040: LD_INT 1
55042: ARRAY
55043: PUSH
55044: LD_INT 2
55046: ARRAY
55047: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55048: LD_ADDR_VAR 0 6
55052: PUSH
55053: LD_VAR 0 7
55057: PUSH
55058: LD_INT 1
55060: ARRAY
55061: PUSH
55062: LD_INT 3
55064: ARRAY
55065: ST_TO_ADDR
// if InArea ( x , y , area ) then
55066: LD_VAR 0 5
55070: PPUSH
55071: LD_VAR 0 6
55075: PPUSH
55076: LD_VAR 0 2
55080: PPUSH
55081: CALL_OW 309
55085: IFFALSE 55096
// ComStop ( unit ) ;
55087: LD_VAR 0 1
55091: PPUSH
55092: CALL_OW 141
// end ;
55096: LD_VAR 0 4
55100: RET
// export function Abs ( value ) ; begin
55101: LD_INT 0
55103: PPUSH
// result := value ;
55104: LD_ADDR_VAR 0 2
55108: PUSH
55109: LD_VAR 0 1
55113: ST_TO_ADDR
// if value < 0 then
55114: LD_VAR 0 1
55118: PUSH
55119: LD_INT 0
55121: LESS
55122: IFFALSE 55139
// result := value * - 1 ;
55124: LD_ADDR_VAR 0 2
55128: PUSH
55129: LD_VAR 0 1
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: MUL
55138: ST_TO_ADDR
// end ;
55139: LD_VAR 0 2
55143: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55144: LD_INT 0
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
// if not unit or not building then
55154: LD_VAR 0 1
55158: NOT
55159: PUSH
55160: LD_VAR 0 2
55164: NOT
55165: OR
55166: IFFALSE 55170
// exit ;
55168: GO 55396
// x := GetX ( building ) ;
55170: LD_ADDR_VAR 0 4
55174: PUSH
55175: LD_VAR 0 2
55179: PPUSH
55180: CALL_OW 250
55184: ST_TO_ADDR
// y := GetY ( building ) ;
55185: LD_ADDR_VAR 0 6
55189: PUSH
55190: LD_VAR 0 2
55194: PPUSH
55195: CALL_OW 251
55199: ST_TO_ADDR
// d := GetDir ( building ) ;
55200: LD_ADDR_VAR 0 8
55204: PUSH
55205: LD_VAR 0 2
55209: PPUSH
55210: CALL_OW 254
55214: ST_TO_ADDR
// r := 4 ;
55215: LD_ADDR_VAR 0 9
55219: PUSH
55220: LD_INT 4
55222: ST_TO_ADDR
// for i := 1 to 5 do
55223: LD_ADDR_VAR 0 10
55227: PUSH
55228: DOUBLE
55229: LD_INT 1
55231: DEC
55232: ST_TO_ADDR
55233: LD_INT 5
55235: PUSH
55236: FOR_TO
55237: IFFALSE 55394
// begin _x := ShiftX ( x , d , r + i ) ;
55239: LD_ADDR_VAR 0 5
55243: PUSH
55244: LD_VAR 0 4
55248: PPUSH
55249: LD_VAR 0 8
55253: PPUSH
55254: LD_VAR 0 9
55258: PUSH
55259: LD_VAR 0 10
55263: PLUS
55264: PPUSH
55265: CALL_OW 272
55269: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55270: LD_ADDR_VAR 0 7
55274: PUSH
55275: LD_VAR 0 6
55279: PPUSH
55280: LD_VAR 0 8
55284: PPUSH
55285: LD_VAR 0 9
55289: PUSH
55290: LD_VAR 0 10
55294: PLUS
55295: PPUSH
55296: CALL_OW 273
55300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55301: LD_VAR 0 5
55305: PPUSH
55306: LD_VAR 0 7
55310: PPUSH
55311: CALL_OW 488
55315: PUSH
55316: LD_VAR 0 5
55320: PPUSH
55321: LD_VAR 0 7
55325: PPUSH
55326: CALL_OW 428
55330: PPUSH
55331: CALL_OW 247
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: IN
55346: NOT
55347: AND
55348: IFFALSE 55392
// begin ComMoveXY ( unit , _x , _y ) ;
55350: LD_VAR 0 1
55354: PPUSH
55355: LD_VAR 0 5
55359: PPUSH
55360: LD_VAR 0 7
55364: PPUSH
55365: CALL_OW 111
// result := [ _x , _y ] ;
55369: LD_ADDR_VAR 0 3
55373: PUSH
55374: LD_VAR 0 5
55378: PUSH
55379: LD_VAR 0 7
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// exit ;
55388: POP
55389: POP
55390: GO 55396
// end ; end ;
55392: GO 55236
55394: POP
55395: POP
// end ;
55396: LD_VAR 0 3
55400: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55401: LD_INT 0
55403: PPUSH
55404: PPUSH
55405: PPUSH
// result := 0 ;
55406: LD_ADDR_VAR 0 3
55410: PUSH
55411: LD_INT 0
55413: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55414: LD_VAR 0 1
55418: PUSH
55419: LD_INT 0
55421: LESS
55422: PUSH
55423: LD_VAR 0 1
55427: PUSH
55428: LD_INT 8
55430: GREATER
55431: OR
55432: PUSH
55433: LD_VAR 0 2
55437: PUSH
55438: LD_INT 0
55440: LESS
55441: OR
55442: PUSH
55443: LD_VAR 0 2
55447: PUSH
55448: LD_INT 8
55450: GREATER
55451: OR
55452: IFFALSE 55456
// exit ;
55454: GO 55531
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55456: LD_ADDR_VAR 0 4
55460: PUSH
55461: LD_INT 22
55463: PUSH
55464: LD_VAR 0 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PPUSH
55473: CALL_OW 69
55477: PUSH
55478: FOR_IN
55479: IFFALSE 55529
// begin un := UnitShoot ( i ) ;
55481: LD_ADDR_VAR 0 5
55485: PUSH
55486: LD_VAR 0 4
55490: PPUSH
55491: CALL_OW 504
55495: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55496: LD_VAR 0 5
55500: PPUSH
55501: CALL_OW 255
55505: PUSH
55506: LD_VAR 0 1
55510: EQUAL
55511: IFFALSE 55527
// begin result := un ;
55513: LD_ADDR_VAR 0 3
55517: PUSH
55518: LD_VAR 0 5
55522: ST_TO_ADDR
// exit ;
55523: POP
55524: POP
55525: GO 55531
// end ; end ;
55527: GO 55478
55529: POP
55530: POP
// end ;
55531: LD_VAR 0 3
55535: RET
// export function GetCargoBay ( units ) ; begin
55536: LD_INT 0
55538: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55539: LD_ADDR_VAR 0 2
55543: PUSH
55544: LD_VAR 0 1
55548: PPUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 34
55554: PUSH
55555: LD_INT 12
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 34
55564: PUSH
55565: LD_INT 51
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 34
55574: PUSH
55575: LD_INT 32
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 34
55584: PUSH
55585: LD_INT 89
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: PPUSH
55599: CALL_OW 72
55603: ST_TO_ADDR
// end ;
55604: LD_VAR 0 2
55608: RET
// export function Negate ( value ) ; begin
55609: LD_INT 0
55611: PPUSH
// result := not value ;
55612: LD_ADDR_VAR 0 2
55616: PUSH
55617: LD_VAR 0 1
55621: NOT
55622: ST_TO_ADDR
// end ;
55623: LD_VAR 0 2
55627: RET
// export function Inc ( value ) ; begin
55628: LD_INT 0
55630: PPUSH
// result := value + 1 ;
55631: LD_ADDR_VAR 0 2
55635: PUSH
55636: LD_VAR 0 1
55640: PUSH
55641: LD_INT 1
55643: PLUS
55644: ST_TO_ADDR
// end ;
55645: LD_VAR 0 2
55649: RET
// export function Dec ( value ) ; begin
55650: LD_INT 0
55652: PPUSH
// result := value - 1 ;
55653: LD_ADDR_VAR 0 2
55657: PUSH
55658: LD_VAR 0 1
55662: PUSH
55663: LD_INT 1
55665: MINUS
55666: ST_TO_ADDR
// end ;
55667: LD_VAR 0 2
55671: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55672: LD_INT 0
55674: PPUSH
55675: PPUSH
55676: PPUSH
55677: PPUSH
55678: PPUSH
55679: PPUSH
55680: PPUSH
55681: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55682: LD_VAR 0 1
55686: PPUSH
55687: LD_VAR 0 2
55691: PPUSH
55692: CALL_OW 488
55696: NOT
55697: PUSH
55698: LD_VAR 0 3
55702: PPUSH
55703: LD_VAR 0 4
55707: PPUSH
55708: CALL_OW 488
55712: NOT
55713: OR
55714: IFFALSE 55727
// begin result := - 1 ;
55716: LD_ADDR_VAR 0 5
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: ST_TO_ADDR
// exit ;
55725: GO 55962
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55727: LD_ADDR_VAR 0 12
55731: PUSH
55732: LD_VAR 0 1
55736: PPUSH
55737: LD_VAR 0 2
55741: PPUSH
55742: LD_VAR 0 3
55746: PPUSH
55747: LD_VAR 0 4
55751: PPUSH
55752: CALL 54812 0 4
55756: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55757: LD_ADDR_VAR 0 11
55761: PUSH
55762: LD_VAR 0 1
55766: PPUSH
55767: LD_VAR 0 2
55771: PPUSH
55772: LD_VAR 0 12
55776: PUSH
55777: LD_INT 1
55779: ARRAY
55780: PPUSH
55781: LD_VAR 0 12
55785: PUSH
55786: LD_INT 2
55788: ARRAY
55789: PPUSH
55790: CALL_OW 298
55794: ST_TO_ADDR
// distance := 9999 ;
55795: LD_ADDR_VAR 0 10
55799: PUSH
55800: LD_INT 9999
55802: ST_TO_ADDR
// for i := 0 to 5 do
55803: LD_ADDR_VAR 0 6
55807: PUSH
55808: DOUBLE
55809: LD_INT 0
55811: DEC
55812: ST_TO_ADDR
55813: LD_INT 5
55815: PUSH
55816: FOR_TO
55817: IFFALSE 55960
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55819: LD_ADDR_VAR 0 7
55823: PUSH
55824: LD_VAR 0 1
55828: PPUSH
55829: LD_VAR 0 6
55833: PPUSH
55834: LD_VAR 0 11
55838: PPUSH
55839: CALL_OW 272
55843: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55844: LD_ADDR_VAR 0 8
55848: PUSH
55849: LD_VAR 0 2
55853: PPUSH
55854: LD_VAR 0 6
55858: PPUSH
55859: LD_VAR 0 11
55863: PPUSH
55864: CALL_OW 273
55868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55869: LD_VAR 0 7
55873: PPUSH
55874: LD_VAR 0 8
55878: PPUSH
55879: CALL_OW 488
55883: NOT
55884: IFFALSE 55888
// continue ;
55886: GO 55816
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55888: LD_ADDR_VAR 0 9
55892: PUSH
55893: LD_VAR 0 12
55897: PUSH
55898: LD_INT 1
55900: ARRAY
55901: PPUSH
55902: LD_VAR 0 12
55906: PUSH
55907: LD_INT 2
55909: ARRAY
55910: PPUSH
55911: LD_VAR 0 7
55915: PPUSH
55916: LD_VAR 0 8
55920: PPUSH
55921: CALL_OW 298
55925: ST_TO_ADDR
// if tmp < distance then
55926: LD_VAR 0 9
55930: PUSH
55931: LD_VAR 0 10
55935: LESS
55936: IFFALSE 55958
// begin result := i ;
55938: LD_ADDR_VAR 0 5
55942: PUSH
55943: LD_VAR 0 6
55947: ST_TO_ADDR
// distance := tmp ;
55948: LD_ADDR_VAR 0 10
55952: PUSH
55953: LD_VAR 0 9
55957: ST_TO_ADDR
// end ; end ;
55958: GO 55816
55960: POP
55961: POP
// end ;
55962: LD_VAR 0 5
55966: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55967: LD_INT 0
55969: PPUSH
55970: PPUSH
// if not driver or not IsInUnit ( driver ) then
55971: LD_VAR 0 1
55975: NOT
55976: PUSH
55977: LD_VAR 0 1
55981: PPUSH
55982: CALL_OW 310
55986: NOT
55987: OR
55988: IFFALSE 55992
// exit ;
55990: GO 56082
// vehicle := IsInUnit ( driver ) ;
55992: LD_ADDR_VAR 0 3
55996: PUSH
55997: LD_VAR 0 1
56001: PPUSH
56002: CALL_OW 310
56006: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56007: LD_VAR 0 1
56011: PPUSH
56012: LD_STRING \
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: PUSH
56042: LD_STRING E
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_VAR 0 3
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PPUSH
56078: CALL_OW 446
// end ;
56082: LD_VAR 0 2
56086: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56087: LD_INT 0
56089: PPUSH
56090: PPUSH
// if not driver or not IsInUnit ( driver ) then
56091: LD_VAR 0 1
56095: NOT
56096: PUSH
56097: LD_VAR 0 1
56101: PPUSH
56102: CALL_OW 310
56106: NOT
56107: OR
56108: IFFALSE 56112
// exit ;
56110: GO 56202
// vehicle := IsInUnit ( driver ) ;
56112: LD_ADDR_VAR 0 3
56116: PUSH
56117: LD_VAR 0 1
56121: PPUSH
56122: CALL_OW 310
56126: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56127: LD_VAR 0 1
56131: PPUSH
56132: LD_STRING \
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: PUSH
56162: LD_STRING E
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_VAR 0 3
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PPUSH
56198: CALL_OW 447
// end ;
56202: LD_VAR 0 2
56206: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56207: LD_INT 0
56209: PPUSH
56210: PPUSH
56211: PPUSH
// tmp := [ ] ;
56212: LD_ADDR_VAR 0 5
56216: PUSH
56217: EMPTY
56218: ST_TO_ADDR
// for i in units do
56219: LD_ADDR_VAR 0 4
56223: PUSH
56224: LD_VAR 0 1
56228: PUSH
56229: FOR_IN
56230: IFFALSE 56268
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56232: LD_ADDR_VAR 0 5
56236: PUSH
56237: LD_VAR 0 5
56241: PPUSH
56242: LD_VAR 0 5
56246: PUSH
56247: LD_INT 1
56249: PLUS
56250: PPUSH
56251: LD_VAR 0 4
56255: PPUSH
56256: CALL_OW 256
56260: PPUSH
56261: CALL_OW 2
56265: ST_TO_ADDR
56266: GO 56229
56268: POP
56269: POP
// if not tmp then
56270: LD_VAR 0 5
56274: NOT
56275: IFFALSE 56279
// exit ;
56277: GO 56327
// if asc then
56279: LD_VAR 0 2
56283: IFFALSE 56307
// result := SortListByListAsc ( units , tmp ) else
56285: LD_ADDR_VAR 0 3
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_VAR 0 5
56299: PPUSH
56300: CALL_OW 76
56304: ST_TO_ADDR
56305: GO 56327
// result := SortListByListDesc ( units , tmp ) ;
56307: LD_ADDR_VAR 0 3
56311: PUSH
56312: LD_VAR 0 1
56316: PPUSH
56317: LD_VAR 0 5
56321: PPUSH
56322: CALL_OW 77
56326: ST_TO_ADDR
// end ;
56327: LD_VAR 0 3
56331: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56332: LD_INT 0
56334: PPUSH
56335: PPUSH
// task := GetTaskList ( mech ) ;
56336: LD_ADDR_VAR 0 4
56340: PUSH
56341: LD_VAR 0 1
56345: PPUSH
56346: CALL_OW 437
56350: ST_TO_ADDR
// if not task then
56351: LD_VAR 0 4
56355: NOT
56356: IFFALSE 56360
// exit ;
56358: GO 56402
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56360: LD_ADDR_VAR 0 3
56364: PUSH
56365: LD_VAR 0 4
56369: PUSH
56370: LD_INT 1
56372: ARRAY
56373: PUSH
56374: LD_INT 1
56376: ARRAY
56377: PUSH
56378: LD_STRING r
56380: EQUAL
56381: PUSH
56382: LD_VAR 0 4
56386: PUSH
56387: LD_INT 1
56389: ARRAY
56390: PUSH
56391: LD_INT 4
56393: ARRAY
56394: PUSH
56395: LD_VAR 0 2
56399: EQUAL
56400: AND
56401: ST_TO_ADDR
// end ;
56402: LD_VAR 0 3
56406: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56407: LD_INT 0
56409: PPUSH
// SetDir ( unit , d ) ;
56410: LD_VAR 0 1
56414: PPUSH
56415: LD_VAR 0 4
56419: PPUSH
56420: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56424: LD_VAR 0 1
56428: PPUSH
56429: LD_VAR 0 2
56433: PPUSH
56434: LD_VAR 0 3
56438: PPUSH
56439: LD_VAR 0 5
56443: PPUSH
56444: CALL_OW 48
// end ;
56448: LD_VAR 0 6
56452: RET
// export function ToNaturalNumber ( number ) ; begin
56453: LD_INT 0
56455: PPUSH
// result := number div 1 ;
56456: LD_ADDR_VAR 0 2
56460: PUSH
56461: LD_VAR 0 1
56465: PUSH
56466: LD_INT 1
56468: DIV
56469: ST_TO_ADDR
// if number < 0 then
56470: LD_VAR 0 1
56474: PUSH
56475: LD_INT 0
56477: LESS
56478: IFFALSE 56488
// result := 0 ;
56480: LD_ADDR_VAR 0 2
56484: PUSH
56485: LD_INT 0
56487: ST_TO_ADDR
// end ;
56488: LD_VAR 0 2
56492: RET
// export function SortByClass ( units , class ) ; var un ; begin
56493: LD_INT 0
56495: PPUSH
56496: PPUSH
// if not units or not class then
56497: LD_VAR 0 1
56501: NOT
56502: PUSH
56503: LD_VAR 0 2
56507: NOT
56508: OR
56509: IFFALSE 56513
// exit ;
56511: GO 56608
// result := [ ] ;
56513: LD_ADDR_VAR 0 3
56517: PUSH
56518: EMPTY
56519: ST_TO_ADDR
// for un in units do
56520: LD_ADDR_VAR 0 4
56524: PUSH
56525: LD_VAR 0 1
56529: PUSH
56530: FOR_IN
56531: IFFALSE 56606
// if GetClass ( un ) = class then
56533: LD_VAR 0 4
56537: PPUSH
56538: CALL_OW 257
56542: PUSH
56543: LD_VAR 0 2
56547: EQUAL
56548: IFFALSE 56575
// result := Insert ( result , 1 , un ) else
56550: LD_ADDR_VAR 0 3
56554: PUSH
56555: LD_VAR 0 3
56559: PPUSH
56560: LD_INT 1
56562: PPUSH
56563: LD_VAR 0 4
56567: PPUSH
56568: CALL_OW 2
56572: ST_TO_ADDR
56573: GO 56604
// result := Replace ( result , result + 1 , un ) ;
56575: LD_ADDR_VAR 0 3
56579: PUSH
56580: LD_VAR 0 3
56584: PPUSH
56585: LD_VAR 0 3
56589: PUSH
56590: LD_INT 1
56592: PLUS
56593: PPUSH
56594: LD_VAR 0 4
56598: PPUSH
56599: CALL_OW 1
56603: ST_TO_ADDR
56604: GO 56530
56606: POP
56607: POP
// end ;
56608: LD_VAR 0 3
56612: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56613: LD_INT 0
56615: PPUSH
56616: PPUSH
56617: PPUSH
56618: PPUSH
56619: PPUSH
56620: PPUSH
56621: PPUSH
// result := [ ] ;
56622: LD_ADDR_VAR 0 4
56626: PUSH
56627: EMPTY
56628: ST_TO_ADDR
// if x - r < 0 then
56629: LD_VAR 0 1
56633: PUSH
56634: LD_VAR 0 3
56638: MINUS
56639: PUSH
56640: LD_INT 0
56642: LESS
56643: IFFALSE 56655
// min_x := 0 else
56645: LD_ADDR_VAR 0 8
56649: PUSH
56650: LD_INT 0
56652: ST_TO_ADDR
56653: GO 56671
// min_x := x - r ;
56655: LD_ADDR_VAR 0 8
56659: PUSH
56660: LD_VAR 0 1
56664: PUSH
56665: LD_VAR 0 3
56669: MINUS
56670: ST_TO_ADDR
// if y - r < 0 then
56671: LD_VAR 0 2
56675: PUSH
56676: LD_VAR 0 3
56680: MINUS
56681: PUSH
56682: LD_INT 0
56684: LESS
56685: IFFALSE 56697
// min_y := 0 else
56687: LD_ADDR_VAR 0 7
56691: PUSH
56692: LD_INT 0
56694: ST_TO_ADDR
56695: GO 56713
// min_y := y - r ;
56697: LD_ADDR_VAR 0 7
56701: PUSH
56702: LD_VAR 0 2
56706: PUSH
56707: LD_VAR 0 3
56711: MINUS
56712: ST_TO_ADDR
// max_x := x + r ;
56713: LD_ADDR_VAR 0 9
56717: PUSH
56718: LD_VAR 0 1
56722: PUSH
56723: LD_VAR 0 3
56727: PLUS
56728: ST_TO_ADDR
// max_y := y + r ;
56729: LD_ADDR_VAR 0 10
56733: PUSH
56734: LD_VAR 0 2
56738: PUSH
56739: LD_VAR 0 3
56743: PLUS
56744: ST_TO_ADDR
// for _x = min_x to max_x do
56745: LD_ADDR_VAR 0 5
56749: PUSH
56750: DOUBLE
56751: LD_VAR 0 8
56755: DEC
56756: ST_TO_ADDR
56757: LD_VAR 0 9
56761: PUSH
56762: FOR_TO
56763: IFFALSE 56864
// for _y = min_y to max_y do
56765: LD_ADDR_VAR 0 6
56769: PUSH
56770: DOUBLE
56771: LD_VAR 0 7
56775: DEC
56776: ST_TO_ADDR
56777: LD_VAR 0 10
56781: PUSH
56782: FOR_TO
56783: IFFALSE 56860
// begin if not ValidHex ( _x , _y ) then
56785: LD_VAR 0 5
56789: PPUSH
56790: LD_VAR 0 6
56794: PPUSH
56795: CALL_OW 488
56799: NOT
56800: IFFALSE 56804
// continue ;
56802: GO 56782
// if GetResourceTypeXY ( _x , _y ) then
56804: LD_VAR 0 5
56808: PPUSH
56809: LD_VAR 0 6
56813: PPUSH
56814: CALL_OW 283
56818: IFFALSE 56858
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56820: LD_ADDR_VAR 0 4
56824: PUSH
56825: LD_VAR 0 4
56829: PPUSH
56830: LD_VAR 0 4
56834: PUSH
56835: LD_INT 1
56837: PLUS
56838: PPUSH
56839: LD_VAR 0 5
56843: PUSH
56844: LD_VAR 0 6
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PPUSH
56853: CALL_OW 1
56857: ST_TO_ADDR
// end ;
56858: GO 56782
56860: POP
56861: POP
56862: GO 56762
56864: POP
56865: POP
// end ;
56866: LD_VAR 0 4
56870: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56871: LD_INT 0
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
56880: PPUSH
// if not units then
56881: LD_VAR 0 1
56885: NOT
56886: IFFALSE 56890
// exit ;
56888: GO 57418
// result := UnitFilter ( units , [ f_ok ] ) ;
56890: LD_ADDR_VAR 0 3
56894: PUSH
56895: LD_VAR 0 1
56899: PPUSH
56900: LD_INT 50
56902: PUSH
56903: EMPTY
56904: LIST
56905: PPUSH
56906: CALL_OW 72
56910: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56911: LD_ADDR_VAR 0 8
56915: PUSH
56916: LD_VAR 0 1
56920: PUSH
56921: LD_INT 1
56923: ARRAY
56924: PPUSH
56925: CALL_OW 255
56929: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56930: LD_ADDR_VAR 0 10
56934: PUSH
56935: LD_INT 29
56937: PUSH
56938: LD_INT 91
56940: PUSH
56941: LD_INT 49
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// if not result then
56949: LD_VAR 0 3
56953: NOT
56954: IFFALSE 56958
// exit ;
56956: GO 57418
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56958: LD_ADDR_VAR 0 5
56962: PUSH
56963: LD_INT 81
56965: PUSH
56966: LD_VAR 0 8
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PPUSH
56975: CALL_OW 69
56979: ST_TO_ADDR
// for i in result do
56980: LD_ADDR_VAR 0 4
56984: PUSH
56985: LD_VAR 0 3
56989: PUSH
56990: FOR_IN
56991: IFFALSE 57416
// begin tag := GetTag ( i ) + 1 ;
56993: LD_ADDR_VAR 0 9
56997: PUSH
56998: LD_VAR 0 4
57002: PPUSH
57003: CALL_OW 110
57007: PUSH
57008: LD_INT 1
57010: PLUS
57011: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57012: LD_ADDR_VAR 0 7
57016: PUSH
57017: LD_VAR 0 4
57021: PPUSH
57022: CALL_OW 250
57026: PPUSH
57027: LD_VAR 0 4
57031: PPUSH
57032: CALL_OW 251
57036: PPUSH
57037: LD_INT 4
57039: PPUSH
57040: CALL 56613 0 3
57044: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57045: LD_VAR 0 4
57049: PPUSH
57050: CALL_OW 247
57054: PUSH
57055: LD_INT 2
57057: EQUAL
57058: PUSH
57059: LD_VAR 0 7
57063: PUSH
57064: LD_INT 2
57066: GREATER
57067: AND
57068: PUSH
57069: LD_VAR 0 4
57073: PPUSH
57074: CALL_OW 264
57078: PUSH
57079: LD_VAR 0 10
57083: IN
57084: NOT
57085: AND
57086: IFFALSE 57125
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57088: LD_VAR 0 4
57092: PPUSH
57093: LD_VAR 0 7
57097: PUSH
57098: LD_INT 1
57100: ARRAY
57101: PUSH
57102: LD_INT 1
57104: ARRAY
57105: PPUSH
57106: LD_VAR 0 7
57110: PUSH
57111: LD_INT 1
57113: ARRAY
57114: PUSH
57115: LD_INT 2
57117: ARRAY
57118: PPUSH
57119: CALL_OW 116
57123: GO 57414
// if path > tag then
57125: LD_VAR 0 2
57129: PUSH
57130: LD_VAR 0 9
57134: GREATER
57135: IFFALSE 57343
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57137: LD_ADDR_VAR 0 6
57141: PUSH
57142: LD_VAR 0 5
57146: PPUSH
57147: LD_INT 91
57149: PUSH
57150: LD_VAR 0 4
57154: PUSH
57155: LD_INT 8
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: PPUSH
57163: CALL_OW 72
57167: ST_TO_ADDR
// if nearEnemy then
57168: LD_VAR 0 6
57172: IFFALSE 57241
// begin if GetWeapon ( i ) = ru_time_lapser then
57174: LD_VAR 0 4
57178: PPUSH
57179: CALL_OW 264
57183: PUSH
57184: LD_INT 49
57186: EQUAL
57187: IFFALSE 57215
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57189: LD_VAR 0 4
57193: PPUSH
57194: LD_VAR 0 6
57198: PPUSH
57199: LD_VAR 0 4
57203: PPUSH
57204: CALL_OW 74
57208: PPUSH
57209: CALL_OW 112
57213: GO 57239
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57215: LD_VAR 0 4
57219: PPUSH
57220: LD_VAR 0 6
57224: PPUSH
57225: LD_VAR 0 4
57229: PPUSH
57230: CALL_OW 74
57234: PPUSH
57235: CALL 58489 0 2
// end else
57239: GO 57341
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57241: LD_VAR 0 4
57245: PPUSH
57246: LD_VAR 0 2
57250: PUSH
57251: LD_VAR 0 9
57255: ARRAY
57256: PUSH
57257: LD_INT 1
57259: ARRAY
57260: PPUSH
57261: LD_VAR 0 2
57265: PUSH
57266: LD_VAR 0 9
57270: ARRAY
57271: PUSH
57272: LD_INT 2
57274: ARRAY
57275: PPUSH
57276: CALL_OW 297
57280: PUSH
57281: LD_INT 6
57283: GREATER
57284: IFFALSE 57327
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57286: LD_VAR 0 4
57290: PPUSH
57291: LD_VAR 0 2
57295: PUSH
57296: LD_VAR 0 9
57300: ARRAY
57301: PUSH
57302: LD_INT 1
57304: ARRAY
57305: PPUSH
57306: LD_VAR 0 2
57310: PUSH
57311: LD_VAR 0 9
57315: ARRAY
57316: PUSH
57317: LD_INT 2
57319: ARRAY
57320: PPUSH
57321: CALL_OW 114
57325: GO 57341
// SetTag ( i , tag ) ;
57327: LD_VAR 0 4
57331: PPUSH
57332: LD_VAR 0 9
57336: PPUSH
57337: CALL_OW 109
// end else
57341: GO 57414
// if enemy then
57343: LD_VAR 0 5
57347: IFFALSE 57414
// begin if GetWeapon ( i ) = ru_time_lapser then
57349: LD_VAR 0 4
57353: PPUSH
57354: CALL_OW 264
57358: PUSH
57359: LD_INT 49
57361: EQUAL
57362: IFFALSE 57390
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57364: LD_VAR 0 4
57368: PPUSH
57369: LD_VAR 0 5
57373: PPUSH
57374: LD_VAR 0 4
57378: PPUSH
57379: CALL_OW 74
57383: PPUSH
57384: CALL_OW 112
57388: GO 57414
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57390: LD_VAR 0 4
57394: PPUSH
57395: LD_VAR 0 5
57399: PPUSH
57400: LD_VAR 0 4
57404: PPUSH
57405: CALL_OW 74
57409: PPUSH
57410: CALL 58489 0 2
// end ; end ;
57414: GO 56990
57416: POP
57417: POP
// end ;
57418: LD_VAR 0 3
57422: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57423: LD_INT 0
57425: PPUSH
57426: PPUSH
57427: PPUSH
// if not unit or IsInUnit ( unit ) then
57428: LD_VAR 0 1
57432: NOT
57433: PUSH
57434: LD_VAR 0 1
57438: PPUSH
57439: CALL_OW 310
57443: OR
57444: IFFALSE 57448
// exit ;
57446: GO 57539
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57448: LD_ADDR_VAR 0 4
57452: PUSH
57453: LD_VAR 0 1
57457: PPUSH
57458: CALL_OW 250
57462: PPUSH
57463: LD_VAR 0 2
57467: PPUSH
57468: LD_INT 1
57470: PPUSH
57471: CALL_OW 272
57475: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57476: LD_ADDR_VAR 0 5
57480: PUSH
57481: LD_VAR 0 1
57485: PPUSH
57486: CALL_OW 251
57490: PPUSH
57491: LD_VAR 0 2
57495: PPUSH
57496: LD_INT 1
57498: PPUSH
57499: CALL_OW 273
57503: ST_TO_ADDR
// if ValidHex ( x , y ) then
57504: LD_VAR 0 4
57508: PPUSH
57509: LD_VAR 0 5
57513: PPUSH
57514: CALL_OW 488
57518: IFFALSE 57539
// ComTurnXY ( unit , x , y ) ;
57520: LD_VAR 0 1
57524: PPUSH
57525: LD_VAR 0 4
57529: PPUSH
57530: LD_VAR 0 5
57534: PPUSH
57535: CALL_OW 118
// end ;
57539: LD_VAR 0 3
57543: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57544: LD_INT 0
57546: PPUSH
57547: PPUSH
// result := false ;
57548: LD_ADDR_VAR 0 3
57552: PUSH
57553: LD_INT 0
57555: ST_TO_ADDR
// if not units then
57556: LD_VAR 0 2
57560: NOT
57561: IFFALSE 57565
// exit ;
57563: GO 57610
// for i in units do
57565: LD_ADDR_VAR 0 4
57569: PUSH
57570: LD_VAR 0 2
57574: PUSH
57575: FOR_IN
57576: IFFALSE 57608
// if See ( side , i ) then
57578: LD_VAR 0 1
57582: PPUSH
57583: LD_VAR 0 4
57587: PPUSH
57588: CALL_OW 292
57592: IFFALSE 57606
// begin result := true ;
57594: LD_ADDR_VAR 0 3
57598: PUSH
57599: LD_INT 1
57601: ST_TO_ADDR
// exit ;
57602: POP
57603: POP
57604: GO 57610
// end ;
57606: GO 57575
57608: POP
57609: POP
// end ;
57610: LD_VAR 0 3
57614: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57615: LD_INT 0
57617: PPUSH
57618: PPUSH
57619: PPUSH
57620: PPUSH
// if not unit or not points then
57621: LD_VAR 0 1
57625: NOT
57626: PUSH
57627: LD_VAR 0 2
57631: NOT
57632: OR
57633: IFFALSE 57637
// exit ;
57635: GO 57727
// dist := 99999 ;
57637: LD_ADDR_VAR 0 5
57641: PUSH
57642: LD_INT 99999
57644: ST_TO_ADDR
// for i in points do
57645: LD_ADDR_VAR 0 4
57649: PUSH
57650: LD_VAR 0 2
57654: PUSH
57655: FOR_IN
57656: IFFALSE 57725
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57658: LD_ADDR_VAR 0 6
57662: PUSH
57663: LD_VAR 0 1
57667: PPUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: PPUSH
57677: LD_VAR 0 4
57681: PUSH
57682: LD_INT 2
57684: ARRAY
57685: PPUSH
57686: CALL_OW 297
57690: ST_TO_ADDR
// if tmpDist < dist then
57691: LD_VAR 0 6
57695: PUSH
57696: LD_VAR 0 5
57700: LESS
57701: IFFALSE 57723
// begin result := i ;
57703: LD_ADDR_VAR 0 3
57707: PUSH
57708: LD_VAR 0 4
57712: ST_TO_ADDR
// dist := tmpDist ;
57713: LD_ADDR_VAR 0 5
57717: PUSH
57718: LD_VAR 0 6
57722: ST_TO_ADDR
// end ; end ;
57723: GO 57655
57725: POP
57726: POP
// end ;
57727: LD_VAR 0 3
57731: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57732: LD_INT 0
57734: PPUSH
// uc_side := side ;
57735: LD_ADDR_OWVAR 20
57739: PUSH
57740: LD_VAR 0 1
57744: ST_TO_ADDR
// uc_nation := 3 ;
57745: LD_ADDR_OWVAR 21
57749: PUSH
57750: LD_INT 3
57752: ST_TO_ADDR
// vc_chassis := 25 ;
57753: LD_ADDR_OWVAR 37
57757: PUSH
57758: LD_INT 25
57760: ST_TO_ADDR
// vc_engine := engine_siberite ;
57761: LD_ADDR_OWVAR 39
57765: PUSH
57766: LD_INT 3
57768: ST_TO_ADDR
// vc_control := control_computer ;
57769: LD_ADDR_OWVAR 38
57773: PUSH
57774: LD_INT 3
57776: ST_TO_ADDR
// vc_weapon := 59 ;
57777: LD_ADDR_OWVAR 40
57781: PUSH
57782: LD_INT 59
57784: ST_TO_ADDR
// result := CreateVehicle ;
57785: LD_ADDR_VAR 0 5
57789: PUSH
57790: CALL_OW 45
57794: ST_TO_ADDR
// SetDir ( result , d ) ;
57795: LD_VAR 0 5
57799: PPUSH
57800: LD_VAR 0 4
57804: PPUSH
57805: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57809: LD_VAR 0 5
57813: PPUSH
57814: LD_VAR 0 2
57818: PPUSH
57819: LD_VAR 0 3
57823: PPUSH
57824: LD_INT 0
57826: PPUSH
57827: CALL_OW 48
// end ;
57831: LD_VAR 0 5
57835: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57836: LD_INT 0
57838: PPUSH
57839: PPUSH
57840: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57841: LD_ADDR_VAR 0 2
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57864: LD_VAR 0 1
57868: NOT
57869: PUSH
57870: LD_VAR 0 1
57874: PPUSH
57875: CALL_OW 264
57879: PUSH
57880: LD_INT 12
57882: PUSH
57883: LD_INT 51
57885: PUSH
57886: LD_INT 32
57888: PUSH
57889: LD_INT 89
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: IN
57898: NOT
57899: OR
57900: IFFALSE 57904
// exit ;
57902: GO 58002
// for i := 1 to 3 do
57904: LD_ADDR_VAR 0 3
57908: PUSH
57909: DOUBLE
57910: LD_INT 1
57912: DEC
57913: ST_TO_ADDR
57914: LD_INT 3
57916: PUSH
57917: FOR_TO
57918: IFFALSE 58000
// begin tmp := GetCargo ( cargo , i ) ;
57920: LD_ADDR_VAR 0 4
57924: PUSH
57925: LD_VAR 0 1
57929: PPUSH
57930: LD_VAR 0 3
57934: PPUSH
57935: CALL_OW 289
57939: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57940: LD_ADDR_VAR 0 2
57944: PUSH
57945: LD_VAR 0 2
57949: PPUSH
57950: LD_VAR 0 3
57954: PPUSH
57955: LD_VAR 0 4
57959: PPUSH
57960: CALL_OW 1
57964: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57965: LD_ADDR_VAR 0 2
57969: PUSH
57970: LD_VAR 0 2
57974: PPUSH
57975: LD_INT 4
57977: PPUSH
57978: LD_VAR 0 2
57982: PUSH
57983: LD_INT 4
57985: ARRAY
57986: PUSH
57987: LD_VAR 0 4
57991: PLUS
57992: PPUSH
57993: CALL_OW 1
57997: ST_TO_ADDR
// end ;
57998: GO 57917
58000: POP
58001: POP
// end ;
58002: LD_VAR 0 2
58006: RET
// export function Length ( array ) ; begin
58007: LD_INT 0
58009: PPUSH
// result := array + 0 ;
58010: LD_ADDR_VAR 0 2
58014: PUSH
58015: LD_VAR 0 1
58019: PUSH
58020: LD_INT 0
58022: PLUS
58023: ST_TO_ADDR
// end ;
58024: LD_VAR 0 2
58028: RET
// export function PrepareArray ( array ) ; begin
58029: LD_INT 0
58031: PPUSH
// result := array diff 0 ;
58032: LD_ADDR_VAR 0 2
58036: PUSH
58037: LD_VAR 0 1
58041: PUSH
58042: LD_INT 0
58044: DIFF
58045: ST_TO_ADDR
// if not result [ 1 ] then
58046: LD_VAR 0 2
58050: PUSH
58051: LD_INT 1
58053: ARRAY
58054: NOT
58055: IFFALSE 58075
// result := Delete ( result , 1 ) ;
58057: LD_ADDR_VAR 0 2
58061: PUSH
58062: LD_VAR 0 2
58066: PPUSH
58067: LD_INT 1
58069: PPUSH
58070: CALL_OW 3
58074: ST_TO_ADDR
// end ;
58075: LD_VAR 0 2
58079: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58080: LD_INT 0
58082: PPUSH
58083: PPUSH
58084: PPUSH
58085: PPUSH
// sibRocketRange := 25 ;
58086: LD_ADDR_VAR 0 6
58090: PUSH
58091: LD_INT 25
58093: ST_TO_ADDR
// result := false ;
58094: LD_ADDR_VAR 0 4
58098: PUSH
58099: LD_INT 0
58101: ST_TO_ADDR
// for i := 0 to 5 do
58102: LD_ADDR_VAR 0 5
58106: PUSH
58107: DOUBLE
58108: LD_INT 0
58110: DEC
58111: ST_TO_ADDR
58112: LD_INT 5
58114: PUSH
58115: FOR_TO
58116: IFFALSE 58183
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58118: LD_VAR 0 1
58122: PPUSH
58123: LD_VAR 0 5
58127: PPUSH
58128: LD_VAR 0 6
58132: PPUSH
58133: CALL_OW 272
58137: PPUSH
58138: LD_VAR 0 2
58142: PPUSH
58143: LD_VAR 0 5
58147: PPUSH
58148: LD_VAR 0 6
58152: PPUSH
58153: CALL_OW 273
58157: PPUSH
58158: LD_VAR 0 3
58162: PPUSH
58163: CALL_OW 309
58167: IFFALSE 58181
// begin result := true ;
58169: LD_ADDR_VAR 0 4
58173: PUSH
58174: LD_INT 1
58176: ST_TO_ADDR
// exit ;
58177: POP
58178: POP
58179: GO 58185
// end ;
58181: GO 58115
58183: POP
58184: POP
// end ;
58185: LD_VAR 0 4
58189: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58190: LD_INT 0
58192: PPUSH
58193: PPUSH
58194: PPUSH
// if btype = b_depot then
58195: LD_VAR 0 2
58199: PUSH
58200: LD_INT 0
58202: EQUAL
58203: IFFALSE 58215
// begin result := true ;
58205: LD_ADDR_VAR 0 3
58209: PUSH
58210: LD_INT 1
58212: ST_TO_ADDR
// exit ;
58213: GO 58331
// end ; pom := GetBase ( depot ) ;
58215: LD_ADDR_VAR 0 4
58219: PUSH
58220: LD_VAR 0 1
58224: PPUSH
58225: CALL_OW 274
58229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58230: LD_ADDR_VAR 0 5
58234: PUSH
58235: LD_VAR 0 2
58239: PPUSH
58240: LD_VAR 0 1
58244: PPUSH
58245: CALL_OW 248
58249: PPUSH
58250: CALL_OW 450
58254: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58255: LD_ADDR_VAR 0 3
58259: PUSH
58260: LD_VAR 0 4
58264: PPUSH
58265: LD_INT 1
58267: PPUSH
58268: CALL_OW 275
58272: PUSH
58273: LD_VAR 0 5
58277: PUSH
58278: LD_INT 1
58280: ARRAY
58281: GREATEREQUAL
58282: PUSH
58283: LD_VAR 0 4
58287: PPUSH
58288: LD_INT 2
58290: PPUSH
58291: CALL_OW 275
58295: PUSH
58296: LD_VAR 0 5
58300: PUSH
58301: LD_INT 2
58303: ARRAY
58304: GREATEREQUAL
58305: AND
58306: PUSH
58307: LD_VAR 0 4
58311: PPUSH
58312: LD_INT 3
58314: PPUSH
58315: CALL_OW 275
58319: PUSH
58320: LD_VAR 0 5
58324: PUSH
58325: LD_INT 3
58327: ARRAY
58328: GREATEREQUAL
58329: AND
58330: ST_TO_ADDR
// end ;
58331: LD_VAR 0 3
58335: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58336: LD_INT 0
58338: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58339: LD_VAR 0 1
58343: PPUSH
58344: LD_VAR 0 2
58348: PPUSH
58349: LD_INT 0
58351: PPUSH
58352: LD_INT 0
58354: PPUSH
58355: LD_INT 1
58357: PPUSH
58358: LD_INT 0
58360: PPUSH
58361: CALL_OW 587
// end ;
58365: LD_VAR 0 3
58369: RET
// export function CenterOnNow ( unit ) ; begin
58370: LD_INT 0
58372: PPUSH
// result := IsInUnit ( unit ) ;
58373: LD_ADDR_VAR 0 2
58377: PUSH
58378: LD_VAR 0 1
58382: PPUSH
58383: CALL_OW 310
58387: ST_TO_ADDR
// if not result then
58388: LD_VAR 0 2
58392: NOT
58393: IFFALSE 58405
// result := unit ;
58395: LD_ADDR_VAR 0 2
58399: PUSH
58400: LD_VAR 0 1
58404: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58405: LD_VAR 0 1
58409: PPUSH
58410: CALL_OW 87
// end ;
58414: LD_VAR 0 2
58418: RET
// export function ComMoveHex ( unit , hex ) ; begin
58419: LD_INT 0
58421: PPUSH
// if not hex then
58422: LD_VAR 0 2
58426: NOT
58427: IFFALSE 58431
// exit ;
58429: GO 58484
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58431: LD_VAR 0 2
58435: PUSH
58436: LD_INT 1
58438: ARRAY
58439: PPUSH
58440: LD_VAR 0 2
58444: PUSH
58445: LD_INT 2
58447: ARRAY
58448: PPUSH
58449: CALL_OW 428
58453: IFFALSE 58457
// exit ;
58455: GO 58484
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58457: LD_VAR 0 1
58461: PPUSH
58462: LD_VAR 0 2
58466: PUSH
58467: LD_INT 1
58469: ARRAY
58470: PPUSH
58471: LD_VAR 0 2
58475: PUSH
58476: LD_INT 2
58478: ARRAY
58479: PPUSH
58480: CALL_OW 111
// end ;
58484: LD_VAR 0 3
58488: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58489: LD_INT 0
58491: PPUSH
58492: PPUSH
58493: PPUSH
// if not unit or not enemy then
58494: LD_VAR 0 1
58498: NOT
58499: PUSH
58500: LD_VAR 0 2
58504: NOT
58505: OR
58506: IFFALSE 58510
// exit ;
58508: GO 58634
// x := GetX ( enemy ) ;
58510: LD_ADDR_VAR 0 4
58514: PUSH
58515: LD_VAR 0 2
58519: PPUSH
58520: CALL_OW 250
58524: ST_TO_ADDR
// y := GetY ( enemy ) ;
58525: LD_ADDR_VAR 0 5
58529: PUSH
58530: LD_VAR 0 2
58534: PPUSH
58535: CALL_OW 251
58539: ST_TO_ADDR
// if ValidHex ( x , y ) then
58540: LD_VAR 0 4
58544: PPUSH
58545: LD_VAR 0 5
58549: PPUSH
58550: CALL_OW 488
58554: IFFALSE 58634
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58556: LD_VAR 0 2
58560: PPUSH
58561: CALL_OW 247
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: IN
58576: PUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: CALL_OW 255
58586: PPUSH
58587: LD_VAR 0 2
58591: PPUSH
58592: CALL_OW 292
58596: OR
58597: IFFALSE 58615
// ComAttackUnit ( unit , enemy ) else
58599: LD_VAR 0 1
58603: PPUSH
58604: LD_VAR 0 2
58608: PPUSH
58609: CALL_OW 115
58613: GO 58634
// ComAgressiveMove ( unit , x , y ) ;
58615: LD_VAR 0 1
58619: PPUSH
58620: LD_VAR 0 4
58624: PPUSH
58625: LD_VAR 0 5
58629: PPUSH
58630: CALL_OW 114
// end ;
58634: LD_VAR 0 3
58638: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58639: LD_INT 0
58641: PPUSH
58642: PPUSH
58643: PPUSH
// list := AreaToList ( area , 0 ) ;
58644: LD_ADDR_VAR 0 5
58648: PUSH
58649: LD_VAR 0 1
58653: PPUSH
58654: LD_INT 0
58656: PPUSH
58657: CALL_OW 517
58661: ST_TO_ADDR
// if not list then
58662: LD_VAR 0 5
58666: NOT
58667: IFFALSE 58671
// exit ;
58669: GO 58801
// if all then
58671: LD_VAR 0 2
58675: IFFALSE 58763
// begin for i := 1 to list [ 1 ] do
58677: LD_ADDR_VAR 0 4
58681: PUSH
58682: DOUBLE
58683: LD_INT 1
58685: DEC
58686: ST_TO_ADDR
58687: LD_VAR 0 5
58691: PUSH
58692: LD_INT 1
58694: ARRAY
58695: PUSH
58696: FOR_TO
58697: IFFALSE 58759
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58699: LD_ADDR_VAR 0 3
58703: PUSH
58704: LD_VAR 0 3
58708: PPUSH
58709: LD_VAR 0 3
58713: PUSH
58714: LD_INT 1
58716: PLUS
58717: PPUSH
58718: LD_VAR 0 5
58722: PUSH
58723: LD_INT 1
58725: ARRAY
58726: PUSH
58727: LD_VAR 0 4
58731: ARRAY
58732: PUSH
58733: LD_VAR 0 5
58737: PUSH
58738: LD_INT 2
58740: ARRAY
58741: PUSH
58742: LD_VAR 0 4
58746: ARRAY
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PPUSH
58752: CALL_OW 1
58756: ST_TO_ADDR
58757: GO 58696
58759: POP
58760: POP
// exit ;
58761: GO 58801
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58763: LD_ADDR_VAR 0 3
58767: PUSH
58768: LD_VAR 0 5
58772: PUSH
58773: LD_INT 1
58775: ARRAY
58776: PUSH
58777: LD_INT 1
58779: ARRAY
58780: PUSH
58781: LD_VAR 0 5
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: PUSH
58790: LD_INT 1
58792: ARRAY
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: ST_TO_ADDR
// end ;
58801: LD_VAR 0 3
58805: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
// list := AreaToList ( area , 0 ) ;
58810: LD_ADDR_VAR 0 4
58814: PUSH
58815: LD_VAR 0 1
58819: PPUSH
58820: LD_INT 0
58822: PPUSH
58823: CALL_OW 517
58827: ST_TO_ADDR
// if not list then
58828: LD_VAR 0 4
58832: NOT
58833: IFFALSE 58837
// exit ;
58835: GO 58878
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58837: LD_ADDR_VAR 0 3
58841: PUSH
58842: LD_VAR 0 4
58846: PUSH
58847: LD_INT 1
58849: ARRAY
58850: PUSH
58851: LD_INT 1
58853: ARRAY
58854: PUSH
58855: LD_VAR 0 4
58859: PUSH
58860: LD_INT 2
58862: ARRAY
58863: PUSH
58864: LD_INT 1
58866: ARRAY
58867: PUSH
58868: LD_VAR 0 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// end ;
58878: LD_VAR 0 3
58882: RET
// export function First ( array ) ; begin
58883: LD_INT 0
58885: PPUSH
// if not array then
58886: LD_VAR 0 1
58890: NOT
58891: IFFALSE 58895
// exit ;
58893: GO 58909
// result := array [ 1 ] ;
58895: LD_ADDR_VAR 0 2
58899: PUSH
58900: LD_VAR 0 1
58904: PUSH
58905: LD_INT 1
58907: ARRAY
58908: ST_TO_ADDR
// end ;
58909: LD_VAR 0 2
58913: RET
// export function Last ( array ) ; begin
58914: LD_INT 0
58916: PPUSH
// if not array then
58917: LD_VAR 0 1
58921: NOT
58922: IFFALSE 58926
// exit ;
58924: GO 58942
// result := array [ array ] ;
58926: LD_ADDR_VAR 0 2
58930: PUSH
58931: LD_VAR 0 1
58935: PUSH
58936: LD_VAR 0 1
58940: ARRAY
58941: ST_TO_ADDR
// end ;
58942: LD_VAR 0 2
58946: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58947: LD_INT 0
58949: PPUSH
58950: PPUSH
// result := [ ] ;
58951: LD_ADDR_VAR 0 5
58955: PUSH
58956: EMPTY
58957: ST_TO_ADDR
// if not array then
58958: LD_VAR 0 1
58962: NOT
58963: IFFALSE 58967
// exit ;
58965: GO 59079
// for i := 1 to array do
58967: LD_ADDR_VAR 0 6
58971: PUSH
58972: DOUBLE
58973: LD_INT 1
58975: DEC
58976: ST_TO_ADDR
58977: LD_VAR 0 1
58981: PUSH
58982: FOR_TO
58983: IFFALSE 59077
// if array [ i ] [ index ] = value then
58985: LD_VAR 0 1
58989: PUSH
58990: LD_VAR 0 6
58994: ARRAY
58995: PUSH
58996: LD_VAR 0 2
59000: ARRAY
59001: PUSH
59002: LD_VAR 0 3
59006: EQUAL
59007: IFFALSE 59075
// begin if indexColumn then
59009: LD_VAR 0 4
59013: IFFALSE 59049
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59015: LD_ADDR_VAR 0 5
59019: PUSH
59020: LD_VAR 0 5
59024: PPUSH
59025: LD_VAR 0 1
59029: PUSH
59030: LD_VAR 0 6
59034: ARRAY
59035: PUSH
59036: LD_VAR 0 4
59040: ARRAY
59041: PPUSH
59042: CALL 54267 0 2
59046: ST_TO_ADDR
59047: GO 59075
// result := Join ( result , array [ i ] ) ;
59049: LD_ADDR_VAR 0 5
59053: PUSH
59054: LD_VAR 0 5
59058: PPUSH
59059: LD_VAR 0 1
59063: PUSH
59064: LD_VAR 0 6
59068: ARRAY
59069: PPUSH
59070: CALL 54267 0 2
59074: ST_TO_ADDR
// end ;
59075: GO 58982
59077: POP
59078: POP
// end ;
59079: LD_VAR 0 5
59083: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59084: LD_INT 0
59086: PPUSH
// if not vehicles or not parkingPoint then
59087: LD_VAR 0 1
59091: NOT
59092: PUSH
59093: LD_VAR 0 2
59097: NOT
59098: OR
59099: IFFALSE 59103
// exit ;
59101: GO 59201
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59103: LD_ADDR_VAR 0 1
59107: PUSH
59108: LD_VAR 0 1
59112: PPUSH
59113: LD_INT 50
59115: PUSH
59116: EMPTY
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: LD_INT 92
59124: PUSH
59125: LD_VAR 0 2
59129: PUSH
59130: LD_INT 1
59132: ARRAY
59133: PUSH
59134: LD_VAR 0 2
59138: PUSH
59139: LD_INT 2
59141: ARRAY
59142: PUSH
59143: LD_INT 8
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PPUSH
59160: CALL_OW 72
59164: ST_TO_ADDR
// if not vehicles then
59165: LD_VAR 0 1
59169: NOT
59170: IFFALSE 59174
// exit ;
59172: GO 59201
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59174: LD_VAR 0 1
59178: PPUSH
59179: LD_VAR 0 2
59183: PUSH
59184: LD_INT 1
59186: ARRAY
59187: PPUSH
59188: LD_VAR 0 2
59192: PUSH
59193: LD_INT 2
59195: ARRAY
59196: PPUSH
59197: CALL_OW 111
// end ;
59201: LD_VAR 0 3
59205: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59206: LD_INT 0
59208: PPUSH
59209: PPUSH
59210: PPUSH
// if not side or not area then
59211: LD_VAR 0 1
59215: NOT
59216: PUSH
59217: LD_VAR 0 2
59221: NOT
59222: OR
59223: IFFALSE 59227
// exit ;
59225: GO 59346
// tmp := AreaToList ( area , 0 ) ;
59227: LD_ADDR_VAR 0 5
59231: PUSH
59232: LD_VAR 0 2
59236: PPUSH
59237: LD_INT 0
59239: PPUSH
59240: CALL_OW 517
59244: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59245: LD_ADDR_VAR 0 4
59249: PUSH
59250: DOUBLE
59251: LD_INT 1
59253: DEC
59254: ST_TO_ADDR
59255: LD_VAR 0 5
59259: PUSH
59260: LD_INT 1
59262: ARRAY
59263: PUSH
59264: FOR_TO
59265: IFFALSE 59344
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59267: LD_VAR 0 5
59271: PUSH
59272: LD_INT 1
59274: ARRAY
59275: PUSH
59276: LD_VAR 0 4
59280: ARRAY
59281: PPUSH
59282: LD_VAR 0 5
59286: PUSH
59287: LD_INT 2
59289: ARRAY
59290: PUSH
59291: LD_VAR 0 4
59295: ARRAY
59296: PPUSH
59297: CALL_OW 351
59301: IFFALSE 59342
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59303: LD_VAR 0 5
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_VAR 0 4
59316: ARRAY
59317: PPUSH
59318: LD_VAR 0 5
59322: PUSH
59323: LD_INT 2
59325: ARRAY
59326: PUSH
59327: LD_VAR 0 4
59331: ARRAY
59332: PPUSH
59333: LD_VAR 0 1
59337: PPUSH
59338: CALL_OW 244
// end ;
59342: GO 59264
59344: POP
59345: POP
// end ; end_of_file
59346: LD_VAR 0 3
59350: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 200
59358: DOUBLE
59359: GREATEREQUAL
59360: IFFALSE 59368
59362: LD_INT 299
59364: DOUBLE
59365: LESSEQUAL
59366: IFTRUE 59370
59368: GO 59402
59370: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59371: LD_VAR 0 1
59375: PPUSH
59376: LD_VAR 0 2
59380: PPUSH
59381: LD_VAR 0 3
59385: PPUSH
59386: LD_VAR 0 4
59390: PPUSH
59391: LD_VAR 0 5
59395: PPUSH
59396: CALL 60099 0 5
59400: GO 59479
59402: LD_INT 300
59404: DOUBLE
59405: GREATEREQUAL
59406: IFFALSE 59414
59408: LD_INT 399
59410: DOUBLE
59411: LESSEQUAL
59412: IFTRUE 59416
59414: GO 59478
59416: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59417: LD_VAR 0 1
59421: PPUSH
59422: LD_VAR 0 2
59426: PPUSH
59427: LD_VAR 0 3
59431: PPUSH
59432: LD_VAR 0 4
59436: PPUSH
59437: LD_VAR 0 5
59441: PPUSH
59442: LD_VAR 0 6
59446: PPUSH
59447: LD_VAR 0 7
59451: PPUSH
59452: LD_VAR 0 8
59456: PPUSH
59457: LD_VAR 0 9
59461: PPUSH
59462: LD_VAR 0 10
59466: PPUSH
59467: LD_VAR 0 11
59471: PPUSH
59472: CALL 77318 0 11
59476: GO 59479
59478: POP
// end ;
59479: PPOPN 11
59481: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59482: LD_VAR 0 1
59486: PPUSH
59487: LD_VAR 0 2
59491: PPUSH
59492: LD_VAR 0 3
59496: PPUSH
59497: LD_VAR 0 4
59501: PPUSH
59502: LD_VAR 0 5
59506: PPUSH
59507: CALL 59564 0 5
// end ; end_of_file
59511: PPOPN 5
59513: END
// export function SOS_UnitDestroyed ( un ) ; begin
59514: LD_INT 0
59516: PPUSH
// ComRadiation ( un ) ;
59517: LD_VAR 0 1
59521: PPUSH
59522: CALL 60503 0 1
// end ;
59526: LD_VAR 0 2
59530: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59531: LD_INT 0
59533: PPUSH
// ComRadiation ( un ) ;
59534: LD_VAR 0 1
59538: PPUSH
59539: CALL 60503 0 1
// end ;
59543: LD_VAR 0 2
59547: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59548: LD_INT 0
59550: PPUSH
// end ;
59551: LD_VAR 0 4
59555: RET
// export function SOS_Command ( cmd ) ; begin
59556: LD_INT 0
59558: PPUSH
// end ;
59559: LD_VAR 0 2
59563: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59564: LD_INT 0
59566: PPUSH
// end ;
59567: LD_VAR 0 6
59571: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
59576: PPUSH
59577: PPUSH
59578: PPUSH
// if not vehicle or not factory then
59579: LD_VAR 0 1
59583: NOT
59584: PUSH
59585: LD_VAR 0 2
59589: NOT
59590: OR
59591: IFFALSE 59595
// exit ;
59593: GO 60094
// if not factoryWaypoints then
59595: LD_EXP 105
59599: NOT
59600: IFFALSE 59604
// exit ;
59602: GO 60094
// for i := 1 to Count ( factoryWaypoints ) do
59604: LD_ADDR_VAR 0 4
59608: PUSH
59609: DOUBLE
59610: LD_INT 1
59612: DEC
59613: ST_TO_ADDR
59614: LD_EXP 105
59618: PPUSH
59619: CALL 18658 0 1
59623: PUSH
59624: FOR_TO
59625: IFFALSE 60092
// if factoryWaypoints [ i ] [ 2 ] = factory then
59627: LD_EXP 105
59631: PUSH
59632: LD_VAR 0 4
59636: ARRAY
59637: PUSH
59638: LD_INT 2
59640: ARRAY
59641: PUSH
59642: LD_VAR 0 2
59646: EQUAL
59647: IFFALSE 60090
// begin if GetControl ( vehicle ) = control_manual then
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL_OW 263
59658: PUSH
59659: LD_INT 1
59661: EQUAL
59662: IFFALSE 59973
// begin driver := IsDrivenBy ( vehicle ) ;
59664: LD_ADDR_VAR 0 6
59668: PUSH
59669: LD_VAR 0 1
59673: PPUSH
59674: CALL_OW 311
59678: ST_TO_ADDR
// tag := GetTag ( driver ) ;
59679: LD_ADDR_VAR 0 5
59683: PUSH
59684: LD_VAR 0 6
59688: PPUSH
59689: CALL_OW 110
59693: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
59694: LD_VAR 0 5
59698: PUSH
59699: LD_INT 501
59701: EQUAL
59702: PUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: CALL_OW 110
59712: PUSH
59713: LD_INT 501
59715: EQUAL
59716: OR
59717: IFFALSE 59723
// exit ;
59719: POP
59720: POP
59721: GO 60094
// if not HasTask ( driver ) then
59723: LD_VAR 0 6
59727: PPUSH
59728: CALL_OW 314
59732: NOT
59733: IFFALSE 59971
// begin SetTag ( driver , tDriver ) ;
59735: LD_VAR 0 6
59739: PPUSH
59740: LD_INT 501
59742: PPUSH
59743: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
59747: LD_VAR 0 1
59751: PPUSH
59752: LD_INT 501
59754: PPUSH
59755: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59759: LD_ADDR_VAR 0 7
59763: PUSH
59764: LD_EXP 105
59768: PUSH
59769: LD_VAR 0 4
59773: ARRAY
59774: PUSH
59775: LD_INT 3
59777: ARRAY
59778: PPUSH
59779: LD_EXP 105
59783: PUSH
59784: LD_VAR 0 4
59788: ARRAY
59789: PUSH
59790: LD_INT 4
59792: ARRAY
59793: PPUSH
59794: CALL_OW 428
59798: ST_TO_ADDR
// if hex then
59799: LD_VAR 0 7
59803: IFFALSE 59821
// ComMoveUnit ( driver , hex ) else
59805: LD_VAR 0 6
59809: PPUSH
59810: LD_VAR 0 7
59814: PPUSH
59815: CALL_OW 112
59819: GO 59860
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59821: LD_VAR 0 6
59825: PPUSH
59826: LD_EXP 105
59830: PUSH
59831: LD_VAR 0 4
59835: ARRAY
59836: PUSH
59837: LD_INT 3
59839: ARRAY
59840: PPUSH
59841: LD_EXP 105
59845: PUSH
59846: LD_VAR 0 4
59850: ARRAY
59851: PUSH
59852: LD_INT 4
59854: ARRAY
59855: PPUSH
59856: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59860: LD_VAR 0 6
59864: PPUSH
59865: CALL_OW 181
// if Multiplayer then
59869: LD_OWVAR 4
59873: IFFALSE 59922
// begin repeat wait ( 10 ) ;
59875: LD_INT 10
59877: PPUSH
59878: CALL_OW 67
// until not IsInUnit ( driver ) ;
59882: LD_VAR 0 6
59886: PPUSH
59887: CALL_OW 310
59891: NOT
59892: IFFALSE 59875
// if not HasTask ( driver ) then
59894: LD_VAR 0 6
59898: PPUSH
59899: CALL_OW 314
59903: NOT
59904: IFFALSE 59920
// ComEnterUnit ( driver , factory ) ;
59906: LD_VAR 0 6
59910: PPUSH
59911: LD_VAR 0 2
59915: PPUSH
59916: CALL_OW 120
// end else
59920: GO 59936
// AddComEnterUnit ( driver , factory ) ;
59922: LD_VAR 0 6
59926: PPUSH
59927: LD_VAR 0 2
59931: PPUSH
59932: CALL_OW 180
// wait ( 0 0$1 ) ;
59936: LD_INT 35
59938: PPUSH
59939: CALL_OW 67
// SetTag ( driver , tag ) ;
59943: LD_VAR 0 6
59947: PPUSH
59948: LD_VAR 0 5
59952: PPUSH
59953: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
59957: LD_VAR 0 1
59961: PPUSH
59962: LD_INT 0
59964: PPUSH
59965: CALL_OW 109
// break ;
59969: GO 60092
// end ; end else
59971: GO 60090
// if GetControl ( vehicle ) = control_remote then
59973: LD_VAR 0 1
59977: PPUSH
59978: CALL_OW 263
59982: PUSH
59983: LD_INT 2
59985: EQUAL
59986: IFFALSE 60049
// begin wait ( 0 0$2 ) ;
59988: LD_INT 70
59990: PPUSH
59991: CALL_OW 67
// if Connect ( vehicle ) then
59995: LD_VAR 0 1
59999: PPUSH
60000: CALL 24864 0 1
60004: IFFALSE 60045
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60006: LD_VAR 0 1
60010: PPUSH
60011: LD_EXP 105
60015: PUSH
60016: LD_VAR 0 4
60020: ARRAY
60021: PUSH
60022: LD_INT 3
60024: ARRAY
60025: PPUSH
60026: LD_EXP 105
60030: PUSH
60031: LD_VAR 0 4
60035: ARRAY
60036: PUSH
60037: LD_INT 4
60039: ARRAY
60040: PPUSH
60041: CALL_OW 171
// break ;
60045: GO 60092
// end else
60047: GO 60090
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60049: LD_VAR 0 1
60053: PPUSH
60054: LD_EXP 105
60058: PUSH
60059: LD_VAR 0 4
60063: ARRAY
60064: PUSH
60065: LD_INT 3
60067: ARRAY
60068: PPUSH
60069: LD_EXP 105
60073: PUSH
60074: LD_VAR 0 4
60078: ARRAY
60079: PUSH
60080: LD_INT 4
60082: ARRAY
60083: PPUSH
60084: CALL_OW 171
// break ;
60088: GO 60092
// end ; end ;
60090: GO 59624
60092: POP
60093: POP
// end ;
60094: LD_VAR 0 3
60098: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60099: LD_INT 0
60101: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60102: LD_VAR 0 1
60106: PUSH
60107: LD_INT 250
60109: EQUAL
60110: PUSH
60111: LD_VAR 0 2
60115: PPUSH
60116: CALL_OW 264
60120: PUSH
60121: LD_INT 81
60123: EQUAL
60124: AND
60125: IFFALSE 60146
// MinerPlaceMine ( unit , x , y ) ;
60127: LD_VAR 0 2
60131: PPUSH
60132: LD_VAR 0 4
60136: PPUSH
60137: LD_VAR 0 5
60141: PPUSH
60142: CALL 63238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60146: LD_VAR 0 1
60150: PUSH
60151: LD_INT 251
60153: EQUAL
60154: PUSH
60155: LD_VAR 0 2
60159: PPUSH
60160: CALL_OW 264
60164: PUSH
60165: LD_INT 81
60167: EQUAL
60168: AND
60169: IFFALSE 60190
// MinerDetonateMine ( unit , x , y ) ;
60171: LD_VAR 0 2
60175: PPUSH
60176: LD_VAR 0 4
60180: PPUSH
60181: LD_VAR 0 5
60185: PPUSH
60186: CALL 63513 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60190: LD_VAR 0 1
60194: PUSH
60195: LD_INT 252
60197: EQUAL
60198: PUSH
60199: LD_VAR 0 2
60203: PPUSH
60204: CALL_OW 264
60208: PUSH
60209: LD_INT 81
60211: EQUAL
60212: AND
60213: IFFALSE 60234
// MinerCreateMinefield ( unit , x , y ) ;
60215: LD_VAR 0 2
60219: PPUSH
60220: LD_VAR 0 4
60224: PPUSH
60225: LD_VAR 0 5
60229: PPUSH
60230: CALL 63930 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60234: LD_VAR 0 1
60238: PUSH
60239: LD_INT 253
60241: EQUAL
60242: PUSH
60243: LD_VAR 0 2
60247: PPUSH
60248: CALL_OW 257
60252: PUSH
60253: LD_INT 5
60255: EQUAL
60256: AND
60257: IFFALSE 60278
// ComBinocular ( unit , x , y ) ;
60259: LD_VAR 0 2
60263: PPUSH
60264: LD_VAR 0 4
60268: PPUSH
60269: LD_VAR 0 5
60273: PPUSH
60274: CALL 64299 0 3
// if selectedUnit then
60278: LD_VAR 0 3
60282: IFFALSE 60338
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60284: LD_VAR 0 1
60288: PUSH
60289: LD_INT 254
60291: EQUAL
60292: PUSH
60293: LD_VAR 0 2
60297: PPUSH
60298: CALL_OW 264
60302: PUSH
60303: LD_INT 99
60305: EQUAL
60306: AND
60307: PUSH
60308: LD_VAR 0 3
60312: PPUSH
60313: CALL_OW 263
60317: PUSH
60318: LD_INT 3
60320: EQUAL
60321: AND
60322: IFFALSE 60338
// HackDestroyVehicle ( unit , selectedUnit ) ;
60324: LD_VAR 0 2
60328: PPUSH
60329: LD_VAR 0 3
60333: PPUSH
60334: CALL 62602 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60338: LD_VAR 0 1
60342: PUSH
60343: LD_INT 255
60345: EQUAL
60346: PUSH
60347: LD_VAR 0 2
60351: PPUSH
60352: CALL_OW 264
60356: PUSH
60357: LD_INT 14
60359: PUSH
60360: LD_INT 53
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: IN
60367: AND
60368: PUSH
60369: LD_VAR 0 4
60373: PPUSH
60374: LD_VAR 0 5
60378: PPUSH
60379: CALL_OW 488
60383: AND
60384: IFFALSE 60408
// CutTreeXYR ( unit , x , y , 12 ) ;
60386: LD_VAR 0 2
60390: PPUSH
60391: LD_VAR 0 4
60395: PPUSH
60396: LD_VAR 0 5
60400: PPUSH
60401: LD_INT 12
60403: PPUSH
60404: CALL 60599 0 4
// if cmd = 256 then
60408: LD_VAR 0 1
60412: PUSH
60413: LD_INT 256
60415: EQUAL
60416: IFFALSE 60437
// SetFactoryWaypoint ( unit , x , y ) ;
60418: LD_VAR 0 2
60422: PPUSH
60423: LD_VAR 0 4
60427: PPUSH
60428: LD_VAR 0 5
60432: PPUSH
60433: CALL 79306 0 3
// if cmd = 257 then
60437: LD_VAR 0 1
60441: PUSH
60442: LD_INT 257
60444: EQUAL
60445: IFFALSE 60466
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60447: LD_VAR 0 2
60451: PPUSH
60452: LD_VAR 0 4
60456: PPUSH
60457: LD_VAR 0 5
60461: PPUSH
60462: CALL 79796 0 3
// if cmd = 258 then
60466: LD_VAR 0 1
60470: PUSH
60471: LD_INT 258
60473: EQUAL
60474: IFFALSE 60498
// BurnTreeXYR ( unit , x , y , 8 ) ;
60476: LD_VAR 0 2
60480: PPUSH
60481: LD_VAR 0 4
60485: PPUSH
60486: LD_VAR 0 5
60490: PPUSH
60491: LD_INT 8
60493: PPUSH
60494: CALL 60993 0 4
// end ;
60498: LD_VAR 0 6
60502: RET
// export function ComRadiation ( un ) ; var eff ; begin
60503: LD_INT 0
60505: PPUSH
60506: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60507: LD_VAR 0 1
60511: PPUSH
60512: CALL_OW 264
60516: PUSH
60517: LD_INT 91
60519: NONEQUAL
60520: IFFALSE 60524
// exit ;
60522: GO 60594
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60524: LD_INT 68
60526: PPUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 255
60536: PPUSH
60537: CALL_OW 321
60541: PUSH
60542: LD_INT 2
60544: EQUAL
60545: IFFALSE 60557
// eff := 70 else
60547: LD_ADDR_VAR 0 3
60551: PUSH
60552: LD_INT 70
60554: ST_TO_ADDR
60555: GO 60565
// eff := 30 ;
60557: LD_ADDR_VAR 0 3
60561: PUSH
60562: LD_INT 30
60564: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60565: LD_VAR 0 1
60569: PPUSH
60570: CALL_OW 250
60574: PPUSH
60575: LD_VAR 0 1
60579: PPUSH
60580: CALL_OW 251
60584: PPUSH
60585: LD_VAR 0 3
60589: PPUSH
60590: CALL_OW 495
// end ;
60594: LD_VAR 0 2
60598: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60599: LD_INT 0
60601: PPUSH
60602: PPUSH
60603: PPUSH
60604: PPUSH
60605: PPUSH
60606: PPUSH
60607: PPUSH
60608: PPUSH
60609: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60610: LD_VAR 0 1
60614: PPUSH
60615: CALL_OW 302
60619: NOT
60620: PUSH
60621: LD_VAR 0 2
60625: PPUSH
60626: LD_VAR 0 3
60630: PPUSH
60631: CALL_OW 488
60635: NOT
60636: OR
60637: PUSH
60638: LD_VAR 0 4
60642: NOT
60643: OR
60644: IFFALSE 60648
// exit ;
60646: GO 60988
// list := [ ] ;
60648: LD_ADDR_VAR 0 13
60652: PUSH
60653: EMPTY
60654: ST_TO_ADDR
// if x - r < 0 then
60655: LD_VAR 0 2
60659: PUSH
60660: LD_VAR 0 4
60664: MINUS
60665: PUSH
60666: LD_INT 0
60668: LESS
60669: IFFALSE 60681
// min_x := 0 else
60671: LD_ADDR_VAR 0 7
60675: PUSH
60676: LD_INT 0
60678: ST_TO_ADDR
60679: GO 60697
// min_x := x - r ;
60681: LD_ADDR_VAR 0 7
60685: PUSH
60686: LD_VAR 0 2
60690: PUSH
60691: LD_VAR 0 4
60695: MINUS
60696: ST_TO_ADDR
// if y - r < 0 then
60697: LD_VAR 0 3
60701: PUSH
60702: LD_VAR 0 4
60706: MINUS
60707: PUSH
60708: LD_INT 0
60710: LESS
60711: IFFALSE 60723
// min_y := 0 else
60713: LD_ADDR_VAR 0 8
60717: PUSH
60718: LD_INT 0
60720: ST_TO_ADDR
60721: GO 60739
// min_y := y - r ;
60723: LD_ADDR_VAR 0 8
60727: PUSH
60728: LD_VAR 0 3
60732: PUSH
60733: LD_VAR 0 4
60737: MINUS
60738: ST_TO_ADDR
// max_x := x + r ;
60739: LD_ADDR_VAR 0 9
60743: PUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_VAR 0 4
60753: PLUS
60754: ST_TO_ADDR
// max_y := y + r ;
60755: LD_ADDR_VAR 0 10
60759: PUSH
60760: LD_VAR 0 3
60764: PUSH
60765: LD_VAR 0 4
60769: PLUS
60770: ST_TO_ADDR
// for _x = min_x to max_x do
60771: LD_ADDR_VAR 0 11
60775: PUSH
60776: DOUBLE
60777: LD_VAR 0 7
60781: DEC
60782: ST_TO_ADDR
60783: LD_VAR 0 9
60787: PUSH
60788: FOR_TO
60789: IFFALSE 60906
// for _y = min_y to max_y do
60791: LD_ADDR_VAR 0 12
60795: PUSH
60796: DOUBLE
60797: LD_VAR 0 8
60801: DEC
60802: ST_TO_ADDR
60803: LD_VAR 0 10
60807: PUSH
60808: FOR_TO
60809: IFFALSE 60902
// begin if not ValidHex ( _x , _y ) then
60811: LD_VAR 0 11
60815: PPUSH
60816: LD_VAR 0 12
60820: PPUSH
60821: CALL_OW 488
60825: NOT
60826: IFFALSE 60830
// continue ;
60828: GO 60808
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60830: LD_VAR 0 11
60834: PPUSH
60835: LD_VAR 0 12
60839: PPUSH
60840: CALL_OW 351
60844: PUSH
60845: LD_VAR 0 11
60849: PPUSH
60850: LD_VAR 0 12
60854: PPUSH
60855: CALL_OW 554
60859: AND
60860: IFFALSE 60900
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60862: LD_ADDR_VAR 0 13
60866: PUSH
60867: LD_VAR 0 13
60871: PPUSH
60872: LD_VAR 0 13
60876: PUSH
60877: LD_INT 1
60879: PLUS
60880: PPUSH
60881: LD_VAR 0 11
60885: PUSH
60886: LD_VAR 0 12
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PPUSH
60895: CALL_OW 2
60899: ST_TO_ADDR
// end ;
60900: GO 60808
60902: POP
60903: POP
60904: GO 60788
60906: POP
60907: POP
// if not list then
60908: LD_VAR 0 13
60912: NOT
60913: IFFALSE 60917
// exit ;
60915: GO 60988
// for i in list do
60917: LD_ADDR_VAR 0 6
60921: PUSH
60922: LD_VAR 0 13
60926: PUSH
60927: FOR_IN
60928: IFFALSE 60986
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60930: LD_VAR 0 1
60934: PPUSH
60935: LD_STRING M
60937: PUSH
60938: LD_VAR 0 6
60942: PUSH
60943: LD_INT 1
60945: ARRAY
60946: PUSH
60947: LD_VAR 0 6
60951: PUSH
60952: LD_INT 2
60954: ARRAY
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: PPUSH
60980: CALL_OW 447
60984: GO 60927
60986: POP
60987: POP
// end ;
60988: LD_VAR 0 5
60992: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60993: LD_INT 0
60995: PPUSH
60996: PPUSH
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61005: LD_VAR 0 1
61009: PPUSH
61010: CALL_OW 302
61014: NOT
61015: PUSH
61016: LD_VAR 0 2
61020: PPUSH
61021: LD_VAR 0 3
61025: PPUSH
61026: CALL_OW 488
61030: NOT
61031: OR
61032: PUSH
61033: LD_VAR 0 4
61037: NOT
61038: OR
61039: IFFALSE 61043
// exit ;
61041: GO 61556
// list := [ ] ;
61043: LD_ADDR_VAR 0 13
61047: PUSH
61048: EMPTY
61049: ST_TO_ADDR
// if x - r < 0 then
61050: LD_VAR 0 2
61054: PUSH
61055: LD_VAR 0 4
61059: MINUS
61060: PUSH
61061: LD_INT 0
61063: LESS
61064: IFFALSE 61076
// min_x := 0 else
61066: LD_ADDR_VAR 0 7
61070: PUSH
61071: LD_INT 0
61073: ST_TO_ADDR
61074: GO 61092
// min_x := x - r ;
61076: LD_ADDR_VAR 0 7
61080: PUSH
61081: LD_VAR 0 2
61085: PUSH
61086: LD_VAR 0 4
61090: MINUS
61091: ST_TO_ADDR
// if y - r < 0 then
61092: LD_VAR 0 3
61096: PUSH
61097: LD_VAR 0 4
61101: MINUS
61102: PUSH
61103: LD_INT 0
61105: LESS
61106: IFFALSE 61118
// min_y := 0 else
61108: LD_ADDR_VAR 0 8
61112: PUSH
61113: LD_INT 0
61115: ST_TO_ADDR
61116: GO 61134
// min_y := y - r ;
61118: LD_ADDR_VAR 0 8
61122: PUSH
61123: LD_VAR 0 3
61127: PUSH
61128: LD_VAR 0 4
61132: MINUS
61133: ST_TO_ADDR
// max_x := x + r ;
61134: LD_ADDR_VAR 0 9
61138: PUSH
61139: LD_VAR 0 2
61143: PUSH
61144: LD_VAR 0 4
61148: PLUS
61149: ST_TO_ADDR
// max_y := y + r ;
61150: LD_ADDR_VAR 0 10
61154: PUSH
61155: LD_VAR 0 3
61159: PUSH
61160: LD_VAR 0 4
61164: PLUS
61165: ST_TO_ADDR
// for _x = min_x to max_x do
61166: LD_ADDR_VAR 0 11
61170: PUSH
61171: DOUBLE
61172: LD_VAR 0 7
61176: DEC
61177: ST_TO_ADDR
61178: LD_VAR 0 9
61182: PUSH
61183: FOR_TO
61184: IFFALSE 61301
// for _y = min_y to max_y do
61186: LD_ADDR_VAR 0 12
61190: PUSH
61191: DOUBLE
61192: LD_VAR 0 8
61196: DEC
61197: ST_TO_ADDR
61198: LD_VAR 0 10
61202: PUSH
61203: FOR_TO
61204: IFFALSE 61297
// begin if not ValidHex ( _x , _y ) then
61206: LD_VAR 0 11
61210: PPUSH
61211: LD_VAR 0 12
61215: PPUSH
61216: CALL_OW 488
61220: NOT
61221: IFFALSE 61225
// continue ;
61223: GO 61203
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61225: LD_VAR 0 11
61229: PPUSH
61230: LD_VAR 0 12
61234: PPUSH
61235: CALL_OW 351
61239: PUSH
61240: LD_VAR 0 11
61244: PPUSH
61245: LD_VAR 0 12
61249: PPUSH
61250: CALL_OW 554
61254: AND
61255: IFFALSE 61295
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61257: LD_ADDR_VAR 0 13
61261: PUSH
61262: LD_VAR 0 13
61266: PPUSH
61267: LD_VAR 0 13
61271: PUSH
61272: LD_INT 1
61274: PLUS
61275: PPUSH
61276: LD_VAR 0 11
61280: PUSH
61281: LD_VAR 0 12
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PPUSH
61290: CALL_OW 2
61294: ST_TO_ADDR
// end ;
61295: GO 61203
61297: POP
61298: POP
61299: GO 61183
61301: POP
61302: POP
// if not list then
61303: LD_VAR 0 13
61307: NOT
61308: IFFALSE 61312
// exit ;
61310: GO 61556
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61312: LD_ADDR_VAR 0 13
61316: PUSH
61317: LD_VAR 0 1
61321: PPUSH
61322: LD_VAR 0 13
61326: PPUSH
61327: LD_INT 1
61329: PPUSH
61330: LD_INT 1
61332: PPUSH
61333: CALL 22006 0 4
61337: ST_TO_ADDR
// ComStop ( flame ) ;
61338: LD_VAR 0 1
61342: PPUSH
61343: CALL_OW 141
// for i in list do
61347: LD_ADDR_VAR 0 6
61351: PUSH
61352: LD_VAR 0 13
61356: PUSH
61357: FOR_IN
61358: IFFALSE 61389
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61360: LD_VAR 0 1
61364: PPUSH
61365: LD_VAR 0 6
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PPUSH
61374: LD_VAR 0 6
61378: PUSH
61379: LD_INT 2
61381: ARRAY
61382: PPUSH
61383: CALL_OW 176
61387: GO 61357
61389: POP
61390: POP
// repeat wait ( 0 0$1 ) ;
61391: LD_INT 35
61393: PPUSH
61394: CALL_OW 67
// task := GetTaskList ( flame ) ;
61398: LD_ADDR_VAR 0 14
61402: PUSH
61403: LD_VAR 0 1
61407: PPUSH
61408: CALL_OW 437
61412: ST_TO_ADDR
// if not task then
61413: LD_VAR 0 14
61417: NOT
61418: IFFALSE 61422
// exit ;
61420: GO 61556
// if task [ 1 ] [ 1 ] <> | then
61422: LD_VAR 0 14
61426: PUSH
61427: LD_INT 1
61429: ARRAY
61430: PUSH
61431: LD_INT 1
61433: ARRAY
61434: PUSH
61435: LD_STRING |
61437: NONEQUAL
61438: IFFALSE 61442
// exit ;
61440: GO 61556
// _x := task [ 1 ] [ 2 ] ;
61442: LD_ADDR_VAR 0 11
61446: PUSH
61447: LD_VAR 0 14
61451: PUSH
61452: LD_INT 1
61454: ARRAY
61455: PUSH
61456: LD_INT 2
61458: ARRAY
61459: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61460: LD_ADDR_VAR 0 12
61464: PUSH
61465: LD_VAR 0 14
61469: PUSH
61470: LD_INT 1
61472: ARRAY
61473: PUSH
61474: LD_INT 3
61476: ARRAY
61477: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61478: LD_VAR 0 11
61482: PPUSH
61483: LD_VAR 0 12
61487: PPUSH
61488: CALL_OW 351
61492: NOT
61493: PUSH
61494: LD_VAR 0 11
61498: PPUSH
61499: LD_VAR 0 12
61503: PPUSH
61504: CALL_OW 554
61508: NOT
61509: OR
61510: IFFALSE 61544
// begin task := Delete ( task , 1 ) ;
61512: LD_ADDR_VAR 0 14
61516: PUSH
61517: LD_VAR 0 14
61521: PPUSH
61522: LD_INT 1
61524: PPUSH
61525: CALL_OW 3
61529: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61530: LD_VAR 0 1
61534: PPUSH
61535: LD_VAR 0 14
61539: PPUSH
61540: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61544: LD_VAR 0 1
61548: PPUSH
61549: CALL_OW 314
61553: NOT
61554: IFFALSE 61391
// end ;
61556: LD_VAR 0 5
61560: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61561: LD_EXP 36
61565: NOT
61566: IFFALSE 61616
61568: GO 61570
61570: DISABLE
// begin initHack := true ;
61571: LD_ADDR_EXP 36
61575: PUSH
61576: LD_INT 1
61578: ST_TO_ADDR
// hackTanks := [ ] ;
61579: LD_ADDR_EXP 37
61583: PUSH
61584: EMPTY
61585: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61586: LD_ADDR_EXP 38
61590: PUSH
61591: EMPTY
61592: ST_TO_ADDR
// hackLimit := 3 ;
61593: LD_ADDR_EXP 39
61597: PUSH
61598: LD_INT 3
61600: ST_TO_ADDR
// hackDist := 12 ;
61601: LD_ADDR_EXP 40
61605: PUSH
61606: LD_INT 12
61608: ST_TO_ADDR
// hackCounter := [ ] ;
61609: LD_ADDR_EXP 41
61613: PUSH
61614: EMPTY
61615: ST_TO_ADDR
// end ;
61616: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61617: LD_EXP 36
61621: PUSH
61622: LD_INT 34
61624: PUSH
61625: LD_INT 99
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PPUSH
61632: CALL_OW 69
61636: AND
61637: IFFALSE 61890
61639: GO 61641
61641: DISABLE
61642: LD_INT 0
61644: PPUSH
61645: PPUSH
// begin enable ;
61646: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61647: LD_ADDR_VAR 0 1
61651: PUSH
61652: LD_INT 34
61654: PUSH
61655: LD_INT 99
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PPUSH
61662: CALL_OW 69
61666: PUSH
61667: FOR_IN
61668: IFFALSE 61888
// begin if not i in hackTanks then
61670: LD_VAR 0 1
61674: PUSH
61675: LD_EXP 37
61679: IN
61680: NOT
61681: IFFALSE 61764
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61683: LD_ADDR_EXP 37
61687: PUSH
61688: LD_EXP 37
61692: PPUSH
61693: LD_EXP 37
61697: PUSH
61698: LD_INT 1
61700: PLUS
61701: PPUSH
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL_OW 1
61711: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61712: LD_ADDR_EXP 38
61716: PUSH
61717: LD_EXP 38
61721: PPUSH
61722: LD_EXP 38
61726: PUSH
61727: LD_INT 1
61729: PLUS
61730: PPUSH
61731: EMPTY
61732: PPUSH
61733: CALL_OW 1
61737: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61738: LD_ADDR_EXP 41
61742: PUSH
61743: LD_EXP 41
61747: PPUSH
61748: LD_EXP 41
61752: PUSH
61753: LD_INT 1
61755: PLUS
61756: PPUSH
61757: EMPTY
61758: PPUSH
61759: CALL_OW 1
61763: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61764: LD_VAR 0 1
61768: PPUSH
61769: CALL_OW 302
61773: NOT
61774: IFFALSE 61787
// begin HackUnlinkAll ( i ) ;
61776: LD_VAR 0 1
61780: PPUSH
61781: CALL 61893 0 1
// continue ;
61785: GO 61667
// end ; HackCheckCapturedStatus ( i ) ;
61787: LD_VAR 0 1
61791: PPUSH
61792: CALL 62336 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61796: LD_ADDR_VAR 0 2
61800: PUSH
61801: LD_INT 81
61803: PUSH
61804: LD_VAR 0 1
61808: PPUSH
61809: CALL_OW 255
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 33
61820: PUSH
61821: LD_INT 3
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 91
61830: PUSH
61831: LD_VAR 0 1
61835: PUSH
61836: LD_EXP 40
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 50
61848: PUSH
61849: EMPTY
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: PPUSH
61858: CALL_OW 69
61862: ST_TO_ADDR
// if not tmp then
61863: LD_VAR 0 2
61867: NOT
61868: IFFALSE 61872
// continue ;
61870: GO 61667
// HackLink ( i , tmp ) ;
61872: LD_VAR 0 1
61876: PPUSH
61877: LD_VAR 0 2
61881: PPUSH
61882: CALL 62029 0 2
// end ;
61886: GO 61667
61888: POP
61889: POP
// end ;
61890: PPOPN 2
61892: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61893: LD_INT 0
61895: PPUSH
61896: PPUSH
61897: PPUSH
// if not hack in hackTanks then
61898: LD_VAR 0 1
61902: PUSH
61903: LD_EXP 37
61907: IN
61908: NOT
61909: IFFALSE 61913
// exit ;
61911: GO 62024
// index := GetElementIndex ( hackTanks , hack ) ;
61913: LD_ADDR_VAR 0 4
61917: PUSH
61918: LD_EXP 37
61922: PPUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: CALL 21303 0 2
61932: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61933: LD_EXP 38
61937: PUSH
61938: LD_VAR 0 4
61942: ARRAY
61943: IFFALSE 62024
// begin for i in hackTanksCaptured [ index ] do
61945: LD_ADDR_VAR 0 3
61949: PUSH
61950: LD_EXP 38
61954: PUSH
61955: LD_VAR 0 4
61959: ARRAY
61960: PUSH
61961: FOR_IN
61962: IFFALSE 61988
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61964: LD_VAR 0 3
61968: PUSH
61969: LD_INT 1
61971: ARRAY
61972: PPUSH
61973: LD_VAR 0 3
61977: PUSH
61978: LD_INT 2
61980: ARRAY
61981: PPUSH
61982: CALL_OW 235
61986: GO 61961
61988: POP
61989: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61990: LD_ADDR_EXP 38
61994: PUSH
61995: LD_EXP 38
61999: PPUSH
62000: LD_VAR 0 4
62004: PPUSH
62005: EMPTY
62006: PPUSH
62007: CALL_OW 1
62011: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62012: LD_VAR 0 1
62016: PPUSH
62017: LD_INT 0
62019: PPUSH
62020: CALL_OW 505
// end ; end ;
62024: LD_VAR 0 2
62028: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62029: LD_INT 0
62031: PPUSH
62032: PPUSH
62033: PPUSH
// if not hack in hackTanks or not vehicles then
62034: LD_VAR 0 1
62038: PUSH
62039: LD_EXP 37
62043: IN
62044: NOT
62045: PUSH
62046: LD_VAR 0 2
62050: NOT
62051: OR
62052: IFFALSE 62056
// exit ;
62054: GO 62331
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62056: LD_ADDR_VAR 0 2
62060: PUSH
62061: LD_VAR 0 1
62065: PPUSH
62066: LD_VAR 0 2
62070: PPUSH
62071: LD_INT 1
62073: PPUSH
62074: LD_INT 1
62076: PPUSH
62077: CALL 21953 0 4
62081: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62082: LD_ADDR_VAR 0 5
62086: PUSH
62087: LD_EXP 37
62091: PPUSH
62092: LD_VAR 0 1
62096: PPUSH
62097: CALL 21303 0 2
62101: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62102: LD_EXP 38
62106: PUSH
62107: LD_VAR 0 5
62111: ARRAY
62112: PUSH
62113: LD_EXP 39
62117: LESS
62118: IFFALSE 62307
// begin for i := 1 to vehicles do
62120: LD_ADDR_VAR 0 4
62124: PUSH
62125: DOUBLE
62126: LD_INT 1
62128: DEC
62129: ST_TO_ADDR
62130: LD_VAR 0 2
62134: PUSH
62135: FOR_TO
62136: IFFALSE 62305
// begin if hackTanksCaptured [ index ] = hackLimit then
62138: LD_EXP 38
62142: PUSH
62143: LD_VAR 0 5
62147: ARRAY
62148: PUSH
62149: LD_EXP 39
62153: EQUAL
62154: IFFALSE 62158
// break ;
62156: GO 62305
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62158: LD_ADDR_EXP 41
62162: PUSH
62163: LD_EXP 41
62167: PPUSH
62168: LD_VAR 0 5
62172: PPUSH
62173: LD_EXP 41
62177: PUSH
62178: LD_VAR 0 5
62182: ARRAY
62183: PUSH
62184: LD_INT 1
62186: PLUS
62187: PPUSH
62188: CALL_OW 1
62192: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62193: LD_ADDR_EXP 38
62197: PUSH
62198: LD_EXP 38
62202: PPUSH
62203: LD_VAR 0 5
62207: PUSH
62208: LD_EXP 38
62212: PUSH
62213: LD_VAR 0 5
62217: ARRAY
62218: PUSH
62219: LD_INT 1
62221: PLUS
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PPUSH
62227: LD_VAR 0 2
62231: PUSH
62232: LD_VAR 0 4
62236: ARRAY
62237: PUSH
62238: LD_VAR 0 2
62242: PUSH
62243: LD_VAR 0 4
62247: ARRAY
62248: PPUSH
62249: CALL_OW 255
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PPUSH
62258: CALL 21518 0 3
62262: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62263: LD_VAR 0 2
62267: PUSH
62268: LD_VAR 0 4
62272: ARRAY
62273: PPUSH
62274: LD_VAR 0 1
62278: PPUSH
62279: CALL_OW 255
62283: PPUSH
62284: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62288: LD_VAR 0 2
62292: PUSH
62293: LD_VAR 0 4
62297: ARRAY
62298: PPUSH
62299: CALL_OW 141
// end ;
62303: GO 62135
62305: POP
62306: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62307: LD_VAR 0 1
62311: PPUSH
62312: LD_EXP 38
62316: PUSH
62317: LD_VAR 0 5
62321: ARRAY
62322: PUSH
62323: LD_INT 0
62325: PLUS
62326: PPUSH
62327: CALL_OW 505
// end ;
62331: LD_VAR 0 3
62335: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62336: LD_INT 0
62338: PPUSH
62339: PPUSH
62340: PPUSH
62341: PPUSH
// if not hack in hackTanks then
62342: LD_VAR 0 1
62346: PUSH
62347: LD_EXP 37
62351: IN
62352: NOT
62353: IFFALSE 62357
// exit ;
62355: GO 62597
// index := GetElementIndex ( hackTanks , hack ) ;
62357: LD_ADDR_VAR 0 4
62361: PUSH
62362: LD_EXP 37
62366: PPUSH
62367: LD_VAR 0 1
62371: PPUSH
62372: CALL 21303 0 2
62376: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62377: LD_ADDR_VAR 0 3
62381: PUSH
62382: DOUBLE
62383: LD_EXP 38
62387: PUSH
62388: LD_VAR 0 4
62392: ARRAY
62393: INC
62394: ST_TO_ADDR
62395: LD_INT 1
62397: PUSH
62398: FOR_DOWNTO
62399: IFFALSE 62571
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62401: LD_ADDR_VAR 0 5
62405: PUSH
62406: LD_EXP 38
62410: PUSH
62411: LD_VAR 0 4
62415: ARRAY
62416: PUSH
62417: LD_VAR 0 3
62421: ARRAY
62422: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62423: LD_VAR 0 5
62427: PUSH
62428: LD_INT 1
62430: ARRAY
62431: PPUSH
62432: CALL_OW 302
62436: NOT
62437: PUSH
62438: LD_VAR 0 5
62442: PUSH
62443: LD_INT 1
62445: ARRAY
62446: PPUSH
62447: CALL_OW 255
62451: PUSH
62452: LD_VAR 0 1
62456: PPUSH
62457: CALL_OW 255
62461: NONEQUAL
62462: OR
62463: IFFALSE 62569
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62465: LD_VAR 0 5
62469: PUSH
62470: LD_INT 1
62472: ARRAY
62473: PPUSH
62474: CALL_OW 305
62478: PUSH
62479: LD_VAR 0 5
62483: PUSH
62484: LD_INT 1
62486: ARRAY
62487: PPUSH
62488: CALL_OW 255
62492: PUSH
62493: LD_VAR 0 1
62497: PPUSH
62498: CALL_OW 255
62502: EQUAL
62503: AND
62504: IFFALSE 62528
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62506: LD_VAR 0 5
62510: PUSH
62511: LD_INT 1
62513: ARRAY
62514: PPUSH
62515: LD_VAR 0 5
62519: PUSH
62520: LD_INT 2
62522: ARRAY
62523: PPUSH
62524: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62528: LD_ADDR_EXP 38
62532: PUSH
62533: LD_EXP 38
62537: PPUSH
62538: LD_VAR 0 4
62542: PPUSH
62543: LD_EXP 38
62547: PUSH
62548: LD_VAR 0 4
62552: ARRAY
62553: PPUSH
62554: LD_VAR 0 3
62558: PPUSH
62559: CALL_OW 3
62563: PPUSH
62564: CALL_OW 1
62568: ST_TO_ADDR
// end ; end ;
62569: GO 62398
62571: POP
62572: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62573: LD_VAR 0 1
62577: PPUSH
62578: LD_EXP 38
62582: PUSH
62583: LD_VAR 0 4
62587: ARRAY
62588: PUSH
62589: LD_INT 0
62591: PLUS
62592: PPUSH
62593: CALL_OW 505
// end ;
62597: LD_VAR 0 2
62601: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62602: LD_INT 0
62604: PPUSH
62605: PPUSH
62606: PPUSH
62607: PPUSH
// if not hack in hackTanks then
62608: LD_VAR 0 1
62612: PUSH
62613: LD_EXP 37
62617: IN
62618: NOT
62619: IFFALSE 62623
// exit ;
62621: GO 62708
// index := GetElementIndex ( hackTanks , hack ) ;
62623: LD_ADDR_VAR 0 5
62627: PUSH
62628: LD_EXP 37
62632: PPUSH
62633: LD_VAR 0 1
62637: PPUSH
62638: CALL 21303 0 2
62642: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62643: LD_ADDR_VAR 0 4
62647: PUSH
62648: DOUBLE
62649: LD_INT 1
62651: DEC
62652: ST_TO_ADDR
62653: LD_EXP 38
62657: PUSH
62658: LD_VAR 0 5
62662: ARRAY
62663: PUSH
62664: FOR_TO
62665: IFFALSE 62706
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62667: LD_EXP 38
62671: PUSH
62672: LD_VAR 0 5
62676: ARRAY
62677: PUSH
62678: LD_VAR 0 4
62682: ARRAY
62683: PUSH
62684: LD_INT 1
62686: ARRAY
62687: PUSH
62688: LD_VAR 0 2
62692: EQUAL
62693: IFFALSE 62704
// KillUnit ( vehicle ) ;
62695: LD_VAR 0 2
62699: PPUSH
62700: CALL_OW 66
62704: GO 62664
62706: POP
62707: POP
// end ;
62708: LD_VAR 0 3
62712: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62713: LD_EXP 42
62717: NOT
62718: IFFALSE 62753
62720: GO 62722
62722: DISABLE
// begin initMiner := true ;
62723: LD_ADDR_EXP 42
62727: PUSH
62728: LD_INT 1
62730: ST_TO_ADDR
// minersList := [ ] ;
62731: LD_ADDR_EXP 43
62735: PUSH
62736: EMPTY
62737: ST_TO_ADDR
// minerMinesList := [ ] ;
62738: LD_ADDR_EXP 44
62742: PUSH
62743: EMPTY
62744: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62745: LD_ADDR_EXP 45
62749: PUSH
62750: LD_INT 5
62752: ST_TO_ADDR
// end ;
62753: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62754: LD_EXP 42
62758: PUSH
62759: LD_INT 34
62761: PUSH
62762: LD_INT 81
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PPUSH
62769: CALL_OW 69
62773: AND
62774: IFFALSE 63235
62776: GO 62778
62778: DISABLE
62779: LD_INT 0
62781: PPUSH
62782: PPUSH
62783: PPUSH
62784: PPUSH
// begin enable ;
62785: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62786: LD_ADDR_VAR 0 1
62790: PUSH
62791: LD_INT 34
62793: PUSH
62794: LD_INT 81
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PPUSH
62801: CALL_OW 69
62805: PUSH
62806: FOR_IN
62807: IFFALSE 62879
// begin if not i in minersList then
62809: LD_VAR 0 1
62813: PUSH
62814: LD_EXP 43
62818: IN
62819: NOT
62820: IFFALSE 62877
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62822: LD_ADDR_EXP 43
62826: PUSH
62827: LD_EXP 43
62831: PPUSH
62832: LD_EXP 43
62836: PUSH
62837: LD_INT 1
62839: PLUS
62840: PPUSH
62841: LD_VAR 0 1
62845: PPUSH
62846: CALL_OW 1
62850: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62851: LD_ADDR_EXP 44
62855: PUSH
62856: LD_EXP 44
62860: PPUSH
62861: LD_EXP 44
62865: PUSH
62866: LD_INT 1
62868: PLUS
62869: PPUSH
62870: EMPTY
62871: PPUSH
62872: CALL_OW 1
62876: ST_TO_ADDR
// end end ;
62877: GO 62806
62879: POP
62880: POP
// for i := minerMinesList downto 1 do
62881: LD_ADDR_VAR 0 1
62885: PUSH
62886: DOUBLE
62887: LD_EXP 44
62891: INC
62892: ST_TO_ADDR
62893: LD_INT 1
62895: PUSH
62896: FOR_DOWNTO
62897: IFFALSE 63233
// begin if IsLive ( minersList [ i ] ) then
62899: LD_EXP 43
62903: PUSH
62904: LD_VAR 0 1
62908: ARRAY
62909: PPUSH
62910: CALL_OW 300
62914: IFFALSE 62942
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62916: LD_EXP 43
62920: PUSH
62921: LD_VAR 0 1
62925: ARRAY
62926: PPUSH
62927: LD_EXP 44
62931: PUSH
62932: LD_VAR 0 1
62936: ARRAY
62937: PPUSH
62938: CALL_OW 505
// if not minerMinesList [ i ] then
62942: LD_EXP 44
62946: PUSH
62947: LD_VAR 0 1
62951: ARRAY
62952: NOT
62953: IFFALSE 62957
// continue ;
62955: GO 62896
// for j := minerMinesList [ i ] downto 1 do
62957: LD_ADDR_VAR 0 2
62961: PUSH
62962: DOUBLE
62963: LD_EXP 44
62967: PUSH
62968: LD_VAR 0 1
62972: ARRAY
62973: INC
62974: ST_TO_ADDR
62975: LD_INT 1
62977: PUSH
62978: FOR_DOWNTO
62979: IFFALSE 63229
// begin side := GetSide ( minersList [ i ] ) ;
62981: LD_ADDR_VAR 0 3
62985: PUSH
62986: LD_EXP 43
62990: PUSH
62991: LD_VAR 0 1
62995: ARRAY
62996: PPUSH
62997: CALL_OW 255
63001: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63002: LD_ADDR_VAR 0 4
63006: PUSH
63007: LD_EXP 44
63011: PUSH
63012: LD_VAR 0 1
63016: ARRAY
63017: PUSH
63018: LD_VAR 0 2
63022: ARRAY
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PPUSH
63028: LD_EXP 44
63032: PUSH
63033: LD_VAR 0 1
63037: ARRAY
63038: PUSH
63039: LD_VAR 0 2
63043: ARRAY
63044: PUSH
63045: LD_INT 2
63047: ARRAY
63048: PPUSH
63049: CALL_OW 428
63053: ST_TO_ADDR
// if not tmp then
63054: LD_VAR 0 4
63058: NOT
63059: IFFALSE 63063
// continue ;
63061: GO 62978
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63063: LD_VAR 0 4
63067: PUSH
63068: LD_INT 81
63070: PUSH
63071: LD_VAR 0 3
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PPUSH
63080: CALL_OW 69
63084: IN
63085: PUSH
63086: LD_EXP 44
63090: PUSH
63091: LD_VAR 0 1
63095: ARRAY
63096: PUSH
63097: LD_VAR 0 2
63101: ARRAY
63102: PUSH
63103: LD_INT 1
63105: ARRAY
63106: PPUSH
63107: LD_EXP 44
63111: PUSH
63112: LD_VAR 0 1
63116: ARRAY
63117: PUSH
63118: LD_VAR 0 2
63122: ARRAY
63123: PUSH
63124: LD_INT 2
63126: ARRAY
63127: PPUSH
63128: CALL_OW 458
63132: AND
63133: IFFALSE 63227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63135: LD_EXP 44
63139: PUSH
63140: LD_VAR 0 1
63144: ARRAY
63145: PUSH
63146: LD_VAR 0 2
63150: ARRAY
63151: PUSH
63152: LD_INT 1
63154: ARRAY
63155: PPUSH
63156: LD_EXP 44
63160: PUSH
63161: LD_VAR 0 1
63165: ARRAY
63166: PUSH
63167: LD_VAR 0 2
63171: ARRAY
63172: PUSH
63173: LD_INT 2
63175: ARRAY
63176: PPUSH
63177: LD_VAR 0 3
63181: PPUSH
63182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63186: LD_ADDR_EXP 44
63190: PUSH
63191: LD_EXP 44
63195: PPUSH
63196: LD_VAR 0 1
63200: PPUSH
63201: LD_EXP 44
63205: PUSH
63206: LD_VAR 0 1
63210: ARRAY
63211: PPUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: CALL_OW 3
63221: PPUSH
63222: CALL_OW 1
63226: ST_TO_ADDR
// end ; end ;
63227: GO 62978
63229: POP
63230: POP
// end ;
63231: GO 62896
63233: POP
63234: POP
// end ;
63235: PPOPN 4
63237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63238: LD_INT 0
63240: PPUSH
63241: PPUSH
// result := false ;
63242: LD_ADDR_VAR 0 4
63246: PUSH
63247: LD_INT 0
63249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63250: LD_VAR 0 1
63254: PPUSH
63255: CALL_OW 264
63259: PUSH
63260: LD_INT 81
63262: EQUAL
63263: NOT
63264: IFFALSE 63268
// exit ;
63266: GO 63508
// index := GetElementIndex ( minersList , unit ) ;
63268: LD_ADDR_VAR 0 5
63272: PUSH
63273: LD_EXP 43
63277: PPUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: CALL 21303 0 2
63287: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63288: LD_EXP 44
63292: PUSH
63293: LD_VAR 0 5
63297: ARRAY
63298: PUSH
63299: LD_EXP 45
63303: GREATEREQUAL
63304: IFFALSE 63308
// exit ;
63306: GO 63508
// ComMoveXY ( unit , x , y ) ;
63308: LD_VAR 0 1
63312: PPUSH
63313: LD_VAR 0 2
63317: PPUSH
63318: LD_VAR 0 3
63322: PPUSH
63323: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63327: LD_INT 35
63329: PPUSH
63330: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63334: LD_VAR 0 1
63338: PPUSH
63339: LD_VAR 0 2
63343: PPUSH
63344: LD_VAR 0 3
63348: PPUSH
63349: CALL 53064 0 3
63353: NOT
63354: PUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: CALL_OW 314
63364: AND
63365: IFFALSE 63369
// exit ;
63367: GO 63508
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63369: LD_VAR 0 2
63373: PPUSH
63374: LD_VAR 0 3
63378: PPUSH
63379: CALL_OW 428
63383: PUSH
63384: LD_VAR 0 1
63388: EQUAL
63389: PUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: CALL_OW 314
63399: NOT
63400: AND
63401: IFFALSE 63327
// PlaySoundXY ( x , y , PlantMine ) ;
63403: LD_VAR 0 2
63407: PPUSH
63408: LD_VAR 0 3
63412: PPUSH
63413: LD_STRING PlantMine
63415: PPUSH
63416: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63420: LD_VAR 0 2
63424: PPUSH
63425: LD_VAR 0 3
63429: PPUSH
63430: LD_VAR 0 1
63434: PPUSH
63435: CALL_OW 255
63439: PPUSH
63440: LD_INT 0
63442: PPUSH
63443: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63447: LD_ADDR_EXP 44
63451: PUSH
63452: LD_EXP 44
63456: PPUSH
63457: LD_VAR 0 5
63461: PUSH
63462: LD_EXP 44
63466: PUSH
63467: LD_VAR 0 5
63471: ARRAY
63472: PUSH
63473: LD_INT 1
63475: PLUS
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PPUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_VAR 0 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PPUSH
63495: CALL 21518 0 3
63499: ST_TO_ADDR
// result := true ;
63500: LD_ADDR_VAR 0 4
63504: PUSH
63505: LD_INT 1
63507: ST_TO_ADDR
// end ;
63508: LD_VAR 0 4
63512: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63513: LD_INT 0
63515: PPUSH
63516: PPUSH
63517: PPUSH
// if not unit in minersList then
63518: LD_VAR 0 1
63522: PUSH
63523: LD_EXP 43
63527: IN
63528: NOT
63529: IFFALSE 63533
// exit ;
63531: GO 63925
// index := GetElementIndex ( minersList , unit ) ;
63533: LD_ADDR_VAR 0 6
63537: PUSH
63538: LD_EXP 43
63542: PPUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: CALL 21303 0 2
63552: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63553: LD_ADDR_VAR 0 5
63557: PUSH
63558: DOUBLE
63559: LD_EXP 44
63563: PUSH
63564: LD_VAR 0 6
63568: ARRAY
63569: INC
63570: ST_TO_ADDR
63571: LD_INT 1
63573: PUSH
63574: FOR_DOWNTO
63575: IFFALSE 63736
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63577: LD_EXP 44
63581: PUSH
63582: LD_VAR 0 6
63586: ARRAY
63587: PUSH
63588: LD_VAR 0 5
63592: ARRAY
63593: PUSH
63594: LD_INT 1
63596: ARRAY
63597: PUSH
63598: LD_VAR 0 2
63602: EQUAL
63603: PUSH
63604: LD_EXP 44
63608: PUSH
63609: LD_VAR 0 6
63613: ARRAY
63614: PUSH
63615: LD_VAR 0 5
63619: ARRAY
63620: PUSH
63621: LD_INT 2
63623: ARRAY
63624: PUSH
63625: LD_VAR 0 3
63629: EQUAL
63630: AND
63631: IFFALSE 63734
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63633: LD_EXP 44
63637: PUSH
63638: LD_VAR 0 6
63642: ARRAY
63643: PUSH
63644: LD_VAR 0 5
63648: ARRAY
63649: PUSH
63650: LD_INT 1
63652: ARRAY
63653: PPUSH
63654: LD_EXP 44
63658: PUSH
63659: LD_VAR 0 6
63663: ARRAY
63664: PUSH
63665: LD_VAR 0 5
63669: ARRAY
63670: PUSH
63671: LD_INT 2
63673: ARRAY
63674: PPUSH
63675: LD_VAR 0 1
63679: PPUSH
63680: CALL_OW 255
63684: PPUSH
63685: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63689: LD_ADDR_EXP 44
63693: PUSH
63694: LD_EXP 44
63698: PPUSH
63699: LD_VAR 0 6
63703: PPUSH
63704: LD_EXP 44
63708: PUSH
63709: LD_VAR 0 6
63713: ARRAY
63714: PPUSH
63715: LD_VAR 0 5
63719: PPUSH
63720: CALL_OW 3
63724: PPUSH
63725: CALL_OW 1
63729: ST_TO_ADDR
// exit ;
63730: POP
63731: POP
63732: GO 63925
// end ; end ;
63734: GO 63574
63736: POP
63737: POP
// for i := minerMinesList [ index ] downto 1 do
63738: LD_ADDR_VAR 0 5
63742: PUSH
63743: DOUBLE
63744: LD_EXP 44
63748: PUSH
63749: LD_VAR 0 6
63753: ARRAY
63754: INC
63755: ST_TO_ADDR
63756: LD_INT 1
63758: PUSH
63759: FOR_DOWNTO
63760: IFFALSE 63923
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63762: LD_EXP 44
63766: PUSH
63767: LD_VAR 0 6
63771: ARRAY
63772: PUSH
63773: LD_VAR 0 5
63777: ARRAY
63778: PUSH
63779: LD_INT 1
63781: ARRAY
63782: PPUSH
63783: LD_EXP 44
63787: PUSH
63788: LD_VAR 0 6
63792: ARRAY
63793: PUSH
63794: LD_VAR 0 5
63798: ARRAY
63799: PUSH
63800: LD_INT 2
63802: ARRAY
63803: PPUSH
63804: LD_VAR 0 2
63808: PPUSH
63809: LD_VAR 0 3
63813: PPUSH
63814: CALL_OW 298
63818: PUSH
63819: LD_INT 6
63821: LESS
63822: IFFALSE 63921
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63824: LD_EXP 44
63828: PUSH
63829: LD_VAR 0 6
63833: ARRAY
63834: PUSH
63835: LD_VAR 0 5
63839: ARRAY
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PPUSH
63845: LD_EXP 44
63849: PUSH
63850: LD_VAR 0 6
63854: ARRAY
63855: PUSH
63856: LD_VAR 0 5
63860: ARRAY
63861: PUSH
63862: LD_INT 2
63864: ARRAY
63865: PPUSH
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL_OW 255
63875: PPUSH
63876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63880: LD_ADDR_EXP 44
63884: PUSH
63885: LD_EXP 44
63889: PPUSH
63890: LD_VAR 0 6
63894: PPUSH
63895: LD_EXP 44
63899: PUSH
63900: LD_VAR 0 6
63904: ARRAY
63905: PPUSH
63906: LD_VAR 0 5
63910: PPUSH
63911: CALL_OW 3
63915: PPUSH
63916: CALL_OW 1
63920: ST_TO_ADDR
// end ; end ;
63921: GO 63759
63923: POP
63924: POP
// end ;
63925: LD_VAR 0 4
63929: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63930: LD_INT 0
63932: PPUSH
63933: PPUSH
63934: PPUSH
63935: PPUSH
63936: PPUSH
63937: PPUSH
63938: PPUSH
63939: PPUSH
63940: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63941: LD_VAR 0 1
63945: PPUSH
63946: CALL_OW 264
63950: PUSH
63951: LD_INT 81
63953: EQUAL
63954: NOT
63955: PUSH
63956: LD_VAR 0 1
63960: PUSH
63961: LD_EXP 43
63965: IN
63966: NOT
63967: OR
63968: IFFALSE 63972
// exit ;
63970: GO 64294
// index := GetElementIndex ( minersList , unit ) ;
63972: LD_ADDR_VAR 0 6
63976: PUSH
63977: LD_EXP 43
63981: PPUSH
63982: LD_VAR 0 1
63986: PPUSH
63987: CALL 21303 0 2
63991: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63992: LD_ADDR_VAR 0 8
63996: PUSH
63997: LD_EXP 45
64001: PUSH
64002: LD_EXP 44
64006: PUSH
64007: LD_VAR 0 6
64011: ARRAY
64012: MINUS
64013: ST_TO_ADDR
// if not minesFreeAmount then
64014: LD_VAR 0 8
64018: NOT
64019: IFFALSE 64023
// exit ;
64021: GO 64294
// tmp := [ ] ;
64023: LD_ADDR_VAR 0 7
64027: PUSH
64028: EMPTY
64029: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64030: LD_ADDR_VAR 0 5
64034: PUSH
64035: DOUBLE
64036: LD_INT 1
64038: DEC
64039: ST_TO_ADDR
64040: LD_VAR 0 8
64044: PUSH
64045: FOR_TO
64046: IFFALSE 64241
// begin _d := rand ( 0 , 5 ) ;
64048: LD_ADDR_VAR 0 11
64052: PUSH
64053: LD_INT 0
64055: PPUSH
64056: LD_INT 5
64058: PPUSH
64059: CALL_OW 12
64063: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64064: LD_ADDR_VAR 0 12
64068: PUSH
64069: LD_INT 2
64071: PPUSH
64072: LD_INT 6
64074: PPUSH
64075: CALL_OW 12
64079: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64080: LD_ADDR_VAR 0 9
64084: PUSH
64085: LD_VAR 0 2
64089: PPUSH
64090: LD_VAR 0 11
64094: PPUSH
64095: LD_VAR 0 12
64099: PPUSH
64100: CALL_OW 272
64104: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64105: LD_ADDR_VAR 0 10
64109: PUSH
64110: LD_VAR 0 3
64114: PPUSH
64115: LD_VAR 0 11
64119: PPUSH
64120: LD_VAR 0 12
64124: PPUSH
64125: CALL_OW 273
64129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64130: LD_VAR 0 9
64134: PPUSH
64135: LD_VAR 0 10
64139: PPUSH
64140: CALL_OW 488
64144: PUSH
64145: LD_VAR 0 9
64149: PUSH
64150: LD_VAR 0 10
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_VAR 0 7
64163: IN
64164: NOT
64165: AND
64166: PUSH
64167: LD_VAR 0 9
64171: PPUSH
64172: LD_VAR 0 10
64176: PPUSH
64177: CALL_OW 458
64181: NOT
64182: AND
64183: IFFALSE 64225
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64185: LD_ADDR_VAR 0 7
64189: PUSH
64190: LD_VAR 0 7
64194: PPUSH
64195: LD_VAR 0 7
64199: PUSH
64200: LD_INT 1
64202: PLUS
64203: PPUSH
64204: LD_VAR 0 9
64208: PUSH
64209: LD_VAR 0 10
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PPUSH
64218: CALL_OW 1
64222: ST_TO_ADDR
64223: GO 64239
// i := i - 1 ;
64225: LD_ADDR_VAR 0 5
64229: PUSH
64230: LD_VAR 0 5
64234: PUSH
64235: LD_INT 1
64237: MINUS
64238: ST_TO_ADDR
// end ;
64239: GO 64045
64241: POP
64242: POP
// for i in tmp do
64243: LD_ADDR_VAR 0 5
64247: PUSH
64248: LD_VAR 0 7
64252: PUSH
64253: FOR_IN
64254: IFFALSE 64292
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64256: LD_VAR 0 1
64260: PPUSH
64261: LD_VAR 0 5
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: PPUSH
64270: LD_VAR 0 5
64274: PUSH
64275: LD_INT 2
64277: ARRAY
64278: PPUSH
64279: CALL 63238 0 3
64283: NOT
64284: IFFALSE 64290
// exit ;
64286: POP
64287: POP
64288: GO 64294
64290: GO 64253
64292: POP
64293: POP
// end ;
64294: LD_VAR 0 4
64298: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64299: LD_INT 0
64301: PPUSH
64302: PPUSH
64303: PPUSH
64304: PPUSH
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
64309: PPUSH
// if GetClass ( unit ) <> class_sniper then
64310: LD_VAR 0 1
64314: PPUSH
64315: CALL_OW 257
64319: PUSH
64320: LD_INT 5
64322: NONEQUAL
64323: IFFALSE 64327
// exit ;
64325: GO 64793
// dist := 8 ;
64327: LD_ADDR_VAR 0 5
64331: PUSH
64332: LD_INT 8
64334: ST_TO_ADDR
// viewRange := 12 ;
64335: LD_ADDR_VAR 0 8
64339: PUSH
64340: LD_INT 12
64342: ST_TO_ADDR
// side := GetSide ( unit ) ;
64343: LD_ADDR_VAR 0 6
64347: PUSH
64348: LD_VAR 0 1
64352: PPUSH
64353: CALL_OW 255
64357: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64358: LD_INT 61
64360: PPUSH
64361: LD_VAR 0 6
64365: PPUSH
64366: CALL_OW 321
64370: PUSH
64371: LD_INT 2
64373: EQUAL
64374: IFFALSE 64384
// viewRange := 16 ;
64376: LD_ADDR_VAR 0 8
64380: PUSH
64381: LD_INT 16
64383: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64384: LD_VAR 0 1
64388: PPUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: LD_VAR 0 3
64398: PPUSH
64399: CALL_OW 297
64403: PUSH
64404: LD_VAR 0 5
64408: GREATER
64409: IFFALSE 64488
// begin ComMoveXY ( unit , x , y ) ;
64411: LD_VAR 0 1
64415: PPUSH
64416: LD_VAR 0 2
64420: PPUSH
64421: LD_VAR 0 3
64425: PPUSH
64426: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64430: LD_INT 35
64432: PPUSH
64433: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64437: LD_VAR 0 1
64441: PPUSH
64442: LD_VAR 0 2
64446: PPUSH
64447: LD_VAR 0 3
64451: PPUSH
64452: CALL 53064 0 3
64456: NOT
64457: IFFALSE 64461
// exit ;
64459: GO 64793
// until GetDistUnitXY ( unit , x , y ) < dist ;
64461: LD_VAR 0 1
64465: PPUSH
64466: LD_VAR 0 2
64470: PPUSH
64471: LD_VAR 0 3
64475: PPUSH
64476: CALL_OW 297
64480: PUSH
64481: LD_VAR 0 5
64485: LESS
64486: IFFALSE 64430
// end ; ComTurnXY ( unit , x , y ) ;
64488: LD_VAR 0 1
64492: PPUSH
64493: LD_VAR 0 2
64497: PPUSH
64498: LD_VAR 0 3
64502: PPUSH
64503: CALL_OW 118
// repeat if Multiplayer then
64507: LD_OWVAR 4
64511: IFFALSE 64522
// wait ( 35 ) else
64513: LD_INT 35
64515: PPUSH
64516: CALL_OW 67
64520: GO 64529
// wait ( 5 ) ;
64522: LD_INT 5
64524: PPUSH
64525: CALL_OW 67
// _d := GetDir ( unit ) ;
64529: LD_ADDR_VAR 0 11
64533: PUSH
64534: LD_VAR 0 1
64538: PPUSH
64539: CALL_OW 254
64543: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64544: LD_ADDR_VAR 0 7
64548: PUSH
64549: LD_VAR 0 1
64553: PPUSH
64554: CALL_OW 250
64558: PPUSH
64559: LD_VAR 0 1
64563: PPUSH
64564: CALL_OW 251
64568: PPUSH
64569: LD_VAR 0 2
64573: PPUSH
64574: LD_VAR 0 3
64578: PPUSH
64579: CALL 55672 0 4
64583: ST_TO_ADDR
// until dir = _d ;
64584: LD_VAR 0 7
64588: PUSH
64589: LD_VAR 0 11
64593: EQUAL
64594: IFFALSE 64507
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64596: LD_ADDR_VAR 0 9
64600: PUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 250
64610: PPUSH
64611: LD_VAR 0 7
64615: PPUSH
64616: LD_VAR 0 5
64620: PPUSH
64621: CALL_OW 272
64625: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64626: LD_ADDR_VAR 0 10
64630: PUSH
64631: LD_VAR 0 1
64635: PPUSH
64636: CALL_OW 251
64640: PPUSH
64641: LD_VAR 0 7
64645: PPUSH
64646: LD_VAR 0 5
64650: PPUSH
64651: CALL_OW 273
64655: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64656: LD_VAR 0 9
64660: PPUSH
64661: LD_VAR 0 10
64665: PPUSH
64666: CALL_OW 488
64670: NOT
64671: IFFALSE 64675
// exit ;
64673: GO 64793
// ComAnimCustom ( unit , 1 ) ;
64675: LD_VAR 0 1
64679: PPUSH
64680: LD_INT 1
64682: PPUSH
64683: CALL_OW 592
// p := 0 ;
64687: LD_ADDR_VAR 0 12
64691: PUSH
64692: LD_INT 0
64694: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64695: LD_VAR 0 9
64699: PPUSH
64700: LD_VAR 0 10
64704: PPUSH
64705: LD_VAR 0 6
64709: PPUSH
64710: LD_VAR 0 8
64714: PPUSH
64715: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64719: LD_INT 35
64721: PPUSH
64722: CALL_OW 67
// p := Inc ( p ) ;
64726: LD_ADDR_VAR 0 12
64730: PUSH
64731: LD_VAR 0 12
64735: PPUSH
64736: CALL 55628 0 1
64740: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64741: LD_VAR 0 12
64745: PUSH
64746: LD_INT 3
64748: EQUAL
64749: PUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: CALL_OW 302
64759: NOT
64760: OR
64761: PUSH
64762: LD_VAR 0 1
64766: PPUSH
64767: CALL_OW 301
64771: OR
64772: IFFALSE 64719
// RemoveSeeing ( _x , _y , side ) ;
64774: LD_VAR 0 9
64778: PPUSH
64779: LD_VAR 0 10
64783: PPUSH
64784: LD_VAR 0 6
64788: PPUSH
64789: CALL_OW 331
// end ; end_of_file
64793: LD_VAR 0 4
64797: RET
// export globalGameSaveCounter ; every 0 0$1 do
64798: GO 64800
64800: DISABLE
// begin enable ;
64801: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64802: LD_STRING updateTimer(
64804: PUSH
64805: LD_OWVAR 1
64809: STR
64810: PUSH
64811: LD_STRING );
64813: STR
64814: PPUSH
64815: CALL_OW 559
// end ;
64819: END
// every 0 0$1 do
64820: GO 64822
64822: DISABLE
// begin globalGameSaveCounter := 0 ;
64823: LD_ADDR_EXP 46
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64831: LD_STRING setGameSaveCounter(0)
64833: PPUSH
64834: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64838: LD_STRING initStreamRollete();
64840: PPUSH
64841: CALL_OW 559
// InitStreamMode ;
64845: CALL 66188 0 0
// DefineStreamItems ( false ) ;
64849: LD_INT 0
64851: PPUSH
64852: CALL 66652 0 1
// end ;
64856: END
// export function SOS_MapStart ( ) ; begin
64857: LD_INT 0
64859: PPUSH
// if streamModeActive then
64860: LD_EXP 47
64864: IFFALSE 64873
// DefineStreamItems ( true ) ;
64866: LD_INT 1
64868: PPUSH
64869: CALL 66652 0 1
// UpdateLuaVariables ( ) ;
64873: CALL 64890 0 0
// UpdateFactoryWaypoints ( ) ;
64877: CALL 79654 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64881: CALL 79906 0 0
// end ;
64885: LD_VAR 0 1
64889: RET
// function UpdateLuaVariables ( ) ; begin
64890: LD_INT 0
64892: PPUSH
// if globalGameSaveCounter then
64893: LD_EXP 46
64897: IFFALSE 64931
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64899: LD_ADDR_EXP 46
64903: PUSH
64904: LD_EXP 46
64908: PPUSH
64909: CALL 55628 0 1
64913: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64914: LD_STRING setGameSaveCounter(
64916: PUSH
64917: LD_EXP 46
64921: STR
64922: PUSH
64923: LD_STRING )
64925: STR
64926: PPUSH
64927: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64931: LD_STRING setGameDifficulty(
64933: PUSH
64934: LD_OWVAR 67
64938: STR
64939: PUSH
64940: LD_STRING )
64942: STR
64943: PPUSH
64944: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64948: LD_STRING displayDifficulty(
64950: PUSH
64951: LD_OWVAR 67
64955: STR
64956: PUSH
64957: LD_STRING )
64959: STR
64960: PPUSH
64961: CALL_OW 559
// end ;
64965: LD_VAR 0 1
64969: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64970: LD_INT 0
64972: PPUSH
// if p2 = stream_mode then
64973: LD_VAR 0 2
64977: PUSH
64978: LD_INT 100
64980: EQUAL
64981: IFFALSE 65984
// begin if not StreamModeActive then
64983: LD_EXP 47
64987: NOT
64988: IFFALSE 64998
// StreamModeActive := true ;
64990: LD_ADDR_EXP 47
64994: PUSH
64995: LD_INT 1
64997: ST_TO_ADDR
// if p3 = 0 then
64998: LD_VAR 0 3
65002: PUSH
65003: LD_INT 0
65005: EQUAL
65006: IFFALSE 65012
// InitStreamMode ;
65008: CALL 66188 0 0
// if p3 = 1 then
65012: LD_VAR 0 3
65016: PUSH
65017: LD_INT 1
65019: EQUAL
65020: IFFALSE 65030
// sRocket := true ;
65022: LD_ADDR_EXP 52
65026: PUSH
65027: LD_INT 1
65029: ST_TO_ADDR
// if p3 = 2 then
65030: LD_VAR 0 3
65034: PUSH
65035: LD_INT 2
65037: EQUAL
65038: IFFALSE 65048
// sSpeed := true ;
65040: LD_ADDR_EXP 51
65044: PUSH
65045: LD_INT 1
65047: ST_TO_ADDR
// if p3 = 3 then
65048: LD_VAR 0 3
65052: PUSH
65053: LD_INT 3
65055: EQUAL
65056: IFFALSE 65066
// sEngine := true ;
65058: LD_ADDR_EXP 53
65062: PUSH
65063: LD_INT 1
65065: ST_TO_ADDR
// if p3 = 4 then
65066: LD_VAR 0 3
65070: PUSH
65071: LD_INT 4
65073: EQUAL
65074: IFFALSE 65084
// sSpec := true ;
65076: LD_ADDR_EXP 50
65080: PUSH
65081: LD_INT 1
65083: ST_TO_ADDR
// if p3 = 5 then
65084: LD_VAR 0 3
65088: PUSH
65089: LD_INT 5
65091: EQUAL
65092: IFFALSE 65102
// sLevel := true ;
65094: LD_ADDR_EXP 54
65098: PUSH
65099: LD_INT 1
65101: ST_TO_ADDR
// if p3 = 6 then
65102: LD_VAR 0 3
65106: PUSH
65107: LD_INT 6
65109: EQUAL
65110: IFFALSE 65120
// sArmoury := true ;
65112: LD_ADDR_EXP 55
65116: PUSH
65117: LD_INT 1
65119: ST_TO_ADDR
// if p3 = 7 then
65120: LD_VAR 0 3
65124: PUSH
65125: LD_INT 7
65127: EQUAL
65128: IFFALSE 65138
// sRadar := true ;
65130: LD_ADDR_EXP 56
65134: PUSH
65135: LD_INT 1
65137: ST_TO_ADDR
// if p3 = 8 then
65138: LD_VAR 0 3
65142: PUSH
65143: LD_INT 8
65145: EQUAL
65146: IFFALSE 65156
// sBunker := true ;
65148: LD_ADDR_EXP 57
65152: PUSH
65153: LD_INT 1
65155: ST_TO_ADDR
// if p3 = 9 then
65156: LD_VAR 0 3
65160: PUSH
65161: LD_INT 9
65163: EQUAL
65164: IFFALSE 65174
// sHack := true ;
65166: LD_ADDR_EXP 58
65170: PUSH
65171: LD_INT 1
65173: ST_TO_ADDR
// if p3 = 10 then
65174: LD_VAR 0 3
65178: PUSH
65179: LD_INT 10
65181: EQUAL
65182: IFFALSE 65192
// sFire := true ;
65184: LD_ADDR_EXP 59
65188: PUSH
65189: LD_INT 1
65191: ST_TO_ADDR
// if p3 = 11 then
65192: LD_VAR 0 3
65196: PUSH
65197: LD_INT 11
65199: EQUAL
65200: IFFALSE 65210
// sRefresh := true ;
65202: LD_ADDR_EXP 60
65206: PUSH
65207: LD_INT 1
65209: ST_TO_ADDR
// if p3 = 12 then
65210: LD_VAR 0 3
65214: PUSH
65215: LD_INT 12
65217: EQUAL
65218: IFFALSE 65228
// sExp := true ;
65220: LD_ADDR_EXP 61
65224: PUSH
65225: LD_INT 1
65227: ST_TO_ADDR
// if p3 = 13 then
65228: LD_VAR 0 3
65232: PUSH
65233: LD_INT 13
65235: EQUAL
65236: IFFALSE 65246
// sDepot := true ;
65238: LD_ADDR_EXP 62
65242: PUSH
65243: LD_INT 1
65245: ST_TO_ADDR
// if p3 = 14 then
65246: LD_VAR 0 3
65250: PUSH
65251: LD_INT 14
65253: EQUAL
65254: IFFALSE 65264
// sFlag := true ;
65256: LD_ADDR_EXP 63
65260: PUSH
65261: LD_INT 1
65263: ST_TO_ADDR
// if p3 = 15 then
65264: LD_VAR 0 3
65268: PUSH
65269: LD_INT 15
65271: EQUAL
65272: IFFALSE 65282
// sKamikadze := true ;
65274: LD_ADDR_EXP 71
65278: PUSH
65279: LD_INT 1
65281: ST_TO_ADDR
// if p3 = 16 then
65282: LD_VAR 0 3
65286: PUSH
65287: LD_INT 16
65289: EQUAL
65290: IFFALSE 65300
// sTroll := true ;
65292: LD_ADDR_EXP 72
65296: PUSH
65297: LD_INT 1
65299: ST_TO_ADDR
// if p3 = 17 then
65300: LD_VAR 0 3
65304: PUSH
65305: LD_INT 17
65307: EQUAL
65308: IFFALSE 65318
// sSlow := true ;
65310: LD_ADDR_EXP 73
65314: PUSH
65315: LD_INT 1
65317: ST_TO_ADDR
// if p3 = 18 then
65318: LD_VAR 0 3
65322: PUSH
65323: LD_INT 18
65325: EQUAL
65326: IFFALSE 65336
// sLack := true ;
65328: LD_ADDR_EXP 74
65332: PUSH
65333: LD_INT 1
65335: ST_TO_ADDR
// if p3 = 19 then
65336: LD_VAR 0 3
65340: PUSH
65341: LD_INT 19
65343: EQUAL
65344: IFFALSE 65354
// sTank := true ;
65346: LD_ADDR_EXP 76
65350: PUSH
65351: LD_INT 1
65353: ST_TO_ADDR
// if p3 = 20 then
65354: LD_VAR 0 3
65358: PUSH
65359: LD_INT 20
65361: EQUAL
65362: IFFALSE 65372
// sRemote := true ;
65364: LD_ADDR_EXP 77
65368: PUSH
65369: LD_INT 1
65371: ST_TO_ADDR
// if p3 = 21 then
65372: LD_VAR 0 3
65376: PUSH
65377: LD_INT 21
65379: EQUAL
65380: IFFALSE 65390
// sPowell := true ;
65382: LD_ADDR_EXP 78
65386: PUSH
65387: LD_INT 1
65389: ST_TO_ADDR
// if p3 = 22 then
65390: LD_VAR 0 3
65394: PUSH
65395: LD_INT 22
65397: EQUAL
65398: IFFALSE 65408
// sTeleport := true ;
65400: LD_ADDR_EXP 81
65404: PUSH
65405: LD_INT 1
65407: ST_TO_ADDR
// if p3 = 23 then
65408: LD_VAR 0 3
65412: PUSH
65413: LD_INT 23
65415: EQUAL
65416: IFFALSE 65426
// sOilTower := true ;
65418: LD_ADDR_EXP 83
65422: PUSH
65423: LD_INT 1
65425: ST_TO_ADDR
// if p3 = 24 then
65426: LD_VAR 0 3
65430: PUSH
65431: LD_INT 24
65433: EQUAL
65434: IFFALSE 65444
// sShovel := true ;
65436: LD_ADDR_EXP 84
65440: PUSH
65441: LD_INT 1
65443: ST_TO_ADDR
// if p3 = 25 then
65444: LD_VAR 0 3
65448: PUSH
65449: LD_INT 25
65451: EQUAL
65452: IFFALSE 65462
// sSheik := true ;
65454: LD_ADDR_EXP 85
65458: PUSH
65459: LD_INT 1
65461: ST_TO_ADDR
// if p3 = 26 then
65462: LD_VAR 0 3
65466: PUSH
65467: LD_INT 26
65469: EQUAL
65470: IFFALSE 65480
// sEarthquake := true ;
65472: LD_ADDR_EXP 87
65476: PUSH
65477: LD_INT 1
65479: ST_TO_ADDR
// if p3 = 27 then
65480: LD_VAR 0 3
65484: PUSH
65485: LD_INT 27
65487: EQUAL
65488: IFFALSE 65498
// sAI := true ;
65490: LD_ADDR_EXP 88
65494: PUSH
65495: LD_INT 1
65497: ST_TO_ADDR
// if p3 = 28 then
65498: LD_VAR 0 3
65502: PUSH
65503: LD_INT 28
65505: EQUAL
65506: IFFALSE 65516
// sCargo := true ;
65508: LD_ADDR_EXP 91
65512: PUSH
65513: LD_INT 1
65515: ST_TO_ADDR
// if p3 = 29 then
65516: LD_VAR 0 3
65520: PUSH
65521: LD_INT 29
65523: EQUAL
65524: IFFALSE 65534
// sDLaser := true ;
65526: LD_ADDR_EXP 92
65530: PUSH
65531: LD_INT 1
65533: ST_TO_ADDR
// if p3 = 30 then
65534: LD_VAR 0 3
65538: PUSH
65539: LD_INT 30
65541: EQUAL
65542: IFFALSE 65552
// sExchange := true ;
65544: LD_ADDR_EXP 93
65548: PUSH
65549: LD_INT 1
65551: ST_TO_ADDR
// if p3 = 31 then
65552: LD_VAR 0 3
65556: PUSH
65557: LD_INT 31
65559: EQUAL
65560: IFFALSE 65570
// sFac := true ;
65562: LD_ADDR_EXP 94
65566: PUSH
65567: LD_INT 1
65569: ST_TO_ADDR
// if p3 = 32 then
65570: LD_VAR 0 3
65574: PUSH
65575: LD_INT 32
65577: EQUAL
65578: IFFALSE 65588
// sPower := true ;
65580: LD_ADDR_EXP 95
65584: PUSH
65585: LD_INT 1
65587: ST_TO_ADDR
// if p3 = 33 then
65588: LD_VAR 0 3
65592: PUSH
65593: LD_INT 33
65595: EQUAL
65596: IFFALSE 65606
// sRandom := true ;
65598: LD_ADDR_EXP 96
65602: PUSH
65603: LD_INT 1
65605: ST_TO_ADDR
// if p3 = 34 then
65606: LD_VAR 0 3
65610: PUSH
65611: LD_INT 34
65613: EQUAL
65614: IFFALSE 65624
// sShield := true ;
65616: LD_ADDR_EXP 97
65620: PUSH
65621: LD_INT 1
65623: ST_TO_ADDR
// if p3 = 35 then
65624: LD_VAR 0 3
65628: PUSH
65629: LD_INT 35
65631: EQUAL
65632: IFFALSE 65642
// sTime := true ;
65634: LD_ADDR_EXP 98
65638: PUSH
65639: LD_INT 1
65641: ST_TO_ADDR
// if p3 = 36 then
65642: LD_VAR 0 3
65646: PUSH
65647: LD_INT 36
65649: EQUAL
65650: IFFALSE 65660
// sTools := true ;
65652: LD_ADDR_EXP 99
65656: PUSH
65657: LD_INT 1
65659: ST_TO_ADDR
// if p3 = 101 then
65660: LD_VAR 0 3
65664: PUSH
65665: LD_INT 101
65667: EQUAL
65668: IFFALSE 65678
// sSold := true ;
65670: LD_ADDR_EXP 64
65674: PUSH
65675: LD_INT 1
65677: ST_TO_ADDR
// if p3 = 102 then
65678: LD_VAR 0 3
65682: PUSH
65683: LD_INT 102
65685: EQUAL
65686: IFFALSE 65696
// sDiff := true ;
65688: LD_ADDR_EXP 65
65692: PUSH
65693: LD_INT 1
65695: ST_TO_ADDR
// if p3 = 103 then
65696: LD_VAR 0 3
65700: PUSH
65701: LD_INT 103
65703: EQUAL
65704: IFFALSE 65714
// sFog := true ;
65706: LD_ADDR_EXP 68
65710: PUSH
65711: LD_INT 1
65713: ST_TO_ADDR
// if p3 = 104 then
65714: LD_VAR 0 3
65718: PUSH
65719: LD_INT 104
65721: EQUAL
65722: IFFALSE 65732
// sReset := true ;
65724: LD_ADDR_EXP 69
65728: PUSH
65729: LD_INT 1
65731: ST_TO_ADDR
// if p3 = 105 then
65732: LD_VAR 0 3
65736: PUSH
65737: LD_INT 105
65739: EQUAL
65740: IFFALSE 65750
// sSun := true ;
65742: LD_ADDR_EXP 70
65746: PUSH
65747: LD_INT 1
65749: ST_TO_ADDR
// if p3 = 106 then
65750: LD_VAR 0 3
65754: PUSH
65755: LD_INT 106
65757: EQUAL
65758: IFFALSE 65768
// sTiger := true ;
65760: LD_ADDR_EXP 66
65764: PUSH
65765: LD_INT 1
65767: ST_TO_ADDR
// if p3 = 107 then
65768: LD_VAR 0 3
65772: PUSH
65773: LD_INT 107
65775: EQUAL
65776: IFFALSE 65786
// sBomb := true ;
65778: LD_ADDR_EXP 67
65782: PUSH
65783: LD_INT 1
65785: ST_TO_ADDR
// if p3 = 108 then
65786: LD_VAR 0 3
65790: PUSH
65791: LD_INT 108
65793: EQUAL
65794: IFFALSE 65804
// sWound := true ;
65796: LD_ADDR_EXP 75
65800: PUSH
65801: LD_INT 1
65803: ST_TO_ADDR
// if p3 = 109 then
65804: LD_VAR 0 3
65808: PUSH
65809: LD_INT 109
65811: EQUAL
65812: IFFALSE 65822
// sBetray := true ;
65814: LD_ADDR_EXP 79
65818: PUSH
65819: LD_INT 1
65821: ST_TO_ADDR
// if p3 = 110 then
65822: LD_VAR 0 3
65826: PUSH
65827: LD_INT 110
65829: EQUAL
65830: IFFALSE 65840
// sContamin := true ;
65832: LD_ADDR_EXP 80
65836: PUSH
65837: LD_INT 1
65839: ST_TO_ADDR
// if p3 = 111 then
65840: LD_VAR 0 3
65844: PUSH
65845: LD_INT 111
65847: EQUAL
65848: IFFALSE 65858
// sOil := true ;
65850: LD_ADDR_EXP 82
65854: PUSH
65855: LD_INT 1
65857: ST_TO_ADDR
// if p3 = 112 then
65858: LD_VAR 0 3
65862: PUSH
65863: LD_INT 112
65865: EQUAL
65866: IFFALSE 65876
// sStu := true ;
65868: LD_ADDR_EXP 86
65872: PUSH
65873: LD_INT 1
65875: ST_TO_ADDR
// if p3 = 113 then
65876: LD_VAR 0 3
65880: PUSH
65881: LD_INT 113
65883: EQUAL
65884: IFFALSE 65894
// sBazooka := true ;
65886: LD_ADDR_EXP 89
65890: PUSH
65891: LD_INT 1
65893: ST_TO_ADDR
// if p3 = 114 then
65894: LD_VAR 0 3
65898: PUSH
65899: LD_INT 114
65901: EQUAL
65902: IFFALSE 65912
// sMortar := true ;
65904: LD_ADDR_EXP 90
65908: PUSH
65909: LD_INT 1
65911: ST_TO_ADDR
// if p3 = 115 then
65912: LD_VAR 0 3
65916: PUSH
65917: LD_INT 115
65919: EQUAL
65920: IFFALSE 65930
// sRanger := true ;
65922: LD_ADDR_EXP 100
65926: PUSH
65927: LD_INT 1
65929: ST_TO_ADDR
// if p3 = 116 then
65930: LD_VAR 0 3
65934: PUSH
65935: LD_INT 116
65937: EQUAL
65938: IFFALSE 65948
// sComputer := true ;
65940: LD_ADDR_EXP 101
65944: PUSH
65945: LD_INT 1
65947: ST_TO_ADDR
// if p3 = 117 then
65948: LD_VAR 0 3
65952: PUSH
65953: LD_INT 117
65955: EQUAL
65956: IFFALSE 65966
// s30 := true ;
65958: LD_ADDR_EXP 102
65962: PUSH
65963: LD_INT 1
65965: ST_TO_ADDR
// if p3 = 118 then
65966: LD_VAR 0 3
65970: PUSH
65971: LD_INT 118
65973: EQUAL
65974: IFFALSE 65984
// s60 := true ;
65976: LD_ADDR_EXP 103
65980: PUSH
65981: LD_INT 1
65983: ST_TO_ADDR
// end ; if p2 = hack_mode then
65984: LD_VAR 0 2
65988: PUSH
65989: LD_INT 101
65991: EQUAL
65992: IFFALSE 66120
// begin case p3 of 1 :
65994: LD_VAR 0 3
65998: PUSH
65999: LD_INT 1
66001: DOUBLE
66002: EQUAL
66003: IFTRUE 66007
66005: GO 66014
66007: POP
// hHackUnlimitedResources ; 2 :
66008: CALL 78267 0 0
66012: GO 66120
66014: LD_INT 2
66016: DOUBLE
66017: EQUAL
66018: IFTRUE 66022
66020: GO 66029
66022: POP
// hHackSetLevel10 ; 3 :
66023: CALL 78400 0 0
66027: GO 66120
66029: LD_INT 3
66031: DOUBLE
66032: EQUAL
66033: IFTRUE 66037
66035: GO 66044
66037: POP
// hHackSetLevel10YourUnits ; 4 :
66038: CALL 78485 0 0
66042: GO 66120
66044: LD_INT 4
66046: DOUBLE
66047: EQUAL
66048: IFTRUE 66052
66050: GO 66059
66052: POP
// hHackInvincible ; 5 :
66053: CALL 78933 0 0
66057: GO 66120
66059: LD_INT 5
66061: DOUBLE
66062: EQUAL
66063: IFTRUE 66067
66065: GO 66074
66067: POP
// hHackInvisible ; 6 :
66068: CALL 79044 0 0
66072: GO 66120
66074: LD_INT 6
66076: DOUBLE
66077: EQUAL
66078: IFTRUE 66082
66080: GO 66089
66082: POP
// hHackChangeYourSide ; 7 :
66083: CALL 79101 0 0
66087: GO 66120
66089: LD_INT 7
66091: DOUBLE
66092: EQUAL
66093: IFTRUE 66097
66095: GO 66104
66097: POP
// hHackChangeUnitSide ; 8 :
66098: CALL 79143 0 0
66102: GO 66120
66104: LD_INT 8
66106: DOUBLE
66107: EQUAL
66108: IFTRUE 66112
66110: GO 66119
66112: POP
// hHackFog ; end ;
66113: CALL 79244 0 0
66117: GO 66120
66119: POP
// end ; if p2 = game_save_mode then
66120: LD_VAR 0 2
66124: PUSH
66125: LD_INT 102
66127: EQUAL
66128: IFFALSE 66183
// begin if p3 = 1 then
66130: LD_VAR 0 3
66134: PUSH
66135: LD_INT 1
66137: EQUAL
66138: IFFALSE 66150
// globalGameSaveCounter := p4 ;
66140: LD_ADDR_EXP 46
66144: PUSH
66145: LD_VAR 0 4
66149: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
66150: LD_VAR 0 3
66154: PUSH
66155: LD_INT 2
66157: EQUAL
66158: PUSH
66159: LD_EXP 46
66163: AND
66164: IFFALSE 66183
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66166: LD_STRING setGameSaveCounter(
66168: PUSH
66169: LD_EXP 46
66173: STR
66174: PUSH
66175: LD_STRING )
66177: STR
66178: PPUSH
66179: CALL_OW 559
// end ; end ;
66183: LD_VAR 0 7
66187: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
66188: LD_INT 0
66190: PPUSH
// streamModeActive := false ;
66191: LD_ADDR_EXP 47
66195: PUSH
66196: LD_INT 0
66198: ST_TO_ADDR
// normalCounter := 36 ;
66199: LD_ADDR_EXP 48
66203: PUSH
66204: LD_INT 36
66206: ST_TO_ADDR
// hardcoreCounter := 18 ;
66207: LD_ADDR_EXP 49
66211: PUSH
66212: LD_INT 18
66214: ST_TO_ADDR
// sRocket := false ;
66215: LD_ADDR_EXP 52
66219: PUSH
66220: LD_INT 0
66222: ST_TO_ADDR
// sSpeed := false ;
66223: LD_ADDR_EXP 51
66227: PUSH
66228: LD_INT 0
66230: ST_TO_ADDR
// sEngine := false ;
66231: LD_ADDR_EXP 53
66235: PUSH
66236: LD_INT 0
66238: ST_TO_ADDR
// sSpec := false ;
66239: LD_ADDR_EXP 50
66243: PUSH
66244: LD_INT 0
66246: ST_TO_ADDR
// sLevel := false ;
66247: LD_ADDR_EXP 54
66251: PUSH
66252: LD_INT 0
66254: ST_TO_ADDR
// sArmoury := false ;
66255: LD_ADDR_EXP 55
66259: PUSH
66260: LD_INT 0
66262: ST_TO_ADDR
// sRadar := false ;
66263: LD_ADDR_EXP 56
66267: PUSH
66268: LD_INT 0
66270: ST_TO_ADDR
// sBunker := false ;
66271: LD_ADDR_EXP 57
66275: PUSH
66276: LD_INT 0
66278: ST_TO_ADDR
// sHack := false ;
66279: LD_ADDR_EXP 58
66283: PUSH
66284: LD_INT 0
66286: ST_TO_ADDR
// sFire := false ;
66287: LD_ADDR_EXP 59
66291: PUSH
66292: LD_INT 0
66294: ST_TO_ADDR
// sRefresh := false ;
66295: LD_ADDR_EXP 60
66299: PUSH
66300: LD_INT 0
66302: ST_TO_ADDR
// sExp := false ;
66303: LD_ADDR_EXP 61
66307: PUSH
66308: LD_INT 0
66310: ST_TO_ADDR
// sDepot := false ;
66311: LD_ADDR_EXP 62
66315: PUSH
66316: LD_INT 0
66318: ST_TO_ADDR
// sFlag := false ;
66319: LD_ADDR_EXP 63
66323: PUSH
66324: LD_INT 0
66326: ST_TO_ADDR
// sKamikadze := false ;
66327: LD_ADDR_EXP 71
66331: PUSH
66332: LD_INT 0
66334: ST_TO_ADDR
// sTroll := false ;
66335: LD_ADDR_EXP 72
66339: PUSH
66340: LD_INT 0
66342: ST_TO_ADDR
// sSlow := false ;
66343: LD_ADDR_EXP 73
66347: PUSH
66348: LD_INT 0
66350: ST_TO_ADDR
// sLack := false ;
66351: LD_ADDR_EXP 74
66355: PUSH
66356: LD_INT 0
66358: ST_TO_ADDR
// sTank := false ;
66359: LD_ADDR_EXP 76
66363: PUSH
66364: LD_INT 0
66366: ST_TO_ADDR
// sRemote := false ;
66367: LD_ADDR_EXP 77
66371: PUSH
66372: LD_INT 0
66374: ST_TO_ADDR
// sPowell := false ;
66375: LD_ADDR_EXP 78
66379: PUSH
66380: LD_INT 0
66382: ST_TO_ADDR
// sTeleport := false ;
66383: LD_ADDR_EXP 81
66387: PUSH
66388: LD_INT 0
66390: ST_TO_ADDR
// sOilTower := false ;
66391: LD_ADDR_EXP 83
66395: PUSH
66396: LD_INT 0
66398: ST_TO_ADDR
// sShovel := false ;
66399: LD_ADDR_EXP 84
66403: PUSH
66404: LD_INT 0
66406: ST_TO_ADDR
// sSheik := false ;
66407: LD_ADDR_EXP 85
66411: PUSH
66412: LD_INT 0
66414: ST_TO_ADDR
// sEarthquake := false ;
66415: LD_ADDR_EXP 87
66419: PUSH
66420: LD_INT 0
66422: ST_TO_ADDR
// sAI := false ;
66423: LD_ADDR_EXP 88
66427: PUSH
66428: LD_INT 0
66430: ST_TO_ADDR
// sCargo := false ;
66431: LD_ADDR_EXP 91
66435: PUSH
66436: LD_INT 0
66438: ST_TO_ADDR
// sDLaser := false ;
66439: LD_ADDR_EXP 92
66443: PUSH
66444: LD_INT 0
66446: ST_TO_ADDR
// sExchange := false ;
66447: LD_ADDR_EXP 93
66451: PUSH
66452: LD_INT 0
66454: ST_TO_ADDR
// sFac := false ;
66455: LD_ADDR_EXP 94
66459: PUSH
66460: LD_INT 0
66462: ST_TO_ADDR
// sPower := false ;
66463: LD_ADDR_EXP 95
66467: PUSH
66468: LD_INT 0
66470: ST_TO_ADDR
// sRandom := false ;
66471: LD_ADDR_EXP 96
66475: PUSH
66476: LD_INT 0
66478: ST_TO_ADDR
// sShield := false ;
66479: LD_ADDR_EXP 97
66483: PUSH
66484: LD_INT 0
66486: ST_TO_ADDR
// sTime := false ;
66487: LD_ADDR_EXP 98
66491: PUSH
66492: LD_INT 0
66494: ST_TO_ADDR
// sTools := false ;
66495: LD_ADDR_EXP 99
66499: PUSH
66500: LD_INT 0
66502: ST_TO_ADDR
// sSold := false ;
66503: LD_ADDR_EXP 64
66507: PUSH
66508: LD_INT 0
66510: ST_TO_ADDR
// sDiff := false ;
66511: LD_ADDR_EXP 65
66515: PUSH
66516: LD_INT 0
66518: ST_TO_ADDR
// sFog := false ;
66519: LD_ADDR_EXP 68
66523: PUSH
66524: LD_INT 0
66526: ST_TO_ADDR
// sReset := false ;
66527: LD_ADDR_EXP 69
66531: PUSH
66532: LD_INT 0
66534: ST_TO_ADDR
// sSun := false ;
66535: LD_ADDR_EXP 70
66539: PUSH
66540: LD_INT 0
66542: ST_TO_ADDR
// sTiger := false ;
66543: LD_ADDR_EXP 66
66547: PUSH
66548: LD_INT 0
66550: ST_TO_ADDR
// sBomb := false ;
66551: LD_ADDR_EXP 67
66555: PUSH
66556: LD_INT 0
66558: ST_TO_ADDR
// sWound := false ;
66559: LD_ADDR_EXP 75
66563: PUSH
66564: LD_INT 0
66566: ST_TO_ADDR
// sBetray := false ;
66567: LD_ADDR_EXP 79
66571: PUSH
66572: LD_INT 0
66574: ST_TO_ADDR
// sContamin := false ;
66575: LD_ADDR_EXP 80
66579: PUSH
66580: LD_INT 0
66582: ST_TO_ADDR
// sOil := false ;
66583: LD_ADDR_EXP 82
66587: PUSH
66588: LD_INT 0
66590: ST_TO_ADDR
// sStu := false ;
66591: LD_ADDR_EXP 86
66595: PUSH
66596: LD_INT 0
66598: ST_TO_ADDR
// sBazooka := false ;
66599: LD_ADDR_EXP 89
66603: PUSH
66604: LD_INT 0
66606: ST_TO_ADDR
// sMortar := false ;
66607: LD_ADDR_EXP 90
66611: PUSH
66612: LD_INT 0
66614: ST_TO_ADDR
// sRanger := false ;
66615: LD_ADDR_EXP 100
66619: PUSH
66620: LD_INT 0
66622: ST_TO_ADDR
// sComputer := false ;
66623: LD_ADDR_EXP 101
66627: PUSH
66628: LD_INT 0
66630: ST_TO_ADDR
// s30 := false ;
66631: LD_ADDR_EXP 102
66635: PUSH
66636: LD_INT 0
66638: ST_TO_ADDR
// s60 := false ;
66639: LD_ADDR_EXP 103
66643: PUSH
66644: LD_INT 0
66646: ST_TO_ADDR
// end ;
66647: LD_VAR 0 1
66651: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66652: LD_INT 0
66654: PPUSH
66655: PPUSH
66656: PPUSH
66657: PPUSH
66658: PPUSH
66659: PPUSH
66660: PPUSH
// result := [ ] ;
66661: LD_ADDR_VAR 0 2
66665: PUSH
66666: EMPTY
66667: ST_TO_ADDR
// if campaign_id = 1 then
66668: LD_OWVAR 69
66672: PUSH
66673: LD_INT 1
66675: EQUAL
66676: IFFALSE 69842
// begin case mission_number of 1 :
66678: LD_OWVAR 70
66682: PUSH
66683: LD_INT 1
66685: DOUBLE
66686: EQUAL
66687: IFTRUE 66691
66689: GO 66767
66691: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66692: LD_ADDR_VAR 0 2
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: LD_INT 4
66702: PUSH
66703: LD_INT 11
66705: PUSH
66706: LD_INT 12
66708: PUSH
66709: LD_INT 15
66711: PUSH
66712: LD_INT 16
66714: PUSH
66715: LD_INT 22
66717: PUSH
66718: LD_INT 23
66720: PUSH
66721: LD_INT 26
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 101
66737: PUSH
66738: LD_INT 102
66740: PUSH
66741: LD_INT 106
66743: PUSH
66744: LD_INT 116
66746: PUSH
66747: LD_INT 117
66749: PUSH
66750: LD_INT 118
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: ST_TO_ADDR
66765: GO 69840
66767: LD_INT 2
66769: DOUBLE
66770: EQUAL
66771: IFTRUE 66775
66773: GO 66859
66775: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66776: LD_ADDR_VAR 0 2
66780: PUSH
66781: LD_INT 2
66783: PUSH
66784: LD_INT 4
66786: PUSH
66787: LD_INT 11
66789: PUSH
66790: LD_INT 12
66792: PUSH
66793: LD_INT 15
66795: PUSH
66796: LD_INT 16
66798: PUSH
66799: LD_INT 22
66801: PUSH
66802: LD_INT 23
66804: PUSH
66805: LD_INT 26
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 101
66821: PUSH
66822: LD_INT 102
66824: PUSH
66825: LD_INT 105
66827: PUSH
66828: LD_INT 106
66830: PUSH
66831: LD_INT 108
66833: PUSH
66834: LD_INT 116
66836: PUSH
66837: LD_INT 117
66839: PUSH
66840: LD_INT 118
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: ST_TO_ADDR
66857: GO 69840
66859: LD_INT 3
66861: DOUBLE
66862: EQUAL
66863: IFTRUE 66867
66865: GO 66955
66867: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66868: LD_ADDR_VAR 0 2
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: LD_INT 4
66878: PUSH
66879: LD_INT 5
66881: PUSH
66882: LD_INT 11
66884: PUSH
66885: LD_INT 12
66887: PUSH
66888: LD_INT 15
66890: PUSH
66891: LD_INT 16
66893: PUSH
66894: LD_INT 22
66896: PUSH
66897: LD_INT 26
66899: PUSH
66900: LD_INT 36
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 101
66917: PUSH
66918: LD_INT 102
66920: PUSH
66921: LD_INT 105
66923: PUSH
66924: LD_INT 106
66926: PUSH
66927: LD_INT 108
66929: PUSH
66930: LD_INT 116
66932: PUSH
66933: LD_INT 117
66935: PUSH
66936: LD_INT 118
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: ST_TO_ADDR
66953: GO 69840
66955: LD_INT 4
66957: DOUBLE
66958: EQUAL
66959: IFTRUE 66963
66961: GO 67059
66963: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66964: LD_ADDR_VAR 0 2
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: LD_INT 5
66977: PUSH
66978: LD_INT 8
66980: PUSH
66981: LD_INT 11
66983: PUSH
66984: LD_INT 12
66986: PUSH
66987: LD_INT 15
66989: PUSH
66990: LD_INT 16
66992: PUSH
66993: LD_INT 22
66995: PUSH
66996: LD_INT 23
66998: PUSH
66999: LD_INT 26
67001: PUSH
67002: LD_INT 36
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 101
67021: PUSH
67022: LD_INT 102
67024: PUSH
67025: LD_INT 105
67027: PUSH
67028: LD_INT 106
67030: PUSH
67031: LD_INT 108
67033: PUSH
67034: LD_INT 116
67036: PUSH
67037: LD_INT 117
67039: PUSH
67040: LD_INT 118
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: ST_TO_ADDR
67057: GO 69840
67059: LD_INT 5
67061: DOUBLE
67062: EQUAL
67063: IFTRUE 67067
67065: GO 67179
67067: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67068: LD_ADDR_VAR 0 2
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: LD_INT 4
67078: PUSH
67079: LD_INT 5
67081: PUSH
67082: LD_INT 6
67084: PUSH
67085: LD_INT 8
67087: PUSH
67088: LD_INT 11
67090: PUSH
67091: LD_INT 12
67093: PUSH
67094: LD_INT 15
67096: PUSH
67097: LD_INT 16
67099: PUSH
67100: LD_INT 22
67102: PUSH
67103: LD_INT 23
67105: PUSH
67106: LD_INT 25
67108: PUSH
67109: LD_INT 26
67111: PUSH
67112: LD_INT 36
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 101
67133: PUSH
67134: LD_INT 102
67136: PUSH
67137: LD_INT 105
67139: PUSH
67140: LD_INT 106
67142: PUSH
67143: LD_INT 108
67145: PUSH
67146: LD_INT 109
67148: PUSH
67149: LD_INT 112
67151: PUSH
67152: LD_INT 116
67154: PUSH
67155: LD_INT 117
67157: PUSH
67158: LD_INT 118
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: ST_TO_ADDR
67177: GO 69840
67179: LD_INT 6
67181: DOUBLE
67182: EQUAL
67183: IFTRUE 67187
67185: GO 67319
67187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
67188: LD_ADDR_VAR 0 2
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: LD_INT 5
67201: PUSH
67202: LD_INT 6
67204: PUSH
67205: LD_INT 8
67207: PUSH
67208: LD_INT 11
67210: PUSH
67211: LD_INT 12
67213: PUSH
67214: LD_INT 15
67216: PUSH
67217: LD_INT 16
67219: PUSH
67220: LD_INT 20
67222: PUSH
67223: LD_INT 21
67225: PUSH
67226: LD_INT 22
67228: PUSH
67229: LD_INT 23
67231: PUSH
67232: LD_INT 25
67234: PUSH
67235: LD_INT 26
67237: PUSH
67238: LD_INT 30
67240: PUSH
67241: LD_INT 31
67243: PUSH
67244: LD_INT 32
67246: PUSH
67247: LD_INT 36
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 101
67273: PUSH
67274: LD_INT 102
67276: PUSH
67277: LD_INT 105
67279: PUSH
67280: LD_INT 106
67282: PUSH
67283: LD_INT 108
67285: PUSH
67286: LD_INT 109
67288: PUSH
67289: LD_INT 112
67291: PUSH
67292: LD_INT 116
67294: PUSH
67295: LD_INT 117
67297: PUSH
67298: LD_INT 118
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: ST_TO_ADDR
67317: GO 69840
67319: LD_INT 7
67321: DOUBLE
67322: EQUAL
67323: IFTRUE 67327
67325: GO 67439
67327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
67328: LD_ADDR_VAR 0 2
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: LD_INT 4
67338: PUSH
67339: LD_INT 5
67341: PUSH
67342: LD_INT 7
67344: PUSH
67345: LD_INT 11
67347: PUSH
67348: LD_INT 12
67350: PUSH
67351: LD_INT 15
67353: PUSH
67354: LD_INT 16
67356: PUSH
67357: LD_INT 20
67359: PUSH
67360: LD_INT 21
67362: PUSH
67363: LD_INT 22
67365: PUSH
67366: LD_INT 23
67368: PUSH
67369: LD_INT 25
67371: PUSH
67372: LD_INT 26
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 101
67393: PUSH
67394: LD_INT 102
67396: PUSH
67397: LD_INT 103
67399: PUSH
67400: LD_INT 105
67402: PUSH
67403: LD_INT 106
67405: PUSH
67406: LD_INT 108
67408: PUSH
67409: LD_INT 112
67411: PUSH
67412: LD_INT 116
67414: PUSH
67415: LD_INT 117
67417: PUSH
67418: LD_INT 118
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: ST_TO_ADDR
67437: GO 69840
67439: LD_INT 8
67441: DOUBLE
67442: EQUAL
67443: IFTRUE 67447
67445: GO 67587
67447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67448: LD_ADDR_VAR 0 2
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: LD_INT 4
67458: PUSH
67459: LD_INT 5
67461: PUSH
67462: LD_INT 6
67464: PUSH
67465: LD_INT 7
67467: PUSH
67468: LD_INT 8
67470: PUSH
67471: LD_INT 11
67473: PUSH
67474: LD_INT 12
67476: PUSH
67477: LD_INT 15
67479: PUSH
67480: LD_INT 16
67482: PUSH
67483: LD_INT 20
67485: PUSH
67486: LD_INT 21
67488: PUSH
67489: LD_INT 22
67491: PUSH
67492: LD_INT 23
67494: PUSH
67495: LD_INT 25
67497: PUSH
67498: LD_INT 26
67500: PUSH
67501: LD_INT 30
67503: PUSH
67504: LD_INT 31
67506: PUSH
67507: LD_INT 32
67509: PUSH
67510: LD_INT 36
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 101
67537: PUSH
67538: LD_INT 102
67540: PUSH
67541: LD_INT 103
67543: PUSH
67544: LD_INT 105
67546: PUSH
67547: LD_INT 106
67549: PUSH
67550: LD_INT 108
67552: PUSH
67553: LD_INT 109
67555: PUSH
67556: LD_INT 112
67558: PUSH
67559: LD_INT 116
67561: PUSH
67562: LD_INT 117
67564: PUSH
67565: LD_INT 118
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: ST_TO_ADDR
67585: GO 69840
67587: LD_INT 9
67589: DOUBLE
67590: EQUAL
67591: IFTRUE 67595
67593: GO 67743
67595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67596: LD_ADDR_VAR 0 2
67600: PUSH
67601: LD_INT 2
67603: PUSH
67604: LD_INT 4
67606: PUSH
67607: LD_INT 5
67609: PUSH
67610: LD_INT 6
67612: PUSH
67613: LD_INT 7
67615: PUSH
67616: LD_INT 8
67618: PUSH
67619: LD_INT 11
67621: PUSH
67622: LD_INT 12
67624: PUSH
67625: LD_INT 15
67627: PUSH
67628: LD_INT 16
67630: PUSH
67631: LD_INT 20
67633: PUSH
67634: LD_INT 21
67636: PUSH
67637: LD_INT 22
67639: PUSH
67640: LD_INT 23
67642: PUSH
67643: LD_INT 25
67645: PUSH
67646: LD_INT 26
67648: PUSH
67649: LD_INT 28
67651: PUSH
67652: LD_INT 30
67654: PUSH
67655: LD_INT 31
67657: PUSH
67658: LD_INT 32
67660: PUSH
67661: LD_INT 36
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 101
67689: PUSH
67690: LD_INT 102
67692: PUSH
67693: LD_INT 103
67695: PUSH
67696: LD_INT 105
67698: PUSH
67699: LD_INT 106
67701: PUSH
67702: LD_INT 108
67704: PUSH
67705: LD_INT 109
67707: PUSH
67708: LD_INT 112
67710: PUSH
67711: LD_INT 114
67713: PUSH
67714: LD_INT 116
67716: PUSH
67717: LD_INT 117
67719: PUSH
67720: LD_INT 118
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: ST_TO_ADDR
67741: GO 69840
67743: LD_INT 10
67745: DOUBLE
67746: EQUAL
67747: IFTRUE 67751
67749: GO 67947
67751: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67752: LD_ADDR_VAR 0 2
67756: PUSH
67757: LD_INT 2
67759: PUSH
67760: LD_INT 4
67762: PUSH
67763: LD_INT 5
67765: PUSH
67766: LD_INT 6
67768: PUSH
67769: LD_INT 7
67771: PUSH
67772: LD_INT 8
67774: PUSH
67775: LD_INT 9
67777: PUSH
67778: LD_INT 10
67780: PUSH
67781: LD_INT 11
67783: PUSH
67784: LD_INT 12
67786: PUSH
67787: LD_INT 13
67789: PUSH
67790: LD_INT 14
67792: PUSH
67793: LD_INT 15
67795: PUSH
67796: LD_INT 16
67798: PUSH
67799: LD_INT 17
67801: PUSH
67802: LD_INT 18
67804: PUSH
67805: LD_INT 19
67807: PUSH
67808: LD_INT 20
67810: PUSH
67811: LD_INT 21
67813: PUSH
67814: LD_INT 22
67816: PUSH
67817: LD_INT 23
67819: PUSH
67820: LD_INT 24
67822: PUSH
67823: LD_INT 25
67825: PUSH
67826: LD_INT 26
67828: PUSH
67829: LD_INT 28
67831: PUSH
67832: LD_INT 30
67834: PUSH
67835: LD_INT 31
67837: PUSH
67838: LD_INT 32
67840: PUSH
67841: LD_INT 36
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 101
67877: PUSH
67878: LD_INT 102
67880: PUSH
67881: LD_INT 103
67883: PUSH
67884: LD_INT 104
67886: PUSH
67887: LD_INT 105
67889: PUSH
67890: LD_INT 106
67892: PUSH
67893: LD_INT 107
67895: PUSH
67896: LD_INT 108
67898: PUSH
67899: LD_INT 109
67901: PUSH
67902: LD_INT 110
67904: PUSH
67905: LD_INT 111
67907: PUSH
67908: LD_INT 112
67910: PUSH
67911: LD_INT 114
67913: PUSH
67914: LD_INT 116
67916: PUSH
67917: LD_INT 117
67919: PUSH
67920: LD_INT 118
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: ST_TO_ADDR
67945: GO 69840
67947: LD_INT 11
67949: DOUBLE
67950: EQUAL
67951: IFTRUE 67955
67953: GO 68159
67955: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67956: LD_ADDR_VAR 0 2
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: LD_INT 3
67966: PUSH
67967: LD_INT 4
67969: PUSH
67970: LD_INT 5
67972: PUSH
67973: LD_INT 6
67975: PUSH
67976: LD_INT 7
67978: PUSH
67979: LD_INT 8
67981: PUSH
67982: LD_INT 9
67984: PUSH
67985: LD_INT 10
67987: PUSH
67988: LD_INT 11
67990: PUSH
67991: LD_INT 12
67993: PUSH
67994: LD_INT 13
67996: PUSH
67997: LD_INT 14
67999: PUSH
68000: LD_INT 15
68002: PUSH
68003: LD_INT 16
68005: PUSH
68006: LD_INT 17
68008: PUSH
68009: LD_INT 18
68011: PUSH
68012: LD_INT 19
68014: PUSH
68015: LD_INT 20
68017: PUSH
68018: LD_INT 21
68020: PUSH
68021: LD_INT 22
68023: PUSH
68024: LD_INT 23
68026: PUSH
68027: LD_INT 24
68029: PUSH
68030: LD_INT 25
68032: PUSH
68033: LD_INT 26
68035: PUSH
68036: LD_INT 28
68038: PUSH
68039: LD_INT 30
68041: PUSH
68042: LD_INT 31
68044: PUSH
68045: LD_INT 32
68047: PUSH
68048: LD_INT 34
68050: PUSH
68051: LD_INT 36
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 101
68089: PUSH
68090: LD_INT 102
68092: PUSH
68093: LD_INT 103
68095: PUSH
68096: LD_INT 104
68098: PUSH
68099: LD_INT 105
68101: PUSH
68102: LD_INT 106
68104: PUSH
68105: LD_INT 107
68107: PUSH
68108: LD_INT 108
68110: PUSH
68111: LD_INT 109
68113: PUSH
68114: LD_INT 110
68116: PUSH
68117: LD_INT 111
68119: PUSH
68120: LD_INT 112
68122: PUSH
68123: LD_INT 114
68125: PUSH
68126: LD_INT 116
68128: PUSH
68129: LD_INT 117
68131: PUSH
68132: LD_INT 118
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: ST_TO_ADDR
68157: GO 69840
68159: LD_INT 12
68161: DOUBLE
68162: EQUAL
68163: IFTRUE 68167
68165: GO 68387
68167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
68168: LD_ADDR_VAR 0 2
68172: PUSH
68173: LD_INT 1
68175: PUSH
68176: LD_INT 2
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: LD_INT 4
68184: PUSH
68185: LD_INT 5
68187: PUSH
68188: LD_INT 6
68190: PUSH
68191: LD_INT 7
68193: PUSH
68194: LD_INT 8
68196: PUSH
68197: LD_INT 9
68199: PUSH
68200: LD_INT 10
68202: PUSH
68203: LD_INT 11
68205: PUSH
68206: LD_INT 12
68208: PUSH
68209: LD_INT 13
68211: PUSH
68212: LD_INT 14
68214: PUSH
68215: LD_INT 15
68217: PUSH
68218: LD_INT 16
68220: PUSH
68221: LD_INT 17
68223: PUSH
68224: LD_INT 18
68226: PUSH
68227: LD_INT 19
68229: PUSH
68230: LD_INT 20
68232: PUSH
68233: LD_INT 21
68235: PUSH
68236: LD_INT 22
68238: PUSH
68239: LD_INT 23
68241: PUSH
68242: LD_INT 24
68244: PUSH
68245: LD_INT 25
68247: PUSH
68248: LD_INT 26
68250: PUSH
68251: LD_INT 27
68253: PUSH
68254: LD_INT 28
68256: PUSH
68257: LD_INT 30
68259: PUSH
68260: LD_INT 31
68262: PUSH
68263: LD_INT 32
68265: PUSH
68266: LD_INT 33
68268: PUSH
68269: LD_INT 34
68271: PUSH
68272: LD_INT 36
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 101
68313: PUSH
68314: LD_INT 102
68316: PUSH
68317: LD_INT 103
68319: PUSH
68320: LD_INT 104
68322: PUSH
68323: LD_INT 105
68325: PUSH
68326: LD_INT 106
68328: PUSH
68329: LD_INT 107
68331: PUSH
68332: LD_INT 108
68334: PUSH
68335: LD_INT 109
68337: PUSH
68338: LD_INT 110
68340: PUSH
68341: LD_INT 111
68343: PUSH
68344: LD_INT 112
68346: PUSH
68347: LD_INT 113
68349: PUSH
68350: LD_INT 114
68352: PUSH
68353: LD_INT 116
68355: PUSH
68356: LD_INT 117
68358: PUSH
68359: LD_INT 118
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: ST_TO_ADDR
68385: GO 69840
68387: LD_INT 13
68389: DOUBLE
68390: EQUAL
68391: IFTRUE 68395
68393: GO 68603
68395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
68396: LD_ADDR_VAR 0 2
68400: PUSH
68401: LD_INT 1
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: LD_INT 3
68409: PUSH
68410: LD_INT 4
68412: PUSH
68413: LD_INT 5
68415: PUSH
68416: LD_INT 8
68418: PUSH
68419: LD_INT 9
68421: PUSH
68422: LD_INT 10
68424: PUSH
68425: LD_INT 11
68427: PUSH
68428: LD_INT 12
68430: PUSH
68431: LD_INT 14
68433: PUSH
68434: LD_INT 15
68436: PUSH
68437: LD_INT 16
68439: PUSH
68440: LD_INT 17
68442: PUSH
68443: LD_INT 18
68445: PUSH
68446: LD_INT 19
68448: PUSH
68449: LD_INT 20
68451: PUSH
68452: LD_INT 21
68454: PUSH
68455: LD_INT 22
68457: PUSH
68458: LD_INT 23
68460: PUSH
68461: LD_INT 24
68463: PUSH
68464: LD_INT 25
68466: PUSH
68467: LD_INT 26
68469: PUSH
68470: LD_INT 27
68472: PUSH
68473: LD_INT 28
68475: PUSH
68476: LD_INT 30
68478: PUSH
68479: LD_INT 31
68481: PUSH
68482: LD_INT 32
68484: PUSH
68485: LD_INT 33
68487: PUSH
68488: LD_INT 34
68490: PUSH
68491: LD_INT 36
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 101
68529: PUSH
68530: LD_INT 102
68532: PUSH
68533: LD_INT 103
68535: PUSH
68536: LD_INT 104
68538: PUSH
68539: LD_INT 105
68541: PUSH
68542: LD_INT 106
68544: PUSH
68545: LD_INT 107
68547: PUSH
68548: LD_INT 108
68550: PUSH
68551: LD_INT 109
68553: PUSH
68554: LD_INT 110
68556: PUSH
68557: LD_INT 111
68559: PUSH
68560: LD_INT 112
68562: PUSH
68563: LD_INT 113
68565: PUSH
68566: LD_INT 114
68568: PUSH
68569: LD_INT 116
68571: PUSH
68572: LD_INT 117
68574: PUSH
68575: LD_INT 118
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: ST_TO_ADDR
68601: GO 69840
68603: LD_INT 14
68605: DOUBLE
68606: EQUAL
68607: IFTRUE 68611
68609: GO 68835
68611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68612: LD_ADDR_VAR 0 2
68616: PUSH
68617: LD_INT 1
68619: PUSH
68620: LD_INT 2
68622: PUSH
68623: LD_INT 3
68625: PUSH
68626: LD_INT 4
68628: PUSH
68629: LD_INT 5
68631: PUSH
68632: LD_INT 6
68634: PUSH
68635: LD_INT 7
68637: PUSH
68638: LD_INT 8
68640: PUSH
68641: LD_INT 9
68643: PUSH
68644: LD_INT 10
68646: PUSH
68647: LD_INT 11
68649: PUSH
68650: LD_INT 12
68652: PUSH
68653: LD_INT 13
68655: PUSH
68656: LD_INT 14
68658: PUSH
68659: LD_INT 15
68661: PUSH
68662: LD_INT 16
68664: PUSH
68665: LD_INT 17
68667: PUSH
68668: LD_INT 18
68670: PUSH
68671: LD_INT 19
68673: PUSH
68674: LD_INT 20
68676: PUSH
68677: LD_INT 21
68679: PUSH
68680: LD_INT 22
68682: PUSH
68683: LD_INT 23
68685: PUSH
68686: LD_INT 24
68688: PUSH
68689: LD_INT 25
68691: PUSH
68692: LD_INT 26
68694: PUSH
68695: LD_INT 27
68697: PUSH
68698: LD_INT 28
68700: PUSH
68701: LD_INT 29
68703: PUSH
68704: LD_INT 30
68706: PUSH
68707: LD_INT 31
68709: PUSH
68710: LD_INT 32
68712: PUSH
68713: LD_INT 33
68715: PUSH
68716: LD_INT 34
68718: PUSH
68719: LD_INT 36
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 101
68761: PUSH
68762: LD_INT 102
68764: PUSH
68765: LD_INT 103
68767: PUSH
68768: LD_INT 104
68770: PUSH
68771: LD_INT 105
68773: PUSH
68774: LD_INT 106
68776: PUSH
68777: LD_INT 107
68779: PUSH
68780: LD_INT 108
68782: PUSH
68783: LD_INT 109
68785: PUSH
68786: LD_INT 110
68788: PUSH
68789: LD_INT 111
68791: PUSH
68792: LD_INT 112
68794: PUSH
68795: LD_INT 113
68797: PUSH
68798: LD_INT 114
68800: PUSH
68801: LD_INT 116
68803: PUSH
68804: LD_INT 117
68806: PUSH
68807: LD_INT 118
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: ST_TO_ADDR
68833: GO 69840
68835: LD_INT 15
68837: DOUBLE
68838: EQUAL
68839: IFTRUE 68843
68841: GO 69067
68843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68844: LD_ADDR_VAR 0 2
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: LD_INT 4
68860: PUSH
68861: LD_INT 5
68863: PUSH
68864: LD_INT 6
68866: PUSH
68867: LD_INT 7
68869: PUSH
68870: LD_INT 8
68872: PUSH
68873: LD_INT 9
68875: PUSH
68876: LD_INT 10
68878: PUSH
68879: LD_INT 11
68881: PUSH
68882: LD_INT 12
68884: PUSH
68885: LD_INT 13
68887: PUSH
68888: LD_INT 14
68890: PUSH
68891: LD_INT 15
68893: PUSH
68894: LD_INT 16
68896: PUSH
68897: LD_INT 17
68899: PUSH
68900: LD_INT 18
68902: PUSH
68903: LD_INT 19
68905: PUSH
68906: LD_INT 20
68908: PUSH
68909: LD_INT 21
68911: PUSH
68912: LD_INT 22
68914: PUSH
68915: LD_INT 23
68917: PUSH
68918: LD_INT 24
68920: PUSH
68921: LD_INT 25
68923: PUSH
68924: LD_INT 26
68926: PUSH
68927: LD_INT 27
68929: PUSH
68930: LD_INT 28
68932: PUSH
68933: LD_INT 29
68935: PUSH
68936: LD_INT 30
68938: PUSH
68939: LD_INT 31
68941: PUSH
68942: LD_INT 32
68944: PUSH
68945: LD_INT 33
68947: PUSH
68948: LD_INT 34
68950: PUSH
68951: LD_INT 36
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 101
68993: PUSH
68994: LD_INT 102
68996: PUSH
68997: LD_INT 103
68999: PUSH
69000: LD_INT 104
69002: PUSH
69003: LD_INT 105
69005: PUSH
69006: LD_INT 106
69008: PUSH
69009: LD_INT 107
69011: PUSH
69012: LD_INT 108
69014: PUSH
69015: LD_INT 109
69017: PUSH
69018: LD_INT 110
69020: PUSH
69021: LD_INT 111
69023: PUSH
69024: LD_INT 112
69026: PUSH
69027: LD_INT 113
69029: PUSH
69030: LD_INT 114
69032: PUSH
69033: LD_INT 116
69035: PUSH
69036: LD_INT 117
69038: PUSH
69039: LD_INT 118
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: ST_TO_ADDR
69065: GO 69840
69067: LD_INT 16
69069: DOUBLE
69070: EQUAL
69071: IFTRUE 69075
69073: GO 69211
69075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69076: LD_ADDR_VAR 0 2
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: LD_INT 4
69086: PUSH
69087: LD_INT 5
69089: PUSH
69090: LD_INT 7
69092: PUSH
69093: LD_INT 11
69095: PUSH
69096: LD_INT 12
69098: PUSH
69099: LD_INT 15
69101: PUSH
69102: LD_INT 16
69104: PUSH
69105: LD_INT 20
69107: PUSH
69108: LD_INT 21
69110: PUSH
69111: LD_INT 22
69113: PUSH
69114: LD_INT 23
69116: PUSH
69117: LD_INT 25
69119: PUSH
69120: LD_INT 26
69122: PUSH
69123: LD_INT 30
69125: PUSH
69126: LD_INT 31
69128: PUSH
69129: LD_INT 32
69131: PUSH
69132: LD_INT 33
69134: PUSH
69135: LD_INT 34
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 101
69161: PUSH
69162: LD_INT 102
69164: PUSH
69165: LD_INT 103
69167: PUSH
69168: LD_INT 106
69170: PUSH
69171: LD_INT 108
69173: PUSH
69174: LD_INT 112
69176: PUSH
69177: LD_INT 113
69179: PUSH
69180: LD_INT 114
69182: PUSH
69183: LD_INT 116
69185: PUSH
69186: LD_INT 117
69188: PUSH
69189: LD_INT 118
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: ST_TO_ADDR
69209: GO 69840
69211: LD_INT 17
69213: DOUBLE
69214: EQUAL
69215: IFTRUE 69219
69217: GO 69443
69219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
69220: LD_ADDR_VAR 0 2
69224: PUSH
69225: LD_INT 1
69227: PUSH
69228: LD_INT 2
69230: PUSH
69231: LD_INT 3
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: LD_INT 5
69239: PUSH
69240: LD_INT 6
69242: PUSH
69243: LD_INT 7
69245: PUSH
69246: LD_INT 8
69248: PUSH
69249: LD_INT 9
69251: PUSH
69252: LD_INT 10
69254: PUSH
69255: LD_INT 11
69257: PUSH
69258: LD_INT 12
69260: PUSH
69261: LD_INT 13
69263: PUSH
69264: LD_INT 14
69266: PUSH
69267: LD_INT 15
69269: PUSH
69270: LD_INT 16
69272: PUSH
69273: LD_INT 17
69275: PUSH
69276: LD_INT 18
69278: PUSH
69279: LD_INT 19
69281: PUSH
69282: LD_INT 20
69284: PUSH
69285: LD_INT 21
69287: PUSH
69288: LD_INT 22
69290: PUSH
69291: LD_INT 23
69293: PUSH
69294: LD_INT 24
69296: PUSH
69297: LD_INT 25
69299: PUSH
69300: LD_INT 26
69302: PUSH
69303: LD_INT 27
69305: PUSH
69306: LD_INT 28
69308: PUSH
69309: LD_INT 29
69311: PUSH
69312: LD_INT 30
69314: PUSH
69315: LD_INT 31
69317: PUSH
69318: LD_INT 32
69320: PUSH
69321: LD_INT 33
69323: PUSH
69324: LD_INT 34
69326: PUSH
69327: LD_INT 36
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 101
69369: PUSH
69370: LD_INT 102
69372: PUSH
69373: LD_INT 103
69375: PUSH
69376: LD_INT 104
69378: PUSH
69379: LD_INT 105
69381: PUSH
69382: LD_INT 106
69384: PUSH
69385: LD_INT 107
69387: PUSH
69388: LD_INT 108
69390: PUSH
69391: LD_INT 109
69393: PUSH
69394: LD_INT 110
69396: PUSH
69397: LD_INT 111
69399: PUSH
69400: LD_INT 112
69402: PUSH
69403: LD_INT 113
69405: PUSH
69406: LD_INT 114
69408: PUSH
69409: LD_INT 116
69411: PUSH
69412: LD_INT 117
69414: PUSH
69415: LD_INT 118
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: ST_TO_ADDR
69441: GO 69840
69443: LD_INT 18
69445: DOUBLE
69446: EQUAL
69447: IFTRUE 69451
69449: GO 69599
69451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69452: LD_ADDR_VAR 0 2
69456: PUSH
69457: LD_INT 2
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: LD_INT 5
69465: PUSH
69466: LD_INT 7
69468: PUSH
69469: LD_INT 11
69471: PUSH
69472: LD_INT 12
69474: PUSH
69475: LD_INT 15
69477: PUSH
69478: LD_INT 16
69480: PUSH
69481: LD_INT 20
69483: PUSH
69484: LD_INT 21
69486: PUSH
69487: LD_INT 22
69489: PUSH
69490: LD_INT 23
69492: PUSH
69493: LD_INT 25
69495: PUSH
69496: LD_INT 26
69498: PUSH
69499: LD_INT 30
69501: PUSH
69502: LD_INT 31
69504: PUSH
69505: LD_INT 32
69507: PUSH
69508: LD_INT 33
69510: PUSH
69511: LD_INT 34
69513: PUSH
69514: LD_INT 35
69516: PUSH
69517: LD_INT 36
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 101
69545: PUSH
69546: LD_INT 102
69548: PUSH
69549: LD_INT 103
69551: PUSH
69552: LD_INT 106
69554: PUSH
69555: LD_INT 108
69557: PUSH
69558: LD_INT 112
69560: PUSH
69561: LD_INT 113
69563: PUSH
69564: LD_INT 114
69566: PUSH
69567: LD_INT 115
69569: PUSH
69570: LD_INT 116
69572: PUSH
69573: LD_INT 117
69575: PUSH
69576: LD_INT 118
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: ST_TO_ADDR
69597: GO 69840
69599: LD_INT 19
69601: DOUBLE
69602: EQUAL
69603: IFTRUE 69607
69605: GO 69839
69607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69608: LD_ADDR_VAR 0 2
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 3
69621: PUSH
69622: LD_INT 4
69624: PUSH
69625: LD_INT 5
69627: PUSH
69628: LD_INT 6
69630: PUSH
69631: LD_INT 7
69633: PUSH
69634: LD_INT 8
69636: PUSH
69637: LD_INT 9
69639: PUSH
69640: LD_INT 10
69642: PUSH
69643: LD_INT 11
69645: PUSH
69646: LD_INT 12
69648: PUSH
69649: LD_INT 13
69651: PUSH
69652: LD_INT 14
69654: PUSH
69655: LD_INT 15
69657: PUSH
69658: LD_INT 16
69660: PUSH
69661: LD_INT 17
69663: PUSH
69664: LD_INT 18
69666: PUSH
69667: LD_INT 19
69669: PUSH
69670: LD_INT 20
69672: PUSH
69673: LD_INT 21
69675: PUSH
69676: LD_INT 22
69678: PUSH
69679: LD_INT 23
69681: PUSH
69682: LD_INT 24
69684: PUSH
69685: LD_INT 25
69687: PUSH
69688: LD_INT 26
69690: PUSH
69691: LD_INT 27
69693: PUSH
69694: LD_INT 28
69696: PUSH
69697: LD_INT 29
69699: PUSH
69700: LD_INT 30
69702: PUSH
69703: LD_INT 31
69705: PUSH
69706: LD_INT 32
69708: PUSH
69709: LD_INT 33
69711: PUSH
69712: LD_INT 34
69714: PUSH
69715: LD_INT 35
69717: PUSH
69718: LD_INT 36
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 101
69761: PUSH
69762: LD_INT 102
69764: PUSH
69765: LD_INT 103
69767: PUSH
69768: LD_INT 104
69770: PUSH
69771: LD_INT 105
69773: PUSH
69774: LD_INT 106
69776: PUSH
69777: LD_INT 107
69779: PUSH
69780: LD_INT 108
69782: PUSH
69783: LD_INT 109
69785: PUSH
69786: LD_INT 110
69788: PUSH
69789: LD_INT 111
69791: PUSH
69792: LD_INT 112
69794: PUSH
69795: LD_INT 113
69797: PUSH
69798: LD_INT 114
69800: PUSH
69801: LD_INT 115
69803: PUSH
69804: LD_INT 116
69806: PUSH
69807: LD_INT 117
69809: PUSH
69810: LD_INT 118
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: ST_TO_ADDR
69837: GO 69840
69839: POP
// end else
69840: GO 70071
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69842: LD_ADDR_VAR 0 2
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: LD_INT 2
69852: PUSH
69853: LD_INT 3
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: LD_INT 5
69861: PUSH
69862: LD_INT 6
69864: PUSH
69865: LD_INT 7
69867: PUSH
69868: LD_INT 8
69870: PUSH
69871: LD_INT 9
69873: PUSH
69874: LD_INT 10
69876: PUSH
69877: LD_INT 11
69879: PUSH
69880: LD_INT 12
69882: PUSH
69883: LD_INT 13
69885: PUSH
69886: LD_INT 14
69888: PUSH
69889: LD_INT 15
69891: PUSH
69892: LD_INT 16
69894: PUSH
69895: LD_INT 17
69897: PUSH
69898: LD_INT 18
69900: PUSH
69901: LD_INT 19
69903: PUSH
69904: LD_INT 20
69906: PUSH
69907: LD_INT 21
69909: PUSH
69910: LD_INT 22
69912: PUSH
69913: LD_INT 23
69915: PUSH
69916: LD_INT 24
69918: PUSH
69919: LD_INT 25
69921: PUSH
69922: LD_INT 26
69924: PUSH
69925: LD_INT 27
69927: PUSH
69928: LD_INT 28
69930: PUSH
69931: LD_INT 29
69933: PUSH
69934: LD_INT 30
69936: PUSH
69937: LD_INT 31
69939: PUSH
69940: LD_INT 32
69942: PUSH
69943: LD_INT 33
69945: PUSH
69946: LD_INT 34
69948: PUSH
69949: LD_INT 35
69951: PUSH
69952: LD_INT 36
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 101
69995: PUSH
69996: LD_INT 102
69998: PUSH
69999: LD_INT 103
70001: PUSH
70002: LD_INT 104
70004: PUSH
70005: LD_INT 105
70007: PUSH
70008: LD_INT 106
70010: PUSH
70011: LD_INT 107
70013: PUSH
70014: LD_INT 108
70016: PUSH
70017: LD_INT 109
70019: PUSH
70020: LD_INT 110
70022: PUSH
70023: LD_INT 111
70025: PUSH
70026: LD_INT 112
70028: PUSH
70029: LD_INT 113
70031: PUSH
70032: LD_INT 114
70034: PUSH
70035: LD_INT 115
70037: PUSH
70038: LD_INT 116
70040: PUSH
70041: LD_INT 117
70043: PUSH
70044: LD_INT 118
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: ST_TO_ADDR
// if result then
70071: LD_VAR 0 2
70075: IFFALSE 70861
// begin normal :=  ;
70077: LD_ADDR_VAR 0 5
70081: PUSH
70082: LD_STRING 
70084: ST_TO_ADDR
// hardcore :=  ;
70085: LD_ADDR_VAR 0 6
70089: PUSH
70090: LD_STRING 
70092: ST_TO_ADDR
// active :=  ;
70093: LD_ADDR_VAR 0 7
70097: PUSH
70098: LD_STRING 
70100: ST_TO_ADDR
// for i = 1 to normalCounter do
70101: LD_ADDR_VAR 0 8
70105: PUSH
70106: DOUBLE
70107: LD_INT 1
70109: DEC
70110: ST_TO_ADDR
70111: LD_EXP 48
70115: PUSH
70116: FOR_TO
70117: IFFALSE 70218
// begin tmp := 0 ;
70119: LD_ADDR_VAR 0 3
70123: PUSH
70124: LD_STRING 0
70126: ST_TO_ADDR
// if result [ 1 ] then
70127: LD_VAR 0 2
70131: PUSH
70132: LD_INT 1
70134: ARRAY
70135: IFFALSE 70200
// if result [ 1 ] [ 1 ] = i then
70137: LD_VAR 0 2
70141: PUSH
70142: LD_INT 1
70144: ARRAY
70145: PUSH
70146: LD_INT 1
70148: ARRAY
70149: PUSH
70150: LD_VAR 0 8
70154: EQUAL
70155: IFFALSE 70200
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
70157: LD_ADDR_VAR 0 2
70161: PUSH
70162: LD_VAR 0 2
70166: PPUSH
70167: LD_INT 1
70169: PPUSH
70170: LD_VAR 0 2
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PPUSH
70179: LD_INT 1
70181: PPUSH
70182: CALL_OW 3
70186: PPUSH
70187: CALL_OW 1
70191: ST_TO_ADDR
// tmp := 1 ;
70192: LD_ADDR_VAR 0 3
70196: PUSH
70197: LD_STRING 1
70199: ST_TO_ADDR
// end ; normal := normal & tmp ;
70200: LD_ADDR_VAR 0 5
70204: PUSH
70205: LD_VAR 0 5
70209: PUSH
70210: LD_VAR 0 3
70214: STR
70215: ST_TO_ADDR
// end ;
70216: GO 70116
70218: POP
70219: POP
// for i = 1 to hardcoreCounter do
70220: LD_ADDR_VAR 0 8
70224: PUSH
70225: DOUBLE
70226: LD_INT 1
70228: DEC
70229: ST_TO_ADDR
70230: LD_EXP 49
70234: PUSH
70235: FOR_TO
70236: IFFALSE 70341
// begin tmp := 0 ;
70238: LD_ADDR_VAR 0 3
70242: PUSH
70243: LD_STRING 0
70245: ST_TO_ADDR
// if result [ 2 ] then
70246: LD_VAR 0 2
70250: PUSH
70251: LD_INT 2
70253: ARRAY
70254: IFFALSE 70323
// if result [ 2 ] [ 1 ] = 100 + i then
70256: LD_VAR 0 2
70260: PUSH
70261: LD_INT 2
70263: ARRAY
70264: PUSH
70265: LD_INT 1
70267: ARRAY
70268: PUSH
70269: LD_INT 100
70271: PUSH
70272: LD_VAR 0 8
70276: PLUS
70277: EQUAL
70278: IFFALSE 70323
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
70280: LD_ADDR_VAR 0 2
70284: PUSH
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_INT 2
70292: PPUSH
70293: LD_VAR 0 2
70297: PUSH
70298: LD_INT 2
70300: ARRAY
70301: PPUSH
70302: LD_INT 1
70304: PPUSH
70305: CALL_OW 3
70309: PPUSH
70310: CALL_OW 1
70314: ST_TO_ADDR
// tmp := 1 ;
70315: LD_ADDR_VAR 0 3
70319: PUSH
70320: LD_STRING 1
70322: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
70323: LD_ADDR_VAR 0 6
70327: PUSH
70328: LD_VAR 0 6
70332: PUSH
70333: LD_VAR 0 3
70337: STR
70338: ST_TO_ADDR
// end ;
70339: GO 70235
70341: POP
70342: POP
// if isGameLoad then
70343: LD_VAR 0 1
70347: IFFALSE 70822
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
70349: LD_ADDR_VAR 0 4
70353: PUSH
70354: LD_EXP 52
70358: PUSH
70359: LD_EXP 51
70363: PUSH
70364: LD_EXP 53
70368: PUSH
70369: LD_EXP 50
70373: PUSH
70374: LD_EXP 54
70378: PUSH
70379: LD_EXP 55
70383: PUSH
70384: LD_EXP 56
70388: PUSH
70389: LD_EXP 57
70393: PUSH
70394: LD_EXP 58
70398: PUSH
70399: LD_EXP 59
70403: PUSH
70404: LD_EXP 60
70408: PUSH
70409: LD_EXP 61
70413: PUSH
70414: LD_EXP 62
70418: PUSH
70419: LD_EXP 63
70423: PUSH
70424: LD_EXP 71
70428: PUSH
70429: LD_EXP 72
70433: PUSH
70434: LD_EXP 73
70438: PUSH
70439: LD_EXP 74
70443: PUSH
70444: LD_EXP 76
70448: PUSH
70449: LD_EXP 77
70453: PUSH
70454: LD_EXP 78
70458: PUSH
70459: LD_EXP 81
70463: PUSH
70464: LD_EXP 83
70468: PUSH
70469: LD_EXP 84
70473: PUSH
70474: LD_EXP 85
70478: PUSH
70479: LD_EXP 87
70483: PUSH
70484: LD_EXP 88
70488: PUSH
70489: LD_EXP 91
70493: PUSH
70494: LD_EXP 92
70498: PUSH
70499: LD_EXP 93
70503: PUSH
70504: LD_EXP 94
70508: PUSH
70509: LD_EXP 95
70513: PUSH
70514: LD_EXP 96
70518: PUSH
70519: LD_EXP 97
70523: PUSH
70524: LD_EXP 98
70528: PUSH
70529: LD_EXP 99
70533: PUSH
70534: LD_EXP 64
70538: PUSH
70539: LD_EXP 65
70543: PUSH
70544: LD_EXP 68
70548: PUSH
70549: LD_EXP 69
70553: PUSH
70554: LD_EXP 70
70558: PUSH
70559: LD_EXP 66
70563: PUSH
70564: LD_EXP 67
70568: PUSH
70569: LD_EXP 75
70573: PUSH
70574: LD_EXP 79
70578: PUSH
70579: LD_EXP 80
70583: PUSH
70584: LD_EXP 82
70588: PUSH
70589: LD_EXP 86
70593: PUSH
70594: LD_EXP 89
70598: PUSH
70599: LD_EXP 90
70603: PUSH
70604: LD_EXP 100
70608: PUSH
70609: LD_EXP 101
70613: PUSH
70614: LD_EXP 102
70618: PUSH
70619: LD_EXP 103
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: ST_TO_ADDR
// tmp :=  ;
70680: LD_ADDR_VAR 0 3
70684: PUSH
70685: LD_STRING 
70687: ST_TO_ADDR
// for i = 1 to normalCounter do
70688: LD_ADDR_VAR 0 8
70692: PUSH
70693: DOUBLE
70694: LD_INT 1
70696: DEC
70697: ST_TO_ADDR
70698: LD_EXP 48
70702: PUSH
70703: FOR_TO
70704: IFFALSE 70740
// begin if flags [ i ] then
70706: LD_VAR 0 4
70710: PUSH
70711: LD_VAR 0 8
70715: ARRAY
70716: IFFALSE 70738
// tmp := tmp & i & ; ;
70718: LD_ADDR_VAR 0 3
70722: PUSH
70723: LD_VAR 0 3
70727: PUSH
70728: LD_VAR 0 8
70732: STR
70733: PUSH
70734: LD_STRING ;
70736: STR
70737: ST_TO_ADDR
// end ;
70738: GO 70703
70740: POP
70741: POP
// for i = 1 to hardcoreCounter do
70742: LD_ADDR_VAR 0 8
70746: PUSH
70747: DOUBLE
70748: LD_INT 1
70750: DEC
70751: ST_TO_ADDR
70752: LD_EXP 49
70756: PUSH
70757: FOR_TO
70758: IFFALSE 70804
// begin if flags [ normalCounter + i ] then
70760: LD_VAR 0 4
70764: PUSH
70765: LD_EXP 48
70769: PUSH
70770: LD_VAR 0 8
70774: PLUS
70775: ARRAY
70776: IFFALSE 70802
// tmp := tmp & ( 100 + i ) & ; ;
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: LD_VAR 0 3
70787: PUSH
70788: LD_INT 100
70790: PUSH
70791: LD_VAR 0 8
70795: PLUS
70796: STR
70797: PUSH
70798: LD_STRING ;
70800: STR
70801: ST_TO_ADDR
// end ;
70802: GO 70757
70804: POP
70805: POP
// if tmp then
70806: LD_VAR 0 3
70810: IFFALSE 70822
// active := tmp ;
70812: LD_ADDR_VAR 0 7
70816: PUSH
70817: LD_VAR 0 3
70821: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70822: LD_STRING getStreamItemsFromMission("
70824: PUSH
70825: LD_VAR 0 5
70829: STR
70830: PUSH
70831: LD_STRING ","
70833: STR
70834: PUSH
70835: LD_VAR 0 6
70839: STR
70840: PUSH
70841: LD_STRING ","
70843: STR
70844: PUSH
70845: LD_VAR 0 7
70849: STR
70850: PUSH
70851: LD_STRING ")
70853: STR
70854: PPUSH
70855: CALL_OW 559
// end else
70859: GO 70868
// ToLua ( getStreamItemsFromMission("","","") ) ;
70861: LD_STRING getStreamItemsFromMission("","","")
70863: PPUSH
70864: CALL_OW 559
// end ;
70868: LD_VAR 0 2
70872: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70873: LD_EXP 47
70877: PUSH
70878: LD_EXP 52
70882: AND
70883: IFFALSE 71007
70885: GO 70887
70887: DISABLE
70888: LD_INT 0
70890: PPUSH
70891: PPUSH
// begin enable ;
70892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70893: LD_ADDR_VAR 0 2
70897: PUSH
70898: LD_INT 22
70900: PUSH
70901: LD_OWVAR 2
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: PUSH
70913: LD_INT 34
70915: PUSH
70916: LD_INT 7
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 34
70925: PUSH
70926: LD_INT 45
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 34
70935: PUSH
70936: LD_INT 28
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 34
70945: PUSH
70946: LD_INT 47
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PPUSH
70964: CALL_OW 69
70968: ST_TO_ADDR
// if not tmp then
70969: LD_VAR 0 2
70973: NOT
70974: IFFALSE 70978
// exit ;
70976: GO 71007
// for i in tmp do
70978: LD_ADDR_VAR 0 1
70982: PUSH
70983: LD_VAR 0 2
70987: PUSH
70988: FOR_IN
70989: IFFALSE 71005
// begin SetLives ( i , 0 ) ;
70991: LD_VAR 0 1
70995: PPUSH
70996: LD_INT 0
70998: PPUSH
70999: CALL_OW 234
// end ;
71003: GO 70988
71005: POP
71006: POP
// end ;
71007: PPOPN 2
71009: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
71010: LD_EXP 47
71014: PUSH
71015: LD_EXP 53
71019: AND
71020: IFFALSE 71104
71022: GO 71024
71024: DISABLE
71025: LD_INT 0
71027: PPUSH
71028: PPUSH
// begin enable ;
71029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
71030: LD_ADDR_VAR 0 2
71034: PUSH
71035: LD_INT 22
71037: PUSH
71038: LD_OWVAR 2
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 32
71049: PUSH
71050: LD_INT 3
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PPUSH
71061: CALL_OW 69
71065: ST_TO_ADDR
// if not tmp then
71066: LD_VAR 0 2
71070: NOT
71071: IFFALSE 71075
// exit ;
71073: GO 71104
// for i in tmp do
71075: LD_ADDR_VAR 0 1
71079: PUSH
71080: LD_VAR 0 2
71084: PUSH
71085: FOR_IN
71086: IFFALSE 71102
// begin SetLives ( i , 0 ) ;
71088: LD_VAR 0 1
71092: PPUSH
71093: LD_INT 0
71095: PPUSH
71096: CALL_OW 234
// end ;
71100: GO 71085
71102: POP
71103: POP
// end ;
71104: PPOPN 2
71106: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71107: LD_EXP 47
71111: PUSH
71112: LD_EXP 50
71116: AND
71117: IFFALSE 71210
71119: GO 71121
71121: DISABLE
71122: LD_INT 0
71124: PPUSH
// begin enable ;
71125: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
71126: LD_ADDR_VAR 0 1
71130: PUSH
71131: LD_INT 22
71133: PUSH
71134: LD_OWVAR 2
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 2
71145: PUSH
71146: LD_INT 25
71148: PUSH
71149: LD_INT 5
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 25
71158: PUSH
71159: LD_INT 9
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 25
71168: PUSH
71169: LD_INT 8
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PPUSH
71186: CALL_OW 69
71190: PUSH
71191: FOR_IN
71192: IFFALSE 71208
// begin SetClass ( i , 1 ) ;
71194: LD_VAR 0 1
71198: PPUSH
71199: LD_INT 1
71201: PPUSH
71202: CALL_OW 336
// end ;
71206: GO 71191
71208: POP
71209: POP
// end ;
71210: PPOPN 1
71212: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
71213: LD_EXP 47
71217: PUSH
71218: LD_EXP 51
71222: AND
71223: PUSH
71224: LD_OWVAR 65
71228: PUSH
71229: LD_INT 7
71231: LESS
71232: AND
71233: IFFALSE 71247
71235: GO 71237
71237: DISABLE
// begin enable ;
71238: ENABLE
// game_speed := 7 ;
71239: LD_ADDR_OWVAR 65
71243: PUSH
71244: LD_INT 7
71246: ST_TO_ADDR
// end ;
71247: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
71248: LD_EXP 47
71252: PUSH
71253: LD_EXP 54
71257: AND
71258: IFFALSE 71460
71260: GO 71262
71262: DISABLE
71263: LD_INT 0
71265: PPUSH
71266: PPUSH
71267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71268: LD_ADDR_VAR 0 3
71272: PUSH
71273: LD_INT 81
71275: PUSH
71276: LD_OWVAR 2
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 21
71287: PUSH
71288: LD_INT 1
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PPUSH
71299: CALL_OW 69
71303: ST_TO_ADDR
// if not tmp then
71304: LD_VAR 0 3
71308: NOT
71309: IFFALSE 71313
// exit ;
71311: GO 71460
// if tmp > 5 then
71313: LD_VAR 0 3
71317: PUSH
71318: LD_INT 5
71320: GREATER
71321: IFFALSE 71333
// k := 5 else
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_INT 5
71330: ST_TO_ADDR
71331: GO 71343
// k := tmp ;
71333: LD_ADDR_VAR 0 2
71337: PUSH
71338: LD_VAR 0 3
71342: ST_TO_ADDR
// for i := 1 to k do
71343: LD_ADDR_VAR 0 1
71347: PUSH
71348: DOUBLE
71349: LD_INT 1
71351: DEC
71352: ST_TO_ADDR
71353: LD_VAR 0 2
71357: PUSH
71358: FOR_TO
71359: IFFALSE 71458
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
71361: LD_VAR 0 3
71365: PUSH
71366: LD_VAR 0 1
71370: ARRAY
71371: PPUSH
71372: LD_VAR 0 1
71376: PUSH
71377: LD_INT 4
71379: MOD
71380: PUSH
71381: LD_INT 1
71383: PLUS
71384: PPUSH
71385: CALL_OW 259
71389: PUSH
71390: LD_INT 10
71392: LESS
71393: IFFALSE 71456
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
71395: LD_VAR 0 3
71399: PUSH
71400: LD_VAR 0 1
71404: ARRAY
71405: PPUSH
71406: LD_VAR 0 1
71410: PUSH
71411: LD_INT 4
71413: MOD
71414: PUSH
71415: LD_INT 1
71417: PLUS
71418: PPUSH
71419: LD_VAR 0 3
71423: PUSH
71424: LD_VAR 0 1
71428: ARRAY
71429: PPUSH
71430: LD_VAR 0 1
71434: PUSH
71435: LD_INT 4
71437: MOD
71438: PUSH
71439: LD_INT 1
71441: PLUS
71442: PPUSH
71443: CALL_OW 259
71447: PUSH
71448: LD_INT 1
71450: PLUS
71451: PPUSH
71452: CALL_OW 237
71456: GO 71358
71458: POP
71459: POP
// end ;
71460: PPOPN 3
71462: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71463: LD_EXP 47
71467: PUSH
71468: LD_EXP 55
71472: AND
71473: IFFALSE 71493
71475: GO 71477
71477: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71478: LD_INT 4
71480: PPUSH
71481: LD_OWVAR 2
71485: PPUSH
71486: LD_INT 0
71488: PPUSH
71489: CALL_OW 324
71493: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71494: LD_EXP 47
71498: PUSH
71499: LD_EXP 84
71503: AND
71504: IFFALSE 71524
71506: GO 71508
71508: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71509: LD_INT 19
71511: PPUSH
71512: LD_OWVAR 2
71516: PPUSH
71517: LD_INT 0
71519: PPUSH
71520: CALL_OW 324
71524: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71525: LD_EXP 47
71529: PUSH
71530: LD_EXP 56
71534: AND
71535: IFFALSE 71637
71537: GO 71539
71539: DISABLE
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
// begin enable ;
71544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71545: LD_ADDR_VAR 0 2
71549: PUSH
71550: LD_INT 22
71552: PUSH
71553: LD_OWVAR 2
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 2
71564: PUSH
71565: LD_INT 34
71567: PUSH
71568: LD_INT 11
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 34
71577: PUSH
71578: LD_INT 30
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: LIST
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PPUSH
71594: CALL_OW 69
71598: ST_TO_ADDR
// if not tmp then
71599: LD_VAR 0 2
71603: NOT
71604: IFFALSE 71608
// exit ;
71606: GO 71637
// for i in tmp do
71608: LD_ADDR_VAR 0 1
71612: PUSH
71613: LD_VAR 0 2
71617: PUSH
71618: FOR_IN
71619: IFFALSE 71635
// begin SetLives ( i , 0 ) ;
71621: LD_VAR 0 1
71625: PPUSH
71626: LD_INT 0
71628: PPUSH
71629: CALL_OW 234
// end ;
71633: GO 71618
71635: POP
71636: POP
// end ;
71637: PPOPN 2
71639: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71640: LD_EXP 47
71644: PUSH
71645: LD_EXP 57
71649: AND
71650: IFFALSE 71670
71652: GO 71654
71654: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71655: LD_INT 32
71657: PPUSH
71658: LD_OWVAR 2
71662: PPUSH
71663: LD_INT 0
71665: PPUSH
71666: CALL_OW 324
71670: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71671: LD_EXP 47
71675: PUSH
71676: LD_EXP 58
71680: AND
71681: IFFALSE 71862
71683: GO 71685
71685: DISABLE
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
71690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71691: LD_ADDR_VAR 0 2
71695: PUSH
71696: LD_INT 22
71698: PUSH
71699: LD_OWVAR 2
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 33
71710: PUSH
71711: LD_INT 3
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PPUSH
71722: CALL_OW 69
71726: ST_TO_ADDR
// if not tmp then
71727: LD_VAR 0 2
71731: NOT
71732: IFFALSE 71736
// exit ;
71734: GO 71862
// side := 0 ;
71736: LD_ADDR_VAR 0 3
71740: PUSH
71741: LD_INT 0
71743: ST_TO_ADDR
// for i := 1 to 8 do
71744: LD_ADDR_VAR 0 1
71748: PUSH
71749: DOUBLE
71750: LD_INT 1
71752: DEC
71753: ST_TO_ADDR
71754: LD_INT 8
71756: PUSH
71757: FOR_TO
71758: IFFALSE 71806
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71760: LD_OWVAR 2
71764: PUSH
71765: LD_VAR 0 1
71769: NONEQUAL
71770: PUSH
71771: LD_OWVAR 2
71775: PPUSH
71776: LD_VAR 0 1
71780: PPUSH
71781: CALL_OW 81
71785: PUSH
71786: LD_INT 2
71788: EQUAL
71789: AND
71790: IFFALSE 71804
// begin side := i ;
71792: LD_ADDR_VAR 0 3
71796: PUSH
71797: LD_VAR 0 1
71801: ST_TO_ADDR
// break ;
71802: GO 71806
// end ;
71804: GO 71757
71806: POP
71807: POP
// if not side then
71808: LD_VAR 0 3
71812: NOT
71813: IFFALSE 71817
// exit ;
71815: GO 71862
// for i := 1 to tmp do
71817: LD_ADDR_VAR 0 1
71821: PUSH
71822: DOUBLE
71823: LD_INT 1
71825: DEC
71826: ST_TO_ADDR
71827: LD_VAR 0 2
71831: PUSH
71832: FOR_TO
71833: IFFALSE 71860
// if Prob ( 60 ) then
71835: LD_INT 60
71837: PPUSH
71838: CALL_OW 13
71842: IFFALSE 71858
// SetSide ( i , side ) ;
71844: LD_VAR 0 1
71848: PPUSH
71849: LD_VAR 0 3
71853: PPUSH
71854: CALL_OW 235
71858: GO 71832
71860: POP
71861: POP
// end ;
71862: PPOPN 3
71864: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71865: LD_EXP 47
71869: PUSH
71870: LD_EXP 60
71874: AND
71875: IFFALSE 71994
71877: GO 71879
71879: DISABLE
71880: LD_INT 0
71882: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71883: LD_ADDR_VAR 0 1
71887: PUSH
71888: LD_INT 22
71890: PUSH
71891: LD_OWVAR 2
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 21
71902: PUSH
71903: LD_INT 1
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 3
71912: PUSH
71913: LD_INT 23
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: PPUSH
71932: CALL_OW 69
71936: PUSH
71937: FOR_IN
71938: IFFALSE 71992
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71940: LD_VAR 0 1
71944: PPUSH
71945: CALL_OW 257
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: LD_INT 3
71958: PUSH
71959: LD_INT 4
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: IN
71968: IFFALSE 71990
// SetClass ( un , rand ( 1 , 4 ) ) ;
71970: LD_VAR 0 1
71974: PPUSH
71975: LD_INT 1
71977: PPUSH
71978: LD_INT 4
71980: PPUSH
71981: CALL_OW 12
71985: PPUSH
71986: CALL_OW 336
71990: GO 71937
71992: POP
71993: POP
// end ;
71994: PPOPN 1
71996: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71997: LD_EXP 47
72001: PUSH
72002: LD_EXP 59
72006: AND
72007: IFFALSE 72086
72009: GO 72011
72011: DISABLE
72012: LD_INT 0
72014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72015: LD_ADDR_VAR 0 1
72019: PUSH
72020: LD_INT 22
72022: PUSH
72023: LD_OWVAR 2
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 21
72034: PUSH
72035: LD_INT 3
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PPUSH
72046: CALL_OW 69
72050: ST_TO_ADDR
// if not tmp then
72051: LD_VAR 0 1
72055: NOT
72056: IFFALSE 72060
// exit ;
72058: GO 72086
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72060: LD_VAR 0 1
72064: PUSH
72065: LD_INT 1
72067: PPUSH
72068: LD_VAR 0 1
72072: PPUSH
72073: CALL_OW 12
72077: ARRAY
72078: PPUSH
72079: LD_INT 100
72081: PPUSH
72082: CALL_OW 234
// end ;
72086: PPOPN 1
72088: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72089: LD_EXP 47
72093: PUSH
72094: LD_EXP 61
72098: AND
72099: IFFALSE 72197
72101: GO 72103
72103: DISABLE
72104: LD_INT 0
72106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72107: LD_ADDR_VAR 0 1
72111: PUSH
72112: LD_INT 22
72114: PUSH
72115: LD_OWVAR 2
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 21
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PPUSH
72138: CALL_OW 69
72142: ST_TO_ADDR
// if not tmp then
72143: LD_VAR 0 1
72147: NOT
72148: IFFALSE 72152
// exit ;
72150: GO 72197
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
72152: LD_VAR 0 1
72156: PUSH
72157: LD_INT 1
72159: PPUSH
72160: LD_VAR 0 1
72164: PPUSH
72165: CALL_OW 12
72169: ARRAY
72170: PPUSH
72171: LD_INT 1
72173: PPUSH
72174: LD_INT 4
72176: PPUSH
72177: CALL_OW 12
72181: PPUSH
72182: LD_INT 3000
72184: PPUSH
72185: LD_INT 9000
72187: PPUSH
72188: CALL_OW 12
72192: PPUSH
72193: CALL_OW 492
// end ;
72197: PPOPN 1
72199: END
// every 0 0$1 trigger StreamModeActive and sDepot do
72200: LD_EXP 47
72204: PUSH
72205: LD_EXP 62
72209: AND
72210: IFFALSE 72230
72212: GO 72214
72214: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
72215: LD_INT 1
72217: PPUSH
72218: LD_OWVAR 2
72222: PPUSH
72223: LD_INT 0
72225: PPUSH
72226: CALL_OW 324
72230: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
72231: LD_EXP 47
72235: PUSH
72236: LD_EXP 63
72240: AND
72241: IFFALSE 72324
72243: GO 72245
72245: DISABLE
72246: LD_INT 0
72248: PPUSH
72249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72250: LD_ADDR_VAR 0 2
72254: PUSH
72255: LD_INT 22
72257: PUSH
72258: LD_OWVAR 2
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 21
72269: PUSH
72270: LD_INT 3
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PPUSH
72281: CALL_OW 69
72285: ST_TO_ADDR
// if not tmp then
72286: LD_VAR 0 2
72290: NOT
72291: IFFALSE 72295
// exit ;
72293: GO 72324
// for i in tmp do
72295: LD_ADDR_VAR 0 1
72299: PUSH
72300: LD_VAR 0 2
72304: PUSH
72305: FOR_IN
72306: IFFALSE 72322
// SetBLevel ( i , 10 ) ;
72308: LD_VAR 0 1
72312: PPUSH
72313: LD_INT 10
72315: PPUSH
72316: CALL_OW 241
72320: GO 72305
72322: POP
72323: POP
// end ;
72324: PPOPN 2
72326: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
72327: LD_EXP 47
72331: PUSH
72332: LD_EXP 64
72336: AND
72337: IFFALSE 72448
72339: GO 72341
72341: DISABLE
72342: LD_INT 0
72344: PPUSH
72345: PPUSH
72346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72347: LD_ADDR_VAR 0 3
72351: PUSH
72352: LD_INT 22
72354: PUSH
72355: LD_OWVAR 2
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 25
72366: PUSH
72367: LD_INT 1
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PPUSH
72378: CALL_OW 69
72382: ST_TO_ADDR
// if not tmp then
72383: LD_VAR 0 3
72387: NOT
72388: IFFALSE 72392
// exit ;
72390: GO 72448
// un := tmp [ rand ( 1 , tmp ) ] ;
72392: LD_ADDR_VAR 0 2
72396: PUSH
72397: LD_VAR 0 3
72401: PUSH
72402: LD_INT 1
72404: PPUSH
72405: LD_VAR 0 3
72409: PPUSH
72410: CALL_OW 12
72414: ARRAY
72415: ST_TO_ADDR
// if Crawls ( un ) then
72416: LD_VAR 0 2
72420: PPUSH
72421: CALL_OW 318
72425: IFFALSE 72436
// ComWalk ( un ) ;
72427: LD_VAR 0 2
72431: PPUSH
72432: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72436: LD_VAR 0 2
72440: PPUSH
72441: LD_INT 5
72443: PPUSH
72444: CALL_OW 336
// end ;
72448: PPOPN 3
72450: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72451: LD_EXP 47
72455: PUSH
72456: LD_EXP 65
72460: AND
72461: PUSH
72462: LD_OWVAR 67
72466: PUSH
72467: LD_INT 4
72469: LESS
72470: AND
72471: IFFALSE 72490
72473: GO 72475
72475: DISABLE
// begin Difficulty := Difficulty + 1 ;
72476: LD_ADDR_OWVAR 67
72480: PUSH
72481: LD_OWVAR 67
72485: PUSH
72486: LD_INT 1
72488: PLUS
72489: ST_TO_ADDR
// end ;
72490: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72491: LD_EXP 47
72495: PUSH
72496: LD_EXP 66
72500: AND
72501: IFFALSE 72604
72503: GO 72505
72505: DISABLE
72506: LD_INT 0
72508: PPUSH
// begin for i := 1 to 5 do
72509: LD_ADDR_VAR 0 1
72513: PUSH
72514: DOUBLE
72515: LD_INT 1
72517: DEC
72518: ST_TO_ADDR
72519: LD_INT 5
72521: PUSH
72522: FOR_TO
72523: IFFALSE 72602
// begin uc_nation := nation_nature ;
72525: LD_ADDR_OWVAR 21
72529: PUSH
72530: LD_INT 0
72532: ST_TO_ADDR
// uc_side := 0 ;
72533: LD_ADDR_OWVAR 20
72537: PUSH
72538: LD_INT 0
72540: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72541: LD_ADDR_OWVAR 29
72545: PUSH
72546: LD_INT 12
72548: PUSH
72549: LD_INT 12
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: ST_TO_ADDR
// hc_agressivity := 20 ;
72556: LD_ADDR_OWVAR 35
72560: PUSH
72561: LD_INT 20
72563: ST_TO_ADDR
// hc_class := class_tiger ;
72564: LD_ADDR_OWVAR 28
72568: PUSH
72569: LD_INT 14
72571: ST_TO_ADDR
// hc_gallery :=  ;
72572: LD_ADDR_OWVAR 33
72576: PUSH
72577: LD_STRING 
72579: ST_TO_ADDR
// hc_name :=  ;
72580: LD_ADDR_OWVAR 26
72584: PUSH
72585: LD_STRING 
72587: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72588: CALL_OW 44
72592: PPUSH
72593: LD_INT 0
72595: PPUSH
72596: CALL_OW 51
// end ;
72600: GO 72522
72602: POP
72603: POP
// end ;
72604: PPOPN 1
72606: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72607: LD_EXP 47
72611: PUSH
72612: LD_EXP 67
72616: AND
72617: IFFALSE 72626
72619: GO 72621
72621: DISABLE
// StreamSibBomb ;
72622: CALL 72627 0 0
72626: END
// export function StreamSibBomb ; var i , x , y ; begin
72627: LD_INT 0
72629: PPUSH
72630: PPUSH
72631: PPUSH
72632: PPUSH
// result := false ;
72633: LD_ADDR_VAR 0 1
72637: PUSH
72638: LD_INT 0
72640: ST_TO_ADDR
// for i := 1 to 16 do
72641: LD_ADDR_VAR 0 2
72645: PUSH
72646: DOUBLE
72647: LD_INT 1
72649: DEC
72650: ST_TO_ADDR
72651: LD_INT 16
72653: PUSH
72654: FOR_TO
72655: IFFALSE 72854
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72657: LD_ADDR_VAR 0 3
72661: PUSH
72662: LD_INT 10
72664: PUSH
72665: LD_INT 20
72667: PUSH
72668: LD_INT 30
72670: PUSH
72671: LD_INT 40
72673: PUSH
72674: LD_INT 50
72676: PUSH
72677: LD_INT 60
72679: PUSH
72680: LD_INT 70
72682: PUSH
72683: LD_INT 80
72685: PUSH
72686: LD_INT 90
72688: PUSH
72689: LD_INT 100
72691: PUSH
72692: LD_INT 110
72694: PUSH
72695: LD_INT 120
72697: PUSH
72698: LD_INT 130
72700: PUSH
72701: LD_INT 140
72703: PUSH
72704: LD_INT 150
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 1
72726: PPUSH
72727: LD_INT 15
72729: PPUSH
72730: CALL_OW 12
72734: ARRAY
72735: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72736: LD_ADDR_VAR 0 4
72740: PUSH
72741: LD_INT 10
72743: PUSH
72744: LD_INT 20
72746: PUSH
72747: LD_INT 30
72749: PUSH
72750: LD_INT 40
72752: PUSH
72753: LD_INT 50
72755: PUSH
72756: LD_INT 60
72758: PUSH
72759: LD_INT 70
72761: PUSH
72762: LD_INT 80
72764: PUSH
72765: LD_INT 90
72767: PUSH
72768: LD_INT 100
72770: PUSH
72771: LD_INT 110
72773: PUSH
72774: LD_INT 120
72776: PUSH
72777: LD_INT 130
72779: PUSH
72780: LD_INT 140
72782: PUSH
72783: LD_INT 150
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 1
72805: PPUSH
72806: LD_INT 15
72808: PPUSH
72809: CALL_OW 12
72813: ARRAY
72814: ST_TO_ADDR
// if ValidHex ( x , y ) then
72815: LD_VAR 0 3
72819: PPUSH
72820: LD_VAR 0 4
72824: PPUSH
72825: CALL_OW 488
72829: IFFALSE 72852
// begin result := [ x , y ] ;
72831: LD_ADDR_VAR 0 1
72835: PUSH
72836: LD_VAR 0 3
72840: PUSH
72841: LD_VAR 0 4
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: ST_TO_ADDR
// break ;
72850: GO 72854
// end ; end ;
72852: GO 72654
72854: POP
72855: POP
// if result then
72856: LD_VAR 0 1
72860: IFFALSE 72920
// begin ToLua ( playSibBomb() ) ;
72862: LD_STRING playSibBomb()
72864: PPUSH
72865: CALL_OW 559
// wait ( 0 0$14 ) ;
72869: LD_INT 490
72871: PPUSH
72872: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72876: LD_VAR 0 1
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PPUSH
72885: LD_VAR 0 1
72889: PUSH
72890: LD_INT 2
72892: ARRAY
72893: PPUSH
72894: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72898: LD_VAR 0 1
72902: PUSH
72903: LD_INT 1
72905: ARRAY
72906: PPUSH
72907: LD_VAR 0 1
72911: PUSH
72912: LD_INT 2
72914: ARRAY
72915: PPUSH
72916: CALL_OW 429
// end ; end ;
72920: LD_VAR 0 1
72924: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72925: LD_EXP 47
72929: PUSH
72930: LD_EXP 69
72934: AND
72935: IFFALSE 72947
72937: GO 72939
72939: DISABLE
// YouLost (  ) ;
72940: LD_STRING 
72942: PPUSH
72943: CALL_OW 104
72947: END
// every 0 0$1 trigger StreamModeActive and sFog do
72948: LD_EXP 47
72952: PUSH
72953: LD_EXP 68
72957: AND
72958: IFFALSE 72972
72960: GO 72962
72962: DISABLE
// FogOff ( your_side ) ;
72963: LD_OWVAR 2
72967: PPUSH
72968: CALL_OW 344
72972: END
// every 0 0$1 trigger StreamModeActive and sSun do
72973: LD_EXP 47
72977: PUSH
72978: LD_EXP 70
72982: AND
72983: IFFALSE 73011
72985: GO 72987
72987: DISABLE
// begin solar_recharge_percent := 0 ;
72988: LD_ADDR_OWVAR 79
72992: PUSH
72993: LD_INT 0
72995: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72996: LD_INT 10500
72998: PPUSH
72999: CALL_OW 67
// solar_recharge_percent := 100 ;
73003: LD_ADDR_OWVAR 79
73007: PUSH
73008: LD_INT 100
73010: ST_TO_ADDR
// end ;
73011: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73012: LD_EXP 47
73016: PUSH
73017: LD_EXP 71
73021: AND
73022: IFFALSE 73261
73024: GO 73026
73026: DISABLE
73027: LD_INT 0
73029: PPUSH
73030: PPUSH
73031: PPUSH
// begin tmp := [ ] ;
73032: LD_ADDR_VAR 0 3
73036: PUSH
73037: EMPTY
73038: ST_TO_ADDR
// for i := 1 to 6 do
73039: LD_ADDR_VAR 0 1
73043: PUSH
73044: DOUBLE
73045: LD_INT 1
73047: DEC
73048: ST_TO_ADDR
73049: LD_INT 6
73051: PUSH
73052: FOR_TO
73053: IFFALSE 73158
// begin uc_nation := nation_nature ;
73055: LD_ADDR_OWVAR 21
73059: PUSH
73060: LD_INT 0
73062: ST_TO_ADDR
// uc_side := 0 ;
73063: LD_ADDR_OWVAR 20
73067: PUSH
73068: LD_INT 0
73070: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73071: LD_ADDR_OWVAR 29
73075: PUSH
73076: LD_INT 12
73078: PUSH
73079: LD_INT 12
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: ST_TO_ADDR
// hc_agressivity := 20 ;
73086: LD_ADDR_OWVAR 35
73090: PUSH
73091: LD_INT 20
73093: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
73094: LD_ADDR_OWVAR 28
73098: PUSH
73099: LD_INT 17
73101: ST_TO_ADDR
// hc_gallery :=  ;
73102: LD_ADDR_OWVAR 33
73106: PUSH
73107: LD_STRING 
73109: ST_TO_ADDR
// hc_name :=  ;
73110: LD_ADDR_OWVAR 26
73114: PUSH
73115: LD_STRING 
73117: ST_TO_ADDR
// un := CreateHuman ;
73118: LD_ADDR_VAR 0 2
73122: PUSH
73123: CALL_OW 44
73127: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
73128: LD_VAR 0 2
73132: PPUSH
73133: LD_INT 1
73135: PPUSH
73136: CALL_OW 51
// tmp := tmp ^ un ;
73140: LD_ADDR_VAR 0 3
73144: PUSH
73145: LD_VAR 0 3
73149: PUSH
73150: LD_VAR 0 2
73154: ADD
73155: ST_TO_ADDR
// end ;
73156: GO 73052
73158: POP
73159: POP
// repeat wait ( 0 0$1 ) ;
73160: LD_INT 35
73162: PPUSH
73163: CALL_OW 67
// for un in tmp do
73167: LD_ADDR_VAR 0 2
73171: PUSH
73172: LD_VAR 0 3
73176: PUSH
73177: FOR_IN
73178: IFFALSE 73252
// begin if IsDead ( un ) then
73180: LD_VAR 0 2
73184: PPUSH
73185: CALL_OW 301
73189: IFFALSE 73209
// begin tmp := tmp diff un ;
73191: LD_ADDR_VAR 0 3
73195: PUSH
73196: LD_VAR 0 3
73200: PUSH
73201: LD_VAR 0 2
73205: DIFF
73206: ST_TO_ADDR
// continue ;
73207: GO 73177
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
73209: LD_VAR 0 2
73213: PPUSH
73214: LD_INT 3
73216: PUSH
73217: LD_INT 22
73219: PUSH
73220: LD_INT 0
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PPUSH
73231: CALL_OW 69
73235: PPUSH
73236: LD_VAR 0 2
73240: PPUSH
73241: CALL_OW 74
73245: PPUSH
73246: CALL_OW 115
// end ;
73250: GO 73177
73252: POP
73253: POP
// until not tmp ;
73254: LD_VAR 0 3
73258: NOT
73259: IFFALSE 73160
// end ;
73261: PPOPN 3
73263: END
// every 0 0$1 trigger StreamModeActive and sTroll do
73264: LD_EXP 47
73268: PUSH
73269: LD_EXP 72
73273: AND
73274: IFFALSE 73328
73276: GO 73278
73278: DISABLE
// begin ToLua ( displayTroll(); ) ;
73279: LD_STRING displayTroll();
73281: PPUSH
73282: CALL_OW 559
// wait ( 3 3$00 ) ;
73286: LD_INT 6300
73288: PPUSH
73289: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73293: LD_STRING hideTroll();
73295: PPUSH
73296: CALL_OW 559
// wait ( 1 1$00 ) ;
73300: LD_INT 2100
73302: PPUSH
73303: CALL_OW 67
// ToLua ( displayTroll(); ) ;
73307: LD_STRING displayTroll();
73309: PPUSH
73310: CALL_OW 559
// wait ( 1 1$00 ) ;
73314: LD_INT 2100
73316: PPUSH
73317: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73321: LD_STRING hideTroll();
73323: PPUSH
73324: CALL_OW 559
// end ;
73328: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
73329: LD_EXP 47
73333: PUSH
73334: LD_EXP 73
73338: AND
73339: IFFALSE 73402
73341: GO 73343
73343: DISABLE
73344: LD_INT 0
73346: PPUSH
// begin p := 0 ;
73347: LD_ADDR_VAR 0 1
73351: PUSH
73352: LD_INT 0
73354: ST_TO_ADDR
// repeat game_speed := 1 ;
73355: LD_ADDR_OWVAR 65
73359: PUSH
73360: LD_INT 1
73362: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73363: LD_INT 35
73365: PPUSH
73366: CALL_OW 67
// p := p + 1 ;
73370: LD_ADDR_VAR 0 1
73374: PUSH
73375: LD_VAR 0 1
73379: PUSH
73380: LD_INT 1
73382: PLUS
73383: ST_TO_ADDR
// until p >= 60 ;
73384: LD_VAR 0 1
73388: PUSH
73389: LD_INT 60
73391: GREATEREQUAL
73392: IFFALSE 73355
// game_speed := 4 ;
73394: LD_ADDR_OWVAR 65
73398: PUSH
73399: LD_INT 4
73401: ST_TO_ADDR
// end ;
73402: PPOPN 1
73404: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
73405: LD_EXP 47
73409: PUSH
73410: LD_EXP 74
73414: AND
73415: IFFALSE 73561
73417: GO 73419
73419: DISABLE
73420: LD_INT 0
73422: PPUSH
73423: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73424: LD_ADDR_VAR 0 1
73428: PUSH
73429: LD_INT 22
73431: PUSH
73432: LD_OWVAR 2
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 2
73443: PUSH
73444: LD_INT 30
73446: PUSH
73447: LD_INT 0
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 30
73456: PUSH
73457: LD_INT 1
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: LIST
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PPUSH
73473: CALL_OW 69
73477: ST_TO_ADDR
// if not depot then
73478: LD_VAR 0 1
73482: NOT
73483: IFFALSE 73487
// exit ;
73485: GO 73561
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73487: LD_ADDR_VAR 0 2
73491: PUSH
73492: LD_VAR 0 1
73496: PUSH
73497: LD_INT 1
73499: PPUSH
73500: LD_VAR 0 1
73504: PPUSH
73505: CALL_OW 12
73509: ARRAY
73510: PPUSH
73511: CALL_OW 274
73515: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73516: LD_VAR 0 2
73520: PPUSH
73521: LD_INT 1
73523: PPUSH
73524: LD_INT 0
73526: PPUSH
73527: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73531: LD_VAR 0 2
73535: PPUSH
73536: LD_INT 2
73538: PPUSH
73539: LD_INT 0
73541: PPUSH
73542: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73546: LD_VAR 0 2
73550: PPUSH
73551: LD_INT 3
73553: PPUSH
73554: LD_INT 0
73556: PPUSH
73557: CALL_OW 277
// end ;
73561: PPOPN 2
73563: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73564: LD_EXP 47
73568: PUSH
73569: LD_EXP 75
73573: AND
73574: IFFALSE 73671
73576: GO 73578
73578: DISABLE
73579: LD_INT 0
73581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73582: LD_ADDR_VAR 0 1
73586: PUSH
73587: LD_INT 22
73589: PUSH
73590: LD_OWVAR 2
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 21
73601: PUSH
73602: LD_INT 1
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 3
73611: PUSH
73612: LD_INT 23
73614: PUSH
73615: LD_INT 0
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: LIST
73630: PPUSH
73631: CALL_OW 69
73635: ST_TO_ADDR
// if not tmp then
73636: LD_VAR 0 1
73640: NOT
73641: IFFALSE 73645
// exit ;
73643: GO 73671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73645: LD_VAR 0 1
73649: PUSH
73650: LD_INT 1
73652: PPUSH
73653: LD_VAR 0 1
73657: PPUSH
73658: CALL_OW 12
73662: ARRAY
73663: PPUSH
73664: LD_INT 200
73666: PPUSH
73667: CALL_OW 234
// end ;
73671: PPOPN 1
73673: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73674: LD_EXP 47
73678: PUSH
73679: LD_EXP 76
73683: AND
73684: IFFALSE 73763
73686: GO 73688
73688: DISABLE
73689: LD_INT 0
73691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73692: LD_ADDR_VAR 0 1
73696: PUSH
73697: LD_INT 22
73699: PUSH
73700: LD_OWVAR 2
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 21
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: PPUSH
73723: CALL_OW 69
73727: ST_TO_ADDR
// if not tmp then
73728: LD_VAR 0 1
73732: NOT
73733: IFFALSE 73737
// exit ;
73735: GO 73763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73737: LD_VAR 0 1
73741: PUSH
73742: LD_INT 1
73744: PPUSH
73745: LD_VAR 0 1
73749: PPUSH
73750: CALL_OW 12
73754: ARRAY
73755: PPUSH
73756: LD_INT 60
73758: PPUSH
73759: CALL_OW 234
// end ;
73763: PPOPN 1
73765: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73766: LD_EXP 47
73770: PUSH
73771: LD_EXP 77
73775: AND
73776: IFFALSE 73875
73778: GO 73780
73780: DISABLE
73781: LD_INT 0
73783: PPUSH
73784: PPUSH
// begin enable ;
73785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73786: LD_ADDR_VAR 0 1
73790: PUSH
73791: LD_INT 22
73793: PUSH
73794: LD_OWVAR 2
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 61
73805: PUSH
73806: EMPTY
73807: LIST
73808: PUSH
73809: LD_INT 33
73811: PUSH
73812: LD_INT 2
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: PPUSH
73824: CALL_OW 69
73828: ST_TO_ADDR
// if not tmp then
73829: LD_VAR 0 1
73833: NOT
73834: IFFALSE 73838
// exit ;
73836: GO 73875
// for i in tmp do
73838: LD_ADDR_VAR 0 2
73842: PUSH
73843: LD_VAR 0 1
73847: PUSH
73848: FOR_IN
73849: IFFALSE 73873
// if IsControledBy ( i ) then
73851: LD_VAR 0 2
73855: PPUSH
73856: CALL_OW 312
73860: IFFALSE 73871
// ComUnlink ( i ) ;
73862: LD_VAR 0 2
73866: PPUSH
73867: CALL_OW 136
73871: GO 73848
73873: POP
73874: POP
// end ;
73875: PPOPN 2
73877: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73878: LD_EXP 47
73882: PUSH
73883: LD_EXP 78
73887: AND
73888: IFFALSE 74028
73890: GO 73892
73892: DISABLE
73893: LD_INT 0
73895: PPUSH
73896: PPUSH
// begin ToLua ( displayPowell(); ) ;
73897: LD_STRING displayPowell();
73899: PPUSH
73900: CALL_OW 559
// uc_side := 0 ;
73904: LD_ADDR_OWVAR 20
73908: PUSH
73909: LD_INT 0
73911: ST_TO_ADDR
// uc_nation := 2 ;
73912: LD_ADDR_OWVAR 21
73916: PUSH
73917: LD_INT 2
73919: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73920: LD_ADDR_OWVAR 37
73924: PUSH
73925: LD_INT 14
73927: ST_TO_ADDR
// vc_engine := engine_siberite ;
73928: LD_ADDR_OWVAR 39
73932: PUSH
73933: LD_INT 3
73935: ST_TO_ADDR
// vc_control := control_apeman ;
73936: LD_ADDR_OWVAR 38
73940: PUSH
73941: LD_INT 5
73943: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73944: LD_ADDR_OWVAR 40
73948: PUSH
73949: LD_INT 29
73951: ST_TO_ADDR
// un := CreateVehicle ;
73952: LD_ADDR_VAR 0 2
73956: PUSH
73957: CALL_OW 45
73961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73962: LD_VAR 0 2
73966: PPUSH
73967: LD_INT 1
73969: PPUSH
73970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73974: LD_INT 35
73976: PPUSH
73977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73981: LD_VAR 0 2
73985: PPUSH
73986: LD_INT 22
73988: PUSH
73989: LD_OWVAR 2
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PPUSH
73998: CALL_OW 69
74002: PPUSH
74003: LD_VAR 0 2
74007: PPUSH
74008: CALL_OW 74
74012: PPUSH
74013: CALL_OW 115
// until IsDead ( un ) ;
74017: LD_VAR 0 2
74021: PPUSH
74022: CALL_OW 301
74026: IFFALSE 73974
// end ;
74028: PPOPN 2
74030: END
// every 0 0$1 trigger StreamModeActive and sStu do
74031: LD_EXP 47
74035: PUSH
74036: LD_EXP 86
74040: AND
74041: IFFALSE 74057
74043: GO 74045
74045: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74046: LD_STRING displayStucuk();
74048: PPUSH
74049: CALL_OW 559
// ResetFog ;
74053: CALL_OW 335
// end ;
74057: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
74058: LD_EXP 47
74062: PUSH
74063: LD_EXP 79
74067: AND
74068: IFFALSE 74209
74070: GO 74072
74072: DISABLE
74073: LD_INT 0
74075: PPUSH
74076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74077: LD_ADDR_VAR 0 2
74081: PUSH
74082: LD_INT 22
74084: PUSH
74085: LD_OWVAR 2
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 21
74096: PUSH
74097: LD_INT 1
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PPUSH
74108: CALL_OW 69
74112: ST_TO_ADDR
// if not tmp then
74113: LD_VAR 0 2
74117: NOT
74118: IFFALSE 74122
// exit ;
74120: GO 74209
// un := tmp [ rand ( 1 , tmp ) ] ;
74122: LD_ADDR_VAR 0 1
74126: PUSH
74127: LD_VAR 0 2
74131: PUSH
74132: LD_INT 1
74134: PPUSH
74135: LD_VAR 0 2
74139: PPUSH
74140: CALL_OW 12
74144: ARRAY
74145: ST_TO_ADDR
// SetSide ( un , 0 ) ;
74146: LD_VAR 0 1
74150: PPUSH
74151: LD_INT 0
74153: PPUSH
74154: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
74158: LD_VAR 0 1
74162: PPUSH
74163: LD_OWVAR 3
74167: PUSH
74168: LD_VAR 0 1
74172: DIFF
74173: PPUSH
74174: LD_VAR 0 1
74178: PPUSH
74179: CALL_OW 74
74183: PPUSH
74184: CALL_OW 115
// wait ( 0 0$20 ) ;
74188: LD_INT 700
74190: PPUSH
74191: CALL_OW 67
// SetSide ( un , your_side ) ;
74195: LD_VAR 0 1
74199: PPUSH
74200: LD_OWVAR 2
74204: PPUSH
74205: CALL_OW 235
// end ;
74209: PPOPN 2
74211: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
74212: LD_EXP 47
74216: PUSH
74217: LD_EXP 80
74221: AND
74222: IFFALSE 74328
74224: GO 74226
74226: DISABLE
74227: LD_INT 0
74229: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74230: LD_ADDR_VAR 0 1
74234: PUSH
74235: LD_INT 22
74237: PUSH
74238: LD_OWVAR 2
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 2
74249: PUSH
74250: LD_INT 30
74252: PUSH
74253: LD_INT 0
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 30
74262: PUSH
74263: LD_INT 1
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: LIST
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PPUSH
74279: CALL_OW 69
74283: ST_TO_ADDR
// if not depot then
74284: LD_VAR 0 1
74288: NOT
74289: IFFALSE 74293
// exit ;
74291: GO 74328
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
74293: LD_VAR 0 1
74297: PUSH
74298: LD_INT 1
74300: ARRAY
74301: PPUSH
74302: CALL_OW 250
74306: PPUSH
74307: LD_VAR 0 1
74311: PUSH
74312: LD_INT 1
74314: ARRAY
74315: PPUSH
74316: CALL_OW 251
74320: PPUSH
74321: LD_INT 70
74323: PPUSH
74324: CALL_OW 495
// end ;
74328: PPOPN 1
74330: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
74331: LD_EXP 47
74335: PUSH
74336: LD_EXP 81
74340: AND
74341: IFFALSE 74552
74343: GO 74345
74345: DISABLE
74346: LD_INT 0
74348: PPUSH
74349: PPUSH
74350: PPUSH
74351: PPUSH
74352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74353: LD_ADDR_VAR 0 5
74357: PUSH
74358: LD_INT 22
74360: PUSH
74361: LD_OWVAR 2
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 21
74372: PUSH
74373: LD_INT 1
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PPUSH
74384: CALL_OW 69
74388: ST_TO_ADDR
// if not tmp then
74389: LD_VAR 0 5
74393: NOT
74394: IFFALSE 74398
// exit ;
74396: GO 74552
// for i in tmp do
74398: LD_ADDR_VAR 0 1
74402: PUSH
74403: LD_VAR 0 5
74407: PUSH
74408: FOR_IN
74409: IFFALSE 74550
// begin d := rand ( 0 , 5 ) ;
74411: LD_ADDR_VAR 0 4
74415: PUSH
74416: LD_INT 0
74418: PPUSH
74419: LD_INT 5
74421: PPUSH
74422: CALL_OW 12
74426: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
74427: LD_ADDR_VAR 0 2
74431: PUSH
74432: LD_VAR 0 1
74436: PPUSH
74437: CALL_OW 250
74441: PPUSH
74442: LD_VAR 0 4
74446: PPUSH
74447: LD_INT 3
74449: PPUSH
74450: LD_INT 12
74452: PPUSH
74453: CALL_OW 12
74457: PPUSH
74458: CALL_OW 272
74462: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74463: LD_ADDR_VAR 0 3
74467: PUSH
74468: LD_VAR 0 1
74472: PPUSH
74473: CALL_OW 251
74477: PPUSH
74478: LD_VAR 0 4
74482: PPUSH
74483: LD_INT 3
74485: PPUSH
74486: LD_INT 12
74488: PPUSH
74489: CALL_OW 12
74493: PPUSH
74494: CALL_OW 273
74498: ST_TO_ADDR
// if ValidHex ( x , y ) then
74499: LD_VAR 0 2
74503: PPUSH
74504: LD_VAR 0 3
74508: PPUSH
74509: CALL_OW 488
74513: IFFALSE 74548
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74515: LD_VAR 0 1
74519: PPUSH
74520: LD_VAR 0 2
74524: PPUSH
74525: LD_VAR 0 3
74529: PPUSH
74530: LD_INT 3
74532: PPUSH
74533: LD_INT 6
74535: PPUSH
74536: CALL_OW 12
74540: PPUSH
74541: LD_INT 1
74543: PPUSH
74544: CALL_OW 483
// end ;
74548: GO 74408
74550: POP
74551: POP
// end ;
74552: PPOPN 5
74554: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74555: LD_EXP 47
74559: PUSH
74560: LD_EXP 82
74564: AND
74565: IFFALSE 74659
74567: GO 74569
74569: DISABLE
74570: LD_INT 0
74572: PPUSH
74573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74574: LD_ADDR_VAR 0 2
74578: PUSH
74579: LD_INT 22
74581: PUSH
74582: LD_OWVAR 2
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 32
74593: PUSH
74594: LD_INT 1
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 21
74603: PUSH
74604: LD_INT 2
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: LIST
74615: PPUSH
74616: CALL_OW 69
74620: ST_TO_ADDR
// if not tmp then
74621: LD_VAR 0 2
74625: NOT
74626: IFFALSE 74630
// exit ;
74628: GO 74659
// for i in tmp do
74630: LD_ADDR_VAR 0 1
74634: PUSH
74635: LD_VAR 0 2
74639: PUSH
74640: FOR_IN
74641: IFFALSE 74657
// SetFuel ( i , 0 ) ;
74643: LD_VAR 0 1
74647: PPUSH
74648: LD_INT 0
74650: PPUSH
74651: CALL_OW 240
74655: GO 74640
74657: POP
74658: POP
// end ;
74659: PPOPN 2
74661: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74662: LD_EXP 47
74666: PUSH
74667: LD_EXP 83
74671: AND
74672: IFFALSE 74738
74674: GO 74676
74676: DISABLE
74677: LD_INT 0
74679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74680: LD_ADDR_VAR 0 1
74684: PUSH
74685: LD_INT 22
74687: PUSH
74688: LD_OWVAR 2
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 30
74699: PUSH
74700: LD_INT 29
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PPUSH
74711: CALL_OW 69
74715: ST_TO_ADDR
// if not tmp then
74716: LD_VAR 0 1
74720: NOT
74721: IFFALSE 74725
// exit ;
74723: GO 74738
// DestroyUnit ( tmp [ 1 ] ) ;
74725: LD_VAR 0 1
74729: PUSH
74730: LD_INT 1
74732: ARRAY
74733: PPUSH
74734: CALL_OW 65
// end ;
74738: PPOPN 1
74740: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74741: LD_EXP 47
74745: PUSH
74746: LD_EXP 85
74750: AND
74751: IFFALSE 74880
74753: GO 74755
74755: DISABLE
74756: LD_INT 0
74758: PPUSH
// begin uc_side := 0 ;
74759: LD_ADDR_OWVAR 20
74763: PUSH
74764: LD_INT 0
74766: ST_TO_ADDR
// uc_nation := nation_arabian ;
74767: LD_ADDR_OWVAR 21
74771: PUSH
74772: LD_INT 2
74774: ST_TO_ADDR
// hc_gallery :=  ;
74775: LD_ADDR_OWVAR 33
74779: PUSH
74780: LD_STRING 
74782: ST_TO_ADDR
// hc_name :=  ;
74783: LD_ADDR_OWVAR 26
74787: PUSH
74788: LD_STRING 
74790: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74791: LD_INT 1
74793: PPUSH
74794: LD_INT 11
74796: PPUSH
74797: LD_INT 10
74799: PPUSH
74800: CALL_OW 380
// un := CreateHuman ;
74804: LD_ADDR_VAR 0 1
74808: PUSH
74809: CALL_OW 44
74813: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74814: LD_VAR 0 1
74818: PPUSH
74819: LD_INT 1
74821: PPUSH
74822: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74826: LD_INT 35
74828: PPUSH
74829: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74833: LD_VAR 0 1
74837: PPUSH
74838: LD_INT 22
74840: PUSH
74841: LD_OWVAR 2
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PPUSH
74850: CALL_OW 69
74854: PPUSH
74855: LD_VAR 0 1
74859: PPUSH
74860: CALL_OW 74
74864: PPUSH
74865: CALL_OW 115
// until IsDead ( un ) ;
74869: LD_VAR 0 1
74873: PPUSH
74874: CALL_OW 301
74878: IFFALSE 74826
// end ;
74880: PPOPN 1
74882: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74883: LD_EXP 47
74887: PUSH
74888: LD_EXP 87
74892: AND
74893: IFFALSE 74905
74895: GO 74897
74897: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74898: LD_STRING earthquake(getX(game), 0, 32)
74900: PPUSH
74901: CALL_OW 559
74905: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74906: LD_EXP 47
74910: PUSH
74911: LD_EXP 88
74915: AND
74916: IFFALSE 75007
74918: GO 74920
74920: DISABLE
74921: LD_INT 0
74923: PPUSH
// begin enable ;
74924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74925: LD_ADDR_VAR 0 1
74929: PUSH
74930: LD_INT 22
74932: PUSH
74933: LD_OWVAR 2
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PUSH
74942: LD_INT 21
74944: PUSH
74945: LD_INT 2
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 33
74954: PUSH
74955: LD_INT 3
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: PPUSH
74967: CALL_OW 69
74971: ST_TO_ADDR
// if not tmp then
74972: LD_VAR 0 1
74976: NOT
74977: IFFALSE 74981
// exit ;
74979: GO 75007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74981: LD_VAR 0 1
74985: PUSH
74986: LD_INT 1
74988: PPUSH
74989: LD_VAR 0 1
74993: PPUSH
74994: CALL_OW 12
74998: ARRAY
74999: PPUSH
75000: LD_INT 1
75002: PPUSH
75003: CALL_OW 234
// end ;
75007: PPOPN 1
75009: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75010: LD_EXP 47
75014: PUSH
75015: LD_EXP 89
75019: AND
75020: IFFALSE 75161
75022: GO 75024
75024: DISABLE
75025: LD_INT 0
75027: PPUSH
75028: PPUSH
75029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75030: LD_ADDR_VAR 0 3
75034: PUSH
75035: LD_INT 22
75037: PUSH
75038: LD_OWVAR 2
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 25
75049: PUSH
75050: LD_INT 1
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PPUSH
75061: CALL_OW 69
75065: ST_TO_ADDR
// if not tmp then
75066: LD_VAR 0 3
75070: NOT
75071: IFFALSE 75075
// exit ;
75073: GO 75161
// un := tmp [ rand ( 1 , tmp ) ] ;
75075: LD_ADDR_VAR 0 2
75079: PUSH
75080: LD_VAR 0 3
75084: PUSH
75085: LD_INT 1
75087: PPUSH
75088: LD_VAR 0 3
75092: PPUSH
75093: CALL_OW 12
75097: ARRAY
75098: ST_TO_ADDR
// if Crawls ( un ) then
75099: LD_VAR 0 2
75103: PPUSH
75104: CALL_OW 318
75108: IFFALSE 75119
// ComWalk ( un ) ;
75110: LD_VAR 0 2
75114: PPUSH
75115: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
75119: LD_VAR 0 2
75123: PPUSH
75124: LD_INT 9
75126: PPUSH
75127: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
75131: LD_INT 28
75133: PPUSH
75134: LD_OWVAR 2
75138: PPUSH
75139: LD_INT 2
75141: PPUSH
75142: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
75146: LD_INT 29
75148: PPUSH
75149: LD_OWVAR 2
75153: PPUSH
75154: LD_INT 2
75156: PPUSH
75157: CALL_OW 322
// end ;
75161: PPOPN 3
75163: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
75164: LD_EXP 47
75168: PUSH
75169: LD_EXP 90
75173: AND
75174: IFFALSE 75285
75176: GO 75178
75178: DISABLE
75179: LD_INT 0
75181: PPUSH
75182: PPUSH
75183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75184: LD_ADDR_VAR 0 3
75188: PUSH
75189: LD_INT 22
75191: PUSH
75192: LD_OWVAR 2
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 25
75203: PUSH
75204: LD_INT 1
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PPUSH
75215: CALL_OW 69
75219: ST_TO_ADDR
// if not tmp then
75220: LD_VAR 0 3
75224: NOT
75225: IFFALSE 75229
// exit ;
75227: GO 75285
// un := tmp [ rand ( 1 , tmp ) ] ;
75229: LD_ADDR_VAR 0 2
75233: PUSH
75234: LD_VAR 0 3
75238: PUSH
75239: LD_INT 1
75241: PPUSH
75242: LD_VAR 0 3
75246: PPUSH
75247: CALL_OW 12
75251: ARRAY
75252: ST_TO_ADDR
// if Crawls ( un ) then
75253: LD_VAR 0 2
75257: PPUSH
75258: CALL_OW 318
75262: IFFALSE 75273
// ComWalk ( un ) ;
75264: LD_VAR 0 2
75268: PPUSH
75269: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75273: LD_VAR 0 2
75277: PPUSH
75278: LD_INT 8
75280: PPUSH
75281: CALL_OW 336
// end ;
75285: PPOPN 3
75287: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
75288: LD_EXP 47
75292: PUSH
75293: LD_EXP 91
75297: AND
75298: IFFALSE 75442
75300: GO 75302
75302: DISABLE
75303: LD_INT 0
75305: PPUSH
75306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
75307: LD_ADDR_VAR 0 2
75311: PUSH
75312: LD_INT 22
75314: PUSH
75315: LD_OWVAR 2
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 21
75326: PUSH
75327: LD_INT 2
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PUSH
75334: LD_INT 2
75336: PUSH
75337: LD_INT 34
75339: PUSH
75340: LD_INT 12
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 34
75349: PUSH
75350: LD_INT 51
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 34
75359: PUSH
75360: LD_INT 32
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: LIST
75377: PPUSH
75378: CALL_OW 69
75382: ST_TO_ADDR
// if not tmp then
75383: LD_VAR 0 2
75387: NOT
75388: IFFALSE 75392
// exit ;
75390: GO 75442
// for i in tmp do
75392: LD_ADDR_VAR 0 1
75396: PUSH
75397: LD_VAR 0 2
75401: PUSH
75402: FOR_IN
75403: IFFALSE 75440
// if GetCargo ( i , mat_artifact ) = 0 then
75405: LD_VAR 0 1
75409: PPUSH
75410: LD_INT 4
75412: PPUSH
75413: CALL_OW 289
75417: PUSH
75418: LD_INT 0
75420: EQUAL
75421: IFFALSE 75438
// SetCargo ( i , mat_siberit , 100 ) ;
75423: LD_VAR 0 1
75427: PPUSH
75428: LD_INT 3
75430: PPUSH
75431: LD_INT 100
75433: PPUSH
75434: CALL_OW 290
75438: GO 75402
75440: POP
75441: POP
// end ;
75442: PPOPN 2
75444: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75445: LD_EXP 47
75449: PUSH
75450: LD_EXP 92
75454: AND
75455: IFFALSE 75638
75457: GO 75459
75459: DISABLE
75460: LD_INT 0
75462: PPUSH
75463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75464: LD_ADDR_VAR 0 2
75468: PUSH
75469: LD_INT 22
75471: PUSH
75472: LD_OWVAR 2
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PPUSH
75481: CALL_OW 69
75485: ST_TO_ADDR
// if not tmp then
75486: LD_VAR 0 2
75490: NOT
75491: IFFALSE 75495
// exit ;
75493: GO 75638
// for i := 1 to 2 do
75495: LD_ADDR_VAR 0 1
75499: PUSH
75500: DOUBLE
75501: LD_INT 1
75503: DEC
75504: ST_TO_ADDR
75505: LD_INT 2
75507: PUSH
75508: FOR_TO
75509: IFFALSE 75636
// begin uc_side := your_side ;
75511: LD_ADDR_OWVAR 20
75515: PUSH
75516: LD_OWVAR 2
75520: ST_TO_ADDR
// uc_nation := nation_american ;
75521: LD_ADDR_OWVAR 21
75525: PUSH
75526: LD_INT 1
75528: ST_TO_ADDR
// vc_chassis := us_morphling ;
75529: LD_ADDR_OWVAR 37
75533: PUSH
75534: LD_INT 5
75536: ST_TO_ADDR
// vc_engine := engine_siberite ;
75537: LD_ADDR_OWVAR 39
75541: PUSH
75542: LD_INT 3
75544: ST_TO_ADDR
// vc_control := control_computer ;
75545: LD_ADDR_OWVAR 38
75549: PUSH
75550: LD_INT 3
75552: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75553: LD_ADDR_OWVAR 40
75557: PUSH
75558: LD_INT 10
75560: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75561: LD_VAR 0 2
75565: PUSH
75566: LD_INT 1
75568: ARRAY
75569: PPUSH
75570: CALL_OW 310
75574: NOT
75575: IFFALSE 75622
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75577: CALL_OW 45
75581: PPUSH
75582: LD_VAR 0 2
75586: PUSH
75587: LD_INT 1
75589: ARRAY
75590: PPUSH
75591: CALL_OW 250
75595: PPUSH
75596: LD_VAR 0 2
75600: PUSH
75601: LD_INT 1
75603: ARRAY
75604: PPUSH
75605: CALL_OW 251
75609: PPUSH
75610: LD_INT 12
75612: PPUSH
75613: LD_INT 1
75615: PPUSH
75616: CALL_OW 50
75620: GO 75634
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75622: CALL_OW 45
75626: PPUSH
75627: LD_INT 1
75629: PPUSH
75630: CALL_OW 51
// end ;
75634: GO 75508
75636: POP
75637: POP
// end ;
75638: PPOPN 2
75640: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75641: LD_EXP 47
75645: PUSH
75646: LD_EXP 93
75650: AND
75651: IFFALSE 75873
75653: GO 75655
75655: DISABLE
75656: LD_INT 0
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75664: LD_ADDR_VAR 0 6
75668: PUSH
75669: LD_INT 22
75671: PUSH
75672: LD_OWVAR 2
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 21
75683: PUSH
75684: LD_INT 1
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PUSH
75691: LD_INT 3
75693: PUSH
75694: LD_INT 23
75696: PUSH
75697: LD_INT 0
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: LIST
75712: PPUSH
75713: CALL_OW 69
75717: ST_TO_ADDR
// if not tmp then
75718: LD_VAR 0 6
75722: NOT
75723: IFFALSE 75727
// exit ;
75725: GO 75873
// s1 := rand ( 1 , 4 ) ;
75727: LD_ADDR_VAR 0 2
75731: PUSH
75732: LD_INT 1
75734: PPUSH
75735: LD_INT 4
75737: PPUSH
75738: CALL_OW 12
75742: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75743: LD_ADDR_VAR 0 4
75747: PUSH
75748: LD_VAR 0 6
75752: PUSH
75753: LD_INT 1
75755: ARRAY
75756: PPUSH
75757: LD_VAR 0 2
75761: PPUSH
75762: CALL_OW 259
75766: ST_TO_ADDR
// if s1 = 1 then
75767: LD_VAR 0 2
75771: PUSH
75772: LD_INT 1
75774: EQUAL
75775: IFFALSE 75795
// s2 := rand ( 2 , 4 ) else
75777: LD_ADDR_VAR 0 3
75781: PUSH
75782: LD_INT 2
75784: PPUSH
75785: LD_INT 4
75787: PPUSH
75788: CALL_OW 12
75792: ST_TO_ADDR
75793: GO 75803
// s2 := 1 ;
75795: LD_ADDR_VAR 0 3
75799: PUSH
75800: LD_INT 1
75802: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75803: LD_ADDR_VAR 0 5
75807: PUSH
75808: LD_VAR 0 6
75812: PUSH
75813: LD_INT 1
75815: ARRAY
75816: PPUSH
75817: LD_VAR 0 3
75821: PPUSH
75822: CALL_OW 259
75826: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75827: LD_VAR 0 6
75831: PUSH
75832: LD_INT 1
75834: ARRAY
75835: PPUSH
75836: LD_VAR 0 2
75840: PPUSH
75841: LD_VAR 0 5
75845: PPUSH
75846: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75850: LD_VAR 0 6
75854: PUSH
75855: LD_INT 1
75857: ARRAY
75858: PPUSH
75859: LD_VAR 0 3
75863: PPUSH
75864: LD_VAR 0 4
75868: PPUSH
75869: CALL_OW 237
// end ;
75873: PPOPN 6
75875: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75876: LD_EXP 47
75880: PUSH
75881: LD_EXP 94
75885: AND
75886: IFFALSE 75965
75888: GO 75890
75890: DISABLE
75891: LD_INT 0
75893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75894: LD_ADDR_VAR 0 1
75898: PUSH
75899: LD_INT 22
75901: PUSH
75902: LD_OWVAR 2
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 30
75913: PUSH
75914: LD_INT 3
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PPUSH
75925: CALL_OW 69
75929: ST_TO_ADDR
// if not tmp then
75930: LD_VAR 0 1
75934: NOT
75935: IFFALSE 75939
// exit ;
75937: GO 75965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75939: LD_VAR 0 1
75943: PUSH
75944: LD_INT 1
75946: PPUSH
75947: LD_VAR 0 1
75951: PPUSH
75952: CALL_OW 12
75956: ARRAY
75957: PPUSH
75958: LD_INT 1
75960: PPUSH
75961: CALL_OW 234
// end ;
75965: PPOPN 1
75967: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75968: LD_EXP 47
75972: PUSH
75973: LD_EXP 95
75977: AND
75978: IFFALSE 76090
75980: GO 75982
75982: DISABLE
75983: LD_INT 0
75985: PPUSH
75986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75987: LD_ADDR_VAR 0 2
75991: PUSH
75992: LD_INT 22
75994: PUSH
75995: LD_OWVAR 2
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PUSH
76004: LD_INT 2
76006: PUSH
76007: LD_INT 30
76009: PUSH
76010: LD_INT 27
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 30
76019: PUSH
76020: LD_INT 26
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 30
76029: PUSH
76030: LD_INT 28
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PPUSH
76047: CALL_OW 69
76051: ST_TO_ADDR
// if not tmp then
76052: LD_VAR 0 2
76056: NOT
76057: IFFALSE 76061
// exit ;
76059: GO 76090
// for i in tmp do
76061: LD_ADDR_VAR 0 1
76065: PUSH
76066: LD_VAR 0 2
76070: PUSH
76071: FOR_IN
76072: IFFALSE 76088
// SetLives ( i , 1 ) ;
76074: LD_VAR 0 1
76078: PPUSH
76079: LD_INT 1
76081: PPUSH
76082: CALL_OW 234
76086: GO 76071
76088: POP
76089: POP
// end ;
76090: PPOPN 2
76092: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
76093: LD_EXP 47
76097: PUSH
76098: LD_EXP 96
76102: AND
76103: IFFALSE 76390
76105: GO 76107
76107: DISABLE
76108: LD_INT 0
76110: PPUSH
76111: PPUSH
76112: PPUSH
// begin i := rand ( 1 , 7 ) ;
76113: LD_ADDR_VAR 0 1
76117: PUSH
76118: LD_INT 1
76120: PPUSH
76121: LD_INT 7
76123: PPUSH
76124: CALL_OW 12
76128: ST_TO_ADDR
// case i of 1 :
76129: LD_VAR 0 1
76133: PUSH
76134: LD_INT 1
76136: DOUBLE
76137: EQUAL
76138: IFTRUE 76142
76140: GO 76152
76142: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
76143: LD_STRING earthquake(getX(game), 0, 32)
76145: PPUSH
76146: CALL_OW 559
76150: GO 76390
76152: LD_INT 2
76154: DOUBLE
76155: EQUAL
76156: IFTRUE 76160
76158: GO 76174
76160: POP
// begin ToLua ( displayStucuk(); ) ;
76161: LD_STRING displayStucuk();
76163: PPUSH
76164: CALL_OW 559
// ResetFog ;
76168: CALL_OW 335
// end ; 3 :
76172: GO 76390
76174: LD_INT 3
76176: DOUBLE
76177: EQUAL
76178: IFTRUE 76182
76180: GO 76286
76182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76183: LD_ADDR_VAR 0 2
76187: PUSH
76188: LD_INT 22
76190: PUSH
76191: LD_OWVAR 2
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 25
76202: PUSH
76203: LD_INT 1
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PPUSH
76214: CALL_OW 69
76218: ST_TO_ADDR
// if not tmp then
76219: LD_VAR 0 2
76223: NOT
76224: IFFALSE 76228
// exit ;
76226: GO 76390
// un := tmp [ rand ( 1 , tmp ) ] ;
76228: LD_ADDR_VAR 0 3
76232: PUSH
76233: LD_VAR 0 2
76237: PUSH
76238: LD_INT 1
76240: PPUSH
76241: LD_VAR 0 2
76245: PPUSH
76246: CALL_OW 12
76250: ARRAY
76251: ST_TO_ADDR
// if Crawls ( un ) then
76252: LD_VAR 0 3
76256: PPUSH
76257: CALL_OW 318
76261: IFFALSE 76272
// ComWalk ( un ) ;
76263: LD_VAR 0 3
76267: PPUSH
76268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76272: LD_VAR 0 3
76276: PPUSH
76277: LD_INT 8
76279: PPUSH
76280: CALL_OW 336
// end ; 4 :
76284: GO 76390
76286: LD_INT 4
76288: DOUBLE
76289: EQUAL
76290: IFTRUE 76294
76292: GO 76368
76294: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76295: LD_ADDR_VAR 0 2
76299: PUSH
76300: LD_INT 22
76302: PUSH
76303: LD_OWVAR 2
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PUSH
76312: LD_INT 30
76314: PUSH
76315: LD_INT 29
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PPUSH
76326: CALL_OW 69
76330: ST_TO_ADDR
// if not tmp then
76331: LD_VAR 0 2
76335: NOT
76336: IFFALSE 76340
// exit ;
76338: GO 76390
// CenterNowOnUnits ( tmp [ 1 ] ) ;
76340: LD_VAR 0 2
76344: PUSH
76345: LD_INT 1
76347: ARRAY
76348: PPUSH
76349: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
76353: LD_VAR 0 2
76357: PUSH
76358: LD_INT 1
76360: ARRAY
76361: PPUSH
76362: CALL_OW 65
// end ; 5 .. 7 :
76366: GO 76390
76368: LD_INT 5
76370: DOUBLE
76371: GREATEREQUAL
76372: IFFALSE 76380
76374: LD_INT 7
76376: DOUBLE
76377: LESSEQUAL
76378: IFTRUE 76382
76380: GO 76389
76382: POP
// StreamSibBomb ; end ;
76383: CALL 72627 0 0
76387: GO 76390
76389: POP
// end ;
76390: PPOPN 3
76392: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
76393: LD_EXP 47
76397: PUSH
76398: LD_EXP 97
76402: AND
76403: IFFALSE 76559
76405: GO 76407
76407: DISABLE
76408: LD_INT 0
76410: PPUSH
76411: PPUSH
76412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
76413: LD_ADDR_VAR 0 2
76417: PUSH
76418: LD_INT 81
76420: PUSH
76421: LD_OWVAR 2
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 2
76432: PUSH
76433: LD_INT 21
76435: PUSH
76436: LD_INT 1
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 21
76445: PUSH
76446: LD_INT 2
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: LIST
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PPUSH
76462: CALL_OW 69
76466: ST_TO_ADDR
// if not tmp then
76467: LD_VAR 0 2
76471: NOT
76472: IFFALSE 76476
// exit ;
76474: GO 76559
// p := 0 ;
76476: LD_ADDR_VAR 0 3
76480: PUSH
76481: LD_INT 0
76483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76484: LD_INT 35
76486: PPUSH
76487: CALL_OW 67
// p := p + 1 ;
76491: LD_ADDR_VAR 0 3
76495: PUSH
76496: LD_VAR 0 3
76500: PUSH
76501: LD_INT 1
76503: PLUS
76504: ST_TO_ADDR
// for i in tmp do
76505: LD_ADDR_VAR 0 1
76509: PUSH
76510: LD_VAR 0 2
76514: PUSH
76515: FOR_IN
76516: IFFALSE 76547
// if GetLives ( i ) < 1000 then
76518: LD_VAR 0 1
76522: PPUSH
76523: CALL_OW 256
76527: PUSH
76528: LD_INT 1000
76530: LESS
76531: IFFALSE 76545
// SetLives ( i , 1000 ) ;
76533: LD_VAR 0 1
76537: PPUSH
76538: LD_INT 1000
76540: PPUSH
76541: CALL_OW 234
76545: GO 76515
76547: POP
76548: POP
// until p > 20 ;
76549: LD_VAR 0 3
76553: PUSH
76554: LD_INT 20
76556: GREATER
76557: IFFALSE 76484
// end ;
76559: PPOPN 3
76561: END
// every 0 0$1 trigger StreamModeActive and sTime do
76562: LD_EXP 47
76566: PUSH
76567: LD_EXP 98
76571: AND
76572: IFFALSE 76607
76574: GO 76576
76576: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76577: LD_INT 28
76579: PPUSH
76580: LD_OWVAR 2
76584: PPUSH
76585: LD_INT 2
76587: PPUSH
76588: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76592: LD_INT 30
76594: PPUSH
76595: LD_OWVAR 2
76599: PPUSH
76600: LD_INT 2
76602: PPUSH
76603: CALL_OW 322
// end ;
76607: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76608: LD_EXP 47
76612: PUSH
76613: LD_EXP 99
76617: AND
76618: IFFALSE 76739
76620: GO 76622
76622: DISABLE
76623: LD_INT 0
76625: PPUSH
76626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76627: LD_ADDR_VAR 0 2
76631: PUSH
76632: LD_INT 22
76634: PUSH
76635: LD_OWVAR 2
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 21
76646: PUSH
76647: LD_INT 1
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 3
76656: PUSH
76657: LD_INT 23
76659: PUSH
76660: LD_INT 0
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: LIST
76675: PPUSH
76676: CALL_OW 69
76680: ST_TO_ADDR
// if not tmp then
76681: LD_VAR 0 2
76685: NOT
76686: IFFALSE 76690
// exit ;
76688: GO 76739
// for i in tmp do
76690: LD_ADDR_VAR 0 1
76694: PUSH
76695: LD_VAR 0 2
76699: PUSH
76700: FOR_IN
76701: IFFALSE 76737
// begin if Crawls ( i ) then
76703: LD_VAR 0 1
76707: PPUSH
76708: CALL_OW 318
76712: IFFALSE 76723
// ComWalk ( i ) ;
76714: LD_VAR 0 1
76718: PPUSH
76719: CALL_OW 138
// SetClass ( i , 2 ) ;
76723: LD_VAR 0 1
76727: PPUSH
76728: LD_INT 2
76730: PPUSH
76731: CALL_OW 336
// end ;
76735: GO 76700
76737: POP
76738: POP
// end ;
76739: PPOPN 2
76741: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76742: LD_EXP 47
76746: PUSH
76747: LD_EXP 100
76751: AND
76752: IFFALSE 77040
76754: GO 76756
76756: DISABLE
76757: LD_INT 0
76759: PPUSH
76760: PPUSH
76761: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76762: LD_OWVAR 2
76766: PPUSH
76767: LD_INT 9
76769: PPUSH
76770: LD_INT 1
76772: PPUSH
76773: LD_INT 1
76775: PPUSH
76776: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76780: LD_INT 9
76782: PPUSH
76783: LD_OWVAR 2
76787: PPUSH
76788: CALL_OW 343
// uc_side := 9 ;
76792: LD_ADDR_OWVAR 20
76796: PUSH
76797: LD_INT 9
76799: ST_TO_ADDR
// uc_nation := 2 ;
76800: LD_ADDR_OWVAR 21
76804: PUSH
76805: LD_INT 2
76807: ST_TO_ADDR
// hc_name := Dark Warrior ;
76808: LD_ADDR_OWVAR 26
76812: PUSH
76813: LD_STRING Dark Warrior
76815: ST_TO_ADDR
// hc_gallery :=  ;
76816: LD_ADDR_OWVAR 33
76820: PUSH
76821: LD_STRING 
76823: ST_TO_ADDR
// hc_noskilllimit := true ;
76824: LD_ADDR_OWVAR 76
76828: PUSH
76829: LD_INT 1
76831: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76832: LD_ADDR_OWVAR 31
76836: PUSH
76837: LD_INT 30
76839: PUSH
76840: LD_INT 30
76842: PUSH
76843: LD_INT 30
76845: PUSH
76846: LD_INT 30
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: ST_TO_ADDR
// un := CreateHuman ;
76855: LD_ADDR_VAR 0 3
76859: PUSH
76860: CALL_OW 44
76864: ST_TO_ADDR
// hc_noskilllimit := false ;
76865: LD_ADDR_OWVAR 76
76869: PUSH
76870: LD_INT 0
76872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76873: LD_VAR 0 3
76877: PPUSH
76878: LD_INT 1
76880: PPUSH
76881: CALL_OW 51
// ToLua ( playRanger() ) ;
76885: LD_STRING playRanger()
76887: PPUSH
76888: CALL_OW 559
// p := 0 ;
76892: LD_ADDR_VAR 0 2
76896: PUSH
76897: LD_INT 0
76899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76900: LD_INT 35
76902: PPUSH
76903: CALL_OW 67
// p := p + 1 ;
76907: LD_ADDR_VAR 0 2
76911: PUSH
76912: LD_VAR 0 2
76916: PUSH
76917: LD_INT 1
76919: PLUS
76920: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76921: LD_VAR 0 3
76925: PPUSH
76926: CALL_OW 256
76930: PUSH
76931: LD_INT 1000
76933: LESS
76934: IFFALSE 76948
// SetLives ( un , 1000 ) ;
76936: LD_VAR 0 3
76940: PPUSH
76941: LD_INT 1000
76943: PPUSH
76944: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76948: LD_VAR 0 3
76952: PPUSH
76953: LD_INT 81
76955: PUSH
76956: LD_OWVAR 2
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 91
76967: PUSH
76968: LD_VAR 0 3
76972: PUSH
76973: LD_INT 30
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: LIST
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: PPUSH
76985: CALL_OW 69
76989: PPUSH
76990: LD_VAR 0 3
76994: PPUSH
76995: CALL_OW 74
76999: PPUSH
77000: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77004: LD_VAR 0 2
77008: PUSH
77009: LD_INT 80
77011: GREATER
77012: PUSH
77013: LD_VAR 0 3
77017: PPUSH
77018: CALL_OW 301
77022: OR
77023: IFFALSE 76900
// if un then
77025: LD_VAR 0 3
77029: IFFALSE 77040
// RemoveUnit ( un ) ;
77031: LD_VAR 0 3
77035: PPUSH
77036: CALL_OW 64
// end ;
77040: PPOPN 3
77042: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
77043: LD_EXP 101
77047: IFFALSE 77163
77049: GO 77051
77051: DISABLE
77052: LD_INT 0
77054: PPUSH
77055: PPUSH
77056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77057: LD_ADDR_VAR 0 2
77061: PUSH
77062: LD_INT 81
77064: PUSH
77065: LD_OWVAR 2
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: PUSH
77074: LD_INT 21
77076: PUSH
77077: LD_INT 1
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PPUSH
77088: CALL_OW 69
77092: ST_TO_ADDR
// ToLua ( playComputer() ) ;
77093: LD_STRING playComputer()
77095: PPUSH
77096: CALL_OW 559
// if not tmp then
77100: LD_VAR 0 2
77104: NOT
77105: IFFALSE 77109
// exit ;
77107: GO 77163
// for i in tmp do
77109: LD_ADDR_VAR 0 1
77113: PUSH
77114: LD_VAR 0 2
77118: PUSH
77119: FOR_IN
77120: IFFALSE 77161
// for j := 1 to 4 do
77122: LD_ADDR_VAR 0 3
77126: PUSH
77127: DOUBLE
77128: LD_INT 1
77130: DEC
77131: ST_TO_ADDR
77132: LD_INT 4
77134: PUSH
77135: FOR_TO
77136: IFFALSE 77157
// SetSkill ( i , j , 10 ) ;
77138: LD_VAR 0 1
77142: PPUSH
77143: LD_VAR 0 3
77147: PPUSH
77148: LD_INT 10
77150: PPUSH
77151: CALL_OW 237
77155: GO 77135
77157: POP
77158: POP
77159: GO 77119
77161: POP
77162: POP
// end ;
77163: PPOPN 3
77165: END
// every 0 0$1 trigger s30 do var i , tmp ;
77166: LD_EXP 102
77170: IFFALSE 77239
77172: GO 77174
77174: DISABLE
77175: LD_INT 0
77177: PPUSH
77178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77179: LD_ADDR_VAR 0 2
77183: PUSH
77184: LD_INT 22
77186: PUSH
77187: LD_OWVAR 2
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: PPUSH
77196: CALL_OW 69
77200: ST_TO_ADDR
// if not tmp then
77201: LD_VAR 0 2
77205: NOT
77206: IFFALSE 77210
// exit ;
77208: GO 77239
// for i in tmp do
77210: LD_ADDR_VAR 0 1
77214: PUSH
77215: LD_VAR 0 2
77219: PUSH
77220: FOR_IN
77221: IFFALSE 77237
// SetLives ( i , 300 ) ;
77223: LD_VAR 0 1
77227: PPUSH
77228: LD_INT 300
77230: PPUSH
77231: CALL_OW 234
77235: GO 77220
77237: POP
77238: POP
// end ;
77239: PPOPN 2
77241: END
// every 0 0$1 trigger s60 do var i , tmp ;
77242: LD_EXP 103
77246: IFFALSE 77315
77248: GO 77250
77250: DISABLE
77251: LD_INT 0
77253: PPUSH
77254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77255: LD_ADDR_VAR 0 2
77259: PUSH
77260: LD_INT 22
77262: PUSH
77263: LD_OWVAR 2
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PPUSH
77272: CALL_OW 69
77276: ST_TO_ADDR
// if not tmp then
77277: LD_VAR 0 2
77281: NOT
77282: IFFALSE 77286
// exit ;
77284: GO 77315
// for i in tmp do
77286: LD_ADDR_VAR 0 1
77290: PUSH
77291: LD_VAR 0 2
77295: PUSH
77296: FOR_IN
77297: IFFALSE 77313
// SetLives ( i , 600 ) ;
77299: LD_VAR 0 1
77303: PPUSH
77304: LD_INT 600
77306: PPUSH
77307: CALL_OW 234
77311: GO 77296
77313: POP
77314: POP
// end ;
77315: PPOPN 2
77317: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
77318: LD_INT 0
77320: PPUSH
// case cmd of 301 :
77321: LD_VAR 0 1
77325: PUSH
77326: LD_INT 301
77328: DOUBLE
77329: EQUAL
77330: IFTRUE 77334
77332: GO 77366
77334: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
77335: LD_VAR 0 6
77339: PPUSH
77340: LD_VAR 0 7
77344: PPUSH
77345: LD_VAR 0 8
77349: PPUSH
77350: LD_VAR 0 4
77354: PPUSH
77355: LD_VAR 0 5
77359: PPUSH
77360: CALL 78575 0 5
77364: GO 77487
77366: LD_INT 302
77368: DOUBLE
77369: EQUAL
77370: IFTRUE 77374
77372: GO 77411
77374: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
77375: LD_VAR 0 6
77379: PPUSH
77380: LD_VAR 0 7
77384: PPUSH
77385: LD_VAR 0 8
77389: PPUSH
77390: LD_VAR 0 9
77394: PPUSH
77395: LD_VAR 0 4
77399: PPUSH
77400: LD_VAR 0 5
77404: PPUSH
77405: CALL 78666 0 6
77409: GO 77487
77411: LD_INT 303
77413: DOUBLE
77414: EQUAL
77415: IFTRUE 77419
77417: GO 77456
77419: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
77420: LD_VAR 0 6
77424: PPUSH
77425: LD_VAR 0 7
77429: PPUSH
77430: LD_VAR 0 8
77434: PPUSH
77435: LD_VAR 0 9
77439: PPUSH
77440: LD_VAR 0 4
77444: PPUSH
77445: LD_VAR 0 5
77449: PPUSH
77450: CALL 77492 0 6
77454: GO 77487
77456: LD_INT 304
77458: DOUBLE
77459: EQUAL
77460: IFTRUE 77464
77462: GO 77486
77464: POP
// hHackTeleport ( unit , x , y ) ; end ;
77465: LD_VAR 0 2
77469: PPUSH
77470: LD_VAR 0 4
77474: PPUSH
77475: LD_VAR 0 5
77479: PPUSH
77480: CALL 79259 0 3
77484: GO 77487
77486: POP
// end ;
77487: LD_VAR 0 12
77491: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77492: LD_INT 0
77494: PPUSH
77495: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77496: LD_VAR 0 1
77500: PUSH
77501: LD_INT 1
77503: LESS
77504: PUSH
77505: LD_VAR 0 1
77509: PUSH
77510: LD_INT 3
77512: GREATER
77513: OR
77514: PUSH
77515: LD_VAR 0 5
77519: PPUSH
77520: LD_VAR 0 6
77524: PPUSH
77525: CALL_OW 428
77529: OR
77530: IFFALSE 77534
// exit ;
77532: GO 78262
// uc_side := your_side ;
77534: LD_ADDR_OWVAR 20
77538: PUSH
77539: LD_OWVAR 2
77543: ST_TO_ADDR
// uc_nation := nation ;
77544: LD_ADDR_OWVAR 21
77548: PUSH
77549: LD_VAR 0 1
77553: ST_TO_ADDR
// bc_level = 1 ;
77554: LD_ADDR_OWVAR 43
77558: PUSH
77559: LD_INT 1
77561: ST_TO_ADDR
// case btype of 1 :
77562: LD_VAR 0 2
77566: PUSH
77567: LD_INT 1
77569: DOUBLE
77570: EQUAL
77571: IFTRUE 77575
77573: GO 77586
77575: POP
// bc_type := b_depot ; 2 :
77576: LD_ADDR_OWVAR 42
77580: PUSH
77581: LD_INT 0
77583: ST_TO_ADDR
77584: GO 78206
77586: LD_INT 2
77588: DOUBLE
77589: EQUAL
77590: IFTRUE 77594
77592: GO 77605
77594: POP
// bc_type := b_warehouse ; 3 :
77595: LD_ADDR_OWVAR 42
77599: PUSH
77600: LD_INT 1
77602: ST_TO_ADDR
77603: GO 78206
77605: LD_INT 3
77607: DOUBLE
77608: EQUAL
77609: IFTRUE 77613
77611: GO 77624
77613: POP
// bc_type := b_lab ; 4 .. 9 :
77614: LD_ADDR_OWVAR 42
77618: PUSH
77619: LD_INT 6
77621: ST_TO_ADDR
77622: GO 78206
77624: LD_INT 4
77626: DOUBLE
77627: GREATEREQUAL
77628: IFFALSE 77636
77630: LD_INT 9
77632: DOUBLE
77633: LESSEQUAL
77634: IFTRUE 77638
77636: GO 77698
77638: POP
// begin bc_type := b_lab_half ;
77639: LD_ADDR_OWVAR 42
77643: PUSH
77644: LD_INT 7
77646: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77647: LD_ADDR_OWVAR 44
77651: PUSH
77652: LD_INT 10
77654: PUSH
77655: LD_INT 11
77657: PUSH
77658: LD_INT 12
77660: PUSH
77661: LD_INT 15
77663: PUSH
77664: LD_INT 14
77666: PUSH
77667: LD_INT 13
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: LIST
77676: LIST
77677: PUSH
77678: LD_VAR 0 2
77682: PUSH
77683: LD_INT 3
77685: MINUS
77686: ARRAY
77687: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77688: LD_ADDR_OWVAR 45
77692: PUSH
77693: LD_INT 9
77695: ST_TO_ADDR
// end ; 10 .. 13 :
77696: GO 78206
77698: LD_INT 10
77700: DOUBLE
77701: GREATEREQUAL
77702: IFFALSE 77710
77704: LD_INT 13
77706: DOUBLE
77707: LESSEQUAL
77708: IFTRUE 77712
77710: GO 77789
77712: POP
// begin bc_type := b_lab_full ;
77713: LD_ADDR_OWVAR 42
77717: PUSH
77718: LD_INT 8
77720: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77721: LD_ADDR_OWVAR 44
77725: PUSH
77726: LD_INT 10
77728: PUSH
77729: LD_INT 12
77731: PUSH
77732: LD_INT 14
77734: PUSH
77735: LD_INT 13
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: PUSH
77744: LD_VAR 0 2
77748: PUSH
77749: LD_INT 9
77751: MINUS
77752: ARRAY
77753: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77754: LD_ADDR_OWVAR 45
77758: PUSH
77759: LD_INT 11
77761: PUSH
77762: LD_INT 15
77764: PUSH
77765: LD_INT 12
77767: PUSH
77768: LD_INT 15
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: LIST
77775: LIST
77776: PUSH
77777: LD_VAR 0 2
77781: PUSH
77782: LD_INT 9
77784: MINUS
77785: ARRAY
77786: ST_TO_ADDR
// end ; 14 :
77787: GO 78206
77789: LD_INT 14
77791: DOUBLE
77792: EQUAL
77793: IFTRUE 77797
77795: GO 77808
77797: POP
// bc_type := b_workshop ; 15 :
77798: LD_ADDR_OWVAR 42
77802: PUSH
77803: LD_INT 2
77805: ST_TO_ADDR
77806: GO 78206
77808: LD_INT 15
77810: DOUBLE
77811: EQUAL
77812: IFTRUE 77816
77814: GO 77827
77816: POP
// bc_type := b_factory ; 16 :
77817: LD_ADDR_OWVAR 42
77821: PUSH
77822: LD_INT 3
77824: ST_TO_ADDR
77825: GO 78206
77827: LD_INT 16
77829: DOUBLE
77830: EQUAL
77831: IFTRUE 77835
77833: GO 77846
77835: POP
// bc_type := b_ext_gun ; 17 :
77836: LD_ADDR_OWVAR 42
77840: PUSH
77841: LD_INT 17
77843: ST_TO_ADDR
77844: GO 78206
77846: LD_INT 17
77848: DOUBLE
77849: EQUAL
77850: IFTRUE 77854
77852: GO 77882
77854: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77855: LD_ADDR_OWVAR 42
77859: PUSH
77860: LD_INT 19
77862: PUSH
77863: LD_INT 23
77865: PUSH
77866: LD_INT 19
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: LIST
77873: PUSH
77874: LD_VAR 0 1
77878: ARRAY
77879: ST_TO_ADDR
77880: GO 78206
77882: LD_INT 18
77884: DOUBLE
77885: EQUAL
77886: IFTRUE 77890
77888: GO 77901
77890: POP
// bc_type := b_ext_radar ; 19 :
77891: LD_ADDR_OWVAR 42
77895: PUSH
77896: LD_INT 20
77898: ST_TO_ADDR
77899: GO 78206
77901: LD_INT 19
77903: DOUBLE
77904: EQUAL
77905: IFTRUE 77909
77907: GO 77920
77909: POP
// bc_type := b_ext_radio ; 20 :
77910: LD_ADDR_OWVAR 42
77914: PUSH
77915: LD_INT 22
77917: ST_TO_ADDR
77918: GO 78206
77920: LD_INT 20
77922: DOUBLE
77923: EQUAL
77924: IFTRUE 77928
77926: GO 77939
77928: POP
// bc_type := b_ext_siberium ; 21 :
77929: LD_ADDR_OWVAR 42
77933: PUSH
77934: LD_INT 21
77936: ST_TO_ADDR
77937: GO 78206
77939: LD_INT 21
77941: DOUBLE
77942: EQUAL
77943: IFTRUE 77947
77945: GO 77958
77947: POP
// bc_type := b_ext_computer ; 22 :
77948: LD_ADDR_OWVAR 42
77952: PUSH
77953: LD_INT 24
77955: ST_TO_ADDR
77956: GO 78206
77958: LD_INT 22
77960: DOUBLE
77961: EQUAL
77962: IFTRUE 77966
77964: GO 77977
77966: POP
// bc_type := b_ext_track ; 23 :
77967: LD_ADDR_OWVAR 42
77971: PUSH
77972: LD_INT 16
77974: ST_TO_ADDR
77975: GO 78206
77977: LD_INT 23
77979: DOUBLE
77980: EQUAL
77981: IFTRUE 77985
77983: GO 77996
77985: POP
// bc_type := b_ext_laser ; 24 :
77986: LD_ADDR_OWVAR 42
77990: PUSH
77991: LD_INT 25
77993: ST_TO_ADDR
77994: GO 78206
77996: LD_INT 24
77998: DOUBLE
77999: EQUAL
78000: IFTRUE 78004
78002: GO 78015
78004: POP
// bc_type := b_control_tower ; 25 :
78005: LD_ADDR_OWVAR 42
78009: PUSH
78010: LD_INT 36
78012: ST_TO_ADDR
78013: GO 78206
78015: LD_INT 25
78017: DOUBLE
78018: EQUAL
78019: IFTRUE 78023
78021: GO 78034
78023: POP
// bc_type := b_breastwork ; 26 :
78024: LD_ADDR_OWVAR 42
78028: PUSH
78029: LD_INT 31
78031: ST_TO_ADDR
78032: GO 78206
78034: LD_INT 26
78036: DOUBLE
78037: EQUAL
78038: IFTRUE 78042
78040: GO 78053
78042: POP
// bc_type := b_bunker ; 27 :
78043: LD_ADDR_OWVAR 42
78047: PUSH
78048: LD_INT 32
78050: ST_TO_ADDR
78051: GO 78206
78053: LD_INT 27
78055: DOUBLE
78056: EQUAL
78057: IFTRUE 78061
78059: GO 78072
78061: POP
// bc_type := b_turret ; 28 :
78062: LD_ADDR_OWVAR 42
78066: PUSH
78067: LD_INT 33
78069: ST_TO_ADDR
78070: GO 78206
78072: LD_INT 28
78074: DOUBLE
78075: EQUAL
78076: IFTRUE 78080
78078: GO 78091
78080: POP
// bc_type := b_armoury ; 29 :
78081: LD_ADDR_OWVAR 42
78085: PUSH
78086: LD_INT 4
78088: ST_TO_ADDR
78089: GO 78206
78091: LD_INT 29
78093: DOUBLE
78094: EQUAL
78095: IFTRUE 78099
78097: GO 78110
78099: POP
// bc_type := b_barracks ; 30 :
78100: LD_ADDR_OWVAR 42
78104: PUSH
78105: LD_INT 5
78107: ST_TO_ADDR
78108: GO 78206
78110: LD_INT 30
78112: DOUBLE
78113: EQUAL
78114: IFTRUE 78118
78116: GO 78129
78118: POP
// bc_type := b_solar_power ; 31 :
78119: LD_ADDR_OWVAR 42
78123: PUSH
78124: LD_INT 27
78126: ST_TO_ADDR
78127: GO 78206
78129: LD_INT 31
78131: DOUBLE
78132: EQUAL
78133: IFTRUE 78137
78135: GO 78148
78137: POP
// bc_type := b_oil_power ; 32 :
78138: LD_ADDR_OWVAR 42
78142: PUSH
78143: LD_INT 26
78145: ST_TO_ADDR
78146: GO 78206
78148: LD_INT 32
78150: DOUBLE
78151: EQUAL
78152: IFTRUE 78156
78154: GO 78167
78156: POP
// bc_type := b_siberite_power ; 33 :
78157: LD_ADDR_OWVAR 42
78161: PUSH
78162: LD_INT 28
78164: ST_TO_ADDR
78165: GO 78206
78167: LD_INT 33
78169: DOUBLE
78170: EQUAL
78171: IFTRUE 78175
78173: GO 78186
78175: POP
// bc_type := b_oil_mine ; 34 :
78176: LD_ADDR_OWVAR 42
78180: PUSH
78181: LD_INT 29
78183: ST_TO_ADDR
78184: GO 78206
78186: LD_INT 34
78188: DOUBLE
78189: EQUAL
78190: IFTRUE 78194
78192: GO 78205
78194: POP
// bc_type := b_siberite_mine ; end ;
78195: LD_ADDR_OWVAR 42
78199: PUSH
78200: LD_INT 30
78202: ST_TO_ADDR
78203: GO 78206
78205: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
78206: LD_ADDR_VAR 0 8
78210: PUSH
78211: LD_VAR 0 5
78215: PPUSH
78216: LD_VAR 0 6
78220: PPUSH
78221: LD_VAR 0 3
78225: PPUSH
78226: CALL_OW 47
78230: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
78231: LD_OWVAR 42
78235: PUSH
78236: LD_INT 32
78238: PUSH
78239: LD_INT 33
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: IN
78246: IFFALSE 78262
// PlaceWeaponTurret ( b , weapon ) ;
78248: LD_VAR 0 8
78252: PPUSH
78253: LD_VAR 0 4
78257: PPUSH
78258: CALL_OW 431
// end ;
78262: LD_VAR 0 7
78266: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78267: LD_INT 0
78269: PPUSH
78270: PPUSH
78271: PPUSH
78272: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78273: LD_ADDR_VAR 0 4
78277: PUSH
78278: LD_INT 22
78280: PUSH
78281: LD_OWVAR 2
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: PUSH
78290: LD_INT 2
78292: PUSH
78293: LD_INT 30
78295: PUSH
78296: LD_INT 0
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: LD_INT 30
78305: PUSH
78306: LD_INT 1
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: LIST
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PPUSH
78322: CALL_OW 69
78326: ST_TO_ADDR
// if not tmp then
78327: LD_VAR 0 4
78331: NOT
78332: IFFALSE 78336
// exit ;
78334: GO 78395
// for i in tmp do
78336: LD_ADDR_VAR 0 2
78340: PUSH
78341: LD_VAR 0 4
78345: PUSH
78346: FOR_IN
78347: IFFALSE 78393
// for j = 1 to 3 do
78349: LD_ADDR_VAR 0 3
78353: PUSH
78354: DOUBLE
78355: LD_INT 1
78357: DEC
78358: ST_TO_ADDR
78359: LD_INT 3
78361: PUSH
78362: FOR_TO
78363: IFFALSE 78389
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78365: LD_VAR 0 2
78369: PPUSH
78370: CALL_OW 274
78374: PPUSH
78375: LD_VAR 0 3
78379: PPUSH
78380: LD_INT 99999
78382: PPUSH
78383: CALL_OW 277
78387: GO 78362
78389: POP
78390: POP
78391: GO 78346
78393: POP
78394: POP
// end ;
78395: LD_VAR 0 1
78399: RET
// export function hHackSetLevel10 ; var i , j ; begin
78400: LD_INT 0
78402: PPUSH
78403: PPUSH
78404: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78405: LD_ADDR_VAR 0 2
78409: PUSH
78410: LD_INT 21
78412: PUSH
78413: LD_INT 1
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PPUSH
78420: CALL_OW 69
78424: PUSH
78425: FOR_IN
78426: IFFALSE 78478
// if IsSelected ( i ) then
78428: LD_VAR 0 2
78432: PPUSH
78433: CALL_OW 306
78437: IFFALSE 78476
// begin for j := 1 to 4 do
78439: LD_ADDR_VAR 0 3
78443: PUSH
78444: DOUBLE
78445: LD_INT 1
78447: DEC
78448: ST_TO_ADDR
78449: LD_INT 4
78451: PUSH
78452: FOR_TO
78453: IFFALSE 78474
// SetSkill ( i , j , 10 ) ;
78455: LD_VAR 0 2
78459: PPUSH
78460: LD_VAR 0 3
78464: PPUSH
78465: LD_INT 10
78467: PPUSH
78468: CALL_OW 237
78472: GO 78452
78474: POP
78475: POP
// end ;
78476: GO 78425
78478: POP
78479: POP
// end ;
78480: LD_VAR 0 1
78484: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78485: LD_INT 0
78487: PPUSH
78488: PPUSH
78489: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78490: LD_ADDR_VAR 0 2
78494: PUSH
78495: LD_INT 22
78497: PUSH
78498: LD_OWVAR 2
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: LD_INT 21
78509: PUSH
78510: LD_INT 1
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PPUSH
78521: CALL_OW 69
78525: PUSH
78526: FOR_IN
78527: IFFALSE 78568
// begin for j := 1 to 4 do
78529: LD_ADDR_VAR 0 3
78533: PUSH
78534: DOUBLE
78535: LD_INT 1
78537: DEC
78538: ST_TO_ADDR
78539: LD_INT 4
78541: PUSH
78542: FOR_TO
78543: IFFALSE 78564
// SetSkill ( i , j , 10 ) ;
78545: LD_VAR 0 2
78549: PPUSH
78550: LD_VAR 0 3
78554: PPUSH
78555: LD_INT 10
78557: PPUSH
78558: CALL_OW 237
78562: GO 78542
78564: POP
78565: POP
// end ;
78566: GO 78526
78568: POP
78569: POP
// end ;
78570: LD_VAR 0 1
78574: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78575: LD_INT 0
78577: PPUSH
// uc_side := your_side ;
78578: LD_ADDR_OWVAR 20
78582: PUSH
78583: LD_OWVAR 2
78587: ST_TO_ADDR
// uc_nation := nation ;
78588: LD_ADDR_OWVAR 21
78592: PUSH
78593: LD_VAR 0 1
78597: ST_TO_ADDR
// InitHc ;
78598: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78602: LD_INT 0
78604: PPUSH
78605: LD_VAR 0 2
78609: PPUSH
78610: LD_VAR 0 3
78614: PPUSH
78615: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78619: LD_VAR 0 4
78623: PPUSH
78624: LD_VAR 0 5
78628: PPUSH
78629: CALL_OW 428
78633: PUSH
78634: LD_INT 0
78636: EQUAL
78637: IFFALSE 78661
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78639: CALL_OW 44
78643: PPUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: LD_VAR 0 5
78653: PPUSH
78654: LD_INT 1
78656: PPUSH
78657: CALL_OW 48
// end ;
78661: LD_VAR 0 6
78665: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78666: LD_INT 0
78668: PPUSH
78669: PPUSH
// uc_side := your_side ;
78670: LD_ADDR_OWVAR 20
78674: PUSH
78675: LD_OWVAR 2
78679: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78680: LD_VAR 0 1
78684: PUSH
78685: LD_INT 1
78687: PUSH
78688: LD_INT 2
78690: PUSH
78691: LD_INT 3
78693: PUSH
78694: LD_INT 4
78696: PUSH
78697: LD_INT 5
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: LIST
78704: LIST
78705: LIST
78706: IN
78707: IFFALSE 78719
// uc_nation := nation_american else
78709: LD_ADDR_OWVAR 21
78713: PUSH
78714: LD_INT 1
78716: ST_TO_ADDR
78717: GO 78762
// if chassis in [ 11 , 12 , 13 , 14 ] then
78719: LD_VAR 0 1
78723: PUSH
78724: LD_INT 11
78726: PUSH
78727: LD_INT 12
78729: PUSH
78730: LD_INT 13
78732: PUSH
78733: LD_INT 14
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: IN
78742: IFFALSE 78754
// uc_nation := nation_arabian else
78744: LD_ADDR_OWVAR 21
78748: PUSH
78749: LD_INT 2
78751: ST_TO_ADDR
78752: GO 78762
// uc_nation := nation_russian ;
78754: LD_ADDR_OWVAR 21
78758: PUSH
78759: LD_INT 3
78761: ST_TO_ADDR
// vc_chassis := chassis ;
78762: LD_ADDR_OWVAR 37
78766: PUSH
78767: LD_VAR 0 1
78771: ST_TO_ADDR
// vc_engine := engine ;
78772: LD_ADDR_OWVAR 39
78776: PUSH
78777: LD_VAR 0 2
78781: ST_TO_ADDR
// vc_control := control ;
78782: LD_ADDR_OWVAR 38
78786: PUSH
78787: LD_VAR 0 3
78791: ST_TO_ADDR
// vc_weapon := weapon ;
78792: LD_ADDR_OWVAR 40
78796: PUSH
78797: LD_VAR 0 4
78801: ST_TO_ADDR
// un := CreateVehicle ;
78802: LD_ADDR_VAR 0 8
78806: PUSH
78807: CALL_OW 45
78811: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78812: LD_VAR 0 8
78816: PPUSH
78817: LD_INT 0
78819: PPUSH
78820: LD_INT 5
78822: PPUSH
78823: CALL_OW 12
78827: PPUSH
78828: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78832: LD_VAR 0 8
78836: PPUSH
78837: LD_VAR 0 5
78841: PPUSH
78842: LD_VAR 0 6
78846: PPUSH
78847: LD_INT 1
78849: PPUSH
78850: CALL_OW 48
// end ;
78854: LD_VAR 0 7
78858: RET
// export hInvincible ; every 1 do
78859: GO 78861
78861: DISABLE
// hInvincible := [ ] ;
78862: LD_ADDR_EXP 104
78866: PUSH
78867: EMPTY
78868: ST_TO_ADDR
78869: END
// every 10 do var i ;
78870: GO 78872
78872: DISABLE
78873: LD_INT 0
78875: PPUSH
// begin enable ;
78876: ENABLE
// if not hInvincible then
78877: LD_EXP 104
78881: NOT
78882: IFFALSE 78886
// exit ;
78884: GO 78930
// for i in hInvincible do
78886: LD_ADDR_VAR 0 1
78890: PUSH
78891: LD_EXP 104
78895: PUSH
78896: FOR_IN
78897: IFFALSE 78928
// if GetLives ( i ) < 1000 then
78899: LD_VAR 0 1
78903: PPUSH
78904: CALL_OW 256
78908: PUSH
78909: LD_INT 1000
78911: LESS
78912: IFFALSE 78926
// SetLives ( i , 1000 ) ;
78914: LD_VAR 0 1
78918: PPUSH
78919: LD_INT 1000
78921: PPUSH
78922: CALL_OW 234
78926: GO 78896
78928: POP
78929: POP
// end ;
78930: PPOPN 1
78932: END
// export function hHackInvincible ; var i ; begin
78933: LD_INT 0
78935: PPUSH
78936: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78937: LD_ADDR_VAR 0 2
78941: PUSH
78942: LD_INT 2
78944: PUSH
78945: LD_INT 21
78947: PUSH
78948: LD_INT 1
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: PUSH
78955: LD_INT 21
78957: PUSH
78958: LD_INT 2
78960: PUSH
78961: EMPTY
78962: LIST
78963: LIST
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: LIST
78969: PPUSH
78970: CALL_OW 69
78974: PUSH
78975: FOR_IN
78976: IFFALSE 79037
// if IsSelected ( i ) then
78978: LD_VAR 0 2
78982: PPUSH
78983: CALL_OW 306
78987: IFFALSE 79035
// begin if i in hInvincible then
78989: LD_VAR 0 2
78993: PUSH
78994: LD_EXP 104
78998: IN
78999: IFFALSE 79019
// hInvincible := hInvincible diff i else
79001: LD_ADDR_EXP 104
79005: PUSH
79006: LD_EXP 104
79010: PUSH
79011: LD_VAR 0 2
79015: DIFF
79016: ST_TO_ADDR
79017: GO 79035
// hInvincible := hInvincible union i ;
79019: LD_ADDR_EXP 104
79023: PUSH
79024: LD_EXP 104
79028: PUSH
79029: LD_VAR 0 2
79033: UNION
79034: ST_TO_ADDR
// end ;
79035: GO 78975
79037: POP
79038: POP
// end ;
79039: LD_VAR 0 1
79043: RET
// export function hHackInvisible ; var i , j ; begin
79044: LD_INT 0
79046: PPUSH
79047: PPUSH
79048: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79049: LD_ADDR_VAR 0 2
79053: PUSH
79054: LD_INT 21
79056: PUSH
79057: LD_INT 1
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: PPUSH
79064: CALL_OW 69
79068: PUSH
79069: FOR_IN
79070: IFFALSE 79094
// if IsSelected ( i ) then
79072: LD_VAR 0 2
79076: PPUSH
79077: CALL_OW 306
79081: IFFALSE 79092
// ComForceInvisible ( i ) ;
79083: LD_VAR 0 2
79087: PPUSH
79088: CALL_OW 496
79092: GO 79069
79094: POP
79095: POP
// end ;
79096: LD_VAR 0 1
79100: RET
// export function hHackChangeYourSide ; begin
79101: LD_INT 0
79103: PPUSH
// if your_side = 8 then
79104: LD_OWVAR 2
79108: PUSH
79109: LD_INT 8
79111: EQUAL
79112: IFFALSE 79124
// your_side := 0 else
79114: LD_ADDR_OWVAR 2
79118: PUSH
79119: LD_INT 0
79121: ST_TO_ADDR
79122: GO 79138
// your_side := your_side + 1 ;
79124: LD_ADDR_OWVAR 2
79128: PUSH
79129: LD_OWVAR 2
79133: PUSH
79134: LD_INT 1
79136: PLUS
79137: ST_TO_ADDR
// end ;
79138: LD_VAR 0 1
79142: RET
// export function hHackChangeUnitSide ; var i , j ; begin
79143: LD_INT 0
79145: PPUSH
79146: PPUSH
79147: PPUSH
// for i in all_units do
79148: LD_ADDR_VAR 0 2
79152: PUSH
79153: LD_OWVAR 3
79157: PUSH
79158: FOR_IN
79159: IFFALSE 79237
// if IsSelected ( i ) then
79161: LD_VAR 0 2
79165: PPUSH
79166: CALL_OW 306
79170: IFFALSE 79235
// begin j := GetSide ( i ) ;
79172: LD_ADDR_VAR 0 3
79176: PUSH
79177: LD_VAR 0 2
79181: PPUSH
79182: CALL_OW 255
79186: ST_TO_ADDR
// if j = 8 then
79187: LD_VAR 0 3
79191: PUSH
79192: LD_INT 8
79194: EQUAL
79195: IFFALSE 79207
// j := 0 else
79197: LD_ADDR_VAR 0 3
79201: PUSH
79202: LD_INT 0
79204: ST_TO_ADDR
79205: GO 79221
// j := j + 1 ;
79207: LD_ADDR_VAR 0 3
79211: PUSH
79212: LD_VAR 0 3
79216: PUSH
79217: LD_INT 1
79219: PLUS
79220: ST_TO_ADDR
// SetSide ( i , j ) ;
79221: LD_VAR 0 2
79225: PPUSH
79226: LD_VAR 0 3
79230: PPUSH
79231: CALL_OW 235
// end ;
79235: GO 79158
79237: POP
79238: POP
// end ;
79239: LD_VAR 0 1
79243: RET
// export function hHackFog ; begin
79244: LD_INT 0
79246: PPUSH
// FogOff ( true ) ;
79247: LD_INT 1
79249: PPUSH
79250: CALL_OW 344
// end ;
79254: LD_VAR 0 1
79258: RET
// export function hHackTeleport ( unit , x , y ) ; begin
79259: LD_INT 0
79261: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
79262: LD_VAR 0 1
79266: PPUSH
79267: LD_VAR 0 2
79271: PPUSH
79272: LD_VAR 0 3
79276: PPUSH
79277: LD_INT 1
79279: PPUSH
79280: LD_INT 1
79282: PPUSH
79283: CALL_OW 483
// CenterOnXY ( x , y ) ;
79287: LD_VAR 0 2
79291: PPUSH
79292: LD_VAR 0 3
79296: PPUSH
79297: CALL_OW 84
// end ;
79301: LD_VAR 0 4
79305: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
79306: LD_INT 0
79308: PPUSH
79309: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
79310: LD_VAR 0 1
79314: NOT
79315: PUSH
79316: LD_VAR 0 2
79320: PPUSH
79321: LD_VAR 0 3
79325: PPUSH
79326: CALL_OW 488
79330: NOT
79331: OR
79332: PUSH
79333: LD_VAR 0 1
79337: PPUSH
79338: CALL_OW 266
79342: PUSH
79343: LD_INT 3
79345: NONEQUAL
79346: PUSH
79347: LD_VAR 0 1
79351: PPUSH
79352: CALL_OW 247
79356: PUSH
79357: LD_INT 1
79359: EQUAL
79360: NOT
79361: AND
79362: OR
79363: IFFALSE 79367
// exit ;
79365: GO 79649
// if GetType ( factory ) = unit_human then
79367: LD_VAR 0 1
79371: PPUSH
79372: CALL_OW 247
79376: PUSH
79377: LD_INT 1
79379: EQUAL
79380: IFFALSE 79397
// factory := IsInUnit ( factory ) ;
79382: LD_ADDR_VAR 0 1
79386: PUSH
79387: LD_VAR 0 1
79391: PPUSH
79392: CALL_OW 310
79396: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
79397: LD_VAR 0 1
79401: PPUSH
79402: CALL_OW 266
79406: PUSH
79407: LD_INT 3
79409: NONEQUAL
79410: IFFALSE 79414
// exit ;
79412: GO 79649
// for i := 1 to Count ( factoryWaypoints ) do
79414: LD_ADDR_VAR 0 5
79418: PUSH
79419: DOUBLE
79420: LD_INT 1
79422: DEC
79423: ST_TO_ADDR
79424: LD_EXP 105
79428: PPUSH
79429: CALL 18658 0 1
79433: PUSH
79434: FOR_TO
79435: IFFALSE 79597
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
79437: LD_VAR 0 2
79441: PPUSH
79442: LD_VAR 0 3
79446: PPUSH
79447: CALL_OW 428
79451: PUSH
79452: LD_EXP 105
79456: PUSH
79457: LD_VAR 0 5
79461: ARRAY
79462: PUSH
79463: LD_INT 2
79465: ARRAY
79466: EQUAL
79467: IFFALSE 79499
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
79469: LD_ADDR_EXP 105
79473: PUSH
79474: LD_EXP 105
79478: PPUSH
79479: LD_VAR 0 5
79483: PPUSH
79484: CALL_OW 3
79488: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79489: CALL 79654 0 0
// exit ;
79493: POP
79494: POP
79495: GO 79649
// end else
79497: GO 79595
// if factory = factoryWaypoints [ i ] [ 2 ] then
79499: LD_VAR 0 1
79503: PUSH
79504: LD_EXP 105
79508: PUSH
79509: LD_VAR 0 5
79513: ARRAY
79514: PUSH
79515: LD_INT 2
79517: ARRAY
79518: EQUAL
79519: IFFALSE 79595
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
79521: LD_ADDR_EXP 105
79525: PUSH
79526: LD_EXP 105
79530: PPUSH
79531: LD_VAR 0 5
79535: PPUSH
79536: CALL_OW 3
79540: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
79541: LD_ADDR_EXP 105
79545: PUSH
79546: LD_EXP 105
79550: PPUSH
79551: LD_VAR 0 1
79555: PPUSH
79556: CALL_OW 255
79560: PUSH
79561: LD_VAR 0 1
79565: PUSH
79566: LD_VAR 0 2
79570: PUSH
79571: LD_VAR 0 3
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: LIST
79580: LIST
79581: PPUSH
79582: CALL 54267 0 2
79586: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79587: CALL 79654 0 0
// exit ;
79591: POP
79592: POP
79593: GO 79649
// end ; end ;
79595: GO 79434
79597: POP
79598: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
79599: LD_ADDR_EXP 105
79603: PUSH
79604: LD_EXP 105
79608: PPUSH
79609: LD_VAR 0 1
79613: PPUSH
79614: CALL_OW 255
79618: PUSH
79619: LD_VAR 0 1
79623: PUSH
79624: LD_VAR 0 2
79628: PUSH
79629: LD_VAR 0 3
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: LIST
79638: LIST
79639: PPUSH
79640: CALL 54267 0 2
79644: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79645: CALL 79654 0 0
// end ;
79649: LD_VAR 0 4
79653: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79654: LD_INT 0
79656: PPUSH
79657: PPUSH
79658: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79659: LD_STRING resetFactoryWaypoint();
79661: PPUSH
79662: CALL_OW 559
// if factoryWaypoints then
79666: LD_EXP 105
79670: IFFALSE 79791
// begin list := factoryWaypoints ;
79672: LD_ADDR_VAR 0 3
79676: PUSH
79677: LD_EXP 105
79681: ST_TO_ADDR
// for i := 1 to list do
79682: LD_ADDR_VAR 0 2
79686: PUSH
79687: DOUBLE
79688: LD_INT 1
79690: DEC
79691: ST_TO_ADDR
79692: LD_VAR 0 3
79696: PUSH
79697: FOR_TO
79698: IFFALSE 79789
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79700: LD_STRING setFactoryWaypointXY(
79702: PUSH
79703: LD_VAR 0 3
79707: PUSH
79708: LD_VAR 0 2
79712: ARRAY
79713: PUSH
79714: LD_INT 1
79716: ARRAY
79717: STR
79718: PUSH
79719: LD_STRING ,
79721: STR
79722: PUSH
79723: LD_VAR 0 3
79727: PUSH
79728: LD_VAR 0 2
79732: ARRAY
79733: PUSH
79734: LD_INT 2
79736: ARRAY
79737: STR
79738: PUSH
79739: LD_STRING ,
79741: STR
79742: PUSH
79743: LD_VAR 0 3
79747: PUSH
79748: LD_VAR 0 2
79752: ARRAY
79753: PUSH
79754: LD_INT 3
79756: ARRAY
79757: STR
79758: PUSH
79759: LD_STRING ,
79761: STR
79762: PUSH
79763: LD_VAR 0 3
79767: PUSH
79768: LD_VAR 0 2
79772: ARRAY
79773: PUSH
79774: LD_INT 4
79776: ARRAY
79777: STR
79778: PUSH
79779: LD_STRING )
79781: STR
79782: PPUSH
79783: CALL_OW 559
79787: GO 79697
79789: POP
79790: POP
// end ; end ;
79791: LD_VAR 0 1
79795: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79796: LD_INT 0
79798: PPUSH
// if HexInfo ( x , y ) = warehouse then
79799: LD_VAR 0 2
79803: PPUSH
79804: LD_VAR 0 3
79808: PPUSH
79809: CALL_OW 428
79813: PUSH
79814: LD_VAR 0 1
79818: EQUAL
79819: IFFALSE 79846
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79821: LD_ADDR_EXP 106
79825: PUSH
79826: LD_EXP 106
79830: PPUSH
79831: LD_VAR 0 1
79835: PPUSH
79836: LD_INT 0
79838: PPUSH
79839: CALL_OW 1
79843: ST_TO_ADDR
79844: GO 79897
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79846: LD_ADDR_EXP 106
79850: PUSH
79851: LD_EXP 106
79855: PPUSH
79856: LD_VAR 0 1
79860: PPUSH
79861: LD_VAR 0 1
79865: PPUSH
79866: CALL_OW 255
79870: PUSH
79871: LD_VAR 0 1
79875: PUSH
79876: LD_VAR 0 2
79880: PUSH
79881: LD_VAR 0 3
79885: PUSH
79886: EMPTY
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: PPUSH
79892: CALL_OW 1
79896: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79897: CALL 79906 0 0
// end ;
79901: LD_VAR 0 4
79905: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79906: LD_INT 0
79908: PPUSH
79909: PPUSH
79910: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79911: LD_STRING resetWarehouseGatheringPoints();
79913: PPUSH
79914: CALL_OW 559
// if warehouseGatheringPoints then
79918: LD_EXP 106
79922: IFFALSE 80048
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79924: LD_ADDR_VAR 0 3
79928: PUSH
79929: LD_EXP 106
79933: PPUSH
79934: CALL 58029 0 1
79938: ST_TO_ADDR
// for i := 1 to list do
79939: LD_ADDR_VAR 0 2
79943: PUSH
79944: DOUBLE
79945: LD_INT 1
79947: DEC
79948: ST_TO_ADDR
79949: LD_VAR 0 3
79953: PUSH
79954: FOR_TO
79955: IFFALSE 80046
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79957: LD_STRING setWarehouseGatheringPointXY(
79959: PUSH
79960: LD_VAR 0 3
79964: PUSH
79965: LD_VAR 0 2
79969: ARRAY
79970: PUSH
79971: LD_INT 1
79973: ARRAY
79974: STR
79975: PUSH
79976: LD_STRING ,
79978: STR
79979: PUSH
79980: LD_VAR 0 3
79984: PUSH
79985: LD_VAR 0 2
79989: ARRAY
79990: PUSH
79991: LD_INT 2
79993: ARRAY
79994: STR
79995: PUSH
79996: LD_STRING ,
79998: STR
79999: PUSH
80000: LD_VAR 0 3
80004: PUSH
80005: LD_VAR 0 2
80009: ARRAY
80010: PUSH
80011: LD_INT 3
80013: ARRAY
80014: STR
80015: PUSH
80016: LD_STRING ,
80018: STR
80019: PUSH
80020: LD_VAR 0 3
80024: PUSH
80025: LD_VAR 0 2
80029: ARRAY
80030: PUSH
80031: LD_INT 4
80033: ARRAY
80034: STR
80035: PUSH
80036: LD_STRING )
80038: STR
80039: PPUSH
80040: CALL_OW 559
80044: GO 79954
80046: POP
80047: POP
// end ; end ;
80048: LD_VAR 0 1
80052: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
80053: LD_EXP 106
80057: IFFALSE 80742
80059: GO 80061
80061: DISABLE
80062: LD_INT 0
80064: PPUSH
80065: PPUSH
80066: PPUSH
80067: PPUSH
80068: PPUSH
80069: PPUSH
80070: PPUSH
80071: PPUSH
80072: PPUSH
// begin enable ;
80073: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
80074: LD_ADDR_VAR 0 3
80078: PUSH
80079: LD_EXP 106
80083: PPUSH
80084: CALL 58029 0 1
80088: ST_TO_ADDR
// if not list then
80089: LD_VAR 0 3
80093: NOT
80094: IFFALSE 80098
// exit ;
80096: GO 80742
// for i := 1 to list do
80098: LD_ADDR_VAR 0 1
80102: PUSH
80103: DOUBLE
80104: LD_INT 1
80106: DEC
80107: ST_TO_ADDR
80108: LD_VAR 0 3
80112: PUSH
80113: FOR_TO
80114: IFFALSE 80740
// begin depot := list [ i ] [ 2 ] ;
80116: LD_ADDR_VAR 0 8
80120: PUSH
80121: LD_VAR 0 3
80125: PUSH
80126: LD_VAR 0 1
80130: ARRAY
80131: PUSH
80132: LD_INT 2
80134: ARRAY
80135: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
80136: LD_ADDR_VAR 0 5
80140: PUSH
80141: LD_VAR 0 3
80145: PUSH
80146: LD_VAR 0 1
80150: ARRAY
80151: PUSH
80152: LD_INT 1
80154: ARRAY
80155: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
80156: LD_VAR 0 8
80160: PPUSH
80161: CALL_OW 301
80165: PUSH
80166: LD_VAR 0 5
80170: PUSH
80171: LD_VAR 0 8
80175: PPUSH
80176: CALL_OW 255
80180: NONEQUAL
80181: OR
80182: IFFALSE 80211
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
80184: LD_ADDR_EXP 106
80188: PUSH
80189: LD_EXP 106
80193: PPUSH
80194: LD_VAR 0 8
80198: PPUSH
80199: LD_INT 0
80201: PPUSH
80202: CALL_OW 1
80206: ST_TO_ADDR
// exit ;
80207: POP
80208: POP
80209: GO 80742
// end ; x := list [ i ] [ 3 ] ;
80211: LD_ADDR_VAR 0 6
80215: PUSH
80216: LD_VAR 0 3
80220: PUSH
80221: LD_VAR 0 1
80225: ARRAY
80226: PUSH
80227: LD_INT 3
80229: ARRAY
80230: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
80231: LD_ADDR_VAR 0 7
80235: PUSH
80236: LD_VAR 0 3
80240: PUSH
80241: LD_VAR 0 1
80245: ARRAY
80246: PUSH
80247: LD_INT 4
80249: ARRAY
80250: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
80251: LD_ADDR_VAR 0 9
80255: PUSH
80256: LD_VAR 0 6
80260: PPUSH
80261: LD_VAR 0 7
80265: PPUSH
80266: LD_INT 16
80268: PPUSH
80269: CALL 56613 0 3
80273: ST_TO_ADDR
// if not cratesNearbyPoint then
80274: LD_VAR 0 9
80278: NOT
80279: IFFALSE 80285
// exit ;
80281: POP
80282: POP
80283: GO 80742
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
80285: LD_ADDR_VAR 0 4
80289: PUSH
80290: LD_INT 22
80292: PUSH
80293: LD_VAR 0 5
80297: PUSH
80298: EMPTY
80299: LIST
80300: LIST
80301: PUSH
80302: LD_INT 3
80304: PUSH
80305: LD_INT 60
80307: PUSH
80308: EMPTY
80309: LIST
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PUSH
80315: LD_INT 91
80317: PUSH
80318: LD_VAR 0 8
80322: PUSH
80323: LD_INT 6
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: LIST
80330: PUSH
80331: LD_INT 2
80333: PUSH
80334: LD_INT 25
80336: PUSH
80337: LD_INT 2
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: PUSH
80344: LD_INT 25
80346: PUSH
80347: LD_INT 16
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: LIST
80358: PUSH
80359: EMPTY
80360: LIST
80361: LIST
80362: LIST
80363: LIST
80364: PPUSH
80365: CALL_OW 69
80369: PUSH
80370: LD_VAR 0 8
80374: PPUSH
80375: CALL_OW 313
80379: PPUSH
80380: LD_INT 3
80382: PUSH
80383: LD_INT 60
80385: PUSH
80386: EMPTY
80387: LIST
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: PUSH
80393: LD_INT 2
80395: PUSH
80396: LD_INT 25
80398: PUSH
80399: LD_INT 2
80401: PUSH
80402: EMPTY
80403: LIST
80404: LIST
80405: PUSH
80406: LD_INT 25
80408: PUSH
80409: LD_INT 16
80411: PUSH
80412: EMPTY
80413: LIST
80414: LIST
80415: PUSH
80416: EMPTY
80417: LIST
80418: LIST
80419: LIST
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PPUSH
80425: CALL_OW 72
80429: UNION
80430: ST_TO_ADDR
// if tmp then
80431: LD_VAR 0 4
80435: IFFALSE 80515
// begin tmp := ShrinkArray ( tmp , 3 ) ;
80437: LD_ADDR_VAR 0 4
80441: PUSH
80442: LD_VAR 0 4
80446: PPUSH
80447: LD_INT 3
80449: PPUSH
80450: CALL 54582 0 2
80454: ST_TO_ADDR
// for j in tmp do
80455: LD_ADDR_VAR 0 2
80459: PUSH
80460: LD_VAR 0 4
80464: PUSH
80465: FOR_IN
80466: IFFALSE 80509
// begin if IsInUnit ( j ) then
80468: LD_VAR 0 2
80472: PPUSH
80473: CALL_OW 310
80477: IFFALSE 80488
// ComExit ( j ) ;
80479: LD_VAR 0 2
80483: PPUSH
80484: CALL 54665 0 1
// AddComCollect ( j , x , y ) ;
80488: LD_VAR 0 2
80492: PPUSH
80493: LD_VAR 0 6
80497: PPUSH
80498: LD_VAR 0 7
80502: PPUSH
80503: CALL_OW 177
// end ;
80507: GO 80465
80509: POP
80510: POP
// exit ;
80511: POP
80512: POP
80513: GO 80742
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
80515: LD_ADDR_VAR 0 4
80519: PUSH
80520: LD_INT 22
80522: PUSH
80523: LD_VAR 0 5
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PUSH
80532: LD_INT 91
80534: PUSH
80535: LD_VAR 0 8
80539: PUSH
80540: LD_INT 8
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: LIST
80547: PUSH
80548: LD_INT 2
80550: PUSH
80551: LD_INT 34
80553: PUSH
80554: LD_INT 12
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: LD_INT 34
80563: PUSH
80564: LD_INT 51
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: PUSH
80571: LD_INT 34
80573: PUSH
80574: LD_INT 32
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 34
80583: PUSH
80584: LD_INT 89
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: PUSH
80591: EMPTY
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: LIST
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: LIST
80602: PPUSH
80603: CALL_OW 69
80607: ST_TO_ADDR
// if tmp then
80608: LD_VAR 0 4
80612: IFFALSE 80738
// begin for j in tmp do
80614: LD_ADDR_VAR 0 2
80618: PUSH
80619: LD_VAR 0 4
80623: PUSH
80624: FOR_IN
80625: IFFALSE 80736
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80627: LD_VAR 0 2
80631: PPUSH
80632: CALL_OW 262
80636: PUSH
80637: LD_INT 3
80639: EQUAL
80640: PUSH
80641: LD_VAR 0 2
80645: PPUSH
80646: CALL_OW 261
80650: PUSH
80651: LD_INT 20
80653: GREATER
80654: OR
80655: PUSH
80656: LD_VAR 0 2
80660: PPUSH
80661: CALL_OW 314
80665: NOT
80666: AND
80667: PUSH
80668: LD_VAR 0 2
80672: PPUSH
80673: CALL_OW 263
80677: PUSH
80678: LD_INT 1
80680: NONEQUAL
80681: PUSH
80682: LD_VAR 0 2
80686: PPUSH
80687: CALL_OW 311
80691: OR
80692: AND
80693: IFFALSE 80734
// begin ComCollect ( j , x , y ) ;
80695: LD_VAR 0 2
80699: PPUSH
80700: LD_VAR 0 6
80704: PPUSH
80705: LD_VAR 0 7
80709: PPUSH
80710: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80714: LD_VAR 0 2
80718: PPUSH
80719: LD_VAR 0 8
80723: PPUSH
80724: CALL_OW 172
// exit ;
80728: POP
80729: POP
80730: POP
80731: POP
80732: GO 80742
// end ;
80734: GO 80624
80736: POP
80737: POP
// end ; end ;
80738: GO 80113
80740: POP
80741: POP
// end ; end_of_file
80742: PPOPN 9
80744: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80745: LD_VAR 0 1
80749: PPUSH
80750: LD_VAR 0 2
80754: PPUSH
80755: LD_VAR 0 3
80759: PPUSH
80760: LD_VAR 0 4
80764: PPUSH
80765: LD_VAR 0 5
80769: PPUSH
80770: LD_VAR 0 6
80774: PPUSH
80775: CALL 64970 0 6
// end ;
80779: PPOPN 6
80781: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80782: LD_INT 0
80784: PPUSH
// begin if not units then
80785: LD_VAR 0 1
80789: NOT
80790: IFFALSE 80794
// exit ;
80792: GO 80794
// end ;
80794: PPOPN 7
80796: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80797: CALL 64857 0 0
// end ; end_of_file
80801: PPOPN 1
80803: END
