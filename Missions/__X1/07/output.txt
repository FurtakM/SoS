// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 404 0 3
// PrepareAmerican ;
  28: CALL 2516 0 0
// PrepareArabian ;
  32: CALL 1200 0 0
// Action ;
  36: CALL 7251 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// end ; end_of_file
 182: LD_VAR 0 1
 186: RET
// export function SayX ( units , ident ) ; var i ; begin
 187: LD_INT 0
 189: PPUSH
 190: PPUSH
// result := false ;
 191: LD_ADDR_VAR 0 3
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// if not units then
 199: LD_VAR 0 1
 203: NOT
 204: IFFALSE 208
// exit ;
 206: GO 262
// for i in units do
 208: LD_ADDR_VAR 0 4
 212: PUSH
 213: LD_VAR 0 1
 217: PUSH
 218: FOR_IN
 219: IFFALSE 260
// if IsOk ( i ) then
 221: LD_VAR 0 4
 225: PPUSH
 226: CALL_OW 302
 230: IFFALSE 258
// begin Say ( i , ident ) ;
 232: LD_VAR 0 4
 236: PPUSH
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 88
// result := i ;
 246: LD_ADDR_VAR 0 3
 250: PUSH
 251: LD_VAR 0 4
 255: ST_TO_ADDR
// break ;
 256: GO 260
// end ;
 258: GO 218
 260: POP
 261: POP
// end ;
 262: LD_VAR 0 3
 266: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 267: LD_INT 0
 269: PPUSH
 270: PPUSH
// InitUc ;
 271: CALL_OW 18
// InitHc ;
 275: CALL_OW 19
// uc_side := 0 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// uc_nation := 0 ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// for i = 1 to amount do
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: DOUBLE
 301: LD_INT 1
 303: DEC
 304: ST_TO_ADDR
 305: LD_VAR 0 2
 309: PUSH
 310: FOR_TO
 311: IFFALSE 393
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 313: LD_ADDR_OWVAR 29
 317: PUSH
 318: LD_INT 9
 320: PPUSH
 321: LD_INT 12
 323: PPUSH
 324: CALL_OW 12
 328: PUSH
 329: LD_INT 9
 331: PPUSH
 332: LD_INT 12
 334: PPUSH
 335: CALL_OW 12
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 344: LD_ADDR_OWVAR 35
 348: PUSH
 349: LD_INT 1
 351: NEG
 352: PPUSH
 353: LD_INT 1
 355: PPUSH
 356: CALL_OW 12
 360: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 361: LD_INT 0
 363: PPUSH
 364: LD_INT 12
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 374: CALL_OW 44
 378: PPUSH
 379: LD_VAR 0 1
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL_OW 49
// end ;
 391: GO 310
 393: POP
 394: POP
// InitHc ;
 395: CALL_OW 19
// end ;
 399: LD_VAR 0 3
 403: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
// uc_side := 0 ;
 408: LD_ADDR_OWVAR 20
 412: PUSH
 413: LD_INT 0
 415: ST_TO_ADDR
// uc_nation := 0 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 0
 423: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 9
 431: PUSH
 432: LD_INT 8
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: PPUSH
 453: CALL 267 0 2
// for i := 1 to 4 do
 457: LD_ADDR_VAR 0 5
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 4
 469: PUSH
 470: FOR_TO
 471: IFFALSE 508
// begin hc_class := class_horse ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 21
 480: ST_TO_ADDR
// hc_gallery :=  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 489: CALL_OW 44
 493: PPUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL_OW 49
// end ;
 506: GO 470
 508: POP
 509: POP
// for i = 1 to 5 do
 510: LD_ADDR_VAR 0 5
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_INT 5
 522: PUSH
 523: FOR_TO
 524: IFFALSE 578
// begin hc_class = class_tiger ;
 526: LD_ADDR_OWVAR 28
 530: PUSH
 531: LD_INT 14
 533: ST_TO_ADDR
// hc_gallery =  ;
 534: LD_ADDR_OWVAR 33
 538: PUSH
 539: LD_STRING 
 541: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 542: LD_ADDR_OWVAR 35
 546: PUSH
 547: LD_INT 7
 549: NEG
 550: PPUSH
 551: LD_INT 7
 553: PPUSH
 554: CALL_OW 12
 558: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 2
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL 51497 0 3
// end ;
 576: GO 523
 578: POP
 579: POP
// for i := 1 to 4 do
 580: LD_ADDR_VAR 0 5
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 4
 592: PUSH
 593: FOR_TO
 594: IFFALSE 631
// begin hc_class := class_phororhacos ;
 596: LD_ADDR_OWVAR 28
 600: PUSH
 601: LD_INT 18
 603: ST_TO_ADDR
// hc_gallery :=  ;
 604: LD_ADDR_OWVAR 33
 608: PUSH
 609: LD_STRING 
 611: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ;
 629: GO 593
 631: POP
 632: POP
// for i := 1 to 4 do
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: DOUBLE
 639: LD_INT 1
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 684
// begin hc_class := class_baggie ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 13
 656: ST_TO_ADDR
// hc_gallery :=  ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING 
 664: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 665: CALL_OW 44
 669: PPUSH
 670: LD_VAR 0 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 646
 684: POP
 685: POP
// for i := 1 to 5 do
 686: LD_ADDR_VAR 0 5
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 5
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := class_fish ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 20
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 3
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// end ;
 739: LD_VAR 0 4
 743: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
// if not observer or not unit then
 749: LD_VAR 0 1
 753: NOT
 754: PUSH
 755: LD_VAR 0 2
 759: NOT
 760: OR
 761: IFFALSE 765
// exit ;
 763: GO 813
// if not See ( GetSide ( observer ) , unit ) then
 765: LD_VAR 0 1
 769: PPUSH
 770: CALL_OW 255
 774: PPUSH
 775: LD_VAR 0 2
 779: PPUSH
 780: CALL_OW 292
 784: NOT
 785: IFFALSE 789
// exit ;
 787: GO 813
// result := GetDistUnits ( observer , unit ) < 12 ;
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 1
 798: PPUSH
 799: LD_VAR 0 2
 803: PPUSH
 804: CALL_OW 296
 808: PUSH
 809: LD_INT 12
 811: LESS
 812: ST_TO_ADDR
// end ;
 813: LD_VAR 0 3
 817: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 818: LD_INT 0
 820: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 488
 843: PUSH
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: CALL_OW 428
 866: PUSH
 867: LD_INT 0
 869: EQUAL
 870: AND
 871: IFFALSE 905
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_VAR 0 3
 900: PPUSH
 901: CALL_OW 48
// end ;
 905: LD_VAR 0 4
 909: RET
// export function ReverseArray ( array ) ; var i ; begin
 910: LD_INT 0
 912: PPUSH
 913: PPUSH
// if not array then
 914: LD_VAR 0 1
 918: NOT
 919: IFFALSE 923
// exit ;
 921: GO 981
// result := [ ] ;
 923: LD_ADDR_VAR 0 2
 927: PUSH
 928: EMPTY
 929: ST_TO_ADDR
// for i := 1 to array do
 930: LD_ADDR_VAR 0 3
 934: PUSH
 935: DOUBLE
 936: LD_INT 1
 938: DEC
 939: ST_TO_ADDR
 940: LD_VAR 0 1
 944: PUSH
 945: FOR_TO
 946: IFFALSE 979
// result := Insert ( result , 1 , array [ i ] ) ;
 948: LD_ADDR_VAR 0 2
 952: PUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: LD_VAR 0 1
 965: PUSH
 966: LD_VAR 0 3
 970: ARRAY
 971: PPUSH
 972: CALL_OW 2
 976: ST_TO_ADDR
 977: GO 945
 979: POP
 980: POP
// end ;
 981: LD_VAR 0 2
 985: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 986: LD_INT 0
 988: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 989: LD_VAR 0 1
 993: PPUSH
 994: LD_VAR 0 2
 998: PPUSH
 999: LD_VAR 0 3
1003: PPUSH
1004: LD_VAR 0 4
1008: PPUSH
1009: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1013: LD_VAR 0 1
1017: PPUSH
1018: LD_VAR 0 2
1022: PPUSH
1023: LD_VAR 0 3
1027: PPUSH
1028: CALL_OW 331
// end ;
1032: LD_VAR 0 5
1036: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1037: LD_INT 0
1039: PPUSH
// if not units then
1040: LD_VAR 0 1
1044: NOT
1045: IFFALSE 1049
// exit ;
1047: GO 1132
// result := true ;
1049: LD_ADDR_VAR 0 4
1053: PUSH
1054: LD_INT 1
1056: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1057: LD_VAR 0 1
1061: PPUSH
1062: LD_INT 26
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 72
1076: PUSH
1077: LD_INT 1
1079: ARRAY
1080: PPUSH
1081: LD_VAR 0 2
1085: PPUSH
1086: CALL_OW 88
1090: NOT
1091: IFFALSE 1132
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1093: LD_ADDR_VAR 0 4
1097: PUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_INT 26
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL_OW 72
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: LD_VAR 0 3
1126: PPUSH
1127: CALL_OW 88
1131: ST_TO_ADDR
// end ;
1132: LD_VAR 0 4
1136: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
// if not group then
1141: LD_VAR 0 2
1145: NOT
1146: IFFALSE 1150
// exit ;
1148: GO 1195
// for i in group do
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_VAR 0 2
1159: PUSH
1160: FOR_IN
1161: IFFALSE 1193
// if See ( side , i ) then
1163: LD_VAR 0 1
1167: PPUSH
1168: LD_VAR 0 4
1172: PPUSH
1173: CALL_OW 292
1177: IFFALSE 1191
// begin result := true ;
1179: LD_ADDR_VAR 0 3
1183: PUSH
1184: LD_INT 1
1186: ST_TO_ADDR
// exit ;
1187: POP
1188: POP
1189: GO 1195
// end ;
1191: GO 1160
1193: POP
1194: POP
// end ; end_of_file
1195: LD_VAR 0 3
1199: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1200: LD_INT 0
1202: PPUSH
1203: PPUSH
1204: PPUSH
1205: PPUSH
// uc_nation := 2 ;
1206: LD_ADDR_OWVAR 21
1210: PUSH
1211: LD_INT 2
1213: ST_TO_ADDR
// uc_side := 5 ;
1214: LD_ADDR_OWVAR 20
1218: PUSH
1219: LD_INT 5
1221: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1222: LD_ADDR_EXP 21
1226: PUSH
1227: LD_STRING Abdul
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: LD_STRING 
1235: PPUSH
1236: CALL 15204 0 3
1240: ST_TO_ADDR
// uc_side := 2 ;
1241: LD_ADDR_OWVAR 20
1245: PUSH
1246: LD_INT 2
1248: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1249: LD_ADDR_EXP 13
1253: PUSH
1254: LD_STRING Heike
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL 15204 0 3
1272: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1273: LD_ADDR_EXP 16
1277: PUSH
1278: LD_STRING Ibrahim
1280: PPUSH
1281: LD_EXP 1
1285: NOT
1286: PPUSH
1287: LD_EXP 2
1291: PPUSH
1292: CALL 15204 0 3
1296: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1297: LD_ADDR_EXP 14
1301: PUSH
1302: LD_STRING Givi
1304: PPUSH
1305: LD_EXP 1
1309: NOT
1310: PPUSH
1311: LD_EXP 2
1315: PPUSH
1316: CALL 15204 0 3
1320: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1321: LD_ADDR_EXP 17
1325: PUSH
1326: LD_STRING Kamil
1328: PPUSH
1329: LD_EXP 1
1333: NOT
1334: PPUSH
1335: LD_EXP 2
1339: PPUSH
1340: CALL 15204 0 3
1344: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1345: LD_ADDR_EXP 18
1349: PUSH
1350: LD_STRING Kaia
1352: PPUSH
1353: LD_EXP 1
1357: NOT
1358: PPUSH
1359: LD_EXP 2
1363: PPUSH
1364: CALL 15204 0 3
1368: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1369: LD_ADDR_EXP 19
1373: PUSH
1374: LD_STRING Sophia
1376: PPUSH
1377: LD_EXP 1
1381: NOT
1382: PPUSH
1383: LD_EXP 2
1387: PPUSH
1388: CALL 15204 0 3
1392: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1393: LD_ADDR_EXP 20
1397: PUSH
1398: LD_STRING Markov
1400: PPUSH
1401: LD_EXP 1
1405: NOT
1406: PPUSH
1407: LD_EXP 2
1411: PPUSH
1412: CALL 15204 0 3
1416: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1417: LD_ADDR_EXP 24
1421: PUSH
1422: LD_STRING Aviradze
1424: PPUSH
1425: LD_EXP 1
1429: NOT
1430: PPUSH
1431: LD_EXP 2
1435: PPUSH
1436: CALL 15204 0 3
1440: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1441: LD_ADDR_EXP 23
1445: PUSH
1446: LD_STRING Kurt
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_EXP 2
1459: PPUSH
1460: CALL 15204 0 3
1464: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1465: LD_ADDR_EXP 15
1469: PUSH
1470: LD_STRING Mike
1472: PPUSH
1473: LD_EXP 1
1477: NOT
1478: PPUSH
1479: LD_EXP 2
1483: PPUSH
1484: CALL 15204 0 3
1488: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1489: LD_ADDR_EXP 22
1493: PUSH
1494: LD_STRING Olaf
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: LD_STRING 
1502: PPUSH
1503: CALL 15204 0 3
1507: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1508: LD_ADDR_EXP 25
1512: PUSH
1513: LD_STRING 06_others
1515: PPUSH
1516: CALL_OW 31
1520: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1521: LD_ADDR_EXP 26
1525: PUSH
1526: LD_STRING 06_apes
1528: PPUSH
1529: CALL_OW 31
1533: ST_TO_ADDR
// if debug then
1534: LD_EXP 1
1538: IFFALSE 1811
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1540: LD_ADDR_VAR 0 3
1544: PUSH
1545: LD_INT 14
1547: PUSH
1548: LD_INT 1
1550: PUSH
1551: LD_INT 2
1553: PUSH
1554: LD_INT 25
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 1000
1562: PUSH
1563: LD_INT 0
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 14
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: LD_INT 31
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 1000
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 14
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 1
1613: PUSH
1614: LD_INT 27
1616: PUSH
1617: LD_INT 2
1619: PUSH
1620: LD_INT 750
1622: PUSH
1623: LD_INT 0
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 14
1637: PUSH
1638: LD_INT 1
1640: PUSH
1641: LD_INT 1
1643: PUSH
1644: LD_INT 27
1646: PUSH
1647: LD_INT 2
1649: PUSH
1650: LD_INT 900
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 14
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: LD_INT 32
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: LD_INT 1000
1682: PUSH
1683: LD_INT 100
1685: PUSH
1686: LD_INT 0
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 14
1704: PUSH
1705: LD_INT 1
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 32
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: LD_INT 1000
1719: PUSH
1720: LD_INT 50
1722: PUSH
1723: LD_INT 50
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 14
1741: PUSH
1742: LD_INT 1
1744: PUSH
1745: LD_INT 2
1747: PUSH
1748: LD_INT 27
1750: PUSH
1751: LD_INT 2
1753: PUSH
1754: LD_INT 1000
1756: PUSH
1757: LD_INT 0
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 92
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: LD_INT 1000
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: ST_TO_ADDR
// end else
1809: GO 1818
// tmp := [ ] ;
1811: LD_ADDR_VAR 0 3
1815: PUSH
1816: EMPTY
1817: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1818: LD_ADDR_EXP 27
1822: PUSH
1823: LD_STRING 06_Vehicles
1825: PPUSH
1826: LD_VAR 0 3
1830: PPUSH
1831: CALL_OW 30
1835: ST_TO_ADDR
// counter := 0 ;
1836: LD_ADDR_VAR 0 4
1840: PUSH
1841: LD_INT 0
1843: ST_TO_ADDR
// if heikeVehicles then
1844: LD_EXP 27
1848: IFFALSE 1970
// begin for i := heikeVehicles downto 1 do
1850: LD_ADDR_VAR 0 2
1854: PUSH
1855: DOUBLE
1856: LD_EXP 27
1860: INC
1861: ST_TO_ADDR
1862: LD_INT 1
1864: PUSH
1865: FOR_DOWNTO
1866: IFFALSE 1968
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1868: LD_EXP 27
1872: PUSH
1873: LD_VAR 0 2
1877: ARRAY
1878: PUSH
1879: LD_INT 3
1881: ARRAY
1882: PUSH
1883: LD_INT 2
1885: EQUAL
1886: IFFALSE 1966
// begin if counter < remoteControlLimit then
1888: LD_VAR 0 4
1892: PUSH
1893: LD_EXP 12
1897: LESS
1898: IFFALSE 1946
// begin counter := Inc ( counter ) ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: LD_VAR 0 4
1909: PPUSH
1910: CALL 53941 0 1
1914: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1915: LD_ADDR_EXP 27
1919: PUSH
1920: LD_EXP 27
1924: PPUSH
1925: LD_EXP 27
1929: PPUSH
1930: LD_EXP 27
1934: PUSH
1935: LD_VAR 0 2
1939: ARRAY
1940: PPUSH
1941: CALL_OW 2
1945: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1946: LD_ADDR_EXP 27
1950: PUSH
1951: LD_EXP 27
1955: PPUSH
1956: LD_VAR 0 2
1960: PPUSH
1961: CALL_OW 3
1965: ST_TO_ADDR
// end ; end ;
1966: GO 1865
1968: POP
1969: POP
// end ; end ;
1970: LD_VAR 0 1
1974: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1975: LD_EXP 3
1979: IFFALSE 2513
1981: GO 1983
1983: DISABLE
1984: LD_INT 0
1986: PPUSH
1987: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1988: LD_ADDR_VAR 0 2
1992: PUSH
1993: LD_INT 96
1995: PUSH
1996: LD_INT 50
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 49
2005: PUSH
2006: LD_INT 52
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 34
2015: PUSH
2016: LD_INT 55
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 41
2025: PUSH
2026: LD_INT 70
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 53
2035: PUSH
2036: LD_INT 96
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 103
2045: PUSH
2046: LD_INT 64
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 104
2063: PUSH
2064: LD_INT 70
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 111
2073: PUSH
2074: LD_INT 103
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 131
2083: PUSH
2084: LD_INT 147
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 130
2093: PUSH
2094: LD_INT 153
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 110
2103: PUSH
2104: LD_INT 93
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: PUSH
2111: LD_INT 103
2113: PUSH
2114: LD_INT 65
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// for i in tmp [ 1 ] do
2133: LD_ADDR_VAR 0 1
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: ARRAY
2146: PUSH
2147: FOR_IN
2148: IFFALSE 2200
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2150: LD_EXP 15
2154: PPUSH
2155: LD_VAR 0 1
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: LD_VAR 0 1
2168: PUSH
2169: LD_INT 2
2171: ARRAY
2172: PPUSH
2173: CALL_OW 174
// AddComHold ( Mike ) ;
2177: LD_EXP 15
2181: PPUSH
2182: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 175
2193: PPUSH
2194: CALL_OW 202
// end ;
2198: GO 2147
2200: POP
2201: POP
// for i in tmp [ 2 ] do
2202: LD_ADDR_VAR 0 1
2206: PUSH
2207: LD_VAR 0 2
2211: PUSH
2212: LD_INT 2
2214: ARRAY
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2269
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2219: LD_EXP 23
2223: PPUSH
2224: LD_VAR 0 1
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: PPUSH
2233: LD_VAR 0 1
2237: PUSH
2238: LD_INT 2
2240: ARRAY
2241: PPUSH
2242: CALL_OW 174
// AddComHold ( Kurt ) ;
2246: LD_EXP 23
2250: PPUSH
2251: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2255: LD_EXP 23
2259: PPUSH
2260: LD_INT 175
2262: PPUSH
2263: CALL_OW 202
// end ;
2267: GO 2216
2269: POP
2270: POP
// wait ( 2 2$00 ) ;
2271: LD_INT 4200
2273: PPUSH
2274: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2278: LD_INT 35
2280: PPUSH
2281: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2285: LD_EXP 15
2289: PPUSH
2290: CALL_OW 314
2294: NOT
2295: PUSH
2296: LD_EXP 15
2300: PPUSH
2301: CALL_OW 301
2305: OR
2306: PUSH
2307: LD_EXP 23
2311: PPUSH
2312: CALL_OW 314
2316: NOT
2317: PUSH
2318: LD_EXP 23
2322: PPUSH
2323: CALL_OW 301
2327: OR
2328: AND
2329: IFFALSE 2278
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2331: LD_EXP 23
2335: PPUSH
2336: CALL_OW 301
2340: PUSH
2341: LD_EXP 15
2345: PPUSH
2346: CALL_OW 301
2350: AND
2351: IFFALSE 2363
// begin scoutFailed := true ;
2353: LD_ADDR_EXP 4
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// exit ;
2361: GO 2513
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2363: LD_EXP 23
2367: PUSH
2368: LD_EXP 15
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PPUSH
2377: LD_INT 132
2379: PPUSH
2380: LD_INT 52
2382: PPUSH
2383: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2387: LD_EXP 23
2391: PUSH
2392: LD_EXP 15
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PPUSH
2401: LD_INT 22
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PPUSH
2411: CALL_OW 69
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2431: LD_INT 2
2433: PPUSH
2434: LD_EXP 23
2438: PPUSH
2439: CALL_OW 292
2443: PUSH
2444: LD_INT 2
2446: PPUSH
2447: LD_EXP 15
2451: PPUSH
2452: CALL_OW 292
2456: OR
2457: IFFALSE 2424
// if IsLive ( Kurt ) then
2459: LD_EXP 23
2463: PPUSH
2464: CALL_OW 300
2468: IFFALSE 2482
// SetSide ( Kurt , 2 ) ;
2470: LD_EXP 23
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: CALL_OW 235
// if IsLive ( Mike ) then
2482: LD_EXP 15
2486: PPUSH
2487: CALL_OW 300
2491: IFFALSE 2505
// SetSide ( Mike , 2 ) ;
2493: LD_EXP 15
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: CALL_OW 235
// scoutSuccess := true ;
2505: LD_ADDR_EXP 5
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
// end ; end_of_file
2513: PPOPN 2
2515: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2516: LD_INT 0
2518: PPUSH
2519: PPUSH
2520: PPUSH
2521: PPUSH
// uc_side := 1 ;
2522: LD_ADDR_OWVAR 20
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// uc_nation := 1 ;
2530: LD_ADDR_OWVAR 21
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2538: LD_INT 1
2540: PPUSH
2541: CALL_OW 274
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: LD_INT 2500
2551: PUSH
2552: LD_INT 3200
2554: PUSH
2555: LD_INT 3500
2557: PUSH
2558: LD_INT 3900
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: PUSH
2567: LD_OWVAR 67
2571: ARRAY
2572: PPUSH
2573: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 274
2584: PPUSH
2585: LD_INT 2
2587: PPUSH
2588: LD_INT 800
2590: PPUSH
2591: CALL_OW 277
// usForces := [ ] ;
2595: LD_ADDR_EXP 29
2599: PUSH
2600: EMPTY
2601: ST_TO_ADDR
// usToBuild := [ ] ;
2602: LD_ADDR_EXP 31
2606: PUSH
2607: EMPTY
2608: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2609: LD_ADDR_EXP 32
2613: PUSH
2614: EMPTY
2615: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2616: LD_ADDR_VAR 0 2
2620: PUSH
2621: LD_INT 21
2623: PUSH
2624: LD_INT 3
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PPUSH
2631: CALL_OW 69
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2674
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: LD_INT 6
2646: PUSH
2647: LD_INT 7
2649: PUSH
2650: LD_INT 8
2652: PUSH
2653: LD_INT 8
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: PUSH
2662: LD_OWVAR 67
2666: ARRAY
2667: PPUSH
2668: CALL_OW 241
2672: GO 2636
2674: POP
2675: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2676: LD_ADDR_VAR 0 2
2680: PUSH
2681: LD_INT 30
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PPUSH
2691: CALL_OW 69
2695: PUSH
2696: FOR_IN
2697: IFFALSE 2787
// begin if GetBWeapon ( i ) = us_radar then
2699: LD_VAR 0 2
2703: PPUSH
2704: CALL_OW 269
2708: PUSH
2709: LD_INT 11
2711: EQUAL
2712: IFFALSE 2737
// begin uc_nation := 0 ;
2714: LD_ADDR_OWVAR 21
2718: PUSH
2719: LD_INT 0
2721: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2722: LD_INT 0
2724: PPUSH
2725: LD_INT 16
2727: PPUSH
2728: LD_INT 2
2730: PPUSH
2731: CALL_OW 380
// end else
2735: GO 2771
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2737: LD_INT 0
2739: PPUSH
2740: LD_INT 1
2742: PPUSH
2743: LD_INT 5
2745: PUSH
2746: LD_INT 6
2748: PUSH
2749: LD_INT 7
2751: PUSH
2752: LD_INT 8
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_OWVAR 67
2765: ARRAY
2766: PPUSH
2767: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2771: CALL_OW 44
2775: PPUSH
2776: LD_VAR 0 2
2780: PPUSH
2781: CALL_OW 52
// end ;
2785: GO 2696
2787: POP
2788: POP
// b := HexInfo ( 74 , 120 ) ;
2789: LD_ADDR_VAR 0 3
2793: PUSH
2794: LD_INT 74
2796: PPUSH
2797: LD_INT 120
2799: PPUSH
2800: CALL_OW 428
2804: ST_TO_ADDR
// uc_nation := 1 ;
2805: LD_ADDR_OWVAR 21
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2813: LD_ADDR_VAR 0 2
2817: PUSH
2818: DOUBLE
2819: LD_INT 1
2821: DEC
2822: ST_TO_ADDR
2823: LD_INT 1
2825: PUSH
2826: LD_INT 2
2828: PUSH
2829: LD_INT 3
2831: PUSH
2832: LD_INT 4
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: LD_OWVAR 67
2845: ARRAY
2846: PUSH
2847: FOR_TO
2848: IFFALSE 2900
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 6
2861: PUSH
2862: LD_INT 7
2864: PUSH
2865: LD_INT 8
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: PUSH
2874: LD_OWVAR 67
2878: ARRAY
2879: PPUSH
2880: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2884: CALL_OW 44
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 52
// end ;
2898: GO 2847
2900: POP
2901: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2902: LD_VAR 0 3
2906: PPUSH
2907: CALL_OW 313
2911: PPUSH
2912: LD_INT 5
2914: PPUSH
2915: CALL_OW 336
// for i := 1 to 6 do
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: DOUBLE
2925: LD_INT 1
2927: DEC
2928: ST_TO_ADDR
2929: LD_INT 6
2931: PUSH
2932: FOR_TO
2933: IFFALSE 2983
// begin PrepareHuman ( false , 4 , 6 ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 4
2940: PPUSH
2941: LD_INT 6
2943: PPUSH
2944: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2948: CALL_OW 44
2952: PPUSH
2953: LD_INT 32
2955: PUSH
2956: LD_INT 33
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_VAR 0 2
2967: PUSH
2968: LD_INT 2
2970: MOD
2971: PUSH
2972: LD_INT 1
2974: PLUS
2975: ARRAY
2976: PPUSH
2977: CALL_OW 52
// end ;
2981: GO 2932
2983: POP
2984: POP
// for i := 1 to 3 do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: DOUBLE
2991: LD_INT 1
2993: DEC
2994: ST_TO_ADDR
2995: LD_INT 3
2997: PUSH
2998: FOR_TO
2999: IFFALSE 3028
// begin PrepareHuman ( false , 3 , 6 ) ;
3001: LD_INT 0
3003: PPUSH
3004: LD_INT 3
3006: PPUSH
3007: LD_INT 6
3009: PPUSH
3010: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3014: CALL_OW 44
3018: PPUSH
3019: LD_INT 25
3021: PPUSH
3022: CALL_OW 52
// end ;
3026: GO 2998
3028: POP
3029: POP
// for i := 1 to 3 do
3030: LD_ADDR_VAR 0 2
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 3
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3102
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3046: LD_INT 0
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: LD_INT 6
3054: PUSH
3055: LD_INT 7
3057: PUSH
3058: LD_INT 7
3060: PUSH
3061: LD_INT 7
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: PUSH
3070: LD_OWVAR 67
3074: ARRAY
3075: PPUSH
3076: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3080: CALL_OW 44
3084: PPUSH
3085: LD_INT 78
3087: PPUSH
3088: LD_INT 130
3090: PPUSH
3091: CALL_OW 428
3095: PPUSH
3096: CALL_OW 52
// end ;
3100: GO 3043
3102: POP
3103: POP
// for i := 1 to 3 do
3104: LD_ADDR_VAR 0 2
3108: PUSH
3109: DOUBLE
3110: LD_INT 1
3112: DEC
3113: ST_TO_ADDR
3114: LD_INT 3
3116: PUSH
3117: FOR_TO
3118: IFFALSE 3205
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3120: LD_INT 2
3122: PPUSH
3123: LD_INT 2
3125: PPUSH
3126: LD_INT 1
3128: PPUSH
3129: LD_INT 13
3131: PPUSH
3132: LD_INT 100
3134: PPUSH
3135: CALL 20219 0 5
// veh := CreateVehicle ;
3139: LD_ADDR_VAR 0 4
3143: PUSH
3144: CALL_OW 45
3148: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3149: LD_VAR 0 4
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3161: LD_VAR 0 4
3165: PPUSH
3166: LD_INT 9
3168: PPUSH
3169: LD_INT 0
3171: PPUSH
3172: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3176: LD_INT 0
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 6
3184: PPUSH
3185: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3189: CALL_OW 44
3193: PPUSH
3194: LD_VAR 0 4
3198: PPUSH
3199: CALL_OW 52
// end ;
3203: GO 3117
3205: POP
3206: POP
// InitHc ;
3207: CALL_OW 19
// hc_gallery := us ;
3211: LD_ADDR_OWVAR 33
3215: PUSH
3216: LD_STRING us
3218: ST_TO_ADDR
// hc_face_number := 26 ;
3219: LD_ADDR_OWVAR 34
3223: PUSH
3224: LD_INT 26
3226: ST_TO_ADDR
// hc_name := Doug Callahan ;
3227: LD_ADDR_OWVAR 26
3231: PUSH
3232: LD_STRING Doug Callahan
3234: ST_TO_ADDR
// hc_class := class_engineer ;
3235: LD_ADDR_OWVAR 28
3239: PUSH
3240: LD_INT 2
3242: ST_TO_ADDR
// hc_sex := sex_male ;
3243: LD_ADDR_OWVAR 27
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3251: LD_ADDR_OWVAR 29
3255: PUSH
3256: LD_INT 10
3258: PUSH
3259: LD_INT 11
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3266: LD_ADDR_OWVAR 30
3270: PUSH
3271: LD_INT 2
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: LD_INT 0
3279: PUSH
3280: LD_INT 0
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3289: LD_ADDR_OWVAR 31
3293: PUSH
3294: LD_INT 4
3296: PUSH
3297: LD_INT 6
3299: PUSH
3300: LD_INT 3
3302: PUSH
3303: LD_INT 1
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// usCommander := CreateHuman ;
3312: LD_ADDR_EXP 28
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3322: LD_EXP 28
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 52
// InitHC_All ( ) ;
3334: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3338: LD_INT 2
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: LD_INT 12
3349: PPUSH
3350: LD_INT 100
3352: PPUSH
3353: CALL 20219 0 5
// usCargo := CreateVehicle ;
3357: LD_ADDR_EXP 30
3361: PUSH
3362: CALL_OW 45
3366: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3367: LD_EXP 30
3371: PPUSH
3372: LD_INT 81
3374: PPUSH
3375: LD_INT 143
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 48
// Connect ( usCargo ) ;
3385: LD_EXP 30
3389: PPUSH
3390: CALL 23310 0 1
// DoNotAttack ( 5 , usCargo ) ;
3394: LD_INT 5
3396: PPUSH
3397: LD_EXP 30
3401: PPUSH
3402: CALL_OW 471
// end ;
3406: LD_VAR 0 1
3410: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3411: LD_EXP 29
3415: NOT
3416: PUSH
3417: LD_EXP 6
3421: AND
3422: PUSH
3423: LD_INT 25
3425: PPUSH
3426: CALL_OW 302
3430: AND
3431: PUSH
3432: LD_INT 25
3434: PPUSH
3435: CALL_OW 461
3439: PUSH
3440: LD_INT 2
3442: EQUAL
3443: AND
3444: IFFALSE 3601
3446: GO 3448
3448: DISABLE
3449: LD_INT 0
3451: PPUSH
3452: PPUSH
3453: PPUSH
// begin enable ;
3454: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3455: LD_ADDR_VAR 0 1
3459: PUSH
3460: DOUBLE
3461: LD_INT 1
3463: DEC
3464: ST_TO_ADDR
3465: LD_INT 5
3467: PUSH
3468: LD_INT 6
3470: PUSH
3471: LD_INT 7
3473: PUSH
3474: LD_INT 8
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: PUSH
3489: FOR_TO
3490: IFFALSE 3599
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_INT 2
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: LD_INT 4
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 3
3516: PPUSH
3517: CALL_OW 12
3521: ARRAY
3522: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3523: LD_VAR 0 2
3527: PUSH
3528: LD_INT 4
3530: EQUAL
3531: IFFALSE 3543
// weapon := us_heavy_gun else
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_INT 6
3540: ST_TO_ADDR
3541: GO 3574
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3543: LD_ADDR_VAR 0 3
3547: PUSH
3548: LD_INT 5
3550: PUSH
3551: LD_INT 7
3553: PUSH
3554: LD_INT 4
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 3
3567: PPUSH
3568: CALL_OW 12
3572: ARRAY
3573: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3574: LD_INT 25
3576: PPUSH
3577: LD_VAR 0 2
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: LD_VAR 0 3
3592: PPUSH
3593: CALL_OW 185
// end ;
3597: GO 3489
3599: POP
3600: POP
// end ;
3601: PPOPN 3
3603: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3604: LD_EXP 29
3608: PUSH
3609: LD_INT 5
3611: PUSH
3612: LD_INT 6
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: LD_OWVAR 67
3631: ARRAY
3632: GREATEREQUAL
3633: IFFALSE 3744
3635: GO 3637
3637: DISABLE
3638: LD_INT 0
3640: PPUSH
3641: PPUSH
// begin enable ;
3642: ENABLE
// tmp := usForces ;
3643: LD_ADDR_VAR 0 2
3647: PUSH
3648: LD_EXP 29
3652: ST_TO_ADDR
// usForces := [ ] ;
3653: LD_ADDR_EXP 29
3657: PUSH
3658: EMPTY
3659: ST_TO_ADDR
// if not tmp then
3660: LD_VAR 0 2
3664: NOT
3665: IFFALSE 3669
// exit ;
3667: GO 3744
// repeat wait ( 0 0$1 ) ;
3669: LD_INT 35
3671: PPUSH
3672: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3676: LD_ADDR_VAR 0 2
3680: PUSH
3681: LD_VAR 0 2
3685: PPUSH
3686: LD_INT 98
3688: PUSH
3689: LD_INT 50
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PUSH
3696: LD_INT 114
3698: PUSH
3699: LD_INT 50
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 127
3708: PUSH
3709: LD_INT 51
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 131
3718: PUSH
3719: LD_INT 35
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL 55184 0 2
3736: ST_TO_ADDR
// until not tmp ;
3737: LD_VAR 0 2
3741: NOT
3742: IFFALSE 3669
// end ;
3744: PPOPN 2
3746: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3747: LD_EXP 3
3751: PUSH
3752: LD_EXP 5
3756: NOT
3757: AND
3758: PUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 22
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PPUSH
3772: CALL_OW 70
3776: AND
3777: IFFALSE 3898
3779: GO 3781
3781: DISABLE
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// begin uc_side := 1 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// uc_nation := 1 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// tmp := [ ] ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: EMPTY
3809: ST_TO_ADDR
// for i := 1 to 2 do
3810: LD_ADDR_VAR 0 1
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_INT 2
3822: PUSH
3823: FOR_TO
3824: IFFALSE 3896
// begin PrepareSoldier ( false , 7 ) ;
3826: LD_INT 0
3828: PPUSH
3829: LD_INT 7
3831: PPUSH
3832: CALL_OW 381
// un := CreateHuman ;
3836: LD_ADDR_VAR 0 2
3840: PUSH
3841: CALL_OW 44
3845: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3846: LD_VAR 0 2
3850: PPUSH
3851: LD_INT 130
3853: PPUSH
3854: LD_INT 153
3856: PPUSH
3857: LD_INT 3
3859: PPUSH
3860: LD_INT 0
3862: PPUSH
3863: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 5
3874: PPUSH
3875: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 108
3886: PPUSH
3887: LD_INT 108
3889: PPUSH
3890: CALL_OW 174
// end ;
3894: GO 3823
3896: POP
3897: POP
// end ;
3898: PPOPN 3
3900: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3901: LD_EXP 3
3905: PUSH
3906: LD_EXP 5
3910: NOT
3911: AND
3912: PUSH
3913: LD_INT 10
3915: PPUSH
3916: LD_INT 22
3918: PUSH
3919: LD_INT 2
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 70
3930: AND
3931: IFFALSE 4052
3933: GO 3935
3935: DISABLE
3936: LD_INT 0
3938: PPUSH
3939: PPUSH
3940: PPUSH
// begin uc_side := 1 ;
3941: LD_ADDR_OWVAR 20
3945: PUSH
3946: LD_INT 1
3948: ST_TO_ADDR
// uc_nation := 1 ;
3949: LD_ADDR_OWVAR 21
3953: PUSH
3954: LD_INT 1
3956: ST_TO_ADDR
// tmp := [ ] ;
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: EMPTY
3963: ST_TO_ADDR
// for i := 1 to 2 do
3964: LD_ADDR_VAR 0 1
3968: PUSH
3969: DOUBLE
3970: LD_INT 1
3972: DEC
3973: ST_TO_ADDR
3974: LD_INT 2
3976: PUSH
3977: FOR_TO
3978: IFFALSE 4050
// begin PrepareSoldier ( false , 7 ) ;
3980: LD_INT 0
3982: PPUSH
3983: LD_INT 7
3985: PPUSH
3986: CALL_OW 381
// un := CreateHuman ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: CALL_OW 44
3999: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4000: LD_VAR 0 2
4004: PPUSH
4005: LD_INT 56
4007: PPUSH
4008: LD_INT 101
4010: PPUSH
4011: LD_INT 3
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4021: LD_VAR 0 2
4025: PPUSH
4026: LD_INT 5
4028: PPUSH
4029: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4033: LD_VAR 0 2
4037: PPUSH
4038: LD_INT 72
4040: PPUSH
4041: LD_INT 92
4043: PPUSH
4044: CALL_OW 174
// end ;
4048: GO 3977
4050: POP
4051: POP
// end ;
4052: PPOPN 3
4054: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 302
4064: PUSH
4065: LD_EXP 7
4069: NOT
4070: AND
4071: IFFALSE 4334
4073: GO 4075
4075: DISABLE
4076: LD_INT 0
4078: PPUSH
4079: PPUSH
// begin enable ;
4080: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4081: LD_ADDR_VAR 0 2
4085: PUSH
4086: LD_INT 14
4088: PPUSH
4089: LD_INT 81
4091: PUSH
4092: LD_INT 1
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 50
4101: PUSH
4102: EMPTY
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 70
4113: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_INT 12
4121: PPUSH
4122: CALL_OW 435
4126: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4127: LD_EXP 30
4131: PPUSH
4132: CALL_OW 261
4136: PUSH
4137: LD_INT 10
4139: LESS
4140: PUSH
4141: LD_INT 2
4143: PPUSH
4144: LD_EXP 30
4148: PPUSH
4149: CALL_OW 292
4153: NOT
4154: AND
4155: IFFALSE 4169
// SetFuel ( usCargo , 100 ) ;
4157: LD_EXP 30
4161: PPUSH
4162: LD_INT 100
4164: PPUSH
4165: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4169: LD_EXP 30
4173: PPUSH
4174: CALL_OW 314
4178: NOT
4179: PUSH
4180: LD_EXP 30
4184: PPUSH
4185: LD_INT 1
4187: PPUSH
4188: CALL_OW 289
4192: PUSH
4193: LD_INT 100
4195: LESS
4196: AND
4197: PUSH
4198: LD_VAR 0 2
4202: NOT
4203: AND
4204: IFFALSE 4270
// begin if cr then
4206: LD_VAR 0 1
4210: IFFALSE 4241
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4212: LD_EXP 30
4216: PPUSH
4217: LD_VAR 0 1
4221: PUSH
4222: LD_INT 1
4224: ARRAY
4225: PPUSH
4226: LD_VAR 0 1
4230: PUSH
4231: LD_INT 2
4233: ARRAY
4234: PPUSH
4235: CALL_OW 117
4239: GO 4268
// if not IsInArea ( usCargo , usCratesArea ) then
4241: LD_EXP 30
4245: PPUSH
4246: LD_INT 12
4248: PPUSH
4249: CALL_OW 308
4253: NOT
4254: IFFALSE 4268
// ComMoveToArea ( usCargo , usCratesArea ) ;
4256: LD_EXP 30
4260: PPUSH
4261: LD_INT 12
4263: PPUSH
4264: CALL_OW 113
// exit ;
4268: GO 4334
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4270: LD_VAR 0 2
4274: PUSH
4275: LD_EXP 30
4279: PPUSH
4280: LD_INT 14
4282: PPUSH
4283: CALL_OW 308
4287: NOT
4288: AND
4289: IFFALSE 4308
// ComMoveXY ( usCargo , 80 , 143 ) else
4291: LD_EXP 30
4295: PPUSH
4296: LD_INT 80
4298: PPUSH
4299: LD_INT 143
4301: PPUSH
4302: CALL_OW 111
4306: GO 4334
// if GetCargo ( usCargo , mat_cans ) then
4308: LD_EXP 30
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: CALL_OW 289
4320: IFFALSE 4334
// ComGive ( usCargo , usDepot ) ;
4322: LD_EXP 30
4326: PPUSH
4327: LD_INT 1
4329: PPUSH
4330: CALL_OW 161
// end ;
4334: PPOPN 2
4336: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4337: LD_EXP 7
4341: NOT
4342: PUSH
4343: LD_INT 22
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 21
4355: PUSH
4356: LD_INT 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: LD_INT 50
4368: PUSH
4369: EMPTY
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: PPUSH
4381: CALL_OW 69
4385: AND
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 1
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: LD_INT 60
4402: PUSH
4403: EMPTY
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 25
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: PPUSH
4425: CALL_OW 69
4429: AND
4430: IFFALSE 4633
4432: GO 4434
4434: DISABLE
4435: LD_INT 0
4437: PPUSH
4438: PPUSH
// begin enable ;
4439: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4440: LD_ADDR_VAR 0 1
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: LD_INT 50
4470: PUSH
4471: EMPTY
4472: LIST
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 69
4487: PUSH
4488: FOR_IN
4489: IFFALSE 4631
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 22
4498: PUSH
4499: LD_INT 1
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 3
4508: PUSH
4509: LD_INT 60
4511: PUSH
4512: EMPTY
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 4
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: ST_TO_ADDR
// if not sci then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// break ;
4546: GO 4631
// sci := sci [ 1 ] ;
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: LD_VAR 0 2
4557: PUSH
4558: LD_INT 1
4560: ARRAY
4561: ST_TO_ADDR
// if IsInUnit ( sci ) then
4562: LD_VAR 0 2
4566: PPUSH
4567: CALL_OW 310
4571: IFFALSE 4584
// ComExit ( sci ) else
4573: LD_VAR 0 2
4577: PPUSH
4578: CALL 52978 0 1
4582: GO 4629
// begin ComHeal ( sci , i ) ;
4584: LD_VAR 0 2
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4598: LD_VAR 0 2
4602: PPUSH
4603: LD_INT 32
4605: PUSH
4606: LD_INT 33
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_INT 2
4618: PPUSH
4619: CALL_OW 12
4623: ARRAY
4624: PPUSH
4625: CALL_OW 180
// end ; end ;
4629: GO 4488
4631: POP
4632: POP
// end ;
4633: PPOPN 2
4635: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4636: LD_EXP 7
4640: NOT
4641: PUSH
4642: LD_INT 22
4644: PUSH
4645: LD_INT 1
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 3
4654: PUSH
4655: LD_INT 60
4657: PUSH
4658: EMPTY
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 50
4667: PUSH
4668: EMPTY
4669: LIST
4670: PUSH
4671: LD_INT 34
4673: PUSH
4674: LD_INT 13
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: AND
4692: PUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 1
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 3
4705: PUSH
4706: LD_INT 24
4708: PUSH
4709: LD_INT 1000
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 21
4722: PUSH
4723: LD_INT 3
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 3
4732: PUSH
4733: LD_INT 30
4735: PUSH
4736: LD_INT 29
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 69
4757: AND
4758: IFFALSE 5027
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
4767: PPUSH
// begin enable ;
4768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4769: LD_ADDR_VAR 0 2
4773: PUSH
4774: LD_INT 22
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: LD_INT 24
4789: PUSH
4790: LD_INT 1000
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 21
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: LD_INT 30
4816: PUSH
4817: LD_INT 29
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 69
4838: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4839: LD_ADDR_VAR 0 3
4843: PUSH
4844: LD_INT 22
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: LD_INT 24
4859: PUSH
4860: LD_INT 600
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 21
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 3
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 29
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4909: LD_ADDR_VAR 0 1
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 1
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: LD_INT 60
4929: PUSH
4930: EMPTY
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 50
4939: PUSH
4940: EMPTY
4941: LIST
4942: PUSH
4943: LD_INT 34
4945: PUSH
4946: LD_INT 13
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PPUSH
4959: CALL_OW 69
4963: PUSH
4964: FOR_IN
4965: IFFALSE 5025
// begin if tmp2 then
4967: LD_VAR 0 3
4971: IFFALSE 4999
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4973: LD_VAR 0 1
4977: PPUSH
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_VAR 0 1
4987: PPUSH
4988: CALL_OW 74
4992: PPUSH
4993: CALL_OW 130
4997: GO 5023
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4999: LD_VAR 0 1
5003: PPUSH
5004: LD_VAR 0 2
5008: PPUSH
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL_OW 74
5018: PPUSH
5019: CALL_OW 130
// end ;
5023: GO 4964
5025: POP
5026: POP
// end ;
5027: PPOPN 3
5029: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5030: LD_EXP 7
5034: NOT
5035: PUSH
5036: LD_INT 14
5038: PPUSH
5039: LD_INT 81
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 50
5051: PUSH
5052: EMPTY
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 70
5063: NOT
5064: AND
5065: PUSH
5066: LD_EXP 31
5070: AND
5071: PUSH
5072: LD_INT 22
5074: PUSH
5075: LD_INT 1
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: LD_INT 60
5087: PUSH
5088: EMPTY
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_INT 50
5097: PUSH
5098: EMPTY
5099: LIST
5100: PUSH
5101: LD_INT 34
5103: PUSH
5104: LD_INT 13
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 69
5121: AND
5122: IFFALSE 5234
5124: GO 5126
5126: DISABLE
// begin enable ;
5127: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5128: LD_INT 22
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 60
5143: PUSH
5144: EMPTY
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 13
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PPUSH
5178: LD_EXP 31
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PUSH
5187: LD_INT 1
5189: ARRAY
5190: PPUSH
5191: LD_EXP 31
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PUSH
5200: LD_INT 2
5202: ARRAY
5203: PPUSH
5204: LD_EXP 31
5208: PUSH
5209: LD_INT 1
5211: ARRAY
5212: PUSH
5213: LD_INT 3
5215: ARRAY
5216: PPUSH
5217: LD_EXP 31
5221: PUSH
5222: LD_INT 1
5224: ARRAY
5225: PUSH
5226: LD_INT 4
5228: ARRAY
5229: PPUSH
5230: CALL_OW 566
// end ;
5234: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5235: LD_INT 22
5237: PUSH
5238: LD_INT 1
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 50
5247: PUSH
5248: EMPTY
5249: LIST
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 54
5256: PUSH
5257: EMPTY
5258: LIST
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: LD_INT 2
5266: PUSH
5267: LD_INT 25
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 25
5279: PUSH
5280: LD_INT 5
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 25
5289: PUSH
5290: LD_INT 16
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: PPUSH
5309: CALL_OW 69
5313: IFFALSE 5675
5315: GO 5317
5317: DISABLE
5318: LD_INT 0
5320: PPUSH
5321: PPUSH
5322: PPUSH
5323: PPUSH
// begin enable ;
5324: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5325: LD_ADDR_VAR 0 2
5329: PUSH
5330: LD_INT 22
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 50
5342: PUSH
5343: EMPTY
5344: LIST
5345: PUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 54
5351: PUSH
5352: EMPTY
5353: LIST
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: LD_INT 25
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 25
5374: PUSH
5375: LD_INT 5
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: LD_INT 25
5384: PUSH
5385: LD_INT 16
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: PPUSH
5404: CALL_OW 69
5408: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: LD_INT 22
5416: PUSH
5417: LD_INT 1
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 50
5426: PUSH
5427: EMPTY
5428: LIST
5429: PUSH
5430: LD_INT 21
5432: PUSH
5433: LD_INT 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 30
5442: PUSH
5443: LD_INT 32
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: LD_INT 58
5452: PUSH
5453: EMPTY
5454: LIST
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: PPUSH
5463: CALL_OW 69
5467: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: LD_INT 22
5475: PUSH
5476: LD_INT 1
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 50
5485: PUSH
5486: EMPTY
5487: LIST
5488: PUSH
5489: LD_INT 30
5491: PUSH
5492: LD_INT 5
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: CALL_OW 69
5508: ST_TO_ADDR
// if not tmp then
5509: LD_VAR 0 2
5513: NOT
5514: IFFALSE 5518
// exit ;
5516: GO 5675
// for i in tmp do
5518: LD_ADDR_VAR 0 1
5522: PUSH
5523: LD_VAR 0 2
5527: PUSH
5528: FOR_IN
5529: IFFALSE 5673
// begin btmp := FilterByTag ( btmp , 0 ) ;
5531: LD_ADDR_VAR 0 3
5535: PUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: LD_INT 0
5543: PPUSH
5544: CALL 50154 0 2
5548: ST_TO_ADDR
// if not btmp then
5549: LD_VAR 0 3
5553: NOT
5554: IFFALSE 5599
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5556: LD_VAR 0 1
5560: PPUSH
5561: CALL_OW 257
5565: PUSH
5566: LD_INT 16
5568: NONEQUAL
5569: PUSH
5570: LD_VAR 0 4
5574: AND
5575: IFFALSE 5595
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5577: LD_VAR 0 1
5581: PPUSH
5582: LD_VAR 0 4
5586: PUSH
5587: LD_INT 1
5589: ARRAY
5590: PPUSH
5591: CALL_OW 120
// continue ;
5595: GO 5528
// end else
5597: GO 5671
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_INT 1
5610: PPUSH
5611: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_VAR 0 3
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 120
// wait ( 0 0$9 ) ;
5633: LD_INT 315
5635: PPUSH
5636: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5640: LD_VAR 0 3
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: CALL 17360 0 1
5653: IFFALSE 5671
// SetTag ( btmp [ 1 ] , 0 ) ;
5655: LD_VAR 0 3
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PPUSH
5664: LD_INT 0
5666: PPUSH
5667: CALL_OW 109
// end ; end ;
5671: GO 5528
5673: POP
5674: POP
// end ;
5675: PPOPN 4
5677: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5678: LD_INT 22
5680: PUSH
5681: LD_INT 1
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 33
5690: PUSH
5691: LD_INT 2
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 50
5700: PUSH
5701: EMPTY
5702: LIST
5703: PUSH
5704: LD_INT 3
5706: PUSH
5707: LD_INT 61
5709: PUSH
5710: EMPTY
5711: LIST
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: PPUSH
5723: CALL_OW 69
5727: IFFALSE 5818
5729: GO 5731
5731: DISABLE
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
// begin enable ;
5736: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5737: LD_ADDR_VAR 0 2
5741: PUSH
5742: LD_INT 22
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 33
5754: PUSH
5755: LD_INT 2
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 50
5764: PUSH
5765: EMPTY
5766: LIST
5767: PUSH
5768: LD_INT 3
5770: PUSH
5771: LD_INT 61
5773: PUSH
5774: EMPTY
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// for i in tmp do
5792: LD_ADDR_VAR 0 1
5796: PUSH
5797: LD_VAR 0 2
5801: PUSH
5802: FOR_IN
5803: IFFALSE 5816
// Connect ( i ) ;
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL 23310 0 1
5814: GO 5802
5816: POP
5817: POP
// end ;
5818: PPOPN 2
5820: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5821: LD_EXP 6
5825: PUSH
5826: LD_OWVAR 67
5830: PUSH
5831: LD_INT 1
5833: GREATER
5834: AND
5835: IFFALSE 6277
5837: GO 5839
5839: DISABLE
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5847: LD_INT 21000
5849: PUSH
5850: LD_INT 18900
5852: PUSH
5853: LD_INT 16800
5855: PUSH
5856: LD_INT 14700
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: PUSH
5865: LD_OWVAR 67
5869: ARRAY
5870: PPUSH
5871: CALL_OW 67
// if usSurrender then
5875: LD_EXP 7
5879: IFFALSE 5883
// exit ;
5881: GO 6277
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5883: LD_ADDR_VAR 0 1
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_INT 4
5895: PUSH
5896: LD_INT 5
5898: PUSH
5899: LD_INT 5
5901: PUSH
5902: LD_INT 6
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_OWVAR 67
5915: ARRAY
5916: PUSH
5917: FOR_TO
5918: IFFALSE 6222
// begin uc_side := 1 ;
5920: LD_ADDR_OWVAR 20
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
// uc_nation := 1 ;
5928: LD_ADDR_OWVAR 21
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// InitHc_All ( ) ;
5936: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5940: LD_INT 0
5942: PPUSH
5943: LD_INT 3
5945: PPUSH
5946: LD_INT 5
5948: PUSH
5949: LD_INT 6
5951: PUSH
5952: LD_INT 7
5954: PUSH
5955: LD_INT 8
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: PUSH
5964: LD_OWVAR 67
5968: ARRAY
5969: PPUSH
5970: CALL_OW 380
// un := CreateHuman ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: CALL_OW 44
5983: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5984: LD_ADDR_VAR 0 4
5988: PUSH
5989: LD_INT 2
5991: PUSH
5992: LD_INT 3
5994: PUSH
5995: LD_INT 4
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: PUSH
6003: LD_VAR 0 1
6007: PUSH
6008: LD_INT 3
6010: MOD
6011: PUSH
6012: LD_INT 1
6014: PLUS
6015: ARRAY
6016: ST_TO_ADDR
// if chassis = us_heavy_tracked then
6017: LD_VAR 0 4
6021: PUSH
6022: LD_INT 4
6024: EQUAL
6025: IFFALSE 6060
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
6027: LD_ADDR_VAR 0 5
6031: PUSH
6032: LD_INT 6
6034: PUSH
6035: LD_INT 4
6037: PUSH
6038: LD_INT 5
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 1
6048: PPUSH
6049: LD_INT 3
6051: PPUSH
6052: CALL_OW 12
6056: ARRAY
6057: ST_TO_ADDR
6058: GO 6095
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6060: LD_ADDR_VAR 0 5
6064: PUSH
6065: LD_INT 5
6067: PUSH
6068: LD_INT 5
6070: PUSH
6071: LD_INT 7
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 1
6085: PPUSH
6086: LD_INT 4
6088: PPUSH
6089: CALL_OW 12
6093: ARRAY
6094: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6095: LD_VAR 0 4
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: LD_VAR 0 5
6110: PPUSH
6111: LD_INT 30
6113: PPUSH
6114: CALL 20219 0 5
// veh := CreateVehicle ;
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: CALL_OW 45
6127: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6128: LD_ADDR_EXP 32
6132: PUSH
6133: LD_EXP 32
6137: PPUSH
6138: LD_EXP 32
6142: PUSH
6143: LD_INT 1
6145: PLUS
6146: PPUSH
6147: LD_VAR 0 3
6151: PPUSH
6152: CALL_OW 1
6156: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6157: LD_VAR 0 3
6161: PPUSH
6162: LD_INT 4
6164: PPUSH
6165: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6169: LD_VAR 0 3
6173: PPUSH
6174: LD_INT 15
6176: PPUSH
6177: LD_INT 0
6179: PPUSH
6180: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6184: LD_VAR 0 2
6188: PPUSH
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 153
6205: PPUSH
6206: LD_INT 45
6208: PPUSH
6209: CALL_OW 111
// wait ( 0 0$2 ) ;
6213: LD_INT 70
6215: PPUSH
6216: CALL_OW 67
// end ;
6220: GO 5917
6222: POP
6223: POP
// repeat wait ( 0 0$1 ) ;
6224: LD_INT 35
6226: PPUSH
6227: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6231: LD_ADDR_EXP 32
6235: PUSH
6236: LD_EXP 32
6240: PPUSH
6241: LD_INT 150
6243: PUSH
6244: LD_INT 36
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 138
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PPUSH
6265: CALL 55184 0 2
6269: ST_TO_ADDR
// until not usAdditionalForces ;
6270: LD_EXP 32
6274: NOT
6275: IFFALSE 6224
// end ;
6277: PPOPN 5
6279: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6280: LD_INT 22
6282: PUSH
6283: LD_INT 1
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 101
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: IFFALSE 6321
6310: GO 6312
6312: DISABLE
// usAttacksAllowed := true ; end_of_file
6313: LD_ADDR_EXP 6
6317: PUSH
6318: LD_INT 1
6320: ST_TO_ADDR
6321: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6322: LD_VAR 0 1
6326: PPUSH
6327: CALL 56552 0 1
// if un = Heike then
6331: LD_VAR 0 1
6335: PUSH
6336: LD_EXP 13
6340: EQUAL
6341: IFFALSE 6350
// YouLost ( Heike ) ;
6343: LD_STRING Heike
6345: PPUSH
6346: CALL_OW 104
// if un = usCommander then
6350: LD_VAR 0 1
6354: PUSH
6355: LD_EXP 28
6359: EQUAL
6360: IFFALSE 6369
// YouLost ( Commander ) ;
6362: LD_STRING Commander
6364: PPUSH
6365: CALL_OW 104
// if GetSide ( un ) = 1 then
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL_OW 255
6378: PUSH
6379: LD_INT 1
6381: EQUAL
6382: IFFALSE 6633
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6384: LD_VAR 0 1
6388: PPUSH
6389: CALL_OW 264
6393: PUSH
6394: LD_INT 13
6396: EQUAL
6397: PUSH
6398: LD_INT 25
6400: PPUSH
6401: CALL_OW 302
6405: AND
6406: IFFALSE 6427
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6408: LD_INT 25
6410: PPUSH
6411: LD_INT 2
6413: PPUSH
6414: LD_INT 2
6416: PPUSH
6417: LD_INT 2
6419: PPUSH
6420: LD_INT 13
6422: PPUSH
6423: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 264
6436: PUSH
6437: LD_INT 12
6439: EQUAL
6440: PUSH
6441: LD_INT 25
6443: PPUSH
6444: CALL_OW 302
6448: AND
6449: IFFALSE 6470
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6451: LD_INT 25
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: LD_INT 12
6465: PPUSH
6466: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6470: LD_VAR 0 1
6474: PPUSH
6475: CALL_OW 266
6479: PUSH
6480: LD_INT 32
6482: EQUAL
6483: IFFALSE 6548
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6485: LD_ADDR_EXP 31
6489: PUSH
6490: LD_EXP 31
6494: PPUSH
6495: LD_EXP 31
6499: PUSH
6500: LD_INT 1
6502: PLUS
6503: PPUSH
6504: LD_INT 32
6506: PUSH
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 250
6516: PUSH
6517: LD_VAR 0 1
6521: PPUSH
6522: CALL_OW 251
6526: PUSH
6527: LD_VAR 0 1
6531: PPUSH
6532: CALL_OW 254
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: PPUSH
6543: CALL_OW 1
6547: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6548: LD_VAR 0 1
6552: PPUSH
6553: CALL_OW 266
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: LD_INT 4
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: IN
6568: IFFALSE 6633
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6570: LD_ADDR_EXP 31
6574: PUSH
6575: LD_EXP 31
6579: PPUSH
6580: LD_EXP 31
6584: PUSH
6585: LD_INT 1
6587: PLUS
6588: PPUSH
6589: LD_INT 4
6591: PUSH
6592: LD_VAR 0 1
6596: PPUSH
6597: CALL_OW 250
6601: PUSH
6602: LD_VAR 0 1
6606: PPUSH
6607: CALL_OW 251
6611: PUSH
6612: LD_VAR 0 1
6616: PPUSH
6617: CALL_OW 254
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: PPUSH
6628: CALL_OW 1
6632: ST_TO_ADDR
// end ; end ;
6633: PPOPN 1
6635: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6636: LD_VAR 0 1
6640: PPUSH
6641: CALL_OW 255
6645: PUSH
6646: LD_INT 1
6648: EQUAL
6649: PUSH
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 110
6659: PUSH
6660: LD_INT 1
6662: EQUAL
6663: AND
6664: IFFALSE 6678
// SetTag ( un , 0 ) ;
6666: LD_VAR 0 1
6670: PPUSH
6671: LD_INT 0
6673: PPUSH
6674: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 255
6687: PUSH
6688: LD_INT 1
6690: EQUAL
6691: PUSH
6692: LD_VAR 0 1
6696: PPUSH
6697: CALL_OW 264
6701: PUSH
6702: LD_INT 6
6704: EQUAL
6705: AND
6706: PUSH
6707: LD_EXP 11
6711: NOT
6712: AND
6713: IFFALSE 6723
// seeHeavyGun := true ;
6715: LD_ADDR_EXP 11
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL_OW 263
6732: PUSH
6733: LD_INT 2
6735: EQUAL
6736: PUSH
6737: LD_VAR 0 1
6741: PPUSH
6742: CALL_OW 255
6746: PUSH
6747: LD_INT 2
6749: NONEQUAL
6750: AND
6751: IFFALSE 6777
// begin ComUnlink ( un ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 136
// if not seeRemoteVehicle then
6762: LD_EXP 10
6766: NOT
6767: IFFALSE 6777
// seeRemoteVehicle := true ;
6769: LD_ADDR_EXP 10
6773: PUSH
6774: LD_INT 1
6776: ST_TO_ADDR
// end ; end ;
6777: PPOPN 1
6779: END
// on BuildingComplete ( b ) do var i , barracks ;
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
// begin if GetSide ( b ) = 1 then
6784: LD_VAR 0 1
6788: PPUSH
6789: CALL_OW 255
6793: PUSH
6794: LD_INT 1
6796: EQUAL
6797: IFFALSE 6949
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6799: LD_ADDR_EXP 31
6803: PUSH
6804: LD_EXP 31
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: CALL_OW 3
6816: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 266
6826: PUSH
6827: LD_INT 4
6829: EQUAL
6830: IFFALSE 6841
// ComUpgrade ( b ) ;
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 266
6850: PUSH
6851: LD_INT 32
6853: EQUAL
6854: IFFALSE 6949
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6856: LD_VAR 0 1
6860: PPUSH
6861: LD_INT 6
6863: PUSH
6864: LD_INT 7
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 1
6873: PPUSH
6874: LD_INT 2
6876: PPUSH
6877: CALL_OW 12
6881: ARRAY
6882: PPUSH
6883: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 1
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 30
6904: PUSH
6905: LD_INT 5
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PPUSH
6916: CALL_OW 69
6920: ST_TO_ADDR
// if barracks then
6921: LD_VAR 0 3
6925: IFFALSE 6949
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6927: LD_VAR 0 3
6931: PUSH
6932: LD_INT 1
6934: ARRAY
6935: PPUSH
6936: CALL_OW 313
6940: PUSH
6941: LD_INT 1
6943: ARRAY
6944: PPUSH
6945: CALL_OW 122
// end ; end ; end ;
6949: PPOPN 3
6951: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: LD_VAR 0 2
6961: PPUSH
6962: CALL 56672 0 2
// if GetSide ( factory ) = 1 then
6966: LD_VAR 0 2
6970: PPUSH
6971: CALL_OW 255
6975: PUSH
6976: LD_INT 1
6978: EQUAL
6979: IFFALSE 7058
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6981: LD_VAR 0 1
6985: PPUSH
6986: CALL_OW 264
6990: PUSH
6991: LD_INT 12
6993: EQUAL
6994: IFFALSE 7006
// usCargo := vehicle ;
6996: LD_ADDR_EXP 30
7000: PUSH
7001: LD_VAR 0 1
7005: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 264
7015: PUSH
7016: LD_INT 12
7018: PUSH
7019: LD_INT 13
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: IN
7026: NOT
7027: IFFALSE 7058
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
7029: LD_ADDR_EXP 29
7033: PUSH
7034: LD_EXP 29
7038: PPUSH
7039: LD_EXP 29
7043: PUSH
7044: LD_INT 1
7046: PLUS
7047: PPUSH
7048: LD_VAR 0 1
7052: PPUSH
7053: CALL_OW 1
7057: ST_TO_ADDR
// end ; end ;
7058: PPOPN 2
7060: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7061: LD_VAR 0 2
7065: PPUSH
7066: CALL_OW 255
7070: PUSH
7071: LD_INT 1
7073: EQUAL
7074: IFFALSE 7088
// AddComEnterUnit ( un , amFac ) ;
7076: LD_VAR 0 1
7080: PPUSH
7081: LD_INT 25
7083: PPUSH
7084: CALL_OW 180
// end ;
7088: PPOPN 4
7090: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7091: LD_VAR 0 1
7095: PPUSH
7096: CALL_OW 255
7100: PUSH
7101: LD_INT 1
7103: EQUAL
7104: PUSH
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 266
7114: PUSH
7115: LD_INT 32
7117: EQUAL
7118: AND
7119: PUSH
7120: LD_VAR 0 2
7124: PPUSH
7125: CALL_OW 257
7129: PUSH
7130: LD_INT 1
7132: PUSH
7133: LD_INT 5
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: IN
7140: AND
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 30
7154: PUSH
7155: LD_INT 5
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 50
7164: PUSH
7165: EMPTY
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: PPUSH
7173: CALL_OW 69
7177: AND
7178: IFFALSE 7248
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7180: LD_INT 74
7182: PPUSH
7183: LD_INT 120
7185: PPUSH
7186: CALL_OW 428
7190: PPUSH
7191: CALL_OW 313
7195: PUSH
7196: LD_INT 6
7198: LESS
7199: IFFALSE 7248
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 74
7208: PPUSH
7209: LD_INT 120
7211: PPUSH
7212: CALL_OW 428
7216: PPUSH
7217: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7221: LD_VAR 0 2
7225: PPUSH
7226: CALL_OW 257
7230: PUSH
7231: LD_INT 1
7233: EQUAL
7234: IFFALSE 7248
// AddComChangeProfession ( un , class_sniper ) ;
7236: LD_VAR 0 2
7240: PPUSH
7241: LD_INT 5
7243: PPUSH
7244: CALL_OW 183
// end ; end ; end_of_file
7248: PPOPN 2
7250: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7251: LD_INT 0
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
7260: PPUSH
7261: PPUSH
// Video ( true ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 52552 0 1
// music_nat := 1 ;
7269: LD_ADDR_OWVAR 71
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// music_class := music_recon ;
7277: LD_ADDR_OWVAR 72
7281: PUSH
7282: LD_INT 3
7284: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7285: LD_INT 184
7287: PPUSH
7288: LD_INT 142
7290: PPUSH
7291: LD_INT 2
7293: PPUSH
7294: LD_INT 10
7296: NEG
7297: PPUSH
7298: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7302: LD_INT 184
7304: PPUSH
7305: LD_INT 142
7307: PPUSH
7308: LD_INT 2
7310: PPUSH
7311: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7315: LD_INT 204
7317: PPUSH
7318: LD_INT 151
7320: PPUSH
7321: LD_INT 2
7323: PPUSH
7324: LD_INT 10
7326: NEG
7327: PPUSH
7328: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7332: LD_INT 204
7334: PPUSH
7335: LD_INT 151
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7345: LD_INT 184
7347: PPUSH
7348: LD_INT 142
7350: PPUSH
7351: CALL_OW 86
// wait ( 0 0$2 ) ;
7355: LD_INT 70
7357: PPUSH
7358: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7362: LD_ADDR_VAR 0 5
7366: PUSH
7367: LD_EXP 13
7371: PUSH
7372: LD_EXP 14
7376: PUSH
7377: LD_EXP 15
7381: PUSH
7382: LD_EXP 16
7386: PUSH
7387: LD_EXP 17
7391: PUSH
7392: LD_EXP 18
7396: PUSH
7397: LD_EXP 19
7401: PUSH
7402: LD_EXP 20
7406: PUSH
7407: LD_EXP 22
7411: PUSH
7412: LD_EXP 23
7416: PUSH
7417: LD_EXP 24
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: LD_EXP 25
7439: UNION
7440: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7441: LD_ADDR_VAR 0 6
7445: PUSH
7446: LD_VAR 0 5
7450: PPUSH
7451: LD_INT 25
7453: PUSH
7454: LD_INT 2
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 72
7465: PUSH
7466: LD_INT 0
7468: GREATER
7469: ST_TO_ADDR
// hasCamera := false ;
7470: LD_ADDR_VAR 0 7
7474: PUSH
7475: LD_INT 0
7477: ST_TO_ADDR
// if not hasEng then
7478: LD_VAR 0 6
7482: NOT
7483: IFFALSE 7511
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7485: LD_VAR 0 5
7489: PUSH
7490: LD_INT 1
7492: PPUSH
7493: LD_VAR 0 5
7497: PPUSH
7498: CALL_OW 12
7502: ARRAY
7503: PPUSH
7504: LD_INT 2
7506: PPUSH
7507: CALL_OW 336
// if heikeVehicles then
7511: LD_EXP 27
7515: IFFALSE 8139
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7517: LD_ADDR_VAR 0 5
7521: PUSH
7522: LD_VAR 0 5
7526: PPUSH
7527: LD_INT 3
7529: PPUSH
7530: CALL 54806 0 2
7534: ST_TO_ADDR
// for i in heikeVehicles do
7535: LD_ADDR_VAR 0 2
7539: PUSH
7540: LD_EXP 27
7544: PUSH
7545: FOR_IN
7546: IFFALSE 8137
// begin if not tmp then
7548: LD_VAR 0 5
7552: NOT
7553: IFFALSE 7557
// break ;
7555: GO 8137
// uc_side := 2 ;
7557: LD_ADDR_OWVAR 20
7561: PUSH
7562: LD_INT 2
7564: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7565: LD_ADDR_OWVAR 21
7569: PUSH
7570: LD_VAR 0 2
7574: PUSH
7575: LD_INT 5
7577: ARRAY
7578: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7579: LD_ADDR_OWVAR 37
7583: PUSH
7584: LD_VAR 0 2
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7593: LD_ADDR_OWVAR 39
7597: PUSH
7598: LD_VAR 0 2
7602: PUSH
7603: LD_INT 2
7605: ARRAY
7606: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7607: LD_ADDR_OWVAR 38
7611: PUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_INT 3
7619: ARRAY
7620: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7621: LD_ADDR_OWVAR 40
7625: PUSH
7626: LD_VAR 0 2
7630: PUSH
7631: LD_INT 4
7633: ARRAY
7634: ST_TO_ADDR
// veh := CreateVehicle ;
7635: LD_ADDR_VAR 0 4
7639: PUSH
7640: CALL_OW 45
7644: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7645: LD_VAR 0 4
7649: PPUSH
7650: LD_INT 4
7652: PPUSH
7653: CALL_OW 233
// if i [ 3 ] = control_manual then
7657: LD_VAR 0 2
7661: PUSH
7662: LD_INT 3
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: EQUAL
7669: IFFALSE 7754
// begin PlaceUnitArea ( veh , startArea , false ) ;
7671: LD_VAR 0 4
7675: PPUSH
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 0
7681: PPUSH
7682: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_INT 4
7693: ARRAY
7694: PUSH
7695: LD_INT 31
7697: EQUAL
7698: IFFALSE 7716
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7700: LD_VAR 0 5
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: LD_INT 3
7711: PPUSH
7712: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7716: LD_VAR 0 5
7720: PUSH
7721: LD_INT 1
7723: ARRAY
7724: PPUSH
7725: LD_VAR 0 4
7729: PPUSH
7730: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7734: LD_ADDR_VAR 0 5
7738: PUSH
7739: LD_VAR 0 5
7743: PPUSH
7744: LD_INT 1
7746: PPUSH
7747: CALL_OW 3
7751: ST_TO_ADDR
// end else
7752: GO 7815
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7754: LD_INT 22
7756: PUSH
7757: LD_INT 2
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 34
7766: PUSH
7767: LD_INT 31
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: IFFALSE 7815
// begin PlaceUnitArea ( veh , startArea , false ) ;
7784: LD_VAR 0 4
7788: PPUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 0
7794: PPUSH
7795: CALL_OW 49
// Connect ( veh ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: CALL 23310 0 1
// wait ( 0 0$2 ) ;
7808: LD_INT 70
7810: PPUSH
7811: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7815: LD_VAR 0 4
7819: PPUSH
7820: LD_VAR 0 2
7824: PUSH
7825: LD_INT 6
7827: ARRAY
7828: PPUSH
7829: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7833: LD_VAR 0 4
7837: PPUSH
7838: LD_INT 20
7840: PPUSH
7841: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 7
7852: ARRAY
7853: PUSH
7854: LD_VAR 0 4
7858: PPUSH
7859: CALL_OW 264
7863: PUSH
7864: LD_INT 51
7866: PUSH
7867: LD_INT 32
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: IN
7874: AND
7875: IFFALSE 7926
// begin for j := 1 to 2 do
7877: LD_ADDR_VAR 0 3
7881: PUSH
7882: DOUBLE
7883: LD_INT 1
7885: DEC
7886: ST_TO_ADDR
7887: LD_INT 2
7889: PUSH
7890: FOR_TO
7891: IFFALSE 7924
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7893: LD_VAR 0 4
7897: PPUSH
7898: LD_VAR 0 3
7902: PPUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_INT 7
7910: ARRAY
7911: PUSH
7912: LD_VAR 0 3
7916: ARRAY
7917: PPUSH
7918: CALL_OW 291
7922: GO 7890
7924: POP
7925: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 185
7933: PPUSH
7934: LD_INT 144
7936: PPUSH
7937: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7941: LD_VAR 0 4
7945: PPUSH
7946: CALL_OW 263
7950: PUSH
7951: LD_INT 1
7953: EQUAL
7954: PUSH
7955: LD_VAR 0 7
7959: NOT
7960: AND
7961: PUSH
7962: LD_VAR 0 4
7966: PPUSH
7967: CALL_OW 311
7971: PPUSH
7972: CALL_OW 257
7976: PUSH
7977: LD_INT 2
7979: EQUAL
7980: AND
7981: IFFALSE 8086
// begin hasCamera := true ;
7983: LD_ADDR_VAR 0 7
7987: PUSH
7988: LD_INT 1
7990: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7991: LD_ADDR_VAR 0 8
7995: PUSH
7996: LD_VAR 0 4
8000: PPUSH
8001: CALL_OW 311
8005: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
8006: LD_VAR 0 4
8010: PPUSH
8011: LD_INT 177
8013: PPUSH
8014: LD_INT 138
8016: PPUSH
8017: CALL_OW 171
// AddComExitVehicle ( driver ) ;
8021: LD_VAR 0 8
8025: PPUSH
8026: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
8030: LD_VAR 0 8
8034: PPUSH
8035: LD_INT 190
8037: PPUSH
8038: LD_INT 150
8040: PPUSH
8041: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
8045: LD_VAR 0 8
8049: PPUSH
8050: LD_VAR 0 4
8054: PPUSH
8055: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8059: LD_VAR 0 8
8063: PPUSH
8064: LD_INT 170
8066: PPUSH
8067: LD_INT 103
8069: PPUSH
8070: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8074: LD_INT 190
8076: PPUSH
8077: LD_INT 150
8079: PPUSH
8080: CALL_OW 84
// end else
8084: GO 8128
// begin AddComWait ( veh , 0 0$2 ) ;
8086: LD_VAR 0 4
8090: PPUSH
8091: LD_INT 70
8093: PPUSH
8094: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8098: LD_VAR 0 4
8102: PPUSH
8103: LD_INT 179
8105: PPUSH
8106: LD_INT 129
8108: PPUSH
8109: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8113: LD_VAR 0 4
8117: PPUSH
8118: LD_INT 170
8120: PPUSH
8121: LD_INT 103
8123: PPUSH
8124: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8128: LD_INT 70
8130: PPUSH
8131: CALL_OW 67
// end ;
8135: GO 7545
8137: POP
8138: POP
// end ; if tmp then
8139: LD_VAR 0 5
8143: IFFALSE 8288
// begin for i in tmp do
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_VAR 0 5
8154: PUSH
8155: FOR_IN
8156: IFFALSE 8286
// begin SetDir ( i , 4 ) ;
8158: LD_VAR 0 2
8162: PPUSH
8163: LD_INT 4
8165: PPUSH
8166: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8170: LD_VAR 0 2
8174: PPUSH
8175: LD_INT 1
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8185: LD_VAR 0 2
8189: PPUSH
8190: LD_INT 185
8192: PPUSH
8193: LD_INT 144
8195: PPUSH
8196: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8200: LD_VAR 0 2
8204: PPUSH
8205: CALL_OW 257
8209: PUSH
8210: LD_INT 2
8212: EQUAL
8213: PUSH
8214: LD_VAR 0 7
8218: NOT
8219: AND
8220: IFFALSE 8247
// begin hasCamera := true ;
8222: LD_ADDR_VAR 0 7
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8230: LD_VAR 0 2
8234: PPUSH
8235: LD_INT 190
8237: PPUSH
8238: LD_INT 150
8240: PPUSH
8241: CALL_OW 217
// end else
8245: GO 8262
// AddComMoveXY ( i , 179 , 129 ) ;
8247: LD_VAR 0 2
8251: PPUSH
8252: LD_INT 179
8254: PPUSH
8255: LD_INT 129
8257: PPUSH
8258: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_INT 170
8269: PPUSH
8270: LD_INT 103
8272: PPUSH
8273: CALL_OW 171
// wait ( 0 0$2 ) ;
8277: LD_INT 70
8279: PPUSH
8280: CALL_OW 67
// end ;
8284: GO 8155
8286: POP
8287: POP
// end ; if heikeApes then
8288: LD_EXP 26
8292: IFFALSE 8410
// begin counter := 0 ;
8294: LD_ADDR_VAR 0 9
8298: PUSH
8299: LD_INT 0
8301: ST_TO_ADDR
// for i in heikeApes do
8302: LD_ADDR_VAR 0 2
8306: PUSH
8307: LD_EXP 26
8311: PUSH
8312: FOR_IN
8313: IFFALSE 8408
// begin if counter > 2 then
8315: LD_VAR 0 9
8319: PUSH
8320: LD_INT 2
8322: GREATER
8323: IFFALSE 8327
// break ;
8325: GO 8408
// counter := Inc ( counter ) ;
8327: LD_ADDR_VAR 0 9
8331: PUSH
8332: LD_VAR 0 9
8336: PPUSH
8337: CALL 53941 0 1
8341: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8342: LD_VAR 0 2
8346: PPUSH
8347: LD_INT 4
8349: PPUSH
8350: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8354: LD_VAR 0 2
8358: PPUSH
8359: LD_INT 1
8361: PPUSH
8362: LD_INT 0
8364: PPUSH
8365: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8369: LD_VAR 0 2
8373: PPUSH
8374: LD_INT 185
8376: PPUSH
8377: LD_INT 144
8379: PPUSH
8380: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8384: LD_VAR 0 2
8388: PPUSH
8389: LD_INT 170
8391: PPUSH
8392: LD_INT 103
8394: PPUSH
8395: CALL_OW 171
// wait ( 0 0$2 ) ;
8399: LD_INT 70
8401: PPUSH
8402: CALL_OW 67
// end ;
8406: GO 8312
8408: POP
8409: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8410: LD_EXP 13
8414: PPUSH
8415: LD_INT 163
8417: PPUSH
8418: LD_INT 89
8420: PPUSH
8421: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8425: LD_EXP 13
8429: PPUSH
8430: LD_STRING DH-Intro-1
8432: PPUSH
8433: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8437: LD_INT 175
8439: PPUSH
8440: LD_INT 117
8442: PPUSH
8443: CALL_OW 84
// if Markov then
8447: LD_EXP 20
8451: IFFALSE 9026
// begin Say ( Markov , DMar-Intro-2 ) ;
8453: LD_EXP 20
8457: PPUSH
8458: LD_STRING DMar-Intro-2
8460: PPUSH
8461: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8465: LD_EXP 20
8469: PPUSH
8470: LD_STRING DMar-Intro-3
8472: PPUSH
8473: CALL_OW 88
// wait ( 0 0$1 ) ;
8477: LD_INT 35
8479: PPUSH
8480: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8484: LD_EXP 13
8488: PPUSH
8489: CALL_OW 85
// if Kurt then
8493: LD_EXP 23
8497: IFFALSE 8549
// begin if IsInUnit ( Kurt ) then
8499: LD_EXP 23
8503: PPUSH
8504: CALL_OW 310
8508: IFFALSE 8519
// ComExit ( Kurt ) ;
8510: LD_EXP 23
8514: PPUSH
8515: CALL 52978 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8519: LD_EXP 23
8523: PPUSH
8524: LD_INT 130
8526: PPUSH
8527: LD_INT 56
8529: PPUSH
8530: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8534: LD_EXP 23
8538: PPUSH
8539: LD_INT 129
8541: PPUSH
8542: LD_INT 56
8544: PPUSH
8545: CALL_OW 178
// end ; if Kaia then
8549: LD_EXP 18
8553: IFFALSE 8733
// begin Say ( Kaia , DK-Intro-4 ) ;
8555: LD_EXP 18
8559: PPUSH
8560: LD_STRING DK-Intro-4
8562: PPUSH
8563: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8567: LD_EXP 20
8571: PPUSH
8572: LD_STRING DMar-Intro-5
8574: PPUSH
8575: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8579: LD_EXP 20
8583: PPUSH
8584: LD_STRING DMar-Intro-6
8586: PPUSH
8587: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8591: LD_EXP 22
8595: PPUSH
8596: LD_STRING DO-Intro-7
8598: PPUSH
8599: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8603: LD_INT 160
8605: PPUSH
8606: LD_INT 85
8608: PPUSH
8609: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8613: LD_EXP 20
8617: PPUSH
8618: LD_STRING DMar-Intro-8
8620: PPUSH
8621: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8625: LD_EXP 20
8629: PPUSH
8630: LD_STRING DMar-Intro-9
8632: PPUSH
8633: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8637: LD_EXP 20
8641: PPUSH
8642: LD_STRING DMar-Intro-10
8644: PPUSH
8645: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8649: LD_EXP 20
8653: PPUSH
8654: LD_STRING DMar-Intro-11
8656: PPUSH
8657: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8661: LD_EXP 14
8665: PPUSH
8666: LD_STRING DG-Intro-12
8668: PPUSH
8669: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8673: LD_EXP 14
8677: PPUSH
8678: LD_STRING DG-Intro-13
8680: PPUSH
8681: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8685: LD_EXP 14
8689: PPUSH
8690: LD_STRING DG-Intro-14
8692: PPUSH
8693: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8697: LD_EXP 14
8701: PPUSH
8702: LD_STRING DG-Intro-15
8704: PPUSH
8705: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8709: LD_EXP 13
8713: PPUSH
8714: LD_STRING DH-Intro-16
8716: PPUSH
8717: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8721: LD_EXP 20
8725: PPUSH
8726: LD_STRING DMar-Intro-17
8728: PPUSH
8729: CALL_OW 88
// end ; if Kurt and Mike then
8733: LD_EXP 23
8737: PUSH
8738: LD_EXP 15
8742: AND
8743: IFFALSE 9026
// begin CenterNowOnUnits ( Kurt ) ;
8745: LD_EXP 23
8749: PPUSH
8750: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8754: LD_EXP 23
8758: PPUSH
8759: LD_EXP 13
8763: PPUSH
8764: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8768: LD_EXP 23
8772: PPUSH
8773: LD_STRING DKs-Intro-18
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8780: LD_EXP 23
8784: PPUSH
8785: LD_STRING DKs-Intro-19
8787: PPUSH
8788: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8792: LD_EXP 15
8796: PPUSH
8797: CALL_OW 87
// if IsInUnit ( Mike ) then
8801: LD_EXP 15
8805: PPUSH
8806: CALL_OW 310
8810: IFFALSE 8821
// ComExit ( Mike ) ;
8812: LD_EXP 15
8816: PPUSH
8817: CALL 52978 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8821: LD_EXP 15
8825: PPUSH
8826: LD_INT 129
8828: PPUSH
8829: LD_INT 53
8831: PPUSH
8832: CALL_OW 171
// AddComHold ( Mike ) ;
8836: LD_EXP 15
8840: PPUSH
8841: CALL_OW 200
// wait ( 0 0$2 ) ;
8845: LD_INT 70
8847: PPUSH
8848: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8852: LD_EXP 15
8856: PPUSH
8857: LD_STRING DM-Intro-20
8859: PPUSH
8860: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8864: LD_ADDR_EXP 3
8868: PUSH
8869: LD_STRING Scout
8871: PPUSH
8872: CALL_OW 97
8876: ST_TO_ADDR
// if scoutActive = 1 then
8877: LD_EXP 3
8881: PUSH
8882: LD_INT 1
8884: EQUAL
8885: IFFALSE 8982
// begin CenterNowOnUnits ( Kurt ) ;
8887: LD_EXP 23
8891: PPUSH
8892: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8896: LD_EXP 13
8900: PPUSH
8901: LD_STRING DH-Intro-21
8903: PPUSH
8904: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8908: LD_EXP 15
8912: PPUSH
8913: LD_STRING DM-Intro-22
8915: PPUSH
8916: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8920: LD_EXP 23
8924: PPUSH
8925: LD_STRING DKs-Intro-23
8927: PPUSH
8928: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8932: LD_EXP 23
8936: PPUSH
8937: LD_INT 5
8939: PPUSH
8940: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8944: LD_EXP 15
8948: PPUSH
8949: LD_INT 5
8951: PPUSH
8952: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8956: LD_EXP 23
8960: PUSH
8961: LD_EXP 15
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PPUSH
8970: LD_INT 104
8972: PPUSH
8973: LD_INT 66
8975: PPUSH
8976: CALL_OW 111
// end else
8980: GO 9026
// begin scoutActive := 0 ;
8982: LD_ADDR_EXP 3
8986: PUSH
8987: LD_INT 0
8989: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8990: LD_EXP 13
8994: PPUSH
8995: LD_STRING DH-Intro-a-21
8997: PPUSH
8998: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
9002: LD_EXP 15
9006: PPUSH
9007: LD_STRING DM-Intro-a-22
9009: PPUSH
9010: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
9014: LD_EXP 23
9018: PPUSH
9019: LD_STRING DKs-Intro-a-23
9021: PPUSH
9022: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
9026: LD_INT 0
9028: PPUSH
9029: CALL 52552 0 1
// music_nat := music_auto ;
9033: LD_ADDR_OWVAR 71
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// music_class := music_auto ;
9041: LD_ADDR_OWVAR 72
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
9049: LD_STRING M1
9051: PPUSH
9052: CALL_OW 337
// wait ( 0 0$3 ) ;
9056: LD_INT 105
9058: PPUSH
9059: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9063: LD_EXP 13
9067: PPUSH
9068: LD_STRING DH-Base-1
9070: PPUSH
9071: CALL_OW 88
// if Kaia then
9075: LD_EXP 18
9079: IFFALSE 9189
// begin Say ( Kaia , DK-Base-2 ) ;
9081: LD_EXP 18
9085: PPUSH
9086: LD_STRING DK-Base-2
9088: PPUSH
9089: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9093: LD_EXP 13
9097: PPUSH
9098: LD_STRING DH-Base-3
9100: PPUSH
9101: CALL_OW 88
// if Aviradze then
9105: LD_EXP 24
9109: IFFALSE 9189
// begin Say ( Aviradze , DA-Base-4 ) ;
9111: LD_EXP 24
9115: PPUSH
9116: LD_STRING DA-Base-4
9118: PPUSH
9119: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9123: LD_EXP 18
9127: PPUSH
9128: LD_STRING DK-Base-5
9130: PPUSH
9131: CALL_OW 88
// if Markov then
9135: LD_EXP 20
9139: IFFALSE 9189
// begin Say ( Markov , DMar-Base-6 ) ;
9141: LD_EXP 20
9145: PPUSH
9146: LD_STRING DMar-Base-6
9148: PPUSH
9149: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9153: LD_EXP 18
9157: PPUSH
9158: LD_STRING DK-Base-7
9160: PPUSH
9161: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9165: LD_EXP 20
9169: PPUSH
9170: LD_STRING DMar-Base-8
9172: PPUSH
9173: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9177: LD_EXP 20
9181: PPUSH
9182: LD_STRING DMar-Base-9
9184: PPUSH
9185: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9189: CALL_OW 22
// end ;
9193: LD_VAR 0 1
9197: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9198: LD_EXP 5
9202: IFFALSE 10306
9204: GO 9206
9206: DISABLE
9207: LD_INT 0
9209: PPUSH
9210: PPUSH
// begin InGameOn ;
9211: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9215: LD_EXP 15
9219: PUSH
9220: LD_EXP 23
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PPUSH
9229: LD_EXP 13
9233: PPUSH
9234: CALL_OW 119
// ComExit ( Heike ) ;
9238: LD_EXP 13
9242: PPUSH
9243: CALL 52978 0 1
// if IsOk ( Mike ) then
9247: LD_EXP 15
9251: PPUSH
9252: CALL_OW 302
9256: IFFALSE 9274
// AddComTurnUnit ( Heike , Mike ) else
9258: LD_EXP 13
9262: PPUSH
9263: LD_EXP 15
9267: PPUSH
9268: CALL_OW 179
9272: GO 9288
// AddComTurnUnit ( Heike , Kurt ) ;
9274: LD_EXP 13
9278: PPUSH
9279: LD_EXP 23
9283: PPUSH
9284: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9288: LD_EXP 15
9292: PPUSH
9293: CALL_OW 302
9297: PUSH
9298: LD_EXP 23
9302: PPUSH
9303: CALL_OW 302
9307: AND
9308: IFFALSE 9559
// begin CenterNowOnUnits ( Mike ) ;
9310: LD_EXP 15
9314: PPUSH
9315: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9319: LD_EXP 15
9323: PPUSH
9324: LD_STRING DM-Scout-1
9326: PPUSH
9327: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9331: LD_EXP 13
9335: PPUSH
9336: LD_STRING DH-Scout-2
9338: PPUSH
9339: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9343: LD_EXP 23
9347: PPUSH
9348: LD_STRING DKs-Scout-3
9350: PPUSH
9351: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9355: LD_EXP 13
9359: PPUSH
9360: LD_STRING DH-Scout-4
9362: PPUSH
9363: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9367: LD_EXP 13
9371: PPUSH
9372: LD_STRING DH-Scout-5
9374: PPUSH
9375: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9379: LD_ADDR_VAR 0 2
9383: PUSH
9384: LD_INT 72
9386: PUSH
9387: LD_INT 122
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 89
9396: PUSH
9397: LD_INT 131
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 99
9406: PUSH
9407: LD_INT 139
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 100
9416: PUSH
9417: LD_INT 148
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: ST_TO_ADDR
// for i in tmp do
9430: LD_ADDR_VAR 0 1
9434: PUSH
9435: LD_VAR 0 2
9439: PUSH
9440: FOR_IN
9441: IFFALSE 9499
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9443: LD_VAR 0 1
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: LD_VAR 0 1
9456: PUSH
9457: LD_INT 2
9459: ARRAY
9460: PPUSH
9461: LD_INT 2
9463: PPUSH
9464: LD_INT 6
9466: NEG
9467: PPUSH
9468: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9472: LD_VAR 0 1
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PPUSH
9481: LD_VAR 0 1
9485: PUSH
9486: LD_INT 2
9488: ARRAY
9489: PPUSH
9490: LD_INT 2
9492: PPUSH
9493: CALL_OW 331
// end ;
9497: GO 9440
9499: POP
9500: POP
// CenterOnXY ( 83 , 132 ) ;
9501: LD_INT 83
9503: PPUSH
9504: LD_INT 132
9506: PPUSH
9507: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9511: LD_EXP 23
9515: PPUSH
9516: LD_STRING DKs-Scout-6
9518: PPUSH
9519: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9523: LD_EXP 15
9527: PPUSH
9528: LD_STRING DM-Scout-7
9530: PPUSH
9531: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9535: LD_EXP 15
9539: PPUSH
9540: LD_STRING DM-Scout-8
9542: PPUSH
9543: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9547: LD_EXP 23
9551: PPUSH
9552: LD_STRING DKs-Scout-9
9554: PPUSH
9555: CALL_OW 88
// end ; if IsDead ( Mike ) then
9559: LD_EXP 15
9563: PPUSH
9564: CALL_OW 301
9568: IFFALSE 9735
// begin CenterNowOnUnits ( Kurt ) ;
9570: LD_EXP 23
9574: PPUSH
9575: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9579: LD_EXP 23
9583: PPUSH
9584: LD_STRING DKs-Scout-b-1
9586: PPUSH
9587: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9591: LD_EXP 23
9595: PPUSH
9596: LD_STRING DKs-Scout-b-2
9598: PPUSH
9599: CALL_OW 88
// if IsOk ( Givi ) then
9603: LD_EXP 14
9607: PPUSH
9608: CALL_OW 302
9612: IFFALSE 9687
// begin ComExit ( Givi ) ;
9614: LD_EXP 14
9618: PPUSH
9619: CALL 52978 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9623: LD_EXP 14
9627: PPUSH
9628: LD_EXP 23
9632: PPUSH
9633: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9637: LD_EXP 14
9641: PPUSH
9642: LD_STRING DG-Scout-b-3
9644: PPUSH
9645: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9649: LD_EXP 14
9653: PPUSH
9654: LD_STRING DG-Scout-b-4
9656: PPUSH
9657: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING DG-Scout-b-5
9668: PPUSH
9669: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9673: LD_EXP 13
9677: PPUSH
9678: LD_STRING DH-Scout-b-6
9680: PPUSH
9681: CALL_OW 88
// end else
9685: GO 9699
// Say ( Heike , DH-Scout-a-4 ) ;
9687: LD_EXP 13
9691: PPUSH
9692: LD_STRING DH-Scout-a-4
9694: PPUSH
9695: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9699: LD_EXP 23
9703: PPUSH
9704: LD_STRING DKs-Scout-b-7
9706: PPUSH
9707: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9711: LD_EXP 23
9715: PPUSH
9716: LD_STRING DKs-Scout-b-8
9718: PPUSH
9719: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9723: LD_EXP 23
9727: PPUSH
9728: LD_STRING DKs-Scout-b-9
9730: PPUSH
9731: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9735: LD_EXP 23
9739: PPUSH
9740: CALL_OW 301
9744: IFFALSE 10023
// begin CenterNowOnUnits ( Mike ) ;
9746: LD_EXP 15
9750: PPUSH
9751: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9755: LD_EXP 15
9759: PPUSH
9760: LD_STRING DM-Scout-a-1
9762: PPUSH
9763: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9767: LD_EXP 15
9771: PPUSH
9772: LD_STRING DM-Scout-a-2
9774: PPUSH
9775: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9779: LD_EXP 15
9783: PPUSH
9784: CALL_OW 256
9788: PUSH
9789: LD_INT 1000
9791: LESS
9792: IFFALSE 9808
// Say ( Heike , DH-Scout-a-3 ) else
9794: LD_EXP 13
9798: PPUSH
9799: LD_STRING DH-Scout-a-3
9801: PPUSH
9802: CALL_OW 88
9806: GO 9820
// Say ( Heike , DH-Scout-a-4 ) ;
9808: LD_EXP 13
9812: PPUSH
9813: LD_STRING DH-Scout-a-4
9815: PPUSH
9816: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9820: LD_EXP 15
9824: PPUSH
9825: LD_STRING DM-Scout-a-5
9827: PPUSH
9828: CALL_OW 88
// if IsOk ( Kaia ) then
9832: LD_EXP 18
9836: PPUSH
9837: CALL_OW 302
9841: IFFALSE 10023
// begin ComExit ( Kaia ) ;
9843: LD_EXP 18
9847: PPUSH
9848: CALL 52978 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9852: LD_EXP 18
9856: PPUSH
9857: LD_EXP 15
9861: PPUSH
9862: CALL_OW 172
// wait ( 0 0$2 ) ;
9866: LD_INT 70
9868: PPUSH
9869: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9873: LD_EXP 18
9877: PPUSH
9878: LD_EXP 15
9882: PPUSH
9883: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9887: LD_EXP 15
9891: PPUSH
9892: LD_EXP 18
9896: PPUSH
9897: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9901: LD_EXP 18
9905: PPUSH
9906: LD_STRING DK-Scout-a-6
9908: PPUSH
9909: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9913: LD_EXP 15
9917: PPUSH
9918: LD_STRING DM-Scout-a-7
9920: PPUSH
9921: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9925: LD_EXP 18
9929: PPUSH
9930: LD_STRING DK-Scout-a-8
9932: PPUSH
9933: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9937: LD_EXP 18
9941: PPUSH
9942: LD_STRING DK-Scout-a-9
9944: PPUSH
9945: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9949: LD_EXP 13
9953: PPUSH
9954: LD_STRING DH-Scout-a-10
9956: PPUSH
9957: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9961: LD_EXP 15
9965: PPUSH
9966: LD_EXP 13
9970: PPUSH
9971: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9975: LD_EXP 15
9979: PPUSH
9980: LD_STRING DM-Scout-a-11
9982: PPUSH
9983: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9987: LD_EXP 15
9991: PPUSH
9992: LD_STRING DM-Scout-a-12
9994: PPUSH
9995: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9999: LD_EXP 15
10003: PPUSH
10004: LD_STRING DM-Scout-a-13
10006: PPUSH
10007: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
10011: LD_EXP 15
10015: PPUSH
10016: LD_STRING DM-Scout-a-14
10018: PPUSH
10019: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
10023: LD_EXP 14
10027: PPUSH
10028: CALL_OW 302
10032: IFFALSE 10060
// begin Say ( Givi , DG-Scout-10 ) ;
10034: LD_EXP 14
10038: PPUSH
10039: LD_STRING DG-Scout-10
10041: PPUSH
10042: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
10046: LD_EXP 14
10050: PPUSH
10051: LD_STRING DG-Scout-11
10053: PPUSH
10054: CALL_OW 88
// end else
10058: GO 10117
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10060: LD_EXP 25
10064: PPUSH
10065: LD_INT 26
10067: PUSH
10068: LD_INT 1
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 72
10079: PPUSH
10080: LD_STRING DArm-Scout-10
10082: PPUSH
10083: CALL 187 0 2
10087: NOT
10088: IFFALSE 10117
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10090: LD_EXP 25
10094: PPUSH
10095: LD_INT 26
10097: PUSH
10098: LD_INT 2
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PPUSH
10105: CALL_OW 72
10109: PPUSH
10110: LD_STRING DArf-Scout-10
10112: PPUSH
10113: CALL 187 0 2
// Say ( Heike , DH-Scout-12 ) ;
10117: LD_EXP 13
10121: PPUSH
10122: LD_STRING DH-Scout-12
10124: PPUSH
10125: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10129: LD_EXP 13
10133: PPUSH
10134: LD_STRING DH-Scout-13
10136: PPUSH
10137: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10141: LD_EXP 15
10145: PPUSH
10146: CALL_OW 302
10150: PUSH
10151: LD_EXP 23
10155: PPUSH
10156: CALL_OW 302
10160: AND
10161: IFFALSE 10189
// begin Say ( Mike , DM-Scout-14 ) ;
10163: LD_EXP 15
10167: PPUSH
10168: LD_STRING DM-Scout-14
10170: PPUSH
10171: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10175: LD_EXP 13
10179: PPUSH
10180: LD_STRING DH-Scout-c-14
10182: PPUSH
10183: CALL_OW 88
// end else
10187: GO 10282
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10189: LD_EXP 15
10193: PPUSH
10194: CALL_OW 302
10198: PUSH
10199: LD_EXP 23
10203: PPUSH
10204: CALL_OW 302
10208: XOR
10209: IFFALSE 10270
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10211: LD_EXP 25
10215: PPUSH
10216: LD_INT 26
10218: PUSH
10219: LD_INT 1
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PPUSH
10226: CALL_OW 72
10230: PPUSH
10231: LD_STRING DArm-Scout-a-14
10233: PPUSH
10234: CALL 187 0 2
10238: NOT
10239: IFFALSE 10268
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10241: LD_EXP 25
10245: PPUSH
10246: LD_INT 26
10248: PUSH
10249: LD_INT 2
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PPUSH
10256: CALL_OW 72
10260: PPUSH
10261: LD_STRING DArf-Scout-a-14
10263: PPUSH
10264: CALL 187 0 2
// end else
10268: GO 10282
// Say ( Heike , DH-Scout-d-14 ) ;
10270: LD_EXP 13
10274: PPUSH
10275: LD_STRING DH-Scout-d-14
10277: PPUSH
10278: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10282: LD_EXP 13
10286: PPUSH
10287: LD_STRING DH-Scout-15
10289: PPUSH
10290: CALL_OW 88
// InGameOff ;
10294: CALL_OW 9
// usAttacksAllowed := true ;
10298: LD_ADDR_EXP 6
10302: PUSH
10303: LD_INT 1
10305: ST_TO_ADDR
// end ;
10306: PPOPN 2
10308: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10309: LD_EXP 4
10313: IFFALSE 10490
10315: GO 10317
10317: DISABLE
10318: LD_INT 0
10320: PPUSH
// begin spoken := true ;
10321: LD_ADDR_VAR 0 1
10325: PUSH
10326: LD_INT 1
10328: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10329: LD_INT 1050
10331: PPUSH
10332: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10336: LD_EXP 13
10340: PPUSH
10341: LD_STRING DH-Scout-c-1
10343: PPUSH
10344: CALL_OW 88
// if not IsOk ( Givi ) then
10348: LD_EXP 14
10352: PPUSH
10353: CALL_OW 302
10357: NOT
10358: IFFALSE 10362
// exit ;
10360: GO 10490
// if IsOk ( Givi ) then
10362: LD_EXP 14
10366: PPUSH
10367: CALL_OW 302
10371: IFFALSE 10399
// begin Say ( Givi , DG-Scout-c-2 ) ;
10373: LD_EXP 14
10377: PPUSH
10378: LD_STRING DG-Scout-c-2
10380: PPUSH
10381: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10385: LD_EXP 14
10389: PPUSH
10390: LD_STRING DG-Scout-c-3
10392: PPUSH
10393: CALL_OW 88
// end else
10397: GO 10472
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10399: LD_ADDR_VAR 0 1
10403: PUSH
10404: LD_EXP 25
10408: PPUSH
10409: LD_INT 26
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PPUSH
10419: CALL_OW 72
10423: PPUSH
10424: LD_STRING DArm-Scout-c-3
10426: PPUSH
10427: CALL 187 0 2
10431: ST_TO_ADDR
// if not spoken then
10432: LD_VAR 0 1
10436: NOT
10437: IFFALSE 10472
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_EXP 25
10448: PPUSH
10449: LD_INT 26
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 72
10463: PPUSH
10464: LD_STRING DArf-Scout-c-3
10466: PPUSH
10467: CALL 187 0 2
10471: ST_TO_ADDR
// ; end ; if spoken then
10472: LD_VAR 0 1
10476: IFFALSE 10490
// Say ( Heike , DH-Scout-c-4 ) ;
10478: LD_EXP 13
10482: PPUSH
10483: LD_STRING DH-Scout-c-4
10485: PPUSH
10486: CALL_OW 88
// end ;
10490: PPOPN 1
10492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10493: LD_INT 22
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 30
10505: PUSH
10506: LD_INT 7
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 69
10521: PUSH
10522: LD_EXP 24
10526: PPUSH
10527: CALL_OW 302
10531: AND
10532: IFFALSE 10617
10534: GO 10536
10536: DISABLE
// begin DialogueOn ;
10537: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10541: LD_EXP 24
10545: PPUSH
10546: LD_STRING DA-Lab-1
10548: PPUSH
10549: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10553: LD_EXP 13
10557: PPUSH
10558: LD_STRING DH-Lab-2
10560: PPUSH
10561: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10565: LD_EXP 24
10569: PPUSH
10570: LD_STRING DA-Lab-3
10572: PPUSH
10573: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10577: LD_EXP 24
10581: PPUSH
10582: LD_STRING DA-Lab-4
10584: PPUSH
10585: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10589: LD_EXP 24
10593: PPUSH
10594: LD_STRING DA-Lab-5
10596: PPUSH
10597: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10601: LD_EXP 13
10605: PPUSH
10606: LD_STRING DH-Lab-6
10608: PPUSH
10609: CALL_OW 88
// DialogueOff ;
10613: CALL_OW 7
// end ;
10617: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10618: LD_INT 7
10620: PPUSH
10621: LD_INT 2
10623: PPUSH
10624: CALL_OW 321
10628: PUSH
10629: LD_INT 2
10631: EQUAL
10632: PUSH
10633: LD_EXP 14
10637: PPUSH
10638: CALL_OW 302
10642: AND
10643: IFFALSE 10812
10645: GO 10647
10647: DISABLE
// begin DialogueOn ;
10648: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10652: LD_EXP 14
10656: PPUSH
10657: LD_STRING DG-Opt-1
10659: PPUSH
10660: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10664: LD_EXP 13
10668: PPUSH
10669: LD_STRING DH-Opt-2
10671: PPUSH
10672: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10676: LD_EXP 14
10680: PPUSH
10681: LD_STRING DG-Opt-3
10683: PPUSH
10684: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10688: LD_EXP 14
10692: PPUSH
10693: LD_STRING DG-Opt-4
10695: PPUSH
10696: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10700: LD_EXP 13
10704: PPUSH
10705: LD_STRING DH-Opt-5
10707: PPUSH
10708: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10712: LD_EXP 14
10716: PPUSH
10717: LD_STRING DG-Opt-6
10719: PPUSH
10720: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10724: LD_EXP 13
10728: PPUSH
10729: LD_STRING DH-Opt-7
10731: PPUSH
10732: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10736: LD_EXP 14
10740: PPUSH
10741: LD_STRING DG-Opt-8
10743: PPUSH
10744: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10748: LD_EXP 14
10752: PPUSH
10753: LD_STRING DG-Opt-9
10755: PPUSH
10756: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10760: LD_EXP 13
10764: PPUSH
10765: LD_STRING DH-Opt-10
10767: PPUSH
10768: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10772: LD_EXP 14
10776: PPUSH
10777: LD_STRING DG-Opt-11
10779: PPUSH
10780: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10784: LD_EXP 14
10788: PPUSH
10789: LD_STRING DG-Opt-12
10791: PPUSH
10792: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10796: LD_EXP 13
10800: PPUSH
10801: LD_STRING DH-Opt-13
10803: PPUSH
10804: CALL_OW 88
// DialogueOff ;
10808: CALL_OW 7
// end ;
10812: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10813: LD_INT 40
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 321
10823: PUSH
10824: LD_INT 2
10826: EQUAL
10827: PUSH
10828: LD_EXP 16
10832: PPUSH
10833: CALL_OW 302
10837: AND
10838: IFFALSE 11088
10840: GO 10842
10842: DISABLE
// begin DialogueOn ;
10843: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10847: LD_EXP 16
10851: PPUSH
10852: LD_STRING DI-Roc-1
10854: PPUSH
10855: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10859: LD_EXP 13
10863: PPUSH
10864: LD_STRING DH-Roc-2
10866: PPUSH
10867: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10871: LD_EXP 16
10875: PPUSH
10876: LD_STRING DI-Roc-3
10878: PPUSH
10879: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10883: LD_EXP 16
10887: PPUSH
10888: LD_STRING DI-Roc-4
10890: PPUSH
10891: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10895: LD_EXP 18
10899: PPUSH
10900: LD_STRING DK-Roc-5
10902: PPUSH
10903: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10907: LD_EXP 18
10911: PPUSH
10912: LD_STRING DK-Roc-6
10914: PPUSH
10915: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10919: LD_EXP 14
10923: PPUSH
10924: LD_STRING DG-Roc-7
10926: PPUSH
10927: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10931: LD_EXP 14
10935: PPUSH
10936: LD_STRING DG-Roc-8
10938: PPUSH
10939: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10943: LD_EXP 20
10947: PPUSH
10948: CALL_OW 302
10952: PUSH
10953: LD_EXP 18
10957: PPUSH
10958: CALL_OW 302
10962: AND
10963: PUSH
10964: LD_EXP 14
10968: PPUSH
10969: CALL_OW 302
10973: AND
10974: IFFALSE 11084
// begin Say ( Markov , DMar-Roc-9 ) ;
10976: LD_EXP 20
10980: PPUSH
10981: LD_STRING DMar-Roc-9
10983: PPUSH
10984: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10988: LD_EXP 20
10992: PPUSH
10993: LD_STRING DMar-Roc-10
10995: PPUSH
10996: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11000: LD_EXP 18
11004: PPUSH
11005: LD_STRING DK-Roc-11
11007: PPUSH
11008: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11012: LD_EXP 20
11016: PPUSH
11017: LD_STRING DMar-Roc-12
11019: PPUSH
11020: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11024: LD_EXP 18
11028: PPUSH
11029: LD_STRING DK-Roc-13
11031: PPUSH
11032: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11036: LD_EXP 14
11040: PPUSH
11041: LD_STRING DG-Roc-14
11043: PPUSH
11044: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11048: LD_EXP 20
11052: PPUSH
11053: LD_STRING DMar-Roc-15
11055: PPUSH
11056: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11060: LD_EXP 20
11064: PPUSH
11065: LD_STRING DMar-Roc-16
11067: PPUSH
11068: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11072: LD_EXP 18
11076: PPUSH
11077: LD_STRING DK-Roc-17
11079: PPUSH
11080: CALL_OW 88
// end ; DialogueOff ;
11084: CALL_OW 7
// end ;
11088: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11089: LD_EXP 28
11093: PPUSH
11094: CALL_OW 256
11098: PUSH
11099: LD_INT 1000
11101: LESS
11102: PUSH
11103: LD_INT 22
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 21
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 23
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 69
11142: PUSH
11143: LD_INT 6
11145: LESS
11146: OR
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 21
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 25
11170: PUSH
11171: LD_INT 1
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 69
11187: PUSH
11188: LD_INT 2
11190: LESS
11191: OR
11192: IFFALSE 12401
11194: GO 11196
11196: DISABLE
11197: LD_INT 0
11199: PPUSH
11200: PPUSH
11201: PPUSH
// begin usAttacksAllowed := false ;
11202: LD_ADDR_EXP 6
11206: PUSH
11207: LD_INT 0
11209: ST_TO_ADDR
// usSurrender := true ;
11210: LD_ADDR_EXP 7
11214: PUSH
11215: LD_INT 1
11217: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11218: LD_INT 1
11220: PPUSH
11221: LD_INT 2
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_INT 2
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 1
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 60
11261: PUSH
11262: EMPTY
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11289
// ComStop ( i ) ;
11278: LD_VAR 0 1
11282: PPUSH
11283: CALL_OW 141
11287: GO 11275
11289: POP
11290: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: LD_INT 50
11311: PUSH
11312: EMPTY
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 21
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: PUSH
11339: FOR_IN
11340: IFFALSE 11356
// SetLives ( i , 251 ) ;
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_INT 251
11349: PPUSH
11350: CALL_OW 234
11354: GO 11339
11356: POP
11357: POP
// InGameOn ;
11358: CALL_OW 8
// ComExit ( usCommander ) ;
11362: LD_EXP 28
11366: PPUSH
11367: CALL 52978 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11371: LD_EXP 28
11375: PPUSH
11376: LD_INT 81
11378: PPUSH
11379: LD_INT 143
11381: PPUSH
11382: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11386: LD_EXP 28
11390: PPUSH
11391: LD_INT 81
11393: PPUSH
11394: LD_INT 139
11396: PPUSH
11397: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11401: LD_INT 81
11403: PPUSH
11404: LD_INT 144
11406: PPUSH
11407: LD_INT 2
11409: PPUSH
11410: LD_INT 10
11412: NEG
11413: PPUSH
11414: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11418: LD_EXP 28
11422: PPUSH
11423: CALL_OW 87
// wait ( 0 0$2 ) ;
11427: LD_INT 70
11429: PPUSH
11430: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11434: LD_EXP 28
11438: PPUSH
11439: LD_STRING DCa-Surrender-1
11441: PPUSH
11442: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11446: LD_EXP 13
11450: PPUSH
11451: LD_STRING DH-Surrender-2
11453: PPUSH
11454: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11458: LD_EXP 13
11462: PPUSH
11463: CALL_OW 310
11467: PPUSH
11468: CALL_OW 247
11472: PUSH
11473: LD_INT 3
11475: EQUAL
11476: IFFALSE 11494
// begin ComExit ( Heike ) ;
11478: LD_EXP 13
11482: PPUSH
11483: CALL 52978 0 1
// wait ( 3 ) ;
11487: LD_INT 3
11489: PPUSH
11490: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11494: LD_EXP 13
11498: PPUSH
11499: LD_INT 82
11501: PPUSH
11502: LD_INT 133
11504: PPUSH
11505: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11509: LD_EXP 13
11513: PPUSH
11514: LD_EXP 28
11518: PPUSH
11519: CALL_OW 179
// wait ( 0 0$3 ) ;
11523: LD_INT 105
11525: PPUSH
11526: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11530: LD_EXP 13
11534: PPUSH
11535: LD_STRING DH-Surrender-3
11537: PPUSH
11538: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11542: LD_EXP 13
11546: PPUSH
11547: LD_STRING DH-Surrender-4
11549: PPUSH
11550: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11554: LD_INT 81
11556: PPUSH
11557: LD_INT 144
11559: PPUSH
11560: LD_INT 2
11562: PPUSH
11563: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11567: LD_INT 1
11569: PPUSH
11570: LD_INT 2
11572: PPUSH
11573: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11577: LD_ADDR_VAR 0 1
11581: PUSH
11582: LD_INT 22
11584: PUSH
11585: LD_INT 1
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 23
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 54
11604: PUSH
11605: EMPTY
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: PUSH
11618: FOR_IN
11619: IFFALSE 11632
// ComExit ( i ) ;
11621: LD_VAR 0 1
11625: PPUSH
11626: CALL 52978 0 1
11630: GO 11618
11632: POP
11633: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11634: LD_ADDR_VAR 0 3
11638: PUSH
11639: LD_INT 22
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 25
11651: PUSH
11652: LD_INT 4
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PPUSH
11663: CALL_OW 69
11667: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11668: LD_ADDR_VAR 0 2
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 3
11685: PUSH
11686: LD_INT 50
11688: PUSH
11689: EMPTY
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 69
11704: ST_TO_ADDR
// if sci and hurts then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_VAR 0 2
11714: AND
11715: IFFALSE 11777
// begin for i := 1 to hurts do
11717: LD_ADDR_VAR 0 1
11721: PUSH
11722: DOUBLE
11723: LD_INT 1
11725: DEC
11726: ST_TO_ADDR
11727: LD_VAR 0 2
11731: PUSH
11732: FOR_TO
11733: IFFALSE 11775
// if i <= sci then
11735: LD_VAR 0 1
11739: PUSH
11740: LD_VAR 0 3
11744: LESSEQUAL
11745: IFFALSE 11773
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11747: LD_VAR 0 3
11751: PUSH
11752: LD_VAR 0 1
11756: ARRAY
11757: PPUSH
11758: LD_VAR 0 2
11762: PUSH
11763: LD_VAR 0 1
11767: ARRAY
11768: PPUSH
11769: CALL_OW 188
11773: GO 11732
11775: POP
11776: POP
// end ; if IsOk ( Givi ) then
11777: LD_EXP 14
11781: PPUSH
11782: CALL_OW 302
11786: IFFALSE 11802
// Say ( Givi , DG-Surrender-5 ) else
11788: LD_EXP 14
11792: PPUSH
11793: LD_STRING DG-Surrender-5
11795: PPUSH
11796: CALL_OW 88
11800: GO 11814
// Say ( Heike , DH-Surrender-a-5 ) ;
11802: LD_EXP 13
11806: PPUSH
11807: LD_STRING DH-Surrender-a-5
11809: PPUSH
11810: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11814: LD_EXP 28
11818: PPUSH
11819: LD_STRING DCa-Surrender-6
11821: PPUSH
11822: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11826: LD_EXP 28
11830: PPUSH
11831: LD_STRING DCa-Surrender-7
11833: PPUSH
11834: CALL_OW 88
// if IsOk ( Givi ) then
11838: LD_EXP 14
11842: PPUSH
11843: CALL_OW 302
11847: IFFALSE 11863
// Say ( Givi , DG-Surrender-8 ) else
11849: LD_EXP 14
11853: PPUSH
11854: LD_STRING DG-Surrender-8
11856: PPUSH
11857: CALL_OW 88
11861: GO 11875
// Say ( Heike , DH-Surrender-a-8 ) ;
11863: LD_EXP 13
11867: PPUSH
11868: LD_STRING DH-Surrender-a-8
11870: PPUSH
11871: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11875: LD_EXP 28
11879: PPUSH
11880: LD_STRING DCa-Surrender-9
11882: PPUSH
11883: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11887: LD_EXP 13
11891: PPUSH
11892: LD_STRING DH-Surrender-10
11894: PPUSH
11895: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11899: LD_EXP 28
11903: PPUSH
11904: LD_STRING DCa-Surrender-11
11906: PPUSH
11907: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11911: LD_EXP 13
11915: PPUSH
11916: LD_STRING DH-Surrender-12
11918: PPUSH
11919: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11923: LD_EXP 28
11927: PPUSH
11928: LD_STRING DCa-Surrender-13
11930: PPUSH
11931: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11935: LD_EXP 28
11939: PPUSH
11940: LD_STRING DCa-Surrender-14
11942: PPUSH
11943: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11947: LD_EXP 28
11951: PPUSH
11952: LD_STRING DCa-Surrender-15
11954: PPUSH
11955: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11959: LD_EXP 28
11963: PPUSH
11964: LD_STRING DCa-Surrender-16
11966: PPUSH
11967: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11971: LD_EXP 18
11975: PPUSH
11976: LD_STRING DK-Surrender-17
11978: PPUSH
11979: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11983: LD_EXP 22
11987: PPUSH
11988: LD_STRING DO-Surrender-18
11990: PPUSH
11991: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11995: LD_EXP 22
11999: PPUSH
12000: LD_STRING DO-Surrender-19
12002: PPUSH
12003: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12007: LD_EXP 23
12011: PPUSH
12012: LD_STRING DKs-Surrender-20
12014: PPUSH
12015: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12019: LD_EXP 23
12023: PPUSH
12024: LD_STRING DKs-Surrender-21
12026: PPUSH
12027: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12031: LD_EXP 20
12035: PPUSH
12036: LD_STRING DMar-Surrender-22
12038: PPUSH
12039: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12043: LD_EXP 20
12047: PPUSH
12048: LD_STRING DMar-Surrender-23
12050: PPUSH
12051: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12055: LD_EXP 19
12059: PPUSH
12060: LD_STRING DS-Surrender-24
12062: PPUSH
12063: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12067: LD_EXP 24
12071: PPUSH
12072: LD_STRING DA-Surrender-25
12074: PPUSH
12075: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12079: LD_EXP 16
12083: PPUSH
12084: LD_STRING DI-Surrender-26
12086: PPUSH
12087: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12091: LD_EXP 17
12095: PPUSH
12096: LD_STRING DKam-Surrender-27
12098: PPUSH
12099: CALL_OW 88
// if IsOk ( Givi ) then
12103: LD_EXP 14
12107: PPUSH
12108: CALL_OW 302
12112: IFFALSE 12152
// begin Say ( Givi , DG-Surrender-28 ) ;
12114: LD_EXP 14
12118: PPUSH
12119: LD_STRING DG-Surrender-28
12121: PPUSH
12122: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12126: LD_EXP 14
12130: PPUSH
12131: LD_STRING DG-Surrender-29
12133: PPUSH
12134: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12138: LD_EXP 14
12142: PPUSH
12143: LD_STRING DG-Surrender-30
12145: PPUSH
12146: CALL_OW 88
// end else
12150: GO 12188
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12152: LD_EXP 13
12156: PPUSH
12157: LD_STRING DH-Surrender-a-28
12159: PPUSH
12160: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12164: LD_EXP 13
12168: PPUSH
12169: LD_STRING DH-Surrender-a-29
12171: PPUSH
12172: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12176: LD_EXP 13
12180: PPUSH
12181: LD_STRING DH-Surrender-a-30
12183: PPUSH
12184: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12188: CALL 14030 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12192: LD_INT 22
12194: PUSH
12195: LD_INT 3
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 69
12206: PPUSH
12207: LD_INT 176
12209: PUSH
12210: LD_INT 123
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: PPUSH
12220: CALL 55184 0 2
// if not IsEnvironment ( 190 , 150 ) then
12224: LD_INT 190
12226: PPUSH
12227: LD_INT 150
12229: PPUSH
12230: CALL_OW 351
12234: NOT
12235: IFFALSE 12254
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12237: LD_INT 190
12239: PPUSH
12240: LD_INT 150
12242: PPUSH
12243: LD_INT 2
12245: PPUSH
12246: LD_INT 8
12248: NEG
12249: PPUSH
12250: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12254: LD_INT 193
12256: PPUSH
12257: LD_INT 150
12259: PPUSH
12260: CALL_OW 84
// if IsOk ( Markov ) then
12264: LD_EXP 20
12268: PPUSH
12269: CALL_OW 302
12273: IFFALSE 12289
// Say ( Markov , DMar-Surrender-31 ) else
12275: LD_EXP 20
12279: PPUSH
12280: LD_STRING DMar-Surrender-31
12282: PPUSH
12283: CALL_OW 88
12287: GO 12346
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12289: LD_EXP 25
12293: PPUSH
12294: LD_INT 26
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PPUSH
12304: CALL_OW 72
12308: PPUSH
12309: LD_STRING DArm-Surrender-a-31
12311: PPUSH
12312: CALL 187 0 2
12316: NOT
12317: IFFALSE 12346
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12319: LD_EXP 25
12323: PPUSH
12324: LD_INT 26
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 72
12338: PPUSH
12339: LD_STRING DArf-Surrender-a-31
12341: PPUSH
12342: CALL 187 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12346: LD_EXP 13
12350: PPUSH
12351: LD_STRING DH-Surrender-32
12353: PPUSH
12354: CALL_OW 88
// InGameOff ;
12358: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12362: LD_STRING M2
12364: PPUSH
12365: CALL_OW 337
// wait ( 0 0$20 ) ;
12369: LD_INT 700
12371: PPUSH
12372: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12376: CALL 14392 0 0
// russianAttack := true ;
12380: LD_ADDR_EXP 8
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12388: LD_INT 190
12390: PPUSH
12391: LD_INT 150
12393: PPUSH
12394: LD_INT 2
12396: PPUSH
12397: CALL_OW 331
// end ;
12401: PPOPN 3
12403: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12404: LD_EXP 11
12408: PUSH
12409: LD_INT 2
12411: PPUSH
12412: CALL_OW 463
12416: NOT
12417: AND
12418: PUSH
12419: LD_EXP 13
12423: PPUSH
12424: CALL_OW 302
12428: AND
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_INT 2
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 3
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: AND
12459: PUSH
12460: LD_EXP 20
12464: PPUSH
12465: CALL_OW 302
12469: PUSH
12470: LD_EXP 25
12474: PPUSH
12475: LD_INT 50
12477: PUSH
12478: EMPTY
12479: LIST
12480: PPUSH
12481: CALL_OW 72
12485: OR
12486: AND
12487: IFFALSE 12715
12489: GO 12491
12491: DISABLE
// begin DialogueOn ;
12492: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12496: LD_EXP 13
12500: PPUSH
12501: LD_STRING DH-Heavy-1
12503: PPUSH
12504: CALL_OW 88
// if IsOk ( Markov ) then
12508: LD_EXP 20
12512: PPUSH
12513: CALL_OW 302
12517: IFFALSE 12642
// begin Say ( Markov , DMar-Heavy-2 ) ;
12519: LD_EXP 20
12523: PPUSH
12524: LD_STRING DMar-Heavy-2
12526: PPUSH
12527: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12531: LD_INT 22
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 30
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: PUSH
12560: LD_INT 1
12562: ARRAY
12563: PPUSH
12564: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12568: LD_EXP 20
12572: PPUSH
12573: LD_STRING DMar-Heavy-3
12575: PPUSH
12576: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12580: LD_EXP 20
12584: PPUSH
12585: LD_STRING DMar-Heavy-4
12587: PPUSH
12588: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12592: LD_EXP 20
12596: PPUSH
12597: LD_STRING DMar-Heavy-5
12599: PPUSH
12600: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12604: LD_EXP 20
12608: PPUSH
12609: LD_STRING DMar-Heavy-6
12611: PPUSH
12612: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12616: LD_EXP 13
12620: PPUSH
12621: LD_STRING DH-Heavy-7
12623: PPUSH
12624: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12628: LD_EXP 13
12632: PPUSH
12633: LD_STRING DH-Heavy-8
12635: PPUSH
12636: CALL_OW 88
// end else
12640: GO 12699
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12642: LD_EXP 25
12646: PPUSH
12647: LD_INT 26
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 72
12661: PPUSH
12662: LD_STRING DArm-Heavy-a-2
12664: PPUSH
12665: CALL 187 0 2
12669: NOT
12670: IFFALSE 12699
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12672: LD_EXP 25
12676: PPUSH
12677: LD_INT 26
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 72
12691: PPUSH
12692: LD_STRING DArf-Heavy-a-2
12694: PPUSH
12695: CALL 187 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12699: LD_EXP 13
12703: PPUSH
12704: LD_STRING DH-Heavy-9
12706: PPUSH
12707: CALL_OW 88
// DialogueOff ;
12711: CALL_OW 7
// end ;
12715: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12716: LD_EXP 32
12720: PPUSH
12721: LD_INT 101
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 72
12735: PUSH
12736: LD_EXP 13
12740: PPUSH
12741: CALL_OW 302
12745: AND
12746: IFFALSE 12889
12748: GO 12750
12750: DISABLE
// begin DialogueOn ;
12751: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12755: LD_EXP 32
12759: PPUSH
12760: LD_INT 101
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PPUSH
12770: CALL_OW 72
12774: PPUSH
12775: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12779: LD_EXP 13
12783: PPUSH
12784: LD_STRING DH-Flank-1
12786: PPUSH
12787: CALL_OW 88
// if IsOk ( Mike ) then
12791: LD_EXP 15
12795: PPUSH
12796: CALL_OW 302
12800: IFFALSE 12816
// Say ( Mike , DM-Flank-2 ) else
12802: LD_EXP 15
12806: PPUSH
12807: LD_STRING DM-Flank-2
12809: PPUSH
12810: CALL_OW 88
12814: GO 12873
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12816: LD_EXP 25
12820: PPUSH
12821: LD_INT 26
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 72
12835: PPUSH
12836: LD_STRING DArm-Flank-a-2
12838: PPUSH
12839: CALL 187 0 2
12843: NOT
12844: IFFALSE 12873
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12846: LD_EXP 25
12850: PPUSH
12851: LD_INT 26
12853: PUSH
12854: LD_INT 2
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 72
12865: PPUSH
12866: LD_STRING DArm-Flank-a-2
12868: PPUSH
12869: CALL 187 0 2
// Say ( Heike , DH-Flank-3 ) ;
12873: LD_EXP 13
12877: PPUSH
12878: LD_STRING DH-Flank-3
12880: PPUSH
12881: CALL_OW 88
// DialogueOff ;
12885: CALL_OW 7
// end ;
12889: END
// every 0 0$3 trigger seeRemoteVehicle do
12890: LD_EXP 10
12894: IFFALSE 13118
12896: GO 12898
12898: DISABLE
// begin DialogueOn ;
12899: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12903: LD_EXP 13
12907: PPUSH
12908: LD_STRING DH-USRC-1
12910: PPUSH
12911: CALL_OW 88
// if IsOk ( Markov ) then
12915: LD_EXP 20
12919: PPUSH
12920: CALL_OW 302
12924: IFFALSE 12940
// Say ( Markov , DMar-USRC-2 ) else
12926: LD_EXP 20
12930: PPUSH
12931: LD_STRING DMar-USRC-2
12933: PPUSH
12934: CALL_OW 88
12938: GO 12997
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12940: LD_EXP 25
12944: PPUSH
12945: LD_INT 26
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PPUSH
12955: CALL_OW 72
12959: PPUSH
12960: LD_STRING DArm-USRC-a-2
12962: PPUSH
12963: CALL 187 0 2
12967: NOT
12968: IFFALSE 12997
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12970: LD_EXP 25
12974: PPUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 72
12989: PPUSH
12990: LD_STRING DArf-USRC-a-2
12992: PPUSH
12993: CALL 187 0 2
// DialogueOff ;
12997: CALL_OW 7
// wait ( 0 0$10 ) ;
13001: LD_INT 350
13003: PPUSH
13004: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13008: LD_EXP 13
13012: PPUSH
13013: LD_STRING DH-USRC-3
13015: PPUSH
13016: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13020: LD_INT 35
13022: PPUSH
13023: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13027: LD_INT 2
13029: PPUSH
13030: LD_INT 22
13032: PUSH
13033: LD_INT 1
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 30
13042: PUSH
13043: LD_INT 36
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PPUSH
13054: CALL_OW 69
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: CALL_OW 292
13067: IFFALSE 13020
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13069: LD_INT 22
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 30
13081: PUSH
13082: LD_INT 36
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: PUSH
13098: LD_INT 1
13100: ARRAY
13101: PPUSH
13102: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13106: LD_EXP 13
13110: PPUSH
13111: LD_STRING DH-USRCFound-1
13113: PPUSH
13114: CALL_OW 88
// end ;
13118: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13119: LD_EXP 18
13123: PPUSH
13124: CALL_OW 256
13128: PUSH
13129: LD_INT 3
13131: LESS
13132: IFFALSE 13169
13134: GO 13136
13136: DISABLE
// begin DialogueOn ;
13137: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13141: LD_EXP 18
13145: PPUSH
13146: LD_STRING DK-Dead-1
13148: PPUSH
13149: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13153: LD_EXP 18
13157: PPUSH
13158: LD_STRING DK-Dead-2
13160: PPUSH
13161: CALL_OW 91
// DialogueOff ;
13165: CALL_OW 7
// end ;
13169: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13170: LD_INT 22
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: LD_INT 35
13185: PUSH
13186: LD_INT 28
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 34
13195: PUSH
13196: LD_INT 28
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: IFFALSE 13229
13218: GO 13220
13220: DISABLE
// hasRockets := true ;
13221: LD_ADDR_EXP 9
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
13229: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13230: LD_EXP 8
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 3
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: NOT
13250: AND
13251: IFFALSE 13861
13253: GO 13255
13255: DISABLE
// begin DialogueOn ;
13256: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13260: LD_EXP 13
13264: PPUSH
13265: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13269: LD_EXP 13
13273: PPUSH
13274: LD_STRING DH-End-1
13276: PPUSH
13277: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13281: LD_EXP 21
13285: PPUSH
13286: LD_STRING DShar-End-2
13288: PPUSH
13289: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13293: LD_EXP 18
13297: PPUSH
13298: LD_STRING DK-End-3
13300: PPUSH
13301: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13305: LD_EXP 13
13309: PPUSH
13310: LD_STRING DH-End-4
13312: PPUSH
13313: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13317: LD_EXP 21
13321: PPUSH
13322: LD_STRING DShar-End-5
13324: PPUSH
13325: CALL_OW 94
// if IsOk ( Markov ) then
13329: LD_EXP 20
13333: PPUSH
13334: CALL_OW 302
13338: IFFALSE 13352
// Say ( Kaia , DK-End-6 ) ;
13340: LD_EXP 18
13344: PPUSH
13345: LD_STRING DK-End-6
13347: PPUSH
13348: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13352: LD_EXP 18
13356: PPUSH
13357: LD_STRING DK-End-7
13359: PPUSH
13360: CALL_OW 88
// if IsOk ( Kaia ) then
13364: LD_EXP 18
13368: PPUSH
13369: CALL_OW 302
13373: IFFALSE 13411
// begin Say ( Givi , DG-End-8 ) ;
13375: LD_EXP 14
13379: PPUSH
13380: LD_STRING DG-End-8
13382: PPUSH
13383: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13387: LD_EXP 14
13391: PPUSH
13392: LD_STRING DG-End-9
13394: PPUSH
13395: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13399: LD_EXP 13
13403: PPUSH
13404: LD_STRING DH-End-10
13406: PPUSH
13407: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13411: LD_EXP 13
13415: PPUSH
13416: LD_STRING DH-End-11
13418: PPUSH
13419: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13423: LD_INT 7
13425: PPUSH
13426: LD_INT 2
13428: PPUSH
13429: CALL_OW 321
13433: PUSH
13434: LD_INT 2
13436: EQUAL
13437: IFFALSE 13451
// AddMedal ( med1 , 1 ) else
13439: LD_STRING med1
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 101
13449: GO 13462
// AddMedal ( med1 , - 1 ) ;
13451: LD_STRING med1
13453: PPUSH
13454: LD_INT 1
13456: NEG
13457: PPUSH
13458: CALL_OW 101
// if hasRockets then
13462: LD_EXP 9
13466: IFFALSE 13480
// AddMedal ( med2 , 1 ) else
13468: LD_STRING med2
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 101
13478: GO 13491
// AddMedal ( med2 , - 1 ) ;
13480: LD_STRING med2
13482: PPUSH
13483: LD_INT 1
13485: NEG
13486: PPUSH
13487: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13491: LD_OWVAR 1
13495: PUSH
13496: LD_INT 105000
13498: PUSH
13499: LD_INT 94500
13501: PUSH
13502: LD_INT 84000
13504: PUSH
13505: LD_INT 73500
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PUSH
13514: LD_OWVAR 67
13518: ARRAY
13519: LESS
13520: IFFALSE 13534
// AddMedal ( med3 , 1 ) else
13522: LD_STRING med3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 101
13532: GO 13545
// AddMedal ( med3 , - 1 ) ;
13534: LD_STRING med3
13536: PPUSH
13537: LD_INT 1
13539: NEG
13540: PPUSH
13541: CALL_OW 101
// GiveMedals ( MAIN ) ;
13545: LD_STRING MAIN
13547: PPUSH
13548: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13552: LD_INT 22
13554: PUSH
13555: LD_INT 2
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 23
13564: PUSH
13565: LD_INT 2
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 21
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 69
13591: PPUSH
13592: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13596: LD_EXP 28
13600: PPUSH
13601: LD_STRING 07_UsCommander
13603: PPUSH
13604: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13608: LD_INT 22
13610: PUSH
13611: LD_INT 1
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 23
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 21
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PUSH
13648: LD_EXP 28
13652: DIFF
13653: PPUSH
13654: LD_STRING 07_Americans
13656: PPUSH
13657: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13661: LD_EXP 13
13665: PPUSH
13666: LD_STRING 07_Heike
13668: PPUSH
13669: CALL_OW 38
// if Aviradze then
13673: LD_EXP 24
13677: IFFALSE 13691
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13679: LD_EXP 24
13683: PPUSH
13684: LD_STRING 07_Aviradze
13686: PPUSH
13687: CALL_OW 38
// if Ibrahim then
13691: LD_EXP 16
13695: IFFALSE 13709
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13697: LD_EXP 16
13701: PPUSH
13702: LD_STRING 07_Ibrahim
13704: PPUSH
13705: CALL_OW 38
// if Kamil then
13709: LD_EXP 17
13713: IFFALSE 13727
// SaveCharacters ( Kamil , 07_Kamil ) ;
13715: LD_EXP 17
13719: PPUSH
13720: LD_STRING 07_Kamil
13722: PPUSH
13723: CALL_OW 38
// if Sophia then
13727: LD_EXP 19
13731: IFFALSE 13745
// SaveCharacters ( Sophia , 07_Sophia ) ;
13733: LD_EXP 19
13737: PPUSH
13738: LD_STRING 07_Sophia
13740: PPUSH
13741: CALL_OW 38
// if Kaia then
13745: LD_EXP 18
13749: IFFALSE 13763
// SaveCharacters ( Kaia , 07_Kaia ) ;
13751: LD_EXP 18
13755: PPUSH
13756: LD_STRING 07_Kaia
13758: PPUSH
13759: CALL_OW 38
// if Givi then
13763: LD_EXP 14
13767: IFFALSE 13781
// SaveCharacters ( Givi , 07_Givi ) ;
13769: LD_EXP 14
13773: PPUSH
13774: LD_STRING 07_Givi
13776: PPUSH
13777: CALL_OW 38
// if Mike then
13781: LD_EXP 15
13785: IFFALSE 13799
// SaveCharacters ( Mike , 07_Mike ) ;
13787: LD_EXP 15
13791: PPUSH
13792: LD_STRING 07_Mike
13794: PPUSH
13795: CALL_OW 38
// if Markov then
13799: LD_EXP 20
13803: IFFALSE 13817
// SaveCharacters ( Markov , 07_Markov ) ;
13805: LD_EXP 20
13809: PPUSH
13810: LD_STRING 07_Markov
13812: PPUSH
13813: CALL_OW 38
// if Kurt then
13817: LD_EXP 23
13821: IFFALSE 13835
// SaveCharacters ( Kurt , 07_Kurt ) ;
13823: LD_EXP 23
13827: PPUSH
13828: LD_STRING 07_Kurt
13830: PPUSH
13831: CALL_OW 38
// if heikeSecondSquad then
13835: LD_EXP 25
13839: IFFALSE 13853
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13841: LD_EXP 25
13845: PPUSH
13846: LD_STRING 07_others
13848: PPUSH
13849: CALL_OW 38
// YouWin ;
13853: CALL_OW 103
// DialogueOff ;
13857: CALL_OW 7
// end ; end_of_file
13861: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13862: LD_INT 7
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 287
13872: PUSH
13873: LD_INT 300
13875: PUSH
13876: LD_INT 150
13878: PUSH
13879: LD_INT 100
13881: PUSH
13882: LD_INT 80
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_OWVAR 67
13895: ARRAY
13896: LESS
13897: IFFALSE 13924
13899: GO 13901
13901: DISABLE
// begin enable ;
13902: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13903: LD_INT 1
13905: PPUSH
13906: LD_INT 5
13908: PPUSH
13909: CALL_OW 12
13913: PPUSH
13914: LD_INT 7
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 55
// end ;
13924: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13925: LD_INT 8
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 287
13935: PUSH
13936: LD_INT 300
13938: PUSH
13939: LD_INT 250
13941: PUSH
13942: LD_INT 200
13944: PUSH
13945: LD_INT 180
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: PUSH
13954: LD_OWVAR 67
13958: ARRAY
13959: LESS
13960: IFFALSE 13987
13962: GO 13964
13964: DISABLE
// begin enable ;
13965: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13966: LD_INT 1
13968: PPUSH
13969: LD_INT 5
13971: PPUSH
13972: CALL_OW 12
13976: PPUSH
13977: LD_INT 8
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 55
// end ;
13987: END
// every 0 0$40 trigger tick < 4 4$10 do
13988: LD_OWVAR 1
13992: PUSH
13993: LD_INT 8750
13995: LESS
13996: IFFALSE 14029
13998: GO 14000
14000: DISABLE
// begin enable ;
14001: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14002: LD_INT 1
14004: PPUSH
14005: LD_INT 5
14007: PPUSH
14008: CALL_OW 12
14012: PPUSH
14013: LD_INT 130
14015: PPUSH
14016: LD_INT 18
14018: PPUSH
14019: LD_INT 12
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 56
// end ; end_of_file
14029: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
// uc_side := 3 ;
14037: LD_ADDR_OWVAR 20
14041: PUSH
14042: LD_INT 3
14044: ST_TO_ADDR
// uc_nation := 3 ;
14045: LD_ADDR_OWVAR 21
14049: PUSH
14050: LD_INT 3
14052: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_INT 184
14060: PUSH
14061: LD_INT 144
14063: PUSH
14064: LD_INT 5
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 191
14074: PUSH
14075: LD_INT 147
14077: PUSH
14078: LD_INT 5
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 202
14088: PUSH
14089: LD_INT 151
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 210
14102: PUSH
14103: LD_INT 152
14105: PUSH
14106: LD_INT 4
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: ST_TO_ADDR
// for i := 1 to 4 do
14120: LD_ADDR_VAR 0 2
14124: PUSH
14125: DOUBLE
14126: LD_INT 1
14128: DEC
14129: ST_TO_ADDR
14130: LD_INT 4
14132: PUSH
14133: FOR_TO
14134: IFFALSE 14303
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14136: LD_INT 24
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: LD_INT 1
14144: PPUSH
14145: LD_INT 43
14147: PUSH
14148: LD_INT 44
14150: PUSH
14151: LD_INT 46
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: LD_VAR 0 2
14163: PUSH
14164: LD_INT 3
14166: MOD
14167: PUSH
14168: LD_INT 1
14170: PLUS
14171: ARRAY
14172: PPUSH
14173: LD_INT 40
14175: PPUSH
14176: CALL 20219 0 5
// veh := CreateVehicle ;
14180: LD_ADDR_VAR 0 5
14184: PUSH
14185: CALL_OW 45
14189: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14190: LD_VAR 0 5
14194: PPUSH
14195: LD_VAR 0 3
14199: PUSH
14200: LD_VAR 0 2
14204: ARRAY
14205: PUSH
14206: LD_INT 3
14208: ARRAY
14209: PPUSH
14210: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14214: LD_VAR 0 5
14218: PPUSH
14219: LD_VAR 0 3
14223: PUSH
14224: LD_VAR 0 2
14228: ARRAY
14229: PUSH
14230: LD_INT 1
14232: ARRAY
14233: PPUSH
14234: LD_VAR 0 3
14238: PUSH
14239: LD_VAR 0 2
14243: ARRAY
14244: PUSH
14245: LD_INT 2
14247: ARRAY
14248: PPUSH
14249: LD_INT 0
14251: PPUSH
14252: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14256: LD_INT 0
14258: PPUSH
14259: LD_INT 6
14261: PUSH
14262: LD_INT 7
14264: PUSH
14265: LD_INT 8
14267: PUSH
14268: LD_INT 8
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: LD_OWVAR 67
14281: ARRAY
14282: PPUSH
14283: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14287: CALL_OW 44
14291: PPUSH
14292: LD_VAR 0 5
14296: PPUSH
14297: CALL_OW 52
// end ;
14301: GO 14133
14303: POP
14304: POP
// for i := 1 to 4 do
14305: LD_ADDR_VAR 0 2
14309: PUSH
14310: DOUBLE
14311: LD_INT 1
14313: DEC
14314: ST_TO_ADDR
14315: LD_INT 4
14317: PUSH
14318: FOR_TO
14319: IFFALSE 14385
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14321: LD_INT 0
14323: PPUSH
14324: LD_INT 6
14326: PUSH
14327: LD_INT 7
14329: PUSH
14330: LD_INT 8
14332: PUSH
14333: LD_INT 8
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: LD_OWVAR 67
14346: ARRAY
14347: PPUSH
14348: CALL_OW 381
// un := CreateHuman ;
14352: LD_ADDR_VAR 0 4
14356: PUSH
14357: CALL_OW 44
14361: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14362: LD_VAR 0 4
14366: PPUSH
14367: LD_INT 185
14369: PPUSH
14370: LD_INT 145
14372: PPUSH
14373: LD_INT 6
14375: PPUSH
14376: LD_INT 0
14378: PPUSH
14379: CALL_OW 50
// end ;
14383: GO 14318
14385: POP
14386: POP
// end ;
14387: LD_VAR 0 1
14391: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14392: LD_INT 0
14394: PPUSH
14395: PPUSH
14396: PPUSH
// uc_side := 3 ;
14397: LD_ADDR_OWVAR 20
14401: PUSH
14402: LD_INT 3
14404: ST_TO_ADDR
// if Difficulty > 1 then
14405: LD_OWVAR 67
14409: PUSH
14410: LD_INT 1
14412: GREATER
14413: IFFALSE 14575
// begin uc_nation := 0 ;
14415: LD_ADDR_OWVAR 21
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14423: LD_ADDR_VAR 0 2
14427: PUSH
14428: DOUBLE
14429: LD_INT 1
14431: DEC
14432: ST_TO_ADDR
14433: LD_INT 4
14435: PUSH
14436: LD_INT 5
14438: PUSH
14439: LD_INT 6
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: PUSH
14447: LD_OWVAR 67
14451: PUSH
14452: LD_INT 1
14454: PLUS
14455: ARRAY
14456: PUSH
14457: FOR_TO
14458: IFFALSE 14573
// begin hc_class := class_apeman_soldier ;
14460: LD_ADDR_OWVAR 28
14464: PUSH
14465: LD_INT 15
14467: ST_TO_ADDR
// hc_gallery :=  ;
14468: LD_ADDR_OWVAR 33
14472: PUSH
14473: LD_STRING 
14475: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14476: LD_ADDR_OWVAR 26
14480: PUSH
14481: LD_STRING Treci
14483: PUSH
14484: LD_STRING Ivan
14486: PUSH
14487: LD_STRING Yaromir
14489: PUSH
14490: LD_STRING Nadzieia
14492: PUSH
14493: LD_STRING Krasna
14495: PUSH
14496: LD_STRING Piaty
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 1
14509: PPUSH
14510: LD_INT 6
14512: PPUSH
14513: CALL_OW 12
14517: ARRAY
14518: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14519: LD_ADDR_OWVAR 31
14523: PUSH
14524: LD_INT 5
14526: PUSH
14527: LD_INT 0
14529: PUSH
14530: LD_INT 0
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: ST_TO_ADDR
// hc_sex := sex_male ;
14542: LD_ADDR_OWVAR 27
14546: PUSH
14547: LD_INT 1
14549: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14550: CALL_OW 44
14554: PPUSH
14555: LD_INT 178
14557: PPUSH
14558: LD_INT 148
14560: PPUSH
14561: LD_INT 6
14563: PPUSH
14564: LD_INT 0
14566: PPUSH
14567: CALL_OW 50
// end ;
14571: GO 14457
14573: POP
14574: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: DOUBLE
14581: LD_INT 1
14583: DEC
14584: ST_TO_ADDR
14585: LD_INT 4
14587: PUSH
14588: LD_INT 6
14590: PUSH
14591: LD_INT 7
14593: PUSH
14594: LD_INT 9
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: PUSH
14603: LD_OWVAR 67
14607: ARRAY
14608: PUSH
14609: FOR_TO
14610: IFFALSE 14777
// begin uc_nation := 3 ;
14612: LD_ADDR_OWVAR 21
14616: PUSH
14617: LD_INT 3
14619: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14620: LD_INT 22
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: LD_INT 1
14628: PPUSH
14629: LD_INT 45
14631: PUSH
14632: LD_INT 43
14634: PUSH
14635: LD_INT 44
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: PUSH
14643: LD_VAR 0 2
14647: PUSH
14648: LD_INT 3
14650: MOD
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: ARRAY
14656: PPUSH
14657: LD_INT 44
14659: PPUSH
14660: CALL 20219 0 5
// veh := CreateVehicle ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: CALL_OW 45
14673: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14674: LD_VAR 0 3
14678: PPUSH
14679: LD_INT 4
14681: PPUSH
14682: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: LD_INT 0
14696: PPUSH
14697: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14701: LD_INT 0
14703: PPUSH
14704: LD_INT 6
14706: PUSH
14707: LD_INT 7
14709: PUSH
14710: LD_INT 8
14712: PUSH
14713: LD_INT 8
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: LD_OWVAR 67
14726: ARRAY
14727: PPUSH
14728: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14732: CALL_OW 44
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 178
14753: PUSH
14754: LD_INT 137
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: PPUSH
14764: CALL 55184 0 2
// wait ( 0 0$2 ) ;
14768: LD_INT 70
14770: PPUSH
14771: CALL_OW 67
// end ;
14775: GO 14609
14777: POP
14778: POP
// end ;
14779: LD_VAR 0 1
14783: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14784: LD_INT 22
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 32
14796: PUSH
14797: LD_INT 1
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 69
14812: IFFALSE 14900
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
// begin enable ;
14821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14822: LD_ADDR_VAR 0 2
14826: PUSH
14827: LD_INT 22
14829: PUSH
14830: LD_INT 3
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 32
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 69
14855: ST_TO_ADDR
// for i in tmp do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_VAR 0 2
14865: PUSH
14866: FOR_IN
14867: IFFALSE 14898
// if GetFuel ( i ) < 3 then
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 261
14878: PUSH
14879: LD_INT 3
14881: LESS
14882: IFFALSE 14896
// SetFuel ( i , 3 ) ;
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_INT 3
14891: PPUSH
14892: CALL_OW 240
14896: GO 14866
14898: POP
14899: POP
// end ;
14900: PPOPN 2
14902: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14903: LD_EXP 8
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_INT 3
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 21
14920: PUSH
14921: LD_INT 1
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PPUSH
14932: CALL_OW 69
14936: AND
14937: IFFALSE 15201
14939: GO 14941
14941: DISABLE
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
14946: PPUSH
// begin enable ;
14947: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 25
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: LD_INT 55
14978: PUSH
14979: EMPTY
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: ST_TO_ADDR
// if mech then
14996: LD_VAR 0 2
15000: IFFALSE 15070
// for i in mech do
15002: LD_ADDR_VAR 0 1
15006: PUSH
15007: LD_VAR 0 2
15011: PUSH
15012: FOR_IN
15013: IFFALSE 15068
// begin if IsInArea ( i , escapeArea ) then
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_INT 13
15022: PPUSH
15023: CALL_OW 308
15027: IFFALSE 15040
// RemoveUnit ( i ) else
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 64
15038: GO 15066
// if IsOk ( i ) then
15040: LD_VAR 0 1
15044: PPUSH
15045: CALL_OW 302
15049: IFFALSE 15066
// ComMoveXY ( i , 196 , 155 ) ;
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 196
15058: PPUSH
15059: LD_INT 155
15061: PPUSH
15062: CALL_OW 111
// end ;
15066: GO 15012
15068: POP
15069: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15070: LD_ADDR_VAR 0 3
15074: PUSH
15075: LD_INT 22
15077: PUSH
15078: LD_INT 3
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 2
15087: PUSH
15088: LD_INT 25
15090: PUSH
15091: LD_INT 1
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 25
15100: PUSH
15101: LD_INT 15
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 50
15126: PUSH
15127: EMPTY
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// if tmp then
15140: LD_VAR 0 3
15144: IFFALSE 15201
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15146: LD_VAR 0 3
15150: PPUSH
15151: LD_INT 171
15153: PUSH
15154: LD_INT 106
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 145
15163: PUSH
15164: LD_INT 69
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 132
15173: PUSH
15174: LD_INT 38
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 126
15183: PUSH
15184: LD_INT 15
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: PPUSH
15197: CALL 55184 0 2
// end ; end_of_file
15201: PPOPN 3
15203: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15204: LD_INT 0
15206: PPUSH
15207: PPUSH
// if exist_mode then
15208: LD_VAR 0 2
15212: IFFALSE 15237
// unit := CreateCharacter ( prefix & ident ) else
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 3
15223: PUSH
15224: LD_VAR 0 1
15228: STR
15229: PPUSH
15230: CALL_OW 34
15234: ST_TO_ADDR
15235: GO 15252
// unit := NewCharacter ( ident ) ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 25
15251: ST_TO_ADDR
// result := unit ;
15252: LD_ADDR_VAR 0 4
15256: PUSH
15257: LD_VAR 0 5
15261: ST_TO_ADDR
// end ;
15262: LD_VAR 0 4
15266: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
// if not side or not nation then
15271: LD_VAR 0 1
15275: NOT
15276: PUSH
15277: LD_VAR 0 2
15281: NOT
15282: OR
15283: IFFALSE 15287
// exit ;
15285: GO 16055
// case nation of nation_american :
15287: LD_VAR 0 2
15291: PUSH
15292: LD_INT 1
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15514
15300: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15301: LD_ADDR_VAR 0 4
15305: PUSH
15306: LD_INT 35
15308: PUSH
15309: LD_INT 45
15311: PUSH
15312: LD_INT 46
15314: PUSH
15315: LD_INT 47
15317: PUSH
15318: LD_INT 82
15320: PUSH
15321: LD_INT 83
15323: PUSH
15324: LD_INT 84
15326: PUSH
15327: LD_INT 85
15329: PUSH
15330: LD_INT 86
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: LD_INT 2
15338: PUSH
15339: LD_INT 6
15341: PUSH
15342: LD_INT 15
15344: PUSH
15345: LD_INT 16
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 12
15353: PUSH
15354: LD_INT 13
15356: PUSH
15357: LD_INT 10
15359: PUSH
15360: LD_INT 14
15362: PUSH
15363: LD_INT 20
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_INT 25
15374: PUSH
15375: LD_INT 32
15377: PUSH
15378: LD_INT 27
15380: PUSH
15381: LD_INT 36
15383: PUSH
15384: LD_INT 69
15386: PUSH
15387: LD_INT 39
15389: PUSH
15390: LD_INT 34
15392: PUSH
15393: LD_INT 40
15395: PUSH
15396: LD_INT 48
15398: PUSH
15399: LD_INT 49
15401: PUSH
15402: LD_INT 50
15404: PUSH
15405: LD_INT 51
15407: PUSH
15408: LD_INT 52
15410: PUSH
15411: LD_INT 53
15413: PUSH
15414: LD_INT 54
15416: PUSH
15417: LD_INT 55
15419: PUSH
15420: LD_INT 56
15422: PUSH
15423: LD_INT 57
15425: PUSH
15426: LD_INT 58
15428: PUSH
15429: LD_INT 59
15431: PUSH
15432: LD_INT 60
15434: PUSH
15435: LD_INT 61
15437: PUSH
15438: LD_INT 62
15440: PUSH
15441: LD_INT 80
15443: PUSH
15444: LD_INT 82
15446: PUSH
15447: LD_INT 83
15449: PUSH
15450: LD_INT 84
15452: PUSH
15453: LD_INT 85
15455: PUSH
15456: LD_INT 86
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: ST_TO_ADDR
15512: GO 15979
15514: LD_INT 2
15516: DOUBLE
15517: EQUAL
15518: IFTRUE 15522
15520: GO 15748
15522: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15523: LD_ADDR_VAR 0 4
15527: PUSH
15528: LD_INT 35
15530: PUSH
15531: LD_INT 45
15533: PUSH
15534: LD_INT 46
15536: PUSH
15537: LD_INT 47
15539: PUSH
15540: LD_INT 82
15542: PUSH
15543: LD_INT 83
15545: PUSH
15546: LD_INT 84
15548: PUSH
15549: LD_INT 85
15551: PUSH
15552: LD_INT 87
15554: PUSH
15555: LD_INT 70
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 11
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: LD_INT 4
15569: PUSH
15570: LD_INT 5
15572: PUSH
15573: LD_INT 6
15575: PUSH
15576: LD_INT 15
15578: PUSH
15579: LD_INT 18
15581: PUSH
15582: LD_INT 7
15584: PUSH
15585: LD_INT 17
15587: PUSH
15588: LD_INT 8
15590: PUSH
15591: LD_INT 20
15593: PUSH
15594: LD_INT 21
15596: PUSH
15597: LD_INT 22
15599: PUSH
15600: LD_INT 72
15602: PUSH
15603: LD_INT 26
15605: PUSH
15606: LD_INT 69
15608: PUSH
15609: LD_INT 39
15611: PUSH
15612: LD_INT 40
15614: PUSH
15615: LD_INT 41
15617: PUSH
15618: LD_INT 42
15620: PUSH
15621: LD_INT 43
15623: PUSH
15624: LD_INT 48
15626: PUSH
15627: LD_INT 49
15629: PUSH
15630: LD_INT 50
15632: PUSH
15633: LD_INT 51
15635: PUSH
15636: LD_INT 52
15638: PUSH
15639: LD_INT 53
15641: PUSH
15642: LD_INT 54
15644: PUSH
15645: LD_INT 55
15647: PUSH
15648: LD_INT 56
15650: PUSH
15651: LD_INT 60
15653: PUSH
15654: LD_INT 61
15656: PUSH
15657: LD_INT 62
15659: PUSH
15660: LD_INT 66
15662: PUSH
15663: LD_INT 67
15665: PUSH
15666: LD_INT 68
15668: PUSH
15669: LD_INT 81
15671: PUSH
15672: LD_INT 82
15674: PUSH
15675: LD_INT 83
15677: PUSH
15678: LD_INT 84
15680: PUSH
15681: LD_INT 85
15683: PUSH
15684: LD_INT 87
15686: PUSH
15687: LD_INT 88
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: ST_TO_ADDR
15746: GO 15979
15748: LD_INT 3
15750: DOUBLE
15751: EQUAL
15752: IFTRUE 15756
15754: GO 15978
15756: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15757: LD_ADDR_VAR 0 4
15761: PUSH
15762: LD_INT 46
15764: PUSH
15765: LD_INT 47
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 82
15776: PUSH
15777: LD_INT 83
15779: PUSH
15780: LD_INT 84
15782: PUSH
15783: LD_INT 85
15785: PUSH
15786: LD_INT 86
15788: PUSH
15789: LD_INT 11
15791: PUSH
15792: LD_INT 9
15794: PUSH
15795: LD_INT 20
15797: PUSH
15798: LD_INT 19
15800: PUSH
15801: LD_INT 21
15803: PUSH
15804: LD_INT 24
15806: PUSH
15807: LD_INT 22
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 28
15815: PUSH
15816: LD_INT 29
15818: PUSH
15819: LD_INT 30
15821: PUSH
15822: LD_INT 31
15824: PUSH
15825: LD_INT 37
15827: PUSH
15828: LD_INT 38
15830: PUSH
15831: LD_INT 32
15833: PUSH
15834: LD_INT 27
15836: PUSH
15837: LD_INT 33
15839: PUSH
15840: LD_INT 69
15842: PUSH
15843: LD_INT 39
15845: PUSH
15846: LD_INT 34
15848: PUSH
15849: LD_INT 40
15851: PUSH
15852: LD_INT 71
15854: PUSH
15855: LD_INT 23
15857: PUSH
15858: LD_INT 44
15860: PUSH
15861: LD_INT 48
15863: PUSH
15864: LD_INT 49
15866: PUSH
15867: LD_INT 50
15869: PUSH
15870: LD_INT 51
15872: PUSH
15873: LD_INT 52
15875: PUSH
15876: LD_INT 53
15878: PUSH
15879: LD_INT 54
15881: PUSH
15882: LD_INT 55
15884: PUSH
15885: LD_INT 56
15887: PUSH
15888: LD_INT 57
15890: PUSH
15891: LD_INT 58
15893: PUSH
15894: LD_INT 59
15896: PUSH
15897: LD_INT 63
15899: PUSH
15900: LD_INT 64
15902: PUSH
15903: LD_INT 65
15905: PUSH
15906: LD_INT 82
15908: PUSH
15909: LD_INT 83
15911: PUSH
15912: LD_INT 84
15914: PUSH
15915: LD_INT 85
15917: PUSH
15918: LD_INT 86
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
15976: GO 15979
15978: POP
// if state > - 1 and state < 3 then
15979: LD_VAR 0 3
15983: PUSH
15984: LD_INT 1
15986: NEG
15987: GREATER
15988: PUSH
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 3
15996: LESS
15997: AND
15998: IFFALSE 16055
// for i in result do
16000: LD_ADDR_VAR 0 5
16004: PUSH
16005: LD_VAR 0 4
16009: PUSH
16010: FOR_IN
16011: IFFALSE 16053
// if GetTech ( i , side ) <> state then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 321
16027: PUSH
16028: LD_VAR 0 3
16032: NONEQUAL
16033: IFFALSE 16051
// result := result diff i ;
16035: LD_ADDR_VAR 0 4
16039: PUSH
16040: LD_VAR 0 4
16044: PUSH
16045: LD_VAR 0 5
16049: DIFF
16050: ST_TO_ADDR
16051: GO 16010
16053: POP
16054: POP
// end ;
16055: LD_VAR 0 4
16059: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16060: LD_INT 0
16062: PPUSH
16063: PPUSH
16064: PPUSH
// result := true ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16073: LD_ADDR_VAR 0 5
16077: PUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 480
16087: ST_TO_ADDR
// if not tmp then
16088: LD_VAR 0 5
16092: NOT
16093: IFFALSE 16097
// exit ;
16095: GO 16146
// for i in tmp do
16097: LD_ADDR_VAR 0 4
16101: PUSH
16102: LD_VAR 0 5
16106: PUSH
16107: FOR_IN
16108: IFFALSE 16144
// if GetTech ( i , side ) <> state_researched then
16110: LD_VAR 0 4
16114: PPUSH
16115: LD_VAR 0 1
16119: PPUSH
16120: CALL_OW 321
16124: PUSH
16125: LD_INT 2
16127: NONEQUAL
16128: IFFALSE 16142
// begin result := false ;
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_INT 0
16137: ST_TO_ADDR
// exit ;
16138: POP
16139: POP
16140: GO 16146
// end ;
16142: GO 16107
16144: POP
16145: POP
// end ;
16146: LD_VAR 0 3
16150: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16151: LD_INT 0
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
16165: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16166: LD_VAR 0 1
16170: NOT
16171: PUSH
16172: LD_VAR 0 1
16176: PPUSH
16177: CALL_OW 257
16181: PUSH
16182: LD_INT 9
16184: NONEQUAL
16185: OR
16186: IFFALSE 16190
// exit ;
16188: GO 16763
// side := GetSide ( unit ) ;
16190: LD_ADDR_VAR 0 9
16194: PUSH
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 255
16204: ST_TO_ADDR
// tech_space := tech_spacanom ;
16205: LD_ADDR_VAR 0 12
16209: PUSH
16210: LD_INT 29
16212: ST_TO_ADDR
// tech_time := tech_taurad ;
16213: LD_ADDR_VAR 0 13
16217: PUSH
16218: LD_INT 28
16220: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16221: LD_ADDR_VAR 0 11
16225: PUSH
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 310
16235: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16236: LD_VAR 0 11
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: IFFALSE 16253
// exit ;
16251: GO 16763
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16253: LD_ADDR_VAR 0 8
16257: PUSH
16258: LD_INT 81
16260: PUSH
16261: LD_VAR 0 9
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 3
16272: PUSH
16273: LD_INT 21
16275: PUSH
16276: LD_INT 3
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: ST_TO_ADDR
// if not tmp then
16296: LD_VAR 0 8
16300: NOT
16301: IFFALSE 16305
// exit ;
16303: GO 16763
// if in_unit then
16305: LD_VAR 0 11
16309: IFFALSE 16333
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16311: LD_ADDR_VAR 0 10
16315: PUSH
16316: LD_VAR 0 8
16320: PPUSH
16321: LD_VAR 0 11
16325: PPUSH
16326: CALL_OW 74
16330: ST_TO_ADDR
16331: GO 16353
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16333: LD_ADDR_VAR 0 10
16337: PUSH
16338: LD_VAR 0 8
16342: PPUSH
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 74
16352: ST_TO_ADDR
// if not enemy then
16353: LD_VAR 0 10
16357: NOT
16358: IFFALSE 16362
// exit ;
16360: GO 16763
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16362: LD_VAR 0 11
16366: PUSH
16367: LD_VAR 0 11
16371: PPUSH
16372: LD_VAR 0 10
16376: PPUSH
16377: CALL_OW 296
16381: PUSH
16382: LD_INT 13
16384: GREATER
16385: AND
16386: PUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: LD_VAR 0 10
16396: PPUSH
16397: CALL_OW 296
16401: PUSH
16402: LD_INT 12
16404: GREATER
16405: OR
16406: IFFALSE 16410
// exit ;
16408: GO 16763
// missile := [ 1 ] ;
16410: LD_ADDR_VAR 0 14
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16421: LD_VAR 0 9
16425: PPUSH
16426: LD_VAR 0 12
16430: PPUSH
16431: CALL_OW 325
16435: IFFALSE 16464
// missile := Replace ( missile , missile + 1 , 2 ) ;
16437: LD_ADDR_VAR 0 14
16441: PUSH
16442: LD_VAR 0 14
16446: PPUSH
16447: LD_VAR 0 14
16451: PUSH
16452: LD_INT 1
16454: PLUS
16455: PPUSH
16456: LD_INT 2
16458: PPUSH
16459: CALL_OW 1
16463: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16464: LD_VAR 0 9
16468: PPUSH
16469: LD_VAR 0 13
16473: PPUSH
16474: CALL_OW 325
16478: PUSH
16479: LD_VAR 0 10
16483: PPUSH
16484: CALL_OW 255
16488: PPUSH
16489: LD_VAR 0 13
16493: PPUSH
16494: CALL_OW 325
16498: NOT
16499: AND
16500: IFFALSE 16529
// missile := Replace ( missile , missile + 1 , 3 ) ;
16502: LD_ADDR_VAR 0 14
16506: PUSH
16507: LD_VAR 0 14
16511: PPUSH
16512: LD_VAR 0 14
16516: PUSH
16517: LD_INT 1
16519: PLUS
16520: PPUSH
16521: LD_INT 3
16523: PPUSH
16524: CALL_OW 1
16528: ST_TO_ADDR
// if missile < 2 then
16529: LD_VAR 0 14
16533: PUSH
16534: LD_INT 2
16536: LESS
16537: IFFALSE 16541
// exit ;
16539: GO 16763
// x := GetX ( enemy ) ;
16541: LD_ADDR_VAR 0 4
16545: PUSH
16546: LD_VAR 0 10
16550: PPUSH
16551: CALL_OW 250
16555: ST_TO_ADDR
// y := GetY ( enemy ) ;
16556: LD_ADDR_VAR 0 5
16560: PUSH
16561: LD_VAR 0 10
16565: PPUSH
16566: CALL_OW 251
16570: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16571: LD_ADDR_VAR 0 6
16575: PUSH
16576: LD_VAR 0 4
16580: PUSH
16581: LD_INT 1
16583: NEG
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: CALL_OW 12
16592: PLUS
16593: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16594: LD_ADDR_VAR 0 7
16598: PUSH
16599: LD_VAR 0 5
16603: PUSH
16604: LD_INT 1
16606: NEG
16607: PPUSH
16608: LD_INT 1
16610: PPUSH
16611: CALL_OW 12
16615: PLUS
16616: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16617: LD_VAR 0 6
16621: PPUSH
16622: LD_VAR 0 7
16626: PPUSH
16627: CALL_OW 488
16631: NOT
16632: IFFALSE 16654
// begin _x := x ;
16634: LD_ADDR_VAR 0 6
16638: PUSH
16639: LD_VAR 0 4
16643: ST_TO_ADDR
// _y := y ;
16644: LD_ADDR_VAR 0 7
16648: PUSH
16649: LD_VAR 0 5
16653: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16654: LD_ADDR_VAR 0 3
16658: PUSH
16659: LD_INT 1
16661: PPUSH
16662: LD_VAR 0 14
16666: PPUSH
16667: CALL_OW 12
16671: ST_TO_ADDR
// case i of 1 :
16672: LD_VAR 0 3
16676: PUSH
16677: LD_INT 1
16679: DOUBLE
16680: EQUAL
16681: IFTRUE 16685
16683: GO 16702
16685: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16686: LD_VAR 0 1
16690: PPUSH
16691: LD_VAR 0 10
16695: PPUSH
16696: CALL_OW 115
16700: GO 16763
16702: LD_INT 2
16704: DOUBLE
16705: EQUAL
16706: IFTRUE 16710
16708: GO 16732
16710: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16711: LD_VAR 0 1
16715: PPUSH
16716: LD_VAR 0 6
16720: PPUSH
16721: LD_VAR 0 7
16725: PPUSH
16726: CALL_OW 153
16730: GO 16763
16732: LD_INT 3
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16762
16740: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16741: LD_VAR 0 1
16745: PPUSH
16746: LD_VAR 0 6
16750: PPUSH
16751: LD_VAR 0 7
16755: PPUSH
16756: CALL_OW 154
16760: GO 16763
16762: POP
// end ;
16763: LD_VAR 0 2
16767: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16768: LD_INT 0
16770: PPUSH
16771: PPUSH
16772: PPUSH
16773: PPUSH
16774: PPUSH
16775: PPUSH
// if not unit or not building then
16776: LD_VAR 0 1
16780: NOT
16781: PUSH
16782: LD_VAR 0 2
16786: NOT
16787: OR
16788: IFFALSE 16792
// exit ;
16790: GO 16950
// x := GetX ( building ) ;
16792: LD_ADDR_VAR 0 5
16796: PUSH
16797: LD_VAR 0 2
16801: PPUSH
16802: CALL_OW 250
16806: ST_TO_ADDR
// y := GetY ( building ) ;
16807: LD_ADDR_VAR 0 6
16811: PUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL_OW 251
16821: ST_TO_ADDR
// for i = 0 to 5 do
16822: LD_ADDR_VAR 0 4
16826: PUSH
16827: DOUBLE
16828: LD_INT 0
16830: DEC
16831: ST_TO_ADDR
16832: LD_INT 5
16834: PUSH
16835: FOR_TO
16836: IFFALSE 16948
// begin _x := ShiftX ( x , i , 3 ) ;
16838: LD_ADDR_VAR 0 7
16842: PUSH
16843: LD_VAR 0 5
16847: PPUSH
16848: LD_VAR 0 4
16852: PPUSH
16853: LD_INT 3
16855: PPUSH
16856: CALL_OW 272
16860: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16861: LD_ADDR_VAR 0 8
16865: PUSH
16866: LD_VAR 0 6
16870: PPUSH
16871: LD_VAR 0 4
16875: PPUSH
16876: LD_INT 3
16878: PPUSH
16879: CALL_OW 273
16883: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16884: LD_VAR 0 7
16888: PPUSH
16889: LD_VAR 0 8
16893: PPUSH
16894: CALL_OW 488
16898: NOT
16899: IFFALSE 16903
// continue ;
16901: GO 16835
// if HexInfo ( _x , _y ) = 0 then
16903: LD_VAR 0 7
16907: PPUSH
16908: LD_VAR 0 8
16912: PPUSH
16913: CALL_OW 428
16917: PUSH
16918: LD_INT 0
16920: EQUAL
16921: IFFALSE 16946
// begin ComMoveXY ( unit , _x , _y ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_VAR 0 7
16932: PPUSH
16933: LD_VAR 0 8
16937: PPUSH
16938: CALL_OW 111
// exit ;
16942: POP
16943: POP
16944: GO 16950
// end ; end ;
16946: GO 16835
16948: POP
16949: POP
// end ;
16950: LD_VAR 0 3
16954: RET
// export function ScanBase ( side , base_area ) ; begin
16955: LD_INT 0
16957: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 2
16967: PPUSH
16968: LD_INT 81
16970: PUSH
16971: LD_VAR 0 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 70
16984: ST_TO_ADDR
// end ;
16985: LD_VAR 0 3
16989: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16990: LD_INT 0
16992: PPUSH
16993: PPUSH
16994: PPUSH
16995: PPUSH
// result := false ;
16996: LD_ADDR_VAR 0 2
17000: PUSH
17001: LD_INT 0
17003: ST_TO_ADDR
// side := GetSide ( unit ) ;
17004: LD_ADDR_VAR 0 3
17008: PUSH
17009: LD_VAR 0 1
17013: PPUSH
17014: CALL_OW 255
17018: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17019: LD_ADDR_VAR 0 4
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 248
17033: ST_TO_ADDR
// case nat of 1 :
17034: LD_VAR 0 4
17038: PUSH
17039: LD_INT 1
17041: DOUBLE
17042: EQUAL
17043: IFTRUE 17047
17045: GO 17058
17047: POP
// tech := tech_lassight ; 2 :
17048: LD_ADDR_VAR 0 5
17052: PUSH
17053: LD_INT 12
17055: ST_TO_ADDR
17056: GO 17097
17058: LD_INT 2
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17077
17066: POP
// tech := tech_mortar ; 3 :
17067: LD_ADDR_VAR 0 5
17071: PUSH
17072: LD_INT 41
17074: ST_TO_ADDR
17075: GO 17097
17077: LD_INT 3
17079: DOUBLE
17080: EQUAL
17081: IFTRUE 17085
17083: GO 17096
17085: POP
// tech := tech_bazooka ; end ;
17086: LD_ADDR_VAR 0 5
17090: PUSH
17091: LD_INT 44
17093: ST_TO_ADDR
17094: GO 17097
17096: POP
// if Researched ( side , tech ) then
17097: LD_VAR 0 3
17101: PPUSH
17102: LD_VAR 0 5
17106: PPUSH
17107: CALL_OW 325
17111: IFFALSE 17138
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17113: LD_ADDR_VAR 0 2
17117: PUSH
17118: LD_INT 5
17120: PUSH
17121: LD_INT 8
17123: PUSH
17124: LD_INT 9
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: PUSH
17132: LD_VAR 0 4
17136: ARRAY
17137: ST_TO_ADDR
// end ;
17138: LD_VAR 0 2
17142: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
// if not mines then
17148: LD_VAR 0 2
17152: NOT
17153: IFFALSE 17157
// exit ;
17155: GO 17301
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17157: LD_ADDR_VAR 0 5
17161: PUSH
17162: LD_INT 81
17164: PUSH
17165: LD_VAR 0 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: CALL_OW 69
17199: ST_TO_ADDR
// for i in mines do
17200: LD_ADDR_VAR 0 4
17204: PUSH
17205: LD_VAR 0 2
17209: PUSH
17210: FOR_IN
17211: IFFALSE 17299
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17213: LD_VAR 0 4
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PPUSH
17222: LD_VAR 0 4
17226: PUSH
17227: LD_INT 2
17229: ARRAY
17230: PPUSH
17231: CALL_OW 458
17235: NOT
17236: IFFALSE 17240
// continue ;
17238: GO 17210
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17240: LD_VAR 0 4
17244: PUSH
17245: LD_INT 1
17247: ARRAY
17248: PPUSH
17249: LD_VAR 0 4
17253: PUSH
17254: LD_INT 2
17256: ARRAY
17257: PPUSH
17258: CALL_OW 428
17262: PUSH
17263: LD_VAR 0 5
17267: IN
17268: IFFALSE 17297
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17270: LD_VAR 0 4
17274: PUSH
17275: LD_INT 1
17277: ARRAY
17278: PPUSH
17279: LD_VAR 0 4
17283: PUSH
17284: LD_INT 2
17286: ARRAY
17287: PPUSH
17288: LD_VAR 0 1
17292: PPUSH
17293: CALL_OW 456
// end ;
17297: GO 17210
17299: POP
17300: POP
// end ;
17301: LD_VAR 0 3
17305: RET
// export function Count ( array ) ; var i ; begin
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
// result := 0 ;
17310: LD_ADDR_VAR 0 2
17314: PUSH
17315: LD_INT 0
17317: ST_TO_ADDR
// for i in array do
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_VAR 0 1
17327: PUSH
17328: FOR_IN
17329: IFFALSE 17353
// if i then
17331: LD_VAR 0 3
17335: IFFALSE 17351
// result := result + 1 ;
17337: LD_ADDR_VAR 0 2
17341: PUSH
17342: LD_VAR 0 2
17346: PUSH
17347: LD_INT 1
17349: PLUS
17350: ST_TO_ADDR
17351: GO 17328
17353: POP
17354: POP
// end ;
17355: LD_VAR 0 2
17359: RET
// export function IsEmpty ( building ) ; begin
17360: LD_INT 0
17362: PPUSH
// if not building then
17363: LD_VAR 0 1
17367: NOT
17368: IFFALSE 17372
// exit ;
17370: GO 17415
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17372: LD_ADDR_VAR 0 2
17376: PUSH
17377: LD_VAR 0 1
17381: PUSH
17382: LD_INT 22
17384: PUSH
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 255
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 58
17401: PUSH
17402: EMPTY
17403: LIST
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PPUSH
17409: CALL_OW 69
17413: IN
17414: ST_TO_ADDR
// end ;
17415: LD_VAR 0 2
17419: RET
// export function IsNotFull ( building ) ; var places ; begin
17420: LD_INT 0
17422: PPUSH
17423: PPUSH
// if not building then
17424: LD_VAR 0 1
17428: NOT
17429: IFFALSE 17433
// exit ;
17431: GO 17604
// result := false ;
17433: LD_ADDR_VAR 0 2
17437: PUSH
17438: LD_INT 0
17440: ST_TO_ADDR
// places := 0 ;
17441: LD_ADDR_VAR 0 3
17445: PUSH
17446: LD_INT 0
17448: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL_OW 266
17458: PUSH
17459: LD_INT 0
17461: DOUBLE
17462: EQUAL
17463: IFTRUE 17521
17465: LD_INT 1
17467: DOUBLE
17468: EQUAL
17469: IFTRUE 17521
17471: LD_INT 6
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17521
17477: LD_INT 7
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17521
17483: LD_INT 8
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17521
17489: LD_INT 4
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17521
17495: LD_INT 5
17497: DOUBLE
17498: EQUAL
17499: IFTRUE 17521
17501: LD_INT 2
17503: DOUBLE
17504: EQUAL
17505: IFTRUE 17521
17507: LD_INT 3
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17521
17513: LD_INT 35
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17521
17519: GO 17532
17521: POP
// places := 6 ; b_bunker , b_breastwork :
17522: LD_ADDR_VAR 0 3
17526: PUSH
17527: LD_INT 6
17529: ST_TO_ADDR
17530: GO 17577
17532: LD_INT 32
17534: DOUBLE
17535: EQUAL
17536: IFTRUE 17546
17538: LD_INT 31
17540: DOUBLE
17541: EQUAL
17542: IFTRUE 17546
17544: GO 17557
17546: POP
// places := 1 ; b_control_tower :
17547: LD_ADDR_VAR 0 3
17551: PUSH
17552: LD_INT 1
17554: ST_TO_ADDR
17555: GO 17577
17557: LD_INT 36
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17576
17565: POP
// places := 3 ; end ;
17566: LD_ADDR_VAR 0 3
17570: PUSH
17571: LD_INT 3
17573: ST_TO_ADDR
17574: GO 17577
17576: POP
// if places then
17577: LD_VAR 0 3
17581: IFFALSE 17604
// result := UnitsInside ( building ) < places ;
17583: LD_ADDR_VAR 0 2
17587: PUSH
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 313
17597: PUSH
17598: LD_VAR 0 3
17602: LESS
17603: ST_TO_ADDR
// end ;
17604: LD_VAR 0 2
17608: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
// tmp := [ ] ;
17615: LD_ADDR_VAR 0 3
17619: PUSH
17620: EMPTY
17621: ST_TO_ADDR
// list := [ ] ;
17622: LD_ADDR_VAR 0 5
17626: PUSH
17627: EMPTY
17628: ST_TO_ADDR
// for i = 16 to 25 do
17629: LD_ADDR_VAR 0 4
17633: PUSH
17634: DOUBLE
17635: LD_INT 16
17637: DEC
17638: ST_TO_ADDR
17639: LD_INT 25
17641: PUSH
17642: FOR_TO
17643: IFFALSE 17716
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_VAR 0 3
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 255
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 91
17674: PUSH
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 6
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 30
17690: PUSH
17691: LD_VAR 0 4
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: PUSH
17705: EMPTY
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: ADD
17713: ST_TO_ADDR
17714: GO 17642
17716: POP
17717: POP
// for i = 1 to tmp do
17718: LD_ADDR_VAR 0 4
17722: PUSH
17723: DOUBLE
17724: LD_INT 1
17726: DEC
17727: ST_TO_ADDR
17728: LD_VAR 0 3
17732: PUSH
17733: FOR_TO
17734: IFFALSE 17822
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17736: LD_ADDR_VAR 0 5
17740: PUSH
17741: LD_VAR 0 5
17745: PUSH
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 4
17755: ARRAY
17756: PPUSH
17757: CALL_OW 266
17761: PUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_VAR 0 4
17771: ARRAY
17772: PPUSH
17773: CALL_OW 250
17777: PUSH
17778: LD_VAR 0 3
17782: PUSH
17783: LD_VAR 0 4
17787: ARRAY
17788: PPUSH
17789: CALL_OW 251
17793: PUSH
17794: LD_VAR 0 3
17798: PUSH
17799: LD_VAR 0 4
17803: ARRAY
17804: PPUSH
17805: CALL_OW 254
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: PUSH
17816: EMPTY
17817: LIST
17818: ADD
17819: ST_TO_ADDR
17820: GO 17733
17822: POP
17823: POP
// result := list ;
17824: LD_ADDR_VAR 0 2
17828: PUSH
17829: LD_VAR 0 5
17833: ST_TO_ADDR
// end ;
17834: LD_VAR 0 2
17838: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17839: LD_INT 0
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
// if not factory then
17848: LD_VAR 0 1
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 18450
// if control = control_apeman then
17857: LD_VAR 0 4
17861: PUSH
17862: LD_INT 5
17864: EQUAL
17865: IFFALSE 17974
// begin tmp := UnitsInside ( factory ) ;
17867: LD_ADDR_VAR 0 8
17871: PUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 313
17881: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17882: LD_VAR 0 8
17886: PPUSH
17887: LD_INT 25
17889: PUSH
17890: LD_INT 12
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 72
17901: NOT
17902: IFFALSE 17912
// control := control_manual ;
17904: LD_ADDR_VAR 0 4
17908: PUSH
17909: LD_INT 1
17911: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17912: LD_ADDR_VAR 0 8
17916: PUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL 17609 0 1
17926: ST_TO_ADDR
// if tmp then
17927: LD_VAR 0 8
17931: IFFALSE 17974
// begin for i in tmp do
17933: LD_ADDR_VAR 0 7
17937: PUSH
17938: LD_VAR 0 8
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17972
// if i [ 1 ] = b_ext_radio then
17946: LD_VAR 0 7
17950: PUSH
17951: LD_INT 1
17953: ARRAY
17954: PUSH
17955: LD_INT 22
17957: EQUAL
17958: IFFALSE 17970
// begin control := control_remote ;
17960: LD_ADDR_VAR 0 4
17964: PUSH
17965: LD_INT 2
17967: ST_TO_ADDR
// break ;
17968: GO 17972
// end ;
17970: GO 17943
17972: POP
17973: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17974: LD_VAR 0 1
17978: PPUSH
17979: LD_VAR 0 2
17983: PPUSH
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_VAR 0 4
17993: PPUSH
17994: LD_VAR 0 5
17998: PPUSH
17999: CALL_OW 448
18003: IFFALSE 18038
// begin result := [ chassis , engine , control , weapon ] ;
18005: LD_ADDR_VAR 0 6
18009: PUSH
18010: LD_VAR 0 2
18014: PUSH
18015: LD_VAR 0 3
18019: PUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_VAR 0 5
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: ST_TO_ADDR
// exit ;
18036: GO 18450
// end ; _chassis := AvailableChassisList ( factory ) ;
18038: LD_ADDR_VAR 0 9
18042: PUSH
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 475
18052: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18053: LD_ADDR_VAR 0 11
18057: PUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 476
18067: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18068: LD_ADDR_VAR 0 12
18072: PUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 477
18082: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18083: LD_ADDR_VAR 0 10
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 478
18097: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18098: LD_VAR 0 9
18102: NOT
18103: PUSH
18104: LD_VAR 0 11
18108: NOT
18109: OR
18110: PUSH
18111: LD_VAR 0 12
18115: NOT
18116: OR
18117: PUSH
18118: LD_VAR 0 10
18122: NOT
18123: OR
18124: IFFALSE 18159
// begin result := [ chassis , engine , control , weapon ] ;
18126: LD_ADDR_VAR 0 6
18130: PUSH
18131: LD_VAR 0 2
18135: PUSH
18136: LD_VAR 0 3
18140: PUSH
18141: LD_VAR 0 4
18145: PUSH
18146: LD_VAR 0 5
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: ST_TO_ADDR
// exit ;
18157: GO 18450
// end ; if not chassis in _chassis then
18159: LD_VAR 0 2
18163: PUSH
18164: LD_VAR 0 9
18168: IN
18169: NOT
18170: IFFALSE 18196
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_VAR 0 9
18181: PUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_VAR 0 9
18189: PPUSH
18190: CALL_OW 12
18194: ARRAY
18195: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18196: LD_VAR 0 2
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: CALL 18455 0 2
18210: NOT
18211: IFFALSE 18270
// repeat engine := _engine [ 1 ] ;
18213: LD_ADDR_VAR 0 3
18217: PUSH
18218: LD_VAR 0 11
18222: PUSH
18223: LD_INT 1
18225: ARRAY
18226: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18227: LD_ADDR_VAR 0 11
18231: PUSH
18232: LD_VAR 0 11
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 3
18244: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18245: LD_VAR 0 2
18249: PPUSH
18250: LD_VAR 0 3
18254: PPUSH
18255: CALL 18455 0 2
18259: PUSH
18260: LD_VAR 0 11
18264: PUSH
18265: EMPTY
18266: EQUAL
18267: OR
18268: IFFALSE 18213
// if not control in _control then
18270: LD_VAR 0 4
18274: PUSH
18275: LD_VAR 0 12
18279: IN
18280: NOT
18281: IFFALSE 18307
// control := _control [ rand ( 1 , _control ) ] ;
18283: LD_ADDR_VAR 0 4
18287: PUSH
18288: LD_VAR 0 12
18292: PUSH
18293: LD_INT 1
18295: PPUSH
18296: LD_VAR 0 12
18300: PPUSH
18301: CALL_OW 12
18305: ARRAY
18306: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18307: LD_VAR 0 2
18311: PPUSH
18312: LD_VAR 0 5
18316: PPUSH
18317: CALL 18675 0 2
18321: NOT
18322: IFFALSE 18381
// repeat weapon := _weapon [ 1 ] ;
18324: LD_ADDR_VAR 0 5
18328: PUSH
18329: LD_VAR 0 10
18333: PUSH
18334: LD_INT 1
18336: ARRAY
18337: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18338: LD_ADDR_VAR 0 10
18342: PUSH
18343: LD_VAR 0 10
18347: PPUSH
18348: LD_INT 1
18350: PPUSH
18351: CALL_OW 3
18355: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_VAR 0 5
18365: PPUSH
18366: CALL 18675 0 2
18370: PUSH
18371: LD_VAR 0 10
18375: PUSH
18376: EMPTY
18377: EQUAL
18378: OR
18379: IFFALSE 18324
// result := [ ] ;
18381: LD_ADDR_VAR 0 6
18385: PUSH
18386: EMPTY
18387: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18388: LD_VAR 0 1
18392: PPUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: LD_VAR 0 4
18407: PPUSH
18408: LD_VAR 0 5
18412: PPUSH
18413: CALL_OW 448
18417: IFFALSE 18450
// result := [ chassis , engine , control , weapon ] ;
18419: LD_ADDR_VAR 0 6
18423: PUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_VAR 0 3
18433: PUSH
18434: LD_VAR 0 4
18438: PUSH
18439: LD_VAR 0 5
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: ST_TO_ADDR
// end ;
18450: LD_VAR 0 6
18454: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18455: LD_INT 0
18457: PPUSH
// if not chassis or not engine then
18458: LD_VAR 0 1
18462: NOT
18463: PUSH
18464: LD_VAR 0 2
18468: NOT
18469: OR
18470: IFFALSE 18474
// exit ;
18472: GO 18670
// case engine of engine_solar :
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 2
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18525
18487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_INT 11
18495: PUSH
18496: LD_INT 12
18498: PUSH
18499: LD_INT 13
18501: PUSH
18502: LD_INT 14
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: ST_TO_ADDR
18523: GO 18654
18525: LD_INT 1
18527: DOUBLE
18528: EQUAL
18529: IFTRUE 18533
18531: GO 18595
18533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_INT 11
18541: PUSH
18542: LD_INT 12
18544: PUSH
18545: LD_INT 13
18547: PUSH
18548: LD_INT 14
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: LD_INT 3
18559: PUSH
18560: LD_INT 4
18562: PUSH
18563: LD_INT 5
18565: PUSH
18566: LD_INT 21
18568: PUSH
18569: LD_INT 23
18571: PUSH
18572: LD_INT 22
18574: PUSH
18575: LD_INT 24
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: ST_TO_ADDR
18593: GO 18654
18595: LD_INT 3
18597: DOUBLE
18598: EQUAL
18599: IFTRUE 18603
18601: GO 18653
18603: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18604: LD_ADDR_VAR 0 3
18608: PUSH
18609: LD_INT 13
18611: PUSH
18612: LD_INT 14
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 3
18620: PUSH
18621: LD_INT 4
18623: PUSH
18624: LD_INT 5
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_INT 23
18635: PUSH
18636: LD_INT 24
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: ST_TO_ADDR
18651: GO 18654
18653: POP
// result := ( chassis in result ) ;
18654: LD_ADDR_VAR 0 3
18658: PUSH
18659: LD_VAR 0 1
18663: PUSH
18664: LD_VAR 0 3
18668: IN
18669: ST_TO_ADDR
// end ;
18670: LD_VAR 0 3
18674: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18675: LD_INT 0
18677: PPUSH
// if not chassis or not weapon then
18678: LD_VAR 0 1
18682: NOT
18683: PUSH
18684: LD_VAR 0 2
18688: NOT
18689: OR
18690: IFFALSE 18694
// exit ;
18692: GO 19754
// case weapon of us_machine_gun :
18694: LD_VAR 0 2
18698: PUSH
18699: LD_INT 2
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18737
18707: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: LD_INT 4
18724: PUSH
18725: LD_INT 5
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
18735: GO 19738
18737: LD_INT 3
18739: DOUBLE
18740: EQUAL
18741: IFTRUE 18745
18743: GO 18775
18745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18746: LD_ADDR_VAR 0 3
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: LD_INT 4
18762: PUSH
18763: LD_INT 5
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: ST_TO_ADDR
18773: GO 19738
18775: LD_INT 11
18777: DOUBLE
18778: EQUAL
18779: IFTRUE 18783
18781: GO 18813
18783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: LD_INT 4
18800: PUSH
18801: LD_INT 5
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: ST_TO_ADDR
18811: GO 19738
18813: LD_INT 4
18815: DOUBLE
18816: EQUAL
18817: IFTRUE 18821
18819: GO 18847
18821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 4
18835: PUSH
18836: LD_INT 5
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: ST_TO_ADDR
18845: GO 19738
18847: LD_INT 5
18849: DOUBLE
18850: EQUAL
18851: IFTRUE 18855
18853: GO 18881
18855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 3
18866: PUSH
18867: LD_INT 4
18869: PUSH
18870: LD_INT 5
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: ST_TO_ADDR
18879: GO 19738
18881: LD_INT 9
18883: DOUBLE
18884: EQUAL
18885: IFTRUE 18889
18887: GO 18915
18889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 3
18900: PUSH
18901: LD_INT 4
18903: PUSH
18904: LD_INT 5
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: ST_TO_ADDR
18913: GO 19738
18915: LD_INT 7
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18949
18923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18924: LD_ADDR_VAR 0 3
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 3
18934: PUSH
18935: LD_INT 4
18937: PUSH
18938: LD_INT 5
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: ST_TO_ADDR
18947: GO 19738
18949: LD_INT 12
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18983
18957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18958: LD_ADDR_VAR 0 3
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: LD_INT 3
18968: PUSH
18969: LD_INT 4
18971: PUSH
18972: LD_INT 5
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: ST_TO_ADDR
18981: GO 19738
18983: LD_INT 13
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19017
18991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18992: LD_ADDR_VAR 0 3
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: LD_INT 4
19005: PUSH
19006: LD_INT 5
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: ST_TO_ADDR
19015: GO 19738
19017: LD_INT 14
19019: DOUBLE
19020: EQUAL
19021: IFTRUE 19025
19023: GO 19043
19025: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19026: LD_ADDR_VAR 0 3
19030: PUSH
19031: LD_INT 4
19033: PUSH
19034: LD_INT 5
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: ST_TO_ADDR
19041: GO 19738
19043: LD_INT 6
19045: DOUBLE
19046: EQUAL
19047: IFTRUE 19051
19049: GO 19069
19051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: LD_INT 4
19059: PUSH
19060: LD_INT 5
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: ST_TO_ADDR
19067: GO 19738
19069: LD_INT 10
19071: DOUBLE
19072: EQUAL
19073: IFTRUE 19077
19075: GO 19095
19077: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19078: LD_ADDR_VAR 0 3
19082: PUSH
19083: LD_INT 4
19085: PUSH
19086: LD_INT 5
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: ST_TO_ADDR
19093: GO 19738
19095: LD_INT 22
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19129
19103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19104: LD_ADDR_VAR 0 3
19108: PUSH
19109: LD_INT 11
19111: PUSH
19112: LD_INT 12
19114: PUSH
19115: LD_INT 13
19117: PUSH
19118: LD_INT 14
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
19127: GO 19738
19129: LD_INT 23
19131: DOUBLE
19132: EQUAL
19133: IFTRUE 19137
19135: GO 19163
19137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19138: LD_ADDR_VAR 0 3
19142: PUSH
19143: LD_INT 11
19145: PUSH
19146: LD_INT 12
19148: PUSH
19149: LD_INT 13
19151: PUSH
19152: LD_INT 14
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: ST_TO_ADDR
19161: GO 19738
19163: LD_INT 24
19165: DOUBLE
19166: EQUAL
19167: IFTRUE 19171
19169: GO 19197
19171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19172: LD_ADDR_VAR 0 3
19176: PUSH
19177: LD_INT 11
19179: PUSH
19180: LD_INT 12
19182: PUSH
19183: LD_INT 13
19185: PUSH
19186: LD_INT 14
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: ST_TO_ADDR
19195: GO 19738
19197: LD_INT 30
19199: DOUBLE
19200: EQUAL
19201: IFTRUE 19205
19203: GO 19231
19205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_INT 11
19213: PUSH
19214: LD_INT 12
19216: PUSH
19217: LD_INT 13
19219: PUSH
19220: LD_INT 14
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: ST_TO_ADDR
19229: GO 19738
19231: LD_INT 25
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19257
19239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19240: LD_ADDR_VAR 0 3
19244: PUSH
19245: LD_INT 13
19247: PUSH
19248: LD_INT 14
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: ST_TO_ADDR
19255: GO 19738
19257: LD_INT 27
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19283
19265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: LD_INT 13
19273: PUSH
19274: LD_INT 14
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: ST_TO_ADDR
19281: GO 19738
19283: LD_INT 92
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19317
19291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19292: LD_ADDR_VAR 0 3
19296: PUSH
19297: LD_INT 11
19299: PUSH
19300: LD_INT 12
19302: PUSH
19303: LD_INT 13
19305: PUSH
19306: LD_INT 14
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: ST_TO_ADDR
19315: GO 19738
19317: LD_INT 28
19319: DOUBLE
19320: EQUAL
19321: IFTRUE 19325
19323: GO 19343
19325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_INT 13
19333: PUSH
19334: LD_INT 14
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: ST_TO_ADDR
19341: GO 19738
19343: LD_INT 29
19345: DOUBLE
19346: EQUAL
19347: IFTRUE 19351
19349: GO 19369
19351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19352: LD_ADDR_VAR 0 3
19356: PUSH
19357: LD_INT 13
19359: PUSH
19360: LD_INT 14
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: ST_TO_ADDR
19367: GO 19738
19369: LD_INT 31
19371: DOUBLE
19372: EQUAL
19373: IFTRUE 19377
19375: GO 19395
19377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19378: LD_ADDR_VAR 0 3
19382: PUSH
19383: LD_INT 13
19385: PUSH
19386: LD_INT 14
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: ST_TO_ADDR
19393: GO 19738
19395: LD_INT 26
19397: DOUBLE
19398: EQUAL
19399: IFTRUE 19403
19401: GO 19421
19403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: LD_INT 13
19411: PUSH
19412: LD_INT 14
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: ST_TO_ADDR
19419: GO 19738
19421: LD_INT 42
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19455
19429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19430: LD_ADDR_VAR 0 3
19434: PUSH
19435: LD_INT 21
19437: PUSH
19438: LD_INT 22
19440: PUSH
19441: LD_INT 23
19443: PUSH
19444: LD_INT 24
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: ST_TO_ADDR
19453: GO 19738
19455: LD_INT 43
19457: DOUBLE
19458: EQUAL
19459: IFTRUE 19463
19461: GO 19489
19463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19464: LD_ADDR_VAR 0 3
19468: PUSH
19469: LD_INT 21
19471: PUSH
19472: LD_INT 22
19474: PUSH
19475: LD_INT 23
19477: PUSH
19478: LD_INT 24
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: ST_TO_ADDR
19487: GO 19738
19489: LD_INT 44
19491: DOUBLE
19492: EQUAL
19493: IFTRUE 19497
19495: GO 19523
19497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19498: LD_ADDR_VAR 0 3
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 24
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: ST_TO_ADDR
19521: GO 19738
19523: LD_INT 45
19525: DOUBLE
19526: EQUAL
19527: IFTRUE 19531
19529: GO 19557
19531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19532: LD_ADDR_VAR 0 3
19536: PUSH
19537: LD_INT 21
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_INT 23
19545: PUSH
19546: LD_INT 24
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: ST_TO_ADDR
19555: GO 19738
19557: LD_INT 49
19559: DOUBLE
19560: EQUAL
19561: IFTRUE 19565
19563: GO 19591
19565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19566: LD_ADDR_VAR 0 3
19570: PUSH
19571: LD_INT 21
19573: PUSH
19574: LD_INT 22
19576: PUSH
19577: LD_INT 23
19579: PUSH
19580: LD_INT 24
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
19589: GO 19738
19591: LD_INT 51
19593: DOUBLE
19594: EQUAL
19595: IFTRUE 19599
19597: GO 19625
19599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19600: LD_ADDR_VAR 0 3
19604: PUSH
19605: LD_INT 21
19607: PUSH
19608: LD_INT 22
19610: PUSH
19611: LD_INT 23
19613: PUSH
19614: LD_INT 24
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: ST_TO_ADDR
19623: GO 19738
19625: LD_INT 52
19627: DOUBLE
19628: EQUAL
19629: IFTRUE 19633
19631: GO 19659
19633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19634: LD_ADDR_VAR 0 3
19638: PUSH
19639: LD_INT 21
19641: PUSH
19642: LD_INT 22
19644: PUSH
19645: LD_INT 23
19647: PUSH
19648: LD_INT 24
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: ST_TO_ADDR
19657: GO 19738
19659: LD_INT 53
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19685
19667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19668: LD_ADDR_VAR 0 3
19672: PUSH
19673: LD_INT 23
19675: PUSH
19676: LD_INT 24
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: ST_TO_ADDR
19683: GO 19738
19685: LD_INT 46
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19711
19693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: LD_INT 23
19701: PUSH
19702: LD_INT 24
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: ST_TO_ADDR
19709: GO 19738
19711: LD_INT 47
19713: DOUBLE
19714: EQUAL
19715: IFTRUE 19719
19717: GO 19737
19719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19720: LD_ADDR_VAR 0 3
19724: PUSH
19725: LD_INT 23
19727: PUSH
19728: LD_INT 24
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: ST_TO_ADDR
19735: GO 19738
19737: POP
// result := ( chassis in result ) ;
19738: LD_ADDR_VAR 0 3
19742: PUSH
19743: LD_VAR 0 1
19747: PUSH
19748: LD_VAR 0 3
19752: IN
19753: ST_TO_ADDR
// end ;
19754: LD_VAR 0 3
19758: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19759: LD_INT 0
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
19765: PPUSH
19766: PPUSH
19767: PPUSH
// result := array ;
19768: LD_ADDR_VAR 0 5
19772: PUSH
19773: LD_VAR 0 1
19777: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19778: LD_VAR 0 1
19782: NOT
19783: PUSH
19784: LD_VAR 0 2
19788: NOT
19789: OR
19790: PUSH
19791: LD_VAR 0 3
19795: NOT
19796: OR
19797: PUSH
19798: LD_VAR 0 2
19802: PUSH
19803: LD_VAR 0 1
19807: GREATER
19808: OR
19809: PUSH
19810: LD_VAR 0 3
19814: PUSH
19815: LD_VAR 0 1
19819: GREATER
19820: OR
19821: IFFALSE 19825
// exit ;
19823: GO 20121
// if direction then
19825: LD_VAR 0 4
19829: IFFALSE 19893
// begin d := 1 ;
19831: LD_ADDR_VAR 0 9
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if i_from > i_to then
19839: LD_VAR 0 2
19843: PUSH
19844: LD_VAR 0 3
19848: GREATER
19849: IFFALSE 19875
// length := ( array - i_from ) + i_to else
19851: LD_ADDR_VAR 0 11
19855: PUSH
19856: LD_VAR 0 1
19860: PUSH
19861: LD_VAR 0 2
19865: MINUS
19866: PUSH
19867: LD_VAR 0 3
19871: PLUS
19872: ST_TO_ADDR
19873: GO 19891
// length := i_to - i_from ;
19875: LD_ADDR_VAR 0 11
19879: PUSH
19880: LD_VAR 0 3
19884: PUSH
19885: LD_VAR 0 2
19889: MINUS
19890: ST_TO_ADDR
// end else
19891: GO 19954
// begin d := - 1 ;
19893: LD_ADDR_VAR 0 9
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: ST_TO_ADDR
// if i_from > i_to then
19902: LD_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: GREATER
19912: IFFALSE 19932
// length := i_from - i_to else
19914: LD_ADDR_VAR 0 11
19918: PUSH
19919: LD_VAR 0 2
19923: PUSH
19924: LD_VAR 0 3
19928: MINUS
19929: ST_TO_ADDR
19930: GO 19954
// length := ( array - i_to ) + i_from ;
19932: LD_ADDR_VAR 0 11
19936: PUSH
19937: LD_VAR 0 1
19941: PUSH
19942: LD_VAR 0 3
19946: MINUS
19947: PUSH
19948: LD_VAR 0 2
19952: PLUS
19953: ST_TO_ADDR
// end ; if not length then
19954: LD_VAR 0 11
19958: NOT
19959: IFFALSE 19963
// exit ;
19961: GO 20121
// tmp := array ;
19963: LD_ADDR_VAR 0 10
19967: PUSH
19968: LD_VAR 0 1
19972: ST_TO_ADDR
// for i = 1 to length do
19973: LD_ADDR_VAR 0 6
19977: PUSH
19978: DOUBLE
19979: LD_INT 1
19981: DEC
19982: ST_TO_ADDR
19983: LD_VAR 0 11
19987: PUSH
19988: FOR_TO
19989: IFFALSE 20109
// begin for j = 1 to array do
19991: LD_ADDR_VAR 0 7
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_VAR 0 1
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20095
// begin k := j + d ;
20009: LD_ADDR_VAR 0 8
20013: PUSH
20014: LD_VAR 0 7
20018: PUSH
20019: LD_VAR 0 9
20023: PLUS
20024: ST_TO_ADDR
// if k > array then
20025: LD_VAR 0 8
20029: PUSH
20030: LD_VAR 0 1
20034: GREATER
20035: IFFALSE 20045
// k := 1 ;
20037: LD_ADDR_VAR 0 8
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if not k then
20045: LD_VAR 0 8
20049: NOT
20050: IFFALSE 20062
// k := array ;
20052: LD_ADDR_VAR 0 8
20056: PUSH
20057: LD_VAR 0 1
20061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20062: LD_ADDR_VAR 0 10
20066: PUSH
20067: LD_VAR 0 10
20071: PPUSH
20072: LD_VAR 0 8
20076: PPUSH
20077: LD_VAR 0 1
20081: PUSH
20082: LD_VAR 0 7
20086: ARRAY
20087: PPUSH
20088: CALL_OW 1
20092: ST_TO_ADDR
// end ;
20093: GO 20006
20095: POP
20096: POP
// array := tmp ;
20097: LD_ADDR_VAR 0 1
20101: PUSH
20102: LD_VAR 0 10
20106: ST_TO_ADDR
// end ;
20107: GO 19988
20109: POP
20110: POP
// result := array ;
20111: LD_ADDR_VAR 0 5
20115: PUSH
20116: LD_VAR 0 1
20120: ST_TO_ADDR
// end ;
20121: LD_VAR 0 5
20125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20126: LD_INT 0
20128: PPUSH
20129: PPUSH
// result := 0 ;
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_INT 0
20137: ST_TO_ADDR
// if not array or not value in array then
20138: LD_VAR 0 1
20142: NOT
20143: PUSH
20144: LD_VAR 0 2
20148: PUSH
20149: LD_VAR 0 1
20153: IN
20154: NOT
20155: OR
20156: IFFALSE 20160
// exit ;
20158: GO 20214
// for i = 1 to array do
20160: LD_ADDR_VAR 0 4
20164: PUSH
20165: DOUBLE
20166: LD_INT 1
20168: DEC
20169: ST_TO_ADDR
20170: LD_VAR 0 1
20174: PUSH
20175: FOR_TO
20176: IFFALSE 20212
// if value = array [ i ] then
20178: LD_VAR 0 2
20182: PUSH
20183: LD_VAR 0 1
20187: PUSH
20188: LD_VAR 0 4
20192: ARRAY
20193: EQUAL
20194: IFFALSE 20210
// begin result := i ;
20196: LD_ADDR_VAR 0 3
20200: PUSH
20201: LD_VAR 0 4
20205: ST_TO_ADDR
// exit ;
20206: POP
20207: POP
20208: GO 20214
// end ;
20210: GO 20175
20212: POP
20213: POP
// end ;
20214: LD_VAR 0 3
20218: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20219: LD_INT 0
20221: PPUSH
// vc_chassis := chassis ;
20222: LD_ADDR_OWVAR 37
20226: PUSH
20227: LD_VAR 0 1
20231: ST_TO_ADDR
// vc_engine := engine ;
20232: LD_ADDR_OWVAR 39
20236: PUSH
20237: LD_VAR 0 2
20241: ST_TO_ADDR
// vc_control := control ;
20242: LD_ADDR_OWVAR 38
20246: PUSH
20247: LD_VAR 0 3
20251: ST_TO_ADDR
// vc_weapon := weapon ;
20252: LD_ADDR_OWVAR 40
20256: PUSH
20257: LD_VAR 0 4
20261: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20262: LD_ADDR_OWVAR 41
20266: PUSH
20267: LD_VAR 0 5
20271: ST_TO_ADDR
// end ;
20272: LD_VAR 0 6
20276: RET
// export function WantPlant ( unit ) ; var task ; begin
20277: LD_INT 0
20279: PPUSH
20280: PPUSH
// result := false ;
20281: LD_ADDR_VAR 0 2
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20289: LD_ADDR_VAR 0 3
20293: PUSH
20294: LD_VAR 0 1
20298: PPUSH
20299: CALL_OW 437
20303: ST_TO_ADDR
// if task then
20304: LD_VAR 0 3
20308: IFFALSE 20336
// if task [ 1 ] [ 1 ] = p then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 1
20317: ARRAY
20318: PUSH
20319: LD_INT 1
20321: ARRAY
20322: PUSH
20323: LD_STRING p
20325: EQUAL
20326: IFFALSE 20336
// result := true ;
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// end ;
20336: LD_VAR 0 2
20340: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20341: LD_INT 0
20343: PPUSH
20344: PPUSH
20345: PPUSH
20346: PPUSH
// if pos < 1 then
20347: LD_VAR 0 2
20351: PUSH
20352: LD_INT 1
20354: LESS
20355: IFFALSE 20359
// exit ;
20357: GO 20662
// if pos = 1 then
20359: LD_VAR 0 2
20363: PUSH
20364: LD_INT 1
20366: EQUAL
20367: IFFALSE 20400
// result := Replace ( arr , pos [ 1 ] , value ) else
20369: LD_ADDR_VAR 0 4
20373: PUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: LD_VAR 0 2
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: PPUSH
20388: LD_VAR 0 3
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
20398: GO 20662
// begin tmp := arr ;
20400: LD_ADDR_VAR 0 6
20404: PUSH
20405: LD_VAR 0 1
20409: ST_TO_ADDR
// s_arr := [ tmp ] ;
20410: LD_ADDR_VAR 0 7
20414: PUSH
20415: LD_VAR 0 6
20419: PUSH
20420: EMPTY
20421: LIST
20422: ST_TO_ADDR
// for i = 1 to pos - 1 do
20423: LD_ADDR_VAR 0 5
20427: PUSH
20428: DOUBLE
20429: LD_INT 1
20431: DEC
20432: ST_TO_ADDR
20433: LD_VAR 0 2
20437: PUSH
20438: LD_INT 1
20440: MINUS
20441: PUSH
20442: FOR_TO
20443: IFFALSE 20488
// begin tmp := tmp [ pos [ i ] ] ;
20445: LD_ADDR_VAR 0 6
20449: PUSH
20450: LD_VAR 0 6
20454: PUSH
20455: LD_VAR 0 2
20459: PUSH
20460: LD_VAR 0 5
20464: ARRAY
20465: ARRAY
20466: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20467: LD_ADDR_VAR 0 7
20471: PUSH
20472: LD_VAR 0 7
20476: PUSH
20477: LD_VAR 0 6
20481: PUSH
20482: EMPTY
20483: LIST
20484: ADD
20485: ST_TO_ADDR
// end ;
20486: GO 20442
20488: POP
20489: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20490: LD_ADDR_VAR 0 6
20494: PUSH
20495: LD_VAR 0 6
20499: PPUSH
20500: LD_VAR 0 2
20504: PUSH
20505: LD_VAR 0 2
20509: ARRAY
20510: PPUSH
20511: LD_VAR 0 3
20515: PPUSH
20516: CALL_OW 1
20520: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20521: LD_ADDR_VAR 0 7
20525: PUSH
20526: LD_VAR 0 7
20530: PPUSH
20531: LD_VAR 0 7
20535: PPUSH
20536: LD_VAR 0 6
20540: PPUSH
20541: CALL_OW 1
20545: ST_TO_ADDR
// for i = s_arr downto 2 do
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: DOUBLE
20552: LD_VAR 0 7
20556: INC
20557: ST_TO_ADDR
20558: LD_INT 2
20560: PUSH
20561: FOR_DOWNTO
20562: IFFALSE 20646
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20564: LD_ADDR_VAR 0 6
20568: PUSH
20569: LD_VAR 0 7
20573: PUSH
20574: LD_VAR 0 5
20578: PUSH
20579: LD_INT 1
20581: MINUS
20582: ARRAY
20583: PPUSH
20584: LD_VAR 0 2
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: LD_INT 1
20596: MINUS
20597: ARRAY
20598: PPUSH
20599: LD_VAR 0 7
20603: PUSH
20604: LD_VAR 0 5
20608: ARRAY
20609: PPUSH
20610: CALL_OW 1
20614: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20615: LD_ADDR_VAR 0 7
20619: PUSH
20620: LD_VAR 0 7
20624: PPUSH
20625: LD_VAR 0 5
20629: PUSH
20630: LD_INT 1
20632: MINUS
20633: PPUSH
20634: LD_VAR 0 6
20638: PPUSH
20639: CALL_OW 1
20643: ST_TO_ADDR
// end ;
20644: GO 20561
20646: POP
20647: POP
// result := s_arr [ 1 ] ;
20648: LD_ADDR_VAR 0 4
20652: PUSH
20653: LD_VAR 0 7
20657: PUSH
20658: LD_INT 1
20660: ARRAY
20661: ST_TO_ADDR
// end ; end ;
20662: LD_VAR 0 4
20666: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
// if not list then
20671: LD_VAR 0 1
20675: NOT
20676: IFFALSE 20680
// exit ;
20678: GO 20771
// i := list [ pos1 ] ;
20680: LD_ADDR_VAR 0 5
20684: PUSH
20685: LD_VAR 0 1
20689: PUSH
20690: LD_VAR 0 2
20694: ARRAY
20695: ST_TO_ADDR
// if not i then
20696: LD_VAR 0 5
20700: NOT
20701: IFFALSE 20705
// exit ;
20703: GO 20771
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20705: LD_ADDR_VAR 0 1
20709: PUSH
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 1
20724: PUSH
20725: LD_VAR 0 3
20729: ARRAY
20730: PPUSH
20731: CALL_OW 1
20735: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_VAR 0 5
20755: PPUSH
20756: CALL_OW 1
20760: ST_TO_ADDR
// result := list ;
20761: LD_ADDR_VAR 0 4
20765: PUSH
20766: LD_VAR 0 1
20770: ST_TO_ADDR
// end ;
20771: LD_VAR 0 4
20775: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20776: LD_INT 0
20778: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20779: LD_ADDR_VAR 0 5
20783: PUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 250
20793: PPUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: CALL_OW 251
20803: PPUSH
20804: LD_VAR 0 2
20808: PPUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: LD_VAR 0 4
20818: PPUSH
20819: CALL 20829 0 5
20823: ST_TO_ADDR
// end ;
20824: LD_VAR 0 5
20828: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20829: LD_INT 0
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
// if not list then
20835: LD_VAR 0 3
20839: NOT
20840: IFFALSE 20844
// exit ;
20842: GO 21232
// result := [ ] ;
20844: LD_ADDR_VAR 0 6
20848: PUSH
20849: EMPTY
20850: ST_TO_ADDR
// for i in list do
20851: LD_ADDR_VAR 0 7
20855: PUSH
20856: LD_VAR 0 3
20860: PUSH
20861: FOR_IN
20862: IFFALSE 21064
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20864: LD_ADDR_VAR 0 9
20868: PUSH
20869: LD_VAR 0 7
20873: PPUSH
20874: LD_VAR 0 1
20878: PPUSH
20879: LD_VAR 0 2
20883: PPUSH
20884: CALL_OW 297
20888: ST_TO_ADDR
// if not result then
20889: LD_VAR 0 6
20893: NOT
20894: IFFALSE 20920
// result := [ [ i , tmp ] ] else
20896: LD_ADDR_VAR 0 6
20900: PUSH
20901: LD_VAR 0 7
20905: PUSH
20906: LD_VAR 0 9
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: ST_TO_ADDR
20918: GO 21062
// begin if result [ result ] [ 2 ] < tmp then
20920: LD_VAR 0 6
20924: PUSH
20925: LD_VAR 0 6
20929: ARRAY
20930: PUSH
20931: LD_INT 2
20933: ARRAY
20934: PUSH
20935: LD_VAR 0 9
20939: LESS
20940: IFFALSE 20982
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20942: LD_ADDR_VAR 0 6
20946: PUSH
20947: LD_VAR 0 6
20951: PPUSH
20952: LD_VAR 0 6
20956: PUSH
20957: LD_INT 1
20959: PLUS
20960: PPUSH
20961: LD_VAR 0 7
20965: PUSH
20966: LD_VAR 0 9
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PPUSH
20975: CALL_OW 2
20979: ST_TO_ADDR
20980: GO 21062
// for j = 1 to result do
20982: LD_ADDR_VAR 0 8
20986: PUSH
20987: DOUBLE
20988: LD_INT 1
20990: DEC
20991: ST_TO_ADDR
20992: LD_VAR 0 6
20996: PUSH
20997: FOR_TO
20998: IFFALSE 21060
// begin if tmp < result [ j ] [ 2 ] then
21000: LD_VAR 0 9
21004: PUSH
21005: LD_VAR 0 6
21009: PUSH
21010: LD_VAR 0 8
21014: ARRAY
21015: PUSH
21016: LD_INT 2
21018: ARRAY
21019: LESS
21020: IFFALSE 21058
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21022: LD_ADDR_VAR 0 6
21026: PUSH
21027: LD_VAR 0 6
21031: PPUSH
21032: LD_VAR 0 8
21036: PPUSH
21037: LD_VAR 0 7
21041: PUSH
21042: LD_VAR 0 9
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PPUSH
21051: CALL_OW 2
21055: ST_TO_ADDR
// break ;
21056: GO 21060
// end ; end ;
21058: GO 20997
21060: POP
21061: POP
// end ; end ;
21062: GO 20861
21064: POP
21065: POP
// if result and not asc then
21066: LD_VAR 0 6
21070: PUSH
21071: LD_VAR 0 4
21075: NOT
21076: AND
21077: IFFALSE 21152
// begin tmp := result ;
21079: LD_ADDR_VAR 0 9
21083: PUSH
21084: LD_VAR 0 6
21088: ST_TO_ADDR
// for i = tmp downto 1 do
21089: LD_ADDR_VAR 0 7
21093: PUSH
21094: DOUBLE
21095: LD_VAR 0 9
21099: INC
21100: ST_TO_ADDR
21101: LD_INT 1
21103: PUSH
21104: FOR_DOWNTO
21105: IFFALSE 21150
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21107: LD_ADDR_VAR 0 6
21111: PUSH
21112: LD_VAR 0 6
21116: PPUSH
21117: LD_VAR 0 9
21121: PUSH
21122: LD_VAR 0 7
21126: MINUS
21127: PUSH
21128: LD_INT 1
21130: PLUS
21131: PPUSH
21132: LD_VAR 0 9
21136: PUSH
21137: LD_VAR 0 7
21141: ARRAY
21142: PPUSH
21143: CALL_OW 1
21147: ST_TO_ADDR
21148: GO 21104
21150: POP
21151: POP
// end ; tmp := [ ] ;
21152: LD_ADDR_VAR 0 9
21156: PUSH
21157: EMPTY
21158: ST_TO_ADDR
// if mode then
21159: LD_VAR 0 5
21163: IFFALSE 21232
// begin for i = 1 to result do
21165: LD_ADDR_VAR 0 7
21169: PUSH
21170: DOUBLE
21171: LD_INT 1
21173: DEC
21174: ST_TO_ADDR
21175: LD_VAR 0 6
21179: PUSH
21180: FOR_TO
21181: IFFALSE 21220
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21183: LD_ADDR_VAR 0 9
21187: PUSH
21188: LD_VAR 0 9
21192: PPUSH
21193: LD_VAR 0 7
21197: PPUSH
21198: LD_VAR 0 6
21202: PUSH
21203: LD_VAR 0 7
21207: ARRAY
21208: PUSH
21209: LD_INT 1
21211: ARRAY
21212: PPUSH
21213: CALL_OW 1
21217: ST_TO_ADDR
21218: GO 21180
21220: POP
21221: POP
// result := tmp ;
21222: LD_ADDR_VAR 0 6
21226: PUSH
21227: LD_VAR 0 9
21231: ST_TO_ADDR
// end ; end ;
21232: LD_VAR 0 6
21236: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21237: LD_INT 0
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
21243: PPUSH
21244: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21245: LD_ADDR_VAR 0 5
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: ST_TO_ADDR
// if not x or not y then
21267: LD_VAR 0 2
21271: NOT
21272: PUSH
21273: LD_VAR 0 3
21277: NOT
21278: OR
21279: IFFALSE 21283
// exit ;
21281: GO 22933
// if not range then
21283: LD_VAR 0 4
21287: NOT
21288: IFFALSE 21298
// range := 10 ;
21290: LD_ADDR_VAR 0 4
21294: PUSH
21295: LD_INT 10
21297: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21298: LD_ADDR_VAR 0 8
21302: PUSH
21303: LD_INT 81
21305: PUSH
21306: LD_VAR 0 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 92
21317: PUSH
21318: LD_VAR 0 2
21322: PUSH
21323: LD_VAR 0 3
21327: PUSH
21328: LD_VAR 0 4
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 3
21341: PUSH
21342: LD_INT 21
21344: PUSH
21345: LD_INT 3
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: PPUSH
21361: CALL_OW 69
21365: ST_TO_ADDR
// if not tmp then
21366: LD_VAR 0 8
21370: NOT
21371: IFFALSE 21375
// exit ;
21373: GO 22933
// for i in tmp do
21375: LD_ADDR_VAR 0 6
21379: PUSH
21380: LD_VAR 0 8
21384: PUSH
21385: FOR_IN
21386: IFFALSE 22908
// begin points := [ 0 , 0 , 0 ] ;
21388: LD_ADDR_VAR 0 9
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: ST_TO_ADDR
// bpoints := 1 ;
21407: LD_ADDR_VAR 0 10
21411: PUSH
21412: LD_INT 1
21414: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21415: LD_VAR 0 6
21419: PPUSH
21420: CALL_OW 247
21424: PUSH
21425: LD_INT 1
21427: DOUBLE
21428: EQUAL
21429: IFTRUE 21433
21431: GO 22011
21433: POP
// begin if GetClass ( i ) = 1 then
21434: LD_VAR 0 6
21438: PPUSH
21439: CALL_OW 257
21443: PUSH
21444: LD_INT 1
21446: EQUAL
21447: IFFALSE 21468
// points := [ 10 , 5 , 3 ] ;
21449: LD_ADDR_VAR 0 9
21453: PUSH
21454: LD_INT 10
21456: PUSH
21457: LD_INT 5
21459: PUSH
21460: LD_INT 3
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21468: LD_VAR 0 6
21472: PPUSH
21473: CALL_OW 257
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 3
21483: PUSH
21484: LD_INT 4
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: IN
21492: IFFALSE 21513
// points := [ 3 , 2 , 1 ] ;
21494: LD_ADDR_VAR 0 9
21498: PUSH
21499: LD_INT 3
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: LIST
21512: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21513: LD_VAR 0 6
21517: PPUSH
21518: CALL_OW 257
21522: PUSH
21523: LD_INT 5
21525: EQUAL
21526: IFFALSE 21547
// points := [ 130 , 5 , 2 ] ;
21528: LD_ADDR_VAR 0 9
21532: PUSH
21533: LD_INT 130
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: LD_INT 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21547: LD_VAR 0 6
21551: PPUSH
21552: CALL_OW 257
21556: PUSH
21557: LD_INT 8
21559: EQUAL
21560: IFFALSE 21581
// points := [ 35 , 35 , 30 ] ;
21562: LD_ADDR_VAR 0 9
21566: PUSH
21567: LD_INT 35
21569: PUSH
21570: LD_INT 35
21572: PUSH
21573: LD_INT 30
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21581: LD_VAR 0 6
21585: PPUSH
21586: CALL_OW 257
21590: PUSH
21591: LD_INT 9
21593: EQUAL
21594: IFFALSE 21615
// points := [ 20 , 55 , 40 ] ;
21596: LD_ADDR_VAR 0 9
21600: PUSH
21601: LD_INT 20
21603: PUSH
21604: LD_INT 55
21606: PUSH
21607: LD_INT 40
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21615: LD_VAR 0 6
21619: PPUSH
21620: CALL_OW 257
21624: PUSH
21625: LD_INT 12
21627: PUSH
21628: LD_INT 16
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: IN
21635: IFFALSE 21656
// points := [ 5 , 3 , 2 ] ;
21637: LD_ADDR_VAR 0 9
21641: PUSH
21642: LD_INT 5
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21656: LD_VAR 0 6
21660: PPUSH
21661: CALL_OW 257
21665: PUSH
21666: LD_INT 17
21668: EQUAL
21669: IFFALSE 21690
// points := [ 100 , 50 , 75 ] ;
21671: LD_ADDR_VAR 0 9
21675: PUSH
21676: LD_INT 100
21678: PUSH
21679: LD_INT 50
21681: PUSH
21682: LD_INT 75
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21690: LD_VAR 0 6
21694: PPUSH
21695: CALL_OW 257
21699: PUSH
21700: LD_INT 15
21702: EQUAL
21703: IFFALSE 21724
// points := [ 10 , 5 , 3 ] ;
21705: LD_ADDR_VAR 0 9
21709: PUSH
21710: LD_INT 10
21712: PUSH
21713: LD_INT 5
21715: PUSH
21716: LD_INT 3
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21724: LD_VAR 0 6
21728: PPUSH
21729: CALL_OW 257
21733: PUSH
21734: LD_INT 14
21736: EQUAL
21737: IFFALSE 21758
// points := [ 10 , 0 , 0 ] ;
21739: LD_ADDR_VAR 0 9
21743: PUSH
21744: LD_INT 10
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21758: LD_VAR 0 6
21762: PPUSH
21763: CALL_OW 257
21767: PUSH
21768: LD_INT 11
21770: EQUAL
21771: IFFALSE 21792
// points := [ 30 , 10 , 5 ] ;
21773: LD_ADDR_VAR 0 9
21777: PUSH
21778: LD_INT 30
21780: PUSH
21781: LD_INT 10
21783: PUSH
21784: LD_INT 5
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_INT 5
21799: PPUSH
21800: CALL_OW 321
21804: PUSH
21805: LD_INT 2
21807: EQUAL
21808: IFFALSE 21825
// bpoints := bpoints * 1.8 ;
21810: LD_ADDR_VAR 0 10
21814: PUSH
21815: LD_VAR 0 10
21819: PUSH
21820: LD_REAL  1.80000000000000E+0000
21823: MUL
21824: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21825: LD_VAR 0 6
21829: PPUSH
21830: CALL_OW 257
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: LD_INT 2
21840: PUSH
21841: LD_INT 3
21843: PUSH
21844: LD_INT 4
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: IN
21853: PUSH
21854: LD_VAR 0 1
21858: PPUSH
21859: LD_INT 51
21861: PPUSH
21862: CALL_OW 321
21866: PUSH
21867: LD_INT 2
21869: EQUAL
21870: AND
21871: IFFALSE 21888
// bpoints := bpoints * 1.2 ;
21873: LD_ADDR_VAR 0 10
21877: PUSH
21878: LD_VAR 0 10
21882: PUSH
21883: LD_REAL  1.20000000000000E+0000
21886: MUL
21887: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21888: LD_VAR 0 6
21892: PPUSH
21893: CALL_OW 257
21897: PUSH
21898: LD_INT 5
21900: PUSH
21901: LD_INT 7
21903: PUSH
21904: LD_INT 9
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: IN
21912: PUSH
21913: LD_VAR 0 1
21917: PPUSH
21918: LD_INT 52
21920: PPUSH
21921: CALL_OW 321
21925: PUSH
21926: LD_INT 2
21928: EQUAL
21929: AND
21930: IFFALSE 21947
// bpoints := bpoints * 1.5 ;
21932: LD_ADDR_VAR 0 10
21936: PUSH
21937: LD_VAR 0 10
21941: PUSH
21942: LD_REAL  1.50000000000000E+0000
21945: MUL
21946: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21947: LD_VAR 0 1
21951: PPUSH
21952: LD_INT 66
21954: PPUSH
21955: CALL_OW 321
21959: PUSH
21960: LD_INT 2
21962: EQUAL
21963: IFFALSE 21980
// bpoints := bpoints * 1.1 ;
21965: LD_ADDR_VAR 0 10
21969: PUSH
21970: LD_VAR 0 10
21974: PUSH
21975: LD_REAL  1.10000000000000E+0000
21978: MUL
21979: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21980: LD_ADDR_VAR 0 10
21984: PUSH
21985: LD_VAR 0 10
21989: PUSH
21990: LD_VAR 0 6
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 259
22002: PUSH
22003: LD_REAL  1.15000000000000E+0000
22006: MUL
22007: MUL
22008: ST_TO_ADDR
// end ; unit_vehicle :
22009: GO 22837
22011: LD_INT 2
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 22825
22019: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22020: LD_VAR 0 6
22024: PPUSH
22025: CALL_OW 264
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 42
22035: PUSH
22036: LD_INT 24
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: IN
22044: IFFALSE 22065
// points := [ 25 , 5 , 3 ] ;
22046: LD_ADDR_VAR 0 9
22050: PUSH
22051: LD_INT 25
22053: PUSH
22054: LD_INT 5
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22065: LD_VAR 0 6
22069: PPUSH
22070: CALL_OW 264
22074: PUSH
22075: LD_INT 4
22077: PUSH
22078: LD_INT 43
22080: PUSH
22081: LD_INT 25
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: IN
22089: IFFALSE 22110
// points := [ 40 , 15 , 5 ] ;
22091: LD_ADDR_VAR 0 9
22095: PUSH
22096: LD_INT 40
22098: PUSH
22099: LD_INT 15
22101: PUSH
22102: LD_INT 5
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22110: LD_VAR 0 6
22114: PPUSH
22115: CALL_OW 264
22119: PUSH
22120: LD_INT 3
22122: PUSH
22123: LD_INT 23
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: IN
22130: IFFALSE 22151
// points := [ 7 , 25 , 8 ] ;
22132: LD_ADDR_VAR 0 9
22136: PUSH
22137: LD_INT 7
22139: PUSH
22140: LD_INT 25
22142: PUSH
22143: LD_INT 8
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22151: LD_VAR 0 6
22155: PPUSH
22156: CALL_OW 264
22160: PUSH
22161: LD_INT 5
22163: PUSH
22164: LD_INT 27
22166: PUSH
22167: LD_INT 44
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: IN
22175: IFFALSE 22196
// points := [ 14 , 50 , 16 ] ;
22177: LD_ADDR_VAR 0 9
22181: PUSH
22182: LD_INT 14
22184: PUSH
22185: LD_INT 50
22187: PUSH
22188: LD_INT 16
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22196: LD_VAR 0 6
22200: PPUSH
22201: CALL_OW 264
22205: PUSH
22206: LD_INT 6
22208: PUSH
22209: LD_INT 46
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: IN
22216: IFFALSE 22237
// points := [ 32 , 120 , 70 ] ;
22218: LD_ADDR_VAR 0 9
22222: PUSH
22223: LD_INT 32
22225: PUSH
22226: LD_INT 120
22228: PUSH
22229: LD_INT 70
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22237: LD_VAR 0 6
22241: PPUSH
22242: CALL_OW 264
22246: PUSH
22247: LD_INT 7
22249: PUSH
22250: LD_INT 28
22252: PUSH
22253: LD_INT 45
22255: PUSH
22256: LD_INT 92
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: IN
22265: IFFALSE 22286
// points := [ 35 , 20 , 45 ] ;
22267: LD_ADDR_VAR 0 9
22271: PUSH
22272: LD_INT 35
22274: PUSH
22275: LD_INT 20
22277: PUSH
22278: LD_INT 45
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22286: LD_VAR 0 6
22290: PPUSH
22291: CALL_OW 264
22295: PUSH
22296: LD_INT 47
22298: PUSH
22299: EMPTY
22300: LIST
22301: IN
22302: IFFALSE 22323
// points := [ 67 , 45 , 75 ] ;
22304: LD_ADDR_VAR 0 9
22308: PUSH
22309: LD_INT 67
22311: PUSH
22312: LD_INT 45
22314: PUSH
22315: LD_INT 75
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22323: LD_VAR 0 6
22327: PPUSH
22328: CALL_OW 264
22332: PUSH
22333: LD_INT 26
22335: PUSH
22336: EMPTY
22337: LIST
22338: IN
22339: IFFALSE 22360
// points := [ 120 , 30 , 80 ] ;
22341: LD_ADDR_VAR 0 9
22345: PUSH
22346: LD_INT 120
22348: PUSH
22349: LD_INT 30
22351: PUSH
22352: LD_INT 80
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22360: LD_VAR 0 6
22364: PPUSH
22365: CALL_OW 264
22369: PUSH
22370: LD_INT 22
22372: PUSH
22373: EMPTY
22374: LIST
22375: IN
22376: IFFALSE 22397
// points := [ 40 , 1 , 1 ] ;
22378: LD_ADDR_VAR 0 9
22382: PUSH
22383: LD_INT 40
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22397: LD_VAR 0 6
22401: PPUSH
22402: CALL_OW 264
22406: PUSH
22407: LD_INT 29
22409: PUSH
22410: EMPTY
22411: LIST
22412: IN
22413: IFFALSE 22434
// points := [ 70 , 200 , 400 ] ;
22415: LD_ADDR_VAR 0 9
22419: PUSH
22420: LD_INT 70
22422: PUSH
22423: LD_INT 200
22425: PUSH
22426: LD_INT 400
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22434: LD_VAR 0 6
22438: PPUSH
22439: CALL_OW 264
22443: PUSH
22444: LD_INT 14
22446: PUSH
22447: LD_INT 53
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: IN
22454: IFFALSE 22475
// points := [ 40 , 10 , 20 ] ;
22456: LD_ADDR_VAR 0 9
22460: PUSH
22461: LD_INT 40
22463: PUSH
22464: LD_INT 10
22466: PUSH
22467: LD_INT 20
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22475: LD_VAR 0 6
22479: PPUSH
22480: CALL_OW 264
22484: PUSH
22485: LD_INT 9
22487: PUSH
22488: EMPTY
22489: LIST
22490: IN
22491: IFFALSE 22512
// points := [ 5 , 70 , 20 ] ;
22493: LD_ADDR_VAR 0 9
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: LD_INT 70
22503: PUSH
22504: LD_INT 20
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22512: LD_VAR 0 6
22516: PPUSH
22517: CALL_OW 264
22521: PUSH
22522: LD_INT 10
22524: PUSH
22525: EMPTY
22526: LIST
22527: IN
22528: IFFALSE 22549
// points := [ 35 , 110 , 70 ] ;
22530: LD_ADDR_VAR 0 9
22534: PUSH
22535: LD_INT 35
22537: PUSH
22538: LD_INT 110
22540: PUSH
22541: LD_INT 70
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22549: LD_VAR 0 6
22553: PPUSH
22554: CALL_OW 265
22558: PUSH
22559: LD_INT 25
22561: EQUAL
22562: IFFALSE 22583
// points := [ 80 , 65 , 100 ] ;
22564: LD_ADDR_VAR 0 9
22568: PUSH
22569: LD_INT 80
22571: PUSH
22572: LD_INT 65
22574: PUSH
22575: LD_INT 100
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22583: LD_VAR 0 6
22587: PPUSH
22588: CALL_OW 263
22592: PUSH
22593: LD_INT 1
22595: EQUAL
22596: IFFALSE 22631
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22598: LD_ADDR_VAR 0 10
22602: PUSH
22603: LD_VAR 0 10
22607: PUSH
22608: LD_VAR 0 6
22612: PPUSH
22613: CALL_OW 311
22617: PPUSH
22618: LD_INT 3
22620: PPUSH
22621: CALL_OW 259
22625: PUSH
22626: LD_INT 4
22628: MUL
22629: MUL
22630: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22631: LD_VAR 0 6
22635: PPUSH
22636: CALL_OW 263
22640: PUSH
22641: LD_INT 2
22643: EQUAL
22644: IFFALSE 22695
// begin j := IsControledBy ( i ) ;
22646: LD_ADDR_VAR 0 7
22650: PUSH
22651: LD_VAR 0 6
22655: PPUSH
22656: CALL_OW 312
22660: ST_TO_ADDR
// if j then
22661: LD_VAR 0 7
22665: IFFALSE 22695
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22667: LD_ADDR_VAR 0 10
22671: PUSH
22672: LD_VAR 0 10
22676: PUSH
22677: LD_VAR 0 7
22681: PPUSH
22682: LD_INT 3
22684: PPUSH
22685: CALL_OW 259
22689: PUSH
22690: LD_INT 3
22692: MUL
22693: MUL
22694: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22695: LD_VAR 0 6
22699: PPUSH
22700: CALL_OW 264
22704: PUSH
22705: LD_INT 5
22707: PUSH
22708: LD_INT 6
22710: PUSH
22711: LD_INT 46
22713: PUSH
22714: LD_INT 44
22716: PUSH
22717: LD_INT 47
22719: PUSH
22720: LD_INT 45
22722: PUSH
22723: LD_INT 28
22725: PUSH
22726: LD_INT 7
22728: PUSH
22729: LD_INT 27
22731: PUSH
22732: LD_INT 29
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: IN
22747: PUSH
22748: LD_VAR 0 1
22752: PPUSH
22753: LD_INT 52
22755: PPUSH
22756: CALL_OW 321
22760: PUSH
22761: LD_INT 2
22763: EQUAL
22764: AND
22765: IFFALSE 22782
// bpoints := bpoints * 1.2 ;
22767: LD_ADDR_VAR 0 10
22771: PUSH
22772: LD_VAR 0 10
22776: PUSH
22777: LD_REAL  1.20000000000000E+0000
22780: MUL
22781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22782: LD_VAR 0 6
22786: PPUSH
22787: CALL_OW 264
22791: PUSH
22792: LD_INT 6
22794: PUSH
22795: LD_INT 46
22797: PUSH
22798: LD_INT 47
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: IN
22806: IFFALSE 22823
// bpoints := bpoints * 1.2 ;
22808: LD_ADDR_VAR 0 10
22812: PUSH
22813: LD_VAR 0 10
22817: PUSH
22818: LD_REAL  1.20000000000000E+0000
22821: MUL
22822: ST_TO_ADDR
// end ; unit_building :
22823: GO 22837
22825: LD_INT 3
22827: DOUBLE
22828: EQUAL
22829: IFTRUE 22833
22831: GO 22836
22833: POP
// ; end ;
22834: GO 22837
22836: POP
// for j = 1 to 3 do
22837: LD_ADDR_VAR 0 7
22841: PUSH
22842: DOUBLE
22843: LD_INT 1
22845: DEC
22846: ST_TO_ADDR
22847: LD_INT 3
22849: PUSH
22850: FOR_TO
22851: IFFALSE 22904
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22853: LD_ADDR_VAR 0 5
22857: PUSH
22858: LD_VAR 0 5
22862: PPUSH
22863: LD_VAR 0 7
22867: PPUSH
22868: LD_VAR 0 5
22872: PUSH
22873: LD_VAR 0 7
22877: ARRAY
22878: PUSH
22879: LD_VAR 0 9
22883: PUSH
22884: LD_VAR 0 7
22888: ARRAY
22889: PUSH
22890: LD_VAR 0 10
22894: MUL
22895: PLUS
22896: PPUSH
22897: CALL_OW 1
22901: ST_TO_ADDR
22902: GO 22850
22904: POP
22905: POP
// end ;
22906: GO 21385
22908: POP
22909: POP
// result := Replace ( result , 4 , tmp ) ;
22910: LD_ADDR_VAR 0 5
22914: PUSH
22915: LD_VAR 0 5
22919: PPUSH
22920: LD_INT 4
22922: PPUSH
22923: LD_VAR 0 8
22927: PPUSH
22928: CALL_OW 1
22932: ST_TO_ADDR
// end ;
22933: LD_VAR 0 5
22937: RET
// export function DangerAtRange ( unit , range ) ; begin
22938: LD_INT 0
22940: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22941: LD_ADDR_VAR 0 3
22945: PUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 255
22955: PPUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 250
22965: PPUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 251
22975: PPUSH
22976: LD_VAR 0 2
22980: PPUSH
22981: CALL 21237 0 4
22985: ST_TO_ADDR
// end ;
22986: LD_VAR 0 3
22990: RET
// export function DangerInArea ( side , area ) ; begin
22991: LD_INT 0
22993: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22994: LD_ADDR_VAR 0 3
22998: PUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_INT 81
23006: PUSH
23007: LD_VAR 0 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PPUSH
23016: CALL_OW 70
23020: ST_TO_ADDR
// end ;
23021: LD_VAR 0 3
23025: RET
// export function IsExtension ( b ) ; begin
23026: LD_INT 0
23028: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23029: LD_ADDR_VAR 0 2
23033: PUSH
23034: LD_VAR 0 1
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 20
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_INT 17
23050: PUSH
23051: LD_INT 24
23053: PUSH
23054: LD_INT 21
23056: PUSH
23057: LD_INT 19
23059: PUSH
23060: LD_INT 16
23062: PUSH
23063: LD_INT 25
23065: PUSH
23066: LD_INT 18
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: IN
23081: ST_TO_ADDR
// end ;
23082: LD_VAR 0 2
23086: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23087: LD_INT 0
23089: PPUSH
23090: PPUSH
23091: PPUSH
// result := [ ] ;
23092: LD_ADDR_VAR 0 4
23096: PUSH
23097: EMPTY
23098: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23099: LD_ADDR_VAR 0 5
23103: PUSH
23104: LD_VAR 0 2
23108: PPUSH
23109: LD_INT 21
23111: PUSH
23112: LD_INT 3
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PPUSH
23119: CALL_OW 70
23123: ST_TO_ADDR
// if not tmp then
23124: LD_VAR 0 5
23128: NOT
23129: IFFALSE 23133
// exit ;
23131: GO 23197
// if checkLink then
23133: LD_VAR 0 3
23137: IFFALSE 23187
// begin for i in tmp do
23139: LD_ADDR_VAR 0 6
23143: PUSH
23144: LD_VAR 0 5
23148: PUSH
23149: FOR_IN
23150: IFFALSE 23185
// if GetBase ( i ) <> base then
23152: LD_VAR 0 6
23156: PPUSH
23157: CALL_OW 274
23161: PUSH
23162: LD_VAR 0 1
23166: NONEQUAL
23167: IFFALSE 23183
// ComLinkToBase ( base , i ) ;
23169: LD_VAR 0 1
23173: PPUSH
23174: LD_VAR 0 6
23178: PPUSH
23179: CALL_OW 169
23183: GO 23149
23185: POP
23186: POP
// end ; result := tmp ;
23187: LD_ADDR_VAR 0 4
23191: PUSH
23192: LD_VAR 0 5
23196: ST_TO_ADDR
// end ;
23197: LD_VAR 0 4
23201: RET
// export function ComComplete ( units , b ) ; var i ; begin
23202: LD_INT 0
23204: PPUSH
23205: PPUSH
// if not units then
23206: LD_VAR 0 1
23210: NOT
23211: IFFALSE 23215
// exit ;
23213: GO 23305
// for i in units do
23215: LD_ADDR_VAR 0 4
23219: PUSH
23220: LD_VAR 0 1
23224: PUSH
23225: FOR_IN
23226: IFFALSE 23303
// if BuildingStatus ( b ) = bs_build then
23228: LD_VAR 0 2
23232: PPUSH
23233: CALL_OW 461
23237: PUSH
23238: LD_INT 1
23240: EQUAL
23241: IFFALSE 23301
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23243: LD_VAR 0 4
23247: PPUSH
23248: LD_STRING h
23250: PUSH
23251: LD_VAR 0 2
23255: PPUSH
23256: CALL_OW 250
23260: PUSH
23261: LD_VAR 0 2
23265: PPUSH
23266: CALL_OW 251
23270: PUSH
23271: LD_VAR 0 2
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: PPUSH
23297: CALL_OW 446
23301: GO 23225
23303: POP
23304: POP
// end ;
23305: LD_VAR 0 3
23309: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23310: LD_INT 0
23312: PPUSH
23313: PPUSH
23314: PPUSH
23315: PPUSH
23316: PPUSH
23317: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23318: LD_VAR 0 1
23322: NOT
23323: PUSH
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL_OW 263
23333: PUSH
23334: LD_INT 2
23336: NONEQUAL
23337: OR
23338: IFFALSE 23342
// exit ;
23340: GO 23658
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23342: LD_ADDR_VAR 0 6
23346: PUSH
23347: LD_INT 22
23349: PUSH
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL_OW 255
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 2
23366: PUSH
23367: LD_INT 30
23369: PUSH
23370: LD_INT 36
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 34
23379: PUSH
23380: LD_INT 31
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PPUSH
23396: CALL_OW 69
23400: ST_TO_ADDR
// if not tmp then
23401: LD_VAR 0 6
23405: NOT
23406: IFFALSE 23410
// exit ;
23408: GO 23658
// result := [ ] ;
23410: LD_ADDR_VAR 0 2
23414: PUSH
23415: EMPTY
23416: ST_TO_ADDR
// for i in tmp do
23417: LD_ADDR_VAR 0 3
23421: PUSH
23422: LD_VAR 0 6
23426: PUSH
23427: FOR_IN
23428: IFFALSE 23499
// begin t := UnitsInside ( i ) ;
23430: LD_ADDR_VAR 0 4
23434: PUSH
23435: LD_VAR 0 3
23439: PPUSH
23440: CALL_OW 313
23444: ST_TO_ADDR
// if t then
23445: LD_VAR 0 4
23449: IFFALSE 23497
// for j in t do
23451: LD_ADDR_VAR 0 7
23455: PUSH
23456: LD_VAR 0 4
23460: PUSH
23461: FOR_IN
23462: IFFALSE 23495
// result := Replace ( result , result + 1 , j ) ;
23464: LD_ADDR_VAR 0 2
23468: PUSH
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_VAR 0 2
23478: PUSH
23479: LD_INT 1
23481: PLUS
23482: PPUSH
23483: LD_VAR 0 7
23487: PPUSH
23488: CALL_OW 1
23492: ST_TO_ADDR
23493: GO 23461
23495: POP
23496: POP
// end ;
23497: GO 23427
23499: POP
23500: POP
// if not result then
23501: LD_VAR 0 2
23505: NOT
23506: IFFALSE 23510
// exit ;
23508: GO 23658
// mech := result [ 1 ] ;
23510: LD_ADDR_VAR 0 5
23514: PUSH
23515: LD_VAR 0 2
23519: PUSH
23520: LD_INT 1
23522: ARRAY
23523: ST_TO_ADDR
// if result > 1 then
23524: LD_VAR 0 2
23528: PUSH
23529: LD_INT 1
23531: GREATER
23532: IFFALSE 23644
// begin for i = 2 to result do
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: DOUBLE
23540: LD_INT 2
23542: DEC
23543: ST_TO_ADDR
23544: LD_VAR 0 2
23548: PUSH
23549: FOR_TO
23550: IFFALSE 23642
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23552: LD_ADDR_VAR 0 4
23556: PUSH
23557: LD_VAR 0 2
23561: PUSH
23562: LD_VAR 0 3
23566: ARRAY
23567: PPUSH
23568: LD_INT 3
23570: PPUSH
23571: CALL_OW 259
23575: PUSH
23576: LD_VAR 0 2
23580: PUSH
23581: LD_VAR 0 3
23585: ARRAY
23586: PPUSH
23587: CALL_OW 432
23591: MINUS
23592: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23593: LD_VAR 0 4
23597: PUSH
23598: LD_VAR 0 5
23602: PPUSH
23603: LD_INT 3
23605: PPUSH
23606: CALL_OW 259
23610: PUSH
23611: LD_VAR 0 5
23615: PPUSH
23616: CALL_OW 432
23620: MINUS
23621: GREATEREQUAL
23622: IFFALSE 23640
// mech := result [ i ] ;
23624: LD_ADDR_VAR 0 5
23628: PUSH
23629: LD_VAR 0 2
23633: PUSH
23634: LD_VAR 0 3
23638: ARRAY
23639: ST_TO_ADDR
// end ;
23640: GO 23549
23642: POP
23643: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23644: LD_VAR 0 1
23648: PPUSH
23649: LD_VAR 0 5
23653: PPUSH
23654: CALL_OW 135
// end ;
23658: LD_VAR 0 2
23662: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23663: LD_INT 0
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
// result := [ ] ;
23678: LD_ADDR_VAR 0 7
23682: PUSH
23683: EMPTY
23684: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23685: LD_VAR 0 1
23689: PPUSH
23690: CALL_OW 266
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: IN
23705: NOT
23706: IFFALSE 23710
// exit ;
23708: GO 25344
// if name then
23710: LD_VAR 0 3
23714: IFFALSE 23730
// SetBName ( base_dep , name ) ;
23716: LD_VAR 0 1
23720: PPUSH
23721: LD_VAR 0 3
23725: PPUSH
23726: CALL_OW 500
// base := GetBase ( base_dep ) ;
23730: LD_ADDR_VAR 0 15
23734: PUSH
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL_OW 274
23744: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23745: LD_ADDR_VAR 0 16
23749: PUSH
23750: LD_VAR 0 1
23754: PPUSH
23755: CALL_OW 255
23759: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23760: LD_ADDR_VAR 0 17
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 248
23774: ST_TO_ADDR
// if sources then
23775: LD_VAR 0 5
23779: IFFALSE 23826
// for i = 1 to 3 do
23781: LD_ADDR_VAR 0 8
23785: PUSH
23786: DOUBLE
23787: LD_INT 1
23789: DEC
23790: ST_TO_ADDR
23791: LD_INT 3
23793: PUSH
23794: FOR_TO
23795: IFFALSE 23824
// AddResourceType ( base , i , sources [ i ] ) ;
23797: LD_VAR 0 15
23801: PPUSH
23802: LD_VAR 0 8
23806: PPUSH
23807: LD_VAR 0 5
23811: PUSH
23812: LD_VAR 0 8
23816: ARRAY
23817: PPUSH
23818: CALL_OW 276
23822: GO 23794
23824: POP
23825: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23826: LD_ADDR_VAR 0 18
23830: PUSH
23831: LD_VAR 0 15
23835: PPUSH
23836: LD_VAR 0 2
23840: PPUSH
23841: LD_INT 1
23843: PPUSH
23844: CALL 23087 0 3
23848: ST_TO_ADDR
// InitHc ;
23849: CALL_OW 19
// InitUc ;
23853: CALL_OW 18
// uc_side := side ;
23857: LD_ADDR_OWVAR 20
23861: PUSH
23862: LD_VAR 0 16
23866: ST_TO_ADDR
// uc_nation := nation ;
23867: LD_ADDR_OWVAR 21
23871: PUSH
23872: LD_VAR 0 17
23876: ST_TO_ADDR
// if buildings then
23877: LD_VAR 0 18
23881: IFFALSE 25203
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23883: LD_ADDR_VAR 0 19
23887: PUSH
23888: LD_VAR 0 18
23892: PPUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 30
23898: PUSH
23899: LD_INT 29
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 30
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 72
23925: ST_TO_ADDR
// if tmp then
23926: LD_VAR 0 19
23930: IFFALSE 23978
// for i in tmp do
23932: LD_ADDR_VAR 0 8
23936: PUSH
23937: LD_VAR 0 19
23941: PUSH
23942: FOR_IN
23943: IFFALSE 23976
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23945: LD_VAR 0 8
23949: PPUSH
23950: CALL_OW 250
23954: PPUSH
23955: LD_VAR 0 8
23959: PPUSH
23960: CALL_OW 251
23964: PPUSH
23965: LD_VAR 0 16
23969: PPUSH
23970: CALL_OW 441
23974: GO 23942
23976: POP
23977: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23978: LD_VAR 0 18
23982: PPUSH
23983: LD_INT 2
23985: PUSH
23986: LD_INT 30
23988: PUSH
23989: LD_INT 32
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 30
23998: PUSH
23999: LD_INT 33
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 72
24015: IFFALSE 24103
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24017: LD_ADDR_VAR 0 8
24021: PUSH
24022: LD_VAR 0 18
24026: PPUSH
24027: LD_INT 2
24029: PUSH
24030: LD_INT 30
24032: PUSH
24033: LD_INT 32
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 30
24042: PUSH
24043: LD_INT 33
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: PPUSH
24055: CALL_OW 72
24059: PUSH
24060: FOR_IN
24061: IFFALSE 24101
// begin if not GetBWeapon ( i ) then
24063: LD_VAR 0 8
24067: PPUSH
24068: CALL_OW 269
24072: NOT
24073: IFFALSE 24099
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24075: LD_VAR 0 8
24079: PPUSH
24080: LD_VAR 0 8
24084: PPUSH
24085: LD_VAR 0 2
24089: PPUSH
24090: CALL 25349 0 2
24094: PPUSH
24095: CALL_OW 431
// end ;
24099: GO 24060
24101: POP
24102: POP
// end ; for i = 1 to personel do
24103: LD_ADDR_VAR 0 8
24107: PUSH
24108: DOUBLE
24109: LD_INT 1
24111: DEC
24112: ST_TO_ADDR
24113: LD_VAR 0 6
24117: PUSH
24118: FOR_TO
24119: IFFALSE 25183
// begin if i > 4 then
24121: LD_VAR 0 8
24125: PUSH
24126: LD_INT 4
24128: GREATER
24129: IFFALSE 24133
// break ;
24131: GO 25183
// case i of 1 :
24133: LD_VAR 0 8
24137: PUSH
24138: LD_INT 1
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24226
24146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24147: LD_ADDR_VAR 0 12
24151: PUSH
24152: LD_VAR 0 18
24156: PPUSH
24157: LD_INT 22
24159: PUSH
24160: LD_VAR 0 16
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 58
24171: PUSH
24172: EMPTY
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 30
24180: PUSH
24181: LD_INT 32
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 30
24190: PUSH
24191: LD_INT 4
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 30
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: PPUSH
24219: CALL_OW 72
24223: ST_TO_ADDR
24224: GO 24448
24226: LD_INT 2
24228: DOUBLE
24229: EQUAL
24230: IFTRUE 24234
24232: GO 24296
24234: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24235: LD_ADDR_VAR 0 12
24239: PUSH
24240: LD_VAR 0 18
24244: PPUSH
24245: LD_INT 22
24247: PUSH
24248: LD_VAR 0 16
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: LD_INT 30
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: CALL_OW 72
24293: ST_TO_ADDR
24294: GO 24448
24296: LD_INT 3
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24366
24304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24305: LD_ADDR_VAR 0 12
24309: PUSH
24310: LD_VAR 0 18
24314: PPUSH
24315: LD_INT 22
24317: PUSH
24318: LD_VAR 0 16
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: LD_INT 30
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 30
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PPUSH
24359: CALL_OW 72
24363: ST_TO_ADDR
24364: GO 24448
24366: LD_INT 4
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24447
24374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24375: LD_ADDR_VAR 0 12
24379: PUSH
24380: LD_VAR 0 18
24384: PPUSH
24385: LD_INT 22
24387: PUSH
24388: LD_VAR 0 16
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 30
24402: PUSH
24403: LD_INT 6
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 30
24412: PUSH
24413: LD_INT 7
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 30
24422: PUSH
24423: LD_INT 8
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PPUSH
24440: CALL_OW 72
24444: ST_TO_ADDR
24445: GO 24448
24447: POP
// if i = 1 then
24448: LD_VAR 0 8
24452: PUSH
24453: LD_INT 1
24455: EQUAL
24456: IFFALSE 24567
// begin tmp := [ ] ;
24458: LD_ADDR_VAR 0 19
24462: PUSH
24463: EMPTY
24464: ST_TO_ADDR
// for j in f do
24465: LD_ADDR_VAR 0 9
24469: PUSH
24470: LD_VAR 0 12
24474: PUSH
24475: FOR_IN
24476: IFFALSE 24549
// if GetBType ( j ) = b_bunker then
24478: LD_VAR 0 9
24482: PPUSH
24483: CALL_OW 266
24487: PUSH
24488: LD_INT 32
24490: EQUAL
24491: IFFALSE 24518
// tmp := Insert ( tmp , 1 , j ) else
24493: LD_ADDR_VAR 0 19
24497: PUSH
24498: LD_VAR 0 19
24502: PPUSH
24503: LD_INT 1
24505: PPUSH
24506: LD_VAR 0 9
24510: PPUSH
24511: CALL_OW 2
24515: ST_TO_ADDR
24516: GO 24547
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24518: LD_ADDR_VAR 0 19
24522: PUSH
24523: LD_VAR 0 19
24527: PPUSH
24528: LD_VAR 0 19
24532: PUSH
24533: LD_INT 1
24535: PLUS
24536: PPUSH
24537: LD_VAR 0 9
24541: PPUSH
24542: CALL_OW 2
24546: ST_TO_ADDR
24547: GO 24475
24549: POP
24550: POP
// if tmp then
24551: LD_VAR 0 19
24555: IFFALSE 24567
// f := tmp ;
24557: LD_ADDR_VAR 0 12
24561: PUSH
24562: LD_VAR 0 19
24566: ST_TO_ADDR
// end ; x := personel [ i ] ;
24567: LD_ADDR_VAR 0 13
24571: PUSH
24572: LD_VAR 0 6
24576: PUSH
24577: LD_VAR 0 8
24581: ARRAY
24582: ST_TO_ADDR
// if x = - 1 then
24583: LD_VAR 0 13
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: EQUAL
24592: IFFALSE 24801
// begin for j in f do
24594: LD_ADDR_VAR 0 9
24598: PUSH
24599: LD_VAR 0 12
24603: PUSH
24604: FOR_IN
24605: IFFALSE 24797
// repeat InitHc ;
24607: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24611: LD_VAR 0 9
24615: PPUSH
24616: CALL_OW 266
24620: PUSH
24621: LD_INT 5
24623: EQUAL
24624: IFFALSE 24694
// begin if UnitsInside ( j ) < 3 then
24626: LD_VAR 0 9
24630: PPUSH
24631: CALL_OW 313
24635: PUSH
24636: LD_INT 3
24638: LESS
24639: IFFALSE 24675
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24641: LD_INT 0
24643: PPUSH
24644: LD_INT 5
24646: PUSH
24647: LD_INT 8
24649: PUSH
24650: LD_INT 9
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: LIST
24657: PUSH
24658: LD_VAR 0 17
24662: ARRAY
24663: PPUSH
24664: LD_VAR 0 4
24668: PPUSH
24669: CALL_OW 380
24673: GO 24692
// PrepareHuman ( false , i , skill ) ;
24675: LD_INT 0
24677: PPUSH
24678: LD_VAR 0 8
24682: PPUSH
24683: LD_VAR 0 4
24687: PPUSH
24688: CALL_OW 380
// end else
24692: GO 24711
// PrepareHuman ( false , i , skill ) ;
24694: LD_INT 0
24696: PPUSH
24697: LD_VAR 0 8
24701: PPUSH
24702: LD_VAR 0 4
24706: PPUSH
24707: CALL_OW 380
// un := CreateHuman ;
24711: LD_ADDR_VAR 0 14
24715: PUSH
24716: CALL_OW 44
24720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24721: LD_ADDR_VAR 0 7
24725: PUSH
24726: LD_VAR 0 7
24730: PPUSH
24731: LD_INT 1
24733: PPUSH
24734: LD_VAR 0 14
24738: PPUSH
24739: CALL_OW 2
24743: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24744: LD_VAR 0 14
24748: PPUSH
24749: LD_VAR 0 9
24753: PPUSH
24754: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24758: LD_VAR 0 9
24762: PPUSH
24763: CALL_OW 313
24767: PUSH
24768: LD_INT 6
24770: EQUAL
24771: PUSH
24772: LD_VAR 0 9
24776: PPUSH
24777: CALL_OW 266
24781: PUSH
24782: LD_INT 32
24784: PUSH
24785: LD_INT 31
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: IN
24792: OR
24793: IFFALSE 24607
24795: GO 24604
24797: POP
24798: POP
// end else
24799: GO 25181
// for j = 1 to x do
24801: LD_ADDR_VAR 0 9
24805: PUSH
24806: DOUBLE
24807: LD_INT 1
24809: DEC
24810: ST_TO_ADDR
24811: LD_VAR 0 13
24815: PUSH
24816: FOR_TO
24817: IFFALSE 25179
// begin InitHc ;
24819: CALL_OW 19
// if not f then
24823: LD_VAR 0 12
24827: NOT
24828: IFFALSE 24917
// begin PrepareHuman ( false , i , skill ) ;
24830: LD_INT 0
24832: PPUSH
24833: LD_VAR 0 8
24837: PPUSH
24838: LD_VAR 0 4
24842: PPUSH
24843: CALL_OW 380
// un := CreateHuman ;
24847: LD_ADDR_VAR 0 14
24851: PUSH
24852: CALL_OW 44
24856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24857: LD_ADDR_VAR 0 7
24861: PUSH
24862: LD_VAR 0 7
24866: PPUSH
24867: LD_INT 1
24869: PPUSH
24870: LD_VAR 0 14
24874: PPUSH
24875: CALL_OW 2
24879: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24880: LD_VAR 0 14
24884: PPUSH
24885: LD_VAR 0 1
24889: PPUSH
24890: CALL_OW 250
24894: PPUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 251
24904: PPUSH
24905: LD_INT 10
24907: PPUSH
24908: LD_INT 0
24910: PPUSH
24911: CALL_OW 50
// continue ;
24915: GO 24816
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24917: LD_VAR 0 12
24921: PUSH
24922: LD_INT 1
24924: ARRAY
24925: PPUSH
24926: CALL_OW 313
24930: PUSH
24931: LD_VAR 0 12
24935: PUSH
24936: LD_INT 1
24938: ARRAY
24939: PPUSH
24940: CALL_OW 266
24944: PUSH
24945: LD_INT 32
24947: PUSH
24948: LD_INT 31
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: IN
24955: AND
24956: PUSH
24957: LD_VAR 0 12
24961: PUSH
24962: LD_INT 1
24964: ARRAY
24965: PPUSH
24966: CALL_OW 313
24970: PUSH
24971: LD_INT 6
24973: EQUAL
24974: OR
24975: IFFALSE 24995
// f := Delete ( f , 1 ) ;
24977: LD_ADDR_VAR 0 12
24981: PUSH
24982: LD_VAR 0 12
24986: PPUSH
24987: LD_INT 1
24989: PPUSH
24990: CALL_OW 3
24994: ST_TO_ADDR
// if not f then
24995: LD_VAR 0 12
24999: NOT
25000: IFFALSE 25018
// begin x := x + 2 ;
25002: LD_ADDR_VAR 0 13
25006: PUSH
25007: LD_VAR 0 13
25011: PUSH
25012: LD_INT 2
25014: PLUS
25015: ST_TO_ADDR
// continue ;
25016: GO 24816
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25018: LD_VAR 0 12
25022: PUSH
25023: LD_INT 1
25025: ARRAY
25026: PPUSH
25027: CALL_OW 266
25031: PUSH
25032: LD_INT 5
25034: EQUAL
25035: IFFALSE 25109
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25037: LD_VAR 0 12
25041: PUSH
25042: LD_INT 1
25044: ARRAY
25045: PPUSH
25046: CALL_OW 313
25050: PUSH
25051: LD_INT 3
25053: LESS
25054: IFFALSE 25090
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25056: LD_INT 0
25058: PPUSH
25059: LD_INT 5
25061: PUSH
25062: LD_INT 8
25064: PUSH
25065: LD_INT 9
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: LIST
25072: PUSH
25073: LD_VAR 0 17
25077: ARRAY
25078: PPUSH
25079: LD_VAR 0 4
25083: PPUSH
25084: CALL_OW 380
25088: GO 25107
// PrepareHuman ( false , i , skill ) ;
25090: LD_INT 0
25092: PPUSH
25093: LD_VAR 0 8
25097: PPUSH
25098: LD_VAR 0 4
25102: PPUSH
25103: CALL_OW 380
// end else
25107: GO 25126
// PrepareHuman ( false , i , skill ) ;
25109: LD_INT 0
25111: PPUSH
25112: LD_VAR 0 8
25116: PPUSH
25117: LD_VAR 0 4
25121: PPUSH
25122: CALL_OW 380
// un := CreateHuman ;
25126: LD_ADDR_VAR 0 14
25130: PUSH
25131: CALL_OW 44
25135: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25136: LD_ADDR_VAR 0 7
25140: PUSH
25141: LD_VAR 0 7
25145: PPUSH
25146: LD_INT 1
25148: PPUSH
25149: LD_VAR 0 14
25153: PPUSH
25154: CALL_OW 2
25158: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25159: LD_VAR 0 14
25163: PPUSH
25164: LD_VAR 0 12
25168: PUSH
25169: LD_INT 1
25171: ARRAY
25172: PPUSH
25173: CALL_OW 52
// end ;
25177: GO 24816
25179: POP
25180: POP
// end ;
25181: GO 24118
25183: POP
25184: POP
// result := result ^ buildings ;
25185: LD_ADDR_VAR 0 7
25189: PUSH
25190: LD_VAR 0 7
25194: PUSH
25195: LD_VAR 0 18
25199: ADD
25200: ST_TO_ADDR
// end else
25201: GO 25344
// begin for i = 1 to personel do
25203: LD_ADDR_VAR 0 8
25207: PUSH
25208: DOUBLE
25209: LD_INT 1
25211: DEC
25212: ST_TO_ADDR
25213: LD_VAR 0 6
25217: PUSH
25218: FOR_TO
25219: IFFALSE 25342
// begin if i > 4 then
25221: LD_VAR 0 8
25225: PUSH
25226: LD_INT 4
25228: GREATER
25229: IFFALSE 25233
// break ;
25231: GO 25342
// x := personel [ i ] ;
25233: LD_ADDR_VAR 0 13
25237: PUSH
25238: LD_VAR 0 6
25242: PUSH
25243: LD_VAR 0 8
25247: ARRAY
25248: ST_TO_ADDR
// if x = - 1 then
25249: LD_VAR 0 13
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: EQUAL
25258: IFFALSE 25262
// continue ;
25260: GO 25218
// PrepareHuman ( false , i , skill ) ;
25262: LD_INT 0
25264: PPUSH
25265: LD_VAR 0 8
25269: PPUSH
25270: LD_VAR 0 4
25274: PPUSH
25275: CALL_OW 380
// un := CreateHuman ;
25279: LD_ADDR_VAR 0 14
25283: PUSH
25284: CALL_OW 44
25288: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25289: LD_VAR 0 14
25293: PPUSH
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 250
25303: PPUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 251
25313: PPUSH
25314: LD_INT 10
25316: PPUSH
25317: LD_INT 0
25319: PPUSH
25320: CALL_OW 50
// result := result ^ un ;
25324: LD_ADDR_VAR 0 7
25328: PUSH
25329: LD_VAR 0 7
25333: PUSH
25334: LD_VAR 0 14
25338: ADD
25339: ST_TO_ADDR
// end ;
25340: GO 25218
25342: POP
25343: POP
// end ; end ;
25344: LD_VAR 0 7
25348: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
// result := false ;
25367: LD_ADDR_VAR 0 3
25371: PUSH
25372: LD_INT 0
25374: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25375: LD_VAR 0 1
25379: NOT
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 266
25390: PUSH
25391: LD_INT 32
25393: PUSH
25394: LD_INT 33
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: IN
25401: NOT
25402: OR
25403: IFFALSE 25407
// exit ;
25405: GO 26516
// nat := GetNation ( tower ) ;
25407: LD_ADDR_VAR 0 12
25411: PUSH
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 248
25421: ST_TO_ADDR
// side := GetSide ( tower ) ;
25422: LD_ADDR_VAR 0 16
25426: PUSH
25427: LD_VAR 0 1
25431: PPUSH
25432: CALL_OW 255
25436: ST_TO_ADDR
// x := GetX ( tower ) ;
25437: LD_ADDR_VAR 0 10
25441: PUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 250
25451: ST_TO_ADDR
// y := GetY ( tower ) ;
25452: LD_ADDR_VAR 0 11
25456: PUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 251
25466: ST_TO_ADDR
// if not x or not y then
25467: LD_VAR 0 10
25471: NOT
25472: PUSH
25473: LD_VAR 0 11
25477: NOT
25478: OR
25479: IFFALSE 25483
// exit ;
25481: GO 26516
// weapon := 0 ;
25483: LD_ADDR_VAR 0 18
25487: PUSH
25488: LD_INT 0
25490: ST_TO_ADDR
// fac_list := [ ] ;
25491: LD_ADDR_VAR 0 17
25495: PUSH
25496: EMPTY
25497: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25498: LD_ADDR_VAR 0 6
25502: PUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_VAR 0 2
25517: PPUSH
25518: LD_INT 0
25520: PPUSH
25521: CALL 23087 0 3
25525: PPUSH
25526: LD_INT 30
25528: PUSH
25529: LD_INT 3
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 72
25540: ST_TO_ADDR
// if not factories then
25541: LD_VAR 0 6
25545: NOT
25546: IFFALSE 25550
// exit ;
25548: GO 26516
// for i in factories do
25550: LD_ADDR_VAR 0 8
25554: PUSH
25555: LD_VAR 0 6
25559: PUSH
25560: FOR_IN
25561: IFFALSE 25586
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25563: LD_ADDR_VAR 0 17
25567: PUSH
25568: LD_VAR 0 17
25572: PUSH
25573: LD_VAR 0 8
25577: PPUSH
25578: CALL_OW 478
25582: UNION
25583: ST_TO_ADDR
25584: GO 25560
25586: POP
25587: POP
// if not fac_list then
25588: LD_VAR 0 17
25592: NOT
25593: IFFALSE 25597
// exit ;
25595: GO 26516
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25597: LD_ADDR_VAR 0 5
25601: PUSH
25602: LD_INT 4
25604: PUSH
25605: LD_INT 5
25607: PUSH
25608: LD_INT 9
25610: PUSH
25611: LD_INT 10
25613: PUSH
25614: LD_INT 6
25616: PUSH
25617: LD_INT 7
25619: PUSH
25620: LD_INT 11
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 27
25634: PUSH
25635: LD_INT 28
25637: PUSH
25638: LD_INT 26
25640: PUSH
25641: LD_INT 30
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 43
25652: PUSH
25653: LD_INT 44
25655: PUSH
25656: LD_INT 46
25658: PUSH
25659: LD_INT 45
25661: PUSH
25662: LD_INT 47
25664: PUSH
25665: LD_INT 49
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: PUSH
25681: LD_VAR 0 12
25685: ARRAY
25686: ST_TO_ADDR
// list := list isect fac_list ;
25687: LD_ADDR_VAR 0 5
25691: PUSH
25692: LD_VAR 0 5
25696: PUSH
25697: LD_VAR 0 17
25701: ISECT
25702: ST_TO_ADDR
// if not list then
25703: LD_VAR 0 5
25707: NOT
25708: IFFALSE 25712
// exit ;
25710: GO 26516
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25712: LD_VAR 0 12
25716: PUSH
25717: LD_INT 3
25719: EQUAL
25720: PUSH
25721: LD_INT 49
25723: PUSH
25724: LD_VAR 0 5
25728: IN
25729: AND
25730: PUSH
25731: LD_INT 31
25733: PPUSH
25734: LD_VAR 0 16
25738: PPUSH
25739: CALL_OW 321
25743: PUSH
25744: LD_INT 2
25746: EQUAL
25747: AND
25748: IFFALSE 25808
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25750: LD_INT 22
25752: PUSH
25753: LD_VAR 0 16
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 35
25764: PUSH
25765: LD_INT 49
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 91
25774: PUSH
25775: LD_VAR 0 1
25779: PUSH
25780: LD_INT 10
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: PPUSH
25793: CALL_OW 69
25797: NOT
25798: IFFALSE 25808
// weapon := ru_time_lapser ;
25800: LD_ADDR_VAR 0 18
25804: PUSH
25805: LD_INT 49
25807: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25808: LD_VAR 0 12
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: IN
25823: PUSH
25824: LD_INT 11
25826: PUSH
25827: LD_VAR 0 5
25831: IN
25832: PUSH
25833: LD_INT 30
25835: PUSH
25836: LD_VAR 0 5
25840: IN
25841: OR
25842: AND
25843: PUSH
25844: LD_INT 6
25846: PPUSH
25847: LD_VAR 0 16
25851: PPUSH
25852: CALL_OW 321
25856: PUSH
25857: LD_INT 2
25859: EQUAL
25860: AND
25861: IFFALSE 26026
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25863: LD_INT 22
25865: PUSH
25866: LD_VAR 0 16
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 2
25877: PUSH
25878: LD_INT 35
25880: PUSH
25881: LD_INT 11
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 35
25890: PUSH
25891: LD_INT 30
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 91
25905: PUSH
25906: LD_VAR 0 1
25910: PUSH
25911: LD_INT 18
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: PPUSH
25924: CALL_OW 69
25928: NOT
25929: PUSH
25930: LD_INT 22
25932: PUSH
25933: LD_VAR 0 16
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: LD_INT 30
25947: PUSH
25948: LD_INT 32
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 30
25957: PUSH
25958: LD_INT 33
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 91
25972: PUSH
25973: LD_VAR 0 1
25977: PUSH
25978: LD_INT 12
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: PPUSH
25994: CALL_OW 69
25998: PUSH
25999: LD_INT 2
26001: GREATER
26002: AND
26003: IFFALSE 26026
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26005: LD_ADDR_VAR 0 18
26009: PUSH
26010: LD_INT 11
26012: PUSH
26013: LD_INT 30
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_VAR 0 12
26024: ARRAY
26025: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26026: LD_VAR 0 18
26030: NOT
26031: PUSH
26032: LD_INT 40
26034: PPUSH
26035: LD_VAR 0 16
26039: PPUSH
26040: CALL_OW 321
26044: PUSH
26045: LD_INT 2
26047: EQUAL
26048: AND
26049: PUSH
26050: LD_INT 7
26052: PUSH
26053: LD_VAR 0 5
26057: IN
26058: PUSH
26059: LD_INT 28
26061: PUSH
26062: LD_VAR 0 5
26066: IN
26067: OR
26068: PUSH
26069: LD_INT 45
26071: PUSH
26072: LD_VAR 0 5
26076: IN
26077: OR
26078: AND
26079: IFFALSE 26333
// begin hex := GetHexInfo ( x , y ) ;
26081: LD_ADDR_VAR 0 4
26085: PUSH
26086: LD_VAR 0 10
26090: PPUSH
26091: LD_VAR 0 11
26095: PPUSH
26096: CALL_OW 546
26100: ST_TO_ADDR
// if hex [ 1 ] then
26101: LD_VAR 0 4
26105: PUSH
26106: LD_INT 1
26108: ARRAY
26109: IFFALSE 26113
// exit ;
26111: GO 26516
// height := hex [ 2 ] ;
26113: LD_ADDR_VAR 0 15
26117: PUSH
26118: LD_VAR 0 4
26122: PUSH
26123: LD_INT 2
26125: ARRAY
26126: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26127: LD_ADDR_VAR 0 14
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 3
26140: PUSH
26141: LD_INT 5
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// for i in tmp do
26150: LD_ADDR_VAR 0 8
26154: PUSH
26155: LD_VAR 0 14
26159: PUSH
26160: FOR_IN
26161: IFFALSE 26331
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26163: LD_ADDR_VAR 0 9
26167: PUSH
26168: LD_VAR 0 10
26172: PPUSH
26173: LD_VAR 0 8
26177: PPUSH
26178: LD_INT 5
26180: PPUSH
26181: CALL_OW 272
26185: PUSH
26186: LD_VAR 0 11
26190: PPUSH
26191: LD_VAR 0 8
26195: PPUSH
26196: LD_INT 5
26198: PPUSH
26199: CALL_OW 273
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26208: LD_VAR 0 9
26212: PUSH
26213: LD_INT 1
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 9
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: PPUSH
26226: CALL_OW 488
26230: IFFALSE 26329
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26232: LD_ADDR_VAR 0 4
26236: PUSH
26237: LD_VAR 0 9
26241: PUSH
26242: LD_INT 1
26244: ARRAY
26245: PPUSH
26246: LD_VAR 0 9
26250: PUSH
26251: LD_INT 2
26253: ARRAY
26254: PPUSH
26255: CALL_OW 546
26259: ST_TO_ADDR
// if hex [ 1 ] then
26260: LD_VAR 0 4
26264: PUSH
26265: LD_INT 1
26267: ARRAY
26268: IFFALSE 26272
// continue ;
26270: GO 26160
// h := hex [ 2 ] ;
26272: LD_ADDR_VAR 0 13
26276: PUSH
26277: LD_VAR 0 4
26281: PUSH
26282: LD_INT 2
26284: ARRAY
26285: ST_TO_ADDR
// if h + 7 < height then
26286: LD_VAR 0 13
26290: PUSH
26291: LD_INT 7
26293: PLUS
26294: PUSH
26295: LD_VAR 0 15
26299: LESS
26300: IFFALSE 26329
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26302: LD_ADDR_VAR 0 18
26306: PUSH
26307: LD_INT 7
26309: PUSH
26310: LD_INT 28
26312: PUSH
26313: LD_INT 45
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: PUSH
26321: LD_VAR 0 12
26325: ARRAY
26326: ST_TO_ADDR
// break ;
26327: GO 26331
// end ; end ; end ;
26329: GO 26160
26331: POP
26332: POP
// end ; if not weapon then
26333: LD_VAR 0 18
26337: NOT
26338: IFFALSE 26398
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26340: LD_ADDR_VAR 0 5
26344: PUSH
26345: LD_VAR 0 5
26349: PUSH
26350: LD_INT 11
26352: PUSH
26353: LD_INT 30
26355: PUSH
26356: LD_INT 49
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: DIFF
26364: ST_TO_ADDR
// if not list then
26365: LD_VAR 0 5
26369: NOT
26370: IFFALSE 26374
// exit ;
26372: GO 26516
// weapon := list [ rand ( 1 , list ) ] ;
26374: LD_ADDR_VAR 0 18
26378: PUSH
26379: LD_VAR 0 5
26383: PUSH
26384: LD_INT 1
26386: PPUSH
26387: LD_VAR 0 5
26391: PPUSH
26392: CALL_OW 12
26396: ARRAY
26397: ST_TO_ADDR
// end ; if weapon then
26398: LD_VAR 0 18
26402: IFFALSE 26516
// begin tmp := CostOfWeapon ( weapon ) ;
26404: LD_ADDR_VAR 0 14
26408: PUSH
26409: LD_VAR 0 18
26413: PPUSH
26414: CALL_OW 451
26418: ST_TO_ADDR
// j := GetBase ( tower ) ;
26419: LD_ADDR_VAR 0 9
26423: PUSH
26424: LD_VAR 0 1
26428: PPUSH
26429: CALL_OW 274
26433: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26434: LD_VAR 0 9
26438: PPUSH
26439: LD_INT 1
26441: PPUSH
26442: CALL_OW 275
26446: PUSH
26447: LD_VAR 0 14
26451: PUSH
26452: LD_INT 1
26454: ARRAY
26455: GREATEREQUAL
26456: PUSH
26457: LD_VAR 0 9
26461: PPUSH
26462: LD_INT 2
26464: PPUSH
26465: CALL_OW 275
26469: PUSH
26470: LD_VAR 0 14
26474: PUSH
26475: LD_INT 2
26477: ARRAY
26478: GREATEREQUAL
26479: AND
26480: PUSH
26481: LD_VAR 0 9
26485: PPUSH
26486: LD_INT 3
26488: PPUSH
26489: CALL_OW 275
26493: PUSH
26494: LD_VAR 0 14
26498: PUSH
26499: LD_INT 3
26501: ARRAY
26502: GREATEREQUAL
26503: AND
26504: IFFALSE 26516
// result := weapon ;
26506: LD_ADDR_VAR 0 3
26510: PUSH
26511: LD_VAR 0 18
26515: ST_TO_ADDR
// end ; end ;
26516: LD_VAR 0 3
26520: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26521: LD_INT 0
26523: PPUSH
26524: PPUSH
// result := true ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_INT 1
26532: ST_TO_ADDR
// if array1 = array2 then
26533: LD_VAR 0 1
26537: PUSH
26538: LD_VAR 0 2
26542: EQUAL
26543: IFFALSE 26603
// begin for i = 1 to array1 do
26545: LD_ADDR_VAR 0 4
26549: PUSH
26550: DOUBLE
26551: LD_INT 1
26553: DEC
26554: ST_TO_ADDR
26555: LD_VAR 0 1
26559: PUSH
26560: FOR_TO
26561: IFFALSE 26599
// if array1 [ i ] <> array2 [ i ] then
26563: LD_VAR 0 1
26567: PUSH
26568: LD_VAR 0 4
26572: ARRAY
26573: PUSH
26574: LD_VAR 0 2
26578: PUSH
26579: LD_VAR 0 4
26583: ARRAY
26584: NONEQUAL
26585: IFFALSE 26597
// begin result := false ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 0
26594: ST_TO_ADDR
// break ;
26595: GO 26599
// end ;
26597: GO 26560
26599: POP
26600: POP
// end else
26601: GO 26611
// result := false ;
26603: LD_ADDR_VAR 0 3
26607: PUSH
26608: LD_INT 0
26610: ST_TO_ADDR
// end ;
26611: LD_VAR 0 3
26615: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26616: LD_INT 0
26618: PPUSH
26619: PPUSH
// if not array1 or not array2 then
26620: LD_VAR 0 1
26624: NOT
26625: PUSH
26626: LD_VAR 0 2
26630: NOT
26631: OR
26632: IFFALSE 26636
// exit ;
26634: GO 26700
// result := true ;
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 1
26643: ST_TO_ADDR
// for i = 1 to array1 do
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: DOUBLE
26650: LD_INT 1
26652: DEC
26653: ST_TO_ADDR
26654: LD_VAR 0 1
26658: PUSH
26659: FOR_TO
26660: IFFALSE 26698
// if array1 [ i ] <> array2 [ i ] then
26662: LD_VAR 0 1
26666: PUSH
26667: LD_VAR 0 4
26671: ARRAY
26672: PUSH
26673: LD_VAR 0 2
26677: PUSH
26678: LD_VAR 0 4
26682: ARRAY
26683: NONEQUAL
26684: IFFALSE 26696
// begin result := false ;
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 0
26693: ST_TO_ADDR
// break ;
26694: GO 26698
// end ;
26696: GO 26659
26698: POP
26699: POP
// end ;
26700: LD_VAR 0 3
26704: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26705: LD_INT 0
26707: PPUSH
26708: PPUSH
26709: PPUSH
// pom := GetBase ( fac ) ;
26710: LD_ADDR_VAR 0 5
26714: PUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 274
26724: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26725: LD_ADDR_VAR 0 4
26729: PUSH
26730: LD_VAR 0 2
26734: PUSH
26735: LD_INT 1
26737: ARRAY
26738: PPUSH
26739: LD_VAR 0 2
26743: PUSH
26744: LD_INT 2
26746: ARRAY
26747: PPUSH
26748: LD_VAR 0 2
26752: PUSH
26753: LD_INT 3
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 2
26761: PUSH
26762: LD_INT 4
26764: ARRAY
26765: PPUSH
26766: CALL_OW 449
26770: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26771: LD_ADDR_VAR 0 3
26775: PUSH
26776: LD_VAR 0 5
26780: PPUSH
26781: LD_INT 1
26783: PPUSH
26784: CALL_OW 275
26788: PUSH
26789: LD_VAR 0 4
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: GREATEREQUAL
26798: PUSH
26799: LD_VAR 0 5
26803: PPUSH
26804: LD_INT 2
26806: PPUSH
26807: CALL_OW 275
26811: PUSH
26812: LD_VAR 0 4
26816: PUSH
26817: LD_INT 2
26819: ARRAY
26820: GREATEREQUAL
26821: AND
26822: PUSH
26823: LD_VAR 0 5
26827: PPUSH
26828: LD_INT 3
26830: PPUSH
26831: CALL_OW 275
26835: PUSH
26836: LD_VAR 0 4
26840: PUSH
26841: LD_INT 3
26843: ARRAY
26844: GREATEREQUAL
26845: AND
26846: ST_TO_ADDR
// end ;
26847: LD_VAR 0 3
26851: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26852: LD_INT 0
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
// pom := GetBase ( building ) ;
26858: LD_ADDR_VAR 0 3
26862: PUSH
26863: LD_VAR 0 1
26867: PPUSH
26868: CALL_OW 274
26872: ST_TO_ADDR
// if not pom then
26873: LD_VAR 0 3
26877: NOT
26878: IFFALSE 26882
// exit ;
26880: GO 27052
// btype := GetBType ( building ) ;
26882: LD_ADDR_VAR 0 5
26886: PUSH
26887: LD_VAR 0 1
26891: PPUSH
26892: CALL_OW 266
26896: ST_TO_ADDR
// if btype = b_armoury then
26897: LD_VAR 0 5
26901: PUSH
26902: LD_INT 4
26904: EQUAL
26905: IFFALSE 26915
// btype := b_barracks ;
26907: LD_ADDR_VAR 0 5
26911: PUSH
26912: LD_INT 5
26914: ST_TO_ADDR
// if btype = b_depot then
26915: LD_VAR 0 5
26919: PUSH
26920: LD_INT 0
26922: EQUAL
26923: IFFALSE 26933
// btype := b_warehouse ;
26925: LD_ADDR_VAR 0 5
26929: PUSH
26930: LD_INT 1
26932: ST_TO_ADDR
// if btype = b_workshop then
26933: LD_VAR 0 5
26937: PUSH
26938: LD_INT 2
26940: EQUAL
26941: IFFALSE 26951
// btype := b_factory ;
26943: LD_ADDR_VAR 0 5
26947: PUSH
26948: LD_INT 3
26950: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26951: LD_ADDR_VAR 0 4
26955: PUSH
26956: LD_VAR 0 5
26960: PPUSH
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 248
26970: PPUSH
26971: CALL_OW 450
26975: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26976: LD_ADDR_VAR 0 2
26980: PUSH
26981: LD_VAR 0 3
26985: PPUSH
26986: LD_INT 1
26988: PPUSH
26989: CALL_OW 275
26993: PUSH
26994: LD_VAR 0 4
26998: PUSH
26999: LD_INT 1
27001: ARRAY
27002: GREATEREQUAL
27003: PUSH
27004: LD_VAR 0 3
27008: PPUSH
27009: LD_INT 2
27011: PPUSH
27012: CALL_OW 275
27016: PUSH
27017: LD_VAR 0 4
27021: PUSH
27022: LD_INT 2
27024: ARRAY
27025: GREATEREQUAL
27026: AND
27027: PUSH
27028: LD_VAR 0 3
27032: PPUSH
27033: LD_INT 3
27035: PPUSH
27036: CALL_OW 275
27040: PUSH
27041: LD_VAR 0 4
27045: PUSH
27046: LD_INT 3
27048: ARRAY
27049: GREATEREQUAL
27050: AND
27051: ST_TO_ADDR
// end ;
27052: LD_VAR 0 2
27056: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
27061: PPUSH
// pom := GetBase ( building ) ;
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 274
27076: ST_TO_ADDR
// if not pom then
27077: LD_VAR 0 4
27081: NOT
27082: IFFALSE 27086
// exit ;
27084: GO 27187
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27086: LD_ADDR_VAR 0 5
27090: PUSH
27091: LD_VAR 0 2
27095: PPUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 248
27105: PPUSH
27106: CALL_OW 450
27110: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_VAR 0 4
27120: PPUSH
27121: LD_INT 1
27123: PPUSH
27124: CALL_OW 275
27128: PUSH
27129: LD_VAR 0 5
27133: PUSH
27134: LD_INT 1
27136: ARRAY
27137: GREATEREQUAL
27138: PUSH
27139: LD_VAR 0 4
27143: PPUSH
27144: LD_INT 2
27146: PPUSH
27147: CALL_OW 275
27151: PUSH
27152: LD_VAR 0 5
27156: PUSH
27157: LD_INT 2
27159: ARRAY
27160: GREATEREQUAL
27161: AND
27162: PUSH
27163: LD_VAR 0 4
27167: PPUSH
27168: LD_INT 3
27170: PPUSH
27171: CALL_OW 275
27175: PUSH
27176: LD_VAR 0 5
27180: PUSH
27181: LD_INT 3
27183: ARRAY
27184: GREATEREQUAL
27185: AND
27186: ST_TO_ADDR
// end ;
27187: LD_VAR 0 3
27191: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27192: LD_INT 0
27194: PPUSH
27195: PPUSH
27196: PPUSH
27197: PPUSH
27198: PPUSH
27199: PPUSH
27200: PPUSH
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
// result := false ;
27205: LD_ADDR_VAR 0 8
27209: PUSH
27210: LD_INT 0
27212: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27213: LD_VAR 0 5
27217: NOT
27218: PUSH
27219: LD_VAR 0 1
27223: NOT
27224: OR
27225: PUSH
27226: LD_VAR 0 2
27230: NOT
27231: OR
27232: PUSH
27233: LD_VAR 0 3
27237: NOT
27238: OR
27239: IFFALSE 27243
// exit ;
27241: GO 28057
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27243: LD_ADDR_VAR 0 14
27247: PUSH
27248: LD_VAR 0 1
27252: PPUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: LD_VAR 0 3
27262: PPUSH
27263: LD_VAR 0 4
27267: PPUSH
27268: LD_VAR 0 5
27272: PUSH
27273: LD_INT 1
27275: ARRAY
27276: PPUSH
27277: CALL_OW 248
27281: PPUSH
27282: LD_INT 0
27284: PPUSH
27285: CALL 29290 0 6
27289: ST_TO_ADDR
// if not hexes then
27290: LD_VAR 0 14
27294: NOT
27295: IFFALSE 27299
// exit ;
27297: GO 28057
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27299: LD_ADDR_VAR 0 17
27303: PUSH
27304: LD_VAR 0 5
27308: PPUSH
27309: LD_INT 22
27311: PUSH
27312: LD_VAR 0 13
27316: PPUSH
27317: CALL_OW 255
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: LD_INT 30
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 30
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PPUSH
27358: CALL_OW 72
27362: ST_TO_ADDR
// for i = 1 to hexes do
27363: LD_ADDR_VAR 0 9
27367: PUSH
27368: DOUBLE
27369: LD_INT 1
27371: DEC
27372: ST_TO_ADDR
27373: LD_VAR 0 14
27377: PUSH
27378: FOR_TO
27379: IFFALSE 28055
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27381: LD_ADDR_VAR 0 13
27385: PUSH
27386: LD_VAR 0 14
27390: PUSH
27391: LD_VAR 0 9
27395: ARRAY
27396: PUSH
27397: LD_INT 1
27399: ARRAY
27400: PPUSH
27401: LD_VAR 0 14
27405: PUSH
27406: LD_VAR 0 9
27410: ARRAY
27411: PUSH
27412: LD_INT 2
27414: ARRAY
27415: PPUSH
27416: CALL_OW 428
27420: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27421: LD_VAR 0 14
27425: PUSH
27426: LD_VAR 0 9
27430: ARRAY
27431: PUSH
27432: LD_INT 1
27434: ARRAY
27435: PPUSH
27436: LD_VAR 0 14
27440: PUSH
27441: LD_VAR 0 9
27445: ARRAY
27446: PUSH
27447: LD_INT 2
27449: ARRAY
27450: PPUSH
27451: CALL_OW 351
27455: PUSH
27456: LD_VAR 0 14
27460: PUSH
27461: LD_VAR 0 9
27465: ARRAY
27466: PUSH
27467: LD_INT 1
27469: ARRAY
27470: PPUSH
27471: LD_VAR 0 14
27475: PUSH
27476: LD_VAR 0 9
27480: ARRAY
27481: PUSH
27482: LD_INT 2
27484: ARRAY
27485: PPUSH
27486: CALL_OW 488
27490: NOT
27491: OR
27492: PUSH
27493: LD_VAR 0 13
27497: PPUSH
27498: CALL_OW 247
27502: PUSH
27503: LD_INT 3
27505: EQUAL
27506: OR
27507: IFFALSE 27513
// exit ;
27509: POP
27510: POP
27511: GO 28057
// if not tmp then
27513: LD_VAR 0 13
27517: NOT
27518: IFFALSE 27522
// continue ;
27520: GO 27378
// result := true ;
27522: LD_ADDR_VAR 0 8
27526: PUSH
27527: LD_INT 1
27529: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27530: LD_VAR 0 6
27534: PUSH
27535: LD_VAR 0 13
27539: PPUSH
27540: CALL_OW 247
27544: PUSH
27545: LD_INT 2
27547: EQUAL
27548: AND
27549: PUSH
27550: LD_VAR 0 13
27554: PPUSH
27555: CALL_OW 263
27559: PUSH
27560: LD_INT 1
27562: EQUAL
27563: AND
27564: IFFALSE 27728
// begin if IsDrivenBy ( tmp ) then
27566: LD_VAR 0 13
27570: PPUSH
27571: CALL_OW 311
27575: IFFALSE 27579
// continue ;
27577: GO 27378
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27579: LD_VAR 0 6
27583: PPUSH
27584: LD_INT 3
27586: PUSH
27587: LD_INT 60
27589: PUSH
27590: EMPTY
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 3
27599: PUSH
27600: LD_INT 55
27602: PUSH
27603: EMPTY
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PPUSH
27614: CALL_OW 72
27618: IFFALSE 27726
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27620: LD_ADDR_VAR 0 18
27624: PUSH
27625: LD_VAR 0 6
27629: PPUSH
27630: LD_INT 3
27632: PUSH
27633: LD_INT 60
27635: PUSH
27636: EMPTY
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 3
27645: PUSH
27646: LD_INT 55
27648: PUSH
27649: EMPTY
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL_OW 72
27664: PUSH
27665: LD_INT 1
27667: ARRAY
27668: ST_TO_ADDR
// if IsInUnit ( driver ) then
27669: LD_VAR 0 18
27673: PPUSH
27674: CALL_OW 310
27678: IFFALSE 27689
// ComExit ( driver ) ;
27680: LD_VAR 0 18
27684: PPUSH
27685: CALL 52978 0 1
// AddComEnterUnit ( driver , tmp ) ;
27689: LD_VAR 0 18
27693: PPUSH
27694: LD_VAR 0 13
27698: PPUSH
27699: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27703: LD_VAR 0 18
27707: PPUSH
27708: LD_VAR 0 7
27712: PPUSH
27713: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27717: LD_VAR 0 18
27721: PPUSH
27722: CALL_OW 181
// end ; continue ;
27726: GO 27378
// end ; if not cleaners or not tmp in cleaners then
27728: LD_VAR 0 6
27732: NOT
27733: PUSH
27734: LD_VAR 0 13
27738: PUSH
27739: LD_VAR 0 6
27743: IN
27744: NOT
27745: OR
27746: IFFALSE 28053
// begin if dep then
27748: LD_VAR 0 17
27752: IFFALSE 27888
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27754: LD_ADDR_VAR 0 16
27758: PUSH
27759: LD_VAR 0 17
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: PPUSH
27768: CALL_OW 250
27772: PPUSH
27773: LD_VAR 0 17
27777: PUSH
27778: LD_INT 1
27780: ARRAY
27781: PPUSH
27782: CALL_OW 254
27786: PPUSH
27787: LD_INT 5
27789: PPUSH
27790: CALL_OW 272
27794: PUSH
27795: LD_VAR 0 17
27799: PUSH
27800: LD_INT 1
27802: ARRAY
27803: PPUSH
27804: CALL_OW 251
27808: PPUSH
27809: LD_VAR 0 17
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: PPUSH
27818: CALL_OW 254
27822: PPUSH
27823: LD_INT 5
27825: PPUSH
27826: CALL_OW 273
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27835: LD_VAR 0 16
27839: PUSH
27840: LD_INT 1
27842: ARRAY
27843: PPUSH
27844: LD_VAR 0 16
27848: PUSH
27849: LD_INT 2
27851: ARRAY
27852: PPUSH
27853: CALL_OW 488
27857: IFFALSE 27888
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27859: LD_VAR 0 13
27863: PPUSH
27864: LD_VAR 0 16
27868: PUSH
27869: LD_INT 1
27871: ARRAY
27872: PPUSH
27873: LD_VAR 0 16
27877: PUSH
27878: LD_INT 2
27880: ARRAY
27881: PPUSH
27882: CALL_OW 111
// continue ;
27886: GO 27378
// end ; end ; r := GetDir ( tmp ) ;
27888: LD_ADDR_VAR 0 15
27892: PUSH
27893: LD_VAR 0 13
27897: PPUSH
27898: CALL_OW 254
27902: ST_TO_ADDR
// if r = 5 then
27903: LD_VAR 0 15
27907: PUSH
27908: LD_INT 5
27910: EQUAL
27911: IFFALSE 27921
// r := 0 ;
27913: LD_ADDR_VAR 0 15
27917: PUSH
27918: LD_INT 0
27920: ST_TO_ADDR
// for j = r to 5 do
27921: LD_ADDR_VAR 0 10
27925: PUSH
27926: DOUBLE
27927: LD_VAR 0 15
27931: DEC
27932: ST_TO_ADDR
27933: LD_INT 5
27935: PUSH
27936: FOR_TO
27937: IFFALSE 28051
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27939: LD_ADDR_VAR 0 11
27943: PUSH
27944: LD_VAR 0 13
27948: PPUSH
27949: CALL_OW 250
27953: PPUSH
27954: LD_VAR 0 10
27958: PPUSH
27959: LD_INT 2
27961: PPUSH
27962: CALL_OW 272
27966: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27967: LD_ADDR_VAR 0 12
27971: PUSH
27972: LD_VAR 0 13
27976: PPUSH
27977: CALL_OW 251
27981: PPUSH
27982: LD_VAR 0 10
27986: PPUSH
27987: LD_INT 2
27989: PPUSH
27990: CALL_OW 273
27994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27995: LD_VAR 0 11
27999: PPUSH
28000: LD_VAR 0 12
28004: PPUSH
28005: CALL_OW 488
28009: PUSH
28010: LD_VAR 0 11
28014: PPUSH
28015: LD_VAR 0 12
28019: PPUSH
28020: CALL_OW 428
28024: NOT
28025: AND
28026: IFFALSE 28049
// begin ComMoveXY ( tmp , _x , _y ) ;
28028: LD_VAR 0 13
28032: PPUSH
28033: LD_VAR 0 11
28037: PPUSH
28038: LD_VAR 0 12
28042: PPUSH
28043: CALL_OW 111
// break ;
28047: GO 28051
// end ; end ;
28049: GO 27936
28051: POP
28052: POP
// end ; end ;
28053: GO 27378
28055: POP
28056: POP
// end ;
28057: LD_VAR 0 8
28061: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28062: LD_INT 0
28064: PPUSH
// result := true ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_INT 1
28072: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28073: LD_VAR 0 2
28077: PUSH
28078: LD_INT 24
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28092
28084: LD_INT 33
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28092
28090: GO 28117
28092: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28093: LD_ADDR_VAR 0 3
28097: PUSH
28098: LD_INT 32
28100: PPUSH
28101: LD_VAR 0 1
28105: PPUSH
28106: CALL_OW 321
28110: PUSH
28111: LD_INT 2
28113: EQUAL
28114: ST_TO_ADDR
28115: GO 28433
28117: LD_INT 20
28119: DOUBLE
28120: EQUAL
28121: IFTRUE 28125
28123: GO 28150
28125: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28126: LD_ADDR_VAR 0 3
28130: PUSH
28131: LD_INT 6
28133: PPUSH
28134: LD_VAR 0 1
28138: PPUSH
28139: CALL_OW 321
28143: PUSH
28144: LD_INT 2
28146: EQUAL
28147: ST_TO_ADDR
28148: GO 28433
28150: LD_INT 22
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28164
28156: LD_INT 36
28158: DOUBLE
28159: EQUAL
28160: IFTRUE 28164
28162: GO 28189
28164: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: LD_INT 15
28172: PPUSH
28173: LD_VAR 0 1
28177: PPUSH
28178: CALL_OW 321
28182: PUSH
28183: LD_INT 2
28185: EQUAL
28186: ST_TO_ADDR
28187: GO 28433
28189: LD_INT 30
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28222
28197: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 20
28205: PPUSH
28206: LD_VAR 0 1
28210: PPUSH
28211: CALL_OW 321
28215: PUSH
28216: LD_INT 2
28218: EQUAL
28219: ST_TO_ADDR
28220: GO 28433
28222: LD_INT 28
28224: DOUBLE
28225: EQUAL
28226: IFTRUE 28236
28228: LD_INT 21
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28261
28236: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28237: LD_ADDR_VAR 0 3
28241: PUSH
28242: LD_INT 21
28244: PPUSH
28245: LD_VAR 0 1
28249: PPUSH
28250: CALL_OW 321
28254: PUSH
28255: LD_INT 2
28257: EQUAL
28258: ST_TO_ADDR
28259: GO 28433
28261: LD_INT 16
28263: DOUBLE
28264: EQUAL
28265: IFTRUE 28269
28267: GO 28294
28269: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28270: LD_ADDR_VAR 0 3
28274: PUSH
28275: LD_INT 84
28277: PPUSH
28278: LD_VAR 0 1
28282: PPUSH
28283: CALL_OW 321
28287: PUSH
28288: LD_INT 2
28290: EQUAL
28291: ST_TO_ADDR
28292: GO 28433
28294: LD_INT 19
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28308
28300: LD_INT 23
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28333
28308: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_INT 83
28316: PPUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 321
28326: PUSH
28327: LD_INT 2
28329: EQUAL
28330: ST_TO_ADDR
28331: GO 28433
28333: LD_INT 17
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28366
28341: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28342: LD_ADDR_VAR 0 3
28346: PUSH
28347: LD_INT 39
28349: PPUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 321
28359: PUSH
28360: LD_INT 2
28362: EQUAL
28363: ST_TO_ADDR
28364: GO 28433
28366: LD_INT 18
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28399
28374: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28375: LD_ADDR_VAR 0 3
28379: PUSH
28380: LD_INT 40
28382: PPUSH
28383: LD_VAR 0 1
28387: PPUSH
28388: CALL_OW 321
28392: PUSH
28393: LD_INT 2
28395: EQUAL
28396: ST_TO_ADDR
28397: GO 28433
28399: LD_INT 27
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28432
28407: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_INT 35
28415: PPUSH
28416: LD_VAR 0 1
28420: PPUSH
28421: CALL_OW 321
28425: PUSH
28426: LD_INT 2
28428: EQUAL
28429: ST_TO_ADDR
28430: GO 28433
28432: POP
// end ;
28433: LD_VAR 0 3
28437: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28438: LD_INT 0
28440: PPUSH
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
// result := false ;
28451: LD_ADDR_VAR 0 6
28455: PUSH
28456: LD_INT 0
28458: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28459: LD_VAR 0 1
28463: NOT
28464: PUSH
28465: LD_VAR 0 1
28469: PPUSH
28470: CALL_OW 266
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: IN
28485: NOT
28486: OR
28487: PUSH
28488: LD_VAR 0 2
28492: NOT
28493: OR
28494: PUSH
28495: LD_VAR 0 5
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: LD_INT 3
28511: PUSH
28512: LD_INT 4
28514: PUSH
28515: LD_INT 5
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: IN
28526: NOT
28527: OR
28528: PUSH
28529: LD_VAR 0 3
28533: PPUSH
28534: LD_VAR 0 4
28538: PPUSH
28539: CALL_OW 488
28543: NOT
28544: OR
28545: IFFALSE 28549
// exit ;
28547: GO 29285
// side := GetSide ( depot ) ;
28549: LD_ADDR_VAR 0 9
28553: PUSH
28554: LD_VAR 0 1
28558: PPUSH
28559: CALL_OW 255
28563: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28564: LD_VAR 0 9
28568: PPUSH
28569: LD_VAR 0 2
28573: PPUSH
28574: CALL 28062 0 2
28578: NOT
28579: IFFALSE 28583
// exit ;
28581: GO 29285
// pom := GetBase ( depot ) ;
28583: LD_ADDR_VAR 0 10
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL_OW 274
28597: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28598: LD_ADDR_VAR 0 11
28602: PUSH
28603: LD_VAR 0 2
28607: PPUSH
28608: LD_VAR 0 1
28612: PPUSH
28613: CALL_OW 248
28617: PPUSH
28618: CALL_OW 450
28622: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28623: LD_VAR 0 10
28627: PPUSH
28628: LD_INT 1
28630: PPUSH
28631: CALL_OW 275
28635: PUSH
28636: LD_VAR 0 11
28640: PUSH
28641: LD_INT 1
28643: ARRAY
28644: GREATEREQUAL
28645: PUSH
28646: LD_VAR 0 10
28650: PPUSH
28651: LD_INT 2
28653: PPUSH
28654: CALL_OW 275
28658: PUSH
28659: LD_VAR 0 11
28663: PUSH
28664: LD_INT 2
28666: ARRAY
28667: GREATEREQUAL
28668: AND
28669: PUSH
28670: LD_VAR 0 10
28674: PPUSH
28675: LD_INT 3
28677: PPUSH
28678: CALL_OW 275
28682: PUSH
28683: LD_VAR 0 11
28687: PUSH
28688: LD_INT 3
28690: ARRAY
28691: GREATEREQUAL
28692: AND
28693: NOT
28694: IFFALSE 28698
// exit ;
28696: GO 29285
// if GetBType ( depot ) = b_depot then
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 266
28707: PUSH
28708: LD_INT 0
28710: EQUAL
28711: IFFALSE 28723
// dist := 28 else
28713: LD_ADDR_VAR 0 14
28717: PUSH
28718: LD_INT 28
28720: ST_TO_ADDR
28721: GO 28731
// dist := 36 ;
28723: LD_ADDR_VAR 0 14
28727: PUSH
28728: LD_INT 36
28730: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_VAR 0 3
28740: PPUSH
28741: LD_VAR 0 4
28745: PPUSH
28746: CALL_OW 297
28750: PUSH
28751: LD_VAR 0 14
28755: GREATER
28756: IFFALSE 28760
// exit ;
28758: GO 29285
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28760: LD_ADDR_VAR 0 12
28764: PUSH
28765: LD_VAR 0 2
28769: PPUSH
28770: LD_VAR 0 3
28774: PPUSH
28775: LD_VAR 0 4
28779: PPUSH
28780: LD_VAR 0 5
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 248
28794: PPUSH
28795: LD_INT 0
28797: PPUSH
28798: CALL 29290 0 6
28802: ST_TO_ADDR
// if not hexes then
28803: LD_VAR 0 12
28807: NOT
28808: IFFALSE 28812
// exit ;
28810: GO 29285
// hex := GetHexInfo ( x , y ) ;
28812: LD_ADDR_VAR 0 15
28816: PUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_VAR 0 4
28826: PPUSH
28827: CALL_OW 546
28831: ST_TO_ADDR
// if hex [ 1 ] then
28832: LD_VAR 0 15
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: IFFALSE 28844
// exit ;
28842: GO 29285
// height := hex [ 2 ] ;
28844: LD_ADDR_VAR 0 13
28848: PUSH
28849: LD_VAR 0 15
28853: PUSH
28854: LD_INT 2
28856: ARRAY
28857: ST_TO_ADDR
// for i = 1 to hexes do
28858: LD_ADDR_VAR 0 7
28862: PUSH
28863: DOUBLE
28864: LD_INT 1
28866: DEC
28867: ST_TO_ADDR
28868: LD_VAR 0 12
28872: PUSH
28873: FOR_TO
28874: IFFALSE 29204
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28876: LD_VAR 0 12
28880: PUSH
28881: LD_VAR 0 7
28885: ARRAY
28886: PUSH
28887: LD_INT 1
28889: ARRAY
28890: PPUSH
28891: LD_VAR 0 12
28895: PUSH
28896: LD_VAR 0 7
28900: ARRAY
28901: PUSH
28902: LD_INT 2
28904: ARRAY
28905: PPUSH
28906: CALL_OW 488
28910: NOT
28911: PUSH
28912: LD_VAR 0 12
28916: PUSH
28917: LD_VAR 0 7
28921: ARRAY
28922: PUSH
28923: LD_INT 1
28925: ARRAY
28926: PPUSH
28927: LD_VAR 0 12
28931: PUSH
28932: LD_VAR 0 7
28936: ARRAY
28937: PUSH
28938: LD_INT 2
28940: ARRAY
28941: PPUSH
28942: CALL_OW 428
28946: PUSH
28947: LD_INT 0
28949: GREATER
28950: OR
28951: PUSH
28952: LD_VAR 0 12
28956: PUSH
28957: LD_VAR 0 7
28961: ARRAY
28962: PUSH
28963: LD_INT 1
28965: ARRAY
28966: PPUSH
28967: LD_VAR 0 12
28971: PUSH
28972: LD_VAR 0 7
28976: ARRAY
28977: PUSH
28978: LD_INT 2
28980: ARRAY
28981: PPUSH
28982: CALL_OW 351
28986: OR
28987: IFFALSE 28993
// exit ;
28989: POP
28990: POP
28991: GO 29285
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28993: LD_ADDR_VAR 0 8
28997: PUSH
28998: LD_VAR 0 12
29002: PUSH
29003: LD_VAR 0 7
29007: ARRAY
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PPUSH
29013: LD_VAR 0 12
29017: PUSH
29018: LD_VAR 0 7
29022: ARRAY
29023: PUSH
29024: LD_INT 2
29026: ARRAY
29027: PPUSH
29028: CALL_OW 546
29032: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29033: LD_VAR 0 8
29037: PUSH
29038: LD_INT 1
29040: ARRAY
29041: PUSH
29042: LD_VAR 0 8
29046: PUSH
29047: LD_INT 2
29049: ARRAY
29050: PUSH
29051: LD_VAR 0 13
29055: PUSH
29056: LD_INT 2
29058: PLUS
29059: GREATER
29060: OR
29061: PUSH
29062: LD_VAR 0 8
29066: PUSH
29067: LD_INT 2
29069: ARRAY
29070: PUSH
29071: LD_VAR 0 13
29075: PUSH
29076: LD_INT 2
29078: MINUS
29079: LESS
29080: OR
29081: PUSH
29082: LD_VAR 0 8
29086: PUSH
29087: LD_INT 3
29089: ARRAY
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 8
29096: PUSH
29097: LD_INT 9
29099: PUSH
29100: LD_INT 10
29102: PUSH
29103: LD_INT 11
29105: PUSH
29106: LD_INT 12
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: LD_INT 16
29114: PUSH
29115: LD_INT 17
29117: PUSH
29118: LD_INT 18
29120: PUSH
29121: LD_INT 19
29123: PUSH
29124: LD_INT 20
29126: PUSH
29127: LD_INT 21
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: IN
29145: NOT
29146: OR
29147: PUSH
29148: LD_VAR 0 8
29152: PUSH
29153: LD_INT 5
29155: ARRAY
29156: NOT
29157: OR
29158: PUSH
29159: LD_VAR 0 8
29163: PUSH
29164: LD_INT 6
29166: ARRAY
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: LD_INT 7
29176: PUSH
29177: LD_INT 9
29179: PUSH
29180: LD_INT 10
29182: PUSH
29183: LD_INT 11
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: IN
29194: NOT
29195: OR
29196: IFFALSE 29202
// exit ;
29198: POP
29199: POP
29200: GO 29285
// end ;
29202: GO 28873
29204: POP
29205: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29206: LD_VAR 0 9
29210: PPUSH
29211: LD_VAR 0 3
29215: PPUSH
29216: LD_VAR 0 4
29220: PPUSH
29221: LD_INT 20
29223: PPUSH
29224: CALL 21237 0 4
29228: PUSH
29229: LD_INT 4
29231: ARRAY
29232: IFFALSE 29236
// exit ;
29234: GO 29285
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29236: LD_VAR 0 2
29240: PUSH
29241: LD_INT 29
29243: PUSH
29244: LD_INT 30
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: IN
29251: PUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: LD_VAR 0 9
29266: PPUSH
29267: CALL_OW 440
29271: NOT
29272: AND
29273: IFFALSE 29277
// exit ;
29275: GO 29285
// result := true ;
29277: LD_ADDR_VAR 0 6
29281: PUSH
29282: LD_INT 1
29284: ST_TO_ADDR
// end ;
29285: LD_VAR 0 6
29289: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29290: LD_INT 0
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
// result = [ ] ;
29350: LD_ADDR_VAR 0 7
29354: PUSH
29355: EMPTY
29356: ST_TO_ADDR
// temp_list = [ ] ;
29357: LD_ADDR_VAR 0 9
29361: PUSH
29362: EMPTY
29363: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29364: LD_VAR 0 4
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 4
29383: PUSH
29384: LD_INT 5
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: IN
29395: NOT
29396: PUSH
29397: LD_VAR 0 1
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: IN
29412: PUSH
29413: LD_VAR 0 5
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: LD_INT 2
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: IN
29432: NOT
29433: AND
29434: OR
29435: IFFALSE 29439
// exit ;
29437: GO 47830
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29439: LD_VAR 0 1
29443: PUSH
29444: LD_INT 6
29446: PUSH
29447: LD_INT 7
29449: PUSH
29450: LD_INT 8
29452: PUSH
29453: LD_INT 13
29455: PUSH
29456: LD_INT 12
29458: PUSH
29459: LD_INT 15
29461: PUSH
29462: LD_INT 11
29464: PUSH
29465: LD_INT 14
29467: PUSH
29468: LD_INT 10
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: IN
29482: IFFALSE 29492
// btype = b_lab ;
29484: LD_ADDR_VAR 0 1
29488: PUSH
29489: LD_INT 6
29491: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29492: LD_VAR 0 6
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: IN
29511: NOT
29512: PUSH
29513: LD_VAR 0 1
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: LD_INT 6
29532: PUSH
29533: LD_INT 36
29535: PUSH
29536: LD_INT 4
29538: PUSH
29539: LD_INT 5
29541: PUSH
29542: LD_INT 31
29544: PUSH
29545: LD_INT 32
29547: PUSH
29548: LD_INT 33
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: IN
29564: NOT
29565: PUSH
29566: LD_VAR 0 6
29570: PUSH
29571: LD_INT 1
29573: EQUAL
29574: AND
29575: OR
29576: PUSH
29577: LD_VAR 0 1
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: IN
29592: NOT
29593: PUSH
29594: LD_VAR 0 6
29598: PUSH
29599: LD_INT 2
29601: EQUAL
29602: AND
29603: OR
29604: IFFALSE 29614
// mode = 0 ;
29606: LD_ADDR_VAR 0 6
29610: PUSH
29611: LD_INT 0
29613: ST_TO_ADDR
// case mode of 0 :
29614: LD_VAR 0 6
29618: PUSH
29619: LD_INT 0
29621: DOUBLE
29622: EQUAL
29623: IFTRUE 29627
29625: GO 41080
29627: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29628: LD_ADDR_VAR 0 11
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: LD_INT 3
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29821: LD_ADDR_VAR 0 12
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 2
29955: NEG
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30017: LD_ADDR_VAR 0 13
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 3
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30216: LD_ADDR_VAR 0 14
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 3
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30412: LD_ADDR_VAR 0 15
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: NEG
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30605: LD_ADDR_VAR 0 16
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: NEG
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 3
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: LD_INT 3
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30798: LD_ADDR_VAR 0 17
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31028: LD_ADDR_VAR 0 18
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31258: LD_ADDR_VAR 0 19
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: LD_INT 2
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 2
31445: NEG
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 2
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31488: LD_ADDR_VAR 0 20
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 2
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31718: LD_ADDR_VAR 0 21
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31948: LD_ADDR_VAR 0 22
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32178: LD_ADDR_VAR 0 23
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32458: LD_ADDR_VAR 0 24
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: NEG
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: LD_INT 2
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32734: LD_ADDR_VAR 0 25
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: NEG
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 3
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33008: LD_ADDR_VAR 0 26
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: LD_INT 3
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: LD_INT 3
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33284: LD_ADDR_VAR 0 27
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 2
33506: NEG
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 3
33517: NEG
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 3
33529: NEG
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33564: LD_ADDR_VAR 0 28
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 3
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 3
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: NEG
33812: PUSH
33813: LD_INT 2
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33846: LD_ADDR_VAR 0 29
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: NEG
34025: PUSH
34026: LD_INT 2
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: LD_INT 3
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 3
34090: NEG
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34125: LD_ADDR_VAR 0 30
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 3
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 3
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34403: LD_ADDR_VAR 0 31
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 2
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 2
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: NEG
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: NEG
34593: PUSH
34594: LD_INT 3
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: NEG
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34681: LD_ADDR_VAR 0 32
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: LD_INT 1
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 2
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 2
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 3
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 3
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: NEG
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 3
34924: NEG
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34959: LD_ADDR_VAR 0 33
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: LD_INT 3
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 3
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 3
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: LD_INT 2
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 3
35203: NEG
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35238: LD_ADDR_VAR 0 34
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 2
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: NEG
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: LD_INT 3
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 2
35444: NEG
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 3
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 3
35483: NEG
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35518: LD_ADDR_VAR 0 35
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35630: LD_ADDR_VAR 0 36
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35742: LD_ADDR_VAR 0 37
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35854: LD_ADDR_VAR 0 38
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35966: LD_ADDR_VAR 0 39
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36078: LD_ADDR_VAR 0 40
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36190: LD_ADDR_VAR 0 41
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 3
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 3
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 3
36464: NEG
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 3
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 3
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 3
36499: NEG
36500: PUSH
36501: LD_INT 3
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36540: LD_ADDR_VAR 0 42
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: NEG
36731: PUSH
36732: LD_INT 3
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 3
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 3
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: LD_INT 2
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 3
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 3
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: LD_INT 3
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 3
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 3
36837: NEG
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 3
36849: NEG
36850: PUSH
36851: LD_INT 3
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36890: LD_ADDR_VAR 0 43
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 2
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 3
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 3
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 3
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 3
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 3
37186: NEG
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 3
37197: NEG
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37238: LD_ADDR_VAR 0 44
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 3
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 3
37512: NEG
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 3
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 3
37535: NEG
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 3
37547: NEG
37548: PUSH
37549: LD_INT 3
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37588: LD_ADDR_VAR 0 45
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 3
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 3
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 3
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 3
37885: NEG
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 3
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37938: LD_ADDR_VAR 0 46
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: NEG
38128: PUSH
38129: LD_INT 3
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 3
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 3
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38286: LD_ADDR_VAR 0 47
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38437: LD_ADDR_VAR 0 48
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38584: LD_ADDR_VAR 0 49
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38728: LD_ADDR_VAR 0 50
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38872: LD_ADDR_VAR 0 51
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39019: LD_ADDR_VAR 0 52
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39170: LD_ADDR_VAR 0 53
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39400: LD_ADDR_VAR 0 54
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39630: LD_ADDR_VAR 0 55
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39860: LD_ADDR_VAR 0 56
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40090: LD_ADDR_VAR 0 57
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40320: LD_ADDR_VAR 0 58
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40550: LD_ADDR_VAR 0 59
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40638: LD_ADDR_VAR 0 60
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40726: LD_ADDR_VAR 0 61
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40814: LD_ADDR_VAR 0 62
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40902: LD_ADDR_VAR 0 63
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40990: LD_ADDR_VAR 0 64
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// end ; 1 :
41078: GO 46975
41080: LD_INT 1
41082: DOUBLE
41083: EQUAL
41084: IFTRUE 41088
41086: GO 43711
41088: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41089: LD_ADDR_VAR 0 11
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 3
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 3
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41133: LD_ADDR_VAR 0 12
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 3
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41174: LD_ADDR_VAR 0 13
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 3
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41214: LD_ADDR_VAR 0 14
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41255: LD_ADDR_VAR 0 15
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41299: LD_ADDR_VAR 0 16
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 3
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 3
41318: NEG
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 3
41330: NEG
41331: PUSH
41332: LD_INT 3
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41345: LD_ADDR_VAR 0 17
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 3
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 3
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41389: LD_ADDR_VAR 0 18
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 3
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 3
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41430: LD_ADDR_VAR 0 19
41434: PUSH
41435: LD_INT 3
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 3
41447: PUSH
41448: LD_INT 3
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41470: LD_ADDR_VAR 0 20
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41511: LD_ADDR_VAR 0 21
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41555: LD_ADDR_VAR 0 22
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 3
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: LD_INT 3
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41601: LD_ADDR_VAR 0 23
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 3
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 4
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 3
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41645: LD_ADDR_VAR 0 24
41649: PUSH
41650: LD_INT 3
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 4
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41686: LD_ADDR_VAR 0 25
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: LD_INT 3
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 4
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41726: LD_ADDR_VAR 0 26
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 4
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41767: LD_ADDR_VAR 0 27
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 4
41796: NEG
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41811: LD_ADDR_VAR 0 28
41815: PUSH
41816: LD_INT 3
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 3
41830: NEG
41831: PUSH
41832: LD_INT 4
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 4
41842: NEG
41843: PUSH
41844: LD_INT 3
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41857: LD_ADDR_VAR 0 29
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 3
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 4
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 4
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 5
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 5
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 4
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 6
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 6
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 5
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42012: LD_ADDR_VAR 0 30
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 4
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 4
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 4
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 5
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 5
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 5
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 6
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 6
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42155: LD_ADDR_VAR 0 31
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 3
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 4
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 4
42202: PUSH
42203: LD_INT 4
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 4
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: LD_INT 4
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 5
42232: PUSH
42233: LD_INT 5
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 4
42242: PUSH
42243: LD_INT 5
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 6
42252: PUSH
42253: LD_INT 5
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 6
42262: PUSH
42263: LD_INT 6
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 5
42272: PUSH
42273: LD_INT 6
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42294: LD_ADDR_VAR 0 32
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 4
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 4
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 3
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 5
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 4
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 6
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 6
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 5
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42437: LD_ADDR_VAR 0 33
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: NEG
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 4
42489: NEG
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 4
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 4
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 5
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 5
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 5
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 6
42557: NEG
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 6
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42592: LD_ADDR_VAR 0 34
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: LD_INT 3
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: NEG
42636: PUSH
42637: LD_INT 4
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 4
42647: NEG
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 4
42659: NEG
42660: PUSH
42661: LD_INT 4
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 4
42671: NEG
42672: PUSH
42673: LD_INT 5
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 5
42683: NEG
42684: PUSH
42685: LD_INT 4
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 5
42695: NEG
42696: PUSH
42697: LD_INT 5
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 5
42707: NEG
42708: PUSH
42709: LD_INT 6
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 6
42719: NEG
42720: PUSH
42721: LD_INT 5
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 6
42731: NEG
42732: PUSH
42733: LD_INT 6
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42755: LD_ADDR_VAR 0 41
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 3
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42799: LD_ADDR_VAR 0 42
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42840: LD_ADDR_VAR 0 43
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42880: LD_ADDR_VAR 0 44
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42921: LD_ADDR_VAR 0 45
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42965: LD_ADDR_VAR 0 46
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43011: LD_ADDR_VAR 0 47
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: LD_INT 3
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 3
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43044: LD_ADDR_VAR 0 48
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43075: LD_ADDR_VAR 0 49
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43104: LD_ADDR_VAR 0 50
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43133: LD_ADDR_VAR 0 51
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43164: LD_ADDR_VAR 0 52
43168: PUSH
43169: LD_INT 3
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 3
43183: NEG
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43197: LD_ADDR_VAR 0 53
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 3
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43241: LD_ADDR_VAR 0 54
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43282: LD_ADDR_VAR 0 55
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 3
43299: PUSH
43300: LD_INT 3
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43322: LD_ADDR_VAR 0 56
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43363: LD_ADDR_VAR 0 57
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43407: LD_ADDR_VAR 0 58
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 3
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: LD_INT 3
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43453: LD_ADDR_VAR 0 59
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43497: LD_ADDR_VAR 0 60
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43538: LD_ADDR_VAR 0 61
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43578: LD_ADDR_VAR 0 62
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43619: LD_ADDR_VAR 0 63
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43663: LD_ADDR_VAR 0 64
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 2
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// end ; 2 :
43709: GO 46975
43711: LD_INT 2
43713: DOUBLE
43714: EQUAL
43715: IFTRUE 43719
43717: GO 46974
43719: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43720: LD_ADDR_VAR 0 29
43724: PUSH
43725: LD_INT 4
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 4
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 5
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 4
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 3
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 5
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 4
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 4
43850: PUSH
43851: LD_INT 4
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 4
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 4
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 4
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 5
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 4
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: LD_INT 5
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 3
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 4
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 4
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 4
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 4
44105: NEG
44106: PUSH
44107: LD_INT 4
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 4
44117: NEG
44118: PUSH
44119: LD_INT 5
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: LD_INT 4
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: LD_INT 3
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 4
44153: NEG
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 5
44165: NEG
44166: PUSH
44167: LD_INT 4
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 5
44177: NEG
44178: PUSH
44179: LD_INT 5
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: LD_INT 5
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 5
44201: NEG
44202: PUSH
44203: LD_INT 3
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44258: LD_ADDR_VAR 0 30
44262: PUSH
44263: LD_INT 4
44265: PUSH
44266: LD_INT 4
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 4
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 5
44285: PUSH
44286: LD_INT 4
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 5
44295: PUSH
44296: LD_INT 5
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 4
44305: PUSH
44306: LD_INT 5
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 3
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 5
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 4
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 4
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 4
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 4
44448: NEG
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 4
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 4
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 5
44504: NEG
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 5
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 5
44527: NEG
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 3
44550: NEG
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: NEG
44563: PUSH
44564: LD_INT 4
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 4
44610: NEG
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 4
44622: NEG
44623: PUSH
44624: LD_INT 4
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 4
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 4
44646: NEG
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 4
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 5
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 4
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 3
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 3
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 4
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 5
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 3
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 5
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44805: LD_ADDR_VAR 0 31
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 4
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 4
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 5
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 5
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 5
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 3
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: NEG
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 4
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 4
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 4
45007: NEG
45008: PUSH
45009: LD_INT 4
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 4
45019: NEG
45020: PUSH
45021: LD_INT 5
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: LD_INT 4
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 4
45055: NEG
45056: PUSH
45057: LD_INT 3
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 5
45067: NEG
45068: PUSH
45069: LD_INT 4
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 5
45079: NEG
45080: PUSH
45081: LD_INT 5
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: LD_INT 5
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 5
45103: NEG
45104: PUSH
45105: LD_INT 3
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 4
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 3
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 4
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 4
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 4
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 5
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 5
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 5
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45355: LD_ADDR_VAR 0 32
45359: PUSH
45360: LD_INT 4
45362: NEG
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 4
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 3
45385: NEG
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 4
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 5
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 5
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 5
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 3
45453: NEG
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 3
45476: NEG
45477: PUSH
45478: LD_INT 4
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 3
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 4
45524: NEG
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 4
45536: NEG
45537: PUSH
45538: LD_INT 4
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: LD_INT 4
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 4
45560: NEG
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 4
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 5
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 4
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 3
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 3
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 4
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 5
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 5
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 4
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 4
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 4
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 4
45767: PUSH
45768: LD_INT 4
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 4
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 5
45787: PUSH
45788: LD_INT 4
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 5
45797: PUSH
45798: LD_INT 5
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 4
45807: PUSH
45808: LD_INT 5
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 3
45817: PUSH
45818: LD_INT 4
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 3
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 5
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 5
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45902: LD_ADDR_VAR 0 33
45906: PUSH
45907: LD_INT 4
45909: NEG
45910: PUSH
45911: LD_INT 4
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 4
45921: NEG
45922: PUSH
45923: LD_INT 5
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: LD_INT 4
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: LD_INT 3
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 4
45957: NEG
45958: PUSH
45959: LD_INT 3
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 5
45969: NEG
45970: PUSH
45971: LD_INT 4
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 5
45981: NEG
45982: PUSH
45983: LD_INT 5
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: LD_INT 5
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 5
46005: NEG
46006: PUSH
46007: LD_INT 3
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 4
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 3
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 4
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 4
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 4
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 4
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 5
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 5
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 4
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 5
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: LD_INT 3
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 4
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 4
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: LD_INT 4
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 4
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 4
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 4
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 5
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 5
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 4
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 3
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 5
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: LD_INT 3
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46440: LD_ADDR_VAR 0 34
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 5
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 4
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 4
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 5
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 3
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 5
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 4
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 4
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 4
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 4
46642: PUSH
46643: LD_INT 4
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 4
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 5
46662: PUSH
46663: LD_INT 4
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 5
46672: PUSH
46673: LD_INT 5
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: LD_INT 5
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 4
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 5
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: LD_INT 5
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 4
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 4
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 4
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 3
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 4
46870: NEG
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 5
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 5
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 5
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// end ; end ;
46972: GO 46975
46974: POP
// case btype of b_depot , b_warehouse :
46975: LD_VAR 0 1
46979: PUSH
46980: LD_INT 0
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46994
46986: LD_INT 1
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47195
46994: POP
// case nation of nation_american :
46995: LD_VAR 0 5
46999: PUSH
47000: LD_INT 1
47002: DOUBLE
47003: EQUAL
47004: IFTRUE 47008
47006: GO 47064
47008: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_VAR 0 11
47018: PUSH
47019: LD_VAR 0 12
47023: PUSH
47024: LD_VAR 0 13
47028: PUSH
47029: LD_VAR 0 14
47033: PUSH
47034: LD_VAR 0 15
47038: PUSH
47039: LD_VAR 0 16
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: PUSH
47052: LD_VAR 0 4
47056: PUSH
47057: LD_INT 1
47059: PLUS
47060: ARRAY
47061: ST_TO_ADDR
47062: GO 47193
47064: LD_INT 2
47066: DOUBLE
47067: EQUAL
47068: IFTRUE 47072
47070: GO 47128
47072: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47073: LD_ADDR_VAR 0 9
47077: PUSH
47078: LD_VAR 0 17
47082: PUSH
47083: LD_VAR 0 18
47087: PUSH
47088: LD_VAR 0 19
47092: PUSH
47093: LD_VAR 0 20
47097: PUSH
47098: LD_VAR 0 21
47102: PUSH
47103: LD_VAR 0 22
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: PUSH
47116: LD_VAR 0 4
47120: PUSH
47121: LD_INT 1
47123: PLUS
47124: ARRAY
47125: ST_TO_ADDR
47126: GO 47193
47128: LD_INT 3
47130: DOUBLE
47131: EQUAL
47132: IFTRUE 47136
47134: GO 47192
47136: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47137: LD_ADDR_VAR 0 9
47141: PUSH
47142: LD_VAR 0 23
47146: PUSH
47147: LD_VAR 0 24
47151: PUSH
47152: LD_VAR 0 25
47156: PUSH
47157: LD_VAR 0 26
47161: PUSH
47162: LD_VAR 0 27
47166: PUSH
47167: LD_VAR 0 28
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: PUSH
47180: LD_VAR 0 4
47184: PUSH
47185: LD_INT 1
47187: PLUS
47188: ARRAY
47189: ST_TO_ADDR
47190: GO 47193
47192: POP
47193: GO 47748
47195: LD_INT 2
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47209
47201: LD_INT 3
47203: DOUBLE
47204: EQUAL
47205: IFTRUE 47209
47207: GO 47265
47209: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47210: LD_ADDR_VAR 0 9
47214: PUSH
47215: LD_VAR 0 29
47219: PUSH
47220: LD_VAR 0 30
47224: PUSH
47225: LD_VAR 0 31
47229: PUSH
47230: LD_VAR 0 32
47234: PUSH
47235: LD_VAR 0 33
47239: PUSH
47240: LD_VAR 0 34
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: PUSH
47253: LD_VAR 0 4
47257: PUSH
47258: LD_INT 1
47260: PLUS
47261: ARRAY
47262: ST_TO_ADDR
47263: GO 47748
47265: LD_INT 16
47267: DOUBLE
47268: EQUAL
47269: IFTRUE 47327
47271: LD_INT 17
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47327
47277: LD_INT 18
47279: DOUBLE
47280: EQUAL
47281: IFTRUE 47327
47283: LD_INT 19
47285: DOUBLE
47286: EQUAL
47287: IFTRUE 47327
47289: LD_INT 22
47291: DOUBLE
47292: EQUAL
47293: IFTRUE 47327
47295: LD_INT 20
47297: DOUBLE
47298: EQUAL
47299: IFTRUE 47327
47301: LD_INT 21
47303: DOUBLE
47304: EQUAL
47305: IFTRUE 47327
47307: LD_INT 23
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47327
47313: LD_INT 24
47315: DOUBLE
47316: EQUAL
47317: IFTRUE 47327
47319: LD_INT 25
47321: DOUBLE
47322: EQUAL
47323: IFTRUE 47327
47325: GO 47383
47327: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47328: LD_ADDR_VAR 0 9
47332: PUSH
47333: LD_VAR 0 35
47337: PUSH
47338: LD_VAR 0 36
47342: PUSH
47343: LD_VAR 0 37
47347: PUSH
47348: LD_VAR 0 38
47352: PUSH
47353: LD_VAR 0 39
47357: PUSH
47358: LD_VAR 0 40
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: PUSH
47371: LD_VAR 0 4
47375: PUSH
47376: LD_INT 1
47378: PLUS
47379: ARRAY
47380: ST_TO_ADDR
47381: GO 47748
47383: LD_INT 6
47385: DOUBLE
47386: EQUAL
47387: IFTRUE 47439
47389: LD_INT 7
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47439
47395: LD_INT 8
47397: DOUBLE
47398: EQUAL
47399: IFTRUE 47439
47401: LD_INT 13
47403: DOUBLE
47404: EQUAL
47405: IFTRUE 47439
47407: LD_INT 12
47409: DOUBLE
47410: EQUAL
47411: IFTRUE 47439
47413: LD_INT 15
47415: DOUBLE
47416: EQUAL
47417: IFTRUE 47439
47419: LD_INT 11
47421: DOUBLE
47422: EQUAL
47423: IFTRUE 47439
47425: LD_INT 14
47427: DOUBLE
47428: EQUAL
47429: IFTRUE 47439
47431: LD_INT 10
47433: DOUBLE
47434: EQUAL
47435: IFTRUE 47439
47437: GO 47495
47439: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47440: LD_ADDR_VAR 0 9
47444: PUSH
47445: LD_VAR 0 41
47449: PUSH
47450: LD_VAR 0 42
47454: PUSH
47455: LD_VAR 0 43
47459: PUSH
47460: LD_VAR 0 44
47464: PUSH
47465: LD_VAR 0 45
47469: PUSH
47470: LD_VAR 0 46
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: PUSH
47483: LD_VAR 0 4
47487: PUSH
47488: LD_INT 1
47490: PLUS
47491: ARRAY
47492: ST_TO_ADDR
47493: GO 47748
47495: LD_INT 36
47497: DOUBLE
47498: EQUAL
47499: IFTRUE 47503
47501: GO 47559
47503: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47504: LD_ADDR_VAR 0 9
47508: PUSH
47509: LD_VAR 0 47
47513: PUSH
47514: LD_VAR 0 48
47518: PUSH
47519: LD_VAR 0 49
47523: PUSH
47524: LD_VAR 0 50
47528: PUSH
47529: LD_VAR 0 51
47533: PUSH
47534: LD_VAR 0 52
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: PUSH
47547: LD_VAR 0 4
47551: PUSH
47552: LD_INT 1
47554: PLUS
47555: ARRAY
47556: ST_TO_ADDR
47557: GO 47748
47559: LD_INT 4
47561: DOUBLE
47562: EQUAL
47563: IFTRUE 47585
47565: LD_INT 5
47567: DOUBLE
47568: EQUAL
47569: IFTRUE 47585
47571: LD_INT 34
47573: DOUBLE
47574: EQUAL
47575: IFTRUE 47585
47577: LD_INT 37
47579: DOUBLE
47580: EQUAL
47581: IFTRUE 47585
47583: GO 47641
47585: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47586: LD_ADDR_VAR 0 9
47590: PUSH
47591: LD_VAR 0 53
47595: PUSH
47596: LD_VAR 0 54
47600: PUSH
47601: LD_VAR 0 55
47605: PUSH
47606: LD_VAR 0 56
47610: PUSH
47611: LD_VAR 0 57
47615: PUSH
47616: LD_VAR 0 58
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: PUSH
47629: LD_VAR 0 4
47633: PUSH
47634: LD_INT 1
47636: PLUS
47637: ARRAY
47638: ST_TO_ADDR
47639: GO 47748
47641: LD_INT 31
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47691
47647: LD_INT 32
47649: DOUBLE
47650: EQUAL
47651: IFTRUE 47691
47653: LD_INT 33
47655: DOUBLE
47656: EQUAL
47657: IFTRUE 47691
47659: LD_INT 27
47661: DOUBLE
47662: EQUAL
47663: IFTRUE 47691
47665: LD_INT 26
47667: DOUBLE
47668: EQUAL
47669: IFTRUE 47691
47671: LD_INT 28
47673: DOUBLE
47674: EQUAL
47675: IFTRUE 47691
47677: LD_INT 29
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47691
47683: LD_INT 30
47685: DOUBLE
47686: EQUAL
47687: IFTRUE 47691
47689: GO 47747
47691: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47692: LD_ADDR_VAR 0 9
47696: PUSH
47697: LD_VAR 0 59
47701: PUSH
47702: LD_VAR 0 60
47706: PUSH
47707: LD_VAR 0 61
47711: PUSH
47712: LD_VAR 0 62
47716: PUSH
47717: LD_VAR 0 63
47721: PUSH
47722: LD_VAR 0 64
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: PUSH
47735: LD_VAR 0 4
47739: PUSH
47740: LD_INT 1
47742: PLUS
47743: ARRAY
47744: ST_TO_ADDR
47745: GO 47748
47747: POP
// temp_list2 = [ ] ;
47748: LD_ADDR_VAR 0 10
47752: PUSH
47753: EMPTY
47754: ST_TO_ADDR
// for i in temp_list do
47755: LD_ADDR_VAR 0 8
47759: PUSH
47760: LD_VAR 0 9
47764: PUSH
47765: FOR_IN
47766: IFFALSE 47818
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47768: LD_ADDR_VAR 0 10
47772: PUSH
47773: LD_VAR 0 10
47777: PUSH
47778: LD_VAR 0 8
47782: PUSH
47783: LD_INT 1
47785: ARRAY
47786: PUSH
47787: LD_VAR 0 2
47791: PLUS
47792: PUSH
47793: LD_VAR 0 8
47797: PUSH
47798: LD_INT 2
47800: ARRAY
47801: PUSH
47802: LD_VAR 0 3
47806: PLUS
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: ADD
47815: ST_TO_ADDR
47816: GO 47765
47818: POP
47819: POP
// result = temp_list2 ;
47820: LD_ADDR_VAR 0 7
47824: PUSH
47825: LD_VAR 0 10
47829: ST_TO_ADDR
// end ;
47830: LD_VAR 0 7
47834: RET
// export function EnemyInRange ( unit , dist ) ; begin
47835: LD_INT 0
47837: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47838: LD_ADDR_VAR 0 3
47842: PUSH
47843: LD_VAR 0 1
47847: PPUSH
47848: CALL_OW 255
47852: PPUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: CALL_OW 250
47862: PPUSH
47863: LD_VAR 0 1
47867: PPUSH
47868: CALL_OW 251
47872: PPUSH
47873: LD_VAR 0 2
47877: PPUSH
47878: CALL 21237 0 4
47882: PUSH
47883: LD_INT 4
47885: ARRAY
47886: ST_TO_ADDR
// end ;
47887: LD_VAR 0 3
47891: RET
// export function PlayerSeeMe ( unit ) ; begin
47892: LD_INT 0
47894: PPUSH
// result := See ( your_side , unit ) ;
47895: LD_ADDR_VAR 0 2
47899: PUSH
47900: LD_OWVAR 2
47904: PPUSH
47905: LD_VAR 0 1
47909: PPUSH
47910: CALL_OW 292
47914: ST_TO_ADDR
// end ;
47915: LD_VAR 0 2
47919: RET
// export function ReverseDir ( unit ) ; begin
47920: LD_INT 0
47922: PPUSH
// if not unit then
47923: LD_VAR 0 1
47927: NOT
47928: IFFALSE 47932
// exit ;
47930: GO 47955
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47932: LD_ADDR_VAR 0 2
47936: PUSH
47937: LD_VAR 0 1
47941: PPUSH
47942: CALL_OW 254
47946: PUSH
47947: LD_INT 3
47949: PLUS
47950: PUSH
47951: LD_INT 6
47953: MOD
47954: ST_TO_ADDR
// end ;
47955: LD_VAR 0 2
47959: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
// if not unit or not hexes then
47968: LD_VAR 0 1
47972: NOT
47973: PUSH
47974: LD_VAR 0 2
47978: NOT
47979: OR
47980: IFFALSE 47984
// exit ;
47982: GO 48107
// dist := 9999 ;
47984: LD_ADDR_VAR 0 5
47988: PUSH
47989: LD_INT 9999
47991: ST_TO_ADDR
// for i = 1 to hexes do
47992: LD_ADDR_VAR 0 4
47996: PUSH
47997: DOUBLE
47998: LD_INT 1
48000: DEC
48001: ST_TO_ADDR
48002: LD_VAR 0 2
48006: PUSH
48007: FOR_TO
48008: IFFALSE 48095
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48010: LD_ADDR_VAR 0 6
48014: PUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: LD_VAR 0 2
48024: PUSH
48025: LD_VAR 0 4
48029: ARRAY
48030: PUSH
48031: LD_INT 1
48033: ARRAY
48034: PPUSH
48035: LD_VAR 0 2
48039: PUSH
48040: LD_VAR 0 4
48044: ARRAY
48045: PUSH
48046: LD_INT 2
48048: ARRAY
48049: PPUSH
48050: CALL_OW 297
48054: ST_TO_ADDR
// if tdist < dist then
48055: LD_VAR 0 6
48059: PUSH
48060: LD_VAR 0 5
48064: LESS
48065: IFFALSE 48093
// begin hex := hexes [ i ] ;
48067: LD_ADDR_VAR 0 8
48071: PUSH
48072: LD_VAR 0 2
48076: PUSH
48077: LD_VAR 0 4
48081: ARRAY
48082: ST_TO_ADDR
// dist := tdist ;
48083: LD_ADDR_VAR 0 5
48087: PUSH
48088: LD_VAR 0 6
48092: ST_TO_ADDR
// end ; end ;
48093: GO 48007
48095: POP
48096: POP
// result := hex ;
48097: LD_ADDR_VAR 0 3
48101: PUSH
48102: LD_VAR 0 8
48106: ST_TO_ADDR
// end ;
48107: LD_VAR 0 3
48111: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48112: LD_INT 0
48114: PPUSH
48115: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48116: LD_VAR 0 1
48120: NOT
48121: PUSH
48122: LD_VAR 0 1
48126: PUSH
48127: LD_INT 21
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 23
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PPUSH
48151: CALL_OW 69
48155: IN
48156: NOT
48157: OR
48158: IFFALSE 48162
// exit ;
48160: GO 48209
// for i = 1 to 3 do
48162: LD_ADDR_VAR 0 3
48166: PUSH
48167: DOUBLE
48168: LD_INT 1
48170: DEC
48171: ST_TO_ADDR
48172: LD_INT 3
48174: PUSH
48175: FOR_TO
48176: IFFALSE 48207
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48178: LD_VAR 0 1
48182: PPUSH
48183: CALL_OW 250
48187: PPUSH
48188: LD_VAR 0 1
48192: PPUSH
48193: CALL_OW 251
48197: PPUSH
48198: LD_INT 1
48200: PPUSH
48201: CALL_OW 453
48205: GO 48175
48207: POP
48208: POP
// end ;
48209: LD_VAR 0 2
48213: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48214: LD_INT 0
48216: PPUSH
48217: PPUSH
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48222: LD_VAR 0 1
48226: NOT
48227: PUSH
48228: LD_VAR 0 2
48232: NOT
48233: OR
48234: PUSH
48235: LD_VAR 0 1
48239: PPUSH
48240: CALL_OW 314
48244: OR
48245: IFFALSE 48249
// exit ;
48247: GO 48690
// x := GetX ( enemy_unit ) ;
48249: LD_ADDR_VAR 0 7
48253: PUSH
48254: LD_VAR 0 2
48258: PPUSH
48259: CALL_OW 250
48263: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48264: LD_ADDR_VAR 0 8
48268: PUSH
48269: LD_VAR 0 2
48273: PPUSH
48274: CALL_OW 251
48278: ST_TO_ADDR
// if not x or not y then
48279: LD_VAR 0 7
48283: NOT
48284: PUSH
48285: LD_VAR 0 8
48289: NOT
48290: OR
48291: IFFALSE 48295
// exit ;
48293: GO 48690
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48295: LD_ADDR_VAR 0 6
48299: PUSH
48300: LD_VAR 0 7
48304: PPUSH
48305: LD_INT 0
48307: PPUSH
48308: LD_INT 4
48310: PPUSH
48311: CALL_OW 272
48315: PUSH
48316: LD_VAR 0 8
48320: PPUSH
48321: LD_INT 0
48323: PPUSH
48324: LD_INT 4
48326: PPUSH
48327: CALL_OW 273
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_VAR 0 7
48340: PPUSH
48341: LD_INT 1
48343: PPUSH
48344: LD_INT 4
48346: PPUSH
48347: CALL_OW 272
48351: PUSH
48352: LD_VAR 0 8
48356: PPUSH
48357: LD_INT 1
48359: PPUSH
48360: LD_INT 4
48362: PPUSH
48363: CALL_OW 273
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_VAR 0 7
48376: PPUSH
48377: LD_INT 2
48379: PPUSH
48380: LD_INT 4
48382: PPUSH
48383: CALL_OW 272
48387: PUSH
48388: LD_VAR 0 8
48392: PPUSH
48393: LD_INT 2
48395: PPUSH
48396: LD_INT 4
48398: PPUSH
48399: CALL_OW 273
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_VAR 0 7
48412: PPUSH
48413: LD_INT 3
48415: PPUSH
48416: LD_INT 4
48418: PPUSH
48419: CALL_OW 272
48423: PUSH
48424: LD_VAR 0 8
48428: PPUSH
48429: LD_INT 3
48431: PPUSH
48432: LD_INT 4
48434: PPUSH
48435: CALL_OW 273
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_VAR 0 7
48448: PPUSH
48449: LD_INT 4
48451: PPUSH
48452: LD_INT 4
48454: PPUSH
48455: CALL_OW 272
48459: PUSH
48460: LD_VAR 0 8
48464: PPUSH
48465: LD_INT 4
48467: PPUSH
48468: LD_INT 4
48470: PPUSH
48471: CALL_OW 273
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_VAR 0 7
48484: PPUSH
48485: LD_INT 5
48487: PPUSH
48488: LD_INT 4
48490: PPUSH
48491: CALL_OW 272
48495: PUSH
48496: LD_VAR 0 8
48500: PPUSH
48501: LD_INT 5
48503: PPUSH
48504: LD_INT 4
48506: PPUSH
48507: CALL_OW 273
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: ST_TO_ADDR
// for i = tmp downto 1 do
48524: LD_ADDR_VAR 0 4
48528: PUSH
48529: DOUBLE
48530: LD_VAR 0 6
48534: INC
48535: ST_TO_ADDR
48536: LD_INT 1
48538: PUSH
48539: FOR_DOWNTO
48540: IFFALSE 48641
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48542: LD_VAR 0 6
48546: PUSH
48547: LD_VAR 0 4
48551: ARRAY
48552: PUSH
48553: LD_INT 1
48555: ARRAY
48556: PPUSH
48557: LD_VAR 0 6
48561: PUSH
48562: LD_VAR 0 4
48566: ARRAY
48567: PUSH
48568: LD_INT 2
48570: ARRAY
48571: PPUSH
48572: CALL_OW 488
48576: NOT
48577: PUSH
48578: LD_VAR 0 6
48582: PUSH
48583: LD_VAR 0 4
48587: ARRAY
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: LD_VAR 0 6
48597: PUSH
48598: LD_VAR 0 4
48602: ARRAY
48603: PUSH
48604: LD_INT 2
48606: ARRAY
48607: PPUSH
48608: CALL_OW 428
48612: PUSH
48613: LD_INT 0
48615: NONEQUAL
48616: OR
48617: IFFALSE 48639
// tmp := Delete ( tmp , i ) ;
48619: LD_ADDR_VAR 0 6
48623: PUSH
48624: LD_VAR 0 6
48628: PPUSH
48629: LD_VAR 0 4
48633: PPUSH
48634: CALL_OW 3
48638: ST_TO_ADDR
48639: GO 48539
48641: POP
48642: POP
// j := GetClosestHex ( unit , tmp ) ;
48643: LD_ADDR_VAR 0 5
48647: PUSH
48648: LD_VAR 0 1
48652: PPUSH
48653: LD_VAR 0 6
48657: PPUSH
48658: CALL 47960 0 2
48662: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48663: LD_VAR 0 1
48667: PPUSH
48668: LD_VAR 0 5
48672: PUSH
48673: LD_INT 1
48675: ARRAY
48676: PPUSH
48677: LD_VAR 0 5
48681: PUSH
48682: LD_INT 2
48684: ARRAY
48685: PPUSH
48686: CALL_OW 111
// end ;
48690: LD_VAR 0 3
48694: RET
// export function PrepareApemanSoldier ( ) ; begin
48695: LD_INT 0
48697: PPUSH
// uc_nation := 0 ;
48698: LD_ADDR_OWVAR 21
48702: PUSH
48703: LD_INT 0
48705: ST_TO_ADDR
// hc_sex := sex_male ;
48706: LD_ADDR_OWVAR 27
48710: PUSH
48711: LD_INT 1
48713: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48714: LD_ADDR_OWVAR 28
48718: PUSH
48719: LD_INT 15
48721: ST_TO_ADDR
// hc_gallery :=  ;
48722: LD_ADDR_OWVAR 33
48726: PUSH
48727: LD_STRING 
48729: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48730: LD_ADDR_OWVAR 31
48734: PUSH
48735: LD_INT 0
48737: PPUSH
48738: LD_INT 3
48740: PPUSH
48741: CALL_OW 12
48745: PUSH
48746: LD_INT 0
48748: PPUSH
48749: LD_INT 3
48751: PPUSH
48752: CALL_OW 12
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// end ;
48769: LD_VAR 0 1
48773: RET
// export function PrepareApemanEngineer ( ) ; begin
48774: LD_INT 0
48776: PPUSH
// uc_nation := 0 ;
48777: LD_ADDR_OWVAR 21
48781: PUSH
48782: LD_INT 0
48784: ST_TO_ADDR
// hc_sex := sex_male ;
48785: LD_ADDR_OWVAR 27
48789: PUSH
48790: LD_INT 1
48792: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48793: LD_ADDR_OWVAR 28
48797: PUSH
48798: LD_INT 16
48800: ST_TO_ADDR
// hc_gallery :=  ;
48801: LD_ADDR_OWVAR 33
48805: PUSH
48806: LD_STRING 
48808: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48809: LD_ADDR_OWVAR 31
48813: PUSH
48814: LD_INT 0
48816: PPUSH
48817: LD_INT 3
48819: PPUSH
48820: CALL_OW 12
48824: PUSH
48825: LD_INT 0
48827: PPUSH
48828: LD_INT 3
48830: PPUSH
48831: CALL_OW 12
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 1
48852: RET
// export function PrepareApeman ( agressivity ) ; begin
48853: LD_INT 0
48855: PPUSH
// uc_side := 0 ;
48856: LD_ADDR_OWVAR 20
48860: PUSH
48861: LD_INT 0
48863: ST_TO_ADDR
// uc_nation := 0 ;
48864: LD_ADDR_OWVAR 21
48868: PUSH
48869: LD_INT 0
48871: ST_TO_ADDR
// hc_sex := sex_male ;
48872: LD_ADDR_OWVAR 27
48876: PUSH
48877: LD_INT 1
48879: ST_TO_ADDR
// hc_class := class_apeman ;
48880: LD_ADDR_OWVAR 28
48884: PUSH
48885: LD_INT 12
48887: ST_TO_ADDR
// hc_gallery :=  ;
48888: LD_ADDR_OWVAR 33
48892: PUSH
48893: LD_STRING 
48895: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48896: LD_ADDR_OWVAR 35
48900: PUSH
48901: LD_VAR 0 1
48905: NEG
48906: PPUSH
48907: LD_VAR 0 1
48911: PPUSH
48912: CALL_OW 12
48916: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48917: LD_ADDR_OWVAR 31
48921: PUSH
48922: LD_INT 0
48924: PPUSH
48925: LD_INT 3
48927: PPUSH
48928: CALL_OW 12
48932: PUSH
48933: LD_INT 0
48935: PPUSH
48936: LD_INT 3
48938: PPUSH
48939: CALL_OW 12
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: ST_TO_ADDR
// end ;
48956: LD_VAR 0 2
48960: RET
// export function PrepareTiger ( agressivity ) ; begin
48961: LD_INT 0
48963: PPUSH
// uc_side := 0 ;
48964: LD_ADDR_OWVAR 20
48968: PUSH
48969: LD_INT 0
48971: ST_TO_ADDR
// uc_nation := 0 ;
48972: LD_ADDR_OWVAR 21
48976: PUSH
48977: LD_INT 0
48979: ST_TO_ADDR
// hc_class := class_tiger ;
48980: LD_ADDR_OWVAR 28
48984: PUSH
48985: LD_INT 14
48987: ST_TO_ADDR
// hc_gallery :=  ;
48988: LD_ADDR_OWVAR 33
48992: PUSH
48993: LD_STRING 
48995: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48996: LD_ADDR_OWVAR 35
49000: PUSH
49001: LD_VAR 0 1
49005: NEG
49006: PPUSH
49007: LD_VAR 0 1
49011: PPUSH
49012: CALL_OW 12
49016: ST_TO_ADDR
// end ;
49017: LD_VAR 0 2
49021: RET
// export function PrepareEnchidna ( ) ; begin
49022: LD_INT 0
49024: PPUSH
// uc_side := 0 ;
49025: LD_ADDR_OWVAR 20
49029: PUSH
49030: LD_INT 0
49032: ST_TO_ADDR
// uc_nation := 0 ;
49033: LD_ADDR_OWVAR 21
49037: PUSH
49038: LD_INT 0
49040: ST_TO_ADDR
// hc_class := class_baggie ;
49041: LD_ADDR_OWVAR 28
49045: PUSH
49046: LD_INT 13
49048: ST_TO_ADDR
// hc_gallery :=  ;
49049: LD_ADDR_OWVAR 33
49053: PUSH
49054: LD_STRING 
49056: ST_TO_ADDR
// end ;
49057: LD_VAR 0 1
49061: RET
// export function PrepareFrog ( ) ; begin
49062: LD_INT 0
49064: PPUSH
// uc_side := 0 ;
49065: LD_ADDR_OWVAR 20
49069: PUSH
49070: LD_INT 0
49072: ST_TO_ADDR
// uc_nation := 0 ;
49073: LD_ADDR_OWVAR 21
49077: PUSH
49078: LD_INT 0
49080: ST_TO_ADDR
// hc_class := class_frog ;
49081: LD_ADDR_OWVAR 28
49085: PUSH
49086: LD_INT 19
49088: ST_TO_ADDR
// hc_gallery :=  ;
49089: LD_ADDR_OWVAR 33
49093: PUSH
49094: LD_STRING 
49096: ST_TO_ADDR
// end ;
49097: LD_VAR 0 1
49101: RET
// export function PrepareFish ( ) ; begin
49102: LD_INT 0
49104: PPUSH
// uc_side := 0 ;
49105: LD_ADDR_OWVAR 20
49109: PUSH
49110: LD_INT 0
49112: ST_TO_ADDR
// uc_nation := 0 ;
49113: LD_ADDR_OWVAR 21
49117: PUSH
49118: LD_INT 0
49120: ST_TO_ADDR
// hc_class := class_fish ;
49121: LD_ADDR_OWVAR 28
49125: PUSH
49126: LD_INT 20
49128: ST_TO_ADDR
// hc_gallery :=  ;
49129: LD_ADDR_OWVAR 33
49133: PUSH
49134: LD_STRING 
49136: ST_TO_ADDR
// end ;
49137: LD_VAR 0 1
49141: RET
// export function PrepareBird ( ) ; begin
49142: LD_INT 0
49144: PPUSH
// uc_side := 0 ;
49145: LD_ADDR_OWVAR 20
49149: PUSH
49150: LD_INT 0
49152: ST_TO_ADDR
// uc_nation := 0 ;
49153: LD_ADDR_OWVAR 21
49157: PUSH
49158: LD_INT 0
49160: ST_TO_ADDR
// hc_class := class_phororhacos ;
49161: LD_ADDR_OWVAR 28
49165: PUSH
49166: LD_INT 18
49168: ST_TO_ADDR
// hc_gallery :=  ;
49169: LD_ADDR_OWVAR 33
49173: PUSH
49174: LD_STRING 
49176: ST_TO_ADDR
// end ;
49177: LD_VAR 0 1
49181: RET
// export function PrepareHorse ( ) ; begin
49182: LD_INT 0
49184: PPUSH
// uc_side := 0 ;
49185: LD_ADDR_OWVAR 20
49189: PUSH
49190: LD_INT 0
49192: ST_TO_ADDR
// uc_nation := 0 ;
49193: LD_ADDR_OWVAR 21
49197: PUSH
49198: LD_INT 0
49200: ST_TO_ADDR
// hc_class := class_horse ;
49201: LD_ADDR_OWVAR 28
49205: PUSH
49206: LD_INT 21
49208: ST_TO_ADDR
// hc_gallery :=  ;
49209: LD_ADDR_OWVAR 33
49213: PUSH
49214: LD_STRING 
49216: ST_TO_ADDR
// end ;
49217: LD_VAR 0 1
49221: RET
// export function PrepareMastodont ( ) ; begin
49222: LD_INT 0
49224: PPUSH
// uc_side := 0 ;
49225: LD_ADDR_OWVAR 20
49229: PUSH
49230: LD_INT 0
49232: ST_TO_ADDR
// uc_nation := 0 ;
49233: LD_ADDR_OWVAR 21
49237: PUSH
49238: LD_INT 0
49240: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49241: LD_ADDR_OWVAR 37
49245: PUSH
49246: LD_INT 31
49248: ST_TO_ADDR
// vc_control := control_rider ;
49249: LD_ADDR_OWVAR 38
49253: PUSH
49254: LD_INT 4
49256: ST_TO_ADDR
// end ;
49257: LD_VAR 0 1
49261: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49262: LD_INT 0
49264: PPUSH
49265: PPUSH
49266: PPUSH
// uc_side = 0 ;
49267: LD_ADDR_OWVAR 20
49271: PUSH
49272: LD_INT 0
49274: ST_TO_ADDR
// uc_nation = 0 ;
49275: LD_ADDR_OWVAR 21
49279: PUSH
49280: LD_INT 0
49282: ST_TO_ADDR
// InitHc_All ( ) ;
49283: CALL_OW 584
// InitVc ;
49287: CALL_OW 20
// if mastodonts then
49291: LD_VAR 0 6
49295: IFFALSE 49362
// for i = 1 to mastodonts do
49297: LD_ADDR_VAR 0 11
49301: PUSH
49302: DOUBLE
49303: LD_INT 1
49305: DEC
49306: ST_TO_ADDR
49307: LD_VAR 0 6
49311: PUSH
49312: FOR_TO
49313: IFFALSE 49360
// begin vc_chassis := 31 ;
49315: LD_ADDR_OWVAR 37
49319: PUSH
49320: LD_INT 31
49322: ST_TO_ADDR
// vc_control := control_rider ;
49323: LD_ADDR_OWVAR 38
49327: PUSH
49328: LD_INT 4
49330: ST_TO_ADDR
// animal := CreateVehicle ;
49331: LD_ADDR_VAR 0 12
49335: PUSH
49336: CALL_OW 45
49340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49341: LD_VAR 0 12
49345: PPUSH
49346: LD_VAR 0 8
49350: PPUSH
49351: LD_INT 0
49353: PPUSH
49354: CALL 51497 0 3
// end ;
49358: GO 49312
49360: POP
49361: POP
// if horses then
49362: LD_VAR 0 5
49366: IFFALSE 49433
// for i = 1 to horses do
49368: LD_ADDR_VAR 0 11
49372: PUSH
49373: DOUBLE
49374: LD_INT 1
49376: DEC
49377: ST_TO_ADDR
49378: LD_VAR 0 5
49382: PUSH
49383: FOR_TO
49384: IFFALSE 49431
// begin hc_class := 21 ;
49386: LD_ADDR_OWVAR 28
49390: PUSH
49391: LD_INT 21
49393: ST_TO_ADDR
// hc_gallery :=  ;
49394: LD_ADDR_OWVAR 33
49398: PUSH
49399: LD_STRING 
49401: ST_TO_ADDR
// animal := CreateHuman ;
49402: LD_ADDR_VAR 0 12
49406: PUSH
49407: CALL_OW 44
49411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49412: LD_VAR 0 12
49416: PPUSH
49417: LD_VAR 0 8
49421: PPUSH
49422: LD_INT 0
49424: PPUSH
49425: CALL 51497 0 3
// end ;
49429: GO 49383
49431: POP
49432: POP
// if birds then
49433: LD_VAR 0 1
49437: IFFALSE 49504
// for i = 1 to birds do
49439: LD_ADDR_VAR 0 11
49443: PUSH
49444: DOUBLE
49445: LD_INT 1
49447: DEC
49448: ST_TO_ADDR
49449: LD_VAR 0 1
49453: PUSH
49454: FOR_TO
49455: IFFALSE 49502
// begin hc_class = 18 ;
49457: LD_ADDR_OWVAR 28
49461: PUSH
49462: LD_INT 18
49464: ST_TO_ADDR
// hc_gallery =  ;
49465: LD_ADDR_OWVAR 33
49469: PUSH
49470: LD_STRING 
49472: ST_TO_ADDR
// animal := CreateHuman ;
49473: LD_ADDR_VAR 0 12
49477: PUSH
49478: CALL_OW 44
49482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49483: LD_VAR 0 12
49487: PPUSH
49488: LD_VAR 0 8
49492: PPUSH
49493: LD_INT 0
49495: PPUSH
49496: CALL 51497 0 3
// end ;
49500: GO 49454
49502: POP
49503: POP
// if tigers then
49504: LD_VAR 0 2
49508: IFFALSE 49592
// for i = 1 to tigers do
49510: LD_ADDR_VAR 0 11
49514: PUSH
49515: DOUBLE
49516: LD_INT 1
49518: DEC
49519: ST_TO_ADDR
49520: LD_VAR 0 2
49524: PUSH
49525: FOR_TO
49526: IFFALSE 49590
// begin hc_class = class_tiger ;
49528: LD_ADDR_OWVAR 28
49532: PUSH
49533: LD_INT 14
49535: ST_TO_ADDR
// hc_gallery =  ;
49536: LD_ADDR_OWVAR 33
49540: PUSH
49541: LD_STRING 
49543: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49544: LD_ADDR_OWVAR 35
49548: PUSH
49549: LD_INT 7
49551: NEG
49552: PPUSH
49553: LD_INT 7
49555: PPUSH
49556: CALL_OW 12
49560: ST_TO_ADDR
// animal := CreateHuman ;
49561: LD_ADDR_VAR 0 12
49565: PUSH
49566: CALL_OW 44
49570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49571: LD_VAR 0 12
49575: PPUSH
49576: LD_VAR 0 8
49580: PPUSH
49581: LD_INT 0
49583: PPUSH
49584: CALL 51497 0 3
// end ;
49588: GO 49525
49590: POP
49591: POP
// if apemans then
49592: LD_VAR 0 3
49596: IFFALSE 49719
// for i = 1 to apemans do
49598: LD_ADDR_VAR 0 11
49602: PUSH
49603: DOUBLE
49604: LD_INT 1
49606: DEC
49607: ST_TO_ADDR
49608: LD_VAR 0 3
49612: PUSH
49613: FOR_TO
49614: IFFALSE 49717
// begin hc_class = class_apeman ;
49616: LD_ADDR_OWVAR 28
49620: PUSH
49621: LD_INT 12
49623: ST_TO_ADDR
// hc_gallery =  ;
49624: LD_ADDR_OWVAR 33
49628: PUSH
49629: LD_STRING 
49631: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49632: LD_ADDR_OWVAR 35
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PPUSH
49641: LD_INT 2
49643: PPUSH
49644: CALL_OW 12
49648: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49649: LD_ADDR_OWVAR 31
49653: PUSH
49654: LD_INT 1
49656: PPUSH
49657: LD_INT 3
49659: PPUSH
49660: CALL_OW 12
49664: PUSH
49665: LD_INT 1
49667: PPUSH
49668: LD_INT 3
49670: PPUSH
49671: CALL_OW 12
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// animal := CreateHuman ;
49688: LD_ADDR_VAR 0 12
49692: PUSH
49693: CALL_OW 44
49697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49698: LD_VAR 0 12
49702: PPUSH
49703: LD_VAR 0 8
49707: PPUSH
49708: LD_INT 0
49710: PPUSH
49711: CALL 51497 0 3
// end ;
49715: GO 49613
49717: POP
49718: POP
// if enchidnas then
49719: LD_VAR 0 4
49723: IFFALSE 49790
// for i = 1 to enchidnas do
49725: LD_ADDR_VAR 0 11
49729: PUSH
49730: DOUBLE
49731: LD_INT 1
49733: DEC
49734: ST_TO_ADDR
49735: LD_VAR 0 4
49739: PUSH
49740: FOR_TO
49741: IFFALSE 49788
// begin hc_class = 13 ;
49743: LD_ADDR_OWVAR 28
49747: PUSH
49748: LD_INT 13
49750: ST_TO_ADDR
// hc_gallery =  ;
49751: LD_ADDR_OWVAR 33
49755: PUSH
49756: LD_STRING 
49758: ST_TO_ADDR
// animal := CreateHuman ;
49759: LD_ADDR_VAR 0 12
49763: PUSH
49764: CALL_OW 44
49768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49769: LD_VAR 0 12
49773: PPUSH
49774: LD_VAR 0 8
49778: PPUSH
49779: LD_INT 0
49781: PPUSH
49782: CALL 51497 0 3
// end ;
49786: GO 49740
49788: POP
49789: POP
// if fishes then
49790: LD_VAR 0 7
49794: IFFALSE 49861
// for i = 1 to fishes do
49796: LD_ADDR_VAR 0 11
49800: PUSH
49801: DOUBLE
49802: LD_INT 1
49804: DEC
49805: ST_TO_ADDR
49806: LD_VAR 0 7
49810: PUSH
49811: FOR_TO
49812: IFFALSE 49859
// begin hc_class = 20 ;
49814: LD_ADDR_OWVAR 28
49818: PUSH
49819: LD_INT 20
49821: ST_TO_ADDR
// hc_gallery =  ;
49822: LD_ADDR_OWVAR 33
49826: PUSH
49827: LD_STRING 
49829: ST_TO_ADDR
// animal := CreateHuman ;
49830: LD_ADDR_VAR 0 12
49834: PUSH
49835: CALL_OW 44
49839: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49840: LD_VAR 0 12
49844: PPUSH
49845: LD_VAR 0 9
49849: PPUSH
49850: LD_INT 0
49852: PPUSH
49853: CALL 51497 0 3
// end ;
49857: GO 49811
49859: POP
49860: POP
// end ;
49861: LD_VAR 0 10
49865: RET
// export function WantHeal ( sci , unit ) ; begin
49866: LD_INT 0
49868: PPUSH
// if GetTaskList ( sci ) > 0 then
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL_OW 437
49878: PUSH
49879: LD_INT 0
49881: GREATER
49882: IFFALSE 49952
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49884: LD_VAR 0 1
49888: PPUSH
49889: CALL_OW 437
49893: PUSH
49894: LD_INT 1
49896: ARRAY
49897: PUSH
49898: LD_INT 1
49900: ARRAY
49901: PUSH
49902: LD_STRING l
49904: EQUAL
49905: PUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 437
49915: PUSH
49916: LD_INT 1
49918: ARRAY
49919: PUSH
49920: LD_INT 4
49922: ARRAY
49923: PUSH
49924: LD_VAR 0 2
49928: EQUAL
49929: AND
49930: IFFALSE 49942
// result := true else
49932: LD_ADDR_VAR 0 3
49936: PUSH
49937: LD_INT 1
49939: ST_TO_ADDR
49940: GO 49950
// result := false ;
49942: LD_ADDR_VAR 0 3
49946: PUSH
49947: LD_INT 0
49949: ST_TO_ADDR
// end else
49950: GO 49960
// result := false ;
49952: LD_ADDR_VAR 0 3
49956: PUSH
49957: LD_INT 0
49959: ST_TO_ADDR
// end ;
49960: LD_VAR 0 3
49964: RET
// export function HealTarget ( sci ) ; begin
49965: LD_INT 0
49967: PPUSH
// if not sci then
49968: LD_VAR 0 1
49972: NOT
49973: IFFALSE 49977
// exit ;
49975: GO 50042
// result := 0 ;
49977: LD_ADDR_VAR 0 2
49981: PUSH
49982: LD_INT 0
49984: ST_TO_ADDR
// if GetTaskList ( sci ) then
49985: LD_VAR 0 1
49989: PPUSH
49990: CALL_OW 437
49994: IFFALSE 50042
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 437
50005: PUSH
50006: LD_INT 1
50008: ARRAY
50009: PUSH
50010: LD_INT 1
50012: ARRAY
50013: PUSH
50014: LD_STRING l
50016: EQUAL
50017: IFFALSE 50042
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50019: LD_ADDR_VAR 0 2
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: CALL_OW 437
50033: PUSH
50034: LD_INT 1
50036: ARRAY
50037: PUSH
50038: LD_INT 4
50040: ARRAY
50041: ST_TO_ADDR
// end ;
50042: LD_VAR 0 2
50046: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50047: LD_INT 0
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
// if not base_units then
50053: LD_VAR 0 1
50057: NOT
50058: IFFALSE 50062
// exit ;
50060: GO 50149
// result := false ;
50062: LD_ADDR_VAR 0 2
50066: PUSH
50067: LD_INT 0
50069: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50070: LD_ADDR_VAR 0 5
50074: PUSH
50075: LD_VAR 0 1
50079: PPUSH
50080: LD_INT 21
50082: PUSH
50083: LD_INT 3
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PPUSH
50090: CALL_OW 72
50094: ST_TO_ADDR
// if not tmp then
50095: LD_VAR 0 5
50099: NOT
50100: IFFALSE 50104
// exit ;
50102: GO 50149
// for i in tmp do
50104: LD_ADDR_VAR 0 3
50108: PUSH
50109: LD_VAR 0 5
50113: PUSH
50114: FOR_IN
50115: IFFALSE 50147
// begin result := EnemyInRange ( i , 22 ) ;
50117: LD_ADDR_VAR 0 2
50121: PUSH
50122: LD_VAR 0 3
50126: PPUSH
50127: LD_INT 22
50129: PPUSH
50130: CALL 47835 0 2
50134: ST_TO_ADDR
// if result then
50135: LD_VAR 0 2
50139: IFFALSE 50145
// exit ;
50141: POP
50142: POP
50143: GO 50149
// end ;
50145: GO 50114
50147: POP
50148: POP
// end ;
50149: LD_VAR 0 2
50153: RET
// export function FilterByTag ( units , tag ) ; begin
50154: LD_INT 0
50156: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_VAR 0 1
50166: PPUSH
50167: LD_INT 120
50169: PUSH
50170: LD_VAR 0 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PPUSH
50179: CALL_OW 72
50183: ST_TO_ADDR
// end ;
50184: LD_VAR 0 3
50188: RET
// export function IsDriver ( un ) ; begin
50189: LD_INT 0
50191: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50192: LD_ADDR_VAR 0 2
50196: PUSH
50197: LD_VAR 0 1
50201: PUSH
50202: LD_INT 55
50204: PUSH
50205: EMPTY
50206: LIST
50207: PPUSH
50208: CALL_OW 69
50212: IN
50213: ST_TO_ADDR
// end ;
50214: LD_VAR 0 2
50218: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50219: LD_INT 0
50221: PPUSH
50222: PPUSH
// list := [ ] ;
50223: LD_ADDR_VAR 0 5
50227: PUSH
50228: EMPTY
50229: ST_TO_ADDR
// case d of 0 :
50230: LD_VAR 0 3
50234: PUSH
50235: LD_INT 0
50237: DOUBLE
50238: EQUAL
50239: IFTRUE 50243
50241: GO 50376
50243: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50244: LD_ADDR_VAR 0 5
50248: PUSH
50249: LD_VAR 0 1
50253: PUSH
50254: LD_INT 4
50256: MINUS
50257: PUSH
50258: LD_VAR 0 2
50262: PUSH
50263: LD_INT 4
50265: MINUS
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: PUSH
50275: LD_VAR 0 1
50279: PUSH
50280: LD_INT 3
50282: MINUS
50283: PUSH
50284: LD_VAR 0 2
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: LIST
50296: PUSH
50297: LD_VAR 0 1
50301: PUSH
50302: LD_INT 4
50304: PLUS
50305: PUSH
50306: LD_VAR 0 2
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: PUSH
50319: LD_VAR 0 1
50323: PUSH
50324: LD_INT 3
50326: PLUS
50327: PUSH
50328: LD_VAR 0 2
50332: PUSH
50333: LD_INT 3
50335: PLUS
50336: PUSH
50337: LD_INT 5
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: PUSH
50345: LD_VAR 0 1
50349: PUSH
50350: LD_VAR 0 2
50354: PUSH
50355: LD_INT 4
50357: PLUS
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// end ; 1 :
50374: GO 51074
50376: LD_INT 1
50378: DOUBLE
50379: EQUAL
50380: IFTRUE 50384
50382: GO 50517
50384: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50385: LD_ADDR_VAR 0 5
50389: PUSH
50390: LD_VAR 0 1
50394: PUSH
50395: LD_VAR 0 2
50399: PUSH
50400: LD_INT 4
50402: MINUS
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: PUSH
50412: LD_VAR 0 1
50416: PUSH
50417: LD_INT 3
50419: MINUS
50420: PUSH
50421: LD_VAR 0 2
50425: PUSH
50426: LD_INT 3
50428: MINUS
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: PUSH
50438: LD_VAR 0 1
50442: PUSH
50443: LD_INT 4
50445: MINUS
50446: PUSH
50447: LD_VAR 0 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: PUSH
50460: LD_VAR 0 1
50464: PUSH
50465: LD_VAR 0 2
50469: PUSH
50470: LD_INT 3
50472: PLUS
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: PUSH
50482: LD_VAR 0 1
50486: PUSH
50487: LD_INT 4
50489: PLUS
50490: PUSH
50491: LD_VAR 0 2
50495: PUSH
50496: LD_INT 4
50498: PLUS
50499: PUSH
50500: LD_INT 5
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// end ; 2 :
50515: GO 51074
50517: LD_INT 2
50519: DOUBLE
50520: EQUAL
50521: IFTRUE 50525
50523: GO 50654
50525: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50526: LD_ADDR_VAR 0 5
50530: PUSH
50531: LD_VAR 0 1
50535: PUSH
50536: LD_VAR 0 2
50540: PUSH
50541: LD_INT 3
50543: MINUS
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: PUSH
50553: LD_VAR 0 1
50557: PUSH
50558: LD_INT 4
50560: PLUS
50561: PUSH
50562: LD_VAR 0 2
50566: PUSH
50567: LD_INT 4
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: PUSH
50575: LD_VAR 0 1
50579: PUSH
50580: LD_VAR 0 2
50584: PUSH
50585: LD_INT 4
50587: PLUS
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: LIST
50596: PUSH
50597: LD_VAR 0 1
50601: PUSH
50602: LD_INT 3
50604: MINUS
50605: PUSH
50606: LD_VAR 0 2
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: PUSH
50619: LD_VAR 0 1
50623: PUSH
50624: LD_INT 4
50626: MINUS
50627: PUSH
50628: LD_VAR 0 2
50632: PUSH
50633: LD_INT 4
50635: MINUS
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// end ; 3 :
50652: GO 51074
50654: LD_INT 3
50656: DOUBLE
50657: EQUAL
50658: IFTRUE 50662
50660: GO 50795
50662: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50663: LD_ADDR_VAR 0 5
50667: PUSH
50668: LD_VAR 0 1
50672: PUSH
50673: LD_INT 3
50675: PLUS
50676: PUSH
50677: LD_VAR 0 2
50681: PUSH
50682: LD_INT 4
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: PUSH
50690: LD_VAR 0 1
50694: PUSH
50695: LD_INT 4
50697: PLUS
50698: PUSH
50699: LD_VAR 0 2
50703: PUSH
50704: LD_INT 4
50706: PLUS
50707: PUSH
50708: LD_INT 5
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: PUSH
50716: LD_VAR 0 1
50720: PUSH
50721: LD_INT 4
50723: MINUS
50724: PUSH
50725: LD_VAR 0 2
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: PUSH
50738: LD_VAR 0 1
50742: PUSH
50743: LD_VAR 0 2
50747: PUSH
50748: LD_INT 4
50750: MINUS
50751: PUSH
50752: LD_INT 3
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: PUSH
50760: LD_VAR 0 1
50764: PUSH
50765: LD_INT 3
50767: MINUS
50768: PUSH
50769: LD_VAR 0 2
50773: PUSH
50774: LD_INT 3
50776: MINUS
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// end ; 4 :
50793: GO 51074
50795: LD_INT 4
50797: DOUBLE
50798: EQUAL
50799: IFTRUE 50803
50801: GO 50936
50803: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50804: LD_ADDR_VAR 0 5
50808: PUSH
50809: LD_VAR 0 1
50813: PUSH
50814: LD_VAR 0 2
50818: PUSH
50819: LD_INT 4
50821: PLUS
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: PUSH
50831: LD_VAR 0 1
50835: PUSH
50836: LD_INT 3
50838: PLUS
50839: PUSH
50840: LD_VAR 0 2
50844: PUSH
50845: LD_INT 3
50847: PLUS
50848: PUSH
50849: LD_INT 5
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: PUSH
50857: LD_VAR 0 1
50861: PUSH
50862: LD_INT 4
50864: PLUS
50865: PUSH
50866: LD_VAR 0 2
50870: PUSH
50871: LD_INT 4
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: PUSH
50879: LD_VAR 0 1
50883: PUSH
50884: LD_VAR 0 2
50888: PUSH
50889: LD_INT 3
50891: MINUS
50892: PUSH
50893: LD_INT 3
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: PUSH
50901: LD_VAR 0 1
50905: PUSH
50906: LD_INT 4
50908: MINUS
50909: PUSH
50910: LD_VAR 0 2
50914: PUSH
50915: LD_INT 4
50917: MINUS
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// end ; 5 :
50934: GO 51074
50936: LD_INT 5
50938: DOUBLE
50939: EQUAL
50940: IFTRUE 50944
50942: GO 51073
50944: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50945: LD_ADDR_VAR 0 5
50949: PUSH
50950: LD_VAR 0 1
50954: PUSH
50955: LD_INT 4
50957: MINUS
50958: PUSH
50959: LD_VAR 0 2
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: LIST
50971: PUSH
50972: LD_VAR 0 1
50976: PUSH
50977: LD_VAR 0 2
50981: PUSH
50982: LD_INT 4
50984: MINUS
50985: PUSH
50986: LD_INT 3
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: PUSH
50994: LD_VAR 0 1
50998: PUSH
50999: LD_INT 4
51001: PLUS
51002: PUSH
51003: LD_VAR 0 2
51007: PUSH
51008: LD_INT 4
51010: PLUS
51011: PUSH
51012: LD_INT 5
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: PUSH
51020: LD_VAR 0 1
51024: PUSH
51025: LD_INT 3
51027: PLUS
51028: PUSH
51029: LD_VAR 0 2
51033: PUSH
51034: LD_INT 4
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: PUSH
51042: LD_VAR 0 1
51046: PUSH
51047: LD_VAR 0 2
51051: PUSH
51052: LD_INT 3
51054: PLUS
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// end ; end ;
51071: GO 51074
51073: POP
// result := list ;
51074: LD_ADDR_VAR 0 4
51078: PUSH
51079: LD_VAR 0 5
51083: ST_TO_ADDR
// end ;
51084: LD_VAR 0 4
51088: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51089: LD_INT 0
51091: PPUSH
51092: PPUSH
51093: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51094: LD_VAR 0 1
51098: NOT
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: IN
51123: NOT
51124: OR
51125: IFFALSE 51129
// exit ;
51127: GO 51221
// tmp := [ ] ;
51129: LD_ADDR_VAR 0 5
51133: PUSH
51134: EMPTY
51135: ST_TO_ADDR
// for i in units do
51136: LD_ADDR_VAR 0 4
51140: PUSH
51141: LD_VAR 0 1
51145: PUSH
51146: FOR_IN
51147: IFFALSE 51190
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51149: LD_ADDR_VAR 0 5
51153: PUSH
51154: LD_VAR 0 5
51158: PPUSH
51159: LD_VAR 0 5
51163: PUSH
51164: LD_INT 1
51166: PLUS
51167: PPUSH
51168: LD_VAR 0 4
51172: PPUSH
51173: LD_VAR 0 2
51177: PPUSH
51178: CALL_OW 259
51182: PPUSH
51183: CALL_OW 2
51187: ST_TO_ADDR
51188: GO 51146
51190: POP
51191: POP
// if not tmp then
51192: LD_VAR 0 5
51196: NOT
51197: IFFALSE 51201
// exit ;
51199: GO 51221
// result := SortListByListDesc ( units , tmp ) ;
51201: LD_ADDR_VAR 0 3
51205: PUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: LD_VAR 0 5
51215: PPUSH
51216: CALL_OW 77
51220: ST_TO_ADDR
// end ;
51221: LD_VAR 0 3
51225: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51226: LD_INT 0
51228: PPUSH
51229: PPUSH
51230: PPUSH
// result := false ;
51231: LD_ADDR_VAR 0 3
51235: PUSH
51236: LD_INT 0
51238: ST_TO_ADDR
// x := GetX ( building ) ;
51239: LD_ADDR_VAR 0 4
51243: PUSH
51244: LD_VAR 0 2
51248: PPUSH
51249: CALL_OW 250
51253: ST_TO_ADDR
// y := GetY ( building ) ;
51254: LD_ADDR_VAR 0 5
51258: PUSH
51259: LD_VAR 0 2
51263: PPUSH
51264: CALL_OW 251
51268: ST_TO_ADDR
// if not building or not x or not y then
51269: LD_VAR 0 2
51273: NOT
51274: PUSH
51275: LD_VAR 0 4
51279: NOT
51280: OR
51281: PUSH
51282: LD_VAR 0 5
51286: NOT
51287: OR
51288: IFFALSE 51292
// exit ;
51290: GO 51384
// if GetTaskList ( unit ) then
51292: LD_VAR 0 1
51296: PPUSH
51297: CALL_OW 437
51301: IFFALSE 51384
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51303: LD_STRING e
51305: PUSH
51306: LD_VAR 0 1
51310: PPUSH
51311: CALL_OW 437
51315: PUSH
51316: LD_INT 1
51318: ARRAY
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: EQUAL
51324: PUSH
51325: LD_VAR 0 4
51329: PUSH
51330: LD_VAR 0 1
51334: PPUSH
51335: CALL_OW 437
51339: PUSH
51340: LD_INT 1
51342: ARRAY
51343: PUSH
51344: LD_INT 2
51346: ARRAY
51347: EQUAL
51348: AND
51349: PUSH
51350: LD_VAR 0 5
51354: PUSH
51355: LD_VAR 0 1
51359: PPUSH
51360: CALL_OW 437
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PUSH
51369: LD_INT 3
51371: ARRAY
51372: EQUAL
51373: AND
51374: IFFALSE 51384
// result := true end ;
51376: LD_ADDR_VAR 0 3
51380: PUSH
51381: LD_INT 1
51383: ST_TO_ADDR
// end ;
51384: LD_VAR 0 3
51388: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51389: LD_INT 0
51391: PPUSH
// result := false ;
51392: LD_ADDR_VAR 0 4
51396: PUSH
51397: LD_INT 0
51399: ST_TO_ADDR
// if GetTaskList ( unit ) then
51400: LD_VAR 0 1
51404: PPUSH
51405: CALL_OW 437
51409: IFFALSE 51492
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51411: LD_STRING M
51413: PUSH
51414: LD_VAR 0 1
51418: PPUSH
51419: CALL_OW 437
51423: PUSH
51424: LD_INT 1
51426: ARRAY
51427: PUSH
51428: LD_INT 1
51430: ARRAY
51431: EQUAL
51432: PUSH
51433: LD_VAR 0 2
51437: PUSH
51438: LD_VAR 0 1
51442: PPUSH
51443: CALL_OW 437
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: PUSH
51452: LD_INT 2
51454: ARRAY
51455: EQUAL
51456: AND
51457: PUSH
51458: LD_VAR 0 3
51462: PUSH
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL_OW 437
51472: PUSH
51473: LD_INT 1
51475: ARRAY
51476: PUSH
51477: LD_INT 3
51479: ARRAY
51480: EQUAL
51481: AND
51482: IFFALSE 51492
// result := true ;
51484: LD_ADDR_VAR 0 4
51488: PUSH
51489: LD_INT 1
51491: ST_TO_ADDR
// end ; end ;
51492: LD_VAR 0 4
51496: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51497: LD_INT 0
51499: PPUSH
51500: PPUSH
51501: PPUSH
51502: PPUSH
// if not unit or not area then
51503: LD_VAR 0 1
51507: NOT
51508: PUSH
51509: LD_VAR 0 2
51513: NOT
51514: OR
51515: IFFALSE 51519
// exit ;
51517: GO 51683
// tmp := AreaToList ( area , i ) ;
51519: LD_ADDR_VAR 0 6
51523: PUSH
51524: LD_VAR 0 2
51528: PPUSH
51529: LD_VAR 0 5
51533: PPUSH
51534: CALL_OW 517
51538: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51539: LD_ADDR_VAR 0 5
51543: PUSH
51544: DOUBLE
51545: LD_INT 1
51547: DEC
51548: ST_TO_ADDR
51549: LD_VAR 0 6
51553: PUSH
51554: LD_INT 1
51556: ARRAY
51557: PUSH
51558: FOR_TO
51559: IFFALSE 51681
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51561: LD_ADDR_VAR 0 7
51565: PUSH
51566: LD_VAR 0 6
51570: PUSH
51571: LD_INT 1
51573: ARRAY
51574: PUSH
51575: LD_VAR 0 5
51579: ARRAY
51580: PUSH
51581: LD_VAR 0 6
51585: PUSH
51586: LD_INT 2
51588: ARRAY
51589: PUSH
51590: LD_VAR 0 5
51594: ARRAY
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51600: LD_VAR 0 7
51604: PUSH
51605: LD_INT 1
51607: ARRAY
51608: PPUSH
51609: LD_VAR 0 7
51613: PUSH
51614: LD_INT 2
51616: ARRAY
51617: PPUSH
51618: CALL_OW 428
51622: PUSH
51623: LD_INT 0
51625: EQUAL
51626: IFFALSE 51679
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51628: LD_VAR 0 1
51632: PPUSH
51633: LD_VAR 0 7
51637: PUSH
51638: LD_INT 1
51640: ARRAY
51641: PPUSH
51642: LD_VAR 0 7
51646: PUSH
51647: LD_INT 2
51649: ARRAY
51650: PPUSH
51651: LD_VAR 0 3
51655: PPUSH
51656: CALL_OW 48
// result := IsPlaced ( unit ) ;
51660: LD_ADDR_VAR 0 4
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: CALL_OW 305
51674: ST_TO_ADDR
// exit ;
51675: POP
51676: POP
51677: GO 51683
// end ; end ;
51679: GO 51558
51681: POP
51682: POP
// end ;
51683: LD_VAR 0 4
51687: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51688: LD_INT 0
51690: PPUSH
51691: PPUSH
51692: PPUSH
// if not side or side > 8 then
51693: LD_VAR 0 1
51697: NOT
51698: PUSH
51699: LD_VAR 0 1
51703: PUSH
51704: LD_INT 8
51706: GREATER
51707: OR
51708: IFFALSE 51712
// exit ;
51710: GO 51899
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51712: LD_ADDR_VAR 0 4
51716: PUSH
51717: LD_INT 22
51719: PUSH
51720: LD_VAR 0 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 21
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PPUSH
51743: CALL_OW 69
51747: ST_TO_ADDR
// if not tmp then
51748: LD_VAR 0 4
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 51899
// enable_addtolog := true ;
51757: LD_ADDR_OWVAR 81
51761: PUSH
51762: LD_INT 1
51764: ST_TO_ADDR
// AddToLog ( [ ) ;
51765: LD_STRING [
51767: PPUSH
51768: CALL_OW 561
// for i in tmp do
51772: LD_ADDR_VAR 0 3
51776: PUSH
51777: LD_VAR 0 4
51781: PUSH
51782: FOR_IN
51783: IFFALSE 51890
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51785: LD_STRING [
51787: PUSH
51788: LD_VAR 0 3
51792: PPUSH
51793: CALL_OW 266
51797: STR
51798: PUSH
51799: LD_STRING , 
51801: STR
51802: PUSH
51803: LD_VAR 0 3
51807: PPUSH
51808: CALL_OW 250
51812: STR
51813: PUSH
51814: LD_STRING , 
51816: STR
51817: PUSH
51818: LD_VAR 0 3
51822: PPUSH
51823: CALL_OW 251
51827: STR
51828: PUSH
51829: LD_STRING , 
51831: STR
51832: PUSH
51833: LD_VAR 0 3
51837: PPUSH
51838: CALL_OW 254
51842: STR
51843: PUSH
51844: LD_STRING , 
51846: STR
51847: PUSH
51848: LD_VAR 0 3
51852: PPUSH
51853: LD_INT 1
51855: PPUSH
51856: CALL_OW 268
51860: STR
51861: PUSH
51862: LD_STRING , 
51864: STR
51865: PUSH
51866: LD_VAR 0 3
51870: PPUSH
51871: LD_INT 2
51873: PPUSH
51874: CALL_OW 268
51878: STR
51879: PUSH
51880: LD_STRING ],
51882: STR
51883: PPUSH
51884: CALL_OW 561
// end ;
51888: GO 51782
51890: POP
51891: POP
// AddToLog ( ]; ) ;
51892: LD_STRING ];
51894: PPUSH
51895: CALL_OW 561
// end ;
51899: LD_VAR 0 2
51903: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51904: LD_INT 0
51906: PPUSH
51907: PPUSH
51908: PPUSH
51909: PPUSH
51910: PPUSH
// if not area or not rate or not max then
51911: LD_VAR 0 1
51915: NOT
51916: PUSH
51917: LD_VAR 0 2
51921: NOT
51922: OR
51923: PUSH
51924: LD_VAR 0 4
51928: NOT
51929: OR
51930: IFFALSE 51934
// exit ;
51932: GO 52123
// while 1 do
51934: LD_INT 1
51936: IFFALSE 52123
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51938: LD_ADDR_VAR 0 9
51942: PUSH
51943: LD_VAR 0 1
51947: PPUSH
51948: LD_INT 1
51950: PPUSH
51951: CALL_OW 287
51955: PUSH
51956: LD_INT 10
51958: MUL
51959: ST_TO_ADDR
// r := rate / 10 ;
51960: LD_ADDR_VAR 0 7
51964: PUSH
51965: LD_VAR 0 2
51969: PUSH
51970: LD_INT 10
51972: DIVREAL
51973: ST_TO_ADDR
// time := 1 1$00 ;
51974: LD_ADDR_VAR 0 8
51978: PUSH
51979: LD_INT 2100
51981: ST_TO_ADDR
// if amount < min then
51982: LD_VAR 0 9
51986: PUSH
51987: LD_VAR 0 3
51991: LESS
51992: IFFALSE 52010
// r := r * 2 else
51994: LD_ADDR_VAR 0 7
51998: PUSH
51999: LD_VAR 0 7
52003: PUSH
52004: LD_INT 2
52006: MUL
52007: ST_TO_ADDR
52008: GO 52036
// if amount > max then
52010: LD_VAR 0 9
52014: PUSH
52015: LD_VAR 0 4
52019: GREATER
52020: IFFALSE 52036
// r := r / 2 ;
52022: LD_ADDR_VAR 0 7
52026: PUSH
52027: LD_VAR 0 7
52031: PUSH
52032: LD_INT 2
52034: DIVREAL
52035: ST_TO_ADDR
// time := time / r ;
52036: LD_ADDR_VAR 0 8
52040: PUSH
52041: LD_VAR 0 8
52045: PUSH
52046: LD_VAR 0 7
52050: DIVREAL
52051: ST_TO_ADDR
// if time < 0 then
52052: LD_VAR 0 8
52056: PUSH
52057: LD_INT 0
52059: LESS
52060: IFFALSE 52077
// time := time * - 1 ;
52062: LD_ADDR_VAR 0 8
52066: PUSH
52067: LD_VAR 0 8
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: MUL
52076: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52077: LD_VAR 0 8
52081: PUSH
52082: LD_INT 35
52084: PPUSH
52085: LD_INT 875
52087: PPUSH
52088: CALL_OW 12
52092: PLUS
52093: PPUSH
52094: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52098: LD_INT 1
52100: PPUSH
52101: LD_INT 5
52103: PPUSH
52104: CALL_OW 12
52108: PPUSH
52109: LD_VAR 0 1
52113: PPUSH
52114: LD_INT 1
52116: PPUSH
52117: CALL_OW 55
// end ;
52121: GO 51934
// end ;
52123: LD_VAR 0 5
52127: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52128: LD_INT 0
52130: PPUSH
52131: PPUSH
52132: PPUSH
52133: PPUSH
52134: PPUSH
52135: PPUSH
52136: PPUSH
52137: PPUSH
// if not turrets or not factories then
52138: LD_VAR 0 1
52142: NOT
52143: PUSH
52144: LD_VAR 0 2
52148: NOT
52149: OR
52150: IFFALSE 52154
// exit ;
52152: GO 52461
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52154: LD_ADDR_VAR 0 10
52158: PUSH
52159: LD_INT 5
52161: PUSH
52162: LD_INT 6
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 4
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 24
52196: PUSH
52197: LD_INT 25
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 23
52206: PUSH
52207: LD_INT 27
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 42
52220: PUSH
52221: LD_INT 43
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 44
52230: PUSH
52231: LD_INT 46
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 45
52240: PUSH
52241: LD_INT 47
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// result := [ ] ;
52258: LD_ADDR_VAR 0 3
52262: PUSH
52263: EMPTY
52264: ST_TO_ADDR
// for i in turrets do
52265: LD_ADDR_VAR 0 4
52269: PUSH
52270: LD_VAR 0 1
52274: PUSH
52275: FOR_IN
52276: IFFALSE 52459
// begin nat := GetNation ( i ) ;
52278: LD_ADDR_VAR 0 7
52282: PUSH
52283: LD_VAR 0 4
52287: PPUSH
52288: CALL_OW 248
52292: ST_TO_ADDR
// weapon := 0 ;
52293: LD_ADDR_VAR 0 8
52297: PUSH
52298: LD_INT 0
52300: ST_TO_ADDR
// if not nat then
52301: LD_VAR 0 7
52305: NOT
52306: IFFALSE 52310
// continue ;
52308: GO 52275
// for j in list [ nat ] do
52310: LD_ADDR_VAR 0 5
52314: PUSH
52315: LD_VAR 0 10
52319: PUSH
52320: LD_VAR 0 7
52324: ARRAY
52325: PUSH
52326: FOR_IN
52327: IFFALSE 52368
// if GetBWeapon ( i ) = j [ 1 ] then
52329: LD_VAR 0 4
52333: PPUSH
52334: CALL_OW 269
52338: PUSH
52339: LD_VAR 0 5
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: EQUAL
52348: IFFALSE 52366
// begin weapon := j [ 2 ] ;
52350: LD_ADDR_VAR 0 8
52354: PUSH
52355: LD_VAR 0 5
52359: PUSH
52360: LD_INT 2
52362: ARRAY
52363: ST_TO_ADDR
// break ;
52364: GO 52368
// end ;
52366: GO 52326
52368: POP
52369: POP
// if not weapon then
52370: LD_VAR 0 8
52374: NOT
52375: IFFALSE 52379
// continue ;
52377: GO 52275
// for k in factories do
52379: LD_ADDR_VAR 0 6
52383: PUSH
52384: LD_VAR 0 2
52388: PUSH
52389: FOR_IN
52390: IFFALSE 52455
// begin weapons := AvailableWeaponList ( k ) ;
52392: LD_ADDR_VAR 0 9
52396: PUSH
52397: LD_VAR 0 6
52401: PPUSH
52402: CALL_OW 478
52406: ST_TO_ADDR
// if not weapons then
52407: LD_VAR 0 9
52411: NOT
52412: IFFALSE 52416
// continue ;
52414: GO 52389
// if weapon in weapons then
52416: LD_VAR 0 8
52420: PUSH
52421: LD_VAR 0 9
52425: IN
52426: IFFALSE 52453
// begin result := [ i , weapon ] ;
52428: LD_ADDR_VAR 0 3
52432: PUSH
52433: LD_VAR 0 4
52437: PUSH
52438: LD_VAR 0 8
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// exit ;
52447: POP
52448: POP
52449: POP
52450: POP
52451: GO 52461
// end ; end ;
52453: GO 52389
52455: POP
52456: POP
// end ;
52457: GO 52275
52459: POP
52460: POP
// end ;
52461: LD_VAR 0 3
52465: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52466: LD_INT 0
52468: PPUSH
// if not side or side > 8 then
52469: LD_VAR 0 3
52473: NOT
52474: PUSH
52475: LD_VAR 0 3
52479: PUSH
52480: LD_INT 8
52482: GREATER
52483: OR
52484: IFFALSE 52488
// exit ;
52486: GO 52547
// if not range then
52488: LD_VAR 0 4
52492: NOT
52493: IFFALSE 52504
// range := - 12 ;
52495: LD_ADDR_VAR 0 4
52499: PUSH
52500: LD_INT 12
52502: NEG
52503: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52504: LD_VAR 0 1
52508: PPUSH
52509: LD_VAR 0 2
52513: PPUSH
52514: LD_VAR 0 3
52518: PPUSH
52519: LD_VAR 0 4
52523: PPUSH
52524: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52528: LD_VAR 0 1
52532: PPUSH
52533: LD_VAR 0 2
52537: PPUSH
52538: LD_VAR 0 3
52542: PPUSH
52543: CALL_OW 331
// end ;
52547: LD_VAR 0 5
52551: RET
// export function Video ( mode ) ; begin
52552: LD_INT 0
52554: PPUSH
// ingame_video = mode ;
52555: LD_ADDR_OWVAR 52
52559: PUSH
52560: LD_VAR 0 1
52564: ST_TO_ADDR
// interface_hidden = mode ;
52565: LD_ADDR_OWVAR 54
52569: PUSH
52570: LD_VAR 0 1
52574: ST_TO_ADDR
// end ;
52575: LD_VAR 0 2
52579: RET
// export function Join ( array , element ) ; begin
52580: LD_INT 0
52582: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52583: LD_ADDR_VAR 0 3
52587: PUSH
52588: LD_VAR 0 1
52592: PPUSH
52593: LD_VAR 0 1
52597: PUSH
52598: LD_INT 1
52600: PLUS
52601: PPUSH
52602: LD_VAR 0 2
52606: PPUSH
52607: CALL_OW 1
52611: ST_TO_ADDR
// end ;
52612: LD_VAR 0 3
52616: RET
// export function JoinUnion ( array , element ) ; begin
52617: LD_INT 0
52619: PPUSH
// result := array union element ;
52620: LD_ADDR_VAR 0 3
52624: PUSH
52625: LD_VAR 0 1
52629: PUSH
52630: LD_VAR 0 2
52634: UNION
52635: ST_TO_ADDR
// end ;
52636: LD_VAR 0 3
52640: RET
// export function GetBehemoths ( side ) ; begin
52641: LD_INT 0
52643: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52644: LD_ADDR_VAR 0 2
52648: PUSH
52649: LD_INT 22
52651: PUSH
52652: LD_VAR 0 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 31
52663: PUSH
52664: LD_INT 25
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PPUSH
52675: CALL_OW 69
52679: ST_TO_ADDR
// end ;
52680: LD_VAR 0 2
52684: RET
// export function Shuffle ( array ) ; var i , index ; begin
52685: LD_INT 0
52687: PPUSH
52688: PPUSH
52689: PPUSH
// result := [ ] ;
52690: LD_ADDR_VAR 0 2
52694: PUSH
52695: EMPTY
52696: ST_TO_ADDR
// if not array then
52697: LD_VAR 0 1
52701: NOT
52702: IFFALSE 52706
// exit ;
52704: GO 52805
// Randomize ;
52706: CALL_OW 10
// for i = array downto 1 do
52710: LD_ADDR_VAR 0 3
52714: PUSH
52715: DOUBLE
52716: LD_VAR 0 1
52720: INC
52721: ST_TO_ADDR
52722: LD_INT 1
52724: PUSH
52725: FOR_DOWNTO
52726: IFFALSE 52803
// begin index := rand ( 1 , array ) ;
52728: LD_ADDR_VAR 0 4
52732: PUSH
52733: LD_INT 1
52735: PPUSH
52736: LD_VAR 0 1
52740: PPUSH
52741: CALL_OW 12
52745: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52746: LD_ADDR_VAR 0 2
52750: PUSH
52751: LD_VAR 0 2
52755: PPUSH
52756: LD_VAR 0 2
52760: PUSH
52761: LD_INT 1
52763: PLUS
52764: PPUSH
52765: LD_VAR 0 1
52769: PUSH
52770: LD_VAR 0 4
52774: ARRAY
52775: PPUSH
52776: CALL_OW 2
52780: ST_TO_ADDR
// array := Delete ( array , index ) ;
52781: LD_ADDR_VAR 0 1
52785: PUSH
52786: LD_VAR 0 1
52790: PPUSH
52791: LD_VAR 0 4
52795: PPUSH
52796: CALL_OW 3
52800: ST_TO_ADDR
// end ;
52801: GO 52725
52803: POP
52804: POP
// end ;
52805: LD_VAR 0 2
52809: RET
// export function GetBaseMaterials ( base ) ; begin
52810: LD_INT 0
52812: PPUSH
// result := [ 0 , 0 , 0 ] ;
52813: LD_ADDR_VAR 0 2
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// if not base then
52832: LD_VAR 0 1
52836: NOT
52837: IFFALSE 52841
// exit ;
52839: GO 52890
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52841: LD_ADDR_VAR 0 2
52845: PUSH
52846: LD_VAR 0 1
52850: PPUSH
52851: LD_INT 1
52853: PPUSH
52854: CALL_OW 275
52858: PUSH
52859: LD_VAR 0 1
52863: PPUSH
52864: LD_INT 2
52866: PPUSH
52867: CALL_OW 275
52871: PUSH
52872: LD_VAR 0 1
52876: PPUSH
52877: LD_INT 3
52879: PPUSH
52880: CALL_OW 275
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// end ;
52890: LD_VAR 0 2
52894: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52895: LD_INT 0
52897: PPUSH
52898: PPUSH
// result := array ;
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: LD_VAR 0 1
52908: ST_TO_ADDR
// if size >= result then
52909: LD_VAR 0 2
52913: PUSH
52914: LD_VAR 0 3
52918: GREATEREQUAL
52919: IFFALSE 52923
// exit ;
52921: GO 52973
// if size then
52923: LD_VAR 0 2
52927: IFFALSE 52973
// for i := array downto size do
52929: LD_ADDR_VAR 0 4
52933: PUSH
52934: DOUBLE
52935: LD_VAR 0 1
52939: INC
52940: ST_TO_ADDR
52941: LD_VAR 0 2
52945: PUSH
52946: FOR_DOWNTO
52947: IFFALSE 52971
// result := Delete ( result , result ) ;
52949: LD_ADDR_VAR 0 3
52953: PUSH
52954: LD_VAR 0 3
52958: PPUSH
52959: LD_VAR 0 3
52963: PPUSH
52964: CALL_OW 3
52968: ST_TO_ADDR
52969: GO 52946
52971: POP
52972: POP
// end ;
52973: LD_VAR 0 3
52977: RET
// export function ComExit ( unit ) ; var tmp ; begin
52978: LD_INT 0
52980: PPUSH
52981: PPUSH
// if not IsInUnit ( unit ) then
52982: LD_VAR 0 1
52986: PPUSH
52987: CALL_OW 310
52991: NOT
52992: IFFALSE 52996
// exit ;
52994: GO 53056
// tmp := IsInUnit ( unit ) ;
52996: LD_ADDR_VAR 0 3
53000: PUSH
53001: LD_VAR 0 1
53005: PPUSH
53006: CALL_OW 310
53010: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53011: LD_VAR 0 3
53015: PPUSH
53016: CALL_OW 247
53020: PUSH
53021: LD_INT 2
53023: EQUAL
53024: IFFALSE 53037
// ComExitVehicle ( unit ) else
53026: LD_VAR 0 1
53030: PPUSH
53031: CALL_OW 121
53035: GO 53046
// ComExitBuilding ( unit ) ;
53037: LD_VAR 0 1
53041: PPUSH
53042: CALL_OW 122
// result := tmp ;
53046: LD_ADDR_VAR 0 2
53050: PUSH
53051: LD_VAR 0 3
53055: ST_TO_ADDR
// end ;
53056: LD_VAR 0 2
53060: RET
// export function ComExitAll ( units ) ; var i ; begin
53061: LD_INT 0
53063: PPUSH
53064: PPUSH
// if not units then
53065: LD_VAR 0 1
53069: NOT
53070: IFFALSE 53074
// exit ;
53072: GO 53100
// for i in units do
53074: LD_ADDR_VAR 0 3
53078: PUSH
53079: LD_VAR 0 1
53083: PUSH
53084: FOR_IN
53085: IFFALSE 53098
// ComExit ( i ) ;
53087: LD_VAR 0 3
53091: PPUSH
53092: CALL 52978 0 1
53096: GO 53084
53098: POP
53099: POP
// end ;
53100: LD_VAR 0 2
53104: RET
// export function ResetHc ; begin
53105: LD_INT 0
53107: PPUSH
// InitHc ;
53108: CALL_OW 19
// hc_importance := 0 ;
53112: LD_ADDR_OWVAR 32
53116: PUSH
53117: LD_INT 0
53119: ST_TO_ADDR
// end ;
53120: LD_VAR 0 1
53124: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53125: LD_INT 0
53127: PPUSH
53128: PPUSH
53129: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53130: LD_ADDR_VAR 0 6
53134: PUSH
53135: LD_VAR 0 1
53139: PUSH
53140: LD_VAR 0 3
53144: PLUS
53145: PUSH
53146: LD_INT 2
53148: DIV
53149: ST_TO_ADDR
// if _x < 0 then
53150: LD_VAR 0 6
53154: PUSH
53155: LD_INT 0
53157: LESS
53158: IFFALSE 53175
// _x := _x * - 1 ;
53160: LD_ADDR_VAR 0 6
53164: PUSH
53165: LD_VAR 0 6
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: MUL
53174: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53175: LD_ADDR_VAR 0 7
53179: PUSH
53180: LD_VAR 0 2
53184: PUSH
53185: LD_VAR 0 4
53189: PLUS
53190: PUSH
53191: LD_INT 2
53193: DIV
53194: ST_TO_ADDR
// if _y < 0 then
53195: LD_VAR 0 7
53199: PUSH
53200: LD_INT 0
53202: LESS
53203: IFFALSE 53220
// _y := _y * - 1 ;
53205: LD_ADDR_VAR 0 7
53209: PUSH
53210: LD_VAR 0 7
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: MUL
53219: ST_TO_ADDR
// result := [ _x , _y ] ;
53220: LD_ADDR_VAR 0 5
53224: PUSH
53225: LD_VAR 0 6
53229: PUSH
53230: LD_VAR 0 7
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: ST_TO_ADDR
// end ;
53239: LD_VAR 0 5
53243: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53244: LD_INT 0
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
// task := GetTaskList ( unit ) ;
53250: LD_ADDR_VAR 0 7
53254: PUSH
53255: LD_VAR 0 1
53259: PPUSH
53260: CALL_OW 437
53264: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53265: LD_VAR 0 7
53269: NOT
53270: PUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: LD_VAR 0 2
53280: PPUSH
53281: CALL_OW 308
53285: NOT
53286: AND
53287: IFFALSE 53291
// exit ;
53289: GO 53409
// if IsInArea ( unit , area ) then
53291: LD_VAR 0 1
53295: PPUSH
53296: LD_VAR 0 2
53300: PPUSH
53301: CALL_OW 308
53305: IFFALSE 53323
// begin ComMoveToArea ( unit , goAway ) ;
53307: LD_VAR 0 1
53311: PPUSH
53312: LD_VAR 0 3
53316: PPUSH
53317: CALL_OW 113
// exit ;
53321: GO 53409
// end ; if task [ 1 ] [ 1 ] <> M then
53323: LD_VAR 0 7
53327: PUSH
53328: LD_INT 1
53330: ARRAY
53331: PUSH
53332: LD_INT 1
53334: ARRAY
53335: PUSH
53336: LD_STRING M
53338: NONEQUAL
53339: IFFALSE 53343
// exit ;
53341: GO 53409
// x := task [ 1 ] [ 2 ] ;
53343: LD_ADDR_VAR 0 5
53347: PUSH
53348: LD_VAR 0 7
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PUSH
53357: LD_INT 2
53359: ARRAY
53360: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53361: LD_ADDR_VAR 0 6
53365: PUSH
53366: LD_VAR 0 7
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PUSH
53375: LD_INT 3
53377: ARRAY
53378: ST_TO_ADDR
// if InArea ( x , y , area ) then
53379: LD_VAR 0 5
53383: PPUSH
53384: LD_VAR 0 6
53388: PPUSH
53389: LD_VAR 0 2
53393: PPUSH
53394: CALL_OW 309
53398: IFFALSE 53409
// ComStop ( unit ) ;
53400: LD_VAR 0 1
53404: PPUSH
53405: CALL_OW 141
// end ;
53409: LD_VAR 0 4
53413: RET
// export function Abs ( value ) ; begin
53414: LD_INT 0
53416: PPUSH
// result := value ;
53417: LD_ADDR_VAR 0 2
53421: PUSH
53422: LD_VAR 0 1
53426: ST_TO_ADDR
// if value < 0 then
53427: LD_VAR 0 1
53431: PUSH
53432: LD_INT 0
53434: LESS
53435: IFFALSE 53452
// result := value * - 1 ;
53437: LD_ADDR_VAR 0 2
53441: PUSH
53442: LD_VAR 0 1
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: MUL
53451: ST_TO_ADDR
// end ;
53452: LD_VAR 0 2
53456: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53457: LD_INT 0
53459: PPUSH
53460: PPUSH
53461: PPUSH
53462: PPUSH
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
// if not unit or not building then
53467: LD_VAR 0 1
53471: NOT
53472: PUSH
53473: LD_VAR 0 2
53477: NOT
53478: OR
53479: IFFALSE 53483
// exit ;
53481: GO 53709
// x := GetX ( building ) ;
53483: LD_ADDR_VAR 0 4
53487: PUSH
53488: LD_VAR 0 2
53492: PPUSH
53493: CALL_OW 250
53497: ST_TO_ADDR
// y := GetY ( building ) ;
53498: LD_ADDR_VAR 0 6
53502: PUSH
53503: LD_VAR 0 2
53507: PPUSH
53508: CALL_OW 251
53512: ST_TO_ADDR
// d := GetDir ( building ) ;
53513: LD_ADDR_VAR 0 8
53517: PUSH
53518: LD_VAR 0 2
53522: PPUSH
53523: CALL_OW 254
53527: ST_TO_ADDR
// r := 4 ;
53528: LD_ADDR_VAR 0 9
53532: PUSH
53533: LD_INT 4
53535: ST_TO_ADDR
// for i := 1 to 5 do
53536: LD_ADDR_VAR 0 10
53540: PUSH
53541: DOUBLE
53542: LD_INT 1
53544: DEC
53545: ST_TO_ADDR
53546: LD_INT 5
53548: PUSH
53549: FOR_TO
53550: IFFALSE 53707
// begin _x := ShiftX ( x , d , r + i ) ;
53552: LD_ADDR_VAR 0 5
53556: PUSH
53557: LD_VAR 0 4
53561: PPUSH
53562: LD_VAR 0 8
53566: PPUSH
53567: LD_VAR 0 9
53571: PUSH
53572: LD_VAR 0 10
53576: PLUS
53577: PPUSH
53578: CALL_OW 272
53582: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53583: LD_ADDR_VAR 0 7
53587: PUSH
53588: LD_VAR 0 6
53592: PPUSH
53593: LD_VAR 0 8
53597: PPUSH
53598: LD_VAR 0 9
53602: PUSH
53603: LD_VAR 0 10
53607: PLUS
53608: PPUSH
53609: CALL_OW 273
53613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53614: LD_VAR 0 5
53618: PPUSH
53619: LD_VAR 0 7
53623: PPUSH
53624: CALL_OW 488
53628: PUSH
53629: LD_VAR 0 5
53633: PPUSH
53634: LD_VAR 0 7
53638: PPUSH
53639: CALL_OW 428
53643: PPUSH
53644: CALL_OW 247
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: IN
53659: NOT
53660: AND
53661: IFFALSE 53705
// begin ComMoveXY ( unit , _x , _y ) ;
53663: LD_VAR 0 1
53667: PPUSH
53668: LD_VAR 0 5
53672: PPUSH
53673: LD_VAR 0 7
53677: PPUSH
53678: CALL_OW 111
// result := [ _x , _y ] ;
53682: LD_ADDR_VAR 0 3
53686: PUSH
53687: LD_VAR 0 5
53691: PUSH
53692: LD_VAR 0 7
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: ST_TO_ADDR
// exit ;
53701: POP
53702: POP
53703: GO 53709
// end ; end ;
53705: GO 53549
53707: POP
53708: POP
// end ;
53709: LD_VAR 0 3
53713: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53714: LD_INT 0
53716: PPUSH
53717: PPUSH
53718: PPUSH
// result := 0 ;
53719: LD_ADDR_VAR 0 3
53723: PUSH
53724: LD_INT 0
53726: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53727: LD_VAR 0 1
53731: PUSH
53732: LD_INT 0
53734: LESS
53735: PUSH
53736: LD_VAR 0 1
53740: PUSH
53741: LD_INT 8
53743: GREATER
53744: OR
53745: PUSH
53746: LD_VAR 0 2
53750: PUSH
53751: LD_INT 0
53753: LESS
53754: OR
53755: PUSH
53756: LD_VAR 0 2
53760: PUSH
53761: LD_INT 8
53763: GREATER
53764: OR
53765: IFFALSE 53769
// exit ;
53767: GO 53844
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53769: LD_ADDR_VAR 0 4
53773: PUSH
53774: LD_INT 22
53776: PUSH
53777: LD_VAR 0 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PPUSH
53786: CALL_OW 69
53790: PUSH
53791: FOR_IN
53792: IFFALSE 53842
// begin un := UnitShoot ( i ) ;
53794: LD_ADDR_VAR 0 5
53798: PUSH
53799: LD_VAR 0 4
53803: PPUSH
53804: CALL_OW 504
53808: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53809: LD_VAR 0 5
53813: PPUSH
53814: CALL_OW 255
53818: PUSH
53819: LD_VAR 0 1
53823: EQUAL
53824: IFFALSE 53840
// begin result := un ;
53826: LD_ADDR_VAR 0 3
53830: PUSH
53831: LD_VAR 0 5
53835: ST_TO_ADDR
// exit ;
53836: POP
53837: POP
53838: GO 53844
// end ; end ;
53840: GO 53791
53842: POP
53843: POP
// end ;
53844: LD_VAR 0 3
53848: RET
// export function GetCargoBay ( units ) ; begin
53849: LD_INT 0
53851: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53852: LD_ADDR_VAR 0 2
53856: PUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 34
53867: PUSH
53868: LD_INT 12
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 34
53877: PUSH
53878: LD_INT 51
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 34
53887: PUSH
53888: LD_INT 32
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 34
53897: PUSH
53898: LD_INT 89
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: PPUSH
53912: CALL_OW 72
53916: ST_TO_ADDR
// end ;
53917: LD_VAR 0 2
53921: RET
// export function Negate ( value ) ; begin
53922: LD_INT 0
53924: PPUSH
// result := not value ;
53925: LD_ADDR_VAR 0 2
53929: PUSH
53930: LD_VAR 0 1
53934: NOT
53935: ST_TO_ADDR
// end ;
53936: LD_VAR 0 2
53940: RET
// export function Inc ( value ) ; begin
53941: LD_INT 0
53943: PPUSH
// result := value + 1 ;
53944: LD_ADDR_VAR 0 2
53948: PUSH
53949: LD_VAR 0 1
53953: PUSH
53954: LD_INT 1
53956: PLUS
53957: ST_TO_ADDR
// end ;
53958: LD_VAR 0 2
53962: RET
// export function Dec ( value ) ; begin
53963: LD_INT 0
53965: PPUSH
// result := value - 1 ;
53966: LD_ADDR_VAR 0 2
53970: PUSH
53971: LD_VAR 0 1
53975: PUSH
53976: LD_INT 1
53978: MINUS
53979: ST_TO_ADDR
// end ;
53980: LD_VAR 0 2
53984: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53985: LD_INT 0
53987: PPUSH
53988: PPUSH
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
53994: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53995: LD_VAR 0 1
53999: PPUSH
54000: LD_VAR 0 2
54004: PPUSH
54005: CALL_OW 488
54009: NOT
54010: PUSH
54011: LD_VAR 0 3
54015: PPUSH
54016: LD_VAR 0 4
54020: PPUSH
54021: CALL_OW 488
54025: NOT
54026: OR
54027: IFFALSE 54040
// begin result := - 1 ;
54029: LD_ADDR_VAR 0 5
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: ST_TO_ADDR
// exit ;
54038: GO 54275
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54040: LD_ADDR_VAR 0 12
54044: PUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: LD_VAR 0 2
54054: PPUSH
54055: LD_VAR 0 3
54059: PPUSH
54060: LD_VAR 0 4
54064: PPUSH
54065: CALL 53125 0 4
54069: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54070: LD_ADDR_VAR 0 11
54074: PUSH
54075: LD_VAR 0 1
54079: PPUSH
54080: LD_VAR 0 2
54084: PPUSH
54085: LD_VAR 0 12
54089: PUSH
54090: LD_INT 1
54092: ARRAY
54093: PPUSH
54094: LD_VAR 0 12
54098: PUSH
54099: LD_INT 2
54101: ARRAY
54102: PPUSH
54103: CALL_OW 298
54107: ST_TO_ADDR
// distance := 9999 ;
54108: LD_ADDR_VAR 0 10
54112: PUSH
54113: LD_INT 9999
54115: ST_TO_ADDR
// for i := 0 to 5 do
54116: LD_ADDR_VAR 0 6
54120: PUSH
54121: DOUBLE
54122: LD_INT 0
54124: DEC
54125: ST_TO_ADDR
54126: LD_INT 5
54128: PUSH
54129: FOR_TO
54130: IFFALSE 54273
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54132: LD_ADDR_VAR 0 7
54136: PUSH
54137: LD_VAR 0 1
54141: PPUSH
54142: LD_VAR 0 6
54146: PPUSH
54147: LD_VAR 0 11
54151: PPUSH
54152: CALL_OW 272
54156: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54157: LD_ADDR_VAR 0 8
54161: PUSH
54162: LD_VAR 0 2
54166: PPUSH
54167: LD_VAR 0 6
54171: PPUSH
54172: LD_VAR 0 11
54176: PPUSH
54177: CALL_OW 273
54181: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54182: LD_VAR 0 7
54186: PPUSH
54187: LD_VAR 0 8
54191: PPUSH
54192: CALL_OW 488
54196: NOT
54197: IFFALSE 54201
// continue ;
54199: GO 54129
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54201: LD_ADDR_VAR 0 9
54205: PUSH
54206: LD_VAR 0 12
54210: PUSH
54211: LD_INT 1
54213: ARRAY
54214: PPUSH
54215: LD_VAR 0 12
54219: PUSH
54220: LD_INT 2
54222: ARRAY
54223: PPUSH
54224: LD_VAR 0 7
54228: PPUSH
54229: LD_VAR 0 8
54233: PPUSH
54234: CALL_OW 298
54238: ST_TO_ADDR
// if tmp < distance then
54239: LD_VAR 0 9
54243: PUSH
54244: LD_VAR 0 10
54248: LESS
54249: IFFALSE 54271
// begin result := i ;
54251: LD_ADDR_VAR 0 5
54255: PUSH
54256: LD_VAR 0 6
54260: ST_TO_ADDR
// distance := tmp ;
54261: LD_ADDR_VAR 0 10
54265: PUSH
54266: LD_VAR 0 9
54270: ST_TO_ADDR
// end ; end ;
54271: GO 54129
54273: POP
54274: POP
// end ;
54275: LD_VAR 0 5
54279: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54280: LD_INT 0
54282: PPUSH
54283: PPUSH
// if not driver or not IsInUnit ( driver ) then
54284: LD_VAR 0 1
54288: NOT
54289: PUSH
54290: LD_VAR 0 1
54294: PPUSH
54295: CALL_OW 310
54299: NOT
54300: OR
54301: IFFALSE 54305
// exit ;
54303: GO 54395
// vehicle := IsInUnit ( driver ) ;
54305: LD_ADDR_VAR 0 3
54309: PUSH
54310: LD_VAR 0 1
54314: PPUSH
54315: CALL_OW 310
54319: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54320: LD_VAR 0 1
54324: PPUSH
54325: LD_STRING \
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: PUSH
54355: LD_STRING E
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_VAR 0 3
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PPUSH
54391: CALL_OW 446
// end ;
54395: LD_VAR 0 2
54399: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54400: LD_INT 0
54402: PPUSH
54403: PPUSH
// if not driver or not IsInUnit ( driver ) then
54404: LD_VAR 0 1
54408: NOT
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 310
54419: NOT
54420: OR
54421: IFFALSE 54425
// exit ;
54423: GO 54515
// vehicle := IsInUnit ( driver ) ;
54425: LD_ADDR_VAR 0 3
54429: PUSH
54430: LD_VAR 0 1
54434: PPUSH
54435: CALL_OW 310
54439: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54440: LD_VAR 0 1
54444: PPUSH
54445: LD_STRING \
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: PUSH
54475: LD_STRING E
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_VAR 0 3
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PPUSH
54511: CALL_OW 447
// end ;
54515: LD_VAR 0 2
54519: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54520: LD_INT 0
54522: PPUSH
54523: PPUSH
54524: PPUSH
// tmp := [ ] ;
54525: LD_ADDR_VAR 0 5
54529: PUSH
54530: EMPTY
54531: ST_TO_ADDR
// for i in units do
54532: LD_ADDR_VAR 0 4
54536: PUSH
54537: LD_VAR 0 1
54541: PUSH
54542: FOR_IN
54543: IFFALSE 54581
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54545: LD_ADDR_VAR 0 5
54549: PUSH
54550: LD_VAR 0 5
54554: PPUSH
54555: LD_VAR 0 5
54559: PUSH
54560: LD_INT 1
54562: PLUS
54563: PPUSH
54564: LD_VAR 0 4
54568: PPUSH
54569: CALL_OW 256
54573: PPUSH
54574: CALL_OW 2
54578: ST_TO_ADDR
54579: GO 54542
54581: POP
54582: POP
// if not tmp then
54583: LD_VAR 0 5
54587: NOT
54588: IFFALSE 54592
// exit ;
54590: GO 54640
// if asc then
54592: LD_VAR 0 2
54596: IFFALSE 54620
// result := SortListByListAsc ( units , tmp ) else
54598: LD_ADDR_VAR 0 3
54602: PUSH
54603: LD_VAR 0 1
54607: PPUSH
54608: LD_VAR 0 5
54612: PPUSH
54613: CALL_OW 76
54617: ST_TO_ADDR
54618: GO 54640
// result := SortListByListDesc ( units , tmp ) ;
54620: LD_ADDR_VAR 0 3
54624: PUSH
54625: LD_VAR 0 1
54629: PPUSH
54630: LD_VAR 0 5
54634: PPUSH
54635: CALL_OW 77
54639: ST_TO_ADDR
// end ;
54640: LD_VAR 0 3
54644: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54645: LD_INT 0
54647: PPUSH
54648: PPUSH
// task := GetTaskList ( mech ) ;
54649: LD_ADDR_VAR 0 4
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: CALL_OW 437
54663: ST_TO_ADDR
// if not task then
54664: LD_VAR 0 4
54668: NOT
54669: IFFALSE 54673
// exit ;
54671: GO 54715
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54673: LD_ADDR_VAR 0 3
54677: PUSH
54678: LD_VAR 0 4
54682: PUSH
54683: LD_INT 1
54685: ARRAY
54686: PUSH
54687: LD_INT 1
54689: ARRAY
54690: PUSH
54691: LD_STRING r
54693: EQUAL
54694: PUSH
54695: LD_VAR 0 4
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PUSH
54704: LD_INT 4
54706: ARRAY
54707: PUSH
54708: LD_VAR 0 2
54712: EQUAL
54713: AND
54714: ST_TO_ADDR
// end ;
54715: LD_VAR 0 3
54719: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54720: LD_INT 0
54722: PPUSH
// SetDir ( unit , d ) ;
54723: LD_VAR 0 1
54727: PPUSH
54728: LD_VAR 0 4
54732: PPUSH
54733: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54737: LD_VAR 0 1
54741: PPUSH
54742: LD_VAR 0 2
54746: PPUSH
54747: LD_VAR 0 3
54751: PPUSH
54752: LD_VAR 0 5
54756: PPUSH
54757: CALL_OW 48
// end ;
54761: LD_VAR 0 6
54765: RET
// export function ToNaturalNumber ( number ) ; begin
54766: LD_INT 0
54768: PPUSH
// result := number div 1 ;
54769: LD_ADDR_VAR 0 2
54773: PUSH
54774: LD_VAR 0 1
54778: PUSH
54779: LD_INT 1
54781: DIV
54782: ST_TO_ADDR
// if number < 0 then
54783: LD_VAR 0 1
54787: PUSH
54788: LD_INT 0
54790: LESS
54791: IFFALSE 54801
// result := 0 ;
54793: LD_ADDR_VAR 0 2
54797: PUSH
54798: LD_INT 0
54800: ST_TO_ADDR
// end ;
54801: LD_VAR 0 2
54805: RET
// export function SortByClass ( units , class ) ; var un ; begin
54806: LD_INT 0
54808: PPUSH
54809: PPUSH
// if not units or not class then
54810: LD_VAR 0 1
54814: NOT
54815: PUSH
54816: LD_VAR 0 2
54820: NOT
54821: OR
54822: IFFALSE 54826
// exit ;
54824: GO 54921
// result := [ ] ;
54826: LD_ADDR_VAR 0 3
54830: PUSH
54831: EMPTY
54832: ST_TO_ADDR
// for un in units do
54833: LD_ADDR_VAR 0 4
54837: PUSH
54838: LD_VAR 0 1
54842: PUSH
54843: FOR_IN
54844: IFFALSE 54919
// if GetClass ( un ) = class then
54846: LD_VAR 0 4
54850: PPUSH
54851: CALL_OW 257
54855: PUSH
54856: LD_VAR 0 2
54860: EQUAL
54861: IFFALSE 54888
// result := Insert ( result , 1 , un ) else
54863: LD_ADDR_VAR 0 3
54867: PUSH
54868: LD_VAR 0 3
54872: PPUSH
54873: LD_INT 1
54875: PPUSH
54876: LD_VAR 0 4
54880: PPUSH
54881: CALL_OW 2
54885: ST_TO_ADDR
54886: GO 54917
// result := Replace ( result , result + 1 , un ) ;
54888: LD_ADDR_VAR 0 3
54892: PUSH
54893: LD_VAR 0 3
54897: PPUSH
54898: LD_VAR 0 3
54902: PUSH
54903: LD_INT 1
54905: PLUS
54906: PPUSH
54907: LD_VAR 0 4
54911: PPUSH
54912: CALL_OW 1
54916: ST_TO_ADDR
54917: GO 54843
54919: POP
54920: POP
// end ;
54921: LD_VAR 0 3
54925: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54926: LD_INT 0
54928: PPUSH
54929: PPUSH
54930: PPUSH
54931: PPUSH
54932: PPUSH
54933: PPUSH
54934: PPUSH
// result := [ ] ;
54935: LD_ADDR_VAR 0 4
54939: PUSH
54940: EMPTY
54941: ST_TO_ADDR
// if x - r < 0 then
54942: LD_VAR 0 1
54946: PUSH
54947: LD_VAR 0 3
54951: MINUS
54952: PUSH
54953: LD_INT 0
54955: LESS
54956: IFFALSE 54968
// min_x := 0 else
54958: LD_ADDR_VAR 0 8
54962: PUSH
54963: LD_INT 0
54965: ST_TO_ADDR
54966: GO 54984
// min_x := x - r ;
54968: LD_ADDR_VAR 0 8
54972: PUSH
54973: LD_VAR 0 1
54977: PUSH
54978: LD_VAR 0 3
54982: MINUS
54983: ST_TO_ADDR
// if y - r < 0 then
54984: LD_VAR 0 2
54988: PUSH
54989: LD_VAR 0 3
54993: MINUS
54994: PUSH
54995: LD_INT 0
54997: LESS
54998: IFFALSE 55010
// min_y := 0 else
55000: LD_ADDR_VAR 0 7
55004: PUSH
55005: LD_INT 0
55007: ST_TO_ADDR
55008: GO 55026
// min_y := y - r ;
55010: LD_ADDR_VAR 0 7
55014: PUSH
55015: LD_VAR 0 2
55019: PUSH
55020: LD_VAR 0 3
55024: MINUS
55025: ST_TO_ADDR
// max_x := x + r ;
55026: LD_ADDR_VAR 0 9
55030: PUSH
55031: LD_VAR 0 1
55035: PUSH
55036: LD_VAR 0 3
55040: PLUS
55041: ST_TO_ADDR
// max_y := y + r ;
55042: LD_ADDR_VAR 0 10
55046: PUSH
55047: LD_VAR 0 2
55051: PUSH
55052: LD_VAR 0 3
55056: PLUS
55057: ST_TO_ADDR
// for _x = min_x to max_x do
55058: LD_ADDR_VAR 0 5
55062: PUSH
55063: DOUBLE
55064: LD_VAR 0 8
55068: DEC
55069: ST_TO_ADDR
55070: LD_VAR 0 9
55074: PUSH
55075: FOR_TO
55076: IFFALSE 55177
// for _y = min_y to max_y do
55078: LD_ADDR_VAR 0 6
55082: PUSH
55083: DOUBLE
55084: LD_VAR 0 7
55088: DEC
55089: ST_TO_ADDR
55090: LD_VAR 0 10
55094: PUSH
55095: FOR_TO
55096: IFFALSE 55173
// begin if not ValidHex ( _x , _y ) then
55098: LD_VAR 0 5
55102: PPUSH
55103: LD_VAR 0 6
55107: PPUSH
55108: CALL_OW 488
55112: NOT
55113: IFFALSE 55117
// continue ;
55115: GO 55095
// if GetResourceTypeXY ( _x , _y ) then
55117: LD_VAR 0 5
55121: PPUSH
55122: LD_VAR 0 6
55126: PPUSH
55127: CALL_OW 283
55131: IFFALSE 55171
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55133: LD_ADDR_VAR 0 4
55137: PUSH
55138: LD_VAR 0 4
55142: PPUSH
55143: LD_VAR 0 4
55147: PUSH
55148: LD_INT 1
55150: PLUS
55151: PPUSH
55152: LD_VAR 0 5
55156: PUSH
55157: LD_VAR 0 6
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PPUSH
55166: CALL_OW 1
55170: ST_TO_ADDR
// end ;
55171: GO 55095
55173: POP
55174: POP
55175: GO 55075
55177: POP
55178: POP
// end ;
55179: LD_VAR 0 4
55183: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55184: LD_INT 0
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
55193: PPUSH
// if not units then
55194: LD_VAR 0 1
55198: NOT
55199: IFFALSE 55203
// exit ;
55201: GO 55727
// result := UnitFilter ( units , [ f_ok ] ) ;
55203: LD_ADDR_VAR 0 3
55207: PUSH
55208: LD_VAR 0 1
55212: PPUSH
55213: LD_INT 50
55215: PUSH
55216: EMPTY
55217: LIST
55218: PPUSH
55219: CALL_OW 72
55223: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55224: LD_ADDR_VAR 0 8
55228: PUSH
55229: LD_VAR 0 1
55233: PUSH
55234: LD_INT 1
55236: ARRAY
55237: PPUSH
55238: CALL_OW 255
55242: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55243: LD_ADDR_VAR 0 10
55247: PUSH
55248: LD_INT 29
55250: PUSH
55251: LD_INT 91
55253: PUSH
55254: LD_INT 49
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// if not result then
55262: LD_VAR 0 3
55266: NOT
55267: IFFALSE 55271
// exit ;
55269: GO 55727
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55271: LD_ADDR_VAR 0 5
55275: PUSH
55276: LD_INT 81
55278: PUSH
55279: LD_VAR 0 8
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PPUSH
55288: CALL_OW 69
55292: ST_TO_ADDR
// for i in result do
55293: LD_ADDR_VAR 0 4
55297: PUSH
55298: LD_VAR 0 3
55302: PUSH
55303: FOR_IN
55304: IFFALSE 55725
// begin tag := GetTag ( i ) + 1 ;
55306: LD_ADDR_VAR 0 9
55310: PUSH
55311: LD_VAR 0 4
55315: PPUSH
55316: CALL_OW 110
55320: PUSH
55321: LD_INT 1
55323: PLUS
55324: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55325: LD_ADDR_VAR 0 7
55329: PUSH
55330: LD_VAR 0 4
55334: PPUSH
55335: CALL_OW 250
55339: PPUSH
55340: LD_VAR 0 4
55344: PPUSH
55345: CALL_OW 251
55349: PPUSH
55350: LD_INT 6
55352: PPUSH
55353: CALL 54926 0 3
55357: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55358: LD_VAR 0 4
55362: PPUSH
55363: CALL_OW 247
55367: PUSH
55368: LD_INT 2
55370: EQUAL
55371: PUSH
55372: LD_VAR 0 7
55376: AND
55377: PUSH
55378: LD_VAR 0 4
55382: PPUSH
55383: CALL_OW 264
55387: PUSH
55388: LD_VAR 0 10
55392: IN
55393: NOT
55394: AND
55395: IFFALSE 55434
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55397: LD_VAR 0 4
55401: PPUSH
55402: LD_VAR 0 7
55406: PUSH
55407: LD_INT 1
55409: ARRAY
55410: PUSH
55411: LD_INT 1
55413: ARRAY
55414: PPUSH
55415: LD_VAR 0 7
55419: PUSH
55420: LD_INT 1
55422: ARRAY
55423: PUSH
55424: LD_INT 2
55426: ARRAY
55427: PPUSH
55428: CALL_OW 116
55432: GO 55723
// if path > tag then
55434: LD_VAR 0 2
55438: PUSH
55439: LD_VAR 0 9
55443: GREATER
55444: IFFALSE 55652
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55446: LD_ADDR_VAR 0 6
55450: PUSH
55451: LD_VAR 0 5
55455: PPUSH
55456: LD_INT 91
55458: PUSH
55459: LD_VAR 0 4
55463: PUSH
55464: LD_INT 8
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: PPUSH
55472: CALL_OW 72
55476: ST_TO_ADDR
// if nearEnemy then
55477: LD_VAR 0 6
55481: IFFALSE 55550
// begin if GetWeapon ( i ) = ru_time_lapser then
55483: LD_VAR 0 4
55487: PPUSH
55488: CALL_OW 264
55492: PUSH
55493: LD_INT 49
55495: EQUAL
55496: IFFALSE 55524
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55498: LD_VAR 0 4
55502: PPUSH
55503: LD_VAR 0 6
55507: PPUSH
55508: LD_VAR 0 4
55512: PPUSH
55513: CALL_OW 74
55517: PPUSH
55518: CALL_OW 112
55522: GO 55548
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55524: LD_VAR 0 4
55528: PPUSH
55529: LD_VAR 0 6
55533: PPUSH
55534: LD_VAR 0 4
55538: PPUSH
55539: CALL_OW 74
55543: PPUSH
55544: CALL_OW 115
// end else
55548: GO 55650
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55550: LD_VAR 0 4
55554: PPUSH
55555: LD_VAR 0 2
55559: PUSH
55560: LD_VAR 0 9
55564: ARRAY
55565: PUSH
55566: LD_INT 1
55568: ARRAY
55569: PPUSH
55570: LD_VAR 0 2
55574: PUSH
55575: LD_VAR 0 9
55579: ARRAY
55580: PUSH
55581: LD_INT 2
55583: ARRAY
55584: PPUSH
55585: CALL_OW 297
55589: PUSH
55590: LD_INT 6
55592: GREATER
55593: IFFALSE 55636
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55595: LD_VAR 0 4
55599: PPUSH
55600: LD_VAR 0 2
55604: PUSH
55605: LD_VAR 0 9
55609: ARRAY
55610: PUSH
55611: LD_INT 1
55613: ARRAY
55614: PPUSH
55615: LD_VAR 0 2
55619: PUSH
55620: LD_VAR 0 9
55624: ARRAY
55625: PUSH
55626: LD_INT 2
55628: ARRAY
55629: PPUSH
55630: CALL_OW 114
55634: GO 55650
// SetTag ( i , tag ) ;
55636: LD_VAR 0 4
55640: PPUSH
55641: LD_VAR 0 9
55645: PPUSH
55646: CALL_OW 109
// end else
55650: GO 55723
// if enemy then
55652: LD_VAR 0 5
55656: IFFALSE 55723
// begin if GetWeapon ( i ) = ru_time_lapser then
55658: LD_VAR 0 4
55662: PPUSH
55663: CALL_OW 264
55667: PUSH
55668: LD_INT 49
55670: EQUAL
55671: IFFALSE 55699
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55673: LD_VAR 0 4
55677: PPUSH
55678: LD_VAR 0 5
55682: PPUSH
55683: LD_VAR 0 4
55687: PPUSH
55688: CALL_OW 74
55692: PPUSH
55693: CALL_OW 112
55697: GO 55723
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55699: LD_VAR 0 4
55703: PPUSH
55704: LD_VAR 0 5
55708: PPUSH
55709: LD_VAR 0 4
55713: PPUSH
55714: CALL_OW 74
55718: PPUSH
55719: CALL_OW 115
// end ; end ;
55723: GO 55303
55725: POP
55726: POP
// end ;
55727: LD_VAR 0 3
55731: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55732: LD_INT 0
55734: PPUSH
55735: PPUSH
55736: PPUSH
// if not unit or IsInUnit ( unit ) then
55737: LD_VAR 0 1
55741: NOT
55742: PUSH
55743: LD_VAR 0 1
55747: PPUSH
55748: CALL_OW 310
55752: OR
55753: IFFALSE 55757
// exit ;
55755: GO 55848
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55757: LD_ADDR_VAR 0 4
55761: PUSH
55762: LD_VAR 0 1
55766: PPUSH
55767: CALL_OW 250
55771: PPUSH
55772: LD_VAR 0 2
55776: PPUSH
55777: LD_INT 1
55779: PPUSH
55780: CALL_OW 272
55784: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55785: LD_ADDR_VAR 0 5
55789: PUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL_OW 251
55799: PPUSH
55800: LD_VAR 0 2
55804: PPUSH
55805: LD_INT 1
55807: PPUSH
55808: CALL_OW 273
55812: ST_TO_ADDR
// if ValidHex ( x , y ) then
55813: LD_VAR 0 4
55817: PPUSH
55818: LD_VAR 0 5
55822: PPUSH
55823: CALL_OW 488
55827: IFFALSE 55848
// ComTurnXY ( unit , x , y ) ;
55829: LD_VAR 0 1
55833: PPUSH
55834: LD_VAR 0 4
55838: PPUSH
55839: LD_VAR 0 5
55843: PPUSH
55844: CALL_OW 118
// end ;
55848: LD_VAR 0 3
55852: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55853: LD_INT 0
55855: PPUSH
55856: PPUSH
// result := false ;
55857: LD_ADDR_VAR 0 3
55861: PUSH
55862: LD_INT 0
55864: ST_TO_ADDR
// if not units then
55865: LD_VAR 0 2
55869: NOT
55870: IFFALSE 55874
// exit ;
55872: GO 55919
// for i in units do
55874: LD_ADDR_VAR 0 4
55878: PUSH
55879: LD_VAR 0 2
55883: PUSH
55884: FOR_IN
55885: IFFALSE 55917
// if See ( side , i ) then
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_VAR 0 4
55896: PPUSH
55897: CALL_OW 292
55901: IFFALSE 55915
// begin result := true ;
55903: LD_ADDR_VAR 0 3
55907: PUSH
55908: LD_INT 1
55910: ST_TO_ADDR
// exit ;
55911: POP
55912: POP
55913: GO 55919
// end ;
55915: GO 55884
55917: POP
55918: POP
// end ;
55919: LD_VAR 0 3
55923: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55924: LD_INT 0
55926: PPUSH
55927: PPUSH
55928: PPUSH
55929: PPUSH
// if not unit or not points then
55930: LD_VAR 0 1
55934: NOT
55935: PUSH
55936: LD_VAR 0 2
55940: NOT
55941: OR
55942: IFFALSE 55946
// exit ;
55944: GO 56036
// dist := 99999 ;
55946: LD_ADDR_VAR 0 5
55950: PUSH
55951: LD_INT 99999
55953: ST_TO_ADDR
// for i in points do
55954: LD_ADDR_VAR 0 4
55958: PUSH
55959: LD_VAR 0 2
55963: PUSH
55964: FOR_IN
55965: IFFALSE 56034
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55967: LD_ADDR_VAR 0 6
55971: PUSH
55972: LD_VAR 0 1
55976: PPUSH
55977: LD_VAR 0 4
55981: PUSH
55982: LD_INT 1
55984: ARRAY
55985: PPUSH
55986: LD_VAR 0 4
55990: PUSH
55991: LD_INT 2
55993: ARRAY
55994: PPUSH
55995: CALL_OW 297
55999: ST_TO_ADDR
// if tmpDist < dist then
56000: LD_VAR 0 6
56004: PUSH
56005: LD_VAR 0 5
56009: LESS
56010: IFFALSE 56032
// begin result := i ;
56012: LD_ADDR_VAR 0 3
56016: PUSH
56017: LD_VAR 0 4
56021: ST_TO_ADDR
// dist := tmpDist ;
56022: LD_ADDR_VAR 0 5
56026: PUSH
56027: LD_VAR 0 6
56031: ST_TO_ADDR
// end ; end ;
56032: GO 55964
56034: POP
56035: POP
// end ;
56036: LD_VAR 0 3
56040: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56041: LD_INT 0
56043: PPUSH
// uc_side := side ;
56044: LD_ADDR_OWVAR 20
56048: PUSH
56049: LD_VAR 0 1
56053: ST_TO_ADDR
// uc_nation := 3 ;
56054: LD_ADDR_OWVAR 21
56058: PUSH
56059: LD_INT 3
56061: ST_TO_ADDR
// vc_chassis := 25 ;
56062: LD_ADDR_OWVAR 37
56066: PUSH
56067: LD_INT 25
56069: ST_TO_ADDR
// vc_engine := engine_siberite ;
56070: LD_ADDR_OWVAR 39
56074: PUSH
56075: LD_INT 3
56077: ST_TO_ADDR
// vc_control := control_computer ;
56078: LD_ADDR_OWVAR 38
56082: PUSH
56083: LD_INT 3
56085: ST_TO_ADDR
// vc_weapon := 59 ;
56086: LD_ADDR_OWVAR 40
56090: PUSH
56091: LD_INT 59
56093: ST_TO_ADDR
// result := CreateVehicle ;
56094: LD_ADDR_VAR 0 5
56098: PUSH
56099: CALL_OW 45
56103: ST_TO_ADDR
// SetDir ( result , d ) ;
56104: LD_VAR 0 5
56108: PPUSH
56109: LD_VAR 0 4
56113: PPUSH
56114: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56118: LD_VAR 0 5
56122: PPUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: LD_VAR 0 3
56132: PPUSH
56133: LD_INT 0
56135: PPUSH
56136: CALL_OW 48
// end ;
56140: LD_VAR 0 5
56144: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56145: LD_INT 0
56147: PPUSH
56148: PPUSH
56149: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56150: LD_ADDR_VAR 0 2
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56173: LD_VAR 0 1
56177: NOT
56178: PUSH
56179: LD_VAR 0 1
56183: PPUSH
56184: CALL_OW 264
56188: PUSH
56189: LD_INT 12
56191: PUSH
56192: LD_INT 51
56194: PUSH
56195: LD_INT 32
56197: PUSH
56198: LD_INT 89
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: IN
56207: NOT
56208: OR
56209: IFFALSE 56213
// exit ;
56211: GO 56311
// for i := 1 to 3 do
56213: LD_ADDR_VAR 0 3
56217: PUSH
56218: DOUBLE
56219: LD_INT 1
56221: DEC
56222: ST_TO_ADDR
56223: LD_INT 3
56225: PUSH
56226: FOR_TO
56227: IFFALSE 56309
// begin tmp := GetCargo ( cargo , i ) ;
56229: LD_ADDR_VAR 0 4
56233: PUSH
56234: LD_VAR 0 1
56238: PPUSH
56239: LD_VAR 0 3
56243: PPUSH
56244: CALL_OW 289
56248: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56249: LD_ADDR_VAR 0 2
56253: PUSH
56254: LD_VAR 0 2
56258: PPUSH
56259: LD_VAR 0 3
56263: PPUSH
56264: LD_VAR 0 4
56268: PPUSH
56269: CALL_OW 1
56273: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56274: LD_ADDR_VAR 0 2
56278: PUSH
56279: LD_VAR 0 2
56283: PPUSH
56284: LD_INT 4
56286: PPUSH
56287: LD_VAR 0 2
56291: PUSH
56292: LD_INT 4
56294: ARRAY
56295: PUSH
56296: LD_VAR 0 4
56300: PLUS
56301: PPUSH
56302: CALL_OW 1
56306: ST_TO_ADDR
// end ;
56307: GO 56226
56309: POP
56310: POP
// end ;
56311: LD_VAR 0 2
56315: RET
// export function Length ( array ) ; begin
56316: LD_INT 0
56318: PPUSH
// result := array + 0 ;
56319: LD_ADDR_VAR 0 2
56323: PUSH
56324: LD_VAR 0 1
56328: PUSH
56329: LD_INT 0
56331: PLUS
56332: ST_TO_ADDR
// end ;
56333: LD_VAR 0 2
56337: RET
// export function PrepareArray ( array ) ; begin
56338: LD_INT 0
56340: PPUSH
// result := array diff 0 ;
56341: LD_ADDR_VAR 0 2
56345: PUSH
56346: LD_VAR 0 1
56350: PUSH
56351: LD_INT 0
56353: DIFF
56354: ST_TO_ADDR
// if not result [ 1 ] then
56355: LD_VAR 0 2
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: NOT
56364: IFFALSE 56384
// result := Delete ( result , 1 ) ;
56366: LD_ADDR_VAR 0 2
56370: PUSH
56371: LD_VAR 0 2
56375: PPUSH
56376: LD_INT 1
56378: PPUSH
56379: CALL_OW 3
56383: ST_TO_ADDR
// end ; end_of_file
56384: LD_VAR 0 2
56388: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56389: LD_VAR 0 1
56393: PUSH
56394: LD_INT 200
56396: DOUBLE
56397: GREATEREQUAL
56398: IFFALSE 56406
56400: LD_INT 299
56402: DOUBLE
56403: LESSEQUAL
56404: IFTRUE 56408
56406: GO 56440
56408: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56409: LD_VAR 0 1
56413: PPUSH
56414: LD_VAR 0 2
56418: PPUSH
56419: LD_VAR 0 3
56423: PPUSH
56424: LD_VAR 0 4
56428: PPUSH
56429: LD_VAR 0 5
56433: PPUSH
56434: CALL 56928 0 5
56438: GO 56517
56440: LD_INT 300
56442: DOUBLE
56443: GREATEREQUAL
56444: IFFALSE 56452
56446: LD_INT 399
56448: DOUBLE
56449: LESSEQUAL
56450: IFTRUE 56454
56452: GO 56516
56454: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56455: LD_VAR 0 1
56459: PPUSH
56460: LD_VAR 0 2
56464: PPUSH
56465: LD_VAR 0 3
56469: PPUSH
56470: LD_VAR 0 4
56474: PPUSH
56475: LD_VAR 0 5
56479: PPUSH
56480: LD_VAR 0 6
56484: PPUSH
56485: LD_VAR 0 7
56489: PPUSH
56490: LD_VAR 0 8
56494: PPUSH
56495: LD_VAR 0 9
56499: PPUSH
56500: LD_VAR 0 10
56504: PPUSH
56505: LD_VAR 0 11
56509: PPUSH
56510: CALL 73199 0 11
56514: GO 56517
56516: POP
// end ;
56517: PPOPN 11
56519: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56520: LD_VAR 0 1
56524: PPUSH
56525: LD_VAR 0 2
56529: PPUSH
56530: LD_VAR 0 3
56534: PPUSH
56535: LD_VAR 0 4
56539: PPUSH
56540: LD_VAR 0 5
56544: PPUSH
56545: CALL 56664 0 5
// end ; end_of_file
56549: PPOPN 5
56551: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56552: LD_INT 0
56554: PPUSH
56555: PPUSH
56556: PPUSH
56557: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56558: LD_VAR 0 1
56562: PPUSH
56563: CALL_OW 264
56567: PUSH
56568: LD_INT 91
56570: EQUAL
56571: IFFALSE 56643
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56573: LD_INT 68
56575: PPUSH
56576: LD_VAR 0 1
56580: PPUSH
56581: CALL_OW 255
56585: PPUSH
56586: CALL_OW 321
56590: PUSH
56591: LD_INT 2
56593: EQUAL
56594: IFFALSE 56606
// eff := 70 else
56596: LD_ADDR_VAR 0 4
56600: PUSH
56601: LD_INT 70
56603: ST_TO_ADDR
56604: GO 56614
// eff := 30 ;
56606: LD_ADDR_VAR 0 4
56610: PUSH
56611: LD_INT 30
56613: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56614: LD_VAR 0 1
56618: PPUSH
56619: CALL_OW 250
56623: PPUSH
56624: LD_VAR 0 1
56628: PPUSH
56629: CALL_OW 251
56633: PPUSH
56634: LD_VAR 0 4
56638: PPUSH
56639: CALL_OW 495
// end ; end ;
56643: LD_VAR 0 2
56647: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56648: LD_INT 0
56650: PPUSH
// end ;
56651: LD_VAR 0 4
56655: RET
// export function SOS_Command ( cmd ) ; begin
56656: LD_INT 0
56658: PPUSH
// end ;
56659: LD_VAR 0 2
56663: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56664: LD_INT 0
56666: PPUSH
// end ;
56667: LD_VAR 0 6
56671: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
56672: LD_INT 0
56674: PPUSH
56675: PPUSH
// if not vehicle or not factory then
56676: LD_VAR 0 1
56680: NOT
56681: PUSH
56682: LD_VAR 0 2
56686: NOT
56687: OR
56688: IFFALSE 56692
// exit ;
56690: GO 56923
// if factoryWaypoints >= factory then
56692: LD_EXP 101
56696: PUSH
56697: LD_VAR 0 2
56701: GREATEREQUAL
56702: IFFALSE 56923
// if factoryWaypoints [ factory ] then
56704: LD_EXP 101
56708: PUSH
56709: LD_VAR 0 2
56713: ARRAY
56714: IFFALSE 56923
// begin if GetControl ( vehicle ) = control_manual then
56716: LD_VAR 0 1
56720: PPUSH
56721: CALL_OW 263
56725: PUSH
56726: LD_INT 1
56728: EQUAL
56729: IFFALSE 56810
// begin driver := IsDrivenBy ( vehicle ) ;
56731: LD_ADDR_VAR 0 4
56735: PUSH
56736: LD_VAR 0 1
56740: PPUSH
56741: CALL_OW 311
56745: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56746: LD_VAR 0 4
56750: PPUSH
56751: LD_EXP 101
56755: PUSH
56756: LD_VAR 0 2
56760: ARRAY
56761: PUSH
56762: LD_INT 3
56764: ARRAY
56765: PPUSH
56766: LD_EXP 101
56770: PUSH
56771: LD_VAR 0 2
56775: ARRAY
56776: PUSH
56777: LD_INT 4
56779: ARRAY
56780: PPUSH
56781: CALL_OW 171
// AddComExitVehicle ( driver ) ;
56785: LD_VAR 0 4
56789: PPUSH
56790: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
56794: LD_VAR 0 4
56798: PPUSH
56799: LD_VAR 0 2
56803: PPUSH
56804: CALL_OW 180
// end else
56808: GO 56923
// if GetControl ( vehicle ) = control_remote then
56810: LD_VAR 0 1
56814: PPUSH
56815: CALL_OW 263
56819: PUSH
56820: LD_INT 2
56822: EQUAL
56823: IFFALSE 56884
// begin wait ( 0 0$2 ) ;
56825: LD_INT 70
56827: PPUSH
56828: CALL_OW 67
// if Connect ( vehicle ) then
56832: LD_VAR 0 1
56836: PPUSH
56837: CALL 23310 0 1
56841: IFFALSE 56882
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56843: LD_VAR 0 1
56847: PPUSH
56848: LD_EXP 101
56852: PUSH
56853: LD_VAR 0 2
56857: ARRAY
56858: PUSH
56859: LD_INT 3
56861: ARRAY
56862: PPUSH
56863: LD_EXP 101
56867: PUSH
56868: LD_VAR 0 2
56872: ARRAY
56873: PUSH
56874: LD_INT 4
56876: ARRAY
56877: PPUSH
56878: CALL_OW 171
// end else
56882: GO 56923
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56884: LD_VAR 0 1
56888: PPUSH
56889: LD_EXP 101
56893: PUSH
56894: LD_VAR 0 2
56898: ARRAY
56899: PUSH
56900: LD_INT 3
56902: ARRAY
56903: PPUSH
56904: LD_EXP 101
56908: PUSH
56909: LD_VAR 0 2
56913: ARRAY
56914: PUSH
56915: LD_INT 4
56917: ARRAY
56918: PPUSH
56919: CALL_OW 171
// end ; end ;
56923: LD_VAR 0 3
56927: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56928: LD_INT 0
56930: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56931: LD_VAR 0 1
56935: PUSH
56936: LD_INT 250
56938: EQUAL
56939: PUSH
56940: LD_VAR 0 2
56944: PPUSH
56945: CALL_OW 264
56949: PUSH
56950: LD_INT 81
56952: EQUAL
56953: AND
56954: IFFALSE 56975
// MinerPlaceMine ( unit , x , y ) ;
56956: LD_VAR 0 2
56960: PPUSH
56961: LD_VAR 0 4
56965: PPUSH
56966: LD_VAR 0 5
56970: PPUSH
56971: CALL 59360 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56975: LD_VAR 0 1
56979: PUSH
56980: LD_INT 251
56982: EQUAL
56983: PUSH
56984: LD_VAR 0 2
56988: PPUSH
56989: CALL_OW 264
56993: PUSH
56994: LD_INT 81
56996: EQUAL
56997: AND
56998: IFFALSE 57019
// MinerDetonateMine ( unit , x , y ) ;
57000: LD_VAR 0 2
57004: PPUSH
57005: LD_VAR 0 4
57009: PPUSH
57010: LD_VAR 0 5
57014: PPUSH
57015: CALL 59635 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57019: LD_VAR 0 1
57023: PUSH
57024: LD_INT 252
57026: EQUAL
57027: PUSH
57028: LD_VAR 0 2
57032: PPUSH
57033: CALL_OW 264
57037: PUSH
57038: LD_INT 81
57040: EQUAL
57041: AND
57042: IFFALSE 57063
// MinerCreateMinefield ( unit , x , y ) ;
57044: LD_VAR 0 2
57048: PPUSH
57049: LD_VAR 0 4
57053: PPUSH
57054: LD_VAR 0 5
57058: PPUSH
57059: CALL 60052 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57063: LD_VAR 0 1
57067: PUSH
57068: LD_INT 253
57070: EQUAL
57071: PUSH
57072: LD_VAR 0 2
57076: PPUSH
57077: CALL_OW 257
57081: PUSH
57082: LD_INT 5
57084: EQUAL
57085: AND
57086: IFFALSE 57107
// ComBinocular ( unit , x , y ) ;
57088: LD_VAR 0 2
57092: PPUSH
57093: LD_VAR 0 4
57097: PPUSH
57098: LD_VAR 0 5
57102: PPUSH
57103: CALL 60421 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57107: LD_VAR 0 1
57111: PUSH
57112: LD_INT 254
57114: EQUAL
57115: PUSH
57116: LD_VAR 0 2
57120: PPUSH
57121: CALL_OW 264
57125: PUSH
57126: LD_INT 99
57128: EQUAL
57129: AND
57130: PUSH
57131: LD_VAR 0 3
57135: PPUSH
57136: CALL_OW 263
57140: PUSH
57141: LD_INT 3
57143: EQUAL
57144: AND
57145: IFFALSE 57161
// HackDestroyVehicle ( unit , selectedUnit ) ;
57147: LD_VAR 0 2
57151: PPUSH
57152: LD_VAR 0 3
57156: PPUSH
57157: CALL 58724 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57161: LD_VAR 0 1
57165: PUSH
57166: LD_INT 255
57168: EQUAL
57169: PUSH
57170: LD_VAR 0 2
57174: PPUSH
57175: CALL_OW 264
57179: PUSH
57180: LD_INT 14
57182: PUSH
57183: LD_INT 53
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: IN
57190: AND
57191: PUSH
57192: LD_VAR 0 4
57196: PPUSH
57197: LD_VAR 0 5
57201: PPUSH
57202: CALL_OW 488
57206: AND
57207: IFFALSE 57231
// CutTreeXYR ( unit , x , y , 12 ) ;
57209: LD_VAR 0 2
57213: PPUSH
57214: LD_VAR 0 4
57218: PPUSH
57219: LD_VAR 0 5
57223: PPUSH
57224: LD_INT 12
57226: PPUSH
57227: CALL 57294 0 4
// if cmd = 256 then
57231: LD_VAR 0 1
57235: PUSH
57236: LD_INT 256
57238: EQUAL
57239: IFFALSE 57260
// SetFactoryWaypoint ( unit , x , y ) ;
57241: LD_VAR 0 2
57245: PPUSH
57246: LD_VAR 0 4
57250: PPUSH
57251: LD_VAR 0 5
57255: PPUSH
57256: CALL 75179 0 3
// if cmd = 257 then
57260: LD_VAR 0 1
57264: PUSH
57265: LD_INT 257
57267: EQUAL
57268: IFFALSE 57289
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57270: LD_VAR 0 2
57274: PPUSH
57275: LD_VAR 0 4
57279: PPUSH
57280: LD_VAR 0 5
57284: PPUSH
57285: CALL 75541 0 3
// end ;
57289: LD_VAR 0 6
57293: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57294: LD_INT 0
57296: PPUSH
57297: PPUSH
57298: PPUSH
57299: PPUSH
57300: PPUSH
57301: PPUSH
57302: PPUSH
57303: PPUSH
57304: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57305: LD_VAR 0 1
57309: NOT
57310: PUSH
57311: LD_VAR 0 2
57315: PPUSH
57316: LD_VAR 0 3
57320: PPUSH
57321: CALL_OW 488
57325: NOT
57326: OR
57327: PUSH
57328: LD_VAR 0 4
57332: NOT
57333: OR
57334: IFFALSE 57338
// exit ;
57336: GO 57678
// list := [ ] ;
57338: LD_ADDR_VAR 0 13
57342: PUSH
57343: EMPTY
57344: ST_TO_ADDR
// if x - r < 0 then
57345: LD_VAR 0 2
57349: PUSH
57350: LD_VAR 0 4
57354: MINUS
57355: PUSH
57356: LD_INT 0
57358: LESS
57359: IFFALSE 57371
// min_x := 0 else
57361: LD_ADDR_VAR 0 7
57365: PUSH
57366: LD_INT 0
57368: ST_TO_ADDR
57369: GO 57387
// min_x := x - r ;
57371: LD_ADDR_VAR 0 7
57375: PUSH
57376: LD_VAR 0 2
57380: PUSH
57381: LD_VAR 0 4
57385: MINUS
57386: ST_TO_ADDR
// if y - r < 0 then
57387: LD_VAR 0 3
57391: PUSH
57392: LD_VAR 0 4
57396: MINUS
57397: PUSH
57398: LD_INT 0
57400: LESS
57401: IFFALSE 57413
// min_y := 0 else
57403: LD_ADDR_VAR 0 8
57407: PUSH
57408: LD_INT 0
57410: ST_TO_ADDR
57411: GO 57429
// min_y := y - r ;
57413: LD_ADDR_VAR 0 8
57417: PUSH
57418: LD_VAR 0 3
57422: PUSH
57423: LD_VAR 0 4
57427: MINUS
57428: ST_TO_ADDR
// max_x := x + r ;
57429: LD_ADDR_VAR 0 9
57433: PUSH
57434: LD_VAR 0 2
57438: PUSH
57439: LD_VAR 0 4
57443: PLUS
57444: ST_TO_ADDR
// max_y := y + r ;
57445: LD_ADDR_VAR 0 10
57449: PUSH
57450: LD_VAR 0 3
57454: PUSH
57455: LD_VAR 0 4
57459: PLUS
57460: ST_TO_ADDR
// for _x = min_x to max_x do
57461: LD_ADDR_VAR 0 11
57465: PUSH
57466: DOUBLE
57467: LD_VAR 0 7
57471: DEC
57472: ST_TO_ADDR
57473: LD_VAR 0 9
57477: PUSH
57478: FOR_TO
57479: IFFALSE 57596
// for _y = min_y to max_y do
57481: LD_ADDR_VAR 0 12
57485: PUSH
57486: DOUBLE
57487: LD_VAR 0 8
57491: DEC
57492: ST_TO_ADDR
57493: LD_VAR 0 10
57497: PUSH
57498: FOR_TO
57499: IFFALSE 57592
// begin if not ValidHex ( _x , _y ) then
57501: LD_VAR 0 11
57505: PPUSH
57506: LD_VAR 0 12
57510: PPUSH
57511: CALL_OW 488
57515: NOT
57516: IFFALSE 57520
// continue ;
57518: GO 57498
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57520: LD_VAR 0 11
57524: PPUSH
57525: LD_VAR 0 12
57529: PPUSH
57530: CALL_OW 351
57534: PUSH
57535: LD_VAR 0 11
57539: PPUSH
57540: LD_VAR 0 12
57544: PPUSH
57545: CALL_OW 554
57549: AND
57550: IFFALSE 57590
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57552: LD_ADDR_VAR 0 13
57556: PUSH
57557: LD_VAR 0 13
57561: PPUSH
57562: LD_VAR 0 13
57566: PUSH
57567: LD_INT 1
57569: PLUS
57570: PPUSH
57571: LD_VAR 0 11
57575: PUSH
57576: LD_VAR 0 12
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PPUSH
57585: CALL_OW 2
57589: ST_TO_ADDR
// end ;
57590: GO 57498
57592: POP
57593: POP
57594: GO 57478
57596: POP
57597: POP
// if not list then
57598: LD_VAR 0 13
57602: NOT
57603: IFFALSE 57607
// exit ;
57605: GO 57678
// for i in list do
57607: LD_ADDR_VAR 0 6
57611: PUSH
57612: LD_VAR 0 13
57616: PUSH
57617: FOR_IN
57618: IFFALSE 57676
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57620: LD_VAR 0 1
57624: PPUSH
57625: LD_STRING M
57627: PUSH
57628: LD_VAR 0 6
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PUSH
57637: LD_VAR 0 6
57641: PUSH
57642: LD_INT 2
57644: ARRAY
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: PUSH
57667: EMPTY
57668: LIST
57669: PPUSH
57670: CALL_OW 447
57674: GO 57617
57676: POP
57677: POP
// end ;
57678: LD_VAR 0 5
57682: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57683: LD_EXP 33
57687: NOT
57688: IFFALSE 57738
57690: GO 57692
57692: DISABLE
// begin initHack := true ;
57693: LD_ADDR_EXP 33
57697: PUSH
57698: LD_INT 1
57700: ST_TO_ADDR
// hackTanks := [ ] ;
57701: LD_ADDR_EXP 34
57705: PUSH
57706: EMPTY
57707: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57708: LD_ADDR_EXP 35
57712: PUSH
57713: EMPTY
57714: ST_TO_ADDR
// hackLimit := 3 ;
57715: LD_ADDR_EXP 36
57719: PUSH
57720: LD_INT 3
57722: ST_TO_ADDR
// hackDist := 12 ;
57723: LD_ADDR_EXP 37
57727: PUSH
57728: LD_INT 12
57730: ST_TO_ADDR
// hackCounter := [ ] ;
57731: LD_ADDR_EXP 38
57735: PUSH
57736: EMPTY
57737: ST_TO_ADDR
// end ;
57738: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57739: LD_EXP 33
57743: PUSH
57744: LD_INT 34
57746: PUSH
57747: LD_INT 99
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PPUSH
57754: CALL_OW 69
57758: AND
57759: IFFALSE 58012
57761: GO 57763
57763: DISABLE
57764: LD_INT 0
57766: PPUSH
57767: PPUSH
// begin enable ;
57768: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57769: LD_ADDR_VAR 0 1
57773: PUSH
57774: LD_INT 34
57776: PUSH
57777: LD_INT 99
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PPUSH
57784: CALL_OW 69
57788: PUSH
57789: FOR_IN
57790: IFFALSE 58010
// begin if not i in hackTanks then
57792: LD_VAR 0 1
57796: PUSH
57797: LD_EXP 34
57801: IN
57802: NOT
57803: IFFALSE 57886
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57805: LD_ADDR_EXP 34
57809: PUSH
57810: LD_EXP 34
57814: PPUSH
57815: LD_EXP 34
57819: PUSH
57820: LD_INT 1
57822: PLUS
57823: PPUSH
57824: LD_VAR 0 1
57828: PPUSH
57829: CALL_OW 1
57833: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57834: LD_ADDR_EXP 35
57838: PUSH
57839: LD_EXP 35
57843: PPUSH
57844: LD_EXP 35
57848: PUSH
57849: LD_INT 1
57851: PLUS
57852: PPUSH
57853: EMPTY
57854: PPUSH
57855: CALL_OW 1
57859: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57860: LD_ADDR_EXP 38
57864: PUSH
57865: LD_EXP 38
57869: PPUSH
57870: LD_EXP 38
57874: PUSH
57875: LD_INT 1
57877: PLUS
57878: PPUSH
57879: EMPTY
57880: PPUSH
57881: CALL_OW 1
57885: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57886: LD_VAR 0 1
57890: PPUSH
57891: CALL_OW 302
57895: NOT
57896: IFFALSE 57909
// begin HackUnlinkAll ( i ) ;
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL 58015 0 1
// continue ;
57907: GO 57789
// end ; HackCheckCapturedStatus ( i ) ;
57909: LD_VAR 0 1
57913: PPUSH
57914: CALL 58458 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57918: LD_ADDR_VAR 0 2
57922: PUSH
57923: LD_INT 81
57925: PUSH
57926: LD_VAR 0 1
57930: PPUSH
57931: CALL_OW 255
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 33
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 91
57952: PUSH
57953: LD_VAR 0 1
57957: PUSH
57958: LD_EXP 37
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 50
57970: PUSH
57971: EMPTY
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: PPUSH
57980: CALL_OW 69
57984: ST_TO_ADDR
// if not tmp then
57985: LD_VAR 0 2
57989: NOT
57990: IFFALSE 57994
// continue ;
57992: GO 57789
// HackLink ( i , tmp ) ;
57994: LD_VAR 0 1
57998: PPUSH
57999: LD_VAR 0 2
58003: PPUSH
58004: CALL 58151 0 2
// end ;
58008: GO 57789
58010: POP
58011: POP
// end ;
58012: PPOPN 2
58014: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58015: LD_INT 0
58017: PPUSH
58018: PPUSH
58019: PPUSH
// if not hack in hackTanks then
58020: LD_VAR 0 1
58024: PUSH
58025: LD_EXP 34
58029: IN
58030: NOT
58031: IFFALSE 58035
// exit ;
58033: GO 58146
// index := GetElementIndex ( hackTanks , hack ) ;
58035: LD_ADDR_VAR 0 4
58039: PUSH
58040: LD_EXP 34
58044: PPUSH
58045: LD_VAR 0 1
58049: PPUSH
58050: CALL 20126 0 2
58054: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58055: LD_EXP 35
58059: PUSH
58060: LD_VAR 0 4
58064: ARRAY
58065: IFFALSE 58146
// begin for i in hackTanksCaptured [ index ] do
58067: LD_ADDR_VAR 0 3
58071: PUSH
58072: LD_EXP 35
58076: PUSH
58077: LD_VAR 0 4
58081: ARRAY
58082: PUSH
58083: FOR_IN
58084: IFFALSE 58110
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58086: LD_VAR 0 3
58090: PUSH
58091: LD_INT 1
58093: ARRAY
58094: PPUSH
58095: LD_VAR 0 3
58099: PUSH
58100: LD_INT 2
58102: ARRAY
58103: PPUSH
58104: CALL_OW 235
58108: GO 58083
58110: POP
58111: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58112: LD_ADDR_EXP 35
58116: PUSH
58117: LD_EXP 35
58121: PPUSH
58122: LD_VAR 0 4
58126: PPUSH
58127: EMPTY
58128: PPUSH
58129: CALL_OW 1
58133: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58134: LD_VAR 0 1
58138: PPUSH
58139: LD_INT 0
58141: PPUSH
58142: CALL_OW 505
// end ; end ;
58146: LD_VAR 0 2
58150: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58151: LD_INT 0
58153: PPUSH
58154: PPUSH
58155: PPUSH
// if not hack in hackTanks or not vehicles then
58156: LD_VAR 0 1
58160: PUSH
58161: LD_EXP 34
58165: IN
58166: NOT
58167: PUSH
58168: LD_VAR 0 2
58172: NOT
58173: OR
58174: IFFALSE 58178
// exit ;
58176: GO 58453
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58178: LD_ADDR_VAR 0 2
58182: PUSH
58183: LD_VAR 0 1
58187: PPUSH
58188: LD_VAR 0 2
58192: PPUSH
58193: LD_INT 1
58195: PPUSH
58196: LD_INT 1
58198: PPUSH
58199: CALL 20776 0 4
58203: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58204: LD_ADDR_VAR 0 5
58208: PUSH
58209: LD_EXP 34
58213: PPUSH
58214: LD_VAR 0 1
58218: PPUSH
58219: CALL 20126 0 2
58223: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58224: LD_EXP 35
58228: PUSH
58229: LD_VAR 0 5
58233: ARRAY
58234: PUSH
58235: LD_EXP 36
58239: LESS
58240: IFFALSE 58429
// begin for i := 1 to vehicles do
58242: LD_ADDR_VAR 0 4
58246: PUSH
58247: DOUBLE
58248: LD_INT 1
58250: DEC
58251: ST_TO_ADDR
58252: LD_VAR 0 2
58256: PUSH
58257: FOR_TO
58258: IFFALSE 58427
// begin if hackTanksCaptured [ index ] = hackLimit then
58260: LD_EXP 35
58264: PUSH
58265: LD_VAR 0 5
58269: ARRAY
58270: PUSH
58271: LD_EXP 36
58275: EQUAL
58276: IFFALSE 58280
// break ;
58278: GO 58427
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58280: LD_ADDR_EXP 38
58284: PUSH
58285: LD_EXP 38
58289: PPUSH
58290: LD_VAR 0 5
58294: PPUSH
58295: LD_EXP 38
58299: PUSH
58300: LD_VAR 0 5
58304: ARRAY
58305: PUSH
58306: LD_INT 1
58308: PLUS
58309: PPUSH
58310: CALL_OW 1
58314: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58315: LD_ADDR_EXP 35
58319: PUSH
58320: LD_EXP 35
58324: PPUSH
58325: LD_VAR 0 5
58329: PUSH
58330: LD_EXP 35
58334: PUSH
58335: LD_VAR 0 5
58339: ARRAY
58340: PUSH
58341: LD_INT 1
58343: PLUS
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PPUSH
58349: LD_VAR 0 2
58353: PUSH
58354: LD_VAR 0 4
58358: ARRAY
58359: PUSH
58360: LD_VAR 0 2
58364: PUSH
58365: LD_VAR 0 4
58369: ARRAY
58370: PPUSH
58371: CALL_OW 255
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PPUSH
58380: CALL 20341 0 3
58384: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58385: LD_VAR 0 2
58389: PUSH
58390: LD_VAR 0 4
58394: ARRAY
58395: PPUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 255
58405: PPUSH
58406: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58410: LD_VAR 0 2
58414: PUSH
58415: LD_VAR 0 4
58419: ARRAY
58420: PPUSH
58421: CALL_OW 141
// end ;
58425: GO 58257
58427: POP
58428: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58429: LD_VAR 0 1
58433: PPUSH
58434: LD_EXP 35
58438: PUSH
58439: LD_VAR 0 5
58443: ARRAY
58444: PUSH
58445: LD_INT 0
58447: PLUS
58448: PPUSH
58449: CALL_OW 505
// end ;
58453: LD_VAR 0 3
58457: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58458: LD_INT 0
58460: PPUSH
58461: PPUSH
58462: PPUSH
58463: PPUSH
// if not hack in hackTanks then
58464: LD_VAR 0 1
58468: PUSH
58469: LD_EXP 34
58473: IN
58474: NOT
58475: IFFALSE 58479
// exit ;
58477: GO 58719
// index := GetElementIndex ( hackTanks , hack ) ;
58479: LD_ADDR_VAR 0 4
58483: PUSH
58484: LD_EXP 34
58488: PPUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: CALL 20126 0 2
58498: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58499: LD_ADDR_VAR 0 3
58503: PUSH
58504: DOUBLE
58505: LD_EXP 35
58509: PUSH
58510: LD_VAR 0 4
58514: ARRAY
58515: INC
58516: ST_TO_ADDR
58517: LD_INT 1
58519: PUSH
58520: FOR_DOWNTO
58521: IFFALSE 58693
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58523: LD_ADDR_VAR 0 5
58527: PUSH
58528: LD_EXP 35
58532: PUSH
58533: LD_VAR 0 4
58537: ARRAY
58538: PUSH
58539: LD_VAR 0 3
58543: ARRAY
58544: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58545: LD_VAR 0 5
58549: PUSH
58550: LD_INT 1
58552: ARRAY
58553: PPUSH
58554: CALL_OW 302
58558: NOT
58559: PUSH
58560: LD_VAR 0 5
58564: PUSH
58565: LD_INT 1
58567: ARRAY
58568: PPUSH
58569: CALL_OW 255
58573: PUSH
58574: LD_VAR 0 1
58578: PPUSH
58579: CALL_OW 255
58583: NONEQUAL
58584: OR
58585: IFFALSE 58691
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58587: LD_VAR 0 5
58591: PUSH
58592: LD_INT 1
58594: ARRAY
58595: PPUSH
58596: CALL_OW 305
58600: PUSH
58601: LD_VAR 0 5
58605: PUSH
58606: LD_INT 1
58608: ARRAY
58609: PPUSH
58610: CALL_OW 255
58614: PUSH
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 255
58624: EQUAL
58625: AND
58626: IFFALSE 58650
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58628: LD_VAR 0 5
58632: PUSH
58633: LD_INT 1
58635: ARRAY
58636: PPUSH
58637: LD_VAR 0 5
58641: PUSH
58642: LD_INT 2
58644: ARRAY
58645: PPUSH
58646: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58650: LD_ADDR_EXP 35
58654: PUSH
58655: LD_EXP 35
58659: PPUSH
58660: LD_VAR 0 4
58664: PPUSH
58665: LD_EXP 35
58669: PUSH
58670: LD_VAR 0 4
58674: ARRAY
58675: PPUSH
58676: LD_VAR 0 3
58680: PPUSH
58681: CALL_OW 3
58685: PPUSH
58686: CALL_OW 1
58690: ST_TO_ADDR
// end ; end ;
58691: GO 58520
58693: POP
58694: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58695: LD_VAR 0 1
58699: PPUSH
58700: LD_EXP 35
58704: PUSH
58705: LD_VAR 0 4
58709: ARRAY
58710: PUSH
58711: LD_INT 0
58713: PLUS
58714: PPUSH
58715: CALL_OW 505
// end ;
58719: LD_VAR 0 2
58723: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58724: LD_INT 0
58726: PPUSH
58727: PPUSH
58728: PPUSH
58729: PPUSH
// if not hack in hackTanks then
58730: LD_VAR 0 1
58734: PUSH
58735: LD_EXP 34
58739: IN
58740: NOT
58741: IFFALSE 58745
// exit ;
58743: GO 58830
// index := GetElementIndex ( hackTanks , hack ) ;
58745: LD_ADDR_VAR 0 5
58749: PUSH
58750: LD_EXP 34
58754: PPUSH
58755: LD_VAR 0 1
58759: PPUSH
58760: CALL 20126 0 2
58764: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58765: LD_ADDR_VAR 0 4
58769: PUSH
58770: DOUBLE
58771: LD_INT 1
58773: DEC
58774: ST_TO_ADDR
58775: LD_EXP 35
58779: PUSH
58780: LD_VAR 0 5
58784: ARRAY
58785: PUSH
58786: FOR_TO
58787: IFFALSE 58828
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58789: LD_EXP 35
58793: PUSH
58794: LD_VAR 0 5
58798: ARRAY
58799: PUSH
58800: LD_VAR 0 4
58804: ARRAY
58805: PUSH
58806: LD_INT 1
58808: ARRAY
58809: PUSH
58810: LD_VAR 0 2
58814: EQUAL
58815: IFFALSE 58826
// KillUnit ( vehicle ) ;
58817: LD_VAR 0 2
58821: PPUSH
58822: CALL_OW 66
58826: GO 58786
58828: POP
58829: POP
// end ;
58830: LD_VAR 0 3
58834: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58835: LD_EXP 39
58839: NOT
58840: IFFALSE 58875
58842: GO 58844
58844: DISABLE
// begin initMiner := true ;
58845: LD_ADDR_EXP 39
58849: PUSH
58850: LD_INT 1
58852: ST_TO_ADDR
// minersList := [ ] ;
58853: LD_ADDR_EXP 40
58857: PUSH
58858: EMPTY
58859: ST_TO_ADDR
// minerMinesList := [ ] ;
58860: LD_ADDR_EXP 41
58864: PUSH
58865: EMPTY
58866: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58867: LD_ADDR_EXP 42
58871: PUSH
58872: LD_INT 5
58874: ST_TO_ADDR
// end ;
58875: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58876: LD_EXP 39
58880: PUSH
58881: LD_INT 34
58883: PUSH
58884: LD_INT 81
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PPUSH
58891: CALL_OW 69
58895: AND
58896: IFFALSE 59357
58898: GO 58900
58900: DISABLE
58901: LD_INT 0
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
// begin enable ;
58907: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58908: LD_ADDR_VAR 0 1
58912: PUSH
58913: LD_INT 34
58915: PUSH
58916: LD_INT 81
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PPUSH
58923: CALL_OW 69
58927: PUSH
58928: FOR_IN
58929: IFFALSE 59001
// begin if not i in minersList then
58931: LD_VAR 0 1
58935: PUSH
58936: LD_EXP 40
58940: IN
58941: NOT
58942: IFFALSE 58999
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58944: LD_ADDR_EXP 40
58948: PUSH
58949: LD_EXP 40
58953: PPUSH
58954: LD_EXP 40
58958: PUSH
58959: LD_INT 1
58961: PLUS
58962: PPUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 1
58972: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58973: LD_ADDR_EXP 41
58977: PUSH
58978: LD_EXP 41
58982: PPUSH
58983: LD_EXP 41
58987: PUSH
58988: LD_INT 1
58990: PLUS
58991: PPUSH
58992: EMPTY
58993: PPUSH
58994: CALL_OW 1
58998: ST_TO_ADDR
// end end ;
58999: GO 58928
59001: POP
59002: POP
// for i := minerMinesList downto 1 do
59003: LD_ADDR_VAR 0 1
59007: PUSH
59008: DOUBLE
59009: LD_EXP 41
59013: INC
59014: ST_TO_ADDR
59015: LD_INT 1
59017: PUSH
59018: FOR_DOWNTO
59019: IFFALSE 59355
// begin if IsLive ( minersList [ i ] ) then
59021: LD_EXP 40
59025: PUSH
59026: LD_VAR 0 1
59030: ARRAY
59031: PPUSH
59032: CALL_OW 300
59036: IFFALSE 59064
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59038: LD_EXP 40
59042: PUSH
59043: LD_VAR 0 1
59047: ARRAY
59048: PPUSH
59049: LD_EXP 41
59053: PUSH
59054: LD_VAR 0 1
59058: ARRAY
59059: PPUSH
59060: CALL_OW 505
// if not minerMinesList [ i ] then
59064: LD_EXP 41
59068: PUSH
59069: LD_VAR 0 1
59073: ARRAY
59074: NOT
59075: IFFALSE 59079
// continue ;
59077: GO 59018
// for j := minerMinesList [ i ] downto 1 do
59079: LD_ADDR_VAR 0 2
59083: PUSH
59084: DOUBLE
59085: LD_EXP 41
59089: PUSH
59090: LD_VAR 0 1
59094: ARRAY
59095: INC
59096: ST_TO_ADDR
59097: LD_INT 1
59099: PUSH
59100: FOR_DOWNTO
59101: IFFALSE 59351
// begin side := GetSide ( minersList [ i ] ) ;
59103: LD_ADDR_VAR 0 3
59107: PUSH
59108: LD_EXP 40
59112: PUSH
59113: LD_VAR 0 1
59117: ARRAY
59118: PPUSH
59119: CALL_OW 255
59123: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59124: LD_ADDR_VAR 0 4
59128: PUSH
59129: LD_EXP 41
59133: PUSH
59134: LD_VAR 0 1
59138: ARRAY
59139: PUSH
59140: LD_VAR 0 2
59144: ARRAY
59145: PUSH
59146: LD_INT 1
59148: ARRAY
59149: PPUSH
59150: LD_EXP 41
59154: PUSH
59155: LD_VAR 0 1
59159: ARRAY
59160: PUSH
59161: LD_VAR 0 2
59165: ARRAY
59166: PUSH
59167: LD_INT 2
59169: ARRAY
59170: PPUSH
59171: CALL_OW 428
59175: ST_TO_ADDR
// if not tmp then
59176: LD_VAR 0 4
59180: NOT
59181: IFFALSE 59185
// continue ;
59183: GO 59100
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59185: LD_VAR 0 4
59189: PUSH
59190: LD_INT 81
59192: PUSH
59193: LD_VAR 0 3
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PPUSH
59202: CALL_OW 69
59206: IN
59207: PUSH
59208: LD_EXP 41
59212: PUSH
59213: LD_VAR 0 1
59217: ARRAY
59218: PUSH
59219: LD_VAR 0 2
59223: ARRAY
59224: PUSH
59225: LD_INT 1
59227: ARRAY
59228: PPUSH
59229: LD_EXP 41
59233: PUSH
59234: LD_VAR 0 1
59238: ARRAY
59239: PUSH
59240: LD_VAR 0 2
59244: ARRAY
59245: PUSH
59246: LD_INT 2
59248: ARRAY
59249: PPUSH
59250: CALL_OW 458
59254: AND
59255: IFFALSE 59349
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59257: LD_EXP 41
59261: PUSH
59262: LD_VAR 0 1
59266: ARRAY
59267: PUSH
59268: LD_VAR 0 2
59272: ARRAY
59273: PUSH
59274: LD_INT 1
59276: ARRAY
59277: PPUSH
59278: LD_EXP 41
59282: PUSH
59283: LD_VAR 0 1
59287: ARRAY
59288: PUSH
59289: LD_VAR 0 2
59293: ARRAY
59294: PUSH
59295: LD_INT 2
59297: ARRAY
59298: PPUSH
59299: LD_VAR 0 3
59303: PPUSH
59304: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59308: LD_ADDR_EXP 41
59312: PUSH
59313: LD_EXP 41
59317: PPUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: LD_EXP 41
59327: PUSH
59328: LD_VAR 0 1
59332: ARRAY
59333: PPUSH
59334: LD_VAR 0 2
59338: PPUSH
59339: CALL_OW 3
59343: PPUSH
59344: CALL_OW 1
59348: ST_TO_ADDR
// end ; end ;
59349: GO 59100
59351: POP
59352: POP
// end ;
59353: GO 59018
59355: POP
59356: POP
// end ;
59357: PPOPN 4
59359: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59360: LD_INT 0
59362: PPUSH
59363: PPUSH
// result := false ;
59364: LD_ADDR_VAR 0 4
59368: PUSH
59369: LD_INT 0
59371: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59372: LD_VAR 0 1
59376: PPUSH
59377: CALL_OW 264
59381: PUSH
59382: LD_INT 81
59384: EQUAL
59385: NOT
59386: IFFALSE 59390
// exit ;
59388: GO 59630
// index := GetElementIndex ( minersList , unit ) ;
59390: LD_ADDR_VAR 0 5
59394: PUSH
59395: LD_EXP 40
59399: PPUSH
59400: LD_VAR 0 1
59404: PPUSH
59405: CALL 20126 0 2
59409: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59410: LD_EXP 41
59414: PUSH
59415: LD_VAR 0 5
59419: ARRAY
59420: PUSH
59421: LD_EXP 42
59425: GREATEREQUAL
59426: IFFALSE 59430
// exit ;
59428: GO 59630
// ComMoveXY ( unit , x , y ) ;
59430: LD_VAR 0 1
59434: PPUSH
59435: LD_VAR 0 2
59439: PPUSH
59440: LD_VAR 0 3
59444: PPUSH
59445: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59449: LD_INT 35
59451: PPUSH
59452: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59456: LD_VAR 0 1
59460: PPUSH
59461: LD_VAR 0 2
59465: PPUSH
59466: LD_VAR 0 3
59470: PPUSH
59471: CALL 51389 0 3
59475: NOT
59476: PUSH
59477: LD_VAR 0 1
59481: PPUSH
59482: CALL_OW 314
59486: AND
59487: IFFALSE 59491
// exit ;
59489: GO 59630
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59491: LD_VAR 0 2
59495: PPUSH
59496: LD_VAR 0 3
59500: PPUSH
59501: CALL_OW 428
59505: PUSH
59506: LD_VAR 0 1
59510: EQUAL
59511: PUSH
59512: LD_VAR 0 1
59516: PPUSH
59517: CALL_OW 314
59521: NOT
59522: AND
59523: IFFALSE 59449
// PlaySoundXY ( x , y , PlantMine ) ;
59525: LD_VAR 0 2
59529: PPUSH
59530: LD_VAR 0 3
59534: PPUSH
59535: LD_STRING PlantMine
59537: PPUSH
59538: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59542: LD_VAR 0 2
59546: PPUSH
59547: LD_VAR 0 3
59551: PPUSH
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL_OW 255
59561: PPUSH
59562: LD_INT 0
59564: PPUSH
59565: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59569: LD_ADDR_EXP 41
59573: PUSH
59574: LD_EXP 41
59578: PPUSH
59579: LD_VAR 0 5
59583: PUSH
59584: LD_EXP 41
59588: PUSH
59589: LD_VAR 0 5
59593: ARRAY
59594: PUSH
59595: LD_INT 1
59597: PLUS
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PPUSH
59603: LD_VAR 0 2
59607: PUSH
59608: LD_VAR 0 3
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PPUSH
59617: CALL 20341 0 3
59621: ST_TO_ADDR
// result := true ;
59622: LD_ADDR_VAR 0 4
59626: PUSH
59627: LD_INT 1
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 4
59634: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59635: LD_INT 0
59637: PPUSH
59638: PPUSH
59639: PPUSH
// if not unit in minersList then
59640: LD_VAR 0 1
59644: PUSH
59645: LD_EXP 40
59649: IN
59650: NOT
59651: IFFALSE 59655
// exit ;
59653: GO 60047
// index := GetElementIndex ( minersList , unit ) ;
59655: LD_ADDR_VAR 0 6
59659: PUSH
59660: LD_EXP 40
59664: PPUSH
59665: LD_VAR 0 1
59669: PPUSH
59670: CALL 20126 0 2
59674: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59675: LD_ADDR_VAR 0 5
59679: PUSH
59680: DOUBLE
59681: LD_EXP 41
59685: PUSH
59686: LD_VAR 0 6
59690: ARRAY
59691: INC
59692: ST_TO_ADDR
59693: LD_INT 1
59695: PUSH
59696: FOR_DOWNTO
59697: IFFALSE 59858
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59699: LD_EXP 41
59703: PUSH
59704: LD_VAR 0 6
59708: ARRAY
59709: PUSH
59710: LD_VAR 0 5
59714: ARRAY
59715: PUSH
59716: LD_INT 1
59718: ARRAY
59719: PUSH
59720: LD_VAR 0 2
59724: EQUAL
59725: PUSH
59726: LD_EXP 41
59730: PUSH
59731: LD_VAR 0 6
59735: ARRAY
59736: PUSH
59737: LD_VAR 0 5
59741: ARRAY
59742: PUSH
59743: LD_INT 2
59745: ARRAY
59746: PUSH
59747: LD_VAR 0 3
59751: EQUAL
59752: AND
59753: IFFALSE 59856
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59755: LD_EXP 41
59759: PUSH
59760: LD_VAR 0 6
59764: ARRAY
59765: PUSH
59766: LD_VAR 0 5
59770: ARRAY
59771: PUSH
59772: LD_INT 1
59774: ARRAY
59775: PPUSH
59776: LD_EXP 41
59780: PUSH
59781: LD_VAR 0 6
59785: ARRAY
59786: PUSH
59787: LD_VAR 0 5
59791: ARRAY
59792: PUSH
59793: LD_INT 2
59795: ARRAY
59796: PPUSH
59797: LD_VAR 0 1
59801: PPUSH
59802: CALL_OW 255
59806: PPUSH
59807: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59811: LD_ADDR_EXP 41
59815: PUSH
59816: LD_EXP 41
59820: PPUSH
59821: LD_VAR 0 6
59825: PPUSH
59826: LD_EXP 41
59830: PUSH
59831: LD_VAR 0 6
59835: ARRAY
59836: PPUSH
59837: LD_VAR 0 5
59841: PPUSH
59842: CALL_OW 3
59846: PPUSH
59847: CALL_OW 1
59851: ST_TO_ADDR
// exit ;
59852: POP
59853: POP
59854: GO 60047
// end ; end ;
59856: GO 59696
59858: POP
59859: POP
// for i := minerMinesList [ index ] downto 1 do
59860: LD_ADDR_VAR 0 5
59864: PUSH
59865: DOUBLE
59866: LD_EXP 41
59870: PUSH
59871: LD_VAR 0 6
59875: ARRAY
59876: INC
59877: ST_TO_ADDR
59878: LD_INT 1
59880: PUSH
59881: FOR_DOWNTO
59882: IFFALSE 60045
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59884: LD_EXP 41
59888: PUSH
59889: LD_VAR 0 6
59893: ARRAY
59894: PUSH
59895: LD_VAR 0 5
59899: ARRAY
59900: PUSH
59901: LD_INT 1
59903: ARRAY
59904: PPUSH
59905: LD_EXP 41
59909: PUSH
59910: LD_VAR 0 6
59914: ARRAY
59915: PUSH
59916: LD_VAR 0 5
59920: ARRAY
59921: PUSH
59922: LD_INT 2
59924: ARRAY
59925: PPUSH
59926: LD_VAR 0 2
59930: PPUSH
59931: LD_VAR 0 3
59935: PPUSH
59936: CALL_OW 298
59940: PUSH
59941: LD_INT 6
59943: LESS
59944: IFFALSE 60043
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59946: LD_EXP 41
59950: PUSH
59951: LD_VAR 0 6
59955: ARRAY
59956: PUSH
59957: LD_VAR 0 5
59961: ARRAY
59962: PUSH
59963: LD_INT 1
59965: ARRAY
59966: PPUSH
59967: LD_EXP 41
59971: PUSH
59972: LD_VAR 0 6
59976: ARRAY
59977: PUSH
59978: LD_VAR 0 5
59982: ARRAY
59983: PUSH
59984: LD_INT 2
59986: ARRAY
59987: PPUSH
59988: LD_VAR 0 1
59992: PPUSH
59993: CALL_OW 255
59997: PPUSH
59998: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60002: LD_ADDR_EXP 41
60006: PUSH
60007: LD_EXP 41
60011: PPUSH
60012: LD_VAR 0 6
60016: PPUSH
60017: LD_EXP 41
60021: PUSH
60022: LD_VAR 0 6
60026: ARRAY
60027: PPUSH
60028: LD_VAR 0 5
60032: PPUSH
60033: CALL_OW 3
60037: PPUSH
60038: CALL_OW 1
60042: ST_TO_ADDR
// end ; end ;
60043: GO 59881
60045: POP
60046: POP
// end ;
60047: LD_VAR 0 4
60051: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60052: LD_INT 0
60054: PPUSH
60055: PPUSH
60056: PPUSH
60057: PPUSH
60058: PPUSH
60059: PPUSH
60060: PPUSH
60061: PPUSH
60062: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60063: LD_VAR 0 1
60067: PPUSH
60068: CALL_OW 264
60072: PUSH
60073: LD_INT 81
60075: EQUAL
60076: NOT
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_EXP 40
60087: IN
60088: NOT
60089: OR
60090: IFFALSE 60094
// exit ;
60092: GO 60416
// index := GetElementIndex ( minersList , unit ) ;
60094: LD_ADDR_VAR 0 6
60098: PUSH
60099: LD_EXP 40
60103: PPUSH
60104: LD_VAR 0 1
60108: PPUSH
60109: CALL 20126 0 2
60113: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60114: LD_ADDR_VAR 0 8
60118: PUSH
60119: LD_EXP 42
60123: PUSH
60124: LD_EXP 41
60128: PUSH
60129: LD_VAR 0 6
60133: ARRAY
60134: MINUS
60135: ST_TO_ADDR
// if not minesFreeAmount then
60136: LD_VAR 0 8
60140: NOT
60141: IFFALSE 60145
// exit ;
60143: GO 60416
// tmp := [ ] ;
60145: LD_ADDR_VAR 0 7
60149: PUSH
60150: EMPTY
60151: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60152: LD_ADDR_VAR 0 5
60156: PUSH
60157: DOUBLE
60158: LD_INT 1
60160: DEC
60161: ST_TO_ADDR
60162: LD_VAR 0 8
60166: PUSH
60167: FOR_TO
60168: IFFALSE 60363
// begin _d := rand ( 0 , 5 ) ;
60170: LD_ADDR_VAR 0 11
60174: PUSH
60175: LD_INT 0
60177: PPUSH
60178: LD_INT 5
60180: PPUSH
60181: CALL_OW 12
60185: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60186: LD_ADDR_VAR 0 12
60190: PUSH
60191: LD_INT 2
60193: PPUSH
60194: LD_INT 6
60196: PPUSH
60197: CALL_OW 12
60201: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60202: LD_ADDR_VAR 0 9
60206: PUSH
60207: LD_VAR 0 2
60211: PPUSH
60212: LD_VAR 0 11
60216: PPUSH
60217: LD_VAR 0 12
60221: PPUSH
60222: CALL_OW 272
60226: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60227: LD_ADDR_VAR 0 10
60231: PUSH
60232: LD_VAR 0 3
60236: PPUSH
60237: LD_VAR 0 11
60241: PPUSH
60242: LD_VAR 0 12
60246: PPUSH
60247: CALL_OW 273
60251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60252: LD_VAR 0 9
60256: PPUSH
60257: LD_VAR 0 10
60261: PPUSH
60262: CALL_OW 488
60266: PUSH
60267: LD_VAR 0 9
60271: PUSH
60272: LD_VAR 0 10
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_VAR 0 7
60285: IN
60286: NOT
60287: AND
60288: PUSH
60289: LD_VAR 0 9
60293: PPUSH
60294: LD_VAR 0 10
60298: PPUSH
60299: CALL_OW 458
60303: NOT
60304: AND
60305: IFFALSE 60347
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60307: LD_ADDR_VAR 0 7
60311: PUSH
60312: LD_VAR 0 7
60316: PPUSH
60317: LD_VAR 0 7
60321: PUSH
60322: LD_INT 1
60324: PLUS
60325: PPUSH
60326: LD_VAR 0 9
60330: PUSH
60331: LD_VAR 0 10
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PPUSH
60340: CALL_OW 1
60344: ST_TO_ADDR
60345: GO 60361
// i := i - 1 ;
60347: LD_ADDR_VAR 0 5
60351: PUSH
60352: LD_VAR 0 5
60356: PUSH
60357: LD_INT 1
60359: MINUS
60360: ST_TO_ADDR
// end ;
60361: GO 60167
60363: POP
60364: POP
// for i in tmp do
60365: LD_ADDR_VAR 0 5
60369: PUSH
60370: LD_VAR 0 7
60374: PUSH
60375: FOR_IN
60376: IFFALSE 60414
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60378: LD_VAR 0 1
60382: PPUSH
60383: LD_VAR 0 5
60387: PUSH
60388: LD_INT 1
60390: ARRAY
60391: PPUSH
60392: LD_VAR 0 5
60396: PUSH
60397: LD_INT 2
60399: ARRAY
60400: PPUSH
60401: CALL 59360 0 3
60405: NOT
60406: IFFALSE 60412
// exit ;
60408: POP
60409: POP
60410: GO 60416
60412: GO 60375
60414: POP
60415: POP
// end ;
60416: LD_VAR 0 4
60420: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60421: LD_INT 0
60423: PPUSH
60424: PPUSH
60425: PPUSH
60426: PPUSH
60427: PPUSH
60428: PPUSH
60429: PPUSH
// if not GetClass ( unit ) = class_sniper then
60430: LD_VAR 0 1
60434: PPUSH
60435: CALL_OW 257
60439: PUSH
60440: LD_INT 5
60442: EQUAL
60443: NOT
60444: IFFALSE 60448
// exit ;
60446: GO 60836
// dist := 8 ;
60448: LD_ADDR_VAR 0 5
60452: PUSH
60453: LD_INT 8
60455: ST_TO_ADDR
// viewRange := 12 ;
60456: LD_ADDR_VAR 0 7
60460: PUSH
60461: LD_INT 12
60463: ST_TO_ADDR
// side := GetSide ( unit ) ;
60464: LD_ADDR_VAR 0 6
60468: PUSH
60469: LD_VAR 0 1
60473: PPUSH
60474: CALL_OW 255
60478: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60479: LD_INT 61
60481: PPUSH
60482: LD_VAR 0 6
60486: PPUSH
60487: CALL_OW 321
60491: PUSH
60492: LD_INT 2
60494: EQUAL
60495: IFFALSE 60505
// viewRange := 16 ;
60497: LD_ADDR_VAR 0 7
60501: PUSH
60502: LD_INT 16
60504: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60505: LD_VAR 0 1
60509: PPUSH
60510: LD_VAR 0 2
60514: PPUSH
60515: LD_VAR 0 3
60519: PPUSH
60520: CALL_OW 297
60524: PUSH
60525: LD_VAR 0 5
60529: GREATER
60530: IFFALSE 60609
// begin ComMoveXY ( unit , x , y ) ;
60532: LD_VAR 0 1
60536: PPUSH
60537: LD_VAR 0 2
60541: PPUSH
60542: LD_VAR 0 3
60546: PPUSH
60547: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60551: LD_INT 35
60553: PPUSH
60554: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60558: LD_VAR 0 1
60562: PPUSH
60563: LD_VAR 0 2
60567: PPUSH
60568: LD_VAR 0 3
60572: PPUSH
60573: CALL 51389 0 3
60577: NOT
60578: IFFALSE 60582
// exit ;
60580: GO 60836
// until GetDistUnitXY ( unit , x , y ) < dist ;
60582: LD_VAR 0 1
60586: PPUSH
60587: LD_VAR 0 2
60591: PPUSH
60592: LD_VAR 0 3
60596: PPUSH
60597: CALL_OW 297
60601: PUSH
60602: LD_VAR 0 5
60606: LESS
60607: IFFALSE 60551
// end ; ComTurnXY ( unit , x , y ) ;
60609: LD_VAR 0 1
60613: PPUSH
60614: LD_VAR 0 2
60618: PPUSH
60619: LD_VAR 0 3
60623: PPUSH
60624: CALL_OW 118
// wait ( 5 ) ;
60628: LD_INT 5
60630: PPUSH
60631: CALL_OW 67
// _d := GetDir ( unit ) ;
60635: LD_ADDR_VAR 0 10
60639: PUSH
60640: LD_VAR 0 1
60644: PPUSH
60645: CALL_OW 254
60649: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60650: LD_ADDR_VAR 0 8
60654: PUSH
60655: LD_VAR 0 1
60659: PPUSH
60660: CALL_OW 250
60664: PPUSH
60665: LD_VAR 0 10
60669: PPUSH
60670: LD_VAR 0 5
60674: PPUSH
60675: CALL_OW 272
60679: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60680: LD_ADDR_VAR 0 9
60684: PUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL_OW 251
60694: PPUSH
60695: LD_VAR 0 10
60699: PPUSH
60700: LD_VAR 0 5
60704: PPUSH
60705: CALL_OW 273
60709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60710: LD_VAR 0 8
60714: PPUSH
60715: LD_VAR 0 9
60719: PPUSH
60720: CALL_OW 488
60724: NOT
60725: IFFALSE 60729
// exit ;
60727: GO 60836
// ComAnimCustom ( unit , 1 ) ;
60729: LD_VAR 0 1
60733: PPUSH
60734: LD_INT 1
60736: PPUSH
60737: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60741: LD_VAR 0 8
60745: PPUSH
60746: LD_VAR 0 9
60750: PPUSH
60751: LD_VAR 0 6
60755: PPUSH
60756: LD_VAR 0 7
60760: PPUSH
60761: CALL_OW 330
// repeat wait ( 1 ) ;
60765: LD_INT 1
60767: PPUSH
60768: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60772: LD_VAR 0 1
60776: PPUSH
60777: CALL_OW 316
60781: PUSH
60782: LD_VAR 0 1
60786: PPUSH
60787: CALL_OW 314
60791: OR
60792: PUSH
60793: LD_VAR 0 1
60797: PPUSH
60798: CALL_OW 302
60802: NOT
60803: OR
60804: PUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: CALL_OW 301
60814: OR
60815: IFFALSE 60765
// RemoveSeeing ( _x , _y , side ) ;
60817: LD_VAR 0 8
60821: PPUSH
60822: LD_VAR 0 9
60826: PPUSH
60827: LD_VAR 0 6
60831: PPUSH
60832: CALL_OW 331
// end ; end_of_file
60836: LD_VAR 0 4
60840: RET
// every 0 0$1 do
60841: GO 60843
60843: DISABLE
// begin enable ;
60844: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60845: LD_STRING updateTimer(
60847: PUSH
60848: LD_OWVAR 1
60852: STR
60853: PUSH
60854: LD_STRING );
60856: STR
60857: PPUSH
60858: CALL_OW 559
// end ;
60862: END
// export function SOS_MapStart ( ) ; begin
60863: LD_INT 0
60865: PPUSH
// if streamModeActive then
60866: LD_EXP 43
60870: IFFALSE 60879
// DefineStreamItems ( true ) ;
60872: LD_INT 1
60874: PPUSH
60875: CALL 62533 0 1
// UpdateFactoryWaypoints ( ) ;
60879: CALL 75394 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60883: CALL 75651 0 0
// end ;
60887: LD_VAR 0 1
60891: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60892: LD_INT 0
60894: PPUSH
// if p2 = 100 then
60895: LD_VAR 0 2
60899: PUSH
60900: LD_INT 100
60902: EQUAL
60903: IFFALSE 61906
// begin if not StreamModeActive then
60905: LD_EXP 43
60909: NOT
60910: IFFALSE 60920
// StreamModeActive := true ;
60912: LD_ADDR_EXP 43
60916: PUSH
60917: LD_INT 1
60919: ST_TO_ADDR
// if p3 = 0 then
60920: LD_VAR 0 3
60924: PUSH
60925: LD_INT 0
60927: EQUAL
60928: IFFALSE 60934
// InitStreamMode ;
60930: CALL 62069 0 0
// if p3 = 1 then
60934: LD_VAR 0 3
60938: PUSH
60939: LD_INT 1
60941: EQUAL
60942: IFFALSE 60952
// sRocket := true ;
60944: LD_ADDR_EXP 48
60948: PUSH
60949: LD_INT 1
60951: ST_TO_ADDR
// if p3 = 2 then
60952: LD_VAR 0 3
60956: PUSH
60957: LD_INT 2
60959: EQUAL
60960: IFFALSE 60970
// sSpeed := true ;
60962: LD_ADDR_EXP 47
60966: PUSH
60967: LD_INT 1
60969: ST_TO_ADDR
// if p3 = 3 then
60970: LD_VAR 0 3
60974: PUSH
60975: LD_INT 3
60977: EQUAL
60978: IFFALSE 60988
// sEngine := true ;
60980: LD_ADDR_EXP 49
60984: PUSH
60985: LD_INT 1
60987: ST_TO_ADDR
// if p3 = 4 then
60988: LD_VAR 0 3
60992: PUSH
60993: LD_INT 4
60995: EQUAL
60996: IFFALSE 61006
// sSpec := true ;
60998: LD_ADDR_EXP 46
61002: PUSH
61003: LD_INT 1
61005: ST_TO_ADDR
// if p3 = 5 then
61006: LD_VAR 0 3
61010: PUSH
61011: LD_INT 5
61013: EQUAL
61014: IFFALSE 61024
// sLevel := true ;
61016: LD_ADDR_EXP 50
61020: PUSH
61021: LD_INT 1
61023: ST_TO_ADDR
// if p3 = 6 then
61024: LD_VAR 0 3
61028: PUSH
61029: LD_INT 6
61031: EQUAL
61032: IFFALSE 61042
// sArmoury := true ;
61034: LD_ADDR_EXP 51
61038: PUSH
61039: LD_INT 1
61041: ST_TO_ADDR
// if p3 = 7 then
61042: LD_VAR 0 3
61046: PUSH
61047: LD_INT 7
61049: EQUAL
61050: IFFALSE 61060
// sRadar := true ;
61052: LD_ADDR_EXP 52
61056: PUSH
61057: LD_INT 1
61059: ST_TO_ADDR
// if p3 = 8 then
61060: LD_VAR 0 3
61064: PUSH
61065: LD_INT 8
61067: EQUAL
61068: IFFALSE 61078
// sBunker := true ;
61070: LD_ADDR_EXP 53
61074: PUSH
61075: LD_INT 1
61077: ST_TO_ADDR
// if p3 = 9 then
61078: LD_VAR 0 3
61082: PUSH
61083: LD_INT 9
61085: EQUAL
61086: IFFALSE 61096
// sHack := true ;
61088: LD_ADDR_EXP 54
61092: PUSH
61093: LD_INT 1
61095: ST_TO_ADDR
// if p3 = 10 then
61096: LD_VAR 0 3
61100: PUSH
61101: LD_INT 10
61103: EQUAL
61104: IFFALSE 61114
// sFire := true ;
61106: LD_ADDR_EXP 55
61110: PUSH
61111: LD_INT 1
61113: ST_TO_ADDR
// if p3 = 11 then
61114: LD_VAR 0 3
61118: PUSH
61119: LD_INT 11
61121: EQUAL
61122: IFFALSE 61132
// sRefresh := true ;
61124: LD_ADDR_EXP 56
61128: PUSH
61129: LD_INT 1
61131: ST_TO_ADDR
// if p3 = 12 then
61132: LD_VAR 0 3
61136: PUSH
61137: LD_INT 12
61139: EQUAL
61140: IFFALSE 61150
// sExp := true ;
61142: LD_ADDR_EXP 57
61146: PUSH
61147: LD_INT 1
61149: ST_TO_ADDR
// if p3 = 13 then
61150: LD_VAR 0 3
61154: PUSH
61155: LD_INT 13
61157: EQUAL
61158: IFFALSE 61168
// sDepot := true ;
61160: LD_ADDR_EXP 58
61164: PUSH
61165: LD_INT 1
61167: ST_TO_ADDR
// if p3 = 14 then
61168: LD_VAR 0 3
61172: PUSH
61173: LD_INT 14
61175: EQUAL
61176: IFFALSE 61186
// sFlag := true ;
61178: LD_ADDR_EXP 59
61182: PUSH
61183: LD_INT 1
61185: ST_TO_ADDR
// if p3 = 15 then
61186: LD_VAR 0 3
61190: PUSH
61191: LD_INT 15
61193: EQUAL
61194: IFFALSE 61204
// sKamikadze := true ;
61196: LD_ADDR_EXP 67
61200: PUSH
61201: LD_INT 1
61203: ST_TO_ADDR
// if p3 = 16 then
61204: LD_VAR 0 3
61208: PUSH
61209: LD_INT 16
61211: EQUAL
61212: IFFALSE 61222
// sTroll := true ;
61214: LD_ADDR_EXP 68
61218: PUSH
61219: LD_INT 1
61221: ST_TO_ADDR
// if p3 = 17 then
61222: LD_VAR 0 3
61226: PUSH
61227: LD_INT 17
61229: EQUAL
61230: IFFALSE 61240
// sSlow := true ;
61232: LD_ADDR_EXP 69
61236: PUSH
61237: LD_INT 1
61239: ST_TO_ADDR
// if p3 = 18 then
61240: LD_VAR 0 3
61244: PUSH
61245: LD_INT 18
61247: EQUAL
61248: IFFALSE 61258
// sLack := true ;
61250: LD_ADDR_EXP 70
61254: PUSH
61255: LD_INT 1
61257: ST_TO_ADDR
// if p3 = 19 then
61258: LD_VAR 0 3
61262: PUSH
61263: LD_INT 19
61265: EQUAL
61266: IFFALSE 61276
// sTank := true ;
61268: LD_ADDR_EXP 72
61272: PUSH
61273: LD_INT 1
61275: ST_TO_ADDR
// if p3 = 20 then
61276: LD_VAR 0 3
61280: PUSH
61281: LD_INT 20
61283: EQUAL
61284: IFFALSE 61294
// sRemote := true ;
61286: LD_ADDR_EXP 73
61290: PUSH
61291: LD_INT 1
61293: ST_TO_ADDR
// if p3 = 21 then
61294: LD_VAR 0 3
61298: PUSH
61299: LD_INT 21
61301: EQUAL
61302: IFFALSE 61312
// sPowell := true ;
61304: LD_ADDR_EXP 74
61308: PUSH
61309: LD_INT 1
61311: ST_TO_ADDR
// if p3 = 22 then
61312: LD_VAR 0 3
61316: PUSH
61317: LD_INT 22
61319: EQUAL
61320: IFFALSE 61330
// sTeleport := true ;
61322: LD_ADDR_EXP 77
61326: PUSH
61327: LD_INT 1
61329: ST_TO_ADDR
// if p3 = 23 then
61330: LD_VAR 0 3
61334: PUSH
61335: LD_INT 23
61337: EQUAL
61338: IFFALSE 61348
// sOilTower := true ;
61340: LD_ADDR_EXP 79
61344: PUSH
61345: LD_INT 1
61347: ST_TO_ADDR
// if p3 = 24 then
61348: LD_VAR 0 3
61352: PUSH
61353: LD_INT 24
61355: EQUAL
61356: IFFALSE 61366
// sShovel := true ;
61358: LD_ADDR_EXP 80
61362: PUSH
61363: LD_INT 1
61365: ST_TO_ADDR
// if p3 = 25 then
61366: LD_VAR 0 3
61370: PUSH
61371: LD_INT 25
61373: EQUAL
61374: IFFALSE 61384
// sSheik := true ;
61376: LD_ADDR_EXP 81
61380: PUSH
61381: LD_INT 1
61383: ST_TO_ADDR
// if p3 = 26 then
61384: LD_VAR 0 3
61388: PUSH
61389: LD_INT 26
61391: EQUAL
61392: IFFALSE 61402
// sEarthquake := true ;
61394: LD_ADDR_EXP 83
61398: PUSH
61399: LD_INT 1
61401: ST_TO_ADDR
// if p3 = 27 then
61402: LD_VAR 0 3
61406: PUSH
61407: LD_INT 27
61409: EQUAL
61410: IFFALSE 61420
// sAI := true ;
61412: LD_ADDR_EXP 84
61416: PUSH
61417: LD_INT 1
61419: ST_TO_ADDR
// if p3 = 28 then
61420: LD_VAR 0 3
61424: PUSH
61425: LD_INT 28
61427: EQUAL
61428: IFFALSE 61438
// sCargo := true ;
61430: LD_ADDR_EXP 87
61434: PUSH
61435: LD_INT 1
61437: ST_TO_ADDR
// if p3 = 29 then
61438: LD_VAR 0 3
61442: PUSH
61443: LD_INT 29
61445: EQUAL
61446: IFFALSE 61456
// sDLaser := true ;
61448: LD_ADDR_EXP 88
61452: PUSH
61453: LD_INT 1
61455: ST_TO_ADDR
// if p3 = 30 then
61456: LD_VAR 0 3
61460: PUSH
61461: LD_INT 30
61463: EQUAL
61464: IFFALSE 61474
// sExchange := true ;
61466: LD_ADDR_EXP 89
61470: PUSH
61471: LD_INT 1
61473: ST_TO_ADDR
// if p3 = 31 then
61474: LD_VAR 0 3
61478: PUSH
61479: LD_INT 31
61481: EQUAL
61482: IFFALSE 61492
// sFac := true ;
61484: LD_ADDR_EXP 90
61488: PUSH
61489: LD_INT 1
61491: ST_TO_ADDR
// if p3 = 32 then
61492: LD_VAR 0 3
61496: PUSH
61497: LD_INT 32
61499: EQUAL
61500: IFFALSE 61510
// sPower := true ;
61502: LD_ADDR_EXP 91
61506: PUSH
61507: LD_INT 1
61509: ST_TO_ADDR
// if p3 = 33 then
61510: LD_VAR 0 3
61514: PUSH
61515: LD_INT 33
61517: EQUAL
61518: IFFALSE 61528
// sRandom := true ;
61520: LD_ADDR_EXP 92
61524: PUSH
61525: LD_INT 1
61527: ST_TO_ADDR
// if p3 = 34 then
61528: LD_VAR 0 3
61532: PUSH
61533: LD_INT 34
61535: EQUAL
61536: IFFALSE 61546
// sShield := true ;
61538: LD_ADDR_EXP 93
61542: PUSH
61543: LD_INT 1
61545: ST_TO_ADDR
// if p3 = 35 then
61546: LD_VAR 0 3
61550: PUSH
61551: LD_INT 35
61553: EQUAL
61554: IFFALSE 61564
// sTime := true ;
61556: LD_ADDR_EXP 94
61560: PUSH
61561: LD_INT 1
61563: ST_TO_ADDR
// if p3 = 36 then
61564: LD_VAR 0 3
61568: PUSH
61569: LD_INT 36
61571: EQUAL
61572: IFFALSE 61582
// sTools := true ;
61574: LD_ADDR_EXP 95
61578: PUSH
61579: LD_INT 1
61581: ST_TO_ADDR
// if p3 = 101 then
61582: LD_VAR 0 3
61586: PUSH
61587: LD_INT 101
61589: EQUAL
61590: IFFALSE 61600
// sSold := true ;
61592: LD_ADDR_EXP 60
61596: PUSH
61597: LD_INT 1
61599: ST_TO_ADDR
// if p3 = 102 then
61600: LD_VAR 0 3
61604: PUSH
61605: LD_INT 102
61607: EQUAL
61608: IFFALSE 61618
// sDiff := true ;
61610: LD_ADDR_EXP 61
61614: PUSH
61615: LD_INT 1
61617: ST_TO_ADDR
// if p3 = 103 then
61618: LD_VAR 0 3
61622: PUSH
61623: LD_INT 103
61625: EQUAL
61626: IFFALSE 61636
// sFog := true ;
61628: LD_ADDR_EXP 64
61632: PUSH
61633: LD_INT 1
61635: ST_TO_ADDR
// if p3 = 104 then
61636: LD_VAR 0 3
61640: PUSH
61641: LD_INT 104
61643: EQUAL
61644: IFFALSE 61654
// sReset := true ;
61646: LD_ADDR_EXP 65
61650: PUSH
61651: LD_INT 1
61653: ST_TO_ADDR
// if p3 = 105 then
61654: LD_VAR 0 3
61658: PUSH
61659: LD_INT 105
61661: EQUAL
61662: IFFALSE 61672
// sSun := true ;
61664: LD_ADDR_EXP 66
61668: PUSH
61669: LD_INT 1
61671: ST_TO_ADDR
// if p3 = 106 then
61672: LD_VAR 0 3
61676: PUSH
61677: LD_INT 106
61679: EQUAL
61680: IFFALSE 61690
// sTiger := true ;
61682: LD_ADDR_EXP 62
61686: PUSH
61687: LD_INT 1
61689: ST_TO_ADDR
// if p3 = 107 then
61690: LD_VAR 0 3
61694: PUSH
61695: LD_INT 107
61697: EQUAL
61698: IFFALSE 61708
// sBomb := true ;
61700: LD_ADDR_EXP 63
61704: PUSH
61705: LD_INT 1
61707: ST_TO_ADDR
// if p3 = 108 then
61708: LD_VAR 0 3
61712: PUSH
61713: LD_INT 108
61715: EQUAL
61716: IFFALSE 61726
// sWound := true ;
61718: LD_ADDR_EXP 71
61722: PUSH
61723: LD_INT 1
61725: ST_TO_ADDR
// if p3 = 109 then
61726: LD_VAR 0 3
61730: PUSH
61731: LD_INT 109
61733: EQUAL
61734: IFFALSE 61744
// sBetray := true ;
61736: LD_ADDR_EXP 75
61740: PUSH
61741: LD_INT 1
61743: ST_TO_ADDR
// if p3 = 110 then
61744: LD_VAR 0 3
61748: PUSH
61749: LD_INT 110
61751: EQUAL
61752: IFFALSE 61762
// sContamin := true ;
61754: LD_ADDR_EXP 76
61758: PUSH
61759: LD_INT 1
61761: ST_TO_ADDR
// if p3 = 111 then
61762: LD_VAR 0 3
61766: PUSH
61767: LD_INT 111
61769: EQUAL
61770: IFFALSE 61780
// sOil := true ;
61772: LD_ADDR_EXP 78
61776: PUSH
61777: LD_INT 1
61779: ST_TO_ADDR
// if p3 = 112 then
61780: LD_VAR 0 3
61784: PUSH
61785: LD_INT 112
61787: EQUAL
61788: IFFALSE 61798
// sStu := true ;
61790: LD_ADDR_EXP 82
61794: PUSH
61795: LD_INT 1
61797: ST_TO_ADDR
// if p3 = 113 then
61798: LD_VAR 0 3
61802: PUSH
61803: LD_INT 113
61805: EQUAL
61806: IFFALSE 61816
// sBazooka := true ;
61808: LD_ADDR_EXP 85
61812: PUSH
61813: LD_INT 1
61815: ST_TO_ADDR
// if p3 = 114 then
61816: LD_VAR 0 3
61820: PUSH
61821: LD_INT 114
61823: EQUAL
61824: IFFALSE 61834
// sMortar := true ;
61826: LD_ADDR_EXP 86
61830: PUSH
61831: LD_INT 1
61833: ST_TO_ADDR
// if p3 = 115 then
61834: LD_VAR 0 3
61838: PUSH
61839: LD_INT 115
61841: EQUAL
61842: IFFALSE 61852
// sRanger := true ;
61844: LD_ADDR_EXP 96
61848: PUSH
61849: LD_INT 1
61851: ST_TO_ADDR
// if p3 = 116 then
61852: LD_VAR 0 3
61856: PUSH
61857: LD_INT 116
61859: EQUAL
61860: IFFALSE 61870
// sComputer := true ;
61862: LD_ADDR_EXP 97
61866: PUSH
61867: LD_INT 1
61869: ST_TO_ADDR
// if p3 = 117 then
61870: LD_VAR 0 3
61874: PUSH
61875: LD_INT 117
61877: EQUAL
61878: IFFALSE 61888
// s30 := true ;
61880: LD_ADDR_EXP 98
61884: PUSH
61885: LD_INT 1
61887: ST_TO_ADDR
// if p3 = 118 then
61888: LD_VAR 0 3
61892: PUSH
61893: LD_INT 118
61895: EQUAL
61896: IFFALSE 61906
// s60 := true ;
61898: LD_ADDR_EXP 99
61902: PUSH
61903: LD_INT 1
61905: ST_TO_ADDR
// end ; if p2 = 101 then
61906: LD_VAR 0 2
61910: PUSH
61911: LD_INT 101
61913: EQUAL
61914: IFFALSE 62042
// begin case p3 of 1 :
61916: LD_VAR 0 3
61920: PUSH
61921: LD_INT 1
61923: DOUBLE
61924: EQUAL
61925: IFTRUE 61929
61927: GO 61936
61929: POP
// hHackUnlimitedResources ; 2 :
61930: CALL 74140 0 0
61934: GO 62042
61936: LD_INT 2
61938: DOUBLE
61939: EQUAL
61940: IFTRUE 61944
61942: GO 61951
61944: POP
// hHackSetLevel10 ; 3 :
61945: CALL 74273 0 0
61949: GO 62042
61951: LD_INT 3
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61959
61957: GO 61966
61959: POP
// hHackSetLevel10YourUnits ; 4 :
61960: CALL 74358 0 0
61964: GO 62042
61966: LD_INT 4
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 61974
61972: GO 61981
61974: POP
// hHackInvincible ; 5 :
61975: CALL 74806 0 0
61979: GO 62042
61981: LD_INT 5
61983: DOUBLE
61984: EQUAL
61985: IFTRUE 61989
61987: GO 61996
61989: POP
// hHackInvisible ; 6 :
61990: CALL 74917 0 0
61994: GO 62042
61996: LD_INT 6
61998: DOUBLE
61999: EQUAL
62000: IFTRUE 62004
62002: GO 62011
62004: POP
// hHackChangeYourSide ; 7 :
62005: CALL 74974 0 0
62009: GO 62042
62011: LD_INT 7
62013: DOUBLE
62014: EQUAL
62015: IFTRUE 62019
62017: GO 62026
62019: POP
// hHackChangeUnitSide ; 8 :
62020: CALL 75016 0 0
62024: GO 62042
62026: LD_INT 8
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62034
62032: GO 62041
62034: POP
// hHackFog ; end ;
62035: CALL 75117 0 0
62039: GO 62042
62041: POP
// end ; end ;
62042: LD_VAR 0 7
62046: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
62047: GO 62049
62049: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
62050: LD_STRING initStreamRollete();
62052: PPUSH
62053: CALL_OW 559
// InitStreamMode ;
62057: CALL 62069 0 0
// DefineStreamItems ( false ) ;
62061: LD_INT 0
62063: PPUSH
62064: CALL 62533 0 1
// end ;
62068: END
// function InitStreamMode ; begin
62069: LD_INT 0
62071: PPUSH
// streamModeActive := false ;
62072: LD_ADDR_EXP 43
62076: PUSH
62077: LD_INT 0
62079: ST_TO_ADDR
// normalCounter := 36 ;
62080: LD_ADDR_EXP 44
62084: PUSH
62085: LD_INT 36
62087: ST_TO_ADDR
// hardcoreCounter := 18 ;
62088: LD_ADDR_EXP 45
62092: PUSH
62093: LD_INT 18
62095: ST_TO_ADDR
// sRocket := false ;
62096: LD_ADDR_EXP 48
62100: PUSH
62101: LD_INT 0
62103: ST_TO_ADDR
// sSpeed := false ;
62104: LD_ADDR_EXP 47
62108: PUSH
62109: LD_INT 0
62111: ST_TO_ADDR
// sEngine := false ;
62112: LD_ADDR_EXP 49
62116: PUSH
62117: LD_INT 0
62119: ST_TO_ADDR
// sSpec := false ;
62120: LD_ADDR_EXP 46
62124: PUSH
62125: LD_INT 0
62127: ST_TO_ADDR
// sLevel := false ;
62128: LD_ADDR_EXP 50
62132: PUSH
62133: LD_INT 0
62135: ST_TO_ADDR
// sArmoury := false ;
62136: LD_ADDR_EXP 51
62140: PUSH
62141: LD_INT 0
62143: ST_TO_ADDR
// sRadar := false ;
62144: LD_ADDR_EXP 52
62148: PUSH
62149: LD_INT 0
62151: ST_TO_ADDR
// sBunker := false ;
62152: LD_ADDR_EXP 53
62156: PUSH
62157: LD_INT 0
62159: ST_TO_ADDR
// sHack := false ;
62160: LD_ADDR_EXP 54
62164: PUSH
62165: LD_INT 0
62167: ST_TO_ADDR
// sFire := false ;
62168: LD_ADDR_EXP 55
62172: PUSH
62173: LD_INT 0
62175: ST_TO_ADDR
// sRefresh := false ;
62176: LD_ADDR_EXP 56
62180: PUSH
62181: LD_INT 0
62183: ST_TO_ADDR
// sExp := false ;
62184: LD_ADDR_EXP 57
62188: PUSH
62189: LD_INT 0
62191: ST_TO_ADDR
// sDepot := false ;
62192: LD_ADDR_EXP 58
62196: PUSH
62197: LD_INT 0
62199: ST_TO_ADDR
// sFlag := false ;
62200: LD_ADDR_EXP 59
62204: PUSH
62205: LD_INT 0
62207: ST_TO_ADDR
// sKamikadze := false ;
62208: LD_ADDR_EXP 67
62212: PUSH
62213: LD_INT 0
62215: ST_TO_ADDR
// sTroll := false ;
62216: LD_ADDR_EXP 68
62220: PUSH
62221: LD_INT 0
62223: ST_TO_ADDR
// sSlow := false ;
62224: LD_ADDR_EXP 69
62228: PUSH
62229: LD_INT 0
62231: ST_TO_ADDR
// sLack := false ;
62232: LD_ADDR_EXP 70
62236: PUSH
62237: LD_INT 0
62239: ST_TO_ADDR
// sTank := false ;
62240: LD_ADDR_EXP 72
62244: PUSH
62245: LD_INT 0
62247: ST_TO_ADDR
// sRemote := false ;
62248: LD_ADDR_EXP 73
62252: PUSH
62253: LD_INT 0
62255: ST_TO_ADDR
// sPowell := false ;
62256: LD_ADDR_EXP 74
62260: PUSH
62261: LD_INT 0
62263: ST_TO_ADDR
// sTeleport := false ;
62264: LD_ADDR_EXP 77
62268: PUSH
62269: LD_INT 0
62271: ST_TO_ADDR
// sOilTower := false ;
62272: LD_ADDR_EXP 79
62276: PUSH
62277: LD_INT 0
62279: ST_TO_ADDR
// sShovel := false ;
62280: LD_ADDR_EXP 80
62284: PUSH
62285: LD_INT 0
62287: ST_TO_ADDR
// sSheik := false ;
62288: LD_ADDR_EXP 81
62292: PUSH
62293: LD_INT 0
62295: ST_TO_ADDR
// sEarthquake := false ;
62296: LD_ADDR_EXP 83
62300: PUSH
62301: LD_INT 0
62303: ST_TO_ADDR
// sAI := false ;
62304: LD_ADDR_EXP 84
62308: PUSH
62309: LD_INT 0
62311: ST_TO_ADDR
// sCargo := false ;
62312: LD_ADDR_EXP 87
62316: PUSH
62317: LD_INT 0
62319: ST_TO_ADDR
// sDLaser := false ;
62320: LD_ADDR_EXP 88
62324: PUSH
62325: LD_INT 0
62327: ST_TO_ADDR
// sExchange := false ;
62328: LD_ADDR_EXP 89
62332: PUSH
62333: LD_INT 0
62335: ST_TO_ADDR
// sFac := false ;
62336: LD_ADDR_EXP 90
62340: PUSH
62341: LD_INT 0
62343: ST_TO_ADDR
// sPower := false ;
62344: LD_ADDR_EXP 91
62348: PUSH
62349: LD_INT 0
62351: ST_TO_ADDR
// sRandom := false ;
62352: LD_ADDR_EXP 92
62356: PUSH
62357: LD_INT 0
62359: ST_TO_ADDR
// sShield := false ;
62360: LD_ADDR_EXP 93
62364: PUSH
62365: LD_INT 0
62367: ST_TO_ADDR
// sTime := false ;
62368: LD_ADDR_EXP 94
62372: PUSH
62373: LD_INT 0
62375: ST_TO_ADDR
// sTools := false ;
62376: LD_ADDR_EXP 95
62380: PUSH
62381: LD_INT 0
62383: ST_TO_ADDR
// sSold := false ;
62384: LD_ADDR_EXP 60
62388: PUSH
62389: LD_INT 0
62391: ST_TO_ADDR
// sDiff := false ;
62392: LD_ADDR_EXP 61
62396: PUSH
62397: LD_INT 0
62399: ST_TO_ADDR
// sFog := false ;
62400: LD_ADDR_EXP 64
62404: PUSH
62405: LD_INT 0
62407: ST_TO_ADDR
// sReset := false ;
62408: LD_ADDR_EXP 65
62412: PUSH
62413: LD_INT 0
62415: ST_TO_ADDR
// sSun := false ;
62416: LD_ADDR_EXP 66
62420: PUSH
62421: LD_INT 0
62423: ST_TO_ADDR
// sTiger := false ;
62424: LD_ADDR_EXP 62
62428: PUSH
62429: LD_INT 0
62431: ST_TO_ADDR
// sBomb := false ;
62432: LD_ADDR_EXP 63
62436: PUSH
62437: LD_INT 0
62439: ST_TO_ADDR
// sWound := false ;
62440: LD_ADDR_EXP 71
62444: PUSH
62445: LD_INT 0
62447: ST_TO_ADDR
// sBetray := false ;
62448: LD_ADDR_EXP 75
62452: PUSH
62453: LD_INT 0
62455: ST_TO_ADDR
// sContamin := false ;
62456: LD_ADDR_EXP 76
62460: PUSH
62461: LD_INT 0
62463: ST_TO_ADDR
// sOil := false ;
62464: LD_ADDR_EXP 78
62468: PUSH
62469: LD_INT 0
62471: ST_TO_ADDR
// sStu := false ;
62472: LD_ADDR_EXP 82
62476: PUSH
62477: LD_INT 0
62479: ST_TO_ADDR
// sBazooka := false ;
62480: LD_ADDR_EXP 85
62484: PUSH
62485: LD_INT 0
62487: ST_TO_ADDR
// sMortar := false ;
62488: LD_ADDR_EXP 86
62492: PUSH
62493: LD_INT 0
62495: ST_TO_ADDR
// sRanger := false ;
62496: LD_ADDR_EXP 96
62500: PUSH
62501: LD_INT 0
62503: ST_TO_ADDR
// sComputer := false ;
62504: LD_ADDR_EXP 97
62508: PUSH
62509: LD_INT 0
62511: ST_TO_ADDR
// s30 := false ;
62512: LD_ADDR_EXP 98
62516: PUSH
62517: LD_INT 0
62519: ST_TO_ADDR
// s60 := false ;
62520: LD_ADDR_EXP 99
62524: PUSH
62525: LD_INT 0
62527: ST_TO_ADDR
// end ;
62528: LD_VAR 0 1
62532: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62533: LD_INT 0
62535: PPUSH
62536: PPUSH
62537: PPUSH
62538: PPUSH
62539: PPUSH
62540: PPUSH
62541: PPUSH
// result := [ ] ;
62542: LD_ADDR_VAR 0 2
62546: PUSH
62547: EMPTY
62548: ST_TO_ADDR
// if campaign_id = 1 then
62549: LD_OWVAR 69
62553: PUSH
62554: LD_INT 1
62556: EQUAL
62557: IFFALSE 65723
// begin case mission_number of 1 :
62559: LD_OWVAR 70
62563: PUSH
62564: LD_INT 1
62566: DOUBLE
62567: EQUAL
62568: IFTRUE 62572
62570: GO 62648
62572: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62573: LD_ADDR_VAR 0 2
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: LD_INT 4
62583: PUSH
62584: LD_INT 11
62586: PUSH
62587: LD_INT 12
62589: PUSH
62590: LD_INT 15
62592: PUSH
62593: LD_INT 16
62595: PUSH
62596: LD_INT 22
62598: PUSH
62599: LD_INT 23
62601: PUSH
62602: LD_INT 26
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 101
62618: PUSH
62619: LD_INT 102
62621: PUSH
62622: LD_INT 106
62624: PUSH
62625: LD_INT 116
62627: PUSH
62628: LD_INT 117
62630: PUSH
62631: LD_INT 118
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: ST_TO_ADDR
62646: GO 65721
62648: LD_INT 2
62650: DOUBLE
62651: EQUAL
62652: IFTRUE 62656
62654: GO 62740
62656: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62657: LD_ADDR_VAR 0 2
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: LD_INT 11
62670: PUSH
62671: LD_INT 12
62673: PUSH
62674: LD_INT 15
62676: PUSH
62677: LD_INT 16
62679: PUSH
62680: LD_INT 22
62682: PUSH
62683: LD_INT 23
62685: PUSH
62686: LD_INT 26
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 101
62702: PUSH
62703: LD_INT 102
62705: PUSH
62706: LD_INT 105
62708: PUSH
62709: LD_INT 106
62711: PUSH
62712: LD_INT 108
62714: PUSH
62715: LD_INT 116
62717: PUSH
62718: LD_INT 117
62720: PUSH
62721: LD_INT 118
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: ST_TO_ADDR
62738: GO 65721
62740: LD_INT 3
62742: DOUBLE
62743: EQUAL
62744: IFTRUE 62748
62746: GO 62836
62748: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
62749: LD_ADDR_VAR 0 2
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: LD_INT 4
62759: PUSH
62760: LD_INT 5
62762: PUSH
62763: LD_INT 11
62765: PUSH
62766: LD_INT 12
62768: PUSH
62769: LD_INT 15
62771: PUSH
62772: LD_INT 16
62774: PUSH
62775: LD_INT 22
62777: PUSH
62778: LD_INT 26
62780: PUSH
62781: LD_INT 36
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 101
62798: PUSH
62799: LD_INT 102
62801: PUSH
62802: LD_INT 105
62804: PUSH
62805: LD_INT 106
62807: PUSH
62808: LD_INT 108
62810: PUSH
62811: LD_INT 116
62813: PUSH
62814: LD_INT 117
62816: PUSH
62817: LD_INT 118
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: ST_TO_ADDR
62834: GO 65721
62836: LD_INT 4
62838: DOUBLE
62839: EQUAL
62840: IFTRUE 62844
62842: GO 62940
62844: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
62845: LD_ADDR_VAR 0 2
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 4
62855: PUSH
62856: LD_INT 5
62858: PUSH
62859: LD_INT 8
62861: PUSH
62862: LD_INT 11
62864: PUSH
62865: LD_INT 12
62867: PUSH
62868: LD_INT 15
62870: PUSH
62871: LD_INT 16
62873: PUSH
62874: LD_INT 22
62876: PUSH
62877: LD_INT 23
62879: PUSH
62880: LD_INT 26
62882: PUSH
62883: LD_INT 36
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 101
62902: PUSH
62903: LD_INT 102
62905: PUSH
62906: LD_INT 105
62908: PUSH
62909: LD_INT 106
62911: PUSH
62912: LD_INT 108
62914: PUSH
62915: LD_INT 116
62917: PUSH
62918: LD_INT 117
62920: PUSH
62921: LD_INT 118
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: ST_TO_ADDR
62938: GO 65721
62940: LD_INT 5
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62948
62946: GO 63060
62948: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62949: LD_ADDR_VAR 0 2
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: LD_INT 4
62959: PUSH
62960: LD_INT 5
62962: PUSH
62963: LD_INT 6
62965: PUSH
62966: LD_INT 8
62968: PUSH
62969: LD_INT 11
62971: PUSH
62972: LD_INT 12
62974: PUSH
62975: LD_INT 15
62977: PUSH
62978: LD_INT 16
62980: PUSH
62981: LD_INT 22
62983: PUSH
62984: LD_INT 23
62986: PUSH
62987: LD_INT 25
62989: PUSH
62990: LD_INT 26
62992: PUSH
62993: LD_INT 36
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 101
63014: PUSH
63015: LD_INT 102
63017: PUSH
63018: LD_INT 105
63020: PUSH
63021: LD_INT 106
63023: PUSH
63024: LD_INT 108
63026: PUSH
63027: LD_INT 109
63029: PUSH
63030: LD_INT 112
63032: PUSH
63033: LD_INT 116
63035: PUSH
63036: LD_INT 117
63038: PUSH
63039: LD_INT 118
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: ST_TO_ADDR
63058: GO 65721
63060: LD_INT 6
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63068
63066: GO 63200
63068: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63069: LD_ADDR_VAR 0 2
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: LD_INT 4
63079: PUSH
63080: LD_INT 5
63082: PUSH
63083: LD_INT 6
63085: PUSH
63086: LD_INT 8
63088: PUSH
63089: LD_INT 11
63091: PUSH
63092: LD_INT 12
63094: PUSH
63095: LD_INT 15
63097: PUSH
63098: LD_INT 16
63100: PUSH
63101: LD_INT 20
63103: PUSH
63104: LD_INT 21
63106: PUSH
63107: LD_INT 22
63109: PUSH
63110: LD_INT 23
63112: PUSH
63113: LD_INT 25
63115: PUSH
63116: LD_INT 26
63118: PUSH
63119: LD_INT 30
63121: PUSH
63122: LD_INT 31
63124: PUSH
63125: LD_INT 32
63127: PUSH
63128: LD_INT 36
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 101
63154: PUSH
63155: LD_INT 102
63157: PUSH
63158: LD_INT 105
63160: PUSH
63161: LD_INT 106
63163: PUSH
63164: LD_INT 108
63166: PUSH
63167: LD_INT 109
63169: PUSH
63170: LD_INT 112
63172: PUSH
63173: LD_INT 116
63175: PUSH
63176: LD_INT 117
63178: PUSH
63179: LD_INT 118
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: ST_TO_ADDR
63198: GO 65721
63200: LD_INT 7
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63208
63206: GO 63320
63208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63209: LD_ADDR_VAR 0 2
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: LD_INT 4
63219: PUSH
63220: LD_INT 5
63222: PUSH
63223: LD_INT 7
63225: PUSH
63226: LD_INT 11
63228: PUSH
63229: LD_INT 12
63231: PUSH
63232: LD_INT 15
63234: PUSH
63235: LD_INT 16
63237: PUSH
63238: LD_INT 20
63240: PUSH
63241: LD_INT 21
63243: PUSH
63244: LD_INT 22
63246: PUSH
63247: LD_INT 23
63249: PUSH
63250: LD_INT 25
63252: PUSH
63253: LD_INT 26
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 101
63274: PUSH
63275: LD_INT 102
63277: PUSH
63278: LD_INT 103
63280: PUSH
63281: LD_INT 105
63283: PUSH
63284: LD_INT 106
63286: PUSH
63287: LD_INT 108
63289: PUSH
63290: LD_INT 112
63292: PUSH
63293: LD_INT 116
63295: PUSH
63296: LD_INT 117
63298: PUSH
63299: LD_INT 118
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: ST_TO_ADDR
63318: GO 65721
63320: LD_INT 8
63322: DOUBLE
63323: EQUAL
63324: IFTRUE 63328
63326: GO 63468
63328: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63329: LD_ADDR_VAR 0 2
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: LD_INT 5
63342: PUSH
63343: LD_INT 6
63345: PUSH
63346: LD_INT 7
63348: PUSH
63349: LD_INT 8
63351: PUSH
63352: LD_INT 11
63354: PUSH
63355: LD_INT 12
63357: PUSH
63358: LD_INT 15
63360: PUSH
63361: LD_INT 16
63363: PUSH
63364: LD_INT 20
63366: PUSH
63367: LD_INT 21
63369: PUSH
63370: LD_INT 22
63372: PUSH
63373: LD_INT 23
63375: PUSH
63376: LD_INT 25
63378: PUSH
63379: LD_INT 26
63381: PUSH
63382: LD_INT 30
63384: PUSH
63385: LD_INT 31
63387: PUSH
63388: LD_INT 32
63390: PUSH
63391: LD_INT 36
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 101
63418: PUSH
63419: LD_INT 102
63421: PUSH
63422: LD_INT 103
63424: PUSH
63425: LD_INT 105
63427: PUSH
63428: LD_INT 106
63430: PUSH
63431: LD_INT 108
63433: PUSH
63434: LD_INT 109
63436: PUSH
63437: LD_INT 112
63439: PUSH
63440: LD_INT 116
63442: PUSH
63443: LD_INT 117
63445: PUSH
63446: LD_INT 118
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: ST_TO_ADDR
63466: GO 65721
63468: LD_INT 9
63470: DOUBLE
63471: EQUAL
63472: IFTRUE 63476
63474: GO 63624
63476: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63477: LD_ADDR_VAR 0 2
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 4
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: LD_INT 6
63493: PUSH
63494: LD_INT 7
63496: PUSH
63497: LD_INT 8
63499: PUSH
63500: LD_INT 11
63502: PUSH
63503: LD_INT 12
63505: PUSH
63506: LD_INT 15
63508: PUSH
63509: LD_INT 16
63511: PUSH
63512: LD_INT 20
63514: PUSH
63515: LD_INT 21
63517: PUSH
63518: LD_INT 22
63520: PUSH
63521: LD_INT 23
63523: PUSH
63524: LD_INT 25
63526: PUSH
63527: LD_INT 26
63529: PUSH
63530: LD_INT 28
63532: PUSH
63533: LD_INT 30
63535: PUSH
63536: LD_INT 31
63538: PUSH
63539: LD_INT 32
63541: PUSH
63542: LD_INT 36
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 101
63570: PUSH
63571: LD_INT 102
63573: PUSH
63574: LD_INT 103
63576: PUSH
63577: LD_INT 105
63579: PUSH
63580: LD_INT 106
63582: PUSH
63583: LD_INT 108
63585: PUSH
63586: LD_INT 109
63588: PUSH
63589: LD_INT 112
63591: PUSH
63592: LD_INT 114
63594: PUSH
63595: LD_INT 116
63597: PUSH
63598: LD_INT 117
63600: PUSH
63601: LD_INT 118
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: ST_TO_ADDR
63622: GO 65721
63624: LD_INT 10
63626: DOUBLE
63627: EQUAL
63628: IFTRUE 63632
63630: GO 63828
63632: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63633: LD_ADDR_VAR 0 2
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 4
63643: PUSH
63644: LD_INT 5
63646: PUSH
63647: LD_INT 6
63649: PUSH
63650: LD_INT 7
63652: PUSH
63653: LD_INT 8
63655: PUSH
63656: LD_INT 9
63658: PUSH
63659: LD_INT 10
63661: PUSH
63662: LD_INT 11
63664: PUSH
63665: LD_INT 12
63667: PUSH
63668: LD_INT 13
63670: PUSH
63671: LD_INT 14
63673: PUSH
63674: LD_INT 15
63676: PUSH
63677: LD_INT 16
63679: PUSH
63680: LD_INT 17
63682: PUSH
63683: LD_INT 18
63685: PUSH
63686: LD_INT 19
63688: PUSH
63689: LD_INT 20
63691: PUSH
63692: LD_INT 21
63694: PUSH
63695: LD_INT 22
63697: PUSH
63698: LD_INT 23
63700: PUSH
63701: LD_INT 24
63703: PUSH
63704: LD_INT 25
63706: PUSH
63707: LD_INT 26
63709: PUSH
63710: LD_INT 28
63712: PUSH
63713: LD_INT 30
63715: PUSH
63716: LD_INT 31
63718: PUSH
63719: LD_INT 32
63721: PUSH
63722: LD_INT 36
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 101
63758: PUSH
63759: LD_INT 102
63761: PUSH
63762: LD_INT 103
63764: PUSH
63765: LD_INT 104
63767: PUSH
63768: LD_INT 105
63770: PUSH
63771: LD_INT 106
63773: PUSH
63774: LD_INT 107
63776: PUSH
63777: LD_INT 108
63779: PUSH
63780: LD_INT 109
63782: PUSH
63783: LD_INT 110
63785: PUSH
63786: LD_INT 111
63788: PUSH
63789: LD_INT 112
63791: PUSH
63792: LD_INT 114
63794: PUSH
63795: LD_INT 116
63797: PUSH
63798: LD_INT 117
63800: PUSH
63801: LD_INT 118
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: ST_TO_ADDR
63826: GO 65721
63828: LD_INT 11
63830: DOUBLE
63831: EQUAL
63832: IFTRUE 63836
63834: GO 64040
63836: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
63837: LD_ADDR_VAR 0 2
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 3
63847: PUSH
63848: LD_INT 4
63850: PUSH
63851: LD_INT 5
63853: PUSH
63854: LD_INT 6
63856: PUSH
63857: LD_INT 7
63859: PUSH
63860: LD_INT 8
63862: PUSH
63863: LD_INT 9
63865: PUSH
63866: LD_INT 10
63868: PUSH
63869: LD_INT 11
63871: PUSH
63872: LD_INT 12
63874: PUSH
63875: LD_INT 13
63877: PUSH
63878: LD_INT 14
63880: PUSH
63881: LD_INT 15
63883: PUSH
63884: LD_INT 16
63886: PUSH
63887: LD_INT 17
63889: PUSH
63890: LD_INT 18
63892: PUSH
63893: LD_INT 19
63895: PUSH
63896: LD_INT 20
63898: PUSH
63899: LD_INT 21
63901: PUSH
63902: LD_INT 22
63904: PUSH
63905: LD_INT 23
63907: PUSH
63908: LD_INT 24
63910: PUSH
63911: LD_INT 25
63913: PUSH
63914: LD_INT 26
63916: PUSH
63917: LD_INT 28
63919: PUSH
63920: LD_INT 30
63922: PUSH
63923: LD_INT 31
63925: PUSH
63926: LD_INT 32
63928: PUSH
63929: LD_INT 34
63931: PUSH
63932: LD_INT 36
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 101
63970: PUSH
63971: LD_INT 102
63973: PUSH
63974: LD_INT 103
63976: PUSH
63977: LD_INT 104
63979: PUSH
63980: LD_INT 105
63982: PUSH
63983: LD_INT 106
63985: PUSH
63986: LD_INT 107
63988: PUSH
63989: LD_INT 108
63991: PUSH
63992: LD_INT 109
63994: PUSH
63995: LD_INT 110
63997: PUSH
63998: LD_INT 111
64000: PUSH
64001: LD_INT 112
64003: PUSH
64004: LD_INT 114
64006: PUSH
64007: LD_INT 116
64009: PUSH
64010: LD_INT 117
64012: PUSH
64013: LD_INT 118
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: ST_TO_ADDR
64038: GO 65721
64040: LD_INT 12
64042: DOUBLE
64043: EQUAL
64044: IFTRUE 64048
64046: GO 64268
64048: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64049: LD_ADDR_VAR 0 2
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: LD_INT 5
64068: PUSH
64069: LD_INT 6
64071: PUSH
64072: LD_INT 7
64074: PUSH
64075: LD_INT 8
64077: PUSH
64078: LD_INT 9
64080: PUSH
64081: LD_INT 10
64083: PUSH
64084: LD_INT 11
64086: PUSH
64087: LD_INT 12
64089: PUSH
64090: LD_INT 13
64092: PUSH
64093: LD_INT 14
64095: PUSH
64096: LD_INT 15
64098: PUSH
64099: LD_INT 16
64101: PUSH
64102: LD_INT 17
64104: PUSH
64105: LD_INT 18
64107: PUSH
64108: LD_INT 19
64110: PUSH
64111: LD_INT 20
64113: PUSH
64114: LD_INT 21
64116: PUSH
64117: LD_INT 22
64119: PUSH
64120: LD_INT 23
64122: PUSH
64123: LD_INT 24
64125: PUSH
64126: LD_INT 25
64128: PUSH
64129: LD_INT 26
64131: PUSH
64132: LD_INT 27
64134: PUSH
64135: LD_INT 28
64137: PUSH
64138: LD_INT 30
64140: PUSH
64141: LD_INT 31
64143: PUSH
64144: LD_INT 32
64146: PUSH
64147: LD_INT 33
64149: PUSH
64150: LD_INT 34
64152: PUSH
64153: LD_INT 36
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 101
64194: PUSH
64195: LD_INT 102
64197: PUSH
64198: LD_INT 103
64200: PUSH
64201: LD_INT 104
64203: PUSH
64204: LD_INT 105
64206: PUSH
64207: LD_INT 106
64209: PUSH
64210: LD_INT 107
64212: PUSH
64213: LD_INT 108
64215: PUSH
64216: LD_INT 109
64218: PUSH
64219: LD_INT 110
64221: PUSH
64222: LD_INT 111
64224: PUSH
64225: LD_INT 112
64227: PUSH
64228: LD_INT 113
64230: PUSH
64231: LD_INT 114
64233: PUSH
64234: LD_INT 116
64236: PUSH
64237: LD_INT 117
64239: PUSH
64240: LD_INT 118
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: ST_TO_ADDR
64266: GO 65721
64268: LD_INT 13
64270: DOUBLE
64271: EQUAL
64272: IFTRUE 64276
64274: GO 64484
64276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64277: LD_ADDR_VAR 0 2
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: LD_INT 5
64296: PUSH
64297: LD_INT 8
64299: PUSH
64300: LD_INT 9
64302: PUSH
64303: LD_INT 10
64305: PUSH
64306: LD_INT 11
64308: PUSH
64309: LD_INT 12
64311: PUSH
64312: LD_INT 14
64314: PUSH
64315: LD_INT 15
64317: PUSH
64318: LD_INT 16
64320: PUSH
64321: LD_INT 17
64323: PUSH
64324: LD_INT 18
64326: PUSH
64327: LD_INT 19
64329: PUSH
64330: LD_INT 20
64332: PUSH
64333: LD_INT 21
64335: PUSH
64336: LD_INT 22
64338: PUSH
64339: LD_INT 23
64341: PUSH
64342: LD_INT 24
64344: PUSH
64345: LD_INT 25
64347: PUSH
64348: LD_INT 26
64350: PUSH
64351: LD_INT 27
64353: PUSH
64354: LD_INT 28
64356: PUSH
64357: LD_INT 30
64359: PUSH
64360: LD_INT 31
64362: PUSH
64363: LD_INT 32
64365: PUSH
64366: LD_INT 33
64368: PUSH
64369: LD_INT 34
64371: PUSH
64372: LD_INT 36
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 101
64410: PUSH
64411: LD_INT 102
64413: PUSH
64414: LD_INT 103
64416: PUSH
64417: LD_INT 104
64419: PUSH
64420: LD_INT 105
64422: PUSH
64423: LD_INT 106
64425: PUSH
64426: LD_INT 107
64428: PUSH
64429: LD_INT 108
64431: PUSH
64432: LD_INT 109
64434: PUSH
64435: LD_INT 110
64437: PUSH
64438: LD_INT 111
64440: PUSH
64441: LD_INT 112
64443: PUSH
64444: LD_INT 113
64446: PUSH
64447: LD_INT 114
64449: PUSH
64450: LD_INT 116
64452: PUSH
64453: LD_INT 117
64455: PUSH
64456: LD_INT 118
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: ST_TO_ADDR
64482: GO 65721
64484: LD_INT 14
64486: DOUBLE
64487: EQUAL
64488: IFTRUE 64492
64490: GO 64716
64492: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64493: LD_ADDR_VAR 0 2
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: LD_INT 4
64509: PUSH
64510: LD_INT 5
64512: PUSH
64513: LD_INT 6
64515: PUSH
64516: LD_INT 7
64518: PUSH
64519: LD_INT 8
64521: PUSH
64522: LD_INT 9
64524: PUSH
64525: LD_INT 10
64527: PUSH
64528: LD_INT 11
64530: PUSH
64531: LD_INT 12
64533: PUSH
64534: LD_INT 13
64536: PUSH
64537: LD_INT 14
64539: PUSH
64540: LD_INT 15
64542: PUSH
64543: LD_INT 16
64545: PUSH
64546: LD_INT 17
64548: PUSH
64549: LD_INT 18
64551: PUSH
64552: LD_INT 19
64554: PUSH
64555: LD_INT 20
64557: PUSH
64558: LD_INT 21
64560: PUSH
64561: LD_INT 22
64563: PUSH
64564: LD_INT 23
64566: PUSH
64567: LD_INT 24
64569: PUSH
64570: LD_INT 25
64572: PUSH
64573: LD_INT 26
64575: PUSH
64576: LD_INT 27
64578: PUSH
64579: LD_INT 28
64581: PUSH
64582: LD_INT 29
64584: PUSH
64585: LD_INT 30
64587: PUSH
64588: LD_INT 31
64590: PUSH
64591: LD_INT 32
64593: PUSH
64594: LD_INT 33
64596: PUSH
64597: LD_INT 34
64599: PUSH
64600: LD_INT 36
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 101
64642: PUSH
64643: LD_INT 102
64645: PUSH
64646: LD_INT 103
64648: PUSH
64649: LD_INT 104
64651: PUSH
64652: LD_INT 105
64654: PUSH
64655: LD_INT 106
64657: PUSH
64658: LD_INT 107
64660: PUSH
64661: LD_INT 108
64663: PUSH
64664: LD_INT 109
64666: PUSH
64667: LD_INT 110
64669: PUSH
64670: LD_INT 111
64672: PUSH
64673: LD_INT 112
64675: PUSH
64676: LD_INT 113
64678: PUSH
64679: LD_INT 114
64681: PUSH
64682: LD_INT 116
64684: PUSH
64685: LD_INT 117
64687: PUSH
64688: LD_INT 118
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: ST_TO_ADDR
64714: GO 65721
64716: LD_INT 15
64718: DOUBLE
64719: EQUAL
64720: IFTRUE 64724
64722: GO 64948
64724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64725: LD_ADDR_VAR 0 2
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: LD_INT 2
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: LD_INT 4
64741: PUSH
64742: LD_INT 5
64744: PUSH
64745: LD_INT 6
64747: PUSH
64748: LD_INT 7
64750: PUSH
64751: LD_INT 8
64753: PUSH
64754: LD_INT 9
64756: PUSH
64757: LD_INT 10
64759: PUSH
64760: LD_INT 11
64762: PUSH
64763: LD_INT 12
64765: PUSH
64766: LD_INT 13
64768: PUSH
64769: LD_INT 14
64771: PUSH
64772: LD_INT 15
64774: PUSH
64775: LD_INT 16
64777: PUSH
64778: LD_INT 17
64780: PUSH
64781: LD_INT 18
64783: PUSH
64784: LD_INT 19
64786: PUSH
64787: LD_INT 20
64789: PUSH
64790: LD_INT 21
64792: PUSH
64793: LD_INT 22
64795: PUSH
64796: LD_INT 23
64798: PUSH
64799: LD_INT 24
64801: PUSH
64802: LD_INT 25
64804: PUSH
64805: LD_INT 26
64807: PUSH
64808: LD_INT 27
64810: PUSH
64811: LD_INT 28
64813: PUSH
64814: LD_INT 29
64816: PUSH
64817: LD_INT 30
64819: PUSH
64820: LD_INT 31
64822: PUSH
64823: LD_INT 32
64825: PUSH
64826: LD_INT 33
64828: PUSH
64829: LD_INT 34
64831: PUSH
64832: LD_INT 36
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 101
64874: PUSH
64875: LD_INT 102
64877: PUSH
64878: LD_INT 103
64880: PUSH
64881: LD_INT 104
64883: PUSH
64884: LD_INT 105
64886: PUSH
64887: LD_INT 106
64889: PUSH
64890: LD_INT 107
64892: PUSH
64893: LD_INT 108
64895: PUSH
64896: LD_INT 109
64898: PUSH
64899: LD_INT 110
64901: PUSH
64902: LD_INT 111
64904: PUSH
64905: LD_INT 112
64907: PUSH
64908: LD_INT 113
64910: PUSH
64911: LD_INT 114
64913: PUSH
64914: LD_INT 116
64916: PUSH
64917: LD_INT 117
64919: PUSH
64920: LD_INT 118
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: ST_TO_ADDR
64946: GO 65721
64948: LD_INT 16
64950: DOUBLE
64951: EQUAL
64952: IFTRUE 64956
64954: GO 65092
64956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64957: LD_ADDR_VAR 0 2
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: LD_INT 5
64970: PUSH
64971: LD_INT 7
64973: PUSH
64974: LD_INT 11
64976: PUSH
64977: LD_INT 12
64979: PUSH
64980: LD_INT 15
64982: PUSH
64983: LD_INT 16
64985: PUSH
64986: LD_INT 20
64988: PUSH
64989: LD_INT 21
64991: PUSH
64992: LD_INT 22
64994: PUSH
64995: LD_INT 23
64997: PUSH
64998: LD_INT 25
65000: PUSH
65001: LD_INT 26
65003: PUSH
65004: LD_INT 30
65006: PUSH
65007: LD_INT 31
65009: PUSH
65010: LD_INT 32
65012: PUSH
65013: LD_INT 33
65015: PUSH
65016: LD_INT 34
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 101
65042: PUSH
65043: LD_INT 102
65045: PUSH
65046: LD_INT 103
65048: PUSH
65049: LD_INT 106
65051: PUSH
65052: LD_INT 108
65054: PUSH
65055: LD_INT 112
65057: PUSH
65058: LD_INT 113
65060: PUSH
65061: LD_INT 114
65063: PUSH
65064: LD_INT 116
65066: PUSH
65067: LD_INT 117
65069: PUSH
65070: LD_INT 118
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: ST_TO_ADDR
65090: GO 65721
65092: LD_INT 17
65094: DOUBLE
65095: EQUAL
65096: IFTRUE 65100
65098: GO 65324
65100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65101: LD_ADDR_VAR 0 2
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: LD_INT 4
65117: PUSH
65118: LD_INT 5
65120: PUSH
65121: LD_INT 6
65123: PUSH
65124: LD_INT 7
65126: PUSH
65127: LD_INT 8
65129: PUSH
65130: LD_INT 9
65132: PUSH
65133: LD_INT 10
65135: PUSH
65136: LD_INT 11
65138: PUSH
65139: LD_INT 12
65141: PUSH
65142: LD_INT 13
65144: PUSH
65145: LD_INT 14
65147: PUSH
65148: LD_INT 15
65150: PUSH
65151: LD_INT 16
65153: PUSH
65154: LD_INT 17
65156: PUSH
65157: LD_INT 18
65159: PUSH
65160: LD_INT 19
65162: PUSH
65163: LD_INT 20
65165: PUSH
65166: LD_INT 21
65168: PUSH
65169: LD_INT 22
65171: PUSH
65172: LD_INT 23
65174: PUSH
65175: LD_INT 24
65177: PUSH
65178: LD_INT 25
65180: PUSH
65181: LD_INT 26
65183: PUSH
65184: LD_INT 27
65186: PUSH
65187: LD_INT 28
65189: PUSH
65190: LD_INT 29
65192: PUSH
65193: LD_INT 30
65195: PUSH
65196: LD_INT 31
65198: PUSH
65199: LD_INT 32
65201: PUSH
65202: LD_INT 33
65204: PUSH
65205: LD_INT 34
65207: PUSH
65208: LD_INT 36
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 101
65250: PUSH
65251: LD_INT 102
65253: PUSH
65254: LD_INT 103
65256: PUSH
65257: LD_INT 104
65259: PUSH
65260: LD_INT 105
65262: PUSH
65263: LD_INT 106
65265: PUSH
65266: LD_INT 107
65268: PUSH
65269: LD_INT 108
65271: PUSH
65272: LD_INT 109
65274: PUSH
65275: LD_INT 110
65277: PUSH
65278: LD_INT 111
65280: PUSH
65281: LD_INT 112
65283: PUSH
65284: LD_INT 113
65286: PUSH
65287: LD_INT 114
65289: PUSH
65290: LD_INT 116
65292: PUSH
65293: LD_INT 117
65295: PUSH
65296: LD_INT 118
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: ST_TO_ADDR
65322: GO 65721
65324: LD_INT 18
65326: DOUBLE
65327: EQUAL
65328: IFTRUE 65332
65330: GO 65480
65332: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65333: LD_ADDR_VAR 0 2
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 4
65343: PUSH
65344: LD_INT 5
65346: PUSH
65347: LD_INT 7
65349: PUSH
65350: LD_INT 11
65352: PUSH
65353: LD_INT 12
65355: PUSH
65356: LD_INT 15
65358: PUSH
65359: LD_INT 16
65361: PUSH
65362: LD_INT 20
65364: PUSH
65365: LD_INT 21
65367: PUSH
65368: LD_INT 22
65370: PUSH
65371: LD_INT 23
65373: PUSH
65374: LD_INT 25
65376: PUSH
65377: LD_INT 26
65379: PUSH
65380: LD_INT 30
65382: PUSH
65383: LD_INT 31
65385: PUSH
65386: LD_INT 32
65388: PUSH
65389: LD_INT 33
65391: PUSH
65392: LD_INT 34
65394: PUSH
65395: LD_INT 35
65397: PUSH
65398: LD_INT 36
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 101
65426: PUSH
65427: LD_INT 102
65429: PUSH
65430: LD_INT 103
65432: PUSH
65433: LD_INT 106
65435: PUSH
65436: LD_INT 108
65438: PUSH
65439: LD_INT 112
65441: PUSH
65442: LD_INT 113
65444: PUSH
65445: LD_INT 114
65447: PUSH
65448: LD_INT 115
65450: PUSH
65451: LD_INT 116
65453: PUSH
65454: LD_INT 117
65456: PUSH
65457: LD_INT 118
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: ST_TO_ADDR
65478: GO 65721
65480: LD_INT 19
65482: DOUBLE
65483: EQUAL
65484: IFTRUE 65488
65486: GO 65720
65488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65489: LD_ADDR_VAR 0 2
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: LD_INT 5
65508: PUSH
65509: LD_INT 6
65511: PUSH
65512: LD_INT 7
65514: PUSH
65515: LD_INT 8
65517: PUSH
65518: LD_INT 9
65520: PUSH
65521: LD_INT 10
65523: PUSH
65524: LD_INT 11
65526: PUSH
65527: LD_INT 12
65529: PUSH
65530: LD_INT 13
65532: PUSH
65533: LD_INT 14
65535: PUSH
65536: LD_INT 15
65538: PUSH
65539: LD_INT 16
65541: PUSH
65542: LD_INT 17
65544: PUSH
65545: LD_INT 18
65547: PUSH
65548: LD_INT 19
65550: PUSH
65551: LD_INT 20
65553: PUSH
65554: LD_INT 21
65556: PUSH
65557: LD_INT 22
65559: PUSH
65560: LD_INT 23
65562: PUSH
65563: LD_INT 24
65565: PUSH
65566: LD_INT 25
65568: PUSH
65569: LD_INT 26
65571: PUSH
65572: LD_INT 27
65574: PUSH
65575: LD_INT 28
65577: PUSH
65578: LD_INT 29
65580: PUSH
65581: LD_INT 30
65583: PUSH
65584: LD_INT 31
65586: PUSH
65587: LD_INT 32
65589: PUSH
65590: LD_INT 33
65592: PUSH
65593: LD_INT 34
65595: PUSH
65596: LD_INT 35
65598: PUSH
65599: LD_INT 36
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 101
65642: PUSH
65643: LD_INT 102
65645: PUSH
65646: LD_INT 103
65648: PUSH
65649: LD_INT 104
65651: PUSH
65652: LD_INT 105
65654: PUSH
65655: LD_INT 106
65657: PUSH
65658: LD_INT 107
65660: PUSH
65661: LD_INT 108
65663: PUSH
65664: LD_INT 109
65666: PUSH
65667: LD_INT 110
65669: PUSH
65670: LD_INT 111
65672: PUSH
65673: LD_INT 112
65675: PUSH
65676: LD_INT 113
65678: PUSH
65679: LD_INT 114
65681: PUSH
65682: LD_INT 115
65684: PUSH
65685: LD_INT 116
65687: PUSH
65688: LD_INT 117
65690: PUSH
65691: LD_INT 118
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: ST_TO_ADDR
65718: GO 65721
65720: POP
// end else
65721: GO 65952
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65723: LD_ADDR_VAR 0 2
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: LD_INT 3
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: LD_INT 5
65742: PUSH
65743: LD_INT 6
65745: PUSH
65746: LD_INT 7
65748: PUSH
65749: LD_INT 8
65751: PUSH
65752: LD_INT 9
65754: PUSH
65755: LD_INT 10
65757: PUSH
65758: LD_INT 11
65760: PUSH
65761: LD_INT 12
65763: PUSH
65764: LD_INT 13
65766: PUSH
65767: LD_INT 14
65769: PUSH
65770: LD_INT 15
65772: PUSH
65773: LD_INT 16
65775: PUSH
65776: LD_INT 17
65778: PUSH
65779: LD_INT 18
65781: PUSH
65782: LD_INT 19
65784: PUSH
65785: LD_INT 20
65787: PUSH
65788: LD_INT 21
65790: PUSH
65791: LD_INT 22
65793: PUSH
65794: LD_INT 23
65796: PUSH
65797: LD_INT 24
65799: PUSH
65800: LD_INT 25
65802: PUSH
65803: LD_INT 26
65805: PUSH
65806: LD_INT 27
65808: PUSH
65809: LD_INT 28
65811: PUSH
65812: LD_INT 29
65814: PUSH
65815: LD_INT 30
65817: PUSH
65818: LD_INT 31
65820: PUSH
65821: LD_INT 32
65823: PUSH
65824: LD_INT 33
65826: PUSH
65827: LD_INT 34
65829: PUSH
65830: LD_INT 35
65832: PUSH
65833: LD_INT 36
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 101
65876: PUSH
65877: LD_INT 102
65879: PUSH
65880: LD_INT 103
65882: PUSH
65883: LD_INT 104
65885: PUSH
65886: LD_INT 105
65888: PUSH
65889: LD_INT 106
65891: PUSH
65892: LD_INT 107
65894: PUSH
65895: LD_INT 108
65897: PUSH
65898: LD_INT 109
65900: PUSH
65901: LD_INT 110
65903: PUSH
65904: LD_INT 111
65906: PUSH
65907: LD_INT 112
65909: PUSH
65910: LD_INT 113
65912: PUSH
65913: LD_INT 114
65915: PUSH
65916: LD_INT 115
65918: PUSH
65919: LD_INT 116
65921: PUSH
65922: LD_INT 117
65924: PUSH
65925: LD_INT 118
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: ST_TO_ADDR
// if result then
65952: LD_VAR 0 2
65956: IFFALSE 66742
// begin normal :=  ;
65958: LD_ADDR_VAR 0 5
65962: PUSH
65963: LD_STRING 
65965: ST_TO_ADDR
// hardcore :=  ;
65966: LD_ADDR_VAR 0 6
65970: PUSH
65971: LD_STRING 
65973: ST_TO_ADDR
// active :=  ;
65974: LD_ADDR_VAR 0 7
65978: PUSH
65979: LD_STRING 
65981: ST_TO_ADDR
// for i = 1 to normalCounter do
65982: LD_ADDR_VAR 0 8
65986: PUSH
65987: DOUBLE
65988: LD_INT 1
65990: DEC
65991: ST_TO_ADDR
65992: LD_EXP 44
65996: PUSH
65997: FOR_TO
65998: IFFALSE 66099
// begin tmp := 0 ;
66000: LD_ADDR_VAR 0 3
66004: PUSH
66005: LD_STRING 0
66007: ST_TO_ADDR
// if result [ 1 ] then
66008: LD_VAR 0 2
66012: PUSH
66013: LD_INT 1
66015: ARRAY
66016: IFFALSE 66081
// if result [ 1 ] [ 1 ] = i then
66018: LD_VAR 0 2
66022: PUSH
66023: LD_INT 1
66025: ARRAY
66026: PUSH
66027: LD_INT 1
66029: ARRAY
66030: PUSH
66031: LD_VAR 0 8
66035: EQUAL
66036: IFFALSE 66081
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66038: LD_ADDR_VAR 0 2
66042: PUSH
66043: LD_VAR 0 2
66047: PPUSH
66048: LD_INT 1
66050: PPUSH
66051: LD_VAR 0 2
66055: PUSH
66056: LD_INT 1
66058: ARRAY
66059: PPUSH
66060: LD_INT 1
66062: PPUSH
66063: CALL_OW 3
66067: PPUSH
66068: CALL_OW 1
66072: ST_TO_ADDR
// tmp := 1 ;
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_STRING 1
66080: ST_TO_ADDR
// end ; normal := normal & tmp ;
66081: LD_ADDR_VAR 0 5
66085: PUSH
66086: LD_VAR 0 5
66090: PUSH
66091: LD_VAR 0 3
66095: STR
66096: ST_TO_ADDR
// end ;
66097: GO 65997
66099: POP
66100: POP
// for i = 1 to hardcoreCounter do
66101: LD_ADDR_VAR 0 8
66105: PUSH
66106: DOUBLE
66107: LD_INT 1
66109: DEC
66110: ST_TO_ADDR
66111: LD_EXP 45
66115: PUSH
66116: FOR_TO
66117: IFFALSE 66222
// begin tmp := 0 ;
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_STRING 0
66126: ST_TO_ADDR
// if result [ 2 ] then
66127: LD_VAR 0 2
66131: PUSH
66132: LD_INT 2
66134: ARRAY
66135: IFFALSE 66204
// if result [ 2 ] [ 1 ] = 100 + i then
66137: LD_VAR 0 2
66141: PUSH
66142: LD_INT 2
66144: ARRAY
66145: PUSH
66146: LD_INT 1
66148: ARRAY
66149: PUSH
66150: LD_INT 100
66152: PUSH
66153: LD_VAR 0 8
66157: PLUS
66158: EQUAL
66159: IFFALSE 66204
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66161: LD_ADDR_VAR 0 2
66165: PUSH
66166: LD_VAR 0 2
66170: PPUSH
66171: LD_INT 2
66173: PPUSH
66174: LD_VAR 0 2
66178: PUSH
66179: LD_INT 2
66181: ARRAY
66182: PPUSH
66183: LD_INT 1
66185: PPUSH
66186: CALL_OW 3
66190: PPUSH
66191: CALL_OW 1
66195: ST_TO_ADDR
// tmp := 1 ;
66196: LD_ADDR_VAR 0 3
66200: PUSH
66201: LD_STRING 1
66203: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66204: LD_ADDR_VAR 0 6
66208: PUSH
66209: LD_VAR 0 6
66213: PUSH
66214: LD_VAR 0 3
66218: STR
66219: ST_TO_ADDR
// end ;
66220: GO 66116
66222: POP
66223: POP
// if isGameLoad then
66224: LD_VAR 0 1
66228: IFFALSE 66703
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66230: LD_ADDR_VAR 0 4
66234: PUSH
66235: LD_EXP 48
66239: PUSH
66240: LD_EXP 47
66244: PUSH
66245: LD_EXP 49
66249: PUSH
66250: LD_EXP 46
66254: PUSH
66255: LD_EXP 50
66259: PUSH
66260: LD_EXP 51
66264: PUSH
66265: LD_EXP 52
66269: PUSH
66270: LD_EXP 53
66274: PUSH
66275: LD_EXP 54
66279: PUSH
66280: LD_EXP 55
66284: PUSH
66285: LD_EXP 56
66289: PUSH
66290: LD_EXP 57
66294: PUSH
66295: LD_EXP 58
66299: PUSH
66300: LD_EXP 59
66304: PUSH
66305: LD_EXP 67
66309: PUSH
66310: LD_EXP 68
66314: PUSH
66315: LD_EXP 69
66319: PUSH
66320: LD_EXP 70
66324: PUSH
66325: LD_EXP 72
66329: PUSH
66330: LD_EXP 73
66334: PUSH
66335: LD_EXP 74
66339: PUSH
66340: LD_EXP 77
66344: PUSH
66345: LD_EXP 79
66349: PUSH
66350: LD_EXP 80
66354: PUSH
66355: LD_EXP 81
66359: PUSH
66360: LD_EXP 83
66364: PUSH
66365: LD_EXP 84
66369: PUSH
66370: LD_EXP 87
66374: PUSH
66375: LD_EXP 88
66379: PUSH
66380: LD_EXP 89
66384: PUSH
66385: LD_EXP 90
66389: PUSH
66390: LD_EXP 91
66394: PUSH
66395: LD_EXP 92
66399: PUSH
66400: LD_EXP 93
66404: PUSH
66405: LD_EXP 94
66409: PUSH
66410: LD_EXP 95
66414: PUSH
66415: LD_EXP 60
66419: PUSH
66420: LD_EXP 61
66424: PUSH
66425: LD_EXP 64
66429: PUSH
66430: LD_EXP 65
66434: PUSH
66435: LD_EXP 66
66439: PUSH
66440: LD_EXP 62
66444: PUSH
66445: LD_EXP 63
66449: PUSH
66450: LD_EXP 71
66454: PUSH
66455: LD_EXP 75
66459: PUSH
66460: LD_EXP 76
66464: PUSH
66465: LD_EXP 78
66469: PUSH
66470: LD_EXP 82
66474: PUSH
66475: LD_EXP 85
66479: PUSH
66480: LD_EXP 86
66484: PUSH
66485: LD_EXP 96
66489: PUSH
66490: LD_EXP 97
66494: PUSH
66495: LD_EXP 98
66499: PUSH
66500: LD_EXP 99
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// tmp :=  ;
66561: LD_ADDR_VAR 0 3
66565: PUSH
66566: LD_STRING 
66568: ST_TO_ADDR
// for i = 1 to normalCounter do
66569: LD_ADDR_VAR 0 8
66573: PUSH
66574: DOUBLE
66575: LD_INT 1
66577: DEC
66578: ST_TO_ADDR
66579: LD_EXP 44
66583: PUSH
66584: FOR_TO
66585: IFFALSE 66621
// begin if flags [ i ] then
66587: LD_VAR 0 4
66591: PUSH
66592: LD_VAR 0 8
66596: ARRAY
66597: IFFALSE 66619
// tmp := tmp & i & ; ;
66599: LD_ADDR_VAR 0 3
66603: PUSH
66604: LD_VAR 0 3
66608: PUSH
66609: LD_VAR 0 8
66613: STR
66614: PUSH
66615: LD_STRING ;
66617: STR
66618: ST_TO_ADDR
// end ;
66619: GO 66584
66621: POP
66622: POP
// for i = 1 to hardcoreCounter do
66623: LD_ADDR_VAR 0 8
66627: PUSH
66628: DOUBLE
66629: LD_INT 1
66631: DEC
66632: ST_TO_ADDR
66633: LD_EXP 45
66637: PUSH
66638: FOR_TO
66639: IFFALSE 66685
// begin if flags [ normalCounter + i ] then
66641: LD_VAR 0 4
66645: PUSH
66646: LD_EXP 44
66650: PUSH
66651: LD_VAR 0 8
66655: PLUS
66656: ARRAY
66657: IFFALSE 66683
// tmp := tmp & ( 100 + i ) & ; ;
66659: LD_ADDR_VAR 0 3
66663: PUSH
66664: LD_VAR 0 3
66668: PUSH
66669: LD_INT 100
66671: PUSH
66672: LD_VAR 0 8
66676: PLUS
66677: STR
66678: PUSH
66679: LD_STRING ;
66681: STR
66682: ST_TO_ADDR
// end ;
66683: GO 66638
66685: POP
66686: POP
// if tmp then
66687: LD_VAR 0 3
66691: IFFALSE 66703
// active := tmp ;
66693: LD_ADDR_VAR 0 7
66697: PUSH
66698: LD_VAR 0 3
66702: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66703: LD_STRING getStreamItemsFromMission("
66705: PUSH
66706: LD_VAR 0 5
66710: STR
66711: PUSH
66712: LD_STRING ","
66714: STR
66715: PUSH
66716: LD_VAR 0 6
66720: STR
66721: PUSH
66722: LD_STRING ","
66724: STR
66725: PUSH
66726: LD_VAR 0 7
66730: STR
66731: PUSH
66732: LD_STRING ")
66734: STR
66735: PPUSH
66736: CALL_OW 559
// end else
66740: GO 66749
// ToLua ( getStreamItemsFromMission("","","") ) ;
66742: LD_STRING getStreamItemsFromMission("","","")
66744: PPUSH
66745: CALL_OW 559
// end ;
66749: LD_VAR 0 2
66753: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66754: LD_EXP 43
66758: PUSH
66759: LD_EXP 48
66763: AND
66764: IFFALSE 66888
66766: GO 66768
66768: DISABLE
66769: LD_INT 0
66771: PPUSH
66772: PPUSH
// begin enable ;
66773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66774: LD_ADDR_VAR 0 2
66778: PUSH
66779: LD_INT 22
66781: PUSH
66782: LD_OWVAR 2
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 2
66793: PUSH
66794: LD_INT 34
66796: PUSH
66797: LD_INT 7
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 34
66806: PUSH
66807: LD_INT 45
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 34
66816: PUSH
66817: LD_INT 28
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 34
66826: PUSH
66827: LD_INT 47
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PPUSH
66845: CALL_OW 69
66849: ST_TO_ADDR
// if not tmp then
66850: LD_VAR 0 2
66854: NOT
66855: IFFALSE 66859
// exit ;
66857: GO 66888
// for i in tmp do
66859: LD_ADDR_VAR 0 1
66863: PUSH
66864: LD_VAR 0 2
66868: PUSH
66869: FOR_IN
66870: IFFALSE 66886
// begin SetLives ( i , 0 ) ;
66872: LD_VAR 0 1
66876: PPUSH
66877: LD_INT 0
66879: PPUSH
66880: CALL_OW 234
// end ;
66884: GO 66869
66886: POP
66887: POP
// end ;
66888: PPOPN 2
66890: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66891: LD_EXP 43
66895: PUSH
66896: LD_EXP 49
66900: AND
66901: IFFALSE 66985
66903: GO 66905
66905: DISABLE
66906: LD_INT 0
66908: PPUSH
66909: PPUSH
// begin enable ;
66910: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66911: LD_ADDR_VAR 0 2
66915: PUSH
66916: LD_INT 22
66918: PUSH
66919: LD_OWVAR 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 32
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PPUSH
66942: CALL_OW 69
66946: ST_TO_ADDR
// if not tmp then
66947: LD_VAR 0 2
66951: NOT
66952: IFFALSE 66956
// exit ;
66954: GO 66985
// for i in tmp do
66956: LD_ADDR_VAR 0 1
66960: PUSH
66961: LD_VAR 0 2
66965: PUSH
66966: FOR_IN
66967: IFFALSE 66983
// begin SetLives ( i , 0 ) ;
66969: LD_VAR 0 1
66973: PPUSH
66974: LD_INT 0
66976: PPUSH
66977: CALL_OW 234
// end ;
66981: GO 66966
66983: POP
66984: POP
// end ;
66985: PPOPN 2
66987: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66988: LD_EXP 43
66992: PUSH
66993: LD_EXP 46
66997: AND
66998: IFFALSE 67091
67000: GO 67002
67002: DISABLE
67003: LD_INT 0
67005: PPUSH
// begin enable ;
67006: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67007: LD_ADDR_VAR 0 1
67011: PUSH
67012: LD_INT 22
67014: PUSH
67015: LD_OWVAR 2
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 2
67026: PUSH
67027: LD_INT 25
67029: PUSH
67030: LD_INT 5
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 25
67039: PUSH
67040: LD_INT 9
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 25
67049: PUSH
67050: LD_INT 8
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PPUSH
67067: CALL_OW 69
67071: PUSH
67072: FOR_IN
67073: IFFALSE 67089
// begin SetClass ( i , 1 ) ;
67075: LD_VAR 0 1
67079: PPUSH
67080: LD_INT 1
67082: PPUSH
67083: CALL_OW 336
// end ;
67087: GO 67072
67089: POP
67090: POP
// end ;
67091: PPOPN 1
67093: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67094: LD_EXP 43
67098: PUSH
67099: LD_EXP 47
67103: AND
67104: PUSH
67105: LD_OWVAR 65
67109: PUSH
67110: LD_INT 7
67112: LESS
67113: AND
67114: IFFALSE 67128
67116: GO 67118
67118: DISABLE
// begin enable ;
67119: ENABLE
// game_speed := 7 ;
67120: LD_ADDR_OWVAR 65
67124: PUSH
67125: LD_INT 7
67127: ST_TO_ADDR
// end ;
67128: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67129: LD_EXP 43
67133: PUSH
67134: LD_EXP 50
67138: AND
67139: IFFALSE 67341
67141: GO 67143
67143: DISABLE
67144: LD_INT 0
67146: PPUSH
67147: PPUSH
67148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67149: LD_ADDR_VAR 0 3
67153: PUSH
67154: LD_INT 81
67156: PUSH
67157: LD_OWVAR 2
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 21
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PPUSH
67180: CALL_OW 69
67184: ST_TO_ADDR
// if not tmp then
67185: LD_VAR 0 3
67189: NOT
67190: IFFALSE 67194
// exit ;
67192: GO 67341
// if tmp > 5 then
67194: LD_VAR 0 3
67198: PUSH
67199: LD_INT 5
67201: GREATER
67202: IFFALSE 67214
// k := 5 else
67204: LD_ADDR_VAR 0 2
67208: PUSH
67209: LD_INT 5
67211: ST_TO_ADDR
67212: GO 67224
// k := tmp ;
67214: LD_ADDR_VAR 0 2
67218: PUSH
67219: LD_VAR 0 3
67223: ST_TO_ADDR
// for i := 1 to k do
67224: LD_ADDR_VAR 0 1
67228: PUSH
67229: DOUBLE
67230: LD_INT 1
67232: DEC
67233: ST_TO_ADDR
67234: LD_VAR 0 2
67238: PUSH
67239: FOR_TO
67240: IFFALSE 67339
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67242: LD_VAR 0 3
67246: PUSH
67247: LD_VAR 0 1
67251: ARRAY
67252: PPUSH
67253: LD_VAR 0 1
67257: PUSH
67258: LD_INT 4
67260: MOD
67261: PUSH
67262: LD_INT 1
67264: PLUS
67265: PPUSH
67266: CALL_OW 259
67270: PUSH
67271: LD_INT 10
67273: LESS
67274: IFFALSE 67337
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67276: LD_VAR 0 3
67280: PUSH
67281: LD_VAR 0 1
67285: ARRAY
67286: PPUSH
67287: LD_VAR 0 1
67291: PUSH
67292: LD_INT 4
67294: MOD
67295: PUSH
67296: LD_INT 1
67298: PLUS
67299: PPUSH
67300: LD_VAR 0 3
67304: PUSH
67305: LD_VAR 0 1
67309: ARRAY
67310: PPUSH
67311: LD_VAR 0 1
67315: PUSH
67316: LD_INT 4
67318: MOD
67319: PUSH
67320: LD_INT 1
67322: PLUS
67323: PPUSH
67324: CALL_OW 259
67328: PUSH
67329: LD_INT 1
67331: PLUS
67332: PPUSH
67333: CALL_OW 237
67337: GO 67239
67339: POP
67340: POP
// end ;
67341: PPOPN 3
67343: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67344: LD_EXP 43
67348: PUSH
67349: LD_EXP 51
67353: AND
67354: IFFALSE 67374
67356: GO 67358
67358: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67359: LD_INT 4
67361: PPUSH
67362: LD_OWVAR 2
67366: PPUSH
67367: LD_INT 0
67369: PPUSH
67370: CALL_OW 324
67374: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67375: LD_EXP 43
67379: PUSH
67380: LD_EXP 80
67384: AND
67385: IFFALSE 67405
67387: GO 67389
67389: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67390: LD_INT 19
67392: PPUSH
67393: LD_OWVAR 2
67397: PPUSH
67398: LD_INT 0
67400: PPUSH
67401: CALL_OW 324
67405: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67406: LD_EXP 43
67410: PUSH
67411: LD_EXP 52
67415: AND
67416: IFFALSE 67518
67418: GO 67420
67420: DISABLE
67421: LD_INT 0
67423: PPUSH
67424: PPUSH
// begin enable ;
67425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67426: LD_ADDR_VAR 0 2
67430: PUSH
67431: LD_INT 22
67433: PUSH
67434: LD_OWVAR 2
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: LD_INT 34
67448: PUSH
67449: LD_INT 11
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 34
67458: PUSH
67459: LD_INT 30
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: LIST
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PPUSH
67475: CALL_OW 69
67479: ST_TO_ADDR
// if not tmp then
67480: LD_VAR 0 2
67484: NOT
67485: IFFALSE 67489
// exit ;
67487: GO 67518
// for i in tmp do
67489: LD_ADDR_VAR 0 1
67493: PUSH
67494: LD_VAR 0 2
67498: PUSH
67499: FOR_IN
67500: IFFALSE 67516
// begin SetLives ( i , 0 ) ;
67502: LD_VAR 0 1
67506: PPUSH
67507: LD_INT 0
67509: PPUSH
67510: CALL_OW 234
// end ;
67514: GO 67499
67516: POP
67517: POP
// end ;
67518: PPOPN 2
67520: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67521: LD_EXP 43
67525: PUSH
67526: LD_EXP 53
67530: AND
67531: IFFALSE 67551
67533: GO 67535
67535: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67536: LD_INT 32
67538: PPUSH
67539: LD_OWVAR 2
67543: PPUSH
67544: LD_INT 0
67546: PPUSH
67547: CALL_OW 324
67551: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67552: LD_EXP 43
67556: PUSH
67557: LD_EXP 54
67561: AND
67562: IFFALSE 67743
67564: GO 67566
67566: DISABLE
67567: LD_INT 0
67569: PPUSH
67570: PPUSH
67571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67572: LD_ADDR_VAR 0 2
67576: PUSH
67577: LD_INT 22
67579: PUSH
67580: LD_OWVAR 2
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 33
67591: PUSH
67592: LD_INT 3
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PPUSH
67603: CALL_OW 69
67607: ST_TO_ADDR
// if not tmp then
67608: LD_VAR 0 2
67612: NOT
67613: IFFALSE 67617
// exit ;
67615: GO 67743
// side := 0 ;
67617: LD_ADDR_VAR 0 3
67621: PUSH
67622: LD_INT 0
67624: ST_TO_ADDR
// for i := 1 to 8 do
67625: LD_ADDR_VAR 0 1
67629: PUSH
67630: DOUBLE
67631: LD_INT 1
67633: DEC
67634: ST_TO_ADDR
67635: LD_INT 8
67637: PUSH
67638: FOR_TO
67639: IFFALSE 67687
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67641: LD_OWVAR 2
67645: PUSH
67646: LD_VAR 0 1
67650: NONEQUAL
67651: PUSH
67652: LD_OWVAR 2
67656: PPUSH
67657: LD_VAR 0 1
67661: PPUSH
67662: CALL_OW 81
67666: PUSH
67667: LD_INT 2
67669: EQUAL
67670: AND
67671: IFFALSE 67685
// begin side := i ;
67673: LD_ADDR_VAR 0 3
67677: PUSH
67678: LD_VAR 0 1
67682: ST_TO_ADDR
// break ;
67683: GO 67687
// end ;
67685: GO 67638
67687: POP
67688: POP
// if not side then
67689: LD_VAR 0 3
67693: NOT
67694: IFFALSE 67698
// exit ;
67696: GO 67743
// for i := 1 to tmp do
67698: LD_ADDR_VAR 0 1
67702: PUSH
67703: DOUBLE
67704: LD_INT 1
67706: DEC
67707: ST_TO_ADDR
67708: LD_VAR 0 2
67712: PUSH
67713: FOR_TO
67714: IFFALSE 67741
// if Prob ( 60 ) then
67716: LD_INT 60
67718: PPUSH
67719: CALL_OW 13
67723: IFFALSE 67739
// SetSide ( i , side ) ;
67725: LD_VAR 0 1
67729: PPUSH
67730: LD_VAR 0 3
67734: PPUSH
67735: CALL_OW 235
67739: GO 67713
67741: POP
67742: POP
// end ;
67743: PPOPN 3
67745: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67746: LD_EXP 43
67750: PUSH
67751: LD_EXP 56
67755: AND
67756: IFFALSE 67875
67758: GO 67760
67760: DISABLE
67761: LD_INT 0
67763: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67764: LD_ADDR_VAR 0 1
67768: PUSH
67769: LD_INT 22
67771: PUSH
67772: LD_OWVAR 2
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 21
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: LD_INT 23
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: PPUSH
67813: CALL_OW 69
67817: PUSH
67818: FOR_IN
67819: IFFALSE 67873
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
67821: LD_VAR 0 1
67825: PPUSH
67826: CALL_OW 257
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: IN
67849: IFFALSE 67871
// SetClass ( un , rand ( 1 , 4 ) ) ;
67851: LD_VAR 0 1
67855: PPUSH
67856: LD_INT 1
67858: PPUSH
67859: LD_INT 4
67861: PPUSH
67862: CALL_OW 12
67866: PPUSH
67867: CALL_OW 336
67871: GO 67818
67873: POP
67874: POP
// end ;
67875: PPOPN 1
67877: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67878: LD_EXP 43
67882: PUSH
67883: LD_EXP 55
67887: AND
67888: IFFALSE 67967
67890: GO 67892
67892: DISABLE
67893: LD_INT 0
67895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67896: LD_ADDR_VAR 0 1
67900: PUSH
67901: LD_INT 22
67903: PUSH
67904: LD_OWVAR 2
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 21
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PPUSH
67927: CALL_OW 69
67931: ST_TO_ADDR
// if not tmp then
67932: LD_VAR 0 1
67936: NOT
67937: IFFALSE 67941
// exit ;
67939: GO 67967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67941: LD_VAR 0 1
67945: PUSH
67946: LD_INT 1
67948: PPUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: CALL_OW 12
67958: ARRAY
67959: PPUSH
67960: LD_INT 100
67962: PPUSH
67963: CALL_OW 234
// end ;
67967: PPOPN 1
67969: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67970: LD_EXP 43
67974: PUSH
67975: LD_EXP 57
67979: AND
67980: IFFALSE 68078
67982: GO 67984
67984: DISABLE
67985: LD_INT 0
67987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67988: LD_ADDR_VAR 0 1
67992: PUSH
67993: LD_INT 22
67995: PUSH
67996: LD_OWVAR 2
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 21
68007: PUSH
68008: LD_INT 1
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PPUSH
68019: CALL_OW 69
68023: ST_TO_ADDR
// if not tmp then
68024: LD_VAR 0 1
68028: NOT
68029: IFFALSE 68033
// exit ;
68031: GO 68078
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68033: LD_VAR 0 1
68037: PUSH
68038: LD_INT 1
68040: PPUSH
68041: LD_VAR 0 1
68045: PPUSH
68046: CALL_OW 12
68050: ARRAY
68051: PPUSH
68052: LD_INT 1
68054: PPUSH
68055: LD_INT 4
68057: PPUSH
68058: CALL_OW 12
68062: PPUSH
68063: LD_INT 3000
68065: PPUSH
68066: LD_INT 9000
68068: PPUSH
68069: CALL_OW 12
68073: PPUSH
68074: CALL_OW 492
// end ;
68078: PPOPN 1
68080: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68081: LD_EXP 43
68085: PUSH
68086: LD_EXP 58
68090: AND
68091: IFFALSE 68111
68093: GO 68095
68095: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68096: LD_INT 1
68098: PPUSH
68099: LD_OWVAR 2
68103: PPUSH
68104: LD_INT 0
68106: PPUSH
68107: CALL_OW 324
68111: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68112: LD_EXP 43
68116: PUSH
68117: LD_EXP 59
68121: AND
68122: IFFALSE 68205
68124: GO 68126
68126: DISABLE
68127: LD_INT 0
68129: PPUSH
68130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68131: LD_ADDR_VAR 0 2
68135: PUSH
68136: LD_INT 22
68138: PUSH
68139: LD_OWVAR 2
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 21
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PPUSH
68162: CALL_OW 69
68166: ST_TO_ADDR
// if not tmp then
68167: LD_VAR 0 2
68171: NOT
68172: IFFALSE 68176
// exit ;
68174: GO 68205
// for i in tmp do
68176: LD_ADDR_VAR 0 1
68180: PUSH
68181: LD_VAR 0 2
68185: PUSH
68186: FOR_IN
68187: IFFALSE 68203
// SetBLevel ( i , 10 ) ;
68189: LD_VAR 0 1
68193: PPUSH
68194: LD_INT 10
68196: PPUSH
68197: CALL_OW 241
68201: GO 68186
68203: POP
68204: POP
// end ;
68205: PPOPN 2
68207: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68208: LD_EXP 43
68212: PUSH
68213: LD_EXP 60
68217: AND
68218: IFFALSE 68329
68220: GO 68222
68222: DISABLE
68223: LD_INT 0
68225: PPUSH
68226: PPUSH
68227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68228: LD_ADDR_VAR 0 3
68232: PUSH
68233: LD_INT 22
68235: PUSH
68236: LD_OWVAR 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 25
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PPUSH
68259: CALL_OW 69
68263: ST_TO_ADDR
// if not tmp then
68264: LD_VAR 0 3
68268: NOT
68269: IFFALSE 68273
// exit ;
68271: GO 68329
// un := tmp [ rand ( 1 , tmp ) ] ;
68273: LD_ADDR_VAR 0 2
68277: PUSH
68278: LD_VAR 0 3
68282: PUSH
68283: LD_INT 1
68285: PPUSH
68286: LD_VAR 0 3
68290: PPUSH
68291: CALL_OW 12
68295: ARRAY
68296: ST_TO_ADDR
// if Crawls ( un ) then
68297: LD_VAR 0 2
68301: PPUSH
68302: CALL_OW 318
68306: IFFALSE 68317
// ComWalk ( un ) ;
68308: LD_VAR 0 2
68312: PPUSH
68313: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68317: LD_VAR 0 2
68321: PPUSH
68322: LD_INT 5
68324: PPUSH
68325: CALL_OW 336
// end ;
68329: PPOPN 3
68331: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68332: LD_EXP 43
68336: PUSH
68337: LD_EXP 61
68341: AND
68342: PUSH
68343: LD_OWVAR 67
68347: PUSH
68348: LD_INT 4
68350: LESS
68351: AND
68352: IFFALSE 68371
68354: GO 68356
68356: DISABLE
// begin Difficulty := Difficulty + 1 ;
68357: LD_ADDR_OWVAR 67
68361: PUSH
68362: LD_OWVAR 67
68366: PUSH
68367: LD_INT 1
68369: PLUS
68370: ST_TO_ADDR
// end ;
68371: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68372: LD_EXP 43
68376: PUSH
68377: LD_EXP 62
68381: AND
68382: IFFALSE 68485
68384: GO 68386
68386: DISABLE
68387: LD_INT 0
68389: PPUSH
// begin for i := 1 to 5 do
68390: LD_ADDR_VAR 0 1
68394: PUSH
68395: DOUBLE
68396: LD_INT 1
68398: DEC
68399: ST_TO_ADDR
68400: LD_INT 5
68402: PUSH
68403: FOR_TO
68404: IFFALSE 68483
// begin uc_nation := nation_nature ;
68406: LD_ADDR_OWVAR 21
68410: PUSH
68411: LD_INT 0
68413: ST_TO_ADDR
// uc_side := 0 ;
68414: LD_ADDR_OWVAR 20
68418: PUSH
68419: LD_INT 0
68421: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68422: LD_ADDR_OWVAR 29
68426: PUSH
68427: LD_INT 12
68429: PUSH
68430: LD_INT 12
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: ST_TO_ADDR
// hc_agressivity := 20 ;
68437: LD_ADDR_OWVAR 35
68441: PUSH
68442: LD_INT 20
68444: ST_TO_ADDR
// hc_class := class_tiger ;
68445: LD_ADDR_OWVAR 28
68449: PUSH
68450: LD_INT 14
68452: ST_TO_ADDR
// hc_gallery :=  ;
68453: LD_ADDR_OWVAR 33
68457: PUSH
68458: LD_STRING 
68460: ST_TO_ADDR
// hc_name :=  ;
68461: LD_ADDR_OWVAR 26
68465: PUSH
68466: LD_STRING 
68468: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68469: CALL_OW 44
68473: PPUSH
68474: LD_INT 0
68476: PPUSH
68477: CALL_OW 51
// end ;
68481: GO 68403
68483: POP
68484: POP
// end ;
68485: PPOPN 1
68487: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68488: LD_EXP 43
68492: PUSH
68493: LD_EXP 63
68497: AND
68498: IFFALSE 68507
68500: GO 68502
68502: DISABLE
// StreamSibBomb ;
68503: CALL 68508 0 0
68507: END
// export function StreamSibBomb ; var i , x , y ; begin
68508: LD_INT 0
68510: PPUSH
68511: PPUSH
68512: PPUSH
68513: PPUSH
// result := false ;
68514: LD_ADDR_VAR 0 1
68518: PUSH
68519: LD_INT 0
68521: ST_TO_ADDR
// for i := 1 to 16 do
68522: LD_ADDR_VAR 0 2
68526: PUSH
68527: DOUBLE
68528: LD_INT 1
68530: DEC
68531: ST_TO_ADDR
68532: LD_INT 16
68534: PUSH
68535: FOR_TO
68536: IFFALSE 68735
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68538: LD_ADDR_VAR 0 3
68542: PUSH
68543: LD_INT 10
68545: PUSH
68546: LD_INT 20
68548: PUSH
68549: LD_INT 30
68551: PUSH
68552: LD_INT 40
68554: PUSH
68555: LD_INT 50
68557: PUSH
68558: LD_INT 60
68560: PUSH
68561: LD_INT 70
68563: PUSH
68564: LD_INT 80
68566: PUSH
68567: LD_INT 90
68569: PUSH
68570: LD_INT 100
68572: PUSH
68573: LD_INT 110
68575: PUSH
68576: LD_INT 120
68578: PUSH
68579: LD_INT 130
68581: PUSH
68582: LD_INT 140
68584: PUSH
68585: LD_INT 150
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 1
68607: PPUSH
68608: LD_INT 15
68610: PPUSH
68611: CALL_OW 12
68615: ARRAY
68616: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68617: LD_ADDR_VAR 0 4
68621: PUSH
68622: LD_INT 10
68624: PUSH
68625: LD_INT 20
68627: PUSH
68628: LD_INT 30
68630: PUSH
68631: LD_INT 40
68633: PUSH
68634: LD_INT 50
68636: PUSH
68637: LD_INT 60
68639: PUSH
68640: LD_INT 70
68642: PUSH
68643: LD_INT 80
68645: PUSH
68646: LD_INT 90
68648: PUSH
68649: LD_INT 100
68651: PUSH
68652: LD_INT 110
68654: PUSH
68655: LD_INT 120
68657: PUSH
68658: LD_INT 130
68660: PUSH
68661: LD_INT 140
68663: PUSH
68664: LD_INT 150
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 1
68686: PPUSH
68687: LD_INT 15
68689: PPUSH
68690: CALL_OW 12
68694: ARRAY
68695: ST_TO_ADDR
// if ValidHex ( x , y ) then
68696: LD_VAR 0 3
68700: PPUSH
68701: LD_VAR 0 4
68705: PPUSH
68706: CALL_OW 488
68710: IFFALSE 68733
// begin result := [ x , y ] ;
68712: LD_ADDR_VAR 0 1
68716: PUSH
68717: LD_VAR 0 3
68721: PUSH
68722: LD_VAR 0 4
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// break ;
68731: GO 68735
// end ; end ;
68733: GO 68535
68735: POP
68736: POP
// if result then
68737: LD_VAR 0 1
68741: IFFALSE 68801
// begin ToLua ( playSibBomb() ) ;
68743: LD_STRING playSibBomb()
68745: PPUSH
68746: CALL_OW 559
// wait ( 0 0$14 ) ;
68750: LD_INT 490
68752: PPUSH
68753: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68757: LD_VAR 0 1
68761: PUSH
68762: LD_INT 1
68764: ARRAY
68765: PPUSH
68766: LD_VAR 0 1
68770: PUSH
68771: LD_INT 2
68773: ARRAY
68774: PPUSH
68775: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68779: LD_VAR 0 1
68783: PUSH
68784: LD_INT 1
68786: ARRAY
68787: PPUSH
68788: LD_VAR 0 1
68792: PUSH
68793: LD_INT 2
68795: ARRAY
68796: PPUSH
68797: CALL_OW 429
// end ; end ;
68801: LD_VAR 0 1
68805: RET
// every 0 0$1 trigger StreamModeActive and sReset do
68806: LD_EXP 43
68810: PUSH
68811: LD_EXP 65
68815: AND
68816: IFFALSE 68828
68818: GO 68820
68820: DISABLE
// YouLost (  ) ;
68821: LD_STRING 
68823: PPUSH
68824: CALL_OW 104
68828: END
// every 0 0$1 trigger StreamModeActive and sFog do
68829: LD_EXP 43
68833: PUSH
68834: LD_EXP 64
68838: AND
68839: IFFALSE 68853
68841: GO 68843
68843: DISABLE
// FogOff ( your_side ) ;
68844: LD_OWVAR 2
68848: PPUSH
68849: CALL_OW 344
68853: END
// every 0 0$1 trigger StreamModeActive and sSun do
68854: LD_EXP 43
68858: PUSH
68859: LD_EXP 66
68863: AND
68864: IFFALSE 68892
68866: GO 68868
68868: DISABLE
// begin solar_recharge_percent := 0 ;
68869: LD_ADDR_OWVAR 79
68873: PUSH
68874: LD_INT 0
68876: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68877: LD_INT 10500
68879: PPUSH
68880: CALL_OW 67
// solar_recharge_percent := 100 ;
68884: LD_ADDR_OWVAR 79
68888: PUSH
68889: LD_INT 100
68891: ST_TO_ADDR
// end ;
68892: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68893: LD_EXP 43
68897: PUSH
68898: LD_EXP 67
68902: AND
68903: IFFALSE 69142
68905: GO 68907
68907: DISABLE
68908: LD_INT 0
68910: PPUSH
68911: PPUSH
68912: PPUSH
// begin tmp := [ ] ;
68913: LD_ADDR_VAR 0 3
68917: PUSH
68918: EMPTY
68919: ST_TO_ADDR
// for i := 1 to 6 do
68920: LD_ADDR_VAR 0 1
68924: PUSH
68925: DOUBLE
68926: LD_INT 1
68928: DEC
68929: ST_TO_ADDR
68930: LD_INT 6
68932: PUSH
68933: FOR_TO
68934: IFFALSE 69039
// begin uc_nation := nation_nature ;
68936: LD_ADDR_OWVAR 21
68940: PUSH
68941: LD_INT 0
68943: ST_TO_ADDR
// uc_side := 0 ;
68944: LD_ADDR_OWVAR 20
68948: PUSH
68949: LD_INT 0
68951: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68952: LD_ADDR_OWVAR 29
68956: PUSH
68957: LD_INT 12
68959: PUSH
68960: LD_INT 12
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: ST_TO_ADDR
// hc_agressivity := 20 ;
68967: LD_ADDR_OWVAR 35
68971: PUSH
68972: LD_INT 20
68974: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68975: LD_ADDR_OWVAR 28
68979: PUSH
68980: LD_INT 17
68982: ST_TO_ADDR
// hc_gallery :=  ;
68983: LD_ADDR_OWVAR 33
68987: PUSH
68988: LD_STRING 
68990: ST_TO_ADDR
// hc_name :=  ;
68991: LD_ADDR_OWVAR 26
68995: PUSH
68996: LD_STRING 
68998: ST_TO_ADDR
// un := CreateHuman ;
68999: LD_ADDR_VAR 0 2
69003: PUSH
69004: CALL_OW 44
69008: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69009: LD_VAR 0 2
69013: PPUSH
69014: LD_INT 1
69016: PPUSH
69017: CALL_OW 51
// tmp := tmp ^ un ;
69021: LD_ADDR_VAR 0 3
69025: PUSH
69026: LD_VAR 0 3
69030: PUSH
69031: LD_VAR 0 2
69035: ADD
69036: ST_TO_ADDR
// end ;
69037: GO 68933
69039: POP
69040: POP
// repeat wait ( 0 0$1 ) ;
69041: LD_INT 35
69043: PPUSH
69044: CALL_OW 67
// for un in tmp do
69048: LD_ADDR_VAR 0 2
69052: PUSH
69053: LD_VAR 0 3
69057: PUSH
69058: FOR_IN
69059: IFFALSE 69133
// begin if IsDead ( un ) then
69061: LD_VAR 0 2
69065: PPUSH
69066: CALL_OW 301
69070: IFFALSE 69090
// begin tmp := tmp diff un ;
69072: LD_ADDR_VAR 0 3
69076: PUSH
69077: LD_VAR 0 3
69081: PUSH
69082: LD_VAR 0 2
69086: DIFF
69087: ST_TO_ADDR
// continue ;
69088: GO 69058
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69090: LD_VAR 0 2
69094: PPUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 22
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PPUSH
69112: CALL_OW 69
69116: PPUSH
69117: LD_VAR 0 2
69121: PPUSH
69122: CALL_OW 74
69126: PPUSH
69127: CALL_OW 115
// end ;
69131: GO 69058
69133: POP
69134: POP
// until not tmp ;
69135: LD_VAR 0 3
69139: NOT
69140: IFFALSE 69041
// end ;
69142: PPOPN 3
69144: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69145: LD_EXP 43
69149: PUSH
69150: LD_EXP 68
69154: AND
69155: IFFALSE 69209
69157: GO 69159
69159: DISABLE
// begin ToLua ( displayTroll(); ) ;
69160: LD_STRING displayTroll();
69162: PPUSH
69163: CALL_OW 559
// wait ( 3 3$00 ) ;
69167: LD_INT 6300
69169: PPUSH
69170: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69174: LD_STRING hideTroll();
69176: PPUSH
69177: CALL_OW 559
// wait ( 1 1$00 ) ;
69181: LD_INT 2100
69183: PPUSH
69184: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69188: LD_STRING displayTroll();
69190: PPUSH
69191: CALL_OW 559
// wait ( 1 1$00 ) ;
69195: LD_INT 2100
69197: PPUSH
69198: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69202: LD_STRING hideTroll();
69204: PPUSH
69205: CALL_OW 559
// end ;
69209: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69210: LD_EXP 43
69214: PUSH
69215: LD_EXP 69
69219: AND
69220: IFFALSE 69283
69222: GO 69224
69224: DISABLE
69225: LD_INT 0
69227: PPUSH
// begin p := 0 ;
69228: LD_ADDR_VAR 0 1
69232: PUSH
69233: LD_INT 0
69235: ST_TO_ADDR
// repeat game_speed := 1 ;
69236: LD_ADDR_OWVAR 65
69240: PUSH
69241: LD_INT 1
69243: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69244: LD_INT 35
69246: PPUSH
69247: CALL_OW 67
// p := p + 1 ;
69251: LD_ADDR_VAR 0 1
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: LD_INT 1
69263: PLUS
69264: ST_TO_ADDR
// until p >= 60 ;
69265: LD_VAR 0 1
69269: PUSH
69270: LD_INT 60
69272: GREATEREQUAL
69273: IFFALSE 69236
// game_speed := 4 ;
69275: LD_ADDR_OWVAR 65
69279: PUSH
69280: LD_INT 4
69282: ST_TO_ADDR
// end ;
69283: PPOPN 1
69285: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69286: LD_EXP 43
69290: PUSH
69291: LD_EXP 70
69295: AND
69296: IFFALSE 69442
69298: GO 69300
69300: DISABLE
69301: LD_INT 0
69303: PPUSH
69304: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69305: LD_ADDR_VAR 0 1
69309: PUSH
69310: LD_INT 22
69312: PUSH
69313: LD_OWVAR 2
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 2
69324: PUSH
69325: LD_INT 30
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 30
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: LIST
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PPUSH
69354: CALL_OW 69
69358: ST_TO_ADDR
// if not depot then
69359: LD_VAR 0 1
69363: NOT
69364: IFFALSE 69368
// exit ;
69366: GO 69442
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69368: LD_ADDR_VAR 0 2
69372: PUSH
69373: LD_VAR 0 1
69377: PUSH
69378: LD_INT 1
69380: PPUSH
69381: LD_VAR 0 1
69385: PPUSH
69386: CALL_OW 12
69390: ARRAY
69391: PPUSH
69392: CALL_OW 274
69396: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69397: LD_VAR 0 2
69401: PPUSH
69402: LD_INT 1
69404: PPUSH
69405: LD_INT 0
69407: PPUSH
69408: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69412: LD_VAR 0 2
69416: PPUSH
69417: LD_INT 2
69419: PPUSH
69420: LD_INT 0
69422: PPUSH
69423: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69427: LD_VAR 0 2
69431: PPUSH
69432: LD_INT 3
69434: PPUSH
69435: LD_INT 0
69437: PPUSH
69438: CALL_OW 277
// end ;
69442: PPOPN 2
69444: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69445: LD_EXP 43
69449: PUSH
69450: LD_EXP 71
69454: AND
69455: IFFALSE 69552
69457: GO 69459
69459: DISABLE
69460: LD_INT 0
69462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69463: LD_ADDR_VAR 0 1
69467: PUSH
69468: LD_INT 22
69470: PUSH
69471: LD_OWVAR 2
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 21
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 3
69492: PUSH
69493: LD_INT 23
69495: PUSH
69496: LD_INT 0
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: LIST
69511: PPUSH
69512: CALL_OW 69
69516: ST_TO_ADDR
// if not tmp then
69517: LD_VAR 0 1
69521: NOT
69522: IFFALSE 69526
// exit ;
69524: GO 69552
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69526: LD_VAR 0 1
69530: PUSH
69531: LD_INT 1
69533: PPUSH
69534: LD_VAR 0 1
69538: PPUSH
69539: CALL_OW 12
69543: ARRAY
69544: PPUSH
69545: LD_INT 200
69547: PPUSH
69548: CALL_OW 234
// end ;
69552: PPOPN 1
69554: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69555: LD_EXP 43
69559: PUSH
69560: LD_EXP 72
69564: AND
69565: IFFALSE 69644
69567: GO 69569
69569: DISABLE
69570: LD_INT 0
69572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69573: LD_ADDR_VAR 0 1
69577: PUSH
69578: LD_INT 22
69580: PUSH
69581: LD_OWVAR 2
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 21
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PPUSH
69604: CALL_OW 69
69608: ST_TO_ADDR
// if not tmp then
69609: LD_VAR 0 1
69613: NOT
69614: IFFALSE 69618
// exit ;
69616: GO 69644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69618: LD_VAR 0 1
69622: PUSH
69623: LD_INT 1
69625: PPUSH
69626: LD_VAR 0 1
69630: PPUSH
69631: CALL_OW 12
69635: ARRAY
69636: PPUSH
69637: LD_INT 60
69639: PPUSH
69640: CALL_OW 234
// end ;
69644: PPOPN 1
69646: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69647: LD_EXP 43
69651: PUSH
69652: LD_EXP 73
69656: AND
69657: IFFALSE 69756
69659: GO 69661
69661: DISABLE
69662: LD_INT 0
69664: PPUSH
69665: PPUSH
// begin enable ;
69666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69667: LD_ADDR_VAR 0 1
69671: PUSH
69672: LD_INT 22
69674: PUSH
69675: LD_OWVAR 2
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 61
69686: PUSH
69687: EMPTY
69688: LIST
69689: PUSH
69690: LD_INT 33
69692: PUSH
69693: LD_INT 2
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: PPUSH
69705: CALL_OW 69
69709: ST_TO_ADDR
// if not tmp then
69710: LD_VAR 0 1
69714: NOT
69715: IFFALSE 69719
// exit ;
69717: GO 69756
// for i in tmp do
69719: LD_ADDR_VAR 0 2
69723: PUSH
69724: LD_VAR 0 1
69728: PUSH
69729: FOR_IN
69730: IFFALSE 69754
// if IsControledBy ( i ) then
69732: LD_VAR 0 2
69736: PPUSH
69737: CALL_OW 312
69741: IFFALSE 69752
// ComUnlink ( i ) ;
69743: LD_VAR 0 2
69747: PPUSH
69748: CALL_OW 136
69752: GO 69729
69754: POP
69755: POP
// end ;
69756: PPOPN 2
69758: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69759: LD_EXP 43
69763: PUSH
69764: LD_EXP 74
69768: AND
69769: IFFALSE 69909
69771: GO 69773
69773: DISABLE
69774: LD_INT 0
69776: PPUSH
69777: PPUSH
// begin ToLua ( displayPowell(); ) ;
69778: LD_STRING displayPowell();
69780: PPUSH
69781: CALL_OW 559
// uc_side := 0 ;
69785: LD_ADDR_OWVAR 20
69789: PUSH
69790: LD_INT 0
69792: ST_TO_ADDR
// uc_nation := 2 ;
69793: LD_ADDR_OWVAR 21
69797: PUSH
69798: LD_INT 2
69800: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
69801: LD_ADDR_OWVAR 37
69805: PUSH
69806: LD_INT 14
69808: ST_TO_ADDR
// vc_engine := engine_siberite ;
69809: LD_ADDR_OWVAR 39
69813: PUSH
69814: LD_INT 3
69816: ST_TO_ADDR
// vc_control := control_apeman ;
69817: LD_ADDR_OWVAR 38
69821: PUSH
69822: LD_INT 5
69824: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
69825: LD_ADDR_OWVAR 40
69829: PUSH
69830: LD_INT 29
69832: ST_TO_ADDR
// un := CreateVehicle ;
69833: LD_ADDR_VAR 0 2
69837: PUSH
69838: CALL_OW 45
69842: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69843: LD_VAR 0 2
69847: PPUSH
69848: LD_INT 1
69850: PPUSH
69851: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69855: LD_INT 35
69857: PPUSH
69858: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69862: LD_VAR 0 2
69866: PPUSH
69867: LD_INT 22
69869: PUSH
69870: LD_OWVAR 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PPUSH
69879: CALL_OW 69
69883: PPUSH
69884: LD_VAR 0 2
69888: PPUSH
69889: CALL_OW 74
69893: PPUSH
69894: CALL_OW 115
// until IsDead ( un ) ;
69898: LD_VAR 0 2
69902: PPUSH
69903: CALL_OW 301
69907: IFFALSE 69855
// end ;
69909: PPOPN 2
69911: END
// every 0 0$1 trigger StreamModeActive and sStu do
69912: LD_EXP 43
69916: PUSH
69917: LD_EXP 82
69921: AND
69922: IFFALSE 69938
69924: GO 69926
69926: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69927: LD_STRING displayStucuk();
69929: PPUSH
69930: CALL_OW 559
// ResetFog ;
69934: CALL_OW 335
// end ;
69938: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69939: LD_EXP 43
69943: PUSH
69944: LD_EXP 75
69948: AND
69949: IFFALSE 70090
69951: GO 69953
69953: DISABLE
69954: LD_INT 0
69956: PPUSH
69957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69958: LD_ADDR_VAR 0 2
69962: PUSH
69963: LD_INT 22
69965: PUSH
69966: LD_OWVAR 2
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 21
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PPUSH
69989: CALL_OW 69
69993: ST_TO_ADDR
// if not tmp then
69994: LD_VAR 0 2
69998: NOT
69999: IFFALSE 70003
// exit ;
70001: GO 70090
// un := tmp [ rand ( 1 , tmp ) ] ;
70003: LD_ADDR_VAR 0 1
70007: PUSH
70008: LD_VAR 0 2
70012: PUSH
70013: LD_INT 1
70015: PPUSH
70016: LD_VAR 0 2
70020: PPUSH
70021: CALL_OW 12
70025: ARRAY
70026: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70027: LD_VAR 0 1
70031: PPUSH
70032: LD_INT 0
70034: PPUSH
70035: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70039: LD_VAR 0 1
70043: PPUSH
70044: LD_OWVAR 3
70048: PUSH
70049: LD_VAR 0 1
70053: DIFF
70054: PPUSH
70055: LD_VAR 0 1
70059: PPUSH
70060: CALL_OW 74
70064: PPUSH
70065: CALL_OW 115
// wait ( 0 0$20 ) ;
70069: LD_INT 700
70071: PPUSH
70072: CALL_OW 67
// SetSide ( un , your_side ) ;
70076: LD_VAR 0 1
70080: PPUSH
70081: LD_OWVAR 2
70085: PPUSH
70086: CALL_OW 235
// end ;
70090: PPOPN 2
70092: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70093: LD_EXP 43
70097: PUSH
70098: LD_EXP 76
70102: AND
70103: IFFALSE 70209
70105: GO 70107
70107: DISABLE
70108: LD_INT 0
70110: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70111: LD_ADDR_VAR 0 1
70115: PUSH
70116: LD_INT 22
70118: PUSH
70119: LD_OWVAR 2
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 2
70130: PUSH
70131: LD_INT 30
70133: PUSH
70134: LD_INT 0
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 30
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PPUSH
70160: CALL_OW 69
70164: ST_TO_ADDR
// if not depot then
70165: LD_VAR 0 1
70169: NOT
70170: IFFALSE 70174
// exit ;
70172: GO 70209
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70174: LD_VAR 0 1
70178: PUSH
70179: LD_INT 1
70181: ARRAY
70182: PPUSH
70183: CALL_OW 250
70187: PPUSH
70188: LD_VAR 0 1
70192: PUSH
70193: LD_INT 1
70195: ARRAY
70196: PPUSH
70197: CALL_OW 251
70201: PPUSH
70202: LD_INT 70
70204: PPUSH
70205: CALL_OW 495
// end ;
70209: PPOPN 1
70211: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70212: LD_EXP 43
70216: PUSH
70217: LD_EXP 77
70221: AND
70222: IFFALSE 70433
70224: GO 70226
70226: DISABLE
70227: LD_INT 0
70229: PPUSH
70230: PPUSH
70231: PPUSH
70232: PPUSH
70233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70234: LD_ADDR_VAR 0 5
70238: PUSH
70239: LD_INT 22
70241: PUSH
70242: LD_OWVAR 2
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 21
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PPUSH
70265: CALL_OW 69
70269: ST_TO_ADDR
// if not tmp then
70270: LD_VAR 0 5
70274: NOT
70275: IFFALSE 70279
// exit ;
70277: GO 70433
// for i in tmp do
70279: LD_ADDR_VAR 0 1
70283: PUSH
70284: LD_VAR 0 5
70288: PUSH
70289: FOR_IN
70290: IFFALSE 70431
// begin d := rand ( 0 , 5 ) ;
70292: LD_ADDR_VAR 0 4
70296: PUSH
70297: LD_INT 0
70299: PPUSH
70300: LD_INT 5
70302: PPUSH
70303: CALL_OW 12
70307: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70308: LD_ADDR_VAR 0 2
70312: PUSH
70313: LD_VAR 0 1
70317: PPUSH
70318: CALL_OW 250
70322: PPUSH
70323: LD_VAR 0 4
70327: PPUSH
70328: LD_INT 3
70330: PPUSH
70331: LD_INT 12
70333: PPUSH
70334: CALL_OW 12
70338: PPUSH
70339: CALL_OW 272
70343: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70344: LD_ADDR_VAR 0 3
70348: PUSH
70349: LD_VAR 0 1
70353: PPUSH
70354: CALL_OW 251
70358: PPUSH
70359: LD_VAR 0 4
70363: PPUSH
70364: LD_INT 3
70366: PPUSH
70367: LD_INT 12
70369: PPUSH
70370: CALL_OW 12
70374: PPUSH
70375: CALL_OW 273
70379: ST_TO_ADDR
// if ValidHex ( x , y ) then
70380: LD_VAR 0 2
70384: PPUSH
70385: LD_VAR 0 3
70389: PPUSH
70390: CALL_OW 488
70394: IFFALSE 70429
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70396: LD_VAR 0 1
70400: PPUSH
70401: LD_VAR 0 2
70405: PPUSH
70406: LD_VAR 0 3
70410: PPUSH
70411: LD_INT 3
70413: PPUSH
70414: LD_INT 6
70416: PPUSH
70417: CALL_OW 12
70421: PPUSH
70422: LD_INT 1
70424: PPUSH
70425: CALL_OW 483
// end ;
70429: GO 70289
70431: POP
70432: POP
// end ;
70433: PPOPN 5
70435: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70436: LD_EXP 43
70440: PUSH
70441: LD_EXP 78
70445: AND
70446: IFFALSE 70540
70448: GO 70450
70450: DISABLE
70451: LD_INT 0
70453: PPUSH
70454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70455: LD_ADDR_VAR 0 2
70459: PUSH
70460: LD_INT 22
70462: PUSH
70463: LD_OWVAR 2
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 32
70474: PUSH
70475: LD_INT 1
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 21
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: LIST
70496: PPUSH
70497: CALL_OW 69
70501: ST_TO_ADDR
// if not tmp then
70502: LD_VAR 0 2
70506: NOT
70507: IFFALSE 70511
// exit ;
70509: GO 70540
// for i in tmp do
70511: LD_ADDR_VAR 0 1
70515: PUSH
70516: LD_VAR 0 2
70520: PUSH
70521: FOR_IN
70522: IFFALSE 70538
// SetFuel ( i , 0 ) ;
70524: LD_VAR 0 1
70528: PPUSH
70529: LD_INT 0
70531: PPUSH
70532: CALL_OW 240
70536: GO 70521
70538: POP
70539: POP
// end ;
70540: PPOPN 2
70542: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70543: LD_EXP 43
70547: PUSH
70548: LD_EXP 79
70552: AND
70553: IFFALSE 70619
70555: GO 70557
70557: DISABLE
70558: LD_INT 0
70560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70561: LD_ADDR_VAR 0 1
70565: PUSH
70566: LD_INT 22
70568: PUSH
70569: LD_OWVAR 2
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 30
70580: PUSH
70581: LD_INT 29
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PPUSH
70592: CALL_OW 69
70596: ST_TO_ADDR
// if not tmp then
70597: LD_VAR 0 1
70601: NOT
70602: IFFALSE 70606
// exit ;
70604: GO 70619
// DestroyUnit ( tmp [ 1 ] ) ;
70606: LD_VAR 0 1
70610: PUSH
70611: LD_INT 1
70613: ARRAY
70614: PPUSH
70615: CALL_OW 65
// end ;
70619: PPOPN 1
70621: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70622: LD_EXP 43
70626: PUSH
70627: LD_EXP 81
70631: AND
70632: IFFALSE 70761
70634: GO 70636
70636: DISABLE
70637: LD_INT 0
70639: PPUSH
// begin uc_side := 0 ;
70640: LD_ADDR_OWVAR 20
70644: PUSH
70645: LD_INT 0
70647: ST_TO_ADDR
// uc_nation := nation_arabian ;
70648: LD_ADDR_OWVAR 21
70652: PUSH
70653: LD_INT 2
70655: ST_TO_ADDR
// hc_gallery :=  ;
70656: LD_ADDR_OWVAR 33
70660: PUSH
70661: LD_STRING 
70663: ST_TO_ADDR
// hc_name :=  ;
70664: LD_ADDR_OWVAR 26
70668: PUSH
70669: LD_STRING 
70671: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70672: LD_INT 1
70674: PPUSH
70675: LD_INT 11
70677: PPUSH
70678: LD_INT 10
70680: PPUSH
70681: CALL_OW 380
// un := CreateHuman ;
70685: LD_ADDR_VAR 0 1
70689: PUSH
70690: CALL_OW 44
70694: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70695: LD_VAR 0 1
70699: PPUSH
70700: LD_INT 1
70702: PPUSH
70703: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70707: LD_INT 35
70709: PPUSH
70710: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70714: LD_VAR 0 1
70718: PPUSH
70719: LD_INT 22
70721: PUSH
70722: LD_OWVAR 2
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PPUSH
70731: CALL_OW 69
70735: PPUSH
70736: LD_VAR 0 1
70740: PPUSH
70741: CALL_OW 74
70745: PPUSH
70746: CALL_OW 115
// until IsDead ( un ) ;
70750: LD_VAR 0 1
70754: PPUSH
70755: CALL_OW 301
70759: IFFALSE 70707
// end ;
70761: PPOPN 1
70763: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70764: LD_EXP 43
70768: PUSH
70769: LD_EXP 83
70773: AND
70774: IFFALSE 70786
70776: GO 70778
70778: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70779: LD_STRING earthquake(getX(game), 0, 32)
70781: PPUSH
70782: CALL_OW 559
70786: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
70787: LD_EXP 43
70791: PUSH
70792: LD_EXP 84
70796: AND
70797: IFFALSE 70888
70799: GO 70801
70801: DISABLE
70802: LD_INT 0
70804: PPUSH
// begin enable ;
70805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
70806: LD_ADDR_VAR 0 1
70810: PUSH
70811: LD_INT 22
70813: PUSH
70814: LD_OWVAR 2
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 21
70825: PUSH
70826: LD_INT 2
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 33
70835: PUSH
70836: LD_INT 3
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: LIST
70847: PPUSH
70848: CALL_OW 69
70852: ST_TO_ADDR
// if not tmp then
70853: LD_VAR 0 1
70857: NOT
70858: IFFALSE 70862
// exit ;
70860: GO 70888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70862: LD_VAR 0 1
70866: PUSH
70867: LD_INT 1
70869: PPUSH
70870: LD_VAR 0 1
70874: PPUSH
70875: CALL_OW 12
70879: ARRAY
70880: PPUSH
70881: LD_INT 1
70883: PPUSH
70884: CALL_OW 234
// end ;
70888: PPOPN 1
70890: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70891: LD_EXP 43
70895: PUSH
70896: LD_EXP 85
70900: AND
70901: IFFALSE 71042
70903: GO 70905
70905: DISABLE
70906: LD_INT 0
70908: PPUSH
70909: PPUSH
70910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70911: LD_ADDR_VAR 0 3
70915: PUSH
70916: LD_INT 22
70918: PUSH
70919: LD_OWVAR 2
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 25
70930: PUSH
70931: LD_INT 1
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PPUSH
70942: CALL_OW 69
70946: ST_TO_ADDR
// if not tmp then
70947: LD_VAR 0 3
70951: NOT
70952: IFFALSE 70956
// exit ;
70954: GO 71042
// un := tmp [ rand ( 1 , tmp ) ] ;
70956: LD_ADDR_VAR 0 2
70960: PUSH
70961: LD_VAR 0 3
70965: PUSH
70966: LD_INT 1
70968: PPUSH
70969: LD_VAR 0 3
70973: PPUSH
70974: CALL_OW 12
70978: ARRAY
70979: ST_TO_ADDR
// if Crawls ( un ) then
70980: LD_VAR 0 2
70984: PPUSH
70985: CALL_OW 318
70989: IFFALSE 71000
// ComWalk ( un ) ;
70991: LD_VAR 0 2
70995: PPUSH
70996: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71000: LD_VAR 0 2
71004: PPUSH
71005: LD_INT 9
71007: PPUSH
71008: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71012: LD_INT 28
71014: PPUSH
71015: LD_OWVAR 2
71019: PPUSH
71020: LD_INT 2
71022: PPUSH
71023: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71027: LD_INT 29
71029: PPUSH
71030: LD_OWVAR 2
71034: PPUSH
71035: LD_INT 2
71037: PPUSH
71038: CALL_OW 322
// end ;
71042: PPOPN 3
71044: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71045: LD_EXP 43
71049: PUSH
71050: LD_EXP 86
71054: AND
71055: IFFALSE 71166
71057: GO 71059
71059: DISABLE
71060: LD_INT 0
71062: PPUSH
71063: PPUSH
71064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71065: LD_ADDR_VAR 0 3
71069: PUSH
71070: LD_INT 22
71072: PUSH
71073: LD_OWVAR 2
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 25
71084: PUSH
71085: LD_INT 1
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PPUSH
71096: CALL_OW 69
71100: ST_TO_ADDR
// if not tmp then
71101: LD_VAR 0 3
71105: NOT
71106: IFFALSE 71110
// exit ;
71108: GO 71166
// un := tmp [ rand ( 1 , tmp ) ] ;
71110: LD_ADDR_VAR 0 2
71114: PUSH
71115: LD_VAR 0 3
71119: PUSH
71120: LD_INT 1
71122: PPUSH
71123: LD_VAR 0 3
71127: PPUSH
71128: CALL_OW 12
71132: ARRAY
71133: ST_TO_ADDR
// if Crawls ( un ) then
71134: LD_VAR 0 2
71138: PPUSH
71139: CALL_OW 318
71143: IFFALSE 71154
// ComWalk ( un ) ;
71145: LD_VAR 0 2
71149: PPUSH
71150: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71154: LD_VAR 0 2
71158: PPUSH
71159: LD_INT 8
71161: PPUSH
71162: CALL_OW 336
// end ;
71166: PPOPN 3
71168: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71169: LD_EXP 43
71173: PUSH
71174: LD_EXP 87
71178: AND
71179: IFFALSE 71323
71181: GO 71183
71183: DISABLE
71184: LD_INT 0
71186: PPUSH
71187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71188: LD_ADDR_VAR 0 2
71192: PUSH
71193: LD_INT 22
71195: PUSH
71196: LD_OWVAR 2
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 21
71207: PUSH
71208: LD_INT 2
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: LD_INT 34
71220: PUSH
71221: LD_INT 12
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 34
71230: PUSH
71231: LD_INT 51
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 34
71240: PUSH
71241: LD_INT 32
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: LIST
71258: PPUSH
71259: CALL_OW 69
71263: ST_TO_ADDR
// if not tmp then
71264: LD_VAR 0 2
71268: NOT
71269: IFFALSE 71273
// exit ;
71271: GO 71323
// for i in tmp do
71273: LD_ADDR_VAR 0 1
71277: PUSH
71278: LD_VAR 0 2
71282: PUSH
71283: FOR_IN
71284: IFFALSE 71321
// if GetCargo ( i , mat_artifact ) = 0 then
71286: LD_VAR 0 1
71290: PPUSH
71291: LD_INT 4
71293: PPUSH
71294: CALL_OW 289
71298: PUSH
71299: LD_INT 0
71301: EQUAL
71302: IFFALSE 71319
// SetCargo ( i , mat_siberit , 100 ) ;
71304: LD_VAR 0 1
71308: PPUSH
71309: LD_INT 3
71311: PPUSH
71312: LD_INT 100
71314: PPUSH
71315: CALL_OW 290
71319: GO 71283
71321: POP
71322: POP
// end ;
71323: PPOPN 2
71325: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71326: LD_EXP 43
71330: PUSH
71331: LD_EXP 88
71335: AND
71336: IFFALSE 71519
71338: GO 71340
71340: DISABLE
71341: LD_INT 0
71343: PPUSH
71344: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71345: LD_ADDR_VAR 0 2
71349: PUSH
71350: LD_INT 22
71352: PUSH
71353: LD_OWVAR 2
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PPUSH
71362: CALL_OW 69
71366: ST_TO_ADDR
// if not tmp then
71367: LD_VAR 0 2
71371: NOT
71372: IFFALSE 71376
// exit ;
71374: GO 71519
// for i := 1 to 2 do
71376: LD_ADDR_VAR 0 1
71380: PUSH
71381: DOUBLE
71382: LD_INT 1
71384: DEC
71385: ST_TO_ADDR
71386: LD_INT 2
71388: PUSH
71389: FOR_TO
71390: IFFALSE 71517
// begin uc_side := your_side ;
71392: LD_ADDR_OWVAR 20
71396: PUSH
71397: LD_OWVAR 2
71401: ST_TO_ADDR
// uc_nation := nation_american ;
71402: LD_ADDR_OWVAR 21
71406: PUSH
71407: LD_INT 1
71409: ST_TO_ADDR
// vc_chassis := us_morphling ;
71410: LD_ADDR_OWVAR 37
71414: PUSH
71415: LD_INT 5
71417: ST_TO_ADDR
// vc_engine := engine_siberite ;
71418: LD_ADDR_OWVAR 39
71422: PUSH
71423: LD_INT 3
71425: ST_TO_ADDR
// vc_control := control_computer ;
71426: LD_ADDR_OWVAR 38
71430: PUSH
71431: LD_INT 3
71433: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71434: LD_ADDR_OWVAR 40
71438: PUSH
71439: LD_INT 10
71441: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71442: LD_VAR 0 2
71446: PUSH
71447: LD_INT 1
71449: ARRAY
71450: PPUSH
71451: CALL_OW 310
71455: NOT
71456: IFFALSE 71503
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71458: CALL_OW 45
71462: PPUSH
71463: LD_VAR 0 2
71467: PUSH
71468: LD_INT 1
71470: ARRAY
71471: PPUSH
71472: CALL_OW 250
71476: PPUSH
71477: LD_VAR 0 2
71481: PUSH
71482: LD_INT 1
71484: ARRAY
71485: PPUSH
71486: CALL_OW 251
71490: PPUSH
71491: LD_INT 12
71493: PPUSH
71494: LD_INT 1
71496: PPUSH
71497: CALL_OW 50
71501: GO 71515
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71503: CALL_OW 45
71507: PPUSH
71508: LD_INT 1
71510: PPUSH
71511: CALL_OW 51
// end ;
71515: GO 71389
71517: POP
71518: POP
// end ;
71519: PPOPN 2
71521: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71522: LD_EXP 43
71526: PUSH
71527: LD_EXP 89
71531: AND
71532: IFFALSE 71754
71534: GO 71536
71536: DISABLE
71537: LD_INT 0
71539: PPUSH
71540: PPUSH
71541: PPUSH
71542: PPUSH
71543: PPUSH
71544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71545: LD_ADDR_VAR 0 6
71549: PUSH
71550: LD_INT 22
71552: PUSH
71553: LD_OWVAR 2
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 21
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 3
71574: PUSH
71575: LD_INT 23
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: PPUSH
71594: CALL_OW 69
71598: ST_TO_ADDR
// if not tmp then
71599: LD_VAR 0 6
71603: NOT
71604: IFFALSE 71608
// exit ;
71606: GO 71754
// s1 := rand ( 1 , 4 ) ;
71608: LD_ADDR_VAR 0 2
71612: PUSH
71613: LD_INT 1
71615: PPUSH
71616: LD_INT 4
71618: PPUSH
71619: CALL_OW 12
71623: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71624: LD_ADDR_VAR 0 4
71628: PUSH
71629: LD_VAR 0 6
71633: PUSH
71634: LD_INT 1
71636: ARRAY
71637: PPUSH
71638: LD_VAR 0 2
71642: PPUSH
71643: CALL_OW 259
71647: ST_TO_ADDR
// if s1 = 1 then
71648: LD_VAR 0 2
71652: PUSH
71653: LD_INT 1
71655: EQUAL
71656: IFFALSE 71676
// s2 := rand ( 2 , 4 ) else
71658: LD_ADDR_VAR 0 3
71662: PUSH
71663: LD_INT 2
71665: PPUSH
71666: LD_INT 4
71668: PPUSH
71669: CALL_OW 12
71673: ST_TO_ADDR
71674: GO 71684
// s2 := 1 ;
71676: LD_ADDR_VAR 0 3
71680: PUSH
71681: LD_INT 1
71683: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71684: LD_ADDR_VAR 0 5
71688: PUSH
71689: LD_VAR 0 6
71693: PUSH
71694: LD_INT 1
71696: ARRAY
71697: PPUSH
71698: LD_VAR 0 3
71702: PPUSH
71703: CALL_OW 259
71707: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71708: LD_VAR 0 6
71712: PUSH
71713: LD_INT 1
71715: ARRAY
71716: PPUSH
71717: LD_VAR 0 2
71721: PPUSH
71722: LD_VAR 0 5
71726: PPUSH
71727: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71731: LD_VAR 0 6
71735: PUSH
71736: LD_INT 1
71738: ARRAY
71739: PPUSH
71740: LD_VAR 0 3
71744: PPUSH
71745: LD_VAR 0 4
71749: PPUSH
71750: CALL_OW 237
// end ;
71754: PPOPN 6
71756: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71757: LD_EXP 43
71761: PUSH
71762: LD_EXP 90
71766: AND
71767: IFFALSE 71846
71769: GO 71771
71771: DISABLE
71772: LD_INT 0
71774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71775: LD_ADDR_VAR 0 1
71779: PUSH
71780: LD_INT 22
71782: PUSH
71783: LD_OWVAR 2
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 30
71794: PUSH
71795: LD_INT 3
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PPUSH
71806: CALL_OW 69
71810: ST_TO_ADDR
// if not tmp then
71811: LD_VAR 0 1
71815: NOT
71816: IFFALSE 71820
// exit ;
71818: GO 71846
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71820: LD_VAR 0 1
71824: PUSH
71825: LD_INT 1
71827: PPUSH
71828: LD_VAR 0 1
71832: PPUSH
71833: CALL_OW 12
71837: ARRAY
71838: PPUSH
71839: LD_INT 1
71841: PPUSH
71842: CALL_OW 234
// end ;
71846: PPOPN 1
71848: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
71849: LD_EXP 43
71853: PUSH
71854: LD_EXP 91
71858: AND
71859: IFFALSE 71971
71861: GO 71863
71863: DISABLE
71864: LD_INT 0
71866: PPUSH
71867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71868: LD_ADDR_VAR 0 2
71872: PUSH
71873: LD_INT 22
71875: PUSH
71876: LD_OWVAR 2
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 2
71887: PUSH
71888: LD_INT 30
71890: PUSH
71891: LD_INT 27
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 30
71900: PUSH
71901: LD_INT 26
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 30
71910: PUSH
71911: LD_INT 28
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PPUSH
71928: CALL_OW 69
71932: ST_TO_ADDR
// if not tmp then
71933: LD_VAR 0 2
71937: NOT
71938: IFFALSE 71942
// exit ;
71940: GO 71971
// for i in tmp do
71942: LD_ADDR_VAR 0 1
71946: PUSH
71947: LD_VAR 0 2
71951: PUSH
71952: FOR_IN
71953: IFFALSE 71969
// SetLives ( i , 1 ) ;
71955: LD_VAR 0 1
71959: PPUSH
71960: LD_INT 1
71962: PPUSH
71963: CALL_OW 234
71967: GO 71952
71969: POP
71970: POP
// end ;
71971: PPOPN 2
71973: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71974: LD_EXP 43
71978: PUSH
71979: LD_EXP 92
71983: AND
71984: IFFALSE 72271
71986: GO 71988
71988: DISABLE
71989: LD_INT 0
71991: PPUSH
71992: PPUSH
71993: PPUSH
// begin i := rand ( 1 , 7 ) ;
71994: LD_ADDR_VAR 0 1
71998: PUSH
71999: LD_INT 1
72001: PPUSH
72002: LD_INT 7
72004: PPUSH
72005: CALL_OW 12
72009: ST_TO_ADDR
// case i of 1 :
72010: LD_VAR 0 1
72014: PUSH
72015: LD_INT 1
72017: DOUBLE
72018: EQUAL
72019: IFTRUE 72023
72021: GO 72033
72023: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72024: LD_STRING earthquake(getX(game), 0, 32)
72026: PPUSH
72027: CALL_OW 559
72031: GO 72271
72033: LD_INT 2
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72041
72039: GO 72055
72041: POP
// begin ToLua ( displayStucuk(); ) ;
72042: LD_STRING displayStucuk();
72044: PPUSH
72045: CALL_OW 559
// ResetFog ;
72049: CALL_OW 335
// end ; 3 :
72053: GO 72271
72055: LD_INT 3
72057: DOUBLE
72058: EQUAL
72059: IFTRUE 72063
72061: GO 72167
72063: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72064: LD_ADDR_VAR 0 2
72068: PUSH
72069: LD_INT 22
72071: PUSH
72072: LD_OWVAR 2
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 25
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PPUSH
72095: CALL_OW 69
72099: ST_TO_ADDR
// if not tmp then
72100: LD_VAR 0 2
72104: NOT
72105: IFFALSE 72109
// exit ;
72107: GO 72271
// un := tmp [ rand ( 1 , tmp ) ] ;
72109: LD_ADDR_VAR 0 3
72113: PUSH
72114: LD_VAR 0 2
72118: PUSH
72119: LD_INT 1
72121: PPUSH
72122: LD_VAR 0 2
72126: PPUSH
72127: CALL_OW 12
72131: ARRAY
72132: ST_TO_ADDR
// if Crawls ( un ) then
72133: LD_VAR 0 3
72137: PPUSH
72138: CALL_OW 318
72142: IFFALSE 72153
// ComWalk ( un ) ;
72144: LD_VAR 0 3
72148: PPUSH
72149: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72153: LD_VAR 0 3
72157: PPUSH
72158: LD_INT 8
72160: PPUSH
72161: CALL_OW 336
// end ; 4 :
72165: GO 72271
72167: LD_INT 4
72169: DOUBLE
72170: EQUAL
72171: IFTRUE 72175
72173: GO 72249
72175: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72176: LD_ADDR_VAR 0 2
72180: PUSH
72181: LD_INT 22
72183: PUSH
72184: LD_OWVAR 2
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 30
72195: PUSH
72196: LD_INT 29
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PPUSH
72207: CALL_OW 69
72211: ST_TO_ADDR
// if not tmp then
72212: LD_VAR 0 2
72216: NOT
72217: IFFALSE 72221
// exit ;
72219: GO 72271
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72221: LD_VAR 0 2
72225: PUSH
72226: LD_INT 1
72228: ARRAY
72229: PPUSH
72230: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72234: LD_VAR 0 2
72238: PUSH
72239: LD_INT 1
72241: ARRAY
72242: PPUSH
72243: CALL_OW 65
// end ; 5 .. 7 :
72247: GO 72271
72249: LD_INT 5
72251: DOUBLE
72252: GREATEREQUAL
72253: IFFALSE 72261
72255: LD_INT 7
72257: DOUBLE
72258: LESSEQUAL
72259: IFTRUE 72263
72261: GO 72270
72263: POP
// StreamSibBomb ; end ;
72264: CALL 68508 0 0
72268: GO 72271
72270: POP
// end ;
72271: PPOPN 3
72273: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72274: LD_EXP 43
72278: PUSH
72279: LD_EXP 93
72283: AND
72284: IFFALSE 72440
72286: GO 72288
72288: DISABLE
72289: LD_INT 0
72291: PPUSH
72292: PPUSH
72293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72294: LD_ADDR_VAR 0 2
72298: PUSH
72299: LD_INT 81
72301: PUSH
72302: LD_OWVAR 2
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 2
72313: PUSH
72314: LD_INT 21
72316: PUSH
72317: LD_INT 1
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 21
72326: PUSH
72327: LD_INT 2
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: LIST
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PPUSH
72343: CALL_OW 69
72347: ST_TO_ADDR
// if not tmp then
72348: LD_VAR 0 2
72352: NOT
72353: IFFALSE 72357
// exit ;
72355: GO 72440
// p := 0 ;
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: LD_INT 0
72364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72365: LD_INT 35
72367: PPUSH
72368: CALL_OW 67
// p := p + 1 ;
72372: LD_ADDR_VAR 0 3
72376: PUSH
72377: LD_VAR 0 3
72381: PUSH
72382: LD_INT 1
72384: PLUS
72385: ST_TO_ADDR
// for i in tmp do
72386: LD_ADDR_VAR 0 1
72390: PUSH
72391: LD_VAR 0 2
72395: PUSH
72396: FOR_IN
72397: IFFALSE 72428
// if GetLives ( i ) < 1000 then
72399: LD_VAR 0 1
72403: PPUSH
72404: CALL_OW 256
72408: PUSH
72409: LD_INT 1000
72411: LESS
72412: IFFALSE 72426
// SetLives ( i , 1000 ) ;
72414: LD_VAR 0 1
72418: PPUSH
72419: LD_INT 1000
72421: PPUSH
72422: CALL_OW 234
72426: GO 72396
72428: POP
72429: POP
// until p > 20 ;
72430: LD_VAR 0 3
72434: PUSH
72435: LD_INT 20
72437: GREATER
72438: IFFALSE 72365
// end ;
72440: PPOPN 3
72442: END
// every 0 0$1 trigger StreamModeActive and sTime do
72443: LD_EXP 43
72447: PUSH
72448: LD_EXP 94
72452: AND
72453: IFFALSE 72488
72455: GO 72457
72457: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72458: LD_INT 28
72460: PPUSH
72461: LD_OWVAR 2
72465: PPUSH
72466: LD_INT 2
72468: PPUSH
72469: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72473: LD_INT 30
72475: PPUSH
72476: LD_OWVAR 2
72480: PPUSH
72481: LD_INT 2
72483: PPUSH
72484: CALL_OW 322
// end ;
72488: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72489: LD_EXP 43
72493: PUSH
72494: LD_EXP 95
72498: AND
72499: IFFALSE 72620
72501: GO 72503
72503: DISABLE
72504: LD_INT 0
72506: PPUSH
72507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72508: LD_ADDR_VAR 0 2
72512: PUSH
72513: LD_INT 22
72515: PUSH
72516: LD_OWVAR 2
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 21
72527: PUSH
72528: LD_INT 1
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 3
72537: PUSH
72538: LD_INT 23
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: PPUSH
72557: CALL_OW 69
72561: ST_TO_ADDR
// if not tmp then
72562: LD_VAR 0 2
72566: NOT
72567: IFFALSE 72571
// exit ;
72569: GO 72620
// for i in tmp do
72571: LD_ADDR_VAR 0 1
72575: PUSH
72576: LD_VAR 0 2
72580: PUSH
72581: FOR_IN
72582: IFFALSE 72618
// begin if Crawls ( i ) then
72584: LD_VAR 0 1
72588: PPUSH
72589: CALL_OW 318
72593: IFFALSE 72604
// ComWalk ( i ) ;
72595: LD_VAR 0 1
72599: PPUSH
72600: CALL_OW 138
// SetClass ( i , 2 ) ;
72604: LD_VAR 0 1
72608: PPUSH
72609: LD_INT 2
72611: PPUSH
72612: CALL_OW 336
// end ;
72616: GO 72581
72618: POP
72619: POP
// end ;
72620: PPOPN 2
72622: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72623: LD_EXP 43
72627: PUSH
72628: LD_EXP 96
72632: AND
72633: IFFALSE 72921
72635: GO 72637
72637: DISABLE
72638: LD_INT 0
72640: PPUSH
72641: PPUSH
72642: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72643: LD_OWVAR 2
72647: PPUSH
72648: LD_INT 9
72650: PPUSH
72651: LD_INT 1
72653: PPUSH
72654: LD_INT 1
72656: PPUSH
72657: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72661: LD_INT 9
72663: PPUSH
72664: LD_OWVAR 2
72668: PPUSH
72669: CALL_OW 343
// uc_side := 9 ;
72673: LD_ADDR_OWVAR 20
72677: PUSH
72678: LD_INT 9
72680: ST_TO_ADDR
// uc_nation := 2 ;
72681: LD_ADDR_OWVAR 21
72685: PUSH
72686: LD_INT 2
72688: ST_TO_ADDR
// hc_name := Dark Warrior ;
72689: LD_ADDR_OWVAR 26
72693: PUSH
72694: LD_STRING Dark Warrior
72696: ST_TO_ADDR
// hc_gallery :=  ;
72697: LD_ADDR_OWVAR 33
72701: PUSH
72702: LD_STRING 
72704: ST_TO_ADDR
// hc_noskilllimit := true ;
72705: LD_ADDR_OWVAR 76
72709: PUSH
72710: LD_INT 1
72712: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72713: LD_ADDR_OWVAR 31
72717: PUSH
72718: LD_INT 30
72720: PUSH
72721: LD_INT 30
72723: PUSH
72724: LD_INT 30
72726: PUSH
72727: LD_INT 30
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: ST_TO_ADDR
// un := CreateHuman ;
72736: LD_ADDR_VAR 0 3
72740: PUSH
72741: CALL_OW 44
72745: ST_TO_ADDR
// hc_noskilllimit := false ;
72746: LD_ADDR_OWVAR 76
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72754: LD_VAR 0 3
72758: PPUSH
72759: LD_INT 1
72761: PPUSH
72762: CALL_OW 51
// ToLua ( playRanger() ) ;
72766: LD_STRING playRanger()
72768: PPUSH
72769: CALL_OW 559
// p := 0 ;
72773: LD_ADDR_VAR 0 2
72777: PUSH
72778: LD_INT 0
72780: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72781: LD_INT 35
72783: PPUSH
72784: CALL_OW 67
// p := p + 1 ;
72788: LD_ADDR_VAR 0 2
72792: PUSH
72793: LD_VAR 0 2
72797: PUSH
72798: LD_INT 1
72800: PLUS
72801: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
72802: LD_VAR 0 3
72806: PPUSH
72807: CALL_OW 256
72811: PUSH
72812: LD_INT 1000
72814: LESS
72815: IFFALSE 72829
// SetLives ( un , 1000 ) ;
72817: LD_VAR 0 3
72821: PPUSH
72822: LD_INT 1000
72824: PPUSH
72825: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
72829: LD_VAR 0 3
72833: PPUSH
72834: LD_INT 81
72836: PUSH
72837: LD_OWVAR 2
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 91
72848: PUSH
72849: LD_VAR 0 3
72853: PUSH
72854: LD_INT 30
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: LIST
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PPUSH
72866: CALL_OW 69
72870: PPUSH
72871: LD_VAR 0 3
72875: PPUSH
72876: CALL_OW 74
72880: PPUSH
72881: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72885: LD_VAR 0 2
72889: PUSH
72890: LD_INT 80
72892: GREATER
72893: PUSH
72894: LD_VAR 0 3
72898: PPUSH
72899: CALL_OW 301
72903: OR
72904: IFFALSE 72781
// if un then
72906: LD_VAR 0 3
72910: IFFALSE 72921
// RemoveUnit ( un ) ;
72912: LD_VAR 0 3
72916: PPUSH
72917: CALL_OW 64
// end ;
72921: PPOPN 3
72923: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72924: LD_EXP 97
72928: IFFALSE 73044
72930: GO 72932
72932: DISABLE
72933: LD_INT 0
72935: PPUSH
72936: PPUSH
72937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72938: LD_ADDR_VAR 0 2
72942: PUSH
72943: LD_INT 81
72945: PUSH
72946: LD_OWVAR 2
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 21
72957: PUSH
72958: LD_INT 1
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PPUSH
72969: CALL_OW 69
72973: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72974: LD_STRING playComputer()
72976: PPUSH
72977: CALL_OW 559
// if not tmp then
72981: LD_VAR 0 2
72985: NOT
72986: IFFALSE 72990
// exit ;
72988: GO 73044
// for i in tmp do
72990: LD_ADDR_VAR 0 1
72994: PUSH
72995: LD_VAR 0 2
72999: PUSH
73000: FOR_IN
73001: IFFALSE 73042
// for j := 1 to 4 do
73003: LD_ADDR_VAR 0 3
73007: PUSH
73008: DOUBLE
73009: LD_INT 1
73011: DEC
73012: ST_TO_ADDR
73013: LD_INT 4
73015: PUSH
73016: FOR_TO
73017: IFFALSE 73038
// SetSkill ( i , j , 10 ) ;
73019: LD_VAR 0 1
73023: PPUSH
73024: LD_VAR 0 3
73028: PPUSH
73029: LD_INT 10
73031: PPUSH
73032: CALL_OW 237
73036: GO 73016
73038: POP
73039: POP
73040: GO 73000
73042: POP
73043: POP
// end ;
73044: PPOPN 3
73046: END
// every 0 0$1 trigger s30 do var i , tmp ;
73047: LD_EXP 98
73051: IFFALSE 73120
73053: GO 73055
73055: DISABLE
73056: LD_INT 0
73058: PPUSH
73059: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73060: LD_ADDR_VAR 0 2
73064: PUSH
73065: LD_INT 22
73067: PUSH
73068: LD_OWVAR 2
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: PPUSH
73077: CALL_OW 69
73081: ST_TO_ADDR
// if not tmp then
73082: LD_VAR 0 2
73086: NOT
73087: IFFALSE 73091
// exit ;
73089: GO 73120
// for i in tmp do
73091: LD_ADDR_VAR 0 1
73095: PUSH
73096: LD_VAR 0 2
73100: PUSH
73101: FOR_IN
73102: IFFALSE 73118
// SetLives ( i , 300 ) ;
73104: LD_VAR 0 1
73108: PPUSH
73109: LD_INT 300
73111: PPUSH
73112: CALL_OW 234
73116: GO 73101
73118: POP
73119: POP
// end ;
73120: PPOPN 2
73122: END
// every 0 0$1 trigger s60 do var i , tmp ;
73123: LD_EXP 99
73127: IFFALSE 73196
73129: GO 73131
73131: DISABLE
73132: LD_INT 0
73134: PPUSH
73135: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73136: LD_ADDR_VAR 0 2
73140: PUSH
73141: LD_INT 22
73143: PUSH
73144: LD_OWVAR 2
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PPUSH
73153: CALL_OW 69
73157: ST_TO_ADDR
// if not tmp then
73158: LD_VAR 0 2
73162: NOT
73163: IFFALSE 73167
// exit ;
73165: GO 73196
// for i in tmp do
73167: LD_ADDR_VAR 0 1
73171: PUSH
73172: LD_VAR 0 2
73176: PUSH
73177: FOR_IN
73178: IFFALSE 73194
// SetLives ( i , 600 ) ;
73180: LD_VAR 0 1
73184: PPUSH
73185: LD_INT 600
73187: PPUSH
73188: CALL_OW 234
73192: GO 73177
73194: POP
73195: POP
// end ;
73196: PPOPN 2
73198: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73199: LD_INT 0
73201: PPUSH
// case cmd of 301 :
73202: LD_VAR 0 1
73206: PUSH
73207: LD_INT 301
73209: DOUBLE
73210: EQUAL
73211: IFTRUE 73215
73213: GO 73247
73215: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73216: LD_VAR 0 6
73220: PPUSH
73221: LD_VAR 0 7
73225: PPUSH
73226: LD_VAR 0 8
73230: PPUSH
73231: LD_VAR 0 4
73235: PPUSH
73236: LD_VAR 0 5
73240: PPUSH
73241: CALL 74448 0 5
73245: GO 73368
73247: LD_INT 302
73249: DOUBLE
73250: EQUAL
73251: IFTRUE 73255
73253: GO 73292
73255: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73256: LD_VAR 0 6
73260: PPUSH
73261: LD_VAR 0 7
73265: PPUSH
73266: LD_VAR 0 8
73270: PPUSH
73271: LD_VAR 0 9
73275: PPUSH
73276: LD_VAR 0 4
73280: PPUSH
73281: LD_VAR 0 5
73285: PPUSH
73286: CALL 74539 0 6
73290: GO 73368
73292: LD_INT 303
73294: DOUBLE
73295: EQUAL
73296: IFTRUE 73300
73298: GO 73337
73300: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73301: LD_VAR 0 6
73305: PPUSH
73306: LD_VAR 0 7
73310: PPUSH
73311: LD_VAR 0 8
73315: PPUSH
73316: LD_VAR 0 9
73320: PPUSH
73321: LD_VAR 0 4
73325: PPUSH
73326: LD_VAR 0 5
73330: PPUSH
73331: CALL 73373 0 6
73335: GO 73368
73337: LD_INT 304
73339: DOUBLE
73340: EQUAL
73341: IFTRUE 73345
73343: GO 73367
73345: POP
// hHackTeleport ( unit , x , y ) ; end ;
73346: LD_VAR 0 2
73350: PPUSH
73351: LD_VAR 0 4
73355: PPUSH
73356: LD_VAR 0 5
73360: PPUSH
73361: CALL 75132 0 3
73365: GO 73368
73367: POP
// end ;
73368: LD_VAR 0 12
73372: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73373: LD_INT 0
73375: PPUSH
73376: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73377: LD_VAR 0 1
73381: PUSH
73382: LD_INT 1
73384: LESS
73385: PUSH
73386: LD_VAR 0 1
73390: PUSH
73391: LD_INT 3
73393: GREATER
73394: OR
73395: PUSH
73396: LD_VAR 0 5
73400: PPUSH
73401: LD_VAR 0 6
73405: PPUSH
73406: CALL_OW 428
73410: OR
73411: IFFALSE 73415
// exit ;
73413: GO 74135
// uc_side := your_side ;
73415: LD_ADDR_OWVAR 20
73419: PUSH
73420: LD_OWVAR 2
73424: ST_TO_ADDR
// uc_nation := nation ;
73425: LD_ADDR_OWVAR 21
73429: PUSH
73430: LD_VAR 0 1
73434: ST_TO_ADDR
// bc_level = 1 ;
73435: LD_ADDR_OWVAR 43
73439: PUSH
73440: LD_INT 1
73442: ST_TO_ADDR
// case btype of 1 :
73443: LD_VAR 0 2
73447: PUSH
73448: LD_INT 1
73450: DOUBLE
73451: EQUAL
73452: IFTRUE 73456
73454: GO 73467
73456: POP
// bc_type := b_depot ; 2 :
73457: LD_ADDR_OWVAR 42
73461: PUSH
73462: LD_INT 0
73464: ST_TO_ADDR
73465: GO 74079
73467: LD_INT 2
73469: DOUBLE
73470: EQUAL
73471: IFTRUE 73475
73473: GO 73486
73475: POP
// bc_type := b_warehouse ; 3 :
73476: LD_ADDR_OWVAR 42
73480: PUSH
73481: LD_INT 1
73483: ST_TO_ADDR
73484: GO 74079
73486: LD_INT 3
73488: DOUBLE
73489: EQUAL
73490: IFTRUE 73494
73492: GO 73505
73494: POP
// bc_type := b_lab ; 4 .. 9 :
73495: LD_ADDR_OWVAR 42
73499: PUSH
73500: LD_INT 6
73502: ST_TO_ADDR
73503: GO 74079
73505: LD_INT 4
73507: DOUBLE
73508: GREATEREQUAL
73509: IFFALSE 73517
73511: LD_INT 9
73513: DOUBLE
73514: LESSEQUAL
73515: IFTRUE 73519
73517: GO 73571
73519: POP
// begin bc_type := b_lab_half ;
73520: LD_ADDR_OWVAR 42
73524: PUSH
73525: LD_INT 7
73527: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73528: LD_ADDR_OWVAR 44
73532: PUSH
73533: LD_INT 10
73535: PUSH
73536: LD_INT 11
73538: PUSH
73539: LD_INT 12
73541: PUSH
73542: LD_INT 15
73544: PUSH
73545: LD_INT 14
73547: PUSH
73548: LD_INT 13
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: LD_INT 3
73566: MINUS
73567: ARRAY
73568: ST_TO_ADDR
// end ; 10 .. 13 :
73569: GO 74079
73571: LD_INT 10
73573: DOUBLE
73574: GREATEREQUAL
73575: IFFALSE 73583
73577: LD_INT 13
73579: DOUBLE
73580: LESSEQUAL
73581: IFTRUE 73585
73583: GO 73662
73585: POP
// begin bc_type := b_lab_full ;
73586: LD_ADDR_OWVAR 42
73590: PUSH
73591: LD_INT 8
73593: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73594: LD_ADDR_OWVAR 44
73598: PUSH
73599: LD_INT 10
73601: PUSH
73602: LD_INT 12
73604: PUSH
73605: LD_INT 14
73607: PUSH
73608: LD_INT 13
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: PUSH
73617: LD_VAR 0 2
73621: PUSH
73622: LD_INT 9
73624: MINUS
73625: ARRAY
73626: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73627: LD_ADDR_OWVAR 45
73631: PUSH
73632: LD_INT 11
73634: PUSH
73635: LD_INT 15
73637: PUSH
73638: LD_INT 12
73640: PUSH
73641: LD_INT 15
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: PUSH
73650: LD_VAR 0 2
73654: PUSH
73655: LD_INT 9
73657: MINUS
73658: ARRAY
73659: ST_TO_ADDR
// end ; 14 :
73660: GO 74079
73662: LD_INT 14
73664: DOUBLE
73665: EQUAL
73666: IFTRUE 73670
73668: GO 73681
73670: POP
// bc_type := b_workshop ; 15 :
73671: LD_ADDR_OWVAR 42
73675: PUSH
73676: LD_INT 2
73678: ST_TO_ADDR
73679: GO 74079
73681: LD_INT 15
73683: DOUBLE
73684: EQUAL
73685: IFTRUE 73689
73687: GO 73700
73689: POP
// bc_type := b_factory ; 16 :
73690: LD_ADDR_OWVAR 42
73694: PUSH
73695: LD_INT 3
73697: ST_TO_ADDR
73698: GO 74079
73700: LD_INT 16
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73708
73706: GO 73719
73708: POP
// bc_type := b_ext_gun ; 17 :
73709: LD_ADDR_OWVAR 42
73713: PUSH
73714: LD_INT 17
73716: ST_TO_ADDR
73717: GO 74079
73719: LD_INT 17
73721: DOUBLE
73722: EQUAL
73723: IFTRUE 73727
73725: GO 73755
73727: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73728: LD_ADDR_OWVAR 42
73732: PUSH
73733: LD_INT 19
73735: PUSH
73736: LD_INT 23
73738: PUSH
73739: LD_INT 19
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: LIST
73746: PUSH
73747: LD_VAR 0 1
73751: ARRAY
73752: ST_TO_ADDR
73753: GO 74079
73755: LD_INT 18
73757: DOUBLE
73758: EQUAL
73759: IFTRUE 73763
73761: GO 73774
73763: POP
// bc_type := b_ext_radar ; 19 :
73764: LD_ADDR_OWVAR 42
73768: PUSH
73769: LD_INT 20
73771: ST_TO_ADDR
73772: GO 74079
73774: LD_INT 19
73776: DOUBLE
73777: EQUAL
73778: IFTRUE 73782
73780: GO 73793
73782: POP
// bc_type := b_ext_radio ; 20 :
73783: LD_ADDR_OWVAR 42
73787: PUSH
73788: LD_INT 22
73790: ST_TO_ADDR
73791: GO 74079
73793: LD_INT 20
73795: DOUBLE
73796: EQUAL
73797: IFTRUE 73801
73799: GO 73812
73801: POP
// bc_type := b_ext_siberium ; 21 :
73802: LD_ADDR_OWVAR 42
73806: PUSH
73807: LD_INT 21
73809: ST_TO_ADDR
73810: GO 74079
73812: LD_INT 21
73814: DOUBLE
73815: EQUAL
73816: IFTRUE 73820
73818: GO 73831
73820: POP
// bc_type := b_ext_computer ; 22 :
73821: LD_ADDR_OWVAR 42
73825: PUSH
73826: LD_INT 24
73828: ST_TO_ADDR
73829: GO 74079
73831: LD_INT 22
73833: DOUBLE
73834: EQUAL
73835: IFTRUE 73839
73837: GO 73850
73839: POP
// bc_type := b_ext_track ; 23 :
73840: LD_ADDR_OWVAR 42
73844: PUSH
73845: LD_INT 16
73847: ST_TO_ADDR
73848: GO 74079
73850: LD_INT 23
73852: DOUBLE
73853: EQUAL
73854: IFTRUE 73858
73856: GO 73869
73858: POP
// bc_type := b_ext_laser ; 24 :
73859: LD_ADDR_OWVAR 42
73863: PUSH
73864: LD_INT 25
73866: ST_TO_ADDR
73867: GO 74079
73869: LD_INT 24
73871: DOUBLE
73872: EQUAL
73873: IFTRUE 73877
73875: GO 73888
73877: POP
// bc_type := b_control_tower ; 25 :
73878: LD_ADDR_OWVAR 42
73882: PUSH
73883: LD_INT 36
73885: ST_TO_ADDR
73886: GO 74079
73888: LD_INT 25
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73896
73894: GO 73907
73896: POP
// bc_type := b_breastwork ; 26 :
73897: LD_ADDR_OWVAR 42
73901: PUSH
73902: LD_INT 31
73904: ST_TO_ADDR
73905: GO 74079
73907: LD_INT 26
73909: DOUBLE
73910: EQUAL
73911: IFTRUE 73915
73913: GO 73926
73915: POP
// bc_type := b_bunker ; 27 :
73916: LD_ADDR_OWVAR 42
73920: PUSH
73921: LD_INT 32
73923: ST_TO_ADDR
73924: GO 74079
73926: LD_INT 27
73928: DOUBLE
73929: EQUAL
73930: IFTRUE 73934
73932: GO 73945
73934: POP
// bc_type := b_turret ; 28 :
73935: LD_ADDR_OWVAR 42
73939: PUSH
73940: LD_INT 33
73942: ST_TO_ADDR
73943: GO 74079
73945: LD_INT 28
73947: DOUBLE
73948: EQUAL
73949: IFTRUE 73953
73951: GO 73964
73953: POP
// bc_type := b_armoury ; 29 :
73954: LD_ADDR_OWVAR 42
73958: PUSH
73959: LD_INT 4
73961: ST_TO_ADDR
73962: GO 74079
73964: LD_INT 29
73966: DOUBLE
73967: EQUAL
73968: IFTRUE 73972
73970: GO 73983
73972: POP
// bc_type := b_barracks ; 30 :
73973: LD_ADDR_OWVAR 42
73977: PUSH
73978: LD_INT 5
73980: ST_TO_ADDR
73981: GO 74079
73983: LD_INT 30
73985: DOUBLE
73986: EQUAL
73987: IFTRUE 73991
73989: GO 74002
73991: POP
// bc_type := b_solar_power ; 31 :
73992: LD_ADDR_OWVAR 42
73996: PUSH
73997: LD_INT 27
73999: ST_TO_ADDR
74000: GO 74079
74002: LD_INT 31
74004: DOUBLE
74005: EQUAL
74006: IFTRUE 74010
74008: GO 74021
74010: POP
// bc_type := b_oil_power ; 32 :
74011: LD_ADDR_OWVAR 42
74015: PUSH
74016: LD_INT 26
74018: ST_TO_ADDR
74019: GO 74079
74021: LD_INT 32
74023: DOUBLE
74024: EQUAL
74025: IFTRUE 74029
74027: GO 74040
74029: POP
// bc_type := b_siberite_power ; 33 :
74030: LD_ADDR_OWVAR 42
74034: PUSH
74035: LD_INT 28
74037: ST_TO_ADDR
74038: GO 74079
74040: LD_INT 33
74042: DOUBLE
74043: EQUAL
74044: IFTRUE 74048
74046: GO 74059
74048: POP
// bc_type := b_oil_mine ; 34 :
74049: LD_ADDR_OWVAR 42
74053: PUSH
74054: LD_INT 29
74056: ST_TO_ADDR
74057: GO 74079
74059: LD_INT 34
74061: DOUBLE
74062: EQUAL
74063: IFTRUE 74067
74065: GO 74078
74067: POP
// bc_type := b_siberite_mine ; end ;
74068: LD_ADDR_OWVAR 42
74072: PUSH
74073: LD_INT 30
74075: ST_TO_ADDR
74076: GO 74079
74078: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74079: LD_ADDR_VAR 0 8
74083: PUSH
74084: LD_VAR 0 5
74088: PPUSH
74089: LD_VAR 0 6
74093: PPUSH
74094: LD_VAR 0 3
74098: PPUSH
74099: CALL_OW 47
74103: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74104: LD_OWVAR 42
74108: PUSH
74109: LD_INT 32
74111: PUSH
74112: LD_INT 33
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: IN
74119: IFFALSE 74135
// PlaceWeaponTurret ( b , weapon ) ;
74121: LD_VAR 0 8
74125: PPUSH
74126: LD_VAR 0 4
74130: PPUSH
74131: CALL_OW 431
// end ;
74135: LD_VAR 0 7
74139: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
74144: PPUSH
74145: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74146: LD_ADDR_VAR 0 4
74150: PUSH
74151: LD_INT 22
74153: PUSH
74154: LD_OWVAR 2
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: LD_INT 30
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 30
74178: PUSH
74179: LD_INT 1
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PPUSH
74195: CALL_OW 69
74199: ST_TO_ADDR
// if not tmp then
74200: LD_VAR 0 4
74204: NOT
74205: IFFALSE 74209
// exit ;
74207: GO 74268
// for i in tmp do
74209: LD_ADDR_VAR 0 2
74213: PUSH
74214: LD_VAR 0 4
74218: PUSH
74219: FOR_IN
74220: IFFALSE 74266
// for j = 1 to 3 do
74222: LD_ADDR_VAR 0 3
74226: PUSH
74227: DOUBLE
74228: LD_INT 1
74230: DEC
74231: ST_TO_ADDR
74232: LD_INT 3
74234: PUSH
74235: FOR_TO
74236: IFFALSE 74262
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74238: LD_VAR 0 2
74242: PPUSH
74243: CALL_OW 274
74247: PPUSH
74248: LD_VAR 0 3
74252: PPUSH
74253: LD_INT 99999
74255: PPUSH
74256: CALL_OW 277
74260: GO 74235
74262: POP
74263: POP
74264: GO 74219
74266: POP
74267: POP
// end ;
74268: LD_VAR 0 1
74272: RET
// export function hHackSetLevel10 ; var i , j ; begin
74273: LD_INT 0
74275: PPUSH
74276: PPUSH
74277: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74278: LD_ADDR_VAR 0 2
74282: PUSH
74283: LD_INT 21
74285: PUSH
74286: LD_INT 1
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PPUSH
74293: CALL_OW 69
74297: PUSH
74298: FOR_IN
74299: IFFALSE 74351
// if IsSelected ( i ) then
74301: LD_VAR 0 2
74305: PPUSH
74306: CALL_OW 306
74310: IFFALSE 74349
// begin for j := 1 to 4 do
74312: LD_ADDR_VAR 0 3
74316: PUSH
74317: DOUBLE
74318: LD_INT 1
74320: DEC
74321: ST_TO_ADDR
74322: LD_INT 4
74324: PUSH
74325: FOR_TO
74326: IFFALSE 74347
// SetSkill ( i , j , 10 ) ;
74328: LD_VAR 0 2
74332: PPUSH
74333: LD_VAR 0 3
74337: PPUSH
74338: LD_INT 10
74340: PPUSH
74341: CALL_OW 237
74345: GO 74325
74347: POP
74348: POP
// end ;
74349: GO 74298
74351: POP
74352: POP
// end ;
74353: LD_VAR 0 1
74357: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74358: LD_INT 0
74360: PPUSH
74361: PPUSH
74362: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74363: LD_ADDR_VAR 0 2
74367: PUSH
74368: LD_INT 22
74370: PUSH
74371: LD_OWVAR 2
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: LD_INT 21
74382: PUSH
74383: LD_INT 1
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PPUSH
74394: CALL_OW 69
74398: PUSH
74399: FOR_IN
74400: IFFALSE 74441
// begin for j := 1 to 4 do
74402: LD_ADDR_VAR 0 3
74406: PUSH
74407: DOUBLE
74408: LD_INT 1
74410: DEC
74411: ST_TO_ADDR
74412: LD_INT 4
74414: PUSH
74415: FOR_TO
74416: IFFALSE 74437
// SetSkill ( i , j , 10 ) ;
74418: LD_VAR 0 2
74422: PPUSH
74423: LD_VAR 0 3
74427: PPUSH
74428: LD_INT 10
74430: PPUSH
74431: CALL_OW 237
74435: GO 74415
74437: POP
74438: POP
// end ;
74439: GO 74399
74441: POP
74442: POP
// end ;
74443: LD_VAR 0 1
74447: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74448: LD_INT 0
74450: PPUSH
// uc_side := your_side ;
74451: LD_ADDR_OWVAR 20
74455: PUSH
74456: LD_OWVAR 2
74460: ST_TO_ADDR
// uc_nation := nation ;
74461: LD_ADDR_OWVAR 21
74465: PUSH
74466: LD_VAR 0 1
74470: ST_TO_ADDR
// InitHc ;
74471: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74475: LD_INT 0
74477: PPUSH
74478: LD_VAR 0 2
74482: PPUSH
74483: LD_VAR 0 3
74487: PPUSH
74488: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74492: LD_VAR 0 4
74496: PPUSH
74497: LD_VAR 0 5
74501: PPUSH
74502: CALL_OW 428
74506: PUSH
74507: LD_INT 0
74509: EQUAL
74510: IFFALSE 74534
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74512: CALL_OW 44
74516: PPUSH
74517: LD_VAR 0 4
74521: PPUSH
74522: LD_VAR 0 5
74526: PPUSH
74527: LD_INT 1
74529: PPUSH
74530: CALL_OW 48
// end ;
74534: LD_VAR 0 6
74538: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74539: LD_INT 0
74541: PPUSH
74542: PPUSH
// uc_side := your_side ;
74543: LD_ADDR_OWVAR 20
74547: PUSH
74548: LD_OWVAR 2
74552: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74553: LD_VAR 0 1
74557: PUSH
74558: LD_INT 1
74560: PUSH
74561: LD_INT 2
74563: PUSH
74564: LD_INT 3
74566: PUSH
74567: LD_INT 4
74569: PUSH
74570: LD_INT 5
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: IN
74580: IFFALSE 74592
// uc_nation := nation_american else
74582: LD_ADDR_OWVAR 21
74586: PUSH
74587: LD_INT 1
74589: ST_TO_ADDR
74590: GO 74635
// if chassis in [ 11 , 12 , 13 , 14 ] then
74592: LD_VAR 0 1
74596: PUSH
74597: LD_INT 11
74599: PUSH
74600: LD_INT 12
74602: PUSH
74603: LD_INT 13
74605: PUSH
74606: LD_INT 14
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: IN
74615: IFFALSE 74627
// uc_nation := nation_arabian else
74617: LD_ADDR_OWVAR 21
74621: PUSH
74622: LD_INT 2
74624: ST_TO_ADDR
74625: GO 74635
// uc_nation := nation_russian ;
74627: LD_ADDR_OWVAR 21
74631: PUSH
74632: LD_INT 3
74634: ST_TO_ADDR
// vc_chassis := chassis ;
74635: LD_ADDR_OWVAR 37
74639: PUSH
74640: LD_VAR 0 1
74644: ST_TO_ADDR
// vc_engine := engine ;
74645: LD_ADDR_OWVAR 39
74649: PUSH
74650: LD_VAR 0 2
74654: ST_TO_ADDR
// vc_control := control ;
74655: LD_ADDR_OWVAR 38
74659: PUSH
74660: LD_VAR 0 3
74664: ST_TO_ADDR
// vc_weapon := weapon ;
74665: LD_ADDR_OWVAR 40
74669: PUSH
74670: LD_VAR 0 4
74674: ST_TO_ADDR
// un := CreateVehicle ;
74675: LD_ADDR_VAR 0 8
74679: PUSH
74680: CALL_OW 45
74684: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74685: LD_VAR 0 8
74689: PPUSH
74690: LD_INT 0
74692: PPUSH
74693: LD_INT 5
74695: PPUSH
74696: CALL_OW 12
74700: PPUSH
74701: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74705: LD_VAR 0 8
74709: PPUSH
74710: LD_VAR 0 5
74714: PPUSH
74715: LD_VAR 0 6
74719: PPUSH
74720: LD_INT 1
74722: PPUSH
74723: CALL_OW 48
// end ;
74727: LD_VAR 0 7
74731: RET
// export hInvincible ; every 1 do
74732: GO 74734
74734: DISABLE
// hInvincible := [ ] ;
74735: LD_ADDR_EXP 100
74739: PUSH
74740: EMPTY
74741: ST_TO_ADDR
74742: END
// every 10 do var i ;
74743: GO 74745
74745: DISABLE
74746: LD_INT 0
74748: PPUSH
// begin enable ;
74749: ENABLE
// if not hInvincible then
74750: LD_EXP 100
74754: NOT
74755: IFFALSE 74759
// exit ;
74757: GO 74803
// for i in hInvincible do
74759: LD_ADDR_VAR 0 1
74763: PUSH
74764: LD_EXP 100
74768: PUSH
74769: FOR_IN
74770: IFFALSE 74801
// if GetLives ( i ) < 1000 then
74772: LD_VAR 0 1
74776: PPUSH
74777: CALL_OW 256
74781: PUSH
74782: LD_INT 1000
74784: LESS
74785: IFFALSE 74799
// SetLives ( i , 1000 ) ;
74787: LD_VAR 0 1
74791: PPUSH
74792: LD_INT 1000
74794: PPUSH
74795: CALL_OW 234
74799: GO 74769
74801: POP
74802: POP
// end ;
74803: PPOPN 1
74805: END
// export function hHackInvincible ; var i ; begin
74806: LD_INT 0
74808: PPUSH
74809: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74810: LD_ADDR_VAR 0 2
74814: PUSH
74815: LD_INT 2
74817: PUSH
74818: LD_INT 21
74820: PUSH
74821: LD_INT 1
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 21
74830: PUSH
74831: LD_INT 2
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: LIST
74842: PPUSH
74843: CALL_OW 69
74847: PUSH
74848: FOR_IN
74849: IFFALSE 74910
// if IsSelected ( i ) then
74851: LD_VAR 0 2
74855: PPUSH
74856: CALL_OW 306
74860: IFFALSE 74908
// begin if i in hInvincible then
74862: LD_VAR 0 2
74866: PUSH
74867: LD_EXP 100
74871: IN
74872: IFFALSE 74892
// hInvincible := hInvincible diff i else
74874: LD_ADDR_EXP 100
74878: PUSH
74879: LD_EXP 100
74883: PUSH
74884: LD_VAR 0 2
74888: DIFF
74889: ST_TO_ADDR
74890: GO 74908
// hInvincible := hInvincible union i ;
74892: LD_ADDR_EXP 100
74896: PUSH
74897: LD_EXP 100
74901: PUSH
74902: LD_VAR 0 2
74906: UNION
74907: ST_TO_ADDR
// end ;
74908: GO 74848
74910: POP
74911: POP
// end ;
74912: LD_VAR 0 1
74916: RET
// export function hHackInvisible ; var i , j ; begin
74917: LD_INT 0
74919: PPUSH
74920: PPUSH
74921: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74922: LD_ADDR_VAR 0 2
74926: PUSH
74927: LD_INT 21
74929: PUSH
74930: LD_INT 1
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PPUSH
74937: CALL_OW 69
74941: PUSH
74942: FOR_IN
74943: IFFALSE 74967
// if IsSelected ( i ) then
74945: LD_VAR 0 2
74949: PPUSH
74950: CALL_OW 306
74954: IFFALSE 74965
// ComForceInvisible ( i ) ;
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 496
74965: GO 74942
74967: POP
74968: POP
// end ;
74969: LD_VAR 0 1
74973: RET
// export function hHackChangeYourSide ; begin
74974: LD_INT 0
74976: PPUSH
// if your_side = 8 then
74977: LD_OWVAR 2
74981: PUSH
74982: LD_INT 8
74984: EQUAL
74985: IFFALSE 74997
// your_side := 0 else
74987: LD_ADDR_OWVAR 2
74991: PUSH
74992: LD_INT 0
74994: ST_TO_ADDR
74995: GO 75011
// your_side := your_side + 1 ;
74997: LD_ADDR_OWVAR 2
75001: PUSH
75002: LD_OWVAR 2
75006: PUSH
75007: LD_INT 1
75009: PLUS
75010: ST_TO_ADDR
// end ;
75011: LD_VAR 0 1
75015: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75016: LD_INT 0
75018: PPUSH
75019: PPUSH
75020: PPUSH
// for i in all_units do
75021: LD_ADDR_VAR 0 2
75025: PUSH
75026: LD_OWVAR 3
75030: PUSH
75031: FOR_IN
75032: IFFALSE 75110
// if IsSelected ( i ) then
75034: LD_VAR 0 2
75038: PPUSH
75039: CALL_OW 306
75043: IFFALSE 75108
// begin j := GetSide ( i ) ;
75045: LD_ADDR_VAR 0 3
75049: PUSH
75050: LD_VAR 0 2
75054: PPUSH
75055: CALL_OW 255
75059: ST_TO_ADDR
// if j = 8 then
75060: LD_VAR 0 3
75064: PUSH
75065: LD_INT 8
75067: EQUAL
75068: IFFALSE 75080
// j := 0 else
75070: LD_ADDR_VAR 0 3
75074: PUSH
75075: LD_INT 0
75077: ST_TO_ADDR
75078: GO 75094
// j := j + 1 ;
75080: LD_ADDR_VAR 0 3
75084: PUSH
75085: LD_VAR 0 3
75089: PUSH
75090: LD_INT 1
75092: PLUS
75093: ST_TO_ADDR
// SetSide ( i , j ) ;
75094: LD_VAR 0 2
75098: PPUSH
75099: LD_VAR 0 3
75103: PPUSH
75104: CALL_OW 235
// end ;
75108: GO 75031
75110: POP
75111: POP
// end ;
75112: LD_VAR 0 1
75116: RET
// export function hHackFog ; begin
75117: LD_INT 0
75119: PPUSH
// FogOff ( true ) ;
75120: LD_INT 1
75122: PPUSH
75123: CALL_OW 344
// end ;
75127: LD_VAR 0 1
75131: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75132: LD_INT 0
75134: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75135: LD_VAR 0 1
75139: PPUSH
75140: LD_VAR 0 2
75144: PPUSH
75145: LD_VAR 0 3
75149: PPUSH
75150: LD_INT 1
75152: PPUSH
75153: LD_INT 1
75155: PPUSH
75156: CALL_OW 483
// CenterOnXY ( x , y ) ;
75160: LD_VAR 0 2
75164: PPUSH
75165: LD_VAR 0 3
75169: PPUSH
75170: CALL_OW 84
// end ;
75174: LD_VAR 0 4
75178: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75179: LD_INT 0
75181: PPUSH
75182: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75183: LD_VAR 0 1
75187: NOT
75188: PUSH
75189: LD_VAR 0 2
75193: PPUSH
75194: LD_VAR 0 3
75198: PPUSH
75199: CALL_OW 488
75203: NOT
75204: OR
75205: PUSH
75206: LD_VAR 0 1
75210: PPUSH
75211: CALL_OW 266
75215: PUSH
75216: LD_INT 3
75218: NONEQUAL
75219: PUSH
75220: LD_VAR 0 1
75224: PPUSH
75225: CALL_OW 247
75229: PUSH
75230: LD_INT 1
75232: EQUAL
75233: NOT
75234: AND
75235: OR
75236: IFFALSE 75240
// exit ;
75238: GO 75389
// if GetType ( factory ) = unit_human then
75240: LD_VAR 0 1
75244: PPUSH
75245: CALL_OW 247
75249: PUSH
75250: LD_INT 1
75252: EQUAL
75253: IFFALSE 75270
// factory := IsInUnit ( factory ) ;
75255: LD_ADDR_VAR 0 1
75259: PUSH
75260: LD_VAR 0 1
75264: PPUSH
75265: CALL_OW 310
75269: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 266
75279: PUSH
75280: LD_INT 3
75282: NONEQUAL
75283: IFFALSE 75287
// exit ;
75285: GO 75389
// if HexInfo ( x , y ) = factory then
75287: LD_VAR 0 2
75291: PPUSH
75292: LD_VAR 0 3
75296: PPUSH
75297: CALL_OW 428
75301: PUSH
75302: LD_VAR 0 1
75306: EQUAL
75307: IFFALSE 75334
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75309: LD_ADDR_EXP 101
75313: PUSH
75314: LD_EXP 101
75318: PPUSH
75319: LD_VAR 0 1
75323: PPUSH
75324: LD_INT 0
75326: PPUSH
75327: CALL_OW 1
75331: ST_TO_ADDR
75332: GO 75385
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75334: LD_ADDR_EXP 101
75338: PUSH
75339: LD_EXP 101
75343: PPUSH
75344: LD_VAR 0 1
75348: PPUSH
75349: LD_VAR 0 1
75353: PPUSH
75354: CALL_OW 255
75358: PUSH
75359: LD_VAR 0 1
75363: PUSH
75364: LD_VAR 0 2
75368: PUSH
75369: LD_VAR 0 3
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: PPUSH
75380: CALL_OW 1
75384: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75385: CALL 75394 0 0
// end ;
75389: LD_VAR 0 4
75393: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75394: LD_INT 0
75396: PPUSH
75397: PPUSH
75398: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75399: LD_STRING resetFactoryWaypoint();
75401: PPUSH
75402: CALL_OW 559
// if factoryWaypoints then
75406: LD_EXP 101
75410: IFFALSE 75536
// begin list := PrepareArray ( factoryWaypoints ) ;
75412: LD_ADDR_VAR 0 3
75416: PUSH
75417: LD_EXP 101
75421: PPUSH
75422: CALL 56338 0 1
75426: ST_TO_ADDR
// for i := 1 to list do
75427: LD_ADDR_VAR 0 2
75431: PUSH
75432: DOUBLE
75433: LD_INT 1
75435: DEC
75436: ST_TO_ADDR
75437: LD_VAR 0 3
75441: PUSH
75442: FOR_TO
75443: IFFALSE 75534
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75445: LD_STRING setFactoryWaypointXY(
75447: PUSH
75448: LD_VAR 0 3
75452: PUSH
75453: LD_VAR 0 2
75457: ARRAY
75458: PUSH
75459: LD_INT 1
75461: ARRAY
75462: STR
75463: PUSH
75464: LD_STRING ,
75466: STR
75467: PUSH
75468: LD_VAR 0 3
75472: PUSH
75473: LD_VAR 0 2
75477: ARRAY
75478: PUSH
75479: LD_INT 2
75481: ARRAY
75482: STR
75483: PUSH
75484: LD_STRING ,
75486: STR
75487: PUSH
75488: LD_VAR 0 3
75492: PUSH
75493: LD_VAR 0 2
75497: ARRAY
75498: PUSH
75499: LD_INT 3
75501: ARRAY
75502: STR
75503: PUSH
75504: LD_STRING ,
75506: STR
75507: PUSH
75508: LD_VAR 0 3
75512: PUSH
75513: LD_VAR 0 2
75517: ARRAY
75518: PUSH
75519: LD_INT 4
75521: ARRAY
75522: STR
75523: PUSH
75524: LD_STRING )
75526: STR
75527: PPUSH
75528: CALL_OW 559
75532: GO 75442
75534: POP
75535: POP
// end ; end ;
75536: LD_VAR 0 1
75540: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75541: LD_INT 0
75543: PPUSH
// if HexInfo ( x , y ) = warehouse then
75544: LD_VAR 0 2
75548: PPUSH
75549: LD_VAR 0 3
75553: PPUSH
75554: CALL_OW 428
75558: PUSH
75559: LD_VAR 0 1
75563: EQUAL
75564: IFFALSE 75591
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75566: LD_ADDR_EXP 102
75570: PUSH
75571: LD_EXP 102
75575: PPUSH
75576: LD_VAR 0 1
75580: PPUSH
75581: LD_INT 0
75583: PPUSH
75584: CALL_OW 1
75588: ST_TO_ADDR
75589: GO 75642
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75591: LD_ADDR_EXP 102
75595: PUSH
75596: LD_EXP 102
75600: PPUSH
75601: LD_VAR 0 1
75605: PPUSH
75606: LD_VAR 0 1
75610: PPUSH
75611: CALL_OW 255
75615: PUSH
75616: LD_VAR 0 1
75620: PUSH
75621: LD_VAR 0 2
75625: PUSH
75626: LD_VAR 0 3
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: PPUSH
75637: CALL_OW 1
75641: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75642: CALL 75651 0 0
// end ;
75646: LD_VAR 0 4
75650: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75651: LD_INT 0
75653: PPUSH
75654: PPUSH
75655: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75656: LD_STRING resetWarehouseGatheringPoints();
75658: PPUSH
75659: CALL_OW 559
// if warehouseGatheringPoints then
75663: LD_EXP 102
75667: IFFALSE 75793
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75669: LD_ADDR_VAR 0 3
75673: PUSH
75674: LD_EXP 102
75678: PPUSH
75679: CALL 56338 0 1
75683: ST_TO_ADDR
// for i := 1 to list do
75684: LD_ADDR_VAR 0 2
75688: PUSH
75689: DOUBLE
75690: LD_INT 1
75692: DEC
75693: ST_TO_ADDR
75694: LD_VAR 0 3
75698: PUSH
75699: FOR_TO
75700: IFFALSE 75791
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75702: LD_STRING setWarehouseGatheringPointXY(
75704: PUSH
75705: LD_VAR 0 3
75709: PUSH
75710: LD_VAR 0 2
75714: ARRAY
75715: PUSH
75716: LD_INT 1
75718: ARRAY
75719: STR
75720: PUSH
75721: LD_STRING ,
75723: STR
75724: PUSH
75725: LD_VAR 0 3
75729: PUSH
75730: LD_VAR 0 2
75734: ARRAY
75735: PUSH
75736: LD_INT 2
75738: ARRAY
75739: STR
75740: PUSH
75741: LD_STRING ,
75743: STR
75744: PUSH
75745: LD_VAR 0 3
75749: PUSH
75750: LD_VAR 0 2
75754: ARRAY
75755: PUSH
75756: LD_INT 3
75758: ARRAY
75759: STR
75760: PUSH
75761: LD_STRING ,
75763: STR
75764: PUSH
75765: LD_VAR 0 3
75769: PUSH
75770: LD_VAR 0 2
75774: ARRAY
75775: PUSH
75776: LD_INT 4
75778: ARRAY
75779: STR
75780: PUSH
75781: LD_STRING )
75783: STR
75784: PPUSH
75785: CALL_OW 559
75789: GO 75699
75791: POP
75792: POP
// end ; end ;
75793: LD_VAR 0 1
75797: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
75798: LD_EXP 102
75802: IFFALSE 76487
75804: GO 75806
75806: DISABLE
75807: LD_INT 0
75809: PPUSH
75810: PPUSH
75811: PPUSH
75812: PPUSH
75813: PPUSH
75814: PPUSH
75815: PPUSH
75816: PPUSH
75817: PPUSH
// begin enable ;
75818: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: LD_EXP 102
75828: PPUSH
75829: CALL 56338 0 1
75833: ST_TO_ADDR
// if not list then
75834: LD_VAR 0 3
75838: NOT
75839: IFFALSE 75843
// exit ;
75841: GO 76487
// for i := 1 to list do
75843: LD_ADDR_VAR 0 1
75847: PUSH
75848: DOUBLE
75849: LD_INT 1
75851: DEC
75852: ST_TO_ADDR
75853: LD_VAR 0 3
75857: PUSH
75858: FOR_TO
75859: IFFALSE 76485
// begin depot := list [ i ] [ 2 ] ;
75861: LD_ADDR_VAR 0 8
75865: PUSH
75866: LD_VAR 0 3
75870: PUSH
75871: LD_VAR 0 1
75875: ARRAY
75876: PUSH
75877: LD_INT 2
75879: ARRAY
75880: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
75881: LD_ADDR_VAR 0 5
75885: PUSH
75886: LD_VAR 0 3
75890: PUSH
75891: LD_VAR 0 1
75895: ARRAY
75896: PUSH
75897: LD_INT 1
75899: ARRAY
75900: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
75901: LD_VAR 0 8
75905: PPUSH
75906: CALL_OW 301
75910: PUSH
75911: LD_VAR 0 5
75915: PUSH
75916: LD_VAR 0 8
75920: PPUSH
75921: CALL_OW 255
75925: NONEQUAL
75926: OR
75927: IFFALSE 75956
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
75929: LD_ADDR_EXP 102
75933: PUSH
75934: LD_EXP 102
75938: PPUSH
75939: LD_VAR 0 8
75943: PPUSH
75944: LD_INT 0
75946: PPUSH
75947: CALL_OW 1
75951: ST_TO_ADDR
// exit ;
75952: POP
75953: POP
75954: GO 76487
// end ; x := list [ i ] [ 3 ] ;
75956: LD_ADDR_VAR 0 6
75960: PUSH
75961: LD_VAR 0 3
75965: PUSH
75966: LD_VAR 0 1
75970: ARRAY
75971: PUSH
75972: LD_INT 3
75974: ARRAY
75975: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
75976: LD_ADDR_VAR 0 7
75980: PUSH
75981: LD_VAR 0 3
75985: PUSH
75986: LD_VAR 0 1
75990: ARRAY
75991: PUSH
75992: LD_INT 4
75994: ARRAY
75995: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
75996: LD_ADDR_VAR 0 9
76000: PUSH
76001: LD_VAR 0 6
76005: PPUSH
76006: LD_VAR 0 7
76010: PPUSH
76011: LD_INT 16
76013: PPUSH
76014: CALL 54926 0 3
76018: ST_TO_ADDR
// if not cratesNearbyPoint then
76019: LD_VAR 0 9
76023: NOT
76024: IFFALSE 76030
// exit ;
76026: POP
76027: POP
76028: GO 76487
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76030: LD_ADDR_VAR 0 4
76034: PUSH
76035: LD_INT 22
76037: PUSH
76038: LD_VAR 0 5
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PUSH
76047: LD_INT 3
76049: PUSH
76050: LD_INT 60
76052: PUSH
76053: EMPTY
76054: LIST
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: LD_INT 91
76062: PUSH
76063: LD_VAR 0 8
76067: PUSH
76068: LD_INT 6
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 2
76078: PUSH
76079: LD_INT 25
76081: PUSH
76082: LD_INT 2
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PUSH
76089: LD_INT 25
76091: PUSH
76092: LD_INT 16
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: LIST
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: PPUSH
76110: CALL_OW 69
76114: PUSH
76115: LD_VAR 0 8
76119: PPUSH
76120: CALL_OW 313
76124: PPUSH
76125: LD_INT 3
76127: PUSH
76128: LD_INT 60
76130: PUSH
76131: EMPTY
76132: LIST
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: PUSH
76138: LD_INT 2
76140: PUSH
76141: LD_INT 25
76143: PUSH
76144: LD_INT 2
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 25
76153: PUSH
76154: LD_INT 16
76156: PUSH
76157: EMPTY
76158: LIST
76159: LIST
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: LIST
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PPUSH
76170: CALL_OW 72
76174: UNION
76175: ST_TO_ADDR
// if tmp then
76176: LD_VAR 0 4
76180: IFFALSE 76260
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76182: LD_ADDR_VAR 0 4
76186: PUSH
76187: LD_VAR 0 4
76191: PPUSH
76192: LD_INT 3
76194: PPUSH
76195: CALL 52895 0 2
76199: ST_TO_ADDR
// for j in tmp do
76200: LD_ADDR_VAR 0 2
76204: PUSH
76205: LD_VAR 0 4
76209: PUSH
76210: FOR_IN
76211: IFFALSE 76254
// begin if IsInUnit ( j ) then
76213: LD_VAR 0 2
76217: PPUSH
76218: CALL_OW 310
76222: IFFALSE 76233
// ComExit ( j ) ;
76224: LD_VAR 0 2
76228: PPUSH
76229: CALL 52978 0 1
// AddComCollect ( j , x , y ) ;
76233: LD_VAR 0 2
76237: PPUSH
76238: LD_VAR 0 6
76242: PPUSH
76243: LD_VAR 0 7
76247: PPUSH
76248: CALL_OW 177
// end ;
76252: GO 76210
76254: POP
76255: POP
// exit ;
76256: POP
76257: POP
76258: GO 76487
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76260: LD_ADDR_VAR 0 4
76264: PUSH
76265: LD_INT 22
76267: PUSH
76268: LD_VAR 0 5
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: LD_INT 91
76279: PUSH
76280: LD_VAR 0 8
76284: PUSH
76285: LD_INT 8
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: PUSH
76293: LD_INT 2
76295: PUSH
76296: LD_INT 34
76298: PUSH
76299: LD_INT 12
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 34
76308: PUSH
76309: LD_INT 51
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: PUSH
76316: LD_INT 34
76318: PUSH
76319: LD_INT 32
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PUSH
76326: LD_INT 34
76328: PUSH
76329: LD_INT 89
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: PUSH
76343: EMPTY
76344: LIST
76345: LIST
76346: LIST
76347: PPUSH
76348: CALL_OW 69
76352: ST_TO_ADDR
// if tmp then
76353: LD_VAR 0 4
76357: IFFALSE 76483
// begin for j in tmp do
76359: LD_ADDR_VAR 0 2
76363: PUSH
76364: LD_VAR 0 4
76368: PUSH
76369: FOR_IN
76370: IFFALSE 76481
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76372: LD_VAR 0 2
76376: PPUSH
76377: CALL_OW 262
76381: PUSH
76382: LD_INT 3
76384: EQUAL
76385: PUSH
76386: LD_VAR 0 2
76390: PPUSH
76391: CALL_OW 261
76395: PUSH
76396: LD_INT 20
76398: GREATER
76399: OR
76400: PUSH
76401: LD_VAR 0 2
76405: PPUSH
76406: CALL_OW 314
76410: NOT
76411: AND
76412: PUSH
76413: LD_VAR 0 2
76417: PPUSH
76418: CALL_OW 263
76422: PUSH
76423: LD_INT 1
76425: NONEQUAL
76426: PUSH
76427: LD_VAR 0 2
76431: PPUSH
76432: CALL_OW 311
76436: OR
76437: AND
76438: IFFALSE 76479
// begin ComCollect ( j , x , y ) ;
76440: LD_VAR 0 2
76444: PPUSH
76445: LD_VAR 0 6
76449: PPUSH
76450: LD_VAR 0 7
76454: PPUSH
76455: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76459: LD_VAR 0 2
76463: PPUSH
76464: LD_VAR 0 8
76468: PPUSH
76469: CALL_OW 172
// exit ;
76473: POP
76474: POP
76475: POP
76476: POP
76477: GO 76487
// end ;
76479: GO 76369
76481: POP
76482: POP
// end ; end ;
76483: GO 75858
76485: POP
76486: POP
// end ; end_of_file
76487: PPOPN 9
76489: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76490: LD_VAR 0 1
76494: PPUSH
76495: LD_VAR 0 2
76499: PPUSH
76500: LD_VAR 0 3
76504: PPUSH
76505: LD_VAR 0 4
76509: PPUSH
76510: LD_VAR 0 5
76514: PPUSH
76515: LD_VAR 0 6
76519: PPUSH
76520: CALL 60892 0 6
// end ;
76524: PPOPN 6
76526: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76527: LD_INT 0
76529: PPUSH
// begin if not units then
76530: LD_VAR 0 1
76534: NOT
76535: IFFALSE 76539
// exit ;
76537: GO 76539
// end ;
76539: PPOPN 7
76541: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76542: CALL 60863 0 0
// end ; end_of_file
76546: PPOPN 1
76548: END
