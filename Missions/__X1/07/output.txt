// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 70325 0 0
// Init ;
   8: CALL 58 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 443 0 3
// PrepareAmerican ;
  32: CALL 2519 0 0
// PrepareArabian ;
  36: CALL 1237 0 0
// Action ;
  40: CALL 6636 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 06_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 06_
  76: ST_TO_ADDR
// scoutActive := 0 ;
  77: LD_ADDR_EXP 3
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// scoutFailed := false ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutSuccess := false ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// usAttacksAllowed := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usSurrender := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// russianAttack := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasRockets := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// end ; end_of_file
 133: LD_VAR 0 1
 137: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 138: LD_INT 0
 140: PPUSH
// uc_side := side ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_VAR 0 1
 150: ST_TO_ADDR
// uc_nation := nation ;
 151: LD_ADDR_OWVAR 21
 155: PUSH
 156: LD_VAR 0 2
 160: ST_TO_ADDR
// vc_chassis := chassis ;
 161: LD_ADDR_OWVAR 37
 165: PUSH
 166: LD_VAR 0 3
 170: ST_TO_ADDR
// vc_engine := engine ;
 171: LD_ADDR_OWVAR 39
 175: PUSH
 176: LD_VAR 0 4
 180: ST_TO_ADDR
// vc_control := control ;
 181: LD_ADDR_OWVAR 38
 185: PUSH
 186: LD_VAR 0 5
 190: ST_TO_ADDR
// vc_weapon := weapon ;
 191: LD_ADDR_OWVAR 40
 195: PUSH
 196: LD_VAR 0 6
 200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 201: LD_ADDR_OWVAR 41
 205: PUSH
 206: LD_VAR 0 7
 210: ST_TO_ADDR
// result := CreateVehicle ;
 211: LD_ADDR_VAR 0 8
 215: PUSH
 216: CALL_OW 45
 220: ST_TO_ADDR
// end ;
 221: LD_VAR 0 8
 225: RET
// export function SayX ( units , ident ) ; var i ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
// result := false ;
 230: LD_ADDR_VAR 0 3
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// if not units then
 238: LD_VAR 0 1
 242: NOT
 243: IFFALSE 247
// exit ;
 245: GO 301
// for i in units do
 247: LD_ADDR_VAR 0 4
 251: PUSH
 252: LD_VAR 0 1
 256: PUSH
 257: FOR_IN
 258: IFFALSE 299
// if IsOk ( i ) then
 260: LD_VAR 0 4
 264: PPUSH
 265: CALL_OW 302
 269: IFFALSE 297
// begin Say ( i , ident ) ;
 271: LD_VAR 0 4
 275: PPUSH
 276: LD_VAR 0 2
 280: PPUSH
 281: CALL_OW 88
// result := i ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: LD_VAR 0 4
 294: ST_TO_ADDR
// break ;
 295: GO 299
// end ;
 297: GO 257
 299: POP
 300: POP
// end ;
 301: LD_VAR 0 3
 305: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 306: LD_INT 0
 308: PPUSH
 309: PPUSH
// InitUc ;
 310: CALL_OW 18
// InitHc ;
 314: CALL_OW 19
// uc_side := 0 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// uc_nation := 0 ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_INT 0
 333: ST_TO_ADDR
// for i = 1 to amount do
 334: LD_ADDR_VAR 0 4
 338: PUSH
 339: DOUBLE
 340: LD_INT 1
 342: DEC
 343: ST_TO_ADDR
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_TO
 350: IFFALSE 432
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 352: LD_ADDR_OWVAR 29
 356: PUSH
 357: LD_INT 9
 359: PPUSH
 360: LD_INT 12
 362: PPUSH
 363: CALL_OW 12
 367: PUSH
 368: LD_INT 9
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 12
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 383: LD_ADDR_OWVAR 35
 387: PUSH
 388: LD_INT 1
 390: NEG
 391: PPUSH
 392: LD_INT 1
 394: PPUSH
 395: CALL_OW 12
 399: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 400: LD_INT 0
 402: PPUSH
 403: LD_INT 12
 405: PPUSH
 406: LD_INT 1
 408: PPUSH
 409: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 413: CALL_OW 44
 417: PPUSH
 418: LD_VAR 0 1
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 49
// end ;
 430: GO 349
 432: POP
 433: POP
// InitHc ;
 434: CALL_OW 19
// end ;
 438: LD_VAR 0 3
 442: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 443: LD_INT 0
 445: PPUSH
 446: PPUSH
// uc_side := 0 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 0
 454: ST_TO_ADDR
// uc_nation := 0 ;
 455: LD_ADDR_OWVAR 21
 459: PUSH
 460: LD_INT 0
 462: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 ] [ Difficulty ] ) ;
 463: LD_VAR 0 1
 467: PPUSH
 468: LD_INT 9
 470: PUSH
 471: LD_INT 8
 473: PUSH
 474: LD_INT 7
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PPUSH
 488: CALL 306 0 2
// for i := 1 to 4 do
 492: LD_ADDR_VAR 0 5
 496: PUSH
 497: DOUBLE
 498: LD_INT 1
 500: DEC
 501: ST_TO_ADDR
 502: LD_INT 4
 504: PUSH
 505: FOR_TO
 506: IFFALSE 545
// begin hc_class := class_horse ;
 508: LD_ADDR_OWVAR 28
 512: PUSH
 513: LD_EXP 114
 517: ST_TO_ADDR
// hc_gallery :=  ;
 518: LD_ADDR_OWVAR 33
 522: PUSH
 523: LD_STRING 
 525: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 526: CALL_OW 44
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 505
 545: POP
 546: POP
// for i = 1 to 5 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 5
 559: PUSH
 560: FOR_TO
 561: IFFALSE 615
// begin hc_class = class_tiger ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 14
 570: ST_TO_ADDR
// hc_gallery =  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 579: LD_ADDR_OWVAR 35
 583: PUSH
 584: LD_INT 7
 586: NEG
 587: PPUSH
 588: LD_INT 7
 590: PPUSH
 591: CALL_OW 12
 595: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 596: CALL_OW 44
 600: PPUSH
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL 49053 0 3
// end ;
 613: GO 560
 615: POP
 616: POP
// for i := 1 to 4 do
 617: LD_ADDR_VAR 0 5
 621: PUSH
 622: DOUBLE
 623: LD_INT 1
 625: DEC
 626: ST_TO_ADDR
 627: LD_INT 4
 629: PUSH
 630: FOR_TO
 631: IFFALSE 668
// begin hc_class := class_phororhacos ;
 633: LD_ADDR_OWVAR 28
 637: PUSH
 638: LD_INT 18
 640: ST_TO_ADDR
// hc_gallery :=  ;
 641: LD_ADDR_OWVAR 33
 645: PUSH
 646: LD_STRING 
 648: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 649: CALL_OW 44
 653: PPUSH
 654: LD_VAR 0 2
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// end ;
 666: GO 630
 668: POP
 669: POP
// for i := 1 to 4 do
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: DOUBLE
 676: LD_INT 1
 678: DEC
 679: ST_TO_ADDR
 680: LD_INT 4
 682: PUSH
 683: FOR_TO
 684: IFFALSE 721
// begin hc_class := class_baggie ;
 686: LD_ADDR_OWVAR 28
 690: PUSH
 691: LD_INT 13
 693: ST_TO_ADDR
// hc_gallery :=  ;
 694: LD_ADDR_OWVAR 33
 698: PUSH
 699: LD_STRING 
 701: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 683
 721: POP
 722: POP
// for i := 1 to 5 do
 723: LD_ADDR_VAR 0 5
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 5
 735: PUSH
 736: FOR_TO
 737: IFFALSE 774
// begin hc_class := class_fish ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 20
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_VAR 0 3
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 736
 774: POP
 775: POP
// end ;
 776: LD_VAR 0 4
 780: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
// if not observer or not unit then
 786: LD_VAR 0 1
 790: NOT
 791: PUSH
 792: LD_VAR 0 2
 796: NOT
 797: OR
 798: IFFALSE 802
// exit ;
 800: GO 850
// if not See ( GetSide ( observer ) , unit ) then
 802: LD_VAR 0 1
 806: PPUSH
 807: CALL_OW 255
 811: PPUSH
 812: LD_VAR 0 2
 816: PPUSH
 817: CALL_OW 292
 821: NOT
 822: IFFALSE 826
// exit ;
 824: GO 850
// result := GetDistUnits ( observer , unit ) < 12 ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 2
 840: PPUSH
 841: CALL_OW 296
 845: PUSH
 846: LD_INT 12
 848: LESS
 849: ST_TO_ADDR
// end ;
 850: LD_VAR 0 3
 854: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 855: LD_INT 0
 857: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 858: LD_VAR 0 2
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 2
 874: ARRAY
 875: PPUSH
 876: CALL_OW 488
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 2
 897: ARRAY
 898: PPUSH
 899: CALL_OW 428
 903: PUSH
 904: LD_INT 0
 906: EQUAL
 907: AND
 908: IFFALSE 942
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 3
 937: PPUSH
 938: CALL_OW 48
// end ;
 942: LD_VAR 0 4
 946: RET
// export function ReverseArray ( array ) ; var i ; begin
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
// if not array then
 951: LD_VAR 0 1
 955: NOT
 956: IFFALSE 960
// exit ;
 958: GO 1018
// result := [ ] ;
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: EMPTY
 966: ST_TO_ADDR
// for i := 1 to array do
 967: LD_ADDR_VAR 0 3
 971: PUSH
 972: DOUBLE
 973: LD_INT 1
 975: DEC
 976: ST_TO_ADDR
 977: LD_VAR 0 1
 981: PUSH
 982: FOR_TO
 983: IFFALSE 1016
// result := Insert ( result , 1 , array [ i ] ) ;
 985: LD_ADDR_VAR 0 2
 989: PUSH
 990: LD_VAR 0 2
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_VAR 0 1
1002: PUSH
1003: LD_VAR 0 3
1007: ARRAY
1008: PPUSH
1009: CALL_OW 2
1013: ST_TO_ADDR
1014: GO 982
1016: POP
1017: POP
// end ;
1018: LD_VAR 0 2
1022: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1023: LD_INT 0
1025: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1026: LD_VAR 0 1
1030: PPUSH
1031: LD_VAR 0 2
1035: PPUSH
1036: LD_VAR 0 3
1040: PPUSH
1041: LD_VAR 0 4
1045: PPUSH
1046: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1050: LD_VAR 0 1
1054: PPUSH
1055: LD_VAR 0 2
1059: PPUSH
1060: LD_VAR 0 3
1064: PPUSH
1065: CALL_OW 331
// end ;
1069: LD_VAR 0 5
1073: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1074: LD_INT 0
1076: PPUSH
// if not units then
1077: LD_VAR 0 1
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1169
// result := true ;
1086: LD_ADDR_VAR 0 4
1090: PUSH
1091: LD_INT 1
1093: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1094: LD_VAR 0 1
1098: PPUSH
1099: LD_INT 26
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PPUSH
1109: CALL_OW 72
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PPUSH
1123: CALL_OW 88
1127: NOT
1128: IFFALSE 1169
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 26
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PPUSH
1150: CALL_OW 72
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 88
1168: ST_TO_ADDR
// end ;
1169: LD_VAR 0 4
1173: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1174: LD_INT 0
1176: PPUSH
1177: PPUSH
// if not group then
1178: LD_VAR 0 2
1182: NOT
1183: IFFALSE 1187
// exit ;
1185: GO 1232
// for i in group do
1187: LD_ADDR_VAR 0 4
1191: PUSH
1192: LD_VAR 0 2
1196: PUSH
1197: FOR_IN
1198: IFFALSE 1230
// if See ( side , i ) then
1200: LD_VAR 0 1
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 292
1214: IFFALSE 1228
// begin result := true ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// exit ;
1224: POP
1225: POP
1226: GO 1232
// end ;
1228: GO 1197
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 3
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// uc_side := 5 ;
1250: LD_ADDR_OWVAR 20
1254: PUSH
1255: LD_INT 5
1257: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1258: LD_ADDR_EXP 18
1262: PUSH
1263: LD_STRING Abdul
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: LD_STRING 
1271: PPUSH
1272: CALL 13402 0 3
1276: ST_TO_ADDR
// uc_side := 2 ;
1277: LD_ADDR_OWVAR 20
1281: PUSH
1282: LD_INT 2
1284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1285: LD_ADDR_EXP 10
1289: PUSH
1290: LD_STRING Heike
1292: PPUSH
1293: LD_EXP 1
1297: NOT
1298: PPUSH
1299: LD_EXP 2
1303: PPUSH
1304: CALL 13402 0 3
1308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1309: LD_ADDR_EXP 13
1313: PUSH
1314: LD_STRING Ibrahim
1316: PPUSH
1317: LD_EXP 1
1321: NOT
1322: PPUSH
1323: LD_EXP 2
1327: PPUSH
1328: CALL 13402 0 3
1332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1333: LD_ADDR_EXP 11
1337: PUSH
1338: LD_STRING Givi
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_EXP 2
1351: PPUSH
1352: CALL 13402 0 3
1356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1357: LD_ADDR_EXP 14
1361: PUSH
1362: LD_STRING Kamil
1364: PPUSH
1365: LD_EXP 1
1369: NOT
1370: PPUSH
1371: LD_EXP 2
1375: PPUSH
1376: CALL 13402 0 3
1380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 15
1385: PUSH
1386: LD_STRING Kaia
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 13402 0 3
1404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 16
1409: PUSH
1410: LD_STRING Sophia
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 13402 0 3
1428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 17
1433: PUSH
1434: LD_STRING Markov
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 13402 0 3
1452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Aviradze
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 13402 0 3
1476: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 20
1481: PUSH
1482: LD_STRING Kurt
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 13402 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 12
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 13402 0 3
1524: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1525: LD_ADDR_EXP 19
1529: PUSH
1530: LD_STRING Olaf
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: LD_STRING 
1538: PPUSH
1539: CALL 13402 0 3
1543: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1544: LD_ADDR_EXP 22
1548: PUSH
1549: LD_STRING 06_others
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1557: LD_ADDR_EXP 23
1561: PUSH
1562: LD_STRING 06_apes
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// if debug then
1570: LD_EXP 1
1574: IFFALSE 1849
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1576: LD_ADDR_VAR 0 3
1580: PUSH
1581: LD_INT 14
1583: PUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 25
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 1000
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 31
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 1000
1628: PUSH
1629: LD_INT 0
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: LD_INT 27
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 750
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 14
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 27
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 900
1688: PUSH
1689: LD_INT 0
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 14
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 32
1712: PUSH
1713: LD_INT 2
1715: PUSH
1716: LD_INT 1000
1718: PUSH
1719: LD_INT 100
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 14
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 1
1746: PUSH
1747: LD_INT 32
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 1000
1755: PUSH
1756: LD_INT 50
1758: PUSH
1759: LD_INT 50
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: LD_INT 27
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 1000
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 14
1807: PUSH
1808: LD_INT 1
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_EXP 101
1818: PUSH
1819: LD_INT 2
1821: PUSH
1822: LD_INT 1000
1824: PUSH
1825: LD_INT 0
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// end else
1847: GO 1856
// tmp := [ ] ;
1849: LD_ADDR_VAR 0 3
1853: PUSH
1854: EMPTY
1855: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1856: LD_ADDR_EXP 24
1860: PUSH
1861: LD_STRING 06_Vehicles
1863: PPUSH
1864: LD_VAR 0 3
1868: PPUSH
1869: CALL_OW 30
1873: ST_TO_ADDR
// if heikeVehicles then
1874: LD_EXP 24
1878: IFFALSE 1973
// begin for i := heikeVehicles downto 1 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: DOUBLE
1886: LD_EXP 24
1890: INC
1891: ST_TO_ADDR
1892: LD_INT 1
1894: PUSH
1895: FOR_DOWNTO
1896: IFFALSE 1971
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1898: LD_EXP 24
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PUSH
1913: LD_INT 2
1915: EQUAL
1916: IFFALSE 1969
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1918: LD_ADDR_EXP 24
1922: PUSH
1923: LD_EXP 24
1927: PPUSH
1928: LD_EXP 24
1932: PPUSH
1933: LD_EXP 24
1937: PUSH
1938: LD_VAR 0 2
1942: ARRAY
1943: PPUSH
1944: CALL_OW 2
1948: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1949: LD_ADDR_EXP 24
1953: PUSH
1954: LD_EXP 24
1958: PPUSH
1959: LD_VAR 0 2
1963: PPUSH
1964: CALL_OW 3
1968: ST_TO_ADDR
// end ; end ;
1969: GO 1895
1971: POP
1972: POP
// end ; end ;
1973: LD_VAR 0 1
1977: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1978: LD_EXP 3
1982: IFFALSE 2516
1984: GO 1986
1986: DISABLE
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1991: LD_ADDR_VAR 0 2
1995: PUSH
1996: LD_INT 96
1998: PUSH
1999: LD_INT 50
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 49
2008: PUSH
2009: LD_INT 52
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 34
2018: PUSH
2019: LD_INT 55
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 41
2028: PUSH
2029: LD_INT 70
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 53
2038: PUSH
2039: LD_INT 96
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 103
2048: PUSH
2049: LD_INT 64
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 104
2066: PUSH
2067: LD_INT 70
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 111
2076: PUSH
2077: LD_INT 103
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: LD_INT 131
2086: PUSH
2087: LD_INT 147
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 130
2096: PUSH
2097: LD_INT 153
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 110
2106: PUSH
2107: LD_INT 93
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 103
2116: PUSH
2117: LD_INT 65
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// for i in tmp [ 1 ] do
2136: LD_ADDR_VAR 0 1
2140: PUSH
2141: LD_VAR 0 2
2145: PUSH
2146: LD_INT 1
2148: ARRAY
2149: PUSH
2150: FOR_IN
2151: IFFALSE 2203
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2153: LD_EXP 12
2157: PPUSH
2158: LD_VAR 0 1
2162: PUSH
2163: LD_INT 1
2165: ARRAY
2166: PPUSH
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 2
2174: ARRAY
2175: PPUSH
2176: CALL_OW 174
// AddComHold ( Mike ) ;
2180: LD_EXP 12
2184: PPUSH
2185: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2189: LD_EXP 12
2193: PPUSH
2194: LD_INT 175
2196: PPUSH
2197: CALL_OW 202
// end ;
2201: GO 2150
2203: POP
2204: POP
// for i in tmp [ 2 ] do
2205: LD_ADDR_VAR 0 1
2209: PUSH
2210: LD_VAR 0 2
2214: PUSH
2215: LD_INT 2
2217: ARRAY
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2272
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2222: LD_EXP 20
2226: PPUSH
2227: LD_VAR 0 1
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PPUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_INT 2
2243: ARRAY
2244: PPUSH
2245: CALL_OW 174
// AddComHold ( Kurt ) ;
2249: LD_EXP 20
2253: PPUSH
2254: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2258: LD_EXP 20
2262: PPUSH
2263: LD_INT 175
2265: PPUSH
2266: CALL_OW 202
// end ;
2270: GO 2219
2272: POP
2273: POP
// wait ( 0 0$1 ) ;
2274: LD_INT 35
2276: PPUSH
2277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2288: LD_EXP 12
2292: PPUSH
2293: CALL_OW 314
2297: NOT
2298: PUSH
2299: LD_EXP 12
2303: PPUSH
2304: CALL_OW 301
2308: OR
2309: PUSH
2310: LD_EXP 20
2314: PPUSH
2315: CALL_OW 314
2319: NOT
2320: PUSH
2321: LD_EXP 20
2325: PPUSH
2326: CALL_OW 301
2330: OR
2331: AND
2332: IFFALSE 2281
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2334: LD_EXP 20
2338: PPUSH
2339: CALL_OW 301
2343: PUSH
2344: LD_EXP 12
2348: PPUSH
2349: CALL_OW 301
2353: AND
2354: IFFALSE 2366
// begin scoutFailed := true ;
2356: LD_ADDR_EXP 4
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// exit ;
2364: GO 2516
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2366: LD_EXP 20
2370: PUSH
2371: LD_EXP 12
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: LD_INT 132
2382: PPUSH
2383: LD_INT 52
2385: PPUSH
2386: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2390: LD_EXP 20
2394: PUSH
2395: LD_EXP 12
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PPUSH
2414: CALL_OW 69
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2427: LD_INT 35
2429: PPUSH
2430: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2434: LD_INT 2
2436: PPUSH
2437: LD_EXP 20
2441: PPUSH
2442: CALL_OW 292
2446: PUSH
2447: LD_INT 2
2449: PPUSH
2450: LD_EXP 12
2454: PPUSH
2455: CALL_OW 292
2459: OR
2460: IFFALSE 2427
// if IsLive ( Kurt ) then
2462: LD_EXP 20
2466: PPUSH
2467: CALL_OW 300
2471: IFFALSE 2485
// SetSide ( Kurt , 2 ) ;
2473: LD_EXP 20
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 235
// if IsLive ( Mike ) then
2485: LD_EXP 12
2489: PPUSH
2490: CALL_OW 300
2494: IFFALSE 2508
// SetSide ( Mike , 2 ) ;
2496: LD_EXP 12
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: CALL_OW 235
// scoutSuccess := true ;
2508: LD_ADDR_EXP 5
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// end ; end_of_file
2516: PPOPN 2
2518: END
// export usCommander , usForces , usCargo , usToBuild ; export function PrepareAmerican ; var i , b , veh ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
2524: PPUSH
// uc_side := 1 ;
2525: LD_ADDR_OWVAR 20
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// uc_nation := 1 ;
2533: LD_ADDR_OWVAR 21
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2000 , 2500 , 3000 , 3500 ] [ Difficulty ] ) ;
2541: LD_INT 1
2543: PPUSH
2544: CALL_OW 274
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: LD_INT 2000
2554: PUSH
2555: LD_INT 2500
2557: PUSH
2558: LD_INT 3000
2560: PUSH
2561: LD_INT 3500
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_OWVAR 67
2574: ARRAY
2575: PPUSH
2576: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 600 ) ;
2580: LD_INT 1
2582: PPUSH
2583: CALL_OW 274
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 600
2593: PPUSH
2594: CALL_OW 277
// usForces := [ ] ;
2598: LD_ADDR_EXP 26
2602: PUSH
2603: EMPTY
2604: ST_TO_ADDR
// usToBuild := [ ] ;
2605: LD_ADDR_EXP 28
2609: PUSH
2610: EMPTY
2611: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2612: LD_ADDR_VAR 0 2
2616: PUSH
2617: LD_INT 21
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2670
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PUSH
2643: LD_INT 7
2645: PUSH
2646: LD_INT 8
2648: PUSH
2649: LD_INT 8
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_OWVAR 67
2662: ARRAY
2663: PPUSH
2664: CALL_OW 241
2668: GO 2632
2670: POP
2671: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2672: LD_ADDR_VAR 0 2
2676: PUSH
2677: LD_INT 30
2679: PUSH
2680: LD_INT 32
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: PUSH
2692: FOR_IN
2693: IFFALSE 2783
// begin if GetBWeapon ( i ) = us_radar then
2695: LD_VAR 0 2
2699: PPUSH
2700: CALL_OW 269
2704: PUSH
2705: LD_INT 11
2707: EQUAL
2708: IFFALSE 2733
// begin uc_nation := 0 ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 16
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: CALL_OW 380
// end else
2731: GO 2767
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2733: LD_INT 0
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 5
2741: PUSH
2742: LD_INT 6
2744: PUSH
2745: LD_INT 7
2747: PUSH
2748: LD_INT 8
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: PUSH
2757: LD_OWVAR 67
2761: ARRAY
2762: PPUSH
2763: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2767: CALL_OW 44
2771: PPUSH
2772: LD_VAR 0 2
2776: PPUSH
2777: CALL_OW 52
// end ;
2781: GO 2692
2783: POP
2784: POP
// b := HexInfo ( 74 , 120 ) ;
2785: LD_ADDR_VAR 0 3
2789: PUSH
2790: LD_INT 74
2792: PPUSH
2793: LD_INT 120
2795: PPUSH
2796: CALL_OW 428
2800: ST_TO_ADDR
// uc_nation := 1 ;
2801: LD_ADDR_OWVAR 21
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2809: LD_ADDR_VAR 0 2
2813: PUSH
2814: DOUBLE
2815: LD_INT 1
2817: DEC
2818: ST_TO_ADDR
2819: LD_INT 1
2821: PUSH
2822: LD_INT 2
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: PUSH
2843: FOR_TO
2844: IFFALSE 2896
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2846: LD_INT 0
2848: PPUSH
2849: LD_INT 1
2851: PPUSH
2852: LD_INT 5
2854: PUSH
2855: LD_INT 6
2857: PUSH
2858: LD_INT 7
2860: PUSH
2861: LD_INT 8
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: PUSH
2870: LD_OWVAR 67
2874: ARRAY
2875: PPUSH
2876: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2880: CALL_OW 44
2884: PPUSH
2885: LD_VAR 0 3
2889: PPUSH
2890: CALL_OW 52
// end ;
2894: GO 2843
2896: POP
2897: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2898: LD_VAR 0 3
2902: PPUSH
2903: CALL_OW 313
2907: PPUSH
2908: LD_INT 5
2910: PPUSH
2911: CALL_OW 336
// for i := 1 to 6 do
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: DOUBLE
2921: LD_INT 1
2923: DEC
2924: ST_TO_ADDR
2925: LD_INT 6
2927: PUSH
2928: FOR_TO
2929: IFFALSE 2979
// begin PrepareHuman ( false , 4 , 6 ) ;
2931: LD_INT 0
2933: PPUSH
2934: LD_INT 4
2936: PPUSH
2937: LD_INT 6
2939: PPUSH
2940: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2944: CALL_OW 44
2948: PPUSH
2949: LD_INT 32
2951: PUSH
2952: LD_INT 33
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: MOD
2967: PUSH
2968: LD_INT 1
2970: PLUS
2971: ARRAY
2972: PPUSH
2973: CALL_OW 52
// end ;
2977: GO 2928
2979: POP
2980: POP
// for i := 1 to 3 do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 3
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3024
// begin PrepareHuman ( false , 3 , 6 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: LD_INT 6
3005: PPUSH
3006: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
3010: CALL_OW 44
3014: PPUSH
3015: LD_INT 25
3017: PPUSH
3018: CALL_OW 52
// end ;
3022: GO 2994
3024: POP
3025: POP
// for i := 1 to 3 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 3
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3098
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
3042: LD_INT 0
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 6
3050: PUSH
3051: LD_INT 7
3053: PUSH
3054: LD_INT 7
3056: PUSH
3057: LD_INT 7
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_OWVAR 67
3070: ARRAY
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 84 , 154 ) ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_INT 84
3083: PPUSH
3084: LD_INT 154
3086: PPUSH
3087: CALL_OW 428
3091: PPUSH
3092: CALL_OW 52
// end ;
3096: GO 3039
3098: POP
3099: POP
// for i := 1 to 3 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 3
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3201
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3116: LD_INT 2
3118: PPUSH
3119: LD_INT 2
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 13
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 18266 0 5
// veh := CreateVehicle ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 9
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3172: LD_INT 0
3174: PPUSH
3175: LD_INT 3
3177: PPUSH
3178: LD_INT 6
3180: PPUSH
3181: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3185: CALL_OW 44
3189: PPUSH
3190: LD_VAR 0 4
3194: PPUSH
3195: CALL_OW 52
// end ;
3199: GO 3113
3201: POP
3202: POP
// InitHc ;
3203: CALL_OW 19
// hc_gallery := us ;
3207: LD_ADDR_OWVAR 33
3211: PUSH
3212: LD_STRING us
3214: ST_TO_ADDR
// hc_face_number := 26 ;
3215: LD_ADDR_OWVAR 34
3219: PUSH
3220: LD_INT 26
3222: ST_TO_ADDR
// hc_name := Max Caldera ;
3223: LD_ADDR_OWVAR 26
3227: PUSH
3228: LD_STRING Max Caldera
3230: ST_TO_ADDR
// hc_class := class_engineer ;
3231: LD_ADDR_OWVAR 28
3235: PUSH
3236: LD_INT 2
3238: ST_TO_ADDR
// hc_sex := sex_male ;
3239: LD_ADDR_OWVAR 27
3243: PUSH
3244: LD_INT 1
3246: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3247: LD_ADDR_OWVAR 29
3251: PUSH
3252: LD_INT 10
3254: PUSH
3255: LD_INT 11
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3262: LD_ADDR_OWVAR 30
3266: PUSH
3267: LD_INT 2
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: LD_INT 0
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3285: LD_ADDR_OWVAR 31
3289: PUSH
3290: LD_INT 4
3292: PUSH
3293: LD_INT 6
3295: PUSH
3296: LD_INT 3
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: ST_TO_ADDR
// usCommander := CreateHuman ;
3308: LD_ADDR_EXP 25
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3318: LD_EXP 25
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL_OW 52
// InitHC_All ( ) ;
3330: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3334: LD_INT 2
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: LD_INT 2
3342: PPUSH
3343: LD_INT 12
3345: PPUSH
3346: LD_INT 100
3348: PPUSH
3349: CALL 18266 0 5
// usCargo := CreateVehicle ;
3353: LD_ADDR_EXP 27
3357: PUSH
3358: CALL_OW 45
3362: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3363: LD_EXP 27
3367: PPUSH
3368: LD_INT 81
3370: PPUSH
3371: LD_INT 143
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 48
// Connect ( usCargo ) ;
3381: LD_EXP 27
3385: PPUSH
3386: CALL 21359 0 1
// DoNotAttack ( 5 , usCargo ) ;
3390: LD_INT 5
3392: PPUSH
3393: LD_EXP 27
3397: PPUSH
3398: CALL_OW 471
// end ;
3402: LD_VAR 0 1
3406: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3407: LD_EXP 26
3411: NOT
3412: PUSH
3413: LD_EXP 6
3417: AND
3418: PUSH
3419: LD_INT 25
3421: PPUSH
3422: CALL_OW 302
3426: AND
3427: PUSH
3428: LD_INT 25
3430: PPUSH
3431: CALL_OW 461
3435: PUSH
3436: LD_INT 2
3438: EQUAL
3439: AND
3440: IFFALSE 3597
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
3448: PPUSH
3449: PPUSH
// begin enable ;
3450: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3451: LD_ADDR_VAR 0 1
3455: PUSH
3456: DOUBLE
3457: LD_INT 1
3459: DEC
3460: ST_TO_ADDR
3461: LD_INT 5
3463: PUSH
3464: LD_INT 6
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PUSH
3479: LD_OWVAR 67
3483: ARRAY
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3595
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: LD_INT 4
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 1
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: CALL_OW 12
3517: ARRAY
3518: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3519: LD_VAR 0 2
3523: PUSH
3524: LD_INT 4
3526: EQUAL
3527: IFFALSE 3539
// weapon := us_heavy_gun else
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: LD_INT 6
3536: ST_TO_ADDR
3537: GO 3570
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: LD_INT 7
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 1
3560: PPUSH
3561: LD_INT 3
3563: PPUSH
3564: CALL_OW 12
3568: ARRAY
3569: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3570: LD_INT 25
3572: PPUSH
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_INT 1
3580: PPUSH
3581: LD_INT 2
3583: PPUSH
3584: LD_VAR 0 3
3588: PPUSH
3589: CALL_OW 185
// end ;
3593: GO 3485
3595: POP
3596: POP
// end ;
3597: PPOPN 3
3599: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3600: LD_EXP 26
3604: PUSH
3605: LD_INT 5
3607: PUSH
3608: LD_INT 6
3610: PUSH
3611: LD_INT 7
3613: PUSH
3614: LD_INT 8
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: PUSH
3623: LD_OWVAR 67
3627: ARRAY
3628: GREATEREQUAL
3629: IFFALSE 3769
3631: GO 3633
3633: DISABLE
3634: LD_INT 0
3636: PPUSH
3637: PPUSH
// begin enable ;
3638: ENABLE
// tmp := usForces ;
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_EXP 26
3648: ST_TO_ADDR
// usForces := [ ] ;
3649: LD_ADDR_EXP 26
3653: PUSH
3654: EMPTY
3655: ST_TO_ADDR
// if not tmp then
3656: LD_VAR 0 2
3660: NOT
3661: IFFALSE 3665
// exit ;
3663: GO 3769
// repeat wait ( 0 0$1 ) ;
3665: LD_INT 35
3667: PPUSH
3668: CALL_OW 67
// for i in tmp do
3672: LD_ADDR_VAR 0 1
3676: PUSH
3677: LD_VAR 0 2
3681: PUSH
3682: FOR_IN
3683: IFFALSE 3760
// begin if not IsOk ( i ) then
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 302
3694: NOT
3695: IFFALSE 3724
// begin ComUnlink ( i ) ;
3697: LD_VAR 0 1
3701: PPUSH
3702: CALL_OW 136
// tmp := tmp diff i ;
3706: LD_ADDR_VAR 0 2
3710: PUSH
3711: LD_VAR 0 2
3715: PUSH
3716: LD_VAR 0 1
3720: DIFF
3721: ST_TO_ADDR
// end else
3722: GO 3758
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3724: LD_VAR 0 1
3728: PPUSH
3729: LD_INT 22
3731: PUSH
3732: LD_INT 2
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PPUSH
3739: CALL_OW 69
3743: PPUSH
3744: LD_VAR 0 1
3748: PPUSH
3749: CALL_OW 74
3753: PPUSH
3754: CALL_OW 115
// end ;
3758: GO 3682
3760: POP
3761: POP
// until not tmp ;
3762: LD_VAR 0 2
3766: NOT
3767: IFFALSE 3665
// end ;
3769: PPOPN 2
3771: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3772: LD_EXP 3
3776: PUSH
3777: LD_EXP 5
3781: NOT
3782: AND
3783: PUSH
3784: LD_INT 11
3786: PPUSH
3787: LD_INT 22
3789: PUSH
3790: LD_INT 2
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PPUSH
3797: CALL_OW 70
3801: AND
3802: IFFALSE 3923
3804: GO 3806
3806: DISABLE
3807: LD_INT 0
3809: PPUSH
3810: PPUSH
3811: PPUSH
// begin uc_side := 1 ;
3812: LD_ADDR_OWVAR 20
3816: PUSH
3817: LD_INT 1
3819: ST_TO_ADDR
// uc_nation := 1 ;
3820: LD_ADDR_OWVAR 21
3824: PUSH
3825: LD_INT 1
3827: ST_TO_ADDR
// tmp := [ ] ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: EMPTY
3834: ST_TO_ADDR
// for i := 1 to 2 do
3835: LD_ADDR_VAR 0 1
3839: PUSH
3840: DOUBLE
3841: LD_INT 1
3843: DEC
3844: ST_TO_ADDR
3845: LD_INT 2
3847: PUSH
3848: FOR_TO
3849: IFFALSE 3921
// begin PrepareSoldier ( false , 7 ) ;
3851: LD_INT 0
3853: PPUSH
3854: LD_INT 7
3856: PPUSH
3857: CALL_OW 381
// un := CreateHuman ;
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: CALL_OW 44
3870: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3871: LD_VAR 0 2
3875: PPUSH
3876: LD_INT 130
3878: PPUSH
3879: LD_INT 153
3881: PPUSH
3882: LD_INT 3
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3892: LD_VAR 0 2
3896: PPUSH
3897: LD_INT 5
3899: PPUSH
3900: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_INT 108
3911: PPUSH
3912: LD_INT 108
3914: PPUSH
3915: CALL_OW 174
// end ;
3919: GO 3848
3921: POP
3922: POP
// end ;
3923: PPOPN 3
3925: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3926: LD_EXP 3
3930: PUSH
3931: LD_EXP 5
3935: NOT
3936: AND
3937: PUSH
3938: LD_INT 10
3940: PPUSH
3941: LD_INT 22
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PPUSH
3951: CALL_OW 70
3955: AND
3956: IFFALSE 4077
3958: GO 3960
3960: DISABLE
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
// begin uc_side := 1 ;
3966: LD_ADDR_OWVAR 20
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// uc_nation := 1 ;
3974: LD_ADDR_OWVAR 21
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// tmp := [ ] ;
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: EMPTY
3988: ST_TO_ADDR
// for i := 1 to 2 do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: DOUBLE
3995: LD_INT 1
3997: DEC
3998: ST_TO_ADDR
3999: LD_INT 2
4001: PUSH
4002: FOR_TO
4003: IFFALSE 4075
// begin PrepareSoldier ( false , 7 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 7
4010: PPUSH
4011: CALL_OW 381
// un := CreateHuman ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: CALL_OW 44
4024: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
4025: LD_VAR 0 2
4029: PPUSH
4030: LD_INT 56
4032: PPUSH
4033: LD_INT 101
4035: PPUSH
4036: LD_INT 3
4038: PPUSH
4039: LD_INT 0
4041: PPUSH
4042: CALL_OW 50
// SetClass ( un , class_sniper ) ;
4046: LD_VAR 0 2
4050: PPUSH
4051: LD_INT 5
4053: PPUSH
4054: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 72
4065: PPUSH
4066: LD_INT 92
4068: PPUSH
4069: CALL_OW 174
// end ;
4073: GO 4002
4075: POP
4076: POP
// end ;
4077: PPOPN 3
4079: END
// every 0 0$1 trigger IsOk ( usCargo ) and not usSurrender do var cr ;
4080: LD_EXP 27
4084: PPUSH
4085: CALL_OW 302
4089: PUSH
4090: LD_EXP 7
4094: NOT
4095: AND
4096: IFFALSE 4327
4098: GO 4100
4100: DISABLE
4101: LD_INT 0
4103: PPUSH
// begin enable ;
4104: ENABLE
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4105: LD_EXP 27
4109: PPUSH
4110: CALL_OW 261
4114: PUSH
4115: LD_INT 10
4117: LESS
4118: PUSH
4119: LD_INT 2
4121: PPUSH
4122: LD_EXP 27
4126: PPUSH
4127: CALL_OW 292
4131: NOT
4132: AND
4133: IFFALSE 4147
// SetFuel ( usCargo , 100 ) ;
4135: LD_EXP 27
4139: PPUSH
4140: LD_INT 100
4142: PPUSH
4143: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not IsInArea ( usCargo , usCratesArea ) and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) then
4147: LD_EXP 27
4151: PPUSH
4152: CALL_OW 314
4156: NOT
4157: PUSH
4158: LD_EXP 27
4162: PPUSH
4163: LD_INT 1
4165: PPUSH
4166: CALL_OW 289
4170: PUSH
4171: LD_INT 100
4173: LESS
4174: AND
4175: PUSH
4176: LD_EXP 27
4180: PPUSH
4181: LD_INT 12
4183: PPUSH
4184: CALL_OW 308
4188: NOT
4189: AND
4190: PUSH
4191: LD_INT 14
4193: PPUSH
4194: LD_INT 81
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 50
4206: PUSH
4207: EMPTY
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 70
4218: NOT
4219: AND
4220: IFFALSE 4297
// begin cr := GetListOfCratesInArea ( usCratesArea ) ;
4222: LD_ADDR_VAR 0 1
4226: PUSH
4227: LD_INT 12
4229: PPUSH
4230: CALL_OW 435
4234: ST_TO_ADDR
// if cr then
4235: LD_VAR 0 1
4239: IFFALSE 4270
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4241: LD_EXP 27
4245: PPUSH
4246: LD_VAR 0 1
4250: PUSH
4251: LD_INT 1
4253: ARRAY
4254: PPUSH
4255: LD_VAR 0 1
4259: PUSH
4260: LD_INT 2
4262: ARRAY
4263: PPUSH
4264: CALL_OW 117
4268: GO 4297
// if not IsInArea ( usCargo , usCratesArea ) then
4270: LD_EXP 27
4274: PPUSH
4275: LD_INT 12
4277: PPUSH
4278: CALL_OW 308
4282: NOT
4283: IFFALSE 4297
// ComMoveToArea ( usCargo , usCratesArea ) ;
4285: LD_EXP 27
4289: PPUSH
4290: LD_INT 12
4292: PPUSH
4293: CALL_OW 113
// end ; if GetCargo ( usCargo , mat_cans ) = 100 then
4297: LD_EXP 27
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 100
4312: EQUAL
4313: IFFALSE 4327
// ComGive ( usCargo , usDepot ) ;
4315: LD_EXP 27
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 161
// end ;
4327: PPOPN 1
4329: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4330: LD_EXP 7
4334: NOT
4335: PUSH
4336: LD_INT 22
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: LD_INT 21
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PUSH
4356: LD_INT 3
4358: PUSH
4359: LD_INT 50
4361: PUSH
4362: EMPTY
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: PPUSH
4374: CALL_OW 69
4378: AND
4379: PUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 60
4395: PUSH
4396: EMPTY
4397: LIST
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 25
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: AND
4423: IFFALSE 4626
4425: GO 4427
4427: DISABLE
4428: LD_INT 0
4430: PPUSH
4431: PPUSH
// begin enable ;
4432: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4433: LD_ADDR_VAR 0 1
4437: PUSH
4438: LD_INT 22
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 1
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: LD_INT 50
4463: PUSH
4464: EMPTY
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 69
4480: PUSH
4481: FOR_IN
4482: IFFALSE 4624
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4484: LD_ADDR_VAR 0 2
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: LD_INT 60
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 25
4514: PUSH
4515: LD_INT 4
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: ST_TO_ADDR
// if not sci then
4532: LD_VAR 0 2
4536: NOT
4537: IFFALSE 4541
// break ;
4539: GO 4624
// sci := sci [ 1 ] ;
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: LD_VAR 0 2
4550: PUSH
4551: LD_INT 1
4553: ARRAY
4554: ST_TO_ADDR
// if IsInUnit ( sci ) then
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 310
4564: IFFALSE 4577
// ComExit ( sci ) else
4566: LD_VAR 0 2
4570: PPUSH
4571: CALL 50527 0 1
4575: GO 4622
// begin ComHeal ( sci , i ) ;
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4591: LD_VAR 0 2
4595: PPUSH
4596: LD_INT 32
4598: PUSH
4599: LD_INT 33
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 1
4608: PPUSH
4609: LD_INT 2
4611: PPUSH
4612: CALL_OW 12
4616: ARRAY
4617: PPUSH
4618: CALL_OW 180
// end ; end ;
4622: GO 4481
4624: POP
4625: POP
// end ;
4626: PPOPN 2
4628: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4629: LD_EXP 7
4633: NOT
4634: PUSH
4635: LD_INT 22
4637: PUSH
4638: LD_INT 1
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: LD_INT 60
4650: PUSH
4651: EMPTY
4652: LIST
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 50
4660: PUSH
4661: EMPTY
4662: LIST
4663: PUSH
4664: LD_INT 34
4666: PUSH
4667: LD_INT 13
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PPUSH
4680: CALL_OW 69
4684: AND
4685: PUSH
4686: LD_INT 22
4688: PUSH
4689: LD_INT 1
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: LD_INT 3
4698: PUSH
4699: LD_INT 24
4701: PUSH
4702: LD_INT 1000
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: LD_INT 21
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 3
4725: PUSH
4726: LD_INT 30
4728: PUSH
4729: LD_INT 29
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: PPUSH
4746: CALL_OW 69
4750: AND
4751: IFFALSE 5020
4753: GO 4755
4755: DISABLE
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
// begin enable ;
4761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: LD_INT 22
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: LD_INT 3
4779: PUSH
4780: LD_INT 24
4782: PUSH
4783: LD_INT 1000
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 21
4796: PUSH
4797: LD_INT 3
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: LD_INT 30
4809: PUSH
4810: LD_INT 29
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 69
4831: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4832: LD_ADDR_VAR 0 3
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 3
4849: PUSH
4850: LD_INT 24
4852: PUSH
4853: LD_INT 600
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 29
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: PPUSH
4897: CALL_OW 69
4901: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_INT 22
4909: PUSH
4910: LD_INT 1
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: LD_INT 60
4922: PUSH
4923: EMPTY
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 50
4932: PUSH
4933: EMPTY
4934: LIST
4935: PUSH
4936: LD_INT 34
4938: PUSH
4939: LD_INT 13
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PPUSH
4952: CALL_OW 69
4956: PUSH
4957: FOR_IN
4958: IFFALSE 5018
// begin if tmp2 then
4960: LD_VAR 0 3
4964: IFFALSE 4992
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PPUSH
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 74
4985: PPUSH
4986: CALL_OW 130
4990: GO 5016
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4992: LD_VAR 0 1
4996: PPUSH
4997: LD_VAR 0 2
5001: PPUSH
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 74
5011: PPUSH
5012: CALL_OW 130
// end ;
5016: GO 4957
5018: POP
5019: POP
// end ;
5020: PPOPN 3
5022: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
5023: LD_EXP 7
5027: NOT
5028: PUSH
5029: LD_INT 14
5031: PPUSH
5032: LD_INT 81
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_INT 50
5044: PUSH
5045: EMPTY
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 70
5056: NOT
5057: AND
5058: PUSH
5059: LD_EXP 28
5063: AND
5064: PUSH
5065: LD_INT 22
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 60
5080: PUSH
5081: EMPTY
5082: LIST
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 50
5090: PUSH
5091: EMPTY
5092: LIST
5093: PUSH
5094: LD_INT 34
5096: PUSH
5097: LD_INT 13
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: PPUSH
5110: CALL_OW 69
5114: AND
5115: IFFALSE 5227
5117: GO 5119
5119: DISABLE
// begin enable ;
5120: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5121: LD_INT 22
5123: PUSH
5124: LD_INT 1
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 60
5136: PUSH
5137: EMPTY
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 50
5146: PUSH
5147: EMPTY
5148: LIST
5149: PUSH
5150: LD_INT 34
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: PPUSH
5171: LD_EXP 28
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PUSH
5180: LD_INT 1
5182: ARRAY
5183: PPUSH
5184: LD_EXP 28
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PUSH
5193: LD_INT 2
5195: ARRAY
5196: PPUSH
5197: LD_EXP 28
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PUSH
5206: LD_INT 3
5208: ARRAY
5209: PPUSH
5210: LD_EXP 28
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PUSH
5219: LD_INT 4
5221: ARRAY
5222: PPUSH
5223: CALL_OW 566
// end ;
5227: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5228: LD_INT 22
5230: PUSH
5231: LD_INT 1
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 50
5240: PUSH
5241: EMPTY
5242: LIST
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 54
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 25
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 25
5282: PUSH
5283: LD_INT 16
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: IFFALSE 5668
5308: GO 5310
5310: DISABLE
5311: LD_INT 0
5313: PPUSH
5314: PPUSH
5315: PPUSH
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5318: LD_ADDR_VAR 0 2
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_INT 1
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 50
5335: PUSH
5336: EMPTY
5337: LIST
5338: PUSH
5339: LD_INT 3
5341: PUSH
5342: LD_INT 54
5344: PUSH
5345: EMPTY
5346: LIST
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 2
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 1
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 5
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 16
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL_OW 69
5401: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5402: LD_ADDR_VAR 0 3
5406: PUSH
5407: LD_INT 22
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 50
5419: PUSH
5420: EMPTY
5421: LIST
5422: PUSH
5423: LD_INT 21
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 30
5435: PUSH
5436: LD_INT 32
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 58
5445: PUSH
5446: EMPTY
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: PPUSH
5456: CALL_OW 69
5460: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5461: LD_ADDR_VAR 0 4
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 50
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: LD_INT 30
5484: PUSH
5485: LD_INT 5
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: ST_TO_ADDR
// if not tmp then
5502: LD_VAR 0 2
5506: NOT
5507: IFFALSE 5511
// exit ;
5509: GO 5668
// for i in tmp do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5666
// begin btmp := FilterByTag ( btmp , 0 ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 3
5533: PPUSH
5534: LD_INT 0
5536: PPUSH
5537: CALL 47657 0 2
5541: ST_TO_ADDR
// if not btmp then
5542: LD_VAR 0 3
5546: NOT
5547: IFFALSE 5592
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5549: LD_VAR 0 1
5553: PPUSH
5554: CALL_OW 257
5558: PUSH
5559: LD_INT 16
5561: NONEQUAL
5562: PUSH
5563: LD_VAR 0 4
5567: AND
5568: IFFALSE 5588
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5570: LD_VAR 0 1
5574: PPUSH
5575: LD_VAR 0 4
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: CALL_OW 120
// continue ;
5588: GO 5521
// end else
5590: GO 5664
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 1
5599: ARRAY
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5608: LD_VAR 0 1
5612: PPUSH
5613: LD_VAR 0 3
5617: PUSH
5618: LD_INT 1
5620: ARRAY
5621: PPUSH
5622: CALL_OW 120
// wait ( 0 0$9 ) ;
5626: LD_INT 315
5628: PPUSH
5629: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PPUSH
5642: CALL 15558 0 1
5646: IFFALSE 5664
// SetTag ( btmp [ 1 ] , 0 ) ;
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 1
5655: ARRAY
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: CALL_OW 109
// end ; end ;
5664: GO 5521
5666: POP
5667: POP
// end ;
5668: PPOPN 4
5670: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5671: LD_INT 22
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 33
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 50
5693: PUSH
5694: EMPTY
5695: LIST
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: LD_INT 61
5702: PUSH
5703: EMPTY
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: IFFALSE 5811
5722: GO 5724
5724: DISABLE
5725: LD_INT 0
5727: PPUSH
5728: PPUSH
// begin enable ;
5729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 33
5747: PUSH
5748: LD_INT 2
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 50
5757: PUSH
5758: EMPTY
5759: LIST
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: LD_INT 61
5766: PUSH
5767: EMPTY
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: CALL_OW 69
5784: ST_TO_ADDR
// for i in tmp do
5785: LD_ADDR_VAR 0 1
5789: PUSH
5790: LD_VAR 0 2
5794: PUSH
5795: FOR_IN
5796: IFFALSE 5809
// Connect ( i ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: CALL 21359 0 1
5807: GO 5795
5809: POP
5810: POP
// end ; end_of_file
5811: PPOPN 2
5813: END
// on UnitDestroyed ( un ) do begin if un = Heike then
5814: LD_VAR 0 1
5818: PUSH
5819: LD_EXP 10
5823: EQUAL
5824: IFFALSE 5833
// YouLost ( Heike ) ;
5826: LD_STRING Heike
5828: PPUSH
5829: CALL_OW 104
// if un = usCommander then
5833: LD_VAR 0 1
5837: PUSH
5838: LD_EXP 25
5842: EQUAL
5843: IFFALSE 5852
// YouLost ( Commander ) ;
5845: LD_STRING Commander
5847: PPUSH
5848: CALL_OW 104
// if GetSide ( un ) = 1 then
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL_OW 255
5861: PUSH
5862: LD_INT 1
5864: EQUAL
5865: IFFALSE 6116
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
5867: LD_VAR 0 1
5871: PPUSH
5872: CALL_OW 264
5876: PUSH
5877: LD_INT 13
5879: EQUAL
5880: PUSH
5881: LD_INT 25
5883: PPUSH
5884: CALL_OW 302
5888: AND
5889: IFFALSE 5910
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
5891: LD_INT 25
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: LD_INT 2
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: LD_INT 13
5905: PPUSH
5906: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 264
5919: PUSH
5920: LD_INT 12
5922: EQUAL
5923: PUSH
5924: LD_INT 25
5926: PPUSH
5927: CALL_OW 302
5931: AND
5932: IFFALSE 5953
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
5934: LD_INT 25
5936: PPUSH
5937: LD_INT 2
5939: PPUSH
5940: LD_INT 1
5942: PPUSH
5943: LD_INT 2
5945: PPUSH
5946: LD_INT 12
5948: PPUSH
5949: CALL_OW 185
// if GetBType ( un ) = b_bunker then
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 266
5962: PUSH
5963: LD_INT 32
5965: EQUAL
5966: IFFALSE 6031
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
5968: LD_ADDR_EXP 28
5972: PUSH
5973: LD_EXP 28
5977: PPUSH
5978: LD_EXP 28
5982: PUSH
5983: LD_INT 1
5985: PLUS
5986: PPUSH
5987: LD_INT 32
5989: PUSH
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 250
5999: PUSH
6000: LD_VAR 0 1
6004: PPUSH
6005: CALL_OW 251
6009: PUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 254
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: PPUSH
6026: CALL_OW 1
6030: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6031: LD_VAR 0 1
6035: PPUSH
6036: CALL_OW 266
6040: PUSH
6041: LD_INT 5
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: IN
6051: IFFALSE 6116
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6053: LD_ADDR_EXP 28
6057: PUSH
6058: LD_EXP 28
6062: PPUSH
6063: LD_EXP 28
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: PPUSH
6072: LD_INT 4
6074: PUSH
6075: LD_VAR 0 1
6079: PPUSH
6080: CALL_OW 250
6084: PUSH
6085: LD_VAR 0 1
6089: PPUSH
6090: CALL_OW 251
6094: PUSH
6095: LD_VAR 0 1
6099: PPUSH
6100: CALL_OW 254
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PPUSH
6111: CALL_OW 1
6115: ST_TO_ADDR
// end ; end ;
6116: PPOPN 1
6118: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6119: LD_VAR 0 1
6123: PPUSH
6124: CALL_OW 255
6128: PUSH
6129: LD_INT 1
6131: EQUAL
6132: PUSH
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL_OW 110
6142: PUSH
6143: LD_INT 1
6145: EQUAL
6146: AND
6147: IFFALSE 6161
// SetTag ( un , 0 ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_INT 0
6156: PPUSH
6157: CALL_OW 109
// end ;
6161: PPOPN 1
6163: END
// on BuildingComplete ( b ) do var i , barracks ;
6164: LD_INT 0
6166: PPUSH
6167: PPUSH
// begin if GetSide ( b ) = 1 then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 255
6177: PUSH
6178: LD_INT 1
6180: EQUAL
6181: IFFALSE 6333
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6183: LD_ADDR_EXP 28
6187: PUSH
6188: LD_EXP 28
6192: PPUSH
6193: LD_INT 1
6195: PPUSH
6196: CALL_OW 3
6200: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL_OW 266
6210: PUSH
6211: LD_INT 4
6213: EQUAL
6214: IFFALSE 6225
// ComUpgrade ( b ) ;
6216: LD_VAR 0 1
6220: PPUSH
6221: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6225: LD_VAR 0 1
6229: PPUSH
6230: CALL_OW 266
6234: PUSH
6235: LD_INT 32
6237: EQUAL
6238: IFFALSE 6333
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6240: LD_VAR 0 1
6244: PPUSH
6245: LD_INT 6
6247: PUSH
6248: LD_INT 7
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_INT 2
6260: PPUSH
6261: CALL_OW 12
6265: ARRAY
6266: PPUSH
6267: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 22
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 30
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PPUSH
6300: CALL_OW 69
6304: ST_TO_ADDR
// if barracks then
6305: LD_VAR 0 3
6309: IFFALSE 6333
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6311: LD_VAR 0 3
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: PPUSH
6320: CALL_OW 313
6324: PUSH
6325: LD_INT 1
6327: ARRAY
6328: PPUSH
6329: CALL_OW 122
// end ; end ; end ;
6333: PPOPN 3
6335: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6336: LD_VAR 0 2
6340: PPUSH
6341: CALL_OW 255
6345: PUSH
6346: LD_INT 1
6348: EQUAL
6349: IFFALSE 6428
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 264
6360: PUSH
6361: LD_INT 12
6363: EQUAL
6364: IFFALSE 6376
// usCargo := vehicle ;
6366: LD_ADDR_EXP 27
6370: PUSH
6371: LD_VAR 0 1
6375: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 264
6385: PUSH
6386: LD_INT 12
6388: PUSH
6389: LD_INT 13
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: IN
6396: NOT
6397: IFFALSE 6428
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6399: LD_ADDR_EXP 26
6403: PUSH
6404: LD_EXP 26
6408: PPUSH
6409: LD_EXP 26
6413: PUSH
6414: LD_INT 1
6416: PLUS
6417: PPUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 1
6427: ST_TO_ADDR
// end ; end ;
6428: PPOPN 2
6430: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 and GetWeapon ( veh ) = us_crane then
6431: LD_VAR 0 2
6435: PPUSH
6436: CALL_OW 255
6440: PUSH
6441: LD_INT 1
6443: EQUAL
6444: PUSH
6445: LD_VAR 0 2
6449: PPUSH
6450: CALL_OW 264
6454: PUSH
6455: LD_INT 13
6457: EQUAL
6458: AND
6459: IFFALSE 6473
// AddComEnterUnit ( un , amFac ) ;
6461: LD_VAR 0 1
6465: PPUSH
6466: LD_INT 25
6468: PPUSH
6469: CALL_OW 180
// end ;
6473: PPOPN 4
6475: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 255
6485: PUSH
6486: LD_INT 1
6488: EQUAL
6489: PUSH
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL_OW 266
6499: PUSH
6500: LD_INT 32
6502: EQUAL
6503: AND
6504: PUSH
6505: LD_VAR 0 2
6509: PPUSH
6510: CALL_OW 257
6514: PUSH
6515: LD_INT 1
6517: PUSH
6518: LD_INT 5
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: IN
6525: AND
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 1
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 30
6539: PUSH
6540: LD_INT 5
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 50
6549: PUSH
6550: EMPTY
6551: LIST
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 69
6562: AND
6563: IFFALSE 6633
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
6565: LD_INT 74
6567: PPUSH
6568: LD_INT 120
6570: PPUSH
6571: CALL_OW 428
6575: PPUSH
6576: CALL_OW 313
6580: PUSH
6581: LD_INT 6
6583: LESS
6584: IFFALSE 6633
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
6586: LD_VAR 0 2
6590: PPUSH
6591: LD_INT 74
6593: PPUSH
6594: LD_INT 120
6596: PPUSH
6597: CALL_OW 428
6601: PPUSH
6602: CALL_OW 120
// if GetClass ( un ) = class_soldier then
6606: LD_VAR 0 2
6610: PPUSH
6611: CALL_OW 257
6615: PUSH
6616: LD_INT 1
6618: EQUAL
6619: IFFALSE 6633
// AddComChangeProfession ( un , class_sniper ) ;
6621: LD_VAR 0 2
6625: PPUSH
6626: LD_INT 5
6628: PPUSH
6629: CALL_OW 183
// end ; end ; end_of_file
6633: PPOPN 2
6635: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
6636: LD_INT 0
6638: PPUSH
6639: PPUSH
6640: PPUSH
6641: PPUSH
6642: PPUSH
6643: PPUSH
6644: PPUSH
6645: PPUSH
// Video ( true ) ;
6646: LD_INT 1
6648: PPUSH
6649: CALL 50111 0 1
// music_nat := 1 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 1
6660: ST_TO_ADDR
// music_class := music_recon ;
6661: LD_ADDR_OWVAR 72
6665: PUSH
6666: LD_INT 3
6668: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
6669: LD_INT 184
6671: PPUSH
6672: LD_INT 142
6674: PPUSH
6675: LD_INT 2
6677: PPUSH
6678: LD_INT 10
6680: NEG
6681: PPUSH
6682: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
6686: LD_INT 184
6688: PPUSH
6689: LD_INT 142
6691: PPUSH
6692: LD_INT 2
6694: PPUSH
6695: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
6699: LD_INT 204
6701: PPUSH
6702: LD_INT 151
6704: PPUSH
6705: LD_INT 2
6707: PPUSH
6708: LD_INT 10
6710: NEG
6711: PPUSH
6712: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
6716: LD_INT 204
6718: PPUSH
6719: LD_INT 151
6721: PPUSH
6722: LD_INT 2
6724: PPUSH
6725: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
6729: LD_INT 184
6731: PPUSH
6732: LD_INT 142
6734: PPUSH
6735: CALL_OW 86
// wait ( 0 0$2 ) ;
6739: LD_INT 70
6741: PPUSH
6742: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
6746: LD_ADDR_VAR 0 5
6750: PUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_EXP 11
6760: PUSH
6761: LD_EXP 12
6765: PUSH
6766: LD_EXP 13
6770: PUSH
6771: LD_EXP 14
6775: PUSH
6776: LD_EXP 15
6780: PUSH
6781: LD_EXP 16
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 19
6795: PUSH
6796: LD_EXP 20
6800: PUSH
6801: LD_EXP 21
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: PUSH
6819: LD_EXP 22
6823: UNION
6824: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
6825: LD_ADDR_VAR 0 6
6829: PUSH
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_INT 25
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: PUSH
6850: LD_INT 0
6852: GREATER
6853: ST_TO_ADDR
// hasCamera := false ;
6854: LD_ADDR_VAR 0 7
6858: PUSH
6859: LD_INT 0
6861: ST_TO_ADDR
// if not hasEng then
6862: LD_VAR 0 6
6866: NOT
6867: IFFALSE 6895
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
6869: LD_VAR 0 5
6873: PUSH
6874: LD_INT 1
6876: PPUSH
6877: LD_VAR 0 5
6881: PPUSH
6882: CALL_OW 12
6886: ARRAY
6887: PPUSH
6888: LD_INT 2
6890: PPUSH
6891: CALL_OW 336
// if heikeVehicles then
6895: LD_EXP 24
6899: IFFALSE 7513
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
6901: LD_ADDR_VAR 0 5
6905: PUSH
6906: LD_VAR 0 5
6910: PPUSH
6911: LD_INT 3
6913: PPUSH
6914: CALL 52156 0 2
6918: ST_TO_ADDR
// for i in heikeVehicles do
6919: LD_ADDR_VAR 0 2
6923: PUSH
6924: LD_EXP 24
6928: PUSH
6929: FOR_IN
6930: IFFALSE 7511
// begin if not tmp then
6932: LD_VAR 0 5
6936: NOT
6937: IFFALSE 6941
// break ;
6939: GO 7511
// uc_side := 2 ;
6941: LD_ADDR_OWVAR 20
6945: PUSH
6946: LD_INT 2
6948: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
6949: LD_ADDR_OWVAR 21
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 5
6961: ARRAY
6962: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
6963: LD_ADDR_OWVAR 37
6967: PUSH
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 1
6975: ARRAY
6976: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
6977: LD_ADDR_OWVAR 39
6981: PUSH
6982: LD_VAR 0 2
6986: PUSH
6987: LD_INT 2
6989: ARRAY
6990: ST_TO_ADDR
// vc_control := i [ 3 ] ;
6991: LD_ADDR_OWVAR 38
6995: PUSH
6996: LD_VAR 0 2
7000: PUSH
7001: LD_INT 3
7003: ARRAY
7004: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7005: LD_ADDR_OWVAR 40
7009: PUSH
7010: LD_VAR 0 2
7014: PUSH
7015: LD_INT 4
7017: ARRAY
7018: ST_TO_ADDR
// veh := CreateVehicle ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: CALL_OW 45
7028: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7029: LD_VAR 0 4
7033: PPUSH
7034: LD_INT 4
7036: PPUSH
7037: CALL_OW 233
// if i [ 3 ] = control_manual then
7041: LD_VAR 0 2
7045: PUSH
7046: LD_INT 3
7048: ARRAY
7049: PUSH
7050: LD_INT 1
7052: EQUAL
7053: IFFALSE 7138
// begin PlaceUnitArea ( veh , startArea , false ) ;
7055: LD_VAR 0 4
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: LD_INT 0
7065: PPUSH
7066: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7070: LD_VAR 0 2
7074: PUSH
7075: LD_INT 4
7077: ARRAY
7078: PUSH
7079: LD_INT 31
7081: EQUAL
7082: IFFALSE 7100
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7084: LD_VAR 0 5
7088: PUSH
7089: LD_INT 1
7091: ARRAY
7092: PPUSH
7093: LD_INT 3
7095: PPUSH
7096: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7100: LD_VAR 0 5
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_VAR 0 4
7113: PPUSH
7114: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7118: LD_ADDR_VAR 0 5
7122: PUSH
7123: LD_VAR 0 5
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: CALL_OW 3
7135: ST_TO_ADDR
// end else
7136: GO 7199
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7138: LD_INT 22
7140: PUSH
7141: LD_INT 2
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 34
7150: PUSH
7151: LD_INT 31
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: IFFALSE 7199
// begin PlaceUnitArea ( veh , startArea , false ) ;
7168: LD_VAR 0 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// Connect ( veh ) ;
7183: LD_VAR 0 4
7187: PPUSH
7188: CALL 21359 0 1
// wait ( 0 0$2 ) ;
7192: LD_INT 70
7194: PPUSH
7195: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7199: LD_VAR 0 4
7203: PPUSH
7204: LD_VAR 0 2
7208: PUSH
7209: LD_INT 6
7211: ARRAY
7212: PPUSH
7213: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7217: LD_VAR 0 4
7221: PPUSH
7222: LD_INT 20
7224: PPUSH
7225: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7229: LD_VAR 0 2
7233: PUSH
7234: LD_INT 7
7236: ARRAY
7237: PUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: CALL_OW 264
7247: PUSH
7248: LD_INT 51
7250: PUSH
7251: LD_INT 32
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: IN
7258: AND
7259: IFFALSE 7310
// begin for j := 1 to 2 do
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: DOUBLE
7267: LD_INT 1
7269: DEC
7270: ST_TO_ADDR
7271: LD_INT 2
7273: PUSH
7274: FOR_TO
7275: IFFALSE 7308
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7277: LD_VAR 0 4
7281: PPUSH
7282: LD_VAR 0 3
7286: PPUSH
7287: LD_VAR 0 2
7291: PUSH
7292: LD_INT 7
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 3
7300: ARRAY
7301: PPUSH
7302: CALL_OW 291
7306: GO 7274
7308: POP
7309: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7310: LD_VAR 0 4
7314: PPUSH
7315: LD_INT 185
7317: PPUSH
7318: LD_INT 144
7320: PPUSH
7321: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 263
7334: PUSH
7335: LD_INT 1
7337: EQUAL
7338: PUSH
7339: LD_VAR 0 7
7343: NOT
7344: AND
7345: PUSH
7346: LD_VAR 0 4
7350: PPUSH
7351: CALL_OW 311
7355: PPUSH
7356: CALL_OW 257
7360: PUSH
7361: LD_INT 2
7363: EQUAL
7364: AND
7365: IFFALSE 7460
// begin hasCamera := true ;
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: LD_INT 1
7374: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7375: LD_ADDR_VAR 0 8
7379: PUSH
7380: LD_VAR 0 4
7384: PPUSH
7385: CALL_OW 311
7389: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_INT 177
7397: PPUSH
7398: LD_INT 138
7400: PPUSH
7401: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7405: LD_VAR 0 8
7409: PPUSH
7410: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7414: LD_VAR 0 8
7418: PPUSH
7419: LD_INT 190
7421: PPUSH
7422: LD_INT 150
7424: PPUSH
7425: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7429: LD_VAR 0 8
7433: PPUSH
7434: LD_VAR 0 4
7438: PPUSH
7439: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7443: LD_VAR 0 8
7447: PPUSH
7448: LD_INT 170
7450: PPUSH
7451: LD_INT 103
7453: PPUSH
7454: CALL_OW 171
// end else
7458: GO 7502
// begin AddComWait ( veh , 0 0$2 ) ;
7460: LD_VAR 0 4
7464: PPUSH
7465: LD_INT 70
7467: PPUSH
7468: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
7472: LD_VAR 0 4
7476: PPUSH
7477: LD_INT 179
7479: PPUSH
7480: LD_INT 129
7482: PPUSH
7483: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
7487: LD_VAR 0 4
7491: PPUSH
7492: LD_INT 170
7494: PPUSH
7495: LD_INT 103
7497: PPUSH
7498: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
7502: LD_INT 70
7504: PPUSH
7505: CALL_OW 67
// end ;
7509: GO 6929
7511: POP
7512: POP
// end ; if tmp then
7513: LD_VAR 0 5
7517: IFFALSE 7662
// begin for i in tmp do
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_VAR 0 5
7528: PUSH
7529: FOR_IN
7530: IFFALSE 7660
// begin SetDir ( i , 4 ) ;
7532: LD_VAR 0 2
7536: PPUSH
7537: LD_INT 4
7539: PPUSH
7540: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7544: LD_VAR 0 2
7548: PPUSH
7549: LD_INT 1
7551: PPUSH
7552: LD_INT 0
7554: PPUSH
7555: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7559: LD_VAR 0 2
7563: PPUSH
7564: LD_INT 185
7566: PPUSH
7567: LD_INT 144
7569: PPUSH
7570: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
7574: LD_VAR 0 2
7578: PPUSH
7579: CALL_OW 257
7583: PUSH
7584: LD_INT 2
7586: EQUAL
7587: PUSH
7588: LD_VAR 0 7
7592: NOT
7593: AND
7594: IFFALSE 7621
// begin hasCamera := true ;
7596: LD_ADDR_VAR 0 7
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
7604: LD_VAR 0 2
7608: PPUSH
7609: LD_INT 190
7611: PPUSH
7612: LD_INT 150
7614: PPUSH
7615: CALL_OW 217
// end else
7619: GO 7636
// AddComMoveXY ( i , 179 , 129 ) ;
7621: LD_VAR 0 2
7625: PPUSH
7626: LD_INT 179
7628: PPUSH
7629: LD_INT 129
7631: PPUSH
7632: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
7636: LD_VAR 0 2
7640: PPUSH
7641: LD_INT 170
7643: PPUSH
7644: LD_INT 103
7646: PPUSH
7647: CALL_OW 171
// wait ( 0 0$2 ) ;
7651: LD_INT 70
7653: PPUSH
7654: CALL_OW 67
// end ;
7658: GO 7529
7660: POP
7661: POP
// end ; if heikeApes then
7662: LD_EXP 23
7666: IFFALSE 7749
// begin for i in heikeApes do
7668: LD_ADDR_VAR 0 2
7672: PUSH
7673: LD_EXP 23
7677: PUSH
7678: FOR_IN
7679: IFFALSE 7747
// begin SetDir ( i , 4 ) ;
7681: LD_VAR 0 2
7685: PPUSH
7686: LD_INT 4
7688: PPUSH
7689: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
7693: LD_VAR 0 2
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: LD_INT 0
7703: PPUSH
7704: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
7708: LD_VAR 0 2
7712: PPUSH
7713: LD_INT 185
7715: PPUSH
7716: LD_INT 144
7718: PPUSH
7719: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_INT 170
7730: PPUSH
7731: LD_INT 103
7733: PPUSH
7734: CALL_OW 171
// wait ( 0 0$2 ) ;
7738: LD_INT 70
7740: PPUSH
7741: CALL_OW 67
// end ;
7745: GO 7678
7747: POP
7748: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
7749: LD_EXP 10
7753: PPUSH
7754: LD_INT 163
7756: PPUSH
7757: LD_INT 89
7759: PPUSH
7760: CALL_OW 171
// wait ( 0 0$2 ) ;
7764: LD_INT 70
7766: PPUSH
7767: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
7771: LD_INT 175
7773: PPUSH
7774: LD_INT 117
7776: PPUSH
7777: CALL_OW 84
// CenterOnUnits ( Heike ) ;
7781: LD_EXP 10
7785: PPUSH
7786: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
7790: LD_EXP 10
7794: PPUSH
7795: LD_STRING DH-Intro-1
7797: PPUSH
7798: CALL_OW 88
// if Markov then
7802: LD_EXP 17
7806: IFFALSE 8373
// begin Say ( Markov , DMar-Intro-2 ) ;
7808: LD_EXP 17
7812: PPUSH
7813: LD_STRING DMar-Intro-2
7815: PPUSH
7816: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
7820: LD_EXP 17
7824: PPUSH
7825: LD_STRING DMar-Intro-3
7827: PPUSH
7828: CALL_OW 88
// wait ( 0 0$1 ) ;
7832: LD_INT 35
7834: PPUSH
7835: CALL_OW 67
// CenterOnUnits ( Heike ) ;
7839: LD_EXP 10
7843: PPUSH
7844: CALL_OW 85
// if Kurt then
7848: LD_EXP 20
7852: IFFALSE 7904
// begin if IsInUnit ( Kurt ) then
7854: LD_EXP 20
7858: PPUSH
7859: CALL_OW 310
7863: IFFALSE 7874
// ComExit ( Kurt ) ;
7865: LD_EXP 20
7869: PPUSH
7870: CALL 50527 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
7874: LD_EXP 20
7878: PPUSH
7879: LD_INT 130
7881: PPUSH
7882: LD_INT 56
7884: PPUSH
7885: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
7889: LD_EXP 20
7893: PPUSH
7894: LD_INT 129
7896: PPUSH
7897: LD_INT 56
7899: PPUSH
7900: CALL_OW 178
// end ; if Kaia then
7904: LD_EXP 15
7908: IFFALSE 8088
// begin Say ( Kaia , DK-Intro-4 ) ;
7910: LD_EXP 15
7914: PPUSH
7915: LD_STRING DK-Intro-4
7917: PPUSH
7918: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
7922: LD_EXP 17
7926: PPUSH
7927: LD_STRING DMar-Intro-5
7929: PPUSH
7930: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
7934: LD_EXP 17
7938: PPUSH
7939: LD_STRING DMar-Intro-6
7941: PPUSH
7942: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
7946: LD_EXP 19
7950: PPUSH
7951: LD_STRING DO-Intro-7
7953: PPUSH
7954: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
7958: LD_INT 160
7960: PPUSH
7961: LD_INT 85
7963: PPUSH
7964: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
7968: LD_EXP 17
7972: PPUSH
7973: LD_STRING DMar-Intro-8
7975: PPUSH
7976: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
7980: LD_EXP 17
7984: PPUSH
7985: LD_STRING DMar-Intro-9
7987: PPUSH
7988: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
7992: LD_EXP 17
7996: PPUSH
7997: LD_STRING DMar-Intro-10
7999: PPUSH
8000: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8004: LD_EXP 17
8008: PPUSH
8009: LD_STRING DMar-Intro-11
8011: PPUSH
8012: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8016: LD_EXP 11
8020: PPUSH
8021: LD_STRING DG-Intro-12
8023: PPUSH
8024: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8028: LD_EXP 11
8032: PPUSH
8033: LD_STRING DG-Intro-13
8035: PPUSH
8036: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8040: LD_EXP 11
8044: PPUSH
8045: LD_STRING DG-Intro-14
8047: PPUSH
8048: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8052: LD_EXP 11
8056: PPUSH
8057: LD_STRING DG-Intro-15
8059: PPUSH
8060: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8064: LD_EXP 10
8068: PPUSH
8069: LD_STRING DH-Intro-16
8071: PPUSH
8072: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8076: LD_EXP 17
8080: PPUSH
8081: LD_STRING DMar-Intro-17
8083: PPUSH
8084: CALL_OW 88
// end ; if Kurt and Mike then
8088: LD_EXP 20
8092: PUSH
8093: LD_EXP 12
8097: AND
8098: IFFALSE 8373
// begin CenterNowOnUnits ( Kurt ) ;
8100: LD_EXP 20
8104: PPUSH
8105: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8109: LD_EXP 20
8113: PPUSH
8114: LD_EXP 10
8118: PPUSH
8119: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8123: LD_EXP 20
8127: PPUSH
8128: LD_STRING DKs-Intro-18
8130: PPUSH
8131: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8135: LD_EXP 20
8139: PPUSH
8140: LD_STRING DKs-Intro-19
8142: PPUSH
8143: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8147: LD_EXP 12
8151: PPUSH
8152: CALL_OW 87
// if IsInUnit ( Mike ) then
8156: LD_EXP 12
8160: PPUSH
8161: CALL_OW 310
8165: IFFALSE 8176
// ComExit ( Mike ) ;
8167: LD_EXP 12
8171: PPUSH
8172: CALL 50527 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8176: LD_EXP 12
8180: PPUSH
8181: LD_INT 129
8183: PPUSH
8184: LD_INT 53
8186: PPUSH
8187: CALL_OW 171
// AddComHold ( Mike ) ;
8191: LD_EXP 12
8195: PPUSH
8196: CALL_OW 200
// wait ( 0 0$2 ) ;
8200: LD_INT 70
8202: PPUSH
8203: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8207: LD_EXP 12
8211: PPUSH
8212: LD_STRING DM-Intro-20
8214: PPUSH
8215: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8219: LD_ADDR_EXP 3
8223: PUSH
8224: LD_STRING Scout
8226: PPUSH
8227: CALL_OW 97
8231: ST_TO_ADDR
// if scoutActive = 1 then
8232: LD_EXP 3
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8337
// begin CenterNowOnUnits ( Kurt ) ;
8242: LD_EXP 20
8246: PPUSH
8247: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8251: LD_EXP 10
8255: PPUSH
8256: LD_STRING DH-Intro-21
8258: PPUSH
8259: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8263: LD_EXP 12
8267: PPUSH
8268: LD_STRING DM-Intro-22
8270: PPUSH
8271: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8275: LD_EXP 20
8279: PPUSH
8280: LD_STRING DKs-Intro-23
8282: PPUSH
8283: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8287: LD_EXP 20
8291: PPUSH
8292: LD_INT 5
8294: PPUSH
8295: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8299: LD_EXP 12
8303: PPUSH
8304: LD_INT 5
8306: PPUSH
8307: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8311: LD_EXP 20
8315: PUSH
8316: LD_EXP 12
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PPUSH
8325: LD_INT 104
8327: PPUSH
8328: LD_INT 66
8330: PPUSH
8331: CALL_OW 111
// end else
8335: GO 8373
// begin Say ( Heike , DH-Intro-a-21 ) ;
8337: LD_EXP 10
8341: PPUSH
8342: LD_STRING DH-Intro-a-21
8344: PPUSH
8345: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8349: LD_EXP 12
8353: PPUSH
8354: LD_STRING DM-Intro-a-22
8356: PPUSH
8357: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8361: LD_EXP 20
8365: PPUSH
8366: LD_STRING DKs-Intro-a-23
8368: PPUSH
8369: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8373: LD_INT 0
8375: PPUSH
8376: CALL 50111 0 1
// music_nat := music_auto ;
8380: LD_ADDR_OWVAR 71
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// music_class := music_auto ;
8388: LD_ADDR_OWVAR 72
8392: PUSH
8393: LD_INT 0
8395: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8396: LD_STRING M1
8398: PPUSH
8399: CALL_OW 337
// wait ( 0 0$3 ) ;
8403: LD_INT 105
8405: PPUSH
8406: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8410: LD_EXP 10
8414: PPUSH
8415: LD_STRING DH-Base-1
8417: PPUSH
8418: CALL_OW 88
// if Kaia then
8422: LD_EXP 15
8426: IFFALSE 8536
// begin Say ( Kaia , DK-Base-2 ) ;
8428: LD_EXP 15
8432: PPUSH
8433: LD_STRING DK-Base-2
8435: PPUSH
8436: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8440: LD_EXP 10
8444: PPUSH
8445: LD_STRING DH-Base-3
8447: PPUSH
8448: CALL_OW 88
// if Aviradze then
8452: LD_EXP 21
8456: IFFALSE 8536
// begin Say ( Aviradze , DA-Base-4 ) ;
8458: LD_EXP 21
8462: PPUSH
8463: LD_STRING DA-Base-4
8465: PPUSH
8466: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
8470: LD_EXP 15
8474: PPUSH
8475: LD_STRING DK-Base-5
8477: PPUSH
8478: CALL_OW 88
// if Markov then
8482: LD_EXP 17
8486: IFFALSE 8536
// begin Say ( Markov , DMar-Base-6 ) ;
8488: LD_EXP 17
8492: PPUSH
8493: LD_STRING DMar-Base-6
8495: PPUSH
8496: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
8500: LD_EXP 15
8504: PPUSH
8505: LD_STRING DK-Base-7
8507: PPUSH
8508: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
8512: LD_EXP 17
8516: PPUSH
8517: LD_STRING DMar-Base-8
8519: PPUSH
8520: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
8524: LD_EXP 17
8528: PPUSH
8529: LD_STRING DMar-Base-9
8531: PPUSH
8532: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
8536: CALL_OW 22
// end ;
8540: LD_VAR 0 1
8544: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
8545: LD_EXP 5
8549: IFFALSE 9500
8551: GO 8553
8553: DISABLE
8554: LD_INT 0
8556: PPUSH
8557: PPUSH
// begin InGameOn ;
8558: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
8562: LD_EXP 12
8566: PUSH
8567: LD_EXP 20
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PPUSH
8576: LD_EXP 10
8580: PPUSH
8581: CALL_OW 119
// ComExit ( Heike ) ;
8585: LD_EXP 10
8589: PPUSH
8590: CALL 50527 0 1
// if IsOk ( Mike ) then
8594: LD_EXP 12
8598: PPUSH
8599: CALL_OW 302
8603: IFFALSE 8621
// AddComTurnUnit ( Heike , Mike ) else
8605: LD_EXP 10
8609: PPUSH
8610: LD_EXP 12
8614: PPUSH
8615: CALL_OW 179
8619: GO 8635
// AddComTurnUnit ( Heike , Kurt ) ;
8621: LD_EXP 10
8625: PPUSH
8626: LD_EXP 20
8630: PPUSH
8631: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
8635: LD_EXP 12
8639: PPUSH
8640: CALL_OW 302
8644: PUSH
8645: LD_EXP 20
8649: PPUSH
8650: CALL_OW 302
8654: AND
8655: IFFALSE 8906
// begin CenterNowOnUnits ( Mike ) ;
8657: LD_EXP 12
8661: PPUSH
8662: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
8666: LD_EXP 12
8670: PPUSH
8671: LD_STRING DM-Scout-1
8673: PPUSH
8674: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
8678: LD_EXP 10
8682: PPUSH
8683: LD_STRING DH-Scout-2
8685: PPUSH
8686: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
8690: LD_EXP 20
8694: PPUSH
8695: LD_STRING DKs-Scout-3
8697: PPUSH
8698: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
8702: LD_EXP 10
8706: PPUSH
8707: LD_STRING DH-Scout-4
8709: PPUSH
8710: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
8714: LD_EXP 10
8718: PPUSH
8719: LD_STRING DH-Scout-5
8721: PPUSH
8722: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 72
8733: PUSH
8734: LD_INT 122
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 89
8743: PUSH
8744: LD_INT 131
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 99
8753: PUSH
8754: LD_INT 139
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_INT 100
8763: PUSH
8764: LD_INT 148
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: ST_TO_ADDR
// for i in tmp do
8777: LD_ADDR_VAR 0 1
8781: PUSH
8782: LD_VAR 0 2
8786: PUSH
8787: FOR_IN
8788: IFFALSE 8846
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
8790: LD_VAR 0 1
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 1
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: LD_INT 2
8810: PPUSH
8811: LD_INT 6
8813: NEG
8814: PPUSH
8815: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
8819: LD_VAR 0 1
8823: PUSH
8824: LD_INT 1
8826: ARRAY
8827: PPUSH
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 2
8835: ARRAY
8836: PPUSH
8837: LD_INT 2
8839: PPUSH
8840: CALL_OW 331
// end ;
8844: GO 8787
8846: POP
8847: POP
// CenterOnXY ( 83 , 132 ) ;
8848: LD_INT 83
8850: PPUSH
8851: LD_INT 132
8853: PPUSH
8854: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
8858: LD_EXP 20
8862: PPUSH
8863: LD_STRING DKs-Scout-6
8865: PPUSH
8866: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
8870: LD_EXP 12
8874: PPUSH
8875: LD_STRING DM-Scout-7
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
8882: LD_EXP 12
8886: PPUSH
8887: LD_STRING DM-Scout-8
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
8894: LD_EXP 20
8898: PPUSH
8899: LD_STRING DKs-Scout-9
8901: PPUSH
8902: CALL_OW 88
// end ; if IsDead ( Mike ) then
8906: LD_EXP 12
8910: PPUSH
8911: CALL_OW 301
8915: IFFALSE 9082
// begin CenterNowOnUnits ( Kurt ) ;
8917: LD_EXP 20
8921: PPUSH
8922: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
8926: LD_EXP 20
8930: PPUSH
8931: LD_STRING DKs-Scout-b-1
8933: PPUSH
8934: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
8938: LD_EXP 20
8942: PPUSH
8943: LD_STRING DKs-Scout-b-2
8945: PPUSH
8946: CALL_OW 88
// if IsOk ( Givi ) then
8950: LD_EXP 11
8954: PPUSH
8955: CALL_OW 302
8959: IFFALSE 9034
// begin ComExit ( Givi ) ;
8961: LD_EXP 11
8965: PPUSH
8966: CALL 50527 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
8970: LD_EXP 11
8974: PPUSH
8975: LD_EXP 20
8979: PPUSH
8980: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
8984: LD_EXP 11
8988: PPUSH
8989: LD_STRING DG-Scout-b-3
8991: PPUSH
8992: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
8996: LD_EXP 11
9000: PPUSH
9001: LD_STRING DG-Scout-b-4
9003: PPUSH
9004: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9008: LD_EXP 11
9012: PPUSH
9013: LD_STRING DG-Scout-b-5
9015: PPUSH
9016: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9020: LD_EXP 10
9024: PPUSH
9025: LD_STRING DH-Scout-b-6
9027: PPUSH
9028: CALL_OW 88
// end else
9032: GO 9046
// Say ( Heike , DH-Scout-a-4 ) ;
9034: LD_EXP 10
9038: PPUSH
9039: LD_STRING DH-Scout-a-4
9041: PPUSH
9042: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9046: LD_EXP 20
9050: PPUSH
9051: LD_STRING DKs-Scout-b-7
9053: PPUSH
9054: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9058: LD_EXP 20
9062: PPUSH
9063: LD_STRING DKs-Scout-b-8
9065: PPUSH
9066: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9070: LD_EXP 20
9074: PPUSH
9075: LD_STRING DKs-Scout-b-9
9077: PPUSH
9078: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9082: LD_EXP 20
9086: PPUSH
9087: CALL_OW 301
9091: IFFALSE 9370
// begin CenterNowOnUnits ( Mike ) ;
9093: LD_EXP 12
9097: PPUSH
9098: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9102: LD_EXP 12
9106: PPUSH
9107: LD_STRING DM-Scout-a-1
9109: PPUSH
9110: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9114: LD_EXP 12
9118: PPUSH
9119: LD_STRING DM-Scout-a-2
9121: PPUSH
9122: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9126: LD_EXP 12
9130: PPUSH
9131: CALL_OW 256
9135: PUSH
9136: LD_INT 1000
9138: LESS
9139: IFFALSE 9155
// Say ( Heike , DH-Scout-a-3 ) else
9141: LD_EXP 10
9145: PPUSH
9146: LD_STRING DH-Scout-a-3
9148: PPUSH
9149: CALL_OW 88
9153: GO 9167
// Say ( Heike , DH-Scout-a-4 ) ;
9155: LD_EXP 10
9159: PPUSH
9160: LD_STRING DH-Scout-a-4
9162: PPUSH
9163: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9167: LD_EXP 12
9171: PPUSH
9172: LD_STRING DM-Scout-a-5
9174: PPUSH
9175: CALL_OW 88
// if IsOk ( Kaia ) then
9179: LD_EXP 15
9183: PPUSH
9184: CALL_OW 302
9188: IFFALSE 9370
// begin ComExit ( Kaia ) ;
9190: LD_EXP 15
9194: PPUSH
9195: CALL 50527 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9199: LD_EXP 15
9203: PPUSH
9204: LD_EXP 12
9208: PPUSH
9209: CALL_OW 172
// wait ( 0 0$2 ) ;
9213: LD_INT 70
9215: PPUSH
9216: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9220: LD_EXP 15
9224: PPUSH
9225: LD_EXP 12
9229: PPUSH
9230: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9234: LD_EXP 12
9238: PPUSH
9239: LD_EXP 15
9243: PPUSH
9244: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9248: LD_EXP 15
9252: PPUSH
9253: LD_STRING DK-Scout-a-6
9255: PPUSH
9256: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9260: LD_EXP 12
9264: PPUSH
9265: LD_STRING DM-Scout-a-7
9267: PPUSH
9268: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9272: LD_EXP 15
9276: PPUSH
9277: LD_STRING DK-Scout-a-8
9279: PPUSH
9280: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9284: LD_EXP 15
9288: PPUSH
9289: LD_STRING DK-Scout-a-9
9291: PPUSH
9292: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9296: LD_EXP 10
9300: PPUSH
9301: LD_STRING DH-Scout-a-10
9303: PPUSH
9304: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9308: LD_EXP 12
9312: PPUSH
9313: LD_EXP 10
9317: PPUSH
9318: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9322: LD_EXP 12
9326: PPUSH
9327: LD_STRING DM-Scout-a-11
9329: PPUSH
9330: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9334: LD_EXP 12
9338: PPUSH
9339: LD_STRING DM-Scout-a-12
9341: PPUSH
9342: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9346: LD_EXP 12
9350: PPUSH
9351: LD_STRING DM-Scout-a-13
9353: PPUSH
9354: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9358: LD_EXP 12
9362: PPUSH
9363: LD_STRING DM-Scout-a-14
9365: PPUSH
9366: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9370: LD_EXP 11
9374: PPUSH
9375: CALL_OW 302
9379: IFFALSE 9407
// begin Say ( Givi , DG-Scout-10 ) ;
9381: LD_EXP 11
9385: PPUSH
9386: LD_STRING DG-Scout-10
9388: PPUSH
9389: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9393: LD_EXP 11
9397: PPUSH
9398: LD_STRING DG-Scout-11
9400: PPUSH
9401: CALL_OW 88
// end else
9405: GO 9464
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9407: LD_EXP 22
9411: PPUSH
9412: LD_INT 26
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PPUSH
9422: CALL_OW 72
9426: PPUSH
9427: LD_STRING DArm-Scout-10
9429: PPUSH
9430: CALL 226 0 2
9434: NOT
9435: IFFALSE 9464
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9437: LD_EXP 22
9441: PPUSH
9442: LD_INT 26
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: PPUSH
9457: LD_STRING DArf-Scout-10
9459: PPUSH
9460: CALL 226 0 2
// Say ( Heike , DH-Scout-12 ) ;
9464: LD_EXP 10
9468: PPUSH
9469: LD_STRING DH-Scout-12
9471: PPUSH
9472: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
9476: LD_EXP 10
9480: PPUSH
9481: LD_STRING DH-Scout-13
9483: PPUSH
9484: CALL_OW 88
// InGameOff ;
9488: CALL_OW 9
// usAttacksAllowed := true ;
9492: LD_ADDR_EXP 6
9496: PUSH
9497: LD_INT 1
9499: ST_TO_ADDR
// end ;
9500: PPOPN 2
9502: END
// every 0 0$1 trigger scoutFailed do
9503: LD_EXP 4
9507: IFFALSE 9581
9509: GO 9511
9511: DISABLE
// begin wait ( 0 0$30 ) ;
9512: LD_INT 1050
9514: PPUSH
9515: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
9519: LD_EXP 10
9523: PPUSH
9524: LD_STRING DH-Scout-c-1
9526: PPUSH
9527: CALL_OW 88
// if not IsOk ( Givi ) then
9531: LD_EXP 11
9535: PPUSH
9536: CALL_OW 302
9540: NOT
9541: IFFALSE 9545
// exit ;
9543: GO 9581
// Say ( Givi , DG-Scout-c-2 ) ;
9545: LD_EXP 11
9549: PPUSH
9550: LD_STRING DG-Scout-c-2
9552: PPUSH
9553: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
9557: LD_EXP 11
9561: PPUSH
9562: LD_STRING DG-Scout-c-3
9564: PPUSH
9565: CALL_OW 88
// Say ( Heike , DH-Scout-c-4 ) ;
9569: LD_EXP 10
9573: PPUSH
9574: LD_STRING DH-Scout-c-4
9576: PPUSH
9577: CALL_OW 88
// end ;
9581: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
9582: LD_INT 22
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 30
9594: PUSH
9595: LD_INT 7
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: PUSH
9611: LD_EXP 21
9615: PPUSH
9616: CALL_OW 302
9620: AND
9621: IFFALSE 9706
9623: GO 9625
9625: DISABLE
// begin DialogueOn ;
9626: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
9630: LD_EXP 21
9634: PPUSH
9635: LD_STRING DA-Lab-1
9637: PPUSH
9638: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
9642: LD_EXP 10
9646: PPUSH
9647: LD_STRING DH-Lab-2
9649: PPUSH
9650: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
9654: LD_EXP 21
9658: PPUSH
9659: LD_STRING DA-Lab-3
9661: PPUSH
9662: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
9666: LD_EXP 21
9670: PPUSH
9671: LD_STRING DA-Lab-4
9673: PPUSH
9674: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
9678: LD_EXP 21
9682: PPUSH
9683: LD_STRING DA-Lab-5
9685: PPUSH
9686: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
9690: LD_EXP 10
9694: PPUSH
9695: LD_STRING DH-Lab-6
9697: PPUSH
9698: CALL_OW 88
// DialogueOff ;
9702: CALL_OW 7
// end ;
9706: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
9707: LD_INT 7
9709: PPUSH
9710: LD_INT 2
9712: PPUSH
9713: CALL_OW 321
9717: PUSH
9718: LD_INT 2
9720: EQUAL
9721: PUSH
9722: LD_EXP 11
9726: PPUSH
9727: CALL_OW 302
9731: AND
9732: IFFALSE 9901
9734: GO 9736
9736: DISABLE
// begin DialogueOn ;
9737: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
9741: LD_EXP 11
9745: PPUSH
9746: LD_STRING DG-Opt-1
9748: PPUSH
9749: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
9753: LD_EXP 10
9757: PPUSH
9758: LD_STRING DH-Opt-2
9760: PPUSH
9761: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
9765: LD_EXP 11
9769: PPUSH
9770: LD_STRING DG-Opt-3
9772: PPUSH
9773: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
9777: LD_EXP 11
9781: PPUSH
9782: LD_STRING DG-Opt-4
9784: PPUSH
9785: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
9789: LD_EXP 10
9793: PPUSH
9794: LD_STRING DH-Opt-5
9796: PPUSH
9797: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
9801: LD_EXP 11
9805: PPUSH
9806: LD_STRING DG-Opt-6
9808: PPUSH
9809: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
9813: LD_EXP 10
9817: PPUSH
9818: LD_STRING DH-Opt-7
9820: PPUSH
9821: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
9825: LD_EXP 11
9829: PPUSH
9830: LD_STRING DG-Opt-8
9832: PPUSH
9833: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
9837: LD_EXP 11
9841: PPUSH
9842: LD_STRING DG-Opt-9
9844: PPUSH
9845: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
9849: LD_EXP 10
9853: PPUSH
9854: LD_STRING DH-Opt-10
9856: PPUSH
9857: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
9861: LD_EXP 11
9865: PPUSH
9866: LD_STRING DG-Opt-11
9868: PPUSH
9869: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
9873: LD_EXP 11
9877: PPUSH
9878: LD_STRING DG-Opt-12
9880: PPUSH
9881: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
9885: LD_EXP 10
9889: PPUSH
9890: LD_STRING DH-Opt-13
9892: PPUSH
9893: CALL_OW 88
// DialogueOff ;
9897: CALL_OW 7
// end ;
9901: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
9902: LD_INT 40
9904: PPUSH
9905: LD_INT 2
9907: PPUSH
9908: CALL_OW 321
9912: PUSH
9913: LD_INT 2
9915: EQUAL
9916: PUSH
9917: LD_EXP 13
9921: PPUSH
9922: CALL_OW 302
9926: AND
9927: IFFALSE 10177
9929: GO 9931
9931: DISABLE
// begin DialogueOn ;
9932: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
9936: LD_EXP 13
9940: PPUSH
9941: LD_STRING DI-Roc-1
9943: PPUSH
9944: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
9948: LD_EXP 10
9952: PPUSH
9953: LD_STRING DH-Roc-2
9955: PPUSH
9956: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
9960: LD_EXP 13
9964: PPUSH
9965: LD_STRING DI-Roc-3
9967: PPUSH
9968: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
9972: LD_EXP 13
9976: PPUSH
9977: LD_STRING DI-Roc-4
9979: PPUSH
9980: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
9984: LD_EXP 15
9988: PPUSH
9989: LD_STRING DK-Roc-5
9991: PPUSH
9992: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
9996: LD_EXP 15
10000: PPUSH
10001: LD_STRING DK-Roc-6
10003: PPUSH
10004: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10008: LD_EXP 11
10012: PPUSH
10013: LD_STRING DG-Roc-7
10015: PPUSH
10016: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10020: LD_EXP 11
10024: PPUSH
10025: LD_STRING DG-Roc-8
10027: PPUSH
10028: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10032: LD_EXP 17
10036: PPUSH
10037: CALL_OW 302
10041: PUSH
10042: LD_EXP 15
10046: PPUSH
10047: CALL_OW 302
10051: AND
10052: PUSH
10053: LD_EXP 11
10057: PPUSH
10058: CALL_OW 302
10062: AND
10063: IFFALSE 10173
// begin Say ( Markov , DMar-Roc-9 ) ;
10065: LD_EXP 17
10069: PPUSH
10070: LD_STRING DMar-Roc-9
10072: PPUSH
10073: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10077: LD_EXP 17
10081: PPUSH
10082: LD_STRING DMar-Roc-10
10084: PPUSH
10085: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
10089: LD_EXP 15
10093: PPUSH
10094: LD_STRING DK-Roc-11
10096: PPUSH
10097: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
10101: LD_EXP 17
10105: PPUSH
10106: LD_STRING DMar-Roc-12
10108: PPUSH
10109: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
10113: LD_EXP 15
10117: PPUSH
10118: LD_STRING DK-Roc-13
10120: PPUSH
10121: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
10125: LD_EXP 11
10129: PPUSH
10130: LD_STRING DG-Roc-14
10132: PPUSH
10133: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
10137: LD_EXP 17
10141: PPUSH
10142: LD_STRING DMar-Roc-15
10144: PPUSH
10145: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
10149: LD_EXP 17
10153: PPUSH
10154: LD_STRING DMar-Roc-16
10156: PPUSH
10157: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_STRING DK-Roc-17
10168: PPUSH
10169: CALL_OW 88
// end ; DialogueOff ;
10173: CALL_OW 7
// end ;
10177: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
10178: LD_EXP 25
10182: PPUSH
10183: CALL_OW 256
10187: PUSH
10188: LD_INT 1000
10190: LESS
10191: PUSH
10192: LD_INT 22
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 21
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 23
10214: PUSH
10215: LD_INT 1
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: PUSH
10232: LD_INT 6
10234: LESS
10235: OR
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 69
10276: PUSH
10277: LD_INT 2
10279: LESS
10280: OR
10281: IFFALSE 11332
10283: GO 10285
10285: DISABLE
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
10290: PPUSH
// begin usAttacksAllowed := false ;
10291: LD_ADDR_EXP 6
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// usSurrender := true ;
10299: LD_ADDR_EXP 7
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
10307: LD_INT 1
10309: PPUSH
10310: LD_INT 2
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
10323: LD_ADDR_VAR 0 1
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 2
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 21
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 60
10350: PUSH
10351: EMPTY
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PUSH
10364: FOR_IN
10365: IFFALSE 10378
// ComStop ( i ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL_OW 141
10376: GO 10364
10378: POP
10379: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
10380: LD_ADDR_VAR 0 1
10384: PUSH
10385: LD_INT 22
10387: PUSH
10388: LD_INT 2
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 3
10397: PUSH
10398: LD_INT 50
10400: PUSH
10401: EMPTY
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 21
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10445
// SetLives ( i , 251 ) ;
10431: LD_VAR 0 1
10435: PPUSH
10436: LD_INT 251
10438: PPUSH
10439: CALL_OW 234
10443: GO 10428
10445: POP
10446: POP
// InGameOn ;
10447: CALL_OW 8
// ComExit ( usCommander ) ;
10451: LD_EXP 25
10455: PPUSH
10456: CALL 50527 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
10460: LD_EXP 25
10464: PPUSH
10465: LD_INT 81
10467: PPUSH
10468: LD_INT 143
10470: PPUSH
10471: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
10475: LD_EXP 25
10479: PPUSH
10480: LD_INT 81
10482: PPUSH
10483: LD_INT 139
10485: PPUSH
10486: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
10490: LD_INT 81
10492: PPUSH
10493: LD_INT 144
10495: PPUSH
10496: LD_INT 2
10498: PPUSH
10499: LD_INT 10
10501: NEG
10502: PPUSH
10503: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
10507: LD_EXP 25
10511: PPUSH
10512: CALL_OW 87
// wait ( 0 0$2 ) ;
10516: LD_INT 70
10518: PPUSH
10519: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
10523: LD_EXP 25
10527: PPUSH
10528: LD_STRING DCa-Surrender-1
10530: PPUSH
10531: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
10535: LD_EXP 10
10539: PPUSH
10540: LD_STRING DH-Surrender-2
10542: PPUSH
10543: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
10547: LD_EXP 10
10551: PPUSH
10552: CALL_OW 310
10556: PPUSH
10557: CALL_OW 247
10561: PUSH
10562: LD_INT 3
10564: EQUAL
10565: IFFALSE 10583
// begin ComExit ( Heike ) ;
10567: LD_EXP 10
10571: PPUSH
10572: CALL 50527 0 1
// wait ( 3 ) ;
10576: LD_INT 3
10578: PPUSH
10579: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
10583: LD_EXP 10
10587: PPUSH
10588: LD_INT 82
10590: PPUSH
10591: LD_INT 133
10593: PPUSH
10594: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
10598: LD_EXP 10
10602: PPUSH
10603: LD_EXP 25
10607: PPUSH
10608: CALL_OW 179
// wait ( 0 0$3 ) ;
10612: LD_INT 105
10614: PPUSH
10615: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
10619: LD_EXP 10
10623: PPUSH
10624: LD_STRING DH-Surrender-3
10626: PPUSH
10627: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
10631: LD_EXP 10
10635: PPUSH
10636: LD_STRING DH-Surrender-4
10638: PPUSH
10639: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
10643: LD_INT 81
10645: PPUSH
10646: LD_INT 144
10648: PPUSH
10649: LD_INT 2
10651: PPUSH
10652: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
10666: LD_ADDR_VAR 0 1
10670: PUSH
10671: LD_INT 22
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 23
10683: PUSH
10684: LD_INT 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 54
10693: PUSH
10694: EMPTY
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: PPUSH
10702: CALL_OW 69
10706: PUSH
10707: FOR_IN
10708: IFFALSE 10721
// ComExit ( i ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: CALL 50527 0 1
10719: GO 10707
10721: POP
10722: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 25
10740: PUSH
10741: LD_INT 4
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
10757: LD_ADDR_VAR 0 2
10761: PUSH
10762: LD_INT 22
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: LD_INT 50
10777: PUSH
10778: EMPTY
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 69
10793: ST_TO_ADDR
// if sci and hurts then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_VAR 0 2
10803: AND
10804: IFFALSE 10866
// begin for i := 1 to hurts do
10806: LD_ADDR_VAR 0 1
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_VAR 0 2
10820: PUSH
10821: FOR_TO
10822: IFFALSE 10864
// if i <= sci then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_VAR 0 3
10833: LESSEQUAL
10834: IFFALSE 10862
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
10836: LD_VAR 0 3
10840: PUSH
10841: LD_VAR 0 1
10845: ARRAY
10846: PPUSH
10847: LD_VAR 0 2
10851: PUSH
10852: LD_VAR 0 1
10856: ARRAY
10857: PPUSH
10858: CALL_OW 188
10862: GO 10821
10864: POP
10865: POP
// end ; if IsOk ( Givi ) then
10866: LD_EXP 11
10870: PPUSH
10871: CALL_OW 302
10875: IFFALSE 10889
// Say ( Givi , DG-Surrender-5 ) ;
10877: LD_EXP 11
10881: PPUSH
10882: LD_STRING DG-Surrender-5
10884: PPUSH
10885: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
10889: LD_EXP 25
10893: PPUSH
10894: LD_STRING DCa-Surrender-6
10896: PPUSH
10897: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
10901: LD_EXP 25
10905: PPUSH
10906: LD_STRING DCa-Surrender-7
10908: PPUSH
10909: CALL_OW 88
// Say ( Givi , DG-Surrender-8 ) ;
10913: LD_EXP 11
10917: PPUSH
10918: LD_STRING DG-Surrender-8
10920: PPUSH
10921: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
10925: LD_EXP 25
10929: PPUSH
10930: LD_STRING DCa-Surrender-9
10932: PPUSH
10933: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
10937: LD_EXP 10
10941: PPUSH
10942: LD_STRING DH-Surrender-10
10944: PPUSH
10945: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
10949: LD_EXP 25
10953: PPUSH
10954: LD_STRING DCa-Surrender-11
10956: PPUSH
10957: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
10961: LD_EXP 10
10965: PPUSH
10966: LD_STRING DH-Surrender-12
10968: PPUSH
10969: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
10973: LD_EXP 25
10977: PPUSH
10978: LD_STRING DCa-Surrender-13
10980: PPUSH
10981: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
10985: LD_EXP 25
10989: PPUSH
10990: LD_STRING DCa-Surrender-14
10992: PPUSH
10993: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
10997: LD_EXP 25
11001: PPUSH
11002: LD_STRING DCa-Surrender-15
11004: PPUSH
11005: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11009: LD_EXP 25
11013: PPUSH
11014: LD_STRING DCa-Surrender-16
11016: PPUSH
11017: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11021: LD_EXP 15
11025: PPUSH
11026: LD_STRING DK-Surrender-17
11028: PPUSH
11029: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11033: LD_EXP 19
11037: PPUSH
11038: LD_STRING DO-Surrender-18
11040: PPUSH
11041: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11045: LD_EXP 19
11049: PPUSH
11050: LD_STRING DO-Surrender-19
11052: PPUSH
11053: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
11057: LD_EXP 20
11061: PPUSH
11062: LD_STRING DKs-Surrender-20
11064: PPUSH
11065: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
11069: LD_EXP 20
11073: PPUSH
11074: LD_STRING DKs-Surrender-21
11076: PPUSH
11077: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
11081: LD_EXP 17
11085: PPUSH
11086: LD_STRING DMar-Surrender-22
11088: PPUSH
11089: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
11093: LD_EXP 17
11097: PPUSH
11098: LD_STRING DMar-Surrender-23
11100: PPUSH
11101: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
11105: LD_EXP 16
11109: PPUSH
11110: LD_STRING DS-Surrender-24
11112: PPUSH
11113: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
11117: LD_EXP 21
11121: PPUSH
11122: LD_STRING DA-Surrender-25
11124: PPUSH
11125: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
11129: LD_EXP 13
11133: PPUSH
11134: LD_STRING DI-Surrender-26
11136: PPUSH
11137: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
11141: LD_EXP 14
11145: PPUSH
11146: LD_STRING DKam-Surrender-27
11148: PPUSH
11149: CALL_OW 88
// Say ( Givi , DG-Surrender-28 ) ;
11153: LD_EXP 11
11157: PPUSH
11158: LD_STRING DG-Surrender-28
11160: PPUSH
11161: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
11165: LD_EXP 11
11169: PPUSH
11170: LD_STRING DG-Surrender-29
11172: PPUSH
11173: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
11177: LD_EXP 11
11181: PPUSH
11182: LD_STRING DG-Surrender-30
11184: PPUSH
11185: CALL_OW 88
// PrepareRussianFirstWaveAttack ;
11189: CALL 12228 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
11193: LD_INT 22
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: PPUSH
11208: LD_INT 176
11210: PUSH
11211: LD_INT 123
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: PPUSH
11221: CALL 52534 0 2
// if not IsEnvironment ( 190 , 150 ) then
11225: LD_INT 190
11227: PPUSH
11228: LD_INT 150
11230: PPUSH
11231: CALL_OW 351
11235: NOT
11236: IFFALSE 11255
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
11238: LD_INT 190
11240: PPUSH
11241: LD_INT 150
11243: PPUSH
11244: LD_INT 2
11246: PPUSH
11247: LD_INT 8
11249: NEG
11250: PPUSH
11251: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
11255: LD_INT 193
11257: PPUSH
11258: LD_INT 150
11260: PPUSH
11261: CALL_OW 84
// Say ( Markov , DMar-Surrender-31 ) ;
11265: LD_EXP 17
11269: PPUSH
11270: LD_STRING DMar-Surrender-31
11272: PPUSH
11273: CALL_OW 88
// Say ( Heike , DH-Surrender-32 ) ;
11277: LD_EXP 10
11281: PPUSH
11282: LD_STRING DH-Surrender-32
11284: PPUSH
11285: CALL_OW 88
// InGameOff ;
11289: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
11293: LD_STRING M2
11295: PPUSH
11296: CALL_OW 337
// wait ( 0 0$20 ) ;
11300: LD_INT 700
11302: PPUSH
11303: CALL_OW 67
// PrepareRussianLastWaveAttack ;
11307: CALL 12590 0 0
// russianAttack := true ;
11311: LD_ADDR_EXP 8
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
11319: LD_INT 190
11321: PPUSH
11322: LD_INT 150
11324: PPUSH
11325: LD_INT 2
11327: PPUSH
11328: CALL_OW 331
// end ;
11332: PPOPN 3
11334: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
11335: LD_EXP 15
11339: PPUSH
11340: CALL_OW 256
11344: PUSH
11345: LD_INT 3
11347: LESS
11348: IFFALSE 11385
11350: GO 11352
11352: DISABLE
// begin DialogueOn ;
11353: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
11357: LD_EXP 15
11361: PPUSH
11362: LD_STRING DK-Dead-1
11364: PPUSH
11365: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
11369: LD_EXP 15
11373: PPUSH
11374: LD_STRING DK-Dead-2
11376: PPUSH
11377: CALL_OW 91
// DialogueOff ;
11381: CALL_OW 7
// end ;
11385: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , ar_rocket_launcher ] ] ) do
11386: LD_INT 22
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 21
11398: PUSH
11399: LD_INT 28
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PPUSH
11410: CALL_OW 69
11414: IFFALSE 11427
11416: GO 11418
11418: DISABLE
// hasRockets := true ;
11419: LD_ADDR_EXP 9
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
11427: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
11428: LD_EXP 8
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_INT 3
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 69
11447: NOT
11448: AND
11449: IFFALSE 12059
11451: GO 11453
11453: DISABLE
// begin DialogueOn ;
11454: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
11458: LD_EXP 10
11462: PPUSH
11463: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
11467: LD_EXP 10
11471: PPUSH
11472: LD_STRING DH-End-1
11474: PPUSH
11475: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
11479: LD_EXP 18
11483: PPUSH
11484: LD_STRING DShar-End-2
11486: PPUSH
11487: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
11491: LD_EXP 15
11495: PPUSH
11496: LD_STRING DK-End-3
11498: PPUSH
11499: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
11503: LD_EXP 10
11507: PPUSH
11508: LD_STRING DH-End-4
11510: PPUSH
11511: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
11515: LD_EXP 18
11519: PPUSH
11520: LD_STRING DShar-End-5
11522: PPUSH
11523: CALL_OW 94
// if IsOk ( Markov ) then
11527: LD_EXP 17
11531: PPUSH
11532: CALL_OW 302
11536: IFFALSE 11550
// Say ( Kaia , DK-End-6 ) ;
11538: LD_EXP 15
11542: PPUSH
11543: LD_STRING DK-End-6
11545: PPUSH
11546: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
11550: LD_EXP 15
11554: PPUSH
11555: LD_STRING DK-End-7
11557: PPUSH
11558: CALL_OW 88
// if IsOk ( Kaia ) then
11562: LD_EXP 15
11566: PPUSH
11567: CALL_OW 302
11571: IFFALSE 11609
// begin Say ( Givi , DG-End-8 ) ;
11573: LD_EXP 11
11577: PPUSH
11578: LD_STRING DG-End-8
11580: PPUSH
11581: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
11585: LD_EXP 11
11589: PPUSH
11590: LD_STRING DG-End-9
11592: PPUSH
11593: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
11597: LD_EXP 10
11601: PPUSH
11602: LD_STRING DH-End-10
11604: PPUSH
11605: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
11609: LD_EXP 10
11613: PPUSH
11614: LD_STRING DH-End-11
11616: PPUSH
11617: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
11621: LD_INT 7
11623: PPUSH
11624: LD_INT 2
11626: PPUSH
11627: CALL_OW 321
11631: PUSH
11632: LD_INT 2
11634: EQUAL
11635: IFFALSE 11649
// AddMedal ( med1 , 1 ) else
11637: LD_STRING med1
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 101
11647: GO 11660
// AddMedal ( med1 , - 1 ) ;
11649: LD_STRING med1
11651: PPUSH
11652: LD_INT 1
11654: NEG
11655: PPUSH
11656: CALL_OW 101
// if hasRockets then
11660: LD_EXP 9
11664: IFFALSE 11678
// AddMedal ( med2 , 1 ) else
11666: LD_STRING med2
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: CALL_OW 101
11676: GO 11689
// AddMedal ( med2 , - 1 ) ;
11678: LD_STRING med2
11680: PPUSH
11681: LD_INT 1
11683: NEG
11684: PPUSH
11685: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
11689: LD_OWVAR 1
11693: PUSH
11694: LD_INT 105000
11696: PUSH
11697: LD_INT 94500
11699: PUSH
11700: LD_INT 84000
11702: PUSH
11703: LD_INT 73500
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: LD_OWVAR 67
11716: ARRAY
11717: LESS
11718: IFFALSE 11732
// AddMedal ( med3 , 1 ) else
11720: LD_STRING med3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 101
11730: GO 11743
// AddMedal ( med3 , - 1 ) ;
11732: LD_STRING med3
11734: PPUSH
11735: LD_INT 1
11737: NEG
11738: PPUSH
11739: CALL_OW 101
// GiveMedals ( MAIN ) ;
11743: LD_STRING MAIN
11745: PPUSH
11746: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
11750: LD_INT 22
11752: PUSH
11753: LD_INT 2
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 23
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 21
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 69
11789: PPUSH
11790: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
11794: LD_EXP 25
11798: PPUSH
11799: LD_STRING 07_UsCommander
11801: PPUSH
11802: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
11806: LD_INT 22
11808: PUSH
11809: LD_INT 1
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 23
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 69
11845: PUSH
11846: LD_EXP 25
11850: DIFF
11851: PPUSH
11852: LD_STRING 07_Americans
11854: PPUSH
11855: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
11859: LD_EXP 10
11863: PPUSH
11864: LD_STRING 07_Heike
11866: PPUSH
11867: CALL_OW 38
// if Aviradze then
11871: LD_EXP 21
11875: IFFALSE 11889
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
11877: LD_EXP 21
11881: PPUSH
11882: LD_STRING 07_Aviradze
11884: PPUSH
11885: CALL_OW 38
// if Ibrahim then
11889: LD_EXP 13
11893: IFFALSE 11907
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
11895: LD_EXP 13
11899: PPUSH
11900: LD_STRING 07_Ibrahim
11902: PPUSH
11903: CALL_OW 38
// if Kamil then
11907: LD_EXP 14
11911: IFFALSE 11925
// SaveCharacters ( Kamil , 07_Kamil ) ;
11913: LD_EXP 14
11917: PPUSH
11918: LD_STRING 07_Kamil
11920: PPUSH
11921: CALL_OW 38
// if Sophia then
11925: LD_EXP 16
11929: IFFALSE 11943
// SaveCharacters ( Sophia , 07_Sophia ) ;
11931: LD_EXP 16
11935: PPUSH
11936: LD_STRING 07_Sophia
11938: PPUSH
11939: CALL_OW 38
// if Kaia then
11943: LD_EXP 15
11947: IFFALSE 11961
// SaveCharacters ( Kaia , 07_Kaia ) ;
11949: LD_EXP 15
11953: PPUSH
11954: LD_STRING 07_Kaia
11956: PPUSH
11957: CALL_OW 38
// if Givi then
11961: LD_EXP 11
11965: IFFALSE 11979
// SaveCharacters ( Givi , 07_Givi ) ;
11967: LD_EXP 11
11971: PPUSH
11972: LD_STRING 07_Givi
11974: PPUSH
11975: CALL_OW 38
// if Mike then
11979: LD_EXP 12
11983: IFFALSE 11997
// SaveCharacters ( Mike , 07_Mike ) ;
11985: LD_EXP 12
11989: PPUSH
11990: LD_STRING 07_Mike
11992: PPUSH
11993: CALL_OW 38
// if Markov then
11997: LD_EXP 17
12001: IFFALSE 12015
// SaveCharacters ( Markov , 07_Markov ) ;
12003: LD_EXP 17
12007: PPUSH
12008: LD_STRING 07_Markov
12010: PPUSH
12011: CALL_OW 38
// if Kurt then
12015: LD_EXP 20
12019: IFFALSE 12033
// SaveCharacters ( Kurt , 07_Kurt ) ;
12021: LD_EXP 20
12025: PPUSH
12026: LD_STRING 07_Kurt
12028: PPUSH
12029: CALL_OW 38
// if heikeSecondSquad then
12033: LD_EXP 22
12037: IFFALSE 12051
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
12039: LD_EXP 22
12043: PPUSH
12044: LD_STRING 07_others
12046: PPUSH
12047: CALL_OW 38
// YouWin ;
12051: CALL_OW 103
// DialogueOff ;
12055: CALL_OW 7
// end ; end_of_file
12059: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 500 , 450 , 400 , 380 ] [ Difficulty ] do
12060: LD_INT 7
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 287
12070: PUSH
12071: LD_INT 500
12073: PUSH
12074: LD_INT 450
12076: PUSH
12077: LD_INT 400
12079: PUSH
12080: LD_INT 380
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: LD_OWVAR 67
12093: ARRAY
12094: LESS
12095: IFFALSE 12122
12097: GO 12099
12099: DISABLE
// begin enable ;
12100: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
12101: LD_INT 1
12103: PPUSH
12104: LD_INT 5
12106: PPUSH
12107: CALL_OW 12
12111: PPUSH
12112: LD_INT 7
12114: PPUSH
12115: LD_INT 1
12117: PPUSH
12118: CALL_OW 55
// end ;
12122: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
12123: LD_INT 8
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 287
12133: PUSH
12134: LD_INT 300
12136: PUSH
12137: LD_INT 250
12139: PUSH
12140: LD_INT 200
12142: PUSH
12143: LD_INT 180
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_OWVAR 67
12156: ARRAY
12157: LESS
12158: IFFALSE 12185
12160: GO 12162
12162: DISABLE
// begin enable ;
12163: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
12164: LD_INT 1
12166: PPUSH
12167: LD_INT 5
12169: PPUSH
12170: CALL_OW 12
12174: PPUSH
12175: LD_INT 8
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: CALL_OW 55
// end ;
12185: END
// every 0 0$30 trigger tick < 4 4$10 do
12186: LD_OWVAR 1
12190: PUSH
12191: LD_INT 8750
12193: LESS
12194: IFFALSE 12227
12196: GO 12198
12198: DISABLE
// begin enable ;
12199: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
12200: LD_INT 1
12202: PPUSH
12203: LD_INT 5
12205: PPUSH
12206: CALL_OW 12
12210: PPUSH
12211: LD_INT 130
12213: PPUSH
12214: LD_INT 18
12216: PPUSH
12217: LD_INT 12
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 56
// end ; end_of_file
12227: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
12228: LD_INT 0
12230: PPUSH
12231: PPUSH
12232: PPUSH
12233: PPUSH
12234: PPUSH
// uc_side := 3 ;
12235: LD_ADDR_OWVAR 20
12239: PUSH
12240: LD_INT 3
12242: ST_TO_ADDR
// uc_nation := 3 ;
12243: LD_ADDR_OWVAR 21
12247: PUSH
12248: LD_INT 3
12250: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: LD_INT 184
12258: PUSH
12259: LD_INT 144
12261: PUSH
12262: LD_INT 5
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 191
12272: PUSH
12273: LD_INT 147
12275: PUSH
12276: LD_INT 5
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 202
12286: PUSH
12287: LD_INT 151
12289: PUSH
12290: LD_INT 4
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 210
12300: PUSH
12301: LD_INT 152
12303: PUSH
12304: LD_INT 4
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: ST_TO_ADDR
// for i := 1 to 4 do
12318: LD_ADDR_VAR 0 2
12322: PUSH
12323: DOUBLE
12324: LD_INT 1
12326: DEC
12327: ST_TO_ADDR
12328: LD_INT 4
12330: PUSH
12331: FOR_TO
12332: IFFALSE 12501
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
12334: LD_INT 24
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 43
12345: PUSH
12346: LD_INT 44
12348: PUSH
12349: LD_INT 46
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_VAR 0 2
12361: PUSH
12362: LD_INT 3
12364: MOD
12365: PUSH
12366: LD_INT 1
12368: PLUS
12369: ARRAY
12370: PPUSH
12371: LD_INT 40
12373: PPUSH
12374: CALL 18266 0 5
// veh := CreateVehicle ;
12378: LD_ADDR_VAR 0 5
12382: PUSH
12383: CALL_OW 45
12387: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
12388: LD_VAR 0 5
12392: PPUSH
12393: LD_VAR 0 3
12397: PUSH
12398: LD_VAR 0 2
12402: ARRAY
12403: PUSH
12404: LD_INT 3
12406: ARRAY
12407: PPUSH
12408: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12412: LD_VAR 0 5
12416: PPUSH
12417: LD_VAR 0 3
12421: PUSH
12422: LD_VAR 0 2
12426: ARRAY
12427: PUSH
12428: LD_INT 1
12430: ARRAY
12431: PPUSH
12432: LD_VAR 0 3
12436: PUSH
12437: LD_VAR 0 2
12441: ARRAY
12442: PUSH
12443: LD_INT 2
12445: ARRAY
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12454: LD_INT 0
12456: PPUSH
12457: LD_INT 6
12459: PUSH
12460: LD_INT 7
12462: PUSH
12463: LD_INT 8
12465: PUSH
12466: LD_INT 8
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: LD_OWVAR 67
12479: ARRAY
12480: PPUSH
12481: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12485: CALL_OW 44
12489: PPUSH
12490: LD_VAR 0 5
12494: PPUSH
12495: CALL_OW 52
// end ;
12499: GO 12331
12501: POP
12502: POP
// for i := 1 to 4 do
12503: LD_ADDR_VAR 0 2
12507: PUSH
12508: DOUBLE
12509: LD_INT 1
12511: DEC
12512: ST_TO_ADDR
12513: LD_INT 4
12515: PUSH
12516: FOR_TO
12517: IFFALSE 12583
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12519: LD_INT 0
12521: PPUSH
12522: LD_INT 6
12524: PUSH
12525: LD_INT 7
12527: PUSH
12528: LD_INT 8
12530: PUSH
12531: LD_INT 8
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_OWVAR 67
12544: ARRAY
12545: PPUSH
12546: CALL_OW 381
// un := CreateHuman ;
12550: LD_ADDR_VAR 0 4
12554: PUSH
12555: CALL_OW 44
12559: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
12560: LD_VAR 0 4
12564: PPUSH
12565: LD_INT 185
12567: PPUSH
12568: LD_INT 145
12570: PPUSH
12571: LD_INT 6
12573: PPUSH
12574: LD_INT 0
12576: PPUSH
12577: CALL_OW 50
// end ;
12581: GO 12516
12583: POP
12584: POP
// end ;
12585: LD_VAR 0 1
12589: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
12594: PPUSH
// uc_side := 3 ;
12595: LD_ADDR_OWVAR 20
12599: PUSH
12600: LD_INT 3
12602: ST_TO_ADDR
// if Difficulty > 1 then
12603: LD_OWVAR 67
12607: PUSH
12608: LD_INT 1
12610: GREATER
12611: IFFALSE 12773
// begin uc_nation := 0 ;
12613: LD_ADDR_OWVAR 21
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
12621: LD_ADDR_VAR 0 2
12625: PUSH
12626: DOUBLE
12627: LD_INT 1
12629: DEC
12630: ST_TO_ADDR
12631: LD_INT 4
12633: PUSH
12634: LD_INT 5
12636: PUSH
12637: LD_INT 6
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: LD_OWVAR 67
12649: PUSH
12650: LD_INT 1
12652: PLUS
12653: ARRAY
12654: PUSH
12655: FOR_TO
12656: IFFALSE 12771
// begin hc_class := class_apeman_soldier ;
12658: LD_ADDR_OWVAR 28
12662: PUSH
12663: LD_INT 15
12665: ST_TO_ADDR
// hc_gallery :=  ;
12666: LD_ADDR_OWVAR 33
12670: PUSH
12671: LD_STRING 
12673: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
12674: LD_ADDR_OWVAR 26
12678: PUSH
12679: LD_STRING Treci
12681: PUSH
12682: LD_STRING Ivan
12684: PUSH
12685: LD_STRING Yaromir
12687: PUSH
12688: LD_STRING Nadzieia
12690: PUSH
12691: LD_STRING Krasna
12693: PUSH
12694: LD_STRING Piaty
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_INT 6
12710: PPUSH
12711: CALL_OW 12
12715: ARRAY
12716: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
12717: LD_ADDR_OWVAR 31
12721: PUSH
12722: LD_INT 5
12724: PUSH
12725: LD_INT 0
12727: PUSH
12728: LD_INT 0
12730: PUSH
12731: LD_INT 0
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: ST_TO_ADDR
// hc_sex := sex_male ;
12740: LD_ADDR_OWVAR 27
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
12748: CALL_OW 44
12752: PPUSH
12753: LD_INT 178
12755: PPUSH
12756: LD_INT 148
12758: PPUSH
12759: LD_INT 6
12761: PPUSH
12762: LD_INT 0
12764: PPUSH
12765: CALL_OW 50
// end ;
12769: GO 12655
12771: POP
12772: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
12773: LD_ADDR_VAR 0 2
12777: PUSH
12778: DOUBLE
12779: LD_INT 1
12781: DEC
12782: ST_TO_ADDR
12783: LD_INT 4
12785: PUSH
12786: LD_INT 6
12788: PUSH
12789: LD_INT 7
12791: PUSH
12792: LD_INT 9
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: PUSH
12801: LD_OWVAR 67
12805: ARRAY
12806: PUSH
12807: FOR_TO
12808: IFFALSE 12975
// begin uc_nation := 3 ;
12810: LD_ADDR_OWVAR 21
12814: PUSH
12815: LD_INT 3
12817: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
12818: LD_INT 22
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: LD_INT 45
12829: PUSH
12830: LD_INT 43
12832: PUSH
12833: LD_INT 44
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_VAR 0 2
12845: PUSH
12846: LD_INT 3
12848: MOD
12849: PUSH
12850: LD_INT 1
12852: PLUS
12853: ARRAY
12854: PPUSH
12855: LD_INT 44
12857: PPUSH
12858: CALL 18266 0 5
// veh := CreateVehicle ;
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: CALL_OW 45
12871: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 4
12879: PPUSH
12880: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_INT 0
12894: PPUSH
12895: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
12899: LD_INT 0
12901: PPUSH
12902: LD_INT 6
12904: PUSH
12905: LD_INT 7
12907: PUSH
12908: LD_INT 8
12910: PUSH
12911: LD_INT 8
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: LD_OWVAR 67
12924: ARRAY
12925: PPUSH
12926: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12930: CALL_OW 44
12934: PPUSH
12935: LD_VAR 0 3
12939: PPUSH
12940: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 178
12951: PUSH
12952: LD_INT 137
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: PPUSH
12962: CALL 52534 0 2
// wait ( 0 0$2 ) ;
12966: LD_INT 70
12968: PPUSH
12969: CALL_OW 67
// end ;
12973: GO 12807
12975: POP
12976: POP
// end ;
12977: LD_VAR 0 1
12981: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
12982: LD_INT 22
12984: PUSH
12985: LD_INT 3
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 32
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PPUSH
13006: CALL_OW 69
13010: IFFALSE 13098
13012: GO 13014
13014: DISABLE
13015: LD_INT 0
13017: PPUSH
13018: PPUSH
// begin enable ;
13019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
13020: LD_ADDR_VAR 0 2
13024: PUSH
13025: LD_INT 22
13027: PUSH
13028: LD_INT 3
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 32
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 69
13053: ST_TO_ADDR
// for i in tmp do
13054: LD_ADDR_VAR 0 1
13058: PUSH
13059: LD_VAR 0 2
13063: PUSH
13064: FOR_IN
13065: IFFALSE 13096
// if GetFuel ( i ) < 3 then
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 261
13076: PUSH
13077: LD_INT 3
13079: LESS
13080: IFFALSE 13094
// SetFuel ( i , 3 ) ;
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_INT 3
13089: PPUSH
13090: CALL_OW 240
13094: GO 13064
13096: POP
13097: POP
// end ;
13098: PPOPN 2
13100: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
13101: LD_EXP 8
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: AND
13135: IFFALSE 13399
13137: GO 13139
13139: DISABLE
13140: LD_INT 0
13142: PPUSH
13143: PPUSH
13144: PPUSH
// begin enable ;
13145: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_INT 22
13153: PUSH
13154: LD_INT 3
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 25
13163: PUSH
13164: LD_INT 3
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 3
13173: PUSH
13174: LD_INT 55
13176: PUSH
13177: EMPTY
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: PPUSH
13189: CALL_OW 69
13193: ST_TO_ADDR
// if mech then
13194: LD_VAR 0 2
13198: IFFALSE 13268
// for i in mech do
13200: LD_ADDR_VAR 0 1
13204: PUSH
13205: LD_VAR 0 2
13209: PUSH
13210: FOR_IN
13211: IFFALSE 13266
// begin if IsInArea ( i , escapeArea ) then
13213: LD_VAR 0 1
13217: PPUSH
13218: LD_INT 13
13220: PPUSH
13221: CALL_OW 308
13225: IFFALSE 13238
// RemoveUnit ( i ) else
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 64
13236: GO 13264
// if IsOk ( i ) then
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL_OW 302
13247: IFFALSE 13264
// ComMoveXY ( i , 196 , 155 ) ;
13249: LD_VAR 0 1
13253: PPUSH
13254: LD_INT 196
13256: PPUSH
13257: LD_INT 155
13259: PPUSH
13260: CALL_OW 111
// end ;
13264: GO 13210
13266: POP
13267: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_INT 3
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: LD_INT 25
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 25
13298: PUSH
13299: LD_INT 15
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 21
13308: PUSH
13309: LD_INT 2
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 50
13324: PUSH
13325: EMPTY
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: ST_TO_ADDR
// if tmp then
13338: LD_VAR 0 3
13342: IFFALSE 13399
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_INT 171
13351: PUSH
13352: LD_INT 106
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 145
13361: PUSH
13362: LD_INT 69
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 132
13371: PUSH
13372: LD_INT 38
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 126
13381: PUSH
13382: LD_INT 15
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL 52534 0 2
// end ; end_of_file
13399: PPOPN 3
13401: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13402: LD_INT 0
13404: PPUSH
13405: PPUSH
// if exist_mode then
13406: LD_VAR 0 2
13410: IFFALSE 13435
// unit := CreateCharacter ( prefix & ident ) else
13412: LD_ADDR_VAR 0 5
13416: PUSH
13417: LD_VAR 0 3
13421: PUSH
13422: LD_VAR 0 1
13426: STR
13427: PPUSH
13428: CALL_OW 34
13432: ST_TO_ADDR
13433: GO 13450
// unit := NewCharacter ( ident ) ;
13435: LD_ADDR_VAR 0 5
13439: PUSH
13440: LD_VAR 0 1
13444: PPUSH
13445: CALL_OW 25
13449: ST_TO_ADDR
// result := unit ;
13450: LD_ADDR_VAR 0 4
13454: PUSH
13455: LD_VAR 0 5
13459: ST_TO_ADDR
// end ;
13460: LD_VAR 0 4
13464: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
// if not side or not nation then
13469: LD_VAR 0 1
13473: NOT
13474: PUSH
13475: LD_VAR 0 2
13479: NOT
13480: OR
13481: IFFALSE 13485
// exit ;
13483: GO 14253
// case nation of nation_american :
13485: LD_VAR 0 2
13489: PUSH
13490: LD_INT 1
13492: DOUBLE
13493: EQUAL
13494: IFTRUE 13498
13496: GO 13712
13498: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13499: LD_ADDR_VAR 0 4
13503: PUSH
13504: LD_INT 35
13506: PUSH
13507: LD_INT 45
13509: PUSH
13510: LD_INT 46
13512: PUSH
13513: LD_INT 47
13515: PUSH
13516: LD_INT 82
13518: PUSH
13519: LD_INT 83
13521: PUSH
13522: LD_INT 84
13524: PUSH
13525: LD_INT 85
13527: PUSH
13528: LD_INT 86
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 6
13539: PUSH
13540: LD_INT 15
13542: PUSH
13543: LD_INT 16
13545: PUSH
13546: LD_INT 7
13548: PUSH
13549: LD_INT 12
13551: PUSH
13552: LD_INT 13
13554: PUSH
13555: LD_INT 10
13557: PUSH
13558: LD_INT 14
13560: PUSH
13561: LD_INT 20
13563: PUSH
13564: LD_INT 21
13566: PUSH
13567: LD_INT 22
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 32
13575: PUSH
13576: LD_INT 27
13578: PUSH
13579: LD_INT 36
13581: PUSH
13582: LD_INT 69
13584: PUSH
13585: LD_INT 39
13587: PUSH
13588: LD_INT 34
13590: PUSH
13591: LD_INT 40
13593: PUSH
13594: LD_INT 48
13596: PUSH
13597: LD_INT 49
13599: PUSH
13600: LD_INT 50
13602: PUSH
13603: LD_INT 51
13605: PUSH
13606: LD_INT 52
13608: PUSH
13609: LD_INT 53
13611: PUSH
13612: LD_INT 54
13614: PUSH
13615: LD_INT 55
13617: PUSH
13618: LD_INT 56
13620: PUSH
13621: LD_INT 57
13623: PUSH
13624: LD_INT 58
13626: PUSH
13627: LD_INT 59
13629: PUSH
13630: LD_INT 60
13632: PUSH
13633: LD_INT 61
13635: PUSH
13636: LD_INT 62
13638: PUSH
13639: LD_INT 80
13641: PUSH
13642: LD_INT 82
13644: PUSH
13645: LD_INT 83
13647: PUSH
13648: LD_INT 84
13650: PUSH
13651: LD_INT 85
13653: PUSH
13654: LD_INT 86
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: ST_TO_ADDR
13710: GO 14177
13712: LD_INT 2
13714: DOUBLE
13715: EQUAL
13716: IFTRUE 13720
13718: GO 13946
13720: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13721: LD_ADDR_VAR 0 4
13725: PUSH
13726: LD_INT 35
13728: PUSH
13729: LD_INT 45
13731: PUSH
13732: LD_INT 46
13734: PUSH
13735: LD_INT 47
13737: PUSH
13738: LD_INT 82
13740: PUSH
13741: LD_INT 83
13743: PUSH
13744: LD_INT 84
13746: PUSH
13747: LD_INT 85
13749: PUSH
13750: LD_INT 87
13752: PUSH
13753: LD_INT 70
13755: PUSH
13756: LD_INT 1
13758: PUSH
13759: LD_INT 11
13761: PUSH
13762: LD_INT 3
13764: PUSH
13765: LD_INT 4
13767: PUSH
13768: LD_INT 5
13770: PUSH
13771: LD_INT 6
13773: PUSH
13774: LD_INT 15
13776: PUSH
13777: LD_INT 18
13779: PUSH
13780: LD_INT 7
13782: PUSH
13783: LD_INT 17
13785: PUSH
13786: LD_INT 8
13788: PUSH
13789: LD_INT 20
13791: PUSH
13792: LD_INT 21
13794: PUSH
13795: LD_INT 22
13797: PUSH
13798: LD_INT 72
13800: PUSH
13801: LD_INT 26
13803: PUSH
13804: LD_INT 69
13806: PUSH
13807: LD_INT 39
13809: PUSH
13810: LD_INT 40
13812: PUSH
13813: LD_INT 41
13815: PUSH
13816: LD_INT 42
13818: PUSH
13819: LD_INT 43
13821: PUSH
13822: LD_INT 48
13824: PUSH
13825: LD_INT 49
13827: PUSH
13828: LD_INT 50
13830: PUSH
13831: LD_INT 51
13833: PUSH
13834: LD_INT 52
13836: PUSH
13837: LD_INT 53
13839: PUSH
13840: LD_INT 54
13842: PUSH
13843: LD_INT 55
13845: PUSH
13846: LD_INT 56
13848: PUSH
13849: LD_INT 60
13851: PUSH
13852: LD_INT 61
13854: PUSH
13855: LD_INT 62
13857: PUSH
13858: LD_INT 66
13860: PUSH
13861: LD_INT 67
13863: PUSH
13864: LD_INT 68
13866: PUSH
13867: LD_INT 81
13869: PUSH
13870: LD_INT 82
13872: PUSH
13873: LD_INT 83
13875: PUSH
13876: LD_INT 84
13878: PUSH
13879: LD_INT 85
13881: PUSH
13882: LD_INT 87
13884: PUSH
13885: LD_INT 88
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: ST_TO_ADDR
13944: GO 14177
13946: LD_INT 3
13948: DOUBLE
13949: EQUAL
13950: IFTRUE 13954
13952: GO 14176
13954: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13955: LD_ADDR_VAR 0 4
13959: PUSH
13960: LD_INT 46
13962: PUSH
13963: LD_INT 47
13965: PUSH
13966: LD_INT 1
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: LD_INT 82
13974: PUSH
13975: LD_INT 83
13977: PUSH
13978: LD_INT 84
13980: PUSH
13981: LD_INT 85
13983: PUSH
13984: LD_INT 86
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: LD_INT 9
13992: PUSH
13993: LD_INT 20
13995: PUSH
13996: LD_INT 19
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 24
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 25
14010: PUSH
14011: LD_INT 28
14013: PUSH
14014: LD_INT 29
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: LD_INT 31
14022: PUSH
14023: LD_INT 37
14025: PUSH
14026: LD_INT 38
14028: PUSH
14029: LD_INT 32
14031: PUSH
14032: LD_INT 27
14034: PUSH
14035: LD_INT 33
14037: PUSH
14038: LD_INT 69
14040: PUSH
14041: LD_INT 39
14043: PUSH
14044: LD_INT 34
14046: PUSH
14047: LD_INT 40
14049: PUSH
14050: LD_INT 71
14052: PUSH
14053: LD_INT 23
14055: PUSH
14056: LD_INT 44
14058: PUSH
14059: LD_INT 48
14061: PUSH
14062: LD_INT 49
14064: PUSH
14065: LD_INT 50
14067: PUSH
14068: LD_INT 51
14070: PUSH
14071: LD_INT 52
14073: PUSH
14074: LD_INT 53
14076: PUSH
14077: LD_INT 54
14079: PUSH
14080: LD_INT 55
14082: PUSH
14083: LD_INT 56
14085: PUSH
14086: LD_INT 57
14088: PUSH
14089: LD_INT 58
14091: PUSH
14092: LD_INT 59
14094: PUSH
14095: LD_INT 63
14097: PUSH
14098: LD_INT 64
14100: PUSH
14101: LD_INT 65
14103: PUSH
14104: LD_INT 82
14106: PUSH
14107: LD_INT 83
14109: PUSH
14110: LD_INT 84
14112: PUSH
14113: LD_INT 85
14115: PUSH
14116: LD_INT 86
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: ST_TO_ADDR
14174: GO 14177
14176: POP
// if state > - 1 and state < 3 then
14177: LD_VAR 0 3
14181: PUSH
14182: LD_INT 1
14184: NEG
14185: GREATER
14186: PUSH
14187: LD_VAR 0 3
14191: PUSH
14192: LD_INT 3
14194: LESS
14195: AND
14196: IFFALSE 14253
// for i in result do
14198: LD_ADDR_VAR 0 5
14202: PUSH
14203: LD_VAR 0 4
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14251
// if GetTech ( i , side ) <> state then
14211: LD_VAR 0 5
14215: PPUSH
14216: LD_VAR 0 1
14220: PPUSH
14221: CALL_OW 321
14225: PUSH
14226: LD_VAR 0 3
14230: NONEQUAL
14231: IFFALSE 14249
// result := result diff i ;
14233: LD_ADDR_VAR 0 4
14237: PUSH
14238: LD_VAR 0 4
14242: PUSH
14243: LD_VAR 0 5
14247: DIFF
14248: ST_TO_ADDR
14249: GO 14208
14251: POP
14252: POP
// end ;
14253: LD_VAR 0 4
14257: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14258: LD_INT 0
14260: PPUSH
14261: PPUSH
14262: PPUSH
// result := true ;
14263: LD_ADDR_VAR 0 3
14267: PUSH
14268: LD_INT 1
14270: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14271: LD_ADDR_VAR 0 5
14275: PUSH
14276: LD_VAR 0 2
14280: PPUSH
14281: CALL_OW 480
14285: ST_TO_ADDR
// if not tmp then
14286: LD_VAR 0 5
14290: NOT
14291: IFFALSE 14295
// exit ;
14293: GO 14344
// for i in tmp do
14295: LD_ADDR_VAR 0 4
14299: PUSH
14300: LD_VAR 0 5
14304: PUSH
14305: FOR_IN
14306: IFFALSE 14342
// if GetTech ( i , side ) <> state_researched then
14308: LD_VAR 0 4
14312: PPUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL_OW 321
14322: PUSH
14323: LD_INT 2
14325: NONEQUAL
14326: IFFALSE 14340
// begin result := false ;
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_INT 0
14335: ST_TO_ADDR
// exit ;
14336: POP
14337: POP
14338: GO 14344
// end ;
14340: GO 14305
14342: POP
14343: POP
// end ;
14344: LD_VAR 0 3
14348: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14349: LD_INT 0
14351: PPUSH
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14364: LD_VAR 0 1
14368: NOT
14369: PUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 257
14379: PUSH
14380: LD_INT 9
14382: NONEQUAL
14383: OR
14384: IFFALSE 14388
// exit ;
14386: GO 14961
// side := GetSide ( unit ) ;
14388: LD_ADDR_VAR 0 9
14392: PUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 255
14402: ST_TO_ADDR
// tech_space := tech_spacanom ;
14403: LD_ADDR_VAR 0 12
14407: PUSH
14408: LD_INT 29
14410: ST_TO_ADDR
// tech_time := tech_taurad ;
14411: LD_ADDR_VAR 0 13
14415: PUSH
14416: LD_INT 28
14418: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14419: LD_ADDR_VAR 0 11
14423: PUSH
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 310
14433: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14434: LD_VAR 0 11
14438: PPUSH
14439: CALL_OW 247
14443: PUSH
14444: LD_INT 2
14446: EQUAL
14447: IFFALSE 14451
// exit ;
14449: GO 14961
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14451: LD_ADDR_VAR 0 8
14455: PUSH
14456: LD_INT 81
14458: PUSH
14459: LD_VAR 0 9
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 3
14470: PUSH
14471: LD_INT 21
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 69
14493: ST_TO_ADDR
// if not tmp then
14494: LD_VAR 0 8
14498: NOT
14499: IFFALSE 14503
// exit ;
14501: GO 14961
// if in_unit then
14503: LD_VAR 0 11
14507: IFFALSE 14531
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14509: LD_ADDR_VAR 0 10
14513: PUSH
14514: LD_VAR 0 8
14518: PPUSH
14519: LD_VAR 0 11
14523: PPUSH
14524: CALL_OW 74
14528: ST_TO_ADDR
14529: GO 14551
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14531: LD_ADDR_VAR 0 10
14535: PUSH
14536: LD_VAR 0 8
14540: PPUSH
14541: LD_VAR 0 1
14545: PPUSH
14546: CALL_OW 74
14550: ST_TO_ADDR
// if not enemy then
14551: LD_VAR 0 10
14555: NOT
14556: IFFALSE 14560
// exit ;
14558: GO 14961
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14560: LD_VAR 0 11
14564: PUSH
14565: LD_VAR 0 11
14569: PPUSH
14570: LD_VAR 0 10
14574: PPUSH
14575: CALL_OW 296
14579: PUSH
14580: LD_INT 13
14582: GREATER
14583: AND
14584: PUSH
14585: LD_VAR 0 1
14589: PPUSH
14590: LD_VAR 0 10
14594: PPUSH
14595: CALL_OW 296
14599: PUSH
14600: LD_INT 12
14602: GREATER
14603: OR
14604: IFFALSE 14608
// exit ;
14606: GO 14961
// missile := [ 1 ] ;
14608: LD_ADDR_VAR 0 14
14612: PUSH
14613: LD_INT 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14619: LD_VAR 0 9
14623: PPUSH
14624: LD_VAR 0 12
14628: PPUSH
14629: CALL_OW 325
14633: IFFALSE 14662
// missile := Insert ( missile , missile + 1 , 2 ) ;
14635: LD_ADDR_VAR 0 14
14639: PUSH
14640: LD_VAR 0 14
14644: PPUSH
14645: LD_VAR 0 14
14649: PUSH
14650: LD_INT 1
14652: PLUS
14653: PPUSH
14654: LD_INT 2
14656: PPUSH
14657: CALL_OW 2
14661: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14662: LD_VAR 0 9
14666: PPUSH
14667: LD_VAR 0 13
14671: PPUSH
14672: CALL_OW 325
14676: PUSH
14677: LD_VAR 0 10
14681: PPUSH
14682: CALL_OW 255
14686: PPUSH
14687: LD_VAR 0 13
14691: PPUSH
14692: CALL_OW 325
14696: NOT
14697: AND
14698: IFFALSE 14727
// missile := Insert ( missile , missile + 1 , 3 ) ;
14700: LD_ADDR_VAR 0 14
14704: PUSH
14705: LD_VAR 0 14
14709: PPUSH
14710: LD_VAR 0 14
14714: PUSH
14715: LD_INT 1
14717: PLUS
14718: PPUSH
14719: LD_INT 3
14721: PPUSH
14722: CALL_OW 2
14726: ST_TO_ADDR
// if missile < 2 then
14727: LD_VAR 0 14
14731: PUSH
14732: LD_INT 2
14734: LESS
14735: IFFALSE 14739
// exit ;
14737: GO 14961
// x := GetX ( enemy ) ;
14739: LD_ADDR_VAR 0 4
14743: PUSH
14744: LD_VAR 0 10
14748: PPUSH
14749: CALL_OW 250
14753: ST_TO_ADDR
// y := GetY ( enemy ) ;
14754: LD_ADDR_VAR 0 5
14758: PUSH
14759: LD_VAR 0 10
14763: PPUSH
14764: CALL_OW 251
14768: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14769: LD_ADDR_VAR 0 6
14773: PUSH
14774: LD_VAR 0 4
14778: PUSH
14779: LD_INT 1
14781: NEG
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 12
14790: PLUS
14791: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14792: LD_ADDR_VAR 0 7
14796: PUSH
14797: LD_VAR 0 5
14801: PUSH
14802: LD_INT 1
14804: NEG
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 12
14813: PLUS
14814: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14815: LD_VAR 0 6
14819: PPUSH
14820: LD_VAR 0 7
14824: PPUSH
14825: CALL_OW 488
14829: NOT
14830: IFFALSE 14852
// begin _x := x ;
14832: LD_ADDR_VAR 0 6
14836: PUSH
14837: LD_VAR 0 4
14841: ST_TO_ADDR
// _y := y ;
14842: LD_ADDR_VAR 0 7
14846: PUSH
14847: LD_VAR 0 5
14851: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_VAR 0 14
14864: PPUSH
14865: CALL_OW 12
14869: ST_TO_ADDR
// case i of 1 :
14870: LD_VAR 0 3
14874: PUSH
14875: LD_INT 1
14877: DOUBLE
14878: EQUAL
14879: IFTRUE 14883
14881: GO 14900
14883: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_VAR 0 10
14893: PPUSH
14894: CALL_OW 115
14898: GO 14961
14900: LD_INT 2
14902: DOUBLE
14903: EQUAL
14904: IFTRUE 14908
14906: GO 14930
14908: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14909: LD_VAR 0 1
14913: PPUSH
14914: LD_VAR 0 6
14918: PPUSH
14919: LD_VAR 0 7
14923: PPUSH
14924: CALL_OW 153
14928: GO 14961
14930: LD_INT 3
14932: DOUBLE
14933: EQUAL
14934: IFTRUE 14938
14936: GO 14960
14938: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14939: LD_VAR 0 1
14943: PPUSH
14944: LD_VAR 0 6
14948: PPUSH
14949: LD_VAR 0 7
14953: PPUSH
14954: CALL_OW 154
14958: GO 14961
14960: POP
// end ;
14961: LD_VAR 0 2
14965: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
14973: PPUSH
// if not unit or not building then
14974: LD_VAR 0 1
14978: NOT
14979: PUSH
14980: LD_VAR 0 2
14984: NOT
14985: OR
14986: IFFALSE 14990
// exit ;
14988: GO 15148
// x := GetX ( building ) ;
14990: LD_ADDR_VAR 0 5
14994: PUSH
14995: LD_VAR 0 2
14999: PPUSH
15000: CALL_OW 250
15004: ST_TO_ADDR
// y := GetY ( building ) ;
15005: LD_ADDR_VAR 0 6
15009: PUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 251
15019: ST_TO_ADDR
// for i = 0 to 5 do
15020: LD_ADDR_VAR 0 4
15024: PUSH
15025: DOUBLE
15026: LD_INT 0
15028: DEC
15029: ST_TO_ADDR
15030: LD_INT 5
15032: PUSH
15033: FOR_TO
15034: IFFALSE 15146
// begin _x := ShiftX ( x , i , 3 ) ;
15036: LD_ADDR_VAR 0 7
15040: PUSH
15041: LD_VAR 0 5
15045: PPUSH
15046: LD_VAR 0 4
15050: PPUSH
15051: LD_INT 3
15053: PPUSH
15054: CALL_OW 272
15058: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15059: LD_ADDR_VAR 0 8
15063: PUSH
15064: LD_VAR 0 6
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_INT 3
15076: PPUSH
15077: CALL_OW 273
15081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15082: LD_VAR 0 7
15086: PPUSH
15087: LD_VAR 0 8
15091: PPUSH
15092: CALL_OW 488
15096: NOT
15097: IFFALSE 15101
// continue ;
15099: GO 15033
// if HexInfo ( _x , _y ) = 0 then
15101: LD_VAR 0 7
15105: PPUSH
15106: LD_VAR 0 8
15110: PPUSH
15111: CALL_OW 428
15115: PUSH
15116: LD_INT 0
15118: EQUAL
15119: IFFALSE 15144
// begin ComMoveXY ( unit , _x , _y ) ;
15121: LD_VAR 0 1
15125: PPUSH
15126: LD_VAR 0 7
15130: PPUSH
15131: LD_VAR 0 8
15135: PPUSH
15136: CALL_OW 111
// exit ;
15140: POP
15141: POP
15142: GO 15148
// end ; end ;
15144: GO 15033
15146: POP
15147: POP
// end ;
15148: LD_VAR 0 3
15152: RET
// export function ScanBase ( side , base_area ) ; begin
15153: LD_INT 0
15155: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_VAR 0 2
15165: PPUSH
15166: LD_INT 81
15168: PUSH
15169: LD_VAR 0 1
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 70
15182: ST_TO_ADDR
// end ;
15183: LD_VAR 0 3
15187: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15188: LD_INT 0
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
// result := false ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 0
15201: ST_TO_ADDR
// side := GetSide ( unit ) ;
15202: LD_ADDR_VAR 0 3
15206: PUSH
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 255
15216: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15217: LD_ADDR_VAR 0 4
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 248
15231: ST_TO_ADDR
// case nat of 1 :
15232: LD_VAR 0 4
15236: PUSH
15237: LD_INT 1
15239: DOUBLE
15240: EQUAL
15241: IFTRUE 15245
15243: GO 15256
15245: POP
// tech := tech_lassight ; 2 :
15246: LD_ADDR_VAR 0 5
15250: PUSH
15251: LD_INT 12
15253: ST_TO_ADDR
15254: GO 15295
15256: LD_INT 2
15258: DOUBLE
15259: EQUAL
15260: IFTRUE 15264
15262: GO 15275
15264: POP
// tech := tech_mortar ; 3 :
15265: LD_ADDR_VAR 0 5
15269: PUSH
15270: LD_INT 41
15272: ST_TO_ADDR
15273: GO 15295
15275: LD_INT 3
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15294
15283: POP
// tech := tech_bazooka ; end ;
15284: LD_ADDR_VAR 0 5
15288: PUSH
15289: LD_INT 44
15291: ST_TO_ADDR
15292: GO 15295
15294: POP
// if Researched ( side , tech ) then
15295: LD_VAR 0 3
15299: PPUSH
15300: LD_VAR 0 5
15304: PPUSH
15305: CALL_OW 325
15309: IFFALSE 15336
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15311: LD_ADDR_VAR 0 2
15315: PUSH
15316: LD_INT 5
15318: PUSH
15319: LD_INT 8
15321: PUSH
15322: LD_INT 9
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: PUSH
15330: LD_VAR 0 4
15334: ARRAY
15335: ST_TO_ADDR
// end ;
15336: LD_VAR 0 2
15340: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
15345: PPUSH
// if not mines then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15499
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15355: LD_ADDR_VAR 0 5
15359: PUSH
15360: LD_INT 81
15362: PUSH
15363: LD_VAR 0 1
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 3
15374: PUSH
15375: LD_INT 21
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PPUSH
15393: CALL_OW 69
15397: ST_TO_ADDR
// for i in mines do
15398: LD_ADDR_VAR 0 4
15402: PUSH
15403: LD_VAR 0 2
15407: PUSH
15408: FOR_IN
15409: IFFALSE 15497
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15411: LD_VAR 0 4
15415: PUSH
15416: LD_INT 1
15418: ARRAY
15419: PPUSH
15420: LD_VAR 0 4
15424: PUSH
15425: LD_INT 2
15427: ARRAY
15428: PPUSH
15429: CALL_OW 458
15433: NOT
15434: IFFALSE 15438
// continue ;
15436: GO 15408
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15438: LD_VAR 0 4
15442: PUSH
15443: LD_INT 1
15445: ARRAY
15446: PPUSH
15447: LD_VAR 0 4
15451: PUSH
15452: LD_INT 2
15454: ARRAY
15455: PPUSH
15456: CALL_OW 428
15460: PUSH
15461: LD_VAR 0 5
15465: IN
15466: IFFALSE 15495
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15468: LD_VAR 0 4
15472: PUSH
15473: LD_INT 1
15475: ARRAY
15476: PPUSH
15477: LD_VAR 0 4
15481: PUSH
15482: LD_INT 2
15484: ARRAY
15485: PPUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 456
// end ;
15495: GO 15408
15497: POP
15498: POP
// end ;
15499: LD_VAR 0 3
15503: RET
// export function Count ( array ) ; var i ; begin
15504: LD_INT 0
15506: PPUSH
15507: PPUSH
// result := 0 ;
15508: LD_ADDR_VAR 0 2
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// for i in array do
15516: LD_ADDR_VAR 0 3
15520: PUSH
15521: LD_VAR 0 1
15525: PUSH
15526: FOR_IN
15527: IFFALSE 15551
// if i then
15529: LD_VAR 0 3
15533: IFFALSE 15549
// result := result + 1 ;
15535: LD_ADDR_VAR 0 2
15539: PUSH
15540: LD_VAR 0 2
15544: PUSH
15545: LD_INT 1
15547: PLUS
15548: ST_TO_ADDR
15549: GO 15526
15551: POP
15552: POP
// end ;
15553: LD_VAR 0 2
15557: RET
// export function IsEmpty ( building ) ; begin
15558: LD_INT 0
15560: PPUSH
// if not building then
15561: LD_VAR 0 1
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 15613
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15570: LD_ADDR_VAR 0 2
15574: PUSH
15575: LD_VAR 0 1
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_VAR 0 1
15587: PPUSH
15588: CALL_OW 255
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 58
15599: PUSH
15600: EMPTY
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PPUSH
15607: CALL_OW 69
15611: IN
15612: ST_TO_ADDR
// end ;
15613: LD_VAR 0 2
15617: RET
// export function IsNotFull ( building ) ; begin
15618: LD_INT 0
15620: PPUSH
// if not building then
15621: LD_VAR 0 1
15625: NOT
15626: IFFALSE 15630
// exit ;
15628: GO 15649
// result := UnitsInside ( building ) < 6 ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 313
15644: PUSH
15645: LD_INT 6
15647: LESS
15648: ST_TO_ADDR
// end ;
15649: LD_VAR 0 2
15653: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
15659: PPUSH
// tmp := [ ] ;
15660: LD_ADDR_VAR 0 3
15664: PUSH
15665: EMPTY
15666: ST_TO_ADDR
// list := [ ] ;
15667: LD_ADDR_VAR 0 5
15671: PUSH
15672: EMPTY
15673: ST_TO_ADDR
// for i = 16 to 25 do
15674: LD_ADDR_VAR 0 4
15678: PUSH
15679: DOUBLE
15680: LD_INT 16
15682: DEC
15683: ST_TO_ADDR
15684: LD_INT 25
15686: PUSH
15687: FOR_TO
15688: IFFALSE 15761
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_VAR 0 3
15699: PUSH
15700: LD_INT 22
15702: PUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 255
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 91
15719: PUSH
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 6
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 30
15735: PUSH
15736: LD_VAR 0 4
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: ADD
15758: ST_TO_ADDR
15759: GO 15687
15761: POP
15762: POP
// for i = 1 to tmp do
15763: LD_ADDR_VAR 0 4
15767: PUSH
15768: DOUBLE
15769: LD_INT 1
15771: DEC
15772: ST_TO_ADDR
15773: LD_VAR 0 3
15777: PUSH
15778: FOR_TO
15779: IFFALSE 15867
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: LD_VAR 0 5
15790: PUSH
15791: LD_VAR 0 3
15795: PUSH
15796: LD_VAR 0 4
15800: ARRAY
15801: PPUSH
15802: CALL_OW 266
15806: PUSH
15807: LD_VAR 0 3
15811: PUSH
15812: LD_VAR 0 4
15816: ARRAY
15817: PPUSH
15818: CALL_OW 250
15822: PUSH
15823: LD_VAR 0 3
15827: PUSH
15828: LD_VAR 0 4
15832: ARRAY
15833: PPUSH
15834: CALL_OW 251
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: LD_VAR 0 4
15848: ARRAY
15849: PPUSH
15850: CALL_OW 254
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: ADD
15864: ST_TO_ADDR
15865: GO 15778
15867: POP
15868: POP
// result := list ;
15869: LD_ADDR_VAR 0 2
15873: PUSH
15874: LD_VAR 0 5
15878: ST_TO_ADDR
// end ;
15879: LD_VAR 0 2
15883: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15884: LD_INT 0
15886: PPUSH
15887: PPUSH
15888: PPUSH
15889: PPUSH
15890: PPUSH
15891: PPUSH
15892: PPUSH
// if not factory then
15893: LD_VAR 0 1
15897: NOT
15898: IFFALSE 15902
// exit ;
15900: GO 16495
// if control = control_apeman then
15902: LD_VAR 0 4
15906: PUSH
15907: LD_INT 5
15909: EQUAL
15910: IFFALSE 16019
// begin tmp := UnitsInside ( factory ) ;
15912: LD_ADDR_VAR 0 8
15916: PUSH
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 313
15926: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15927: LD_VAR 0 8
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 12
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: NOT
15947: IFFALSE 15957
// control := control_manual ;
15949: LD_ADDR_VAR 0 4
15953: PUSH
15954: LD_INT 1
15956: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15957: LD_ADDR_VAR 0 8
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: CALL 15654 0 1
15971: ST_TO_ADDR
// if tmp then
15972: LD_VAR 0 8
15976: IFFALSE 16019
// begin for i in tmp do
15978: LD_ADDR_VAR 0 7
15982: PUSH
15983: LD_VAR 0 8
15987: PUSH
15988: FOR_IN
15989: IFFALSE 16017
// if i [ 1 ] = b_ext_radio then
15991: LD_VAR 0 7
15995: PUSH
15996: LD_INT 1
15998: ARRAY
15999: PUSH
16000: LD_INT 22
16002: EQUAL
16003: IFFALSE 16015
// begin control := control_remote ;
16005: LD_ADDR_VAR 0 4
16009: PUSH
16010: LD_INT 2
16012: ST_TO_ADDR
// break ;
16013: GO 16017
// end ;
16015: GO 15988
16017: POP
16018: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16019: LD_VAR 0 1
16023: PPUSH
16024: LD_VAR 0 2
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_VAR 0 4
16038: PPUSH
16039: LD_VAR 0 5
16043: PPUSH
16044: CALL_OW 448
16048: IFFALSE 16083
// begin result := [ chassis , engine , control , weapon ] ;
16050: LD_ADDR_VAR 0 6
16054: PUSH
16055: LD_VAR 0 2
16059: PUSH
16060: LD_VAR 0 3
16064: PUSH
16065: LD_VAR 0 4
16069: PUSH
16070: LD_VAR 0 5
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: ST_TO_ADDR
// exit ;
16081: GO 16495
// end ; _chassis := AvailableChassisList ( factory ) ;
16083: LD_ADDR_VAR 0 9
16087: PUSH
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 475
16097: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16098: LD_ADDR_VAR 0 11
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 476
16112: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16113: LD_ADDR_VAR 0 12
16117: PUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 477
16127: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16128: LD_ADDR_VAR 0 10
16132: PUSH
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 478
16142: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16143: LD_VAR 0 9
16147: NOT
16148: PUSH
16149: LD_VAR 0 11
16153: NOT
16154: OR
16155: PUSH
16156: LD_VAR 0 12
16160: NOT
16161: OR
16162: PUSH
16163: LD_VAR 0 10
16167: NOT
16168: OR
16169: IFFALSE 16204
// begin result := [ chassis , engine , control , weapon ] ;
16171: LD_ADDR_VAR 0 6
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_VAR 0 3
16185: PUSH
16186: LD_VAR 0 4
16190: PUSH
16191: LD_VAR 0 5
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// exit ;
16202: GO 16495
// end ; if not chassis in _chassis then
16204: LD_VAR 0 2
16208: PUSH
16209: LD_VAR 0 9
16213: IN
16214: NOT
16215: IFFALSE 16241
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16217: LD_ADDR_VAR 0 2
16221: PUSH
16222: LD_VAR 0 9
16226: PUSH
16227: LD_INT 1
16229: PPUSH
16230: LD_VAR 0 9
16234: PPUSH
16235: CALL_OW 12
16239: ARRAY
16240: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL 16500 0 2
16255: NOT
16256: IFFALSE 16315
// repeat engine := _engine [ 1 ] ;
16258: LD_ADDR_VAR 0 3
16262: PUSH
16263: LD_VAR 0 11
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16272: LD_ADDR_VAR 0 11
16276: PUSH
16277: LD_VAR 0 11
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: CALL_OW 3
16289: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_VAR 0 3
16299: PPUSH
16300: CALL 16500 0 2
16304: PUSH
16305: LD_VAR 0 11
16309: PUSH
16310: EMPTY
16311: EQUAL
16312: OR
16313: IFFALSE 16258
// if not control in _control then
16315: LD_VAR 0 4
16319: PUSH
16320: LD_VAR 0 12
16324: IN
16325: NOT
16326: IFFALSE 16352
// control := _control [ rand ( 1 , _control ) ] ;
16328: LD_ADDR_VAR 0 4
16332: PUSH
16333: LD_VAR 0 12
16337: PUSH
16338: LD_INT 1
16340: PPUSH
16341: LD_VAR 0 12
16345: PPUSH
16346: CALL_OW 12
16350: ARRAY
16351: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16352: LD_VAR 0 2
16356: PPUSH
16357: LD_VAR 0 5
16361: PPUSH
16362: CALL 16720 0 2
16366: NOT
16367: IFFALSE 16426
// repeat weapon := _weapon [ 1 ] ;
16369: LD_ADDR_VAR 0 5
16373: PUSH
16374: LD_VAR 0 10
16378: PUSH
16379: LD_INT 1
16381: ARRAY
16382: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16383: LD_ADDR_VAR 0 10
16387: PUSH
16388: LD_VAR 0 10
16392: PPUSH
16393: LD_INT 1
16395: PPUSH
16396: CALL_OW 3
16400: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16401: LD_VAR 0 2
16405: PPUSH
16406: LD_VAR 0 5
16410: PPUSH
16411: CALL 16720 0 2
16415: PUSH
16416: LD_VAR 0 10
16420: PUSH
16421: EMPTY
16422: EQUAL
16423: OR
16424: IFFALSE 16369
// result := [ ] ;
16426: LD_ADDR_VAR 0 6
16430: PUSH
16431: EMPTY
16432: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_VAR 0 2
16442: PPUSH
16443: LD_VAR 0 3
16447: PPUSH
16448: LD_VAR 0 4
16452: PPUSH
16453: LD_VAR 0 5
16457: PPUSH
16458: CALL_OW 448
16462: IFFALSE 16495
// result := [ chassis , engine , control , weapon ] ;
16464: LD_ADDR_VAR 0 6
16468: PUSH
16469: LD_VAR 0 2
16473: PUSH
16474: LD_VAR 0 3
16478: PUSH
16479: LD_VAR 0 4
16483: PUSH
16484: LD_VAR 0 5
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: ST_TO_ADDR
// end ;
16495: LD_VAR 0 6
16499: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16500: LD_INT 0
16502: PPUSH
// if not chassis or not engine then
16503: LD_VAR 0 1
16507: NOT
16508: PUSH
16509: LD_VAR 0 2
16513: NOT
16514: OR
16515: IFFALSE 16519
// exit ;
16517: GO 16715
// case engine of engine_solar :
16519: LD_VAR 0 2
16523: PUSH
16524: LD_INT 2
16526: DOUBLE
16527: EQUAL
16528: IFTRUE 16532
16530: GO 16570
16532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16533: LD_ADDR_VAR 0 3
16537: PUSH
16538: LD_INT 11
16540: PUSH
16541: LD_INT 12
16543: PUSH
16544: LD_INT 13
16546: PUSH
16547: LD_INT 14
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: LD_INT 3
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: ST_TO_ADDR
16568: GO 16699
16570: LD_INT 1
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16640
16578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16579: LD_ADDR_VAR 0 3
16583: PUSH
16584: LD_INT 11
16586: PUSH
16587: LD_INT 12
16589: PUSH
16590: LD_INT 13
16592: PUSH
16593: LD_INT 14
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: LD_INT 4
16607: PUSH
16608: LD_INT 5
16610: PUSH
16611: LD_INT 21
16613: PUSH
16614: LD_INT 23
16616: PUSH
16617: LD_INT 22
16619: PUSH
16620: LD_INT 24
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: ST_TO_ADDR
16638: GO 16699
16640: LD_INT 3
16642: DOUBLE
16643: EQUAL
16644: IFTRUE 16648
16646: GO 16698
16648: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16649: LD_ADDR_VAR 0 3
16653: PUSH
16654: LD_INT 13
16656: PUSH
16657: LD_INT 14
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: LD_INT 4
16668: PUSH
16669: LD_INT 5
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 22
16677: PUSH
16678: LD_INT 23
16680: PUSH
16681: LD_INT 24
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: ST_TO_ADDR
16696: GO 16699
16698: POP
// result := ( chassis in result ) ;
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: LD_VAR 0 1
16708: PUSH
16709: LD_VAR 0 3
16713: IN
16714: ST_TO_ADDR
// end ;
16715: LD_VAR 0 3
16719: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16720: LD_INT 0
16722: PPUSH
// if not chassis or not weapon then
16723: LD_VAR 0 1
16727: NOT
16728: PUSH
16729: LD_VAR 0 2
16733: NOT
16734: OR
16735: IFFALSE 16739
// exit ;
16737: GO 17801
// case weapon of us_machine_gun :
16739: LD_VAR 0 2
16743: PUSH
16744: LD_INT 2
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16782
16752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16753: LD_ADDR_VAR 0 3
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: LD_INT 4
16769: PUSH
16770: LD_INT 5
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: ST_TO_ADDR
16780: GO 17785
16782: LD_INT 3
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16820
16790: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16791: LD_ADDR_VAR 0 3
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: LD_INT 3
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: LD_INT 5
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: ST_TO_ADDR
16818: GO 17785
16820: LD_INT 11
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16858
16828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16829: LD_ADDR_VAR 0 3
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: LD_INT 3
16842: PUSH
16843: LD_INT 4
16845: PUSH
16846: LD_INT 5
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: ST_TO_ADDR
16856: GO 17785
16858: LD_INT 4
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16892
16866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: LD_INT 2
16874: PUSH
16875: LD_INT 3
16877: PUSH
16878: LD_INT 4
16880: PUSH
16881: LD_INT 5
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: ST_TO_ADDR
16890: GO 17785
16892: LD_INT 5
16894: DOUBLE
16895: EQUAL
16896: IFTRUE 16900
16898: GO 16926
16900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16901: LD_ADDR_VAR 0 3
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: LD_INT 3
16911: PUSH
16912: LD_INT 4
16914: PUSH
16915: LD_INT 5
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: ST_TO_ADDR
16924: GO 17785
16926: LD_INT 9
16928: DOUBLE
16929: EQUAL
16930: IFTRUE 16934
16932: GO 16960
16934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16935: LD_ADDR_VAR 0 3
16939: PUSH
16940: LD_INT 2
16942: PUSH
16943: LD_INT 3
16945: PUSH
16946: LD_INT 4
16948: PUSH
16949: LD_INT 5
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: ST_TO_ADDR
16958: GO 17785
16960: LD_INT 7
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16994
16968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 3
16979: PUSH
16980: LD_INT 4
16982: PUSH
16983: LD_INT 5
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: ST_TO_ADDR
16992: GO 17785
16994: LD_INT 12
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17028
17002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 3
17013: PUSH
17014: LD_INT 4
17016: PUSH
17017: LD_INT 5
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: ST_TO_ADDR
17026: GO 17785
17028: LD_INT 13
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17036
17034: GO 17062
17036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17037: LD_ADDR_VAR 0 3
17041: PUSH
17042: LD_INT 2
17044: PUSH
17045: LD_INT 3
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: LD_INT 5
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: ST_TO_ADDR
17060: GO 17785
17062: LD_INT 14
17064: DOUBLE
17065: EQUAL
17066: IFTRUE 17070
17068: GO 17088
17070: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17071: LD_ADDR_VAR 0 3
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: ST_TO_ADDR
17086: GO 17785
17088: LD_INT 6
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17114
17096: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17097: LD_ADDR_VAR 0 3
17101: PUSH
17102: LD_INT 4
17104: PUSH
17105: LD_INT 5
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: ST_TO_ADDR
17112: GO 17785
17114: LD_INT 10
17116: DOUBLE
17117: EQUAL
17118: IFTRUE 17122
17120: GO 17140
17122: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17123: LD_ADDR_VAR 0 3
17127: PUSH
17128: LD_INT 4
17130: PUSH
17131: LD_INT 5
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: ST_TO_ADDR
17138: GO 17785
17140: LD_INT 22
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17174
17148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17149: LD_ADDR_VAR 0 3
17153: PUSH
17154: LD_INT 11
17156: PUSH
17157: LD_INT 12
17159: PUSH
17160: LD_INT 13
17162: PUSH
17163: LD_INT 14
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: ST_TO_ADDR
17172: GO 17785
17174: LD_INT 23
17176: DOUBLE
17177: EQUAL
17178: IFTRUE 17182
17180: GO 17208
17182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 11
17190: PUSH
17191: LD_INT 12
17193: PUSH
17194: LD_INT 13
17196: PUSH
17197: LD_INT 14
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: ST_TO_ADDR
17206: GO 17785
17208: LD_INT 24
17210: DOUBLE
17211: EQUAL
17212: IFTRUE 17216
17214: GO 17242
17216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 11
17224: PUSH
17225: LD_INT 12
17227: PUSH
17228: LD_INT 13
17230: PUSH
17231: LD_INT 14
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
17240: GO 17785
17242: LD_INT 30
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17276
17250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_INT 11
17258: PUSH
17259: LD_INT 12
17261: PUSH
17262: LD_INT 13
17264: PUSH
17265: LD_INT 14
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: ST_TO_ADDR
17274: GO 17785
17276: LD_INT 25
17278: DOUBLE
17279: EQUAL
17280: IFTRUE 17284
17282: GO 17302
17284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_INT 13
17292: PUSH
17293: LD_INT 14
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: ST_TO_ADDR
17300: GO 17785
17302: LD_INT 27
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17328
17310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 13
17318: PUSH
17319: LD_INT 14
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: ST_TO_ADDR
17326: GO 17785
17328: LD_EXP 101
17332: DOUBLE
17333: EQUAL
17334: IFTRUE 17338
17336: GO 17364
17338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17339: LD_ADDR_VAR 0 3
17343: PUSH
17344: LD_INT 11
17346: PUSH
17347: LD_INT 12
17349: PUSH
17350: LD_INT 13
17352: PUSH
17353: LD_INT 14
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: ST_TO_ADDR
17362: GO 17785
17364: LD_INT 28
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17390
17372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17373: LD_ADDR_VAR 0 3
17377: PUSH
17378: LD_INT 13
17380: PUSH
17381: LD_INT 14
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: ST_TO_ADDR
17388: GO 17785
17390: LD_INT 29
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17416
17398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17399: LD_ADDR_VAR 0 3
17403: PUSH
17404: LD_INT 13
17406: PUSH
17407: LD_INT 14
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: ST_TO_ADDR
17414: GO 17785
17416: LD_INT 31
17418: DOUBLE
17419: EQUAL
17420: IFTRUE 17424
17422: GO 17442
17424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17425: LD_ADDR_VAR 0 3
17429: PUSH
17430: LD_INT 13
17432: PUSH
17433: LD_INT 14
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: ST_TO_ADDR
17440: GO 17785
17442: LD_INT 26
17444: DOUBLE
17445: EQUAL
17446: IFTRUE 17450
17448: GO 17468
17450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17451: LD_ADDR_VAR 0 3
17455: PUSH
17456: LD_INT 13
17458: PUSH
17459: LD_INT 14
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: ST_TO_ADDR
17466: GO 17785
17468: LD_INT 42
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17502
17476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17477: LD_ADDR_VAR 0 3
17481: PUSH
17482: LD_INT 21
17484: PUSH
17485: LD_INT 22
17487: PUSH
17488: LD_INT 23
17490: PUSH
17491: LD_INT 24
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: ST_TO_ADDR
17500: GO 17785
17502: LD_INT 43
17504: DOUBLE
17505: EQUAL
17506: IFTRUE 17510
17508: GO 17536
17510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17511: LD_ADDR_VAR 0 3
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_INT 23
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: ST_TO_ADDR
17534: GO 17785
17536: LD_INT 44
17538: DOUBLE
17539: EQUAL
17540: IFTRUE 17544
17542: GO 17570
17544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17545: LD_ADDR_VAR 0 3
17549: PUSH
17550: LD_INT 21
17552: PUSH
17553: LD_INT 22
17555: PUSH
17556: LD_INT 23
17558: PUSH
17559: LD_INT 24
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: ST_TO_ADDR
17568: GO 17785
17570: LD_INT 45
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17604
17578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_INT 21
17586: PUSH
17587: LD_INT 22
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 24
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: ST_TO_ADDR
17602: GO 17785
17604: LD_INT 49
17606: DOUBLE
17607: EQUAL
17608: IFTRUE 17612
17610: GO 17638
17612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17613: LD_ADDR_VAR 0 3
17617: PUSH
17618: LD_INT 21
17620: PUSH
17621: LD_INT 22
17623: PUSH
17624: LD_INT 23
17626: PUSH
17627: LD_INT 24
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: ST_TO_ADDR
17636: GO 17785
17638: LD_INT 51
17640: DOUBLE
17641: EQUAL
17642: IFTRUE 17646
17644: GO 17672
17646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17647: LD_ADDR_VAR 0 3
17651: PUSH
17652: LD_INT 21
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_INT 23
17660: PUSH
17661: LD_INT 24
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: ST_TO_ADDR
17670: GO 17785
17672: LD_INT 52
17674: DOUBLE
17675: EQUAL
17676: IFTRUE 17680
17678: GO 17706
17680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_INT 21
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: LD_INT 23
17694: PUSH
17695: LD_INT 24
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: ST_TO_ADDR
17704: GO 17785
17706: LD_INT 53
17708: DOUBLE
17709: EQUAL
17710: IFTRUE 17714
17712: GO 17732
17714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17715: LD_ADDR_VAR 0 3
17719: PUSH
17720: LD_INT 23
17722: PUSH
17723: LD_INT 24
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: ST_TO_ADDR
17730: GO 17785
17732: LD_INT 46
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17758
17740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_INT 23
17748: PUSH
17749: LD_INT 24
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: ST_TO_ADDR
17756: GO 17785
17758: LD_INT 47
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17784
17766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17767: LD_ADDR_VAR 0 3
17771: PUSH
17772: LD_INT 23
17774: PUSH
17775: LD_INT 24
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: ST_TO_ADDR
17782: GO 17785
17784: POP
// result := ( chassis in result ) ;
17785: LD_ADDR_VAR 0 3
17789: PUSH
17790: LD_VAR 0 1
17794: PUSH
17795: LD_VAR 0 3
17799: IN
17800: ST_TO_ADDR
// end ;
17801: LD_VAR 0 3
17805: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
// result := array ;
17815: LD_ADDR_VAR 0 5
17819: PUSH
17820: LD_VAR 0 1
17824: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17825: LD_VAR 0 1
17829: NOT
17830: PUSH
17831: LD_VAR 0 2
17835: NOT
17836: OR
17837: PUSH
17838: LD_VAR 0 3
17842: NOT
17843: OR
17844: PUSH
17845: LD_VAR 0 2
17849: PUSH
17850: LD_VAR 0 1
17854: GREATER
17855: OR
17856: PUSH
17857: LD_VAR 0 3
17861: PUSH
17862: LD_VAR 0 1
17866: GREATER
17867: OR
17868: IFFALSE 17872
// exit ;
17870: GO 18168
// if direction then
17872: LD_VAR 0 4
17876: IFFALSE 17940
// begin d := 1 ;
17878: LD_ADDR_VAR 0 9
17882: PUSH
17883: LD_INT 1
17885: ST_TO_ADDR
// if i_from > i_to then
17886: LD_VAR 0 2
17890: PUSH
17891: LD_VAR 0 3
17895: GREATER
17896: IFFALSE 17922
// length := ( array - i_from ) + i_to else
17898: LD_ADDR_VAR 0 11
17902: PUSH
17903: LD_VAR 0 1
17907: PUSH
17908: LD_VAR 0 2
17912: MINUS
17913: PUSH
17914: LD_VAR 0 3
17918: PLUS
17919: ST_TO_ADDR
17920: GO 17938
// length := i_to - i_from ;
17922: LD_ADDR_VAR 0 11
17926: PUSH
17927: LD_VAR 0 3
17931: PUSH
17932: LD_VAR 0 2
17936: MINUS
17937: ST_TO_ADDR
// end else
17938: GO 18001
// begin d := - 1 ;
17940: LD_ADDR_VAR 0 9
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: ST_TO_ADDR
// if i_from > i_to then
17949: LD_VAR 0 2
17953: PUSH
17954: LD_VAR 0 3
17958: GREATER
17959: IFFALSE 17979
// length := i_from - i_to else
17961: LD_ADDR_VAR 0 11
17965: PUSH
17966: LD_VAR 0 2
17970: PUSH
17971: LD_VAR 0 3
17975: MINUS
17976: ST_TO_ADDR
17977: GO 18001
// length := ( array - i_to ) + i_from ;
17979: LD_ADDR_VAR 0 11
17983: PUSH
17984: LD_VAR 0 1
17988: PUSH
17989: LD_VAR 0 3
17993: MINUS
17994: PUSH
17995: LD_VAR 0 2
17999: PLUS
18000: ST_TO_ADDR
// end ; if not length then
18001: LD_VAR 0 11
18005: NOT
18006: IFFALSE 18010
// exit ;
18008: GO 18168
// tmp := array ;
18010: LD_ADDR_VAR 0 10
18014: PUSH
18015: LD_VAR 0 1
18019: ST_TO_ADDR
// for i = 1 to length do
18020: LD_ADDR_VAR 0 6
18024: PUSH
18025: DOUBLE
18026: LD_INT 1
18028: DEC
18029: ST_TO_ADDR
18030: LD_VAR 0 11
18034: PUSH
18035: FOR_TO
18036: IFFALSE 18156
// begin for j = 1 to array do
18038: LD_ADDR_VAR 0 7
18042: PUSH
18043: DOUBLE
18044: LD_INT 1
18046: DEC
18047: ST_TO_ADDR
18048: LD_VAR 0 1
18052: PUSH
18053: FOR_TO
18054: IFFALSE 18142
// begin k := j + d ;
18056: LD_ADDR_VAR 0 8
18060: PUSH
18061: LD_VAR 0 7
18065: PUSH
18066: LD_VAR 0 9
18070: PLUS
18071: ST_TO_ADDR
// if k > array then
18072: LD_VAR 0 8
18076: PUSH
18077: LD_VAR 0 1
18081: GREATER
18082: IFFALSE 18092
// k := 1 ;
18084: LD_ADDR_VAR 0 8
18088: PUSH
18089: LD_INT 1
18091: ST_TO_ADDR
// if not k then
18092: LD_VAR 0 8
18096: NOT
18097: IFFALSE 18109
// k := array ;
18099: LD_ADDR_VAR 0 8
18103: PUSH
18104: LD_VAR 0 1
18108: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18109: LD_ADDR_VAR 0 10
18113: PUSH
18114: LD_VAR 0 10
18118: PPUSH
18119: LD_VAR 0 8
18123: PPUSH
18124: LD_VAR 0 1
18128: PUSH
18129: LD_VAR 0 7
18133: ARRAY
18134: PPUSH
18135: CALL_OW 1
18139: ST_TO_ADDR
// end ;
18140: GO 18053
18142: POP
18143: POP
// array := tmp ;
18144: LD_ADDR_VAR 0 1
18148: PUSH
18149: LD_VAR 0 10
18153: ST_TO_ADDR
// end ;
18154: GO 18035
18156: POP
18157: POP
// result := array ;
18158: LD_ADDR_VAR 0 5
18162: PUSH
18163: LD_VAR 0 1
18167: ST_TO_ADDR
// end ;
18168: LD_VAR 0 5
18172: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18173: LD_INT 0
18175: PPUSH
18176: PPUSH
// result := 0 ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_INT 0
18184: ST_TO_ADDR
// if not array or not value in array then
18185: LD_VAR 0 1
18189: NOT
18190: PUSH
18191: LD_VAR 0 2
18195: PUSH
18196: LD_VAR 0 1
18200: IN
18201: NOT
18202: OR
18203: IFFALSE 18207
// exit ;
18205: GO 18261
// for i = 1 to array do
18207: LD_ADDR_VAR 0 4
18211: PUSH
18212: DOUBLE
18213: LD_INT 1
18215: DEC
18216: ST_TO_ADDR
18217: LD_VAR 0 1
18221: PUSH
18222: FOR_TO
18223: IFFALSE 18259
// if value = array [ i ] then
18225: LD_VAR 0 2
18229: PUSH
18230: LD_VAR 0 1
18234: PUSH
18235: LD_VAR 0 4
18239: ARRAY
18240: EQUAL
18241: IFFALSE 18257
// begin result := i ;
18243: LD_ADDR_VAR 0 3
18247: PUSH
18248: LD_VAR 0 4
18252: ST_TO_ADDR
// exit ;
18253: POP
18254: POP
18255: GO 18261
// end ;
18257: GO 18222
18259: POP
18260: POP
// end ;
18261: LD_VAR 0 3
18265: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18266: LD_INT 0
18268: PPUSH
// vc_chassis := chassis ;
18269: LD_ADDR_OWVAR 37
18273: PUSH
18274: LD_VAR 0 1
18278: ST_TO_ADDR
// vc_engine := engine ;
18279: LD_ADDR_OWVAR 39
18283: PUSH
18284: LD_VAR 0 2
18288: ST_TO_ADDR
// vc_control := control ;
18289: LD_ADDR_OWVAR 38
18293: PUSH
18294: LD_VAR 0 3
18298: ST_TO_ADDR
// vc_weapon := weapon ;
18299: LD_ADDR_OWVAR 40
18303: PUSH
18304: LD_VAR 0 4
18308: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18309: LD_ADDR_OWVAR 41
18313: PUSH
18314: LD_VAR 0 5
18318: ST_TO_ADDR
// end ;
18319: LD_VAR 0 6
18323: RET
// export function WantPlant ( unit ) ; var task ; begin
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
// result := false ;
18328: LD_ADDR_VAR 0 2
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18336: LD_ADDR_VAR 0 3
18340: PUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 437
18350: ST_TO_ADDR
// if task then
18351: LD_VAR 0 3
18355: IFFALSE 18383
// if task [ 1 ] [ 1 ] = p then
18357: LD_VAR 0 3
18361: PUSH
18362: LD_INT 1
18364: ARRAY
18365: PUSH
18366: LD_INT 1
18368: ARRAY
18369: PUSH
18370: LD_STRING p
18372: EQUAL
18373: IFFALSE 18383
// result := true ;
18375: LD_ADDR_VAR 0 2
18379: PUSH
18380: LD_INT 1
18382: ST_TO_ADDR
// end ;
18383: LD_VAR 0 2
18387: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18388: LD_INT 0
18390: PPUSH
18391: PPUSH
18392: PPUSH
18393: PPUSH
// if pos < 1 then
18394: LD_VAR 0 2
18398: PUSH
18399: LD_INT 1
18401: LESS
18402: IFFALSE 18406
// exit ;
18404: GO 18709
// if pos = 1 then
18406: LD_VAR 0 2
18410: PUSH
18411: LD_INT 1
18413: EQUAL
18414: IFFALSE 18447
// result := Replace ( arr , pos [ 1 ] , value ) else
18416: LD_ADDR_VAR 0 4
18420: PUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: LD_VAR 0 2
18430: PUSH
18431: LD_INT 1
18433: ARRAY
18434: PPUSH
18435: LD_VAR 0 3
18439: PPUSH
18440: CALL_OW 1
18444: ST_TO_ADDR
18445: GO 18709
// begin tmp := arr ;
18447: LD_ADDR_VAR 0 6
18451: PUSH
18452: LD_VAR 0 1
18456: ST_TO_ADDR
// s_arr := [ tmp ] ;
18457: LD_ADDR_VAR 0 7
18461: PUSH
18462: LD_VAR 0 6
18466: PUSH
18467: EMPTY
18468: LIST
18469: ST_TO_ADDR
// for i = 1 to pos - 1 do
18470: LD_ADDR_VAR 0 5
18474: PUSH
18475: DOUBLE
18476: LD_INT 1
18478: DEC
18479: ST_TO_ADDR
18480: LD_VAR 0 2
18484: PUSH
18485: LD_INT 1
18487: MINUS
18488: PUSH
18489: FOR_TO
18490: IFFALSE 18535
// begin tmp := tmp [ pos [ i ] ] ;
18492: LD_ADDR_VAR 0 6
18496: PUSH
18497: LD_VAR 0 6
18501: PUSH
18502: LD_VAR 0 2
18506: PUSH
18507: LD_VAR 0 5
18511: ARRAY
18512: ARRAY
18513: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18514: LD_ADDR_VAR 0 7
18518: PUSH
18519: LD_VAR 0 7
18523: PUSH
18524: LD_VAR 0 6
18528: PUSH
18529: EMPTY
18530: LIST
18531: ADD
18532: ST_TO_ADDR
// end ;
18533: GO 18489
18535: POP
18536: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18537: LD_ADDR_VAR 0 6
18541: PUSH
18542: LD_VAR 0 6
18546: PPUSH
18547: LD_VAR 0 2
18551: PUSH
18552: LD_VAR 0 2
18556: ARRAY
18557: PPUSH
18558: LD_VAR 0 3
18562: PPUSH
18563: CALL_OW 1
18567: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18568: LD_ADDR_VAR 0 7
18572: PUSH
18573: LD_VAR 0 7
18577: PPUSH
18578: LD_VAR 0 7
18582: PPUSH
18583: LD_VAR 0 6
18587: PPUSH
18588: CALL_OW 1
18592: ST_TO_ADDR
// for i = s_arr downto 2 do
18593: LD_ADDR_VAR 0 5
18597: PUSH
18598: DOUBLE
18599: LD_VAR 0 7
18603: INC
18604: ST_TO_ADDR
18605: LD_INT 2
18607: PUSH
18608: FOR_DOWNTO
18609: IFFALSE 18693
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18611: LD_ADDR_VAR 0 6
18615: PUSH
18616: LD_VAR 0 7
18620: PUSH
18621: LD_VAR 0 5
18625: PUSH
18626: LD_INT 1
18628: MINUS
18629: ARRAY
18630: PPUSH
18631: LD_VAR 0 2
18635: PUSH
18636: LD_VAR 0 5
18640: PUSH
18641: LD_INT 1
18643: MINUS
18644: ARRAY
18645: PPUSH
18646: LD_VAR 0 7
18650: PUSH
18651: LD_VAR 0 5
18655: ARRAY
18656: PPUSH
18657: CALL_OW 1
18661: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18662: LD_ADDR_VAR 0 7
18666: PUSH
18667: LD_VAR 0 7
18671: PPUSH
18672: LD_VAR 0 5
18676: PUSH
18677: LD_INT 1
18679: MINUS
18680: PPUSH
18681: LD_VAR 0 6
18685: PPUSH
18686: CALL_OW 1
18690: ST_TO_ADDR
// end ;
18691: GO 18608
18693: POP
18694: POP
// result := s_arr [ 1 ] ;
18695: LD_ADDR_VAR 0 4
18699: PUSH
18700: LD_VAR 0 7
18704: PUSH
18705: LD_INT 1
18707: ARRAY
18708: ST_TO_ADDR
// end ; end ;
18709: LD_VAR 0 4
18713: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18714: LD_INT 0
18716: PPUSH
18717: PPUSH
// if not list then
18718: LD_VAR 0 1
18722: NOT
18723: IFFALSE 18727
// exit ;
18725: GO 18818
// i := list [ pos1 ] ;
18727: LD_ADDR_VAR 0 5
18731: PUSH
18732: LD_VAR 0 1
18736: PUSH
18737: LD_VAR 0 2
18741: ARRAY
18742: ST_TO_ADDR
// if not i then
18743: LD_VAR 0 5
18747: NOT
18748: IFFALSE 18752
// exit ;
18750: GO 18818
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18752: LD_ADDR_VAR 0 1
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: LD_VAR 0 2
18766: PPUSH
18767: LD_VAR 0 1
18771: PUSH
18772: LD_VAR 0 3
18776: ARRAY
18777: PPUSH
18778: CALL_OW 1
18782: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18783: LD_ADDR_VAR 0 1
18787: PUSH
18788: LD_VAR 0 1
18792: PPUSH
18793: LD_VAR 0 3
18797: PPUSH
18798: LD_VAR 0 5
18802: PPUSH
18803: CALL_OW 1
18807: ST_TO_ADDR
// result := list ;
18808: LD_ADDR_VAR 0 4
18812: PUSH
18813: LD_VAR 0 1
18817: ST_TO_ADDR
// end ;
18818: LD_VAR 0 4
18822: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18823: LD_INT 0
18825: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18826: LD_ADDR_VAR 0 5
18830: PUSH
18831: LD_VAR 0 1
18835: PPUSH
18836: CALL_OW 250
18840: PPUSH
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL_OW 251
18850: PPUSH
18851: LD_VAR 0 2
18855: PPUSH
18856: LD_VAR 0 3
18860: PPUSH
18861: LD_VAR 0 4
18865: PPUSH
18866: CALL 18876 0 5
18870: ST_TO_ADDR
// end ;
18871: LD_VAR 0 5
18875: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18876: LD_INT 0
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
// if not list then
18882: LD_VAR 0 3
18886: NOT
18887: IFFALSE 18891
// exit ;
18889: GO 19279
// result := [ ] ;
18891: LD_ADDR_VAR 0 6
18895: PUSH
18896: EMPTY
18897: ST_TO_ADDR
// for i in list do
18898: LD_ADDR_VAR 0 7
18902: PUSH
18903: LD_VAR 0 3
18907: PUSH
18908: FOR_IN
18909: IFFALSE 19111
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18911: LD_ADDR_VAR 0 9
18915: PUSH
18916: LD_VAR 0 7
18920: PPUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: LD_VAR 0 2
18930: PPUSH
18931: CALL_OW 297
18935: ST_TO_ADDR
// if not result then
18936: LD_VAR 0 6
18940: NOT
18941: IFFALSE 18967
// result := [ [ i , tmp ] ] else
18943: LD_ADDR_VAR 0 6
18947: PUSH
18948: LD_VAR 0 7
18952: PUSH
18953: LD_VAR 0 9
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: ST_TO_ADDR
18965: GO 19109
// begin if result [ result ] [ 2 ] < tmp then
18967: LD_VAR 0 6
18971: PUSH
18972: LD_VAR 0 6
18976: ARRAY
18977: PUSH
18978: LD_INT 2
18980: ARRAY
18981: PUSH
18982: LD_VAR 0 9
18986: LESS
18987: IFFALSE 19029
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18989: LD_ADDR_VAR 0 6
18993: PUSH
18994: LD_VAR 0 6
18998: PPUSH
18999: LD_VAR 0 6
19003: PUSH
19004: LD_INT 1
19006: PLUS
19007: PPUSH
19008: LD_VAR 0 7
19012: PUSH
19013: LD_VAR 0 9
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 2
19026: ST_TO_ADDR
19027: GO 19109
// for j = 1 to result do
19029: LD_ADDR_VAR 0 8
19033: PUSH
19034: DOUBLE
19035: LD_INT 1
19037: DEC
19038: ST_TO_ADDR
19039: LD_VAR 0 6
19043: PUSH
19044: FOR_TO
19045: IFFALSE 19107
// begin if tmp < result [ j ] [ 2 ] then
19047: LD_VAR 0 9
19051: PUSH
19052: LD_VAR 0 6
19056: PUSH
19057: LD_VAR 0 8
19061: ARRAY
19062: PUSH
19063: LD_INT 2
19065: ARRAY
19066: LESS
19067: IFFALSE 19105
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19069: LD_ADDR_VAR 0 6
19073: PUSH
19074: LD_VAR 0 6
19078: PPUSH
19079: LD_VAR 0 8
19083: PPUSH
19084: LD_VAR 0 7
19088: PUSH
19089: LD_VAR 0 9
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL_OW 2
19102: ST_TO_ADDR
// break ;
19103: GO 19107
// end ; end ;
19105: GO 19044
19107: POP
19108: POP
// end ; end ;
19109: GO 18908
19111: POP
19112: POP
// if result and not asc then
19113: LD_VAR 0 6
19117: PUSH
19118: LD_VAR 0 4
19122: NOT
19123: AND
19124: IFFALSE 19199
// begin tmp := result ;
19126: LD_ADDR_VAR 0 9
19130: PUSH
19131: LD_VAR 0 6
19135: ST_TO_ADDR
// for i = tmp downto 1 do
19136: LD_ADDR_VAR 0 7
19140: PUSH
19141: DOUBLE
19142: LD_VAR 0 9
19146: INC
19147: ST_TO_ADDR
19148: LD_INT 1
19150: PUSH
19151: FOR_DOWNTO
19152: IFFALSE 19197
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19154: LD_ADDR_VAR 0 6
19158: PUSH
19159: LD_VAR 0 6
19163: PPUSH
19164: LD_VAR 0 9
19168: PUSH
19169: LD_VAR 0 7
19173: MINUS
19174: PUSH
19175: LD_INT 1
19177: PLUS
19178: PPUSH
19179: LD_VAR 0 9
19183: PUSH
19184: LD_VAR 0 7
19188: ARRAY
19189: PPUSH
19190: CALL_OW 1
19194: ST_TO_ADDR
19195: GO 19151
19197: POP
19198: POP
// end ; tmp := [ ] ;
19199: LD_ADDR_VAR 0 9
19203: PUSH
19204: EMPTY
19205: ST_TO_ADDR
// if mode then
19206: LD_VAR 0 5
19210: IFFALSE 19279
// begin for i = 1 to result do
19212: LD_ADDR_VAR 0 7
19216: PUSH
19217: DOUBLE
19218: LD_INT 1
19220: DEC
19221: ST_TO_ADDR
19222: LD_VAR 0 6
19226: PUSH
19227: FOR_TO
19228: IFFALSE 19267
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19230: LD_ADDR_VAR 0 9
19234: PUSH
19235: LD_VAR 0 9
19239: PPUSH
19240: LD_VAR 0 7
19244: PPUSH
19245: LD_VAR 0 6
19249: PUSH
19250: LD_VAR 0 7
19254: ARRAY
19255: PUSH
19256: LD_INT 1
19258: ARRAY
19259: PPUSH
19260: CALL_OW 1
19264: ST_TO_ADDR
19265: GO 19227
19267: POP
19268: POP
// result := tmp ;
19269: LD_ADDR_VAR 0 6
19273: PUSH
19274: LD_VAR 0 9
19278: ST_TO_ADDR
// end ; end ;
19279: LD_VAR 0 6
19283: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19284: LD_INT 0
19286: PPUSH
19287: PPUSH
19288: PPUSH
19289: PPUSH
19290: PPUSH
19291: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19292: LD_ADDR_VAR 0 5
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: ST_TO_ADDR
// if not x or not y then
19314: LD_VAR 0 2
19318: NOT
19319: PUSH
19320: LD_VAR 0 3
19324: NOT
19325: OR
19326: IFFALSE 19330
// exit ;
19328: GO 20982
// if not range then
19330: LD_VAR 0 4
19334: NOT
19335: IFFALSE 19345
// range := 10 ;
19337: LD_ADDR_VAR 0 4
19341: PUSH
19342: LD_INT 10
19344: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19345: LD_ADDR_VAR 0 8
19349: PUSH
19350: LD_INT 81
19352: PUSH
19353: LD_VAR 0 1
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 92
19364: PUSH
19365: LD_VAR 0 2
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 4
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 3
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: ST_TO_ADDR
// if not tmp then
19413: LD_VAR 0 8
19417: NOT
19418: IFFALSE 19422
// exit ;
19420: GO 20982
// for i in tmp do
19422: LD_ADDR_VAR 0 6
19426: PUSH
19427: LD_VAR 0 8
19431: PUSH
19432: FOR_IN
19433: IFFALSE 20957
// begin points := [ 0 , 0 , 0 ] ;
19435: LD_ADDR_VAR 0 9
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: ST_TO_ADDR
// bpoints := 1 ;
19454: LD_ADDR_VAR 0 10
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19462: LD_VAR 0 6
19466: PPUSH
19467: CALL_OW 247
19471: PUSH
19472: LD_INT 1
19474: DOUBLE
19475: EQUAL
19476: IFTRUE 19480
19478: GO 20058
19480: POP
// begin if GetClass ( i ) = 1 then
19481: LD_VAR 0 6
19485: PPUSH
19486: CALL_OW 257
19490: PUSH
19491: LD_INT 1
19493: EQUAL
19494: IFFALSE 19515
// points := [ 10 , 5 , 3 ] ;
19496: LD_ADDR_VAR 0 9
19500: PUSH
19501: LD_INT 10
19503: PUSH
19504: LD_INT 5
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19515: LD_VAR 0 6
19519: PPUSH
19520: CALL_OW 257
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 3
19530: PUSH
19531: LD_INT 4
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: IN
19539: IFFALSE 19560
// points := [ 3 , 2 , 1 ] ;
19541: LD_ADDR_VAR 0 9
19545: PUSH
19546: LD_INT 3
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19560: LD_VAR 0 6
19564: PPUSH
19565: CALL_OW 257
19569: PUSH
19570: LD_INT 5
19572: EQUAL
19573: IFFALSE 19594
// points := [ 130 , 5 , 2 ] ;
19575: LD_ADDR_VAR 0 9
19579: PUSH
19580: LD_INT 130
19582: PUSH
19583: LD_INT 5
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19594: LD_VAR 0 6
19598: PPUSH
19599: CALL_OW 257
19603: PUSH
19604: LD_INT 8
19606: EQUAL
19607: IFFALSE 19628
// points := [ 35 , 35 , 30 ] ;
19609: LD_ADDR_VAR 0 9
19613: PUSH
19614: LD_INT 35
19616: PUSH
19617: LD_INT 35
19619: PUSH
19620: LD_INT 30
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: LIST
19627: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19628: LD_VAR 0 6
19632: PPUSH
19633: CALL_OW 257
19637: PUSH
19638: LD_INT 9
19640: EQUAL
19641: IFFALSE 19662
// points := [ 20 , 55 , 40 ] ;
19643: LD_ADDR_VAR 0 9
19647: PUSH
19648: LD_INT 20
19650: PUSH
19651: LD_INT 55
19653: PUSH
19654: LD_INT 40
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19662: LD_VAR 0 6
19666: PPUSH
19667: CALL_OW 257
19671: PUSH
19672: LD_INT 12
19674: PUSH
19675: LD_INT 16
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: IN
19682: IFFALSE 19703
// points := [ 5 , 3 , 2 ] ;
19684: LD_ADDR_VAR 0 9
19688: PUSH
19689: LD_INT 5
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19703: LD_VAR 0 6
19707: PPUSH
19708: CALL_OW 257
19712: PUSH
19713: LD_INT 17
19715: EQUAL
19716: IFFALSE 19737
// points := [ 100 , 50 , 75 ] ;
19718: LD_ADDR_VAR 0 9
19722: PUSH
19723: LD_INT 100
19725: PUSH
19726: LD_INT 50
19728: PUSH
19729: LD_INT 75
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19737: LD_VAR 0 6
19741: PPUSH
19742: CALL_OW 257
19746: PUSH
19747: LD_INT 15
19749: EQUAL
19750: IFFALSE 19771
// points := [ 10 , 5 , 3 ] ;
19752: LD_ADDR_VAR 0 9
19756: PUSH
19757: LD_INT 10
19759: PUSH
19760: LD_INT 5
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19771: LD_VAR 0 6
19775: PPUSH
19776: CALL_OW 257
19780: PUSH
19781: LD_INT 14
19783: EQUAL
19784: IFFALSE 19805
// points := [ 10 , 0 , 0 ] ;
19786: LD_ADDR_VAR 0 9
19790: PUSH
19791: LD_INT 10
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19805: LD_VAR 0 6
19809: PPUSH
19810: CALL_OW 257
19814: PUSH
19815: LD_INT 11
19817: EQUAL
19818: IFFALSE 19839
// points := [ 30 , 10 , 5 ] ;
19820: LD_ADDR_VAR 0 9
19824: PUSH
19825: LD_INT 30
19827: PUSH
19828: LD_INT 10
19830: PUSH
19831: LD_INT 5
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19839: LD_VAR 0 1
19843: PPUSH
19844: LD_INT 5
19846: PPUSH
19847: CALL_OW 321
19851: PUSH
19852: LD_INT 2
19854: EQUAL
19855: IFFALSE 19872
// bpoints := bpoints * 1.8 ;
19857: LD_ADDR_VAR 0 10
19861: PUSH
19862: LD_VAR 0 10
19866: PUSH
19867: LD_REAL  1.80000000000000E+0000
19870: MUL
19871: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19872: LD_VAR 0 6
19876: PPUSH
19877: CALL_OW 257
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: LD_INT 3
19890: PUSH
19891: LD_INT 4
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: IN
19900: PUSH
19901: LD_VAR 0 1
19905: PPUSH
19906: LD_INT 51
19908: PPUSH
19909: CALL_OW 321
19913: PUSH
19914: LD_INT 2
19916: EQUAL
19917: AND
19918: IFFALSE 19935
// bpoints := bpoints * 1.2 ;
19920: LD_ADDR_VAR 0 10
19924: PUSH
19925: LD_VAR 0 10
19929: PUSH
19930: LD_REAL  1.20000000000000E+0000
19933: MUL
19934: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19935: LD_VAR 0 6
19939: PPUSH
19940: CALL_OW 257
19944: PUSH
19945: LD_INT 5
19947: PUSH
19948: LD_INT 7
19950: PUSH
19951: LD_INT 9
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: IN
19959: PUSH
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_INT 52
19967: PPUSH
19968: CALL_OW 321
19972: PUSH
19973: LD_INT 2
19975: EQUAL
19976: AND
19977: IFFALSE 19994
// bpoints := bpoints * 1.5 ;
19979: LD_ADDR_VAR 0 10
19983: PUSH
19984: LD_VAR 0 10
19988: PUSH
19989: LD_REAL  1.50000000000000E+0000
19992: MUL
19993: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19994: LD_VAR 0 1
19998: PPUSH
19999: LD_INT 66
20001: PPUSH
20002: CALL_OW 321
20006: PUSH
20007: LD_INT 2
20009: EQUAL
20010: IFFALSE 20027
// bpoints := bpoints * 1.1 ;
20012: LD_ADDR_VAR 0 10
20016: PUSH
20017: LD_VAR 0 10
20021: PUSH
20022: LD_REAL  1.10000000000000E+0000
20025: MUL
20026: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20027: LD_ADDR_VAR 0 10
20031: PUSH
20032: LD_VAR 0 10
20036: PUSH
20037: LD_VAR 0 6
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: CALL_OW 259
20049: PUSH
20050: LD_REAL  1.15000000000000E+0000
20053: MUL
20054: MUL
20055: ST_TO_ADDR
// end ; unit_vehicle :
20056: GO 20886
20058: LD_INT 2
20060: DOUBLE
20061: EQUAL
20062: IFTRUE 20066
20064: GO 20874
20066: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20067: LD_VAR 0 6
20071: PPUSH
20072: CALL_OW 264
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 42
20082: PUSH
20083: LD_INT 24
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: IN
20091: IFFALSE 20112
// points := [ 25 , 5 , 3 ] ;
20093: LD_ADDR_VAR 0 9
20097: PUSH
20098: LD_INT 25
20100: PUSH
20101: LD_INT 5
20103: PUSH
20104: LD_INT 3
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20112: LD_VAR 0 6
20116: PPUSH
20117: CALL_OW 264
20121: PUSH
20122: LD_INT 4
20124: PUSH
20125: LD_INT 43
20127: PUSH
20128: LD_INT 25
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: IN
20136: IFFALSE 20157
// points := [ 40 , 15 , 5 ] ;
20138: LD_ADDR_VAR 0 9
20142: PUSH
20143: LD_INT 40
20145: PUSH
20146: LD_INT 15
20148: PUSH
20149: LD_INT 5
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20157: LD_VAR 0 6
20161: PPUSH
20162: CALL_OW 264
20166: PUSH
20167: LD_INT 3
20169: PUSH
20170: LD_INT 23
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: IN
20177: IFFALSE 20198
// points := [ 7 , 25 , 8 ] ;
20179: LD_ADDR_VAR 0 9
20183: PUSH
20184: LD_INT 7
20186: PUSH
20187: LD_INT 25
20189: PUSH
20190: LD_INT 8
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20198: LD_VAR 0 6
20202: PPUSH
20203: CALL_OW 264
20207: PUSH
20208: LD_INT 5
20210: PUSH
20211: LD_INT 27
20213: PUSH
20214: LD_INT 44
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: IN
20222: IFFALSE 20243
// points := [ 14 , 50 , 16 ] ;
20224: LD_ADDR_VAR 0 9
20228: PUSH
20229: LD_INT 14
20231: PUSH
20232: LD_INT 50
20234: PUSH
20235: LD_INT 16
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20243: LD_VAR 0 6
20247: PPUSH
20248: CALL_OW 264
20252: PUSH
20253: LD_INT 6
20255: PUSH
20256: LD_INT 46
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: IN
20263: IFFALSE 20284
// points := [ 32 , 120 , 70 ] ;
20265: LD_ADDR_VAR 0 9
20269: PUSH
20270: LD_INT 32
20272: PUSH
20273: LD_INT 120
20275: PUSH
20276: LD_INT 70
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20284: LD_VAR 0 6
20288: PPUSH
20289: CALL_OW 264
20293: PUSH
20294: LD_INT 7
20296: PUSH
20297: LD_INT 28
20299: PUSH
20300: LD_INT 45
20302: PUSH
20303: LD_EXP 101
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: IN
20314: IFFALSE 20335
// points := [ 35 , 20 , 45 ] ;
20316: LD_ADDR_VAR 0 9
20320: PUSH
20321: LD_INT 35
20323: PUSH
20324: LD_INT 20
20326: PUSH
20327: LD_INT 45
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20335: LD_VAR 0 6
20339: PPUSH
20340: CALL_OW 264
20344: PUSH
20345: LD_INT 47
20347: PUSH
20348: EMPTY
20349: LIST
20350: IN
20351: IFFALSE 20372
// points := [ 67 , 45 , 75 ] ;
20353: LD_ADDR_VAR 0 9
20357: PUSH
20358: LD_INT 67
20360: PUSH
20361: LD_INT 45
20363: PUSH
20364: LD_INT 75
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20372: LD_VAR 0 6
20376: PPUSH
20377: CALL_OW 264
20381: PUSH
20382: LD_INT 26
20384: PUSH
20385: EMPTY
20386: LIST
20387: IN
20388: IFFALSE 20409
// points := [ 120 , 30 , 80 ] ;
20390: LD_ADDR_VAR 0 9
20394: PUSH
20395: LD_INT 120
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 80
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20409: LD_VAR 0 6
20413: PPUSH
20414: CALL_OW 264
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: EMPTY
20423: LIST
20424: IN
20425: IFFALSE 20446
// points := [ 40 , 1 , 1 ] ;
20427: LD_ADDR_VAR 0 9
20431: PUSH
20432: LD_INT 40
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20446: LD_VAR 0 6
20450: PPUSH
20451: CALL_OW 264
20455: PUSH
20456: LD_INT 29
20458: PUSH
20459: EMPTY
20460: LIST
20461: IN
20462: IFFALSE 20483
// points := [ 70 , 200 , 400 ] ;
20464: LD_ADDR_VAR 0 9
20468: PUSH
20469: LD_INT 70
20471: PUSH
20472: LD_INT 200
20474: PUSH
20475: LD_INT 400
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20483: LD_VAR 0 6
20487: PPUSH
20488: CALL_OW 264
20492: PUSH
20493: LD_INT 14
20495: PUSH
20496: LD_INT 53
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: IN
20503: IFFALSE 20524
// points := [ 40 , 10 , 20 ] ;
20505: LD_ADDR_VAR 0 9
20509: PUSH
20510: LD_INT 40
20512: PUSH
20513: LD_INT 10
20515: PUSH
20516: LD_INT 20
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20524: LD_VAR 0 6
20528: PPUSH
20529: CALL_OW 264
20533: PUSH
20534: LD_INT 9
20536: PUSH
20537: EMPTY
20538: LIST
20539: IN
20540: IFFALSE 20561
// points := [ 5 , 70 , 20 ] ;
20542: LD_ADDR_VAR 0 9
20546: PUSH
20547: LD_INT 5
20549: PUSH
20550: LD_INT 70
20552: PUSH
20553: LD_INT 20
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20561: LD_VAR 0 6
20565: PPUSH
20566: CALL_OW 264
20570: PUSH
20571: LD_INT 10
20573: PUSH
20574: EMPTY
20575: LIST
20576: IN
20577: IFFALSE 20598
// points := [ 35 , 110 , 70 ] ;
20579: LD_ADDR_VAR 0 9
20583: PUSH
20584: LD_INT 35
20586: PUSH
20587: LD_INT 110
20589: PUSH
20590: LD_INT 70
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20598: LD_VAR 0 6
20602: PPUSH
20603: CALL_OW 265
20607: PUSH
20608: LD_INT 25
20610: EQUAL
20611: IFFALSE 20632
// points := [ 80 , 65 , 100 ] ;
20613: LD_ADDR_VAR 0 9
20617: PUSH
20618: LD_INT 80
20620: PUSH
20621: LD_INT 65
20623: PUSH
20624: LD_INT 100
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20632: LD_VAR 0 6
20636: PPUSH
20637: CALL_OW 263
20641: PUSH
20642: LD_INT 1
20644: EQUAL
20645: IFFALSE 20680
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20647: LD_ADDR_VAR 0 10
20651: PUSH
20652: LD_VAR 0 10
20656: PUSH
20657: LD_VAR 0 6
20661: PPUSH
20662: CALL_OW 311
20666: PPUSH
20667: LD_INT 3
20669: PPUSH
20670: CALL_OW 259
20674: PUSH
20675: LD_INT 4
20677: MUL
20678: MUL
20679: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20680: LD_VAR 0 6
20684: PPUSH
20685: CALL_OW 263
20689: PUSH
20690: LD_INT 2
20692: EQUAL
20693: IFFALSE 20744
// begin j := IsControledBy ( i ) ;
20695: LD_ADDR_VAR 0 7
20699: PUSH
20700: LD_VAR 0 6
20704: PPUSH
20705: CALL_OW 312
20709: ST_TO_ADDR
// if j then
20710: LD_VAR 0 7
20714: IFFALSE 20744
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20716: LD_ADDR_VAR 0 10
20720: PUSH
20721: LD_VAR 0 10
20725: PUSH
20726: LD_VAR 0 7
20730: PPUSH
20731: LD_INT 3
20733: PPUSH
20734: CALL_OW 259
20738: PUSH
20739: LD_INT 3
20741: MUL
20742: MUL
20743: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20744: LD_VAR 0 6
20748: PPUSH
20749: CALL_OW 264
20753: PUSH
20754: LD_INT 5
20756: PUSH
20757: LD_INT 6
20759: PUSH
20760: LD_INT 46
20762: PUSH
20763: LD_INT 44
20765: PUSH
20766: LD_INT 47
20768: PUSH
20769: LD_INT 45
20771: PUSH
20772: LD_INT 28
20774: PUSH
20775: LD_INT 7
20777: PUSH
20778: LD_INT 27
20780: PUSH
20781: LD_INT 29
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: IN
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_INT 52
20804: PPUSH
20805: CALL_OW 321
20809: PUSH
20810: LD_INT 2
20812: EQUAL
20813: AND
20814: IFFALSE 20831
// bpoints := bpoints * 1.2 ;
20816: LD_ADDR_VAR 0 10
20820: PUSH
20821: LD_VAR 0 10
20825: PUSH
20826: LD_REAL  1.20000000000000E+0000
20829: MUL
20830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20831: LD_VAR 0 6
20835: PPUSH
20836: CALL_OW 264
20840: PUSH
20841: LD_INT 6
20843: PUSH
20844: LD_INT 46
20846: PUSH
20847: LD_INT 47
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: IN
20855: IFFALSE 20872
// bpoints := bpoints * 1.2 ;
20857: LD_ADDR_VAR 0 10
20861: PUSH
20862: LD_VAR 0 10
20866: PUSH
20867: LD_REAL  1.20000000000000E+0000
20870: MUL
20871: ST_TO_ADDR
// end ; unit_building :
20872: GO 20886
20874: LD_INT 3
20876: DOUBLE
20877: EQUAL
20878: IFTRUE 20882
20880: GO 20885
20882: POP
// ; end ;
20883: GO 20886
20885: POP
// for j = 1 to 3 do
20886: LD_ADDR_VAR 0 7
20890: PUSH
20891: DOUBLE
20892: LD_INT 1
20894: DEC
20895: ST_TO_ADDR
20896: LD_INT 3
20898: PUSH
20899: FOR_TO
20900: IFFALSE 20953
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20902: LD_ADDR_VAR 0 5
20906: PUSH
20907: LD_VAR 0 5
20911: PPUSH
20912: LD_VAR 0 7
20916: PPUSH
20917: LD_VAR 0 5
20921: PUSH
20922: LD_VAR 0 7
20926: ARRAY
20927: PUSH
20928: LD_VAR 0 9
20932: PUSH
20933: LD_VAR 0 7
20937: ARRAY
20938: PUSH
20939: LD_VAR 0 10
20943: MUL
20944: PLUS
20945: PPUSH
20946: CALL_OW 1
20950: ST_TO_ADDR
20951: GO 20899
20953: POP
20954: POP
// end ;
20955: GO 19432
20957: POP
20958: POP
// result := Replace ( result , 4 , tmp ) ;
20959: LD_ADDR_VAR 0 5
20963: PUSH
20964: LD_VAR 0 5
20968: PPUSH
20969: LD_INT 4
20971: PPUSH
20972: LD_VAR 0 8
20976: PPUSH
20977: CALL_OW 1
20981: ST_TO_ADDR
// end ;
20982: LD_VAR 0 5
20986: RET
// export function DangerAtRange ( unit , range ) ; begin
20987: LD_INT 0
20989: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20990: LD_ADDR_VAR 0 3
20994: PUSH
20995: LD_VAR 0 1
20999: PPUSH
21000: CALL_OW 255
21004: PPUSH
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 250
21014: PPUSH
21015: LD_VAR 0 1
21019: PPUSH
21020: CALL_OW 251
21024: PPUSH
21025: LD_VAR 0 2
21029: PPUSH
21030: CALL 19284 0 4
21034: ST_TO_ADDR
// end ;
21035: LD_VAR 0 3
21039: RET
// export function DangerInArea ( side , area ) ; begin
21040: LD_INT 0
21042: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21043: LD_ADDR_VAR 0 3
21047: PUSH
21048: LD_VAR 0 2
21052: PPUSH
21053: LD_INT 81
21055: PUSH
21056: LD_VAR 0 1
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PPUSH
21065: CALL_OW 70
21069: ST_TO_ADDR
// end ;
21070: LD_VAR 0 3
21074: RET
// export function IsExtension ( b ) ; begin
21075: LD_INT 0
21077: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21078: LD_ADDR_VAR 0 2
21082: PUSH
21083: LD_VAR 0 1
21087: PUSH
21088: LD_INT 23
21090: PUSH
21091: LD_INT 20
21093: PUSH
21094: LD_INT 22
21096: PUSH
21097: LD_INT 17
21099: PUSH
21100: LD_INT 24
21102: PUSH
21103: LD_INT 21
21105: PUSH
21106: LD_INT 19
21108: PUSH
21109: LD_INT 16
21111: PUSH
21112: LD_INT 25
21114: PUSH
21115: LD_INT 18
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: IN
21130: ST_TO_ADDR
// end ;
21131: LD_VAR 0 2
21135: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21136: LD_INT 0
21138: PPUSH
21139: PPUSH
21140: PPUSH
// result := [ ] ;
21141: LD_ADDR_VAR 0 4
21145: PUSH
21146: EMPTY
21147: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21148: LD_ADDR_VAR 0 5
21152: PUSH
21153: LD_VAR 0 2
21157: PPUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 3
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PPUSH
21168: CALL_OW 70
21172: ST_TO_ADDR
// if not tmp then
21173: LD_VAR 0 5
21177: NOT
21178: IFFALSE 21182
// exit ;
21180: GO 21246
// if checkLink then
21182: LD_VAR 0 3
21186: IFFALSE 21236
// begin for i in tmp do
21188: LD_ADDR_VAR 0 6
21192: PUSH
21193: LD_VAR 0 5
21197: PUSH
21198: FOR_IN
21199: IFFALSE 21234
// if GetBase ( i ) <> base then
21201: LD_VAR 0 6
21205: PPUSH
21206: CALL_OW 274
21210: PUSH
21211: LD_VAR 0 1
21215: NONEQUAL
21216: IFFALSE 21232
// ComLinkToBase ( base , i ) ;
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_VAR 0 6
21227: PPUSH
21228: CALL_OW 169
21232: GO 21198
21234: POP
21235: POP
// end ; result := tmp ;
21236: LD_ADDR_VAR 0 4
21240: PUSH
21241: LD_VAR 0 5
21245: ST_TO_ADDR
// end ;
21246: LD_VAR 0 4
21250: RET
// export function ComComplete ( units , b ) ; var i ; begin
21251: LD_INT 0
21253: PPUSH
21254: PPUSH
// if not units then
21255: LD_VAR 0 1
21259: NOT
21260: IFFALSE 21264
// exit ;
21262: GO 21354
// for i in units do
21264: LD_ADDR_VAR 0 4
21268: PUSH
21269: LD_VAR 0 1
21273: PUSH
21274: FOR_IN
21275: IFFALSE 21352
// if BuildingStatus ( b ) = bs_build then
21277: LD_VAR 0 2
21281: PPUSH
21282: CALL_OW 461
21286: PUSH
21287: LD_INT 1
21289: EQUAL
21290: IFFALSE 21350
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21292: LD_VAR 0 4
21296: PPUSH
21297: LD_STRING h
21299: PUSH
21300: LD_VAR 0 2
21304: PPUSH
21305: CALL_OW 250
21309: PUSH
21310: LD_VAR 0 2
21314: PPUSH
21315: CALL_OW 251
21319: PUSH
21320: LD_VAR 0 2
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: PUSH
21343: EMPTY
21344: LIST
21345: PPUSH
21346: CALL_OW 446
21350: GO 21274
21352: POP
21353: POP
// end ;
21354: LD_VAR 0 3
21358: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21359: LD_INT 0
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
21365: PPUSH
21366: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21367: LD_VAR 0 1
21371: NOT
21372: PUSH
21373: LD_VAR 0 1
21377: PPUSH
21378: CALL_OW 263
21382: PUSH
21383: LD_INT 2
21385: NONEQUAL
21386: OR
21387: IFFALSE 21391
// exit ;
21389: GO 21707
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21391: LD_ADDR_VAR 0 6
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 255
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 2
21415: PUSH
21416: LD_INT 30
21418: PUSH
21419: LD_INT 36
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 34
21428: PUSH
21429: LD_INT 31
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: LIST
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PPUSH
21445: CALL_OW 69
21449: ST_TO_ADDR
// if not tmp then
21450: LD_VAR 0 6
21454: NOT
21455: IFFALSE 21459
// exit ;
21457: GO 21707
// result := [ ] ;
21459: LD_ADDR_VAR 0 2
21463: PUSH
21464: EMPTY
21465: ST_TO_ADDR
// for i in tmp do
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_VAR 0 6
21475: PUSH
21476: FOR_IN
21477: IFFALSE 21548
// begin t := UnitsInside ( i ) ;
21479: LD_ADDR_VAR 0 4
21483: PUSH
21484: LD_VAR 0 3
21488: PPUSH
21489: CALL_OW 313
21493: ST_TO_ADDR
// if t then
21494: LD_VAR 0 4
21498: IFFALSE 21546
// for j in t do
21500: LD_ADDR_VAR 0 7
21504: PUSH
21505: LD_VAR 0 4
21509: PUSH
21510: FOR_IN
21511: IFFALSE 21544
// result := Replace ( result , result + 1 , j ) ;
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: LD_VAR 0 2
21522: PPUSH
21523: LD_VAR 0 2
21527: PUSH
21528: LD_INT 1
21530: PLUS
21531: PPUSH
21532: LD_VAR 0 7
21536: PPUSH
21537: CALL_OW 1
21541: ST_TO_ADDR
21542: GO 21510
21544: POP
21545: POP
// end ;
21546: GO 21476
21548: POP
21549: POP
// if not result then
21550: LD_VAR 0 2
21554: NOT
21555: IFFALSE 21559
// exit ;
21557: GO 21707
// mech := result [ 1 ] ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_VAR 0 2
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: ST_TO_ADDR
// if result > 1 then
21573: LD_VAR 0 2
21577: PUSH
21578: LD_INT 1
21580: GREATER
21581: IFFALSE 21693
// begin for i = 2 to result do
21583: LD_ADDR_VAR 0 3
21587: PUSH
21588: DOUBLE
21589: LD_INT 2
21591: DEC
21592: ST_TO_ADDR
21593: LD_VAR 0 2
21597: PUSH
21598: FOR_TO
21599: IFFALSE 21691
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21601: LD_ADDR_VAR 0 4
21605: PUSH
21606: LD_VAR 0 2
21610: PUSH
21611: LD_VAR 0 3
21615: ARRAY
21616: PPUSH
21617: LD_INT 3
21619: PPUSH
21620: CALL_OW 259
21624: PUSH
21625: LD_VAR 0 2
21629: PUSH
21630: LD_VAR 0 3
21634: ARRAY
21635: PPUSH
21636: CALL_OW 432
21640: MINUS
21641: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21642: LD_VAR 0 4
21646: PUSH
21647: LD_VAR 0 5
21651: PPUSH
21652: LD_INT 3
21654: PPUSH
21655: CALL_OW 259
21659: PUSH
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL_OW 432
21669: MINUS
21670: GREATEREQUAL
21671: IFFALSE 21689
// mech := result [ i ] ;
21673: LD_ADDR_VAR 0 5
21677: PUSH
21678: LD_VAR 0 2
21682: PUSH
21683: LD_VAR 0 3
21687: ARRAY
21688: ST_TO_ADDR
// end ;
21689: GO 21598
21691: POP
21692: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 135
// end ;
21707: LD_VAR 0 2
21711: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
21724: PPUSH
21725: PPUSH
21726: PPUSH
// result := [ ] ;
21727: LD_ADDR_VAR 0 7
21731: PUSH
21732: EMPTY
21733: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21734: LD_VAR 0 1
21738: PPUSH
21739: CALL_OW 266
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: IN
21754: NOT
21755: IFFALSE 21759
// exit ;
21757: GO 23393
// if name then
21759: LD_VAR 0 3
21763: IFFALSE 21779
// SetBName ( base_dep , name ) ;
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_VAR 0 3
21774: PPUSH
21775: CALL_OW 500
// base := GetBase ( base_dep ) ;
21779: LD_ADDR_VAR 0 15
21783: PUSH
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 274
21793: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21794: LD_ADDR_VAR 0 16
21798: PUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 255
21808: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21809: LD_ADDR_VAR 0 17
21813: PUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 248
21823: ST_TO_ADDR
// if sources then
21824: LD_VAR 0 5
21828: IFFALSE 21875
// for i = 1 to 3 do
21830: LD_ADDR_VAR 0 8
21834: PUSH
21835: DOUBLE
21836: LD_INT 1
21838: DEC
21839: ST_TO_ADDR
21840: LD_INT 3
21842: PUSH
21843: FOR_TO
21844: IFFALSE 21873
// AddResourceType ( base , i , sources [ i ] ) ;
21846: LD_VAR 0 15
21850: PPUSH
21851: LD_VAR 0 8
21855: PPUSH
21856: LD_VAR 0 5
21860: PUSH
21861: LD_VAR 0 8
21865: ARRAY
21866: PPUSH
21867: CALL_OW 276
21871: GO 21843
21873: POP
21874: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21875: LD_ADDR_VAR 0 18
21879: PUSH
21880: LD_VAR 0 15
21884: PPUSH
21885: LD_VAR 0 2
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL 21136 0 3
21897: ST_TO_ADDR
// InitHc ;
21898: CALL_OW 19
// InitUc ;
21902: CALL_OW 18
// uc_side := side ;
21906: LD_ADDR_OWVAR 20
21910: PUSH
21911: LD_VAR 0 16
21915: ST_TO_ADDR
// uc_nation := nation ;
21916: LD_ADDR_OWVAR 21
21920: PUSH
21921: LD_VAR 0 17
21925: ST_TO_ADDR
// if buildings then
21926: LD_VAR 0 18
21930: IFFALSE 23252
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21932: LD_ADDR_VAR 0 19
21936: PUSH
21937: LD_VAR 0 18
21941: PPUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 29
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 30
21957: PUSH
21958: LD_INT 30
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: PPUSH
21970: CALL_OW 72
21974: ST_TO_ADDR
// if tmp then
21975: LD_VAR 0 19
21979: IFFALSE 22027
// for i in tmp do
21981: LD_ADDR_VAR 0 8
21985: PUSH
21986: LD_VAR 0 19
21990: PUSH
21991: FOR_IN
21992: IFFALSE 22025
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21994: LD_VAR 0 8
21998: PPUSH
21999: CALL_OW 250
22003: PPUSH
22004: LD_VAR 0 8
22008: PPUSH
22009: CALL_OW 251
22013: PPUSH
22014: LD_VAR 0 16
22018: PPUSH
22019: CALL_OW 441
22023: GO 21991
22025: POP
22026: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22027: LD_VAR 0 18
22031: PPUSH
22032: LD_INT 2
22034: PUSH
22035: LD_INT 30
22037: PUSH
22038: LD_INT 32
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 30
22047: PUSH
22048: LD_INT 33
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: PPUSH
22060: CALL_OW 72
22064: IFFALSE 22152
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22066: LD_ADDR_VAR 0 8
22070: PUSH
22071: LD_VAR 0 18
22075: PPUSH
22076: LD_INT 2
22078: PUSH
22079: LD_INT 30
22081: PUSH
22082: LD_INT 32
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 30
22091: PUSH
22092: LD_INT 33
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: PPUSH
22104: CALL_OW 72
22108: PUSH
22109: FOR_IN
22110: IFFALSE 22150
// begin if not GetBWeapon ( i ) then
22112: LD_VAR 0 8
22116: PPUSH
22117: CALL_OW 269
22121: NOT
22122: IFFALSE 22148
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22124: LD_VAR 0 8
22128: PPUSH
22129: LD_VAR 0 8
22133: PPUSH
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL 23398 0 2
22143: PPUSH
22144: CALL_OW 431
// end ;
22148: GO 22109
22150: POP
22151: POP
// end ; for i = 1 to personel do
22152: LD_ADDR_VAR 0 8
22156: PUSH
22157: DOUBLE
22158: LD_INT 1
22160: DEC
22161: ST_TO_ADDR
22162: LD_VAR 0 6
22166: PUSH
22167: FOR_TO
22168: IFFALSE 23232
// begin if i > 4 then
22170: LD_VAR 0 8
22174: PUSH
22175: LD_INT 4
22177: GREATER
22178: IFFALSE 22182
// break ;
22180: GO 23232
// case i of 1 :
22182: LD_VAR 0 8
22186: PUSH
22187: LD_INT 1
22189: DOUBLE
22190: EQUAL
22191: IFTRUE 22195
22193: GO 22275
22195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22196: LD_ADDR_VAR 0 12
22200: PUSH
22201: LD_VAR 0 18
22205: PPUSH
22206: LD_INT 22
22208: PUSH
22209: LD_VAR 0 16
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 58
22220: PUSH
22221: EMPTY
22222: LIST
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: LD_INT 32
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 30
22239: PUSH
22240: LD_INT 4
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 30
22249: PUSH
22250: LD_INT 5
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 72
22272: ST_TO_ADDR
22273: GO 22497
22275: LD_INT 2
22277: DOUBLE
22278: EQUAL
22279: IFTRUE 22283
22281: GO 22345
22283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22284: LD_ADDR_VAR 0 12
22288: PUSH
22289: LD_VAR 0 18
22293: PPUSH
22294: LD_INT 22
22296: PUSH
22297: LD_VAR 0 16
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: LD_INT 30
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 72
22342: ST_TO_ADDR
22343: GO 22497
22345: LD_INT 3
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22415
22353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22354: LD_ADDR_VAR 0 12
22358: PUSH
22359: LD_VAR 0 18
22363: PPUSH
22364: LD_INT 22
22366: PUSH
22367: LD_VAR 0 16
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 30
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 30
22391: PUSH
22392: LD_INT 3
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PPUSH
22408: CALL_OW 72
22412: ST_TO_ADDR
22413: GO 22497
22415: LD_INT 4
22417: DOUBLE
22418: EQUAL
22419: IFTRUE 22423
22421: GO 22496
22423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22424: LD_ADDR_VAR 0 12
22428: PUSH
22429: LD_VAR 0 18
22433: PPUSH
22434: LD_INT 22
22436: PUSH
22437: LD_VAR 0 16
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 30
22451: PUSH
22452: LD_INT 6
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 30
22461: PUSH
22462: LD_INT 7
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 30
22471: PUSH
22472: LD_INT 8
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PPUSH
22489: CALL_OW 72
22493: ST_TO_ADDR
22494: GO 22497
22496: POP
// if i = 1 then
22497: LD_VAR 0 8
22501: PUSH
22502: LD_INT 1
22504: EQUAL
22505: IFFALSE 22616
// begin tmp := [ ] ;
22507: LD_ADDR_VAR 0 19
22511: PUSH
22512: EMPTY
22513: ST_TO_ADDR
// for j in f do
22514: LD_ADDR_VAR 0 9
22518: PUSH
22519: LD_VAR 0 12
22523: PUSH
22524: FOR_IN
22525: IFFALSE 22598
// if GetBType ( j ) = b_bunker then
22527: LD_VAR 0 9
22531: PPUSH
22532: CALL_OW 266
22536: PUSH
22537: LD_INT 32
22539: EQUAL
22540: IFFALSE 22567
// tmp := Insert ( tmp , 1 , j ) else
22542: LD_ADDR_VAR 0 19
22546: PUSH
22547: LD_VAR 0 19
22551: PPUSH
22552: LD_INT 1
22554: PPUSH
22555: LD_VAR 0 9
22559: PPUSH
22560: CALL_OW 2
22564: ST_TO_ADDR
22565: GO 22596
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22567: LD_ADDR_VAR 0 19
22571: PUSH
22572: LD_VAR 0 19
22576: PPUSH
22577: LD_VAR 0 19
22581: PUSH
22582: LD_INT 1
22584: PLUS
22585: PPUSH
22586: LD_VAR 0 9
22590: PPUSH
22591: CALL_OW 2
22595: ST_TO_ADDR
22596: GO 22524
22598: POP
22599: POP
// if tmp then
22600: LD_VAR 0 19
22604: IFFALSE 22616
// f := tmp ;
22606: LD_ADDR_VAR 0 12
22610: PUSH
22611: LD_VAR 0 19
22615: ST_TO_ADDR
// end ; x := personel [ i ] ;
22616: LD_ADDR_VAR 0 13
22620: PUSH
22621: LD_VAR 0 6
22625: PUSH
22626: LD_VAR 0 8
22630: ARRAY
22631: ST_TO_ADDR
// if x = - 1 then
22632: LD_VAR 0 13
22636: PUSH
22637: LD_INT 1
22639: NEG
22640: EQUAL
22641: IFFALSE 22850
// begin for j in f do
22643: LD_ADDR_VAR 0 9
22647: PUSH
22648: LD_VAR 0 12
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22846
// repeat InitHc ;
22656: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22660: LD_VAR 0 9
22664: PPUSH
22665: CALL_OW 266
22669: PUSH
22670: LD_INT 5
22672: EQUAL
22673: IFFALSE 22743
// begin if UnitsInside ( j ) < 3 then
22675: LD_VAR 0 9
22679: PPUSH
22680: CALL_OW 313
22684: PUSH
22685: LD_INT 3
22687: LESS
22688: IFFALSE 22724
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22690: LD_INT 0
22692: PPUSH
22693: LD_INT 5
22695: PUSH
22696: LD_INT 8
22698: PUSH
22699: LD_INT 9
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: LD_VAR 0 17
22711: ARRAY
22712: PPUSH
22713: LD_VAR 0 4
22717: PPUSH
22718: CALL_OW 380
22722: GO 22741
// PrepareHuman ( false , i , skill ) ;
22724: LD_INT 0
22726: PPUSH
22727: LD_VAR 0 8
22731: PPUSH
22732: LD_VAR 0 4
22736: PPUSH
22737: CALL_OW 380
// end else
22741: GO 22760
// PrepareHuman ( false , i , skill ) ;
22743: LD_INT 0
22745: PPUSH
22746: LD_VAR 0 8
22750: PPUSH
22751: LD_VAR 0 4
22755: PPUSH
22756: CALL_OW 380
// un := CreateHuman ;
22760: LD_ADDR_VAR 0 14
22764: PUSH
22765: CALL_OW 44
22769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22770: LD_ADDR_VAR 0 7
22774: PUSH
22775: LD_VAR 0 7
22779: PPUSH
22780: LD_INT 1
22782: PPUSH
22783: LD_VAR 0 14
22787: PPUSH
22788: CALL_OW 2
22792: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22793: LD_VAR 0 14
22797: PPUSH
22798: LD_VAR 0 9
22802: PPUSH
22803: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22807: LD_VAR 0 9
22811: PPUSH
22812: CALL_OW 313
22816: PUSH
22817: LD_INT 6
22819: EQUAL
22820: PUSH
22821: LD_VAR 0 9
22825: PPUSH
22826: CALL_OW 266
22830: PUSH
22831: LD_INT 32
22833: PUSH
22834: LD_INT 31
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: IN
22841: OR
22842: IFFALSE 22656
22844: GO 22653
22846: POP
22847: POP
// end else
22848: GO 23230
// for j = 1 to x do
22850: LD_ADDR_VAR 0 9
22854: PUSH
22855: DOUBLE
22856: LD_INT 1
22858: DEC
22859: ST_TO_ADDR
22860: LD_VAR 0 13
22864: PUSH
22865: FOR_TO
22866: IFFALSE 23228
// begin InitHc ;
22868: CALL_OW 19
// if not f then
22872: LD_VAR 0 12
22876: NOT
22877: IFFALSE 22966
// begin PrepareHuman ( false , i , skill ) ;
22879: LD_INT 0
22881: PPUSH
22882: LD_VAR 0 8
22886: PPUSH
22887: LD_VAR 0 4
22891: PPUSH
22892: CALL_OW 380
// un := CreateHuman ;
22896: LD_ADDR_VAR 0 14
22900: PUSH
22901: CALL_OW 44
22905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22906: LD_ADDR_VAR 0 7
22910: PUSH
22911: LD_VAR 0 7
22915: PPUSH
22916: LD_INT 1
22918: PPUSH
22919: LD_VAR 0 14
22923: PPUSH
22924: CALL_OW 2
22928: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22929: LD_VAR 0 14
22933: PPUSH
22934: LD_VAR 0 1
22938: PPUSH
22939: CALL_OW 250
22943: PPUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: CALL_OW 251
22953: PPUSH
22954: LD_INT 10
22956: PPUSH
22957: LD_INT 0
22959: PPUSH
22960: CALL_OW 50
// continue ;
22964: GO 22865
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22966: LD_VAR 0 12
22970: PUSH
22971: LD_INT 1
22973: ARRAY
22974: PPUSH
22975: CALL_OW 313
22979: PUSH
22980: LD_VAR 0 12
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: PPUSH
22989: CALL_OW 266
22993: PUSH
22994: LD_INT 32
22996: PUSH
22997: LD_INT 31
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: IN
23004: AND
23005: PUSH
23006: LD_VAR 0 12
23010: PUSH
23011: LD_INT 1
23013: ARRAY
23014: PPUSH
23015: CALL_OW 313
23019: PUSH
23020: LD_INT 6
23022: EQUAL
23023: OR
23024: IFFALSE 23044
// f := Delete ( f , 1 ) ;
23026: LD_ADDR_VAR 0 12
23030: PUSH
23031: LD_VAR 0 12
23035: PPUSH
23036: LD_INT 1
23038: PPUSH
23039: CALL_OW 3
23043: ST_TO_ADDR
// if not f then
23044: LD_VAR 0 12
23048: NOT
23049: IFFALSE 23067
// begin x := x + 2 ;
23051: LD_ADDR_VAR 0 13
23055: PUSH
23056: LD_VAR 0 13
23060: PUSH
23061: LD_INT 2
23063: PLUS
23064: ST_TO_ADDR
// continue ;
23065: GO 22865
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23067: LD_VAR 0 12
23071: PUSH
23072: LD_INT 1
23074: ARRAY
23075: PPUSH
23076: CALL_OW 266
23080: PUSH
23081: LD_INT 5
23083: EQUAL
23084: IFFALSE 23158
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23086: LD_VAR 0 12
23090: PUSH
23091: LD_INT 1
23093: ARRAY
23094: PPUSH
23095: CALL_OW 313
23099: PUSH
23100: LD_INT 3
23102: LESS
23103: IFFALSE 23139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23105: LD_INT 0
23107: PPUSH
23108: LD_INT 5
23110: PUSH
23111: LD_INT 8
23113: PUSH
23114: LD_INT 9
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: PUSH
23122: LD_VAR 0 17
23126: ARRAY
23127: PPUSH
23128: LD_VAR 0 4
23132: PPUSH
23133: CALL_OW 380
23137: GO 23156
// PrepareHuman ( false , i , skill ) ;
23139: LD_INT 0
23141: PPUSH
23142: LD_VAR 0 8
23146: PPUSH
23147: LD_VAR 0 4
23151: PPUSH
23152: CALL_OW 380
// end else
23156: GO 23175
// PrepareHuman ( false , i , skill ) ;
23158: LD_INT 0
23160: PPUSH
23161: LD_VAR 0 8
23165: PPUSH
23166: LD_VAR 0 4
23170: PPUSH
23171: CALL_OW 380
// un := CreateHuman ;
23175: LD_ADDR_VAR 0 14
23179: PUSH
23180: CALL_OW 44
23184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23185: LD_ADDR_VAR 0 7
23189: PUSH
23190: LD_VAR 0 7
23194: PPUSH
23195: LD_INT 1
23197: PPUSH
23198: LD_VAR 0 14
23202: PPUSH
23203: CALL_OW 2
23207: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23208: LD_VAR 0 14
23212: PPUSH
23213: LD_VAR 0 12
23217: PUSH
23218: LD_INT 1
23220: ARRAY
23221: PPUSH
23222: CALL_OW 52
// end ;
23226: GO 22865
23228: POP
23229: POP
// end ;
23230: GO 22167
23232: POP
23233: POP
// result := result ^ buildings ;
23234: LD_ADDR_VAR 0 7
23238: PUSH
23239: LD_VAR 0 7
23243: PUSH
23244: LD_VAR 0 18
23248: ADD
23249: ST_TO_ADDR
// end else
23250: GO 23393
// begin for i = 1 to personel do
23252: LD_ADDR_VAR 0 8
23256: PUSH
23257: DOUBLE
23258: LD_INT 1
23260: DEC
23261: ST_TO_ADDR
23262: LD_VAR 0 6
23266: PUSH
23267: FOR_TO
23268: IFFALSE 23391
// begin if i > 4 then
23270: LD_VAR 0 8
23274: PUSH
23275: LD_INT 4
23277: GREATER
23278: IFFALSE 23282
// break ;
23280: GO 23391
// x := personel [ i ] ;
23282: LD_ADDR_VAR 0 13
23286: PUSH
23287: LD_VAR 0 6
23291: PUSH
23292: LD_VAR 0 8
23296: ARRAY
23297: ST_TO_ADDR
// if x = - 1 then
23298: LD_VAR 0 13
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: EQUAL
23307: IFFALSE 23311
// continue ;
23309: GO 23267
// PrepareHuman ( false , i , skill ) ;
23311: LD_INT 0
23313: PPUSH
23314: LD_VAR 0 8
23318: PPUSH
23319: LD_VAR 0 4
23323: PPUSH
23324: CALL_OW 380
// un := CreateHuman ;
23328: LD_ADDR_VAR 0 14
23332: PUSH
23333: CALL_OW 44
23337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23338: LD_VAR 0 14
23342: PPUSH
23343: LD_VAR 0 1
23347: PPUSH
23348: CALL_OW 250
23352: PPUSH
23353: LD_VAR 0 1
23357: PPUSH
23358: CALL_OW 251
23362: PPUSH
23363: LD_INT 10
23365: PPUSH
23366: LD_INT 0
23368: PPUSH
23369: CALL_OW 50
// result := result ^ un ;
23373: LD_ADDR_VAR 0 7
23377: PUSH
23378: LD_VAR 0 7
23382: PUSH
23383: LD_VAR 0 14
23387: ADD
23388: ST_TO_ADDR
// end ;
23389: GO 23267
23391: POP
23392: POP
// end ; end ;
23393: LD_VAR 0 7
23397: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23398: LD_INT 0
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
23407: PPUSH
23408: PPUSH
23409: PPUSH
23410: PPUSH
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
// result := false ;
23416: LD_ADDR_VAR 0 3
23420: PUSH
23421: LD_INT 0
23423: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23424: LD_VAR 0 1
23428: NOT
23429: PUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL_OW 266
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: IN
23450: NOT
23451: OR
23452: IFFALSE 23456
// exit ;
23454: GO 24565
// nat := GetNation ( tower ) ;
23456: LD_ADDR_VAR 0 12
23460: PUSH
23461: LD_VAR 0 1
23465: PPUSH
23466: CALL_OW 248
23470: ST_TO_ADDR
// side := GetSide ( tower ) ;
23471: LD_ADDR_VAR 0 16
23475: PUSH
23476: LD_VAR 0 1
23480: PPUSH
23481: CALL_OW 255
23485: ST_TO_ADDR
// x := GetX ( tower ) ;
23486: LD_ADDR_VAR 0 10
23490: PUSH
23491: LD_VAR 0 1
23495: PPUSH
23496: CALL_OW 250
23500: ST_TO_ADDR
// y := GetY ( tower ) ;
23501: LD_ADDR_VAR 0 11
23505: PUSH
23506: LD_VAR 0 1
23510: PPUSH
23511: CALL_OW 251
23515: ST_TO_ADDR
// if not x or not y then
23516: LD_VAR 0 10
23520: NOT
23521: PUSH
23522: LD_VAR 0 11
23526: NOT
23527: OR
23528: IFFALSE 23532
// exit ;
23530: GO 24565
// weapon := 0 ;
23532: LD_ADDR_VAR 0 18
23536: PUSH
23537: LD_INT 0
23539: ST_TO_ADDR
// fac_list := [ ] ;
23540: LD_ADDR_VAR 0 17
23544: PUSH
23545: EMPTY
23546: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23547: LD_ADDR_VAR 0 6
23551: PUSH
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL_OW 274
23561: PPUSH
23562: LD_VAR 0 2
23566: PPUSH
23567: LD_INT 0
23569: PPUSH
23570: CALL 21136 0 3
23574: PPUSH
23575: LD_INT 30
23577: PUSH
23578: LD_INT 3
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PPUSH
23585: CALL_OW 72
23589: ST_TO_ADDR
// if not factories then
23590: LD_VAR 0 6
23594: NOT
23595: IFFALSE 23599
// exit ;
23597: GO 24565
// for i in factories do
23599: LD_ADDR_VAR 0 8
23603: PUSH
23604: LD_VAR 0 6
23608: PUSH
23609: FOR_IN
23610: IFFALSE 23635
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23612: LD_ADDR_VAR 0 17
23616: PUSH
23617: LD_VAR 0 17
23621: PUSH
23622: LD_VAR 0 8
23626: PPUSH
23627: CALL_OW 478
23631: UNION
23632: ST_TO_ADDR
23633: GO 23609
23635: POP
23636: POP
// if not fac_list then
23637: LD_VAR 0 17
23641: NOT
23642: IFFALSE 23646
// exit ;
23644: GO 24565
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23646: LD_ADDR_VAR 0 5
23650: PUSH
23651: LD_INT 4
23653: PUSH
23654: LD_INT 5
23656: PUSH
23657: LD_INT 9
23659: PUSH
23660: LD_INT 10
23662: PUSH
23663: LD_INT 6
23665: PUSH
23666: LD_INT 7
23668: PUSH
23669: LD_INT 11
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 27
23683: PUSH
23684: LD_INT 28
23686: PUSH
23687: LD_INT 26
23689: PUSH
23690: LD_INT 30
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 43
23701: PUSH
23702: LD_INT 44
23704: PUSH
23705: LD_INT 46
23707: PUSH
23708: LD_INT 45
23710: PUSH
23711: LD_INT 47
23713: PUSH
23714: LD_INT 49
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: LD_VAR 0 12
23734: ARRAY
23735: ST_TO_ADDR
// list := list isect fac_list ;
23736: LD_ADDR_VAR 0 5
23740: PUSH
23741: LD_VAR 0 5
23745: PUSH
23746: LD_VAR 0 17
23750: ISECT
23751: ST_TO_ADDR
// if not list then
23752: LD_VAR 0 5
23756: NOT
23757: IFFALSE 23761
// exit ;
23759: GO 24565
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23761: LD_VAR 0 12
23765: PUSH
23766: LD_INT 3
23768: EQUAL
23769: PUSH
23770: LD_INT 49
23772: PUSH
23773: LD_VAR 0 5
23777: IN
23778: AND
23779: PUSH
23780: LD_INT 31
23782: PPUSH
23783: LD_VAR 0 16
23787: PPUSH
23788: CALL_OW 321
23792: PUSH
23793: LD_INT 2
23795: EQUAL
23796: AND
23797: IFFALSE 23857
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23799: LD_INT 22
23801: PUSH
23802: LD_VAR 0 16
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 35
23813: PUSH
23814: LD_INT 49
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 91
23823: PUSH
23824: LD_VAR 0 1
23828: PUSH
23829: LD_INT 10
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: PPUSH
23842: CALL_OW 69
23846: NOT
23847: IFFALSE 23857
// weapon := ru_time_lapser ;
23849: LD_ADDR_VAR 0 18
23853: PUSH
23854: LD_INT 49
23856: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23857: LD_VAR 0 12
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: IN
23872: PUSH
23873: LD_INT 11
23875: PUSH
23876: LD_VAR 0 5
23880: IN
23881: PUSH
23882: LD_INT 30
23884: PUSH
23885: LD_VAR 0 5
23889: IN
23890: OR
23891: AND
23892: PUSH
23893: LD_INT 6
23895: PPUSH
23896: LD_VAR 0 16
23900: PPUSH
23901: CALL_OW 321
23905: PUSH
23906: LD_INT 2
23908: EQUAL
23909: AND
23910: IFFALSE 24075
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23912: LD_INT 22
23914: PUSH
23915: LD_VAR 0 16
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 35
23929: PUSH
23930: LD_INT 11
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 35
23939: PUSH
23940: LD_INT 30
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 91
23954: PUSH
23955: LD_VAR 0 1
23959: PUSH
23960: LD_INT 18
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: PPUSH
23973: CALL_OW 69
23977: NOT
23978: PUSH
23979: LD_INT 22
23981: PUSH
23982: LD_VAR 0 16
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: LD_INT 30
23996: PUSH
23997: LD_INT 32
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 30
24006: PUSH
24007: LD_INT 33
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 91
24021: PUSH
24022: LD_VAR 0 1
24026: PUSH
24027: LD_INT 12
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: PPUSH
24043: CALL_OW 69
24047: PUSH
24048: LD_INT 2
24050: GREATER
24051: AND
24052: IFFALSE 24075
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24054: LD_ADDR_VAR 0 18
24058: PUSH
24059: LD_INT 11
24061: PUSH
24062: LD_INT 30
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_VAR 0 12
24073: ARRAY
24074: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24075: LD_VAR 0 18
24079: NOT
24080: PUSH
24081: LD_INT 40
24083: PPUSH
24084: LD_VAR 0 16
24088: PPUSH
24089: CALL_OW 321
24093: PUSH
24094: LD_INT 2
24096: EQUAL
24097: AND
24098: PUSH
24099: LD_INT 7
24101: PUSH
24102: LD_VAR 0 5
24106: IN
24107: PUSH
24108: LD_INT 28
24110: PUSH
24111: LD_VAR 0 5
24115: IN
24116: OR
24117: PUSH
24118: LD_INT 45
24120: PUSH
24121: LD_VAR 0 5
24125: IN
24126: OR
24127: AND
24128: IFFALSE 24382
// begin hex := GetHexInfo ( x , y ) ;
24130: LD_ADDR_VAR 0 4
24134: PUSH
24135: LD_VAR 0 10
24139: PPUSH
24140: LD_VAR 0 11
24144: PPUSH
24145: CALL_OW 546
24149: ST_TO_ADDR
// if hex [ 1 ] then
24150: LD_VAR 0 4
24154: PUSH
24155: LD_INT 1
24157: ARRAY
24158: IFFALSE 24162
// exit ;
24160: GO 24565
// height := hex [ 2 ] ;
24162: LD_ADDR_VAR 0 15
24166: PUSH
24167: LD_VAR 0 4
24171: PUSH
24172: LD_INT 2
24174: ARRAY
24175: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24176: LD_ADDR_VAR 0 14
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 2
24186: PUSH
24187: LD_INT 3
24189: PUSH
24190: LD_INT 5
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: ST_TO_ADDR
// for i in tmp do
24199: LD_ADDR_VAR 0 8
24203: PUSH
24204: LD_VAR 0 14
24208: PUSH
24209: FOR_IN
24210: IFFALSE 24380
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24212: LD_ADDR_VAR 0 9
24216: PUSH
24217: LD_VAR 0 10
24221: PPUSH
24222: LD_VAR 0 8
24226: PPUSH
24227: LD_INT 5
24229: PPUSH
24230: CALL_OW 272
24234: PUSH
24235: LD_VAR 0 11
24239: PPUSH
24240: LD_VAR 0 8
24244: PPUSH
24245: LD_INT 5
24247: PPUSH
24248: CALL_OW 273
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24257: LD_VAR 0 9
24261: PUSH
24262: LD_INT 1
24264: ARRAY
24265: PPUSH
24266: LD_VAR 0 9
24270: PUSH
24271: LD_INT 2
24273: ARRAY
24274: PPUSH
24275: CALL_OW 488
24279: IFFALSE 24378
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24281: LD_ADDR_VAR 0 4
24285: PUSH
24286: LD_VAR 0 9
24290: PUSH
24291: LD_INT 1
24293: ARRAY
24294: PPUSH
24295: LD_VAR 0 9
24299: PUSH
24300: LD_INT 2
24302: ARRAY
24303: PPUSH
24304: CALL_OW 546
24308: ST_TO_ADDR
// if hex [ 1 ] then
24309: LD_VAR 0 4
24313: PUSH
24314: LD_INT 1
24316: ARRAY
24317: IFFALSE 24321
// continue ;
24319: GO 24209
// h := hex [ 2 ] ;
24321: LD_ADDR_VAR 0 13
24325: PUSH
24326: LD_VAR 0 4
24330: PUSH
24331: LD_INT 2
24333: ARRAY
24334: ST_TO_ADDR
// if h + 7 < height then
24335: LD_VAR 0 13
24339: PUSH
24340: LD_INT 7
24342: PLUS
24343: PUSH
24344: LD_VAR 0 15
24348: LESS
24349: IFFALSE 24378
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24351: LD_ADDR_VAR 0 18
24355: PUSH
24356: LD_INT 7
24358: PUSH
24359: LD_INT 28
24361: PUSH
24362: LD_INT 45
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: PUSH
24370: LD_VAR 0 12
24374: ARRAY
24375: ST_TO_ADDR
// break ;
24376: GO 24380
// end ; end ; end ;
24378: GO 24209
24380: POP
24381: POP
// end ; if not weapon then
24382: LD_VAR 0 18
24386: NOT
24387: IFFALSE 24447
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24389: LD_ADDR_VAR 0 5
24393: PUSH
24394: LD_VAR 0 5
24398: PUSH
24399: LD_INT 11
24401: PUSH
24402: LD_INT 30
24404: PUSH
24405: LD_INT 49
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: DIFF
24413: ST_TO_ADDR
// if not list then
24414: LD_VAR 0 5
24418: NOT
24419: IFFALSE 24423
// exit ;
24421: GO 24565
// weapon := list [ rand ( 1 , list ) ] ;
24423: LD_ADDR_VAR 0 18
24427: PUSH
24428: LD_VAR 0 5
24432: PUSH
24433: LD_INT 1
24435: PPUSH
24436: LD_VAR 0 5
24440: PPUSH
24441: CALL_OW 12
24445: ARRAY
24446: ST_TO_ADDR
// end ; if weapon then
24447: LD_VAR 0 18
24451: IFFALSE 24565
// begin tmp := CostOfWeapon ( weapon ) ;
24453: LD_ADDR_VAR 0 14
24457: PUSH
24458: LD_VAR 0 18
24462: PPUSH
24463: CALL_OW 451
24467: ST_TO_ADDR
// j := GetBase ( tower ) ;
24468: LD_ADDR_VAR 0 9
24472: PUSH
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 274
24482: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24483: LD_VAR 0 9
24487: PPUSH
24488: LD_INT 1
24490: PPUSH
24491: CALL_OW 275
24495: PUSH
24496: LD_VAR 0 14
24500: PUSH
24501: LD_INT 1
24503: ARRAY
24504: GREATEREQUAL
24505: PUSH
24506: LD_VAR 0 9
24510: PPUSH
24511: LD_INT 2
24513: PPUSH
24514: CALL_OW 275
24518: PUSH
24519: LD_VAR 0 14
24523: PUSH
24524: LD_INT 2
24526: ARRAY
24527: GREATEREQUAL
24528: AND
24529: PUSH
24530: LD_VAR 0 9
24534: PPUSH
24535: LD_INT 3
24537: PPUSH
24538: CALL_OW 275
24542: PUSH
24543: LD_VAR 0 14
24547: PUSH
24548: LD_INT 3
24550: ARRAY
24551: GREATEREQUAL
24552: AND
24553: IFFALSE 24565
// result := weapon ;
24555: LD_ADDR_VAR 0 3
24559: PUSH
24560: LD_VAR 0 18
24564: ST_TO_ADDR
// end ; end ;
24565: LD_VAR 0 3
24569: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24570: LD_INT 0
24572: PPUSH
24573: PPUSH
// result := true ;
24574: LD_ADDR_VAR 0 3
24578: PUSH
24579: LD_INT 1
24581: ST_TO_ADDR
// if array1 = array2 then
24582: LD_VAR 0 1
24586: PUSH
24587: LD_VAR 0 2
24591: EQUAL
24592: IFFALSE 24652
// begin for i = 1 to array1 do
24594: LD_ADDR_VAR 0 4
24598: PUSH
24599: DOUBLE
24600: LD_INT 1
24602: DEC
24603: ST_TO_ADDR
24604: LD_VAR 0 1
24608: PUSH
24609: FOR_TO
24610: IFFALSE 24648
// if array1 [ i ] <> array2 [ i ] then
24612: LD_VAR 0 1
24616: PUSH
24617: LD_VAR 0 4
24621: ARRAY
24622: PUSH
24623: LD_VAR 0 2
24627: PUSH
24628: LD_VAR 0 4
24632: ARRAY
24633: NONEQUAL
24634: IFFALSE 24646
// begin result := false ;
24636: LD_ADDR_VAR 0 3
24640: PUSH
24641: LD_INT 0
24643: ST_TO_ADDR
// break ;
24644: GO 24648
// end ;
24646: GO 24609
24648: POP
24649: POP
// end else
24650: GO 24660
// result := false ;
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_INT 0
24659: ST_TO_ADDR
// end ;
24660: LD_VAR 0 3
24664: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24665: LD_INT 0
24667: PPUSH
24668: PPUSH
// if not array1 or not array2 then
24669: LD_VAR 0 1
24673: NOT
24674: PUSH
24675: LD_VAR 0 2
24679: NOT
24680: OR
24681: IFFALSE 24685
// exit ;
24683: GO 24749
// result := true ;
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 1
24692: ST_TO_ADDR
// for i = 1 to array1 do
24693: LD_ADDR_VAR 0 4
24697: PUSH
24698: DOUBLE
24699: LD_INT 1
24701: DEC
24702: ST_TO_ADDR
24703: LD_VAR 0 1
24707: PUSH
24708: FOR_TO
24709: IFFALSE 24747
// if array1 [ i ] <> array2 [ i ] then
24711: LD_VAR 0 1
24715: PUSH
24716: LD_VAR 0 4
24720: ARRAY
24721: PUSH
24722: LD_VAR 0 2
24726: PUSH
24727: LD_VAR 0 4
24731: ARRAY
24732: NONEQUAL
24733: IFFALSE 24745
// begin result := false ;
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_INT 0
24742: ST_TO_ADDR
// break ;
24743: GO 24747
// end ;
24745: GO 24708
24747: POP
24748: POP
// end ;
24749: LD_VAR 0 3
24753: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24754: LD_INT 0
24756: PPUSH
24757: PPUSH
24758: PPUSH
// pom := GetBase ( fac ) ;
24759: LD_ADDR_VAR 0 5
24763: PUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL_OW 274
24773: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24774: LD_ADDR_VAR 0 4
24778: PUSH
24779: LD_VAR 0 2
24783: PUSH
24784: LD_INT 1
24786: ARRAY
24787: PPUSH
24788: LD_VAR 0 2
24792: PUSH
24793: LD_INT 2
24795: ARRAY
24796: PPUSH
24797: LD_VAR 0 2
24801: PUSH
24802: LD_INT 3
24804: ARRAY
24805: PPUSH
24806: LD_VAR 0 2
24810: PUSH
24811: LD_INT 4
24813: ARRAY
24814: PPUSH
24815: CALL_OW 449
24819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_VAR 0 5
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: CALL_OW 275
24837: PUSH
24838: LD_VAR 0 4
24842: PUSH
24843: LD_INT 1
24845: ARRAY
24846: GREATEREQUAL
24847: PUSH
24848: LD_VAR 0 5
24852: PPUSH
24853: LD_INT 2
24855: PPUSH
24856: CALL_OW 275
24860: PUSH
24861: LD_VAR 0 4
24865: PUSH
24866: LD_INT 2
24868: ARRAY
24869: GREATEREQUAL
24870: AND
24871: PUSH
24872: LD_VAR 0 5
24876: PPUSH
24877: LD_INT 3
24879: PPUSH
24880: CALL_OW 275
24884: PUSH
24885: LD_VAR 0 4
24889: PUSH
24890: LD_INT 3
24892: ARRAY
24893: GREATEREQUAL
24894: AND
24895: ST_TO_ADDR
// end ;
24896: LD_VAR 0 3
24900: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24901: LD_INT 0
24903: PPUSH
24904: PPUSH
24905: PPUSH
24906: PPUSH
// pom := GetBase ( building ) ;
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_VAR 0 1
24916: PPUSH
24917: CALL_OW 274
24921: ST_TO_ADDR
// if not pom then
24922: LD_VAR 0 3
24926: NOT
24927: IFFALSE 24931
// exit ;
24929: GO 25101
// btype := GetBType ( building ) ;
24931: LD_ADDR_VAR 0 5
24935: PUSH
24936: LD_VAR 0 1
24940: PPUSH
24941: CALL_OW 266
24945: ST_TO_ADDR
// if btype = b_armoury then
24946: LD_VAR 0 5
24950: PUSH
24951: LD_INT 4
24953: EQUAL
24954: IFFALSE 24964
// btype := b_barracks ;
24956: LD_ADDR_VAR 0 5
24960: PUSH
24961: LD_INT 5
24963: ST_TO_ADDR
// if btype = b_depot then
24964: LD_VAR 0 5
24968: PUSH
24969: LD_INT 0
24971: EQUAL
24972: IFFALSE 24982
// btype := b_warehouse ;
24974: LD_ADDR_VAR 0 5
24978: PUSH
24979: LD_INT 1
24981: ST_TO_ADDR
// if btype = b_workshop then
24982: LD_VAR 0 5
24986: PUSH
24987: LD_INT 2
24989: EQUAL
24990: IFFALSE 25000
// btype := b_factory ;
24992: LD_ADDR_VAR 0 5
24996: PUSH
24997: LD_INT 3
24999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25000: LD_ADDR_VAR 0 4
25004: PUSH
25005: LD_VAR 0 5
25009: PPUSH
25010: LD_VAR 0 1
25014: PPUSH
25015: CALL_OW 248
25019: PPUSH
25020: CALL_OW 450
25024: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_VAR 0 3
25034: PPUSH
25035: LD_INT 1
25037: PPUSH
25038: CALL_OW 275
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: LD_INT 1
25050: ARRAY
25051: GREATEREQUAL
25052: PUSH
25053: LD_VAR 0 3
25057: PPUSH
25058: LD_INT 2
25060: PPUSH
25061: CALL_OW 275
25065: PUSH
25066: LD_VAR 0 4
25070: PUSH
25071: LD_INT 2
25073: ARRAY
25074: GREATEREQUAL
25075: AND
25076: PUSH
25077: LD_VAR 0 3
25081: PPUSH
25082: LD_INT 3
25084: PPUSH
25085: CALL_OW 275
25089: PUSH
25090: LD_VAR 0 4
25094: PUSH
25095: LD_INT 3
25097: ARRAY
25098: GREATEREQUAL
25099: AND
25100: ST_TO_ADDR
// end ;
25101: LD_VAR 0 2
25105: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
// pom := GetBase ( building ) ;
25111: LD_ADDR_VAR 0 4
25115: PUSH
25116: LD_VAR 0 1
25120: PPUSH
25121: CALL_OW 274
25125: ST_TO_ADDR
// if not pom then
25126: LD_VAR 0 4
25130: NOT
25131: IFFALSE 25135
// exit ;
25133: GO 25236
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25135: LD_ADDR_VAR 0 5
25139: PUSH
25140: LD_VAR 0 2
25144: PPUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 248
25154: PPUSH
25155: CALL_OW 450
25159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_VAR 0 4
25169: PPUSH
25170: LD_INT 1
25172: PPUSH
25173: CALL_OW 275
25177: PUSH
25178: LD_VAR 0 5
25182: PUSH
25183: LD_INT 1
25185: ARRAY
25186: GREATEREQUAL
25187: PUSH
25188: LD_VAR 0 4
25192: PPUSH
25193: LD_INT 2
25195: PPUSH
25196: CALL_OW 275
25200: PUSH
25201: LD_VAR 0 5
25205: PUSH
25206: LD_INT 2
25208: ARRAY
25209: GREATEREQUAL
25210: AND
25211: PUSH
25212: LD_VAR 0 4
25216: PPUSH
25217: LD_INT 3
25219: PPUSH
25220: CALL_OW 275
25224: PUSH
25225: LD_VAR 0 5
25229: PUSH
25230: LD_INT 3
25232: ARRAY
25233: GREATEREQUAL
25234: AND
25235: ST_TO_ADDR
// end ;
25236: LD_VAR 0 3
25240: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
// result := false ;
25254: LD_ADDR_VAR 0 8
25258: PUSH
25259: LD_INT 0
25261: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25262: LD_VAR 0 5
25266: NOT
25267: PUSH
25268: LD_VAR 0 1
25272: NOT
25273: OR
25274: PUSH
25275: LD_VAR 0 2
25279: NOT
25280: OR
25281: PUSH
25282: LD_VAR 0 3
25286: NOT
25287: OR
25288: IFFALSE 25292
// exit ;
25290: GO 26106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25292: LD_ADDR_VAR 0 14
25296: PUSH
25297: LD_VAR 0 1
25301: PPUSH
25302: LD_VAR 0 2
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: LD_VAR 0 4
25316: PPUSH
25317: LD_VAR 0 5
25321: PUSH
25322: LD_INT 1
25324: ARRAY
25325: PPUSH
25326: CALL_OW 248
25330: PPUSH
25331: LD_INT 0
25333: PPUSH
25334: CALL 27343 0 6
25338: ST_TO_ADDR
// if not hexes then
25339: LD_VAR 0 14
25343: NOT
25344: IFFALSE 25348
// exit ;
25346: GO 26106
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25348: LD_ADDR_VAR 0 17
25352: PUSH
25353: LD_VAR 0 5
25357: PPUSH
25358: LD_INT 22
25360: PUSH
25361: LD_VAR 0 13
25365: PPUSH
25366: CALL_OW 255
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 30
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 30
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 72
25411: ST_TO_ADDR
// for i = 1 to hexes do
25412: LD_ADDR_VAR 0 9
25416: PUSH
25417: DOUBLE
25418: LD_INT 1
25420: DEC
25421: ST_TO_ADDR
25422: LD_VAR 0 14
25426: PUSH
25427: FOR_TO
25428: IFFALSE 26104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25430: LD_ADDR_VAR 0 13
25434: PUSH
25435: LD_VAR 0 14
25439: PUSH
25440: LD_VAR 0 9
25444: ARRAY
25445: PUSH
25446: LD_INT 1
25448: ARRAY
25449: PPUSH
25450: LD_VAR 0 14
25454: PUSH
25455: LD_VAR 0 9
25459: ARRAY
25460: PUSH
25461: LD_INT 2
25463: ARRAY
25464: PPUSH
25465: CALL_OW 428
25469: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25470: LD_VAR 0 14
25474: PUSH
25475: LD_VAR 0 9
25479: ARRAY
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: PPUSH
25485: LD_VAR 0 14
25489: PUSH
25490: LD_VAR 0 9
25494: ARRAY
25495: PUSH
25496: LD_INT 2
25498: ARRAY
25499: PPUSH
25500: CALL_OW 351
25504: PUSH
25505: LD_VAR 0 14
25509: PUSH
25510: LD_VAR 0 9
25514: ARRAY
25515: PUSH
25516: LD_INT 1
25518: ARRAY
25519: PPUSH
25520: LD_VAR 0 14
25524: PUSH
25525: LD_VAR 0 9
25529: ARRAY
25530: PUSH
25531: LD_INT 2
25533: ARRAY
25534: PPUSH
25535: CALL_OW 488
25539: NOT
25540: OR
25541: PUSH
25542: LD_VAR 0 13
25546: PPUSH
25547: CALL_OW 247
25551: PUSH
25552: LD_INT 3
25554: EQUAL
25555: OR
25556: IFFALSE 25562
// exit ;
25558: POP
25559: POP
25560: GO 26106
// if not tmp then
25562: LD_VAR 0 13
25566: NOT
25567: IFFALSE 25571
// continue ;
25569: GO 25427
// result := true ;
25571: LD_ADDR_VAR 0 8
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25579: LD_VAR 0 6
25583: PUSH
25584: LD_VAR 0 13
25588: PPUSH
25589: CALL_OW 247
25593: PUSH
25594: LD_INT 2
25596: EQUAL
25597: AND
25598: PUSH
25599: LD_VAR 0 13
25603: PPUSH
25604: CALL_OW 263
25608: PUSH
25609: LD_INT 1
25611: EQUAL
25612: AND
25613: IFFALSE 25777
// begin if IsDrivenBy ( tmp ) then
25615: LD_VAR 0 13
25619: PPUSH
25620: CALL_OW 311
25624: IFFALSE 25628
// continue ;
25626: GO 25427
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25628: LD_VAR 0 6
25632: PPUSH
25633: LD_INT 3
25635: PUSH
25636: LD_INT 60
25638: PUSH
25639: EMPTY
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 55
25651: PUSH
25652: EMPTY
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PPUSH
25663: CALL_OW 72
25667: IFFALSE 25775
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25669: LD_ADDR_VAR 0 18
25673: PUSH
25674: LD_VAR 0 6
25678: PPUSH
25679: LD_INT 3
25681: PUSH
25682: LD_INT 60
25684: PUSH
25685: EMPTY
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 3
25694: PUSH
25695: LD_INT 55
25697: PUSH
25698: EMPTY
25699: LIST
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 72
25713: PUSH
25714: LD_INT 1
25716: ARRAY
25717: ST_TO_ADDR
// if IsInUnit ( driver ) then
25718: LD_VAR 0 18
25722: PPUSH
25723: CALL_OW 310
25727: IFFALSE 25738
// ComExit ( driver ) ;
25729: LD_VAR 0 18
25733: PPUSH
25734: CALL 50527 0 1
// AddComEnterUnit ( driver , tmp ) ;
25738: LD_VAR 0 18
25742: PPUSH
25743: LD_VAR 0 13
25747: PPUSH
25748: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25752: LD_VAR 0 18
25756: PPUSH
25757: LD_VAR 0 7
25761: PPUSH
25762: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25766: LD_VAR 0 18
25770: PPUSH
25771: CALL_OW 181
// end ; continue ;
25775: GO 25427
// end ; if not cleaners or not tmp in cleaners then
25777: LD_VAR 0 6
25781: NOT
25782: PUSH
25783: LD_VAR 0 13
25787: PUSH
25788: LD_VAR 0 6
25792: IN
25793: NOT
25794: OR
25795: IFFALSE 26102
// begin if dep then
25797: LD_VAR 0 17
25801: IFFALSE 25937
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25803: LD_ADDR_VAR 0 16
25807: PUSH
25808: LD_VAR 0 17
25812: PUSH
25813: LD_INT 1
25815: ARRAY
25816: PPUSH
25817: CALL_OW 250
25821: PPUSH
25822: LD_VAR 0 17
25826: PUSH
25827: LD_INT 1
25829: ARRAY
25830: PPUSH
25831: CALL_OW 254
25835: PPUSH
25836: LD_INT 5
25838: PPUSH
25839: CALL_OW 272
25843: PUSH
25844: LD_VAR 0 17
25848: PUSH
25849: LD_INT 1
25851: ARRAY
25852: PPUSH
25853: CALL_OW 251
25857: PPUSH
25858: LD_VAR 0 17
25862: PUSH
25863: LD_INT 1
25865: ARRAY
25866: PPUSH
25867: CALL_OW 254
25871: PPUSH
25872: LD_INT 5
25874: PPUSH
25875: CALL_OW 273
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25884: LD_VAR 0 16
25888: PUSH
25889: LD_INT 1
25891: ARRAY
25892: PPUSH
25893: LD_VAR 0 16
25897: PUSH
25898: LD_INT 2
25900: ARRAY
25901: PPUSH
25902: CALL_OW 488
25906: IFFALSE 25937
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25908: LD_VAR 0 13
25912: PPUSH
25913: LD_VAR 0 16
25917: PUSH
25918: LD_INT 1
25920: ARRAY
25921: PPUSH
25922: LD_VAR 0 16
25926: PUSH
25927: LD_INT 2
25929: ARRAY
25930: PPUSH
25931: CALL_OW 111
// continue ;
25935: GO 25427
// end ; end ; r := GetDir ( tmp ) ;
25937: LD_ADDR_VAR 0 15
25941: PUSH
25942: LD_VAR 0 13
25946: PPUSH
25947: CALL_OW 254
25951: ST_TO_ADDR
// if r = 5 then
25952: LD_VAR 0 15
25956: PUSH
25957: LD_INT 5
25959: EQUAL
25960: IFFALSE 25970
// r := 0 ;
25962: LD_ADDR_VAR 0 15
25966: PUSH
25967: LD_INT 0
25969: ST_TO_ADDR
// for j = r to 5 do
25970: LD_ADDR_VAR 0 10
25974: PUSH
25975: DOUBLE
25976: LD_VAR 0 15
25980: DEC
25981: ST_TO_ADDR
25982: LD_INT 5
25984: PUSH
25985: FOR_TO
25986: IFFALSE 26100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25988: LD_ADDR_VAR 0 11
25992: PUSH
25993: LD_VAR 0 13
25997: PPUSH
25998: CALL_OW 250
26002: PPUSH
26003: LD_VAR 0 10
26007: PPUSH
26008: LD_INT 2
26010: PPUSH
26011: CALL_OW 272
26015: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26016: LD_ADDR_VAR 0 12
26020: PUSH
26021: LD_VAR 0 13
26025: PPUSH
26026: CALL_OW 251
26030: PPUSH
26031: LD_VAR 0 10
26035: PPUSH
26036: LD_INT 2
26038: PPUSH
26039: CALL_OW 273
26043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26044: LD_VAR 0 11
26048: PPUSH
26049: LD_VAR 0 12
26053: PPUSH
26054: CALL_OW 488
26058: PUSH
26059: LD_VAR 0 11
26063: PPUSH
26064: LD_VAR 0 12
26068: PPUSH
26069: CALL_OW 428
26073: NOT
26074: AND
26075: IFFALSE 26098
// begin ComMoveXY ( tmp , _x , _y ) ;
26077: LD_VAR 0 13
26081: PPUSH
26082: LD_VAR 0 11
26086: PPUSH
26087: LD_VAR 0 12
26091: PPUSH
26092: CALL_OW 111
// break ;
26096: GO 26100
// end ; end ;
26098: GO 25985
26100: POP
26101: POP
// end ; end ;
26102: GO 25427
26104: POP
26105: POP
// end ;
26106: LD_VAR 0 8
26110: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26111: LD_INT 0
26113: PPUSH
// result := true ;
26114: LD_ADDR_VAR 0 3
26118: PUSH
26119: LD_INT 1
26121: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26122: LD_VAR 0 2
26126: PUSH
26127: LD_INT 24
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26141
26133: LD_INT 33
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26166
26141: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26142: LD_ADDR_VAR 0 3
26146: PUSH
26147: LD_INT 32
26149: PPUSH
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL_OW 321
26159: PUSH
26160: LD_INT 2
26162: EQUAL
26163: ST_TO_ADDR
26164: GO 26486
26166: LD_INT 20
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26199
26174: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26175: LD_ADDR_VAR 0 3
26179: PUSH
26180: LD_INT 6
26182: PPUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL_OW 321
26192: PUSH
26193: LD_INT 2
26195: EQUAL
26196: ST_TO_ADDR
26197: GO 26486
26199: LD_INT 22
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26213
26205: LD_INT 36
26207: DOUBLE
26208: EQUAL
26209: IFTRUE 26213
26211: GO 26238
26213: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26214: LD_ADDR_VAR 0 3
26218: PUSH
26219: LD_INT 15
26221: PPUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL_OW 321
26231: PUSH
26232: LD_INT 2
26234: EQUAL
26235: ST_TO_ADDR
26236: GO 26486
26238: LD_INT 30
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26271
26246: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26247: LD_ADDR_VAR 0 3
26251: PUSH
26252: LD_INT 20
26254: PPUSH
26255: LD_VAR 0 1
26259: PPUSH
26260: CALL_OW 321
26264: PUSH
26265: LD_INT 2
26267: EQUAL
26268: ST_TO_ADDR
26269: GO 26486
26271: LD_INT 28
26273: DOUBLE
26274: EQUAL
26275: IFTRUE 26285
26277: LD_INT 21
26279: DOUBLE
26280: EQUAL
26281: IFTRUE 26285
26283: GO 26310
26285: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26286: LD_ADDR_VAR 0 3
26290: PUSH
26291: LD_INT 21
26293: PPUSH
26294: LD_VAR 0 1
26298: PPUSH
26299: CALL_OW 321
26303: PUSH
26304: LD_INT 2
26306: EQUAL
26307: ST_TO_ADDR
26308: GO 26486
26310: LD_INT 16
26312: DOUBLE
26313: EQUAL
26314: IFTRUE 26318
26316: GO 26345
26318: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_EXP 108
26328: PPUSH
26329: LD_VAR 0 1
26333: PPUSH
26334: CALL_OW 321
26338: PUSH
26339: LD_INT 2
26341: EQUAL
26342: ST_TO_ADDR
26343: GO 26486
26345: LD_INT 19
26347: DOUBLE
26348: EQUAL
26349: IFTRUE 26359
26351: LD_INT 23
26353: DOUBLE
26354: EQUAL
26355: IFTRUE 26359
26357: GO 26386
26359: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26360: LD_ADDR_VAR 0 3
26364: PUSH
26365: LD_EXP 107
26369: PPUSH
26370: LD_VAR 0 1
26374: PPUSH
26375: CALL_OW 321
26379: PUSH
26380: LD_INT 2
26382: EQUAL
26383: ST_TO_ADDR
26384: GO 26486
26386: LD_INT 17
26388: DOUBLE
26389: EQUAL
26390: IFTRUE 26394
26392: GO 26419
26394: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26395: LD_ADDR_VAR 0 3
26399: PUSH
26400: LD_INT 39
26402: PPUSH
26403: LD_VAR 0 1
26407: PPUSH
26408: CALL_OW 321
26412: PUSH
26413: LD_INT 2
26415: EQUAL
26416: ST_TO_ADDR
26417: GO 26486
26419: LD_INT 18
26421: DOUBLE
26422: EQUAL
26423: IFTRUE 26427
26425: GO 26452
26427: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26428: LD_ADDR_VAR 0 3
26432: PUSH
26433: LD_INT 40
26435: PPUSH
26436: LD_VAR 0 1
26440: PPUSH
26441: CALL_OW 321
26445: PUSH
26446: LD_INT 2
26448: EQUAL
26449: ST_TO_ADDR
26450: GO 26486
26452: LD_INT 27
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26485
26460: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26461: LD_ADDR_VAR 0 3
26465: PUSH
26466: LD_INT 35
26468: PPUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 321
26478: PUSH
26479: LD_INT 2
26481: EQUAL
26482: ST_TO_ADDR
26483: GO 26486
26485: POP
// end ;
26486: LD_VAR 0 3
26490: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
// result := false ;
26504: LD_ADDR_VAR 0 6
26508: PUSH
26509: LD_INT 0
26511: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26512: LD_VAR 0 1
26516: NOT
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 266
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: IN
26538: NOT
26539: OR
26540: PUSH
26541: LD_VAR 0 2
26545: NOT
26546: OR
26547: PUSH
26548: LD_VAR 0 5
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: LD_INT 3
26564: PUSH
26565: LD_INT 4
26567: PUSH
26568: LD_INT 5
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: IN
26579: NOT
26580: OR
26581: PUSH
26582: LD_VAR 0 3
26586: PPUSH
26587: LD_VAR 0 4
26591: PPUSH
26592: CALL_OW 488
26596: NOT
26597: OR
26598: IFFALSE 26602
// exit ;
26600: GO 27338
// side := GetSide ( depot ) ;
26602: LD_ADDR_VAR 0 9
26606: PUSH
26607: LD_VAR 0 1
26611: PPUSH
26612: CALL_OW 255
26616: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26617: LD_VAR 0 9
26621: PPUSH
26622: LD_VAR 0 2
26626: PPUSH
26627: CALL 26111 0 2
26631: NOT
26632: IFFALSE 26636
// exit ;
26634: GO 27338
// pom := GetBase ( depot ) ;
26636: LD_ADDR_VAR 0 10
26640: PUSH
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL_OW 274
26650: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26651: LD_ADDR_VAR 0 11
26655: PUSH
26656: LD_VAR 0 2
26660: PPUSH
26661: LD_VAR 0 1
26665: PPUSH
26666: CALL_OW 248
26670: PPUSH
26671: CALL_OW 450
26675: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26676: LD_VAR 0 10
26680: PPUSH
26681: LD_INT 1
26683: PPUSH
26684: CALL_OW 275
26688: PUSH
26689: LD_VAR 0 11
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: GREATEREQUAL
26698: PUSH
26699: LD_VAR 0 10
26703: PPUSH
26704: LD_INT 2
26706: PPUSH
26707: CALL_OW 275
26711: PUSH
26712: LD_VAR 0 11
26716: PUSH
26717: LD_INT 2
26719: ARRAY
26720: GREATEREQUAL
26721: AND
26722: PUSH
26723: LD_VAR 0 10
26727: PPUSH
26728: LD_INT 3
26730: PPUSH
26731: CALL_OW 275
26735: PUSH
26736: LD_VAR 0 11
26740: PUSH
26741: LD_INT 3
26743: ARRAY
26744: GREATEREQUAL
26745: AND
26746: NOT
26747: IFFALSE 26751
// exit ;
26749: GO 27338
// if GetBType ( depot ) = b_depot then
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL_OW 266
26760: PUSH
26761: LD_INT 0
26763: EQUAL
26764: IFFALSE 26776
// dist := 28 else
26766: LD_ADDR_VAR 0 14
26770: PUSH
26771: LD_INT 28
26773: ST_TO_ADDR
26774: GO 26784
// dist := 36 ;
26776: LD_ADDR_VAR 0 14
26780: PUSH
26781: LD_INT 36
26783: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26784: LD_VAR 0 1
26788: PPUSH
26789: LD_VAR 0 3
26793: PPUSH
26794: LD_VAR 0 4
26798: PPUSH
26799: CALL_OW 297
26803: PUSH
26804: LD_VAR 0 14
26808: GREATER
26809: IFFALSE 26813
// exit ;
26811: GO 27338
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26813: LD_ADDR_VAR 0 12
26817: PUSH
26818: LD_VAR 0 2
26822: PPUSH
26823: LD_VAR 0 3
26827: PPUSH
26828: LD_VAR 0 4
26832: PPUSH
26833: LD_VAR 0 5
26837: PPUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 248
26847: PPUSH
26848: LD_INT 0
26850: PPUSH
26851: CALL 27343 0 6
26855: ST_TO_ADDR
// if not hexes then
26856: LD_VAR 0 12
26860: NOT
26861: IFFALSE 26865
// exit ;
26863: GO 27338
// hex := GetHexInfo ( x , y ) ;
26865: LD_ADDR_VAR 0 15
26869: PUSH
26870: LD_VAR 0 3
26874: PPUSH
26875: LD_VAR 0 4
26879: PPUSH
26880: CALL_OW 546
26884: ST_TO_ADDR
// if hex [ 1 ] then
26885: LD_VAR 0 15
26889: PUSH
26890: LD_INT 1
26892: ARRAY
26893: IFFALSE 26897
// exit ;
26895: GO 27338
// height := hex [ 2 ] ;
26897: LD_ADDR_VAR 0 13
26901: PUSH
26902: LD_VAR 0 15
26906: PUSH
26907: LD_INT 2
26909: ARRAY
26910: ST_TO_ADDR
// for i = 1 to hexes do
26911: LD_ADDR_VAR 0 7
26915: PUSH
26916: DOUBLE
26917: LD_INT 1
26919: DEC
26920: ST_TO_ADDR
26921: LD_VAR 0 12
26925: PUSH
26926: FOR_TO
26927: IFFALSE 27257
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26929: LD_VAR 0 12
26933: PUSH
26934: LD_VAR 0 7
26938: ARRAY
26939: PUSH
26940: LD_INT 1
26942: ARRAY
26943: PPUSH
26944: LD_VAR 0 12
26948: PUSH
26949: LD_VAR 0 7
26953: ARRAY
26954: PUSH
26955: LD_INT 2
26957: ARRAY
26958: PPUSH
26959: CALL_OW 488
26963: NOT
26964: PUSH
26965: LD_VAR 0 12
26969: PUSH
26970: LD_VAR 0 7
26974: ARRAY
26975: PUSH
26976: LD_INT 1
26978: ARRAY
26979: PPUSH
26980: LD_VAR 0 12
26984: PUSH
26985: LD_VAR 0 7
26989: ARRAY
26990: PUSH
26991: LD_INT 2
26993: ARRAY
26994: PPUSH
26995: CALL_OW 428
26999: PUSH
27000: LD_INT 0
27002: GREATER
27003: OR
27004: PUSH
27005: LD_VAR 0 12
27009: PUSH
27010: LD_VAR 0 7
27014: ARRAY
27015: PUSH
27016: LD_INT 1
27018: ARRAY
27019: PPUSH
27020: LD_VAR 0 12
27024: PUSH
27025: LD_VAR 0 7
27029: ARRAY
27030: PUSH
27031: LD_INT 2
27033: ARRAY
27034: PPUSH
27035: CALL_OW 351
27039: OR
27040: IFFALSE 27046
// exit ;
27042: POP
27043: POP
27044: GO 27338
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27046: LD_ADDR_VAR 0 8
27050: PUSH
27051: LD_VAR 0 12
27055: PUSH
27056: LD_VAR 0 7
27060: ARRAY
27061: PUSH
27062: LD_INT 1
27064: ARRAY
27065: PPUSH
27066: LD_VAR 0 12
27070: PUSH
27071: LD_VAR 0 7
27075: ARRAY
27076: PUSH
27077: LD_INT 2
27079: ARRAY
27080: PPUSH
27081: CALL_OW 546
27085: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27086: LD_VAR 0 8
27090: PUSH
27091: LD_INT 1
27093: ARRAY
27094: PUSH
27095: LD_VAR 0 8
27099: PUSH
27100: LD_INT 2
27102: ARRAY
27103: PUSH
27104: LD_VAR 0 13
27108: PUSH
27109: LD_INT 2
27111: PLUS
27112: GREATER
27113: OR
27114: PUSH
27115: LD_VAR 0 8
27119: PUSH
27120: LD_INT 2
27122: ARRAY
27123: PUSH
27124: LD_VAR 0 13
27128: PUSH
27129: LD_INT 2
27131: MINUS
27132: LESS
27133: OR
27134: PUSH
27135: LD_VAR 0 8
27139: PUSH
27140: LD_INT 3
27142: ARRAY
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 8
27149: PUSH
27150: LD_INT 9
27152: PUSH
27153: LD_INT 10
27155: PUSH
27156: LD_INT 11
27158: PUSH
27159: LD_INT 12
27161: PUSH
27162: LD_INT 13
27164: PUSH
27165: LD_INT 16
27167: PUSH
27168: LD_INT 17
27170: PUSH
27171: LD_INT 18
27173: PUSH
27174: LD_INT 19
27176: PUSH
27177: LD_INT 20
27179: PUSH
27180: LD_INT 21
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: IN
27198: NOT
27199: OR
27200: PUSH
27201: LD_VAR 0 8
27205: PUSH
27206: LD_INT 5
27208: ARRAY
27209: NOT
27210: OR
27211: PUSH
27212: LD_VAR 0 8
27216: PUSH
27217: LD_INT 6
27219: ARRAY
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: LD_INT 7
27229: PUSH
27230: LD_INT 9
27232: PUSH
27233: LD_INT 10
27235: PUSH
27236: LD_INT 11
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: IN
27247: NOT
27248: OR
27249: IFFALSE 27255
// exit ;
27251: POP
27252: POP
27253: GO 27338
// end ;
27255: GO 26926
27257: POP
27258: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27259: LD_VAR 0 9
27263: PPUSH
27264: LD_VAR 0 3
27268: PPUSH
27269: LD_VAR 0 4
27273: PPUSH
27274: LD_INT 20
27276: PPUSH
27277: CALL 19284 0 4
27281: PUSH
27282: LD_INT 4
27284: ARRAY
27285: IFFALSE 27289
// exit ;
27287: GO 27338
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27289: LD_VAR 0 2
27293: PUSH
27294: LD_INT 29
27296: PUSH
27297: LD_INT 30
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: IN
27304: PUSH
27305: LD_VAR 0 3
27309: PPUSH
27310: LD_VAR 0 4
27314: PPUSH
27315: LD_VAR 0 9
27319: PPUSH
27320: CALL_OW 440
27324: NOT
27325: AND
27326: IFFALSE 27330
// exit ;
27328: GO 27338
// result := true ;
27330: LD_ADDR_VAR 0 6
27334: PUSH
27335: LD_INT 1
27337: ST_TO_ADDR
// end ;
27338: LD_VAR 0 6
27342: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27343: LD_INT 0
27345: PPUSH
27346: PPUSH
27347: PPUSH
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
27366: PPUSH
27367: PPUSH
27368: PPUSH
27369: PPUSH
27370: PPUSH
27371: PPUSH
27372: PPUSH
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
// result = [ ] ;
27403: LD_ADDR_VAR 0 7
27407: PUSH
27408: EMPTY
27409: ST_TO_ADDR
// temp_list = [ ] ;
27410: LD_ADDR_VAR 0 9
27414: PUSH
27415: EMPTY
27416: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27417: LD_VAR 0 4
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: LD_INT 3
27433: PUSH
27434: LD_INT 4
27436: PUSH
27437: LD_INT 5
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: IN
27448: NOT
27449: PUSH
27450: LD_VAR 0 1
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: IN
27465: PUSH
27466: LD_VAR 0 5
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: IN
27485: NOT
27486: AND
27487: OR
27488: IFFALSE 27492
// exit ;
27490: GO 45883
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27492: LD_VAR 0 1
27496: PUSH
27497: LD_INT 6
27499: PUSH
27500: LD_INT 7
27502: PUSH
27503: LD_INT 8
27505: PUSH
27506: LD_INT 13
27508: PUSH
27509: LD_INT 12
27511: PUSH
27512: LD_INT 15
27514: PUSH
27515: LD_INT 11
27517: PUSH
27518: LD_INT 14
27520: PUSH
27521: LD_INT 10
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: IN
27535: IFFALSE 27545
// btype = b_lab ;
27537: LD_ADDR_VAR 0 1
27541: PUSH
27542: LD_INT 6
27544: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27545: LD_VAR 0 6
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: LD_INT 2
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: IN
27564: NOT
27565: PUSH
27566: LD_VAR 0 1
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: LD_INT 6
27585: PUSH
27586: LD_INT 36
27588: PUSH
27589: LD_INT 4
27591: PUSH
27592: LD_INT 5
27594: PUSH
27595: LD_INT 31
27597: PUSH
27598: LD_INT 32
27600: PUSH
27601: LD_INT 33
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: IN
27617: NOT
27618: PUSH
27619: LD_VAR 0 6
27623: PUSH
27624: LD_INT 1
27626: EQUAL
27627: AND
27628: OR
27629: PUSH
27630: LD_VAR 0 1
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 3
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: IN
27645: NOT
27646: PUSH
27647: LD_VAR 0 6
27651: PUSH
27652: LD_INT 2
27654: EQUAL
27655: AND
27656: OR
27657: IFFALSE 27667
// mode = 0 ;
27659: LD_ADDR_VAR 0 6
27663: PUSH
27664: LD_INT 0
27666: ST_TO_ADDR
// case mode of 0 :
27667: LD_VAR 0 6
27671: PUSH
27672: LD_INT 0
27674: DOUBLE
27675: EQUAL
27676: IFTRUE 27680
27678: GO 39133
27680: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27681: LD_ADDR_VAR 0 11
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: NEG
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27874: LD_ADDR_VAR 0 12
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 3
28031: NEG
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 3
28042: NEG
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28070: LD_ADDR_VAR 0 13
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: LD_INT 2
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: LD_INT 3
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 3
28229: NEG
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 3
28241: NEG
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28269: LD_ADDR_VAR 0 14
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 3
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 3
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 2
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28465: LD_ADDR_VAR 0 15
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: LD_INT 0
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 3
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28658: LD_ADDR_VAR 0 16
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: LD_INT 3
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28851: LD_ADDR_VAR 0 17
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 1
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: NEG
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 2
29038: NEG
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29081: LD_ADDR_VAR 0 18
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: LD_INT 1
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: NEG
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29311: LD_ADDR_VAR 0 19
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 2
29487: NEG
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 2
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29541: LD_ADDR_VAR 0 20
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 2
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 2
29717: NEG
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 2
29728: NEG
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29771: LD_ADDR_VAR 0 21
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 2
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: LD_INT 2
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: LD_INT 2
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30001: LD_ADDR_VAR 0 22
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30231: LD_ADDR_VAR 0 23
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: LD_INT 2
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 2
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 2
30442: NEG
30443: PUSH
30444: LD_INT 3
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: LD_INT 3
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: LD_INT 2
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30511: LD_ADDR_VAR 0 24
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 2
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 3
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 3
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30787: LD_ADDR_VAR 0 25
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: NEG
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: LD_INT 1
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: LD_INT 2
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 3
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: LD_INT 3
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31061: LD_ADDR_VAR 0 26
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 2
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 3
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 3
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31337: LD_ADDR_VAR 0 27
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: NEG
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31617: LD_ADDR_VAR 0 28
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 3
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: NEG
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31899: LD_ADDR_VAR 0 29
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 2
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: LD_INT 3
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 3
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 1
32132: NEG
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32178: LD_ADDR_VAR 0 30
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: NEG
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32456: LD_ADDR_VAR 0 31
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 2
32633: NEG
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: LD_INT 3
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 3
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 3
32699: NEG
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32734: LD_ADDR_VAR 0 32
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 3
32977: NEG
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33012: LD_ADDR_VAR 0 33
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 3
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 3
33256: NEG
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33291: LD_ADDR_VAR 0 34
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: NEG
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 2
33470: NEG
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: LD_INT 2
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 3
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 3
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33571: LD_ADDR_VAR 0 35
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33683: LD_ADDR_VAR 0 36
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33795: LD_ADDR_VAR 0 37
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33907: LD_ADDR_VAR 0 38
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34019: LD_ADDR_VAR 0 39
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34131: LD_ADDR_VAR 0 40
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34243: LD_ADDR_VAR 0 41
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: LD_INT 3
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 3
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: NEG
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 3
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: NEG
34553: PUSH
34554: LD_INT 3
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34593: LD_ADDR_VAR 0 42
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: LD_INT 3
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: LD_INT 3
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 3
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: LD_INT 3
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: LD_INT 3
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: NEG
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: NEG
34903: PUSH
34904: LD_INT 3
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34943: LD_ADDR_VAR 0 43
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 3
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 3
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 2
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 3
35239: NEG
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35291: LD_ADDR_VAR 0 44
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: NEG
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: LD_INT 3
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 3
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 3
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 3
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: LD_INT 3
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 3
35565: NEG
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 3
35576: NEG
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 3
35588: NEG
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: LD_INT 3
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35641: LD_ADDR_VAR 0 45
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: LD_INT 2
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 3
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 3
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 3
35938: NEG
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: LD_INT 3
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35991: LD_ADDR_VAR 0 46
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: LD_INT 2
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: NEG
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 3
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 3
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 2
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 3
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 3
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 3
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 3
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 3
36287: NEG
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36339: LD_ADDR_VAR 0 47
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: NEG
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36490: LD_ADDR_VAR 0 48
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36637: LD_ADDR_VAR 0 49
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36781: LD_ADDR_VAR 0 50
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36925: LD_ADDR_VAR 0 51
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: NEG
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 2
37048: NEG
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37072: LD_ADDR_VAR 0 52
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37223: LD_ADDR_VAR 0 53
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 2
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 2
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37453: LD_ADDR_VAR 0 54
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 2
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: LD_INT 2
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37683: LD_ADDR_VAR 0 55
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: LD_INT 2
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37913: LD_ADDR_VAR 0 56
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 1
38078: NEG
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38143: LD_ADDR_VAR 0 57
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38373: LD_ADDR_VAR 0 58
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38603: LD_ADDR_VAR 0 59
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38691: LD_ADDR_VAR 0 60
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38779: LD_ADDR_VAR 0 61
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38867: LD_ADDR_VAR 0 62
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38955: LD_ADDR_VAR 0 63
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39043: LD_ADDR_VAR 0 64
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: ST_TO_ADDR
// end ; 1 :
39131: GO 45028
39133: LD_INT 1
39135: DOUBLE
39136: EQUAL
39137: IFTRUE 39141
39139: GO 41764
39141: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39142: LD_ADDR_VAR 0 11
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 3
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 3
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39186: LD_ADDR_VAR 0 12
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39227: LD_ADDR_VAR 0 13
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 3
39244: PUSH
39245: LD_INT 3
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: LD_INT 3
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39267: LD_ADDR_VAR 0 14
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39308: LD_ADDR_VAR 0 15
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 3
39326: NEG
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: NEG
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39352: LD_ADDR_VAR 0 16
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 3
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: LD_INT 3
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39398: LD_ADDR_VAR 0 17
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 3
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39442: LD_ADDR_VAR 0 18
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39483: LD_ADDR_VAR 0 19
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39523: LD_ADDR_VAR 0 20
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 3
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39564: LD_ADDR_VAR 0 21
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 3
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39608: LD_ADDR_VAR 0 22
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: NEG
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39654: LD_ADDR_VAR 0 23
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 3
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 4
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: LD_INT 3
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39698: LD_ADDR_VAR 0 24
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 4
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39739: LD_ADDR_VAR 0 25
39743: PUSH
39744: LD_INT 3
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 4
39756: PUSH
39757: LD_INT 3
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: PUSH
39767: LD_INT 4
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39779: LD_ADDR_VAR 0 26
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 3
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 4
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 3
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: LIST
39819: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39820: LD_ADDR_VAR 0 27
39824: PUSH
39825: LD_INT 3
39827: NEG
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 4
39849: NEG
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39864: LD_ADDR_VAR 0 28
39868: PUSH
39869: LD_INT 3
39871: NEG
39872: PUSH
39873: LD_INT 3
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 3
39883: NEG
39884: PUSH
39885: LD_INT 4
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 4
39895: NEG
39896: PUSH
39897: LD_INT 3
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39910: LD_ADDR_VAR 0 29
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 3
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 4
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 4
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 3
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 5
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 5
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 4
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 6
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 6
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 5
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40065: LD_ADDR_VAR 0 30
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 3
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 4
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 4
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 4
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 5
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 5
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 6
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 6
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40208: LD_ADDR_VAR 0 31
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 3
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 4
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 4
40255: PUSH
40256: LD_INT 4
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: LD_INT 4
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 5
40275: PUSH
40276: LD_INT 4
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 5
40285: PUSH
40286: LD_INT 5
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 5
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 6
40305: PUSH
40306: LD_INT 5
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 6
40315: PUSH
40316: LD_INT 6
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: LD_INT 6
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40347: LD_ADDR_VAR 0 32
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 4
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 4
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 5
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 5
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 4
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: LD_INT 6
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 6
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 5
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40490: LD_ADDR_VAR 0 33
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 3
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 4
40542: NEG
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 4
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 4
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: NEG
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 5
40587: NEG
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 5
40599: NEG
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 6
40610: NEG
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 6
40621: NEG
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40645: LD_ADDR_VAR 0 34
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 3
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 3
40664: NEG
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: NEG
40677: PUSH
40678: LD_INT 3
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 3
40688: NEG
40689: PUSH
40690: LD_INT 4
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 4
40700: NEG
40701: PUSH
40702: LD_INT 3
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 4
40712: NEG
40713: PUSH
40714: LD_INT 4
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 4
40724: NEG
40725: PUSH
40726: LD_INT 5
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 5
40736: NEG
40737: PUSH
40738: LD_INT 4
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 5
40748: NEG
40749: PUSH
40750: LD_INT 5
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 5
40760: NEG
40761: PUSH
40762: LD_INT 6
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 6
40772: NEG
40773: PUSH
40774: LD_INT 5
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 6
40784: NEG
40785: PUSH
40786: LD_INT 6
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40808: LD_ADDR_VAR 0 41
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 3
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40852: LD_ADDR_VAR 0 42
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 3
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40893: LD_ADDR_VAR 0 43
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 3
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40933: LD_ADDR_VAR 0 44
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 3
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40974: LD_ADDR_VAR 0 45
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41018: LD_ADDR_VAR 0 46
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41064: LD_ADDR_VAR 0 47
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 3
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 3
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41097: LD_ADDR_VAR 0 48
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41128: LD_ADDR_VAR 0 49
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41157: LD_ADDR_VAR 0 50
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 3
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41186: LD_ADDR_VAR 0 51
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41217: LD_ADDR_VAR 0 52
41221: PUSH
41222: LD_INT 3
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 3
41236: NEG
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41250: LD_ADDR_VAR 0 53
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 3
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 3
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41294: LD_ADDR_VAR 0 54
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41335: LD_ADDR_VAR 0 55
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: LD_INT 3
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41375: LD_ADDR_VAR 0 56
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 3
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 3
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41416: LD_ADDR_VAR 0 57
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41460: LD_ADDR_VAR 0 58
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 3
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41506: LD_ADDR_VAR 0 59
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41550: LD_ADDR_VAR 0 60
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41591: LD_ADDR_VAR 0 61
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41631: LD_ADDR_VAR 0 62
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41672: LD_ADDR_VAR 0 63
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41716: LD_ADDR_VAR 0 64
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: ST_TO_ADDR
// end ; 2 :
41762: GO 45028
41764: LD_INT 2
41766: DOUBLE
41767: EQUAL
41768: IFTRUE 41772
41770: GO 45027
41772: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41773: LD_ADDR_VAR 0 29
41777: PUSH
41778: LD_INT 4
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 4
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 5
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 5
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 4
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 5
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 3
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 3
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 4
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 4
41903: PUSH
41904: LD_INT 4
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: PUSH
41914: LD_INT 4
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 4
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 4
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 4
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 4
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 5
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 5
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 4
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 5
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 3
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 4
42112: NEG
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 4
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 4
42135: NEG
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 4
42158: NEG
42159: PUSH
42160: LD_INT 4
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 4
42170: NEG
42171: PUSH
42172: LD_INT 5
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: NEG
42183: PUSH
42184: LD_INT 4
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: LD_INT 3
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 4
42206: NEG
42207: PUSH
42208: LD_INT 3
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 5
42218: NEG
42219: PUSH
42220: LD_INT 4
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 5
42230: NEG
42231: PUSH
42232: LD_INT 5
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: LD_INT 5
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 5
42254: NEG
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42311: LD_ADDR_VAR 0 30
42315: PUSH
42316: LD_INT 4
42318: PUSH
42319: LD_INT 4
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 4
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 5
42338: PUSH
42339: LD_INT 4
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 5
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 4
42358: PUSH
42359: LD_INT 5
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: LD_INT 4
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 5
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: LD_INT 5
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 3
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 4
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 4
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 4
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 4
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 4
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 3
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 4
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 5
42557: NEG
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 5
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 5
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: LD_INT 4
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 4
42663: NEG
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 4
42675: NEG
42676: PUSH
42677: LD_INT 4
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 4
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 4
42699: NEG
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 4
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 5
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 4
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 4
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 5
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 3
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 5
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42858: LD_ADDR_VAR 0 31
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 4
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 3
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 4
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 5
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 5
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 4
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 5
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: LD_INT 3
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 3
42958: NEG
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 4
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 4
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 4
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 4
43060: NEG
43061: PUSH
43062: LD_INT 4
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 4
43072: NEG
43073: PUSH
43074: LD_INT 5
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: LD_INT 4
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 4
43108: NEG
43109: PUSH
43110: LD_INT 3
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 5
43120: NEG
43121: PUSH
43122: LD_INT 4
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 5
43132: NEG
43133: PUSH
43134: LD_INT 5
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: NEG
43145: PUSH
43146: LD_INT 5
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 5
43156: NEG
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 3
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 4
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 3
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 4
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: LD_INT 4
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 4
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 4
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 5
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 5
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 4
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 5
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43408: LD_ADDR_VAR 0 32
43412: PUSH
43413: LD_INT 4
43415: NEG
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 4
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 4
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 5
43471: NEG
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 5
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 5
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 3
43529: NEG
43530: PUSH
43531: LD_INT 4
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: LD_INT 3
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 4
43577: NEG
43578: PUSH
43579: LD_INT 3
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 4
43589: NEG
43590: PUSH
43591: LD_INT 4
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 4
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 4
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 4
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 5
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 4
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 3
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 4
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 5
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 5
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 3
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 4
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 4
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 4
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 4
43820: PUSH
43821: LD_INT 4
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 4
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 5
43840: PUSH
43841: LD_INT 4
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 5
43850: PUSH
43851: LD_INT 5
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 4
43860: PUSH
43861: LD_INT 5
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 4
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 5
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 3
43900: PUSH
43901: LD_INT 5
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43955: LD_ADDR_VAR 0 33
43959: PUSH
43960: LD_INT 4
43962: NEG
43963: PUSH
43964: LD_INT 4
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 4
43974: NEG
43975: PUSH
43976: LD_INT 5
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 4
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: NEG
43999: PUSH
44000: LD_INT 3
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 4
44010: NEG
44011: PUSH
44012: LD_INT 3
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 5
44022: NEG
44023: PUSH
44024: LD_INT 4
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 5
44034: NEG
44035: PUSH
44036: LD_INT 5
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 3
44046: NEG
44047: PUSH
44048: LD_INT 5
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 5
44058: NEG
44059: PUSH
44060: LD_INT 3
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 4
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 4
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 4
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 5
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 5
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 4
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 5
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 4
44285: PUSH
44286: LD_INT 3
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 4
44295: PUSH
44296: LD_INT 4
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 4
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 3
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 4
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 4
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 4
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 5
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 4
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 3
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 5
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44493: LD_ADDR_VAR 0 34
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 4
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 5
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 4
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 3
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 4
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 5
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 3
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 5
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 4
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 4
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 4
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 4
44695: PUSH
44696: LD_INT 4
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 4
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 5
44715: PUSH
44716: LD_INT 4
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 5
44725: PUSH
44726: LD_INT 5
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 4
44735: PUSH
44736: LD_INT 5
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 3
44745: PUSH
44746: LD_INT 4
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 3
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: LD_INT 3
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: LD_INT 5
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 3
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 4
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 4
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 4
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 4
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 4
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 3
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 3
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 4
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 5
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 5
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 5
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 3
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// end ; end ;
45025: GO 45028
45027: POP
// case btype of b_depot , b_warehouse :
45028: LD_VAR 0 1
45032: PUSH
45033: LD_INT 0
45035: DOUBLE
45036: EQUAL
45037: IFTRUE 45047
45039: LD_INT 1
45041: DOUBLE
45042: EQUAL
45043: IFTRUE 45047
45045: GO 45248
45047: POP
// case nation of nation_american :
45048: LD_VAR 0 5
45052: PUSH
45053: LD_INT 1
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45061
45059: GO 45117
45061: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45062: LD_ADDR_VAR 0 9
45066: PUSH
45067: LD_VAR 0 11
45071: PUSH
45072: LD_VAR 0 12
45076: PUSH
45077: LD_VAR 0 13
45081: PUSH
45082: LD_VAR 0 14
45086: PUSH
45087: LD_VAR 0 15
45091: PUSH
45092: LD_VAR 0 16
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: PUSH
45105: LD_VAR 0 4
45109: PUSH
45110: LD_INT 1
45112: PLUS
45113: ARRAY
45114: ST_TO_ADDR
45115: GO 45246
45117: LD_INT 2
45119: DOUBLE
45120: EQUAL
45121: IFTRUE 45125
45123: GO 45181
45125: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45126: LD_ADDR_VAR 0 9
45130: PUSH
45131: LD_VAR 0 17
45135: PUSH
45136: LD_VAR 0 18
45140: PUSH
45141: LD_VAR 0 19
45145: PUSH
45146: LD_VAR 0 20
45150: PUSH
45151: LD_VAR 0 21
45155: PUSH
45156: LD_VAR 0 22
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: PUSH
45169: LD_VAR 0 4
45173: PUSH
45174: LD_INT 1
45176: PLUS
45177: ARRAY
45178: ST_TO_ADDR
45179: GO 45246
45181: LD_INT 3
45183: DOUBLE
45184: EQUAL
45185: IFTRUE 45189
45187: GO 45245
45189: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45190: LD_ADDR_VAR 0 9
45194: PUSH
45195: LD_VAR 0 23
45199: PUSH
45200: LD_VAR 0 24
45204: PUSH
45205: LD_VAR 0 25
45209: PUSH
45210: LD_VAR 0 26
45214: PUSH
45215: LD_VAR 0 27
45219: PUSH
45220: LD_VAR 0 28
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: PUSH
45233: LD_VAR 0 4
45237: PUSH
45238: LD_INT 1
45240: PLUS
45241: ARRAY
45242: ST_TO_ADDR
45243: GO 45246
45245: POP
45246: GO 45801
45248: LD_INT 2
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45262
45254: LD_INT 3
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45318
45262: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45263: LD_ADDR_VAR 0 9
45267: PUSH
45268: LD_VAR 0 29
45272: PUSH
45273: LD_VAR 0 30
45277: PUSH
45278: LD_VAR 0 31
45282: PUSH
45283: LD_VAR 0 32
45287: PUSH
45288: LD_VAR 0 33
45292: PUSH
45293: LD_VAR 0 34
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: PUSH
45306: LD_VAR 0 4
45310: PUSH
45311: LD_INT 1
45313: PLUS
45314: ARRAY
45315: ST_TO_ADDR
45316: GO 45801
45318: LD_INT 16
45320: DOUBLE
45321: EQUAL
45322: IFTRUE 45380
45324: LD_INT 17
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45380
45330: LD_INT 18
45332: DOUBLE
45333: EQUAL
45334: IFTRUE 45380
45336: LD_INT 19
45338: DOUBLE
45339: EQUAL
45340: IFTRUE 45380
45342: LD_INT 22
45344: DOUBLE
45345: EQUAL
45346: IFTRUE 45380
45348: LD_INT 20
45350: DOUBLE
45351: EQUAL
45352: IFTRUE 45380
45354: LD_INT 21
45356: DOUBLE
45357: EQUAL
45358: IFTRUE 45380
45360: LD_INT 23
45362: DOUBLE
45363: EQUAL
45364: IFTRUE 45380
45366: LD_INT 24
45368: DOUBLE
45369: EQUAL
45370: IFTRUE 45380
45372: LD_INT 25
45374: DOUBLE
45375: EQUAL
45376: IFTRUE 45380
45378: GO 45436
45380: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45381: LD_ADDR_VAR 0 9
45385: PUSH
45386: LD_VAR 0 35
45390: PUSH
45391: LD_VAR 0 36
45395: PUSH
45396: LD_VAR 0 37
45400: PUSH
45401: LD_VAR 0 38
45405: PUSH
45406: LD_VAR 0 39
45410: PUSH
45411: LD_VAR 0 40
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: PUSH
45424: LD_VAR 0 4
45428: PUSH
45429: LD_INT 1
45431: PLUS
45432: ARRAY
45433: ST_TO_ADDR
45434: GO 45801
45436: LD_INT 6
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45492
45442: LD_INT 7
45444: DOUBLE
45445: EQUAL
45446: IFTRUE 45492
45448: LD_INT 8
45450: DOUBLE
45451: EQUAL
45452: IFTRUE 45492
45454: LD_INT 13
45456: DOUBLE
45457: EQUAL
45458: IFTRUE 45492
45460: LD_INT 12
45462: DOUBLE
45463: EQUAL
45464: IFTRUE 45492
45466: LD_INT 15
45468: DOUBLE
45469: EQUAL
45470: IFTRUE 45492
45472: LD_INT 11
45474: DOUBLE
45475: EQUAL
45476: IFTRUE 45492
45478: LD_INT 14
45480: DOUBLE
45481: EQUAL
45482: IFTRUE 45492
45484: LD_INT 10
45486: DOUBLE
45487: EQUAL
45488: IFTRUE 45492
45490: GO 45548
45492: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45493: LD_ADDR_VAR 0 9
45497: PUSH
45498: LD_VAR 0 41
45502: PUSH
45503: LD_VAR 0 42
45507: PUSH
45508: LD_VAR 0 43
45512: PUSH
45513: LD_VAR 0 44
45517: PUSH
45518: LD_VAR 0 45
45522: PUSH
45523: LD_VAR 0 46
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: PUSH
45536: LD_VAR 0 4
45540: PUSH
45541: LD_INT 1
45543: PLUS
45544: ARRAY
45545: ST_TO_ADDR
45546: GO 45801
45548: LD_INT 36
45550: DOUBLE
45551: EQUAL
45552: IFTRUE 45556
45554: GO 45612
45556: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45557: LD_ADDR_VAR 0 9
45561: PUSH
45562: LD_VAR 0 47
45566: PUSH
45567: LD_VAR 0 48
45571: PUSH
45572: LD_VAR 0 49
45576: PUSH
45577: LD_VAR 0 50
45581: PUSH
45582: LD_VAR 0 51
45586: PUSH
45587: LD_VAR 0 52
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: PUSH
45600: LD_VAR 0 4
45604: PUSH
45605: LD_INT 1
45607: PLUS
45608: ARRAY
45609: ST_TO_ADDR
45610: GO 45801
45612: LD_INT 4
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45638
45618: LD_INT 5
45620: DOUBLE
45621: EQUAL
45622: IFTRUE 45638
45624: LD_INT 34
45626: DOUBLE
45627: EQUAL
45628: IFTRUE 45638
45630: LD_INT 37
45632: DOUBLE
45633: EQUAL
45634: IFTRUE 45638
45636: GO 45694
45638: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45639: LD_ADDR_VAR 0 9
45643: PUSH
45644: LD_VAR 0 53
45648: PUSH
45649: LD_VAR 0 54
45653: PUSH
45654: LD_VAR 0 55
45658: PUSH
45659: LD_VAR 0 56
45663: PUSH
45664: LD_VAR 0 57
45668: PUSH
45669: LD_VAR 0 58
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: PUSH
45682: LD_VAR 0 4
45686: PUSH
45687: LD_INT 1
45689: PLUS
45690: ARRAY
45691: ST_TO_ADDR
45692: GO 45801
45694: LD_INT 31
45696: DOUBLE
45697: EQUAL
45698: IFTRUE 45744
45700: LD_INT 32
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45744
45706: LD_INT 33
45708: DOUBLE
45709: EQUAL
45710: IFTRUE 45744
45712: LD_INT 27
45714: DOUBLE
45715: EQUAL
45716: IFTRUE 45744
45718: LD_INT 26
45720: DOUBLE
45721: EQUAL
45722: IFTRUE 45744
45724: LD_INT 28
45726: DOUBLE
45727: EQUAL
45728: IFTRUE 45744
45730: LD_INT 29
45732: DOUBLE
45733: EQUAL
45734: IFTRUE 45744
45736: LD_INT 30
45738: DOUBLE
45739: EQUAL
45740: IFTRUE 45744
45742: GO 45800
45744: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45745: LD_ADDR_VAR 0 9
45749: PUSH
45750: LD_VAR 0 59
45754: PUSH
45755: LD_VAR 0 60
45759: PUSH
45760: LD_VAR 0 61
45764: PUSH
45765: LD_VAR 0 62
45769: PUSH
45770: LD_VAR 0 63
45774: PUSH
45775: LD_VAR 0 64
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: PUSH
45788: LD_VAR 0 4
45792: PUSH
45793: LD_INT 1
45795: PLUS
45796: ARRAY
45797: ST_TO_ADDR
45798: GO 45801
45800: POP
// temp_list2 = [ ] ;
45801: LD_ADDR_VAR 0 10
45805: PUSH
45806: EMPTY
45807: ST_TO_ADDR
// for i in temp_list do
45808: LD_ADDR_VAR 0 8
45812: PUSH
45813: LD_VAR 0 9
45817: PUSH
45818: FOR_IN
45819: IFFALSE 45871
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45821: LD_ADDR_VAR 0 10
45825: PUSH
45826: LD_VAR 0 10
45830: PUSH
45831: LD_VAR 0 8
45835: PUSH
45836: LD_INT 1
45838: ARRAY
45839: PUSH
45840: LD_VAR 0 2
45844: PLUS
45845: PUSH
45846: LD_VAR 0 8
45850: PUSH
45851: LD_INT 2
45853: ARRAY
45854: PUSH
45855: LD_VAR 0 3
45859: PLUS
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: ADD
45868: ST_TO_ADDR
45869: GO 45818
45871: POP
45872: POP
// result = temp_list2 ;
45873: LD_ADDR_VAR 0 7
45877: PUSH
45878: LD_VAR 0 10
45882: ST_TO_ADDR
// end ;
45883: LD_VAR 0 7
45887: RET
// export function EnemyInRange ( unit , dist ) ; begin
45888: LD_INT 0
45890: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45891: LD_ADDR_VAR 0 3
45895: PUSH
45896: LD_VAR 0 1
45900: PPUSH
45901: CALL_OW 255
45905: PPUSH
45906: LD_VAR 0 1
45910: PPUSH
45911: CALL_OW 250
45915: PPUSH
45916: LD_VAR 0 1
45920: PPUSH
45921: CALL_OW 251
45925: PPUSH
45926: LD_VAR 0 2
45930: PPUSH
45931: CALL 19284 0 4
45935: PUSH
45936: LD_INT 4
45938: ARRAY
45939: ST_TO_ADDR
// end ;
45940: LD_VAR 0 3
45944: RET
// export function PlayerSeeMe ( unit ) ; begin
45945: LD_INT 0
45947: PPUSH
// result := See ( your_side , unit ) ;
45948: LD_ADDR_VAR 0 2
45952: PUSH
45953: LD_OWVAR 2
45957: PPUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: CALL_OW 292
45967: ST_TO_ADDR
// end ;
45968: LD_VAR 0 2
45972: RET
// export function ReverseDir ( unit ) ; begin
45973: LD_INT 0
45975: PPUSH
// if not unit then
45976: LD_VAR 0 1
45980: NOT
45981: IFFALSE 45985
// exit ;
45983: GO 46008
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45985: LD_ADDR_VAR 0 2
45989: PUSH
45990: LD_VAR 0 1
45994: PPUSH
45995: CALL_OW 254
45999: PUSH
46000: LD_INT 3
46002: PLUS
46003: PUSH
46004: LD_INT 6
46006: MOD
46007: ST_TO_ADDR
// end ;
46008: LD_VAR 0 2
46012: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46013: LD_INT 0
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
// if not hexes then
46020: LD_VAR 0 2
46024: NOT
46025: IFFALSE 46029
// exit ;
46027: GO 46177
// dist := 9999 ;
46029: LD_ADDR_VAR 0 5
46033: PUSH
46034: LD_INT 9999
46036: ST_TO_ADDR
// for i = 1 to hexes do
46037: LD_ADDR_VAR 0 4
46041: PUSH
46042: DOUBLE
46043: LD_INT 1
46045: DEC
46046: ST_TO_ADDR
46047: LD_VAR 0 2
46051: PUSH
46052: FOR_TO
46053: IFFALSE 46165
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46055: LD_VAR 0 1
46059: PPUSH
46060: LD_VAR 0 2
46064: PUSH
46065: LD_VAR 0 4
46069: ARRAY
46070: PUSH
46071: LD_INT 1
46073: ARRAY
46074: PPUSH
46075: LD_VAR 0 2
46079: PUSH
46080: LD_VAR 0 4
46084: ARRAY
46085: PUSH
46086: LD_INT 2
46088: ARRAY
46089: PPUSH
46090: CALL_OW 297
46094: PUSH
46095: LD_VAR 0 5
46099: LESS
46100: IFFALSE 46163
// begin hex := hexes [ i ] ;
46102: LD_ADDR_VAR 0 7
46106: PUSH
46107: LD_VAR 0 2
46111: PUSH
46112: LD_VAR 0 4
46116: ARRAY
46117: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46118: LD_ADDR_VAR 0 5
46122: PUSH
46123: LD_VAR 0 1
46127: PPUSH
46128: LD_VAR 0 2
46132: PUSH
46133: LD_VAR 0 4
46137: ARRAY
46138: PUSH
46139: LD_INT 1
46141: ARRAY
46142: PPUSH
46143: LD_VAR 0 2
46147: PUSH
46148: LD_VAR 0 4
46152: ARRAY
46153: PUSH
46154: LD_INT 2
46156: ARRAY
46157: PPUSH
46158: CALL_OW 297
46162: ST_TO_ADDR
// end ; end ;
46163: GO 46052
46165: POP
46166: POP
// result := hex ;
46167: LD_ADDR_VAR 0 3
46171: PUSH
46172: LD_VAR 0 7
46176: ST_TO_ADDR
// end ;
46177: LD_VAR 0 3
46181: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46182: LD_INT 0
46184: PPUSH
46185: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46186: LD_VAR 0 1
46190: NOT
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: LD_INT 21
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 23
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PPUSH
46221: CALL_OW 69
46225: IN
46226: NOT
46227: OR
46228: IFFALSE 46232
// exit ;
46230: GO 46279
// for i = 1 to 3 do
46232: LD_ADDR_VAR 0 3
46236: PUSH
46237: DOUBLE
46238: LD_INT 1
46240: DEC
46241: ST_TO_ADDR
46242: LD_INT 3
46244: PUSH
46245: FOR_TO
46246: IFFALSE 46277
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46248: LD_VAR 0 1
46252: PPUSH
46253: CALL_OW 250
46257: PPUSH
46258: LD_VAR 0 1
46262: PPUSH
46263: CALL_OW 251
46267: PPUSH
46268: LD_INT 1
46270: PPUSH
46271: CALL_OW 453
46275: GO 46245
46277: POP
46278: POP
// end ;
46279: LD_VAR 0 2
46283: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46284: LD_INT 0
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46292: LD_VAR 0 1
46296: NOT
46297: PUSH
46298: LD_VAR 0 2
46302: NOT
46303: OR
46304: PUSH
46305: LD_VAR 0 1
46309: PPUSH
46310: CALL_OW 314
46314: OR
46315: IFFALSE 46319
// exit ;
46317: GO 46760
// x := GetX ( enemy_unit ) ;
46319: LD_ADDR_VAR 0 7
46323: PUSH
46324: LD_VAR 0 2
46328: PPUSH
46329: CALL_OW 250
46333: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46334: LD_ADDR_VAR 0 8
46338: PUSH
46339: LD_VAR 0 2
46343: PPUSH
46344: CALL_OW 251
46348: ST_TO_ADDR
// if not x or not y then
46349: LD_VAR 0 7
46353: NOT
46354: PUSH
46355: LD_VAR 0 8
46359: NOT
46360: OR
46361: IFFALSE 46365
// exit ;
46363: GO 46760
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46365: LD_ADDR_VAR 0 6
46369: PUSH
46370: LD_VAR 0 7
46374: PPUSH
46375: LD_INT 0
46377: PPUSH
46378: LD_INT 4
46380: PPUSH
46381: CALL_OW 272
46385: PUSH
46386: LD_VAR 0 8
46390: PPUSH
46391: LD_INT 0
46393: PPUSH
46394: LD_INT 4
46396: PPUSH
46397: CALL_OW 273
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_VAR 0 7
46410: PPUSH
46411: LD_INT 1
46413: PPUSH
46414: LD_INT 4
46416: PPUSH
46417: CALL_OW 272
46421: PUSH
46422: LD_VAR 0 8
46426: PPUSH
46427: LD_INT 1
46429: PPUSH
46430: LD_INT 4
46432: PPUSH
46433: CALL_OW 273
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_VAR 0 7
46446: PPUSH
46447: LD_INT 2
46449: PPUSH
46450: LD_INT 4
46452: PPUSH
46453: CALL_OW 272
46457: PUSH
46458: LD_VAR 0 8
46462: PPUSH
46463: LD_INT 2
46465: PPUSH
46466: LD_INT 4
46468: PPUSH
46469: CALL_OW 273
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_VAR 0 7
46482: PPUSH
46483: LD_INT 3
46485: PPUSH
46486: LD_INT 4
46488: PPUSH
46489: CALL_OW 272
46493: PUSH
46494: LD_VAR 0 8
46498: PPUSH
46499: LD_INT 3
46501: PPUSH
46502: LD_INT 4
46504: PPUSH
46505: CALL_OW 273
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_VAR 0 7
46518: PPUSH
46519: LD_INT 4
46521: PPUSH
46522: LD_INT 4
46524: PPUSH
46525: CALL_OW 272
46529: PUSH
46530: LD_VAR 0 8
46534: PPUSH
46535: LD_INT 4
46537: PPUSH
46538: LD_INT 4
46540: PPUSH
46541: CALL_OW 273
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_VAR 0 7
46554: PPUSH
46555: LD_INT 5
46557: PPUSH
46558: LD_INT 4
46560: PPUSH
46561: CALL_OW 272
46565: PUSH
46566: LD_VAR 0 8
46570: PPUSH
46571: LD_INT 5
46573: PPUSH
46574: LD_INT 4
46576: PPUSH
46577: CALL_OW 273
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// for i = tmp downto 1 do
46594: LD_ADDR_VAR 0 4
46598: PUSH
46599: DOUBLE
46600: LD_VAR 0 6
46604: INC
46605: ST_TO_ADDR
46606: LD_INT 1
46608: PUSH
46609: FOR_DOWNTO
46610: IFFALSE 46711
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46612: LD_VAR 0 6
46616: PUSH
46617: LD_VAR 0 4
46621: ARRAY
46622: PUSH
46623: LD_INT 1
46625: ARRAY
46626: PPUSH
46627: LD_VAR 0 6
46631: PUSH
46632: LD_VAR 0 4
46636: ARRAY
46637: PUSH
46638: LD_INT 2
46640: ARRAY
46641: PPUSH
46642: CALL_OW 488
46646: NOT
46647: PUSH
46648: LD_VAR 0 6
46652: PUSH
46653: LD_VAR 0 4
46657: ARRAY
46658: PUSH
46659: LD_INT 1
46661: ARRAY
46662: PPUSH
46663: LD_VAR 0 6
46667: PUSH
46668: LD_VAR 0 4
46672: ARRAY
46673: PUSH
46674: LD_INT 2
46676: ARRAY
46677: PPUSH
46678: CALL_OW 428
46682: PUSH
46683: LD_INT 0
46685: NONEQUAL
46686: OR
46687: IFFALSE 46709
// tmp := Delete ( tmp , i ) ;
46689: LD_ADDR_VAR 0 6
46693: PUSH
46694: LD_VAR 0 6
46698: PPUSH
46699: LD_VAR 0 4
46703: PPUSH
46704: CALL_OW 3
46708: ST_TO_ADDR
46709: GO 46609
46711: POP
46712: POP
// j := GetClosestHex ( unit , tmp ) ;
46713: LD_ADDR_VAR 0 5
46717: PUSH
46718: LD_VAR 0 1
46722: PPUSH
46723: LD_VAR 0 6
46727: PPUSH
46728: CALL 46013 0 2
46732: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46733: LD_VAR 0 1
46737: PPUSH
46738: LD_VAR 0 5
46742: PUSH
46743: LD_INT 1
46745: ARRAY
46746: PPUSH
46747: LD_VAR 0 5
46751: PUSH
46752: LD_INT 2
46754: ARRAY
46755: PPUSH
46756: CALL_OW 111
// end ;
46760: LD_VAR 0 3
46764: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46765: LD_INT 0
46767: PPUSH
46768: PPUSH
46769: PPUSH
// uc_side = 0 ;
46770: LD_ADDR_OWVAR 20
46774: PUSH
46775: LD_INT 0
46777: ST_TO_ADDR
// uc_nation = 0 ;
46778: LD_ADDR_OWVAR 21
46782: PUSH
46783: LD_INT 0
46785: ST_TO_ADDR
// InitHc_All ( ) ;
46786: CALL_OW 584
// InitVc ;
46790: CALL_OW 20
// if mastodonts then
46794: LD_VAR 0 6
46798: IFFALSE 46865
// for i = 1 to mastodonts do
46800: LD_ADDR_VAR 0 11
46804: PUSH
46805: DOUBLE
46806: LD_INT 1
46808: DEC
46809: ST_TO_ADDR
46810: LD_VAR 0 6
46814: PUSH
46815: FOR_TO
46816: IFFALSE 46863
// begin vc_chassis := 31 ;
46818: LD_ADDR_OWVAR 37
46822: PUSH
46823: LD_INT 31
46825: ST_TO_ADDR
// vc_control := control_rider ;
46826: LD_ADDR_OWVAR 38
46830: PUSH
46831: LD_INT 4
46833: ST_TO_ADDR
// animal := CreateVehicle ;
46834: LD_ADDR_VAR 0 12
46838: PUSH
46839: CALL_OW 45
46843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46844: LD_VAR 0 12
46848: PPUSH
46849: LD_VAR 0 8
46853: PPUSH
46854: LD_INT 0
46856: PPUSH
46857: CALL 49053 0 3
// end ;
46861: GO 46815
46863: POP
46864: POP
// if horses then
46865: LD_VAR 0 5
46869: IFFALSE 46936
// for i = 1 to horses do
46871: LD_ADDR_VAR 0 11
46875: PUSH
46876: DOUBLE
46877: LD_INT 1
46879: DEC
46880: ST_TO_ADDR
46881: LD_VAR 0 5
46885: PUSH
46886: FOR_TO
46887: IFFALSE 46934
// begin hc_class := 21 ;
46889: LD_ADDR_OWVAR 28
46893: PUSH
46894: LD_INT 21
46896: ST_TO_ADDR
// hc_gallery :=  ;
46897: LD_ADDR_OWVAR 33
46901: PUSH
46902: LD_STRING 
46904: ST_TO_ADDR
// animal := CreateHuman ;
46905: LD_ADDR_VAR 0 12
46909: PUSH
46910: CALL_OW 44
46914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46915: LD_VAR 0 12
46919: PPUSH
46920: LD_VAR 0 8
46924: PPUSH
46925: LD_INT 0
46927: PPUSH
46928: CALL 49053 0 3
// end ;
46932: GO 46886
46934: POP
46935: POP
// if birds then
46936: LD_VAR 0 1
46940: IFFALSE 47007
// for i = 1 to birds do
46942: LD_ADDR_VAR 0 11
46946: PUSH
46947: DOUBLE
46948: LD_INT 1
46950: DEC
46951: ST_TO_ADDR
46952: LD_VAR 0 1
46956: PUSH
46957: FOR_TO
46958: IFFALSE 47005
// begin hc_class = 18 ;
46960: LD_ADDR_OWVAR 28
46964: PUSH
46965: LD_INT 18
46967: ST_TO_ADDR
// hc_gallery =  ;
46968: LD_ADDR_OWVAR 33
46972: PUSH
46973: LD_STRING 
46975: ST_TO_ADDR
// animal := CreateHuman ;
46976: LD_ADDR_VAR 0 12
46980: PUSH
46981: CALL_OW 44
46985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46986: LD_VAR 0 12
46990: PPUSH
46991: LD_VAR 0 8
46995: PPUSH
46996: LD_INT 0
46998: PPUSH
46999: CALL 49053 0 3
// end ;
47003: GO 46957
47005: POP
47006: POP
// if tigers then
47007: LD_VAR 0 2
47011: IFFALSE 47095
// for i = 1 to tigers do
47013: LD_ADDR_VAR 0 11
47017: PUSH
47018: DOUBLE
47019: LD_INT 1
47021: DEC
47022: ST_TO_ADDR
47023: LD_VAR 0 2
47027: PUSH
47028: FOR_TO
47029: IFFALSE 47093
// begin hc_class = class_tiger ;
47031: LD_ADDR_OWVAR 28
47035: PUSH
47036: LD_INT 14
47038: ST_TO_ADDR
// hc_gallery =  ;
47039: LD_ADDR_OWVAR 33
47043: PUSH
47044: LD_STRING 
47046: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47047: LD_ADDR_OWVAR 35
47051: PUSH
47052: LD_INT 7
47054: NEG
47055: PPUSH
47056: LD_INT 7
47058: PPUSH
47059: CALL_OW 12
47063: ST_TO_ADDR
// animal := CreateHuman ;
47064: LD_ADDR_VAR 0 12
47068: PUSH
47069: CALL_OW 44
47073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47074: LD_VAR 0 12
47078: PPUSH
47079: LD_VAR 0 8
47083: PPUSH
47084: LD_INT 0
47086: PPUSH
47087: CALL 49053 0 3
// end ;
47091: GO 47028
47093: POP
47094: POP
// if apemans then
47095: LD_VAR 0 3
47099: IFFALSE 47222
// for i = 1 to apemans do
47101: LD_ADDR_VAR 0 11
47105: PUSH
47106: DOUBLE
47107: LD_INT 1
47109: DEC
47110: ST_TO_ADDR
47111: LD_VAR 0 3
47115: PUSH
47116: FOR_TO
47117: IFFALSE 47220
// begin hc_class = class_apeman ;
47119: LD_ADDR_OWVAR 28
47123: PUSH
47124: LD_INT 12
47126: ST_TO_ADDR
// hc_gallery =  ;
47127: LD_ADDR_OWVAR 33
47131: PUSH
47132: LD_STRING 
47134: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47135: LD_ADDR_OWVAR 35
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PPUSH
47144: LD_INT 2
47146: PPUSH
47147: CALL_OW 12
47151: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47152: LD_ADDR_OWVAR 31
47156: PUSH
47157: LD_INT 1
47159: PPUSH
47160: LD_INT 3
47162: PPUSH
47163: CALL_OW 12
47167: PUSH
47168: LD_INT 1
47170: PPUSH
47171: LD_INT 3
47173: PPUSH
47174: CALL_OW 12
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// animal := CreateHuman ;
47191: LD_ADDR_VAR 0 12
47195: PUSH
47196: CALL_OW 44
47200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47201: LD_VAR 0 12
47205: PPUSH
47206: LD_VAR 0 8
47210: PPUSH
47211: LD_INT 0
47213: PPUSH
47214: CALL 49053 0 3
// end ;
47218: GO 47116
47220: POP
47221: POP
// if enchidnas then
47222: LD_VAR 0 4
47226: IFFALSE 47293
// for i = 1 to enchidnas do
47228: LD_ADDR_VAR 0 11
47232: PUSH
47233: DOUBLE
47234: LD_INT 1
47236: DEC
47237: ST_TO_ADDR
47238: LD_VAR 0 4
47242: PUSH
47243: FOR_TO
47244: IFFALSE 47291
// begin hc_class = 13 ;
47246: LD_ADDR_OWVAR 28
47250: PUSH
47251: LD_INT 13
47253: ST_TO_ADDR
// hc_gallery =  ;
47254: LD_ADDR_OWVAR 33
47258: PUSH
47259: LD_STRING 
47261: ST_TO_ADDR
// animal := CreateHuman ;
47262: LD_ADDR_VAR 0 12
47266: PUSH
47267: CALL_OW 44
47271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47272: LD_VAR 0 12
47276: PPUSH
47277: LD_VAR 0 8
47281: PPUSH
47282: LD_INT 0
47284: PPUSH
47285: CALL 49053 0 3
// end ;
47289: GO 47243
47291: POP
47292: POP
// if fishes then
47293: LD_VAR 0 7
47297: IFFALSE 47364
// for i = 1 to fishes do
47299: LD_ADDR_VAR 0 11
47303: PUSH
47304: DOUBLE
47305: LD_INT 1
47307: DEC
47308: ST_TO_ADDR
47309: LD_VAR 0 7
47313: PUSH
47314: FOR_TO
47315: IFFALSE 47362
// begin hc_class = 20 ;
47317: LD_ADDR_OWVAR 28
47321: PUSH
47322: LD_INT 20
47324: ST_TO_ADDR
// hc_gallery =  ;
47325: LD_ADDR_OWVAR 33
47329: PUSH
47330: LD_STRING 
47332: ST_TO_ADDR
// animal := CreateHuman ;
47333: LD_ADDR_VAR 0 12
47337: PUSH
47338: CALL_OW 44
47342: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47343: LD_VAR 0 12
47347: PPUSH
47348: LD_VAR 0 9
47352: PPUSH
47353: LD_INT 0
47355: PPUSH
47356: CALL 49053 0 3
// end ;
47360: GO 47314
47362: POP
47363: POP
// end ;
47364: LD_VAR 0 10
47368: RET
// export function WantHeal ( sci , unit ) ; begin
47369: LD_INT 0
47371: PPUSH
// if GetTaskList ( sci ) > 0 then
47372: LD_VAR 0 1
47376: PPUSH
47377: CALL_OW 437
47381: PUSH
47382: LD_INT 0
47384: GREATER
47385: IFFALSE 47455
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47387: LD_VAR 0 1
47391: PPUSH
47392: CALL_OW 437
47396: PUSH
47397: LD_INT 1
47399: ARRAY
47400: PUSH
47401: LD_INT 1
47403: ARRAY
47404: PUSH
47405: LD_STRING l
47407: EQUAL
47408: PUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 437
47418: PUSH
47419: LD_INT 1
47421: ARRAY
47422: PUSH
47423: LD_INT 4
47425: ARRAY
47426: PUSH
47427: LD_VAR 0 2
47431: EQUAL
47432: AND
47433: IFFALSE 47445
// result := true else
47435: LD_ADDR_VAR 0 3
47439: PUSH
47440: LD_INT 1
47442: ST_TO_ADDR
47443: GO 47453
// result := false ;
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_INT 0
47452: ST_TO_ADDR
// end else
47453: GO 47463
// result := false ;
47455: LD_ADDR_VAR 0 3
47459: PUSH
47460: LD_INT 0
47462: ST_TO_ADDR
// end ;
47463: LD_VAR 0 3
47467: RET
// export function HealTarget ( sci ) ; begin
47468: LD_INT 0
47470: PPUSH
// if not sci then
47471: LD_VAR 0 1
47475: NOT
47476: IFFALSE 47480
// exit ;
47478: GO 47545
// result := 0 ;
47480: LD_ADDR_VAR 0 2
47484: PUSH
47485: LD_INT 0
47487: ST_TO_ADDR
// if GetTaskList ( sci ) then
47488: LD_VAR 0 1
47492: PPUSH
47493: CALL_OW 437
47497: IFFALSE 47545
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47499: LD_VAR 0 1
47503: PPUSH
47504: CALL_OW 437
47508: PUSH
47509: LD_INT 1
47511: ARRAY
47512: PUSH
47513: LD_INT 1
47515: ARRAY
47516: PUSH
47517: LD_STRING l
47519: EQUAL
47520: IFFALSE 47545
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47522: LD_ADDR_VAR 0 2
47526: PUSH
47527: LD_VAR 0 1
47531: PPUSH
47532: CALL_OW 437
47536: PUSH
47537: LD_INT 1
47539: ARRAY
47540: PUSH
47541: LD_INT 4
47543: ARRAY
47544: ST_TO_ADDR
// end ;
47545: LD_VAR 0 2
47549: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47550: LD_INT 0
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
// if not base_units then
47556: LD_VAR 0 1
47560: NOT
47561: IFFALSE 47565
// exit ;
47563: GO 47652
// result := false ;
47565: LD_ADDR_VAR 0 2
47569: PUSH
47570: LD_INT 0
47572: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47573: LD_ADDR_VAR 0 5
47577: PUSH
47578: LD_VAR 0 1
47582: PPUSH
47583: LD_INT 21
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PPUSH
47593: CALL_OW 72
47597: ST_TO_ADDR
// if not tmp then
47598: LD_VAR 0 5
47602: NOT
47603: IFFALSE 47607
// exit ;
47605: GO 47652
// for i in tmp do
47607: LD_ADDR_VAR 0 3
47611: PUSH
47612: LD_VAR 0 5
47616: PUSH
47617: FOR_IN
47618: IFFALSE 47650
// begin result := EnemyInRange ( i , 22 ) ;
47620: LD_ADDR_VAR 0 2
47624: PUSH
47625: LD_VAR 0 3
47629: PPUSH
47630: LD_INT 22
47632: PPUSH
47633: CALL 45888 0 2
47637: ST_TO_ADDR
// if result then
47638: LD_VAR 0 2
47642: IFFALSE 47648
// exit ;
47644: POP
47645: POP
47646: GO 47652
// end ;
47648: GO 47617
47650: POP
47651: POP
// end ;
47652: LD_VAR 0 2
47656: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
47657: LD_INT 0
47659: PPUSH
47660: PPUSH
// if not units then
47661: LD_VAR 0 1
47665: NOT
47666: IFFALSE 47670
// exit ;
47668: GO 47740
// result := [ ] ;
47670: LD_ADDR_VAR 0 3
47674: PUSH
47675: EMPTY
47676: ST_TO_ADDR
// for i in units do
47677: LD_ADDR_VAR 0 4
47681: PUSH
47682: LD_VAR 0 1
47686: PUSH
47687: FOR_IN
47688: IFFALSE 47738
// if GetTag ( i ) = tag then
47690: LD_VAR 0 4
47694: PPUSH
47695: CALL_OW 110
47699: PUSH
47700: LD_VAR 0 2
47704: EQUAL
47705: IFFALSE 47736
// result := Replace ( result , result + 1 , i ) ;
47707: LD_ADDR_VAR 0 3
47711: PUSH
47712: LD_VAR 0 3
47716: PPUSH
47717: LD_VAR 0 3
47721: PUSH
47722: LD_INT 1
47724: PLUS
47725: PPUSH
47726: LD_VAR 0 4
47730: PPUSH
47731: CALL_OW 1
47735: ST_TO_ADDR
47736: GO 47687
47738: POP
47739: POP
// end ;
47740: LD_VAR 0 3
47744: RET
// export function IsDriver ( un ) ; begin
47745: LD_INT 0
47747: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47748: LD_ADDR_VAR 0 2
47752: PUSH
47753: LD_VAR 0 1
47757: PUSH
47758: LD_INT 55
47760: PUSH
47761: EMPTY
47762: LIST
47763: PPUSH
47764: CALL_OW 69
47768: IN
47769: ST_TO_ADDR
// end ;
47770: LD_VAR 0 2
47774: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47775: LD_INT 0
47777: PPUSH
47778: PPUSH
// list := [ ] ;
47779: LD_ADDR_VAR 0 5
47783: PUSH
47784: EMPTY
47785: ST_TO_ADDR
// case d of 0 :
47786: LD_VAR 0 3
47790: PUSH
47791: LD_INT 0
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47799
47797: GO 47932
47799: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47800: LD_ADDR_VAR 0 5
47804: PUSH
47805: LD_VAR 0 1
47809: PUSH
47810: LD_INT 4
47812: MINUS
47813: PUSH
47814: LD_VAR 0 2
47818: PUSH
47819: LD_INT 4
47821: MINUS
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: PUSH
47831: LD_VAR 0 1
47835: PUSH
47836: LD_INT 3
47838: MINUS
47839: PUSH
47840: LD_VAR 0 2
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: PUSH
47853: LD_VAR 0 1
47857: PUSH
47858: LD_INT 4
47860: PLUS
47861: PUSH
47862: LD_VAR 0 2
47866: PUSH
47867: LD_INT 4
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: PUSH
47875: LD_VAR 0 1
47879: PUSH
47880: LD_INT 3
47882: PLUS
47883: PUSH
47884: LD_VAR 0 2
47888: PUSH
47889: LD_INT 3
47891: PLUS
47892: PUSH
47893: LD_INT 5
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: PUSH
47901: LD_VAR 0 1
47905: PUSH
47906: LD_VAR 0 2
47910: PUSH
47911: LD_INT 4
47913: PLUS
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// end ; 1 :
47930: GO 48630
47932: LD_INT 1
47934: DOUBLE
47935: EQUAL
47936: IFTRUE 47940
47938: GO 48073
47940: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47941: LD_ADDR_VAR 0 5
47945: PUSH
47946: LD_VAR 0 1
47950: PUSH
47951: LD_VAR 0 2
47955: PUSH
47956: LD_INT 4
47958: MINUS
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: PUSH
47968: LD_VAR 0 1
47972: PUSH
47973: LD_INT 3
47975: MINUS
47976: PUSH
47977: LD_VAR 0 2
47981: PUSH
47982: LD_INT 3
47984: MINUS
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: PUSH
47994: LD_VAR 0 1
47998: PUSH
47999: LD_INT 4
48001: MINUS
48002: PUSH
48003: LD_VAR 0 2
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: PUSH
48016: LD_VAR 0 1
48020: PUSH
48021: LD_VAR 0 2
48025: PUSH
48026: LD_INT 3
48028: PLUS
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: PUSH
48038: LD_VAR 0 1
48042: PUSH
48043: LD_INT 4
48045: PLUS
48046: PUSH
48047: LD_VAR 0 2
48051: PUSH
48052: LD_INT 4
48054: PLUS
48055: PUSH
48056: LD_INT 5
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// end ; 2 :
48071: GO 48630
48073: LD_INT 2
48075: DOUBLE
48076: EQUAL
48077: IFTRUE 48081
48079: GO 48210
48081: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48082: LD_ADDR_VAR 0 5
48086: PUSH
48087: LD_VAR 0 1
48091: PUSH
48092: LD_VAR 0 2
48096: PUSH
48097: LD_INT 3
48099: MINUS
48100: PUSH
48101: LD_INT 3
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: PUSH
48109: LD_VAR 0 1
48113: PUSH
48114: LD_INT 4
48116: PLUS
48117: PUSH
48118: LD_VAR 0 2
48122: PUSH
48123: LD_INT 4
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: PUSH
48131: LD_VAR 0 1
48135: PUSH
48136: LD_VAR 0 2
48140: PUSH
48141: LD_INT 4
48143: PLUS
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: PUSH
48153: LD_VAR 0 1
48157: PUSH
48158: LD_INT 3
48160: MINUS
48161: PUSH
48162: LD_VAR 0 2
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: LIST
48174: PUSH
48175: LD_VAR 0 1
48179: PUSH
48180: LD_INT 4
48182: MINUS
48183: PUSH
48184: LD_VAR 0 2
48188: PUSH
48189: LD_INT 4
48191: MINUS
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// end ; 3 :
48208: GO 48630
48210: LD_INT 3
48212: DOUBLE
48213: EQUAL
48214: IFTRUE 48218
48216: GO 48351
48218: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48219: LD_ADDR_VAR 0 5
48223: PUSH
48224: LD_VAR 0 1
48228: PUSH
48229: LD_INT 3
48231: PLUS
48232: PUSH
48233: LD_VAR 0 2
48237: PUSH
48238: LD_INT 4
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: PUSH
48246: LD_VAR 0 1
48250: PUSH
48251: LD_INT 4
48253: PLUS
48254: PUSH
48255: LD_VAR 0 2
48259: PUSH
48260: LD_INT 4
48262: PLUS
48263: PUSH
48264: LD_INT 5
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: PUSH
48272: LD_VAR 0 1
48276: PUSH
48277: LD_INT 4
48279: MINUS
48280: PUSH
48281: LD_VAR 0 2
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: PUSH
48294: LD_VAR 0 1
48298: PUSH
48299: LD_VAR 0 2
48303: PUSH
48304: LD_INT 4
48306: MINUS
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: PUSH
48316: LD_VAR 0 1
48320: PUSH
48321: LD_INT 3
48323: MINUS
48324: PUSH
48325: LD_VAR 0 2
48329: PUSH
48330: LD_INT 3
48332: MINUS
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: ST_TO_ADDR
// end ; 4 :
48349: GO 48630
48351: LD_INT 4
48353: DOUBLE
48354: EQUAL
48355: IFTRUE 48359
48357: GO 48492
48359: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48360: LD_ADDR_VAR 0 5
48364: PUSH
48365: LD_VAR 0 1
48369: PUSH
48370: LD_VAR 0 2
48374: PUSH
48375: LD_INT 4
48377: PLUS
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: PUSH
48387: LD_VAR 0 1
48391: PUSH
48392: LD_INT 3
48394: PLUS
48395: PUSH
48396: LD_VAR 0 2
48400: PUSH
48401: LD_INT 3
48403: PLUS
48404: PUSH
48405: LD_INT 5
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: PUSH
48413: LD_VAR 0 1
48417: PUSH
48418: LD_INT 4
48420: PLUS
48421: PUSH
48422: LD_VAR 0 2
48426: PUSH
48427: LD_INT 4
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: PUSH
48435: LD_VAR 0 1
48439: PUSH
48440: LD_VAR 0 2
48444: PUSH
48445: LD_INT 3
48447: MINUS
48448: PUSH
48449: LD_INT 3
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: PUSH
48457: LD_VAR 0 1
48461: PUSH
48462: LD_INT 4
48464: MINUS
48465: PUSH
48466: LD_VAR 0 2
48470: PUSH
48471: LD_INT 4
48473: MINUS
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// end ; 5 :
48490: GO 48630
48492: LD_INT 5
48494: DOUBLE
48495: EQUAL
48496: IFTRUE 48500
48498: GO 48629
48500: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48501: LD_ADDR_VAR 0 5
48505: PUSH
48506: LD_VAR 0 1
48510: PUSH
48511: LD_INT 4
48513: MINUS
48514: PUSH
48515: LD_VAR 0 2
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: PUSH
48528: LD_VAR 0 1
48532: PUSH
48533: LD_VAR 0 2
48537: PUSH
48538: LD_INT 4
48540: MINUS
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: PUSH
48550: LD_VAR 0 1
48554: PUSH
48555: LD_INT 4
48557: PLUS
48558: PUSH
48559: LD_VAR 0 2
48563: PUSH
48564: LD_INT 4
48566: PLUS
48567: PUSH
48568: LD_INT 5
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: PUSH
48576: LD_VAR 0 1
48580: PUSH
48581: LD_INT 3
48583: PLUS
48584: PUSH
48585: LD_VAR 0 2
48589: PUSH
48590: LD_INT 4
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: PUSH
48598: LD_VAR 0 1
48602: PUSH
48603: LD_VAR 0 2
48607: PUSH
48608: LD_INT 3
48610: PLUS
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// end ; end ;
48627: GO 48630
48629: POP
// result := list ;
48630: LD_ADDR_VAR 0 4
48634: PUSH
48635: LD_VAR 0 5
48639: ST_TO_ADDR
// end ;
48640: LD_VAR 0 4
48644: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
48649: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48650: LD_VAR 0 1
48654: NOT
48655: PUSH
48656: LD_VAR 0 2
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: LD_INT 4
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: IN
48679: NOT
48680: OR
48681: IFFALSE 48685
// exit ;
48683: GO 48777
// tmp := [ ] ;
48685: LD_ADDR_VAR 0 5
48689: PUSH
48690: EMPTY
48691: ST_TO_ADDR
// for i in units do
48692: LD_ADDR_VAR 0 4
48696: PUSH
48697: LD_VAR 0 1
48701: PUSH
48702: FOR_IN
48703: IFFALSE 48746
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48705: LD_ADDR_VAR 0 5
48709: PUSH
48710: LD_VAR 0 5
48714: PPUSH
48715: LD_VAR 0 5
48719: PUSH
48720: LD_INT 1
48722: PLUS
48723: PPUSH
48724: LD_VAR 0 4
48728: PPUSH
48729: LD_VAR 0 2
48733: PPUSH
48734: CALL_OW 259
48738: PPUSH
48739: CALL_OW 2
48743: ST_TO_ADDR
48744: GO 48702
48746: POP
48747: POP
// if not tmp then
48748: LD_VAR 0 5
48752: NOT
48753: IFFALSE 48757
// exit ;
48755: GO 48777
// result := SortListByListDesc ( units , tmp ) ;
48757: LD_ADDR_VAR 0 3
48761: PUSH
48762: LD_VAR 0 1
48766: PPUSH
48767: LD_VAR 0 5
48771: PPUSH
48772: CALL_OW 77
48776: ST_TO_ADDR
// end ;
48777: LD_VAR 0 3
48781: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48782: LD_INT 0
48784: PPUSH
48785: PPUSH
48786: PPUSH
// result := false ;
48787: LD_ADDR_VAR 0 3
48791: PUSH
48792: LD_INT 0
48794: ST_TO_ADDR
// x := GetX ( building ) ;
48795: LD_ADDR_VAR 0 4
48799: PUSH
48800: LD_VAR 0 2
48804: PPUSH
48805: CALL_OW 250
48809: ST_TO_ADDR
// y := GetY ( building ) ;
48810: LD_ADDR_VAR 0 5
48814: PUSH
48815: LD_VAR 0 2
48819: PPUSH
48820: CALL_OW 251
48824: ST_TO_ADDR
// if not building or not x or not y then
48825: LD_VAR 0 2
48829: NOT
48830: PUSH
48831: LD_VAR 0 4
48835: NOT
48836: OR
48837: PUSH
48838: LD_VAR 0 5
48842: NOT
48843: OR
48844: IFFALSE 48848
// exit ;
48846: GO 48940
// if GetTaskList ( unit ) then
48848: LD_VAR 0 1
48852: PPUSH
48853: CALL_OW 437
48857: IFFALSE 48940
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48859: LD_STRING e
48861: PUSH
48862: LD_VAR 0 1
48866: PPUSH
48867: CALL_OW 437
48871: PUSH
48872: LD_INT 1
48874: ARRAY
48875: PUSH
48876: LD_INT 1
48878: ARRAY
48879: EQUAL
48880: PUSH
48881: LD_VAR 0 4
48885: PUSH
48886: LD_VAR 0 1
48890: PPUSH
48891: CALL_OW 437
48895: PUSH
48896: LD_INT 1
48898: ARRAY
48899: PUSH
48900: LD_INT 2
48902: ARRAY
48903: EQUAL
48904: AND
48905: PUSH
48906: LD_VAR 0 5
48910: PUSH
48911: LD_VAR 0 1
48915: PPUSH
48916: CALL_OW 437
48920: PUSH
48921: LD_INT 1
48923: ARRAY
48924: PUSH
48925: LD_INT 3
48927: ARRAY
48928: EQUAL
48929: AND
48930: IFFALSE 48940
// result := true end ;
48932: LD_ADDR_VAR 0 3
48936: PUSH
48937: LD_INT 1
48939: ST_TO_ADDR
// end ;
48940: LD_VAR 0 3
48944: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48945: LD_INT 0
48947: PPUSH
// result := false ;
48948: LD_ADDR_VAR 0 4
48952: PUSH
48953: LD_INT 0
48955: ST_TO_ADDR
// if GetTaskList ( unit ) then
48956: LD_VAR 0 1
48960: PPUSH
48961: CALL_OW 437
48965: IFFALSE 49048
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48967: LD_STRING M
48969: PUSH
48970: LD_VAR 0 1
48974: PPUSH
48975: CALL_OW 437
48979: PUSH
48980: LD_INT 1
48982: ARRAY
48983: PUSH
48984: LD_INT 1
48986: ARRAY
48987: EQUAL
48988: PUSH
48989: LD_VAR 0 2
48993: PUSH
48994: LD_VAR 0 1
48998: PPUSH
48999: CALL_OW 437
49003: PUSH
49004: LD_INT 1
49006: ARRAY
49007: PUSH
49008: LD_INT 2
49010: ARRAY
49011: EQUAL
49012: AND
49013: PUSH
49014: LD_VAR 0 3
49018: PUSH
49019: LD_VAR 0 1
49023: PPUSH
49024: CALL_OW 437
49028: PUSH
49029: LD_INT 1
49031: ARRAY
49032: PUSH
49033: LD_INT 3
49035: ARRAY
49036: EQUAL
49037: AND
49038: IFFALSE 49048
// result := true ;
49040: LD_ADDR_VAR 0 4
49044: PUSH
49045: LD_INT 1
49047: ST_TO_ADDR
// end ; end ;
49048: LD_VAR 0 4
49052: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49053: LD_INT 0
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
// if not unit or not area then
49059: LD_VAR 0 1
49063: NOT
49064: PUSH
49065: LD_VAR 0 2
49069: NOT
49070: OR
49071: IFFALSE 49075
// exit ;
49073: GO 49239
// tmp := AreaToList ( area , i ) ;
49075: LD_ADDR_VAR 0 6
49079: PUSH
49080: LD_VAR 0 2
49084: PPUSH
49085: LD_VAR 0 5
49089: PPUSH
49090: CALL_OW 517
49094: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49095: LD_ADDR_VAR 0 5
49099: PUSH
49100: DOUBLE
49101: LD_INT 1
49103: DEC
49104: ST_TO_ADDR
49105: LD_VAR 0 6
49109: PUSH
49110: LD_INT 1
49112: ARRAY
49113: PUSH
49114: FOR_TO
49115: IFFALSE 49237
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49117: LD_ADDR_VAR 0 7
49121: PUSH
49122: LD_VAR 0 6
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PUSH
49131: LD_VAR 0 5
49135: ARRAY
49136: PUSH
49137: LD_VAR 0 6
49141: PUSH
49142: LD_INT 2
49144: ARRAY
49145: PUSH
49146: LD_VAR 0 5
49150: ARRAY
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49156: LD_VAR 0 7
49160: PUSH
49161: LD_INT 1
49163: ARRAY
49164: PPUSH
49165: LD_VAR 0 7
49169: PUSH
49170: LD_INT 2
49172: ARRAY
49173: PPUSH
49174: CALL_OW 428
49178: PUSH
49179: LD_INT 0
49181: EQUAL
49182: IFFALSE 49235
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49184: LD_VAR 0 1
49188: PPUSH
49189: LD_VAR 0 7
49193: PUSH
49194: LD_INT 1
49196: ARRAY
49197: PPUSH
49198: LD_VAR 0 7
49202: PUSH
49203: LD_INT 2
49205: ARRAY
49206: PPUSH
49207: LD_VAR 0 3
49211: PPUSH
49212: CALL_OW 48
// result := IsPlaced ( unit ) ;
49216: LD_ADDR_VAR 0 4
49220: PUSH
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 305
49230: ST_TO_ADDR
// exit ;
49231: POP
49232: POP
49233: GO 49239
// end ; end ;
49235: GO 49114
49237: POP
49238: POP
// end ;
49239: LD_VAR 0 4
49243: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49244: LD_INT 0
49246: PPUSH
49247: PPUSH
49248: PPUSH
// if not side or side > 8 then
49249: LD_VAR 0 1
49253: NOT
49254: PUSH
49255: LD_VAR 0 1
49259: PUSH
49260: LD_INT 8
49262: GREATER
49263: OR
49264: IFFALSE 49268
// exit ;
49266: GO 49455
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49268: LD_ADDR_VAR 0 4
49272: PUSH
49273: LD_INT 22
49275: PUSH
49276: LD_VAR 0 1
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 21
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PPUSH
49299: CALL_OW 69
49303: ST_TO_ADDR
// if not tmp then
49304: LD_VAR 0 4
49308: NOT
49309: IFFALSE 49313
// exit ;
49311: GO 49455
// enable_addtolog := true ;
49313: LD_ADDR_OWVAR 81
49317: PUSH
49318: LD_INT 1
49320: ST_TO_ADDR
// AddToLog ( [ ) ;
49321: LD_STRING [
49323: PPUSH
49324: CALL_OW 561
// for i in tmp do
49328: LD_ADDR_VAR 0 3
49332: PUSH
49333: LD_VAR 0 4
49337: PUSH
49338: FOR_IN
49339: IFFALSE 49446
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49341: LD_STRING [
49343: PUSH
49344: LD_VAR 0 3
49348: PPUSH
49349: CALL_OW 266
49353: STR
49354: PUSH
49355: LD_STRING , 
49357: STR
49358: PUSH
49359: LD_VAR 0 3
49363: PPUSH
49364: CALL_OW 250
49368: STR
49369: PUSH
49370: LD_STRING , 
49372: STR
49373: PUSH
49374: LD_VAR 0 3
49378: PPUSH
49379: CALL_OW 251
49383: STR
49384: PUSH
49385: LD_STRING , 
49387: STR
49388: PUSH
49389: LD_VAR 0 3
49393: PPUSH
49394: CALL_OW 254
49398: STR
49399: PUSH
49400: LD_STRING , 
49402: STR
49403: PUSH
49404: LD_VAR 0 3
49408: PPUSH
49409: LD_INT 1
49411: PPUSH
49412: CALL_OW 268
49416: STR
49417: PUSH
49418: LD_STRING , 
49420: STR
49421: PUSH
49422: LD_VAR 0 3
49426: PPUSH
49427: LD_INT 2
49429: PPUSH
49430: CALL_OW 268
49434: STR
49435: PUSH
49436: LD_STRING ],
49438: STR
49439: PPUSH
49440: CALL_OW 561
// end ;
49444: GO 49338
49446: POP
49447: POP
// AddToLog ( ]; ) ;
49448: LD_STRING ];
49450: PPUSH
49451: CALL_OW 561
// end ;
49455: LD_VAR 0 2
49459: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49460: LD_INT 0
49462: PPUSH
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
// if not area or not rate or not max then
49467: LD_VAR 0 1
49471: NOT
49472: PUSH
49473: LD_VAR 0 2
49477: NOT
49478: OR
49479: PUSH
49480: LD_VAR 0 4
49484: NOT
49485: OR
49486: IFFALSE 49490
// exit ;
49488: GO 49682
// while 1 do
49490: LD_INT 1
49492: IFFALSE 49682
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49494: LD_ADDR_VAR 0 9
49498: PUSH
49499: LD_VAR 0 1
49503: PPUSH
49504: LD_INT 1
49506: PPUSH
49507: CALL_OW 287
49511: PUSH
49512: LD_INT 10
49514: MUL
49515: ST_TO_ADDR
// r := rate / 10 ;
49516: LD_ADDR_VAR 0 7
49520: PUSH
49521: LD_VAR 0 2
49525: PUSH
49526: LD_INT 10
49528: DIVREAL
49529: ST_TO_ADDR
// time := 1 1$00 ;
49530: LD_ADDR_VAR 0 8
49534: PUSH
49535: LD_INT 2100
49537: ST_TO_ADDR
// if amount < min then
49538: LD_VAR 0 9
49542: PUSH
49543: LD_VAR 0 3
49547: LESS
49548: IFFALSE 49566
// r := r * 2 else
49550: LD_ADDR_VAR 0 7
49554: PUSH
49555: LD_VAR 0 7
49559: PUSH
49560: LD_INT 2
49562: MUL
49563: ST_TO_ADDR
49564: GO 49592
// if amount > max then
49566: LD_VAR 0 9
49570: PUSH
49571: LD_VAR 0 4
49575: GREATER
49576: IFFALSE 49592
// r := r / 2 ;
49578: LD_ADDR_VAR 0 7
49582: PUSH
49583: LD_VAR 0 7
49587: PUSH
49588: LD_INT 2
49590: DIVREAL
49591: ST_TO_ADDR
// time := time / r ;
49592: LD_ADDR_VAR 0 8
49596: PUSH
49597: LD_VAR 0 8
49601: PUSH
49602: LD_VAR 0 7
49606: DIVREAL
49607: ST_TO_ADDR
// if time < 0 then
49608: LD_VAR 0 8
49612: PUSH
49613: LD_INT 0
49615: LESS
49616: IFFALSE 49633
// time := time * - 1 ;
49618: LD_ADDR_VAR 0 8
49622: PUSH
49623: LD_VAR 0 8
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: MUL
49632: ST_TO_ADDR
// wait ( time ) ;
49633: LD_VAR 0 8
49637: PPUSH
49638: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
49642: LD_INT 35
49644: PPUSH
49645: LD_INT 875
49647: PPUSH
49648: CALL_OW 12
49652: PPUSH
49653: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49657: LD_INT 1
49659: PPUSH
49660: LD_INT 5
49662: PPUSH
49663: CALL_OW 12
49667: PPUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: LD_INT 1
49675: PPUSH
49676: CALL_OW 55
// end ;
49680: GO 49490
// end ;
49682: LD_VAR 0 5
49686: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49687: LD_INT 0
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
49693: PPUSH
49694: PPUSH
49695: PPUSH
49696: PPUSH
// if not turrets or not factories then
49697: LD_VAR 0 1
49701: NOT
49702: PUSH
49703: LD_VAR 0 2
49707: NOT
49708: OR
49709: IFFALSE 49713
// exit ;
49711: GO 50020
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49713: LD_ADDR_VAR 0 10
49717: PUSH
49718: LD_INT 5
49720: PUSH
49721: LD_INT 6
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 4
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: LD_INT 5
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 24
49755: PUSH
49756: LD_INT 25
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 23
49765: PUSH
49766: LD_INT 27
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 42
49779: PUSH
49780: LD_INT 43
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 44
49789: PUSH
49790: LD_INT 46
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 45
49799: PUSH
49800: LD_INT 47
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// result := [ ] ;
49817: LD_ADDR_VAR 0 3
49821: PUSH
49822: EMPTY
49823: ST_TO_ADDR
// for i in turrets do
49824: LD_ADDR_VAR 0 4
49828: PUSH
49829: LD_VAR 0 1
49833: PUSH
49834: FOR_IN
49835: IFFALSE 50018
// begin nat := GetNation ( i ) ;
49837: LD_ADDR_VAR 0 7
49841: PUSH
49842: LD_VAR 0 4
49846: PPUSH
49847: CALL_OW 248
49851: ST_TO_ADDR
// weapon := 0 ;
49852: LD_ADDR_VAR 0 8
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// if not nat then
49860: LD_VAR 0 7
49864: NOT
49865: IFFALSE 49869
// continue ;
49867: GO 49834
// for j in list [ nat ] do
49869: LD_ADDR_VAR 0 5
49873: PUSH
49874: LD_VAR 0 10
49878: PUSH
49879: LD_VAR 0 7
49883: ARRAY
49884: PUSH
49885: FOR_IN
49886: IFFALSE 49927
// if GetBWeapon ( i ) = j [ 1 ] then
49888: LD_VAR 0 4
49892: PPUSH
49893: CALL_OW 269
49897: PUSH
49898: LD_VAR 0 5
49902: PUSH
49903: LD_INT 1
49905: ARRAY
49906: EQUAL
49907: IFFALSE 49925
// begin weapon := j [ 2 ] ;
49909: LD_ADDR_VAR 0 8
49913: PUSH
49914: LD_VAR 0 5
49918: PUSH
49919: LD_INT 2
49921: ARRAY
49922: ST_TO_ADDR
// break ;
49923: GO 49927
// end ;
49925: GO 49885
49927: POP
49928: POP
// if not weapon then
49929: LD_VAR 0 8
49933: NOT
49934: IFFALSE 49938
// continue ;
49936: GO 49834
// for k in factories do
49938: LD_ADDR_VAR 0 6
49942: PUSH
49943: LD_VAR 0 2
49947: PUSH
49948: FOR_IN
49949: IFFALSE 50014
// begin weapons := AvailableWeaponList ( k ) ;
49951: LD_ADDR_VAR 0 9
49955: PUSH
49956: LD_VAR 0 6
49960: PPUSH
49961: CALL_OW 478
49965: ST_TO_ADDR
// if not weapons then
49966: LD_VAR 0 9
49970: NOT
49971: IFFALSE 49975
// continue ;
49973: GO 49948
// if weapon in weapons then
49975: LD_VAR 0 8
49979: PUSH
49980: LD_VAR 0 9
49984: IN
49985: IFFALSE 50012
// begin result := [ i , weapon ] ;
49987: LD_ADDR_VAR 0 3
49991: PUSH
49992: LD_VAR 0 4
49996: PUSH
49997: LD_VAR 0 8
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// exit ;
50006: POP
50007: POP
50008: POP
50009: POP
50010: GO 50020
// end ; end ;
50012: GO 49948
50014: POP
50015: POP
// end ;
50016: GO 49834
50018: POP
50019: POP
// end ;
50020: LD_VAR 0 3
50024: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50025: LD_INT 0
50027: PPUSH
// if not side or side > 8 then
50028: LD_VAR 0 3
50032: NOT
50033: PUSH
50034: LD_VAR 0 3
50038: PUSH
50039: LD_INT 8
50041: GREATER
50042: OR
50043: IFFALSE 50047
// exit ;
50045: GO 50106
// if not range then
50047: LD_VAR 0 4
50051: NOT
50052: IFFALSE 50063
// range := - 12 ;
50054: LD_ADDR_VAR 0 4
50058: PUSH
50059: LD_INT 12
50061: NEG
50062: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50063: LD_VAR 0 1
50067: PPUSH
50068: LD_VAR 0 2
50072: PPUSH
50073: LD_VAR 0 3
50077: PPUSH
50078: LD_VAR 0 4
50082: PPUSH
50083: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50087: LD_VAR 0 1
50091: PPUSH
50092: LD_VAR 0 2
50096: PPUSH
50097: LD_VAR 0 3
50101: PPUSH
50102: CALL_OW 331
// end ;
50106: LD_VAR 0 5
50110: RET
// export function Video ( mode ) ; begin
50111: LD_INT 0
50113: PPUSH
// ingame_video = mode ;
50114: LD_ADDR_OWVAR 52
50118: PUSH
50119: LD_VAR 0 1
50123: ST_TO_ADDR
// interface_hidden = mode ;
50124: LD_ADDR_OWVAR 54
50128: PUSH
50129: LD_VAR 0 1
50133: ST_TO_ADDR
// end ;
50134: LD_VAR 0 2
50138: RET
// export function Join ( array , element ) ; begin
50139: LD_INT 0
50141: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50142: LD_ADDR_VAR 0 3
50146: PUSH
50147: LD_VAR 0 1
50151: PPUSH
50152: LD_VAR 0 1
50156: PUSH
50157: LD_INT 1
50159: PLUS
50160: PPUSH
50161: LD_VAR 0 2
50165: PPUSH
50166: CALL_OW 1
50170: ST_TO_ADDR
// end ;
50171: LD_VAR 0 3
50175: RET
// export function JoinUnion ( array , element ) ; begin
50176: LD_INT 0
50178: PPUSH
// result := array union element ;
50179: LD_ADDR_VAR 0 3
50183: PUSH
50184: LD_VAR 0 1
50188: PUSH
50189: LD_VAR 0 2
50193: UNION
50194: ST_TO_ADDR
// end ;
50195: LD_VAR 0 3
50199: RET
// export function GetBehemoths ( side ) ; begin
50200: LD_INT 0
50202: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
50203: LD_ADDR_VAR 0 2
50207: PUSH
50208: LD_INT 22
50210: PUSH
50211: LD_VAR 0 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 31
50222: PUSH
50223: LD_INT 25
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PPUSH
50234: CALL_OW 69
50238: ST_TO_ADDR
// end ;
50239: LD_VAR 0 2
50243: RET
// export function Shuffle ( array ) ; var i , index ; begin
50244: LD_INT 0
50246: PPUSH
50247: PPUSH
50248: PPUSH
// result := [ ] ;
50249: LD_ADDR_VAR 0 2
50253: PUSH
50254: EMPTY
50255: ST_TO_ADDR
// if not array then
50256: LD_VAR 0 1
50260: NOT
50261: IFFALSE 50265
// exit ;
50263: GO 50364
// Randomize ;
50265: CALL_OW 10
// for i = array downto 1 do
50269: LD_ADDR_VAR 0 3
50273: PUSH
50274: DOUBLE
50275: LD_VAR 0 1
50279: INC
50280: ST_TO_ADDR
50281: LD_INT 1
50283: PUSH
50284: FOR_DOWNTO
50285: IFFALSE 50362
// begin index := rand ( 1 , array ) ;
50287: LD_ADDR_VAR 0 4
50291: PUSH
50292: LD_INT 1
50294: PPUSH
50295: LD_VAR 0 1
50299: PPUSH
50300: CALL_OW 12
50304: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50305: LD_ADDR_VAR 0 2
50309: PUSH
50310: LD_VAR 0 2
50314: PPUSH
50315: LD_VAR 0 2
50319: PUSH
50320: LD_INT 1
50322: PLUS
50323: PPUSH
50324: LD_VAR 0 1
50328: PUSH
50329: LD_VAR 0 4
50333: ARRAY
50334: PPUSH
50335: CALL_OW 2
50339: ST_TO_ADDR
// array := Delete ( array , index ) ;
50340: LD_ADDR_VAR 0 1
50344: PUSH
50345: LD_VAR 0 1
50349: PPUSH
50350: LD_VAR 0 4
50354: PPUSH
50355: CALL_OW 3
50359: ST_TO_ADDR
// end ;
50360: GO 50284
50362: POP
50363: POP
// end ;
50364: LD_VAR 0 2
50368: RET
// export function GetBaseMaterials ( base ) ; begin
50369: LD_INT 0
50371: PPUSH
// result := [ 0 , 0 , 0 ] ;
50372: LD_ADDR_VAR 0 2
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// if not base then
50391: LD_VAR 0 1
50395: NOT
50396: IFFALSE 50400
// exit ;
50398: GO 50449
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50400: LD_ADDR_VAR 0 2
50404: PUSH
50405: LD_VAR 0 1
50409: PPUSH
50410: LD_INT 1
50412: PPUSH
50413: CALL_OW 275
50417: PUSH
50418: LD_VAR 0 1
50422: PPUSH
50423: LD_INT 2
50425: PPUSH
50426: CALL_OW 275
50430: PUSH
50431: LD_VAR 0 1
50435: PPUSH
50436: LD_INT 3
50438: PPUSH
50439: CALL_OW 275
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// end ;
50449: LD_VAR 0 2
50453: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50454: LD_INT 0
50456: PPUSH
50457: PPUSH
// result := array ;
50458: LD_ADDR_VAR 0 3
50462: PUSH
50463: LD_VAR 0 1
50467: ST_TO_ADDR
// if size > 0 then
50468: LD_VAR 0 2
50472: PUSH
50473: LD_INT 0
50475: GREATER
50476: IFFALSE 50522
// for i := array downto size do
50478: LD_ADDR_VAR 0 4
50482: PUSH
50483: DOUBLE
50484: LD_VAR 0 1
50488: INC
50489: ST_TO_ADDR
50490: LD_VAR 0 2
50494: PUSH
50495: FOR_DOWNTO
50496: IFFALSE 50520
// result := Delete ( result , result ) ;
50498: LD_ADDR_VAR 0 3
50502: PUSH
50503: LD_VAR 0 3
50507: PPUSH
50508: LD_VAR 0 3
50512: PPUSH
50513: CALL_OW 3
50517: ST_TO_ADDR
50518: GO 50495
50520: POP
50521: POP
// end ;
50522: LD_VAR 0 3
50526: RET
// export function ComExit ( unit ) ; var tmp ; begin
50527: LD_INT 0
50529: PPUSH
50530: PPUSH
// if not IsInUnit ( unit ) then
50531: LD_VAR 0 1
50535: PPUSH
50536: CALL_OW 310
50540: NOT
50541: IFFALSE 50545
// exit ;
50543: GO 50605
// tmp := IsInUnit ( unit ) ;
50545: LD_ADDR_VAR 0 3
50549: PUSH
50550: LD_VAR 0 1
50554: PPUSH
50555: CALL_OW 310
50559: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50560: LD_VAR 0 3
50564: PPUSH
50565: CALL_OW 247
50569: PUSH
50570: LD_INT 2
50572: EQUAL
50573: IFFALSE 50586
// ComExitVehicle ( unit ) else
50575: LD_VAR 0 1
50579: PPUSH
50580: CALL_OW 121
50584: GO 50595
// ComExitBuilding ( unit ) ;
50586: LD_VAR 0 1
50590: PPUSH
50591: CALL_OW 122
// result := tmp ;
50595: LD_ADDR_VAR 0 2
50599: PUSH
50600: LD_VAR 0 3
50604: ST_TO_ADDR
// end ;
50605: LD_VAR 0 2
50609: RET
// export function ComExitAll ( units ) ; var i ; begin
50610: LD_INT 0
50612: PPUSH
50613: PPUSH
// if not units then
50614: LD_VAR 0 1
50618: NOT
50619: IFFALSE 50623
// exit ;
50621: GO 50649
// for i in units do
50623: LD_ADDR_VAR 0 3
50627: PUSH
50628: LD_VAR 0 1
50632: PUSH
50633: FOR_IN
50634: IFFALSE 50647
// ComExit ( i ) ;
50636: LD_VAR 0 3
50640: PPUSH
50641: CALL 50527 0 1
50645: GO 50633
50647: POP
50648: POP
// end ;
50649: LD_VAR 0 2
50653: RET
// export function ResetHc ; begin
50654: LD_INT 0
50656: PPUSH
// InitHc ;
50657: CALL_OW 19
// hc_importance := 0 ;
50661: LD_ADDR_OWVAR 32
50665: PUSH
50666: LD_INT 0
50668: ST_TO_ADDR
// end ;
50669: LD_VAR 0 1
50673: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50674: LD_INT 0
50676: PPUSH
50677: PPUSH
50678: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50679: LD_ADDR_VAR 0 6
50683: PUSH
50684: LD_VAR 0 1
50688: PUSH
50689: LD_VAR 0 3
50693: PLUS
50694: PUSH
50695: LD_INT 2
50697: DIV
50698: ST_TO_ADDR
// if _x < 0 then
50699: LD_VAR 0 6
50703: PUSH
50704: LD_INT 0
50706: LESS
50707: IFFALSE 50724
// _x := _x * - 1 ;
50709: LD_ADDR_VAR 0 6
50713: PUSH
50714: LD_VAR 0 6
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: MUL
50723: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50724: LD_ADDR_VAR 0 7
50728: PUSH
50729: LD_VAR 0 2
50733: PUSH
50734: LD_VAR 0 4
50738: PLUS
50739: PUSH
50740: LD_INT 2
50742: DIV
50743: ST_TO_ADDR
// if _y < 0 then
50744: LD_VAR 0 7
50748: PUSH
50749: LD_INT 0
50751: LESS
50752: IFFALSE 50769
// _y := _y * - 1 ;
50754: LD_ADDR_VAR 0 7
50758: PUSH
50759: LD_VAR 0 7
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: MUL
50768: ST_TO_ADDR
// result := [ _x , _y ] ;
50769: LD_ADDR_VAR 0 5
50773: PUSH
50774: LD_VAR 0 6
50778: PUSH
50779: LD_VAR 0 7
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: ST_TO_ADDR
// end ;
50788: LD_VAR 0 5
50792: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50793: LD_INT 0
50795: PPUSH
50796: PPUSH
50797: PPUSH
50798: PPUSH
// task := GetTaskList ( unit ) ;
50799: LD_ADDR_VAR 0 7
50803: PUSH
50804: LD_VAR 0 1
50808: PPUSH
50809: CALL_OW 437
50813: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50814: LD_VAR 0 7
50818: NOT
50819: PUSH
50820: LD_VAR 0 1
50824: PPUSH
50825: LD_VAR 0 2
50829: PPUSH
50830: CALL_OW 308
50834: NOT
50835: AND
50836: IFFALSE 50840
// exit ;
50838: GO 50958
// if IsInArea ( unit , area ) then
50840: LD_VAR 0 1
50844: PPUSH
50845: LD_VAR 0 2
50849: PPUSH
50850: CALL_OW 308
50854: IFFALSE 50872
// begin ComMoveToArea ( unit , goAway ) ;
50856: LD_VAR 0 1
50860: PPUSH
50861: LD_VAR 0 3
50865: PPUSH
50866: CALL_OW 113
// exit ;
50870: GO 50958
// end ; if task [ 1 ] [ 1 ] <> M then
50872: LD_VAR 0 7
50876: PUSH
50877: LD_INT 1
50879: ARRAY
50880: PUSH
50881: LD_INT 1
50883: ARRAY
50884: PUSH
50885: LD_STRING M
50887: NONEQUAL
50888: IFFALSE 50892
// exit ;
50890: GO 50958
// x := task [ 1 ] [ 2 ] ;
50892: LD_ADDR_VAR 0 5
50896: PUSH
50897: LD_VAR 0 7
50901: PUSH
50902: LD_INT 1
50904: ARRAY
50905: PUSH
50906: LD_INT 2
50908: ARRAY
50909: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50910: LD_ADDR_VAR 0 6
50914: PUSH
50915: LD_VAR 0 7
50919: PUSH
50920: LD_INT 1
50922: ARRAY
50923: PUSH
50924: LD_INT 3
50926: ARRAY
50927: ST_TO_ADDR
// if InArea ( x , y , area ) then
50928: LD_VAR 0 5
50932: PPUSH
50933: LD_VAR 0 6
50937: PPUSH
50938: LD_VAR 0 2
50942: PPUSH
50943: CALL_OW 309
50947: IFFALSE 50958
// ComStop ( unit ) ;
50949: LD_VAR 0 1
50953: PPUSH
50954: CALL_OW 141
// end ;
50958: LD_VAR 0 4
50962: RET
// export function Abs ( value ) ; begin
50963: LD_INT 0
50965: PPUSH
// result := value ;
50966: LD_ADDR_VAR 0 2
50970: PUSH
50971: LD_VAR 0 1
50975: ST_TO_ADDR
// if value < 0 then
50976: LD_VAR 0 1
50980: PUSH
50981: LD_INT 0
50983: LESS
50984: IFFALSE 51001
// result := value * - 1 ;
50986: LD_ADDR_VAR 0 2
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: MUL
51000: ST_TO_ADDR
// end ;
51001: LD_VAR 0 2
51005: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51006: LD_INT 0
51008: PPUSH
51009: PPUSH
51010: PPUSH
51011: PPUSH
51012: PPUSH
51013: PPUSH
51014: PPUSH
51015: PPUSH
// if not unit or not building then
51016: LD_VAR 0 1
51020: NOT
51021: PUSH
51022: LD_VAR 0 2
51026: NOT
51027: OR
51028: IFFALSE 51032
// exit ;
51030: GO 51258
// x := GetX ( building ) ;
51032: LD_ADDR_VAR 0 4
51036: PUSH
51037: LD_VAR 0 2
51041: PPUSH
51042: CALL_OW 250
51046: ST_TO_ADDR
// y := GetY ( building ) ;
51047: LD_ADDR_VAR 0 6
51051: PUSH
51052: LD_VAR 0 2
51056: PPUSH
51057: CALL_OW 251
51061: ST_TO_ADDR
// d := GetDir ( building ) ;
51062: LD_ADDR_VAR 0 8
51066: PUSH
51067: LD_VAR 0 2
51071: PPUSH
51072: CALL_OW 254
51076: ST_TO_ADDR
// r := 4 ;
51077: LD_ADDR_VAR 0 9
51081: PUSH
51082: LD_INT 4
51084: ST_TO_ADDR
// for i := 1 to 5 do
51085: LD_ADDR_VAR 0 10
51089: PUSH
51090: DOUBLE
51091: LD_INT 1
51093: DEC
51094: ST_TO_ADDR
51095: LD_INT 5
51097: PUSH
51098: FOR_TO
51099: IFFALSE 51256
// begin _x := ShiftX ( x , d , r + i ) ;
51101: LD_ADDR_VAR 0 5
51105: PUSH
51106: LD_VAR 0 4
51110: PPUSH
51111: LD_VAR 0 8
51115: PPUSH
51116: LD_VAR 0 9
51120: PUSH
51121: LD_VAR 0 10
51125: PLUS
51126: PPUSH
51127: CALL_OW 272
51131: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51132: LD_ADDR_VAR 0 7
51136: PUSH
51137: LD_VAR 0 6
51141: PPUSH
51142: LD_VAR 0 8
51146: PPUSH
51147: LD_VAR 0 9
51151: PUSH
51152: LD_VAR 0 10
51156: PLUS
51157: PPUSH
51158: CALL_OW 273
51162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51163: LD_VAR 0 5
51167: PPUSH
51168: LD_VAR 0 7
51172: PPUSH
51173: CALL_OW 488
51177: PUSH
51178: LD_VAR 0 5
51182: PPUSH
51183: LD_VAR 0 7
51187: PPUSH
51188: CALL_OW 428
51192: PPUSH
51193: CALL_OW 247
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: IN
51208: NOT
51209: AND
51210: IFFALSE 51254
// begin ComMoveXY ( unit , _x , _y ) ;
51212: LD_VAR 0 1
51216: PPUSH
51217: LD_VAR 0 5
51221: PPUSH
51222: LD_VAR 0 7
51226: PPUSH
51227: CALL_OW 111
// result := [ _x , _y ] ;
51231: LD_ADDR_VAR 0 3
51235: PUSH
51236: LD_VAR 0 5
51240: PUSH
51241: LD_VAR 0 7
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// exit ;
51250: POP
51251: POP
51252: GO 51258
// end ; end ;
51254: GO 51098
51256: POP
51257: POP
// end ;
51258: LD_VAR 0 3
51262: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51263: LD_INT 0
51265: PPUSH
51266: PPUSH
51267: PPUSH
// result := 0 ;
51268: LD_ADDR_VAR 0 3
51272: PUSH
51273: LD_INT 0
51275: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51276: LD_VAR 0 1
51280: PUSH
51281: LD_INT 0
51283: LESS
51284: PUSH
51285: LD_VAR 0 1
51289: PUSH
51290: LD_INT 8
51292: GREATER
51293: OR
51294: PUSH
51295: LD_VAR 0 2
51299: PUSH
51300: LD_INT 0
51302: LESS
51303: OR
51304: PUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_INT 8
51312: GREATER
51313: OR
51314: IFFALSE 51318
// exit ;
51316: GO 51393
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51318: LD_ADDR_VAR 0 4
51322: PUSH
51323: LD_INT 22
51325: PUSH
51326: LD_VAR 0 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PPUSH
51335: CALL_OW 69
51339: PUSH
51340: FOR_IN
51341: IFFALSE 51391
// begin un := UnitShoot ( i ) ;
51343: LD_ADDR_VAR 0 5
51347: PUSH
51348: LD_VAR 0 4
51352: PPUSH
51353: CALL_OW 504
51357: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51358: LD_VAR 0 5
51362: PPUSH
51363: CALL_OW 255
51367: PUSH
51368: LD_VAR 0 1
51372: EQUAL
51373: IFFALSE 51389
// begin result := un ;
51375: LD_ADDR_VAR 0 3
51379: PUSH
51380: LD_VAR 0 5
51384: ST_TO_ADDR
// exit ;
51385: POP
51386: POP
51387: GO 51393
// end ; end ;
51389: GO 51340
51391: POP
51392: POP
// end ;
51393: LD_VAR 0 3
51397: RET
// export function GetCargoBay ( units ) ; begin
51398: LD_INT 0
51400: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51401: LD_ADDR_VAR 0 2
51405: PUSH
51406: LD_VAR 0 1
51410: PPUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 34
51416: PUSH
51417: LD_INT 12
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 34
51426: PUSH
51427: LD_INT 51
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 34
51436: PUSH
51437: LD_INT 32
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 34
51446: PUSH
51447: LD_EXP 97
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: PPUSH
51463: CALL_OW 72
51467: ST_TO_ADDR
// end ;
51468: LD_VAR 0 2
51472: RET
// export function Negate ( value ) ; begin
51473: LD_INT 0
51475: PPUSH
// result := not value ;
51476: LD_ADDR_VAR 0 2
51480: PUSH
51481: LD_VAR 0 1
51485: NOT
51486: ST_TO_ADDR
// end ;
51487: LD_VAR 0 2
51491: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
51492: LD_INT 0
51494: PPUSH
// if x1 = x2 then
51495: LD_VAR 0 1
51499: PUSH
51500: LD_VAR 0 3
51504: EQUAL
51505: IFFALSE 51539
// begin if y1 > y2 then
51507: LD_VAR 0 2
51511: PUSH
51512: LD_VAR 0 4
51516: GREATER
51517: IFFALSE 51529
// result := 0 else
51519: LD_ADDR_VAR 0 5
51523: PUSH
51524: LD_INT 0
51526: ST_TO_ADDR
51527: GO 51537
// result := 3 ;
51529: LD_ADDR_VAR 0 5
51533: PUSH
51534: LD_INT 3
51536: ST_TO_ADDR
// exit ;
51537: GO 51625
// end ; if y1 = y2 then
51539: LD_VAR 0 2
51543: PUSH
51544: LD_VAR 0 4
51548: EQUAL
51549: IFFALSE 51583
// begin if x1 > x2 then
51551: LD_VAR 0 1
51555: PUSH
51556: LD_VAR 0 3
51560: GREATER
51561: IFFALSE 51573
// result := 1 else
51563: LD_ADDR_VAR 0 5
51567: PUSH
51568: LD_INT 1
51570: ST_TO_ADDR
51571: GO 51581
// result := 4 ;
51573: LD_ADDR_VAR 0 5
51577: PUSH
51578: LD_INT 4
51580: ST_TO_ADDR
// exit ;
51581: GO 51625
// end ; if x1 > x2 and y1 > y2 then
51583: LD_VAR 0 1
51587: PUSH
51588: LD_VAR 0 3
51592: GREATER
51593: PUSH
51594: LD_VAR 0 2
51598: PUSH
51599: LD_VAR 0 4
51603: GREATER
51604: AND
51605: IFFALSE 51617
// result := 2 else
51607: LD_ADDR_VAR 0 5
51611: PUSH
51612: LD_INT 2
51614: ST_TO_ADDR
51615: GO 51625
// result := 5 ;
51617: LD_ADDR_VAR 0 5
51621: PUSH
51622: LD_INT 5
51624: ST_TO_ADDR
// end ;
51625: LD_VAR 0 5
51629: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51630: LD_INT 0
51632: PPUSH
51633: PPUSH
// if not driver or not IsInUnit ( driver ) then
51634: LD_VAR 0 1
51638: NOT
51639: PUSH
51640: LD_VAR 0 1
51644: PPUSH
51645: CALL_OW 310
51649: NOT
51650: OR
51651: IFFALSE 51655
// exit ;
51653: GO 51745
// vehicle := IsInUnit ( driver ) ;
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: LD_VAR 0 1
51664: PPUSH
51665: CALL_OW 310
51669: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51670: LD_VAR 0 1
51674: PPUSH
51675: LD_STRING \
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: PUSH
51705: LD_STRING E
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_VAR 0 3
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PPUSH
51741: CALL_OW 446
// end ;
51745: LD_VAR 0 2
51749: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51750: LD_INT 0
51752: PPUSH
51753: PPUSH
// if not driver or not IsInUnit ( driver ) then
51754: LD_VAR 0 1
51758: NOT
51759: PUSH
51760: LD_VAR 0 1
51764: PPUSH
51765: CALL_OW 310
51769: NOT
51770: OR
51771: IFFALSE 51775
// exit ;
51773: GO 51865
// vehicle := IsInUnit ( driver ) ;
51775: LD_ADDR_VAR 0 3
51779: PUSH
51780: LD_VAR 0 1
51784: PPUSH
51785: CALL_OW 310
51789: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51790: LD_VAR 0 1
51794: PPUSH
51795: LD_STRING \
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: PUSH
51825: LD_STRING E
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_VAR 0 3
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PPUSH
51861: CALL_OW 447
// end ;
51865: LD_VAR 0 2
51869: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51870: LD_INT 0
51872: PPUSH
51873: PPUSH
51874: PPUSH
// tmp := [ ] ;
51875: LD_ADDR_VAR 0 5
51879: PUSH
51880: EMPTY
51881: ST_TO_ADDR
// for i in units do
51882: LD_ADDR_VAR 0 4
51886: PUSH
51887: LD_VAR 0 1
51891: PUSH
51892: FOR_IN
51893: IFFALSE 51931
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51895: LD_ADDR_VAR 0 5
51899: PUSH
51900: LD_VAR 0 5
51904: PPUSH
51905: LD_VAR 0 5
51909: PUSH
51910: LD_INT 1
51912: PLUS
51913: PPUSH
51914: LD_VAR 0 4
51918: PPUSH
51919: CALL_OW 256
51923: PPUSH
51924: CALL_OW 2
51928: ST_TO_ADDR
51929: GO 51892
51931: POP
51932: POP
// if not tmp then
51933: LD_VAR 0 5
51937: NOT
51938: IFFALSE 51942
// exit ;
51940: GO 51990
// if asc then
51942: LD_VAR 0 2
51946: IFFALSE 51970
// result := SortListByListAsc ( units , tmp ) else
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_VAR 0 1
51957: PPUSH
51958: LD_VAR 0 5
51962: PPUSH
51963: CALL_OW 76
51967: ST_TO_ADDR
51968: GO 51990
// result := SortListByListDesc ( units , tmp ) ;
51970: LD_ADDR_VAR 0 3
51974: PUSH
51975: LD_VAR 0 1
51979: PPUSH
51980: LD_VAR 0 5
51984: PPUSH
51985: CALL_OW 77
51989: ST_TO_ADDR
// end ;
51990: LD_VAR 0 3
51994: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
// task := GetTaskList ( mech ) ;
51999: LD_ADDR_VAR 0 4
52003: PUSH
52004: LD_VAR 0 1
52008: PPUSH
52009: CALL_OW 437
52013: ST_TO_ADDR
// if not task then
52014: LD_VAR 0 4
52018: NOT
52019: IFFALSE 52023
// exit ;
52021: GO 52065
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: LD_VAR 0 4
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PUSH
52041: LD_STRING r
52043: EQUAL
52044: PUSH
52045: LD_VAR 0 4
52049: PUSH
52050: LD_INT 1
52052: ARRAY
52053: PUSH
52054: LD_INT 4
52056: ARRAY
52057: PUSH
52058: LD_VAR 0 2
52062: EQUAL
52063: AND
52064: ST_TO_ADDR
// end ;
52065: LD_VAR 0 3
52069: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52070: LD_INT 0
52072: PPUSH
// SetDir ( unit , d ) ;
52073: LD_VAR 0 1
52077: PPUSH
52078: LD_VAR 0 4
52082: PPUSH
52083: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
52087: LD_VAR 0 1
52091: PPUSH
52092: LD_VAR 0 2
52096: PPUSH
52097: LD_VAR 0 3
52101: PPUSH
52102: LD_VAR 0 5
52106: PPUSH
52107: CALL_OW 48
// end ;
52111: LD_VAR 0 6
52115: RET
// export function ToNaturalNumber ( number ) ; begin
52116: LD_INT 0
52118: PPUSH
// result := number div 1 ;
52119: LD_ADDR_VAR 0 2
52123: PUSH
52124: LD_VAR 0 1
52128: PUSH
52129: LD_INT 1
52131: DIV
52132: ST_TO_ADDR
// if number < 0 then
52133: LD_VAR 0 1
52137: PUSH
52138: LD_INT 0
52140: LESS
52141: IFFALSE 52151
// result := 0 ;
52143: LD_ADDR_VAR 0 2
52147: PUSH
52148: LD_INT 0
52150: ST_TO_ADDR
// end ;
52151: LD_VAR 0 2
52155: RET
// export function SortByClass ( units , class ) ; var un ; begin
52156: LD_INT 0
52158: PPUSH
52159: PPUSH
// if not units or not class then
52160: LD_VAR 0 1
52164: NOT
52165: PUSH
52166: LD_VAR 0 2
52170: NOT
52171: OR
52172: IFFALSE 52176
// exit ;
52174: GO 52271
// result := [ ] ;
52176: LD_ADDR_VAR 0 3
52180: PUSH
52181: EMPTY
52182: ST_TO_ADDR
// for un in units do
52183: LD_ADDR_VAR 0 4
52187: PUSH
52188: LD_VAR 0 1
52192: PUSH
52193: FOR_IN
52194: IFFALSE 52269
// if GetClass ( un ) = class then
52196: LD_VAR 0 4
52200: PPUSH
52201: CALL_OW 257
52205: PUSH
52206: LD_VAR 0 2
52210: EQUAL
52211: IFFALSE 52238
// result := Insert ( result , 1 , un ) else
52213: LD_ADDR_VAR 0 3
52217: PUSH
52218: LD_VAR 0 3
52222: PPUSH
52223: LD_INT 1
52225: PPUSH
52226: LD_VAR 0 4
52230: PPUSH
52231: CALL_OW 2
52235: ST_TO_ADDR
52236: GO 52267
// result := Replace ( result , result + 1 , un ) ;
52238: LD_ADDR_VAR 0 3
52242: PUSH
52243: LD_VAR 0 3
52247: PPUSH
52248: LD_VAR 0 3
52252: PUSH
52253: LD_INT 1
52255: PLUS
52256: PPUSH
52257: LD_VAR 0 4
52261: PPUSH
52262: CALL_OW 1
52266: ST_TO_ADDR
52267: GO 52193
52269: POP
52270: POP
// end ;
52271: LD_VAR 0 3
52275: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52276: LD_INT 0
52278: PPUSH
52279: PPUSH
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
52284: PPUSH
// result := [ ] ;
52285: LD_ADDR_VAR 0 4
52289: PUSH
52290: EMPTY
52291: ST_TO_ADDR
// if x - r < 0 then
52292: LD_VAR 0 1
52296: PUSH
52297: LD_VAR 0 3
52301: MINUS
52302: PUSH
52303: LD_INT 0
52305: LESS
52306: IFFALSE 52318
// min_x := 0 else
52308: LD_ADDR_VAR 0 8
52312: PUSH
52313: LD_INT 0
52315: ST_TO_ADDR
52316: GO 52334
// min_x := x - r ;
52318: LD_ADDR_VAR 0 8
52322: PUSH
52323: LD_VAR 0 1
52327: PUSH
52328: LD_VAR 0 3
52332: MINUS
52333: ST_TO_ADDR
// if y - r < 0 then
52334: LD_VAR 0 2
52338: PUSH
52339: LD_VAR 0 3
52343: MINUS
52344: PUSH
52345: LD_INT 0
52347: LESS
52348: IFFALSE 52360
// min_y := 0 else
52350: LD_ADDR_VAR 0 7
52354: PUSH
52355: LD_INT 0
52357: ST_TO_ADDR
52358: GO 52376
// min_y := y - r ;
52360: LD_ADDR_VAR 0 7
52364: PUSH
52365: LD_VAR 0 2
52369: PUSH
52370: LD_VAR 0 3
52374: MINUS
52375: ST_TO_ADDR
// max_x := x + r ;
52376: LD_ADDR_VAR 0 9
52380: PUSH
52381: LD_VAR 0 1
52385: PUSH
52386: LD_VAR 0 3
52390: PLUS
52391: ST_TO_ADDR
// max_y := y + r ;
52392: LD_ADDR_VAR 0 10
52396: PUSH
52397: LD_VAR 0 2
52401: PUSH
52402: LD_VAR 0 3
52406: PLUS
52407: ST_TO_ADDR
// for _x = min_x to max_x do
52408: LD_ADDR_VAR 0 5
52412: PUSH
52413: DOUBLE
52414: LD_VAR 0 8
52418: DEC
52419: ST_TO_ADDR
52420: LD_VAR 0 9
52424: PUSH
52425: FOR_TO
52426: IFFALSE 52527
// for _y = min_y to max_y do
52428: LD_ADDR_VAR 0 6
52432: PUSH
52433: DOUBLE
52434: LD_VAR 0 7
52438: DEC
52439: ST_TO_ADDR
52440: LD_VAR 0 10
52444: PUSH
52445: FOR_TO
52446: IFFALSE 52523
// begin if not ValidHex ( _x , _y ) then
52448: LD_VAR 0 5
52452: PPUSH
52453: LD_VAR 0 6
52457: PPUSH
52458: CALL_OW 488
52462: NOT
52463: IFFALSE 52467
// continue ;
52465: GO 52445
// if GetResourceTypeXY ( _x , _y ) then
52467: LD_VAR 0 5
52471: PPUSH
52472: LD_VAR 0 6
52476: PPUSH
52477: CALL_OW 283
52481: IFFALSE 52521
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52483: LD_ADDR_VAR 0 4
52487: PUSH
52488: LD_VAR 0 4
52492: PPUSH
52493: LD_VAR 0 4
52497: PUSH
52498: LD_INT 1
52500: PLUS
52501: PPUSH
52502: LD_VAR 0 5
52506: PUSH
52507: LD_VAR 0 6
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PPUSH
52516: CALL_OW 1
52520: ST_TO_ADDR
// end ;
52521: GO 52445
52523: POP
52524: POP
52525: GO 52425
52527: POP
52528: POP
// end ;
52529: LD_VAR 0 4
52533: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
52534: LD_INT 0
52536: PPUSH
52537: PPUSH
52538: PPUSH
52539: PPUSH
52540: PPUSH
52541: PPUSH
// if not units then
52542: LD_VAR 0 1
52546: NOT
52547: IFFALSE 52551
// exit ;
52549: GO 52933
// side := GetSide ( units [ 1 ] ) ;
52551: LD_ADDR_VAR 0 7
52555: PUSH
52556: LD_VAR 0 1
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: PPUSH
52565: CALL_OW 255
52569: ST_TO_ADDR
// for i in units do
52570: LD_ADDR_VAR 0 4
52574: PUSH
52575: LD_VAR 0 1
52579: PUSH
52580: FOR_IN
52581: IFFALSE 52931
// begin if IsOk ( i ) then
52583: LD_VAR 0 4
52587: PPUSH
52588: CALL_OW 302
52592: IFFALSE 52929
// begin tag := GetTag ( i ) + 1 ;
52594: LD_ADDR_VAR 0 8
52598: PUSH
52599: LD_VAR 0 4
52603: PPUSH
52604: CALL_OW 110
52608: PUSH
52609: LD_INT 1
52611: PLUS
52612: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52613: LD_ADDR_VAR 0 6
52617: PUSH
52618: LD_VAR 0 4
52622: PPUSH
52623: CALL_OW 250
52627: PPUSH
52628: LD_VAR 0 4
52632: PPUSH
52633: CALL_OW 251
52637: PPUSH
52638: LD_INT 6
52640: PPUSH
52641: CALL 52276 0 3
52645: ST_TO_ADDR
// if cr then
52646: LD_VAR 0 6
52650: IFFALSE 52689
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52652: LD_VAR 0 4
52656: PPUSH
52657: LD_VAR 0 6
52661: PUSH
52662: LD_INT 1
52664: ARRAY
52665: PUSH
52666: LD_INT 1
52668: ARRAY
52669: PPUSH
52670: LD_VAR 0 6
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PUSH
52679: LD_INT 2
52681: ARRAY
52682: PPUSH
52683: CALL_OW 116
52687: GO 52929
// if path > tag then
52689: LD_VAR 0 2
52693: PUSH
52694: LD_VAR 0 8
52698: GREATER
52699: IFFALSE 52877
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
52701: LD_ADDR_VAR 0 5
52705: PUSH
52706: LD_INT 81
52708: PUSH
52709: LD_VAR 0 7
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 91
52720: PUSH
52721: LD_VAR 0 4
52725: PUSH
52726: LD_INT 12
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PPUSH
52738: CALL_OW 69
52742: ST_TO_ADDR
// if enemy then
52743: LD_VAR 0 5
52747: IFFALSE 52775
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52749: LD_VAR 0 4
52753: PPUSH
52754: LD_VAR 0 5
52758: PPUSH
52759: LD_VAR 0 4
52763: PPUSH
52764: CALL_OW 74
52768: PPUSH
52769: CALL_OW 115
52773: GO 52875
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52775: LD_VAR 0 4
52779: PPUSH
52780: LD_VAR 0 2
52784: PUSH
52785: LD_VAR 0 8
52789: ARRAY
52790: PUSH
52791: LD_INT 1
52793: ARRAY
52794: PPUSH
52795: LD_VAR 0 2
52799: PUSH
52800: LD_VAR 0 8
52804: ARRAY
52805: PUSH
52806: LD_INT 2
52808: ARRAY
52809: PPUSH
52810: CALL_OW 297
52814: PUSH
52815: LD_INT 6
52817: GREATER
52818: IFFALSE 52861
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52820: LD_VAR 0 4
52824: PPUSH
52825: LD_VAR 0 2
52829: PUSH
52830: LD_VAR 0 8
52834: ARRAY
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: PPUSH
52840: LD_VAR 0 2
52844: PUSH
52845: LD_VAR 0 8
52849: ARRAY
52850: PUSH
52851: LD_INT 2
52853: ARRAY
52854: PPUSH
52855: CALL_OW 114
52859: GO 52875
// SetTag ( i , tag ) ;
52861: LD_VAR 0 4
52865: PPUSH
52866: LD_VAR 0 8
52870: PPUSH
52871: CALL_OW 109
// end else
52875: GO 52929
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52877: LD_ADDR_VAR 0 5
52881: PUSH
52882: LD_INT 81
52884: PUSH
52885: LD_VAR 0 7
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PPUSH
52894: CALL_OW 69
52898: ST_TO_ADDR
// if enemy then
52899: LD_VAR 0 5
52903: IFFALSE 52929
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52905: LD_VAR 0 4
52909: PPUSH
52910: LD_VAR 0 5
52914: PPUSH
52915: LD_VAR 0 4
52919: PPUSH
52920: CALL_OW 74
52924: PPUSH
52925: CALL_OW 115
// end ; end ; end ;
52929: GO 52580
52931: POP
52932: POP
// end ; end_of_file
52933: LD_VAR 0 3
52937: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52938: LD_VAR 0 1
52942: PUSH
52943: LD_INT 200
52945: DOUBLE
52946: GREATEREQUAL
52947: IFFALSE 52955
52949: LD_INT 299
52951: DOUBLE
52952: LESSEQUAL
52953: IFTRUE 52957
52955: GO 52989
52957: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52958: LD_VAR 0 1
52962: PPUSH
52963: LD_VAR 0 2
52967: PPUSH
52968: LD_VAR 0 3
52972: PPUSH
52973: LD_VAR 0 4
52977: PPUSH
52978: LD_VAR 0 5
52982: PPUSH
52983: CALL 53233 0 5
52987: GO 53066
52989: LD_INT 300
52991: DOUBLE
52992: GREATEREQUAL
52993: IFFALSE 53001
52995: LD_INT 399
52997: DOUBLE
52998: LESSEQUAL
52999: IFTRUE 53003
53001: GO 53065
53003: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53004: LD_VAR 0 1
53008: PPUSH
53009: LD_VAR 0 2
53013: PPUSH
53014: LD_VAR 0 3
53018: PPUSH
53019: LD_VAR 0 4
53023: PPUSH
53024: LD_VAR 0 5
53028: PPUSH
53029: LD_VAR 0 6
53033: PPUSH
53034: LD_VAR 0 7
53038: PPUSH
53039: LD_VAR 0 8
53043: PPUSH
53044: LD_VAR 0 9
53048: PPUSH
53049: LD_VAR 0 10
53053: PPUSH
53054: LD_VAR 0 11
53058: PPUSH
53059: CALL 68308 0 11
53063: GO 53066
53065: POP
// end ;
53066: PPOPN 11
53068: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53069: LD_VAR 0 1
53073: PPUSH
53074: LD_VAR 0 2
53078: PPUSH
53079: LD_VAR 0 3
53083: PPUSH
53084: LD_VAR 0 4
53088: PPUSH
53089: LD_VAR 0 5
53093: PPUSH
53094: CALL 53215 0 5
// end ; end_of_file
53098: PPOPN 5
53100: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
53101: LD_INT 0
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 264
53116: PUSH
53117: LD_EXP 100
53121: EQUAL
53122: IFFALSE 53194
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53124: LD_INT 68
53126: PPUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 255
53136: PPUSH
53137: CALL_OW 321
53141: PUSH
53142: LD_INT 2
53144: EQUAL
53145: IFFALSE 53157
// eff := 70 else
53147: LD_ADDR_VAR 0 4
53151: PUSH
53152: LD_INT 70
53154: ST_TO_ADDR
53155: GO 53165
// eff := 30 ;
53157: LD_ADDR_VAR 0 4
53161: PUSH
53162: LD_INT 30
53164: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 250
53174: PPUSH
53175: LD_VAR 0 1
53179: PPUSH
53180: CALL_OW 251
53184: PPUSH
53185: LD_VAR 0 4
53189: PPUSH
53190: CALL_OW 495
// end ; end ;
53194: LD_VAR 0 2
53198: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53199: LD_INT 0
53201: PPUSH
// end ;
53202: LD_VAR 0 4
53206: RET
// export function SOS_Command ( cmd ) ; begin
53207: LD_INT 0
53209: PPUSH
// end ;
53210: LD_VAR 0 2
53214: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53215: LD_INT 0
53217: PPUSH
// if cmd = 121 then
53218: LD_VAR 0 1
53222: PUSH
53223: LD_INT 121
53225: EQUAL
53226: IFFALSE 53228
// end ;
53228: LD_VAR 0 6
53232: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53233: LD_INT 0
53235: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53236: LD_VAR 0 1
53240: PUSH
53241: LD_INT 250
53243: EQUAL
53244: PUSH
53245: LD_VAR 0 2
53249: PPUSH
53250: CALL_OW 264
53254: PUSH
53255: LD_EXP 103
53259: EQUAL
53260: AND
53261: IFFALSE 53282
// MinerPlaceMine ( unit , x , y ) ;
53263: LD_VAR 0 2
53267: PPUSH
53268: LD_VAR 0 4
53272: PPUSH
53273: LD_VAR 0 5
53277: PPUSH
53278: CALL 55631 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53282: LD_VAR 0 1
53286: PUSH
53287: LD_INT 251
53289: EQUAL
53290: PUSH
53291: LD_VAR 0 2
53295: PPUSH
53296: CALL_OW 264
53300: PUSH
53301: LD_EXP 103
53305: EQUAL
53306: AND
53307: IFFALSE 53328
// MinerDetonateMine ( unit , x , y ) ;
53309: LD_VAR 0 2
53313: PPUSH
53314: LD_VAR 0 4
53318: PPUSH
53319: LD_VAR 0 5
53323: PPUSH
53324: CALL 55908 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53328: LD_VAR 0 1
53332: PUSH
53333: LD_INT 252
53335: EQUAL
53336: PUSH
53337: LD_VAR 0 2
53341: PPUSH
53342: CALL_OW 264
53346: PUSH
53347: LD_EXP 103
53351: EQUAL
53352: AND
53353: IFFALSE 53374
// MinerCreateMinefield ( unit , x , y ) ;
53355: LD_VAR 0 2
53359: PPUSH
53360: LD_VAR 0 4
53364: PPUSH
53365: LD_VAR 0 5
53369: PPUSH
53370: CALL 56325 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53374: LD_VAR 0 1
53378: PUSH
53379: LD_INT 253
53381: EQUAL
53382: PUSH
53383: LD_VAR 0 2
53387: PPUSH
53388: CALL_OW 257
53392: PUSH
53393: LD_INT 5
53395: EQUAL
53396: AND
53397: IFFALSE 53418
// ComBinocular ( unit , x , y ) ;
53399: LD_VAR 0 2
53403: PPUSH
53404: LD_VAR 0 4
53408: PPUSH
53409: LD_VAR 0 5
53413: PPUSH
53414: CALL 56696 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53418: LD_VAR 0 1
53422: PUSH
53423: LD_INT 254
53425: EQUAL
53426: PUSH
53427: LD_VAR 0 2
53431: PPUSH
53432: CALL_OW 264
53436: PUSH
53437: LD_EXP 98
53441: EQUAL
53442: AND
53443: PUSH
53444: LD_VAR 0 3
53448: PPUSH
53449: CALL_OW 263
53453: PUSH
53454: LD_INT 3
53456: EQUAL
53457: AND
53458: IFFALSE 53474
// HackDestroyVehicle ( unit , selectedUnit ) ;
53460: LD_VAR 0 2
53464: PPUSH
53465: LD_VAR 0 3
53469: PPUSH
53470: CALL 54991 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53474: LD_VAR 0 1
53478: PUSH
53479: LD_INT 255
53481: EQUAL
53482: PUSH
53483: LD_VAR 0 2
53487: PPUSH
53488: CALL_OW 264
53492: PUSH
53493: LD_INT 14
53495: PUSH
53496: LD_INT 53
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: IN
53503: AND
53504: PUSH
53505: LD_VAR 0 4
53509: PPUSH
53510: LD_VAR 0 5
53514: PPUSH
53515: CALL_OW 488
53519: AND
53520: IFFALSE 53544
// CutTreeXYR ( unit , x , y , 12 ) ;
53522: LD_VAR 0 2
53526: PPUSH
53527: LD_VAR 0 4
53531: PPUSH
53532: LD_VAR 0 5
53536: PPUSH
53537: LD_INT 12
53539: PPUSH
53540: CALL 53557 0 4
// end ;
53544: LD_VAR 0 6
53548: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
53549: LD_INT 0
53551: PPUSH
// end ;
53552: LD_VAR 0 4
53556: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53557: LD_INT 0
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
53568: LD_VAR 0 1
53572: NOT
53573: PUSH
53574: LD_VAR 0 2
53578: PPUSH
53579: LD_VAR 0 3
53583: PPUSH
53584: CALL_OW 488
53588: NOT
53589: OR
53590: PUSH
53591: LD_VAR 0 4
53595: NOT
53596: OR
53597: IFFALSE 53601
// exit ;
53599: GO 53941
// list := [ ] ;
53601: LD_ADDR_VAR 0 13
53605: PUSH
53606: EMPTY
53607: ST_TO_ADDR
// if x - r < 0 then
53608: LD_VAR 0 2
53612: PUSH
53613: LD_VAR 0 4
53617: MINUS
53618: PUSH
53619: LD_INT 0
53621: LESS
53622: IFFALSE 53634
// min_x := 0 else
53624: LD_ADDR_VAR 0 7
53628: PUSH
53629: LD_INT 0
53631: ST_TO_ADDR
53632: GO 53650
// min_x := x - r ;
53634: LD_ADDR_VAR 0 7
53638: PUSH
53639: LD_VAR 0 2
53643: PUSH
53644: LD_VAR 0 4
53648: MINUS
53649: ST_TO_ADDR
// if y - r < 0 then
53650: LD_VAR 0 3
53654: PUSH
53655: LD_VAR 0 4
53659: MINUS
53660: PUSH
53661: LD_INT 0
53663: LESS
53664: IFFALSE 53676
// min_y := 0 else
53666: LD_ADDR_VAR 0 8
53670: PUSH
53671: LD_INT 0
53673: ST_TO_ADDR
53674: GO 53692
// min_y := y - r ;
53676: LD_ADDR_VAR 0 8
53680: PUSH
53681: LD_VAR 0 3
53685: PUSH
53686: LD_VAR 0 4
53690: MINUS
53691: ST_TO_ADDR
// max_x := x + r ;
53692: LD_ADDR_VAR 0 9
53696: PUSH
53697: LD_VAR 0 2
53701: PUSH
53702: LD_VAR 0 4
53706: PLUS
53707: ST_TO_ADDR
// max_y := y + r ;
53708: LD_ADDR_VAR 0 10
53712: PUSH
53713: LD_VAR 0 3
53717: PUSH
53718: LD_VAR 0 4
53722: PLUS
53723: ST_TO_ADDR
// for _x = min_x to max_x do
53724: LD_ADDR_VAR 0 11
53728: PUSH
53729: DOUBLE
53730: LD_VAR 0 7
53734: DEC
53735: ST_TO_ADDR
53736: LD_VAR 0 9
53740: PUSH
53741: FOR_TO
53742: IFFALSE 53859
// for _y = min_y to max_y do
53744: LD_ADDR_VAR 0 12
53748: PUSH
53749: DOUBLE
53750: LD_VAR 0 8
53754: DEC
53755: ST_TO_ADDR
53756: LD_VAR 0 10
53760: PUSH
53761: FOR_TO
53762: IFFALSE 53855
// begin if not ValidHex ( _x , _y ) then
53764: LD_VAR 0 11
53768: PPUSH
53769: LD_VAR 0 12
53773: PPUSH
53774: CALL_OW 488
53778: NOT
53779: IFFALSE 53783
// continue ;
53781: GO 53761
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53783: LD_VAR 0 11
53787: PPUSH
53788: LD_VAR 0 12
53792: PPUSH
53793: CALL_OW 351
53797: PUSH
53798: LD_VAR 0 11
53802: PPUSH
53803: LD_VAR 0 12
53807: PPUSH
53808: CALL_OW 554
53812: AND
53813: IFFALSE 53853
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53815: LD_ADDR_VAR 0 13
53819: PUSH
53820: LD_VAR 0 13
53824: PPUSH
53825: LD_VAR 0 13
53829: PUSH
53830: LD_INT 1
53832: PLUS
53833: PPUSH
53834: LD_VAR 0 11
53838: PUSH
53839: LD_VAR 0 12
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PPUSH
53848: CALL_OW 2
53852: ST_TO_ADDR
// end ;
53853: GO 53761
53855: POP
53856: POP
53857: GO 53741
53859: POP
53860: POP
// if not list then
53861: LD_VAR 0 13
53865: NOT
53866: IFFALSE 53870
// exit ;
53868: GO 53941
// for i in list do
53870: LD_ADDR_VAR 0 6
53874: PUSH
53875: LD_VAR 0 13
53879: PUSH
53880: FOR_IN
53881: IFFALSE 53939
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53883: LD_VAR 0 1
53887: PPUSH
53888: LD_STRING M
53890: PUSH
53891: LD_VAR 0 6
53895: PUSH
53896: LD_INT 1
53898: ARRAY
53899: PUSH
53900: LD_VAR 0 6
53904: PUSH
53905: LD_INT 2
53907: ARRAY
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: PUSH
53930: EMPTY
53931: LIST
53932: PPUSH
53933: CALL_OW 447
53937: GO 53880
53939: POP
53940: POP
// end ;
53941: LD_VAR 0 5
53945: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
53946: LD_EXP 31
53950: NOT
53951: IFFALSE 54001
53953: GO 53955
53955: DISABLE
// begin initHack := true ;
53956: LD_ADDR_EXP 31
53960: PUSH
53961: LD_INT 1
53963: ST_TO_ADDR
// hackTanks := [ ] ;
53964: LD_ADDR_EXP 32
53968: PUSH
53969: EMPTY
53970: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
53971: LD_ADDR_EXP 33
53975: PUSH
53976: EMPTY
53977: ST_TO_ADDR
// hackLimit := 3 ;
53978: LD_ADDR_EXP 34
53982: PUSH
53983: LD_INT 3
53985: ST_TO_ADDR
// hackDist := 12 ;
53986: LD_ADDR_EXP 35
53990: PUSH
53991: LD_INT 12
53993: ST_TO_ADDR
// hackCounter := [ ] ;
53994: LD_ADDR_EXP 36
53998: PUSH
53999: EMPTY
54000: ST_TO_ADDR
// end ;
54001: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54002: LD_EXP 31
54006: PUSH
54007: LD_INT 34
54009: PUSH
54010: LD_EXP 98
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PPUSH
54019: CALL_OW 69
54023: AND
54024: IFFALSE 54279
54026: GO 54028
54028: DISABLE
54029: LD_INT 0
54031: PPUSH
54032: PPUSH
// begin enable ;
54033: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54034: LD_ADDR_VAR 0 1
54038: PUSH
54039: LD_INT 34
54041: PUSH
54042: LD_EXP 98
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PPUSH
54051: CALL_OW 69
54055: PUSH
54056: FOR_IN
54057: IFFALSE 54277
// begin if not i in hackTanks then
54059: LD_VAR 0 1
54063: PUSH
54064: LD_EXP 32
54068: IN
54069: NOT
54070: IFFALSE 54153
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54072: LD_ADDR_EXP 32
54076: PUSH
54077: LD_EXP 32
54081: PPUSH
54082: LD_EXP 32
54086: PUSH
54087: LD_INT 1
54089: PLUS
54090: PPUSH
54091: LD_VAR 0 1
54095: PPUSH
54096: CALL_OW 1
54100: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54101: LD_ADDR_EXP 33
54105: PUSH
54106: LD_EXP 33
54110: PPUSH
54111: LD_EXP 33
54115: PUSH
54116: LD_INT 1
54118: PLUS
54119: PPUSH
54120: EMPTY
54121: PPUSH
54122: CALL_OW 1
54126: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54127: LD_ADDR_EXP 36
54131: PUSH
54132: LD_EXP 36
54136: PPUSH
54137: LD_EXP 36
54141: PUSH
54142: LD_INT 1
54144: PLUS
54145: PPUSH
54146: EMPTY
54147: PPUSH
54148: CALL_OW 1
54152: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54153: LD_VAR 0 1
54157: PPUSH
54158: CALL_OW 302
54162: NOT
54163: IFFALSE 54176
// begin HackUnlinkAll ( i ) ;
54165: LD_VAR 0 1
54169: PPUSH
54170: CALL 54282 0 1
// continue ;
54174: GO 54056
// end ; HackCheckCapturedStatus ( i ) ;
54176: LD_VAR 0 1
54180: PPUSH
54181: CALL 54725 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54185: LD_ADDR_VAR 0 2
54189: PUSH
54190: LD_INT 81
54192: PUSH
54193: LD_VAR 0 1
54197: PPUSH
54198: CALL_OW 255
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 33
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 91
54219: PUSH
54220: LD_VAR 0 1
54224: PUSH
54225: LD_EXP 35
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 50
54237: PUSH
54238: EMPTY
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: PPUSH
54247: CALL_OW 69
54251: ST_TO_ADDR
// if not tmp then
54252: LD_VAR 0 2
54256: NOT
54257: IFFALSE 54261
// continue ;
54259: GO 54056
// HackLink ( i , tmp ) ;
54261: LD_VAR 0 1
54265: PPUSH
54266: LD_VAR 0 2
54270: PPUSH
54271: CALL 54418 0 2
// end ;
54275: GO 54056
54277: POP
54278: POP
// end ;
54279: PPOPN 2
54281: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54282: LD_INT 0
54284: PPUSH
54285: PPUSH
54286: PPUSH
// if not hack in hackTanks then
54287: LD_VAR 0 1
54291: PUSH
54292: LD_EXP 32
54296: IN
54297: NOT
54298: IFFALSE 54302
// exit ;
54300: GO 54413
// index := GetElementIndex ( hackTanks , hack ) ;
54302: LD_ADDR_VAR 0 4
54306: PUSH
54307: LD_EXP 32
54311: PPUSH
54312: LD_VAR 0 1
54316: PPUSH
54317: CALL 18173 0 2
54321: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54322: LD_EXP 33
54326: PUSH
54327: LD_VAR 0 4
54331: ARRAY
54332: IFFALSE 54413
// begin for i in hackTanksCaptured [ index ] do
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_EXP 33
54343: PUSH
54344: LD_VAR 0 4
54348: ARRAY
54349: PUSH
54350: FOR_IN
54351: IFFALSE 54377
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54353: LD_VAR 0 3
54357: PUSH
54358: LD_INT 1
54360: ARRAY
54361: PPUSH
54362: LD_VAR 0 3
54366: PUSH
54367: LD_INT 2
54369: ARRAY
54370: PPUSH
54371: CALL_OW 235
54375: GO 54350
54377: POP
54378: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54379: LD_ADDR_EXP 33
54383: PUSH
54384: LD_EXP 33
54388: PPUSH
54389: LD_VAR 0 4
54393: PPUSH
54394: EMPTY
54395: PPUSH
54396: CALL_OW 1
54400: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54401: LD_VAR 0 1
54405: PPUSH
54406: LD_INT 0
54408: PPUSH
54409: CALL_OW 505
// end ; end ;
54413: LD_VAR 0 2
54417: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54418: LD_INT 0
54420: PPUSH
54421: PPUSH
54422: PPUSH
// if not hack in hackTanks or not vehicles then
54423: LD_VAR 0 1
54427: PUSH
54428: LD_EXP 32
54432: IN
54433: NOT
54434: PUSH
54435: LD_VAR 0 2
54439: NOT
54440: OR
54441: IFFALSE 54445
// exit ;
54443: GO 54720
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54445: LD_ADDR_VAR 0 2
54449: PUSH
54450: LD_VAR 0 1
54454: PPUSH
54455: LD_VAR 0 2
54459: PPUSH
54460: LD_INT 1
54462: PPUSH
54463: LD_INT 1
54465: PPUSH
54466: CALL 18823 0 4
54470: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54471: LD_ADDR_VAR 0 5
54475: PUSH
54476: LD_EXP 32
54480: PPUSH
54481: LD_VAR 0 1
54485: PPUSH
54486: CALL 18173 0 2
54490: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54491: LD_EXP 33
54495: PUSH
54496: LD_VAR 0 5
54500: ARRAY
54501: PUSH
54502: LD_EXP 34
54506: LESS
54507: IFFALSE 54696
// begin for i := 1 to vehicles do
54509: LD_ADDR_VAR 0 4
54513: PUSH
54514: DOUBLE
54515: LD_INT 1
54517: DEC
54518: ST_TO_ADDR
54519: LD_VAR 0 2
54523: PUSH
54524: FOR_TO
54525: IFFALSE 54694
// begin if hackTanksCaptured [ index ] = hackLimit then
54527: LD_EXP 33
54531: PUSH
54532: LD_VAR 0 5
54536: ARRAY
54537: PUSH
54538: LD_EXP 34
54542: EQUAL
54543: IFFALSE 54547
// break ;
54545: GO 54694
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54547: LD_ADDR_EXP 36
54551: PUSH
54552: LD_EXP 36
54556: PPUSH
54557: LD_VAR 0 5
54561: PPUSH
54562: LD_EXP 36
54566: PUSH
54567: LD_VAR 0 5
54571: ARRAY
54572: PUSH
54573: LD_INT 1
54575: PLUS
54576: PPUSH
54577: CALL_OW 1
54581: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54582: LD_ADDR_EXP 33
54586: PUSH
54587: LD_EXP 33
54591: PPUSH
54592: LD_VAR 0 5
54596: PUSH
54597: LD_EXP 33
54601: PUSH
54602: LD_VAR 0 5
54606: ARRAY
54607: PUSH
54608: LD_INT 1
54610: PLUS
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PPUSH
54616: LD_VAR 0 2
54620: PUSH
54621: LD_VAR 0 4
54625: ARRAY
54626: PUSH
54627: LD_VAR 0 2
54631: PUSH
54632: LD_VAR 0 4
54636: ARRAY
54637: PPUSH
54638: CALL_OW 255
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PPUSH
54647: CALL 18388 0 3
54651: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54652: LD_VAR 0 2
54656: PUSH
54657: LD_VAR 0 4
54661: ARRAY
54662: PPUSH
54663: LD_VAR 0 1
54667: PPUSH
54668: CALL_OW 255
54672: PPUSH
54673: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54677: LD_VAR 0 2
54681: PUSH
54682: LD_VAR 0 4
54686: ARRAY
54687: PPUSH
54688: CALL_OW 141
// end ;
54692: GO 54524
54694: POP
54695: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54696: LD_VAR 0 1
54700: PPUSH
54701: LD_EXP 33
54705: PUSH
54706: LD_VAR 0 5
54710: ARRAY
54711: PUSH
54712: LD_INT 0
54714: PLUS
54715: PPUSH
54716: CALL_OW 505
// end ;
54720: LD_VAR 0 3
54724: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54725: LD_INT 0
54727: PPUSH
54728: PPUSH
54729: PPUSH
54730: PPUSH
// if not hack in hackTanks then
54731: LD_VAR 0 1
54735: PUSH
54736: LD_EXP 32
54740: IN
54741: NOT
54742: IFFALSE 54746
// exit ;
54744: GO 54986
// index := GetElementIndex ( hackTanks , hack ) ;
54746: LD_ADDR_VAR 0 4
54750: PUSH
54751: LD_EXP 32
54755: PPUSH
54756: LD_VAR 0 1
54760: PPUSH
54761: CALL 18173 0 2
54765: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54766: LD_ADDR_VAR 0 3
54770: PUSH
54771: DOUBLE
54772: LD_EXP 33
54776: PUSH
54777: LD_VAR 0 4
54781: ARRAY
54782: INC
54783: ST_TO_ADDR
54784: LD_INT 1
54786: PUSH
54787: FOR_DOWNTO
54788: IFFALSE 54960
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54790: LD_ADDR_VAR 0 5
54794: PUSH
54795: LD_EXP 33
54799: PUSH
54800: LD_VAR 0 4
54804: ARRAY
54805: PUSH
54806: LD_VAR 0 3
54810: ARRAY
54811: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
54812: LD_VAR 0 5
54816: PUSH
54817: LD_INT 1
54819: ARRAY
54820: PPUSH
54821: CALL_OW 302
54825: NOT
54826: PUSH
54827: LD_VAR 0 5
54831: PUSH
54832: LD_INT 1
54834: ARRAY
54835: PPUSH
54836: CALL_OW 255
54840: PUSH
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 255
54850: NONEQUAL
54851: OR
54852: IFFALSE 54958
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
54854: LD_VAR 0 5
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PPUSH
54863: CALL_OW 305
54867: PUSH
54868: LD_VAR 0 5
54872: PUSH
54873: LD_INT 1
54875: ARRAY
54876: PPUSH
54877: CALL_OW 255
54881: PUSH
54882: LD_VAR 0 1
54886: PPUSH
54887: CALL_OW 255
54891: EQUAL
54892: AND
54893: IFFALSE 54917
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
54895: LD_VAR 0 5
54899: PUSH
54900: LD_INT 1
54902: ARRAY
54903: PPUSH
54904: LD_VAR 0 5
54908: PUSH
54909: LD_INT 2
54911: ARRAY
54912: PPUSH
54913: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
54917: LD_ADDR_EXP 33
54921: PUSH
54922: LD_EXP 33
54926: PPUSH
54927: LD_VAR 0 4
54931: PPUSH
54932: LD_EXP 33
54936: PUSH
54937: LD_VAR 0 4
54941: ARRAY
54942: PPUSH
54943: LD_VAR 0 3
54947: PPUSH
54948: CALL_OW 3
54952: PPUSH
54953: CALL_OW 1
54957: ST_TO_ADDR
// end ; end ;
54958: GO 54787
54960: POP
54961: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54962: LD_VAR 0 1
54966: PPUSH
54967: LD_EXP 33
54971: PUSH
54972: LD_VAR 0 4
54976: ARRAY
54977: PUSH
54978: LD_INT 0
54980: PLUS
54981: PPUSH
54982: CALL_OW 505
// end ;
54986: LD_VAR 0 2
54990: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
54991: LD_INT 0
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
// if not hack in hackTanks then
54997: LD_VAR 0 1
55001: PUSH
55002: LD_EXP 32
55006: IN
55007: NOT
55008: IFFALSE 55012
// exit ;
55010: GO 55097
// index := GetElementIndex ( hackTanks , hack ) ;
55012: LD_ADDR_VAR 0 5
55016: PUSH
55017: LD_EXP 32
55021: PPUSH
55022: LD_VAR 0 1
55026: PPUSH
55027: CALL 18173 0 2
55031: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55032: LD_ADDR_VAR 0 4
55036: PUSH
55037: DOUBLE
55038: LD_INT 1
55040: DEC
55041: ST_TO_ADDR
55042: LD_EXP 33
55046: PUSH
55047: LD_VAR 0 5
55051: ARRAY
55052: PUSH
55053: FOR_TO
55054: IFFALSE 55095
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55056: LD_EXP 33
55060: PUSH
55061: LD_VAR 0 5
55065: ARRAY
55066: PUSH
55067: LD_VAR 0 4
55071: ARRAY
55072: PUSH
55073: LD_INT 1
55075: ARRAY
55076: PUSH
55077: LD_VAR 0 2
55081: EQUAL
55082: IFFALSE 55093
// KillUnit ( vehicle ) ;
55084: LD_VAR 0 2
55088: PPUSH
55089: CALL_OW 66
55093: GO 55053
55095: POP
55096: POP
// end ;
55097: LD_VAR 0 3
55101: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55102: LD_EXP 37
55106: NOT
55107: IFFALSE 55142
55109: GO 55111
55111: DISABLE
// begin initMiner := true ;
55112: LD_ADDR_EXP 37
55116: PUSH
55117: LD_INT 1
55119: ST_TO_ADDR
// minersList := [ ] ;
55120: LD_ADDR_EXP 38
55124: PUSH
55125: EMPTY
55126: ST_TO_ADDR
// minerMinesList := [ ] ;
55127: LD_ADDR_EXP 39
55131: PUSH
55132: EMPTY
55133: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55134: LD_ADDR_EXP 40
55138: PUSH
55139: LD_INT 5
55141: ST_TO_ADDR
// end ;
55142: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55143: LD_EXP 37
55147: PUSH
55148: LD_INT 34
55150: PUSH
55151: LD_EXP 103
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PPUSH
55160: CALL_OW 69
55164: AND
55165: IFFALSE 55628
55167: GO 55169
55169: DISABLE
55170: LD_INT 0
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
// begin enable ;
55176: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55177: LD_ADDR_VAR 0 1
55181: PUSH
55182: LD_INT 34
55184: PUSH
55185: LD_EXP 103
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PPUSH
55194: CALL_OW 69
55198: PUSH
55199: FOR_IN
55200: IFFALSE 55272
// begin if not i in minersList then
55202: LD_VAR 0 1
55206: PUSH
55207: LD_EXP 38
55211: IN
55212: NOT
55213: IFFALSE 55270
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55215: LD_ADDR_EXP 38
55219: PUSH
55220: LD_EXP 38
55224: PPUSH
55225: LD_EXP 38
55229: PUSH
55230: LD_INT 1
55232: PLUS
55233: PPUSH
55234: LD_VAR 0 1
55238: PPUSH
55239: CALL_OW 1
55243: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55244: LD_ADDR_EXP 39
55248: PUSH
55249: LD_EXP 39
55253: PPUSH
55254: LD_EXP 39
55258: PUSH
55259: LD_INT 1
55261: PLUS
55262: PPUSH
55263: EMPTY
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// end end ;
55270: GO 55199
55272: POP
55273: POP
// for i := minerMinesList downto 1 do
55274: LD_ADDR_VAR 0 1
55278: PUSH
55279: DOUBLE
55280: LD_EXP 39
55284: INC
55285: ST_TO_ADDR
55286: LD_INT 1
55288: PUSH
55289: FOR_DOWNTO
55290: IFFALSE 55626
// begin if IsLive ( minersList [ i ] ) then
55292: LD_EXP 38
55296: PUSH
55297: LD_VAR 0 1
55301: ARRAY
55302: PPUSH
55303: CALL_OW 300
55307: IFFALSE 55335
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55309: LD_EXP 38
55313: PUSH
55314: LD_VAR 0 1
55318: ARRAY
55319: PPUSH
55320: LD_EXP 39
55324: PUSH
55325: LD_VAR 0 1
55329: ARRAY
55330: PPUSH
55331: CALL_OW 505
// if not minerMinesList [ i ] then
55335: LD_EXP 39
55339: PUSH
55340: LD_VAR 0 1
55344: ARRAY
55345: NOT
55346: IFFALSE 55350
// continue ;
55348: GO 55289
// for j := minerMinesList [ i ] downto 1 do
55350: LD_ADDR_VAR 0 2
55354: PUSH
55355: DOUBLE
55356: LD_EXP 39
55360: PUSH
55361: LD_VAR 0 1
55365: ARRAY
55366: INC
55367: ST_TO_ADDR
55368: LD_INT 1
55370: PUSH
55371: FOR_DOWNTO
55372: IFFALSE 55622
// begin side := GetSide ( minersList [ i ] ) ;
55374: LD_ADDR_VAR 0 3
55378: PUSH
55379: LD_EXP 38
55383: PUSH
55384: LD_VAR 0 1
55388: ARRAY
55389: PPUSH
55390: CALL_OW 255
55394: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55395: LD_ADDR_VAR 0 4
55399: PUSH
55400: LD_EXP 39
55404: PUSH
55405: LD_VAR 0 1
55409: ARRAY
55410: PUSH
55411: LD_VAR 0 2
55415: ARRAY
55416: PUSH
55417: LD_INT 1
55419: ARRAY
55420: PPUSH
55421: LD_EXP 39
55425: PUSH
55426: LD_VAR 0 1
55430: ARRAY
55431: PUSH
55432: LD_VAR 0 2
55436: ARRAY
55437: PUSH
55438: LD_INT 2
55440: ARRAY
55441: PPUSH
55442: CALL_OW 428
55446: ST_TO_ADDR
// if not tmp then
55447: LD_VAR 0 4
55451: NOT
55452: IFFALSE 55456
// continue ;
55454: GO 55371
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55456: LD_VAR 0 4
55460: PUSH
55461: LD_INT 81
55463: PUSH
55464: LD_VAR 0 3
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PPUSH
55473: CALL_OW 69
55477: IN
55478: PUSH
55479: LD_EXP 39
55483: PUSH
55484: LD_VAR 0 1
55488: ARRAY
55489: PUSH
55490: LD_VAR 0 2
55494: ARRAY
55495: PUSH
55496: LD_INT 1
55498: ARRAY
55499: PPUSH
55500: LD_EXP 39
55504: PUSH
55505: LD_VAR 0 1
55509: ARRAY
55510: PUSH
55511: LD_VAR 0 2
55515: ARRAY
55516: PUSH
55517: LD_INT 2
55519: ARRAY
55520: PPUSH
55521: CALL_OW 458
55525: AND
55526: IFFALSE 55620
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55528: LD_EXP 39
55532: PUSH
55533: LD_VAR 0 1
55537: ARRAY
55538: PUSH
55539: LD_VAR 0 2
55543: ARRAY
55544: PUSH
55545: LD_INT 1
55547: ARRAY
55548: PPUSH
55549: LD_EXP 39
55553: PUSH
55554: LD_VAR 0 1
55558: ARRAY
55559: PUSH
55560: LD_VAR 0 2
55564: ARRAY
55565: PUSH
55566: LD_INT 2
55568: ARRAY
55569: PPUSH
55570: LD_VAR 0 3
55574: PPUSH
55575: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55579: LD_ADDR_EXP 39
55583: PUSH
55584: LD_EXP 39
55588: PPUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: LD_EXP 39
55598: PUSH
55599: LD_VAR 0 1
55603: ARRAY
55604: PPUSH
55605: LD_VAR 0 2
55609: PPUSH
55610: CALL_OW 3
55614: PPUSH
55615: CALL_OW 1
55619: ST_TO_ADDR
// end ; end ;
55620: GO 55371
55622: POP
55623: POP
// end ;
55624: GO 55289
55626: POP
55627: POP
// end ;
55628: PPOPN 4
55630: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55631: LD_INT 0
55633: PPUSH
55634: PPUSH
// result := false ;
55635: LD_ADDR_VAR 0 4
55639: PUSH
55640: LD_INT 0
55642: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55643: LD_VAR 0 1
55647: PPUSH
55648: CALL_OW 264
55652: PUSH
55653: LD_EXP 103
55657: EQUAL
55658: NOT
55659: IFFALSE 55663
// exit ;
55661: GO 55903
// index := GetElementIndex ( minersList , unit ) ;
55663: LD_ADDR_VAR 0 5
55667: PUSH
55668: LD_EXP 38
55672: PPUSH
55673: LD_VAR 0 1
55677: PPUSH
55678: CALL 18173 0 2
55682: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55683: LD_EXP 39
55687: PUSH
55688: LD_VAR 0 5
55692: ARRAY
55693: PUSH
55694: LD_EXP 40
55698: GREATEREQUAL
55699: IFFALSE 55703
// exit ;
55701: GO 55903
// ComMoveXY ( unit , x , y ) ;
55703: LD_VAR 0 1
55707: PPUSH
55708: LD_VAR 0 2
55712: PPUSH
55713: LD_VAR 0 3
55717: PPUSH
55718: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55722: LD_INT 35
55724: PPUSH
55725: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55729: LD_VAR 0 1
55733: PPUSH
55734: LD_VAR 0 2
55738: PPUSH
55739: LD_VAR 0 3
55743: PPUSH
55744: CALL 48945 0 3
55748: NOT
55749: PUSH
55750: LD_VAR 0 1
55754: PPUSH
55755: CALL_OW 314
55759: AND
55760: IFFALSE 55764
// exit ;
55762: GO 55903
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55764: LD_VAR 0 2
55768: PPUSH
55769: LD_VAR 0 3
55773: PPUSH
55774: CALL_OW 428
55778: PUSH
55779: LD_VAR 0 1
55783: EQUAL
55784: PUSH
55785: LD_VAR 0 1
55789: PPUSH
55790: CALL_OW 314
55794: NOT
55795: AND
55796: IFFALSE 55722
// PlaySoundXY ( x , y , PlantMine ) ;
55798: LD_VAR 0 2
55802: PPUSH
55803: LD_VAR 0 3
55807: PPUSH
55808: LD_STRING PlantMine
55810: PPUSH
55811: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
55815: LD_VAR 0 2
55819: PPUSH
55820: LD_VAR 0 3
55824: PPUSH
55825: LD_VAR 0 1
55829: PPUSH
55830: CALL_OW 255
55834: PPUSH
55835: LD_INT 0
55837: PPUSH
55838: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
55842: LD_ADDR_EXP 39
55846: PUSH
55847: LD_EXP 39
55851: PPUSH
55852: LD_VAR 0 5
55856: PUSH
55857: LD_EXP 39
55861: PUSH
55862: LD_VAR 0 5
55866: ARRAY
55867: PUSH
55868: LD_INT 1
55870: PLUS
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PPUSH
55876: LD_VAR 0 2
55880: PUSH
55881: LD_VAR 0 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PPUSH
55890: CALL 18388 0 3
55894: ST_TO_ADDR
// result := true ;
55895: LD_ADDR_VAR 0 4
55899: PUSH
55900: LD_INT 1
55902: ST_TO_ADDR
// end ;
55903: LD_VAR 0 4
55907: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
55908: LD_INT 0
55910: PPUSH
55911: PPUSH
55912: PPUSH
// if not unit in minersList then
55913: LD_VAR 0 1
55917: PUSH
55918: LD_EXP 38
55922: IN
55923: NOT
55924: IFFALSE 55928
// exit ;
55926: GO 56320
// index := GetElementIndex ( minersList , unit ) ;
55928: LD_ADDR_VAR 0 6
55932: PUSH
55933: LD_EXP 38
55937: PPUSH
55938: LD_VAR 0 1
55942: PPUSH
55943: CALL 18173 0 2
55947: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
55948: LD_ADDR_VAR 0 5
55952: PUSH
55953: DOUBLE
55954: LD_EXP 39
55958: PUSH
55959: LD_VAR 0 6
55963: ARRAY
55964: INC
55965: ST_TO_ADDR
55966: LD_INT 1
55968: PUSH
55969: FOR_DOWNTO
55970: IFFALSE 56131
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
55972: LD_EXP 39
55976: PUSH
55977: LD_VAR 0 6
55981: ARRAY
55982: PUSH
55983: LD_VAR 0 5
55987: ARRAY
55988: PUSH
55989: LD_INT 1
55991: ARRAY
55992: PUSH
55993: LD_VAR 0 2
55997: EQUAL
55998: PUSH
55999: LD_EXP 39
56003: PUSH
56004: LD_VAR 0 6
56008: ARRAY
56009: PUSH
56010: LD_VAR 0 5
56014: ARRAY
56015: PUSH
56016: LD_INT 2
56018: ARRAY
56019: PUSH
56020: LD_VAR 0 3
56024: EQUAL
56025: AND
56026: IFFALSE 56129
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56028: LD_EXP 39
56032: PUSH
56033: LD_VAR 0 6
56037: ARRAY
56038: PUSH
56039: LD_VAR 0 5
56043: ARRAY
56044: PUSH
56045: LD_INT 1
56047: ARRAY
56048: PPUSH
56049: LD_EXP 39
56053: PUSH
56054: LD_VAR 0 6
56058: ARRAY
56059: PUSH
56060: LD_VAR 0 5
56064: ARRAY
56065: PUSH
56066: LD_INT 2
56068: ARRAY
56069: PPUSH
56070: LD_VAR 0 1
56074: PPUSH
56075: CALL_OW 255
56079: PPUSH
56080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56084: LD_ADDR_EXP 39
56088: PUSH
56089: LD_EXP 39
56093: PPUSH
56094: LD_VAR 0 6
56098: PPUSH
56099: LD_EXP 39
56103: PUSH
56104: LD_VAR 0 6
56108: ARRAY
56109: PPUSH
56110: LD_VAR 0 5
56114: PPUSH
56115: CALL_OW 3
56119: PPUSH
56120: CALL_OW 1
56124: ST_TO_ADDR
// exit ;
56125: POP
56126: POP
56127: GO 56320
// end ; end ;
56129: GO 55969
56131: POP
56132: POP
// for i := minerMinesList [ index ] downto 1 do
56133: LD_ADDR_VAR 0 5
56137: PUSH
56138: DOUBLE
56139: LD_EXP 39
56143: PUSH
56144: LD_VAR 0 6
56148: ARRAY
56149: INC
56150: ST_TO_ADDR
56151: LD_INT 1
56153: PUSH
56154: FOR_DOWNTO
56155: IFFALSE 56318
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56157: LD_EXP 39
56161: PUSH
56162: LD_VAR 0 6
56166: ARRAY
56167: PUSH
56168: LD_VAR 0 5
56172: ARRAY
56173: PUSH
56174: LD_INT 1
56176: ARRAY
56177: PPUSH
56178: LD_EXP 39
56182: PUSH
56183: LD_VAR 0 6
56187: ARRAY
56188: PUSH
56189: LD_VAR 0 5
56193: ARRAY
56194: PUSH
56195: LD_INT 2
56197: ARRAY
56198: PPUSH
56199: LD_VAR 0 2
56203: PPUSH
56204: LD_VAR 0 3
56208: PPUSH
56209: CALL_OW 298
56213: PUSH
56214: LD_INT 6
56216: LESS
56217: IFFALSE 56316
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56219: LD_EXP 39
56223: PUSH
56224: LD_VAR 0 6
56228: ARRAY
56229: PUSH
56230: LD_VAR 0 5
56234: ARRAY
56235: PUSH
56236: LD_INT 1
56238: ARRAY
56239: PPUSH
56240: LD_EXP 39
56244: PUSH
56245: LD_VAR 0 6
56249: ARRAY
56250: PUSH
56251: LD_VAR 0 5
56255: ARRAY
56256: PUSH
56257: LD_INT 2
56259: ARRAY
56260: PPUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 255
56270: PPUSH
56271: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56275: LD_ADDR_EXP 39
56279: PUSH
56280: LD_EXP 39
56284: PPUSH
56285: LD_VAR 0 6
56289: PPUSH
56290: LD_EXP 39
56294: PUSH
56295: LD_VAR 0 6
56299: ARRAY
56300: PPUSH
56301: LD_VAR 0 5
56305: PPUSH
56306: CALL_OW 3
56310: PPUSH
56311: CALL_OW 1
56315: ST_TO_ADDR
// end ; end ;
56316: GO 56154
56318: POP
56319: POP
// end ;
56320: LD_VAR 0 4
56324: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56325: LD_INT 0
56327: PPUSH
56328: PPUSH
56329: PPUSH
56330: PPUSH
56331: PPUSH
56332: PPUSH
56333: PPUSH
56334: PPUSH
56335: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56336: LD_VAR 0 1
56340: PPUSH
56341: CALL_OW 264
56345: PUSH
56346: LD_EXP 103
56350: EQUAL
56351: NOT
56352: PUSH
56353: LD_VAR 0 1
56357: PUSH
56358: LD_EXP 38
56362: IN
56363: NOT
56364: OR
56365: IFFALSE 56369
// exit ;
56367: GO 56691
// index := GetElementIndex ( minersList , unit ) ;
56369: LD_ADDR_VAR 0 6
56373: PUSH
56374: LD_EXP 38
56378: PPUSH
56379: LD_VAR 0 1
56383: PPUSH
56384: CALL 18173 0 2
56388: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56389: LD_ADDR_VAR 0 8
56393: PUSH
56394: LD_EXP 40
56398: PUSH
56399: LD_EXP 39
56403: PUSH
56404: LD_VAR 0 6
56408: ARRAY
56409: MINUS
56410: ST_TO_ADDR
// if not minesFreeAmount then
56411: LD_VAR 0 8
56415: NOT
56416: IFFALSE 56420
// exit ;
56418: GO 56691
// tmp := [ ] ;
56420: LD_ADDR_VAR 0 7
56424: PUSH
56425: EMPTY
56426: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56427: LD_ADDR_VAR 0 5
56431: PUSH
56432: DOUBLE
56433: LD_INT 1
56435: DEC
56436: ST_TO_ADDR
56437: LD_VAR 0 8
56441: PUSH
56442: FOR_TO
56443: IFFALSE 56638
// begin _d := rand ( 0 , 5 ) ;
56445: LD_ADDR_VAR 0 11
56449: PUSH
56450: LD_INT 0
56452: PPUSH
56453: LD_INT 5
56455: PPUSH
56456: CALL_OW 12
56460: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56461: LD_ADDR_VAR 0 12
56465: PUSH
56466: LD_INT 2
56468: PPUSH
56469: LD_INT 6
56471: PPUSH
56472: CALL_OW 12
56476: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56477: LD_ADDR_VAR 0 9
56481: PUSH
56482: LD_VAR 0 2
56486: PPUSH
56487: LD_VAR 0 11
56491: PPUSH
56492: LD_VAR 0 12
56496: PPUSH
56497: CALL_OW 272
56501: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56502: LD_ADDR_VAR 0 10
56506: PUSH
56507: LD_VAR 0 3
56511: PPUSH
56512: LD_VAR 0 11
56516: PPUSH
56517: LD_VAR 0 12
56521: PPUSH
56522: CALL_OW 273
56526: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56527: LD_VAR 0 9
56531: PPUSH
56532: LD_VAR 0 10
56536: PPUSH
56537: CALL_OW 488
56541: PUSH
56542: LD_VAR 0 9
56546: PUSH
56547: LD_VAR 0 10
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_VAR 0 7
56560: IN
56561: NOT
56562: AND
56563: PUSH
56564: LD_VAR 0 9
56568: PPUSH
56569: LD_VAR 0 10
56573: PPUSH
56574: CALL_OW 458
56578: NOT
56579: AND
56580: IFFALSE 56622
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56582: LD_ADDR_VAR 0 7
56586: PUSH
56587: LD_VAR 0 7
56591: PPUSH
56592: LD_VAR 0 7
56596: PUSH
56597: LD_INT 1
56599: PLUS
56600: PPUSH
56601: LD_VAR 0 9
56605: PUSH
56606: LD_VAR 0 10
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PPUSH
56615: CALL_OW 1
56619: ST_TO_ADDR
56620: GO 56636
// i := i - 1 ;
56622: LD_ADDR_VAR 0 5
56626: PUSH
56627: LD_VAR 0 5
56631: PUSH
56632: LD_INT 1
56634: MINUS
56635: ST_TO_ADDR
// end ;
56636: GO 56442
56638: POP
56639: POP
// for i in tmp do
56640: LD_ADDR_VAR 0 5
56644: PUSH
56645: LD_VAR 0 7
56649: PUSH
56650: FOR_IN
56651: IFFALSE 56689
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56653: LD_VAR 0 1
56657: PPUSH
56658: LD_VAR 0 5
56662: PUSH
56663: LD_INT 1
56665: ARRAY
56666: PPUSH
56667: LD_VAR 0 5
56671: PUSH
56672: LD_INT 2
56674: ARRAY
56675: PPUSH
56676: CALL 55631 0 3
56680: NOT
56681: IFFALSE 56687
// exit ;
56683: POP
56684: POP
56685: GO 56691
56687: GO 56650
56689: POP
56690: POP
// end ;
56691: LD_VAR 0 4
56695: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
56696: LD_INT 0
56698: PPUSH
56699: PPUSH
56700: PPUSH
56701: PPUSH
56702: PPUSH
56703: PPUSH
56704: PPUSH
// if not GetClass ( unit ) = class_sniper then
56705: LD_VAR 0 1
56709: PPUSH
56710: CALL_OW 257
56714: PUSH
56715: LD_INT 5
56717: EQUAL
56718: NOT
56719: IFFALSE 56723
// exit ;
56721: GO 57111
// dist := 8 ;
56723: LD_ADDR_VAR 0 5
56727: PUSH
56728: LD_INT 8
56730: ST_TO_ADDR
// viewRange := 12 ;
56731: LD_ADDR_VAR 0 7
56735: PUSH
56736: LD_INT 12
56738: ST_TO_ADDR
// side := GetSide ( unit ) ;
56739: LD_ADDR_VAR 0 6
56743: PUSH
56744: LD_VAR 0 1
56748: PPUSH
56749: CALL_OW 255
56753: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56754: LD_INT 61
56756: PPUSH
56757: LD_VAR 0 6
56761: PPUSH
56762: CALL_OW 321
56766: PUSH
56767: LD_INT 2
56769: EQUAL
56770: IFFALSE 56780
// viewRange := 16 ;
56772: LD_ADDR_VAR 0 7
56776: PUSH
56777: LD_INT 16
56779: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56780: LD_VAR 0 1
56784: PPUSH
56785: LD_VAR 0 2
56789: PPUSH
56790: LD_VAR 0 3
56794: PPUSH
56795: CALL_OW 297
56799: PUSH
56800: LD_VAR 0 5
56804: GREATER
56805: IFFALSE 56884
// begin ComMoveXY ( unit , x , y ) ;
56807: LD_VAR 0 1
56811: PPUSH
56812: LD_VAR 0 2
56816: PPUSH
56817: LD_VAR 0 3
56821: PPUSH
56822: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56826: LD_INT 35
56828: PPUSH
56829: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
56833: LD_VAR 0 1
56837: PPUSH
56838: LD_VAR 0 2
56842: PPUSH
56843: LD_VAR 0 3
56847: PPUSH
56848: CALL 48945 0 3
56852: NOT
56853: IFFALSE 56857
// exit ;
56855: GO 57111
// until GetDistUnitXY ( unit , x , y ) < dist ;
56857: LD_VAR 0 1
56861: PPUSH
56862: LD_VAR 0 2
56866: PPUSH
56867: LD_VAR 0 3
56871: PPUSH
56872: CALL_OW 297
56876: PUSH
56877: LD_VAR 0 5
56881: LESS
56882: IFFALSE 56826
// end ; ComTurnXY ( unit , x , y ) ;
56884: LD_VAR 0 1
56888: PPUSH
56889: LD_VAR 0 2
56893: PPUSH
56894: LD_VAR 0 3
56898: PPUSH
56899: CALL_OW 118
// wait ( 5 ) ;
56903: LD_INT 5
56905: PPUSH
56906: CALL_OW 67
// _d := GetDir ( unit ) ;
56910: LD_ADDR_VAR 0 10
56914: PUSH
56915: LD_VAR 0 1
56919: PPUSH
56920: CALL_OW 254
56924: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
56925: LD_ADDR_VAR 0 8
56929: PUSH
56930: LD_VAR 0 1
56934: PPUSH
56935: CALL_OW 250
56939: PPUSH
56940: LD_VAR 0 10
56944: PPUSH
56945: LD_VAR 0 5
56949: PPUSH
56950: CALL_OW 272
56954: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
56955: LD_ADDR_VAR 0 9
56959: PUSH
56960: LD_VAR 0 1
56964: PPUSH
56965: CALL_OW 251
56969: PPUSH
56970: LD_VAR 0 10
56974: PPUSH
56975: LD_VAR 0 5
56979: PPUSH
56980: CALL_OW 273
56984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56985: LD_VAR 0 8
56989: PPUSH
56990: LD_VAR 0 9
56994: PPUSH
56995: CALL_OW 488
56999: NOT
57000: IFFALSE 57004
// exit ;
57002: GO 57111
// ComAnimCustom ( unit , 1 ) ;
57004: LD_VAR 0 1
57008: PPUSH
57009: LD_INT 1
57011: PPUSH
57012: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57016: LD_VAR 0 8
57020: PPUSH
57021: LD_VAR 0 9
57025: PPUSH
57026: LD_VAR 0 6
57030: PPUSH
57031: LD_VAR 0 7
57035: PPUSH
57036: CALL_OW 330
// repeat wait ( 1 ) ;
57040: LD_INT 1
57042: PPUSH
57043: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
57047: LD_VAR 0 1
57051: PPUSH
57052: CALL_OW 316
57056: PUSH
57057: LD_VAR 0 1
57061: PPUSH
57062: CALL_OW 314
57066: OR
57067: PUSH
57068: LD_VAR 0 1
57072: PPUSH
57073: CALL_OW 302
57077: NOT
57078: OR
57079: PUSH
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 301
57089: OR
57090: IFFALSE 57040
// RemoveSeeing ( _x , _y , side ) ;
57092: LD_VAR 0 8
57096: PPUSH
57097: LD_VAR 0 9
57101: PPUSH
57102: LD_VAR 0 6
57106: PPUSH
57107: CALL_OW 331
// end ; end_of_file
57111: LD_VAR 0 4
57115: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57116: LD_INT 0
57118: PPUSH
// if p2 = 100 then
57119: LD_VAR 0 2
57123: PUSH
57124: LD_INT 100
57126: EQUAL
57127: IFFALSE 58076
// begin if not StreamModeActive then
57129: LD_EXP 41
57133: NOT
57134: IFFALSE 57144
// StreamModeActive := true ;
57136: LD_ADDR_EXP 41
57140: PUSH
57141: LD_INT 1
57143: ST_TO_ADDR
// if p3 = 0 then
57144: LD_VAR 0 3
57148: PUSH
57149: LD_INT 0
57151: EQUAL
57152: IFFALSE 57158
// InitStreamMode ;
57154: CALL 58236 0 0
// if p3 = 1 then
57158: LD_VAR 0 3
57162: PUSH
57163: LD_INT 1
57165: EQUAL
57166: IFFALSE 57176
// sRocket := true ;
57168: LD_ADDR_EXP 46
57172: PUSH
57173: LD_INT 1
57175: ST_TO_ADDR
// if p3 = 2 then
57176: LD_VAR 0 3
57180: PUSH
57181: LD_INT 2
57183: EQUAL
57184: IFFALSE 57194
// sSpeed := true ;
57186: LD_ADDR_EXP 45
57190: PUSH
57191: LD_INT 1
57193: ST_TO_ADDR
// if p3 = 3 then
57194: LD_VAR 0 3
57198: PUSH
57199: LD_INT 3
57201: EQUAL
57202: IFFALSE 57212
// sEngine := true ;
57204: LD_ADDR_EXP 47
57208: PUSH
57209: LD_INT 1
57211: ST_TO_ADDR
// if p3 = 4 then
57212: LD_VAR 0 3
57216: PUSH
57217: LD_INT 4
57219: EQUAL
57220: IFFALSE 57230
// sSpec := true ;
57222: LD_ADDR_EXP 44
57226: PUSH
57227: LD_INT 1
57229: ST_TO_ADDR
// if p3 = 5 then
57230: LD_VAR 0 3
57234: PUSH
57235: LD_INT 5
57237: EQUAL
57238: IFFALSE 57248
// sLevel := true ;
57240: LD_ADDR_EXP 48
57244: PUSH
57245: LD_INT 1
57247: ST_TO_ADDR
// if p3 = 6 then
57248: LD_VAR 0 3
57252: PUSH
57253: LD_INT 6
57255: EQUAL
57256: IFFALSE 57266
// sArmoury := true ;
57258: LD_ADDR_EXP 49
57262: PUSH
57263: LD_INT 1
57265: ST_TO_ADDR
// if p3 = 7 then
57266: LD_VAR 0 3
57270: PUSH
57271: LD_INT 7
57273: EQUAL
57274: IFFALSE 57284
// sRadar := true ;
57276: LD_ADDR_EXP 50
57280: PUSH
57281: LD_INT 1
57283: ST_TO_ADDR
// if p3 = 8 then
57284: LD_VAR 0 3
57288: PUSH
57289: LD_INT 8
57291: EQUAL
57292: IFFALSE 57302
// sBunker := true ;
57294: LD_ADDR_EXP 51
57298: PUSH
57299: LD_INT 1
57301: ST_TO_ADDR
// if p3 = 9 then
57302: LD_VAR 0 3
57306: PUSH
57307: LD_INT 9
57309: EQUAL
57310: IFFALSE 57320
// sHack := true ;
57312: LD_ADDR_EXP 52
57316: PUSH
57317: LD_INT 1
57319: ST_TO_ADDR
// if p3 = 10 then
57320: LD_VAR 0 3
57324: PUSH
57325: LD_INT 10
57327: EQUAL
57328: IFFALSE 57338
// sFire := true ;
57330: LD_ADDR_EXP 53
57334: PUSH
57335: LD_INT 1
57337: ST_TO_ADDR
// if p3 = 11 then
57338: LD_VAR 0 3
57342: PUSH
57343: LD_INT 11
57345: EQUAL
57346: IFFALSE 57356
// sRefresh := true ;
57348: LD_ADDR_EXP 54
57352: PUSH
57353: LD_INT 1
57355: ST_TO_ADDR
// if p3 = 12 then
57356: LD_VAR 0 3
57360: PUSH
57361: LD_INT 12
57363: EQUAL
57364: IFFALSE 57374
// sExp := true ;
57366: LD_ADDR_EXP 55
57370: PUSH
57371: LD_INT 1
57373: ST_TO_ADDR
// if p3 = 13 then
57374: LD_VAR 0 3
57378: PUSH
57379: LD_INT 13
57381: EQUAL
57382: IFFALSE 57392
// sDepot := true ;
57384: LD_ADDR_EXP 56
57388: PUSH
57389: LD_INT 1
57391: ST_TO_ADDR
// if p3 = 14 then
57392: LD_VAR 0 3
57396: PUSH
57397: LD_INT 14
57399: EQUAL
57400: IFFALSE 57410
// sFlag := true ;
57402: LD_ADDR_EXP 57
57406: PUSH
57407: LD_INT 1
57409: ST_TO_ADDR
// if p3 = 15 then
57410: LD_VAR 0 3
57414: PUSH
57415: LD_INT 15
57417: EQUAL
57418: IFFALSE 57428
// sKamikadze := true ;
57420: LD_ADDR_EXP 65
57424: PUSH
57425: LD_INT 1
57427: ST_TO_ADDR
// if p3 = 16 then
57428: LD_VAR 0 3
57432: PUSH
57433: LD_INT 16
57435: EQUAL
57436: IFFALSE 57446
// sTroll := true ;
57438: LD_ADDR_EXP 66
57442: PUSH
57443: LD_INT 1
57445: ST_TO_ADDR
// if p3 = 17 then
57446: LD_VAR 0 3
57450: PUSH
57451: LD_INT 17
57453: EQUAL
57454: IFFALSE 57464
// sSlow := true ;
57456: LD_ADDR_EXP 67
57460: PUSH
57461: LD_INT 1
57463: ST_TO_ADDR
// if p3 = 18 then
57464: LD_VAR 0 3
57468: PUSH
57469: LD_INT 18
57471: EQUAL
57472: IFFALSE 57482
// sLack := true ;
57474: LD_ADDR_EXP 68
57478: PUSH
57479: LD_INT 1
57481: ST_TO_ADDR
// if p3 = 19 then
57482: LD_VAR 0 3
57486: PUSH
57487: LD_INT 19
57489: EQUAL
57490: IFFALSE 57500
// sTank := true ;
57492: LD_ADDR_EXP 70
57496: PUSH
57497: LD_INT 1
57499: ST_TO_ADDR
// if p3 = 20 then
57500: LD_VAR 0 3
57504: PUSH
57505: LD_INT 20
57507: EQUAL
57508: IFFALSE 57518
// sRemote := true ;
57510: LD_ADDR_EXP 71
57514: PUSH
57515: LD_INT 1
57517: ST_TO_ADDR
// if p3 = 21 then
57518: LD_VAR 0 3
57522: PUSH
57523: LD_INT 21
57525: EQUAL
57526: IFFALSE 57536
// sPowell := true ;
57528: LD_ADDR_EXP 72
57532: PUSH
57533: LD_INT 1
57535: ST_TO_ADDR
// if p3 = 22 then
57536: LD_VAR 0 3
57540: PUSH
57541: LD_INT 22
57543: EQUAL
57544: IFFALSE 57554
// sTeleport := true ;
57546: LD_ADDR_EXP 75
57550: PUSH
57551: LD_INT 1
57553: ST_TO_ADDR
// if p3 = 23 then
57554: LD_VAR 0 3
57558: PUSH
57559: LD_INT 23
57561: EQUAL
57562: IFFALSE 57572
// sOilTower := true ;
57564: LD_ADDR_EXP 77
57568: PUSH
57569: LD_INT 1
57571: ST_TO_ADDR
// if p3 = 24 then
57572: LD_VAR 0 3
57576: PUSH
57577: LD_INT 24
57579: EQUAL
57580: IFFALSE 57590
// sShovel := true ;
57582: LD_ADDR_EXP 78
57586: PUSH
57587: LD_INT 1
57589: ST_TO_ADDR
// if p3 = 25 then
57590: LD_VAR 0 3
57594: PUSH
57595: LD_INT 25
57597: EQUAL
57598: IFFALSE 57608
// sSheik := true ;
57600: LD_ADDR_EXP 79
57604: PUSH
57605: LD_INT 1
57607: ST_TO_ADDR
// if p3 = 26 then
57608: LD_VAR 0 3
57612: PUSH
57613: LD_INT 26
57615: EQUAL
57616: IFFALSE 57626
// sEarthquake := true ;
57618: LD_ADDR_EXP 81
57622: PUSH
57623: LD_INT 1
57625: ST_TO_ADDR
// if p3 = 27 then
57626: LD_VAR 0 3
57630: PUSH
57631: LD_INT 27
57633: EQUAL
57634: IFFALSE 57644
// sAI := true ;
57636: LD_ADDR_EXP 82
57640: PUSH
57641: LD_INT 1
57643: ST_TO_ADDR
// if p3 = 28 then
57644: LD_VAR 0 3
57648: PUSH
57649: LD_INT 28
57651: EQUAL
57652: IFFALSE 57662
// sCargo := true ;
57654: LD_ADDR_EXP 85
57658: PUSH
57659: LD_INT 1
57661: ST_TO_ADDR
// if p3 = 29 then
57662: LD_VAR 0 3
57666: PUSH
57667: LD_INT 29
57669: EQUAL
57670: IFFALSE 57680
// sDLaser := true ;
57672: LD_ADDR_EXP 86
57676: PUSH
57677: LD_INT 1
57679: ST_TO_ADDR
// if p3 = 30 then
57680: LD_VAR 0 3
57684: PUSH
57685: LD_INT 30
57687: EQUAL
57688: IFFALSE 57698
// sExchange := true ;
57690: LD_ADDR_EXP 87
57694: PUSH
57695: LD_INT 1
57697: ST_TO_ADDR
// if p3 = 31 then
57698: LD_VAR 0 3
57702: PUSH
57703: LD_INT 31
57705: EQUAL
57706: IFFALSE 57716
// sFac := true ;
57708: LD_ADDR_EXP 88
57712: PUSH
57713: LD_INT 1
57715: ST_TO_ADDR
// if p3 = 32 then
57716: LD_VAR 0 3
57720: PUSH
57721: LD_INT 32
57723: EQUAL
57724: IFFALSE 57734
// sPower := true ;
57726: LD_ADDR_EXP 89
57730: PUSH
57731: LD_INT 1
57733: ST_TO_ADDR
// if p3 = 33 then
57734: LD_VAR 0 3
57738: PUSH
57739: LD_INT 33
57741: EQUAL
57742: IFFALSE 57752
// sRandom := true ;
57744: LD_ADDR_EXP 90
57748: PUSH
57749: LD_INT 1
57751: ST_TO_ADDR
// if p3 = 34 then
57752: LD_VAR 0 3
57756: PUSH
57757: LD_INT 34
57759: EQUAL
57760: IFFALSE 57770
// sShield := true ;
57762: LD_ADDR_EXP 91
57766: PUSH
57767: LD_INT 1
57769: ST_TO_ADDR
// if p3 = 35 then
57770: LD_VAR 0 3
57774: PUSH
57775: LD_INT 35
57777: EQUAL
57778: IFFALSE 57788
// sTime := true ;
57780: LD_ADDR_EXP 92
57784: PUSH
57785: LD_INT 1
57787: ST_TO_ADDR
// if p3 = 36 then
57788: LD_VAR 0 3
57792: PUSH
57793: LD_INT 36
57795: EQUAL
57796: IFFALSE 57806
// sTools := true ;
57798: LD_ADDR_EXP 93
57802: PUSH
57803: LD_INT 1
57805: ST_TO_ADDR
// if p3 = 101 then
57806: LD_VAR 0 3
57810: PUSH
57811: LD_INT 101
57813: EQUAL
57814: IFFALSE 57824
// sSold := true ;
57816: LD_ADDR_EXP 58
57820: PUSH
57821: LD_INT 1
57823: ST_TO_ADDR
// if p3 = 102 then
57824: LD_VAR 0 3
57828: PUSH
57829: LD_INT 102
57831: EQUAL
57832: IFFALSE 57842
// sDiff := true ;
57834: LD_ADDR_EXP 59
57838: PUSH
57839: LD_INT 1
57841: ST_TO_ADDR
// if p3 = 103 then
57842: LD_VAR 0 3
57846: PUSH
57847: LD_INT 103
57849: EQUAL
57850: IFFALSE 57860
// sFog := true ;
57852: LD_ADDR_EXP 62
57856: PUSH
57857: LD_INT 1
57859: ST_TO_ADDR
// if p3 = 104 then
57860: LD_VAR 0 3
57864: PUSH
57865: LD_INT 104
57867: EQUAL
57868: IFFALSE 57878
// sReset := true ;
57870: LD_ADDR_EXP 63
57874: PUSH
57875: LD_INT 1
57877: ST_TO_ADDR
// if p3 = 105 then
57878: LD_VAR 0 3
57882: PUSH
57883: LD_INT 105
57885: EQUAL
57886: IFFALSE 57896
// sSun := true ;
57888: LD_ADDR_EXP 64
57892: PUSH
57893: LD_INT 1
57895: ST_TO_ADDR
// if p3 = 106 then
57896: LD_VAR 0 3
57900: PUSH
57901: LD_INT 106
57903: EQUAL
57904: IFFALSE 57914
// sTiger := true ;
57906: LD_ADDR_EXP 60
57910: PUSH
57911: LD_INT 1
57913: ST_TO_ADDR
// if p3 = 107 then
57914: LD_VAR 0 3
57918: PUSH
57919: LD_INT 107
57921: EQUAL
57922: IFFALSE 57932
// sBomb := true ;
57924: LD_ADDR_EXP 61
57928: PUSH
57929: LD_INT 1
57931: ST_TO_ADDR
// if p3 = 108 then
57932: LD_VAR 0 3
57936: PUSH
57937: LD_INT 108
57939: EQUAL
57940: IFFALSE 57950
// sWound := true ;
57942: LD_ADDR_EXP 69
57946: PUSH
57947: LD_INT 1
57949: ST_TO_ADDR
// if p3 = 109 then
57950: LD_VAR 0 3
57954: PUSH
57955: LD_INT 109
57957: EQUAL
57958: IFFALSE 57968
// sBetray := true ;
57960: LD_ADDR_EXP 73
57964: PUSH
57965: LD_INT 1
57967: ST_TO_ADDR
// if p3 = 110 then
57968: LD_VAR 0 3
57972: PUSH
57973: LD_INT 110
57975: EQUAL
57976: IFFALSE 57986
// sContamin := true ;
57978: LD_ADDR_EXP 74
57982: PUSH
57983: LD_INT 1
57985: ST_TO_ADDR
// if p3 = 111 then
57986: LD_VAR 0 3
57990: PUSH
57991: LD_INT 111
57993: EQUAL
57994: IFFALSE 58004
// sOil := true ;
57996: LD_ADDR_EXP 76
58000: PUSH
58001: LD_INT 1
58003: ST_TO_ADDR
// if p3 = 112 then
58004: LD_VAR 0 3
58008: PUSH
58009: LD_INT 112
58011: EQUAL
58012: IFFALSE 58022
// sStu := true ;
58014: LD_ADDR_EXP 80
58018: PUSH
58019: LD_INT 1
58021: ST_TO_ADDR
// if p3 = 113 then
58022: LD_VAR 0 3
58026: PUSH
58027: LD_INT 113
58029: EQUAL
58030: IFFALSE 58040
// sBazooka := true ;
58032: LD_ADDR_EXP 83
58036: PUSH
58037: LD_INT 1
58039: ST_TO_ADDR
// if p3 = 114 then
58040: LD_VAR 0 3
58044: PUSH
58045: LD_INT 114
58047: EQUAL
58048: IFFALSE 58058
// sMortar := true ;
58050: LD_ADDR_EXP 84
58054: PUSH
58055: LD_INT 1
58057: ST_TO_ADDR
// if p3 = 115 then
58058: LD_VAR 0 3
58062: PUSH
58063: LD_INT 115
58065: EQUAL
58066: IFFALSE 58076
// sRanger := true ;
58068: LD_ADDR_EXP 94
58072: PUSH
58073: LD_INT 1
58075: ST_TO_ADDR
// end ; if p2 = 101 then
58076: LD_VAR 0 2
58080: PUSH
58081: LD_INT 101
58083: EQUAL
58084: IFFALSE 58212
// begin case p3 of 1 :
58086: LD_VAR 0 3
58090: PUSH
58091: LD_INT 1
58093: DOUBLE
58094: EQUAL
58095: IFTRUE 58099
58097: GO 58106
58099: POP
// hHackUnlimitedResources ; 2 :
58100: CALL 69249 0 0
58104: GO 58212
58106: LD_INT 2
58108: DOUBLE
58109: EQUAL
58110: IFTRUE 58114
58112: GO 58121
58114: POP
// hHackSetLevel10 ; 3 :
58115: CALL 69382 0 0
58119: GO 58212
58121: LD_INT 3
58123: DOUBLE
58124: EQUAL
58125: IFTRUE 58129
58127: GO 58136
58129: POP
// hHackSetLevel10YourUnits ; 4 :
58130: CALL 69467 0 0
58134: GO 58212
58136: LD_INT 4
58138: DOUBLE
58139: EQUAL
58140: IFTRUE 58144
58142: GO 58151
58144: POP
// hHackInvincible ; 5 :
58145: CALL 69915 0 0
58149: GO 58212
58151: LD_INT 5
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58159
58157: GO 58166
58159: POP
// hHackInvisible ; 6 :
58160: CALL 70026 0 0
58164: GO 58212
58166: LD_INT 6
58168: DOUBLE
58169: EQUAL
58170: IFTRUE 58174
58172: GO 58181
58174: POP
// hHackChangeYourSide ; 7 :
58175: CALL 70083 0 0
58179: GO 58212
58181: LD_INT 7
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58189
58187: GO 58196
58189: POP
// hHackChangeUnitSide ; 8 :
58190: CALL 70125 0 0
58194: GO 58212
58196: LD_INT 8
58198: DOUBLE
58199: EQUAL
58200: IFTRUE 58204
58202: GO 58211
58204: POP
// hHackFog ; end ;
58205: CALL 70226 0 0
58209: GO 58212
58211: POP
// end ; end ;
58212: LD_VAR 0 7
58216: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
58217: GO 58219
58219: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
58220: LD_STRING initStreamRollete();
58222: PPUSH
58223: CALL_OW 559
// InitStreamMode ;
58227: CALL 58236 0 0
// DefineStreamItems ( ) ;
58231: CALL 58676 0 0
// end ;
58235: END
// function InitStreamMode ; begin
58236: LD_INT 0
58238: PPUSH
// streamModeActive := false ;
58239: LD_ADDR_EXP 41
58243: PUSH
58244: LD_INT 0
58246: ST_TO_ADDR
// normalCounter := 36 ;
58247: LD_ADDR_EXP 42
58251: PUSH
58252: LD_INT 36
58254: ST_TO_ADDR
// hardcoreCounter := 16 ;
58255: LD_ADDR_EXP 43
58259: PUSH
58260: LD_INT 16
58262: ST_TO_ADDR
// sRocket := false ;
58263: LD_ADDR_EXP 46
58267: PUSH
58268: LD_INT 0
58270: ST_TO_ADDR
// sSpeed := false ;
58271: LD_ADDR_EXP 45
58275: PUSH
58276: LD_INT 0
58278: ST_TO_ADDR
// sEngine := false ;
58279: LD_ADDR_EXP 47
58283: PUSH
58284: LD_INT 0
58286: ST_TO_ADDR
// sSpec := false ;
58287: LD_ADDR_EXP 44
58291: PUSH
58292: LD_INT 0
58294: ST_TO_ADDR
// sLevel := false ;
58295: LD_ADDR_EXP 48
58299: PUSH
58300: LD_INT 0
58302: ST_TO_ADDR
// sArmoury := false ;
58303: LD_ADDR_EXP 49
58307: PUSH
58308: LD_INT 0
58310: ST_TO_ADDR
// sRadar := false ;
58311: LD_ADDR_EXP 50
58315: PUSH
58316: LD_INT 0
58318: ST_TO_ADDR
// sBunker := false ;
58319: LD_ADDR_EXP 51
58323: PUSH
58324: LD_INT 0
58326: ST_TO_ADDR
// sHack := false ;
58327: LD_ADDR_EXP 52
58331: PUSH
58332: LD_INT 0
58334: ST_TO_ADDR
// sFire := false ;
58335: LD_ADDR_EXP 53
58339: PUSH
58340: LD_INT 0
58342: ST_TO_ADDR
// sRefresh := false ;
58343: LD_ADDR_EXP 54
58347: PUSH
58348: LD_INT 0
58350: ST_TO_ADDR
// sExp := false ;
58351: LD_ADDR_EXP 55
58355: PUSH
58356: LD_INT 0
58358: ST_TO_ADDR
// sDepot := false ;
58359: LD_ADDR_EXP 56
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// sFlag := false ;
58367: LD_ADDR_EXP 57
58371: PUSH
58372: LD_INT 0
58374: ST_TO_ADDR
// sKamikadze := false ;
58375: LD_ADDR_EXP 65
58379: PUSH
58380: LD_INT 0
58382: ST_TO_ADDR
// sTroll := false ;
58383: LD_ADDR_EXP 66
58387: PUSH
58388: LD_INT 0
58390: ST_TO_ADDR
// sSlow := false ;
58391: LD_ADDR_EXP 67
58395: PUSH
58396: LD_INT 0
58398: ST_TO_ADDR
// sLack := false ;
58399: LD_ADDR_EXP 68
58403: PUSH
58404: LD_INT 0
58406: ST_TO_ADDR
// sTank := false ;
58407: LD_ADDR_EXP 70
58411: PUSH
58412: LD_INT 0
58414: ST_TO_ADDR
// sRemote := false ;
58415: LD_ADDR_EXP 71
58419: PUSH
58420: LD_INT 0
58422: ST_TO_ADDR
// sPowell := false ;
58423: LD_ADDR_EXP 72
58427: PUSH
58428: LD_INT 0
58430: ST_TO_ADDR
// sTeleport := false ;
58431: LD_ADDR_EXP 75
58435: PUSH
58436: LD_INT 0
58438: ST_TO_ADDR
// sOilTower := false ;
58439: LD_ADDR_EXP 77
58443: PUSH
58444: LD_INT 0
58446: ST_TO_ADDR
// sShovel := false ;
58447: LD_ADDR_EXP 78
58451: PUSH
58452: LD_INT 0
58454: ST_TO_ADDR
// sSheik := false ;
58455: LD_ADDR_EXP 79
58459: PUSH
58460: LD_INT 0
58462: ST_TO_ADDR
// sEarthquake := false ;
58463: LD_ADDR_EXP 81
58467: PUSH
58468: LD_INT 0
58470: ST_TO_ADDR
// sAI := false ;
58471: LD_ADDR_EXP 82
58475: PUSH
58476: LD_INT 0
58478: ST_TO_ADDR
// sCargo := false ;
58479: LD_ADDR_EXP 85
58483: PUSH
58484: LD_INT 0
58486: ST_TO_ADDR
// sDLaser := false ;
58487: LD_ADDR_EXP 86
58491: PUSH
58492: LD_INT 0
58494: ST_TO_ADDR
// sExchange := false ;
58495: LD_ADDR_EXP 87
58499: PUSH
58500: LD_INT 0
58502: ST_TO_ADDR
// sFac := false ;
58503: LD_ADDR_EXP 88
58507: PUSH
58508: LD_INT 0
58510: ST_TO_ADDR
// sPower := false ;
58511: LD_ADDR_EXP 89
58515: PUSH
58516: LD_INT 0
58518: ST_TO_ADDR
// sRandom := false ;
58519: LD_ADDR_EXP 90
58523: PUSH
58524: LD_INT 0
58526: ST_TO_ADDR
// sShield := false ;
58527: LD_ADDR_EXP 91
58531: PUSH
58532: LD_INT 0
58534: ST_TO_ADDR
// sTime := false ;
58535: LD_ADDR_EXP 92
58539: PUSH
58540: LD_INT 0
58542: ST_TO_ADDR
// sTools := false ;
58543: LD_ADDR_EXP 93
58547: PUSH
58548: LD_INT 0
58550: ST_TO_ADDR
// sSold := false ;
58551: LD_ADDR_EXP 58
58555: PUSH
58556: LD_INT 0
58558: ST_TO_ADDR
// sDiff := false ;
58559: LD_ADDR_EXP 59
58563: PUSH
58564: LD_INT 0
58566: ST_TO_ADDR
// sFog := false ;
58567: LD_ADDR_EXP 62
58571: PUSH
58572: LD_INT 0
58574: ST_TO_ADDR
// sReset := false ;
58575: LD_ADDR_EXP 63
58579: PUSH
58580: LD_INT 0
58582: ST_TO_ADDR
// sSun := false ;
58583: LD_ADDR_EXP 64
58587: PUSH
58588: LD_INT 0
58590: ST_TO_ADDR
// sTiger := false ;
58591: LD_ADDR_EXP 60
58595: PUSH
58596: LD_INT 0
58598: ST_TO_ADDR
// sBomb := false ;
58599: LD_ADDR_EXP 61
58603: PUSH
58604: LD_INT 0
58606: ST_TO_ADDR
// sWound := false ;
58607: LD_ADDR_EXP 69
58611: PUSH
58612: LD_INT 0
58614: ST_TO_ADDR
// sBetray := false ;
58615: LD_ADDR_EXP 73
58619: PUSH
58620: LD_INT 0
58622: ST_TO_ADDR
// sContamin := false ;
58623: LD_ADDR_EXP 74
58627: PUSH
58628: LD_INT 0
58630: ST_TO_ADDR
// sOil := false ;
58631: LD_ADDR_EXP 76
58635: PUSH
58636: LD_INT 0
58638: ST_TO_ADDR
// sStu := false ;
58639: LD_ADDR_EXP 80
58643: PUSH
58644: LD_INT 0
58646: ST_TO_ADDR
// sBazooka := false ;
58647: LD_ADDR_EXP 83
58651: PUSH
58652: LD_INT 0
58654: ST_TO_ADDR
// sMortar := false ;
58655: LD_ADDR_EXP 84
58659: PUSH
58660: LD_INT 0
58662: ST_TO_ADDR
// sRanger := false ;
58663: LD_ADDR_EXP 94
58667: PUSH
58668: LD_INT 0
58670: ST_TO_ADDR
// end ;
58671: LD_VAR 0 1
58675: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
58676: LD_INT 0
58678: PPUSH
58679: PPUSH
58680: PPUSH
58681: PPUSH
58682: PPUSH
// result := [ ] ;
58683: LD_ADDR_VAR 0 1
58687: PUSH
58688: EMPTY
58689: ST_TO_ADDR
// if campaign_id = 1 then
58690: LD_OWVAR 69
58694: PUSH
58695: LD_INT 1
58697: EQUAL
58698: IFFALSE 61636
// begin case mission_number of 1 :
58700: LD_OWVAR 70
58704: PUSH
58705: LD_INT 1
58707: DOUBLE
58708: EQUAL
58709: IFTRUE 58713
58711: GO 58777
58713: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
58714: LD_ADDR_VAR 0 1
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 4
58724: PUSH
58725: LD_INT 11
58727: PUSH
58728: LD_INT 12
58730: PUSH
58731: LD_INT 15
58733: PUSH
58734: LD_INT 16
58736: PUSH
58737: LD_INT 22
58739: PUSH
58740: LD_INT 23
58742: PUSH
58743: LD_INT 26
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 101
58759: PUSH
58760: LD_INT 102
58762: PUSH
58763: LD_INT 106
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: ST_TO_ADDR
58775: GO 61634
58777: LD_INT 2
58779: DOUBLE
58780: EQUAL
58781: IFTRUE 58785
58783: GO 58857
58785: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
58786: LD_ADDR_VAR 0 1
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: LD_INT 11
58799: PUSH
58800: LD_INT 12
58802: PUSH
58803: LD_INT 15
58805: PUSH
58806: LD_INT 16
58808: PUSH
58809: LD_INT 22
58811: PUSH
58812: LD_INT 23
58814: PUSH
58815: LD_INT 26
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 101
58831: PUSH
58832: LD_INT 102
58834: PUSH
58835: LD_INT 105
58837: PUSH
58838: LD_INT 106
58840: PUSH
58841: LD_INT 108
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: ST_TO_ADDR
58855: GO 61634
58857: LD_INT 3
58859: DOUBLE
58860: EQUAL
58861: IFTRUE 58865
58863: GO 58941
58865: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
58866: LD_ADDR_VAR 0 1
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 4
58876: PUSH
58877: LD_INT 5
58879: PUSH
58880: LD_INT 11
58882: PUSH
58883: LD_INT 12
58885: PUSH
58886: LD_INT 15
58888: PUSH
58889: LD_INT 16
58891: PUSH
58892: LD_INT 22
58894: PUSH
58895: LD_INT 26
58897: PUSH
58898: LD_INT 36
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 101
58915: PUSH
58916: LD_INT 102
58918: PUSH
58919: LD_INT 105
58921: PUSH
58922: LD_INT 106
58924: PUSH
58925: LD_INT 108
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: ST_TO_ADDR
58939: GO 61634
58941: LD_INT 4
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58949
58947: GO 59033
58949: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
58950: LD_ADDR_VAR 0 1
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: LD_INT 5
58963: PUSH
58964: LD_INT 8
58966: PUSH
58967: LD_INT 11
58969: PUSH
58970: LD_INT 12
58972: PUSH
58973: LD_INT 15
58975: PUSH
58976: LD_INT 16
58978: PUSH
58979: LD_INT 22
58981: PUSH
58982: LD_INT 23
58984: PUSH
58985: LD_INT 26
58987: PUSH
58988: LD_INT 36
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 101
59007: PUSH
59008: LD_INT 102
59010: PUSH
59011: LD_INT 105
59013: PUSH
59014: LD_INT 106
59016: PUSH
59017: LD_INT 108
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: ST_TO_ADDR
59031: GO 61634
59033: LD_INT 5
59035: DOUBLE
59036: EQUAL
59037: IFTRUE 59041
59039: GO 59141
59041: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
59042: LD_ADDR_VAR 0 1
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: LD_INT 6
59058: PUSH
59059: LD_INT 8
59061: PUSH
59062: LD_INT 11
59064: PUSH
59065: LD_INT 12
59067: PUSH
59068: LD_INT 15
59070: PUSH
59071: LD_INT 16
59073: PUSH
59074: LD_INT 22
59076: PUSH
59077: LD_INT 23
59079: PUSH
59080: LD_INT 25
59082: PUSH
59083: LD_INT 26
59085: PUSH
59086: LD_INT 36
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 101
59107: PUSH
59108: LD_INT 102
59110: PUSH
59111: LD_INT 105
59113: PUSH
59114: LD_INT 106
59116: PUSH
59117: LD_INT 108
59119: PUSH
59120: LD_INT 109
59122: PUSH
59123: LD_INT 112
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: ST_TO_ADDR
59139: GO 61634
59141: LD_INT 6
59143: DOUBLE
59144: EQUAL
59145: IFTRUE 59149
59147: GO 59269
59149: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
59150: LD_ADDR_VAR 0 1
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: LD_INT 5
59163: PUSH
59164: LD_INT 6
59166: PUSH
59167: LD_INT 8
59169: PUSH
59170: LD_INT 11
59172: PUSH
59173: LD_INT 12
59175: PUSH
59176: LD_INT 15
59178: PUSH
59179: LD_INT 16
59181: PUSH
59182: LD_INT 20
59184: PUSH
59185: LD_INT 21
59187: PUSH
59188: LD_INT 22
59190: PUSH
59191: LD_INT 23
59193: PUSH
59194: LD_INT 25
59196: PUSH
59197: LD_INT 26
59199: PUSH
59200: LD_INT 30
59202: PUSH
59203: LD_INT 31
59205: PUSH
59206: LD_INT 32
59208: PUSH
59209: LD_INT 36
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 101
59235: PUSH
59236: LD_INT 102
59238: PUSH
59239: LD_INT 105
59241: PUSH
59242: LD_INT 106
59244: PUSH
59245: LD_INT 108
59247: PUSH
59248: LD_INT 109
59250: PUSH
59251: LD_INT 112
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: ST_TO_ADDR
59267: GO 61634
59269: LD_INT 7
59271: DOUBLE
59272: EQUAL
59273: IFTRUE 59277
59275: GO 59377
59277: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
59278: LD_ADDR_VAR 0 1
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 4
59288: PUSH
59289: LD_INT 5
59291: PUSH
59292: LD_INT 7
59294: PUSH
59295: LD_INT 11
59297: PUSH
59298: LD_INT 12
59300: PUSH
59301: LD_INT 15
59303: PUSH
59304: LD_INT 16
59306: PUSH
59307: LD_INT 20
59309: PUSH
59310: LD_INT 21
59312: PUSH
59313: LD_INT 22
59315: PUSH
59316: LD_INT 23
59318: PUSH
59319: LD_INT 25
59321: PUSH
59322: LD_INT 26
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 101
59343: PUSH
59344: LD_INT 102
59346: PUSH
59347: LD_INT 103
59349: PUSH
59350: LD_INT 105
59352: PUSH
59353: LD_INT 106
59355: PUSH
59356: LD_INT 108
59358: PUSH
59359: LD_INT 112
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: ST_TO_ADDR
59375: GO 61634
59377: LD_INT 8
59379: DOUBLE
59380: EQUAL
59381: IFTRUE 59385
59383: GO 59513
59385: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
59386: LD_ADDR_VAR 0 1
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: LD_INT 4
59396: PUSH
59397: LD_INT 5
59399: PUSH
59400: LD_INT 6
59402: PUSH
59403: LD_INT 7
59405: PUSH
59406: LD_INT 8
59408: PUSH
59409: LD_INT 11
59411: PUSH
59412: LD_INT 12
59414: PUSH
59415: LD_INT 15
59417: PUSH
59418: LD_INT 16
59420: PUSH
59421: LD_INT 20
59423: PUSH
59424: LD_INT 21
59426: PUSH
59427: LD_INT 22
59429: PUSH
59430: LD_INT 23
59432: PUSH
59433: LD_INT 25
59435: PUSH
59436: LD_INT 26
59438: PUSH
59439: LD_INT 30
59441: PUSH
59442: LD_INT 31
59444: PUSH
59445: LD_INT 32
59447: PUSH
59448: LD_INT 36
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 101
59475: PUSH
59476: LD_INT 102
59478: PUSH
59479: LD_INT 103
59481: PUSH
59482: LD_INT 105
59484: PUSH
59485: LD_INT 106
59487: PUSH
59488: LD_INT 108
59490: PUSH
59491: LD_INT 109
59493: PUSH
59494: LD_INT 112
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: ST_TO_ADDR
59511: GO 61634
59513: LD_INT 9
59515: DOUBLE
59516: EQUAL
59517: IFTRUE 59521
59519: GO 59657
59521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
59522: LD_ADDR_VAR 0 1
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 4
59532: PUSH
59533: LD_INT 5
59535: PUSH
59536: LD_INT 6
59538: PUSH
59539: LD_INT 7
59541: PUSH
59542: LD_INT 8
59544: PUSH
59545: LD_INT 11
59547: PUSH
59548: LD_INT 12
59550: PUSH
59551: LD_INT 15
59553: PUSH
59554: LD_INT 16
59556: PUSH
59557: LD_INT 20
59559: PUSH
59560: LD_INT 21
59562: PUSH
59563: LD_INT 22
59565: PUSH
59566: LD_INT 23
59568: PUSH
59569: LD_INT 25
59571: PUSH
59572: LD_INT 26
59574: PUSH
59575: LD_INT 28
59577: PUSH
59578: LD_INT 30
59580: PUSH
59581: LD_INT 31
59583: PUSH
59584: LD_INT 32
59586: PUSH
59587: LD_INT 36
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 101
59615: PUSH
59616: LD_INT 102
59618: PUSH
59619: LD_INT 103
59621: PUSH
59622: LD_INT 105
59624: PUSH
59625: LD_INT 106
59627: PUSH
59628: LD_INT 108
59630: PUSH
59631: LD_INT 109
59633: PUSH
59634: LD_INT 112
59636: PUSH
59637: LD_INT 114
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: ST_TO_ADDR
59655: GO 61634
59657: LD_INT 10
59659: DOUBLE
59660: EQUAL
59661: IFTRUE 59665
59663: GO 59849
59665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
59666: LD_ADDR_VAR 0 1
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 4
59676: PUSH
59677: LD_INT 5
59679: PUSH
59680: LD_INT 6
59682: PUSH
59683: LD_INT 7
59685: PUSH
59686: LD_INT 8
59688: PUSH
59689: LD_INT 9
59691: PUSH
59692: LD_INT 10
59694: PUSH
59695: LD_INT 11
59697: PUSH
59698: LD_INT 12
59700: PUSH
59701: LD_INT 13
59703: PUSH
59704: LD_INT 14
59706: PUSH
59707: LD_INT 15
59709: PUSH
59710: LD_INT 16
59712: PUSH
59713: LD_INT 17
59715: PUSH
59716: LD_INT 18
59718: PUSH
59719: LD_INT 19
59721: PUSH
59722: LD_INT 20
59724: PUSH
59725: LD_INT 21
59727: PUSH
59728: LD_INT 22
59730: PUSH
59731: LD_INT 23
59733: PUSH
59734: LD_INT 24
59736: PUSH
59737: LD_INT 25
59739: PUSH
59740: LD_INT 26
59742: PUSH
59743: LD_INT 28
59745: PUSH
59746: LD_INT 30
59748: PUSH
59749: LD_INT 31
59751: PUSH
59752: LD_INT 32
59754: PUSH
59755: LD_INT 36
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 101
59791: PUSH
59792: LD_INT 102
59794: PUSH
59795: LD_INT 103
59797: PUSH
59798: LD_INT 104
59800: PUSH
59801: LD_INT 105
59803: PUSH
59804: LD_INT 106
59806: PUSH
59807: LD_INT 107
59809: PUSH
59810: LD_INT 108
59812: PUSH
59813: LD_INT 109
59815: PUSH
59816: LD_INT 110
59818: PUSH
59819: LD_INT 111
59821: PUSH
59822: LD_INT 112
59824: PUSH
59825: LD_INT 114
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: ST_TO_ADDR
59847: GO 61634
59849: LD_INT 11
59851: DOUBLE
59852: EQUAL
59853: IFTRUE 59857
59855: GO 60049
59857: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
59858: LD_ADDR_VAR 0 1
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: LD_INT 4
59871: PUSH
59872: LD_INT 5
59874: PUSH
59875: LD_INT 6
59877: PUSH
59878: LD_INT 7
59880: PUSH
59881: LD_INT 8
59883: PUSH
59884: LD_INT 9
59886: PUSH
59887: LD_INT 10
59889: PUSH
59890: LD_INT 11
59892: PUSH
59893: LD_INT 12
59895: PUSH
59896: LD_INT 13
59898: PUSH
59899: LD_INT 14
59901: PUSH
59902: LD_INT 15
59904: PUSH
59905: LD_INT 16
59907: PUSH
59908: LD_INT 17
59910: PUSH
59911: LD_INT 18
59913: PUSH
59914: LD_INT 19
59916: PUSH
59917: LD_INT 20
59919: PUSH
59920: LD_INT 21
59922: PUSH
59923: LD_INT 22
59925: PUSH
59926: LD_INT 23
59928: PUSH
59929: LD_INT 24
59931: PUSH
59932: LD_INT 25
59934: PUSH
59935: LD_INT 26
59937: PUSH
59938: LD_INT 28
59940: PUSH
59941: LD_INT 30
59943: PUSH
59944: LD_INT 31
59946: PUSH
59947: LD_INT 32
59949: PUSH
59950: LD_INT 34
59952: PUSH
59953: LD_INT 36
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 101
59991: PUSH
59992: LD_INT 102
59994: PUSH
59995: LD_INT 103
59997: PUSH
59998: LD_INT 104
60000: PUSH
60001: LD_INT 105
60003: PUSH
60004: LD_INT 106
60006: PUSH
60007: LD_INT 107
60009: PUSH
60010: LD_INT 108
60012: PUSH
60013: LD_INT 109
60015: PUSH
60016: LD_INT 110
60018: PUSH
60019: LD_INT 111
60021: PUSH
60022: LD_INT 112
60024: PUSH
60025: LD_INT 114
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: ST_TO_ADDR
60047: GO 61634
60049: LD_INT 12
60051: DOUBLE
60052: EQUAL
60053: IFTRUE 60057
60055: GO 60265
60057: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
60058: LD_ADDR_VAR 0 1
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: LD_INT 4
60074: PUSH
60075: LD_INT 5
60077: PUSH
60078: LD_INT 6
60080: PUSH
60081: LD_INT 7
60083: PUSH
60084: LD_INT 8
60086: PUSH
60087: LD_INT 9
60089: PUSH
60090: LD_INT 10
60092: PUSH
60093: LD_INT 11
60095: PUSH
60096: LD_INT 12
60098: PUSH
60099: LD_INT 13
60101: PUSH
60102: LD_INT 14
60104: PUSH
60105: LD_INT 15
60107: PUSH
60108: LD_INT 16
60110: PUSH
60111: LD_INT 17
60113: PUSH
60114: LD_INT 18
60116: PUSH
60117: LD_INT 19
60119: PUSH
60120: LD_INT 20
60122: PUSH
60123: LD_INT 21
60125: PUSH
60126: LD_INT 22
60128: PUSH
60129: LD_INT 23
60131: PUSH
60132: LD_INT 24
60134: PUSH
60135: LD_INT 25
60137: PUSH
60138: LD_INT 26
60140: PUSH
60141: LD_INT 27
60143: PUSH
60144: LD_INT 28
60146: PUSH
60147: LD_INT 30
60149: PUSH
60150: LD_INT 31
60152: PUSH
60153: LD_INT 32
60155: PUSH
60156: LD_INT 33
60158: PUSH
60159: LD_INT 34
60161: PUSH
60162: LD_INT 36
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 101
60203: PUSH
60204: LD_INT 102
60206: PUSH
60207: LD_INT 103
60209: PUSH
60210: LD_INT 104
60212: PUSH
60213: LD_INT 105
60215: PUSH
60216: LD_INT 106
60218: PUSH
60219: LD_INT 107
60221: PUSH
60222: LD_INT 108
60224: PUSH
60225: LD_INT 109
60227: PUSH
60228: LD_INT 110
60230: PUSH
60231: LD_INT 111
60233: PUSH
60234: LD_INT 112
60236: PUSH
60237: LD_INT 113
60239: PUSH
60240: LD_INT 114
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: ST_TO_ADDR
60263: GO 61634
60265: LD_INT 13
60267: DOUBLE
60268: EQUAL
60269: IFTRUE 60273
60271: GO 60469
60273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
60274: LD_ADDR_VAR 0 1
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: LD_INT 5
60293: PUSH
60294: LD_INT 8
60296: PUSH
60297: LD_INT 9
60299: PUSH
60300: LD_INT 10
60302: PUSH
60303: LD_INT 11
60305: PUSH
60306: LD_INT 12
60308: PUSH
60309: LD_INT 14
60311: PUSH
60312: LD_INT 15
60314: PUSH
60315: LD_INT 16
60317: PUSH
60318: LD_INT 17
60320: PUSH
60321: LD_INT 18
60323: PUSH
60324: LD_INT 19
60326: PUSH
60327: LD_INT 20
60329: PUSH
60330: LD_INT 21
60332: PUSH
60333: LD_INT 22
60335: PUSH
60336: LD_INT 23
60338: PUSH
60339: LD_INT 24
60341: PUSH
60342: LD_INT 25
60344: PUSH
60345: LD_INT 26
60347: PUSH
60348: LD_INT 27
60350: PUSH
60351: LD_INT 28
60353: PUSH
60354: LD_INT 30
60356: PUSH
60357: LD_INT 31
60359: PUSH
60360: LD_INT 32
60362: PUSH
60363: LD_INT 33
60365: PUSH
60366: LD_INT 34
60368: PUSH
60369: LD_INT 36
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 101
60407: PUSH
60408: LD_INT 102
60410: PUSH
60411: LD_INT 103
60413: PUSH
60414: LD_INT 104
60416: PUSH
60417: LD_INT 105
60419: PUSH
60420: LD_INT 106
60422: PUSH
60423: LD_INT 107
60425: PUSH
60426: LD_INT 108
60428: PUSH
60429: LD_INT 109
60431: PUSH
60432: LD_INT 110
60434: PUSH
60435: LD_INT 111
60437: PUSH
60438: LD_INT 112
60440: PUSH
60441: LD_INT 113
60443: PUSH
60444: LD_INT 114
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: ST_TO_ADDR
60467: GO 61634
60469: LD_INT 14
60471: DOUBLE
60472: EQUAL
60473: IFTRUE 60477
60475: GO 60689
60477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
60478: LD_ADDR_VAR 0 1
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: LD_INT 5
60497: PUSH
60498: LD_INT 6
60500: PUSH
60501: LD_INT 7
60503: PUSH
60504: LD_INT 8
60506: PUSH
60507: LD_INT 9
60509: PUSH
60510: LD_INT 10
60512: PUSH
60513: LD_INT 11
60515: PUSH
60516: LD_INT 12
60518: PUSH
60519: LD_INT 13
60521: PUSH
60522: LD_INT 14
60524: PUSH
60525: LD_INT 15
60527: PUSH
60528: LD_INT 16
60530: PUSH
60531: LD_INT 17
60533: PUSH
60534: LD_INT 18
60536: PUSH
60537: LD_INT 19
60539: PUSH
60540: LD_INT 20
60542: PUSH
60543: LD_INT 21
60545: PUSH
60546: LD_INT 22
60548: PUSH
60549: LD_INT 23
60551: PUSH
60552: LD_INT 24
60554: PUSH
60555: LD_INT 25
60557: PUSH
60558: LD_INT 26
60560: PUSH
60561: LD_INT 27
60563: PUSH
60564: LD_INT 28
60566: PUSH
60567: LD_INT 29
60569: PUSH
60570: LD_INT 30
60572: PUSH
60573: LD_INT 31
60575: PUSH
60576: LD_INT 32
60578: PUSH
60579: LD_INT 33
60581: PUSH
60582: LD_INT 34
60584: PUSH
60585: LD_INT 36
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 101
60627: PUSH
60628: LD_INT 102
60630: PUSH
60631: LD_INT 103
60633: PUSH
60634: LD_INT 104
60636: PUSH
60637: LD_INT 105
60639: PUSH
60640: LD_INT 106
60642: PUSH
60643: LD_INT 107
60645: PUSH
60646: LD_INT 108
60648: PUSH
60649: LD_INT 109
60651: PUSH
60652: LD_INT 110
60654: PUSH
60655: LD_INT 111
60657: PUSH
60658: LD_INT 112
60660: PUSH
60661: LD_INT 113
60663: PUSH
60664: LD_INT 114
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: ST_TO_ADDR
60687: GO 61634
60689: LD_INT 15
60691: DOUBLE
60692: EQUAL
60693: IFTRUE 60697
60695: GO 60909
60697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
60698: LD_ADDR_VAR 0 1
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 3
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: LD_INT 5
60717: PUSH
60718: LD_INT 6
60720: PUSH
60721: LD_INT 7
60723: PUSH
60724: LD_INT 8
60726: PUSH
60727: LD_INT 9
60729: PUSH
60730: LD_INT 10
60732: PUSH
60733: LD_INT 11
60735: PUSH
60736: LD_INT 12
60738: PUSH
60739: LD_INT 13
60741: PUSH
60742: LD_INT 14
60744: PUSH
60745: LD_INT 15
60747: PUSH
60748: LD_INT 16
60750: PUSH
60751: LD_INT 17
60753: PUSH
60754: LD_INT 18
60756: PUSH
60757: LD_INT 19
60759: PUSH
60760: LD_INT 20
60762: PUSH
60763: LD_INT 21
60765: PUSH
60766: LD_INT 22
60768: PUSH
60769: LD_INT 23
60771: PUSH
60772: LD_INT 24
60774: PUSH
60775: LD_INT 25
60777: PUSH
60778: LD_INT 26
60780: PUSH
60781: LD_INT 27
60783: PUSH
60784: LD_INT 28
60786: PUSH
60787: LD_INT 29
60789: PUSH
60790: LD_INT 30
60792: PUSH
60793: LD_INT 31
60795: PUSH
60796: LD_INT 32
60798: PUSH
60799: LD_INT 33
60801: PUSH
60802: LD_INT 34
60804: PUSH
60805: LD_INT 36
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 101
60847: PUSH
60848: LD_INT 102
60850: PUSH
60851: LD_INT 103
60853: PUSH
60854: LD_INT 104
60856: PUSH
60857: LD_INT 105
60859: PUSH
60860: LD_INT 106
60862: PUSH
60863: LD_INT 107
60865: PUSH
60866: LD_INT 108
60868: PUSH
60869: LD_INT 109
60871: PUSH
60872: LD_INT 110
60874: PUSH
60875: LD_INT 111
60877: PUSH
60878: LD_INT 112
60880: PUSH
60881: LD_INT 113
60883: PUSH
60884: LD_INT 114
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: ST_TO_ADDR
60907: GO 61634
60909: LD_INT 16
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60917
60915: GO 61041
60917: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
60918: LD_ADDR_VAR 0 1
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: LD_INT 4
60928: PUSH
60929: LD_INT 5
60931: PUSH
60932: LD_INT 7
60934: PUSH
60935: LD_INT 11
60937: PUSH
60938: LD_INT 12
60940: PUSH
60941: LD_INT 15
60943: PUSH
60944: LD_INT 16
60946: PUSH
60947: LD_INT 20
60949: PUSH
60950: LD_INT 21
60952: PUSH
60953: LD_INT 22
60955: PUSH
60956: LD_INT 23
60958: PUSH
60959: LD_INT 25
60961: PUSH
60962: LD_INT 26
60964: PUSH
60965: LD_INT 30
60967: PUSH
60968: LD_INT 31
60970: PUSH
60971: LD_INT 32
60973: PUSH
60974: LD_INT 33
60976: PUSH
60977: LD_INT 34
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 101
61003: PUSH
61004: LD_INT 102
61006: PUSH
61007: LD_INT 103
61009: PUSH
61010: LD_INT 106
61012: PUSH
61013: LD_INT 108
61015: PUSH
61016: LD_INT 112
61018: PUSH
61019: LD_INT 113
61021: PUSH
61022: LD_INT 114
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: ST_TO_ADDR
61039: GO 61634
61041: LD_INT 17
61043: DOUBLE
61044: EQUAL
61045: IFTRUE 61049
61047: GO 61261
61049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
61050: LD_ADDR_VAR 0 1
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: LD_INT 5
61069: PUSH
61070: LD_INT 6
61072: PUSH
61073: LD_INT 7
61075: PUSH
61076: LD_INT 8
61078: PUSH
61079: LD_INT 9
61081: PUSH
61082: LD_INT 10
61084: PUSH
61085: LD_INT 11
61087: PUSH
61088: LD_INT 12
61090: PUSH
61091: LD_INT 13
61093: PUSH
61094: LD_INT 14
61096: PUSH
61097: LD_INT 15
61099: PUSH
61100: LD_INT 16
61102: PUSH
61103: LD_INT 17
61105: PUSH
61106: LD_INT 18
61108: PUSH
61109: LD_INT 19
61111: PUSH
61112: LD_INT 20
61114: PUSH
61115: LD_INT 21
61117: PUSH
61118: LD_INT 22
61120: PUSH
61121: LD_INT 23
61123: PUSH
61124: LD_INT 24
61126: PUSH
61127: LD_INT 25
61129: PUSH
61130: LD_INT 26
61132: PUSH
61133: LD_INT 27
61135: PUSH
61136: LD_INT 28
61138: PUSH
61139: LD_INT 29
61141: PUSH
61142: LD_INT 30
61144: PUSH
61145: LD_INT 31
61147: PUSH
61148: LD_INT 32
61150: PUSH
61151: LD_INT 33
61153: PUSH
61154: LD_INT 34
61156: PUSH
61157: LD_INT 36
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 101
61199: PUSH
61200: LD_INT 102
61202: PUSH
61203: LD_INT 103
61205: PUSH
61206: LD_INT 104
61208: PUSH
61209: LD_INT 105
61211: PUSH
61212: LD_INT 106
61214: PUSH
61215: LD_INT 107
61217: PUSH
61218: LD_INT 108
61220: PUSH
61221: LD_INT 109
61223: PUSH
61224: LD_INT 110
61226: PUSH
61227: LD_INT 111
61229: PUSH
61230: LD_INT 112
61232: PUSH
61233: LD_INT 113
61235: PUSH
61236: LD_INT 114
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: ST_TO_ADDR
61259: GO 61634
61261: LD_INT 18
61263: DOUBLE
61264: EQUAL
61265: IFTRUE 61269
61267: GO 61405
61269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
61270: LD_ADDR_VAR 0 1
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: LD_INT 5
61283: PUSH
61284: LD_INT 7
61286: PUSH
61287: LD_INT 11
61289: PUSH
61290: LD_INT 12
61292: PUSH
61293: LD_INT 15
61295: PUSH
61296: LD_INT 16
61298: PUSH
61299: LD_INT 20
61301: PUSH
61302: LD_INT 21
61304: PUSH
61305: LD_INT 22
61307: PUSH
61308: LD_INT 23
61310: PUSH
61311: LD_INT 25
61313: PUSH
61314: LD_INT 26
61316: PUSH
61317: LD_INT 30
61319: PUSH
61320: LD_INT 31
61322: PUSH
61323: LD_INT 32
61325: PUSH
61326: LD_INT 33
61328: PUSH
61329: LD_INT 34
61331: PUSH
61332: LD_INT 35
61334: PUSH
61335: LD_INT 36
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 101
61363: PUSH
61364: LD_INT 102
61366: PUSH
61367: LD_INT 103
61369: PUSH
61370: LD_INT 106
61372: PUSH
61373: LD_INT 108
61375: PUSH
61376: LD_INT 112
61378: PUSH
61379: LD_INT 113
61381: PUSH
61382: LD_INT 114
61384: PUSH
61385: LD_INT 115
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: ST_TO_ADDR
61403: GO 61634
61405: LD_INT 19
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61413
61411: GO 61633
61413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
61414: LD_ADDR_VAR 0 1
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 4
61430: PUSH
61431: LD_INT 5
61433: PUSH
61434: LD_INT 6
61436: PUSH
61437: LD_INT 7
61439: PUSH
61440: LD_INT 8
61442: PUSH
61443: LD_INT 9
61445: PUSH
61446: LD_INT 10
61448: PUSH
61449: LD_INT 11
61451: PUSH
61452: LD_INT 12
61454: PUSH
61455: LD_INT 13
61457: PUSH
61458: LD_INT 14
61460: PUSH
61461: LD_INT 15
61463: PUSH
61464: LD_INT 16
61466: PUSH
61467: LD_INT 17
61469: PUSH
61470: LD_INT 18
61472: PUSH
61473: LD_INT 19
61475: PUSH
61476: LD_INT 20
61478: PUSH
61479: LD_INT 21
61481: PUSH
61482: LD_INT 22
61484: PUSH
61485: LD_INT 23
61487: PUSH
61488: LD_INT 24
61490: PUSH
61491: LD_INT 25
61493: PUSH
61494: LD_INT 26
61496: PUSH
61497: LD_INT 27
61499: PUSH
61500: LD_INT 28
61502: PUSH
61503: LD_INT 29
61505: PUSH
61506: LD_INT 30
61508: PUSH
61509: LD_INT 31
61511: PUSH
61512: LD_INT 32
61514: PUSH
61515: LD_INT 33
61517: PUSH
61518: LD_INT 34
61520: PUSH
61521: LD_INT 35
61523: PUSH
61524: LD_INT 36
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 101
61567: PUSH
61568: LD_INT 102
61570: PUSH
61571: LD_INT 103
61573: PUSH
61574: LD_INT 104
61576: PUSH
61577: LD_INT 105
61579: PUSH
61580: LD_INT 106
61582: PUSH
61583: LD_INT 107
61585: PUSH
61586: LD_INT 108
61588: PUSH
61589: LD_INT 109
61591: PUSH
61592: LD_INT 110
61594: PUSH
61595: LD_INT 111
61597: PUSH
61598: LD_INT 112
61600: PUSH
61601: LD_INT 113
61603: PUSH
61604: LD_INT 114
61606: PUSH
61607: LD_INT 115
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: ST_TO_ADDR
61631: GO 61634
61633: POP
// end else
61634: GO 61853
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
61636: LD_ADDR_VAR 0 1
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: LD_INT 4
61652: PUSH
61653: LD_INT 5
61655: PUSH
61656: LD_INT 6
61658: PUSH
61659: LD_INT 7
61661: PUSH
61662: LD_INT 8
61664: PUSH
61665: LD_INT 9
61667: PUSH
61668: LD_INT 10
61670: PUSH
61671: LD_INT 11
61673: PUSH
61674: LD_INT 12
61676: PUSH
61677: LD_INT 13
61679: PUSH
61680: LD_INT 14
61682: PUSH
61683: LD_INT 15
61685: PUSH
61686: LD_INT 16
61688: PUSH
61689: LD_INT 17
61691: PUSH
61692: LD_INT 18
61694: PUSH
61695: LD_INT 19
61697: PUSH
61698: LD_INT 20
61700: PUSH
61701: LD_INT 21
61703: PUSH
61704: LD_INT 22
61706: PUSH
61707: LD_INT 23
61709: PUSH
61710: LD_INT 24
61712: PUSH
61713: LD_INT 25
61715: PUSH
61716: LD_INT 26
61718: PUSH
61719: LD_INT 27
61721: PUSH
61722: LD_INT 28
61724: PUSH
61725: LD_INT 29
61727: PUSH
61728: LD_INT 30
61730: PUSH
61731: LD_INT 31
61733: PUSH
61734: LD_INT 32
61736: PUSH
61737: LD_INT 33
61739: PUSH
61740: LD_INT 34
61742: PUSH
61743: LD_INT 35
61745: PUSH
61746: LD_INT 36
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 101
61789: PUSH
61790: LD_INT 102
61792: PUSH
61793: LD_INT 103
61795: PUSH
61796: LD_INT 104
61798: PUSH
61799: LD_INT 105
61801: PUSH
61802: LD_INT 106
61804: PUSH
61805: LD_INT 107
61807: PUSH
61808: LD_INT 108
61810: PUSH
61811: LD_INT 109
61813: PUSH
61814: LD_INT 110
61816: PUSH
61817: LD_INT 111
61819: PUSH
61820: LD_INT 112
61822: PUSH
61823: LD_INT 113
61825: PUSH
61826: LD_INT 114
61828: PUSH
61829: LD_INT 115
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: ST_TO_ADDR
// if result then
61853: LD_VAR 0 1
61857: IFFALSE 62146
// begin normal :=  ;
61859: LD_ADDR_VAR 0 3
61863: PUSH
61864: LD_STRING 
61866: ST_TO_ADDR
// hardcore :=  ;
61867: LD_ADDR_VAR 0 4
61871: PUSH
61872: LD_STRING 
61874: ST_TO_ADDR
// for i = 1 to normalCounter do
61875: LD_ADDR_VAR 0 5
61879: PUSH
61880: DOUBLE
61881: LD_INT 1
61883: DEC
61884: ST_TO_ADDR
61885: LD_EXP 42
61889: PUSH
61890: FOR_TO
61891: IFFALSE 61992
// begin tmp := 0 ;
61893: LD_ADDR_VAR 0 2
61897: PUSH
61898: LD_STRING 0
61900: ST_TO_ADDR
// if result [ 1 ] then
61901: LD_VAR 0 1
61905: PUSH
61906: LD_INT 1
61908: ARRAY
61909: IFFALSE 61974
// if result [ 1 ] [ 1 ] = i then
61911: LD_VAR 0 1
61915: PUSH
61916: LD_INT 1
61918: ARRAY
61919: PUSH
61920: LD_INT 1
61922: ARRAY
61923: PUSH
61924: LD_VAR 0 5
61928: EQUAL
61929: IFFALSE 61974
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61931: LD_ADDR_VAR 0 1
61935: PUSH
61936: LD_VAR 0 1
61940: PPUSH
61941: LD_INT 1
61943: PPUSH
61944: LD_VAR 0 1
61948: PUSH
61949: LD_INT 1
61951: ARRAY
61952: PPUSH
61953: LD_INT 1
61955: PPUSH
61956: CALL_OW 3
61960: PPUSH
61961: CALL_OW 1
61965: ST_TO_ADDR
// tmp := 1 ;
61966: LD_ADDR_VAR 0 2
61970: PUSH
61971: LD_STRING 1
61973: ST_TO_ADDR
// end ; normal := normal & tmp ;
61974: LD_ADDR_VAR 0 3
61978: PUSH
61979: LD_VAR 0 3
61983: PUSH
61984: LD_VAR 0 2
61988: STR
61989: ST_TO_ADDR
// end ;
61990: GO 61890
61992: POP
61993: POP
// for i = 1 to hardcoreCounter do
61994: LD_ADDR_VAR 0 5
61998: PUSH
61999: DOUBLE
62000: LD_INT 1
62002: DEC
62003: ST_TO_ADDR
62004: LD_EXP 43
62008: PUSH
62009: FOR_TO
62010: IFFALSE 62115
// begin tmp := 0 ;
62012: LD_ADDR_VAR 0 2
62016: PUSH
62017: LD_STRING 0
62019: ST_TO_ADDR
// if result [ 2 ] then
62020: LD_VAR 0 1
62024: PUSH
62025: LD_INT 2
62027: ARRAY
62028: IFFALSE 62097
// if result [ 2 ] [ 1 ] = 100 + i then
62030: LD_VAR 0 1
62034: PUSH
62035: LD_INT 2
62037: ARRAY
62038: PUSH
62039: LD_INT 1
62041: ARRAY
62042: PUSH
62043: LD_INT 100
62045: PUSH
62046: LD_VAR 0 5
62050: PLUS
62051: EQUAL
62052: IFFALSE 62097
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62054: LD_ADDR_VAR 0 1
62058: PUSH
62059: LD_VAR 0 1
62063: PPUSH
62064: LD_INT 2
62066: PPUSH
62067: LD_VAR 0 1
62071: PUSH
62072: LD_INT 2
62074: ARRAY
62075: PPUSH
62076: LD_INT 1
62078: PPUSH
62079: CALL_OW 3
62083: PPUSH
62084: CALL_OW 1
62088: ST_TO_ADDR
// tmp := 1 ;
62089: LD_ADDR_VAR 0 2
62093: PUSH
62094: LD_STRING 1
62096: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62097: LD_ADDR_VAR 0 4
62101: PUSH
62102: LD_VAR 0 4
62106: PUSH
62107: LD_VAR 0 2
62111: STR
62112: ST_TO_ADDR
// end ;
62113: GO 62009
62115: POP
62116: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
62117: LD_STRING getStreamItemsFromMission("
62119: PUSH
62120: LD_VAR 0 3
62124: STR
62125: PUSH
62126: LD_STRING ","
62128: STR
62129: PUSH
62130: LD_VAR 0 4
62134: STR
62135: PUSH
62136: LD_STRING ")
62138: STR
62139: PPUSH
62140: CALL_OW 559
// end else
62144: GO 62153
// ToLua ( getStreamItemsFromMission("","") ) ;
62146: LD_STRING getStreamItemsFromMission("","")
62148: PPUSH
62149: CALL_OW 559
// end ;
62153: LD_VAR 0 1
62157: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62158: LD_EXP 41
62162: PUSH
62163: LD_EXP 46
62167: AND
62168: IFFALSE 62292
62170: GO 62172
62172: DISABLE
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
// begin enable ;
62177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
62178: LD_ADDR_VAR 0 2
62182: PUSH
62183: LD_INT 22
62185: PUSH
62186: LD_OWVAR 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: LD_INT 34
62200: PUSH
62201: LD_INT 7
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 34
62210: PUSH
62211: LD_INT 45
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 34
62220: PUSH
62221: LD_INT 28
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 34
62230: PUSH
62231: LD_INT 47
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PPUSH
62249: CALL_OW 69
62253: ST_TO_ADDR
// if not tmp then
62254: LD_VAR 0 2
62258: NOT
62259: IFFALSE 62263
// exit ;
62261: GO 62292
// for i in tmp do
62263: LD_ADDR_VAR 0 1
62267: PUSH
62268: LD_VAR 0 2
62272: PUSH
62273: FOR_IN
62274: IFFALSE 62290
// begin SetLives ( i , 0 ) ;
62276: LD_VAR 0 1
62280: PPUSH
62281: LD_INT 0
62283: PPUSH
62284: CALL_OW 234
// end ;
62288: GO 62273
62290: POP
62291: POP
// end ;
62292: PPOPN 2
62294: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
62295: LD_EXP 41
62299: PUSH
62300: LD_EXP 47
62304: AND
62305: IFFALSE 62389
62307: GO 62309
62309: DISABLE
62310: LD_INT 0
62312: PPUSH
62313: PPUSH
// begin enable ;
62314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
62315: LD_ADDR_VAR 0 2
62319: PUSH
62320: LD_INT 22
62322: PUSH
62323: LD_OWVAR 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 32
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PPUSH
62346: CALL_OW 69
62350: ST_TO_ADDR
// if not tmp then
62351: LD_VAR 0 2
62355: NOT
62356: IFFALSE 62360
// exit ;
62358: GO 62389
// for i in tmp do
62360: LD_ADDR_VAR 0 1
62364: PUSH
62365: LD_VAR 0 2
62369: PUSH
62370: FOR_IN
62371: IFFALSE 62387
// begin SetLives ( i , 0 ) ;
62373: LD_VAR 0 1
62377: PPUSH
62378: LD_INT 0
62380: PPUSH
62381: CALL_OW 234
// end ;
62385: GO 62370
62387: POP
62388: POP
// end ;
62389: PPOPN 2
62391: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
62392: LD_EXP 41
62396: PUSH
62397: LD_EXP 44
62401: AND
62402: IFFALSE 62495
62404: GO 62406
62406: DISABLE
62407: LD_INT 0
62409: PPUSH
// begin enable ;
62410: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
62411: LD_ADDR_VAR 0 1
62415: PUSH
62416: LD_INT 22
62418: PUSH
62419: LD_OWVAR 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 25
62433: PUSH
62434: LD_INT 5
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 25
62443: PUSH
62444: LD_INT 9
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 25
62453: PUSH
62454: LD_INT 8
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PPUSH
62471: CALL_OW 69
62475: PUSH
62476: FOR_IN
62477: IFFALSE 62493
// begin SetClass ( i , 1 ) ;
62479: LD_VAR 0 1
62483: PPUSH
62484: LD_INT 1
62486: PPUSH
62487: CALL_OW 336
// end ;
62491: GO 62476
62493: POP
62494: POP
// end ;
62495: PPOPN 1
62497: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
62498: LD_EXP 41
62502: PUSH
62503: LD_EXP 45
62507: AND
62508: PUSH
62509: LD_OWVAR 65
62513: PUSH
62514: LD_INT 7
62516: LESS
62517: AND
62518: IFFALSE 62532
62520: GO 62522
62522: DISABLE
// begin enable ;
62523: ENABLE
// game_speed := 7 ;
62524: LD_ADDR_OWVAR 65
62528: PUSH
62529: LD_INT 7
62531: ST_TO_ADDR
// end ;
62532: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
62533: LD_EXP 41
62537: PUSH
62538: LD_EXP 48
62542: AND
62543: IFFALSE 62745
62545: GO 62547
62547: DISABLE
62548: LD_INT 0
62550: PPUSH
62551: PPUSH
62552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62553: LD_ADDR_VAR 0 3
62557: PUSH
62558: LD_INT 81
62560: PUSH
62561: LD_OWVAR 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 21
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PPUSH
62584: CALL_OW 69
62588: ST_TO_ADDR
// if not tmp then
62589: LD_VAR 0 3
62593: NOT
62594: IFFALSE 62598
// exit ;
62596: GO 62745
// if tmp > 5 then
62598: LD_VAR 0 3
62602: PUSH
62603: LD_INT 5
62605: GREATER
62606: IFFALSE 62618
// k := 5 else
62608: LD_ADDR_VAR 0 2
62612: PUSH
62613: LD_INT 5
62615: ST_TO_ADDR
62616: GO 62628
// k := tmp ;
62618: LD_ADDR_VAR 0 2
62622: PUSH
62623: LD_VAR 0 3
62627: ST_TO_ADDR
// for i := 1 to k do
62628: LD_ADDR_VAR 0 1
62632: PUSH
62633: DOUBLE
62634: LD_INT 1
62636: DEC
62637: ST_TO_ADDR
62638: LD_VAR 0 2
62642: PUSH
62643: FOR_TO
62644: IFFALSE 62743
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
62646: LD_VAR 0 3
62650: PUSH
62651: LD_VAR 0 1
62655: ARRAY
62656: PPUSH
62657: LD_VAR 0 1
62661: PUSH
62662: LD_INT 4
62664: MOD
62665: PUSH
62666: LD_INT 1
62668: PLUS
62669: PPUSH
62670: CALL_OW 259
62674: PUSH
62675: LD_INT 10
62677: LESS
62678: IFFALSE 62741
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
62680: LD_VAR 0 3
62684: PUSH
62685: LD_VAR 0 1
62689: ARRAY
62690: PPUSH
62691: LD_VAR 0 1
62695: PUSH
62696: LD_INT 4
62698: MOD
62699: PUSH
62700: LD_INT 1
62702: PLUS
62703: PPUSH
62704: LD_VAR 0 3
62708: PUSH
62709: LD_VAR 0 1
62713: ARRAY
62714: PPUSH
62715: LD_VAR 0 1
62719: PUSH
62720: LD_INT 4
62722: MOD
62723: PUSH
62724: LD_INT 1
62726: PLUS
62727: PPUSH
62728: CALL_OW 259
62732: PUSH
62733: LD_INT 1
62735: PLUS
62736: PPUSH
62737: CALL_OW 237
62741: GO 62643
62743: POP
62744: POP
// end ;
62745: PPOPN 3
62747: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
62748: LD_EXP 41
62752: PUSH
62753: LD_EXP 49
62757: AND
62758: IFFALSE 62778
62760: GO 62762
62762: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
62763: LD_INT 4
62765: PPUSH
62766: LD_OWVAR 2
62770: PPUSH
62771: LD_INT 0
62773: PPUSH
62774: CALL_OW 324
62778: END
// every 0 0$1 trigger StreamModeActive and sShovel do
62779: LD_EXP 41
62783: PUSH
62784: LD_EXP 78
62788: AND
62789: IFFALSE 62809
62791: GO 62793
62793: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
62794: LD_INT 19
62796: PPUSH
62797: LD_OWVAR 2
62801: PPUSH
62802: LD_INT 0
62804: PPUSH
62805: CALL_OW 324
62809: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
62810: LD_EXP 41
62814: PUSH
62815: LD_EXP 50
62819: AND
62820: IFFALSE 62922
62822: GO 62824
62824: DISABLE
62825: LD_INT 0
62827: PPUSH
62828: PPUSH
// begin enable ;
62829: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
62830: LD_ADDR_VAR 0 2
62834: PUSH
62835: LD_INT 22
62837: PUSH
62838: LD_OWVAR 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: LD_INT 34
62852: PUSH
62853: LD_INT 11
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 34
62862: PUSH
62863: LD_INT 30
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PPUSH
62879: CALL_OW 69
62883: ST_TO_ADDR
// if not tmp then
62884: LD_VAR 0 2
62888: NOT
62889: IFFALSE 62893
// exit ;
62891: GO 62922
// for i in tmp do
62893: LD_ADDR_VAR 0 1
62897: PUSH
62898: LD_VAR 0 2
62902: PUSH
62903: FOR_IN
62904: IFFALSE 62920
// begin SetLives ( i , 0 ) ;
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_INT 0
62913: PPUSH
62914: CALL_OW 234
// end ;
62918: GO 62903
62920: POP
62921: POP
// end ;
62922: PPOPN 2
62924: END
// every 0 0$1 trigger StreamModeActive and sBunker do
62925: LD_EXP 41
62929: PUSH
62930: LD_EXP 51
62934: AND
62935: IFFALSE 62955
62937: GO 62939
62939: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
62940: LD_INT 32
62942: PPUSH
62943: LD_OWVAR 2
62947: PPUSH
62948: LD_INT 0
62950: PPUSH
62951: CALL_OW 324
62955: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
62956: LD_EXP 41
62960: PUSH
62961: LD_EXP 52
62965: AND
62966: IFFALSE 63147
62968: GO 62970
62970: DISABLE
62971: LD_INT 0
62973: PPUSH
62974: PPUSH
62975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
62976: LD_ADDR_VAR 0 2
62980: PUSH
62981: LD_INT 22
62983: PUSH
62984: LD_OWVAR 2
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 33
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PPUSH
63007: CALL_OW 69
63011: ST_TO_ADDR
// if not tmp then
63012: LD_VAR 0 2
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63147
// side := 0 ;
63021: LD_ADDR_VAR 0 3
63025: PUSH
63026: LD_INT 0
63028: ST_TO_ADDR
// for i := 1 to 8 do
63029: LD_ADDR_VAR 0 1
63033: PUSH
63034: DOUBLE
63035: LD_INT 1
63037: DEC
63038: ST_TO_ADDR
63039: LD_INT 8
63041: PUSH
63042: FOR_TO
63043: IFFALSE 63091
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63045: LD_OWVAR 2
63049: PUSH
63050: LD_VAR 0 1
63054: NONEQUAL
63055: PUSH
63056: LD_OWVAR 2
63060: PPUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 81
63070: PUSH
63071: LD_INT 2
63073: EQUAL
63074: AND
63075: IFFALSE 63089
// begin side := i ;
63077: LD_ADDR_VAR 0 3
63081: PUSH
63082: LD_VAR 0 1
63086: ST_TO_ADDR
// break ;
63087: GO 63091
// end ;
63089: GO 63042
63091: POP
63092: POP
// if not side then
63093: LD_VAR 0 3
63097: NOT
63098: IFFALSE 63102
// exit ;
63100: GO 63147
// for i := 1 to tmp do
63102: LD_ADDR_VAR 0 1
63106: PUSH
63107: DOUBLE
63108: LD_INT 1
63110: DEC
63111: ST_TO_ADDR
63112: LD_VAR 0 2
63116: PUSH
63117: FOR_TO
63118: IFFALSE 63145
// if Prob ( 60 ) then
63120: LD_INT 60
63122: PPUSH
63123: CALL_OW 13
63127: IFFALSE 63143
// SetSide ( i , side ) ;
63129: LD_VAR 0 1
63133: PPUSH
63134: LD_VAR 0 3
63138: PPUSH
63139: CALL_OW 235
63143: GO 63117
63145: POP
63146: POP
// end ;
63147: PPOPN 3
63149: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63150: LD_EXP 41
63154: PUSH
63155: LD_EXP 54
63159: AND
63160: IFFALSE 63279
63162: GO 63164
63164: DISABLE
63165: LD_INT 0
63167: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63168: LD_ADDR_VAR 0 1
63172: PUSH
63173: LD_INT 22
63175: PUSH
63176: LD_OWVAR 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 21
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: LD_INT 23
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: PPUSH
63217: CALL_OW 69
63221: PUSH
63222: FOR_IN
63223: IFFALSE 63277
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
63225: LD_VAR 0 1
63229: PPUSH
63230: CALL_OW 257
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: LD_INT 4
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: IN
63253: IFFALSE 63275
// SetClass ( un , rand ( 1 , 4 ) ) ;
63255: LD_VAR 0 1
63259: PPUSH
63260: LD_INT 1
63262: PPUSH
63263: LD_INT 4
63265: PPUSH
63266: CALL_OW 12
63270: PPUSH
63271: CALL_OW 336
63275: GO 63222
63277: POP
63278: POP
// end ;
63279: PPOPN 1
63281: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
63282: LD_EXP 41
63286: PUSH
63287: LD_EXP 53
63291: AND
63292: IFFALSE 63371
63294: GO 63296
63296: DISABLE
63297: LD_INT 0
63299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63300: LD_ADDR_VAR 0 1
63304: PUSH
63305: LD_INT 22
63307: PUSH
63308: LD_OWVAR 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 21
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PPUSH
63331: CALL_OW 69
63335: ST_TO_ADDR
// if not tmp then
63336: LD_VAR 0 1
63340: NOT
63341: IFFALSE 63345
// exit ;
63343: GO 63371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
63345: LD_VAR 0 1
63349: PUSH
63350: LD_INT 1
63352: PPUSH
63353: LD_VAR 0 1
63357: PPUSH
63358: CALL_OW 12
63362: ARRAY
63363: PPUSH
63364: LD_INT 100
63366: PPUSH
63367: CALL_OW 234
// end ;
63371: PPOPN 1
63373: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
63374: LD_EXP 41
63378: PUSH
63379: LD_EXP 55
63383: AND
63384: IFFALSE 63482
63386: GO 63388
63388: DISABLE
63389: LD_INT 0
63391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63392: LD_ADDR_VAR 0 1
63396: PUSH
63397: LD_INT 22
63399: PUSH
63400: LD_OWVAR 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 21
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PPUSH
63423: CALL_OW 69
63427: ST_TO_ADDR
// if not tmp then
63428: LD_VAR 0 1
63432: NOT
63433: IFFALSE 63437
// exit ;
63435: GO 63482
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
63437: LD_VAR 0 1
63441: PUSH
63442: LD_INT 1
63444: PPUSH
63445: LD_VAR 0 1
63449: PPUSH
63450: CALL_OW 12
63454: ARRAY
63455: PPUSH
63456: LD_INT 1
63458: PPUSH
63459: LD_INT 4
63461: PPUSH
63462: CALL_OW 12
63466: PPUSH
63467: LD_INT 3000
63469: PPUSH
63470: LD_INT 9000
63472: PPUSH
63473: CALL_OW 12
63477: PPUSH
63478: CALL_OW 492
// end ;
63482: PPOPN 1
63484: END
// every 0 0$1 trigger StreamModeActive and sDepot do
63485: LD_EXP 41
63489: PUSH
63490: LD_EXP 56
63494: AND
63495: IFFALSE 63515
63497: GO 63499
63499: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
63500: LD_INT 1
63502: PPUSH
63503: LD_OWVAR 2
63507: PPUSH
63508: LD_INT 0
63510: PPUSH
63511: CALL_OW 324
63515: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
63516: LD_EXP 41
63520: PUSH
63521: LD_EXP 57
63525: AND
63526: IFFALSE 63609
63528: GO 63530
63530: DISABLE
63531: LD_INT 0
63533: PPUSH
63534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63535: LD_ADDR_VAR 0 2
63539: PUSH
63540: LD_INT 22
63542: PUSH
63543: LD_OWVAR 2
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 21
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PPUSH
63566: CALL_OW 69
63570: ST_TO_ADDR
// if not tmp then
63571: LD_VAR 0 2
63575: NOT
63576: IFFALSE 63580
// exit ;
63578: GO 63609
// for i in tmp do
63580: LD_ADDR_VAR 0 1
63584: PUSH
63585: LD_VAR 0 2
63589: PUSH
63590: FOR_IN
63591: IFFALSE 63607
// SetBLevel ( i , 10 ) ;
63593: LD_VAR 0 1
63597: PPUSH
63598: LD_INT 10
63600: PPUSH
63601: CALL_OW 241
63605: GO 63590
63607: POP
63608: POP
// end ;
63609: PPOPN 2
63611: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
63612: LD_EXP 41
63616: PUSH
63617: LD_EXP 58
63621: AND
63622: IFFALSE 63733
63624: GO 63626
63626: DISABLE
63627: LD_INT 0
63629: PPUSH
63630: PPUSH
63631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63632: LD_ADDR_VAR 0 3
63636: PUSH
63637: LD_INT 22
63639: PUSH
63640: LD_OWVAR 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 25
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PPUSH
63663: CALL_OW 69
63667: ST_TO_ADDR
// if not tmp then
63668: LD_VAR 0 3
63672: NOT
63673: IFFALSE 63677
// exit ;
63675: GO 63733
// un := tmp [ rand ( 1 , tmp ) ] ;
63677: LD_ADDR_VAR 0 2
63681: PUSH
63682: LD_VAR 0 3
63686: PUSH
63687: LD_INT 1
63689: PPUSH
63690: LD_VAR 0 3
63694: PPUSH
63695: CALL_OW 12
63699: ARRAY
63700: ST_TO_ADDR
// if Crawls ( un ) then
63701: LD_VAR 0 2
63705: PPUSH
63706: CALL_OW 318
63710: IFFALSE 63721
// ComWalk ( un ) ;
63712: LD_VAR 0 2
63716: PPUSH
63717: CALL_OW 138
// SetClass ( un , class_sniper ) ;
63721: LD_VAR 0 2
63725: PPUSH
63726: LD_INT 5
63728: PPUSH
63729: CALL_OW 336
// end ;
63733: PPOPN 3
63735: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
63736: LD_EXP 41
63740: PUSH
63741: LD_EXP 59
63745: AND
63746: PUSH
63747: LD_OWVAR 67
63751: PUSH
63752: LD_INT 3
63754: LESS
63755: AND
63756: IFFALSE 63775
63758: GO 63760
63760: DISABLE
// Difficulty := Difficulty + 1 ;
63761: LD_ADDR_OWVAR 67
63765: PUSH
63766: LD_OWVAR 67
63770: PUSH
63771: LD_INT 1
63773: PLUS
63774: ST_TO_ADDR
63775: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
63776: LD_EXP 41
63780: PUSH
63781: LD_EXP 60
63785: AND
63786: IFFALSE 63889
63788: GO 63790
63790: DISABLE
63791: LD_INT 0
63793: PPUSH
// begin for i := 1 to 5 do
63794: LD_ADDR_VAR 0 1
63798: PUSH
63799: DOUBLE
63800: LD_INT 1
63802: DEC
63803: ST_TO_ADDR
63804: LD_INT 5
63806: PUSH
63807: FOR_TO
63808: IFFALSE 63887
// begin uc_nation := nation_nature ;
63810: LD_ADDR_OWVAR 21
63814: PUSH
63815: LD_INT 0
63817: ST_TO_ADDR
// uc_side := 0 ;
63818: LD_ADDR_OWVAR 20
63822: PUSH
63823: LD_INT 0
63825: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63826: LD_ADDR_OWVAR 29
63830: PUSH
63831: LD_INT 12
63833: PUSH
63834: LD_INT 12
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: ST_TO_ADDR
// hc_agressivity := 20 ;
63841: LD_ADDR_OWVAR 35
63845: PUSH
63846: LD_INT 20
63848: ST_TO_ADDR
// hc_class := class_tiger ;
63849: LD_ADDR_OWVAR 28
63853: PUSH
63854: LD_INT 14
63856: ST_TO_ADDR
// hc_gallery :=  ;
63857: LD_ADDR_OWVAR 33
63861: PUSH
63862: LD_STRING 
63864: ST_TO_ADDR
// hc_name :=  ;
63865: LD_ADDR_OWVAR 26
63869: PUSH
63870: LD_STRING 
63872: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
63873: CALL_OW 44
63877: PPUSH
63878: LD_INT 0
63880: PPUSH
63881: CALL_OW 51
// end ;
63885: GO 63807
63887: POP
63888: POP
// end ;
63889: PPOPN 1
63891: END
// every 0 0$1 trigger StreamModeActive and sBomb do
63892: LD_EXP 41
63896: PUSH
63897: LD_EXP 61
63901: AND
63902: IFFALSE 63911
63904: GO 63906
63906: DISABLE
// StreamSibBomb ;
63907: CALL 63912 0 0
63911: END
// export function StreamSibBomb ; var i , x , y ; begin
63912: LD_INT 0
63914: PPUSH
63915: PPUSH
63916: PPUSH
63917: PPUSH
// result := false ;
63918: LD_ADDR_VAR 0 1
63922: PUSH
63923: LD_INT 0
63925: ST_TO_ADDR
// for i := 1 to 16 do
63926: LD_ADDR_VAR 0 2
63930: PUSH
63931: DOUBLE
63932: LD_INT 1
63934: DEC
63935: ST_TO_ADDR
63936: LD_INT 16
63938: PUSH
63939: FOR_TO
63940: IFFALSE 64139
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63942: LD_ADDR_VAR 0 3
63946: PUSH
63947: LD_INT 10
63949: PUSH
63950: LD_INT 20
63952: PUSH
63953: LD_INT 30
63955: PUSH
63956: LD_INT 40
63958: PUSH
63959: LD_INT 50
63961: PUSH
63962: LD_INT 60
63964: PUSH
63965: LD_INT 70
63967: PUSH
63968: LD_INT 80
63970: PUSH
63971: LD_INT 90
63973: PUSH
63974: LD_INT 100
63976: PUSH
63977: LD_INT 110
63979: PUSH
63980: LD_INT 120
63982: PUSH
63983: LD_INT 130
63985: PUSH
63986: LD_INT 140
63988: PUSH
63989: LD_INT 150
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PPUSH
64012: LD_INT 15
64014: PPUSH
64015: CALL_OW 12
64019: ARRAY
64020: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64021: LD_ADDR_VAR 0 4
64025: PUSH
64026: LD_INT 10
64028: PUSH
64029: LD_INT 20
64031: PUSH
64032: LD_INT 30
64034: PUSH
64035: LD_INT 40
64037: PUSH
64038: LD_INT 50
64040: PUSH
64041: LD_INT 60
64043: PUSH
64044: LD_INT 70
64046: PUSH
64047: LD_INT 80
64049: PUSH
64050: LD_INT 90
64052: PUSH
64053: LD_INT 100
64055: PUSH
64056: LD_INT 110
64058: PUSH
64059: LD_INT 120
64061: PUSH
64062: LD_INT 130
64064: PUSH
64065: LD_INT 140
64067: PUSH
64068: LD_INT 150
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PPUSH
64091: LD_INT 15
64093: PPUSH
64094: CALL_OW 12
64098: ARRAY
64099: ST_TO_ADDR
// if ValidHex ( x , y ) then
64100: LD_VAR 0 3
64104: PPUSH
64105: LD_VAR 0 4
64109: PPUSH
64110: CALL_OW 488
64114: IFFALSE 64137
// begin result := [ x , y ] ;
64116: LD_ADDR_VAR 0 1
64120: PUSH
64121: LD_VAR 0 3
64125: PUSH
64126: LD_VAR 0 4
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: ST_TO_ADDR
// break ;
64135: GO 64139
// end ; end ;
64137: GO 63939
64139: POP
64140: POP
// if result then
64141: LD_VAR 0 1
64145: IFFALSE 64205
// begin ToLua ( playSibBomb() ) ;
64147: LD_STRING playSibBomb()
64149: PPUSH
64150: CALL_OW 559
// wait ( 0 0$14 ) ;
64154: LD_INT 490
64156: PPUSH
64157: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64161: LD_VAR 0 1
64165: PUSH
64166: LD_INT 1
64168: ARRAY
64169: PPUSH
64170: LD_VAR 0 1
64174: PUSH
64175: LD_INT 2
64177: ARRAY
64178: PPUSH
64179: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
64183: LD_VAR 0 1
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PPUSH
64192: LD_VAR 0 1
64196: PUSH
64197: LD_INT 2
64199: ARRAY
64200: PPUSH
64201: CALL_OW 429
// end ; end ;
64205: LD_VAR 0 1
64209: RET
// every 0 0$1 trigger StreamModeActive and sReset do
64210: LD_EXP 41
64214: PUSH
64215: LD_EXP 63
64219: AND
64220: IFFALSE 64232
64222: GO 64224
64224: DISABLE
// YouLost (  ) ;
64225: LD_STRING 
64227: PPUSH
64228: CALL_OW 104
64232: END
// every 0 0$1 trigger StreamModeActive and sFog do
64233: LD_EXP 41
64237: PUSH
64238: LD_EXP 62
64242: AND
64243: IFFALSE 64257
64245: GO 64247
64247: DISABLE
// FogOff ( your_side ) ;
64248: LD_OWVAR 2
64252: PPUSH
64253: CALL_OW 344
64257: END
// every 0 0$1 trigger StreamModeActive and sSun do
64258: LD_EXP 41
64262: PUSH
64263: LD_EXP 64
64267: AND
64268: IFFALSE 64296
64270: GO 64272
64272: DISABLE
// begin solar_recharge_percent := 0 ;
64273: LD_ADDR_OWVAR 79
64277: PUSH
64278: LD_INT 0
64280: ST_TO_ADDR
// wait ( 5 5$00 ) ;
64281: LD_INT 10500
64283: PPUSH
64284: CALL_OW 67
// solar_recharge_percent := 100 ;
64288: LD_ADDR_OWVAR 79
64292: PUSH
64293: LD_INT 100
64295: ST_TO_ADDR
// end ;
64296: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
64297: LD_EXP 41
64301: PUSH
64302: LD_EXP 65
64306: AND
64307: IFFALSE 64546
64309: GO 64311
64311: DISABLE
64312: LD_INT 0
64314: PPUSH
64315: PPUSH
64316: PPUSH
// begin tmp := [ ] ;
64317: LD_ADDR_VAR 0 3
64321: PUSH
64322: EMPTY
64323: ST_TO_ADDR
// for i := 1 to 6 do
64324: LD_ADDR_VAR 0 1
64328: PUSH
64329: DOUBLE
64330: LD_INT 1
64332: DEC
64333: ST_TO_ADDR
64334: LD_INT 6
64336: PUSH
64337: FOR_TO
64338: IFFALSE 64443
// begin uc_nation := nation_nature ;
64340: LD_ADDR_OWVAR 21
64344: PUSH
64345: LD_INT 0
64347: ST_TO_ADDR
// uc_side := 0 ;
64348: LD_ADDR_OWVAR 20
64352: PUSH
64353: LD_INT 0
64355: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64356: LD_ADDR_OWVAR 29
64360: PUSH
64361: LD_INT 12
64363: PUSH
64364: LD_INT 12
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// hc_agressivity := 20 ;
64371: LD_ADDR_OWVAR 35
64375: PUSH
64376: LD_INT 20
64378: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
64379: LD_ADDR_OWVAR 28
64383: PUSH
64384: LD_INT 17
64386: ST_TO_ADDR
// hc_gallery :=  ;
64387: LD_ADDR_OWVAR 33
64391: PUSH
64392: LD_STRING 
64394: ST_TO_ADDR
// hc_name :=  ;
64395: LD_ADDR_OWVAR 26
64399: PUSH
64400: LD_STRING 
64402: ST_TO_ADDR
// un := CreateHuman ;
64403: LD_ADDR_VAR 0 2
64407: PUSH
64408: CALL_OW 44
64412: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
64413: LD_VAR 0 2
64417: PPUSH
64418: LD_INT 1
64420: PPUSH
64421: CALL_OW 51
// tmp := tmp ^ un ;
64425: LD_ADDR_VAR 0 3
64429: PUSH
64430: LD_VAR 0 3
64434: PUSH
64435: LD_VAR 0 2
64439: ADD
64440: ST_TO_ADDR
// end ;
64441: GO 64337
64443: POP
64444: POP
// repeat wait ( 0 0$1 ) ;
64445: LD_INT 35
64447: PPUSH
64448: CALL_OW 67
// for un in tmp do
64452: LD_ADDR_VAR 0 2
64456: PUSH
64457: LD_VAR 0 3
64461: PUSH
64462: FOR_IN
64463: IFFALSE 64537
// begin if IsDead ( un ) then
64465: LD_VAR 0 2
64469: PPUSH
64470: CALL_OW 301
64474: IFFALSE 64494
// begin tmp := tmp diff un ;
64476: LD_ADDR_VAR 0 3
64480: PUSH
64481: LD_VAR 0 3
64485: PUSH
64486: LD_VAR 0 2
64490: DIFF
64491: ST_TO_ADDR
// continue ;
64492: GO 64462
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
64494: LD_VAR 0 2
64498: PPUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 22
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PPUSH
64516: CALL_OW 69
64520: PPUSH
64521: LD_VAR 0 2
64525: PPUSH
64526: CALL_OW 74
64530: PPUSH
64531: CALL_OW 115
// end ;
64535: GO 64462
64537: POP
64538: POP
// until not tmp ;
64539: LD_VAR 0 3
64543: NOT
64544: IFFALSE 64445
// end ;
64546: PPOPN 3
64548: END
// every 0 0$1 trigger StreamModeActive and sTroll do
64549: LD_EXP 41
64553: PUSH
64554: LD_EXP 66
64558: AND
64559: IFFALSE 64613
64561: GO 64563
64563: DISABLE
// begin ToLua ( displayTroll(); ) ;
64564: LD_STRING displayTroll();
64566: PPUSH
64567: CALL_OW 559
// wait ( 3 3$00 ) ;
64571: LD_INT 6300
64573: PPUSH
64574: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64578: LD_STRING hideTroll();
64580: PPUSH
64581: CALL_OW 559
// wait ( 1 1$00 ) ;
64585: LD_INT 2100
64587: PPUSH
64588: CALL_OW 67
// ToLua ( displayTroll(); ) ;
64592: LD_STRING displayTroll();
64594: PPUSH
64595: CALL_OW 559
// wait ( 1 1$00 ) ;
64599: LD_INT 2100
64601: PPUSH
64602: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64606: LD_STRING hideTroll();
64608: PPUSH
64609: CALL_OW 559
// end ;
64613: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
64614: LD_EXP 41
64618: PUSH
64619: LD_EXP 67
64623: AND
64624: IFFALSE 64687
64626: GO 64628
64628: DISABLE
64629: LD_INT 0
64631: PPUSH
// begin p := 0 ;
64632: LD_ADDR_VAR 0 1
64636: PUSH
64637: LD_INT 0
64639: ST_TO_ADDR
// repeat game_speed := 1 ;
64640: LD_ADDR_OWVAR 65
64644: PUSH
64645: LD_INT 1
64647: ST_TO_ADDR
// wait ( 0 0$1 ) ;
64648: LD_INT 35
64650: PPUSH
64651: CALL_OW 67
// p := p + 1 ;
64655: LD_ADDR_VAR 0 1
64659: PUSH
64660: LD_VAR 0 1
64664: PUSH
64665: LD_INT 1
64667: PLUS
64668: ST_TO_ADDR
// until p >= 60 ;
64669: LD_VAR 0 1
64673: PUSH
64674: LD_INT 60
64676: GREATEREQUAL
64677: IFFALSE 64640
// game_speed := 4 ;
64679: LD_ADDR_OWVAR 65
64683: PUSH
64684: LD_INT 4
64686: ST_TO_ADDR
// end ;
64687: PPOPN 1
64689: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
64690: LD_EXP 41
64694: PUSH
64695: LD_EXP 68
64699: AND
64700: IFFALSE 64846
64702: GO 64704
64704: DISABLE
64705: LD_INT 0
64707: PPUSH
64708: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64709: LD_ADDR_VAR 0 1
64713: PUSH
64714: LD_INT 22
64716: PUSH
64717: LD_OWVAR 2
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 30
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 30
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PPUSH
64758: CALL_OW 69
64762: ST_TO_ADDR
// if not depot then
64763: LD_VAR 0 1
64767: NOT
64768: IFFALSE 64772
// exit ;
64770: GO 64846
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
64772: LD_ADDR_VAR 0 2
64776: PUSH
64777: LD_VAR 0 1
64781: PUSH
64782: LD_INT 1
64784: PPUSH
64785: LD_VAR 0 1
64789: PPUSH
64790: CALL_OW 12
64794: ARRAY
64795: PPUSH
64796: CALL_OW 274
64800: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
64801: LD_VAR 0 2
64805: PPUSH
64806: LD_INT 1
64808: PPUSH
64809: LD_INT 0
64811: PPUSH
64812: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
64816: LD_VAR 0 2
64820: PPUSH
64821: LD_INT 2
64823: PPUSH
64824: LD_INT 0
64826: PPUSH
64827: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
64831: LD_VAR 0 2
64835: PPUSH
64836: LD_INT 3
64838: PPUSH
64839: LD_INT 0
64841: PPUSH
64842: CALL_OW 277
// end ;
64846: PPOPN 2
64848: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
64849: LD_EXP 41
64853: PUSH
64854: LD_EXP 69
64858: AND
64859: IFFALSE 64956
64861: GO 64863
64863: DISABLE
64864: LD_INT 0
64866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64867: LD_ADDR_VAR 0 1
64871: PUSH
64872: LD_INT 22
64874: PUSH
64875: LD_OWVAR 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 21
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 23
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: PPUSH
64916: CALL_OW 69
64920: ST_TO_ADDR
// if not tmp then
64921: LD_VAR 0 1
64925: NOT
64926: IFFALSE 64930
// exit ;
64928: GO 64956
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
64930: LD_VAR 0 1
64934: PUSH
64935: LD_INT 1
64937: PPUSH
64938: LD_VAR 0 1
64942: PPUSH
64943: CALL_OW 12
64947: ARRAY
64948: PPUSH
64949: LD_INT 200
64951: PPUSH
64952: CALL_OW 234
// end ;
64956: PPOPN 1
64958: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
64959: LD_EXP 41
64963: PUSH
64964: LD_EXP 70
64968: AND
64969: IFFALSE 65048
64971: GO 64973
64973: DISABLE
64974: LD_INT 0
64976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
64977: LD_ADDR_VAR 0 1
64981: PUSH
64982: LD_INT 22
64984: PUSH
64985: LD_OWVAR 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 21
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PPUSH
65008: CALL_OW 69
65012: ST_TO_ADDR
// if not tmp then
65013: LD_VAR 0 1
65017: NOT
65018: IFFALSE 65022
// exit ;
65020: GO 65048
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65022: LD_VAR 0 1
65026: PUSH
65027: LD_INT 1
65029: PPUSH
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 12
65039: ARRAY
65040: PPUSH
65041: LD_INT 60
65043: PPUSH
65044: CALL_OW 234
// end ;
65048: PPOPN 1
65050: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65051: LD_EXP 41
65055: PUSH
65056: LD_EXP 71
65060: AND
65061: IFFALSE 65160
65063: GO 65065
65065: DISABLE
65066: LD_INT 0
65068: PPUSH
65069: PPUSH
// begin enable ;
65070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65071: LD_ADDR_VAR 0 1
65075: PUSH
65076: LD_INT 22
65078: PUSH
65079: LD_OWVAR 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 61
65090: PUSH
65091: EMPTY
65092: LIST
65093: PUSH
65094: LD_INT 33
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: PPUSH
65109: CALL_OW 69
65113: ST_TO_ADDR
// if not tmp then
65114: LD_VAR 0 1
65118: NOT
65119: IFFALSE 65123
// exit ;
65121: GO 65160
// for i in tmp do
65123: LD_ADDR_VAR 0 2
65127: PUSH
65128: LD_VAR 0 1
65132: PUSH
65133: FOR_IN
65134: IFFALSE 65158
// if IsControledBy ( i ) then
65136: LD_VAR 0 2
65140: PPUSH
65141: CALL_OW 312
65145: IFFALSE 65156
// ComUnlink ( i ) ;
65147: LD_VAR 0 2
65151: PPUSH
65152: CALL_OW 136
65156: GO 65133
65158: POP
65159: POP
// end ;
65160: PPOPN 2
65162: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65163: LD_EXP 41
65167: PUSH
65168: LD_EXP 72
65172: AND
65173: IFFALSE 65313
65175: GO 65177
65177: DISABLE
65178: LD_INT 0
65180: PPUSH
65181: PPUSH
// begin ToLua ( displayPowell(); ) ;
65182: LD_STRING displayPowell();
65184: PPUSH
65185: CALL_OW 559
// uc_side := 0 ;
65189: LD_ADDR_OWVAR 20
65193: PUSH
65194: LD_INT 0
65196: ST_TO_ADDR
// uc_nation := 2 ;
65197: LD_ADDR_OWVAR 21
65201: PUSH
65202: LD_INT 2
65204: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
65205: LD_ADDR_OWVAR 37
65209: PUSH
65210: LD_INT 14
65212: ST_TO_ADDR
// vc_engine := engine_siberite ;
65213: LD_ADDR_OWVAR 39
65217: PUSH
65218: LD_INT 3
65220: ST_TO_ADDR
// vc_control := control_apeman ;
65221: LD_ADDR_OWVAR 38
65225: PUSH
65226: LD_INT 5
65228: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
65229: LD_ADDR_OWVAR 40
65233: PUSH
65234: LD_INT 29
65236: ST_TO_ADDR
// un := CreateVehicle ;
65237: LD_ADDR_VAR 0 2
65241: PUSH
65242: CALL_OW 45
65246: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65247: LD_VAR 0 2
65251: PPUSH
65252: LD_INT 1
65254: PPUSH
65255: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65259: LD_INT 35
65261: PPUSH
65262: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65266: LD_VAR 0 2
65270: PPUSH
65271: LD_INT 22
65273: PUSH
65274: LD_OWVAR 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PPUSH
65283: CALL_OW 69
65287: PPUSH
65288: LD_VAR 0 2
65292: PPUSH
65293: CALL_OW 74
65297: PPUSH
65298: CALL_OW 115
// until IsDead ( un ) ;
65302: LD_VAR 0 2
65306: PPUSH
65307: CALL_OW 301
65311: IFFALSE 65259
// end ;
65313: PPOPN 2
65315: END
// every 0 0$1 trigger StreamModeActive and sStu do
65316: LD_EXP 41
65320: PUSH
65321: LD_EXP 80
65325: AND
65326: IFFALSE 65342
65328: GO 65330
65330: DISABLE
// begin ToLua ( displayStucuk(); ) ;
65331: LD_STRING displayStucuk();
65333: PPUSH
65334: CALL_OW 559
// ResetFog ;
65338: CALL_OW 335
// end ;
65342: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
65343: LD_EXP 41
65347: PUSH
65348: LD_EXP 73
65352: AND
65353: IFFALSE 65494
65355: GO 65357
65357: DISABLE
65358: LD_INT 0
65360: PPUSH
65361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65362: LD_ADDR_VAR 0 2
65366: PUSH
65367: LD_INT 22
65369: PUSH
65370: LD_OWVAR 2
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 21
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PPUSH
65393: CALL_OW 69
65397: ST_TO_ADDR
// if not tmp then
65398: LD_VAR 0 2
65402: NOT
65403: IFFALSE 65407
// exit ;
65405: GO 65494
// un := tmp [ rand ( 1 , tmp ) ] ;
65407: LD_ADDR_VAR 0 1
65411: PUSH
65412: LD_VAR 0 2
65416: PUSH
65417: LD_INT 1
65419: PPUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: CALL_OW 12
65429: ARRAY
65430: ST_TO_ADDR
// SetSide ( un , 0 ) ;
65431: LD_VAR 0 1
65435: PPUSH
65436: LD_INT 0
65438: PPUSH
65439: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
65443: LD_VAR 0 1
65447: PPUSH
65448: LD_OWVAR 3
65452: PUSH
65453: LD_VAR 0 1
65457: DIFF
65458: PPUSH
65459: LD_VAR 0 1
65463: PPUSH
65464: CALL_OW 74
65468: PPUSH
65469: CALL_OW 115
// wait ( 0 0$20 ) ;
65473: LD_INT 700
65475: PPUSH
65476: CALL_OW 67
// SetSide ( un , your_side ) ;
65480: LD_VAR 0 1
65484: PPUSH
65485: LD_OWVAR 2
65489: PPUSH
65490: CALL_OW 235
// end ;
65494: PPOPN 2
65496: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
65497: LD_EXP 41
65501: PUSH
65502: LD_EXP 74
65506: AND
65507: IFFALSE 65613
65509: GO 65511
65511: DISABLE
65512: LD_INT 0
65514: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65515: LD_ADDR_VAR 0 1
65519: PUSH
65520: LD_INT 22
65522: PUSH
65523: LD_OWVAR 2
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: LD_INT 30
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 30
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PPUSH
65564: CALL_OW 69
65568: ST_TO_ADDR
// if not depot then
65569: LD_VAR 0 1
65573: NOT
65574: IFFALSE 65578
// exit ;
65576: GO 65613
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
65578: LD_VAR 0 1
65582: PUSH
65583: LD_INT 1
65585: ARRAY
65586: PPUSH
65587: CALL_OW 250
65591: PPUSH
65592: LD_VAR 0 1
65596: PUSH
65597: LD_INT 1
65599: ARRAY
65600: PPUSH
65601: CALL_OW 251
65605: PPUSH
65606: LD_INT 70
65608: PPUSH
65609: CALL_OW 495
// end ;
65613: PPOPN 1
65615: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
65616: LD_EXP 41
65620: PUSH
65621: LD_EXP 75
65625: AND
65626: IFFALSE 65837
65628: GO 65630
65630: DISABLE
65631: LD_INT 0
65633: PPUSH
65634: PPUSH
65635: PPUSH
65636: PPUSH
65637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65638: LD_ADDR_VAR 0 5
65642: PUSH
65643: LD_INT 22
65645: PUSH
65646: LD_OWVAR 2
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 21
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PPUSH
65669: CALL_OW 69
65673: ST_TO_ADDR
// if not tmp then
65674: LD_VAR 0 5
65678: NOT
65679: IFFALSE 65683
// exit ;
65681: GO 65837
// for i in tmp do
65683: LD_ADDR_VAR 0 1
65687: PUSH
65688: LD_VAR 0 5
65692: PUSH
65693: FOR_IN
65694: IFFALSE 65835
// begin d := rand ( 0 , 5 ) ;
65696: LD_ADDR_VAR 0 4
65700: PUSH
65701: LD_INT 0
65703: PPUSH
65704: LD_INT 5
65706: PPUSH
65707: CALL_OW 12
65711: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
65712: LD_ADDR_VAR 0 2
65716: PUSH
65717: LD_VAR 0 1
65721: PPUSH
65722: CALL_OW 250
65726: PPUSH
65727: LD_VAR 0 4
65731: PPUSH
65732: LD_INT 3
65734: PPUSH
65735: LD_INT 12
65737: PPUSH
65738: CALL_OW 12
65742: PPUSH
65743: CALL_OW 272
65747: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
65748: LD_ADDR_VAR 0 3
65752: PUSH
65753: LD_VAR 0 1
65757: PPUSH
65758: CALL_OW 251
65762: PPUSH
65763: LD_VAR 0 4
65767: PPUSH
65768: LD_INT 3
65770: PPUSH
65771: LD_INT 12
65773: PPUSH
65774: CALL_OW 12
65778: PPUSH
65779: CALL_OW 273
65783: ST_TO_ADDR
// if ValidHex ( x , y ) then
65784: LD_VAR 0 2
65788: PPUSH
65789: LD_VAR 0 3
65793: PPUSH
65794: CALL_OW 488
65798: IFFALSE 65833
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
65800: LD_VAR 0 1
65804: PPUSH
65805: LD_VAR 0 2
65809: PPUSH
65810: LD_VAR 0 3
65814: PPUSH
65815: LD_INT 3
65817: PPUSH
65818: LD_INT 6
65820: PPUSH
65821: CALL_OW 12
65825: PPUSH
65826: LD_INT 1
65828: PPUSH
65829: CALL_OW 483
// end ;
65833: GO 65693
65835: POP
65836: POP
// end ;
65837: PPOPN 5
65839: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
65840: LD_EXP 41
65844: PUSH
65845: LD_EXP 76
65849: AND
65850: IFFALSE 65944
65852: GO 65854
65854: DISABLE
65855: LD_INT 0
65857: PPUSH
65858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
65859: LD_ADDR_VAR 0 2
65863: PUSH
65864: LD_INT 22
65866: PUSH
65867: LD_OWVAR 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 32
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 21
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: PPUSH
65901: CALL_OW 69
65905: ST_TO_ADDR
// if not tmp then
65906: LD_VAR 0 2
65910: NOT
65911: IFFALSE 65915
// exit ;
65913: GO 65944
// for i in tmp do
65915: LD_ADDR_VAR 0 1
65919: PUSH
65920: LD_VAR 0 2
65924: PUSH
65925: FOR_IN
65926: IFFALSE 65942
// SetFuel ( i , 0 ) ;
65928: LD_VAR 0 1
65932: PPUSH
65933: LD_INT 0
65935: PPUSH
65936: CALL_OW 240
65940: GO 65925
65942: POP
65943: POP
// end ;
65944: PPOPN 2
65946: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
65947: LD_EXP 41
65951: PUSH
65952: LD_EXP 77
65956: AND
65957: IFFALSE 66023
65959: GO 65961
65961: DISABLE
65962: LD_INT 0
65964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65965: LD_ADDR_VAR 0 1
65969: PUSH
65970: LD_INT 22
65972: PUSH
65973: LD_OWVAR 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 30
65984: PUSH
65985: LD_INT 29
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PPUSH
65996: CALL_OW 69
66000: ST_TO_ADDR
// if not tmp then
66001: LD_VAR 0 1
66005: NOT
66006: IFFALSE 66010
// exit ;
66008: GO 66023
// DestroyUnit ( tmp [ 1 ] ) ;
66010: LD_VAR 0 1
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PPUSH
66019: CALL_OW 65
// end ;
66023: PPOPN 1
66025: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66026: LD_EXP 41
66030: PUSH
66031: LD_EXP 79
66035: AND
66036: IFFALSE 66165
66038: GO 66040
66040: DISABLE
66041: LD_INT 0
66043: PPUSH
// begin uc_side := 0 ;
66044: LD_ADDR_OWVAR 20
66048: PUSH
66049: LD_INT 0
66051: ST_TO_ADDR
// uc_nation := nation_arabian ;
66052: LD_ADDR_OWVAR 21
66056: PUSH
66057: LD_INT 2
66059: ST_TO_ADDR
// hc_gallery :=  ;
66060: LD_ADDR_OWVAR 33
66064: PUSH
66065: LD_STRING 
66067: ST_TO_ADDR
// hc_name :=  ;
66068: LD_ADDR_OWVAR 26
66072: PUSH
66073: LD_STRING 
66075: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66076: LD_INT 1
66078: PPUSH
66079: LD_INT 11
66081: PPUSH
66082: LD_INT 10
66084: PPUSH
66085: CALL_OW 380
// un := CreateHuman ;
66089: LD_ADDR_VAR 0 1
66093: PUSH
66094: CALL_OW 44
66098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66099: LD_VAR 0 1
66103: PPUSH
66104: LD_INT 1
66106: PPUSH
66107: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66111: LD_INT 35
66113: PPUSH
66114: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66118: LD_VAR 0 1
66122: PPUSH
66123: LD_INT 22
66125: PUSH
66126: LD_OWVAR 2
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PPUSH
66135: CALL_OW 69
66139: PPUSH
66140: LD_VAR 0 1
66144: PPUSH
66145: CALL_OW 74
66149: PPUSH
66150: CALL_OW 115
// until IsDead ( un ) ;
66154: LD_VAR 0 1
66158: PPUSH
66159: CALL_OW 301
66163: IFFALSE 66111
// end ;
66165: PPOPN 1
66167: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66168: LD_EXP 41
66172: PUSH
66173: LD_EXP 81
66177: AND
66178: IFFALSE 66190
66180: GO 66182
66182: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
66183: LD_STRING earthquake(getX(game), 0, 32)
66185: PPUSH
66186: CALL_OW 559
66190: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
66191: LD_EXP 41
66195: PUSH
66196: LD_EXP 82
66200: AND
66201: IFFALSE 66292
66203: GO 66205
66205: DISABLE
66206: LD_INT 0
66208: PPUSH
// begin enable ;
66209: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
66210: LD_ADDR_VAR 0 1
66214: PUSH
66215: LD_INT 22
66217: PUSH
66218: LD_OWVAR 2
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 21
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 33
66239: PUSH
66240: LD_INT 3
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: PPUSH
66252: CALL_OW 69
66256: ST_TO_ADDR
// if not tmp then
66257: LD_VAR 0 1
66261: NOT
66262: IFFALSE 66266
// exit ;
66264: GO 66292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66266: LD_VAR 0 1
66270: PUSH
66271: LD_INT 1
66273: PPUSH
66274: LD_VAR 0 1
66278: PPUSH
66279: CALL_OW 12
66283: ARRAY
66284: PPUSH
66285: LD_INT 1
66287: PPUSH
66288: CALL_OW 234
// end ;
66292: PPOPN 1
66294: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
66295: LD_EXP 41
66299: PUSH
66300: LD_EXP 83
66304: AND
66305: IFFALSE 66446
66307: GO 66309
66309: DISABLE
66310: LD_INT 0
66312: PPUSH
66313: PPUSH
66314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: LD_INT 22
66322: PUSH
66323: LD_OWVAR 2
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 25
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PPUSH
66346: CALL_OW 69
66350: ST_TO_ADDR
// if not tmp then
66351: LD_VAR 0 3
66355: NOT
66356: IFFALSE 66360
// exit ;
66358: GO 66446
// un := tmp [ rand ( 1 , tmp ) ] ;
66360: LD_ADDR_VAR 0 2
66364: PUSH
66365: LD_VAR 0 3
66369: PUSH
66370: LD_INT 1
66372: PPUSH
66373: LD_VAR 0 3
66377: PPUSH
66378: CALL_OW 12
66382: ARRAY
66383: ST_TO_ADDR
// if Crawls ( un ) then
66384: LD_VAR 0 2
66388: PPUSH
66389: CALL_OW 318
66393: IFFALSE 66404
// ComWalk ( un ) ;
66395: LD_VAR 0 2
66399: PPUSH
66400: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
66404: LD_VAR 0 2
66408: PPUSH
66409: LD_INT 9
66411: PPUSH
66412: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
66416: LD_INT 28
66418: PPUSH
66419: LD_OWVAR 2
66423: PPUSH
66424: LD_INT 2
66426: PPUSH
66427: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
66431: LD_INT 29
66433: PPUSH
66434: LD_OWVAR 2
66438: PPUSH
66439: LD_INT 2
66441: PPUSH
66442: CALL_OW 322
// end ;
66446: PPOPN 3
66448: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
66449: LD_EXP 41
66453: PUSH
66454: LD_EXP 84
66458: AND
66459: IFFALSE 66570
66461: GO 66463
66463: DISABLE
66464: LD_INT 0
66466: PPUSH
66467: PPUSH
66468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_INT 22
66476: PUSH
66477: LD_OWVAR 2
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 25
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PPUSH
66500: CALL_OW 69
66504: ST_TO_ADDR
// if not tmp then
66505: LD_VAR 0 3
66509: NOT
66510: IFFALSE 66514
// exit ;
66512: GO 66570
// un := tmp [ rand ( 1 , tmp ) ] ;
66514: LD_ADDR_VAR 0 2
66518: PUSH
66519: LD_VAR 0 3
66523: PUSH
66524: LD_INT 1
66526: PPUSH
66527: LD_VAR 0 3
66531: PPUSH
66532: CALL_OW 12
66536: ARRAY
66537: ST_TO_ADDR
// if Crawls ( un ) then
66538: LD_VAR 0 2
66542: PPUSH
66543: CALL_OW 318
66547: IFFALSE 66558
// ComWalk ( un ) ;
66549: LD_VAR 0 2
66553: PPUSH
66554: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66558: LD_VAR 0 2
66562: PPUSH
66563: LD_INT 8
66565: PPUSH
66566: CALL_OW 336
// end ;
66570: PPOPN 3
66572: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
66573: LD_EXP 41
66577: PUSH
66578: LD_EXP 85
66582: AND
66583: IFFALSE 66727
66585: GO 66587
66587: DISABLE
66588: LD_INT 0
66590: PPUSH
66591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
66592: LD_ADDR_VAR 0 2
66596: PUSH
66597: LD_INT 22
66599: PUSH
66600: LD_OWVAR 2
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 21
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 2
66621: PUSH
66622: LD_INT 34
66624: PUSH
66625: LD_INT 12
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 34
66634: PUSH
66635: LD_INT 51
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 34
66644: PUSH
66645: LD_INT 32
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: PPUSH
66663: CALL_OW 69
66667: ST_TO_ADDR
// if not tmp then
66668: LD_VAR 0 2
66672: NOT
66673: IFFALSE 66677
// exit ;
66675: GO 66727
// for i in tmp do
66677: LD_ADDR_VAR 0 1
66681: PUSH
66682: LD_VAR 0 2
66686: PUSH
66687: FOR_IN
66688: IFFALSE 66725
// if GetCargo ( i , mat_artifact ) = 0 then
66690: LD_VAR 0 1
66694: PPUSH
66695: LD_INT 4
66697: PPUSH
66698: CALL_OW 289
66702: PUSH
66703: LD_INT 0
66705: EQUAL
66706: IFFALSE 66723
// SetCargo ( i , mat_siberit , 100 ) ;
66708: LD_VAR 0 1
66712: PPUSH
66713: LD_INT 3
66715: PPUSH
66716: LD_INT 100
66718: PPUSH
66719: CALL_OW 290
66723: GO 66687
66725: POP
66726: POP
// end ;
66727: PPOPN 2
66729: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
66730: LD_EXP 41
66734: PUSH
66735: LD_EXP 86
66739: AND
66740: IFFALSE 66923
66742: GO 66744
66744: DISABLE
66745: LD_INT 0
66747: PPUSH
66748: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66749: LD_ADDR_VAR 0 2
66753: PUSH
66754: LD_INT 22
66756: PUSH
66757: LD_OWVAR 2
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PPUSH
66766: CALL_OW 69
66770: ST_TO_ADDR
// if not tmp then
66771: LD_VAR 0 2
66775: NOT
66776: IFFALSE 66780
// exit ;
66778: GO 66923
// for i := 1 to 2 do
66780: LD_ADDR_VAR 0 1
66784: PUSH
66785: DOUBLE
66786: LD_INT 1
66788: DEC
66789: ST_TO_ADDR
66790: LD_INT 2
66792: PUSH
66793: FOR_TO
66794: IFFALSE 66921
// begin uc_side := your_side ;
66796: LD_ADDR_OWVAR 20
66800: PUSH
66801: LD_OWVAR 2
66805: ST_TO_ADDR
// uc_nation := nation_american ;
66806: LD_ADDR_OWVAR 21
66810: PUSH
66811: LD_INT 1
66813: ST_TO_ADDR
// vc_chassis := us_morphling ;
66814: LD_ADDR_OWVAR 37
66818: PUSH
66819: LD_INT 5
66821: ST_TO_ADDR
// vc_engine := engine_siberite ;
66822: LD_ADDR_OWVAR 39
66826: PUSH
66827: LD_INT 3
66829: ST_TO_ADDR
// vc_control := control_computer ;
66830: LD_ADDR_OWVAR 38
66834: PUSH
66835: LD_INT 3
66837: ST_TO_ADDR
// vc_weapon := us_double_laser ;
66838: LD_ADDR_OWVAR 40
66842: PUSH
66843: LD_INT 10
66845: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
66846: LD_VAR 0 2
66850: PUSH
66851: LD_INT 1
66853: ARRAY
66854: PPUSH
66855: CALL_OW 310
66859: NOT
66860: IFFALSE 66907
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
66862: CALL_OW 45
66866: PPUSH
66867: LD_VAR 0 2
66871: PUSH
66872: LD_INT 1
66874: ARRAY
66875: PPUSH
66876: CALL_OW 250
66880: PPUSH
66881: LD_VAR 0 2
66885: PUSH
66886: LD_INT 1
66888: ARRAY
66889: PPUSH
66890: CALL_OW 251
66894: PPUSH
66895: LD_INT 12
66897: PPUSH
66898: LD_INT 1
66900: PPUSH
66901: CALL_OW 50
66905: GO 66919
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
66907: CALL_OW 45
66911: PPUSH
66912: LD_INT 1
66914: PPUSH
66915: CALL_OW 51
// end ;
66919: GO 66793
66921: POP
66922: POP
// end ;
66923: PPOPN 2
66925: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
66926: LD_EXP 41
66930: PUSH
66931: LD_EXP 87
66935: AND
66936: IFFALSE 67158
66938: GO 66940
66940: DISABLE
66941: LD_INT 0
66943: PPUSH
66944: PPUSH
66945: PPUSH
66946: PPUSH
66947: PPUSH
66948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66949: LD_ADDR_VAR 0 6
66953: PUSH
66954: LD_INT 22
66956: PUSH
66957: LD_OWVAR 2
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 21
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 3
66978: PUSH
66979: LD_INT 23
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: PPUSH
66998: CALL_OW 69
67002: ST_TO_ADDR
// if not tmp then
67003: LD_VAR 0 6
67007: NOT
67008: IFFALSE 67012
// exit ;
67010: GO 67158
// s1 := rand ( 1 , 4 ) ;
67012: LD_ADDR_VAR 0 2
67016: PUSH
67017: LD_INT 1
67019: PPUSH
67020: LD_INT 4
67022: PPUSH
67023: CALL_OW 12
67027: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67028: LD_ADDR_VAR 0 4
67032: PUSH
67033: LD_VAR 0 6
67037: PUSH
67038: LD_INT 1
67040: ARRAY
67041: PPUSH
67042: LD_VAR 0 2
67046: PPUSH
67047: CALL_OW 259
67051: ST_TO_ADDR
// if s1 = 1 then
67052: LD_VAR 0 2
67056: PUSH
67057: LD_INT 1
67059: EQUAL
67060: IFFALSE 67080
// s2 := rand ( 2 , 4 ) else
67062: LD_ADDR_VAR 0 3
67066: PUSH
67067: LD_INT 2
67069: PPUSH
67070: LD_INT 4
67072: PPUSH
67073: CALL_OW 12
67077: ST_TO_ADDR
67078: GO 67088
// s2 := 1 ;
67080: LD_ADDR_VAR 0 3
67084: PUSH
67085: LD_INT 1
67087: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67088: LD_ADDR_VAR 0 5
67092: PUSH
67093: LD_VAR 0 6
67097: PUSH
67098: LD_INT 1
67100: ARRAY
67101: PPUSH
67102: LD_VAR 0 3
67106: PPUSH
67107: CALL_OW 259
67111: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67112: LD_VAR 0 6
67116: PUSH
67117: LD_INT 1
67119: ARRAY
67120: PPUSH
67121: LD_VAR 0 2
67125: PPUSH
67126: LD_VAR 0 5
67130: PPUSH
67131: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67135: LD_VAR 0 6
67139: PUSH
67140: LD_INT 1
67142: ARRAY
67143: PPUSH
67144: LD_VAR 0 3
67148: PPUSH
67149: LD_VAR 0 4
67153: PPUSH
67154: CALL_OW 237
// end ;
67158: PPOPN 6
67160: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67161: LD_EXP 41
67165: PUSH
67166: LD_EXP 88
67170: AND
67171: IFFALSE 67250
67173: GO 67175
67175: DISABLE
67176: LD_INT 0
67178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
67179: LD_ADDR_VAR 0 1
67183: PUSH
67184: LD_INT 22
67186: PUSH
67187: LD_OWVAR 2
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 30
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PPUSH
67210: CALL_OW 69
67214: ST_TO_ADDR
// if not tmp then
67215: LD_VAR 0 1
67219: NOT
67220: IFFALSE 67224
// exit ;
67222: GO 67250
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67224: LD_VAR 0 1
67228: PUSH
67229: LD_INT 1
67231: PPUSH
67232: LD_VAR 0 1
67236: PPUSH
67237: CALL_OW 12
67241: ARRAY
67242: PPUSH
67243: LD_INT 1
67245: PPUSH
67246: CALL_OW 234
// end ;
67250: PPOPN 1
67252: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
67253: LD_EXP 41
67257: PUSH
67258: LD_EXP 89
67262: AND
67263: IFFALSE 67375
67265: GO 67267
67267: DISABLE
67268: LD_INT 0
67270: PPUSH
67271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
67272: LD_ADDR_VAR 0 2
67276: PUSH
67277: LD_INT 22
67279: PUSH
67280: LD_OWVAR 2
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: LD_INT 30
67294: PUSH
67295: LD_INT 27
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 30
67304: PUSH
67305: LD_INT 26
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 30
67314: PUSH
67315: LD_INT 28
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PPUSH
67332: CALL_OW 69
67336: ST_TO_ADDR
// if not tmp then
67337: LD_VAR 0 2
67341: NOT
67342: IFFALSE 67346
// exit ;
67344: GO 67375
// for i in tmp do
67346: LD_ADDR_VAR 0 1
67350: PUSH
67351: LD_VAR 0 2
67355: PUSH
67356: FOR_IN
67357: IFFALSE 67373
// SetLives ( i , 1 ) ;
67359: LD_VAR 0 1
67363: PPUSH
67364: LD_INT 1
67366: PPUSH
67367: CALL_OW 234
67371: GO 67356
67373: POP
67374: POP
// end ;
67375: PPOPN 2
67377: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
67378: LD_EXP 41
67382: PUSH
67383: LD_EXP 90
67387: AND
67388: IFFALSE 67662
67390: GO 67392
67392: DISABLE
67393: LD_INT 0
67395: PPUSH
67396: PPUSH
67397: PPUSH
// begin i := rand ( 1 , 7 ) ;
67398: LD_ADDR_VAR 0 1
67402: PUSH
67403: LD_INT 1
67405: PPUSH
67406: LD_INT 7
67408: PPUSH
67409: CALL_OW 12
67413: ST_TO_ADDR
// case i of 1 :
67414: LD_VAR 0 1
67418: PUSH
67419: LD_INT 1
67421: DOUBLE
67422: EQUAL
67423: IFTRUE 67427
67425: GO 67437
67427: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
67428: LD_STRING earthquake(getX(game), 0, 32)
67430: PPUSH
67431: CALL_OW 559
67435: GO 67662
67437: LD_INT 2
67439: DOUBLE
67440: EQUAL
67441: IFTRUE 67445
67443: GO 67459
67445: POP
// begin ToLua ( displayStucuk(); ) ;
67446: LD_STRING displayStucuk();
67448: PPUSH
67449: CALL_OW 559
// ResetFog ;
67453: CALL_OW 335
// end ; 3 :
67457: GO 67662
67459: LD_INT 3
67461: DOUBLE
67462: EQUAL
67463: IFTRUE 67467
67465: GO 67571
67467: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67468: LD_ADDR_VAR 0 2
67472: PUSH
67473: LD_INT 22
67475: PUSH
67476: LD_OWVAR 2
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 25
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PPUSH
67499: CALL_OW 69
67503: ST_TO_ADDR
// if not tmp then
67504: LD_VAR 0 2
67508: NOT
67509: IFFALSE 67513
// exit ;
67511: GO 67662
// un := tmp [ rand ( 1 , tmp ) ] ;
67513: LD_ADDR_VAR 0 3
67517: PUSH
67518: LD_VAR 0 2
67522: PUSH
67523: LD_INT 1
67525: PPUSH
67526: LD_VAR 0 2
67530: PPUSH
67531: CALL_OW 12
67535: ARRAY
67536: ST_TO_ADDR
// if Crawls ( un ) then
67537: LD_VAR 0 3
67541: PPUSH
67542: CALL_OW 318
67546: IFFALSE 67557
// ComWalk ( un ) ;
67548: LD_VAR 0 3
67552: PPUSH
67553: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67557: LD_VAR 0 3
67561: PPUSH
67562: LD_INT 8
67564: PPUSH
67565: CALL_OW 336
// end ; 4 :
67569: GO 67662
67571: LD_INT 4
67573: DOUBLE
67574: EQUAL
67575: IFTRUE 67579
67577: GO 67640
67579: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67580: LD_ADDR_VAR 0 2
67584: PUSH
67585: LD_INT 22
67587: PUSH
67588: LD_OWVAR 2
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 30
67599: PUSH
67600: LD_INT 29
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PPUSH
67611: CALL_OW 69
67615: ST_TO_ADDR
// if not tmp then
67616: LD_VAR 0 2
67620: NOT
67621: IFFALSE 67625
// exit ;
67623: GO 67662
// DestroyUnit ( tmp [ 1 ] ) ;
67625: LD_VAR 0 2
67629: PUSH
67630: LD_INT 1
67632: ARRAY
67633: PPUSH
67634: CALL_OW 65
// end ; 5 .. 7 :
67638: GO 67662
67640: LD_INT 5
67642: DOUBLE
67643: GREATEREQUAL
67644: IFFALSE 67652
67646: LD_INT 7
67648: DOUBLE
67649: LESSEQUAL
67650: IFTRUE 67654
67652: GO 67661
67654: POP
// StreamSibBomb ; end ;
67655: CALL 63912 0 0
67659: GO 67662
67661: POP
// end ;
67662: PPOPN 3
67664: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
67665: LD_EXP 41
67669: PUSH
67670: LD_EXP 91
67674: AND
67675: IFFALSE 67831
67677: GO 67679
67679: DISABLE
67680: LD_INT 0
67682: PPUSH
67683: PPUSH
67684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
67685: LD_ADDR_VAR 0 2
67689: PUSH
67690: LD_INT 81
67692: PUSH
67693: LD_OWVAR 2
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 21
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 21
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PPUSH
67734: CALL_OW 69
67738: ST_TO_ADDR
// if not tmp then
67739: LD_VAR 0 2
67743: NOT
67744: IFFALSE 67748
// exit ;
67746: GO 67831
// p := 0 ;
67748: LD_ADDR_VAR 0 3
67752: PUSH
67753: LD_INT 0
67755: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67756: LD_INT 35
67758: PPUSH
67759: CALL_OW 67
// p := p + 1 ;
67763: LD_ADDR_VAR 0 3
67767: PUSH
67768: LD_VAR 0 3
67772: PUSH
67773: LD_INT 1
67775: PLUS
67776: ST_TO_ADDR
// for i in tmp do
67777: LD_ADDR_VAR 0 1
67781: PUSH
67782: LD_VAR 0 2
67786: PUSH
67787: FOR_IN
67788: IFFALSE 67819
// if GetLives ( i ) < 1000 then
67790: LD_VAR 0 1
67794: PPUSH
67795: CALL_OW 256
67799: PUSH
67800: LD_INT 1000
67802: LESS
67803: IFFALSE 67817
// SetLives ( i , 1000 ) ;
67805: LD_VAR 0 1
67809: PPUSH
67810: LD_INT 1000
67812: PPUSH
67813: CALL_OW 234
67817: GO 67787
67819: POP
67820: POP
// until p > 20 ;
67821: LD_VAR 0 3
67825: PUSH
67826: LD_INT 20
67828: GREATER
67829: IFFALSE 67756
// end ;
67831: PPOPN 3
67833: END
// every 0 0$1 trigger StreamModeActive and sTime do
67834: LD_EXP 41
67838: PUSH
67839: LD_EXP 92
67843: AND
67844: IFFALSE 67879
67846: GO 67848
67848: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
67849: LD_INT 28
67851: PPUSH
67852: LD_OWVAR 2
67856: PPUSH
67857: LD_INT 2
67859: PPUSH
67860: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
67864: LD_INT 30
67866: PPUSH
67867: LD_OWVAR 2
67871: PPUSH
67872: LD_INT 2
67874: PPUSH
67875: CALL_OW 322
// end ;
67879: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
67880: LD_EXP 41
67884: PUSH
67885: LD_EXP 93
67889: AND
67890: IFFALSE 68011
67892: GO 67894
67894: DISABLE
67895: LD_INT 0
67897: PPUSH
67898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67899: LD_ADDR_VAR 0 2
67903: PUSH
67904: LD_INT 22
67906: PUSH
67907: LD_OWVAR 2
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 21
67918: PUSH
67919: LD_INT 1
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 23
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: PPUSH
67948: CALL_OW 69
67952: ST_TO_ADDR
// if not tmp then
67953: LD_VAR 0 2
67957: NOT
67958: IFFALSE 67962
// exit ;
67960: GO 68011
// for i in tmp do
67962: LD_ADDR_VAR 0 1
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: FOR_IN
67973: IFFALSE 68009
// begin if Crawls ( i ) then
67975: LD_VAR 0 1
67979: PPUSH
67980: CALL_OW 318
67984: IFFALSE 67995
// ComWalk ( i ) ;
67986: LD_VAR 0 1
67990: PPUSH
67991: CALL_OW 138
// SetClass ( i , 2 ) ;
67995: LD_VAR 0 1
67999: PPUSH
68000: LD_INT 2
68002: PPUSH
68003: CALL_OW 336
// end ;
68007: GO 67972
68009: POP
68010: POP
// end ;
68011: PPOPN 2
68013: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68014: LD_EXP 41
68018: PUSH
68019: LD_EXP 94
68023: AND
68024: IFFALSE 68305
68026: GO 68028
68028: DISABLE
68029: LD_INT 0
68031: PPUSH
68032: PPUSH
68033: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68034: LD_OWVAR 2
68038: PPUSH
68039: LD_INT 9
68041: PPUSH
68042: LD_INT 1
68044: PPUSH
68045: LD_INT 1
68047: PPUSH
68048: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68052: LD_INT 9
68054: PPUSH
68055: LD_OWVAR 2
68059: PPUSH
68060: CALL_OW 343
// uc_side := 9 ;
68064: LD_ADDR_OWVAR 20
68068: PUSH
68069: LD_INT 9
68071: ST_TO_ADDR
// uc_nation := 2 ;
68072: LD_ADDR_OWVAR 21
68076: PUSH
68077: LD_INT 2
68079: ST_TO_ADDR
// hc_name := Dark Warrior ;
68080: LD_ADDR_OWVAR 26
68084: PUSH
68085: LD_STRING Dark Warrior
68087: ST_TO_ADDR
// hc_gallery :=  ;
68088: LD_ADDR_OWVAR 33
68092: PUSH
68093: LD_STRING 
68095: ST_TO_ADDR
// hc_noskilllimit := true ;
68096: LD_ADDR_OWVAR 76
68100: PUSH
68101: LD_INT 1
68103: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68104: LD_ADDR_OWVAR 31
68108: PUSH
68109: LD_INT 30
68111: PUSH
68112: LD_INT 30
68114: PUSH
68115: LD_INT 30
68117: PUSH
68118: LD_INT 30
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: ST_TO_ADDR
// un := CreateHuman ;
68127: LD_ADDR_VAR 0 3
68131: PUSH
68132: CALL_OW 44
68136: ST_TO_ADDR
// hc_noskilllimit := false ;
68137: LD_ADDR_OWVAR 76
68141: PUSH
68142: LD_INT 0
68144: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68145: LD_VAR 0 3
68149: PPUSH
68150: LD_INT 1
68152: PPUSH
68153: CALL_OW 51
// p := 0 ;
68157: LD_ADDR_VAR 0 2
68161: PUSH
68162: LD_INT 0
68164: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68165: LD_INT 35
68167: PPUSH
68168: CALL_OW 67
// p := p + 1 ;
68172: LD_ADDR_VAR 0 2
68176: PUSH
68177: LD_VAR 0 2
68181: PUSH
68182: LD_INT 1
68184: PLUS
68185: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 256
68195: PUSH
68196: LD_INT 1000
68198: LESS
68199: IFFALSE 68213
// SetLives ( un , 1000 ) ;
68201: LD_VAR 0 3
68205: PPUSH
68206: LD_INT 1000
68208: PPUSH
68209: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
68213: LD_VAR 0 3
68217: PPUSH
68218: LD_INT 81
68220: PUSH
68221: LD_OWVAR 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 91
68232: PUSH
68233: LD_VAR 0 3
68237: PUSH
68238: LD_INT 30
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PPUSH
68250: CALL_OW 69
68254: PPUSH
68255: LD_VAR 0 3
68259: PPUSH
68260: CALL_OW 74
68264: PPUSH
68265: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
68269: LD_VAR 0 2
68273: PUSH
68274: LD_INT 60
68276: GREATER
68277: PUSH
68278: LD_VAR 0 3
68282: PPUSH
68283: CALL_OW 301
68287: OR
68288: IFFALSE 68165
// if un then
68290: LD_VAR 0 3
68294: IFFALSE 68305
// RemoveUnit ( un ) ;
68296: LD_VAR 0 3
68300: PPUSH
68301: CALL_OW 64
// end ;
68305: PPOPN 3
68307: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68308: LD_INT 0
68310: PPUSH
// case cmd of 301 :
68311: LD_VAR 0 1
68315: PUSH
68316: LD_INT 301
68318: DOUBLE
68319: EQUAL
68320: IFTRUE 68324
68322: GO 68356
68324: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
68325: LD_VAR 0 6
68329: PPUSH
68330: LD_VAR 0 7
68334: PPUSH
68335: LD_VAR 0 8
68339: PPUSH
68340: LD_VAR 0 4
68344: PPUSH
68345: LD_VAR 0 5
68349: PPUSH
68350: CALL 69557 0 5
68354: GO 68477
68356: LD_INT 302
68358: DOUBLE
68359: EQUAL
68360: IFTRUE 68364
68362: GO 68401
68364: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
68365: LD_VAR 0 6
68369: PPUSH
68370: LD_VAR 0 7
68374: PPUSH
68375: LD_VAR 0 8
68379: PPUSH
68380: LD_VAR 0 9
68384: PPUSH
68385: LD_VAR 0 4
68389: PPUSH
68390: LD_VAR 0 5
68394: PPUSH
68395: CALL 69648 0 6
68399: GO 68477
68401: LD_INT 303
68403: DOUBLE
68404: EQUAL
68405: IFTRUE 68409
68407: GO 68446
68409: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
68410: LD_VAR 0 6
68414: PPUSH
68415: LD_VAR 0 7
68419: PPUSH
68420: LD_VAR 0 8
68424: PPUSH
68425: LD_VAR 0 9
68429: PPUSH
68430: LD_VAR 0 4
68434: PPUSH
68435: LD_VAR 0 5
68439: PPUSH
68440: CALL 68482 0 6
68444: GO 68477
68446: LD_INT 304
68448: DOUBLE
68449: EQUAL
68450: IFTRUE 68454
68452: GO 68476
68454: POP
// hHackTeleport ( unit , x , y ) ; end ;
68455: LD_VAR 0 2
68459: PPUSH
68460: LD_VAR 0 4
68464: PPUSH
68465: LD_VAR 0 5
68469: PPUSH
68470: CALL 70241 0 3
68474: GO 68477
68476: POP
// end ;
68477: LD_VAR 0 12
68481: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
68482: LD_INT 0
68484: PPUSH
68485: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
68486: LD_VAR 0 1
68490: PUSH
68491: LD_INT 1
68493: LESS
68494: PUSH
68495: LD_VAR 0 1
68499: PUSH
68500: LD_INT 3
68502: GREATER
68503: OR
68504: PUSH
68505: LD_VAR 0 5
68509: PPUSH
68510: LD_VAR 0 6
68514: PPUSH
68515: CALL_OW 428
68519: OR
68520: IFFALSE 68524
// exit ;
68522: GO 69244
// uc_side := your_side ;
68524: LD_ADDR_OWVAR 20
68528: PUSH
68529: LD_OWVAR 2
68533: ST_TO_ADDR
// uc_nation := nation ;
68534: LD_ADDR_OWVAR 21
68538: PUSH
68539: LD_VAR 0 1
68543: ST_TO_ADDR
// bc_level = 1 ;
68544: LD_ADDR_OWVAR 43
68548: PUSH
68549: LD_INT 1
68551: ST_TO_ADDR
// case btype of 1 :
68552: LD_VAR 0 2
68556: PUSH
68557: LD_INT 1
68559: DOUBLE
68560: EQUAL
68561: IFTRUE 68565
68563: GO 68576
68565: POP
// bc_type := b_depot ; 2 :
68566: LD_ADDR_OWVAR 42
68570: PUSH
68571: LD_INT 0
68573: ST_TO_ADDR
68574: GO 69188
68576: LD_INT 2
68578: DOUBLE
68579: EQUAL
68580: IFTRUE 68584
68582: GO 68595
68584: POP
// bc_type := b_warehouse ; 3 :
68585: LD_ADDR_OWVAR 42
68589: PUSH
68590: LD_INT 1
68592: ST_TO_ADDR
68593: GO 69188
68595: LD_INT 3
68597: DOUBLE
68598: EQUAL
68599: IFTRUE 68603
68601: GO 68614
68603: POP
// bc_type := b_lab ; 4 .. 9 :
68604: LD_ADDR_OWVAR 42
68608: PUSH
68609: LD_INT 6
68611: ST_TO_ADDR
68612: GO 69188
68614: LD_INT 4
68616: DOUBLE
68617: GREATEREQUAL
68618: IFFALSE 68626
68620: LD_INT 9
68622: DOUBLE
68623: LESSEQUAL
68624: IFTRUE 68628
68626: GO 68680
68628: POP
// begin bc_type := b_lab_half ;
68629: LD_ADDR_OWVAR 42
68633: PUSH
68634: LD_INT 7
68636: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
68637: LD_ADDR_OWVAR 44
68641: PUSH
68642: LD_INT 10
68644: PUSH
68645: LD_INT 11
68647: PUSH
68648: LD_INT 12
68650: PUSH
68651: LD_INT 15
68653: PUSH
68654: LD_INT 14
68656: PUSH
68657: LD_INT 13
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: PUSH
68668: LD_VAR 0 2
68672: PUSH
68673: LD_INT 3
68675: MINUS
68676: ARRAY
68677: ST_TO_ADDR
// end ; 10 .. 13 :
68678: GO 69188
68680: LD_INT 10
68682: DOUBLE
68683: GREATEREQUAL
68684: IFFALSE 68692
68686: LD_INT 13
68688: DOUBLE
68689: LESSEQUAL
68690: IFTRUE 68694
68692: GO 68771
68694: POP
// begin bc_type := b_lab_full ;
68695: LD_ADDR_OWVAR 42
68699: PUSH
68700: LD_INT 8
68702: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
68703: LD_ADDR_OWVAR 44
68707: PUSH
68708: LD_INT 10
68710: PUSH
68711: LD_INT 12
68713: PUSH
68714: LD_INT 14
68716: PUSH
68717: LD_INT 13
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: PUSH
68726: LD_VAR 0 2
68730: PUSH
68731: LD_INT 9
68733: MINUS
68734: ARRAY
68735: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
68736: LD_ADDR_OWVAR 45
68740: PUSH
68741: LD_INT 11
68743: PUSH
68744: LD_INT 15
68746: PUSH
68747: LD_INT 12
68749: PUSH
68750: LD_INT 15
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: PUSH
68759: LD_VAR 0 2
68763: PUSH
68764: LD_INT 9
68766: MINUS
68767: ARRAY
68768: ST_TO_ADDR
// end ; 14 :
68769: GO 69188
68771: LD_INT 14
68773: DOUBLE
68774: EQUAL
68775: IFTRUE 68779
68777: GO 68790
68779: POP
// bc_type := b_workshop ; 15 :
68780: LD_ADDR_OWVAR 42
68784: PUSH
68785: LD_INT 2
68787: ST_TO_ADDR
68788: GO 69188
68790: LD_INT 15
68792: DOUBLE
68793: EQUAL
68794: IFTRUE 68798
68796: GO 68809
68798: POP
// bc_type := b_factory ; 16 :
68799: LD_ADDR_OWVAR 42
68803: PUSH
68804: LD_INT 3
68806: ST_TO_ADDR
68807: GO 69188
68809: LD_INT 16
68811: DOUBLE
68812: EQUAL
68813: IFTRUE 68817
68815: GO 68828
68817: POP
// bc_type := b_ext_gun ; 17 :
68818: LD_ADDR_OWVAR 42
68822: PUSH
68823: LD_INT 17
68825: ST_TO_ADDR
68826: GO 69188
68828: LD_INT 17
68830: DOUBLE
68831: EQUAL
68832: IFTRUE 68836
68834: GO 68864
68836: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
68837: LD_ADDR_OWVAR 42
68841: PUSH
68842: LD_INT 19
68844: PUSH
68845: LD_INT 23
68847: PUSH
68848: LD_INT 19
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: LIST
68855: PUSH
68856: LD_VAR 0 1
68860: ARRAY
68861: ST_TO_ADDR
68862: GO 69188
68864: LD_INT 18
68866: DOUBLE
68867: EQUAL
68868: IFTRUE 68872
68870: GO 68883
68872: POP
// bc_type := b_ext_radar ; 19 :
68873: LD_ADDR_OWVAR 42
68877: PUSH
68878: LD_INT 20
68880: ST_TO_ADDR
68881: GO 69188
68883: LD_INT 19
68885: DOUBLE
68886: EQUAL
68887: IFTRUE 68891
68889: GO 68902
68891: POP
// bc_type := b_ext_radio ; 20 :
68892: LD_ADDR_OWVAR 42
68896: PUSH
68897: LD_INT 22
68899: ST_TO_ADDR
68900: GO 69188
68902: LD_INT 20
68904: DOUBLE
68905: EQUAL
68906: IFTRUE 68910
68908: GO 68921
68910: POP
// bc_type := b_ext_siberium ; 21 :
68911: LD_ADDR_OWVAR 42
68915: PUSH
68916: LD_INT 21
68918: ST_TO_ADDR
68919: GO 69188
68921: LD_INT 21
68923: DOUBLE
68924: EQUAL
68925: IFTRUE 68929
68927: GO 68940
68929: POP
// bc_type := b_ext_computer ; 22 :
68930: LD_ADDR_OWVAR 42
68934: PUSH
68935: LD_INT 24
68937: ST_TO_ADDR
68938: GO 69188
68940: LD_INT 22
68942: DOUBLE
68943: EQUAL
68944: IFTRUE 68948
68946: GO 68959
68948: POP
// bc_type := b_ext_track ; 23 :
68949: LD_ADDR_OWVAR 42
68953: PUSH
68954: LD_INT 16
68956: ST_TO_ADDR
68957: GO 69188
68959: LD_INT 23
68961: DOUBLE
68962: EQUAL
68963: IFTRUE 68967
68965: GO 68978
68967: POP
// bc_type := b_ext_laser ; 24 :
68968: LD_ADDR_OWVAR 42
68972: PUSH
68973: LD_INT 25
68975: ST_TO_ADDR
68976: GO 69188
68978: LD_INT 24
68980: DOUBLE
68981: EQUAL
68982: IFTRUE 68986
68984: GO 68997
68986: POP
// bc_type := b_control_tower ; 25 :
68987: LD_ADDR_OWVAR 42
68991: PUSH
68992: LD_INT 36
68994: ST_TO_ADDR
68995: GO 69188
68997: LD_INT 25
68999: DOUBLE
69000: EQUAL
69001: IFTRUE 69005
69003: GO 69016
69005: POP
// bc_type := b_breastwork ; 26 :
69006: LD_ADDR_OWVAR 42
69010: PUSH
69011: LD_INT 31
69013: ST_TO_ADDR
69014: GO 69188
69016: LD_INT 26
69018: DOUBLE
69019: EQUAL
69020: IFTRUE 69024
69022: GO 69035
69024: POP
// bc_type := b_bunker ; 27 :
69025: LD_ADDR_OWVAR 42
69029: PUSH
69030: LD_INT 32
69032: ST_TO_ADDR
69033: GO 69188
69035: LD_INT 27
69037: DOUBLE
69038: EQUAL
69039: IFTRUE 69043
69041: GO 69054
69043: POP
// bc_type := b_turret ; 28 :
69044: LD_ADDR_OWVAR 42
69048: PUSH
69049: LD_INT 33
69051: ST_TO_ADDR
69052: GO 69188
69054: LD_INT 28
69056: DOUBLE
69057: EQUAL
69058: IFTRUE 69062
69060: GO 69073
69062: POP
// bc_type := b_armoury ; 29 :
69063: LD_ADDR_OWVAR 42
69067: PUSH
69068: LD_INT 4
69070: ST_TO_ADDR
69071: GO 69188
69073: LD_INT 29
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69081
69079: GO 69092
69081: POP
// bc_type := b_barracks ; 30 :
69082: LD_ADDR_OWVAR 42
69086: PUSH
69087: LD_INT 5
69089: ST_TO_ADDR
69090: GO 69188
69092: LD_INT 30
69094: DOUBLE
69095: EQUAL
69096: IFTRUE 69100
69098: GO 69111
69100: POP
// bc_type := b_solar_power ; 31 :
69101: LD_ADDR_OWVAR 42
69105: PUSH
69106: LD_INT 27
69108: ST_TO_ADDR
69109: GO 69188
69111: LD_INT 31
69113: DOUBLE
69114: EQUAL
69115: IFTRUE 69119
69117: GO 69130
69119: POP
// bc_type := b_oil_power ; 32 :
69120: LD_ADDR_OWVAR 42
69124: PUSH
69125: LD_INT 26
69127: ST_TO_ADDR
69128: GO 69188
69130: LD_INT 32
69132: DOUBLE
69133: EQUAL
69134: IFTRUE 69138
69136: GO 69149
69138: POP
// bc_type := b_siberite_power ; 33 :
69139: LD_ADDR_OWVAR 42
69143: PUSH
69144: LD_INT 28
69146: ST_TO_ADDR
69147: GO 69188
69149: LD_INT 33
69151: DOUBLE
69152: EQUAL
69153: IFTRUE 69157
69155: GO 69168
69157: POP
// bc_type := b_oil_mine ; 34 :
69158: LD_ADDR_OWVAR 42
69162: PUSH
69163: LD_INT 29
69165: ST_TO_ADDR
69166: GO 69188
69168: LD_INT 34
69170: DOUBLE
69171: EQUAL
69172: IFTRUE 69176
69174: GO 69187
69176: POP
// bc_type := b_siberite_mine ; end ;
69177: LD_ADDR_OWVAR 42
69181: PUSH
69182: LD_INT 30
69184: ST_TO_ADDR
69185: GO 69188
69187: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
69188: LD_ADDR_VAR 0 8
69192: PUSH
69193: LD_VAR 0 5
69197: PPUSH
69198: LD_VAR 0 6
69202: PPUSH
69203: LD_VAR 0 3
69207: PPUSH
69208: CALL_OW 47
69212: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
69213: LD_OWVAR 42
69217: PUSH
69218: LD_INT 32
69220: PUSH
69221: LD_INT 33
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: IN
69228: IFFALSE 69244
// PlaceWeaponTurret ( b , weapon ) ;
69230: LD_VAR 0 8
69234: PPUSH
69235: LD_VAR 0 4
69239: PPUSH
69240: CALL_OW 431
// end ;
69244: LD_VAR 0 7
69248: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
69249: LD_INT 0
69251: PPUSH
69252: PPUSH
69253: PPUSH
69254: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69255: LD_ADDR_VAR 0 4
69259: PUSH
69260: LD_INT 22
69262: PUSH
69263: LD_OWVAR 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 2
69274: PUSH
69275: LD_INT 30
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 30
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: LIST
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PPUSH
69304: CALL_OW 69
69308: ST_TO_ADDR
// if not tmp then
69309: LD_VAR 0 4
69313: NOT
69314: IFFALSE 69318
// exit ;
69316: GO 69377
// for i in tmp do
69318: LD_ADDR_VAR 0 2
69322: PUSH
69323: LD_VAR 0 4
69327: PUSH
69328: FOR_IN
69329: IFFALSE 69375
// for j = 1 to 3 do
69331: LD_ADDR_VAR 0 3
69335: PUSH
69336: DOUBLE
69337: LD_INT 1
69339: DEC
69340: ST_TO_ADDR
69341: LD_INT 3
69343: PUSH
69344: FOR_TO
69345: IFFALSE 69371
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
69347: LD_VAR 0 2
69351: PPUSH
69352: CALL_OW 274
69356: PPUSH
69357: LD_VAR 0 3
69361: PPUSH
69362: LD_INT 99999
69364: PPUSH
69365: CALL_OW 277
69369: GO 69344
69371: POP
69372: POP
69373: GO 69328
69375: POP
69376: POP
// end ;
69377: LD_VAR 0 1
69381: RET
// export function hHackSetLevel10 ; var i , j ; begin
69382: LD_INT 0
69384: PPUSH
69385: PPUSH
69386: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69387: LD_ADDR_VAR 0 2
69391: PUSH
69392: LD_INT 21
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PPUSH
69402: CALL_OW 69
69406: PUSH
69407: FOR_IN
69408: IFFALSE 69460
// if IsSelected ( i ) then
69410: LD_VAR 0 2
69414: PPUSH
69415: CALL_OW 306
69419: IFFALSE 69458
// begin for j := 1 to 4 do
69421: LD_ADDR_VAR 0 3
69425: PUSH
69426: DOUBLE
69427: LD_INT 1
69429: DEC
69430: ST_TO_ADDR
69431: LD_INT 4
69433: PUSH
69434: FOR_TO
69435: IFFALSE 69456
// SetSkill ( i , j , 10 ) ;
69437: LD_VAR 0 2
69441: PPUSH
69442: LD_VAR 0 3
69446: PPUSH
69447: LD_INT 10
69449: PPUSH
69450: CALL_OW 237
69454: GO 69434
69456: POP
69457: POP
// end ;
69458: GO 69407
69460: POP
69461: POP
// end ;
69462: LD_VAR 0 1
69466: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
69467: LD_INT 0
69469: PPUSH
69470: PPUSH
69471: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
69472: LD_ADDR_VAR 0 2
69476: PUSH
69477: LD_INT 22
69479: PUSH
69480: LD_OWVAR 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 21
69491: PUSH
69492: LD_INT 1
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PPUSH
69503: CALL_OW 69
69507: PUSH
69508: FOR_IN
69509: IFFALSE 69550
// begin for j := 1 to 4 do
69511: LD_ADDR_VAR 0 3
69515: PUSH
69516: DOUBLE
69517: LD_INT 1
69519: DEC
69520: ST_TO_ADDR
69521: LD_INT 4
69523: PUSH
69524: FOR_TO
69525: IFFALSE 69546
// SetSkill ( i , j , 10 ) ;
69527: LD_VAR 0 2
69531: PPUSH
69532: LD_VAR 0 3
69536: PPUSH
69537: LD_INT 10
69539: PPUSH
69540: CALL_OW 237
69544: GO 69524
69546: POP
69547: POP
// end ;
69548: GO 69508
69550: POP
69551: POP
// end ;
69552: LD_VAR 0 1
69556: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
69557: LD_INT 0
69559: PPUSH
// uc_side := your_side ;
69560: LD_ADDR_OWVAR 20
69564: PUSH
69565: LD_OWVAR 2
69569: ST_TO_ADDR
// uc_nation := nation ;
69570: LD_ADDR_OWVAR 21
69574: PUSH
69575: LD_VAR 0 1
69579: ST_TO_ADDR
// InitHc ;
69580: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
69584: LD_INT 0
69586: PPUSH
69587: LD_VAR 0 2
69591: PPUSH
69592: LD_VAR 0 3
69596: PPUSH
69597: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
69601: LD_VAR 0 4
69605: PPUSH
69606: LD_VAR 0 5
69610: PPUSH
69611: CALL_OW 428
69615: PUSH
69616: LD_INT 0
69618: EQUAL
69619: IFFALSE 69643
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
69621: CALL_OW 44
69625: PPUSH
69626: LD_VAR 0 4
69630: PPUSH
69631: LD_VAR 0 5
69635: PPUSH
69636: LD_INT 1
69638: PPUSH
69639: CALL_OW 48
// end ;
69643: LD_VAR 0 6
69647: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
69648: LD_INT 0
69650: PPUSH
69651: PPUSH
// uc_side := your_side ;
69652: LD_ADDR_OWVAR 20
69656: PUSH
69657: LD_OWVAR 2
69661: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
69662: LD_VAR 0 1
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 4
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: IN
69689: IFFALSE 69701
// uc_nation := nation_american else
69691: LD_ADDR_OWVAR 21
69695: PUSH
69696: LD_INT 1
69698: ST_TO_ADDR
69699: GO 69744
// if chassis in [ 11 , 12 , 13 , 14 ] then
69701: LD_VAR 0 1
69705: PUSH
69706: LD_INT 11
69708: PUSH
69709: LD_INT 12
69711: PUSH
69712: LD_INT 13
69714: PUSH
69715: LD_INT 14
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: IN
69724: IFFALSE 69736
// uc_nation := nation_arabian else
69726: LD_ADDR_OWVAR 21
69730: PUSH
69731: LD_INT 2
69733: ST_TO_ADDR
69734: GO 69744
// uc_nation := nation_russian ;
69736: LD_ADDR_OWVAR 21
69740: PUSH
69741: LD_INT 3
69743: ST_TO_ADDR
// vc_chassis := chassis ;
69744: LD_ADDR_OWVAR 37
69748: PUSH
69749: LD_VAR 0 1
69753: ST_TO_ADDR
// vc_engine := engine ;
69754: LD_ADDR_OWVAR 39
69758: PUSH
69759: LD_VAR 0 2
69763: ST_TO_ADDR
// vc_control := control ;
69764: LD_ADDR_OWVAR 38
69768: PUSH
69769: LD_VAR 0 3
69773: ST_TO_ADDR
// vc_weapon := weapon ;
69774: LD_ADDR_OWVAR 40
69778: PUSH
69779: LD_VAR 0 4
69783: ST_TO_ADDR
// un := CreateVehicle ;
69784: LD_ADDR_VAR 0 8
69788: PUSH
69789: CALL_OW 45
69793: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
69794: LD_VAR 0 8
69798: PPUSH
69799: LD_INT 0
69801: PPUSH
69802: LD_INT 5
69804: PPUSH
69805: CALL_OW 12
69809: PPUSH
69810: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
69814: LD_VAR 0 8
69818: PPUSH
69819: LD_VAR 0 5
69823: PPUSH
69824: LD_VAR 0 6
69828: PPUSH
69829: LD_INT 1
69831: PPUSH
69832: CALL_OW 48
// end ;
69836: LD_VAR 0 7
69840: RET
// export hInvincible ; every 1 do
69841: GO 69843
69843: DISABLE
// hInvincible := [ ] ;
69844: LD_ADDR_EXP 95
69848: PUSH
69849: EMPTY
69850: ST_TO_ADDR
69851: END
// every 10 do var i ;
69852: GO 69854
69854: DISABLE
69855: LD_INT 0
69857: PPUSH
// begin enable ;
69858: ENABLE
// if not hInvincible then
69859: LD_EXP 95
69863: NOT
69864: IFFALSE 69868
// exit ;
69866: GO 69912
// for i in hInvincible do
69868: LD_ADDR_VAR 0 1
69872: PUSH
69873: LD_EXP 95
69877: PUSH
69878: FOR_IN
69879: IFFALSE 69910
// if GetLives ( i ) < 1000 then
69881: LD_VAR 0 1
69885: PPUSH
69886: CALL_OW 256
69890: PUSH
69891: LD_INT 1000
69893: LESS
69894: IFFALSE 69908
// SetLives ( i , 1000 ) ;
69896: LD_VAR 0 1
69900: PPUSH
69901: LD_INT 1000
69903: PPUSH
69904: CALL_OW 234
69908: GO 69878
69910: POP
69911: POP
// end ;
69912: PPOPN 1
69914: END
// export function hHackInvincible ; var i ; begin
69915: LD_INT 0
69917: PPUSH
69918: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
69919: LD_ADDR_VAR 0 2
69923: PUSH
69924: LD_INT 2
69926: PUSH
69927: LD_INT 21
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 21
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: LIST
69951: PPUSH
69952: CALL_OW 69
69956: PUSH
69957: FOR_IN
69958: IFFALSE 70019
// if IsSelected ( i ) then
69960: LD_VAR 0 2
69964: PPUSH
69965: CALL_OW 306
69969: IFFALSE 70017
// begin if i in hInvincible then
69971: LD_VAR 0 2
69975: PUSH
69976: LD_EXP 95
69980: IN
69981: IFFALSE 70001
// hInvincible := hInvincible diff i else
69983: LD_ADDR_EXP 95
69987: PUSH
69988: LD_EXP 95
69992: PUSH
69993: LD_VAR 0 2
69997: DIFF
69998: ST_TO_ADDR
69999: GO 70017
// hInvincible := hInvincible union i ;
70001: LD_ADDR_EXP 95
70005: PUSH
70006: LD_EXP 95
70010: PUSH
70011: LD_VAR 0 2
70015: UNION
70016: ST_TO_ADDR
// end ;
70017: GO 69957
70019: POP
70020: POP
// end ;
70021: LD_VAR 0 1
70025: RET
// export function hHackInvisible ; var i , j ; begin
70026: LD_INT 0
70028: PPUSH
70029: PPUSH
70030: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70031: LD_ADDR_VAR 0 2
70035: PUSH
70036: LD_INT 21
70038: PUSH
70039: LD_INT 1
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PPUSH
70046: CALL_OW 69
70050: PUSH
70051: FOR_IN
70052: IFFALSE 70076
// if IsSelected ( i ) then
70054: LD_VAR 0 2
70058: PPUSH
70059: CALL_OW 306
70063: IFFALSE 70074
// ComForceInvisible ( i ) ;
70065: LD_VAR 0 2
70069: PPUSH
70070: CALL_OW 496
70074: GO 70051
70076: POP
70077: POP
// end ;
70078: LD_VAR 0 1
70082: RET
// export function hHackChangeYourSide ; begin
70083: LD_INT 0
70085: PPUSH
// if your_side = 8 then
70086: LD_OWVAR 2
70090: PUSH
70091: LD_INT 8
70093: EQUAL
70094: IFFALSE 70106
// your_side := 0 else
70096: LD_ADDR_OWVAR 2
70100: PUSH
70101: LD_INT 0
70103: ST_TO_ADDR
70104: GO 70120
// your_side := your_side + 1 ;
70106: LD_ADDR_OWVAR 2
70110: PUSH
70111: LD_OWVAR 2
70115: PUSH
70116: LD_INT 1
70118: PLUS
70119: ST_TO_ADDR
// end ;
70120: LD_VAR 0 1
70124: RET
// export function hHackChangeUnitSide ; var i , j ; begin
70125: LD_INT 0
70127: PPUSH
70128: PPUSH
70129: PPUSH
// for i in all_units do
70130: LD_ADDR_VAR 0 2
70134: PUSH
70135: LD_OWVAR 3
70139: PUSH
70140: FOR_IN
70141: IFFALSE 70219
// if IsSelected ( i ) then
70143: LD_VAR 0 2
70147: PPUSH
70148: CALL_OW 306
70152: IFFALSE 70217
// begin j := GetSide ( i ) ;
70154: LD_ADDR_VAR 0 3
70158: PUSH
70159: LD_VAR 0 2
70163: PPUSH
70164: CALL_OW 255
70168: ST_TO_ADDR
// if j = 8 then
70169: LD_VAR 0 3
70173: PUSH
70174: LD_INT 8
70176: EQUAL
70177: IFFALSE 70189
// j := 0 else
70179: LD_ADDR_VAR 0 3
70183: PUSH
70184: LD_INT 0
70186: ST_TO_ADDR
70187: GO 70203
// j := j + 1 ;
70189: LD_ADDR_VAR 0 3
70193: PUSH
70194: LD_VAR 0 3
70198: PUSH
70199: LD_INT 1
70201: PLUS
70202: ST_TO_ADDR
// SetSide ( i , j ) ;
70203: LD_VAR 0 2
70207: PPUSH
70208: LD_VAR 0 3
70212: PPUSH
70213: CALL_OW 235
// end ;
70217: GO 70140
70219: POP
70220: POP
// end ;
70221: LD_VAR 0 1
70225: RET
// export function hHackFog ; begin
70226: LD_INT 0
70228: PPUSH
// FogOff ( true ) ;
70229: LD_INT 1
70231: PPUSH
70232: CALL_OW 344
// end ;
70236: LD_VAR 0 1
70240: RET
// export function hHackTeleport ( unit , x , y ) ; begin
70241: LD_INT 0
70243: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
70244: LD_VAR 0 1
70248: PPUSH
70249: LD_VAR 0 2
70253: PPUSH
70254: LD_VAR 0 3
70258: PPUSH
70259: LD_INT 1
70261: PPUSH
70262: LD_INT 1
70264: PPUSH
70265: CALL_OW 483
// CenterOnXY ( x , y ) ;
70269: LD_VAR 0 2
70273: PPUSH
70274: LD_VAR 0 3
70278: PPUSH
70279: CALL_OW 84
// end ; end_of_file
70283: LD_VAR 0 4
70287: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70288: LD_VAR 0 1
70292: PPUSH
70293: LD_VAR 0 2
70297: PPUSH
70298: LD_VAR 0 3
70302: PPUSH
70303: LD_VAR 0 4
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: LD_VAR 0 6
70317: PPUSH
70318: CALL 57116 0 6
// end ; end_of_file end_of_file
70322: PPOPN 6
70324: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
70325: LD_INT 0
70327: PPUSH
// ar_miner := 81 ;
70328: LD_ADDR_EXP 103
70332: PUSH
70333: LD_INT 81
70335: ST_TO_ADDR
// ar_crane := 88 ;
70336: LD_ADDR_EXP 102
70340: PUSH
70341: LD_INT 88
70343: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
70344: LD_ADDR_EXP 97
70348: PUSH
70349: LD_INT 89
70351: ST_TO_ADDR
// us_hack := 99 ;
70352: LD_ADDR_EXP 98
70356: PUSH
70357: LD_INT 99
70359: ST_TO_ADDR
// us_artillery := 97 ;
70360: LD_ADDR_EXP 99
70364: PUSH
70365: LD_INT 97
70367: ST_TO_ADDR
// ar_bio_bomb := 91 ;
70368: LD_ADDR_EXP 100
70372: PUSH
70373: LD_INT 91
70375: ST_TO_ADDR
// ar_mortar := 92 ;
70376: LD_ADDR_EXP 101
70380: PUSH
70381: LD_INT 92
70383: ST_TO_ADDR
// ru_radar := 98 ;
70384: LD_ADDR_EXP 96
70388: PUSH
70389: LD_INT 98
70391: ST_TO_ADDR
// tech_Artillery := 80 ;
70392: LD_ADDR_EXP 104
70396: PUSH
70397: LD_INT 80
70399: ST_TO_ADDR
// tech_RadMat := 81 ;
70400: LD_ADDR_EXP 105
70404: PUSH
70405: LD_INT 81
70407: ST_TO_ADDR
// tech_BasicTools := 82 ;
70408: LD_ADDR_EXP 106
70412: PUSH
70413: LD_INT 82
70415: ST_TO_ADDR
// tech_Cargo := 83 ;
70416: LD_ADDR_EXP 107
70420: PUSH
70421: LD_INT 83
70423: ST_TO_ADDR
// tech_Track := 84 ;
70424: LD_ADDR_EXP 108
70428: PUSH
70429: LD_INT 84
70431: ST_TO_ADDR
// tech_Crane := 85 ;
70432: LD_ADDR_EXP 109
70436: PUSH
70437: LD_INT 85
70439: ST_TO_ADDR
// tech_Bulldozer := 86 ;
70440: LD_ADDR_EXP 110
70444: PUSH
70445: LD_INT 86
70447: ST_TO_ADDR
// tech_Hovercraft := 87 ;
70448: LD_ADDR_EXP 111
70452: PUSH
70453: LD_INT 87
70455: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
70456: LD_ADDR_EXP 112
70460: PUSH
70461: LD_INT 88
70463: ST_TO_ADDR
// class_mastodont := 31 ;
70464: LD_ADDR_EXP 113
70468: PUSH
70469: LD_INT 31
70471: ST_TO_ADDR
// class_horse := 21 ;
70472: LD_ADDR_EXP 114
70476: PUSH
70477: LD_INT 21
70479: ST_TO_ADDR
// end ;
70480: LD_VAR 0 1
70484: RET
// every 1 do
70485: GO 70487
70487: DISABLE
// InitGlobalVariables ;
70488: CALL 70325 0 0
70492: END
