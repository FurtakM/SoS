// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 404 0 3
// PrepareAmerican ;
  28: CALL 2440 0 0
// PrepareArabian ;
  32: CALL 1124 0 0
// Action ;
  36: CALL 7175 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// end ; end_of_file
 182: LD_VAR 0 1
 186: RET
// export function SayX ( units , ident ) ; var i ; begin
 187: LD_INT 0
 189: PPUSH
 190: PPUSH
// result := false ;
 191: LD_ADDR_VAR 0 3
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// if not units then
 199: LD_VAR 0 1
 203: NOT
 204: IFFALSE 208
// exit ;
 206: GO 262
// for i in units do
 208: LD_ADDR_VAR 0 4
 212: PUSH
 213: LD_VAR 0 1
 217: PUSH
 218: FOR_IN
 219: IFFALSE 260
// if IsOk ( i ) then
 221: LD_VAR 0 4
 225: PPUSH
 226: CALL_OW 302
 230: IFFALSE 258
// begin Say ( i , ident ) ;
 232: LD_VAR 0 4
 236: PPUSH
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 88
// result := i ;
 246: LD_ADDR_VAR 0 3
 250: PUSH
 251: LD_VAR 0 4
 255: ST_TO_ADDR
// break ;
 256: GO 260
// end ;
 258: GO 218
 260: POP
 261: POP
// end ;
 262: LD_VAR 0 3
 266: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 267: LD_INT 0
 269: PPUSH
 270: PPUSH
// InitUc ;
 271: CALL_OW 18
// InitHc ;
 275: CALL_OW 19
// uc_side := 0 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// uc_nation := 0 ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// for i = 1 to amount do
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: DOUBLE
 301: LD_INT 1
 303: DEC
 304: ST_TO_ADDR
 305: LD_VAR 0 2
 309: PUSH
 310: FOR_TO
 311: IFFALSE 393
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 313: LD_ADDR_OWVAR 29
 317: PUSH
 318: LD_INT 9
 320: PPUSH
 321: LD_INT 12
 323: PPUSH
 324: CALL_OW 12
 328: PUSH
 329: LD_INT 9
 331: PPUSH
 332: LD_INT 12
 334: PPUSH
 335: CALL_OW 12
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 344: LD_ADDR_OWVAR 35
 348: PUSH
 349: LD_INT 1
 351: NEG
 352: PPUSH
 353: LD_INT 1
 355: PPUSH
 356: CALL_OW 12
 360: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 361: LD_INT 0
 363: PPUSH
 364: LD_INT 12
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 374: CALL_OW 44
 378: PPUSH
 379: LD_VAR 0 1
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL_OW 49
// end ;
 391: GO 310
 393: POP
 394: POP
// InitHc ;
 395: CALL_OW 19
// end ;
 399: LD_VAR 0 3
 403: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
// uc_side := 0 ;
 408: LD_ADDR_OWVAR 20
 412: PUSH
 413: LD_INT 0
 415: ST_TO_ADDR
// uc_nation := 0 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 0
 423: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 9
 431: PUSH
 432: LD_INT 8
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: PPUSH
 453: CALL 267 0 2
// for i := 1 to 4 do
 457: LD_ADDR_VAR 0 5
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 4
 469: PUSH
 470: FOR_TO
 471: IFFALSE 508
// begin hc_class := class_horse ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 21
 480: ST_TO_ADDR
// hc_gallery :=  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 489: CALL_OW 44
 493: PPUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL_OW 49
// end ;
 506: GO 470
 508: POP
 509: POP
// for i = 1 to 5 do
 510: LD_ADDR_VAR 0 5
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_INT 5
 522: PUSH
 523: FOR_TO
 524: IFFALSE 578
// begin hc_class = class_tiger ;
 526: LD_ADDR_OWVAR 28
 530: PUSH
 531: LD_INT 14
 533: ST_TO_ADDR
// hc_gallery =  ;
 534: LD_ADDR_OWVAR 33
 538: PUSH
 539: LD_STRING 
 541: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 542: LD_ADDR_OWVAR 35
 546: PUSH
 547: LD_INT 7
 549: NEG
 550: PPUSH
 551: LD_INT 7
 553: PPUSH
 554: CALL_OW 12
 558: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 2
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 523
 578: POP
 579: POP
// for i := 1 to 4 do
 580: LD_ADDR_VAR 0 5
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 4
 592: PUSH
 593: FOR_TO
 594: IFFALSE 631
// begin hc_class := class_phororhacos ;
 596: LD_ADDR_OWVAR 28
 600: PUSH
 601: LD_INT 18
 603: ST_TO_ADDR
// hc_gallery :=  ;
 604: LD_ADDR_OWVAR 33
 608: PUSH
 609: LD_STRING 
 611: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ;
 629: GO 593
 631: POP
 632: POP
// for i := 1 to 4 do
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: DOUBLE
 639: LD_INT 1
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 684
// begin hc_class := class_baggie ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 13
 656: ST_TO_ADDR
// hc_gallery :=  ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING 
 664: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 665: CALL_OW 44
 669: PPUSH
 670: LD_VAR 0 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 646
 684: POP
 685: POP
// for i := 1 to 5 do
 686: LD_ADDR_VAR 0 5
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 5
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := class_fish ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 20
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 3
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// end ;
 739: LD_VAR 0 4
 743: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
// if not observer or not unit then
 749: LD_VAR 0 1
 753: NOT
 754: PUSH
 755: LD_VAR 0 2
 759: NOT
 760: OR
 761: IFFALSE 765
// exit ;
 763: GO 813
// if not See ( GetSide ( observer ) , unit ) then
 765: LD_VAR 0 1
 769: PPUSH
 770: CALL_OW 255
 774: PPUSH
 775: LD_VAR 0 2
 779: PPUSH
 780: CALL_OW 292
 784: NOT
 785: IFFALSE 789
// exit ;
 787: GO 813
// result := GetDistUnits ( observer , unit ) < 12 ;
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 1
 798: PPUSH
 799: LD_VAR 0 2
 803: PPUSH
 804: CALL_OW 296
 808: PUSH
 809: LD_INT 12
 811: LESS
 812: ST_TO_ADDR
// end ;
 813: LD_VAR 0 3
 817: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 818: LD_INT 0
 820: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 488
 843: PUSH
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: CALL_OW 428
 866: PUSH
 867: LD_INT 0
 869: EQUAL
 870: AND
 871: IFFALSE 905
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_VAR 0 3
 900: PPUSH
 901: CALL_OW 48
// end ;
 905: LD_VAR 0 4
 909: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 910: LD_INT 0
 912: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: LD_VAR 0 2
 922: PPUSH
 923: LD_VAR 0 3
 927: PPUSH
 928: LD_VAR 0 4
 932: PPUSH
 933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PPUSH
 947: LD_VAR 0 3
 951: PPUSH
 952: CALL_OW 331
// end ;
 956: LD_VAR 0 5
 960: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 961: LD_INT 0
 963: PPUSH
// if not units then
 964: LD_VAR 0 1
 968: NOT
 969: IFFALSE 973
// exit ;
 971: GO 1056
// result := true ;
 973: LD_ADDR_VAR 0 4
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_INT 26
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PPUSH
 996: CALL_OW 72
1000: PUSH
1001: LD_INT 1
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 2
1009: PPUSH
1010: CALL_OW 88
1014: NOT
1015: IFFALSE 1056
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1017: LD_ADDR_VAR 0 4
1021: PUSH
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 3
1050: PPUSH
1051: CALL_OW 88
1055: ST_TO_ADDR
// end ;
1056: LD_VAR 0 4
1060: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1061: LD_INT 0
1063: PPUSH
1064: PPUSH
// if not group then
1065: LD_VAR 0 2
1069: NOT
1070: IFFALSE 1074
// exit ;
1072: GO 1119
// for i in group do
1074: LD_ADDR_VAR 0 4
1078: PUSH
1079: LD_VAR 0 2
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1117
// if See ( side , i ) then
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 4
1096: PPUSH
1097: CALL_OW 292
1101: IFFALSE 1115
// begin result := true ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// exit ;
1111: POP
1112: POP
1113: GO 1119
// end ;
1115: GO 1084
1117: POP
1118: POP
// end ; end_of_file
1119: LD_VAR 0 3
1123: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// uc_nation := 2 ;
1130: LD_ADDR_OWVAR 21
1134: PUSH
1135: LD_INT 2
1137: ST_TO_ADDR
// uc_side := 5 ;
1138: LD_ADDR_OWVAR 20
1142: PUSH
1143: LD_INT 5
1145: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1146: LD_ADDR_EXP 21
1150: PUSH
1151: LD_STRING Abdul
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: LD_STRING 
1159: PPUSH
1160: CALL 15234 0 3
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1173: LD_ADDR_EXP 13
1177: PUSH
1178: LD_STRING Heike
1180: PPUSH
1181: LD_EXP 1
1185: NOT
1186: PPUSH
1187: LD_EXP 2
1191: PPUSH
1192: CALL 15234 0 3
1196: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1197: LD_ADDR_EXP 16
1201: PUSH
1202: LD_STRING Ibrahim
1204: PPUSH
1205: LD_EXP 1
1209: NOT
1210: PPUSH
1211: LD_EXP 2
1215: PPUSH
1216: CALL 15234 0 3
1220: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_STRING Givi
1228: PPUSH
1229: LD_EXP 1
1233: NOT
1234: PPUSH
1235: LD_EXP 2
1239: PPUSH
1240: CALL 15234 0 3
1244: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_STRING Kamil
1252: PPUSH
1253: LD_EXP 1
1257: NOT
1258: PPUSH
1259: LD_EXP 2
1263: PPUSH
1264: CALL 15234 0 3
1268: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1269: LD_ADDR_EXP 18
1273: PUSH
1274: LD_STRING Kaia
1276: PPUSH
1277: LD_EXP 1
1281: NOT
1282: PPUSH
1283: LD_EXP 2
1287: PPUSH
1288: CALL 15234 0 3
1292: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1293: LD_ADDR_EXP 19
1297: PUSH
1298: LD_STRING Sophia
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_EXP 2
1311: PPUSH
1312: CALL 15234 0 3
1316: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1317: LD_ADDR_EXP 20
1321: PUSH
1322: LD_STRING Markov
1324: PPUSH
1325: LD_EXP 1
1329: NOT
1330: PPUSH
1331: LD_EXP 2
1335: PPUSH
1336: CALL 15234 0 3
1340: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1341: LD_ADDR_EXP 24
1345: PUSH
1346: LD_STRING Aviradze
1348: PPUSH
1349: LD_EXP 1
1353: NOT
1354: PPUSH
1355: LD_EXP 2
1359: PPUSH
1360: CALL 15234 0 3
1364: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1365: LD_ADDR_EXP 23
1369: PUSH
1370: LD_STRING Kurt
1372: PPUSH
1373: LD_EXP 1
1377: NOT
1378: PPUSH
1379: LD_EXP 2
1383: PPUSH
1384: CALL 15234 0 3
1388: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 15
1393: PUSH
1394: LD_STRING Mike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 15234 0 3
1412: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1413: LD_ADDR_EXP 22
1417: PUSH
1418: LD_STRING Olaf
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: LD_STRING 
1426: PPUSH
1427: CALL 15234 0 3
1431: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1432: LD_ADDR_EXP 25
1436: PUSH
1437: LD_STRING 06_others
1439: PPUSH
1440: CALL_OW 31
1444: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1445: LD_ADDR_EXP 26
1449: PUSH
1450: LD_STRING 06_apes
1452: PPUSH
1453: CALL_OW 31
1457: ST_TO_ADDR
// if debug then
1458: LD_EXP 1
1462: IFFALSE 1735
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1464: LD_ADDR_VAR 0 3
1468: PUSH
1469: LD_INT 14
1471: PUSH
1472: LD_INT 1
1474: PUSH
1475: LD_INT 2
1477: PUSH
1478: LD_INT 25
1480: PUSH
1481: LD_INT 2
1483: PUSH
1484: LD_INT 1000
1486: PUSH
1487: LD_INT 0
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 14
1501: PUSH
1502: LD_INT 1
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: LD_INT 31
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: LD_INT 1000
1516: PUSH
1517: LD_INT 0
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 14
1531: PUSH
1532: LD_INT 1
1534: PUSH
1535: LD_INT 1
1537: PUSH
1538: LD_INT 27
1540: PUSH
1541: LD_INT 2
1543: PUSH
1544: LD_INT 750
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 14
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 1
1567: PUSH
1568: LD_INT 27
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 900
1576: PUSH
1577: LD_INT 0
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 14
1591: PUSH
1592: LD_INT 1
1594: PUSH
1595: LD_INT 1
1597: PUSH
1598: LD_INT 32
1600: PUSH
1601: LD_INT 2
1603: PUSH
1604: LD_INT 1000
1606: PUSH
1607: LD_INT 100
1609: PUSH
1610: LD_INT 0
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 14
1628: PUSH
1629: LD_INT 1
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: LD_INT 32
1637: PUSH
1638: LD_INT 2
1640: PUSH
1641: LD_INT 1000
1643: PUSH
1644: LD_INT 50
1646: PUSH
1647: LD_INT 50
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 14
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 27
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 1000
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 14
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: LD_INT 92
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 1000
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: ST_TO_ADDR
// end else
1733: GO 1742
// tmp := [ ] ;
1735: LD_ADDR_VAR 0 3
1739: PUSH
1740: EMPTY
1741: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1742: LD_ADDR_EXP 27
1746: PUSH
1747: LD_STRING 06_Vehicles
1749: PPUSH
1750: LD_VAR 0 3
1754: PPUSH
1755: CALL_OW 30
1759: ST_TO_ADDR
// counter := 0 ;
1760: LD_ADDR_VAR 0 4
1764: PUSH
1765: LD_INT 0
1767: ST_TO_ADDR
// if heikeVehicles then
1768: LD_EXP 27
1772: IFFALSE 1894
// begin for i := heikeVehicles downto 1 do
1774: LD_ADDR_VAR 0 2
1778: PUSH
1779: DOUBLE
1780: LD_EXP 27
1784: INC
1785: ST_TO_ADDR
1786: LD_INT 1
1788: PUSH
1789: FOR_DOWNTO
1790: IFFALSE 1892
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1792: LD_EXP 27
1796: PUSH
1797: LD_VAR 0 2
1801: ARRAY
1802: PUSH
1803: LD_INT 3
1805: ARRAY
1806: PUSH
1807: LD_INT 2
1809: EQUAL
1810: IFFALSE 1890
// begin if counter < remoteControlLimit then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_EXP 12
1821: LESS
1822: IFFALSE 1870
// begin counter := Inc ( counter ) ;
1824: LD_ADDR_VAR 0 4
1828: PUSH
1829: LD_VAR 0 4
1833: PPUSH
1834: CALL 54044 0 1
1838: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1839: LD_ADDR_EXP 27
1843: PUSH
1844: LD_EXP 27
1848: PPUSH
1849: LD_EXP 27
1853: PPUSH
1854: LD_EXP 27
1858: PUSH
1859: LD_VAR 0 2
1863: ARRAY
1864: PPUSH
1865: CALL_OW 2
1869: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1870: LD_ADDR_EXP 27
1874: PUSH
1875: LD_EXP 27
1879: PPUSH
1880: LD_VAR 0 2
1884: PPUSH
1885: CALL_OW 3
1889: ST_TO_ADDR
// end ; end ;
1890: GO 1789
1892: POP
1893: POP
// end ; end ;
1894: LD_VAR 0 1
1898: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1899: LD_EXP 3
1903: IFFALSE 2437
1905: GO 1907
1907: DISABLE
1908: LD_INT 0
1910: PPUSH
1911: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: LD_INT 96
1919: PUSH
1920: LD_INT 50
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 49
1929: PUSH
1930: LD_INT 52
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 34
1939: PUSH
1940: LD_INT 55
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 41
1949: PUSH
1950: LD_INT 70
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 53
1959: PUSH
1960: LD_INT 96
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 103
1969: PUSH
1970: LD_INT 64
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 104
1987: PUSH
1988: LD_INT 70
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 111
1997: PUSH
1998: LD_INT 103
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 131
2007: PUSH
2008: LD_INT 147
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 130
2017: PUSH
2018: LD_INT 153
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 110
2027: PUSH
2028: LD_INT 93
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 103
2037: PUSH
2038: LD_INT 65
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: ST_TO_ADDR
// for i in tmp [ 1 ] do
2057: LD_ADDR_VAR 0 1
2061: PUSH
2062: LD_VAR 0 2
2066: PUSH
2067: LD_INT 1
2069: ARRAY
2070: PUSH
2071: FOR_IN
2072: IFFALSE 2124
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2074: LD_EXP 15
2078: PPUSH
2079: LD_VAR 0 1
2083: PUSH
2084: LD_INT 1
2086: ARRAY
2087: PPUSH
2088: LD_VAR 0 1
2092: PUSH
2093: LD_INT 2
2095: ARRAY
2096: PPUSH
2097: CALL_OW 174
// AddComHold ( Mike ) ;
2101: LD_EXP 15
2105: PPUSH
2106: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2110: LD_EXP 15
2114: PPUSH
2115: LD_INT 175
2117: PPUSH
2118: CALL_OW 202
// end ;
2122: GO 2071
2124: POP
2125: POP
// for i in tmp [ 2 ] do
2126: LD_ADDR_VAR 0 1
2130: PUSH
2131: LD_VAR 0 2
2135: PUSH
2136: LD_INT 2
2138: ARRAY
2139: PUSH
2140: FOR_IN
2141: IFFALSE 2193
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2143: LD_EXP 23
2147: PPUSH
2148: LD_VAR 0 1
2152: PUSH
2153: LD_INT 1
2155: ARRAY
2156: PPUSH
2157: LD_VAR 0 1
2161: PUSH
2162: LD_INT 2
2164: ARRAY
2165: PPUSH
2166: CALL_OW 174
// AddComHold ( Kurt ) ;
2170: LD_EXP 23
2174: PPUSH
2175: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2179: LD_EXP 23
2183: PPUSH
2184: LD_INT 175
2186: PPUSH
2187: CALL_OW 202
// end ;
2191: GO 2140
2193: POP
2194: POP
// wait ( 2 2$00 ) ;
2195: LD_INT 4200
2197: PPUSH
2198: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2202: LD_INT 35
2204: PPUSH
2205: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 314
2218: NOT
2219: PUSH
2220: LD_EXP 15
2224: PPUSH
2225: CALL_OW 301
2229: OR
2230: PUSH
2231: LD_EXP 23
2235: PPUSH
2236: CALL_OW 314
2240: NOT
2241: PUSH
2242: LD_EXP 23
2246: PPUSH
2247: CALL_OW 301
2251: OR
2252: AND
2253: IFFALSE 2202
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2255: LD_EXP 23
2259: PPUSH
2260: CALL_OW 301
2264: PUSH
2265: LD_EXP 15
2269: PPUSH
2270: CALL_OW 301
2274: AND
2275: IFFALSE 2287
// begin scoutFailed := true ;
2277: LD_ADDR_EXP 4
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// exit ;
2285: GO 2437
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2287: LD_EXP 23
2291: PUSH
2292: LD_EXP 15
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PPUSH
2301: LD_INT 132
2303: PPUSH
2304: LD_INT 52
2306: PPUSH
2307: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2311: LD_EXP 23
2315: PUSH
2316: LD_EXP 15
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PPUSH
2325: LD_INT 22
2327: PUSH
2328: LD_INT 2
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PPUSH
2335: CALL_OW 69
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: PPUSH
2344: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2348: LD_INT 35
2350: PPUSH
2351: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2355: LD_INT 2
2357: PPUSH
2358: LD_EXP 23
2362: PPUSH
2363: CALL_OW 292
2367: PUSH
2368: LD_INT 2
2370: PPUSH
2371: LD_EXP 15
2375: PPUSH
2376: CALL_OW 292
2380: OR
2381: IFFALSE 2348
// if IsLive ( Kurt ) then
2383: LD_EXP 23
2387: PPUSH
2388: CALL_OW 300
2392: IFFALSE 2406
// SetSide ( Kurt , 2 ) ;
2394: LD_EXP 23
2398: PPUSH
2399: LD_INT 2
2401: PPUSH
2402: CALL_OW 235
// if IsLive ( Mike ) then
2406: LD_EXP 15
2410: PPUSH
2411: CALL_OW 300
2415: IFFALSE 2429
// SetSide ( Mike , 2 ) ;
2417: LD_EXP 15
2421: PPUSH
2422: LD_INT 2
2424: PPUSH
2425: CALL_OW 235
// scoutSuccess := true ;
2429: LD_ADDR_EXP 5
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// end ; end_of_file
2437: PPOPN 2
2439: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2440: LD_INT 0
2442: PPUSH
2443: PPUSH
2444: PPUSH
2445: PPUSH
// uc_side := 1 ;
2446: LD_ADDR_OWVAR 20
2450: PUSH
2451: LD_INT 1
2453: ST_TO_ADDR
// uc_nation := 1 ;
2454: LD_ADDR_OWVAR 21
2458: PUSH
2459: LD_INT 1
2461: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2462: LD_INT 1
2464: PPUSH
2465: CALL_OW 274
2469: PPUSH
2470: LD_INT 1
2472: PPUSH
2473: LD_INT 2500
2475: PUSH
2476: LD_INT 3200
2478: PUSH
2479: LD_INT 3500
2481: PUSH
2482: LD_INT 3900
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_OWVAR 67
2495: ARRAY
2496: PPUSH
2497: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2501: LD_INT 1
2503: PPUSH
2504: CALL_OW 274
2508: PPUSH
2509: LD_INT 2
2511: PPUSH
2512: LD_INT 800
2514: PPUSH
2515: CALL_OW 277
// usForces := [ ] ;
2519: LD_ADDR_EXP 29
2523: PUSH
2524: EMPTY
2525: ST_TO_ADDR
// usToBuild := [ ] ;
2526: LD_ADDR_EXP 31
2530: PUSH
2531: EMPTY
2532: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2533: LD_ADDR_EXP 32
2537: PUSH
2538: EMPTY
2539: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: LD_INT 21
2547: PUSH
2548: LD_INT 3
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: PPUSH
2555: CALL_OW 69
2559: PUSH
2560: FOR_IN
2561: IFFALSE 2598
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2563: LD_VAR 0 2
2567: PPUSH
2568: LD_INT 6
2570: PUSH
2571: LD_INT 7
2573: PUSH
2574: LD_INT 8
2576: PUSH
2577: LD_INT 8
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: LD_OWVAR 67
2590: ARRAY
2591: PPUSH
2592: CALL_OW 241
2596: GO 2560
2598: POP
2599: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2600: LD_ADDR_VAR 0 2
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 69
2619: PUSH
2620: FOR_IN
2621: IFFALSE 2711
// begin if GetBWeapon ( i ) = us_radar then
2623: LD_VAR 0 2
2627: PPUSH
2628: CALL_OW 269
2632: PUSH
2633: LD_INT 11
2635: EQUAL
2636: IFFALSE 2661
// begin uc_nation := 0 ;
2638: LD_ADDR_OWVAR 21
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_INT 16
2651: PPUSH
2652: LD_INT 2
2654: PPUSH
2655: CALL_OW 380
// end else
2659: GO 2695
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2661: LD_INT 0
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 5
2669: PUSH
2670: LD_INT 6
2672: PUSH
2673: LD_INT 7
2675: PUSH
2676: LD_INT 8
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: PUSH
2685: LD_OWVAR 67
2689: ARRAY
2690: PPUSH
2691: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2695: CALL_OW 44
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL_OW 52
// end ;
2709: GO 2620
2711: POP
2712: POP
// b := HexInfo ( 74 , 120 ) ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: LD_INT 74
2720: PPUSH
2721: LD_INT 120
2723: PPUSH
2724: CALL_OW 428
2728: ST_TO_ADDR
// uc_nation := 1 ;
2729: LD_ADDR_OWVAR 21
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: DOUBLE
2743: LD_INT 1
2745: DEC
2746: ST_TO_ADDR
2747: LD_INT 1
2749: PUSH
2750: LD_INT 2
2752: PUSH
2753: LD_INT 3
2755: PUSH
2756: LD_INT 4
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_OWVAR 67
2769: ARRAY
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2824
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 1
2779: PPUSH
2780: LD_INT 5
2782: PUSH
2783: LD_INT 6
2785: PUSH
2786: LD_INT 7
2788: PUSH
2789: LD_INT 8
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: LD_OWVAR 67
2802: ARRAY
2803: PPUSH
2804: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2808: CALL_OW 44
2812: PPUSH
2813: LD_VAR 0 3
2817: PPUSH
2818: CALL_OW 52
// end ;
2822: GO 2771
2824: POP
2825: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL_OW 313
2835: PPUSH
2836: LD_INT 5
2838: PPUSH
2839: CALL_OW 336
// for i := 1 to 6 do
2843: LD_ADDR_VAR 0 2
2847: PUSH
2848: DOUBLE
2849: LD_INT 1
2851: DEC
2852: ST_TO_ADDR
2853: LD_INT 6
2855: PUSH
2856: FOR_TO
2857: IFFALSE 2907
// begin PrepareHuman ( false , 4 , 6 ) ;
2859: LD_INT 0
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: LD_INT 6
2867: PPUSH
2868: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2872: CALL_OW 44
2876: PPUSH
2877: LD_INT 32
2879: PUSH
2880: LD_INT 33
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_VAR 0 2
2891: PUSH
2892: LD_INT 2
2894: MOD
2895: PUSH
2896: LD_INT 1
2898: PLUS
2899: ARRAY
2900: PPUSH
2901: CALL_OW 52
// end ;
2905: GO 2856
2907: POP
2908: POP
// for i := 1 to 3 do
2909: LD_ADDR_VAR 0 2
2913: PUSH
2914: DOUBLE
2915: LD_INT 1
2917: DEC
2918: ST_TO_ADDR
2919: LD_INT 3
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2952
// begin PrepareHuman ( false , 3 , 6 ) ;
2925: LD_INT 0
2927: PPUSH
2928: LD_INT 3
2930: PPUSH
2931: LD_INT 6
2933: PPUSH
2934: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2938: CALL_OW 44
2942: PPUSH
2943: LD_INT 25
2945: PPUSH
2946: CALL_OW 52
// end ;
2950: GO 2922
2952: POP
2953: POP
// for i := 1 to 3 do
2954: LD_ADDR_VAR 0 2
2958: PUSH
2959: DOUBLE
2960: LD_INT 1
2962: DEC
2963: ST_TO_ADDR
2964: LD_INT 3
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3026
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 3
2975: PPUSH
2976: LD_INT 6
2978: PUSH
2979: LD_INT 7
2981: PUSH
2982: LD_INT 7
2984: PUSH
2985: LD_INT 7
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: PUSH
2994: LD_OWVAR 67
2998: ARRAY
2999: PPUSH
3000: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3004: CALL_OW 44
3008: PPUSH
3009: LD_INT 78
3011: PPUSH
3012: LD_INT 130
3014: PPUSH
3015: CALL_OW 428
3019: PPUSH
3020: CALL_OW 52
// end ;
3024: GO 2967
3026: POP
3027: POP
// for i := 1 to 3 do
3028: LD_ADDR_VAR 0 2
3032: PUSH
3033: DOUBLE
3034: LD_INT 1
3036: DEC
3037: ST_TO_ADDR
3038: LD_INT 3
3040: PUSH
3041: FOR_TO
3042: IFFALSE 3129
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3044: LD_INT 2
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: LD_INT 13
3055: PPUSH
3056: LD_INT 100
3058: PPUSH
3059: CALL 20249 0 5
// veh := CreateVehicle ;
3063: LD_ADDR_VAR 0 4
3067: PUSH
3068: CALL_OW 45
3072: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3085: LD_VAR 0 4
3089: PPUSH
3090: LD_INT 9
3092: PPUSH
3093: LD_INT 0
3095: PPUSH
3096: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3100: LD_INT 0
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3113: CALL_OW 44
3117: PPUSH
3118: LD_VAR 0 4
3122: PPUSH
3123: CALL_OW 52
// end ;
3127: GO 3041
3129: POP
3130: POP
// InitHc ;
3131: CALL_OW 19
// hc_gallery := us ;
3135: LD_ADDR_OWVAR 33
3139: PUSH
3140: LD_STRING us
3142: ST_TO_ADDR
// hc_face_number := 26 ;
3143: LD_ADDR_OWVAR 34
3147: PUSH
3148: LD_INT 26
3150: ST_TO_ADDR
// hc_name := Doug Callahan ;
3151: LD_ADDR_OWVAR 26
3155: PUSH
3156: LD_STRING Doug Callahan
3158: ST_TO_ADDR
// hc_class := class_engineer ;
3159: LD_ADDR_OWVAR 28
3163: PUSH
3164: LD_INT 2
3166: ST_TO_ADDR
// hc_sex := sex_male ;
3167: LD_ADDR_OWVAR 27
3171: PUSH
3172: LD_INT 1
3174: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3175: LD_ADDR_OWVAR 29
3179: PUSH
3180: LD_INT 10
3182: PUSH
3183: LD_INT 11
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3190: LD_ADDR_OWVAR 30
3194: PUSH
3195: LD_INT 2
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: LD_INT 0
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3213: LD_ADDR_OWVAR 31
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: LD_INT 6
3223: PUSH
3224: LD_INT 3
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: ST_TO_ADDR
// usCommander := CreateHuman ;
3236: LD_ADDR_EXP 28
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3246: LD_EXP 28
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: CALL_OW 52
// InitHC_All ( ) ;
3258: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3262: LD_INT 2
3264: PPUSH
3265: LD_INT 1
3267: PPUSH
3268: LD_INT 2
3270: PPUSH
3271: LD_INT 12
3273: PPUSH
3274: LD_INT 100
3276: PPUSH
3277: CALL 20249 0 5
// usCargo := CreateVehicle ;
3281: LD_ADDR_EXP 30
3285: PUSH
3286: CALL_OW 45
3290: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3291: LD_EXP 30
3295: PPUSH
3296: LD_INT 81
3298: PPUSH
3299: LD_INT 143
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 48
// Connect ( usCargo ) ;
3309: LD_EXP 30
3313: PPUSH
3314: CALL 23340 0 1
// DoNotAttack ( 5 , usCargo ) ;
3318: LD_INT 5
3320: PPUSH
3321: LD_EXP 30
3325: PPUSH
3326: CALL_OW 471
// end ;
3330: LD_VAR 0 1
3334: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3335: LD_EXP 29
3339: NOT
3340: PUSH
3341: LD_EXP 6
3345: AND
3346: PUSH
3347: LD_INT 25
3349: PPUSH
3350: CALL_OW 302
3354: AND
3355: PUSH
3356: LD_INT 25
3358: PPUSH
3359: CALL_OW 461
3363: PUSH
3364: LD_INT 2
3366: EQUAL
3367: AND
3368: IFFALSE 3525
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
3377: PPUSH
// begin enable ;
3378: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3379: LD_ADDR_VAR 0 1
3383: PUSH
3384: DOUBLE
3385: LD_INT 1
3387: DEC
3388: ST_TO_ADDR
3389: LD_INT 5
3391: PUSH
3392: LD_INT 6
3394: PUSH
3395: LD_INT 7
3397: PUSH
3398: LD_INT 8
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: PUSH
3413: FOR_TO
3414: IFFALSE 3523
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3416: LD_ADDR_VAR 0 2
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: LD_INT 4
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 1
3437: PPUSH
3438: LD_INT 3
3440: PPUSH
3441: CALL_OW 12
3445: ARRAY
3446: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3447: LD_VAR 0 2
3451: PUSH
3452: LD_INT 4
3454: EQUAL
3455: IFFALSE 3467
// weapon := us_heavy_gun else
3457: LD_ADDR_VAR 0 3
3461: PUSH
3462: LD_INT 6
3464: ST_TO_ADDR
3465: GO 3498
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3467: LD_ADDR_VAR 0 3
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 7
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 1
3488: PPUSH
3489: LD_INT 3
3491: PPUSH
3492: CALL_OW 12
3496: ARRAY
3497: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3498: LD_INT 25
3500: PPUSH
3501: LD_VAR 0 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 2
3511: PPUSH
3512: LD_VAR 0 3
3516: PPUSH
3517: CALL_OW 185
// end ;
3521: GO 3413
3523: POP
3524: POP
// end ;
3525: PPOPN 3
3527: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3528: LD_EXP 29
3532: PUSH
3533: LD_INT 5
3535: PUSH
3536: LD_INT 6
3538: PUSH
3539: LD_INT 7
3541: PUSH
3542: LD_INT 8
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: PUSH
3551: LD_OWVAR 67
3555: ARRAY
3556: GREATEREQUAL
3557: IFFALSE 3668
3559: GO 3561
3561: DISABLE
3562: LD_INT 0
3564: PPUSH
3565: PPUSH
// begin enable ;
3566: ENABLE
// tmp := usForces ;
3567: LD_ADDR_VAR 0 2
3571: PUSH
3572: LD_EXP 29
3576: ST_TO_ADDR
// usForces := [ ] ;
3577: LD_ADDR_EXP 29
3581: PUSH
3582: EMPTY
3583: ST_TO_ADDR
// if not tmp then
3584: LD_VAR 0 2
3588: NOT
3589: IFFALSE 3593
// exit ;
3591: GO 3668
// repeat wait ( 0 0$1 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3600: LD_ADDR_VAR 0 2
3604: PUSH
3605: LD_VAR 0 2
3609: PPUSH
3610: LD_INT 98
3612: PUSH
3613: LD_INT 50
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 114
3622: PUSH
3623: LD_INT 50
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: LD_INT 127
3632: PUSH
3633: LD_INT 51
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 131
3642: PUSH
3643: LD_INT 35
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL 55287 0 2
3660: ST_TO_ADDR
// until not tmp ;
3661: LD_VAR 0 2
3665: NOT
3666: IFFALSE 3593
// end ;
3668: PPOPN 2
3670: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3671: LD_EXP 3
3675: PUSH
3676: LD_EXP 5
3680: NOT
3681: AND
3682: PUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 22
3688: PUSH
3689: LD_INT 2
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PPUSH
3696: CALL_OW 70
3700: AND
3701: IFFALSE 3822
3703: GO 3705
3705: DISABLE
3706: LD_INT 0
3708: PPUSH
3709: PPUSH
3710: PPUSH
// begin uc_side := 1 ;
3711: LD_ADDR_OWVAR 20
3715: PUSH
3716: LD_INT 1
3718: ST_TO_ADDR
// uc_nation := 1 ;
3719: LD_ADDR_OWVAR 21
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// tmp := [ ] ;
3727: LD_ADDR_VAR 0 3
3731: PUSH
3732: EMPTY
3733: ST_TO_ADDR
// for i := 1 to 2 do
3734: LD_ADDR_VAR 0 1
3738: PUSH
3739: DOUBLE
3740: LD_INT 1
3742: DEC
3743: ST_TO_ADDR
3744: LD_INT 2
3746: PUSH
3747: FOR_TO
3748: IFFALSE 3820
// begin PrepareSoldier ( false , 7 ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 7
3755: PPUSH
3756: CALL_OW 381
// un := CreateHuman ;
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: CALL_OW 44
3769: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3770: LD_VAR 0 2
3774: PPUSH
3775: LD_INT 130
3777: PPUSH
3778: LD_INT 153
3780: PPUSH
3781: LD_INT 3
3783: PPUSH
3784: LD_INT 0
3786: PPUSH
3787: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3791: LD_VAR 0 2
3795: PPUSH
3796: LD_INT 5
3798: PPUSH
3799: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3803: LD_VAR 0 2
3807: PPUSH
3808: LD_INT 108
3810: PPUSH
3811: LD_INT 108
3813: PPUSH
3814: CALL_OW 174
// end ;
3818: GO 3747
3820: POP
3821: POP
// end ;
3822: PPOPN 3
3824: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3825: LD_EXP 3
3829: PUSH
3830: LD_EXP 5
3834: NOT
3835: AND
3836: PUSH
3837: LD_INT 10
3839: PPUSH
3840: LD_INT 22
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 70
3854: AND
3855: IFFALSE 3976
3857: GO 3859
3859: DISABLE
3860: LD_INT 0
3862: PPUSH
3863: PPUSH
3864: PPUSH
// begin uc_side := 1 ;
3865: LD_ADDR_OWVAR 20
3869: PUSH
3870: LD_INT 1
3872: ST_TO_ADDR
// uc_nation := 1 ;
3873: LD_ADDR_OWVAR 21
3877: PUSH
3878: LD_INT 1
3880: ST_TO_ADDR
// tmp := [ ] ;
3881: LD_ADDR_VAR 0 3
3885: PUSH
3886: EMPTY
3887: ST_TO_ADDR
// for i := 1 to 2 do
3888: LD_ADDR_VAR 0 1
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: FOR_TO
3902: IFFALSE 3974
// begin PrepareSoldier ( false , 7 ) ;
3904: LD_INT 0
3906: PPUSH
3907: LD_INT 7
3909: PPUSH
3910: CALL_OW 381
// un := CreateHuman ;
3914: LD_ADDR_VAR 0 2
3918: PUSH
3919: CALL_OW 44
3923: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3924: LD_VAR 0 2
3928: PPUSH
3929: LD_INT 56
3931: PPUSH
3932: LD_INT 101
3934: PPUSH
3935: LD_INT 3
3937: PPUSH
3938: LD_INT 0
3940: PPUSH
3941: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3945: LD_VAR 0 2
3949: PPUSH
3950: LD_INT 5
3952: PPUSH
3953: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_INT 72
3964: PPUSH
3965: LD_INT 92
3967: PPUSH
3968: CALL_OW 174
// end ;
3972: GO 3901
3974: POP
3975: POP
// end ;
3976: PPOPN 3
3978: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 302
3988: PUSH
3989: LD_EXP 7
3993: NOT
3994: AND
3995: IFFALSE 4258
3997: GO 3999
3999: DISABLE
4000: LD_INT 0
4002: PPUSH
4003: PPUSH
// begin enable ;
4004: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4005: LD_ADDR_VAR 0 2
4009: PUSH
4010: LD_INT 14
4012: PPUSH
4013: LD_INT 81
4015: PUSH
4016: LD_INT 1
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 50
4025: PUSH
4026: EMPTY
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 70
4037: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4038: LD_ADDR_VAR 0 1
4042: PUSH
4043: LD_INT 12
4045: PPUSH
4046: CALL_OW 435
4050: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4051: LD_EXP 30
4055: PPUSH
4056: CALL_OW 261
4060: PUSH
4061: LD_INT 10
4063: LESS
4064: PUSH
4065: LD_INT 2
4067: PPUSH
4068: LD_EXP 30
4072: PPUSH
4073: CALL_OW 292
4077: NOT
4078: AND
4079: IFFALSE 4093
// SetFuel ( usCargo , 100 ) ;
4081: LD_EXP 30
4085: PPUSH
4086: LD_INT 100
4088: PPUSH
4089: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4093: LD_EXP 30
4097: PPUSH
4098: CALL_OW 314
4102: NOT
4103: PUSH
4104: LD_EXP 30
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 289
4116: PUSH
4117: LD_INT 100
4119: LESS
4120: AND
4121: PUSH
4122: LD_VAR 0 2
4126: NOT
4127: AND
4128: IFFALSE 4194
// begin if cr then
4130: LD_VAR 0 1
4134: IFFALSE 4165
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4136: LD_EXP 30
4140: PPUSH
4141: LD_VAR 0 1
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PPUSH
4150: LD_VAR 0 1
4154: PUSH
4155: LD_INT 2
4157: ARRAY
4158: PPUSH
4159: CALL_OW 117
4163: GO 4192
// if not IsInArea ( usCargo , usCratesArea ) then
4165: LD_EXP 30
4169: PPUSH
4170: LD_INT 12
4172: PPUSH
4173: CALL_OW 308
4177: NOT
4178: IFFALSE 4192
// ComMoveToArea ( usCargo , usCratesArea ) ;
4180: LD_EXP 30
4184: PPUSH
4185: LD_INT 12
4187: PPUSH
4188: CALL_OW 113
// exit ;
4192: GO 4258
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4194: LD_VAR 0 2
4198: PUSH
4199: LD_EXP 30
4203: PPUSH
4204: LD_INT 14
4206: PPUSH
4207: CALL_OW 308
4211: NOT
4212: AND
4213: IFFALSE 4232
// ComMoveXY ( usCargo , 80 , 143 ) else
4215: LD_EXP 30
4219: PPUSH
4220: LD_INT 80
4222: PPUSH
4223: LD_INT 143
4225: PPUSH
4226: CALL_OW 111
4230: GO 4258
// if GetCargo ( usCargo , mat_cans ) then
4232: LD_EXP 30
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: CALL_OW 289
4244: IFFALSE 4258
// ComGive ( usCargo , usDepot ) ;
4246: LD_EXP 30
4250: PPUSH
4251: LD_INT 1
4253: PPUSH
4254: CALL_OW 161
// end ;
4258: PPOPN 2
4260: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4261: LD_EXP 7
4265: NOT
4266: PUSH
4267: LD_INT 22
4269: PUSH
4270: LD_INT 1
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: LD_INT 21
4279: PUSH
4280: LD_INT 1
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: LD_INT 50
4292: PUSH
4293: EMPTY
4294: LIST
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 69
4309: AND
4310: PUSH
4311: LD_INT 22
4313: PUSH
4314: LD_INT 1
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 3
4323: PUSH
4324: LD_INT 60
4326: PUSH
4327: EMPTY
4328: LIST
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 25
4336: PUSH
4337: LD_INT 4
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: AND
4354: IFFALSE 4557
4356: GO 4358
4358: DISABLE
4359: LD_INT 0
4361: PPUSH
4362: PPUSH
// begin enable ;
4363: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4364: LD_ADDR_VAR 0 1
4368: PUSH
4369: LD_INT 22
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PUSH
4379: LD_INT 21
4381: PUSH
4382: LD_INT 1
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 50
4394: PUSH
4395: EMPTY
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PUSH
4412: FOR_IN
4413: IFFALSE 4555
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4415: LD_ADDR_VAR 0 2
4419: PUSH
4420: LD_INT 22
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 3
4432: PUSH
4433: LD_INT 60
4435: PUSH
4436: EMPTY
4437: LIST
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 25
4445: PUSH
4446: LD_INT 4
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: LIST
4457: PPUSH
4458: CALL_OW 69
4462: ST_TO_ADDR
// if not sci then
4463: LD_VAR 0 2
4467: NOT
4468: IFFALSE 4472
// break ;
4470: GO 4555
// sci := sci [ 1 ] ;
4472: LD_ADDR_VAR 0 2
4476: PUSH
4477: LD_VAR 0 2
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: ST_TO_ADDR
// if IsInUnit ( sci ) then
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 310
4495: IFFALSE 4508
// ComExit ( sci ) else
4497: LD_VAR 0 2
4501: PPUSH
4502: CALL 53081 0 1
4506: GO 4553
// begin ComHeal ( sci , i ) ;
4508: LD_VAR 0 2
4512: PPUSH
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4522: LD_VAR 0 2
4526: PPUSH
4527: LD_INT 32
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 1
4539: PPUSH
4540: LD_INT 2
4542: PPUSH
4543: CALL_OW 12
4547: ARRAY
4548: PPUSH
4549: CALL_OW 180
// end ; end ;
4553: GO 4412
4555: POP
4556: POP
// end ;
4557: PPOPN 2
4559: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4560: LD_EXP 7
4564: NOT
4565: PUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 3
4578: PUSH
4579: LD_INT 60
4581: PUSH
4582: EMPTY
4583: LIST
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: LD_INT 50
4591: PUSH
4592: EMPTY
4593: LIST
4594: PUSH
4595: LD_INT 34
4597: PUSH
4598: LD_INT 13
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PPUSH
4611: CALL_OW 69
4615: AND
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 1
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 3
4629: PUSH
4630: LD_INT 24
4632: PUSH
4633: LD_INT 1000
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 21
4646: PUSH
4647: LD_INT 3
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 3
4656: PUSH
4657: LD_INT 30
4659: PUSH
4660: LD_INT 29
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: PPUSH
4677: CALL_OW 69
4681: AND
4682: IFFALSE 4951
4684: GO 4686
4686: DISABLE
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
4691: PPUSH
// begin enable ;
4692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4693: LD_ADDR_VAR 0 2
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: LD_INT 24
4713: PUSH
4714: LD_INT 1000
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 21
4727: PUSH
4728: LD_INT 3
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 3
4737: PUSH
4738: LD_INT 30
4740: PUSH
4741: LD_INT 29
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 3
4780: PUSH
4781: LD_INT 24
4783: PUSH
4784: LD_INT 600
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 21
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 29
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4833: LD_ADDR_VAR 0 1
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 3
4850: PUSH
4851: LD_INT 60
4853: PUSH
4854: EMPTY
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 50
4863: PUSH
4864: EMPTY
4865: LIST
4866: PUSH
4867: LD_INT 34
4869: PUSH
4870: LD_INT 13
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 69
4887: PUSH
4888: FOR_IN
4889: IFFALSE 4949
// begin if tmp2 then
4891: LD_VAR 0 3
4895: IFFALSE 4923
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4897: LD_VAR 0 1
4901: PPUSH
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 74
4916: PPUSH
4917: CALL_OW 130
4921: GO 4947
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4923: LD_VAR 0 1
4927: PPUSH
4928: LD_VAR 0 2
4932: PPUSH
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL_OW 74
4942: PPUSH
4943: CALL_OW 130
// end ;
4947: GO 4888
4949: POP
4950: POP
// end ;
4951: PPOPN 3
4953: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4954: LD_EXP 7
4958: NOT
4959: PUSH
4960: LD_INT 14
4962: PPUSH
4963: LD_INT 81
4965: PUSH
4966: LD_INT 1
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 50
4975: PUSH
4976: EMPTY
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PPUSH
4983: CALL_OW 70
4987: NOT
4988: AND
4989: PUSH
4990: LD_EXP 31
4994: AND
4995: PUSH
4996: LD_INT 22
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_INT 3
5008: PUSH
5009: LD_INT 60
5011: PUSH
5012: EMPTY
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 50
5021: PUSH
5022: EMPTY
5023: LIST
5024: PUSH
5025: LD_INT 34
5027: PUSH
5028: LD_INT 13
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 69
5045: AND
5046: IFFALSE 5158
5048: GO 5050
5050: DISABLE
// begin enable ;
5051: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5052: LD_INT 22
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 3
5064: PUSH
5065: LD_INT 60
5067: PUSH
5068: EMPTY
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 50
5077: PUSH
5078: EMPTY
5079: LIST
5080: PUSH
5081: LD_INT 34
5083: PUSH
5084: LD_INT 13
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: PPUSH
5097: CALL_OW 69
5101: PPUSH
5102: LD_EXP 31
5106: PUSH
5107: LD_INT 1
5109: ARRAY
5110: PUSH
5111: LD_INT 1
5113: ARRAY
5114: PPUSH
5115: LD_EXP 31
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PUSH
5124: LD_INT 2
5126: ARRAY
5127: PPUSH
5128: LD_EXP 31
5132: PUSH
5133: LD_INT 1
5135: ARRAY
5136: PUSH
5137: LD_INT 3
5139: ARRAY
5140: PPUSH
5141: LD_EXP 31
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PUSH
5150: LD_INT 4
5152: ARRAY
5153: PPUSH
5154: CALL_OW 566
// end ;
5158: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 50
5171: PUSH
5172: EMPTY
5173: LIST
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 54
5180: PUSH
5181: EMPTY
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 2
5190: PUSH
5191: LD_INT 25
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 25
5203: PUSH
5204: LD_INT 5
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 16
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 69
5237: IFFALSE 5599
5239: GO 5241
5241: DISABLE
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
5247: PPUSH
// begin enable ;
5248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5249: LD_ADDR_VAR 0 2
5253: PUSH
5254: LD_INT 22
5256: PUSH
5257: LD_INT 1
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: LD_INT 50
5266: PUSH
5267: EMPTY
5268: LIST
5269: PUSH
5270: LD_INT 3
5272: PUSH
5273: LD_INT 54
5275: PUSH
5276: EMPTY
5277: LIST
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 2
5285: PUSH
5286: LD_INT 25
5288: PUSH
5289: LD_INT 1
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 25
5298: PUSH
5299: LD_INT 5
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 25
5308: PUSH
5309: LD_INT 16
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PPUSH
5328: CALL_OW 69
5332: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 50
5350: PUSH
5351: EMPTY
5352: LIST
5353: PUSH
5354: LD_INT 21
5356: PUSH
5357: LD_INT 3
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 30
5366: PUSH
5367: LD_INT 32
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 58
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5392: LD_ADDR_VAR 0 4
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 1
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 50
5409: PUSH
5410: EMPTY
5411: LIST
5412: PUSH
5413: LD_INT 30
5415: PUSH
5416: LD_INT 5
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: PPUSH
5428: CALL_OW 69
5432: ST_TO_ADDR
// if not tmp then
5433: LD_VAR 0 2
5437: NOT
5438: IFFALSE 5442
// exit ;
5440: GO 5599
// for i in tmp do
5442: LD_ADDR_VAR 0 1
5446: PUSH
5447: LD_VAR 0 2
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5597
// begin btmp := FilterByTag ( btmp , 0 ) ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL 50257 0 2
5472: ST_TO_ADDR
// if not btmp then
5473: LD_VAR 0 3
5477: NOT
5478: IFFALSE 5523
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5480: LD_VAR 0 1
5484: PPUSH
5485: CALL_OW 257
5489: PUSH
5490: LD_INT 16
5492: NONEQUAL
5493: PUSH
5494: LD_VAR 0 4
5498: AND
5499: IFFALSE 5519
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5501: LD_VAR 0 1
5505: PPUSH
5506: LD_VAR 0 4
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: CALL_OW 120
// continue ;
5519: GO 5452
// end else
5521: GO 5595
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5523: LD_VAR 0 3
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: LD_INT 1
5534: PPUSH
5535: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5539: LD_VAR 0 1
5543: PPUSH
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 1
5551: ARRAY
5552: PPUSH
5553: CALL_OW 120
// wait ( 0 0$9 ) ;
5557: LD_INT 315
5559: PPUSH
5560: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 1
5571: ARRAY
5572: PPUSH
5573: CALL 17390 0 1
5577: IFFALSE 5595
// SetTag ( btmp [ 1 ] , 0 ) ;
5579: LD_VAR 0 3
5583: PUSH
5584: LD_INT 1
5586: ARRAY
5587: PPUSH
5588: LD_INT 0
5590: PPUSH
5591: CALL_OW 109
// end ; end ;
5595: GO 5452
5597: POP
5598: POP
// end ;
5599: PPOPN 4
5601: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5602: LD_INT 22
5604: PUSH
5605: LD_INT 1
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: LD_INT 33
5614: PUSH
5615: LD_INT 2
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 50
5624: PUSH
5625: EMPTY
5626: LIST
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: LD_INT 61
5633: PUSH
5634: EMPTY
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: PPUSH
5647: CALL_OW 69
5651: IFFALSE 5742
5653: GO 5655
5655: DISABLE
5656: LD_INT 0
5658: PPUSH
5659: PPUSH
// begin enable ;
5660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_INT 22
5668: PUSH
5669: LD_INT 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 33
5678: PUSH
5679: LD_INT 2
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PUSH
5686: LD_INT 50
5688: PUSH
5689: EMPTY
5690: LIST
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: LD_INT 61
5697: PUSH
5698: EMPTY
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PPUSH
5711: CALL_OW 69
5715: ST_TO_ADDR
// for i in tmp do
5716: LD_ADDR_VAR 0 1
5720: PUSH
5721: LD_VAR 0 2
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5740
// Connect ( i ) ;
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL 23340 0 1
5738: GO 5726
5740: POP
5741: POP
// end ;
5742: PPOPN 2
5744: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5745: LD_EXP 6
5749: PUSH
5750: LD_OWVAR 67
5754: PUSH
5755: LD_INT 1
5757: GREATER
5758: AND
5759: IFFALSE 6201
5761: GO 5763
5763: DISABLE
5764: LD_INT 0
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5771: LD_INT 21000
5773: PUSH
5774: LD_INT 18900
5776: PUSH
5777: LD_INT 16800
5779: PUSH
5780: LD_INT 14700
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: PUSH
5789: LD_OWVAR 67
5793: ARRAY
5794: PPUSH
5795: CALL_OW 67
// if usSurrender then
5799: LD_EXP 7
5803: IFFALSE 5807
// exit ;
5805: GO 6201
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5807: LD_ADDR_VAR 0 1
5811: PUSH
5812: DOUBLE
5813: LD_INT 1
5815: DEC
5816: ST_TO_ADDR
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: LD_INT 6
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: PUSH
5835: LD_OWVAR 67
5839: ARRAY
5840: PUSH
5841: FOR_TO
5842: IFFALSE 6146
// begin uc_side := 1 ;
5844: LD_ADDR_OWVAR 20
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// uc_nation := 1 ;
5852: LD_ADDR_OWVAR 21
5856: PUSH
5857: LD_INT 1
5859: ST_TO_ADDR
// InitHc_All ( ) ;
5860: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 5
5872: PUSH
5873: LD_INT 6
5875: PUSH
5876: LD_INT 7
5878: PUSH
5879: LD_INT 8
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: LD_OWVAR 67
5892: ARRAY
5893: PPUSH
5894: CALL_OW 380
// un := CreateHuman ;
5898: LD_ADDR_VAR 0 2
5902: PUSH
5903: CALL_OW 44
5907: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5908: LD_ADDR_VAR 0 4
5912: PUSH
5913: LD_INT 2
5915: PUSH
5916: LD_INT 3
5918: PUSH
5919: LD_INT 4
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_VAR 0 1
5931: PUSH
5932: LD_INT 3
5934: MOD
5935: PUSH
5936: LD_INT 1
5938: PLUS
5939: ARRAY
5940: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5941: LD_VAR 0 4
5945: PUSH
5946: LD_INT 4
5948: EQUAL
5949: IFFALSE 5984
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5951: LD_ADDR_VAR 0 5
5955: PUSH
5956: LD_INT 6
5958: PUSH
5959: LD_INT 4
5961: PUSH
5962: LD_INT 5
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_INT 3
5975: PPUSH
5976: CALL_OW 12
5980: ARRAY
5981: ST_TO_ADDR
5982: GO 6019
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
5984: LD_ADDR_VAR 0 5
5988: PUSH
5989: LD_INT 5
5991: PUSH
5992: LD_INT 5
5994: PUSH
5995: LD_INT 7
5997: PUSH
5998: LD_INT 4
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 1
6009: PPUSH
6010: LD_INT 4
6012: PPUSH
6013: CALL_OW 12
6017: ARRAY
6018: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6019: LD_VAR 0 4
6023: PPUSH
6024: LD_INT 1
6026: PPUSH
6027: LD_INT 1
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: LD_INT 30
6037: PPUSH
6038: CALL 20249 0 5
// veh := CreateVehicle ;
6042: LD_ADDR_VAR 0 3
6046: PUSH
6047: CALL_OW 45
6051: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6052: LD_ADDR_EXP 32
6056: PUSH
6057: LD_EXP 32
6061: PPUSH
6062: LD_EXP 32
6066: PUSH
6067: LD_INT 1
6069: PLUS
6070: PPUSH
6071: LD_VAR 0 3
6075: PPUSH
6076: CALL_OW 1
6080: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6081: LD_VAR 0 3
6085: PPUSH
6086: LD_INT 4
6088: PPUSH
6089: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6093: LD_VAR 0 3
6097: PPUSH
6098: LD_INT 15
6100: PPUSH
6101: LD_INT 0
6103: PPUSH
6104: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6108: LD_VAR 0 2
6112: PPUSH
6113: LD_VAR 0 3
6117: PPUSH
6118: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_INT 153
6129: PPUSH
6130: LD_INT 45
6132: PPUSH
6133: CALL_OW 111
// wait ( 0 0$2 ) ;
6137: LD_INT 70
6139: PPUSH
6140: CALL_OW 67
// end ;
6144: GO 5841
6146: POP
6147: POP
// repeat wait ( 0 0$1 ) ;
6148: LD_INT 35
6150: PPUSH
6151: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6155: LD_ADDR_EXP 32
6159: PUSH
6160: LD_EXP 32
6164: PPUSH
6165: LD_INT 150
6167: PUSH
6168: LD_INT 36
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 138
6177: PUSH
6178: LD_INT 25
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PPUSH
6189: CALL 55287 0 2
6193: ST_TO_ADDR
// until not usAdditionalForces ;
6194: LD_EXP 32
6198: NOT
6199: IFFALSE 6148
// end ;
6201: PPOPN 5
6203: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6204: LD_INT 22
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 101
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PPUSH
6228: CALL_OW 69
6232: IFFALSE 6245
6234: GO 6236
6236: DISABLE
// usAttacksAllowed := true ; end_of_file
6237: LD_ADDR_EXP 6
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
6245: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL 56765 0 1
// if un = Heike then
6255: LD_VAR 0 1
6259: PUSH
6260: LD_EXP 13
6264: EQUAL
6265: IFFALSE 6274
// YouLost ( Heike ) ;
6267: LD_STRING Heike
6269: PPUSH
6270: CALL_OW 104
// if un = usCommander then
6274: LD_VAR 0 1
6278: PUSH
6279: LD_EXP 28
6283: EQUAL
6284: IFFALSE 6293
// YouLost ( Commander ) ;
6286: LD_STRING Commander
6288: PPUSH
6289: CALL_OW 104
// if GetSide ( un ) = 1 then
6293: LD_VAR 0 1
6297: PPUSH
6298: CALL_OW 255
6302: PUSH
6303: LD_INT 1
6305: EQUAL
6306: IFFALSE 6557
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6308: LD_VAR 0 1
6312: PPUSH
6313: CALL_OW 264
6317: PUSH
6318: LD_INT 13
6320: EQUAL
6321: PUSH
6322: LD_INT 25
6324: PPUSH
6325: CALL_OW 302
6329: AND
6330: IFFALSE 6351
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6332: LD_INT 25
6334: PPUSH
6335: LD_INT 2
6337: PPUSH
6338: LD_INT 2
6340: PPUSH
6341: LD_INT 2
6343: PPUSH
6344: LD_INT 13
6346: PPUSH
6347: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 264
6360: PUSH
6361: LD_INT 12
6363: EQUAL
6364: PUSH
6365: LD_INT 25
6367: PPUSH
6368: CALL_OW 302
6372: AND
6373: IFFALSE 6394
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6375: LD_INT 25
6377: PPUSH
6378: LD_INT 2
6380: PPUSH
6381: LD_INT 1
6383: PPUSH
6384: LD_INT 2
6386: PPUSH
6387: LD_INT 12
6389: PPUSH
6390: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 266
6403: PUSH
6404: LD_INT 32
6406: EQUAL
6407: IFFALSE 6472
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6409: LD_ADDR_EXP 31
6413: PUSH
6414: LD_EXP 31
6418: PPUSH
6419: LD_EXP 31
6423: PUSH
6424: LD_INT 1
6426: PLUS
6427: PPUSH
6428: LD_INT 32
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 250
6440: PUSH
6441: LD_VAR 0 1
6445: PPUSH
6446: CALL_OW 251
6450: PUSH
6451: LD_VAR 0 1
6455: PPUSH
6456: CALL_OW 254
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 1
6471: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 266
6481: PUSH
6482: LD_INT 5
6484: PUSH
6485: LD_INT 4
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: IN
6492: IFFALSE 6557
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6494: LD_ADDR_EXP 31
6498: PUSH
6499: LD_EXP 31
6503: PPUSH
6504: LD_EXP 31
6508: PUSH
6509: LD_INT 1
6511: PLUS
6512: PPUSH
6513: LD_INT 4
6515: PUSH
6516: LD_VAR 0 1
6520: PPUSH
6521: CALL_OW 250
6525: PUSH
6526: LD_VAR 0 1
6530: PPUSH
6531: CALL_OW 251
6535: PUSH
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 254
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 1
6556: ST_TO_ADDR
// end ; end ;
6557: PPOPN 1
6559: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 255
6569: PUSH
6570: LD_INT 1
6572: EQUAL
6573: PUSH
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 110
6583: PUSH
6584: LD_INT 1
6586: EQUAL
6587: AND
6588: IFFALSE 6602
// SetTag ( un , 0 ) ;
6590: LD_VAR 0 1
6594: PPUSH
6595: LD_INT 0
6597: PPUSH
6598: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6602: LD_VAR 0 1
6606: PPUSH
6607: CALL_OW 255
6611: PUSH
6612: LD_INT 1
6614: EQUAL
6615: PUSH
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 264
6625: PUSH
6626: LD_INT 6
6628: EQUAL
6629: AND
6630: PUSH
6631: LD_EXP 11
6635: NOT
6636: AND
6637: IFFALSE 6647
// seeHeavyGun := true ;
6639: LD_ADDR_EXP 11
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 263
6656: PUSH
6657: LD_INT 2
6659: EQUAL
6660: PUSH
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL_OW 255
6670: PUSH
6671: LD_INT 2
6673: NONEQUAL
6674: AND
6675: IFFALSE 6701
// begin ComUnlink ( un ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 136
// if not seeRemoteVehicle then
6686: LD_EXP 10
6690: NOT
6691: IFFALSE 6701
// seeRemoteVehicle := true ;
6693: LD_ADDR_EXP 10
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// end ; end ;
6701: PPOPN 1
6703: END
// on BuildingComplete ( b ) do var i , barracks ;
6704: LD_INT 0
6706: PPUSH
6707: PPUSH
// begin if GetSide ( b ) = 1 then
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 255
6717: PUSH
6718: LD_INT 1
6720: EQUAL
6721: IFFALSE 6873
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6723: LD_ADDR_EXP 31
6727: PUSH
6728: LD_EXP 31
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: CALL_OW 3
6740: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 266
6750: PUSH
6751: LD_INT 4
6753: EQUAL
6754: IFFALSE 6765
// ComUpgrade ( b ) ;
6756: LD_VAR 0 1
6760: PPUSH
6761: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 266
6774: PUSH
6775: LD_INT 32
6777: EQUAL
6778: IFFALSE 6873
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: LD_INT 6
6787: PUSH
6788: LD_INT 7
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_INT 2
6800: PPUSH
6801: CALL_OW 12
6805: ARRAY
6806: PPUSH
6807: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_INT 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 5
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: ST_TO_ADDR
// if barracks then
6845: LD_VAR 0 3
6849: IFFALSE 6873
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6851: LD_VAR 0 3
6855: PUSH
6856: LD_INT 1
6858: ARRAY
6859: PPUSH
6860: CALL_OW 313
6864: PUSH
6865: LD_INT 1
6867: ARRAY
6868: PPUSH
6869: CALL_OW 122
// end ; end ; end ;
6873: PPOPN 3
6875: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6876: LD_VAR 0 1
6880: PPUSH
6881: LD_VAR 0 2
6885: PPUSH
6886: CALL 56885 0 2
// if GetSide ( factory ) = 1 then
6890: LD_VAR 0 2
6894: PPUSH
6895: CALL_OW 255
6899: PUSH
6900: LD_INT 1
6902: EQUAL
6903: IFFALSE 6982
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 264
6914: PUSH
6915: LD_INT 12
6917: EQUAL
6918: IFFALSE 6930
// usCargo := vehicle ;
6920: LD_ADDR_EXP 30
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6930: LD_VAR 0 1
6934: PPUSH
6935: CALL_OW 264
6939: PUSH
6940: LD_INT 12
6942: PUSH
6943: LD_INT 13
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: IN
6950: NOT
6951: IFFALSE 6982
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6953: LD_ADDR_EXP 29
6957: PUSH
6958: LD_EXP 29
6962: PPUSH
6963: LD_EXP 29
6967: PUSH
6968: LD_INT 1
6970: PLUS
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: CALL_OW 1
6981: ST_TO_ADDR
// end ; end ;
6982: PPOPN 2
6984: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
6985: LD_VAR 0 2
6989: PPUSH
6990: CALL_OW 255
6994: PUSH
6995: LD_INT 1
6997: EQUAL
6998: IFFALSE 7012
// AddComEnterUnit ( un , amFac ) ;
7000: LD_VAR 0 1
7004: PPUSH
7005: LD_INT 25
7007: PPUSH
7008: CALL_OW 180
// end ;
7012: PPOPN 4
7014: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7015: LD_VAR 0 1
7019: PPUSH
7020: CALL_OW 255
7024: PUSH
7025: LD_INT 1
7027: EQUAL
7028: PUSH
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 266
7038: PUSH
7039: LD_INT 32
7041: EQUAL
7042: AND
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 257
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: LD_INT 5
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: IN
7064: AND
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 30
7078: PUSH
7079: LD_INT 5
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 50
7088: PUSH
7089: EMPTY
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: AND
7102: IFFALSE 7172
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7104: LD_INT 74
7106: PPUSH
7107: LD_INT 120
7109: PPUSH
7110: CALL_OW 428
7114: PPUSH
7115: CALL_OW 313
7119: PUSH
7120: LD_INT 6
7122: LESS
7123: IFFALSE 7172
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7125: LD_VAR 0 2
7129: PPUSH
7130: LD_INT 74
7132: PPUSH
7133: LD_INT 120
7135: PPUSH
7136: CALL_OW 428
7140: PPUSH
7141: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7145: LD_VAR 0 2
7149: PPUSH
7150: CALL_OW 257
7154: PUSH
7155: LD_INT 1
7157: EQUAL
7158: IFFALSE 7172
// AddComChangeProfession ( un , class_sniper ) ;
7160: LD_VAR 0 2
7164: PPUSH
7165: LD_INT 5
7167: PPUSH
7168: CALL_OW 183
// end ; end ; end_of_file
7172: PPOPN 2
7174: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7175: LD_INT 0
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
7181: PPUSH
7182: PPUSH
7183: PPUSH
7184: PPUSH
7185: PPUSH
// Video ( true ) ;
7186: LD_INT 1
7188: PPUSH
7189: CALL 52655 0 1
// music_nat := 1 ;
7193: LD_ADDR_OWVAR 71
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// music_class := music_recon ;
7201: LD_ADDR_OWVAR 72
7205: PUSH
7206: LD_INT 3
7208: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7209: LD_INT 184
7211: PPUSH
7212: LD_INT 142
7214: PPUSH
7215: LD_INT 2
7217: PPUSH
7218: LD_INT 10
7220: NEG
7221: PPUSH
7222: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7226: LD_INT 184
7228: PPUSH
7229: LD_INT 142
7231: PPUSH
7232: LD_INT 2
7234: PPUSH
7235: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7239: LD_INT 204
7241: PPUSH
7242: LD_INT 151
7244: PPUSH
7245: LD_INT 2
7247: PPUSH
7248: LD_INT 10
7250: NEG
7251: PPUSH
7252: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7256: LD_INT 204
7258: PPUSH
7259: LD_INT 151
7261: PPUSH
7262: LD_INT 2
7264: PPUSH
7265: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7269: LD_INT 184
7271: PPUSH
7272: LD_INT 142
7274: PPUSH
7275: CALL_OW 86
// wait ( 0 0$2 ) ;
7279: LD_INT 70
7281: PPUSH
7282: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7286: LD_ADDR_VAR 0 5
7290: PUSH
7291: LD_EXP 13
7295: PUSH
7296: LD_EXP 14
7300: PUSH
7301: LD_EXP 15
7305: PUSH
7306: LD_EXP 16
7310: PUSH
7311: LD_EXP 17
7315: PUSH
7316: LD_EXP 18
7320: PUSH
7321: LD_EXP 19
7325: PUSH
7326: LD_EXP 20
7330: PUSH
7331: LD_EXP 22
7335: PUSH
7336: LD_EXP 23
7340: PUSH
7341: LD_EXP 24
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_EXP 25
7363: UNION
7364: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7365: LD_ADDR_VAR 0 6
7369: PUSH
7370: LD_VAR 0 5
7374: PPUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 72
7389: PUSH
7390: LD_INT 0
7392: GREATER
7393: ST_TO_ADDR
// hasCamera := false ;
7394: LD_ADDR_VAR 0 7
7398: PUSH
7399: LD_INT 0
7401: ST_TO_ADDR
// if not hasEng then
7402: LD_VAR 0 6
7406: NOT
7407: IFFALSE 7435
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7409: LD_VAR 0 5
7413: PUSH
7414: LD_INT 1
7416: PPUSH
7417: LD_VAR 0 5
7421: PPUSH
7422: CALL_OW 12
7426: ARRAY
7427: PPUSH
7428: LD_INT 2
7430: PPUSH
7431: CALL_OW 336
// if heikeVehicles then
7435: LD_EXP 27
7439: IFFALSE 8063
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_VAR 0 5
7450: PPUSH
7451: LD_INT 3
7453: PPUSH
7454: CALL 54909 0 2
7458: ST_TO_ADDR
// for i in heikeVehicles do
7459: LD_ADDR_VAR 0 2
7463: PUSH
7464: LD_EXP 27
7468: PUSH
7469: FOR_IN
7470: IFFALSE 8061
// begin if not tmp then
7472: LD_VAR 0 5
7476: NOT
7477: IFFALSE 7481
// break ;
7479: GO 8061
// uc_side := 2 ;
7481: LD_ADDR_OWVAR 20
7485: PUSH
7486: LD_INT 2
7488: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7489: LD_ADDR_OWVAR 21
7493: PUSH
7494: LD_VAR 0 2
7498: PUSH
7499: LD_INT 5
7501: ARRAY
7502: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7503: LD_ADDR_OWVAR 37
7507: PUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7517: LD_ADDR_OWVAR 39
7521: PUSH
7522: LD_VAR 0 2
7526: PUSH
7527: LD_INT 2
7529: ARRAY
7530: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7531: LD_ADDR_OWVAR 38
7535: PUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_INT 3
7543: ARRAY
7544: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7545: LD_ADDR_OWVAR 40
7549: PUSH
7550: LD_VAR 0 2
7554: PUSH
7555: LD_INT 4
7557: ARRAY
7558: ST_TO_ADDR
// veh := CreateVehicle ;
7559: LD_ADDR_VAR 0 4
7563: PUSH
7564: CALL_OW 45
7568: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7569: LD_VAR 0 4
7573: PPUSH
7574: LD_INT 4
7576: PPUSH
7577: CALL_OW 233
// if i [ 3 ] = control_manual then
7581: LD_VAR 0 2
7585: PUSH
7586: LD_INT 3
7588: ARRAY
7589: PUSH
7590: LD_INT 1
7592: EQUAL
7593: IFFALSE 7678
// begin PlaceUnitArea ( veh , startArea , false ) ;
7595: LD_VAR 0 4
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7610: LD_VAR 0 2
7614: PUSH
7615: LD_INT 4
7617: ARRAY
7618: PUSH
7619: LD_INT 31
7621: EQUAL
7622: IFFALSE 7640
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7624: LD_VAR 0 5
7628: PUSH
7629: LD_INT 1
7631: ARRAY
7632: PPUSH
7633: LD_INT 3
7635: PPUSH
7636: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7640: LD_VAR 0 5
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_VAR 0 4
7653: PPUSH
7654: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7658: LD_ADDR_VAR 0 5
7662: PUSH
7663: LD_VAR 0 5
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 3
7675: ST_TO_ADDR
// end else
7676: GO 7739
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7678: LD_INT 22
7680: PUSH
7681: LD_INT 2
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 34
7690: PUSH
7691: LD_INT 31
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: IFFALSE 7739
// begin PlaceUnitArea ( veh , startArea , false ) ;
7708: LD_VAR 0 4
7712: PPUSH
7713: LD_INT 1
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// Connect ( veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: CALL 23340 0 1
// wait ( 0 0$2 ) ;
7732: LD_INT 70
7734: PPUSH
7735: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7739: LD_VAR 0 4
7743: PPUSH
7744: LD_VAR 0 2
7748: PUSH
7749: LD_INT 6
7751: ARRAY
7752: PPUSH
7753: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7757: LD_VAR 0 4
7761: PPUSH
7762: LD_INT 20
7764: PPUSH
7765: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7769: LD_VAR 0 2
7773: PUSH
7774: LD_INT 7
7776: ARRAY
7777: PUSH
7778: LD_VAR 0 4
7782: PPUSH
7783: CALL_OW 264
7787: PUSH
7788: LD_INT 51
7790: PUSH
7791: LD_INT 32
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: IN
7798: AND
7799: IFFALSE 7850
// begin for j := 1 to 2 do
7801: LD_ADDR_VAR 0 3
7805: PUSH
7806: DOUBLE
7807: LD_INT 1
7809: DEC
7810: ST_TO_ADDR
7811: LD_INT 2
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7848
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7817: LD_VAR 0 4
7821: PPUSH
7822: LD_VAR 0 3
7826: PPUSH
7827: LD_VAR 0 2
7831: PUSH
7832: LD_INT 7
7834: ARRAY
7835: PUSH
7836: LD_VAR 0 3
7840: ARRAY
7841: PPUSH
7842: CALL_OW 291
7846: GO 7814
7848: POP
7849: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7850: LD_VAR 0 4
7854: PPUSH
7855: LD_INT 185
7857: PPUSH
7858: LD_INT 144
7860: PPUSH
7861: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7865: LD_VAR 0 4
7869: PPUSH
7870: CALL_OW 263
7874: PUSH
7875: LD_INT 1
7877: EQUAL
7878: PUSH
7879: LD_VAR 0 7
7883: NOT
7884: AND
7885: PUSH
7886: LD_VAR 0 4
7890: PPUSH
7891: CALL_OW 311
7895: PPUSH
7896: CALL_OW 257
7900: PUSH
7901: LD_INT 2
7903: EQUAL
7904: AND
7905: IFFALSE 8010
// begin hasCamera := true ;
7907: LD_ADDR_VAR 0 7
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7915: LD_ADDR_VAR 0 8
7919: PUSH
7920: LD_VAR 0 4
7924: PPUSH
7925: CALL_OW 311
7929: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7930: LD_VAR 0 4
7934: PPUSH
7935: LD_INT 177
7937: PPUSH
7938: LD_INT 138
7940: PPUSH
7941: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7945: LD_VAR 0 8
7949: PPUSH
7950: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7954: LD_VAR 0 8
7958: PPUSH
7959: LD_INT 190
7961: PPUSH
7962: LD_INT 150
7964: PPUSH
7965: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7969: LD_VAR 0 8
7973: PPUSH
7974: LD_VAR 0 4
7978: PPUSH
7979: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7983: LD_VAR 0 8
7987: PPUSH
7988: LD_INT 170
7990: PPUSH
7991: LD_INT 103
7993: PPUSH
7994: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
7998: LD_INT 190
8000: PPUSH
8001: LD_INT 150
8003: PPUSH
8004: CALL_OW 84
// end else
8008: GO 8052
// begin AddComWait ( veh , 0 0$2 ) ;
8010: LD_VAR 0 4
8014: PPUSH
8015: LD_INT 70
8017: PPUSH
8018: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8022: LD_VAR 0 4
8026: PPUSH
8027: LD_INT 179
8029: PPUSH
8030: LD_INT 129
8032: PPUSH
8033: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8037: LD_VAR 0 4
8041: PPUSH
8042: LD_INT 170
8044: PPUSH
8045: LD_INT 103
8047: PPUSH
8048: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8052: LD_INT 70
8054: PPUSH
8055: CALL_OW 67
// end ;
8059: GO 7469
8061: POP
8062: POP
// end ; if tmp then
8063: LD_VAR 0 5
8067: IFFALSE 8212
// begin for i in tmp do
8069: LD_ADDR_VAR 0 2
8073: PUSH
8074: LD_VAR 0 5
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8210
// begin SetDir ( i , 4 ) ;
8082: LD_VAR 0 2
8086: PPUSH
8087: LD_INT 4
8089: PPUSH
8090: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8094: LD_VAR 0 2
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 0
8104: PPUSH
8105: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 185
8116: PPUSH
8117: LD_INT 144
8119: PPUSH
8120: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 257
8133: PUSH
8134: LD_INT 2
8136: EQUAL
8137: PUSH
8138: LD_VAR 0 7
8142: NOT
8143: AND
8144: IFFALSE 8171
// begin hasCamera := true ;
8146: LD_ADDR_VAR 0 7
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8154: LD_VAR 0 2
8158: PPUSH
8159: LD_INT 190
8161: PPUSH
8162: LD_INT 150
8164: PPUSH
8165: CALL_OW 217
// end else
8169: GO 8186
// AddComMoveXY ( i , 179 , 129 ) ;
8171: LD_VAR 0 2
8175: PPUSH
8176: LD_INT 179
8178: PPUSH
8179: LD_INT 129
8181: PPUSH
8182: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8186: LD_VAR 0 2
8190: PPUSH
8191: LD_INT 170
8193: PPUSH
8194: LD_INT 103
8196: PPUSH
8197: CALL_OW 171
// wait ( 0 0$2 ) ;
8201: LD_INT 70
8203: PPUSH
8204: CALL_OW 67
// end ;
8208: GO 8079
8210: POP
8211: POP
// end ; if heikeApes then
8212: LD_EXP 26
8216: IFFALSE 8334
// begin counter := 0 ;
8218: LD_ADDR_VAR 0 9
8222: PUSH
8223: LD_INT 0
8225: ST_TO_ADDR
// for i in heikeApes do
8226: LD_ADDR_VAR 0 2
8230: PUSH
8231: LD_EXP 26
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8332
// begin if counter > 2 then
8239: LD_VAR 0 9
8243: PUSH
8244: LD_INT 2
8246: GREATER
8247: IFFALSE 8251
// break ;
8249: GO 8332
// counter := Inc ( counter ) ;
8251: LD_ADDR_VAR 0 9
8255: PUSH
8256: LD_VAR 0 9
8260: PPUSH
8261: CALL 54044 0 1
8265: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8266: LD_VAR 0 2
8270: PPUSH
8271: LD_INT 4
8273: PPUSH
8274: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8278: LD_VAR 0 2
8282: PPUSH
8283: LD_INT 1
8285: PPUSH
8286: LD_INT 0
8288: PPUSH
8289: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8293: LD_VAR 0 2
8297: PPUSH
8298: LD_INT 185
8300: PPUSH
8301: LD_INT 144
8303: PPUSH
8304: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8308: LD_VAR 0 2
8312: PPUSH
8313: LD_INT 170
8315: PPUSH
8316: LD_INT 103
8318: PPUSH
8319: CALL_OW 171
// wait ( 0 0$2 ) ;
8323: LD_INT 70
8325: PPUSH
8326: CALL_OW 67
// end ;
8330: GO 8236
8332: POP
8333: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8334: LD_EXP 13
8338: PPUSH
8339: LD_INT 163
8341: PPUSH
8342: LD_INT 89
8344: PPUSH
8345: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8349: LD_EXP 13
8353: PPUSH
8354: LD_STRING DH-Intro-1
8356: PPUSH
8357: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8361: LD_INT 175
8363: PPUSH
8364: LD_INT 117
8366: PPUSH
8367: CALL_OW 84
// if Markov then
8371: LD_EXP 20
8375: IFFALSE 8950
// begin Say ( Markov , DMar-Intro-2 ) ;
8377: LD_EXP 20
8381: PPUSH
8382: LD_STRING DMar-Intro-2
8384: PPUSH
8385: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8389: LD_EXP 20
8393: PPUSH
8394: LD_STRING DMar-Intro-3
8396: PPUSH
8397: CALL_OW 88
// wait ( 0 0$1 ) ;
8401: LD_INT 35
8403: PPUSH
8404: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8408: LD_EXP 13
8412: PPUSH
8413: CALL_OW 85
// if Kurt then
8417: LD_EXP 23
8421: IFFALSE 8473
// begin if IsInUnit ( Kurt ) then
8423: LD_EXP 23
8427: PPUSH
8428: CALL_OW 310
8432: IFFALSE 8443
// ComExit ( Kurt ) ;
8434: LD_EXP 23
8438: PPUSH
8439: CALL 53081 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8443: LD_EXP 23
8447: PPUSH
8448: LD_INT 130
8450: PPUSH
8451: LD_INT 56
8453: PPUSH
8454: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8458: LD_EXP 23
8462: PPUSH
8463: LD_INT 129
8465: PPUSH
8466: LD_INT 56
8468: PPUSH
8469: CALL_OW 178
// end ; if Kaia then
8473: LD_EXP 18
8477: IFFALSE 8657
// begin Say ( Kaia , DK-Intro-4 ) ;
8479: LD_EXP 18
8483: PPUSH
8484: LD_STRING DK-Intro-4
8486: PPUSH
8487: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8491: LD_EXP 20
8495: PPUSH
8496: LD_STRING DMar-Intro-5
8498: PPUSH
8499: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8503: LD_EXP 20
8507: PPUSH
8508: LD_STRING DMar-Intro-6
8510: PPUSH
8511: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8515: LD_EXP 22
8519: PPUSH
8520: LD_STRING DO-Intro-7
8522: PPUSH
8523: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8527: LD_INT 160
8529: PPUSH
8530: LD_INT 85
8532: PPUSH
8533: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8537: LD_EXP 20
8541: PPUSH
8542: LD_STRING DMar-Intro-8
8544: PPUSH
8545: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8549: LD_EXP 20
8553: PPUSH
8554: LD_STRING DMar-Intro-9
8556: PPUSH
8557: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8561: LD_EXP 20
8565: PPUSH
8566: LD_STRING DMar-Intro-10
8568: PPUSH
8569: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8573: LD_EXP 20
8577: PPUSH
8578: LD_STRING DMar-Intro-11
8580: PPUSH
8581: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8585: LD_EXP 14
8589: PPUSH
8590: LD_STRING DG-Intro-12
8592: PPUSH
8593: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8597: LD_EXP 14
8601: PPUSH
8602: LD_STRING DG-Intro-13
8604: PPUSH
8605: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8609: LD_EXP 14
8613: PPUSH
8614: LD_STRING DG-Intro-14
8616: PPUSH
8617: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8621: LD_EXP 14
8625: PPUSH
8626: LD_STRING DG-Intro-15
8628: PPUSH
8629: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8633: LD_EXP 13
8637: PPUSH
8638: LD_STRING DH-Intro-16
8640: PPUSH
8641: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8645: LD_EXP 20
8649: PPUSH
8650: LD_STRING DMar-Intro-17
8652: PPUSH
8653: CALL_OW 88
// end ; if Kurt and Mike then
8657: LD_EXP 23
8661: PUSH
8662: LD_EXP 15
8666: AND
8667: IFFALSE 8950
// begin CenterNowOnUnits ( Kurt ) ;
8669: LD_EXP 23
8673: PPUSH
8674: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8678: LD_EXP 23
8682: PPUSH
8683: LD_EXP 13
8687: PPUSH
8688: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8692: LD_EXP 23
8696: PPUSH
8697: LD_STRING DKs-Intro-18
8699: PPUSH
8700: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8704: LD_EXP 23
8708: PPUSH
8709: LD_STRING DKs-Intro-19
8711: PPUSH
8712: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8716: LD_EXP 15
8720: PPUSH
8721: CALL_OW 87
// if IsInUnit ( Mike ) then
8725: LD_EXP 15
8729: PPUSH
8730: CALL_OW 310
8734: IFFALSE 8745
// ComExit ( Mike ) ;
8736: LD_EXP 15
8740: PPUSH
8741: CALL 53081 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8745: LD_EXP 15
8749: PPUSH
8750: LD_INT 129
8752: PPUSH
8753: LD_INT 53
8755: PPUSH
8756: CALL_OW 171
// AddComHold ( Mike ) ;
8760: LD_EXP 15
8764: PPUSH
8765: CALL_OW 200
// wait ( 0 0$2 ) ;
8769: LD_INT 70
8771: PPUSH
8772: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8776: LD_EXP 15
8780: PPUSH
8781: LD_STRING DM-Intro-20
8783: PPUSH
8784: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8788: LD_ADDR_EXP 3
8792: PUSH
8793: LD_STRING Scout
8795: PPUSH
8796: CALL_OW 97
8800: ST_TO_ADDR
// if scoutActive = 1 then
8801: LD_EXP 3
8805: PUSH
8806: LD_INT 1
8808: EQUAL
8809: IFFALSE 8906
// begin CenterNowOnUnits ( Kurt ) ;
8811: LD_EXP 23
8815: PPUSH
8816: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8820: LD_EXP 13
8824: PPUSH
8825: LD_STRING DH-Intro-21
8827: PPUSH
8828: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8832: LD_EXP 15
8836: PPUSH
8837: LD_STRING DM-Intro-22
8839: PPUSH
8840: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8844: LD_EXP 23
8848: PPUSH
8849: LD_STRING DKs-Intro-23
8851: PPUSH
8852: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8856: LD_EXP 23
8860: PPUSH
8861: LD_INT 5
8863: PPUSH
8864: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8868: LD_EXP 15
8872: PPUSH
8873: LD_INT 5
8875: PPUSH
8876: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8880: LD_EXP 23
8884: PUSH
8885: LD_EXP 15
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: LD_INT 104
8896: PPUSH
8897: LD_INT 66
8899: PPUSH
8900: CALL_OW 111
// end else
8904: GO 8950
// begin scoutActive := 0 ;
8906: LD_ADDR_EXP 3
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8914: LD_EXP 13
8918: PPUSH
8919: LD_STRING DH-Intro-a-21
8921: PPUSH
8922: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8926: LD_EXP 15
8930: PPUSH
8931: LD_STRING DM-Intro-a-22
8933: PPUSH
8934: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8938: LD_EXP 23
8942: PPUSH
8943: LD_STRING DKs-Intro-a-23
8945: PPUSH
8946: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8950: LD_INT 0
8952: PPUSH
8953: CALL 52655 0 1
// music_nat := music_auto ;
8957: LD_ADDR_OWVAR 71
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// music_class := music_auto ;
8965: LD_ADDR_OWVAR 72
8969: PUSH
8970: LD_INT 0
8972: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8973: LD_STRING M1
8975: PPUSH
8976: CALL_OW 337
// wait ( 0 0$3 ) ;
8980: LD_INT 105
8982: PPUSH
8983: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8987: LD_EXP 13
8991: PPUSH
8992: LD_STRING DH-Base-1
8994: PPUSH
8995: CALL_OW 88
// if Kaia then
8999: LD_EXP 18
9003: IFFALSE 9113
// begin Say ( Kaia , DK-Base-2 ) ;
9005: LD_EXP 18
9009: PPUSH
9010: LD_STRING DK-Base-2
9012: PPUSH
9013: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9017: LD_EXP 13
9021: PPUSH
9022: LD_STRING DH-Base-3
9024: PPUSH
9025: CALL_OW 88
// if Aviradze then
9029: LD_EXP 24
9033: IFFALSE 9113
// begin Say ( Aviradze , DA-Base-4 ) ;
9035: LD_EXP 24
9039: PPUSH
9040: LD_STRING DA-Base-4
9042: PPUSH
9043: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9047: LD_EXP 18
9051: PPUSH
9052: LD_STRING DK-Base-5
9054: PPUSH
9055: CALL_OW 88
// if Markov then
9059: LD_EXP 20
9063: IFFALSE 9113
// begin Say ( Markov , DMar-Base-6 ) ;
9065: LD_EXP 20
9069: PPUSH
9070: LD_STRING DMar-Base-6
9072: PPUSH
9073: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9077: LD_EXP 18
9081: PPUSH
9082: LD_STRING DK-Base-7
9084: PPUSH
9085: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9089: LD_EXP 20
9093: PPUSH
9094: LD_STRING DMar-Base-8
9096: PPUSH
9097: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9101: LD_EXP 20
9105: PPUSH
9106: LD_STRING DMar-Base-9
9108: PPUSH
9109: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9113: CALL_OW 22
// end ;
9117: LD_VAR 0 1
9121: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9122: LD_EXP 5
9126: IFFALSE 10230
9128: GO 9130
9130: DISABLE
9131: LD_INT 0
9133: PPUSH
9134: PPUSH
// begin InGameOn ;
9135: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9139: LD_EXP 15
9143: PUSH
9144: LD_EXP 23
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PPUSH
9153: LD_EXP 13
9157: PPUSH
9158: CALL_OW 119
// ComExit ( Heike ) ;
9162: LD_EXP 13
9166: PPUSH
9167: CALL 53081 0 1
// if IsOk ( Mike ) then
9171: LD_EXP 15
9175: PPUSH
9176: CALL_OW 302
9180: IFFALSE 9198
// AddComTurnUnit ( Heike , Mike ) else
9182: LD_EXP 13
9186: PPUSH
9187: LD_EXP 15
9191: PPUSH
9192: CALL_OW 179
9196: GO 9212
// AddComTurnUnit ( Heike , Kurt ) ;
9198: LD_EXP 13
9202: PPUSH
9203: LD_EXP 23
9207: PPUSH
9208: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9212: LD_EXP 15
9216: PPUSH
9217: CALL_OW 302
9221: PUSH
9222: LD_EXP 23
9226: PPUSH
9227: CALL_OW 302
9231: AND
9232: IFFALSE 9483
// begin CenterNowOnUnits ( Mike ) ;
9234: LD_EXP 15
9238: PPUSH
9239: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9243: LD_EXP 15
9247: PPUSH
9248: LD_STRING DM-Scout-1
9250: PPUSH
9251: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9255: LD_EXP 13
9259: PPUSH
9260: LD_STRING DH-Scout-2
9262: PPUSH
9263: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9267: LD_EXP 23
9271: PPUSH
9272: LD_STRING DKs-Scout-3
9274: PPUSH
9275: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9279: LD_EXP 13
9283: PPUSH
9284: LD_STRING DH-Scout-4
9286: PPUSH
9287: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9291: LD_EXP 13
9295: PPUSH
9296: LD_STRING DH-Scout-5
9298: PPUSH
9299: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_INT 72
9310: PUSH
9311: LD_INT 122
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 89
9320: PUSH
9321: LD_INT 131
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 99
9330: PUSH
9331: LD_INT 139
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 100
9340: PUSH
9341: LD_INT 148
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: ST_TO_ADDR
// for i in tmp do
9354: LD_ADDR_VAR 0 1
9358: PUSH
9359: LD_VAR 0 2
9363: PUSH
9364: FOR_IN
9365: IFFALSE 9423
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9367: LD_VAR 0 1
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PPUSH
9376: LD_VAR 0 1
9380: PUSH
9381: LD_INT 2
9383: ARRAY
9384: PPUSH
9385: LD_INT 2
9387: PPUSH
9388: LD_INT 6
9390: NEG
9391: PPUSH
9392: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9396: LD_VAR 0 1
9400: PUSH
9401: LD_INT 1
9403: ARRAY
9404: PPUSH
9405: LD_VAR 0 1
9409: PUSH
9410: LD_INT 2
9412: ARRAY
9413: PPUSH
9414: LD_INT 2
9416: PPUSH
9417: CALL_OW 331
// end ;
9421: GO 9364
9423: POP
9424: POP
// CenterOnXY ( 83 , 132 ) ;
9425: LD_INT 83
9427: PPUSH
9428: LD_INT 132
9430: PPUSH
9431: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9435: LD_EXP 23
9439: PPUSH
9440: LD_STRING DKs-Scout-6
9442: PPUSH
9443: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9447: LD_EXP 15
9451: PPUSH
9452: LD_STRING DM-Scout-7
9454: PPUSH
9455: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9459: LD_EXP 15
9463: PPUSH
9464: LD_STRING DM-Scout-8
9466: PPUSH
9467: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9471: LD_EXP 23
9475: PPUSH
9476: LD_STRING DKs-Scout-9
9478: PPUSH
9479: CALL_OW 88
// end ; if IsDead ( Mike ) then
9483: LD_EXP 15
9487: PPUSH
9488: CALL_OW 301
9492: IFFALSE 9659
// begin CenterNowOnUnits ( Kurt ) ;
9494: LD_EXP 23
9498: PPUSH
9499: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9503: LD_EXP 23
9507: PPUSH
9508: LD_STRING DKs-Scout-b-1
9510: PPUSH
9511: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9515: LD_EXP 23
9519: PPUSH
9520: LD_STRING DKs-Scout-b-2
9522: PPUSH
9523: CALL_OW 88
// if IsOk ( Givi ) then
9527: LD_EXP 14
9531: PPUSH
9532: CALL_OW 302
9536: IFFALSE 9611
// begin ComExit ( Givi ) ;
9538: LD_EXP 14
9542: PPUSH
9543: CALL 53081 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9547: LD_EXP 14
9551: PPUSH
9552: LD_EXP 23
9556: PPUSH
9557: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9561: LD_EXP 14
9565: PPUSH
9566: LD_STRING DG-Scout-b-3
9568: PPUSH
9569: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9573: LD_EXP 14
9577: PPUSH
9578: LD_STRING DG-Scout-b-4
9580: PPUSH
9581: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9585: LD_EXP 14
9589: PPUSH
9590: LD_STRING DG-Scout-b-5
9592: PPUSH
9593: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9597: LD_EXP 13
9601: PPUSH
9602: LD_STRING DH-Scout-b-6
9604: PPUSH
9605: CALL_OW 88
// end else
9609: GO 9623
// Say ( Heike , DH-Scout-a-4 ) ;
9611: LD_EXP 13
9615: PPUSH
9616: LD_STRING DH-Scout-a-4
9618: PPUSH
9619: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9623: LD_EXP 23
9627: PPUSH
9628: LD_STRING DKs-Scout-b-7
9630: PPUSH
9631: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9635: LD_EXP 23
9639: PPUSH
9640: LD_STRING DKs-Scout-b-8
9642: PPUSH
9643: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9647: LD_EXP 23
9651: PPUSH
9652: LD_STRING DKs-Scout-b-9
9654: PPUSH
9655: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9659: LD_EXP 23
9663: PPUSH
9664: CALL_OW 301
9668: IFFALSE 9947
// begin CenterNowOnUnits ( Mike ) ;
9670: LD_EXP 15
9674: PPUSH
9675: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9679: LD_EXP 15
9683: PPUSH
9684: LD_STRING DM-Scout-a-1
9686: PPUSH
9687: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9691: LD_EXP 15
9695: PPUSH
9696: LD_STRING DM-Scout-a-2
9698: PPUSH
9699: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9703: LD_EXP 15
9707: PPUSH
9708: CALL_OW 256
9712: PUSH
9713: LD_INT 1000
9715: LESS
9716: IFFALSE 9732
// Say ( Heike , DH-Scout-a-3 ) else
9718: LD_EXP 13
9722: PPUSH
9723: LD_STRING DH-Scout-a-3
9725: PPUSH
9726: CALL_OW 88
9730: GO 9744
// Say ( Heike , DH-Scout-a-4 ) ;
9732: LD_EXP 13
9736: PPUSH
9737: LD_STRING DH-Scout-a-4
9739: PPUSH
9740: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9744: LD_EXP 15
9748: PPUSH
9749: LD_STRING DM-Scout-a-5
9751: PPUSH
9752: CALL_OW 88
// if IsOk ( Kaia ) then
9756: LD_EXP 18
9760: PPUSH
9761: CALL_OW 302
9765: IFFALSE 9947
// begin ComExit ( Kaia ) ;
9767: LD_EXP 18
9771: PPUSH
9772: CALL 53081 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9776: LD_EXP 18
9780: PPUSH
9781: LD_EXP 15
9785: PPUSH
9786: CALL_OW 172
// wait ( 0 0$2 ) ;
9790: LD_INT 70
9792: PPUSH
9793: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9797: LD_EXP 18
9801: PPUSH
9802: LD_EXP 15
9806: PPUSH
9807: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9811: LD_EXP 15
9815: PPUSH
9816: LD_EXP 18
9820: PPUSH
9821: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9825: LD_EXP 18
9829: PPUSH
9830: LD_STRING DK-Scout-a-6
9832: PPUSH
9833: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9837: LD_EXP 15
9841: PPUSH
9842: LD_STRING DM-Scout-a-7
9844: PPUSH
9845: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9849: LD_EXP 18
9853: PPUSH
9854: LD_STRING DK-Scout-a-8
9856: PPUSH
9857: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9861: LD_EXP 18
9865: PPUSH
9866: LD_STRING DK-Scout-a-9
9868: PPUSH
9869: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9873: LD_EXP 13
9877: PPUSH
9878: LD_STRING DH-Scout-a-10
9880: PPUSH
9881: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9885: LD_EXP 15
9889: PPUSH
9890: LD_EXP 13
9894: PPUSH
9895: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9899: LD_EXP 15
9903: PPUSH
9904: LD_STRING DM-Scout-a-11
9906: PPUSH
9907: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9911: LD_EXP 15
9915: PPUSH
9916: LD_STRING DM-Scout-a-12
9918: PPUSH
9919: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9923: LD_EXP 15
9927: PPUSH
9928: LD_STRING DM-Scout-a-13
9930: PPUSH
9931: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9935: LD_EXP 15
9939: PPUSH
9940: LD_STRING DM-Scout-a-14
9942: PPUSH
9943: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9947: LD_EXP 14
9951: PPUSH
9952: CALL_OW 302
9956: IFFALSE 9984
// begin Say ( Givi , DG-Scout-10 ) ;
9958: LD_EXP 14
9962: PPUSH
9963: LD_STRING DG-Scout-10
9965: PPUSH
9966: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9970: LD_EXP 14
9974: PPUSH
9975: LD_STRING DG-Scout-11
9977: PPUSH
9978: CALL_OW 88
// end else
9982: GO 10041
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9984: LD_EXP 25
9988: PPUSH
9989: LD_INT 26
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 72
10003: PPUSH
10004: LD_STRING DArm-Scout-10
10006: PPUSH
10007: CALL 187 0 2
10011: NOT
10012: IFFALSE 10041
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10014: LD_EXP 25
10018: PPUSH
10019: LD_INT 26
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 72
10033: PPUSH
10034: LD_STRING DArf-Scout-10
10036: PPUSH
10037: CALL 187 0 2
// Say ( Heike , DH-Scout-12 ) ;
10041: LD_EXP 13
10045: PPUSH
10046: LD_STRING DH-Scout-12
10048: PPUSH
10049: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10053: LD_EXP 13
10057: PPUSH
10058: LD_STRING DH-Scout-13
10060: PPUSH
10061: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10065: LD_EXP 15
10069: PPUSH
10070: CALL_OW 302
10074: PUSH
10075: LD_EXP 23
10079: PPUSH
10080: CALL_OW 302
10084: AND
10085: IFFALSE 10113
// begin Say ( Mike , DM-Scout-14 ) ;
10087: LD_EXP 15
10091: PPUSH
10092: LD_STRING DM-Scout-14
10094: PPUSH
10095: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10099: LD_EXP 13
10103: PPUSH
10104: LD_STRING DH-Scout-c-14
10106: PPUSH
10107: CALL_OW 88
// end else
10111: GO 10206
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10113: LD_EXP 15
10117: PPUSH
10118: CALL_OW 302
10122: PUSH
10123: LD_EXP 23
10127: PPUSH
10128: CALL_OW 302
10132: XOR
10133: IFFALSE 10194
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10135: LD_EXP 25
10139: PPUSH
10140: LD_INT 26
10142: PUSH
10143: LD_INT 1
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PPUSH
10150: CALL_OW 72
10154: PPUSH
10155: LD_STRING DArm-Scout-a-14
10157: PPUSH
10158: CALL 187 0 2
10162: NOT
10163: IFFALSE 10192
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10165: LD_EXP 25
10169: PPUSH
10170: LD_INT 26
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PPUSH
10180: CALL_OW 72
10184: PPUSH
10185: LD_STRING DArf-Scout-a-14
10187: PPUSH
10188: CALL 187 0 2
// end else
10192: GO 10206
// Say ( Heike , DH-Scout-d-14 ) ;
10194: LD_EXP 13
10198: PPUSH
10199: LD_STRING DH-Scout-d-14
10201: PPUSH
10202: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10206: LD_EXP 13
10210: PPUSH
10211: LD_STRING DH-Scout-15
10213: PPUSH
10214: CALL_OW 88
// InGameOff ;
10218: CALL_OW 9
// usAttacksAllowed := true ;
10222: LD_ADDR_EXP 6
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// end ;
10230: PPOPN 2
10232: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10233: LD_EXP 4
10237: IFFALSE 10414
10239: GO 10241
10241: DISABLE
10242: LD_INT 0
10244: PPUSH
// begin spoken := true ;
10245: LD_ADDR_VAR 0 1
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10253: LD_INT 1050
10255: PPUSH
10256: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10260: LD_EXP 13
10264: PPUSH
10265: LD_STRING DH-Scout-c-1
10267: PPUSH
10268: CALL_OW 88
// if not IsOk ( Givi ) then
10272: LD_EXP 14
10276: PPUSH
10277: CALL_OW 302
10281: NOT
10282: IFFALSE 10286
// exit ;
10284: GO 10414
// if IsOk ( Givi ) then
10286: LD_EXP 14
10290: PPUSH
10291: CALL_OW 302
10295: IFFALSE 10323
// begin Say ( Givi , DG-Scout-c-2 ) ;
10297: LD_EXP 14
10301: PPUSH
10302: LD_STRING DG-Scout-c-2
10304: PPUSH
10305: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10309: LD_EXP 14
10313: PPUSH
10314: LD_STRING DG-Scout-c-3
10316: PPUSH
10317: CALL_OW 88
// end else
10321: GO 10396
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10323: LD_ADDR_VAR 0 1
10327: PUSH
10328: LD_EXP 25
10332: PPUSH
10333: LD_INT 26
10335: PUSH
10336: LD_INT 1
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 72
10347: PPUSH
10348: LD_STRING DArm-Scout-c-3
10350: PPUSH
10351: CALL 187 0 2
10355: ST_TO_ADDR
// if not spoken then
10356: LD_VAR 0 1
10360: NOT
10361: IFFALSE 10396
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10363: LD_ADDR_VAR 0 1
10367: PUSH
10368: LD_EXP 25
10372: PPUSH
10373: LD_INT 26
10375: PUSH
10376: LD_INT 2
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PPUSH
10383: CALL_OW 72
10387: PPUSH
10388: LD_STRING DArf-Scout-c-3
10390: PPUSH
10391: CALL 187 0 2
10395: ST_TO_ADDR
// ; end ; if spoken then
10396: LD_VAR 0 1
10400: IFFALSE 10414
// Say ( Heike , DH-Scout-c-4 ) ;
10402: LD_EXP 13
10406: PPUSH
10407: LD_STRING DH-Scout-c-4
10409: PPUSH
10410: CALL_OW 88
// end ;
10414: PPOPN 1
10416: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10417: LD_INT 22
10419: PUSH
10420: LD_INT 2
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 30
10429: PUSH
10430: LD_INT 7
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: PUSH
10446: LD_EXP 24
10450: PPUSH
10451: CALL_OW 302
10455: AND
10456: IFFALSE 10541
10458: GO 10460
10460: DISABLE
// begin DialogueOn ;
10461: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10465: LD_EXP 24
10469: PPUSH
10470: LD_STRING DA-Lab-1
10472: PPUSH
10473: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10477: LD_EXP 13
10481: PPUSH
10482: LD_STRING DH-Lab-2
10484: PPUSH
10485: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10489: LD_EXP 24
10493: PPUSH
10494: LD_STRING DA-Lab-3
10496: PPUSH
10497: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10501: LD_EXP 24
10505: PPUSH
10506: LD_STRING DA-Lab-4
10508: PPUSH
10509: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10513: LD_EXP 24
10517: PPUSH
10518: LD_STRING DA-Lab-5
10520: PPUSH
10521: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10525: LD_EXP 13
10529: PPUSH
10530: LD_STRING DH-Lab-6
10532: PPUSH
10533: CALL_OW 88
// DialogueOff ;
10537: CALL_OW 7
// end ;
10541: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10542: LD_INT 7
10544: PPUSH
10545: LD_INT 2
10547: PPUSH
10548: CALL_OW 321
10552: PUSH
10553: LD_INT 2
10555: EQUAL
10556: PUSH
10557: LD_EXP 14
10561: PPUSH
10562: CALL_OW 302
10566: AND
10567: IFFALSE 10736
10569: GO 10571
10571: DISABLE
// begin DialogueOn ;
10572: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10576: LD_EXP 14
10580: PPUSH
10581: LD_STRING DG-Opt-1
10583: PPUSH
10584: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10588: LD_EXP 13
10592: PPUSH
10593: LD_STRING DH-Opt-2
10595: PPUSH
10596: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10600: LD_EXP 14
10604: PPUSH
10605: LD_STRING DG-Opt-3
10607: PPUSH
10608: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10612: LD_EXP 14
10616: PPUSH
10617: LD_STRING DG-Opt-4
10619: PPUSH
10620: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10624: LD_EXP 13
10628: PPUSH
10629: LD_STRING DH-Opt-5
10631: PPUSH
10632: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10636: LD_EXP 14
10640: PPUSH
10641: LD_STRING DG-Opt-6
10643: PPUSH
10644: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10648: LD_EXP 13
10652: PPUSH
10653: LD_STRING DH-Opt-7
10655: PPUSH
10656: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10660: LD_EXP 14
10664: PPUSH
10665: LD_STRING DG-Opt-8
10667: PPUSH
10668: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10672: LD_EXP 14
10676: PPUSH
10677: LD_STRING DG-Opt-9
10679: PPUSH
10680: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10684: LD_EXP 13
10688: PPUSH
10689: LD_STRING DH-Opt-10
10691: PPUSH
10692: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10696: LD_EXP 14
10700: PPUSH
10701: LD_STRING DG-Opt-11
10703: PPUSH
10704: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10708: LD_EXP 14
10712: PPUSH
10713: LD_STRING DG-Opt-12
10715: PPUSH
10716: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10720: LD_EXP 13
10724: PPUSH
10725: LD_STRING DH-Opt-13
10727: PPUSH
10728: CALL_OW 88
// DialogueOff ;
10732: CALL_OW 7
// end ;
10736: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
10737: LD_EXP 25
10741: PPUSH
10742: LD_INT 95
10744: PUSH
10745: LD_INT 7
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 23
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 26
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 72
10781: IFFALSE 10842
10783: GO 10785
10785: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
10786: LD_EXP 25
10790: PPUSH
10791: LD_INT 95
10793: PUSH
10794: LD_INT 7
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 23
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 26
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 72
10830: PUSH
10831: LD_INT 1
10833: ARRAY
10834: PPUSH
10835: LD_STRING DArm-River
10837: PPUSH
10838: CALL_OW 88
// end ;
10842: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10843: LD_INT 40
10845: PPUSH
10846: LD_INT 2
10848: PPUSH
10849: CALL_OW 321
10853: PUSH
10854: LD_INT 2
10856: EQUAL
10857: PUSH
10858: LD_EXP 16
10862: PPUSH
10863: CALL_OW 302
10867: AND
10868: IFFALSE 11118
10870: GO 10872
10872: DISABLE
// begin DialogueOn ;
10873: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10877: LD_EXP 16
10881: PPUSH
10882: LD_STRING DI-Roc-1
10884: PPUSH
10885: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10889: LD_EXP 13
10893: PPUSH
10894: LD_STRING DH-Roc-2
10896: PPUSH
10897: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10901: LD_EXP 16
10905: PPUSH
10906: LD_STRING DI-Roc-3
10908: PPUSH
10909: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10913: LD_EXP 16
10917: PPUSH
10918: LD_STRING DI-Roc-4
10920: PPUSH
10921: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10925: LD_EXP 18
10929: PPUSH
10930: LD_STRING DK-Roc-5
10932: PPUSH
10933: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10937: LD_EXP 18
10941: PPUSH
10942: LD_STRING DK-Roc-6
10944: PPUSH
10945: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10949: LD_EXP 14
10953: PPUSH
10954: LD_STRING DG-Roc-7
10956: PPUSH
10957: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10961: LD_EXP 14
10965: PPUSH
10966: LD_STRING DG-Roc-8
10968: PPUSH
10969: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10973: LD_EXP 20
10977: PPUSH
10978: CALL_OW 302
10982: PUSH
10983: LD_EXP 18
10987: PPUSH
10988: CALL_OW 302
10992: AND
10993: PUSH
10994: LD_EXP 14
10998: PPUSH
10999: CALL_OW 302
11003: AND
11004: IFFALSE 11114
// begin Say ( Markov , DMar-Roc-9 ) ;
11006: LD_EXP 20
11010: PPUSH
11011: LD_STRING DMar-Roc-9
11013: PPUSH
11014: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11018: LD_EXP 20
11022: PPUSH
11023: LD_STRING DMar-Roc-10
11025: PPUSH
11026: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11030: LD_EXP 18
11034: PPUSH
11035: LD_STRING DK-Roc-11
11037: PPUSH
11038: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11042: LD_EXP 20
11046: PPUSH
11047: LD_STRING DMar-Roc-12
11049: PPUSH
11050: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11054: LD_EXP 18
11058: PPUSH
11059: LD_STRING DK-Roc-13
11061: PPUSH
11062: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11066: LD_EXP 14
11070: PPUSH
11071: LD_STRING DG-Roc-14
11073: PPUSH
11074: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11078: LD_EXP 20
11082: PPUSH
11083: LD_STRING DMar-Roc-15
11085: PPUSH
11086: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11090: LD_EXP 20
11094: PPUSH
11095: LD_STRING DMar-Roc-16
11097: PPUSH
11098: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11102: LD_EXP 18
11106: PPUSH
11107: LD_STRING DK-Roc-17
11109: PPUSH
11110: CALL_OW 88
// end ; DialogueOff ;
11114: CALL_OW 7
// end ;
11118: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11119: LD_EXP 28
11123: PPUSH
11124: CALL_OW 256
11128: PUSH
11129: LD_INT 1000
11131: LESS
11132: PUSH
11133: LD_INT 22
11135: PUSH
11136: LD_INT 1
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 21
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 23
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: PUSH
11173: LD_INT 6
11175: LESS
11176: OR
11177: PUSH
11178: LD_INT 22
11180: PUSH
11181: LD_INT 1
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 21
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 1
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: PUSH
11218: LD_INT 2
11220: LESS
11221: OR
11222: IFFALSE 12431
11224: GO 11226
11226: DISABLE
11227: LD_INT 0
11229: PPUSH
11230: PPUSH
11231: PPUSH
// begin usAttacksAllowed := false ;
11232: LD_ADDR_EXP 6
11236: PUSH
11237: LD_INT 0
11239: ST_TO_ADDR
// usSurrender := true ;
11240: LD_ADDR_EXP 7
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11248: LD_INT 1
11250: PPUSH
11251: LD_INT 2
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 22
11271: PUSH
11272: LD_INT 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 60
11291: PUSH
11292: EMPTY
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PUSH
11305: FOR_IN
11306: IFFALSE 11319
// ComStop ( i ) ;
11308: LD_VAR 0 1
11312: PPUSH
11313: CALL_OW 141
11317: GO 11305
11319: POP
11320: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_INT 2
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: LD_INT 50
11341: PUSH
11342: EMPTY
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 21
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: FOR_IN
11370: IFFALSE 11386
// SetLives ( i , 251 ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 251
11379: PPUSH
11380: CALL_OW 234
11384: GO 11369
11386: POP
11387: POP
// InGameOn ;
11388: CALL_OW 8
// ComExit ( usCommander ) ;
11392: LD_EXP 28
11396: PPUSH
11397: CALL 53081 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11401: LD_EXP 28
11405: PPUSH
11406: LD_INT 81
11408: PPUSH
11409: LD_INT 143
11411: PPUSH
11412: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11416: LD_EXP 28
11420: PPUSH
11421: LD_INT 81
11423: PPUSH
11424: LD_INT 139
11426: PPUSH
11427: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11431: LD_INT 81
11433: PPUSH
11434: LD_INT 144
11436: PPUSH
11437: LD_INT 2
11439: PPUSH
11440: LD_INT 10
11442: NEG
11443: PPUSH
11444: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11448: LD_EXP 28
11452: PPUSH
11453: CALL_OW 87
// wait ( 0 0$2 ) ;
11457: LD_INT 70
11459: PPUSH
11460: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11464: LD_EXP 28
11468: PPUSH
11469: LD_STRING DCa-Surrender-1
11471: PPUSH
11472: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11476: LD_EXP 13
11480: PPUSH
11481: LD_STRING DH-Surrender-2
11483: PPUSH
11484: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11488: LD_EXP 13
11492: PPUSH
11493: CALL_OW 310
11497: PPUSH
11498: CALL_OW 247
11502: PUSH
11503: LD_INT 3
11505: EQUAL
11506: IFFALSE 11524
// begin ComExit ( Heike ) ;
11508: LD_EXP 13
11512: PPUSH
11513: CALL 53081 0 1
// wait ( 3 ) ;
11517: LD_INT 3
11519: PPUSH
11520: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11524: LD_EXP 13
11528: PPUSH
11529: LD_INT 82
11531: PPUSH
11532: LD_INT 133
11534: PPUSH
11535: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11539: LD_EXP 13
11543: PPUSH
11544: LD_EXP 28
11548: PPUSH
11549: CALL_OW 179
// wait ( 0 0$3 ) ;
11553: LD_INT 105
11555: PPUSH
11556: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11560: LD_EXP 13
11564: PPUSH
11565: LD_STRING DH-Surrender-3
11567: PPUSH
11568: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11572: LD_EXP 13
11576: PPUSH
11577: LD_STRING DH-Surrender-4
11579: PPUSH
11580: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11584: LD_INT 81
11586: PPUSH
11587: LD_INT 144
11589: PPUSH
11590: LD_INT 2
11592: PPUSH
11593: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11597: LD_INT 1
11599: PPUSH
11600: LD_INT 2
11602: PPUSH
11603: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 1
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 23
11624: PUSH
11625: LD_INT 1
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 54
11634: PUSH
11635: EMPTY
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PUSH
11648: FOR_IN
11649: IFFALSE 11662
// ComExit ( i ) ;
11651: LD_VAR 0 1
11655: PPUSH
11656: CALL 53081 0 1
11660: GO 11648
11662: POP
11663: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11664: LD_ADDR_VAR 0 3
11668: PUSH
11669: LD_INT 22
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 25
11681: PUSH
11682: LD_INT 4
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 69
11697: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_INT 22
11705: PUSH
11706: LD_INT 1
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: LD_INT 50
11718: PUSH
11719: EMPTY
11720: LIST
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 69
11734: ST_TO_ADDR
// if sci and hurts then
11735: LD_VAR 0 3
11739: PUSH
11740: LD_VAR 0 2
11744: AND
11745: IFFALSE 11807
// begin for i := 1 to hurts do
11747: LD_ADDR_VAR 0 1
11751: PUSH
11752: DOUBLE
11753: LD_INT 1
11755: DEC
11756: ST_TO_ADDR
11757: LD_VAR 0 2
11761: PUSH
11762: FOR_TO
11763: IFFALSE 11805
// if i <= sci then
11765: LD_VAR 0 1
11769: PUSH
11770: LD_VAR 0 3
11774: LESSEQUAL
11775: IFFALSE 11803
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11777: LD_VAR 0 3
11781: PUSH
11782: LD_VAR 0 1
11786: ARRAY
11787: PPUSH
11788: LD_VAR 0 2
11792: PUSH
11793: LD_VAR 0 1
11797: ARRAY
11798: PPUSH
11799: CALL_OW 188
11803: GO 11762
11805: POP
11806: POP
// end ; if IsOk ( Givi ) then
11807: LD_EXP 14
11811: PPUSH
11812: CALL_OW 302
11816: IFFALSE 11832
// Say ( Givi , DG-Surrender-5 ) else
11818: LD_EXP 14
11822: PPUSH
11823: LD_STRING DG-Surrender-5
11825: PPUSH
11826: CALL_OW 88
11830: GO 11844
// Say ( Heike , DH-Surrender-a-5 ) ;
11832: LD_EXP 13
11836: PPUSH
11837: LD_STRING DH-Surrender-a-5
11839: PPUSH
11840: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11844: LD_EXP 28
11848: PPUSH
11849: LD_STRING DCa-Surrender-6
11851: PPUSH
11852: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11856: LD_EXP 28
11860: PPUSH
11861: LD_STRING DCa-Surrender-7
11863: PPUSH
11864: CALL_OW 88
// if IsOk ( Givi ) then
11868: LD_EXP 14
11872: PPUSH
11873: CALL_OW 302
11877: IFFALSE 11893
// Say ( Givi , DG-Surrender-8 ) else
11879: LD_EXP 14
11883: PPUSH
11884: LD_STRING DG-Surrender-8
11886: PPUSH
11887: CALL_OW 88
11891: GO 11905
// Say ( Heike , DH-Surrender-a-8 ) ;
11893: LD_EXP 13
11897: PPUSH
11898: LD_STRING DH-Surrender-a-8
11900: PPUSH
11901: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11905: LD_EXP 28
11909: PPUSH
11910: LD_STRING DCa-Surrender-9
11912: PPUSH
11913: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11917: LD_EXP 13
11921: PPUSH
11922: LD_STRING DH-Surrender-10
11924: PPUSH
11925: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11929: LD_EXP 28
11933: PPUSH
11934: LD_STRING DCa-Surrender-11
11936: PPUSH
11937: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11941: LD_EXP 13
11945: PPUSH
11946: LD_STRING DH-Surrender-12
11948: PPUSH
11949: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11953: LD_EXP 28
11957: PPUSH
11958: LD_STRING DCa-Surrender-13
11960: PPUSH
11961: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11965: LD_EXP 28
11969: PPUSH
11970: LD_STRING DCa-Surrender-14
11972: PPUSH
11973: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11977: LD_EXP 28
11981: PPUSH
11982: LD_STRING DCa-Surrender-15
11984: PPUSH
11985: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11989: LD_EXP 28
11993: PPUSH
11994: LD_STRING DCa-Surrender-16
11996: PPUSH
11997: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12001: LD_EXP 18
12005: PPUSH
12006: LD_STRING DK-Surrender-17
12008: PPUSH
12009: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12013: LD_EXP 22
12017: PPUSH
12018: LD_STRING DO-Surrender-18
12020: PPUSH
12021: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12025: LD_EXP 22
12029: PPUSH
12030: LD_STRING DO-Surrender-19
12032: PPUSH
12033: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12037: LD_EXP 23
12041: PPUSH
12042: LD_STRING DKs-Surrender-20
12044: PPUSH
12045: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12049: LD_EXP 23
12053: PPUSH
12054: LD_STRING DKs-Surrender-21
12056: PPUSH
12057: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12061: LD_EXP 20
12065: PPUSH
12066: LD_STRING DMar-Surrender-22
12068: PPUSH
12069: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12073: LD_EXP 20
12077: PPUSH
12078: LD_STRING DMar-Surrender-23
12080: PPUSH
12081: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12085: LD_EXP 19
12089: PPUSH
12090: LD_STRING DS-Surrender-24
12092: PPUSH
12093: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12097: LD_EXP 24
12101: PPUSH
12102: LD_STRING DA-Surrender-25
12104: PPUSH
12105: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12109: LD_EXP 16
12113: PPUSH
12114: LD_STRING DI-Surrender-26
12116: PPUSH
12117: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12121: LD_EXP 17
12125: PPUSH
12126: LD_STRING DKam-Surrender-27
12128: PPUSH
12129: CALL_OW 88
// if IsOk ( Givi ) then
12133: LD_EXP 14
12137: PPUSH
12138: CALL_OW 302
12142: IFFALSE 12182
// begin Say ( Givi , DG-Surrender-28 ) ;
12144: LD_EXP 14
12148: PPUSH
12149: LD_STRING DG-Surrender-28
12151: PPUSH
12152: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12156: LD_EXP 14
12160: PPUSH
12161: LD_STRING DG-Surrender-29
12163: PPUSH
12164: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12168: LD_EXP 14
12172: PPUSH
12173: LD_STRING DG-Surrender-30
12175: PPUSH
12176: CALL_OW 88
// end else
12180: GO 12218
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12182: LD_EXP 13
12186: PPUSH
12187: LD_STRING DH-Surrender-a-28
12189: PPUSH
12190: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12194: LD_EXP 13
12198: PPUSH
12199: LD_STRING DH-Surrender-a-29
12201: PPUSH
12202: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12206: LD_EXP 13
12210: PPUSH
12211: LD_STRING DH-Surrender-a-30
12213: PPUSH
12214: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12218: CALL 14060 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12222: LD_INT 22
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: PPUSH
12237: LD_INT 176
12239: PUSH
12240: LD_INT 123
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: PPUSH
12250: CALL 55287 0 2
// if not IsEnvironment ( 190 , 150 ) then
12254: LD_INT 190
12256: PPUSH
12257: LD_INT 150
12259: PPUSH
12260: CALL_OW 351
12264: NOT
12265: IFFALSE 12284
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12267: LD_INT 190
12269: PPUSH
12270: LD_INT 150
12272: PPUSH
12273: LD_INT 2
12275: PPUSH
12276: LD_INT 8
12278: NEG
12279: PPUSH
12280: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12284: LD_INT 193
12286: PPUSH
12287: LD_INT 150
12289: PPUSH
12290: CALL_OW 84
// if IsOk ( Markov ) then
12294: LD_EXP 20
12298: PPUSH
12299: CALL_OW 302
12303: IFFALSE 12319
// Say ( Markov , DMar-Surrender-31 ) else
12305: LD_EXP 20
12309: PPUSH
12310: LD_STRING DMar-Surrender-31
12312: PPUSH
12313: CALL_OW 88
12317: GO 12376
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12319: LD_EXP 25
12323: PPUSH
12324: LD_INT 26
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 72
12338: PPUSH
12339: LD_STRING DArm-Surrender-a-31
12341: PPUSH
12342: CALL 187 0 2
12346: NOT
12347: IFFALSE 12376
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12349: LD_EXP 25
12353: PPUSH
12354: LD_INT 26
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PPUSH
12364: CALL_OW 72
12368: PPUSH
12369: LD_STRING DArf-Surrender-a-31
12371: PPUSH
12372: CALL 187 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12376: LD_EXP 13
12380: PPUSH
12381: LD_STRING DH-Surrender-32
12383: PPUSH
12384: CALL_OW 88
// InGameOff ;
12388: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12392: LD_STRING M2
12394: PPUSH
12395: CALL_OW 337
// wait ( 0 0$20 ) ;
12399: LD_INT 700
12401: PPUSH
12402: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12406: CALL 14422 0 0
// russianAttack := true ;
12410: LD_ADDR_EXP 8
12414: PUSH
12415: LD_INT 1
12417: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12418: LD_INT 190
12420: PPUSH
12421: LD_INT 150
12423: PPUSH
12424: LD_INT 2
12426: PPUSH
12427: CALL_OW 331
// end ;
12431: PPOPN 3
12433: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12434: LD_EXP 11
12438: PUSH
12439: LD_INT 2
12441: PPUSH
12442: CALL_OW 463
12446: NOT
12447: AND
12448: PUSH
12449: LD_EXP 13
12453: PPUSH
12454: CALL_OW 302
12458: AND
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_INT 2
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 30
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 69
12488: AND
12489: PUSH
12490: LD_EXP 20
12494: PPUSH
12495: CALL_OW 302
12499: PUSH
12500: LD_EXP 25
12504: PPUSH
12505: LD_INT 50
12507: PUSH
12508: EMPTY
12509: LIST
12510: PPUSH
12511: CALL_OW 72
12515: OR
12516: AND
12517: IFFALSE 12745
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12526: LD_EXP 13
12530: PPUSH
12531: LD_STRING DH-Heavy-1
12533: PPUSH
12534: CALL_OW 88
// if IsOk ( Markov ) then
12538: LD_EXP 20
12542: PPUSH
12543: CALL_OW 302
12547: IFFALSE 12672
// begin Say ( Markov , DMar-Heavy-2 ) ;
12549: LD_EXP 20
12553: PPUSH
12554: LD_STRING DMar-Heavy-2
12556: PPUSH
12557: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12561: LD_INT 22
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 69
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: PPUSH
12594: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12598: LD_EXP 20
12602: PPUSH
12603: LD_STRING DMar-Heavy-3
12605: PPUSH
12606: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12610: LD_EXP 20
12614: PPUSH
12615: LD_STRING DMar-Heavy-4
12617: PPUSH
12618: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12622: LD_EXP 20
12626: PPUSH
12627: LD_STRING DMar-Heavy-5
12629: PPUSH
12630: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12634: LD_EXP 20
12638: PPUSH
12639: LD_STRING DMar-Heavy-6
12641: PPUSH
12642: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12646: LD_EXP 13
12650: PPUSH
12651: LD_STRING DH-Heavy-7
12653: PPUSH
12654: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12658: LD_EXP 13
12662: PPUSH
12663: LD_STRING DH-Heavy-8
12665: PPUSH
12666: CALL_OW 88
// end else
12670: GO 12729
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12672: LD_EXP 25
12676: PPUSH
12677: LD_INT 26
12679: PUSH
12680: LD_INT 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 72
12691: PPUSH
12692: LD_STRING DArm-Heavy-a-2
12694: PPUSH
12695: CALL 187 0 2
12699: NOT
12700: IFFALSE 12729
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12702: LD_EXP 25
12706: PPUSH
12707: LD_INT 26
12709: PUSH
12710: LD_INT 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 72
12721: PPUSH
12722: LD_STRING DArf-Heavy-a-2
12724: PPUSH
12725: CALL 187 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12729: LD_EXP 13
12733: PPUSH
12734: LD_STRING DH-Heavy-9
12736: PPUSH
12737: CALL_OW 88
// DialogueOff ;
12741: CALL_OW 7
// end ;
12745: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12746: LD_EXP 32
12750: PPUSH
12751: LD_INT 101
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PPUSH
12761: CALL_OW 72
12765: PUSH
12766: LD_EXP 13
12770: PPUSH
12771: CALL_OW 302
12775: AND
12776: IFFALSE 12919
12778: GO 12780
12780: DISABLE
// begin DialogueOn ;
12781: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12785: LD_EXP 32
12789: PPUSH
12790: LD_INT 101
12792: PUSH
12793: LD_INT 2
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 72
12804: PPUSH
12805: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12809: LD_EXP 13
12813: PPUSH
12814: LD_STRING DH-Flank-1
12816: PPUSH
12817: CALL_OW 88
// if IsOk ( Mike ) then
12821: LD_EXP 15
12825: PPUSH
12826: CALL_OW 302
12830: IFFALSE 12846
// Say ( Mike , DM-Flank-2 ) else
12832: LD_EXP 15
12836: PPUSH
12837: LD_STRING DM-Flank-2
12839: PPUSH
12840: CALL_OW 88
12844: GO 12903
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12846: LD_EXP 25
12850: PPUSH
12851: LD_INT 26
12853: PUSH
12854: LD_INT 1
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 72
12865: PPUSH
12866: LD_STRING DArm-Flank-a-2
12868: PPUSH
12869: CALL 187 0 2
12873: NOT
12874: IFFALSE 12903
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12876: LD_EXP 25
12880: PPUSH
12881: LD_INT 26
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 72
12895: PPUSH
12896: LD_STRING DArm-Flank-a-2
12898: PPUSH
12899: CALL 187 0 2
// Say ( Heike , DH-Flank-3 ) ;
12903: LD_EXP 13
12907: PPUSH
12908: LD_STRING DH-Flank-3
12910: PPUSH
12911: CALL_OW 88
// DialogueOff ;
12915: CALL_OW 7
// end ;
12919: END
// every 0 0$3 trigger seeRemoteVehicle do
12920: LD_EXP 10
12924: IFFALSE 13148
12926: GO 12928
12928: DISABLE
// begin DialogueOn ;
12929: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12933: LD_EXP 13
12937: PPUSH
12938: LD_STRING DH-USRC-1
12940: PPUSH
12941: CALL_OW 88
// if IsOk ( Markov ) then
12945: LD_EXP 20
12949: PPUSH
12950: CALL_OW 302
12954: IFFALSE 12970
// Say ( Markov , DMar-USRC-2 ) else
12956: LD_EXP 20
12960: PPUSH
12961: LD_STRING DMar-USRC-2
12963: PPUSH
12964: CALL_OW 88
12968: GO 13027
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12970: LD_EXP 25
12974: PPUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 72
12989: PPUSH
12990: LD_STRING DArm-USRC-a-2
12992: PPUSH
12993: CALL 187 0 2
12997: NOT
12998: IFFALSE 13027
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13000: LD_EXP 25
13004: PPUSH
13005: LD_INT 26
13007: PUSH
13008: LD_INT 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 72
13019: PPUSH
13020: LD_STRING DArf-USRC-a-2
13022: PPUSH
13023: CALL 187 0 2
// DialogueOff ;
13027: CALL_OW 7
// wait ( 0 0$10 ) ;
13031: LD_INT 350
13033: PPUSH
13034: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_STRING DH-USRC-3
13045: PPUSH
13046: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13050: LD_INT 35
13052: PPUSH
13053: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13057: LD_INT 2
13059: PPUSH
13060: LD_INT 22
13062: PUSH
13063: LD_INT 1
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 30
13072: PUSH
13073: LD_INT 36
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: PUSH
13089: LD_INT 1
13091: ARRAY
13092: PPUSH
13093: CALL_OW 292
13097: IFFALSE 13050
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13099: LD_INT 22
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 36
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: PUSH
13128: LD_INT 1
13130: ARRAY
13131: PPUSH
13132: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13136: LD_EXP 13
13140: PPUSH
13141: LD_STRING DH-USRCFound-1
13143: PPUSH
13144: CALL_OW 88
// end ;
13148: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13149: LD_EXP 18
13153: PPUSH
13154: CALL_OW 256
13158: PUSH
13159: LD_INT 3
13161: LESS
13162: IFFALSE 13199
13164: GO 13166
13166: DISABLE
// begin DialogueOn ;
13167: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13171: LD_EXP 18
13175: PPUSH
13176: LD_STRING DK-Dead-1
13178: PPUSH
13179: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13183: LD_EXP 18
13187: PPUSH
13188: LD_STRING DK-Dead-2
13190: PPUSH
13191: CALL_OW 91
// DialogueOff ;
13195: CALL_OW 7
// end ;
13199: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13200: LD_INT 22
13202: PUSH
13203: LD_INT 2
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 2
13212: PUSH
13213: LD_INT 35
13215: PUSH
13216: LD_INT 28
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 34
13225: PUSH
13226: LD_INT 28
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PPUSH
13242: CALL_OW 69
13246: IFFALSE 13259
13248: GO 13250
13250: DISABLE
// hasRockets := true ;
13251: LD_ADDR_EXP 9
13255: PUSH
13256: LD_INT 1
13258: ST_TO_ADDR
13259: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13260: LD_EXP 8
13264: PUSH
13265: LD_INT 22
13267: PUSH
13268: LD_INT 3
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PPUSH
13275: CALL_OW 69
13279: NOT
13280: AND
13281: IFFALSE 13891
13283: GO 13285
13285: DISABLE
// begin DialogueOn ;
13286: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13290: LD_EXP 13
13294: PPUSH
13295: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13299: LD_EXP 13
13303: PPUSH
13304: LD_STRING DH-End-1
13306: PPUSH
13307: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13311: LD_EXP 21
13315: PPUSH
13316: LD_STRING DShar-End-2
13318: PPUSH
13319: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_STRING DK-End-3
13330: PPUSH
13331: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13335: LD_EXP 13
13339: PPUSH
13340: LD_STRING DH-End-4
13342: PPUSH
13343: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13347: LD_EXP 21
13351: PPUSH
13352: LD_STRING DShar-End-5
13354: PPUSH
13355: CALL_OW 94
// if IsOk ( Markov ) then
13359: LD_EXP 20
13363: PPUSH
13364: CALL_OW 302
13368: IFFALSE 13382
// Say ( Kaia , DK-End-6 ) ;
13370: LD_EXP 18
13374: PPUSH
13375: LD_STRING DK-End-6
13377: PPUSH
13378: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13382: LD_EXP 18
13386: PPUSH
13387: LD_STRING DK-End-7
13389: PPUSH
13390: CALL_OW 88
// if IsOk ( Kaia ) then
13394: LD_EXP 18
13398: PPUSH
13399: CALL_OW 302
13403: IFFALSE 13441
// begin Say ( Givi , DG-End-8 ) ;
13405: LD_EXP 14
13409: PPUSH
13410: LD_STRING DG-End-8
13412: PPUSH
13413: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13417: LD_EXP 14
13421: PPUSH
13422: LD_STRING DG-End-9
13424: PPUSH
13425: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13429: LD_EXP 13
13433: PPUSH
13434: LD_STRING DH-End-10
13436: PPUSH
13437: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13441: LD_EXP 13
13445: PPUSH
13446: LD_STRING DH-End-11
13448: PPUSH
13449: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13453: LD_INT 7
13455: PPUSH
13456: LD_INT 2
13458: PPUSH
13459: CALL_OW 321
13463: PUSH
13464: LD_INT 2
13466: EQUAL
13467: IFFALSE 13481
// AddMedal ( med1 , 1 ) else
13469: LD_STRING med1
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 101
13479: GO 13492
// AddMedal ( med1 , - 1 ) ;
13481: LD_STRING med1
13483: PPUSH
13484: LD_INT 1
13486: NEG
13487: PPUSH
13488: CALL_OW 101
// if hasRockets then
13492: LD_EXP 9
13496: IFFALSE 13510
// AddMedal ( med2 , 1 ) else
13498: LD_STRING med2
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: CALL_OW 101
13508: GO 13521
// AddMedal ( med2 , - 1 ) ;
13510: LD_STRING med2
13512: PPUSH
13513: LD_INT 1
13515: NEG
13516: PPUSH
13517: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13521: LD_OWVAR 1
13525: PUSH
13526: LD_INT 105000
13528: PUSH
13529: LD_INT 94500
13531: PUSH
13532: LD_INT 84000
13534: PUSH
13535: LD_INT 73500
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: PUSH
13544: LD_OWVAR 67
13548: ARRAY
13549: LESS
13550: IFFALSE 13564
// AddMedal ( med3 , 1 ) else
13552: LD_STRING med3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 101
13562: GO 13575
// AddMedal ( med3 , - 1 ) ;
13564: LD_STRING med3
13566: PPUSH
13567: LD_INT 1
13569: NEG
13570: PPUSH
13571: CALL_OW 101
// GiveMedals ( MAIN ) ;
13575: LD_STRING MAIN
13577: PPUSH
13578: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13582: LD_INT 22
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 23
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 21
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: PPUSH
13617: CALL_OW 69
13621: PPUSH
13622: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13626: LD_EXP 28
13630: PPUSH
13631: LD_STRING 07_UsCommander
13633: PPUSH
13634: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13638: LD_INT 22
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 23
13650: PUSH
13651: LD_INT 1
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 21
13660: PUSH
13661: LD_INT 1
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: CALL_OW 69
13677: PUSH
13678: LD_EXP 28
13682: DIFF
13683: PPUSH
13684: LD_STRING 07_Americans
13686: PPUSH
13687: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13691: LD_EXP 13
13695: PPUSH
13696: LD_STRING 07_Heike
13698: PPUSH
13699: CALL_OW 38
// if Aviradze then
13703: LD_EXP 24
13707: IFFALSE 13721
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13709: LD_EXP 24
13713: PPUSH
13714: LD_STRING 07_Aviradze
13716: PPUSH
13717: CALL_OW 38
// if Ibrahim then
13721: LD_EXP 16
13725: IFFALSE 13739
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13727: LD_EXP 16
13731: PPUSH
13732: LD_STRING 07_Ibrahim
13734: PPUSH
13735: CALL_OW 38
// if Kamil then
13739: LD_EXP 17
13743: IFFALSE 13757
// SaveCharacters ( Kamil , 07_Kamil ) ;
13745: LD_EXP 17
13749: PPUSH
13750: LD_STRING 07_Kamil
13752: PPUSH
13753: CALL_OW 38
// if Sophia then
13757: LD_EXP 19
13761: IFFALSE 13775
// SaveCharacters ( Sophia , 07_Sophia ) ;
13763: LD_EXP 19
13767: PPUSH
13768: LD_STRING 07_Sophia
13770: PPUSH
13771: CALL_OW 38
// if Kaia then
13775: LD_EXP 18
13779: IFFALSE 13793
// SaveCharacters ( Kaia , 07_Kaia ) ;
13781: LD_EXP 18
13785: PPUSH
13786: LD_STRING 07_Kaia
13788: PPUSH
13789: CALL_OW 38
// if Givi then
13793: LD_EXP 14
13797: IFFALSE 13811
// SaveCharacters ( Givi , 07_Givi ) ;
13799: LD_EXP 14
13803: PPUSH
13804: LD_STRING 07_Givi
13806: PPUSH
13807: CALL_OW 38
// if Mike then
13811: LD_EXP 15
13815: IFFALSE 13829
// SaveCharacters ( Mike , 07_Mike ) ;
13817: LD_EXP 15
13821: PPUSH
13822: LD_STRING 07_Mike
13824: PPUSH
13825: CALL_OW 38
// if Markov then
13829: LD_EXP 20
13833: IFFALSE 13847
// SaveCharacters ( Markov , 07_Markov ) ;
13835: LD_EXP 20
13839: PPUSH
13840: LD_STRING 07_Markov
13842: PPUSH
13843: CALL_OW 38
// if Kurt then
13847: LD_EXP 23
13851: IFFALSE 13865
// SaveCharacters ( Kurt , 07_Kurt ) ;
13853: LD_EXP 23
13857: PPUSH
13858: LD_STRING 07_Kurt
13860: PPUSH
13861: CALL_OW 38
// if heikeSecondSquad then
13865: LD_EXP 25
13869: IFFALSE 13883
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13871: LD_EXP 25
13875: PPUSH
13876: LD_STRING 07_others
13878: PPUSH
13879: CALL_OW 38
// YouWin ;
13883: CALL_OW 103
// DialogueOff ;
13887: CALL_OW 7
// end ; end_of_file
13891: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13892: LD_INT 7
13894: PPUSH
13895: LD_INT 1
13897: PPUSH
13898: CALL_OW 287
13902: PUSH
13903: LD_INT 300
13905: PUSH
13906: LD_INT 150
13908: PUSH
13909: LD_INT 100
13911: PUSH
13912: LD_INT 80
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: PUSH
13921: LD_OWVAR 67
13925: ARRAY
13926: LESS
13927: IFFALSE 13954
13929: GO 13931
13931: DISABLE
// begin enable ;
13932: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13933: LD_INT 1
13935: PPUSH
13936: LD_INT 5
13938: PPUSH
13939: CALL_OW 12
13943: PPUSH
13944: LD_INT 7
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 55
// end ;
13954: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13955: LD_INT 8
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: CALL_OW 287
13965: PUSH
13966: LD_INT 300
13968: PUSH
13969: LD_INT 250
13971: PUSH
13972: LD_INT 200
13974: PUSH
13975: LD_INT 180
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: LD_OWVAR 67
13988: ARRAY
13989: LESS
13990: IFFALSE 14017
13992: GO 13994
13994: DISABLE
// begin enable ;
13995: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13996: LD_INT 1
13998: PPUSH
13999: LD_INT 5
14001: PPUSH
14002: CALL_OW 12
14006: PPUSH
14007: LD_INT 8
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 55
// end ;
14017: END
// every 0 0$40 trigger tick < 4 4$10 do
14018: LD_OWVAR 1
14022: PUSH
14023: LD_INT 8750
14025: LESS
14026: IFFALSE 14059
14028: GO 14030
14030: DISABLE
// begin enable ;
14031: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14032: LD_INT 1
14034: PPUSH
14035: LD_INT 5
14037: PPUSH
14038: CALL_OW 12
14042: PPUSH
14043: LD_INT 130
14045: PPUSH
14046: LD_INT 18
14048: PPUSH
14049: LD_INT 12
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 56
// end ; end_of_file
14059: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
14066: PPUSH
// uc_side := 3 ;
14067: LD_ADDR_OWVAR 20
14071: PUSH
14072: LD_INT 3
14074: ST_TO_ADDR
// uc_nation := 3 ;
14075: LD_ADDR_OWVAR 21
14079: PUSH
14080: LD_INT 3
14082: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14083: LD_ADDR_VAR 0 3
14087: PUSH
14088: LD_INT 184
14090: PUSH
14091: LD_INT 144
14093: PUSH
14094: LD_INT 5
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 191
14104: PUSH
14105: LD_INT 147
14107: PUSH
14108: LD_INT 5
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 202
14118: PUSH
14119: LD_INT 151
14121: PUSH
14122: LD_INT 4
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 210
14132: PUSH
14133: LD_INT 152
14135: PUSH
14136: LD_INT 4
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: ST_TO_ADDR
// for i := 1 to 4 do
14150: LD_ADDR_VAR 0 2
14154: PUSH
14155: DOUBLE
14156: LD_INT 1
14158: DEC
14159: ST_TO_ADDR
14160: LD_INT 4
14162: PUSH
14163: FOR_TO
14164: IFFALSE 14333
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14166: LD_INT 24
14168: PPUSH
14169: LD_INT 1
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: LD_INT 43
14177: PUSH
14178: LD_INT 44
14180: PUSH
14181: LD_INT 46
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: LD_VAR 0 2
14193: PUSH
14194: LD_INT 3
14196: MOD
14197: PUSH
14198: LD_INT 1
14200: PLUS
14201: ARRAY
14202: PPUSH
14203: LD_INT 40
14205: PPUSH
14206: CALL 20249 0 5
// veh := CreateVehicle ;
14210: LD_ADDR_VAR 0 5
14214: PUSH
14215: CALL_OW 45
14219: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14220: LD_VAR 0 5
14224: PPUSH
14225: LD_VAR 0 3
14229: PUSH
14230: LD_VAR 0 2
14234: ARRAY
14235: PUSH
14236: LD_INT 3
14238: ARRAY
14239: PPUSH
14240: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14244: LD_VAR 0 5
14248: PPUSH
14249: LD_VAR 0 3
14253: PUSH
14254: LD_VAR 0 2
14258: ARRAY
14259: PUSH
14260: LD_INT 1
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 3
14268: PUSH
14269: LD_VAR 0 2
14273: ARRAY
14274: PUSH
14275: LD_INT 2
14277: ARRAY
14278: PPUSH
14279: LD_INT 0
14281: PPUSH
14282: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14286: LD_INT 0
14288: PPUSH
14289: LD_INT 6
14291: PUSH
14292: LD_INT 7
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: LD_INT 8
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_OWVAR 67
14311: ARRAY
14312: PPUSH
14313: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14317: CALL_OW 44
14321: PPUSH
14322: LD_VAR 0 5
14326: PPUSH
14327: CALL_OW 52
// end ;
14331: GO 14163
14333: POP
14334: POP
// for i := 1 to 4 do
14335: LD_ADDR_VAR 0 2
14339: PUSH
14340: DOUBLE
14341: LD_INT 1
14343: DEC
14344: ST_TO_ADDR
14345: LD_INT 4
14347: PUSH
14348: FOR_TO
14349: IFFALSE 14415
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14351: LD_INT 0
14353: PPUSH
14354: LD_INT 6
14356: PUSH
14357: LD_INT 7
14359: PUSH
14360: LD_INT 8
14362: PUSH
14363: LD_INT 8
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: PUSH
14372: LD_OWVAR 67
14376: ARRAY
14377: PPUSH
14378: CALL_OW 381
// un := CreateHuman ;
14382: LD_ADDR_VAR 0 4
14386: PUSH
14387: CALL_OW 44
14391: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14392: LD_VAR 0 4
14396: PPUSH
14397: LD_INT 185
14399: PPUSH
14400: LD_INT 145
14402: PPUSH
14403: LD_INT 6
14405: PPUSH
14406: LD_INT 0
14408: PPUSH
14409: CALL_OW 50
// end ;
14413: GO 14348
14415: POP
14416: POP
// end ;
14417: LD_VAR 0 1
14421: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
14426: PPUSH
// uc_side := 3 ;
14427: LD_ADDR_OWVAR 20
14431: PUSH
14432: LD_INT 3
14434: ST_TO_ADDR
// if Difficulty > 1 then
14435: LD_OWVAR 67
14439: PUSH
14440: LD_INT 1
14442: GREATER
14443: IFFALSE 14605
// begin uc_nation := 0 ;
14445: LD_ADDR_OWVAR 21
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: DOUBLE
14459: LD_INT 1
14461: DEC
14462: ST_TO_ADDR
14463: LD_INT 4
14465: PUSH
14466: LD_INT 5
14468: PUSH
14469: LD_INT 6
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: LD_OWVAR 67
14481: PUSH
14482: LD_INT 1
14484: PLUS
14485: ARRAY
14486: PUSH
14487: FOR_TO
14488: IFFALSE 14603
// begin hc_class := class_apeman_soldier ;
14490: LD_ADDR_OWVAR 28
14494: PUSH
14495: LD_INT 15
14497: ST_TO_ADDR
// hc_gallery :=  ;
14498: LD_ADDR_OWVAR 33
14502: PUSH
14503: LD_STRING 
14505: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14506: LD_ADDR_OWVAR 26
14510: PUSH
14511: LD_STRING Treci
14513: PUSH
14514: LD_STRING Ivan
14516: PUSH
14517: LD_STRING Yaromir
14519: PUSH
14520: LD_STRING Nadzieia
14522: PUSH
14523: LD_STRING Krasna
14525: PUSH
14526: LD_STRING Piaty
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 1
14539: PPUSH
14540: LD_INT 6
14542: PPUSH
14543: CALL_OW 12
14547: ARRAY
14548: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14549: LD_ADDR_OWVAR 31
14553: PUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 0
14559: PUSH
14560: LD_INT 0
14562: PUSH
14563: LD_INT 0
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: ST_TO_ADDR
// hc_sex := sex_male ;
14572: LD_ADDR_OWVAR 27
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14580: CALL_OW 44
14584: PPUSH
14585: LD_INT 178
14587: PPUSH
14588: LD_INT 148
14590: PPUSH
14591: LD_INT 6
14593: PPUSH
14594: LD_INT 0
14596: PPUSH
14597: CALL_OW 50
// end ;
14601: GO 14487
14603: POP
14604: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14605: LD_ADDR_VAR 0 2
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_INT 4
14617: PUSH
14618: LD_INT 6
14620: PUSH
14621: LD_INT 7
14623: PUSH
14624: LD_INT 9
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_OWVAR 67
14637: ARRAY
14638: PUSH
14639: FOR_TO
14640: IFFALSE 14807
// begin uc_nation := 3 ;
14642: LD_ADDR_OWVAR 21
14646: PUSH
14647: LD_INT 3
14649: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14650: LD_INT 22
14652: PPUSH
14653: LD_INT 1
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_INT 45
14661: PUSH
14662: LD_INT 43
14664: PUSH
14665: LD_INT 44
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_VAR 0 2
14677: PUSH
14678: LD_INT 3
14680: MOD
14681: PUSH
14682: LD_INT 1
14684: PLUS
14685: ARRAY
14686: PPUSH
14687: LD_INT 44
14689: PPUSH
14690: CALL 20249 0 5
// veh := CreateVehicle ;
14694: LD_ADDR_VAR 0 3
14698: PUSH
14699: CALL_OW 45
14703: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14704: LD_VAR 0 3
14708: PPUSH
14709: LD_INT 4
14711: PPUSH
14712: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: LD_INT 0
14726: PPUSH
14727: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14731: LD_INT 0
14733: PPUSH
14734: LD_INT 6
14736: PUSH
14737: LD_INT 7
14739: PUSH
14740: LD_INT 8
14742: PUSH
14743: LD_INT 8
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: LD_OWVAR 67
14756: ARRAY
14757: PPUSH
14758: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14762: CALL_OW 44
14766: PPUSH
14767: LD_VAR 0 3
14771: PPUSH
14772: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 178
14783: PUSH
14784: LD_INT 137
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: EMPTY
14792: LIST
14793: PPUSH
14794: CALL 55287 0 2
// wait ( 0 0$2 ) ;
14798: LD_INT 70
14800: PPUSH
14801: CALL_OW 67
// end ;
14805: GO 14639
14807: POP
14808: POP
// end ;
14809: LD_VAR 0 1
14813: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14814: LD_INT 22
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 32
14826: PUSH
14827: LD_INT 1
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: IFFALSE 14930
14844: GO 14846
14846: DISABLE
14847: LD_INT 0
14849: PPUSH
14850: PPUSH
// begin enable ;
14851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14852: LD_ADDR_VAR 0 2
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 1
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL_OW 69
14885: ST_TO_ADDR
// for i in tmp do
14886: LD_ADDR_VAR 0 1
14890: PUSH
14891: LD_VAR 0 2
14895: PUSH
14896: FOR_IN
14897: IFFALSE 14928
// if GetFuel ( i ) < 3 then
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 261
14908: PUSH
14909: LD_INT 3
14911: LESS
14912: IFFALSE 14926
// SetFuel ( i , 3 ) ;
14914: LD_VAR 0 1
14918: PPUSH
14919: LD_INT 3
14921: PPUSH
14922: CALL_OW 240
14926: GO 14896
14928: POP
14929: POP
// end ;
14930: PPOPN 2
14932: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14933: LD_EXP 8
14937: PUSH
14938: LD_INT 22
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 21
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PPUSH
14962: CALL_OW 69
14966: AND
14967: IFFALSE 15231
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
14976: PPUSH
// begin enable ;
14977: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14978: LD_ADDR_VAR 0 2
14982: PUSH
14983: LD_INT 22
14985: PUSH
14986: LD_INT 3
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 25
14995: PUSH
14996: LD_INT 3
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 3
15005: PUSH
15006: LD_INT 55
15008: PUSH
15009: EMPTY
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: ST_TO_ADDR
// if mech then
15026: LD_VAR 0 2
15030: IFFALSE 15100
// for i in mech do
15032: LD_ADDR_VAR 0 1
15036: PUSH
15037: LD_VAR 0 2
15041: PUSH
15042: FOR_IN
15043: IFFALSE 15098
// begin if IsInArea ( i , escapeArea ) then
15045: LD_VAR 0 1
15049: PPUSH
15050: LD_INT 13
15052: PPUSH
15053: CALL_OW 308
15057: IFFALSE 15070
// RemoveUnit ( i ) else
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 64
15068: GO 15096
// if IsOk ( i ) then
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 302
15079: IFFALSE 15096
// ComMoveXY ( i , 196 , 155 ) ;
15081: LD_VAR 0 1
15085: PPUSH
15086: LD_INT 196
15088: PPUSH
15089: LD_INT 155
15091: PPUSH
15092: CALL_OW 111
// end ;
15096: GO 15042
15098: POP
15099: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15100: LD_ADDR_VAR 0 3
15104: PUSH
15105: LD_INT 22
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 2
15117: PUSH
15118: LD_INT 25
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 25
15130: PUSH
15131: LD_INT 15
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 2
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 50
15156: PUSH
15157: EMPTY
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 69
15169: ST_TO_ADDR
// if tmp then
15170: LD_VAR 0 3
15174: IFFALSE 15231
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15176: LD_VAR 0 3
15180: PPUSH
15181: LD_INT 171
15183: PUSH
15184: LD_INT 106
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 145
15193: PUSH
15194: LD_INT 69
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 132
15203: PUSH
15204: LD_INT 38
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 126
15213: PUSH
15214: LD_INT 15
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL 55287 0 2
// end ; end_of_file
15231: PPOPN 3
15233: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15234: LD_INT 0
15236: PPUSH
15237: PPUSH
// if exist_mode then
15238: LD_VAR 0 2
15242: IFFALSE 15267
// unit := CreateCharacter ( prefix & ident ) else
15244: LD_ADDR_VAR 0 5
15248: PUSH
15249: LD_VAR 0 3
15253: PUSH
15254: LD_VAR 0 1
15258: STR
15259: PPUSH
15260: CALL_OW 34
15264: ST_TO_ADDR
15265: GO 15282
// unit := NewCharacter ( ident ) ;
15267: LD_ADDR_VAR 0 5
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 25
15281: ST_TO_ADDR
// result := unit ;
15282: LD_ADDR_VAR 0 4
15286: PUSH
15287: LD_VAR 0 5
15291: ST_TO_ADDR
// end ;
15292: LD_VAR 0 4
15296: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// if not side or not nation then
15301: LD_VAR 0 1
15305: NOT
15306: PUSH
15307: LD_VAR 0 2
15311: NOT
15312: OR
15313: IFFALSE 15317
// exit ;
15315: GO 16085
// case nation of nation_american :
15317: LD_VAR 0 2
15321: PUSH
15322: LD_INT 1
15324: DOUBLE
15325: EQUAL
15326: IFTRUE 15330
15328: GO 15544
15330: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15331: LD_ADDR_VAR 0 4
15335: PUSH
15336: LD_INT 35
15338: PUSH
15339: LD_INT 45
15341: PUSH
15342: LD_INT 46
15344: PUSH
15345: LD_INT 47
15347: PUSH
15348: LD_INT 82
15350: PUSH
15351: LD_INT 83
15353: PUSH
15354: LD_INT 84
15356: PUSH
15357: LD_INT 85
15359: PUSH
15360: LD_INT 86
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 6
15371: PUSH
15372: LD_INT 15
15374: PUSH
15375: LD_INT 16
15377: PUSH
15378: LD_INT 7
15380: PUSH
15381: LD_INT 12
15383: PUSH
15384: LD_INT 13
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: LD_INT 14
15392: PUSH
15393: LD_INT 20
15395: PUSH
15396: LD_INT 21
15398: PUSH
15399: LD_INT 22
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 32
15407: PUSH
15408: LD_INT 27
15410: PUSH
15411: LD_INT 36
15413: PUSH
15414: LD_INT 69
15416: PUSH
15417: LD_INT 39
15419: PUSH
15420: LD_INT 34
15422: PUSH
15423: LD_INT 40
15425: PUSH
15426: LD_INT 48
15428: PUSH
15429: LD_INT 49
15431: PUSH
15432: LD_INT 50
15434: PUSH
15435: LD_INT 51
15437: PUSH
15438: LD_INT 52
15440: PUSH
15441: LD_INT 53
15443: PUSH
15444: LD_INT 54
15446: PUSH
15447: LD_INT 55
15449: PUSH
15450: LD_INT 56
15452: PUSH
15453: LD_INT 57
15455: PUSH
15456: LD_INT 58
15458: PUSH
15459: LD_INT 59
15461: PUSH
15462: LD_INT 60
15464: PUSH
15465: LD_INT 61
15467: PUSH
15468: LD_INT 62
15470: PUSH
15471: LD_INT 80
15473: PUSH
15474: LD_INT 82
15476: PUSH
15477: LD_INT 83
15479: PUSH
15480: LD_INT 84
15482: PUSH
15483: LD_INT 85
15485: PUSH
15486: LD_INT 86
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: ST_TO_ADDR
15542: GO 16009
15544: LD_INT 2
15546: DOUBLE
15547: EQUAL
15548: IFTRUE 15552
15550: GO 15778
15552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15553: LD_ADDR_VAR 0 4
15557: PUSH
15558: LD_INT 35
15560: PUSH
15561: LD_INT 45
15563: PUSH
15564: LD_INT 46
15566: PUSH
15567: LD_INT 47
15569: PUSH
15570: LD_INT 82
15572: PUSH
15573: LD_INT 83
15575: PUSH
15576: LD_INT 84
15578: PUSH
15579: LD_INT 85
15581: PUSH
15582: LD_INT 87
15584: PUSH
15585: LD_INT 70
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: LD_INT 11
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: LD_INT 4
15599: PUSH
15600: LD_INT 5
15602: PUSH
15603: LD_INT 6
15605: PUSH
15606: LD_INT 15
15608: PUSH
15609: LD_INT 18
15611: PUSH
15612: LD_INT 7
15614: PUSH
15615: LD_INT 17
15617: PUSH
15618: LD_INT 8
15620: PUSH
15621: LD_INT 20
15623: PUSH
15624: LD_INT 21
15626: PUSH
15627: LD_INT 22
15629: PUSH
15630: LD_INT 72
15632: PUSH
15633: LD_INT 26
15635: PUSH
15636: LD_INT 69
15638: PUSH
15639: LD_INT 39
15641: PUSH
15642: LD_INT 40
15644: PUSH
15645: LD_INT 41
15647: PUSH
15648: LD_INT 42
15650: PUSH
15651: LD_INT 43
15653: PUSH
15654: LD_INT 48
15656: PUSH
15657: LD_INT 49
15659: PUSH
15660: LD_INT 50
15662: PUSH
15663: LD_INT 51
15665: PUSH
15666: LD_INT 52
15668: PUSH
15669: LD_INT 53
15671: PUSH
15672: LD_INT 54
15674: PUSH
15675: LD_INT 55
15677: PUSH
15678: LD_INT 56
15680: PUSH
15681: LD_INT 60
15683: PUSH
15684: LD_INT 61
15686: PUSH
15687: LD_INT 62
15689: PUSH
15690: LD_INT 66
15692: PUSH
15693: LD_INT 67
15695: PUSH
15696: LD_INT 68
15698: PUSH
15699: LD_INT 81
15701: PUSH
15702: LD_INT 82
15704: PUSH
15705: LD_INT 83
15707: PUSH
15708: LD_INT 84
15710: PUSH
15711: LD_INT 85
15713: PUSH
15714: LD_INT 87
15716: PUSH
15717: LD_INT 88
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: ST_TO_ADDR
15776: GO 16009
15778: LD_INT 3
15780: DOUBLE
15781: EQUAL
15782: IFTRUE 15786
15784: GO 16008
15786: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15787: LD_ADDR_VAR 0 4
15791: PUSH
15792: LD_INT 46
15794: PUSH
15795: LD_INT 47
15797: PUSH
15798: LD_INT 1
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 82
15806: PUSH
15807: LD_INT 83
15809: PUSH
15810: LD_INT 84
15812: PUSH
15813: LD_INT 85
15815: PUSH
15816: LD_INT 86
15818: PUSH
15819: LD_INT 11
15821: PUSH
15822: LD_INT 9
15824: PUSH
15825: LD_INT 20
15827: PUSH
15828: LD_INT 19
15830: PUSH
15831: LD_INT 21
15833: PUSH
15834: LD_INT 24
15836: PUSH
15837: LD_INT 22
15839: PUSH
15840: LD_INT 25
15842: PUSH
15843: LD_INT 28
15845: PUSH
15846: LD_INT 29
15848: PUSH
15849: LD_INT 30
15851: PUSH
15852: LD_INT 31
15854: PUSH
15855: LD_INT 37
15857: PUSH
15858: LD_INT 38
15860: PUSH
15861: LD_INT 32
15863: PUSH
15864: LD_INT 27
15866: PUSH
15867: LD_INT 33
15869: PUSH
15870: LD_INT 69
15872: PUSH
15873: LD_INT 39
15875: PUSH
15876: LD_INT 34
15878: PUSH
15879: LD_INT 40
15881: PUSH
15882: LD_INT 71
15884: PUSH
15885: LD_INT 23
15887: PUSH
15888: LD_INT 44
15890: PUSH
15891: LD_INT 48
15893: PUSH
15894: LD_INT 49
15896: PUSH
15897: LD_INT 50
15899: PUSH
15900: LD_INT 51
15902: PUSH
15903: LD_INT 52
15905: PUSH
15906: LD_INT 53
15908: PUSH
15909: LD_INT 54
15911: PUSH
15912: LD_INT 55
15914: PUSH
15915: LD_INT 56
15917: PUSH
15918: LD_INT 57
15920: PUSH
15921: LD_INT 58
15923: PUSH
15924: LD_INT 59
15926: PUSH
15927: LD_INT 63
15929: PUSH
15930: LD_INT 64
15932: PUSH
15933: LD_INT 65
15935: PUSH
15936: LD_INT 82
15938: PUSH
15939: LD_INT 83
15941: PUSH
15942: LD_INT 84
15944: PUSH
15945: LD_INT 85
15947: PUSH
15948: LD_INT 86
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: ST_TO_ADDR
16006: GO 16009
16008: POP
// if state > - 1 and state < 3 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 1
16016: NEG
16017: GREATER
16018: PUSH
16019: LD_VAR 0 3
16023: PUSH
16024: LD_INT 3
16026: LESS
16027: AND
16028: IFFALSE 16085
// for i in result do
16030: LD_ADDR_VAR 0 5
16034: PUSH
16035: LD_VAR 0 4
16039: PUSH
16040: FOR_IN
16041: IFFALSE 16083
// if GetTech ( i , side ) <> state then
16043: LD_VAR 0 5
16047: PPUSH
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 321
16057: PUSH
16058: LD_VAR 0 3
16062: NONEQUAL
16063: IFFALSE 16081
// result := result diff i ;
16065: LD_ADDR_VAR 0 4
16069: PUSH
16070: LD_VAR 0 4
16074: PUSH
16075: LD_VAR 0 5
16079: DIFF
16080: ST_TO_ADDR
16081: GO 16040
16083: POP
16084: POP
// end ;
16085: LD_VAR 0 4
16089: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
// result := true ;
16095: LD_ADDR_VAR 0 3
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16103: LD_ADDR_VAR 0 5
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 480
16117: ST_TO_ADDR
// if not tmp then
16118: LD_VAR 0 5
16122: NOT
16123: IFFALSE 16127
// exit ;
16125: GO 16176
// for i in tmp do
16127: LD_ADDR_VAR 0 4
16131: PUSH
16132: LD_VAR 0 5
16136: PUSH
16137: FOR_IN
16138: IFFALSE 16174
// if GetTech ( i , side ) <> state_researched then
16140: LD_VAR 0 4
16144: PPUSH
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL_OW 321
16154: PUSH
16155: LD_INT 2
16157: NONEQUAL
16158: IFFALSE 16172
// begin result := false ;
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_INT 0
16167: ST_TO_ADDR
// exit ;
16168: POP
16169: POP
16170: GO 16176
// end ;
16172: GO 16137
16174: POP
16175: POP
// end ;
16176: LD_VAR 0 3
16180: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16181: LD_INT 0
16183: PPUSH
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
16189: PPUSH
16190: PPUSH
16191: PPUSH
16192: PPUSH
16193: PPUSH
16194: PPUSH
16195: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16196: LD_VAR 0 1
16200: NOT
16201: PUSH
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 257
16211: PUSH
16212: LD_INT 9
16214: NONEQUAL
16215: OR
16216: IFFALSE 16220
// exit ;
16218: GO 16793
// side := GetSide ( unit ) ;
16220: LD_ADDR_VAR 0 9
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 255
16234: ST_TO_ADDR
// tech_space := tech_spacanom ;
16235: LD_ADDR_VAR 0 12
16239: PUSH
16240: LD_INT 29
16242: ST_TO_ADDR
// tech_time := tech_taurad ;
16243: LD_ADDR_VAR 0 13
16247: PUSH
16248: LD_INT 28
16250: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16251: LD_ADDR_VAR 0 11
16255: PUSH
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 310
16265: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16266: LD_VAR 0 11
16270: PPUSH
16271: CALL_OW 247
16275: PUSH
16276: LD_INT 2
16278: EQUAL
16279: IFFALSE 16283
// exit ;
16281: GO 16793
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16283: LD_ADDR_VAR 0 8
16287: PUSH
16288: LD_INT 81
16290: PUSH
16291: LD_VAR 0 9
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 3
16302: PUSH
16303: LD_INT 21
16305: PUSH
16306: LD_INT 3
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: ST_TO_ADDR
// if not tmp then
16326: LD_VAR 0 8
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 16793
// if in_unit then
16335: LD_VAR 0 11
16339: IFFALSE 16363
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_VAR 0 8
16350: PPUSH
16351: LD_VAR 0 11
16355: PPUSH
16356: CALL_OW 74
16360: ST_TO_ADDR
16361: GO 16383
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16363: LD_ADDR_VAR 0 10
16367: PUSH
16368: LD_VAR 0 8
16372: PPUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 74
16382: ST_TO_ADDR
// if not enemy then
16383: LD_VAR 0 10
16387: NOT
16388: IFFALSE 16392
// exit ;
16390: GO 16793
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16392: LD_VAR 0 11
16396: PUSH
16397: LD_VAR 0 11
16401: PPUSH
16402: LD_VAR 0 10
16406: PPUSH
16407: CALL_OW 296
16411: PUSH
16412: LD_INT 13
16414: GREATER
16415: AND
16416: PUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 10
16426: PPUSH
16427: CALL_OW 296
16431: PUSH
16432: LD_INT 12
16434: GREATER
16435: OR
16436: IFFALSE 16440
// exit ;
16438: GO 16793
// missile := [ 1 ] ;
16440: LD_ADDR_VAR 0 14
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16451: LD_VAR 0 9
16455: PPUSH
16456: LD_VAR 0 12
16460: PPUSH
16461: CALL_OW 325
16465: IFFALSE 16494
// missile := Replace ( missile , missile + 1 , 2 ) ;
16467: LD_ADDR_VAR 0 14
16471: PUSH
16472: LD_VAR 0 14
16476: PPUSH
16477: LD_VAR 0 14
16481: PUSH
16482: LD_INT 1
16484: PLUS
16485: PPUSH
16486: LD_INT 2
16488: PPUSH
16489: CALL_OW 1
16493: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16494: LD_VAR 0 9
16498: PPUSH
16499: LD_VAR 0 13
16503: PPUSH
16504: CALL_OW 325
16508: PUSH
16509: LD_VAR 0 10
16513: PPUSH
16514: CALL_OW 255
16518: PPUSH
16519: LD_VAR 0 13
16523: PPUSH
16524: CALL_OW 325
16528: NOT
16529: AND
16530: IFFALSE 16559
// missile := Replace ( missile , missile + 1 , 3 ) ;
16532: LD_ADDR_VAR 0 14
16536: PUSH
16537: LD_VAR 0 14
16541: PPUSH
16542: LD_VAR 0 14
16546: PUSH
16547: LD_INT 1
16549: PLUS
16550: PPUSH
16551: LD_INT 3
16553: PPUSH
16554: CALL_OW 1
16558: ST_TO_ADDR
// if missile < 2 then
16559: LD_VAR 0 14
16563: PUSH
16564: LD_INT 2
16566: LESS
16567: IFFALSE 16571
// exit ;
16569: GO 16793
// x := GetX ( enemy ) ;
16571: LD_ADDR_VAR 0 4
16575: PUSH
16576: LD_VAR 0 10
16580: PPUSH
16581: CALL_OW 250
16585: ST_TO_ADDR
// y := GetY ( enemy ) ;
16586: LD_ADDR_VAR 0 5
16590: PUSH
16591: LD_VAR 0 10
16595: PPUSH
16596: CALL_OW 251
16600: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16601: LD_ADDR_VAR 0 6
16605: PUSH
16606: LD_VAR 0 4
16610: PUSH
16611: LD_INT 1
16613: NEG
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 12
16622: PLUS
16623: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16624: LD_ADDR_VAR 0 7
16628: PUSH
16629: LD_VAR 0 5
16633: PUSH
16634: LD_INT 1
16636: NEG
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: CALL_OW 12
16645: PLUS
16646: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16647: LD_VAR 0 6
16651: PPUSH
16652: LD_VAR 0 7
16656: PPUSH
16657: CALL_OW 488
16661: NOT
16662: IFFALSE 16684
// begin _x := x ;
16664: LD_ADDR_VAR 0 6
16668: PUSH
16669: LD_VAR 0 4
16673: ST_TO_ADDR
// _y := y ;
16674: LD_ADDR_VAR 0 7
16678: PUSH
16679: LD_VAR 0 5
16683: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16684: LD_ADDR_VAR 0 3
16688: PUSH
16689: LD_INT 1
16691: PPUSH
16692: LD_VAR 0 14
16696: PPUSH
16697: CALL_OW 12
16701: ST_TO_ADDR
// case i of 1 :
16702: LD_VAR 0 3
16706: PUSH
16707: LD_INT 1
16709: DOUBLE
16710: EQUAL
16711: IFTRUE 16715
16713: GO 16732
16715: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16716: LD_VAR 0 1
16720: PPUSH
16721: LD_VAR 0 10
16725: PPUSH
16726: CALL_OW 115
16730: GO 16793
16732: LD_INT 2
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16762
16740: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16741: LD_VAR 0 1
16745: PPUSH
16746: LD_VAR 0 6
16750: PPUSH
16751: LD_VAR 0 7
16755: PPUSH
16756: CALL_OW 153
16760: GO 16793
16762: LD_INT 3
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16792
16770: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16771: LD_VAR 0 1
16775: PPUSH
16776: LD_VAR 0 6
16780: PPUSH
16781: LD_VAR 0 7
16785: PPUSH
16786: CALL_OW 154
16790: GO 16793
16792: POP
// end ;
16793: LD_VAR 0 2
16797: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16798: LD_INT 0
16800: PPUSH
16801: PPUSH
16802: PPUSH
16803: PPUSH
16804: PPUSH
16805: PPUSH
// if not unit or not building then
16806: LD_VAR 0 1
16810: NOT
16811: PUSH
16812: LD_VAR 0 2
16816: NOT
16817: OR
16818: IFFALSE 16822
// exit ;
16820: GO 16980
// x := GetX ( building ) ;
16822: LD_ADDR_VAR 0 5
16826: PUSH
16827: LD_VAR 0 2
16831: PPUSH
16832: CALL_OW 250
16836: ST_TO_ADDR
// y := GetY ( building ) ;
16837: LD_ADDR_VAR 0 6
16841: PUSH
16842: LD_VAR 0 2
16846: PPUSH
16847: CALL_OW 251
16851: ST_TO_ADDR
// for i = 0 to 5 do
16852: LD_ADDR_VAR 0 4
16856: PUSH
16857: DOUBLE
16858: LD_INT 0
16860: DEC
16861: ST_TO_ADDR
16862: LD_INT 5
16864: PUSH
16865: FOR_TO
16866: IFFALSE 16978
// begin _x := ShiftX ( x , i , 3 ) ;
16868: LD_ADDR_VAR 0 7
16872: PUSH
16873: LD_VAR 0 5
16877: PPUSH
16878: LD_VAR 0 4
16882: PPUSH
16883: LD_INT 3
16885: PPUSH
16886: CALL_OW 272
16890: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16891: LD_ADDR_VAR 0 8
16895: PUSH
16896: LD_VAR 0 6
16900: PPUSH
16901: LD_VAR 0 4
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL_OW 273
16913: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16914: LD_VAR 0 7
16918: PPUSH
16919: LD_VAR 0 8
16923: PPUSH
16924: CALL_OW 488
16928: NOT
16929: IFFALSE 16933
// continue ;
16931: GO 16865
// if HexInfo ( _x , _y ) = 0 then
16933: LD_VAR 0 7
16937: PPUSH
16938: LD_VAR 0 8
16942: PPUSH
16943: CALL_OW 428
16947: PUSH
16948: LD_INT 0
16950: EQUAL
16951: IFFALSE 16976
// begin ComMoveXY ( unit , _x , _y ) ;
16953: LD_VAR 0 1
16957: PPUSH
16958: LD_VAR 0 7
16962: PPUSH
16963: LD_VAR 0 8
16967: PPUSH
16968: CALL_OW 111
// exit ;
16972: POP
16973: POP
16974: GO 16980
// end ; end ;
16976: GO 16865
16978: POP
16979: POP
// end ;
16980: LD_VAR 0 3
16984: RET
// export function ScanBase ( side , base_area ) ; begin
16985: LD_INT 0
16987: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16988: LD_ADDR_VAR 0 3
16992: PUSH
16993: LD_VAR 0 2
16997: PPUSH
16998: LD_INT 81
17000: PUSH
17001: LD_VAR 0 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 70
17014: ST_TO_ADDR
// end ;
17015: LD_VAR 0 3
17019: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17020: LD_INT 0
17022: PPUSH
17023: PPUSH
17024: PPUSH
17025: PPUSH
// result := false ;
17026: LD_ADDR_VAR 0 2
17030: PUSH
17031: LD_INT 0
17033: ST_TO_ADDR
// side := GetSide ( unit ) ;
17034: LD_ADDR_VAR 0 3
17038: PUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: CALL_OW 255
17048: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17049: LD_ADDR_VAR 0 4
17053: PUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 248
17063: ST_TO_ADDR
// case nat of 1 :
17064: LD_VAR 0 4
17068: PUSH
17069: LD_INT 1
17071: DOUBLE
17072: EQUAL
17073: IFTRUE 17077
17075: GO 17088
17077: POP
// tech := tech_lassight ; 2 :
17078: LD_ADDR_VAR 0 5
17082: PUSH
17083: LD_INT 12
17085: ST_TO_ADDR
17086: GO 17127
17088: LD_INT 2
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17107
17096: POP
// tech := tech_mortar ; 3 :
17097: LD_ADDR_VAR 0 5
17101: PUSH
17102: LD_INT 41
17104: ST_TO_ADDR
17105: GO 17127
17107: LD_INT 3
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17126
17115: POP
// tech := tech_bazooka ; end ;
17116: LD_ADDR_VAR 0 5
17120: PUSH
17121: LD_INT 44
17123: ST_TO_ADDR
17124: GO 17127
17126: POP
// if Researched ( side , tech ) then
17127: LD_VAR 0 3
17131: PPUSH
17132: LD_VAR 0 5
17136: PPUSH
17137: CALL_OW 325
17141: IFFALSE 17168
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_INT 5
17150: PUSH
17151: LD_INT 8
17153: PUSH
17154: LD_INT 9
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: PUSH
17162: LD_VAR 0 4
17166: ARRAY
17167: ST_TO_ADDR
// end ;
17168: LD_VAR 0 2
17172: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17173: LD_INT 0
17175: PPUSH
17176: PPUSH
17177: PPUSH
// if not mines then
17178: LD_VAR 0 2
17182: NOT
17183: IFFALSE 17187
// exit ;
17185: GO 17331
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17187: LD_ADDR_VAR 0 5
17191: PUSH
17192: LD_INT 81
17194: PUSH
17195: LD_VAR 0 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: LD_INT 21
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// for i in mines do
17230: LD_ADDR_VAR 0 4
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: FOR_IN
17241: IFFALSE 17329
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17243: LD_VAR 0 4
17247: PUSH
17248: LD_INT 1
17250: ARRAY
17251: PPUSH
17252: LD_VAR 0 4
17256: PUSH
17257: LD_INT 2
17259: ARRAY
17260: PPUSH
17261: CALL_OW 458
17265: NOT
17266: IFFALSE 17270
// continue ;
17268: GO 17240
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17270: LD_VAR 0 4
17274: PUSH
17275: LD_INT 1
17277: ARRAY
17278: PPUSH
17279: LD_VAR 0 4
17283: PUSH
17284: LD_INT 2
17286: ARRAY
17287: PPUSH
17288: CALL_OW 428
17292: PUSH
17293: LD_VAR 0 5
17297: IN
17298: IFFALSE 17327
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17300: LD_VAR 0 4
17304: PUSH
17305: LD_INT 1
17307: ARRAY
17308: PPUSH
17309: LD_VAR 0 4
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: PPUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 456
// end ;
17327: GO 17240
17329: POP
17330: POP
// end ;
17331: LD_VAR 0 3
17335: RET
// export function Count ( array ) ; var i ; begin
17336: LD_INT 0
17338: PPUSH
17339: PPUSH
// result := 0 ;
17340: LD_ADDR_VAR 0 2
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// for i in array do
17348: LD_ADDR_VAR 0 3
17352: PUSH
17353: LD_VAR 0 1
17357: PUSH
17358: FOR_IN
17359: IFFALSE 17383
// if i then
17361: LD_VAR 0 3
17365: IFFALSE 17381
// result := result + 1 ;
17367: LD_ADDR_VAR 0 2
17371: PUSH
17372: LD_VAR 0 2
17376: PUSH
17377: LD_INT 1
17379: PLUS
17380: ST_TO_ADDR
17381: GO 17358
17383: POP
17384: POP
// end ;
17385: LD_VAR 0 2
17389: RET
// export function IsEmpty ( building ) ; begin
17390: LD_INT 0
17392: PPUSH
// if not building then
17393: LD_VAR 0 1
17397: NOT
17398: IFFALSE 17402
// exit ;
17400: GO 17445
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_VAR 0 1
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 255
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 58
17431: PUSH
17432: EMPTY
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PPUSH
17439: CALL_OW 69
17443: IN
17444: ST_TO_ADDR
// end ;
17445: LD_VAR 0 2
17449: RET
// export function IsNotFull ( building ) ; var places ; begin
17450: LD_INT 0
17452: PPUSH
17453: PPUSH
// if not building then
17454: LD_VAR 0 1
17458: NOT
17459: IFFALSE 17463
// exit ;
17461: GO 17634
// result := false ;
17463: LD_ADDR_VAR 0 2
17467: PUSH
17468: LD_INT 0
17470: ST_TO_ADDR
// places := 0 ;
17471: LD_ADDR_VAR 0 3
17475: PUSH
17476: LD_INT 0
17478: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 266
17488: PUSH
17489: LD_INT 0
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17551
17495: LD_INT 1
17497: DOUBLE
17498: EQUAL
17499: IFTRUE 17551
17501: LD_INT 6
17503: DOUBLE
17504: EQUAL
17505: IFTRUE 17551
17507: LD_INT 7
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17551
17513: LD_INT 8
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17551
17519: LD_INT 4
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17551
17525: LD_INT 5
17527: DOUBLE
17528: EQUAL
17529: IFTRUE 17551
17531: LD_INT 2
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17551
17537: LD_INT 3
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17551
17543: LD_INT 35
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17562
17551: POP
// places := 6 ; b_bunker , b_breastwork :
17552: LD_ADDR_VAR 0 3
17556: PUSH
17557: LD_INT 6
17559: ST_TO_ADDR
17560: GO 17607
17562: LD_INT 32
17564: DOUBLE
17565: EQUAL
17566: IFTRUE 17576
17568: LD_INT 31
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17587
17576: POP
// places := 1 ; b_control_tower :
17577: LD_ADDR_VAR 0 3
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
17585: GO 17607
17587: LD_INT 36
17589: DOUBLE
17590: EQUAL
17591: IFTRUE 17595
17593: GO 17606
17595: POP
// places := 3 ; end ;
17596: LD_ADDR_VAR 0 3
17600: PUSH
17601: LD_INT 3
17603: ST_TO_ADDR
17604: GO 17607
17606: POP
// if places then
17607: LD_VAR 0 3
17611: IFFALSE 17634
// result := UnitsInside ( building ) < places ;
17613: LD_ADDR_VAR 0 2
17617: PUSH
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 313
17627: PUSH
17628: LD_VAR 0 3
17632: LESS
17633: ST_TO_ADDR
// end ;
17634: LD_VAR 0 2
17638: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17639: LD_INT 0
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
// tmp := [ ] ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: EMPTY
17651: ST_TO_ADDR
// list := [ ] ;
17652: LD_ADDR_VAR 0 5
17656: PUSH
17657: EMPTY
17658: ST_TO_ADDR
// for i = 16 to 25 do
17659: LD_ADDR_VAR 0 4
17663: PUSH
17664: DOUBLE
17665: LD_INT 16
17667: DEC
17668: ST_TO_ADDR
17669: LD_INT 25
17671: PUSH
17672: FOR_TO
17673: IFFALSE 17746
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17675: LD_ADDR_VAR 0 3
17679: PUSH
17680: LD_VAR 0 3
17684: PUSH
17685: LD_INT 22
17687: PUSH
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 255
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 91
17704: PUSH
17705: LD_VAR 0 1
17709: PUSH
17710: LD_INT 6
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 30
17720: PUSH
17721: LD_VAR 0 4
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: ADD
17743: ST_TO_ADDR
17744: GO 17672
17746: POP
17747: POP
// for i = 1 to tmp do
17748: LD_ADDR_VAR 0 4
17752: PUSH
17753: DOUBLE
17754: LD_INT 1
17756: DEC
17757: ST_TO_ADDR
17758: LD_VAR 0 3
17762: PUSH
17763: FOR_TO
17764: IFFALSE 17852
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17766: LD_ADDR_VAR 0 5
17770: PUSH
17771: LD_VAR 0 5
17775: PUSH
17776: LD_VAR 0 3
17780: PUSH
17781: LD_VAR 0 4
17785: ARRAY
17786: PPUSH
17787: CALL_OW 266
17791: PUSH
17792: LD_VAR 0 3
17796: PUSH
17797: LD_VAR 0 4
17801: ARRAY
17802: PPUSH
17803: CALL_OW 250
17807: PUSH
17808: LD_VAR 0 3
17812: PUSH
17813: LD_VAR 0 4
17817: ARRAY
17818: PPUSH
17819: CALL_OW 251
17823: PUSH
17824: LD_VAR 0 3
17828: PUSH
17829: LD_VAR 0 4
17833: ARRAY
17834: PPUSH
17835: CALL_OW 254
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: PUSH
17846: EMPTY
17847: LIST
17848: ADD
17849: ST_TO_ADDR
17850: GO 17763
17852: POP
17853: POP
// result := list ;
17854: LD_ADDR_VAR 0 2
17858: PUSH
17859: LD_VAR 0 5
17863: ST_TO_ADDR
// end ;
17864: LD_VAR 0 2
17868: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17869: LD_INT 0
17871: PPUSH
17872: PPUSH
17873: PPUSH
17874: PPUSH
17875: PPUSH
17876: PPUSH
17877: PPUSH
// if not factory then
17878: LD_VAR 0 1
17882: NOT
17883: IFFALSE 17887
// exit ;
17885: GO 18480
// if control = control_apeman then
17887: LD_VAR 0 4
17891: PUSH
17892: LD_INT 5
17894: EQUAL
17895: IFFALSE 18004
// begin tmp := UnitsInside ( factory ) ;
17897: LD_ADDR_VAR 0 8
17901: PUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 313
17911: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17912: LD_VAR 0 8
17916: PPUSH
17917: LD_INT 25
17919: PUSH
17920: LD_INT 12
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PPUSH
17927: CALL_OW 72
17931: NOT
17932: IFFALSE 17942
// control := control_manual ;
17934: LD_ADDR_VAR 0 4
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17942: LD_ADDR_VAR 0 8
17946: PUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL 17639 0 1
17956: ST_TO_ADDR
// if tmp then
17957: LD_VAR 0 8
17961: IFFALSE 18004
// begin for i in tmp do
17963: LD_ADDR_VAR 0 7
17967: PUSH
17968: LD_VAR 0 8
17972: PUSH
17973: FOR_IN
17974: IFFALSE 18002
// if i [ 1 ] = b_ext_radio then
17976: LD_VAR 0 7
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PUSH
17985: LD_INT 22
17987: EQUAL
17988: IFFALSE 18000
// begin control := control_remote ;
17990: LD_ADDR_VAR 0 4
17994: PUSH
17995: LD_INT 2
17997: ST_TO_ADDR
// break ;
17998: GO 18002
// end ;
18000: GO 17973
18002: POP
18003: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_VAR 0 4
18023: PPUSH
18024: LD_VAR 0 5
18028: PPUSH
18029: CALL_OW 448
18033: IFFALSE 18068
// begin result := [ chassis , engine , control , weapon ] ;
18035: LD_ADDR_VAR 0 6
18039: PUSH
18040: LD_VAR 0 2
18044: PUSH
18045: LD_VAR 0 3
18049: PUSH
18050: LD_VAR 0 4
18054: PUSH
18055: LD_VAR 0 5
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: ST_TO_ADDR
// exit ;
18066: GO 18480
// end ; _chassis := AvailableChassisList ( factory ) ;
18068: LD_ADDR_VAR 0 9
18072: PUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 475
18082: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18083: LD_ADDR_VAR 0 11
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 476
18097: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18098: LD_ADDR_VAR 0 12
18102: PUSH
18103: LD_VAR 0 1
18107: PPUSH
18108: CALL_OW 477
18112: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18113: LD_ADDR_VAR 0 10
18117: PUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 478
18127: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18128: LD_VAR 0 9
18132: NOT
18133: PUSH
18134: LD_VAR 0 11
18138: NOT
18139: OR
18140: PUSH
18141: LD_VAR 0 12
18145: NOT
18146: OR
18147: PUSH
18148: LD_VAR 0 10
18152: NOT
18153: OR
18154: IFFALSE 18189
// begin result := [ chassis , engine , control , weapon ] ;
18156: LD_ADDR_VAR 0 6
18160: PUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_VAR 0 3
18170: PUSH
18171: LD_VAR 0 4
18175: PUSH
18176: LD_VAR 0 5
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: ST_TO_ADDR
// exit ;
18187: GO 18480
// end ; if not chassis in _chassis then
18189: LD_VAR 0 2
18193: PUSH
18194: LD_VAR 0 9
18198: IN
18199: NOT
18200: IFFALSE 18226
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18202: LD_ADDR_VAR 0 2
18206: PUSH
18207: LD_VAR 0 9
18211: PUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_VAR 0 9
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: CALL 18485 0 2
18240: NOT
18241: IFFALSE 18300
// repeat engine := _engine [ 1 ] ;
18243: LD_ADDR_VAR 0 3
18247: PUSH
18248: LD_VAR 0 11
18252: PUSH
18253: LD_INT 1
18255: ARRAY
18256: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18257: LD_ADDR_VAR 0 11
18261: PUSH
18262: LD_VAR 0 11
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: CALL_OW 3
18274: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18275: LD_VAR 0 2
18279: PPUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: CALL 18485 0 2
18289: PUSH
18290: LD_VAR 0 11
18294: PUSH
18295: EMPTY
18296: EQUAL
18297: OR
18298: IFFALSE 18243
// if not control in _control then
18300: LD_VAR 0 4
18304: PUSH
18305: LD_VAR 0 12
18309: IN
18310: NOT
18311: IFFALSE 18337
// control := _control [ rand ( 1 , _control ) ] ;
18313: LD_ADDR_VAR 0 4
18317: PUSH
18318: LD_VAR 0 12
18322: PUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_VAR 0 12
18330: PPUSH
18331: CALL_OW 12
18335: ARRAY
18336: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18337: LD_VAR 0 2
18341: PPUSH
18342: LD_VAR 0 5
18346: PPUSH
18347: CALL 18705 0 2
18351: NOT
18352: IFFALSE 18411
// repeat weapon := _weapon [ 1 ] ;
18354: LD_ADDR_VAR 0 5
18358: PUSH
18359: LD_VAR 0 10
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18368: LD_ADDR_VAR 0 10
18372: PUSH
18373: LD_VAR 0 10
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: CALL_OW 3
18385: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18386: LD_VAR 0 2
18390: PPUSH
18391: LD_VAR 0 5
18395: PPUSH
18396: CALL 18705 0 2
18400: PUSH
18401: LD_VAR 0 10
18405: PUSH
18406: EMPTY
18407: EQUAL
18408: OR
18409: IFFALSE 18354
// result := [ ] ;
18411: LD_ADDR_VAR 0 6
18415: PUSH
18416: EMPTY
18417: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18418: LD_VAR 0 1
18422: PPUSH
18423: LD_VAR 0 2
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_VAR 0 4
18437: PPUSH
18438: LD_VAR 0 5
18442: PPUSH
18443: CALL_OW 448
18447: IFFALSE 18480
// result := [ chassis , engine , control , weapon ] ;
18449: LD_ADDR_VAR 0 6
18453: PUSH
18454: LD_VAR 0 2
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_VAR 0 4
18468: PUSH
18469: LD_VAR 0 5
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// end ;
18480: LD_VAR 0 6
18484: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18485: LD_INT 0
18487: PPUSH
// if not chassis or not engine then
18488: LD_VAR 0 1
18492: NOT
18493: PUSH
18494: LD_VAR 0 2
18498: NOT
18499: OR
18500: IFFALSE 18504
// exit ;
18502: GO 18700
// case engine of engine_solar :
18504: LD_VAR 0 2
18508: PUSH
18509: LD_INT 2
18511: DOUBLE
18512: EQUAL
18513: IFTRUE 18517
18515: GO 18555
18517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18518: LD_ADDR_VAR 0 3
18522: PUSH
18523: LD_INT 11
18525: PUSH
18526: LD_INT 12
18528: PUSH
18529: LD_INT 13
18531: PUSH
18532: LD_INT 14
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 3
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: ST_TO_ADDR
18553: GO 18684
18555: LD_INT 1
18557: DOUBLE
18558: EQUAL
18559: IFTRUE 18563
18561: GO 18625
18563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18564: LD_ADDR_VAR 0 3
18568: PUSH
18569: LD_INT 11
18571: PUSH
18572: LD_INT 12
18574: PUSH
18575: LD_INT 13
18577: PUSH
18578: LD_INT 14
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 3
18589: PUSH
18590: LD_INT 4
18592: PUSH
18593: LD_INT 5
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 23
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_INT 24
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: ST_TO_ADDR
18623: GO 18684
18625: LD_INT 3
18627: DOUBLE
18628: EQUAL
18629: IFTRUE 18633
18631: GO 18683
18633: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18634: LD_ADDR_VAR 0 3
18638: PUSH
18639: LD_INT 13
18641: PUSH
18642: LD_INT 14
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: LD_INT 3
18650: PUSH
18651: LD_INT 4
18653: PUSH
18654: LD_INT 5
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 22
18662: PUSH
18663: LD_INT 23
18665: PUSH
18666: LD_INT 24
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: ST_TO_ADDR
18681: GO 18684
18683: POP
// result := ( chassis in result ) ;
18684: LD_ADDR_VAR 0 3
18688: PUSH
18689: LD_VAR 0 1
18693: PUSH
18694: LD_VAR 0 3
18698: IN
18699: ST_TO_ADDR
// end ;
18700: LD_VAR 0 3
18704: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18705: LD_INT 0
18707: PPUSH
// if not chassis or not weapon then
18708: LD_VAR 0 1
18712: NOT
18713: PUSH
18714: LD_VAR 0 2
18718: NOT
18719: OR
18720: IFFALSE 18724
// exit ;
18722: GO 19784
// case weapon of us_machine_gun :
18724: LD_VAR 0 2
18728: PUSH
18729: LD_INT 2
18731: DOUBLE
18732: EQUAL
18733: IFTRUE 18737
18735: GO 18767
18737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18738: LD_ADDR_VAR 0 3
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: LD_INT 3
18751: PUSH
18752: LD_INT 4
18754: PUSH
18755: LD_INT 5
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
18765: GO 19768
18767: LD_INT 3
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18805
18775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18776: LD_ADDR_VAR 0 3
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: LD_INT 3
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: LD_INT 5
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: ST_TO_ADDR
18803: GO 19768
18805: LD_INT 11
18807: DOUBLE
18808: EQUAL
18809: IFTRUE 18813
18811: GO 18843
18813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: LD_INT 3
18827: PUSH
18828: LD_INT 4
18830: PUSH
18831: LD_INT 5
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: ST_TO_ADDR
18841: GO 19768
18843: LD_INT 4
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 18877
18851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 3
18862: PUSH
18863: LD_INT 4
18865: PUSH
18866: LD_INT 5
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: ST_TO_ADDR
18875: GO 19768
18877: LD_INT 5
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18911
18885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18886: LD_ADDR_VAR 0 3
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: LD_INT 4
18899: PUSH
18900: LD_INT 5
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: ST_TO_ADDR
18909: GO 19768
18911: LD_INT 9
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 18945
18919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18920: LD_ADDR_VAR 0 3
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 4
18933: PUSH
18934: LD_INT 5
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: ST_TO_ADDR
18943: GO 19768
18945: LD_INT 7
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18979
18953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_INT 2
18961: PUSH
18962: LD_INT 3
18964: PUSH
18965: LD_INT 4
18967: PUSH
18968: LD_INT 5
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: ST_TO_ADDR
18977: GO 19768
18979: LD_INT 12
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 19013
18987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: LD_INT 4
19001: PUSH
19002: LD_INT 5
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: ST_TO_ADDR
19011: GO 19768
19013: LD_INT 13
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19047
19021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19022: LD_ADDR_VAR 0 3
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 3
19032: PUSH
19033: LD_INT 4
19035: PUSH
19036: LD_INT 5
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: ST_TO_ADDR
19045: GO 19768
19047: LD_INT 14
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19073
19055: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19056: LD_ADDR_VAR 0 3
19060: PUSH
19061: LD_INT 4
19063: PUSH
19064: LD_INT 5
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: ST_TO_ADDR
19071: GO 19768
19073: LD_INT 6
19075: DOUBLE
19076: EQUAL
19077: IFTRUE 19081
19079: GO 19099
19081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19082: LD_ADDR_VAR 0 3
19086: PUSH
19087: LD_INT 4
19089: PUSH
19090: LD_INT 5
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: ST_TO_ADDR
19097: GO 19768
19099: LD_INT 10
19101: DOUBLE
19102: EQUAL
19103: IFTRUE 19107
19105: GO 19125
19107: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: LD_INT 4
19115: PUSH
19116: LD_INT 5
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: ST_TO_ADDR
19123: GO 19768
19125: LD_INT 22
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19133
19131: GO 19159
19133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19134: LD_ADDR_VAR 0 3
19138: PUSH
19139: LD_INT 11
19141: PUSH
19142: LD_INT 12
19144: PUSH
19145: LD_INT 13
19147: PUSH
19148: LD_INT 14
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: ST_TO_ADDR
19157: GO 19768
19159: LD_INT 23
19161: DOUBLE
19162: EQUAL
19163: IFTRUE 19167
19165: GO 19193
19167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: LD_INT 11
19175: PUSH
19176: LD_INT 12
19178: PUSH
19179: LD_INT 13
19181: PUSH
19182: LD_INT 14
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: ST_TO_ADDR
19191: GO 19768
19193: LD_INT 24
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19227
19201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: LD_INT 11
19209: PUSH
19210: LD_INT 12
19212: PUSH
19213: LD_INT 13
19215: PUSH
19216: LD_INT 14
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: ST_TO_ADDR
19225: GO 19768
19227: LD_INT 30
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19261
19235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_INT 11
19243: PUSH
19244: LD_INT 12
19246: PUSH
19247: LD_INT 13
19249: PUSH
19250: LD_INT 14
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: ST_TO_ADDR
19259: GO 19768
19261: LD_INT 25
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19287
19269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_INT 13
19277: PUSH
19278: LD_INT 14
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: ST_TO_ADDR
19285: GO 19768
19287: LD_INT 27
19289: DOUBLE
19290: EQUAL
19291: IFTRUE 19295
19293: GO 19313
19295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_INT 13
19303: PUSH
19304: LD_INT 14
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: ST_TO_ADDR
19311: GO 19768
19313: LD_INT 92
19315: DOUBLE
19316: EQUAL
19317: IFTRUE 19321
19319: GO 19347
19321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19322: LD_ADDR_VAR 0 3
19326: PUSH
19327: LD_INT 11
19329: PUSH
19330: LD_INT 12
19332: PUSH
19333: LD_INT 13
19335: PUSH
19336: LD_INT 14
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: ST_TO_ADDR
19345: GO 19768
19347: LD_INT 28
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19373
19355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 13
19363: PUSH
19364: LD_INT 14
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: ST_TO_ADDR
19371: GO 19768
19373: LD_INT 29
19375: DOUBLE
19376: EQUAL
19377: IFTRUE 19381
19379: GO 19399
19381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: LD_INT 13
19389: PUSH
19390: LD_INT 14
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: ST_TO_ADDR
19397: GO 19768
19399: LD_INT 31
19401: DOUBLE
19402: EQUAL
19403: IFTRUE 19407
19405: GO 19425
19407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19408: LD_ADDR_VAR 0 3
19412: PUSH
19413: LD_INT 13
19415: PUSH
19416: LD_INT 14
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: ST_TO_ADDR
19423: GO 19768
19425: LD_INT 26
19427: DOUBLE
19428: EQUAL
19429: IFTRUE 19433
19431: GO 19451
19433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19434: LD_ADDR_VAR 0 3
19438: PUSH
19439: LD_INT 13
19441: PUSH
19442: LD_INT 14
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: ST_TO_ADDR
19449: GO 19768
19451: LD_INT 42
19453: DOUBLE
19454: EQUAL
19455: IFTRUE 19459
19457: GO 19485
19459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19460: LD_ADDR_VAR 0 3
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 23
19473: PUSH
19474: LD_INT 24
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: ST_TO_ADDR
19483: GO 19768
19485: LD_INT 43
19487: DOUBLE
19488: EQUAL
19489: IFTRUE 19493
19491: GO 19519
19493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19494: LD_ADDR_VAR 0 3
19498: PUSH
19499: LD_INT 21
19501: PUSH
19502: LD_INT 22
19504: PUSH
19505: LD_INT 23
19507: PUSH
19508: LD_INT 24
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: ST_TO_ADDR
19517: GO 19768
19519: LD_INT 44
19521: DOUBLE
19522: EQUAL
19523: IFTRUE 19527
19525: GO 19553
19527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19528: LD_ADDR_VAR 0 3
19532: PUSH
19533: LD_INT 21
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 23
19541: PUSH
19542: LD_INT 24
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: ST_TO_ADDR
19551: GO 19768
19553: LD_INT 45
19555: DOUBLE
19556: EQUAL
19557: IFTRUE 19561
19559: GO 19587
19561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19562: LD_ADDR_VAR 0 3
19566: PUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 22
19572: PUSH
19573: LD_INT 23
19575: PUSH
19576: LD_INT 24
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: ST_TO_ADDR
19585: GO 19768
19587: LD_INT 49
19589: DOUBLE
19590: EQUAL
19591: IFTRUE 19595
19593: GO 19621
19595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_INT 21
19603: PUSH
19604: LD_INT 22
19606: PUSH
19607: LD_INT 23
19609: PUSH
19610: LD_INT 24
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: ST_TO_ADDR
19619: GO 19768
19621: LD_INT 51
19623: DOUBLE
19624: EQUAL
19625: IFTRUE 19629
19627: GO 19655
19629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19630: LD_ADDR_VAR 0 3
19634: PUSH
19635: LD_INT 21
19637: PUSH
19638: LD_INT 22
19640: PUSH
19641: LD_INT 23
19643: PUSH
19644: LD_INT 24
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: ST_TO_ADDR
19653: GO 19768
19655: LD_INT 52
19657: DOUBLE
19658: EQUAL
19659: IFTRUE 19663
19661: GO 19689
19663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19664: LD_ADDR_VAR 0 3
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 24
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: ST_TO_ADDR
19687: GO 19768
19689: LD_INT 53
19691: DOUBLE
19692: EQUAL
19693: IFTRUE 19697
19695: GO 19715
19697: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19698: LD_ADDR_VAR 0 3
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 24
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: ST_TO_ADDR
19713: GO 19768
19715: LD_INT 46
19717: DOUBLE
19718: EQUAL
19719: IFTRUE 19723
19721: GO 19741
19723: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19724: LD_ADDR_VAR 0 3
19728: PUSH
19729: LD_INT 23
19731: PUSH
19732: LD_INT 24
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: ST_TO_ADDR
19739: GO 19768
19741: LD_INT 47
19743: DOUBLE
19744: EQUAL
19745: IFTRUE 19749
19747: GO 19767
19749: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19750: LD_ADDR_VAR 0 3
19754: PUSH
19755: LD_INT 23
19757: PUSH
19758: LD_INT 24
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: ST_TO_ADDR
19765: GO 19768
19767: POP
// result := ( chassis in result ) ;
19768: LD_ADDR_VAR 0 3
19772: PUSH
19773: LD_VAR 0 1
19777: PUSH
19778: LD_VAR 0 3
19782: IN
19783: ST_TO_ADDR
// end ;
19784: LD_VAR 0 3
19788: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19789: LD_INT 0
19791: PPUSH
19792: PPUSH
19793: PPUSH
19794: PPUSH
19795: PPUSH
19796: PPUSH
19797: PPUSH
// result := array ;
19798: LD_ADDR_VAR 0 5
19802: PUSH
19803: LD_VAR 0 1
19807: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19808: LD_VAR 0 1
19812: NOT
19813: PUSH
19814: LD_VAR 0 2
19818: NOT
19819: OR
19820: PUSH
19821: LD_VAR 0 3
19825: NOT
19826: OR
19827: PUSH
19828: LD_VAR 0 2
19832: PUSH
19833: LD_VAR 0 1
19837: GREATER
19838: OR
19839: PUSH
19840: LD_VAR 0 3
19844: PUSH
19845: LD_VAR 0 1
19849: GREATER
19850: OR
19851: IFFALSE 19855
// exit ;
19853: GO 20151
// if direction then
19855: LD_VAR 0 4
19859: IFFALSE 19923
// begin d := 1 ;
19861: LD_ADDR_VAR 0 9
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if i_from > i_to then
19869: LD_VAR 0 2
19873: PUSH
19874: LD_VAR 0 3
19878: GREATER
19879: IFFALSE 19905
// length := ( array - i_from ) + i_to else
19881: LD_ADDR_VAR 0 11
19885: PUSH
19886: LD_VAR 0 1
19890: PUSH
19891: LD_VAR 0 2
19895: MINUS
19896: PUSH
19897: LD_VAR 0 3
19901: PLUS
19902: ST_TO_ADDR
19903: GO 19921
// length := i_to - i_from ;
19905: LD_ADDR_VAR 0 11
19909: PUSH
19910: LD_VAR 0 3
19914: PUSH
19915: LD_VAR 0 2
19919: MINUS
19920: ST_TO_ADDR
// end else
19921: GO 19984
// begin d := - 1 ;
19923: LD_ADDR_VAR 0 9
19927: PUSH
19928: LD_INT 1
19930: NEG
19931: ST_TO_ADDR
// if i_from > i_to then
19932: LD_VAR 0 2
19936: PUSH
19937: LD_VAR 0 3
19941: GREATER
19942: IFFALSE 19962
// length := i_from - i_to else
19944: LD_ADDR_VAR 0 11
19948: PUSH
19949: LD_VAR 0 2
19953: PUSH
19954: LD_VAR 0 3
19958: MINUS
19959: ST_TO_ADDR
19960: GO 19984
// length := ( array - i_to ) + i_from ;
19962: LD_ADDR_VAR 0 11
19966: PUSH
19967: LD_VAR 0 1
19971: PUSH
19972: LD_VAR 0 3
19976: MINUS
19977: PUSH
19978: LD_VAR 0 2
19982: PLUS
19983: ST_TO_ADDR
// end ; if not length then
19984: LD_VAR 0 11
19988: NOT
19989: IFFALSE 19993
// exit ;
19991: GO 20151
// tmp := array ;
19993: LD_ADDR_VAR 0 10
19997: PUSH
19998: LD_VAR 0 1
20002: ST_TO_ADDR
// for i = 1 to length do
20003: LD_ADDR_VAR 0 6
20007: PUSH
20008: DOUBLE
20009: LD_INT 1
20011: DEC
20012: ST_TO_ADDR
20013: LD_VAR 0 11
20017: PUSH
20018: FOR_TO
20019: IFFALSE 20139
// begin for j = 1 to array do
20021: LD_ADDR_VAR 0 7
20025: PUSH
20026: DOUBLE
20027: LD_INT 1
20029: DEC
20030: ST_TO_ADDR
20031: LD_VAR 0 1
20035: PUSH
20036: FOR_TO
20037: IFFALSE 20125
// begin k := j + d ;
20039: LD_ADDR_VAR 0 8
20043: PUSH
20044: LD_VAR 0 7
20048: PUSH
20049: LD_VAR 0 9
20053: PLUS
20054: ST_TO_ADDR
// if k > array then
20055: LD_VAR 0 8
20059: PUSH
20060: LD_VAR 0 1
20064: GREATER
20065: IFFALSE 20075
// k := 1 ;
20067: LD_ADDR_VAR 0 8
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if not k then
20075: LD_VAR 0 8
20079: NOT
20080: IFFALSE 20092
// k := array ;
20082: LD_ADDR_VAR 0 8
20086: PUSH
20087: LD_VAR 0 1
20091: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20092: LD_ADDR_VAR 0 10
20096: PUSH
20097: LD_VAR 0 10
20101: PPUSH
20102: LD_VAR 0 8
20106: PPUSH
20107: LD_VAR 0 1
20111: PUSH
20112: LD_VAR 0 7
20116: ARRAY
20117: PPUSH
20118: CALL_OW 1
20122: ST_TO_ADDR
// end ;
20123: GO 20036
20125: POP
20126: POP
// array := tmp ;
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_VAR 0 10
20136: ST_TO_ADDR
// end ;
20137: GO 20018
20139: POP
20140: POP
// result := array ;
20141: LD_ADDR_VAR 0 5
20145: PUSH
20146: LD_VAR 0 1
20150: ST_TO_ADDR
// end ;
20151: LD_VAR 0 5
20155: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20156: LD_INT 0
20158: PPUSH
20159: PPUSH
// result := 0 ;
20160: LD_ADDR_VAR 0 3
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// if not array or not value in array then
20168: LD_VAR 0 1
20172: NOT
20173: PUSH
20174: LD_VAR 0 2
20178: PUSH
20179: LD_VAR 0 1
20183: IN
20184: NOT
20185: OR
20186: IFFALSE 20190
// exit ;
20188: GO 20244
// for i = 1 to array do
20190: LD_ADDR_VAR 0 4
20194: PUSH
20195: DOUBLE
20196: LD_INT 1
20198: DEC
20199: ST_TO_ADDR
20200: LD_VAR 0 1
20204: PUSH
20205: FOR_TO
20206: IFFALSE 20242
// if value = array [ i ] then
20208: LD_VAR 0 2
20212: PUSH
20213: LD_VAR 0 1
20217: PUSH
20218: LD_VAR 0 4
20222: ARRAY
20223: EQUAL
20224: IFFALSE 20240
// begin result := i ;
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_VAR 0 4
20235: ST_TO_ADDR
// exit ;
20236: POP
20237: POP
20238: GO 20244
// end ;
20240: GO 20205
20242: POP
20243: POP
// end ;
20244: LD_VAR 0 3
20248: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20249: LD_INT 0
20251: PPUSH
// vc_chassis := chassis ;
20252: LD_ADDR_OWVAR 37
20256: PUSH
20257: LD_VAR 0 1
20261: ST_TO_ADDR
// vc_engine := engine ;
20262: LD_ADDR_OWVAR 39
20266: PUSH
20267: LD_VAR 0 2
20271: ST_TO_ADDR
// vc_control := control ;
20272: LD_ADDR_OWVAR 38
20276: PUSH
20277: LD_VAR 0 3
20281: ST_TO_ADDR
// vc_weapon := weapon ;
20282: LD_ADDR_OWVAR 40
20286: PUSH
20287: LD_VAR 0 4
20291: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20292: LD_ADDR_OWVAR 41
20296: PUSH
20297: LD_VAR 0 5
20301: ST_TO_ADDR
// end ;
20302: LD_VAR 0 6
20306: RET
// export function WantPlant ( unit ) ; var task ; begin
20307: LD_INT 0
20309: PPUSH
20310: PPUSH
// result := false ;
20311: LD_ADDR_VAR 0 2
20315: PUSH
20316: LD_INT 0
20318: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20319: LD_ADDR_VAR 0 3
20323: PUSH
20324: LD_VAR 0 1
20328: PPUSH
20329: CALL_OW 437
20333: ST_TO_ADDR
// if task then
20334: LD_VAR 0 3
20338: IFFALSE 20366
// if task [ 1 ] [ 1 ] = p then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 1
20347: ARRAY
20348: PUSH
20349: LD_INT 1
20351: ARRAY
20352: PUSH
20353: LD_STRING p
20355: EQUAL
20356: IFFALSE 20366
// result := true ;
20358: LD_ADDR_VAR 0 2
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// end ;
20366: LD_VAR 0 2
20370: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20371: LD_INT 0
20373: PPUSH
20374: PPUSH
20375: PPUSH
20376: PPUSH
// if pos < 1 then
20377: LD_VAR 0 2
20381: PUSH
20382: LD_INT 1
20384: LESS
20385: IFFALSE 20389
// exit ;
20387: GO 20692
// if pos = 1 then
20389: LD_VAR 0 2
20393: PUSH
20394: LD_INT 1
20396: EQUAL
20397: IFFALSE 20430
// result := Replace ( arr , pos [ 1 ] , value ) else
20399: LD_ADDR_VAR 0 4
20403: PUSH
20404: LD_VAR 0 1
20408: PPUSH
20409: LD_VAR 0 2
20413: PUSH
20414: LD_INT 1
20416: ARRAY
20417: PPUSH
20418: LD_VAR 0 3
20422: PPUSH
20423: CALL_OW 1
20427: ST_TO_ADDR
20428: GO 20692
// begin tmp := arr ;
20430: LD_ADDR_VAR 0 6
20434: PUSH
20435: LD_VAR 0 1
20439: ST_TO_ADDR
// s_arr := [ tmp ] ;
20440: LD_ADDR_VAR 0 7
20444: PUSH
20445: LD_VAR 0 6
20449: PUSH
20450: EMPTY
20451: LIST
20452: ST_TO_ADDR
// for i = 1 to pos - 1 do
20453: LD_ADDR_VAR 0 5
20457: PUSH
20458: DOUBLE
20459: LD_INT 1
20461: DEC
20462: ST_TO_ADDR
20463: LD_VAR 0 2
20467: PUSH
20468: LD_INT 1
20470: MINUS
20471: PUSH
20472: FOR_TO
20473: IFFALSE 20518
// begin tmp := tmp [ pos [ i ] ] ;
20475: LD_ADDR_VAR 0 6
20479: PUSH
20480: LD_VAR 0 6
20484: PUSH
20485: LD_VAR 0 2
20489: PUSH
20490: LD_VAR 0 5
20494: ARRAY
20495: ARRAY
20496: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20497: LD_ADDR_VAR 0 7
20501: PUSH
20502: LD_VAR 0 7
20506: PUSH
20507: LD_VAR 0 6
20511: PUSH
20512: EMPTY
20513: LIST
20514: ADD
20515: ST_TO_ADDR
// end ;
20516: GO 20472
20518: POP
20519: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20520: LD_ADDR_VAR 0 6
20524: PUSH
20525: LD_VAR 0 6
20529: PPUSH
20530: LD_VAR 0 2
20534: PUSH
20535: LD_VAR 0 2
20539: ARRAY
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: CALL_OW 1
20550: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20551: LD_ADDR_VAR 0 7
20555: PUSH
20556: LD_VAR 0 7
20560: PPUSH
20561: LD_VAR 0 7
20565: PPUSH
20566: LD_VAR 0 6
20570: PPUSH
20571: CALL_OW 1
20575: ST_TO_ADDR
// for i = s_arr downto 2 do
20576: LD_ADDR_VAR 0 5
20580: PUSH
20581: DOUBLE
20582: LD_VAR 0 7
20586: INC
20587: ST_TO_ADDR
20588: LD_INT 2
20590: PUSH
20591: FOR_DOWNTO
20592: IFFALSE 20676
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20594: LD_ADDR_VAR 0 6
20598: PUSH
20599: LD_VAR 0 7
20603: PUSH
20604: LD_VAR 0 5
20608: PUSH
20609: LD_INT 1
20611: MINUS
20612: ARRAY
20613: PPUSH
20614: LD_VAR 0 2
20618: PUSH
20619: LD_VAR 0 5
20623: PUSH
20624: LD_INT 1
20626: MINUS
20627: ARRAY
20628: PPUSH
20629: LD_VAR 0 7
20633: PUSH
20634: LD_VAR 0 5
20638: ARRAY
20639: PPUSH
20640: CALL_OW 1
20644: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20645: LD_ADDR_VAR 0 7
20649: PUSH
20650: LD_VAR 0 7
20654: PPUSH
20655: LD_VAR 0 5
20659: PUSH
20660: LD_INT 1
20662: MINUS
20663: PPUSH
20664: LD_VAR 0 6
20668: PPUSH
20669: CALL_OW 1
20673: ST_TO_ADDR
// end ;
20674: GO 20591
20676: POP
20677: POP
// result := s_arr [ 1 ] ;
20678: LD_ADDR_VAR 0 4
20682: PUSH
20683: LD_VAR 0 7
20687: PUSH
20688: LD_INT 1
20690: ARRAY
20691: ST_TO_ADDR
// end ; end ;
20692: LD_VAR 0 4
20696: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
// if not list then
20701: LD_VAR 0 1
20705: NOT
20706: IFFALSE 20710
// exit ;
20708: GO 20801
// i := list [ pos1 ] ;
20710: LD_ADDR_VAR 0 5
20714: PUSH
20715: LD_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: ARRAY
20725: ST_TO_ADDR
// if not i then
20726: LD_VAR 0 5
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20801
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20735: LD_ADDR_VAR 0 1
20739: PUSH
20740: LD_VAR 0 1
20744: PPUSH
20745: LD_VAR 0 2
20749: PPUSH
20750: LD_VAR 0 1
20754: PUSH
20755: LD_VAR 0 3
20759: ARRAY
20760: PPUSH
20761: CALL_OW 1
20765: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20766: LD_ADDR_VAR 0 1
20770: PUSH
20771: LD_VAR 0 1
20775: PPUSH
20776: LD_VAR 0 3
20780: PPUSH
20781: LD_VAR 0 5
20785: PPUSH
20786: CALL_OW 1
20790: ST_TO_ADDR
// result := list ;
20791: LD_ADDR_VAR 0 4
20795: PUSH
20796: LD_VAR 0 1
20800: ST_TO_ADDR
// end ;
20801: LD_VAR 0 4
20805: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20806: LD_INT 0
20808: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20809: LD_ADDR_VAR 0 5
20813: PUSH
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL_OW 250
20823: PPUSH
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL_OW 251
20833: PPUSH
20834: LD_VAR 0 2
20838: PPUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: LD_VAR 0 4
20848: PPUSH
20849: CALL 20859 0 5
20853: ST_TO_ADDR
// end ;
20854: LD_VAR 0 5
20858: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
// if not list then
20865: LD_VAR 0 3
20869: NOT
20870: IFFALSE 20874
// exit ;
20872: GO 21262
// result := [ ] ;
20874: LD_ADDR_VAR 0 6
20878: PUSH
20879: EMPTY
20880: ST_TO_ADDR
// for i in list do
20881: LD_ADDR_VAR 0 7
20885: PUSH
20886: LD_VAR 0 3
20890: PUSH
20891: FOR_IN
20892: IFFALSE 21094
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20894: LD_ADDR_VAR 0 9
20898: PUSH
20899: LD_VAR 0 7
20903: PPUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: LD_VAR 0 2
20913: PPUSH
20914: CALL_OW 297
20918: ST_TO_ADDR
// if not result then
20919: LD_VAR 0 6
20923: NOT
20924: IFFALSE 20950
// result := [ [ i , tmp ] ] else
20926: LD_ADDR_VAR 0 6
20930: PUSH
20931: LD_VAR 0 7
20935: PUSH
20936: LD_VAR 0 9
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: ST_TO_ADDR
20948: GO 21092
// begin if result [ result ] [ 2 ] < tmp then
20950: LD_VAR 0 6
20954: PUSH
20955: LD_VAR 0 6
20959: ARRAY
20960: PUSH
20961: LD_INT 2
20963: ARRAY
20964: PUSH
20965: LD_VAR 0 9
20969: LESS
20970: IFFALSE 21012
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20972: LD_ADDR_VAR 0 6
20976: PUSH
20977: LD_VAR 0 6
20981: PPUSH
20982: LD_VAR 0 6
20986: PUSH
20987: LD_INT 1
20989: PLUS
20990: PPUSH
20991: LD_VAR 0 7
20995: PUSH
20996: LD_VAR 0 9
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 2
21009: ST_TO_ADDR
21010: GO 21092
// for j = 1 to result do
21012: LD_ADDR_VAR 0 8
21016: PUSH
21017: DOUBLE
21018: LD_INT 1
21020: DEC
21021: ST_TO_ADDR
21022: LD_VAR 0 6
21026: PUSH
21027: FOR_TO
21028: IFFALSE 21090
// begin if tmp < result [ j ] [ 2 ] then
21030: LD_VAR 0 9
21034: PUSH
21035: LD_VAR 0 6
21039: PUSH
21040: LD_VAR 0 8
21044: ARRAY
21045: PUSH
21046: LD_INT 2
21048: ARRAY
21049: LESS
21050: IFFALSE 21088
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21052: LD_ADDR_VAR 0 6
21056: PUSH
21057: LD_VAR 0 6
21061: PPUSH
21062: LD_VAR 0 8
21066: PPUSH
21067: LD_VAR 0 7
21071: PUSH
21072: LD_VAR 0 9
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL_OW 2
21085: ST_TO_ADDR
// break ;
21086: GO 21090
// end ; end ;
21088: GO 21027
21090: POP
21091: POP
// end ; end ;
21092: GO 20891
21094: POP
21095: POP
// if result and not asc then
21096: LD_VAR 0 6
21100: PUSH
21101: LD_VAR 0 4
21105: NOT
21106: AND
21107: IFFALSE 21182
// begin tmp := result ;
21109: LD_ADDR_VAR 0 9
21113: PUSH
21114: LD_VAR 0 6
21118: ST_TO_ADDR
// for i = tmp downto 1 do
21119: LD_ADDR_VAR 0 7
21123: PUSH
21124: DOUBLE
21125: LD_VAR 0 9
21129: INC
21130: ST_TO_ADDR
21131: LD_INT 1
21133: PUSH
21134: FOR_DOWNTO
21135: IFFALSE 21180
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21137: LD_ADDR_VAR 0 6
21141: PUSH
21142: LD_VAR 0 6
21146: PPUSH
21147: LD_VAR 0 9
21151: PUSH
21152: LD_VAR 0 7
21156: MINUS
21157: PUSH
21158: LD_INT 1
21160: PLUS
21161: PPUSH
21162: LD_VAR 0 9
21166: PUSH
21167: LD_VAR 0 7
21171: ARRAY
21172: PPUSH
21173: CALL_OW 1
21177: ST_TO_ADDR
21178: GO 21134
21180: POP
21181: POP
// end ; tmp := [ ] ;
21182: LD_ADDR_VAR 0 9
21186: PUSH
21187: EMPTY
21188: ST_TO_ADDR
// if mode then
21189: LD_VAR 0 5
21193: IFFALSE 21262
// begin for i = 1 to result do
21195: LD_ADDR_VAR 0 7
21199: PUSH
21200: DOUBLE
21201: LD_INT 1
21203: DEC
21204: ST_TO_ADDR
21205: LD_VAR 0 6
21209: PUSH
21210: FOR_TO
21211: IFFALSE 21250
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21213: LD_ADDR_VAR 0 9
21217: PUSH
21218: LD_VAR 0 9
21222: PPUSH
21223: LD_VAR 0 7
21227: PPUSH
21228: LD_VAR 0 6
21232: PUSH
21233: LD_VAR 0 7
21237: ARRAY
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: CALL_OW 1
21247: ST_TO_ADDR
21248: GO 21210
21250: POP
21251: POP
// result := tmp ;
21252: LD_ADDR_VAR 0 6
21256: PUSH
21257: LD_VAR 0 9
21261: ST_TO_ADDR
// end ; end ;
21262: LD_VAR 0 6
21266: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21267: LD_INT 0
21269: PPUSH
21270: PPUSH
21271: PPUSH
21272: PPUSH
21273: PPUSH
21274: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21275: LD_ADDR_VAR 0 5
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: EMPTY
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: ST_TO_ADDR
// if not x or not y then
21297: LD_VAR 0 2
21301: NOT
21302: PUSH
21303: LD_VAR 0 3
21307: NOT
21308: OR
21309: IFFALSE 21313
// exit ;
21311: GO 22963
// if not range then
21313: LD_VAR 0 4
21317: NOT
21318: IFFALSE 21328
// range := 10 ;
21320: LD_ADDR_VAR 0 4
21324: PUSH
21325: LD_INT 10
21327: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21328: LD_ADDR_VAR 0 8
21332: PUSH
21333: LD_INT 81
21335: PUSH
21336: LD_VAR 0 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 92
21347: PUSH
21348: LD_VAR 0 2
21352: PUSH
21353: LD_VAR 0 3
21357: PUSH
21358: LD_VAR 0 4
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 3
21371: PUSH
21372: LD_INT 21
21374: PUSH
21375: LD_INT 3
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: PPUSH
21391: CALL_OW 69
21395: ST_TO_ADDR
// if not tmp then
21396: LD_VAR 0 8
21400: NOT
21401: IFFALSE 21405
// exit ;
21403: GO 22963
// for i in tmp do
21405: LD_ADDR_VAR 0 6
21409: PUSH
21410: LD_VAR 0 8
21414: PUSH
21415: FOR_IN
21416: IFFALSE 22938
// begin points := [ 0 , 0 , 0 ] ;
21418: LD_ADDR_VAR 0 9
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: ST_TO_ADDR
// bpoints := 1 ;
21437: LD_ADDR_VAR 0 10
21441: PUSH
21442: LD_INT 1
21444: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21445: LD_VAR 0 6
21449: PPUSH
21450: CALL_OW 247
21454: PUSH
21455: LD_INT 1
21457: DOUBLE
21458: EQUAL
21459: IFTRUE 21463
21461: GO 22041
21463: POP
// begin if GetClass ( i ) = 1 then
21464: LD_VAR 0 6
21468: PPUSH
21469: CALL_OW 257
21473: PUSH
21474: LD_INT 1
21476: EQUAL
21477: IFFALSE 21498
// points := [ 10 , 5 , 3 ] ;
21479: LD_ADDR_VAR 0 9
21483: PUSH
21484: LD_INT 10
21486: PUSH
21487: LD_INT 5
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21498: LD_VAR 0 6
21502: PPUSH
21503: CALL_OW 257
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: LD_INT 3
21513: PUSH
21514: LD_INT 4
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: IN
21522: IFFALSE 21543
// points := [ 3 , 2 , 1 ] ;
21524: LD_ADDR_VAR 0 9
21528: PUSH
21529: LD_INT 3
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21543: LD_VAR 0 6
21547: PPUSH
21548: CALL_OW 257
21552: PUSH
21553: LD_INT 5
21555: EQUAL
21556: IFFALSE 21577
// points := [ 130 , 5 , 2 ] ;
21558: LD_ADDR_VAR 0 9
21562: PUSH
21563: LD_INT 130
21565: PUSH
21566: LD_INT 5
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21577: LD_VAR 0 6
21581: PPUSH
21582: CALL_OW 257
21586: PUSH
21587: LD_INT 8
21589: EQUAL
21590: IFFALSE 21611
// points := [ 35 , 35 , 30 ] ;
21592: LD_ADDR_VAR 0 9
21596: PUSH
21597: LD_INT 35
21599: PUSH
21600: LD_INT 35
21602: PUSH
21603: LD_INT 30
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21611: LD_VAR 0 6
21615: PPUSH
21616: CALL_OW 257
21620: PUSH
21621: LD_INT 9
21623: EQUAL
21624: IFFALSE 21645
// points := [ 20 , 55 , 40 ] ;
21626: LD_ADDR_VAR 0 9
21630: PUSH
21631: LD_INT 20
21633: PUSH
21634: LD_INT 55
21636: PUSH
21637: LD_INT 40
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21645: LD_VAR 0 6
21649: PPUSH
21650: CALL_OW 257
21654: PUSH
21655: LD_INT 12
21657: PUSH
21658: LD_INT 16
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: IN
21665: IFFALSE 21686
// points := [ 5 , 3 , 2 ] ;
21667: LD_ADDR_VAR 0 9
21671: PUSH
21672: LD_INT 5
21674: PUSH
21675: LD_INT 3
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21686: LD_VAR 0 6
21690: PPUSH
21691: CALL_OW 257
21695: PUSH
21696: LD_INT 17
21698: EQUAL
21699: IFFALSE 21720
// points := [ 100 , 50 , 75 ] ;
21701: LD_ADDR_VAR 0 9
21705: PUSH
21706: LD_INT 100
21708: PUSH
21709: LD_INT 50
21711: PUSH
21712: LD_INT 75
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21720: LD_VAR 0 6
21724: PPUSH
21725: CALL_OW 257
21729: PUSH
21730: LD_INT 15
21732: EQUAL
21733: IFFALSE 21754
// points := [ 10 , 5 , 3 ] ;
21735: LD_ADDR_VAR 0 9
21739: PUSH
21740: LD_INT 10
21742: PUSH
21743: LD_INT 5
21745: PUSH
21746: LD_INT 3
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21754: LD_VAR 0 6
21758: PPUSH
21759: CALL_OW 257
21763: PUSH
21764: LD_INT 14
21766: EQUAL
21767: IFFALSE 21788
// points := [ 10 , 0 , 0 ] ;
21769: LD_ADDR_VAR 0 9
21773: PUSH
21774: LD_INT 10
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21788: LD_VAR 0 6
21792: PPUSH
21793: CALL_OW 257
21797: PUSH
21798: LD_INT 11
21800: EQUAL
21801: IFFALSE 21822
// points := [ 30 , 10 , 5 ] ;
21803: LD_ADDR_VAR 0 9
21807: PUSH
21808: LD_INT 30
21810: PUSH
21811: LD_INT 10
21813: PUSH
21814: LD_INT 5
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21822: LD_VAR 0 1
21826: PPUSH
21827: LD_INT 5
21829: PPUSH
21830: CALL_OW 321
21834: PUSH
21835: LD_INT 2
21837: EQUAL
21838: IFFALSE 21855
// bpoints := bpoints * 1.8 ;
21840: LD_ADDR_VAR 0 10
21844: PUSH
21845: LD_VAR 0 10
21849: PUSH
21850: LD_REAL  1.80000000000000E+0000
21853: MUL
21854: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21855: LD_VAR 0 6
21859: PPUSH
21860: CALL_OW 257
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 2
21870: PUSH
21871: LD_INT 3
21873: PUSH
21874: LD_INT 4
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: IN
21883: PUSH
21884: LD_VAR 0 1
21888: PPUSH
21889: LD_INT 51
21891: PPUSH
21892: CALL_OW 321
21896: PUSH
21897: LD_INT 2
21899: EQUAL
21900: AND
21901: IFFALSE 21918
// bpoints := bpoints * 1.2 ;
21903: LD_ADDR_VAR 0 10
21907: PUSH
21908: LD_VAR 0 10
21912: PUSH
21913: LD_REAL  1.20000000000000E+0000
21916: MUL
21917: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21918: LD_VAR 0 6
21922: PPUSH
21923: CALL_OW 257
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 7
21933: PUSH
21934: LD_INT 9
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: IN
21942: PUSH
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_INT 52
21950: PPUSH
21951: CALL_OW 321
21955: PUSH
21956: LD_INT 2
21958: EQUAL
21959: AND
21960: IFFALSE 21977
// bpoints := bpoints * 1.5 ;
21962: LD_ADDR_VAR 0 10
21966: PUSH
21967: LD_VAR 0 10
21971: PUSH
21972: LD_REAL  1.50000000000000E+0000
21975: MUL
21976: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21977: LD_VAR 0 1
21981: PPUSH
21982: LD_INT 66
21984: PPUSH
21985: CALL_OW 321
21989: PUSH
21990: LD_INT 2
21992: EQUAL
21993: IFFALSE 22010
// bpoints := bpoints * 1.1 ;
21995: LD_ADDR_VAR 0 10
21999: PUSH
22000: LD_VAR 0 10
22004: PUSH
22005: LD_REAL  1.10000000000000E+0000
22008: MUL
22009: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22010: LD_ADDR_VAR 0 10
22014: PUSH
22015: LD_VAR 0 10
22019: PUSH
22020: LD_VAR 0 6
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: CALL_OW 259
22032: PUSH
22033: LD_REAL  1.15000000000000E+0000
22036: MUL
22037: MUL
22038: ST_TO_ADDR
// end ; unit_vehicle :
22039: GO 22867
22041: LD_INT 2
22043: DOUBLE
22044: EQUAL
22045: IFTRUE 22049
22047: GO 22855
22049: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22050: LD_VAR 0 6
22054: PPUSH
22055: CALL_OW 264
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 42
22065: PUSH
22066: LD_INT 24
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: IN
22074: IFFALSE 22095
// points := [ 25 , 5 , 3 ] ;
22076: LD_ADDR_VAR 0 9
22080: PUSH
22081: LD_INT 25
22083: PUSH
22084: LD_INT 5
22086: PUSH
22087: LD_INT 3
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22095: LD_VAR 0 6
22099: PPUSH
22100: CALL_OW 264
22104: PUSH
22105: LD_INT 4
22107: PUSH
22108: LD_INT 43
22110: PUSH
22111: LD_INT 25
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: IN
22119: IFFALSE 22140
// points := [ 40 , 15 , 5 ] ;
22121: LD_ADDR_VAR 0 9
22125: PUSH
22126: LD_INT 40
22128: PUSH
22129: LD_INT 15
22131: PUSH
22132: LD_INT 5
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22140: LD_VAR 0 6
22144: PPUSH
22145: CALL_OW 264
22149: PUSH
22150: LD_INT 3
22152: PUSH
22153: LD_INT 23
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: IN
22160: IFFALSE 22181
// points := [ 7 , 25 , 8 ] ;
22162: LD_ADDR_VAR 0 9
22166: PUSH
22167: LD_INT 7
22169: PUSH
22170: LD_INT 25
22172: PUSH
22173: LD_INT 8
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22181: LD_VAR 0 6
22185: PPUSH
22186: CALL_OW 264
22190: PUSH
22191: LD_INT 5
22193: PUSH
22194: LD_INT 27
22196: PUSH
22197: LD_INT 44
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: IN
22205: IFFALSE 22226
// points := [ 14 , 50 , 16 ] ;
22207: LD_ADDR_VAR 0 9
22211: PUSH
22212: LD_INT 14
22214: PUSH
22215: LD_INT 50
22217: PUSH
22218: LD_INT 16
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22226: LD_VAR 0 6
22230: PPUSH
22231: CALL_OW 264
22235: PUSH
22236: LD_INT 6
22238: PUSH
22239: LD_INT 46
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: IN
22246: IFFALSE 22267
// points := [ 32 , 120 , 70 ] ;
22248: LD_ADDR_VAR 0 9
22252: PUSH
22253: LD_INT 32
22255: PUSH
22256: LD_INT 120
22258: PUSH
22259: LD_INT 70
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22267: LD_VAR 0 6
22271: PPUSH
22272: CALL_OW 264
22276: PUSH
22277: LD_INT 7
22279: PUSH
22280: LD_INT 28
22282: PUSH
22283: LD_INT 45
22285: PUSH
22286: LD_INT 92
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: IN
22295: IFFALSE 22316
// points := [ 35 , 20 , 45 ] ;
22297: LD_ADDR_VAR 0 9
22301: PUSH
22302: LD_INT 35
22304: PUSH
22305: LD_INT 20
22307: PUSH
22308: LD_INT 45
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22316: LD_VAR 0 6
22320: PPUSH
22321: CALL_OW 264
22325: PUSH
22326: LD_INT 47
22328: PUSH
22329: EMPTY
22330: LIST
22331: IN
22332: IFFALSE 22353
// points := [ 67 , 45 , 75 ] ;
22334: LD_ADDR_VAR 0 9
22338: PUSH
22339: LD_INT 67
22341: PUSH
22342: LD_INT 45
22344: PUSH
22345: LD_INT 75
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22353: LD_VAR 0 6
22357: PPUSH
22358: CALL_OW 264
22362: PUSH
22363: LD_INT 26
22365: PUSH
22366: EMPTY
22367: LIST
22368: IN
22369: IFFALSE 22390
// points := [ 120 , 30 , 80 ] ;
22371: LD_ADDR_VAR 0 9
22375: PUSH
22376: LD_INT 120
22378: PUSH
22379: LD_INT 30
22381: PUSH
22382: LD_INT 80
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22390: LD_VAR 0 6
22394: PPUSH
22395: CALL_OW 264
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: EMPTY
22404: LIST
22405: IN
22406: IFFALSE 22427
// points := [ 40 , 1 , 1 ] ;
22408: LD_ADDR_VAR 0 9
22412: PUSH
22413: LD_INT 40
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22427: LD_VAR 0 6
22431: PPUSH
22432: CALL_OW 264
22436: PUSH
22437: LD_INT 29
22439: PUSH
22440: EMPTY
22441: LIST
22442: IN
22443: IFFALSE 22464
// points := [ 70 , 200 , 400 ] ;
22445: LD_ADDR_VAR 0 9
22449: PUSH
22450: LD_INT 70
22452: PUSH
22453: LD_INT 200
22455: PUSH
22456: LD_INT 400
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: LIST
22463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22464: LD_VAR 0 6
22468: PPUSH
22469: CALL_OW 264
22473: PUSH
22474: LD_INT 14
22476: PUSH
22477: LD_INT 53
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: IN
22484: IFFALSE 22505
// points := [ 40 , 10 , 20 ] ;
22486: LD_ADDR_VAR 0 9
22490: PUSH
22491: LD_INT 40
22493: PUSH
22494: LD_INT 10
22496: PUSH
22497: LD_INT 20
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22505: LD_VAR 0 6
22509: PPUSH
22510: CALL_OW 264
22514: PUSH
22515: LD_INT 9
22517: PUSH
22518: EMPTY
22519: LIST
22520: IN
22521: IFFALSE 22542
// points := [ 5 , 70 , 20 ] ;
22523: LD_ADDR_VAR 0 9
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 70
22533: PUSH
22534: LD_INT 20
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22542: LD_VAR 0 6
22546: PPUSH
22547: CALL_OW 264
22551: PUSH
22552: LD_INT 10
22554: PUSH
22555: EMPTY
22556: LIST
22557: IN
22558: IFFALSE 22579
// points := [ 35 , 110 , 70 ] ;
22560: LD_ADDR_VAR 0 9
22564: PUSH
22565: LD_INT 35
22567: PUSH
22568: LD_INT 110
22570: PUSH
22571: LD_INT 70
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22579: LD_VAR 0 6
22583: PPUSH
22584: CALL_OW 265
22588: PUSH
22589: LD_INT 25
22591: EQUAL
22592: IFFALSE 22613
// points := [ 80 , 65 , 100 ] ;
22594: LD_ADDR_VAR 0 9
22598: PUSH
22599: LD_INT 80
22601: PUSH
22602: LD_INT 65
22604: PUSH
22605: LD_INT 100
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22613: LD_VAR 0 6
22617: PPUSH
22618: CALL_OW 263
22622: PUSH
22623: LD_INT 1
22625: EQUAL
22626: IFFALSE 22661
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22628: LD_ADDR_VAR 0 10
22632: PUSH
22633: LD_VAR 0 10
22637: PUSH
22638: LD_VAR 0 6
22642: PPUSH
22643: CALL_OW 311
22647: PPUSH
22648: LD_INT 3
22650: PPUSH
22651: CALL_OW 259
22655: PUSH
22656: LD_INT 4
22658: MUL
22659: MUL
22660: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22661: LD_VAR 0 6
22665: PPUSH
22666: CALL_OW 263
22670: PUSH
22671: LD_INT 2
22673: EQUAL
22674: IFFALSE 22725
// begin j := IsControledBy ( i ) ;
22676: LD_ADDR_VAR 0 7
22680: PUSH
22681: LD_VAR 0 6
22685: PPUSH
22686: CALL_OW 312
22690: ST_TO_ADDR
// if j then
22691: LD_VAR 0 7
22695: IFFALSE 22725
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22697: LD_ADDR_VAR 0 10
22701: PUSH
22702: LD_VAR 0 10
22706: PUSH
22707: LD_VAR 0 7
22711: PPUSH
22712: LD_INT 3
22714: PPUSH
22715: CALL_OW 259
22719: PUSH
22720: LD_INT 3
22722: MUL
22723: MUL
22724: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22725: LD_VAR 0 6
22729: PPUSH
22730: CALL_OW 264
22734: PUSH
22735: LD_INT 5
22737: PUSH
22738: LD_INT 6
22740: PUSH
22741: LD_INT 46
22743: PUSH
22744: LD_INT 44
22746: PUSH
22747: LD_INT 47
22749: PUSH
22750: LD_INT 45
22752: PUSH
22753: LD_INT 28
22755: PUSH
22756: LD_INT 7
22758: PUSH
22759: LD_INT 27
22761: PUSH
22762: LD_INT 29
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: IN
22777: PUSH
22778: LD_VAR 0 1
22782: PPUSH
22783: LD_INT 52
22785: PPUSH
22786: CALL_OW 321
22790: PUSH
22791: LD_INT 2
22793: EQUAL
22794: AND
22795: IFFALSE 22812
// bpoints := bpoints * 1.2 ;
22797: LD_ADDR_VAR 0 10
22801: PUSH
22802: LD_VAR 0 10
22806: PUSH
22807: LD_REAL  1.20000000000000E+0000
22810: MUL
22811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22812: LD_VAR 0 6
22816: PPUSH
22817: CALL_OW 264
22821: PUSH
22822: LD_INT 6
22824: PUSH
22825: LD_INT 46
22827: PUSH
22828: LD_INT 47
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: IN
22836: IFFALSE 22853
// bpoints := bpoints * 1.2 ;
22838: LD_ADDR_VAR 0 10
22842: PUSH
22843: LD_VAR 0 10
22847: PUSH
22848: LD_REAL  1.20000000000000E+0000
22851: MUL
22852: ST_TO_ADDR
// end ; unit_building :
22853: GO 22867
22855: LD_INT 3
22857: DOUBLE
22858: EQUAL
22859: IFTRUE 22863
22861: GO 22866
22863: POP
// ; end ;
22864: GO 22867
22866: POP
// for j = 1 to 3 do
22867: LD_ADDR_VAR 0 7
22871: PUSH
22872: DOUBLE
22873: LD_INT 1
22875: DEC
22876: ST_TO_ADDR
22877: LD_INT 3
22879: PUSH
22880: FOR_TO
22881: IFFALSE 22934
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22883: LD_ADDR_VAR 0 5
22887: PUSH
22888: LD_VAR 0 5
22892: PPUSH
22893: LD_VAR 0 7
22897: PPUSH
22898: LD_VAR 0 5
22902: PUSH
22903: LD_VAR 0 7
22907: ARRAY
22908: PUSH
22909: LD_VAR 0 9
22913: PUSH
22914: LD_VAR 0 7
22918: ARRAY
22919: PUSH
22920: LD_VAR 0 10
22924: MUL
22925: PLUS
22926: PPUSH
22927: CALL_OW 1
22931: ST_TO_ADDR
22932: GO 22880
22934: POP
22935: POP
// end ;
22936: GO 21415
22938: POP
22939: POP
// result := Replace ( result , 4 , tmp ) ;
22940: LD_ADDR_VAR 0 5
22944: PUSH
22945: LD_VAR 0 5
22949: PPUSH
22950: LD_INT 4
22952: PPUSH
22953: LD_VAR 0 8
22957: PPUSH
22958: CALL_OW 1
22962: ST_TO_ADDR
// end ;
22963: LD_VAR 0 5
22967: RET
// export function DangerAtRange ( unit , range ) ; begin
22968: LD_INT 0
22970: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 255
22985: PPUSH
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 250
22995: PPUSH
22996: LD_VAR 0 1
23000: PPUSH
23001: CALL_OW 251
23005: PPUSH
23006: LD_VAR 0 2
23010: PPUSH
23011: CALL 21267 0 4
23015: ST_TO_ADDR
// end ;
23016: LD_VAR 0 3
23020: RET
// export function DangerInArea ( side , area ) ; begin
23021: LD_INT 0
23023: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23024: LD_ADDR_VAR 0 3
23028: PUSH
23029: LD_VAR 0 2
23033: PPUSH
23034: LD_INT 81
23036: PUSH
23037: LD_VAR 0 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PPUSH
23046: CALL_OW 70
23050: ST_TO_ADDR
// end ;
23051: LD_VAR 0 3
23055: RET
// export function IsExtension ( b ) ; begin
23056: LD_INT 0
23058: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_VAR 0 1
23068: PUSH
23069: LD_INT 23
23071: PUSH
23072: LD_INT 20
23074: PUSH
23075: LD_INT 22
23077: PUSH
23078: LD_INT 17
23080: PUSH
23081: LD_INT 24
23083: PUSH
23084: LD_INT 21
23086: PUSH
23087: LD_INT 19
23089: PUSH
23090: LD_INT 16
23092: PUSH
23093: LD_INT 25
23095: PUSH
23096: LD_INT 18
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: IN
23111: ST_TO_ADDR
// end ;
23112: LD_VAR 0 2
23116: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
23121: PPUSH
// result := [ ] ;
23122: LD_ADDR_VAR 0 4
23126: PUSH
23127: EMPTY
23128: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23129: LD_ADDR_VAR 0 5
23133: PUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: LD_INT 21
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PPUSH
23149: CALL_OW 70
23153: ST_TO_ADDR
// if not tmp then
23154: LD_VAR 0 5
23158: NOT
23159: IFFALSE 23163
// exit ;
23161: GO 23227
// if checkLink then
23163: LD_VAR 0 3
23167: IFFALSE 23217
// begin for i in tmp do
23169: LD_ADDR_VAR 0 6
23173: PUSH
23174: LD_VAR 0 5
23178: PUSH
23179: FOR_IN
23180: IFFALSE 23215
// if GetBase ( i ) <> base then
23182: LD_VAR 0 6
23186: PPUSH
23187: CALL_OW 274
23191: PUSH
23192: LD_VAR 0 1
23196: NONEQUAL
23197: IFFALSE 23213
// ComLinkToBase ( base , i ) ;
23199: LD_VAR 0 1
23203: PPUSH
23204: LD_VAR 0 6
23208: PPUSH
23209: CALL_OW 169
23213: GO 23179
23215: POP
23216: POP
// end ; result := tmp ;
23217: LD_ADDR_VAR 0 4
23221: PUSH
23222: LD_VAR 0 5
23226: ST_TO_ADDR
// end ;
23227: LD_VAR 0 4
23231: RET
// export function ComComplete ( units , b ) ; var i ; begin
23232: LD_INT 0
23234: PPUSH
23235: PPUSH
// if not units then
23236: LD_VAR 0 1
23240: NOT
23241: IFFALSE 23245
// exit ;
23243: GO 23335
// for i in units do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: LD_VAR 0 1
23254: PUSH
23255: FOR_IN
23256: IFFALSE 23333
// if BuildingStatus ( b ) = bs_build then
23258: LD_VAR 0 2
23262: PPUSH
23263: CALL_OW 461
23267: PUSH
23268: LD_INT 1
23270: EQUAL
23271: IFFALSE 23331
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23273: LD_VAR 0 4
23277: PPUSH
23278: LD_STRING h
23280: PUSH
23281: LD_VAR 0 2
23285: PPUSH
23286: CALL_OW 250
23290: PUSH
23291: LD_VAR 0 2
23295: PPUSH
23296: CALL_OW 251
23300: PUSH
23301: LD_VAR 0 2
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: PPUSH
23327: CALL_OW 446
23331: GO 23255
23333: POP
23334: POP
// end ;
23335: LD_VAR 0 3
23339: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23340: LD_INT 0
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23348: LD_VAR 0 1
23352: NOT
23353: PUSH
23354: LD_VAR 0 1
23358: PPUSH
23359: CALL_OW 263
23363: PUSH
23364: LD_INT 2
23366: NONEQUAL
23367: OR
23368: IFFALSE 23372
// exit ;
23370: GO 23688
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23372: LD_ADDR_VAR 0 6
23376: PUSH
23377: LD_INT 22
23379: PUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 255
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 2
23396: PUSH
23397: LD_INT 30
23399: PUSH
23400: LD_INT 36
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 34
23409: PUSH
23410: LD_INT 31
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PPUSH
23426: CALL_OW 69
23430: ST_TO_ADDR
// if not tmp then
23431: LD_VAR 0 6
23435: NOT
23436: IFFALSE 23440
// exit ;
23438: GO 23688
// result := [ ] ;
23440: LD_ADDR_VAR 0 2
23444: PUSH
23445: EMPTY
23446: ST_TO_ADDR
// for i in tmp do
23447: LD_ADDR_VAR 0 3
23451: PUSH
23452: LD_VAR 0 6
23456: PUSH
23457: FOR_IN
23458: IFFALSE 23529
// begin t := UnitsInside ( i ) ;
23460: LD_ADDR_VAR 0 4
23464: PUSH
23465: LD_VAR 0 3
23469: PPUSH
23470: CALL_OW 313
23474: ST_TO_ADDR
// if t then
23475: LD_VAR 0 4
23479: IFFALSE 23527
// for j in t do
23481: LD_ADDR_VAR 0 7
23485: PUSH
23486: LD_VAR 0 4
23490: PUSH
23491: FOR_IN
23492: IFFALSE 23525
// result := Replace ( result , result + 1 , j ) ;
23494: LD_ADDR_VAR 0 2
23498: PUSH
23499: LD_VAR 0 2
23503: PPUSH
23504: LD_VAR 0 2
23508: PUSH
23509: LD_INT 1
23511: PLUS
23512: PPUSH
23513: LD_VAR 0 7
23517: PPUSH
23518: CALL_OW 1
23522: ST_TO_ADDR
23523: GO 23491
23525: POP
23526: POP
// end ;
23527: GO 23457
23529: POP
23530: POP
// if not result then
23531: LD_VAR 0 2
23535: NOT
23536: IFFALSE 23540
// exit ;
23538: GO 23688
// mech := result [ 1 ] ;
23540: LD_ADDR_VAR 0 5
23544: PUSH
23545: LD_VAR 0 2
23549: PUSH
23550: LD_INT 1
23552: ARRAY
23553: ST_TO_ADDR
// if result > 1 then
23554: LD_VAR 0 2
23558: PUSH
23559: LD_INT 1
23561: GREATER
23562: IFFALSE 23674
// begin for i = 2 to result do
23564: LD_ADDR_VAR 0 3
23568: PUSH
23569: DOUBLE
23570: LD_INT 2
23572: DEC
23573: ST_TO_ADDR
23574: LD_VAR 0 2
23578: PUSH
23579: FOR_TO
23580: IFFALSE 23672
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23582: LD_ADDR_VAR 0 4
23586: PUSH
23587: LD_VAR 0 2
23591: PUSH
23592: LD_VAR 0 3
23596: ARRAY
23597: PPUSH
23598: LD_INT 3
23600: PPUSH
23601: CALL_OW 259
23605: PUSH
23606: LD_VAR 0 2
23610: PUSH
23611: LD_VAR 0 3
23615: ARRAY
23616: PPUSH
23617: CALL_OW 432
23621: MINUS
23622: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23623: LD_VAR 0 4
23627: PUSH
23628: LD_VAR 0 5
23632: PPUSH
23633: LD_INT 3
23635: PPUSH
23636: CALL_OW 259
23640: PUSH
23641: LD_VAR 0 5
23645: PPUSH
23646: CALL_OW 432
23650: MINUS
23651: GREATEREQUAL
23652: IFFALSE 23670
// mech := result [ i ] ;
23654: LD_ADDR_VAR 0 5
23658: PUSH
23659: LD_VAR 0 2
23663: PUSH
23664: LD_VAR 0 3
23668: ARRAY
23669: ST_TO_ADDR
// end ;
23670: GO 23579
23672: POP
23673: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_VAR 0 5
23683: PPUSH
23684: CALL_OW 135
// end ;
23688: LD_VAR 0 2
23692: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
// result := [ ] ;
23708: LD_ADDR_VAR 0 7
23712: PUSH
23713: EMPTY
23714: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23715: LD_VAR 0 1
23719: PPUSH
23720: CALL_OW 266
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: IN
23735: NOT
23736: IFFALSE 23740
// exit ;
23738: GO 25374
// if name then
23740: LD_VAR 0 3
23744: IFFALSE 23760
// SetBName ( base_dep , name ) ;
23746: LD_VAR 0 1
23750: PPUSH
23751: LD_VAR 0 3
23755: PPUSH
23756: CALL_OW 500
// base := GetBase ( base_dep ) ;
23760: LD_ADDR_VAR 0 15
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 274
23774: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23775: LD_ADDR_VAR 0 16
23779: PUSH
23780: LD_VAR 0 1
23784: PPUSH
23785: CALL_OW 255
23789: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23790: LD_ADDR_VAR 0 17
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 248
23804: ST_TO_ADDR
// if sources then
23805: LD_VAR 0 5
23809: IFFALSE 23856
// for i = 1 to 3 do
23811: LD_ADDR_VAR 0 8
23815: PUSH
23816: DOUBLE
23817: LD_INT 1
23819: DEC
23820: ST_TO_ADDR
23821: LD_INT 3
23823: PUSH
23824: FOR_TO
23825: IFFALSE 23854
// AddResourceType ( base , i , sources [ i ] ) ;
23827: LD_VAR 0 15
23831: PPUSH
23832: LD_VAR 0 8
23836: PPUSH
23837: LD_VAR 0 5
23841: PUSH
23842: LD_VAR 0 8
23846: ARRAY
23847: PPUSH
23848: CALL_OW 276
23852: GO 23824
23854: POP
23855: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23856: LD_ADDR_VAR 0 18
23860: PUSH
23861: LD_VAR 0 15
23865: PPUSH
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_INT 1
23873: PPUSH
23874: CALL 23117 0 3
23878: ST_TO_ADDR
// InitHc ;
23879: CALL_OW 19
// InitUc ;
23883: CALL_OW 18
// uc_side := side ;
23887: LD_ADDR_OWVAR 20
23891: PUSH
23892: LD_VAR 0 16
23896: ST_TO_ADDR
// uc_nation := nation ;
23897: LD_ADDR_OWVAR 21
23901: PUSH
23902: LD_VAR 0 17
23906: ST_TO_ADDR
// if buildings then
23907: LD_VAR 0 18
23911: IFFALSE 25233
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23913: LD_ADDR_VAR 0 19
23917: PUSH
23918: LD_VAR 0 18
23922: PPUSH
23923: LD_INT 2
23925: PUSH
23926: LD_INT 30
23928: PUSH
23929: LD_INT 29
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 30
23938: PUSH
23939: LD_INT 30
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 72
23955: ST_TO_ADDR
// if tmp then
23956: LD_VAR 0 19
23960: IFFALSE 24008
// for i in tmp do
23962: LD_ADDR_VAR 0 8
23966: PUSH
23967: LD_VAR 0 19
23971: PUSH
23972: FOR_IN
23973: IFFALSE 24006
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23975: LD_VAR 0 8
23979: PPUSH
23980: CALL_OW 250
23984: PPUSH
23985: LD_VAR 0 8
23989: PPUSH
23990: CALL_OW 251
23994: PPUSH
23995: LD_VAR 0 16
23999: PPUSH
24000: CALL_OW 441
24004: GO 23972
24006: POP
24007: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24008: LD_VAR 0 18
24012: PPUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 30
24018: PUSH
24019: LD_INT 32
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 30
24028: PUSH
24029: LD_INT 33
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: PPUSH
24041: CALL_OW 72
24045: IFFALSE 24133
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24047: LD_ADDR_VAR 0 8
24051: PUSH
24052: LD_VAR 0 18
24056: PPUSH
24057: LD_INT 2
24059: PUSH
24060: LD_INT 30
24062: PUSH
24063: LD_INT 32
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 30
24072: PUSH
24073: LD_INT 33
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: PPUSH
24085: CALL_OW 72
24089: PUSH
24090: FOR_IN
24091: IFFALSE 24131
// begin if not GetBWeapon ( i ) then
24093: LD_VAR 0 8
24097: PPUSH
24098: CALL_OW 269
24102: NOT
24103: IFFALSE 24129
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24105: LD_VAR 0 8
24109: PPUSH
24110: LD_VAR 0 8
24114: PPUSH
24115: LD_VAR 0 2
24119: PPUSH
24120: CALL 25379 0 2
24124: PPUSH
24125: CALL_OW 431
// end ;
24129: GO 24090
24131: POP
24132: POP
// end ; for i = 1 to personel do
24133: LD_ADDR_VAR 0 8
24137: PUSH
24138: DOUBLE
24139: LD_INT 1
24141: DEC
24142: ST_TO_ADDR
24143: LD_VAR 0 6
24147: PUSH
24148: FOR_TO
24149: IFFALSE 25213
// begin if i > 4 then
24151: LD_VAR 0 8
24155: PUSH
24156: LD_INT 4
24158: GREATER
24159: IFFALSE 24163
// break ;
24161: GO 25213
// case i of 1 :
24163: LD_VAR 0 8
24167: PUSH
24168: LD_INT 1
24170: DOUBLE
24171: EQUAL
24172: IFTRUE 24176
24174: GO 24256
24176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24177: LD_ADDR_VAR 0 12
24181: PUSH
24182: LD_VAR 0 18
24186: PPUSH
24187: LD_INT 22
24189: PUSH
24190: LD_VAR 0 16
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 58
24201: PUSH
24202: EMPTY
24203: LIST
24204: PUSH
24205: LD_INT 2
24207: PUSH
24208: LD_INT 30
24210: PUSH
24211: LD_INT 32
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 30
24220: PUSH
24221: LD_INT 4
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 30
24230: PUSH
24231: LD_INT 5
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 72
24253: ST_TO_ADDR
24254: GO 24478
24256: LD_INT 2
24258: DOUBLE
24259: EQUAL
24260: IFTRUE 24264
24262: GO 24326
24264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24265: LD_ADDR_VAR 0 12
24269: PUSH
24270: LD_VAR 0 18
24274: PPUSH
24275: LD_INT 22
24277: PUSH
24278: LD_VAR 0 16
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 30
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PPUSH
24319: CALL_OW 72
24323: ST_TO_ADDR
24324: GO 24478
24326: LD_INT 3
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24396
24334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24335: LD_ADDR_VAR 0 12
24339: PUSH
24340: LD_VAR 0 18
24344: PPUSH
24345: LD_INT 22
24347: PUSH
24348: LD_VAR 0 16
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 30
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 30
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 72
24393: ST_TO_ADDR
24394: GO 24478
24396: LD_INT 4
24398: DOUBLE
24399: EQUAL
24400: IFTRUE 24404
24402: GO 24477
24404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24405: LD_ADDR_VAR 0 12
24409: PUSH
24410: LD_VAR 0 18
24414: PPUSH
24415: LD_INT 22
24417: PUSH
24418: LD_VAR 0 16
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: LD_INT 30
24432: PUSH
24433: LD_INT 6
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 30
24442: PUSH
24443: LD_INT 7
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 30
24452: PUSH
24453: LD_INT 8
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PPUSH
24470: CALL_OW 72
24474: ST_TO_ADDR
24475: GO 24478
24477: POP
// if i = 1 then
24478: LD_VAR 0 8
24482: PUSH
24483: LD_INT 1
24485: EQUAL
24486: IFFALSE 24597
// begin tmp := [ ] ;
24488: LD_ADDR_VAR 0 19
24492: PUSH
24493: EMPTY
24494: ST_TO_ADDR
// for j in f do
24495: LD_ADDR_VAR 0 9
24499: PUSH
24500: LD_VAR 0 12
24504: PUSH
24505: FOR_IN
24506: IFFALSE 24579
// if GetBType ( j ) = b_bunker then
24508: LD_VAR 0 9
24512: PPUSH
24513: CALL_OW 266
24517: PUSH
24518: LD_INT 32
24520: EQUAL
24521: IFFALSE 24548
// tmp := Insert ( tmp , 1 , j ) else
24523: LD_ADDR_VAR 0 19
24527: PUSH
24528: LD_VAR 0 19
24532: PPUSH
24533: LD_INT 1
24535: PPUSH
24536: LD_VAR 0 9
24540: PPUSH
24541: CALL_OW 2
24545: ST_TO_ADDR
24546: GO 24577
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24548: LD_ADDR_VAR 0 19
24552: PUSH
24553: LD_VAR 0 19
24557: PPUSH
24558: LD_VAR 0 19
24562: PUSH
24563: LD_INT 1
24565: PLUS
24566: PPUSH
24567: LD_VAR 0 9
24571: PPUSH
24572: CALL_OW 2
24576: ST_TO_ADDR
24577: GO 24505
24579: POP
24580: POP
// if tmp then
24581: LD_VAR 0 19
24585: IFFALSE 24597
// f := tmp ;
24587: LD_ADDR_VAR 0 12
24591: PUSH
24592: LD_VAR 0 19
24596: ST_TO_ADDR
// end ; x := personel [ i ] ;
24597: LD_ADDR_VAR 0 13
24601: PUSH
24602: LD_VAR 0 6
24606: PUSH
24607: LD_VAR 0 8
24611: ARRAY
24612: ST_TO_ADDR
// if x = - 1 then
24613: LD_VAR 0 13
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: EQUAL
24622: IFFALSE 24831
// begin for j in f do
24624: LD_ADDR_VAR 0 9
24628: PUSH
24629: LD_VAR 0 12
24633: PUSH
24634: FOR_IN
24635: IFFALSE 24827
// repeat InitHc ;
24637: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24641: LD_VAR 0 9
24645: PPUSH
24646: CALL_OW 266
24650: PUSH
24651: LD_INT 5
24653: EQUAL
24654: IFFALSE 24724
// begin if UnitsInside ( j ) < 3 then
24656: LD_VAR 0 9
24660: PPUSH
24661: CALL_OW 313
24665: PUSH
24666: LD_INT 3
24668: LESS
24669: IFFALSE 24705
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24671: LD_INT 0
24673: PPUSH
24674: LD_INT 5
24676: PUSH
24677: LD_INT 8
24679: PUSH
24680: LD_INT 9
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: PUSH
24688: LD_VAR 0 17
24692: ARRAY
24693: PPUSH
24694: LD_VAR 0 4
24698: PPUSH
24699: CALL_OW 380
24703: GO 24722
// PrepareHuman ( false , i , skill ) ;
24705: LD_INT 0
24707: PPUSH
24708: LD_VAR 0 8
24712: PPUSH
24713: LD_VAR 0 4
24717: PPUSH
24718: CALL_OW 380
// end else
24722: GO 24741
// PrepareHuman ( false , i , skill ) ;
24724: LD_INT 0
24726: PPUSH
24727: LD_VAR 0 8
24731: PPUSH
24732: LD_VAR 0 4
24736: PPUSH
24737: CALL_OW 380
// un := CreateHuman ;
24741: LD_ADDR_VAR 0 14
24745: PUSH
24746: CALL_OW 44
24750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24751: LD_ADDR_VAR 0 7
24755: PUSH
24756: LD_VAR 0 7
24760: PPUSH
24761: LD_INT 1
24763: PPUSH
24764: LD_VAR 0 14
24768: PPUSH
24769: CALL_OW 2
24773: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24774: LD_VAR 0 14
24778: PPUSH
24779: LD_VAR 0 9
24783: PPUSH
24784: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24788: LD_VAR 0 9
24792: PPUSH
24793: CALL_OW 313
24797: PUSH
24798: LD_INT 6
24800: EQUAL
24801: PUSH
24802: LD_VAR 0 9
24806: PPUSH
24807: CALL_OW 266
24811: PUSH
24812: LD_INT 32
24814: PUSH
24815: LD_INT 31
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: IN
24822: OR
24823: IFFALSE 24637
24825: GO 24634
24827: POP
24828: POP
// end else
24829: GO 25211
// for j = 1 to x do
24831: LD_ADDR_VAR 0 9
24835: PUSH
24836: DOUBLE
24837: LD_INT 1
24839: DEC
24840: ST_TO_ADDR
24841: LD_VAR 0 13
24845: PUSH
24846: FOR_TO
24847: IFFALSE 25209
// begin InitHc ;
24849: CALL_OW 19
// if not f then
24853: LD_VAR 0 12
24857: NOT
24858: IFFALSE 24947
// begin PrepareHuman ( false , i , skill ) ;
24860: LD_INT 0
24862: PPUSH
24863: LD_VAR 0 8
24867: PPUSH
24868: LD_VAR 0 4
24872: PPUSH
24873: CALL_OW 380
// un := CreateHuman ;
24877: LD_ADDR_VAR 0 14
24881: PUSH
24882: CALL_OW 44
24886: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24887: LD_ADDR_VAR 0 7
24891: PUSH
24892: LD_VAR 0 7
24896: PPUSH
24897: LD_INT 1
24899: PPUSH
24900: LD_VAR 0 14
24904: PPUSH
24905: CALL_OW 2
24909: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24910: LD_VAR 0 14
24914: PPUSH
24915: LD_VAR 0 1
24919: PPUSH
24920: CALL_OW 250
24924: PPUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 251
24934: PPUSH
24935: LD_INT 10
24937: PPUSH
24938: LD_INT 0
24940: PPUSH
24941: CALL_OW 50
// continue ;
24945: GO 24846
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24947: LD_VAR 0 12
24951: PUSH
24952: LD_INT 1
24954: ARRAY
24955: PPUSH
24956: CALL_OW 313
24960: PUSH
24961: LD_VAR 0 12
24965: PUSH
24966: LD_INT 1
24968: ARRAY
24969: PPUSH
24970: CALL_OW 266
24974: PUSH
24975: LD_INT 32
24977: PUSH
24978: LD_INT 31
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: IN
24985: AND
24986: PUSH
24987: LD_VAR 0 12
24991: PUSH
24992: LD_INT 1
24994: ARRAY
24995: PPUSH
24996: CALL_OW 313
25000: PUSH
25001: LD_INT 6
25003: EQUAL
25004: OR
25005: IFFALSE 25025
// f := Delete ( f , 1 ) ;
25007: LD_ADDR_VAR 0 12
25011: PUSH
25012: LD_VAR 0 12
25016: PPUSH
25017: LD_INT 1
25019: PPUSH
25020: CALL_OW 3
25024: ST_TO_ADDR
// if not f then
25025: LD_VAR 0 12
25029: NOT
25030: IFFALSE 25048
// begin x := x + 2 ;
25032: LD_ADDR_VAR 0 13
25036: PUSH
25037: LD_VAR 0 13
25041: PUSH
25042: LD_INT 2
25044: PLUS
25045: ST_TO_ADDR
// continue ;
25046: GO 24846
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25048: LD_VAR 0 12
25052: PUSH
25053: LD_INT 1
25055: ARRAY
25056: PPUSH
25057: CALL_OW 266
25061: PUSH
25062: LD_INT 5
25064: EQUAL
25065: IFFALSE 25139
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25067: LD_VAR 0 12
25071: PUSH
25072: LD_INT 1
25074: ARRAY
25075: PPUSH
25076: CALL_OW 313
25080: PUSH
25081: LD_INT 3
25083: LESS
25084: IFFALSE 25120
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25086: LD_INT 0
25088: PPUSH
25089: LD_INT 5
25091: PUSH
25092: LD_INT 8
25094: PUSH
25095: LD_INT 9
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: LD_VAR 0 17
25107: ARRAY
25108: PPUSH
25109: LD_VAR 0 4
25113: PPUSH
25114: CALL_OW 380
25118: GO 25137
// PrepareHuman ( false , i , skill ) ;
25120: LD_INT 0
25122: PPUSH
25123: LD_VAR 0 8
25127: PPUSH
25128: LD_VAR 0 4
25132: PPUSH
25133: CALL_OW 380
// end else
25137: GO 25156
// PrepareHuman ( false , i , skill ) ;
25139: LD_INT 0
25141: PPUSH
25142: LD_VAR 0 8
25146: PPUSH
25147: LD_VAR 0 4
25151: PPUSH
25152: CALL_OW 380
// un := CreateHuman ;
25156: LD_ADDR_VAR 0 14
25160: PUSH
25161: CALL_OW 44
25165: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25166: LD_ADDR_VAR 0 7
25170: PUSH
25171: LD_VAR 0 7
25175: PPUSH
25176: LD_INT 1
25178: PPUSH
25179: LD_VAR 0 14
25183: PPUSH
25184: CALL_OW 2
25188: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25189: LD_VAR 0 14
25193: PPUSH
25194: LD_VAR 0 12
25198: PUSH
25199: LD_INT 1
25201: ARRAY
25202: PPUSH
25203: CALL_OW 52
// end ;
25207: GO 24846
25209: POP
25210: POP
// end ;
25211: GO 24148
25213: POP
25214: POP
// result := result ^ buildings ;
25215: LD_ADDR_VAR 0 7
25219: PUSH
25220: LD_VAR 0 7
25224: PUSH
25225: LD_VAR 0 18
25229: ADD
25230: ST_TO_ADDR
// end else
25231: GO 25374
// begin for i = 1 to personel do
25233: LD_ADDR_VAR 0 8
25237: PUSH
25238: DOUBLE
25239: LD_INT 1
25241: DEC
25242: ST_TO_ADDR
25243: LD_VAR 0 6
25247: PUSH
25248: FOR_TO
25249: IFFALSE 25372
// begin if i > 4 then
25251: LD_VAR 0 8
25255: PUSH
25256: LD_INT 4
25258: GREATER
25259: IFFALSE 25263
// break ;
25261: GO 25372
// x := personel [ i ] ;
25263: LD_ADDR_VAR 0 13
25267: PUSH
25268: LD_VAR 0 6
25272: PUSH
25273: LD_VAR 0 8
25277: ARRAY
25278: ST_TO_ADDR
// if x = - 1 then
25279: LD_VAR 0 13
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: EQUAL
25288: IFFALSE 25292
// continue ;
25290: GO 25248
// PrepareHuman ( false , i , skill ) ;
25292: LD_INT 0
25294: PPUSH
25295: LD_VAR 0 8
25299: PPUSH
25300: LD_VAR 0 4
25304: PPUSH
25305: CALL_OW 380
// un := CreateHuman ;
25309: LD_ADDR_VAR 0 14
25313: PUSH
25314: CALL_OW 44
25318: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25319: LD_VAR 0 14
25323: PPUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: CALL_OW 250
25333: PPUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 251
25343: PPUSH
25344: LD_INT 10
25346: PPUSH
25347: LD_INT 0
25349: PPUSH
25350: CALL_OW 50
// result := result ^ un ;
25354: LD_ADDR_VAR 0 7
25358: PUSH
25359: LD_VAR 0 7
25363: PUSH
25364: LD_VAR 0 14
25368: ADD
25369: ST_TO_ADDR
// end ;
25370: GO 25248
25372: POP
25373: POP
// end ; end ;
25374: LD_VAR 0 7
25378: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25379: LD_INT 0
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
// result := false ;
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 0
25404: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25405: LD_VAR 0 1
25409: NOT
25410: PUSH
25411: LD_VAR 0 1
25415: PPUSH
25416: CALL_OW 266
25420: PUSH
25421: LD_INT 32
25423: PUSH
25424: LD_INT 33
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: IN
25431: NOT
25432: OR
25433: IFFALSE 25437
// exit ;
25435: GO 26546
// nat := GetNation ( tower ) ;
25437: LD_ADDR_VAR 0 12
25441: PUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 248
25451: ST_TO_ADDR
// side := GetSide ( tower ) ;
25452: LD_ADDR_VAR 0 16
25456: PUSH
25457: LD_VAR 0 1
25461: PPUSH
25462: CALL_OW 255
25466: ST_TO_ADDR
// x := GetX ( tower ) ;
25467: LD_ADDR_VAR 0 10
25471: PUSH
25472: LD_VAR 0 1
25476: PPUSH
25477: CALL_OW 250
25481: ST_TO_ADDR
// y := GetY ( tower ) ;
25482: LD_ADDR_VAR 0 11
25486: PUSH
25487: LD_VAR 0 1
25491: PPUSH
25492: CALL_OW 251
25496: ST_TO_ADDR
// if not x or not y then
25497: LD_VAR 0 10
25501: NOT
25502: PUSH
25503: LD_VAR 0 11
25507: NOT
25508: OR
25509: IFFALSE 25513
// exit ;
25511: GO 26546
// weapon := 0 ;
25513: LD_ADDR_VAR 0 18
25517: PUSH
25518: LD_INT 0
25520: ST_TO_ADDR
// fac_list := [ ] ;
25521: LD_ADDR_VAR 0 17
25525: PUSH
25526: EMPTY
25527: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25528: LD_ADDR_VAR 0 6
25532: PUSH
25533: LD_VAR 0 1
25537: PPUSH
25538: CALL_OW 274
25542: PPUSH
25543: LD_VAR 0 2
25547: PPUSH
25548: LD_INT 0
25550: PPUSH
25551: CALL 23117 0 3
25555: PPUSH
25556: LD_INT 30
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PPUSH
25566: CALL_OW 72
25570: ST_TO_ADDR
// if not factories then
25571: LD_VAR 0 6
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 26546
// for i in factories do
25580: LD_ADDR_VAR 0 8
25584: PUSH
25585: LD_VAR 0 6
25589: PUSH
25590: FOR_IN
25591: IFFALSE 25616
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25593: LD_ADDR_VAR 0 17
25597: PUSH
25598: LD_VAR 0 17
25602: PUSH
25603: LD_VAR 0 8
25607: PPUSH
25608: CALL_OW 478
25612: UNION
25613: ST_TO_ADDR
25614: GO 25590
25616: POP
25617: POP
// if not fac_list then
25618: LD_VAR 0 17
25622: NOT
25623: IFFALSE 25627
// exit ;
25625: GO 26546
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25627: LD_ADDR_VAR 0 5
25631: PUSH
25632: LD_INT 4
25634: PUSH
25635: LD_INT 5
25637: PUSH
25638: LD_INT 9
25640: PUSH
25641: LD_INT 10
25643: PUSH
25644: LD_INT 6
25646: PUSH
25647: LD_INT 7
25649: PUSH
25650: LD_INT 11
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 27
25664: PUSH
25665: LD_INT 28
25667: PUSH
25668: LD_INT 26
25670: PUSH
25671: LD_INT 30
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 43
25682: PUSH
25683: LD_INT 44
25685: PUSH
25686: LD_INT 46
25688: PUSH
25689: LD_INT 45
25691: PUSH
25692: LD_INT 47
25694: PUSH
25695: LD_INT 49
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: PUSH
25711: LD_VAR 0 12
25715: ARRAY
25716: ST_TO_ADDR
// list := list isect fac_list ;
25717: LD_ADDR_VAR 0 5
25721: PUSH
25722: LD_VAR 0 5
25726: PUSH
25727: LD_VAR 0 17
25731: ISECT
25732: ST_TO_ADDR
// if not list then
25733: LD_VAR 0 5
25737: NOT
25738: IFFALSE 25742
// exit ;
25740: GO 26546
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25742: LD_VAR 0 12
25746: PUSH
25747: LD_INT 3
25749: EQUAL
25750: PUSH
25751: LD_INT 49
25753: PUSH
25754: LD_VAR 0 5
25758: IN
25759: AND
25760: PUSH
25761: LD_INT 31
25763: PPUSH
25764: LD_VAR 0 16
25768: PPUSH
25769: CALL_OW 321
25773: PUSH
25774: LD_INT 2
25776: EQUAL
25777: AND
25778: IFFALSE 25838
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25780: LD_INT 22
25782: PUSH
25783: LD_VAR 0 16
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 35
25794: PUSH
25795: LD_INT 49
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 91
25804: PUSH
25805: LD_VAR 0 1
25809: PUSH
25810: LD_INT 10
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: PPUSH
25823: CALL_OW 69
25827: NOT
25828: IFFALSE 25838
// weapon := ru_time_lapser ;
25830: LD_ADDR_VAR 0 18
25834: PUSH
25835: LD_INT 49
25837: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25838: LD_VAR 0 12
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: IN
25853: PUSH
25854: LD_INT 11
25856: PUSH
25857: LD_VAR 0 5
25861: IN
25862: PUSH
25863: LD_INT 30
25865: PUSH
25866: LD_VAR 0 5
25870: IN
25871: OR
25872: AND
25873: PUSH
25874: LD_INT 6
25876: PPUSH
25877: LD_VAR 0 16
25881: PPUSH
25882: CALL_OW 321
25886: PUSH
25887: LD_INT 2
25889: EQUAL
25890: AND
25891: IFFALSE 26056
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25893: LD_INT 22
25895: PUSH
25896: LD_VAR 0 16
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 35
25910: PUSH
25911: LD_INT 11
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 35
25920: PUSH
25921: LD_INT 30
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 91
25935: PUSH
25936: LD_VAR 0 1
25940: PUSH
25941: LD_INT 18
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: NOT
25959: PUSH
25960: LD_INT 22
25962: PUSH
25963: LD_VAR 0 16
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 30
25977: PUSH
25978: LD_INT 32
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 30
25987: PUSH
25988: LD_INT 33
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 91
26002: PUSH
26003: LD_VAR 0 1
26007: PUSH
26008: LD_INT 12
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: LIST
26020: PUSH
26021: EMPTY
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: PUSH
26029: LD_INT 2
26031: GREATER
26032: AND
26033: IFFALSE 26056
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26035: LD_ADDR_VAR 0 18
26039: PUSH
26040: LD_INT 11
26042: PUSH
26043: LD_INT 30
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_VAR 0 12
26054: ARRAY
26055: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26056: LD_VAR 0 18
26060: NOT
26061: PUSH
26062: LD_INT 40
26064: PPUSH
26065: LD_VAR 0 16
26069: PPUSH
26070: CALL_OW 321
26074: PUSH
26075: LD_INT 2
26077: EQUAL
26078: AND
26079: PUSH
26080: LD_INT 7
26082: PUSH
26083: LD_VAR 0 5
26087: IN
26088: PUSH
26089: LD_INT 28
26091: PUSH
26092: LD_VAR 0 5
26096: IN
26097: OR
26098: PUSH
26099: LD_INT 45
26101: PUSH
26102: LD_VAR 0 5
26106: IN
26107: OR
26108: AND
26109: IFFALSE 26363
// begin hex := GetHexInfo ( x , y ) ;
26111: LD_ADDR_VAR 0 4
26115: PUSH
26116: LD_VAR 0 10
26120: PPUSH
26121: LD_VAR 0 11
26125: PPUSH
26126: CALL_OW 546
26130: ST_TO_ADDR
// if hex [ 1 ] then
26131: LD_VAR 0 4
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: IFFALSE 26143
// exit ;
26141: GO 26546
// height := hex [ 2 ] ;
26143: LD_ADDR_VAR 0 15
26147: PUSH
26148: LD_VAR 0 4
26152: PUSH
26153: LD_INT 2
26155: ARRAY
26156: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26157: LD_ADDR_VAR 0 14
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 5
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// for i in tmp do
26180: LD_ADDR_VAR 0 8
26184: PUSH
26185: LD_VAR 0 14
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26361
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26193: LD_ADDR_VAR 0 9
26197: PUSH
26198: LD_VAR 0 10
26202: PPUSH
26203: LD_VAR 0 8
26207: PPUSH
26208: LD_INT 5
26210: PPUSH
26211: CALL_OW 272
26215: PUSH
26216: LD_VAR 0 11
26220: PPUSH
26221: LD_VAR 0 8
26225: PPUSH
26226: LD_INT 5
26228: PPUSH
26229: CALL_OW 273
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26238: LD_VAR 0 9
26242: PUSH
26243: LD_INT 1
26245: ARRAY
26246: PPUSH
26247: LD_VAR 0 9
26251: PUSH
26252: LD_INT 2
26254: ARRAY
26255: PPUSH
26256: CALL_OW 488
26260: IFFALSE 26359
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26262: LD_ADDR_VAR 0 4
26266: PUSH
26267: LD_VAR 0 9
26271: PUSH
26272: LD_INT 1
26274: ARRAY
26275: PPUSH
26276: LD_VAR 0 9
26280: PUSH
26281: LD_INT 2
26283: ARRAY
26284: PPUSH
26285: CALL_OW 546
26289: ST_TO_ADDR
// if hex [ 1 ] then
26290: LD_VAR 0 4
26294: PUSH
26295: LD_INT 1
26297: ARRAY
26298: IFFALSE 26302
// continue ;
26300: GO 26190
// h := hex [ 2 ] ;
26302: LD_ADDR_VAR 0 13
26306: PUSH
26307: LD_VAR 0 4
26311: PUSH
26312: LD_INT 2
26314: ARRAY
26315: ST_TO_ADDR
// if h + 7 < height then
26316: LD_VAR 0 13
26320: PUSH
26321: LD_INT 7
26323: PLUS
26324: PUSH
26325: LD_VAR 0 15
26329: LESS
26330: IFFALSE 26359
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26332: LD_ADDR_VAR 0 18
26336: PUSH
26337: LD_INT 7
26339: PUSH
26340: LD_INT 28
26342: PUSH
26343: LD_INT 45
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: PUSH
26351: LD_VAR 0 12
26355: ARRAY
26356: ST_TO_ADDR
// break ;
26357: GO 26361
// end ; end ; end ;
26359: GO 26190
26361: POP
26362: POP
// end ; if not weapon then
26363: LD_VAR 0 18
26367: NOT
26368: IFFALSE 26428
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26370: LD_ADDR_VAR 0 5
26374: PUSH
26375: LD_VAR 0 5
26379: PUSH
26380: LD_INT 11
26382: PUSH
26383: LD_INT 30
26385: PUSH
26386: LD_INT 49
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: LIST
26393: DIFF
26394: ST_TO_ADDR
// if not list then
26395: LD_VAR 0 5
26399: NOT
26400: IFFALSE 26404
// exit ;
26402: GO 26546
// weapon := list [ rand ( 1 , list ) ] ;
26404: LD_ADDR_VAR 0 18
26408: PUSH
26409: LD_VAR 0 5
26413: PUSH
26414: LD_INT 1
26416: PPUSH
26417: LD_VAR 0 5
26421: PPUSH
26422: CALL_OW 12
26426: ARRAY
26427: ST_TO_ADDR
// end ; if weapon then
26428: LD_VAR 0 18
26432: IFFALSE 26546
// begin tmp := CostOfWeapon ( weapon ) ;
26434: LD_ADDR_VAR 0 14
26438: PUSH
26439: LD_VAR 0 18
26443: PPUSH
26444: CALL_OW 451
26448: ST_TO_ADDR
// j := GetBase ( tower ) ;
26449: LD_ADDR_VAR 0 9
26453: PUSH
26454: LD_VAR 0 1
26458: PPUSH
26459: CALL_OW 274
26463: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26464: LD_VAR 0 9
26468: PPUSH
26469: LD_INT 1
26471: PPUSH
26472: CALL_OW 275
26476: PUSH
26477: LD_VAR 0 14
26481: PUSH
26482: LD_INT 1
26484: ARRAY
26485: GREATEREQUAL
26486: PUSH
26487: LD_VAR 0 9
26491: PPUSH
26492: LD_INT 2
26494: PPUSH
26495: CALL_OW 275
26499: PUSH
26500: LD_VAR 0 14
26504: PUSH
26505: LD_INT 2
26507: ARRAY
26508: GREATEREQUAL
26509: AND
26510: PUSH
26511: LD_VAR 0 9
26515: PPUSH
26516: LD_INT 3
26518: PPUSH
26519: CALL_OW 275
26523: PUSH
26524: LD_VAR 0 14
26528: PUSH
26529: LD_INT 3
26531: ARRAY
26532: GREATEREQUAL
26533: AND
26534: IFFALSE 26546
// result := weapon ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_VAR 0 18
26545: ST_TO_ADDR
// end ; end ;
26546: LD_VAR 0 3
26550: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26551: LD_INT 0
26553: PPUSH
26554: PPUSH
// result := true ;
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_INT 1
26562: ST_TO_ADDR
// if array1 = array2 then
26563: LD_VAR 0 1
26567: PUSH
26568: LD_VAR 0 2
26572: EQUAL
26573: IFFALSE 26633
// begin for i = 1 to array1 do
26575: LD_ADDR_VAR 0 4
26579: PUSH
26580: DOUBLE
26581: LD_INT 1
26583: DEC
26584: ST_TO_ADDR
26585: LD_VAR 0 1
26589: PUSH
26590: FOR_TO
26591: IFFALSE 26629
// if array1 [ i ] <> array2 [ i ] then
26593: LD_VAR 0 1
26597: PUSH
26598: LD_VAR 0 4
26602: ARRAY
26603: PUSH
26604: LD_VAR 0 2
26608: PUSH
26609: LD_VAR 0 4
26613: ARRAY
26614: NONEQUAL
26615: IFFALSE 26627
// begin result := false ;
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 0
26624: ST_TO_ADDR
// break ;
26625: GO 26629
// end ;
26627: GO 26590
26629: POP
26630: POP
// end else
26631: GO 26641
// result := false ;
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_INT 0
26640: ST_TO_ADDR
// end ;
26641: LD_VAR 0 3
26645: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26646: LD_INT 0
26648: PPUSH
26649: PPUSH
// if not array1 or not array2 then
26650: LD_VAR 0 1
26654: NOT
26655: PUSH
26656: LD_VAR 0 2
26660: NOT
26661: OR
26662: IFFALSE 26666
// exit ;
26664: GO 26730
// result := true ;
26666: LD_ADDR_VAR 0 3
26670: PUSH
26671: LD_INT 1
26673: ST_TO_ADDR
// for i = 1 to array1 do
26674: LD_ADDR_VAR 0 4
26678: PUSH
26679: DOUBLE
26680: LD_INT 1
26682: DEC
26683: ST_TO_ADDR
26684: LD_VAR 0 1
26688: PUSH
26689: FOR_TO
26690: IFFALSE 26728
// if array1 [ i ] <> array2 [ i ] then
26692: LD_VAR 0 1
26696: PUSH
26697: LD_VAR 0 4
26701: ARRAY
26702: PUSH
26703: LD_VAR 0 2
26707: PUSH
26708: LD_VAR 0 4
26712: ARRAY
26713: NONEQUAL
26714: IFFALSE 26726
// begin result := false ;
26716: LD_ADDR_VAR 0 3
26720: PUSH
26721: LD_INT 0
26723: ST_TO_ADDR
// break ;
26724: GO 26728
// end ;
26726: GO 26689
26728: POP
26729: POP
// end ;
26730: LD_VAR 0 3
26734: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26735: LD_INT 0
26737: PPUSH
26738: PPUSH
26739: PPUSH
// pom := GetBase ( fac ) ;
26740: LD_ADDR_VAR 0 5
26744: PUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 274
26754: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26755: LD_ADDR_VAR 0 4
26759: PUSH
26760: LD_VAR 0 2
26764: PUSH
26765: LD_INT 1
26767: ARRAY
26768: PPUSH
26769: LD_VAR 0 2
26773: PUSH
26774: LD_INT 2
26776: ARRAY
26777: PPUSH
26778: LD_VAR 0 2
26782: PUSH
26783: LD_INT 3
26785: ARRAY
26786: PPUSH
26787: LD_VAR 0 2
26791: PUSH
26792: LD_INT 4
26794: ARRAY
26795: PPUSH
26796: CALL_OW 449
26800: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26801: LD_ADDR_VAR 0 3
26805: PUSH
26806: LD_VAR 0 5
26810: PPUSH
26811: LD_INT 1
26813: PPUSH
26814: CALL_OW 275
26818: PUSH
26819: LD_VAR 0 4
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: GREATEREQUAL
26828: PUSH
26829: LD_VAR 0 5
26833: PPUSH
26834: LD_INT 2
26836: PPUSH
26837: CALL_OW 275
26841: PUSH
26842: LD_VAR 0 4
26846: PUSH
26847: LD_INT 2
26849: ARRAY
26850: GREATEREQUAL
26851: AND
26852: PUSH
26853: LD_VAR 0 5
26857: PPUSH
26858: LD_INT 3
26860: PPUSH
26861: CALL_OW 275
26865: PUSH
26866: LD_VAR 0 4
26870: PUSH
26871: LD_INT 3
26873: ARRAY
26874: GREATEREQUAL
26875: AND
26876: ST_TO_ADDR
// end ;
26877: LD_VAR 0 3
26881: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26882: LD_INT 0
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
// pom := GetBase ( building ) ;
26888: LD_ADDR_VAR 0 3
26892: PUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 274
26902: ST_TO_ADDR
// if not pom then
26903: LD_VAR 0 3
26907: NOT
26908: IFFALSE 26912
// exit ;
26910: GO 27082
// btype := GetBType ( building ) ;
26912: LD_ADDR_VAR 0 5
26916: PUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL_OW 266
26926: ST_TO_ADDR
// if btype = b_armoury then
26927: LD_VAR 0 5
26931: PUSH
26932: LD_INT 4
26934: EQUAL
26935: IFFALSE 26945
// btype := b_barracks ;
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_INT 5
26944: ST_TO_ADDR
// if btype = b_depot then
26945: LD_VAR 0 5
26949: PUSH
26950: LD_INT 0
26952: EQUAL
26953: IFFALSE 26963
// btype := b_warehouse ;
26955: LD_ADDR_VAR 0 5
26959: PUSH
26960: LD_INT 1
26962: ST_TO_ADDR
// if btype = b_workshop then
26963: LD_VAR 0 5
26967: PUSH
26968: LD_INT 2
26970: EQUAL
26971: IFFALSE 26981
// btype := b_factory ;
26973: LD_ADDR_VAR 0 5
26977: PUSH
26978: LD_INT 3
26980: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26981: LD_ADDR_VAR 0 4
26985: PUSH
26986: LD_VAR 0 5
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 248
27000: PPUSH
27001: CALL_OW 450
27005: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27006: LD_ADDR_VAR 0 2
27010: PUSH
27011: LD_VAR 0 3
27015: PPUSH
27016: LD_INT 1
27018: PPUSH
27019: CALL_OW 275
27023: PUSH
27024: LD_VAR 0 4
27028: PUSH
27029: LD_INT 1
27031: ARRAY
27032: GREATEREQUAL
27033: PUSH
27034: LD_VAR 0 3
27038: PPUSH
27039: LD_INT 2
27041: PPUSH
27042: CALL_OW 275
27046: PUSH
27047: LD_VAR 0 4
27051: PUSH
27052: LD_INT 2
27054: ARRAY
27055: GREATEREQUAL
27056: AND
27057: PUSH
27058: LD_VAR 0 3
27062: PPUSH
27063: LD_INT 3
27065: PPUSH
27066: CALL_OW 275
27070: PUSH
27071: LD_VAR 0 4
27075: PUSH
27076: LD_INT 3
27078: ARRAY
27079: GREATEREQUAL
27080: AND
27081: ST_TO_ADDR
// end ;
27082: LD_VAR 0 2
27086: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27087: LD_INT 0
27089: PPUSH
27090: PPUSH
27091: PPUSH
// pom := GetBase ( building ) ;
27092: LD_ADDR_VAR 0 4
27096: PUSH
27097: LD_VAR 0 1
27101: PPUSH
27102: CALL_OW 274
27106: ST_TO_ADDR
// if not pom then
27107: LD_VAR 0 4
27111: NOT
27112: IFFALSE 27116
// exit ;
27114: GO 27217
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27116: LD_ADDR_VAR 0 5
27120: PUSH
27121: LD_VAR 0 2
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 248
27135: PPUSH
27136: CALL_OW 450
27140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27141: LD_ADDR_VAR 0 3
27145: PUSH
27146: LD_VAR 0 4
27150: PPUSH
27151: LD_INT 1
27153: PPUSH
27154: CALL_OW 275
27158: PUSH
27159: LD_VAR 0 5
27163: PUSH
27164: LD_INT 1
27166: ARRAY
27167: GREATEREQUAL
27168: PUSH
27169: LD_VAR 0 4
27173: PPUSH
27174: LD_INT 2
27176: PPUSH
27177: CALL_OW 275
27181: PUSH
27182: LD_VAR 0 5
27186: PUSH
27187: LD_INT 2
27189: ARRAY
27190: GREATEREQUAL
27191: AND
27192: PUSH
27193: LD_VAR 0 4
27197: PPUSH
27198: LD_INT 3
27200: PPUSH
27201: CALL_OW 275
27205: PUSH
27206: LD_VAR 0 5
27210: PUSH
27211: LD_INT 3
27213: ARRAY
27214: GREATEREQUAL
27215: AND
27216: ST_TO_ADDR
// end ;
27217: LD_VAR 0 3
27221: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27222: LD_INT 0
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
// result := false ;
27235: LD_ADDR_VAR 0 8
27239: PUSH
27240: LD_INT 0
27242: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27243: LD_VAR 0 5
27247: NOT
27248: PUSH
27249: LD_VAR 0 1
27253: NOT
27254: OR
27255: PUSH
27256: LD_VAR 0 2
27260: NOT
27261: OR
27262: PUSH
27263: LD_VAR 0 3
27267: NOT
27268: OR
27269: IFFALSE 27273
// exit ;
27271: GO 28087
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27273: LD_ADDR_VAR 0 14
27277: PUSH
27278: LD_VAR 0 1
27282: PPUSH
27283: LD_VAR 0 2
27287: PPUSH
27288: LD_VAR 0 3
27292: PPUSH
27293: LD_VAR 0 4
27297: PPUSH
27298: LD_VAR 0 5
27302: PUSH
27303: LD_INT 1
27305: ARRAY
27306: PPUSH
27307: CALL_OW 248
27311: PPUSH
27312: LD_INT 0
27314: PPUSH
27315: CALL 29320 0 6
27319: ST_TO_ADDR
// if not hexes then
27320: LD_VAR 0 14
27324: NOT
27325: IFFALSE 27329
// exit ;
27327: GO 28087
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27329: LD_ADDR_VAR 0 17
27333: PUSH
27334: LD_VAR 0 5
27338: PPUSH
27339: LD_INT 22
27341: PUSH
27342: LD_VAR 0 13
27346: PPUSH
27347: CALL_OW 255
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 30
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 30
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PPUSH
27388: CALL_OW 72
27392: ST_TO_ADDR
// for i = 1 to hexes do
27393: LD_ADDR_VAR 0 9
27397: PUSH
27398: DOUBLE
27399: LD_INT 1
27401: DEC
27402: ST_TO_ADDR
27403: LD_VAR 0 14
27407: PUSH
27408: FOR_TO
27409: IFFALSE 28085
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27411: LD_ADDR_VAR 0 13
27415: PUSH
27416: LD_VAR 0 14
27420: PUSH
27421: LD_VAR 0 9
27425: ARRAY
27426: PUSH
27427: LD_INT 1
27429: ARRAY
27430: PPUSH
27431: LD_VAR 0 14
27435: PUSH
27436: LD_VAR 0 9
27440: ARRAY
27441: PUSH
27442: LD_INT 2
27444: ARRAY
27445: PPUSH
27446: CALL_OW 428
27450: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27451: LD_VAR 0 14
27455: PUSH
27456: LD_VAR 0 9
27460: ARRAY
27461: PUSH
27462: LD_INT 1
27464: ARRAY
27465: PPUSH
27466: LD_VAR 0 14
27470: PUSH
27471: LD_VAR 0 9
27475: ARRAY
27476: PUSH
27477: LD_INT 2
27479: ARRAY
27480: PPUSH
27481: CALL_OW 351
27485: PUSH
27486: LD_VAR 0 14
27490: PUSH
27491: LD_VAR 0 9
27495: ARRAY
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: PPUSH
27501: LD_VAR 0 14
27505: PUSH
27506: LD_VAR 0 9
27510: ARRAY
27511: PUSH
27512: LD_INT 2
27514: ARRAY
27515: PPUSH
27516: CALL_OW 488
27520: NOT
27521: OR
27522: PUSH
27523: LD_VAR 0 13
27527: PPUSH
27528: CALL_OW 247
27532: PUSH
27533: LD_INT 3
27535: EQUAL
27536: OR
27537: IFFALSE 27543
// exit ;
27539: POP
27540: POP
27541: GO 28087
// if not tmp then
27543: LD_VAR 0 13
27547: NOT
27548: IFFALSE 27552
// continue ;
27550: GO 27408
// result := true ;
27552: LD_ADDR_VAR 0 8
27556: PUSH
27557: LD_INT 1
27559: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27560: LD_VAR 0 6
27564: PUSH
27565: LD_VAR 0 13
27569: PPUSH
27570: CALL_OW 247
27574: PUSH
27575: LD_INT 2
27577: EQUAL
27578: AND
27579: PUSH
27580: LD_VAR 0 13
27584: PPUSH
27585: CALL_OW 263
27589: PUSH
27590: LD_INT 1
27592: EQUAL
27593: AND
27594: IFFALSE 27758
// begin if IsDrivenBy ( tmp ) then
27596: LD_VAR 0 13
27600: PPUSH
27601: CALL_OW 311
27605: IFFALSE 27609
// continue ;
27607: GO 27408
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27609: LD_VAR 0 6
27613: PPUSH
27614: LD_INT 3
27616: PUSH
27617: LD_INT 60
27619: PUSH
27620: EMPTY
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 3
27629: PUSH
27630: LD_INT 55
27632: PUSH
27633: EMPTY
27634: LIST
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PPUSH
27644: CALL_OW 72
27648: IFFALSE 27756
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27650: LD_ADDR_VAR 0 18
27654: PUSH
27655: LD_VAR 0 6
27659: PPUSH
27660: LD_INT 3
27662: PUSH
27663: LD_INT 60
27665: PUSH
27666: EMPTY
27667: LIST
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 3
27675: PUSH
27676: LD_INT 55
27678: PUSH
27679: EMPTY
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PPUSH
27690: CALL_OW 72
27694: PUSH
27695: LD_INT 1
27697: ARRAY
27698: ST_TO_ADDR
// if IsInUnit ( driver ) then
27699: LD_VAR 0 18
27703: PPUSH
27704: CALL_OW 310
27708: IFFALSE 27719
// ComExit ( driver ) ;
27710: LD_VAR 0 18
27714: PPUSH
27715: CALL 53081 0 1
// AddComEnterUnit ( driver , tmp ) ;
27719: LD_VAR 0 18
27723: PPUSH
27724: LD_VAR 0 13
27728: PPUSH
27729: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27733: LD_VAR 0 18
27737: PPUSH
27738: LD_VAR 0 7
27742: PPUSH
27743: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27747: LD_VAR 0 18
27751: PPUSH
27752: CALL_OW 181
// end ; continue ;
27756: GO 27408
// end ; if not cleaners or not tmp in cleaners then
27758: LD_VAR 0 6
27762: NOT
27763: PUSH
27764: LD_VAR 0 13
27768: PUSH
27769: LD_VAR 0 6
27773: IN
27774: NOT
27775: OR
27776: IFFALSE 28083
// begin if dep then
27778: LD_VAR 0 17
27782: IFFALSE 27918
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27784: LD_ADDR_VAR 0 16
27788: PUSH
27789: LD_VAR 0 17
27793: PUSH
27794: LD_INT 1
27796: ARRAY
27797: PPUSH
27798: CALL_OW 250
27802: PPUSH
27803: LD_VAR 0 17
27807: PUSH
27808: LD_INT 1
27810: ARRAY
27811: PPUSH
27812: CALL_OW 254
27816: PPUSH
27817: LD_INT 5
27819: PPUSH
27820: CALL_OW 272
27824: PUSH
27825: LD_VAR 0 17
27829: PUSH
27830: LD_INT 1
27832: ARRAY
27833: PPUSH
27834: CALL_OW 251
27838: PPUSH
27839: LD_VAR 0 17
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: PPUSH
27848: CALL_OW 254
27852: PPUSH
27853: LD_INT 5
27855: PPUSH
27856: CALL_OW 273
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27865: LD_VAR 0 16
27869: PUSH
27870: LD_INT 1
27872: ARRAY
27873: PPUSH
27874: LD_VAR 0 16
27878: PUSH
27879: LD_INT 2
27881: ARRAY
27882: PPUSH
27883: CALL_OW 488
27887: IFFALSE 27918
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27889: LD_VAR 0 13
27893: PPUSH
27894: LD_VAR 0 16
27898: PUSH
27899: LD_INT 1
27901: ARRAY
27902: PPUSH
27903: LD_VAR 0 16
27907: PUSH
27908: LD_INT 2
27910: ARRAY
27911: PPUSH
27912: CALL_OW 111
// continue ;
27916: GO 27408
// end ; end ; r := GetDir ( tmp ) ;
27918: LD_ADDR_VAR 0 15
27922: PUSH
27923: LD_VAR 0 13
27927: PPUSH
27928: CALL_OW 254
27932: ST_TO_ADDR
// if r = 5 then
27933: LD_VAR 0 15
27937: PUSH
27938: LD_INT 5
27940: EQUAL
27941: IFFALSE 27951
// r := 0 ;
27943: LD_ADDR_VAR 0 15
27947: PUSH
27948: LD_INT 0
27950: ST_TO_ADDR
// for j = r to 5 do
27951: LD_ADDR_VAR 0 10
27955: PUSH
27956: DOUBLE
27957: LD_VAR 0 15
27961: DEC
27962: ST_TO_ADDR
27963: LD_INT 5
27965: PUSH
27966: FOR_TO
27967: IFFALSE 28081
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27969: LD_ADDR_VAR 0 11
27973: PUSH
27974: LD_VAR 0 13
27978: PPUSH
27979: CALL_OW 250
27983: PPUSH
27984: LD_VAR 0 10
27988: PPUSH
27989: LD_INT 2
27991: PPUSH
27992: CALL_OW 272
27996: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27997: LD_ADDR_VAR 0 12
28001: PUSH
28002: LD_VAR 0 13
28006: PPUSH
28007: CALL_OW 251
28011: PPUSH
28012: LD_VAR 0 10
28016: PPUSH
28017: LD_INT 2
28019: PPUSH
28020: CALL_OW 273
28024: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28025: LD_VAR 0 11
28029: PPUSH
28030: LD_VAR 0 12
28034: PPUSH
28035: CALL_OW 488
28039: PUSH
28040: LD_VAR 0 11
28044: PPUSH
28045: LD_VAR 0 12
28049: PPUSH
28050: CALL_OW 428
28054: NOT
28055: AND
28056: IFFALSE 28079
// begin ComMoveXY ( tmp , _x , _y ) ;
28058: LD_VAR 0 13
28062: PPUSH
28063: LD_VAR 0 11
28067: PPUSH
28068: LD_VAR 0 12
28072: PPUSH
28073: CALL_OW 111
// break ;
28077: GO 28081
// end ; end ;
28079: GO 27966
28081: POP
28082: POP
// end ; end ;
28083: GO 27408
28085: POP
28086: POP
// end ;
28087: LD_VAR 0 8
28091: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28092: LD_INT 0
28094: PPUSH
// result := true ;
28095: LD_ADDR_VAR 0 3
28099: PUSH
28100: LD_INT 1
28102: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28103: LD_VAR 0 2
28107: PUSH
28108: LD_INT 24
28110: DOUBLE
28111: EQUAL
28112: IFTRUE 28122
28114: LD_INT 33
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28147
28122: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_INT 32
28130: PPUSH
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 321
28140: PUSH
28141: LD_INT 2
28143: EQUAL
28144: ST_TO_ADDR
28145: GO 28463
28147: LD_INT 20
28149: DOUBLE
28150: EQUAL
28151: IFTRUE 28155
28153: GO 28180
28155: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28156: LD_ADDR_VAR 0 3
28160: PUSH
28161: LD_INT 6
28163: PPUSH
28164: LD_VAR 0 1
28168: PPUSH
28169: CALL_OW 321
28173: PUSH
28174: LD_INT 2
28176: EQUAL
28177: ST_TO_ADDR
28178: GO 28463
28180: LD_INT 22
28182: DOUBLE
28183: EQUAL
28184: IFTRUE 28194
28186: LD_INT 36
28188: DOUBLE
28189: EQUAL
28190: IFTRUE 28194
28192: GO 28219
28194: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28195: LD_ADDR_VAR 0 3
28199: PUSH
28200: LD_INT 15
28202: PPUSH
28203: LD_VAR 0 1
28207: PPUSH
28208: CALL_OW 321
28212: PUSH
28213: LD_INT 2
28215: EQUAL
28216: ST_TO_ADDR
28217: GO 28463
28219: LD_INT 30
28221: DOUBLE
28222: EQUAL
28223: IFTRUE 28227
28225: GO 28252
28227: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28228: LD_ADDR_VAR 0 3
28232: PUSH
28233: LD_INT 20
28235: PPUSH
28236: LD_VAR 0 1
28240: PPUSH
28241: CALL_OW 321
28245: PUSH
28246: LD_INT 2
28248: EQUAL
28249: ST_TO_ADDR
28250: GO 28463
28252: LD_INT 28
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28266
28258: LD_INT 21
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28291
28266: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28267: LD_ADDR_VAR 0 3
28271: PUSH
28272: LD_INT 21
28274: PPUSH
28275: LD_VAR 0 1
28279: PPUSH
28280: CALL_OW 321
28284: PUSH
28285: LD_INT 2
28287: EQUAL
28288: ST_TO_ADDR
28289: GO 28463
28291: LD_INT 16
28293: DOUBLE
28294: EQUAL
28295: IFTRUE 28299
28297: GO 28324
28299: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 84
28307: PPUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 321
28317: PUSH
28318: LD_INT 2
28320: EQUAL
28321: ST_TO_ADDR
28322: GO 28463
28324: LD_INT 19
28326: DOUBLE
28327: EQUAL
28328: IFTRUE 28338
28330: LD_INT 23
28332: DOUBLE
28333: EQUAL
28334: IFTRUE 28338
28336: GO 28363
28338: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28339: LD_ADDR_VAR 0 3
28343: PUSH
28344: LD_INT 83
28346: PPUSH
28347: LD_VAR 0 1
28351: PPUSH
28352: CALL_OW 321
28356: PUSH
28357: LD_INT 2
28359: EQUAL
28360: ST_TO_ADDR
28361: GO 28463
28363: LD_INT 17
28365: DOUBLE
28366: EQUAL
28367: IFTRUE 28371
28369: GO 28396
28371: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28372: LD_ADDR_VAR 0 3
28376: PUSH
28377: LD_INT 39
28379: PPUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 321
28389: PUSH
28390: LD_INT 2
28392: EQUAL
28393: ST_TO_ADDR
28394: GO 28463
28396: LD_INT 18
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28429
28404: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_INT 40
28412: PPUSH
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL_OW 321
28422: PUSH
28423: LD_INT 2
28425: EQUAL
28426: ST_TO_ADDR
28427: GO 28463
28429: LD_INT 27
28431: DOUBLE
28432: EQUAL
28433: IFTRUE 28437
28435: GO 28462
28437: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28438: LD_ADDR_VAR 0 3
28442: PUSH
28443: LD_INT 35
28445: PPUSH
28446: LD_VAR 0 1
28450: PPUSH
28451: CALL_OW 321
28455: PUSH
28456: LD_INT 2
28458: EQUAL
28459: ST_TO_ADDR
28460: GO 28463
28462: POP
// end ;
28463: LD_VAR 0 3
28467: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28468: LD_INT 0
28470: PPUSH
28471: PPUSH
28472: PPUSH
28473: PPUSH
28474: PPUSH
28475: PPUSH
28476: PPUSH
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
// result := false ;
28481: LD_ADDR_VAR 0 6
28485: PUSH
28486: LD_INT 0
28488: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28489: LD_VAR 0 1
28493: NOT
28494: PUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL_OW 266
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: IN
28515: NOT
28516: OR
28517: PUSH
28518: LD_VAR 0 2
28522: NOT
28523: OR
28524: PUSH
28525: LD_VAR 0 5
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: LD_INT 3
28541: PUSH
28542: LD_INT 4
28544: PUSH
28545: LD_INT 5
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: IN
28556: NOT
28557: OR
28558: PUSH
28559: LD_VAR 0 3
28563: PPUSH
28564: LD_VAR 0 4
28568: PPUSH
28569: CALL_OW 488
28573: NOT
28574: OR
28575: IFFALSE 28579
// exit ;
28577: GO 29315
// side := GetSide ( depot ) ;
28579: LD_ADDR_VAR 0 9
28583: PUSH
28584: LD_VAR 0 1
28588: PPUSH
28589: CALL_OW 255
28593: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28594: LD_VAR 0 9
28598: PPUSH
28599: LD_VAR 0 2
28603: PPUSH
28604: CALL 28092 0 2
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 29315
// pom := GetBase ( depot ) ;
28613: LD_ADDR_VAR 0 10
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 274
28627: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28628: LD_ADDR_VAR 0 11
28632: PUSH
28633: LD_VAR 0 2
28637: PPUSH
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 248
28647: PPUSH
28648: CALL_OW 450
28652: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28653: LD_VAR 0 10
28657: PPUSH
28658: LD_INT 1
28660: PPUSH
28661: CALL_OW 275
28665: PUSH
28666: LD_VAR 0 11
28670: PUSH
28671: LD_INT 1
28673: ARRAY
28674: GREATEREQUAL
28675: PUSH
28676: LD_VAR 0 10
28680: PPUSH
28681: LD_INT 2
28683: PPUSH
28684: CALL_OW 275
28688: PUSH
28689: LD_VAR 0 11
28693: PUSH
28694: LD_INT 2
28696: ARRAY
28697: GREATEREQUAL
28698: AND
28699: PUSH
28700: LD_VAR 0 10
28704: PPUSH
28705: LD_INT 3
28707: PPUSH
28708: CALL_OW 275
28712: PUSH
28713: LD_VAR 0 11
28717: PUSH
28718: LD_INT 3
28720: ARRAY
28721: GREATEREQUAL
28722: AND
28723: NOT
28724: IFFALSE 28728
// exit ;
28726: GO 29315
// if GetBType ( depot ) = b_depot then
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 266
28737: PUSH
28738: LD_INT 0
28740: EQUAL
28741: IFFALSE 28753
// dist := 28 else
28743: LD_ADDR_VAR 0 14
28747: PUSH
28748: LD_INT 28
28750: ST_TO_ADDR
28751: GO 28761
// dist := 36 ;
28753: LD_ADDR_VAR 0 14
28757: PUSH
28758: LD_INT 36
28760: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28761: LD_VAR 0 1
28765: PPUSH
28766: LD_VAR 0 3
28770: PPUSH
28771: LD_VAR 0 4
28775: PPUSH
28776: CALL_OW 297
28780: PUSH
28781: LD_VAR 0 14
28785: GREATER
28786: IFFALSE 28790
// exit ;
28788: GO 29315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28790: LD_ADDR_VAR 0 12
28794: PUSH
28795: LD_VAR 0 2
28799: PPUSH
28800: LD_VAR 0 3
28804: PPUSH
28805: LD_VAR 0 4
28809: PPUSH
28810: LD_VAR 0 5
28814: PPUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 248
28824: PPUSH
28825: LD_INT 0
28827: PPUSH
28828: CALL 29320 0 6
28832: ST_TO_ADDR
// if not hexes then
28833: LD_VAR 0 12
28837: NOT
28838: IFFALSE 28842
// exit ;
28840: GO 29315
// hex := GetHexInfo ( x , y ) ;
28842: LD_ADDR_VAR 0 15
28846: PUSH
28847: LD_VAR 0 3
28851: PPUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: CALL_OW 546
28861: ST_TO_ADDR
// if hex [ 1 ] then
28862: LD_VAR 0 15
28866: PUSH
28867: LD_INT 1
28869: ARRAY
28870: IFFALSE 28874
// exit ;
28872: GO 29315
// height := hex [ 2 ] ;
28874: LD_ADDR_VAR 0 13
28878: PUSH
28879: LD_VAR 0 15
28883: PUSH
28884: LD_INT 2
28886: ARRAY
28887: ST_TO_ADDR
// for i = 1 to hexes do
28888: LD_ADDR_VAR 0 7
28892: PUSH
28893: DOUBLE
28894: LD_INT 1
28896: DEC
28897: ST_TO_ADDR
28898: LD_VAR 0 12
28902: PUSH
28903: FOR_TO
28904: IFFALSE 29234
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28906: LD_VAR 0 12
28910: PUSH
28911: LD_VAR 0 7
28915: ARRAY
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: LD_VAR 0 12
28925: PUSH
28926: LD_VAR 0 7
28930: ARRAY
28931: PUSH
28932: LD_INT 2
28934: ARRAY
28935: PPUSH
28936: CALL_OW 488
28940: NOT
28941: PUSH
28942: LD_VAR 0 12
28946: PUSH
28947: LD_VAR 0 7
28951: ARRAY
28952: PUSH
28953: LD_INT 1
28955: ARRAY
28956: PPUSH
28957: LD_VAR 0 12
28961: PUSH
28962: LD_VAR 0 7
28966: ARRAY
28967: PUSH
28968: LD_INT 2
28970: ARRAY
28971: PPUSH
28972: CALL_OW 428
28976: PUSH
28977: LD_INT 0
28979: GREATER
28980: OR
28981: PUSH
28982: LD_VAR 0 12
28986: PUSH
28987: LD_VAR 0 7
28991: ARRAY
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PPUSH
28997: LD_VAR 0 12
29001: PUSH
29002: LD_VAR 0 7
29006: ARRAY
29007: PUSH
29008: LD_INT 2
29010: ARRAY
29011: PPUSH
29012: CALL_OW 351
29016: OR
29017: IFFALSE 29023
// exit ;
29019: POP
29020: POP
29021: GO 29315
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29023: LD_ADDR_VAR 0 8
29027: PUSH
29028: LD_VAR 0 12
29032: PUSH
29033: LD_VAR 0 7
29037: ARRAY
29038: PUSH
29039: LD_INT 1
29041: ARRAY
29042: PPUSH
29043: LD_VAR 0 12
29047: PUSH
29048: LD_VAR 0 7
29052: ARRAY
29053: PUSH
29054: LD_INT 2
29056: ARRAY
29057: PPUSH
29058: CALL_OW 546
29062: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29063: LD_VAR 0 8
29067: PUSH
29068: LD_INT 1
29070: ARRAY
29071: PUSH
29072: LD_VAR 0 8
29076: PUSH
29077: LD_INT 2
29079: ARRAY
29080: PUSH
29081: LD_VAR 0 13
29085: PUSH
29086: LD_INT 2
29088: PLUS
29089: GREATER
29090: OR
29091: PUSH
29092: LD_VAR 0 8
29096: PUSH
29097: LD_INT 2
29099: ARRAY
29100: PUSH
29101: LD_VAR 0 13
29105: PUSH
29106: LD_INT 2
29108: MINUS
29109: LESS
29110: OR
29111: PUSH
29112: LD_VAR 0 8
29116: PUSH
29117: LD_INT 3
29119: ARRAY
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 8
29126: PUSH
29127: LD_INT 9
29129: PUSH
29130: LD_INT 10
29132: PUSH
29133: LD_INT 11
29135: PUSH
29136: LD_INT 12
29138: PUSH
29139: LD_INT 13
29141: PUSH
29142: LD_INT 16
29144: PUSH
29145: LD_INT 17
29147: PUSH
29148: LD_INT 18
29150: PUSH
29151: LD_INT 19
29153: PUSH
29154: LD_INT 20
29156: PUSH
29157: LD_INT 21
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: IN
29175: NOT
29176: OR
29177: PUSH
29178: LD_VAR 0 8
29182: PUSH
29183: LD_INT 5
29185: ARRAY
29186: NOT
29187: OR
29188: PUSH
29189: LD_VAR 0 8
29193: PUSH
29194: LD_INT 6
29196: ARRAY
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: LD_INT 7
29206: PUSH
29207: LD_INT 9
29209: PUSH
29210: LD_INT 10
29212: PUSH
29213: LD_INT 11
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: IN
29224: NOT
29225: OR
29226: IFFALSE 29232
// exit ;
29228: POP
29229: POP
29230: GO 29315
// end ;
29232: GO 28903
29234: POP
29235: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29236: LD_VAR 0 9
29240: PPUSH
29241: LD_VAR 0 3
29245: PPUSH
29246: LD_VAR 0 4
29250: PPUSH
29251: LD_INT 20
29253: PPUSH
29254: CALL 21267 0 4
29258: PUSH
29259: LD_INT 4
29261: ARRAY
29262: IFFALSE 29266
// exit ;
29264: GO 29315
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29266: LD_VAR 0 2
29270: PUSH
29271: LD_INT 29
29273: PUSH
29274: LD_INT 30
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: IN
29281: PUSH
29282: LD_VAR 0 3
29286: PPUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: LD_VAR 0 9
29296: PPUSH
29297: CALL_OW 440
29301: NOT
29302: AND
29303: IFFALSE 29307
// exit ;
29305: GO 29315
// result := true ;
29307: LD_ADDR_VAR 0 6
29311: PUSH
29312: LD_INT 1
29314: ST_TO_ADDR
// end ;
29315: LD_VAR 0 6
29319: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29320: LD_INT 0
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
// result = [ ] ;
29380: LD_ADDR_VAR 0 7
29384: PUSH
29385: EMPTY
29386: ST_TO_ADDR
// temp_list = [ ] ;
29387: LD_ADDR_VAR 0 9
29391: PUSH
29392: EMPTY
29393: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29394: LD_VAR 0 4
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 5
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: IN
29425: NOT
29426: PUSH
29427: LD_VAR 0 1
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: IN
29442: PUSH
29443: LD_VAR 0 5
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: LD_INT 3
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: IN
29462: NOT
29463: AND
29464: OR
29465: IFFALSE 29469
// exit ;
29467: GO 47860
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29469: LD_VAR 0 1
29473: PUSH
29474: LD_INT 6
29476: PUSH
29477: LD_INT 7
29479: PUSH
29480: LD_INT 8
29482: PUSH
29483: LD_INT 13
29485: PUSH
29486: LD_INT 12
29488: PUSH
29489: LD_INT 15
29491: PUSH
29492: LD_INT 11
29494: PUSH
29495: LD_INT 14
29497: PUSH
29498: LD_INT 10
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: IN
29512: IFFALSE 29522
// btype = b_lab ;
29514: LD_ADDR_VAR 0 1
29518: PUSH
29519: LD_INT 6
29521: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29522: LD_VAR 0 6
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: IN
29541: NOT
29542: PUSH
29543: LD_VAR 0 1
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 6
29562: PUSH
29563: LD_INT 36
29565: PUSH
29566: LD_INT 4
29568: PUSH
29569: LD_INT 5
29571: PUSH
29572: LD_INT 31
29574: PUSH
29575: LD_INT 32
29577: PUSH
29578: LD_INT 33
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: IN
29594: NOT
29595: PUSH
29596: LD_VAR 0 6
29600: PUSH
29601: LD_INT 1
29603: EQUAL
29604: AND
29605: OR
29606: PUSH
29607: LD_VAR 0 1
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: IN
29622: NOT
29623: PUSH
29624: LD_VAR 0 6
29628: PUSH
29629: LD_INT 2
29631: EQUAL
29632: AND
29633: OR
29634: IFFALSE 29644
// mode = 0 ;
29636: LD_ADDR_VAR 0 6
29640: PUSH
29641: LD_INT 0
29643: ST_TO_ADDR
// case mode of 0 :
29644: LD_VAR 0 6
29648: PUSH
29649: LD_INT 0
29651: DOUBLE
29652: EQUAL
29653: IFTRUE 29657
29655: GO 41110
29657: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29658: LD_ADDR_VAR 0 11
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 3
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29851: LD_ADDR_VAR 0 12
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 2
29974: NEG
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30047: LD_ADDR_VAR 0 13
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: NEG
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 2
30194: NEG
30195: PUSH
30196: LD_INT 3
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 3
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30246: LD_ADDR_VAR 0 14
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 1
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: LD_INT 2
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30442: LD_ADDR_VAR 0 15
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: NEG
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30635: LD_ADDR_VAR 0 16
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30828: LD_ADDR_VAR 0 17
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: LD_INT 2
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: LD_INT 2
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31058: LD_ADDR_VAR 0 18
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 2
31245: NEG
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31288: LD_ADDR_VAR 0 19
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: LD_INT 2
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31518: LD_ADDR_VAR 0 20
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: LD_INT 2
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 2
31717: NEG
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31748: LD_ADDR_VAR 0 21
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: NEG
31948: PUSH
31949: LD_INT 2
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31978: LD_ADDR_VAR 0 22
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32208: LD_ADDR_VAR 0 23
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: NEG
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: LD_INT 3
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: LD_INT 2
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32488: LD_ADDR_VAR 0 24
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32764: LD_ADDR_VAR 0 25
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33038: LD_ADDR_VAR 0 26
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: NEG
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33314: LD_ADDR_VAR 0 27
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 2
33490: NEG
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 3
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 3
33559: NEG
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33594: LD_ADDR_VAR 0 28
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 2
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: LD_INT 3
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 3
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33876: LD_ADDR_VAR 0 29
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: NEG
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 2
34066: NEG
34067: PUSH
34068: LD_INT 3
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: LD_INT 3
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34155: LD_ADDR_VAR 0 30
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 3
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34433: LD_ADDR_VAR 0 31
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 2
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 3
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: NEG
34677: PUSH
34678: LD_INT 2
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34711: LD_ADDR_VAR 0 32
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: LD_INT 1
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: LD_INT 3
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 3
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 2
34943: NEG
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 3
34954: NEG
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34989: LD_ADDR_VAR 0 33
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: NEG
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: LD_INT 3
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 3
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 3
35233: NEG
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35268: LD_ADDR_VAR 0 34
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: LD_INT 3
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 3
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35548: LD_ADDR_VAR 0 35
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35660: LD_ADDR_VAR 0 36
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 2
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35772: LD_ADDR_VAR 0 37
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35884: LD_ADDR_VAR 0 38
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: NEG
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35996: LD_ADDR_VAR 0 39
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36108: LD_ADDR_VAR 0 40
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36220: LD_ADDR_VAR 0 41
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 3
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 3
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: PUSH
36464: LD_INT 3
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 3
36494: NEG
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 3
36505: NEG
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 3
36529: NEG
36530: PUSH
36531: LD_INT 3
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36570: LD_ADDR_VAR 0 42
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: LD_INT 3
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 3
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 3
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 3
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: LD_INT 3
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 3
36867: NEG
36868: PUSH
36869: LD_INT 2
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 3
36879: NEG
36880: PUSH
36881: LD_INT 3
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36920: LD_ADDR_VAR 0 43
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 3
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 3
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 3
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 3
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 3
37216: NEG
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 3
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37268: LD_ADDR_VAR 0 44
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: NEG
37459: PUSH
37460: LD_INT 3
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 3
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: NEG
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 3
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 3
37565: NEG
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 3
37577: NEG
37578: PUSH
37579: LD_INT 3
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37618: LD_ADDR_VAR 0 45
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: LD_INT 3
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 3
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 3
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 3
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 3
37915: NEG
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 3
37927: NEG
37928: PUSH
37929: LD_INT 3
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37968: LD_ADDR_VAR 0 46
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 3
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 3
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 3
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 3
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 3
38264: NEG
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38316: LD_ADDR_VAR 0 47
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38467: LD_ADDR_VAR 0 48
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38614: LD_ADDR_VAR 0 49
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38758: LD_ADDR_VAR 0 50
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38902: LD_ADDR_VAR 0 51
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39049: LD_ADDR_VAR 0 52
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39200: LD_ADDR_VAR 0 53
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 2
39376: NEG
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39430: LD_ADDR_VAR 0 54
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39660: LD_ADDR_VAR 0 55
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39890: LD_ADDR_VAR 0 56
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40120: LD_ADDR_VAR 0 57
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: NEG
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40350: LD_ADDR_VAR 0 58
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40580: LD_ADDR_VAR 0 59
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40668: LD_ADDR_VAR 0 60
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40756: LD_ADDR_VAR 0 61
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40844: LD_ADDR_VAR 0 62
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40932: LD_ADDR_VAR 0 63
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41020: LD_ADDR_VAR 0 64
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
// end ; 1 :
41108: GO 47005
41110: LD_INT 1
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41118
41116: GO 43741
41118: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41119: LD_ADDR_VAR 0 11
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 3
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41163: LD_ADDR_VAR 0 12
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41204: LD_ADDR_VAR 0 13
41208: PUSH
41209: LD_INT 3
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41244: LD_ADDR_VAR 0 14
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 3
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 3
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41285: LD_ADDR_VAR 0 15
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 3
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41329: LD_ADDR_VAR 0 16
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 3
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: LD_INT 3
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41375: LD_ADDR_VAR 0 17
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 3
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41419: LD_ADDR_VAR 0 18
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 3
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 3
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41460: LD_ADDR_VAR 0 19
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41500: LD_ADDR_VAR 0 20
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 3
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 3
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41541: LD_ADDR_VAR 0 21
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41585: LD_ADDR_VAR 0 22
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 3
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 3
41616: NEG
41617: PUSH
41618: LD_INT 3
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41631: LD_ADDR_VAR 0 23
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 4
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 3
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41675: LD_ADDR_VAR 0 24
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 3
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41716: LD_ADDR_VAR 0 25
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 4
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: LD_INT 4
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41756: LD_ADDR_VAR 0 26
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 4
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41797: LD_ADDR_VAR 0 27
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 4
41826: NEG
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41841: LD_ADDR_VAR 0 28
41845: PUSH
41846: LD_INT 3
41848: NEG
41849: PUSH
41850: LD_INT 3
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 3
41860: NEG
41861: PUSH
41862: LD_INT 4
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 4
41872: NEG
41873: PUSH
41874: LD_INT 3
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41887: LD_ADDR_VAR 0 29
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 4
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 4
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 3
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 5
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 5
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 4
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 6
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 6
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 5
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42042: LD_ADDR_VAR 0 30
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 4
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 4
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 4
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 5
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 5
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 5
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 6
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 6
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42185: LD_ADDR_VAR 0 31
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 4
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 4
42232: PUSH
42233: LD_INT 4
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 4
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: LD_INT 4
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 5
42262: PUSH
42263: LD_INT 5
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 4
42272: PUSH
42273: LD_INT 5
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 6
42282: PUSH
42283: LD_INT 5
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 6
42292: PUSH
42293: LD_INT 6
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: LD_INT 6
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42324: LD_ADDR_VAR 0 32
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 4
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 5
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 5
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 4
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 6
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 6
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 5
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42467: LD_ADDR_VAR 0 33
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 4
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 4
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 4
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 5
42553: NEG
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 5
42564: NEG
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 5
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 6
42587: NEG
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 6
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42622: LD_ADDR_VAR 0 34
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 3
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 3
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 3
42653: NEG
42654: PUSH
42655: LD_INT 3
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: LD_INT 4
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 4
42677: NEG
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 4
42689: NEG
42690: PUSH
42691: LD_INT 4
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 4
42701: NEG
42702: PUSH
42703: LD_INT 5
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 5
42713: NEG
42714: PUSH
42715: LD_INT 4
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 5
42725: NEG
42726: PUSH
42727: LD_INT 5
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 5
42737: NEG
42738: PUSH
42739: LD_INT 6
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 6
42749: NEG
42750: PUSH
42751: LD_INT 5
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 6
42761: NEG
42762: PUSH
42763: LD_INT 6
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42785: LD_ADDR_VAR 0 41
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42829: LD_ADDR_VAR 0 42
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42870: LD_ADDR_VAR 0 43
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42910: LD_ADDR_VAR 0 44
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42951: LD_ADDR_VAR 0 45
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42995: LD_ADDR_VAR 0 46
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43041: LD_ADDR_VAR 0 47
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 3
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43074: LD_ADDR_VAR 0 48
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43105: LD_ADDR_VAR 0 49
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43134: LD_ADDR_VAR 0 50
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43163: LD_ADDR_VAR 0 51
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43194: LD_ADDR_VAR 0 52
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 3
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43227: LD_ADDR_VAR 0 53
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 3
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 3
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43271: LD_ADDR_VAR 0 54
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 3
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43312: LD_ADDR_VAR 0 55
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43352: LD_ADDR_VAR 0 56
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43393: LD_ADDR_VAR 0 57
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43437: LD_ADDR_VAR 0 58
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 3
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 3
43468: NEG
43469: PUSH
43470: LD_INT 3
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43483: LD_ADDR_VAR 0 59
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43527: LD_ADDR_VAR 0 60
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43568: LD_ADDR_VAR 0 61
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43608: LD_ADDR_VAR 0 62
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43649: LD_ADDR_VAR 0 63
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43693: LD_ADDR_VAR 0 64
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: ST_TO_ADDR
// end ; 2 :
43739: GO 47005
43741: LD_INT 2
43743: DOUBLE
43744: EQUAL
43745: IFTRUE 43749
43747: GO 47004
43749: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43750: LD_ADDR_VAR 0 29
43754: PUSH
43755: LD_INT 4
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 4
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 5
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 5
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 4
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 5
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 4
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 4
43880: PUSH
43881: LD_INT 4
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 4
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 4
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 3
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 4
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 5
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 5
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 4
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 5
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 3
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 3
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 4
44089: NEG
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 4
44100: NEG
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 4
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 4
44135: NEG
44136: PUSH
44137: LD_INT 4
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 4
44147: NEG
44148: PUSH
44149: LD_INT 5
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: LD_INT 4
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: LD_INT 3
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 4
44183: NEG
44184: PUSH
44185: LD_INT 3
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 5
44195: NEG
44196: PUSH
44197: LD_INT 4
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 5
44207: NEG
44208: PUSH
44209: LD_INT 5
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: LD_INT 5
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 5
44231: NEG
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44288: LD_ADDR_VAR 0 30
44292: PUSH
44293: LD_INT 4
44295: PUSH
44296: LD_INT 4
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 4
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 5
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 5
44325: PUSH
44326: LD_INT 5
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 4
44335: PUSH
44336: LD_INT 5
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 4
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 5
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: LD_INT 5
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 4
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 4
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 4
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 4
44478: NEG
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 4
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 3
44501: NEG
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 3
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 4
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 5
44534: NEG
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 5
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 5
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: LD_INT 3
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: LD_INT 4
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 3
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 4
44640: NEG
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 4
44652: NEG
44653: PUSH
44654: LD_INT 4
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: LD_INT 4
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 4
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 4
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 5
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 4
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 3
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 4
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 5
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 5
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44835: LD_ADDR_VAR 0 31
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 4
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 4
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 5
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 4
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 4
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 4
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 4
45014: NEG
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 4
45037: NEG
45038: PUSH
45039: LD_INT 4
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 4
45049: NEG
45050: PUSH
45051: LD_INT 5
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: LD_INT 4
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 4
45085: NEG
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 5
45097: NEG
45098: PUSH
45099: LD_INT 4
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 5
45109: NEG
45110: PUSH
45111: LD_INT 5
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 3
45121: NEG
45122: PUSH
45123: LD_INT 5
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 5
45133: NEG
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 4
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 3
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 4
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 4
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 4
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 5
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 5
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 4
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 5
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45385: LD_ADDR_VAR 0 32
45389: PUSH
45390: LD_INT 4
45392: NEG
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 4
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 3
45415: NEG
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: NEG
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 4
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 5
45448: NEG
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 5
45459: NEG
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 5
45471: NEG
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 3
45483: NEG
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: LD_INT 3
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 4
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 3
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 3
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 4
45554: NEG
45555: PUSH
45556: LD_INT 3
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 4
45566: NEG
45567: PUSH
45568: LD_INT 4
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: LD_INT 4
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 4
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 4
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 5
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 4
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 4
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 5
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: LD_INT 5
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 3
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 4
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 4
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 4
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 4
45797: PUSH
45798: LD_INT 4
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 4
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 5
45817: PUSH
45818: LD_INT 4
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 5
45827: PUSH
45828: LD_INT 5
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 4
45837: PUSH
45838: LD_INT 5
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 4
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 3
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 5
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 3
45877: PUSH
45878: LD_INT 5
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45932: LD_ADDR_VAR 0 33
45936: PUSH
45937: LD_INT 4
45939: NEG
45940: PUSH
45941: LD_INT 4
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 4
45951: NEG
45952: PUSH
45953: LD_INT 5
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: LD_INT 4
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 3
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 4
45987: NEG
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 5
45999: NEG
46000: PUSH
46001: LD_INT 4
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 5
46011: NEG
46012: PUSH
46013: LD_INT 5
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 3
46023: NEG
46024: PUSH
46025: LD_INT 5
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 5
46035: NEG
46036: PUSH
46037: LD_INT 3
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 4
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 4
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 4
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 4
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 5
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 5
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 4
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 5
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 4
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 4
46272: PUSH
46273: LD_INT 4
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 4
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 4
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 4
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 5
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 4
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 3
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 5
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 3
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46470: LD_ADDR_VAR 0 34
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 4
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 5
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 4
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 5
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 5
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 4
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 4
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 4
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 4
46672: PUSH
46673: LD_INT 4
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 5
46692: PUSH
46693: LD_INT 4
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 5
46702: PUSH
46703: LD_INT 5
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 4
46712: PUSH
46713: LD_INT 5
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 5
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 3
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 4
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 4
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 3
46878: NEG
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 4
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 5
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 5
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 5
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: ST_TO_ADDR
// end ; end ;
47002: GO 47005
47004: POP
// case btype of b_depot , b_warehouse :
47005: LD_VAR 0 1
47009: PUSH
47010: LD_INT 0
47012: DOUBLE
47013: EQUAL
47014: IFTRUE 47024
47016: LD_INT 1
47018: DOUBLE
47019: EQUAL
47020: IFTRUE 47024
47022: GO 47225
47024: POP
// case nation of nation_american :
47025: LD_VAR 0 5
47029: PUSH
47030: LD_INT 1
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47038
47036: GO 47094
47038: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47039: LD_ADDR_VAR 0 9
47043: PUSH
47044: LD_VAR 0 11
47048: PUSH
47049: LD_VAR 0 12
47053: PUSH
47054: LD_VAR 0 13
47058: PUSH
47059: LD_VAR 0 14
47063: PUSH
47064: LD_VAR 0 15
47068: PUSH
47069: LD_VAR 0 16
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: PUSH
47082: LD_VAR 0 4
47086: PUSH
47087: LD_INT 1
47089: PLUS
47090: ARRAY
47091: ST_TO_ADDR
47092: GO 47223
47094: LD_INT 2
47096: DOUBLE
47097: EQUAL
47098: IFTRUE 47102
47100: GO 47158
47102: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47103: LD_ADDR_VAR 0 9
47107: PUSH
47108: LD_VAR 0 17
47112: PUSH
47113: LD_VAR 0 18
47117: PUSH
47118: LD_VAR 0 19
47122: PUSH
47123: LD_VAR 0 20
47127: PUSH
47128: LD_VAR 0 21
47132: PUSH
47133: LD_VAR 0 22
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: PUSH
47146: LD_VAR 0 4
47150: PUSH
47151: LD_INT 1
47153: PLUS
47154: ARRAY
47155: ST_TO_ADDR
47156: GO 47223
47158: LD_INT 3
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47166
47164: GO 47222
47166: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47167: LD_ADDR_VAR 0 9
47171: PUSH
47172: LD_VAR 0 23
47176: PUSH
47177: LD_VAR 0 24
47181: PUSH
47182: LD_VAR 0 25
47186: PUSH
47187: LD_VAR 0 26
47191: PUSH
47192: LD_VAR 0 27
47196: PUSH
47197: LD_VAR 0 28
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: LD_VAR 0 4
47214: PUSH
47215: LD_INT 1
47217: PLUS
47218: ARRAY
47219: ST_TO_ADDR
47220: GO 47223
47222: POP
47223: GO 47778
47225: LD_INT 2
47227: DOUBLE
47228: EQUAL
47229: IFTRUE 47239
47231: LD_INT 3
47233: DOUBLE
47234: EQUAL
47235: IFTRUE 47239
47237: GO 47295
47239: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47240: LD_ADDR_VAR 0 9
47244: PUSH
47245: LD_VAR 0 29
47249: PUSH
47250: LD_VAR 0 30
47254: PUSH
47255: LD_VAR 0 31
47259: PUSH
47260: LD_VAR 0 32
47264: PUSH
47265: LD_VAR 0 33
47269: PUSH
47270: LD_VAR 0 34
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: PUSH
47283: LD_VAR 0 4
47287: PUSH
47288: LD_INT 1
47290: PLUS
47291: ARRAY
47292: ST_TO_ADDR
47293: GO 47778
47295: LD_INT 16
47297: DOUBLE
47298: EQUAL
47299: IFTRUE 47357
47301: LD_INT 17
47303: DOUBLE
47304: EQUAL
47305: IFTRUE 47357
47307: LD_INT 18
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47357
47313: LD_INT 19
47315: DOUBLE
47316: EQUAL
47317: IFTRUE 47357
47319: LD_INT 22
47321: DOUBLE
47322: EQUAL
47323: IFTRUE 47357
47325: LD_INT 20
47327: DOUBLE
47328: EQUAL
47329: IFTRUE 47357
47331: LD_INT 21
47333: DOUBLE
47334: EQUAL
47335: IFTRUE 47357
47337: LD_INT 23
47339: DOUBLE
47340: EQUAL
47341: IFTRUE 47357
47343: LD_INT 24
47345: DOUBLE
47346: EQUAL
47347: IFTRUE 47357
47349: LD_INT 25
47351: DOUBLE
47352: EQUAL
47353: IFTRUE 47357
47355: GO 47413
47357: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47358: LD_ADDR_VAR 0 9
47362: PUSH
47363: LD_VAR 0 35
47367: PUSH
47368: LD_VAR 0 36
47372: PUSH
47373: LD_VAR 0 37
47377: PUSH
47378: LD_VAR 0 38
47382: PUSH
47383: LD_VAR 0 39
47387: PUSH
47388: LD_VAR 0 40
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: PUSH
47401: LD_VAR 0 4
47405: PUSH
47406: LD_INT 1
47408: PLUS
47409: ARRAY
47410: ST_TO_ADDR
47411: GO 47778
47413: LD_INT 6
47415: DOUBLE
47416: EQUAL
47417: IFTRUE 47469
47419: LD_INT 7
47421: DOUBLE
47422: EQUAL
47423: IFTRUE 47469
47425: LD_INT 8
47427: DOUBLE
47428: EQUAL
47429: IFTRUE 47469
47431: LD_INT 13
47433: DOUBLE
47434: EQUAL
47435: IFTRUE 47469
47437: LD_INT 12
47439: DOUBLE
47440: EQUAL
47441: IFTRUE 47469
47443: LD_INT 15
47445: DOUBLE
47446: EQUAL
47447: IFTRUE 47469
47449: LD_INT 11
47451: DOUBLE
47452: EQUAL
47453: IFTRUE 47469
47455: LD_INT 14
47457: DOUBLE
47458: EQUAL
47459: IFTRUE 47469
47461: LD_INT 10
47463: DOUBLE
47464: EQUAL
47465: IFTRUE 47469
47467: GO 47525
47469: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47470: LD_ADDR_VAR 0 9
47474: PUSH
47475: LD_VAR 0 41
47479: PUSH
47480: LD_VAR 0 42
47484: PUSH
47485: LD_VAR 0 43
47489: PUSH
47490: LD_VAR 0 44
47494: PUSH
47495: LD_VAR 0 45
47499: PUSH
47500: LD_VAR 0 46
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: PUSH
47513: LD_VAR 0 4
47517: PUSH
47518: LD_INT 1
47520: PLUS
47521: ARRAY
47522: ST_TO_ADDR
47523: GO 47778
47525: LD_INT 36
47527: DOUBLE
47528: EQUAL
47529: IFTRUE 47533
47531: GO 47589
47533: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47534: LD_ADDR_VAR 0 9
47538: PUSH
47539: LD_VAR 0 47
47543: PUSH
47544: LD_VAR 0 48
47548: PUSH
47549: LD_VAR 0 49
47553: PUSH
47554: LD_VAR 0 50
47558: PUSH
47559: LD_VAR 0 51
47563: PUSH
47564: LD_VAR 0 52
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: PUSH
47577: LD_VAR 0 4
47581: PUSH
47582: LD_INT 1
47584: PLUS
47585: ARRAY
47586: ST_TO_ADDR
47587: GO 47778
47589: LD_INT 4
47591: DOUBLE
47592: EQUAL
47593: IFTRUE 47615
47595: LD_INT 5
47597: DOUBLE
47598: EQUAL
47599: IFTRUE 47615
47601: LD_INT 34
47603: DOUBLE
47604: EQUAL
47605: IFTRUE 47615
47607: LD_INT 37
47609: DOUBLE
47610: EQUAL
47611: IFTRUE 47615
47613: GO 47671
47615: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47616: LD_ADDR_VAR 0 9
47620: PUSH
47621: LD_VAR 0 53
47625: PUSH
47626: LD_VAR 0 54
47630: PUSH
47631: LD_VAR 0 55
47635: PUSH
47636: LD_VAR 0 56
47640: PUSH
47641: LD_VAR 0 57
47645: PUSH
47646: LD_VAR 0 58
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: PUSH
47659: LD_VAR 0 4
47663: PUSH
47664: LD_INT 1
47666: PLUS
47667: ARRAY
47668: ST_TO_ADDR
47669: GO 47778
47671: LD_INT 31
47673: DOUBLE
47674: EQUAL
47675: IFTRUE 47721
47677: LD_INT 32
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47721
47683: LD_INT 33
47685: DOUBLE
47686: EQUAL
47687: IFTRUE 47721
47689: LD_INT 27
47691: DOUBLE
47692: EQUAL
47693: IFTRUE 47721
47695: LD_INT 26
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47721
47701: LD_INT 28
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47721
47707: LD_INT 29
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47721
47713: LD_INT 30
47715: DOUBLE
47716: EQUAL
47717: IFTRUE 47721
47719: GO 47777
47721: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47722: LD_ADDR_VAR 0 9
47726: PUSH
47727: LD_VAR 0 59
47731: PUSH
47732: LD_VAR 0 60
47736: PUSH
47737: LD_VAR 0 61
47741: PUSH
47742: LD_VAR 0 62
47746: PUSH
47747: LD_VAR 0 63
47751: PUSH
47752: LD_VAR 0 64
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: PUSH
47765: LD_VAR 0 4
47769: PUSH
47770: LD_INT 1
47772: PLUS
47773: ARRAY
47774: ST_TO_ADDR
47775: GO 47778
47777: POP
// temp_list2 = [ ] ;
47778: LD_ADDR_VAR 0 10
47782: PUSH
47783: EMPTY
47784: ST_TO_ADDR
// for i in temp_list do
47785: LD_ADDR_VAR 0 8
47789: PUSH
47790: LD_VAR 0 9
47794: PUSH
47795: FOR_IN
47796: IFFALSE 47848
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47798: LD_ADDR_VAR 0 10
47802: PUSH
47803: LD_VAR 0 10
47807: PUSH
47808: LD_VAR 0 8
47812: PUSH
47813: LD_INT 1
47815: ARRAY
47816: PUSH
47817: LD_VAR 0 2
47821: PLUS
47822: PUSH
47823: LD_VAR 0 8
47827: PUSH
47828: LD_INT 2
47830: ARRAY
47831: PUSH
47832: LD_VAR 0 3
47836: PLUS
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: ADD
47845: ST_TO_ADDR
47846: GO 47795
47848: POP
47849: POP
// result = temp_list2 ;
47850: LD_ADDR_VAR 0 7
47854: PUSH
47855: LD_VAR 0 10
47859: ST_TO_ADDR
// end ;
47860: LD_VAR 0 7
47864: RET
// export function EnemyInRange ( unit , dist ) ; begin
47865: LD_INT 0
47867: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47868: LD_ADDR_VAR 0 3
47872: PUSH
47873: LD_VAR 0 1
47877: PPUSH
47878: CALL_OW 255
47882: PPUSH
47883: LD_VAR 0 1
47887: PPUSH
47888: CALL_OW 250
47892: PPUSH
47893: LD_VAR 0 1
47897: PPUSH
47898: CALL_OW 251
47902: PPUSH
47903: LD_VAR 0 2
47907: PPUSH
47908: CALL 21267 0 4
47912: PUSH
47913: LD_INT 4
47915: ARRAY
47916: ST_TO_ADDR
// end ;
47917: LD_VAR 0 3
47921: RET
// export function PlayerSeeMe ( unit ) ; begin
47922: LD_INT 0
47924: PPUSH
// result := See ( your_side , unit ) ;
47925: LD_ADDR_VAR 0 2
47929: PUSH
47930: LD_OWVAR 2
47934: PPUSH
47935: LD_VAR 0 1
47939: PPUSH
47940: CALL_OW 292
47944: ST_TO_ADDR
// end ;
47945: LD_VAR 0 2
47949: RET
// export function ReverseDir ( unit ) ; begin
47950: LD_INT 0
47952: PPUSH
// if not unit then
47953: LD_VAR 0 1
47957: NOT
47958: IFFALSE 47962
// exit ;
47960: GO 47985
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47962: LD_ADDR_VAR 0 2
47966: PUSH
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL_OW 254
47976: PUSH
47977: LD_INT 3
47979: PLUS
47980: PUSH
47981: LD_INT 6
47983: MOD
47984: ST_TO_ADDR
// end ;
47985: LD_VAR 0 2
47989: RET
// export function ReverseArray ( array ) ; var i ; begin
47990: LD_INT 0
47992: PPUSH
47993: PPUSH
// if not array then
47994: LD_VAR 0 1
47998: NOT
47999: IFFALSE 48003
// exit ;
48001: GO 48058
// result := [ ] ;
48003: LD_ADDR_VAR 0 2
48007: PUSH
48008: EMPTY
48009: ST_TO_ADDR
// for i := array downto 1 do
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: DOUBLE
48016: LD_VAR 0 1
48020: INC
48021: ST_TO_ADDR
48022: LD_INT 1
48024: PUSH
48025: FOR_DOWNTO
48026: IFFALSE 48056
// result := Join ( result , array [ i ] ) ;
48028: LD_ADDR_VAR 0 2
48032: PUSH
48033: LD_VAR 0 2
48037: PPUSH
48038: LD_VAR 0 1
48042: PUSH
48043: LD_VAR 0 3
48047: ARRAY
48048: PPUSH
48049: CALL 52683 0 2
48053: ST_TO_ADDR
48054: GO 48025
48056: POP
48057: POP
// end ;
48058: LD_VAR 0 2
48062: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48063: LD_INT 0
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
// if not unit or not hexes then
48071: LD_VAR 0 1
48075: NOT
48076: PUSH
48077: LD_VAR 0 2
48081: NOT
48082: OR
48083: IFFALSE 48087
// exit ;
48085: GO 48210
// dist := 9999 ;
48087: LD_ADDR_VAR 0 5
48091: PUSH
48092: LD_INT 9999
48094: ST_TO_ADDR
// for i = 1 to hexes do
48095: LD_ADDR_VAR 0 4
48099: PUSH
48100: DOUBLE
48101: LD_INT 1
48103: DEC
48104: ST_TO_ADDR
48105: LD_VAR 0 2
48109: PUSH
48110: FOR_TO
48111: IFFALSE 48198
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48113: LD_ADDR_VAR 0 6
48117: PUSH
48118: LD_VAR 0 1
48122: PPUSH
48123: LD_VAR 0 2
48127: PUSH
48128: LD_VAR 0 4
48132: ARRAY
48133: PUSH
48134: LD_INT 1
48136: ARRAY
48137: PPUSH
48138: LD_VAR 0 2
48142: PUSH
48143: LD_VAR 0 4
48147: ARRAY
48148: PUSH
48149: LD_INT 2
48151: ARRAY
48152: PPUSH
48153: CALL_OW 297
48157: ST_TO_ADDR
// if tdist < dist then
48158: LD_VAR 0 6
48162: PUSH
48163: LD_VAR 0 5
48167: LESS
48168: IFFALSE 48196
// begin hex := hexes [ i ] ;
48170: LD_ADDR_VAR 0 8
48174: PUSH
48175: LD_VAR 0 2
48179: PUSH
48180: LD_VAR 0 4
48184: ARRAY
48185: ST_TO_ADDR
// dist := tdist ;
48186: LD_ADDR_VAR 0 5
48190: PUSH
48191: LD_VAR 0 6
48195: ST_TO_ADDR
// end ; end ;
48196: GO 48110
48198: POP
48199: POP
// result := hex ;
48200: LD_ADDR_VAR 0 3
48204: PUSH
48205: LD_VAR 0 8
48209: ST_TO_ADDR
// end ;
48210: LD_VAR 0 3
48214: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48215: LD_INT 0
48217: PPUSH
48218: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48219: LD_VAR 0 1
48223: NOT
48224: PUSH
48225: LD_VAR 0 1
48229: PUSH
48230: LD_INT 21
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 23
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PPUSH
48254: CALL_OW 69
48258: IN
48259: NOT
48260: OR
48261: IFFALSE 48265
// exit ;
48263: GO 48312
// for i = 1 to 3 do
48265: LD_ADDR_VAR 0 3
48269: PUSH
48270: DOUBLE
48271: LD_INT 1
48273: DEC
48274: ST_TO_ADDR
48275: LD_INT 3
48277: PUSH
48278: FOR_TO
48279: IFFALSE 48310
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48281: LD_VAR 0 1
48285: PPUSH
48286: CALL_OW 250
48290: PPUSH
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 251
48300: PPUSH
48301: LD_INT 1
48303: PPUSH
48304: CALL_OW 453
48308: GO 48278
48310: POP
48311: POP
// end ;
48312: LD_VAR 0 2
48316: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48317: LD_INT 0
48319: PPUSH
48320: PPUSH
48321: PPUSH
48322: PPUSH
48323: PPUSH
48324: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48325: LD_VAR 0 1
48329: NOT
48330: PUSH
48331: LD_VAR 0 2
48335: NOT
48336: OR
48337: PUSH
48338: LD_VAR 0 1
48342: PPUSH
48343: CALL_OW 314
48347: OR
48348: IFFALSE 48352
// exit ;
48350: GO 48793
// x := GetX ( enemy_unit ) ;
48352: LD_ADDR_VAR 0 7
48356: PUSH
48357: LD_VAR 0 2
48361: PPUSH
48362: CALL_OW 250
48366: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48367: LD_ADDR_VAR 0 8
48371: PUSH
48372: LD_VAR 0 2
48376: PPUSH
48377: CALL_OW 251
48381: ST_TO_ADDR
// if not x or not y then
48382: LD_VAR 0 7
48386: NOT
48387: PUSH
48388: LD_VAR 0 8
48392: NOT
48393: OR
48394: IFFALSE 48398
// exit ;
48396: GO 48793
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48398: LD_ADDR_VAR 0 6
48402: PUSH
48403: LD_VAR 0 7
48407: PPUSH
48408: LD_INT 0
48410: PPUSH
48411: LD_INT 4
48413: PPUSH
48414: CALL_OW 272
48418: PUSH
48419: LD_VAR 0 8
48423: PPUSH
48424: LD_INT 0
48426: PPUSH
48427: LD_INT 4
48429: PPUSH
48430: CALL_OW 273
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_VAR 0 7
48443: PPUSH
48444: LD_INT 1
48446: PPUSH
48447: LD_INT 4
48449: PPUSH
48450: CALL_OW 272
48454: PUSH
48455: LD_VAR 0 8
48459: PPUSH
48460: LD_INT 1
48462: PPUSH
48463: LD_INT 4
48465: PPUSH
48466: CALL_OW 273
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_VAR 0 7
48479: PPUSH
48480: LD_INT 2
48482: PPUSH
48483: LD_INT 4
48485: PPUSH
48486: CALL_OW 272
48490: PUSH
48491: LD_VAR 0 8
48495: PPUSH
48496: LD_INT 2
48498: PPUSH
48499: LD_INT 4
48501: PPUSH
48502: CALL_OW 273
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_VAR 0 7
48515: PPUSH
48516: LD_INT 3
48518: PPUSH
48519: LD_INT 4
48521: PPUSH
48522: CALL_OW 272
48526: PUSH
48527: LD_VAR 0 8
48531: PPUSH
48532: LD_INT 3
48534: PPUSH
48535: LD_INT 4
48537: PPUSH
48538: CALL_OW 273
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_VAR 0 7
48551: PPUSH
48552: LD_INT 4
48554: PPUSH
48555: LD_INT 4
48557: PPUSH
48558: CALL_OW 272
48562: PUSH
48563: LD_VAR 0 8
48567: PPUSH
48568: LD_INT 4
48570: PPUSH
48571: LD_INT 4
48573: PPUSH
48574: CALL_OW 273
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_VAR 0 7
48587: PPUSH
48588: LD_INT 5
48590: PPUSH
48591: LD_INT 4
48593: PPUSH
48594: CALL_OW 272
48598: PUSH
48599: LD_VAR 0 8
48603: PPUSH
48604: LD_INT 5
48606: PPUSH
48607: LD_INT 4
48609: PPUSH
48610: CALL_OW 273
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// for i = tmp downto 1 do
48627: LD_ADDR_VAR 0 4
48631: PUSH
48632: DOUBLE
48633: LD_VAR 0 6
48637: INC
48638: ST_TO_ADDR
48639: LD_INT 1
48641: PUSH
48642: FOR_DOWNTO
48643: IFFALSE 48744
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48645: LD_VAR 0 6
48649: PUSH
48650: LD_VAR 0 4
48654: ARRAY
48655: PUSH
48656: LD_INT 1
48658: ARRAY
48659: PPUSH
48660: LD_VAR 0 6
48664: PUSH
48665: LD_VAR 0 4
48669: ARRAY
48670: PUSH
48671: LD_INT 2
48673: ARRAY
48674: PPUSH
48675: CALL_OW 488
48679: NOT
48680: PUSH
48681: LD_VAR 0 6
48685: PUSH
48686: LD_VAR 0 4
48690: ARRAY
48691: PUSH
48692: LD_INT 1
48694: ARRAY
48695: PPUSH
48696: LD_VAR 0 6
48700: PUSH
48701: LD_VAR 0 4
48705: ARRAY
48706: PUSH
48707: LD_INT 2
48709: ARRAY
48710: PPUSH
48711: CALL_OW 428
48715: PUSH
48716: LD_INT 0
48718: NONEQUAL
48719: OR
48720: IFFALSE 48742
// tmp := Delete ( tmp , i ) ;
48722: LD_ADDR_VAR 0 6
48726: PUSH
48727: LD_VAR 0 6
48731: PPUSH
48732: LD_VAR 0 4
48736: PPUSH
48737: CALL_OW 3
48741: ST_TO_ADDR
48742: GO 48642
48744: POP
48745: POP
// j := GetClosestHex ( unit , tmp ) ;
48746: LD_ADDR_VAR 0 5
48750: PUSH
48751: LD_VAR 0 1
48755: PPUSH
48756: LD_VAR 0 6
48760: PPUSH
48761: CALL 48063 0 2
48765: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48766: LD_VAR 0 1
48770: PPUSH
48771: LD_VAR 0 5
48775: PUSH
48776: LD_INT 1
48778: ARRAY
48779: PPUSH
48780: LD_VAR 0 5
48784: PUSH
48785: LD_INT 2
48787: ARRAY
48788: PPUSH
48789: CALL_OW 111
// end ;
48793: LD_VAR 0 3
48797: RET
// export function PrepareApemanSoldier ( ) ; begin
48798: LD_INT 0
48800: PPUSH
// uc_nation := 0 ;
48801: LD_ADDR_OWVAR 21
48805: PUSH
48806: LD_INT 0
48808: ST_TO_ADDR
// hc_sex := sex_male ;
48809: LD_ADDR_OWVAR 27
48813: PUSH
48814: LD_INT 1
48816: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48817: LD_ADDR_OWVAR 28
48821: PUSH
48822: LD_INT 15
48824: ST_TO_ADDR
// hc_gallery :=  ;
48825: LD_ADDR_OWVAR 33
48829: PUSH
48830: LD_STRING 
48832: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48833: LD_ADDR_OWVAR 31
48837: PUSH
48838: LD_INT 0
48840: PPUSH
48841: LD_INT 3
48843: PPUSH
48844: CALL_OW 12
48848: PUSH
48849: LD_INT 0
48851: PPUSH
48852: LD_INT 3
48854: PPUSH
48855: CALL_OW 12
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// end ;
48872: LD_VAR 0 1
48876: RET
// export function PrepareApemanEngineer ( ) ; begin
48877: LD_INT 0
48879: PPUSH
// uc_nation := 0 ;
48880: LD_ADDR_OWVAR 21
48884: PUSH
48885: LD_INT 0
48887: ST_TO_ADDR
// hc_sex := sex_male ;
48888: LD_ADDR_OWVAR 27
48892: PUSH
48893: LD_INT 1
48895: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48896: LD_ADDR_OWVAR 28
48900: PUSH
48901: LD_INT 16
48903: ST_TO_ADDR
// hc_gallery :=  ;
48904: LD_ADDR_OWVAR 33
48908: PUSH
48909: LD_STRING 
48911: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48912: LD_ADDR_OWVAR 31
48916: PUSH
48917: LD_INT 0
48919: PPUSH
48920: LD_INT 3
48922: PPUSH
48923: CALL_OW 12
48927: PUSH
48928: LD_INT 0
48930: PPUSH
48931: LD_INT 3
48933: PPUSH
48934: CALL_OW 12
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// end ;
48951: LD_VAR 0 1
48955: RET
// export function PrepareApeman ( agressivity ) ; begin
48956: LD_INT 0
48958: PPUSH
// uc_side := 0 ;
48959: LD_ADDR_OWVAR 20
48963: PUSH
48964: LD_INT 0
48966: ST_TO_ADDR
// uc_nation := 0 ;
48967: LD_ADDR_OWVAR 21
48971: PUSH
48972: LD_INT 0
48974: ST_TO_ADDR
// hc_sex := sex_male ;
48975: LD_ADDR_OWVAR 27
48979: PUSH
48980: LD_INT 1
48982: ST_TO_ADDR
// hc_class := class_apeman ;
48983: LD_ADDR_OWVAR 28
48987: PUSH
48988: LD_INT 12
48990: ST_TO_ADDR
// hc_gallery :=  ;
48991: LD_ADDR_OWVAR 33
48995: PUSH
48996: LD_STRING 
48998: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48999: LD_ADDR_OWVAR 35
49003: PUSH
49004: LD_VAR 0 1
49008: NEG
49009: PPUSH
49010: LD_VAR 0 1
49014: PPUSH
49015: CALL_OW 12
49019: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49020: LD_ADDR_OWVAR 31
49024: PUSH
49025: LD_INT 0
49027: PPUSH
49028: LD_INT 3
49030: PPUSH
49031: CALL_OW 12
49035: PUSH
49036: LD_INT 0
49038: PPUSH
49039: LD_INT 3
49041: PPUSH
49042: CALL_OW 12
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: ST_TO_ADDR
// end ;
49059: LD_VAR 0 2
49063: RET
// export function PrepareTiger ( agressivity ) ; begin
49064: LD_INT 0
49066: PPUSH
// uc_side := 0 ;
49067: LD_ADDR_OWVAR 20
49071: PUSH
49072: LD_INT 0
49074: ST_TO_ADDR
// uc_nation := 0 ;
49075: LD_ADDR_OWVAR 21
49079: PUSH
49080: LD_INT 0
49082: ST_TO_ADDR
// hc_class := class_tiger ;
49083: LD_ADDR_OWVAR 28
49087: PUSH
49088: LD_INT 14
49090: ST_TO_ADDR
// hc_gallery :=  ;
49091: LD_ADDR_OWVAR 33
49095: PUSH
49096: LD_STRING 
49098: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49099: LD_ADDR_OWVAR 35
49103: PUSH
49104: LD_VAR 0 1
49108: NEG
49109: PPUSH
49110: LD_VAR 0 1
49114: PPUSH
49115: CALL_OW 12
49119: ST_TO_ADDR
// end ;
49120: LD_VAR 0 2
49124: RET
// export function PrepareEnchidna ( ) ; begin
49125: LD_INT 0
49127: PPUSH
// uc_side := 0 ;
49128: LD_ADDR_OWVAR 20
49132: PUSH
49133: LD_INT 0
49135: ST_TO_ADDR
// uc_nation := 0 ;
49136: LD_ADDR_OWVAR 21
49140: PUSH
49141: LD_INT 0
49143: ST_TO_ADDR
// hc_class := class_baggie ;
49144: LD_ADDR_OWVAR 28
49148: PUSH
49149: LD_INT 13
49151: ST_TO_ADDR
// hc_gallery :=  ;
49152: LD_ADDR_OWVAR 33
49156: PUSH
49157: LD_STRING 
49159: ST_TO_ADDR
// end ;
49160: LD_VAR 0 1
49164: RET
// export function PrepareFrog ( ) ; begin
49165: LD_INT 0
49167: PPUSH
// uc_side := 0 ;
49168: LD_ADDR_OWVAR 20
49172: PUSH
49173: LD_INT 0
49175: ST_TO_ADDR
// uc_nation := 0 ;
49176: LD_ADDR_OWVAR 21
49180: PUSH
49181: LD_INT 0
49183: ST_TO_ADDR
// hc_class := class_frog ;
49184: LD_ADDR_OWVAR 28
49188: PUSH
49189: LD_INT 19
49191: ST_TO_ADDR
// hc_gallery :=  ;
49192: LD_ADDR_OWVAR 33
49196: PUSH
49197: LD_STRING 
49199: ST_TO_ADDR
// end ;
49200: LD_VAR 0 1
49204: RET
// export function PrepareFish ( ) ; begin
49205: LD_INT 0
49207: PPUSH
// uc_side := 0 ;
49208: LD_ADDR_OWVAR 20
49212: PUSH
49213: LD_INT 0
49215: ST_TO_ADDR
// uc_nation := 0 ;
49216: LD_ADDR_OWVAR 21
49220: PUSH
49221: LD_INT 0
49223: ST_TO_ADDR
// hc_class := class_fish ;
49224: LD_ADDR_OWVAR 28
49228: PUSH
49229: LD_INT 20
49231: ST_TO_ADDR
// hc_gallery :=  ;
49232: LD_ADDR_OWVAR 33
49236: PUSH
49237: LD_STRING 
49239: ST_TO_ADDR
// end ;
49240: LD_VAR 0 1
49244: RET
// export function PrepareBird ( ) ; begin
49245: LD_INT 0
49247: PPUSH
// uc_side := 0 ;
49248: LD_ADDR_OWVAR 20
49252: PUSH
49253: LD_INT 0
49255: ST_TO_ADDR
// uc_nation := 0 ;
49256: LD_ADDR_OWVAR 21
49260: PUSH
49261: LD_INT 0
49263: ST_TO_ADDR
// hc_class := class_phororhacos ;
49264: LD_ADDR_OWVAR 28
49268: PUSH
49269: LD_INT 18
49271: ST_TO_ADDR
// hc_gallery :=  ;
49272: LD_ADDR_OWVAR 33
49276: PUSH
49277: LD_STRING 
49279: ST_TO_ADDR
// end ;
49280: LD_VAR 0 1
49284: RET
// export function PrepareHorse ( ) ; begin
49285: LD_INT 0
49287: PPUSH
// uc_side := 0 ;
49288: LD_ADDR_OWVAR 20
49292: PUSH
49293: LD_INT 0
49295: ST_TO_ADDR
// uc_nation := 0 ;
49296: LD_ADDR_OWVAR 21
49300: PUSH
49301: LD_INT 0
49303: ST_TO_ADDR
// hc_class := class_horse ;
49304: LD_ADDR_OWVAR 28
49308: PUSH
49309: LD_INT 21
49311: ST_TO_ADDR
// hc_gallery :=  ;
49312: LD_ADDR_OWVAR 33
49316: PUSH
49317: LD_STRING 
49319: ST_TO_ADDR
// end ;
49320: LD_VAR 0 1
49324: RET
// export function PrepareMastodont ( ) ; begin
49325: LD_INT 0
49327: PPUSH
// uc_side := 0 ;
49328: LD_ADDR_OWVAR 20
49332: PUSH
49333: LD_INT 0
49335: ST_TO_ADDR
// uc_nation := 0 ;
49336: LD_ADDR_OWVAR 21
49340: PUSH
49341: LD_INT 0
49343: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49344: LD_ADDR_OWVAR 37
49348: PUSH
49349: LD_INT 31
49351: ST_TO_ADDR
// vc_control := control_rider ;
49352: LD_ADDR_OWVAR 38
49356: PUSH
49357: LD_INT 4
49359: ST_TO_ADDR
// end ;
49360: LD_VAR 0 1
49364: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49365: LD_INT 0
49367: PPUSH
49368: PPUSH
49369: PPUSH
// uc_side = 0 ;
49370: LD_ADDR_OWVAR 20
49374: PUSH
49375: LD_INT 0
49377: ST_TO_ADDR
// uc_nation = 0 ;
49378: LD_ADDR_OWVAR 21
49382: PUSH
49383: LD_INT 0
49385: ST_TO_ADDR
// InitHc_All ( ) ;
49386: CALL_OW 584
// InitVc ;
49390: CALL_OW 20
// if mastodonts then
49394: LD_VAR 0 6
49398: IFFALSE 49465
// for i = 1 to mastodonts do
49400: LD_ADDR_VAR 0 11
49404: PUSH
49405: DOUBLE
49406: LD_INT 1
49408: DEC
49409: ST_TO_ADDR
49410: LD_VAR 0 6
49414: PUSH
49415: FOR_TO
49416: IFFALSE 49463
// begin vc_chassis := 31 ;
49418: LD_ADDR_OWVAR 37
49422: PUSH
49423: LD_INT 31
49425: ST_TO_ADDR
// vc_control := control_rider ;
49426: LD_ADDR_OWVAR 38
49430: PUSH
49431: LD_INT 4
49433: ST_TO_ADDR
// animal := CreateVehicle ;
49434: LD_ADDR_VAR 0 12
49438: PUSH
49439: CALL_OW 45
49443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49444: LD_VAR 0 12
49448: PPUSH
49449: LD_VAR 0 8
49453: PPUSH
49454: LD_INT 0
49456: PPUSH
49457: CALL 51600 0 3
// end ;
49461: GO 49415
49463: POP
49464: POP
// if horses then
49465: LD_VAR 0 5
49469: IFFALSE 49536
// for i = 1 to horses do
49471: LD_ADDR_VAR 0 11
49475: PUSH
49476: DOUBLE
49477: LD_INT 1
49479: DEC
49480: ST_TO_ADDR
49481: LD_VAR 0 5
49485: PUSH
49486: FOR_TO
49487: IFFALSE 49534
// begin hc_class := 21 ;
49489: LD_ADDR_OWVAR 28
49493: PUSH
49494: LD_INT 21
49496: ST_TO_ADDR
// hc_gallery :=  ;
49497: LD_ADDR_OWVAR 33
49501: PUSH
49502: LD_STRING 
49504: ST_TO_ADDR
// animal := CreateHuman ;
49505: LD_ADDR_VAR 0 12
49509: PUSH
49510: CALL_OW 44
49514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49515: LD_VAR 0 12
49519: PPUSH
49520: LD_VAR 0 8
49524: PPUSH
49525: LD_INT 0
49527: PPUSH
49528: CALL 51600 0 3
// end ;
49532: GO 49486
49534: POP
49535: POP
// if birds then
49536: LD_VAR 0 1
49540: IFFALSE 49607
// for i = 1 to birds do
49542: LD_ADDR_VAR 0 11
49546: PUSH
49547: DOUBLE
49548: LD_INT 1
49550: DEC
49551: ST_TO_ADDR
49552: LD_VAR 0 1
49556: PUSH
49557: FOR_TO
49558: IFFALSE 49605
// begin hc_class = 18 ;
49560: LD_ADDR_OWVAR 28
49564: PUSH
49565: LD_INT 18
49567: ST_TO_ADDR
// hc_gallery =  ;
49568: LD_ADDR_OWVAR 33
49572: PUSH
49573: LD_STRING 
49575: ST_TO_ADDR
// animal := CreateHuman ;
49576: LD_ADDR_VAR 0 12
49580: PUSH
49581: CALL_OW 44
49585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49586: LD_VAR 0 12
49590: PPUSH
49591: LD_VAR 0 8
49595: PPUSH
49596: LD_INT 0
49598: PPUSH
49599: CALL 51600 0 3
// end ;
49603: GO 49557
49605: POP
49606: POP
// if tigers then
49607: LD_VAR 0 2
49611: IFFALSE 49695
// for i = 1 to tigers do
49613: LD_ADDR_VAR 0 11
49617: PUSH
49618: DOUBLE
49619: LD_INT 1
49621: DEC
49622: ST_TO_ADDR
49623: LD_VAR 0 2
49627: PUSH
49628: FOR_TO
49629: IFFALSE 49693
// begin hc_class = class_tiger ;
49631: LD_ADDR_OWVAR 28
49635: PUSH
49636: LD_INT 14
49638: ST_TO_ADDR
// hc_gallery =  ;
49639: LD_ADDR_OWVAR 33
49643: PUSH
49644: LD_STRING 
49646: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49647: LD_ADDR_OWVAR 35
49651: PUSH
49652: LD_INT 7
49654: NEG
49655: PPUSH
49656: LD_INT 7
49658: PPUSH
49659: CALL_OW 12
49663: ST_TO_ADDR
// animal := CreateHuman ;
49664: LD_ADDR_VAR 0 12
49668: PUSH
49669: CALL_OW 44
49673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49674: LD_VAR 0 12
49678: PPUSH
49679: LD_VAR 0 8
49683: PPUSH
49684: LD_INT 0
49686: PPUSH
49687: CALL 51600 0 3
// end ;
49691: GO 49628
49693: POP
49694: POP
// if apemans then
49695: LD_VAR 0 3
49699: IFFALSE 49822
// for i = 1 to apemans do
49701: LD_ADDR_VAR 0 11
49705: PUSH
49706: DOUBLE
49707: LD_INT 1
49709: DEC
49710: ST_TO_ADDR
49711: LD_VAR 0 3
49715: PUSH
49716: FOR_TO
49717: IFFALSE 49820
// begin hc_class = class_apeman ;
49719: LD_ADDR_OWVAR 28
49723: PUSH
49724: LD_INT 12
49726: ST_TO_ADDR
// hc_gallery =  ;
49727: LD_ADDR_OWVAR 33
49731: PUSH
49732: LD_STRING 
49734: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49735: LD_ADDR_OWVAR 35
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PPUSH
49744: LD_INT 2
49746: PPUSH
49747: CALL_OW 12
49751: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49752: LD_ADDR_OWVAR 31
49756: PUSH
49757: LD_INT 1
49759: PPUSH
49760: LD_INT 3
49762: PPUSH
49763: CALL_OW 12
49767: PUSH
49768: LD_INT 1
49770: PPUSH
49771: LD_INT 3
49773: PPUSH
49774: CALL_OW 12
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
// animal := CreateHuman ;
49791: LD_ADDR_VAR 0 12
49795: PUSH
49796: CALL_OW 44
49800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49801: LD_VAR 0 12
49805: PPUSH
49806: LD_VAR 0 8
49810: PPUSH
49811: LD_INT 0
49813: PPUSH
49814: CALL 51600 0 3
// end ;
49818: GO 49716
49820: POP
49821: POP
// if enchidnas then
49822: LD_VAR 0 4
49826: IFFALSE 49893
// for i = 1 to enchidnas do
49828: LD_ADDR_VAR 0 11
49832: PUSH
49833: DOUBLE
49834: LD_INT 1
49836: DEC
49837: ST_TO_ADDR
49838: LD_VAR 0 4
49842: PUSH
49843: FOR_TO
49844: IFFALSE 49891
// begin hc_class = 13 ;
49846: LD_ADDR_OWVAR 28
49850: PUSH
49851: LD_INT 13
49853: ST_TO_ADDR
// hc_gallery =  ;
49854: LD_ADDR_OWVAR 33
49858: PUSH
49859: LD_STRING 
49861: ST_TO_ADDR
// animal := CreateHuman ;
49862: LD_ADDR_VAR 0 12
49866: PUSH
49867: CALL_OW 44
49871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49872: LD_VAR 0 12
49876: PPUSH
49877: LD_VAR 0 8
49881: PPUSH
49882: LD_INT 0
49884: PPUSH
49885: CALL 51600 0 3
// end ;
49889: GO 49843
49891: POP
49892: POP
// if fishes then
49893: LD_VAR 0 7
49897: IFFALSE 49964
// for i = 1 to fishes do
49899: LD_ADDR_VAR 0 11
49903: PUSH
49904: DOUBLE
49905: LD_INT 1
49907: DEC
49908: ST_TO_ADDR
49909: LD_VAR 0 7
49913: PUSH
49914: FOR_TO
49915: IFFALSE 49962
// begin hc_class = 20 ;
49917: LD_ADDR_OWVAR 28
49921: PUSH
49922: LD_INT 20
49924: ST_TO_ADDR
// hc_gallery =  ;
49925: LD_ADDR_OWVAR 33
49929: PUSH
49930: LD_STRING 
49932: ST_TO_ADDR
// animal := CreateHuman ;
49933: LD_ADDR_VAR 0 12
49937: PUSH
49938: CALL_OW 44
49942: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49943: LD_VAR 0 12
49947: PPUSH
49948: LD_VAR 0 9
49952: PPUSH
49953: LD_INT 0
49955: PPUSH
49956: CALL 51600 0 3
// end ;
49960: GO 49914
49962: POP
49963: POP
// end ;
49964: LD_VAR 0 10
49968: RET
// export function WantHeal ( sci , unit ) ; begin
49969: LD_INT 0
49971: PPUSH
// if GetTaskList ( sci ) > 0 then
49972: LD_VAR 0 1
49976: PPUSH
49977: CALL_OW 437
49981: PUSH
49982: LD_INT 0
49984: GREATER
49985: IFFALSE 50055
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49987: LD_VAR 0 1
49991: PPUSH
49992: CALL_OW 437
49996: PUSH
49997: LD_INT 1
49999: ARRAY
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PUSH
50005: LD_STRING l
50007: EQUAL
50008: PUSH
50009: LD_VAR 0 1
50013: PPUSH
50014: CALL_OW 437
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: PUSH
50023: LD_INT 4
50025: ARRAY
50026: PUSH
50027: LD_VAR 0 2
50031: EQUAL
50032: AND
50033: IFFALSE 50045
// result := true else
50035: LD_ADDR_VAR 0 3
50039: PUSH
50040: LD_INT 1
50042: ST_TO_ADDR
50043: GO 50053
// result := false ;
50045: LD_ADDR_VAR 0 3
50049: PUSH
50050: LD_INT 0
50052: ST_TO_ADDR
// end else
50053: GO 50063
// result := false ;
50055: LD_ADDR_VAR 0 3
50059: PUSH
50060: LD_INT 0
50062: ST_TO_ADDR
// end ;
50063: LD_VAR 0 3
50067: RET
// export function HealTarget ( sci ) ; begin
50068: LD_INT 0
50070: PPUSH
// if not sci then
50071: LD_VAR 0 1
50075: NOT
50076: IFFALSE 50080
// exit ;
50078: GO 50145
// result := 0 ;
50080: LD_ADDR_VAR 0 2
50084: PUSH
50085: LD_INT 0
50087: ST_TO_ADDR
// if GetTaskList ( sci ) then
50088: LD_VAR 0 1
50092: PPUSH
50093: CALL_OW 437
50097: IFFALSE 50145
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50099: LD_VAR 0 1
50103: PPUSH
50104: CALL_OW 437
50108: PUSH
50109: LD_INT 1
50111: ARRAY
50112: PUSH
50113: LD_INT 1
50115: ARRAY
50116: PUSH
50117: LD_STRING l
50119: EQUAL
50120: IFFALSE 50145
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50122: LD_ADDR_VAR 0 2
50126: PUSH
50127: LD_VAR 0 1
50131: PPUSH
50132: CALL_OW 437
50136: PUSH
50137: LD_INT 1
50139: ARRAY
50140: PUSH
50141: LD_INT 4
50143: ARRAY
50144: ST_TO_ADDR
// end ;
50145: LD_VAR 0 2
50149: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50150: LD_INT 0
50152: PPUSH
50153: PPUSH
50154: PPUSH
50155: PPUSH
// if not base_units then
50156: LD_VAR 0 1
50160: NOT
50161: IFFALSE 50165
// exit ;
50163: GO 50252
// result := false ;
50165: LD_ADDR_VAR 0 2
50169: PUSH
50170: LD_INT 0
50172: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50173: LD_ADDR_VAR 0 5
50177: PUSH
50178: LD_VAR 0 1
50182: PPUSH
50183: LD_INT 21
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PPUSH
50193: CALL_OW 72
50197: ST_TO_ADDR
// if not tmp then
50198: LD_VAR 0 5
50202: NOT
50203: IFFALSE 50207
// exit ;
50205: GO 50252
// for i in tmp do
50207: LD_ADDR_VAR 0 3
50211: PUSH
50212: LD_VAR 0 5
50216: PUSH
50217: FOR_IN
50218: IFFALSE 50250
// begin result := EnemyInRange ( i , 22 ) ;
50220: LD_ADDR_VAR 0 2
50224: PUSH
50225: LD_VAR 0 3
50229: PPUSH
50230: LD_INT 22
50232: PPUSH
50233: CALL 47865 0 2
50237: ST_TO_ADDR
// if result then
50238: LD_VAR 0 2
50242: IFFALSE 50248
// exit ;
50244: POP
50245: POP
50246: GO 50252
// end ;
50248: GO 50217
50250: POP
50251: POP
// end ;
50252: LD_VAR 0 2
50256: RET
// export function FilterByTag ( units , tag ) ; begin
50257: LD_INT 0
50259: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50260: LD_ADDR_VAR 0 3
50264: PUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: LD_INT 120
50272: PUSH
50273: LD_VAR 0 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PPUSH
50282: CALL_OW 72
50286: ST_TO_ADDR
// end ;
50287: LD_VAR 0 3
50291: RET
// export function IsDriver ( un ) ; begin
50292: LD_INT 0
50294: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50295: LD_ADDR_VAR 0 2
50299: PUSH
50300: LD_VAR 0 1
50304: PUSH
50305: LD_INT 55
50307: PUSH
50308: EMPTY
50309: LIST
50310: PPUSH
50311: CALL_OW 69
50315: IN
50316: ST_TO_ADDR
// end ;
50317: LD_VAR 0 2
50321: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50322: LD_INT 0
50324: PPUSH
50325: PPUSH
// list := [ ] ;
50326: LD_ADDR_VAR 0 5
50330: PUSH
50331: EMPTY
50332: ST_TO_ADDR
// case d of 0 :
50333: LD_VAR 0 3
50337: PUSH
50338: LD_INT 0
50340: DOUBLE
50341: EQUAL
50342: IFTRUE 50346
50344: GO 50479
50346: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50347: LD_ADDR_VAR 0 5
50351: PUSH
50352: LD_VAR 0 1
50356: PUSH
50357: LD_INT 4
50359: MINUS
50360: PUSH
50361: LD_VAR 0 2
50365: PUSH
50366: LD_INT 4
50368: MINUS
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: PUSH
50378: LD_VAR 0 1
50382: PUSH
50383: LD_INT 3
50385: MINUS
50386: PUSH
50387: LD_VAR 0 2
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: PUSH
50400: LD_VAR 0 1
50404: PUSH
50405: LD_INT 4
50407: PLUS
50408: PUSH
50409: LD_VAR 0 2
50413: PUSH
50414: LD_INT 4
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: PUSH
50422: LD_VAR 0 1
50426: PUSH
50427: LD_INT 3
50429: PLUS
50430: PUSH
50431: LD_VAR 0 2
50435: PUSH
50436: LD_INT 3
50438: PLUS
50439: PUSH
50440: LD_INT 5
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: PUSH
50448: LD_VAR 0 1
50452: PUSH
50453: LD_VAR 0 2
50457: PUSH
50458: LD_INT 4
50460: PLUS
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// end ; 1 :
50477: GO 51177
50479: LD_INT 1
50481: DOUBLE
50482: EQUAL
50483: IFTRUE 50487
50485: GO 50620
50487: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50488: LD_ADDR_VAR 0 5
50492: PUSH
50493: LD_VAR 0 1
50497: PUSH
50498: LD_VAR 0 2
50502: PUSH
50503: LD_INT 4
50505: MINUS
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: PUSH
50515: LD_VAR 0 1
50519: PUSH
50520: LD_INT 3
50522: MINUS
50523: PUSH
50524: LD_VAR 0 2
50528: PUSH
50529: LD_INT 3
50531: MINUS
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: PUSH
50541: LD_VAR 0 1
50545: PUSH
50546: LD_INT 4
50548: MINUS
50549: PUSH
50550: LD_VAR 0 2
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: PUSH
50563: LD_VAR 0 1
50567: PUSH
50568: LD_VAR 0 2
50572: PUSH
50573: LD_INT 3
50575: PLUS
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: PUSH
50585: LD_VAR 0 1
50589: PUSH
50590: LD_INT 4
50592: PLUS
50593: PUSH
50594: LD_VAR 0 2
50598: PUSH
50599: LD_INT 4
50601: PLUS
50602: PUSH
50603: LD_INT 5
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: ST_TO_ADDR
// end ; 2 :
50618: GO 51177
50620: LD_INT 2
50622: DOUBLE
50623: EQUAL
50624: IFTRUE 50628
50626: GO 50757
50628: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50629: LD_ADDR_VAR 0 5
50633: PUSH
50634: LD_VAR 0 1
50638: PUSH
50639: LD_VAR 0 2
50643: PUSH
50644: LD_INT 3
50646: MINUS
50647: PUSH
50648: LD_INT 3
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: PUSH
50656: LD_VAR 0 1
50660: PUSH
50661: LD_INT 4
50663: PLUS
50664: PUSH
50665: LD_VAR 0 2
50669: PUSH
50670: LD_INT 4
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: PUSH
50678: LD_VAR 0 1
50682: PUSH
50683: LD_VAR 0 2
50687: PUSH
50688: LD_INT 4
50690: PLUS
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: PUSH
50700: LD_VAR 0 1
50704: PUSH
50705: LD_INT 3
50707: MINUS
50708: PUSH
50709: LD_VAR 0 2
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: PUSH
50722: LD_VAR 0 1
50726: PUSH
50727: LD_INT 4
50729: MINUS
50730: PUSH
50731: LD_VAR 0 2
50735: PUSH
50736: LD_INT 4
50738: MINUS
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// end ; 3 :
50755: GO 51177
50757: LD_INT 3
50759: DOUBLE
50760: EQUAL
50761: IFTRUE 50765
50763: GO 50898
50765: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50766: LD_ADDR_VAR 0 5
50770: PUSH
50771: LD_VAR 0 1
50775: PUSH
50776: LD_INT 3
50778: PLUS
50779: PUSH
50780: LD_VAR 0 2
50784: PUSH
50785: LD_INT 4
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: PUSH
50793: LD_VAR 0 1
50797: PUSH
50798: LD_INT 4
50800: PLUS
50801: PUSH
50802: LD_VAR 0 2
50806: PUSH
50807: LD_INT 4
50809: PLUS
50810: PUSH
50811: LD_INT 5
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: PUSH
50819: LD_VAR 0 1
50823: PUSH
50824: LD_INT 4
50826: MINUS
50827: PUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: PUSH
50841: LD_VAR 0 1
50845: PUSH
50846: LD_VAR 0 2
50850: PUSH
50851: LD_INT 4
50853: MINUS
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: PUSH
50863: LD_VAR 0 1
50867: PUSH
50868: LD_INT 3
50870: MINUS
50871: PUSH
50872: LD_VAR 0 2
50876: PUSH
50877: LD_INT 3
50879: MINUS
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: ST_TO_ADDR
// end ; 4 :
50896: GO 51177
50898: LD_INT 4
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50906
50904: GO 51039
50906: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50907: LD_ADDR_VAR 0 5
50911: PUSH
50912: LD_VAR 0 1
50916: PUSH
50917: LD_VAR 0 2
50921: PUSH
50922: LD_INT 4
50924: PLUS
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: PUSH
50934: LD_VAR 0 1
50938: PUSH
50939: LD_INT 3
50941: PLUS
50942: PUSH
50943: LD_VAR 0 2
50947: PUSH
50948: LD_INT 3
50950: PLUS
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: PUSH
50960: LD_VAR 0 1
50964: PUSH
50965: LD_INT 4
50967: PLUS
50968: PUSH
50969: LD_VAR 0 2
50973: PUSH
50974: LD_INT 4
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: PUSH
50982: LD_VAR 0 1
50986: PUSH
50987: LD_VAR 0 2
50991: PUSH
50992: LD_INT 3
50994: MINUS
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: PUSH
51004: LD_VAR 0 1
51008: PUSH
51009: LD_INT 4
51011: MINUS
51012: PUSH
51013: LD_VAR 0 2
51017: PUSH
51018: LD_INT 4
51020: MINUS
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// end ; 5 :
51037: GO 51177
51039: LD_INT 5
51041: DOUBLE
51042: EQUAL
51043: IFTRUE 51047
51045: GO 51176
51047: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51048: LD_ADDR_VAR 0 5
51052: PUSH
51053: LD_VAR 0 1
51057: PUSH
51058: LD_INT 4
51060: MINUS
51061: PUSH
51062: LD_VAR 0 2
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: PUSH
51075: LD_VAR 0 1
51079: PUSH
51080: LD_VAR 0 2
51084: PUSH
51085: LD_INT 4
51087: MINUS
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: PUSH
51097: LD_VAR 0 1
51101: PUSH
51102: LD_INT 4
51104: PLUS
51105: PUSH
51106: LD_VAR 0 2
51110: PUSH
51111: LD_INT 4
51113: PLUS
51114: PUSH
51115: LD_INT 5
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: PUSH
51123: LD_VAR 0 1
51127: PUSH
51128: LD_INT 3
51130: PLUS
51131: PUSH
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: PUSH
51145: LD_VAR 0 1
51149: PUSH
51150: LD_VAR 0 2
51154: PUSH
51155: LD_INT 3
51157: PLUS
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: ST_TO_ADDR
// end ; end ;
51174: GO 51177
51176: POP
// result := list ;
51177: LD_ADDR_VAR 0 4
51181: PUSH
51182: LD_VAR 0 5
51186: ST_TO_ADDR
// end ;
51187: LD_VAR 0 4
51191: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51192: LD_INT 0
51194: PPUSH
51195: PPUSH
51196: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51197: LD_VAR 0 1
51201: NOT
51202: PUSH
51203: LD_VAR 0 2
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: IN
51226: NOT
51227: OR
51228: IFFALSE 51232
// exit ;
51230: GO 51324
// tmp := [ ] ;
51232: LD_ADDR_VAR 0 5
51236: PUSH
51237: EMPTY
51238: ST_TO_ADDR
// for i in units do
51239: LD_ADDR_VAR 0 4
51243: PUSH
51244: LD_VAR 0 1
51248: PUSH
51249: FOR_IN
51250: IFFALSE 51293
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51252: LD_ADDR_VAR 0 5
51256: PUSH
51257: LD_VAR 0 5
51261: PPUSH
51262: LD_VAR 0 5
51266: PUSH
51267: LD_INT 1
51269: PLUS
51270: PPUSH
51271: LD_VAR 0 4
51275: PPUSH
51276: LD_VAR 0 2
51280: PPUSH
51281: CALL_OW 259
51285: PPUSH
51286: CALL_OW 2
51290: ST_TO_ADDR
51291: GO 51249
51293: POP
51294: POP
// if not tmp then
51295: LD_VAR 0 5
51299: NOT
51300: IFFALSE 51304
// exit ;
51302: GO 51324
// result := SortListByListDesc ( units , tmp ) ;
51304: LD_ADDR_VAR 0 3
51308: PUSH
51309: LD_VAR 0 1
51313: PPUSH
51314: LD_VAR 0 5
51318: PPUSH
51319: CALL_OW 77
51323: ST_TO_ADDR
// end ;
51324: LD_VAR 0 3
51328: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51329: LD_INT 0
51331: PPUSH
51332: PPUSH
51333: PPUSH
// result := false ;
51334: LD_ADDR_VAR 0 3
51338: PUSH
51339: LD_INT 0
51341: ST_TO_ADDR
// x := GetX ( building ) ;
51342: LD_ADDR_VAR 0 4
51346: PUSH
51347: LD_VAR 0 2
51351: PPUSH
51352: CALL_OW 250
51356: ST_TO_ADDR
// y := GetY ( building ) ;
51357: LD_ADDR_VAR 0 5
51361: PUSH
51362: LD_VAR 0 2
51366: PPUSH
51367: CALL_OW 251
51371: ST_TO_ADDR
// if not building or not x or not y then
51372: LD_VAR 0 2
51376: NOT
51377: PUSH
51378: LD_VAR 0 4
51382: NOT
51383: OR
51384: PUSH
51385: LD_VAR 0 5
51389: NOT
51390: OR
51391: IFFALSE 51395
// exit ;
51393: GO 51487
// if GetTaskList ( unit ) then
51395: LD_VAR 0 1
51399: PPUSH
51400: CALL_OW 437
51404: IFFALSE 51487
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51406: LD_STRING e
51408: PUSH
51409: LD_VAR 0 1
51413: PPUSH
51414: CALL_OW 437
51418: PUSH
51419: LD_INT 1
51421: ARRAY
51422: PUSH
51423: LD_INT 1
51425: ARRAY
51426: EQUAL
51427: PUSH
51428: LD_VAR 0 4
51432: PUSH
51433: LD_VAR 0 1
51437: PPUSH
51438: CALL_OW 437
51442: PUSH
51443: LD_INT 1
51445: ARRAY
51446: PUSH
51447: LD_INT 2
51449: ARRAY
51450: EQUAL
51451: AND
51452: PUSH
51453: LD_VAR 0 5
51457: PUSH
51458: LD_VAR 0 1
51462: PPUSH
51463: CALL_OW 437
51467: PUSH
51468: LD_INT 1
51470: ARRAY
51471: PUSH
51472: LD_INT 3
51474: ARRAY
51475: EQUAL
51476: AND
51477: IFFALSE 51487
// result := true end ;
51479: LD_ADDR_VAR 0 3
51483: PUSH
51484: LD_INT 1
51486: ST_TO_ADDR
// end ;
51487: LD_VAR 0 3
51491: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51492: LD_INT 0
51494: PPUSH
// result := false ;
51495: LD_ADDR_VAR 0 4
51499: PUSH
51500: LD_INT 0
51502: ST_TO_ADDR
// if GetTaskList ( unit ) then
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 437
51512: IFFALSE 51595
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51514: LD_STRING M
51516: PUSH
51517: LD_VAR 0 1
51521: PPUSH
51522: CALL_OW 437
51526: PUSH
51527: LD_INT 1
51529: ARRAY
51530: PUSH
51531: LD_INT 1
51533: ARRAY
51534: EQUAL
51535: PUSH
51536: LD_VAR 0 2
51540: PUSH
51541: LD_VAR 0 1
51545: PPUSH
51546: CALL_OW 437
51550: PUSH
51551: LD_INT 1
51553: ARRAY
51554: PUSH
51555: LD_INT 2
51557: ARRAY
51558: EQUAL
51559: AND
51560: PUSH
51561: LD_VAR 0 3
51565: PUSH
51566: LD_VAR 0 1
51570: PPUSH
51571: CALL_OW 437
51575: PUSH
51576: LD_INT 1
51578: ARRAY
51579: PUSH
51580: LD_INT 3
51582: ARRAY
51583: EQUAL
51584: AND
51585: IFFALSE 51595
// result := true ;
51587: LD_ADDR_VAR 0 4
51591: PUSH
51592: LD_INT 1
51594: ST_TO_ADDR
// end ; end ;
51595: LD_VAR 0 4
51599: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51600: LD_INT 0
51602: PPUSH
51603: PPUSH
51604: PPUSH
51605: PPUSH
// if not unit or not area then
51606: LD_VAR 0 1
51610: NOT
51611: PUSH
51612: LD_VAR 0 2
51616: NOT
51617: OR
51618: IFFALSE 51622
// exit ;
51620: GO 51786
// tmp := AreaToList ( area , i ) ;
51622: LD_ADDR_VAR 0 6
51626: PUSH
51627: LD_VAR 0 2
51631: PPUSH
51632: LD_VAR 0 5
51636: PPUSH
51637: CALL_OW 517
51641: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51642: LD_ADDR_VAR 0 5
51646: PUSH
51647: DOUBLE
51648: LD_INT 1
51650: DEC
51651: ST_TO_ADDR
51652: LD_VAR 0 6
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: PUSH
51661: FOR_TO
51662: IFFALSE 51784
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51664: LD_ADDR_VAR 0 7
51668: PUSH
51669: LD_VAR 0 6
51673: PUSH
51674: LD_INT 1
51676: ARRAY
51677: PUSH
51678: LD_VAR 0 5
51682: ARRAY
51683: PUSH
51684: LD_VAR 0 6
51688: PUSH
51689: LD_INT 2
51691: ARRAY
51692: PUSH
51693: LD_VAR 0 5
51697: ARRAY
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51703: LD_VAR 0 7
51707: PUSH
51708: LD_INT 1
51710: ARRAY
51711: PPUSH
51712: LD_VAR 0 7
51716: PUSH
51717: LD_INT 2
51719: ARRAY
51720: PPUSH
51721: CALL_OW 428
51725: PUSH
51726: LD_INT 0
51728: EQUAL
51729: IFFALSE 51782
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51731: LD_VAR 0 1
51735: PPUSH
51736: LD_VAR 0 7
51740: PUSH
51741: LD_INT 1
51743: ARRAY
51744: PPUSH
51745: LD_VAR 0 7
51749: PUSH
51750: LD_INT 2
51752: ARRAY
51753: PPUSH
51754: LD_VAR 0 3
51758: PPUSH
51759: CALL_OW 48
// result := IsPlaced ( unit ) ;
51763: LD_ADDR_VAR 0 4
51767: PUSH
51768: LD_VAR 0 1
51772: PPUSH
51773: CALL_OW 305
51777: ST_TO_ADDR
// exit ;
51778: POP
51779: POP
51780: GO 51786
// end ; end ;
51782: GO 51661
51784: POP
51785: POP
// end ;
51786: LD_VAR 0 4
51790: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51791: LD_INT 0
51793: PPUSH
51794: PPUSH
51795: PPUSH
// if not side or side > 8 then
51796: LD_VAR 0 1
51800: NOT
51801: PUSH
51802: LD_VAR 0 1
51806: PUSH
51807: LD_INT 8
51809: GREATER
51810: OR
51811: IFFALSE 51815
// exit ;
51813: GO 52002
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51815: LD_ADDR_VAR 0 4
51819: PUSH
51820: LD_INT 22
51822: PUSH
51823: LD_VAR 0 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 21
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PPUSH
51846: CALL_OW 69
51850: ST_TO_ADDR
// if not tmp then
51851: LD_VAR 0 4
51855: NOT
51856: IFFALSE 51860
// exit ;
51858: GO 52002
// enable_addtolog := true ;
51860: LD_ADDR_OWVAR 81
51864: PUSH
51865: LD_INT 1
51867: ST_TO_ADDR
// AddToLog ( [ ) ;
51868: LD_STRING [
51870: PPUSH
51871: CALL_OW 561
// for i in tmp do
51875: LD_ADDR_VAR 0 3
51879: PUSH
51880: LD_VAR 0 4
51884: PUSH
51885: FOR_IN
51886: IFFALSE 51993
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51888: LD_STRING [
51890: PUSH
51891: LD_VAR 0 3
51895: PPUSH
51896: CALL_OW 266
51900: STR
51901: PUSH
51902: LD_STRING , 
51904: STR
51905: PUSH
51906: LD_VAR 0 3
51910: PPUSH
51911: CALL_OW 250
51915: STR
51916: PUSH
51917: LD_STRING , 
51919: STR
51920: PUSH
51921: LD_VAR 0 3
51925: PPUSH
51926: CALL_OW 251
51930: STR
51931: PUSH
51932: LD_STRING , 
51934: STR
51935: PUSH
51936: LD_VAR 0 3
51940: PPUSH
51941: CALL_OW 254
51945: STR
51946: PUSH
51947: LD_STRING , 
51949: STR
51950: PUSH
51951: LD_VAR 0 3
51955: PPUSH
51956: LD_INT 1
51958: PPUSH
51959: CALL_OW 268
51963: STR
51964: PUSH
51965: LD_STRING , 
51967: STR
51968: PUSH
51969: LD_VAR 0 3
51973: PPUSH
51974: LD_INT 2
51976: PPUSH
51977: CALL_OW 268
51981: STR
51982: PUSH
51983: LD_STRING ],
51985: STR
51986: PPUSH
51987: CALL_OW 561
// end ;
51991: GO 51885
51993: POP
51994: POP
// AddToLog ( ]; ) ;
51995: LD_STRING ];
51997: PPUSH
51998: CALL_OW 561
// end ;
52002: LD_VAR 0 2
52006: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52007: LD_INT 0
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
// if not area or not rate or not max then
52014: LD_VAR 0 1
52018: NOT
52019: PUSH
52020: LD_VAR 0 2
52024: NOT
52025: OR
52026: PUSH
52027: LD_VAR 0 4
52031: NOT
52032: OR
52033: IFFALSE 52037
// exit ;
52035: GO 52226
// while 1 do
52037: LD_INT 1
52039: IFFALSE 52226
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52041: LD_ADDR_VAR 0 9
52045: PUSH
52046: LD_VAR 0 1
52050: PPUSH
52051: LD_INT 1
52053: PPUSH
52054: CALL_OW 287
52058: PUSH
52059: LD_INT 10
52061: MUL
52062: ST_TO_ADDR
// r := rate / 10 ;
52063: LD_ADDR_VAR 0 7
52067: PUSH
52068: LD_VAR 0 2
52072: PUSH
52073: LD_INT 10
52075: DIVREAL
52076: ST_TO_ADDR
// time := 1 1$00 ;
52077: LD_ADDR_VAR 0 8
52081: PUSH
52082: LD_INT 2100
52084: ST_TO_ADDR
// if amount < min then
52085: LD_VAR 0 9
52089: PUSH
52090: LD_VAR 0 3
52094: LESS
52095: IFFALSE 52113
// r := r * 2 else
52097: LD_ADDR_VAR 0 7
52101: PUSH
52102: LD_VAR 0 7
52106: PUSH
52107: LD_INT 2
52109: MUL
52110: ST_TO_ADDR
52111: GO 52139
// if amount > max then
52113: LD_VAR 0 9
52117: PUSH
52118: LD_VAR 0 4
52122: GREATER
52123: IFFALSE 52139
// r := r / 2 ;
52125: LD_ADDR_VAR 0 7
52129: PUSH
52130: LD_VAR 0 7
52134: PUSH
52135: LD_INT 2
52137: DIVREAL
52138: ST_TO_ADDR
// time := time / r ;
52139: LD_ADDR_VAR 0 8
52143: PUSH
52144: LD_VAR 0 8
52148: PUSH
52149: LD_VAR 0 7
52153: DIVREAL
52154: ST_TO_ADDR
// if time < 0 then
52155: LD_VAR 0 8
52159: PUSH
52160: LD_INT 0
52162: LESS
52163: IFFALSE 52180
// time := time * - 1 ;
52165: LD_ADDR_VAR 0 8
52169: PUSH
52170: LD_VAR 0 8
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: MUL
52179: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52180: LD_VAR 0 8
52184: PUSH
52185: LD_INT 35
52187: PPUSH
52188: LD_INT 875
52190: PPUSH
52191: CALL_OW 12
52195: PLUS
52196: PPUSH
52197: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52201: LD_INT 1
52203: PPUSH
52204: LD_INT 5
52206: PPUSH
52207: CALL_OW 12
52211: PPUSH
52212: LD_VAR 0 1
52216: PPUSH
52217: LD_INT 1
52219: PPUSH
52220: CALL_OW 55
// end ;
52224: GO 52037
// end ;
52226: LD_VAR 0 5
52230: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52231: LD_INT 0
52233: PPUSH
52234: PPUSH
52235: PPUSH
52236: PPUSH
52237: PPUSH
52238: PPUSH
52239: PPUSH
52240: PPUSH
// if not turrets or not factories then
52241: LD_VAR 0 1
52245: NOT
52246: PUSH
52247: LD_VAR 0 2
52251: NOT
52252: OR
52253: IFFALSE 52257
// exit ;
52255: GO 52564
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52257: LD_ADDR_VAR 0 10
52261: PUSH
52262: LD_INT 5
52264: PUSH
52265: LD_INT 6
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: LD_INT 5
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 24
52299: PUSH
52300: LD_INT 25
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 23
52309: PUSH
52310: LD_INT 27
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 42
52323: PUSH
52324: LD_INT 43
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 44
52333: PUSH
52334: LD_INT 46
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 45
52343: PUSH
52344: LD_INT 47
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// result := [ ] ;
52361: LD_ADDR_VAR 0 3
52365: PUSH
52366: EMPTY
52367: ST_TO_ADDR
// for i in turrets do
52368: LD_ADDR_VAR 0 4
52372: PUSH
52373: LD_VAR 0 1
52377: PUSH
52378: FOR_IN
52379: IFFALSE 52562
// begin nat := GetNation ( i ) ;
52381: LD_ADDR_VAR 0 7
52385: PUSH
52386: LD_VAR 0 4
52390: PPUSH
52391: CALL_OW 248
52395: ST_TO_ADDR
// weapon := 0 ;
52396: LD_ADDR_VAR 0 8
52400: PUSH
52401: LD_INT 0
52403: ST_TO_ADDR
// if not nat then
52404: LD_VAR 0 7
52408: NOT
52409: IFFALSE 52413
// continue ;
52411: GO 52378
// for j in list [ nat ] do
52413: LD_ADDR_VAR 0 5
52417: PUSH
52418: LD_VAR 0 10
52422: PUSH
52423: LD_VAR 0 7
52427: ARRAY
52428: PUSH
52429: FOR_IN
52430: IFFALSE 52471
// if GetBWeapon ( i ) = j [ 1 ] then
52432: LD_VAR 0 4
52436: PPUSH
52437: CALL_OW 269
52441: PUSH
52442: LD_VAR 0 5
52446: PUSH
52447: LD_INT 1
52449: ARRAY
52450: EQUAL
52451: IFFALSE 52469
// begin weapon := j [ 2 ] ;
52453: LD_ADDR_VAR 0 8
52457: PUSH
52458: LD_VAR 0 5
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: ST_TO_ADDR
// break ;
52467: GO 52471
// end ;
52469: GO 52429
52471: POP
52472: POP
// if not weapon then
52473: LD_VAR 0 8
52477: NOT
52478: IFFALSE 52482
// continue ;
52480: GO 52378
// for k in factories do
52482: LD_ADDR_VAR 0 6
52486: PUSH
52487: LD_VAR 0 2
52491: PUSH
52492: FOR_IN
52493: IFFALSE 52558
// begin weapons := AvailableWeaponList ( k ) ;
52495: LD_ADDR_VAR 0 9
52499: PUSH
52500: LD_VAR 0 6
52504: PPUSH
52505: CALL_OW 478
52509: ST_TO_ADDR
// if not weapons then
52510: LD_VAR 0 9
52514: NOT
52515: IFFALSE 52519
// continue ;
52517: GO 52492
// if weapon in weapons then
52519: LD_VAR 0 8
52523: PUSH
52524: LD_VAR 0 9
52528: IN
52529: IFFALSE 52556
// begin result := [ i , weapon ] ;
52531: LD_ADDR_VAR 0 3
52535: PUSH
52536: LD_VAR 0 4
52540: PUSH
52541: LD_VAR 0 8
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: ST_TO_ADDR
// exit ;
52550: POP
52551: POP
52552: POP
52553: POP
52554: GO 52564
// end ; end ;
52556: GO 52492
52558: POP
52559: POP
// end ;
52560: GO 52378
52562: POP
52563: POP
// end ;
52564: LD_VAR 0 3
52568: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52569: LD_INT 0
52571: PPUSH
// if not side or side > 8 then
52572: LD_VAR 0 3
52576: NOT
52577: PUSH
52578: LD_VAR 0 3
52582: PUSH
52583: LD_INT 8
52585: GREATER
52586: OR
52587: IFFALSE 52591
// exit ;
52589: GO 52650
// if not range then
52591: LD_VAR 0 4
52595: NOT
52596: IFFALSE 52607
// range := - 12 ;
52598: LD_ADDR_VAR 0 4
52602: PUSH
52603: LD_INT 12
52605: NEG
52606: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52607: LD_VAR 0 1
52611: PPUSH
52612: LD_VAR 0 2
52616: PPUSH
52617: LD_VAR 0 3
52621: PPUSH
52622: LD_VAR 0 4
52626: PPUSH
52627: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52631: LD_VAR 0 1
52635: PPUSH
52636: LD_VAR 0 2
52640: PPUSH
52641: LD_VAR 0 3
52645: PPUSH
52646: CALL_OW 331
// end ;
52650: LD_VAR 0 5
52654: RET
// export function Video ( mode ) ; begin
52655: LD_INT 0
52657: PPUSH
// ingame_video = mode ;
52658: LD_ADDR_OWVAR 52
52662: PUSH
52663: LD_VAR 0 1
52667: ST_TO_ADDR
// interface_hidden = mode ;
52668: LD_ADDR_OWVAR 54
52672: PUSH
52673: LD_VAR 0 1
52677: ST_TO_ADDR
// end ;
52678: LD_VAR 0 2
52682: RET
// export function Join ( array , element ) ; begin
52683: LD_INT 0
52685: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52686: LD_ADDR_VAR 0 3
52690: PUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: LD_VAR 0 1
52700: PUSH
52701: LD_INT 1
52703: PLUS
52704: PPUSH
52705: LD_VAR 0 2
52709: PPUSH
52710: CALL_OW 1
52714: ST_TO_ADDR
// end ;
52715: LD_VAR 0 3
52719: RET
// export function JoinUnion ( array , element ) ; begin
52720: LD_INT 0
52722: PPUSH
// result := array union element ;
52723: LD_ADDR_VAR 0 3
52727: PUSH
52728: LD_VAR 0 1
52732: PUSH
52733: LD_VAR 0 2
52737: UNION
52738: ST_TO_ADDR
// end ;
52739: LD_VAR 0 3
52743: RET
// export function GetBehemoths ( side ) ; begin
52744: LD_INT 0
52746: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52747: LD_ADDR_VAR 0 2
52751: PUSH
52752: LD_INT 22
52754: PUSH
52755: LD_VAR 0 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 31
52766: PUSH
52767: LD_INT 25
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PPUSH
52778: CALL_OW 69
52782: ST_TO_ADDR
// end ;
52783: LD_VAR 0 2
52787: RET
// export function Shuffle ( array ) ; var i , index ; begin
52788: LD_INT 0
52790: PPUSH
52791: PPUSH
52792: PPUSH
// result := [ ] ;
52793: LD_ADDR_VAR 0 2
52797: PUSH
52798: EMPTY
52799: ST_TO_ADDR
// if not array then
52800: LD_VAR 0 1
52804: NOT
52805: IFFALSE 52809
// exit ;
52807: GO 52908
// Randomize ;
52809: CALL_OW 10
// for i = array downto 1 do
52813: LD_ADDR_VAR 0 3
52817: PUSH
52818: DOUBLE
52819: LD_VAR 0 1
52823: INC
52824: ST_TO_ADDR
52825: LD_INT 1
52827: PUSH
52828: FOR_DOWNTO
52829: IFFALSE 52906
// begin index := rand ( 1 , array ) ;
52831: LD_ADDR_VAR 0 4
52835: PUSH
52836: LD_INT 1
52838: PPUSH
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 12
52848: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52849: LD_ADDR_VAR 0 2
52853: PUSH
52854: LD_VAR 0 2
52858: PPUSH
52859: LD_VAR 0 2
52863: PUSH
52864: LD_INT 1
52866: PLUS
52867: PPUSH
52868: LD_VAR 0 1
52872: PUSH
52873: LD_VAR 0 4
52877: ARRAY
52878: PPUSH
52879: CALL_OW 2
52883: ST_TO_ADDR
// array := Delete ( array , index ) ;
52884: LD_ADDR_VAR 0 1
52888: PUSH
52889: LD_VAR 0 1
52893: PPUSH
52894: LD_VAR 0 4
52898: PPUSH
52899: CALL_OW 3
52903: ST_TO_ADDR
// end ;
52904: GO 52828
52906: POP
52907: POP
// end ;
52908: LD_VAR 0 2
52912: RET
// export function GetBaseMaterials ( base ) ; begin
52913: LD_INT 0
52915: PPUSH
// result := [ 0 , 0 , 0 ] ;
52916: LD_ADDR_VAR 0 2
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// if not base then
52935: LD_VAR 0 1
52939: NOT
52940: IFFALSE 52944
// exit ;
52942: GO 52993
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52944: LD_ADDR_VAR 0 2
52948: PUSH
52949: LD_VAR 0 1
52953: PPUSH
52954: LD_INT 1
52956: PPUSH
52957: CALL_OW 275
52961: PUSH
52962: LD_VAR 0 1
52966: PPUSH
52967: LD_INT 2
52969: PPUSH
52970: CALL_OW 275
52974: PUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: LD_INT 3
52982: PPUSH
52983: CALL_OW 275
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// end ;
52993: LD_VAR 0 2
52997: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52998: LD_INT 0
53000: PPUSH
53001: PPUSH
// result := array ;
53002: LD_ADDR_VAR 0 3
53006: PUSH
53007: LD_VAR 0 1
53011: ST_TO_ADDR
// if size >= result then
53012: LD_VAR 0 2
53016: PUSH
53017: LD_VAR 0 3
53021: GREATEREQUAL
53022: IFFALSE 53026
// exit ;
53024: GO 53076
// if size then
53026: LD_VAR 0 2
53030: IFFALSE 53076
// for i := array downto size do
53032: LD_ADDR_VAR 0 4
53036: PUSH
53037: DOUBLE
53038: LD_VAR 0 1
53042: INC
53043: ST_TO_ADDR
53044: LD_VAR 0 2
53048: PUSH
53049: FOR_DOWNTO
53050: IFFALSE 53074
// result := Delete ( result , result ) ;
53052: LD_ADDR_VAR 0 3
53056: PUSH
53057: LD_VAR 0 3
53061: PPUSH
53062: LD_VAR 0 3
53066: PPUSH
53067: CALL_OW 3
53071: ST_TO_ADDR
53072: GO 53049
53074: POP
53075: POP
// end ;
53076: LD_VAR 0 3
53080: RET
// export function ComExit ( unit ) ; var tmp ; begin
53081: LD_INT 0
53083: PPUSH
53084: PPUSH
// if not IsInUnit ( unit ) then
53085: LD_VAR 0 1
53089: PPUSH
53090: CALL_OW 310
53094: NOT
53095: IFFALSE 53099
// exit ;
53097: GO 53159
// tmp := IsInUnit ( unit ) ;
53099: LD_ADDR_VAR 0 3
53103: PUSH
53104: LD_VAR 0 1
53108: PPUSH
53109: CALL_OW 310
53113: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53114: LD_VAR 0 3
53118: PPUSH
53119: CALL_OW 247
53123: PUSH
53124: LD_INT 2
53126: EQUAL
53127: IFFALSE 53140
// ComExitVehicle ( unit ) else
53129: LD_VAR 0 1
53133: PPUSH
53134: CALL_OW 121
53138: GO 53149
// ComExitBuilding ( unit ) ;
53140: LD_VAR 0 1
53144: PPUSH
53145: CALL_OW 122
// result := tmp ;
53149: LD_ADDR_VAR 0 2
53153: PUSH
53154: LD_VAR 0 3
53158: ST_TO_ADDR
// end ;
53159: LD_VAR 0 2
53163: RET
// export function ComExitAll ( units ) ; var i ; begin
53164: LD_INT 0
53166: PPUSH
53167: PPUSH
// if not units then
53168: LD_VAR 0 1
53172: NOT
53173: IFFALSE 53177
// exit ;
53175: GO 53203
// for i in units do
53177: LD_ADDR_VAR 0 3
53181: PUSH
53182: LD_VAR 0 1
53186: PUSH
53187: FOR_IN
53188: IFFALSE 53201
// ComExit ( i ) ;
53190: LD_VAR 0 3
53194: PPUSH
53195: CALL 53081 0 1
53199: GO 53187
53201: POP
53202: POP
// end ;
53203: LD_VAR 0 2
53207: RET
// export function ResetHc ; begin
53208: LD_INT 0
53210: PPUSH
// InitHc ;
53211: CALL_OW 19
// hc_importance := 0 ;
53215: LD_ADDR_OWVAR 32
53219: PUSH
53220: LD_INT 0
53222: ST_TO_ADDR
// end ;
53223: LD_VAR 0 1
53227: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53228: LD_INT 0
53230: PPUSH
53231: PPUSH
53232: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53233: LD_ADDR_VAR 0 6
53237: PUSH
53238: LD_VAR 0 1
53242: PUSH
53243: LD_VAR 0 3
53247: PLUS
53248: PUSH
53249: LD_INT 2
53251: DIV
53252: ST_TO_ADDR
// if _x < 0 then
53253: LD_VAR 0 6
53257: PUSH
53258: LD_INT 0
53260: LESS
53261: IFFALSE 53278
// _x := _x * - 1 ;
53263: LD_ADDR_VAR 0 6
53267: PUSH
53268: LD_VAR 0 6
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: MUL
53277: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53278: LD_ADDR_VAR 0 7
53282: PUSH
53283: LD_VAR 0 2
53287: PUSH
53288: LD_VAR 0 4
53292: PLUS
53293: PUSH
53294: LD_INT 2
53296: DIV
53297: ST_TO_ADDR
// if _y < 0 then
53298: LD_VAR 0 7
53302: PUSH
53303: LD_INT 0
53305: LESS
53306: IFFALSE 53323
// _y := _y * - 1 ;
53308: LD_ADDR_VAR 0 7
53312: PUSH
53313: LD_VAR 0 7
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: MUL
53322: ST_TO_ADDR
// result := [ _x , _y ] ;
53323: LD_ADDR_VAR 0 5
53327: PUSH
53328: LD_VAR 0 6
53332: PUSH
53333: LD_VAR 0 7
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// end ;
53342: LD_VAR 0 5
53346: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53347: LD_INT 0
53349: PPUSH
53350: PPUSH
53351: PPUSH
53352: PPUSH
// task := GetTaskList ( unit ) ;
53353: LD_ADDR_VAR 0 7
53357: PUSH
53358: LD_VAR 0 1
53362: PPUSH
53363: CALL_OW 437
53367: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53368: LD_VAR 0 7
53372: NOT
53373: PUSH
53374: LD_VAR 0 1
53378: PPUSH
53379: LD_VAR 0 2
53383: PPUSH
53384: CALL_OW 308
53388: NOT
53389: AND
53390: IFFALSE 53394
// exit ;
53392: GO 53512
// if IsInArea ( unit , area ) then
53394: LD_VAR 0 1
53398: PPUSH
53399: LD_VAR 0 2
53403: PPUSH
53404: CALL_OW 308
53408: IFFALSE 53426
// begin ComMoveToArea ( unit , goAway ) ;
53410: LD_VAR 0 1
53414: PPUSH
53415: LD_VAR 0 3
53419: PPUSH
53420: CALL_OW 113
// exit ;
53424: GO 53512
// end ; if task [ 1 ] [ 1 ] <> M then
53426: LD_VAR 0 7
53430: PUSH
53431: LD_INT 1
53433: ARRAY
53434: PUSH
53435: LD_INT 1
53437: ARRAY
53438: PUSH
53439: LD_STRING M
53441: NONEQUAL
53442: IFFALSE 53446
// exit ;
53444: GO 53512
// x := task [ 1 ] [ 2 ] ;
53446: LD_ADDR_VAR 0 5
53450: PUSH
53451: LD_VAR 0 7
53455: PUSH
53456: LD_INT 1
53458: ARRAY
53459: PUSH
53460: LD_INT 2
53462: ARRAY
53463: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53464: LD_ADDR_VAR 0 6
53468: PUSH
53469: LD_VAR 0 7
53473: PUSH
53474: LD_INT 1
53476: ARRAY
53477: PUSH
53478: LD_INT 3
53480: ARRAY
53481: ST_TO_ADDR
// if InArea ( x , y , area ) then
53482: LD_VAR 0 5
53486: PPUSH
53487: LD_VAR 0 6
53491: PPUSH
53492: LD_VAR 0 2
53496: PPUSH
53497: CALL_OW 309
53501: IFFALSE 53512
// ComStop ( unit ) ;
53503: LD_VAR 0 1
53507: PPUSH
53508: CALL_OW 141
// end ;
53512: LD_VAR 0 4
53516: RET
// export function Abs ( value ) ; begin
53517: LD_INT 0
53519: PPUSH
// result := value ;
53520: LD_ADDR_VAR 0 2
53524: PUSH
53525: LD_VAR 0 1
53529: ST_TO_ADDR
// if value < 0 then
53530: LD_VAR 0 1
53534: PUSH
53535: LD_INT 0
53537: LESS
53538: IFFALSE 53555
// result := value * - 1 ;
53540: LD_ADDR_VAR 0 2
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: MUL
53554: ST_TO_ADDR
// end ;
53555: LD_VAR 0 2
53559: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53560: LD_INT 0
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
// if not unit or not building then
53570: LD_VAR 0 1
53574: NOT
53575: PUSH
53576: LD_VAR 0 2
53580: NOT
53581: OR
53582: IFFALSE 53586
// exit ;
53584: GO 53812
// x := GetX ( building ) ;
53586: LD_ADDR_VAR 0 4
53590: PUSH
53591: LD_VAR 0 2
53595: PPUSH
53596: CALL_OW 250
53600: ST_TO_ADDR
// y := GetY ( building ) ;
53601: LD_ADDR_VAR 0 6
53605: PUSH
53606: LD_VAR 0 2
53610: PPUSH
53611: CALL_OW 251
53615: ST_TO_ADDR
// d := GetDir ( building ) ;
53616: LD_ADDR_VAR 0 8
53620: PUSH
53621: LD_VAR 0 2
53625: PPUSH
53626: CALL_OW 254
53630: ST_TO_ADDR
// r := 4 ;
53631: LD_ADDR_VAR 0 9
53635: PUSH
53636: LD_INT 4
53638: ST_TO_ADDR
// for i := 1 to 5 do
53639: LD_ADDR_VAR 0 10
53643: PUSH
53644: DOUBLE
53645: LD_INT 1
53647: DEC
53648: ST_TO_ADDR
53649: LD_INT 5
53651: PUSH
53652: FOR_TO
53653: IFFALSE 53810
// begin _x := ShiftX ( x , d , r + i ) ;
53655: LD_ADDR_VAR 0 5
53659: PUSH
53660: LD_VAR 0 4
53664: PPUSH
53665: LD_VAR 0 8
53669: PPUSH
53670: LD_VAR 0 9
53674: PUSH
53675: LD_VAR 0 10
53679: PLUS
53680: PPUSH
53681: CALL_OW 272
53685: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53686: LD_ADDR_VAR 0 7
53690: PUSH
53691: LD_VAR 0 6
53695: PPUSH
53696: LD_VAR 0 8
53700: PPUSH
53701: LD_VAR 0 9
53705: PUSH
53706: LD_VAR 0 10
53710: PLUS
53711: PPUSH
53712: CALL_OW 273
53716: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53717: LD_VAR 0 5
53721: PPUSH
53722: LD_VAR 0 7
53726: PPUSH
53727: CALL_OW 488
53731: PUSH
53732: LD_VAR 0 5
53736: PPUSH
53737: LD_VAR 0 7
53741: PPUSH
53742: CALL_OW 428
53746: PPUSH
53747: CALL_OW 247
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: IN
53762: NOT
53763: AND
53764: IFFALSE 53808
// begin ComMoveXY ( unit , _x , _y ) ;
53766: LD_VAR 0 1
53770: PPUSH
53771: LD_VAR 0 5
53775: PPUSH
53776: LD_VAR 0 7
53780: PPUSH
53781: CALL_OW 111
// result := [ _x , _y ] ;
53785: LD_ADDR_VAR 0 3
53789: PUSH
53790: LD_VAR 0 5
53794: PUSH
53795: LD_VAR 0 7
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// exit ;
53804: POP
53805: POP
53806: GO 53812
// end ; end ;
53808: GO 53652
53810: POP
53811: POP
// end ;
53812: LD_VAR 0 3
53816: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53817: LD_INT 0
53819: PPUSH
53820: PPUSH
53821: PPUSH
// result := 0 ;
53822: LD_ADDR_VAR 0 3
53826: PUSH
53827: LD_INT 0
53829: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53830: LD_VAR 0 1
53834: PUSH
53835: LD_INT 0
53837: LESS
53838: PUSH
53839: LD_VAR 0 1
53843: PUSH
53844: LD_INT 8
53846: GREATER
53847: OR
53848: PUSH
53849: LD_VAR 0 2
53853: PUSH
53854: LD_INT 0
53856: LESS
53857: OR
53858: PUSH
53859: LD_VAR 0 2
53863: PUSH
53864: LD_INT 8
53866: GREATER
53867: OR
53868: IFFALSE 53872
// exit ;
53870: GO 53947
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53872: LD_ADDR_VAR 0 4
53876: PUSH
53877: LD_INT 22
53879: PUSH
53880: LD_VAR 0 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PPUSH
53889: CALL_OW 69
53893: PUSH
53894: FOR_IN
53895: IFFALSE 53945
// begin un := UnitShoot ( i ) ;
53897: LD_ADDR_VAR 0 5
53901: PUSH
53902: LD_VAR 0 4
53906: PPUSH
53907: CALL_OW 504
53911: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53912: LD_VAR 0 5
53916: PPUSH
53917: CALL_OW 255
53921: PUSH
53922: LD_VAR 0 1
53926: EQUAL
53927: IFFALSE 53943
// begin result := un ;
53929: LD_ADDR_VAR 0 3
53933: PUSH
53934: LD_VAR 0 5
53938: ST_TO_ADDR
// exit ;
53939: POP
53940: POP
53941: GO 53947
// end ; end ;
53943: GO 53894
53945: POP
53946: POP
// end ;
53947: LD_VAR 0 3
53951: RET
// export function GetCargoBay ( units ) ; begin
53952: LD_INT 0
53954: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53955: LD_ADDR_VAR 0 2
53959: PUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 34
53970: PUSH
53971: LD_INT 12
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 34
53980: PUSH
53981: LD_INT 51
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 34
53990: PUSH
53991: LD_INT 32
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 34
54000: PUSH
54001: LD_INT 89
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: PPUSH
54015: CALL_OW 72
54019: ST_TO_ADDR
// end ;
54020: LD_VAR 0 2
54024: RET
// export function Negate ( value ) ; begin
54025: LD_INT 0
54027: PPUSH
// result := not value ;
54028: LD_ADDR_VAR 0 2
54032: PUSH
54033: LD_VAR 0 1
54037: NOT
54038: ST_TO_ADDR
// end ;
54039: LD_VAR 0 2
54043: RET
// export function Inc ( value ) ; begin
54044: LD_INT 0
54046: PPUSH
// result := value + 1 ;
54047: LD_ADDR_VAR 0 2
54051: PUSH
54052: LD_VAR 0 1
54056: PUSH
54057: LD_INT 1
54059: PLUS
54060: ST_TO_ADDR
// end ;
54061: LD_VAR 0 2
54065: RET
// export function Dec ( value ) ; begin
54066: LD_INT 0
54068: PPUSH
// result := value - 1 ;
54069: LD_ADDR_VAR 0 2
54073: PUSH
54074: LD_VAR 0 1
54078: PUSH
54079: LD_INT 1
54081: MINUS
54082: ST_TO_ADDR
// end ;
54083: LD_VAR 0 2
54087: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54088: LD_INT 0
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54098: LD_VAR 0 1
54102: PPUSH
54103: LD_VAR 0 2
54107: PPUSH
54108: CALL_OW 488
54112: NOT
54113: PUSH
54114: LD_VAR 0 3
54118: PPUSH
54119: LD_VAR 0 4
54123: PPUSH
54124: CALL_OW 488
54128: NOT
54129: OR
54130: IFFALSE 54143
// begin result := - 1 ;
54132: LD_ADDR_VAR 0 5
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: ST_TO_ADDR
// exit ;
54141: GO 54378
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54143: LD_ADDR_VAR 0 12
54147: PUSH
54148: LD_VAR 0 1
54152: PPUSH
54153: LD_VAR 0 2
54157: PPUSH
54158: LD_VAR 0 3
54162: PPUSH
54163: LD_VAR 0 4
54167: PPUSH
54168: CALL 53228 0 4
54172: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54173: LD_ADDR_VAR 0 11
54177: PUSH
54178: LD_VAR 0 1
54182: PPUSH
54183: LD_VAR 0 2
54187: PPUSH
54188: LD_VAR 0 12
54192: PUSH
54193: LD_INT 1
54195: ARRAY
54196: PPUSH
54197: LD_VAR 0 12
54201: PUSH
54202: LD_INT 2
54204: ARRAY
54205: PPUSH
54206: CALL_OW 298
54210: ST_TO_ADDR
// distance := 9999 ;
54211: LD_ADDR_VAR 0 10
54215: PUSH
54216: LD_INT 9999
54218: ST_TO_ADDR
// for i := 0 to 5 do
54219: LD_ADDR_VAR 0 6
54223: PUSH
54224: DOUBLE
54225: LD_INT 0
54227: DEC
54228: ST_TO_ADDR
54229: LD_INT 5
54231: PUSH
54232: FOR_TO
54233: IFFALSE 54376
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54235: LD_ADDR_VAR 0 7
54239: PUSH
54240: LD_VAR 0 1
54244: PPUSH
54245: LD_VAR 0 6
54249: PPUSH
54250: LD_VAR 0 11
54254: PPUSH
54255: CALL_OW 272
54259: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54260: LD_ADDR_VAR 0 8
54264: PUSH
54265: LD_VAR 0 2
54269: PPUSH
54270: LD_VAR 0 6
54274: PPUSH
54275: LD_VAR 0 11
54279: PPUSH
54280: CALL_OW 273
54284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54285: LD_VAR 0 7
54289: PPUSH
54290: LD_VAR 0 8
54294: PPUSH
54295: CALL_OW 488
54299: NOT
54300: IFFALSE 54304
// continue ;
54302: GO 54232
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54304: LD_ADDR_VAR 0 9
54308: PUSH
54309: LD_VAR 0 12
54313: PUSH
54314: LD_INT 1
54316: ARRAY
54317: PPUSH
54318: LD_VAR 0 12
54322: PUSH
54323: LD_INT 2
54325: ARRAY
54326: PPUSH
54327: LD_VAR 0 7
54331: PPUSH
54332: LD_VAR 0 8
54336: PPUSH
54337: CALL_OW 298
54341: ST_TO_ADDR
// if tmp < distance then
54342: LD_VAR 0 9
54346: PUSH
54347: LD_VAR 0 10
54351: LESS
54352: IFFALSE 54374
// begin result := i ;
54354: LD_ADDR_VAR 0 5
54358: PUSH
54359: LD_VAR 0 6
54363: ST_TO_ADDR
// distance := tmp ;
54364: LD_ADDR_VAR 0 10
54368: PUSH
54369: LD_VAR 0 9
54373: ST_TO_ADDR
// end ; end ;
54374: GO 54232
54376: POP
54377: POP
// end ;
54378: LD_VAR 0 5
54382: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54383: LD_INT 0
54385: PPUSH
54386: PPUSH
// if not driver or not IsInUnit ( driver ) then
54387: LD_VAR 0 1
54391: NOT
54392: PUSH
54393: LD_VAR 0 1
54397: PPUSH
54398: CALL_OW 310
54402: NOT
54403: OR
54404: IFFALSE 54408
// exit ;
54406: GO 54498
// vehicle := IsInUnit ( driver ) ;
54408: LD_ADDR_VAR 0 3
54412: PUSH
54413: LD_VAR 0 1
54417: PPUSH
54418: CALL_OW 310
54422: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54423: LD_VAR 0 1
54427: PPUSH
54428: LD_STRING \
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: PUSH
54458: LD_STRING E
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_VAR 0 3
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PPUSH
54494: CALL_OW 446
// end ;
54498: LD_VAR 0 2
54502: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54503: LD_INT 0
54505: PPUSH
54506: PPUSH
// if not driver or not IsInUnit ( driver ) then
54507: LD_VAR 0 1
54511: NOT
54512: PUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL_OW 310
54522: NOT
54523: OR
54524: IFFALSE 54528
// exit ;
54526: GO 54618
// vehicle := IsInUnit ( driver ) ;
54528: LD_ADDR_VAR 0 3
54532: PUSH
54533: LD_VAR 0 1
54537: PPUSH
54538: CALL_OW 310
54542: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54543: LD_VAR 0 1
54547: PPUSH
54548: LD_STRING \
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: PUSH
54578: LD_STRING E
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_VAR 0 3
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PPUSH
54614: CALL_OW 447
// end ;
54618: LD_VAR 0 2
54622: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54623: LD_INT 0
54625: PPUSH
54626: PPUSH
54627: PPUSH
// tmp := [ ] ;
54628: LD_ADDR_VAR 0 5
54632: PUSH
54633: EMPTY
54634: ST_TO_ADDR
// for i in units do
54635: LD_ADDR_VAR 0 4
54639: PUSH
54640: LD_VAR 0 1
54644: PUSH
54645: FOR_IN
54646: IFFALSE 54684
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54648: LD_ADDR_VAR 0 5
54652: PUSH
54653: LD_VAR 0 5
54657: PPUSH
54658: LD_VAR 0 5
54662: PUSH
54663: LD_INT 1
54665: PLUS
54666: PPUSH
54667: LD_VAR 0 4
54671: PPUSH
54672: CALL_OW 256
54676: PPUSH
54677: CALL_OW 2
54681: ST_TO_ADDR
54682: GO 54645
54684: POP
54685: POP
// if not tmp then
54686: LD_VAR 0 5
54690: NOT
54691: IFFALSE 54695
// exit ;
54693: GO 54743
// if asc then
54695: LD_VAR 0 2
54699: IFFALSE 54723
// result := SortListByListAsc ( units , tmp ) else
54701: LD_ADDR_VAR 0 3
54705: PUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: LD_VAR 0 5
54715: PPUSH
54716: CALL_OW 76
54720: ST_TO_ADDR
54721: GO 54743
// result := SortListByListDesc ( units , tmp ) ;
54723: LD_ADDR_VAR 0 3
54727: PUSH
54728: LD_VAR 0 1
54732: PPUSH
54733: LD_VAR 0 5
54737: PPUSH
54738: CALL_OW 77
54742: ST_TO_ADDR
// end ;
54743: LD_VAR 0 3
54747: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54748: LD_INT 0
54750: PPUSH
54751: PPUSH
// task := GetTaskList ( mech ) ;
54752: LD_ADDR_VAR 0 4
54756: PUSH
54757: LD_VAR 0 1
54761: PPUSH
54762: CALL_OW 437
54766: ST_TO_ADDR
// if not task then
54767: LD_VAR 0 4
54771: NOT
54772: IFFALSE 54776
// exit ;
54774: GO 54818
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54776: LD_ADDR_VAR 0 3
54780: PUSH
54781: LD_VAR 0 4
54785: PUSH
54786: LD_INT 1
54788: ARRAY
54789: PUSH
54790: LD_INT 1
54792: ARRAY
54793: PUSH
54794: LD_STRING r
54796: EQUAL
54797: PUSH
54798: LD_VAR 0 4
54802: PUSH
54803: LD_INT 1
54805: ARRAY
54806: PUSH
54807: LD_INT 4
54809: ARRAY
54810: PUSH
54811: LD_VAR 0 2
54815: EQUAL
54816: AND
54817: ST_TO_ADDR
// end ;
54818: LD_VAR 0 3
54822: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54823: LD_INT 0
54825: PPUSH
// SetDir ( unit , d ) ;
54826: LD_VAR 0 1
54830: PPUSH
54831: LD_VAR 0 4
54835: PPUSH
54836: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54840: LD_VAR 0 1
54844: PPUSH
54845: LD_VAR 0 2
54849: PPUSH
54850: LD_VAR 0 3
54854: PPUSH
54855: LD_VAR 0 5
54859: PPUSH
54860: CALL_OW 48
// end ;
54864: LD_VAR 0 6
54868: RET
// export function ToNaturalNumber ( number ) ; begin
54869: LD_INT 0
54871: PPUSH
// result := number div 1 ;
54872: LD_ADDR_VAR 0 2
54876: PUSH
54877: LD_VAR 0 1
54881: PUSH
54882: LD_INT 1
54884: DIV
54885: ST_TO_ADDR
// if number < 0 then
54886: LD_VAR 0 1
54890: PUSH
54891: LD_INT 0
54893: LESS
54894: IFFALSE 54904
// result := 0 ;
54896: LD_ADDR_VAR 0 2
54900: PUSH
54901: LD_INT 0
54903: ST_TO_ADDR
// end ;
54904: LD_VAR 0 2
54908: RET
// export function SortByClass ( units , class ) ; var un ; begin
54909: LD_INT 0
54911: PPUSH
54912: PPUSH
// if not units or not class then
54913: LD_VAR 0 1
54917: NOT
54918: PUSH
54919: LD_VAR 0 2
54923: NOT
54924: OR
54925: IFFALSE 54929
// exit ;
54927: GO 55024
// result := [ ] ;
54929: LD_ADDR_VAR 0 3
54933: PUSH
54934: EMPTY
54935: ST_TO_ADDR
// for un in units do
54936: LD_ADDR_VAR 0 4
54940: PUSH
54941: LD_VAR 0 1
54945: PUSH
54946: FOR_IN
54947: IFFALSE 55022
// if GetClass ( un ) = class then
54949: LD_VAR 0 4
54953: PPUSH
54954: CALL_OW 257
54958: PUSH
54959: LD_VAR 0 2
54963: EQUAL
54964: IFFALSE 54991
// result := Insert ( result , 1 , un ) else
54966: LD_ADDR_VAR 0 3
54970: PUSH
54971: LD_VAR 0 3
54975: PPUSH
54976: LD_INT 1
54978: PPUSH
54979: LD_VAR 0 4
54983: PPUSH
54984: CALL_OW 2
54988: ST_TO_ADDR
54989: GO 55020
// result := Replace ( result , result + 1 , un ) ;
54991: LD_ADDR_VAR 0 3
54995: PUSH
54996: LD_VAR 0 3
55000: PPUSH
55001: LD_VAR 0 3
55005: PUSH
55006: LD_INT 1
55008: PLUS
55009: PPUSH
55010: LD_VAR 0 4
55014: PPUSH
55015: CALL_OW 1
55019: ST_TO_ADDR
55020: GO 54946
55022: POP
55023: POP
// end ;
55024: LD_VAR 0 3
55028: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55029: LD_INT 0
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
// result := [ ] ;
55038: LD_ADDR_VAR 0 4
55042: PUSH
55043: EMPTY
55044: ST_TO_ADDR
// if x - r < 0 then
55045: LD_VAR 0 1
55049: PUSH
55050: LD_VAR 0 3
55054: MINUS
55055: PUSH
55056: LD_INT 0
55058: LESS
55059: IFFALSE 55071
// min_x := 0 else
55061: LD_ADDR_VAR 0 8
55065: PUSH
55066: LD_INT 0
55068: ST_TO_ADDR
55069: GO 55087
// min_x := x - r ;
55071: LD_ADDR_VAR 0 8
55075: PUSH
55076: LD_VAR 0 1
55080: PUSH
55081: LD_VAR 0 3
55085: MINUS
55086: ST_TO_ADDR
// if y - r < 0 then
55087: LD_VAR 0 2
55091: PUSH
55092: LD_VAR 0 3
55096: MINUS
55097: PUSH
55098: LD_INT 0
55100: LESS
55101: IFFALSE 55113
// min_y := 0 else
55103: LD_ADDR_VAR 0 7
55107: PUSH
55108: LD_INT 0
55110: ST_TO_ADDR
55111: GO 55129
// min_y := y - r ;
55113: LD_ADDR_VAR 0 7
55117: PUSH
55118: LD_VAR 0 2
55122: PUSH
55123: LD_VAR 0 3
55127: MINUS
55128: ST_TO_ADDR
// max_x := x + r ;
55129: LD_ADDR_VAR 0 9
55133: PUSH
55134: LD_VAR 0 1
55138: PUSH
55139: LD_VAR 0 3
55143: PLUS
55144: ST_TO_ADDR
// max_y := y + r ;
55145: LD_ADDR_VAR 0 10
55149: PUSH
55150: LD_VAR 0 2
55154: PUSH
55155: LD_VAR 0 3
55159: PLUS
55160: ST_TO_ADDR
// for _x = min_x to max_x do
55161: LD_ADDR_VAR 0 5
55165: PUSH
55166: DOUBLE
55167: LD_VAR 0 8
55171: DEC
55172: ST_TO_ADDR
55173: LD_VAR 0 9
55177: PUSH
55178: FOR_TO
55179: IFFALSE 55280
// for _y = min_y to max_y do
55181: LD_ADDR_VAR 0 6
55185: PUSH
55186: DOUBLE
55187: LD_VAR 0 7
55191: DEC
55192: ST_TO_ADDR
55193: LD_VAR 0 10
55197: PUSH
55198: FOR_TO
55199: IFFALSE 55276
// begin if not ValidHex ( _x , _y ) then
55201: LD_VAR 0 5
55205: PPUSH
55206: LD_VAR 0 6
55210: PPUSH
55211: CALL_OW 488
55215: NOT
55216: IFFALSE 55220
// continue ;
55218: GO 55198
// if GetResourceTypeXY ( _x , _y ) then
55220: LD_VAR 0 5
55224: PPUSH
55225: LD_VAR 0 6
55229: PPUSH
55230: CALL_OW 283
55234: IFFALSE 55274
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55236: LD_ADDR_VAR 0 4
55240: PUSH
55241: LD_VAR 0 4
55245: PPUSH
55246: LD_VAR 0 4
55250: PUSH
55251: LD_INT 1
55253: PLUS
55254: PPUSH
55255: LD_VAR 0 5
55259: PUSH
55260: LD_VAR 0 6
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PPUSH
55269: CALL_OW 1
55273: ST_TO_ADDR
// end ;
55274: GO 55198
55276: POP
55277: POP
55278: GO 55178
55280: POP
55281: POP
// end ;
55282: LD_VAR 0 4
55286: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55287: LD_INT 0
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
// if not units then
55297: LD_VAR 0 1
55301: NOT
55302: IFFALSE 55306
// exit ;
55304: GO 55830
// result := UnitFilter ( units , [ f_ok ] ) ;
55306: LD_ADDR_VAR 0 3
55310: PUSH
55311: LD_VAR 0 1
55315: PPUSH
55316: LD_INT 50
55318: PUSH
55319: EMPTY
55320: LIST
55321: PPUSH
55322: CALL_OW 72
55326: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55327: LD_ADDR_VAR 0 8
55331: PUSH
55332: LD_VAR 0 1
55336: PUSH
55337: LD_INT 1
55339: ARRAY
55340: PPUSH
55341: CALL_OW 255
55345: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55346: LD_ADDR_VAR 0 10
55350: PUSH
55351: LD_INT 29
55353: PUSH
55354: LD_INT 91
55356: PUSH
55357: LD_INT 49
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: ST_TO_ADDR
// if not result then
55365: LD_VAR 0 3
55369: NOT
55370: IFFALSE 55374
// exit ;
55372: GO 55830
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55374: LD_ADDR_VAR 0 5
55378: PUSH
55379: LD_INT 81
55381: PUSH
55382: LD_VAR 0 8
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PPUSH
55391: CALL_OW 69
55395: ST_TO_ADDR
// for i in result do
55396: LD_ADDR_VAR 0 4
55400: PUSH
55401: LD_VAR 0 3
55405: PUSH
55406: FOR_IN
55407: IFFALSE 55828
// begin tag := GetTag ( i ) + 1 ;
55409: LD_ADDR_VAR 0 9
55413: PUSH
55414: LD_VAR 0 4
55418: PPUSH
55419: CALL_OW 110
55423: PUSH
55424: LD_INT 1
55426: PLUS
55427: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55428: LD_ADDR_VAR 0 7
55432: PUSH
55433: LD_VAR 0 4
55437: PPUSH
55438: CALL_OW 250
55442: PPUSH
55443: LD_VAR 0 4
55447: PPUSH
55448: CALL_OW 251
55452: PPUSH
55453: LD_INT 6
55455: PPUSH
55456: CALL 55029 0 3
55460: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55461: LD_VAR 0 4
55465: PPUSH
55466: CALL_OW 247
55470: PUSH
55471: LD_INT 2
55473: EQUAL
55474: PUSH
55475: LD_VAR 0 7
55479: AND
55480: PUSH
55481: LD_VAR 0 4
55485: PPUSH
55486: CALL_OW 264
55490: PUSH
55491: LD_VAR 0 10
55495: IN
55496: NOT
55497: AND
55498: IFFALSE 55537
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55500: LD_VAR 0 4
55504: PPUSH
55505: LD_VAR 0 7
55509: PUSH
55510: LD_INT 1
55512: ARRAY
55513: PUSH
55514: LD_INT 1
55516: ARRAY
55517: PPUSH
55518: LD_VAR 0 7
55522: PUSH
55523: LD_INT 1
55525: ARRAY
55526: PUSH
55527: LD_INT 2
55529: ARRAY
55530: PPUSH
55531: CALL_OW 116
55535: GO 55826
// if path > tag then
55537: LD_VAR 0 2
55541: PUSH
55542: LD_VAR 0 9
55546: GREATER
55547: IFFALSE 55755
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55549: LD_ADDR_VAR 0 6
55553: PUSH
55554: LD_VAR 0 5
55558: PPUSH
55559: LD_INT 91
55561: PUSH
55562: LD_VAR 0 4
55566: PUSH
55567: LD_INT 8
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: PPUSH
55575: CALL_OW 72
55579: ST_TO_ADDR
// if nearEnemy then
55580: LD_VAR 0 6
55584: IFFALSE 55653
// begin if GetWeapon ( i ) = ru_time_lapser then
55586: LD_VAR 0 4
55590: PPUSH
55591: CALL_OW 264
55595: PUSH
55596: LD_INT 49
55598: EQUAL
55599: IFFALSE 55627
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55601: LD_VAR 0 4
55605: PPUSH
55606: LD_VAR 0 6
55610: PPUSH
55611: LD_VAR 0 4
55615: PPUSH
55616: CALL_OW 74
55620: PPUSH
55621: CALL_OW 112
55625: GO 55651
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55627: LD_VAR 0 4
55631: PPUSH
55632: LD_VAR 0 6
55636: PPUSH
55637: LD_VAR 0 4
55641: PPUSH
55642: CALL_OW 74
55646: PPUSH
55647: CALL_OW 115
// end else
55651: GO 55753
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55653: LD_VAR 0 4
55657: PPUSH
55658: LD_VAR 0 2
55662: PUSH
55663: LD_VAR 0 9
55667: ARRAY
55668: PUSH
55669: LD_INT 1
55671: ARRAY
55672: PPUSH
55673: LD_VAR 0 2
55677: PUSH
55678: LD_VAR 0 9
55682: ARRAY
55683: PUSH
55684: LD_INT 2
55686: ARRAY
55687: PPUSH
55688: CALL_OW 297
55692: PUSH
55693: LD_INT 6
55695: GREATER
55696: IFFALSE 55739
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55698: LD_VAR 0 4
55702: PPUSH
55703: LD_VAR 0 2
55707: PUSH
55708: LD_VAR 0 9
55712: ARRAY
55713: PUSH
55714: LD_INT 1
55716: ARRAY
55717: PPUSH
55718: LD_VAR 0 2
55722: PUSH
55723: LD_VAR 0 9
55727: ARRAY
55728: PUSH
55729: LD_INT 2
55731: ARRAY
55732: PPUSH
55733: CALL_OW 114
55737: GO 55753
// SetTag ( i , tag ) ;
55739: LD_VAR 0 4
55743: PPUSH
55744: LD_VAR 0 9
55748: PPUSH
55749: CALL_OW 109
// end else
55753: GO 55826
// if enemy then
55755: LD_VAR 0 5
55759: IFFALSE 55826
// begin if GetWeapon ( i ) = ru_time_lapser then
55761: LD_VAR 0 4
55765: PPUSH
55766: CALL_OW 264
55770: PUSH
55771: LD_INT 49
55773: EQUAL
55774: IFFALSE 55802
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55776: LD_VAR 0 4
55780: PPUSH
55781: LD_VAR 0 5
55785: PPUSH
55786: LD_VAR 0 4
55790: PPUSH
55791: CALL_OW 74
55795: PPUSH
55796: CALL_OW 112
55800: GO 55826
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55802: LD_VAR 0 4
55806: PPUSH
55807: LD_VAR 0 5
55811: PPUSH
55812: LD_VAR 0 4
55816: PPUSH
55817: CALL_OW 74
55821: PPUSH
55822: CALL_OW 115
// end ; end ;
55826: GO 55406
55828: POP
55829: POP
// end ;
55830: LD_VAR 0 3
55834: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
55839: PPUSH
// if not unit or IsInUnit ( unit ) then
55840: LD_VAR 0 1
55844: NOT
55845: PUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 310
55855: OR
55856: IFFALSE 55860
// exit ;
55858: GO 55951
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55860: LD_ADDR_VAR 0 4
55864: PUSH
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 250
55874: PPUSH
55875: LD_VAR 0 2
55879: PPUSH
55880: LD_INT 1
55882: PPUSH
55883: CALL_OW 272
55887: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55888: LD_ADDR_VAR 0 5
55892: PUSH
55893: LD_VAR 0 1
55897: PPUSH
55898: CALL_OW 251
55902: PPUSH
55903: LD_VAR 0 2
55907: PPUSH
55908: LD_INT 1
55910: PPUSH
55911: CALL_OW 273
55915: ST_TO_ADDR
// if ValidHex ( x , y ) then
55916: LD_VAR 0 4
55920: PPUSH
55921: LD_VAR 0 5
55925: PPUSH
55926: CALL_OW 488
55930: IFFALSE 55951
// ComTurnXY ( unit , x , y ) ;
55932: LD_VAR 0 1
55936: PPUSH
55937: LD_VAR 0 4
55941: PPUSH
55942: LD_VAR 0 5
55946: PPUSH
55947: CALL_OW 118
// end ;
55951: LD_VAR 0 3
55955: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55956: LD_INT 0
55958: PPUSH
55959: PPUSH
// result := false ;
55960: LD_ADDR_VAR 0 3
55964: PUSH
55965: LD_INT 0
55967: ST_TO_ADDR
// if not units then
55968: LD_VAR 0 2
55972: NOT
55973: IFFALSE 55977
// exit ;
55975: GO 56022
// for i in units do
55977: LD_ADDR_VAR 0 4
55981: PUSH
55982: LD_VAR 0 2
55986: PUSH
55987: FOR_IN
55988: IFFALSE 56020
// if See ( side , i ) then
55990: LD_VAR 0 1
55994: PPUSH
55995: LD_VAR 0 4
55999: PPUSH
56000: CALL_OW 292
56004: IFFALSE 56018
// begin result := true ;
56006: LD_ADDR_VAR 0 3
56010: PUSH
56011: LD_INT 1
56013: ST_TO_ADDR
// exit ;
56014: POP
56015: POP
56016: GO 56022
// end ;
56018: GO 55987
56020: POP
56021: POP
// end ;
56022: LD_VAR 0 3
56026: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56027: LD_INT 0
56029: PPUSH
56030: PPUSH
56031: PPUSH
56032: PPUSH
// if not unit or not points then
56033: LD_VAR 0 1
56037: NOT
56038: PUSH
56039: LD_VAR 0 2
56043: NOT
56044: OR
56045: IFFALSE 56049
// exit ;
56047: GO 56139
// dist := 99999 ;
56049: LD_ADDR_VAR 0 5
56053: PUSH
56054: LD_INT 99999
56056: ST_TO_ADDR
// for i in points do
56057: LD_ADDR_VAR 0 4
56061: PUSH
56062: LD_VAR 0 2
56066: PUSH
56067: FOR_IN
56068: IFFALSE 56137
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56070: LD_ADDR_VAR 0 6
56074: PUSH
56075: LD_VAR 0 1
56079: PPUSH
56080: LD_VAR 0 4
56084: PUSH
56085: LD_INT 1
56087: ARRAY
56088: PPUSH
56089: LD_VAR 0 4
56093: PUSH
56094: LD_INT 2
56096: ARRAY
56097: PPUSH
56098: CALL_OW 297
56102: ST_TO_ADDR
// if tmpDist < dist then
56103: LD_VAR 0 6
56107: PUSH
56108: LD_VAR 0 5
56112: LESS
56113: IFFALSE 56135
// begin result := i ;
56115: LD_ADDR_VAR 0 3
56119: PUSH
56120: LD_VAR 0 4
56124: ST_TO_ADDR
// dist := tmpDist ;
56125: LD_ADDR_VAR 0 5
56129: PUSH
56130: LD_VAR 0 6
56134: ST_TO_ADDR
// end ; end ;
56135: GO 56067
56137: POP
56138: POP
// end ;
56139: LD_VAR 0 3
56143: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56144: LD_INT 0
56146: PPUSH
// uc_side := side ;
56147: LD_ADDR_OWVAR 20
56151: PUSH
56152: LD_VAR 0 1
56156: ST_TO_ADDR
// uc_nation := 3 ;
56157: LD_ADDR_OWVAR 21
56161: PUSH
56162: LD_INT 3
56164: ST_TO_ADDR
// vc_chassis := 25 ;
56165: LD_ADDR_OWVAR 37
56169: PUSH
56170: LD_INT 25
56172: ST_TO_ADDR
// vc_engine := engine_siberite ;
56173: LD_ADDR_OWVAR 39
56177: PUSH
56178: LD_INT 3
56180: ST_TO_ADDR
// vc_control := control_computer ;
56181: LD_ADDR_OWVAR 38
56185: PUSH
56186: LD_INT 3
56188: ST_TO_ADDR
// vc_weapon := 59 ;
56189: LD_ADDR_OWVAR 40
56193: PUSH
56194: LD_INT 59
56196: ST_TO_ADDR
// result := CreateVehicle ;
56197: LD_ADDR_VAR 0 5
56201: PUSH
56202: CALL_OW 45
56206: ST_TO_ADDR
// SetDir ( result , d ) ;
56207: LD_VAR 0 5
56211: PPUSH
56212: LD_VAR 0 4
56216: PPUSH
56217: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56221: LD_VAR 0 5
56225: PPUSH
56226: LD_VAR 0 2
56230: PPUSH
56231: LD_VAR 0 3
56235: PPUSH
56236: LD_INT 0
56238: PPUSH
56239: CALL_OW 48
// end ;
56243: LD_VAR 0 5
56247: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56248: LD_INT 0
56250: PPUSH
56251: PPUSH
56252: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56253: LD_ADDR_VAR 0 2
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56276: LD_VAR 0 1
56280: NOT
56281: PUSH
56282: LD_VAR 0 1
56286: PPUSH
56287: CALL_OW 264
56291: PUSH
56292: LD_INT 12
56294: PUSH
56295: LD_INT 51
56297: PUSH
56298: LD_INT 32
56300: PUSH
56301: LD_INT 89
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: IN
56310: NOT
56311: OR
56312: IFFALSE 56316
// exit ;
56314: GO 56414
// for i := 1 to 3 do
56316: LD_ADDR_VAR 0 3
56320: PUSH
56321: DOUBLE
56322: LD_INT 1
56324: DEC
56325: ST_TO_ADDR
56326: LD_INT 3
56328: PUSH
56329: FOR_TO
56330: IFFALSE 56412
// begin tmp := GetCargo ( cargo , i ) ;
56332: LD_ADDR_VAR 0 4
56336: PUSH
56337: LD_VAR 0 1
56341: PPUSH
56342: LD_VAR 0 3
56346: PPUSH
56347: CALL_OW 289
56351: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56352: LD_ADDR_VAR 0 2
56356: PUSH
56357: LD_VAR 0 2
56361: PPUSH
56362: LD_VAR 0 3
56366: PPUSH
56367: LD_VAR 0 4
56371: PPUSH
56372: CALL_OW 1
56376: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56377: LD_ADDR_VAR 0 2
56381: PUSH
56382: LD_VAR 0 2
56386: PPUSH
56387: LD_INT 4
56389: PPUSH
56390: LD_VAR 0 2
56394: PUSH
56395: LD_INT 4
56397: ARRAY
56398: PUSH
56399: LD_VAR 0 4
56403: PLUS
56404: PPUSH
56405: CALL_OW 1
56409: ST_TO_ADDR
// end ;
56410: GO 56329
56412: POP
56413: POP
// end ;
56414: LD_VAR 0 2
56418: RET
// export function Length ( array ) ; begin
56419: LD_INT 0
56421: PPUSH
// result := array + 0 ;
56422: LD_ADDR_VAR 0 2
56426: PUSH
56427: LD_VAR 0 1
56431: PUSH
56432: LD_INT 0
56434: PLUS
56435: ST_TO_ADDR
// end ;
56436: LD_VAR 0 2
56440: RET
// export function PrepareArray ( array ) ; begin
56441: LD_INT 0
56443: PPUSH
// result := array diff 0 ;
56444: LD_ADDR_VAR 0 2
56448: PUSH
56449: LD_VAR 0 1
56453: PUSH
56454: LD_INT 0
56456: DIFF
56457: ST_TO_ADDR
// if not result [ 1 ] then
56458: LD_VAR 0 2
56462: PUSH
56463: LD_INT 1
56465: ARRAY
56466: NOT
56467: IFFALSE 56487
// result := Delete ( result , 1 ) ;
56469: LD_ADDR_VAR 0 2
56473: PUSH
56474: LD_VAR 0 2
56478: PPUSH
56479: LD_INT 1
56481: PPUSH
56482: CALL_OW 3
56486: ST_TO_ADDR
// end ;
56487: LD_VAR 0 2
56491: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56492: LD_INT 0
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
// sibRocketRange := 25 ;
56498: LD_ADDR_VAR 0 6
56502: PUSH
56503: LD_INT 25
56505: ST_TO_ADDR
// result := false ;
56506: LD_ADDR_VAR 0 4
56510: PUSH
56511: LD_INT 0
56513: ST_TO_ADDR
// for i := 0 to 5 do
56514: LD_ADDR_VAR 0 5
56518: PUSH
56519: DOUBLE
56520: LD_INT 0
56522: DEC
56523: ST_TO_ADDR
56524: LD_INT 5
56526: PUSH
56527: FOR_TO
56528: IFFALSE 56595
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56530: LD_VAR 0 1
56534: PPUSH
56535: LD_VAR 0 5
56539: PPUSH
56540: LD_VAR 0 6
56544: PPUSH
56545: CALL_OW 272
56549: PPUSH
56550: LD_VAR 0 2
56554: PPUSH
56555: LD_VAR 0 5
56559: PPUSH
56560: LD_VAR 0 6
56564: PPUSH
56565: CALL_OW 273
56569: PPUSH
56570: LD_VAR 0 3
56574: PPUSH
56575: CALL_OW 309
56579: IFFALSE 56593
// begin result := true ;
56581: LD_ADDR_VAR 0 4
56585: PUSH
56586: LD_INT 1
56588: ST_TO_ADDR
// exit ;
56589: POP
56590: POP
56591: GO 56597
// end ;
56593: GO 56527
56595: POP
56596: POP
// end ; end_of_file
56597: LD_VAR 0 4
56601: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56602: LD_VAR 0 1
56606: PUSH
56607: LD_INT 200
56609: DOUBLE
56610: GREATEREQUAL
56611: IFFALSE 56619
56613: LD_INT 299
56615: DOUBLE
56616: LESSEQUAL
56617: IFTRUE 56621
56619: GO 56653
56621: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56622: LD_VAR 0 1
56626: PPUSH
56627: LD_VAR 0 2
56631: PPUSH
56632: LD_VAR 0 3
56636: PPUSH
56637: LD_VAR 0 4
56641: PPUSH
56642: LD_VAR 0 5
56646: PPUSH
56647: CALL 57141 0 5
56651: GO 56730
56653: LD_INT 300
56655: DOUBLE
56656: GREATEREQUAL
56657: IFFALSE 56665
56659: LD_INT 399
56661: DOUBLE
56662: LESSEQUAL
56663: IFTRUE 56667
56665: GO 56729
56667: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56668: LD_VAR 0 1
56672: PPUSH
56673: LD_VAR 0 2
56677: PPUSH
56678: LD_VAR 0 3
56682: PPUSH
56683: LD_VAR 0 4
56687: PPUSH
56688: LD_VAR 0 5
56692: PPUSH
56693: LD_VAR 0 6
56697: PPUSH
56698: LD_VAR 0 7
56702: PPUSH
56703: LD_VAR 0 8
56707: PPUSH
56708: LD_VAR 0 9
56712: PPUSH
56713: LD_VAR 0 10
56717: PPUSH
56718: LD_VAR 0 11
56722: PPUSH
56723: CALL 73412 0 11
56727: GO 56730
56729: POP
// end ;
56730: PPOPN 11
56732: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56733: LD_VAR 0 1
56737: PPUSH
56738: LD_VAR 0 2
56742: PPUSH
56743: LD_VAR 0 3
56747: PPUSH
56748: LD_VAR 0 4
56752: PPUSH
56753: LD_VAR 0 5
56757: PPUSH
56758: CALL 56877 0 5
// end ; end_of_file
56762: PPOPN 5
56764: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56765: LD_INT 0
56767: PPUSH
56768: PPUSH
56769: PPUSH
56770: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56771: LD_VAR 0 1
56775: PPUSH
56776: CALL_OW 264
56780: PUSH
56781: LD_INT 91
56783: EQUAL
56784: IFFALSE 56856
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56786: LD_INT 68
56788: PPUSH
56789: LD_VAR 0 1
56793: PPUSH
56794: CALL_OW 255
56798: PPUSH
56799: CALL_OW 321
56803: PUSH
56804: LD_INT 2
56806: EQUAL
56807: IFFALSE 56819
// eff := 70 else
56809: LD_ADDR_VAR 0 4
56813: PUSH
56814: LD_INT 70
56816: ST_TO_ADDR
56817: GO 56827
// eff := 30 ;
56819: LD_ADDR_VAR 0 4
56823: PUSH
56824: LD_INT 30
56826: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 250
56836: PPUSH
56837: LD_VAR 0 1
56841: PPUSH
56842: CALL_OW 251
56846: PPUSH
56847: LD_VAR 0 4
56851: PPUSH
56852: CALL_OW 495
// end ; end ;
56856: LD_VAR 0 2
56860: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56861: LD_INT 0
56863: PPUSH
// end ;
56864: LD_VAR 0 4
56868: RET
// export function SOS_Command ( cmd ) ; begin
56869: LD_INT 0
56871: PPUSH
// end ;
56872: LD_VAR 0 2
56876: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56877: LD_INT 0
56879: PPUSH
// end ;
56880: LD_VAR 0 6
56884: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
56885: LD_INT 0
56887: PPUSH
56888: PPUSH
// if not vehicle or not factory then
56889: LD_VAR 0 1
56893: NOT
56894: PUSH
56895: LD_VAR 0 2
56899: NOT
56900: OR
56901: IFFALSE 56905
// exit ;
56903: GO 57136
// if factoryWaypoints >= factory then
56905: LD_EXP 101
56909: PUSH
56910: LD_VAR 0 2
56914: GREATEREQUAL
56915: IFFALSE 57136
// if factoryWaypoints [ factory ] then
56917: LD_EXP 101
56921: PUSH
56922: LD_VAR 0 2
56926: ARRAY
56927: IFFALSE 57136
// begin if GetControl ( vehicle ) = control_manual then
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 263
56938: PUSH
56939: LD_INT 1
56941: EQUAL
56942: IFFALSE 57023
// begin driver := IsDrivenBy ( vehicle ) ;
56944: LD_ADDR_VAR 0 4
56948: PUSH
56949: LD_VAR 0 1
56953: PPUSH
56954: CALL_OW 311
56958: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
56959: LD_VAR 0 4
56963: PPUSH
56964: LD_EXP 101
56968: PUSH
56969: LD_VAR 0 2
56973: ARRAY
56974: PUSH
56975: LD_INT 3
56977: ARRAY
56978: PPUSH
56979: LD_EXP 101
56983: PUSH
56984: LD_VAR 0 2
56988: ARRAY
56989: PUSH
56990: LD_INT 4
56992: ARRAY
56993: PPUSH
56994: CALL_OW 171
// AddComExitVehicle ( driver ) ;
56998: LD_VAR 0 4
57002: PPUSH
57003: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57007: LD_VAR 0 4
57011: PPUSH
57012: LD_VAR 0 2
57016: PPUSH
57017: CALL_OW 180
// end else
57021: GO 57136
// if GetControl ( vehicle ) = control_remote then
57023: LD_VAR 0 1
57027: PPUSH
57028: CALL_OW 263
57032: PUSH
57033: LD_INT 2
57035: EQUAL
57036: IFFALSE 57097
// begin wait ( 0 0$2 ) ;
57038: LD_INT 70
57040: PPUSH
57041: CALL_OW 67
// if Connect ( vehicle ) then
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL 23340 0 1
57054: IFFALSE 57095
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57056: LD_VAR 0 1
57060: PPUSH
57061: LD_EXP 101
57065: PUSH
57066: LD_VAR 0 2
57070: ARRAY
57071: PUSH
57072: LD_INT 3
57074: ARRAY
57075: PPUSH
57076: LD_EXP 101
57080: PUSH
57081: LD_VAR 0 2
57085: ARRAY
57086: PUSH
57087: LD_INT 4
57089: ARRAY
57090: PPUSH
57091: CALL_OW 171
// end else
57095: GO 57136
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57097: LD_VAR 0 1
57101: PPUSH
57102: LD_EXP 101
57106: PUSH
57107: LD_VAR 0 2
57111: ARRAY
57112: PUSH
57113: LD_INT 3
57115: ARRAY
57116: PPUSH
57117: LD_EXP 101
57121: PUSH
57122: LD_VAR 0 2
57126: ARRAY
57127: PUSH
57128: LD_INT 4
57130: ARRAY
57131: PPUSH
57132: CALL_OW 171
// end ; end ;
57136: LD_VAR 0 3
57140: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57141: LD_INT 0
57143: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57144: LD_VAR 0 1
57148: PUSH
57149: LD_INT 250
57151: EQUAL
57152: PUSH
57153: LD_VAR 0 2
57157: PPUSH
57158: CALL_OW 264
57162: PUSH
57163: LD_INT 81
57165: EQUAL
57166: AND
57167: IFFALSE 57188
// MinerPlaceMine ( unit , x , y ) ;
57169: LD_VAR 0 2
57173: PPUSH
57174: LD_VAR 0 4
57178: PPUSH
57179: LD_VAR 0 5
57183: PPUSH
57184: CALL 59573 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57188: LD_VAR 0 1
57192: PUSH
57193: LD_INT 251
57195: EQUAL
57196: PUSH
57197: LD_VAR 0 2
57201: PPUSH
57202: CALL_OW 264
57206: PUSH
57207: LD_INT 81
57209: EQUAL
57210: AND
57211: IFFALSE 57232
// MinerDetonateMine ( unit , x , y ) ;
57213: LD_VAR 0 2
57217: PPUSH
57218: LD_VAR 0 4
57222: PPUSH
57223: LD_VAR 0 5
57227: PPUSH
57228: CALL 59848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57232: LD_VAR 0 1
57236: PUSH
57237: LD_INT 252
57239: EQUAL
57240: PUSH
57241: LD_VAR 0 2
57245: PPUSH
57246: CALL_OW 264
57250: PUSH
57251: LD_INT 81
57253: EQUAL
57254: AND
57255: IFFALSE 57276
// MinerCreateMinefield ( unit , x , y ) ;
57257: LD_VAR 0 2
57261: PPUSH
57262: LD_VAR 0 4
57266: PPUSH
57267: LD_VAR 0 5
57271: PPUSH
57272: CALL 60265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57276: LD_VAR 0 1
57280: PUSH
57281: LD_INT 253
57283: EQUAL
57284: PUSH
57285: LD_VAR 0 2
57289: PPUSH
57290: CALL_OW 257
57294: PUSH
57295: LD_INT 5
57297: EQUAL
57298: AND
57299: IFFALSE 57320
// ComBinocular ( unit , x , y ) ;
57301: LD_VAR 0 2
57305: PPUSH
57306: LD_VAR 0 4
57310: PPUSH
57311: LD_VAR 0 5
57315: PPUSH
57316: CALL 60634 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57320: LD_VAR 0 1
57324: PUSH
57325: LD_INT 254
57327: EQUAL
57328: PUSH
57329: LD_VAR 0 2
57333: PPUSH
57334: CALL_OW 264
57338: PUSH
57339: LD_INT 99
57341: EQUAL
57342: AND
57343: PUSH
57344: LD_VAR 0 3
57348: PPUSH
57349: CALL_OW 263
57353: PUSH
57354: LD_INT 3
57356: EQUAL
57357: AND
57358: IFFALSE 57374
// HackDestroyVehicle ( unit , selectedUnit ) ;
57360: LD_VAR 0 2
57364: PPUSH
57365: LD_VAR 0 3
57369: PPUSH
57370: CALL 58937 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57374: LD_VAR 0 1
57378: PUSH
57379: LD_INT 255
57381: EQUAL
57382: PUSH
57383: LD_VAR 0 2
57387: PPUSH
57388: CALL_OW 264
57392: PUSH
57393: LD_INT 14
57395: PUSH
57396: LD_INT 53
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: IN
57403: AND
57404: PUSH
57405: LD_VAR 0 4
57409: PPUSH
57410: LD_VAR 0 5
57414: PPUSH
57415: CALL_OW 488
57419: AND
57420: IFFALSE 57444
// CutTreeXYR ( unit , x , y , 12 ) ;
57422: LD_VAR 0 2
57426: PPUSH
57427: LD_VAR 0 4
57431: PPUSH
57432: LD_VAR 0 5
57436: PPUSH
57437: LD_INT 12
57439: PPUSH
57440: CALL 57507 0 4
// if cmd = 256 then
57444: LD_VAR 0 1
57448: PUSH
57449: LD_INT 256
57451: EQUAL
57452: IFFALSE 57473
// SetFactoryWaypoint ( unit , x , y ) ;
57454: LD_VAR 0 2
57458: PPUSH
57459: LD_VAR 0 4
57463: PPUSH
57464: LD_VAR 0 5
57468: PPUSH
57469: CALL 75392 0 3
// if cmd = 257 then
57473: LD_VAR 0 1
57477: PUSH
57478: LD_INT 257
57480: EQUAL
57481: IFFALSE 57502
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57483: LD_VAR 0 2
57487: PPUSH
57488: LD_VAR 0 4
57492: PPUSH
57493: LD_VAR 0 5
57497: PPUSH
57498: CALL 75754 0 3
// end ;
57502: LD_VAR 0 6
57506: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57507: LD_INT 0
57509: PPUSH
57510: PPUSH
57511: PPUSH
57512: PPUSH
57513: PPUSH
57514: PPUSH
57515: PPUSH
57516: PPUSH
57517: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57518: LD_VAR 0 1
57522: NOT
57523: PUSH
57524: LD_VAR 0 2
57528: PPUSH
57529: LD_VAR 0 3
57533: PPUSH
57534: CALL_OW 488
57538: NOT
57539: OR
57540: PUSH
57541: LD_VAR 0 4
57545: NOT
57546: OR
57547: IFFALSE 57551
// exit ;
57549: GO 57891
// list := [ ] ;
57551: LD_ADDR_VAR 0 13
57555: PUSH
57556: EMPTY
57557: ST_TO_ADDR
// if x - r < 0 then
57558: LD_VAR 0 2
57562: PUSH
57563: LD_VAR 0 4
57567: MINUS
57568: PUSH
57569: LD_INT 0
57571: LESS
57572: IFFALSE 57584
// min_x := 0 else
57574: LD_ADDR_VAR 0 7
57578: PUSH
57579: LD_INT 0
57581: ST_TO_ADDR
57582: GO 57600
// min_x := x - r ;
57584: LD_ADDR_VAR 0 7
57588: PUSH
57589: LD_VAR 0 2
57593: PUSH
57594: LD_VAR 0 4
57598: MINUS
57599: ST_TO_ADDR
// if y - r < 0 then
57600: LD_VAR 0 3
57604: PUSH
57605: LD_VAR 0 4
57609: MINUS
57610: PUSH
57611: LD_INT 0
57613: LESS
57614: IFFALSE 57626
// min_y := 0 else
57616: LD_ADDR_VAR 0 8
57620: PUSH
57621: LD_INT 0
57623: ST_TO_ADDR
57624: GO 57642
// min_y := y - r ;
57626: LD_ADDR_VAR 0 8
57630: PUSH
57631: LD_VAR 0 3
57635: PUSH
57636: LD_VAR 0 4
57640: MINUS
57641: ST_TO_ADDR
// max_x := x + r ;
57642: LD_ADDR_VAR 0 9
57646: PUSH
57647: LD_VAR 0 2
57651: PUSH
57652: LD_VAR 0 4
57656: PLUS
57657: ST_TO_ADDR
// max_y := y + r ;
57658: LD_ADDR_VAR 0 10
57662: PUSH
57663: LD_VAR 0 3
57667: PUSH
57668: LD_VAR 0 4
57672: PLUS
57673: ST_TO_ADDR
// for _x = min_x to max_x do
57674: LD_ADDR_VAR 0 11
57678: PUSH
57679: DOUBLE
57680: LD_VAR 0 7
57684: DEC
57685: ST_TO_ADDR
57686: LD_VAR 0 9
57690: PUSH
57691: FOR_TO
57692: IFFALSE 57809
// for _y = min_y to max_y do
57694: LD_ADDR_VAR 0 12
57698: PUSH
57699: DOUBLE
57700: LD_VAR 0 8
57704: DEC
57705: ST_TO_ADDR
57706: LD_VAR 0 10
57710: PUSH
57711: FOR_TO
57712: IFFALSE 57805
// begin if not ValidHex ( _x , _y ) then
57714: LD_VAR 0 11
57718: PPUSH
57719: LD_VAR 0 12
57723: PPUSH
57724: CALL_OW 488
57728: NOT
57729: IFFALSE 57733
// continue ;
57731: GO 57711
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57733: LD_VAR 0 11
57737: PPUSH
57738: LD_VAR 0 12
57742: PPUSH
57743: CALL_OW 351
57747: PUSH
57748: LD_VAR 0 11
57752: PPUSH
57753: LD_VAR 0 12
57757: PPUSH
57758: CALL_OW 554
57762: AND
57763: IFFALSE 57803
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57765: LD_ADDR_VAR 0 13
57769: PUSH
57770: LD_VAR 0 13
57774: PPUSH
57775: LD_VAR 0 13
57779: PUSH
57780: LD_INT 1
57782: PLUS
57783: PPUSH
57784: LD_VAR 0 11
57788: PUSH
57789: LD_VAR 0 12
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PPUSH
57798: CALL_OW 2
57802: ST_TO_ADDR
// end ;
57803: GO 57711
57805: POP
57806: POP
57807: GO 57691
57809: POP
57810: POP
// if not list then
57811: LD_VAR 0 13
57815: NOT
57816: IFFALSE 57820
// exit ;
57818: GO 57891
// for i in list do
57820: LD_ADDR_VAR 0 6
57824: PUSH
57825: LD_VAR 0 13
57829: PUSH
57830: FOR_IN
57831: IFFALSE 57889
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57833: LD_VAR 0 1
57837: PPUSH
57838: LD_STRING M
57840: PUSH
57841: LD_VAR 0 6
57845: PUSH
57846: LD_INT 1
57848: ARRAY
57849: PUSH
57850: LD_VAR 0 6
57854: PUSH
57855: LD_INT 2
57857: ARRAY
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: PPUSH
57883: CALL_OW 447
57887: GO 57830
57889: POP
57890: POP
// end ;
57891: LD_VAR 0 5
57895: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57896: LD_EXP 33
57900: NOT
57901: IFFALSE 57951
57903: GO 57905
57905: DISABLE
// begin initHack := true ;
57906: LD_ADDR_EXP 33
57910: PUSH
57911: LD_INT 1
57913: ST_TO_ADDR
// hackTanks := [ ] ;
57914: LD_ADDR_EXP 34
57918: PUSH
57919: EMPTY
57920: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57921: LD_ADDR_EXP 35
57925: PUSH
57926: EMPTY
57927: ST_TO_ADDR
// hackLimit := 3 ;
57928: LD_ADDR_EXP 36
57932: PUSH
57933: LD_INT 3
57935: ST_TO_ADDR
// hackDist := 12 ;
57936: LD_ADDR_EXP 37
57940: PUSH
57941: LD_INT 12
57943: ST_TO_ADDR
// hackCounter := [ ] ;
57944: LD_ADDR_EXP 38
57948: PUSH
57949: EMPTY
57950: ST_TO_ADDR
// end ;
57951: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57952: LD_EXP 33
57956: PUSH
57957: LD_INT 34
57959: PUSH
57960: LD_INT 99
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PPUSH
57967: CALL_OW 69
57971: AND
57972: IFFALSE 58225
57974: GO 57976
57976: DISABLE
57977: LD_INT 0
57979: PPUSH
57980: PPUSH
// begin enable ;
57981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57982: LD_ADDR_VAR 0 1
57986: PUSH
57987: LD_INT 34
57989: PUSH
57990: LD_INT 99
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PPUSH
57997: CALL_OW 69
58001: PUSH
58002: FOR_IN
58003: IFFALSE 58223
// begin if not i in hackTanks then
58005: LD_VAR 0 1
58009: PUSH
58010: LD_EXP 34
58014: IN
58015: NOT
58016: IFFALSE 58099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58018: LD_ADDR_EXP 34
58022: PUSH
58023: LD_EXP 34
58027: PPUSH
58028: LD_EXP 34
58032: PUSH
58033: LD_INT 1
58035: PLUS
58036: PPUSH
58037: LD_VAR 0 1
58041: PPUSH
58042: CALL_OW 1
58046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58047: LD_ADDR_EXP 35
58051: PUSH
58052: LD_EXP 35
58056: PPUSH
58057: LD_EXP 35
58061: PUSH
58062: LD_INT 1
58064: PLUS
58065: PPUSH
58066: EMPTY
58067: PPUSH
58068: CALL_OW 1
58072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58073: LD_ADDR_EXP 38
58077: PUSH
58078: LD_EXP 38
58082: PPUSH
58083: LD_EXP 38
58087: PUSH
58088: LD_INT 1
58090: PLUS
58091: PPUSH
58092: EMPTY
58093: PPUSH
58094: CALL_OW 1
58098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58099: LD_VAR 0 1
58103: PPUSH
58104: CALL_OW 302
58108: NOT
58109: IFFALSE 58122
// begin HackUnlinkAll ( i ) ;
58111: LD_VAR 0 1
58115: PPUSH
58116: CALL 58228 0 1
// continue ;
58120: GO 58002
// end ; HackCheckCapturedStatus ( i ) ;
58122: LD_VAR 0 1
58126: PPUSH
58127: CALL 58671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58131: LD_ADDR_VAR 0 2
58135: PUSH
58136: LD_INT 81
58138: PUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: CALL_OW 255
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 33
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 91
58165: PUSH
58166: LD_VAR 0 1
58170: PUSH
58171: LD_EXP 37
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 50
58183: PUSH
58184: EMPTY
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: PPUSH
58193: CALL_OW 69
58197: ST_TO_ADDR
// if not tmp then
58198: LD_VAR 0 2
58202: NOT
58203: IFFALSE 58207
// continue ;
58205: GO 58002
// HackLink ( i , tmp ) ;
58207: LD_VAR 0 1
58211: PPUSH
58212: LD_VAR 0 2
58216: PPUSH
58217: CALL 58364 0 2
// end ;
58221: GO 58002
58223: POP
58224: POP
// end ;
58225: PPOPN 2
58227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58228: LD_INT 0
58230: PPUSH
58231: PPUSH
58232: PPUSH
// if not hack in hackTanks then
58233: LD_VAR 0 1
58237: PUSH
58238: LD_EXP 34
58242: IN
58243: NOT
58244: IFFALSE 58248
// exit ;
58246: GO 58359
// index := GetElementIndex ( hackTanks , hack ) ;
58248: LD_ADDR_VAR 0 4
58252: PUSH
58253: LD_EXP 34
58257: PPUSH
58258: LD_VAR 0 1
58262: PPUSH
58263: CALL 20156 0 2
58267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58268: LD_EXP 35
58272: PUSH
58273: LD_VAR 0 4
58277: ARRAY
58278: IFFALSE 58359
// begin for i in hackTanksCaptured [ index ] do
58280: LD_ADDR_VAR 0 3
58284: PUSH
58285: LD_EXP 35
58289: PUSH
58290: LD_VAR 0 4
58294: ARRAY
58295: PUSH
58296: FOR_IN
58297: IFFALSE 58323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58299: LD_VAR 0 3
58303: PUSH
58304: LD_INT 1
58306: ARRAY
58307: PPUSH
58308: LD_VAR 0 3
58312: PUSH
58313: LD_INT 2
58315: ARRAY
58316: PPUSH
58317: CALL_OW 235
58321: GO 58296
58323: POP
58324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58325: LD_ADDR_EXP 35
58329: PUSH
58330: LD_EXP 35
58334: PPUSH
58335: LD_VAR 0 4
58339: PPUSH
58340: EMPTY
58341: PPUSH
58342: CALL_OW 1
58346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58347: LD_VAR 0 1
58351: PPUSH
58352: LD_INT 0
58354: PPUSH
58355: CALL_OW 505
// end ; end ;
58359: LD_VAR 0 2
58363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58364: LD_INT 0
58366: PPUSH
58367: PPUSH
58368: PPUSH
// if not hack in hackTanks or not vehicles then
58369: LD_VAR 0 1
58373: PUSH
58374: LD_EXP 34
58378: IN
58379: NOT
58380: PUSH
58381: LD_VAR 0 2
58385: NOT
58386: OR
58387: IFFALSE 58391
// exit ;
58389: GO 58666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58391: LD_ADDR_VAR 0 2
58395: PUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: LD_VAR 0 2
58405: PPUSH
58406: LD_INT 1
58408: PPUSH
58409: LD_INT 1
58411: PPUSH
58412: CALL 20806 0 4
58416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58417: LD_ADDR_VAR 0 5
58421: PUSH
58422: LD_EXP 34
58426: PPUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: CALL 20156 0 2
58436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58437: LD_EXP 35
58441: PUSH
58442: LD_VAR 0 5
58446: ARRAY
58447: PUSH
58448: LD_EXP 36
58452: LESS
58453: IFFALSE 58642
// begin for i := 1 to vehicles do
58455: LD_ADDR_VAR 0 4
58459: PUSH
58460: DOUBLE
58461: LD_INT 1
58463: DEC
58464: ST_TO_ADDR
58465: LD_VAR 0 2
58469: PUSH
58470: FOR_TO
58471: IFFALSE 58640
// begin if hackTanksCaptured [ index ] = hackLimit then
58473: LD_EXP 35
58477: PUSH
58478: LD_VAR 0 5
58482: ARRAY
58483: PUSH
58484: LD_EXP 36
58488: EQUAL
58489: IFFALSE 58493
// break ;
58491: GO 58640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58493: LD_ADDR_EXP 38
58497: PUSH
58498: LD_EXP 38
58502: PPUSH
58503: LD_VAR 0 5
58507: PPUSH
58508: LD_EXP 38
58512: PUSH
58513: LD_VAR 0 5
58517: ARRAY
58518: PUSH
58519: LD_INT 1
58521: PLUS
58522: PPUSH
58523: CALL_OW 1
58527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58528: LD_ADDR_EXP 35
58532: PUSH
58533: LD_EXP 35
58537: PPUSH
58538: LD_VAR 0 5
58542: PUSH
58543: LD_EXP 35
58547: PUSH
58548: LD_VAR 0 5
58552: ARRAY
58553: PUSH
58554: LD_INT 1
58556: PLUS
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PPUSH
58562: LD_VAR 0 2
58566: PUSH
58567: LD_VAR 0 4
58571: ARRAY
58572: PUSH
58573: LD_VAR 0 2
58577: PUSH
58578: LD_VAR 0 4
58582: ARRAY
58583: PPUSH
58584: CALL_OW 255
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PPUSH
58593: CALL 20371 0 3
58597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58598: LD_VAR 0 2
58602: PUSH
58603: LD_VAR 0 4
58607: ARRAY
58608: PPUSH
58609: LD_VAR 0 1
58613: PPUSH
58614: CALL_OW 255
58618: PPUSH
58619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58623: LD_VAR 0 2
58627: PUSH
58628: LD_VAR 0 4
58632: ARRAY
58633: PPUSH
58634: CALL_OW 141
// end ;
58638: GO 58470
58640: POP
58641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58642: LD_VAR 0 1
58646: PPUSH
58647: LD_EXP 35
58651: PUSH
58652: LD_VAR 0 5
58656: ARRAY
58657: PUSH
58658: LD_INT 0
58660: PLUS
58661: PPUSH
58662: CALL_OW 505
// end ;
58666: LD_VAR 0 3
58670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58671: LD_INT 0
58673: PPUSH
58674: PPUSH
58675: PPUSH
58676: PPUSH
// if not hack in hackTanks then
58677: LD_VAR 0 1
58681: PUSH
58682: LD_EXP 34
58686: IN
58687: NOT
58688: IFFALSE 58692
// exit ;
58690: GO 58932
// index := GetElementIndex ( hackTanks , hack ) ;
58692: LD_ADDR_VAR 0 4
58696: PUSH
58697: LD_EXP 34
58701: PPUSH
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL 20156 0 2
58711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58712: LD_ADDR_VAR 0 3
58716: PUSH
58717: DOUBLE
58718: LD_EXP 35
58722: PUSH
58723: LD_VAR 0 4
58727: ARRAY
58728: INC
58729: ST_TO_ADDR
58730: LD_INT 1
58732: PUSH
58733: FOR_DOWNTO
58734: IFFALSE 58906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58736: LD_ADDR_VAR 0 5
58740: PUSH
58741: LD_EXP 35
58745: PUSH
58746: LD_VAR 0 4
58750: ARRAY
58751: PUSH
58752: LD_VAR 0 3
58756: ARRAY
58757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58758: LD_VAR 0 5
58762: PUSH
58763: LD_INT 1
58765: ARRAY
58766: PPUSH
58767: CALL_OW 302
58771: NOT
58772: PUSH
58773: LD_VAR 0 5
58777: PUSH
58778: LD_INT 1
58780: ARRAY
58781: PPUSH
58782: CALL_OW 255
58786: PUSH
58787: LD_VAR 0 1
58791: PPUSH
58792: CALL_OW 255
58796: NONEQUAL
58797: OR
58798: IFFALSE 58904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58800: LD_VAR 0 5
58804: PUSH
58805: LD_INT 1
58807: ARRAY
58808: PPUSH
58809: CALL_OW 305
58813: PUSH
58814: LD_VAR 0 5
58818: PUSH
58819: LD_INT 1
58821: ARRAY
58822: PPUSH
58823: CALL_OW 255
58827: PUSH
58828: LD_VAR 0 1
58832: PPUSH
58833: CALL_OW 255
58837: EQUAL
58838: AND
58839: IFFALSE 58863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58841: LD_VAR 0 5
58845: PUSH
58846: LD_INT 1
58848: ARRAY
58849: PPUSH
58850: LD_VAR 0 5
58854: PUSH
58855: LD_INT 2
58857: ARRAY
58858: PPUSH
58859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58863: LD_ADDR_EXP 35
58867: PUSH
58868: LD_EXP 35
58872: PPUSH
58873: LD_VAR 0 4
58877: PPUSH
58878: LD_EXP 35
58882: PUSH
58883: LD_VAR 0 4
58887: ARRAY
58888: PPUSH
58889: LD_VAR 0 3
58893: PPUSH
58894: CALL_OW 3
58898: PPUSH
58899: CALL_OW 1
58903: ST_TO_ADDR
// end ; end ;
58904: GO 58733
58906: POP
58907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58908: LD_VAR 0 1
58912: PPUSH
58913: LD_EXP 35
58917: PUSH
58918: LD_VAR 0 4
58922: ARRAY
58923: PUSH
58924: LD_INT 0
58926: PLUS
58927: PPUSH
58928: CALL_OW 505
// end ;
58932: LD_VAR 0 2
58936: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58937: LD_INT 0
58939: PPUSH
58940: PPUSH
58941: PPUSH
58942: PPUSH
// if not hack in hackTanks then
58943: LD_VAR 0 1
58947: PUSH
58948: LD_EXP 34
58952: IN
58953: NOT
58954: IFFALSE 58958
// exit ;
58956: GO 59043
// index := GetElementIndex ( hackTanks , hack ) ;
58958: LD_ADDR_VAR 0 5
58962: PUSH
58963: LD_EXP 34
58967: PPUSH
58968: LD_VAR 0 1
58972: PPUSH
58973: CALL 20156 0 2
58977: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58978: LD_ADDR_VAR 0 4
58982: PUSH
58983: DOUBLE
58984: LD_INT 1
58986: DEC
58987: ST_TO_ADDR
58988: LD_EXP 35
58992: PUSH
58993: LD_VAR 0 5
58997: ARRAY
58998: PUSH
58999: FOR_TO
59000: IFFALSE 59041
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59002: LD_EXP 35
59006: PUSH
59007: LD_VAR 0 5
59011: ARRAY
59012: PUSH
59013: LD_VAR 0 4
59017: ARRAY
59018: PUSH
59019: LD_INT 1
59021: ARRAY
59022: PUSH
59023: LD_VAR 0 2
59027: EQUAL
59028: IFFALSE 59039
// KillUnit ( vehicle ) ;
59030: LD_VAR 0 2
59034: PPUSH
59035: CALL_OW 66
59039: GO 58999
59041: POP
59042: POP
// end ;
59043: LD_VAR 0 3
59047: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59048: LD_EXP 39
59052: NOT
59053: IFFALSE 59088
59055: GO 59057
59057: DISABLE
// begin initMiner := true ;
59058: LD_ADDR_EXP 39
59062: PUSH
59063: LD_INT 1
59065: ST_TO_ADDR
// minersList := [ ] ;
59066: LD_ADDR_EXP 40
59070: PUSH
59071: EMPTY
59072: ST_TO_ADDR
// minerMinesList := [ ] ;
59073: LD_ADDR_EXP 41
59077: PUSH
59078: EMPTY
59079: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59080: LD_ADDR_EXP 42
59084: PUSH
59085: LD_INT 5
59087: ST_TO_ADDR
// end ;
59088: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59089: LD_EXP 39
59093: PUSH
59094: LD_INT 34
59096: PUSH
59097: LD_INT 81
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PPUSH
59104: CALL_OW 69
59108: AND
59109: IFFALSE 59570
59111: GO 59113
59113: DISABLE
59114: LD_INT 0
59116: PPUSH
59117: PPUSH
59118: PPUSH
59119: PPUSH
// begin enable ;
59120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59121: LD_ADDR_VAR 0 1
59125: PUSH
59126: LD_INT 34
59128: PUSH
59129: LD_INT 81
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PPUSH
59136: CALL_OW 69
59140: PUSH
59141: FOR_IN
59142: IFFALSE 59214
// begin if not i in minersList then
59144: LD_VAR 0 1
59148: PUSH
59149: LD_EXP 40
59153: IN
59154: NOT
59155: IFFALSE 59212
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59157: LD_ADDR_EXP 40
59161: PUSH
59162: LD_EXP 40
59166: PPUSH
59167: LD_EXP 40
59171: PUSH
59172: LD_INT 1
59174: PLUS
59175: PPUSH
59176: LD_VAR 0 1
59180: PPUSH
59181: CALL_OW 1
59185: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59186: LD_ADDR_EXP 41
59190: PUSH
59191: LD_EXP 41
59195: PPUSH
59196: LD_EXP 41
59200: PUSH
59201: LD_INT 1
59203: PLUS
59204: PPUSH
59205: EMPTY
59206: PPUSH
59207: CALL_OW 1
59211: ST_TO_ADDR
// end end ;
59212: GO 59141
59214: POP
59215: POP
// for i := minerMinesList downto 1 do
59216: LD_ADDR_VAR 0 1
59220: PUSH
59221: DOUBLE
59222: LD_EXP 41
59226: INC
59227: ST_TO_ADDR
59228: LD_INT 1
59230: PUSH
59231: FOR_DOWNTO
59232: IFFALSE 59568
// begin if IsLive ( minersList [ i ] ) then
59234: LD_EXP 40
59238: PUSH
59239: LD_VAR 0 1
59243: ARRAY
59244: PPUSH
59245: CALL_OW 300
59249: IFFALSE 59277
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59251: LD_EXP 40
59255: PUSH
59256: LD_VAR 0 1
59260: ARRAY
59261: PPUSH
59262: LD_EXP 41
59266: PUSH
59267: LD_VAR 0 1
59271: ARRAY
59272: PPUSH
59273: CALL_OW 505
// if not minerMinesList [ i ] then
59277: LD_EXP 41
59281: PUSH
59282: LD_VAR 0 1
59286: ARRAY
59287: NOT
59288: IFFALSE 59292
// continue ;
59290: GO 59231
// for j := minerMinesList [ i ] downto 1 do
59292: LD_ADDR_VAR 0 2
59296: PUSH
59297: DOUBLE
59298: LD_EXP 41
59302: PUSH
59303: LD_VAR 0 1
59307: ARRAY
59308: INC
59309: ST_TO_ADDR
59310: LD_INT 1
59312: PUSH
59313: FOR_DOWNTO
59314: IFFALSE 59564
// begin side := GetSide ( minersList [ i ] ) ;
59316: LD_ADDR_VAR 0 3
59320: PUSH
59321: LD_EXP 40
59325: PUSH
59326: LD_VAR 0 1
59330: ARRAY
59331: PPUSH
59332: CALL_OW 255
59336: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59337: LD_ADDR_VAR 0 4
59341: PUSH
59342: LD_EXP 41
59346: PUSH
59347: LD_VAR 0 1
59351: ARRAY
59352: PUSH
59353: LD_VAR 0 2
59357: ARRAY
59358: PUSH
59359: LD_INT 1
59361: ARRAY
59362: PPUSH
59363: LD_EXP 41
59367: PUSH
59368: LD_VAR 0 1
59372: ARRAY
59373: PUSH
59374: LD_VAR 0 2
59378: ARRAY
59379: PUSH
59380: LD_INT 2
59382: ARRAY
59383: PPUSH
59384: CALL_OW 428
59388: ST_TO_ADDR
// if not tmp then
59389: LD_VAR 0 4
59393: NOT
59394: IFFALSE 59398
// continue ;
59396: GO 59313
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59398: LD_VAR 0 4
59402: PUSH
59403: LD_INT 81
59405: PUSH
59406: LD_VAR 0 3
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PPUSH
59415: CALL_OW 69
59419: IN
59420: PUSH
59421: LD_EXP 41
59425: PUSH
59426: LD_VAR 0 1
59430: ARRAY
59431: PUSH
59432: LD_VAR 0 2
59436: ARRAY
59437: PUSH
59438: LD_INT 1
59440: ARRAY
59441: PPUSH
59442: LD_EXP 41
59446: PUSH
59447: LD_VAR 0 1
59451: ARRAY
59452: PUSH
59453: LD_VAR 0 2
59457: ARRAY
59458: PUSH
59459: LD_INT 2
59461: ARRAY
59462: PPUSH
59463: CALL_OW 458
59467: AND
59468: IFFALSE 59562
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59470: LD_EXP 41
59474: PUSH
59475: LD_VAR 0 1
59479: ARRAY
59480: PUSH
59481: LD_VAR 0 2
59485: ARRAY
59486: PUSH
59487: LD_INT 1
59489: ARRAY
59490: PPUSH
59491: LD_EXP 41
59495: PUSH
59496: LD_VAR 0 1
59500: ARRAY
59501: PUSH
59502: LD_VAR 0 2
59506: ARRAY
59507: PUSH
59508: LD_INT 2
59510: ARRAY
59511: PPUSH
59512: LD_VAR 0 3
59516: PPUSH
59517: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59521: LD_ADDR_EXP 41
59525: PUSH
59526: LD_EXP 41
59530: PPUSH
59531: LD_VAR 0 1
59535: PPUSH
59536: LD_EXP 41
59540: PUSH
59541: LD_VAR 0 1
59545: ARRAY
59546: PPUSH
59547: LD_VAR 0 2
59551: PPUSH
59552: CALL_OW 3
59556: PPUSH
59557: CALL_OW 1
59561: ST_TO_ADDR
// end ; end ;
59562: GO 59313
59564: POP
59565: POP
// end ;
59566: GO 59231
59568: POP
59569: POP
// end ;
59570: PPOPN 4
59572: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59573: LD_INT 0
59575: PPUSH
59576: PPUSH
// result := false ;
59577: LD_ADDR_VAR 0 4
59581: PUSH
59582: LD_INT 0
59584: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59585: LD_VAR 0 1
59589: PPUSH
59590: CALL_OW 264
59594: PUSH
59595: LD_INT 81
59597: EQUAL
59598: NOT
59599: IFFALSE 59603
// exit ;
59601: GO 59843
// index := GetElementIndex ( minersList , unit ) ;
59603: LD_ADDR_VAR 0 5
59607: PUSH
59608: LD_EXP 40
59612: PPUSH
59613: LD_VAR 0 1
59617: PPUSH
59618: CALL 20156 0 2
59622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59623: LD_EXP 41
59627: PUSH
59628: LD_VAR 0 5
59632: ARRAY
59633: PUSH
59634: LD_EXP 42
59638: GREATEREQUAL
59639: IFFALSE 59643
// exit ;
59641: GO 59843
// ComMoveXY ( unit , x , y ) ;
59643: LD_VAR 0 1
59647: PPUSH
59648: LD_VAR 0 2
59652: PPUSH
59653: LD_VAR 0 3
59657: PPUSH
59658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59662: LD_INT 35
59664: PPUSH
59665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59669: LD_VAR 0 1
59673: PPUSH
59674: LD_VAR 0 2
59678: PPUSH
59679: LD_VAR 0 3
59683: PPUSH
59684: CALL 51492 0 3
59688: NOT
59689: PUSH
59690: LD_VAR 0 1
59694: PPUSH
59695: CALL_OW 314
59699: AND
59700: IFFALSE 59704
// exit ;
59702: GO 59843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59704: LD_VAR 0 2
59708: PPUSH
59709: LD_VAR 0 3
59713: PPUSH
59714: CALL_OW 428
59718: PUSH
59719: LD_VAR 0 1
59723: EQUAL
59724: PUSH
59725: LD_VAR 0 1
59729: PPUSH
59730: CALL_OW 314
59734: NOT
59735: AND
59736: IFFALSE 59662
// PlaySoundXY ( x , y , PlantMine ) ;
59738: LD_VAR 0 2
59742: PPUSH
59743: LD_VAR 0 3
59747: PPUSH
59748: LD_STRING PlantMine
59750: PPUSH
59751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59755: LD_VAR 0 2
59759: PPUSH
59760: LD_VAR 0 3
59764: PPUSH
59765: LD_VAR 0 1
59769: PPUSH
59770: CALL_OW 255
59774: PPUSH
59775: LD_INT 0
59777: PPUSH
59778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59782: LD_ADDR_EXP 41
59786: PUSH
59787: LD_EXP 41
59791: PPUSH
59792: LD_VAR 0 5
59796: PUSH
59797: LD_EXP 41
59801: PUSH
59802: LD_VAR 0 5
59806: ARRAY
59807: PUSH
59808: LD_INT 1
59810: PLUS
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PPUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_VAR 0 3
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PPUSH
59830: CALL 20371 0 3
59834: ST_TO_ADDR
// result := true ;
59835: LD_ADDR_VAR 0 4
59839: PUSH
59840: LD_INT 1
59842: ST_TO_ADDR
// end ;
59843: LD_VAR 0 4
59847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59848: LD_INT 0
59850: PPUSH
59851: PPUSH
59852: PPUSH
// if not unit in minersList then
59853: LD_VAR 0 1
59857: PUSH
59858: LD_EXP 40
59862: IN
59863: NOT
59864: IFFALSE 59868
// exit ;
59866: GO 60260
// index := GetElementIndex ( minersList , unit ) ;
59868: LD_ADDR_VAR 0 6
59872: PUSH
59873: LD_EXP 40
59877: PPUSH
59878: LD_VAR 0 1
59882: PPUSH
59883: CALL 20156 0 2
59887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59888: LD_ADDR_VAR 0 5
59892: PUSH
59893: DOUBLE
59894: LD_EXP 41
59898: PUSH
59899: LD_VAR 0 6
59903: ARRAY
59904: INC
59905: ST_TO_ADDR
59906: LD_INT 1
59908: PUSH
59909: FOR_DOWNTO
59910: IFFALSE 60071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59912: LD_EXP 41
59916: PUSH
59917: LD_VAR 0 6
59921: ARRAY
59922: PUSH
59923: LD_VAR 0 5
59927: ARRAY
59928: PUSH
59929: LD_INT 1
59931: ARRAY
59932: PUSH
59933: LD_VAR 0 2
59937: EQUAL
59938: PUSH
59939: LD_EXP 41
59943: PUSH
59944: LD_VAR 0 6
59948: ARRAY
59949: PUSH
59950: LD_VAR 0 5
59954: ARRAY
59955: PUSH
59956: LD_INT 2
59958: ARRAY
59959: PUSH
59960: LD_VAR 0 3
59964: EQUAL
59965: AND
59966: IFFALSE 60069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59968: LD_EXP 41
59972: PUSH
59973: LD_VAR 0 6
59977: ARRAY
59978: PUSH
59979: LD_VAR 0 5
59983: ARRAY
59984: PUSH
59985: LD_INT 1
59987: ARRAY
59988: PPUSH
59989: LD_EXP 41
59993: PUSH
59994: LD_VAR 0 6
59998: ARRAY
59999: PUSH
60000: LD_VAR 0 5
60004: ARRAY
60005: PUSH
60006: LD_INT 2
60008: ARRAY
60009: PPUSH
60010: LD_VAR 0 1
60014: PPUSH
60015: CALL_OW 255
60019: PPUSH
60020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60024: LD_ADDR_EXP 41
60028: PUSH
60029: LD_EXP 41
60033: PPUSH
60034: LD_VAR 0 6
60038: PPUSH
60039: LD_EXP 41
60043: PUSH
60044: LD_VAR 0 6
60048: ARRAY
60049: PPUSH
60050: LD_VAR 0 5
60054: PPUSH
60055: CALL_OW 3
60059: PPUSH
60060: CALL_OW 1
60064: ST_TO_ADDR
// exit ;
60065: POP
60066: POP
60067: GO 60260
// end ; end ;
60069: GO 59909
60071: POP
60072: POP
// for i := minerMinesList [ index ] downto 1 do
60073: LD_ADDR_VAR 0 5
60077: PUSH
60078: DOUBLE
60079: LD_EXP 41
60083: PUSH
60084: LD_VAR 0 6
60088: ARRAY
60089: INC
60090: ST_TO_ADDR
60091: LD_INT 1
60093: PUSH
60094: FOR_DOWNTO
60095: IFFALSE 60258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60097: LD_EXP 41
60101: PUSH
60102: LD_VAR 0 6
60106: ARRAY
60107: PUSH
60108: LD_VAR 0 5
60112: ARRAY
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PPUSH
60118: LD_EXP 41
60122: PUSH
60123: LD_VAR 0 6
60127: ARRAY
60128: PUSH
60129: LD_VAR 0 5
60133: ARRAY
60134: PUSH
60135: LD_INT 2
60137: ARRAY
60138: PPUSH
60139: LD_VAR 0 2
60143: PPUSH
60144: LD_VAR 0 3
60148: PPUSH
60149: CALL_OW 298
60153: PUSH
60154: LD_INT 6
60156: LESS
60157: IFFALSE 60256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60159: LD_EXP 41
60163: PUSH
60164: LD_VAR 0 6
60168: ARRAY
60169: PUSH
60170: LD_VAR 0 5
60174: ARRAY
60175: PUSH
60176: LD_INT 1
60178: ARRAY
60179: PPUSH
60180: LD_EXP 41
60184: PUSH
60185: LD_VAR 0 6
60189: ARRAY
60190: PUSH
60191: LD_VAR 0 5
60195: ARRAY
60196: PUSH
60197: LD_INT 2
60199: ARRAY
60200: PPUSH
60201: LD_VAR 0 1
60205: PPUSH
60206: CALL_OW 255
60210: PPUSH
60211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60215: LD_ADDR_EXP 41
60219: PUSH
60220: LD_EXP 41
60224: PPUSH
60225: LD_VAR 0 6
60229: PPUSH
60230: LD_EXP 41
60234: PUSH
60235: LD_VAR 0 6
60239: ARRAY
60240: PPUSH
60241: LD_VAR 0 5
60245: PPUSH
60246: CALL_OW 3
60250: PPUSH
60251: CALL_OW 1
60255: ST_TO_ADDR
// end ; end ;
60256: GO 60094
60258: POP
60259: POP
// end ;
60260: LD_VAR 0 4
60264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60265: LD_INT 0
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
60273: PPUSH
60274: PPUSH
60275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60276: LD_VAR 0 1
60280: PPUSH
60281: CALL_OW 264
60285: PUSH
60286: LD_INT 81
60288: EQUAL
60289: NOT
60290: PUSH
60291: LD_VAR 0 1
60295: PUSH
60296: LD_EXP 40
60300: IN
60301: NOT
60302: OR
60303: IFFALSE 60307
// exit ;
60305: GO 60629
// index := GetElementIndex ( minersList , unit ) ;
60307: LD_ADDR_VAR 0 6
60311: PUSH
60312: LD_EXP 40
60316: PPUSH
60317: LD_VAR 0 1
60321: PPUSH
60322: CALL 20156 0 2
60326: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60327: LD_ADDR_VAR 0 8
60331: PUSH
60332: LD_EXP 42
60336: PUSH
60337: LD_EXP 41
60341: PUSH
60342: LD_VAR 0 6
60346: ARRAY
60347: MINUS
60348: ST_TO_ADDR
// if not minesFreeAmount then
60349: LD_VAR 0 8
60353: NOT
60354: IFFALSE 60358
// exit ;
60356: GO 60629
// tmp := [ ] ;
60358: LD_ADDR_VAR 0 7
60362: PUSH
60363: EMPTY
60364: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60365: LD_ADDR_VAR 0 5
60369: PUSH
60370: DOUBLE
60371: LD_INT 1
60373: DEC
60374: ST_TO_ADDR
60375: LD_VAR 0 8
60379: PUSH
60380: FOR_TO
60381: IFFALSE 60576
// begin _d := rand ( 0 , 5 ) ;
60383: LD_ADDR_VAR 0 11
60387: PUSH
60388: LD_INT 0
60390: PPUSH
60391: LD_INT 5
60393: PPUSH
60394: CALL_OW 12
60398: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60399: LD_ADDR_VAR 0 12
60403: PUSH
60404: LD_INT 2
60406: PPUSH
60407: LD_INT 6
60409: PPUSH
60410: CALL_OW 12
60414: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60415: LD_ADDR_VAR 0 9
60419: PUSH
60420: LD_VAR 0 2
60424: PPUSH
60425: LD_VAR 0 11
60429: PPUSH
60430: LD_VAR 0 12
60434: PPUSH
60435: CALL_OW 272
60439: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60440: LD_ADDR_VAR 0 10
60444: PUSH
60445: LD_VAR 0 3
60449: PPUSH
60450: LD_VAR 0 11
60454: PPUSH
60455: LD_VAR 0 12
60459: PPUSH
60460: CALL_OW 273
60464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60465: LD_VAR 0 9
60469: PPUSH
60470: LD_VAR 0 10
60474: PPUSH
60475: CALL_OW 488
60479: PUSH
60480: LD_VAR 0 9
60484: PUSH
60485: LD_VAR 0 10
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_VAR 0 7
60498: IN
60499: NOT
60500: AND
60501: PUSH
60502: LD_VAR 0 9
60506: PPUSH
60507: LD_VAR 0 10
60511: PPUSH
60512: CALL_OW 458
60516: NOT
60517: AND
60518: IFFALSE 60560
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60520: LD_ADDR_VAR 0 7
60524: PUSH
60525: LD_VAR 0 7
60529: PPUSH
60530: LD_VAR 0 7
60534: PUSH
60535: LD_INT 1
60537: PLUS
60538: PPUSH
60539: LD_VAR 0 9
60543: PUSH
60544: LD_VAR 0 10
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PPUSH
60553: CALL_OW 1
60557: ST_TO_ADDR
60558: GO 60574
// i := i - 1 ;
60560: LD_ADDR_VAR 0 5
60564: PUSH
60565: LD_VAR 0 5
60569: PUSH
60570: LD_INT 1
60572: MINUS
60573: ST_TO_ADDR
// end ;
60574: GO 60380
60576: POP
60577: POP
// for i in tmp do
60578: LD_ADDR_VAR 0 5
60582: PUSH
60583: LD_VAR 0 7
60587: PUSH
60588: FOR_IN
60589: IFFALSE 60627
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60591: LD_VAR 0 1
60595: PPUSH
60596: LD_VAR 0 5
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: PPUSH
60605: LD_VAR 0 5
60609: PUSH
60610: LD_INT 2
60612: ARRAY
60613: PPUSH
60614: CALL 59573 0 3
60618: NOT
60619: IFFALSE 60625
// exit ;
60621: POP
60622: POP
60623: GO 60629
60625: GO 60588
60627: POP
60628: POP
// end ;
60629: LD_VAR 0 4
60633: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60634: LD_INT 0
60636: PPUSH
60637: PPUSH
60638: PPUSH
60639: PPUSH
60640: PPUSH
60641: PPUSH
60642: PPUSH
// if not GetClass ( unit ) = class_sniper then
60643: LD_VAR 0 1
60647: PPUSH
60648: CALL_OW 257
60652: PUSH
60653: LD_INT 5
60655: EQUAL
60656: NOT
60657: IFFALSE 60661
// exit ;
60659: GO 61049
// dist := 8 ;
60661: LD_ADDR_VAR 0 5
60665: PUSH
60666: LD_INT 8
60668: ST_TO_ADDR
// viewRange := 12 ;
60669: LD_ADDR_VAR 0 7
60673: PUSH
60674: LD_INT 12
60676: ST_TO_ADDR
// side := GetSide ( unit ) ;
60677: LD_ADDR_VAR 0 6
60681: PUSH
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 255
60691: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60692: LD_INT 61
60694: PPUSH
60695: LD_VAR 0 6
60699: PPUSH
60700: CALL_OW 321
60704: PUSH
60705: LD_INT 2
60707: EQUAL
60708: IFFALSE 60718
// viewRange := 16 ;
60710: LD_ADDR_VAR 0 7
60714: PUSH
60715: LD_INT 16
60717: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60718: LD_VAR 0 1
60722: PPUSH
60723: LD_VAR 0 2
60727: PPUSH
60728: LD_VAR 0 3
60732: PPUSH
60733: CALL_OW 297
60737: PUSH
60738: LD_VAR 0 5
60742: GREATER
60743: IFFALSE 60822
// begin ComMoveXY ( unit , x , y ) ;
60745: LD_VAR 0 1
60749: PPUSH
60750: LD_VAR 0 2
60754: PPUSH
60755: LD_VAR 0 3
60759: PPUSH
60760: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60764: LD_INT 35
60766: PPUSH
60767: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60771: LD_VAR 0 1
60775: PPUSH
60776: LD_VAR 0 2
60780: PPUSH
60781: LD_VAR 0 3
60785: PPUSH
60786: CALL 51492 0 3
60790: NOT
60791: IFFALSE 60795
// exit ;
60793: GO 61049
// until GetDistUnitXY ( unit , x , y ) < dist ;
60795: LD_VAR 0 1
60799: PPUSH
60800: LD_VAR 0 2
60804: PPUSH
60805: LD_VAR 0 3
60809: PPUSH
60810: CALL_OW 297
60814: PUSH
60815: LD_VAR 0 5
60819: LESS
60820: IFFALSE 60764
// end ; ComTurnXY ( unit , x , y ) ;
60822: LD_VAR 0 1
60826: PPUSH
60827: LD_VAR 0 2
60831: PPUSH
60832: LD_VAR 0 3
60836: PPUSH
60837: CALL_OW 118
// wait ( 5 ) ;
60841: LD_INT 5
60843: PPUSH
60844: CALL_OW 67
// _d := GetDir ( unit ) ;
60848: LD_ADDR_VAR 0 10
60852: PUSH
60853: LD_VAR 0 1
60857: PPUSH
60858: CALL_OW 254
60862: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60863: LD_ADDR_VAR 0 8
60867: PUSH
60868: LD_VAR 0 1
60872: PPUSH
60873: CALL_OW 250
60877: PPUSH
60878: LD_VAR 0 10
60882: PPUSH
60883: LD_VAR 0 5
60887: PPUSH
60888: CALL_OW 272
60892: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60893: LD_ADDR_VAR 0 9
60897: PUSH
60898: LD_VAR 0 1
60902: PPUSH
60903: CALL_OW 251
60907: PPUSH
60908: LD_VAR 0 10
60912: PPUSH
60913: LD_VAR 0 5
60917: PPUSH
60918: CALL_OW 273
60922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60923: LD_VAR 0 8
60927: PPUSH
60928: LD_VAR 0 9
60932: PPUSH
60933: CALL_OW 488
60937: NOT
60938: IFFALSE 60942
// exit ;
60940: GO 61049
// ComAnimCustom ( unit , 1 ) ;
60942: LD_VAR 0 1
60946: PPUSH
60947: LD_INT 1
60949: PPUSH
60950: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60954: LD_VAR 0 8
60958: PPUSH
60959: LD_VAR 0 9
60963: PPUSH
60964: LD_VAR 0 6
60968: PPUSH
60969: LD_VAR 0 7
60973: PPUSH
60974: CALL_OW 330
// repeat wait ( 1 ) ;
60978: LD_INT 1
60980: PPUSH
60981: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60985: LD_VAR 0 1
60989: PPUSH
60990: CALL_OW 316
60994: PUSH
60995: LD_VAR 0 1
60999: PPUSH
61000: CALL_OW 314
61004: OR
61005: PUSH
61006: LD_VAR 0 1
61010: PPUSH
61011: CALL_OW 302
61015: NOT
61016: OR
61017: PUSH
61018: LD_VAR 0 1
61022: PPUSH
61023: CALL_OW 301
61027: OR
61028: IFFALSE 60978
// RemoveSeeing ( _x , _y , side ) ;
61030: LD_VAR 0 8
61034: PPUSH
61035: LD_VAR 0 9
61039: PPUSH
61040: LD_VAR 0 6
61044: PPUSH
61045: CALL_OW 331
// end ; end_of_file
61049: LD_VAR 0 4
61053: RET
// every 0 0$1 do
61054: GO 61056
61056: DISABLE
// begin enable ;
61057: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61058: LD_STRING updateTimer(
61060: PUSH
61061: LD_OWVAR 1
61065: STR
61066: PUSH
61067: LD_STRING );
61069: STR
61070: PPUSH
61071: CALL_OW 559
// end ;
61075: END
// export function SOS_MapStart ( ) ; begin
61076: LD_INT 0
61078: PPUSH
// if streamModeActive then
61079: LD_EXP 43
61083: IFFALSE 61092
// DefineStreamItems ( true ) ;
61085: LD_INT 1
61087: PPUSH
61088: CALL 62746 0 1
// UpdateFactoryWaypoints ( ) ;
61092: CALL 75607 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61096: CALL 75864 0 0
// end ;
61100: LD_VAR 0 1
61104: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61105: LD_INT 0
61107: PPUSH
// if p2 = hack_mode then
61108: LD_VAR 0 2
61112: PUSH
61113: LD_INT 100
61115: EQUAL
61116: IFFALSE 62119
// begin if not StreamModeActive then
61118: LD_EXP 43
61122: NOT
61123: IFFALSE 61133
// StreamModeActive := true ;
61125: LD_ADDR_EXP 43
61129: PUSH
61130: LD_INT 1
61132: ST_TO_ADDR
// if p3 = 0 then
61133: LD_VAR 0 3
61137: PUSH
61138: LD_INT 0
61140: EQUAL
61141: IFFALSE 61147
// InitStreamMode ;
61143: CALL 62282 0 0
// if p3 = 1 then
61147: LD_VAR 0 3
61151: PUSH
61152: LD_INT 1
61154: EQUAL
61155: IFFALSE 61165
// sRocket := true ;
61157: LD_ADDR_EXP 48
61161: PUSH
61162: LD_INT 1
61164: ST_TO_ADDR
// if p3 = 2 then
61165: LD_VAR 0 3
61169: PUSH
61170: LD_INT 2
61172: EQUAL
61173: IFFALSE 61183
// sSpeed := true ;
61175: LD_ADDR_EXP 47
61179: PUSH
61180: LD_INT 1
61182: ST_TO_ADDR
// if p3 = 3 then
61183: LD_VAR 0 3
61187: PUSH
61188: LD_INT 3
61190: EQUAL
61191: IFFALSE 61201
// sEngine := true ;
61193: LD_ADDR_EXP 49
61197: PUSH
61198: LD_INT 1
61200: ST_TO_ADDR
// if p3 = 4 then
61201: LD_VAR 0 3
61205: PUSH
61206: LD_INT 4
61208: EQUAL
61209: IFFALSE 61219
// sSpec := true ;
61211: LD_ADDR_EXP 46
61215: PUSH
61216: LD_INT 1
61218: ST_TO_ADDR
// if p3 = 5 then
61219: LD_VAR 0 3
61223: PUSH
61224: LD_INT 5
61226: EQUAL
61227: IFFALSE 61237
// sLevel := true ;
61229: LD_ADDR_EXP 50
61233: PUSH
61234: LD_INT 1
61236: ST_TO_ADDR
// if p3 = 6 then
61237: LD_VAR 0 3
61241: PUSH
61242: LD_INT 6
61244: EQUAL
61245: IFFALSE 61255
// sArmoury := true ;
61247: LD_ADDR_EXP 51
61251: PUSH
61252: LD_INT 1
61254: ST_TO_ADDR
// if p3 = 7 then
61255: LD_VAR 0 3
61259: PUSH
61260: LD_INT 7
61262: EQUAL
61263: IFFALSE 61273
// sRadar := true ;
61265: LD_ADDR_EXP 52
61269: PUSH
61270: LD_INT 1
61272: ST_TO_ADDR
// if p3 = 8 then
61273: LD_VAR 0 3
61277: PUSH
61278: LD_INT 8
61280: EQUAL
61281: IFFALSE 61291
// sBunker := true ;
61283: LD_ADDR_EXP 53
61287: PUSH
61288: LD_INT 1
61290: ST_TO_ADDR
// if p3 = 9 then
61291: LD_VAR 0 3
61295: PUSH
61296: LD_INT 9
61298: EQUAL
61299: IFFALSE 61309
// sHack := true ;
61301: LD_ADDR_EXP 54
61305: PUSH
61306: LD_INT 1
61308: ST_TO_ADDR
// if p3 = 10 then
61309: LD_VAR 0 3
61313: PUSH
61314: LD_INT 10
61316: EQUAL
61317: IFFALSE 61327
// sFire := true ;
61319: LD_ADDR_EXP 55
61323: PUSH
61324: LD_INT 1
61326: ST_TO_ADDR
// if p3 = 11 then
61327: LD_VAR 0 3
61331: PUSH
61332: LD_INT 11
61334: EQUAL
61335: IFFALSE 61345
// sRefresh := true ;
61337: LD_ADDR_EXP 56
61341: PUSH
61342: LD_INT 1
61344: ST_TO_ADDR
// if p3 = 12 then
61345: LD_VAR 0 3
61349: PUSH
61350: LD_INT 12
61352: EQUAL
61353: IFFALSE 61363
// sExp := true ;
61355: LD_ADDR_EXP 57
61359: PUSH
61360: LD_INT 1
61362: ST_TO_ADDR
// if p3 = 13 then
61363: LD_VAR 0 3
61367: PUSH
61368: LD_INT 13
61370: EQUAL
61371: IFFALSE 61381
// sDepot := true ;
61373: LD_ADDR_EXP 58
61377: PUSH
61378: LD_INT 1
61380: ST_TO_ADDR
// if p3 = 14 then
61381: LD_VAR 0 3
61385: PUSH
61386: LD_INT 14
61388: EQUAL
61389: IFFALSE 61399
// sFlag := true ;
61391: LD_ADDR_EXP 59
61395: PUSH
61396: LD_INT 1
61398: ST_TO_ADDR
// if p3 = 15 then
61399: LD_VAR 0 3
61403: PUSH
61404: LD_INT 15
61406: EQUAL
61407: IFFALSE 61417
// sKamikadze := true ;
61409: LD_ADDR_EXP 67
61413: PUSH
61414: LD_INT 1
61416: ST_TO_ADDR
// if p3 = 16 then
61417: LD_VAR 0 3
61421: PUSH
61422: LD_INT 16
61424: EQUAL
61425: IFFALSE 61435
// sTroll := true ;
61427: LD_ADDR_EXP 68
61431: PUSH
61432: LD_INT 1
61434: ST_TO_ADDR
// if p3 = 17 then
61435: LD_VAR 0 3
61439: PUSH
61440: LD_INT 17
61442: EQUAL
61443: IFFALSE 61453
// sSlow := true ;
61445: LD_ADDR_EXP 69
61449: PUSH
61450: LD_INT 1
61452: ST_TO_ADDR
// if p3 = 18 then
61453: LD_VAR 0 3
61457: PUSH
61458: LD_INT 18
61460: EQUAL
61461: IFFALSE 61471
// sLack := true ;
61463: LD_ADDR_EXP 70
61467: PUSH
61468: LD_INT 1
61470: ST_TO_ADDR
// if p3 = 19 then
61471: LD_VAR 0 3
61475: PUSH
61476: LD_INT 19
61478: EQUAL
61479: IFFALSE 61489
// sTank := true ;
61481: LD_ADDR_EXP 72
61485: PUSH
61486: LD_INT 1
61488: ST_TO_ADDR
// if p3 = 20 then
61489: LD_VAR 0 3
61493: PUSH
61494: LD_INT 20
61496: EQUAL
61497: IFFALSE 61507
// sRemote := true ;
61499: LD_ADDR_EXP 73
61503: PUSH
61504: LD_INT 1
61506: ST_TO_ADDR
// if p3 = 21 then
61507: LD_VAR 0 3
61511: PUSH
61512: LD_INT 21
61514: EQUAL
61515: IFFALSE 61525
// sPowell := true ;
61517: LD_ADDR_EXP 74
61521: PUSH
61522: LD_INT 1
61524: ST_TO_ADDR
// if p3 = 22 then
61525: LD_VAR 0 3
61529: PUSH
61530: LD_INT 22
61532: EQUAL
61533: IFFALSE 61543
// sTeleport := true ;
61535: LD_ADDR_EXP 77
61539: PUSH
61540: LD_INT 1
61542: ST_TO_ADDR
// if p3 = 23 then
61543: LD_VAR 0 3
61547: PUSH
61548: LD_INT 23
61550: EQUAL
61551: IFFALSE 61561
// sOilTower := true ;
61553: LD_ADDR_EXP 79
61557: PUSH
61558: LD_INT 1
61560: ST_TO_ADDR
// if p3 = 24 then
61561: LD_VAR 0 3
61565: PUSH
61566: LD_INT 24
61568: EQUAL
61569: IFFALSE 61579
// sShovel := true ;
61571: LD_ADDR_EXP 80
61575: PUSH
61576: LD_INT 1
61578: ST_TO_ADDR
// if p3 = 25 then
61579: LD_VAR 0 3
61583: PUSH
61584: LD_INT 25
61586: EQUAL
61587: IFFALSE 61597
// sSheik := true ;
61589: LD_ADDR_EXP 81
61593: PUSH
61594: LD_INT 1
61596: ST_TO_ADDR
// if p3 = 26 then
61597: LD_VAR 0 3
61601: PUSH
61602: LD_INT 26
61604: EQUAL
61605: IFFALSE 61615
// sEarthquake := true ;
61607: LD_ADDR_EXP 83
61611: PUSH
61612: LD_INT 1
61614: ST_TO_ADDR
// if p3 = 27 then
61615: LD_VAR 0 3
61619: PUSH
61620: LD_INT 27
61622: EQUAL
61623: IFFALSE 61633
// sAI := true ;
61625: LD_ADDR_EXP 84
61629: PUSH
61630: LD_INT 1
61632: ST_TO_ADDR
// if p3 = 28 then
61633: LD_VAR 0 3
61637: PUSH
61638: LD_INT 28
61640: EQUAL
61641: IFFALSE 61651
// sCargo := true ;
61643: LD_ADDR_EXP 87
61647: PUSH
61648: LD_INT 1
61650: ST_TO_ADDR
// if p3 = 29 then
61651: LD_VAR 0 3
61655: PUSH
61656: LD_INT 29
61658: EQUAL
61659: IFFALSE 61669
// sDLaser := true ;
61661: LD_ADDR_EXP 88
61665: PUSH
61666: LD_INT 1
61668: ST_TO_ADDR
// if p3 = 30 then
61669: LD_VAR 0 3
61673: PUSH
61674: LD_INT 30
61676: EQUAL
61677: IFFALSE 61687
// sExchange := true ;
61679: LD_ADDR_EXP 89
61683: PUSH
61684: LD_INT 1
61686: ST_TO_ADDR
// if p3 = 31 then
61687: LD_VAR 0 3
61691: PUSH
61692: LD_INT 31
61694: EQUAL
61695: IFFALSE 61705
// sFac := true ;
61697: LD_ADDR_EXP 90
61701: PUSH
61702: LD_INT 1
61704: ST_TO_ADDR
// if p3 = 32 then
61705: LD_VAR 0 3
61709: PUSH
61710: LD_INT 32
61712: EQUAL
61713: IFFALSE 61723
// sPower := true ;
61715: LD_ADDR_EXP 91
61719: PUSH
61720: LD_INT 1
61722: ST_TO_ADDR
// if p3 = 33 then
61723: LD_VAR 0 3
61727: PUSH
61728: LD_INT 33
61730: EQUAL
61731: IFFALSE 61741
// sRandom := true ;
61733: LD_ADDR_EXP 92
61737: PUSH
61738: LD_INT 1
61740: ST_TO_ADDR
// if p3 = 34 then
61741: LD_VAR 0 3
61745: PUSH
61746: LD_INT 34
61748: EQUAL
61749: IFFALSE 61759
// sShield := true ;
61751: LD_ADDR_EXP 93
61755: PUSH
61756: LD_INT 1
61758: ST_TO_ADDR
// if p3 = 35 then
61759: LD_VAR 0 3
61763: PUSH
61764: LD_INT 35
61766: EQUAL
61767: IFFALSE 61777
// sTime := true ;
61769: LD_ADDR_EXP 94
61773: PUSH
61774: LD_INT 1
61776: ST_TO_ADDR
// if p3 = 36 then
61777: LD_VAR 0 3
61781: PUSH
61782: LD_INT 36
61784: EQUAL
61785: IFFALSE 61795
// sTools := true ;
61787: LD_ADDR_EXP 95
61791: PUSH
61792: LD_INT 1
61794: ST_TO_ADDR
// if p3 = 101 then
61795: LD_VAR 0 3
61799: PUSH
61800: LD_INT 101
61802: EQUAL
61803: IFFALSE 61813
// sSold := true ;
61805: LD_ADDR_EXP 60
61809: PUSH
61810: LD_INT 1
61812: ST_TO_ADDR
// if p3 = 102 then
61813: LD_VAR 0 3
61817: PUSH
61818: LD_INT 102
61820: EQUAL
61821: IFFALSE 61831
// sDiff := true ;
61823: LD_ADDR_EXP 61
61827: PUSH
61828: LD_INT 1
61830: ST_TO_ADDR
// if p3 = 103 then
61831: LD_VAR 0 3
61835: PUSH
61836: LD_INT 103
61838: EQUAL
61839: IFFALSE 61849
// sFog := true ;
61841: LD_ADDR_EXP 64
61845: PUSH
61846: LD_INT 1
61848: ST_TO_ADDR
// if p3 = 104 then
61849: LD_VAR 0 3
61853: PUSH
61854: LD_INT 104
61856: EQUAL
61857: IFFALSE 61867
// sReset := true ;
61859: LD_ADDR_EXP 65
61863: PUSH
61864: LD_INT 1
61866: ST_TO_ADDR
// if p3 = 105 then
61867: LD_VAR 0 3
61871: PUSH
61872: LD_INT 105
61874: EQUAL
61875: IFFALSE 61885
// sSun := true ;
61877: LD_ADDR_EXP 66
61881: PUSH
61882: LD_INT 1
61884: ST_TO_ADDR
// if p3 = 106 then
61885: LD_VAR 0 3
61889: PUSH
61890: LD_INT 106
61892: EQUAL
61893: IFFALSE 61903
// sTiger := true ;
61895: LD_ADDR_EXP 62
61899: PUSH
61900: LD_INT 1
61902: ST_TO_ADDR
// if p3 = 107 then
61903: LD_VAR 0 3
61907: PUSH
61908: LD_INT 107
61910: EQUAL
61911: IFFALSE 61921
// sBomb := true ;
61913: LD_ADDR_EXP 63
61917: PUSH
61918: LD_INT 1
61920: ST_TO_ADDR
// if p3 = 108 then
61921: LD_VAR 0 3
61925: PUSH
61926: LD_INT 108
61928: EQUAL
61929: IFFALSE 61939
// sWound := true ;
61931: LD_ADDR_EXP 71
61935: PUSH
61936: LD_INT 1
61938: ST_TO_ADDR
// if p3 = 109 then
61939: LD_VAR 0 3
61943: PUSH
61944: LD_INT 109
61946: EQUAL
61947: IFFALSE 61957
// sBetray := true ;
61949: LD_ADDR_EXP 75
61953: PUSH
61954: LD_INT 1
61956: ST_TO_ADDR
// if p3 = 110 then
61957: LD_VAR 0 3
61961: PUSH
61962: LD_INT 110
61964: EQUAL
61965: IFFALSE 61975
// sContamin := true ;
61967: LD_ADDR_EXP 76
61971: PUSH
61972: LD_INT 1
61974: ST_TO_ADDR
// if p3 = 111 then
61975: LD_VAR 0 3
61979: PUSH
61980: LD_INT 111
61982: EQUAL
61983: IFFALSE 61993
// sOil := true ;
61985: LD_ADDR_EXP 78
61989: PUSH
61990: LD_INT 1
61992: ST_TO_ADDR
// if p3 = 112 then
61993: LD_VAR 0 3
61997: PUSH
61998: LD_INT 112
62000: EQUAL
62001: IFFALSE 62011
// sStu := true ;
62003: LD_ADDR_EXP 82
62007: PUSH
62008: LD_INT 1
62010: ST_TO_ADDR
// if p3 = 113 then
62011: LD_VAR 0 3
62015: PUSH
62016: LD_INT 113
62018: EQUAL
62019: IFFALSE 62029
// sBazooka := true ;
62021: LD_ADDR_EXP 85
62025: PUSH
62026: LD_INT 1
62028: ST_TO_ADDR
// if p3 = 114 then
62029: LD_VAR 0 3
62033: PUSH
62034: LD_INT 114
62036: EQUAL
62037: IFFALSE 62047
// sMortar := true ;
62039: LD_ADDR_EXP 86
62043: PUSH
62044: LD_INT 1
62046: ST_TO_ADDR
// if p3 = 115 then
62047: LD_VAR 0 3
62051: PUSH
62052: LD_INT 115
62054: EQUAL
62055: IFFALSE 62065
// sRanger := true ;
62057: LD_ADDR_EXP 96
62061: PUSH
62062: LD_INT 1
62064: ST_TO_ADDR
// if p3 = 116 then
62065: LD_VAR 0 3
62069: PUSH
62070: LD_INT 116
62072: EQUAL
62073: IFFALSE 62083
// sComputer := true ;
62075: LD_ADDR_EXP 97
62079: PUSH
62080: LD_INT 1
62082: ST_TO_ADDR
// if p3 = 117 then
62083: LD_VAR 0 3
62087: PUSH
62088: LD_INT 117
62090: EQUAL
62091: IFFALSE 62101
// s30 := true ;
62093: LD_ADDR_EXP 98
62097: PUSH
62098: LD_INT 1
62100: ST_TO_ADDR
// if p3 = 118 then
62101: LD_VAR 0 3
62105: PUSH
62106: LD_INT 118
62108: EQUAL
62109: IFFALSE 62119
// s60 := true ;
62111: LD_ADDR_EXP 99
62115: PUSH
62116: LD_INT 1
62118: ST_TO_ADDR
// end ; if p2 = stream_mode then
62119: LD_VAR 0 2
62123: PUSH
62124: LD_INT 101
62126: EQUAL
62127: IFFALSE 62255
// begin case p3 of 1 :
62129: LD_VAR 0 3
62133: PUSH
62134: LD_INT 1
62136: DOUBLE
62137: EQUAL
62138: IFTRUE 62142
62140: GO 62149
62142: POP
// hHackUnlimitedResources ; 2 :
62143: CALL 74353 0 0
62147: GO 62255
62149: LD_INT 2
62151: DOUBLE
62152: EQUAL
62153: IFTRUE 62157
62155: GO 62164
62157: POP
// hHackSetLevel10 ; 3 :
62158: CALL 74486 0 0
62162: GO 62255
62164: LD_INT 3
62166: DOUBLE
62167: EQUAL
62168: IFTRUE 62172
62170: GO 62179
62172: POP
// hHackSetLevel10YourUnits ; 4 :
62173: CALL 74571 0 0
62177: GO 62255
62179: LD_INT 4
62181: DOUBLE
62182: EQUAL
62183: IFTRUE 62187
62185: GO 62194
62187: POP
// hHackInvincible ; 5 :
62188: CALL 75019 0 0
62192: GO 62255
62194: LD_INT 5
62196: DOUBLE
62197: EQUAL
62198: IFTRUE 62202
62200: GO 62209
62202: POP
// hHackInvisible ; 6 :
62203: CALL 75130 0 0
62207: GO 62255
62209: LD_INT 6
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62217
62215: GO 62224
62217: POP
// hHackChangeYourSide ; 7 :
62218: CALL 75187 0 0
62222: GO 62255
62224: LD_INT 7
62226: DOUBLE
62227: EQUAL
62228: IFTRUE 62232
62230: GO 62239
62232: POP
// hHackChangeUnitSide ; 8 :
62233: CALL 75229 0 0
62237: GO 62255
62239: LD_INT 8
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62247
62245: GO 62254
62247: POP
// hHackFog ; end ;
62248: CALL 75330 0 0
62252: GO 62255
62254: POP
// end ; end ;
62255: LD_VAR 0 7
62259: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
62260: GO 62262
62262: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
62263: LD_STRING initStreamRollete();
62265: PPUSH
62266: CALL_OW 559
// InitStreamMode ;
62270: CALL 62282 0 0
// DefineStreamItems ( false ) ;
62274: LD_INT 0
62276: PPUSH
62277: CALL 62746 0 1
// end ;
62281: END
// function InitStreamMode ; begin
62282: LD_INT 0
62284: PPUSH
// streamModeActive := false ;
62285: LD_ADDR_EXP 43
62289: PUSH
62290: LD_INT 0
62292: ST_TO_ADDR
// normalCounter := 36 ;
62293: LD_ADDR_EXP 44
62297: PUSH
62298: LD_INT 36
62300: ST_TO_ADDR
// hardcoreCounter := 18 ;
62301: LD_ADDR_EXP 45
62305: PUSH
62306: LD_INT 18
62308: ST_TO_ADDR
// sRocket := false ;
62309: LD_ADDR_EXP 48
62313: PUSH
62314: LD_INT 0
62316: ST_TO_ADDR
// sSpeed := false ;
62317: LD_ADDR_EXP 47
62321: PUSH
62322: LD_INT 0
62324: ST_TO_ADDR
// sEngine := false ;
62325: LD_ADDR_EXP 49
62329: PUSH
62330: LD_INT 0
62332: ST_TO_ADDR
// sSpec := false ;
62333: LD_ADDR_EXP 46
62337: PUSH
62338: LD_INT 0
62340: ST_TO_ADDR
// sLevel := false ;
62341: LD_ADDR_EXP 50
62345: PUSH
62346: LD_INT 0
62348: ST_TO_ADDR
// sArmoury := false ;
62349: LD_ADDR_EXP 51
62353: PUSH
62354: LD_INT 0
62356: ST_TO_ADDR
// sRadar := false ;
62357: LD_ADDR_EXP 52
62361: PUSH
62362: LD_INT 0
62364: ST_TO_ADDR
// sBunker := false ;
62365: LD_ADDR_EXP 53
62369: PUSH
62370: LD_INT 0
62372: ST_TO_ADDR
// sHack := false ;
62373: LD_ADDR_EXP 54
62377: PUSH
62378: LD_INT 0
62380: ST_TO_ADDR
// sFire := false ;
62381: LD_ADDR_EXP 55
62385: PUSH
62386: LD_INT 0
62388: ST_TO_ADDR
// sRefresh := false ;
62389: LD_ADDR_EXP 56
62393: PUSH
62394: LD_INT 0
62396: ST_TO_ADDR
// sExp := false ;
62397: LD_ADDR_EXP 57
62401: PUSH
62402: LD_INT 0
62404: ST_TO_ADDR
// sDepot := false ;
62405: LD_ADDR_EXP 58
62409: PUSH
62410: LD_INT 0
62412: ST_TO_ADDR
// sFlag := false ;
62413: LD_ADDR_EXP 59
62417: PUSH
62418: LD_INT 0
62420: ST_TO_ADDR
// sKamikadze := false ;
62421: LD_ADDR_EXP 67
62425: PUSH
62426: LD_INT 0
62428: ST_TO_ADDR
// sTroll := false ;
62429: LD_ADDR_EXP 68
62433: PUSH
62434: LD_INT 0
62436: ST_TO_ADDR
// sSlow := false ;
62437: LD_ADDR_EXP 69
62441: PUSH
62442: LD_INT 0
62444: ST_TO_ADDR
// sLack := false ;
62445: LD_ADDR_EXP 70
62449: PUSH
62450: LD_INT 0
62452: ST_TO_ADDR
// sTank := false ;
62453: LD_ADDR_EXP 72
62457: PUSH
62458: LD_INT 0
62460: ST_TO_ADDR
// sRemote := false ;
62461: LD_ADDR_EXP 73
62465: PUSH
62466: LD_INT 0
62468: ST_TO_ADDR
// sPowell := false ;
62469: LD_ADDR_EXP 74
62473: PUSH
62474: LD_INT 0
62476: ST_TO_ADDR
// sTeleport := false ;
62477: LD_ADDR_EXP 77
62481: PUSH
62482: LD_INT 0
62484: ST_TO_ADDR
// sOilTower := false ;
62485: LD_ADDR_EXP 79
62489: PUSH
62490: LD_INT 0
62492: ST_TO_ADDR
// sShovel := false ;
62493: LD_ADDR_EXP 80
62497: PUSH
62498: LD_INT 0
62500: ST_TO_ADDR
// sSheik := false ;
62501: LD_ADDR_EXP 81
62505: PUSH
62506: LD_INT 0
62508: ST_TO_ADDR
// sEarthquake := false ;
62509: LD_ADDR_EXP 83
62513: PUSH
62514: LD_INT 0
62516: ST_TO_ADDR
// sAI := false ;
62517: LD_ADDR_EXP 84
62521: PUSH
62522: LD_INT 0
62524: ST_TO_ADDR
// sCargo := false ;
62525: LD_ADDR_EXP 87
62529: PUSH
62530: LD_INT 0
62532: ST_TO_ADDR
// sDLaser := false ;
62533: LD_ADDR_EXP 88
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// sExchange := false ;
62541: LD_ADDR_EXP 89
62545: PUSH
62546: LD_INT 0
62548: ST_TO_ADDR
// sFac := false ;
62549: LD_ADDR_EXP 90
62553: PUSH
62554: LD_INT 0
62556: ST_TO_ADDR
// sPower := false ;
62557: LD_ADDR_EXP 91
62561: PUSH
62562: LD_INT 0
62564: ST_TO_ADDR
// sRandom := false ;
62565: LD_ADDR_EXP 92
62569: PUSH
62570: LD_INT 0
62572: ST_TO_ADDR
// sShield := false ;
62573: LD_ADDR_EXP 93
62577: PUSH
62578: LD_INT 0
62580: ST_TO_ADDR
// sTime := false ;
62581: LD_ADDR_EXP 94
62585: PUSH
62586: LD_INT 0
62588: ST_TO_ADDR
// sTools := false ;
62589: LD_ADDR_EXP 95
62593: PUSH
62594: LD_INT 0
62596: ST_TO_ADDR
// sSold := false ;
62597: LD_ADDR_EXP 60
62601: PUSH
62602: LD_INT 0
62604: ST_TO_ADDR
// sDiff := false ;
62605: LD_ADDR_EXP 61
62609: PUSH
62610: LD_INT 0
62612: ST_TO_ADDR
// sFog := false ;
62613: LD_ADDR_EXP 64
62617: PUSH
62618: LD_INT 0
62620: ST_TO_ADDR
// sReset := false ;
62621: LD_ADDR_EXP 65
62625: PUSH
62626: LD_INT 0
62628: ST_TO_ADDR
// sSun := false ;
62629: LD_ADDR_EXP 66
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// sTiger := false ;
62637: LD_ADDR_EXP 62
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// sBomb := false ;
62645: LD_ADDR_EXP 63
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// sWound := false ;
62653: LD_ADDR_EXP 71
62657: PUSH
62658: LD_INT 0
62660: ST_TO_ADDR
// sBetray := false ;
62661: LD_ADDR_EXP 75
62665: PUSH
62666: LD_INT 0
62668: ST_TO_ADDR
// sContamin := false ;
62669: LD_ADDR_EXP 76
62673: PUSH
62674: LD_INT 0
62676: ST_TO_ADDR
// sOil := false ;
62677: LD_ADDR_EXP 78
62681: PUSH
62682: LD_INT 0
62684: ST_TO_ADDR
// sStu := false ;
62685: LD_ADDR_EXP 82
62689: PUSH
62690: LD_INT 0
62692: ST_TO_ADDR
// sBazooka := false ;
62693: LD_ADDR_EXP 85
62697: PUSH
62698: LD_INT 0
62700: ST_TO_ADDR
// sMortar := false ;
62701: LD_ADDR_EXP 86
62705: PUSH
62706: LD_INT 0
62708: ST_TO_ADDR
// sRanger := false ;
62709: LD_ADDR_EXP 96
62713: PUSH
62714: LD_INT 0
62716: ST_TO_ADDR
// sComputer := false ;
62717: LD_ADDR_EXP 97
62721: PUSH
62722: LD_INT 0
62724: ST_TO_ADDR
// s30 := false ;
62725: LD_ADDR_EXP 98
62729: PUSH
62730: LD_INT 0
62732: ST_TO_ADDR
// s60 := false ;
62733: LD_ADDR_EXP 99
62737: PUSH
62738: LD_INT 0
62740: ST_TO_ADDR
// end ;
62741: LD_VAR 0 1
62745: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62746: LD_INT 0
62748: PPUSH
62749: PPUSH
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
// result := [ ] ;
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: EMPTY
62761: ST_TO_ADDR
// if campaign_id = 1 then
62762: LD_OWVAR 69
62766: PUSH
62767: LD_INT 1
62769: EQUAL
62770: IFFALSE 65936
// begin case mission_number of 1 :
62772: LD_OWVAR 70
62776: PUSH
62777: LD_INT 1
62779: DOUBLE
62780: EQUAL
62781: IFTRUE 62785
62783: GO 62861
62785: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62786: LD_ADDR_VAR 0 2
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: LD_INT 4
62796: PUSH
62797: LD_INT 11
62799: PUSH
62800: LD_INT 12
62802: PUSH
62803: LD_INT 15
62805: PUSH
62806: LD_INT 16
62808: PUSH
62809: LD_INT 22
62811: PUSH
62812: LD_INT 23
62814: PUSH
62815: LD_INT 26
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 101
62831: PUSH
62832: LD_INT 102
62834: PUSH
62835: LD_INT 106
62837: PUSH
62838: LD_INT 116
62840: PUSH
62841: LD_INT 117
62843: PUSH
62844: LD_INT 118
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: ST_TO_ADDR
62859: GO 65934
62861: LD_INT 2
62863: DOUBLE
62864: EQUAL
62865: IFTRUE 62869
62867: GO 62953
62869: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62870: LD_ADDR_VAR 0 2
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: LD_INT 4
62880: PUSH
62881: LD_INT 11
62883: PUSH
62884: LD_INT 12
62886: PUSH
62887: LD_INT 15
62889: PUSH
62890: LD_INT 16
62892: PUSH
62893: LD_INT 22
62895: PUSH
62896: LD_INT 23
62898: PUSH
62899: LD_INT 26
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 101
62915: PUSH
62916: LD_INT 102
62918: PUSH
62919: LD_INT 105
62921: PUSH
62922: LD_INT 106
62924: PUSH
62925: LD_INT 108
62927: PUSH
62928: LD_INT 116
62930: PUSH
62931: LD_INT 117
62933: PUSH
62934: LD_INT 118
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: ST_TO_ADDR
62951: GO 65934
62953: LD_INT 3
62955: DOUBLE
62956: EQUAL
62957: IFTRUE 62961
62959: GO 63049
62961: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
62962: LD_ADDR_VAR 0 2
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 4
62972: PUSH
62973: LD_INT 5
62975: PUSH
62976: LD_INT 11
62978: PUSH
62979: LD_INT 12
62981: PUSH
62982: LD_INT 15
62984: PUSH
62985: LD_INT 16
62987: PUSH
62988: LD_INT 22
62990: PUSH
62991: LD_INT 26
62993: PUSH
62994: LD_INT 36
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 101
63011: PUSH
63012: LD_INT 102
63014: PUSH
63015: LD_INT 105
63017: PUSH
63018: LD_INT 106
63020: PUSH
63021: LD_INT 108
63023: PUSH
63024: LD_INT 116
63026: PUSH
63027: LD_INT 117
63029: PUSH
63030: LD_INT 118
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: ST_TO_ADDR
63047: GO 65934
63049: LD_INT 4
63051: DOUBLE
63052: EQUAL
63053: IFTRUE 63057
63055: GO 63153
63057: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63058: LD_ADDR_VAR 0 2
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 4
63068: PUSH
63069: LD_INT 5
63071: PUSH
63072: LD_INT 8
63074: PUSH
63075: LD_INT 11
63077: PUSH
63078: LD_INT 12
63080: PUSH
63081: LD_INT 15
63083: PUSH
63084: LD_INT 16
63086: PUSH
63087: LD_INT 22
63089: PUSH
63090: LD_INT 23
63092: PUSH
63093: LD_INT 26
63095: PUSH
63096: LD_INT 36
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 101
63115: PUSH
63116: LD_INT 102
63118: PUSH
63119: LD_INT 105
63121: PUSH
63122: LD_INT 106
63124: PUSH
63125: LD_INT 108
63127: PUSH
63128: LD_INT 116
63130: PUSH
63131: LD_INT 117
63133: PUSH
63134: LD_INT 118
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: ST_TO_ADDR
63151: GO 65934
63153: LD_INT 5
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63161
63159: GO 63273
63161: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63162: LD_ADDR_VAR 0 2
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 4
63172: PUSH
63173: LD_INT 5
63175: PUSH
63176: LD_INT 6
63178: PUSH
63179: LD_INT 8
63181: PUSH
63182: LD_INT 11
63184: PUSH
63185: LD_INT 12
63187: PUSH
63188: LD_INT 15
63190: PUSH
63191: LD_INT 16
63193: PUSH
63194: LD_INT 22
63196: PUSH
63197: LD_INT 23
63199: PUSH
63200: LD_INT 25
63202: PUSH
63203: LD_INT 26
63205: PUSH
63206: LD_INT 36
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 101
63227: PUSH
63228: LD_INT 102
63230: PUSH
63231: LD_INT 105
63233: PUSH
63234: LD_INT 106
63236: PUSH
63237: LD_INT 108
63239: PUSH
63240: LD_INT 109
63242: PUSH
63243: LD_INT 112
63245: PUSH
63246: LD_INT 116
63248: PUSH
63249: LD_INT 117
63251: PUSH
63252: LD_INT 118
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: ST_TO_ADDR
63271: GO 65934
63273: LD_INT 6
63275: DOUBLE
63276: EQUAL
63277: IFTRUE 63281
63279: GO 63413
63281: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63282: LD_ADDR_VAR 0 2
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 4
63292: PUSH
63293: LD_INT 5
63295: PUSH
63296: LD_INT 6
63298: PUSH
63299: LD_INT 8
63301: PUSH
63302: LD_INT 11
63304: PUSH
63305: LD_INT 12
63307: PUSH
63308: LD_INT 15
63310: PUSH
63311: LD_INT 16
63313: PUSH
63314: LD_INT 20
63316: PUSH
63317: LD_INT 21
63319: PUSH
63320: LD_INT 22
63322: PUSH
63323: LD_INT 23
63325: PUSH
63326: LD_INT 25
63328: PUSH
63329: LD_INT 26
63331: PUSH
63332: LD_INT 30
63334: PUSH
63335: LD_INT 31
63337: PUSH
63338: LD_INT 32
63340: PUSH
63341: LD_INT 36
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 101
63367: PUSH
63368: LD_INT 102
63370: PUSH
63371: LD_INT 105
63373: PUSH
63374: LD_INT 106
63376: PUSH
63377: LD_INT 108
63379: PUSH
63380: LD_INT 109
63382: PUSH
63383: LD_INT 112
63385: PUSH
63386: LD_INT 116
63388: PUSH
63389: LD_INT 117
63391: PUSH
63392: LD_INT 118
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: ST_TO_ADDR
63411: GO 65934
63413: LD_INT 7
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63421
63419: GO 63533
63421: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63422: LD_ADDR_VAR 0 2
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: LD_INT 4
63432: PUSH
63433: LD_INT 5
63435: PUSH
63436: LD_INT 7
63438: PUSH
63439: LD_INT 11
63441: PUSH
63442: LD_INT 12
63444: PUSH
63445: LD_INT 15
63447: PUSH
63448: LD_INT 16
63450: PUSH
63451: LD_INT 20
63453: PUSH
63454: LD_INT 21
63456: PUSH
63457: LD_INT 22
63459: PUSH
63460: LD_INT 23
63462: PUSH
63463: LD_INT 25
63465: PUSH
63466: LD_INT 26
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 101
63487: PUSH
63488: LD_INT 102
63490: PUSH
63491: LD_INT 103
63493: PUSH
63494: LD_INT 105
63496: PUSH
63497: LD_INT 106
63499: PUSH
63500: LD_INT 108
63502: PUSH
63503: LD_INT 112
63505: PUSH
63506: LD_INT 116
63508: PUSH
63509: LD_INT 117
63511: PUSH
63512: LD_INT 118
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: ST_TO_ADDR
63531: GO 65934
63533: LD_INT 8
63535: DOUBLE
63536: EQUAL
63537: IFTRUE 63541
63539: GO 63681
63541: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63542: LD_ADDR_VAR 0 2
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 4
63552: PUSH
63553: LD_INT 5
63555: PUSH
63556: LD_INT 6
63558: PUSH
63559: LD_INT 7
63561: PUSH
63562: LD_INT 8
63564: PUSH
63565: LD_INT 11
63567: PUSH
63568: LD_INT 12
63570: PUSH
63571: LD_INT 15
63573: PUSH
63574: LD_INT 16
63576: PUSH
63577: LD_INT 20
63579: PUSH
63580: LD_INT 21
63582: PUSH
63583: LD_INT 22
63585: PUSH
63586: LD_INT 23
63588: PUSH
63589: LD_INT 25
63591: PUSH
63592: LD_INT 26
63594: PUSH
63595: LD_INT 30
63597: PUSH
63598: LD_INT 31
63600: PUSH
63601: LD_INT 32
63603: PUSH
63604: LD_INT 36
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 101
63631: PUSH
63632: LD_INT 102
63634: PUSH
63635: LD_INT 103
63637: PUSH
63638: LD_INT 105
63640: PUSH
63641: LD_INT 106
63643: PUSH
63644: LD_INT 108
63646: PUSH
63647: LD_INT 109
63649: PUSH
63650: LD_INT 112
63652: PUSH
63653: LD_INT 116
63655: PUSH
63656: LD_INT 117
63658: PUSH
63659: LD_INT 118
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: ST_TO_ADDR
63679: GO 65934
63681: LD_INT 9
63683: DOUBLE
63684: EQUAL
63685: IFTRUE 63689
63687: GO 63837
63689: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63690: LD_ADDR_VAR 0 2
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: LD_INT 4
63700: PUSH
63701: LD_INT 5
63703: PUSH
63704: LD_INT 6
63706: PUSH
63707: LD_INT 7
63709: PUSH
63710: LD_INT 8
63712: PUSH
63713: LD_INT 11
63715: PUSH
63716: LD_INT 12
63718: PUSH
63719: LD_INT 15
63721: PUSH
63722: LD_INT 16
63724: PUSH
63725: LD_INT 20
63727: PUSH
63728: LD_INT 21
63730: PUSH
63731: LD_INT 22
63733: PUSH
63734: LD_INT 23
63736: PUSH
63737: LD_INT 25
63739: PUSH
63740: LD_INT 26
63742: PUSH
63743: LD_INT 28
63745: PUSH
63746: LD_INT 30
63748: PUSH
63749: LD_INT 31
63751: PUSH
63752: LD_INT 32
63754: PUSH
63755: LD_INT 36
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 101
63783: PUSH
63784: LD_INT 102
63786: PUSH
63787: LD_INT 103
63789: PUSH
63790: LD_INT 105
63792: PUSH
63793: LD_INT 106
63795: PUSH
63796: LD_INT 108
63798: PUSH
63799: LD_INT 109
63801: PUSH
63802: LD_INT 112
63804: PUSH
63805: LD_INT 114
63807: PUSH
63808: LD_INT 116
63810: PUSH
63811: LD_INT 117
63813: PUSH
63814: LD_INT 118
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: ST_TO_ADDR
63835: GO 65934
63837: LD_INT 10
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63845
63843: GO 64041
63845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63846: LD_ADDR_VAR 0 2
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 4
63856: PUSH
63857: LD_INT 5
63859: PUSH
63860: LD_INT 6
63862: PUSH
63863: LD_INT 7
63865: PUSH
63866: LD_INT 8
63868: PUSH
63869: LD_INT 9
63871: PUSH
63872: LD_INT 10
63874: PUSH
63875: LD_INT 11
63877: PUSH
63878: LD_INT 12
63880: PUSH
63881: LD_INT 13
63883: PUSH
63884: LD_INT 14
63886: PUSH
63887: LD_INT 15
63889: PUSH
63890: LD_INT 16
63892: PUSH
63893: LD_INT 17
63895: PUSH
63896: LD_INT 18
63898: PUSH
63899: LD_INT 19
63901: PUSH
63902: LD_INT 20
63904: PUSH
63905: LD_INT 21
63907: PUSH
63908: LD_INT 22
63910: PUSH
63911: LD_INT 23
63913: PUSH
63914: LD_INT 24
63916: PUSH
63917: LD_INT 25
63919: PUSH
63920: LD_INT 26
63922: PUSH
63923: LD_INT 28
63925: PUSH
63926: LD_INT 30
63928: PUSH
63929: LD_INT 31
63931: PUSH
63932: LD_INT 32
63934: PUSH
63935: LD_INT 36
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 101
63971: PUSH
63972: LD_INT 102
63974: PUSH
63975: LD_INT 103
63977: PUSH
63978: LD_INT 104
63980: PUSH
63981: LD_INT 105
63983: PUSH
63984: LD_INT 106
63986: PUSH
63987: LD_INT 107
63989: PUSH
63990: LD_INT 108
63992: PUSH
63993: LD_INT 109
63995: PUSH
63996: LD_INT 110
63998: PUSH
63999: LD_INT 111
64001: PUSH
64002: LD_INT 112
64004: PUSH
64005: LD_INT 114
64007: PUSH
64008: LD_INT 116
64010: PUSH
64011: LD_INT 117
64013: PUSH
64014: LD_INT 118
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: ST_TO_ADDR
64039: GO 65934
64041: LD_INT 11
64043: DOUBLE
64044: EQUAL
64045: IFTRUE 64049
64047: GO 64253
64049: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64050: LD_ADDR_VAR 0 2
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: LD_INT 3
64060: PUSH
64061: LD_INT 4
64063: PUSH
64064: LD_INT 5
64066: PUSH
64067: LD_INT 6
64069: PUSH
64070: LD_INT 7
64072: PUSH
64073: LD_INT 8
64075: PUSH
64076: LD_INT 9
64078: PUSH
64079: LD_INT 10
64081: PUSH
64082: LD_INT 11
64084: PUSH
64085: LD_INT 12
64087: PUSH
64088: LD_INT 13
64090: PUSH
64091: LD_INT 14
64093: PUSH
64094: LD_INT 15
64096: PUSH
64097: LD_INT 16
64099: PUSH
64100: LD_INT 17
64102: PUSH
64103: LD_INT 18
64105: PUSH
64106: LD_INT 19
64108: PUSH
64109: LD_INT 20
64111: PUSH
64112: LD_INT 21
64114: PUSH
64115: LD_INT 22
64117: PUSH
64118: LD_INT 23
64120: PUSH
64121: LD_INT 24
64123: PUSH
64124: LD_INT 25
64126: PUSH
64127: LD_INT 26
64129: PUSH
64130: LD_INT 28
64132: PUSH
64133: LD_INT 30
64135: PUSH
64136: LD_INT 31
64138: PUSH
64139: LD_INT 32
64141: PUSH
64142: LD_INT 34
64144: PUSH
64145: LD_INT 36
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 101
64183: PUSH
64184: LD_INT 102
64186: PUSH
64187: LD_INT 103
64189: PUSH
64190: LD_INT 104
64192: PUSH
64193: LD_INT 105
64195: PUSH
64196: LD_INT 106
64198: PUSH
64199: LD_INT 107
64201: PUSH
64202: LD_INT 108
64204: PUSH
64205: LD_INT 109
64207: PUSH
64208: LD_INT 110
64210: PUSH
64211: LD_INT 111
64213: PUSH
64214: LD_INT 112
64216: PUSH
64217: LD_INT 114
64219: PUSH
64220: LD_INT 116
64222: PUSH
64223: LD_INT 117
64225: PUSH
64226: LD_INT 118
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: ST_TO_ADDR
64251: GO 65934
64253: LD_INT 12
64255: DOUBLE
64256: EQUAL
64257: IFTRUE 64261
64259: GO 64481
64261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64262: LD_ADDR_VAR 0 2
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: LD_INT 4
64278: PUSH
64279: LD_INT 5
64281: PUSH
64282: LD_INT 6
64284: PUSH
64285: LD_INT 7
64287: PUSH
64288: LD_INT 8
64290: PUSH
64291: LD_INT 9
64293: PUSH
64294: LD_INT 10
64296: PUSH
64297: LD_INT 11
64299: PUSH
64300: LD_INT 12
64302: PUSH
64303: LD_INT 13
64305: PUSH
64306: LD_INT 14
64308: PUSH
64309: LD_INT 15
64311: PUSH
64312: LD_INT 16
64314: PUSH
64315: LD_INT 17
64317: PUSH
64318: LD_INT 18
64320: PUSH
64321: LD_INT 19
64323: PUSH
64324: LD_INT 20
64326: PUSH
64327: LD_INT 21
64329: PUSH
64330: LD_INT 22
64332: PUSH
64333: LD_INT 23
64335: PUSH
64336: LD_INT 24
64338: PUSH
64339: LD_INT 25
64341: PUSH
64342: LD_INT 26
64344: PUSH
64345: LD_INT 27
64347: PUSH
64348: LD_INT 28
64350: PUSH
64351: LD_INT 30
64353: PUSH
64354: LD_INT 31
64356: PUSH
64357: LD_INT 32
64359: PUSH
64360: LD_INT 33
64362: PUSH
64363: LD_INT 34
64365: PUSH
64366: LD_INT 36
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 101
64407: PUSH
64408: LD_INT 102
64410: PUSH
64411: LD_INT 103
64413: PUSH
64414: LD_INT 104
64416: PUSH
64417: LD_INT 105
64419: PUSH
64420: LD_INT 106
64422: PUSH
64423: LD_INT 107
64425: PUSH
64426: LD_INT 108
64428: PUSH
64429: LD_INT 109
64431: PUSH
64432: LD_INT 110
64434: PUSH
64435: LD_INT 111
64437: PUSH
64438: LD_INT 112
64440: PUSH
64441: LD_INT 113
64443: PUSH
64444: LD_INT 114
64446: PUSH
64447: LD_INT 116
64449: PUSH
64450: LD_INT 117
64452: PUSH
64453: LD_INT 118
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: ST_TO_ADDR
64479: GO 65934
64481: LD_INT 13
64483: DOUBLE
64484: EQUAL
64485: IFTRUE 64489
64487: GO 64697
64489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64490: LD_ADDR_VAR 0 2
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: LD_INT 3
64503: PUSH
64504: LD_INT 4
64506: PUSH
64507: LD_INT 5
64509: PUSH
64510: LD_INT 8
64512: PUSH
64513: LD_INT 9
64515: PUSH
64516: LD_INT 10
64518: PUSH
64519: LD_INT 11
64521: PUSH
64522: LD_INT 12
64524: PUSH
64525: LD_INT 14
64527: PUSH
64528: LD_INT 15
64530: PUSH
64531: LD_INT 16
64533: PUSH
64534: LD_INT 17
64536: PUSH
64537: LD_INT 18
64539: PUSH
64540: LD_INT 19
64542: PUSH
64543: LD_INT 20
64545: PUSH
64546: LD_INT 21
64548: PUSH
64549: LD_INT 22
64551: PUSH
64552: LD_INT 23
64554: PUSH
64555: LD_INT 24
64557: PUSH
64558: LD_INT 25
64560: PUSH
64561: LD_INT 26
64563: PUSH
64564: LD_INT 27
64566: PUSH
64567: LD_INT 28
64569: PUSH
64570: LD_INT 30
64572: PUSH
64573: LD_INT 31
64575: PUSH
64576: LD_INT 32
64578: PUSH
64579: LD_INT 33
64581: PUSH
64582: LD_INT 34
64584: PUSH
64585: LD_INT 36
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 101
64623: PUSH
64624: LD_INT 102
64626: PUSH
64627: LD_INT 103
64629: PUSH
64630: LD_INT 104
64632: PUSH
64633: LD_INT 105
64635: PUSH
64636: LD_INT 106
64638: PUSH
64639: LD_INT 107
64641: PUSH
64642: LD_INT 108
64644: PUSH
64645: LD_INT 109
64647: PUSH
64648: LD_INT 110
64650: PUSH
64651: LD_INT 111
64653: PUSH
64654: LD_INT 112
64656: PUSH
64657: LD_INT 113
64659: PUSH
64660: LD_INT 114
64662: PUSH
64663: LD_INT 116
64665: PUSH
64666: LD_INT 117
64668: PUSH
64669: LD_INT 118
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: ST_TO_ADDR
64695: GO 65934
64697: LD_INT 14
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64705
64703: GO 64929
64705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64706: LD_ADDR_VAR 0 2
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: LD_INT 3
64719: PUSH
64720: LD_INT 4
64722: PUSH
64723: LD_INT 5
64725: PUSH
64726: LD_INT 6
64728: PUSH
64729: LD_INT 7
64731: PUSH
64732: LD_INT 8
64734: PUSH
64735: LD_INT 9
64737: PUSH
64738: LD_INT 10
64740: PUSH
64741: LD_INT 11
64743: PUSH
64744: LD_INT 12
64746: PUSH
64747: LD_INT 13
64749: PUSH
64750: LD_INT 14
64752: PUSH
64753: LD_INT 15
64755: PUSH
64756: LD_INT 16
64758: PUSH
64759: LD_INT 17
64761: PUSH
64762: LD_INT 18
64764: PUSH
64765: LD_INT 19
64767: PUSH
64768: LD_INT 20
64770: PUSH
64771: LD_INT 21
64773: PUSH
64774: LD_INT 22
64776: PUSH
64777: LD_INT 23
64779: PUSH
64780: LD_INT 24
64782: PUSH
64783: LD_INT 25
64785: PUSH
64786: LD_INT 26
64788: PUSH
64789: LD_INT 27
64791: PUSH
64792: LD_INT 28
64794: PUSH
64795: LD_INT 29
64797: PUSH
64798: LD_INT 30
64800: PUSH
64801: LD_INT 31
64803: PUSH
64804: LD_INT 32
64806: PUSH
64807: LD_INT 33
64809: PUSH
64810: LD_INT 34
64812: PUSH
64813: LD_INT 36
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 101
64855: PUSH
64856: LD_INT 102
64858: PUSH
64859: LD_INT 103
64861: PUSH
64862: LD_INT 104
64864: PUSH
64865: LD_INT 105
64867: PUSH
64868: LD_INT 106
64870: PUSH
64871: LD_INT 107
64873: PUSH
64874: LD_INT 108
64876: PUSH
64877: LD_INT 109
64879: PUSH
64880: LD_INT 110
64882: PUSH
64883: LD_INT 111
64885: PUSH
64886: LD_INT 112
64888: PUSH
64889: LD_INT 113
64891: PUSH
64892: LD_INT 114
64894: PUSH
64895: LD_INT 116
64897: PUSH
64898: LD_INT 117
64900: PUSH
64901: LD_INT 118
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: ST_TO_ADDR
64927: GO 65934
64929: LD_INT 15
64931: DOUBLE
64932: EQUAL
64933: IFTRUE 64937
64935: GO 65161
64937: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
64938: LD_ADDR_VAR 0 2
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: LD_INT 4
64954: PUSH
64955: LD_INT 5
64957: PUSH
64958: LD_INT 6
64960: PUSH
64961: LD_INT 7
64963: PUSH
64964: LD_INT 8
64966: PUSH
64967: LD_INT 9
64969: PUSH
64970: LD_INT 10
64972: PUSH
64973: LD_INT 11
64975: PUSH
64976: LD_INT 12
64978: PUSH
64979: LD_INT 13
64981: PUSH
64982: LD_INT 14
64984: PUSH
64985: LD_INT 15
64987: PUSH
64988: LD_INT 16
64990: PUSH
64991: LD_INT 17
64993: PUSH
64994: LD_INT 18
64996: PUSH
64997: LD_INT 19
64999: PUSH
65000: LD_INT 20
65002: PUSH
65003: LD_INT 21
65005: PUSH
65006: LD_INT 22
65008: PUSH
65009: LD_INT 23
65011: PUSH
65012: LD_INT 24
65014: PUSH
65015: LD_INT 25
65017: PUSH
65018: LD_INT 26
65020: PUSH
65021: LD_INT 27
65023: PUSH
65024: LD_INT 28
65026: PUSH
65027: LD_INT 29
65029: PUSH
65030: LD_INT 30
65032: PUSH
65033: LD_INT 31
65035: PUSH
65036: LD_INT 32
65038: PUSH
65039: LD_INT 33
65041: PUSH
65042: LD_INT 34
65044: PUSH
65045: LD_INT 36
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 101
65087: PUSH
65088: LD_INT 102
65090: PUSH
65091: LD_INT 103
65093: PUSH
65094: LD_INT 104
65096: PUSH
65097: LD_INT 105
65099: PUSH
65100: LD_INT 106
65102: PUSH
65103: LD_INT 107
65105: PUSH
65106: LD_INT 108
65108: PUSH
65109: LD_INT 109
65111: PUSH
65112: LD_INT 110
65114: PUSH
65115: LD_INT 111
65117: PUSH
65118: LD_INT 112
65120: PUSH
65121: LD_INT 113
65123: PUSH
65124: LD_INT 114
65126: PUSH
65127: LD_INT 116
65129: PUSH
65130: LD_INT 117
65132: PUSH
65133: LD_INT 118
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: ST_TO_ADDR
65159: GO 65934
65161: LD_INT 16
65163: DOUBLE
65164: EQUAL
65165: IFTRUE 65169
65167: GO 65305
65169: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65170: LD_ADDR_VAR 0 2
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 4
65180: PUSH
65181: LD_INT 5
65183: PUSH
65184: LD_INT 7
65186: PUSH
65187: LD_INT 11
65189: PUSH
65190: LD_INT 12
65192: PUSH
65193: LD_INT 15
65195: PUSH
65196: LD_INT 16
65198: PUSH
65199: LD_INT 20
65201: PUSH
65202: LD_INT 21
65204: PUSH
65205: LD_INT 22
65207: PUSH
65208: LD_INT 23
65210: PUSH
65211: LD_INT 25
65213: PUSH
65214: LD_INT 26
65216: PUSH
65217: LD_INT 30
65219: PUSH
65220: LD_INT 31
65222: PUSH
65223: LD_INT 32
65225: PUSH
65226: LD_INT 33
65228: PUSH
65229: LD_INT 34
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 101
65255: PUSH
65256: LD_INT 102
65258: PUSH
65259: LD_INT 103
65261: PUSH
65262: LD_INT 106
65264: PUSH
65265: LD_INT 108
65267: PUSH
65268: LD_INT 112
65270: PUSH
65271: LD_INT 113
65273: PUSH
65274: LD_INT 114
65276: PUSH
65277: LD_INT 116
65279: PUSH
65280: LD_INT 117
65282: PUSH
65283: LD_INT 118
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: ST_TO_ADDR
65303: GO 65934
65305: LD_INT 17
65307: DOUBLE
65308: EQUAL
65309: IFTRUE 65313
65311: GO 65537
65313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65314: LD_ADDR_VAR 0 2
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 4
65330: PUSH
65331: LD_INT 5
65333: PUSH
65334: LD_INT 6
65336: PUSH
65337: LD_INT 7
65339: PUSH
65340: LD_INT 8
65342: PUSH
65343: LD_INT 9
65345: PUSH
65346: LD_INT 10
65348: PUSH
65349: LD_INT 11
65351: PUSH
65352: LD_INT 12
65354: PUSH
65355: LD_INT 13
65357: PUSH
65358: LD_INT 14
65360: PUSH
65361: LD_INT 15
65363: PUSH
65364: LD_INT 16
65366: PUSH
65367: LD_INT 17
65369: PUSH
65370: LD_INT 18
65372: PUSH
65373: LD_INT 19
65375: PUSH
65376: LD_INT 20
65378: PUSH
65379: LD_INT 21
65381: PUSH
65382: LD_INT 22
65384: PUSH
65385: LD_INT 23
65387: PUSH
65388: LD_INT 24
65390: PUSH
65391: LD_INT 25
65393: PUSH
65394: LD_INT 26
65396: PUSH
65397: LD_INT 27
65399: PUSH
65400: LD_INT 28
65402: PUSH
65403: LD_INT 29
65405: PUSH
65406: LD_INT 30
65408: PUSH
65409: LD_INT 31
65411: PUSH
65412: LD_INT 32
65414: PUSH
65415: LD_INT 33
65417: PUSH
65418: LD_INT 34
65420: PUSH
65421: LD_INT 36
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 101
65463: PUSH
65464: LD_INT 102
65466: PUSH
65467: LD_INT 103
65469: PUSH
65470: LD_INT 104
65472: PUSH
65473: LD_INT 105
65475: PUSH
65476: LD_INT 106
65478: PUSH
65479: LD_INT 107
65481: PUSH
65482: LD_INT 108
65484: PUSH
65485: LD_INT 109
65487: PUSH
65488: LD_INT 110
65490: PUSH
65491: LD_INT 111
65493: PUSH
65494: LD_INT 112
65496: PUSH
65497: LD_INT 113
65499: PUSH
65500: LD_INT 114
65502: PUSH
65503: LD_INT 116
65505: PUSH
65506: LD_INT 117
65508: PUSH
65509: LD_INT 118
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: ST_TO_ADDR
65535: GO 65934
65537: LD_INT 18
65539: DOUBLE
65540: EQUAL
65541: IFTRUE 65545
65543: GO 65693
65545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65546: LD_ADDR_VAR 0 2
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: LD_INT 5
65559: PUSH
65560: LD_INT 7
65562: PUSH
65563: LD_INT 11
65565: PUSH
65566: LD_INT 12
65568: PUSH
65569: LD_INT 15
65571: PUSH
65572: LD_INT 16
65574: PUSH
65575: LD_INT 20
65577: PUSH
65578: LD_INT 21
65580: PUSH
65581: LD_INT 22
65583: PUSH
65584: LD_INT 23
65586: PUSH
65587: LD_INT 25
65589: PUSH
65590: LD_INT 26
65592: PUSH
65593: LD_INT 30
65595: PUSH
65596: LD_INT 31
65598: PUSH
65599: LD_INT 32
65601: PUSH
65602: LD_INT 33
65604: PUSH
65605: LD_INT 34
65607: PUSH
65608: LD_INT 35
65610: PUSH
65611: LD_INT 36
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 101
65639: PUSH
65640: LD_INT 102
65642: PUSH
65643: LD_INT 103
65645: PUSH
65646: LD_INT 106
65648: PUSH
65649: LD_INT 108
65651: PUSH
65652: LD_INT 112
65654: PUSH
65655: LD_INT 113
65657: PUSH
65658: LD_INT 114
65660: PUSH
65661: LD_INT 115
65663: PUSH
65664: LD_INT 116
65666: PUSH
65667: LD_INT 117
65669: PUSH
65670: LD_INT 118
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: ST_TO_ADDR
65691: GO 65934
65693: LD_INT 19
65695: DOUBLE
65696: EQUAL
65697: IFTRUE 65701
65699: GO 65933
65701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65702: LD_ADDR_VAR 0 2
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: LD_INT 3
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: LD_INT 5
65721: PUSH
65722: LD_INT 6
65724: PUSH
65725: LD_INT 7
65727: PUSH
65728: LD_INT 8
65730: PUSH
65731: LD_INT 9
65733: PUSH
65734: LD_INT 10
65736: PUSH
65737: LD_INT 11
65739: PUSH
65740: LD_INT 12
65742: PUSH
65743: LD_INT 13
65745: PUSH
65746: LD_INT 14
65748: PUSH
65749: LD_INT 15
65751: PUSH
65752: LD_INT 16
65754: PUSH
65755: LD_INT 17
65757: PUSH
65758: LD_INT 18
65760: PUSH
65761: LD_INT 19
65763: PUSH
65764: LD_INT 20
65766: PUSH
65767: LD_INT 21
65769: PUSH
65770: LD_INT 22
65772: PUSH
65773: LD_INT 23
65775: PUSH
65776: LD_INT 24
65778: PUSH
65779: LD_INT 25
65781: PUSH
65782: LD_INT 26
65784: PUSH
65785: LD_INT 27
65787: PUSH
65788: LD_INT 28
65790: PUSH
65791: LD_INT 29
65793: PUSH
65794: LD_INT 30
65796: PUSH
65797: LD_INT 31
65799: PUSH
65800: LD_INT 32
65802: PUSH
65803: LD_INT 33
65805: PUSH
65806: LD_INT 34
65808: PUSH
65809: LD_INT 35
65811: PUSH
65812: LD_INT 36
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 101
65855: PUSH
65856: LD_INT 102
65858: PUSH
65859: LD_INT 103
65861: PUSH
65862: LD_INT 104
65864: PUSH
65865: LD_INT 105
65867: PUSH
65868: LD_INT 106
65870: PUSH
65871: LD_INT 107
65873: PUSH
65874: LD_INT 108
65876: PUSH
65877: LD_INT 109
65879: PUSH
65880: LD_INT 110
65882: PUSH
65883: LD_INT 111
65885: PUSH
65886: LD_INT 112
65888: PUSH
65889: LD_INT 113
65891: PUSH
65892: LD_INT 114
65894: PUSH
65895: LD_INT 115
65897: PUSH
65898: LD_INT 116
65900: PUSH
65901: LD_INT 117
65903: PUSH
65904: LD_INT 118
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: ST_TO_ADDR
65931: GO 65934
65933: POP
// end else
65934: GO 66165
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
65936: LD_ADDR_VAR 0 2
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: LD_INT 2
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: LD_INT 4
65952: PUSH
65953: LD_INT 5
65955: PUSH
65956: LD_INT 6
65958: PUSH
65959: LD_INT 7
65961: PUSH
65962: LD_INT 8
65964: PUSH
65965: LD_INT 9
65967: PUSH
65968: LD_INT 10
65970: PUSH
65971: LD_INT 11
65973: PUSH
65974: LD_INT 12
65976: PUSH
65977: LD_INT 13
65979: PUSH
65980: LD_INT 14
65982: PUSH
65983: LD_INT 15
65985: PUSH
65986: LD_INT 16
65988: PUSH
65989: LD_INT 17
65991: PUSH
65992: LD_INT 18
65994: PUSH
65995: LD_INT 19
65997: PUSH
65998: LD_INT 20
66000: PUSH
66001: LD_INT 21
66003: PUSH
66004: LD_INT 22
66006: PUSH
66007: LD_INT 23
66009: PUSH
66010: LD_INT 24
66012: PUSH
66013: LD_INT 25
66015: PUSH
66016: LD_INT 26
66018: PUSH
66019: LD_INT 27
66021: PUSH
66022: LD_INT 28
66024: PUSH
66025: LD_INT 29
66027: PUSH
66028: LD_INT 30
66030: PUSH
66031: LD_INT 31
66033: PUSH
66034: LD_INT 32
66036: PUSH
66037: LD_INT 33
66039: PUSH
66040: LD_INT 34
66042: PUSH
66043: LD_INT 35
66045: PUSH
66046: LD_INT 36
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 101
66089: PUSH
66090: LD_INT 102
66092: PUSH
66093: LD_INT 103
66095: PUSH
66096: LD_INT 104
66098: PUSH
66099: LD_INT 105
66101: PUSH
66102: LD_INT 106
66104: PUSH
66105: LD_INT 107
66107: PUSH
66108: LD_INT 108
66110: PUSH
66111: LD_INT 109
66113: PUSH
66114: LD_INT 110
66116: PUSH
66117: LD_INT 111
66119: PUSH
66120: LD_INT 112
66122: PUSH
66123: LD_INT 113
66125: PUSH
66126: LD_INT 114
66128: PUSH
66129: LD_INT 115
66131: PUSH
66132: LD_INT 116
66134: PUSH
66135: LD_INT 117
66137: PUSH
66138: LD_INT 118
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// if result then
66165: LD_VAR 0 2
66169: IFFALSE 66955
// begin normal :=  ;
66171: LD_ADDR_VAR 0 5
66175: PUSH
66176: LD_STRING 
66178: ST_TO_ADDR
// hardcore :=  ;
66179: LD_ADDR_VAR 0 6
66183: PUSH
66184: LD_STRING 
66186: ST_TO_ADDR
// active :=  ;
66187: LD_ADDR_VAR 0 7
66191: PUSH
66192: LD_STRING 
66194: ST_TO_ADDR
// for i = 1 to normalCounter do
66195: LD_ADDR_VAR 0 8
66199: PUSH
66200: DOUBLE
66201: LD_INT 1
66203: DEC
66204: ST_TO_ADDR
66205: LD_EXP 44
66209: PUSH
66210: FOR_TO
66211: IFFALSE 66312
// begin tmp := 0 ;
66213: LD_ADDR_VAR 0 3
66217: PUSH
66218: LD_STRING 0
66220: ST_TO_ADDR
// if result [ 1 ] then
66221: LD_VAR 0 2
66225: PUSH
66226: LD_INT 1
66228: ARRAY
66229: IFFALSE 66294
// if result [ 1 ] [ 1 ] = i then
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PUSH
66240: LD_INT 1
66242: ARRAY
66243: PUSH
66244: LD_VAR 0 8
66248: EQUAL
66249: IFFALSE 66294
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66251: LD_ADDR_VAR 0 2
66255: PUSH
66256: LD_VAR 0 2
66260: PPUSH
66261: LD_INT 1
66263: PPUSH
66264: LD_VAR 0 2
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: PPUSH
66273: LD_INT 1
66275: PPUSH
66276: CALL_OW 3
66280: PPUSH
66281: CALL_OW 1
66285: ST_TO_ADDR
// tmp := 1 ;
66286: LD_ADDR_VAR 0 3
66290: PUSH
66291: LD_STRING 1
66293: ST_TO_ADDR
// end ; normal := normal & tmp ;
66294: LD_ADDR_VAR 0 5
66298: PUSH
66299: LD_VAR 0 5
66303: PUSH
66304: LD_VAR 0 3
66308: STR
66309: ST_TO_ADDR
// end ;
66310: GO 66210
66312: POP
66313: POP
// for i = 1 to hardcoreCounter do
66314: LD_ADDR_VAR 0 8
66318: PUSH
66319: DOUBLE
66320: LD_INT 1
66322: DEC
66323: ST_TO_ADDR
66324: LD_EXP 45
66328: PUSH
66329: FOR_TO
66330: IFFALSE 66435
// begin tmp := 0 ;
66332: LD_ADDR_VAR 0 3
66336: PUSH
66337: LD_STRING 0
66339: ST_TO_ADDR
// if result [ 2 ] then
66340: LD_VAR 0 2
66344: PUSH
66345: LD_INT 2
66347: ARRAY
66348: IFFALSE 66417
// if result [ 2 ] [ 1 ] = 100 + i then
66350: LD_VAR 0 2
66354: PUSH
66355: LD_INT 2
66357: ARRAY
66358: PUSH
66359: LD_INT 1
66361: ARRAY
66362: PUSH
66363: LD_INT 100
66365: PUSH
66366: LD_VAR 0 8
66370: PLUS
66371: EQUAL
66372: IFFALSE 66417
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66374: LD_ADDR_VAR 0 2
66378: PUSH
66379: LD_VAR 0 2
66383: PPUSH
66384: LD_INT 2
66386: PPUSH
66387: LD_VAR 0 2
66391: PUSH
66392: LD_INT 2
66394: ARRAY
66395: PPUSH
66396: LD_INT 1
66398: PPUSH
66399: CALL_OW 3
66403: PPUSH
66404: CALL_OW 1
66408: ST_TO_ADDR
// tmp := 1 ;
66409: LD_ADDR_VAR 0 3
66413: PUSH
66414: LD_STRING 1
66416: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66417: LD_ADDR_VAR 0 6
66421: PUSH
66422: LD_VAR 0 6
66426: PUSH
66427: LD_VAR 0 3
66431: STR
66432: ST_TO_ADDR
// end ;
66433: GO 66329
66435: POP
66436: POP
// if isGameLoad then
66437: LD_VAR 0 1
66441: IFFALSE 66916
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66443: LD_ADDR_VAR 0 4
66447: PUSH
66448: LD_EXP 48
66452: PUSH
66453: LD_EXP 47
66457: PUSH
66458: LD_EXP 49
66462: PUSH
66463: LD_EXP 46
66467: PUSH
66468: LD_EXP 50
66472: PUSH
66473: LD_EXP 51
66477: PUSH
66478: LD_EXP 52
66482: PUSH
66483: LD_EXP 53
66487: PUSH
66488: LD_EXP 54
66492: PUSH
66493: LD_EXP 55
66497: PUSH
66498: LD_EXP 56
66502: PUSH
66503: LD_EXP 57
66507: PUSH
66508: LD_EXP 58
66512: PUSH
66513: LD_EXP 59
66517: PUSH
66518: LD_EXP 67
66522: PUSH
66523: LD_EXP 68
66527: PUSH
66528: LD_EXP 69
66532: PUSH
66533: LD_EXP 70
66537: PUSH
66538: LD_EXP 72
66542: PUSH
66543: LD_EXP 73
66547: PUSH
66548: LD_EXP 74
66552: PUSH
66553: LD_EXP 77
66557: PUSH
66558: LD_EXP 79
66562: PUSH
66563: LD_EXP 80
66567: PUSH
66568: LD_EXP 81
66572: PUSH
66573: LD_EXP 83
66577: PUSH
66578: LD_EXP 84
66582: PUSH
66583: LD_EXP 87
66587: PUSH
66588: LD_EXP 88
66592: PUSH
66593: LD_EXP 89
66597: PUSH
66598: LD_EXP 90
66602: PUSH
66603: LD_EXP 91
66607: PUSH
66608: LD_EXP 92
66612: PUSH
66613: LD_EXP 93
66617: PUSH
66618: LD_EXP 94
66622: PUSH
66623: LD_EXP 95
66627: PUSH
66628: LD_EXP 60
66632: PUSH
66633: LD_EXP 61
66637: PUSH
66638: LD_EXP 64
66642: PUSH
66643: LD_EXP 65
66647: PUSH
66648: LD_EXP 66
66652: PUSH
66653: LD_EXP 62
66657: PUSH
66658: LD_EXP 63
66662: PUSH
66663: LD_EXP 71
66667: PUSH
66668: LD_EXP 75
66672: PUSH
66673: LD_EXP 76
66677: PUSH
66678: LD_EXP 78
66682: PUSH
66683: LD_EXP 82
66687: PUSH
66688: LD_EXP 85
66692: PUSH
66693: LD_EXP 86
66697: PUSH
66698: LD_EXP 96
66702: PUSH
66703: LD_EXP 97
66707: PUSH
66708: LD_EXP 98
66712: PUSH
66713: LD_EXP 99
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// tmp :=  ;
66774: LD_ADDR_VAR 0 3
66778: PUSH
66779: LD_STRING 
66781: ST_TO_ADDR
// for i = 1 to normalCounter do
66782: LD_ADDR_VAR 0 8
66786: PUSH
66787: DOUBLE
66788: LD_INT 1
66790: DEC
66791: ST_TO_ADDR
66792: LD_EXP 44
66796: PUSH
66797: FOR_TO
66798: IFFALSE 66834
// begin if flags [ i ] then
66800: LD_VAR 0 4
66804: PUSH
66805: LD_VAR 0 8
66809: ARRAY
66810: IFFALSE 66832
// tmp := tmp & i & ; ;
66812: LD_ADDR_VAR 0 3
66816: PUSH
66817: LD_VAR 0 3
66821: PUSH
66822: LD_VAR 0 8
66826: STR
66827: PUSH
66828: LD_STRING ;
66830: STR
66831: ST_TO_ADDR
// end ;
66832: GO 66797
66834: POP
66835: POP
// for i = 1 to hardcoreCounter do
66836: LD_ADDR_VAR 0 8
66840: PUSH
66841: DOUBLE
66842: LD_INT 1
66844: DEC
66845: ST_TO_ADDR
66846: LD_EXP 45
66850: PUSH
66851: FOR_TO
66852: IFFALSE 66898
// begin if flags [ normalCounter + i ] then
66854: LD_VAR 0 4
66858: PUSH
66859: LD_EXP 44
66863: PUSH
66864: LD_VAR 0 8
66868: PLUS
66869: ARRAY
66870: IFFALSE 66896
// tmp := tmp & ( 100 + i ) & ; ;
66872: LD_ADDR_VAR 0 3
66876: PUSH
66877: LD_VAR 0 3
66881: PUSH
66882: LD_INT 100
66884: PUSH
66885: LD_VAR 0 8
66889: PLUS
66890: STR
66891: PUSH
66892: LD_STRING ;
66894: STR
66895: ST_TO_ADDR
// end ;
66896: GO 66851
66898: POP
66899: POP
// if tmp then
66900: LD_VAR 0 3
66904: IFFALSE 66916
// active := tmp ;
66906: LD_ADDR_VAR 0 7
66910: PUSH
66911: LD_VAR 0 3
66915: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66916: LD_STRING getStreamItemsFromMission("
66918: PUSH
66919: LD_VAR 0 5
66923: STR
66924: PUSH
66925: LD_STRING ","
66927: STR
66928: PUSH
66929: LD_VAR 0 6
66933: STR
66934: PUSH
66935: LD_STRING ","
66937: STR
66938: PUSH
66939: LD_VAR 0 7
66943: STR
66944: PUSH
66945: LD_STRING ")
66947: STR
66948: PPUSH
66949: CALL_OW 559
// end else
66953: GO 66962
// ToLua ( getStreamItemsFromMission("","","") ) ;
66955: LD_STRING getStreamItemsFromMission("","","")
66957: PPUSH
66958: CALL_OW 559
// end ;
66962: LD_VAR 0 2
66966: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66967: LD_EXP 43
66971: PUSH
66972: LD_EXP 48
66976: AND
66977: IFFALSE 67101
66979: GO 66981
66981: DISABLE
66982: LD_INT 0
66984: PPUSH
66985: PPUSH
// begin enable ;
66986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66987: LD_ADDR_VAR 0 2
66991: PUSH
66992: LD_INT 22
66994: PUSH
66995: LD_OWVAR 2
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 2
67006: PUSH
67007: LD_INT 34
67009: PUSH
67010: LD_INT 7
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 34
67019: PUSH
67020: LD_INT 45
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 34
67029: PUSH
67030: LD_INT 28
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 34
67039: PUSH
67040: LD_INT 47
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PPUSH
67058: CALL_OW 69
67062: ST_TO_ADDR
// if not tmp then
67063: LD_VAR 0 2
67067: NOT
67068: IFFALSE 67072
// exit ;
67070: GO 67101
// for i in tmp do
67072: LD_ADDR_VAR 0 1
67076: PUSH
67077: LD_VAR 0 2
67081: PUSH
67082: FOR_IN
67083: IFFALSE 67099
// begin SetLives ( i , 0 ) ;
67085: LD_VAR 0 1
67089: PPUSH
67090: LD_INT 0
67092: PPUSH
67093: CALL_OW 234
// end ;
67097: GO 67082
67099: POP
67100: POP
// end ;
67101: PPOPN 2
67103: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67104: LD_EXP 43
67108: PUSH
67109: LD_EXP 49
67113: AND
67114: IFFALSE 67198
67116: GO 67118
67118: DISABLE
67119: LD_INT 0
67121: PPUSH
67122: PPUSH
// begin enable ;
67123: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67124: LD_ADDR_VAR 0 2
67128: PUSH
67129: LD_INT 22
67131: PUSH
67132: LD_OWVAR 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 32
67143: PUSH
67144: LD_INT 3
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PPUSH
67155: CALL_OW 69
67159: ST_TO_ADDR
// if not tmp then
67160: LD_VAR 0 2
67164: NOT
67165: IFFALSE 67169
// exit ;
67167: GO 67198
// for i in tmp do
67169: LD_ADDR_VAR 0 1
67173: PUSH
67174: LD_VAR 0 2
67178: PUSH
67179: FOR_IN
67180: IFFALSE 67196
// begin SetLives ( i , 0 ) ;
67182: LD_VAR 0 1
67186: PPUSH
67187: LD_INT 0
67189: PPUSH
67190: CALL_OW 234
// end ;
67194: GO 67179
67196: POP
67197: POP
// end ;
67198: PPOPN 2
67200: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67201: LD_EXP 43
67205: PUSH
67206: LD_EXP 46
67210: AND
67211: IFFALSE 67304
67213: GO 67215
67215: DISABLE
67216: LD_INT 0
67218: PPUSH
// begin enable ;
67219: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67220: LD_ADDR_VAR 0 1
67224: PUSH
67225: LD_INT 22
67227: PUSH
67228: LD_OWVAR 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: LD_INT 25
67242: PUSH
67243: LD_INT 5
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 25
67252: PUSH
67253: LD_INT 9
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 25
67262: PUSH
67263: LD_INT 8
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PPUSH
67280: CALL_OW 69
67284: PUSH
67285: FOR_IN
67286: IFFALSE 67302
// begin SetClass ( i , 1 ) ;
67288: LD_VAR 0 1
67292: PPUSH
67293: LD_INT 1
67295: PPUSH
67296: CALL_OW 336
// end ;
67300: GO 67285
67302: POP
67303: POP
// end ;
67304: PPOPN 1
67306: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67307: LD_EXP 43
67311: PUSH
67312: LD_EXP 47
67316: AND
67317: PUSH
67318: LD_OWVAR 65
67322: PUSH
67323: LD_INT 7
67325: LESS
67326: AND
67327: IFFALSE 67341
67329: GO 67331
67331: DISABLE
// begin enable ;
67332: ENABLE
// game_speed := 7 ;
67333: LD_ADDR_OWVAR 65
67337: PUSH
67338: LD_INT 7
67340: ST_TO_ADDR
// end ;
67341: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67342: LD_EXP 43
67346: PUSH
67347: LD_EXP 50
67351: AND
67352: IFFALSE 67554
67354: GO 67356
67356: DISABLE
67357: LD_INT 0
67359: PPUSH
67360: PPUSH
67361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67362: LD_ADDR_VAR 0 3
67366: PUSH
67367: LD_INT 81
67369: PUSH
67370: LD_OWVAR 2
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 21
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PPUSH
67393: CALL_OW 69
67397: ST_TO_ADDR
// if not tmp then
67398: LD_VAR 0 3
67402: NOT
67403: IFFALSE 67407
// exit ;
67405: GO 67554
// if tmp > 5 then
67407: LD_VAR 0 3
67411: PUSH
67412: LD_INT 5
67414: GREATER
67415: IFFALSE 67427
// k := 5 else
67417: LD_ADDR_VAR 0 2
67421: PUSH
67422: LD_INT 5
67424: ST_TO_ADDR
67425: GO 67437
// k := tmp ;
67427: LD_ADDR_VAR 0 2
67431: PUSH
67432: LD_VAR 0 3
67436: ST_TO_ADDR
// for i := 1 to k do
67437: LD_ADDR_VAR 0 1
67441: PUSH
67442: DOUBLE
67443: LD_INT 1
67445: DEC
67446: ST_TO_ADDR
67447: LD_VAR 0 2
67451: PUSH
67452: FOR_TO
67453: IFFALSE 67552
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67455: LD_VAR 0 3
67459: PUSH
67460: LD_VAR 0 1
67464: ARRAY
67465: PPUSH
67466: LD_VAR 0 1
67470: PUSH
67471: LD_INT 4
67473: MOD
67474: PUSH
67475: LD_INT 1
67477: PLUS
67478: PPUSH
67479: CALL_OW 259
67483: PUSH
67484: LD_INT 10
67486: LESS
67487: IFFALSE 67550
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67489: LD_VAR 0 3
67493: PUSH
67494: LD_VAR 0 1
67498: ARRAY
67499: PPUSH
67500: LD_VAR 0 1
67504: PUSH
67505: LD_INT 4
67507: MOD
67508: PUSH
67509: LD_INT 1
67511: PLUS
67512: PPUSH
67513: LD_VAR 0 3
67517: PUSH
67518: LD_VAR 0 1
67522: ARRAY
67523: PPUSH
67524: LD_VAR 0 1
67528: PUSH
67529: LD_INT 4
67531: MOD
67532: PUSH
67533: LD_INT 1
67535: PLUS
67536: PPUSH
67537: CALL_OW 259
67541: PUSH
67542: LD_INT 1
67544: PLUS
67545: PPUSH
67546: CALL_OW 237
67550: GO 67452
67552: POP
67553: POP
// end ;
67554: PPOPN 3
67556: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67557: LD_EXP 43
67561: PUSH
67562: LD_EXP 51
67566: AND
67567: IFFALSE 67587
67569: GO 67571
67571: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67572: LD_INT 4
67574: PPUSH
67575: LD_OWVAR 2
67579: PPUSH
67580: LD_INT 0
67582: PPUSH
67583: CALL_OW 324
67587: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67588: LD_EXP 43
67592: PUSH
67593: LD_EXP 80
67597: AND
67598: IFFALSE 67618
67600: GO 67602
67602: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67603: LD_INT 19
67605: PPUSH
67606: LD_OWVAR 2
67610: PPUSH
67611: LD_INT 0
67613: PPUSH
67614: CALL_OW 324
67618: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67619: LD_EXP 43
67623: PUSH
67624: LD_EXP 52
67628: AND
67629: IFFALSE 67731
67631: GO 67633
67633: DISABLE
67634: LD_INT 0
67636: PPUSH
67637: PPUSH
// begin enable ;
67638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67639: LD_ADDR_VAR 0 2
67643: PUSH
67644: LD_INT 22
67646: PUSH
67647: LD_OWVAR 2
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: LD_INT 34
67661: PUSH
67662: LD_INT 11
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 34
67671: PUSH
67672: LD_INT 30
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: LIST
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PPUSH
67688: CALL_OW 69
67692: ST_TO_ADDR
// if not tmp then
67693: LD_VAR 0 2
67697: NOT
67698: IFFALSE 67702
// exit ;
67700: GO 67731
// for i in tmp do
67702: LD_ADDR_VAR 0 1
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: FOR_IN
67713: IFFALSE 67729
// begin SetLives ( i , 0 ) ;
67715: LD_VAR 0 1
67719: PPUSH
67720: LD_INT 0
67722: PPUSH
67723: CALL_OW 234
// end ;
67727: GO 67712
67729: POP
67730: POP
// end ;
67731: PPOPN 2
67733: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67734: LD_EXP 43
67738: PUSH
67739: LD_EXP 53
67743: AND
67744: IFFALSE 67764
67746: GO 67748
67748: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67749: LD_INT 32
67751: PPUSH
67752: LD_OWVAR 2
67756: PPUSH
67757: LD_INT 0
67759: PPUSH
67760: CALL_OW 324
67764: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67765: LD_EXP 43
67769: PUSH
67770: LD_EXP 54
67774: AND
67775: IFFALSE 67956
67777: GO 67779
67779: DISABLE
67780: LD_INT 0
67782: PPUSH
67783: PPUSH
67784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67785: LD_ADDR_VAR 0 2
67789: PUSH
67790: LD_INT 22
67792: PUSH
67793: LD_OWVAR 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 33
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PPUSH
67816: CALL_OW 69
67820: ST_TO_ADDR
// if not tmp then
67821: LD_VAR 0 2
67825: NOT
67826: IFFALSE 67830
// exit ;
67828: GO 67956
// side := 0 ;
67830: LD_ADDR_VAR 0 3
67834: PUSH
67835: LD_INT 0
67837: ST_TO_ADDR
// for i := 1 to 8 do
67838: LD_ADDR_VAR 0 1
67842: PUSH
67843: DOUBLE
67844: LD_INT 1
67846: DEC
67847: ST_TO_ADDR
67848: LD_INT 8
67850: PUSH
67851: FOR_TO
67852: IFFALSE 67900
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67854: LD_OWVAR 2
67858: PUSH
67859: LD_VAR 0 1
67863: NONEQUAL
67864: PUSH
67865: LD_OWVAR 2
67869: PPUSH
67870: LD_VAR 0 1
67874: PPUSH
67875: CALL_OW 81
67879: PUSH
67880: LD_INT 2
67882: EQUAL
67883: AND
67884: IFFALSE 67898
// begin side := i ;
67886: LD_ADDR_VAR 0 3
67890: PUSH
67891: LD_VAR 0 1
67895: ST_TO_ADDR
// break ;
67896: GO 67900
// end ;
67898: GO 67851
67900: POP
67901: POP
// if not side then
67902: LD_VAR 0 3
67906: NOT
67907: IFFALSE 67911
// exit ;
67909: GO 67956
// for i := 1 to tmp do
67911: LD_ADDR_VAR 0 1
67915: PUSH
67916: DOUBLE
67917: LD_INT 1
67919: DEC
67920: ST_TO_ADDR
67921: LD_VAR 0 2
67925: PUSH
67926: FOR_TO
67927: IFFALSE 67954
// if Prob ( 60 ) then
67929: LD_INT 60
67931: PPUSH
67932: CALL_OW 13
67936: IFFALSE 67952
// SetSide ( i , side ) ;
67938: LD_VAR 0 1
67942: PPUSH
67943: LD_VAR 0 3
67947: PPUSH
67948: CALL_OW 235
67952: GO 67926
67954: POP
67955: POP
// end ;
67956: PPOPN 3
67958: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67959: LD_EXP 43
67963: PUSH
67964: LD_EXP 56
67968: AND
67969: IFFALSE 68088
67971: GO 67973
67973: DISABLE
67974: LD_INT 0
67976: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67977: LD_ADDR_VAR 0 1
67981: PUSH
67982: LD_INT 22
67984: PUSH
67985: LD_OWVAR 2
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 21
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: LD_INT 23
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: PPUSH
68026: CALL_OW 69
68030: PUSH
68031: FOR_IN
68032: IFFALSE 68086
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68034: LD_VAR 0 1
68038: PPUSH
68039: CALL_OW 257
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: LD_INT 4
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: IN
68062: IFFALSE 68084
// SetClass ( un , rand ( 1 , 4 ) ) ;
68064: LD_VAR 0 1
68068: PPUSH
68069: LD_INT 1
68071: PPUSH
68072: LD_INT 4
68074: PPUSH
68075: CALL_OW 12
68079: PPUSH
68080: CALL_OW 336
68084: GO 68031
68086: POP
68087: POP
// end ;
68088: PPOPN 1
68090: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68091: LD_EXP 43
68095: PUSH
68096: LD_EXP 55
68100: AND
68101: IFFALSE 68180
68103: GO 68105
68105: DISABLE
68106: LD_INT 0
68108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68109: LD_ADDR_VAR 0 1
68113: PUSH
68114: LD_INT 22
68116: PUSH
68117: LD_OWVAR 2
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 21
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PPUSH
68140: CALL_OW 69
68144: ST_TO_ADDR
// if not tmp then
68145: LD_VAR 0 1
68149: NOT
68150: IFFALSE 68154
// exit ;
68152: GO 68180
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68154: LD_VAR 0 1
68158: PUSH
68159: LD_INT 1
68161: PPUSH
68162: LD_VAR 0 1
68166: PPUSH
68167: CALL_OW 12
68171: ARRAY
68172: PPUSH
68173: LD_INT 100
68175: PPUSH
68176: CALL_OW 234
// end ;
68180: PPOPN 1
68182: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68183: LD_EXP 43
68187: PUSH
68188: LD_EXP 57
68192: AND
68193: IFFALSE 68291
68195: GO 68197
68197: DISABLE
68198: LD_INT 0
68200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68201: LD_ADDR_VAR 0 1
68205: PUSH
68206: LD_INT 22
68208: PUSH
68209: LD_OWVAR 2
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 21
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PPUSH
68232: CALL_OW 69
68236: ST_TO_ADDR
// if not tmp then
68237: LD_VAR 0 1
68241: NOT
68242: IFFALSE 68246
// exit ;
68244: GO 68291
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68246: LD_VAR 0 1
68250: PUSH
68251: LD_INT 1
68253: PPUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: CALL_OW 12
68263: ARRAY
68264: PPUSH
68265: LD_INT 1
68267: PPUSH
68268: LD_INT 4
68270: PPUSH
68271: CALL_OW 12
68275: PPUSH
68276: LD_INT 3000
68278: PPUSH
68279: LD_INT 9000
68281: PPUSH
68282: CALL_OW 12
68286: PPUSH
68287: CALL_OW 492
// end ;
68291: PPOPN 1
68293: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68294: LD_EXP 43
68298: PUSH
68299: LD_EXP 58
68303: AND
68304: IFFALSE 68324
68306: GO 68308
68308: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68309: LD_INT 1
68311: PPUSH
68312: LD_OWVAR 2
68316: PPUSH
68317: LD_INT 0
68319: PPUSH
68320: CALL_OW 324
68324: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68325: LD_EXP 43
68329: PUSH
68330: LD_EXP 59
68334: AND
68335: IFFALSE 68418
68337: GO 68339
68339: DISABLE
68340: LD_INT 0
68342: PPUSH
68343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68344: LD_ADDR_VAR 0 2
68348: PUSH
68349: LD_INT 22
68351: PUSH
68352: LD_OWVAR 2
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 21
68363: PUSH
68364: LD_INT 3
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PPUSH
68375: CALL_OW 69
68379: ST_TO_ADDR
// if not tmp then
68380: LD_VAR 0 2
68384: NOT
68385: IFFALSE 68389
// exit ;
68387: GO 68418
// for i in tmp do
68389: LD_ADDR_VAR 0 1
68393: PUSH
68394: LD_VAR 0 2
68398: PUSH
68399: FOR_IN
68400: IFFALSE 68416
// SetBLevel ( i , 10 ) ;
68402: LD_VAR 0 1
68406: PPUSH
68407: LD_INT 10
68409: PPUSH
68410: CALL_OW 241
68414: GO 68399
68416: POP
68417: POP
// end ;
68418: PPOPN 2
68420: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68421: LD_EXP 43
68425: PUSH
68426: LD_EXP 60
68430: AND
68431: IFFALSE 68542
68433: GO 68435
68435: DISABLE
68436: LD_INT 0
68438: PPUSH
68439: PPUSH
68440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68441: LD_ADDR_VAR 0 3
68445: PUSH
68446: LD_INT 22
68448: PUSH
68449: LD_OWVAR 2
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 25
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PPUSH
68472: CALL_OW 69
68476: ST_TO_ADDR
// if not tmp then
68477: LD_VAR 0 3
68481: NOT
68482: IFFALSE 68486
// exit ;
68484: GO 68542
// un := tmp [ rand ( 1 , tmp ) ] ;
68486: LD_ADDR_VAR 0 2
68490: PUSH
68491: LD_VAR 0 3
68495: PUSH
68496: LD_INT 1
68498: PPUSH
68499: LD_VAR 0 3
68503: PPUSH
68504: CALL_OW 12
68508: ARRAY
68509: ST_TO_ADDR
// if Crawls ( un ) then
68510: LD_VAR 0 2
68514: PPUSH
68515: CALL_OW 318
68519: IFFALSE 68530
// ComWalk ( un ) ;
68521: LD_VAR 0 2
68525: PPUSH
68526: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68530: LD_VAR 0 2
68534: PPUSH
68535: LD_INT 5
68537: PPUSH
68538: CALL_OW 336
// end ;
68542: PPOPN 3
68544: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68545: LD_EXP 43
68549: PUSH
68550: LD_EXP 61
68554: AND
68555: PUSH
68556: LD_OWVAR 67
68560: PUSH
68561: LD_INT 4
68563: LESS
68564: AND
68565: IFFALSE 68584
68567: GO 68569
68569: DISABLE
// begin Difficulty := Difficulty + 1 ;
68570: LD_ADDR_OWVAR 67
68574: PUSH
68575: LD_OWVAR 67
68579: PUSH
68580: LD_INT 1
68582: PLUS
68583: ST_TO_ADDR
// end ;
68584: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68585: LD_EXP 43
68589: PUSH
68590: LD_EXP 62
68594: AND
68595: IFFALSE 68698
68597: GO 68599
68599: DISABLE
68600: LD_INT 0
68602: PPUSH
// begin for i := 1 to 5 do
68603: LD_ADDR_VAR 0 1
68607: PUSH
68608: DOUBLE
68609: LD_INT 1
68611: DEC
68612: ST_TO_ADDR
68613: LD_INT 5
68615: PUSH
68616: FOR_TO
68617: IFFALSE 68696
// begin uc_nation := nation_nature ;
68619: LD_ADDR_OWVAR 21
68623: PUSH
68624: LD_INT 0
68626: ST_TO_ADDR
// uc_side := 0 ;
68627: LD_ADDR_OWVAR 20
68631: PUSH
68632: LD_INT 0
68634: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68635: LD_ADDR_OWVAR 29
68639: PUSH
68640: LD_INT 12
68642: PUSH
68643: LD_INT 12
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: ST_TO_ADDR
// hc_agressivity := 20 ;
68650: LD_ADDR_OWVAR 35
68654: PUSH
68655: LD_INT 20
68657: ST_TO_ADDR
// hc_class := class_tiger ;
68658: LD_ADDR_OWVAR 28
68662: PUSH
68663: LD_INT 14
68665: ST_TO_ADDR
// hc_gallery :=  ;
68666: LD_ADDR_OWVAR 33
68670: PUSH
68671: LD_STRING 
68673: ST_TO_ADDR
// hc_name :=  ;
68674: LD_ADDR_OWVAR 26
68678: PUSH
68679: LD_STRING 
68681: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68682: CALL_OW 44
68686: PPUSH
68687: LD_INT 0
68689: PPUSH
68690: CALL_OW 51
// end ;
68694: GO 68616
68696: POP
68697: POP
// end ;
68698: PPOPN 1
68700: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68701: LD_EXP 43
68705: PUSH
68706: LD_EXP 63
68710: AND
68711: IFFALSE 68720
68713: GO 68715
68715: DISABLE
// StreamSibBomb ;
68716: CALL 68721 0 0
68720: END
// export function StreamSibBomb ; var i , x , y ; begin
68721: LD_INT 0
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
// result := false ;
68727: LD_ADDR_VAR 0 1
68731: PUSH
68732: LD_INT 0
68734: ST_TO_ADDR
// for i := 1 to 16 do
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: DOUBLE
68741: LD_INT 1
68743: DEC
68744: ST_TO_ADDR
68745: LD_INT 16
68747: PUSH
68748: FOR_TO
68749: IFFALSE 68948
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68751: LD_ADDR_VAR 0 3
68755: PUSH
68756: LD_INT 10
68758: PUSH
68759: LD_INT 20
68761: PUSH
68762: LD_INT 30
68764: PUSH
68765: LD_INT 40
68767: PUSH
68768: LD_INT 50
68770: PUSH
68771: LD_INT 60
68773: PUSH
68774: LD_INT 70
68776: PUSH
68777: LD_INT 80
68779: PUSH
68780: LD_INT 90
68782: PUSH
68783: LD_INT 100
68785: PUSH
68786: LD_INT 110
68788: PUSH
68789: LD_INT 120
68791: PUSH
68792: LD_INT 130
68794: PUSH
68795: LD_INT 140
68797: PUSH
68798: LD_INT 150
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 1
68820: PPUSH
68821: LD_INT 15
68823: PPUSH
68824: CALL_OW 12
68828: ARRAY
68829: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68830: LD_ADDR_VAR 0 4
68834: PUSH
68835: LD_INT 10
68837: PUSH
68838: LD_INT 20
68840: PUSH
68841: LD_INT 30
68843: PUSH
68844: LD_INT 40
68846: PUSH
68847: LD_INT 50
68849: PUSH
68850: LD_INT 60
68852: PUSH
68853: LD_INT 70
68855: PUSH
68856: LD_INT 80
68858: PUSH
68859: LD_INT 90
68861: PUSH
68862: LD_INT 100
68864: PUSH
68865: LD_INT 110
68867: PUSH
68868: LD_INT 120
68870: PUSH
68871: LD_INT 130
68873: PUSH
68874: LD_INT 140
68876: PUSH
68877: LD_INT 150
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 1
68899: PPUSH
68900: LD_INT 15
68902: PPUSH
68903: CALL_OW 12
68907: ARRAY
68908: ST_TO_ADDR
// if ValidHex ( x , y ) then
68909: LD_VAR 0 3
68913: PPUSH
68914: LD_VAR 0 4
68918: PPUSH
68919: CALL_OW 488
68923: IFFALSE 68946
// begin result := [ x , y ] ;
68925: LD_ADDR_VAR 0 1
68929: PUSH
68930: LD_VAR 0 3
68934: PUSH
68935: LD_VAR 0 4
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: ST_TO_ADDR
// break ;
68944: GO 68948
// end ; end ;
68946: GO 68748
68948: POP
68949: POP
// if result then
68950: LD_VAR 0 1
68954: IFFALSE 69014
// begin ToLua ( playSibBomb() ) ;
68956: LD_STRING playSibBomb()
68958: PPUSH
68959: CALL_OW 559
// wait ( 0 0$14 ) ;
68963: LD_INT 490
68965: PPUSH
68966: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68970: LD_VAR 0 1
68974: PUSH
68975: LD_INT 1
68977: ARRAY
68978: PPUSH
68979: LD_VAR 0 1
68983: PUSH
68984: LD_INT 2
68986: ARRAY
68987: PPUSH
68988: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68992: LD_VAR 0 1
68996: PUSH
68997: LD_INT 1
68999: ARRAY
69000: PPUSH
69001: LD_VAR 0 1
69005: PUSH
69006: LD_INT 2
69008: ARRAY
69009: PPUSH
69010: CALL_OW 429
// end ; end ;
69014: LD_VAR 0 1
69018: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69019: LD_EXP 43
69023: PUSH
69024: LD_EXP 65
69028: AND
69029: IFFALSE 69041
69031: GO 69033
69033: DISABLE
// YouLost (  ) ;
69034: LD_STRING 
69036: PPUSH
69037: CALL_OW 104
69041: END
// every 0 0$1 trigger StreamModeActive and sFog do
69042: LD_EXP 43
69046: PUSH
69047: LD_EXP 64
69051: AND
69052: IFFALSE 69066
69054: GO 69056
69056: DISABLE
// FogOff ( your_side ) ;
69057: LD_OWVAR 2
69061: PPUSH
69062: CALL_OW 344
69066: END
// every 0 0$1 trigger StreamModeActive and sSun do
69067: LD_EXP 43
69071: PUSH
69072: LD_EXP 66
69076: AND
69077: IFFALSE 69105
69079: GO 69081
69081: DISABLE
// begin solar_recharge_percent := 0 ;
69082: LD_ADDR_OWVAR 79
69086: PUSH
69087: LD_INT 0
69089: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69090: LD_INT 10500
69092: PPUSH
69093: CALL_OW 67
// solar_recharge_percent := 100 ;
69097: LD_ADDR_OWVAR 79
69101: PUSH
69102: LD_INT 100
69104: ST_TO_ADDR
// end ;
69105: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69106: LD_EXP 43
69110: PUSH
69111: LD_EXP 67
69115: AND
69116: IFFALSE 69355
69118: GO 69120
69120: DISABLE
69121: LD_INT 0
69123: PPUSH
69124: PPUSH
69125: PPUSH
// begin tmp := [ ] ;
69126: LD_ADDR_VAR 0 3
69130: PUSH
69131: EMPTY
69132: ST_TO_ADDR
// for i := 1 to 6 do
69133: LD_ADDR_VAR 0 1
69137: PUSH
69138: DOUBLE
69139: LD_INT 1
69141: DEC
69142: ST_TO_ADDR
69143: LD_INT 6
69145: PUSH
69146: FOR_TO
69147: IFFALSE 69252
// begin uc_nation := nation_nature ;
69149: LD_ADDR_OWVAR 21
69153: PUSH
69154: LD_INT 0
69156: ST_TO_ADDR
// uc_side := 0 ;
69157: LD_ADDR_OWVAR 20
69161: PUSH
69162: LD_INT 0
69164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69165: LD_ADDR_OWVAR 29
69169: PUSH
69170: LD_INT 12
69172: PUSH
69173: LD_INT 12
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// hc_agressivity := 20 ;
69180: LD_ADDR_OWVAR 35
69184: PUSH
69185: LD_INT 20
69187: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69188: LD_ADDR_OWVAR 28
69192: PUSH
69193: LD_INT 17
69195: ST_TO_ADDR
// hc_gallery :=  ;
69196: LD_ADDR_OWVAR 33
69200: PUSH
69201: LD_STRING 
69203: ST_TO_ADDR
// hc_name :=  ;
69204: LD_ADDR_OWVAR 26
69208: PUSH
69209: LD_STRING 
69211: ST_TO_ADDR
// un := CreateHuman ;
69212: LD_ADDR_VAR 0 2
69216: PUSH
69217: CALL_OW 44
69221: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69222: LD_VAR 0 2
69226: PPUSH
69227: LD_INT 1
69229: PPUSH
69230: CALL_OW 51
// tmp := tmp ^ un ;
69234: LD_ADDR_VAR 0 3
69238: PUSH
69239: LD_VAR 0 3
69243: PUSH
69244: LD_VAR 0 2
69248: ADD
69249: ST_TO_ADDR
// end ;
69250: GO 69146
69252: POP
69253: POP
// repeat wait ( 0 0$1 ) ;
69254: LD_INT 35
69256: PPUSH
69257: CALL_OW 67
// for un in tmp do
69261: LD_ADDR_VAR 0 2
69265: PUSH
69266: LD_VAR 0 3
69270: PUSH
69271: FOR_IN
69272: IFFALSE 69346
// begin if IsDead ( un ) then
69274: LD_VAR 0 2
69278: PPUSH
69279: CALL_OW 301
69283: IFFALSE 69303
// begin tmp := tmp diff un ;
69285: LD_ADDR_VAR 0 3
69289: PUSH
69290: LD_VAR 0 3
69294: PUSH
69295: LD_VAR 0 2
69299: DIFF
69300: ST_TO_ADDR
// continue ;
69301: GO 69271
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69303: LD_VAR 0 2
69307: PPUSH
69308: LD_INT 3
69310: PUSH
69311: LD_INT 22
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PPUSH
69325: CALL_OW 69
69329: PPUSH
69330: LD_VAR 0 2
69334: PPUSH
69335: CALL_OW 74
69339: PPUSH
69340: CALL_OW 115
// end ;
69344: GO 69271
69346: POP
69347: POP
// until not tmp ;
69348: LD_VAR 0 3
69352: NOT
69353: IFFALSE 69254
// end ;
69355: PPOPN 3
69357: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69358: LD_EXP 43
69362: PUSH
69363: LD_EXP 68
69367: AND
69368: IFFALSE 69422
69370: GO 69372
69372: DISABLE
// begin ToLua ( displayTroll(); ) ;
69373: LD_STRING displayTroll();
69375: PPUSH
69376: CALL_OW 559
// wait ( 3 3$00 ) ;
69380: LD_INT 6300
69382: PPUSH
69383: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69387: LD_STRING hideTroll();
69389: PPUSH
69390: CALL_OW 559
// wait ( 1 1$00 ) ;
69394: LD_INT 2100
69396: PPUSH
69397: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69401: LD_STRING displayTroll();
69403: PPUSH
69404: CALL_OW 559
// wait ( 1 1$00 ) ;
69408: LD_INT 2100
69410: PPUSH
69411: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69415: LD_STRING hideTroll();
69417: PPUSH
69418: CALL_OW 559
// end ;
69422: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69423: LD_EXP 43
69427: PUSH
69428: LD_EXP 69
69432: AND
69433: IFFALSE 69496
69435: GO 69437
69437: DISABLE
69438: LD_INT 0
69440: PPUSH
// begin p := 0 ;
69441: LD_ADDR_VAR 0 1
69445: PUSH
69446: LD_INT 0
69448: ST_TO_ADDR
// repeat game_speed := 1 ;
69449: LD_ADDR_OWVAR 65
69453: PUSH
69454: LD_INT 1
69456: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69457: LD_INT 35
69459: PPUSH
69460: CALL_OW 67
// p := p + 1 ;
69464: LD_ADDR_VAR 0 1
69468: PUSH
69469: LD_VAR 0 1
69473: PUSH
69474: LD_INT 1
69476: PLUS
69477: ST_TO_ADDR
// until p >= 60 ;
69478: LD_VAR 0 1
69482: PUSH
69483: LD_INT 60
69485: GREATEREQUAL
69486: IFFALSE 69449
// game_speed := 4 ;
69488: LD_ADDR_OWVAR 65
69492: PUSH
69493: LD_INT 4
69495: ST_TO_ADDR
// end ;
69496: PPOPN 1
69498: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69499: LD_EXP 43
69503: PUSH
69504: LD_EXP 70
69508: AND
69509: IFFALSE 69655
69511: GO 69513
69513: DISABLE
69514: LD_INT 0
69516: PPUSH
69517: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69518: LD_ADDR_VAR 0 1
69522: PUSH
69523: LD_INT 22
69525: PUSH
69526: LD_OWVAR 2
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 2
69537: PUSH
69538: LD_INT 30
69540: PUSH
69541: LD_INT 0
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 30
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PPUSH
69567: CALL_OW 69
69571: ST_TO_ADDR
// if not depot then
69572: LD_VAR 0 1
69576: NOT
69577: IFFALSE 69581
// exit ;
69579: GO 69655
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69581: LD_ADDR_VAR 0 2
69585: PUSH
69586: LD_VAR 0 1
69590: PUSH
69591: LD_INT 1
69593: PPUSH
69594: LD_VAR 0 1
69598: PPUSH
69599: CALL_OW 12
69603: ARRAY
69604: PPUSH
69605: CALL_OW 274
69609: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69610: LD_VAR 0 2
69614: PPUSH
69615: LD_INT 1
69617: PPUSH
69618: LD_INT 0
69620: PPUSH
69621: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69625: LD_VAR 0 2
69629: PPUSH
69630: LD_INT 2
69632: PPUSH
69633: LD_INT 0
69635: PPUSH
69636: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69640: LD_VAR 0 2
69644: PPUSH
69645: LD_INT 3
69647: PPUSH
69648: LD_INT 0
69650: PPUSH
69651: CALL_OW 277
// end ;
69655: PPOPN 2
69657: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69658: LD_EXP 43
69662: PUSH
69663: LD_EXP 71
69667: AND
69668: IFFALSE 69765
69670: GO 69672
69672: DISABLE
69673: LD_INT 0
69675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69676: LD_ADDR_VAR 0 1
69680: PUSH
69681: LD_INT 22
69683: PUSH
69684: LD_OWVAR 2
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 21
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: LD_INT 23
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: PPUSH
69725: CALL_OW 69
69729: ST_TO_ADDR
// if not tmp then
69730: LD_VAR 0 1
69734: NOT
69735: IFFALSE 69739
// exit ;
69737: GO 69765
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69739: LD_VAR 0 1
69743: PUSH
69744: LD_INT 1
69746: PPUSH
69747: LD_VAR 0 1
69751: PPUSH
69752: CALL_OW 12
69756: ARRAY
69757: PPUSH
69758: LD_INT 200
69760: PPUSH
69761: CALL_OW 234
// end ;
69765: PPOPN 1
69767: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69768: LD_EXP 43
69772: PUSH
69773: LD_EXP 72
69777: AND
69778: IFFALSE 69857
69780: GO 69782
69782: DISABLE
69783: LD_INT 0
69785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69786: LD_ADDR_VAR 0 1
69790: PUSH
69791: LD_INT 22
69793: PUSH
69794: LD_OWVAR 2
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 21
69805: PUSH
69806: LD_INT 2
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PPUSH
69817: CALL_OW 69
69821: ST_TO_ADDR
// if not tmp then
69822: LD_VAR 0 1
69826: NOT
69827: IFFALSE 69831
// exit ;
69829: GO 69857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69831: LD_VAR 0 1
69835: PUSH
69836: LD_INT 1
69838: PPUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: CALL_OW 12
69848: ARRAY
69849: PPUSH
69850: LD_INT 60
69852: PPUSH
69853: CALL_OW 234
// end ;
69857: PPOPN 1
69859: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69860: LD_EXP 43
69864: PUSH
69865: LD_EXP 73
69869: AND
69870: IFFALSE 69969
69872: GO 69874
69874: DISABLE
69875: LD_INT 0
69877: PPUSH
69878: PPUSH
// begin enable ;
69879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69880: LD_ADDR_VAR 0 1
69884: PUSH
69885: LD_INT 22
69887: PUSH
69888: LD_OWVAR 2
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 61
69899: PUSH
69900: EMPTY
69901: LIST
69902: PUSH
69903: LD_INT 33
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: PPUSH
69918: CALL_OW 69
69922: ST_TO_ADDR
// if not tmp then
69923: LD_VAR 0 1
69927: NOT
69928: IFFALSE 69932
// exit ;
69930: GO 69969
// for i in tmp do
69932: LD_ADDR_VAR 0 2
69936: PUSH
69937: LD_VAR 0 1
69941: PUSH
69942: FOR_IN
69943: IFFALSE 69967
// if IsControledBy ( i ) then
69945: LD_VAR 0 2
69949: PPUSH
69950: CALL_OW 312
69954: IFFALSE 69965
// ComUnlink ( i ) ;
69956: LD_VAR 0 2
69960: PPUSH
69961: CALL_OW 136
69965: GO 69942
69967: POP
69968: POP
// end ;
69969: PPOPN 2
69971: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69972: LD_EXP 43
69976: PUSH
69977: LD_EXP 74
69981: AND
69982: IFFALSE 70122
69984: GO 69986
69986: DISABLE
69987: LD_INT 0
69989: PPUSH
69990: PPUSH
// begin ToLua ( displayPowell(); ) ;
69991: LD_STRING displayPowell();
69993: PPUSH
69994: CALL_OW 559
// uc_side := 0 ;
69998: LD_ADDR_OWVAR 20
70002: PUSH
70003: LD_INT 0
70005: ST_TO_ADDR
// uc_nation := 2 ;
70006: LD_ADDR_OWVAR 21
70010: PUSH
70011: LD_INT 2
70013: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70014: LD_ADDR_OWVAR 37
70018: PUSH
70019: LD_INT 14
70021: ST_TO_ADDR
// vc_engine := engine_siberite ;
70022: LD_ADDR_OWVAR 39
70026: PUSH
70027: LD_INT 3
70029: ST_TO_ADDR
// vc_control := control_apeman ;
70030: LD_ADDR_OWVAR 38
70034: PUSH
70035: LD_INT 5
70037: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70038: LD_ADDR_OWVAR 40
70042: PUSH
70043: LD_INT 29
70045: ST_TO_ADDR
// un := CreateVehicle ;
70046: LD_ADDR_VAR 0 2
70050: PUSH
70051: CALL_OW 45
70055: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70056: LD_VAR 0 2
70060: PPUSH
70061: LD_INT 1
70063: PPUSH
70064: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70068: LD_INT 35
70070: PPUSH
70071: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70075: LD_VAR 0 2
70079: PPUSH
70080: LD_INT 22
70082: PUSH
70083: LD_OWVAR 2
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PPUSH
70092: CALL_OW 69
70096: PPUSH
70097: LD_VAR 0 2
70101: PPUSH
70102: CALL_OW 74
70106: PPUSH
70107: CALL_OW 115
// until IsDead ( un ) ;
70111: LD_VAR 0 2
70115: PPUSH
70116: CALL_OW 301
70120: IFFALSE 70068
// end ;
70122: PPOPN 2
70124: END
// every 0 0$1 trigger StreamModeActive and sStu do
70125: LD_EXP 43
70129: PUSH
70130: LD_EXP 82
70134: AND
70135: IFFALSE 70151
70137: GO 70139
70139: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70140: LD_STRING displayStucuk();
70142: PPUSH
70143: CALL_OW 559
// ResetFog ;
70147: CALL_OW 335
// end ;
70151: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70152: LD_EXP 43
70156: PUSH
70157: LD_EXP 75
70161: AND
70162: IFFALSE 70303
70164: GO 70166
70166: DISABLE
70167: LD_INT 0
70169: PPUSH
70170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70171: LD_ADDR_VAR 0 2
70175: PUSH
70176: LD_INT 22
70178: PUSH
70179: LD_OWVAR 2
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 21
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PPUSH
70202: CALL_OW 69
70206: ST_TO_ADDR
// if not tmp then
70207: LD_VAR 0 2
70211: NOT
70212: IFFALSE 70216
// exit ;
70214: GO 70303
// un := tmp [ rand ( 1 , tmp ) ] ;
70216: LD_ADDR_VAR 0 1
70220: PUSH
70221: LD_VAR 0 2
70225: PUSH
70226: LD_INT 1
70228: PPUSH
70229: LD_VAR 0 2
70233: PPUSH
70234: CALL_OW 12
70238: ARRAY
70239: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70240: LD_VAR 0 1
70244: PPUSH
70245: LD_INT 0
70247: PPUSH
70248: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70252: LD_VAR 0 1
70256: PPUSH
70257: LD_OWVAR 3
70261: PUSH
70262: LD_VAR 0 1
70266: DIFF
70267: PPUSH
70268: LD_VAR 0 1
70272: PPUSH
70273: CALL_OW 74
70277: PPUSH
70278: CALL_OW 115
// wait ( 0 0$20 ) ;
70282: LD_INT 700
70284: PPUSH
70285: CALL_OW 67
// SetSide ( un , your_side ) ;
70289: LD_VAR 0 1
70293: PPUSH
70294: LD_OWVAR 2
70298: PPUSH
70299: CALL_OW 235
// end ;
70303: PPOPN 2
70305: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70306: LD_EXP 43
70310: PUSH
70311: LD_EXP 76
70315: AND
70316: IFFALSE 70422
70318: GO 70320
70320: DISABLE
70321: LD_INT 0
70323: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70324: LD_ADDR_VAR 0 1
70328: PUSH
70329: LD_INT 22
70331: PUSH
70332: LD_OWVAR 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 2
70343: PUSH
70344: LD_INT 30
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 30
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: LIST
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PPUSH
70373: CALL_OW 69
70377: ST_TO_ADDR
// if not depot then
70378: LD_VAR 0 1
70382: NOT
70383: IFFALSE 70387
// exit ;
70385: GO 70422
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70387: LD_VAR 0 1
70391: PUSH
70392: LD_INT 1
70394: ARRAY
70395: PPUSH
70396: CALL_OW 250
70400: PPUSH
70401: LD_VAR 0 1
70405: PUSH
70406: LD_INT 1
70408: ARRAY
70409: PPUSH
70410: CALL_OW 251
70414: PPUSH
70415: LD_INT 70
70417: PPUSH
70418: CALL_OW 495
// end ;
70422: PPOPN 1
70424: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70425: LD_EXP 43
70429: PUSH
70430: LD_EXP 77
70434: AND
70435: IFFALSE 70646
70437: GO 70439
70439: DISABLE
70440: LD_INT 0
70442: PPUSH
70443: PPUSH
70444: PPUSH
70445: PPUSH
70446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70447: LD_ADDR_VAR 0 5
70451: PUSH
70452: LD_INT 22
70454: PUSH
70455: LD_OWVAR 2
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 21
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PPUSH
70478: CALL_OW 69
70482: ST_TO_ADDR
// if not tmp then
70483: LD_VAR 0 5
70487: NOT
70488: IFFALSE 70492
// exit ;
70490: GO 70646
// for i in tmp do
70492: LD_ADDR_VAR 0 1
70496: PUSH
70497: LD_VAR 0 5
70501: PUSH
70502: FOR_IN
70503: IFFALSE 70644
// begin d := rand ( 0 , 5 ) ;
70505: LD_ADDR_VAR 0 4
70509: PUSH
70510: LD_INT 0
70512: PPUSH
70513: LD_INT 5
70515: PPUSH
70516: CALL_OW 12
70520: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70521: LD_ADDR_VAR 0 2
70525: PUSH
70526: LD_VAR 0 1
70530: PPUSH
70531: CALL_OW 250
70535: PPUSH
70536: LD_VAR 0 4
70540: PPUSH
70541: LD_INT 3
70543: PPUSH
70544: LD_INT 12
70546: PPUSH
70547: CALL_OW 12
70551: PPUSH
70552: CALL_OW 272
70556: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70557: LD_ADDR_VAR 0 3
70561: PUSH
70562: LD_VAR 0 1
70566: PPUSH
70567: CALL_OW 251
70571: PPUSH
70572: LD_VAR 0 4
70576: PPUSH
70577: LD_INT 3
70579: PPUSH
70580: LD_INT 12
70582: PPUSH
70583: CALL_OW 12
70587: PPUSH
70588: CALL_OW 273
70592: ST_TO_ADDR
// if ValidHex ( x , y ) then
70593: LD_VAR 0 2
70597: PPUSH
70598: LD_VAR 0 3
70602: PPUSH
70603: CALL_OW 488
70607: IFFALSE 70642
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70609: LD_VAR 0 1
70613: PPUSH
70614: LD_VAR 0 2
70618: PPUSH
70619: LD_VAR 0 3
70623: PPUSH
70624: LD_INT 3
70626: PPUSH
70627: LD_INT 6
70629: PPUSH
70630: CALL_OW 12
70634: PPUSH
70635: LD_INT 1
70637: PPUSH
70638: CALL_OW 483
// end ;
70642: GO 70502
70644: POP
70645: POP
// end ;
70646: PPOPN 5
70648: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70649: LD_EXP 43
70653: PUSH
70654: LD_EXP 78
70658: AND
70659: IFFALSE 70753
70661: GO 70663
70663: DISABLE
70664: LD_INT 0
70666: PPUSH
70667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70668: LD_ADDR_VAR 0 2
70672: PUSH
70673: LD_INT 22
70675: PUSH
70676: LD_OWVAR 2
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 32
70687: PUSH
70688: LD_INT 1
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 21
70697: PUSH
70698: LD_INT 2
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: LIST
70709: PPUSH
70710: CALL_OW 69
70714: ST_TO_ADDR
// if not tmp then
70715: LD_VAR 0 2
70719: NOT
70720: IFFALSE 70724
// exit ;
70722: GO 70753
// for i in tmp do
70724: LD_ADDR_VAR 0 1
70728: PUSH
70729: LD_VAR 0 2
70733: PUSH
70734: FOR_IN
70735: IFFALSE 70751
// SetFuel ( i , 0 ) ;
70737: LD_VAR 0 1
70741: PPUSH
70742: LD_INT 0
70744: PPUSH
70745: CALL_OW 240
70749: GO 70734
70751: POP
70752: POP
// end ;
70753: PPOPN 2
70755: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70756: LD_EXP 43
70760: PUSH
70761: LD_EXP 79
70765: AND
70766: IFFALSE 70832
70768: GO 70770
70770: DISABLE
70771: LD_INT 0
70773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70774: LD_ADDR_VAR 0 1
70778: PUSH
70779: LD_INT 22
70781: PUSH
70782: LD_OWVAR 2
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 30
70793: PUSH
70794: LD_INT 29
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PPUSH
70805: CALL_OW 69
70809: ST_TO_ADDR
// if not tmp then
70810: LD_VAR 0 1
70814: NOT
70815: IFFALSE 70819
// exit ;
70817: GO 70832
// DestroyUnit ( tmp [ 1 ] ) ;
70819: LD_VAR 0 1
70823: PUSH
70824: LD_INT 1
70826: ARRAY
70827: PPUSH
70828: CALL_OW 65
// end ;
70832: PPOPN 1
70834: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70835: LD_EXP 43
70839: PUSH
70840: LD_EXP 81
70844: AND
70845: IFFALSE 70974
70847: GO 70849
70849: DISABLE
70850: LD_INT 0
70852: PPUSH
// begin uc_side := 0 ;
70853: LD_ADDR_OWVAR 20
70857: PUSH
70858: LD_INT 0
70860: ST_TO_ADDR
// uc_nation := nation_arabian ;
70861: LD_ADDR_OWVAR 21
70865: PUSH
70866: LD_INT 2
70868: ST_TO_ADDR
// hc_gallery :=  ;
70869: LD_ADDR_OWVAR 33
70873: PUSH
70874: LD_STRING 
70876: ST_TO_ADDR
// hc_name :=  ;
70877: LD_ADDR_OWVAR 26
70881: PUSH
70882: LD_STRING 
70884: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70885: LD_INT 1
70887: PPUSH
70888: LD_INT 11
70890: PPUSH
70891: LD_INT 10
70893: PPUSH
70894: CALL_OW 380
// un := CreateHuman ;
70898: LD_ADDR_VAR 0 1
70902: PUSH
70903: CALL_OW 44
70907: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70908: LD_VAR 0 1
70912: PPUSH
70913: LD_INT 1
70915: PPUSH
70916: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70920: LD_INT 35
70922: PPUSH
70923: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70927: LD_VAR 0 1
70931: PPUSH
70932: LD_INT 22
70934: PUSH
70935: LD_OWVAR 2
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PPUSH
70944: CALL_OW 69
70948: PPUSH
70949: LD_VAR 0 1
70953: PPUSH
70954: CALL_OW 74
70958: PPUSH
70959: CALL_OW 115
// until IsDead ( un ) ;
70963: LD_VAR 0 1
70967: PPUSH
70968: CALL_OW 301
70972: IFFALSE 70920
// end ;
70974: PPOPN 1
70976: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70977: LD_EXP 43
70981: PUSH
70982: LD_EXP 83
70986: AND
70987: IFFALSE 70999
70989: GO 70991
70991: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70992: LD_STRING earthquake(getX(game), 0, 32)
70994: PPUSH
70995: CALL_OW 559
70999: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71000: LD_EXP 43
71004: PUSH
71005: LD_EXP 84
71009: AND
71010: IFFALSE 71101
71012: GO 71014
71014: DISABLE
71015: LD_INT 0
71017: PPUSH
// begin enable ;
71018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71019: LD_ADDR_VAR 0 1
71023: PUSH
71024: LD_INT 22
71026: PUSH
71027: LD_OWVAR 2
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 21
71038: PUSH
71039: LD_INT 2
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 33
71048: PUSH
71049: LD_INT 3
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: LIST
71060: PPUSH
71061: CALL_OW 69
71065: ST_TO_ADDR
// if not tmp then
71066: LD_VAR 0 1
71070: NOT
71071: IFFALSE 71075
// exit ;
71073: GO 71101
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71075: LD_VAR 0 1
71079: PUSH
71080: LD_INT 1
71082: PPUSH
71083: LD_VAR 0 1
71087: PPUSH
71088: CALL_OW 12
71092: ARRAY
71093: PPUSH
71094: LD_INT 1
71096: PPUSH
71097: CALL_OW 234
// end ;
71101: PPOPN 1
71103: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71104: LD_EXP 43
71108: PUSH
71109: LD_EXP 85
71113: AND
71114: IFFALSE 71255
71116: GO 71118
71118: DISABLE
71119: LD_INT 0
71121: PPUSH
71122: PPUSH
71123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71124: LD_ADDR_VAR 0 3
71128: PUSH
71129: LD_INT 22
71131: PUSH
71132: LD_OWVAR 2
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 25
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PPUSH
71155: CALL_OW 69
71159: ST_TO_ADDR
// if not tmp then
71160: LD_VAR 0 3
71164: NOT
71165: IFFALSE 71169
// exit ;
71167: GO 71255
// un := tmp [ rand ( 1 , tmp ) ] ;
71169: LD_ADDR_VAR 0 2
71173: PUSH
71174: LD_VAR 0 3
71178: PUSH
71179: LD_INT 1
71181: PPUSH
71182: LD_VAR 0 3
71186: PPUSH
71187: CALL_OW 12
71191: ARRAY
71192: ST_TO_ADDR
// if Crawls ( un ) then
71193: LD_VAR 0 2
71197: PPUSH
71198: CALL_OW 318
71202: IFFALSE 71213
// ComWalk ( un ) ;
71204: LD_VAR 0 2
71208: PPUSH
71209: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71213: LD_VAR 0 2
71217: PPUSH
71218: LD_INT 9
71220: PPUSH
71221: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71225: LD_INT 28
71227: PPUSH
71228: LD_OWVAR 2
71232: PPUSH
71233: LD_INT 2
71235: PPUSH
71236: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71240: LD_INT 29
71242: PPUSH
71243: LD_OWVAR 2
71247: PPUSH
71248: LD_INT 2
71250: PPUSH
71251: CALL_OW 322
// end ;
71255: PPOPN 3
71257: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71258: LD_EXP 43
71262: PUSH
71263: LD_EXP 86
71267: AND
71268: IFFALSE 71379
71270: GO 71272
71272: DISABLE
71273: LD_INT 0
71275: PPUSH
71276: PPUSH
71277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71278: LD_ADDR_VAR 0 3
71282: PUSH
71283: LD_INT 22
71285: PUSH
71286: LD_OWVAR 2
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 25
71297: PUSH
71298: LD_INT 1
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PPUSH
71309: CALL_OW 69
71313: ST_TO_ADDR
// if not tmp then
71314: LD_VAR 0 3
71318: NOT
71319: IFFALSE 71323
// exit ;
71321: GO 71379
// un := tmp [ rand ( 1 , tmp ) ] ;
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_VAR 0 3
71332: PUSH
71333: LD_INT 1
71335: PPUSH
71336: LD_VAR 0 3
71340: PPUSH
71341: CALL_OW 12
71345: ARRAY
71346: ST_TO_ADDR
// if Crawls ( un ) then
71347: LD_VAR 0 2
71351: PPUSH
71352: CALL_OW 318
71356: IFFALSE 71367
// ComWalk ( un ) ;
71358: LD_VAR 0 2
71362: PPUSH
71363: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71367: LD_VAR 0 2
71371: PPUSH
71372: LD_INT 8
71374: PPUSH
71375: CALL_OW 336
// end ;
71379: PPOPN 3
71381: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71382: LD_EXP 43
71386: PUSH
71387: LD_EXP 87
71391: AND
71392: IFFALSE 71536
71394: GO 71396
71396: DISABLE
71397: LD_INT 0
71399: PPUSH
71400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71401: LD_ADDR_VAR 0 2
71405: PUSH
71406: LD_INT 22
71408: PUSH
71409: LD_OWVAR 2
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 21
71420: PUSH
71421: LD_INT 2
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: PUSH
71431: LD_INT 34
71433: PUSH
71434: LD_INT 12
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 34
71443: PUSH
71444: LD_INT 51
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 34
71453: PUSH
71454: LD_INT 32
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: LIST
71471: PPUSH
71472: CALL_OW 69
71476: ST_TO_ADDR
// if not tmp then
71477: LD_VAR 0 2
71481: NOT
71482: IFFALSE 71486
// exit ;
71484: GO 71536
// for i in tmp do
71486: LD_ADDR_VAR 0 1
71490: PUSH
71491: LD_VAR 0 2
71495: PUSH
71496: FOR_IN
71497: IFFALSE 71534
// if GetCargo ( i , mat_artifact ) = 0 then
71499: LD_VAR 0 1
71503: PPUSH
71504: LD_INT 4
71506: PPUSH
71507: CALL_OW 289
71511: PUSH
71512: LD_INT 0
71514: EQUAL
71515: IFFALSE 71532
// SetCargo ( i , mat_siberit , 100 ) ;
71517: LD_VAR 0 1
71521: PPUSH
71522: LD_INT 3
71524: PPUSH
71525: LD_INT 100
71527: PPUSH
71528: CALL_OW 290
71532: GO 71496
71534: POP
71535: POP
// end ;
71536: PPOPN 2
71538: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71539: LD_EXP 43
71543: PUSH
71544: LD_EXP 88
71548: AND
71549: IFFALSE 71732
71551: GO 71553
71553: DISABLE
71554: LD_INT 0
71556: PPUSH
71557: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71558: LD_ADDR_VAR 0 2
71562: PUSH
71563: LD_INT 22
71565: PUSH
71566: LD_OWVAR 2
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PPUSH
71575: CALL_OW 69
71579: ST_TO_ADDR
// if not tmp then
71580: LD_VAR 0 2
71584: NOT
71585: IFFALSE 71589
// exit ;
71587: GO 71732
// for i := 1 to 2 do
71589: LD_ADDR_VAR 0 1
71593: PUSH
71594: DOUBLE
71595: LD_INT 1
71597: DEC
71598: ST_TO_ADDR
71599: LD_INT 2
71601: PUSH
71602: FOR_TO
71603: IFFALSE 71730
// begin uc_side := your_side ;
71605: LD_ADDR_OWVAR 20
71609: PUSH
71610: LD_OWVAR 2
71614: ST_TO_ADDR
// uc_nation := nation_american ;
71615: LD_ADDR_OWVAR 21
71619: PUSH
71620: LD_INT 1
71622: ST_TO_ADDR
// vc_chassis := us_morphling ;
71623: LD_ADDR_OWVAR 37
71627: PUSH
71628: LD_INT 5
71630: ST_TO_ADDR
// vc_engine := engine_siberite ;
71631: LD_ADDR_OWVAR 39
71635: PUSH
71636: LD_INT 3
71638: ST_TO_ADDR
// vc_control := control_computer ;
71639: LD_ADDR_OWVAR 38
71643: PUSH
71644: LD_INT 3
71646: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71647: LD_ADDR_OWVAR 40
71651: PUSH
71652: LD_INT 10
71654: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71655: LD_VAR 0 2
71659: PUSH
71660: LD_INT 1
71662: ARRAY
71663: PPUSH
71664: CALL_OW 310
71668: NOT
71669: IFFALSE 71716
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71671: CALL_OW 45
71675: PPUSH
71676: LD_VAR 0 2
71680: PUSH
71681: LD_INT 1
71683: ARRAY
71684: PPUSH
71685: CALL_OW 250
71689: PPUSH
71690: LD_VAR 0 2
71694: PUSH
71695: LD_INT 1
71697: ARRAY
71698: PPUSH
71699: CALL_OW 251
71703: PPUSH
71704: LD_INT 12
71706: PPUSH
71707: LD_INT 1
71709: PPUSH
71710: CALL_OW 50
71714: GO 71728
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71716: CALL_OW 45
71720: PPUSH
71721: LD_INT 1
71723: PPUSH
71724: CALL_OW 51
// end ;
71728: GO 71602
71730: POP
71731: POP
// end ;
71732: PPOPN 2
71734: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71735: LD_EXP 43
71739: PUSH
71740: LD_EXP 89
71744: AND
71745: IFFALSE 71967
71747: GO 71749
71749: DISABLE
71750: LD_INT 0
71752: PPUSH
71753: PPUSH
71754: PPUSH
71755: PPUSH
71756: PPUSH
71757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71758: LD_ADDR_VAR 0 6
71762: PUSH
71763: LD_INT 22
71765: PUSH
71766: LD_OWVAR 2
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 21
71777: PUSH
71778: LD_INT 1
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 3
71787: PUSH
71788: LD_INT 23
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: LIST
71806: PPUSH
71807: CALL_OW 69
71811: ST_TO_ADDR
// if not tmp then
71812: LD_VAR 0 6
71816: NOT
71817: IFFALSE 71821
// exit ;
71819: GO 71967
// s1 := rand ( 1 , 4 ) ;
71821: LD_ADDR_VAR 0 2
71825: PUSH
71826: LD_INT 1
71828: PPUSH
71829: LD_INT 4
71831: PPUSH
71832: CALL_OW 12
71836: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71837: LD_ADDR_VAR 0 4
71841: PUSH
71842: LD_VAR 0 6
71846: PUSH
71847: LD_INT 1
71849: ARRAY
71850: PPUSH
71851: LD_VAR 0 2
71855: PPUSH
71856: CALL_OW 259
71860: ST_TO_ADDR
// if s1 = 1 then
71861: LD_VAR 0 2
71865: PUSH
71866: LD_INT 1
71868: EQUAL
71869: IFFALSE 71889
// s2 := rand ( 2 , 4 ) else
71871: LD_ADDR_VAR 0 3
71875: PUSH
71876: LD_INT 2
71878: PPUSH
71879: LD_INT 4
71881: PPUSH
71882: CALL_OW 12
71886: ST_TO_ADDR
71887: GO 71897
// s2 := 1 ;
71889: LD_ADDR_VAR 0 3
71893: PUSH
71894: LD_INT 1
71896: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71897: LD_ADDR_VAR 0 5
71901: PUSH
71902: LD_VAR 0 6
71906: PUSH
71907: LD_INT 1
71909: ARRAY
71910: PPUSH
71911: LD_VAR 0 3
71915: PPUSH
71916: CALL_OW 259
71920: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71921: LD_VAR 0 6
71925: PUSH
71926: LD_INT 1
71928: ARRAY
71929: PPUSH
71930: LD_VAR 0 2
71934: PPUSH
71935: LD_VAR 0 5
71939: PPUSH
71940: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71944: LD_VAR 0 6
71948: PUSH
71949: LD_INT 1
71951: ARRAY
71952: PPUSH
71953: LD_VAR 0 3
71957: PPUSH
71958: LD_VAR 0 4
71962: PPUSH
71963: CALL_OW 237
// end ;
71967: PPOPN 6
71969: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71970: LD_EXP 43
71974: PUSH
71975: LD_EXP 90
71979: AND
71980: IFFALSE 72059
71982: GO 71984
71984: DISABLE
71985: LD_INT 0
71987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71988: LD_ADDR_VAR 0 1
71992: PUSH
71993: LD_INT 22
71995: PUSH
71996: LD_OWVAR 2
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 30
72007: PUSH
72008: LD_INT 3
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PPUSH
72019: CALL_OW 69
72023: ST_TO_ADDR
// if not tmp then
72024: LD_VAR 0 1
72028: NOT
72029: IFFALSE 72033
// exit ;
72031: GO 72059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72033: LD_VAR 0 1
72037: PUSH
72038: LD_INT 1
72040: PPUSH
72041: LD_VAR 0 1
72045: PPUSH
72046: CALL_OW 12
72050: ARRAY
72051: PPUSH
72052: LD_INT 1
72054: PPUSH
72055: CALL_OW 234
// end ;
72059: PPOPN 1
72061: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72062: LD_EXP 43
72066: PUSH
72067: LD_EXP 91
72071: AND
72072: IFFALSE 72184
72074: GO 72076
72076: DISABLE
72077: LD_INT 0
72079: PPUSH
72080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72081: LD_ADDR_VAR 0 2
72085: PUSH
72086: LD_INT 22
72088: PUSH
72089: LD_OWVAR 2
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 2
72100: PUSH
72101: LD_INT 30
72103: PUSH
72104: LD_INT 27
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 30
72113: PUSH
72114: LD_INT 26
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 30
72123: PUSH
72124: LD_INT 28
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PPUSH
72141: CALL_OW 69
72145: ST_TO_ADDR
// if not tmp then
72146: LD_VAR 0 2
72150: NOT
72151: IFFALSE 72155
// exit ;
72153: GO 72184
// for i in tmp do
72155: LD_ADDR_VAR 0 1
72159: PUSH
72160: LD_VAR 0 2
72164: PUSH
72165: FOR_IN
72166: IFFALSE 72182
// SetLives ( i , 1 ) ;
72168: LD_VAR 0 1
72172: PPUSH
72173: LD_INT 1
72175: PPUSH
72176: CALL_OW 234
72180: GO 72165
72182: POP
72183: POP
// end ;
72184: PPOPN 2
72186: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72187: LD_EXP 43
72191: PUSH
72192: LD_EXP 92
72196: AND
72197: IFFALSE 72484
72199: GO 72201
72201: DISABLE
72202: LD_INT 0
72204: PPUSH
72205: PPUSH
72206: PPUSH
// begin i := rand ( 1 , 7 ) ;
72207: LD_ADDR_VAR 0 1
72211: PUSH
72212: LD_INT 1
72214: PPUSH
72215: LD_INT 7
72217: PPUSH
72218: CALL_OW 12
72222: ST_TO_ADDR
// case i of 1 :
72223: LD_VAR 0 1
72227: PUSH
72228: LD_INT 1
72230: DOUBLE
72231: EQUAL
72232: IFTRUE 72236
72234: GO 72246
72236: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72237: LD_STRING earthquake(getX(game), 0, 32)
72239: PPUSH
72240: CALL_OW 559
72244: GO 72484
72246: LD_INT 2
72248: DOUBLE
72249: EQUAL
72250: IFTRUE 72254
72252: GO 72268
72254: POP
// begin ToLua ( displayStucuk(); ) ;
72255: LD_STRING displayStucuk();
72257: PPUSH
72258: CALL_OW 559
// ResetFog ;
72262: CALL_OW 335
// end ; 3 :
72266: GO 72484
72268: LD_INT 3
72270: DOUBLE
72271: EQUAL
72272: IFTRUE 72276
72274: GO 72380
72276: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72277: LD_ADDR_VAR 0 2
72281: PUSH
72282: LD_INT 22
72284: PUSH
72285: LD_OWVAR 2
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 25
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PPUSH
72308: CALL_OW 69
72312: ST_TO_ADDR
// if not tmp then
72313: LD_VAR 0 2
72317: NOT
72318: IFFALSE 72322
// exit ;
72320: GO 72484
// un := tmp [ rand ( 1 , tmp ) ] ;
72322: LD_ADDR_VAR 0 3
72326: PUSH
72327: LD_VAR 0 2
72331: PUSH
72332: LD_INT 1
72334: PPUSH
72335: LD_VAR 0 2
72339: PPUSH
72340: CALL_OW 12
72344: ARRAY
72345: ST_TO_ADDR
// if Crawls ( un ) then
72346: LD_VAR 0 3
72350: PPUSH
72351: CALL_OW 318
72355: IFFALSE 72366
// ComWalk ( un ) ;
72357: LD_VAR 0 3
72361: PPUSH
72362: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72366: LD_VAR 0 3
72370: PPUSH
72371: LD_INT 8
72373: PPUSH
72374: CALL_OW 336
// end ; 4 :
72378: GO 72484
72380: LD_INT 4
72382: DOUBLE
72383: EQUAL
72384: IFTRUE 72388
72386: GO 72462
72388: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72389: LD_ADDR_VAR 0 2
72393: PUSH
72394: LD_INT 22
72396: PUSH
72397: LD_OWVAR 2
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 30
72408: PUSH
72409: LD_INT 29
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PPUSH
72420: CALL_OW 69
72424: ST_TO_ADDR
// if not tmp then
72425: LD_VAR 0 2
72429: NOT
72430: IFFALSE 72434
// exit ;
72432: GO 72484
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72434: LD_VAR 0 2
72438: PUSH
72439: LD_INT 1
72441: ARRAY
72442: PPUSH
72443: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72447: LD_VAR 0 2
72451: PUSH
72452: LD_INT 1
72454: ARRAY
72455: PPUSH
72456: CALL_OW 65
// end ; 5 .. 7 :
72460: GO 72484
72462: LD_INT 5
72464: DOUBLE
72465: GREATEREQUAL
72466: IFFALSE 72474
72468: LD_INT 7
72470: DOUBLE
72471: LESSEQUAL
72472: IFTRUE 72476
72474: GO 72483
72476: POP
// StreamSibBomb ; end ;
72477: CALL 68721 0 0
72481: GO 72484
72483: POP
// end ;
72484: PPOPN 3
72486: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72487: LD_EXP 43
72491: PUSH
72492: LD_EXP 93
72496: AND
72497: IFFALSE 72653
72499: GO 72501
72501: DISABLE
72502: LD_INT 0
72504: PPUSH
72505: PPUSH
72506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72507: LD_ADDR_VAR 0 2
72511: PUSH
72512: LD_INT 81
72514: PUSH
72515: LD_OWVAR 2
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: PUSH
72527: LD_INT 21
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 21
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: LIST
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PPUSH
72556: CALL_OW 69
72560: ST_TO_ADDR
// if not tmp then
72561: LD_VAR 0 2
72565: NOT
72566: IFFALSE 72570
// exit ;
72568: GO 72653
// p := 0 ;
72570: LD_ADDR_VAR 0 3
72574: PUSH
72575: LD_INT 0
72577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72578: LD_INT 35
72580: PPUSH
72581: CALL_OW 67
// p := p + 1 ;
72585: LD_ADDR_VAR 0 3
72589: PUSH
72590: LD_VAR 0 3
72594: PUSH
72595: LD_INT 1
72597: PLUS
72598: ST_TO_ADDR
// for i in tmp do
72599: LD_ADDR_VAR 0 1
72603: PUSH
72604: LD_VAR 0 2
72608: PUSH
72609: FOR_IN
72610: IFFALSE 72641
// if GetLives ( i ) < 1000 then
72612: LD_VAR 0 1
72616: PPUSH
72617: CALL_OW 256
72621: PUSH
72622: LD_INT 1000
72624: LESS
72625: IFFALSE 72639
// SetLives ( i , 1000 ) ;
72627: LD_VAR 0 1
72631: PPUSH
72632: LD_INT 1000
72634: PPUSH
72635: CALL_OW 234
72639: GO 72609
72641: POP
72642: POP
// until p > 20 ;
72643: LD_VAR 0 3
72647: PUSH
72648: LD_INT 20
72650: GREATER
72651: IFFALSE 72578
// end ;
72653: PPOPN 3
72655: END
// every 0 0$1 trigger StreamModeActive and sTime do
72656: LD_EXP 43
72660: PUSH
72661: LD_EXP 94
72665: AND
72666: IFFALSE 72701
72668: GO 72670
72670: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72671: LD_INT 28
72673: PPUSH
72674: LD_OWVAR 2
72678: PPUSH
72679: LD_INT 2
72681: PPUSH
72682: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72686: LD_INT 30
72688: PPUSH
72689: LD_OWVAR 2
72693: PPUSH
72694: LD_INT 2
72696: PPUSH
72697: CALL_OW 322
// end ;
72701: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72702: LD_EXP 43
72706: PUSH
72707: LD_EXP 95
72711: AND
72712: IFFALSE 72833
72714: GO 72716
72716: DISABLE
72717: LD_INT 0
72719: PPUSH
72720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72721: LD_ADDR_VAR 0 2
72725: PUSH
72726: LD_INT 22
72728: PUSH
72729: LD_OWVAR 2
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 21
72740: PUSH
72741: LD_INT 1
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: LD_INT 23
72753: PUSH
72754: LD_INT 0
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: LIST
72769: PPUSH
72770: CALL_OW 69
72774: ST_TO_ADDR
// if not tmp then
72775: LD_VAR 0 2
72779: NOT
72780: IFFALSE 72784
// exit ;
72782: GO 72833
// for i in tmp do
72784: LD_ADDR_VAR 0 1
72788: PUSH
72789: LD_VAR 0 2
72793: PUSH
72794: FOR_IN
72795: IFFALSE 72831
// begin if Crawls ( i ) then
72797: LD_VAR 0 1
72801: PPUSH
72802: CALL_OW 318
72806: IFFALSE 72817
// ComWalk ( i ) ;
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 138
// SetClass ( i , 2 ) ;
72817: LD_VAR 0 1
72821: PPUSH
72822: LD_INT 2
72824: PPUSH
72825: CALL_OW 336
// end ;
72829: GO 72794
72831: POP
72832: POP
// end ;
72833: PPOPN 2
72835: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72836: LD_EXP 43
72840: PUSH
72841: LD_EXP 96
72845: AND
72846: IFFALSE 73134
72848: GO 72850
72850: DISABLE
72851: LD_INT 0
72853: PPUSH
72854: PPUSH
72855: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72856: LD_OWVAR 2
72860: PPUSH
72861: LD_INT 9
72863: PPUSH
72864: LD_INT 1
72866: PPUSH
72867: LD_INT 1
72869: PPUSH
72870: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72874: LD_INT 9
72876: PPUSH
72877: LD_OWVAR 2
72881: PPUSH
72882: CALL_OW 343
// uc_side := 9 ;
72886: LD_ADDR_OWVAR 20
72890: PUSH
72891: LD_INT 9
72893: ST_TO_ADDR
// uc_nation := 2 ;
72894: LD_ADDR_OWVAR 21
72898: PUSH
72899: LD_INT 2
72901: ST_TO_ADDR
// hc_name := Dark Warrior ;
72902: LD_ADDR_OWVAR 26
72906: PUSH
72907: LD_STRING Dark Warrior
72909: ST_TO_ADDR
// hc_gallery :=  ;
72910: LD_ADDR_OWVAR 33
72914: PUSH
72915: LD_STRING 
72917: ST_TO_ADDR
// hc_noskilllimit := true ;
72918: LD_ADDR_OWVAR 76
72922: PUSH
72923: LD_INT 1
72925: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72926: LD_ADDR_OWVAR 31
72930: PUSH
72931: LD_INT 30
72933: PUSH
72934: LD_INT 30
72936: PUSH
72937: LD_INT 30
72939: PUSH
72940: LD_INT 30
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: ST_TO_ADDR
// un := CreateHuman ;
72949: LD_ADDR_VAR 0 3
72953: PUSH
72954: CALL_OW 44
72958: ST_TO_ADDR
// hc_noskilllimit := false ;
72959: LD_ADDR_OWVAR 76
72963: PUSH
72964: LD_INT 0
72966: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72967: LD_VAR 0 3
72971: PPUSH
72972: LD_INT 1
72974: PPUSH
72975: CALL_OW 51
// ToLua ( playRanger() ) ;
72979: LD_STRING playRanger()
72981: PPUSH
72982: CALL_OW 559
// p := 0 ;
72986: LD_ADDR_VAR 0 2
72990: PUSH
72991: LD_INT 0
72993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72994: LD_INT 35
72996: PPUSH
72997: CALL_OW 67
// p := p + 1 ;
73001: LD_ADDR_VAR 0 2
73005: PUSH
73006: LD_VAR 0 2
73010: PUSH
73011: LD_INT 1
73013: PLUS
73014: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73015: LD_VAR 0 3
73019: PPUSH
73020: CALL_OW 256
73024: PUSH
73025: LD_INT 1000
73027: LESS
73028: IFFALSE 73042
// SetLives ( un , 1000 ) ;
73030: LD_VAR 0 3
73034: PPUSH
73035: LD_INT 1000
73037: PPUSH
73038: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73042: LD_VAR 0 3
73046: PPUSH
73047: LD_INT 81
73049: PUSH
73050: LD_OWVAR 2
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 91
73061: PUSH
73062: LD_VAR 0 3
73066: PUSH
73067: LD_INT 30
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PPUSH
73079: CALL_OW 69
73083: PPUSH
73084: LD_VAR 0 3
73088: PPUSH
73089: CALL_OW 74
73093: PPUSH
73094: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73098: LD_VAR 0 2
73102: PUSH
73103: LD_INT 80
73105: GREATER
73106: PUSH
73107: LD_VAR 0 3
73111: PPUSH
73112: CALL_OW 301
73116: OR
73117: IFFALSE 72994
// if un then
73119: LD_VAR 0 3
73123: IFFALSE 73134
// RemoveUnit ( un ) ;
73125: LD_VAR 0 3
73129: PPUSH
73130: CALL_OW 64
// end ;
73134: PPOPN 3
73136: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73137: LD_EXP 97
73141: IFFALSE 73257
73143: GO 73145
73145: DISABLE
73146: LD_INT 0
73148: PPUSH
73149: PPUSH
73150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73151: LD_ADDR_VAR 0 2
73155: PUSH
73156: LD_INT 81
73158: PUSH
73159: LD_OWVAR 2
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 21
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PPUSH
73182: CALL_OW 69
73186: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73187: LD_STRING playComputer()
73189: PPUSH
73190: CALL_OW 559
// if not tmp then
73194: LD_VAR 0 2
73198: NOT
73199: IFFALSE 73203
// exit ;
73201: GO 73257
// for i in tmp do
73203: LD_ADDR_VAR 0 1
73207: PUSH
73208: LD_VAR 0 2
73212: PUSH
73213: FOR_IN
73214: IFFALSE 73255
// for j := 1 to 4 do
73216: LD_ADDR_VAR 0 3
73220: PUSH
73221: DOUBLE
73222: LD_INT 1
73224: DEC
73225: ST_TO_ADDR
73226: LD_INT 4
73228: PUSH
73229: FOR_TO
73230: IFFALSE 73251
// SetSkill ( i , j , 10 ) ;
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_VAR 0 3
73241: PPUSH
73242: LD_INT 10
73244: PPUSH
73245: CALL_OW 237
73249: GO 73229
73251: POP
73252: POP
73253: GO 73213
73255: POP
73256: POP
// end ;
73257: PPOPN 3
73259: END
// every 0 0$1 trigger s30 do var i , tmp ;
73260: LD_EXP 98
73264: IFFALSE 73333
73266: GO 73268
73268: DISABLE
73269: LD_INT 0
73271: PPUSH
73272: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73273: LD_ADDR_VAR 0 2
73277: PUSH
73278: LD_INT 22
73280: PUSH
73281: LD_OWVAR 2
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PPUSH
73290: CALL_OW 69
73294: ST_TO_ADDR
// if not tmp then
73295: LD_VAR 0 2
73299: NOT
73300: IFFALSE 73304
// exit ;
73302: GO 73333
// for i in tmp do
73304: LD_ADDR_VAR 0 1
73308: PUSH
73309: LD_VAR 0 2
73313: PUSH
73314: FOR_IN
73315: IFFALSE 73331
// SetLives ( i , 300 ) ;
73317: LD_VAR 0 1
73321: PPUSH
73322: LD_INT 300
73324: PPUSH
73325: CALL_OW 234
73329: GO 73314
73331: POP
73332: POP
// end ;
73333: PPOPN 2
73335: END
// every 0 0$1 trigger s60 do var i , tmp ;
73336: LD_EXP 99
73340: IFFALSE 73409
73342: GO 73344
73344: DISABLE
73345: LD_INT 0
73347: PPUSH
73348: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73349: LD_ADDR_VAR 0 2
73353: PUSH
73354: LD_INT 22
73356: PUSH
73357: LD_OWVAR 2
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PPUSH
73366: CALL_OW 69
73370: ST_TO_ADDR
// if not tmp then
73371: LD_VAR 0 2
73375: NOT
73376: IFFALSE 73380
// exit ;
73378: GO 73409
// for i in tmp do
73380: LD_ADDR_VAR 0 1
73384: PUSH
73385: LD_VAR 0 2
73389: PUSH
73390: FOR_IN
73391: IFFALSE 73407
// SetLives ( i , 600 ) ;
73393: LD_VAR 0 1
73397: PPUSH
73398: LD_INT 600
73400: PPUSH
73401: CALL_OW 234
73405: GO 73390
73407: POP
73408: POP
// end ;
73409: PPOPN 2
73411: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73412: LD_INT 0
73414: PPUSH
// case cmd of 301 :
73415: LD_VAR 0 1
73419: PUSH
73420: LD_INT 301
73422: DOUBLE
73423: EQUAL
73424: IFTRUE 73428
73426: GO 73460
73428: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73429: LD_VAR 0 6
73433: PPUSH
73434: LD_VAR 0 7
73438: PPUSH
73439: LD_VAR 0 8
73443: PPUSH
73444: LD_VAR 0 4
73448: PPUSH
73449: LD_VAR 0 5
73453: PPUSH
73454: CALL 74661 0 5
73458: GO 73581
73460: LD_INT 302
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73468
73466: GO 73505
73468: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73469: LD_VAR 0 6
73473: PPUSH
73474: LD_VAR 0 7
73478: PPUSH
73479: LD_VAR 0 8
73483: PPUSH
73484: LD_VAR 0 9
73488: PPUSH
73489: LD_VAR 0 4
73493: PPUSH
73494: LD_VAR 0 5
73498: PPUSH
73499: CALL 74752 0 6
73503: GO 73581
73505: LD_INT 303
73507: DOUBLE
73508: EQUAL
73509: IFTRUE 73513
73511: GO 73550
73513: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73514: LD_VAR 0 6
73518: PPUSH
73519: LD_VAR 0 7
73523: PPUSH
73524: LD_VAR 0 8
73528: PPUSH
73529: LD_VAR 0 9
73533: PPUSH
73534: LD_VAR 0 4
73538: PPUSH
73539: LD_VAR 0 5
73543: PPUSH
73544: CALL 73586 0 6
73548: GO 73581
73550: LD_INT 304
73552: DOUBLE
73553: EQUAL
73554: IFTRUE 73558
73556: GO 73580
73558: POP
// hHackTeleport ( unit , x , y ) ; end ;
73559: LD_VAR 0 2
73563: PPUSH
73564: LD_VAR 0 4
73568: PPUSH
73569: LD_VAR 0 5
73573: PPUSH
73574: CALL 75345 0 3
73578: GO 73581
73580: POP
// end ;
73581: LD_VAR 0 12
73585: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73586: LD_INT 0
73588: PPUSH
73589: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73590: LD_VAR 0 1
73594: PUSH
73595: LD_INT 1
73597: LESS
73598: PUSH
73599: LD_VAR 0 1
73603: PUSH
73604: LD_INT 3
73606: GREATER
73607: OR
73608: PUSH
73609: LD_VAR 0 5
73613: PPUSH
73614: LD_VAR 0 6
73618: PPUSH
73619: CALL_OW 428
73623: OR
73624: IFFALSE 73628
// exit ;
73626: GO 74348
// uc_side := your_side ;
73628: LD_ADDR_OWVAR 20
73632: PUSH
73633: LD_OWVAR 2
73637: ST_TO_ADDR
// uc_nation := nation ;
73638: LD_ADDR_OWVAR 21
73642: PUSH
73643: LD_VAR 0 1
73647: ST_TO_ADDR
// bc_level = 1 ;
73648: LD_ADDR_OWVAR 43
73652: PUSH
73653: LD_INT 1
73655: ST_TO_ADDR
// case btype of 1 :
73656: LD_VAR 0 2
73660: PUSH
73661: LD_INT 1
73663: DOUBLE
73664: EQUAL
73665: IFTRUE 73669
73667: GO 73680
73669: POP
// bc_type := b_depot ; 2 :
73670: LD_ADDR_OWVAR 42
73674: PUSH
73675: LD_INT 0
73677: ST_TO_ADDR
73678: GO 74292
73680: LD_INT 2
73682: DOUBLE
73683: EQUAL
73684: IFTRUE 73688
73686: GO 73699
73688: POP
// bc_type := b_warehouse ; 3 :
73689: LD_ADDR_OWVAR 42
73693: PUSH
73694: LD_INT 1
73696: ST_TO_ADDR
73697: GO 74292
73699: LD_INT 3
73701: DOUBLE
73702: EQUAL
73703: IFTRUE 73707
73705: GO 73718
73707: POP
// bc_type := b_lab ; 4 .. 9 :
73708: LD_ADDR_OWVAR 42
73712: PUSH
73713: LD_INT 6
73715: ST_TO_ADDR
73716: GO 74292
73718: LD_INT 4
73720: DOUBLE
73721: GREATEREQUAL
73722: IFFALSE 73730
73724: LD_INT 9
73726: DOUBLE
73727: LESSEQUAL
73728: IFTRUE 73732
73730: GO 73784
73732: POP
// begin bc_type := b_lab_half ;
73733: LD_ADDR_OWVAR 42
73737: PUSH
73738: LD_INT 7
73740: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73741: LD_ADDR_OWVAR 44
73745: PUSH
73746: LD_INT 10
73748: PUSH
73749: LD_INT 11
73751: PUSH
73752: LD_INT 12
73754: PUSH
73755: LD_INT 15
73757: PUSH
73758: LD_INT 14
73760: PUSH
73761: LD_INT 13
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: PUSH
73772: LD_VAR 0 2
73776: PUSH
73777: LD_INT 3
73779: MINUS
73780: ARRAY
73781: ST_TO_ADDR
// end ; 10 .. 13 :
73782: GO 74292
73784: LD_INT 10
73786: DOUBLE
73787: GREATEREQUAL
73788: IFFALSE 73796
73790: LD_INT 13
73792: DOUBLE
73793: LESSEQUAL
73794: IFTRUE 73798
73796: GO 73875
73798: POP
// begin bc_type := b_lab_full ;
73799: LD_ADDR_OWVAR 42
73803: PUSH
73804: LD_INT 8
73806: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73807: LD_ADDR_OWVAR 44
73811: PUSH
73812: LD_INT 10
73814: PUSH
73815: LD_INT 12
73817: PUSH
73818: LD_INT 14
73820: PUSH
73821: LD_INT 13
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: PUSH
73830: LD_VAR 0 2
73834: PUSH
73835: LD_INT 9
73837: MINUS
73838: ARRAY
73839: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73840: LD_ADDR_OWVAR 45
73844: PUSH
73845: LD_INT 11
73847: PUSH
73848: LD_INT 15
73850: PUSH
73851: LD_INT 12
73853: PUSH
73854: LD_INT 15
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: PUSH
73863: LD_VAR 0 2
73867: PUSH
73868: LD_INT 9
73870: MINUS
73871: ARRAY
73872: ST_TO_ADDR
// end ; 14 :
73873: GO 74292
73875: LD_INT 14
73877: DOUBLE
73878: EQUAL
73879: IFTRUE 73883
73881: GO 73894
73883: POP
// bc_type := b_workshop ; 15 :
73884: LD_ADDR_OWVAR 42
73888: PUSH
73889: LD_INT 2
73891: ST_TO_ADDR
73892: GO 74292
73894: LD_INT 15
73896: DOUBLE
73897: EQUAL
73898: IFTRUE 73902
73900: GO 73913
73902: POP
// bc_type := b_factory ; 16 :
73903: LD_ADDR_OWVAR 42
73907: PUSH
73908: LD_INT 3
73910: ST_TO_ADDR
73911: GO 74292
73913: LD_INT 16
73915: DOUBLE
73916: EQUAL
73917: IFTRUE 73921
73919: GO 73932
73921: POP
// bc_type := b_ext_gun ; 17 :
73922: LD_ADDR_OWVAR 42
73926: PUSH
73927: LD_INT 17
73929: ST_TO_ADDR
73930: GO 74292
73932: LD_INT 17
73934: DOUBLE
73935: EQUAL
73936: IFTRUE 73940
73938: GO 73968
73940: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73941: LD_ADDR_OWVAR 42
73945: PUSH
73946: LD_INT 19
73948: PUSH
73949: LD_INT 23
73951: PUSH
73952: LD_INT 19
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: LIST
73959: PUSH
73960: LD_VAR 0 1
73964: ARRAY
73965: ST_TO_ADDR
73966: GO 74292
73968: LD_INT 18
73970: DOUBLE
73971: EQUAL
73972: IFTRUE 73976
73974: GO 73987
73976: POP
// bc_type := b_ext_radar ; 19 :
73977: LD_ADDR_OWVAR 42
73981: PUSH
73982: LD_INT 20
73984: ST_TO_ADDR
73985: GO 74292
73987: LD_INT 19
73989: DOUBLE
73990: EQUAL
73991: IFTRUE 73995
73993: GO 74006
73995: POP
// bc_type := b_ext_radio ; 20 :
73996: LD_ADDR_OWVAR 42
74000: PUSH
74001: LD_INT 22
74003: ST_TO_ADDR
74004: GO 74292
74006: LD_INT 20
74008: DOUBLE
74009: EQUAL
74010: IFTRUE 74014
74012: GO 74025
74014: POP
// bc_type := b_ext_siberium ; 21 :
74015: LD_ADDR_OWVAR 42
74019: PUSH
74020: LD_INT 21
74022: ST_TO_ADDR
74023: GO 74292
74025: LD_INT 21
74027: DOUBLE
74028: EQUAL
74029: IFTRUE 74033
74031: GO 74044
74033: POP
// bc_type := b_ext_computer ; 22 :
74034: LD_ADDR_OWVAR 42
74038: PUSH
74039: LD_INT 24
74041: ST_TO_ADDR
74042: GO 74292
74044: LD_INT 22
74046: DOUBLE
74047: EQUAL
74048: IFTRUE 74052
74050: GO 74063
74052: POP
// bc_type := b_ext_track ; 23 :
74053: LD_ADDR_OWVAR 42
74057: PUSH
74058: LD_INT 16
74060: ST_TO_ADDR
74061: GO 74292
74063: LD_INT 23
74065: DOUBLE
74066: EQUAL
74067: IFTRUE 74071
74069: GO 74082
74071: POP
// bc_type := b_ext_laser ; 24 :
74072: LD_ADDR_OWVAR 42
74076: PUSH
74077: LD_INT 25
74079: ST_TO_ADDR
74080: GO 74292
74082: LD_INT 24
74084: DOUBLE
74085: EQUAL
74086: IFTRUE 74090
74088: GO 74101
74090: POP
// bc_type := b_control_tower ; 25 :
74091: LD_ADDR_OWVAR 42
74095: PUSH
74096: LD_INT 36
74098: ST_TO_ADDR
74099: GO 74292
74101: LD_INT 25
74103: DOUBLE
74104: EQUAL
74105: IFTRUE 74109
74107: GO 74120
74109: POP
// bc_type := b_breastwork ; 26 :
74110: LD_ADDR_OWVAR 42
74114: PUSH
74115: LD_INT 31
74117: ST_TO_ADDR
74118: GO 74292
74120: LD_INT 26
74122: DOUBLE
74123: EQUAL
74124: IFTRUE 74128
74126: GO 74139
74128: POP
// bc_type := b_bunker ; 27 :
74129: LD_ADDR_OWVAR 42
74133: PUSH
74134: LD_INT 32
74136: ST_TO_ADDR
74137: GO 74292
74139: LD_INT 27
74141: DOUBLE
74142: EQUAL
74143: IFTRUE 74147
74145: GO 74158
74147: POP
// bc_type := b_turret ; 28 :
74148: LD_ADDR_OWVAR 42
74152: PUSH
74153: LD_INT 33
74155: ST_TO_ADDR
74156: GO 74292
74158: LD_INT 28
74160: DOUBLE
74161: EQUAL
74162: IFTRUE 74166
74164: GO 74177
74166: POP
// bc_type := b_armoury ; 29 :
74167: LD_ADDR_OWVAR 42
74171: PUSH
74172: LD_INT 4
74174: ST_TO_ADDR
74175: GO 74292
74177: LD_INT 29
74179: DOUBLE
74180: EQUAL
74181: IFTRUE 74185
74183: GO 74196
74185: POP
// bc_type := b_barracks ; 30 :
74186: LD_ADDR_OWVAR 42
74190: PUSH
74191: LD_INT 5
74193: ST_TO_ADDR
74194: GO 74292
74196: LD_INT 30
74198: DOUBLE
74199: EQUAL
74200: IFTRUE 74204
74202: GO 74215
74204: POP
// bc_type := b_solar_power ; 31 :
74205: LD_ADDR_OWVAR 42
74209: PUSH
74210: LD_INT 27
74212: ST_TO_ADDR
74213: GO 74292
74215: LD_INT 31
74217: DOUBLE
74218: EQUAL
74219: IFTRUE 74223
74221: GO 74234
74223: POP
// bc_type := b_oil_power ; 32 :
74224: LD_ADDR_OWVAR 42
74228: PUSH
74229: LD_INT 26
74231: ST_TO_ADDR
74232: GO 74292
74234: LD_INT 32
74236: DOUBLE
74237: EQUAL
74238: IFTRUE 74242
74240: GO 74253
74242: POP
// bc_type := b_siberite_power ; 33 :
74243: LD_ADDR_OWVAR 42
74247: PUSH
74248: LD_INT 28
74250: ST_TO_ADDR
74251: GO 74292
74253: LD_INT 33
74255: DOUBLE
74256: EQUAL
74257: IFTRUE 74261
74259: GO 74272
74261: POP
// bc_type := b_oil_mine ; 34 :
74262: LD_ADDR_OWVAR 42
74266: PUSH
74267: LD_INT 29
74269: ST_TO_ADDR
74270: GO 74292
74272: LD_INT 34
74274: DOUBLE
74275: EQUAL
74276: IFTRUE 74280
74278: GO 74291
74280: POP
// bc_type := b_siberite_mine ; end ;
74281: LD_ADDR_OWVAR 42
74285: PUSH
74286: LD_INT 30
74288: ST_TO_ADDR
74289: GO 74292
74291: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74292: LD_ADDR_VAR 0 8
74296: PUSH
74297: LD_VAR 0 5
74301: PPUSH
74302: LD_VAR 0 6
74306: PPUSH
74307: LD_VAR 0 3
74311: PPUSH
74312: CALL_OW 47
74316: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74317: LD_OWVAR 42
74321: PUSH
74322: LD_INT 32
74324: PUSH
74325: LD_INT 33
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: IN
74332: IFFALSE 74348
// PlaceWeaponTurret ( b , weapon ) ;
74334: LD_VAR 0 8
74338: PPUSH
74339: LD_VAR 0 4
74343: PPUSH
74344: CALL_OW 431
// end ;
74348: LD_VAR 0 7
74352: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74353: LD_INT 0
74355: PPUSH
74356: PPUSH
74357: PPUSH
74358: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74359: LD_ADDR_VAR 0 4
74363: PUSH
74364: LD_INT 22
74366: PUSH
74367: LD_OWVAR 2
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 2
74378: PUSH
74379: LD_INT 30
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 30
74391: PUSH
74392: LD_INT 1
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PPUSH
74408: CALL_OW 69
74412: ST_TO_ADDR
// if not tmp then
74413: LD_VAR 0 4
74417: NOT
74418: IFFALSE 74422
// exit ;
74420: GO 74481
// for i in tmp do
74422: LD_ADDR_VAR 0 2
74426: PUSH
74427: LD_VAR 0 4
74431: PUSH
74432: FOR_IN
74433: IFFALSE 74479
// for j = 1 to 3 do
74435: LD_ADDR_VAR 0 3
74439: PUSH
74440: DOUBLE
74441: LD_INT 1
74443: DEC
74444: ST_TO_ADDR
74445: LD_INT 3
74447: PUSH
74448: FOR_TO
74449: IFFALSE 74475
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74451: LD_VAR 0 2
74455: PPUSH
74456: CALL_OW 274
74460: PPUSH
74461: LD_VAR 0 3
74465: PPUSH
74466: LD_INT 99999
74468: PPUSH
74469: CALL_OW 277
74473: GO 74448
74475: POP
74476: POP
74477: GO 74432
74479: POP
74480: POP
// end ;
74481: LD_VAR 0 1
74485: RET
// export function hHackSetLevel10 ; var i , j ; begin
74486: LD_INT 0
74488: PPUSH
74489: PPUSH
74490: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74491: LD_ADDR_VAR 0 2
74495: PUSH
74496: LD_INT 21
74498: PUSH
74499: LD_INT 1
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PPUSH
74506: CALL_OW 69
74510: PUSH
74511: FOR_IN
74512: IFFALSE 74564
// if IsSelected ( i ) then
74514: LD_VAR 0 2
74518: PPUSH
74519: CALL_OW 306
74523: IFFALSE 74562
// begin for j := 1 to 4 do
74525: LD_ADDR_VAR 0 3
74529: PUSH
74530: DOUBLE
74531: LD_INT 1
74533: DEC
74534: ST_TO_ADDR
74535: LD_INT 4
74537: PUSH
74538: FOR_TO
74539: IFFALSE 74560
// SetSkill ( i , j , 10 ) ;
74541: LD_VAR 0 2
74545: PPUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: LD_INT 10
74553: PPUSH
74554: CALL_OW 237
74558: GO 74538
74560: POP
74561: POP
// end ;
74562: GO 74511
74564: POP
74565: POP
// end ;
74566: LD_VAR 0 1
74570: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74571: LD_INT 0
74573: PPUSH
74574: PPUSH
74575: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74576: LD_ADDR_VAR 0 2
74580: PUSH
74581: LD_INT 22
74583: PUSH
74584: LD_OWVAR 2
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 21
74595: PUSH
74596: LD_INT 1
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PPUSH
74607: CALL_OW 69
74611: PUSH
74612: FOR_IN
74613: IFFALSE 74654
// begin for j := 1 to 4 do
74615: LD_ADDR_VAR 0 3
74619: PUSH
74620: DOUBLE
74621: LD_INT 1
74623: DEC
74624: ST_TO_ADDR
74625: LD_INT 4
74627: PUSH
74628: FOR_TO
74629: IFFALSE 74650
// SetSkill ( i , j , 10 ) ;
74631: LD_VAR 0 2
74635: PPUSH
74636: LD_VAR 0 3
74640: PPUSH
74641: LD_INT 10
74643: PPUSH
74644: CALL_OW 237
74648: GO 74628
74650: POP
74651: POP
// end ;
74652: GO 74612
74654: POP
74655: POP
// end ;
74656: LD_VAR 0 1
74660: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74661: LD_INT 0
74663: PPUSH
// uc_side := your_side ;
74664: LD_ADDR_OWVAR 20
74668: PUSH
74669: LD_OWVAR 2
74673: ST_TO_ADDR
// uc_nation := nation ;
74674: LD_ADDR_OWVAR 21
74678: PUSH
74679: LD_VAR 0 1
74683: ST_TO_ADDR
// InitHc ;
74684: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74688: LD_INT 0
74690: PPUSH
74691: LD_VAR 0 2
74695: PPUSH
74696: LD_VAR 0 3
74700: PPUSH
74701: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74705: LD_VAR 0 4
74709: PPUSH
74710: LD_VAR 0 5
74714: PPUSH
74715: CALL_OW 428
74719: PUSH
74720: LD_INT 0
74722: EQUAL
74723: IFFALSE 74747
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74725: CALL_OW 44
74729: PPUSH
74730: LD_VAR 0 4
74734: PPUSH
74735: LD_VAR 0 5
74739: PPUSH
74740: LD_INT 1
74742: PPUSH
74743: CALL_OW 48
// end ;
74747: LD_VAR 0 6
74751: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74752: LD_INT 0
74754: PPUSH
74755: PPUSH
// uc_side := your_side ;
74756: LD_ADDR_OWVAR 20
74760: PUSH
74761: LD_OWVAR 2
74765: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74766: LD_VAR 0 1
74770: PUSH
74771: LD_INT 1
74773: PUSH
74774: LD_INT 2
74776: PUSH
74777: LD_INT 3
74779: PUSH
74780: LD_INT 4
74782: PUSH
74783: LD_INT 5
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: IN
74793: IFFALSE 74805
// uc_nation := nation_american else
74795: LD_ADDR_OWVAR 21
74799: PUSH
74800: LD_INT 1
74802: ST_TO_ADDR
74803: GO 74848
// if chassis in [ 11 , 12 , 13 , 14 ] then
74805: LD_VAR 0 1
74809: PUSH
74810: LD_INT 11
74812: PUSH
74813: LD_INT 12
74815: PUSH
74816: LD_INT 13
74818: PUSH
74819: LD_INT 14
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: IN
74828: IFFALSE 74840
// uc_nation := nation_arabian else
74830: LD_ADDR_OWVAR 21
74834: PUSH
74835: LD_INT 2
74837: ST_TO_ADDR
74838: GO 74848
// uc_nation := nation_russian ;
74840: LD_ADDR_OWVAR 21
74844: PUSH
74845: LD_INT 3
74847: ST_TO_ADDR
// vc_chassis := chassis ;
74848: LD_ADDR_OWVAR 37
74852: PUSH
74853: LD_VAR 0 1
74857: ST_TO_ADDR
// vc_engine := engine ;
74858: LD_ADDR_OWVAR 39
74862: PUSH
74863: LD_VAR 0 2
74867: ST_TO_ADDR
// vc_control := control ;
74868: LD_ADDR_OWVAR 38
74872: PUSH
74873: LD_VAR 0 3
74877: ST_TO_ADDR
// vc_weapon := weapon ;
74878: LD_ADDR_OWVAR 40
74882: PUSH
74883: LD_VAR 0 4
74887: ST_TO_ADDR
// un := CreateVehicle ;
74888: LD_ADDR_VAR 0 8
74892: PUSH
74893: CALL_OW 45
74897: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74898: LD_VAR 0 8
74902: PPUSH
74903: LD_INT 0
74905: PPUSH
74906: LD_INT 5
74908: PPUSH
74909: CALL_OW 12
74913: PPUSH
74914: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74918: LD_VAR 0 8
74922: PPUSH
74923: LD_VAR 0 5
74927: PPUSH
74928: LD_VAR 0 6
74932: PPUSH
74933: LD_INT 1
74935: PPUSH
74936: CALL_OW 48
// end ;
74940: LD_VAR 0 7
74944: RET
// export hInvincible ; every 1 do
74945: GO 74947
74947: DISABLE
// hInvincible := [ ] ;
74948: LD_ADDR_EXP 100
74952: PUSH
74953: EMPTY
74954: ST_TO_ADDR
74955: END
// every 10 do var i ;
74956: GO 74958
74958: DISABLE
74959: LD_INT 0
74961: PPUSH
// begin enable ;
74962: ENABLE
// if not hInvincible then
74963: LD_EXP 100
74967: NOT
74968: IFFALSE 74972
// exit ;
74970: GO 75016
// for i in hInvincible do
74972: LD_ADDR_VAR 0 1
74976: PUSH
74977: LD_EXP 100
74981: PUSH
74982: FOR_IN
74983: IFFALSE 75014
// if GetLives ( i ) < 1000 then
74985: LD_VAR 0 1
74989: PPUSH
74990: CALL_OW 256
74994: PUSH
74995: LD_INT 1000
74997: LESS
74998: IFFALSE 75012
// SetLives ( i , 1000 ) ;
75000: LD_VAR 0 1
75004: PPUSH
75005: LD_INT 1000
75007: PPUSH
75008: CALL_OW 234
75012: GO 74982
75014: POP
75015: POP
// end ;
75016: PPOPN 1
75018: END
// export function hHackInvincible ; var i ; begin
75019: LD_INT 0
75021: PPUSH
75022: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75023: LD_ADDR_VAR 0 2
75027: PUSH
75028: LD_INT 2
75030: PUSH
75031: LD_INT 21
75033: PUSH
75034: LD_INT 1
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 21
75043: PUSH
75044: LD_INT 2
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: LIST
75055: PPUSH
75056: CALL_OW 69
75060: PUSH
75061: FOR_IN
75062: IFFALSE 75123
// if IsSelected ( i ) then
75064: LD_VAR 0 2
75068: PPUSH
75069: CALL_OW 306
75073: IFFALSE 75121
// begin if i in hInvincible then
75075: LD_VAR 0 2
75079: PUSH
75080: LD_EXP 100
75084: IN
75085: IFFALSE 75105
// hInvincible := hInvincible diff i else
75087: LD_ADDR_EXP 100
75091: PUSH
75092: LD_EXP 100
75096: PUSH
75097: LD_VAR 0 2
75101: DIFF
75102: ST_TO_ADDR
75103: GO 75121
// hInvincible := hInvincible union i ;
75105: LD_ADDR_EXP 100
75109: PUSH
75110: LD_EXP 100
75114: PUSH
75115: LD_VAR 0 2
75119: UNION
75120: ST_TO_ADDR
// end ;
75121: GO 75061
75123: POP
75124: POP
// end ;
75125: LD_VAR 0 1
75129: RET
// export function hHackInvisible ; var i , j ; begin
75130: LD_INT 0
75132: PPUSH
75133: PPUSH
75134: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75135: LD_ADDR_VAR 0 2
75139: PUSH
75140: LD_INT 21
75142: PUSH
75143: LD_INT 1
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PPUSH
75150: CALL_OW 69
75154: PUSH
75155: FOR_IN
75156: IFFALSE 75180
// if IsSelected ( i ) then
75158: LD_VAR 0 2
75162: PPUSH
75163: CALL_OW 306
75167: IFFALSE 75178
// ComForceInvisible ( i ) ;
75169: LD_VAR 0 2
75173: PPUSH
75174: CALL_OW 496
75178: GO 75155
75180: POP
75181: POP
// end ;
75182: LD_VAR 0 1
75186: RET
// export function hHackChangeYourSide ; begin
75187: LD_INT 0
75189: PPUSH
// if your_side = 8 then
75190: LD_OWVAR 2
75194: PUSH
75195: LD_INT 8
75197: EQUAL
75198: IFFALSE 75210
// your_side := 0 else
75200: LD_ADDR_OWVAR 2
75204: PUSH
75205: LD_INT 0
75207: ST_TO_ADDR
75208: GO 75224
// your_side := your_side + 1 ;
75210: LD_ADDR_OWVAR 2
75214: PUSH
75215: LD_OWVAR 2
75219: PUSH
75220: LD_INT 1
75222: PLUS
75223: ST_TO_ADDR
// end ;
75224: LD_VAR 0 1
75228: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75229: LD_INT 0
75231: PPUSH
75232: PPUSH
75233: PPUSH
// for i in all_units do
75234: LD_ADDR_VAR 0 2
75238: PUSH
75239: LD_OWVAR 3
75243: PUSH
75244: FOR_IN
75245: IFFALSE 75323
// if IsSelected ( i ) then
75247: LD_VAR 0 2
75251: PPUSH
75252: CALL_OW 306
75256: IFFALSE 75321
// begin j := GetSide ( i ) ;
75258: LD_ADDR_VAR 0 3
75262: PUSH
75263: LD_VAR 0 2
75267: PPUSH
75268: CALL_OW 255
75272: ST_TO_ADDR
// if j = 8 then
75273: LD_VAR 0 3
75277: PUSH
75278: LD_INT 8
75280: EQUAL
75281: IFFALSE 75293
// j := 0 else
75283: LD_ADDR_VAR 0 3
75287: PUSH
75288: LD_INT 0
75290: ST_TO_ADDR
75291: GO 75307
// j := j + 1 ;
75293: LD_ADDR_VAR 0 3
75297: PUSH
75298: LD_VAR 0 3
75302: PUSH
75303: LD_INT 1
75305: PLUS
75306: ST_TO_ADDR
// SetSide ( i , j ) ;
75307: LD_VAR 0 2
75311: PPUSH
75312: LD_VAR 0 3
75316: PPUSH
75317: CALL_OW 235
// end ;
75321: GO 75244
75323: POP
75324: POP
// end ;
75325: LD_VAR 0 1
75329: RET
// export function hHackFog ; begin
75330: LD_INT 0
75332: PPUSH
// FogOff ( true ) ;
75333: LD_INT 1
75335: PPUSH
75336: CALL_OW 344
// end ;
75340: LD_VAR 0 1
75344: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75345: LD_INT 0
75347: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75348: LD_VAR 0 1
75352: PPUSH
75353: LD_VAR 0 2
75357: PPUSH
75358: LD_VAR 0 3
75362: PPUSH
75363: LD_INT 1
75365: PPUSH
75366: LD_INT 1
75368: PPUSH
75369: CALL_OW 483
// CenterOnXY ( x , y ) ;
75373: LD_VAR 0 2
75377: PPUSH
75378: LD_VAR 0 3
75382: PPUSH
75383: CALL_OW 84
// end ;
75387: LD_VAR 0 4
75391: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75392: LD_INT 0
75394: PPUSH
75395: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75396: LD_VAR 0 1
75400: NOT
75401: PUSH
75402: LD_VAR 0 2
75406: PPUSH
75407: LD_VAR 0 3
75411: PPUSH
75412: CALL_OW 488
75416: NOT
75417: OR
75418: PUSH
75419: LD_VAR 0 1
75423: PPUSH
75424: CALL_OW 266
75428: PUSH
75429: LD_INT 3
75431: NONEQUAL
75432: PUSH
75433: LD_VAR 0 1
75437: PPUSH
75438: CALL_OW 247
75442: PUSH
75443: LD_INT 1
75445: EQUAL
75446: NOT
75447: AND
75448: OR
75449: IFFALSE 75453
// exit ;
75451: GO 75602
// if GetType ( factory ) = unit_human then
75453: LD_VAR 0 1
75457: PPUSH
75458: CALL_OW 247
75462: PUSH
75463: LD_INT 1
75465: EQUAL
75466: IFFALSE 75483
// factory := IsInUnit ( factory ) ;
75468: LD_ADDR_VAR 0 1
75472: PUSH
75473: LD_VAR 0 1
75477: PPUSH
75478: CALL_OW 310
75482: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75483: LD_VAR 0 1
75487: PPUSH
75488: CALL_OW 266
75492: PUSH
75493: LD_INT 3
75495: NONEQUAL
75496: IFFALSE 75500
// exit ;
75498: GO 75602
// if HexInfo ( x , y ) = factory then
75500: LD_VAR 0 2
75504: PPUSH
75505: LD_VAR 0 3
75509: PPUSH
75510: CALL_OW 428
75514: PUSH
75515: LD_VAR 0 1
75519: EQUAL
75520: IFFALSE 75547
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75522: LD_ADDR_EXP 101
75526: PUSH
75527: LD_EXP 101
75531: PPUSH
75532: LD_VAR 0 1
75536: PPUSH
75537: LD_INT 0
75539: PPUSH
75540: CALL_OW 1
75544: ST_TO_ADDR
75545: GO 75598
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75547: LD_ADDR_EXP 101
75551: PUSH
75552: LD_EXP 101
75556: PPUSH
75557: LD_VAR 0 1
75561: PPUSH
75562: LD_VAR 0 1
75566: PPUSH
75567: CALL_OW 255
75571: PUSH
75572: LD_VAR 0 1
75576: PUSH
75577: LD_VAR 0 2
75581: PUSH
75582: LD_VAR 0 3
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: PPUSH
75593: CALL_OW 1
75597: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75598: CALL 75607 0 0
// end ;
75602: LD_VAR 0 4
75606: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75607: LD_INT 0
75609: PPUSH
75610: PPUSH
75611: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75612: LD_STRING resetFactoryWaypoint();
75614: PPUSH
75615: CALL_OW 559
// if factoryWaypoints then
75619: LD_EXP 101
75623: IFFALSE 75749
// begin list := PrepareArray ( factoryWaypoints ) ;
75625: LD_ADDR_VAR 0 3
75629: PUSH
75630: LD_EXP 101
75634: PPUSH
75635: CALL 56441 0 1
75639: ST_TO_ADDR
// for i := 1 to list do
75640: LD_ADDR_VAR 0 2
75644: PUSH
75645: DOUBLE
75646: LD_INT 1
75648: DEC
75649: ST_TO_ADDR
75650: LD_VAR 0 3
75654: PUSH
75655: FOR_TO
75656: IFFALSE 75747
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75658: LD_STRING setFactoryWaypointXY(
75660: PUSH
75661: LD_VAR 0 3
75665: PUSH
75666: LD_VAR 0 2
75670: ARRAY
75671: PUSH
75672: LD_INT 1
75674: ARRAY
75675: STR
75676: PUSH
75677: LD_STRING ,
75679: STR
75680: PUSH
75681: LD_VAR 0 3
75685: PUSH
75686: LD_VAR 0 2
75690: ARRAY
75691: PUSH
75692: LD_INT 2
75694: ARRAY
75695: STR
75696: PUSH
75697: LD_STRING ,
75699: STR
75700: PUSH
75701: LD_VAR 0 3
75705: PUSH
75706: LD_VAR 0 2
75710: ARRAY
75711: PUSH
75712: LD_INT 3
75714: ARRAY
75715: STR
75716: PUSH
75717: LD_STRING ,
75719: STR
75720: PUSH
75721: LD_VAR 0 3
75725: PUSH
75726: LD_VAR 0 2
75730: ARRAY
75731: PUSH
75732: LD_INT 4
75734: ARRAY
75735: STR
75736: PUSH
75737: LD_STRING )
75739: STR
75740: PPUSH
75741: CALL_OW 559
75745: GO 75655
75747: POP
75748: POP
// end ; end ;
75749: LD_VAR 0 1
75753: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75754: LD_INT 0
75756: PPUSH
// if HexInfo ( x , y ) = warehouse then
75757: LD_VAR 0 2
75761: PPUSH
75762: LD_VAR 0 3
75766: PPUSH
75767: CALL_OW 428
75771: PUSH
75772: LD_VAR 0 1
75776: EQUAL
75777: IFFALSE 75804
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75779: LD_ADDR_EXP 102
75783: PUSH
75784: LD_EXP 102
75788: PPUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: LD_INT 0
75796: PPUSH
75797: CALL_OW 1
75801: ST_TO_ADDR
75802: GO 75855
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
75804: LD_ADDR_EXP 102
75808: PUSH
75809: LD_EXP 102
75813: PPUSH
75814: LD_VAR 0 1
75818: PPUSH
75819: LD_VAR 0 1
75823: PPUSH
75824: CALL_OW 255
75828: PUSH
75829: LD_VAR 0 1
75833: PUSH
75834: LD_VAR 0 2
75838: PUSH
75839: LD_VAR 0 3
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: PPUSH
75850: CALL_OW 1
75854: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75855: CALL 75864 0 0
// end ;
75859: LD_VAR 0 4
75863: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75864: LD_INT 0
75866: PPUSH
75867: PPUSH
75868: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75869: LD_STRING resetWarehouseGatheringPoints();
75871: PPUSH
75872: CALL_OW 559
// if warehouseGatheringPoints then
75876: LD_EXP 102
75880: IFFALSE 76006
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75882: LD_ADDR_VAR 0 3
75886: PUSH
75887: LD_EXP 102
75891: PPUSH
75892: CALL 56441 0 1
75896: ST_TO_ADDR
// for i := 1 to list do
75897: LD_ADDR_VAR 0 2
75901: PUSH
75902: DOUBLE
75903: LD_INT 1
75905: DEC
75906: ST_TO_ADDR
75907: LD_VAR 0 3
75911: PUSH
75912: FOR_TO
75913: IFFALSE 76004
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75915: LD_STRING setWarehouseGatheringPointXY(
75917: PUSH
75918: LD_VAR 0 3
75922: PUSH
75923: LD_VAR 0 2
75927: ARRAY
75928: PUSH
75929: LD_INT 1
75931: ARRAY
75932: STR
75933: PUSH
75934: LD_STRING ,
75936: STR
75937: PUSH
75938: LD_VAR 0 3
75942: PUSH
75943: LD_VAR 0 2
75947: ARRAY
75948: PUSH
75949: LD_INT 2
75951: ARRAY
75952: STR
75953: PUSH
75954: LD_STRING ,
75956: STR
75957: PUSH
75958: LD_VAR 0 3
75962: PUSH
75963: LD_VAR 0 2
75967: ARRAY
75968: PUSH
75969: LD_INT 3
75971: ARRAY
75972: STR
75973: PUSH
75974: LD_STRING ,
75976: STR
75977: PUSH
75978: LD_VAR 0 3
75982: PUSH
75983: LD_VAR 0 2
75987: ARRAY
75988: PUSH
75989: LD_INT 4
75991: ARRAY
75992: STR
75993: PUSH
75994: LD_STRING )
75996: STR
75997: PPUSH
75998: CALL_OW 559
76002: GO 75912
76004: POP
76005: POP
// end ; end ;
76006: LD_VAR 0 1
76010: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76011: LD_EXP 102
76015: IFFALSE 76700
76017: GO 76019
76019: DISABLE
76020: LD_INT 0
76022: PPUSH
76023: PPUSH
76024: PPUSH
76025: PPUSH
76026: PPUSH
76027: PPUSH
76028: PPUSH
76029: PPUSH
76030: PPUSH
// begin enable ;
76031: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76032: LD_ADDR_VAR 0 3
76036: PUSH
76037: LD_EXP 102
76041: PPUSH
76042: CALL 56441 0 1
76046: ST_TO_ADDR
// if not list then
76047: LD_VAR 0 3
76051: NOT
76052: IFFALSE 76056
// exit ;
76054: GO 76700
// for i := 1 to list do
76056: LD_ADDR_VAR 0 1
76060: PUSH
76061: DOUBLE
76062: LD_INT 1
76064: DEC
76065: ST_TO_ADDR
76066: LD_VAR 0 3
76070: PUSH
76071: FOR_TO
76072: IFFALSE 76698
// begin depot := list [ i ] [ 2 ] ;
76074: LD_ADDR_VAR 0 8
76078: PUSH
76079: LD_VAR 0 3
76083: PUSH
76084: LD_VAR 0 1
76088: ARRAY
76089: PUSH
76090: LD_INT 2
76092: ARRAY
76093: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76094: LD_ADDR_VAR 0 5
76098: PUSH
76099: LD_VAR 0 3
76103: PUSH
76104: LD_VAR 0 1
76108: ARRAY
76109: PUSH
76110: LD_INT 1
76112: ARRAY
76113: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76114: LD_VAR 0 8
76118: PPUSH
76119: CALL_OW 301
76123: PUSH
76124: LD_VAR 0 5
76128: PUSH
76129: LD_VAR 0 8
76133: PPUSH
76134: CALL_OW 255
76138: NONEQUAL
76139: OR
76140: IFFALSE 76169
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76142: LD_ADDR_EXP 102
76146: PUSH
76147: LD_EXP 102
76151: PPUSH
76152: LD_VAR 0 8
76156: PPUSH
76157: LD_INT 0
76159: PPUSH
76160: CALL_OW 1
76164: ST_TO_ADDR
// exit ;
76165: POP
76166: POP
76167: GO 76700
// end ; x := list [ i ] [ 3 ] ;
76169: LD_ADDR_VAR 0 6
76173: PUSH
76174: LD_VAR 0 3
76178: PUSH
76179: LD_VAR 0 1
76183: ARRAY
76184: PUSH
76185: LD_INT 3
76187: ARRAY
76188: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76189: LD_ADDR_VAR 0 7
76193: PUSH
76194: LD_VAR 0 3
76198: PUSH
76199: LD_VAR 0 1
76203: ARRAY
76204: PUSH
76205: LD_INT 4
76207: ARRAY
76208: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76209: LD_ADDR_VAR 0 9
76213: PUSH
76214: LD_VAR 0 6
76218: PPUSH
76219: LD_VAR 0 7
76223: PPUSH
76224: LD_INT 16
76226: PPUSH
76227: CALL 55029 0 3
76231: ST_TO_ADDR
// if not cratesNearbyPoint then
76232: LD_VAR 0 9
76236: NOT
76237: IFFALSE 76243
// exit ;
76239: POP
76240: POP
76241: GO 76700
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76243: LD_ADDR_VAR 0 4
76247: PUSH
76248: LD_INT 22
76250: PUSH
76251: LD_VAR 0 5
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 3
76262: PUSH
76263: LD_INT 60
76265: PUSH
76266: EMPTY
76267: LIST
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PUSH
76273: LD_INT 91
76275: PUSH
76276: LD_VAR 0 8
76280: PUSH
76281: LD_INT 6
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 2
76291: PUSH
76292: LD_INT 25
76294: PUSH
76295: LD_INT 2
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PUSH
76302: LD_INT 25
76304: PUSH
76305: LD_INT 16
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: LIST
76316: PUSH
76317: EMPTY
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: PPUSH
76323: CALL_OW 69
76327: PUSH
76328: LD_VAR 0 8
76332: PPUSH
76333: CALL_OW 313
76337: PPUSH
76338: LD_INT 3
76340: PUSH
76341: LD_INT 60
76343: PUSH
76344: EMPTY
76345: LIST
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: LD_INT 2
76353: PUSH
76354: LD_INT 25
76356: PUSH
76357: LD_INT 2
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 25
76366: PUSH
76367: LD_INT 16
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PPUSH
76383: CALL_OW 72
76387: UNION
76388: ST_TO_ADDR
// if tmp then
76389: LD_VAR 0 4
76393: IFFALSE 76473
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76395: LD_ADDR_VAR 0 4
76399: PUSH
76400: LD_VAR 0 4
76404: PPUSH
76405: LD_INT 3
76407: PPUSH
76408: CALL 52998 0 2
76412: ST_TO_ADDR
// for j in tmp do
76413: LD_ADDR_VAR 0 2
76417: PUSH
76418: LD_VAR 0 4
76422: PUSH
76423: FOR_IN
76424: IFFALSE 76467
// begin if IsInUnit ( j ) then
76426: LD_VAR 0 2
76430: PPUSH
76431: CALL_OW 310
76435: IFFALSE 76446
// ComExit ( j ) ;
76437: LD_VAR 0 2
76441: PPUSH
76442: CALL 53081 0 1
// AddComCollect ( j , x , y ) ;
76446: LD_VAR 0 2
76450: PPUSH
76451: LD_VAR 0 6
76455: PPUSH
76456: LD_VAR 0 7
76460: PPUSH
76461: CALL_OW 177
// end ;
76465: GO 76423
76467: POP
76468: POP
// exit ;
76469: POP
76470: POP
76471: GO 76700
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76473: LD_ADDR_VAR 0 4
76477: PUSH
76478: LD_INT 22
76480: PUSH
76481: LD_VAR 0 5
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: LD_INT 91
76492: PUSH
76493: LD_VAR 0 8
76497: PUSH
76498: LD_INT 8
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 2
76508: PUSH
76509: LD_INT 34
76511: PUSH
76512: LD_INT 12
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 34
76521: PUSH
76522: LD_INT 51
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 34
76531: PUSH
76532: LD_INT 32
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 34
76541: PUSH
76542: LD_INT 89
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: LIST
76560: PPUSH
76561: CALL_OW 69
76565: ST_TO_ADDR
// if tmp then
76566: LD_VAR 0 4
76570: IFFALSE 76696
// begin for j in tmp do
76572: LD_ADDR_VAR 0 2
76576: PUSH
76577: LD_VAR 0 4
76581: PUSH
76582: FOR_IN
76583: IFFALSE 76694
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76585: LD_VAR 0 2
76589: PPUSH
76590: CALL_OW 262
76594: PUSH
76595: LD_INT 3
76597: EQUAL
76598: PUSH
76599: LD_VAR 0 2
76603: PPUSH
76604: CALL_OW 261
76608: PUSH
76609: LD_INT 20
76611: GREATER
76612: OR
76613: PUSH
76614: LD_VAR 0 2
76618: PPUSH
76619: CALL_OW 314
76623: NOT
76624: AND
76625: PUSH
76626: LD_VAR 0 2
76630: PPUSH
76631: CALL_OW 263
76635: PUSH
76636: LD_INT 1
76638: NONEQUAL
76639: PUSH
76640: LD_VAR 0 2
76644: PPUSH
76645: CALL_OW 311
76649: OR
76650: AND
76651: IFFALSE 76692
// begin ComCollect ( j , x , y ) ;
76653: LD_VAR 0 2
76657: PPUSH
76658: LD_VAR 0 6
76662: PPUSH
76663: LD_VAR 0 7
76667: PPUSH
76668: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76672: LD_VAR 0 2
76676: PPUSH
76677: LD_VAR 0 8
76681: PPUSH
76682: CALL_OW 172
// exit ;
76686: POP
76687: POP
76688: POP
76689: POP
76690: GO 76700
// end ;
76692: GO 76582
76694: POP
76695: POP
// end ; end ;
76696: GO 76071
76698: POP
76699: POP
// end ; end_of_file
76700: PPOPN 9
76702: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76703: LD_VAR 0 1
76707: PPUSH
76708: LD_VAR 0 2
76712: PPUSH
76713: LD_VAR 0 3
76717: PPUSH
76718: LD_VAR 0 4
76722: PPUSH
76723: LD_VAR 0 5
76727: PPUSH
76728: LD_VAR 0 6
76732: PPUSH
76733: CALL 61105 0 6
// end ;
76737: PPOPN 6
76739: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76740: LD_INT 0
76742: PPUSH
// begin if not units then
76743: LD_VAR 0 1
76747: NOT
76748: IFFALSE 76752
// exit ;
76750: GO 76752
// end ;
76752: PPOPN 7
76754: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76755: CALL 61076 0 0
// end ; end_of_file
76759: PPOPN 1
76761: END
