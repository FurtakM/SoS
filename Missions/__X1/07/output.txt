// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 60034 0 0
// Init ;
   8: CALL 34 0 0
// PrepareAmerican ;
  12: CALL 1961 0 0
// PrepareArabian ;
  16: CALL 1220 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// end ;
  33: END
// export debug , prefix , scoutActive ; function Init ; begin
  34: LD_INT 0
  36: PPUSH
// debug := true ;
  37: LD_ADDR_EXP 1
  41: PUSH
  42: LD_INT 1
  44: ST_TO_ADDR
// prefix := 06_ ;
  45: LD_ADDR_EXP 2
  49: PUSH
  50: LD_STRING 06_
  52: ST_TO_ADDR
// scoutActive := 0 ;
  53: LD_ADDR_EXP 3
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// end ; end_of_file
  61: LD_VAR 0 1
  65: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
  66: LD_INT 0
  68: PPUSH
// uc_side := side ;
  69: LD_ADDR_OWVAR 20
  73: PUSH
  74: LD_VAR 0 1
  78: ST_TO_ADDR
// uc_nation := nation ;
  79: LD_ADDR_OWVAR 21
  83: PUSH
  84: LD_VAR 0 2
  88: ST_TO_ADDR
// vc_chassis := chassis ;
  89: LD_ADDR_OWVAR 37
  93: PUSH
  94: LD_VAR 0 3
  98: ST_TO_ADDR
// vc_engine := engine ;
  99: LD_ADDR_OWVAR 39
 103: PUSH
 104: LD_VAR 0 4
 108: ST_TO_ADDR
// vc_control := control ;
 109: LD_ADDR_OWVAR 38
 113: PUSH
 114: LD_VAR 0 5
 118: ST_TO_ADDR
// vc_weapon := weapon ;
 119: LD_ADDR_OWVAR 40
 123: PUSH
 124: LD_VAR 0 6
 128: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 129: LD_ADDR_OWVAR 41
 133: PUSH
 134: LD_VAR 0 7
 138: ST_TO_ADDR
// result := CreateVehicle ;
 139: LD_ADDR_VAR 0 8
 143: PUSH
 144: CALL_OW 45
 148: ST_TO_ADDR
// end ;
 149: LD_VAR 0 8
 153: RET
// export function SayX ( units , ident ) ; var i ; begin
 154: LD_INT 0
 156: PPUSH
 157: PPUSH
// result := false ;
 158: LD_ADDR_VAR 0 3
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// if not units then
 166: LD_VAR 0 1
 170: NOT
 171: IFFALSE 175
// exit ;
 173: GO 229
// for i in units do
 175: LD_ADDR_VAR 0 4
 179: PUSH
 180: LD_VAR 0 1
 184: PUSH
 185: FOR_IN
 186: IFFALSE 227
// if IsOk ( i ) then
 188: LD_VAR 0 4
 192: PPUSH
 193: CALL_OW 302
 197: IFFALSE 225
// begin Say ( i , ident ) ;
 199: LD_VAR 0 4
 203: PPUSH
 204: LD_VAR 0 2
 208: PPUSH
 209: CALL_OW 88
// result := i ;
 213: LD_ADDR_VAR 0 3
 217: PUSH
 218: LD_VAR 0 4
 222: ST_TO_ADDR
// break ;
 223: GO 227
// end ;
 225: GO 185
 227: POP
 228: POP
// end ;
 229: LD_VAR 0 3
 233: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
// InitUc ;
 238: CALL_OW 18
// InitHc ;
 242: CALL_OW 19
// uc_side := 0 ;
 246: LD_ADDR_OWVAR 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// uc_nation := 0 ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// for i = 1 to amount do
 262: LD_ADDR_VAR 0 4
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_VAR 0 2
 276: PUSH
 277: FOR_TO
 278: IFFALSE 360
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 280: LD_ADDR_OWVAR 29
 284: PUSH
 285: LD_INT 9
 287: PPUSH
 288: LD_INT 12
 290: PPUSH
 291: CALL_OW 12
 295: PUSH
 296: LD_INT 9
 298: PPUSH
 299: LD_INT 12
 301: PPUSH
 302: CALL_OW 12
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 311: LD_ADDR_OWVAR 35
 315: PUSH
 316: LD_INT 1
 318: NEG
 319: PPUSH
 320: LD_INT 1
 322: PPUSH
 323: CALL_OW 12
 327: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 328: LD_INT 0
 330: PPUSH
 331: LD_INT 12
 333: PPUSH
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 341: CALL_OW 44
 345: PPUSH
 346: LD_VAR 0 1
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 277
 360: POP
 361: POP
// InitHc ;
 362: CALL_OW 19
// end ;
 366: LD_VAR 0 3
 370: RET
// export function CreateNature ( apemanArea , forest , swamp ) ; var i ; begin
 371: LD_INT 0
 373: PPUSH
 374: PPUSH
// uc_side := 0 ;
 375: LD_ADDR_OWVAR 20
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// uc_nation := 0 ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_INT 0
 390: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 391: LD_VAR 0 1
 395: PPUSH
 396: LD_INT 6
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: LD_INT 4
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_OWVAR 67
 414: ARRAY
 415: PPUSH
 416: CALL 234 0 2
// for i = 1 to 2 do
 420: LD_ADDR_VAR 0 5
 424: PUSH
 425: DOUBLE
 426: LD_INT 1
 428: DEC
 429: ST_TO_ADDR
 430: LD_INT 2
 432: PUSH
 433: FOR_TO
 434: IFFALSE 473
// begin vc_chassis := class_mastodont ;
 436: LD_ADDR_OWVAR 37
 440: PUSH
 441: LD_EXP 103
 445: ST_TO_ADDR
// vc_control := control_rider ;
 446: LD_ADDR_OWVAR 38
 450: PUSH
 451: LD_INT 4
 453: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
 454: CALL_OW 45
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL 39424 0 3
// end ;
 471: GO 433
 473: POP
 474: POP
// for i := 1 to 4 do
 475: LD_ADDR_VAR 0 5
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_INT 4
 487: PUSH
 488: FOR_TO
 489: IFFALSE 528
// begin hc_class := class_horse ;
 491: LD_ADDR_OWVAR 28
 495: PUSH
 496: LD_EXP 104
 500: ST_TO_ADDR
// hc_gallery :=  ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING 
 508: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 509: CALL_OW 44
 513: PPUSH
 514: LD_VAR 0 2
 518: PPUSH
 519: LD_INT 0
 521: PPUSH
 522: CALL_OW 49
// end ;
 526: GO 488
 528: POP
 529: POP
// for i = 1 to 5 do
 530: LD_ADDR_VAR 0 5
 534: PUSH
 535: DOUBLE
 536: LD_INT 1
 538: DEC
 539: ST_TO_ADDR
 540: LD_INT 5
 542: PUSH
 543: FOR_TO
 544: IFFALSE 598
// begin hc_class = class_tiger ;
 546: LD_ADDR_OWVAR 28
 550: PUSH
 551: LD_INT 14
 553: ST_TO_ADDR
// hc_gallery =  ;
 554: LD_ADDR_OWVAR 33
 558: PUSH
 559: LD_STRING 
 561: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 562: LD_ADDR_OWVAR 35
 566: PUSH
 567: LD_INT 7
 569: NEG
 570: PPUSH
 571: LD_INT 7
 573: PPUSH
 574: CALL_OW 12
 578: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_VAR 0 2
 588: PPUSH
 589: LD_INT 0
 591: PPUSH
 592: CALL 39424 0 3
// end ;
 596: GO 543
 598: POP
 599: POP
// for i := 1 to 4 do
 600: LD_ADDR_VAR 0 5
 604: PUSH
 605: DOUBLE
 606: LD_INT 1
 608: DEC
 609: ST_TO_ADDR
 610: LD_INT 4
 612: PUSH
 613: FOR_TO
 614: IFFALSE 651
// begin hc_class := class_phororhacos ;
 616: LD_ADDR_OWVAR 28
 620: PUSH
 621: LD_INT 18
 623: ST_TO_ADDR
// hc_gallery :=  ;
 624: LD_ADDR_OWVAR 33
 628: PUSH
 629: LD_STRING 
 631: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 632: CALL_OW 44
 636: PPUSH
 637: LD_VAR 0 2
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 613
 651: POP
 652: POP
// for i := 1 to 4 do
 653: LD_ADDR_VAR 0 5
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 4
 665: PUSH
 666: FOR_TO
 667: IFFALSE 704
// begin hc_class := class_baggie ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_VAR 0 2
 694: PPUSH
 695: LD_INT 0
 697: PPUSH
 698: CALL_OW 49
// end ;
 702: GO 666
 704: POP
 705: POP
// for i := 1 to 7 do
 706: LD_ADDR_VAR 0 5
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 7
 718: PUSH
 719: FOR_TO
 720: IFFALSE 757
// begin hc_class := class_frog ;
 722: LD_ADDR_OWVAR 28
 726: PUSH
 727: LD_INT 19
 729: ST_TO_ADDR
// hc_gallery :=  ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING 
 737: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 738: CALL_OW 44
 742: PPUSH
 743: LD_VAR 0 3
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 719
 757: POP
 758: POP
// end ;
 759: LD_VAR 0 4
 763: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 764: LD_INT 0
 766: PPUSH
 767: PPUSH
 768: PPUSH
// if not observer or not unit then
 769: LD_VAR 0 1
 773: NOT
 774: PUSH
 775: LD_VAR 0 2
 779: NOT
 780: OR
 781: IFFALSE 785
// exit ;
 783: GO 833
// if not See ( GetSide ( observer ) , unit ) then
 785: LD_VAR 0 1
 789: PPUSH
 790: CALL_OW 255
 794: PPUSH
 795: LD_VAR 0 2
 799: PPUSH
 800: CALL_OW 292
 804: NOT
 805: IFFALSE 809
// exit ;
 807: GO 833
// result := GetDistUnits ( observer , unit ) < 12 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 1
 818: PPUSH
 819: LD_VAR 0 2
 823: PPUSH
 824: CALL_OW 296
 828: PUSH
 829: LD_INT 12
 831: LESS
 832: ST_TO_ADDR
// end ;
 833: LD_VAR 0 3
 837: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 838: LD_INT 0
 840: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 841: LD_VAR 0 2
 845: PUSH
 846: LD_INT 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_INT 2
 857: ARRAY
 858: PPUSH
 859: CALL_OW 488
 863: PUSH
 864: LD_VAR 0 2
 868: PUSH
 869: LD_INT 1
 871: ARRAY
 872: PPUSH
 873: LD_VAR 0 2
 877: PUSH
 878: LD_INT 2
 880: ARRAY
 881: PPUSH
 882: CALL_OW 428
 886: PUSH
 887: LD_INT 0
 889: EQUAL
 890: AND
 891: IFFALSE 925
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 893: LD_VAR 0 1
 897: PPUSH
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 1
 905: ARRAY
 906: PPUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 2
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 3
 920: PPUSH
 921: CALL_OW 48
// end ;
 925: LD_VAR 0 4
 929: RET
// export function ReverseArray ( array ) ; var i ; begin
 930: LD_INT 0
 932: PPUSH
 933: PPUSH
// if not array then
 934: LD_VAR 0 1
 938: NOT
 939: IFFALSE 943
// exit ;
 941: GO 1001
// result := [ ] ;
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: EMPTY
 949: ST_TO_ADDR
// for i := 1 to array do
 950: LD_ADDR_VAR 0 3
 954: PUSH
 955: DOUBLE
 956: LD_INT 1
 958: DEC
 959: ST_TO_ADDR
 960: LD_VAR 0 1
 964: PUSH
 965: FOR_TO
 966: IFFALSE 999
// result := Insert ( result , 1 , array [ i ] ) ;
 968: LD_ADDR_VAR 0 2
 972: PUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_VAR 0 1
 985: PUSH
 986: LD_VAR 0 3
 990: ARRAY
 991: PPUSH
 992: CALL_OW 2
 996: ST_TO_ADDR
 997: GO 965
 999: POP
1000: POP
// end ;
1001: LD_VAR 0 2
1005: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1006: LD_INT 0
1008: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1009: LD_VAR 0 1
1013: PPUSH
1014: LD_VAR 0 2
1018: PPUSH
1019: LD_VAR 0 3
1023: PPUSH
1024: LD_VAR 0 4
1028: PPUSH
1029: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1033: LD_VAR 0 1
1037: PPUSH
1038: LD_VAR 0 2
1042: PPUSH
1043: LD_VAR 0 3
1047: PPUSH
1048: CALL_OW 331
// end ;
1052: LD_VAR 0 5
1056: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1057: LD_INT 0
1059: PPUSH
// if not units then
1060: LD_VAR 0 1
1064: NOT
1065: IFFALSE 1069
// exit ;
1067: GO 1152
// result := true ;
1069: LD_ADDR_VAR 0 4
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1077: LD_VAR 0 1
1081: PPUSH
1082: LD_INT 26
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PPUSH
1092: CALL_OW 72
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: LD_VAR 0 2
1105: PPUSH
1106: CALL_OW 88
1110: NOT
1111: IFFALSE 1152
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1113: LD_ADDR_VAR 0 4
1117: PUSH
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_INT 26
1125: PUSH
1126: LD_INT 2
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 72
1137: PUSH
1138: LD_INT 1
1140: ARRAY
1141: PPUSH
1142: LD_VAR 0 3
1146: PPUSH
1147: CALL_OW 88
1151: ST_TO_ADDR
// end ;
1152: LD_VAR 0 4
1156: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1157: LD_INT 0
1159: PPUSH
1160: PPUSH
// if not group then
1161: LD_VAR 0 2
1165: NOT
1166: IFFALSE 1170
// exit ;
1168: GO 1215
// for i in group do
1170: LD_ADDR_VAR 0 4
1174: PUSH
1175: LD_VAR 0 2
1179: PUSH
1180: FOR_IN
1181: IFFALSE 1213
// if See ( side , i ) then
1183: LD_VAR 0 1
1187: PPUSH
1188: LD_VAR 0 4
1192: PPUSH
1193: CALL_OW 292
1197: IFFALSE 1211
// begin result := true ;
1199: LD_ADDR_VAR 0 3
1203: PUSH
1204: LD_INT 1
1206: ST_TO_ADDR
// exit ;
1207: POP
1208: POP
1209: GO 1215
// end ;
1211: GO 1180
1213: POP
1214: POP
// end ; end_of_file
1215: LD_VAR 0 3
1219: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
// uc_nation := 2 ;
1225: LD_ADDR_OWVAR 21
1229: PUSH
1230: LD_INT 2
1232: ST_TO_ADDR
// uc_side := 5 ;
1233: LD_ADDR_OWVAR 20
1237: PUSH
1238: LD_INT 5
1240: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1241: LD_ADDR_EXP 12
1245: PUSH
1246: LD_STRING Abdul
1248: PPUSH
1249: LD_INT 0
1251: PPUSH
1252: LD_STRING 
1254: PPUSH
1255: CALL 3773 0 3
1259: ST_TO_ADDR
// uc_side := 2 ;
1260: LD_ADDR_OWVAR 20
1264: PUSH
1265: LD_INT 2
1267: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1268: LD_ADDR_EXP 4
1272: PUSH
1273: LD_STRING Heike
1275: PPUSH
1276: LD_EXP 1
1280: NOT
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL 3773 0 3
1291: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 7
1296: PUSH
1297: LD_STRING Ibrahim
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 3773 0 3
1315: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 5
1320: PUSH
1321: LD_STRING Givi
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 3773 0 3
1339: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1340: LD_ADDR_EXP 8
1344: PUSH
1345: LD_STRING Kamil
1347: PPUSH
1348: LD_EXP 1
1352: NOT
1353: PPUSH
1354: LD_EXP 2
1358: PPUSH
1359: CALL 3773 0 3
1363: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1364: LD_ADDR_EXP 9
1368: PUSH
1369: LD_STRING Kaia
1371: PPUSH
1372: LD_EXP 1
1376: NOT
1377: PPUSH
1378: LD_EXP 2
1382: PPUSH
1383: CALL 3773 0 3
1387: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1388: LD_ADDR_EXP 10
1392: PUSH
1393: LD_STRING Sophia
1395: PPUSH
1396: LD_EXP 1
1400: NOT
1401: PPUSH
1402: LD_EXP 2
1406: PPUSH
1407: CALL 3773 0 3
1411: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1412: LD_ADDR_EXP 11
1416: PUSH
1417: LD_STRING Markov
1419: PPUSH
1420: LD_EXP 1
1424: NOT
1425: PPUSH
1426: LD_EXP 2
1430: PPUSH
1431: CALL 3773 0 3
1435: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1436: LD_ADDR_EXP 15
1440: PUSH
1441: LD_STRING Aviradze
1443: PPUSH
1444: LD_EXP 1
1448: NOT
1449: PPUSH
1450: LD_EXP 2
1454: PPUSH
1455: CALL 3773 0 3
1459: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1460: LD_ADDR_EXP 14
1464: PUSH
1465: LD_STRING Kurt
1467: PPUSH
1468: LD_EXP 1
1472: NOT
1473: PPUSH
1474: LD_EXP 2
1478: PPUSH
1479: CALL 3773 0 3
1483: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1484: LD_ADDR_EXP 6
1488: PUSH
1489: LD_STRING Mike
1491: PPUSH
1492: LD_EXP 1
1496: NOT
1497: PPUSH
1498: LD_EXP 2
1502: PPUSH
1503: CALL 3773 0 3
1507: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1508: LD_ADDR_EXP 13
1512: PUSH
1513: LD_STRING Olaf
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: LD_STRING 
1521: PPUSH
1522: CALL 3773 0 3
1526: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1527: LD_ADDR_EXP 16
1531: PUSH
1532: LD_STRING 06_others
1534: PPUSH
1535: CALL_OW 31
1539: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1540: LD_ADDR_EXP 17
1544: PUSH
1545: LD_STRING 06_apes
1547: PPUSH
1548: CALL_OW 31
1552: ST_TO_ADDR
// if debug then
1553: LD_EXP 1
1557: IFFALSE 1832
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1559: LD_ADDR_VAR 0 3
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 25
1575: PUSH
1576: LD_INT 2
1578: PUSH
1579: LD_INT 1000
1581: PUSH
1582: LD_INT 0
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 14
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: LD_INT 31
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: LD_INT 1000
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 14
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 27
1635: PUSH
1636: LD_INT 2
1638: PUSH
1639: LD_INT 750
1641: PUSH
1642: LD_INT 0
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 14
1656: PUSH
1657: LD_INT 1
1659: PUSH
1660: LD_INT 1
1662: PUSH
1663: LD_INT 27
1665: PUSH
1666: LD_INT 2
1668: PUSH
1669: LD_INT 900
1671: PUSH
1672: LD_INT 0
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 14
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: LD_INT 32
1695: PUSH
1696: LD_INT 2
1698: PUSH
1699: LD_INT 1000
1701: PUSH
1702: LD_INT 100
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: LD_INT 1
1729: PUSH
1730: LD_INT 32
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 1000
1738: PUSH
1739: LD_INT 50
1741: PUSH
1742: LD_INT 50
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 14
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 27
1769: PUSH
1770: LD_INT 2
1772: PUSH
1773: LD_INT 1000
1775: PUSH
1776: LD_INT 0
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 14
1790: PUSH
1791: LD_INT 1
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_EXP 91
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 1000
1807: PUSH
1808: LD_INT 0
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: ST_TO_ADDR
// end else
1830: GO 1839
// tmp := [ ] ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1839: LD_ADDR_EXP 18
1843: PUSH
1844: LD_STRING 06_Vehicles
1846: PPUSH
1847: LD_VAR 0 3
1851: PPUSH
1852: CALL_OW 30
1856: ST_TO_ADDR
// if heikeVehicles then
1857: LD_EXP 18
1861: IFFALSE 1956
// begin for i := heikeVehicles downto 1 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_EXP 18
1873: INC
1874: ST_TO_ADDR
1875: LD_INT 1
1877: PUSH
1878: FOR_DOWNTO
1879: IFFALSE 1954
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1881: LD_EXP 18
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 3
1894: ARRAY
1895: PUSH
1896: LD_INT 2
1898: EQUAL
1899: IFFALSE 1952
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1901: LD_ADDR_EXP 18
1905: PUSH
1906: LD_EXP 18
1910: PPUSH
1911: LD_EXP 18
1915: PPUSH
1916: LD_EXP 18
1920: PUSH
1921: LD_VAR 0 2
1925: ARRAY
1926: PPUSH
1927: CALL_OW 2
1931: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1932: LD_ADDR_EXP 18
1936: PUSH
1937: LD_EXP 18
1941: PPUSH
1942: LD_VAR 0 2
1946: PPUSH
1947: CALL_OW 3
1951: ST_TO_ADDR
// end ; end ;
1952: GO 1878
1954: POP
1955: POP
// end ; end ; end_of_file
1956: LD_VAR 0 1
1960: RET
// export function PrepareAmerican ; var i , b ; begin
1961: LD_INT 0
1963: PPUSH
1964: PPUSH
1965: PPUSH
// uc_side := 1 ;
1966: LD_ADDR_OWVAR 20
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// uc_nation := 1 ;
1974: LD_ADDR_OWVAR 21
1978: PUSH
1979: LD_INT 1
1981: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 30
1989: PUSH
1990: LD_INT 32
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PPUSH
1997: CALL_OW 69
2001: PUSH
2002: FOR_IN
2003: IFFALSE 2089
// begin if GetBWeapon ( i ) = us_radar then
2005: LD_VAR 0 2
2009: PPUSH
2010: CALL_OW 269
2014: PUSH
2015: LD_INT 11
2017: EQUAL
2018: IFFALSE 2043
// begin uc_nation := 0 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 0
2027: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2028: LD_INT 0
2030: PPUSH
2031: LD_INT 16
2033: PPUSH
2034: LD_INT 2
2036: PPUSH
2037: CALL_OW 380
// end else
2041: GO 2073
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 5
2051: PUSH
2052: LD_INT 6
2054: PUSH
2055: LD_INT 7
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_OWVAR 67
2067: ARRAY
2068: PPUSH
2069: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2073: CALL_OW 44
2077: PPUSH
2078: LD_VAR 0 2
2082: PPUSH
2083: CALL_OW 52
// end ;
2087: GO 2002
2089: POP
2090: POP
// b := HexInfo ( 74 , 120 ) ;
2091: LD_ADDR_VAR 0 3
2095: PUSH
2096: LD_INT 74
2098: PPUSH
2099: LD_INT 120
2101: PPUSH
2102: CALL_OW 428
2106: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
2107: LD_ADDR_VAR 0 2
2111: PUSH
2112: DOUBLE
2113: LD_INT 1
2115: DEC
2116: ST_TO_ADDR
2117: LD_INT 1
2119: PUSH
2120: LD_INT 2
2122: PUSH
2123: LD_INT 3
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_OWVAR 67
2135: ARRAY
2136: PUSH
2137: FOR_TO
2138: IFFALSE 2186
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
2140: LD_INT 0
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 5
2148: PUSH
2149: LD_INT 6
2151: PUSH
2152: LD_INT 7
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_OWVAR 67
2164: ARRAY
2165: PPUSH
2166: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2170: CALL_OW 44
2174: PPUSH
2175: LD_VAR 0 3
2179: PPUSH
2180: CALL_OW 52
// end ;
2184: GO 2137
2186: POP
2187: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: CALL_OW 313
2197: PPUSH
2198: LD_INT 5
2200: PPUSH
2201: CALL_OW 336
// end ; end_of_file end_of_file
2205: LD_VAR 0 1
2209: RET
// export function Action ; var i , j , veh , tmp ; begin
2210: LD_INT 0
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
// Video ( true ) ;
2217: LD_INT 1
2219: PPUSH
2220: CALL 40482 0 1
// music_nat := 1 ;
2224: LD_ADDR_OWVAR 71
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// music_class := music_recon ;
2232: LD_ADDR_OWVAR 72
2236: PUSH
2237: LD_INT 3
2239: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
2240: LD_INT 184
2242: PPUSH
2243: LD_INT 142
2245: PPUSH
2246: LD_INT 2
2248: PPUSH
2249: LD_INT 10
2251: NEG
2252: PPUSH
2253: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
2257: LD_INT 184
2259: PPUSH
2260: LD_INT 142
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
2270: LD_INT 204
2272: PPUSH
2273: LD_INT 151
2275: PPUSH
2276: LD_INT 2
2278: PPUSH
2279: LD_INT 10
2281: NEG
2282: PPUSH
2283: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
2287: LD_INT 204
2289: PPUSH
2290: LD_INT 151
2292: PPUSH
2293: LD_INT 2
2295: PPUSH
2296: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
2300: LD_INT 184
2302: PPUSH
2303: LD_INT 142
2305: PPUSH
2306: CALL_OW 86
// wait ( 0 0$2 ) ;
2310: LD_INT 70
2312: PPUSH
2313: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: LD_EXP 4
2326: PUSH
2327: LD_EXP 5
2331: PUSH
2332: LD_EXP 6
2336: PUSH
2337: LD_EXP 7
2341: PUSH
2342: LD_EXP 8
2346: PUSH
2347: LD_EXP 9
2351: PUSH
2352: LD_EXP 10
2356: PUSH
2357: LD_EXP 11
2361: PUSH
2362: LD_EXP 13
2366: PUSH
2367: LD_EXP 14
2371: PUSH
2372: LD_EXP 15
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_EXP 16
2394: UNION
2395: ST_TO_ADDR
// if heikeVehicles then
2396: LD_EXP 18
2400: IFFALSE 2879
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
2402: LD_ADDR_VAR 0 5
2406: PUSH
2407: LD_VAR 0 5
2411: PPUSH
2412: LD_INT 3
2414: PPUSH
2415: CALL 42527 0 2
2419: ST_TO_ADDR
// for i in heikeVehicles do
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 18
2429: PUSH
2430: FOR_IN
2431: IFFALSE 2877
// begin if not tmp then
2433: LD_VAR 0 5
2437: NOT
2438: IFFALSE 2442
// break ;
2440: GO 2877
// uc_side := 2 ;
2442: LD_ADDR_OWVAR 20
2446: PUSH
2447: LD_INT 2
2449: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
2450: LD_ADDR_OWVAR 21
2454: PUSH
2455: LD_VAR 0 2
2459: PUSH
2460: LD_INT 5
2462: ARRAY
2463: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
2464: LD_ADDR_OWVAR 37
2468: PUSH
2469: LD_VAR 0 2
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
2478: LD_ADDR_OWVAR 39
2482: PUSH
2483: LD_VAR 0 2
2487: PUSH
2488: LD_INT 2
2490: ARRAY
2491: ST_TO_ADDR
// vc_control := i [ 3 ] ;
2492: LD_ADDR_OWVAR 38
2496: PUSH
2497: LD_VAR 0 2
2501: PUSH
2502: LD_INT 3
2504: ARRAY
2505: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
2506: LD_ADDR_OWVAR 40
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: ARRAY
2519: ST_TO_ADDR
// veh := CreateVehicle ;
2520: LD_ADDR_VAR 0 4
2524: PUSH
2525: CALL_OW 45
2529: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2530: LD_VAR 0 4
2534: PPUSH
2535: LD_INT 4
2537: PPUSH
2538: CALL_OW 233
// if i [ 3 ] = control_manual then
2542: LD_VAR 0 2
2546: PUSH
2547: LD_INT 3
2549: ARRAY
2550: PUSH
2551: LD_INT 1
2553: EQUAL
2554: IFFALSE 2639
// begin PlaceUnitArea ( veh , startArea , false ) ;
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_INT 4
2578: ARRAY
2579: PUSH
2580: LD_INT 31
2582: EQUAL
2583: IFFALSE 2601
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
2601: LD_VAR 0 5
2605: PUSH
2606: LD_INT 1
2608: ARRAY
2609: PPUSH
2610: LD_VAR 0 4
2614: PPUSH
2615: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
2619: LD_ADDR_VAR 0 5
2623: PUSH
2624: LD_VAR 0 5
2628: PPUSH
2629: LD_INT 1
2631: PPUSH
2632: CALL_OW 3
2636: ST_TO_ADDR
// end else
2637: GO 2700
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
2639: LD_INT 22
2641: PUSH
2642: LD_INT 2
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 34
2651: PUSH
2652: LD_INT 31
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PPUSH
2663: CALL_OW 69
2667: IFFALSE 2700
// begin PlaceUnitArea ( veh , startArea , false ) ;
2669: LD_VAR 0 4
2673: PPUSH
2674: LD_INT 1
2676: PPUSH
2677: LD_INT 0
2679: PPUSH
2680: CALL_OW 49
// Connect ( veh ) ;
2684: LD_VAR 0 4
2688: PPUSH
2689: CALL 11730 0 1
// wait ( 0 0$2 ) ;
2693: LD_INT 70
2695: PPUSH
2696: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_VAR 0 2
2709: PUSH
2710: LD_INT 6
2712: ARRAY
2713: PPUSH
2714: CALL_OW 234
// SetFuel ( veh , 20 ) ;
2718: LD_VAR 0 4
2722: PPUSH
2723: LD_INT 20
2725: PPUSH
2726: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
2730: LD_VAR 0 2
2734: PUSH
2735: LD_INT 7
2737: ARRAY
2738: PUSH
2739: LD_VAR 0 4
2743: PPUSH
2744: CALL_OW 264
2748: PUSH
2749: LD_INT 51
2751: PUSH
2752: LD_INT 32
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: IN
2759: AND
2760: IFFALSE 2811
// begin for j := 1 to 2 do
2762: LD_ADDR_VAR 0 3
2766: PUSH
2767: DOUBLE
2768: LD_INT 1
2770: DEC
2771: ST_TO_ADDR
2772: LD_INT 2
2774: PUSH
2775: FOR_TO
2776: IFFALSE 2809
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
2778: LD_VAR 0 4
2782: PPUSH
2783: LD_VAR 0 3
2787: PPUSH
2788: LD_VAR 0 2
2792: PUSH
2793: LD_INT 7
2795: ARRAY
2796: PUSH
2797: LD_VAR 0 3
2801: ARRAY
2802: PPUSH
2803: CALL_OW 291
2807: GO 2775
2809: POP
2810: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
2811: LD_VAR 0 4
2815: PPUSH
2816: LD_INT 185
2818: PPUSH
2819: LD_INT 144
2821: PPUSH
2822: CALL_OW 111
// AddComWait ( veh , 0 0$2 ) ;
2826: LD_VAR 0 4
2830: PPUSH
2831: LD_INT 70
2833: PPUSH
2834: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_INT 179
2845: PPUSH
2846: LD_INT 129
2848: PPUSH
2849: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_INT 170
2860: PPUSH
2861: LD_INT 103
2863: PPUSH
2864: CALL_OW 171
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ;
2875: GO 2430
2877: POP
2878: POP
// end ; if tmp then
2879: LD_VAR 0 5
2883: IFFALSE 2981
// begin for i in tmp do
2885: LD_ADDR_VAR 0 2
2889: PUSH
2890: LD_VAR 0 5
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2979
// begin SetDir ( i , 4 ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_INT 4
2905: PPUSH
2906: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
2910: LD_VAR 0 2
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 185
2932: PPUSH
2933: LD_INT 144
2935: PPUSH
2936: CALL_OW 111
// AddComMoveXY ( i , 179 , 129 ) ;
2940: LD_VAR 0 2
2944: PPUSH
2945: LD_INT 179
2947: PPUSH
2948: LD_INT 129
2950: PPUSH
2951: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_INT 170
2962: PPUSH
2963: LD_INT 103
2965: PPUSH
2966: CALL_OW 171
// wait ( 0 0$2 ) ;
2970: LD_INT 70
2972: PPUSH
2973: CALL_OW 67
// end ;
2977: GO 2895
2979: POP
2980: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
2981: LD_EXP 4
2985: PPUSH
2986: LD_INT 163
2988: PPUSH
2989: LD_INT 89
2991: PPUSH
2992: CALL_OW 171
// wait ( 0 0$2 ) ;
2996: LD_INT 70
2998: PPUSH
2999: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
3003: LD_INT 175
3005: PPUSH
3006: LD_INT 117
3008: PPUSH
3009: CALL_OW 84
// CenterOnUnits ( Heike ) ;
3013: LD_EXP 4
3017: PPUSH
3018: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
3022: LD_EXP 4
3026: PPUSH
3027: LD_STRING DH-Intro-1
3029: PPUSH
3030: CALL_OW 88
// if Markov then
3034: LD_EXP 11
3038: IFFALSE 3605
// begin Say ( Markov , DMar-Intro-2 ) ;
3040: LD_EXP 11
3044: PPUSH
3045: LD_STRING DMar-Intro-2
3047: PPUSH
3048: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
3052: LD_EXP 11
3056: PPUSH
3057: LD_STRING DMar-Intro-3
3059: PPUSH
3060: CALL_OW 88
// wait ( 0 0$1 ) ;
3064: LD_INT 35
3066: PPUSH
3067: CALL_OW 67
// CenterOnUnits ( Heike ) ;
3071: LD_EXP 4
3075: PPUSH
3076: CALL_OW 85
// if Kurt then
3080: LD_EXP 14
3084: IFFALSE 3136
// begin if IsInUnit ( Kurt ) then
3086: LD_EXP 14
3090: PPUSH
3091: CALL_OW 310
3095: IFFALSE 3106
// ComExit ( Kurt ) ;
3097: LD_EXP 14
3101: PPUSH
3102: CALL 40898 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
3106: LD_EXP 14
3110: PPUSH
3111: LD_INT 130
3113: PPUSH
3114: LD_INT 56
3116: PPUSH
3117: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
3121: LD_EXP 14
3125: PPUSH
3126: LD_INT 129
3128: PPUSH
3129: LD_INT 56
3131: PPUSH
3132: CALL_OW 178
// end ; if Kaia then
3136: LD_EXP 9
3140: IFFALSE 3320
// begin Say ( Kaia , DK-Intro-4 ) ;
3142: LD_EXP 9
3146: PPUSH
3147: LD_STRING DK-Intro-4
3149: PPUSH
3150: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
3154: LD_EXP 11
3158: PPUSH
3159: LD_STRING DMar-Intro-5
3161: PPUSH
3162: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
3166: LD_EXP 11
3170: PPUSH
3171: LD_STRING DMar-Intro-6
3173: PPUSH
3174: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
3178: LD_EXP 13
3182: PPUSH
3183: LD_STRING DO-Intro-7
3185: PPUSH
3186: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
3190: LD_INT 160
3192: PPUSH
3193: LD_INT 85
3195: PPUSH
3196: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
3200: LD_EXP 11
3204: PPUSH
3205: LD_STRING DMar-Intro-8
3207: PPUSH
3208: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
3212: LD_EXP 11
3216: PPUSH
3217: LD_STRING DMar-Intro-9
3219: PPUSH
3220: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
3224: LD_EXP 11
3228: PPUSH
3229: LD_STRING DMar-Intro-10
3231: PPUSH
3232: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
3236: LD_EXP 11
3240: PPUSH
3241: LD_STRING DMar-Intro-11
3243: PPUSH
3244: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
3248: LD_EXP 5
3252: PPUSH
3253: LD_STRING DG-Intro-12
3255: PPUSH
3256: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
3260: LD_EXP 5
3264: PPUSH
3265: LD_STRING DG-Intro-13
3267: PPUSH
3268: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
3272: LD_EXP 5
3276: PPUSH
3277: LD_STRING DG-Intro-14
3279: PPUSH
3280: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
3284: LD_EXP 5
3288: PPUSH
3289: LD_STRING DG-Intro-15
3291: PPUSH
3292: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
3296: LD_EXP 4
3300: PPUSH
3301: LD_STRING DH-Intro-16
3303: PPUSH
3304: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
3308: LD_EXP 11
3312: PPUSH
3313: LD_STRING DMar-Intro-17
3315: PPUSH
3316: CALL_OW 88
// end ; if Kurt and Mike then
3320: LD_EXP 14
3324: PUSH
3325: LD_EXP 6
3329: AND
3330: IFFALSE 3605
// begin CenterNowOnUnits ( Kurt ) ;
3332: LD_EXP 14
3336: PPUSH
3337: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
3341: LD_EXP 14
3345: PPUSH
3346: LD_EXP 4
3350: PPUSH
3351: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
3355: LD_EXP 14
3359: PPUSH
3360: LD_STRING DKs-Intro-18
3362: PPUSH
3363: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
3367: LD_EXP 14
3371: PPUSH
3372: LD_STRING DKs-Intro-19
3374: PPUSH
3375: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
3379: LD_EXP 6
3383: PPUSH
3384: CALL_OW 87
// if IsInUnit ( Mike ) then
3388: LD_EXP 6
3392: PPUSH
3393: CALL_OW 310
3397: IFFALSE 3408
// ComExit ( Mike ) ;
3399: LD_EXP 6
3403: PPUSH
3404: CALL 40898 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
3408: LD_EXP 6
3412: PPUSH
3413: LD_INT 129
3415: PPUSH
3416: LD_INT 53
3418: PPUSH
3419: CALL_OW 171
// AddComHold ( Mike ) ;
3423: LD_EXP 6
3427: PPUSH
3428: CALL_OW 200
// wait ( 0 0$2 ) ;
3432: LD_INT 70
3434: PPUSH
3435: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
3439: LD_EXP 6
3443: PPUSH
3444: LD_STRING DM-Intro-20
3446: PPUSH
3447: CALL_OW 88
// scoutActive := Query ( Scout ) ;
3451: LD_ADDR_EXP 3
3455: PUSH
3456: LD_STRING Scout
3458: PPUSH
3459: CALL_OW 97
3463: ST_TO_ADDR
// if scoutActive = 1 then
3464: LD_EXP 3
3468: PUSH
3469: LD_INT 1
3471: EQUAL
3472: IFFALSE 3569
// begin CenterNowOnUnits ( Kurt ) ;
3474: LD_EXP 14
3478: PPUSH
3479: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
3483: LD_EXP 4
3487: PPUSH
3488: LD_STRING DH-Intro-21
3490: PPUSH
3491: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
3495: LD_EXP 6
3499: PPUSH
3500: LD_STRING DM-Intro-22
3502: PPUSH
3503: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
3507: LD_EXP 14
3511: PPUSH
3512: LD_STRING DKs-Intro-23
3514: PPUSH
3515: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
3519: LD_EXP 14
3523: PPUSH
3524: LD_INT 5
3526: PPUSH
3527: CALL_OW 235
// SetSide ( Mike , 5 ) ;
3531: LD_EXP 6
3535: PPUSH
3536: LD_INT 5
3538: PPUSH
3539: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
3543: LD_EXP 14
3547: PUSH
3548: LD_EXP 6
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: LD_INT 104
3559: PPUSH
3560: LD_INT 66
3562: PPUSH
3563: CALL_OW 111
// end else
3567: GO 3605
// begin Say ( Heike , DH-Intro-a-21 ) ;
3569: LD_EXP 4
3573: PPUSH
3574: LD_STRING DH-Intro-a-21
3576: PPUSH
3577: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
3581: LD_EXP 6
3585: PPUSH
3586: LD_STRING DM-Intro-a-22
3588: PPUSH
3589: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
3593: LD_EXP 14
3597: PPUSH
3598: LD_STRING DKs-Intro-a-23
3600: PPUSH
3601: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
3605: LD_INT 0
3607: PPUSH
3608: CALL 40482 0 1
// music_nat := music_auto ;
3612: LD_ADDR_OWVAR 71
3616: PUSH
3617: LD_INT 0
3619: ST_TO_ADDR
// music_class := music_auto ;
3620: LD_ADDR_OWVAR 72
3624: PUSH
3625: LD_INT 0
3627: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
3628: LD_STRING M1
3630: PPUSH
3631: CALL_OW 337
// wait ( 0 0$3 ) ;
3635: LD_INT 105
3637: PPUSH
3638: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
3642: LD_EXP 4
3646: PPUSH
3647: LD_STRING DH-Base-1
3649: PPUSH
3650: CALL_OW 88
// if Kaia then
3654: LD_EXP 9
3658: IFFALSE 3768
// begin Say ( Kaia , DK-Base-2 ) ;
3660: LD_EXP 9
3664: PPUSH
3665: LD_STRING DK-Base-2
3667: PPUSH
3668: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
3672: LD_EXP 4
3676: PPUSH
3677: LD_STRING DH-Base-3
3679: PPUSH
3680: CALL_OW 88
// if Aviradze then
3684: LD_EXP 15
3688: IFFALSE 3768
// begin Say ( Aviradze , DA-Base-4 ) ;
3690: LD_EXP 15
3694: PPUSH
3695: LD_STRING DA-Base-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
3702: LD_EXP 9
3706: PPUSH
3707: LD_STRING DK-Base-5
3709: PPUSH
3710: CALL_OW 88
// if Markov then
3714: LD_EXP 11
3718: IFFALSE 3768
// begin Say ( Markov , DMar-Base-6 ) ;
3720: LD_EXP 11
3724: PPUSH
3725: LD_STRING DMar-Base-6
3727: PPUSH
3728: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
3732: LD_EXP 9
3736: PPUSH
3737: LD_STRING DK-Base-7
3739: PPUSH
3740: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
3744: LD_EXP 11
3748: PPUSH
3749: LD_STRING DMar-Base-8
3751: PPUSH
3752: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
3756: LD_EXP 11
3760: PPUSH
3761: LD_STRING DMar-Base-9
3763: PPUSH
3764: CALL_OW 88
// end ; end ; end ; end ; end_of_file
3768: LD_VAR 0 1
3772: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3773: LD_INT 0
3775: PPUSH
3776: PPUSH
// if exist_mode then
3777: LD_VAR 0 2
3781: IFFALSE 3806
// unit := CreateCharacter ( prefix & ident ) else
3783: LD_ADDR_VAR 0 5
3787: PUSH
3788: LD_VAR 0 3
3792: PUSH
3793: LD_VAR 0 1
3797: STR
3798: PPUSH
3799: CALL_OW 34
3803: ST_TO_ADDR
3804: GO 3821
// unit := NewCharacter ( ident ) ;
3806: LD_ADDR_VAR 0 5
3810: PUSH
3811: LD_VAR 0 1
3815: PPUSH
3816: CALL_OW 25
3820: ST_TO_ADDR
// result := unit ;
3821: LD_ADDR_VAR 0 4
3825: PUSH
3826: LD_VAR 0 5
3830: ST_TO_ADDR
// end ;
3831: LD_VAR 0 4
3835: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3836: LD_INT 0
3838: PPUSH
3839: PPUSH
// if not side or not nation then
3840: LD_VAR 0 1
3844: NOT
3845: PUSH
3846: LD_VAR 0 2
3850: NOT
3851: OR
3852: IFFALSE 3856
// exit ;
3854: GO 4624
// case nation of nation_american :
3856: LD_VAR 0 2
3860: PUSH
3861: LD_INT 1
3863: DOUBLE
3864: EQUAL
3865: IFTRUE 3869
3867: GO 4083
3869: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_INT 35
3877: PUSH
3878: LD_INT 45
3880: PUSH
3881: LD_INT 46
3883: PUSH
3884: LD_INT 47
3886: PUSH
3887: LD_INT 82
3889: PUSH
3890: LD_INT 83
3892: PUSH
3893: LD_INT 84
3895: PUSH
3896: LD_INT 85
3898: PUSH
3899: LD_INT 86
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: LD_INT 6
3910: PUSH
3911: LD_INT 15
3913: PUSH
3914: LD_INT 16
3916: PUSH
3917: LD_INT 7
3919: PUSH
3920: LD_INT 12
3922: PUSH
3923: LD_INT 13
3925: PUSH
3926: LD_INT 10
3928: PUSH
3929: LD_INT 14
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: LD_INT 21
3937: PUSH
3938: LD_INT 22
3940: PUSH
3941: LD_INT 25
3943: PUSH
3944: LD_INT 32
3946: PUSH
3947: LD_INT 27
3949: PUSH
3950: LD_INT 36
3952: PUSH
3953: LD_INT 69
3955: PUSH
3956: LD_INT 39
3958: PUSH
3959: LD_INT 34
3961: PUSH
3962: LD_INT 40
3964: PUSH
3965: LD_INT 48
3967: PUSH
3968: LD_INT 49
3970: PUSH
3971: LD_INT 50
3973: PUSH
3974: LD_INT 51
3976: PUSH
3977: LD_INT 52
3979: PUSH
3980: LD_INT 53
3982: PUSH
3983: LD_INT 54
3985: PUSH
3986: LD_INT 55
3988: PUSH
3989: LD_INT 56
3991: PUSH
3992: LD_INT 57
3994: PUSH
3995: LD_INT 58
3997: PUSH
3998: LD_INT 59
4000: PUSH
4001: LD_INT 60
4003: PUSH
4004: LD_INT 61
4006: PUSH
4007: LD_INT 62
4009: PUSH
4010: LD_INT 80
4012: PUSH
4013: LD_INT 82
4015: PUSH
4016: LD_INT 83
4018: PUSH
4019: LD_INT 84
4021: PUSH
4022: LD_INT 85
4024: PUSH
4025: LD_INT 86
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: ST_TO_ADDR
4081: GO 4548
4083: LD_INT 2
4085: DOUBLE
4086: EQUAL
4087: IFTRUE 4091
4089: GO 4317
4091: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_INT 35
4099: PUSH
4100: LD_INT 45
4102: PUSH
4103: LD_INT 46
4105: PUSH
4106: LD_INT 47
4108: PUSH
4109: LD_INT 82
4111: PUSH
4112: LD_INT 83
4114: PUSH
4115: LD_INT 84
4117: PUSH
4118: LD_INT 85
4120: PUSH
4121: LD_INT 87
4123: PUSH
4124: LD_INT 70
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: LD_INT 11
4132: PUSH
4133: LD_INT 3
4135: PUSH
4136: LD_INT 4
4138: PUSH
4139: LD_INT 5
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: LD_INT 15
4147: PUSH
4148: LD_INT 18
4150: PUSH
4151: LD_INT 7
4153: PUSH
4154: LD_INT 17
4156: PUSH
4157: LD_INT 8
4159: PUSH
4160: LD_INT 20
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 72
4171: PUSH
4172: LD_INT 26
4174: PUSH
4175: LD_INT 69
4177: PUSH
4178: LD_INT 39
4180: PUSH
4181: LD_INT 40
4183: PUSH
4184: LD_INT 41
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 48
4195: PUSH
4196: LD_INT 49
4198: PUSH
4199: LD_INT 50
4201: PUSH
4202: LD_INT 51
4204: PUSH
4205: LD_INT 52
4207: PUSH
4208: LD_INT 53
4210: PUSH
4211: LD_INT 54
4213: PUSH
4214: LD_INT 55
4216: PUSH
4217: LD_INT 56
4219: PUSH
4220: LD_INT 60
4222: PUSH
4223: LD_INT 61
4225: PUSH
4226: LD_INT 62
4228: PUSH
4229: LD_INT 66
4231: PUSH
4232: LD_INT 67
4234: PUSH
4235: LD_INT 68
4237: PUSH
4238: LD_INT 81
4240: PUSH
4241: LD_INT 82
4243: PUSH
4244: LD_INT 83
4246: PUSH
4247: LD_INT 84
4249: PUSH
4250: LD_INT 85
4252: PUSH
4253: LD_INT 87
4255: PUSH
4256: LD_INT 88
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: ST_TO_ADDR
4315: GO 4548
4317: LD_INT 3
4319: DOUBLE
4320: EQUAL
4321: IFTRUE 4325
4323: GO 4547
4325: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4326: LD_ADDR_VAR 0 4
4330: PUSH
4331: LD_INT 46
4333: PUSH
4334: LD_INT 47
4336: PUSH
4337: LD_INT 1
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: LD_INT 82
4345: PUSH
4346: LD_INT 83
4348: PUSH
4349: LD_INT 84
4351: PUSH
4352: LD_INT 85
4354: PUSH
4355: LD_INT 86
4357: PUSH
4358: LD_INT 11
4360: PUSH
4361: LD_INT 9
4363: PUSH
4364: LD_INT 20
4366: PUSH
4367: LD_INT 19
4369: PUSH
4370: LD_INT 21
4372: PUSH
4373: LD_INT 24
4375: PUSH
4376: LD_INT 22
4378: PUSH
4379: LD_INT 25
4381: PUSH
4382: LD_INT 28
4384: PUSH
4385: LD_INT 29
4387: PUSH
4388: LD_INT 30
4390: PUSH
4391: LD_INT 31
4393: PUSH
4394: LD_INT 37
4396: PUSH
4397: LD_INT 38
4399: PUSH
4400: LD_INT 32
4402: PUSH
4403: LD_INT 27
4405: PUSH
4406: LD_INT 33
4408: PUSH
4409: LD_INT 69
4411: PUSH
4412: LD_INT 39
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 40
4420: PUSH
4421: LD_INT 71
4423: PUSH
4424: LD_INT 23
4426: PUSH
4427: LD_INT 44
4429: PUSH
4430: LD_INT 48
4432: PUSH
4433: LD_INT 49
4435: PUSH
4436: LD_INT 50
4438: PUSH
4439: LD_INT 51
4441: PUSH
4442: LD_INT 52
4444: PUSH
4445: LD_INT 53
4447: PUSH
4448: LD_INT 54
4450: PUSH
4451: LD_INT 55
4453: PUSH
4454: LD_INT 56
4456: PUSH
4457: LD_INT 57
4459: PUSH
4460: LD_INT 58
4462: PUSH
4463: LD_INT 59
4465: PUSH
4466: LD_INT 63
4468: PUSH
4469: LD_INT 64
4471: PUSH
4472: LD_INT 65
4474: PUSH
4475: LD_INT 82
4477: PUSH
4478: LD_INT 83
4480: PUSH
4481: LD_INT 84
4483: PUSH
4484: LD_INT 85
4486: PUSH
4487: LD_INT 86
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
4545: GO 4548
4547: POP
// if state > - 1 and state < 3 then
4548: LD_VAR 0 3
4552: PUSH
4553: LD_INT 1
4555: NEG
4556: GREATER
4557: PUSH
4558: LD_VAR 0 3
4562: PUSH
4563: LD_INT 3
4565: LESS
4566: AND
4567: IFFALSE 4624
// for i in result do
4569: LD_ADDR_VAR 0 5
4573: PUSH
4574: LD_VAR 0 4
4578: PUSH
4579: FOR_IN
4580: IFFALSE 4622
// if GetTech ( i , side ) <> state then
4582: LD_VAR 0 5
4586: PPUSH
4587: LD_VAR 0 1
4591: PPUSH
4592: CALL_OW 321
4596: PUSH
4597: LD_VAR 0 3
4601: NONEQUAL
4602: IFFALSE 4620
// result := result diff i ;
4604: LD_ADDR_VAR 0 4
4608: PUSH
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 5
4618: DIFF
4619: ST_TO_ADDR
4620: GO 4579
4622: POP
4623: POP
// end ;
4624: LD_VAR 0 4
4628: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4629: LD_INT 0
4631: PPUSH
4632: PPUSH
4633: PPUSH
// result := true ;
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_INT 1
4641: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4642: LD_ADDR_VAR 0 5
4646: PUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 480
4656: ST_TO_ADDR
// if not tmp then
4657: LD_VAR 0 5
4661: NOT
4662: IFFALSE 4666
// exit ;
4664: GO 4715
// for i in tmp do
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: LD_VAR 0 5
4675: PUSH
4676: FOR_IN
4677: IFFALSE 4713
// if GetTech ( i , side ) <> state_researched then
4679: LD_VAR 0 4
4683: PPUSH
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 321
4693: PUSH
4694: LD_INT 2
4696: NONEQUAL
4697: IFFALSE 4711
// begin result := false ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: LD_INT 0
4706: ST_TO_ADDR
// exit ;
4707: POP
4708: POP
4709: GO 4715
// end ;
4711: GO 4676
4713: POP
4714: POP
// end ;
4715: LD_VAR 0 3
4719: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4720: LD_INT 0
4722: PPUSH
4723: PPUSH
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
4728: PPUSH
4729: PPUSH
4730: PPUSH
4731: PPUSH
4732: PPUSH
4733: PPUSH
4734: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4735: LD_VAR 0 1
4739: NOT
4740: PUSH
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 257
4750: PUSH
4751: LD_INT 9
4753: NONEQUAL
4754: OR
4755: IFFALSE 4759
// exit ;
4757: GO 5332
// side := GetSide ( unit ) ;
4759: LD_ADDR_VAR 0 9
4763: PUSH
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 255
4773: ST_TO_ADDR
// tech_space := tech_spacanom ;
4774: LD_ADDR_VAR 0 12
4778: PUSH
4779: LD_INT 29
4781: ST_TO_ADDR
// tech_time := tech_taurad ;
4782: LD_ADDR_VAR 0 13
4786: PUSH
4787: LD_INT 28
4789: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4790: LD_ADDR_VAR 0 11
4794: PUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 310
4804: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4805: LD_VAR 0 11
4809: PPUSH
4810: CALL_OW 247
4814: PUSH
4815: LD_INT 2
4817: EQUAL
4818: IFFALSE 4822
// exit ;
4820: GO 5332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4822: LD_ADDR_VAR 0 8
4826: PUSH
4827: LD_INT 81
4829: PUSH
4830: LD_VAR 0 9
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: LD_INT 21
4844: PUSH
4845: LD_INT 3
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: ST_TO_ADDR
// if not tmp then
4865: LD_VAR 0 8
4869: NOT
4870: IFFALSE 4874
// exit ;
4872: GO 5332
// if in_unit then
4874: LD_VAR 0 11
4878: IFFALSE 4902
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4880: LD_ADDR_VAR 0 10
4884: PUSH
4885: LD_VAR 0 8
4889: PPUSH
4890: LD_VAR 0 11
4894: PPUSH
4895: CALL_OW 74
4899: ST_TO_ADDR
4900: GO 4922
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4902: LD_ADDR_VAR 0 10
4906: PUSH
4907: LD_VAR 0 8
4911: PPUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 74
4921: ST_TO_ADDR
// if not enemy then
4922: LD_VAR 0 10
4926: NOT
4927: IFFALSE 4931
// exit ;
4929: GO 5332
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4931: LD_VAR 0 11
4935: PUSH
4936: LD_VAR 0 11
4940: PPUSH
4941: LD_VAR 0 10
4945: PPUSH
4946: CALL_OW 296
4950: PUSH
4951: LD_INT 13
4953: GREATER
4954: AND
4955: PUSH
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_VAR 0 10
4965: PPUSH
4966: CALL_OW 296
4970: PUSH
4971: LD_INT 12
4973: GREATER
4974: OR
4975: IFFALSE 4979
// exit ;
4977: GO 5332
// missile := [ 1 ] ;
4979: LD_ADDR_VAR 0 14
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: EMPTY
4988: LIST
4989: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4990: LD_VAR 0 9
4994: PPUSH
4995: LD_VAR 0 12
4999: PPUSH
5000: CALL_OW 325
5004: IFFALSE 5033
// missile := Insert ( missile , missile + 1 , 2 ) ;
5006: LD_ADDR_VAR 0 14
5010: PUSH
5011: LD_VAR 0 14
5015: PPUSH
5016: LD_VAR 0 14
5020: PUSH
5021: LD_INT 1
5023: PLUS
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: CALL_OW 2
5032: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5033: LD_VAR 0 9
5037: PPUSH
5038: LD_VAR 0 13
5042: PPUSH
5043: CALL_OW 325
5047: PUSH
5048: LD_VAR 0 10
5052: PPUSH
5053: CALL_OW 255
5057: PPUSH
5058: LD_VAR 0 13
5062: PPUSH
5063: CALL_OW 325
5067: NOT
5068: AND
5069: IFFALSE 5098
// missile := Insert ( missile , missile + 1 , 3 ) ;
5071: LD_ADDR_VAR 0 14
5075: PUSH
5076: LD_VAR 0 14
5080: PPUSH
5081: LD_VAR 0 14
5085: PUSH
5086: LD_INT 1
5088: PLUS
5089: PPUSH
5090: LD_INT 3
5092: PPUSH
5093: CALL_OW 2
5097: ST_TO_ADDR
// if missile < 2 then
5098: LD_VAR 0 14
5102: PUSH
5103: LD_INT 2
5105: LESS
5106: IFFALSE 5110
// exit ;
5108: GO 5332
// x := GetX ( enemy ) ;
5110: LD_ADDR_VAR 0 4
5114: PUSH
5115: LD_VAR 0 10
5119: PPUSH
5120: CALL_OW 250
5124: ST_TO_ADDR
// y := GetY ( enemy ) ;
5125: LD_ADDR_VAR 0 5
5129: PUSH
5130: LD_VAR 0 10
5134: PPUSH
5135: CALL_OW 251
5139: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 1
5152: NEG
5153: PPUSH
5154: LD_INT 1
5156: PPUSH
5157: CALL_OW 12
5161: PLUS
5162: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 5
5172: PUSH
5173: LD_INT 1
5175: NEG
5176: PPUSH
5177: LD_INT 1
5179: PPUSH
5180: CALL_OW 12
5184: PLUS
5185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5186: LD_VAR 0 6
5190: PPUSH
5191: LD_VAR 0 7
5195: PPUSH
5196: CALL_OW 488
5200: NOT
5201: IFFALSE 5223
// begin _x := x ;
5203: LD_ADDR_VAR 0 6
5207: PUSH
5208: LD_VAR 0 4
5212: ST_TO_ADDR
// _y := y ;
5213: LD_ADDR_VAR 0 7
5217: PUSH
5218: LD_VAR 0 5
5222: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_VAR 0 14
5235: PPUSH
5236: CALL_OW 12
5240: ST_TO_ADDR
// case i of 1 :
5241: LD_VAR 0 3
5245: PUSH
5246: LD_INT 1
5248: DOUBLE
5249: EQUAL
5250: IFTRUE 5254
5252: GO 5271
5254: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5255: LD_VAR 0 1
5259: PPUSH
5260: LD_VAR 0 10
5264: PPUSH
5265: CALL_OW 115
5269: GO 5332
5271: LD_INT 2
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5279
5277: GO 5301
5279: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5280: LD_VAR 0 1
5284: PPUSH
5285: LD_VAR 0 6
5289: PPUSH
5290: LD_VAR 0 7
5294: PPUSH
5295: CALL_OW 153
5299: GO 5332
5301: LD_INT 3
5303: DOUBLE
5304: EQUAL
5305: IFTRUE 5309
5307: GO 5331
5309: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5310: LD_VAR 0 1
5314: PPUSH
5315: LD_VAR 0 6
5319: PPUSH
5320: LD_VAR 0 7
5324: PPUSH
5325: CALL_OW 154
5329: GO 5332
5331: POP
// end ;
5332: LD_VAR 0 2
5336: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5337: LD_INT 0
5339: PPUSH
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
5344: PPUSH
// if not unit or not building then
5345: LD_VAR 0 1
5349: NOT
5350: PUSH
5351: LD_VAR 0 2
5355: NOT
5356: OR
5357: IFFALSE 5361
// exit ;
5359: GO 5519
// x := GetX ( building ) ;
5361: LD_ADDR_VAR 0 5
5365: PUSH
5366: LD_VAR 0 2
5370: PPUSH
5371: CALL_OW 250
5375: ST_TO_ADDR
// y := GetY ( building ) ;
5376: LD_ADDR_VAR 0 6
5380: PUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: CALL_OW 251
5390: ST_TO_ADDR
// for i = 0 to 5 do
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: DOUBLE
5397: LD_INT 0
5399: DEC
5400: ST_TO_ADDR
5401: LD_INT 5
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5517
// begin _x := ShiftX ( x , i , 3 ) ;
5407: LD_ADDR_VAR 0 7
5411: PUSH
5412: LD_VAR 0 5
5416: PPUSH
5417: LD_VAR 0 4
5421: PPUSH
5422: LD_INT 3
5424: PPUSH
5425: CALL_OW 272
5429: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5430: LD_ADDR_VAR 0 8
5434: PUSH
5435: LD_VAR 0 6
5439: PPUSH
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_INT 3
5447: PPUSH
5448: CALL_OW 273
5452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5453: LD_VAR 0 7
5457: PPUSH
5458: LD_VAR 0 8
5462: PPUSH
5463: CALL_OW 488
5467: NOT
5468: IFFALSE 5472
// continue ;
5470: GO 5404
// if HexInfo ( _x , _y ) = 0 then
5472: LD_VAR 0 7
5476: PPUSH
5477: LD_VAR 0 8
5481: PPUSH
5482: CALL_OW 428
5486: PUSH
5487: LD_INT 0
5489: EQUAL
5490: IFFALSE 5515
// begin ComMoveXY ( unit , _x , _y ) ;
5492: LD_VAR 0 1
5496: PPUSH
5497: LD_VAR 0 7
5501: PPUSH
5502: LD_VAR 0 8
5506: PPUSH
5507: CALL_OW 111
// exit ;
5511: POP
5512: POP
5513: GO 5519
// end ; end ;
5515: GO 5404
5517: POP
5518: POP
// end ;
5519: LD_VAR 0 3
5523: RET
// export function ScanBase ( side , base_area ) ; begin
5524: LD_INT 0
5526: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5527: LD_ADDR_VAR 0 3
5531: PUSH
5532: LD_VAR 0 2
5536: PPUSH
5537: LD_INT 81
5539: PUSH
5540: LD_VAR 0 1
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 70
5553: ST_TO_ADDR
// end ;
5554: LD_VAR 0 3
5558: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5559: LD_INT 0
5561: PPUSH
5562: PPUSH
5563: PPUSH
5564: PPUSH
// result := false ;
5565: LD_ADDR_VAR 0 2
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// side := GetSide ( unit ) ;
5573: LD_ADDR_VAR 0 3
5577: PUSH
5578: LD_VAR 0 1
5582: PPUSH
5583: CALL_OW 255
5587: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5588: LD_ADDR_VAR 0 4
5592: PUSH
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 248
5602: ST_TO_ADDR
// case nat of 1 :
5603: LD_VAR 0 4
5607: PUSH
5608: LD_INT 1
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5627
5616: POP
// tech := tech_lassight ; 2 :
5617: LD_ADDR_VAR 0 5
5621: PUSH
5622: LD_INT 12
5624: ST_TO_ADDR
5625: GO 5666
5627: LD_INT 2
5629: DOUBLE
5630: EQUAL
5631: IFTRUE 5635
5633: GO 5646
5635: POP
// tech := tech_mortar ; 3 :
5636: LD_ADDR_VAR 0 5
5640: PUSH
5641: LD_INT 41
5643: ST_TO_ADDR
5644: GO 5666
5646: LD_INT 3
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5654
5652: GO 5665
5654: POP
// tech := tech_bazooka ; end ;
5655: LD_ADDR_VAR 0 5
5659: PUSH
5660: LD_INT 44
5662: ST_TO_ADDR
5663: GO 5666
5665: POP
// if Researched ( side , tech ) then
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_VAR 0 5
5675: PPUSH
5676: CALL_OW 325
5680: IFFALSE 5707
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_INT 5
5689: PUSH
5690: LD_INT 8
5692: PUSH
5693: LD_INT 9
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: LD_VAR 0 4
5705: ARRAY
5706: ST_TO_ADDR
// end ;
5707: LD_VAR 0 2
5711: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
// if not mines then
5717: LD_VAR 0 2
5721: NOT
5722: IFFALSE 5726
// exit ;
5724: GO 5870
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5726: LD_ADDR_VAR 0 5
5730: PUSH
5731: LD_INT 81
5733: PUSH
5734: LD_VAR 0 1
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 3
5745: PUSH
5746: LD_INT 21
5748: PUSH
5749: LD_INT 3
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PPUSH
5764: CALL_OW 69
5768: ST_TO_ADDR
// for i in mines do
5769: LD_ADDR_VAR 0 4
5773: PUSH
5774: LD_VAR 0 2
5778: PUSH
5779: FOR_IN
5780: IFFALSE 5868
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5782: LD_VAR 0 4
5786: PUSH
5787: LD_INT 1
5789: ARRAY
5790: PPUSH
5791: LD_VAR 0 4
5795: PUSH
5796: LD_INT 2
5798: ARRAY
5799: PPUSH
5800: CALL_OW 458
5804: NOT
5805: IFFALSE 5809
// continue ;
5807: GO 5779
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 1
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 2
5825: ARRAY
5826: PPUSH
5827: CALL_OW 428
5831: PUSH
5832: LD_VAR 0 5
5836: IN
5837: IFFALSE 5866
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5839: LD_VAR 0 4
5843: PUSH
5844: LD_INT 1
5846: ARRAY
5847: PPUSH
5848: LD_VAR 0 4
5852: PUSH
5853: LD_INT 2
5855: ARRAY
5856: PPUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 456
// end ;
5866: GO 5779
5868: POP
5869: POP
// end ;
5870: LD_VAR 0 3
5874: RET
// export function Count ( array ) ; var i ; begin
5875: LD_INT 0
5877: PPUSH
5878: PPUSH
// result := 0 ;
5879: LD_ADDR_VAR 0 2
5883: PUSH
5884: LD_INT 0
5886: ST_TO_ADDR
// for i in array do
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_VAR 0 1
5896: PUSH
5897: FOR_IN
5898: IFFALSE 5922
// if i then
5900: LD_VAR 0 3
5904: IFFALSE 5920
// result := result + 1 ;
5906: LD_ADDR_VAR 0 2
5910: PUSH
5911: LD_VAR 0 2
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: ST_TO_ADDR
5920: GO 5897
5922: POP
5923: POP
// end ;
5924: LD_VAR 0 2
5928: RET
// export function IsEmpty ( building ) ; begin
5929: LD_INT 0
5931: PPUSH
// if not building then
5932: LD_VAR 0 1
5936: NOT
5937: IFFALSE 5941
// exit ;
5939: GO 5984
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5941: LD_ADDR_VAR 0 2
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: CALL_OW 255
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 58
5970: PUSH
5971: EMPTY
5972: LIST
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 69
5982: IN
5983: ST_TO_ADDR
// end ;
5984: LD_VAR 0 2
5988: RET
// export function IsNotFull ( building ) ; begin
5989: LD_INT 0
5991: PPUSH
// if not building then
5992: LD_VAR 0 1
5996: NOT
5997: IFFALSE 6001
// exit ;
5999: GO 6020
// result := UnitsInside ( building ) < 6 ;
6001: LD_ADDR_VAR 0 2
6005: PUSH
6006: LD_VAR 0 1
6010: PPUSH
6011: CALL_OW 313
6015: PUSH
6016: LD_INT 6
6018: LESS
6019: ST_TO_ADDR
// end ;
6020: LD_VAR 0 2
6024: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6025: LD_INT 0
6027: PPUSH
6028: PPUSH
6029: PPUSH
6030: PPUSH
// tmp := [ ] ;
6031: LD_ADDR_VAR 0 3
6035: PUSH
6036: EMPTY
6037: ST_TO_ADDR
// list := [ ] ;
6038: LD_ADDR_VAR 0 5
6042: PUSH
6043: EMPTY
6044: ST_TO_ADDR
// for i = 16 to 25 do
6045: LD_ADDR_VAR 0 4
6049: PUSH
6050: DOUBLE
6051: LD_INT 16
6053: DEC
6054: ST_TO_ADDR
6055: LD_INT 25
6057: PUSH
6058: FOR_TO
6059: IFFALSE 6132
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: LD_VAR 0 3
6070: PUSH
6071: LD_INT 22
6073: PUSH
6074: LD_VAR 0 1
6078: PPUSH
6079: CALL_OW 255
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 91
6090: PUSH
6091: LD_VAR 0 1
6095: PUSH
6096: LD_INT 6
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 30
6106: PUSH
6107: LD_VAR 0 4
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: EMPTY
6122: LIST
6123: PPUSH
6124: CALL_OW 69
6128: ADD
6129: ST_TO_ADDR
6130: GO 6058
6132: POP
6133: POP
// for i = 1 to tmp do
6134: LD_ADDR_VAR 0 4
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_VAR 0 3
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6238
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6152: LD_ADDR_VAR 0 5
6156: PUSH
6157: LD_VAR 0 5
6161: PUSH
6162: LD_VAR 0 3
6166: PUSH
6167: LD_VAR 0 4
6171: ARRAY
6172: PPUSH
6173: CALL_OW 266
6177: PUSH
6178: LD_VAR 0 3
6182: PUSH
6183: LD_VAR 0 4
6187: ARRAY
6188: PPUSH
6189: CALL_OW 250
6193: PUSH
6194: LD_VAR 0 3
6198: PUSH
6199: LD_VAR 0 4
6203: ARRAY
6204: PPUSH
6205: CALL_OW 251
6209: PUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_VAR 0 4
6219: ARRAY
6220: PPUSH
6221: CALL_OW 254
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: ADD
6235: ST_TO_ADDR
6236: GO 6149
6238: POP
6239: POP
// result := list ;
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_VAR 0 5
6249: ST_TO_ADDR
// end ;
6250: LD_VAR 0 2
6254: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
6261: PPUSH
6262: PPUSH
6263: PPUSH
// if not factory then
6264: LD_VAR 0 1
6268: NOT
6269: IFFALSE 6273
// exit ;
6271: GO 6866
// if control = control_apeman then
6273: LD_VAR 0 4
6277: PUSH
6278: LD_INT 5
6280: EQUAL
6281: IFFALSE 6390
// begin tmp := UnitsInside ( factory ) ;
6283: LD_ADDR_VAR 0 8
6287: PUSH
6288: LD_VAR 0 1
6292: PPUSH
6293: CALL_OW 313
6297: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6298: LD_VAR 0 8
6302: PPUSH
6303: LD_INT 25
6305: PUSH
6306: LD_INT 12
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 72
6317: NOT
6318: IFFALSE 6328
// control := control_manual ;
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 1
6327: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6328: LD_ADDR_VAR 0 8
6332: PUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL 6025 0 1
6342: ST_TO_ADDR
// if tmp then
6343: LD_VAR 0 8
6347: IFFALSE 6390
// begin for i in tmp do
6349: LD_ADDR_VAR 0 7
6353: PUSH
6354: LD_VAR 0 8
6358: PUSH
6359: FOR_IN
6360: IFFALSE 6388
// if i [ 1 ] = b_ext_radio then
6362: LD_VAR 0 7
6366: PUSH
6367: LD_INT 1
6369: ARRAY
6370: PUSH
6371: LD_INT 22
6373: EQUAL
6374: IFFALSE 6386
// begin control := control_remote ;
6376: LD_ADDR_VAR 0 4
6380: PUSH
6381: LD_INT 2
6383: ST_TO_ADDR
// break ;
6384: GO 6388
// end ;
6386: GO 6359
6388: POP
6389: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_VAR 0 2
6399: PPUSH
6400: LD_VAR 0 3
6404: PPUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: LD_VAR 0 5
6414: PPUSH
6415: CALL_OW 448
6419: IFFALSE 6454
// begin result := [ chassis , engine , control , weapon ] ;
6421: LD_ADDR_VAR 0 6
6425: PUSH
6426: LD_VAR 0 2
6430: PUSH
6431: LD_VAR 0 3
6435: PUSH
6436: LD_VAR 0 4
6440: PUSH
6441: LD_VAR 0 5
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: ST_TO_ADDR
// exit ;
6452: GO 6866
// end ; _chassis := AvailableChassisList ( factory ) ;
6454: LD_ADDR_VAR 0 9
6458: PUSH
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 475
6468: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6469: LD_ADDR_VAR 0 11
6473: PUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 476
6483: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6484: LD_ADDR_VAR 0 12
6488: PUSH
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 477
6498: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6499: LD_ADDR_VAR 0 10
6503: PUSH
6504: LD_VAR 0 1
6508: PPUSH
6509: CALL_OW 478
6513: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6514: LD_VAR 0 9
6518: NOT
6519: PUSH
6520: LD_VAR 0 11
6524: NOT
6525: OR
6526: PUSH
6527: LD_VAR 0 12
6531: NOT
6532: OR
6533: PUSH
6534: LD_VAR 0 10
6538: NOT
6539: OR
6540: IFFALSE 6575
// begin result := [ chassis , engine , control , weapon ] ;
6542: LD_ADDR_VAR 0 6
6546: PUSH
6547: LD_VAR 0 2
6551: PUSH
6552: LD_VAR 0 3
6556: PUSH
6557: LD_VAR 0 4
6561: PUSH
6562: LD_VAR 0 5
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: ST_TO_ADDR
// exit ;
6573: GO 6866
// end ; if not chassis in _chassis then
6575: LD_VAR 0 2
6579: PUSH
6580: LD_VAR 0 9
6584: IN
6585: NOT
6586: IFFALSE 6612
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: LD_VAR 0 9
6597: PUSH
6598: LD_INT 1
6600: PPUSH
6601: LD_VAR 0 9
6605: PPUSH
6606: CALL_OW 12
6610: ARRAY
6611: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6612: LD_VAR 0 2
6616: PPUSH
6617: LD_VAR 0 3
6621: PPUSH
6622: CALL 6871 0 2
6626: NOT
6627: IFFALSE 6686
// repeat engine := _engine [ 1 ] ;
6629: LD_ADDR_VAR 0 3
6633: PUSH
6634: LD_VAR 0 11
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6643: LD_ADDR_VAR 0 11
6647: PUSH
6648: LD_VAR 0 11
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: CALL_OW 3
6660: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6661: LD_VAR 0 2
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: CALL 6871 0 2
6675: PUSH
6676: LD_VAR 0 11
6680: PUSH
6681: EMPTY
6682: EQUAL
6683: OR
6684: IFFALSE 6629
// if not control in _control then
6686: LD_VAR 0 4
6690: PUSH
6691: LD_VAR 0 12
6695: IN
6696: NOT
6697: IFFALSE 6723
// control := _control [ rand ( 1 , _control ) ] ;
6699: LD_ADDR_VAR 0 4
6703: PUSH
6704: LD_VAR 0 12
6708: PUSH
6709: LD_INT 1
6711: PPUSH
6712: LD_VAR 0 12
6716: PPUSH
6717: CALL_OW 12
6721: ARRAY
6722: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6723: LD_VAR 0 2
6727: PPUSH
6728: LD_VAR 0 5
6732: PPUSH
6733: CALL 7091 0 2
6737: NOT
6738: IFFALSE 6797
// repeat weapon := _weapon [ 1 ] ;
6740: LD_ADDR_VAR 0 5
6744: PUSH
6745: LD_VAR 0 10
6749: PUSH
6750: LD_INT 1
6752: ARRAY
6753: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6754: LD_ADDR_VAR 0 10
6758: PUSH
6759: LD_VAR 0 10
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 3
6771: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6772: LD_VAR 0 2
6776: PPUSH
6777: LD_VAR 0 5
6781: PPUSH
6782: CALL 7091 0 2
6786: PUSH
6787: LD_VAR 0 10
6791: PUSH
6792: EMPTY
6793: EQUAL
6794: OR
6795: IFFALSE 6740
// result := [ ] ;
6797: LD_ADDR_VAR 0 6
6801: PUSH
6802: EMPTY
6803: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6804: LD_VAR 0 1
6808: PPUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_VAR 0 3
6818: PPUSH
6819: LD_VAR 0 4
6823: PPUSH
6824: LD_VAR 0 5
6828: PPUSH
6829: CALL_OW 448
6833: IFFALSE 6866
// result := [ chassis , engine , control , weapon ] ;
6835: LD_ADDR_VAR 0 6
6839: PUSH
6840: LD_VAR 0 2
6844: PUSH
6845: LD_VAR 0 3
6849: PUSH
6850: LD_VAR 0 4
6854: PUSH
6855: LD_VAR 0 5
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
// end ;
6866: LD_VAR 0 6
6870: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6871: LD_INT 0
6873: PPUSH
// if not chassis or not engine then
6874: LD_VAR 0 1
6878: NOT
6879: PUSH
6880: LD_VAR 0 2
6884: NOT
6885: OR
6886: IFFALSE 6890
// exit ;
6888: GO 7086
// case engine of engine_solar :
6890: LD_VAR 0 2
6894: PUSH
6895: LD_INT 2
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6941
6903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: LD_INT 1
6923: PUSH
6924: LD_INT 2
6926: PUSH
6927: LD_INT 3
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: ST_TO_ADDR
6939: GO 7070
6941: LD_INT 1
6943: DOUBLE
6944: EQUAL
6945: IFTRUE 6949
6947: GO 7011
6949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_INT 11
6957: PUSH
6958: LD_INT 12
6960: PUSH
6961: LD_INT 13
6963: PUSH
6964: LD_INT 14
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: LD_INT 4
6978: PUSH
6979: LD_INT 5
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 23
6987: PUSH
6988: LD_INT 22
6990: PUSH
6991: LD_INT 24
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: ST_TO_ADDR
7009: GO 7070
7011: LD_INT 3
7013: DOUBLE
7014: EQUAL
7015: IFTRUE 7019
7017: GO 7069
7019: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_INT 13
7027: PUSH
7028: LD_INT 14
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: LD_INT 4
7039: PUSH
7040: LD_INT 5
7042: PUSH
7043: LD_INT 21
7045: PUSH
7046: LD_INT 22
7048: PUSH
7049: LD_INT 23
7051: PUSH
7052: LD_INT 24
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: ST_TO_ADDR
7067: GO 7070
7069: POP
// result := ( chassis in result ) ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: LD_VAR 0 1
7079: PUSH
7080: LD_VAR 0 3
7084: IN
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 3
7090: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7091: LD_INT 0
7093: PPUSH
// if not chassis or not weapon then
7094: LD_VAR 0 1
7098: NOT
7099: PUSH
7100: LD_VAR 0 2
7104: NOT
7105: OR
7106: IFFALSE 7110
// exit ;
7108: GO 8172
// case weapon of us_machine_gun :
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 2
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7153
7123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7124: LD_ADDR_VAR 0 3
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 3
7137: PUSH
7138: LD_INT 4
7140: PUSH
7141: LD_INT 5
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: ST_TO_ADDR
7151: GO 8156
7153: LD_INT 3
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7191
7161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_INT 1
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: LD_INT 4
7178: PUSH
7179: LD_INT 5
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 8156
7191: LD_INT 11
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7199
7197: GO 7229
7199: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_INT 1
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: ST_TO_ADDR
7227: GO 8156
7229: LD_INT 4
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7263
7237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 4
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: ST_TO_ADDR
7261: GO 8156
7263: LD_INT 5
7265: DOUBLE
7266: EQUAL
7267: IFTRUE 7271
7269: GO 7297
7271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7272: LD_ADDR_VAR 0 3
7276: PUSH
7277: LD_INT 2
7279: PUSH
7280: LD_INT 3
7282: PUSH
7283: LD_INT 4
7285: PUSH
7286: LD_INT 5
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: ST_TO_ADDR
7295: GO 8156
7297: LD_INT 9
7299: DOUBLE
7300: EQUAL
7301: IFTRUE 7305
7303: GO 7331
7305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7306: LD_ADDR_VAR 0 3
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: LD_INT 3
7316: PUSH
7317: LD_INT 4
7319: PUSH
7320: LD_INT 5
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: ST_TO_ADDR
7329: GO 8156
7331: LD_INT 7
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7365
7339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: LD_INT 3
7350: PUSH
7351: LD_INT 4
7353: PUSH
7354: LD_INT 5
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: ST_TO_ADDR
7363: GO 8156
7365: LD_INT 12
7367: DOUBLE
7368: EQUAL
7369: IFTRUE 7373
7371: GO 7399
7373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7374: LD_ADDR_VAR 0 3
7378: PUSH
7379: LD_INT 2
7381: PUSH
7382: LD_INT 3
7384: PUSH
7385: LD_INT 4
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: ST_TO_ADDR
7397: GO 8156
7399: LD_INT 13
7401: DOUBLE
7402: EQUAL
7403: IFTRUE 7407
7405: GO 7433
7407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: LD_INT 3
7418: PUSH
7419: LD_INT 4
7421: PUSH
7422: LD_INT 5
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: ST_TO_ADDR
7431: GO 8156
7433: LD_INT 14
7435: DOUBLE
7436: EQUAL
7437: IFTRUE 7441
7439: GO 7459
7441: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7442: LD_ADDR_VAR 0 3
7446: PUSH
7447: LD_INT 4
7449: PUSH
7450: LD_INT 5
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: ST_TO_ADDR
7457: GO 8156
7459: LD_INT 6
7461: DOUBLE
7462: EQUAL
7463: IFTRUE 7467
7465: GO 7485
7467: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7468: LD_ADDR_VAR 0 3
7472: PUSH
7473: LD_INT 4
7475: PUSH
7476: LD_INT 5
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: ST_TO_ADDR
7483: GO 8156
7485: LD_INT 10
7487: DOUBLE
7488: EQUAL
7489: IFTRUE 7493
7491: GO 7511
7493: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7494: LD_ADDR_VAR 0 3
7498: PUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 5
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: ST_TO_ADDR
7509: GO 8156
7511: LD_INT 22
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7545
7519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7520: LD_ADDR_VAR 0 3
7524: PUSH
7525: LD_INT 11
7527: PUSH
7528: LD_INT 12
7530: PUSH
7531: LD_INT 13
7533: PUSH
7534: LD_INT 14
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: ST_TO_ADDR
7543: GO 8156
7545: LD_INT 23
7547: DOUBLE
7548: EQUAL
7549: IFTRUE 7553
7551: GO 7579
7553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7554: LD_ADDR_VAR 0 3
7558: PUSH
7559: LD_INT 11
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: LD_INT 13
7567: PUSH
7568: LD_INT 14
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: ST_TO_ADDR
7577: GO 8156
7579: LD_INT 24
7581: DOUBLE
7582: EQUAL
7583: IFTRUE 7587
7585: GO 7613
7587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7588: LD_ADDR_VAR 0 3
7592: PUSH
7593: LD_INT 11
7595: PUSH
7596: LD_INT 12
7598: PUSH
7599: LD_INT 13
7601: PUSH
7602: LD_INT 14
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: ST_TO_ADDR
7611: GO 8156
7613: LD_INT 30
7615: DOUBLE
7616: EQUAL
7617: IFTRUE 7621
7619: GO 7647
7621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7622: LD_ADDR_VAR 0 3
7626: PUSH
7627: LD_INT 11
7629: PUSH
7630: LD_INT 12
7632: PUSH
7633: LD_INT 13
7635: PUSH
7636: LD_INT 14
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
7645: GO 8156
7647: LD_INT 25
7649: DOUBLE
7650: EQUAL
7651: IFTRUE 7655
7653: GO 7673
7655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7656: LD_ADDR_VAR 0 3
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: LD_INT 14
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: ST_TO_ADDR
7671: GO 8156
7673: LD_INT 27
7675: DOUBLE
7676: EQUAL
7677: IFTRUE 7681
7679: GO 7699
7681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_INT 13
7689: PUSH
7690: LD_INT 14
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: ST_TO_ADDR
7697: GO 8156
7699: LD_EXP 91
7703: DOUBLE
7704: EQUAL
7705: IFTRUE 7709
7707: GO 7735
7709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7710: LD_ADDR_VAR 0 3
7714: PUSH
7715: LD_INT 11
7717: PUSH
7718: LD_INT 12
7720: PUSH
7721: LD_INT 13
7723: PUSH
7724: LD_INT 14
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: ST_TO_ADDR
7733: GO 8156
7735: LD_INT 28
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7761
7743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7744: LD_ADDR_VAR 0 3
7748: PUSH
7749: LD_INT 13
7751: PUSH
7752: LD_INT 14
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: ST_TO_ADDR
7759: GO 8156
7761: LD_INT 29
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7787
7769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7770: LD_ADDR_VAR 0 3
7774: PUSH
7775: LD_INT 13
7777: PUSH
7778: LD_INT 14
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
7785: GO 8156
7787: LD_INT 31
7789: DOUBLE
7790: EQUAL
7791: IFTRUE 7795
7793: GO 7813
7795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7796: LD_ADDR_VAR 0 3
7800: PUSH
7801: LD_INT 13
7803: PUSH
7804: LD_INT 14
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: ST_TO_ADDR
7811: GO 8156
7813: LD_INT 26
7815: DOUBLE
7816: EQUAL
7817: IFTRUE 7821
7819: GO 7839
7821: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7822: LD_ADDR_VAR 0 3
7826: PUSH
7827: LD_INT 13
7829: PUSH
7830: LD_INT 14
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: ST_TO_ADDR
7837: GO 8156
7839: LD_INT 42
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7873
7847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7848: LD_ADDR_VAR 0 3
7852: PUSH
7853: LD_INT 21
7855: PUSH
7856: LD_INT 22
7858: PUSH
7859: LD_INT 23
7861: PUSH
7862: LD_INT 24
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
7871: GO 8156
7873: LD_INT 43
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7907
7881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7882: LD_ADDR_VAR 0 3
7886: PUSH
7887: LD_INT 21
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 23
7895: PUSH
7896: LD_INT 24
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: ST_TO_ADDR
7905: GO 8156
7907: LD_INT 44
7909: DOUBLE
7910: EQUAL
7911: IFTRUE 7915
7913: GO 7941
7915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7916: LD_ADDR_VAR 0 3
7920: PUSH
7921: LD_INT 21
7923: PUSH
7924: LD_INT 22
7926: PUSH
7927: LD_INT 23
7929: PUSH
7930: LD_INT 24
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
7939: GO 8156
7941: LD_INT 45
7943: DOUBLE
7944: EQUAL
7945: IFTRUE 7949
7947: GO 7975
7949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7950: LD_ADDR_VAR 0 3
7954: PUSH
7955: LD_INT 21
7957: PUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 23
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 8156
7975: LD_INT 49
7977: DOUBLE
7978: EQUAL
7979: IFTRUE 7983
7981: GO 8009
7983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7984: LD_ADDR_VAR 0 3
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 22
7994: PUSH
7995: LD_INT 23
7997: PUSH
7998: LD_INT 24
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
8007: GO 8156
8009: LD_INT 51
8011: DOUBLE
8012: EQUAL
8013: IFTRUE 8017
8015: GO 8043
8017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8018: LD_ADDR_VAR 0 3
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_INT 23
8031: PUSH
8032: LD_INT 24
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: ST_TO_ADDR
8041: GO 8156
8043: LD_INT 52
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8077
8051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8052: LD_ADDR_VAR 0 3
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 22
8062: PUSH
8063: LD_INT 23
8065: PUSH
8066: LD_INT 24
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
8075: GO 8156
8077: LD_INT 53
8079: DOUBLE
8080: EQUAL
8081: IFTRUE 8085
8083: GO 8103
8085: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8086: LD_ADDR_VAR 0 3
8090: PUSH
8091: LD_INT 23
8093: PUSH
8094: LD_INT 24
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: ST_TO_ADDR
8101: GO 8156
8103: LD_INT 46
8105: DOUBLE
8106: EQUAL
8107: IFTRUE 8111
8109: GO 8129
8111: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8112: LD_ADDR_VAR 0 3
8116: PUSH
8117: LD_INT 23
8119: PUSH
8120: LD_INT 24
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: ST_TO_ADDR
8127: GO 8156
8129: LD_INT 47
8131: DOUBLE
8132: EQUAL
8133: IFTRUE 8137
8135: GO 8155
8137: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8138: LD_ADDR_VAR 0 3
8142: PUSH
8143: LD_INT 23
8145: PUSH
8146: LD_INT 24
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: ST_TO_ADDR
8153: GO 8156
8155: POP
// result := ( chassis in result ) ;
8156: LD_ADDR_VAR 0 3
8160: PUSH
8161: LD_VAR 0 1
8165: PUSH
8166: LD_VAR 0 3
8170: IN
8171: ST_TO_ADDR
// end ;
8172: LD_VAR 0 3
8176: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8177: LD_INT 0
8179: PPUSH
8180: PPUSH
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
// result := array ;
8186: LD_ADDR_VAR 0 5
8190: PUSH
8191: LD_VAR 0 1
8195: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8196: LD_VAR 0 1
8200: NOT
8201: PUSH
8202: LD_VAR 0 2
8206: NOT
8207: OR
8208: PUSH
8209: LD_VAR 0 3
8213: NOT
8214: OR
8215: PUSH
8216: LD_VAR 0 2
8220: PUSH
8221: LD_VAR 0 1
8225: GREATER
8226: OR
8227: PUSH
8228: LD_VAR 0 3
8232: PUSH
8233: LD_VAR 0 1
8237: GREATER
8238: OR
8239: IFFALSE 8243
// exit ;
8241: GO 8539
// if direction then
8243: LD_VAR 0 4
8247: IFFALSE 8311
// begin d := 1 ;
8249: LD_ADDR_VAR 0 9
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if i_from > i_to then
8257: LD_VAR 0 2
8261: PUSH
8262: LD_VAR 0 3
8266: GREATER
8267: IFFALSE 8293
// length := ( array - i_from ) + i_to else
8269: LD_ADDR_VAR 0 11
8273: PUSH
8274: LD_VAR 0 1
8278: PUSH
8279: LD_VAR 0 2
8283: MINUS
8284: PUSH
8285: LD_VAR 0 3
8289: PLUS
8290: ST_TO_ADDR
8291: GO 8309
// length := i_to - i_from ;
8293: LD_ADDR_VAR 0 11
8297: PUSH
8298: LD_VAR 0 3
8302: PUSH
8303: LD_VAR 0 2
8307: MINUS
8308: ST_TO_ADDR
// end else
8309: GO 8372
// begin d := - 1 ;
8311: LD_ADDR_VAR 0 9
8315: PUSH
8316: LD_INT 1
8318: NEG
8319: ST_TO_ADDR
// if i_from > i_to then
8320: LD_VAR 0 2
8324: PUSH
8325: LD_VAR 0 3
8329: GREATER
8330: IFFALSE 8350
// length := i_from - i_to else
8332: LD_ADDR_VAR 0 11
8336: PUSH
8337: LD_VAR 0 2
8341: PUSH
8342: LD_VAR 0 3
8346: MINUS
8347: ST_TO_ADDR
8348: GO 8372
// length := ( array - i_to ) + i_from ;
8350: LD_ADDR_VAR 0 11
8354: PUSH
8355: LD_VAR 0 1
8359: PUSH
8360: LD_VAR 0 3
8364: MINUS
8365: PUSH
8366: LD_VAR 0 2
8370: PLUS
8371: ST_TO_ADDR
// end ; if not length then
8372: LD_VAR 0 11
8376: NOT
8377: IFFALSE 8381
// exit ;
8379: GO 8539
// tmp := array ;
8381: LD_ADDR_VAR 0 10
8385: PUSH
8386: LD_VAR 0 1
8390: ST_TO_ADDR
// for i = 1 to length do
8391: LD_ADDR_VAR 0 6
8395: PUSH
8396: DOUBLE
8397: LD_INT 1
8399: DEC
8400: ST_TO_ADDR
8401: LD_VAR 0 11
8405: PUSH
8406: FOR_TO
8407: IFFALSE 8527
// begin for j = 1 to array do
8409: LD_ADDR_VAR 0 7
8413: PUSH
8414: DOUBLE
8415: LD_INT 1
8417: DEC
8418: ST_TO_ADDR
8419: LD_VAR 0 1
8423: PUSH
8424: FOR_TO
8425: IFFALSE 8513
// begin k := j + d ;
8427: LD_ADDR_VAR 0 8
8431: PUSH
8432: LD_VAR 0 7
8436: PUSH
8437: LD_VAR 0 9
8441: PLUS
8442: ST_TO_ADDR
// if k > array then
8443: LD_VAR 0 8
8447: PUSH
8448: LD_VAR 0 1
8452: GREATER
8453: IFFALSE 8463
// k := 1 ;
8455: LD_ADDR_VAR 0 8
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// if not k then
8463: LD_VAR 0 8
8467: NOT
8468: IFFALSE 8480
// k := array ;
8470: LD_ADDR_VAR 0 8
8474: PUSH
8475: LD_VAR 0 1
8479: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8480: LD_ADDR_VAR 0 10
8484: PUSH
8485: LD_VAR 0 10
8489: PPUSH
8490: LD_VAR 0 8
8494: PPUSH
8495: LD_VAR 0 1
8499: PUSH
8500: LD_VAR 0 7
8504: ARRAY
8505: PPUSH
8506: CALL_OW 1
8510: ST_TO_ADDR
// end ;
8511: GO 8424
8513: POP
8514: POP
// array := tmp ;
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_VAR 0 10
8524: ST_TO_ADDR
// end ;
8525: GO 8406
8527: POP
8528: POP
// result := array ;
8529: LD_ADDR_VAR 0 5
8533: PUSH
8534: LD_VAR 0 1
8538: ST_TO_ADDR
// end ;
8539: LD_VAR 0 5
8543: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8544: LD_INT 0
8546: PPUSH
8547: PPUSH
// result := 0 ;
8548: LD_ADDR_VAR 0 3
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// if not array or not value in array then
8556: LD_VAR 0 1
8560: NOT
8561: PUSH
8562: LD_VAR 0 2
8566: PUSH
8567: LD_VAR 0 1
8571: IN
8572: NOT
8573: OR
8574: IFFALSE 8578
// exit ;
8576: GO 8632
// for i = 1 to array do
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: DOUBLE
8584: LD_INT 1
8586: DEC
8587: ST_TO_ADDR
8588: LD_VAR 0 1
8592: PUSH
8593: FOR_TO
8594: IFFALSE 8630
// if value = array [ i ] then
8596: LD_VAR 0 2
8600: PUSH
8601: LD_VAR 0 1
8605: PUSH
8606: LD_VAR 0 4
8610: ARRAY
8611: EQUAL
8612: IFFALSE 8628
// begin result := i ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_VAR 0 4
8623: ST_TO_ADDR
// exit ;
8624: POP
8625: POP
8626: GO 8632
// end ;
8628: GO 8593
8630: POP
8631: POP
// end ;
8632: LD_VAR 0 3
8636: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8637: LD_INT 0
8639: PPUSH
// vc_chassis := chassis ;
8640: LD_ADDR_OWVAR 37
8644: PUSH
8645: LD_VAR 0 1
8649: ST_TO_ADDR
// vc_engine := engine ;
8650: LD_ADDR_OWVAR 39
8654: PUSH
8655: LD_VAR 0 2
8659: ST_TO_ADDR
// vc_control := control ;
8660: LD_ADDR_OWVAR 38
8664: PUSH
8665: LD_VAR 0 3
8669: ST_TO_ADDR
// vc_weapon := weapon ;
8670: LD_ADDR_OWVAR 40
8674: PUSH
8675: LD_VAR 0 4
8679: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8680: LD_ADDR_OWVAR 41
8684: PUSH
8685: LD_VAR 0 5
8689: ST_TO_ADDR
// end ;
8690: LD_VAR 0 6
8694: RET
// export function WantPlant ( unit ) ; var task ; begin
8695: LD_INT 0
8697: PPUSH
8698: PPUSH
// result := false ;
8699: LD_ADDR_VAR 0 2
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 437
8721: ST_TO_ADDR
// if task then
8722: LD_VAR 0 3
8726: IFFALSE 8754
// if task [ 1 ] [ 1 ] = p then
8728: LD_VAR 0 3
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PUSH
8741: LD_STRING p
8743: EQUAL
8744: IFFALSE 8754
// result := true ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// end ;
8754: LD_VAR 0 2
8758: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
// if pos < 1 then
8765: LD_VAR 0 2
8769: PUSH
8770: LD_INT 1
8772: LESS
8773: IFFALSE 8777
// exit ;
8775: GO 9080
// if pos = 1 then
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 1
8784: EQUAL
8785: IFFALSE 8818
// result := Replace ( arr , pos [ 1 ] , value ) else
8787: LD_ADDR_VAR 0 4
8791: PUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: LD_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: ARRAY
8805: PPUSH
8806: LD_VAR 0 3
8810: PPUSH
8811: CALL_OW 1
8815: ST_TO_ADDR
8816: GO 9080
// begin tmp := arr ;
8818: LD_ADDR_VAR 0 6
8822: PUSH
8823: LD_VAR 0 1
8827: ST_TO_ADDR
// s_arr := [ tmp ] ;
8828: LD_ADDR_VAR 0 7
8832: PUSH
8833: LD_VAR 0 6
8837: PUSH
8838: EMPTY
8839: LIST
8840: ST_TO_ADDR
// for i = 1 to pos - 1 do
8841: LD_ADDR_VAR 0 5
8845: PUSH
8846: DOUBLE
8847: LD_INT 1
8849: DEC
8850: ST_TO_ADDR
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 1
8858: MINUS
8859: PUSH
8860: FOR_TO
8861: IFFALSE 8906
// begin tmp := tmp [ pos [ i ] ] ;
8863: LD_ADDR_VAR 0 6
8867: PUSH
8868: LD_VAR 0 6
8872: PUSH
8873: LD_VAR 0 2
8877: PUSH
8878: LD_VAR 0 5
8882: ARRAY
8883: ARRAY
8884: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8885: LD_ADDR_VAR 0 7
8889: PUSH
8890: LD_VAR 0 7
8894: PUSH
8895: LD_VAR 0 6
8899: PUSH
8900: EMPTY
8901: LIST
8902: ADD
8903: ST_TO_ADDR
// end ;
8904: GO 8860
8906: POP
8907: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8908: LD_ADDR_VAR 0 6
8912: PUSH
8913: LD_VAR 0 6
8917: PPUSH
8918: LD_VAR 0 2
8922: PUSH
8923: LD_VAR 0 2
8927: ARRAY
8928: PPUSH
8929: LD_VAR 0 3
8933: PPUSH
8934: CALL_OW 1
8938: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8939: LD_ADDR_VAR 0 7
8943: PUSH
8944: LD_VAR 0 7
8948: PPUSH
8949: LD_VAR 0 7
8953: PPUSH
8954: LD_VAR 0 6
8958: PPUSH
8959: CALL_OW 1
8963: ST_TO_ADDR
// for i = s_arr downto 2 do
8964: LD_ADDR_VAR 0 5
8968: PUSH
8969: DOUBLE
8970: LD_VAR 0 7
8974: INC
8975: ST_TO_ADDR
8976: LD_INT 2
8978: PUSH
8979: FOR_DOWNTO
8980: IFFALSE 9064
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8982: LD_ADDR_VAR 0 6
8986: PUSH
8987: LD_VAR 0 7
8991: PUSH
8992: LD_VAR 0 5
8996: PUSH
8997: LD_INT 1
8999: MINUS
9000: ARRAY
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 5
9011: PUSH
9012: LD_INT 1
9014: MINUS
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 7
9021: PUSH
9022: LD_VAR 0 5
9026: ARRAY
9027: PPUSH
9028: CALL_OW 1
9032: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9033: LD_ADDR_VAR 0 7
9037: PUSH
9038: LD_VAR 0 7
9042: PPUSH
9043: LD_VAR 0 5
9047: PUSH
9048: LD_INT 1
9050: MINUS
9051: PPUSH
9052: LD_VAR 0 6
9056: PPUSH
9057: CALL_OW 1
9061: ST_TO_ADDR
// end ;
9062: GO 8979
9064: POP
9065: POP
// result := s_arr [ 1 ] ;
9066: LD_ADDR_VAR 0 4
9070: PUSH
9071: LD_VAR 0 7
9075: PUSH
9076: LD_INT 1
9078: ARRAY
9079: ST_TO_ADDR
// end ; end ;
9080: LD_VAR 0 4
9084: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9085: LD_INT 0
9087: PPUSH
9088: PPUSH
// if not list then
9089: LD_VAR 0 1
9093: NOT
9094: IFFALSE 9098
// exit ;
9096: GO 9189
// i := list [ pos1 ] ;
9098: LD_ADDR_VAR 0 5
9102: PUSH
9103: LD_VAR 0 1
9107: PUSH
9108: LD_VAR 0 2
9112: ARRAY
9113: ST_TO_ADDR
// if not i then
9114: LD_VAR 0 5
9118: NOT
9119: IFFALSE 9123
// exit ;
9121: GO 9189
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9123: LD_ADDR_VAR 0 1
9127: PUSH
9128: LD_VAR 0 1
9132: PPUSH
9133: LD_VAR 0 2
9137: PPUSH
9138: LD_VAR 0 1
9142: PUSH
9143: LD_VAR 0 3
9147: ARRAY
9148: PPUSH
9149: CALL_OW 1
9153: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9154: LD_ADDR_VAR 0 1
9158: PUSH
9159: LD_VAR 0 1
9163: PPUSH
9164: LD_VAR 0 3
9168: PPUSH
9169: LD_VAR 0 5
9173: PPUSH
9174: CALL_OW 1
9178: ST_TO_ADDR
// result := list ;
9179: LD_ADDR_VAR 0 4
9183: PUSH
9184: LD_VAR 0 1
9188: ST_TO_ADDR
// end ;
9189: LD_VAR 0 4
9193: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9194: LD_INT 0
9196: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9197: LD_ADDR_VAR 0 5
9201: PUSH
9202: LD_VAR 0 1
9206: PPUSH
9207: CALL_OW 250
9211: PPUSH
9212: LD_VAR 0 1
9216: PPUSH
9217: CALL_OW 251
9221: PPUSH
9222: LD_VAR 0 2
9226: PPUSH
9227: LD_VAR 0 3
9231: PPUSH
9232: LD_VAR 0 4
9236: PPUSH
9237: CALL 9247 0 5
9241: ST_TO_ADDR
// end ;
9242: LD_VAR 0 5
9246: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9247: LD_INT 0
9249: PPUSH
9250: PPUSH
9251: PPUSH
9252: PPUSH
// if not list then
9253: LD_VAR 0 3
9257: NOT
9258: IFFALSE 9262
// exit ;
9260: GO 9650
// result := [ ] ;
9262: LD_ADDR_VAR 0 6
9266: PUSH
9267: EMPTY
9268: ST_TO_ADDR
// for i in list do
9269: LD_ADDR_VAR 0 7
9273: PUSH
9274: LD_VAR 0 3
9278: PUSH
9279: FOR_IN
9280: IFFALSE 9482
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9282: LD_ADDR_VAR 0 9
9286: PUSH
9287: LD_VAR 0 7
9291: PPUSH
9292: LD_VAR 0 1
9296: PPUSH
9297: LD_VAR 0 2
9301: PPUSH
9302: CALL_OW 297
9306: ST_TO_ADDR
// if not result then
9307: LD_VAR 0 6
9311: NOT
9312: IFFALSE 9338
// result := [ [ i , tmp ] ] else
9314: LD_ADDR_VAR 0 6
9318: PUSH
9319: LD_VAR 0 7
9323: PUSH
9324: LD_VAR 0 9
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: ST_TO_ADDR
9336: GO 9480
// begin if result [ result ] [ 2 ] < tmp then
9338: LD_VAR 0 6
9342: PUSH
9343: LD_VAR 0 6
9347: ARRAY
9348: PUSH
9349: LD_INT 2
9351: ARRAY
9352: PUSH
9353: LD_VAR 0 9
9357: LESS
9358: IFFALSE 9400
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9360: LD_ADDR_VAR 0 6
9364: PUSH
9365: LD_VAR 0 6
9369: PPUSH
9370: LD_VAR 0 6
9374: PUSH
9375: LD_INT 1
9377: PLUS
9378: PPUSH
9379: LD_VAR 0 7
9383: PUSH
9384: LD_VAR 0 9
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 2
9397: ST_TO_ADDR
9398: GO 9480
// for j = 1 to result do
9400: LD_ADDR_VAR 0 8
9404: PUSH
9405: DOUBLE
9406: LD_INT 1
9408: DEC
9409: ST_TO_ADDR
9410: LD_VAR 0 6
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9478
// begin if tmp < result [ j ] [ 2 ] then
9418: LD_VAR 0 9
9422: PUSH
9423: LD_VAR 0 6
9427: PUSH
9428: LD_VAR 0 8
9432: ARRAY
9433: PUSH
9434: LD_INT 2
9436: ARRAY
9437: LESS
9438: IFFALSE 9476
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9440: LD_ADDR_VAR 0 6
9444: PUSH
9445: LD_VAR 0 6
9449: PPUSH
9450: LD_VAR 0 8
9454: PPUSH
9455: LD_VAR 0 7
9459: PUSH
9460: LD_VAR 0 9
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PPUSH
9469: CALL_OW 2
9473: ST_TO_ADDR
// break ;
9474: GO 9478
// end ; end ;
9476: GO 9415
9478: POP
9479: POP
// end ; end ;
9480: GO 9279
9482: POP
9483: POP
// if result and not asc then
9484: LD_VAR 0 6
9488: PUSH
9489: LD_VAR 0 4
9493: NOT
9494: AND
9495: IFFALSE 9570
// begin tmp := result ;
9497: LD_ADDR_VAR 0 9
9501: PUSH
9502: LD_VAR 0 6
9506: ST_TO_ADDR
// for i = tmp downto 1 do
9507: LD_ADDR_VAR 0 7
9511: PUSH
9512: DOUBLE
9513: LD_VAR 0 9
9517: INC
9518: ST_TO_ADDR
9519: LD_INT 1
9521: PUSH
9522: FOR_DOWNTO
9523: IFFALSE 9568
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9525: LD_ADDR_VAR 0 6
9529: PUSH
9530: LD_VAR 0 6
9534: PPUSH
9535: LD_VAR 0 9
9539: PUSH
9540: LD_VAR 0 7
9544: MINUS
9545: PUSH
9546: LD_INT 1
9548: PLUS
9549: PPUSH
9550: LD_VAR 0 9
9554: PUSH
9555: LD_VAR 0 7
9559: ARRAY
9560: PPUSH
9561: CALL_OW 1
9565: ST_TO_ADDR
9566: GO 9522
9568: POP
9569: POP
// end ; tmp := [ ] ;
9570: LD_ADDR_VAR 0 9
9574: PUSH
9575: EMPTY
9576: ST_TO_ADDR
// if mode then
9577: LD_VAR 0 5
9581: IFFALSE 9650
// begin for i = 1 to result do
9583: LD_ADDR_VAR 0 7
9587: PUSH
9588: DOUBLE
9589: LD_INT 1
9591: DEC
9592: ST_TO_ADDR
9593: LD_VAR 0 6
9597: PUSH
9598: FOR_TO
9599: IFFALSE 9638
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9601: LD_ADDR_VAR 0 9
9605: PUSH
9606: LD_VAR 0 9
9610: PPUSH
9611: LD_VAR 0 7
9615: PPUSH
9616: LD_VAR 0 6
9620: PUSH
9621: LD_VAR 0 7
9625: ARRAY
9626: PUSH
9627: LD_INT 1
9629: ARRAY
9630: PPUSH
9631: CALL_OW 1
9635: ST_TO_ADDR
9636: GO 9598
9638: POP
9639: POP
// result := tmp ;
9640: LD_ADDR_VAR 0 6
9644: PUSH
9645: LD_VAR 0 9
9649: ST_TO_ADDR
// end ; end ;
9650: LD_VAR 0 6
9654: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9655: LD_INT 0
9657: PPUSH
9658: PPUSH
9659: PPUSH
9660: PPUSH
9661: PPUSH
9662: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9663: LD_ADDR_VAR 0 5
9667: PUSH
9668: LD_INT 0
9670: PUSH
9671: LD_INT 0
9673: PUSH
9674: LD_INT 0
9676: PUSH
9677: EMPTY
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: ST_TO_ADDR
// if not x or not y then
9685: LD_VAR 0 2
9689: NOT
9690: PUSH
9691: LD_VAR 0 3
9695: NOT
9696: OR
9697: IFFALSE 9701
// exit ;
9699: GO 11353
// if not range then
9701: LD_VAR 0 4
9705: NOT
9706: IFFALSE 9716
// range := 10 ;
9708: LD_ADDR_VAR 0 4
9712: PUSH
9713: LD_INT 10
9715: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9716: LD_ADDR_VAR 0 8
9720: PUSH
9721: LD_INT 81
9723: PUSH
9724: LD_VAR 0 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 92
9735: PUSH
9736: LD_VAR 0 2
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: LD_VAR 0 4
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 21
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// if not tmp then
9784: LD_VAR 0 8
9788: NOT
9789: IFFALSE 9793
// exit ;
9791: GO 11353
// for i in tmp do
9793: LD_ADDR_VAR 0 6
9797: PUSH
9798: LD_VAR 0 8
9802: PUSH
9803: FOR_IN
9804: IFFALSE 11328
// begin points := [ 0 , 0 , 0 ] ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 0
9813: PUSH
9814: LD_INT 0
9816: PUSH
9817: LD_INT 0
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: ST_TO_ADDR
// bpoints := 1 ;
9825: LD_ADDR_VAR 0 10
9829: PUSH
9830: LD_INT 1
9832: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 247
9842: PUSH
9843: LD_INT 1
9845: DOUBLE
9846: EQUAL
9847: IFTRUE 9851
9849: GO 10429
9851: POP
// begin if GetClass ( i ) = 1 then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 257
9861: PUSH
9862: LD_INT 1
9864: EQUAL
9865: IFFALSE 9886
// points := [ 10 , 5 , 3 ] ;
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_INT 10
9874: PUSH
9875: LD_INT 5
9877: PUSH
9878: LD_INT 3
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 2
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: LD_INT 4
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: IN
9910: IFFALSE 9931
// points := [ 3 , 2 , 1 ] ;
9912: LD_ADDR_VAR 0 9
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: LD_INT 1
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9931: LD_VAR 0 6
9935: PPUSH
9936: CALL_OW 257
9940: PUSH
9941: LD_INT 5
9943: EQUAL
9944: IFFALSE 9965
// points := [ 130 , 5 , 2 ] ;
9946: LD_ADDR_VAR 0 9
9950: PUSH
9951: LD_INT 130
9953: PUSH
9954: LD_INT 5
9956: PUSH
9957: LD_INT 2
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9965: LD_VAR 0 6
9969: PPUSH
9970: CALL_OW 257
9974: PUSH
9975: LD_INT 8
9977: EQUAL
9978: IFFALSE 9999
// points := [ 35 , 35 , 30 ] ;
9980: LD_ADDR_VAR 0 9
9984: PUSH
9985: LD_INT 35
9987: PUSH
9988: LD_INT 35
9990: PUSH
9991: LD_INT 30
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9999: LD_VAR 0 6
10003: PPUSH
10004: CALL_OW 257
10008: PUSH
10009: LD_INT 9
10011: EQUAL
10012: IFFALSE 10033
// points := [ 20 , 55 , 40 ] ;
10014: LD_ADDR_VAR 0 9
10018: PUSH
10019: LD_INT 20
10021: PUSH
10022: LD_INT 55
10024: PUSH
10025: LD_INT 40
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10033: LD_VAR 0 6
10037: PPUSH
10038: CALL_OW 257
10042: PUSH
10043: LD_INT 12
10045: PUSH
10046: LD_INT 16
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: IN
10053: IFFALSE 10074
// points := [ 5 , 3 , 2 ] ;
10055: LD_ADDR_VAR 0 9
10059: PUSH
10060: LD_INT 5
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10074: LD_VAR 0 6
10078: PPUSH
10079: CALL_OW 257
10083: PUSH
10084: LD_INT 17
10086: EQUAL
10087: IFFALSE 10108
// points := [ 100 , 50 , 75 ] ;
10089: LD_ADDR_VAR 0 9
10093: PUSH
10094: LD_INT 100
10096: PUSH
10097: LD_INT 50
10099: PUSH
10100: LD_INT 75
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10108: LD_VAR 0 6
10112: PPUSH
10113: CALL_OW 257
10117: PUSH
10118: LD_INT 15
10120: EQUAL
10121: IFFALSE 10142
// points := [ 10 , 5 , 3 ] ;
10123: LD_ADDR_VAR 0 9
10127: PUSH
10128: LD_INT 10
10130: PUSH
10131: LD_INT 5
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10142: LD_VAR 0 6
10146: PPUSH
10147: CALL_OW 257
10151: PUSH
10152: LD_INT 14
10154: EQUAL
10155: IFFALSE 10176
// points := [ 10 , 0 , 0 ] ;
10157: LD_ADDR_VAR 0 9
10161: PUSH
10162: LD_INT 10
10164: PUSH
10165: LD_INT 0
10167: PUSH
10168: LD_INT 0
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10176: LD_VAR 0 6
10180: PPUSH
10181: CALL_OW 257
10185: PUSH
10186: LD_INT 11
10188: EQUAL
10189: IFFALSE 10210
// points := [ 30 , 10 , 5 ] ;
10191: LD_ADDR_VAR 0 9
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 10
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10210: LD_VAR 0 1
10214: PPUSH
10215: LD_INT 5
10217: PPUSH
10218: CALL_OW 321
10222: PUSH
10223: LD_INT 2
10225: EQUAL
10226: IFFALSE 10243
// bpoints := bpoints * 1.8 ;
10228: LD_ADDR_VAR 0 10
10232: PUSH
10233: LD_VAR 0 10
10237: PUSH
10238: LD_REAL  1.80000000000000E+0000
10241: MUL
10242: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10243: LD_VAR 0 6
10247: PPUSH
10248: CALL_OW 257
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: LD_INT 4
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: IN
10271: PUSH
10272: LD_VAR 0 1
10276: PPUSH
10277: LD_INT 51
10279: PPUSH
10280: CALL_OW 321
10284: PUSH
10285: LD_INT 2
10287: EQUAL
10288: AND
10289: IFFALSE 10306
// bpoints := bpoints * 1.2 ;
10291: LD_ADDR_VAR 0 10
10295: PUSH
10296: LD_VAR 0 10
10300: PUSH
10301: LD_REAL  1.20000000000000E+0000
10304: MUL
10305: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 257
10315: PUSH
10316: LD_INT 5
10318: PUSH
10319: LD_INT 7
10321: PUSH
10322: LD_INT 9
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: IN
10330: PUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: LD_INT 52
10338: PPUSH
10339: CALL_OW 321
10343: PUSH
10344: LD_INT 2
10346: EQUAL
10347: AND
10348: IFFALSE 10365
// bpoints := bpoints * 1.5 ;
10350: LD_ADDR_VAR 0 10
10354: PUSH
10355: LD_VAR 0 10
10359: PUSH
10360: LD_REAL  1.50000000000000E+0000
10363: MUL
10364: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10365: LD_VAR 0 1
10369: PPUSH
10370: LD_INT 66
10372: PPUSH
10373: CALL_OW 321
10377: PUSH
10378: LD_INT 2
10380: EQUAL
10381: IFFALSE 10398
// bpoints := bpoints * 1.1 ;
10383: LD_ADDR_VAR 0 10
10387: PUSH
10388: LD_VAR 0 10
10392: PUSH
10393: LD_REAL  1.10000000000000E+0000
10396: MUL
10397: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10398: LD_ADDR_VAR 0 10
10402: PUSH
10403: LD_VAR 0 10
10407: PUSH
10408: LD_VAR 0 6
10412: PPUSH
10413: LD_INT 1
10415: PPUSH
10416: CALL_OW 259
10420: PUSH
10421: LD_REAL  1.15000000000000E+0000
10424: MUL
10425: MUL
10426: ST_TO_ADDR
// end ; unit_vehicle :
10427: GO 11257
10429: LD_INT 2
10431: DOUBLE
10432: EQUAL
10433: IFTRUE 10437
10435: GO 11245
10437: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10438: LD_VAR 0 6
10442: PPUSH
10443: CALL_OW 264
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: LD_INT 42
10453: PUSH
10454: LD_INT 24
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: IN
10462: IFFALSE 10483
// points := [ 25 , 5 , 3 ] ;
10464: LD_ADDR_VAR 0 9
10468: PUSH
10469: LD_INT 25
10471: PUSH
10472: LD_INT 5
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10483: LD_VAR 0 6
10487: PPUSH
10488: CALL_OW 264
10492: PUSH
10493: LD_INT 4
10495: PUSH
10496: LD_INT 43
10498: PUSH
10499: LD_INT 25
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: IN
10507: IFFALSE 10528
// points := [ 40 , 15 , 5 ] ;
10509: LD_ADDR_VAR 0 9
10513: PUSH
10514: LD_INT 40
10516: PUSH
10517: LD_INT 15
10519: PUSH
10520: LD_INT 5
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10528: LD_VAR 0 6
10532: PPUSH
10533: CALL_OW 264
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: LD_INT 23
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: IN
10548: IFFALSE 10569
// points := [ 7 , 25 , 8 ] ;
10550: LD_ADDR_VAR 0 9
10554: PUSH
10555: LD_INT 7
10557: PUSH
10558: LD_INT 25
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10569: LD_VAR 0 6
10573: PPUSH
10574: CALL_OW 264
10578: PUSH
10579: LD_INT 5
10581: PUSH
10582: LD_INT 27
10584: PUSH
10585: LD_INT 44
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: IN
10593: IFFALSE 10614
// points := [ 14 , 50 , 16 ] ;
10595: LD_ADDR_VAR 0 9
10599: PUSH
10600: LD_INT 14
10602: PUSH
10603: LD_INT 50
10605: PUSH
10606: LD_INT 16
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10614: LD_VAR 0 6
10618: PPUSH
10619: CALL_OW 264
10623: PUSH
10624: LD_INT 6
10626: PUSH
10627: LD_INT 46
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: IN
10634: IFFALSE 10655
// points := [ 32 , 120 , 70 ] ;
10636: LD_ADDR_VAR 0 9
10640: PUSH
10641: LD_INT 32
10643: PUSH
10644: LD_INT 120
10646: PUSH
10647: LD_INT 70
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10655: LD_VAR 0 6
10659: PPUSH
10660: CALL_OW 264
10664: PUSH
10665: LD_INT 7
10667: PUSH
10668: LD_INT 28
10670: PUSH
10671: LD_INT 45
10673: PUSH
10674: LD_EXP 91
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: IN
10685: IFFALSE 10706
// points := [ 35 , 20 , 45 ] ;
10687: LD_ADDR_VAR 0 9
10691: PUSH
10692: LD_INT 35
10694: PUSH
10695: LD_INT 20
10697: PUSH
10698: LD_INT 45
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: LIST
10705: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10706: LD_VAR 0 6
10710: PPUSH
10711: CALL_OW 264
10715: PUSH
10716: LD_INT 47
10718: PUSH
10719: EMPTY
10720: LIST
10721: IN
10722: IFFALSE 10743
// points := [ 67 , 45 , 75 ] ;
10724: LD_ADDR_VAR 0 9
10728: PUSH
10729: LD_INT 67
10731: PUSH
10732: LD_INT 45
10734: PUSH
10735: LD_INT 75
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10743: LD_VAR 0 6
10747: PPUSH
10748: CALL_OW 264
10752: PUSH
10753: LD_INT 26
10755: PUSH
10756: EMPTY
10757: LIST
10758: IN
10759: IFFALSE 10780
// points := [ 120 , 30 , 80 ] ;
10761: LD_ADDR_VAR 0 9
10765: PUSH
10766: LD_INT 120
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: LD_INT 80
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10780: LD_VAR 0 6
10784: PPUSH
10785: CALL_OW 264
10789: PUSH
10790: LD_INT 22
10792: PUSH
10793: EMPTY
10794: LIST
10795: IN
10796: IFFALSE 10817
// points := [ 40 , 1 , 1 ] ;
10798: LD_ADDR_VAR 0 9
10802: PUSH
10803: LD_INT 40
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10817: LD_VAR 0 6
10821: PPUSH
10822: CALL_OW 264
10826: PUSH
10827: LD_INT 29
10829: PUSH
10830: EMPTY
10831: LIST
10832: IN
10833: IFFALSE 10854
// points := [ 70 , 200 , 400 ] ;
10835: LD_ADDR_VAR 0 9
10839: PUSH
10840: LD_INT 70
10842: PUSH
10843: LD_INT 200
10845: PUSH
10846: LD_INT 400
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10854: LD_VAR 0 6
10858: PPUSH
10859: CALL_OW 264
10863: PUSH
10864: LD_INT 14
10866: PUSH
10867: LD_INT 53
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: IN
10874: IFFALSE 10895
// points := [ 40 , 10 , 20 ] ;
10876: LD_ADDR_VAR 0 9
10880: PUSH
10881: LD_INT 40
10883: PUSH
10884: LD_INT 10
10886: PUSH
10887: LD_INT 20
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10895: LD_VAR 0 6
10899: PPUSH
10900: CALL_OW 264
10904: PUSH
10905: LD_INT 9
10907: PUSH
10908: EMPTY
10909: LIST
10910: IN
10911: IFFALSE 10932
// points := [ 5 , 70 , 20 ] ;
10913: LD_ADDR_VAR 0 9
10917: PUSH
10918: LD_INT 5
10920: PUSH
10921: LD_INT 70
10923: PUSH
10924: LD_INT 20
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10932: LD_VAR 0 6
10936: PPUSH
10937: CALL_OW 264
10941: PUSH
10942: LD_INT 10
10944: PUSH
10945: EMPTY
10946: LIST
10947: IN
10948: IFFALSE 10969
// points := [ 35 , 110 , 70 ] ;
10950: LD_ADDR_VAR 0 9
10954: PUSH
10955: LD_INT 35
10957: PUSH
10958: LD_INT 110
10960: PUSH
10961: LD_INT 70
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10969: LD_VAR 0 6
10973: PPUSH
10974: CALL_OW 265
10978: PUSH
10979: LD_INT 25
10981: EQUAL
10982: IFFALSE 11003
// points := [ 80 , 65 , 100 ] ;
10984: LD_ADDR_VAR 0 9
10988: PUSH
10989: LD_INT 80
10991: PUSH
10992: LD_INT 65
10994: PUSH
10995: LD_INT 100
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11003: LD_VAR 0 6
11007: PPUSH
11008: CALL_OW 263
11012: PUSH
11013: LD_INT 1
11015: EQUAL
11016: IFFALSE 11051
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11018: LD_ADDR_VAR 0 10
11022: PUSH
11023: LD_VAR 0 10
11027: PUSH
11028: LD_VAR 0 6
11032: PPUSH
11033: CALL_OW 311
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: CALL_OW 259
11045: PUSH
11046: LD_INT 4
11048: MUL
11049: MUL
11050: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11051: LD_VAR 0 6
11055: PPUSH
11056: CALL_OW 263
11060: PUSH
11061: LD_INT 2
11063: EQUAL
11064: IFFALSE 11115
// begin j := IsControledBy ( i ) ;
11066: LD_ADDR_VAR 0 7
11070: PUSH
11071: LD_VAR 0 6
11075: PPUSH
11076: CALL_OW 312
11080: ST_TO_ADDR
// if j then
11081: LD_VAR 0 7
11085: IFFALSE 11115
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11087: LD_ADDR_VAR 0 10
11091: PUSH
11092: LD_VAR 0 10
11096: PUSH
11097: LD_VAR 0 7
11101: PPUSH
11102: LD_INT 3
11104: PPUSH
11105: CALL_OW 259
11109: PUSH
11110: LD_INT 3
11112: MUL
11113: MUL
11114: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11115: LD_VAR 0 6
11119: PPUSH
11120: CALL_OW 264
11124: PUSH
11125: LD_INT 5
11127: PUSH
11128: LD_INT 6
11130: PUSH
11131: LD_INT 46
11133: PUSH
11134: LD_INT 44
11136: PUSH
11137: LD_INT 47
11139: PUSH
11140: LD_INT 45
11142: PUSH
11143: LD_INT 28
11145: PUSH
11146: LD_INT 7
11148: PUSH
11149: LD_INT 27
11151: PUSH
11152: LD_INT 29
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: IN
11167: PUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: LD_INT 52
11175: PPUSH
11176: CALL_OW 321
11180: PUSH
11181: LD_INT 2
11183: EQUAL
11184: AND
11185: IFFALSE 11202
// bpoints := bpoints * 1.2 ;
11187: LD_ADDR_VAR 0 10
11191: PUSH
11192: LD_VAR 0 10
11196: PUSH
11197: LD_REAL  1.20000000000000E+0000
11200: MUL
11201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11202: LD_VAR 0 6
11206: PPUSH
11207: CALL_OW 264
11211: PUSH
11212: LD_INT 6
11214: PUSH
11215: LD_INT 46
11217: PUSH
11218: LD_INT 47
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: IN
11226: IFFALSE 11243
// bpoints := bpoints * 1.2 ;
11228: LD_ADDR_VAR 0 10
11232: PUSH
11233: LD_VAR 0 10
11237: PUSH
11238: LD_REAL  1.20000000000000E+0000
11241: MUL
11242: ST_TO_ADDR
// end ; unit_building :
11243: GO 11257
11245: LD_INT 3
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11256
11253: POP
// ; end ;
11254: GO 11257
11256: POP
// for j = 1 to 3 do
11257: LD_ADDR_VAR 0 7
11261: PUSH
11262: DOUBLE
11263: LD_INT 1
11265: DEC
11266: ST_TO_ADDR
11267: LD_INT 3
11269: PUSH
11270: FOR_TO
11271: IFFALSE 11324
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11273: LD_ADDR_VAR 0 5
11277: PUSH
11278: LD_VAR 0 5
11282: PPUSH
11283: LD_VAR 0 7
11287: PPUSH
11288: LD_VAR 0 5
11292: PUSH
11293: LD_VAR 0 7
11297: ARRAY
11298: PUSH
11299: LD_VAR 0 9
11303: PUSH
11304: LD_VAR 0 7
11308: ARRAY
11309: PUSH
11310: LD_VAR 0 10
11314: MUL
11315: PLUS
11316: PPUSH
11317: CALL_OW 1
11321: ST_TO_ADDR
11322: GO 11270
11324: POP
11325: POP
// end ;
11326: GO 9803
11328: POP
11329: POP
// result := Replace ( result , 4 , tmp ) ;
11330: LD_ADDR_VAR 0 5
11334: PUSH
11335: LD_VAR 0 5
11339: PPUSH
11340: LD_INT 4
11342: PPUSH
11343: LD_VAR 0 8
11347: PPUSH
11348: CALL_OW 1
11352: ST_TO_ADDR
// end ;
11353: LD_VAR 0 5
11357: RET
// export function DangerAtRange ( unit , range ) ; begin
11358: LD_INT 0
11360: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_VAR 0 1
11370: PPUSH
11371: CALL_OW 255
11375: PPUSH
11376: LD_VAR 0 1
11380: PPUSH
11381: CALL_OW 250
11385: PPUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 251
11395: PPUSH
11396: LD_VAR 0 2
11400: PPUSH
11401: CALL 9655 0 4
11405: ST_TO_ADDR
// end ;
11406: LD_VAR 0 3
11410: RET
// export function DangerInArea ( side , area ) ; begin
11411: LD_INT 0
11413: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11414: LD_ADDR_VAR 0 3
11418: PUSH
11419: LD_VAR 0 2
11423: PPUSH
11424: LD_INT 81
11426: PUSH
11427: LD_VAR 0 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 70
11440: ST_TO_ADDR
// end ;
11441: LD_VAR 0 3
11445: RET
// export function IsExtension ( b ) ; begin
11446: LD_INT 0
11448: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11449: LD_ADDR_VAR 0 2
11453: PUSH
11454: LD_VAR 0 1
11458: PUSH
11459: LD_INT 23
11461: PUSH
11462: LD_INT 20
11464: PUSH
11465: LD_INT 22
11467: PUSH
11468: LD_INT 17
11470: PUSH
11471: LD_INT 24
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 19
11479: PUSH
11480: LD_INT 16
11482: PUSH
11483: LD_INT 25
11485: PUSH
11486: LD_INT 18
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: IN
11501: ST_TO_ADDR
// end ;
11502: LD_VAR 0 2
11506: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11507: LD_INT 0
11509: PPUSH
11510: PPUSH
11511: PPUSH
// result := [ ] ;
11512: LD_ADDR_VAR 0 4
11516: PUSH
11517: EMPTY
11518: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11519: LD_ADDR_VAR 0 5
11523: PUSH
11524: LD_VAR 0 2
11528: PPUSH
11529: LD_INT 21
11531: PUSH
11532: LD_INT 3
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 70
11543: ST_TO_ADDR
// if not tmp then
11544: LD_VAR 0 5
11548: NOT
11549: IFFALSE 11553
// exit ;
11551: GO 11617
// if checkLink then
11553: LD_VAR 0 3
11557: IFFALSE 11607
// begin for i in tmp do
11559: LD_ADDR_VAR 0 6
11563: PUSH
11564: LD_VAR 0 5
11568: PUSH
11569: FOR_IN
11570: IFFALSE 11605
// if GetBase ( i ) <> base then
11572: LD_VAR 0 6
11576: PPUSH
11577: CALL_OW 274
11581: PUSH
11582: LD_VAR 0 1
11586: NONEQUAL
11587: IFFALSE 11603
// ComLinkToBase ( base , i ) ;
11589: LD_VAR 0 1
11593: PPUSH
11594: LD_VAR 0 6
11598: PPUSH
11599: CALL_OW 169
11603: GO 11569
11605: POP
11606: POP
// end ; result := tmp ;
11607: LD_ADDR_VAR 0 4
11611: PUSH
11612: LD_VAR 0 5
11616: ST_TO_ADDR
// end ;
11617: LD_VAR 0 4
11621: RET
// export function ComComplete ( units , b ) ; var i ; begin
11622: LD_INT 0
11624: PPUSH
11625: PPUSH
// if not units then
11626: LD_VAR 0 1
11630: NOT
11631: IFFALSE 11635
// exit ;
11633: GO 11725
// for i in units do
11635: LD_ADDR_VAR 0 4
11639: PUSH
11640: LD_VAR 0 1
11644: PUSH
11645: FOR_IN
11646: IFFALSE 11723
// if BuildingStatus ( b ) = bs_build then
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL_OW 461
11657: PUSH
11658: LD_INT 1
11660: EQUAL
11661: IFFALSE 11721
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11663: LD_VAR 0 4
11667: PPUSH
11668: LD_STRING h
11670: PUSH
11671: LD_VAR 0 2
11675: PPUSH
11676: CALL_OW 250
11680: PUSH
11681: LD_VAR 0 2
11685: PPUSH
11686: CALL_OW 251
11690: PUSH
11691: LD_VAR 0 2
11695: PUSH
11696: LD_INT 0
11698: PUSH
11699: LD_INT 0
11701: PUSH
11702: LD_INT 0
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: PPUSH
11717: CALL_OW 446
11721: GO 11645
11723: POP
11724: POP
// end ;
11725: LD_VAR 0 3
11729: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11730: LD_INT 0
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11738: LD_VAR 0 1
11742: NOT
11743: PUSH
11744: LD_VAR 0 1
11748: PPUSH
11749: CALL_OW 263
11753: PUSH
11754: LD_INT 2
11756: NONEQUAL
11757: OR
11758: IFFALSE 11762
// exit ;
11760: GO 12078
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11762: LD_ADDR_VAR 0 6
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 255
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 36
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 34
11799: PUSH
11800: LD_INT 31
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PPUSH
11816: CALL_OW 69
11820: ST_TO_ADDR
// if not tmp then
11821: LD_VAR 0 6
11825: NOT
11826: IFFALSE 11830
// exit ;
11828: GO 12078
// result := [ ] ;
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: EMPTY
11836: ST_TO_ADDR
// for i in tmp do
11837: LD_ADDR_VAR 0 3
11841: PUSH
11842: LD_VAR 0 6
11846: PUSH
11847: FOR_IN
11848: IFFALSE 11919
// begin t := UnitsInside ( i ) ;
11850: LD_ADDR_VAR 0 4
11854: PUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: CALL_OW 313
11864: ST_TO_ADDR
// if t then
11865: LD_VAR 0 4
11869: IFFALSE 11917
// for j in t do
11871: LD_ADDR_VAR 0 7
11875: PUSH
11876: LD_VAR 0 4
11880: PUSH
11881: FOR_IN
11882: IFFALSE 11915
// result := Replace ( result , result + 1 , j ) ;
11884: LD_ADDR_VAR 0 2
11888: PUSH
11889: LD_VAR 0 2
11893: PPUSH
11894: LD_VAR 0 2
11898: PUSH
11899: LD_INT 1
11901: PLUS
11902: PPUSH
11903: LD_VAR 0 7
11907: PPUSH
11908: CALL_OW 1
11912: ST_TO_ADDR
11913: GO 11881
11915: POP
11916: POP
// end ;
11917: GO 11847
11919: POP
11920: POP
// if not result then
11921: LD_VAR 0 2
11925: NOT
11926: IFFALSE 11930
// exit ;
11928: GO 12078
// mech := result [ 1 ] ;
11930: LD_ADDR_VAR 0 5
11934: PUSH
11935: LD_VAR 0 2
11939: PUSH
11940: LD_INT 1
11942: ARRAY
11943: ST_TO_ADDR
// if result > 1 then
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 1
11951: GREATER
11952: IFFALSE 12064
// begin for i = 2 to result do
11954: LD_ADDR_VAR 0 3
11958: PUSH
11959: DOUBLE
11960: LD_INT 2
11962: DEC
11963: ST_TO_ADDR
11964: LD_VAR 0 2
11968: PUSH
11969: FOR_TO
11970: IFFALSE 12062
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11972: LD_ADDR_VAR 0 4
11976: PUSH
11977: LD_VAR 0 2
11981: PUSH
11982: LD_VAR 0 3
11986: ARRAY
11987: PPUSH
11988: LD_INT 3
11990: PPUSH
11991: CALL_OW 259
11995: PUSH
11996: LD_VAR 0 2
12000: PUSH
12001: LD_VAR 0 3
12005: ARRAY
12006: PPUSH
12007: CALL_OW 432
12011: MINUS
12012: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12013: LD_VAR 0 4
12017: PUSH
12018: LD_VAR 0 5
12022: PPUSH
12023: LD_INT 3
12025: PPUSH
12026: CALL_OW 259
12030: PUSH
12031: LD_VAR 0 5
12035: PPUSH
12036: CALL_OW 432
12040: MINUS
12041: GREATEREQUAL
12042: IFFALSE 12060
// mech := result [ i ] ;
12044: LD_ADDR_VAR 0 5
12048: PUSH
12049: LD_VAR 0 2
12053: PUSH
12054: LD_VAR 0 3
12058: ARRAY
12059: ST_TO_ADDR
// end ;
12060: GO 11969
12062: POP
12063: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12064: LD_VAR 0 1
12068: PPUSH
12069: LD_VAR 0 5
12073: PPUSH
12074: CALL_OW 135
// end ;
12078: LD_VAR 0 2
12082: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12083: LD_INT 0
12085: PPUSH
12086: PPUSH
12087: PPUSH
12088: PPUSH
12089: PPUSH
12090: PPUSH
12091: PPUSH
12092: PPUSH
12093: PPUSH
12094: PPUSH
12095: PPUSH
12096: PPUSH
12097: PPUSH
// result := [ ] ;
12098: LD_ADDR_VAR 0 7
12102: PUSH
12103: EMPTY
12104: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 266
12114: PUSH
12115: LD_INT 0
12117: PUSH
12118: LD_INT 1
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: IN
12125: NOT
12126: IFFALSE 12130
// exit ;
12128: GO 13764
// if name then
12130: LD_VAR 0 3
12134: IFFALSE 12150
// SetBName ( base_dep , name ) ;
12136: LD_VAR 0 1
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: CALL_OW 500
// base := GetBase ( base_dep ) ;
12150: LD_ADDR_VAR 0 15
12154: PUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: CALL_OW 274
12164: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12165: LD_ADDR_VAR 0 16
12169: PUSH
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 255
12179: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12180: LD_ADDR_VAR 0 17
12184: PUSH
12185: LD_VAR 0 1
12189: PPUSH
12190: CALL_OW 248
12194: ST_TO_ADDR
// if sources then
12195: LD_VAR 0 5
12199: IFFALSE 12246
// for i = 1 to 3 do
12201: LD_ADDR_VAR 0 8
12205: PUSH
12206: DOUBLE
12207: LD_INT 1
12209: DEC
12210: ST_TO_ADDR
12211: LD_INT 3
12213: PUSH
12214: FOR_TO
12215: IFFALSE 12244
// AddResourceType ( base , i , sources [ i ] ) ;
12217: LD_VAR 0 15
12221: PPUSH
12222: LD_VAR 0 8
12226: PPUSH
12227: LD_VAR 0 5
12231: PUSH
12232: LD_VAR 0 8
12236: ARRAY
12237: PPUSH
12238: CALL_OW 276
12242: GO 12214
12244: POP
12245: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12246: LD_ADDR_VAR 0 18
12250: PUSH
12251: LD_VAR 0 15
12255: PPUSH
12256: LD_VAR 0 2
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL 11507 0 3
12268: ST_TO_ADDR
// InitHc ;
12269: CALL_OW 19
// InitUc ;
12273: CALL_OW 18
// uc_side := side ;
12277: LD_ADDR_OWVAR 20
12281: PUSH
12282: LD_VAR 0 16
12286: ST_TO_ADDR
// uc_nation := nation ;
12287: LD_ADDR_OWVAR 21
12291: PUSH
12292: LD_VAR 0 17
12296: ST_TO_ADDR
// if buildings then
12297: LD_VAR 0 18
12301: IFFALSE 13623
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12303: LD_ADDR_VAR 0 19
12307: PUSH
12308: LD_VAR 0 18
12312: PPUSH
12313: LD_INT 2
12315: PUSH
12316: LD_INT 30
12318: PUSH
12319: LD_INT 29
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 30
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 72
12345: ST_TO_ADDR
// if tmp then
12346: LD_VAR 0 19
12350: IFFALSE 12398
// for i in tmp do
12352: LD_ADDR_VAR 0 8
12356: PUSH
12357: LD_VAR 0 19
12361: PUSH
12362: FOR_IN
12363: IFFALSE 12396
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12365: LD_VAR 0 8
12369: PPUSH
12370: CALL_OW 250
12374: PPUSH
12375: LD_VAR 0 8
12379: PPUSH
12380: CALL_OW 251
12384: PPUSH
12385: LD_VAR 0 16
12389: PPUSH
12390: CALL_OW 441
12394: GO 12362
12396: POP
12397: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12398: LD_VAR 0 18
12402: PPUSH
12403: LD_INT 2
12405: PUSH
12406: LD_INT 30
12408: PUSH
12409: LD_INT 32
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 30
12418: PUSH
12419: LD_INT 33
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 72
12435: IFFALSE 12523
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12437: LD_ADDR_VAR 0 8
12441: PUSH
12442: LD_VAR 0 18
12446: PPUSH
12447: LD_INT 2
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 32
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 30
12462: PUSH
12463: LD_INT 33
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: PUSH
12480: FOR_IN
12481: IFFALSE 12521
// begin if not GetBWeapon ( i ) then
12483: LD_VAR 0 8
12487: PPUSH
12488: CALL_OW 269
12492: NOT
12493: IFFALSE 12519
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12495: LD_VAR 0 8
12499: PPUSH
12500: LD_VAR 0 8
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: CALL 13769 0 2
12514: PPUSH
12515: CALL_OW 431
// end ;
12519: GO 12480
12521: POP
12522: POP
// end ; for i = 1 to personel do
12523: LD_ADDR_VAR 0 8
12527: PUSH
12528: DOUBLE
12529: LD_INT 1
12531: DEC
12532: ST_TO_ADDR
12533: LD_VAR 0 6
12537: PUSH
12538: FOR_TO
12539: IFFALSE 13603
// begin if i > 4 then
12541: LD_VAR 0 8
12545: PUSH
12546: LD_INT 4
12548: GREATER
12549: IFFALSE 12553
// break ;
12551: GO 13603
// case i of 1 :
12553: LD_VAR 0 8
12557: PUSH
12558: LD_INT 1
12560: DOUBLE
12561: EQUAL
12562: IFTRUE 12566
12564: GO 12646
12566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12567: LD_ADDR_VAR 0 12
12571: PUSH
12572: LD_VAR 0 18
12576: PPUSH
12577: LD_INT 22
12579: PUSH
12580: LD_VAR 0 16
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 58
12591: PUSH
12592: EMPTY
12593: LIST
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: LD_INT 30
12600: PUSH
12601: LD_INT 32
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 4
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 30
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 72
12643: ST_TO_ADDR
12644: GO 12868
12646: LD_INT 2
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12716
12654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12655: LD_ADDR_VAR 0 12
12659: PUSH
12660: LD_VAR 0 18
12664: PPUSH
12665: LD_INT 22
12667: PUSH
12668: LD_VAR 0 16
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: LD_INT 30
12682: PUSH
12683: LD_INT 0
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 30
12692: PUSH
12693: LD_INT 1
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: CALL_OW 72
12713: ST_TO_ADDR
12714: GO 12868
12716: LD_INT 3
12718: DOUBLE
12719: EQUAL
12720: IFTRUE 12724
12722: GO 12786
12724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12725: LD_ADDR_VAR 0 12
12729: PUSH
12730: LD_VAR 0 18
12734: PPUSH
12735: LD_INT 22
12737: PUSH
12738: LD_VAR 0 16
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 30
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 30
12762: PUSH
12763: LD_INT 3
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PPUSH
12779: CALL_OW 72
12783: ST_TO_ADDR
12784: GO 12868
12786: LD_INT 4
12788: DOUBLE
12789: EQUAL
12790: IFTRUE 12794
12792: GO 12867
12794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12795: LD_ADDR_VAR 0 12
12799: PUSH
12800: LD_VAR 0 18
12804: PPUSH
12805: LD_INT 22
12807: PUSH
12808: LD_VAR 0 16
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 2
12819: PUSH
12820: LD_INT 30
12822: PUSH
12823: LD_INT 6
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 30
12832: PUSH
12833: LD_INT 7
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 30
12842: PUSH
12843: LD_INT 8
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 72
12864: ST_TO_ADDR
12865: GO 12868
12867: POP
// if i = 1 then
12868: LD_VAR 0 8
12872: PUSH
12873: LD_INT 1
12875: EQUAL
12876: IFFALSE 12987
// begin tmp := [ ] ;
12878: LD_ADDR_VAR 0 19
12882: PUSH
12883: EMPTY
12884: ST_TO_ADDR
// for j in f do
12885: LD_ADDR_VAR 0 9
12889: PUSH
12890: LD_VAR 0 12
12894: PUSH
12895: FOR_IN
12896: IFFALSE 12969
// if GetBType ( j ) = b_bunker then
12898: LD_VAR 0 9
12902: PPUSH
12903: CALL_OW 266
12907: PUSH
12908: LD_INT 32
12910: EQUAL
12911: IFFALSE 12938
// tmp := Insert ( tmp , 1 , j ) else
12913: LD_ADDR_VAR 0 19
12917: PUSH
12918: LD_VAR 0 19
12922: PPUSH
12923: LD_INT 1
12925: PPUSH
12926: LD_VAR 0 9
12930: PPUSH
12931: CALL_OW 2
12935: ST_TO_ADDR
12936: GO 12967
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12938: LD_ADDR_VAR 0 19
12942: PUSH
12943: LD_VAR 0 19
12947: PPUSH
12948: LD_VAR 0 19
12952: PUSH
12953: LD_INT 1
12955: PLUS
12956: PPUSH
12957: LD_VAR 0 9
12961: PPUSH
12962: CALL_OW 2
12966: ST_TO_ADDR
12967: GO 12895
12969: POP
12970: POP
// if tmp then
12971: LD_VAR 0 19
12975: IFFALSE 12987
// f := tmp ;
12977: LD_ADDR_VAR 0 12
12981: PUSH
12982: LD_VAR 0 19
12986: ST_TO_ADDR
// end ; x := personel [ i ] ;
12987: LD_ADDR_VAR 0 13
12991: PUSH
12992: LD_VAR 0 6
12996: PUSH
12997: LD_VAR 0 8
13001: ARRAY
13002: ST_TO_ADDR
// if x = - 1 then
13003: LD_VAR 0 13
13007: PUSH
13008: LD_INT 1
13010: NEG
13011: EQUAL
13012: IFFALSE 13221
// begin for j in f do
13014: LD_ADDR_VAR 0 9
13018: PUSH
13019: LD_VAR 0 12
13023: PUSH
13024: FOR_IN
13025: IFFALSE 13217
// repeat InitHc ;
13027: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13031: LD_VAR 0 9
13035: PPUSH
13036: CALL_OW 266
13040: PUSH
13041: LD_INT 5
13043: EQUAL
13044: IFFALSE 13114
// begin if UnitsInside ( j ) < 3 then
13046: LD_VAR 0 9
13050: PPUSH
13051: CALL_OW 313
13055: PUSH
13056: LD_INT 3
13058: LESS
13059: IFFALSE 13095
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13061: LD_INT 0
13063: PPUSH
13064: LD_INT 5
13066: PUSH
13067: LD_INT 8
13069: PUSH
13070: LD_INT 9
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_VAR 0 17
13082: ARRAY
13083: PPUSH
13084: LD_VAR 0 4
13088: PPUSH
13089: CALL_OW 380
13093: GO 13112
// PrepareHuman ( false , i , skill ) ;
13095: LD_INT 0
13097: PPUSH
13098: LD_VAR 0 8
13102: PPUSH
13103: LD_VAR 0 4
13107: PPUSH
13108: CALL_OW 380
// end else
13112: GO 13131
// PrepareHuman ( false , i , skill ) ;
13114: LD_INT 0
13116: PPUSH
13117: LD_VAR 0 8
13121: PPUSH
13122: LD_VAR 0 4
13126: PPUSH
13127: CALL_OW 380
// un := CreateHuman ;
13131: LD_ADDR_VAR 0 14
13135: PUSH
13136: CALL_OW 44
13140: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13141: LD_ADDR_VAR 0 7
13145: PUSH
13146: LD_VAR 0 7
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: LD_VAR 0 14
13158: PPUSH
13159: CALL_OW 2
13163: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13164: LD_VAR 0 14
13168: PPUSH
13169: LD_VAR 0 9
13173: PPUSH
13174: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13178: LD_VAR 0 9
13182: PPUSH
13183: CALL_OW 313
13187: PUSH
13188: LD_INT 6
13190: EQUAL
13191: PUSH
13192: LD_VAR 0 9
13196: PPUSH
13197: CALL_OW 266
13201: PUSH
13202: LD_INT 32
13204: PUSH
13205: LD_INT 31
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: IN
13212: OR
13213: IFFALSE 13027
13215: GO 13024
13217: POP
13218: POP
// end else
13219: GO 13601
// for j = 1 to x do
13221: LD_ADDR_VAR 0 9
13225: PUSH
13226: DOUBLE
13227: LD_INT 1
13229: DEC
13230: ST_TO_ADDR
13231: LD_VAR 0 13
13235: PUSH
13236: FOR_TO
13237: IFFALSE 13599
// begin InitHc ;
13239: CALL_OW 19
// if not f then
13243: LD_VAR 0 12
13247: NOT
13248: IFFALSE 13337
// begin PrepareHuman ( false , i , skill ) ;
13250: LD_INT 0
13252: PPUSH
13253: LD_VAR 0 8
13257: PPUSH
13258: LD_VAR 0 4
13262: PPUSH
13263: CALL_OW 380
// un := CreateHuman ;
13267: LD_ADDR_VAR 0 14
13271: PUSH
13272: CALL_OW 44
13276: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13277: LD_ADDR_VAR 0 7
13281: PUSH
13282: LD_VAR 0 7
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: LD_VAR 0 14
13294: PPUSH
13295: CALL_OW 2
13299: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13300: LD_VAR 0 14
13304: PPUSH
13305: LD_VAR 0 1
13309: PPUSH
13310: CALL_OW 250
13314: PPUSH
13315: LD_VAR 0 1
13319: PPUSH
13320: CALL_OW 251
13324: PPUSH
13325: LD_INT 10
13327: PPUSH
13328: LD_INT 0
13330: PPUSH
13331: CALL_OW 50
// continue ;
13335: GO 13236
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13337: LD_VAR 0 12
13341: PUSH
13342: LD_INT 1
13344: ARRAY
13345: PPUSH
13346: CALL_OW 313
13350: PUSH
13351: LD_VAR 0 12
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: CALL_OW 266
13364: PUSH
13365: LD_INT 32
13367: PUSH
13368: LD_INT 31
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: IN
13375: AND
13376: PUSH
13377: LD_VAR 0 12
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: PPUSH
13386: CALL_OW 313
13390: PUSH
13391: LD_INT 6
13393: EQUAL
13394: OR
13395: IFFALSE 13415
// f := Delete ( f , 1 ) ;
13397: LD_ADDR_VAR 0 12
13401: PUSH
13402: LD_VAR 0 12
13406: PPUSH
13407: LD_INT 1
13409: PPUSH
13410: CALL_OW 3
13414: ST_TO_ADDR
// if not f then
13415: LD_VAR 0 12
13419: NOT
13420: IFFALSE 13438
// begin x := x + 2 ;
13422: LD_ADDR_VAR 0 13
13426: PUSH
13427: LD_VAR 0 13
13431: PUSH
13432: LD_INT 2
13434: PLUS
13435: ST_TO_ADDR
// continue ;
13436: GO 13236
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13438: LD_VAR 0 12
13442: PUSH
13443: LD_INT 1
13445: ARRAY
13446: PPUSH
13447: CALL_OW 266
13451: PUSH
13452: LD_INT 5
13454: EQUAL
13455: IFFALSE 13529
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13457: LD_VAR 0 12
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: PPUSH
13466: CALL_OW 313
13470: PUSH
13471: LD_INT 3
13473: LESS
13474: IFFALSE 13510
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13476: LD_INT 0
13478: PPUSH
13479: LD_INT 5
13481: PUSH
13482: LD_INT 8
13484: PUSH
13485: LD_INT 9
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: PUSH
13493: LD_VAR 0 17
13497: ARRAY
13498: PPUSH
13499: LD_VAR 0 4
13503: PPUSH
13504: CALL_OW 380
13508: GO 13527
// PrepareHuman ( false , i , skill ) ;
13510: LD_INT 0
13512: PPUSH
13513: LD_VAR 0 8
13517: PPUSH
13518: LD_VAR 0 4
13522: PPUSH
13523: CALL_OW 380
// end else
13527: GO 13546
// PrepareHuman ( false , i , skill ) ;
13529: LD_INT 0
13531: PPUSH
13532: LD_VAR 0 8
13536: PPUSH
13537: LD_VAR 0 4
13541: PPUSH
13542: CALL_OW 380
// un := CreateHuman ;
13546: LD_ADDR_VAR 0 14
13550: PUSH
13551: CALL_OW 44
13555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13556: LD_ADDR_VAR 0 7
13560: PUSH
13561: LD_VAR 0 7
13565: PPUSH
13566: LD_INT 1
13568: PPUSH
13569: LD_VAR 0 14
13573: PPUSH
13574: CALL_OW 2
13578: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13579: LD_VAR 0 14
13583: PPUSH
13584: LD_VAR 0 12
13588: PUSH
13589: LD_INT 1
13591: ARRAY
13592: PPUSH
13593: CALL_OW 52
// end ;
13597: GO 13236
13599: POP
13600: POP
// end ;
13601: GO 12538
13603: POP
13604: POP
// result := result ^ buildings ;
13605: LD_ADDR_VAR 0 7
13609: PUSH
13610: LD_VAR 0 7
13614: PUSH
13615: LD_VAR 0 18
13619: ADD
13620: ST_TO_ADDR
// end else
13621: GO 13764
// begin for i = 1 to personel do
13623: LD_ADDR_VAR 0 8
13627: PUSH
13628: DOUBLE
13629: LD_INT 1
13631: DEC
13632: ST_TO_ADDR
13633: LD_VAR 0 6
13637: PUSH
13638: FOR_TO
13639: IFFALSE 13762
// begin if i > 4 then
13641: LD_VAR 0 8
13645: PUSH
13646: LD_INT 4
13648: GREATER
13649: IFFALSE 13653
// break ;
13651: GO 13762
// x := personel [ i ] ;
13653: LD_ADDR_VAR 0 13
13657: PUSH
13658: LD_VAR 0 6
13662: PUSH
13663: LD_VAR 0 8
13667: ARRAY
13668: ST_TO_ADDR
// if x = - 1 then
13669: LD_VAR 0 13
13673: PUSH
13674: LD_INT 1
13676: NEG
13677: EQUAL
13678: IFFALSE 13682
// continue ;
13680: GO 13638
// PrepareHuman ( false , i , skill ) ;
13682: LD_INT 0
13684: PPUSH
13685: LD_VAR 0 8
13689: PPUSH
13690: LD_VAR 0 4
13694: PPUSH
13695: CALL_OW 380
// un := CreateHuman ;
13699: LD_ADDR_VAR 0 14
13703: PUSH
13704: CALL_OW 44
13708: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13709: LD_VAR 0 14
13713: PPUSH
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 250
13723: PPUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 251
13733: PPUSH
13734: LD_INT 10
13736: PPUSH
13737: LD_INT 0
13739: PPUSH
13740: CALL_OW 50
// result := result ^ un ;
13744: LD_ADDR_VAR 0 7
13748: PUSH
13749: LD_VAR 0 7
13753: PUSH
13754: LD_VAR 0 14
13758: ADD
13759: ST_TO_ADDR
// end ;
13760: GO 13638
13762: POP
13763: POP
// end ; end ;
13764: LD_VAR 0 7
13768: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13769: LD_INT 0
13771: PPUSH
13772: PPUSH
13773: PPUSH
13774: PPUSH
13775: PPUSH
13776: PPUSH
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
// result := false ;
13787: LD_ADDR_VAR 0 3
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13795: LD_VAR 0 1
13799: NOT
13800: PUSH
13801: LD_VAR 0 1
13805: PPUSH
13806: CALL_OW 266
13810: PUSH
13811: LD_INT 32
13813: PUSH
13814: LD_INT 33
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: IN
13821: NOT
13822: OR
13823: IFFALSE 13827
// exit ;
13825: GO 14936
// nat := GetNation ( tower ) ;
13827: LD_ADDR_VAR 0 12
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 248
13841: ST_TO_ADDR
// side := GetSide ( tower ) ;
13842: LD_ADDR_VAR 0 16
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 255
13856: ST_TO_ADDR
// x := GetX ( tower ) ;
13857: LD_ADDR_VAR 0 10
13861: PUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: CALL_OW 250
13871: ST_TO_ADDR
// y := GetY ( tower ) ;
13872: LD_ADDR_VAR 0 11
13876: PUSH
13877: LD_VAR 0 1
13881: PPUSH
13882: CALL_OW 251
13886: ST_TO_ADDR
// if not x or not y then
13887: LD_VAR 0 10
13891: NOT
13892: PUSH
13893: LD_VAR 0 11
13897: NOT
13898: OR
13899: IFFALSE 13903
// exit ;
13901: GO 14936
// weapon := 0 ;
13903: LD_ADDR_VAR 0 18
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// fac_list := [ ] ;
13911: LD_ADDR_VAR 0 17
13915: PUSH
13916: EMPTY
13917: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13918: LD_ADDR_VAR 0 6
13922: PUSH
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 274
13932: PPUSH
13933: LD_VAR 0 2
13937: PPUSH
13938: LD_INT 0
13940: PPUSH
13941: CALL 11507 0 3
13945: PPUSH
13946: LD_INT 30
13948: PUSH
13949: LD_INT 3
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PPUSH
13956: CALL_OW 72
13960: ST_TO_ADDR
// if not factories then
13961: LD_VAR 0 6
13965: NOT
13966: IFFALSE 13970
// exit ;
13968: GO 14936
// for i in factories do
13970: LD_ADDR_VAR 0 8
13974: PUSH
13975: LD_VAR 0 6
13979: PUSH
13980: FOR_IN
13981: IFFALSE 14006
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13983: LD_ADDR_VAR 0 17
13987: PUSH
13988: LD_VAR 0 17
13992: PUSH
13993: LD_VAR 0 8
13997: PPUSH
13998: CALL_OW 478
14002: UNION
14003: ST_TO_ADDR
14004: GO 13980
14006: POP
14007: POP
// if not fac_list then
14008: LD_VAR 0 17
14012: NOT
14013: IFFALSE 14017
// exit ;
14015: GO 14936
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14017: LD_ADDR_VAR 0 5
14021: PUSH
14022: LD_INT 4
14024: PUSH
14025: LD_INT 5
14027: PUSH
14028: LD_INT 9
14030: PUSH
14031: LD_INT 10
14033: PUSH
14034: LD_INT 6
14036: PUSH
14037: LD_INT 7
14039: PUSH
14040: LD_INT 11
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 27
14054: PUSH
14055: LD_INT 28
14057: PUSH
14058: LD_INT 26
14060: PUSH
14061: LD_INT 30
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 43
14072: PUSH
14073: LD_INT 44
14075: PUSH
14076: LD_INT 46
14078: PUSH
14079: LD_INT 45
14081: PUSH
14082: LD_INT 47
14084: PUSH
14085: LD_INT 49
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: LD_VAR 0 12
14105: ARRAY
14106: ST_TO_ADDR
// list := list isect fac_list ;
14107: LD_ADDR_VAR 0 5
14111: PUSH
14112: LD_VAR 0 5
14116: PUSH
14117: LD_VAR 0 17
14121: ISECT
14122: ST_TO_ADDR
// if not list then
14123: LD_VAR 0 5
14127: NOT
14128: IFFALSE 14132
// exit ;
14130: GO 14936
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14132: LD_VAR 0 12
14136: PUSH
14137: LD_INT 3
14139: EQUAL
14140: PUSH
14141: LD_INT 49
14143: PUSH
14144: LD_VAR 0 5
14148: IN
14149: AND
14150: PUSH
14151: LD_INT 31
14153: PPUSH
14154: LD_VAR 0 16
14158: PPUSH
14159: CALL_OW 321
14163: PUSH
14164: LD_INT 2
14166: EQUAL
14167: AND
14168: IFFALSE 14228
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14170: LD_INT 22
14172: PUSH
14173: LD_VAR 0 16
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 35
14184: PUSH
14185: LD_INT 49
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 91
14194: PUSH
14195: LD_VAR 0 1
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PPUSH
14213: CALL_OW 69
14217: NOT
14218: IFFALSE 14228
// weapon := ru_time_lapser ;
14220: LD_ADDR_VAR 0 18
14224: PUSH
14225: LD_INT 49
14227: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14228: LD_VAR 0 12
14232: PUSH
14233: LD_INT 1
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: IN
14243: PUSH
14244: LD_INT 11
14246: PUSH
14247: LD_VAR 0 5
14251: IN
14252: PUSH
14253: LD_INT 30
14255: PUSH
14256: LD_VAR 0 5
14260: IN
14261: OR
14262: AND
14263: PUSH
14264: LD_INT 6
14266: PPUSH
14267: LD_VAR 0 16
14271: PPUSH
14272: CALL_OW 321
14276: PUSH
14277: LD_INT 2
14279: EQUAL
14280: AND
14281: IFFALSE 14446
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14283: LD_INT 22
14285: PUSH
14286: LD_VAR 0 16
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 2
14297: PUSH
14298: LD_INT 35
14300: PUSH
14301: LD_INT 11
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 35
14310: PUSH
14311: LD_INT 30
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 91
14325: PUSH
14326: LD_VAR 0 1
14330: PUSH
14331: LD_INT 18
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: NOT
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_VAR 0 16
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 30
14367: PUSH
14368: LD_INT 32
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 30
14377: PUSH
14378: LD_INT 33
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 91
14392: PUSH
14393: LD_VAR 0 1
14397: PUSH
14398: LD_INT 12
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: PUSH
14419: LD_INT 2
14421: GREATER
14422: AND
14423: IFFALSE 14446
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14425: LD_ADDR_VAR 0 18
14429: PUSH
14430: LD_INT 11
14432: PUSH
14433: LD_INT 30
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_VAR 0 12
14444: ARRAY
14445: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14446: LD_VAR 0 18
14450: NOT
14451: PUSH
14452: LD_INT 40
14454: PPUSH
14455: LD_VAR 0 16
14459: PPUSH
14460: CALL_OW 321
14464: PUSH
14465: LD_INT 2
14467: EQUAL
14468: AND
14469: PUSH
14470: LD_INT 7
14472: PUSH
14473: LD_VAR 0 5
14477: IN
14478: PUSH
14479: LD_INT 28
14481: PUSH
14482: LD_VAR 0 5
14486: IN
14487: OR
14488: PUSH
14489: LD_INT 45
14491: PUSH
14492: LD_VAR 0 5
14496: IN
14497: OR
14498: AND
14499: IFFALSE 14753
// begin hex := GetHexInfo ( x , y ) ;
14501: LD_ADDR_VAR 0 4
14505: PUSH
14506: LD_VAR 0 10
14510: PPUSH
14511: LD_VAR 0 11
14515: PPUSH
14516: CALL_OW 546
14520: ST_TO_ADDR
// if hex [ 1 ] then
14521: LD_VAR 0 4
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: IFFALSE 14533
// exit ;
14531: GO 14936
// height := hex [ 2 ] ;
14533: LD_ADDR_VAR 0 15
14537: PUSH
14538: LD_VAR 0 4
14542: PUSH
14543: LD_INT 2
14545: ARRAY
14546: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14547: LD_ADDR_VAR 0 14
14551: PUSH
14552: LD_INT 0
14554: PUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 3
14560: PUSH
14561: LD_INT 5
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: ST_TO_ADDR
// for i in tmp do
14570: LD_ADDR_VAR 0 8
14574: PUSH
14575: LD_VAR 0 14
14579: PUSH
14580: FOR_IN
14581: IFFALSE 14751
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14583: LD_ADDR_VAR 0 9
14587: PUSH
14588: LD_VAR 0 10
14592: PPUSH
14593: LD_VAR 0 8
14597: PPUSH
14598: LD_INT 5
14600: PPUSH
14601: CALL_OW 272
14605: PUSH
14606: LD_VAR 0 11
14610: PPUSH
14611: LD_VAR 0 8
14615: PPUSH
14616: LD_INT 5
14618: PPUSH
14619: CALL_OW 273
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14628: LD_VAR 0 9
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 9
14641: PUSH
14642: LD_INT 2
14644: ARRAY
14645: PPUSH
14646: CALL_OW 488
14650: IFFALSE 14749
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14652: LD_ADDR_VAR 0 4
14656: PUSH
14657: LD_VAR 0 9
14661: PUSH
14662: LD_INT 1
14664: ARRAY
14665: PPUSH
14666: LD_VAR 0 9
14670: PUSH
14671: LD_INT 2
14673: ARRAY
14674: PPUSH
14675: CALL_OW 546
14679: ST_TO_ADDR
// if hex [ 1 ] then
14680: LD_VAR 0 4
14684: PUSH
14685: LD_INT 1
14687: ARRAY
14688: IFFALSE 14692
// continue ;
14690: GO 14580
// h := hex [ 2 ] ;
14692: LD_ADDR_VAR 0 13
14696: PUSH
14697: LD_VAR 0 4
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: ST_TO_ADDR
// if h + 7 < height then
14706: LD_VAR 0 13
14710: PUSH
14711: LD_INT 7
14713: PLUS
14714: PUSH
14715: LD_VAR 0 15
14719: LESS
14720: IFFALSE 14749
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14722: LD_ADDR_VAR 0 18
14726: PUSH
14727: LD_INT 7
14729: PUSH
14730: LD_INT 28
14732: PUSH
14733: LD_INT 45
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_VAR 0 12
14745: ARRAY
14746: ST_TO_ADDR
// break ;
14747: GO 14751
// end ; end ; end ;
14749: GO 14580
14751: POP
14752: POP
// end ; if not weapon then
14753: LD_VAR 0 18
14757: NOT
14758: IFFALSE 14818
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14760: LD_ADDR_VAR 0 5
14764: PUSH
14765: LD_VAR 0 5
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_INT 30
14775: PUSH
14776: LD_INT 49
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: DIFF
14784: ST_TO_ADDR
// if not list then
14785: LD_VAR 0 5
14789: NOT
14790: IFFALSE 14794
// exit ;
14792: GO 14936
// weapon := list [ rand ( 1 , list ) ] ;
14794: LD_ADDR_VAR 0 18
14798: PUSH
14799: LD_VAR 0 5
14803: PUSH
14804: LD_INT 1
14806: PPUSH
14807: LD_VAR 0 5
14811: PPUSH
14812: CALL_OW 12
14816: ARRAY
14817: ST_TO_ADDR
// end ; if weapon then
14818: LD_VAR 0 18
14822: IFFALSE 14936
// begin tmp := CostOfWeapon ( weapon ) ;
14824: LD_ADDR_VAR 0 14
14828: PUSH
14829: LD_VAR 0 18
14833: PPUSH
14834: CALL_OW 451
14838: ST_TO_ADDR
// j := GetBase ( tower ) ;
14839: LD_ADDR_VAR 0 9
14843: PUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 274
14853: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14854: LD_VAR 0 9
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 275
14866: PUSH
14867: LD_VAR 0 14
14871: PUSH
14872: LD_INT 1
14874: ARRAY
14875: GREATEREQUAL
14876: PUSH
14877: LD_VAR 0 9
14881: PPUSH
14882: LD_INT 2
14884: PPUSH
14885: CALL_OW 275
14889: PUSH
14890: LD_VAR 0 14
14894: PUSH
14895: LD_INT 2
14897: ARRAY
14898: GREATEREQUAL
14899: AND
14900: PUSH
14901: LD_VAR 0 9
14905: PPUSH
14906: LD_INT 3
14908: PPUSH
14909: CALL_OW 275
14913: PUSH
14914: LD_VAR 0 14
14918: PUSH
14919: LD_INT 3
14921: ARRAY
14922: GREATEREQUAL
14923: AND
14924: IFFALSE 14936
// result := weapon ;
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_VAR 0 18
14935: ST_TO_ADDR
// end ; end ;
14936: LD_VAR 0 3
14940: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14941: LD_INT 0
14943: PPUSH
14944: PPUSH
// result := true ;
14945: LD_ADDR_VAR 0 3
14949: PUSH
14950: LD_INT 1
14952: ST_TO_ADDR
// if array1 = array2 then
14953: LD_VAR 0 1
14957: PUSH
14958: LD_VAR 0 2
14962: EQUAL
14963: IFFALSE 15023
// begin for i = 1 to array1 do
14965: LD_ADDR_VAR 0 4
14969: PUSH
14970: DOUBLE
14971: LD_INT 1
14973: DEC
14974: ST_TO_ADDR
14975: LD_VAR 0 1
14979: PUSH
14980: FOR_TO
14981: IFFALSE 15019
// if array1 [ i ] <> array2 [ i ] then
14983: LD_VAR 0 1
14987: PUSH
14988: LD_VAR 0 4
14992: ARRAY
14993: PUSH
14994: LD_VAR 0 2
14998: PUSH
14999: LD_VAR 0 4
15003: ARRAY
15004: NONEQUAL
15005: IFFALSE 15017
// begin result := false ;
15007: LD_ADDR_VAR 0 3
15011: PUSH
15012: LD_INT 0
15014: ST_TO_ADDR
// break ;
15015: GO 15019
// end ;
15017: GO 14980
15019: POP
15020: POP
// end else
15021: GO 15031
// result := false ;
15023: LD_ADDR_VAR 0 3
15027: PUSH
15028: LD_INT 0
15030: ST_TO_ADDR
// end ;
15031: LD_VAR 0 3
15035: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15036: LD_INT 0
15038: PPUSH
15039: PPUSH
// if not array1 or not array2 then
15040: LD_VAR 0 1
15044: NOT
15045: PUSH
15046: LD_VAR 0 2
15050: NOT
15051: OR
15052: IFFALSE 15056
// exit ;
15054: GO 15120
// result := true ;
15056: LD_ADDR_VAR 0 3
15060: PUSH
15061: LD_INT 1
15063: ST_TO_ADDR
// for i = 1 to array1 do
15064: LD_ADDR_VAR 0 4
15068: PUSH
15069: DOUBLE
15070: LD_INT 1
15072: DEC
15073: ST_TO_ADDR
15074: LD_VAR 0 1
15078: PUSH
15079: FOR_TO
15080: IFFALSE 15118
// if array1 [ i ] <> array2 [ i ] then
15082: LD_VAR 0 1
15086: PUSH
15087: LD_VAR 0 4
15091: ARRAY
15092: PUSH
15093: LD_VAR 0 2
15097: PUSH
15098: LD_VAR 0 4
15102: ARRAY
15103: NONEQUAL
15104: IFFALSE 15116
// begin result := false ;
15106: LD_ADDR_VAR 0 3
15110: PUSH
15111: LD_INT 0
15113: ST_TO_ADDR
// break ;
15114: GO 15118
// end ;
15116: GO 15079
15118: POP
15119: POP
// end ;
15120: LD_VAR 0 3
15124: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15125: LD_INT 0
15127: PPUSH
15128: PPUSH
15129: PPUSH
// pom := GetBase ( fac ) ;
15130: LD_ADDR_VAR 0 5
15134: PUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 274
15144: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15145: LD_ADDR_VAR 0 4
15149: PUSH
15150: LD_VAR 0 2
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: LD_VAR 0 2
15163: PUSH
15164: LD_INT 2
15166: ARRAY
15167: PPUSH
15168: LD_VAR 0 2
15172: PUSH
15173: LD_INT 3
15175: ARRAY
15176: PPUSH
15177: LD_VAR 0 2
15181: PUSH
15182: LD_INT 4
15184: ARRAY
15185: PPUSH
15186: CALL_OW 449
15190: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_VAR 0 5
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 275
15208: PUSH
15209: LD_VAR 0 4
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: GREATEREQUAL
15218: PUSH
15219: LD_VAR 0 5
15223: PPUSH
15224: LD_INT 2
15226: PPUSH
15227: CALL_OW 275
15231: PUSH
15232: LD_VAR 0 4
15236: PUSH
15237: LD_INT 2
15239: ARRAY
15240: GREATEREQUAL
15241: AND
15242: PUSH
15243: LD_VAR 0 5
15247: PPUSH
15248: LD_INT 3
15250: PPUSH
15251: CALL_OW 275
15255: PUSH
15256: LD_VAR 0 4
15260: PUSH
15261: LD_INT 3
15263: ARRAY
15264: GREATEREQUAL
15265: AND
15266: ST_TO_ADDR
// end ;
15267: LD_VAR 0 3
15271: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
// pom := GetBase ( building ) ;
15278: LD_ADDR_VAR 0 3
15282: PUSH
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 274
15292: ST_TO_ADDR
// if not pom then
15293: LD_VAR 0 3
15297: NOT
15298: IFFALSE 15302
// exit ;
15300: GO 15472
// btype := GetBType ( building ) ;
15302: LD_ADDR_VAR 0 5
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 266
15316: ST_TO_ADDR
// if btype = b_armoury then
15317: LD_VAR 0 5
15321: PUSH
15322: LD_INT 4
15324: EQUAL
15325: IFFALSE 15335
// btype := b_barracks ;
15327: LD_ADDR_VAR 0 5
15331: PUSH
15332: LD_INT 5
15334: ST_TO_ADDR
// if btype = b_depot then
15335: LD_VAR 0 5
15339: PUSH
15340: LD_INT 0
15342: EQUAL
15343: IFFALSE 15353
// btype := b_warehouse ;
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// if btype = b_workshop then
15353: LD_VAR 0 5
15357: PUSH
15358: LD_INT 2
15360: EQUAL
15361: IFFALSE 15371
// btype := b_factory ;
15363: LD_ADDR_VAR 0 5
15367: PUSH
15368: LD_INT 3
15370: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15371: LD_ADDR_VAR 0 4
15375: PUSH
15376: LD_VAR 0 5
15380: PPUSH
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 248
15390: PPUSH
15391: CALL_OW 450
15395: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: CALL_OW 275
15413: PUSH
15414: LD_VAR 0 4
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: GREATEREQUAL
15423: PUSH
15424: LD_VAR 0 3
15428: PPUSH
15429: LD_INT 2
15431: PPUSH
15432: CALL_OW 275
15436: PUSH
15437: LD_VAR 0 4
15441: PUSH
15442: LD_INT 2
15444: ARRAY
15445: GREATEREQUAL
15446: AND
15447: PUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_INT 3
15455: PPUSH
15456: CALL_OW 275
15460: PUSH
15461: LD_VAR 0 4
15465: PUSH
15466: LD_INT 3
15468: ARRAY
15469: GREATEREQUAL
15470: AND
15471: ST_TO_ADDR
// end ;
15472: LD_VAR 0 2
15476: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15477: LD_INT 0
15479: PPUSH
15480: PPUSH
15481: PPUSH
// pom := GetBase ( building ) ;
15482: LD_ADDR_VAR 0 4
15486: PUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 274
15496: ST_TO_ADDR
// if not pom then
15497: LD_VAR 0 4
15501: NOT
15502: IFFALSE 15506
// exit ;
15504: GO 15607
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15506: LD_ADDR_VAR 0 5
15510: PUSH
15511: LD_VAR 0 2
15515: PPUSH
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL_OW 248
15525: PPUSH
15526: CALL_OW 450
15530: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_VAR 0 4
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 275
15548: PUSH
15549: LD_VAR 0 5
15553: PUSH
15554: LD_INT 1
15556: ARRAY
15557: GREATEREQUAL
15558: PUSH
15559: LD_VAR 0 4
15563: PPUSH
15564: LD_INT 2
15566: PPUSH
15567: CALL_OW 275
15571: PUSH
15572: LD_VAR 0 5
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: GREATEREQUAL
15581: AND
15582: PUSH
15583: LD_VAR 0 4
15587: PPUSH
15588: LD_INT 3
15590: PPUSH
15591: CALL_OW 275
15595: PUSH
15596: LD_VAR 0 5
15600: PUSH
15601: LD_INT 3
15603: ARRAY
15604: GREATEREQUAL
15605: AND
15606: ST_TO_ADDR
// end ;
15607: LD_VAR 0 3
15611: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
// result := false ;
15625: LD_ADDR_VAR 0 8
15629: PUSH
15630: LD_INT 0
15632: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15633: LD_VAR 0 5
15637: NOT
15638: PUSH
15639: LD_VAR 0 1
15643: NOT
15644: OR
15645: PUSH
15646: LD_VAR 0 2
15650: NOT
15651: OR
15652: PUSH
15653: LD_VAR 0 3
15657: NOT
15658: OR
15659: IFFALSE 15663
// exit ;
15661: GO 16477
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15663: LD_ADDR_VAR 0 14
15667: PUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: LD_VAR 0 2
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: LD_VAR 0 4
15687: PPUSH
15688: LD_VAR 0 5
15692: PUSH
15693: LD_INT 1
15695: ARRAY
15696: PPUSH
15697: CALL_OW 248
15701: PPUSH
15702: LD_INT 0
15704: PPUSH
15705: CALL 17714 0 6
15709: ST_TO_ADDR
// if not hexes then
15710: LD_VAR 0 14
15714: NOT
15715: IFFALSE 15719
// exit ;
15717: GO 16477
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15719: LD_ADDR_VAR 0 17
15723: PUSH
15724: LD_VAR 0 5
15728: PPUSH
15729: LD_INT 22
15731: PUSH
15732: LD_VAR 0 13
15736: PPUSH
15737: CALL_OW 255
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 2
15748: PUSH
15749: LD_INT 30
15751: PUSH
15752: LD_INT 0
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 30
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PPUSH
15778: CALL_OW 72
15782: ST_TO_ADDR
// for i = 1 to hexes do
15783: LD_ADDR_VAR 0 9
15787: PUSH
15788: DOUBLE
15789: LD_INT 1
15791: DEC
15792: ST_TO_ADDR
15793: LD_VAR 0 14
15797: PUSH
15798: FOR_TO
15799: IFFALSE 16475
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15801: LD_ADDR_VAR 0 13
15805: PUSH
15806: LD_VAR 0 14
15810: PUSH
15811: LD_VAR 0 9
15815: ARRAY
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: LD_VAR 0 14
15825: PUSH
15826: LD_VAR 0 9
15830: ARRAY
15831: PUSH
15832: LD_INT 2
15834: ARRAY
15835: PPUSH
15836: CALL_OW 428
15840: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15841: LD_VAR 0 14
15845: PUSH
15846: LD_VAR 0 9
15850: ARRAY
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: PPUSH
15856: LD_VAR 0 14
15860: PUSH
15861: LD_VAR 0 9
15865: ARRAY
15866: PUSH
15867: LD_INT 2
15869: ARRAY
15870: PPUSH
15871: CALL_OW 351
15875: PUSH
15876: LD_VAR 0 14
15880: PUSH
15881: LD_VAR 0 9
15885: ARRAY
15886: PUSH
15887: LD_INT 1
15889: ARRAY
15890: PPUSH
15891: LD_VAR 0 14
15895: PUSH
15896: LD_VAR 0 9
15900: ARRAY
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: PPUSH
15906: CALL_OW 488
15910: NOT
15911: OR
15912: PUSH
15913: LD_VAR 0 13
15917: PPUSH
15918: CALL_OW 247
15922: PUSH
15923: LD_INT 3
15925: EQUAL
15926: OR
15927: IFFALSE 15933
// exit ;
15929: POP
15930: POP
15931: GO 16477
// if not tmp then
15933: LD_VAR 0 13
15937: NOT
15938: IFFALSE 15942
// continue ;
15940: GO 15798
// result := true ;
15942: LD_ADDR_VAR 0 8
15946: PUSH
15947: LD_INT 1
15949: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15950: LD_VAR 0 6
15954: PUSH
15955: LD_VAR 0 13
15959: PPUSH
15960: CALL_OW 247
15964: PUSH
15965: LD_INT 2
15967: EQUAL
15968: AND
15969: PUSH
15970: LD_VAR 0 13
15974: PPUSH
15975: CALL_OW 263
15979: PUSH
15980: LD_INT 1
15982: EQUAL
15983: AND
15984: IFFALSE 16148
// begin if IsDrivenBy ( tmp ) then
15986: LD_VAR 0 13
15990: PPUSH
15991: CALL_OW 311
15995: IFFALSE 15999
// continue ;
15997: GO 15798
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15999: LD_VAR 0 6
16003: PPUSH
16004: LD_INT 3
16006: PUSH
16007: LD_INT 60
16009: PUSH
16010: EMPTY
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 3
16019: PUSH
16020: LD_INT 55
16022: PUSH
16023: EMPTY
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PPUSH
16034: CALL_OW 72
16038: IFFALSE 16146
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16040: LD_ADDR_VAR 0 18
16044: PUSH
16045: LD_VAR 0 6
16049: PPUSH
16050: LD_INT 3
16052: PUSH
16053: LD_INT 60
16055: PUSH
16056: EMPTY
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 3
16065: PUSH
16066: LD_INT 55
16068: PUSH
16069: EMPTY
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 72
16084: PUSH
16085: LD_INT 1
16087: ARRAY
16088: ST_TO_ADDR
// if IsInUnit ( driver ) then
16089: LD_VAR 0 18
16093: PPUSH
16094: CALL_OW 310
16098: IFFALSE 16109
// ComExit ( driver ) ;
16100: LD_VAR 0 18
16104: PPUSH
16105: CALL 40898 0 1
// AddComEnterUnit ( driver , tmp ) ;
16109: LD_VAR 0 18
16113: PPUSH
16114: LD_VAR 0 13
16118: PPUSH
16119: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16123: LD_VAR 0 18
16127: PPUSH
16128: LD_VAR 0 7
16132: PPUSH
16133: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16137: LD_VAR 0 18
16141: PPUSH
16142: CALL_OW 181
// end ; continue ;
16146: GO 15798
// end ; if not cleaners or not tmp in cleaners then
16148: LD_VAR 0 6
16152: NOT
16153: PUSH
16154: LD_VAR 0 13
16158: PUSH
16159: LD_VAR 0 6
16163: IN
16164: NOT
16165: OR
16166: IFFALSE 16473
// begin if dep then
16168: LD_VAR 0 17
16172: IFFALSE 16308
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16174: LD_ADDR_VAR 0 16
16178: PUSH
16179: LD_VAR 0 17
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PPUSH
16188: CALL_OW 250
16192: PPUSH
16193: LD_VAR 0 17
16197: PUSH
16198: LD_INT 1
16200: ARRAY
16201: PPUSH
16202: CALL_OW 254
16206: PPUSH
16207: LD_INT 5
16209: PPUSH
16210: CALL_OW 272
16214: PUSH
16215: LD_VAR 0 17
16219: PUSH
16220: LD_INT 1
16222: ARRAY
16223: PPUSH
16224: CALL_OW 251
16228: PPUSH
16229: LD_VAR 0 17
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: CALL_OW 254
16242: PPUSH
16243: LD_INT 5
16245: PPUSH
16246: CALL_OW 273
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16255: LD_VAR 0 16
16259: PUSH
16260: LD_INT 1
16262: ARRAY
16263: PPUSH
16264: LD_VAR 0 16
16268: PUSH
16269: LD_INT 2
16271: ARRAY
16272: PPUSH
16273: CALL_OW 488
16277: IFFALSE 16308
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16279: LD_VAR 0 13
16283: PPUSH
16284: LD_VAR 0 16
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PPUSH
16293: LD_VAR 0 16
16297: PUSH
16298: LD_INT 2
16300: ARRAY
16301: PPUSH
16302: CALL_OW 111
// continue ;
16306: GO 15798
// end ; end ; r := GetDir ( tmp ) ;
16308: LD_ADDR_VAR 0 15
16312: PUSH
16313: LD_VAR 0 13
16317: PPUSH
16318: CALL_OW 254
16322: ST_TO_ADDR
// if r = 5 then
16323: LD_VAR 0 15
16327: PUSH
16328: LD_INT 5
16330: EQUAL
16331: IFFALSE 16341
// r := 0 ;
16333: LD_ADDR_VAR 0 15
16337: PUSH
16338: LD_INT 0
16340: ST_TO_ADDR
// for j = r to 5 do
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: DOUBLE
16347: LD_VAR 0 15
16351: DEC
16352: ST_TO_ADDR
16353: LD_INT 5
16355: PUSH
16356: FOR_TO
16357: IFFALSE 16471
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16359: LD_ADDR_VAR 0 11
16363: PUSH
16364: LD_VAR 0 13
16368: PPUSH
16369: CALL_OW 250
16373: PPUSH
16374: LD_VAR 0 10
16378: PPUSH
16379: LD_INT 2
16381: PPUSH
16382: CALL_OW 272
16386: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16387: LD_ADDR_VAR 0 12
16391: PUSH
16392: LD_VAR 0 13
16396: PPUSH
16397: CALL_OW 251
16401: PPUSH
16402: LD_VAR 0 10
16406: PPUSH
16407: LD_INT 2
16409: PPUSH
16410: CALL_OW 273
16414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16415: LD_VAR 0 11
16419: PPUSH
16420: LD_VAR 0 12
16424: PPUSH
16425: CALL_OW 488
16429: PUSH
16430: LD_VAR 0 11
16434: PPUSH
16435: LD_VAR 0 12
16439: PPUSH
16440: CALL_OW 428
16444: NOT
16445: AND
16446: IFFALSE 16469
// begin ComMoveXY ( tmp , _x , _y ) ;
16448: LD_VAR 0 13
16452: PPUSH
16453: LD_VAR 0 11
16457: PPUSH
16458: LD_VAR 0 12
16462: PPUSH
16463: CALL_OW 111
// break ;
16467: GO 16471
// end ; end ;
16469: GO 16356
16471: POP
16472: POP
// end ; end ;
16473: GO 15798
16475: POP
16476: POP
// end ;
16477: LD_VAR 0 8
16481: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16482: LD_INT 0
16484: PPUSH
// result := true ;
16485: LD_ADDR_VAR 0 3
16489: PUSH
16490: LD_INT 1
16492: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16493: LD_VAR 0 2
16497: PUSH
16498: LD_INT 24
16500: DOUBLE
16501: EQUAL
16502: IFTRUE 16512
16504: LD_INT 33
16506: DOUBLE
16507: EQUAL
16508: IFTRUE 16512
16510: GO 16537
16512: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16513: LD_ADDR_VAR 0 3
16517: PUSH
16518: LD_INT 32
16520: PPUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 321
16530: PUSH
16531: LD_INT 2
16533: EQUAL
16534: ST_TO_ADDR
16535: GO 16857
16537: LD_INT 20
16539: DOUBLE
16540: EQUAL
16541: IFTRUE 16545
16543: GO 16570
16545: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 6
16553: PPUSH
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 321
16563: PUSH
16564: LD_INT 2
16566: EQUAL
16567: ST_TO_ADDR
16568: GO 16857
16570: LD_INT 22
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16584
16576: LD_INT 36
16578: DOUBLE
16579: EQUAL
16580: IFTRUE 16584
16582: GO 16609
16584: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16585: LD_ADDR_VAR 0 3
16589: PUSH
16590: LD_INT 15
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 321
16602: PUSH
16603: LD_INT 2
16605: EQUAL
16606: ST_TO_ADDR
16607: GO 16857
16609: LD_INT 30
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16642
16617: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16618: LD_ADDR_VAR 0 3
16622: PUSH
16623: LD_INT 20
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 321
16635: PUSH
16636: LD_INT 2
16638: EQUAL
16639: ST_TO_ADDR
16640: GO 16857
16642: LD_INT 28
16644: DOUBLE
16645: EQUAL
16646: IFTRUE 16656
16648: LD_INT 21
16650: DOUBLE
16651: EQUAL
16652: IFTRUE 16656
16654: GO 16681
16656: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16657: LD_ADDR_VAR 0 3
16661: PUSH
16662: LD_INT 21
16664: PPUSH
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 321
16674: PUSH
16675: LD_INT 2
16677: EQUAL
16678: ST_TO_ADDR
16679: GO 16857
16681: LD_INT 16
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16689
16687: GO 16716
16689: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16690: LD_ADDR_VAR 0 3
16694: PUSH
16695: LD_EXP 98
16699: PPUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 321
16709: PUSH
16710: LD_INT 2
16712: EQUAL
16713: ST_TO_ADDR
16714: GO 16857
16716: LD_INT 19
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16730
16722: LD_INT 23
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16757
16730: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16731: LD_ADDR_VAR 0 3
16735: PUSH
16736: LD_EXP 97
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 321
16750: PUSH
16751: LD_INT 2
16753: EQUAL
16754: ST_TO_ADDR
16755: GO 16857
16757: LD_INT 17
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16790
16765: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_INT 39
16773: PPUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 321
16783: PUSH
16784: LD_INT 2
16786: EQUAL
16787: ST_TO_ADDR
16788: GO 16857
16790: LD_INT 18
16792: DOUBLE
16793: EQUAL
16794: IFTRUE 16798
16796: GO 16823
16798: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_INT 40
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 321
16816: PUSH
16817: LD_INT 2
16819: EQUAL
16820: ST_TO_ADDR
16821: GO 16857
16823: LD_INT 27
16825: DOUBLE
16826: EQUAL
16827: IFTRUE 16831
16829: GO 16856
16831: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16832: LD_ADDR_VAR 0 3
16836: PUSH
16837: LD_INT 35
16839: PPUSH
16840: LD_VAR 0 1
16844: PPUSH
16845: CALL_OW 321
16849: PUSH
16850: LD_INT 2
16852: EQUAL
16853: ST_TO_ADDR
16854: GO 16857
16856: POP
// end ;
16857: LD_VAR 0 3
16861: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
// result := false ;
16875: LD_ADDR_VAR 0 6
16879: PUSH
16880: LD_INT 0
16882: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16883: LD_VAR 0 1
16887: NOT
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 266
16898: PUSH
16899: LD_INT 0
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: IN
16909: NOT
16910: OR
16911: PUSH
16912: LD_VAR 0 2
16916: NOT
16917: OR
16918: PUSH
16919: LD_VAR 0 5
16923: PUSH
16924: LD_INT 0
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: LD_INT 2
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: LD_INT 4
16938: PUSH
16939: LD_INT 5
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: IN
16950: NOT
16951: OR
16952: PUSH
16953: LD_VAR 0 3
16957: PPUSH
16958: LD_VAR 0 4
16962: PPUSH
16963: CALL_OW 488
16967: NOT
16968: OR
16969: IFFALSE 16973
// exit ;
16971: GO 17709
// side := GetSide ( depot ) ;
16973: LD_ADDR_VAR 0 9
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 255
16987: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16988: LD_VAR 0 9
16992: PPUSH
16993: LD_VAR 0 2
16997: PPUSH
16998: CALL 16482 0 2
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17709
// pom := GetBase ( depot ) ;
17007: LD_ADDR_VAR 0 10
17011: PUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 274
17021: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17022: LD_ADDR_VAR 0 11
17026: PUSH
17027: LD_VAR 0 2
17031: PPUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 248
17041: PPUSH
17042: CALL_OW 450
17046: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17047: LD_VAR 0 10
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 275
17059: PUSH
17060: LD_VAR 0 11
17064: PUSH
17065: LD_INT 1
17067: ARRAY
17068: GREATEREQUAL
17069: PUSH
17070: LD_VAR 0 10
17074: PPUSH
17075: LD_INT 2
17077: PPUSH
17078: CALL_OW 275
17082: PUSH
17083: LD_VAR 0 11
17087: PUSH
17088: LD_INT 2
17090: ARRAY
17091: GREATEREQUAL
17092: AND
17093: PUSH
17094: LD_VAR 0 10
17098: PPUSH
17099: LD_INT 3
17101: PPUSH
17102: CALL_OW 275
17106: PUSH
17107: LD_VAR 0 11
17111: PUSH
17112: LD_INT 3
17114: ARRAY
17115: GREATEREQUAL
17116: AND
17117: NOT
17118: IFFALSE 17122
// exit ;
17120: GO 17709
// if GetBType ( depot ) = b_depot then
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 266
17131: PUSH
17132: LD_INT 0
17134: EQUAL
17135: IFFALSE 17147
// dist := 28 else
17137: LD_ADDR_VAR 0 14
17141: PUSH
17142: LD_INT 28
17144: ST_TO_ADDR
17145: GO 17155
// dist := 36 ;
17147: LD_ADDR_VAR 0 14
17151: PUSH
17152: LD_INT 36
17154: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_VAR 0 4
17169: PPUSH
17170: CALL_OW 297
17174: PUSH
17175: LD_VAR 0 14
17179: GREATER
17180: IFFALSE 17184
// exit ;
17182: GO 17709
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17184: LD_ADDR_VAR 0 12
17188: PUSH
17189: LD_VAR 0 2
17193: PPUSH
17194: LD_VAR 0 3
17198: PPUSH
17199: LD_VAR 0 4
17203: PPUSH
17204: LD_VAR 0 5
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 248
17218: PPUSH
17219: LD_INT 0
17221: PPUSH
17222: CALL 17714 0 6
17226: ST_TO_ADDR
// if not hexes then
17227: LD_VAR 0 12
17231: NOT
17232: IFFALSE 17236
// exit ;
17234: GO 17709
// hex := GetHexInfo ( x , y ) ;
17236: LD_ADDR_VAR 0 15
17240: PUSH
17241: LD_VAR 0 3
17245: PPUSH
17246: LD_VAR 0 4
17250: PPUSH
17251: CALL_OW 546
17255: ST_TO_ADDR
// if hex [ 1 ] then
17256: LD_VAR 0 15
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: IFFALSE 17268
// exit ;
17266: GO 17709
// height := hex [ 2 ] ;
17268: LD_ADDR_VAR 0 13
17272: PUSH
17273: LD_VAR 0 15
17277: PUSH
17278: LD_INT 2
17280: ARRAY
17281: ST_TO_ADDR
// for i = 1 to hexes do
17282: LD_ADDR_VAR 0 7
17286: PUSH
17287: DOUBLE
17288: LD_INT 1
17290: DEC
17291: ST_TO_ADDR
17292: LD_VAR 0 12
17296: PUSH
17297: FOR_TO
17298: IFFALSE 17628
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17300: LD_VAR 0 12
17304: PUSH
17305: LD_VAR 0 7
17309: ARRAY
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: PPUSH
17315: LD_VAR 0 12
17319: PUSH
17320: LD_VAR 0 7
17324: ARRAY
17325: PUSH
17326: LD_INT 2
17328: ARRAY
17329: PPUSH
17330: CALL_OW 488
17334: NOT
17335: PUSH
17336: LD_VAR 0 12
17340: PUSH
17341: LD_VAR 0 7
17345: ARRAY
17346: PUSH
17347: LD_INT 1
17349: ARRAY
17350: PPUSH
17351: LD_VAR 0 12
17355: PUSH
17356: LD_VAR 0 7
17360: ARRAY
17361: PUSH
17362: LD_INT 2
17364: ARRAY
17365: PPUSH
17366: CALL_OW 428
17370: PUSH
17371: LD_INT 0
17373: GREATER
17374: OR
17375: PUSH
17376: LD_VAR 0 12
17380: PUSH
17381: LD_VAR 0 7
17385: ARRAY
17386: PUSH
17387: LD_INT 1
17389: ARRAY
17390: PPUSH
17391: LD_VAR 0 12
17395: PUSH
17396: LD_VAR 0 7
17400: ARRAY
17401: PUSH
17402: LD_INT 2
17404: ARRAY
17405: PPUSH
17406: CALL_OW 351
17410: OR
17411: IFFALSE 17417
// exit ;
17413: POP
17414: POP
17415: GO 17709
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17417: LD_ADDR_VAR 0 8
17421: PUSH
17422: LD_VAR 0 12
17426: PUSH
17427: LD_VAR 0 7
17431: ARRAY
17432: PUSH
17433: LD_INT 1
17435: ARRAY
17436: PPUSH
17437: LD_VAR 0 12
17441: PUSH
17442: LD_VAR 0 7
17446: ARRAY
17447: PUSH
17448: LD_INT 2
17450: ARRAY
17451: PPUSH
17452: CALL_OW 546
17456: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17457: LD_VAR 0 8
17461: PUSH
17462: LD_INT 1
17464: ARRAY
17465: PUSH
17466: LD_VAR 0 8
17470: PUSH
17471: LD_INT 2
17473: ARRAY
17474: PUSH
17475: LD_VAR 0 13
17479: PUSH
17480: LD_INT 2
17482: PLUS
17483: GREATER
17484: OR
17485: PUSH
17486: LD_VAR 0 8
17490: PUSH
17491: LD_INT 2
17493: ARRAY
17494: PUSH
17495: LD_VAR 0 13
17499: PUSH
17500: LD_INT 2
17502: MINUS
17503: LESS
17504: OR
17505: PUSH
17506: LD_VAR 0 8
17510: PUSH
17511: LD_INT 3
17513: ARRAY
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 8
17520: PUSH
17521: LD_INT 9
17523: PUSH
17524: LD_INT 10
17526: PUSH
17527: LD_INT 11
17529: PUSH
17530: LD_INT 12
17532: PUSH
17533: LD_INT 13
17535: PUSH
17536: LD_INT 16
17538: PUSH
17539: LD_INT 17
17541: PUSH
17542: LD_INT 18
17544: PUSH
17545: LD_INT 19
17547: PUSH
17548: LD_INT 20
17550: PUSH
17551: LD_INT 21
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: IN
17569: NOT
17570: OR
17571: PUSH
17572: LD_VAR 0 8
17576: PUSH
17577: LD_INT 5
17579: ARRAY
17580: NOT
17581: OR
17582: PUSH
17583: LD_VAR 0 8
17587: PUSH
17588: LD_INT 6
17590: ARRAY
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 7
17600: PUSH
17601: LD_INT 9
17603: PUSH
17604: LD_INT 10
17606: PUSH
17607: LD_INT 11
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: IN
17618: NOT
17619: OR
17620: IFFALSE 17626
// exit ;
17622: POP
17623: POP
17624: GO 17709
// end ;
17626: GO 17297
17628: POP
17629: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17630: LD_VAR 0 9
17634: PPUSH
17635: LD_VAR 0 3
17639: PPUSH
17640: LD_VAR 0 4
17644: PPUSH
17645: LD_INT 20
17647: PPUSH
17648: CALL 9655 0 4
17652: PUSH
17653: LD_INT 4
17655: ARRAY
17656: IFFALSE 17660
// exit ;
17658: GO 17709
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17660: LD_VAR 0 2
17664: PUSH
17665: LD_INT 29
17667: PUSH
17668: LD_INT 30
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: IN
17675: PUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_VAR 0 4
17685: PPUSH
17686: LD_VAR 0 9
17690: PPUSH
17691: CALL_OW 440
17695: NOT
17696: AND
17697: IFFALSE 17701
// exit ;
17699: GO 17709
// result := true ;
17701: LD_ADDR_VAR 0 6
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// end ;
17709: LD_VAR 0 6
17713: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17714: LD_INT 0
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
17751: PPUSH
17752: PPUSH
17753: PPUSH
17754: PPUSH
17755: PPUSH
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
17766: PPUSH
17767: PPUSH
17768: PPUSH
17769: PPUSH
17770: PPUSH
17771: PPUSH
17772: PPUSH
17773: PPUSH
// result = [ ] ;
17774: LD_ADDR_VAR 0 7
17778: PUSH
17779: EMPTY
17780: ST_TO_ADDR
// temp_list = [ ] ;
17781: LD_ADDR_VAR 0 9
17785: PUSH
17786: EMPTY
17787: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17788: LD_VAR 0 4
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: LD_INT 2
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: LD_INT 4
17807: PUSH
17808: LD_INT 5
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: IN
17819: NOT
17820: PUSH
17821: LD_VAR 0 1
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: IN
17836: PUSH
17837: LD_VAR 0 5
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: LIST
17855: IN
17856: NOT
17857: AND
17858: OR
17859: IFFALSE 17863
// exit ;
17861: GO 36254
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17863: LD_VAR 0 1
17867: PUSH
17868: LD_INT 6
17870: PUSH
17871: LD_INT 7
17873: PUSH
17874: LD_INT 8
17876: PUSH
17877: LD_INT 13
17879: PUSH
17880: LD_INT 12
17882: PUSH
17883: LD_INT 15
17885: PUSH
17886: LD_INT 11
17888: PUSH
17889: LD_INT 14
17891: PUSH
17892: LD_INT 10
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: IN
17906: IFFALSE 17916
// btype = b_lab ;
17908: LD_ADDR_VAR 0 1
17912: PUSH
17913: LD_INT 6
17915: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17916: LD_VAR 0 6
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: LIST
17934: IN
17935: NOT
17936: PUSH
17937: LD_VAR 0 1
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: LD_INT 3
17953: PUSH
17954: LD_INT 6
17956: PUSH
17957: LD_INT 36
17959: PUSH
17960: LD_INT 4
17962: PUSH
17963: LD_INT 5
17965: PUSH
17966: LD_INT 31
17968: PUSH
17969: LD_INT 32
17971: PUSH
17972: LD_INT 33
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: IN
17988: NOT
17989: PUSH
17990: LD_VAR 0 6
17994: PUSH
17995: LD_INT 1
17997: EQUAL
17998: AND
17999: OR
18000: PUSH
18001: LD_VAR 0 1
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: IN
18016: NOT
18017: PUSH
18018: LD_VAR 0 6
18022: PUSH
18023: LD_INT 2
18025: EQUAL
18026: AND
18027: OR
18028: IFFALSE 18038
// mode = 0 ;
18030: LD_ADDR_VAR 0 6
18034: PUSH
18035: LD_INT 0
18037: ST_TO_ADDR
// case mode of 0 :
18038: LD_VAR 0 6
18042: PUSH
18043: LD_INT 0
18045: DOUBLE
18046: EQUAL
18047: IFTRUE 18051
18049: GO 29504
18051: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18052: LD_ADDR_VAR 0 11
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 0
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: NEG
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: LD_INT 1
18125: NEG
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: LD_INT 2
18137: NEG
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 3
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18245: LD_ADDR_VAR 0 12
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: LD_INT 1
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 0
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 1
18303: NEG
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: NEG
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: NEG
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 3
18402: NEG
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 3
18413: NEG
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18441: LD_ADDR_VAR 0 13
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: NEG
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 1
18522: NEG
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 2
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: NEG
18565: PUSH
18566: LD_INT 1
18568: NEG
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: NEG
18577: PUSH
18578: LD_INT 2
18580: NEG
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: NEG
18589: PUSH
18590: LD_INT 3
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 3
18600: NEG
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 3
18612: NEG
18613: PUSH
18614: LD_INT 3
18616: NEG
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18640: LD_ADDR_VAR 0 14
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 1
18721: NEG
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 2
18736: NEG
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: LD_INT 3
18790: NEG
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: LD_INT 3
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18836: LD_ADDR_VAR 0 15
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 1
18894: NEG
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: LD_INT 1
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: NEG
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 2
18970: NEG
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 3
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 3
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19029: LD_ADDR_VAR 0 16
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: NEG
19111: PUSH
19112: LD_INT 2
19114: NEG
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 2
19152: NEG
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: LD_INT 2
19168: NEG
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 3
19186: PUSH
19187: LD_INT 3
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 3
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19222: LD_ADDR_VAR 0 17
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 1
19280: NEG
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: NEG
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: NEG
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: LD_INT 2
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: LD_INT 1
19329: NEG
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: NEG
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: NEG
19422: PUSH
19423: LD_INT 2
19425: NEG
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19452: LD_ADDR_VAR 0 18
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: NEG
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: NEG
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: LD_INT 2
19537: NEG
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 0
19545: PUSH
19546: LD_INT 2
19548: NEG
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 2
19628: NEG
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 2
19639: NEG
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: LD_INT 2
19655: NEG
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19682: LD_ADDR_VAR 0 19
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: LD_INT 1
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: NEG
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: LD_INT 2
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: LD_INT 1
19789: NEG
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: NEG
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19912: LD_ADDR_VAR 0 20
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 1
19932: NEG
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 1
19970: NEG
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: LD_INT 1
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 1
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 0
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: NEG
20112: PUSH
20113: LD_INT 2
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20142: LD_ADDR_VAR 0 21
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: NEG
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 2
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 2
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: NEG
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20372: LD_ADDR_VAR 0 22
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: LD_INT 1
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: NEG
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: NEG
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 2
20559: NEG
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20602: LD_ADDR_VAR 0 23
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 0
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 1
20671: NEG
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: NEG
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 0
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: NEG
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: NEG
20802: PUSH
20803: LD_INT 2
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: LD_INT 3
20817: NEG
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: LD_INT 3
20829: NEG
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20882: LD_ADDR_VAR 0 24
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 0
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: LD_INT 0
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: LD_INT 1
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: LD_INT 2
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: LD_INT 1
21073: NEG
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: LD_INT 2
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 2
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 3
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 3
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21158: LD_ADDR_VAR 0 25
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 0
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 0
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 1
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: NEG
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 3
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 3
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21432: LD_ADDR_VAR 0 26
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: LD_INT 1
21452: NEG
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: LD_INT 2
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 0
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 2
21619: NEG
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: NEG
21632: PUSH
21633: LD_INT 2
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: LD_INT 3
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 3
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21708: LD_ADDR_VAR 0 27
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: NEG
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: LD_INT 0
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: LD_INT 2
21911: NEG
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 1
21919: NEG
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 3
21941: NEG
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 3
21953: NEG
21954: PUSH
21955: LD_INT 2
21957: NEG
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21988: LD_ADDR_VAR 0 28
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 0
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: NEG
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 2
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: LD_INT 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: LD_INT 2
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 2
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 2
22187: NEG
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: NEG
22200: PUSH
22201: LD_INT 3
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: LD_INT 3
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 3
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 3
22235: NEG
22236: PUSH
22237: LD_INT 2
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22270: LD_ADDR_VAR 0 29
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_INT 2
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 1
22377: NEG
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 2
22436: NEG
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: LD_INT 2
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: NEG
22461: PUSH
22462: LD_INT 3
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 3
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: PUSH
22494: LD_INT 3
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 3
22514: NEG
22515: PUSH
22516: LD_INT 2
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22549: LD_ADDR_VAR 0 30
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: LD_INT 1
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 2
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 2
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 2
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: LD_INT 2
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: NEG
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: NEG
22739: PUSH
22740: LD_INT 3
22742: NEG
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 2
22753: NEG
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: LD_INT 3
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 2
22781: NEG
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 3
22792: NEG
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22827: LD_ADDR_VAR 0 31
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: NEG
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: NEG
22909: PUSH
22910: LD_INT 2
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: LD_INT 3
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 1
23031: NEG
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 3
23070: NEG
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23105: LD_ADDR_VAR 0 32
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: LD_INT 1
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 2
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 3
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 3
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 3
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23383: LD_ADDR_VAR 0 33
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: LD_INT 2
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: NEG
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: NEG
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: NEG
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: NEG
23574: PUSH
23575: LD_INT 3
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 3
23627: NEG
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23662: LD_ADDR_VAR 0 34
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: LD_INT 2
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 2
23829: NEG
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 3
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 3
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 3
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 2
23896: NEG
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 3
23907: NEG
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23942: LD_ADDR_VAR 0 35
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 2
24033: NEG
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24054: LD_ADDR_VAR 0 36
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24166: LD_ADDR_VAR 0 37
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24278: LD_ADDR_VAR 0 38
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: NEG
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 2
24369: NEG
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24390: LD_ADDR_VAR 0 39
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24502: LD_ADDR_VAR 0 40
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: NEG
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24614: LD_ADDR_VAR 0 41
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 2
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 3
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 3
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 3
24888: NEG
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 3
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 3
24911: NEG
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 3
24923: NEG
24924: PUSH
24925: LD_INT 3
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24964: LD_ADDR_VAR 0 42
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 2
25154: NEG
25155: PUSH
25156: LD_INT 3
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 3
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 3
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: LD_INT 3
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 3
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 3
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 3
25261: NEG
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 3
25273: NEG
25274: PUSH
25275: LD_INT 3
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25314: LD_ADDR_VAR 0 43
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: LD_INT 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 3
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 2
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 3
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 3
25610: NEG
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25662: LD_ADDR_VAR 0 44
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 3
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 3
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 3
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 3
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 3
25936: NEG
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 3
25947: NEG
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 3
25959: NEG
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: NEG
25972: PUSH
25973: LD_INT 3
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26012: LD_ADDR_VAR 0 45
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: NEG
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: NEG
26191: PUSH
26192: LD_INT 2
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 3
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 3
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 3
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 3
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 3
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 3
26309: NEG
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: NEG
26322: PUSH
26323: LD_INT 3
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26362: LD_ADDR_VAR 0 46
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 1
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: LD_INT 0
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: NEG
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: LD_INT 2
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 2
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: NEG
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: LD_INT 3
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 3
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: LD_INT 3
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: NEG
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 2
26647: NEG
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 3
26658: NEG
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 3
26669: NEG
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26710: LD_ADDR_VAR 0 47
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26861: LD_ADDR_VAR 0 48
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 2
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27008: LD_ADDR_VAR 0 49
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27152: LD_ADDR_VAR 0 50
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27296: LD_ADDR_VAR 0 51
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27443: LD_ADDR_VAR 0 52
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27594: LD_ADDR_VAR 0 53
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27824: LD_ADDR_VAR 0 54
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 2
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28054: LD_ADDR_VAR 0 55
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: NEG
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: LD_INT 2
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28284: LD_ADDR_VAR 0 56
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28514: LD_ADDR_VAR 0 57
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28744: LD_ADDR_VAR 0 58
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: NEG
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28974: LD_ADDR_VAR 0 59
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29062: LD_ADDR_VAR 0 60
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29150: LD_ADDR_VAR 0 61
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 1
29208: NEG
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29238: LD_ADDR_VAR 0 62
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29326: LD_ADDR_VAR 0 63
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29414: LD_ADDR_VAR 0 64
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: ST_TO_ADDR
// end ; 1 :
29502: GO 35399
29504: LD_INT 1
29506: DOUBLE
29507: EQUAL
29508: IFTRUE 29512
29510: GO 32135
29512: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29513: LD_ADDR_VAR 0 11
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: LD_INT 3
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 3
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 2
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29557: LD_ADDR_VAR 0 12
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29598: LD_ADDR_VAR 0 13
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 3
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29638: LD_ADDR_VAR 0 14
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 3
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29679: LD_ADDR_VAR 0 15
29683: PUSH
29684: LD_INT 2
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29723: LD_ADDR_VAR 0 16
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 3
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 3
29754: NEG
29755: PUSH
29756: LD_INT 3
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29769: LD_ADDR_VAR 0 17
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: LD_INT 3
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29813: LD_ADDR_VAR 0 18
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29854: LD_ADDR_VAR 0 19
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: LD_INT 3
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29894: LD_ADDR_VAR 0 20
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29935: LD_ADDR_VAR 0 21
29939: PUSH
29940: LD_INT 2
29942: NEG
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: LD_INT 1
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29979: LD_ADDR_VAR 0 22
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: LD_INT 3
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 3
30010: NEG
30011: PUSH
30012: LD_INT 3
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: LIST
30024: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30025: LD_ADDR_VAR 0 23
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: LD_INT 4
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 3
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30069: LD_ADDR_VAR 0 24
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 4
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30110: LD_ADDR_VAR 0 25
30114: PUSH
30115: LD_INT 3
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 4
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 4
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30150: LD_ADDR_VAR 0 26
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 4
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30191: LD_ADDR_VAR 0 27
30195: PUSH
30196: LD_INT 3
30198: NEG
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 4
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30235: LD_ADDR_VAR 0 28
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 4
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30281: LD_ADDR_VAR 0 29
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 4
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 4
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: LD_INT 3
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 5
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 5
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 4
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: NEG
30391: PUSH
30392: LD_INT 6
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 6
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 5
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30436: LD_ADDR_VAR 0 30
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 4
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 5
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 5
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 6
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 6
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30579: LD_ADDR_VAR 0 31
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 2
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 4
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 4
30626: PUSH
30627: LD_INT 4
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: LD_INT 4
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 5
30656: PUSH
30657: LD_INT 5
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: LD_INT 5
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 6
30676: PUSH
30677: LD_INT 5
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 6
30686: PUSH
30687: LD_INT 6
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 5
30696: PUSH
30697: LD_INT 6
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30718: LD_ADDR_VAR 0 32
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: LD_INT 4
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 4
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 5
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 5
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 4
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 6
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 6
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: LD_INT 5
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30861: LD_ADDR_VAR 0 33
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 3
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 4
30913: NEG
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 4
30924: NEG
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 4
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 5
30947: NEG
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 5
30958: NEG
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 5
30970: NEG
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 6
30981: NEG
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 6
30992: NEG
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31016: LD_ADDR_VAR 0 34
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 3
31035: NEG
31036: PUSH
31037: LD_INT 2
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 3
31047: NEG
31048: PUSH
31049: LD_INT 3
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 3
31059: NEG
31060: PUSH
31061: LD_INT 4
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 4
31071: NEG
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 4
31083: NEG
31084: PUSH
31085: LD_INT 4
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 4
31095: NEG
31096: PUSH
31097: LD_INT 5
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 5
31107: NEG
31108: PUSH
31109: LD_INT 4
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 5
31119: NEG
31120: PUSH
31121: LD_INT 5
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 5
31131: NEG
31132: PUSH
31133: LD_INT 6
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 6
31143: NEG
31144: PUSH
31145: LD_INT 5
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 6
31155: NEG
31156: PUSH
31157: LD_INT 6
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31179: LD_ADDR_VAR 0 41
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31223: LD_ADDR_VAR 0 42
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31264: LD_ADDR_VAR 0 43
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31304: LD_ADDR_VAR 0 44
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31345: LD_ADDR_VAR 0 45
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 3
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31389: LD_ADDR_VAR 0 46
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31435: LD_ADDR_VAR 0 47
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 3
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31468: LD_ADDR_VAR 0 48
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31499: LD_ADDR_VAR 0 49
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31528: LD_ADDR_VAR 0 50
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31557: LD_ADDR_VAR 0 51
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31588: LD_ADDR_VAR 0 52
31592: PUSH
31593: LD_INT 3
31595: NEG
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 3
31607: NEG
31608: PUSH
31609: LD_INT 2
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31621: LD_ADDR_VAR 0 53
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 3
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 3
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31665: LD_ADDR_VAR 0 54
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 3
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31706: LD_ADDR_VAR 0 55
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31746: LD_ADDR_VAR 0 56
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: LIST
31786: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31787: LD_ADDR_VAR 0 57
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: NEG
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: LIST
31830: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31831: LD_ADDR_VAR 0 58
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31877: LD_ADDR_VAR 0 59
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31921: LD_ADDR_VAR 0 60
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31962: LD_ADDR_VAR 0 61
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32002: LD_ADDR_VAR 0 62
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: LD_INT 2
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32043: LD_ADDR_VAR 0 63
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32087: LD_ADDR_VAR 0 64
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 2
32118: NEG
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: ST_TO_ADDR
// end ; 2 :
32133: GO 35399
32135: LD_INT 2
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 35398
32143: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32144: LD_ADDR_VAR 0 29
32148: PUSH
32149: LD_INT 4
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 4
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 5
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 4
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: LD_INT 2
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 3
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: LD_INT 3
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 4
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 4
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: LD_INT 4
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 4
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 5
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: LD_INT 5
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: LD_INT 4
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: LD_INT 3
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: LD_INT 5
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 3
32427: NEG
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: NEG
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: NEG
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 4
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 4
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: NEG
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 4
32541: NEG
32542: PUSH
32543: LD_INT 5
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 3
32553: NEG
32554: PUSH
32555: LD_INT 4
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 3
32565: NEG
32566: PUSH
32567: LD_INT 3
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 4
32577: NEG
32578: PUSH
32579: LD_INT 3
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: LD_INT 4
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 5
32601: NEG
32602: PUSH
32603: LD_INT 5
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: LD_INT 5
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 5
32625: NEG
32626: PUSH
32627: LD_INT 3
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32682: LD_ADDR_VAR 0 30
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 4
32699: PUSH
32700: LD_INT 3
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 5
32709: PUSH
32710: LD_INT 4
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 5
32719: PUSH
32720: LD_INT 5
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 4
32729: PUSH
32730: LD_INT 5
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: LD_INT 3
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 5
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 5
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 4
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: LD_INT 4
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 4
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 4
32872: NEG
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 4
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 3
32895: NEG
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: NEG
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 5
32928: NEG
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 5
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 5
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 3
32974: NEG
32975: PUSH
32976: LD_INT 3
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 3
32986: NEG
32987: PUSH
32988: LD_INT 4
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 3
33022: NEG
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 4
33034: NEG
33035: PUSH
33036: LD_INT 3
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: LD_INT 4
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 4
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 4
33070: NEG
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 4
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 5
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 4
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: LD_INT 3
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 4
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: LD_INT 3
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 5
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33229: LD_ADDR_VAR 0 31
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 4
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 5
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 4
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 3
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 5
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: LD_INT 3
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: NEG
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 4
33385: NEG
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 4
33396: NEG
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 4
33431: NEG
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 4
33443: NEG
33444: PUSH
33445: LD_INT 5
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: NEG
33456: PUSH
33457: LD_INT 4
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 3
33467: NEG
33468: PUSH
33469: LD_INT 3
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 4
33479: NEG
33480: PUSH
33481: LD_INT 3
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 5
33491: NEG
33492: PUSH
33493: LD_INT 4
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 5
33503: NEG
33504: PUSH
33505: LD_INT 5
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: LD_INT 5
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 5
33527: NEG
33528: PUSH
33529: LD_INT 3
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 3
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: LD_INT 4
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 2
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: LD_INT 3
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 4
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: LD_INT 4
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 4
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 4
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 5
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 4
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 3
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 3
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33779: LD_ADDR_VAR 0 32
33783: PUSH
33784: LD_INT 4
33786: NEG
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 4
33797: NEG
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 3
33809: NEG
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 5
33842: NEG
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 5
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 5
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: NEG
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: LD_INT 4
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: LD_INT 3
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 4
33948: NEG
33949: PUSH
33950: LD_INT 3
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 4
33960: NEG
33961: PUSH
33962: LD_INT 4
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 4
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 4
33984: NEG
33985: PUSH
33986: LD_INT 2
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 4
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 5
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 4
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 3
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: LD_INT 4
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 5
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: LD_INT 5
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 4
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 4
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: LD_INT 4
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 4
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 5
34211: PUSH
34212: LD_INT 4
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 5
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 4
34231: PUSH
34232: LD_INT 5
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: LD_INT 4
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 3
34251: PUSH
34252: LD_INT 3
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 5
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 3
34271: PUSH
34272: LD_INT 5
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34326: LD_ADDR_VAR 0 33
34330: PUSH
34331: LD_INT 4
34333: NEG
34334: PUSH
34335: LD_INT 4
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 4
34345: NEG
34346: PUSH
34347: LD_INT 5
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 3
34357: NEG
34358: PUSH
34359: LD_INT 4
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 3
34369: NEG
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 4
34381: NEG
34382: PUSH
34383: LD_INT 3
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 5
34393: NEG
34394: PUSH
34395: LD_INT 4
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 5
34405: NEG
34406: PUSH
34407: LD_INT 5
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 3
34417: NEG
34418: PUSH
34419: LD_INT 5
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 5
34429: NEG
34430: PUSH
34431: LD_INT 3
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 3
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 4
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 3
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 3
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 4
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: LD_INT 4
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 5
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 4
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 3
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 5
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 4
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: LD_INT 4
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 5
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 5
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 3
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34864: LD_ADDR_VAR 0 34
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 4
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: LD_INT 5
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: LD_INT 4
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 3
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 4
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 5
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 3
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: NEG
34962: PUSH
34963: LD_INT 5
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 4
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 3
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 4
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 4
35066: PUSH
35067: LD_INT 4
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 4
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 5
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 5
35096: PUSH
35097: LD_INT 5
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 4
35106: PUSH
35107: LD_INT 5
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: LD_INT 4
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 5
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 5
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 3
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 3
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 4
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 4
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 4
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 4
35249: NEG
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 4
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 3
35283: NEG
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 4
35294: NEG
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 5
35305: NEG
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 5
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 5
35328: NEG
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 3
35340: NEG
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// end ; end ;
35396: GO 35399
35398: POP
// case btype of b_depot , b_warehouse :
35399: LD_VAR 0 1
35403: PUSH
35404: LD_INT 0
35406: DOUBLE
35407: EQUAL
35408: IFTRUE 35418
35410: LD_INT 1
35412: DOUBLE
35413: EQUAL
35414: IFTRUE 35418
35416: GO 35619
35418: POP
// case nation of nation_american :
35419: LD_VAR 0 5
35423: PUSH
35424: LD_INT 1
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35432
35430: GO 35488
35432: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35433: LD_ADDR_VAR 0 9
35437: PUSH
35438: LD_VAR 0 11
35442: PUSH
35443: LD_VAR 0 12
35447: PUSH
35448: LD_VAR 0 13
35452: PUSH
35453: LD_VAR 0 14
35457: PUSH
35458: LD_VAR 0 15
35462: PUSH
35463: LD_VAR 0 16
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: PUSH
35476: LD_VAR 0 4
35480: PUSH
35481: LD_INT 1
35483: PLUS
35484: ARRAY
35485: ST_TO_ADDR
35486: GO 35617
35488: LD_INT 2
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35496
35494: GO 35552
35496: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35497: LD_ADDR_VAR 0 9
35501: PUSH
35502: LD_VAR 0 17
35506: PUSH
35507: LD_VAR 0 18
35511: PUSH
35512: LD_VAR 0 19
35516: PUSH
35517: LD_VAR 0 20
35521: PUSH
35522: LD_VAR 0 21
35526: PUSH
35527: LD_VAR 0 22
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: PUSH
35540: LD_VAR 0 4
35544: PUSH
35545: LD_INT 1
35547: PLUS
35548: ARRAY
35549: ST_TO_ADDR
35550: GO 35617
35552: LD_INT 3
35554: DOUBLE
35555: EQUAL
35556: IFTRUE 35560
35558: GO 35616
35560: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35561: LD_ADDR_VAR 0 9
35565: PUSH
35566: LD_VAR 0 23
35570: PUSH
35571: LD_VAR 0 24
35575: PUSH
35576: LD_VAR 0 25
35580: PUSH
35581: LD_VAR 0 26
35585: PUSH
35586: LD_VAR 0 27
35590: PUSH
35591: LD_VAR 0 28
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: PUSH
35604: LD_VAR 0 4
35608: PUSH
35609: LD_INT 1
35611: PLUS
35612: ARRAY
35613: ST_TO_ADDR
35614: GO 35617
35616: POP
35617: GO 36172
35619: LD_INT 2
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35633
35625: LD_INT 3
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35633
35631: GO 35689
35633: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35634: LD_ADDR_VAR 0 9
35638: PUSH
35639: LD_VAR 0 29
35643: PUSH
35644: LD_VAR 0 30
35648: PUSH
35649: LD_VAR 0 31
35653: PUSH
35654: LD_VAR 0 32
35658: PUSH
35659: LD_VAR 0 33
35663: PUSH
35664: LD_VAR 0 34
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: LD_VAR 0 4
35681: PUSH
35682: LD_INT 1
35684: PLUS
35685: ARRAY
35686: ST_TO_ADDR
35687: GO 36172
35689: LD_INT 16
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35751
35695: LD_INT 17
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35751
35701: LD_INT 18
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35751
35707: LD_INT 19
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35751
35713: LD_INT 22
35715: DOUBLE
35716: EQUAL
35717: IFTRUE 35751
35719: LD_INT 20
35721: DOUBLE
35722: EQUAL
35723: IFTRUE 35751
35725: LD_INT 21
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35751
35731: LD_INT 23
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35751
35737: LD_INT 24
35739: DOUBLE
35740: EQUAL
35741: IFTRUE 35751
35743: LD_INT 25
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35807
35751: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35752: LD_ADDR_VAR 0 9
35756: PUSH
35757: LD_VAR 0 35
35761: PUSH
35762: LD_VAR 0 36
35766: PUSH
35767: LD_VAR 0 37
35771: PUSH
35772: LD_VAR 0 38
35776: PUSH
35777: LD_VAR 0 39
35781: PUSH
35782: LD_VAR 0 40
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: PUSH
35795: LD_VAR 0 4
35799: PUSH
35800: LD_INT 1
35802: PLUS
35803: ARRAY
35804: ST_TO_ADDR
35805: GO 36172
35807: LD_INT 6
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35863
35813: LD_INT 7
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35863
35819: LD_INT 8
35821: DOUBLE
35822: EQUAL
35823: IFTRUE 35863
35825: LD_INT 13
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35863
35831: LD_INT 12
35833: DOUBLE
35834: EQUAL
35835: IFTRUE 35863
35837: LD_INT 15
35839: DOUBLE
35840: EQUAL
35841: IFTRUE 35863
35843: LD_INT 11
35845: DOUBLE
35846: EQUAL
35847: IFTRUE 35863
35849: LD_INT 14
35851: DOUBLE
35852: EQUAL
35853: IFTRUE 35863
35855: LD_INT 10
35857: DOUBLE
35858: EQUAL
35859: IFTRUE 35863
35861: GO 35919
35863: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_VAR 0 41
35873: PUSH
35874: LD_VAR 0 42
35878: PUSH
35879: LD_VAR 0 43
35883: PUSH
35884: LD_VAR 0 44
35888: PUSH
35889: LD_VAR 0 45
35893: PUSH
35894: LD_VAR 0 46
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: PUSH
35907: LD_VAR 0 4
35911: PUSH
35912: LD_INT 1
35914: PLUS
35915: ARRAY
35916: ST_TO_ADDR
35917: GO 36172
35919: LD_INT 36
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35927
35925: GO 35983
35927: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35928: LD_ADDR_VAR 0 9
35932: PUSH
35933: LD_VAR 0 47
35937: PUSH
35938: LD_VAR 0 48
35942: PUSH
35943: LD_VAR 0 49
35947: PUSH
35948: LD_VAR 0 50
35952: PUSH
35953: LD_VAR 0 51
35957: PUSH
35958: LD_VAR 0 52
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: PUSH
35971: LD_VAR 0 4
35975: PUSH
35976: LD_INT 1
35978: PLUS
35979: ARRAY
35980: ST_TO_ADDR
35981: GO 36172
35983: LD_INT 4
35985: DOUBLE
35986: EQUAL
35987: IFTRUE 36009
35989: LD_INT 5
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 36009
35995: LD_INT 34
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36009
36001: LD_INT 37
36003: DOUBLE
36004: EQUAL
36005: IFTRUE 36009
36007: GO 36065
36009: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36010: LD_ADDR_VAR 0 9
36014: PUSH
36015: LD_VAR 0 53
36019: PUSH
36020: LD_VAR 0 54
36024: PUSH
36025: LD_VAR 0 55
36029: PUSH
36030: LD_VAR 0 56
36034: PUSH
36035: LD_VAR 0 57
36039: PUSH
36040: LD_VAR 0 58
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: LD_VAR 0 4
36057: PUSH
36058: LD_INT 1
36060: PLUS
36061: ARRAY
36062: ST_TO_ADDR
36063: GO 36172
36065: LD_INT 31
36067: DOUBLE
36068: EQUAL
36069: IFTRUE 36115
36071: LD_INT 32
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36115
36077: LD_INT 33
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36115
36083: LD_INT 27
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36115
36089: LD_INT 26
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36115
36095: LD_INT 28
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36115
36101: LD_INT 29
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36115
36107: LD_INT 30
36109: DOUBLE
36110: EQUAL
36111: IFTRUE 36115
36113: GO 36171
36115: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36116: LD_ADDR_VAR 0 9
36120: PUSH
36121: LD_VAR 0 59
36125: PUSH
36126: LD_VAR 0 60
36130: PUSH
36131: LD_VAR 0 61
36135: PUSH
36136: LD_VAR 0 62
36140: PUSH
36141: LD_VAR 0 63
36145: PUSH
36146: LD_VAR 0 64
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: PUSH
36159: LD_VAR 0 4
36163: PUSH
36164: LD_INT 1
36166: PLUS
36167: ARRAY
36168: ST_TO_ADDR
36169: GO 36172
36171: POP
// temp_list2 = [ ] ;
36172: LD_ADDR_VAR 0 10
36176: PUSH
36177: EMPTY
36178: ST_TO_ADDR
// for i in temp_list do
36179: LD_ADDR_VAR 0 8
36183: PUSH
36184: LD_VAR 0 9
36188: PUSH
36189: FOR_IN
36190: IFFALSE 36242
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36192: LD_ADDR_VAR 0 10
36196: PUSH
36197: LD_VAR 0 10
36201: PUSH
36202: LD_VAR 0 8
36206: PUSH
36207: LD_INT 1
36209: ARRAY
36210: PUSH
36211: LD_VAR 0 2
36215: PLUS
36216: PUSH
36217: LD_VAR 0 8
36221: PUSH
36222: LD_INT 2
36224: ARRAY
36225: PUSH
36226: LD_VAR 0 3
36230: PLUS
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: EMPTY
36237: LIST
36238: ADD
36239: ST_TO_ADDR
36240: GO 36189
36242: POP
36243: POP
// result = temp_list2 ;
36244: LD_ADDR_VAR 0 7
36248: PUSH
36249: LD_VAR 0 10
36253: ST_TO_ADDR
// end ;
36254: LD_VAR 0 7
36258: RET
// export function EnemyInRange ( unit , dist ) ; begin
36259: LD_INT 0
36261: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36262: LD_ADDR_VAR 0 3
36266: PUSH
36267: LD_VAR 0 1
36271: PPUSH
36272: CALL_OW 255
36276: PPUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 250
36286: PPUSH
36287: LD_VAR 0 1
36291: PPUSH
36292: CALL_OW 251
36296: PPUSH
36297: LD_VAR 0 2
36301: PPUSH
36302: CALL 9655 0 4
36306: PUSH
36307: LD_INT 4
36309: ARRAY
36310: ST_TO_ADDR
// end ;
36311: LD_VAR 0 3
36315: RET
// export function PlayerSeeMe ( unit ) ; begin
36316: LD_INT 0
36318: PPUSH
// result := See ( your_side , unit ) ;
36319: LD_ADDR_VAR 0 2
36323: PUSH
36324: LD_OWVAR 2
36328: PPUSH
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 292
36338: ST_TO_ADDR
// end ;
36339: LD_VAR 0 2
36343: RET
// export function ReverseDir ( unit ) ; begin
36344: LD_INT 0
36346: PPUSH
// if not unit then
36347: LD_VAR 0 1
36351: NOT
36352: IFFALSE 36356
// exit ;
36354: GO 36379
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36356: LD_ADDR_VAR 0 2
36360: PUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 254
36370: PUSH
36371: LD_INT 3
36373: PLUS
36374: PUSH
36375: LD_INT 6
36377: MOD
36378: ST_TO_ADDR
// end ;
36379: LD_VAR 0 2
36383: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36384: LD_INT 0
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
// if not hexes then
36391: LD_VAR 0 2
36395: NOT
36396: IFFALSE 36400
// exit ;
36398: GO 36548
// dist := 9999 ;
36400: LD_ADDR_VAR 0 5
36404: PUSH
36405: LD_INT 9999
36407: ST_TO_ADDR
// for i = 1 to hexes do
36408: LD_ADDR_VAR 0 4
36412: PUSH
36413: DOUBLE
36414: LD_INT 1
36416: DEC
36417: ST_TO_ADDR
36418: LD_VAR 0 2
36422: PUSH
36423: FOR_TO
36424: IFFALSE 36536
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36426: LD_VAR 0 1
36430: PPUSH
36431: LD_VAR 0 2
36435: PUSH
36436: LD_VAR 0 4
36440: ARRAY
36441: PUSH
36442: LD_INT 1
36444: ARRAY
36445: PPUSH
36446: LD_VAR 0 2
36450: PUSH
36451: LD_VAR 0 4
36455: ARRAY
36456: PUSH
36457: LD_INT 2
36459: ARRAY
36460: PPUSH
36461: CALL_OW 297
36465: PUSH
36466: LD_VAR 0 5
36470: LESS
36471: IFFALSE 36534
// begin hex := hexes [ i ] ;
36473: LD_ADDR_VAR 0 7
36477: PUSH
36478: LD_VAR 0 2
36482: PUSH
36483: LD_VAR 0 4
36487: ARRAY
36488: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36489: LD_ADDR_VAR 0 5
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: LD_VAR 0 2
36503: PUSH
36504: LD_VAR 0 4
36508: ARRAY
36509: PUSH
36510: LD_INT 1
36512: ARRAY
36513: PPUSH
36514: LD_VAR 0 2
36518: PUSH
36519: LD_VAR 0 4
36523: ARRAY
36524: PUSH
36525: LD_INT 2
36527: ARRAY
36528: PPUSH
36529: CALL_OW 297
36533: ST_TO_ADDR
// end ; end ;
36534: GO 36423
36536: POP
36537: POP
// result := hex ;
36538: LD_ADDR_VAR 0 3
36542: PUSH
36543: LD_VAR 0 7
36547: ST_TO_ADDR
// end ;
36548: LD_VAR 0 3
36552: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36553: LD_INT 0
36555: PPUSH
36556: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36557: LD_VAR 0 1
36561: NOT
36562: PUSH
36563: LD_VAR 0 1
36567: PUSH
36568: LD_INT 21
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 23
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PPUSH
36592: CALL_OW 69
36596: IN
36597: NOT
36598: OR
36599: IFFALSE 36603
// exit ;
36601: GO 36650
// for i = 1 to 3 do
36603: LD_ADDR_VAR 0 3
36607: PUSH
36608: DOUBLE
36609: LD_INT 1
36611: DEC
36612: ST_TO_ADDR
36613: LD_INT 3
36615: PUSH
36616: FOR_TO
36617: IFFALSE 36648
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL_OW 250
36628: PPUSH
36629: LD_VAR 0 1
36633: PPUSH
36634: CALL_OW 251
36638: PPUSH
36639: LD_INT 1
36641: PPUSH
36642: CALL_OW 453
36646: GO 36616
36648: POP
36649: POP
// end ;
36650: LD_VAR 0 2
36654: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36655: LD_INT 0
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36663: LD_VAR 0 1
36667: NOT
36668: PUSH
36669: LD_VAR 0 2
36673: NOT
36674: OR
36675: PUSH
36676: LD_VAR 0 1
36680: PPUSH
36681: CALL_OW 314
36685: OR
36686: IFFALSE 36690
// exit ;
36688: GO 37131
// x := GetX ( enemy_unit ) ;
36690: LD_ADDR_VAR 0 7
36694: PUSH
36695: LD_VAR 0 2
36699: PPUSH
36700: CALL_OW 250
36704: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36705: LD_ADDR_VAR 0 8
36709: PUSH
36710: LD_VAR 0 2
36714: PPUSH
36715: CALL_OW 251
36719: ST_TO_ADDR
// if not x or not y then
36720: LD_VAR 0 7
36724: NOT
36725: PUSH
36726: LD_VAR 0 8
36730: NOT
36731: OR
36732: IFFALSE 36736
// exit ;
36734: GO 37131
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36736: LD_ADDR_VAR 0 6
36740: PUSH
36741: LD_VAR 0 7
36745: PPUSH
36746: LD_INT 0
36748: PPUSH
36749: LD_INT 4
36751: PPUSH
36752: CALL_OW 272
36756: PUSH
36757: LD_VAR 0 8
36761: PPUSH
36762: LD_INT 0
36764: PPUSH
36765: LD_INT 4
36767: PPUSH
36768: CALL_OW 273
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_VAR 0 7
36781: PPUSH
36782: LD_INT 1
36784: PPUSH
36785: LD_INT 4
36787: PPUSH
36788: CALL_OW 272
36792: PUSH
36793: LD_VAR 0 8
36797: PPUSH
36798: LD_INT 1
36800: PPUSH
36801: LD_INT 4
36803: PPUSH
36804: CALL_OW 273
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_VAR 0 7
36817: PPUSH
36818: LD_INT 2
36820: PPUSH
36821: LD_INT 4
36823: PPUSH
36824: CALL_OW 272
36828: PUSH
36829: LD_VAR 0 8
36833: PPUSH
36834: LD_INT 2
36836: PPUSH
36837: LD_INT 4
36839: PPUSH
36840: CALL_OW 273
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_VAR 0 7
36853: PPUSH
36854: LD_INT 3
36856: PPUSH
36857: LD_INT 4
36859: PPUSH
36860: CALL_OW 272
36864: PUSH
36865: LD_VAR 0 8
36869: PPUSH
36870: LD_INT 3
36872: PPUSH
36873: LD_INT 4
36875: PPUSH
36876: CALL_OW 273
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_VAR 0 7
36889: PPUSH
36890: LD_INT 4
36892: PPUSH
36893: LD_INT 4
36895: PPUSH
36896: CALL_OW 272
36900: PUSH
36901: LD_VAR 0 8
36905: PPUSH
36906: LD_INT 4
36908: PPUSH
36909: LD_INT 4
36911: PPUSH
36912: CALL_OW 273
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_VAR 0 7
36925: PPUSH
36926: LD_INT 5
36928: PPUSH
36929: LD_INT 4
36931: PPUSH
36932: CALL_OW 272
36936: PUSH
36937: LD_VAR 0 8
36941: PPUSH
36942: LD_INT 5
36944: PPUSH
36945: LD_INT 4
36947: PPUSH
36948: CALL_OW 273
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// for i = tmp downto 1 do
36965: LD_ADDR_VAR 0 4
36969: PUSH
36970: DOUBLE
36971: LD_VAR 0 6
36975: INC
36976: ST_TO_ADDR
36977: LD_INT 1
36979: PUSH
36980: FOR_DOWNTO
36981: IFFALSE 37082
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36983: LD_VAR 0 6
36987: PUSH
36988: LD_VAR 0 4
36992: ARRAY
36993: PUSH
36994: LD_INT 1
36996: ARRAY
36997: PPUSH
36998: LD_VAR 0 6
37002: PUSH
37003: LD_VAR 0 4
37007: ARRAY
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: CALL_OW 488
37017: NOT
37018: PUSH
37019: LD_VAR 0 6
37023: PUSH
37024: LD_VAR 0 4
37028: ARRAY
37029: PUSH
37030: LD_INT 1
37032: ARRAY
37033: PPUSH
37034: LD_VAR 0 6
37038: PUSH
37039: LD_VAR 0 4
37043: ARRAY
37044: PUSH
37045: LD_INT 2
37047: ARRAY
37048: PPUSH
37049: CALL_OW 428
37053: PUSH
37054: LD_INT 0
37056: NONEQUAL
37057: OR
37058: IFFALSE 37080
// tmp := Delete ( tmp , i ) ;
37060: LD_ADDR_VAR 0 6
37064: PUSH
37065: LD_VAR 0 6
37069: PPUSH
37070: LD_VAR 0 4
37074: PPUSH
37075: CALL_OW 3
37079: ST_TO_ADDR
37080: GO 36980
37082: POP
37083: POP
// j := GetClosestHex ( unit , tmp ) ;
37084: LD_ADDR_VAR 0 5
37088: PUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: LD_VAR 0 6
37098: PPUSH
37099: CALL 36384 0 2
37103: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_VAR 0 5
37113: PUSH
37114: LD_INT 1
37116: ARRAY
37117: PPUSH
37118: LD_VAR 0 5
37122: PUSH
37123: LD_INT 2
37125: ARRAY
37126: PPUSH
37127: CALL_OW 111
// end ;
37131: LD_VAR 0 3
37135: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37136: LD_INT 0
37138: PPUSH
37139: PPUSH
37140: PPUSH
// uc_side = 0 ;
37141: LD_ADDR_OWVAR 20
37145: PUSH
37146: LD_INT 0
37148: ST_TO_ADDR
// uc_nation = 0 ;
37149: LD_ADDR_OWVAR 21
37153: PUSH
37154: LD_INT 0
37156: ST_TO_ADDR
// InitHc_All ( ) ;
37157: CALL_OW 584
// InitVc ;
37161: CALL_OW 20
// if mastodonts then
37165: LD_VAR 0 6
37169: IFFALSE 37236
// for i = 1 to mastodonts do
37171: LD_ADDR_VAR 0 11
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_VAR 0 6
37185: PUSH
37186: FOR_TO
37187: IFFALSE 37234
// begin vc_chassis := 31 ;
37189: LD_ADDR_OWVAR 37
37193: PUSH
37194: LD_INT 31
37196: ST_TO_ADDR
// vc_control := control_rider ;
37197: LD_ADDR_OWVAR 38
37201: PUSH
37202: LD_INT 4
37204: ST_TO_ADDR
// animal := CreateVehicle ;
37205: LD_ADDR_VAR 0 12
37209: PUSH
37210: CALL_OW 45
37214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37215: LD_VAR 0 12
37219: PPUSH
37220: LD_VAR 0 8
37224: PPUSH
37225: LD_INT 0
37227: PPUSH
37228: CALL 39424 0 3
// end ;
37232: GO 37186
37234: POP
37235: POP
// if horses then
37236: LD_VAR 0 5
37240: IFFALSE 37307
// for i = 1 to horses do
37242: LD_ADDR_VAR 0 11
37246: PUSH
37247: DOUBLE
37248: LD_INT 1
37250: DEC
37251: ST_TO_ADDR
37252: LD_VAR 0 5
37256: PUSH
37257: FOR_TO
37258: IFFALSE 37305
// begin hc_class := 21 ;
37260: LD_ADDR_OWVAR 28
37264: PUSH
37265: LD_INT 21
37267: ST_TO_ADDR
// hc_gallery :=  ;
37268: LD_ADDR_OWVAR 33
37272: PUSH
37273: LD_STRING 
37275: ST_TO_ADDR
// animal := CreateHuman ;
37276: LD_ADDR_VAR 0 12
37280: PUSH
37281: CALL_OW 44
37285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37286: LD_VAR 0 12
37290: PPUSH
37291: LD_VAR 0 8
37295: PPUSH
37296: LD_INT 0
37298: PPUSH
37299: CALL 39424 0 3
// end ;
37303: GO 37257
37305: POP
37306: POP
// if birds then
37307: LD_VAR 0 1
37311: IFFALSE 37378
// for i = 1 to birds do
37313: LD_ADDR_VAR 0 11
37317: PUSH
37318: DOUBLE
37319: LD_INT 1
37321: DEC
37322: ST_TO_ADDR
37323: LD_VAR 0 1
37327: PUSH
37328: FOR_TO
37329: IFFALSE 37376
// begin hc_class = 18 ;
37331: LD_ADDR_OWVAR 28
37335: PUSH
37336: LD_INT 18
37338: ST_TO_ADDR
// hc_gallery =  ;
37339: LD_ADDR_OWVAR 33
37343: PUSH
37344: LD_STRING 
37346: ST_TO_ADDR
// animal := CreateHuman ;
37347: LD_ADDR_VAR 0 12
37351: PUSH
37352: CALL_OW 44
37356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37357: LD_VAR 0 12
37361: PPUSH
37362: LD_VAR 0 8
37366: PPUSH
37367: LD_INT 0
37369: PPUSH
37370: CALL 39424 0 3
// end ;
37374: GO 37328
37376: POP
37377: POP
// if tigers then
37378: LD_VAR 0 2
37382: IFFALSE 37466
// for i = 1 to tigers do
37384: LD_ADDR_VAR 0 11
37388: PUSH
37389: DOUBLE
37390: LD_INT 1
37392: DEC
37393: ST_TO_ADDR
37394: LD_VAR 0 2
37398: PUSH
37399: FOR_TO
37400: IFFALSE 37464
// begin hc_class = class_tiger ;
37402: LD_ADDR_OWVAR 28
37406: PUSH
37407: LD_INT 14
37409: ST_TO_ADDR
// hc_gallery =  ;
37410: LD_ADDR_OWVAR 33
37414: PUSH
37415: LD_STRING 
37417: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37418: LD_ADDR_OWVAR 35
37422: PUSH
37423: LD_INT 7
37425: NEG
37426: PPUSH
37427: LD_INT 7
37429: PPUSH
37430: CALL_OW 12
37434: ST_TO_ADDR
// animal := CreateHuman ;
37435: LD_ADDR_VAR 0 12
37439: PUSH
37440: CALL_OW 44
37444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37445: LD_VAR 0 12
37449: PPUSH
37450: LD_VAR 0 8
37454: PPUSH
37455: LD_INT 0
37457: PPUSH
37458: CALL 39424 0 3
// end ;
37462: GO 37399
37464: POP
37465: POP
// if apemans then
37466: LD_VAR 0 3
37470: IFFALSE 37593
// for i = 1 to apemans do
37472: LD_ADDR_VAR 0 11
37476: PUSH
37477: DOUBLE
37478: LD_INT 1
37480: DEC
37481: ST_TO_ADDR
37482: LD_VAR 0 3
37486: PUSH
37487: FOR_TO
37488: IFFALSE 37591
// begin hc_class = class_apeman ;
37490: LD_ADDR_OWVAR 28
37494: PUSH
37495: LD_INT 12
37497: ST_TO_ADDR
// hc_gallery =  ;
37498: LD_ADDR_OWVAR 33
37502: PUSH
37503: LD_STRING 
37505: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37506: LD_ADDR_OWVAR 35
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PPUSH
37515: LD_INT 2
37517: PPUSH
37518: CALL_OW 12
37522: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37523: LD_ADDR_OWVAR 31
37527: PUSH
37528: LD_INT 1
37530: PPUSH
37531: LD_INT 3
37533: PPUSH
37534: CALL_OW 12
37538: PUSH
37539: LD_INT 1
37541: PPUSH
37542: LD_INT 3
37544: PPUSH
37545: CALL_OW 12
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// animal := CreateHuman ;
37562: LD_ADDR_VAR 0 12
37566: PUSH
37567: CALL_OW 44
37571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37572: LD_VAR 0 12
37576: PPUSH
37577: LD_VAR 0 8
37581: PPUSH
37582: LD_INT 0
37584: PPUSH
37585: CALL 39424 0 3
// end ;
37589: GO 37487
37591: POP
37592: POP
// if enchidnas then
37593: LD_VAR 0 4
37597: IFFALSE 37664
// for i = 1 to enchidnas do
37599: LD_ADDR_VAR 0 11
37603: PUSH
37604: DOUBLE
37605: LD_INT 1
37607: DEC
37608: ST_TO_ADDR
37609: LD_VAR 0 4
37613: PUSH
37614: FOR_TO
37615: IFFALSE 37662
// begin hc_class = 13 ;
37617: LD_ADDR_OWVAR 28
37621: PUSH
37622: LD_INT 13
37624: ST_TO_ADDR
// hc_gallery =  ;
37625: LD_ADDR_OWVAR 33
37629: PUSH
37630: LD_STRING 
37632: ST_TO_ADDR
// animal := CreateHuman ;
37633: LD_ADDR_VAR 0 12
37637: PUSH
37638: CALL_OW 44
37642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37643: LD_VAR 0 12
37647: PPUSH
37648: LD_VAR 0 8
37652: PPUSH
37653: LD_INT 0
37655: PPUSH
37656: CALL 39424 0 3
// end ;
37660: GO 37614
37662: POP
37663: POP
// if fishes then
37664: LD_VAR 0 7
37668: IFFALSE 37735
// for i = 1 to fishes do
37670: LD_ADDR_VAR 0 11
37674: PUSH
37675: DOUBLE
37676: LD_INT 1
37678: DEC
37679: ST_TO_ADDR
37680: LD_VAR 0 7
37684: PUSH
37685: FOR_TO
37686: IFFALSE 37733
// begin hc_class = 20 ;
37688: LD_ADDR_OWVAR 28
37692: PUSH
37693: LD_INT 20
37695: ST_TO_ADDR
// hc_gallery =  ;
37696: LD_ADDR_OWVAR 33
37700: PUSH
37701: LD_STRING 
37703: ST_TO_ADDR
// animal := CreateHuman ;
37704: LD_ADDR_VAR 0 12
37708: PUSH
37709: CALL_OW 44
37713: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37714: LD_VAR 0 12
37718: PPUSH
37719: LD_VAR 0 9
37723: PPUSH
37724: LD_INT 0
37726: PPUSH
37727: CALL 39424 0 3
// end ;
37731: GO 37685
37733: POP
37734: POP
// end ;
37735: LD_VAR 0 10
37739: RET
// export function WantHeal ( sci , unit ) ; begin
37740: LD_INT 0
37742: PPUSH
// if GetTaskList ( sci ) > 0 then
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 437
37752: PUSH
37753: LD_INT 0
37755: GREATER
37756: IFFALSE 37826
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 437
37767: PUSH
37768: LD_INT 1
37770: ARRAY
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: PUSH
37776: LD_STRING l
37778: EQUAL
37779: PUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 437
37789: PUSH
37790: LD_INT 1
37792: ARRAY
37793: PUSH
37794: LD_INT 4
37796: ARRAY
37797: PUSH
37798: LD_VAR 0 2
37802: EQUAL
37803: AND
37804: IFFALSE 37816
// result := true else
37806: LD_ADDR_VAR 0 3
37810: PUSH
37811: LD_INT 1
37813: ST_TO_ADDR
37814: GO 37824
// result := false ;
37816: LD_ADDR_VAR 0 3
37820: PUSH
37821: LD_INT 0
37823: ST_TO_ADDR
// end else
37824: GO 37834
// result := false ;
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_INT 0
37833: ST_TO_ADDR
// end ;
37834: LD_VAR 0 3
37838: RET
// export function HealTarget ( sci ) ; begin
37839: LD_INT 0
37841: PPUSH
// if not sci then
37842: LD_VAR 0 1
37846: NOT
37847: IFFALSE 37851
// exit ;
37849: GO 37916
// result := 0 ;
37851: LD_ADDR_VAR 0 2
37855: PUSH
37856: LD_INT 0
37858: ST_TO_ADDR
// if GetTaskList ( sci ) then
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 437
37868: IFFALSE 37916
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37870: LD_VAR 0 1
37874: PPUSH
37875: CALL_OW 437
37879: PUSH
37880: LD_INT 1
37882: ARRAY
37883: PUSH
37884: LD_INT 1
37886: ARRAY
37887: PUSH
37888: LD_STRING l
37890: EQUAL
37891: IFFALSE 37916
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37893: LD_ADDR_VAR 0 2
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 437
37907: PUSH
37908: LD_INT 1
37910: ARRAY
37911: PUSH
37912: LD_INT 4
37914: ARRAY
37915: ST_TO_ADDR
// end ;
37916: LD_VAR 0 2
37920: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37921: LD_INT 0
37923: PPUSH
37924: PPUSH
37925: PPUSH
37926: PPUSH
// if not base_units then
37927: LD_VAR 0 1
37931: NOT
37932: IFFALSE 37936
// exit ;
37934: GO 38023
// result := false ;
37936: LD_ADDR_VAR 0 2
37940: PUSH
37941: LD_INT 0
37943: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37944: LD_ADDR_VAR 0 5
37948: PUSH
37949: LD_VAR 0 1
37953: PPUSH
37954: LD_INT 21
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PPUSH
37964: CALL_OW 72
37968: ST_TO_ADDR
// if not tmp then
37969: LD_VAR 0 5
37973: NOT
37974: IFFALSE 37978
// exit ;
37976: GO 38023
// for i in tmp do
37978: LD_ADDR_VAR 0 3
37982: PUSH
37983: LD_VAR 0 5
37987: PUSH
37988: FOR_IN
37989: IFFALSE 38021
// begin result := EnemyInRange ( i , 22 ) ;
37991: LD_ADDR_VAR 0 2
37995: PUSH
37996: LD_VAR 0 3
38000: PPUSH
38001: LD_INT 22
38003: PPUSH
38004: CALL 36259 0 2
38008: ST_TO_ADDR
// if result then
38009: LD_VAR 0 2
38013: IFFALSE 38019
// exit ;
38015: POP
38016: POP
38017: GO 38023
// end ;
38019: GO 37988
38021: POP
38022: POP
// end ;
38023: LD_VAR 0 2
38027: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
38028: LD_INT 0
38030: PPUSH
38031: PPUSH
// if not units then
38032: LD_VAR 0 1
38036: NOT
38037: IFFALSE 38041
// exit ;
38039: GO 38111
// result := [ ] ;
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: EMPTY
38047: ST_TO_ADDR
// for i in units do
38048: LD_ADDR_VAR 0 4
38052: PUSH
38053: LD_VAR 0 1
38057: PUSH
38058: FOR_IN
38059: IFFALSE 38109
// if GetTag ( i ) = tag then
38061: LD_VAR 0 4
38065: PPUSH
38066: CALL_OW 110
38070: PUSH
38071: LD_VAR 0 2
38075: EQUAL
38076: IFFALSE 38107
// result := Insert ( result , result + 1 , i ) ;
38078: LD_ADDR_VAR 0 3
38082: PUSH
38083: LD_VAR 0 3
38087: PPUSH
38088: LD_VAR 0 3
38092: PUSH
38093: LD_INT 1
38095: PLUS
38096: PPUSH
38097: LD_VAR 0 4
38101: PPUSH
38102: CALL_OW 2
38106: ST_TO_ADDR
38107: GO 38058
38109: POP
38110: POP
// end ;
38111: LD_VAR 0 3
38115: RET
// export function IsDriver ( un ) ; begin
38116: LD_INT 0
38118: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38119: LD_ADDR_VAR 0 2
38123: PUSH
38124: LD_VAR 0 1
38128: PUSH
38129: LD_INT 55
38131: PUSH
38132: EMPTY
38133: LIST
38134: PPUSH
38135: CALL_OW 69
38139: IN
38140: ST_TO_ADDR
// end ;
38141: LD_VAR 0 2
38145: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38146: LD_INT 0
38148: PPUSH
38149: PPUSH
// list := [ ] ;
38150: LD_ADDR_VAR 0 5
38154: PUSH
38155: EMPTY
38156: ST_TO_ADDR
// case d of 0 :
38157: LD_VAR 0 3
38161: PUSH
38162: LD_INT 0
38164: DOUBLE
38165: EQUAL
38166: IFTRUE 38170
38168: GO 38303
38170: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38171: LD_ADDR_VAR 0 5
38175: PUSH
38176: LD_VAR 0 1
38180: PUSH
38181: LD_INT 4
38183: MINUS
38184: PUSH
38185: LD_VAR 0 2
38189: PUSH
38190: LD_INT 4
38192: MINUS
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PUSH
38202: LD_VAR 0 1
38206: PUSH
38207: LD_INT 3
38209: MINUS
38210: PUSH
38211: LD_VAR 0 2
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: PUSH
38224: LD_VAR 0 1
38228: PUSH
38229: LD_INT 4
38231: PLUS
38232: PUSH
38233: LD_VAR 0 2
38237: PUSH
38238: LD_INT 4
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: LIST
38245: PUSH
38246: LD_VAR 0 1
38250: PUSH
38251: LD_INT 3
38253: PLUS
38254: PUSH
38255: LD_VAR 0 2
38259: PUSH
38260: LD_INT 3
38262: PLUS
38263: PUSH
38264: LD_INT 5
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: PUSH
38272: LD_VAR 0 1
38276: PUSH
38277: LD_VAR 0 2
38281: PUSH
38282: LD_INT 4
38284: PLUS
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// end ; 1 :
38301: GO 39001
38303: LD_INT 1
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38444
38311: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_VAR 0 1
38321: PUSH
38322: LD_VAR 0 2
38326: PUSH
38327: LD_INT 4
38329: MINUS
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: PUSH
38339: LD_VAR 0 1
38343: PUSH
38344: LD_INT 3
38346: MINUS
38347: PUSH
38348: LD_VAR 0 2
38352: PUSH
38353: LD_INT 3
38355: MINUS
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: PUSH
38365: LD_VAR 0 1
38369: PUSH
38370: LD_INT 4
38372: MINUS
38373: PUSH
38374: LD_VAR 0 2
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: PUSH
38387: LD_VAR 0 1
38391: PUSH
38392: LD_VAR 0 2
38396: PUSH
38397: LD_INT 3
38399: PLUS
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: PUSH
38409: LD_VAR 0 1
38413: PUSH
38414: LD_INT 4
38416: PLUS
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_INT 4
38425: PLUS
38426: PUSH
38427: LD_INT 5
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: ST_TO_ADDR
// end ; 2 :
38442: GO 39001
38444: LD_INT 2
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38452
38450: GO 38581
38452: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_VAR 0 1
38462: PUSH
38463: LD_VAR 0 2
38467: PUSH
38468: LD_INT 3
38470: MINUS
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: PUSH
38480: LD_VAR 0 1
38484: PUSH
38485: LD_INT 4
38487: PLUS
38488: PUSH
38489: LD_VAR 0 2
38493: PUSH
38494: LD_INT 4
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PUSH
38502: LD_VAR 0 1
38506: PUSH
38507: LD_VAR 0 2
38511: PUSH
38512: LD_INT 4
38514: PLUS
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: PUSH
38524: LD_VAR 0 1
38528: PUSH
38529: LD_INT 3
38531: MINUS
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: PUSH
38546: LD_VAR 0 1
38550: PUSH
38551: LD_INT 4
38553: MINUS
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_INT 4
38562: MINUS
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: ST_TO_ADDR
// end ; 3 :
38579: GO 39001
38581: LD_INT 3
38583: DOUBLE
38584: EQUAL
38585: IFTRUE 38589
38587: GO 38722
38589: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38590: LD_ADDR_VAR 0 5
38594: PUSH
38595: LD_VAR 0 1
38599: PUSH
38600: LD_INT 3
38602: PLUS
38603: PUSH
38604: LD_VAR 0 2
38608: PUSH
38609: LD_INT 4
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: LD_VAR 0 1
38621: PUSH
38622: LD_INT 4
38624: PLUS
38625: PUSH
38626: LD_VAR 0 2
38630: PUSH
38631: LD_INT 4
38633: PLUS
38634: PUSH
38635: LD_INT 5
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: PUSH
38643: LD_VAR 0 1
38647: PUSH
38648: LD_INT 4
38650: MINUS
38651: PUSH
38652: LD_VAR 0 2
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 4
38677: MINUS
38678: PUSH
38679: LD_INT 3
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: LD_VAR 0 1
38691: PUSH
38692: LD_INT 3
38694: MINUS
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 3
38703: MINUS
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// end ; 4 :
38720: GO 39001
38722: LD_INT 4
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38730
38728: GO 38863
38730: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38731: LD_ADDR_VAR 0 5
38735: PUSH
38736: LD_VAR 0 1
38740: PUSH
38741: LD_VAR 0 2
38745: PUSH
38746: LD_INT 4
38748: PLUS
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: PUSH
38758: LD_VAR 0 1
38762: PUSH
38763: LD_INT 3
38765: PLUS
38766: PUSH
38767: LD_VAR 0 2
38771: PUSH
38772: LD_INT 3
38774: PLUS
38775: PUSH
38776: LD_INT 5
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: PUSH
38784: LD_VAR 0 1
38788: PUSH
38789: LD_INT 4
38791: PLUS
38792: PUSH
38793: LD_VAR 0 2
38797: PUSH
38798: LD_INT 4
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: LD_VAR 0 2
38815: PUSH
38816: LD_INT 3
38818: MINUS
38819: PUSH
38820: LD_INT 3
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PUSH
38828: LD_VAR 0 1
38832: PUSH
38833: LD_INT 4
38835: MINUS
38836: PUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_INT 4
38844: MINUS
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: ST_TO_ADDR
// end ; 5 :
38861: GO 39001
38863: LD_INT 5
38865: DOUBLE
38866: EQUAL
38867: IFTRUE 38871
38869: GO 39000
38871: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: LD_VAR 0 1
38881: PUSH
38882: LD_INT 4
38884: MINUS
38885: PUSH
38886: LD_VAR 0 2
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: PUSH
38899: LD_VAR 0 1
38903: PUSH
38904: LD_VAR 0 2
38908: PUSH
38909: LD_INT 4
38911: MINUS
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: PUSH
38921: LD_VAR 0 1
38925: PUSH
38926: LD_INT 4
38928: PLUS
38929: PUSH
38930: LD_VAR 0 2
38934: PUSH
38935: LD_INT 4
38937: PLUS
38938: PUSH
38939: LD_INT 5
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_VAR 0 1
38951: PUSH
38952: LD_INT 3
38954: PLUS
38955: PUSH
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 4
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: LIST
38968: PUSH
38969: LD_VAR 0 1
38973: PUSH
38974: LD_VAR 0 2
38978: PUSH
38979: LD_INT 3
38981: PLUS
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: ST_TO_ADDR
// end ; end ;
38998: GO 39001
39000: POP
// result := list ;
39001: LD_ADDR_VAR 0 4
39005: PUSH
39006: LD_VAR 0 5
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 4
39015: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
39020: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39021: LD_VAR 0 1
39025: NOT
39026: PUSH
39027: LD_VAR 0 2
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: LD_INT 3
39040: PUSH
39041: LD_INT 4
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: IN
39050: NOT
39051: OR
39052: IFFALSE 39056
// exit ;
39054: GO 39148
// tmp := [ ] ;
39056: LD_ADDR_VAR 0 5
39060: PUSH
39061: EMPTY
39062: ST_TO_ADDR
// for i in units do
39063: LD_ADDR_VAR 0 4
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: FOR_IN
39074: IFFALSE 39117
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39076: LD_ADDR_VAR 0 5
39080: PUSH
39081: LD_VAR 0 5
39085: PPUSH
39086: LD_VAR 0 5
39090: PUSH
39091: LD_INT 1
39093: PLUS
39094: PPUSH
39095: LD_VAR 0 4
39099: PPUSH
39100: LD_VAR 0 2
39104: PPUSH
39105: CALL_OW 259
39109: PPUSH
39110: CALL_OW 2
39114: ST_TO_ADDR
39115: GO 39073
39117: POP
39118: POP
// if not tmp then
39119: LD_VAR 0 5
39123: NOT
39124: IFFALSE 39128
// exit ;
39126: GO 39148
// result := SortListByListDesc ( units , tmp ) ;
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_VAR 0 1
39137: PPUSH
39138: LD_VAR 0 5
39142: PPUSH
39143: CALL_OW 77
39147: ST_TO_ADDR
// end ;
39148: LD_VAR 0 3
39152: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39153: LD_INT 0
39155: PPUSH
39156: PPUSH
39157: PPUSH
// result := false ;
39158: LD_ADDR_VAR 0 3
39162: PUSH
39163: LD_INT 0
39165: ST_TO_ADDR
// x := GetX ( building ) ;
39166: LD_ADDR_VAR 0 4
39170: PUSH
39171: LD_VAR 0 2
39175: PPUSH
39176: CALL_OW 250
39180: ST_TO_ADDR
// y := GetY ( building ) ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_VAR 0 2
39190: PPUSH
39191: CALL_OW 251
39195: ST_TO_ADDR
// if not building or not x or not y then
39196: LD_VAR 0 2
39200: NOT
39201: PUSH
39202: LD_VAR 0 4
39206: NOT
39207: OR
39208: PUSH
39209: LD_VAR 0 5
39213: NOT
39214: OR
39215: IFFALSE 39219
// exit ;
39217: GO 39311
// if GetTaskList ( unit ) then
39219: LD_VAR 0 1
39223: PPUSH
39224: CALL_OW 437
39228: IFFALSE 39311
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39230: LD_STRING e
39232: PUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 437
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: EQUAL
39251: PUSH
39252: LD_VAR 0 4
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 437
39266: PUSH
39267: LD_INT 1
39269: ARRAY
39270: PUSH
39271: LD_INT 2
39273: ARRAY
39274: EQUAL
39275: AND
39276: PUSH
39277: LD_VAR 0 5
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 437
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PUSH
39296: LD_INT 3
39298: ARRAY
39299: EQUAL
39300: AND
39301: IFFALSE 39311
// result := true end ;
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 1
39310: ST_TO_ADDR
// end ;
39311: LD_VAR 0 3
39315: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39316: LD_INT 0
39318: PPUSH
// result := false ;
39319: LD_ADDR_VAR 0 4
39323: PUSH
39324: LD_INT 0
39326: ST_TO_ADDR
// if GetTaskList ( unit ) then
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 437
39336: IFFALSE 39419
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39338: LD_STRING M
39340: PUSH
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 437
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: EQUAL
39359: PUSH
39360: LD_VAR 0 2
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 437
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PUSH
39379: LD_INT 2
39381: ARRAY
39382: EQUAL
39383: AND
39384: PUSH
39385: LD_VAR 0 3
39389: PUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 437
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: PUSH
39404: LD_INT 3
39406: ARRAY
39407: EQUAL
39408: AND
39409: IFFALSE 39419
// result := true ;
39411: LD_ADDR_VAR 0 4
39415: PUSH
39416: LD_INT 1
39418: ST_TO_ADDR
// end ; end ;
39419: LD_VAR 0 4
39423: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39424: LD_INT 0
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
// if not unit or not area then
39430: LD_VAR 0 1
39434: NOT
39435: PUSH
39436: LD_VAR 0 2
39440: NOT
39441: OR
39442: IFFALSE 39446
// exit ;
39444: GO 39610
// tmp := AreaToList ( area , i ) ;
39446: LD_ADDR_VAR 0 6
39450: PUSH
39451: LD_VAR 0 2
39455: PPUSH
39456: LD_VAR 0 5
39460: PPUSH
39461: CALL_OW 517
39465: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39466: LD_ADDR_VAR 0 5
39470: PUSH
39471: DOUBLE
39472: LD_INT 1
39474: DEC
39475: ST_TO_ADDR
39476: LD_VAR 0 6
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: PUSH
39485: FOR_TO
39486: IFFALSE 39608
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39488: LD_ADDR_VAR 0 7
39492: PUSH
39493: LD_VAR 0 6
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PUSH
39502: LD_VAR 0 5
39506: ARRAY
39507: PUSH
39508: LD_VAR 0 6
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PUSH
39517: LD_VAR 0 5
39521: ARRAY
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39527: LD_VAR 0 7
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PPUSH
39536: LD_VAR 0 7
39540: PUSH
39541: LD_INT 2
39543: ARRAY
39544: PPUSH
39545: CALL_OW 428
39549: PUSH
39550: LD_INT 0
39552: EQUAL
39553: IFFALSE 39606
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39555: LD_VAR 0 1
39559: PPUSH
39560: LD_VAR 0 7
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: PPUSH
39569: LD_VAR 0 7
39573: PUSH
39574: LD_INT 2
39576: ARRAY
39577: PPUSH
39578: LD_VAR 0 3
39582: PPUSH
39583: CALL_OW 48
// result := IsPlaced ( unit ) ;
39587: LD_ADDR_VAR 0 4
39591: PUSH
39592: LD_VAR 0 1
39596: PPUSH
39597: CALL_OW 305
39601: ST_TO_ADDR
// exit ;
39602: POP
39603: POP
39604: GO 39610
// end ; end ;
39606: GO 39485
39608: POP
39609: POP
// end ;
39610: LD_VAR 0 4
39614: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39615: LD_INT 0
39617: PPUSH
39618: PPUSH
39619: PPUSH
// if not side or side > 8 then
39620: LD_VAR 0 1
39624: NOT
39625: PUSH
39626: LD_VAR 0 1
39630: PUSH
39631: LD_INT 8
39633: GREATER
39634: OR
39635: IFFALSE 39639
// exit ;
39637: GO 39826
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39639: LD_ADDR_VAR 0 4
39643: PUSH
39644: LD_INT 22
39646: PUSH
39647: LD_VAR 0 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 21
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PPUSH
39670: CALL_OW 69
39674: ST_TO_ADDR
// if not tmp then
39675: LD_VAR 0 4
39679: NOT
39680: IFFALSE 39684
// exit ;
39682: GO 39826
// enable_addtolog := true ;
39684: LD_ADDR_OWVAR 81
39688: PUSH
39689: LD_INT 1
39691: ST_TO_ADDR
// AddToLog ( [ ) ;
39692: LD_STRING [
39694: PPUSH
39695: CALL_OW 561
// for i in tmp do
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_VAR 0 4
39708: PUSH
39709: FOR_IN
39710: IFFALSE 39817
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39712: LD_STRING [
39714: PUSH
39715: LD_VAR 0 3
39719: PPUSH
39720: CALL_OW 266
39724: STR
39725: PUSH
39726: LD_STRING , 
39728: STR
39729: PUSH
39730: LD_VAR 0 3
39734: PPUSH
39735: CALL_OW 250
39739: STR
39740: PUSH
39741: LD_STRING , 
39743: STR
39744: PUSH
39745: LD_VAR 0 3
39749: PPUSH
39750: CALL_OW 251
39754: STR
39755: PUSH
39756: LD_STRING , 
39758: STR
39759: PUSH
39760: LD_VAR 0 3
39764: PPUSH
39765: CALL_OW 254
39769: STR
39770: PUSH
39771: LD_STRING , 
39773: STR
39774: PUSH
39775: LD_VAR 0 3
39779: PPUSH
39780: LD_INT 1
39782: PPUSH
39783: CALL_OW 268
39787: STR
39788: PUSH
39789: LD_STRING , 
39791: STR
39792: PUSH
39793: LD_VAR 0 3
39797: PPUSH
39798: LD_INT 2
39800: PPUSH
39801: CALL_OW 268
39805: STR
39806: PUSH
39807: LD_STRING ],
39809: STR
39810: PPUSH
39811: CALL_OW 561
// end ;
39815: GO 39709
39817: POP
39818: POP
// AddToLog ( ]; ) ;
39819: LD_STRING ];
39821: PPUSH
39822: CALL_OW 561
// end ;
39826: LD_VAR 0 2
39830: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39831: LD_INT 0
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
// if not area or not rate or not max then
39838: LD_VAR 0 1
39842: NOT
39843: PUSH
39844: LD_VAR 0 2
39848: NOT
39849: OR
39850: PUSH
39851: LD_VAR 0 4
39855: NOT
39856: OR
39857: IFFALSE 39861
// exit ;
39859: GO 40053
// while 1 do
39861: LD_INT 1
39863: IFFALSE 40053
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39865: LD_ADDR_VAR 0 9
39869: PUSH
39870: LD_VAR 0 1
39874: PPUSH
39875: LD_INT 1
39877: PPUSH
39878: CALL_OW 287
39882: PUSH
39883: LD_INT 10
39885: MUL
39886: ST_TO_ADDR
// r := rate / 10 ;
39887: LD_ADDR_VAR 0 7
39891: PUSH
39892: LD_VAR 0 2
39896: PUSH
39897: LD_INT 10
39899: DIVREAL
39900: ST_TO_ADDR
// time := 1 1$00 ;
39901: LD_ADDR_VAR 0 8
39905: PUSH
39906: LD_INT 2100
39908: ST_TO_ADDR
// if amount < min then
39909: LD_VAR 0 9
39913: PUSH
39914: LD_VAR 0 3
39918: LESS
39919: IFFALSE 39937
// r := r * 2 else
39921: LD_ADDR_VAR 0 7
39925: PUSH
39926: LD_VAR 0 7
39930: PUSH
39931: LD_INT 2
39933: MUL
39934: ST_TO_ADDR
39935: GO 39963
// if amount > max then
39937: LD_VAR 0 9
39941: PUSH
39942: LD_VAR 0 4
39946: GREATER
39947: IFFALSE 39963
// r := r / 2 ;
39949: LD_ADDR_VAR 0 7
39953: PUSH
39954: LD_VAR 0 7
39958: PUSH
39959: LD_INT 2
39961: DIVREAL
39962: ST_TO_ADDR
// time := time / r ;
39963: LD_ADDR_VAR 0 8
39967: PUSH
39968: LD_VAR 0 8
39972: PUSH
39973: LD_VAR 0 7
39977: DIVREAL
39978: ST_TO_ADDR
// if time < 0 then
39979: LD_VAR 0 8
39983: PUSH
39984: LD_INT 0
39986: LESS
39987: IFFALSE 40004
// time := time * - 1 ;
39989: LD_ADDR_VAR 0 8
39993: PUSH
39994: LD_VAR 0 8
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: MUL
40003: ST_TO_ADDR
// wait ( time ) ;
40004: LD_VAR 0 8
40008: PPUSH
40009: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
40013: LD_INT 35
40015: PPUSH
40016: LD_INT 875
40018: PPUSH
40019: CALL_OW 12
40023: PPUSH
40024: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40028: LD_INT 1
40030: PPUSH
40031: LD_INT 5
40033: PPUSH
40034: CALL_OW 12
40038: PPUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: LD_INT 1
40046: PPUSH
40047: CALL_OW 55
// end ;
40051: GO 39861
// end ;
40053: LD_VAR 0 5
40057: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40058: LD_INT 0
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
// if not turrets or not factories then
40068: LD_VAR 0 1
40072: NOT
40073: PUSH
40074: LD_VAR 0 2
40078: NOT
40079: OR
40080: IFFALSE 40084
// exit ;
40082: GO 40391
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40084: LD_ADDR_VAR 0 10
40088: PUSH
40089: LD_INT 5
40091: PUSH
40092: LD_INT 6
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 4
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 5
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 24
40126: PUSH
40127: LD_INT 25
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 23
40136: PUSH
40137: LD_INT 27
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 42
40150: PUSH
40151: LD_INT 43
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 44
40160: PUSH
40161: LD_INT 46
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 45
40170: PUSH
40171: LD_INT 47
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// result := [ ] ;
40188: LD_ADDR_VAR 0 3
40192: PUSH
40193: EMPTY
40194: ST_TO_ADDR
// for i in turrets do
40195: LD_ADDR_VAR 0 4
40199: PUSH
40200: LD_VAR 0 1
40204: PUSH
40205: FOR_IN
40206: IFFALSE 40389
// begin nat := GetNation ( i ) ;
40208: LD_ADDR_VAR 0 7
40212: PUSH
40213: LD_VAR 0 4
40217: PPUSH
40218: CALL_OW 248
40222: ST_TO_ADDR
// weapon := 0 ;
40223: LD_ADDR_VAR 0 8
40227: PUSH
40228: LD_INT 0
40230: ST_TO_ADDR
// if not nat then
40231: LD_VAR 0 7
40235: NOT
40236: IFFALSE 40240
// continue ;
40238: GO 40205
// for j in list [ nat ] do
40240: LD_ADDR_VAR 0 5
40244: PUSH
40245: LD_VAR 0 10
40249: PUSH
40250: LD_VAR 0 7
40254: ARRAY
40255: PUSH
40256: FOR_IN
40257: IFFALSE 40298
// if GetBWeapon ( i ) = j [ 1 ] then
40259: LD_VAR 0 4
40263: PPUSH
40264: CALL_OW 269
40268: PUSH
40269: LD_VAR 0 5
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: EQUAL
40278: IFFALSE 40296
// begin weapon := j [ 2 ] ;
40280: LD_ADDR_VAR 0 8
40284: PUSH
40285: LD_VAR 0 5
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: ST_TO_ADDR
// break ;
40294: GO 40298
// end ;
40296: GO 40256
40298: POP
40299: POP
// if not weapon then
40300: LD_VAR 0 8
40304: NOT
40305: IFFALSE 40309
// continue ;
40307: GO 40205
// for k in factories do
40309: LD_ADDR_VAR 0 6
40313: PUSH
40314: LD_VAR 0 2
40318: PUSH
40319: FOR_IN
40320: IFFALSE 40385
// begin weapons := AvailableWeaponList ( k ) ;
40322: LD_ADDR_VAR 0 9
40326: PUSH
40327: LD_VAR 0 6
40331: PPUSH
40332: CALL_OW 478
40336: ST_TO_ADDR
// if not weapons then
40337: LD_VAR 0 9
40341: NOT
40342: IFFALSE 40346
// continue ;
40344: GO 40319
// if weapon in weapons then
40346: LD_VAR 0 8
40350: PUSH
40351: LD_VAR 0 9
40355: IN
40356: IFFALSE 40383
// begin result := [ i , weapon ] ;
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_VAR 0 4
40367: PUSH
40368: LD_VAR 0 8
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// exit ;
40377: POP
40378: POP
40379: POP
40380: POP
40381: GO 40391
// end ; end ;
40383: GO 40319
40385: POP
40386: POP
// end ;
40387: GO 40205
40389: POP
40390: POP
// end ;
40391: LD_VAR 0 3
40395: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40396: LD_INT 0
40398: PPUSH
// if not side or side > 8 then
40399: LD_VAR 0 3
40403: NOT
40404: PUSH
40405: LD_VAR 0 3
40409: PUSH
40410: LD_INT 8
40412: GREATER
40413: OR
40414: IFFALSE 40418
// exit ;
40416: GO 40477
// if not range then
40418: LD_VAR 0 4
40422: NOT
40423: IFFALSE 40434
// range := - 12 ;
40425: LD_ADDR_VAR 0 4
40429: PUSH
40430: LD_INT 12
40432: NEG
40433: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40434: LD_VAR 0 1
40438: PPUSH
40439: LD_VAR 0 2
40443: PPUSH
40444: LD_VAR 0 3
40448: PPUSH
40449: LD_VAR 0 4
40453: PPUSH
40454: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_VAR 0 2
40467: PPUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: CALL_OW 331
// end ;
40477: LD_VAR 0 5
40481: RET
// export function Video ( mode ) ; begin
40482: LD_INT 0
40484: PPUSH
// ingame_video = mode ;
40485: LD_ADDR_OWVAR 52
40489: PUSH
40490: LD_VAR 0 1
40494: ST_TO_ADDR
// interface_hidden = mode ;
40495: LD_ADDR_OWVAR 54
40499: PUSH
40500: LD_VAR 0 1
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 2
40509: RET
// export function Join ( array , element ) ; begin
40510: LD_INT 0
40512: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40513: LD_ADDR_VAR 0 3
40517: PUSH
40518: LD_VAR 0 1
40522: PPUSH
40523: LD_VAR 0 1
40527: PUSH
40528: LD_INT 1
40530: PLUS
40531: PPUSH
40532: LD_VAR 0 2
40536: PPUSH
40537: CALL_OW 1
40541: ST_TO_ADDR
// end ;
40542: LD_VAR 0 3
40546: RET
// export function JoinUnion ( array , element ) ; begin
40547: LD_INT 0
40549: PPUSH
// result := array union element ;
40550: LD_ADDR_VAR 0 3
40554: PUSH
40555: LD_VAR 0 1
40559: PUSH
40560: LD_VAR 0 2
40564: UNION
40565: ST_TO_ADDR
// end ;
40566: LD_VAR 0 3
40570: RET
// export function GetBehemoths ( side ) ; begin
40571: LD_INT 0
40573: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40574: LD_ADDR_VAR 0 2
40578: PUSH
40579: LD_INT 22
40581: PUSH
40582: LD_VAR 0 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 31
40593: PUSH
40594: LD_INT 25
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PPUSH
40605: CALL_OW 69
40609: ST_TO_ADDR
// end ;
40610: LD_VAR 0 2
40614: RET
// export function Shuffle ( array ) ; var i , index ; begin
40615: LD_INT 0
40617: PPUSH
40618: PPUSH
40619: PPUSH
// result := [ ] ;
40620: LD_ADDR_VAR 0 2
40624: PUSH
40625: EMPTY
40626: ST_TO_ADDR
// if not array then
40627: LD_VAR 0 1
40631: NOT
40632: IFFALSE 40636
// exit ;
40634: GO 40735
// Randomize ;
40636: CALL_OW 10
// for i = array downto 1 do
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: DOUBLE
40646: LD_VAR 0 1
40650: INC
40651: ST_TO_ADDR
40652: LD_INT 1
40654: PUSH
40655: FOR_DOWNTO
40656: IFFALSE 40733
// begin index := rand ( 1 , array ) ;
40658: LD_ADDR_VAR 0 4
40662: PUSH
40663: LD_INT 1
40665: PPUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 12
40675: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40676: LD_ADDR_VAR 0 2
40680: PUSH
40681: LD_VAR 0 2
40685: PPUSH
40686: LD_VAR 0 2
40690: PUSH
40691: LD_INT 1
40693: PLUS
40694: PPUSH
40695: LD_VAR 0 1
40699: PUSH
40700: LD_VAR 0 4
40704: ARRAY
40705: PPUSH
40706: CALL_OW 2
40710: ST_TO_ADDR
// array := Delete ( array , index ) ;
40711: LD_ADDR_VAR 0 1
40715: PUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: LD_VAR 0 4
40725: PPUSH
40726: CALL_OW 3
40730: ST_TO_ADDR
// end ;
40731: GO 40655
40733: POP
40734: POP
// end ;
40735: LD_VAR 0 2
40739: RET
// export function GetBaseMaterials ( base ) ; begin
40740: LD_INT 0
40742: PPUSH
// result := [ 0 , 0 , 0 ] ;
40743: LD_ADDR_VAR 0 2
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: ST_TO_ADDR
// if not base then
40762: LD_VAR 0 1
40766: NOT
40767: IFFALSE 40771
// exit ;
40769: GO 40820
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40771: LD_ADDR_VAR 0 2
40775: PUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: LD_INT 1
40783: PPUSH
40784: CALL_OW 275
40788: PUSH
40789: LD_VAR 0 1
40793: PPUSH
40794: LD_INT 2
40796: PPUSH
40797: CALL_OW 275
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: LD_INT 3
40809: PPUSH
40810: CALL_OW 275
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: ST_TO_ADDR
// end ;
40820: LD_VAR 0 2
40824: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40825: LD_INT 0
40827: PPUSH
40828: PPUSH
// result := array ;
40829: LD_ADDR_VAR 0 3
40833: PUSH
40834: LD_VAR 0 1
40838: ST_TO_ADDR
// if size > 0 then
40839: LD_VAR 0 2
40843: PUSH
40844: LD_INT 0
40846: GREATER
40847: IFFALSE 40893
// for i := array downto size do
40849: LD_ADDR_VAR 0 4
40853: PUSH
40854: DOUBLE
40855: LD_VAR 0 1
40859: INC
40860: ST_TO_ADDR
40861: LD_VAR 0 2
40865: PUSH
40866: FOR_DOWNTO
40867: IFFALSE 40891
// result := Delete ( result , result ) ;
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: CALL_OW 3
40888: ST_TO_ADDR
40889: GO 40866
40891: POP
40892: POP
// end ;
40893: LD_VAR 0 3
40897: RET
// export function ComExit ( unit ) ; var tmp ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
// if not IsInUnit ( unit ) then
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 310
40911: NOT
40912: IFFALSE 40916
// exit ;
40914: GO 40976
// tmp := IsInUnit ( unit ) ;
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_VAR 0 1
40925: PPUSH
40926: CALL_OW 310
40930: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40931: LD_VAR 0 3
40935: PPUSH
40936: CALL_OW 247
40940: PUSH
40941: LD_INT 2
40943: EQUAL
40944: IFFALSE 40957
// ComExitVehicle ( unit ) else
40946: LD_VAR 0 1
40950: PPUSH
40951: CALL_OW 121
40955: GO 40966
// ComExitBuilding ( unit ) ;
40957: LD_VAR 0 1
40961: PPUSH
40962: CALL_OW 122
// result := tmp ;
40966: LD_ADDR_VAR 0 2
40970: PUSH
40971: LD_VAR 0 3
40975: ST_TO_ADDR
// end ;
40976: LD_VAR 0 2
40980: RET
// export function ComExitAll ( units ) ; var i ; begin
40981: LD_INT 0
40983: PPUSH
40984: PPUSH
// if not units then
40985: LD_VAR 0 1
40989: NOT
40990: IFFALSE 40994
// exit ;
40992: GO 41020
// for i in units do
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_VAR 0 1
41003: PUSH
41004: FOR_IN
41005: IFFALSE 41018
// ComExit ( i ) ;
41007: LD_VAR 0 3
41011: PPUSH
41012: CALL 40898 0 1
41016: GO 41004
41018: POP
41019: POP
// end ;
41020: LD_VAR 0 2
41024: RET
// export function ResetHc ; begin
41025: LD_INT 0
41027: PPUSH
// InitHc ;
41028: CALL_OW 19
// hc_importance := 0 ;
41032: LD_ADDR_OWVAR 32
41036: PUSH
41037: LD_INT 0
41039: ST_TO_ADDR
// end ;
41040: LD_VAR 0 1
41044: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41045: LD_INT 0
41047: PPUSH
41048: PPUSH
41049: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41050: LD_ADDR_VAR 0 6
41054: PUSH
41055: LD_VAR 0 1
41059: PUSH
41060: LD_VAR 0 3
41064: PLUS
41065: PUSH
41066: LD_INT 2
41068: DIV
41069: ST_TO_ADDR
// if _x < 0 then
41070: LD_VAR 0 6
41074: PUSH
41075: LD_INT 0
41077: LESS
41078: IFFALSE 41095
// _x := _x * - 1 ;
41080: LD_ADDR_VAR 0 6
41084: PUSH
41085: LD_VAR 0 6
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: MUL
41094: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41095: LD_ADDR_VAR 0 7
41099: PUSH
41100: LD_VAR 0 2
41104: PUSH
41105: LD_VAR 0 4
41109: PLUS
41110: PUSH
41111: LD_INT 2
41113: DIV
41114: ST_TO_ADDR
// if _y < 0 then
41115: LD_VAR 0 7
41119: PUSH
41120: LD_INT 0
41122: LESS
41123: IFFALSE 41140
// _y := _y * - 1 ;
41125: LD_ADDR_VAR 0 7
41129: PUSH
41130: LD_VAR 0 7
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: MUL
41139: ST_TO_ADDR
// result := [ _x , _y ] ;
41140: LD_ADDR_VAR 0 5
41144: PUSH
41145: LD_VAR 0 6
41149: PUSH
41150: LD_VAR 0 7
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: ST_TO_ADDR
// end ;
41159: LD_VAR 0 5
41163: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41164: LD_INT 0
41166: PPUSH
41167: PPUSH
41168: PPUSH
41169: PPUSH
// task := GetTaskList ( unit ) ;
41170: LD_ADDR_VAR 0 7
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 437
41184: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41185: LD_VAR 0 7
41189: NOT
41190: PUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: LD_VAR 0 2
41200: PPUSH
41201: CALL_OW 308
41205: NOT
41206: AND
41207: IFFALSE 41211
// exit ;
41209: GO 41329
// if IsInArea ( unit , area ) then
41211: LD_VAR 0 1
41215: PPUSH
41216: LD_VAR 0 2
41220: PPUSH
41221: CALL_OW 308
41225: IFFALSE 41243
// begin ComMoveToArea ( unit , goAway ) ;
41227: LD_VAR 0 1
41231: PPUSH
41232: LD_VAR 0 3
41236: PPUSH
41237: CALL_OW 113
// exit ;
41241: GO 41329
// end ; if task [ 1 ] [ 1 ] <> M then
41243: LD_VAR 0 7
41247: PUSH
41248: LD_INT 1
41250: ARRAY
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PUSH
41256: LD_STRING M
41258: NONEQUAL
41259: IFFALSE 41263
// exit ;
41261: GO 41329
// x := task [ 1 ] [ 2 ] ;
41263: LD_ADDR_VAR 0 5
41267: PUSH
41268: LD_VAR 0 7
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PUSH
41277: LD_INT 2
41279: ARRAY
41280: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41281: LD_ADDR_VAR 0 6
41285: PUSH
41286: LD_VAR 0 7
41290: PUSH
41291: LD_INT 1
41293: ARRAY
41294: PUSH
41295: LD_INT 3
41297: ARRAY
41298: ST_TO_ADDR
// if InArea ( x , y , area ) then
41299: LD_VAR 0 5
41303: PPUSH
41304: LD_VAR 0 6
41308: PPUSH
41309: LD_VAR 0 2
41313: PPUSH
41314: CALL_OW 309
41318: IFFALSE 41329
// ComStop ( unit ) ;
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 141
// end ;
41329: LD_VAR 0 4
41333: RET
// export function Abs ( value ) ; begin
41334: LD_INT 0
41336: PPUSH
// result := value ;
41337: LD_ADDR_VAR 0 2
41341: PUSH
41342: LD_VAR 0 1
41346: ST_TO_ADDR
// if value < 0 then
41347: LD_VAR 0 1
41351: PUSH
41352: LD_INT 0
41354: LESS
41355: IFFALSE 41372
// result := value * - 1 ;
41357: LD_ADDR_VAR 0 2
41361: PUSH
41362: LD_VAR 0 1
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: MUL
41371: ST_TO_ADDR
// end ;
41372: LD_VAR 0 2
41376: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41377: LD_INT 0
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
// if not unit or not building then
41387: LD_VAR 0 1
41391: NOT
41392: PUSH
41393: LD_VAR 0 2
41397: NOT
41398: OR
41399: IFFALSE 41403
// exit ;
41401: GO 41629
// x := GetX ( building ) ;
41403: LD_ADDR_VAR 0 4
41407: PUSH
41408: LD_VAR 0 2
41412: PPUSH
41413: CALL_OW 250
41417: ST_TO_ADDR
// y := GetY ( building ) ;
41418: LD_ADDR_VAR 0 6
41422: PUSH
41423: LD_VAR 0 2
41427: PPUSH
41428: CALL_OW 251
41432: ST_TO_ADDR
// d := GetDir ( building ) ;
41433: LD_ADDR_VAR 0 8
41437: PUSH
41438: LD_VAR 0 2
41442: PPUSH
41443: CALL_OW 254
41447: ST_TO_ADDR
// r := 4 ;
41448: LD_ADDR_VAR 0 9
41452: PUSH
41453: LD_INT 4
41455: ST_TO_ADDR
// for i := 1 to 5 do
41456: LD_ADDR_VAR 0 10
41460: PUSH
41461: DOUBLE
41462: LD_INT 1
41464: DEC
41465: ST_TO_ADDR
41466: LD_INT 5
41468: PUSH
41469: FOR_TO
41470: IFFALSE 41627
// begin _x := ShiftX ( x , d , r + i ) ;
41472: LD_ADDR_VAR 0 5
41476: PUSH
41477: LD_VAR 0 4
41481: PPUSH
41482: LD_VAR 0 8
41486: PPUSH
41487: LD_VAR 0 9
41491: PUSH
41492: LD_VAR 0 10
41496: PLUS
41497: PPUSH
41498: CALL_OW 272
41502: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41503: LD_ADDR_VAR 0 7
41507: PUSH
41508: LD_VAR 0 6
41512: PPUSH
41513: LD_VAR 0 8
41517: PPUSH
41518: LD_VAR 0 9
41522: PUSH
41523: LD_VAR 0 10
41527: PLUS
41528: PPUSH
41529: CALL_OW 273
41533: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41534: LD_VAR 0 5
41538: PPUSH
41539: LD_VAR 0 7
41543: PPUSH
41544: CALL_OW 488
41548: PUSH
41549: LD_VAR 0 5
41553: PPUSH
41554: LD_VAR 0 7
41558: PPUSH
41559: CALL_OW 428
41563: PPUSH
41564: CALL_OW 247
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: IN
41579: NOT
41580: AND
41581: IFFALSE 41625
// begin ComMoveXY ( unit , _x , _y ) ;
41583: LD_VAR 0 1
41587: PPUSH
41588: LD_VAR 0 5
41592: PPUSH
41593: LD_VAR 0 7
41597: PPUSH
41598: CALL_OW 111
// result := [ _x , _y ] ;
41602: LD_ADDR_VAR 0 3
41606: PUSH
41607: LD_VAR 0 5
41611: PUSH
41612: LD_VAR 0 7
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: ST_TO_ADDR
// exit ;
41621: POP
41622: POP
41623: GO 41629
// end ; end ;
41625: GO 41469
41627: POP
41628: POP
// end ;
41629: LD_VAR 0 3
41633: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41634: LD_INT 0
41636: PPUSH
41637: PPUSH
41638: PPUSH
// result := 0 ;
41639: LD_ADDR_VAR 0 3
41643: PUSH
41644: LD_INT 0
41646: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41647: LD_VAR 0 1
41651: PUSH
41652: LD_INT 0
41654: LESS
41655: PUSH
41656: LD_VAR 0 1
41660: PUSH
41661: LD_INT 8
41663: GREATER
41664: OR
41665: PUSH
41666: LD_VAR 0 2
41670: PUSH
41671: LD_INT 0
41673: LESS
41674: OR
41675: PUSH
41676: LD_VAR 0 2
41680: PUSH
41681: LD_INT 8
41683: GREATER
41684: OR
41685: IFFALSE 41689
// exit ;
41687: GO 41764
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41689: LD_ADDR_VAR 0 4
41693: PUSH
41694: LD_INT 22
41696: PUSH
41697: LD_VAR 0 2
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 69
41710: PUSH
41711: FOR_IN
41712: IFFALSE 41762
// begin un := UnitShoot ( i ) ;
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_VAR 0 4
41723: PPUSH
41724: CALL_OW 504
41728: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41729: LD_VAR 0 5
41733: PPUSH
41734: CALL_OW 255
41738: PUSH
41739: LD_VAR 0 1
41743: EQUAL
41744: IFFALSE 41760
// begin result := un ;
41746: LD_ADDR_VAR 0 3
41750: PUSH
41751: LD_VAR 0 5
41755: ST_TO_ADDR
// exit ;
41756: POP
41757: POP
41758: GO 41764
// end ; end ;
41760: GO 41711
41762: POP
41763: POP
// end ;
41764: LD_VAR 0 3
41768: RET
// export function GetCargoBay ( units ) ; begin
41769: LD_INT 0
41771: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41772: LD_ADDR_VAR 0 2
41776: PUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: LD_INT 2
41784: PUSH
41785: LD_INT 34
41787: PUSH
41788: LD_INT 12
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 34
41797: PUSH
41798: LD_INT 51
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 34
41807: PUSH
41808: LD_INT 32
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 34
41817: PUSH
41818: LD_EXP 87
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: PPUSH
41834: CALL_OW 72
41838: ST_TO_ADDR
// end ;
41839: LD_VAR 0 2
41843: RET
// export function Negate ( value ) ; begin
41844: LD_INT 0
41846: PPUSH
// result := not value ;
41847: LD_ADDR_VAR 0 2
41851: PUSH
41852: LD_VAR 0 1
41856: NOT
41857: ST_TO_ADDR
// end ;
41858: LD_VAR 0 2
41862: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
41863: LD_INT 0
41865: PPUSH
// if x1 = x2 then
41866: LD_VAR 0 1
41870: PUSH
41871: LD_VAR 0 3
41875: EQUAL
41876: IFFALSE 41910
// begin if y1 > y2 then
41878: LD_VAR 0 2
41882: PUSH
41883: LD_VAR 0 4
41887: GREATER
41888: IFFALSE 41900
// result := 0 else
41890: LD_ADDR_VAR 0 5
41894: PUSH
41895: LD_INT 0
41897: ST_TO_ADDR
41898: GO 41908
// result := 3 ;
41900: LD_ADDR_VAR 0 5
41904: PUSH
41905: LD_INT 3
41907: ST_TO_ADDR
// exit ;
41908: GO 41996
// end ; if y1 = y2 then
41910: LD_VAR 0 2
41914: PUSH
41915: LD_VAR 0 4
41919: EQUAL
41920: IFFALSE 41954
// begin if x1 > x2 then
41922: LD_VAR 0 1
41926: PUSH
41927: LD_VAR 0 3
41931: GREATER
41932: IFFALSE 41944
// result := 1 else
41934: LD_ADDR_VAR 0 5
41938: PUSH
41939: LD_INT 1
41941: ST_TO_ADDR
41942: GO 41952
// result := 4 ;
41944: LD_ADDR_VAR 0 5
41948: PUSH
41949: LD_INT 4
41951: ST_TO_ADDR
// exit ;
41952: GO 41996
// end ; if x1 > x2 and y1 > y2 then
41954: LD_VAR 0 1
41958: PUSH
41959: LD_VAR 0 3
41963: GREATER
41964: PUSH
41965: LD_VAR 0 2
41969: PUSH
41970: LD_VAR 0 4
41974: GREATER
41975: AND
41976: IFFALSE 41988
// result := 2 else
41978: LD_ADDR_VAR 0 5
41982: PUSH
41983: LD_INT 2
41985: ST_TO_ADDR
41986: GO 41996
// result := 5 ;
41988: LD_ADDR_VAR 0 5
41992: PUSH
41993: LD_INT 5
41995: ST_TO_ADDR
// end ;
41996: LD_VAR 0 5
42000: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42001: LD_INT 0
42003: PPUSH
42004: PPUSH
// if not driver or not IsInUnit ( driver ) then
42005: LD_VAR 0 1
42009: NOT
42010: PUSH
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 310
42020: NOT
42021: OR
42022: IFFALSE 42026
// exit ;
42024: GO 42116
// vehicle := IsInUnit ( driver ) ;
42026: LD_ADDR_VAR 0 3
42030: PUSH
42031: LD_VAR 0 1
42035: PPUSH
42036: CALL_OW 310
42040: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42041: LD_VAR 0 1
42045: PPUSH
42046: LD_STRING \
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: PUSH
42076: LD_STRING E
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_VAR 0 3
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PPUSH
42112: CALL_OW 446
// end ;
42116: LD_VAR 0 2
42120: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42121: LD_INT 0
42123: PPUSH
42124: PPUSH
// if not driver or not IsInUnit ( driver ) then
42125: LD_VAR 0 1
42129: NOT
42130: PUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: CALL_OW 310
42140: NOT
42141: OR
42142: IFFALSE 42146
// exit ;
42144: GO 42236
// vehicle := IsInUnit ( driver ) ;
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 310
42160: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42161: LD_VAR 0 1
42165: PPUSH
42166: LD_STRING \
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: PUSH
42196: LD_STRING E
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_VAR 0 3
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PPUSH
42232: CALL_OW 447
// end ;
42236: LD_VAR 0 2
42240: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42241: LD_INT 0
42243: PPUSH
42244: PPUSH
42245: PPUSH
// tmp := [ ] ;
42246: LD_ADDR_VAR 0 5
42250: PUSH
42251: EMPTY
42252: ST_TO_ADDR
// for i in units do
42253: LD_ADDR_VAR 0 4
42257: PUSH
42258: LD_VAR 0 1
42262: PUSH
42263: FOR_IN
42264: IFFALSE 42302
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42266: LD_ADDR_VAR 0 5
42270: PUSH
42271: LD_VAR 0 5
42275: PPUSH
42276: LD_VAR 0 5
42280: PUSH
42281: LD_INT 1
42283: PLUS
42284: PPUSH
42285: LD_VAR 0 4
42289: PPUSH
42290: CALL_OW 256
42294: PPUSH
42295: CALL_OW 2
42299: ST_TO_ADDR
42300: GO 42263
42302: POP
42303: POP
// if not tmp then
42304: LD_VAR 0 5
42308: NOT
42309: IFFALSE 42313
// exit ;
42311: GO 42361
// if asc then
42313: LD_VAR 0 2
42317: IFFALSE 42341
// result := SortListByListAsc ( units , tmp ) else
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_VAR 0 1
42328: PPUSH
42329: LD_VAR 0 5
42333: PPUSH
42334: CALL_OW 76
42338: ST_TO_ADDR
42339: GO 42361
// result := SortListByListDesc ( units , tmp ) ;
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: LD_VAR 0 5
42355: PPUSH
42356: CALL_OW 77
42360: ST_TO_ADDR
// end ;
42361: LD_VAR 0 3
42365: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42366: LD_INT 0
42368: PPUSH
42369: PPUSH
// task := GetTaskList ( mech ) ;
42370: LD_ADDR_VAR 0 4
42374: PUSH
42375: LD_VAR 0 1
42379: PPUSH
42380: CALL_OW 437
42384: ST_TO_ADDR
// if not task then
42385: LD_VAR 0 4
42389: NOT
42390: IFFALSE 42394
// exit ;
42392: GO 42436
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42394: LD_ADDR_VAR 0 3
42398: PUSH
42399: LD_VAR 0 4
42403: PUSH
42404: LD_INT 1
42406: ARRAY
42407: PUSH
42408: LD_INT 1
42410: ARRAY
42411: PUSH
42412: LD_STRING r
42414: EQUAL
42415: PUSH
42416: LD_VAR 0 4
42420: PUSH
42421: LD_INT 1
42423: ARRAY
42424: PUSH
42425: LD_INT 4
42427: ARRAY
42428: PUSH
42429: LD_VAR 0 2
42433: EQUAL
42434: AND
42435: ST_TO_ADDR
// end ;
42436: LD_VAR 0 3
42440: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42441: LD_INT 0
42443: PPUSH
// SetDir ( unit , d ) ;
42444: LD_VAR 0 1
42448: PPUSH
42449: LD_VAR 0 4
42453: PPUSH
42454: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42458: LD_VAR 0 1
42462: PPUSH
42463: LD_VAR 0 2
42467: PPUSH
42468: LD_VAR 0 3
42472: PPUSH
42473: LD_VAR 0 5
42477: PPUSH
42478: CALL_OW 48
// end ;
42482: LD_VAR 0 6
42486: RET
// export function ToNaturalNumber ( number ) ; begin
42487: LD_INT 0
42489: PPUSH
// result := number div 1 ;
42490: LD_ADDR_VAR 0 2
42494: PUSH
42495: LD_VAR 0 1
42499: PUSH
42500: LD_INT 1
42502: DIV
42503: ST_TO_ADDR
// if number < 0 then
42504: LD_VAR 0 1
42508: PUSH
42509: LD_INT 0
42511: LESS
42512: IFFALSE 42522
// result := 0 ;
42514: LD_ADDR_VAR 0 2
42518: PUSH
42519: LD_INT 0
42521: ST_TO_ADDR
// end ;
42522: LD_VAR 0 2
42526: RET
// export function SortByClass ( units , class ) ; var un ; begin
42527: LD_INT 0
42529: PPUSH
42530: PPUSH
// if not units or not class then
42531: LD_VAR 0 1
42535: NOT
42536: PUSH
42537: LD_VAR 0 2
42541: NOT
42542: OR
42543: IFFALSE 42547
// exit ;
42545: GO 42642
// result := [ ] ;
42547: LD_ADDR_VAR 0 3
42551: PUSH
42552: EMPTY
42553: ST_TO_ADDR
// for un in units do
42554: LD_ADDR_VAR 0 4
42558: PUSH
42559: LD_VAR 0 1
42563: PUSH
42564: FOR_IN
42565: IFFALSE 42640
// if GetClass ( un ) = class then
42567: LD_VAR 0 4
42571: PPUSH
42572: CALL_OW 257
42576: PUSH
42577: LD_VAR 0 2
42581: EQUAL
42582: IFFALSE 42609
// result := Insert ( result , 1 , un ) else
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_VAR 0 3
42593: PPUSH
42594: LD_INT 1
42596: PPUSH
42597: LD_VAR 0 4
42601: PPUSH
42602: CALL_OW 2
42606: ST_TO_ADDR
42607: GO 42638
// result := Replace ( result , result + 1 , un ) ;
42609: LD_ADDR_VAR 0 3
42613: PUSH
42614: LD_VAR 0 3
42618: PPUSH
42619: LD_VAR 0 3
42623: PUSH
42624: LD_INT 1
42626: PLUS
42627: PPUSH
42628: LD_VAR 0 4
42632: PPUSH
42633: CALL_OW 1
42637: ST_TO_ADDR
42638: GO 42564
42640: POP
42641: POP
// end ; end_of_file
42642: LD_VAR 0 3
42646: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
42647: LD_VAR 0 1
42651: PUSH
42652: LD_INT 200
42654: DOUBLE
42655: GREATEREQUAL
42656: IFFALSE 42664
42658: LD_INT 299
42660: DOUBLE
42661: LESSEQUAL
42662: IFTRUE 42666
42664: GO 42698
42666: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
42667: LD_VAR 0 1
42671: PPUSH
42672: LD_VAR 0 2
42676: PPUSH
42677: LD_VAR 0 3
42681: PPUSH
42682: LD_VAR 0 4
42686: PPUSH
42687: LD_VAR 0 5
42691: PPUSH
42692: CALL 42942 0 5
42696: GO 42775
42698: LD_INT 300
42700: DOUBLE
42701: GREATEREQUAL
42702: IFFALSE 42710
42704: LD_INT 399
42706: DOUBLE
42707: LESSEQUAL
42708: IFTRUE 42712
42710: GO 42774
42712: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
42713: LD_VAR 0 1
42717: PPUSH
42718: LD_VAR 0 2
42722: PPUSH
42723: LD_VAR 0 3
42727: PPUSH
42728: LD_VAR 0 4
42732: PPUSH
42733: LD_VAR 0 5
42737: PPUSH
42738: LD_VAR 0 6
42742: PPUSH
42743: LD_VAR 0 7
42747: PPUSH
42748: LD_VAR 0 8
42752: PPUSH
42753: LD_VAR 0 9
42757: PPUSH
42758: LD_VAR 0 10
42762: PPUSH
42763: LD_VAR 0 11
42767: PPUSH
42768: CALL 58017 0 11
42772: GO 42775
42774: POP
// end ;
42775: PPOPN 11
42777: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
42778: LD_VAR 0 1
42782: PPUSH
42783: LD_VAR 0 2
42787: PPUSH
42788: LD_VAR 0 3
42792: PPUSH
42793: LD_VAR 0 4
42797: PPUSH
42798: LD_VAR 0 5
42802: PPUSH
42803: CALL 42924 0 5
// end ; end_of_file
42807: PPOPN 5
42809: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42810: LD_INT 0
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42816: LD_VAR 0 1
42820: PPUSH
42821: CALL_OW 264
42825: PUSH
42826: LD_EXP 90
42830: EQUAL
42831: IFFALSE 42903
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42833: LD_INT 68
42835: PPUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 255
42845: PPUSH
42846: CALL_OW 321
42850: PUSH
42851: LD_INT 2
42853: EQUAL
42854: IFFALSE 42866
// eff := 70 else
42856: LD_ADDR_VAR 0 4
42860: PUSH
42861: LD_INT 70
42863: ST_TO_ADDR
42864: GO 42874
// eff := 30 ;
42866: LD_ADDR_VAR 0 4
42870: PUSH
42871: LD_INT 30
42873: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
42874: LD_VAR 0 1
42878: PPUSH
42879: CALL_OW 250
42883: PPUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 251
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: CALL_OW 495
// end ; end ;
42903: LD_VAR 0 2
42907: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
42908: LD_INT 0
42910: PPUSH
// end ;
42911: LD_VAR 0 4
42915: RET
// export function SOS_Command ( cmd ) ; begin
42916: LD_INT 0
42918: PPUSH
// end ;
42919: LD_VAR 0 2
42923: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
42924: LD_INT 0
42926: PPUSH
// if cmd = 121 then
42927: LD_VAR 0 1
42931: PUSH
42932: LD_INT 121
42934: EQUAL
42935: IFFALSE 42937
// end ;
42937: LD_VAR 0 6
42941: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
42942: LD_INT 0
42944: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
42945: LD_VAR 0 1
42949: PUSH
42950: LD_INT 250
42952: EQUAL
42953: PUSH
42954: LD_VAR 0 2
42958: PPUSH
42959: CALL_OW 264
42963: PUSH
42964: LD_EXP 93
42968: EQUAL
42969: AND
42970: IFFALSE 42991
// MinerPlaceMine ( unit , x , y ) ;
42972: LD_VAR 0 2
42976: PPUSH
42977: LD_VAR 0 4
42981: PPUSH
42982: LD_VAR 0 5
42986: PPUSH
42987: CALL 45340 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
42991: LD_VAR 0 1
42995: PUSH
42996: LD_INT 251
42998: EQUAL
42999: PUSH
43000: LD_VAR 0 2
43004: PPUSH
43005: CALL_OW 264
43009: PUSH
43010: LD_EXP 93
43014: EQUAL
43015: AND
43016: IFFALSE 43037
// MinerDetonateMine ( unit , x , y ) ;
43018: LD_VAR 0 2
43022: PPUSH
43023: LD_VAR 0 4
43027: PPUSH
43028: LD_VAR 0 5
43032: PPUSH
43033: CALL 45617 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43037: LD_VAR 0 1
43041: PUSH
43042: LD_INT 252
43044: EQUAL
43045: PUSH
43046: LD_VAR 0 2
43050: PPUSH
43051: CALL_OW 264
43055: PUSH
43056: LD_EXP 93
43060: EQUAL
43061: AND
43062: IFFALSE 43083
// MinerCreateMinefield ( unit , x , y ) ;
43064: LD_VAR 0 2
43068: PPUSH
43069: LD_VAR 0 4
43073: PPUSH
43074: LD_VAR 0 5
43078: PPUSH
43079: CALL 46034 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43083: LD_VAR 0 1
43087: PUSH
43088: LD_INT 253
43090: EQUAL
43091: PUSH
43092: LD_VAR 0 2
43096: PPUSH
43097: CALL_OW 257
43101: PUSH
43102: LD_INT 5
43104: EQUAL
43105: AND
43106: IFFALSE 43127
// ComBinocular ( unit , x , y ) ;
43108: LD_VAR 0 2
43112: PPUSH
43113: LD_VAR 0 4
43117: PPUSH
43118: LD_VAR 0 5
43122: PPUSH
43123: CALL 46405 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43127: LD_VAR 0 1
43131: PUSH
43132: LD_INT 254
43134: EQUAL
43135: PUSH
43136: LD_VAR 0 2
43140: PPUSH
43141: CALL_OW 264
43145: PUSH
43146: LD_EXP 88
43150: EQUAL
43151: AND
43152: PUSH
43153: LD_VAR 0 3
43157: PPUSH
43158: CALL_OW 263
43162: PUSH
43163: LD_INT 3
43165: EQUAL
43166: AND
43167: IFFALSE 43183
// HackDestroyVehicle ( unit , selectedUnit ) ;
43169: LD_VAR 0 2
43173: PPUSH
43174: LD_VAR 0 3
43178: PPUSH
43179: CALL 44700 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43183: LD_VAR 0 1
43187: PUSH
43188: LD_INT 255
43190: EQUAL
43191: PUSH
43192: LD_VAR 0 2
43196: PPUSH
43197: CALL_OW 264
43201: PUSH
43202: LD_INT 14
43204: PUSH
43205: LD_INT 53
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: IN
43212: AND
43213: PUSH
43214: LD_VAR 0 4
43218: PPUSH
43219: LD_VAR 0 5
43223: PPUSH
43224: CALL_OW 488
43228: AND
43229: IFFALSE 43253
// CutTreeXYR ( unit , x , y , 12 ) ;
43231: LD_VAR 0 2
43235: PPUSH
43236: LD_VAR 0 4
43240: PPUSH
43241: LD_VAR 0 5
43245: PPUSH
43246: LD_INT 12
43248: PPUSH
43249: CALL 43266 0 4
// end ;
43253: LD_VAR 0 6
43257: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
43258: LD_INT 0
43260: PPUSH
// end ;
43261: LD_VAR 0 4
43265: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43266: LD_INT 0
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43277: LD_VAR 0 1
43281: NOT
43282: PUSH
43283: LD_VAR 0 2
43287: PPUSH
43288: LD_VAR 0 3
43292: PPUSH
43293: CALL_OW 488
43297: NOT
43298: OR
43299: PUSH
43300: LD_VAR 0 4
43304: NOT
43305: OR
43306: IFFALSE 43310
// exit ;
43308: GO 43650
// list := [ ] ;
43310: LD_ADDR_VAR 0 13
43314: PUSH
43315: EMPTY
43316: ST_TO_ADDR
// if x - r < 0 then
43317: LD_VAR 0 2
43321: PUSH
43322: LD_VAR 0 4
43326: MINUS
43327: PUSH
43328: LD_INT 0
43330: LESS
43331: IFFALSE 43343
// min_x := 0 else
43333: LD_ADDR_VAR 0 7
43337: PUSH
43338: LD_INT 0
43340: ST_TO_ADDR
43341: GO 43359
// min_x := x - r ;
43343: LD_ADDR_VAR 0 7
43347: PUSH
43348: LD_VAR 0 2
43352: PUSH
43353: LD_VAR 0 4
43357: MINUS
43358: ST_TO_ADDR
// if y - r < 0 then
43359: LD_VAR 0 3
43363: PUSH
43364: LD_VAR 0 4
43368: MINUS
43369: PUSH
43370: LD_INT 0
43372: LESS
43373: IFFALSE 43385
// min_y := 0 else
43375: LD_ADDR_VAR 0 8
43379: PUSH
43380: LD_INT 0
43382: ST_TO_ADDR
43383: GO 43401
// min_y := y - r ;
43385: LD_ADDR_VAR 0 8
43389: PUSH
43390: LD_VAR 0 3
43394: PUSH
43395: LD_VAR 0 4
43399: MINUS
43400: ST_TO_ADDR
// max_x := x + r ;
43401: LD_ADDR_VAR 0 9
43405: PUSH
43406: LD_VAR 0 2
43410: PUSH
43411: LD_VAR 0 4
43415: PLUS
43416: ST_TO_ADDR
// max_y := y + r ;
43417: LD_ADDR_VAR 0 10
43421: PUSH
43422: LD_VAR 0 3
43426: PUSH
43427: LD_VAR 0 4
43431: PLUS
43432: ST_TO_ADDR
// for _x = min_x to max_x do
43433: LD_ADDR_VAR 0 11
43437: PUSH
43438: DOUBLE
43439: LD_VAR 0 7
43443: DEC
43444: ST_TO_ADDR
43445: LD_VAR 0 9
43449: PUSH
43450: FOR_TO
43451: IFFALSE 43568
// for _y = min_y to max_y do
43453: LD_ADDR_VAR 0 12
43457: PUSH
43458: DOUBLE
43459: LD_VAR 0 8
43463: DEC
43464: ST_TO_ADDR
43465: LD_VAR 0 10
43469: PUSH
43470: FOR_TO
43471: IFFALSE 43564
// begin if not ValidHex ( _x , _y ) then
43473: LD_VAR 0 11
43477: PPUSH
43478: LD_VAR 0 12
43482: PPUSH
43483: CALL_OW 488
43487: NOT
43488: IFFALSE 43492
// continue ;
43490: GO 43470
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43492: LD_VAR 0 11
43496: PPUSH
43497: LD_VAR 0 12
43501: PPUSH
43502: CALL_OW 351
43506: PUSH
43507: LD_VAR 0 11
43511: PPUSH
43512: LD_VAR 0 12
43516: PPUSH
43517: CALL_OW 554
43521: AND
43522: IFFALSE 43562
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43524: LD_ADDR_VAR 0 13
43528: PUSH
43529: LD_VAR 0 13
43533: PPUSH
43534: LD_VAR 0 13
43538: PUSH
43539: LD_INT 1
43541: PLUS
43542: PPUSH
43543: LD_VAR 0 11
43547: PUSH
43548: LD_VAR 0 12
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PPUSH
43557: CALL_OW 2
43561: ST_TO_ADDR
// end ;
43562: GO 43470
43564: POP
43565: POP
43566: GO 43450
43568: POP
43569: POP
// if not list then
43570: LD_VAR 0 13
43574: NOT
43575: IFFALSE 43579
// exit ;
43577: GO 43650
// for i in list do
43579: LD_ADDR_VAR 0 6
43583: PUSH
43584: LD_VAR 0 13
43588: PUSH
43589: FOR_IN
43590: IFFALSE 43648
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43592: LD_VAR 0 1
43596: PPUSH
43597: LD_STRING M
43599: PUSH
43600: LD_VAR 0 6
43604: PUSH
43605: LD_INT 1
43607: ARRAY
43608: PUSH
43609: LD_VAR 0 6
43613: PUSH
43614: LD_INT 2
43616: ARRAY
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: EMPTY
43640: LIST
43641: PPUSH
43642: CALL_OW 447
43646: GO 43589
43648: POP
43649: POP
// end ;
43650: LD_VAR 0 5
43654: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43655: LD_EXP 21
43659: NOT
43660: IFFALSE 43710
43662: GO 43664
43664: DISABLE
// begin initHack := true ;
43665: LD_ADDR_EXP 21
43669: PUSH
43670: LD_INT 1
43672: ST_TO_ADDR
// hackTanks := [ ] ;
43673: LD_ADDR_EXP 22
43677: PUSH
43678: EMPTY
43679: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43680: LD_ADDR_EXP 23
43684: PUSH
43685: EMPTY
43686: ST_TO_ADDR
// hackLimit := 3 ;
43687: LD_ADDR_EXP 24
43691: PUSH
43692: LD_INT 3
43694: ST_TO_ADDR
// hackDist := 12 ;
43695: LD_ADDR_EXP 25
43699: PUSH
43700: LD_INT 12
43702: ST_TO_ADDR
// hackCounter := [ ] ;
43703: LD_ADDR_EXP 26
43707: PUSH
43708: EMPTY
43709: ST_TO_ADDR
// end ;
43710: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43711: LD_EXP 21
43715: PUSH
43716: LD_INT 34
43718: PUSH
43719: LD_EXP 88
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PPUSH
43728: CALL_OW 69
43732: AND
43733: IFFALSE 43988
43735: GO 43737
43737: DISABLE
43738: LD_INT 0
43740: PPUSH
43741: PPUSH
// begin enable ;
43742: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43743: LD_ADDR_VAR 0 1
43747: PUSH
43748: LD_INT 34
43750: PUSH
43751: LD_EXP 88
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PPUSH
43760: CALL_OW 69
43764: PUSH
43765: FOR_IN
43766: IFFALSE 43986
// begin if not i in hackTanks then
43768: LD_VAR 0 1
43772: PUSH
43773: LD_EXP 22
43777: IN
43778: NOT
43779: IFFALSE 43862
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43781: LD_ADDR_EXP 22
43785: PUSH
43786: LD_EXP 22
43790: PPUSH
43791: LD_EXP 22
43795: PUSH
43796: LD_INT 1
43798: PLUS
43799: PPUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: CALL_OW 1
43809: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43810: LD_ADDR_EXP 23
43814: PUSH
43815: LD_EXP 23
43819: PPUSH
43820: LD_EXP 23
43824: PUSH
43825: LD_INT 1
43827: PLUS
43828: PPUSH
43829: EMPTY
43830: PPUSH
43831: CALL_OW 1
43835: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43836: LD_ADDR_EXP 26
43840: PUSH
43841: LD_EXP 26
43845: PPUSH
43846: LD_EXP 26
43850: PUSH
43851: LD_INT 1
43853: PLUS
43854: PPUSH
43855: EMPTY
43856: PPUSH
43857: CALL_OW 1
43861: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 302
43871: NOT
43872: IFFALSE 43885
// begin HackUnlinkAll ( i ) ;
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL 43991 0 1
// continue ;
43883: GO 43765
// end ; HackCheckCapturedStatus ( i ) ;
43885: LD_VAR 0 1
43889: PPUSH
43890: CALL 44434 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43894: LD_ADDR_VAR 0 2
43898: PUSH
43899: LD_INT 81
43901: PUSH
43902: LD_VAR 0 1
43906: PPUSH
43907: CALL_OW 255
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 33
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 91
43928: PUSH
43929: LD_VAR 0 1
43933: PUSH
43934: LD_EXP 25
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 50
43946: PUSH
43947: EMPTY
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: PPUSH
43956: CALL_OW 69
43960: ST_TO_ADDR
// if not tmp then
43961: LD_VAR 0 2
43965: NOT
43966: IFFALSE 43970
// continue ;
43968: GO 43765
// HackLink ( i , tmp ) ;
43970: LD_VAR 0 1
43974: PPUSH
43975: LD_VAR 0 2
43979: PPUSH
43980: CALL 44127 0 2
// end ;
43984: GO 43765
43986: POP
43987: POP
// end ;
43988: PPOPN 2
43990: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43991: LD_INT 0
43993: PPUSH
43994: PPUSH
43995: PPUSH
// if not hack in hackTanks then
43996: LD_VAR 0 1
44000: PUSH
44001: LD_EXP 22
44005: IN
44006: NOT
44007: IFFALSE 44011
// exit ;
44009: GO 44122
// index := GetElementIndex ( hackTanks , hack ) ;
44011: LD_ADDR_VAR 0 4
44015: PUSH
44016: LD_EXP 22
44020: PPUSH
44021: LD_VAR 0 1
44025: PPUSH
44026: CALL 8544 0 2
44030: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44031: LD_EXP 23
44035: PUSH
44036: LD_VAR 0 4
44040: ARRAY
44041: IFFALSE 44122
// begin for i in hackTanksCaptured [ index ] do
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_EXP 23
44052: PUSH
44053: LD_VAR 0 4
44057: ARRAY
44058: PUSH
44059: FOR_IN
44060: IFFALSE 44086
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44062: LD_VAR 0 3
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: PPUSH
44071: LD_VAR 0 3
44075: PUSH
44076: LD_INT 2
44078: ARRAY
44079: PPUSH
44080: CALL_OW 235
44084: GO 44059
44086: POP
44087: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44088: LD_ADDR_EXP 23
44092: PUSH
44093: LD_EXP 23
44097: PPUSH
44098: LD_VAR 0 4
44102: PPUSH
44103: EMPTY
44104: PPUSH
44105: CALL_OW 1
44109: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44110: LD_VAR 0 1
44114: PPUSH
44115: LD_INT 0
44117: PPUSH
44118: CALL_OW 505
// end ; end ;
44122: LD_VAR 0 2
44126: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44127: LD_INT 0
44129: PPUSH
44130: PPUSH
44131: PPUSH
// if not hack in hackTanks or not vehicles then
44132: LD_VAR 0 1
44136: PUSH
44137: LD_EXP 22
44141: IN
44142: NOT
44143: PUSH
44144: LD_VAR 0 2
44148: NOT
44149: OR
44150: IFFALSE 44154
// exit ;
44152: GO 44429
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44154: LD_ADDR_VAR 0 2
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: LD_VAR 0 2
44168: PPUSH
44169: LD_INT 1
44171: PPUSH
44172: LD_INT 1
44174: PPUSH
44175: CALL 9194 0 4
44179: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44180: LD_ADDR_VAR 0 5
44184: PUSH
44185: LD_EXP 22
44189: PPUSH
44190: LD_VAR 0 1
44194: PPUSH
44195: CALL 8544 0 2
44199: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44200: LD_EXP 23
44204: PUSH
44205: LD_VAR 0 5
44209: ARRAY
44210: PUSH
44211: LD_EXP 24
44215: LESS
44216: IFFALSE 44405
// begin for i := 1 to vehicles do
44218: LD_ADDR_VAR 0 4
44222: PUSH
44223: DOUBLE
44224: LD_INT 1
44226: DEC
44227: ST_TO_ADDR
44228: LD_VAR 0 2
44232: PUSH
44233: FOR_TO
44234: IFFALSE 44403
// begin if hackTanksCaptured [ index ] = hackLimit then
44236: LD_EXP 23
44240: PUSH
44241: LD_VAR 0 5
44245: ARRAY
44246: PUSH
44247: LD_EXP 24
44251: EQUAL
44252: IFFALSE 44256
// break ;
44254: GO 44403
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44256: LD_ADDR_EXP 26
44260: PUSH
44261: LD_EXP 26
44265: PPUSH
44266: LD_VAR 0 5
44270: PPUSH
44271: LD_EXP 26
44275: PUSH
44276: LD_VAR 0 5
44280: ARRAY
44281: PUSH
44282: LD_INT 1
44284: PLUS
44285: PPUSH
44286: CALL_OW 1
44290: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44291: LD_ADDR_EXP 23
44295: PUSH
44296: LD_EXP 23
44300: PPUSH
44301: LD_VAR 0 5
44305: PUSH
44306: LD_EXP 23
44310: PUSH
44311: LD_VAR 0 5
44315: ARRAY
44316: PUSH
44317: LD_INT 1
44319: PLUS
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PPUSH
44325: LD_VAR 0 2
44329: PUSH
44330: LD_VAR 0 4
44334: ARRAY
44335: PUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_VAR 0 4
44345: ARRAY
44346: PPUSH
44347: CALL_OW 255
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PPUSH
44356: CALL 8759 0 3
44360: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44361: LD_VAR 0 2
44365: PUSH
44366: LD_VAR 0 4
44370: ARRAY
44371: PPUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 255
44381: PPUSH
44382: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44386: LD_VAR 0 2
44390: PUSH
44391: LD_VAR 0 4
44395: ARRAY
44396: PPUSH
44397: CALL_OW 141
// end ;
44401: GO 44233
44403: POP
44404: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44405: LD_VAR 0 1
44409: PPUSH
44410: LD_EXP 23
44414: PUSH
44415: LD_VAR 0 5
44419: ARRAY
44420: PUSH
44421: LD_INT 0
44423: PLUS
44424: PPUSH
44425: CALL_OW 505
// end ;
44429: LD_VAR 0 3
44433: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44434: LD_INT 0
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
// if not hack in hackTanks then
44440: LD_VAR 0 1
44444: PUSH
44445: LD_EXP 22
44449: IN
44450: NOT
44451: IFFALSE 44455
// exit ;
44453: GO 44695
// index := GetElementIndex ( hackTanks , hack ) ;
44455: LD_ADDR_VAR 0 4
44459: PUSH
44460: LD_EXP 22
44464: PPUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL 8544 0 2
44474: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44475: LD_ADDR_VAR 0 3
44479: PUSH
44480: DOUBLE
44481: LD_EXP 23
44485: PUSH
44486: LD_VAR 0 4
44490: ARRAY
44491: INC
44492: ST_TO_ADDR
44493: LD_INT 1
44495: PUSH
44496: FOR_DOWNTO
44497: IFFALSE 44669
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44499: LD_ADDR_VAR 0 5
44503: PUSH
44504: LD_EXP 23
44508: PUSH
44509: LD_VAR 0 4
44513: ARRAY
44514: PUSH
44515: LD_VAR 0 3
44519: ARRAY
44520: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44521: LD_VAR 0 5
44525: PUSH
44526: LD_INT 1
44528: ARRAY
44529: PPUSH
44530: CALL_OW 302
44534: NOT
44535: PUSH
44536: LD_VAR 0 5
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: PPUSH
44545: CALL_OW 255
44549: PUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: CALL_OW 255
44559: NONEQUAL
44560: OR
44561: IFFALSE 44667
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44563: LD_VAR 0 5
44567: PUSH
44568: LD_INT 1
44570: ARRAY
44571: PPUSH
44572: CALL_OW 305
44576: PUSH
44577: LD_VAR 0 5
44581: PUSH
44582: LD_INT 1
44584: ARRAY
44585: PPUSH
44586: CALL_OW 255
44590: PUSH
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 255
44600: EQUAL
44601: AND
44602: IFFALSE 44626
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44604: LD_VAR 0 5
44608: PUSH
44609: LD_INT 1
44611: ARRAY
44612: PPUSH
44613: LD_VAR 0 5
44617: PUSH
44618: LD_INT 2
44620: ARRAY
44621: PPUSH
44622: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44626: LD_ADDR_EXP 23
44630: PUSH
44631: LD_EXP 23
44635: PPUSH
44636: LD_VAR 0 4
44640: PPUSH
44641: LD_EXP 23
44645: PUSH
44646: LD_VAR 0 4
44650: ARRAY
44651: PPUSH
44652: LD_VAR 0 3
44656: PPUSH
44657: CALL_OW 3
44661: PPUSH
44662: CALL_OW 1
44666: ST_TO_ADDR
// end ; end ;
44667: GO 44496
44669: POP
44670: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44671: LD_VAR 0 1
44675: PPUSH
44676: LD_EXP 23
44680: PUSH
44681: LD_VAR 0 4
44685: ARRAY
44686: PUSH
44687: LD_INT 0
44689: PLUS
44690: PPUSH
44691: CALL_OW 505
// end ;
44695: LD_VAR 0 2
44699: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44700: LD_INT 0
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
// if not hack in hackTanks then
44706: LD_VAR 0 1
44710: PUSH
44711: LD_EXP 22
44715: IN
44716: NOT
44717: IFFALSE 44721
// exit ;
44719: GO 44806
// index := GetElementIndex ( hackTanks , hack ) ;
44721: LD_ADDR_VAR 0 5
44725: PUSH
44726: LD_EXP 22
44730: PPUSH
44731: LD_VAR 0 1
44735: PPUSH
44736: CALL 8544 0 2
44740: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44741: LD_ADDR_VAR 0 4
44745: PUSH
44746: DOUBLE
44747: LD_INT 1
44749: DEC
44750: ST_TO_ADDR
44751: LD_EXP 23
44755: PUSH
44756: LD_VAR 0 5
44760: ARRAY
44761: PUSH
44762: FOR_TO
44763: IFFALSE 44804
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44765: LD_EXP 23
44769: PUSH
44770: LD_VAR 0 5
44774: ARRAY
44775: PUSH
44776: LD_VAR 0 4
44780: ARRAY
44781: PUSH
44782: LD_INT 1
44784: ARRAY
44785: PUSH
44786: LD_VAR 0 2
44790: EQUAL
44791: IFFALSE 44802
// KillUnit ( vehicle ) ;
44793: LD_VAR 0 2
44797: PPUSH
44798: CALL_OW 66
44802: GO 44762
44804: POP
44805: POP
// end ;
44806: LD_VAR 0 3
44810: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44811: LD_EXP 27
44815: NOT
44816: IFFALSE 44851
44818: GO 44820
44820: DISABLE
// begin initMiner := true ;
44821: LD_ADDR_EXP 27
44825: PUSH
44826: LD_INT 1
44828: ST_TO_ADDR
// minersList := [ ] ;
44829: LD_ADDR_EXP 28
44833: PUSH
44834: EMPTY
44835: ST_TO_ADDR
// minerMinesList := [ ] ;
44836: LD_ADDR_EXP 29
44840: PUSH
44841: EMPTY
44842: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44843: LD_ADDR_EXP 30
44847: PUSH
44848: LD_INT 5
44850: ST_TO_ADDR
// end ;
44851: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44852: LD_EXP 27
44856: PUSH
44857: LD_INT 34
44859: PUSH
44860: LD_EXP 93
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PPUSH
44869: CALL_OW 69
44873: AND
44874: IFFALSE 45337
44876: GO 44878
44878: DISABLE
44879: LD_INT 0
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
// begin enable ;
44885: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44886: LD_ADDR_VAR 0 1
44890: PUSH
44891: LD_INT 34
44893: PUSH
44894: LD_EXP 93
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PPUSH
44903: CALL_OW 69
44907: PUSH
44908: FOR_IN
44909: IFFALSE 44981
// begin if not i in minersList then
44911: LD_VAR 0 1
44915: PUSH
44916: LD_EXP 28
44920: IN
44921: NOT
44922: IFFALSE 44979
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44924: LD_ADDR_EXP 28
44928: PUSH
44929: LD_EXP 28
44933: PPUSH
44934: LD_EXP 28
44938: PUSH
44939: LD_INT 1
44941: PLUS
44942: PPUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: CALL_OW 1
44952: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44953: LD_ADDR_EXP 29
44957: PUSH
44958: LD_EXP 29
44962: PPUSH
44963: LD_EXP 29
44967: PUSH
44968: LD_INT 1
44970: PLUS
44971: PPUSH
44972: EMPTY
44973: PPUSH
44974: CALL_OW 1
44978: ST_TO_ADDR
// end end ;
44979: GO 44908
44981: POP
44982: POP
// for i := minerMinesList downto 1 do
44983: LD_ADDR_VAR 0 1
44987: PUSH
44988: DOUBLE
44989: LD_EXP 29
44993: INC
44994: ST_TO_ADDR
44995: LD_INT 1
44997: PUSH
44998: FOR_DOWNTO
44999: IFFALSE 45335
// begin if IsLive ( minersList [ i ] ) then
45001: LD_EXP 28
45005: PUSH
45006: LD_VAR 0 1
45010: ARRAY
45011: PPUSH
45012: CALL_OW 300
45016: IFFALSE 45044
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45018: LD_EXP 28
45022: PUSH
45023: LD_VAR 0 1
45027: ARRAY
45028: PPUSH
45029: LD_EXP 29
45033: PUSH
45034: LD_VAR 0 1
45038: ARRAY
45039: PPUSH
45040: CALL_OW 505
// if not minerMinesList [ i ] then
45044: LD_EXP 29
45048: PUSH
45049: LD_VAR 0 1
45053: ARRAY
45054: NOT
45055: IFFALSE 45059
// continue ;
45057: GO 44998
// for j := minerMinesList [ i ] downto 1 do
45059: LD_ADDR_VAR 0 2
45063: PUSH
45064: DOUBLE
45065: LD_EXP 29
45069: PUSH
45070: LD_VAR 0 1
45074: ARRAY
45075: INC
45076: ST_TO_ADDR
45077: LD_INT 1
45079: PUSH
45080: FOR_DOWNTO
45081: IFFALSE 45331
// begin side := GetSide ( minersList [ i ] ) ;
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_EXP 28
45092: PUSH
45093: LD_VAR 0 1
45097: ARRAY
45098: PPUSH
45099: CALL_OW 255
45103: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45104: LD_ADDR_VAR 0 4
45108: PUSH
45109: LD_EXP 29
45113: PUSH
45114: LD_VAR 0 1
45118: ARRAY
45119: PUSH
45120: LD_VAR 0 2
45124: ARRAY
45125: PUSH
45126: LD_INT 1
45128: ARRAY
45129: PPUSH
45130: LD_EXP 29
45134: PUSH
45135: LD_VAR 0 1
45139: ARRAY
45140: PUSH
45141: LD_VAR 0 2
45145: ARRAY
45146: PUSH
45147: LD_INT 2
45149: ARRAY
45150: PPUSH
45151: CALL_OW 428
45155: ST_TO_ADDR
// if not tmp then
45156: LD_VAR 0 4
45160: NOT
45161: IFFALSE 45165
// continue ;
45163: GO 45080
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45165: LD_VAR 0 4
45169: PUSH
45170: LD_INT 81
45172: PUSH
45173: LD_VAR 0 3
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PPUSH
45182: CALL_OW 69
45186: IN
45187: PUSH
45188: LD_EXP 29
45192: PUSH
45193: LD_VAR 0 1
45197: ARRAY
45198: PUSH
45199: LD_VAR 0 2
45203: ARRAY
45204: PUSH
45205: LD_INT 1
45207: ARRAY
45208: PPUSH
45209: LD_EXP 29
45213: PUSH
45214: LD_VAR 0 1
45218: ARRAY
45219: PUSH
45220: LD_VAR 0 2
45224: ARRAY
45225: PUSH
45226: LD_INT 2
45228: ARRAY
45229: PPUSH
45230: CALL_OW 458
45234: AND
45235: IFFALSE 45329
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45237: LD_EXP 29
45241: PUSH
45242: LD_VAR 0 1
45246: ARRAY
45247: PUSH
45248: LD_VAR 0 2
45252: ARRAY
45253: PUSH
45254: LD_INT 1
45256: ARRAY
45257: PPUSH
45258: LD_EXP 29
45262: PUSH
45263: LD_VAR 0 1
45267: ARRAY
45268: PUSH
45269: LD_VAR 0 2
45273: ARRAY
45274: PUSH
45275: LD_INT 2
45277: ARRAY
45278: PPUSH
45279: LD_VAR 0 3
45283: PPUSH
45284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45288: LD_ADDR_EXP 29
45292: PUSH
45293: LD_EXP 29
45297: PPUSH
45298: LD_VAR 0 1
45302: PPUSH
45303: LD_EXP 29
45307: PUSH
45308: LD_VAR 0 1
45312: ARRAY
45313: PPUSH
45314: LD_VAR 0 2
45318: PPUSH
45319: CALL_OW 3
45323: PPUSH
45324: CALL_OW 1
45328: ST_TO_ADDR
// end ; end ;
45329: GO 45080
45331: POP
45332: POP
// end ;
45333: GO 44998
45335: POP
45336: POP
// end ;
45337: PPOPN 4
45339: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45340: LD_INT 0
45342: PPUSH
45343: PPUSH
// result := false ;
45344: LD_ADDR_VAR 0 4
45348: PUSH
45349: LD_INT 0
45351: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45352: LD_VAR 0 1
45356: PPUSH
45357: CALL_OW 264
45361: PUSH
45362: LD_EXP 93
45366: EQUAL
45367: NOT
45368: IFFALSE 45372
// exit ;
45370: GO 45612
// index := GetElementIndex ( minersList , unit ) ;
45372: LD_ADDR_VAR 0 5
45376: PUSH
45377: LD_EXP 28
45381: PPUSH
45382: LD_VAR 0 1
45386: PPUSH
45387: CALL 8544 0 2
45391: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45392: LD_EXP 29
45396: PUSH
45397: LD_VAR 0 5
45401: ARRAY
45402: PUSH
45403: LD_EXP 30
45407: GREATEREQUAL
45408: IFFALSE 45412
// exit ;
45410: GO 45612
// ComMoveXY ( unit , x , y ) ;
45412: LD_VAR 0 1
45416: PPUSH
45417: LD_VAR 0 2
45421: PPUSH
45422: LD_VAR 0 3
45426: PPUSH
45427: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45431: LD_INT 35
45433: PPUSH
45434: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45438: LD_VAR 0 1
45442: PPUSH
45443: LD_VAR 0 2
45447: PPUSH
45448: LD_VAR 0 3
45452: PPUSH
45453: CALL 39316 0 3
45457: NOT
45458: PUSH
45459: LD_VAR 0 1
45463: PPUSH
45464: CALL_OW 314
45468: AND
45469: IFFALSE 45473
// exit ;
45471: GO 45612
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45473: LD_VAR 0 2
45477: PPUSH
45478: LD_VAR 0 3
45482: PPUSH
45483: CALL_OW 428
45487: PUSH
45488: LD_VAR 0 1
45492: EQUAL
45493: PUSH
45494: LD_VAR 0 1
45498: PPUSH
45499: CALL_OW 314
45503: NOT
45504: AND
45505: IFFALSE 45431
// PlaySoundXY ( x , y , PlantMine ) ;
45507: LD_VAR 0 2
45511: PPUSH
45512: LD_VAR 0 3
45516: PPUSH
45517: LD_STRING PlantMine
45519: PPUSH
45520: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45524: LD_VAR 0 2
45528: PPUSH
45529: LD_VAR 0 3
45533: PPUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: CALL_OW 255
45543: PPUSH
45544: LD_INT 0
45546: PPUSH
45547: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45551: LD_ADDR_EXP 29
45555: PUSH
45556: LD_EXP 29
45560: PPUSH
45561: LD_VAR 0 5
45565: PUSH
45566: LD_EXP 29
45570: PUSH
45571: LD_VAR 0 5
45575: ARRAY
45576: PUSH
45577: LD_INT 1
45579: PLUS
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PPUSH
45585: LD_VAR 0 2
45589: PUSH
45590: LD_VAR 0 3
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PPUSH
45599: CALL 8759 0 3
45603: ST_TO_ADDR
// result := true ;
45604: LD_ADDR_VAR 0 4
45608: PUSH
45609: LD_INT 1
45611: ST_TO_ADDR
// end ;
45612: LD_VAR 0 4
45616: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45617: LD_INT 0
45619: PPUSH
45620: PPUSH
45621: PPUSH
// if not unit in minersList then
45622: LD_VAR 0 1
45626: PUSH
45627: LD_EXP 28
45631: IN
45632: NOT
45633: IFFALSE 45637
// exit ;
45635: GO 46029
// index := GetElementIndex ( minersList , unit ) ;
45637: LD_ADDR_VAR 0 6
45641: PUSH
45642: LD_EXP 28
45646: PPUSH
45647: LD_VAR 0 1
45651: PPUSH
45652: CALL 8544 0 2
45656: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45657: LD_ADDR_VAR 0 5
45661: PUSH
45662: DOUBLE
45663: LD_EXP 29
45667: PUSH
45668: LD_VAR 0 6
45672: ARRAY
45673: INC
45674: ST_TO_ADDR
45675: LD_INT 1
45677: PUSH
45678: FOR_DOWNTO
45679: IFFALSE 45840
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45681: LD_EXP 29
45685: PUSH
45686: LD_VAR 0 6
45690: ARRAY
45691: PUSH
45692: LD_VAR 0 5
45696: ARRAY
45697: PUSH
45698: LD_INT 1
45700: ARRAY
45701: PUSH
45702: LD_VAR 0 2
45706: EQUAL
45707: PUSH
45708: LD_EXP 29
45712: PUSH
45713: LD_VAR 0 6
45717: ARRAY
45718: PUSH
45719: LD_VAR 0 5
45723: ARRAY
45724: PUSH
45725: LD_INT 2
45727: ARRAY
45728: PUSH
45729: LD_VAR 0 3
45733: EQUAL
45734: AND
45735: IFFALSE 45838
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45737: LD_EXP 29
45741: PUSH
45742: LD_VAR 0 6
45746: ARRAY
45747: PUSH
45748: LD_VAR 0 5
45752: ARRAY
45753: PUSH
45754: LD_INT 1
45756: ARRAY
45757: PPUSH
45758: LD_EXP 29
45762: PUSH
45763: LD_VAR 0 6
45767: ARRAY
45768: PUSH
45769: LD_VAR 0 5
45773: ARRAY
45774: PUSH
45775: LD_INT 2
45777: ARRAY
45778: PPUSH
45779: LD_VAR 0 1
45783: PPUSH
45784: CALL_OW 255
45788: PPUSH
45789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45793: LD_ADDR_EXP 29
45797: PUSH
45798: LD_EXP 29
45802: PPUSH
45803: LD_VAR 0 6
45807: PPUSH
45808: LD_EXP 29
45812: PUSH
45813: LD_VAR 0 6
45817: ARRAY
45818: PPUSH
45819: LD_VAR 0 5
45823: PPUSH
45824: CALL_OW 3
45828: PPUSH
45829: CALL_OW 1
45833: ST_TO_ADDR
// exit ;
45834: POP
45835: POP
45836: GO 46029
// end ; end ;
45838: GO 45678
45840: POP
45841: POP
// for i := minerMinesList [ index ] downto 1 do
45842: LD_ADDR_VAR 0 5
45846: PUSH
45847: DOUBLE
45848: LD_EXP 29
45852: PUSH
45853: LD_VAR 0 6
45857: ARRAY
45858: INC
45859: ST_TO_ADDR
45860: LD_INT 1
45862: PUSH
45863: FOR_DOWNTO
45864: IFFALSE 46027
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45866: LD_EXP 29
45870: PUSH
45871: LD_VAR 0 6
45875: ARRAY
45876: PUSH
45877: LD_VAR 0 5
45881: ARRAY
45882: PUSH
45883: LD_INT 1
45885: ARRAY
45886: PPUSH
45887: LD_EXP 29
45891: PUSH
45892: LD_VAR 0 6
45896: ARRAY
45897: PUSH
45898: LD_VAR 0 5
45902: ARRAY
45903: PUSH
45904: LD_INT 2
45906: ARRAY
45907: PPUSH
45908: LD_VAR 0 2
45912: PPUSH
45913: LD_VAR 0 3
45917: PPUSH
45918: CALL_OW 298
45922: PUSH
45923: LD_INT 6
45925: LESS
45926: IFFALSE 46025
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45928: LD_EXP 29
45932: PUSH
45933: LD_VAR 0 6
45937: ARRAY
45938: PUSH
45939: LD_VAR 0 5
45943: ARRAY
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PPUSH
45949: LD_EXP 29
45953: PUSH
45954: LD_VAR 0 6
45958: ARRAY
45959: PUSH
45960: LD_VAR 0 5
45964: ARRAY
45965: PUSH
45966: LD_INT 2
45968: ARRAY
45969: PPUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: CALL_OW 255
45979: PPUSH
45980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45984: LD_ADDR_EXP 29
45988: PUSH
45989: LD_EXP 29
45993: PPUSH
45994: LD_VAR 0 6
45998: PPUSH
45999: LD_EXP 29
46003: PUSH
46004: LD_VAR 0 6
46008: ARRAY
46009: PPUSH
46010: LD_VAR 0 5
46014: PPUSH
46015: CALL_OW 3
46019: PPUSH
46020: CALL_OW 1
46024: ST_TO_ADDR
// end ; end ;
46025: GO 45863
46027: POP
46028: POP
// end ;
46029: LD_VAR 0 4
46033: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46034: LD_INT 0
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46045: LD_VAR 0 1
46049: PPUSH
46050: CALL_OW 264
46054: PUSH
46055: LD_EXP 93
46059: EQUAL
46060: NOT
46061: PUSH
46062: LD_VAR 0 1
46066: PUSH
46067: LD_EXP 28
46071: IN
46072: NOT
46073: OR
46074: IFFALSE 46078
// exit ;
46076: GO 46400
// index := GetElementIndex ( minersList , unit ) ;
46078: LD_ADDR_VAR 0 6
46082: PUSH
46083: LD_EXP 28
46087: PPUSH
46088: LD_VAR 0 1
46092: PPUSH
46093: CALL 8544 0 2
46097: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46098: LD_ADDR_VAR 0 8
46102: PUSH
46103: LD_EXP 30
46107: PUSH
46108: LD_EXP 29
46112: PUSH
46113: LD_VAR 0 6
46117: ARRAY
46118: MINUS
46119: ST_TO_ADDR
// if not minesFreeAmount then
46120: LD_VAR 0 8
46124: NOT
46125: IFFALSE 46129
// exit ;
46127: GO 46400
// tmp := [ ] ;
46129: LD_ADDR_VAR 0 7
46133: PUSH
46134: EMPTY
46135: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46136: LD_ADDR_VAR 0 5
46140: PUSH
46141: DOUBLE
46142: LD_INT 1
46144: DEC
46145: ST_TO_ADDR
46146: LD_VAR 0 8
46150: PUSH
46151: FOR_TO
46152: IFFALSE 46347
// begin _d := rand ( 0 , 5 ) ;
46154: LD_ADDR_VAR 0 11
46158: PUSH
46159: LD_INT 0
46161: PPUSH
46162: LD_INT 5
46164: PPUSH
46165: CALL_OW 12
46169: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46170: LD_ADDR_VAR 0 12
46174: PUSH
46175: LD_INT 2
46177: PPUSH
46178: LD_INT 6
46180: PPUSH
46181: CALL_OW 12
46185: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46186: LD_ADDR_VAR 0 9
46190: PUSH
46191: LD_VAR 0 2
46195: PPUSH
46196: LD_VAR 0 11
46200: PPUSH
46201: LD_VAR 0 12
46205: PPUSH
46206: CALL_OW 272
46210: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46211: LD_ADDR_VAR 0 10
46215: PUSH
46216: LD_VAR 0 3
46220: PPUSH
46221: LD_VAR 0 11
46225: PPUSH
46226: LD_VAR 0 12
46230: PPUSH
46231: CALL_OW 273
46235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46236: LD_VAR 0 9
46240: PPUSH
46241: LD_VAR 0 10
46245: PPUSH
46246: CALL_OW 488
46250: PUSH
46251: LD_VAR 0 9
46255: PUSH
46256: LD_VAR 0 10
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_VAR 0 7
46269: IN
46270: NOT
46271: AND
46272: PUSH
46273: LD_VAR 0 9
46277: PPUSH
46278: LD_VAR 0 10
46282: PPUSH
46283: CALL_OW 458
46287: NOT
46288: AND
46289: IFFALSE 46331
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46291: LD_ADDR_VAR 0 7
46295: PUSH
46296: LD_VAR 0 7
46300: PPUSH
46301: LD_VAR 0 7
46305: PUSH
46306: LD_INT 1
46308: PLUS
46309: PPUSH
46310: LD_VAR 0 9
46314: PUSH
46315: LD_VAR 0 10
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PPUSH
46324: CALL_OW 1
46328: ST_TO_ADDR
46329: GO 46345
// i := i - 1 ;
46331: LD_ADDR_VAR 0 5
46335: PUSH
46336: LD_VAR 0 5
46340: PUSH
46341: LD_INT 1
46343: MINUS
46344: ST_TO_ADDR
// end ;
46345: GO 46151
46347: POP
46348: POP
// for i in tmp do
46349: LD_ADDR_VAR 0 5
46353: PUSH
46354: LD_VAR 0 7
46358: PUSH
46359: FOR_IN
46360: IFFALSE 46398
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46362: LD_VAR 0 1
46366: PPUSH
46367: LD_VAR 0 5
46371: PUSH
46372: LD_INT 1
46374: ARRAY
46375: PPUSH
46376: LD_VAR 0 5
46380: PUSH
46381: LD_INT 2
46383: ARRAY
46384: PPUSH
46385: CALL 45340 0 3
46389: NOT
46390: IFFALSE 46396
// exit ;
46392: POP
46393: POP
46394: GO 46400
46396: GO 46359
46398: POP
46399: POP
// end ;
46400: LD_VAR 0 4
46404: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46405: LD_INT 0
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
// if not GetClass ( unit ) = class_sniper then
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 257
46423: PUSH
46424: LD_INT 5
46426: EQUAL
46427: NOT
46428: IFFALSE 46432
// exit ;
46430: GO 46820
// dist := 8 ;
46432: LD_ADDR_VAR 0 5
46436: PUSH
46437: LD_INT 8
46439: ST_TO_ADDR
// viewRange := 12 ;
46440: LD_ADDR_VAR 0 7
46444: PUSH
46445: LD_INT 12
46447: ST_TO_ADDR
// side := GetSide ( unit ) ;
46448: LD_ADDR_VAR 0 6
46452: PUSH
46453: LD_VAR 0 1
46457: PPUSH
46458: CALL_OW 255
46462: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46463: LD_INT 61
46465: PPUSH
46466: LD_VAR 0 6
46470: PPUSH
46471: CALL_OW 321
46475: PUSH
46476: LD_INT 2
46478: EQUAL
46479: IFFALSE 46489
// viewRange := 16 ;
46481: LD_ADDR_VAR 0 7
46485: PUSH
46486: LD_INT 16
46488: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46489: LD_VAR 0 1
46493: PPUSH
46494: LD_VAR 0 2
46498: PPUSH
46499: LD_VAR 0 3
46503: PPUSH
46504: CALL_OW 297
46508: PUSH
46509: LD_VAR 0 5
46513: GREATER
46514: IFFALSE 46593
// begin ComMoveXY ( unit , x , y ) ;
46516: LD_VAR 0 1
46520: PPUSH
46521: LD_VAR 0 2
46525: PPUSH
46526: LD_VAR 0 3
46530: PPUSH
46531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46535: LD_INT 35
46537: PPUSH
46538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46542: LD_VAR 0 1
46546: PPUSH
46547: LD_VAR 0 2
46551: PPUSH
46552: LD_VAR 0 3
46556: PPUSH
46557: CALL 39316 0 3
46561: NOT
46562: IFFALSE 46566
// exit ;
46564: GO 46820
// until GetDistUnitXY ( unit , x , y ) < dist ;
46566: LD_VAR 0 1
46570: PPUSH
46571: LD_VAR 0 2
46575: PPUSH
46576: LD_VAR 0 3
46580: PPUSH
46581: CALL_OW 297
46585: PUSH
46586: LD_VAR 0 5
46590: LESS
46591: IFFALSE 46535
// end ; ComTurnXY ( unit , x , y ) ;
46593: LD_VAR 0 1
46597: PPUSH
46598: LD_VAR 0 2
46602: PPUSH
46603: LD_VAR 0 3
46607: PPUSH
46608: CALL_OW 118
// wait ( 5 ) ;
46612: LD_INT 5
46614: PPUSH
46615: CALL_OW 67
// _d := GetDir ( unit ) ;
46619: LD_ADDR_VAR 0 10
46623: PUSH
46624: LD_VAR 0 1
46628: PPUSH
46629: CALL_OW 254
46633: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46634: LD_ADDR_VAR 0 8
46638: PUSH
46639: LD_VAR 0 1
46643: PPUSH
46644: CALL_OW 250
46648: PPUSH
46649: LD_VAR 0 10
46653: PPUSH
46654: LD_VAR 0 5
46658: PPUSH
46659: CALL_OW 272
46663: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46664: LD_ADDR_VAR 0 9
46668: PUSH
46669: LD_VAR 0 1
46673: PPUSH
46674: CALL_OW 251
46678: PPUSH
46679: LD_VAR 0 10
46683: PPUSH
46684: LD_VAR 0 5
46688: PPUSH
46689: CALL_OW 273
46693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46694: LD_VAR 0 8
46698: PPUSH
46699: LD_VAR 0 9
46703: PPUSH
46704: CALL_OW 488
46708: NOT
46709: IFFALSE 46713
// exit ;
46711: GO 46820
// ComAnimCustom ( unit , 1 ) ;
46713: LD_VAR 0 1
46717: PPUSH
46718: LD_INT 1
46720: PPUSH
46721: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46725: LD_VAR 0 8
46729: PPUSH
46730: LD_VAR 0 9
46734: PPUSH
46735: LD_VAR 0 6
46739: PPUSH
46740: LD_VAR 0 7
46744: PPUSH
46745: CALL_OW 330
// repeat wait ( 1 ) ;
46749: LD_INT 1
46751: PPUSH
46752: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46756: LD_VAR 0 1
46760: PPUSH
46761: CALL_OW 316
46765: PUSH
46766: LD_VAR 0 1
46770: PPUSH
46771: CALL_OW 314
46775: OR
46776: PUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 302
46786: NOT
46787: OR
46788: PUSH
46789: LD_VAR 0 1
46793: PPUSH
46794: CALL_OW 301
46798: OR
46799: IFFALSE 46749
// RemoveSeeing ( _x , _y , side ) ;
46801: LD_VAR 0 8
46805: PPUSH
46806: LD_VAR 0 9
46810: PPUSH
46811: LD_VAR 0 6
46815: PPUSH
46816: CALL_OW 331
// end ; end_of_file
46820: LD_VAR 0 4
46824: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46825: LD_INT 0
46827: PPUSH
// if p2 = 100 then
46828: LD_VAR 0 2
46832: PUSH
46833: LD_INT 100
46835: EQUAL
46836: IFFALSE 47785
// begin if not StreamModeActive then
46838: LD_EXP 31
46842: NOT
46843: IFFALSE 46853
// StreamModeActive := true ;
46845: LD_ADDR_EXP 31
46849: PUSH
46850: LD_INT 1
46852: ST_TO_ADDR
// if p3 = 0 then
46853: LD_VAR 0 3
46857: PUSH
46858: LD_INT 0
46860: EQUAL
46861: IFFALSE 46867
// InitStreamMode ;
46863: CALL 47945 0 0
// if p3 = 1 then
46867: LD_VAR 0 3
46871: PUSH
46872: LD_INT 1
46874: EQUAL
46875: IFFALSE 46885
// sRocket := true ;
46877: LD_ADDR_EXP 36
46881: PUSH
46882: LD_INT 1
46884: ST_TO_ADDR
// if p3 = 2 then
46885: LD_VAR 0 3
46889: PUSH
46890: LD_INT 2
46892: EQUAL
46893: IFFALSE 46903
// sSpeed := true ;
46895: LD_ADDR_EXP 35
46899: PUSH
46900: LD_INT 1
46902: ST_TO_ADDR
// if p3 = 3 then
46903: LD_VAR 0 3
46907: PUSH
46908: LD_INT 3
46910: EQUAL
46911: IFFALSE 46921
// sEngine := true ;
46913: LD_ADDR_EXP 37
46917: PUSH
46918: LD_INT 1
46920: ST_TO_ADDR
// if p3 = 4 then
46921: LD_VAR 0 3
46925: PUSH
46926: LD_INT 4
46928: EQUAL
46929: IFFALSE 46939
// sSpec := true ;
46931: LD_ADDR_EXP 34
46935: PUSH
46936: LD_INT 1
46938: ST_TO_ADDR
// if p3 = 5 then
46939: LD_VAR 0 3
46943: PUSH
46944: LD_INT 5
46946: EQUAL
46947: IFFALSE 46957
// sLevel := true ;
46949: LD_ADDR_EXP 38
46953: PUSH
46954: LD_INT 1
46956: ST_TO_ADDR
// if p3 = 6 then
46957: LD_VAR 0 3
46961: PUSH
46962: LD_INT 6
46964: EQUAL
46965: IFFALSE 46975
// sArmoury := true ;
46967: LD_ADDR_EXP 39
46971: PUSH
46972: LD_INT 1
46974: ST_TO_ADDR
// if p3 = 7 then
46975: LD_VAR 0 3
46979: PUSH
46980: LD_INT 7
46982: EQUAL
46983: IFFALSE 46993
// sRadar := true ;
46985: LD_ADDR_EXP 40
46989: PUSH
46990: LD_INT 1
46992: ST_TO_ADDR
// if p3 = 8 then
46993: LD_VAR 0 3
46997: PUSH
46998: LD_INT 8
47000: EQUAL
47001: IFFALSE 47011
// sBunker := true ;
47003: LD_ADDR_EXP 41
47007: PUSH
47008: LD_INT 1
47010: ST_TO_ADDR
// if p3 = 9 then
47011: LD_VAR 0 3
47015: PUSH
47016: LD_INT 9
47018: EQUAL
47019: IFFALSE 47029
// sHack := true ;
47021: LD_ADDR_EXP 42
47025: PUSH
47026: LD_INT 1
47028: ST_TO_ADDR
// if p3 = 10 then
47029: LD_VAR 0 3
47033: PUSH
47034: LD_INT 10
47036: EQUAL
47037: IFFALSE 47047
// sFire := true ;
47039: LD_ADDR_EXP 43
47043: PUSH
47044: LD_INT 1
47046: ST_TO_ADDR
// if p3 = 11 then
47047: LD_VAR 0 3
47051: PUSH
47052: LD_INT 11
47054: EQUAL
47055: IFFALSE 47065
// sRefresh := true ;
47057: LD_ADDR_EXP 44
47061: PUSH
47062: LD_INT 1
47064: ST_TO_ADDR
// if p3 = 12 then
47065: LD_VAR 0 3
47069: PUSH
47070: LD_INT 12
47072: EQUAL
47073: IFFALSE 47083
// sExp := true ;
47075: LD_ADDR_EXP 45
47079: PUSH
47080: LD_INT 1
47082: ST_TO_ADDR
// if p3 = 13 then
47083: LD_VAR 0 3
47087: PUSH
47088: LD_INT 13
47090: EQUAL
47091: IFFALSE 47101
// sDepot := true ;
47093: LD_ADDR_EXP 46
47097: PUSH
47098: LD_INT 1
47100: ST_TO_ADDR
// if p3 = 14 then
47101: LD_VAR 0 3
47105: PUSH
47106: LD_INT 14
47108: EQUAL
47109: IFFALSE 47119
// sFlag := true ;
47111: LD_ADDR_EXP 47
47115: PUSH
47116: LD_INT 1
47118: ST_TO_ADDR
// if p3 = 15 then
47119: LD_VAR 0 3
47123: PUSH
47124: LD_INT 15
47126: EQUAL
47127: IFFALSE 47137
// sKamikadze := true ;
47129: LD_ADDR_EXP 55
47133: PUSH
47134: LD_INT 1
47136: ST_TO_ADDR
// if p3 = 16 then
47137: LD_VAR 0 3
47141: PUSH
47142: LD_INT 16
47144: EQUAL
47145: IFFALSE 47155
// sTroll := true ;
47147: LD_ADDR_EXP 56
47151: PUSH
47152: LD_INT 1
47154: ST_TO_ADDR
// if p3 = 17 then
47155: LD_VAR 0 3
47159: PUSH
47160: LD_INT 17
47162: EQUAL
47163: IFFALSE 47173
// sSlow := true ;
47165: LD_ADDR_EXP 57
47169: PUSH
47170: LD_INT 1
47172: ST_TO_ADDR
// if p3 = 18 then
47173: LD_VAR 0 3
47177: PUSH
47178: LD_INT 18
47180: EQUAL
47181: IFFALSE 47191
// sLack := true ;
47183: LD_ADDR_EXP 58
47187: PUSH
47188: LD_INT 1
47190: ST_TO_ADDR
// if p3 = 19 then
47191: LD_VAR 0 3
47195: PUSH
47196: LD_INT 19
47198: EQUAL
47199: IFFALSE 47209
// sTank := true ;
47201: LD_ADDR_EXP 60
47205: PUSH
47206: LD_INT 1
47208: ST_TO_ADDR
// if p3 = 20 then
47209: LD_VAR 0 3
47213: PUSH
47214: LD_INT 20
47216: EQUAL
47217: IFFALSE 47227
// sRemote := true ;
47219: LD_ADDR_EXP 61
47223: PUSH
47224: LD_INT 1
47226: ST_TO_ADDR
// if p3 = 21 then
47227: LD_VAR 0 3
47231: PUSH
47232: LD_INT 21
47234: EQUAL
47235: IFFALSE 47245
// sPowell := true ;
47237: LD_ADDR_EXP 62
47241: PUSH
47242: LD_INT 1
47244: ST_TO_ADDR
// if p3 = 22 then
47245: LD_VAR 0 3
47249: PUSH
47250: LD_INT 22
47252: EQUAL
47253: IFFALSE 47263
// sTeleport := true ;
47255: LD_ADDR_EXP 65
47259: PUSH
47260: LD_INT 1
47262: ST_TO_ADDR
// if p3 = 23 then
47263: LD_VAR 0 3
47267: PUSH
47268: LD_INT 23
47270: EQUAL
47271: IFFALSE 47281
// sOilTower := true ;
47273: LD_ADDR_EXP 67
47277: PUSH
47278: LD_INT 1
47280: ST_TO_ADDR
// if p3 = 24 then
47281: LD_VAR 0 3
47285: PUSH
47286: LD_INT 24
47288: EQUAL
47289: IFFALSE 47299
// sShovel := true ;
47291: LD_ADDR_EXP 68
47295: PUSH
47296: LD_INT 1
47298: ST_TO_ADDR
// if p3 = 25 then
47299: LD_VAR 0 3
47303: PUSH
47304: LD_INT 25
47306: EQUAL
47307: IFFALSE 47317
// sSheik := true ;
47309: LD_ADDR_EXP 69
47313: PUSH
47314: LD_INT 1
47316: ST_TO_ADDR
// if p3 = 26 then
47317: LD_VAR 0 3
47321: PUSH
47322: LD_INT 26
47324: EQUAL
47325: IFFALSE 47335
// sEarthquake := true ;
47327: LD_ADDR_EXP 71
47331: PUSH
47332: LD_INT 1
47334: ST_TO_ADDR
// if p3 = 27 then
47335: LD_VAR 0 3
47339: PUSH
47340: LD_INT 27
47342: EQUAL
47343: IFFALSE 47353
// sAI := true ;
47345: LD_ADDR_EXP 72
47349: PUSH
47350: LD_INT 1
47352: ST_TO_ADDR
// if p3 = 28 then
47353: LD_VAR 0 3
47357: PUSH
47358: LD_INT 28
47360: EQUAL
47361: IFFALSE 47371
// sCargo := true ;
47363: LD_ADDR_EXP 75
47367: PUSH
47368: LD_INT 1
47370: ST_TO_ADDR
// if p3 = 29 then
47371: LD_VAR 0 3
47375: PUSH
47376: LD_INT 29
47378: EQUAL
47379: IFFALSE 47389
// sDLaser := true ;
47381: LD_ADDR_EXP 76
47385: PUSH
47386: LD_INT 1
47388: ST_TO_ADDR
// if p3 = 30 then
47389: LD_VAR 0 3
47393: PUSH
47394: LD_INT 30
47396: EQUAL
47397: IFFALSE 47407
// sExchange := true ;
47399: LD_ADDR_EXP 77
47403: PUSH
47404: LD_INT 1
47406: ST_TO_ADDR
// if p3 = 31 then
47407: LD_VAR 0 3
47411: PUSH
47412: LD_INT 31
47414: EQUAL
47415: IFFALSE 47425
// sFac := true ;
47417: LD_ADDR_EXP 78
47421: PUSH
47422: LD_INT 1
47424: ST_TO_ADDR
// if p3 = 32 then
47425: LD_VAR 0 3
47429: PUSH
47430: LD_INT 32
47432: EQUAL
47433: IFFALSE 47443
// sPower := true ;
47435: LD_ADDR_EXP 79
47439: PUSH
47440: LD_INT 1
47442: ST_TO_ADDR
// if p3 = 33 then
47443: LD_VAR 0 3
47447: PUSH
47448: LD_INT 33
47450: EQUAL
47451: IFFALSE 47461
// sRandom := true ;
47453: LD_ADDR_EXP 80
47457: PUSH
47458: LD_INT 1
47460: ST_TO_ADDR
// if p3 = 34 then
47461: LD_VAR 0 3
47465: PUSH
47466: LD_INT 34
47468: EQUAL
47469: IFFALSE 47479
// sShield := true ;
47471: LD_ADDR_EXP 81
47475: PUSH
47476: LD_INT 1
47478: ST_TO_ADDR
// if p3 = 35 then
47479: LD_VAR 0 3
47483: PUSH
47484: LD_INT 35
47486: EQUAL
47487: IFFALSE 47497
// sTime := true ;
47489: LD_ADDR_EXP 82
47493: PUSH
47494: LD_INT 1
47496: ST_TO_ADDR
// if p3 = 36 then
47497: LD_VAR 0 3
47501: PUSH
47502: LD_INT 36
47504: EQUAL
47505: IFFALSE 47515
// sTools := true ;
47507: LD_ADDR_EXP 83
47511: PUSH
47512: LD_INT 1
47514: ST_TO_ADDR
// if p3 = 101 then
47515: LD_VAR 0 3
47519: PUSH
47520: LD_INT 101
47522: EQUAL
47523: IFFALSE 47533
// sSold := true ;
47525: LD_ADDR_EXP 48
47529: PUSH
47530: LD_INT 1
47532: ST_TO_ADDR
// if p3 = 102 then
47533: LD_VAR 0 3
47537: PUSH
47538: LD_INT 102
47540: EQUAL
47541: IFFALSE 47551
// sDiff := true ;
47543: LD_ADDR_EXP 49
47547: PUSH
47548: LD_INT 1
47550: ST_TO_ADDR
// if p3 = 103 then
47551: LD_VAR 0 3
47555: PUSH
47556: LD_INT 103
47558: EQUAL
47559: IFFALSE 47569
// sFog := true ;
47561: LD_ADDR_EXP 52
47565: PUSH
47566: LD_INT 1
47568: ST_TO_ADDR
// if p3 = 104 then
47569: LD_VAR 0 3
47573: PUSH
47574: LD_INT 104
47576: EQUAL
47577: IFFALSE 47587
// sReset := true ;
47579: LD_ADDR_EXP 53
47583: PUSH
47584: LD_INT 1
47586: ST_TO_ADDR
// if p3 = 105 then
47587: LD_VAR 0 3
47591: PUSH
47592: LD_INT 105
47594: EQUAL
47595: IFFALSE 47605
// sSun := true ;
47597: LD_ADDR_EXP 54
47601: PUSH
47602: LD_INT 1
47604: ST_TO_ADDR
// if p3 = 106 then
47605: LD_VAR 0 3
47609: PUSH
47610: LD_INT 106
47612: EQUAL
47613: IFFALSE 47623
// sTiger := true ;
47615: LD_ADDR_EXP 50
47619: PUSH
47620: LD_INT 1
47622: ST_TO_ADDR
// if p3 = 107 then
47623: LD_VAR 0 3
47627: PUSH
47628: LD_INT 107
47630: EQUAL
47631: IFFALSE 47641
// sBomb := true ;
47633: LD_ADDR_EXP 51
47637: PUSH
47638: LD_INT 1
47640: ST_TO_ADDR
// if p3 = 108 then
47641: LD_VAR 0 3
47645: PUSH
47646: LD_INT 108
47648: EQUAL
47649: IFFALSE 47659
// sWound := true ;
47651: LD_ADDR_EXP 59
47655: PUSH
47656: LD_INT 1
47658: ST_TO_ADDR
// if p3 = 109 then
47659: LD_VAR 0 3
47663: PUSH
47664: LD_INT 109
47666: EQUAL
47667: IFFALSE 47677
// sBetray := true ;
47669: LD_ADDR_EXP 63
47673: PUSH
47674: LD_INT 1
47676: ST_TO_ADDR
// if p3 = 110 then
47677: LD_VAR 0 3
47681: PUSH
47682: LD_INT 110
47684: EQUAL
47685: IFFALSE 47695
// sContamin := true ;
47687: LD_ADDR_EXP 64
47691: PUSH
47692: LD_INT 1
47694: ST_TO_ADDR
// if p3 = 111 then
47695: LD_VAR 0 3
47699: PUSH
47700: LD_INT 111
47702: EQUAL
47703: IFFALSE 47713
// sOil := true ;
47705: LD_ADDR_EXP 66
47709: PUSH
47710: LD_INT 1
47712: ST_TO_ADDR
// if p3 = 112 then
47713: LD_VAR 0 3
47717: PUSH
47718: LD_INT 112
47720: EQUAL
47721: IFFALSE 47731
// sStu := true ;
47723: LD_ADDR_EXP 70
47727: PUSH
47728: LD_INT 1
47730: ST_TO_ADDR
// if p3 = 113 then
47731: LD_VAR 0 3
47735: PUSH
47736: LD_INT 113
47738: EQUAL
47739: IFFALSE 47749
// sBazooka := true ;
47741: LD_ADDR_EXP 73
47745: PUSH
47746: LD_INT 1
47748: ST_TO_ADDR
// if p3 = 114 then
47749: LD_VAR 0 3
47753: PUSH
47754: LD_INT 114
47756: EQUAL
47757: IFFALSE 47767
// sMortar := true ;
47759: LD_ADDR_EXP 74
47763: PUSH
47764: LD_INT 1
47766: ST_TO_ADDR
// if p3 = 115 then
47767: LD_VAR 0 3
47771: PUSH
47772: LD_INT 115
47774: EQUAL
47775: IFFALSE 47785
// sRanger := true ;
47777: LD_ADDR_EXP 84
47781: PUSH
47782: LD_INT 1
47784: ST_TO_ADDR
// end ; if p2 = 101 then
47785: LD_VAR 0 2
47789: PUSH
47790: LD_INT 101
47792: EQUAL
47793: IFFALSE 47921
// begin case p3 of 1 :
47795: LD_VAR 0 3
47799: PUSH
47800: LD_INT 1
47802: DOUBLE
47803: EQUAL
47804: IFTRUE 47808
47806: GO 47815
47808: POP
// hHackUnlimitedResources ; 2 :
47809: CALL 58958 0 0
47813: GO 47921
47815: LD_INT 2
47817: DOUBLE
47818: EQUAL
47819: IFTRUE 47823
47821: GO 47830
47823: POP
// hHackSetLevel10 ; 3 :
47824: CALL 59091 0 0
47828: GO 47921
47830: LD_INT 3
47832: DOUBLE
47833: EQUAL
47834: IFTRUE 47838
47836: GO 47845
47838: POP
// hHackSetLevel10YourUnits ; 4 :
47839: CALL 59176 0 0
47843: GO 47921
47845: LD_INT 4
47847: DOUBLE
47848: EQUAL
47849: IFTRUE 47853
47851: GO 47860
47853: POP
// hHackInvincible ; 5 :
47854: CALL 59624 0 0
47858: GO 47921
47860: LD_INT 5
47862: DOUBLE
47863: EQUAL
47864: IFTRUE 47868
47866: GO 47875
47868: POP
// hHackInvisible ; 6 :
47869: CALL 59735 0 0
47873: GO 47921
47875: LD_INT 6
47877: DOUBLE
47878: EQUAL
47879: IFTRUE 47883
47881: GO 47890
47883: POP
// hHackChangeYourSide ; 7 :
47884: CALL 59792 0 0
47888: GO 47921
47890: LD_INT 7
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47898
47896: GO 47905
47898: POP
// hHackChangeUnitSide ; 8 :
47899: CALL 59834 0 0
47903: GO 47921
47905: LD_INT 8
47907: DOUBLE
47908: EQUAL
47909: IFTRUE 47913
47911: GO 47920
47913: POP
// hHackFog ; end ;
47914: CALL 59935 0 0
47918: GO 47921
47920: POP
// end ; end ;
47921: LD_VAR 0 7
47925: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
47926: GO 47928
47928: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47929: LD_STRING initStreamRollete();
47931: PPUSH
47932: CALL_OW 559
// InitStreamMode ;
47936: CALL 47945 0 0
// DefineStreamItems ( ) ;
47940: CALL 48385 0 0
// end ;
47944: END
// function InitStreamMode ; begin
47945: LD_INT 0
47947: PPUSH
// streamModeActive := false ;
47948: LD_ADDR_EXP 31
47952: PUSH
47953: LD_INT 0
47955: ST_TO_ADDR
// normalCounter := 36 ;
47956: LD_ADDR_EXP 32
47960: PUSH
47961: LD_INT 36
47963: ST_TO_ADDR
// hardcoreCounter := 16 ;
47964: LD_ADDR_EXP 33
47968: PUSH
47969: LD_INT 16
47971: ST_TO_ADDR
// sRocket := false ;
47972: LD_ADDR_EXP 36
47976: PUSH
47977: LD_INT 0
47979: ST_TO_ADDR
// sSpeed := false ;
47980: LD_ADDR_EXP 35
47984: PUSH
47985: LD_INT 0
47987: ST_TO_ADDR
// sEngine := false ;
47988: LD_ADDR_EXP 37
47992: PUSH
47993: LD_INT 0
47995: ST_TO_ADDR
// sSpec := false ;
47996: LD_ADDR_EXP 34
48000: PUSH
48001: LD_INT 0
48003: ST_TO_ADDR
// sLevel := false ;
48004: LD_ADDR_EXP 38
48008: PUSH
48009: LD_INT 0
48011: ST_TO_ADDR
// sArmoury := false ;
48012: LD_ADDR_EXP 39
48016: PUSH
48017: LD_INT 0
48019: ST_TO_ADDR
// sRadar := false ;
48020: LD_ADDR_EXP 40
48024: PUSH
48025: LD_INT 0
48027: ST_TO_ADDR
// sBunker := false ;
48028: LD_ADDR_EXP 41
48032: PUSH
48033: LD_INT 0
48035: ST_TO_ADDR
// sHack := false ;
48036: LD_ADDR_EXP 42
48040: PUSH
48041: LD_INT 0
48043: ST_TO_ADDR
// sFire := false ;
48044: LD_ADDR_EXP 43
48048: PUSH
48049: LD_INT 0
48051: ST_TO_ADDR
// sRefresh := false ;
48052: LD_ADDR_EXP 44
48056: PUSH
48057: LD_INT 0
48059: ST_TO_ADDR
// sExp := false ;
48060: LD_ADDR_EXP 45
48064: PUSH
48065: LD_INT 0
48067: ST_TO_ADDR
// sDepot := false ;
48068: LD_ADDR_EXP 46
48072: PUSH
48073: LD_INT 0
48075: ST_TO_ADDR
// sFlag := false ;
48076: LD_ADDR_EXP 47
48080: PUSH
48081: LD_INT 0
48083: ST_TO_ADDR
// sKamikadze := false ;
48084: LD_ADDR_EXP 55
48088: PUSH
48089: LD_INT 0
48091: ST_TO_ADDR
// sTroll := false ;
48092: LD_ADDR_EXP 56
48096: PUSH
48097: LD_INT 0
48099: ST_TO_ADDR
// sSlow := false ;
48100: LD_ADDR_EXP 57
48104: PUSH
48105: LD_INT 0
48107: ST_TO_ADDR
// sLack := false ;
48108: LD_ADDR_EXP 58
48112: PUSH
48113: LD_INT 0
48115: ST_TO_ADDR
// sTank := false ;
48116: LD_ADDR_EXP 60
48120: PUSH
48121: LD_INT 0
48123: ST_TO_ADDR
// sRemote := false ;
48124: LD_ADDR_EXP 61
48128: PUSH
48129: LD_INT 0
48131: ST_TO_ADDR
// sPowell := false ;
48132: LD_ADDR_EXP 62
48136: PUSH
48137: LD_INT 0
48139: ST_TO_ADDR
// sTeleport := false ;
48140: LD_ADDR_EXP 65
48144: PUSH
48145: LD_INT 0
48147: ST_TO_ADDR
// sOilTower := false ;
48148: LD_ADDR_EXP 67
48152: PUSH
48153: LD_INT 0
48155: ST_TO_ADDR
// sShovel := false ;
48156: LD_ADDR_EXP 68
48160: PUSH
48161: LD_INT 0
48163: ST_TO_ADDR
// sSheik := false ;
48164: LD_ADDR_EXP 69
48168: PUSH
48169: LD_INT 0
48171: ST_TO_ADDR
// sEarthquake := false ;
48172: LD_ADDR_EXP 71
48176: PUSH
48177: LD_INT 0
48179: ST_TO_ADDR
// sAI := false ;
48180: LD_ADDR_EXP 72
48184: PUSH
48185: LD_INT 0
48187: ST_TO_ADDR
// sCargo := false ;
48188: LD_ADDR_EXP 75
48192: PUSH
48193: LD_INT 0
48195: ST_TO_ADDR
// sDLaser := false ;
48196: LD_ADDR_EXP 76
48200: PUSH
48201: LD_INT 0
48203: ST_TO_ADDR
// sExchange := false ;
48204: LD_ADDR_EXP 77
48208: PUSH
48209: LD_INT 0
48211: ST_TO_ADDR
// sFac := false ;
48212: LD_ADDR_EXP 78
48216: PUSH
48217: LD_INT 0
48219: ST_TO_ADDR
// sPower := false ;
48220: LD_ADDR_EXP 79
48224: PUSH
48225: LD_INT 0
48227: ST_TO_ADDR
// sRandom := false ;
48228: LD_ADDR_EXP 80
48232: PUSH
48233: LD_INT 0
48235: ST_TO_ADDR
// sShield := false ;
48236: LD_ADDR_EXP 81
48240: PUSH
48241: LD_INT 0
48243: ST_TO_ADDR
// sTime := false ;
48244: LD_ADDR_EXP 82
48248: PUSH
48249: LD_INT 0
48251: ST_TO_ADDR
// sTools := false ;
48252: LD_ADDR_EXP 83
48256: PUSH
48257: LD_INT 0
48259: ST_TO_ADDR
// sSold := false ;
48260: LD_ADDR_EXP 48
48264: PUSH
48265: LD_INT 0
48267: ST_TO_ADDR
// sDiff := false ;
48268: LD_ADDR_EXP 49
48272: PUSH
48273: LD_INT 0
48275: ST_TO_ADDR
// sFog := false ;
48276: LD_ADDR_EXP 52
48280: PUSH
48281: LD_INT 0
48283: ST_TO_ADDR
// sReset := false ;
48284: LD_ADDR_EXP 53
48288: PUSH
48289: LD_INT 0
48291: ST_TO_ADDR
// sSun := false ;
48292: LD_ADDR_EXP 54
48296: PUSH
48297: LD_INT 0
48299: ST_TO_ADDR
// sTiger := false ;
48300: LD_ADDR_EXP 50
48304: PUSH
48305: LD_INT 0
48307: ST_TO_ADDR
// sBomb := false ;
48308: LD_ADDR_EXP 51
48312: PUSH
48313: LD_INT 0
48315: ST_TO_ADDR
// sWound := false ;
48316: LD_ADDR_EXP 59
48320: PUSH
48321: LD_INT 0
48323: ST_TO_ADDR
// sBetray := false ;
48324: LD_ADDR_EXP 63
48328: PUSH
48329: LD_INT 0
48331: ST_TO_ADDR
// sContamin := false ;
48332: LD_ADDR_EXP 64
48336: PUSH
48337: LD_INT 0
48339: ST_TO_ADDR
// sOil := false ;
48340: LD_ADDR_EXP 66
48344: PUSH
48345: LD_INT 0
48347: ST_TO_ADDR
// sStu := false ;
48348: LD_ADDR_EXP 70
48352: PUSH
48353: LD_INT 0
48355: ST_TO_ADDR
// sBazooka := false ;
48356: LD_ADDR_EXP 73
48360: PUSH
48361: LD_INT 0
48363: ST_TO_ADDR
// sMortar := false ;
48364: LD_ADDR_EXP 74
48368: PUSH
48369: LD_INT 0
48371: ST_TO_ADDR
// sRanger := false ;
48372: LD_ADDR_EXP 84
48376: PUSH
48377: LD_INT 0
48379: ST_TO_ADDR
// end ;
48380: LD_VAR 0 1
48384: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
48385: LD_INT 0
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
// result := [ ] ;
48392: LD_ADDR_VAR 0 1
48396: PUSH
48397: EMPTY
48398: ST_TO_ADDR
// if campaign_id = 1 then
48399: LD_OWVAR 69
48403: PUSH
48404: LD_INT 1
48406: EQUAL
48407: IFFALSE 51345
// begin case mission_number of 1 :
48409: LD_OWVAR 70
48413: PUSH
48414: LD_INT 1
48416: DOUBLE
48417: EQUAL
48418: IFTRUE 48422
48420: GO 48486
48422: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
48423: LD_ADDR_VAR 0 1
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 4
48433: PUSH
48434: LD_INT 11
48436: PUSH
48437: LD_INT 12
48439: PUSH
48440: LD_INT 15
48442: PUSH
48443: LD_INT 16
48445: PUSH
48446: LD_INT 22
48448: PUSH
48449: LD_INT 23
48451: PUSH
48452: LD_INT 26
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 101
48468: PUSH
48469: LD_INT 102
48471: PUSH
48472: LD_INT 106
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: ST_TO_ADDR
48484: GO 51343
48486: LD_INT 2
48488: DOUBLE
48489: EQUAL
48490: IFTRUE 48494
48492: GO 48566
48494: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
48495: LD_ADDR_VAR 0 1
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 4
48505: PUSH
48506: LD_INT 11
48508: PUSH
48509: LD_INT 12
48511: PUSH
48512: LD_INT 15
48514: PUSH
48515: LD_INT 16
48517: PUSH
48518: LD_INT 22
48520: PUSH
48521: LD_INT 23
48523: PUSH
48524: LD_INT 26
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 101
48540: PUSH
48541: LD_INT 102
48543: PUSH
48544: LD_INT 105
48546: PUSH
48547: LD_INT 106
48549: PUSH
48550: LD_INT 108
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: ST_TO_ADDR
48564: GO 51343
48566: LD_INT 3
48568: DOUBLE
48569: EQUAL
48570: IFTRUE 48574
48572: GO 48650
48574: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
48575: LD_ADDR_VAR 0 1
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 4
48585: PUSH
48586: LD_INT 5
48588: PUSH
48589: LD_INT 11
48591: PUSH
48592: LD_INT 12
48594: PUSH
48595: LD_INT 15
48597: PUSH
48598: LD_INT 16
48600: PUSH
48601: LD_INT 22
48603: PUSH
48604: LD_INT 26
48606: PUSH
48607: LD_INT 36
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 101
48624: PUSH
48625: LD_INT 102
48627: PUSH
48628: LD_INT 105
48630: PUSH
48631: LD_INT 106
48633: PUSH
48634: LD_INT 108
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: ST_TO_ADDR
48648: GO 51343
48650: LD_INT 4
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48658
48656: GO 48742
48658: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
48659: LD_ADDR_VAR 0 1
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 4
48669: PUSH
48670: LD_INT 5
48672: PUSH
48673: LD_INT 8
48675: PUSH
48676: LD_INT 11
48678: PUSH
48679: LD_INT 12
48681: PUSH
48682: LD_INT 15
48684: PUSH
48685: LD_INT 16
48687: PUSH
48688: LD_INT 22
48690: PUSH
48691: LD_INT 23
48693: PUSH
48694: LD_INT 26
48696: PUSH
48697: LD_INT 36
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 101
48716: PUSH
48717: LD_INT 102
48719: PUSH
48720: LD_INT 105
48722: PUSH
48723: LD_INT 106
48725: PUSH
48726: LD_INT 108
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: ST_TO_ADDR
48740: GO 51343
48742: LD_INT 5
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48750
48748: GO 48850
48750: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
48751: LD_ADDR_VAR 0 1
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 4
48761: PUSH
48762: LD_INT 5
48764: PUSH
48765: LD_INT 6
48767: PUSH
48768: LD_INT 8
48770: PUSH
48771: LD_INT 11
48773: PUSH
48774: LD_INT 12
48776: PUSH
48777: LD_INT 15
48779: PUSH
48780: LD_INT 16
48782: PUSH
48783: LD_INT 22
48785: PUSH
48786: LD_INT 23
48788: PUSH
48789: LD_INT 25
48791: PUSH
48792: LD_INT 26
48794: PUSH
48795: LD_INT 36
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 101
48816: PUSH
48817: LD_INT 102
48819: PUSH
48820: LD_INT 105
48822: PUSH
48823: LD_INT 106
48825: PUSH
48826: LD_INT 108
48828: PUSH
48829: LD_INT 109
48831: PUSH
48832: LD_INT 112
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: ST_TO_ADDR
48848: GO 51343
48850: LD_INT 6
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48858
48856: GO 48978
48858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
48859: LD_ADDR_VAR 0 1
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 4
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: LD_INT 6
48875: PUSH
48876: LD_INT 8
48878: PUSH
48879: LD_INT 11
48881: PUSH
48882: LD_INT 12
48884: PUSH
48885: LD_INT 15
48887: PUSH
48888: LD_INT 16
48890: PUSH
48891: LD_INT 20
48893: PUSH
48894: LD_INT 21
48896: PUSH
48897: LD_INT 22
48899: PUSH
48900: LD_INT 23
48902: PUSH
48903: LD_INT 25
48905: PUSH
48906: LD_INT 26
48908: PUSH
48909: LD_INT 30
48911: PUSH
48912: LD_INT 31
48914: PUSH
48915: LD_INT 32
48917: PUSH
48918: LD_INT 36
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 101
48944: PUSH
48945: LD_INT 102
48947: PUSH
48948: LD_INT 105
48950: PUSH
48951: LD_INT 106
48953: PUSH
48954: LD_INT 108
48956: PUSH
48957: LD_INT 109
48959: PUSH
48960: LD_INT 112
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: ST_TO_ADDR
48976: GO 51343
48978: LD_INT 7
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 48986
48984: GO 49086
48986: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
48987: LD_ADDR_VAR 0 1
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 4
48997: PUSH
48998: LD_INT 5
49000: PUSH
49001: LD_INT 7
49003: PUSH
49004: LD_INT 11
49006: PUSH
49007: LD_INT 12
49009: PUSH
49010: LD_INT 15
49012: PUSH
49013: LD_INT 16
49015: PUSH
49016: LD_INT 20
49018: PUSH
49019: LD_INT 21
49021: PUSH
49022: LD_INT 22
49024: PUSH
49025: LD_INT 23
49027: PUSH
49028: LD_INT 25
49030: PUSH
49031: LD_INT 26
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 101
49052: PUSH
49053: LD_INT 102
49055: PUSH
49056: LD_INT 103
49058: PUSH
49059: LD_INT 105
49061: PUSH
49062: LD_INT 106
49064: PUSH
49065: LD_INT 108
49067: PUSH
49068: LD_INT 112
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: ST_TO_ADDR
49084: GO 51343
49086: LD_INT 8
49088: DOUBLE
49089: EQUAL
49090: IFTRUE 49094
49092: GO 49222
49094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
49095: LD_ADDR_VAR 0 1
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 4
49105: PUSH
49106: LD_INT 5
49108: PUSH
49109: LD_INT 6
49111: PUSH
49112: LD_INT 7
49114: PUSH
49115: LD_INT 8
49117: PUSH
49118: LD_INT 11
49120: PUSH
49121: LD_INT 12
49123: PUSH
49124: LD_INT 15
49126: PUSH
49127: LD_INT 16
49129: PUSH
49130: LD_INT 20
49132: PUSH
49133: LD_INT 21
49135: PUSH
49136: LD_INT 22
49138: PUSH
49139: LD_INT 23
49141: PUSH
49142: LD_INT 25
49144: PUSH
49145: LD_INT 26
49147: PUSH
49148: LD_INT 30
49150: PUSH
49151: LD_INT 31
49153: PUSH
49154: LD_INT 32
49156: PUSH
49157: LD_INT 36
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 101
49184: PUSH
49185: LD_INT 102
49187: PUSH
49188: LD_INT 103
49190: PUSH
49191: LD_INT 105
49193: PUSH
49194: LD_INT 106
49196: PUSH
49197: LD_INT 108
49199: PUSH
49200: LD_INT 109
49202: PUSH
49203: LD_INT 112
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: ST_TO_ADDR
49220: GO 51343
49222: LD_INT 9
49224: DOUBLE
49225: EQUAL
49226: IFTRUE 49230
49228: GO 49366
49230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
49231: LD_ADDR_VAR 0 1
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: LD_INT 4
49241: PUSH
49242: LD_INT 5
49244: PUSH
49245: LD_INT 6
49247: PUSH
49248: LD_INT 7
49250: PUSH
49251: LD_INT 8
49253: PUSH
49254: LD_INT 11
49256: PUSH
49257: LD_INT 12
49259: PUSH
49260: LD_INT 15
49262: PUSH
49263: LD_INT 16
49265: PUSH
49266: LD_INT 20
49268: PUSH
49269: LD_INT 21
49271: PUSH
49272: LD_INT 22
49274: PUSH
49275: LD_INT 23
49277: PUSH
49278: LD_INT 25
49280: PUSH
49281: LD_INT 26
49283: PUSH
49284: LD_INT 28
49286: PUSH
49287: LD_INT 30
49289: PUSH
49290: LD_INT 31
49292: PUSH
49293: LD_INT 32
49295: PUSH
49296: LD_INT 36
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 101
49324: PUSH
49325: LD_INT 102
49327: PUSH
49328: LD_INT 103
49330: PUSH
49331: LD_INT 105
49333: PUSH
49334: LD_INT 106
49336: PUSH
49337: LD_INT 108
49339: PUSH
49340: LD_INT 109
49342: PUSH
49343: LD_INT 112
49345: PUSH
49346: LD_INT 114
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: ST_TO_ADDR
49364: GO 51343
49366: LD_INT 10
49368: DOUBLE
49369: EQUAL
49370: IFTRUE 49374
49372: GO 49558
49374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
49375: LD_ADDR_VAR 0 1
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 4
49385: PUSH
49386: LD_INT 5
49388: PUSH
49389: LD_INT 6
49391: PUSH
49392: LD_INT 7
49394: PUSH
49395: LD_INT 8
49397: PUSH
49398: LD_INT 9
49400: PUSH
49401: LD_INT 10
49403: PUSH
49404: LD_INT 11
49406: PUSH
49407: LD_INT 12
49409: PUSH
49410: LD_INT 13
49412: PUSH
49413: LD_INT 14
49415: PUSH
49416: LD_INT 15
49418: PUSH
49419: LD_INT 16
49421: PUSH
49422: LD_INT 17
49424: PUSH
49425: LD_INT 18
49427: PUSH
49428: LD_INT 19
49430: PUSH
49431: LD_INT 20
49433: PUSH
49434: LD_INT 21
49436: PUSH
49437: LD_INT 22
49439: PUSH
49440: LD_INT 23
49442: PUSH
49443: LD_INT 24
49445: PUSH
49446: LD_INT 25
49448: PUSH
49449: LD_INT 26
49451: PUSH
49452: LD_INT 28
49454: PUSH
49455: LD_INT 30
49457: PUSH
49458: LD_INT 31
49460: PUSH
49461: LD_INT 32
49463: PUSH
49464: LD_INT 36
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 101
49500: PUSH
49501: LD_INT 102
49503: PUSH
49504: LD_INT 103
49506: PUSH
49507: LD_INT 104
49509: PUSH
49510: LD_INT 105
49512: PUSH
49513: LD_INT 106
49515: PUSH
49516: LD_INT 107
49518: PUSH
49519: LD_INT 108
49521: PUSH
49522: LD_INT 109
49524: PUSH
49525: LD_INT 110
49527: PUSH
49528: LD_INT 111
49530: PUSH
49531: LD_INT 112
49533: PUSH
49534: LD_INT 114
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: ST_TO_ADDR
49556: GO 51343
49558: LD_INT 11
49560: DOUBLE
49561: EQUAL
49562: IFTRUE 49566
49564: GO 49758
49566: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
49567: LD_ADDR_VAR 0 1
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 4
49580: PUSH
49581: LD_INT 5
49583: PUSH
49584: LD_INT 6
49586: PUSH
49587: LD_INT 7
49589: PUSH
49590: LD_INT 8
49592: PUSH
49593: LD_INT 9
49595: PUSH
49596: LD_INT 10
49598: PUSH
49599: LD_INT 11
49601: PUSH
49602: LD_INT 12
49604: PUSH
49605: LD_INT 13
49607: PUSH
49608: LD_INT 14
49610: PUSH
49611: LD_INT 15
49613: PUSH
49614: LD_INT 16
49616: PUSH
49617: LD_INT 17
49619: PUSH
49620: LD_INT 18
49622: PUSH
49623: LD_INT 19
49625: PUSH
49626: LD_INT 20
49628: PUSH
49629: LD_INT 21
49631: PUSH
49632: LD_INT 22
49634: PUSH
49635: LD_INT 23
49637: PUSH
49638: LD_INT 24
49640: PUSH
49641: LD_INT 25
49643: PUSH
49644: LD_INT 26
49646: PUSH
49647: LD_INT 28
49649: PUSH
49650: LD_INT 30
49652: PUSH
49653: LD_INT 31
49655: PUSH
49656: LD_INT 32
49658: PUSH
49659: LD_INT 34
49661: PUSH
49662: LD_INT 36
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 101
49700: PUSH
49701: LD_INT 102
49703: PUSH
49704: LD_INT 103
49706: PUSH
49707: LD_INT 104
49709: PUSH
49710: LD_INT 105
49712: PUSH
49713: LD_INT 106
49715: PUSH
49716: LD_INT 107
49718: PUSH
49719: LD_INT 108
49721: PUSH
49722: LD_INT 109
49724: PUSH
49725: LD_INT 110
49727: PUSH
49728: LD_INT 111
49730: PUSH
49731: LD_INT 112
49733: PUSH
49734: LD_INT 114
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: ST_TO_ADDR
49756: GO 51343
49758: LD_INT 12
49760: DOUBLE
49761: EQUAL
49762: IFTRUE 49766
49764: GO 49974
49766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
49767: LD_ADDR_VAR 0 1
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: LD_INT 4
49783: PUSH
49784: LD_INT 5
49786: PUSH
49787: LD_INT 6
49789: PUSH
49790: LD_INT 7
49792: PUSH
49793: LD_INT 8
49795: PUSH
49796: LD_INT 9
49798: PUSH
49799: LD_INT 10
49801: PUSH
49802: LD_INT 11
49804: PUSH
49805: LD_INT 12
49807: PUSH
49808: LD_INT 13
49810: PUSH
49811: LD_INT 14
49813: PUSH
49814: LD_INT 15
49816: PUSH
49817: LD_INT 16
49819: PUSH
49820: LD_INT 17
49822: PUSH
49823: LD_INT 18
49825: PUSH
49826: LD_INT 19
49828: PUSH
49829: LD_INT 20
49831: PUSH
49832: LD_INT 21
49834: PUSH
49835: LD_INT 22
49837: PUSH
49838: LD_INT 23
49840: PUSH
49841: LD_INT 24
49843: PUSH
49844: LD_INT 25
49846: PUSH
49847: LD_INT 26
49849: PUSH
49850: LD_INT 27
49852: PUSH
49853: LD_INT 28
49855: PUSH
49856: LD_INT 30
49858: PUSH
49859: LD_INT 31
49861: PUSH
49862: LD_INT 32
49864: PUSH
49865: LD_INT 33
49867: PUSH
49868: LD_INT 34
49870: PUSH
49871: LD_INT 36
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 101
49912: PUSH
49913: LD_INT 102
49915: PUSH
49916: LD_INT 103
49918: PUSH
49919: LD_INT 104
49921: PUSH
49922: LD_INT 105
49924: PUSH
49925: LD_INT 106
49927: PUSH
49928: LD_INT 107
49930: PUSH
49931: LD_INT 108
49933: PUSH
49934: LD_INT 109
49936: PUSH
49937: LD_INT 110
49939: PUSH
49940: LD_INT 111
49942: PUSH
49943: LD_INT 112
49945: PUSH
49946: LD_INT 113
49948: PUSH
49949: LD_INT 114
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: ST_TO_ADDR
49972: GO 51343
49974: LD_INT 13
49976: DOUBLE
49977: EQUAL
49978: IFTRUE 49982
49980: GO 50178
49982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
49983: LD_ADDR_VAR 0 1
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 3
49996: PUSH
49997: LD_INT 4
49999: PUSH
50000: LD_INT 5
50002: PUSH
50003: LD_INT 8
50005: PUSH
50006: LD_INT 9
50008: PUSH
50009: LD_INT 10
50011: PUSH
50012: LD_INT 11
50014: PUSH
50015: LD_INT 12
50017: PUSH
50018: LD_INT 14
50020: PUSH
50021: LD_INT 15
50023: PUSH
50024: LD_INT 16
50026: PUSH
50027: LD_INT 17
50029: PUSH
50030: LD_INT 18
50032: PUSH
50033: LD_INT 19
50035: PUSH
50036: LD_INT 20
50038: PUSH
50039: LD_INT 21
50041: PUSH
50042: LD_INT 22
50044: PUSH
50045: LD_INT 23
50047: PUSH
50048: LD_INT 24
50050: PUSH
50051: LD_INT 25
50053: PUSH
50054: LD_INT 26
50056: PUSH
50057: LD_INT 27
50059: PUSH
50060: LD_INT 28
50062: PUSH
50063: LD_INT 30
50065: PUSH
50066: LD_INT 31
50068: PUSH
50069: LD_INT 32
50071: PUSH
50072: LD_INT 33
50074: PUSH
50075: LD_INT 34
50077: PUSH
50078: LD_INT 36
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 101
50116: PUSH
50117: LD_INT 102
50119: PUSH
50120: LD_INT 103
50122: PUSH
50123: LD_INT 104
50125: PUSH
50126: LD_INT 105
50128: PUSH
50129: LD_INT 106
50131: PUSH
50132: LD_INT 107
50134: PUSH
50135: LD_INT 108
50137: PUSH
50138: LD_INT 109
50140: PUSH
50141: LD_INT 110
50143: PUSH
50144: LD_INT 111
50146: PUSH
50147: LD_INT 112
50149: PUSH
50150: LD_INT 113
50152: PUSH
50153: LD_INT 114
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: ST_TO_ADDR
50176: GO 51343
50178: LD_INT 14
50180: DOUBLE
50181: EQUAL
50182: IFTRUE 50186
50184: GO 50398
50186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
50187: LD_ADDR_VAR 0 1
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: LD_INT 4
50203: PUSH
50204: LD_INT 5
50206: PUSH
50207: LD_INT 6
50209: PUSH
50210: LD_INT 7
50212: PUSH
50213: LD_INT 8
50215: PUSH
50216: LD_INT 9
50218: PUSH
50219: LD_INT 10
50221: PUSH
50222: LD_INT 11
50224: PUSH
50225: LD_INT 12
50227: PUSH
50228: LD_INT 13
50230: PUSH
50231: LD_INT 14
50233: PUSH
50234: LD_INT 15
50236: PUSH
50237: LD_INT 16
50239: PUSH
50240: LD_INT 17
50242: PUSH
50243: LD_INT 18
50245: PUSH
50246: LD_INT 19
50248: PUSH
50249: LD_INT 20
50251: PUSH
50252: LD_INT 21
50254: PUSH
50255: LD_INT 22
50257: PUSH
50258: LD_INT 23
50260: PUSH
50261: LD_INT 24
50263: PUSH
50264: LD_INT 25
50266: PUSH
50267: LD_INT 26
50269: PUSH
50270: LD_INT 27
50272: PUSH
50273: LD_INT 28
50275: PUSH
50276: LD_INT 29
50278: PUSH
50279: LD_INT 30
50281: PUSH
50282: LD_INT 31
50284: PUSH
50285: LD_INT 32
50287: PUSH
50288: LD_INT 33
50290: PUSH
50291: LD_INT 34
50293: PUSH
50294: LD_INT 36
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 101
50336: PUSH
50337: LD_INT 102
50339: PUSH
50340: LD_INT 103
50342: PUSH
50343: LD_INT 104
50345: PUSH
50346: LD_INT 105
50348: PUSH
50349: LD_INT 106
50351: PUSH
50352: LD_INT 107
50354: PUSH
50355: LD_INT 108
50357: PUSH
50358: LD_INT 109
50360: PUSH
50361: LD_INT 110
50363: PUSH
50364: LD_INT 111
50366: PUSH
50367: LD_INT 112
50369: PUSH
50370: LD_INT 113
50372: PUSH
50373: LD_INT 114
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: ST_TO_ADDR
50396: GO 51343
50398: LD_INT 15
50400: DOUBLE
50401: EQUAL
50402: IFTRUE 50406
50404: GO 50618
50406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
50407: LD_ADDR_VAR 0 1
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: LD_INT 4
50423: PUSH
50424: LD_INT 5
50426: PUSH
50427: LD_INT 6
50429: PUSH
50430: LD_INT 7
50432: PUSH
50433: LD_INT 8
50435: PUSH
50436: LD_INT 9
50438: PUSH
50439: LD_INT 10
50441: PUSH
50442: LD_INT 11
50444: PUSH
50445: LD_INT 12
50447: PUSH
50448: LD_INT 13
50450: PUSH
50451: LD_INT 14
50453: PUSH
50454: LD_INT 15
50456: PUSH
50457: LD_INT 16
50459: PUSH
50460: LD_INT 17
50462: PUSH
50463: LD_INT 18
50465: PUSH
50466: LD_INT 19
50468: PUSH
50469: LD_INT 20
50471: PUSH
50472: LD_INT 21
50474: PUSH
50475: LD_INT 22
50477: PUSH
50478: LD_INT 23
50480: PUSH
50481: LD_INT 24
50483: PUSH
50484: LD_INT 25
50486: PUSH
50487: LD_INT 26
50489: PUSH
50490: LD_INT 27
50492: PUSH
50493: LD_INT 28
50495: PUSH
50496: LD_INT 29
50498: PUSH
50499: LD_INT 30
50501: PUSH
50502: LD_INT 31
50504: PUSH
50505: LD_INT 32
50507: PUSH
50508: LD_INT 33
50510: PUSH
50511: LD_INT 34
50513: PUSH
50514: LD_INT 36
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 101
50556: PUSH
50557: LD_INT 102
50559: PUSH
50560: LD_INT 103
50562: PUSH
50563: LD_INT 104
50565: PUSH
50566: LD_INT 105
50568: PUSH
50569: LD_INT 106
50571: PUSH
50572: LD_INT 107
50574: PUSH
50575: LD_INT 108
50577: PUSH
50578: LD_INT 109
50580: PUSH
50581: LD_INT 110
50583: PUSH
50584: LD_INT 111
50586: PUSH
50587: LD_INT 112
50589: PUSH
50590: LD_INT 113
50592: PUSH
50593: LD_INT 114
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: ST_TO_ADDR
50616: GO 51343
50618: LD_INT 16
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50626
50624: GO 50750
50626: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
50627: LD_ADDR_VAR 0 1
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 4
50637: PUSH
50638: LD_INT 5
50640: PUSH
50641: LD_INT 7
50643: PUSH
50644: LD_INT 11
50646: PUSH
50647: LD_INT 12
50649: PUSH
50650: LD_INT 15
50652: PUSH
50653: LD_INT 16
50655: PUSH
50656: LD_INT 20
50658: PUSH
50659: LD_INT 21
50661: PUSH
50662: LD_INT 22
50664: PUSH
50665: LD_INT 23
50667: PUSH
50668: LD_INT 25
50670: PUSH
50671: LD_INT 26
50673: PUSH
50674: LD_INT 30
50676: PUSH
50677: LD_INT 31
50679: PUSH
50680: LD_INT 32
50682: PUSH
50683: LD_INT 33
50685: PUSH
50686: LD_INT 34
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 101
50712: PUSH
50713: LD_INT 102
50715: PUSH
50716: LD_INT 103
50718: PUSH
50719: LD_INT 106
50721: PUSH
50722: LD_INT 108
50724: PUSH
50725: LD_INT 112
50727: PUSH
50728: LD_INT 113
50730: PUSH
50731: LD_INT 114
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: ST_TO_ADDR
50748: GO 51343
50750: LD_INT 17
50752: DOUBLE
50753: EQUAL
50754: IFTRUE 50758
50756: GO 50970
50758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
50759: LD_ADDR_VAR 0 1
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: LD_INT 5
50778: PUSH
50779: LD_INT 6
50781: PUSH
50782: LD_INT 7
50784: PUSH
50785: LD_INT 8
50787: PUSH
50788: LD_INT 9
50790: PUSH
50791: LD_INT 10
50793: PUSH
50794: LD_INT 11
50796: PUSH
50797: LD_INT 12
50799: PUSH
50800: LD_INT 13
50802: PUSH
50803: LD_INT 14
50805: PUSH
50806: LD_INT 15
50808: PUSH
50809: LD_INT 16
50811: PUSH
50812: LD_INT 17
50814: PUSH
50815: LD_INT 18
50817: PUSH
50818: LD_INT 19
50820: PUSH
50821: LD_INT 20
50823: PUSH
50824: LD_INT 21
50826: PUSH
50827: LD_INT 22
50829: PUSH
50830: LD_INT 23
50832: PUSH
50833: LD_INT 24
50835: PUSH
50836: LD_INT 25
50838: PUSH
50839: LD_INT 26
50841: PUSH
50842: LD_INT 27
50844: PUSH
50845: LD_INT 28
50847: PUSH
50848: LD_INT 29
50850: PUSH
50851: LD_INT 30
50853: PUSH
50854: LD_INT 31
50856: PUSH
50857: LD_INT 32
50859: PUSH
50860: LD_INT 33
50862: PUSH
50863: LD_INT 34
50865: PUSH
50866: LD_INT 36
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 101
50908: PUSH
50909: LD_INT 102
50911: PUSH
50912: LD_INT 103
50914: PUSH
50915: LD_INT 104
50917: PUSH
50918: LD_INT 105
50920: PUSH
50921: LD_INT 106
50923: PUSH
50924: LD_INT 107
50926: PUSH
50927: LD_INT 108
50929: PUSH
50930: LD_INT 109
50932: PUSH
50933: LD_INT 110
50935: PUSH
50936: LD_INT 111
50938: PUSH
50939: LD_INT 112
50941: PUSH
50942: LD_INT 113
50944: PUSH
50945: LD_INT 114
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: ST_TO_ADDR
50968: GO 51343
50970: LD_INT 18
50972: DOUBLE
50973: EQUAL
50974: IFTRUE 50978
50976: GO 51114
50978: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
50979: LD_ADDR_VAR 0 1
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 4
50989: PUSH
50990: LD_INT 5
50992: PUSH
50993: LD_INT 7
50995: PUSH
50996: LD_INT 11
50998: PUSH
50999: LD_INT 12
51001: PUSH
51002: LD_INT 15
51004: PUSH
51005: LD_INT 16
51007: PUSH
51008: LD_INT 20
51010: PUSH
51011: LD_INT 21
51013: PUSH
51014: LD_INT 22
51016: PUSH
51017: LD_INT 23
51019: PUSH
51020: LD_INT 25
51022: PUSH
51023: LD_INT 26
51025: PUSH
51026: LD_INT 30
51028: PUSH
51029: LD_INT 31
51031: PUSH
51032: LD_INT 32
51034: PUSH
51035: LD_INT 33
51037: PUSH
51038: LD_INT 34
51040: PUSH
51041: LD_INT 35
51043: PUSH
51044: LD_INT 36
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 101
51072: PUSH
51073: LD_INT 102
51075: PUSH
51076: LD_INT 103
51078: PUSH
51079: LD_INT 106
51081: PUSH
51082: LD_INT 108
51084: PUSH
51085: LD_INT 112
51087: PUSH
51088: LD_INT 113
51090: PUSH
51091: LD_INT 114
51093: PUSH
51094: LD_INT 115
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: ST_TO_ADDR
51112: GO 51343
51114: LD_INT 19
51116: DOUBLE
51117: EQUAL
51118: IFTRUE 51122
51120: GO 51342
51122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
51123: LD_ADDR_VAR 0 1
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: LD_INT 5
51142: PUSH
51143: LD_INT 6
51145: PUSH
51146: LD_INT 7
51148: PUSH
51149: LD_INT 8
51151: PUSH
51152: LD_INT 9
51154: PUSH
51155: LD_INT 10
51157: PUSH
51158: LD_INT 11
51160: PUSH
51161: LD_INT 12
51163: PUSH
51164: LD_INT 13
51166: PUSH
51167: LD_INT 14
51169: PUSH
51170: LD_INT 15
51172: PUSH
51173: LD_INT 16
51175: PUSH
51176: LD_INT 17
51178: PUSH
51179: LD_INT 18
51181: PUSH
51182: LD_INT 19
51184: PUSH
51185: LD_INT 20
51187: PUSH
51188: LD_INT 21
51190: PUSH
51191: LD_INT 22
51193: PUSH
51194: LD_INT 23
51196: PUSH
51197: LD_INT 24
51199: PUSH
51200: LD_INT 25
51202: PUSH
51203: LD_INT 26
51205: PUSH
51206: LD_INT 27
51208: PUSH
51209: LD_INT 28
51211: PUSH
51212: LD_INT 29
51214: PUSH
51215: LD_INT 30
51217: PUSH
51218: LD_INT 31
51220: PUSH
51221: LD_INT 32
51223: PUSH
51224: LD_INT 33
51226: PUSH
51227: LD_INT 34
51229: PUSH
51230: LD_INT 35
51232: PUSH
51233: LD_INT 36
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 101
51276: PUSH
51277: LD_INT 102
51279: PUSH
51280: LD_INT 103
51282: PUSH
51283: LD_INT 104
51285: PUSH
51286: LD_INT 105
51288: PUSH
51289: LD_INT 106
51291: PUSH
51292: LD_INT 107
51294: PUSH
51295: LD_INT 108
51297: PUSH
51298: LD_INT 109
51300: PUSH
51301: LD_INT 110
51303: PUSH
51304: LD_INT 111
51306: PUSH
51307: LD_INT 112
51309: PUSH
51310: LD_INT 113
51312: PUSH
51313: LD_INT 114
51315: PUSH
51316: LD_INT 115
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: ST_TO_ADDR
51340: GO 51343
51342: POP
// end else
51343: GO 51562
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
51345: LD_ADDR_VAR 0 1
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: LD_INT 4
51361: PUSH
51362: LD_INT 5
51364: PUSH
51365: LD_INT 6
51367: PUSH
51368: LD_INT 7
51370: PUSH
51371: LD_INT 8
51373: PUSH
51374: LD_INT 9
51376: PUSH
51377: LD_INT 10
51379: PUSH
51380: LD_INT 11
51382: PUSH
51383: LD_INT 12
51385: PUSH
51386: LD_INT 13
51388: PUSH
51389: LD_INT 14
51391: PUSH
51392: LD_INT 15
51394: PUSH
51395: LD_INT 16
51397: PUSH
51398: LD_INT 17
51400: PUSH
51401: LD_INT 18
51403: PUSH
51404: LD_INT 19
51406: PUSH
51407: LD_INT 20
51409: PUSH
51410: LD_INT 21
51412: PUSH
51413: LD_INT 22
51415: PUSH
51416: LD_INT 23
51418: PUSH
51419: LD_INT 24
51421: PUSH
51422: LD_INT 25
51424: PUSH
51425: LD_INT 26
51427: PUSH
51428: LD_INT 27
51430: PUSH
51431: LD_INT 28
51433: PUSH
51434: LD_INT 29
51436: PUSH
51437: LD_INT 30
51439: PUSH
51440: LD_INT 31
51442: PUSH
51443: LD_INT 32
51445: PUSH
51446: LD_INT 33
51448: PUSH
51449: LD_INT 34
51451: PUSH
51452: LD_INT 35
51454: PUSH
51455: LD_INT 36
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 101
51498: PUSH
51499: LD_INT 102
51501: PUSH
51502: LD_INT 103
51504: PUSH
51505: LD_INT 104
51507: PUSH
51508: LD_INT 105
51510: PUSH
51511: LD_INT 106
51513: PUSH
51514: LD_INT 107
51516: PUSH
51517: LD_INT 108
51519: PUSH
51520: LD_INT 109
51522: PUSH
51523: LD_INT 110
51525: PUSH
51526: LD_INT 111
51528: PUSH
51529: LD_INT 112
51531: PUSH
51532: LD_INT 113
51534: PUSH
51535: LD_INT 114
51537: PUSH
51538: LD_INT 115
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: ST_TO_ADDR
// if result then
51562: LD_VAR 0 1
51566: IFFALSE 51855
// begin normal :=  ;
51568: LD_ADDR_VAR 0 3
51572: PUSH
51573: LD_STRING 
51575: ST_TO_ADDR
// hardcore :=  ;
51576: LD_ADDR_VAR 0 4
51580: PUSH
51581: LD_STRING 
51583: ST_TO_ADDR
// for i = 1 to normalCounter do
51584: LD_ADDR_VAR 0 5
51588: PUSH
51589: DOUBLE
51590: LD_INT 1
51592: DEC
51593: ST_TO_ADDR
51594: LD_EXP 32
51598: PUSH
51599: FOR_TO
51600: IFFALSE 51701
// begin tmp := 0 ;
51602: LD_ADDR_VAR 0 2
51606: PUSH
51607: LD_STRING 0
51609: ST_TO_ADDR
// if result [ 1 ] then
51610: LD_VAR 0 1
51614: PUSH
51615: LD_INT 1
51617: ARRAY
51618: IFFALSE 51683
// if result [ 1 ] [ 1 ] = i then
51620: LD_VAR 0 1
51624: PUSH
51625: LD_INT 1
51627: ARRAY
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PUSH
51633: LD_VAR 0 5
51637: EQUAL
51638: IFFALSE 51683
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51640: LD_ADDR_VAR 0 1
51644: PUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: LD_INT 1
51652: PPUSH
51653: LD_VAR 0 1
51657: PUSH
51658: LD_INT 1
51660: ARRAY
51661: PPUSH
51662: LD_INT 1
51664: PPUSH
51665: CALL_OW 3
51669: PPUSH
51670: CALL_OW 1
51674: ST_TO_ADDR
// tmp := 1 ;
51675: LD_ADDR_VAR 0 2
51679: PUSH
51680: LD_STRING 1
51682: ST_TO_ADDR
// end ; normal := normal & tmp ;
51683: LD_ADDR_VAR 0 3
51687: PUSH
51688: LD_VAR 0 3
51692: PUSH
51693: LD_VAR 0 2
51697: STR
51698: ST_TO_ADDR
// end ;
51699: GO 51599
51701: POP
51702: POP
// for i = 1 to hardcoreCounter do
51703: LD_ADDR_VAR 0 5
51707: PUSH
51708: DOUBLE
51709: LD_INT 1
51711: DEC
51712: ST_TO_ADDR
51713: LD_EXP 33
51717: PUSH
51718: FOR_TO
51719: IFFALSE 51824
// begin tmp := 0 ;
51721: LD_ADDR_VAR 0 2
51725: PUSH
51726: LD_STRING 0
51728: ST_TO_ADDR
// if result [ 2 ] then
51729: LD_VAR 0 1
51733: PUSH
51734: LD_INT 2
51736: ARRAY
51737: IFFALSE 51806
// if result [ 2 ] [ 1 ] = 100 + i then
51739: LD_VAR 0 1
51743: PUSH
51744: LD_INT 2
51746: ARRAY
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: PUSH
51752: LD_INT 100
51754: PUSH
51755: LD_VAR 0 5
51759: PLUS
51760: EQUAL
51761: IFFALSE 51806
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51763: LD_ADDR_VAR 0 1
51767: PUSH
51768: LD_VAR 0 1
51772: PPUSH
51773: LD_INT 2
51775: PPUSH
51776: LD_VAR 0 1
51780: PUSH
51781: LD_INT 2
51783: ARRAY
51784: PPUSH
51785: LD_INT 1
51787: PPUSH
51788: CALL_OW 3
51792: PPUSH
51793: CALL_OW 1
51797: ST_TO_ADDR
// tmp := 1 ;
51798: LD_ADDR_VAR 0 2
51802: PUSH
51803: LD_STRING 1
51805: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51806: LD_ADDR_VAR 0 4
51810: PUSH
51811: LD_VAR 0 4
51815: PUSH
51816: LD_VAR 0 2
51820: STR
51821: ST_TO_ADDR
// end ;
51822: GO 51718
51824: POP
51825: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
51826: LD_STRING getStreamItemsFromMission("
51828: PUSH
51829: LD_VAR 0 3
51833: STR
51834: PUSH
51835: LD_STRING ","
51837: STR
51838: PUSH
51839: LD_VAR 0 4
51843: STR
51844: PUSH
51845: LD_STRING ")
51847: STR
51848: PPUSH
51849: CALL_OW 559
// end else
51853: GO 51862
// ToLua ( getStreamItemsFromMission("","") ) ;
51855: LD_STRING getStreamItemsFromMission("","")
51857: PPUSH
51858: CALL_OW 559
// end ;
51862: LD_VAR 0 1
51866: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51867: LD_EXP 31
51871: PUSH
51872: LD_EXP 36
51876: AND
51877: IFFALSE 52001
51879: GO 51881
51881: DISABLE
51882: LD_INT 0
51884: PPUSH
51885: PPUSH
// begin enable ;
51886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51887: LD_ADDR_VAR 0 2
51891: PUSH
51892: LD_INT 22
51894: PUSH
51895: LD_OWVAR 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 34
51909: PUSH
51910: LD_INT 7
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 34
51919: PUSH
51920: LD_INT 45
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 34
51929: PUSH
51930: LD_INT 28
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 34
51939: PUSH
51940: LD_INT 47
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PPUSH
51958: CALL_OW 69
51962: ST_TO_ADDR
// if not tmp then
51963: LD_VAR 0 2
51967: NOT
51968: IFFALSE 51972
// exit ;
51970: GO 52001
// for i in tmp do
51972: LD_ADDR_VAR 0 1
51976: PUSH
51977: LD_VAR 0 2
51981: PUSH
51982: FOR_IN
51983: IFFALSE 51999
// begin SetLives ( i , 0 ) ;
51985: LD_VAR 0 1
51989: PPUSH
51990: LD_INT 0
51992: PPUSH
51993: CALL_OW 234
// end ;
51997: GO 51982
51999: POP
52000: POP
// end ;
52001: PPOPN 2
52003: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52004: LD_EXP 31
52008: PUSH
52009: LD_EXP 37
52013: AND
52014: IFFALSE 52098
52016: GO 52018
52018: DISABLE
52019: LD_INT 0
52021: PPUSH
52022: PPUSH
// begin enable ;
52023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52024: LD_ADDR_VAR 0 2
52028: PUSH
52029: LD_INT 22
52031: PUSH
52032: LD_OWVAR 2
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 32
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PPUSH
52055: CALL_OW 69
52059: ST_TO_ADDR
// if not tmp then
52060: LD_VAR 0 2
52064: NOT
52065: IFFALSE 52069
// exit ;
52067: GO 52098
// for i in tmp do
52069: LD_ADDR_VAR 0 1
52073: PUSH
52074: LD_VAR 0 2
52078: PUSH
52079: FOR_IN
52080: IFFALSE 52096
// begin SetLives ( i , 0 ) ;
52082: LD_VAR 0 1
52086: PPUSH
52087: LD_INT 0
52089: PPUSH
52090: CALL_OW 234
// end ;
52094: GO 52079
52096: POP
52097: POP
// end ;
52098: PPOPN 2
52100: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52101: LD_EXP 31
52105: PUSH
52106: LD_EXP 34
52110: AND
52111: IFFALSE 52204
52113: GO 52115
52115: DISABLE
52116: LD_INT 0
52118: PPUSH
// begin enable ;
52119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52120: LD_ADDR_VAR 0 1
52124: PUSH
52125: LD_INT 22
52127: PUSH
52128: LD_OWVAR 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 25
52142: PUSH
52143: LD_INT 5
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 25
52152: PUSH
52153: LD_INT 9
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 25
52162: PUSH
52163: LD_INT 8
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PPUSH
52180: CALL_OW 69
52184: PUSH
52185: FOR_IN
52186: IFFALSE 52202
// begin SetClass ( i , 1 ) ;
52188: LD_VAR 0 1
52192: PPUSH
52193: LD_INT 1
52195: PPUSH
52196: CALL_OW 336
// end ;
52200: GO 52185
52202: POP
52203: POP
// end ;
52204: PPOPN 1
52206: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52207: LD_EXP 31
52211: PUSH
52212: LD_EXP 35
52216: AND
52217: PUSH
52218: LD_OWVAR 65
52222: PUSH
52223: LD_INT 7
52225: LESS
52226: AND
52227: IFFALSE 52241
52229: GO 52231
52231: DISABLE
// begin enable ;
52232: ENABLE
// game_speed := 7 ;
52233: LD_ADDR_OWVAR 65
52237: PUSH
52238: LD_INT 7
52240: ST_TO_ADDR
// end ;
52241: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52242: LD_EXP 31
52246: PUSH
52247: LD_EXP 38
52251: AND
52252: IFFALSE 52454
52254: GO 52256
52256: DISABLE
52257: LD_INT 0
52259: PPUSH
52260: PPUSH
52261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52262: LD_ADDR_VAR 0 3
52266: PUSH
52267: LD_INT 81
52269: PUSH
52270: LD_OWVAR 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 21
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PPUSH
52293: CALL_OW 69
52297: ST_TO_ADDR
// if not tmp then
52298: LD_VAR 0 3
52302: NOT
52303: IFFALSE 52307
// exit ;
52305: GO 52454
// if tmp > 5 then
52307: LD_VAR 0 3
52311: PUSH
52312: LD_INT 5
52314: GREATER
52315: IFFALSE 52327
// k := 5 else
52317: LD_ADDR_VAR 0 2
52321: PUSH
52322: LD_INT 5
52324: ST_TO_ADDR
52325: GO 52337
// k := tmp ;
52327: LD_ADDR_VAR 0 2
52331: PUSH
52332: LD_VAR 0 3
52336: ST_TO_ADDR
// for i := 1 to k do
52337: LD_ADDR_VAR 0 1
52341: PUSH
52342: DOUBLE
52343: LD_INT 1
52345: DEC
52346: ST_TO_ADDR
52347: LD_VAR 0 2
52351: PUSH
52352: FOR_TO
52353: IFFALSE 52452
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52355: LD_VAR 0 3
52359: PUSH
52360: LD_VAR 0 1
52364: ARRAY
52365: PPUSH
52366: LD_VAR 0 1
52370: PUSH
52371: LD_INT 4
52373: MOD
52374: PUSH
52375: LD_INT 1
52377: PLUS
52378: PPUSH
52379: CALL_OW 259
52383: PUSH
52384: LD_INT 10
52386: LESS
52387: IFFALSE 52450
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52389: LD_VAR 0 3
52393: PUSH
52394: LD_VAR 0 1
52398: ARRAY
52399: PPUSH
52400: LD_VAR 0 1
52404: PUSH
52405: LD_INT 4
52407: MOD
52408: PUSH
52409: LD_INT 1
52411: PLUS
52412: PPUSH
52413: LD_VAR 0 3
52417: PUSH
52418: LD_VAR 0 1
52422: ARRAY
52423: PPUSH
52424: LD_VAR 0 1
52428: PUSH
52429: LD_INT 4
52431: MOD
52432: PUSH
52433: LD_INT 1
52435: PLUS
52436: PPUSH
52437: CALL_OW 259
52441: PUSH
52442: LD_INT 1
52444: PLUS
52445: PPUSH
52446: CALL_OW 237
52450: GO 52352
52452: POP
52453: POP
// end ;
52454: PPOPN 3
52456: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52457: LD_EXP 31
52461: PUSH
52462: LD_EXP 39
52466: AND
52467: IFFALSE 52487
52469: GO 52471
52471: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52472: LD_INT 4
52474: PPUSH
52475: LD_OWVAR 2
52479: PPUSH
52480: LD_INT 0
52482: PPUSH
52483: CALL_OW 324
52487: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52488: LD_EXP 31
52492: PUSH
52493: LD_EXP 68
52497: AND
52498: IFFALSE 52518
52500: GO 52502
52502: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52503: LD_INT 19
52505: PPUSH
52506: LD_OWVAR 2
52510: PPUSH
52511: LD_INT 0
52513: PPUSH
52514: CALL_OW 324
52518: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52519: LD_EXP 31
52523: PUSH
52524: LD_EXP 40
52528: AND
52529: IFFALSE 52631
52531: GO 52533
52533: DISABLE
52534: LD_INT 0
52536: PPUSH
52537: PPUSH
// begin enable ;
52538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52539: LD_ADDR_VAR 0 2
52543: PUSH
52544: LD_INT 22
52546: PUSH
52547: LD_OWVAR 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 34
52561: PUSH
52562: LD_INT 11
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 34
52571: PUSH
52572: LD_INT 30
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PPUSH
52588: CALL_OW 69
52592: ST_TO_ADDR
// if not tmp then
52593: LD_VAR 0 2
52597: NOT
52598: IFFALSE 52602
// exit ;
52600: GO 52631
// for i in tmp do
52602: LD_ADDR_VAR 0 1
52606: PUSH
52607: LD_VAR 0 2
52611: PUSH
52612: FOR_IN
52613: IFFALSE 52629
// begin SetLives ( i , 0 ) ;
52615: LD_VAR 0 1
52619: PPUSH
52620: LD_INT 0
52622: PPUSH
52623: CALL_OW 234
// end ;
52627: GO 52612
52629: POP
52630: POP
// end ;
52631: PPOPN 2
52633: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52634: LD_EXP 31
52638: PUSH
52639: LD_EXP 41
52643: AND
52644: IFFALSE 52664
52646: GO 52648
52648: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52649: LD_INT 32
52651: PPUSH
52652: LD_OWVAR 2
52656: PPUSH
52657: LD_INT 0
52659: PPUSH
52660: CALL_OW 324
52664: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52665: LD_EXP 31
52669: PUSH
52670: LD_EXP 42
52674: AND
52675: IFFALSE 52856
52677: GO 52679
52679: DISABLE
52680: LD_INT 0
52682: PPUSH
52683: PPUSH
52684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_INT 22
52692: PUSH
52693: LD_OWVAR 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 33
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PPUSH
52716: CALL_OW 69
52720: ST_TO_ADDR
// if not tmp then
52721: LD_VAR 0 2
52725: NOT
52726: IFFALSE 52730
// exit ;
52728: GO 52856
// side := 0 ;
52730: LD_ADDR_VAR 0 3
52734: PUSH
52735: LD_INT 0
52737: ST_TO_ADDR
// for i := 1 to 8 do
52738: LD_ADDR_VAR 0 1
52742: PUSH
52743: DOUBLE
52744: LD_INT 1
52746: DEC
52747: ST_TO_ADDR
52748: LD_INT 8
52750: PUSH
52751: FOR_TO
52752: IFFALSE 52800
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52754: LD_OWVAR 2
52758: PUSH
52759: LD_VAR 0 1
52763: NONEQUAL
52764: PUSH
52765: LD_OWVAR 2
52769: PPUSH
52770: LD_VAR 0 1
52774: PPUSH
52775: CALL_OW 81
52779: PUSH
52780: LD_INT 2
52782: EQUAL
52783: AND
52784: IFFALSE 52798
// begin side := i ;
52786: LD_ADDR_VAR 0 3
52790: PUSH
52791: LD_VAR 0 1
52795: ST_TO_ADDR
// break ;
52796: GO 52800
// end ;
52798: GO 52751
52800: POP
52801: POP
// if not side then
52802: LD_VAR 0 3
52806: NOT
52807: IFFALSE 52811
// exit ;
52809: GO 52856
// for i := 1 to tmp do
52811: LD_ADDR_VAR 0 1
52815: PUSH
52816: DOUBLE
52817: LD_INT 1
52819: DEC
52820: ST_TO_ADDR
52821: LD_VAR 0 2
52825: PUSH
52826: FOR_TO
52827: IFFALSE 52854
// if Prob ( 60 ) then
52829: LD_INT 60
52831: PPUSH
52832: CALL_OW 13
52836: IFFALSE 52852
// SetSide ( i , side ) ;
52838: LD_VAR 0 1
52842: PPUSH
52843: LD_VAR 0 3
52847: PPUSH
52848: CALL_OW 235
52852: GO 52826
52854: POP
52855: POP
// end ;
52856: PPOPN 3
52858: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52859: LD_EXP 31
52863: PUSH
52864: LD_EXP 44
52868: AND
52869: IFFALSE 52988
52871: GO 52873
52873: DISABLE
52874: LD_INT 0
52876: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52877: LD_ADDR_VAR 0 1
52881: PUSH
52882: LD_INT 22
52884: PUSH
52885: LD_OWVAR 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 21
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 23
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: PPUSH
52926: CALL_OW 69
52930: PUSH
52931: FOR_IN
52932: IFFALSE 52986
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52934: LD_VAR 0 1
52938: PPUSH
52939: CALL_OW 257
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: IN
52962: IFFALSE 52984
// SetClass ( un , rand ( 1 , 4 ) ) ;
52964: LD_VAR 0 1
52968: PPUSH
52969: LD_INT 1
52971: PPUSH
52972: LD_INT 4
52974: PPUSH
52975: CALL_OW 12
52979: PPUSH
52980: CALL_OW 336
52984: GO 52931
52986: POP
52987: POP
// end ;
52988: PPOPN 1
52990: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52991: LD_EXP 31
52995: PUSH
52996: LD_EXP 43
53000: AND
53001: IFFALSE 53080
53003: GO 53005
53005: DISABLE
53006: LD_INT 0
53008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53009: LD_ADDR_VAR 0 1
53013: PUSH
53014: LD_INT 22
53016: PUSH
53017: LD_OWVAR 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 21
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PPUSH
53040: CALL_OW 69
53044: ST_TO_ADDR
// if not tmp then
53045: LD_VAR 0 1
53049: NOT
53050: IFFALSE 53054
// exit ;
53052: GO 53080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53054: LD_VAR 0 1
53058: PUSH
53059: LD_INT 1
53061: PPUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 12
53071: ARRAY
53072: PPUSH
53073: LD_INT 100
53075: PPUSH
53076: CALL_OW 234
// end ;
53080: PPOPN 1
53082: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53083: LD_EXP 31
53087: PUSH
53088: LD_EXP 45
53092: AND
53093: IFFALSE 53191
53095: GO 53097
53097: DISABLE
53098: LD_INT 0
53100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53101: LD_ADDR_VAR 0 1
53105: PUSH
53106: LD_INT 22
53108: PUSH
53109: LD_OWVAR 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 21
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PPUSH
53132: CALL_OW 69
53136: ST_TO_ADDR
// if not tmp then
53137: LD_VAR 0 1
53141: NOT
53142: IFFALSE 53146
// exit ;
53144: GO 53191
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53146: LD_VAR 0 1
53150: PUSH
53151: LD_INT 1
53153: PPUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: CALL_OW 12
53163: ARRAY
53164: PPUSH
53165: LD_INT 1
53167: PPUSH
53168: LD_INT 4
53170: PPUSH
53171: CALL_OW 12
53175: PPUSH
53176: LD_INT 3000
53178: PPUSH
53179: LD_INT 9000
53181: PPUSH
53182: CALL_OW 12
53186: PPUSH
53187: CALL_OW 492
// end ;
53191: PPOPN 1
53193: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53194: LD_EXP 31
53198: PUSH
53199: LD_EXP 46
53203: AND
53204: IFFALSE 53224
53206: GO 53208
53208: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53209: LD_INT 1
53211: PPUSH
53212: LD_OWVAR 2
53216: PPUSH
53217: LD_INT 0
53219: PPUSH
53220: CALL_OW 324
53224: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53225: LD_EXP 31
53229: PUSH
53230: LD_EXP 47
53234: AND
53235: IFFALSE 53318
53237: GO 53239
53239: DISABLE
53240: LD_INT 0
53242: PPUSH
53243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53244: LD_ADDR_VAR 0 2
53248: PUSH
53249: LD_INT 22
53251: PUSH
53252: LD_OWVAR 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 21
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PPUSH
53275: CALL_OW 69
53279: ST_TO_ADDR
// if not tmp then
53280: LD_VAR 0 2
53284: NOT
53285: IFFALSE 53289
// exit ;
53287: GO 53318
// for i in tmp do
53289: LD_ADDR_VAR 0 1
53293: PUSH
53294: LD_VAR 0 2
53298: PUSH
53299: FOR_IN
53300: IFFALSE 53316
// SetBLevel ( i , 10 ) ;
53302: LD_VAR 0 1
53306: PPUSH
53307: LD_INT 10
53309: PPUSH
53310: CALL_OW 241
53314: GO 53299
53316: POP
53317: POP
// end ;
53318: PPOPN 2
53320: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53321: LD_EXP 31
53325: PUSH
53326: LD_EXP 48
53330: AND
53331: IFFALSE 53442
53333: GO 53335
53335: DISABLE
53336: LD_INT 0
53338: PPUSH
53339: PPUSH
53340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53341: LD_ADDR_VAR 0 3
53345: PUSH
53346: LD_INT 22
53348: PUSH
53349: LD_OWVAR 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 25
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PPUSH
53372: CALL_OW 69
53376: ST_TO_ADDR
// if not tmp then
53377: LD_VAR 0 3
53381: NOT
53382: IFFALSE 53386
// exit ;
53384: GO 53442
// un := tmp [ rand ( 1 , tmp ) ] ;
53386: LD_ADDR_VAR 0 2
53390: PUSH
53391: LD_VAR 0 3
53395: PUSH
53396: LD_INT 1
53398: PPUSH
53399: LD_VAR 0 3
53403: PPUSH
53404: CALL_OW 12
53408: ARRAY
53409: ST_TO_ADDR
// if Crawls ( un ) then
53410: LD_VAR 0 2
53414: PPUSH
53415: CALL_OW 318
53419: IFFALSE 53430
// ComWalk ( un ) ;
53421: LD_VAR 0 2
53425: PPUSH
53426: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53430: LD_VAR 0 2
53434: PPUSH
53435: LD_INT 5
53437: PPUSH
53438: CALL_OW 336
// end ;
53442: PPOPN 3
53444: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
53445: LD_EXP 31
53449: PUSH
53450: LD_EXP 49
53454: AND
53455: PUSH
53456: LD_OWVAR 67
53460: PUSH
53461: LD_INT 3
53463: LESS
53464: AND
53465: IFFALSE 53484
53467: GO 53469
53469: DISABLE
// Difficulty := Difficulty + 1 ;
53470: LD_ADDR_OWVAR 67
53474: PUSH
53475: LD_OWVAR 67
53479: PUSH
53480: LD_INT 1
53482: PLUS
53483: ST_TO_ADDR
53484: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53485: LD_EXP 31
53489: PUSH
53490: LD_EXP 50
53494: AND
53495: IFFALSE 53598
53497: GO 53499
53499: DISABLE
53500: LD_INT 0
53502: PPUSH
// begin for i := 1 to 5 do
53503: LD_ADDR_VAR 0 1
53507: PUSH
53508: DOUBLE
53509: LD_INT 1
53511: DEC
53512: ST_TO_ADDR
53513: LD_INT 5
53515: PUSH
53516: FOR_TO
53517: IFFALSE 53596
// begin uc_nation := nation_nature ;
53519: LD_ADDR_OWVAR 21
53523: PUSH
53524: LD_INT 0
53526: ST_TO_ADDR
// uc_side := 0 ;
53527: LD_ADDR_OWVAR 20
53531: PUSH
53532: LD_INT 0
53534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53535: LD_ADDR_OWVAR 29
53539: PUSH
53540: LD_INT 12
53542: PUSH
53543: LD_INT 12
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// hc_agressivity := 20 ;
53550: LD_ADDR_OWVAR 35
53554: PUSH
53555: LD_INT 20
53557: ST_TO_ADDR
// hc_class := class_tiger ;
53558: LD_ADDR_OWVAR 28
53562: PUSH
53563: LD_INT 14
53565: ST_TO_ADDR
// hc_gallery :=  ;
53566: LD_ADDR_OWVAR 33
53570: PUSH
53571: LD_STRING 
53573: ST_TO_ADDR
// hc_name :=  ;
53574: LD_ADDR_OWVAR 26
53578: PUSH
53579: LD_STRING 
53581: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53582: CALL_OW 44
53586: PPUSH
53587: LD_INT 0
53589: PPUSH
53590: CALL_OW 51
// end ;
53594: GO 53516
53596: POP
53597: POP
// end ;
53598: PPOPN 1
53600: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53601: LD_EXP 31
53605: PUSH
53606: LD_EXP 51
53610: AND
53611: IFFALSE 53620
53613: GO 53615
53615: DISABLE
// StreamSibBomb ;
53616: CALL 53621 0 0
53620: END
// export function StreamSibBomb ; var i , x , y ; begin
53621: LD_INT 0
53623: PPUSH
53624: PPUSH
53625: PPUSH
53626: PPUSH
// result := false ;
53627: LD_ADDR_VAR 0 1
53631: PUSH
53632: LD_INT 0
53634: ST_TO_ADDR
// for i := 1 to 16 do
53635: LD_ADDR_VAR 0 2
53639: PUSH
53640: DOUBLE
53641: LD_INT 1
53643: DEC
53644: ST_TO_ADDR
53645: LD_INT 16
53647: PUSH
53648: FOR_TO
53649: IFFALSE 53848
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53651: LD_ADDR_VAR 0 3
53655: PUSH
53656: LD_INT 10
53658: PUSH
53659: LD_INT 20
53661: PUSH
53662: LD_INT 30
53664: PUSH
53665: LD_INT 40
53667: PUSH
53668: LD_INT 50
53670: PUSH
53671: LD_INT 60
53673: PUSH
53674: LD_INT 70
53676: PUSH
53677: LD_INT 80
53679: PUSH
53680: LD_INT 90
53682: PUSH
53683: LD_INT 100
53685: PUSH
53686: LD_INT 110
53688: PUSH
53689: LD_INT 120
53691: PUSH
53692: LD_INT 130
53694: PUSH
53695: LD_INT 140
53697: PUSH
53698: LD_INT 150
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PPUSH
53721: LD_INT 15
53723: PPUSH
53724: CALL_OW 12
53728: ARRAY
53729: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53730: LD_ADDR_VAR 0 4
53734: PUSH
53735: LD_INT 10
53737: PUSH
53738: LD_INT 20
53740: PUSH
53741: LD_INT 30
53743: PUSH
53744: LD_INT 40
53746: PUSH
53747: LD_INT 50
53749: PUSH
53750: LD_INT 60
53752: PUSH
53753: LD_INT 70
53755: PUSH
53756: LD_INT 80
53758: PUSH
53759: LD_INT 90
53761: PUSH
53762: LD_INT 100
53764: PUSH
53765: LD_INT 110
53767: PUSH
53768: LD_INT 120
53770: PUSH
53771: LD_INT 130
53773: PUSH
53774: LD_INT 140
53776: PUSH
53777: LD_INT 150
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PPUSH
53800: LD_INT 15
53802: PPUSH
53803: CALL_OW 12
53807: ARRAY
53808: ST_TO_ADDR
// if ValidHex ( x , y ) then
53809: LD_VAR 0 3
53813: PPUSH
53814: LD_VAR 0 4
53818: PPUSH
53819: CALL_OW 488
53823: IFFALSE 53846
// begin result := [ x , y ] ;
53825: LD_ADDR_VAR 0 1
53829: PUSH
53830: LD_VAR 0 3
53834: PUSH
53835: LD_VAR 0 4
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// break ;
53844: GO 53848
// end ; end ;
53846: GO 53648
53848: POP
53849: POP
// if result then
53850: LD_VAR 0 1
53854: IFFALSE 53914
// begin ToLua ( playSibBomb() ) ;
53856: LD_STRING playSibBomb()
53858: PPUSH
53859: CALL_OW 559
// wait ( 0 0$14 ) ;
53863: LD_INT 490
53865: PPUSH
53866: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53870: LD_VAR 0 1
53874: PUSH
53875: LD_INT 1
53877: ARRAY
53878: PPUSH
53879: LD_VAR 0 1
53883: PUSH
53884: LD_INT 2
53886: ARRAY
53887: PPUSH
53888: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53892: LD_VAR 0 1
53896: PUSH
53897: LD_INT 1
53899: ARRAY
53900: PPUSH
53901: LD_VAR 0 1
53905: PUSH
53906: LD_INT 2
53908: ARRAY
53909: PPUSH
53910: CALL_OW 429
// end ; end ;
53914: LD_VAR 0 1
53918: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53919: LD_EXP 31
53923: PUSH
53924: LD_EXP 53
53928: AND
53929: IFFALSE 53941
53931: GO 53933
53933: DISABLE
// YouLost (  ) ;
53934: LD_STRING 
53936: PPUSH
53937: CALL_OW 104
53941: END
// every 0 0$1 trigger StreamModeActive and sFog do
53942: LD_EXP 31
53946: PUSH
53947: LD_EXP 52
53951: AND
53952: IFFALSE 53966
53954: GO 53956
53956: DISABLE
// FogOff ( your_side ) ;
53957: LD_OWVAR 2
53961: PPUSH
53962: CALL_OW 344
53966: END
// every 0 0$1 trigger StreamModeActive and sSun do
53967: LD_EXP 31
53971: PUSH
53972: LD_EXP 54
53976: AND
53977: IFFALSE 54005
53979: GO 53981
53981: DISABLE
// begin solar_recharge_percent := 0 ;
53982: LD_ADDR_OWVAR 79
53986: PUSH
53987: LD_INT 0
53989: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53990: LD_INT 10500
53992: PPUSH
53993: CALL_OW 67
// solar_recharge_percent := 100 ;
53997: LD_ADDR_OWVAR 79
54001: PUSH
54002: LD_INT 100
54004: ST_TO_ADDR
// end ;
54005: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54006: LD_EXP 31
54010: PUSH
54011: LD_EXP 55
54015: AND
54016: IFFALSE 54255
54018: GO 54020
54020: DISABLE
54021: LD_INT 0
54023: PPUSH
54024: PPUSH
54025: PPUSH
// begin tmp := [ ] ;
54026: LD_ADDR_VAR 0 3
54030: PUSH
54031: EMPTY
54032: ST_TO_ADDR
// for i := 1 to 6 do
54033: LD_ADDR_VAR 0 1
54037: PUSH
54038: DOUBLE
54039: LD_INT 1
54041: DEC
54042: ST_TO_ADDR
54043: LD_INT 6
54045: PUSH
54046: FOR_TO
54047: IFFALSE 54152
// begin uc_nation := nation_nature ;
54049: LD_ADDR_OWVAR 21
54053: PUSH
54054: LD_INT 0
54056: ST_TO_ADDR
// uc_side := 0 ;
54057: LD_ADDR_OWVAR 20
54061: PUSH
54062: LD_INT 0
54064: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54065: LD_ADDR_OWVAR 29
54069: PUSH
54070: LD_INT 12
54072: PUSH
54073: LD_INT 12
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// hc_agressivity := 20 ;
54080: LD_ADDR_OWVAR 35
54084: PUSH
54085: LD_INT 20
54087: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54088: LD_ADDR_OWVAR 28
54092: PUSH
54093: LD_INT 17
54095: ST_TO_ADDR
// hc_gallery :=  ;
54096: LD_ADDR_OWVAR 33
54100: PUSH
54101: LD_STRING 
54103: ST_TO_ADDR
// hc_name :=  ;
54104: LD_ADDR_OWVAR 26
54108: PUSH
54109: LD_STRING 
54111: ST_TO_ADDR
// un := CreateHuman ;
54112: LD_ADDR_VAR 0 2
54116: PUSH
54117: CALL_OW 44
54121: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54122: LD_VAR 0 2
54126: PPUSH
54127: LD_INT 1
54129: PPUSH
54130: CALL_OW 51
// tmp := tmp ^ un ;
54134: LD_ADDR_VAR 0 3
54138: PUSH
54139: LD_VAR 0 3
54143: PUSH
54144: LD_VAR 0 2
54148: ADD
54149: ST_TO_ADDR
// end ;
54150: GO 54046
54152: POP
54153: POP
// repeat wait ( 0 0$1 ) ;
54154: LD_INT 35
54156: PPUSH
54157: CALL_OW 67
// for un in tmp do
54161: LD_ADDR_VAR 0 2
54165: PUSH
54166: LD_VAR 0 3
54170: PUSH
54171: FOR_IN
54172: IFFALSE 54246
// begin if IsDead ( un ) then
54174: LD_VAR 0 2
54178: PPUSH
54179: CALL_OW 301
54183: IFFALSE 54203
// begin tmp := tmp diff un ;
54185: LD_ADDR_VAR 0 3
54189: PUSH
54190: LD_VAR 0 3
54194: PUSH
54195: LD_VAR 0 2
54199: DIFF
54200: ST_TO_ADDR
// continue ;
54201: GO 54171
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54203: LD_VAR 0 2
54207: PPUSH
54208: LD_INT 3
54210: PUSH
54211: LD_INT 22
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PPUSH
54225: CALL_OW 69
54229: PPUSH
54230: LD_VAR 0 2
54234: PPUSH
54235: CALL_OW 74
54239: PPUSH
54240: CALL_OW 115
// end ;
54244: GO 54171
54246: POP
54247: POP
// until not tmp ;
54248: LD_VAR 0 3
54252: NOT
54253: IFFALSE 54154
// end ;
54255: PPOPN 3
54257: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54258: LD_EXP 31
54262: PUSH
54263: LD_EXP 56
54267: AND
54268: IFFALSE 54322
54270: GO 54272
54272: DISABLE
// begin ToLua ( displayTroll(); ) ;
54273: LD_STRING displayTroll();
54275: PPUSH
54276: CALL_OW 559
// wait ( 3 3$00 ) ;
54280: LD_INT 6300
54282: PPUSH
54283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54287: LD_STRING hideTroll();
54289: PPUSH
54290: CALL_OW 559
// wait ( 1 1$00 ) ;
54294: LD_INT 2100
54296: PPUSH
54297: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54301: LD_STRING displayTroll();
54303: PPUSH
54304: CALL_OW 559
// wait ( 1 1$00 ) ;
54308: LD_INT 2100
54310: PPUSH
54311: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54315: LD_STRING hideTroll();
54317: PPUSH
54318: CALL_OW 559
// end ;
54322: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54323: LD_EXP 31
54327: PUSH
54328: LD_EXP 57
54332: AND
54333: IFFALSE 54396
54335: GO 54337
54337: DISABLE
54338: LD_INT 0
54340: PPUSH
// begin p := 0 ;
54341: LD_ADDR_VAR 0 1
54345: PUSH
54346: LD_INT 0
54348: ST_TO_ADDR
// repeat game_speed := 1 ;
54349: LD_ADDR_OWVAR 65
54353: PUSH
54354: LD_INT 1
54356: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54357: LD_INT 35
54359: PPUSH
54360: CALL_OW 67
// p := p + 1 ;
54364: LD_ADDR_VAR 0 1
54368: PUSH
54369: LD_VAR 0 1
54373: PUSH
54374: LD_INT 1
54376: PLUS
54377: ST_TO_ADDR
// until p >= 60 ;
54378: LD_VAR 0 1
54382: PUSH
54383: LD_INT 60
54385: GREATEREQUAL
54386: IFFALSE 54349
// game_speed := 4 ;
54388: LD_ADDR_OWVAR 65
54392: PUSH
54393: LD_INT 4
54395: ST_TO_ADDR
// end ;
54396: PPOPN 1
54398: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54399: LD_EXP 31
54403: PUSH
54404: LD_EXP 58
54408: AND
54409: IFFALSE 54555
54411: GO 54413
54413: DISABLE
54414: LD_INT 0
54416: PPUSH
54417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54418: LD_ADDR_VAR 0 1
54422: PUSH
54423: LD_INT 22
54425: PUSH
54426: LD_OWVAR 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 30
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 30
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PPUSH
54467: CALL_OW 69
54471: ST_TO_ADDR
// if not depot then
54472: LD_VAR 0 1
54476: NOT
54477: IFFALSE 54481
// exit ;
54479: GO 54555
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54481: LD_ADDR_VAR 0 2
54485: PUSH
54486: LD_VAR 0 1
54490: PUSH
54491: LD_INT 1
54493: PPUSH
54494: LD_VAR 0 1
54498: PPUSH
54499: CALL_OW 12
54503: ARRAY
54504: PPUSH
54505: CALL_OW 274
54509: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54510: LD_VAR 0 2
54514: PPUSH
54515: LD_INT 1
54517: PPUSH
54518: LD_INT 0
54520: PPUSH
54521: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54525: LD_VAR 0 2
54529: PPUSH
54530: LD_INT 2
54532: PPUSH
54533: LD_INT 0
54535: PPUSH
54536: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54540: LD_VAR 0 2
54544: PPUSH
54545: LD_INT 3
54547: PPUSH
54548: LD_INT 0
54550: PPUSH
54551: CALL_OW 277
// end ;
54555: PPOPN 2
54557: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54558: LD_EXP 31
54562: PUSH
54563: LD_EXP 59
54567: AND
54568: IFFALSE 54665
54570: GO 54572
54572: DISABLE
54573: LD_INT 0
54575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54576: LD_ADDR_VAR 0 1
54580: PUSH
54581: LD_INT 22
54583: PUSH
54584: LD_OWVAR 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 21
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: LD_INT 23
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: PPUSH
54625: CALL_OW 69
54629: ST_TO_ADDR
// if not tmp then
54630: LD_VAR 0 1
54634: NOT
54635: IFFALSE 54639
// exit ;
54637: GO 54665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54639: LD_VAR 0 1
54643: PUSH
54644: LD_INT 1
54646: PPUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: CALL_OW 12
54656: ARRAY
54657: PPUSH
54658: LD_INT 200
54660: PPUSH
54661: CALL_OW 234
// end ;
54665: PPOPN 1
54667: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54668: LD_EXP 31
54672: PUSH
54673: LD_EXP 60
54677: AND
54678: IFFALSE 54757
54680: GO 54682
54682: DISABLE
54683: LD_INT 0
54685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54686: LD_ADDR_VAR 0 1
54690: PUSH
54691: LD_INT 22
54693: PUSH
54694: LD_OWVAR 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 21
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PPUSH
54717: CALL_OW 69
54721: ST_TO_ADDR
// if not tmp then
54722: LD_VAR 0 1
54726: NOT
54727: IFFALSE 54731
// exit ;
54729: GO 54757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54731: LD_VAR 0 1
54735: PUSH
54736: LD_INT 1
54738: PPUSH
54739: LD_VAR 0 1
54743: PPUSH
54744: CALL_OW 12
54748: ARRAY
54749: PPUSH
54750: LD_INT 60
54752: PPUSH
54753: CALL_OW 234
// end ;
54757: PPOPN 1
54759: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54760: LD_EXP 31
54764: PUSH
54765: LD_EXP 61
54769: AND
54770: IFFALSE 54869
54772: GO 54774
54774: DISABLE
54775: LD_INT 0
54777: PPUSH
54778: PPUSH
// begin enable ;
54779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54780: LD_ADDR_VAR 0 1
54784: PUSH
54785: LD_INT 22
54787: PUSH
54788: LD_OWVAR 2
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 61
54799: PUSH
54800: EMPTY
54801: LIST
54802: PUSH
54803: LD_INT 33
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: PPUSH
54818: CALL_OW 69
54822: ST_TO_ADDR
// if not tmp then
54823: LD_VAR 0 1
54827: NOT
54828: IFFALSE 54832
// exit ;
54830: GO 54869
// for i in tmp do
54832: LD_ADDR_VAR 0 2
54836: PUSH
54837: LD_VAR 0 1
54841: PUSH
54842: FOR_IN
54843: IFFALSE 54867
// if IsControledBy ( i ) then
54845: LD_VAR 0 2
54849: PPUSH
54850: CALL_OW 312
54854: IFFALSE 54865
// ComUnlink ( i ) ;
54856: LD_VAR 0 2
54860: PPUSH
54861: CALL_OW 136
54865: GO 54842
54867: POP
54868: POP
// end ;
54869: PPOPN 2
54871: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54872: LD_EXP 31
54876: PUSH
54877: LD_EXP 62
54881: AND
54882: IFFALSE 55022
54884: GO 54886
54886: DISABLE
54887: LD_INT 0
54889: PPUSH
54890: PPUSH
// begin ToLua ( displayPowell(); ) ;
54891: LD_STRING displayPowell();
54893: PPUSH
54894: CALL_OW 559
// uc_side := 0 ;
54898: LD_ADDR_OWVAR 20
54902: PUSH
54903: LD_INT 0
54905: ST_TO_ADDR
// uc_nation := 2 ;
54906: LD_ADDR_OWVAR 21
54910: PUSH
54911: LD_INT 2
54913: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54914: LD_ADDR_OWVAR 37
54918: PUSH
54919: LD_INT 14
54921: ST_TO_ADDR
// vc_engine := engine_siberite ;
54922: LD_ADDR_OWVAR 39
54926: PUSH
54927: LD_INT 3
54929: ST_TO_ADDR
// vc_control := control_apeman ;
54930: LD_ADDR_OWVAR 38
54934: PUSH
54935: LD_INT 5
54937: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54938: LD_ADDR_OWVAR 40
54942: PUSH
54943: LD_INT 29
54945: ST_TO_ADDR
// un := CreateVehicle ;
54946: LD_ADDR_VAR 0 2
54950: PUSH
54951: CALL_OW 45
54955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54956: LD_VAR 0 2
54960: PPUSH
54961: LD_INT 1
54963: PPUSH
54964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54968: LD_INT 35
54970: PPUSH
54971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54975: LD_VAR 0 2
54979: PPUSH
54980: LD_INT 22
54982: PUSH
54983: LD_OWVAR 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PPUSH
54992: CALL_OW 69
54996: PPUSH
54997: LD_VAR 0 2
55001: PPUSH
55002: CALL_OW 74
55006: PPUSH
55007: CALL_OW 115
// until IsDead ( un ) ;
55011: LD_VAR 0 2
55015: PPUSH
55016: CALL_OW 301
55020: IFFALSE 54968
// end ;
55022: PPOPN 2
55024: END
// every 0 0$1 trigger StreamModeActive and sStu do
55025: LD_EXP 31
55029: PUSH
55030: LD_EXP 70
55034: AND
55035: IFFALSE 55051
55037: GO 55039
55039: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55040: LD_STRING displayStucuk();
55042: PPUSH
55043: CALL_OW 559
// ResetFog ;
55047: CALL_OW 335
// end ;
55051: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55052: LD_EXP 31
55056: PUSH
55057: LD_EXP 63
55061: AND
55062: IFFALSE 55203
55064: GO 55066
55066: DISABLE
55067: LD_INT 0
55069: PPUSH
55070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55071: LD_ADDR_VAR 0 2
55075: PUSH
55076: LD_INT 22
55078: PUSH
55079: LD_OWVAR 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 21
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PPUSH
55102: CALL_OW 69
55106: ST_TO_ADDR
// if not tmp then
55107: LD_VAR 0 2
55111: NOT
55112: IFFALSE 55116
// exit ;
55114: GO 55203
// un := tmp [ rand ( 1 , tmp ) ] ;
55116: LD_ADDR_VAR 0 1
55120: PUSH
55121: LD_VAR 0 2
55125: PUSH
55126: LD_INT 1
55128: PPUSH
55129: LD_VAR 0 2
55133: PPUSH
55134: CALL_OW 12
55138: ARRAY
55139: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55140: LD_VAR 0 1
55144: PPUSH
55145: LD_INT 0
55147: PPUSH
55148: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55152: LD_VAR 0 1
55156: PPUSH
55157: LD_OWVAR 3
55161: PUSH
55162: LD_VAR 0 1
55166: DIFF
55167: PPUSH
55168: LD_VAR 0 1
55172: PPUSH
55173: CALL_OW 74
55177: PPUSH
55178: CALL_OW 115
// wait ( 0 0$20 ) ;
55182: LD_INT 700
55184: PPUSH
55185: CALL_OW 67
// SetSide ( un , your_side ) ;
55189: LD_VAR 0 1
55193: PPUSH
55194: LD_OWVAR 2
55198: PPUSH
55199: CALL_OW 235
// end ;
55203: PPOPN 2
55205: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55206: LD_EXP 31
55210: PUSH
55211: LD_EXP 64
55215: AND
55216: IFFALSE 55322
55218: GO 55220
55220: DISABLE
55221: LD_INT 0
55223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55224: LD_ADDR_VAR 0 1
55228: PUSH
55229: LD_INT 22
55231: PUSH
55232: LD_OWVAR 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 30
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 30
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PPUSH
55273: CALL_OW 69
55277: ST_TO_ADDR
// if not depot then
55278: LD_VAR 0 1
55282: NOT
55283: IFFALSE 55287
// exit ;
55285: GO 55322
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55287: LD_VAR 0 1
55291: PUSH
55292: LD_INT 1
55294: ARRAY
55295: PPUSH
55296: CALL_OW 250
55300: PPUSH
55301: LD_VAR 0 1
55305: PUSH
55306: LD_INT 1
55308: ARRAY
55309: PPUSH
55310: CALL_OW 251
55314: PPUSH
55315: LD_INT 70
55317: PPUSH
55318: CALL_OW 495
// end ;
55322: PPOPN 1
55324: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55325: LD_EXP 31
55329: PUSH
55330: LD_EXP 65
55334: AND
55335: IFFALSE 55546
55337: GO 55339
55339: DISABLE
55340: LD_INT 0
55342: PPUSH
55343: PPUSH
55344: PPUSH
55345: PPUSH
55346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55347: LD_ADDR_VAR 0 5
55351: PUSH
55352: LD_INT 22
55354: PUSH
55355: LD_OWVAR 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 21
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PPUSH
55378: CALL_OW 69
55382: ST_TO_ADDR
// if not tmp then
55383: LD_VAR 0 5
55387: NOT
55388: IFFALSE 55392
// exit ;
55390: GO 55546
// for i in tmp do
55392: LD_ADDR_VAR 0 1
55396: PUSH
55397: LD_VAR 0 5
55401: PUSH
55402: FOR_IN
55403: IFFALSE 55544
// begin d := rand ( 0 , 5 ) ;
55405: LD_ADDR_VAR 0 4
55409: PUSH
55410: LD_INT 0
55412: PPUSH
55413: LD_INT 5
55415: PPUSH
55416: CALL_OW 12
55420: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55421: LD_ADDR_VAR 0 2
55425: PUSH
55426: LD_VAR 0 1
55430: PPUSH
55431: CALL_OW 250
55435: PPUSH
55436: LD_VAR 0 4
55440: PPUSH
55441: LD_INT 3
55443: PPUSH
55444: LD_INT 12
55446: PPUSH
55447: CALL_OW 12
55451: PPUSH
55452: CALL_OW 272
55456: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55457: LD_ADDR_VAR 0 3
55461: PUSH
55462: LD_VAR 0 1
55466: PPUSH
55467: CALL_OW 251
55471: PPUSH
55472: LD_VAR 0 4
55476: PPUSH
55477: LD_INT 3
55479: PPUSH
55480: LD_INT 12
55482: PPUSH
55483: CALL_OW 12
55487: PPUSH
55488: CALL_OW 273
55492: ST_TO_ADDR
// if ValidHex ( x , y ) then
55493: LD_VAR 0 2
55497: PPUSH
55498: LD_VAR 0 3
55502: PPUSH
55503: CALL_OW 488
55507: IFFALSE 55542
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55509: LD_VAR 0 1
55513: PPUSH
55514: LD_VAR 0 2
55518: PPUSH
55519: LD_VAR 0 3
55523: PPUSH
55524: LD_INT 3
55526: PPUSH
55527: LD_INT 6
55529: PPUSH
55530: CALL_OW 12
55534: PPUSH
55535: LD_INT 1
55537: PPUSH
55538: CALL_OW 483
// end ;
55542: GO 55402
55544: POP
55545: POP
// end ;
55546: PPOPN 5
55548: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55549: LD_EXP 31
55553: PUSH
55554: LD_EXP 66
55558: AND
55559: IFFALSE 55653
55561: GO 55563
55563: DISABLE
55564: LD_INT 0
55566: PPUSH
55567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55568: LD_ADDR_VAR 0 2
55572: PUSH
55573: LD_INT 22
55575: PUSH
55576: LD_OWVAR 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 32
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 21
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: PPUSH
55610: CALL_OW 69
55614: ST_TO_ADDR
// if not tmp then
55615: LD_VAR 0 2
55619: NOT
55620: IFFALSE 55624
// exit ;
55622: GO 55653
// for i in tmp do
55624: LD_ADDR_VAR 0 1
55628: PUSH
55629: LD_VAR 0 2
55633: PUSH
55634: FOR_IN
55635: IFFALSE 55651
// SetFuel ( i , 0 ) ;
55637: LD_VAR 0 1
55641: PPUSH
55642: LD_INT 0
55644: PPUSH
55645: CALL_OW 240
55649: GO 55634
55651: POP
55652: POP
// end ;
55653: PPOPN 2
55655: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55656: LD_EXP 31
55660: PUSH
55661: LD_EXP 67
55665: AND
55666: IFFALSE 55732
55668: GO 55670
55670: DISABLE
55671: LD_INT 0
55673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55674: LD_ADDR_VAR 0 1
55678: PUSH
55679: LD_INT 22
55681: PUSH
55682: LD_OWVAR 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 30
55693: PUSH
55694: LD_INT 29
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PPUSH
55705: CALL_OW 69
55709: ST_TO_ADDR
// if not tmp then
55710: LD_VAR 0 1
55714: NOT
55715: IFFALSE 55719
// exit ;
55717: GO 55732
// DestroyUnit ( tmp [ 1 ] ) ;
55719: LD_VAR 0 1
55723: PUSH
55724: LD_INT 1
55726: ARRAY
55727: PPUSH
55728: CALL_OW 65
// end ;
55732: PPOPN 1
55734: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55735: LD_EXP 31
55739: PUSH
55740: LD_EXP 69
55744: AND
55745: IFFALSE 55874
55747: GO 55749
55749: DISABLE
55750: LD_INT 0
55752: PPUSH
// begin uc_side := 0 ;
55753: LD_ADDR_OWVAR 20
55757: PUSH
55758: LD_INT 0
55760: ST_TO_ADDR
// uc_nation := nation_arabian ;
55761: LD_ADDR_OWVAR 21
55765: PUSH
55766: LD_INT 2
55768: ST_TO_ADDR
// hc_gallery :=  ;
55769: LD_ADDR_OWVAR 33
55773: PUSH
55774: LD_STRING 
55776: ST_TO_ADDR
// hc_name :=  ;
55777: LD_ADDR_OWVAR 26
55781: PUSH
55782: LD_STRING 
55784: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55785: LD_INT 1
55787: PPUSH
55788: LD_INT 11
55790: PPUSH
55791: LD_INT 10
55793: PPUSH
55794: CALL_OW 380
// un := CreateHuman ;
55798: LD_ADDR_VAR 0 1
55802: PUSH
55803: CALL_OW 44
55807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55808: LD_VAR 0 1
55812: PPUSH
55813: LD_INT 1
55815: PPUSH
55816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55820: LD_INT 35
55822: PPUSH
55823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55827: LD_VAR 0 1
55831: PPUSH
55832: LD_INT 22
55834: PUSH
55835: LD_OWVAR 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PPUSH
55844: CALL_OW 69
55848: PPUSH
55849: LD_VAR 0 1
55853: PPUSH
55854: CALL_OW 74
55858: PPUSH
55859: CALL_OW 115
// until IsDead ( un ) ;
55863: LD_VAR 0 1
55867: PPUSH
55868: CALL_OW 301
55872: IFFALSE 55820
// end ;
55874: PPOPN 1
55876: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55877: LD_EXP 31
55881: PUSH
55882: LD_EXP 71
55886: AND
55887: IFFALSE 55899
55889: GO 55891
55891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55892: LD_STRING earthquake(getX(game), 0, 32)
55894: PPUSH
55895: CALL_OW 559
55899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55900: LD_EXP 31
55904: PUSH
55905: LD_EXP 72
55909: AND
55910: IFFALSE 56001
55912: GO 55914
55914: DISABLE
55915: LD_INT 0
55917: PPUSH
// begin enable ;
55918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55919: LD_ADDR_VAR 0 1
55923: PUSH
55924: LD_INT 22
55926: PUSH
55927: LD_OWVAR 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 21
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 33
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: PPUSH
55961: CALL_OW 69
55965: ST_TO_ADDR
// if not tmp then
55966: LD_VAR 0 1
55970: NOT
55971: IFFALSE 55975
// exit ;
55973: GO 56001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55975: LD_VAR 0 1
55979: PUSH
55980: LD_INT 1
55982: PPUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: CALL_OW 12
55992: ARRAY
55993: PPUSH
55994: LD_INT 1
55996: PPUSH
55997: CALL_OW 234
// end ;
56001: PPOPN 1
56003: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56004: LD_EXP 31
56008: PUSH
56009: LD_EXP 73
56013: AND
56014: IFFALSE 56155
56016: GO 56018
56018: DISABLE
56019: LD_INT 0
56021: PPUSH
56022: PPUSH
56023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: LD_INT 22
56031: PUSH
56032: LD_OWVAR 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 25
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PPUSH
56055: CALL_OW 69
56059: ST_TO_ADDR
// if not tmp then
56060: LD_VAR 0 3
56064: NOT
56065: IFFALSE 56069
// exit ;
56067: GO 56155
// un := tmp [ rand ( 1 , tmp ) ] ;
56069: LD_ADDR_VAR 0 2
56073: PUSH
56074: LD_VAR 0 3
56078: PUSH
56079: LD_INT 1
56081: PPUSH
56082: LD_VAR 0 3
56086: PPUSH
56087: CALL_OW 12
56091: ARRAY
56092: ST_TO_ADDR
// if Crawls ( un ) then
56093: LD_VAR 0 2
56097: PPUSH
56098: CALL_OW 318
56102: IFFALSE 56113
// ComWalk ( un ) ;
56104: LD_VAR 0 2
56108: PPUSH
56109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56113: LD_VAR 0 2
56117: PPUSH
56118: LD_INT 9
56120: PPUSH
56121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56125: LD_INT 28
56127: PPUSH
56128: LD_OWVAR 2
56132: PPUSH
56133: LD_INT 2
56135: PPUSH
56136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56140: LD_INT 29
56142: PPUSH
56143: LD_OWVAR 2
56147: PPUSH
56148: LD_INT 2
56150: PPUSH
56151: CALL_OW 322
// end ;
56155: PPOPN 3
56157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56158: LD_EXP 31
56162: PUSH
56163: LD_EXP 74
56167: AND
56168: IFFALSE 56279
56170: GO 56172
56172: DISABLE
56173: LD_INT 0
56175: PPUSH
56176: PPUSH
56177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56178: LD_ADDR_VAR 0 3
56182: PUSH
56183: LD_INT 22
56185: PUSH
56186: LD_OWVAR 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 25
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PPUSH
56209: CALL_OW 69
56213: ST_TO_ADDR
// if not tmp then
56214: LD_VAR 0 3
56218: NOT
56219: IFFALSE 56223
// exit ;
56221: GO 56279
// un := tmp [ rand ( 1 , tmp ) ] ;
56223: LD_ADDR_VAR 0 2
56227: PUSH
56228: LD_VAR 0 3
56232: PUSH
56233: LD_INT 1
56235: PPUSH
56236: LD_VAR 0 3
56240: PPUSH
56241: CALL_OW 12
56245: ARRAY
56246: ST_TO_ADDR
// if Crawls ( un ) then
56247: LD_VAR 0 2
56251: PPUSH
56252: CALL_OW 318
56256: IFFALSE 56267
// ComWalk ( un ) ;
56258: LD_VAR 0 2
56262: PPUSH
56263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56267: LD_VAR 0 2
56271: PPUSH
56272: LD_INT 8
56274: PPUSH
56275: CALL_OW 336
// end ;
56279: PPOPN 3
56281: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56282: LD_EXP 31
56286: PUSH
56287: LD_EXP 75
56291: AND
56292: IFFALSE 56436
56294: GO 56296
56296: DISABLE
56297: LD_INT 0
56299: PPUSH
56300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56301: LD_ADDR_VAR 0 2
56305: PUSH
56306: LD_INT 22
56308: PUSH
56309: LD_OWVAR 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 21
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 34
56333: PUSH
56334: LD_INT 12
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 34
56343: PUSH
56344: LD_INT 51
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 34
56353: PUSH
56354: LD_INT 32
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: PPUSH
56372: CALL_OW 69
56376: ST_TO_ADDR
// if not tmp then
56377: LD_VAR 0 2
56381: NOT
56382: IFFALSE 56386
// exit ;
56384: GO 56436
// for i in tmp do
56386: LD_ADDR_VAR 0 1
56390: PUSH
56391: LD_VAR 0 2
56395: PUSH
56396: FOR_IN
56397: IFFALSE 56434
// if GetCargo ( i , mat_artifact ) = 0 then
56399: LD_VAR 0 1
56403: PPUSH
56404: LD_INT 4
56406: PPUSH
56407: CALL_OW 289
56411: PUSH
56412: LD_INT 0
56414: EQUAL
56415: IFFALSE 56432
// SetCargo ( i , mat_siberit , 100 ) ;
56417: LD_VAR 0 1
56421: PPUSH
56422: LD_INT 3
56424: PPUSH
56425: LD_INT 100
56427: PPUSH
56428: CALL_OW 290
56432: GO 56396
56434: POP
56435: POP
// end ;
56436: PPOPN 2
56438: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56439: LD_EXP 31
56443: PUSH
56444: LD_EXP 76
56448: AND
56449: IFFALSE 56632
56451: GO 56453
56453: DISABLE
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56458: LD_ADDR_VAR 0 2
56462: PUSH
56463: LD_INT 22
56465: PUSH
56466: LD_OWVAR 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PPUSH
56475: CALL_OW 69
56479: ST_TO_ADDR
// if not tmp then
56480: LD_VAR 0 2
56484: NOT
56485: IFFALSE 56489
// exit ;
56487: GO 56632
// for i := 1 to 2 do
56489: LD_ADDR_VAR 0 1
56493: PUSH
56494: DOUBLE
56495: LD_INT 1
56497: DEC
56498: ST_TO_ADDR
56499: LD_INT 2
56501: PUSH
56502: FOR_TO
56503: IFFALSE 56630
// begin uc_side := your_side ;
56505: LD_ADDR_OWVAR 20
56509: PUSH
56510: LD_OWVAR 2
56514: ST_TO_ADDR
// uc_nation := nation_american ;
56515: LD_ADDR_OWVAR 21
56519: PUSH
56520: LD_INT 1
56522: ST_TO_ADDR
// vc_chassis := us_morphling ;
56523: LD_ADDR_OWVAR 37
56527: PUSH
56528: LD_INT 5
56530: ST_TO_ADDR
// vc_engine := engine_siberite ;
56531: LD_ADDR_OWVAR 39
56535: PUSH
56536: LD_INT 3
56538: ST_TO_ADDR
// vc_control := control_computer ;
56539: LD_ADDR_OWVAR 38
56543: PUSH
56544: LD_INT 3
56546: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56547: LD_ADDR_OWVAR 40
56551: PUSH
56552: LD_INT 10
56554: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56555: LD_VAR 0 2
56559: PUSH
56560: LD_INT 1
56562: ARRAY
56563: PPUSH
56564: CALL_OW 310
56568: NOT
56569: IFFALSE 56616
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56571: CALL_OW 45
56575: PPUSH
56576: LD_VAR 0 2
56580: PUSH
56581: LD_INT 1
56583: ARRAY
56584: PPUSH
56585: CALL_OW 250
56589: PPUSH
56590: LD_VAR 0 2
56594: PUSH
56595: LD_INT 1
56597: ARRAY
56598: PPUSH
56599: CALL_OW 251
56603: PPUSH
56604: LD_INT 12
56606: PPUSH
56607: LD_INT 1
56609: PPUSH
56610: CALL_OW 50
56614: GO 56628
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56616: CALL_OW 45
56620: PPUSH
56621: LD_INT 1
56623: PPUSH
56624: CALL_OW 51
// end ;
56628: GO 56502
56630: POP
56631: POP
// end ;
56632: PPOPN 2
56634: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56635: LD_EXP 31
56639: PUSH
56640: LD_EXP 77
56644: AND
56645: IFFALSE 56867
56647: GO 56649
56649: DISABLE
56650: LD_INT 0
56652: PPUSH
56653: PPUSH
56654: PPUSH
56655: PPUSH
56656: PPUSH
56657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56658: LD_ADDR_VAR 0 6
56662: PUSH
56663: LD_INT 22
56665: PUSH
56666: LD_OWVAR 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 21
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 23
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: PPUSH
56707: CALL_OW 69
56711: ST_TO_ADDR
// if not tmp then
56712: LD_VAR 0 6
56716: NOT
56717: IFFALSE 56721
// exit ;
56719: GO 56867
// s1 := rand ( 1 , 4 ) ;
56721: LD_ADDR_VAR 0 2
56725: PUSH
56726: LD_INT 1
56728: PPUSH
56729: LD_INT 4
56731: PPUSH
56732: CALL_OW 12
56736: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56737: LD_ADDR_VAR 0 4
56741: PUSH
56742: LD_VAR 0 6
56746: PUSH
56747: LD_INT 1
56749: ARRAY
56750: PPUSH
56751: LD_VAR 0 2
56755: PPUSH
56756: CALL_OW 259
56760: ST_TO_ADDR
// if s1 = 1 then
56761: LD_VAR 0 2
56765: PUSH
56766: LD_INT 1
56768: EQUAL
56769: IFFALSE 56789
// s2 := rand ( 2 , 4 ) else
56771: LD_ADDR_VAR 0 3
56775: PUSH
56776: LD_INT 2
56778: PPUSH
56779: LD_INT 4
56781: PPUSH
56782: CALL_OW 12
56786: ST_TO_ADDR
56787: GO 56797
// s2 := 1 ;
56789: LD_ADDR_VAR 0 3
56793: PUSH
56794: LD_INT 1
56796: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56797: LD_ADDR_VAR 0 5
56801: PUSH
56802: LD_VAR 0 6
56806: PUSH
56807: LD_INT 1
56809: ARRAY
56810: PPUSH
56811: LD_VAR 0 3
56815: PPUSH
56816: CALL_OW 259
56820: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56821: LD_VAR 0 6
56825: PUSH
56826: LD_INT 1
56828: ARRAY
56829: PPUSH
56830: LD_VAR 0 2
56834: PPUSH
56835: LD_VAR 0 5
56839: PPUSH
56840: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56844: LD_VAR 0 6
56848: PUSH
56849: LD_INT 1
56851: ARRAY
56852: PPUSH
56853: LD_VAR 0 3
56857: PPUSH
56858: LD_VAR 0 4
56862: PPUSH
56863: CALL_OW 237
// end ;
56867: PPOPN 6
56869: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56870: LD_EXP 31
56874: PUSH
56875: LD_EXP 78
56879: AND
56880: IFFALSE 56959
56882: GO 56884
56884: DISABLE
56885: LD_INT 0
56887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56888: LD_ADDR_VAR 0 1
56892: PUSH
56893: LD_INT 22
56895: PUSH
56896: LD_OWVAR 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 30
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PPUSH
56919: CALL_OW 69
56923: ST_TO_ADDR
// if not tmp then
56924: LD_VAR 0 1
56928: NOT
56929: IFFALSE 56933
// exit ;
56931: GO 56959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56933: LD_VAR 0 1
56937: PUSH
56938: LD_INT 1
56940: PPUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 12
56950: ARRAY
56951: PPUSH
56952: LD_INT 1
56954: PPUSH
56955: CALL_OW 234
// end ;
56959: PPOPN 1
56961: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56962: LD_EXP 31
56966: PUSH
56967: LD_EXP 79
56971: AND
56972: IFFALSE 57084
56974: GO 56976
56976: DISABLE
56977: LD_INT 0
56979: PPUSH
56980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56981: LD_ADDR_VAR 0 2
56985: PUSH
56986: LD_INT 22
56988: PUSH
56989: LD_OWVAR 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 30
57003: PUSH
57004: LD_INT 27
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 30
57013: PUSH
57014: LD_INT 26
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 30
57023: PUSH
57024: LD_INT 28
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PPUSH
57041: CALL_OW 69
57045: ST_TO_ADDR
// if not tmp then
57046: LD_VAR 0 2
57050: NOT
57051: IFFALSE 57055
// exit ;
57053: GO 57084
// for i in tmp do
57055: LD_ADDR_VAR 0 1
57059: PUSH
57060: LD_VAR 0 2
57064: PUSH
57065: FOR_IN
57066: IFFALSE 57082
// SetLives ( i , 1 ) ;
57068: LD_VAR 0 1
57072: PPUSH
57073: LD_INT 1
57075: PPUSH
57076: CALL_OW 234
57080: GO 57065
57082: POP
57083: POP
// end ;
57084: PPOPN 2
57086: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57087: LD_EXP 31
57091: PUSH
57092: LD_EXP 80
57096: AND
57097: IFFALSE 57371
57099: GO 57101
57101: DISABLE
57102: LD_INT 0
57104: PPUSH
57105: PPUSH
57106: PPUSH
// begin i := rand ( 1 , 7 ) ;
57107: LD_ADDR_VAR 0 1
57111: PUSH
57112: LD_INT 1
57114: PPUSH
57115: LD_INT 7
57117: PPUSH
57118: CALL_OW 12
57122: ST_TO_ADDR
// case i of 1 :
57123: LD_VAR 0 1
57127: PUSH
57128: LD_INT 1
57130: DOUBLE
57131: EQUAL
57132: IFTRUE 57136
57134: GO 57146
57136: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57137: LD_STRING earthquake(getX(game), 0, 32)
57139: PPUSH
57140: CALL_OW 559
57144: GO 57371
57146: LD_INT 2
57148: DOUBLE
57149: EQUAL
57150: IFTRUE 57154
57152: GO 57168
57154: POP
// begin ToLua ( displayStucuk(); ) ;
57155: LD_STRING displayStucuk();
57157: PPUSH
57158: CALL_OW 559
// ResetFog ;
57162: CALL_OW 335
// end ; 3 :
57166: GO 57371
57168: LD_INT 3
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57176
57174: GO 57280
57176: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57177: LD_ADDR_VAR 0 2
57181: PUSH
57182: LD_INT 22
57184: PUSH
57185: LD_OWVAR 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 25
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PPUSH
57208: CALL_OW 69
57212: ST_TO_ADDR
// if not tmp then
57213: LD_VAR 0 2
57217: NOT
57218: IFFALSE 57222
// exit ;
57220: GO 57371
// un := tmp [ rand ( 1 , tmp ) ] ;
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: LD_VAR 0 2
57231: PUSH
57232: LD_INT 1
57234: PPUSH
57235: LD_VAR 0 2
57239: PPUSH
57240: CALL_OW 12
57244: ARRAY
57245: ST_TO_ADDR
// if Crawls ( un ) then
57246: LD_VAR 0 3
57250: PPUSH
57251: CALL_OW 318
57255: IFFALSE 57266
// ComWalk ( un ) ;
57257: LD_VAR 0 3
57261: PPUSH
57262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57266: LD_VAR 0 3
57270: PPUSH
57271: LD_INT 8
57273: PPUSH
57274: CALL_OW 336
// end ; 4 :
57278: GO 57371
57280: LD_INT 4
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57288
57286: GO 57349
57288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57289: LD_ADDR_VAR 0 2
57293: PUSH
57294: LD_INT 22
57296: PUSH
57297: LD_OWVAR 2
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 30
57308: PUSH
57309: LD_INT 29
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PPUSH
57320: CALL_OW 69
57324: ST_TO_ADDR
// if not tmp then
57325: LD_VAR 0 2
57329: NOT
57330: IFFALSE 57334
// exit ;
57332: GO 57371
// DestroyUnit ( tmp [ 1 ] ) ;
57334: LD_VAR 0 2
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PPUSH
57343: CALL_OW 65
// end ; 5 .. 7 :
57347: GO 57371
57349: LD_INT 5
57351: DOUBLE
57352: GREATEREQUAL
57353: IFFALSE 57361
57355: LD_INT 7
57357: DOUBLE
57358: LESSEQUAL
57359: IFTRUE 57363
57361: GO 57370
57363: POP
// StreamSibBomb ; end ;
57364: CALL 53621 0 0
57368: GO 57371
57370: POP
// end ;
57371: PPOPN 3
57373: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57374: LD_EXP 31
57378: PUSH
57379: LD_EXP 81
57383: AND
57384: IFFALSE 57540
57386: GO 57388
57388: DISABLE
57389: LD_INT 0
57391: PPUSH
57392: PPUSH
57393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57394: LD_ADDR_VAR 0 2
57398: PUSH
57399: LD_INT 81
57401: PUSH
57402: LD_OWVAR 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 21
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 21
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PPUSH
57443: CALL_OW 69
57447: ST_TO_ADDR
// if not tmp then
57448: LD_VAR 0 2
57452: NOT
57453: IFFALSE 57457
// exit ;
57455: GO 57540
// p := 0 ;
57457: LD_ADDR_VAR 0 3
57461: PUSH
57462: LD_INT 0
57464: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57465: LD_INT 35
57467: PPUSH
57468: CALL_OW 67
// p := p + 1 ;
57472: LD_ADDR_VAR 0 3
57476: PUSH
57477: LD_VAR 0 3
57481: PUSH
57482: LD_INT 1
57484: PLUS
57485: ST_TO_ADDR
// for i in tmp do
57486: LD_ADDR_VAR 0 1
57490: PUSH
57491: LD_VAR 0 2
57495: PUSH
57496: FOR_IN
57497: IFFALSE 57528
// if GetLives ( i ) < 1000 then
57499: LD_VAR 0 1
57503: PPUSH
57504: CALL_OW 256
57508: PUSH
57509: LD_INT 1000
57511: LESS
57512: IFFALSE 57526
// SetLives ( i , 1000 ) ;
57514: LD_VAR 0 1
57518: PPUSH
57519: LD_INT 1000
57521: PPUSH
57522: CALL_OW 234
57526: GO 57496
57528: POP
57529: POP
// until p > 20 ;
57530: LD_VAR 0 3
57534: PUSH
57535: LD_INT 20
57537: GREATER
57538: IFFALSE 57465
// end ;
57540: PPOPN 3
57542: END
// every 0 0$1 trigger StreamModeActive and sTime do
57543: LD_EXP 31
57547: PUSH
57548: LD_EXP 82
57552: AND
57553: IFFALSE 57588
57555: GO 57557
57557: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57558: LD_INT 28
57560: PPUSH
57561: LD_OWVAR 2
57565: PPUSH
57566: LD_INT 2
57568: PPUSH
57569: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57573: LD_INT 30
57575: PPUSH
57576: LD_OWVAR 2
57580: PPUSH
57581: LD_INT 2
57583: PPUSH
57584: CALL_OW 322
// end ;
57588: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57589: LD_EXP 31
57593: PUSH
57594: LD_EXP 83
57598: AND
57599: IFFALSE 57720
57601: GO 57603
57603: DISABLE
57604: LD_INT 0
57606: PPUSH
57607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57608: LD_ADDR_VAR 0 2
57612: PUSH
57613: LD_INT 22
57615: PUSH
57616: LD_OWVAR 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 21
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: LD_INT 23
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PPUSH
57657: CALL_OW 69
57661: ST_TO_ADDR
// if not tmp then
57662: LD_VAR 0 2
57666: NOT
57667: IFFALSE 57671
// exit ;
57669: GO 57720
// for i in tmp do
57671: LD_ADDR_VAR 0 1
57675: PUSH
57676: LD_VAR 0 2
57680: PUSH
57681: FOR_IN
57682: IFFALSE 57718
// begin if Crawls ( i ) then
57684: LD_VAR 0 1
57688: PPUSH
57689: CALL_OW 318
57693: IFFALSE 57704
// ComWalk ( i ) ;
57695: LD_VAR 0 1
57699: PPUSH
57700: CALL_OW 138
// SetClass ( i , 2 ) ;
57704: LD_VAR 0 1
57708: PPUSH
57709: LD_INT 2
57711: PPUSH
57712: CALL_OW 336
// end ;
57716: GO 57681
57718: POP
57719: POP
// end ;
57720: PPOPN 2
57722: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57723: LD_EXP 31
57727: PUSH
57728: LD_EXP 84
57732: AND
57733: IFFALSE 58014
57735: GO 57737
57737: DISABLE
57738: LD_INT 0
57740: PPUSH
57741: PPUSH
57742: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57743: LD_OWVAR 2
57747: PPUSH
57748: LD_INT 9
57750: PPUSH
57751: LD_INT 1
57753: PPUSH
57754: LD_INT 1
57756: PPUSH
57757: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57761: LD_INT 9
57763: PPUSH
57764: LD_OWVAR 2
57768: PPUSH
57769: CALL_OW 343
// uc_side := 9 ;
57773: LD_ADDR_OWVAR 20
57777: PUSH
57778: LD_INT 9
57780: ST_TO_ADDR
// uc_nation := 2 ;
57781: LD_ADDR_OWVAR 21
57785: PUSH
57786: LD_INT 2
57788: ST_TO_ADDR
// hc_name := Dark Warrior ;
57789: LD_ADDR_OWVAR 26
57793: PUSH
57794: LD_STRING Dark Warrior
57796: ST_TO_ADDR
// hc_gallery :=  ;
57797: LD_ADDR_OWVAR 33
57801: PUSH
57802: LD_STRING 
57804: ST_TO_ADDR
// hc_noskilllimit := true ;
57805: LD_ADDR_OWVAR 76
57809: PUSH
57810: LD_INT 1
57812: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57813: LD_ADDR_OWVAR 31
57817: PUSH
57818: LD_INT 30
57820: PUSH
57821: LD_INT 30
57823: PUSH
57824: LD_INT 30
57826: PUSH
57827: LD_INT 30
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: ST_TO_ADDR
// un := CreateHuman ;
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: CALL_OW 44
57845: ST_TO_ADDR
// hc_noskilllimit := false ;
57846: LD_ADDR_OWVAR 76
57850: PUSH
57851: LD_INT 0
57853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57854: LD_VAR 0 3
57858: PPUSH
57859: LD_INT 1
57861: PPUSH
57862: CALL_OW 51
// p := 0 ;
57866: LD_ADDR_VAR 0 2
57870: PUSH
57871: LD_INT 0
57873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57874: LD_INT 35
57876: PPUSH
57877: CALL_OW 67
// p := p + 1 ;
57881: LD_ADDR_VAR 0 2
57885: PUSH
57886: LD_VAR 0 2
57890: PUSH
57891: LD_INT 1
57893: PLUS
57894: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57895: LD_VAR 0 3
57899: PPUSH
57900: CALL_OW 256
57904: PUSH
57905: LD_INT 1000
57907: LESS
57908: IFFALSE 57922
// SetLives ( un , 1000 ) ;
57910: LD_VAR 0 3
57914: PPUSH
57915: LD_INT 1000
57917: PPUSH
57918: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57922: LD_VAR 0 3
57926: PPUSH
57927: LD_INT 81
57929: PUSH
57930: LD_OWVAR 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 91
57941: PUSH
57942: LD_VAR 0 3
57946: PUSH
57947: LD_INT 30
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: LIST
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PPUSH
57959: CALL_OW 69
57963: PPUSH
57964: LD_VAR 0 3
57968: PPUSH
57969: CALL_OW 74
57973: PPUSH
57974: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
57978: LD_VAR 0 2
57982: PUSH
57983: LD_INT 60
57985: GREATER
57986: PUSH
57987: LD_VAR 0 3
57991: PPUSH
57992: CALL_OW 301
57996: OR
57997: IFFALSE 57874
// if un then
57999: LD_VAR 0 3
58003: IFFALSE 58014
// RemoveUnit ( un ) ;
58005: LD_VAR 0 3
58009: PPUSH
58010: CALL_OW 64
// end ;
58014: PPOPN 3
58016: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58017: LD_INT 0
58019: PPUSH
// case cmd of 301 :
58020: LD_VAR 0 1
58024: PUSH
58025: LD_INT 301
58027: DOUBLE
58028: EQUAL
58029: IFTRUE 58033
58031: GO 58065
58033: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58034: LD_VAR 0 6
58038: PPUSH
58039: LD_VAR 0 7
58043: PPUSH
58044: LD_VAR 0 8
58048: PPUSH
58049: LD_VAR 0 4
58053: PPUSH
58054: LD_VAR 0 5
58058: PPUSH
58059: CALL 59266 0 5
58063: GO 58186
58065: LD_INT 302
58067: DOUBLE
58068: EQUAL
58069: IFTRUE 58073
58071: GO 58110
58073: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58074: LD_VAR 0 6
58078: PPUSH
58079: LD_VAR 0 7
58083: PPUSH
58084: LD_VAR 0 8
58088: PPUSH
58089: LD_VAR 0 9
58093: PPUSH
58094: LD_VAR 0 4
58098: PPUSH
58099: LD_VAR 0 5
58103: PPUSH
58104: CALL 59357 0 6
58108: GO 58186
58110: LD_INT 303
58112: DOUBLE
58113: EQUAL
58114: IFTRUE 58118
58116: GO 58155
58118: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58119: LD_VAR 0 6
58123: PPUSH
58124: LD_VAR 0 7
58128: PPUSH
58129: LD_VAR 0 8
58133: PPUSH
58134: LD_VAR 0 9
58138: PPUSH
58139: LD_VAR 0 4
58143: PPUSH
58144: LD_VAR 0 5
58148: PPUSH
58149: CALL 58191 0 6
58153: GO 58186
58155: LD_INT 304
58157: DOUBLE
58158: EQUAL
58159: IFTRUE 58163
58161: GO 58185
58163: POP
// hHackTeleport ( unit , x , y ) ; end ;
58164: LD_VAR 0 2
58168: PPUSH
58169: LD_VAR 0 4
58173: PPUSH
58174: LD_VAR 0 5
58178: PPUSH
58179: CALL 59950 0 3
58183: GO 58186
58185: POP
// end ;
58186: LD_VAR 0 12
58190: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58191: LD_INT 0
58193: PPUSH
58194: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58195: LD_VAR 0 1
58199: PUSH
58200: LD_INT 1
58202: LESS
58203: PUSH
58204: LD_VAR 0 1
58208: PUSH
58209: LD_INT 3
58211: GREATER
58212: OR
58213: PUSH
58214: LD_VAR 0 5
58218: PPUSH
58219: LD_VAR 0 6
58223: PPUSH
58224: CALL_OW 428
58228: OR
58229: IFFALSE 58233
// exit ;
58231: GO 58953
// uc_side := your_side ;
58233: LD_ADDR_OWVAR 20
58237: PUSH
58238: LD_OWVAR 2
58242: ST_TO_ADDR
// uc_nation := nation ;
58243: LD_ADDR_OWVAR 21
58247: PUSH
58248: LD_VAR 0 1
58252: ST_TO_ADDR
// bc_level = 1 ;
58253: LD_ADDR_OWVAR 43
58257: PUSH
58258: LD_INT 1
58260: ST_TO_ADDR
// case btype of 1 :
58261: LD_VAR 0 2
58265: PUSH
58266: LD_INT 1
58268: DOUBLE
58269: EQUAL
58270: IFTRUE 58274
58272: GO 58285
58274: POP
// bc_type := b_depot ; 2 :
58275: LD_ADDR_OWVAR 42
58279: PUSH
58280: LD_INT 0
58282: ST_TO_ADDR
58283: GO 58897
58285: LD_INT 2
58287: DOUBLE
58288: EQUAL
58289: IFTRUE 58293
58291: GO 58304
58293: POP
// bc_type := b_warehouse ; 3 :
58294: LD_ADDR_OWVAR 42
58298: PUSH
58299: LD_INT 1
58301: ST_TO_ADDR
58302: GO 58897
58304: LD_INT 3
58306: DOUBLE
58307: EQUAL
58308: IFTRUE 58312
58310: GO 58323
58312: POP
// bc_type := b_lab ; 4 .. 9 :
58313: LD_ADDR_OWVAR 42
58317: PUSH
58318: LD_INT 6
58320: ST_TO_ADDR
58321: GO 58897
58323: LD_INT 4
58325: DOUBLE
58326: GREATEREQUAL
58327: IFFALSE 58335
58329: LD_INT 9
58331: DOUBLE
58332: LESSEQUAL
58333: IFTRUE 58337
58335: GO 58389
58337: POP
// begin bc_type := b_lab_half ;
58338: LD_ADDR_OWVAR 42
58342: PUSH
58343: LD_INT 7
58345: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58346: LD_ADDR_OWVAR 44
58350: PUSH
58351: LD_INT 10
58353: PUSH
58354: LD_INT 11
58356: PUSH
58357: LD_INT 12
58359: PUSH
58360: LD_INT 15
58362: PUSH
58363: LD_INT 14
58365: PUSH
58366: LD_INT 13
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: PUSH
58377: LD_VAR 0 2
58381: PUSH
58382: LD_INT 3
58384: MINUS
58385: ARRAY
58386: ST_TO_ADDR
// end ; 10 .. 13 :
58387: GO 58897
58389: LD_INT 10
58391: DOUBLE
58392: GREATEREQUAL
58393: IFFALSE 58401
58395: LD_INT 13
58397: DOUBLE
58398: LESSEQUAL
58399: IFTRUE 58403
58401: GO 58480
58403: POP
// begin bc_type := b_lab_full ;
58404: LD_ADDR_OWVAR 42
58408: PUSH
58409: LD_INT 8
58411: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58412: LD_ADDR_OWVAR 44
58416: PUSH
58417: LD_INT 10
58419: PUSH
58420: LD_INT 12
58422: PUSH
58423: LD_INT 14
58425: PUSH
58426: LD_INT 13
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: PUSH
58435: LD_VAR 0 2
58439: PUSH
58440: LD_INT 9
58442: MINUS
58443: ARRAY
58444: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58445: LD_ADDR_OWVAR 45
58449: PUSH
58450: LD_INT 11
58452: PUSH
58453: LD_INT 15
58455: PUSH
58456: LD_INT 12
58458: PUSH
58459: LD_INT 15
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: PUSH
58468: LD_VAR 0 2
58472: PUSH
58473: LD_INT 9
58475: MINUS
58476: ARRAY
58477: ST_TO_ADDR
// end ; 14 :
58478: GO 58897
58480: LD_INT 14
58482: DOUBLE
58483: EQUAL
58484: IFTRUE 58488
58486: GO 58499
58488: POP
// bc_type := b_workshop ; 15 :
58489: LD_ADDR_OWVAR 42
58493: PUSH
58494: LD_INT 2
58496: ST_TO_ADDR
58497: GO 58897
58499: LD_INT 15
58501: DOUBLE
58502: EQUAL
58503: IFTRUE 58507
58505: GO 58518
58507: POP
// bc_type := b_factory ; 16 :
58508: LD_ADDR_OWVAR 42
58512: PUSH
58513: LD_INT 3
58515: ST_TO_ADDR
58516: GO 58897
58518: LD_INT 16
58520: DOUBLE
58521: EQUAL
58522: IFTRUE 58526
58524: GO 58537
58526: POP
// bc_type := b_ext_gun ; 17 :
58527: LD_ADDR_OWVAR 42
58531: PUSH
58532: LD_INT 17
58534: ST_TO_ADDR
58535: GO 58897
58537: LD_INT 17
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58545
58543: GO 58573
58545: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58546: LD_ADDR_OWVAR 42
58550: PUSH
58551: LD_INT 19
58553: PUSH
58554: LD_INT 23
58556: PUSH
58557: LD_INT 19
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: PUSH
58565: LD_VAR 0 1
58569: ARRAY
58570: ST_TO_ADDR
58571: GO 58897
58573: LD_INT 18
58575: DOUBLE
58576: EQUAL
58577: IFTRUE 58581
58579: GO 58592
58581: POP
// bc_type := b_ext_radar ; 19 :
58582: LD_ADDR_OWVAR 42
58586: PUSH
58587: LD_INT 20
58589: ST_TO_ADDR
58590: GO 58897
58592: LD_INT 19
58594: DOUBLE
58595: EQUAL
58596: IFTRUE 58600
58598: GO 58611
58600: POP
// bc_type := b_ext_radio ; 20 :
58601: LD_ADDR_OWVAR 42
58605: PUSH
58606: LD_INT 22
58608: ST_TO_ADDR
58609: GO 58897
58611: LD_INT 20
58613: DOUBLE
58614: EQUAL
58615: IFTRUE 58619
58617: GO 58630
58619: POP
// bc_type := b_ext_siberium ; 21 :
58620: LD_ADDR_OWVAR 42
58624: PUSH
58625: LD_INT 21
58627: ST_TO_ADDR
58628: GO 58897
58630: LD_INT 21
58632: DOUBLE
58633: EQUAL
58634: IFTRUE 58638
58636: GO 58649
58638: POP
// bc_type := b_ext_computer ; 22 :
58639: LD_ADDR_OWVAR 42
58643: PUSH
58644: LD_INT 24
58646: ST_TO_ADDR
58647: GO 58897
58649: LD_INT 22
58651: DOUBLE
58652: EQUAL
58653: IFTRUE 58657
58655: GO 58668
58657: POP
// bc_type := b_ext_track ; 23 :
58658: LD_ADDR_OWVAR 42
58662: PUSH
58663: LD_INT 16
58665: ST_TO_ADDR
58666: GO 58897
58668: LD_INT 23
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58676
58674: GO 58687
58676: POP
// bc_type := b_ext_laser ; 24 :
58677: LD_ADDR_OWVAR 42
58681: PUSH
58682: LD_INT 25
58684: ST_TO_ADDR
58685: GO 58897
58687: LD_INT 24
58689: DOUBLE
58690: EQUAL
58691: IFTRUE 58695
58693: GO 58706
58695: POP
// bc_type := b_control_tower ; 25 :
58696: LD_ADDR_OWVAR 42
58700: PUSH
58701: LD_INT 36
58703: ST_TO_ADDR
58704: GO 58897
58706: LD_INT 25
58708: DOUBLE
58709: EQUAL
58710: IFTRUE 58714
58712: GO 58725
58714: POP
// bc_type := b_breastwork ; 26 :
58715: LD_ADDR_OWVAR 42
58719: PUSH
58720: LD_INT 31
58722: ST_TO_ADDR
58723: GO 58897
58725: LD_INT 26
58727: DOUBLE
58728: EQUAL
58729: IFTRUE 58733
58731: GO 58744
58733: POP
// bc_type := b_bunker ; 27 :
58734: LD_ADDR_OWVAR 42
58738: PUSH
58739: LD_INT 32
58741: ST_TO_ADDR
58742: GO 58897
58744: LD_INT 27
58746: DOUBLE
58747: EQUAL
58748: IFTRUE 58752
58750: GO 58763
58752: POP
// bc_type := b_turret ; 28 :
58753: LD_ADDR_OWVAR 42
58757: PUSH
58758: LD_INT 33
58760: ST_TO_ADDR
58761: GO 58897
58763: LD_INT 28
58765: DOUBLE
58766: EQUAL
58767: IFTRUE 58771
58769: GO 58782
58771: POP
// bc_type := b_armoury ; 29 :
58772: LD_ADDR_OWVAR 42
58776: PUSH
58777: LD_INT 4
58779: ST_TO_ADDR
58780: GO 58897
58782: LD_INT 29
58784: DOUBLE
58785: EQUAL
58786: IFTRUE 58790
58788: GO 58801
58790: POP
// bc_type := b_barracks ; 30 :
58791: LD_ADDR_OWVAR 42
58795: PUSH
58796: LD_INT 5
58798: ST_TO_ADDR
58799: GO 58897
58801: LD_INT 30
58803: DOUBLE
58804: EQUAL
58805: IFTRUE 58809
58807: GO 58820
58809: POP
// bc_type := b_solar_power ; 31 :
58810: LD_ADDR_OWVAR 42
58814: PUSH
58815: LD_INT 27
58817: ST_TO_ADDR
58818: GO 58897
58820: LD_INT 31
58822: DOUBLE
58823: EQUAL
58824: IFTRUE 58828
58826: GO 58839
58828: POP
// bc_type := b_oil_power ; 32 :
58829: LD_ADDR_OWVAR 42
58833: PUSH
58834: LD_INT 26
58836: ST_TO_ADDR
58837: GO 58897
58839: LD_INT 32
58841: DOUBLE
58842: EQUAL
58843: IFTRUE 58847
58845: GO 58858
58847: POP
// bc_type := b_siberite_power ; 33 :
58848: LD_ADDR_OWVAR 42
58852: PUSH
58853: LD_INT 28
58855: ST_TO_ADDR
58856: GO 58897
58858: LD_INT 33
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58866
58864: GO 58877
58866: POP
// bc_type := b_oil_mine ; 34 :
58867: LD_ADDR_OWVAR 42
58871: PUSH
58872: LD_INT 29
58874: ST_TO_ADDR
58875: GO 58897
58877: LD_INT 34
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58885
58883: GO 58896
58885: POP
// bc_type := b_siberite_mine ; end ;
58886: LD_ADDR_OWVAR 42
58890: PUSH
58891: LD_INT 30
58893: ST_TO_ADDR
58894: GO 58897
58896: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58897: LD_ADDR_VAR 0 8
58901: PUSH
58902: LD_VAR 0 5
58906: PPUSH
58907: LD_VAR 0 6
58911: PPUSH
58912: LD_VAR 0 3
58916: PPUSH
58917: CALL_OW 47
58921: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58922: LD_OWVAR 42
58926: PUSH
58927: LD_INT 32
58929: PUSH
58930: LD_INT 33
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: IN
58937: IFFALSE 58953
// PlaceWeaponTurret ( b , weapon ) ;
58939: LD_VAR 0 8
58943: PPUSH
58944: LD_VAR 0 4
58948: PPUSH
58949: CALL_OW 431
// end ;
58953: LD_VAR 0 7
58957: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58958: LD_INT 0
58960: PPUSH
58961: PPUSH
58962: PPUSH
58963: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58964: LD_ADDR_VAR 0 4
58968: PUSH
58969: LD_INT 22
58971: PUSH
58972: LD_OWVAR 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 30
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 30
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PPUSH
59013: CALL_OW 69
59017: ST_TO_ADDR
// if not tmp then
59018: LD_VAR 0 4
59022: NOT
59023: IFFALSE 59027
// exit ;
59025: GO 59086
// for i in tmp do
59027: LD_ADDR_VAR 0 2
59031: PUSH
59032: LD_VAR 0 4
59036: PUSH
59037: FOR_IN
59038: IFFALSE 59084
// for j = 1 to 3 do
59040: LD_ADDR_VAR 0 3
59044: PUSH
59045: DOUBLE
59046: LD_INT 1
59048: DEC
59049: ST_TO_ADDR
59050: LD_INT 3
59052: PUSH
59053: FOR_TO
59054: IFFALSE 59080
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59056: LD_VAR 0 2
59060: PPUSH
59061: CALL_OW 274
59065: PPUSH
59066: LD_VAR 0 3
59070: PPUSH
59071: LD_INT 99999
59073: PPUSH
59074: CALL_OW 277
59078: GO 59053
59080: POP
59081: POP
59082: GO 59037
59084: POP
59085: POP
// end ;
59086: LD_VAR 0 1
59090: RET
// export function hHackSetLevel10 ; var i , j ; begin
59091: LD_INT 0
59093: PPUSH
59094: PPUSH
59095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59096: LD_ADDR_VAR 0 2
59100: PUSH
59101: LD_INT 21
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PPUSH
59111: CALL_OW 69
59115: PUSH
59116: FOR_IN
59117: IFFALSE 59169
// if IsSelected ( i ) then
59119: LD_VAR 0 2
59123: PPUSH
59124: CALL_OW 306
59128: IFFALSE 59167
// begin for j := 1 to 4 do
59130: LD_ADDR_VAR 0 3
59134: PUSH
59135: DOUBLE
59136: LD_INT 1
59138: DEC
59139: ST_TO_ADDR
59140: LD_INT 4
59142: PUSH
59143: FOR_TO
59144: IFFALSE 59165
// SetSkill ( i , j , 10 ) ;
59146: LD_VAR 0 2
59150: PPUSH
59151: LD_VAR 0 3
59155: PPUSH
59156: LD_INT 10
59158: PPUSH
59159: CALL_OW 237
59163: GO 59143
59165: POP
59166: POP
// end ;
59167: GO 59116
59169: POP
59170: POP
// end ;
59171: LD_VAR 0 1
59175: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59176: LD_INT 0
59178: PPUSH
59179: PPUSH
59180: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59181: LD_ADDR_VAR 0 2
59185: PUSH
59186: LD_INT 22
59188: PUSH
59189: LD_OWVAR 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 21
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PPUSH
59212: CALL_OW 69
59216: PUSH
59217: FOR_IN
59218: IFFALSE 59259
// begin for j := 1 to 4 do
59220: LD_ADDR_VAR 0 3
59224: PUSH
59225: DOUBLE
59226: LD_INT 1
59228: DEC
59229: ST_TO_ADDR
59230: LD_INT 4
59232: PUSH
59233: FOR_TO
59234: IFFALSE 59255
// SetSkill ( i , j , 10 ) ;
59236: LD_VAR 0 2
59240: PPUSH
59241: LD_VAR 0 3
59245: PPUSH
59246: LD_INT 10
59248: PPUSH
59249: CALL_OW 237
59253: GO 59233
59255: POP
59256: POP
// end ;
59257: GO 59217
59259: POP
59260: POP
// end ;
59261: LD_VAR 0 1
59265: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59266: LD_INT 0
59268: PPUSH
// uc_side := your_side ;
59269: LD_ADDR_OWVAR 20
59273: PUSH
59274: LD_OWVAR 2
59278: ST_TO_ADDR
// uc_nation := nation ;
59279: LD_ADDR_OWVAR 21
59283: PUSH
59284: LD_VAR 0 1
59288: ST_TO_ADDR
// InitHc ;
59289: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59293: LD_INT 0
59295: PPUSH
59296: LD_VAR 0 2
59300: PPUSH
59301: LD_VAR 0 3
59305: PPUSH
59306: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59310: LD_VAR 0 4
59314: PPUSH
59315: LD_VAR 0 5
59319: PPUSH
59320: CALL_OW 428
59324: PUSH
59325: LD_INT 0
59327: EQUAL
59328: IFFALSE 59352
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59330: CALL_OW 44
59334: PPUSH
59335: LD_VAR 0 4
59339: PPUSH
59340: LD_VAR 0 5
59344: PPUSH
59345: LD_INT 1
59347: PPUSH
59348: CALL_OW 48
// end ;
59352: LD_VAR 0 6
59356: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59357: LD_INT 0
59359: PPUSH
59360: PPUSH
// uc_side := your_side ;
59361: LD_ADDR_OWVAR 20
59365: PUSH
59366: LD_OWVAR 2
59370: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59371: LD_VAR 0 1
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: LD_INT 3
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: LD_INT 5
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: IN
59398: IFFALSE 59410
// uc_nation := nation_american else
59400: LD_ADDR_OWVAR 21
59404: PUSH
59405: LD_INT 1
59407: ST_TO_ADDR
59408: GO 59453
// if chassis in [ 11 , 12 , 13 , 14 ] then
59410: LD_VAR 0 1
59414: PUSH
59415: LD_INT 11
59417: PUSH
59418: LD_INT 12
59420: PUSH
59421: LD_INT 13
59423: PUSH
59424: LD_INT 14
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: IN
59433: IFFALSE 59445
// uc_nation := nation_arabian else
59435: LD_ADDR_OWVAR 21
59439: PUSH
59440: LD_INT 2
59442: ST_TO_ADDR
59443: GO 59453
// uc_nation := nation_russian ;
59445: LD_ADDR_OWVAR 21
59449: PUSH
59450: LD_INT 3
59452: ST_TO_ADDR
// vc_chassis := chassis ;
59453: LD_ADDR_OWVAR 37
59457: PUSH
59458: LD_VAR 0 1
59462: ST_TO_ADDR
// vc_engine := engine ;
59463: LD_ADDR_OWVAR 39
59467: PUSH
59468: LD_VAR 0 2
59472: ST_TO_ADDR
// vc_control := control ;
59473: LD_ADDR_OWVAR 38
59477: PUSH
59478: LD_VAR 0 3
59482: ST_TO_ADDR
// vc_weapon := weapon ;
59483: LD_ADDR_OWVAR 40
59487: PUSH
59488: LD_VAR 0 4
59492: ST_TO_ADDR
// un := CreateVehicle ;
59493: LD_ADDR_VAR 0 8
59497: PUSH
59498: CALL_OW 45
59502: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59503: LD_VAR 0 8
59507: PPUSH
59508: LD_INT 0
59510: PPUSH
59511: LD_INT 5
59513: PPUSH
59514: CALL_OW 12
59518: PPUSH
59519: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59523: LD_VAR 0 8
59527: PPUSH
59528: LD_VAR 0 5
59532: PPUSH
59533: LD_VAR 0 6
59537: PPUSH
59538: LD_INT 1
59540: PPUSH
59541: CALL_OW 48
// end ;
59545: LD_VAR 0 7
59549: RET
// export hInvincible ; every 1 do
59550: GO 59552
59552: DISABLE
// hInvincible := [ ] ;
59553: LD_ADDR_EXP 85
59557: PUSH
59558: EMPTY
59559: ST_TO_ADDR
59560: END
// every 10 do var i ;
59561: GO 59563
59563: DISABLE
59564: LD_INT 0
59566: PPUSH
// begin enable ;
59567: ENABLE
// if not hInvincible then
59568: LD_EXP 85
59572: NOT
59573: IFFALSE 59577
// exit ;
59575: GO 59621
// for i in hInvincible do
59577: LD_ADDR_VAR 0 1
59581: PUSH
59582: LD_EXP 85
59586: PUSH
59587: FOR_IN
59588: IFFALSE 59619
// if GetLives ( i ) < 1000 then
59590: LD_VAR 0 1
59594: PPUSH
59595: CALL_OW 256
59599: PUSH
59600: LD_INT 1000
59602: LESS
59603: IFFALSE 59617
// SetLives ( i , 1000 ) ;
59605: LD_VAR 0 1
59609: PPUSH
59610: LD_INT 1000
59612: PPUSH
59613: CALL_OW 234
59617: GO 59587
59619: POP
59620: POP
// end ;
59621: PPOPN 1
59623: END
// export function hHackInvincible ; var i ; begin
59624: LD_INT 0
59626: PPUSH
59627: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59628: LD_ADDR_VAR 0 2
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 21
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 21
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: PPUSH
59661: CALL_OW 69
59665: PUSH
59666: FOR_IN
59667: IFFALSE 59728
// if IsSelected ( i ) then
59669: LD_VAR 0 2
59673: PPUSH
59674: CALL_OW 306
59678: IFFALSE 59726
// begin if i in hInvincible then
59680: LD_VAR 0 2
59684: PUSH
59685: LD_EXP 85
59689: IN
59690: IFFALSE 59710
// hInvincible := hInvincible diff i else
59692: LD_ADDR_EXP 85
59696: PUSH
59697: LD_EXP 85
59701: PUSH
59702: LD_VAR 0 2
59706: DIFF
59707: ST_TO_ADDR
59708: GO 59726
// hInvincible := hInvincible union i ;
59710: LD_ADDR_EXP 85
59714: PUSH
59715: LD_EXP 85
59719: PUSH
59720: LD_VAR 0 2
59724: UNION
59725: ST_TO_ADDR
// end ;
59726: GO 59666
59728: POP
59729: POP
// end ;
59730: LD_VAR 0 1
59734: RET
// export function hHackInvisible ; var i , j ; begin
59735: LD_INT 0
59737: PPUSH
59738: PPUSH
59739: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59740: LD_ADDR_VAR 0 2
59744: PUSH
59745: LD_INT 21
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PPUSH
59755: CALL_OW 69
59759: PUSH
59760: FOR_IN
59761: IFFALSE 59785
// if IsSelected ( i ) then
59763: LD_VAR 0 2
59767: PPUSH
59768: CALL_OW 306
59772: IFFALSE 59783
// ComForceInvisible ( i ) ;
59774: LD_VAR 0 2
59778: PPUSH
59779: CALL_OW 496
59783: GO 59760
59785: POP
59786: POP
// end ;
59787: LD_VAR 0 1
59791: RET
// export function hHackChangeYourSide ; begin
59792: LD_INT 0
59794: PPUSH
// if your_side = 8 then
59795: LD_OWVAR 2
59799: PUSH
59800: LD_INT 8
59802: EQUAL
59803: IFFALSE 59815
// your_side := 0 else
59805: LD_ADDR_OWVAR 2
59809: PUSH
59810: LD_INT 0
59812: ST_TO_ADDR
59813: GO 59829
// your_side := your_side + 1 ;
59815: LD_ADDR_OWVAR 2
59819: PUSH
59820: LD_OWVAR 2
59824: PUSH
59825: LD_INT 1
59827: PLUS
59828: ST_TO_ADDR
// end ;
59829: LD_VAR 0 1
59833: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59834: LD_INT 0
59836: PPUSH
59837: PPUSH
59838: PPUSH
// for i in all_units do
59839: LD_ADDR_VAR 0 2
59843: PUSH
59844: LD_OWVAR 3
59848: PUSH
59849: FOR_IN
59850: IFFALSE 59928
// if IsSelected ( i ) then
59852: LD_VAR 0 2
59856: PPUSH
59857: CALL_OW 306
59861: IFFALSE 59926
// begin j := GetSide ( i ) ;
59863: LD_ADDR_VAR 0 3
59867: PUSH
59868: LD_VAR 0 2
59872: PPUSH
59873: CALL_OW 255
59877: ST_TO_ADDR
// if j = 8 then
59878: LD_VAR 0 3
59882: PUSH
59883: LD_INT 8
59885: EQUAL
59886: IFFALSE 59898
// j := 0 else
59888: LD_ADDR_VAR 0 3
59892: PUSH
59893: LD_INT 0
59895: ST_TO_ADDR
59896: GO 59912
// j := j + 1 ;
59898: LD_ADDR_VAR 0 3
59902: PUSH
59903: LD_VAR 0 3
59907: PUSH
59908: LD_INT 1
59910: PLUS
59911: ST_TO_ADDR
// SetSide ( i , j ) ;
59912: LD_VAR 0 2
59916: PPUSH
59917: LD_VAR 0 3
59921: PPUSH
59922: CALL_OW 235
// end ;
59926: GO 59849
59928: POP
59929: POP
// end ;
59930: LD_VAR 0 1
59934: RET
// export function hHackFog ; begin
59935: LD_INT 0
59937: PPUSH
// FogOff ( true ) ;
59938: LD_INT 1
59940: PPUSH
59941: CALL_OW 344
// end ;
59945: LD_VAR 0 1
59949: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59950: LD_INT 0
59952: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59953: LD_VAR 0 1
59957: PPUSH
59958: LD_VAR 0 2
59962: PPUSH
59963: LD_VAR 0 3
59967: PPUSH
59968: LD_INT 1
59970: PPUSH
59971: LD_INT 1
59973: PPUSH
59974: CALL_OW 483
// CenterOnXY ( x , y ) ;
59978: LD_VAR 0 2
59982: PPUSH
59983: LD_VAR 0 3
59987: PPUSH
59988: CALL_OW 84
// end ; end_of_file
59992: LD_VAR 0 4
59996: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59997: LD_VAR 0 1
60001: PPUSH
60002: LD_VAR 0 2
60006: PPUSH
60007: LD_VAR 0 3
60011: PPUSH
60012: LD_VAR 0 4
60016: PPUSH
60017: LD_VAR 0 5
60021: PPUSH
60022: LD_VAR 0 6
60026: PPUSH
60027: CALL 46825 0 6
// end ; end_of_file end_of_file
60031: PPOPN 6
60033: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
60034: LD_INT 0
60036: PPUSH
// ar_miner := 81 ;
60037: LD_ADDR_EXP 93
60041: PUSH
60042: LD_INT 81
60044: ST_TO_ADDR
// ar_crane := 88 ;
60045: LD_ADDR_EXP 92
60049: PUSH
60050: LD_INT 88
60052: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
60053: LD_ADDR_EXP 87
60057: PUSH
60058: LD_INT 89
60060: ST_TO_ADDR
// us_hack := 99 ;
60061: LD_ADDR_EXP 88
60065: PUSH
60066: LD_INT 99
60068: ST_TO_ADDR
// us_artillery := 97 ;
60069: LD_ADDR_EXP 89
60073: PUSH
60074: LD_INT 97
60076: ST_TO_ADDR
// ar_bio_bomb := 91 ;
60077: LD_ADDR_EXP 90
60081: PUSH
60082: LD_INT 91
60084: ST_TO_ADDR
// ar_mortar := 92 ;
60085: LD_ADDR_EXP 91
60089: PUSH
60090: LD_INT 92
60092: ST_TO_ADDR
// ru_radar := 98 ;
60093: LD_ADDR_EXP 86
60097: PUSH
60098: LD_INT 98
60100: ST_TO_ADDR
// tech_Artillery := 80 ;
60101: LD_ADDR_EXP 94
60105: PUSH
60106: LD_INT 80
60108: ST_TO_ADDR
// tech_RadMat := 81 ;
60109: LD_ADDR_EXP 95
60113: PUSH
60114: LD_INT 81
60116: ST_TO_ADDR
// tech_BasicTools := 82 ;
60117: LD_ADDR_EXP 96
60121: PUSH
60122: LD_INT 82
60124: ST_TO_ADDR
// tech_Cargo := 83 ;
60125: LD_ADDR_EXP 97
60129: PUSH
60130: LD_INT 83
60132: ST_TO_ADDR
// tech_Track := 84 ;
60133: LD_ADDR_EXP 98
60137: PUSH
60138: LD_INT 84
60140: ST_TO_ADDR
// tech_Crane := 85 ;
60141: LD_ADDR_EXP 99
60145: PUSH
60146: LD_INT 85
60148: ST_TO_ADDR
// tech_Bulldozer := 86 ;
60149: LD_ADDR_EXP 100
60153: PUSH
60154: LD_INT 86
60156: ST_TO_ADDR
// tech_Hovercraft := 87 ;
60157: LD_ADDR_EXP 101
60161: PUSH
60162: LD_INT 87
60164: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
60165: LD_ADDR_EXP 102
60169: PUSH
60170: LD_INT 88
60172: ST_TO_ADDR
// class_mastodont := 31 ;
60173: LD_ADDR_EXP 103
60177: PUSH
60178: LD_INT 31
60180: ST_TO_ADDR
// class_horse := 21 ;
60181: LD_ADDR_EXP 104
60185: PUSH
60186: LD_INT 21
60188: ST_TO_ADDR
// end ;
60189: LD_VAR 0 1
60193: RET
// every 1 do
60194: GO 60196
60196: DISABLE
// InitGlobalVariables ;
60197: CALL 60034 0 0
60201: END
