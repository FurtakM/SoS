// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 5
  20: PPUSH
  21: LD_INT 6
  23: PPUSH
  24: CALL 404 0 3
// PrepareAmerican ;
  28: CALL 2445 0 0
// PrepareArabian ;
  32: CALL 1124 0 0
// Action ;
  36: CALL 7199 0 0
// if debug then
  40: LD_EXP 1
  44: IFFALSE 61
// begin Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ; end ;
  61: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun , remoteControlLimit ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 06_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// scoutActive := 0 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// scoutFailed := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// scoutSuccess := false ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// usAttacksAllowed := false ;
 105: LD_ADDR_EXP 6
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usSurrender := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// russianAttack := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// hasRockets := false ;
 129: LD_ADDR_EXP 9
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// seeRemoteVehicle := false ;
 137: LD_ADDR_EXP 10
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// seeHeavyGun := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlLimit := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: LD_INT 2
 163: PUSH
 164: LD_INT 2
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// end ; end_of_file
 182: LD_VAR 0 1
 186: RET
// export function SayX ( units , ident ) ; var i ; begin
 187: LD_INT 0
 189: PPUSH
 190: PPUSH
// result := false ;
 191: LD_ADDR_VAR 0 3
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// if not units then
 199: LD_VAR 0 1
 203: NOT
 204: IFFALSE 208
// exit ;
 206: GO 262
// for i in units do
 208: LD_ADDR_VAR 0 4
 212: PUSH
 213: LD_VAR 0 1
 217: PUSH
 218: FOR_IN
 219: IFFALSE 260
// if IsOk ( i ) then
 221: LD_VAR 0 4
 225: PPUSH
 226: CALL_OW 302
 230: IFFALSE 258
// begin Say ( i , ident ) ;
 232: LD_VAR 0 4
 236: PPUSH
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 88
// result := i ;
 246: LD_ADDR_VAR 0 3
 250: PUSH
 251: LD_VAR 0 4
 255: ST_TO_ADDR
// break ;
 256: GO 260
// end ;
 258: GO 218
 260: POP
 261: POP
// end ;
 262: LD_VAR 0 3
 266: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 267: LD_INT 0
 269: PPUSH
 270: PPUSH
// InitUc ;
 271: CALL_OW 18
// InitHc ;
 275: CALL_OW 19
// uc_side := 0 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// uc_nation := 0 ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// for i = 1 to amount do
 295: LD_ADDR_VAR 0 4
 299: PUSH
 300: DOUBLE
 301: LD_INT 1
 303: DEC
 304: ST_TO_ADDR
 305: LD_VAR 0 2
 309: PUSH
 310: FOR_TO
 311: IFFALSE 393
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 313: LD_ADDR_OWVAR 29
 317: PUSH
 318: LD_INT 9
 320: PPUSH
 321: LD_INT 12
 323: PPUSH
 324: CALL_OW 12
 328: PUSH
 329: LD_INT 9
 331: PPUSH
 332: LD_INT 12
 334: PPUSH
 335: CALL_OW 12
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 344: LD_ADDR_OWVAR 35
 348: PUSH
 349: LD_INT 1
 351: NEG
 352: PPUSH
 353: LD_INT 1
 355: PPUSH
 356: CALL_OW 12
 360: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 361: LD_INT 0
 363: PPUSH
 364: LD_INT 12
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 374: CALL_OW 44
 378: PPUSH
 379: LD_VAR 0 1
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL_OW 49
// end ;
 391: GO 310
 393: POP
 394: POP
// InitHc ;
 395: CALL_OW 19
// end ;
 399: LD_VAR 0 3
 403: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
// uc_side := 0 ;
 408: LD_ADDR_OWVAR 20
 412: PUSH
 413: LD_INT 0
 415: ST_TO_ADDR
// uc_nation := 0 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 0
 423: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 , 6 ] [ Difficulty ] ) ;
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 9
 431: PUSH
 432: LD_INT 8
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: PUSH
 447: LD_OWVAR 67
 451: ARRAY
 452: PPUSH
 453: CALL 267 0 2
// for i := 1 to 4 do
 457: LD_ADDR_VAR 0 5
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 4
 469: PUSH
 470: FOR_TO
 471: IFFALSE 508
// begin hc_class := class_horse ;
 473: LD_ADDR_OWVAR 28
 477: PUSH
 478: LD_INT 21
 480: ST_TO_ADDR
// hc_gallery :=  ;
 481: LD_ADDR_OWVAR 33
 485: PUSH
 486: LD_STRING 
 488: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 489: CALL_OW 44
 493: PPUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL_OW 49
// end ;
 506: GO 470
 508: POP
 509: POP
// for i = 1 to 5 do
 510: LD_ADDR_VAR 0 5
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_INT 5
 522: PUSH
 523: FOR_TO
 524: IFFALSE 578
// begin hc_class = class_tiger ;
 526: LD_ADDR_OWVAR 28
 530: PUSH
 531: LD_INT 14
 533: ST_TO_ADDR
// hc_gallery =  ;
 534: LD_ADDR_OWVAR 33
 538: PUSH
 539: LD_STRING 
 541: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 542: LD_ADDR_OWVAR 35
 546: PUSH
 547: LD_INT 7
 549: NEG
 550: PPUSH
 551: LD_INT 7
 553: PPUSH
 554: CALL_OW 12
 558: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 559: CALL_OW 44
 563: PPUSH
 564: LD_VAR 0 2
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 523
 578: POP
 579: POP
// for i := 1 to 4 do
 580: LD_ADDR_VAR 0 5
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 4
 592: PUSH
 593: FOR_TO
 594: IFFALSE 631
// begin hc_class := class_phororhacos ;
 596: LD_ADDR_OWVAR 28
 600: PUSH
 601: LD_INT 18
 603: ST_TO_ADDR
// hc_gallery :=  ;
 604: LD_ADDR_OWVAR 33
 608: PUSH
 609: LD_STRING 
 611: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 612: CALL_OW 44
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ;
 629: GO 593
 631: POP
 632: POP
// for i := 1 to 4 do
 633: LD_ADDR_VAR 0 5
 637: PUSH
 638: DOUBLE
 639: LD_INT 1
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 684
// begin hc_class := class_baggie ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 13
 656: ST_TO_ADDR
// hc_gallery :=  ;
 657: LD_ADDR_OWVAR 33
 661: PUSH
 662: LD_STRING 
 664: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 665: CALL_OW 44
 669: PPUSH
 670: LD_VAR 0 2
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 646
 684: POP
 685: POP
// for i := 1 to 5 do
 686: LD_ADDR_VAR 0 5
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 5
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := class_fish ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 20
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 3
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// end ;
 739: LD_VAR 0 4
 743: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
 748: PPUSH
// if not observer or not unit then
 749: LD_VAR 0 1
 753: NOT
 754: PUSH
 755: LD_VAR 0 2
 759: NOT
 760: OR
 761: IFFALSE 765
// exit ;
 763: GO 813
// if not See ( GetSide ( observer ) , unit ) then
 765: LD_VAR 0 1
 769: PPUSH
 770: CALL_OW 255
 774: PPUSH
 775: LD_VAR 0 2
 779: PPUSH
 780: CALL_OW 292
 784: NOT
 785: IFFALSE 789
// exit ;
 787: GO 813
// result := GetDistUnits ( observer , unit ) < 12 ;
 789: LD_ADDR_VAR 0 3
 793: PUSH
 794: LD_VAR 0 1
 798: PPUSH
 799: LD_VAR 0 2
 803: PPUSH
 804: CALL_OW 296
 808: PUSH
 809: LD_INT 12
 811: LESS
 812: ST_TO_ADDR
// end ;
 813: LD_VAR 0 3
 817: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 818: LD_INT 0
 820: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_VAR 0 2
 834: PUSH
 835: LD_INT 2
 837: ARRAY
 838: PPUSH
 839: CALL_OW 488
 843: PUSH
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: CALL_OW 428
 866: PUSH
 867: LD_INT 0
 869: EQUAL
 870: AND
 871: IFFALSE 905
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_VAR 0 3
 900: PPUSH
 901: CALL_OW 48
// end ;
 905: LD_VAR 0 4
 909: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 910: LD_INT 0
 912: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: LD_VAR 0 2
 922: PPUSH
 923: LD_VAR 0 3
 927: PPUSH
 928: LD_VAR 0 4
 932: PPUSH
 933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PPUSH
 947: LD_VAR 0 3
 951: PPUSH
 952: CALL_OW 331
// end ;
 956: LD_VAR 0 5
 960: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
 961: LD_INT 0
 963: PPUSH
// if not units then
 964: LD_VAR 0 1
 968: NOT
 969: IFFALSE 973
// exit ;
 971: GO 1056
// result := true ;
 973: LD_ADDR_VAR 0 4
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_INT 26
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PPUSH
 996: CALL_OW 72
1000: PUSH
1001: LD_INT 1
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 2
1009: PPUSH
1010: CALL_OW 88
1014: NOT
1015: IFFALSE 1056
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1017: LD_ADDR_VAR 0 4
1021: PUSH
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 3
1050: PPUSH
1051: CALL_OW 88
1055: ST_TO_ADDR
// end ;
1056: LD_VAR 0 4
1060: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1061: LD_INT 0
1063: PPUSH
1064: PPUSH
// if not group then
1065: LD_VAR 0 2
1069: NOT
1070: IFFALSE 1074
// exit ;
1072: GO 1119
// for i in group do
1074: LD_ADDR_VAR 0 4
1078: PUSH
1079: LD_VAR 0 2
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1117
// if See ( side , i ) then
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 4
1096: PPUSH
1097: CALL_OW 292
1101: IFFALSE 1115
// begin result := true ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// exit ;
1111: POP
1112: POP
1113: GO 1119
// end ;
1115: GO 1084
1117: POP
1118: POP
// end ; end_of_file
1119: LD_VAR 0 3
1123: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp , counter ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// uc_nation := 2 ;
1130: LD_ADDR_OWVAR 21
1134: PUSH
1135: LD_INT 2
1137: ST_TO_ADDR
// uc_side := 5 ;
1138: LD_ADDR_OWVAR 20
1142: PUSH
1143: LD_INT 5
1145: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1146: LD_ADDR_EXP 21
1150: PUSH
1151: LD_STRING Abdul
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: LD_STRING 
1159: PPUSH
1160: CALL 15362 0 3
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1173: LD_ADDR_EXP 13
1177: PUSH
1178: LD_STRING Heike
1180: PPUSH
1181: LD_EXP 1
1185: NOT
1186: PPUSH
1187: LD_EXP 2
1191: PPUSH
1192: CALL 15362 0 3
1196: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1197: LD_ADDR_EXP 16
1201: PUSH
1202: LD_STRING Ibrahim
1204: PPUSH
1205: LD_EXP 1
1209: NOT
1210: PPUSH
1211: LD_EXP 2
1215: PPUSH
1216: CALL 15362 0 3
1220: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1221: LD_ADDR_EXP 14
1225: PUSH
1226: LD_STRING Givi
1228: PPUSH
1229: LD_EXP 1
1233: NOT
1234: PPUSH
1235: LD_EXP 2
1239: PPUSH
1240: CALL 15362 0 3
1244: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1245: LD_ADDR_EXP 17
1249: PUSH
1250: LD_STRING Kamil
1252: PPUSH
1253: LD_EXP 1
1257: NOT
1258: PPUSH
1259: LD_EXP 2
1263: PPUSH
1264: CALL 15362 0 3
1268: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1269: LD_ADDR_EXP 18
1273: PUSH
1274: LD_STRING Kaia
1276: PPUSH
1277: LD_EXP 1
1281: NOT
1282: PPUSH
1283: LD_EXP 2
1287: PPUSH
1288: CALL 15362 0 3
1292: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1293: LD_ADDR_EXP 19
1297: PUSH
1298: LD_STRING Sophia
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_EXP 2
1311: PPUSH
1312: CALL 15362 0 3
1316: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1317: LD_ADDR_EXP 20
1321: PUSH
1322: LD_STRING Markov
1324: PPUSH
1325: LD_EXP 1
1329: NOT
1330: PPUSH
1331: LD_EXP 2
1335: PPUSH
1336: CALL 15362 0 3
1340: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1341: LD_ADDR_EXP 24
1345: PUSH
1346: LD_STRING Aviradze
1348: PPUSH
1349: LD_EXP 1
1353: NOT
1354: PPUSH
1355: LD_EXP 2
1359: PPUSH
1360: CALL 15362 0 3
1364: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1365: LD_ADDR_EXP 23
1369: PUSH
1370: LD_STRING Kurt
1372: PPUSH
1373: LD_EXP 1
1377: NOT
1378: PPUSH
1379: LD_EXP 2
1383: PPUSH
1384: CALL 15362 0 3
1388: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 15
1393: PUSH
1394: LD_STRING Mike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 15362 0 3
1412: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 22
1417: PUSH
1418: LD_STRING Olaf
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 15362 0 3
1436: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1437: LD_ADDR_EXP 25
1441: PUSH
1442: LD_STRING 06_others
1444: PPUSH
1445: CALL_OW 31
1449: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1450: LD_ADDR_EXP 26
1454: PUSH
1455: LD_STRING 06_apes
1457: PPUSH
1458: CALL_OW 31
1462: ST_TO_ADDR
// if debug then
1463: LD_EXP 1
1467: IFFALSE 1740
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1469: LD_ADDR_VAR 0 3
1473: PUSH
1474: LD_INT 14
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: LD_INT 2
1482: PUSH
1483: LD_INT 25
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 1000
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: LD_INT 31
1515: PUSH
1516: LD_INT 2
1518: PUSH
1519: LD_INT 1000
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 14
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 27
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 750
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: LD_INT 27
1575: PUSH
1576: LD_INT 2
1578: PUSH
1579: LD_INT 900
1581: PUSH
1582: LD_INT 0
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 14
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: LD_INT 32
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: LD_INT 1000
1611: PUSH
1612: LD_INT 100
1614: PUSH
1615: LD_INT 0
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 14
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 32
1642: PUSH
1643: LD_INT 2
1645: PUSH
1646: LD_INT 1000
1648: PUSH
1649: LD_INT 50
1651: PUSH
1652: LD_INT 50
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 14
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 27
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: LD_INT 1000
1685: PUSH
1686: LD_INT 0
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 14
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 92
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end else
1738: GO 1747
// tmp := [ ] ;
1740: LD_ADDR_VAR 0 3
1744: PUSH
1745: EMPTY
1746: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1747: LD_ADDR_EXP 27
1751: PUSH
1752: LD_STRING 06_Vehicles
1754: PPUSH
1755: LD_VAR 0 3
1759: PPUSH
1760: CALL_OW 30
1764: ST_TO_ADDR
// counter := 0 ;
1765: LD_ADDR_VAR 0 4
1769: PUSH
1770: LD_INT 0
1772: ST_TO_ADDR
// if heikeVehicles then
1773: LD_EXP 27
1777: IFFALSE 1899
// begin for i := heikeVehicles downto 1 do
1779: LD_ADDR_VAR 0 2
1783: PUSH
1784: DOUBLE
1785: LD_EXP 27
1789: INC
1790: ST_TO_ADDR
1791: LD_INT 1
1793: PUSH
1794: FOR_DOWNTO
1795: IFFALSE 1897
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1797: LD_EXP 27
1801: PUSH
1802: LD_VAR 0 2
1806: ARRAY
1807: PUSH
1808: LD_INT 3
1810: ARRAY
1811: PUSH
1812: LD_INT 2
1814: EQUAL
1815: IFFALSE 1895
// begin if counter < remoteControlLimit then
1817: LD_VAR 0 4
1821: PUSH
1822: LD_EXP 12
1826: LESS
1827: IFFALSE 1875
// begin counter := Inc ( counter ) ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 54191 0 1
1843: ST_TO_ADDR
// heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1844: LD_ADDR_EXP 27
1848: PUSH
1849: LD_EXP 27
1853: PPUSH
1854: LD_EXP 27
1858: PPUSH
1859: LD_EXP 27
1863: PUSH
1864: LD_VAR 0 2
1868: ARRAY
1869: PPUSH
1870: CALL_OW 2
1874: ST_TO_ADDR
// end ; heikeVehicles := Delete ( heikeVehicles , i ) ;
1875: LD_ADDR_EXP 27
1879: PUSH
1880: LD_EXP 27
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: CALL_OW 3
1894: ST_TO_ADDR
// end ; end ;
1895: GO 1794
1897: POP
1898: POP
// end ; end ;
1899: LD_VAR 0 1
1903: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1904: LD_EXP 3
1908: IFFALSE 2442
1910: GO 1912
1912: DISABLE
1913: LD_INT 0
1915: PPUSH
1916: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_INT 96
1924: PUSH
1925: LD_INT 50
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 49
1934: PUSH
1935: LD_INT 52
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 34
1944: PUSH
1945: LD_INT 55
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 41
1954: PUSH
1955: LD_INT 70
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 53
1964: PUSH
1965: LD_INT 96
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 103
1974: PUSH
1975: LD_INT 64
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 104
1992: PUSH
1993: LD_INT 70
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 111
2002: PUSH
2003: LD_INT 103
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 131
2012: PUSH
2013: LD_INT 147
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 130
2022: PUSH
2023: LD_INT 153
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 110
2032: PUSH
2033: LD_INT 93
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 103
2042: PUSH
2043: LD_INT 65
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// for i in tmp [ 1 ] do
2062: LD_ADDR_VAR 0 1
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 1
2074: ARRAY
2075: PUSH
2076: FOR_IN
2077: IFFALSE 2129
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2079: LD_EXP 15
2083: PPUSH
2084: LD_VAR 0 1
2088: PUSH
2089: LD_INT 1
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 1
2097: PUSH
2098: LD_INT 2
2100: ARRAY
2101: PPUSH
2102: CALL_OW 174
// AddComHold ( Mike ) ;
2106: LD_EXP 15
2110: PPUSH
2111: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2115: LD_EXP 15
2119: PPUSH
2120: LD_INT 175
2122: PPUSH
2123: CALL_OW 202
// end ;
2127: GO 2076
2129: POP
2130: POP
// for i in tmp [ 2 ] do
2131: LD_ADDR_VAR 0 1
2135: PUSH
2136: LD_VAR 0 2
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: FOR_IN
2146: IFFALSE 2198
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2148: LD_EXP 23
2152: PPUSH
2153: LD_VAR 0 1
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 1
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 174
// AddComHold ( Kurt ) ;
2175: LD_EXP 23
2179: PPUSH
2180: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2184: LD_EXP 23
2188: PPUSH
2189: LD_INT 175
2191: PPUSH
2192: CALL_OW 202
// end ;
2196: GO 2145
2198: POP
2199: POP
// wait ( 2 2$00 ) ;
2200: LD_INT 4200
2202: PPUSH
2203: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2207: LD_INT 35
2209: PPUSH
2210: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2214: LD_EXP 15
2218: PPUSH
2219: CALL_OW 314
2223: NOT
2224: PUSH
2225: LD_EXP 15
2229: PPUSH
2230: CALL_OW 301
2234: OR
2235: PUSH
2236: LD_EXP 23
2240: PPUSH
2241: CALL_OW 314
2245: NOT
2246: PUSH
2247: LD_EXP 23
2251: PPUSH
2252: CALL_OW 301
2256: OR
2257: AND
2258: IFFALSE 2207
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2260: LD_EXP 23
2264: PPUSH
2265: CALL_OW 301
2269: PUSH
2270: LD_EXP 15
2274: PPUSH
2275: CALL_OW 301
2279: AND
2280: IFFALSE 2292
// begin scoutFailed := true ;
2282: LD_ADDR_EXP 4
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// exit ;
2290: GO 2442
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2292: LD_EXP 23
2296: PUSH
2297: LD_EXP 15
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: LD_INT 132
2308: PPUSH
2309: LD_INT 52
2311: PPUSH
2312: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2316: LD_EXP 23
2320: PUSH
2321: LD_EXP 15
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PPUSH
2330: LD_INT 22
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PPUSH
2340: CALL_OW 69
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2353: LD_INT 35
2355: PPUSH
2356: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2360: LD_INT 2
2362: PPUSH
2363: LD_EXP 23
2367: PPUSH
2368: CALL_OW 292
2372: PUSH
2373: LD_INT 2
2375: PPUSH
2376: LD_EXP 15
2380: PPUSH
2381: CALL_OW 292
2385: OR
2386: IFFALSE 2353
// if IsLive ( Kurt ) then
2388: LD_EXP 23
2392: PPUSH
2393: CALL_OW 300
2397: IFFALSE 2411
// SetSide ( Kurt , 2 ) ;
2399: LD_EXP 23
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 235
// if IsLive ( Mike ) then
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 300
2420: IFFALSE 2434
// SetSide ( Mike , 2 ) ;
2422: LD_EXP 15
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 235
// scoutSuccess := true ;
2434: LD_ADDR_EXP 5
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// end ; end_of_file
2442: PPOPN 2
2444: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
// uc_side := 1 ;
2451: LD_ADDR_OWVAR 20
2455: PUSH
2456: LD_INT 1
2458: ST_TO_ADDR
// uc_nation := 1 ;
2459: LD_ADDR_OWVAR 21
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2500 , 3200 , 3500 , 3900 ] [ Difficulty ] ) ;
2467: LD_INT 1
2469: PPUSH
2470: CALL_OW 274
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 2500
2480: PUSH
2481: LD_INT 3200
2483: PUSH
2484: LD_INT 3500
2486: PUSH
2487: LD_INT 3900
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_OWVAR 67
2500: ARRAY
2501: PPUSH
2502: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 800 ) ;
2506: LD_INT 1
2508: PPUSH
2509: CALL_OW 274
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: LD_INT 800
2519: PPUSH
2520: CALL_OW 277
// usForces := [ ] ;
2524: LD_ADDR_EXP 29
2528: PUSH
2529: EMPTY
2530: ST_TO_ADDR
// usToBuild := [ ] ;
2531: LD_ADDR_EXP 31
2535: PUSH
2536: EMPTY
2537: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2538: LD_ADDR_EXP 32
2542: PUSH
2543: EMPTY
2544: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2545: LD_ADDR_VAR 0 2
2549: PUSH
2550: LD_INT 21
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: PUSH
2565: FOR_IN
2566: IFFALSE 2603
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: LD_INT 8
2581: PUSH
2582: LD_INT 8
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_OWVAR 67
2595: ARRAY
2596: PPUSH
2597: CALL_OW 241
2601: GO 2565
2603: POP
2604: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2605: LD_ADDR_VAR 0 2
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 32
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PPUSH
2620: CALL_OW 69
2624: PUSH
2625: FOR_IN
2626: IFFALSE 2716
// begin if GetBWeapon ( i ) = us_radar then
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL_OW 269
2637: PUSH
2638: LD_INT 11
2640: EQUAL
2641: IFFALSE 2666
// begin uc_nation := 0 ;
2643: LD_ADDR_OWVAR 21
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 16
2656: PPUSH
2657: LD_INT 2
2659: PPUSH
2660: CALL_OW 380
// end else
2664: GO 2700
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2666: LD_INT 0
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 5
2674: PUSH
2675: LD_INT 6
2677: PUSH
2678: LD_INT 7
2680: PUSH
2681: LD_INT 8
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: LD_OWVAR 67
2694: ARRAY
2695: PPUSH
2696: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2700: CALL_OW 44
2704: PPUSH
2705: LD_VAR 0 2
2709: PPUSH
2710: CALL_OW 52
// end ;
2714: GO 2625
2716: POP
2717: POP
// b := HexInfo ( 74 , 120 ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 74
2725: PPUSH
2726: LD_INT 120
2728: PPUSH
2729: CALL_OW 428
2733: ST_TO_ADDR
// uc_nation := 1 ;
2734: LD_ADDR_OWVAR 21
2738: PUSH
2739: LD_INT 1
2741: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: DOUBLE
2748: LD_INT 1
2750: DEC
2751: ST_TO_ADDR
2752: LD_INT 1
2754: PUSH
2755: LD_INT 2
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 4
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PUSH
2776: FOR_TO
2777: IFFALSE 2829
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2779: LD_INT 0
2781: PPUSH
2782: LD_INT 1
2784: PPUSH
2785: LD_INT 5
2787: PUSH
2788: LD_INT 6
2790: PUSH
2791: LD_INT 7
2793: PUSH
2794: LD_INT 8
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_OWVAR 67
2807: ARRAY
2808: PPUSH
2809: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2813: CALL_OW 44
2817: PPUSH
2818: LD_VAR 0 3
2822: PPUSH
2823: CALL_OW 52
// end ;
2827: GO 2776
2829: POP
2830: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 313
2840: PPUSH
2841: LD_INT 5
2843: PPUSH
2844: CALL_OW 336
// for i := 1 to 6 do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 6
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2912
// begin PrepareHuman ( false , 4 , 6 ) ;
2864: LD_INT 0
2866: PPUSH
2867: LD_INT 4
2869: PPUSH
2870: LD_INT 6
2872: PPUSH
2873: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2877: CALL_OW 44
2881: PPUSH
2882: LD_INT 32
2884: PUSH
2885: LD_INT 33
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_VAR 0 2
2896: PUSH
2897: LD_INT 2
2899: MOD
2900: PUSH
2901: LD_INT 1
2903: PLUS
2904: ARRAY
2905: PPUSH
2906: CALL_OW 52
// end ;
2910: GO 2861
2912: POP
2913: POP
// for i := 1 to 3 do
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: DOUBLE
2920: LD_INT 1
2922: DEC
2923: ST_TO_ADDR
2924: LD_INT 3
2926: PUSH
2927: FOR_TO
2928: IFFALSE 2957
// begin PrepareHuman ( false , 3 , 6 ) ;
2930: LD_INT 0
2932: PPUSH
2933: LD_INT 3
2935: PPUSH
2936: LD_INT 6
2938: PPUSH
2939: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2943: CALL_OW 44
2947: PPUSH
2948: LD_INT 25
2950: PPUSH
2951: CALL_OW 52
// end ;
2955: GO 2927
2957: POP
2958: POP
// for i := 1 to 3 do
2959: LD_ADDR_VAR 0 2
2963: PUSH
2964: DOUBLE
2965: LD_INT 1
2967: DEC
2968: ST_TO_ADDR
2969: LD_INT 3
2971: PUSH
2972: FOR_TO
2973: IFFALSE 3031
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2975: LD_INT 0
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 6
2983: PUSH
2984: LD_INT 7
2986: PUSH
2987: LD_INT 7
2989: PUSH
2990: LD_INT 7
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_OWVAR 67
3003: ARRAY
3004: PPUSH
3005: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3009: CALL_OW 44
3013: PPUSH
3014: LD_INT 78
3016: PPUSH
3017: LD_INT 130
3019: PPUSH
3020: CALL_OW 428
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: GO 2972
3031: POP
3032: POP
// for i := 1 to 3 do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_INT 3
3045: PUSH
3046: FOR_TO
3047: IFFALSE 3134
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: LD_INT 13
3060: PPUSH
3061: LD_INT 100
3063: PPUSH
3064: CALL 20377 0 5
// veh := CreateVehicle ;
3068: LD_ADDR_VAR 0 4
3072: PUSH
3073: CALL_OW 45
3077: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_INT 3
3085: PPUSH
3086: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 9
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3105: LD_INT 0
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 6
3113: PPUSH
3114: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3118: CALL_OW 44
3122: PPUSH
3123: LD_VAR 0 4
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3046
3134: POP
3135: POP
// InitHc ;
3136: CALL_OW 19
// hc_gallery := us ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING us
3147: ST_TO_ADDR
// hc_face_number := 26 ;
3148: LD_ADDR_OWVAR 34
3152: PUSH
3153: LD_INT 26
3155: ST_TO_ADDR
// hc_name := Doug Callahan ;
3156: LD_ADDR_OWVAR 26
3160: PUSH
3161: LD_STRING Doug Callahan
3163: ST_TO_ADDR
// hc_class := class_engineer ;
3164: LD_ADDR_OWVAR 28
3168: PUSH
3169: LD_INT 2
3171: ST_TO_ADDR
// hc_sex := sex_male ;
3172: LD_ADDR_OWVAR 27
3176: PUSH
3177: LD_INT 1
3179: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3180: LD_ADDR_OWVAR 29
3184: PUSH
3185: LD_INT 10
3187: PUSH
3188: LD_INT 11
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3195: LD_ADDR_OWVAR 30
3199: PUSH
3200: LD_INT 2
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 0
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3218: LD_ADDR_OWVAR 31
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 6
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: ST_TO_ADDR
// usCommander := CreateHuman ;
3241: LD_ADDR_EXP 28
3245: PUSH
3246: CALL_OW 44
3250: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3251: LD_EXP 28
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 52
// DoNotAttack ( 2 , usCommander ) ;
3263: LD_INT 2
3265: PPUSH
3266: LD_EXP 28
3270: PPUSH
3271: CALL_OW 471
// InitHC_All ( ) ;
3275: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3279: LD_INT 2
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: LD_INT 2
3287: PPUSH
3288: LD_INT 12
3290: PPUSH
3291: LD_INT 100
3293: PPUSH
3294: CALL 20377 0 5
// usCargo := CreateVehicle ;
3298: LD_ADDR_EXP 30
3302: PUSH
3303: CALL_OW 45
3307: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3308: LD_EXP 30
3312: PPUSH
3313: LD_INT 81
3315: PPUSH
3316: LD_INT 143
3318: PPUSH
3319: LD_INT 0
3321: PPUSH
3322: CALL_OW 48
// Connect ( usCargo ) ;
3326: LD_EXP 30
3330: PPUSH
3331: CALL 23468 0 1
// DoNotAttack ( 5 , usCargo ) ;
3335: LD_INT 5
3337: PPUSH
3338: LD_EXP 30
3342: PPUSH
3343: CALL_OW 471
// end ;
3347: LD_VAR 0 1
3351: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3352: LD_EXP 29
3356: NOT
3357: PUSH
3358: LD_EXP 6
3362: AND
3363: PUSH
3364: LD_INT 25
3366: PPUSH
3367: CALL_OW 302
3371: AND
3372: PUSH
3373: LD_INT 25
3375: PPUSH
3376: CALL_OW 461
3380: PUSH
3381: LD_INT 2
3383: EQUAL
3384: AND
3385: IFFALSE 3542
3387: GO 3389
3389: DISABLE
3390: LD_INT 0
3392: PPUSH
3393: PPUSH
3394: PPUSH
// begin enable ;
3395: ENABLE
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
3396: LD_ADDR_VAR 0 1
3400: PUSH
3401: DOUBLE
3402: LD_INT 1
3404: DEC
3405: ST_TO_ADDR
3406: LD_INT 4
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 6
3414: PUSH
3415: LD_INT 6
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PUSH
3430: FOR_TO
3431: IFFALSE 3540
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: LD_INT 4
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: LIST
3451: PUSH
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 3
3457: PPUSH
3458: CALL_OW 12
3462: ARRAY
3463: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3464: LD_VAR 0 2
3468: PUSH
3469: LD_INT 4
3471: EQUAL
3472: IFFALSE 3484
// weapon := us_heavy_gun else
3474: LD_ADDR_VAR 0 3
3478: PUSH
3479: LD_INT 6
3481: ST_TO_ADDR
3482: GO 3515
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_INT 5
3491: PUSH
3492: LD_INT 7
3494: PUSH
3495: LD_INT 4
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 3
3508: PPUSH
3509: CALL_OW 12
3513: ARRAY
3514: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3515: LD_INT 25
3517: PPUSH
3518: LD_VAR 0 2
3522: PPUSH
3523: LD_INT 1
3525: PPUSH
3526: LD_INT 2
3528: PPUSH
3529: LD_VAR 0 3
3533: PPUSH
3534: CALL_OW 185
// end ;
3538: GO 3430
3540: POP
3541: POP
// end ;
3542: PPOPN 3
3544: END
// every 0 0$10 trigger usForces >= [ 4 , 5 , 6 , 6 ] [ Difficulty ] do var i , tmp ;
3545: LD_EXP 29
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: LD_INT 5
3555: PUSH
3556: LD_INT 6
3558: PUSH
3559: LD_INT 6
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_OWVAR 67
3572: ARRAY
3573: GREATEREQUAL
3574: IFFALSE 3685
3576: GO 3578
3578: DISABLE
3579: LD_INT 0
3581: PPUSH
3582: PPUSH
// begin enable ;
3583: ENABLE
// tmp := usForces ;
3584: LD_ADDR_VAR 0 2
3588: PUSH
3589: LD_EXP 29
3593: ST_TO_ADDR
// usForces := [ ] ;
3594: LD_ADDR_EXP 29
3598: PUSH
3599: EMPTY
3600: ST_TO_ADDR
// if not tmp then
3601: LD_VAR 0 2
3605: NOT
3606: IFFALSE 3610
// exit ;
3608: GO 3685
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: LD_VAR 0 2
3626: PPUSH
3627: LD_INT 98
3629: PUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PUSH
3637: LD_INT 114
3639: PUSH
3640: LD_INT 50
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 127
3649: PUSH
3650: LD_INT 51
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 131
3659: PUSH
3660: LD_INT 35
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: PPUSH
3673: CALL 55434 0 2
3677: ST_TO_ADDR
// until not tmp ;
3678: LD_VAR 0 2
3682: NOT
3683: IFFALSE 3610
// end ;
3685: PPOPN 2
3687: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3688: LD_EXP 3
3692: PUSH
3693: LD_EXP 5
3697: NOT
3698: AND
3699: PUSH
3700: LD_INT 11
3702: PPUSH
3703: LD_INT 22
3705: PUSH
3706: LD_INT 2
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PPUSH
3713: CALL_OW 70
3717: AND
3718: IFFALSE 3839
3720: GO 3722
3722: DISABLE
3723: LD_INT 0
3725: PPUSH
3726: PPUSH
3727: PPUSH
// begin uc_side := 1 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// tmp := [ ] ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: EMPTY
3750: ST_TO_ADDR
// for i := 1 to 2 do
3751: LD_ADDR_VAR 0 1
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 2
3763: PUSH
3764: FOR_TO
3765: IFFALSE 3837
// begin PrepareSoldier ( false , 7 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 7
3772: PPUSH
3773: CALL_OW 381
// un := CreateHuman ;
3777: LD_ADDR_VAR 0 2
3781: PUSH
3782: CALL_OW 44
3786: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 130
3794: PPUSH
3795: LD_INT 153
3797: PPUSH
3798: LD_INT 3
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3808: LD_VAR 0 2
3812: PPUSH
3813: LD_INT 5
3815: PPUSH
3816: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3820: LD_VAR 0 2
3824: PPUSH
3825: LD_INT 108
3827: PPUSH
3828: LD_INT 108
3830: PPUSH
3831: CALL_OW 174
// end ;
3835: GO 3764
3837: POP
3838: POP
// end ;
3839: PPOPN 3
3841: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3842: LD_EXP 3
3846: PUSH
3847: LD_EXP 5
3851: NOT
3852: AND
3853: PUSH
3854: LD_INT 10
3856: PPUSH
3857: LD_INT 22
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: CALL_OW 70
3871: AND
3872: IFFALSE 3993
3874: GO 3876
3876: DISABLE
3877: LD_INT 0
3879: PPUSH
3880: PPUSH
3881: PPUSH
// begin uc_side := 1 ;
3882: LD_ADDR_OWVAR 20
3886: PUSH
3887: LD_INT 1
3889: ST_TO_ADDR
// uc_nation := 1 ;
3890: LD_ADDR_OWVAR 21
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// tmp := [ ] ;
3898: LD_ADDR_VAR 0 3
3902: PUSH
3903: EMPTY
3904: ST_TO_ADDR
// for i := 1 to 2 do
3905: LD_ADDR_VAR 0 1
3909: PUSH
3910: DOUBLE
3911: LD_INT 1
3913: DEC
3914: ST_TO_ADDR
3915: LD_INT 2
3917: PUSH
3918: FOR_TO
3919: IFFALSE 3991
// begin PrepareSoldier ( false , 7 ) ;
3921: LD_INT 0
3923: PPUSH
3924: LD_INT 7
3926: PPUSH
3927: CALL_OW 381
// un := CreateHuman ;
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: CALL_OW 44
3940: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3941: LD_VAR 0 2
3945: PPUSH
3946: LD_INT 56
3948: PPUSH
3949: LD_INT 101
3951: PPUSH
3952: LD_INT 3
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_INT 5
3969: PPUSH
3970: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3974: LD_VAR 0 2
3978: PPUSH
3979: LD_INT 72
3981: PPUSH
3982: LD_INT 92
3984: PPUSH
3985: CALL_OW 174
// end ;
3989: GO 3918
3991: POP
3992: POP
// end ;
3993: PPOPN 3
3995: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3996: LD_EXP 30
4000: PPUSH
4001: CALL_OW 302
4005: PUSH
4006: LD_EXP 7
4010: NOT
4011: AND
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
// begin enable ;
4021: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: LD_INT 14
4029: PPUSH
4030: LD_INT 81
4032: PUSH
4033: LD_INT 1
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 50
4042: PUSH
4043: EMPTY
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 70
4054: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4055: LD_ADDR_VAR 0 1
4059: PUSH
4060: LD_INT 12
4062: PPUSH
4063: CALL_OW 435
4067: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4068: LD_EXP 30
4072: PPUSH
4073: CALL_OW 261
4077: PUSH
4078: LD_INT 10
4080: LESS
4081: PUSH
4082: LD_INT 2
4084: PPUSH
4085: LD_EXP 30
4089: PPUSH
4090: CALL_OW 292
4094: NOT
4095: AND
4096: IFFALSE 4110
// SetFuel ( usCargo , 100 ) ;
4098: LD_EXP 30
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4110: LD_EXP 30
4114: PPUSH
4115: CALL_OW 314
4119: NOT
4120: PUSH
4121: LD_EXP 30
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: CALL_OW 289
4133: PUSH
4134: LD_INT 100
4136: LESS
4137: AND
4138: PUSH
4139: LD_VAR 0 2
4143: NOT
4144: AND
4145: IFFALSE 4211
// begin if cr then
4147: LD_VAR 0 1
4151: IFFALSE 4182
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4153: LD_EXP 30
4157: PPUSH
4158: LD_VAR 0 1
4162: PUSH
4163: LD_INT 1
4165: ARRAY
4166: PPUSH
4167: LD_VAR 0 1
4171: PUSH
4172: LD_INT 2
4174: ARRAY
4175: PPUSH
4176: CALL_OW 117
4180: GO 4209
// if not IsInArea ( usCargo , usCratesArea ) then
4182: LD_EXP 30
4186: PPUSH
4187: LD_INT 12
4189: PPUSH
4190: CALL_OW 308
4194: NOT
4195: IFFALSE 4209
// ComMoveToArea ( usCargo , usCratesArea ) ;
4197: LD_EXP 30
4201: PPUSH
4202: LD_INT 12
4204: PPUSH
4205: CALL_OW 113
// exit ;
4209: GO 4275
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4211: LD_VAR 0 2
4215: PUSH
4216: LD_EXP 30
4220: PPUSH
4221: LD_INT 14
4223: PPUSH
4224: CALL_OW 308
4228: NOT
4229: AND
4230: IFFALSE 4249
// ComMoveXY ( usCargo , 80 , 143 ) else
4232: LD_EXP 30
4236: PPUSH
4237: LD_INT 80
4239: PPUSH
4240: LD_INT 143
4242: PPUSH
4243: CALL_OW 111
4247: GO 4275
// if GetCargo ( usCargo , mat_cans ) then
4249: LD_EXP 30
4253: PPUSH
4254: LD_INT 1
4256: PPUSH
4257: CALL_OW 289
4261: IFFALSE 4275
// ComGive ( usCargo , usDepot ) ;
4263: LD_EXP 30
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 161
// end ;
4275: PPOPN 2
4277: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4278: LD_EXP 7
4282: NOT
4283: PUSH
4284: LD_INT 22
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 21
4296: PUSH
4297: LD_INT 1
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: LD_INT 3
4306: PUSH
4307: LD_INT 50
4309: PUSH
4310: EMPTY
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: AND
4327: PUSH
4328: LD_INT 22
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 3
4340: PUSH
4341: LD_INT 60
4343: PUSH
4344: EMPTY
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 25
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: PPUSH
4366: CALL_OW 69
4370: AND
4371: IFFALSE 4574
4373: GO 4375
4375: DISABLE
4376: LD_INT 0
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: LD_INT 22
4388: PUSH
4389: LD_INT 1
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 21
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: LD_INT 50
4411: PUSH
4412: EMPTY
4413: LIST
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: LIST
4423: PPUSH
4424: CALL_OW 69
4428: PUSH
4429: FOR_IN
4430: IFFALSE 4572
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 60
4452: PUSH
4453: EMPTY
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 25
4462: PUSH
4463: LD_INT 4
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 69
4479: ST_TO_ADDR
// if not sci then
4480: LD_VAR 0 2
4484: NOT
4485: IFFALSE 4489
// break ;
4487: GO 4572
// sci := sci [ 1 ] ;
4489: LD_ADDR_VAR 0 2
4493: PUSH
4494: LD_VAR 0 2
4498: PUSH
4499: LD_INT 1
4501: ARRAY
4502: ST_TO_ADDR
// if IsInUnit ( sci ) then
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 310
4512: IFFALSE 4525
// ComExit ( sci ) else
4514: LD_VAR 0 2
4518: PPUSH
4519: CALL 53228 0 1
4523: GO 4570
// begin ComHeal ( sci , i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4539: LD_VAR 0 2
4543: PPUSH
4544: LD_INT 32
4546: PUSH
4547: LD_INT 33
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 2
4559: PPUSH
4560: CALL_OW 12
4564: ARRAY
4565: PPUSH
4566: CALL_OW 180
// end ; end ;
4570: GO 4429
4572: POP
4573: POP
// end ;
4574: PPOPN 2
4576: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4577: LD_EXP 7
4581: NOT
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 1
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 3
4595: PUSH
4596: LD_INT 60
4598: PUSH
4599: EMPTY
4600: LIST
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 50
4608: PUSH
4609: EMPTY
4610: LIST
4611: PUSH
4612: LD_INT 34
4614: PUSH
4615: LD_INT 13
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PPUSH
4628: CALL_OW 69
4632: AND
4633: PUSH
4634: LD_INT 22
4636: PUSH
4637: LD_INT 1
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: LD_INT 24
4649: PUSH
4650: LD_INT 1000
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 21
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 30
4676: PUSH
4677: LD_INT 29
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PPUSH
4694: CALL_OW 69
4698: AND
4699: IFFALSE 4968
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
// begin enable ;
4709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4710: LD_ADDR_VAR 0 2
4714: PUSH
4715: LD_INT 22
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 3
4727: PUSH
4728: LD_INT 24
4730: PUSH
4731: LD_INT 1000
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 21
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 30
4757: PUSH
4758: LD_INT 29
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: PPUSH
4775: CALL_OW 69
4779: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4780: LD_ADDR_VAR 0 3
4784: PUSH
4785: LD_INT 22
4787: PUSH
4788: LD_INT 1
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 24
4800: PUSH
4801: LD_INT 600
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 21
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 30
4827: PUSH
4828: LD_INT 29
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4850: LD_ADDR_VAR 0 1
4854: PUSH
4855: LD_INT 22
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: LD_INT 60
4870: PUSH
4871: EMPTY
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 50
4880: PUSH
4881: EMPTY
4882: LIST
4883: PUSH
4884: LD_INT 34
4886: PUSH
4887: LD_INT 13
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4966
// begin if tmp2 then
4908: LD_VAR 0 3
4912: IFFALSE 4940
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4914: LD_VAR 0 1
4918: PPUSH
4919: LD_VAR 0 3
4923: PPUSH
4924: LD_VAR 0 1
4928: PPUSH
4929: CALL_OW 74
4933: PPUSH
4934: CALL_OW 130
4938: GO 4964
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4940: LD_VAR 0 1
4944: PPUSH
4945: LD_VAR 0 2
4949: PPUSH
4950: LD_VAR 0 1
4954: PPUSH
4955: CALL_OW 74
4959: PPUSH
4960: CALL_OW 130
// end ;
4964: GO 4905
4966: POP
4967: POP
// end ;
4968: PPOPN 3
4970: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4971: LD_EXP 7
4975: NOT
4976: PUSH
4977: LD_INT 14
4979: PPUSH
4980: LD_INT 81
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 50
4992: PUSH
4993: EMPTY
4994: LIST
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 70
5004: NOT
5005: AND
5006: PUSH
5007: LD_EXP 31
5011: AND
5012: PUSH
5013: LD_INT 22
5015: PUSH
5016: LD_INT 1
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: LD_INT 60
5028: PUSH
5029: EMPTY
5030: LIST
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 50
5038: PUSH
5039: EMPTY
5040: LIST
5041: PUSH
5042: LD_INT 34
5044: PUSH
5045: LD_INT 13
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 69
5062: AND
5063: IFFALSE 5175
5065: GO 5067
5067: DISABLE
// begin enable ;
5068: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5069: LD_INT 22
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: LD_INT 60
5084: PUSH
5085: EMPTY
5086: LIST
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 50
5094: PUSH
5095: EMPTY
5096: LIST
5097: PUSH
5098: LD_INT 34
5100: PUSH
5101: LD_INT 13
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: PPUSH
5119: LD_EXP 31
5123: PUSH
5124: LD_INT 1
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: ARRAY
5131: PPUSH
5132: LD_EXP 31
5136: PUSH
5137: LD_INT 1
5139: ARRAY
5140: PUSH
5141: LD_INT 2
5143: ARRAY
5144: PPUSH
5145: LD_EXP 31
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PUSH
5154: LD_INT 3
5156: ARRAY
5157: PPUSH
5158: LD_EXP 31
5162: PUSH
5163: LD_INT 1
5165: ARRAY
5166: PUSH
5167: LD_INT 4
5169: ARRAY
5170: PPUSH
5171: CALL_OW 566
// end ;
5175: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5176: LD_INT 22
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: LD_INT 3
5194: PUSH
5195: LD_INT 54
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_INT 25
5210: PUSH
5211: LD_INT 1
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 25
5220: PUSH
5221: LD_INT 5
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: LD_INT 25
5230: PUSH
5231: LD_INT 16
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 69
5254: IFFALSE 5616
5256: GO 5258
5258: DISABLE
5259: LD_INT 0
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
// begin enable ;
5265: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5266: LD_ADDR_VAR 0 2
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 50
5283: PUSH
5284: EMPTY
5285: LIST
5286: PUSH
5287: LD_INT 3
5289: PUSH
5290: LD_INT 54
5292: PUSH
5293: EMPTY
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_INT 25
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 25
5315: PUSH
5316: LD_INT 5
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 25
5325: PUSH
5326: LD_INT 16
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 69
5349: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5350: LD_ADDR_VAR 0 3
5354: PUSH
5355: LD_INT 22
5357: PUSH
5358: LD_INT 1
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 50
5367: PUSH
5368: EMPTY
5369: LIST
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 30
5383: PUSH
5384: LD_INT 32
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 58
5393: PUSH
5394: EMPTY
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: PPUSH
5404: CALL_OW 69
5408: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5409: LD_ADDR_VAR 0 4
5413: PUSH
5414: LD_INT 22
5416: PUSH
5417: LD_INT 1
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 50
5426: PUSH
5427: EMPTY
5428: LIST
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_INT 5
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: LIST
5444: PPUSH
5445: CALL_OW 69
5449: ST_TO_ADDR
// if not tmp then
5450: LD_VAR 0 2
5454: NOT
5455: IFFALSE 5459
// exit ;
5457: GO 5616
// for i in tmp do
5459: LD_ADDR_VAR 0 1
5463: PUSH
5464: LD_VAR 0 2
5468: PUSH
5469: FOR_IN
5470: IFFALSE 5614
// begin btmp := FilterByTag ( btmp , 0 ) ;
5472: LD_ADDR_VAR 0 3
5476: PUSH
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL 50411 0 2
5489: ST_TO_ADDR
// if not btmp then
5490: LD_VAR 0 3
5494: NOT
5495: IFFALSE 5540
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 257
5506: PUSH
5507: LD_INT 16
5509: NONEQUAL
5510: PUSH
5511: LD_VAR 0 4
5515: AND
5516: IFFALSE 5536
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_VAR 0 4
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: CALL_OW 120
// continue ;
5536: GO 5469
// end else
5538: GO 5612
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5540: LD_VAR 0 3
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5556: LD_VAR 0 1
5560: PPUSH
5561: LD_VAR 0 3
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: CALL_OW 120
// wait ( 0 0$9 ) ;
5574: LD_INT 315
5576: PPUSH
5577: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PPUSH
5590: CALL 17518 0 1
5594: IFFALSE 5612
// SetTag ( btmp [ 1 ] , 0 ) ;
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 1
5603: ARRAY
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 109
// end ; end ;
5612: GO 5469
5614: POP
5615: POP
// end ;
5616: PPOPN 4
5618: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5619: LD_INT 22
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 33
5631: PUSH
5632: LD_INT 2
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: LD_INT 50
5641: PUSH
5642: EMPTY
5643: LIST
5644: PUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 61
5650: PUSH
5651: EMPTY
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: PPUSH
5664: CALL_OW 69
5668: IFFALSE 5759
5670: GO 5672
5672: DISABLE
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
// begin enable ;
5677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: LD_INT 22
5685: PUSH
5686: LD_INT 1
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: LD_INT 33
5695: PUSH
5696: LD_INT 2
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 50
5705: PUSH
5706: EMPTY
5707: LIST
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: LD_INT 61
5714: PUSH
5715: EMPTY
5716: LIST
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PPUSH
5728: CALL_OW 69
5732: ST_TO_ADDR
// for i in tmp do
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_VAR 0 2
5742: PUSH
5743: FOR_IN
5744: IFFALSE 5757
// Connect ( i ) ;
5746: LD_VAR 0 1
5750: PPUSH
5751: CALL 23468 0 1
5755: GO 5743
5757: POP
5758: POP
// end ;
5759: PPOPN 2
5761: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5762: LD_EXP 6
5766: PUSH
5767: LD_OWVAR 67
5771: PUSH
5772: LD_INT 1
5774: GREATER
5775: AND
5776: IFFALSE 6218
5778: GO 5780
5780: DISABLE
5781: LD_INT 0
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
5787: PPUSH
// begin wait ( [ 15 15$00 , 15 15$00 , 14 14$00 , 13 13$00 ] [ Difficulty ] ) ;
5788: LD_INT 31500
5790: PUSH
5791: LD_INT 31500
5793: PUSH
5794: LD_INT 29400
5796: PUSH
5797: LD_INT 27300
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_OWVAR 67
5810: ARRAY
5811: PPUSH
5812: CALL_OW 67
// if usSurrender then
5816: LD_EXP 7
5820: IFFALSE 5824
// exit ;
5822: GO 6218
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5824: LD_ADDR_VAR 0 1
5828: PUSH
5829: DOUBLE
5830: LD_INT 1
5832: DEC
5833: ST_TO_ADDR
5834: LD_INT 4
5836: PUSH
5837: LD_INT 5
5839: PUSH
5840: LD_INT 5
5842: PUSH
5843: LD_INT 6
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_OWVAR 67
5856: ARRAY
5857: PUSH
5858: FOR_TO
5859: IFFALSE 6163
// begin uc_side := 1 ;
5861: LD_ADDR_OWVAR 20
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// uc_nation := 1 ;
5869: LD_ADDR_OWVAR 21
5873: PUSH
5874: LD_INT 1
5876: ST_TO_ADDR
// InitHc_All ( ) ;
5877: CALL_OW 584
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5881: LD_INT 0
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 5
5889: PUSH
5890: LD_INT 6
5892: PUSH
5893: LD_INT 7
5895: PUSH
5896: LD_INT 8
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: PUSH
5905: LD_OWVAR 67
5909: ARRAY
5910: PPUSH
5911: CALL_OW 380
// un := CreateHuman ;
5915: LD_ADDR_VAR 0 2
5919: PUSH
5920: CALL_OW 44
5924: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5925: LD_ADDR_VAR 0 4
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_INT 3
5951: MOD
5952: PUSH
5953: LD_INT 1
5955: PLUS
5956: ARRAY
5957: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5958: LD_VAR 0 4
5962: PUSH
5963: LD_INT 4
5965: EQUAL
5966: IFFALSE 6001
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5968: LD_ADDR_VAR 0 5
5972: PUSH
5973: LD_INT 6
5975: PUSH
5976: LD_INT 4
5978: PUSH
5979: LD_INT 5
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 1
5989: PPUSH
5990: LD_INT 3
5992: PPUSH
5993: CALL_OW 12
5997: ARRAY
5998: ST_TO_ADDR
5999: GO 6036
// weapon := [ us_double_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6001: LD_ADDR_VAR 0 5
6005: PUSH
6006: LD_INT 5
6008: PUSH
6009: LD_INT 5
6011: PUSH
6012: LD_INT 7
6014: PUSH
6015: LD_INT 4
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 1
6026: PPUSH
6027: LD_INT 4
6029: PPUSH
6030: CALL_OW 12
6034: ARRAY
6035: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6036: LD_VAR 0 4
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 1
6046: PPUSH
6047: LD_VAR 0 5
6051: PPUSH
6052: LD_INT 30
6054: PPUSH
6055: CALL 20377 0 5
// veh := CreateVehicle ;
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: CALL_OW 45
6068: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6069: LD_ADDR_EXP 32
6073: PUSH
6074: LD_EXP 32
6078: PPUSH
6079: LD_EXP 32
6083: PUSH
6084: LD_INT 1
6086: PLUS
6087: PPUSH
6088: LD_VAR 0 3
6092: PPUSH
6093: CALL_OW 1
6097: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6098: LD_VAR 0 3
6102: PPUSH
6103: LD_INT 4
6105: PPUSH
6106: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6110: LD_VAR 0 3
6114: PPUSH
6115: LD_INT 15
6117: PPUSH
6118: LD_INT 0
6120: PPUSH
6121: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_VAR 0 3
6134: PPUSH
6135: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6139: LD_VAR 0 3
6143: PPUSH
6144: LD_INT 153
6146: PPUSH
6147: LD_INT 45
6149: PPUSH
6150: CALL_OW 111
// wait ( 0 0$2 ) ;
6154: LD_INT 70
6156: PPUSH
6157: CALL_OW 67
// end ;
6161: GO 5858
6163: POP
6164: POP
// repeat wait ( 0 0$1 ) ;
6165: LD_INT 35
6167: PPUSH
6168: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6172: LD_ADDR_EXP 32
6176: PUSH
6177: LD_EXP 32
6181: PPUSH
6182: LD_INT 150
6184: PUSH
6185: LD_INT 36
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 138
6194: PUSH
6195: LD_INT 25
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PPUSH
6206: CALL 55434 0 2
6210: ST_TO_ADDR
// until not usAdditionalForces ;
6211: LD_EXP 32
6215: NOT
6216: IFFALSE 6165
// end ;
6218: PPOPN 5
6220: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 2 ] ] ) do
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 101
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PPUSH
6245: CALL_OW 69
6249: IFFALSE 6269
6251: GO 6253
6253: DISABLE
// begin wait ( 0 0$30 ) ;
6254: LD_INT 1050
6256: PPUSH
6257: CALL_OW 67
// usAttacksAllowed := true ;
6261: LD_ADDR_EXP 6
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// end ; end_of_file
6269: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6270: LD_VAR 0 1
6274: PPUSH
6275: CALL 56946 0 1
// if un = Heike then
6279: LD_VAR 0 1
6283: PUSH
6284: LD_EXP 13
6288: EQUAL
6289: IFFALSE 6298
// YouLost ( Heike ) ;
6291: LD_STRING Heike
6293: PPUSH
6294: CALL_OW 104
// if un = usCommander then
6298: LD_VAR 0 1
6302: PUSH
6303: LD_EXP 28
6307: EQUAL
6308: IFFALSE 6317
// YouLost ( Commander ) ;
6310: LD_STRING Commander
6312: PPUSH
6313: CALL_OW 104
// if GetSide ( un ) = 1 then
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 255
6326: PUSH
6327: LD_INT 1
6329: EQUAL
6330: IFFALSE 6581
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL_OW 264
6341: PUSH
6342: LD_INT 13
6344: EQUAL
6345: PUSH
6346: LD_INT 25
6348: PPUSH
6349: CALL_OW 302
6353: AND
6354: IFFALSE 6375
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6356: LD_INT 25
6358: PPUSH
6359: LD_INT 2
6361: PPUSH
6362: LD_INT 2
6364: PPUSH
6365: LD_INT 2
6367: PPUSH
6368: LD_INT 13
6370: PPUSH
6371: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6375: LD_VAR 0 1
6379: PPUSH
6380: CALL_OW 264
6384: PUSH
6385: LD_INT 12
6387: EQUAL
6388: PUSH
6389: LD_INT 25
6391: PPUSH
6392: CALL_OW 302
6396: AND
6397: IFFALSE 6418
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6399: LD_INT 25
6401: PPUSH
6402: LD_INT 2
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: LD_INT 12
6413: PPUSH
6414: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 266
6427: PUSH
6428: LD_INT 32
6430: EQUAL
6431: IFFALSE 6496
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6433: LD_ADDR_EXP 31
6437: PUSH
6438: LD_EXP 31
6442: PPUSH
6443: LD_EXP 31
6447: PUSH
6448: LD_INT 1
6450: PLUS
6451: PPUSH
6452: LD_INT 32
6454: PUSH
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 250
6464: PUSH
6465: LD_VAR 0 1
6469: PPUSH
6470: CALL_OW 251
6474: PUSH
6475: LD_VAR 0 1
6479: PPUSH
6480: CALL_OW 254
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL_OW 266
6505: PUSH
6506: LD_INT 5
6508: PUSH
6509: LD_INT 4
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: IN
6516: IFFALSE 6581
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6518: LD_ADDR_EXP 31
6522: PUSH
6523: LD_EXP 31
6527: PPUSH
6528: LD_EXP 31
6532: PUSH
6533: LD_INT 1
6535: PLUS
6536: PPUSH
6537: LD_INT 4
6539: PUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 250
6549: PUSH
6550: LD_VAR 0 1
6554: PPUSH
6555: CALL_OW 251
6559: PUSH
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 254
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: PPUSH
6576: CALL_OW 1
6580: ST_TO_ADDR
// end ; end ;
6581: PPOPN 1
6583: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6584: LD_VAR 0 1
6588: PPUSH
6589: CALL_OW 255
6593: PUSH
6594: LD_INT 1
6596: EQUAL
6597: PUSH
6598: LD_VAR 0 1
6602: PPUSH
6603: CALL_OW 110
6607: PUSH
6608: LD_INT 1
6610: EQUAL
6611: AND
6612: IFFALSE 6626
// SetTag ( un , 0 ) ;
6614: LD_VAR 0 1
6618: PPUSH
6619: LD_INT 0
6621: PPUSH
6622: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6626: LD_VAR 0 1
6630: PPUSH
6631: CALL_OW 255
6635: PUSH
6636: LD_INT 1
6638: EQUAL
6639: PUSH
6640: LD_VAR 0 1
6644: PPUSH
6645: CALL_OW 264
6649: PUSH
6650: LD_INT 6
6652: EQUAL
6653: AND
6654: PUSH
6655: LD_EXP 11
6659: NOT
6660: AND
6661: IFFALSE 6671
// seeHeavyGun := true ;
6663: LD_ADDR_EXP 11
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 263
6680: PUSH
6681: LD_INT 2
6683: EQUAL
6684: PUSH
6685: LD_VAR 0 1
6689: PPUSH
6690: CALL_OW 255
6694: PUSH
6695: LD_INT 2
6697: NONEQUAL
6698: AND
6699: IFFALSE 6725
// begin ComUnlink ( un ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 136
// if not seeRemoteVehicle then
6710: LD_EXP 10
6714: NOT
6715: IFFALSE 6725
// seeRemoteVehicle := true ;
6717: LD_ADDR_EXP 10
6721: PUSH
6722: LD_INT 1
6724: ST_TO_ADDR
// end ; end ;
6725: PPOPN 1
6727: END
// on BuildingComplete ( b ) do var i , barracks ;
6728: LD_INT 0
6730: PPUSH
6731: PPUSH
// begin if GetSide ( b ) = 1 then
6732: LD_VAR 0 1
6736: PPUSH
6737: CALL_OW 255
6741: PUSH
6742: LD_INT 1
6744: EQUAL
6745: IFFALSE 6897
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6747: LD_ADDR_EXP 31
6751: PUSH
6752: LD_EXP 31
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 3
6764: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 266
6774: PUSH
6775: LD_INT 4
6777: EQUAL
6778: IFFALSE 6789
// ComUpgrade ( b ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6789: LD_VAR 0 1
6793: PPUSH
6794: CALL_OW 266
6798: PUSH
6799: LD_INT 32
6801: EQUAL
6802: IFFALSE 6897
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6804: LD_VAR 0 1
6808: PPUSH
6809: LD_INT 6
6811: PUSH
6812: LD_INT 7
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 1
6821: PPUSH
6822: LD_INT 2
6824: PPUSH
6825: CALL_OW 12
6829: ARRAY
6830: PPUSH
6831: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 30
6852: PUSH
6853: LD_INT 5
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PPUSH
6864: CALL_OW 69
6868: ST_TO_ADDR
// if barracks then
6869: LD_VAR 0 3
6873: IFFALSE 6897
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: ARRAY
6883: PPUSH
6884: CALL_OW 313
6888: PUSH
6889: LD_INT 1
6891: ARRAY
6892: PPUSH
6893: CALL_OW 122
// end ; end ; end ;
6897: PPOPN 3
6899: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6900: LD_VAR 0 1
6904: PPUSH
6905: LD_VAR 0 2
6909: PPUSH
6910: CALL 57066 0 2
// if GetSide ( factory ) = 1 then
6914: LD_VAR 0 2
6918: PPUSH
6919: CALL_OW 255
6923: PUSH
6924: LD_INT 1
6926: EQUAL
6927: IFFALSE 7006
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6929: LD_VAR 0 1
6933: PPUSH
6934: CALL_OW 264
6938: PUSH
6939: LD_INT 12
6941: EQUAL
6942: IFFALSE 6954
// usCargo := vehicle ;
6944: LD_ADDR_EXP 30
6948: PUSH
6949: LD_VAR 0 1
6953: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6954: LD_VAR 0 1
6958: PPUSH
6959: CALL_OW 264
6963: PUSH
6964: LD_INT 12
6966: PUSH
6967: LD_INT 13
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: IN
6974: NOT
6975: IFFALSE 7006
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6977: LD_ADDR_EXP 29
6981: PUSH
6982: LD_EXP 29
6986: PPUSH
6987: LD_EXP 29
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: PPUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 1
7005: ST_TO_ADDR
// end ; end ;
7006: PPOPN 2
7008: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
7009: LD_VAR 0 2
7013: PPUSH
7014: CALL_OW 255
7018: PUSH
7019: LD_INT 1
7021: EQUAL
7022: IFFALSE 7036
// AddComEnterUnit ( un , amFac ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_INT 25
7031: PPUSH
7032: CALL_OW 180
// end ;
7036: PPOPN 4
7038: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
7039: LD_VAR 0 1
7043: PPUSH
7044: CALL_OW 255
7048: PUSH
7049: LD_INT 1
7051: EQUAL
7052: PUSH
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 266
7062: PUSH
7063: LD_INT 32
7065: EQUAL
7066: AND
7067: PUSH
7068: LD_VAR 0 2
7072: PPUSH
7073: CALL_OW 257
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: IN
7088: AND
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 5
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 50
7112: PUSH
7113: EMPTY
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: AND
7126: IFFALSE 7196
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7128: LD_INT 74
7130: PPUSH
7131: LD_INT 120
7133: PPUSH
7134: CALL_OW 428
7138: PPUSH
7139: CALL_OW 313
7143: PUSH
7144: LD_INT 6
7146: LESS
7147: IFFALSE 7196
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7149: LD_VAR 0 2
7153: PPUSH
7154: LD_INT 74
7156: PPUSH
7157: LD_INT 120
7159: PPUSH
7160: CALL_OW 428
7164: PPUSH
7165: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7169: LD_VAR 0 2
7173: PPUSH
7174: CALL_OW 257
7178: PUSH
7179: LD_INT 1
7181: EQUAL
7182: IFFALSE 7196
// AddComChangeProfession ( un , class_sniper ) ;
7184: LD_VAR 0 2
7188: PPUSH
7189: LD_INT 5
7191: PPUSH
7192: CALL_OW 183
// end ; end ; end_of_file
7196: PPOPN 2
7198: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver , counter ; begin
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
7207: PPUSH
7208: PPUSH
7209: PPUSH
// Video ( true ) ;
7210: LD_INT 1
7212: PPUSH
7213: CALL 52802 0 1
// music_nat := 1 ;
7217: LD_ADDR_OWVAR 71
7221: PUSH
7222: LD_INT 1
7224: ST_TO_ADDR
// music_class := music_recon ;
7225: LD_ADDR_OWVAR 72
7229: PUSH
7230: LD_INT 3
7232: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7233: LD_INT 184
7235: PPUSH
7236: LD_INT 142
7238: PPUSH
7239: LD_INT 2
7241: PPUSH
7242: LD_INT 10
7244: NEG
7245: PPUSH
7246: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7250: LD_INT 184
7252: PPUSH
7253: LD_INT 142
7255: PPUSH
7256: LD_INT 2
7258: PPUSH
7259: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7263: LD_INT 204
7265: PPUSH
7266: LD_INT 151
7268: PPUSH
7269: LD_INT 2
7271: PPUSH
7272: LD_INT 10
7274: NEG
7275: PPUSH
7276: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7280: LD_INT 204
7282: PPUSH
7283: LD_INT 151
7285: PPUSH
7286: LD_INT 2
7288: PPUSH
7289: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7293: LD_INT 184
7295: PPUSH
7296: LD_INT 142
7298: PPUSH
7299: CALL_OW 86
// wait ( 0 0$2 ) ;
7303: LD_INT 70
7305: PPUSH
7306: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7310: LD_ADDR_VAR 0 5
7314: PUSH
7315: LD_EXP 13
7319: PUSH
7320: LD_EXP 14
7324: PUSH
7325: LD_EXP 15
7329: PUSH
7330: LD_EXP 16
7334: PUSH
7335: LD_EXP 17
7339: PUSH
7340: LD_EXP 18
7344: PUSH
7345: LD_EXP 19
7349: PUSH
7350: LD_EXP 20
7354: PUSH
7355: LD_EXP 22
7359: PUSH
7360: LD_EXP 23
7364: PUSH
7365: LD_EXP 24
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_EXP 25
7387: UNION
7388: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7389: LD_ADDR_VAR 0 6
7393: PUSH
7394: LD_VAR 0 5
7398: PPUSH
7399: LD_INT 25
7401: PUSH
7402: LD_INT 2
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 72
7413: PUSH
7414: LD_INT 0
7416: GREATER
7417: ST_TO_ADDR
// hasCamera := false ;
7418: LD_ADDR_VAR 0 7
7422: PUSH
7423: LD_INT 0
7425: ST_TO_ADDR
// if not hasEng then
7426: LD_VAR 0 6
7430: NOT
7431: IFFALSE 7459
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7433: LD_VAR 0 5
7437: PUSH
7438: LD_INT 1
7440: PPUSH
7441: LD_VAR 0 5
7445: PPUSH
7446: CALL_OW 12
7450: ARRAY
7451: PPUSH
7452: LD_INT 2
7454: PPUSH
7455: CALL_OW 336
// if heikeVehicles then
7459: LD_EXP 27
7463: IFFALSE 8087
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7465: LD_ADDR_VAR 0 5
7469: PUSH
7470: LD_VAR 0 5
7474: PPUSH
7475: LD_INT 3
7477: PPUSH
7478: CALL 55056 0 2
7482: ST_TO_ADDR
// for i in heikeVehicles do
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_EXP 27
7492: PUSH
7493: FOR_IN
7494: IFFALSE 8085
// begin if not tmp then
7496: LD_VAR 0 5
7500: NOT
7501: IFFALSE 7505
// break ;
7503: GO 8085
// uc_side := 2 ;
7505: LD_ADDR_OWVAR 20
7509: PUSH
7510: LD_INT 2
7512: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7513: LD_ADDR_OWVAR 21
7517: PUSH
7518: LD_VAR 0 2
7522: PUSH
7523: LD_INT 5
7525: ARRAY
7526: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7527: LD_ADDR_OWVAR 37
7531: PUSH
7532: LD_VAR 0 2
7536: PUSH
7537: LD_INT 1
7539: ARRAY
7540: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7541: LD_ADDR_OWVAR 39
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7555: LD_ADDR_OWVAR 38
7559: PUSH
7560: LD_VAR 0 2
7564: PUSH
7565: LD_INT 3
7567: ARRAY
7568: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7569: LD_ADDR_OWVAR 40
7573: PUSH
7574: LD_VAR 0 2
7578: PUSH
7579: LD_INT 4
7581: ARRAY
7582: ST_TO_ADDR
// veh := CreateVehicle ;
7583: LD_ADDR_VAR 0 4
7587: PUSH
7588: CALL_OW 45
7592: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7593: LD_VAR 0 4
7597: PPUSH
7598: LD_INT 4
7600: PPUSH
7601: CALL_OW 233
// if i [ 3 ] = control_manual then
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 3
7612: ARRAY
7613: PUSH
7614: LD_INT 1
7616: EQUAL
7617: IFFALSE 7702
// begin PlaceUnitArea ( veh , startArea , false ) ;
7619: LD_VAR 0 4
7623: PPUSH
7624: LD_INT 1
7626: PPUSH
7627: LD_INT 0
7629: PPUSH
7630: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7634: LD_VAR 0 2
7638: PUSH
7639: LD_INT 4
7641: ARRAY
7642: PUSH
7643: LD_INT 31
7645: EQUAL
7646: IFFALSE 7664
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7648: LD_VAR 0 5
7652: PUSH
7653: LD_INT 1
7655: ARRAY
7656: PPUSH
7657: LD_INT 3
7659: PPUSH
7660: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7664: LD_VAR 0 5
7668: PUSH
7669: LD_INT 1
7671: ARRAY
7672: PPUSH
7673: LD_VAR 0 4
7677: PPUSH
7678: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7682: LD_ADDR_VAR 0 5
7686: PUSH
7687: LD_VAR 0 5
7691: PPUSH
7692: LD_INT 1
7694: PPUSH
7695: CALL_OW 3
7699: ST_TO_ADDR
// end else
7700: GO 7763
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7702: LD_INT 22
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 34
7714: PUSH
7715: LD_INT 31
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: IFFALSE 7763
// begin PlaceUnitArea ( veh , startArea , false ) ;
7732: LD_VAR 0 4
7736: PPUSH
7737: LD_INT 1
7739: PPUSH
7740: LD_INT 0
7742: PPUSH
7743: CALL_OW 49
// Connect ( veh ) ;
7747: LD_VAR 0 4
7751: PPUSH
7752: CALL 23468 0 1
// wait ( 0 0$2 ) ;
7756: LD_INT 70
7758: PPUSH
7759: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7763: LD_VAR 0 4
7767: PPUSH
7768: LD_VAR 0 2
7772: PUSH
7773: LD_INT 6
7775: ARRAY
7776: PPUSH
7777: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7781: LD_VAR 0 4
7785: PPUSH
7786: LD_INT 20
7788: PPUSH
7789: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 7
7800: ARRAY
7801: PUSH
7802: LD_VAR 0 4
7806: PPUSH
7807: CALL_OW 264
7811: PUSH
7812: LD_INT 51
7814: PUSH
7815: LD_INT 32
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: IN
7822: AND
7823: IFFALSE 7874
// begin for j := 1 to 2 do
7825: LD_ADDR_VAR 0 3
7829: PUSH
7830: DOUBLE
7831: LD_INT 1
7833: DEC
7834: ST_TO_ADDR
7835: LD_INT 2
7837: PUSH
7838: FOR_TO
7839: IFFALSE 7872
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7841: LD_VAR 0 4
7845: PPUSH
7846: LD_VAR 0 3
7850: PPUSH
7851: LD_VAR 0 2
7855: PUSH
7856: LD_INT 7
7858: ARRAY
7859: PUSH
7860: LD_VAR 0 3
7864: ARRAY
7865: PPUSH
7866: CALL_OW 291
7870: GO 7838
7872: POP
7873: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7874: LD_VAR 0 4
7878: PPUSH
7879: LD_INT 185
7881: PPUSH
7882: LD_INT 144
7884: PPUSH
7885: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7889: LD_VAR 0 4
7893: PPUSH
7894: CALL_OW 263
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: PUSH
7903: LD_VAR 0 7
7907: NOT
7908: AND
7909: PUSH
7910: LD_VAR 0 4
7914: PPUSH
7915: CALL_OW 311
7919: PPUSH
7920: CALL_OW 257
7924: PUSH
7925: LD_INT 2
7927: EQUAL
7928: AND
7929: IFFALSE 8034
// begin hasCamera := true ;
7931: LD_ADDR_VAR 0 7
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7939: LD_ADDR_VAR 0 8
7943: PUSH
7944: LD_VAR 0 4
7948: PPUSH
7949: CALL_OW 311
7953: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7954: LD_VAR 0 4
7958: PPUSH
7959: LD_INT 177
7961: PPUSH
7962: LD_INT 138
7964: PPUSH
7965: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7969: LD_VAR 0 8
7973: PPUSH
7974: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7978: LD_VAR 0 8
7982: PPUSH
7983: LD_INT 190
7985: PPUSH
7986: LD_INT 150
7988: PPUSH
7989: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7993: LD_VAR 0 8
7997: PPUSH
7998: LD_VAR 0 4
8002: PPUSH
8003: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
8007: LD_VAR 0 8
8011: PPUSH
8012: LD_INT 170
8014: PPUSH
8015: LD_INT 103
8017: PPUSH
8018: CALL_OW 171
// CenterOnXY ( 190 , 150 ) ;
8022: LD_INT 190
8024: PPUSH
8025: LD_INT 150
8027: PPUSH
8028: CALL_OW 84
// end else
8032: GO 8076
// begin AddComWait ( veh , 0 0$2 ) ;
8034: LD_VAR 0 4
8038: PPUSH
8039: LD_INT 70
8041: PPUSH
8042: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
8046: LD_VAR 0 4
8050: PPUSH
8051: LD_INT 179
8053: PPUSH
8054: LD_INT 129
8056: PPUSH
8057: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 170
8068: PPUSH
8069: LD_INT 103
8071: PPUSH
8072: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
8076: LD_INT 70
8078: PPUSH
8079: CALL_OW 67
// end ;
8083: GO 7493
8085: POP
8086: POP
// end ; if tmp then
8087: LD_VAR 0 5
8091: IFFALSE 8236
// begin for i in tmp do
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_VAR 0 5
8102: PUSH
8103: FOR_IN
8104: IFFALSE 8234
// begin SetDir ( i , 4 ) ;
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_INT 4
8113: PPUSH
8114: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8118: LD_VAR 0 2
8122: PPUSH
8123: LD_INT 1
8125: PPUSH
8126: LD_INT 0
8128: PPUSH
8129: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8133: LD_VAR 0 2
8137: PPUSH
8138: LD_INT 185
8140: PPUSH
8141: LD_INT 144
8143: PPUSH
8144: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8148: LD_VAR 0 2
8152: PPUSH
8153: CALL_OW 257
8157: PUSH
8158: LD_INT 2
8160: EQUAL
8161: PUSH
8162: LD_VAR 0 7
8166: NOT
8167: AND
8168: IFFALSE 8195
// begin hasCamera := true ;
8170: LD_ADDR_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8178: LD_VAR 0 2
8182: PPUSH
8183: LD_INT 190
8185: PPUSH
8186: LD_INT 150
8188: PPUSH
8189: CALL_OW 217
// end else
8193: GO 8210
// AddComMoveXY ( i , 179 , 129 ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_INT 179
8202: PPUSH
8203: LD_INT 129
8205: PPUSH
8206: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8210: LD_VAR 0 2
8214: PPUSH
8215: LD_INT 170
8217: PPUSH
8218: LD_INT 103
8220: PPUSH
8221: CALL_OW 171
// wait ( 0 0$2 ) ;
8225: LD_INT 70
8227: PPUSH
8228: CALL_OW 67
// end ;
8232: GO 8103
8234: POP
8235: POP
// end ; if heikeApes then
8236: LD_EXP 26
8240: IFFALSE 8358
// begin counter := 0 ;
8242: LD_ADDR_VAR 0 9
8246: PUSH
8247: LD_INT 0
8249: ST_TO_ADDR
// for i in heikeApes do
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: LD_EXP 26
8259: PUSH
8260: FOR_IN
8261: IFFALSE 8356
// begin if counter > 2 then
8263: LD_VAR 0 9
8267: PUSH
8268: LD_INT 2
8270: GREATER
8271: IFFALSE 8275
// break ;
8273: GO 8356
// counter := Inc ( counter ) ;
8275: LD_ADDR_VAR 0 9
8279: PUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL 54191 0 1
8289: ST_TO_ADDR
// SetDir ( i , 4 ) ;
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_INT 4
8297: PPUSH
8298: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 0
8312: PPUSH
8313: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_INT 185
8324: PPUSH
8325: LD_INT 144
8327: PPUSH
8328: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8332: LD_VAR 0 2
8336: PPUSH
8337: LD_INT 170
8339: PPUSH
8340: LD_INT 103
8342: PPUSH
8343: CALL_OW 171
// wait ( 0 0$2 ) ;
8347: LD_INT 70
8349: PPUSH
8350: CALL_OW 67
// end ;
8354: GO 8260
8356: POP
8357: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8358: LD_EXP 13
8362: PPUSH
8363: LD_INT 163
8365: PPUSH
8366: LD_INT 89
8368: PPUSH
8369: CALL_OW 171
// Say ( Heike , DH-Intro-1 ) ;
8373: LD_EXP 13
8377: PPUSH
8378: LD_STRING DH-Intro-1
8380: PPUSH
8381: CALL_OW 88
// CenterOnXY ( 175 , 117 ) ;
8385: LD_INT 175
8387: PPUSH
8388: LD_INT 117
8390: PPUSH
8391: CALL_OW 84
// if Markov then
8395: LD_EXP 20
8399: IFFALSE 8974
// begin Say ( Markov , DMar-Intro-2 ) ;
8401: LD_EXP 20
8405: PPUSH
8406: LD_STRING DMar-Intro-2
8408: PPUSH
8409: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8413: LD_EXP 20
8417: PPUSH
8418: LD_STRING DMar-Intro-3
8420: PPUSH
8421: CALL_OW 88
// wait ( 0 0$1 ) ;
8425: LD_INT 35
8427: PPUSH
8428: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8432: LD_EXP 13
8436: PPUSH
8437: CALL_OW 85
// if Kurt then
8441: LD_EXP 23
8445: IFFALSE 8497
// begin if IsInUnit ( Kurt ) then
8447: LD_EXP 23
8451: PPUSH
8452: CALL_OW 310
8456: IFFALSE 8467
// ComExit ( Kurt ) ;
8458: LD_EXP 23
8462: PPUSH
8463: CALL 53228 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8467: LD_EXP 23
8471: PPUSH
8472: LD_INT 130
8474: PPUSH
8475: LD_INT 56
8477: PPUSH
8478: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8482: LD_EXP 23
8486: PPUSH
8487: LD_INT 129
8489: PPUSH
8490: LD_INT 56
8492: PPUSH
8493: CALL_OW 178
// end ; if Kaia then
8497: LD_EXP 18
8501: IFFALSE 8681
// begin Say ( Kaia , DK-Intro-4 ) ;
8503: LD_EXP 18
8507: PPUSH
8508: LD_STRING DK-Intro-4
8510: PPUSH
8511: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8515: LD_EXP 20
8519: PPUSH
8520: LD_STRING DMar-Intro-5
8522: PPUSH
8523: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8527: LD_EXP 20
8531: PPUSH
8532: LD_STRING DMar-Intro-6
8534: PPUSH
8535: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8539: LD_EXP 22
8543: PPUSH
8544: LD_STRING DO-Intro-7
8546: PPUSH
8547: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8551: LD_INT 160
8553: PPUSH
8554: LD_INT 85
8556: PPUSH
8557: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8561: LD_EXP 20
8565: PPUSH
8566: LD_STRING DMar-Intro-8
8568: PPUSH
8569: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8573: LD_EXP 20
8577: PPUSH
8578: LD_STRING DMar-Intro-9
8580: PPUSH
8581: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8585: LD_EXP 20
8589: PPUSH
8590: LD_STRING DMar-Intro-10
8592: PPUSH
8593: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8597: LD_EXP 20
8601: PPUSH
8602: LD_STRING DMar-Intro-11
8604: PPUSH
8605: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8609: LD_EXP 14
8613: PPUSH
8614: LD_STRING DG-Intro-12
8616: PPUSH
8617: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8621: LD_EXP 14
8625: PPUSH
8626: LD_STRING DG-Intro-13
8628: PPUSH
8629: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8633: LD_EXP 14
8637: PPUSH
8638: LD_STRING DG-Intro-14
8640: PPUSH
8641: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8645: LD_EXP 14
8649: PPUSH
8650: LD_STRING DG-Intro-15
8652: PPUSH
8653: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8657: LD_EXP 13
8661: PPUSH
8662: LD_STRING DH-Intro-16
8664: PPUSH
8665: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8669: LD_EXP 20
8673: PPUSH
8674: LD_STRING DMar-Intro-17
8676: PPUSH
8677: CALL_OW 88
// end ; if Kurt and Mike then
8681: LD_EXP 23
8685: PUSH
8686: LD_EXP 15
8690: AND
8691: IFFALSE 8974
// begin CenterNowOnUnits ( Kurt ) ;
8693: LD_EXP 23
8697: PPUSH
8698: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8702: LD_EXP 23
8706: PPUSH
8707: LD_EXP 13
8711: PPUSH
8712: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8716: LD_EXP 23
8720: PPUSH
8721: LD_STRING DKs-Intro-18
8723: PPUSH
8724: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8728: LD_EXP 23
8732: PPUSH
8733: LD_STRING DKs-Intro-19
8735: PPUSH
8736: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8740: LD_EXP 15
8744: PPUSH
8745: CALL_OW 87
// if IsInUnit ( Mike ) then
8749: LD_EXP 15
8753: PPUSH
8754: CALL_OW 310
8758: IFFALSE 8769
// ComExit ( Mike ) ;
8760: LD_EXP 15
8764: PPUSH
8765: CALL 53228 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8769: LD_EXP 15
8773: PPUSH
8774: LD_INT 129
8776: PPUSH
8777: LD_INT 53
8779: PPUSH
8780: CALL_OW 171
// AddComHold ( Mike ) ;
8784: LD_EXP 15
8788: PPUSH
8789: CALL_OW 200
// wait ( 0 0$2 ) ;
8793: LD_INT 70
8795: PPUSH
8796: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8800: LD_EXP 15
8804: PPUSH
8805: LD_STRING DM-Intro-20
8807: PPUSH
8808: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8812: LD_ADDR_EXP 3
8816: PUSH
8817: LD_STRING Scout
8819: PPUSH
8820: CALL_OW 97
8824: ST_TO_ADDR
// if scoutActive = 1 then
8825: LD_EXP 3
8829: PUSH
8830: LD_INT 1
8832: EQUAL
8833: IFFALSE 8930
// begin CenterNowOnUnits ( Kurt ) ;
8835: LD_EXP 23
8839: PPUSH
8840: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8844: LD_EXP 13
8848: PPUSH
8849: LD_STRING DH-Intro-21
8851: PPUSH
8852: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8856: LD_EXP 15
8860: PPUSH
8861: LD_STRING DM-Intro-22
8863: PPUSH
8864: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8868: LD_EXP 23
8872: PPUSH
8873: LD_STRING DKs-Intro-23
8875: PPUSH
8876: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8880: LD_EXP 23
8884: PPUSH
8885: LD_INT 5
8887: PPUSH
8888: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8892: LD_EXP 15
8896: PPUSH
8897: LD_INT 5
8899: PPUSH
8900: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8904: LD_EXP 23
8908: PUSH
8909: LD_EXP 15
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PPUSH
8918: LD_INT 104
8920: PPUSH
8921: LD_INT 66
8923: PPUSH
8924: CALL_OW 111
// end else
8928: GO 8974
// begin scoutActive := 0 ;
8930: LD_ADDR_EXP 3
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// Say ( Heike , DH-Intro-a-21 ) ;
8938: LD_EXP 13
8942: PPUSH
8943: LD_STRING DH-Intro-a-21
8945: PPUSH
8946: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8950: LD_EXP 15
8954: PPUSH
8955: LD_STRING DM-Intro-a-22
8957: PPUSH
8958: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8962: LD_EXP 23
8966: PPUSH
8967: LD_STRING DKs-Intro-a-23
8969: PPUSH
8970: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8974: LD_INT 0
8976: PPUSH
8977: CALL 52802 0 1
// music_nat := music_auto ;
8981: LD_ADDR_OWVAR 71
8985: PUSH
8986: LD_INT 0
8988: ST_TO_ADDR
// music_class := music_auto ;
8989: LD_ADDR_OWVAR 72
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8997: LD_STRING M1
8999: PPUSH
9000: CALL_OW 337
// wait ( 0 0$3 ) ;
9004: LD_INT 105
9006: PPUSH
9007: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
9011: LD_EXP 13
9015: PPUSH
9016: LD_STRING DH-Base-1
9018: PPUSH
9019: CALL_OW 88
// if Kaia then
9023: LD_EXP 18
9027: IFFALSE 9137
// begin Say ( Kaia , DK-Base-2 ) ;
9029: LD_EXP 18
9033: PPUSH
9034: LD_STRING DK-Base-2
9036: PPUSH
9037: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
9041: LD_EXP 13
9045: PPUSH
9046: LD_STRING DH-Base-3
9048: PPUSH
9049: CALL_OW 88
// if Aviradze then
9053: LD_EXP 24
9057: IFFALSE 9137
// begin Say ( Aviradze , DA-Base-4 ) ;
9059: LD_EXP 24
9063: PPUSH
9064: LD_STRING DA-Base-4
9066: PPUSH
9067: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
9071: LD_EXP 18
9075: PPUSH
9076: LD_STRING DK-Base-5
9078: PPUSH
9079: CALL_OW 88
// if Markov then
9083: LD_EXP 20
9087: IFFALSE 9137
// begin Say ( Markov , DMar-Base-6 ) ;
9089: LD_EXP 20
9093: PPUSH
9094: LD_STRING DMar-Base-6
9096: PPUSH
9097: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
9101: LD_EXP 18
9105: PPUSH
9106: LD_STRING DK-Base-7
9108: PPUSH
9109: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
9113: LD_EXP 20
9117: PPUSH
9118: LD_STRING DMar-Base-8
9120: PPUSH
9121: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9125: LD_EXP 20
9129: PPUSH
9130: LD_STRING DMar-Base-9
9132: PPUSH
9133: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9137: CALL_OW 22
// end ;
9141: LD_VAR 0 1
9145: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9146: LD_EXP 5
9150: IFFALSE 10261
9152: GO 9154
9154: DISABLE
9155: LD_INT 0
9157: PPUSH
9158: PPUSH
// begin InGameOn ;
9159: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9163: LD_EXP 15
9167: PUSH
9168: LD_EXP 23
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PPUSH
9177: LD_EXP 13
9181: PPUSH
9182: CALL_OW 119
// ComExit ( Heike ) ;
9186: LD_EXP 13
9190: PPUSH
9191: CALL 53228 0 1
// if IsOk ( Mike ) then
9195: LD_EXP 15
9199: PPUSH
9200: CALL_OW 302
9204: IFFALSE 9222
// AddComTurnUnit ( Heike , Mike ) else
9206: LD_EXP 13
9210: PPUSH
9211: LD_EXP 15
9215: PPUSH
9216: CALL_OW 179
9220: GO 9236
// AddComTurnUnit ( Heike , Kurt ) ;
9222: LD_EXP 13
9226: PPUSH
9227: LD_EXP 23
9231: PPUSH
9232: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9236: LD_EXP 15
9240: PPUSH
9241: CALL_OW 302
9245: PUSH
9246: LD_EXP 23
9250: PPUSH
9251: CALL_OW 302
9255: AND
9256: IFFALSE 9507
// begin CenterNowOnUnits ( Mike ) ;
9258: LD_EXP 15
9262: PPUSH
9263: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9267: LD_EXP 15
9271: PPUSH
9272: LD_STRING DM-Scout-1
9274: PPUSH
9275: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9279: LD_EXP 13
9283: PPUSH
9284: LD_STRING DH-Scout-2
9286: PPUSH
9287: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9291: LD_EXP 23
9295: PPUSH
9296: LD_STRING DKs-Scout-3
9298: PPUSH
9299: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9303: LD_EXP 13
9307: PPUSH
9308: LD_STRING DH-Scout-4
9310: PPUSH
9311: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9315: LD_EXP 13
9319: PPUSH
9320: LD_STRING DH-Scout-5
9322: PPUSH
9323: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9327: LD_ADDR_VAR 0 2
9331: PUSH
9332: LD_INT 72
9334: PUSH
9335: LD_INT 122
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 89
9344: PUSH
9345: LD_INT 131
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 99
9354: PUSH
9355: LD_INT 139
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 100
9364: PUSH
9365: LD_INT 148
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: ST_TO_ADDR
// for i in tmp do
9378: LD_ADDR_VAR 0 1
9382: PUSH
9383: LD_VAR 0 2
9387: PUSH
9388: FOR_IN
9389: IFFALSE 9447
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9391: LD_VAR 0 1
9395: PUSH
9396: LD_INT 1
9398: ARRAY
9399: PPUSH
9400: LD_VAR 0 1
9404: PUSH
9405: LD_INT 2
9407: ARRAY
9408: PPUSH
9409: LD_INT 2
9411: PPUSH
9412: LD_INT 6
9414: NEG
9415: PPUSH
9416: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9420: LD_VAR 0 1
9424: PUSH
9425: LD_INT 1
9427: ARRAY
9428: PPUSH
9429: LD_VAR 0 1
9433: PUSH
9434: LD_INT 2
9436: ARRAY
9437: PPUSH
9438: LD_INT 2
9440: PPUSH
9441: CALL_OW 331
// end ;
9445: GO 9388
9447: POP
9448: POP
// CenterOnXY ( 83 , 132 ) ;
9449: LD_INT 83
9451: PPUSH
9452: LD_INT 132
9454: PPUSH
9455: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9459: LD_EXP 23
9463: PPUSH
9464: LD_STRING DKs-Scout-6
9466: PPUSH
9467: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9471: LD_EXP 15
9475: PPUSH
9476: LD_STRING DM-Scout-7
9478: PPUSH
9479: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9483: LD_EXP 15
9487: PPUSH
9488: LD_STRING DM-Scout-8
9490: PPUSH
9491: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9495: LD_EXP 23
9499: PPUSH
9500: LD_STRING DKs-Scout-9
9502: PPUSH
9503: CALL_OW 88
// end ; if IsDead ( Mike ) then
9507: LD_EXP 15
9511: PPUSH
9512: CALL_OW 301
9516: IFFALSE 9683
// begin CenterNowOnUnits ( Kurt ) ;
9518: LD_EXP 23
9522: PPUSH
9523: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9527: LD_EXP 23
9531: PPUSH
9532: LD_STRING DKs-Scout-b-1
9534: PPUSH
9535: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9539: LD_EXP 23
9543: PPUSH
9544: LD_STRING DKs-Scout-b-2
9546: PPUSH
9547: CALL_OW 88
// if IsOk ( Givi ) then
9551: LD_EXP 14
9555: PPUSH
9556: CALL_OW 302
9560: IFFALSE 9635
// begin ComExit ( Givi ) ;
9562: LD_EXP 14
9566: PPUSH
9567: CALL 53228 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9571: LD_EXP 14
9575: PPUSH
9576: LD_EXP 23
9580: PPUSH
9581: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9585: LD_EXP 14
9589: PPUSH
9590: LD_STRING DG-Scout-b-3
9592: PPUSH
9593: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9597: LD_EXP 14
9601: PPUSH
9602: LD_STRING DG-Scout-b-4
9604: PPUSH
9605: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9609: LD_EXP 14
9613: PPUSH
9614: LD_STRING DG-Scout-b-5
9616: PPUSH
9617: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9621: LD_EXP 13
9625: PPUSH
9626: LD_STRING DH-Scout-b-6
9628: PPUSH
9629: CALL_OW 88
// end else
9633: GO 9647
// Say ( Heike , DH-Scout-a-4 ) ;
9635: LD_EXP 13
9639: PPUSH
9640: LD_STRING DH-Scout-a-4
9642: PPUSH
9643: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9647: LD_EXP 23
9651: PPUSH
9652: LD_STRING DKs-Scout-b-7
9654: PPUSH
9655: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9659: LD_EXP 23
9663: PPUSH
9664: LD_STRING DKs-Scout-b-8
9666: PPUSH
9667: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9671: LD_EXP 23
9675: PPUSH
9676: LD_STRING DKs-Scout-b-9
9678: PPUSH
9679: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9683: LD_EXP 23
9687: PPUSH
9688: CALL_OW 301
9692: IFFALSE 9971
// begin CenterNowOnUnits ( Mike ) ;
9694: LD_EXP 15
9698: PPUSH
9699: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9703: LD_EXP 15
9707: PPUSH
9708: LD_STRING DM-Scout-a-1
9710: PPUSH
9711: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9715: LD_EXP 15
9719: PPUSH
9720: LD_STRING DM-Scout-a-2
9722: PPUSH
9723: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9727: LD_EXP 15
9731: PPUSH
9732: CALL_OW 256
9736: PUSH
9737: LD_INT 1000
9739: LESS
9740: IFFALSE 9756
// Say ( Heike , DH-Scout-a-3 ) else
9742: LD_EXP 13
9746: PPUSH
9747: LD_STRING DH-Scout-a-3
9749: PPUSH
9750: CALL_OW 88
9754: GO 9768
// Say ( Heike , DH-Scout-a-4 ) ;
9756: LD_EXP 13
9760: PPUSH
9761: LD_STRING DH-Scout-a-4
9763: PPUSH
9764: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9768: LD_EXP 15
9772: PPUSH
9773: LD_STRING DM-Scout-a-5
9775: PPUSH
9776: CALL_OW 88
// if IsOk ( Kaia ) then
9780: LD_EXP 18
9784: PPUSH
9785: CALL_OW 302
9789: IFFALSE 9971
// begin ComExit ( Kaia ) ;
9791: LD_EXP 18
9795: PPUSH
9796: CALL 53228 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9800: LD_EXP 18
9804: PPUSH
9805: LD_EXP 15
9809: PPUSH
9810: CALL_OW 172
// wait ( 0 0$2 ) ;
9814: LD_INT 70
9816: PPUSH
9817: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9821: LD_EXP 18
9825: PPUSH
9826: LD_EXP 15
9830: PPUSH
9831: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9835: LD_EXP 15
9839: PPUSH
9840: LD_EXP 18
9844: PPUSH
9845: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9849: LD_EXP 18
9853: PPUSH
9854: LD_STRING DK-Scout-a-6
9856: PPUSH
9857: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9861: LD_EXP 15
9865: PPUSH
9866: LD_STRING DM-Scout-a-7
9868: PPUSH
9869: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9873: LD_EXP 18
9877: PPUSH
9878: LD_STRING DK-Scout-a-8
9880: PPUSH
9881: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9885: LD_EXP 18
9889: PPUSH
9890: LD_STRING DK-Scout-a-9
9892: PPUSH
9893: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9897: LD_EXP 13
9901: PPUSH
9902: LD_STRING DH-Scout-a-10
9904: PPUSH
9905: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9909: LD_EXP 15
9913: PPUSH
9914: LD_EXP 13
9918: PPUSH
9919: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9923: LD_EXP 15
9927: PPUSH
9928: LD_STRING DM-Scout-a-11
9930: PPUSH
9931: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9935: LD_EXP 15
9939: PPUSH
9940: LD_STRING DM-Scout-a-12
9942: PPUSH
9943: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9947: LD_EXP 15
9951: PPUSH
9952: LD_STRING DM-Scout-a-13
9954: PPUSH
9955: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9959: LD_EXP 15
9963: PPUSH
9964: LD_STRING DM-Scout-a-14
9966: PPUSH
9967: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9971: LD_EXP 14
9975: PPUSH
9976: CALL_OW 302
9980: IFFALSE 10008
// begin Say ( Givi , DG-Scout-10 ) ;
9982: LD_EXP 14
9986: PPUSH
9987: LD_STRING DG-Scout-10
9989: PPUSH
9990: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9994: LD_EXP 14
9998: PPUSH
9999: LD_STRING DG-Scout-11
10001: PPUSH
10002: CALL_OW 88
// end else
10006: GO 10065
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
10008: LD_EXP 25
10012: PPUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 72
10027: PPUSH
10028: LD_STRING DArm-Scout-10
10030: PPUSH
10031: CALL 187 0 2
10035: NOT
10036: IFFALSE 10065
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
10038: LD_EXP 25
10042: PPUSH
10043: LD_INT 26
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 72
10057: PPUSH
10058: LD_STRING DArf-Scout-10
10060: PPUSH
10061: CALL 187 0 2
// Say ( Heike , DH-Scout-12 ) ;
10065: LD_EXP 13
10069: PPUSH
10070: LD_STRING DH-Scout-12
10072: PPUSH
10073: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
10077: LD_EXP 13
10081: PPUSH
10082: LD_STRING DH-Scout-13
10084: PPUSH
10085: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
10089: LD_EXP 15
10093: PPUSH
10094: CALL_OW 302
10098: PUSH
10099: LD_EXP 23
10103: PPUSH
10104: CALL_OW 302
10108: AND
10109: IFFALSE 10137
// begin Say ( Mike , DM-Scout-14 ) ;
10111: LD_EXP 15
10115: PPUSH
10116: LD_STRING DM-Scout-14
10118: PPUSH
10119: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
10123: LD_EXP 13
10127: PPUSH
10128: LD_STRING DH-Scout-c-14
10130: PPUSH
10131: CALL_OW 88
// end else
10135: GO 10230
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10137: LD_EXP 15
10141: PPUSH
10142: CALL_OW 302
10146: PUSH
10147: LD_EXP 23
10151: PPUSH
10152: CALL_OW 302
10156: XOR
10157: IFFALSE 10218
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10159: LD_EXP 25
10163: PPUSH
10164: LD_INT 26
10166: PUSH
10167: LD_INT 1
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 72
10178: PPUSH
10179: LD_STRING DArm-Scout-a-14
10181: PPUSH
10182: CALL 187 0 2
10186: NOT
10187: IFFALSE 10216
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10189: LD_EXP 25
10193: PPUSH
10194: LD_INT 26
10196: PUSH
10197: LD_INT 2
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PPUSH
10204: CALL_OW 72
10208: PPUSH
10209: LD_STRING DArf-Scout-a-14
10211: PPUSH
10212: CALL 187 0 2
// end else
10216: GO 10230
// Say ( Heike , DH-Scout-d-14 ) ;
10218: LD_EXP 13
10222: PPUSH
10223: LD_STRING DH-Scout-d-14
10225: PPUSH
10226: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10230: LD_EXP 13
10234: PPUSH
10235: LD_STRING DH-Scout-15
10237: PPUSH
10238: CALL_OW 88
// InGameOff ;
10242: CALL_OW 9
// wait ( 1 1$00 ) ;
10246: LD_INT 2100
10248: PPUSH
10249: CALL_OW 67
// usAttacksAllowed := true ;
10253: LD_ADDR_EXP 6
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// end ;
10261: PPOPN 2
10263: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10264: LD_EXP 4
10268: IFFALSE 10445
10270: GO 10272
10272: DISABLE
10273: LD_INT 0
10275: PPUSH
// begin spoken := true ;
10276: LD_ADDR_VAR 0 1
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10284: LD_INT 1050
10286: PPUSH
10287: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10291: LD_EXP 13
10295: PPUSH
10296: LD_STRING DH-Scout-c-1
10298: PPUSH
10299: CALL_OW 88
// if not IsOk ( Givi ) then
10303: LD_EXP 14
10307: PPUSH
10308: CALL_OW 302
10312: NOT
10313: IFFALSE 10317
// exit ;
10315: GO 10445
// if IsOk ( Givi ) then
10317: LD_EXP 14
10321: PPUSH
10322: CALL_OW 302
10326: IFFALSE 10354
// begin Say ( Givi , DG-Scout-c-2 ) ;
10328: LD_EXP 14
10332: PPUSH
10333: LD_STRING DG-Scout-c-2
10335: PPUSH
10336: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10340: LD_EXP 14
10344: PPUSH
10345: LD_STRING DG-Scout-c-3
10347: PPUSH
10348: CALL_OW 88
// end else
10352: GO 10427
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_EXP 25
10363: PPUSH
10364: LD_INT 26
10366: PUSH
10367: LD_INT 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 72
10378: PPUSH
10379: LD_STRING DArm-Scout-c-3
10381: PPUSH
10382: CALL 187 0 2
10386: ST_TO_ADDR
// if not spoken then
10387: LD_VAR 0 1
10391: NOT
10392: IFFALSE 10427
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10394: LD_ADDR_VAR 0 1
10398: PUSH
10399: LD_EXP 25
10403: PPUSH
10404: LD_INT 26
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PPUSH
10414: CALL_OW 72
10418: PPUSH
10419: LD_STRING DArf-Scout-c-3
10421: PPUSH
10422: CALL 187 0 2
10426: ST_TO_ADDR
// ; end ; if spoken then
10427: LD_VAR 0 1
10431: IFFALSE 10445
// Say ( Heike , DH-Scout-c-4 ) ;
10433: LD_EXP 13
10437: PPUSH
10438: LD_STRING DH-Scout-c-4
10440: PPUSH
10441: CALL_OW 88
// end ;
10445: PPOPN 1
10447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10448: LD_INT 22
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 30
10460: PUSH
10461: LD_INT 7
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 69
10476: PUSH
10477: LD_EXP 24
10481: PPUSH
10482: CALL_OW 302
10486: AND
10487: IFFALSE 10572
10489: GO 10491
10491: DISABLE
// begin DialogueOn ;
10492: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10496: LD_EXP 24
10500: PPUSH
10501: LD_STRING DA-Lab-1
10503: PPUSH
10504: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10508: LD_EXP 13
10512: PPUSH
10513: LD_STRING DH-Lab-2
10515: PPUSH
10516: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10520: LD_EXP 24
10524: PPUSH
10525: LD_STRING DA-Lab-3
10527: PPUSH
10528: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10532: LD_EXP 24
10536: PPUSH
10537: LD_STRING DA-Lab-4
10539: PPUSH
10540: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10544: LD_EXP 24
10548: PPUSH
10549: LD_STRING DA-Lab-5
10551: PPUSH
10552: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10556: LD_EXP 13
10560: PPUSH
10561: LD_STRING DH-Lab-6
10563: PPUSH
10564: CALL_OW 88
// DialogueOff ;
10568: CALL_OW 7
// end ;
10572: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10573: LD_INT 7
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: CALL_OW 321
10583: PUSH
10584: LD_INT 2
10586: EQUAL
10587: PUSH
10588: LD_EXP 14
10592: PPUSH
10593: CALL_OW 302
10597: AND
10598: IFFALSE 10767
10600: GO 10602
10602: DISABLE
// begin DialogueOn ;
10603: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10607: LD_EXP 14
10611: PPUSH
10612: LD_STRING DG-Opt-1
10614: PPUSH
10615: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10619: LD_EXP 13
10623: PPUSH
10624: LD_STRING DH-Opt-2
10626: PPUSH
10627: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10631: LD_EXP 14
10635: PPUSH
10636: LD_STRING DG-Opt-3
10638: PPUSH
10639: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10643: LD_EXP 14
10647: PPUSH
10648: LD_STRING DG-Opt-4
10650: PPUSH
10651: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10655: LD_EXP 13
10659: PPUSH
10660: LD_STRING DH-Opt-5
10662: PPUSH
10663: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10667: LD_EXP 14
10671: PPUSH
10672: LD_STRING DG-Opt-6
10674: PPUSH
10675: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10679: LD_EXP 13
10683: PPUSH
10684: LD_STRING DH-Opt-7
10686: PPUSH
10687: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10691: LD_EXP 14
10695: PPUSH
10696: LD_STRING DG-Opt-8
10698: PPUSH
10699: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10703: LD_EXP 14
10707: PPUSH
10708: LD_STRING DG-Opt-9
10710: PPUSH
10711: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10715: LD_EXP 13
10719: PPUSH
10720: LD_STRING DH-Opt-10
10722: PPUSH
10723: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10727: LD_EXP 14
10731: PPUSH
10732: LD_STRING DG-Opt-11
10734: PPUSH
10735: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10739: LD_EXP 14
10743: PPUSH
10744: LD_STRING DG-Opt-12
10746: PPUSH
10747: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10751: LD_EXP 13
10755: PPUSH
10756: LD_STRING DH-Opt-13
10758: PPUSH
10759: CALL_OW 88
// DialogueOff ;
10763: CALL_OW 7
// end ;
10767: END
// every 0 0$2 trigger UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) do
10768: LD_EXP 25
10772: PPUSH
10773: LD_INT 95
10775: PUSH
10776: LD_INT 7
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 23
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 26
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 72
10812: IFFALSE 10873
10814: GO 10816
10816: DISABLE
// begin Say ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , cratesRiverArea ] , [ f_nation , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-River ) ;
10817: LD_EXP 25
10821: PPUSH
10822: LD_INT 95
10824: PUSH
10825: LD_INT 7
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 23
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 26
10844: PUSH
10845: LD_INT 1
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 72
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: PPUSH
10866: LD_STRING DArm-River
10868: PPUSH
10869: CALL_OW 88
// end ;
10873: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10874: LD_INT 40
10876: PPUSH
10877: LD_INT 2
10879: PPUSH
10880: CALL_OW 321
10884: PUSH
10885: LD_INT 2
10887: EQUAL
10888: PUSH
10889: LD_EXP 16
10893: PPUSH
10894: CALL_OW 302
10898: AND
10899: IFFALSE 11149
10901: GO 10903
10903: DISABLE
// begin DialogueOn ;
10904: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10908: LD_EXP 16
10912: PPUSH
10913: LD_STRING DI-Roc-1
10915: PPUSH
10916: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10920: LD_EXP 13
10924: PPUSH
10925: LD_STRING DH-Roc-2
10927: PPUSH
10928: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10932: LD_EXP 16
10936: PPUSH
10937: LD_STRING DI-Roc-3
10939: PPUSH
10940: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10944: LD_EXP 16
10948: PPUSH
10949: LD_STRING DI-Roc-4
10951: PPUSH
10952: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10956: LD_EXP 18
10960: PPUSH
10961: LD_STRING DK-Roc-5
10963: PPUSH
10964: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10968: LD_EXP 18
10972: PPUSH
10973: LD_STRING DK-Roc-6
10975: PPUSH
10976: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10980: LD_EXP 14
10984: PPUSH
10985: LD_STRING DG-Roc-7
10987: PPUSH
10988: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10992: LD_EXP 14
10996: PPUSH
10997: LD_STRING DG-Roc-8
10999: PPUSH
11000: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
11004: LD_EXP 20
11008: PPUSH
11009: CALL_OW 302
11013: PUSH
11014: LD_EXP 18
11018: PPUSH
11019: CALL_OW 302
11023: AND
11024: PUSH
11025: LD_EXP 14
11029: PPUSH
11030: CALL_OW 302
11034: AND
11035: IFFALSE 11145
// begin Say ( Markov , DMar-Roc-9 ) ;
11037: LD_EXP 20
11041: PPUSH
11042: LD_STRING DMar-Roc-9
11044: PPUSH
11045: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
11049: LD_EXP 20
11053: PPUSH
11054: LD_STRING DMar-Roc-10
11056: PPUSH
11057: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
11061: LD_EXP 18
11065: PPUSH
11066: LD_STRING DK-Roc-11
11068: PPUSH
11069: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
11073: LD_EXP 20
11077: PPUSH
11078: LD_STRING DMar-Roc-12
11080: PPUSH
11081: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
11085: LD_EXP 18
11089: PPUSH
11090: LD_STRING DK-Roc-13
11092: PPUSH
11093: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
11097: LD_EXP 14
11101: PPUSH
11102: LD_STRING DG-Roc-14
11104: PPUSH
11105: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
11109: LD_EXP 20
11113: PPUSH
11114: LD_STRING DMar-Roc-15
11116: PPUSH
11117: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
11121: LD_EXP 20
11125: PPUSH
11126: LD_STRING DMar-Roc-16
11128: PPUSH
11129: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
11133: LD_EXP 18
11137: PPUSH
11138: LD_STRING DK-Roc-17
11140: PPUSH
11141: CALL_OW 88
// end ; DialogueOff ;
11145: CALL_OW 7
// end ;
11149: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
11150: LD_EXP 28
11154: PPUSH
11155: CALL_OW 256
11159: PUSH
11160: LD_INT 1000
11162: LESS
11163: PUSH
11164: LD_INT 22
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 23
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: PUSH
11204: LD_INT 6
11206: LESS
11207: OR
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 21
11221: PUSH
11222: LD_INT 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 25
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: PUSH
11249: LD_INT 2
11251: LESS
11252: OR
11253: IFFALSE 12499
11255: GO 11257
11257: DISABLE
11258: LD_INT 0
11260: PPUSH
11261: PPUSH
11262: PPUSH
// begin usAttacksAllowed := false ;
11263: LD_ADDR_EXP 6
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// usSurrender := true ;
11271: LD_ADDR_EXP 7
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11279: LD_INT 1
11281: PPUSH
11282: LD_INT 2
11284: PPUSH
11285: LD_INT 1
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 80
// if IsDead ( usCommander ) then
11295: LD_EXP 28
11299: PPUSH
11300: CALL_OW 301
11304: IFFALSE 11308
// exit ;
11306: GO 12499
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_INT 2
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 21
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 60
11335: PUSH
11336: EMPTY
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 69
11348: PUSH
11349: FOR_IN
11350: IFFALSE 11363
// ComStop ( i ) ;
11352: LD_VAR 0 1
11356: PPUSH
11357: CALL_OW 141
11361: GO 11349
11363: POP
11364: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 3
11382: PUSH
11383: LD_INT 50
11385: PUSH
11386: EMPTY
11387: LIST
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 21
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11430
// SetLives ( i , 251 ) ;
11416: LD_VAR 0 1
11420: PPUSH
11421: LD_INT 251
11423: PPUSH
11424: CALL_OW 234
11428: GO 11413
11430: POP
11431: POP
// InGameOn ;
11432: CALL_OW 8
// ComExit ( usCommander ) ;
11436: LD_EXP 28
11440: PPUSH
11441: CALL 53228 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11445: LD_EXP 28
11449: PPUSH
11450: LD_INT 81
11452: PPUSH
11453: LD_INT 143
11455: PPUSH
11456: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11460: LD_EXP 28
11464: PPUSH
11465: LD_INT 81
11467: PPUSH
11468: LD_INT 139
11470: PPUSH
11471: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11475: LD_INT 81
11477: PPUSH
11478: LD_INT 144
11480: PPUSH
11481: LD_INT 2
11483: PPUSH
11484: LD_INT 10
11486: NEG
11487: PPUSH
11488: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11492: LD_EXP 28
11496: PPUSH
11497: CALL_OW 87
// wait ( 0 0$2 ) ;
11501: LD_INT 70
11503: PPUSH
11504: CALL_OW 67
// if not IsOk ( usCommander ) then
11508: LD_EXP 28
11512: PPUSH
11513: CALL_OW 302
11517: NOT
11518: IFFALSE 11532
// SetLives ( usCommander , 251 ) ;
11520: LD_EXP 28
11524: PPUSH
11525: LD_INT 251
11527: PPUSH
11528: CALL_OW 234
// Say ( usCommander , DCa-Surrender-1 ) ;
11532: LD_EXP 28
11536: PPUSH
11537: LD_STRING DCa-Surrender-1
11539: PPUSH
11540: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11544: LD_EXP 13
11548: PPUSH
11549: LD_STRING DH-Surrender-2
11551: PPUSH
11552: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11556: LD_EXP 13
11560: PPUSH
11561: CALL_OW 310
11565: PPUSH
11566: CALL_OW 247
11570: PUSH
11571: LD_INT 3
11573: EQUAL
11574: IFFALSE 11592
// begin ComExit ( Heike ) ;
11576: LD_EXP 13
11580: PPUSH
11581: CALL 53228 0 1
// wait ( 3 ) ;
11585: LD_INT 3
11587: PPUSH
11588: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11592: LD_EXP 13
11596: PPUSH
11597: LD_INT 82
11599: PPUSH
11600: LD_INT 133
11602: PPUSH
11603: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11607: LD_EXP 13
11611: PPUSH
11612: LD_EXP 28
11616: PPUSH
11617: CALL_OW 179
// wait ( 0 0$3 ) ;
11621: LD_INT 105
11623: PPUSH
11624: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11628: LD_EXP 13
11632: PPUSH
11633: LD_STRING DH-Surrender-3
11635: PPUSH
11636: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11640: LD_EXP 13
11644: PPUSH
11645: LD_STRING DH-Surrender-4
11647: PPUSH
11648: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11652: LD_INT 81
11654: PPUSH
11655: LD_INT 144
11657: PPUSH
11658: LD_INT 2
11660: PPUSH
11661: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11665: LD_INT 1
11667: PPUSH
11668: LD_INT 2
11670: PPUSH
11671: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 23
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 54
11702: PUSH
11703: EMPTY
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: PPUSH
11711: CALL_OW 69
11715: PUSH
11716: FOR_IN
11717: IFFALSE 11730
// ComExit ( i ) ;
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL 53228 0 1
11728: GO 11716
11730: POP
11731: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 22
11739: PUSH
11740: LD_INT 1
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 25
11749: PUSH
11750: LD_INT 4
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11766: LD_ADDR_VAR 0 2
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_INT 1
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 3
11783: PUSH
11784: LD_INT 50
11786: PUSH
11787: EMPTY
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: ST_TO_ADDR
// if sci and hurts then
11803: LD_VAR 0 3
11807: PUSH
11808: LD_VAR 0 2
11812: AND
11813: IFFALSE 11875
// begin for i := 1 to hurts do
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: DOUBLE
11821: LD_INT 1
11823: DEC
11824: ST_TO_ADDR
11825: LD_VAR 0 2
11829: PUSH
11830: FOR_TO
11831: IFFALSE 11873
// if i <= sci then
11833: LD_VAR 0 1
11837: PUSH
11838: LD_VAR 0 3
11842: LESSEQUAL
11843: IFFALSE 11871
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11845: LD_VAR 0 3
11849: PUSH
11850: LD_VAR 0 1
11854: ARRAY
11855: PPUSH
11856: LD_VAR 0 2
11860: PUSH
11861: LD_VAR 0 1
11865: ARRAY
11866: PPUSH
11867: CALL_OW 188
11871: GO 11830
11873: POP
11874: POP
// end ; if IsOk ( Givi ) then
11875: LD_EXP 14
11879: PPUSH
11880: CALL_OW 302
11884: IFFALSE 11900
// Say ( Givi , DG-Surrender-5 ) else
11886: LD_EXP 14
11890: PPUSH
11891: LD_STRING DG-Surrender-5
11893: PPUSH
11894: CALL_OW 88
11898: GO 11912
// Say ( Heike , DH-Surrender-a-5 ) ;
11900: LD_EXP 13
11904: PPUSH
11905: LD_STRING DH-Surrender-a-5
11907: PPUSH
11908: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11912: LD_EXP 28
11916: PPUSH
11917: LD_STRING DCa-Surrender-6
11919: PPUSH
11920: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11924: LD_EXP 28
11928: PPUSH
11929: LD_STRING DCa-Surrender-7
11931: PPUSH
11932: CALL_OW 88
// if IsOk ( Givi ) then
11936: LD_EXP 14
11940: PPUSH
11941: CALL_OW 302
11945: IFFALSE 11961
// Say ( Givi , DG-Surrender-8 ) else
11947: LD_EXP 14
11951: PPUSH
11952: LD_STRING DG-Surrender-8
11954: PPUSH
11955: CALL_OW 88
11959: GO 11973
// Say ( Heike , DH-Surrender-a-8 ) ;
11961: LD_EXP 13
11965: PPUSH
11966: LD_STRING DH-Surrender-a-8
11968: PPUSH
11969: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11973: LD_EXP 28
11977: PPUSH
11978: LD_STRING DCa-Surrender-9
11980: PPUSH
11981: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11985: LD_EXP 13
11989: PPUSH
11990: LD_STRING DH-Surrender-10
11992: PPUSH
11993: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11997: LD_EXP 28
12001: PPUSH
12002: LD_STRING DCa-Surrender-11
12004: PPUSH
12005: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
12009: LD_EXP 13
12013: PPUSH
12014: LD_STRING DH-Surrender-12
12016: PPUSH
12017: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
12021: LD_EXP 28
12025: PPUSH
12026: LD_STRING DCa-Surrender-13
12028: PPUSH
12029: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
12033: LD_EXP 28
12037: PPUSH
12038: LD_STRING DCa-Surrender-14
12040: PPUSH
12041: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
12045: LD_EXP 28
12049: PPUSH
12050: LD_STRING DCa-Surrender-15
12052: PPUSH
12053: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
12057: LD_EXP 28
12061: PPUSH
12062: LD_STRING DCa-Surrender-16
12064: PPUSH
12065: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
12069: LD_EXP 18
12073: PPUSH
12074: LD_STRING DK-Surrender-17
12076: PPUSH
12077: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
12081: LD_EXP 22
12085: PPUSH
12086: LD_STRING DO-Surrender-18
12088: PPUSH
12089: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
12093: LD_EXP 22
12097: PPUSH
12098: LD_STRING DO-Surrender-19
12100: PPUSH
12101: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
12105: LD_EXP 23
12109: PPUSH
12110: LD_STRING DKs-Surrender-20
12112: PPUSH
12113: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
12117: LD_EXP 23
12121: PPUSH
12122: LD_STRING DKs-Surrender-21
12124: PPUSH
12125: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
12129: LD_EXP 20
12133: PPUSH
12134: LD_STRING DMar-Surrender-22
12136: PPUSH
12137: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
12141: LD_EXP 20
12145: PPUSH
12146: LD_STRING DMar-Surrender-23
12148: PPUSH
12149: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
12153: LD_EXP 19
12157: PPUSH
12158: LD_STRING DS-Surrender-24
12160: PPUSH
12161: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
12165: LD_EXP 24
12169: PPUSH
12170: LD_STRING DA-Surrender-25
12172: PPUSH
12173: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
12177: LD_EXP 16
12181: PPUSH
12182: LD_STRING DI-Surrender-26
12184: PPUSH
12185: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
12189: LD_EXP 17
12193: PPUSH
12194: LD_STRING DKam-Surrender-27
12196: PPUSH
12197: CALL_OW 88
// if IsOk ( Givi ) then
12201: LD_EXP 14
12205: PPUSH
12206: CALL_OW 302
12210: IFFALSE 12250
// begin Say ( Givi , DG-Surrender-28 ) ;
12212: LD_EXP 14
12216: PPUSH
12217: LD_STRING DG-Surrender-28
12219: PPUSH
12220: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
12224: LD_EXP 14
12228: PPUSH
12229: LD_STRING DG-Surrender-29
12231: PPUSH
12232: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
12236: LD_EXP 14
12240: PPUSH
12241: LD_STRING DG-Surrender-30
12243: PPUSH
12244: CALL_OW 88
// end else
12248: GO 12286
// begin Say ( Heike , DH-Surrender-a-28 ) ;
12250: LD_EXP 13
12254: PPUSH
12255: LD_STRING DH-Surrender-a-28
12257: PPUSH
12258: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
12262: LD_EXP 13
12266: PPUSH
12267: LD_STRING DH-Surrender-a-29
12269: PPUSH
12270: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12274: LD_EXP 13
12278: PPUSH
12279: LD_STRING DH-Surrender-a-30
12281: PPUSH
12282: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12286: CALL 14188 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 69
12304: PPUSH
12305: LD_INT 176
12307: PUSH
12308: LD_INT 123
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: PPUSH
12318: CALL 55434 0 2
// if not IsEnvironment ( 190 , 150 ) then
12322: LD_INT 190
12324: PPUSH
12325: LD_INT 150
12327: PPUSH
12328: CALL_OW 351
12332: NOT
12333: IFFALSE 12352
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12335: LD_INT 190
12337: PPUSH
12338: LD_INT 150
12340: PPUSH
12341: LD_INT 2
12343: PPUSH
12344: LD_INT 8
12346: NEG
12347: PPUSH
12348: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12352: LD_INT 193
12354: PPUSH
12355: LD_INT 150
12357: PPUSH
12358: CALL_OW 84
// if IsOk ( Markov ) then
12362: LD_EXP 20
12366: PPUSH
12367: CALL_OW 302
12371: IFFALSE 12387
// Say ( Markov , DMar-Surrender-31 ) else
12373: LD_EXP 20
12377: PPUSH
12378: LD_STRING DMar-Surrender-31
12380: PPUSH
12381: CALL_OW 88
12385: GO 12444
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12387: LD_EXP 25
12391: PPUSH
12392: LD_INT 26
12394: PUSH
12395: LD_INT 1
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PPUSH
12402: CALL_OW 72
12406: PPUSH
12407: LD_STRING DArm-Surrender-a-31
12409: PPUSH
12410: CALL 187 0 2
12414: NOT
12415: IFFALSE 12444
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12417: LD_EXP 25
12421: PPUSH
12422: LD_INT 26
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PPUSH
12432: CALL_OW 72
12436: PPUSH
12437: LD_STRING DArf-Surrender-a-31
12439: PPUSH
12440: CALL 187 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12444: LD_EXP 13
12448: PPUSH
12449: LD_STRING DH-Surrender-32
12451: PPUSH
12452: CALL_OW 88
// InGameOff ;
12456: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12460: LD_STRING M2
12462: PPUSH
12463: CALL_OW 337
// wait ( 0 0$20 ) ;
12467: LD_INT 700
12469: PPUSH
12470: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12474: CALL 14550 0 0
// russianAttack := true ;
12478: LD_ADDR_EXP 8
12482: PUSH
12483: LD_INT 1
12485: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12486: LD_INT 190
12488: PPUSH
12489: LD_INT 150
12491: PPUSH
12492: LD_INT 2
12494: PPUSH
12495: CALL_OW 331
// end ;
12499: PPOPN 3
12501: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12502: LD_EXP 11
12506: PUSH
12507: LD_INT 2
12509: PPUSH
12510: CALL_OW 463
12514: NOT
12515: AND
12516: PUSH
12517: LD_EXP 13
12521: PPUSH
12522: CALL_OW 302
12526: AND
12527: PUSH
12528: LD_INT 22
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 30
12540: PUSH
12541: LD_INT 3
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: AND
12557: PUSH
12558: LD_EXP 20
12562: PPUSH
12563: CALL_OW 302
12567: PUSH
12568: LD_EXP 25
12572: PPUSH
12573: LD_INT 50
12575: PUSH
12576: EMPTY
12577: LIST
12578: PPUSH
12579: CALL_OW 72
12583: OR
12584: AND
12585: IFFALSE 12813
12587: GO 12589
12589: DISABLE
// begin DialogueOn ;
12590: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12594: LD_EXP 13
12598: PPUSH
12599: LD_STRING DH-Heavy-1
12601: PPUSH
12602: CALL_OW 88
// if IsOk ( Markov ) then
12606: LD_EXP 20
12610: PPUSH
12611: CALL_OW 302
12615: IFFALSE 12740
// begin Say ( Markov , DMar-Heavy-2 ) ;
12617: LD_EXP 20
12621: PPUSH
12622: LD_STRING DMar-Heavy-2
12624: PPUSH
12625: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12629: LD_INT 22
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 30
12641: PUSH
12642: LD_INT 3
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: LD_INT 1
12660: ARRAY
12661: PPUSH
12662: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12666: LD_EXP 20
12670: PPUSH
12671: LD_STRING DMar-Heavy-3
12673: PPUSH
12674: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12678: LD_EXP 20
12682: PPUSH
12683: LD_STRING DMar-Heavy-4
12685: PPUSH
12686: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12690: LD_EXP 20
12694: PPUSH
12695: LD_STRING DMar-Heavy-5
12697: PPUSH
12698: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12702: LD_EXP 20
12706: PPUSH
12707: LD_STRING DMar-Heavy-6
12709: PPUSH
12710: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12714: LD_EXP 13
12718: PPUSH
12719: LD_STRING DH-Heavy-7
12721: PPUSH
12722: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12726: LD_EXP 13
12730: PPUSH
12731: LD_STRING DH-Heavy-8
12733: PPUSH
12734: CALL_OW 88
// end else
12738: GO 12797
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12740: LD_EXP 25
12744: PPUSH
12745: LD_INT 26
12747: PUSH
12748: LD_INT 1
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PPUSH
12755: CALL_OW 72
12759: PPUSH
12760: LD_STRING DArm-Heavy-a-2
12762: PPUSH
12763: CALL 187 0 2
12767: NOT
12768: IFFALSE 12797
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12770: LD_EXP 25
12774: PPUSH
12775: LD_INT 26
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PPUSH
12785: CALL_OW 72
12789: PPUSH
12790: LD_STRING DArf-Heavy-a-2
12792: PPUSH
12793: CALL 187 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12797: LD_EXP 13
12801: PPUSH
12802: LD_STRING DH-Heavy-9
12804: PPUSH
12805: CALL_OW 88
// DialogueOff ;
12809: CALL_OW 7
// end ;
12813: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12814: LD_EXP 32
12818: PPUSH
12819: LD_INT 101
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 72
12833: PUSH
12834: LD_EXP 13
12838: PPUSH
12839: CALL_OW 302
12843: AND
12844: IFFALSE 12987
12846: GO 12848
12848: DISABLE
// begin DialogueOn ;
12849: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12853: LD_EXP 32
12857: PPUSH
12858: LD_INT 101
12860: PUSH
12861: LD_INT 2
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 72
12872: PPUSH
12873: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12877: LD_EXP 13
12881: PPUSH
12882: LD_STRING DH-Flank-1
12884: PPUSH
12885: CALL_OW 88
// if IsOk ( Mike ) then
12889: LD_EXP 15
12893: PPUSH
12894: CALL_OW 302
12898: IFFALSE 12914
// Say ( Mike , DM-Flank-2 ) else
12900: LD_EXP 15
12904: PPUSH
12905: LD_STRING DM-Flank-2
12907: PPUSH
12908: CALL_OW 88
12912: GO 12971
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12914: LD_EXP 25
12918: PPUSH
12919: LD_INT 26
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 72
12933: PPUSH
12934: LD_STRING DArm-Flank-a-2
12936: PPUSH
12937: CALL 187 0 2
12941: NOT
12942: IFFALSE 12971
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12944: LD_EXP 25
12948: PPUSH
12949: LD_INT 26
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 72
12963: PPUSH
12964: LD_STRING DArm-Flank-a-2
12966: PPUSH
12967: CALL 187 0 2
// Say ( Heike , DH-Flank-3 ) ;
12971: LD_EXP 13
12975: PPUSH
12976: LD_STRING DH-Flank-3
12978: PPUSH
12979: CALL_OW 88
// DialogueOff ;
12983: CALL_OW 7
// end ;
12987: END
// every 0 0$3 trigger seeRemoteVehicle do
12988: LD_EXP 10
12992: IFFALSE 13216
12994: GO 12996
12996: DISABLE
// begin DialogueOn ;
12997: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
13001: LD_EXP 13
13005: PPUSH
13006: LD_STRING DH-USRC-1
13008: PPUSH
13009: CALL_OW 88
// if IsOk ( Markov ) then
13013: LD_EXP 20
13017: PPUSH
13018: CALL_OW 302
13022: IFFALSE 13038
// Say ( Markov , DMar-USRC-2 ) else
13024: LD_EXP 20
13028: PPUSH
13029: LD_STRING DMar-USRC-2
13031: PPUSH
13032: CALL_OW 88
13036: GO 13095
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
13038: LD_EXP 25
13042: PPUSH
13043: LD_INT 26
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 72
13057: PPUSH
13058: LD_STRING DArm-USRC-a-2
13060: PPUSH
13061: CALL 187 0 2
13065: NOT
13066: IFFALSE 13095
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
13068: LD_EXP 25
13072: PPUSH
13073: LD_INT 26
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 72
13087: PPUSH
13088: LD_STRING DArf-USRC-a-2
13090: PPUSH
13091: CALL 187 0 2
// DialogueOff ;
13095: CALL_OW 7
// wait ( 0 0$10 ) ;
13099: LD_INT 350
13101: PPUSH
13102: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
13106: LD_EXP 13
13110: PPUSH
13111: LD_STRING DH-USRC-3
13113: PPUSH
13114: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13118: LD_INT 35
13120: PPUSH
13121: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13125: LD_INT 2
13127: PPUSH
13128: LD_INT 22
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 30
13140: PUSH
13141: LD_INT 36
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: PUSH
13157: LD_INT 1
13159: ARRAY
13160: PPUSH
13161: CALL_OW 292
13165: IFFALSE 13118
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
13167: LD_INT 22
13169: PUSH
13170: LD_INT 1
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 30
13179: PUSH
13180: LD_INT 36
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: PUSH
13196: LD_INT 1
13198: ARRAY
13199: PPUSH
13200: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
13204: LD_EXP 13
13208: PPUSH
13209: LD_STRING DH-USRCFound-1
13211: PPUSH
13212: CALL_OW 88
// end ;
13216: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
13217: LD_EXP 18
13221: PPUSH
13222: CALL_OW 256
13226: PUSH
13227: LD_INT 3
13229: LESS
13230: IFFALSE 13267
13232: GO 13234
13234: DISABLE
// begin DialogueOn ;
13235: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
13239: LD_EXP 18
13243: PPUSH
13244: LD_STRING DK-Dead-1
13246: PPUSH
13247: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
13251: LD_EXP 18
13255: PPUSH
13256: LD_STRING DK-Dead-2
13258: PPUSH
13259: CALL_OW 91
// DialogueOff ;
13263: CALL_OW 7
// end ;
13267: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_bweapon , ar_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] ] ] ) do
13268: LD_INT 22
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 2
13280: PUSH
13281: LD_INT 35
13283: PUSH
13284: LD_INT 28
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 34
13293: PUSH
13294: LD_INT 28
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: IFFALSE 13327
13316: GO 13318
13318: DISABLE
// hasRockets := true ;
13319: LD_ADDR_EXP 9
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
13327: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13328: LD_EXP 8
13332: PUSH
13333: LD_INT 22
13335: PUSH
13336: LD_INT 3
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: NOT
13348: AND
13349: IFFALSE 13977
13351: GO 13353
13353: DISABLE
// begin DialogueOn ;
13354: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13358: LD_EXP 13
13362: PPUSH
13363: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13367: LD_EXP 13
13371: PPUSH
13372: LD_STRING DH-End-1
13374: PPUSH
13375: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13379: LD_EXP 21
13383: PPUSH
13384: LD_STRING DShar-End-2
13386: PPUSH
13387: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13391: LD_EXP 18
13395: PPUSH
13396: LD_STRING DK-End-3
13398: PPUSH
13399: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13403: LD_EXP 13
13407: PPUSH
13408: LD_STRING DH-End-4
13410: PPUSH
13411: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13415: LD_EXP 21
13419: PPUSH
13420: LD_STRING DShar-End-5
13422: PPUSH
13423: CALL_OW 94
// if IsOk ( Markov ) then
13427: LD_EXP 20
13431: PPUSH
13432: CALL_OW 302
13436: IFFALSE 13450
// Say ( Kaia , DK-End-6 ) ;
13438: LD_EXP 18
13442: PPUSH
13443: LD_STRING DK-End-6
13445: PPUSH
13446: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13450: LD_EXP 18
13454: PPUSH
13455: LD_STRING DK-End-7
13457: PPUSH
13458: CALL_OW 88
// if IsOk ( Kaia ) then
13462: LD_EXP 18
13466: PPUSH
13467: CALL_OW 302
13471: IFFALSE 13509
// begin Say ( Givi , DG-End-8 ) ;
13473: LD_EXP 14
13477: PPUSH
13478: LD_STRING DG-End-8
13480: PPUSH
13481: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13485: LD_EXP 14
13489: PPUSH
13490: LD_STRING DG-End-9
13492: PPUSH
13493: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13497: LD_EXP 13
13501: PPUSH
13502: LD_STRING DH-End-10
13504: PPUSH
13505: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13509: LD_EXP 13
13513: PPUSH
13514: LD_STRING DH-End-11
13516: PPUSH
13517: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13521: LD_INT 7
13523: PPUSH
13524: LD_INT 2
13526: PPUSH
13527: CALL_OW 321
13531: PUSH
13532: LD_INT 2
13534: EQUAL
13535: IFFALSE 13549
// AddMedal ( med1 , 1 ) else
13537: LD_STRING med1
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 101
13547: GO 13560
// AddMedal ( med1 , - 1 ) ;
13549: LD_STRING med1
13551: PPUSH
13552: LD_INT 1
13554: NEG
13555: PPUSH
13556: CALL_OW 101
// if hasRockets then
13560: LD_EXP 9
13564: IFFALSE 13578
// AddMedal ( med2 , 1 ) else
13566: LD_STRING med2
13568: PPUSH
13569: LD_INT 1
13571: PPUSH
13572: CALL_OW 101
13576: GO 13589
// AddMedal ( med2 , - 1 ) ;
13578: LD_STRING med2
13580: PPUSH
13581: LD_INT 1
13583: NEG
13584: PPUSH
13585: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13589: LD_OWVAR 1
13593: PUSH
13594: LD_INT 105000
13596: PUSH
13597: LD_INT 94500
13599: PUSH
13600: LD_INT 84000
13602: PUSH
13603: LD_INT 73500
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_OWVAR 67
13616: ARRAY
13617: LESS
13618: IFFALSE 13632
// AddMedal ( med3 , 1 ) else
13620: LD_STRING med3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 101
13630: GO 13643
// AddMedal ( med3 , - 1 ) ;
13632: LD_STRING med3
13634: PPUSH
13635: LD_INT 1
13637: NEG
13638: PPUSH
13639: CALL_OW 101
// GiveMedals ( MAIN ) ;
13643: LD_STRING MAIN
13645: PPUSH
13646: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13650: LD_INT 22
13652: PUSH
13653: LD_INT 2
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 23
13662: PUSH
13663: LD_INT 2
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 21
13672: PUSH
13673: LD_INT 1
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: PPUSH
13690: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13694: LD_EXP 28
13698: PPUSH
13699: LD_STRING 07_UsCommander
13701: PPUSH
13702: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13706: LD_INT 22
13708: PUSH
13709: LD_INT 1
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 23
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PUSH
13746: LD_EXP 28
13750: DIFF
13751: PPUSH
13752: LD_STRING 07_Americans
13754: PPUSH
13755: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13759: LD_EXP 13
13763: PPUSH
13764: LD_STRING 07_Heike
13766: PPUSH
13767: CALL_OW 38
// if Aviradze then
13771: LD_EXP 24
13775: IFFALSE 13789
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13777: LD_EXP 24
13781: PPUSH
13782: LD_STRING 07_Aviradze
13784: PPUSH
13785: CALL_OW 38
// if Ibrahim then
13789: LD_EXP 16
13793: IFFALSE 13807
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13795: LD_EXP 16
13799: PPUSH
13800: LD_STRING 07_Ibrahim
13802: PPUSH
13803: CALL_OW 38
// if Kamil then
13807: LD_EXP 17
13811: IFFALSE 13825
// SaveCharacters ( Kamil , 07_Kamil ) ;
13813: LD_EXP 17
13817: PPUSH
13818: LD_STRING 07_Kamil
13820: PPUSH
13821: CALL_OW 38
// if Sophia then
13825: LD_EXP 19
13829: IFFALSE 13843
// SaveCharacters ( Sophia , 07_Sophia ) ;
13831: LD_EXP 19
13835: PPUSH
13836: LD_STRING 07_Sophia
13838: PPUSH
13839: CALL_OW 38
// if Kaia then
13843: LD_EXP 18
13847: IFFALSE 13861
// SaveCharacters ( Kaia , 07_Kaia ) ;
13849: LD_EXP 18
13853: PPUSH
13854: LD_STRING 07_Kaia
13856: PPUSH
13857: CALL_OW 38
// if Givi then
13861: LD_EXP 14
13865: IFFALSE 13879
// SaveCharacters ( Givi , 07_Givi ) ;
13867: LD_EXP 14
13871: PPUSH
13872: LD_STRING 07_Givi
13874: PPUSH
13875: CALL_OW 38
// if Mike then
13879: LD_EXP 15
13883: IFFALSE 13897
// SaveCharacters ( Mike , 07_Mike ) ;
13885: LD_EXP 15
13889: PPUSH
13890: LD_STRING 07_Mike
13892: PPUSH
13893: CALL_OW 38
// if Markov then
13897: LD_EXP 20
13901: IFFALSE 13915
// SaveCharacters ( Markov , 07_Markov ) ;
13903: LD_EXP 20
13907: PPUSH
13908: LD_STRING 07_Markov
13910: PPUSH
13911: CALL_OW 38
// if Kurt then
13915: LD_EXP 23
13919: IFFALSE 13933
// SaveCharacters ( Kurt , 07_Kurt ) ;
13921: LD_EXP 23
13925: PPUSH
13926: LD_STRING 07_Kurt
13928: PPUSH
13929: CALL_OW 38
// if Olaf then
13933: LD_EXP 22
13937: IFFALSE 13951
// SaveCharacters ( Olaf , 07_Olaf ) ;
13939: LD_EXP 22
13943: PPUSH
13944: LD_STRING 07_Olaf
13946: PPUSH
13947: CALL_OW 38
// if heikeSecondSquad then
13951: LD_EXP 25
13955: IFFALSE 13969
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13957: LD_EXP 25
13961: PPUSH
13962: LD_STRING 07_others
13964: PPUSH
13965: CALL_OW 38
// YouWin ;
13969: CALL_OW 103
// DialogueOff ;
13973: CALL_OW 7
// end ; end_of_file
13977: END
// every 1 1$20 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 200 , 120 , 80 , 80 ] [ Difficulty ] do
13978: LD_INT 7
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: CALL_OW 287
13988: PUSH
13989: LD_INT 200
13991: PUSH
13992: LD_INT 120
13994: PUSH
13995: LD_INT 80
13997: PUSH
13998: LD_INT 80
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: LD_OWVAR 67
14011: ARRAY
14012: LESS
14013: IFFALSE 14040
14015: GO 14017
14017: DISABLE
// begin enable ;
14018: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
14019: LD_INT 1
14021: PPUSH
14022: LD_INT 5
14024: PPUSH
14025: CALL_OW 12
14029: PPUSH
14030: LD_INT 7
14032: PPUSH
14033: LD_INT 1
14035: PPUSH
14036: CALL_OW 55
// end ;
14040: END
// every 0 0$30 + 0 0$40 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 350 , 320 , 270 , 240 ] [ Difficulty ] do
14041: LD_INT 8
14043: PPUSH
14044: LD_INT 1
14046: PPUSH
14047: CALL_OW 287
14051: PUSH
14052: LD_INT 350
14054: PUSH
14055: LD_INT 320
14057: PUSH
14058: LD_INT 270
14060: PUSH
14061: LD_INT 240
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_OWVAR 67
14074: ARRAY
14075: LESS
14076: IFFALSE 14103
14078: GO 14080
14080: DISABLE
// begin enable ;
14081: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
14082: LD_INT 1
14084: PPUSH
14085: LD_INT 5
14087: PPUSH
14088: CALL_OW 12
14092: PPUSH
14093: LD_INT 8
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 55
// end ;
14103: END
// every 0 0$40 trigger tick < 8 8$10 do
14104: LD_OWVAR 1
14108: PUSH
14109: LD_INT 17150
14111: LESS
14112: IFFALSE 14145
14114: GO 14116
14116: DISABLE
// begin enable ;
14117: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
14118: LD_INT 1
14120: PPUSH
14121: LD_INT 5
14123: PPUSH
14124: CALL_OW 12
14128: PPUSH
14129: LD_INT 130
14131: PPUSH
14132: LD_INT 18
14134: PPUSH
14135: LD_INT 12
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 56
// end ;
14145: END
// every 1 1$00 + 0 0$30 trigger tick < 6 6$10 do
14146: LD_OWVAR 1
14150: PUSH
14151: LD_INT 12950
14153: LESS
14154: IFFALSE 14187
14156: GO 14158
14158: DISABLE
// begin enable ;
14159: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 172 , 97 , 12 , true ) ;
14160: LD_INT 1
14162: PPUSH
14163: LD_INT 5
14165: PPUSH
14166: CALL_OW 12
14170: PPUSH
14171: LD_INT 172
14173: PPUSH
14174: LD_INT 97
14176: PPUSH
14177: LD_INT 12
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: CALL_OW 56
// end ; end_of_file
14187: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
14188: LD_INT 0
14190: PPUSH
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
// uc_side := 3 ;
14195: LD_ADDR_OWVAR 20
14199: PUSH
14200: LD_INT 3
14202: ST_TO_ADDR
// uc_nation := 3 ;
14203: LD_ADDR_OWVAR 21
14207: PUSH
14208: LD_INT 3
14210: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
14211: LD_ADDR_VAR 0 3
14215: PUSH
14216: LD_INT 184
14218: PUSH
14219: LD_INT 144
14221: PUSH
14222: LD_INT 5
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 191
14232: PUSH
14233: LD_INT 147
14235: PUSH
14236: LD_INT 5
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 202
14246: PUSH
14247: LD_INT 151
14249: PUSH
14250: LD_INT 4
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 210
14260: PUSH
14261: LD_INT 152
14263: PUSH
14264: LD_INT 4
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: ST_TO_ADDR
// for i := 1 to 4 do
14278: LD_ADDR_VAR 0 2
14282: PUSH
14283: DOUBLE
14284: LD_INT 1
14286: DEC
14287: ST_TO_ADDR
14288: LD_INT 4
14290: PUSH
14291: FOR_TO
14292: IFFALSE 14461
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
14294: LD_INT 24
14296: PPUSH
14297: LD_INT 1
14299: PPUSH
14300: LD_INT 1
14302: PPUSH
14303: LD_INT 43
14305: PUSH
14306: LD_INT 44
14308: PUSH
14309: LD_INT 46
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PUSH
14317: LD_VAR 0 2
14321: PUSH
14322: LD_INT 3
14324: MOD
14325: PUSH
14326: LD_INT 1
14328: PLUS
14329: ARRAY
14330: PPUSH
14331: LD_INT 40
14333: PPUSH
14334: CALL 20377 0 5
// veh := CreateVehicle ;
14338: LD_ADDR_VAR 0 5
14342: PUSH
14343: CALL_OW 45
14347: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
14348: LD_VAR 0 5
14352: PPUSH
14353: LD_VAR 0 3
14357: PUSH
14358: LD_VAR 0 2
14362: ARRAY
14363: PUSH
14364: LD_INT 3
14366: ARRAY
14367: PPUSH
14368: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14372: LD_VAR 0 5
14376: PPUSH
14377: LD_VAR 0 3
14381: PUSH
14382: LD_VAR 0 2
14386: ARRAY
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PPUSH
14392: LD_VAR 0 3
14396: PUSH
14397: LD_VAR 0 2
14401: ARRAY
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: PPUSH
14407: LD_INT 0
14409: PPUSH
14410: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14414: LD_INT 0
14416: PPUSH
14417: LD_INT 6
14419: PUSH
14420: LD_INT 7
14422: PUSH
14423: LD_INT 8
14425: PUSH
14426: LD_INT 8
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_OWVAR 67
14439: ARRAY
14440: PPUSH
14441: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14445: CALL_OW 44
14449: PPUSH
14450: LD_VAR 0 5
14454: PPUSH
14455: CALL_OW 52
// end ;
14459: GO 14291
14461: POP
14462: POP
// for i := 1 to 4 do
14463: LD_ADDR_VAR 0 2
14467: PUSH
14468: DOUBLE
14469: LD_INT 1
14471: DEC
14472: ST_TO_ADDR
14473: LD_INT 4
14475: PUSH
14476: FOR_TO
14477: IFFALSE 14543
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14479: LD_INT 0
14481: PPUSH
14482: LD_INT 6
14484: PUSH
14485: LD_INT 7
14487: PUSH
14488: LD_INT 8
14490: PUSH
14491: LD_INT 8
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: LD_OWVAR 67
14504: ARRAY
14505: PPUSH
14506: CALL_OW 381
// un := CreateHuman ;
14510: LD_ADDR_VAR 0 4
14514: PUSH
14515: CALL_OW 44
14519: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14520: LD_VAR 0 4
14524: PPUSH
14525: LD_INT 185
14527: PPUSH
14528: LD_INT 145
14530: PPUSH
14531: LD_INT 6
14533: PPUSH
14534: LD_INT 0
14536: PPUSH
14537: CALL_OW 50
// end ;
14541: GO 14476
14543: POP
14544: POP
// end ;
14545: LD_VAR 0 1
14549: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14550: LD_INT 0
14552: PPUSH
14553: PPUSH
14554: PPUSH
// uc_side := 3 ;
14555: LD_ADDR_OWVAR 20
14559: PUSH
14560: LD_INT 3
14562: ST_TO_ADDR
// if Difficulty > 1 then
14563: LD_OWVAR 67
14567: PUSH
14568: LD_INT 1
14570: GREATER
14571: IFFALSE 14733
// begin uc_nation := 0 ;
14573: LD_ADDR_OWVAR 21
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_INT 4
14593: PUSH
14594: LD_INT 5
14596: PUSH
14597: LD_INT 6
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_OWVAR 67
14609: PUSH
14610: LD_INT 1
14612: PLUS
14613: ARRAY
14614: PUSH
14615: FOR_TO
14616: IFFALSE 14731
// begin hc_class := class_apeman_soldier ;
14618: LD_ADDR_OWVAR 28
14622: PUSH
14623: LD_INT 15
14625: ST_TO_ADDR
// hc_gallery :=  ;
14626: LD_ADDR_OWVAR 33
14630: PUSH
14631: LD_STRING 
14633: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14634: LD_ADDR_OWVAR 26
14638: PUSH
14639: LD_STRING Treci
14641: PUSH
14642: LD_STRING Ivan
14644: PUSH
14645: LD_STRING Yaromir
14647: PUSH
14648: LD_STRING Nadzieia
14650: PUSH
14651: LD_STRING Krasna
14653: PUSH
14654: LD_STRING Piaty
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 1
14667: PPUSH
14668: LD_INT 6
14670: PPUSH
14671: CALL_OW 12
14675: ARRAY
14676: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14677: LD_ADDR_OWVAR 31
14681: PUSH
14682: LD_INT 5
14684: PUSH
14685: LD_INT 0
14687: PUSH
14688: LD_INT 0
14690: PUSH
14691: LD_INT 0
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: ST_TO_ADDR
// hc_sex := sex_male ;
14700: LD_ADDR_OWVAR 27
14704: PUSH
14705: LD_INT 1
14707: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14708: CALL_OW 44
14712: PPUSH
14713: LD_INT 178
14715: PPUSH
14716: LD_INT 148
14718: PPUSH
14719: LD_INT 6
14721: PPUSH
14722: LD_INT 0
14724: PPUSH
14725: CALL_OW 50
// end ;
14729: GO 14615
14731: POP
14732: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14733: LD_ADDR_VAR 0 2
14737: PUSH
14738: DOUBLE
14739: LD_INT 1
14741: DEC
14742: ST_TO_ADDR
14743: LD_INT 4
14745: PUSH
14746: LD_INT 6
14748: PUSH
14749: LD_INT 7
14751: PUSH
14752: LD_INT 9
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: LD_OWVAR 67
14765: ARRAY
14766: PUSH
14767: FOR_TO
14768: IFFALSE 14935
// begin uc_nation := 3 ;
14770: LD_ADDR_OWVAR 21
14774: PUSH
14775: LD_INT 3
14777: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14778: LD_INT 22
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_INT 1
14786: PPUSH
14787: LD_INT 45
14789: PUSH
14790: LD_INT 43
14792: PUSH
14793: LD_INT 44
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: LD_INT 3
14808: MOD
14809: PUSH
14810: LD_INT 1
14812: PLUS
14813: ARRAY
14814: PPUSH
14815: LD_INT 44
14817: PPUSH
14818: CALL 20377 0 5
// veh := CreateVehicle ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: CALL_OW 45
14831: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14832: LD_VAR 0 3
14836: PPUSH
14837: LD_INT 4
14839: PPUSH
14840: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_INT 1
14851: PPUSH
14852: LD_INT 0
14854: PPUSH
14855: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14859: LD_INT 0
14861: PPUSH
14862: LD_INT 6
14864: PUSH
14865: LD_INT 7
14867: PUSH
14868: LD_INT 8
14870: PUSH
14871: LD_INT 8
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: PUSH
14880: LD_OWVAR 67
14884: ARRAY
14885: PPUSH
14886: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14890: CALL_OW 44
14894: PPUSH
14895: LD_VAR 0 3
14899: PPUSH
14900: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 178
14911: PUSH
14912: LD_INT 137
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: PPUSH
14922: CALL 55434 0 2
// wait ( 0 0$2 ) ;
14926: LD_INT 70
14928: PPUSH
14929: CALL_OW 67
// end ;
14933: GO 14767
14935: POP
14936: POP
// end ;
14937: LD_VAR 0 1
14941: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14942: LD_INT 22
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 32
14954: PUSH
14955: LD_INT 1
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PPUSH
14966: CALL_OW 69
14970: IFFALSE 15058
14972: GO 14974
14974: DISABLE
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
// begin enable ;
14979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14980: LD_ADDR_VAR 0 2
14984: PUSH
14985: LD_INT 22
14987: PUSH
14988: LD_INT 3
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 32
14997: PUSH
14998: LD_INT 1
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: ST_TO_ADDR
// for i in tmp do
15014: LD_ADDR_VAR 0 1
15018: PUSH
15019: LD_VAR 0 2
15023: PUSH
15024: FOR_IN
15025: IFFALSE 15056
// if GetFuel ( i ) < 3 then
15027: LD_VAR 0 1
15031: PPUSH
15032: CALL_OW 261
15036: PUSH
15037: LD_INT 3
15039: LESS
15040: IFFALSE 15054
// SetFuel ( i , 3 ) ;
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 3
15049: PPUSH
15050: CALL_OW 240
15054: GO 15024
15056: POP
15057: POP
// end ;
15058: PPOPN 2
15060: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
15061: LD_EXP 8
15065: PUSH
15066: LD_INT 22
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: AND
15095: IFFALSE 15359
15097: GO 15099
15099: DISABLE
15100: LD_INT 0
15102: PPUSH
15103: PPUSH
15104: PPUSH
// begin enable ;
15105: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_INT 22
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 25
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: LD_INT 55
15136: PUSH
15137: EMPTY
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: PPUSH
15149: CALL_OW 69
15153: ST_TO_ADDR
// if mech then
15154: LD_VAR 0 2
15158: IFFALSE 15228
// for i in mech do
15160: LD_ADDR_VAR 0 1
15164: PUSH
15165: LD_VAR 0 2
15169: PUSH
15170: FOR_IN
15171: IFFALSE 15226
// begin if IsInArea ( i , escapeArea ) then
15173: LD_VAR 0 1
15177: PPUSH
15178: LD_INT 13
15180: PPUSH
15181: CALL_OW 308
15185: IFFALSE 15198
// RemoveUnit ( i ) else
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 64
15196: GO 15224
// if IsOk ( i ) then
15198: LD_VAR 0 1
15202: PPUSH
15203: CALL_OW 302
15207: IFFALSE 15224
// ComMoveXY ( i , 196 , 155 ) ;
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_INT 196
15216: PPUSH
15217: LD_INT 155
15219: PPUSH
15220: CALL_OW 111
// end ;
15224: GO 15170
15226: POP
15227: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: LD_INT 22
15235: PUSH
15236: LD_INT 3
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 2
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 15
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 21
15268: PUSH
15269: LD_INT 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 50
15284: PUSH
15285: EMPTY
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: ST_TO_ADDR
// if tmp then
15298: LD_VAR 0 3
15302: IFFALSE 15359
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
15304: LD_VAR 0 3
15308: PPUSH
15309: LD_INT 171
15311: PUSH
15312: LD_INT 106
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 145
15321: PUSH
15322: LD_INT 69
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 132
15331: PUSH
15332: LD_INT 38
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 126
15341: PUSH
15342: LD_INT 15
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL 55434 0 2
// end ; end_of_file
15359: PPOPN 3
15361: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15362: LD_INT 0
15364: PPUSH
15365: PPUSH
// if exist_mode then
15366: LD_VAR 0 2
15370: IFFALSE 15395
// unit := CreateCharacter ( prefix & ident ) else
15372: LD_ADDR_VAR 0 5
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_VAR 0 1
15386: STR
15387: PPUSH
15388: CALL_OW 34
15392: ST_TO_ADDR
15393: GO 15410
// unit := NewCharacter ( ident ) ;
15395: LD_ADDR_VAR 0 5
15399: PUSH
15400: LD_VAR 0 1
15404: PPUSH
15405: CALL_OW 25
15409: ST_TO_ADDR
// result := unit ;
15410: LD_ADDR_VAR 0 4
15414: PUSH
15415: LD_VAR 0 5
15419: ST_TO_ADDR
// end ;
15420: LD_VAR 0 4
15424: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15425: LD_INT 0
15427: PPUSH
15428: PPUSH
// if not side or not nation then
15429: LD_VAR 0 1
15433: NOT
15434: PUSH
15435: LD_VAR 0 2
15439: NOT
15440: OR
15441: IFFALSE 15445
// exit ;
15443: GO 16213
// case nation of nation_american :
15445: LD_VAR 0 2
15449: PUSH
15450: LD_INT 1
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15672
15458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15459: LD_ADDR_VAR 0 4
15463: PUSH
15464: LD_INT 35
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 46
15472: PUSH
15473: LD_INT 47
15475: PUSH
15476: LD_INT 82
15478: PUSH
15479: LD_INT 83
15481: PUSH
15482: LD_INT 84
15484: PUSH
15485: LD_INT 85
15487: PUSH
15488: LD_INT 86
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: LD_INT 2
15496: PUSH
15497: LD_INT 6
15499: PUSH
15500: LD_INT 15
15502: PUSH
15503: LD_INT 16
15505: PUSH
15506: LD_INT 7
15508: PUSH
15509: LD_INT 12
15511: PUSH
15512: LD_INT 13
15514: PUSH
15515: LD_INT 10
15517: PUSH
15518: LD_INT 14
15520: PUSH
15521: LD_INT 20
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 22
15529: PUSH
15530: LD_INT 25
15532: PUSH
15533: LD_INT 32
15535: PUSH
15536: LD_INT 27
15538: PUSH
15539: LD_INT 36
15541: PUSH
15542: LD_INT 69
15544: PUSH
15545: LD_INT 39
15547: PUSH
15548: LD_INT 34
15550: PUSH
15551: LD_INT 40
15553: PUSH
15554: LD_INT 48
15556: PUSH
15557: LD_INT 49
15559: PUSH
15560: LD_INT 50
15562: PUSH
15563: LD_INT 51
15565: PUSH
15566: LD_INT 52
15568: PUSH
15569: LD_INT 53
15571: PUSH
15572: LD_INT 54
15574: PUSH
15575: LD_INT 55
15577: PUSH
15578: LD_INT 56
15580: PUSH
15581: LD_INT 57
15583: PUSH
15584: LD_INT 58
15586: PUSH
15587: LD_INT 59
15589: PUSH
15590: LD_INT 60
15592: PUSH
15593: LD_INT 61
15595: PUSH
15596: LD_INT 62
15598: PUSH
15599: LD_INT 80
15601: PUSH
15602: LD_INT 82
15604: PUSH
15605: LD_INT 83
15607: PUSH
15608: LD_INT 84
15610: PUSH
15611: LD_INT 85
15613: PUSH
15614: LD_INT 86
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: ST_TO_ADDR
15670: GO 16137
15672: LD_INT 2
15674: DOUBLE
15675: EQUAL
15676: IFTRUE 15680
15678: GO 15906
15680: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15681: LD_ADDR_VAR 0 4
15685: PUSH
15686: LD_INT 35
15688: PUSH
15689: LD_INT 45
15691: PUSH
15692: LD_INT 46
15694: PUSH
15695: LD_INT 47
15697: PUSH
15698: LD_INT 82
15700: PUSH
15701: LD_INT 83
15703: PUSH
15704: LD_INT 84
15706: PUSH
15707: LD_INT 85
15709: PUSH
15710: LD_INT 87
15712: PUSH
15713: LD_INT 70
15715: PUSH
15716: LD_INT 1
15718: PUSH
15719: LD_INT 11
15721: PUSH
15722: LD_INT 3
15724: PUSH
15725: LD_INT 4
15727: PUSH
15728: LD_INT 5
15730: PUSH
15731: LD_INT 6
15733: PUSH
15734: LD_INT 15
15736: PUSH
15737: LD_INT 18
15739: PUSH
15740: LD_INT 7
15742: PUSH
15743: LD_INT 17
15745: PUSH
15746: LD_INT 8
15748: PUSH
15749: LD_INT 20
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 22
15757: PUSH
15758: LD_INT 72
15760: PUSH
15761: LD_INT 26
15763: PUSH
15764: LD_INT 69
15766: PUSH
15767: LD_INT 39
15769: PUSH
15770: LD_INT 40
15772: PUSH
15773: LD_INT 41
15775: PUSH
15776: LD_INT 42
15778: PUSH
15779: LD_INT 43
15781: PUSH
15782: LD_INT 48
15784: PUSH
15785: LD_INT 49
15787: PUSH
15788: LD_INT 50
15790: PUSH
15791: LD_INT 51
15793: PUSH
15794: LD_INT 52
15796: PUSH
15797: LD_INT 53
15799: PUSH
15800: LD_INT 54
15802: PUSH
15803: LD_INT 55
15805: PUSH
15806: LD_INT 56
15808: PUSH
15809: LD_INT 60
15811: PUSH
15812: LD_INT 61
15814: PUSH
15815: LD_INT 62
15817: PUSH
15818: LD_INT 66
15820: PUSH
15821: LD_INT 67
15823: PUSH
15824: LD_INT 68
15826: PUSH
15827: LD_INT 81
15829: PUSH
15830: LD_INT 82
15832: PUSH
15833: LD_INT 83
15835: PUSH
15836: LD_INT 84
15838: PUSH
15839: LD_INT 85
15841: PUSH
15842: LD_INT 87
15844: PUSH
15845: LD_INT 88
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: ST_TO_ADDR
15904: GO 16137
15906: LD_INT 3
15908: DOUBLE
15909: EQUAL
15910: IFTRUE 15914
15912: GO 16136
15914: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15915: LD_ADDR_VAR 0 4
15919: PUSH
15920: LD_INT 46
15922: PUSH
15923: LD_INT 47
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: LD_INT 2
15931: PUSH
15932: LD_INT 82
15934: PUSH
15935: LD_INT 83
15937: PUSH
15938: LD_INT 84
15940: PUSH
15941: LD_INT 85
15943: PUSH
15944: LD_INT 86
15946: PUSH
15947: LD_INT 11
15949: PUSH
15950: LD_INT 9
15952: PUSH
15953: LD_INT 20
15955: PUSH
15956: LD_INT 19
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 24
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 25
15970: PUSH
15971: LD_INT 28
15973: PUSH
15974: LD_INT 29
15976: PUSH
15977: LD_INT 30
15979: PUSH
15980: LD_INT 31
15982: PUSH
15983: LD_INT 37
15985: PUSH
15986: LD_INT 38
15988: PUSH
15989: LD_INT 32
15991: PUSH
15992: LD_INT 27
15994: PUSH
15995: LD_INT 33
15997: PUSH
15998: LD_INT 69
16000: PUSH
16001: LD_INT 39
16003: PUSH
16004: LD_INT 34
16006: PUSH
16007: LD_INT 40
16009: PUSH
16010: LD_INT 71
16012: PUSH
16013: LD_INT 23
16015: PUSH
16016: LD_INT 44
16018: PUSH
16019: LD_INT 48
16021: PUSH
16022: LD_INT 49
16024: PUSH
16025: LD_INT 50
16027: PUSH
16028: LD_INT 51
16030: PUSH
16031: LD_INT 52
16033: PUSH
16034: LD_INT 53
16036: PUSH
16037: LD_INT 54
16039: PUSH
16040: LD_INT 55
16042: PUSH
16043: LD_INT 56
16045: PUSH
16046: LD_INT 57
16048: PUSH
16049: LD_INT 58
16051: PUSH
16052: LD_INT 59
16054: PUSH
16055: LD_INT 63
16057: PUSH
16058: LD_INT 64
16060: PUSH
16061: LD_INT 65
16063: PUSH
16064: LD_INT 82
16066: PUSH
16067: LD_INT 83
16069: PUSH
16070: LD_INT 84
16072: PUSH
16073: LD_INT 85
16075: PUSH
16076: LD_INT 86
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: ST_TO_ADDR
16134: GO 16137
16136: POP
// if state > - 1 and state < 3 then
16137: LD_VAR 0 3
16141: PUSH
16142: LD_INT 1
16144: NEG
16145: GREATER
16146: PUSH
16147: LD_VAR 0 3
16151: PUSH
16152: LD_INT 3
16154: LESS
16155: AND
16156: IFFALSE 16213
// for i in result do
16158: LD_ADDR_VAR 0 5
16162: PUSH
16163: LD_VAR 0 4
16167: PUSH
16168: FOR_IN
16169: IFFALSE 16211
// if GetTech ( i , side ) <> state then
16171: LD_VAR 0 5
16175: PPUSH
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 321
16185: PUSH
16186: LD_VAR 0 3
16190: NONEQUAL
16191: IFFALSE 16209
// result := result diff i ;
16193: LD_ADDR_VAR 0 4
16197: PUSH
16198: LD_VAR 0 4
16202: PUSH
16203: LD_VAR 0 5
16207: DIFF
16208: ST_TO_ADDR
16209: GO 16168
16211: POP
16212: POP
// end ;
16213: LD_VAR 0 4
16217: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16218: LD_INT 0
16220: PPUSH
16221: PPUSH
16222: PPUSH
// result := true ;
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16231: LD_ADDR_VAR 0 5
16235: PUSH
16236: LD_VAR 0 2
16240: PPUSH
16241: CALL_OW 480
16245: ST_TO_ADDR
// if not tmp then
16246: LD_VAR 0 5
16250: NOT
16251: IFFALSE 16255
// exit ;
16253: GO 16304
// for i in tmp do
16255: LD_ADDR_VAR 0 4
16259: PUSH
16260: LD_VAR 0 5
16264: PUSH
16265: FOR_IN
16266: IFFALSE 16302
// if GetTech ( i , side ) <> state_researched then
16268: LD_VAR 0 4
16272: PPUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 321
16282: PUSH
16283: LD_INT 2
16285: NONEQUAL
16286: IFFALSE 16300
// begin result := false ;
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// exit ;
16296: POP
16297: POP
16298: GO 16304
// end ;
16300: GO 16265
16302: POP
16303: POP
// end ;
16304: LD_VAR 0 3
16308: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16309: LD_INT 0
16311: PPUSH
16312: PPUSH
16313: PPUSH
16314: PPUSH
16315: PPUSH
16316: PPUSH
16317: PPUSH
16318: PPUSH
16319: PPUSH
16320: PPUSH
16321: PPUSH
16322: PPUSH
16323: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16324: LD_VAR 0 1
16328: NOT
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 257
16339: PUSH
16340: LD_INT 9
16342: NONEQUAL
16343: OR
16344: IFFALSE 16348
// exit ;
16346: GO 16921
// side := GetSide ( unit ) ;
16348: LD_ADDR_VAR 0 9
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 255
16362: ST_TO_ADDR
// tech_space := tech_spacanom ;
16363: LD_ADDR_VAR 0 12
16367: PUSH
16368: LD_INT 29
16370: ST_TO_ADDR
// tech_time := tech_taurad ;
16371: LD_ADDR_VAR 0 13
16375: PUSH
16376: LD_INT 28
16378: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16379: LD_ADDR_VAR 0 11
16383: PUSH
16384: LD_VAR 0 1
16388: PPUSH
16389: CALL_OW 310
16393: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16394: LD_VAR 0 11
16398: PPUSH
16399: CALL_OW 247
16403: PUSH
16404: LD_INT 2
16406: EQUAL
16407: IFFALSE 16411
// exit ;
16409: GO 16921
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16411: LD_ADDR_VAR 0 8
16415: PUSH
16416: LD_INT 81
16418: PUSH
16419: LD_VAR 0 9
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 3
16430: PUSH
16431: LD_INT 21
16433: PUSH
16434: LD_INT 3
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PPUSH
16449: CALL_OW 69
16453: ST_TO_ADDR
// if not tmp then
16454: LD_VAR 0 8
16458: NOT
16459: IFFALSE 16463
// exit ;
16461: GO 16921
// if in_unit then
16463: LD_VAR 0 11
16467: IFFALSE 16491
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16469: LD_ADDR_VAR 0 10
16473: PUSH
16474: LD_VAR 0 8
16478: PPUSH
16479: LD_VAR 0 11
16483: PPUSH
16484: CALL_OW 74
16488: ST_TO_ADDR
16489: GO 16511
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16491: LD_ADDR_VAR 0 10
16495: PUSH
16496: LD_VAR 0 8
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 74
16510: ST_TO_ADDR
// if not enemy then
16511: LD_VAR 0 10
16515: NOT
16516: IFFALSE 16520
// exit ;
16518: GO 16921
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16520: LD_VAR 0 11
16524: PUSH
16525: LD_VAR 0 11
16529: PPUSH
16530: LD_VAR 0 10
16534: PPUSH
16535: CALL_OW 296
16539: PUSH
16540: LD_INT 13
16542: GREATER
16543: AND
16544: PUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: LD_VAR 0 10
16554: PPUSH
16555: CALL_OW 296
16559: PUSH
16560: LD_INT 12
16562: GREATER
16563: OR
16564: IFFALSE 16568
// exit ;
16566: GO 16921
// missile := [ 1 ] ;
16568: LD_ADDR_VAR 0 14
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16579: LD_VAR 0 9
16583: PPUSH
16584: LD_VAR 0 12
16588: PPUSH
16589: CALL_OW 325
16593: IFFALSE 16622
// missile := Replace ( missile , missile + 1 , 2 ) ;
16595: LD_ADDR_VAR 0 14
16599: PUSH
16600: LD_VAR 0 14
16604: PPUSH
16605: LD_VAR 0 14
16609: PUSH
16610: LD_INT 1
16612: PLUS
16613: PPUSH
16614: LD_INT 2
16616: PPUSH
16617: CALL_OW 1
16621: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16622: LD_VAR 0 9
16626: PPUSH
16627: LD_VAR 0 13
16631: PPUSH
16632: CALL_OW 325
16636: PUSH
16637: LD_VAR 0 10
16641: PPUSH
16642: CALL_OW 255
16646: PPUSH
16647: LD_VAR 0 13
16651: PPUSH
16652: CALL_OW 325
16656: NOT
16657: AND
16658: IFFALSE 16687
// missile := Replace ( missile , missile + 1 , 3 ) ;
16660: LD_ADDR_VAR 0 14
16664: PUSH
16665: LD_VAR 0 14
16669: PPUSH
16670: LD_VAR 0 14
16674: PUSH
16675: LD_INT 1
16677: PLUS
16678: PPUSH
16679: LD_INT 3
16681: PPUSH
16682: CALL_OW 1
16686: ST_TO_ADDR
// if missile < 2 then
16687: LD_VAR 0 14
16691: PUSH
16692: LD_INT 2
16694: LESS
16695: IFFALSE 16699
// exit ;
16697: GO 16921
// x := GetX ( enemy ) ;
16699: LD_ADDR_VAR 0 4
16703: PUSH
16704: LD_VAR 0 10
16708: PPUSH
16709: CALL_OW 250
16713: ST_TO_ADDR
// y := GetY ( enemy ) ;
16714: LD_ADDR_VAR 0 5
16718: PUSH
16719: LD_VAR 0 10
16723: PPUSH
16724: CALL_OW 251
16728: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16729: LD_ADDR_VAR 0 6
16733: PUSH
16734: LD_VAR 0 4
16738: PUSH
16739: LD_INT 1
16741: NEG
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 12
16750: PLUS
16751: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16752: LD_ADDR_VAR 0 7
16756: PUSH
16757: LD_VAR 0 5
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PPUSH
16766: LD_INT 1
16768: PPUSH
16769: CALL_OW 12
16773: PLUS
16774: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16775: LD_VAR 0 6
16779: PPUSH
16780: LD_VAR 0 7
16784: PPUSH
16785: CALL_OW 488
16789: NOT
16790: IFFALSE 16812
// begin _x := x ;
16792: LD_ADDR_VAR 0 6
16796: PUSH
16797: LD_VAR 0 4
16801: ST_TO_ADDR
// _y := y ;
16802: LD_ADDR_VAR 0 7
16806: PUSH
16807: LD_VAR 0 5
16811: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_INT 1
16819: PPUSH
16820: LD_VAR 0 14
16824: PPUSH
16825: CALL_OW 12
16829: ST_TO_ADDR
// case i of 1 :
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 1
16837: DOUBLE
16838: EQUAL
16839: IFTRUE 16843
16841: GO 16860
16843: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16844: LD_VAR 0 1
16848: PPUSH
16849: LD_VAR 0 10
16853: PPUSH
16854: CALL_OW 115
16858: GO 16921
16860: LD_INT 2
16862: DOUBLE
16863: EQUAL
16864: IFTRUE 16868
16866: GO 16890
16868: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16869: LD_VAR 0 1
16873: PPUSH
16874: LD_VAR 0 6
16878: PPUSH
16879: LD_VAR 0 7
16883: PPUSH
16884: CALL_OW 153
16888: GO 16921
16890: LD_INT 3
16892: DOUBLE
16893: EQUAL
16894: IFTRUE 16898
16896: GO 16920
16898: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_VAR 0 6
16908: PPUSH
16909: LD_VAR 0 7
16913: PPUSH
16914: CALL_OW 154
16918: GO 16921
16920: POP
// end ;
16921: LD_VAR 0 2
16925: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16926: LD_INT 0
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
16932: PPUSH
16933: PPUSH
// if not unit or not building then
16934: LD_VAR 0 1
16938: NOT
16939: PUSH
16940: LD_VAR 0 2
16944: NOT
16945: OR
16946: IFFALSE 16950
// exit ;
16948: GO 17108
// x := GetX ( building ) ;
16950: LD_ADDR_VAR 0 5
16954: PUSH
16955: LD_VAR 0 2
16959: PPUSH
16960: CALL_OW 250
16964: ST_TO_ADDR
// y := GetY ( building ) ;
16965: LD_ADDR_VAR 0 6
16969: PUSH
16970: LD_VAR 0 2
16974: PPUSH
16975: CALL_OW 251
16979: ST_TO_ADDR
// for i = 0 to 5 do
16980: LD_ADDR_VAR 0 4
16984: PUSH
16985: DOUBLE
16986: LD_INT 0
16988: DEC
16989: ST_TO_ADDR
16990: LD_INT 5
16992: PUSH
16993: FOR_TO
16994: IFFALSE 17106
// begin _x := ShiftX ( x , i , 3 ) ;
16996: LD_ADDR_VAR 0 7
17000: PUSH
17001: LD_VAR 0 5
17005: PPUSH
17006: LD_VAR 0 4
17010: PPUSH
17011: LD_INT 3
17013: PPUSH
17014: CALL_OW 272
17018: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17019: LD_ADDR_VAR 0 8
17023: PUSH
17024: LD_VAR 0 6
17028: PPUSH
17029: LD_VAR 0 4
17033: PPUSH
17034: LD_INT 3
17036: PPUSH
17037: CALL_OW 273
17041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17042: LD_VAR 0 7
17046: PPUSH
17047: LD_VAR 0 8
17051: PPUSH
17052: CALL_OW 488
17056: NOT
17057: IFFALSE 17061
// continue ;
17059: GO 16993
// if HexInfo ( _x , _y ) = 0 then
17061: LD_VAR 0 7
17065: PPUSH
17066: LD_VAR 0 8
17070: PPUSH
17071: CALL_OW 428
17075: PUSH
17076: LD_INT 0
17078: EQUAL
17079: IFFALSE 17104
// begin ComMoveXY ( unit , _x , _y ) ;
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_VAR 0 7
17090: PPUSH
17091: LD_VAR 0 8
17095: PPUSH
17096: CALL_OW 111
// exit ;
17100: POP
17101: POP
17102: GO 17108
// end ; end ;
17104: GO 16993
17106: POP
17107: POP
// end ;
17108: LD_VAR 0 3
17112: RET
// export function ScanBase ( side , base_area ) ; begin
17113: LD_INT 0
17115: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17116: LD_ADDR_VAR 0 3
17120: PUSH
17121: LD_VAR 0 2
17125: PPUSH
17126: LD_INT 81
17128: PUSH
17129: LD_VAR 0 1
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 70
17142: ST_TO_ADDR
// end ;
17143: LD_VAR 0 3
17147: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17148: LD_INT 0
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
// result := false ;
17154: LD_ADDR_VAR 0 2
17158: PUSH
17159: LD_INT 0
17161: ST_TO_ADDR
// side := GetSide ( unit ) ;
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 255
17176: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17177: LD_ADDR_VAR 0 4
17181: PUSH
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL_OW 248
17191: ST_TO_ADDR
// case nat of 1 :
17192: LD_VAR 0 4
17196: PUSH
17197: LD_INT 1
17199: DOUBLE
17200: EQUAL
17201: IFTRUE 17205
17203: GO 17216
17205: POP
// tech := tech_lassight ; 2 :
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_INT 12
17213: ST_TO_ADDR
17214: GO 17255
17216: LD_INT 2
17218: DOUBLE
17219: EQUAL
17220: IFTRUE 17224
17222: GO 17235
17224: POP
// tech := tech_mortar ; 3 :
17225: LD_ADDR_VAR 0 5
17229: PUSH
17230: LD_INT 41
17232: ST_TO_ADDR
17233: GO 17255
17235: LD_INT 3
17237: DOUBLE
17238: EQUAL
17239: IFTRUE 17243
17241: GO 17254
17243: POP
// tech := tech_bazooka ; end ;
17244: LD_ADDR_VAR 0 5
17248: PUSH
17249: LD_INT 44
17251: ST_TO_ADDR
17252: GO 17255
17254: POP
// if Researched ( side , tech ) then
17255: LD_VAR 0 3
17259: PPUSH
17260: LD_VAR 0 5
17264: PPUSH
17265: CALL_OW 325
17269: IFFALSE 17296
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_INT 5
17278: PUSH
17279: LD_INT 8
17281: PUSH
17282: LD_INT 9
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: PUSH
17290: LD_VAR 0 4
17294: ARRAY
17295: ST_TO_ADDR
// end ;
17296: LD_VAR 0 2
17300: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17301: LD_INT 0
17303: PPUSH
17304: PPUSH
17305: PPUSH
// if not mines then
17306: LD_VAR 0 2
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17459
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17315: LD_ADDR_VAR 0 5
17319: PUSH
17320: LD_INT 81
17322: PUSH
17323: LD_VAR 0 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 21
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PPUSH
17353: CALL_OW 69
17357: ST_TO_ADDR
// for i in mines do
17358: LD_ADDR_VAR 0 4
17362: PUSH
17363: LD_VAR 0 2
17367: PUSH
17368: FOR_IN
17369: IFFALSE 17457
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17371: LD_VAR 0 4
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PPUSH
17380: LD_VAR 0 4
17384: PUSH
17385: LD_INT 2
17387: ARRAY
17388: PPUSH
17389: CALL_OW 458
17393: NOT
17394: IFFALSE 17398
// continue ;
17396: GO 17368
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17398: LD_VAR 0 4
17402: PUSH
17403: LD_INT 1
17405: ARRAY
17406: PPUSH
17407: LD_VAR 0 4
17411: PUSH
17412: LD_INT 2
17414: ARRAY
17415: PPUSH
17416: CALL_OW 428
17420: PUSH
17421: LD_VAR 0 5
17425: IN
17426: IFFALSE 17455
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17428: LD_VAR 0 4
17432: PUSH
17433: LD_INT 1
17435: ARRAY
17436: PPUSH
17437: LD_VAR 0 4
17441: PUSH
17442: LD_INT 2
17444: ARRAY
17445: PPUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL_OW 456
// end ;
17455: GO 17368
17457: POP
17458: POP
// end ;
17459: LD_VAR 0 3
17463: RET
// export function Count ( array ) ; var i ; begin
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
// result := 0 ;
17468: LD_ADDR_VAR 0 2
17472: PUSH
17473: LD_INT 0
17475: ST_TO_ADDR
// for i in array do
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: LD_VAR 0 1
17485: PUSH
17486: FOR_IN
17487: IFFALSE 17511
// if i then
17489: LD_VAR 0 3
17493: IFFALSE 17509
// result := result + 1 ;
17495: LD_ADDR_VAR 0 2
17499: PUSH
17500: LD_VAR 0 2
17504: PUSH
17505: LD_INT 1
17507: PLUS
17508: ST_TO_ADDR
17509: GO 17486
17511: POP
17512: POP
// end ;
17513: LD_VAR 0 2
17517: RET
// export function IsEmpty ( building ) ; begin
17518: LD_INT 0
17520: PPUSH
// if not building then
17521: LD_VAR 0 1
17525: NOT
17526: IFFALSE 17530
// exit ;
17528: GO 17573
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_VAR 0 1
17539: PUSH
17540: LD_INT 22
17542: PUSH
17543: LD_VAR 0 1
17547: PPUSH
17548: CALL_OW 255
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 58
17559: PUSH
17560: EMPTY
17561: LIST
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL_OW 69
17571: IN
17572: ST_TO_ADDR
// end ;
17573: LD_VAR 0 2
17577: RET
// export function IsNotFull ( building ) ; var places ; begin
17578: LD_INT 0
17580: PPUSH
17581: PPUSH
// if not building then
17582: LD_VAR 0 1
17586: NOT
17587: IFFALSE 17591
// exit ;
17589: GO 17762
// result := false ;
17591: LD_ADDR_VAR 0 2
17595: PUSH
17596: LD_INT 0
17598: ST_TO_ADDR
// places := 0 ;
17599: LD_ADDR_VAR 0 3
17603: PUSH
17604: LD_INT 0
17606: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 266
17616: PUSH
17617: LD_INT 0
17619: DOUBLE
17620: EQUAL
17621: IFTRUE 17679
17623: LD_INT 1
17625: DOUBLE
17626: EQUAL
17627: IFTRUE 17679
17629: LD_INT 6
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17679
17635: LD_INT 7
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17679
17641: LD_INT 8
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17679
17647: LD_INT 4
17649: DOUBLE
17650: EQUAL
17651: IFTRUE 17679
17653: LD_INT 5
17655: DOUBLE
17656: EQUAL
17657: IFTRUE 17679
17659: LD_INT 2
17661: DOUBLE
17662: EQUAL
17663: IFTRUE 17679
17665: LD_INT 3
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17679
17671: LD_INT 35
17673: DOUBLE
17674: EQUAL
17675: IFTRUE 17679
17677: GO 17690
17679: POP
// places := 6 ; b_bunker , b_breastwork :
17680: LD_ADDR_VAR 0 3
17684: PUSH
17685: LD_INT 6
17687: ST_TO_ADDR
17688: GO 17735
17690: LD_INT 32
17692: DOUBLE
17693: EQUAL
17694: IFTRUE 17704
17696: LD_INT 31
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17715
17704: POP
// places := 1 ; b_control_tower :
17705: LD_ADDR_VAR 0 3
17709: PUSH
17710: LD_INT 1
17712: ST_TO_ADDR
17713: GO 17735
17715: LD_INT 36
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// places := 3 ; end ;
17724: LD_ADDR_VAR 0 3
17728: PUSH
17729: LD_INT 3
17731: ST_TO_ADDR
17732: GO 17735
17734: POP
// if places then
17735: LD_VAR 0 3
17739: IFFALSE 17762
// result := UnitsInside ( building ) < places ;
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 313
17755: PUSH
17756: LD_VAR 0 3
17760: LESS
17761: ST_TO_ADDR
// end ;
17762: LD_VAR 0 2
17766: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17767: LD_INT 0
17769: PPUSH
17770: PPUSH
17771: PPUSH
17772: PPUSH
// tmp := [ ] ;
17773: LD_ADDR_VAR 0 3
17777: PUSH
17778: EMPTY
17779: ST_TO_ADDR
// list := [ ] ;
17780: LD_ADDR_VAR 0 5
17784: PUSH
17785: EMPTY
17786: ST_TO_ADDR
// for i = 16 to 25 do
17787: LD_ADDR_VAR 0 4
17791: PUSH
17792: DOUBLE
17793: LD_INT 16
17795: DEC
17796: ST_TO_ADDR
17797: LD_INT 25
17799: PUSH
17800: FOR_TO
17801: IFFALSE 17874
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17803: LD_ADDR_VAR 0 3
17807: PUSH
17808: LD_VAR 0 3
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 255
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 91
17832: PUSH
17833: LD_VAR 0 1
17837: PUSH
17838: LD_INT 6
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 30
17848: PUSH
17849: LD_VAR 0 4
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: PPUSH
17866: CALL_OW 69
17870: ADD
17871: ST_TO_ADDR
17872: GO 17800
17874: POP
17875: POP
// for i = 1 to tmp do
17876: LD_ADDR_VAR 0 4
17880: PUSH
17881: DOUBLE
17882: LD_INT 1
17884: DEC
17885: ST_TO_ADDR
17886: LD_VAR 0 3
17890: PUSH
17891: FOR_TO
17892: IFFALSE 17980
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17894: LD_ADDR_VAR 0 5
17898: PUSH
17899: LD_VAR 0 5
17903: PUSH
17904: LD_VAR 0 3
17908: PUSH
17909: LD_VAR 0 4
17913: ARRAY
17914: PPUSH
17915: CALL_OW 266
17919: PUSH
17920: LD_VAR 0 3
17924: PUSH
17925: LD_VAR 0 4
17929: ARRAY
17930: PPUSH
17931: CALL_OW 250
17935: PUSH
17936: LD_VAR 0 3
17940: PUSH
17941: LD_VAR 0 4
17945: ARRAY
17946: PPUSH
17947: CALL_OW 251
17951: PUSH
17952: LD_VAR 0 3
17956: PUSH
17957: LD_VAR 0 4
17961: ARRAY
17962: PPUSH
17963: CALL_OW 254
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: ADD
17977: ST_TO_ADDR
17978: GO 17891
17980: POP
17981: POP
// result := list ;
17982: LD_ADDR_VAR 0 2
17986: PUSH
17987: LD_VAR 0 5
17991: ST_TO_ADDR
// end ;
17992: LD_VAR 0 2
17996: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17997: LD_INT 0
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
// if not factory then
18006: LD_VAR 0 1
18010: NOT
18011: IFFALSE 18015
// exit ;
18013: GO 18608
// if control = control_apeman then
18015: LD_VAR 0 4
18019: PUSH
18020: LD_INT 5
18022: EQUAL
18023: IFFALSE 18132
// begin tmp := UnitsInside ( factory ) ;
18025: LD_ADDR_VAR 0 8
18029: PUSH
18030: LD_VAR 0 1
18034: PPUSH
18035: CALL_OW 313
18039: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18040: LD_VAR 0 8
18044: PPUSH
18045: LD_INT 25
18047: PUSH
18048: LD_INT 12
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 72
18059: NOT
18060: IFFALSE 18070
// control := control_manual ;
18062: LD_ADDR_VAR 0 4
18066: PUSH
18067: LD_INT 1
18069: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18070: LD_ADDR_VAR 0 8
18074: PUSH
18075: LD_VAR 0 1
18079: PPUSH
18080: CALL 17767 0 1
18084: ST_TO_ADDR
// if tmp then
18085: LD_VAR 0 8
18089: IFFALSE 18132
// begin for i in tmp do
18091: LD_ADDR_VAR 0 7
18095: PUSH
18096: LD_VAR 0 8
18100: PUSH
18101: FOR_IN
18102: IFFALSE 18130
// if i [ 1 ] = b_ext_radio then
18104: LD_VAR 0 7
18108: PUSH
18109: LD_INT 1
18111: ARRAY
18112: PUSH
18113: LD_INT 22
18115: EQUAL
18116: IFFALSE 18128
// begin control := control_remote ;
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: LD_INT 2
18125: ST_TO_ADDR
// break ;
18126: GO 18130
// end ;
18128: GO 18101
18130: POP
18131: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18132: LD_VAR 0 1
18136: PPUSH
18137: LD_VAR 0 2
18141: PPUSH
18142: LD_VAR 0 3
18146: PPUSH
18147: LD_VAR 0 4
18151: PPUSH
18152: LD_VAR 0 5
18156: PPUSH
18157: CALL_OW 448
18161: IFFALSE 18196
// begin result := [ chassis , engine , control , weapon ] ;
18163: LD_ADDR_VAR 0 6
18167: PUSH
18168: LD_VAR 0 2
18172: PUSH
18173: LD_VAR 0 3
18177: PUSH
18178: LD_VAR 0 4
18182: PUSH
18183: LD_VAR 0 5
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: ST_TO_ADDR
// exit ;
18194: GO 18608
// end ; _chassis := AvailableChassisList ( factory ) ;
18196: LD_ADDR_VAR 0 9
18200: PUSH
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 475
18210: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18211: LD_ADDR_VAR 0 11
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 476
18225: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18226: LD_ADDR_VAR 0 12
18230: PUSH
18231: LD_VAR 0 1
18235: PPUSH
18236: CALL_OW 477
18240: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18241: LD_ADDR_VAR 0 10
18245: PUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 478
18255: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18256: LD_VAR 0 9
18260: NOT
18261: PUSH
18262: LD_VAR 0 11
18266: NOT
18267: OR
18268: PUSH
18269: LD_VAR 0 12
18273: NOT
18274: OR
18275: PUSH
18276: LD_VAR 0 10
18280: NOT
18281: OR
18282: IFFALSE 18317
// begin result := [ chassis , engine , control , weapon ] ;
18284: LD_ADDR_VAR 0 6
18288: PUSH
18289: LD_VAR 0 2
18293: PUSH
18294: LD_VAR 0 3
18298: PUSH
18299: LD_VAR 0 4
18303: PUSH
18304: LD_VAR 0 5
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
// exit ;
18315: GO 18608
// end ; if not chassis in _chassis then
18317: LD_VAR 0 2
18321: PUSH
18322: LD_VAR 0 9
18326: IN
18327: NOT
18328: IFFALSE 18354
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18330: LD_ADDR_VAR 0 2
18334: PUSH
18335: LD_VAR 0 9
18339: PUSH
18340: LD_INT 1
18342: PPUSH
18343: LD_VAR 0 9
18347: PPUSH
18348: CALL_OW 12
18352: ARRAY
18353: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_VAR 0 3
18363: PPUSH
18364: CALL 18613 0 2
18368: NOT
18369: IFFALSE 18428
// repeat engine := _engine [ 1 ] ;
18371: LD_ADDR_VAR 0 3
18375: PUSH
18376: LD_VAR 0 11
18380: PUSH
18381: LD_INT 1
18383: ARRAY
18384: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18385: LD_ADDR_VAR 0 11
18389: PUSH
18390: LD_VAR 0 11
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL_OW 3
18402: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18403: LD_VAR 0 2
18407: PPUSH
18408: LD_VAR 0 3
18412: PPUSH
18413: CALL 18613 0 2
18417: PUSH
18418: LD_VAR 0 11
18422: PUSH
18423: EMPTY
18424: EQUAL
18425: OR
18426: IFFALSE 18371
// if not control in _control then
18428: LD_VAR 0 4
18432: PUSH
18433: LD_VAR 0 12
18437: IN
18438: NOT
18439: IFFALSE 18465
// control := _control [ rand ( 1 , _control ) ] ;
18441: LD_ADDR_VAR 0 4
18445: PUSH
18446: LD_VAR 0 12
18450: PUSH
18451: LD_INT 1
18453: PPUSH
18454: LD_VAR 0 12
18458: PPUSH
18459: CALL_OW 12
18463: ARRAY
18464: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18465: LD_VAR 0 2
18469: PPUSH
18470: LD_VAR 0 5
18474: PPUSH
18475: CALL 18833 0 2
18479: NOT
18480: IFFALSE 18539
// repeat weapon := _weapon [ 1 ] ;
18482: LD_ADDR_VAR 0 5
18486: PUSH
18487: LD_VAR 0 10
18491: PUSH
18492: LD_INT 1
18494: ARRAY
18495: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18496: LD_ADDR_VAR 0 10
18500: PUSH
18501: LD_VAR 0 10
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: CALL_OW 3
18513: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 5
18523: PPUSH
18524: CALL 18833 0 2
18528: PUSH
18529: LD_VAR 0 10
18533: PUSH
18534: EMPTY
18535: EQUAL
18536: OR
18537: IFFALSE 18482
// result := [ ] ;
18539: LD_ADDR_VAR 0 6
18543: PUSH
18544: EMPTY
18545: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18546: LD_VAR 0 1
18550: PPUSH
18551: LD_VAR 0 2
18555: PPUSH
18556: LD_VAR 0 3
18560: PPUSH
18561: LD_VAR 0 4
18565: PPUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: CALL_OW 448
18575: IFFALSE 18608
// result := [ chassis , engine , control , weapon ] ;
18577: LD_ADDR_VAR 0 6
18581: PUSH
18582: LD_VAR 0 2
18586: PUSH
18587: LD_VAR 0 3
18591: PUSH
18592: LD_VAR 0 4
18596: PUSH
18597: LD_VAR 0 5
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: ST_TO_ADDR
// end ;
18608: LD_VAR 0 6
18612: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18613: LD_INT 0
18615: PPUSH
// if not chassis or not engine then
18616: LD_VAR 0 1
18620: NOT
18621: PUSH
18622: LD_VAR 0 2
18626: NOT
18627: OR
18628: IFFALSE 18632
// exit ;
18630: GO 18828
// case engine of engine_solar :
18632: LD_VAR 0 2
18636: PUSH
18637: LD_INT 2
18639: DOUBLE
18640: EQUAL
18641: IFTRUE 18645
18643: GO 18683
18645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18646: LD_ADDR_VAR 0 3
18650: PUSH
18651: LD_INT 11
18653: PUSH
18654: LD_INT 12
18656: PUSH
18657: LD_INT 13
18659: PUSH
18660: LD_INT 14
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: LD_INT 2
18668: PUSH
18669: LD_INT 3
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: ST_TO_ADDR
18681: GO 18812
18683: LD_INT 1
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 18753
18691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18692: LD_ADDR_VAR 0 3
18696: PUSH
18697: LD_INT 11
18699: PUSH
18700: LD_INT 12
18702: PUSH
18703: LD_INT 13
18705: PUSH
18706: LD_INT 14
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: LD_INT 2
18714: PUSH
18715: LD_INT 3
18717: PUSH
18718: LD_INT 4
18720: PUSH
18721: LD_INT 5
18723: PUSH
18724: LD_INT 21
18726: PUSH
18727: LD_INT 23
18729: PUSH
18730: LD_INT 22
18732: PUSH
18733: LD_INT 24
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: ST_TO_ADDR
18751: GO 18812
18753: LD_INT 3
18755: DOUBLE
18756: EQUAL
18757: IFTRUE 18761
18759: GO 18811
18761: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18762: LD_ADDR_VAR 0 3
18766: PUSH
18767: LD_INT 13
18769: PUSH
18770: LD_INT 14
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: LD_INT 3
18778: PUSH
18779: LD_INT 4
18781: PUSH
18782: LD_INT 5
18784: PUSH
18785: LD_INT 21
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_INT 23
18793: PUSH
18794: LD_INT 24
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: ST_TO_ADDR
18809: GO 18812
18811: POP
// result := ( chassis in result ) ;
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: LD_VAR 0 1
18821: PUSH
18822: LD_VAR 0 3
18826: IN
18827: ST_TO_ADDR
// end ;
18828: LD_VAR 0 3
18832: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18833: LD_INT 0
18835: PPUSH
// if not chassis or not weapon then
18836: LD_VAR 0 1
18840: NOT
18841: PUSH
18842: LD_VAR 0 2
18846: NOT
18847: OR
18848: IFFALSE 18852
// exit ;
18850: GO 19912
// case weapon of us_machine_gun :
18852: LD_VAR 0 2
18856: PUSH
18857: LD_INT 2
18859: DOUBLE
18860: EQUAL
18861: IFTRUE 18865
18863: GO 18895
18865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18866: LD_ADDR_VAR 0 3
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 4
18882: PUSH
18883: LD_INT 5
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: ST_TO_ADDR
18893: GO 19896
18895: LD_INT 3
18897: DOUBLE
18898: EQUAL
18899: IFTRUE 18903
18901: GO 18933
18903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18904: LD_ADDR_VAR 0 3
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 3
18917: PUSH
18918: LD_INT 4
18920: PUSH
18921: LD_INT 5
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: ST_TO_ADDR
18931: GO 19896
18933: LD_INT 11
18935: DOUBLE
18936: EQUAL
18937: IFTRUE 18941
18939: GO 18971
18941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18942: LD_ADDR_VAR 0 3
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 3
18955: PUSH
18956: LD_INT 4
18958: PUSH
18959: LD_INT 5
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: ST_TO_ADDR
18969: GO 19896
18971: LD_INT 4
18973: DOUBLE
18974: EQUAL
18975: IFTRUE 18979
18977: GO 19005
18979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18980: LD_ADDR_VAR 0 3
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: LD_INT 4
18993: PUSH
18994: LD_INT 5
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: ST_TO_ADDR
19003: GO 19896
19005: LD_INT 5
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19039
19013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: LD_INT 4
19027: PUSH
19028: LD_INT 5
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: ST_TO_ADDR
19037: GO 19896
19039: LD_INT 9
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19073
19047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: LD_INT 4
19061: PUSH
19062: LD_INT 5
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: ST_TO_ADDR
19071: GO 19896
19073: LD_INT 7
19075: DOUBLE
19076: EQUAL
19077: IFTRUE 19081
19079: GO 19107
19081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19082: LD_ADDR_VAR 0 3
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 3
19092: PUSH
19093: LD_INT 4
19095: PUSH
19096: LD_INT 5
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
19105: GO 19896
19107: LD_INT 12
19109: DOUBLE
19110: EQUAL
19111: IFTRUE 19115
19113: GO 19141
19115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19116: LD_ADDR_VAR 0 3
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 3
19126: PUSH
19127: LD_INT 4
19129: PUSH
19130: LD_INT 5
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: ST_TO_ADDR
19139: GO 19896
19141: LD_INT 13
19143: DOUBLE
19144: EQUAL
19145: IFTRUE 19149
19147: GO 19175
19149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19150: LD_ADDR_VAR 0 3
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: LD_INT 3
19160: PUSH
19161: LD_INT 4
19163: PUSH
19164: LD_INT 5
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: ST_TO_ADDR
19173: GO 19896
19175: LD_INT 14
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19201
19183: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_INT 4
19191: PUSH
19192: LD_INT 5
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: ST_TO_ADDR
19199: GO 19896
19201: LD_INT 6
19203: DOUBLE
19204: EQUAL
19205: IFTRUE 19209
19207: GO 19227
19209: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 4
19217: PUSH
19218: LD_INT 5
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: ST_TO_ADDR
19225: GO 19896
19227: LD_INT 10
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19253
19235: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_INT 4
19243: PUSH
19244: LD_INT 5
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: ST_TO_ADDR
19251: GO 19896
19253: LD_INT 22
19255: DOUBLE
19256: EQUAL
19257: IFTRUE 19261
19259: GO 19287
19261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19262: LD_ADDR_VAR 0 3
19266: PUSH
19267: LD_INT 11
19269: PUSH
19270: LD_INT 12
19272: PUSH
19273: LD_INT 13
19275: PUSH
19276: LD_INT 14
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: ST_TO_ADDR
19285: GO 19896
19287: LD_INT 23
19289: DOUBLE
19290: EQUAL
19291: IFTRUE 19295
19293: GO 19321
19295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_INT 11
19303: PUSH
19304: LD_INT 12
19306: PUSH
19307: LD_INT 13
19309: PUSH
19310: LD_INT 14
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: ST_TO_ADDR
19319: GO 19896
19321: LD_INT 24
19323: DOUBLE
19324: EQUAL
19325: IFTRUE 19329
19327: GO 19355
19329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19330: LD_ADDR_VAR 0 3
19334: PUSH
19335: LD_INT 11
19337: PUSH
19338: LD_INT 12
19340: PUSH
19341: LD_INT 13
19343: PUSH
19344: LD_INT 14
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: ST_TO_ADDR
19353: GO 19896
19355: LD_INT 30
19357: DOUBLE
19358: EQUAL
19359: IFTRUE 19363
19361: GO 19389
19363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19364: LD_ADDR_VAR 0 3
19368: PUSH
19369: LD_INT 11
19371: PUSH
19372: LD_INT 12
19374: PUSH
19375: LD_INT 13
19377: PUSH
19378: LD_INT 14
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: ST_TO_ADDR
19387: GO 19896
19389: LD_INT 25
19391: DOUBLE
19392: EQUAL
19393: IFTRUE 19397
19395: GO 19415
19397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19398: LD_ADDR_VAR 0 3
19402: PUSH
19403: LD_INT 13
19405: PUSH
19406: LD_INT 14
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: ST_TO_ADDR
19413: GO 19896
19415: LD_INT 27
19417: DOUBLE
19418: EQUAL
19419: IFTRUE 19423
19421: GO 19441
19423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19424: LD_ADDR_VAR 0 3
19428: PUSH
19429: LD_INT 13
19431: PUSH
19432: LD_INT 14
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: ST_TO_ADDR
19439: GO 19896
19441: LD_INT 92
19443: DOUBLE
19444: EQUAL
19445: IFTRUE 19449
19447: GO 19475
19449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: LD_INT 11
19457: PUSH
19458: LD_INT 12
19460: PUSH
19461: LD_INT 13
19463: PUSH
19464: LD_INT 14
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: ST_TO_ADDR
19473: GO 19896
19475: LD_INT 28
19477: DOUBLE
19478: EQUAL
19479: IFTRUE 19483
19481: GO 19501
19483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19484: LD_ADDR_VAR 0 3
19488: PUSH
19489: LD_INT 13
19491: PUSH
19492: LD_INT 14
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: ST_TO_ADDR
19499: GO 19896
19501: LD_INT 29
19503: DOUBLE
19504: EQUAL
19505: IFTRUE 19509
19507: GO 19527
19509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19510: LD_ADDR_VAR 0 3
19514: PUSH
19515: LD_INT 13
19517: PUSH
19518: LD_INT 14
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: ST_TO_ADDR
19525: GO 19896
19527: LD_INT 31
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19553
19535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_INT 13
19543: PUSH
19544: LD_INT 14
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: ST_TO_ADDR
19551: GO 19896
19553: LD_INT 26
19555: DOUBLE
19556: EQUAL
19557: IFTRUE 19561
19559: GO 19579
19561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19562: LD_ADDR_VAR 0 3
19566: PUSH
19567: LD_INT 13
19569: PUSH
19570: LD_INT 14
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: ST_TO_ADDR
19577: GO 19896
19579: LD_INT 42
19581: DOUBLE
19582: EQUAL
19583: IFTRUE 19587
19585: GO 19613
19587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: LD_INT 21
19595: PUSH
19596: LD_INT 22
19598: PUSH
19599: LD_INT 23
19601: PUSH
19602: LD_INT 24
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: ST_TO_ADDR
19611: GO 19896
19613: LD_INT 43
19615: DOUBLE
19616: EQUAL
19617: IFTRUE 19621
19619: GO 19647
19621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19622: LD_ADDR_VAR 0 3
19626: PUSH
19627: LD_INT 21
19629: PUSH
19630: LD_INT 22
19632: PUSH
19633: LD_INT 23
19635: PUSH
19636: LD_INT 24
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: ST_TO_ADDR
19645: GO 19896
19647: LD_INT 44
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19681
19655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19656: LD_ADDR_VAR 0 3
19660: PUSH
19661: LD_INT 21
19663: PUSH
19664: LD_INT 22
19666: PUSH
19667: LD_INT 23
19669: PUSH
19670: LD_INT 24
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
19679: GO 19896
19681: LD_INT 45
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19715
19689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19690: LD_ADDR_VAR 0 3
19694: PUSH
19695: LD_INT 21
19697: PUSH
19698: LD_INT 22
19700: PUSH
19701: LD_INT 23
19703: PUSH
19704: LD_INT 24
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: ST_TO_ADDR
19713: GO 19896
19715: LD_INT 49
19717: DOUBLE
19718: EQUAL
19719: IFTRUE 19723
19721: GO 19749
19723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19724: LD_ADDR_VAR 0 3
19728: PUSH
19729: LD_INT 21
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 23
19737: PUSH
19738: LD_INT 24
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: ST_TO_ADDR
19747: GO 19896
19749: LD_INT 51
19751: DOUBLE
19752: EQUAL
19753: IFTRUE 19757
19755: GO 19783
19757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19758: LD_ADDR_VAR 0 3
19762: PUSH
19763: LD_INT 21
19765: PUSH
19766: LD_INT 22
19768: PUSH
19769: LD_INT 23
19771: PUSH
19772: LD_INT 24
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: ST_TO_ADDR
19781: GO 19896
19783: LD_INT 52
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19817
19791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19792: LD_ADDR_VAR 0 3
19796: PUSH
19797: LD_INT 21
19799: PUSH
19800: LD_INT 22
19802: PUSH
19803: LD_INT 23
19805: PUSH
19806: LD_INT 24
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
19815: GO 19896
19817: LD_INT 53
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19843
19825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19826: LD_ADDR_VAR 0 3
19830: PUSH
19831: LD_INT 23
19833: PUSH
19834: LD_INT 24
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: ST_TO_ADDR
19841: GO 19896
19843: LD_INT 46
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19869
19851: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19852: LD_ADDR_VAR 0 3
19856: PUSH
19857: LD_INT 23
19859: PUSH
19860: LD_INT 24
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: ST_TO_ADDR
19867: GO 19896
19869: LD_INT 47
19871: DOUBLE
19872: EQUAL
19873: IFTRUE 19877
19875: GO 19895
19877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19878: LD_ADDR_VAR 0 3
19882: PUSH
19883: LD_INT 23
19885: PUSH
19886: LD_INT 24
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 19896
19895: POP
// result := ( chassis in result ) ;
19896: LD_ADDR_VAR 0 3
19900: PUSH
19901: LD_VAR 0 1
19905: PUSH
19906: LD_VAR 0 3
19910: IN
19911: ST_TO_ADDR
// end ;
19912: LD_VAR 0 3
19916: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19917: LD_INT 0
19919: PPUSH
19920: PPUSH
19921: PPUSH
19922: PPUSH
19923: PPUSH
19924: PPUSH
19925: PPUSH
// result := array ;
19926: LD_ADDR_VAR 0 5
19930: PUSH
19931: LD_VAR 0 1
19935: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19936: LD_VAR 0 1
19940: NOT
19941: PUSH
19942: LD_VAR 0 2
19946: NOT
19947: OR
19948: PUSH
19949: LD_VAR 0 3
19953: NOT
19954: OR
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: LD_VAR 0 1
19965: GREATER
19966: OR
19967: PUSH
19968: LD_VAR 0 3
19972: PUSH
19973: LD_VAR 0 1
19977: GREATER
19978: OR
19979: IFFALSE 19983
// exit ;
19981: GO 20279
// if direction then
19983: LD_VAR 0 4
19987: IFFALSE 20051
// begin d := 1 ;
19989: LD_ADDR_VAR 0 9
19993: PUSH
19994: LD_INT 1
19996: ST_TO_ADDR
// if i_from > i_to then
19997: LD_VAR 0 2
20001: PUSH
20002: LD_VAR 0 3
20006: GREATER
20007: IFFALSE 20033
// length := ( array - i_from ) + i_to else
20009: LD_ADDR_VAR 0 11
20013: PUSH
20014: LD_VAR 0 1
20018: PUSH
20019: LD_VAR 0 2
20023: MINUS
20024: PUSH
20025: LD_VAR 0 3
20029: PLUS
20030: ST_TO_ADDR
20031: GO 20049
// length := i_to - i_from ;
20033: LD_ADDR_VAR 0 11
20037: PUSH
20038: LD_VAR 0 3
20042: PUSH
20043: LD_VAR 0 2
20047: MINUS
20048: ST_TO_ADDR
// end else
20049: GO 20112
// begin d := - 1 ;
20051: LD_ADDR_VAR 0 9
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: ST_TO_ADDR
// if i_from > i_to then
20060: LD_VAR 0 2
20064: PUSH
20065: LD_VAR 0 3
20069: GREATER
20070: IFFALSE 20090
// length := i_from - i_to else
20072: LD_ADDR_VAR 0 11
20076: PUSH
20077: LD_VAR 0 2
20081: PUSH
20082: LD_VAR 0 3
20086: MINUS
20087: ST_TO_ADDR
20088: GO 20112
// length := ( array - i_to ) + i_from ;
20090: LD_ADDR_VAR 0 11
20094: PUSH
20095: LD_VAR 0 1
20099: PUSH
20100: LD_VAR 0 3
20104: MINUS
20105: PUSH
20106: LD_VAR 0 2
20110: PLUS
20111: ST_TO_ADDR
// end ; if not length then
20112: LD_VAR 0 11
20116: NOT
20117: IFFALSE 20121
// exit ;
20119: GO 20279
// tmp := array ;
20121: LD_ADDR_VAR 0 10
20125: PUSH
20126: LD_VAR 0 1
20130: ST_TO_ADDR
// for i = 1 to length do
20131: LD_ADDR_VAR 0 6
20135: PUSH
20136: DOUBLE
20137: LD_INT 1
20139: DEC
20140: ST_TO_ADDR
20141: LD_VAR 0 11
20145: PUSH
20146: FOR_TO
20147: IFFALSE 20267
// begin for j = 1 to array do
20149: LD_ADDR_VAR 0 7
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_VAR 0 1
20163: PUSH
20164: FOR_TO
20165: IFFALSE 20253
// begin k := j + d ;
20167: LD_ADDR_VAR 0 8
20171: PUSH
20172: LD_VAR 0 7
20176: PUSH
20177: LD_VAR 0 9
20181: PLUS
20182: ST_TO_ADDR
// if k > array then
20183: LD_VAR 0 8
20187: PUSH
20188: LD_VAR 0 1
20192: GREATER
20193: IFFALSE 20203
// k := 1 ;
20195: LD_ADDR_VAR 0 8
20199: PUSH
20200: LD_INT 1
20202: ST_TO_ADDR
// if not k then
20203: LD_VAR 0 8
20207: NOT
20208: IFFALSE 20220
// k := array ;
20210: LD_ADDR_VAR 0 8
20214: PUSH
20215: LD_VAR 0 1
20219: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20220: LD_ADDR_VAR 0 10
20224: PUSH
20225: LD_VAR 0 10
20229: PPUSH
20230: LD_VAR 0 8
20234: PPUSH
20235: LD_VAR 0 1
20239: PUSH
20240: LD_VAR 0 7
20244: ARRAY
20245: PPUSH
20246: CALL_OW 1
20250: ST_TO_ADDR
// end ;
20251: GO 20164
20253: POP
20254: POP
// array := tmp ;
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 10
20264: ST_TO_ADDR
// end ;
20265: GO 20146
20267: POP
20268: POP
// result := array ;
20269: LD_ADDR_VAR 0 5
20273: PUSH
20274: LD_VAR 0 1
20278: ST_TO_ADDR
// end ;
20279: LD_VAR 0 5
20283: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
// result := 0 ;
20288: LD_ADDR_VAR 0 3
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// if not array or not value in array then
20296: LD_VAR 0 1
20300: NOT
20301: PUSH
20302: LD_VAR 0 2
20306: PUSH
20307: LD_VAR 0 1
20311: IN
20312: NOT
20313: OR
20314: IFFALSE 20318
// exit ;
20316: GO 20372
// for i = 1 to array do
20318: LD_ADDR_VAR 0 4
20322: PUSH
20323: DOUBLE
20324: LD_INT 1
20326: DEC
20327: ST_TO_ADDR
20328: LD_VAR 0 1
20332: PUSH
20333: FOR_TO
20334: IFFALSE 20370
// if value = array [ i ] then
20336: LD_VAR 0 2
20340: PUSH
20341: LD_VAR 0 1
20345: PUSH
20346: LD_VAR 0 4
20350: ARRAY
20351: EQUAL
20352: IFFALSE 20368
// begin result := i ;
20354: LD_ADDR_VAR 0 3
20358: PUSH
20359: LD_VAR 0 4
20363: ST_TO_ADDR
// exit ;
20364: POP
20365: POP
20366: GO 20372
// end ;
20368: GO 20333
20370: POP
20371: POP
// end ;
20372: LD_VAR 0 3
20376: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20377: LD_INT 0
20379: PPUSH
// vc_chassis := chassis ;
20380: LD_ADDR_OWVAR 37
20384: PUSH
20385: LD_VAR 0 1
20389: ST_TO_ADDR
// vc_engine := engine ;
20390: LD_ADDR_OWVAR 39
20394: PUSH
20395: LD_VAR 0 2
20399: ST_TO_ADDR
// vc_control := control ;
20400: LD_ADDR_OWVAR 38
20404: PUSH
20405: LD_VAR 0 3
20409: ST_TO_ADDR
// vc_weapon := weapon ;
20410: LD_ADDR_OWVAR 40
20414: PUSH
20415: LD_VAR 0 4
20419: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20420: LD_ADDR_OWVAR 41
20424: PUSH
20425: LD_VAR 0 5
20429: ST_TO_ADDR
// end ;
20430: LD_VAR 0 6
20434: RET
// export function WantPlant ( unit ) ; var task ; begin
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
// result := false ;
20439: LD_ADDR_VAR 0 2
20443: PUSH
20444: LD_INT 0
20446: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20447: LD_ADDR_VAR 0 3
20451: PUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 437
20461: ST_TO_ADDR
// if task then
20462: LD_VAR 0 3
20466: IFFALSE 20494
// if task [ 1 ] [ 1 ] = p then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 1
20475: ARRAY
20476: PUSH
20477: LD_INT 1
20479: ARRAY
20480: PUSH
20481: LD_STRING p
20483: EQUAL
20484: IFFALSE 20494
// result := true ;
20486: LD_ADDR_VAR 0 2
20490: PUSH
20491: LD_INT 1
20493: ST_TO_ADDR
// end ;
20494: LD_VAR 0 2
20498: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20499: LD_INT 0
20501: PPUSH
20502: PPUSH
20503: PPUSH
20504: PPUSH
// if pos < 1 then
20505: LD_VAR 0 2
20509: PUSH
20510: LD_INT 1
20512: LESS
20513: IFFALSE 20517
// exit ;
20515: GO 20820
// if pos = 1 then
20517: LD_VAR 0 2
20521: PUSH
20522: LD_INT 1
20524: EQUAL
20525: IFFALSE 20558
// result := Replace ( arr , pos [ 1 ] , value ) else
20527: LD_ADDR_VAR 0 4
20531: PUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: LD_VAR 0 2
20541: PUSH
20542: LD_INT 1
20544: ARRAY
20545: PPUSH
20546: LD_VAR 0 3
20550: PPUSH
20551: CALL_OW 1
20555: ST_TO_ADDR
20556: GO 20820
// begin tmp := arr ;
20558: LD_ADDR_VAR 0 6
20562: PUSH
20563: LD_VAR 0 1
20567: ST_TO_ADDR
// s_arr := [ tmp ] ;
20568: LD_ADDR_VAR 0 7
20572: PUSH
20573: LD_VAR 0 6
20577: PUSH
20578: EMPTY
20579: LIST
20580: ST_TO_ADDR
// for i = 1 to pos - 1 do
20581: LD_ADDR_VAR 0 5
20585: PUSH
20586: DOUBLE
20587: LD_INT 1
20589: DEC
20590: ST_TO_ADDR
20591: LD_VAR 0 2
20595: PUSH
20596: LD_INT 1
20598: MINUS
20599: PUSH
20600: FOR_TO
20601: IFFALSE 20646
// begin tmp := tmp [ pos [ i ] ] ;
20603: LD_ADDR_VAR 0 6
20607: PUSH
20608: LD_VAR 0 6
20612: PUSH
20613: LD_VAR 0 2
20617: PUSH
20618: LD_VAR 0 5
20622: ARRAY
20623: ARRAY
20624: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20625: LD_ADDR_VAR 0 7
20629: PUSH
20630: LD_VAR 0 7
20634: PUSH
20635: LD_VAR 0 6
20639: PUSH
20640: EMPTY
20641: LIST
20642: ADD
20643: ST_TO_ADDR
// end ;
20644: GO 20600
20646: POP
20647: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20648: LD_ADDR_VAR 0 6
20652: PUSH
20653: LD_VAR 0 6
20657: PPUSH
20658: LD_VAR 0 2
20662: PUSH
20663: LD_VAR 0 2
20667: ARRAY
20668: PPUSH
20669: LD_VAR 0 3
20673: PPUSH
20674: CALL_OW 1
20678: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20679: LD_ADDR_VAR 0 7
20683: PUSH
20684: LD_VAR 0 7
20688: PPUSH
20689: LD_VAR 0 7
20693: PPUSH
20694: LD_VAR 0 6
20698: PPUSH
20699: CALL_OW 1
20703: ST_TO_ADDR
// for i = s_arr downto 2 do
20704: LD_ADDR_VAR 0 5
20708: PUSH
20709: DOUBLE
20710: LD_VAR 0 7
20714: INC
20715: ST_TO_ADDR
20716: LD_INT 2
20718: PUSH
20719: FOR_DOWNTO
20720: IFFALSE 20804
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20722: LD_ADDR_VAR 0 6
20726: PUSH
20727: LD_VAR 0 7
20731: PUSH
20732: LD_VAR 0 5
20736: PUSH
20737: LD_INT 1
20739: MINUS
20740: ARRAY
20741: PPUSH
20742: LD_VAR 0 2
20746: PUSH
20747: LD_VAR 0 5
20751: PUSH
20752: LD_INT 1
20754: MINUS
20755: ARRAY
20756: PPUSH
20757: LD_VAR 0 7
20761: PUSH
20762: LD_VAR 0 5
20766: ARRAY
20767: PPUSH
20768: CALL_OW 1
20772: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20773: LD_ADDR_VAR 0 7
20777: PUSH
20778: LD_VAR 0 7
20782: PPUSH
20783: LD_VAR 0 5
20787: PUSH
20788: LD_INT 1
20790: MINUS
20791: PPUSH
20792: LD_VAR 0 6
20796: PPUSH
20797: CALL_OW 1
20801: ST_TO_ADDR
// end ;
20802: GO 20719
20804: POP
20805: POP
// result := s_arr [ 1 ] ;
20806: LD_ADDR_VAR 0 4
20810: PUSH
20811: LD_VAR 0 7
20815: PUSH
20816: LD_INT 1
20818: ARRAY
20819: ST_TO_ADDR
// end ; end ;
20820: LD_VAR 0 4
20824: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
// if not list then
20829: LD_VAR 0 1
20833: NOT
20834: IFFALSE 20838
// exit ;
20836: GO 20929
// i := list [ pos1 ] ;
20838: LD_ADDR_VAR 0 5
20842: PUSH
20843: LD_VAR 0 1
20847: PUSH
20848: LD_VAR 0 2
20852: ARRAY
20853: ST_TO_ADDR
// if not i then
20854: LD_VAR 0 5
20858: NOT
20859: IFFALSE 20863
// exit ;
20861: GO 20929
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_VAR 0 1
20872: PPUSH
20873: LD_VAR 0 2
20877: PPUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_VAR 0 3
20887: ARRAY
20888: PPUSH
20889: CALL_OW 1
20893: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20894: LD_ADDR_VAR 0 1
20898: PUSH
20899: LD_VAR 0 1
20903: PPUSH
20904: LD_VAR 0 3
20908: PPUSH
20909: LD_VAR 0 5
20913: PPUSH
20914: CALL_OW 1
20918: ST_TO_ADDR
// result := list ;
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_VAR 0 1
20928: ST_TO_ADDR
// end ;
20929: LD_VAR 0 4
20933: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20934: LD_INT 0
20936: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20937: LD_ADDR_VAR 0 5
20941: PUSH
20942: LD_VAR 0 1
20946: PPUSH
20947: CALL_OW 250
20951: PPUSH
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 251
20961: PPUSH
20962: LD_VAR 0 2
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: LD_VAR 0 4
20976: PPUSH
20977: CALL 20987 0 5
20981: ST_TO_ADDR
// end ;
20982: LD_VAR 0 5
20986: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20987: LD_INT 0
20989: PPUSH
20990: PPUSH
20991: PPUSH
20992: PPUSH
// if not list then
20993: LD_VAR 0 3
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21390
// result := [ ] ;
21002: LD_ADDR_VAR 0 6
21006: PUSH
21007: EMPTY
21008: ST_TO_ADDR
// for i in list do
21009: LD_ADDR_VAR 0 7
21013: PUSH
21014: LD_VAR 0 3
21018: PUSH
21019: FOR_IN
21020: IFFALSE 21222
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21022: LD_ADDR_VAR 0 9
21026: PUSH
21027: LD_VAR 0 7
21031: PPUSH
21032: LD_VAR 0 1
21036: PPUSH
21037: LD_VAR 0 2
21041: PPUSH
21042: CALL_OW 297
21046: ST_TO_ADDR
// if not result then
21047: LD_VAR 0 6
21051: NOT
21052: IFFALSE 21078
// result := [ [ i , tmp ] ] else
21054: LD_ADDR_VAR 0 6
21058: PUSH
21059: LD_VAR 0 7
21063: PUSH
21064: LD_VAR 0 9
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: ST_TO_ADDR
21076: GO 21220
// begin if result [ result ] [ 2 ] < tmp then
21078: LD_VAR 0 6
21082: PUSH
21083: LD_VAR 0 6
21087: ARRAY
21088: PUSH
21089: LD_INT 2
21091: ARRAY
21092: PUSH
21093: LD_VAR 0 9
21097: LESS
21098: IFFALSE 21140
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21100: LD_ADDR_VAR 0 6
21104: PUSH
21105: LD_VAR 0 6
21109: PPUSH
21110: LD_VAR 0 6
21114: PUSH
21115: LD_INT 1
21117: PLUS
21118: PPUSH
21119: LD_VAR 0 7
21123: PUSH
21124: LD_VAR 0 9
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PPUSH
21133: CALL_OW 2
21137: ST_TO_ADDR
21138: GO 21220
// for j = 1 to result do
21140: LD_ADDR_VAR 0 8
21144: PUSH
21145: DOUBLE
21146: LD_INT 1
21148: DEC
21149: ST_TO_ADDR
21150: LD_VAR 0 6
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21218
// begin if tmp < result [ j ] [ 2 ] then
21158: LD_VAR 0 9
21162: PUSH
21163: LD_VAR 0 6
21167: PUSH
21168: LD_VAR 0 8
21172: ARRAY
21173: PUSH
21174: LD_INT 2
21176: ARRAY
21177: LESS
21178: IFFALSE 21216
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21180: LD_ADDR_VAR 0 6
21184: PUSH
21185: LD_VAR 0 6
21189: PPUSH
21190: LD_VAR 0 8
21194: PPUSH
21195: LD_VAR 0 7
21199: PUSH
21200: LD_VAR 0 9
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 2
21213: ST_TO_ADDR
// break ;
21214: GO 21218
// end ; end ;
21216: GO 21155
21218: POP
21219: POP
// end ; end ;
21220: GO 21019
21222: POP
21223: POP
// if result and not asc then
21224: LD_VAR 0 6
21228: PUSH
21229: LD_VAR 0 4
21233: NOT
21234: AND
21235: IFFALSE 21310
// begin tmp := result ;
21237: LD_ADDR_VAR 0 9
21241: PUSH
21242: LD_VAR 0 6
21246: ST_TO_ADDR
// for i = tmp downto 1 do
21247: LD_ADDR_VAR 0 7
21251: PUSH
21252: DOUBLE
21253: LD_VAR 0 9
21257: INC
21258: ST_TO_ADDR
21259: LD_INT 1
21261: PUSH
21262: FOR_DOWNTO
21263: IFFALSE 21308
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21265: LD_ADDR_VAR 0 6
21269: PUSH
21270: LD_VAR 0 6
21274: PPUSH
21275: LD_VAR 0 9
21279: PUSH
21280: LD_VAR 0 7
21284: MINUS
21285: PUSH
21286: LD_INT 1
21288: PLUS
21289: PPUSH
21290: LD_VAR 0 9
21294: PUSH
21295: LD_VAR 0 7
21299: ARRAY
21300: PPUSH
21301: CALL_OW 1
21305: ST_TO_ADDR
21306: GO 21262
21308: POP
21309: POP
// end ; tmp := [ ] ;
21310: LD_ADDR_VAR 0 9
21314: PUSH
21315: EMPTY
21316: ST_TO_ADDR
// if mode then
21317: LD_VAR 0 5
21321: IFFALSE 21390
// begin for i = 1 to result do
21323: LD_ADDR_VAR 0 7
21327: PUSH
21328: DOUBLE
21329: LD_INT 1
21331: DEC
21332: ST_TO_ADDR
21333: LD_VAR 0 6
21337: PUSH
21338: FOR_TO
21339: IFFALSE 21378
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21341: LD_ADDR_VAR 0 9
21345: PUSH
21346: LD_VAR 0 9
21350: PPUSH
21351: LD_VAR 0 7
21355: PPUSH
21356: LD_VAR 0 6
21360: PUSH
21361: LD_VAR 0 7
21365: ARRAY
21366: PUSH
21367: LD_INT 1
21369: ARRAY
21370: PPUSH
21371: CALL_OW 1
21375: ST_TO_ADDR
21376: GO 21338
21378: POP
21379: POP
// result := tmp ;
21380: LD_ADDR_VAR 0 6
21384: PUSH
21385: LD_VAR 0 9
21389: ST_TO_ADDR
// end ; end ;
21390: LD_VAR 0 6
21394: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21395: LD_INT 0
21397: PPUSH
21398: PPUSH
21399: PPUSH
21400: PPUSH
21401: PPUSH
21402: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21403: LD_ADDR_VAR 0 5
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: EMPTY
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: ST_TO_ADDR
// if not x or not y then
21425: LD_VAR 0 2
21429: NOT
21430: PUSH
21431: LD_VAR 0 3
21435: NOT
21436: OR
21437: IFFALSE 21441
// exit ;
21439: GO 23091
// if not range then
21441: LD_VAR 0 4
21445: NOT
21446: IFFALSE 21456
// range := 10 ;
21448: LD_ADDR_VAR 0 4
21452: PUSH
21453: LD_INT 10
21455: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21456: LD_ADDR_VAR 0 8
21460: PUSH
21461: LD_INT 81
21463: PUSH
21464: LD_VAR 0 1
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 92
21475: PUSH
21476: LD_VAR 0 2
21480: PUSH
21481: LD_VAR 0 3
21485: PUSH
21486: LD_VAR 0 4
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 3
21499: PUSH
21500: LD_INT 21
21502: PUSH
21503: LD_INT 3
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: PPUSH
21519: CALL_OW 69
21523: ST_TO_ADDR
// if not tmp then
21524: LD_VAR 0 8
21528: NOT
21529: IFFALSE 21533
// exit ;
21531: GO 23091
// for i in tmp do
21533: LD_ADDR_VAR 0 6
21537: PUSH
21538: LD_VAR 0 8
21542: PUSH
21543: FOR_IN
21544: IFFALSE 23066
// begin points := [ 0 , 0 , 0 ] ;
21546: LD_ADDR_VAR 0 9
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: ST_TO_ADDR
// bpoints := 1 ;
21565: LD_ADDR_VAR 0 10
21569: PUSH
21570: LD_INT 1
21572: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21573: LD_VAR 0 6
21577: PPUSH
21578: CALL_OW 247
21582: PUSH
21583: LD_INT 1
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 22169
21591: POP
// begin if GetClass ( i ) = 1 then
21592: LD_VAR 0 6
21596: PPUSH
21597: CALL_OW 257
21601: PUSH
21602: LD_INT 1
21604: EQUAL
21605: IFFALSE 21626
// points := [ 10 , 5 , 3 ] ;
21607: LD_ADDR_VAR 0 9
21611: PUSH
21612: LD_INT 10
21614: PUSH
21615: LD_INT 5
21617: PUSH
21618: LD_INT 3
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21626: LD_VAR 0 6
21630: PPUSH
21631: CALL_OW 257
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: LD_INT 4
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: IN
21650: IFFALSE 21671
// points := [ 3 , 2 , 1 ] ;
21652: LD_ADDR_VAR 0 9
21656: PUSH
21657: LD_INT 3
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21671: LD_VAR 0 6
21675: PPUSH
21676: CALL_OW 257
21680: PUSH
21681: LD_INT 5
21683: EQUAL
21684: IFFALSE 21705
// points := [ 130 , 5 , 2 ] ;
21686: LD_ADDR_VAR 0 9
21690: PUSH
21691: LD_INT 130
21693: PUSH
21694: LD_INT 5
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21705: LD_VAR 0 6
21709: PPUSH
21710: CALL_OW 257
21714: PUSH
21715: LD_INT 8
21717: EQUAL
21718: IFFALSE 21739
// points := [ 35 , 35 , 30 ] ;
21720: LD_ADDR_VAR 0 9
21724: PUSH
21725: LD_INT 35
21727: PUSH
21728: LD_INT 35
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21739: LD_VAR 0 6
21743: PPUSH
21744: CALL_OW 257
21748: PUSH
21749: LD_INT 9
21751: EQUAL
21752: IFFALSE 21773
// points := [ 20 , 55 , 40 ] ;
21754: LD_ADDR_VAR 0 9
21758: PUSH
21759: LD_INT 20
21761: PUSH
21762: LD_INT 55
21764: PUSH
21765: LD_INT 40
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21773: LD_VAR 0 6
21777: PPUSH
21778: CALL_OW 257
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 16
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: IN
21793: IFFALSE 21814
// points := [ 5 , 3 , 2 ] ;
21795: LD_ADDR_VAR 0 9
21799: PUSH
21800: LD_INT 5
21802: PUSH
21803: LD_INT 3
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21814: LD_VAR 0 6
21818: PPUSH
21819: CALL_OW 257
21823: PUSH
21824: LD_INT 17
21826: EQUAL
21827: IFFALSE 21848
// points := [ 100 , 50 , 75 ] ;
21829: LD_ADDR_VAR 0 9
21833: PUSH
21834: LD_INT 100
21836: PUSH
21837: LD_INT 50
21839: PUSH
21840: LD_INT 75
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21848: LD_VAR 0 6
21852: PPUSH
21853: CALL_OW 257
21857: PUSH
21858: LD_INT 15
21860: EQUAL
21861: IFFALSE 21882
// points := [ 10 , 5 , 3 ] ;
21863: LD_ADDR_VAR 0 9
21867: PUSH
21868: LD_INT 10
21870: PUSH
21871: LD_INT 5
21873: PUSH
21874: LD_INT 3
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21882: LD_VAR 0 6
21886: PPUSH
21887: CALL_OW 257
21891: PUSH
21892: LD_INT 14
21894: EQUAL
21895: IFFALSE 21916
// points := [ 10 , 0 , 0 ] ;
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: LD_INT 10
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21916: LD_VAR 0 6
21920: PPUSH
21921: CALL_OW 257
21925: PUSH
21926: LD_INT 11
21928: EQUAL
21929: IFFALSE 21950
// points := [ 30 , 10 , 5 ] ;
21931: LD_ADDR_VAR 0 9
21935: PUSH
21936: LD_INT 30
21938: PUSH
21939: LD_INT 10
21941: PUSH
21942: LD_INT 5
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21950: LD_VAR 0 1
21954: PPUSH
21955: LD_INT 5
21957: PPUSH
21958: CALL_OW 321
21962: PUSH
21963: LD_INT 2
21965: EQUAL
21966: IFFALSE 21983
// bpoints := bpoints * 1.8 ;
21968: LD_ADDR_VAR 0 10
21972: PUSH
21973: LD_VAR 0 10
21977: PUSH
21978: LD_REAL  1.80000000000000E+0000
21981: MUL
21982: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21983: LD_VAR 0 6
21987: PPUSH
21988: CALL_OW 257
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: LD_INT 4
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: IN
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: LD_INT 51
22019: PPUSH
22020: CALL_OW 321
22024: PUSH
22025: LD_INT 2
22027: EQUAL
22028: AND
22029: IFFALSE 22046
// bpoints := bpoints * 1.2 ;
22031: LD_ADDR_VAR 0 10
22035: PUSH
22036: LD_VAR 0 10
22040: PUSH
22041: LD_REAL  1.20000000000000E+0000
22044: MUL
22045: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22046: LD_VAR 0 6
22050: PPUSH
22051: CALL_OW 257
22055: PUSH
22056: LD_INT 5
22058: PUSH
22059: LD_INT 7
22061: PUSH
22062: LD_INT 9
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: IN
22070: PUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: LD_INT 52
22078: PPUSH
22079: CALL_OW 321
22083: PUSH
22084: LD_INT 2
22086: EQUAL
22087: AND
22088: IFFALSE 22105
// bpoints := bpoints * 1.5 ;
22090: LD_ADDR_VAR 0 10
22094: PUSH
22095: LD_VAR 0 10
22099: PUSH
22100: LD_REAL  1.50000000000000E+0000
22103: MUL
22104: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22105: LD_VAR 0 1
22109: PPUSH
22110: LD_INT 66
22112: PPUSH
22113: CALL_OW 321
22117: PUSH
22118: LD_INT 2
22120: EQUAL
22121: IFFALSE 22138
// bpoints := bpoints * 1.1 ;
22123: LD_ADDR_VAR 0 10
22127: PUSH
22128: LD_VAR 0 10
22132: PUSH
22133: LD_REAL  1.10000000000000E+0000
22136: MUL
22137: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22138: LD_ADDR_VAR 0 10
22142: PUSH
22143: LD_VAR 0 10
22147: PUSH
22148: LD_VAR 0 6
22152: PPUSH
22153: LD_INT 1
22155: PPUSH
22156: CALL_OW 259
22160: PUSH
22161: LD_REAL  1.15000000000000E+0000
22164: MUL
22165: MUL
22166: ST_TO_ADDR
// end ; unit_vehicle :
22167: GO 22995
22169: LD_INT 2
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22983
22177: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22178: LD_VAR 0 6
22182: PPUSH
22183: CALL_OW 264
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 42
22193: PUSH
22194: LD_INT 24
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: IN
22202: IFFALSE 22223
// points := [ 25 , 5 , 3 ] ;
22204: LD_ADDR_VAR 0 9
22208: PUSH
22209: LD_INT 25
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22223: LD_VAR 0 6
22227: PPUSH
22228: CALL_OW 264
22232: PUSH
22233: LD_INT 4
22235: PUSH
22236: LD_INT 43
22238: PUSH
22239: LD_INT 25
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: IN
22247: IFFALSE 22268
// points := [ 40 , 15 , 5 ] ;
22249: LD_ADDR_VAR 0 9
22253: PUSH
22254: LD_INT 40
22256: PUSH
22257: LD_INT 15
22259: PUSH
22260: LD_INT 5
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22268: LD_VAR 0 6
22272: PPUSH
22273: CALL_OW 264
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: LD_INT 23
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: IN
22288: IFFALSE 22309
// points := [ 7 , 25 , 8 ] ;
22290: LD_ADDR_VAR 0 9
22294: PUSH
22295: LD_INT 7
22297: PUSH
22298: LD_INT 25
22300: PUSH
22301: LD_INT 8
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22309: LD_VAR 0 6
22313: PPUSH
22314: CALL_OW 264
22318: PUSH
22319: LD_INT 5
22321: PUSH
22322: LD_INT 27
22324: PUSH
22325: LD_INT 44
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: IN
22333: IFFALSE 22354
// points := [ 14 , 50 , 16 ] ;
22335: LD_ADDR_VAR 0 9
22339: PUSH
22340: LD_INT 14
22342: PUSH
22343: LD_INT 50
22345: PUSH
22346: LD_INT 16
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22354: LD_VAR 0 6
22358: PPUSH
22359: CALL_OW 264
22363: PUSH
22364: LD_INT 6
22366: PUSH
22367: LD_INT 46
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: IN
22374: IFFALSE 22395
// points := [ 32 , 120 , 70 ] ;
22376: LD_ADDR_VAR 0 9
22380: PUSH
22381: LD_INT 32
22383: PUSH
22384: LD_INT 120
22386: PUSH
22387: LD_INT 70
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22395: LD_VAR 0 6
22399: PPUSH
22400: CALL_OW 264
22404: PUSH
22405: LD_INT 7
22407: PUSH
22408: LD_INT 28
22410: PUSH
22411: LD_INT 45
22413: PUSH
22414: LD_INT 92
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: IN
22423: IFFALSE 22444
// points := [ 35 , 20 , 45 ] ;
22425: LD_ADDR_VAR 0 9
22429: PUSH
22430: LD_INT 35
22432: PUSH
22433: LD_INT 20
22435: PUSH
22436: LD_INT 45
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22444: LD_VAR 0 6
22448: PPUSH
22449: CALL_OW 264
22453: PUSH
22454: LD_INT 47
22456: PUSH
22457: EMPTY
22458: LIST
22459: IN
22460: IFFALSE 22481
// points := [ 67 , 45 , 75 ] ;
22462: LD_ADDR_VAR 0 9
22466: PUSH
22467: LD_INT 67
22469: PUSH
22470: LD_INT 45
22472: PUSH
22473: LD_INT 75
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22481: LD_VAR 0 6
22485: PPUSH
22486: CALL_OW 264
22490: PUSH
22491: LD_INT 26
22493: PUSH
22494: EMPTY
22495: LIST
22496: IN
22497: IFFALSE 22518
// points := [ 120 , 30 , 80 ] ;
22499: LD_ADDR_VAR 0 9
22503: PUSH
22504: LD_INT 120
22506: PUSH
22507: LD_INT 30
22509: PUSH
22510: LD_INT 80
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22518: LD_VAR 0 6
22522: PPUSH
22523: CALL_OW 264
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: EMPTY
22532: LIST
22533: IN
22534: IFFALSE 22555
// points := [ 40 , 1 , 1 ] ;
22536: LD_ADDR_VAR 0 9
22540: PUSH
22541: LD_INT 40
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22555: LD_VAR 0 6
22559: PPUSH
22560: CALL_OW 264
22564: PUSH
22565: LD_INT 29
22567: PUSH
22568: EMPTY
22569: LIST
22570: IN
22571: IFFALSE 22592
// points := [ 70 , 200 , 400 ] ;
22573: LD_ADDR_VAR 0 9
22577: PUSH
22578: LD_INT 70
22580: PUSH
22581: LD_INT 200
22583: PUSH
22584: LD_INT 400
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22592: LD_VAR 0 6
22596: PPUSH
22597: CALL_OW 264
22601: PUSH
22602: LD_INT 14
22604: PUSH
22605: LD_INT 53
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: IN
22612: IFFALSE 22633
// points := [ 40 , 10 , 20 ] ;
22614: LD_ADDR_VAR 0 9
22618: PUSH
22619: LD_INT 40
22621: PUSH
22622: LD_INT 10
22624: PUSH
22625: LD_INT 20
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22633: LD_VAR 0 6
22637: PPUSH
22638: CALL_OW 264
22642: PUSH
22643: LD_INT 9
22645: PUSH
22646: EMPTY
22647: LIST
22648: IN
22649: IFFALSE 22670
// points := [ 5 , 70 , 20 ] ;
22651: LD_ADDR_VAR 0 9
22655: PUSH
22656: LD_INT 5
22658: PUSH
22659: LD_INT 70
22661: PUSH
22662: LD_INT 20
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: LIST
22669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22670: LD_VAR 0 6
22674: PPUSH
22675: CALL_OW 264
22679: PUSH
22680: LD_INT 10
22682: PUSH
22683: EMPTY
22684: LIST
22685: IN
22686: IFFALSE 22707
// points := [ 35 , 110 , 70 ] ;
22688: LD_ADDR_VAR 0 9
22692: PUSH
22693: LD_INT 35
22695: PUSH
22696: LD_INT 110
22698: PUSH
22699: LD_INT 70
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22707: LD_VAR 0 6
22711: PPUSH
22712: CALL_OW 265
22716: PUSH
22717: LD_INT 25
22719: EQUAL
22720: IFFALSE 22741
// points := [ 80 , 65 , 100 ] ;
22722: LD_ADDR_VAR 0 9
22726: PUSH
22727: LD_INT 80
22729: PUSH
22730: LD_INT 65
22732: PUSH
22733: LD_INT 100
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22741: LD_VAR 0 6
22745: PPUSH
22746: CALL_OW 263
22750: PUSH
22751: LD_INT 1
22753: EQUAL
22754: IFFALSE 22789
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22756: LD_ADDR_VAR 0 10
22760: PUSH
22761: LD_VAR 0 10
22765: PUSH
22766: LD_VAR 0 6
22770: PPUSH
22771: CALL_OW 311
22775: PPUSH
22776: LD_INT 3
22778: PPUSH
22779: CALL_OW 259
22783: PUSH
22784: LD_INT 4
22786: MUL
22787: MUL
22788: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22789: LD_VAR 0 6
22793: PPUSH
22794: CALL_OW 263
22798: PUSH
22799: LD_INT 2
22801: EQUAL
22802: IFFALSE 22853
// begin j := IsControledBy ( i ) ;
22804: LD_ADDR_VAR 0 7
22808: PUSH
22809: LD_VAR 0 6
22813: PPUSH
22814: CALL_OW 312
22818: ST_TO_ADDR
// if j then
22819: LD_VAR 0 7
22823: IFFALSE 22853
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22825: LD_ADDR_VAR 0 10
22829: PUSH
22830: LD_VAR 0 10
22834: PUSH
22835: LD_VAR 0 7
22839: PPUSH
22840: LD_INT 3
22842: PPUSH
22843: CALL_OW 259
22847: PUSH
22848: LD_INT 3
22850: MUL
22851: MUL
22852: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22853: LD_VAR 0 6
22857: PPUSH
22858: CALL_OW 264
22862: PUSH
22863: LD_INT 5
22865: PUSH
22866: LD_INT 6
22868: PUSH
22869: LD_INT 46
22871: PUSH
22872: LD_INT 44
22874: PUSH
22875: LD_INT 47
22877: PUSH
22878: LD_INT 45
22880: PUSH
22881: LD_INT 28
22883: PUSH
22884: LD_INT 7
22886: PUSH
22887: LD_INT 27
22889: PUSH
22890: LD_INT 29
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: IN
22905: PUSH
22906: LD_VAR 0 1
22910: PPUSH
22911: LD_INT 52
22913: PPUSH
22914: CALL_OW 321
22918: PUSH
22919: LD_INT 2
22921: EQUAL
22922: AND
22923: IFFALSE 22940
// bpoints := bpoints * 1.2 ;
22925: LD_ADDR_VAR 0 10
22929: PUSH
22930: LD_VAR 0 10
22934: PUSH
22935: LD_REAL  1.20000000000000E+0000
22938: MUL
22939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22940: LD_VAR 0 6
22944: PPUSH
22945: CALL_OW 264
22949: PUSH
22950: LD_INT 6
22952: PUSH
22953: LD_INT 46
22955: PUSH
22956: LD_INT 47
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: IN
22964: IFFALSE 22981
// bpoints := bpoints * 1.2 ;
22966: LD_ADDR_VAR 0 10
22970: PUSH
22971: LD_VAR 0 10
22975: PUSH
22976: LD_REAL  1.20000000000000E+0000
22979: MUL
22980: ST_TO_ADDR
// end ; unit_building :
22981: GO 22995
22983: LD_INT 3
22985: DOUBLE
22986: EQUAL
22987: IFTRUE 22991
22989: GO 22994
22991: POP
// ; end ;
22992: GO 22995
22994: POP
// for j = 1 to 3 do
22995: LD_ADDR_VAR 0 7
22999: PUSH
23000: DOUBLE
23001: LD_INT 1
23003: DEC
23004: ST_TO_ADDR
23005: LD_INT 3
23007: PUSH
23008: FOR_TO
23009: IFFALSE 23062
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23011: LD_ADDR_VAR 0 5
23015: PUSH
23016: LD_VAR 0 5
23020: PPUSH
23021: LD_VAR 0 7
23025: PPUSH
23026: LD_VAR 0 5
23030: PUSH
23031: LD_VAR 0 7
23035: ARRAY
23036: PUSH
23037: LD_VAR 0 9
23041: PUSH
23042: LD_VAR 0 7
23046: ARRAY
23047: PUSH
23048: LD_VAR 0 10
23052: MUL
23053: PLUS
23054: PPUSH
23055: CALL_OW 1
23059: ST_TO_ADDR
23060: GO 23008
23062: POP
23063: POP
// end ;
23064: GO 21543
23066: POP
23067: POP
// result := Replace ( result , 4 , tmp ) ;
23068: LD_ADDR_VAR 0 5
23072: PUSH
23073: LD_VAR 0 5
23077: PPUSH
23078: LD_INT 4
23080: PPUSH
23081: LD_VAR 0 8
23085: PPUSH
23086: CALL_OW 1
23090: ST_TO_ADDR
// end ;
23091: LD_VAR 0 5
23095: RET
// export function DangerAtRange ( unit , range ) ; begin
23096: LD_INT 0
23098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23099: LD_ADDR_VAR 0 3
23103: PUSH
23104: LD_VAR 0 1
23108: PPUSH
23109: CALL_OW 255
23113: PPUSH
23114: LD_VAR 0 1
23118: PPUSH
23119: CALL_OW 250
23123: PPUSH
23124: LD_VAR 0 1
23128: PPUSH
23129: CALL_OW 251
23133: PPUSH
23134: LD_VAR 0 2
23138: PPUSH
23139: CALL 21395 0 4
23143: ST_TO_ADDR
// end ;
23144: LD_VAR 0 3
23148: RET
// export function DangerInArea ( side , area ) ; begin
23149: LD_INT 0
23151: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: LD_VAR 0 2
23161: PPUSH
23162: LD_INT 81
23164: PUSH
23165: LD_VAR 0 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PPUSH
23174: CALL_OW 70
23178: ST_TO_ADDR
// end ;
23179: LD_VAR 0 3
23183: RET
// export function IsExtension ( b ) ; begin
23184: LD_INT 0
23186: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23187: LD_ADDR_VAR 0 2
23191: PUSH
23192: LD_VAR 0 1
23196: PUSH
23197: LD_INT 23
23199: PUSH
23200: LD_INT 20
23202: PUSH
23203: LD_INT 22
23205: PUSH
23206: LD_INT 17
23208: PUSH
23209: LD_INT 24
23211: PUSH
23212: LD_INT 21
23214: PUSH
23215: LD_INT 19
23217: PUSH
23218: LD_INT 16
23220: PUSH
23221: LD_INT 25
23223: PUSH
23224: LD_INT 18
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: IN
23239: ST_TO_ADDR
// end ;
23240: LD_VAR 0 2
23244: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23245: LD_INT 0
23247: PPUSH
23248: PPUSH
23249: PPUSH
// result := [ ] ;
23250: LD_ADDR_VAR 0 4
23254: PUSH
23255: EMPTY
23256: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23257: LD_ADDR_VAR 0 5
23261: PUSH
23262: LD_VAR 0 2
23266: PPUSH
23267: LD_INT 21
23269: PUSH
23270: LD_INT 3
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PPUSH
23277: CALL_OW 70
23281: ST_TO_ADDR
// if not tmp then
23282: LD_VAR 0 5
23286: NOT
23287: IFFALSE 23291
// exit ;
23289: GO 23355
// if checkLink then
23291: LD_VAR 0 3
23295: IFFALSE 23345
// begin for i in tmp do
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 5
23306: PUSH
23307: FOR_IN
23308: IFFALSE 23343
// if GetBase ( i ) <> base then
23310: LD_VAR 0 6
23314: PPUSH
23315: CALL_OW 274
23319: PUSH
23320: LD_VAR 0 1
23324: NONEQUAL
23325: IFFALSE 23341
// ComLinkToBase ( base , i ) ;
23327: LD_VAR 0 1
23331: PPUSH
23332: LD_VAR 0 6
23336: PPUSH
23337: CALL_OW 169
23341: GO 23307
23343: POP
23344: POP
// end ; result := tmp ;
23345: LD_ADDR_VAR 0 4
23349: PUSH
23350: LD_VAR 0 5
23354: ST_TO_ADDR
// end ;
23355: LD_VAR 0 4
23359: RET
// export function ComComplete ( units , b ) ; var i ; begin
23360: LD_INT 0
23362: PPUSH
23363: PPUSH
// if not units then
23364: LD_VAR 0 1
23368: NOT
23369: IFFALSE 23373
// exit ;
23371: GO 23463
// for i in units do
23373: LD_ADDR_VAR 0 4
23377: PUSH
23378: LD_VAR 0 1
23382: PUSH
23383: FOR_IN
23384: IFFALSE 23461
// if BuildingStatus ( b ) = bs_build then
23386: LD_VAR 0 2
23390: PPUSH
23391: CALL_OW 461
23395: PUSH
23396: LD_INT 1
23398: EQUAL
23399: IFFALSE 23459
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23401: LD_VAR 0 4
23405: PPUSH
23406: LD_STRING h
23408: PUSH
23409: LD_VAR 0 2
23413: PPUSH
23414: CALL_OW 250
23418: PUSH
23419: LD_VAR 0 2
23423: PPUSH
23424: CALL_OW 251
23428: PUSH
23429: LD_VAR 0 2
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: EMPTY
23453: LIST
23454: PPUSH
23455: CALL_OW 446
23459: GO 23383
23461: POP
23462: POP
// end ;
23463: LD_VAR 0 3
23467: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23468: LD_INT 0
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23476: LD_VAR 0 1
23480: NOT
23481: PUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 263
23491: PUSH
23492: LD_INT 2
23494: NONEQUAL
23495: OR
23496: IFFALSE 23500
// exit ;
23498: GO 23816
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23500: LD_ADDR_VAR 0 6
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 255
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 30
23527: PUSH
23528: LD_INT 36
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 34
23537: PUSH
23538: LD_INT 31
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 69
23558: ST_TO_ADDR
// if not tmp then
23559: LD_VAR 0 6
23563: NOT
23564: IFFALSE 23568
// exit ;
23566: GO 23816
// result := [ ] ;
23568: LD_ADDR_VAR 0 2
23572: PUSH
23573: EMPTY
23574: ST_TO_ADDR
// for i in tmp do
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_VAR 0 6
23584: PUSH
23585: FOR_IN
23586: IFFALSE 23657
// begin t := UnitsInside ( i ) ;
23588: LD_ADDR_VAR 0 4
23592: PUSH
23593: LD_VAR 0 3
23597: PPUSH
23598: CALL_OW 313
23602: ST_TO_ADDR
// if t then
23603: LD_VAR 0 4
23607: IFFALSE 23655
// for j in t do
23609: LD_ADDR_VAR 0 7
23613: PUSH
23614: LD_VAR 0 4
23618: PUSH
23619: FOR_IN
23620: IFFALSE 23653
// result := Replace ( result , result + 1 , j ) ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_VAR 0 2
23631: PPUSH
23632: LD_VAR 0 2
23636: PUSH
23637: LD_INT 1
23639: PLUS
23640: PPUSH
23641: LD_VAR 0 7
23645: PPUSH
23646: CALL_OW 1
23650: ST_TO_ADDR
23651: GO 23619
23653: POP
23654: POP
// end ;
23655: GO 23585
23657: POP
23658: POP
// if not result then
23659: LD_VAR 0 2
23663: NOT
23664: IFFALSE 23668
// exit ;
23666: GO 23816
// mech := result [ 1 ] ;
23668: LD_ADDR_VAR 0 5
23672: PUSH
23673: LD_VAR 0 2
23677: PUSH
23678: LD_INT 1
23680: ARRAY
23681: ST_TO_ADDR
// if result > 1 then
23682: LD_VAR 0 2
23686: PUSH
23687: LD_INT 1
23689: GREATER
23690: IFFALSE 23802
// begin for i = 2 to result do
23692: LD_ADDR_VAR 0 3
23696: PUSH
23697: DOUBLE
23698: LD_INT 2
23700: DEC
23701: ST_TO_ADDR
23702: LD_VAR 0 2
23706: PUSH
23707: FOR_TO
23708: IFFALSE 23800
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23710: LD_ADDR_VAR 0 4
23714: PUSH
23715: LD_VAR 0 2
23719: PUSH
23720: LD_VAR 0 3
23724: ARRAY
23725: PPUSH
23726: LD_INT 3
23728: PPUSH
23729: CALL_OW 259
23733: PUSH
23734: LD_VAR 0 2
23738: PUSH
23739: LD_VAR 0 3
23743: ARRAY
23744: PPUSH
23745: CALL_OW 432
23749: MINUS
23750: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23751: LD_VAR 0 4
23755: PUSH
23756: LD_VAR 0 5
23760: PPUSH
23761: LD_INT 3
23763: PPUSH
23764: CALL_OW 259
23768: PUSH
23769: LD_VAR 0 5
23773: PPUSH
23774: CALL_OW 432
23778: MINUS
23779: GREATEREQUAL
23780: IFFALSE 23798
// mech := result [ i ] ;
23782: LD_ADDR_VAR 0 5
23786: PUSH
23787: LD_VAR 0 2
23791: PUSH
23792: LD_VAR 0 3
23796: ARRAY
23797: ST_TO_ADDR
// end ;
23798: GO 23707
23800: POP
23801: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_VAR 0 5
23811: PPUSH
23812: CALL_OW 135
// end ;
23816: LD_VAR 0 2
23820: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23821: LD_INT 0
23823: PPUSH
23824: PPUSH
23825: PPUSH
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
// result := [ ] ;
23836: LD_ADDR_VAR 0 7
23840: PUSH
23841: EMPTY
23842: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23843: LD_VAR 0 1
23847: PPUSH
23848: CALL_OW 266
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: IN
23863: NOT
23864: IFFALSE 23868
// exit ;
23866: GO 25502
// if name then
23868: LD_VAR 0 3
23872: IFFALSE 23888
// SetBName ( base_dep , name ) ;
23874: LD_VAR 0 1
23878: PPUSH
23879: LD_VAR 0 3
23883: PPUSH
23884: CALL_OW 500
// base := GetBase ( base_dep ) ;
23888: LD_ADDR_VAR 0 15
23892: PUSH
23893: LD_VAR 0 1
23897: PPUSH
23898: CALL_OW 274
23902: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23903: LD_ADDR_VAR 0 16
23907: PUSH
23908: LD_VAR 0 1
23912: PPUSH
23913: CALL_OW 255
23917: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23918: LD_ADDR_VAR 0 17
23922: PUSH
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 248
23932: ST_TO_ADDR
// if sources then
23933: LD_VAR 0 5
23937: IFFALSE 23984
// for i = 1 to 3 do
23939: LD_ADDR_VAR 0 8
23943: PUSH
23944: DOUBLE
23945: LD_INT 1
23947: DEC
23948: ST_TO_ADDR
23949: LD_INT 3
23951: PUSH
23952: FOR_TO
23953: IFFALSE 23982
// AddResourceType ( base , i , sources [ i ] ) ;
23955: LD_VAR 0 15
23959: PPUSH
23960: LD_VAR 0 8
23964: PPUSH
23965: LD_VAR 0 5
23969: PUSH
23970: LD_VAR 0 8
23974: ARRAY
23975: PPUSH
23976: CALL_OW 276
23980: GO 23952
23982: POP
23983: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23984: LD_ADDR_VAR 0 18
23988: PUSH
23989: LD_VAR 0 15
23993: PPUSH
23994: LD_VAR 0 2
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: CALL 23245 0 3
24006: ST_TO_ADDR
// InitHc ;
24007: CALL_OW 19
// InitUc ;
24011: CALL_OW 18
// uc_side := side ;
24015: LD_ADDR_OWVAR 20
24019: PUSH
24020: LD_VAR 0 16
24024: ST_TO_ADDR
// uc_nation := nation ;
24025: LD_ADDR_OWVAR 21
24029: PUSH
24030: LD_VAR 0 17
24034: ST_TO_ADDR
// if buildings then
24035: LD_VAR 0 18
24039: IFFALSE 25361
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24041: LD_ADDR_VAR 0 19
24045: PUSH
24046: LD_VAR 0 18
24050: PPUSH
24051: LD_INT 2
24053: PUSH
24054: LD_INT 30
24056: PUSH
24057: LD_INT 29
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 30
24066: PUSH
24067: LD_INT 30
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 72
24083: ST_TO_ADDR
// if tmp then
24084: LD_VAR 0 19
24088: IFFALSE 24136
// for i in tmp do
24090: LD_ADDR_VAR 0 8
24094: PUSH
24095: LD_VAR 0 19
24099: PUSH
24100: FOR_IN
24101: IFFALSE 24134
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24103: LD_VAR 0 8
24107: PPUSH
24108: CALL_OW 250
24112: PPUSH
24113: LD_VAR 0 8
24117: PPUSH
24118: CALL_OW 251
24122: PPUSH
24123: LD_VAR 0 16
24127: PPUSH
24128: CALL_OW 441
24132: GO 24100
24134: POP
24135: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24136: LD_VAR 0 18
24140: PPUSH
24141: LD_INT 2
24143: PUSH
24144: LD_INT 30
24146: PUSH
24147: LD_INT 32
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 30
24156: PUSH
24157: LD_INT 33
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: PPUSH
24169: CALL_OW 72
24173: IFFALSE 24261
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24175: LD_ADDR_VAR 0 8
24179: PUSH
24180: LD_VAR 0 18
24184: PPUSH
24185: LD_INT 2
24187: PUSH
24188: LD_INT 30
24190: PUSH
24191: LD_INT 32
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 30
24200: PUSH
24201: LD_INT 33
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: PPUSH
24213: CALL_OW 72
24217: PUSH
24218: FOR_IN
24219: IFFALSE 24259
// begin if not GetBWeapon ( i ) then
24221: LD_VAR 0 8
24225: PPUSH
24226: CALL_OW 269
24230: NOT
24231: IFFALSE 24257
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24233: LD_VAR 0 8
24237: PPUSH
24238: LD_VAR 0 8
24242: PPUSH
24243: LD_VAR 0 2
24247: PPUSH
24248: CALL 25507 0 2
24252: PPUSH
24253: CALL_OW 431
// end ;
24257: GO 24218
24259: POP
24260: POP
// end ; for i = 1 to personel do
24261: LD_ADDR_VAR 0 8
24265: PUSH
24266: DOUBLE
24267: LD_INT 1
24269: DEC
24270: ST_TO_ADDR
24271: LD_VAR 0 6
24275: PUSH
24276: FOR_TO
24277: IFFALSE 25341
// begin if i > 4 then
24279: LD_VAR 0 8
24283: PUSH
24284: LD_INT 4
24286: GREATER
24287: IFFALSE 24291
// break ;
24289: GO 25341
// case i of 1 :
24291: LD_VAR 0 8
24295: PUSH
24296: LD_INT 1
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24384
24304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24305: LD_ADDR_VAR 0 12
24309: PUSH
24310: LD_VAR 0 18
24314: PPUSH
24315: LD_INT 22
24317: PUSH
24318: LD_VAR 0 16
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 58
24329: PUSH
24330: EMPTY
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 30
24338: PUSH
24339: LD_INT 32
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 4
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: LD_INT 5
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: PPUSH
24377: CALL_OW 72
24381: ST_TO_ADDR
24382: GO 24606
24384: LD_INT 2
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24454
24392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24393: LD_ADDR_VAR 0 12
24397: PUSH
24398: LD_VAR 0 18
24402: PPUSH
24403: LD_INT 22
24405: PUSH
24406: LD_VAR 0 16
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 30
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 30
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PPUSH
24447: CALL_OW 72
24451: ST_TO_ADDR
24452: GO 24606
24454: LD_INT 3
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24524
24462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24463: LD_ADDR_VAR 0 12
24467: PUSH
24468: LD_VAR 0 18
24472: PPUSH
24473: LD_INT 22
24475: PUSH
24476: LD_VAR 0 16
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: LD_INT 30
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 30
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PPUSH
24517: CALL_OW 72
24521: ST_TO_ADDR
24522: GO 24606
24524: LD_INT 4
24526: DOUBLE
24527: EQUAL
24528: IFTRUE 24532
24530: GO 24605
24532: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24533: LD_ADDR_VAR 0 12
24537: PUSH
24538: LD_VAR 0 18
24542: PPUSH
24543: LD_INT 22
24545: PUSH
24546: LD_VAR 0 16
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 2
24557: PUSH
24558: LD_INT 30
24560: PUSH
24561: LD_INT 6
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 30
24570: PUSH
24571: LD_INT 7
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 30
24580: PUSH
24581: LD_INT 8
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 72
24602: ST_TO_ADDR
24603: GO 24606
24605: POP
// if i = 1 then
24606: LD_VAR 0 8
24610: PUSH
24611: LD_INT 1
24613: EQUAL
24614: IFFALSE 24725
// begin tmp := [ ] ;
24616: LD_ADDR_VAR 0 19
24620: PUSH
24621: EMPTY
24622: ST_TO_ADDR
// for j in f do
24623: LD_ADDR_VAR 0 9
24627: PUSH
24628: LD_VAR 0 12
24632: PUSH
24633: FOR_IN
24634: IFFALSE 24707
// if GetBType ( j ) = b_bunker then
24636: LD_VAR 0 9
24640: PPUSH
24641: CALL_OW 266
24645: PUSH
24646: LD_INT 32
24648: EQUAL
24649: IFFALSE 24676
// tmp := Insert ( tmp , 1 , j ) else
24651: LD_ADDR_VAR 0 19
24655: PUSH
24656: LD_VAR 0 19
24660: PPUSH
24661: LD_INT 1
24663: PPUSH
24664: LD_VAR 0 9
24668: PPUSH
24669: CALL_OW 2
24673: ST_TO_ADDR
24674: GO 24705
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24676: LD_ADDR_VAR 0 19
24680: PUSH
24681: LD_VAR 0 19
24685: PPUSH
24686: LD_VAR 0 19
24690: PUSH
24691: LD_INT 1
24693: PLUS
24694: PPUSH
24695: LD_VAR 0 9
24699: PPUSH
24700: CALL_OW 2
24704: ST_TO_ADDR
24705: GO 24633
24707: POP
24708: POP
// if tmp then
24709: LD_VAR 0 19
24713: IFFALSE 24725
// f := tmp ;
24715: LD_ADDR_VAR 0 12
24719: PUSH
24720: LD_VAR 0 19
24724: ST_TO_ADDR
// end ; x := personel [ i ] ;
24725: LD_ADDR_VAR 0 13
24729: PUSH
24730: LD_VAR 0 6
24734: PUSH
24735: LD_VAR 0 8
24739: ARRAY
24740: ST_TO_ADDR
// if x = - 1 then
24741: LD_VAR 0 13
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: EQUAL
24750: IFFALSE 24959
// begin for j in f do
24752: LD_ADDR_VAR 0 9
24756: PUSH
24757: LD_VAR 0 12
24761: PUSH
24762: FOR_IN
24763: IFFALSE 24955
// repeat InitHc ;
24765: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24769: LD_VAR 0 9
24773: PPUSH
24774: CALL_OW 266
24778: PUSH
24779: LD_INT 5
24781: EQUAL
24782: IFFALSE 24852
// begin if UnitsInside ( j ) < 3 then
24784: LD_VAR 0 9
24788: PPUSH
24789: CALL_OW 313
24793: PUSH
24794: LD_INT 3
24796: LESS
24797: IFFALSE 24833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24799: LD_INT 0
24801: PPUSH
24802: LD_INT 5
24804: PUSH
24805: LD_INT 8
24807: PUSH
24808: LD_INT 9
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: LD_VAR 0 17
24820: ARRAY
24821: PPUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: CALL_OW 380
24831: GO 24850
// PrepareHuman ( false , i , skill ) ;
24833: LD_INT 0
24835: PPUSH
24836: LD_VAR 0 8
24840: PPUSH
24841: LD_VAR 0 4
24845: PPUSH
24846: CALL_OW 380
// end else
24850: GO 24869
// PrepareHuman ( false , i , skill ) ;
24852: LD_INT 0
24854: PPUSH
24855: LD_VAR 0 8
24859: PPUSH
24860: LD_VAR 0 4
24864: PPUSH
24865: CALL_OW 380
// un := CreateHuman ;
24869: LD_ADDR_VAR 0 14
24873: PUSH
24874: CALL_OW 44
24878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24879: LD_ADDR_VAR 0 7
24883: PUSH
24884: LD_VAR 0 7
24888: PPUSH
24889: LD_INT 1
24891: PPUSH
24892: LD_VAR 0 14
24896: PPUSH
24897: CALL_OW 2
24901: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24902: LD_VAR 0 14
24906: PPUSH
24907: LD_VAR 0 9
24911: PPUSH
24912: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24916: LD_VAR 0 9
24920: PPUSH
24921: CALL_OW 313
24925: PUSH
24926: LD_INT 6
24928: EQUAL
24929: PUSH
24930: LD_VAR 0 9
24934: PPUSH
24935: CALL_OW 266
24939: PUSH
24940: LD_INT 32
24942: PUSH
24943: LD_INT 31
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: IN
24950: OR
24951: IFFALSE 24765
24953: GO 24762
24955: POP
24956: POP
// end else
24957: GO 25339
// for j = 1 to x do
24959: LD_ADDR_VAR 0 9
24963: PUSH
24964: DOUBLE
24965: LD_INT 1
24967: DEC
24968: ST_TO_ADDR
24969: LD_VAR 0 13
24973: PUSH
24974: FOR_TO
24975: IFFALSE 25337
// begin InitHc ;
24977: CALL_OW 19
// if not f then
24981: LD_VAR 0 12
24985: NOT
24986: IFFALSE 25075
// begin PrepareHuman ( false , i , skill ) ;
24988: LD_INT 0
24990: PPUSH
24991: LD_VAR 0 8
24995: PPUSH
24996: LD_VAR 0 4
25000: PPUSH
25001: CALL_OW 380
// un := CreateHuman ;
25005: LD_ADDR_VAR 0 14
25009: PUSH
25010: CALL_OW 44
25014: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25015: LD_ADDR_VAR 0 7
25019: PUSH
25020: LD_VAR 0 7
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: LD_VAR 0 14
25032: PPUSH
25033: CALL_OW 2
25037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25038: LD_VAR 0 14
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 250
25052: PPUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL_OW 251
25062: PPUSH
25063: LD_INT 10
25065: PPUSH
25066: LD_INT 0
25068: PPUSH
25069: CALL_OW 50
// continue ;
25073: GO 24974
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25075: LD_VAR 0 12
25079: PUSH
25080: LD_INT 1
25082: ARRAY
25083: PPUSH
25084: CALL_OW 313
25088: PUSH
25089: LD_VAR 0 12
25093: PUSH
25094: LD_INT 1
25096: ARRAY
25097: PPUSH
25098: CALL_OW 266
25102: PUSH
25103: LD_INT 32
25105: PUSH
25106: LD_INT 31
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: IN
25113: AND
25114: PUSH
25115: LD_VAR 0 12
25119: PUSH
25120: LD_INT 1
25122: ARRAY
25123: PPUSH
25124: CALL_OW 313
25128: PUSH
25129: LD_INT 6
25131: EQUAL
25132: OR
25133: IFFALSE 25153
// f := Delete ( f , 1 ) ;
25135: LD_ADDR_VAR 0 12
25139: PUSH
25140: LD_VAR 0 12
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 3
25152: ST_TO_ADDR
// if not f then
25153: LD_VAR 0 12
25157: NOT
25158: IFFALSE 25176
// begin x := x + 2 ;
25160: LD_ADDR_VAR 0 13
25164: PUSH
25165: LD_VAR 0 13
25169: PUSH
25170: LD_INT 2
25172: PLUS
25173: ST_TO_ADDR
// continue ;
25174: GO 24974
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25176: LD_VAR 0 12
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PPUSH
25185: CALL_OW 266
25189: PUSH
25190: LD_INT 5
25192: EQUAL
25193: IFFALSE 25267
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25195: LD_VAR 0 12
25199: PUSH
25200: LD_INT 1
25202: ARRAY
25203: PPUSH
25204: CALL_OW 313
25208: PUSH
25209: LD_INT 3
25211: LESS
25212: IFFALSE 25248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25214: LD_INT 0
25216: PPUSH
25217: LD_INT 5
25219: PUSH
25220: LD_INT 8
25222: PUSH
25223: LD_INT 9
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: PUSH
25231: LD_VAR 0 17
25235: ARRAY
25236: PPUSH
25237: LD_VAR 0 4
25241: PPUSH
25242: CALL_OW 380
25246: GO 25265
// PrepareHuman ( false , i , skill ) ;
25248: LD_INT 0
25250: PPUSH
25251: LD_VAR 0 8
25255: PPUSH
25256: LD_VAR 0 4
25260: PPUSH
25261: CALL_OW 380
// end else
25265: GO 25284
// PrepareHuman ( false , i , skill ) ;
25267: LD_INT 0
25269: PPUSH
25270: LD_VAR 0 8
25274: PPUSH
25275: LD_VAR 0 4
25279: PPUSH
25280: CALL_OW 380
// un := CreateHuman ;
25284: LD_ADDR_VAR 0 14
25288: PUSH
25289: CALL_OW 44
25293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25294: LD_ADDR_VAR 0 7
25298: PUSH
25299: LD_VAR 0 7
25303: PPUSH
25304: LD_INT 1
25306: PPUSH
25307: LD_VAR 0 14
25311: PPUSH
25312: CALL_OW 2
25316: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25317: LD_VAR 0 14
25321: PPUSH
25322: LD_VAR 0 12
25326: PUSH
25327: LD_INT 1
25329: ARRAY
25330: PPUSH
25331: CALL_OW 52
// end ;
25335: GO 24974
25337: POP
25338: POP
// end ;
25339: GO 24276
25341: POP
25342: POP
// result := result ^ buildings ;
25343: LD_ADDR_VAR 0 7
25347: PUSH
25348: LD_VAR 0 7
25352: PUSH
25353: LD_VAR 0 18
25357: ADD
25358: ST_TO_ADDR
// end else
25359: GO 25502
// begin for i = 1 to personel do
25361: LD_ADDR_VAR 0 8
25365: PUSH
25366: DOUBLE
25367: LD_INT 1
25369: DEC
25370: ST_TO_ADDR
25371: LD_VAR 0 6
25375: PUSH
25376: FOR_TO
25377: IFFALSE 25500
// begin if i > 4 then
25379: LD_VAR 0 8
25383: PUSH
25384: LD_INT 4
25386: GREATER
25387: IFFALSE 25391
// break ;
25389: GO 25500
// x := personel [ i ] ;
25391: LD_ADDR_VAR 0 13
25395: PUSH
25396: LD_VAR 0 6
25400: PUSH
25401: LD_VAR 0 8
25405: ARRAY
25406: ST_TO_ADDR
// if x = - 1 then
25407: LD_VAR 0 13
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: EQUAL
25416: IFFALSE 25420
// continue ;
25418: GO 25376
// PrepareHuman ( false , i , skill ) ;
25420: LD_INT 0
25422: PPUSH
25423: LD_VAR 0 8
25427: PPUSH
25428: LD_VAR 0 4
25432: PPUSH
25433: CALL_OW 380
// un := CreateHuman ;
25437: LD_ADDR_VAR 0 14
25441: PUSH
25442: CALL_OW 44
25446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25447: LD_VAR 0 14
25451: PPUSH
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 250
25461: PPUSH
25462: LD_VAR 0 1
25466: PPUSH
25467: CALL_OW 251
25471: PPUSH
25472: LD_INT 10
25474: PPUSH
25475: LD_INT 0
25477: PPUSH
25478: CALL_OW 50
// result := result ^ un ;
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: LD_VAR 0 7
25491: PUSH
25492: LD_VAR 0 14
25496: ADD
25497: ST_TO_ADDR
// end ;
25498: GO 25376
25500: POP
25501: POP
// end ; end ;
25502: LD_VAR 0 7
25506: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25507: LD_INT 0
25509: PPUSH
25510: PPUSH
25511: PPUSH
25512: PPUSH
25513: PPUSH
25514: PPUSH
25515: PPUSH
25516: PPUSH
25517: PPUSH
25518: PPUSH
25519: PPUSH
25520: PPUSH
25521: PPUSH
25522: PPUSH
25523: PPUSH
25524: PPUSH
// result := false ;
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_INT 0
25532: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25533: LD_VAR 0 1
25537: NOT
25538: PUSH
25539: LD_VAR 0 1
25543: PPUSH
25544: CALL_OW 266
25548: PUSH
25549: LD_INT 32
25551: PUSH
25552: LD_INT 33
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: IN
25559: NOT
25560: OR
25561: IFFALSE 25565
// exit ;
25563: GO 26674
// nat := GetNation ( tower ) ;
25565: LD_ADDR_VAR 0 12
25569: PUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 248
25579: ST_TO_ADDR
// side := GetSide ( tower ) ;
25580: LD_ADDR_VAR 0 16
25584: PUSH
25585: LD_VAR 0 1
25589: PPUSH
25590: CALL_OW 255
25594: ST_TO_ADDR
// x := GetX ( tower ) ;
25595: LD_ADDR_VAR 0 10
25599: PUSH
25600: LD_VAR 0 1
25604: PPUSH
25605: CALL_OW 250
25609: ST_TO_ADDR
// y := GetY ( tower ) ;
25610: LD_ADDR_VAR 0 11
25614: PUSH
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 251
25624: ST_TO_ADDR
// if not x or not y then
25625: LD_VAR 0 10
25629: NOT
25630: PUSH
25631: LD_VAR 0 11
25635: NOT
25636: OR
25637: IFFALSE 25641
// exit ;
25639: GO 26674
// weapon := 0 ;
25641: LD_ADDR_VAR 0 18
25645: PUSH
25646: LD_INT 0
25648: ST_TO_ADDR
// fac_list := [ ] ;
25649: LD_ADDR_VAR 0 17
25653: PUSH
25654: EMPTY
25655: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25656: LD_ADDR_VAR 0 6
25660: PUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL_OW 274
25670: PPUSH
25671: LD_VAR 0 2
25675: PPUSH
25676: LD_INT 0
25678: PPUSH
25679: CALL 23245 0 3
25683: PPUSH
25684: LD_INT 30
25686: PUSH
25687: LD_INT 3
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PPUSH
25694: CALL_OW 72
25698: ST_TO_ADDR
// if not factories then
25699: LD_VAR 0 6
25703: NOT
25704: IFFALSE 25708
// exit ;
25706: GO 26674
// for i in factories do
25708: LD_ADDR_VAR 0 8
25712: PUSH
25713: LD_VAR 0 6
25717: PUSH
25718: FOR_IN
25719: IFFALSE 25744
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25721: LD_ADDR_VAR 0 17
25725: PUSH
25726: LD_VAR 0 17
25730: PUSH
25731: LD_VAR 0 8
25735: PPUSH
25736: CALL_OW 478
25740: UNION
25741: ST_TO_ADDR
25742: GO 25718
25744: POP
25745: POP
// if not fac_list then
25746: LD_VAR 0 17
25750: NOT
25751: IFFALSE 25755
// exit ;
25753: GO 26674
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25755: LD_ADDR_VAR 0 5
25759: PUSH
25760: LD_INT 4
25762: PUSH
25763: LD_INT 5
25765: PUSH
25766: LD_INT 9
25768: PUSH
25769: LD_INT 10
25771: PUSH
25772: LD_INT 6
25774: PUSH
25775: LD_INT 7
25777: PUSH
25778: LD_INT 11
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 27
25792: PUSH
25793: LD_INT 28
25795: PUSH
25796: LD_INT 26
25798: PUSH
25799: LD_INT 30
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 43
25810: PUSH
25811: LD_INT 44
25813: PUSH
25814: LD_INT 46
25816: PUSH
25817: LD_INT 45
25819: PUSH
25820: LD_INT 47
25822: PUSH
25823: LD_INT 49
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: PUSH
25839: LD_VAR 0 12
25843: ARRAY
25844: ST_TO_ADDR
// list := list isect fac_list ;
25845: LD_ADDR_VAR 0 5
25849: PUSH
25850: LD_VAR 0 5
25854: PUSH
25855: LD_VAR 0 17
25859: ISECT
25860: ST_TO_ADDR
// if not list then
25861: LD_VAR 0 5
25865: NOT
25866: IFFALSE 25870
// exit ;
25868: GO 26674
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25870: LD_VAR 0 12
25874: PUSH
25875: LD_INT 3
25877: EQUAL
25878: PUSH
25879: LD_INT 49
25881: PUSH
25882: LD_VAR 0 5
25886: IN
25887: AND
25888: PUSH
25889: LD_INT 31
25891: PPUSH
25892: LD_VAR 0 16
25896: PPUSH
25897: CALL_OW 321
25901: PUSH
25902: LD_INT 2
25904: EQUAL
25905: AND
25906: IFFALSE 25966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25908: LD_INT 22
25910: PUSH
25911: LD_VAR 0 16
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 35
25922: PUSH
25923: LD_INT 49
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 91
25932: PUSH
25933: LD_VAR 0 1
25937: PUSH
25938: LD_INT 10
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: PPUSH
25951: CALL_OW 69
25955: NOT
25956: IFFALSE 25966
// weapon := ru_time_lapser ;
25958: LD_ADDR_VAR 0 18
25962: PUSH
25963: LD_INT 49
25965: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25966: LD_VAR 0 12
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: IN
25981: PUSH
25982: LD_INT 11
25984: PUSH
25985: LD_VAR 0 5
25989: IN
25990: PUSH
25991: LD_INT 30
25993: PUSH
25994: LD_VAR 0 5
25998: IN
25999: OR
26000: AND
26001: PUSH
26002: LD_INT 6
26004: PPUSH
26005: LD_VAR 0 16
26009: PPUSH
26010: CALL_OW 321
26014: PUSH
26015: LD_INT 2
26017: EQUAL
26018: AND
26019: IFFALSE 26184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26021: LD_INT 22
26023: PUSH
26024: LD_VAR 0 16
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: LD_INT 35
26038: PUSH
26039: LD_INT 11
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 35
26048: PUSH
26049: LD_INT 30
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 91
26063: PUSH
26064: LD_VAR 0 1
26068: PUSH
26069: LD_INT 18
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: LIST
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: PPUSH
26082: CALL_OW 69
26086: NOT
26087: PUSH
26088: LD_INT 22
26090: PUSH
26091: LD_VAR 0 16
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 30
26105: PUSH
26106: LD_INT 32
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 30
26115: PUSH
26116: LD_INT 33
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 91
26130: PUSH
26131: LD_VAR 0 1
26135: PUSH
26136: LD_INT 12
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: PUSH
26157: LD_INT 2
26159: GREATER
26160: AND
26161: IFFALSE 26184
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26163: LD_ADDR_VAR 0 18
26167: PUSH
26168: LD_INT 11
26170: PUSH
26171: LD_INT 30
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_VAR 0 12
26182: ARRAY
26183: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26184: LD_VAR 0 18
26188: NOT
26189: PUSH
26190: LD_INT 40
26192: PPUSH
26193: LD_VAR 0 16
26197: PPUSH
26198: CALL_OW 321
26202: PUSH
26203: LD_INT 2
26205: EQUAL
26206: AND
26207: PUSH
26208: LD_INT 7
26210: PUSH
26211: LD_VAR 0 5
26215: IN
26216: PUSH
26217: LD_INT 28
26219: PUSH
26220: LD_VAR 0 5
26224: IN
26225: OR
26226: PUSH
26227: LD_INT 45
26229: PUSH
26230: LD_VAR 0 5
26234: IN
26235: OR
26236: AND
26237: IFFALSE 26491
// begin hex := GetHexInfo ( x , y ) ;
26239: LD_ADDR_VAR 0 4
26243: PUSH
26244: LD_VAR 0 10
26248: PPUSH
26249: LD_VAR 0 11
26253: PPUSH
26254: CALL_OW 546
26258: ST_TO_ADDR
// if hex [ 1 ] then
26259: LD_VAR 0 4
26263: PUSH
26264: LD_INT 1
26266: ARRAY
26267: IFFALSE 26271
// exit ;
26269: GO 26674
// height := hex [ 2 ] ;
26271: LD_ADDR_VAR 0 15
26275: PUSH
26276: LD_VAR 0 4
26280: PUSH
26281: LD_INT 2
26283: ARRAY
26284: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26285: LD_ADDR_VAR 0 14
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: LD_INT 3
26298: PUSH
26299: LD_INT 5
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
// for i in tmp do
26308: LD_ADDR_VAR 0 8
26312: PUSH
26313: LD_VAR 0 14
26317: PUSH
26318: FOR_IN
26319: IFFALSE 26489
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26321: LD_ADDR_VAR 0 9
26325: PUSH
26326: LD_VAR 0 10
26330: PPUSH
26331: LD_VAR 0 8
26335: PPUSH
26336: LD_INT 5
26338: PPUSH
26339: CALL_OW 272
26343: PUSH
26344: LD_VAR 0 11
26348: PPUSH
26349: LD_VAR 0 8
26353: PPUSH
26354: LD_INT 5
26356: PPUSH
26357: CALL_OW 273
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26366: LD_VAR 0 9
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PPUSH
26375: LD_VAR 0 9
26379: PUSH
26380: LD_INT 2
26382: ARRAY
26383: PPUSH
26384: CALL_OW 488
26388: IFFALSE 26487
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26390: LD_ADDR_VAR 0 4
26394: PUSH
26395: LD_VAR 0 9
26399: PUSH
26400: LD_INT 1
26402: ARRAY
26403: PPUSH
26404: LD_VAR 0 9
26408: PUSH
26409: LD_INT 2
26411: ARRAY
26412: PPUSH
26413: CALL_OW 546
26417: ST_TO_ADDR
// if hex [ 1 ] then
26418: LD_VAR 0 4
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: IFFALSE 26430
// continue ;
26428: GO 26318
// h := hex [ 2 ] ;
26430: LD_ADDR_VAR 0 13
26434: PUSH
26435: LD_VAR 0 4
26439: PUSH
26440: LD_INT 2
26442: ARRAY
26443: ST_TO_ADDR
// if h + 7 < height then
26444: LD_VAR 0 13
26448: PUSH
26449: LD_INT 7
26451: PLUS
26452: PUSH
26453: LD_VAR 0 15
26457: LESS
26458: IFFALSE 26487
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26460: LD_ADDR_VAR 0 18
26464: PUSH
26465: LD_INT 7
26467: PUSH
26468: LD_INT 28
26470: PUSH
26471: LD_INT 45
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: PUSH
26479: LD_VAR 0 12
26483: ARRAY
26484: ST_TO_ADDR
// break ;
26485: GO 26489
// end ; end ; end ;
26487: GO 26318
26489: POP
26490: POP
// end ; if not weapon then
26491: LD_VAR 0 18
26495: NOT
26496: IFFALSE 26556
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26498: LD_ADDR_VAR 0 5
26502: PUSH
26503: LD_VAR 0 5
26507: PUSH
26508: LD_INT 11
26510: PUSH
26511: LD_INT 30
26513: PUSH
26514: LD_INT 49
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: DIFF
26522: ST_TO_ADDR
// if not list then
26523: LD_VAR 0 5
26527: NOT
26528: IFFALSE 26532
// exit ;
26530: GO 26674
// weapon := list [ rand ( 1 , list ) ] ;
26532: LD_ADDR_VAR 0 18
26536: PUSH
26537: LD_VAR 0 5
26541: PUSH
26542: LD_INT 1
26544: PPUSH
26545: LD_VAR 0 5
26549: PPUSH
26550: CALL_OW 12
26554: ARRAY
26555: ST_TO_ADDR
// end ; if weapon then
26556: LD_VAR 0 18
26560: IFFALSE 26674
// begin tmp := CostOfWeapon ( weapon ) ;
26562: LD_ADDR_VAR 0 14
26566: PUSH
26567: LD_VAR 0 18
26571: PPUSH
26572: CALL_OW 451
26576: ST_TO_ADDR
// j := GetBase ( tower ) ;
26577: LD_ADDR_VAR 0 9
26581: PUSH
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL_OW 274
26591: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26592: LD_VAR 0 9
26596: PPUSH
26597: LD_INT 1
26599: PPUSH
26600: CALL_OW 275
26604: PUSH
26605: LD_VAR 0 14
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: GREATEREQUAL
26614: PUSH
26615: LD_VAR 0 9
26619: PPUSH
26620: LD_INT 2
26622: PPUSH
26623: CALL_OW 275
26627: PUSH
26628: LD_VAR 0 14
26632: PUSH
26633: LD_INT 2
26635: ARRAY
26636: GREATEREQUAL
26637: AND
26638: PUSH
26639: LD_VAR 0 9
26643: PPUSH
26644: LD_INT 3
26646: PPUSH
26647: CALL_OW 275
26651: PUSH
26652: LD_VAR 0 14
26656: PUSH
26657: LD_INT 3
26659: ARRAY
26660: GREATEREQUAL
26661: AND
26662: IFFALSE 26674
// result := weapon ;
26664: LD_ADDR_VAR 0 3
26668: PUSH
26669: LD_VAR 0 18
26673: ST_TO_ADDR
// end ; end ;
26674: LD_VAR 0 3
26678: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26679: LD_INT 0
26681: PPUSH
26682: PPUSH
// result := true ;
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_INT 1
26690: ST_TO_ADDR
// if array1 = array2 then
26691: LD_VAR 0 1
26695: PUSH
26696: LD_VAR 0 2
26700: EQUAL
26701: IFFALSE 26761
// begin for i = 1 to array1 do
26703: LD_ADDR_VAR 0 4
26707: PUSH
26708: DOUBLE
26709: LD_INT 1
26711: DEC
26712: ST_TO_ADDR
26713: LD_VAR 0 1
26717: PUSH
26718: FOR_TO
26719: IFFALSE 26757
// if array1 [ i ] <> array2 [ i ] then
26721: LD_VAR 0 1
26725: PUSH
26726: LD_VAR 0 4
26730: ARRAY
26731: PUSH
26732: LD_VAR 0 2
26736: PUSH
26737: LD_VAR 0 4
26741: ARRAY
26742: NONEQUAL
26743: IFFALSE 26755
// begin result := false ;
26745: LD_ADDR_VAR 0 3
26749: PUSH
26750: LD_INT 0
26752: ST_TO_ADDR
// break ;
26753: GO 26757
// end ;
26755: GO 26718
26757: POP
26758: POP
// end else
26759: GO 26769
// result := false ;
26761: LD_ADDR_VAR 0 3
26765: PUSH
26766: LD_INT 0
26768: ST_TO_ADDR
// end ;
26769: LD_VAR 0 3
26773: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26774: LD_INT 0
26776: PPUSH
26777: PPUSH
// if not array1 or not array2 then
26778: LD_VAR 0 1
26782: NOT
26783: PUSH
26784: LD_VAR 0 2
26788: NOT
26789: OR
26790: IFFALSE 26794
// exit ;
26792: GO 26858
// result := true ;
26794: LD_ADDR_VAR 0 3
26798: PUSH
26799: LD_INT 1
26801: ST_TO_ADDR
// for i = 1 to array1 do
26802: LD_ADDR_VAR 0 4
26806: PUSH
26807: DOUBLE
26808: LD_INT 1
26810: DEC
26811: ST_TO_ADDR
26812: LD_VAR 0 1
26816: PUSH
26817: FOR_TO
26818: IFFALSE 26856
// if array1 [ i ] <> array2 [ i ] then
26820: LD_VAR 0 1
26824: PUSH
26825: LD_VAR 0 4
26829: ARRAY
26830: PUSH
26831: LD_VAR 0 2
26835: PUSH
26836: LD_VAR 0 4
26840: ARRAY
26841: NONEQUAL
26842: IFFALSE 26854
// begin result := false ;
26844: LD_ADDR_VAR 0 3
26848: PUSH
26849: LD_INT 0
26851: ST_TO_ADDR
// break ;
26852: GO 26856
// end ;
26854: GO 26817
26856: POP
26857: POP
// end ;
26858: LD_VAR 0 3
26862: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26863: LD_INT 0
26865: PPUSH
26866: PPUSH
26867: PPUSH
// pom := GetBase ( fac ) ;
26868: LD_ADDR_VAR 0 5
26872: PUSH
26873: LD_VAR 0 1
26877: PPUSH
26878: CALL_OW 274
26882: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26883: LD_ADDR_VAR 0 4
26887: PUSH
26888: LD_VAR 0 2
26892: PUSH
26893: LD_INT 1
26895: ARRAY
26896: PPUSH
26897: LD_VAR 0 2
26901: PUSH
26902: LD_INT 2
26904: ARRAY
26905: PPUSH
26906: LD_VAR 0 2
26910: PUSH
26911: LD_INT 3
26913: ARRAY
26914: PPUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_INT 4
26922: ARRAY
26923: PPUSH
26924: CALL_OW 449
26928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26929: LD_ADDR_VAR 0 3
26933: PUSH
26934: LD_VAR 0 5
26938: PPUSH
26939: LD_INT 1
26941: PPUSH
26942: CALL_OW 275
26946: PUSH
26947: LD_VAR 0 4
26951: PUSH
26952: LD_INT 1
26954: ARRAY
26955: GREATEREQUAL
26956: PUSH
26957: LD_VAR 0 5
26961: PPUSH
26962: LD_INT 2
26964: PPUSH
26965: CALL_OW 275
26969: PUSH
26970: LD_VAR 0 4
26974: PUSH
26975: LD_INT 2
26977: ARRAY
26978: GREATEREQUAL
26979: AND
26980: PUSH
26981: LD_VAR 0 5
26985: PPUSH
26986: LD_INT 3
26988: PPUSH
26989: CALL_OW 275
26993: PUSH
26994: LD_VAR 0 4
26998: PUSH
26999: LD_INT 3
27001: ARRAY
27002: GREATEREQUAL
27003: AND
27004: ST_TO_ADDR
// end ;
27005: LD_VAR 0 3
27009: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27010: LD_INT 0
27012: PPUSH
27013: PPUSH
27014: PPUSH
27015: PPUSH
// pom := GetBase ( building ) ;
27016: LD_ADDR_VAR 0 3
27020: PUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 274
27030: ST_TO_ADDR
// if not pom then
27031: LD_VAR 0 3
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27210
// btype := GetBType ( building ) ;
27040: LD_ADDR_VAR 0 5
27044: PUSH
27045: LD_VAR 0 1
27049: PPUSH
27050: CALL_OW 266
27054: ST_TO_ADDR
// if btype = b_armoury then
27055: LD_VAR 0 5
27059: PUSH
27060: LD_INT 4
27062: EQUAL
27063: IFFALSE 27073
// btype := b_barracks ;
27065: LD_ADDR_VAR 0 5
27069: PUSH
27070: LD_INT 5
27072: ST_TO_ADDR
// if btype = b_depot then
27073: LD_VAR 0 5
27077: PUSH
27078: LD_INT 0
27080: EQUAL
27081: IFFALSE 27091
// btype := b_warehouse ;
27083: LD_ADDR_VAR 0 5
27087: PUSH
27088: LD_INT 1
27090: ST_TO_ADDR
// if btype = b_workshop then
27091: LD_VAR 0 5
27095: PUSH
27096: LD_INT 2
27098: EQUAL
27099: IFFALSE 27109
// btype := b_factory ;
27101: LD_ADDR_VAR 0 5
27105: PUSH
27106: LD_INT 3
27108: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27109: LD_ADDR_VAR 0 4
27113: PUSH
27114: LD_VAR 0 5
27118: PPUSH
27119: LD_VAR 0 1
27123: PPUSH
27124: CALL_OW 248
27128: PPUSH
27129: CALL_OW 450
27133: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27134: LD_ADDR_VAR 0 2
27138: PUSH
27139: LD_VAR 0 3
27143: PPUSH
27144: LD_INT 1
27146: PPUSH
27147: CALL_OW 275
27151: PUSH
27152: LD_VAR 0 4
27156: PUSH
27157: LD_INT 1
27159: ARRAY
27160: GREATEREQUAL
27161: PUSH
27162: LD_VAR 0 3
27166: PPUSH
27167: LD_INT 2
27169: PPUSH
27170: CALL_OW 275
27174: PUSH
27175: LD_VAR 0 4
27179: PUSH
27180: LD_INT 2
27182: ARRAY
27183: GREATEREQUAL
27184: AND
27185: PUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: LD_INT 3
27193: PPUSH
27194: CALL_OW 275
27198: PUSH
27199: LD_VAR 0 4
27203: PUSH
27204: LD_INT 3
27206: ARRAY
27207: GREATEREQUAL
27208: AND
27209: ST_TO_ADDR
// end ;
27210: LD_VAR 0 2
27214: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
27219: PPUSH
// pom := GetBase ( building ) ;
27220: LD_ADDR_VAR 0 4
27224: PUSH
27225: LD_VAR 0 1
27229: PPUSH
27230: CALL_OW 274
27234: ST_TO_ADDR
// if not pom then
27235: LD_VAR 0 4
27239: NOT
27240: IFFALSE 27244
// exit ;
27242: GO 27345
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: LD_VAR 0 2
27253: PPUSH
27254: LD_VAR 0 1
27258: PPUSH
27259: CALL_OW 248
27263: PPUSH
27264: CALL_OW 450
27268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27269: LD_ADDR_VAR 0 3
27273: PUSH
27274: LD_VAR 0 4
27278: PPUSH
27279: LD_INT 1
27281: PPUSH
27282: CALL_OW 275
27286: PUSH
27287: LD_VAR 0 5
27291: PUSH
27292: LD_INT 1
27294: ARRAY
27295: GREATEREQUAL
27296: PUSH
27297: LD_VAR 0 4
27301: PPUSH
27302: LD_INT 2
27304: PPUSH
27305: CALL_OW 275
27309: PUSH
27310: LD_VAR 0 5
27314: PUSH
27315: LD_INT 2
27317: ARRAY
27318: GREATEREQUAL
27319: AND
27320: PUSH
27321: LD_VAR 0 4
27325: PPUSH
27326: LD_INT 3
27328: PPUSH
27329: CALL_OW 275
27333: PUSH
27334: LD_VAR 0 5
27338: PUSH
27339: LD_INT 3
27341: ARRAY
27342: GREATEREQUAL
27343: AND
27344: ST_TO_ADDR
// end ;
27345: LD_VAR 0 3
27349: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
// result := false ;
27363: LD_ADDR_VAR 0 8
27367: PUSH
27368: LD_INT 0
27370: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27371: LD_VAR 0 5
27375: NOT
27376: PUSH
27377: LD_VAR 0 1
27381: NOT
27382: OR
27383: PUSH
27384: LD_VAR 0 2
27388: NOT
27389: OR
27390: PUSH
27391: LD_VAR 0 3
27395: NOT
27396: OR
27397: IFFALSE 27401
// exit ;
27399: GO 28215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27401: LD_ADDR_VAR 0 14
27405: PUSH
27406: LD_VAR 0 1
27410: PPUSH
27411: LD_VAR 0 2
27415: PPUSH
27416: LD_VAR 0 3
27420: PPUSH
27421: LD_VAR 0 4
27425: PPUSH
27426: LD_VAR 0 5
27430: PUSH
27431: LD_INT 1
27433: ARRAY
27434: PPUSH
27435: CALL_OW 248
27439: PPUSH
27440: LD_INT 0
27442: PPUSH
27443: CALL 29448 0 6
27447: ST_TO_ADDR
// if not hexes then
27448: LD_VAR 0 14
27452: NOT
27453: IFFALSE 27457
// exit ;
27455: GO 28215
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27457: LD_ADDR_VAR 0 17
27461: PUSH
27462: LD_VAR 0 5
27466: PPUSH
27467: LD_INT 22
27469: PUSH
27470: LD_VAR 0 13
27474: PPUSH
27475: CALL_OW 255
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: LD_INT 30
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 30
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 72
27520: ST_TO_ADDR
// for i = 1 to hexes do
27521: LD_ADDR_VAR 0 9
27525: PUSH
27526: DOUBLE
27527: LD_INT 1
27529: DEC
27530: ST_TO_ADDR
27531: LD_VAR 0 14
27535: PUSH
27536: FOR_TO
27537: IFFALSE 28213
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27539: LD_ADDR_VAR 0 13
27543: PUSH
27544: LD_VAR 0 14
27548: PUSH
27549: LD_VAR 0 9
27553: ARRAY
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: PPUSH
27559: LD_VAR 0 14
27563: PUSH
27564: LD_VAR 0 9
27568: ARRAY
27569: PUSH
27570: LD_INT 2
27572: ARRAY
27573: PPUSH
27574: CALL_OW 428
27578: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27579: LD_VAR 0 14
27583: PUSH
27584: LD_VAR 0 9
27588: ARRAY
27589: PUSH
27590: LD_INT 1
27592: ARRAY
27593: PPUSH
27594: LD_VAR 0 14
27598: PUSH
27599: LD_VAR 0 9
27603: ARRAY
27604: PUSH
27605: LD_INT 2
27607: ARRAY
27608: PPUSH
27609: CALL_OW 351
27613: PUSH
27614: LD_VAR 0 14
27618: PUSH
27619: LD_VAR 0 9
27623: ARRAY
27624: PUSH
27625: LD_INT 1
27627: ARRAY
27628: PPUSH
27629: LD_VAR 0 14
27633: PUSH
27634: LD_VAR 0 9
27638: ARRAY
27639: PUSH
27640: LD_INT 2
27642: ARRAY
27643: PPUSH
27644: CALL_OW 488
27648: NOT
27649: OR
27650: PUSH
27651: LD_VAR 0 13
27655: PPUSH
27656: CALL_OW 247
27660: PUSH
27661: LD_INT 3
27663: EQUAL
27664: OR
27665: IFFALSE 27671
// exit ;
27667: POP
27668: POP
27669: GO 28215
// if not tmp then
27671: LD_VAR 0 13
27675: NOT
27676: IFFALSE 27680
// continue ;
27678: GO 27536
// result := true ;
27680: LD_ADDR_VAR 0 8
27684: PUSH
27685: LD_INT 1
27687: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27688: LD_VAR 0 6
27692: PUSH
27693: LD_VAR 0 13
27697: PPUSH
27698: CALL_OW 247
27702: PUSH
27703: LD_INT 2
27705: EQUAL
27706: AND
27707: PUSH
27708: LD_VAR 0 13
27712: PPUSH
27713: CALL_OW 263
27717: PUSH
27718: LD_INT 1
27720: EQUAL
27721: AND
27722: IFFALSE 27886
// begin if IsDrivenBy ( tmp ) then
27724: LD_VAR 0 13
27728: PPUSH
27729: CALL_OW 311
27733: IFFALSE 27737
// continue ;
27735: GO 27536
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27737: LD_VAR 0 6
27741: PPUSH
27742: LD_INT 3
27744: PUSH
27745: LD_INT 60
27747: PUSH
27748: EMPTY
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 3
27757: PUSH
27758: LD_INT 55
27760: PUSH
27761: EMPTY
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PPUSH
27772: CALL_OW 72
27776: IFFALSE 27884
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27778: LD_ADDR_VAR 0 18
27782: PUSH
27783: LD_VAR 0 6
27787: PPUSH
27788: LD_INT 3
27790: PUSH
27791: LD_INT 60
27793: PUSH
27794: EMPTY
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: LD_INT 55
27806: PUSH
27807: EMPTY
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 72
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: ST_TO_ADDR
// if IsInUnit ( driver ) then
27827: LD_VAR 0 18
27831: PPUSH
27832: CALL_OW 310
27836: IFFALSE 27847
// ComExit ( driver ) ;
27838: LD_VAR 0 18
27842: PPUSH
27843: CALL 53228 0 1
// AddComEnterUnit ( driver , tmp ) ;
27847: LD_VAR 0 18
27851: PPUSH
27852: LD_VAR 0 13
27856: PPUSH
27857: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27861: LD_VAR 0 18
27865: PPUSH
27866: LD_VAR 0 7
27870: PPUSH
27871: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27875: LD_VAR 0 18
27879: PPUSH
27880: CALL_OW 181
// end ; continue ;
27884: GO 27536
// end ; if not cleaners or not tmp in cleaners then
27886: LD_VAR 0 6
27890: NOT
27891: PUSH
27892: LD_VAR 0 13
27896: PUSH
27897: LD_VAR 0 6
27901: IN
27902: NOT
27903: OR
27904: IFFALSE 28211
// begin if dep then
27906: LD_VAR 0 17
27910: IFFALSE 28046
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27912: LD_ADDR_VAR 0 16
27916: PUSH
27917: LD_VAR 0 17
27921: PUSH
27922: LD_INT 1
27924: ARRAY
27925: PPUSH
27926: CALL_OW 250
27930: PPUSH
27931: LD_VAR 0 17
27935: PUSH
27936: LD_INT 1
27938: ARRAY
27939: PPUSH
27940: CALL_OW 254
27944: PPUSH
27945: LD_INT 5
27947: PPUSH
27948: CALL_OW 272
27952: PUSH
27953: LD_VAR 0 17
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: PPUSH
27962: CALL_OW 251
27966: PPUSH
27967: LD_VAR 0 17
27971: PUSH
27972: LD_INT 1
27974: ARRAY
27975: PPUSH
27976: CALL_OW 254
27980: PPUSH
27981: LD_INT 5
27983: PPUSH
27984: CALL_OW 273
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27993: LD_VAR 0 16
27997: PUSH
27998: LD_INT 1
28000: ARRAY
28001: PPUSH
28002: LD_VAR 0 16
28006: PUSH
28007: LD_INT 2
28009: ARRAY
28010: PPUSH
28011: CALL_OW 488
28015: IFFALSE 28046
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28017: LD_VAR 0 13
28021: PPUSH
28022: LD_VAR 0 16
28026: PUSH
28027: LD_INT 1
28029: ARRAY
28030: PPUSH
28031: LD_VAR 0 16
28035: PUSH
28036: LD_INT 2
28038: ARRAY
28039: PPUSH
28040: CALL_OW 111
// continue ;
28044: GO 27536
// end ; end ; r := GetDir ( tmp ) ;
28046: LD_ADDR_VAR 0 15
28050: PUSH
28051: LD_VAR 0 13
28055: PPUSH
28056: CALL_OW 254
28060: ST_TO_ADDR
// if r = 5 then
28061: LD_VAR 0 15
28065: PUSH
28066: LD_INT 5
28068: EQUAL
28069: IFFALSE 28079
// r := 0 ;
28071: LD_ADDR_VAR 0 15
28075: PUSH
28076: LD_INT 0
28078: ST_TO_ADDR
// for j = r to 5 do
28079: LD_ADDR_VAR 0 10
28083: PUSH
28084: DOUBLE
28085: LD_VAR 0 15
28089: DEC
28090: ST_TO_ADDR
28091: LD_INT 5
28093: PUSH
28094: FOR_TO
28095: IFFALSE 28209
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28097: LD_ADDR_VAR 0 11
28101: PUSH
28102: LD_VAR 0 13
28106: PPUSH
28107: CALL_OW 250
28111: PPUSH
28112: LD_VAR 0 10
28116: PPUSH
28117: LD_INT 2
28119: PPUSH
28120: CALL_OW 272
28124: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28125: LD_ADDR_VAR 0 12
28129: PUSH
28130: LD_VAR 0 13
28134: PPUSH
28135: CALL_OW 251
28139: PPUSH
28140: LD_VAR 0 10
28144: PPUSH
28145: LD_INT 2
28147: PPUSH
28148: CALL_OW 273
28152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28153: LD_VAR 0 11
28157: PPUSH
28158: LD_VAR 0 12
28162: PPUSH
28163: CALL_OW 488
28167: PUSH
28168: LD_VAR 0 11
28172: PPUSH
28173: LD_VAR 0 12
28177: PPUSH
28178: CALL_OW 428
28182: NOT
28183: AND
28184: IFFALSE 28207
// begin ComMoveXY ( tmp , _x , _y ) ;
28186: LD_VAR 0 13
28190: PPUSH
28191: LD_VAR 0 11
28195: PPUSH
28196: LD_VAR 0 12
28200: PPUSH
28201: CALL_OW 111
// break ;
28205: GO 28209
// end ; end ;
28207: GO 28094
28209: POP
28210: POP
// end ; end ;
28211: GO 27536
28213: POP
28214: POP
// end ;
28215: LD_VAR 0 8
28219: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28220: LD_INT 0
28222: PPUSH
// result := true ;
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_INT 1
28230: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28231: LD_VAR 0 2
28235: PUSH
28236: LD_INT 24
28238: DOUBLE
28239: EQUAL
28240: IFTRUE 28250
28242: LD_INT 33
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28275
28250: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28251: LD_ADDR_VAR 0 3
28255: PUSH
28256: LD_INT 32
28258: PPUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: CALL_OW 321
28268: PUSH
28269: LD_INT 2
28271: EQUAL
28272: ST_TO_ADDR
28273: GO 28591
28275: LD_INT 20
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28308
28283: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: LD_INT 6
28291: PPUSH
28292: LD_VAR 0 1
28296: PPUSH
28297: CALL_OW 321
28301: PUSH
28302: LD_INT 2
28304: EQUAL
28305: ST_TO_ADDR
28306: GO 28591
28308: LD_INT 22
28310: DOUBLE
28311: EQUAL
28312: IFTRUE 28322
28314: LD_INT 36
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28347
28322: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28323: LD_ADDR_VAR 0 3
28327: PUSH
28328: LD_INT 15
28330: PPUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 321
28340: PUSH
28341: LD_INT 2
28343: EQUAL
28344: ST_TO_ADDR
28345: GO 28591
28347: LD_INT 30
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28355
28353: GO 28380
28355: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: LD_INT 20
28363: PPUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 321
28373: PUSH
28374: LD_INT 2
28376: EQUAL
28377: ST_TO_ADDR
28378: GO 28591
28380: LD_INT 28
28382: DOUBLE
28383: EQUAL
28384: IFTRUE 28394
28386: LD_INT 21
28388: DOUBLE
28389: EQUAL
28390: IFTRUE 28394
28392: GO 28419
28394: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28395: LD_ADDR_VAR 0 3
28399: PUSH
28400: LD_INT 21
28402: PPUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 321
28412: PUSH
28413: LD_INT 2
28415: EQUAL
28416: ST_TO_ADDR
28417: GO 28591
28419: LD_INT 16
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28452
28427: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 84
28435: PPUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 321
28445: PUSH
28446: LD_INT 2
28448: EQUAL
28449: ST_TO_ADDR
28450: GO 28591
28452: LD_INT 19
28454: DOUBLE
28455: EQUAL
28456: IFTRUE 28466
28458: LD_INT 23
28460: DOUBLE
28461: EQUAL
28462: IFTRUE 28466
28464: GO 28491
28466: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28467: LD_ADDR_VAR 0 3
28471: PUSH
28472: LD_INT 83
28474: PPUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: CALL_OW 321
28484: PUSH
28485: LD_INT 2
28487: EQUAL
28488: ST_TO_ADDR
28489: GO 28591
28491: LD_INT 17
28493: DOUBLE
28494: EQUAL
28495: IFTRUE 28499
28497: GO 28524
28499: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: LD_INT 39
28507: PPUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 321
28517: PUSH
28518: LD_INT 2
28520: EQUAL
28521: ST_TO_ADDR
28522: GO 28591
28524: LD_INT 18
28526: DOUBLE
28527: EQUAL
28528: IFTRUE 28532
28530: GO 28557
28532: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28533: LD_ADDR_VAR 0 3
28537: PUSH
28538: LD_INT 40
28540: PPUSH
28541: LD_VAR 0 1
28545: PPUSH
28546: CALL_OW 321
28550: PUSH
28551: LD_INT 2
28553: EQUAL
28554: ST_TO_ADDR
28555: GO 28591
28557: LD_INT 27
28559: DOUBLE
28560: EQUAL
28561: IFTRUE 28565
28563: GO 28590
28565: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 35
28573: PPUSH
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL_OW 321
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: ST_TO_ADDR
28588: GO 28591
28590: POP
// end ;
28591: LD_VAR 0 3
28595: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
// result := false ;
28609: LD_ADDR_VAR 0 6
28613: PUSH
28614: LD_INT 0
28616: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28617: LD_VAR 0 1
28621: NOT
28622: PUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 266
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: IN
28643: NOT
28644: OR
28645: PUSH
28646: LD_VAR 0 2
28650: NOT
28651: OR
28652: PUSH
28653: LD_VAR 0 5
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 3
28669: PUSH
28670: LD_INT 4
28672: PUSH
28673: LD_INT 5
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: IN
28684: NOT
28685: OR
28686: PUSH
28687: LD_VAR 0 3
28691: PPUSH
28692: LD_VAR 0 4
28696: PPUSH
28697: CALL_OW 488
28701: NOT
28702: OR
28703: IFFALSE 28707
// exit ;
28705: GO 29443
// side := GetSide ( depot ) ;
28707: LD_ADDR_VAR 0 9
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 255
28721: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28722: LD_VAR 0 9
28726: PPUSH
28727: LD_VAR 0 2
28731: PPUSH
28732: CALL 28220 0 2
28736: NOT
28737: IFFALSE 28741
// exit ;
28739: GO 29443
// pom := GetBase ( depot ) ;
28741: LD_ADDR_VAR 0 10
28745: PUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 274
28755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28756: LD_ADDR_VAR 0 11
28760: PUSH
28761: LD_VAR 0 2
28765: PPUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 248
28775: PPUSH
28776: CALL_OW 450
28780: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28781: LD_VAR 0 10
28785: PPUSH
28786: LD_INT 1
28788: PPUSH
28789: CALL_OW 275
28793: PUSH
28794: LD_VAR 0 11
28798: PUSH
28799: LD_INT 1
28801: ARRAY
28802: GREATEREQUAL
28803: PUSH
28804: LD_VAR 0 10
28808: PPUSH
28809: LD_INT 2
28811: PPUSH
28812: CALL_OW 275
28816: PUSH
28817: LD_VAR 0 11
28821: PUSH
28822: LD_INT 2
28824: ARRAY
28825: GREATEREQUAL
28826: AND
28827: PUSH
28828: LD_VAR 0 10
28832: PPUSH
28833: LD_INT 3
28835: PPUSH
28836: CALL_OW 275
28840: PUSH
28841: LD_VAR 0 11
28845: PUSH
28846: LD_INT 3
28848: ARRAY
28849: GREATEREQUAL
28850: AND
28851: NOT
28852: IFFALSE 28856
// exit ;
28854: GO 29443
// if GetBType ( depot ) = b_depot then
28856: LD_VAR 0 1
28860: PPUSH
28861: CALL_OW 266
28865: PUSH
28866: LD_INT 0
28868: EQUAL
28869: IFFALSE 28881
// dist := 28 else
28871: LD_ADDR_VAR 0 14
28875: PUSH
28876: LD_INT 28
28878: ST_TO_ADDR
28879: GO 28889
// dist := 36 ;
28881: LD_ADDR_VAR 0 14
28885: PUSH
28886: LD_INT 36
28888: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_VAR 0 3
28898: PPUSH
28899: LD_VAR 0 4
28903: PPUSH
28904: CALL_OW 297
28908: PUSH
28909: LD_VAR 0 14
28913: GREATER
28914: IFFALSE 28918
// exit ;
28916: GO 29443
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28918: LD_ADDR_VAR 0 12
28922: PUSH
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_VAR 0 3
28932: PPUSH
28933: LD_VAR 0 4
28937: PPUSH
28938: LD_VAR 0 5
28942: PPUSH
28943: LD_VAR 0 1
28947: PPUSH
28948: CALL_OW 248
28952: PPUSH
28953: LD_INT 0
28955: PPUSH
28956: CALL 29448 0 6
28960: ST_TO_ADDR
// if not hexes then
28961: LD_VAR 0 12
28965: NOT
28966: IFFALSE 28970
// exit ;
28968: GO 29443
// hex := GetHexInfo ( x , y ) ;
28970: LD_ADDR_VAR 0 15
28974: PUSH
28975: LD_VAR 0 3
28979: PPUSH
28980: LD_VAR 0 4
28984: PPUSH
28985: CALL_OW 546
28989: ST_TO_ADDR
// if hex [ 1 ] then
28990: LD_VAR 0 15
28994: PUSH
28995: LD_INT 1
28997: ARRAY
28998: IFFALSE 29002
// exit ;
29000: GO 29443
// height := hex [ 2 ] ;
29002: LD_ADDR_VAR 0 13
29006: PUSH
29007: LD_VAR 0 15
29011: PUSH
29012: LD_INT 2
29014: ARRAY
29015: ST_TO_ADDR
// for i = 1 to hexes do
29016: LD_ADDR_VAR 0 7
29020: PUSH
29021: DOUBLE
29022: LD_INT 1
29024: DEC
29025: ST_TO_ADDR
29026: LD_VAR 0 12
29030: PUSH
29031: FOR_TO
29032: IFFALSE 29362
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29034: LD_VAR 0 12
29038: PUSH
29039: LD_VAR 0 7
29043: ARRAY
29044: PUSH
29045: LD_INT 1
29047: ARRAY
29048: PPUSH
29049: LD_VAR 0 12
29053: PUSH
29054: LD_VAR 0 7
29058: ARRAY
29059: PUSH
29060: LD_INT 2
29062: ARRAY
29063: PPUSH
29064: CALL_OW 488
29068: NOT
29069: PUSH
29070: LD_VAR 0 12
29074: PUSH
29075: LD_VAR 0 7
29079: ARRAY
29080: PUSH
29081: LD_INT 1
29083: ARRAY
29084: PPUSH
29085: LD_VAR 0 12
29089: PUSH
29090: LD_VAR 0 7
29094: ARRAY
29095: PUSH
29096: LD_INT 2
29098: ARRAY
29099: PPUSH
29100: CALL_OW 428
29104: PUSH
29105: LD_INT 0
29107: GREATER
29108: OR
29109: PUSH
29110: LD_VAR 0 12
29114: PUSH
29115: LD_VAR 0 7
29119: ARRAY
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: PPUSH
29125: LD_VAR 0 12
29129: PUSH
29130: LD_VAR 0 7
29134: ARRAY
29135: PUSH
29136: LD_INT 2
29138: ARRAY
29139: PPUSH
29140: CALL_OW 351
29144: OR
29145: IFFALSE 29151
// exit ;
29147: POP
29148: POP
29149: GO 29443
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29151: LD_ADDR_VAR 0 8
29155: PUSH
29156: LD_VAR 0 12
29160: PUSH
29161: LD_VAR 0 7
29165: ARRAY
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: PPUSH
29171: LD_VAR 0 12
29175: PUSH
29176: LD_VAR 0 7
29180: ARRAY
29181: PUSH
29182: LD_INT 2
29184: ARRAY
29185: PPUSH
29186: CALL_OW 546
29190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29191: LD_VAR 0 8
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PUSH
29200: LD_VAR 0 8
29204: PUSH
29205: LD_INT 2
29207: ARRAY
29208: PUSH
29209: LD_VAR 0 13
29213: PUSH
29214: LD_INT 2
29216: PLUS
29217: GREATER
29218: OR
29219: PUSH
29220: LD_VAR 0 8
29224: PUSH
29225: LD_INT 2
29227: ARRAY
29228: PUSH
29229: LD_VAR 0 13
29233: PUSH
29234: LD_INT 2
29236: MINUS
29237: LESS
29238: OR
29239: PUSH
29240: LD_VAR 0 8
29244: PUSH
29245: LD_INT 3
29247: ARRAY
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 8
29254: PUSH
29255: LD_INT 9
29257: PUSH
29258: LD_INT 10
29260: PUSH
29261: LD_INT 11
29263: PUSH
29264: LD_INT 12
29266: PUSH
29267: LD_INT 13
29269: PUSH
29270: LD_INT 16
29272: PUSH
29273: LD_INT 17
29275: PUSH
29276: LD_INT 18
29278: PUSH
29279: LD_INT 19
29281: PUSH
29282: LD_INT 20
29284: PUSH
29285: LD_INT 21
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: IN
29303: NOT
29304: OR
29305: PUSH
29306: LD_VAR 0 8
29310: PUSH
29311: LD_INT 5
29313: ARRAY
29314: NOT
29315: OR
29316: PUSH
29317: LD_VAR 0 8
29321: PUSH
29322: LD_INT 6
29324: ARRAY
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 7
29334: PUSH
29335: LD_INT 9
29337: PUSH
29338: LD_INT 10
29340: PUSH
29341: LD_INT 11
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: IN
29352: NOT
29353: OR
29354: IFFALSE 29360
// exit ;
29356: POP
29357: POP
29358: GO 29443
// end ;
29360: GO 29031
29362: POP
29363: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29364: LD_VAR 0 9
29368: PPUSH
29369: LD_VAR 0 3
29373: PPUSH
29374: LD_VAR 0 4
29378: PPUSH
29379: LD_INT 20
29381: PPUSH
29382: CALL 21395 0 4
29386: PUSH
29387: LD_INT 4
29389: ARRAY
29390: IFFALSE 29394
// exit ;
29392: GO 29443
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29394: LD_VAR 0 2
29398: PUSH
29399: LD_INT 29
29401: PUSH
29402: LD_INT 30
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: IN
29409: PUSH
29410: LD_VAR 0 3
29414: PPUSH
29415: LD_VAR 0 4
29419: PPUSH
29420: LD_VAR 0 9
29424: PPUSH
29425: CALL_OW 440
29429: NOT
29430: AND
29431: IFFALSE 29435
// exit ;
29433: GO 29443
// result := true ;
29435: LD_ADDR_VAR 0 6
29439: PUSH
29440: LD_INT 1
29442: ST_TO_ADDR
// end ;
29443: LD_VAR 0 6
29447: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
// result = [ ] ;
29508: LD_ADDR_VAR 0 7
29512: PUSH
29513: EMPTY
29514: ST_TO_ADDR
// temp_list = [ ] ;
29515: LD_ADDR_VAR 0 9
29519: PUSH
29520: EMPTY
29521: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29522: LD_VAR 0 4
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 4
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: IN
29553: NOT
29554: PUSH
29555: LD_VAR 0 1
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: IN
29570: PUSH
29571: LD_VAR 0 5
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 3
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: LIST
29589: IN
29590: NOT
29591: AND
29592: OR
29593: IFFALSE 29597
// exit ;
29595: GO 47988
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29597: LD_VAR 0 1
29601: PUSH
29602: LD_INT 6
29604: PUSH
29605: LD_INT 7
29607: PUSH
29608: LD_INT 8
29610: PUSH
29611: LD_INT 13
29613: PUSH
29614: LD_INT 12
29616: PUSH
29617: LD_INT 15
29619: PUSH
29620: LD_INT 11
29622: PUSH
29623: LD_INT 14
29625: PUSH
29626: LD_INT 10
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: IN
29640: IFFALSE 29650
// btype = b_lab ;
29642: LD_ADDR_VAR 0 1
29646: PUSH
29647: LD_INT 6
29649: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29650: LD_VAR 0 6
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: LD_INT 2
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: IN
29669: NOT
29670: PUSH
29671: LD_VAR 0 1
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 6
29690: PUSH
29691: LD_INT 36
29693: PUSH
29694: LD_INT 4
29696: PUSH
29697: LD_INT 5
29699: PUSH
29700: LD_INT 31
29702: PUSH
29703: LD_INT 32
29705: PUSH
29706: LD_INT 33
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: IN
29722: NOT
29723: PUSH
29724: LD_VAR 0 6
29728: PUSH
29729: LD_INT 1
29731: EQUAL
29732: AND
29733: OR
29734: PUSH
29735: LD_VAR 0 1
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: IN
29750: NOT
29751: PUSH
29752: LD_VAR 0 6
29756: PUSH
29757: LD_INT 2
29759: EQUAL
29760: AND
29761: OR
29762: IFFALSE 29772
// mode = 0 ;
29764: LD_ADDR_VAR 0 6
29768: PUSH
29769: LD_INT 0
29771: ST_TO_ADDR
// case mode of 0 :
29772: LD_VAR 0 6
29776: PUSH
29777: LD_INT 0
29779: DOUBLE
29780: EQUAL
29781: IFTRUE 29785
29783: GO 41238
29785: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29786: LD_ADDR_VAR 0 11
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 2
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29979: LD_ADDR_VAR 0 12
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 2
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 3
30136: NEG
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 3
30147: NEG
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30175: LD_ADDR_VAR 0 13
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: LD_INT 2
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 2
30298: NEG
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: NEG
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: LD_INT 3
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 3
30334: NEG
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 3
30346: NEG
30347: PUSH
30348: LD_INT 3
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30374: LD_ADDR_VAR 0 14
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 3
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30570: LD_ADDR_VAR 0 15
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30763: LD_ADDR_VAR 0 16
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 3
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 3
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30956: LD_ADDR_VAR 0 17
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31186: LD_ADDR_VAR 0 18
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 2
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 2
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31416: LD_ADDR_VAR 0 19
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 2
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31646: LD_ADDR_VAR 0 20
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 0
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 2
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 2
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: LD_INT 2
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31876: LD_ADDR_VAR 0 21
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32106: LD_ADDR_VAR 0 22
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 2
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32336: LD_ADDR_VAR 0 23
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: NEG
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: LD_INT 3
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: LD_INT 3
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32616: LD_ADDR_VAR 0 24
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 3
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32892: LD_ADDR_VAR 0 25
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 2
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: NEG
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: NEG
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33166: LD_ADDR_VAR 0 26
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 2
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33442: LD_ADDR_VAR 0 27
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 3
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 3
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33722: LD_ADDR_VAR 0 28
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: LD_INT 3
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: NEG
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 3
33957: NEG
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 3
33969: NEG
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34004: LD_ADDR_VAR 0 29
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: NEG
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: LD_INT 3
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 3
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 3
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34283: LD_ADDR_VAR 0 30
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 3
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 2
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34561: LD_ADDR_VAR 0 31
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: LD_INT 2
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: LD_INT 3
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 3
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: NEG
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34839: LD_ADDR_VAR 0 32
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: LD_INT 2
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 2
35005: NEG
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: LD_INT 3
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 3
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 3
35082: NEG
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35117: LD_ADDR_VAR 0 33
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 2
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: LD_INT 3
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 3
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 3
35361: NEG
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35396: LD_ADDR_VAR 0 34
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 3
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: NEG
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: NEG
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35676: LD_ADDR_VAR 0 35
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35788: LD_ADDR_VAR 0 36
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35900: LD_ADDR_VAR 0 37
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36012: LD_ADDR_VAR 0 38
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36124: LD_ADDR_VAR 0 39
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 2
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36236: LD_ADDR_VAR 0 40
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36348: LD_ADDR_VAR 0 41
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 3
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: LD_INT 3
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 3
36622: NEG
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 3
36633: NEG
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: NEG
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 3
36657: NEG
36658: PUSH
36659: LD_INT 3
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36698: LD_ADDR_VAR 0 42
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: LD_INT 3
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 3
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 3
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 3
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 3
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: LD_INT 3
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 3
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 3
36995: NEG
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 3
37007: NEG
37008: PUSH
37009: LD_INT 3
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37048: LD_ADDR_VAR 0 43
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 2
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 3
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 3
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 3
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 3
37344: NEG
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 3
37355: NEG
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37396: LD_ADDR_VAR 0 44
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 3
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 3
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 3
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 3
37639: PUSH
37640: LD_INT 3
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: NEG
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 3
37705: NEG
37706: PUSH
37707: LD_INT 3
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37746: LD_ADDR_VAR 0 45
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: NEG
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 3
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 3
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 3
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 3
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 3
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: NEG
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: LD_INT 3
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38096: LD_ADDR_VAR 0 46
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 3
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 3
38392: NEG
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38444: LD_ADDR_VAR 0 47
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38595: LD_ADDR_VAR 0 48
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38742: LD_ADDR_VAR 0 49
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38886: LD_ADDR_VAR 0 50
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39030: LD_ADDR_VAR 0 51
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39177: LD_ADDR_VAR 0 52
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39328: LD_ADDR_VAR 0 53
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39558: LD_ADDR_VAR 0 54
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39788: LD_ADDR_VAR 0 55
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40018: LD_ADDR_VAR 0 56
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40248: LD_ADDR_VAR 0 57
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40478: LD_ADDR_VAR 0 58
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40708: LD_ADDR_VAR 0 59
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40796: LD_ADDR_VAR 0 60
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40884: LD_ADDR_VAR 0 61
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40972: LD_ADDR_VAR 0 62
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41060: LD_ADDR_VAR 0 63
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41148: LD_ADDR_VAR 0 64
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: ST_TO_ADDR
// end ; 1 :
41236: GO 47133
41238: LD_INT 1
41240: DOUBLE
41241: EQUAL
41242: IFTRUE 41246
41244: GO 43869
41246: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41247: LD_ADDR_VAR 0 11
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 3
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41291: LD_ADDR_VAR 0 12
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41332: LD_ADDR_VAR 0 13
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 3
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41372: LD_ADDR_VAR 0 14
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 3
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 3
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41413: LD_ADDR_VAR 0 15
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: NEG
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41457: LD_ADDR_VAR 0 16
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: LD_INT 3
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41503: LD_ADDR_VAR 0 17
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 3
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41547: LD_ADDR_VAR 0 18
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41588: LD_ADDR_VAR 0 19
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41628: LD_ADDR_VAR 0 20
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41669: LD_ADDR_VAR 0 21
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 3
41687: NEG
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41713: LD_ADDR_VAR 0 22
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: LD_INT 3
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 3
41744: NEG
41745: PUSH
41746: LD_INT 3
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: LIST
41758: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41759: LD_ADDR_VAR 0 23
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 3
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 4
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41803: LD_ADDR_VAR 0 24
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 4
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41844: LD_ADDR_VAR 0 25
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 4
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 4
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: LIST
41883: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41884: LD_ADDR_VAR 0 26
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 4
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41925: LD_ADDR_VAR 0 27
41929: PUSH
41930: LD_INT 3
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 4
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41969: LD_ADDR_VAR 0 28
41973: PUSH
41974: LD_INT 3
41976: NEG
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: NEG
41989: PUSH
41990: LD_INT 4
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 4
42000: NEG
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42015: LD_ADDR_VAR 0 29
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: LD_INT 3
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 3
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 4
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 4
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 3
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 5
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 5
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: LD_INT 4
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 6
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 6
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 5
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42170: LD_ADDR_VAR 0 30
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 3
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 4
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 4
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 4
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 5
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 5
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 5
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 6
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 6
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42313: LD_ADDR_VAR 0 31
42317: PUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: LD_INT 3
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 4
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 4
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: LD_INT 4
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 5
42380: PUSH
42381: LD_INT 4
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 5
42390: PUSH
42391: LD_INT 5
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 4
42400: PUSH
42401: LD_INT 5
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 6
42410: PUSH
42411: LD_INT 5
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 6
42420: PUSH
42421: LD_INT 6
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 5
42430: PUSH
42431: LD_INT 6
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42452: LD_ADDR_VAR 0 32
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 4
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 4
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 5
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 5
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 4
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 6
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 6
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 5
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42595: LD_ADDR_VAR 0 33
42599: PUSH
42600: LD_INT 2
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 3
42613: NEG
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 3
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 3
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 4
42647: NEG
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 4
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 4
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 5
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 5
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 5
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 6
42715: NEG
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 6
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42750: LD_ADDR_VAR 0 34
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: NEG
42782: PUSH
42783: LD_INT 3
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: NEG
42794: PUSH
42795: LD_INT 4
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 4
42805: NEG
42806: PUSH
42807: LD_INT 3
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 4
42817: NEG
42818: PUSH
42819: LD_INT 4
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 4
42829: NEG
42830: PUSH
42831: LD_INT 5
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 5
42841: NEG
42842: PUSH
42843: LD_INT 4
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 5
42853: NEG
42854: PUSH
42855: LD_INT 5
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 5
42865: NEG
42866: PUSH
42867: LD_INT 6
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 6
42877: NEG
42878: PUSH
42879: LD_INT 5
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 6
42889: NEG
42890: PUSH
42891: LD_INT 6
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42913: LD_ADDR_VAR 0 41
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42957: LD_ADDR_VAR 0 42
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42998: LD_ADDR_VAR 0 43
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 3
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43038: LD_ADDR_VAR 0 44
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43079: LD_ADDR_VAR 0 45
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43123: LD_ADDR_VAR 0 46
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: LD_INT 3
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43169: LD_ADDR_VAR 0 47
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43202: LD_ADDR_VAR 0 48
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43233: LD_ADDR_VAR 0 49
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43262: LD_ADDR_VAR 0 50
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43291: LD_ADDR_VAR 0 51
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43322: LD_ADDR_VAR 0 52
43326: PUSH
43327: LD_INT 3
43329: NEG
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43355: LD_ADDR_VAR 0 53
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 3
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43399: LD_ADDR_VAR 0 54
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43440: LD_ADDR_VAR 0 55
43444: PUSH
43445: LD_INT 3
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 3
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43480: LD_ADDR_VAR 0 56
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43521: LD_ADDR_VAR 0 57
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43565: LD_ADDR_VAR 0 58
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 3
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43611: LD_ADDR_VAR 0 59
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43655: LD_ADDR_VAR 0 60
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43696: LD_ADDR_VAR 0 61
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43736: LD_ADDR_VAR 0 62
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43777: LD_ADDR_VAR 0 63
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43821: LD_ADDR_VAR 0 64
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// end ; 2 :
43867: GO 47133
43869: LD_INT 2
43871: DOUBLE
43872: EQUAL
43873: IFTRUE 43877
43875: GO 47132
43877: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43878: LD_ADDR_VAR 0 29
43882: PUSH
43883: LD_INT 4
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 4
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 5
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 4
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 3
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 5
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 4
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 4
44008: PUSH
44009: LD_INT 4
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 4
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 4
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 4
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 4
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 5
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 4
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 4
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 4
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 4
44263: NEG
44264: PUSH
44265: LD_INT 4
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 4
44275: NEG
44276: PUSH
44277: LD_INT 5
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: NEG
44288: PUSH
44289: LD_INT 4
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: LD_INT 3
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 4
44311: NEG
44312: PUSH
44313: LD_INT 3
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 5
44323: NEG
44324: PUSH
44325: LD_INT 4
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 5
44335: NEG
44336: PUSH
44337: LD_INT 5
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 3
44347: NEG
44348: PUSH
44349: LD_INT 5
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 5
44359: NEG
44360: PUSH
44361: LD_INT 3
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44416: LD_ADDR_VAR 0 30
44420: PUSH
44421: LD_INT 4
44423: PUSH
44424: LD_INT 4
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 4
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 5
44443: PUSH
44444: LD_INT 4
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 5
44453: PUSH
44454: LD_INT 5
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 4
44463: PUSH
44464: LD_INT 5
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: LD_INT 4
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 5
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: LD_INT 5
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 3
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 4
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 4
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 4
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 4
44606: NEG
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 4
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 3
44629: NEG
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 4
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 5
44662: NEG
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 5
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 5
44685: NEG
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: LD_INT 3
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 3
44720: NEG
44721: PUSH
44722: LD_INT 4
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 4
44768: NEG
44769: PUSH
44770: LD_INT 3
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 4
44780: NEG
44781: PUSH
44782: LD_INT 4
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 4
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 4
44804: NEG
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 4
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 5
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 4
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 3
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 3
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 4
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 5
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 3
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 5
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44963: LD_ADDR_VAR 0 31
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 4
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 4
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 5
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 5
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 3
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 3
45063: NEG
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 3
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 4
45119: NEG
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 4
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 4
45142: NEG
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 4
45165: NEG
45166: PUSH
45167: LD_INT 4
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 4
45177: NEG
45178: PUSH
45179: LD_INT 5
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: LD_INT 4
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: NEG
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 4
45213: NEG
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 5
45225: NEG
45226: PUSH
45227: LD_INT 4
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 5
45237: NEG
45238: PUSH
45239: LD_INT 5
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: NEG
45250: PUSH
45251: LD_INT 5
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 5
45261: NEG
45262: PUSH
45263: LD_INT 3
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 3
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 4
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 3
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 4
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 4
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 4
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 4
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 5
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 5
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 5
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45513: LD_ADDR_VAR 0 32
45517: PUSH
45518: LD_INT 4
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 4
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 4
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 5
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 5
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 5
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 3
45611: NEG
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: LD_INT 3
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 4
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 3
45670: NEG
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 4
45682: NEG
45683: PUSH
45684: LD_INT 3
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 4
45694: NEG
45695: PUSH
45696: LD_INT 4
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 4
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 4
45718: NEG
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 4
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 5
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 4
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 3
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 4
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 5
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 3
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 5
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 4
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 4
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 4
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 4
45925: PUSH
45926: LD_INT 4
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 4
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 5
45945: PUSH
45946: LD_INT 4
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 5
45955: PUSH
45956: LD_INT 5
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 4
45965: PUSH
45966: LD_INT 5
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: LD_INT 4
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 3
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 5
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 5
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46060: LD_ADDR_VAR 0 33
46064: PUSH
46065: LD_INT 4
46067: NEG
46068: PUSH
46069: LD_INT 4
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: LD_INT 5
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: LD_INT 4
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 4
46115: NEG
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 5
46127: NEG
46128: PUSH
46129: LD_INT 4
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 5
46139: NEG
46140: PUSH
46141: LD_INT 5
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 5
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 5
46163: NEG
46164: PUSH
46165: LD_INT 3
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 4
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 4
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 4
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 4
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 4
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 5
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 5
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 4
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 5
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 4
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 4
46400: PUSH
46401: LD_INT 4
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 4
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 4
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 4
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 5
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 5
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 4
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 5
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 3
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46598: LD_ADDR_VAR 0 34
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 4
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 5
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 4
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 3
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 4
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 5
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 3
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 5
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 4
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 4
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 4
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 5
46820: PUSH
46821: LD_INT 4
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 5
46830: PUSH
46831: LD_INT 5
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 4
46840: PUSH
46841: LD_INT 5
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 4
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 5
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 5
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 4
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 4
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: LD_INT 4
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 4
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 4
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 5
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 5
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 5
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// end ; end ;
47130: GO 47133
47132: POP
// case btype of b_depot , b_warehouse :
47133: LD_VAR 0 1
47137: PUSH
47138: LD_INT 0
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47152
47144: LD_INT 1
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47152
47150: GO 47353
47152: POP
// case nation of nation_american :
47153: LD_VAR 0 5
47157: PUSH
47158: LD_INT 1
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47166
47164: GO 47222
47166: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47167: LD_ADDR_VAR 0 9
47171: PUSH
47172: LD_VAR 0 11
47176: PUSH
47177: LD_VAR 0 12
47181: PUSH
47182: LD_VAR 0 13
47186: PUSH
47187: LD_VAR 0 14
47191: PUSH
47192: LD_VAR 0 15
47196: PUSH
47197: LD_VAR 0 16
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: LD_VAR 0 4
47214: PUSH
47215: LD_INT 1
47217: PLUS
47218: ARRAY
47219: ST_TO_ADDR
47220: GO 47351
47222: LD_INT 2
47224: DOUBLE
47225: EQUAL
47226: IFTRUE 47230
47228: GO 47286
47230: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47231: LD_ADDR_VAR 0 9
47235: PUSH
47236: LD_VAR 0 17
47240: PUSH
47241: LD_VAR 0 18
47245: PUSH
47246: LD_VAR 0 19
47250: PUSH
47251: LD_VAR 0 20
47255: PUSH
47256: LD_VAR 0 21
47260: PUSH
47261: LD_VAR 0 22
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: PUSH
47274: LD_VAR 0 4
47278: PUSH
47279: LD_INT 1
47281: PLUS
47282: ARRAY
47283: ST_TO_ADDR
47284: GO 47351
47286: LD_INT 3
47288: DOUBLE
47289: EQUAL
47290: IFTRUE 47294
47292: GO 47350
47294: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47295: LD_ADDR_VAR 0 9
47299: PUSH
47300: LD_VAR 0 23
47304: PUSH
47305: LD_VAR 0 24
47309: PUSH
47310: LD_VAR 0 25
47314: PUSH
47315: LD_VAR 0 26
47319: PUSH
47320: LD_VAR 0 27
47324: PUSH
47325: LD_VAR 0 28
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: PUSH
47338: LD_VAR 0 4
47342: PUSH
47343: LD_INT 1
47345: PLUS
47346: ARRAY
47347: ST_TO_ADDR
47348: GO 47351
47350: POP
47351: GO 47906
47353: LD_INT 2
47355: DOUBLE
47356: EQUAL
47357: IFTRUE 47367
47359: LD_INT 3
47361: DOUBLE
47362: EQUAL
47363: IFTRUE 47367
47365: GO 47423
47367: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47368: LD_ADDR_VAR 0 9
47372: PUSH
47373: LD_VAR 0 29
47377: PUSH
47378: LD_VAR 0 30
47382: PUSH
47383: LD_VAR 0 31
47387: PUSH
47388: LD_VAR 0 32
47392: PUSH
47393: LD_VAR 0 33
47397: PUSH
47398: LD_VAR 0 34
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: PUSH
47411: LD_VAR 0 4
47415: PUSH
47416: LD_INT 1
47418: PLUS
47419: ARRAY
47420: ST_TO_ADDR
47421: GO 47906
47423: LD_INT 16
47425: DOUBLE
47426: EQUAL
47427: IFTRUE 47485
47429: LD_INT 17
47431: DOUBLE
47432: EQUAL
47433: IFTRUE 47485
47435: LD_INT 18
47437: DOUBLE
47438: EQUAL
47439: IFTRUE 47485
47441: LD_INT 19
47443: DOUBLE
47444: EQUAL
47445: IFTRUE 47485
47447: LD_INT 22
47449: DOUBLE
47450: EQUAL
47451: IFTRUE 47485
47453: LD_INT 20
47455: DOUBLE
47456: EQUAL
47457: IFTRUE 47485
47459: LD_INT 21
47461: DOUBLE
47462: EQUAL
47463: IFTRUE 47485
47465: LD_INT 23
47467: DOUBLE
47468: EQUAL
47469: IFTRUE 47485
47471: LD_INT 24
47473: DOUBLE
47474: EQUAL
47475: IFTRUE 47485
47477: LD_INT 25
47479: DOUBLE
47480: EQUAL
47481: IFTRUE 47485
47483: GO 47541
47485: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47486: LD_ADDR_VAR 0 9
47490: PUSH
47491: LD_VAR 0 35
47495: PUSH
47496: LD_VAR 0 36
47500: PUSH
47501: LD_VAR 0 37
47505: PUSH
47506: LD_VAR 0 38
47510: PUSH
47511: LD_VAR 0 39
47515: PUSH
47516: LD_VAR 0 40
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: PUSH
47529: LD_VAR 0 4
47533: PUSH
47534: LD_INT 1
47536: PLUS
47537: ARRAY
47538: ST_TO_ADDR
47539: GO 47906
47541: LD_INT 6
47543: DOUBLE
47544: EQUAL
47545: IFTRUE 47597
47547: LD_INT 7
47549: DOUBLE
47550: EQUAL
47551: IFTRUE 47597
47553: LD_INT 8
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47597
47559: LD_INT 13
47561: DOUBLE
47562: EQUAL
47563: IFTRUE 47597
47565: LD_INT 12
47567: DOUBLE
47568: EQUAL
47569: IFTRUE 47597
47571: LD_INT 15
47573: DOUBLE
47574: EQUAL
47575: IFTRUE 47597
47577: LD_INT 11
47579: DOUBLE
47580: EQUAL
47581: IFTRUE 47597
47583: LD_INT 14
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47597
47589: LD_INT 10
47591: DOUBLE
47592: EQUAL
47593: IFTRUE 47597
47595: GO 47653
47597: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47598: LD_ADDR_VAR 0 9
47602: PUSH
47603: LD_VAR 0 41
47607: PUSH
47608: LD_VAR 0 42
47612: PUSH
47613: LD_VAR 0 43
47617: PUSH
47618: LD_VAR 0 44
47622: PUSH
47623: LD_VAR 0 45
47627: PUSH
47628: LD_VAR 0 46
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: PUSH
47641: LD_VAR 0 4
47645: PUSH
47646: LD_INT 1
47648: PLUS
47649: ARRAY
47650: ST_TO_ADDR
47651: GO 47906
47653: LD_INT 36
47655: DOUBLE
47656: EQUAL
47657: IFTRUE 47661
47659: GO 47717
47661: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47662: LD_ADDR_VAR 0 9
47666: PUSH
47667: LD_VAR 0 47
47671: PUSH
47672: LD_VAR 0 48
47676: PUSH
47677: LD_VAR 0 49
47681: PUSH
47682: LD_VAR 0 50
47686: PUSH
47687: LD_VAR 0 51
47691: PUSH
47692: LD_VAR 0 52
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: PUSH
47705: LD_VAR 0 4
47709: PUSH
47710: LD_INT 1
47712: PLUS
47713: ARRAY
47714: ST_TO_ADDR
47715: GO 47906
47717: LD_INT 4
47719: DOUBLE
47720: EQUAL
47721: IFTRUE 47743
47723: LD_INT 5
47725: DOUBLE
47726: EQUAL
47727: IFTRUE 47743
47729: LD_INT 34
47731: DOUBLE
47732: EQUAL
47733: IFTRUE 47743
47735: LD_INT 37
47737: DOUBLE
47738: EQUAL
47739: IFTRUE 47743
47741: GO 47799
47743: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47744: LD_ADDR_VAR 0 9
47748: PUSH
47749: LD_VAR 0 53
47753: PUSH
47754: LD_VAR 0 54
47758: PUSH
47759: LD_VAR 0 55
47763: PUSH
47764: LD_VAR 0 56
47768: PUSH
47769: LD_VAR 0 57
47773: PUSH
47774: LD_VAR 0 58
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: PUSH
47787: LD_VAR 0 4
47791: PUSH
47792: LD_INT 1
47794: PLUS
47795: ARRAY
47796: ST_TO_ADDR
47797: GO 47906
47799: LD_INT 31
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47849
47805: LD_INT 32
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47849
47811: LD_INT 33
47813: DOUBLE
47814: EQUAL
47815: IFTRUE 47849
47817: LD_INT 27
47819: DOUBLE
47820: EQUAL
47821: IFTRUE 47849
47823: LD_INT 26
47825: DOUBLE
47826: EQUAL
47827: IFTRUE 47849
47829: LD_INT 28
47831: DOUBLE
47832: EQUAL
47833: IFTRUE 47849
47835: LD_INT 29
47837: DOUBLE
47838: EQUAL
47839: IFTRUE 47849
47841: LD_INT 30
47843: DOUBLE
47844: EQUAL
47845: IFTRUE 47849
47847: GO 47905
47849: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47850: LD_ADDR_VAR 0 9
47854: PUSH
47855: LD_VAR 0 59
47859: PUSH
47860: LD_VAR 0 60
47864: PUSH
47865: LD_VAR 0 61
47869: PUSH
47870: LD_VAR 0 62
47874: PUSH
47875: LD_VAR 0 63
47879: PUSH
47880: LD_VAR 0 64
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: PUSH
47893: LD_VAR 0 4
47897: PUSH
47898: LD_INT 1
47900: PLUS
47901: ARRAY
47902: ST_TO_ADDR
47903: GO 47906
47905: POP
// temp_list2 = [ ] ;
47906: LD_ADDR_VAR 0 10
47910: PUSH
47911: EMPTY
47912: ST_TO_ADDR
// for i in temp_list do
47913: LD_ADDR_VAR 0 8
47917: PUSH
47918: LD_VAR 0 9
47922: PUSH
47923: FOR_IN
47924: IFFALSE 47976
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47926: LD_ADDR_VAR 0 10
47930: PUSH
47931: LD_VAR 0 10
47935: PUSH
47936: LD_VAR 0 8
47940: PUSH
47941: LD_INT 1
47943: ARRAY
47944: PUSH
47945: LD_VAR 0 2
47949: PLUS
47950: PUSH
47951: LD_VAR 0 8
47955: PUSH
47956: LD_INT 2
47958: ARRAY
47959: PUSH
47960: LD_VAR 0 3
47964: PLUS
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: EMPTY
47971: LIST
47972: ADD
47973: ST_TO_ADDR
47974: GO 47923
47976: POP
47977: POP
// result = temp_list2 ;
47978: LD_ADDR_VAR 0 7
47982: PUSH
47983: LD_VAR 0 10
47987: ST_TO_ADDR
// end ;
47988: LD_VAR 0 7
47992: RET
// export function EnemyInRange ( unit , dist ) ; begin
47993: LD_INT 0
47995: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47996: LD_ADDR_VAR 0 3
48000: PUSH
48001: LD_VAR 0 1
48005: PPUSH
48006: CALL_OW 255
48010: PPUSH
48011: LD_VAR 0 1
48015: PPUSH
48016: CALL_OW 250
48020: PPUSH
48021: LD_VAR 0 1
48025: PPUSH
48026: CALL_OW 251
48030: PPUSH
48031: LD_VAR 0 2
48035: PPUSH
48036: CALL 21395 0 4
48040: PUSH
48041: LD_INT 4
48043: ARRAY
48044: ST_TO_ADDR
// end ;
48045: LD_VAR 0 3
48049: RET
// export function PlayerSeeMe ( unit ) ; begin
48050: LD_INT 0
48052: PPUSH
// result := See ( your_side , unit ) ;
48053: LD_ADDR_VAR 0 2
48057: PUSH
48058: LD_OWVAR 2
48062: PPUSH
48063: LD_VAR 0 1
48067: PPUSH
48068: CALL_OW 292
48072: ST_TO_ADDR
// end ;
48073: LD_VAR 0 2
48077: RET
// export function ReverseDir ( unit ) ; begin
48078: LD_INT 0
48080: PPUSH
// if not unit then
48081: LD_VAR 0 1
48085: NOT
48086: IFFALSE 48090
// exit ;
48088: GO 48113
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48090: LD_ADDR_VAR 0 2
48094: PUSH
48095: LD_VAR 0 1
48099: PPUSH
48100: CALL_OW 254
48104: PUSH
48105: LD_INT 3
48107: PLUS
48108: PUSH
48109: LD_INT 6
48111: MOD
48112: ST_TO_ADDR
// end ;
48113: LD_VAR 0 2
48117: RET
// export function ReverseArray ( array ) ; var i ; begin
48118: LD_INT 0
48120: PPUSH
48121: PPUSH
// if not array then
48122: LD_VAR 0 1
48126: NOT
48127: IFFALSE 48131
// exit ;
48129: GO 48186
// result := [ ] ;
48131: LD_ADDR_VAR 0 2
48135: PUSH
48136: EMPTY
48137: ST_TO_ADDR
// for i := array downto 1 do
48138: LD_ADDR_VAR 0 3
48142: PUSH
48143: DOUBLE
48144: LD_VAR 0 1
48148: INC
48149: ST_TO_ADDR
48150: LD_INT 1
48152: PUSH
48153: FOR_DOWNTO
48154: IFFALSE 48184
// result := Join ( result , array [ i ] ) ;
48156: LD_ADDR_VAR 0 2
48160: PUSH
48161: LD_VAR 0 2
48165: PPUSH
48166: LD_VAR 0 1
48170: PUSH
48171: LD_VAR 0 3
48175: ARRAY
48176: PPUSH
48177: CALL 52830 0 2
48181: ST_TO_ADDR
48182: GO 48153
48184: POP
48185: POP
// end ;
48186: LD_VAR 0 2
48190: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48191: LD_INT 0
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
// if not unit or not hexes then
48199: LD_VAR 0 1
48203: NOT
48204: PUSH
48205: LD_VAR 0 2
48209: NOT
48210: OR
48211: IFFALSE 48215
// exit ;
48213: GO 48338
// dist := 9999 ;
48215: LD_ADDR_VAR 0 5
48219: PUSH
48220: LD_INT 9999
48222: ST_TO_ADDR
// for i = 1 to hexes do
48223: LD_ADDR_VAR 0 4
48227: PUSH
48228: DOUBLE
48229: LD_INT 1
48231: DEC
48232: ST_TO_ADDR
48233: LD_VAR 0 2
48237: PUSH
48238: FOR_TO
48239: IFFALSE 48326
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48241: LD_ADDR_VAR 0 6
48245: PUSH
48246: LD_VAR 0 1
48250: PPUSH
48251: LD_VAR 0 2
48255: PUSH
48256: LD_VAR 0 4
48260: ARRAY
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: PPUSH
48266: LD_VAR 0 2
48270: PUSH
48271: LD_VAR 0 4
48275: ARRAY
48276: PUSH
48277: LD_INT 2
48279: ARRAY
48280: PPUSH
48281: CALL_OW 297
48285: ST_TO_ADDR
// if tdist < dist then
48286: LD_VAR 0 6
48290: PUSH
48291: LD_VAR 0 5
48295: LESS
48296: IFFALSE 48324
// begin hex := hexes [ i ] ;
48298: LD_ADDR_VAR 0 8
48302: PUSH
48303: LD_VAR 0 2
48307: PUSH
48308: LD_VAR 0 4
48312: ARRAY
48313: ST_TO_ADDR
// dist := tdist ;
48314: LD_ADDR_VAR 0 5
48318: PUSH
48319: LD_VAR 0 6
48323: ST_TO_ADDR
// end ; end ;
48324: GO 48238
48326: POP
48327: POP
// result := hex ;
48328: LD_ADDR_VAR 0 3
48332: PUSH
48333: LD_VAR 0 8
48337: ST_TO_ADDR
// end ;
48338: LD_VAR 0 3
48342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48343: LD_INT 0
48345: PPUSH
48346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48347: LD_VAR 0 1
48351: NOT
48352: PUSH
48353: LD_VAR 0 1
48357: PUSH
48358: LD_INT 21
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 23
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PPUSH
48382: CALL_OW 69
48386: IN
48387: NOT
48388: OR
48389: IFFALSE 48393
// exit ;
48391: GO 48440
// for i = 1 to 3 do
48393: LD_ADDR_VAR 0 3
48397: PUSH
48398: DOUBLE
48399: LD_INT 1
48401: DEC
48402: ST_TO_ADDR
48403: LD_INT 3
48405: PUSH
48406: FOR_TO
48407: IFFALSE 48438
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48409: LD_VAR 0 1
48413: PPUSH
48414: CALL_OW 250
48418: PPUSH
48419: LD_VAR 0 1
48423: PPUSH
48424: CALL_OW 251
48428: PPUSH
48429: LD_INT 1
48431: PPUSH
48432: CALL_OW 453
48436: GO 48406
48438: POP
48439: POP
// end ;
48440: LD_VAR 0 2
48444: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48445: LD_INT 0
48447: PPUSH
48448: PPUSH
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48453: LD_VAR 0 1
48457: NOT
48458: PUSH
48459: LD_VAR 0 2
48463: NOT
48464: OR
48465: PUSH
48466: LD_VAR 0 1
48470: PPUSH
48471: CALL_OW 314
48475: OR
48476: IFFALSE 48480
// exit ;
48478: GO 48947
// if GetLives ( i ) < 250 then
48480: LD_VAR 0 4
48484: PPUSH
48485: CALL_OW 256
48489: PUSH
48490: LD_INT 250
48492: LESS
48493: IFFALSE 48506
// begin ComAutodestruct ( i ) ;
48495: LD_VAR 0 4
48499: PPUSH
48500: CALL 48343 0 1
// exit ;
48504: GO 48947
// end ; x := GetX ( enemy_unit ) ;
48506: LD_ADDR_VAR 0 7
48510: PUSH
48511: LD_VAR 0 2
48515: PPUSH
48516: CALL_OW 250
48520: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48521: LD_ADDR_VAR 0 8
48525: PUSH
48526: LD_VAR 0 2
48530: PPUSH
48531: CALL_OW 251
48535: ST_TO_ADDR
// if not x or not y then
48536: LD_VAR 0 7
48540: NOT
48541: PUSH
48542: LD_VAR 0 8
48546: NOT
48547: OR
48548: IFFALSE 48552
// exit ;
48550: GO 48947
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48552: LD_ADDR_VAR 0 6
48556: PUSH
48557: LD_VAR 0 7
48561: PPUSH
48562: LD_INT 0
48564: PPUSH
48565: LD_INT 4
48567: PPUSH
48568: CALL_OW 272
48572: PUSH
48573: LD_VAR 0 8
48577: PPUSH
48578: LD_INT 0
48580: PPUSH
48581: LD_INT 4
48583: PPUSH
48584: CALL_OW 273
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_VAR 0 7
48597: PPUSH
48598: LD_INT 1
48600: PPUSH
48601: LD_INT 4
48603: PPUSH
48604: CALL_OW 272
48608: PUSH
48609: LD_VAR 0 8
48613: PPUSH
48614: LD_INT 1
48616: PPUSH
48617: LD_INT 4
48619: PPUSH
48620: CALL_OW 273
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_VAR 0 7
48633: PPUSH
48634: LD_INT 2
48636: PPUSH
48637: LD_INT 4
48639: PPUSH
48640: CALL_OW 272
48644: PUSH
48645: LD_VAR 0 8
48649: PPUSH
48650: LD_INT 2
48652: PPUSH
48653: LD_INT 4
48655: PPUSH
48656: CALL_OW 273
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_VAR 0 7
48669: PPUSH
48670: LD_INT 3
48672: PPUSH
48673: LD_INT 4
48675: PPUSH
48676: CALL_OW 272
48680: PUSH
48681: LD_VAR 0 8
48685: PPUSH
48686: LD_INT 3
48688: PPUSH
48689: LD_INT 4
48691: PPUSH
48692: CALL_OW 273
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_VAR 0 7
48705: PPUSH
48706: LD_INT 4
48708: PPUSH
48709: LD_INT 4
48711: PPUSH
48712: CALL_OW 272
48716: PUSH
48717: LD_VAR 0 8
48721: PPUSH
48722: LD_INT 4
48724: PPUSH
48725: LD_INT 4
48727: PPUSH
48728: CALL_OW 273
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_VAR 0 7
48741: PPUSH
48742: LD_INT 5
48744: PPUSH
48745: LD_INT 4
48747: PPUSH
48748: CALL_OW 272
48752: PUSH
48753: LD_VAR 0 8
48757: PPUSH
48758: LD_INT 5
48760: PPUSH
48761: LD_INT 4
48763: PPUSH
48764: CALL_OW 273
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// for i = tmp downto 1 do
48781: LD_ADDR_VAR 0 4
48785: PUSH
48786: DOUBLE
48787: LD_VAR 0 6
48791: INC
48792: ST_TO_ADDR
48793: LD_INT 1
48795: PUSH
48796: FOR_DOWNTO
48797: IFFALSE 48898
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48799: LD_VAR 0 6
48803: PUSH
48804: LD_VAR 0 4
48808: ARRAY
48809: PUSH
48810: LD_INT 1
48812: ARRAY
48813: PPUSH
48814: LD_VAR 0 6
48818: PUSH
48819: LD_VAR 0 4
48823: ARRAY
48824: PUSH
48825: LD_INT 2
48827: ARRAY
48828: PPUSH
48829: CALL_OW 488
48833: NOT
48834: PUSH
48835: LD_VAR 0 6
48839: PUSH
48840: LD_VAR 0 4
48844: ARRAY
48845: PUSH
48846: LD_INT 1
48848: ARRAY
48849: PPUSH
48850: LD_VAR 0 6
48854: PUSH
48855: LD_VAR 0 4
48859: ARRAY
48860: PUSH
48861: LD_INT 2
48863: ARRAY
48864: PPUSH
48865: CALL_OW 428
48869: PUSH
48870: LD_INT 0
48872: NONEQUAL
48873: OR
48874: IFFALSE 48896
// tmp := Delete ( tmp , i ) ;
48876: LD_ADDR_VAR 0 6
48880: PUSH
48881: LD_VAR 0 6
48885: PPUSH
48886: LD_VAR 0 4
48890: PPUSH
48891: CALL_OW 3
48895: ST_TO_ADDR
48896: GO 48796
48898: POP
48899: POP
// j := GetClosestHex ( unit , tmp ) ;
48900: LD_ADDR_VAR 0 5
48904: PUSH
48905: LD_VAR 0 1
48909: PPUSH
48910: LD_VAR 0 6
48914: PPUSH
48915: CALL 48191 0 2
48919: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48920: LD_VAR 0 1
48924: PPUSH
48925: LD_VAR 0 5
48929: PUSH
48930: LD_INT 1
48932: ARRAY
48933: PPUSH
48934: LD_VAR 0 5
48938: PUSH
48939: LD_INT 2
48941: ARRAY
48942: PPUSH
48943: CALL_OW 111
// end ;
48947: LD_VAR 0 3
48951: RET
// export function PrepareApemanSoldier ( ) ; begin
48952: LD_INT 0
48954: PPUSH
// uc_nation := 0 ;
48955: LD_ADDR_OWVAR 21
48959: PUSH
48960: LD_INT 0
48962: ST_TO_ADDR
// hc_sex := sex_male ;
48963: LD_ADDR_OWVAR 27
48967: PUSH
48968: LD_INT 1
48970: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48971: LD_ADDR_OWVAR 28
48975: PUSH
48976: LD_INT 15
48978: ST_TO_ADDR
// hc_gallery :=  ;
48979: LD_ADDR_OWVAR 33
48983: PUSH
48984: LD_STRING 
48986: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48987: LD_ADDR_OWVAR 31
48991: PUSH
48992: LD_INT 0
48994: PPUSH
48995: LD_INT 3
48997: PPUSH
48998: CALL_OW 12
49002: PUSH
49003: LD_INT 0
49005: PPUSH
49006: LD_INT 3
49008: PPUSH
49009: CALL_OW 12
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: ST_TO_ADDR
// end ;
49026: LD_VAR 0 1
49030: RET
// export function PrepareApemanEngineer ( ) ; begin
49031: LD_INT 0
49033: PPUSH
// uc_nation := 0 ;
49034: LD_ADDR_OWVAR 21
49038: PUSH
49039: LD_INT 0
49041: ST_TO_ADDR
// hc_sex := sex_male ;
49042: LD_ADDR_OWVAR 27
49046: PUSH
49047: LD_INT 1
49049: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49050: LD_ADDR_OWVAR 28
49054: PUSH
49055: LD_INT 16
49057: ST_TO_ADDR
// hc_gallery :=  ;
49058: LD_ADDR_OWVAR 33
49062: PUSH
49063: LD_STRING 
49065: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49066: LD_ADDR_OWVAR 31
49070: PUSH
49071: LD_INT 0
49073: PPUSH
49074: LD_INT 3
49076: PPUSH
49077: CALL_OW 12
49081: PUSH
49082: LD_INT 0
49084: PPUSH
49085: LD_INT 3
49087: PPUSH
49088: CALL_OW 12
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: ST_TO_ADDR
// end ;
49105: LD_VAR 0 1
49109: RET
// export function PrepareApeman ( agressivity ) ; begin
49110: LD_INT 0
49112: PPUSH
// uc_side := 0 ;
49113: LD_ADDR_OWVAR 20
49117: PUSH
49118: LD_INT 0
49120: ST_TO_ADDR
// uc_nation := 0 ;
49121: LD_ADDR_OWVAR 21
49125: PUSH
49126: LD_INT 0
49128: ST_TO_ADDR
// hc_sex := sex_male ;
49129: LD_ADDR_OWVAR 27
49133: PUSH
49134: LD_INT 1
49136: ST_TO_ADDR
// hc_class := class_apeman ;
49137: LD_ADDR_OWVAR 28
49141: PUSH
49142: LD_INT 12
49144: ST_TO_ADDR
// hc_gallery :=  ;
49145: LD_ADDR_OWVAR 33
49149: PUSH
49150: LD_STRING 
49152: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49153: LD_ADDR_OWVAR 35
49157: PUSH
49158: LD_VAR 0 1
49162: NEG
49163: PPUSH
49164: LD_VAR 0 1
49168: PPUSH
49169: CALL_OW 12
49173: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49174: LD_ADDR_OWVAR 31
49178: PUSH
49179: LD_INT 0
49181: PPUSH
49182: LD_INT 3
49184: PPUSH
49185: CALL_OW 12
49189: PUSH
49190: LD_INT 0
49192: PPUSH
49193: LD_INT 3
49195: PPUSH
49196: CALL_OW 12
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: ST_TO_ADDR
// end ;
49213: LD_VAR 0 2
49217: RET
// export function PrepareTiger ( agressivity ) ; begin
49218: LD_INT 0
49220: PPUSH
// uc_side := 0 ;
49221: LD_ADDR_OWVAR 20
49225: PUSH
49226: LD_INT 0
49228: ST_TO_ADDR
// uc_nation := 0 ;
49229: LD_ADDR_OWVAR 21
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// hc_class := class_tiger ;
49237: LD_ADDR_OWVAR 28
49241: PUSH
49242: LD_INT 14
49244: ST_TO_ADDR
// hc_gallery :=  ;
49245: LD_ADDR_OWVAR 33
49249: PUSH
49250: LD_STRING 
49252: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49253: LD_ADDR_OWVAR 35
49257: PUSH
49258: LD_VAR 0 1
49262: NEG
49263: PPUSH
49264: LD_VAR 0 1
49268: PPUSH
49269: CALL_OW 12
49273: ST_TO_ADDR
// end ;
49274: LD_VAR 0 2
49278: RET
// export function PrepareEnchidna ( ) ; begin
49279: LD_INT 0
49281: PPUSH
// uc_side := 0 ;
49282: LD_ADDR_OWVAR 20
49286: PUSH
49287: LD_INT 0
49289: ST_TO_ADDR
// uc_nation := 0 ;
49290: LD_ADDR_OWVAR 21
49294: PUSH
49295: LD_INT 0
49297: ST_TO_ADDR
// hc_class := class_baggie ;
49298: LD_ADDR_OWVAR 28
49302: PUSH
49303: LD_INT 13
49305: ST_TO_ADDR
// hc_gallery :=  ;
49306: LD_ADDR_OWVAR 33
49310: PUSH
49311: LD_STRING 
49313: ST_TO_ADDR
// end ;
49314: LD_VAR 0 1
49318: RET
// export function PrepareFrog ( ) ; begin
49319: LD_INT 0
49321: PPUSH
// uc_side := 0 ;
49322: LD_ADDR_OWVAR 20
49326: PUSH
49327: LD_INT 0
49329: ST_TO_ADDR
// uc_nation := 0 ;
49330: LD_ADDR_OWVAR 21
49334: PUSH
49335: LD_INT 0
49337: ST_TO_ADDR
// hc_class := class_frog ;
49338: LD_ADDR_OWVAR 28
49342: PUSH
49343: LD_INT 19
49345: ST_TO_ADDR
// hc_gallery :=  ;
49346: LD_ADDR_OWVAR 33
49350: PUSH
49351: LD_STRING 
49353: ST_TO_ADDR
// end ;
49354: LD_VAR 0 1
49358: RET
// export function PrepareFish ( ) ; begin
49359: LD_INT 0
49361: PPUSH
// uc_side := 0 ;
49362: LD_ADDR_OWVAR 20
49366: PUSH
49367: LD_INT 0
49369: ST_TO_ADDR
// uc_nation := 0 ;
49370: LD_ADDR_OWVAR 21
49374: PUSH
49375: LD_INT 0
49377: ST_TO_ADDR
// hc_class := class_fish ;
49378: LD_ADDR_OWVAR 28
49382: PUSH
49383: LD_INT 20
49385: ST_TO_ADDR
// hc_gallery :=  ;
49386: LD_ADDR_OWVAR 33
49390: PUSH
49391: LD_STRING 
49393: ST_TO_ADDR
// end ;
49394: LD_VAR 0 1
49398: RET
// export function PrepareBird ( ) ; begin
49399: LD_INT 0
49401: PPUSH
// uc_side := 0 ;
49402: LD_ADDR_OWVAR 20
49406: PUSH
49407: LD_INT 0
49409: ST_TO_ADDR
// uc_nation := 0 ;
49410: LD_ADDR_OWVAR 21
49414: PUSH
49415: LD_INT 0
49417: ST_TO_ADDR
// hc_class := class_phororhacos ;
49418: LD_ADDR_OWVAR 28
49422: PUSH
49423: LD_INT 18
49425: ST_TO_ADDR
// hc_gallery :=  ;
49426: LD_ADDR_OWVAR 33
49430: PUSH
49431: LD_STRING 
49433: ST_TO_ADDR
// end ;
49434: LD_VAR 0 1
49438: RET
// export function PrepareHorse ( ) ; begin
49439: LD_INT 0
49441: PPUSH
// uc_side := 0 ;
49442: LD_ADDR_OWVAR 20
49446: PUSH
49447: LD_INT 0
49449: ST_TO_ADDR
// uc_nation := 0 ;
49450: LD_ADDR_OWVAR 21
49454: PUSH
49455: LD_INT 0
49457: ST_TO_ADDR
// hc_class := class_horse ;
49458: LD_ADDR_OWVAR 28
49462: PUSH
49463: LD_INT 21
49465: ST_TO_ADDR
// hc_gallery :=  ;
49466: LD_ADDR_OWVAR 33
49470: PUSH
49471: LD_STRING 
49473: ST_TO_ADDR
// end ;
49474: LD_VAR 0 1
49478: RET
// export function PrepareMastodont ( ) ; begin
49479: LD_INT 0
49481: PPUSH
// uc_side := 0 ;
49482: LD_ADDR_OWVAR 20
49486: PUSH
49487: LD_INT 0
49489: ST_TO_ADDR
// uc_nation := 0 ;
49490: LD_ADDR_OWVAR 21
49494: PUSH
49495: LD_INT 0
49497: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49498: LD_ADDR_OWVAR 37
49502: PUSH
49503: LD_INT 31
49505: ST_TO_ADDR
// vc_control := control_rider ;
49506: LD_ADDR_OWVAR 38
49510: PUSH
49511: LD_INT 4
49513: ST_TO_ADDR
// end ;
49514: LD_VAR 0 1
49518: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49519: LD_INT 0
49521: PPUSH
49522: PPUSH
49523: PPUSH
// uc_side = 0 ;
49524: LD_ADDR_OWVAR 20
49528: PUSH
49529: LD_INT 0
49531: ST_TO_ADDR
// uc_nation = 0 ;
49532: LD_ADDR_OWVAR 21
49536: PUSH
49537: LD_INT 0
49539: ST_TO_ADDR
// InitHc_All ( ) ;
49540: CALL_OW 584
// InitVc ;
49544: CALL_OW 20
// if mastodonts then
49548: LD_VAR 0 6
49552: IFFALSE 49619
// for i = 1 to mastodonts do
49554: LD_ADDR_VAR 0 11
49558: PUSH
49559: DOUBLE
49560: LD_INT 1
49562: DEC
49563: ST_TO_ADDR
49564: LD_VAR 0 6
49568: PUSH
49569: FOR_TO
49570: IFFALSE 49617
// begin vc_chassis := 31 ;
49572: LD_ADDR_OWVAR 37
49576: PUSH
49577: LD_INT 31
49579: ST_TO_ADDR
// vc_control := control_rider ;
49580: LD_ADDR_OWVAR 38
49584: PUSH
49585: LD_INT 4
49587: ST_TO_ADDR
// animal := CreateVehicle ;
49588: LD_ADDR_VAR 0 12
49592: PUSH
49593: CALL_OW 45
49597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49598: LD_VAR 0 12
49602: PPUSH
49603: LD_VAR 0 8
49607: PPUSH
49608: LD_INT 0
49610: PPUSH
49611: CALL 51747 0 3
// end ;
49615: GO 49569
49617: POP
49618: POP
// if horses then
49619: LD_VAR 0 5
49623: IFFALSE 49690
// for i = 1 to horses do
49625: LD_ADDR_VAR 0 11
49629: PUSH
49630: DOUBLE
49631: LD_INT 1
49633: DEC
49634: ST_TO_ADDR
49635: LD_VAR 0 5
49639: PUSH
49640: FOR_TO
49641: IFFALSE 49688
// begin hc_class := 21 ;
49643: LD_ADDR_OWVAR 28
49647: PUSH
49648: LD_INT 21
49650: ST_TO_ADDR
// hc_gallery :=  ;
49651: LD_ADDR_OWVAR 33
49655: PUSH
49656: LD_STRING 
49658: ST_TO_ADDR
// animal := CreateHuman ;
49659: LD_ADDR_VAR 0 12
49663: PUSH
49664: CALL_OW 44
49668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49669: LD_VAR 0 12
49673: PPUSH
49674: LD_VAR 0 8
49678: PPUSH
49679: LD_INT 0
49681: PPUSH
49682: CALL 51747 0 3
// end ;
49686: GO 49640
49688: POP
49689: POP
// if birds then
49690: LD_VAR 0 1
49694: IFFALSE 49761
// for i = 1 to birds do
49696: LD_ADDR_VAR 0 11
49700: PUSH
49701: DOUBLE
49702: LD_INT 1
49704: DEC
49705: ST_TO_ADDR
49706: LD_VAR 0 1
49710: PUSH
49711: FOR_TO
49712: IFFALSE 49759
// begin hc_class = 18 ;
49714: LD_ADDR_OWVAR 28
49718: PUSH
49719: LD_INT 18
49721: ST_TO_ADDR
// hc_gallery =  ;
49722: LD_ADDR_OWVAR 33
49726: PUSH
49727: LD_STRING 
49729: ST_TO_ADDR
// animal := CreateHuman ;
49730: LD_ADDR_VAR 0 12
49734: PUSH
49735: CALL_OW 44
49739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49740: LD_VAR 0 12
49744: PPUSH
49745: LD_VAR 0 8
49749: PPUSH
49750: LD_INT 0
49752: PPUSH
49753: CALL 51747 0 3
// end ;
49757: GO 49711
49759: POP
49760: POP
// if tigers then
49761: LD_VAR 0 2
49765: IFFALSE 49849
// for i = 1 to tigers do
49767: LD_ADDR_VAR 0 11
49771: PUSH
49772: DOUBLE
49773: LD_INT 1
49775: DEC
49776: ST_TO_ADDR
49777: LD_VAR 0 2
49781: PUSH
49782: FOR_TO
49783: IFFALSE 49847
// begin hc_class = class_tiger ;
49785: LD_ADDR_OWVAR 28
49789: PUSH
49790: LD_INT 14
49792: ST_TO_ADDR
// hc_gallery =  ;
49793: LD_ADDR_OWVAR 33
49797: PUSH
49798: LD_STRING 
49800: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49801: LD_ADDR_OWVAR 35
49805: PUSH
49806: LD_INT 7
49808: NEG
49809: PPUSH
49810: LD_INT 7
49812: PPUSH
49813: CALL_OW 12
49817: ST_TO_ADDR
// animal := CreateHuman ;
49818: LD_ADDR_VAR 0 12
49822: PUSH
49823: CALL_OW 44
49827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49828: LD_VAR 0 12
49832: PPUSH
49833: LD_VAR 0 8
49837: PPUSH
49838: LD_INT 0
49840: PPUSH
49841: CALL 51747 0 3
// end ;
49845: GO 49782
49847: POP
49848: POP
// if apemans then
49849: LD_VAR 0 3
49853: IFFALSE 49976
// for i = 1 to apemans do
49855: LD_ADDR_VAR 0 11
49859: PUSH
49860: DOUBLE
49861: LD_INT 1
49863: DEC
49864: ST_TO_ADDR
49865: LD_VAR 0 3
49869: PUSH
49870: FOR_TO
49871: IFFALSE 49974
// begin hc_class = class_apeman ;
49873: LD_ADDR_OWVAR 28
49877: PUSH
49878: LD_INT 12
49880: ST_TO_ADDR
// hc_gallery =  ;
49881: LD_ADDR_OWVAR 33
49885: PUSH
49886: LD_STRING 
49888: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49889: LD_ADDR_OWVAR 35
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PPUSH
49898: LD_INT 2
49900: PPUSH
49901: CALL_OW 12
49905: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49906: LD_ADDR_OWVAR 31
49910: PUSH
49911: LD_INT 1
49913: PPUSH
49914: LD_INT 3
49916: PPUSH
49917: CALL_OW 12
49921: PUSH
49922: LD_INT 1
49924: PPUSH
49925: LD_INT 3
49927: PPUSH
49928: CALL_OW 12
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// animal := CreateHuman ;
49945: LD_ADDR_VAR 0 12
49949: PUSH
49950: CALL_OW 44
49954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49955: LD_VAR 0 12
49959: PPUSH
49960: LD_VAR 0 8
49964: PPUSH
49965: LD_INT 0
49967: PPUSH
49968: CALL 51747 0 3
// end ;
49972: GO 49870
49974: POP
49975: POP
// if enchidnas then
49976: LD_VAR 0 4
49980: IFFALSE 50047
// for i = 1 to enchidnas do
49982: LD_ADDR_VAR 0 11
49986: PUSH
49987: DOUBLE
49988: LD_INT 1
49990: DEC
49991: ST_TO_ADDR
49992: LD_VAR 0 4
49996: PUSH
49997: FOR_TO
49998: IFFALSE 50045
// begin hc_class = 13 ;
50000: LD_ADDR_OWVAR 28
50004: PUSH
50005: LD_INT 13
50007: ST_TO_ADDR
// hc_gallery =  ;
50008: LD_ADDR_OWVAR 33
50012: PUSH
50013: LD_STRING 
50015: ST_TO_ADDR
// animal := CreateHuman ;
50016: LD_ADDR_VAR 0 12
50020: PUSH
50021: CALL_OW 44
50025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50026: LD_VAR 0 12
50030: PPUSH
50031: LD_VAR 0 8
50035: PPUSH
50036: LD_INT 0
50038: PPUSH
50039: CALL 51747 0 3
// end ;
50043: GO 49997
50045: POP
50046: POP
// if fishes then
50047: LD_VAR 0 7
50051: IFFALSE 50118
// for i = 1 to fishes do
50053: LD_ADDR_VAR 0 11
50057: PUSH
50058: DOUBLE
50059: LD_INT 1
50061: DEC
50062: ST_TO_ADDR
50063: LD_VAR 0 7
50067: PUSH
50068: FOR_TO
50069: IFFALSE 50116
// begin hc_class = 20 ;
50071: LD_ADDR_OWVAR 28
50075: PUSH
50076: LD_INT 20
50078: ST_TO_ADDR
// hc_gallery =  ;
50079: LD_ADDR_OWVAR 33
50083: PUSH
50084: LD_STRING 
50086: ST_TO_ADDR
// animal := CreateHuman ;
50087: LD_ADDR_VAR 0 12
50091: PUSH
50092: CALL_OW 44
50096: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50097: LD_VAR 0 12
50101: PPUSH
50102: LD_VAR 0 9
50106: PPUSH
50107: LD_INT 0
50109: PPUSH
50110: CALL 51747 0 3
// end ;
50114: GO 50068
50116: POP
50117: POP
// end ;
50118: LD_VAR 0 10
50122: RET
// export function WantHeal ( sci , unit ) ; begin
50123: LD_INT 0
50125: PPUSH
// if GetTaskList ( sci ) > 0 then
50126: LD_VAR 0 1
50130: PPUSH
50131: CALL_OW 437
50135: PUSH
50136: LD_INT 0
50138: GREATER
50139: IFFALSE 50209
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50141: LD_VAR 0 1
50145: PPUSH
50146: CALL_OW 437
50150: PUSH
50151: LD_INT 1
50153: ARRAY
50154: PUSH
50155: LD_INT 1
50157: ARRAY
50158: PUSH
50159: LD_STRING l
50161: EQUAL
50162: PUSH
50163: LD_VAR 0 1
50167: PPUSH
50168: CALL_OW 437
50172: PUSH
50173: LD_INT 1
50175: ARRAY
50176: PUSH
50177: LD_INT 4
50179: ARRAY
50180: PUSH
50181: LD_VAR 0 2
50185: EQUAL
50186: AND
50187: IFFALSE 50199
// result := true else
50189: LD_ADDR_VAR 0 3
50193: PUSH
50194: LD_INT 1
50196: ST_TO_ADDR
50197: GO 50207
// result := false ;
50199: LD_ADDR_VAR 0 3
50203: PUSH
50204: LD_INT 0
50206: ST_TO_ADDR
// end else
50207: GO 50217
// result := false ;
50209: LD_ADDR_VAR 0 3
50213: PUSH
50214: LD_INT 0
50216: ST_TO_ADDR
// end ;
50217: LD_VAR 0 3
50221: RET
// export function HealTarget ( sci ) ; begin
50222: LD_INT 0
50224: PPUSH
// if not sci then
50225: LD_VAR 0 1
50229: NOT
50230: IFFALSE 50234
// exit ;
50232: GO 50299
// result := 0 ;
50234: LD_ADDR_VAR 0 2
50238: PUSH
50239: LD_INT 0
50241: ST_TO_ADDR
// if GetTaskList ( sci ) then
50242: LD_VAR 0 1
50246: PPUSH
50247: CALL_OW 437
50251: IFFALSE 50299
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50253: LD_VAR 0 1
50257: PPUSH
50258: CALL_OW 437
50262: PUSH
50263: LD_INT 1
50265: ARRAY
50266: PUSH
50267: LD_INT 1
50269: ARRAY
50270: PUSH
50271: LD_STRING l
50273: EQUAL
50274: IFFALSE 50299
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50276: LD_ADDR_VAR 0 2
50280: PUSH
50281: LD_VAR 0 1
50285: PPUSH
50286: CALL_OW 437
50290: PUSH
50291: LD_INT 1
50293: ARRAY
50294: PUSH
50295: LD_INT 4
50297: ARRAY
50298: ST_TO_ADDR
// end ;
50299: LD_VAR 0 2
50303: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50304: LD_INT 0
50306: PPUSH
50307: PPUSH
50308: PPUSH
50309: PPUSH
// if not base_units then
50310: LD_VAR 0 1
50314: NOT
50315: IFFALSE 50319
// exit ;
50317: GO 50406
// result := false ;
50319: LD_ADDR_VAR 0 2
50323: PUSH
50324: LD_INT 0
50326: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50327: LD_ADDR_VAR 0 5
50331: PUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: LD_INT 21
50339: PUSH
50340: LD_INT 3
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PPUSH
50347: CALL_OW 72
50351: ST_TO_ADDR
// if not tmp then
50352: LD_VAR 0 5
50356: NOT
50357: IFFALSE 50361
// exit ;
50359: GO 50406
// for i in tmp do
50361: LD_ADDR_VAR 0 3
50365: PUSH
50366: LD_VAR 0 5
50370: PUSH
50371: FOR_IN
50372: IFFALSE 50404
// begin result := EnemyInRange ( i , 22 ) ;
50374: LD_ADDR_VAR 0 2
50378: PUSH
50379: LD_VAR 0 3
50383: PPUSH
50384: LD_INT 22
50386: PPUSH
50387: CALL 47993 0 2
50391: ST_TO_ADDR
// if result then
50392: LD_VAR 0 2
50396: IFFALSE 50402
// exit ;
50398: POP
50399: POP
50400: GO 50406
// end ;
50402: GO 50371
50404: POP
50405: POP
// end ;
50406: LD_VAR 0 2
50410: RET
// export function FilterByTag ( units , tag ) ; begin
50411: LD_INT 0
50413: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50414: LD_ADDR_VAR 0 3
50418: PUSH
50419: LD_VAR 0 1
50423: PPUSH
50424: LD_INT 120
50426: PUSH
50427: LD_VAR 0 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PPUSH
50436: CALL_OW 72
50440: ST_TO_ADDR
// end ;
50441: LD_VAR 0 3
50445: RET
// export function IsDriver ( un ) ; begin
50446: LD_INT 0
50448: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50449: LD_ADDR_VAR 0 2
50453: PUSH
50454: LD_VAR 0 1
50458: PUSH
50459: LD_INT 55
50461: PUSH
50462: EMPTY
50463: LIST
50464: PPUSH
50465: CALL_OW 69
50469: IN
50470: ST_TO_ADDR
// end ;
50471: LD_VAR 0 2
50475: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50476: LD_INT 0
50478: PPUSH
50479: PPUSH
// list := [ ] ;
50480: LD_ADDR_VAR 0 5
50484: PUSH
50485: EMPTY
50486: ST_TO_ADDR
// case d of 0 :
50487: LD_VAR 0 3
50491: PUSH
50492: LD_INT 0
50494: DOUBLE
50495: EQUAL
50496: IFTRUE 50500
50498: GO 50633
50500: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50501: LD_ADDR_VAR 0 5
50505: PUSH
50506: LD_VAR 0 1
50510: PUSH
50511: LD_INT 4
50513: MINUS
50514: PUSH
50515: LD_VAR 0 2
50519: PUSH
50520: LD_INT 4
50522: MINUS
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: PUSH
50532: LD_VAR 0 1
50536: PUSH
50537: LD_INT 3
50539: MINUS
50540: PUSH
50541: LD_VAR 0 2
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: LD_VAR 0 1
50558: PUSH
50559: LD_INT 4
50561: PLUS
50562: PUSH
50563: LD_VAR 0 2
50567: PUSH
50568: LD_INT 4
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: PUSH
50576: LD_VAR 0 1
50580: PUSH
50581: LD_INT 3
50583: PLUS
50584: PUSH
50585: LD_VAR 0 2
50589: PUSH
50590: LD_INT 3
50592: PLUS
50593: PUSH
50594: LD_INT 5
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: PUSH
50602: LD_VAR 0 1
50606: PUSH
50607: LD_VAR 0 2
50611: PUSH
50612: LD_INT 4
50614: PLUS
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// end ; 1 :
50631: GO 51331
50633: LD_INT 1
50635: DOUBLE
50636: EQUAL
50637: IFTRUE 50641
50639: GO 50774
50641: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50642: LD_ADDR_VAR 0 5
50646: PUSH
50647: LD_VAR 0 1
50651: PUSH
50652: LD_VAR 0 2
50656: PUSH
50657: LD_INT 4
50659: MINUS
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PUSH
50669: LD_VAR 0 1
50673: PUSH
50674: LD_INT 3
50676: MINUS
50677: PUSH
50678: LD_VAR 0 2
50682: PUSH
50683: LD_INT 3
50685: MINUS
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: PUSH
50695: LD_VAR 0 1
50699: PUSH
50700: LD_INT 4
50702: MINUS
50703: PUSH
50704: LD_VAR 0 2
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: PUSH
50717: LD_VAR 0 1
50721: PUSH
50722: LD_VAR 0 2
50726: PUSH
50727: LD_INT 3
50729: PLUS
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: PUSH
50739: LD_VAR 0 1
50743: PUSH
50744: LD_INT 4
50746: PLUS
50747: PUSH
50748: LD_VAR 0 2
50752: PUSH
50753: LD_INT 4
50755: PLUS
50756: PUSH
50757: LD_INT 5
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
// end ; 2 :
50772: GO 51331
50774: LD_INT 2
50776: DOUBLE
50777: EQUAL
50778: IFTRUE 50782
50780: GO 50911
50782: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50783: LD_ADDR_VAR 0 5
50787: PUSH
50788: LD_VAR 0 1
50792: PUSH
50793: LD_VAR 0 2
50797: PUSH
50798: LD_INT 3
50800: MINUS
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: PUSH
50810: LD_VAR 0 1
50814: PUSH
50815: LD_INT 4
50817: PLUS
50818: PUSH
50819: LD_VAR 0 2
50823: PUSH
50824: LD_INT 4
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_VAR 0 2
50841: PUSH
50842: LD_INT 4
50844: PLUS
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: PUSH
50854: LD_VAR 0 1
50858: PUSH
50859: LD_INT 3
50861: MINUS
50862: PUSH
50863: LD_VAR 0 2
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: PUSH
50876: LD_VAR 0 1
50880: PUSH
50881: LD_INT 4
50883: MINUS
50884: PUSH
50885: LD_VAR 0 2
50889: PUSH
50890: LD_INT 4
50892: MINUS
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: ST_TO_ADDR
// end ; 3 :
50909: GO 51331
50911: LD_INT 3
50913: DOUBLE
50914: EQUAL
50915: IFTRUE 50919
50917: GO 51052
50919: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50920: LD_ADDR_VAR 0 5
50924: PUSH
50925: LD_VAR 0 1
50929: PUSH
50930: LD_INT 3
50932: PLUS
50933: PUSH
50934: LD_VAR 0 2
50938: PUSH
50939: LD_INT 4
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: PUSH
50947: LD_VAR 0 1
50951: PUSH
50952: LD_INT 4
50954: PLUS
50955: PUSH
50956: LD_VAR 0 2
50960: PUSH
50961: LD_INT 4
50963: PLUS
50964: PUSH
50965: LD_INT 5
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: PUSH
50973: LD_VAR 0 1
50977: PUSH
50978: LD_INT 4
50980: MINUS
50981: PUSH
50982: LD_VAR 0 2
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: PUSH
50995: LD_VAR 0 1
50999: PUSH
51000: LD_VAR 0 2
51004: PUSH
51005: LD_INT 4
51007: MINUS
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: PUSH
51017: LD_VAR 0 1
51021: PUSH
51022: LD_INT 3
51024: MINUS
51025: PUSH
51026: LD_VAR 0 2
51030: PUSH
51031: LD_INT 3
51033: MINUS
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: ST_TO_ADDR
// end ; 4 :
51050: GO 51331
51052: LD_INT 4
51054: DOUBLE
51055: EQUAL
51056: IFTRUE 51060
51058: GO 51193
51060: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51061: LD_ADDR_VAR 0 5
51065: PUSH
51066: LD_VAR 0 1
51070: PUSH
51071: LD_VAR 0 2
51075: PUSH
51076: LD_INT 4
51078: PLUS
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: PUSH
51088: LD_VAR 0 1
51092: PUSH
51093: LD_INT 3
51095: PLUS
51096: PUSH
51097: LD_VAR 0 2
51101: PUSH
51102: LD_INT 3
51104: PLUS
51105: PUSH
51106: LD_INT 5
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: PUSH
51114: LD_VAR 0 1
51118: PUSH
51119: LD_INT 4
51121: PLUS
51122: PUSH
51123: LD_VAR 0 2
51127: PUSH
51128: LD_INT 4
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: PUSH
51136: LD_VAR 0 1
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: LD_INT 3
51148: MINUS
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: PUSH
51158: LD_VAR 0 1
51162: PUSH
51163: LD_INT 4
51165: MINUS
51166: PUSH
51167: LD_VAR 0 2
51171: PUSH
51172: LD_INT 4
51174: MINUS
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// end ; 5 :
51191: GO 51331
51193: LD_INT 5
51195: DOUBLE
51196: EQUAL
51197: IFTRUE 51201
51199: GO 51330
51201: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51202: LD_ADDR_VAR 0 5
51206: PUSH
51207: LD_VAR 0 1
51211: PUSH
51212: LD_INT 4
51214: MINUS
51215: PUSH
51216: LD_VAR 0 2
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: PUSH
51229: LD_VAR 0 1
51233: PUSH
51234: LD_VAR 0 2
51238: PUSH
51239: LD_INT 4
51241: MINUS
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: PUSH
51251: LD_VAR 0 1
51255: PUSH
51256: LD_INT 4
51258: PLUS
51259: PUSH
51260: LD_VAR 0 2
51264: PUSH
51265: LD_INT 4
51267: PLUS
51268: PUSH
51269: LD_INT 5
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: PUSH
51277: LD_VAR 0 1
51281: PUSH
51282: LD_INT 3
51284: PLUS
51285: PUSH
51286: LD_VAR 0 2
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: PUSH
51299: LD_VAR 0 1
51303: PUSH
51304: LD_VAR 0 2
51308: PUSH
51309: LD_INT 3
51311: PLUS
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// end ; end ;
51328: GO 51331
51330: POP
// result := list ;
51331: LD_ADDR_VAR 0 4
51335: PUSH
51336: LD_VAR 0 5
51340: ST_TO_ADDR
// end ;
51341: LD_VAR 0 4
51345: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51346: LD_INT 0
51348: PPUSH
51349: PPUSH
51350: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51351: LD_VAR 0 1
51355: NOT
51356: PUSH
51357: LD_VAR 0 2
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 4
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: IN
51380: NOT
51381: OR
51382: IFFALSE 51386
// exit ;
51384: GO 51469
// tmp := [ ] ;
51386: LD_ADDR_VAR 0 5
51390: PUSH
51391: EMPTY
51392: ST_TO_ADDR
// for i in units do
51393: LD_ADDR_VAR 0 4
51397: PUSH
51398: LD_VAR 0 1
51402: PUSH
51403: FOR_IN
51404: IFFALSE 51438
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51406: LD_ADDR_VAR 0 5
51410: PUSH
51411: LD_VAR 0 5
51415: PPUSH
51416: LD_VAR 0 4
51420: PPUSH
51421: LD_VAR 0 2
51425: PPUSH
51426: CALL_OW 259
51430: PPUSH
51431: CALL 52830 0 2
51435: ST_TO_ADDR
51436: GO 51403
51438: POP
51439: POP
// if not tmp then
51440: LD_VAR 0 5
51444: NOT
51445: IFFALSE 51449
// exit ;
51447: GO 51469
// result := SortListByListDesc ( units , tmp ) ;
51449: LD_ADDR_VAR 0 3
51453: PUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: LD_VAR 0 5
51463: PPUSH
51464: CALL_OW 77
51468: ST_TO_ADDR
// end ;
51469: LD_VAR 0 3
51473: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51474: LD_INT 0
51476: PPUSH
51477: PPUSH
51478: PPUSH
// result := false ;
51479: LD_ADDR_VAR 0 3
51483: PUSH
51484: LD_INT 0
51486: ST_TO_ADDR
// if not building then
51487: LD_VAR 0 2
51491: NOT
51492: IFFALSE 51496
// exit ;
51494: GO 51634
// x := GetX ( building ) ;
51496: LD_ADDR_VAR 0 4
51500: PUSH
51501: LD_VAR 0 2
51505: PPUSH
51506: CALL_OW 250
51510: ST_TO_ADDR
// y := GetY ( building ) ;
51511: LD_ADDR_VAR 0 5
51515: PUSH
51516: LD_VAR 0 2
51520: PPUSH
51521: CALL_OW 251
51525: ST_TO_ADDR
// if not x or not y then
51526: LD_VAR 0 4
51530: NOT
51531: PUSH
51532: LD_VAR 0 5
51536: NOT
51537: OR
51538: IFFALSE 51542
// exit ;
51540: GO 51634
// if GetTaskList ( unit ) then
51542: LD_VAR 0 1
51546: PPUSH
51547: CALL_OW 437
51551: IFFALSE 51634
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51553: LD_STRING e
51555: PUSH
51556: LD_VAR 0 1
51560: PPUSH
51561: CALL_OW 437
51565: PUSH
51566: LD_INT 1
51568: ARRAY
51569: PUSH
51570: LD_INT 1
51572: ARRAY
51573: EQUAL
51574: PUSH
51575: LD_VAR 0 4
51579: PUSH
51580: LD_VAR 0 1
51584: PPUSH
51585: CALL_OW 437
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: PUSH
51594: LD_INT 2
51596: ARRAY
51597: EQUAL
51598: AND
51599: PUSH
51600: LD_VAR 0 5
51604: PUSH
51605: LD_VAR 0 1
51609: PPUSH
51610: CALL_OW 437
51614: PUSH
51615: LD_INT 1
51617: ARRAY
51618: PUSH
51619: LD_INT 3
51621: ARRAY
51622: EQUAL
51623: AND
51624: IFFALSE 51634
// result := true end ;
51626: LD_ADDR_VAR 0 3
51630: PUSH
51631: LD_INT 1
51633: ST_TO_ADDR
// end ;
51634: LD_VAR 0 3
51638: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51639: LD_INT 0
51641: PPUSH
// result := false ;
51642: LD_ADDR_VAR 0 4
51646: PUSH
51647: LD_INT 0
51649: ST_TO_ADDR
// if GetTaskList ( unit ) then
51650: LD_VAR 0 1
51654: PPUSH
51655: CALL_OW 437
51659: IFFALSE 51742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51661: LD_STRING M
51663: PUSH
51664: LD_VAR 0 1
51668: PPUSH
51669: CALL_OW 437
51673: PUSH
51674: LD_INT 1
51676: ARRAY
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: EQUAL
51682: PUSH
51683: LD_VAR 0 2
51687: PUSH
51688: LD_VAR 0 1
51692: PPUSH
51693: CALL_OW 437
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: PUSH
51702: LD_INT 2
51704: ARRAY
51705: EQUAL
51706: AND
51707: PUSH
51708: LD_VAR 0 3
51712: PUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 437
51722: PUSH
51723: LD_INT 1
51725: ARRAY
51726: PUSH
51727: LD_INT 3
51729: ARRAY
51730: EQUAL
51731: AND
51732: IFFALSE 51742
// result := true ;
51734: LD_ADDR_VAR 0 4
51738: PUSH
51739: LD_INT 1
51741: ST_TO_ADDR
// end ; end ;
51742: LD_VAR 0 4
51746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51747: LD_INT 0
51749: PPUSH
51750: PPUSH
51751: PPUSH
51752: PPUSH
// if not unit or not area then
51753: LD_VAR 0 1
51757: NOT
51758: PUSH
51759: LD_VAR 0 2
51763: NOT
51764: OR
51765: IFFALSE 51769
// exit ;
51767: GO 51933
// tmp := AreaToList ( area , i ) ;
51769: LD_ADDR_VAR 0 6
51773: PUSH
51774: LD_VAR 0 2
51778: PPUSH
51779: LD_VAR 0 5
51783: PPUSH
51784: CALL_OW 517
51788: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51789: LD_ADDR_VAR 0 5
51793: PUSH
51794: DOUBLE
51795: LD_INT 1
51797: DEC
51798: ST_TO_ADDR
51799: LD_VAR 0 6
51803: PUSH
51804: LD_INT 1
51806: ARRAY
51807: PUSH
51808: FOR_TO
51809: IFFALSE 51931
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51811: LD_ADDR_VAR 0 7
51815: PUSH
51816: LD_VAR 0 6
51820: PUSH
51821: LD_INT 1
51823: ARRAY
51824: PUSH
51825: LD_VAR 0 5
51829: ARRAY
51830: PUSH
51831: LD_VAR 0 6
51835: PUSH
51836: LD_INT 2
51838: ARRAY
51839: PUSH
51840: LD_VAR 0 5
51844: ARRAY
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51850: LD_VAR 0 7
51854: PUSH
51855: LD_INT 1
51857: ARRAY
51858: PPUSH
51859: LD_VAR 0 7
51863: PUSH
51864: LD_INT 2
51866: ARRAY
51867: PPUSH
51868: CALL_OW 428
51872: PUSH
51873: LD_INT 0
51875: EQUAL
51876: IFFALSE 51929
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51878: LD_VAR 0 1
51882: PPUSH
51883: LD_VAR 0 7
51887: PUSH
51888: LD_INT 1
51890: ARRAY
51891: PPUSH
51892: LD_VAR 0 7
51896: PUSH
51897: LD_INT 2
51899: ARRAY
51900: PPUSH
51901: LD_VAR 0 3
51905: PPUSH
51906: CALL_OW 48
// result := IsPlaced ( unit ) ;
51910: LD_ADDR_VAR 0 4
51914: PUSH
51915: LD_VAR 0 1
51919: PPUSH
51920: CALL_OW 305
51924: ST_TO_ADDR
// exit ;
51925: POP
51926: POP
51927: GO 51933
// end ; end ;
51929: GO 51808
51931: POP
51932: POP
// end ;
51933: LD_VAR 0 4
51937: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51938: LD_INT 0
51940: PPUSH
51941: PPUSH
51942: PPUSH
// if not side or side > 8 then
51943: LD_VAR 0 1
51947: NOT
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_INT 8
51956: GREATER
51957: OR
51958: IFFALSE 51962
// exit ;
51960: GO 52149
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51962: LD_ADDR_VAR 0 4
51966: PUSH
51967: LD_INT 22
51969: PUSH
51970: LD_VAR 0 1
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 21
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PPUSH
51993: CALL_OW 69
51997: ST_TO_ADDR
// if not tmp then
51998: LD_VAR 0 4
52002: NOT
52003: IFFALSE 52007
// exit ;
52005: GO 52149
// enable_addtolog := true ;
52007: LD_ADDR_OWVAR 81
52011: PUSH
52012: LD_INT 1
52014: ST_TO_ADDR
// AddToLog ( [ ) ;
52015: LD_STRING [
52017: PPUSH
52018: CALL_OW 561
// for i in tmp do
52022: LD_ADDR_VAR 0 3
52026: PUSH
52027: LD_VAR 0 4
52031: PUSH
52032: FOR_IN
52033: IFFALSE 52140
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52035: LD_STRING [
52037: PUSH
52038: LD_VAR 0 3
52042: PPUSH
52043: CALL_OW 266
52047: STR
52048: PUSH
52049: LD_STRING , 
52051: STR
52052: PUSH
52053: LD_VAR 0 3
52057: PPUSH
52058: CALL_OW 250
52062: STR
52063: PUSH
52064: LD_STRING , 
52066: STR
52067: PUSH
52068: LD_VAR 0 3
52072: PPUSH
52073: CALL_OW 251
52077: STR
52078: PUSH
52079: LD_STRING , 
52081: STR
52082: PUSH
52083: LD_VAR 0 3
52087: PPUSH
52088: CALL_OW 254
52092: STR
52093: PUSH
52094: LD_STRING , 
52096: STR
52097: PUSH
52098: LD_VAR 0 3
52102: PPUSH
52103: LD_INT 1
52105: PPUSH
52106: CALL_OW 268
52110: STR
52111: PUSH
52112: LD_STRING , 
52114: STR
52115: PUSH
52116: LD_VAR 0 3
52120: PPUSH
52121: LD_INT 2
52123: PPUSH
52124: CALL_OW 268
52128: STR
52129: PUSH
52130: LD_STRING ],
52132: STR
52133: PPUSH
52134: CALL_OW 561
// end ;
52138: GO 52032
52140: POP
52141: POP
// AddToLog ( ]; ) ;
52142: LD_STRING ];
52144: PPUSH
52145: CALL_OW 561
// end ;
52149: LD_VAR 0 2
52153: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52154: LD_INT 0
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
// if not area or not rate or not max then
52161: LD_VAR 0 1
52165: NOT
52166: PUSH
52167: LD_VAR 0 2
52171: NOT
52172: OR
52173: PUSH
52174: LD_VAR 0 4
52178: NOT
52179: OR
52180: IFFALSE 52184
// exit ;
52182: GO 52373
// while 1 do
52184: LD_INT 1
52186: IFFALSE 52373
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52188: LD_ADDR_VAR 0 9
52192: PUSH
52193: LD_VAR 0 1
52197: PPUSH
52198: LD_INT 1
52200: PPUSH
52201: CALL_OW 287
52205: PUSH
52206: LD_INT 10
52208: MUL
52209: ST_TO_ADDR
// r := rate / 10 ;
52210: LD_ADDR_VAR 0 7
52214: PUSH
52215: LD_VAR 0 2
52219: PUSH
52220: LD_INT 10
52222: DIVREAL
52223: ST_TO_ADDR
// time := 1 1$00 ;
52224: LD_ADDR_VAR 0 8
52228: PUSH
52229: LD_INT 2100
52231: ST_TO_ADDR
// if amount < min then
52232: LD_VAR 0 9
52236: PUSH
52237: LD_VAR 0 3
52241: LESS
52242: IFFALSE 52260
// r := r * 2 else
52244: LD_ADDR_VAR 0 7
52248: PUSH
52249: LD_VAR 0 7
52253: PUSH
52254: LD_INT 2
52256: MUL
52257: ST_TO_ADDR
52258: GO 52286
// if amount > max then
52260: LD_VAR 0 9
52264: PUSH
52265: LD_VAR 0 4
52269: GREATER
52270: IFFALSE 52286
// r := r / 2 ;
52272: LD_ADDR_VAR 0 7
52276: PUSH
52277: LD_VAR 0 7
52281: PUSH
52282: LD_INT 2
52284: DIVREAL
52285: ST_TO_ADDR
// time := time / r ;
52286: LD_ADDR_VAR 0 8
52290: PUSH
52291: LD_VAR 0 8
52295: PUSH
52296: LD_VAR 0 7
52300: DIVREAL
52301: ST_TO_ADDR
// if time < 0 then
52302: LD_VAR 0 8
52306: PUSH
52307: LD_INT 0
52309: LESS
52310: IFFALSE 52327
// time := time * - 1 ;
52312: LD_ADDR_VAR 0 8
52316: PUSH
52317: LD_VAR 0 8
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: MUL
52326: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52327: LD_VAR 0 8
52331: PUSH
52332: LD_INT 35
52334: PPUSH
52335: LD_INT 875
52337: PPUSH
52338: CALL_OW 12
52342: PLUS
52343: PPUSH
52344: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52348: LD_INT 1
52350: PPUSH
52351: LD_INT 5
52353: PPUSH
52354: CALL_OW 12
52358: PPUSH
52359: LD_VAR 0 1
52363: PPUSH
52364: LD_INT 1
52366: PPUSH
52367: CALL_OW 55
// end ;
52371: GO 52184
// end ;
52373: LD_VAR 0 5
52377: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52378: LD_INT 0
52380: PPUSH
52381: PPUSH
52382: PPUSH
52383: PPUSH
52384: PPUSH
52385: PPUSH
52386: PPUSH
52387: PPUSH
// if not turrets or not factories then
52388: LD_VAR 0 1
52392: NOT
52393: PUSH
52394: LD_VAR 0 2
52398: NOT
52399: OR
52400: IFFALSE 52404
// exit ;
52402: GO 52711
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52404: LD_ADDR_VAR 0 10
52408: PUSH
52409: LD_INT 5
52411: PUSH
52412: LD_INT 6
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 4
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: LD_INT 5
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 24
52446: PUSH
52447: LD_INT 25
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 23
52456: PUSH
52457: LD_INT 27
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 42
52470: PUSH
52471: LD_INT 43
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 44
52480: PUSH
52481: LD_INT 46
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 45
52490: PUSH
52491: LD_INT 47
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// result := [ ] ;
52508: LD_ADDR_VAR 0 3
52512: PUSH
52513: EMPTY
52514: ST_TO_ADDR
// for i in turrets do
52515: LD_ADDR_VAR 0 4
52519: PUSH
52520: LD_VAR 0 1
52524: PUSH
52525: FOR_IN
52526: IFFALSE 52709
// begin nat := GetNation ( i ) ;
52528: LD_ADDR_VAR 0 7
52532: PUSH
52533: LD_VAR 0 4
52537: PPUSH
52538: CALL_OW 248
52542: ST_TO_ADDR
// weapon := 0 ;
52543: LD_ADDR_VAR 0 8
52547: PUSH
52548: LD_INT 0
52550: ST_TO_ADDR
// if not nat then
52551: LD_VAR 0 7
52555: NOT
52556: IFFALSE 52560
// continue ;
52558: GO 52525
// for j in list [ nat ] do
52560: LD_ADDR_VAR 0 5
52564: PUSH
52565: LD_VAR 0 10
52569: PUSH
52570: LD_VAR 0 7
52574: ARRAY
52575: PUSH
52576: FOR_IN
52577: IFFALSE 52618
// if GetBWeapon ( i ) = j [ 1 ] then
52579: LD_VAR 0 4
52583: PPUSH
52584: CALL_OW 269
52588: PUSH
52589: LD_VAR 0 5
52593: PUSH
52594: LD_INT 1
52596: ARRAY
52597: EQUAL
52598: IFFALSE 52616
// begin weapon := j [ 2 ] ;
52600: LD_ADDR_VAR 0 8
52604: PUSH
52605: LD_VAR 0 5
52609: PUSH
52610: LD_INT 2
52612: ARRAY
52613: ST_TO_ADDR
// break ;
52614: GO 52618
// end ;
52616: GO 52576
52618: POP
52619: POP
// if not weapon then
52620: LD_VAR 0 8
52624: NOT
52625: IFFALSE 52629
// continue ;
52627: GO 52525
// for k in factories do
52629: LD_ADDR_VAR 0 6
52633: PUSH
52634: LD_VAR 0 2
52638: PUSH
52639: FOR_IN
52640: IFFALSE 52705
// begin weapons := AvailableWeaponList ( k ) ;
52642: LD_ADDR_VAR 0 9
52646: PUSH
52647: LD_VAR 0 6
52651: PPUSH
52652: CALL_OW 478
52656: ST_TO_ADDR
// if not weapons then
52657: LD_VAR 0 9
52661: NOT
52662: IFFALSE 52666
// continue ;
52664: GO 52639
// if weapon in weapons then
52666: LD_VAR 0 8
52670: PUSH
52671: LD_VAR 0 9
52675: IN
52676: IFFALSE 52703
// begin result := [ i , weapon ] ;
52678: LD_ADDR_VAR 0 3
52682: PUSH
52683: LD_VAR 0 4
52687: PUSH
52688: LD_VAR 0 8
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// exit ;
52697: POP
52698: POP
52699: POP
52700: POP
52701: GO 52711
// end ; end ;
52703: GO 52639
52705: POP
52706: POP
// end ;
52707: GO 52525
52709: POP
52710: POP
// end ;
52711: LD_VAR 0 3
52715: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52716: LD_INT 0
52718: PPUSH
// if not side or side > 8 then
52719: LD_VAR 0 3
52723: NOT
52724: PUSH
52725: LD_VAR 0 3
52729: PUSH
52730: LD_INT 8
52732: GREATER
52733: OR
52734: IFFALSE 52738
// exit ;
52736: GO 52797
// if not range then
52738: LD_VAR 0 4
52742: NOT
52743: IFFALSE 52754
// range := - 12 ;
52745: LD_ADDR_VAR 0 4
52749: PUSH
52750: LD_INT 12
52752: NEG
52753: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52754: LD_VAR 0 1
52758: PPUSH
52759: LD_VAR 0 2
52763: PPUSH
52764: LD_VAR 0 3
52768: PPUSH
52769: LD_VAR 0 4
52773: PPUSH
52774: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52778: LD_VAR 0 1
52782: PPUSH
52783: LD_VAR 0 2
52787: PPUSH
52788: LD_VAR 0 3
52792: PPUSH
52793: CALL_OW 331
// end ;
52797: LD_VAR 0 5
52801: RET
// export function Video ( mode ) ; begin
52802: LD_INT 0
52804: PPUSH
// ingame_video = mode ;
52805: LD_ADDR_OWVAR 52
52809: PUSH
52810: LD_VAR 0 1
52814: ST_TO_ADDR
// interface_hidden = mode ;
52815: LD_ADDR_OWVAR 54
52819: PUSH
52820: LD_VAR 0 1
52824: ST_TO_ADDR
// end ;
52825: LD_VAR 0 2
52829: RET
// export function Join ( array , element ) ; begin
52830: LD_INT 0
52832: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52833: LD_ADDR_VAR 0 3
52837: PUSH
52838: LD_VAR 0 1
52842: PPUSH
52843: LD_VAR 0 1
52847: PUSH
52848: LD_INT 1
52850: PLUS
52851: PPUSH
52852: LD_VAR 0 2
52856: PPUSH
52857: CALL_OW 1
52861: ST_TO_ADDR
// end ;
52862: LD_VAR 0 3
52866: RET
// export function JoinUnion ( array , element ) ; begin
52867: LD_INT 0
52869: PPUSH
// result := array union element ;
52870: LD_ADDR_VAR 0 3
52874: PUSH
52875: LD_VAR 0 1
52879: PUSH
52880: LD_VAR 0 2
52884: UNION
52885: ST_TO_ADDR
// end ;
52886: LD_VAR 0 3
52890: RET
// export function GetBehemoths ( side ) ; begin
52891: LD_INT 0
52893: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52894: LD_ADDR_VAR 0 2
52898: PUSH
52899: LD_INT 22
52901: PUSH
52902: LD_VAR 0 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 31
52913: PUSH
52914: LD_INT 25
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PPUSH
52925: CALL_OW 69
52929: ST_TO_ADDR
// end ;
52930: LD_VAR 0 2
52934: RET
// export function Shuffle ( array ) ; var i , index ; begin
52935: LD_INT 0
52937: PPUSH
52938: PPUSH
52939: PPUSH
// result := [ ] ;
52940: LD_ADDR_VAR 0 2
52944: PUSH
52945: EMPTY
52946: ST_TO_ADDR
// if not array then
52947: LD_VAR 0 1
52951: NOT
52952: IFFALSE 52956
// exit ;
52954: GO 53055
// Randomize ;
52956: CALL_OW 10
// for i = array downto 1 do
52960: LD_ADDR_VAR 0 3
52964: PUSH
52965: DOUBLE
52966: LD_VAR 0 1
52970: INC
52971: ST_TO_ADDR
52972: LD_INT 1
52974: PUSH
52975: FOR_DOWNTO
52976: IFFALSE 53053
// begin index := rand ( 1 , array ) ;
52978: LD_ADDR_VAR 0 4
52982: PUSH
52983: LD_INT 1
52985: PPUSH
52986: LD_VAR 0 1
52990: PPUSH
52991: CALL_OW 12
52995: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52996: LD_ADDR_VAR 0 2
53000: PUSH
53001: LD_VAR 0 2
53005: PPUSH
53006: LD_VAR 0 2
53010: PUSH
53011: LD_INT 1
53013: PLUS
53014: PPUSH
53015: LD_VAR 0 1
53019: PUSH
53020: LD_VAR 0 4
53024: ARRAY
53025: PPUSH
53026: CALL_OW 2
53030: ST_TO_ADDR
// array := Delete ( array , index ) ;
53031: LD_ADDR_VAR 0 1
53035: PUSH
53036: LD_VAR 0 1
53040: PPUSH
53041: LD_VAR 0 4
53045: PPUSH
53046: CALL_OW 3
53050: ST_TO_ADDR
// end ;
53051: GO 52975
53053: POP
53054: POP
// end ;
53055: LD_VAR 0 2
53059: RET
// export function GetBaseMaterials ( base ) ; begin
53060: LD_INT 0
53062: PPUSH
// result := [ 0 , 0 , 0 ] ;
53063: LD_ADDR_VAR 0 2
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// if not base then
53082: LD_VAR 0 1
53086: NOT
53087: IFFALSE 53091
// exit ;
53089: GO 53140
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53091: LD_ADDR_VAR 0 2
53095: PUSH
53096: LD_VAR 0 1
53100: PPUSH
53101: LD_INT 1
53103: PPUSH
53104: CALL_OW 275
53108: PUSH
53109: LD_VAR 0 1
53113: PPUSH
53114: LD_INT 2
53116: PPUSH
53117: CALL_OW 275
53121: PUSH
53122: LD_VAR 0 1
53126: PPUSH
53127: LD_INT 3
53129: PPUSH
53130: CALL_OW 275
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: ST_TO_ADDR
// end ;
53140: LD_VAR 0 2
53144: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53145: LD_INT 0
53147: PPUSH
53148: PPUSH
// result := array ;
53149: LD_ADDR_VAR 0 3
53153: PUSH
53154: LD_VAR 0 1
53158: ST_TO_ADDR
// if size >= result then
53159: LD_VAR 0 2
53163: PUSH
53164: LD_VAR 0 3
53168: GREATEREQUAL
53169: IFFALSE 53173
// exit ;
53171: GO 53223
// if size then
53173: LD_VAR 0 2
53177: IFFALSE 53223
// for i := array downto size do
53179: LD_ADDR_VAR 0 4
53183: PUSH
53184: DOUBLE
53185: LD_VAR 0 1
53189: INC
53190: ST_TO_ADDR
53191: LD_VAR 0 2
53195: PUSH
53196: FOR_DOWNTO
53197: IFFALSE 53221
// result := Delete ( result , result ) ;
53199: LD_ADDR_VAR 0 3
53203: PUSH
53204: LD_VAR 0 3
53208: PPUSH
53209: LD_VAR 0 3
53213: PPUSH
53214: CALL_OW 3
53218: ST_TO_ADDR
53219: GO 53196
53221: POP
53222: POP
// end ;
53223: LD_VAR 0 3
53227: RET
// export function ComExit ( unit ) ; var tmp ; begin
53228: LD_INT 0
53230: PPUSH
53231: PPUSH
// if not IsInUnit ( unit ) then
53232: LD_VAR 0 1
53236: PPUSH
53237: CALL_OW 310
53241: NOT
53242: IFFALSE 53246
// exit ;
53244: GO 53306
// tmp := IsInUnit ( unit ) ;
53246: LD_ADDR_VAR 0 3
53250: PUSH
53251: LD_VAR 0 1
53255: PPUSH
53256: CALL_OW 310
53260: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53261: LD_VAR 0 3
53265: PPUSH
53266: CALL_OW 247
53270: PUSH
53271: LD_INT 2
53273: EQUAL
53274: IFFALSE 53287
// ComExitVehicle ( unit ) else
53276: LD_VAR 0 1
53280: PPUSH
53281: CALL_OW 121
53285: GO 53296
// ComExitBuilding ( unit ) ;
53287: LD_VAR 0 1
53291: PPUSH
53292: CALL_OW 122
// result := tmp ;
53296: LD_ADDR_VAR 0 2
53300: PUSH
53301: LD_VAR 0 3
53305: ST_TO_ADDR
// end ;
53306: LD_VAR 0 2
53310: RET
// export function ComExitAll ( units ) ; var i ; begin
53311: LD_INT 0
53313: PPUSH
53314: PPUSH
// if not units then
53315: LD_VAR 0 1
53319: NOT
53320: IFFALSE 53324
// exit ;
53322: GO 53350
// for i in units do
53324: LD_ADDR_VAR 0 3
53328: PUSH
53329: LD_VAR 0 1
53333: PUSH
53334: FOR_IN
53335: IFFALSE 53348
// ComExit ( i ) ;
53337: LD_VAR 0 3
53341: PPUSH
53342: CALL 53228 0 1
53346: GO 53334
53348: POP
53349: POP
// end ;
53350: LD_VAR 0 2
53354: RET
// export function ResetHc ; begin
53355: LD_INT 0
53357: PPUSH
// InitHc ;
53358: CALL_OW 19
// hc_importance := 0 ;
53362: LD_ADDR_OWVAR 32
53366: PUSH
53367: LD_INT 0
53369: ST_TO_ADDR
// end ;
53370: LD_VAR 0 1
53374: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53375: LD_INT 0
53377: PPUSH
53378: PPUSH
53379: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53380: LD_ADDR_VAR 0 6
53384: PUSH
53385: LD_VAR 0 1
53389: PUSH
53390: LD_VAR 0 3
53394: PLUS
53395: PUSH
53396: LD_INT 2
53398: DIV
53399: ST_TO_ADDR
// if _x < 0 then
53400: LD_VAR 0 6
53404: PUSH
53405: LD_INT 0
53407: LESS
53408: IFFALSE 53425
// _x := _x * - 1 ;
53410: LD_ADDR_VAR 0 6
53414: PUSH
53415: LD_VAR 0 6
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: MUL
53424: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53425: LD_ADDR_VAR 0 7
53429: PUSH
53430: LD_VAR 0 2
53434: PUSH
53435: LD_VAR 0 4
53439: PLUS
53440: PUSH
53441: LD_INT 2
53443: DIV
53444: ST_TO_ADDR
// if _y < 0 then
53445: LD_VAR 0 7
53449: PUSH
53450: LD_INT 0
53452: LESS
53453: IFFALSE 53470
// _y := _y * - 1 ;
53455: LD_ADDR_VAR 0 7
53459: PUSH
53460: LD_VAR 0 7
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: MUL
53469: ST_TO_ADDR
// result := [ _x , _y ] ;
53470: LD_ADDR_VAR 0 5
53474: PUSH
53475: LD_VAR 0 6
53479: PUSH
53480: LD_VAR 0 7
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// end ;
53489: LD_VAR 0 5
53493: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53494: LD_INT 0
53496: PPUSH
53497: PPUSH
53498: PPUSH
53499: PPUSH
// task := GetTaskList ( unit ) ;
53500: LD_ADDR_VAR 0 7
53504: PUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 437
53514: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53515: LD_VAR 0 7
53519: NOT
53520: PUSH
53521: LD_VAR 0 1
53525: PPUSH
53526: LD_VAR 0 2
53530: PPUSH
53531: CALL_OW 308
53535: NOT
53536: AND
53537: IFFALSE 53541
// exit ;
53539: GO 53659
// if IsInArea ( unit , area ) then
53541: LD_VAR 0 1
53545: PPUSH
53546: LD_VAR 0 2
53550: PPUSH
53551: CALL_OW 308
53555: IFFALSE 53573
// begin ComMoveToArea ( unit , goAway ) ;
53557: LD_VAR 0 1
53561: PPUSH
53562: LD_VAR 0 3
53566: PPUSH
53567: CALL_OW 113
// exit ;
53571: GO 53659
// end ; if task [ 1 ] [ 1 ] <> M then
53573: LD_VAR 0 7
53577: PUSH
53578: LD_INT 1
53580: ARRAY
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PUSH
53586: LD_STRING M
53588: NONEQUAL
53589: IFFALSE 53593
// exit ;
53591: GO 53659
// x := task [ 1 ] [ 2 ] ;
53593: LD_ADDR_VAR 0 5
53597: PUSH
53598: LD_VAR 0 7
53602: PUSH
53603: LD_INT 1
53605: ARRAY
53606: PUSH
53607: LD_INT 2
53609: ARRAY
53610: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53611: LD_ADDR_VAR 0 6
53615: PUSH
53616: LD_VAR 0 7
53620: PUSH
53621: LD_INT 1
53623: ARRAY
53624: PUSH
53625: LD_INT 3
53627: ARRAY
53628: ST_TO_ADDR
// if InArea ( x , y , area ) then
53629: LD_VAR 0 5
53633: PPUSH
53634: LD_VAR 0 6
53638: PPUSH
53639: LD_VAR 0 2
53643: PPUSH
53644: CALL_OW 309
53648: IFFALSE 53659
// ComStop ( unit ) ;
53650: LD_VAR 0 1
53654: PPUSH
53655: CALL_OW 141
// end ;
53659: LD_VAR 0 4
53663: RET
// export function Abs ( value ) ; begin
53664: LD_INT 0
53666: PPUSH
// result := value ;
53667: LD_ADDR_VAR 0 2
53671: PUSH
53672: LD_VAR 0 1
53676: ST_TO_ADDR
// if value < 0 then
53677: LD_VAR 0 1
53681: PUSH
53682: LD_INT 0
53684: LESS
53685: IFFALSE 53702
// result := value * - 1 ;
53687: LD_ADDR_VAR 0 2
53691: PUSH
53692: LD_VAR 0 1
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: MUL
53701: ST_TO_ADDR
// end ;
53702: LD_VAR 0 2
53706: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53707: LD_INT 0
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
// if not unit or not building then
53717: LD_VAR 0 1
53721: NOT
53722: PUSH
53723: LD_VAR 0 2
53727: NOT
53728: OR
53729: IFFALSE 53733
// exit ;
53731: GO 53959
// x := GetX ( building ) ;
53733: LD_ADDR_VAR 0 4
53737: PUSH
53738: LD_VAR 0 2
53742: PPUSH
53743: CALL_OW 250
53747: ST_TO_ADDR
// y := GetY ( building ) ;
53748: LD_ADDR_VAR 0 6
53752: PUSH
53753: LD_VAR 0 2
53757: PPUSH
53758: CALL_OW 251
53762: ST_TO_ADDR
// d := GetDir ( building ) ;
53763: LD_ADDR_VAR 0 8
53767: PUSH
53768: LD_VAR 0 2
53772: PPUSH
53773: CALL_OW 254
53777: ST_TO_ADDR
// r := 4 ;
53778: LD_ADDR_VAR 0 9
53782: PUSH
53783: LD_INT 4
53785: ST_TO_ADDR
// for i := 1 to 5 do
53786: LD_ADDR_VAR 0 10
53790: PUSH
53791: DOUBLE
53792: LD_INT 1
53794: DEC
53795: ST_TO_ADDR
53796: LD_INT 5
53798: PUSH
53799: FOR_TO
53800: IFFALSE 53957
// begin _x := ShiftX ( x , d , r + i ) ;
53802: LD_ADDR_VAR 0 5
53806: PUSH
53807: LD_VAR 0 4
53811: PPUSH
53812: LD_VAR 0 8
53816: PPUSH
53817: LD_VAR 0 9
53821: PUSH
53822: LD_VAR 0 10
53826: PLUS
53827: PPUSH
53828: CALL_OW 272
53832: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53833: LD_ADDR_VAR 0 7
53837: PUSH
53838: LD_VAR 0 6
53842: PPUSH
53843: LD_VAR 0 8
53847: PPUSH
53848: LD_VAR 0 9
53852: PUSH
53853: LD_VAR 0 10
53857: PLUS
53858: PPUSH
53859: CALL_OW 273
53863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53864: LD_VAR 0 5
53868: PPUSH
53869: LD_VAR 0 7
53873: PPUSH
53874: CALL_OW 488
53878: PUSH
53879: LD_VAR 0 5
53883: PPUSH
53884: LD_VAR 0 7
53888: PPUSH
53889: CALL_OW 428
53893: PPUSH
53894: CALL_OW 247
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: IN
53909: NOT
53910: AND
53911: IFFALSE 53955
// begin ComMoveXY ( unit , _x , _y ) ;
53913: LD_VAR 0 1
53917: PPUSH
53918: LD_VAR 0 5
53922: PPUSH
53923: LD_VAR 0 7
53927: PPUSH
53928: CALL_OW 111
// result := [ _x , _y ] ;
53932: LD_ADDR_VAR 0 3
53936: PUSH
53937: LD_VAR 0 5
53941: PUSH
53942: LD_VAR 0 7
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// exit ;
53951: POP
53952: POP
53953: GO 53959
// end ; end ;
53955: GO 53799
53957: POP
53958: POP
// end ;
53959: LD_VAR 0 3
53963: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53964: LD_INT 0
53966: PPUSH
53967: PPUSH
53968: PPUSH
// result := 0 ;
53969: LD_ADDR_VAR 0 3
53973: PUSH
53974: LD_INT 0
53976: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 0
53984: LESS
53985: PUSH
53986: LD_VAR 0 1
53990: PUSH
53991: LD_INT 8
53993: GREATER
53994: OR
53995: PUSH
53996: LD_VAR 0 2
54000: PUSH
54001: LD_INT 0
54003: LESS
54004: OR
54005: PUSH
54006: LD_VAR 0 2
54010: PUSH
54011: LD_INT 8
54013: GREATER
54014: OR
54015: IFFALSE 54019
// exit ;
54017: GO 54094
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54019: LD_ADDR_VAR 0 4
54023: PUSH
54024: LD_INT 22
54026: PUSH
54027: LD_VAR 0 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PPUSH
54036: CALL_OW 69
54040: PUSH
54041: FOR_IN
54042: IFFALSE 54092
// begin un := UnitShoot ( i ) ;
54044: LD_ADDR_VAR 0 5
54048: PUSH
54049: LD_VAR 0 4
54053: PPUSH
54054: CALL_OW 504
54058: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54059: LD_VAR 0 5
54063: PPUSH
54064: CALL_OW 255
54068: PUSH
54069: LD_VAR 0 1
54073: EQUAL
54074: IFFALSE 54090
// begin result := un ;
54076: LD_ADDR_VAR 0 3
54080: PUSH
54081: LD_VAR 0 5
54085: ST_TO_ADDR
// exit ;
54086: POP
54087: POP
54088: GO 54094
// end ; end ;
54090: GO 54041
54092: POP
54093: POP
// end ;
54094: LD_VAR 0 3
54098: RET
// export function GetCargoBay ( units ) ; begin
54099: LD_INT 0
54101: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54102: LD_ADDR_VAR 0 2
54106: PUSH
54107: LD_VAR 0 1
54111: PPUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 34
54117: PUSH
54118: LD_INT 12
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 34
54127: PUSH
54128: LD_INT 51
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 34
54137: PUSH
54138: LD_INT 32
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 34
54147: PUSH
54148: LD_INT 89
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: PPUSH
54162: CALL_OW 72
54166: ST_TO_ADDR
// end ;
54167: LD_VAR 0 2
54171: RET
// export function Negate ( value ) ; begin
54172: LD_INT 0
54174: PPUSH
// result := not value ;
54175: LD_ADDR_VAR 0 2
54179: PUSH
54180: LD_VAR 0 1
54184: NOT
54185: ST_TO_ADDR
// end ;
54186: LD_VAR 0 2
54190: RET
// export function Inc ( value ) ; begin
54191: LD_INT 0
54193: PPUSH
// result := value + 1 ;
54194: LD_ADDR_VAR 0 2
54198: PUSH
54199: LD_VAR 0 1
54203: PUSH
54204: LD_INT 1
54206: PLUS
54207: ST_TO_ADDR
// end ;
54208: LD_VAR 0 2
54212: RET
// export function Dec ( value ) ; begin
54213: LD_INT 0
54215: PPUSH
// result := value - 1 ;
54216: LD_ADDR_VAR 0 2
54220: PUSH
54221: LD_VAR 0 1
54225: PUSH
54226: LD_INT 1
54228: MINUS
54229: ST_TO_ADDR
// end ;
54230: LD_VAR 0 2
54234: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54235: LD_INT 0
54237: PPUSH
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54245: LD_VAR 0 1
54249: PPUSH
54250: LD_VAR 0 2
54254: PPUSH
54255: CALL_OW 488
54259: NOT
54260: PUSH
54261: LD_VAR 0 3
54265: PPUSH
54266: LD_VAR 0 4
54270: PPUSH
54271: CALL_OW 488
54275: NOT
54276: OR
54277: IFFALSE 54290
// begin result := - 1 ;
54279: LD_ADDR_VAR 0 5
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: ST_TO_ADDR
// exit ;
54288: GO 54525
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54290: LD_ADDR_VAR 0 12
54294: PUSH
54295: LD_VAR 0 1
54299: PPUSH
54300: LD_VAR 0 2
54304: PPUSH
54305: LD_VAR 0 3
54309: PPUSH
54310: LD_VAR 0 4
54314: PPUSH
54315: CALL 53375 0 4
54319: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54320: LD_ADDR_VAR 0 11
54324: PUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: LD_VAR 0 2
54334: PPUSH
54335: LD_VAR 0 12
54339: PUSH
54340: LD_INT 1
54342: ARRAY
54343: PPUSH
54344: LD_VAR 0 12
54348: PUSH
54349: LD_INT 2
54351: ARRAY
54352: PPUSH
54353: CALL_OW 298
54357: ST_TO_ADDR
// distance := 9999 ;
54358: LD_ADDR_VAR 0 10
54362: PUSH
54363: LD_INT 9999
54365: ST_TO_ADDR
// for i := 0 to 5 do
54366: LD_ADDR_VAR 0 6
54370: PUSH
54371: DOUBLE
54372: LD_INT 0
54374: DEC
54375: ST_TO_ADDR
54376: LD_INT 5
54378: PUSH
54379: FOR_TO
54380: IFFALSE 54523
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54382: LD_ADDR_VAR 0 7
54386: PUSH
54387: LD_VAR 0 1
54391: PPUSH
54392: LD_VAR 0 6
54396: PPUSH
54397: LD_VAR 0 11
54401: PPUSH
54402: CALL_OW 272
54406: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54407: LD_ADDR_VAR 0 8
54411: PUSH
54412: LD_VAR 0 2
54416: PPUSH
54417: LD_VAR 0 6
54421: PPUSH
54422: LD_VAR 0 11
54426: PPUSH
54427: CALL_OW 273
54431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54432: LD_VAR 0 7
54436: PPUSH
54437: LD_VAR 0 8
54441: PPUSH
54442: CALL_OW 488
54446: NOT
54447: IFFALSE 54451
// continue ;
54449: GO 54379
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54451: LD_ADDR_VAR 0 9
54455: PUSH
54456: LD_VAR 0 12
54460: PUSH
54461: LD_INT 1
54463: ARRAY
54464: PPUSH
54465: LD_VAR 0 12
54469: PUSH
54470: LD_INT 2
54472: ARRAY
54473: PPUSH
54474: LD_VAR 0 7
54478: PPUSH
54479: LD_VAR 0 8
54483: PPUSH
54484: CALL_OW 298
54488: ST_TO_ADDR
// if tmp < distance then
54489: LD_VAR 0 9
54493: PUSH
54494: LD_VAR 0 10
54498: LESS
54499: IFFALSE 54521
// begin result := i ;
54501: LD_ADDR_VAR 0 5
54505: PUSH
54506: LD_VAR 0 6
54510: ST_TO_ADDR
// distance := tmp ;
54511: LD_ADDR_VAR 0 10
54515: PUSH
54516: LD_VAR 0 9
54520: ST_TO_ADDR
// end ; end ;
54521: GO 54379
54523: POP
54524: POP
// end ;
54525: LD_VAR 0 5
54529: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54530: LD_INT 0
54532: PPUSH
54533: PPUSH
// if not driver or not IsInUnit ( driver ) then
54534: LD_VAR 0 1
54538: NOT
54539: PUSH
54540: LD_VAR 0 1
54544: PPUSH
54545: CALL_OW 310
54549: NOT
54550: OR
54551: IFFALSE 54555
// exit ;
54553: GO 54645
// vehicle := IsInUnit ( driver ) ;
54555: LD_ADDR_VAR 0 3
54559: PUSH
54560: LD_VAR 0 1
54564: PPUSH
54565: CALL_OW 310
54569: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54570: LD_VAR 0 1
54574: PPUSH
54575: LD_STRING \
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: PUSH
54605: LD_STRING E
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_VAR 0 3
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PPUSH
54641: CALL_OW 446
// end ;
54645: LD_VAR 0 2
54649: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54650: LD_INT 0
54652: PPUSH
54653: PPUSH
// if not driver or not IsInUnit ( driver ) then
54654: LD_VAR 0 1
54658: NOT
54659: PUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 310
54669: NOT
54670: OR
54671: IFFALSE 54675
// exit ;
54673: GO 54765
// vehicle := IsInUnit ( driver ) ;
54675: LD_ADDR_VAR 0 3
54679: PUSH
54680: LD_VAR 0 1
54684: PPUSH
54685: CALL_OW 310
54689: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54690: LD_VAR 0 1
54694: PPUSH
54695: LD_STRING \
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: PUSH
54725: LD_STRING E
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_VAR 0 3
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PPUSH
54761: CALL_OW 447
// end ;
54765: LD_VAR 0 2
54769: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54770: LD_INT 0
54772: PPUSH
54773: PPUSH
54774: PPUSH
// tmp := [ ] ;
54775: LD_ADDR_VAR 0 5
54779: PUSH
54780: EMPTY
54781: ST_TO_ADDR
// for i in units do
54782: LD_ADDR_VAR 0 4
54786: PUSH
54787: LD_VAR 0 1
54791: PUSH
54792: FOR_IN
54793: IFFALSE 54831
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54795: LD_ADDR_VAR 0 5
54799: PUSH
54800: LD_VAR 0 5
54804: PPUSH
54805: LD_VAR 0 5
54809: PUSH
54810: LD_INT 1
54812: PLUS
54813: PPUSH
54814: LD_VAR 0 4
54818: PPUSH
54819: CALL_OW 256
54823: PPUSH
54824: CALL_OW 2
54828: ST_TO_ADDR
54829: GO 54792
54831: POP
54832: POP
// if not tmp then
54833: LD_VAR 0 5
54837: NOT
54838: IFFALSE 54842
// exit ;
54840: GO 54890
// if asc then
54842: LD_VAR 0 2
54846: IFFALSE 54870
// result := SortListByListAsc ( units , tmp ) else
54848: LD_ADDR_VAR 0 3
54852: PUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: LD_VAR 0 5
54862: PPUSH
54863: CALL_OW 76
54867: ST_TO_ADDR
54868: GO 54890
// result := SortListByListDesc ( units , tmp ) ;
54870: LD_ADDR_VAR 0 3
54874: PUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: LD_VAR 0 5
54884: PPUSH
54885: CALL_OW 77
54889: ST_TO_ADDR
// end ;
54890: LD_VAR 0 3
54894: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54895: LD_INT 0
54897: PPUSH
54898: PPUSH
// task := GetTaskList ( mech ) ;
54899: LD_ADDR_VAR 0 4
54903: PUSH
54904: LD_VAR 0 1
54908: PPUSH
54909: CALL_OW 437
54913: ST_TO_ADDR
// if not task then
54914: LD_VAR 0 4
54918: NOT
54919: IFFALSE 54923
// exit ;
54921: GO 54965
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54923: LD_ADDR_VAR 0 3
54927: PUSH
54928: LD_VAR 0 4
54932: PUSH
54933: LD_INT 1
54935: ARRAY
54936: PUSH
54937: LD_INT 1
54939: ARRAY
54940: PUSH
54941: LD_STRING r
54943: EQUAL
54944: PUSH
54945: LD_VAR 0 4
54949: PUSH
54950: LD_INT 1
54952: ARRAY
54953: PUSH
54954: LD_INT 4
54956: ARRAY
54957: PUSH
54958: LD_VAR 0 2
54962: EQUAL
54963: AND
54964: ST_TO_ADDR
// end ;
54965: LD_VAR 0 3
54969: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54970: LD_INT 0
54972: PPUSH
// SetDir ( unit , d ) ;
54973: LD_VAR 0 1
54977: PPUSH
54978: LD_VAR 0 4
54982: PPUSH
54983: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54987: LD_VAR 0 1
54991: PPUSH
54992: LD_VAR 0 2
54996: PPUSH
54997: LD_VAR 0 3
55001: PPUSH
55002: LD_VAR 0 5
55006: PPUSH
55007: CALL_OW 48
// end ;
55011: LD_VAR 0 6
55015: RET
// export function ToNaturalNumber ( number ) ; begin
55016: LD_INT 0
55018: PPUSH
// result := number div 1 ;
55019: LD_ADDR_VAR 0 2
55023: PUSH
55024: LD_VAR 0 1
55028: PUSH
55029: LD_INT 1
55031: DIV
55032: ST_TO_ADDR
// if number < 0 then
55033: LD_VAR 0 1
55037: PUSH
55038: LD_INT 0
55040: LESS
55041: IFFALSE 55051
// result := 0 ;
55043: LD_ADDR_VAR 0 2
55047: PUSH
55048: LD_INT 0
55050: ST_TO_ADDR
// end ;
55051: LD_VAR 0 2
55055: RET
// export function SortByClass ( units , class ) ; var un ; begin
55056: LD_INT 0
55058: PPUSH
55059: PPUSH
// if not units or not class then
55060: LD_VAR 0 1
55064: NOT
55065: PUSH
55066: LD_VAR 0 2
55070: NOT
55071: OR
55072: IFFALSE 55076
// exit ;
55074: GO 55171
// result := [ ] ;
55076: LD_ADDR_VAR 0 3
55080: PUSH
55081: EMPTY
55082: ST_TO_ADDR
// for un in units do
55083: LD_ADDR_VAR 0 4
55087: PUSH
55088: LD_VAR 0 1
55092: PUSH
55093: FOR_IN
55094: IFFALSE 55169
// if GetClass ( un ) = class then
55096: LD_VAR 0 4
55100: PPUSH
55101: CALL_OW 257
55105: PUSH
55106: LD_VAR 0 2
55110: EQUAL
55111: IFFALSE 55138
// result := Insert ( result , 1 , un ) else
55113: LD_ADDR_VAR 0 3
55117: PUSH
55118: LD_VAR 0 3
55122: PPUSH
55123: LD_INT 1
55125: PPUSH
55126: LD_VAR 0 4
55130: PPUSH
55131: CALL_OW 2
55135: ST_TO_ADDR
55136: GO 55167
// result := Replace ( result , result + 1 , un ) ;
55138: LD_ADDR_VAR 0 3
55142: PUSH
55143: LD_VAR 0 3
55147: PPUSH
55148: LD_VAR 0 3
55152: PUSH
55153: LD_INT 1
55155: PLUS
55156: PPUSH
55157: LD_VAR 0 4
55161: PPUSH
55162: CALL_OW 1
55166: ST_TO_ADDR
55167: GO 55093
55169: POP
55170: POP
// end ;
55171: LD_VAR 0 3
55175: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55176: LD_INT 0
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
// result := [ ] ;
55185: LD_ADDR_VAR 0 4
55189: PUSH
55190: EMPTY
55191: ST_TO_ADDR
// if x - r < 0 then
55192: LD_VAR 0 1
55196: PUSH
55197: LD_VAR 0 3
55201: MINUS
55202: PUSH
55203: LD_INT 0
55205: LESS
55206: IFFALSE 55218
// min_x := 0 else
55208: LD_ADDR_VAR 0 8
55212: PUSH
55213: LD_INT 0
55215: ST_TO_ADDR
55216: GO 55234
// min_x := x - r ;
55218: LD_ADDR_VAR 0 8
55222: PUSH
55223: LD_VAR 0 1
55227: PUSH
55228: LD_VAR 0 3
55232: MINUS
55233: ST_TO_ADDR
// if y - r < 0 then
55234: LD_VAR 0 2
55238: PUSH
55239: LD_VAR 0 3
55243: MINUS
55244: PUSH
55245: LD_INT 0
55247: LESS
55248: IFFALSE 55260
// min_y := 0 else
55250: LD_ADDR_VAR 0 7
55254: PUSH
55255: LD_INT 0
55257: ST_TO_ADDR
55258: GO 55276
// min_y := y - r ;
55260: LD_ADDR_VAR 0 7
55264: PUSH
55265: LD_VAR 0 2
55269: PUSH
55270: LD_VAR 0 3
55274: MINUS
55275: ST_TO_ADDR
// max_x := x + r ;
55276: LD_ADDR_VAR 0 9
55280: PUSH
55281: LD_VAR 0 1
55285: PUSH
55286: LD_VAR 0 3
55290: PLUS
55291: ST_TO_ADDR
// max_y := y + r ;
55292: LD_ADDR_VAR 0 10
55296: PUSH
55297: LD_VAR 0 2
55301: PUSH
55302: LD_VAR 0 3
55306: PLUS
55307: ST_TO_ADDR
// for _x = min_x to max_x do
55308: LD_ADDR_VAR 0 5
55312: PUSH
55313: DOUBLE
55314: LD_VAR 0 8
55318: DEC
55319: ST_TO_ADDR
55320: LD_VAR 0 9
55324: PUSH
55325: FOR_TO
55326: IFFALSE 55427
// for _y = min_y to max_y do
55328: LD_ADDR_VAR 0 6
55332: PUSH
55333: DOUBLE
55334: LD_VAR 0 7
55338: DEC
55339: ST_TO_ADDR
55340: LD_VAR 0 10
55344: PUSH
55345: FOR_TO
55346: IFFALSE 55423
// begin if not ValidHex ( _x , _y ) then
55348: LD_VAR 0 5
55352: PPUSH
55353: LD_VAR 0 6
55357: PPUSH
55358: CALL_OW 488
55362: NOT
55363: IFFALSE 55367
// continue ;
55365: GO 55345
// if GetResourceTypeXY ( _x , _y ) then
55367: LD_VAR 0 5
55371: PPUSH
55372: LD_VAR 0 6
55376: PPUSH
55377: CALL_OW 283
55381: IFFALSE 55421
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55383: LD_ADDR_VAR 0 4
55387: PUSH
55388: LD_VAR 0 4
55392: PPUSH
55393: LD_VAR 0 4
55397: PUSH
55398: LD_INT 1
55400: PLUS
55401: PPUSH
55402: LD_VAR 0 5
55406: PUSH
55407: LD_VAR 0 6
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PPUSH
55416: CALL_OW 1
55420: ST_TO_ADDR
// end ;
55421: GO 55345
55423: POP
55424: POP
55425: GO 55325
55427: POP
55428: POP
// end ;
55429: LD_VAR 0 4
55433: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55434: LD_INT 0
55436: PPUSH
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
// if not units then
55444: LD_VAR 0 1
55448: NOT
55449: IFFALSE 55453
// exit ;
55451: GO 55977
// result := UnitFilter ( units , [ f_ok ] ) ;
55453: LD_ADDR_VAR 0 3
55457: PUSH
55458: LD_VAR 0 1
55462: PPUSH
55463: LD_INT 50
55465: PUSH
55466: EMPTY
55467: LIST
55468: PPUSH
55469: CALL_OW 72
55473: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55474: LD_ADDR_VAR 0 8
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: LD_INT 1
55486: ARRAY
55487: PPUSH
55488: CALL_OW 255
55492: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55493: LD_ADDR_VAR 0 10
55497: PUSH
55498: LD_INT 29
55500: PUSH
55501: LD_INT 91
55503: PUSH
55504: LD_INT 49
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// if not result then
55512: LD_VAR 0 3
55516: NOT
55517: IFFALSE 55521
// exit ;
55519: GO 55977
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55521: LD_ADDR_VAR 0 5
55525: PUSH
55526: LD_INT 81
55528: PUSH
55529: LD_VAR 0 8
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PPUSH
55538: CALL_OW 69
55542: ST_TO_ADDR
// for i in result do
55543: LD_ADDR_VAR 0 4
55547: PUSH
55548: LD_VAR 0 3
55552: PUSH
55553: FOR_IN
55554: IFFALSE 55975
// begin tag := GetTag ( i ) + 1 ;
55556: LD_ADDR_VAR 0 9
55560: PUSH
55561: LD_VAR 0 4
55565: PPUSH
55566: CALL_OW 110
55570: PUSH
55571: LD_INT 1
55573: PLUS
55574: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55575: LD_ADDR_VAR 0 7
55579: PUSH
55580: LD_VAR 0 4
55584: PPUSH
55585: CALL_OW 250
55589: PPUSH
55590: LD_VAR 0 4
55594: PPUSH
55595: CALL_OW 251
55599: PPUSH
55600: LD_INT 6
55602: PPUSH
55603: CALL 55176 0 3
55607: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55608: LD_VAR 0 4
55612: PPUSH
55613: CALL_OW 247
55617: PUSH
55618: LD_INT 2
55620: EQUAL
55621: PUSH
55622: LD_VAR 0 7
55626: AND
55627: PUSH
55628: LD_VAR 0 4
55632: PPUSH
55633: CALL_OW 264
55637: PUSH
55638: LD_VAR 0 10
55642: IN
55643: NOT
55644: AND
55645: IFFALSE 55684
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55647: LD_VAR 0 4
55651: PPUSH
55652: LD_VAR 0 7
55656: PUSH
55657: LD_INT 1
55659: ARRAY
55660: PUSH
55661: LD_INT 1
55663: ARRAY
55664: PPUSH
55665: LD_VAR 0 7
55669: PUSH
55670: LD_INT 1
55672: ARRAY
55673: PUSH
55674: LD_INT 2
55676: ARRAY
55677: PPUSH
55678: CALL_OW 116
55682: GO 55973
// if path > tag then
55684: LD_VAR 0 2
55688: PUSH
55689: LD_VAR 0 9
55693: GREATER
55694: IFFALSE 55902
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55696: LD_ADDR_VAR 0 6
55700: PUSH
55701: LD_VAR 0 5
55705: PPUSH
55706: LD_INT 91
55708: PUSH
55709: LD_VAR 0 4
55713: PUSH
55714: LD_INT 8
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: LIST
55721: PPUSH
55722: CALL_OW 72
55726: ST_TO_ADDR
// if nearEnemy then
55727: LD_VAR 0 6
55731: IFFALSE 55800
// begin if GetWeapon ( i ) = ru_time_lapser then
55733: LD_VAR 0 4
55737: PPUSH
55738: CALL_OW 264
55742: PUSH
55743: LD_INT 49
55745: EQUAL
55746: IFFALSE 55774
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55748: LD_VAR 0 4
55752: PPUSH
55753: LD_VAR 0 6
55757: PPUSH
55758: LD_VAR 0 4
55762: PPUSH
55763: CALL_OW 74
55767: PPUSH
55768: CALL_OW 112
55772: GO 55798
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55774: LD_VAR 0 4
55778: PPUSH
55779: LD_VAR 0 6
55783: PPUSH
55784: LD_VAR 0 4
55788: PPUSH
55789: CALL_OW 74
55793: PPUSH
55794: CALL_OW 115
// end else
55798: GO 55900
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55800: LD_VAR 0 4
55804: PPUSH
55805: LD_VAR 0 2
55809: PUSH
55810: LD_VAR 0 9
55814: ARRAY
55815: PUSH
55816: LD_INT 1
55818: ARRAY
55819: PPUSH
55820: LD_VAR 0 2
55824: PUSH
55825: LD_VAR 0 9
55829: ARRAY
55830: PUSH
55831: LD_INT 2
55833: ARRAY
55834: PPUSH
55835: CALL_OW 297
55839: PUSH
55840: LD_INT 6
55842: GREATER
55843: IFFALSE 55886
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55845: LD_VAR 0 4
55849: PPUSH
55850: LD_VAR 0 2
55854: PUSH
55855: LD_VAR 0 9
55859: ARRAY
55860: PUSH
55861: LD_INT 1
55863: ARRAY
55864: PPUSH
55865: LD_VAR 0 2
55869: PUSH
55870: LD_VAR 0 9
55874: ARRAY
55875: PUSH
55876: LD_INT 2
55878: ARRAY
55879: PPUSH
55880: CALL_OW 114
55884: GO 55900
// SetTag ( i , tag ) ;
55886: LD_VAR 0 4
55890: PPUSH
55891: LD_VAR 0 9
55895: PPUSH
55896: CALL_OW 109
// end else
55900: GO 55973
// if enemy then
55902: LD_VAR 0 5
55906: IFFALSE 55973
// begin if GetWeapon ( i ) = ru_time_lapser then
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 264
55917: PUSH
55918: LD_INT 49
55920: EQUAL
55921: IFFALSE 55949
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55923: LD_VAR 0 4
55927: PPUSH
55928: LD_VAR 0 5
55932: PPUSH
55933: LD_VAR 0 4
55937: PPUSH
55938: CALL_OW 74
55942: PPUSH
55943: CALL_OW 112
55947: GO 55973
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55949: LD_VAR 0 4
55953: PPUSH
55954: LD_VAR 0 5
55958: PPUSH
55959: LD_VAR 0 4
55963: PPUSH
55964: CALL_OW 74
55968: PPUSH
55969: CALL_OW 115
// end ; end ;
55973: GO 55553
55975: POP
55976: POP
// end ;
55977: LD_VAR 0 3
55981: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55982: LD_INT 0
55984: PPUSH
55985: PPUSH
55986: PPUSH
// if not unit or IsInUnit ( unit ) then
55987: LD_VAR 0 1
55991: NOT
55992: PUSH
55993: LD_VAR 0 1
55997: PPUSH
55998: CALL_OW 310
56002: OR
56003: IFFALSE 56007
// exit ;
56005: GO 56098
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56007: LD_ADDR_VAR 0 4
56011: PUSH
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 250
56021: PPUSH
56022: LD_VAR 0 2
56026: PPUSH
56027: LD_INT 1
56029: PPUSH
56030: CALL_OW 272
56034: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56035: LD_ADDR_VAR 0 5
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: CALL_OW 251
56049: PPUSH
56050: LD_VAR 0 2
56054: PPUSH
56055: LD_INT 1
56057: PPUSH
56058: CALL_OW 273
56062: ST_TO_ADDR
// if ValidHex ( x , y ) then
56063: LD_VAR 0 4
56067: PPUSH
56068: LD_VAR 0 5
56072: PPUSH
56073: CALL_OW 488
56077: IFFALSE 56098
// ComTurnXY ( unit , x , y ) ;
56079: LD_VAR 0 1
56083: PPUSH
56084: LD_VAR 0 4
56088: PPUSH
56089: LD_VAR 0 5
56093: PPUSH
56094: CALL_OW 118
// end ;
56098: LD_VAR 0 3
56102: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56103: LD_INT 0
56105: PPUSH
56106: PPUSH
// result := false ;
56107: LD_ADDR_VAR 0 3
56111: PUSH
56112: LD_INT 0
56114: ST_TO_ADDR
// if not units then
56115: LD_VAR 0 2
56119: NOT
56120: IFFALSE 56124
// exit ;
56122: GO 56169
// for i in units do
56124: LD_ADDR_VAR 0 4
56128: PUSH
56129: LD_VAR 0 2
56133: PUSH
56134: FOR_IN
56135: IFFALSE 56167
// if See ( side , i ) then
56137: LD_VAR 0 1
56141: PPUSH
56142: LD_VAR 0 4
56146: PPUSH
56147: CALL_OW 292
56151: IFFALSE 56165
// begin result := true ;
56153: LD_ADDR_VAR 0 3
56157: PUSH
56158: LD_INT 1
56160: ST_TO_ADDR
// exit ;
56161: POP
56162: POP
56163: GO 56169
// end ;
56165: GO 56134
56167: POP
56168: POP
// end ;
56169: LD_VAR 0 3
56173: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56174: LD_INT 0
56176: PPUSH
56177: PPUSH
56178: PPUSH
56179: PPUSH
// if not unit or not points then
56180: LD_VAR 0 1
56184: NOT
56185: PUSH
56186: LD_VAR 0 2
56190: NOT
56191: OR
56192: IFFALSE 56196
// exit ;
56194: GO 56286
// dist := 99999 ;
56196: LD_ADDR_VAR 0 5
56200: PUSH
56201: LD_INT 99999
56203: ST_TO_ADDR
// for i in points do
56204: LD_ADDR_VAR 0 4
56208: PUSH
56209: LD_VAR 0 2
56213: PUSH
56214: FOR_IN
56215: IFFALSE 56284
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56217: LD_ADDR_VAR 0 6
56221: PUSH
56222: LD_VAR 0 1
56226: PPUSH
56227: LD_VAR 0 4
56231: PUSH
56232: LD_INT 1
56234: ARRAY
56235: PPUSH
56236: LD_VAR 0 4
56240: PUSH
56241: LD_INT 2
56243: ARRAY
56244: PPUSH
56245: CALL_OW 297
56249: ST_TO_ADDR
// if tmpDist < dist then
56250: LD_VAR 0 6
56254: PUSH
56255: LD_VAR 0 5
56259: LESS
56260: IFFALSE 56282
// begin result := i ;
56262: LD_ADDR_VAR 0 3
56266: PUSH
56267: LD_VAR 0 4
56271: ST_TO_ADDR
// dist := tmpDist ;
56272: LD_ADDR_VAR 0 5
56276: PUSH
56277: LD_VAR 0 6
56281: ST_TO_ADDR
// end ; end ;
56282: GO 56214
56284: POP
56285: POP
// end ;
56286: LD_VAR 0 3
56290: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56291: LD_INT 0
56293: PPUSH
// uc_side := side ;
56294: LD_ADDR_OWVAR 20
56298: PUSH
56299: LD_VAR 0 1
56303: ST_TO_ADDR
// uc_nation := 3 ;
56304: LD_ADDR_OWVAR 21
56308: PUSH
56309: LD_INT 3
56311: ST_TO_ADDR
// vc_chassis := 25 ;
56312: LD_ADDR_OWVAR 37
56316: PUSH
56317: LD_INT 25
56319: ST_TO_ADDR
// vc_engine := engine_siberite ;
56320: LD_ADDR_OWVAR 39
56324: PUSH
56325: LD_INT 3
56327: ST_TO_ADDR
// vc_control := control_computer ;
56328: LD_ADDR_OWVAR 38
56332: PUSH
56333: LD_INT 3
56335: ST_TO_ADDR
// vc_weapon := 59 ;
56336: LD_ADDR_OWVAR 40
56340: PUSH
56341: LD_INT 59
56343: ST_TO_ADDR
// result := CreateVehicle ;
56344: LD_ADDR_VAR 0 5
56348: PUSH
56349: CALL_OW 45
56353: ST_TO_ADDR
// SetDir ( result , d ) ;
56354: LD_VAR 0 5
56358: PPUSH
56359: LD_VAR 0 4
56363: PPUSH
56364: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56368: LD_VAR 0 5
56372: PPUSH
56373: LD_VAR 0 2
56377: PPUSH
56378: LD_VAR 0 3
56382: PPUSH
56383: LD_INT 0
56385: PPUSH
56386: CALL_OW 48
// end ;
56390: LD_VAR 0 5
56394: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56395: LD_INT 0
56397: PPUSH
56398: PPUSH
56399: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56400: LD_ADDR_VAR 0 2
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56423: LD_VAR 0 1
56427: NOT
56428: PUSH
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL_OW 264
56438: PUSH
56439: LD_INT 12
56441: PUSH
56442: LD_INT 51
56444: PUSH
56445: LD_INT 32
56447: PUSH
56448: LD_INT 89
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: IN
56457: NOT
56458: OR
56459: IFFALSE 56463
// exit ;
56461: GO 56561
// for i := 1 to 3 do
56463: LD_ADDR_VAR 0 3
56467: PUSH
56468: DOUBLE
56469: LD_INT 1
56471: DEC
56472: ST_TO_ADDR
56473: LD_INT 3
56475: PUSH
56476: FOR_TO
56477: IFFALSE 56559
// begin tmp := GetCargo ( cargo , i ) ;
56479: LD_ADDR_VAR 0 4
56483: PUSH
56484: LD_VAR 0 1
56488: PPUSH
56489: LD_VAR 0 3
56493: PPUSH
56494: CALL_OW 289
56498: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56499: LD_ADDR_VAR 0 2
56503: PUSH
56504: LD_VAR 0 2
56508: PPUSH
56509: LD_VAR 0 3
56513: PPUSH
56514: LD_VAR 0 4
56518: PPUSH
56519: CALL_OW 1
56523: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56524: LD_ADDR_VAR 0 2
56528: PUSH
56529: LD_VAR 0 2
56533: PPUSH
56534: LD_INT 4
56536: PPUSH
56537: LD_VAR 0 2
56541: PUSH
56542: LD_INT 4
56544: ARRAY
56545: PUSH
56546: LD_VAR 0 4
56550: PLUS
56551: PPUSH
56552: CALL_OW 1
56556: ST_TO_ADDR
// end ;
56557: GO 56476
56559: POP
56560: POP
// end ;
56561: LD_VAR 0 2
56565: RET
// export function Length ( array ) ; begin
56566: LD_INT 0
56568: PPUSH
// result := array + 0 ;
56569: LD_ADDR_VAR 0 2
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: LD_INT 0
56581: PLUS
56582: ST_TO_ADDR
// end ;
56583: LD_VAR 0 2
56587: RET
// export function PrepareArray ( array ) ; begin
56588: LD_INT 0
56590: PPUSH
// result := array diff 0 ;
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_VAR 0 1
56600: PUSH
56601: LD_INT 0
56603: DIFF
56604: ST_TO_ADDR
// if not result [ 1 ] then
56605: LD_VAR 0 2
56609: PUSH
56610: LD_INT 1
56612: ARRAY
56613: NOT
56614: IFFALSE 56634
// result := Delete ( result , 1 ) ;
56616: LD_ADDR_VAR 0 2
56620: PUSH
56621: LD_VAR 0 2
56625: PPUSH
56626: LD_INT 1
56628: PPUSH
56629: CALL_OW 3
56633: ST_TO_ADDR
// end ;
56634: LD_VAR 0 2
56638: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56639: LD_INT 0
56641: PPUSH
56642: PPUSH
56643: PPUSH
56644: PPUSH
// sibRocketRange := 25 ;
56645: LD_ADDR_VAR 0 6
56649: PUSH
56650: LD_INT 25
56652: ST_TO_ADDR
// result := false ;
56653: LD_ADDR_VAR 0 4
56657: PUSH
56658: LD_INT 0
56660: ST_TO_ADDR
// for i := 0 to 5 do
56661: LD_ADDR_VAR 0 5
56665: PUSH
56666: DOUBLE
56667: LD_INT 0
56669: DEC
56670: ST_TO_ADDR
56671: LD_INT 5
56673: PUSH
56674: FOR_TO
56675: IFFALSE 56742
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56677: LD_VAR 0 1
56681: PPUSH
56682: LD_VAR 0 5
56686: PPUSH
56687: LD_VAR 0 6
56691: PPUSH
56692: CALL_OW 272
56696: PPUSH
56697: LD_VAR 0 2
56701: PPUSH
56702: LD_VAR 0 5
56706: PPUSH
56707: LD_VAR 0 6
56711: PPUSH
56712: CALL_OW 273
56716: PPUSH
56717: LD_VAR 0 3
56721: PPUSH
56722: CALL_OW 309
56726: IFFALSE 56740
// begin result := true ;
56728: LD_ADDR_VAR 0 4
56732: PUSH
56733: LD_INT 1
56735: ST_TO_ADDR
// exit ;
56736: POP
56737: POP
56738: GO 56744
// end ;
56740: GO 56674
56742: POP
56743: POP
// end ;
56744: LD_VAR 0 4
56748: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56749: LD_INT 0
56751: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56752: LD_VAR 0 1
56756: PPUSH
56757: LD_VAR 0 2
56761: PPUSH
56762: LD_INT 0
56764: PPUSH
56765: LD_INT 0
56767: PPUSH
56768: LD_INT 1
56770: PPUSH
56771: LD_INT 0
56773: PPUSH
56774: CALL_OW 587
// end ; end_of_file
56778: LD_VAR 0 3
56782: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56783: LD_VAR 0 1
56787: PUSH
56788: LD_INT 200
56790: DOUBLE
56791: GREATEREQUAL
56792: IFFALSE 56800
56794: LD_INT 299
56796: DOUBLE
56797: LESSEQUAL
56798: IFTRUE 56802
56800: GO 56834
56802: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56803: LD_VAR 0 1
56807: PPUSH
56808: LD_VAR 0 2
56812: PPUSH
56813: LD_VAR 0 3
56817: PPUSH
56818: LD_VAR 0 4
56822: PPUSH
56823: LD_VAR 0 5
56827: PPUSH
56828: CALL 57322 0 5
56832: GO 56911
56834: LD_INT 300
56836: DOUBLE
56837: GREATEREQUAL
56838: IFFALSE 56846
56840: LD_INT 399
56842: DOUBLE
56843: LESSEQUAL
56844: IFTRUE 56848
56846: GO 56910
56848: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56849: LD_VAR 0 1
56853: PPUSH
56854: LD_VAR 0 2
56858: PPUSH
56859: LD_VAR 0 3
56863: PPUSH
56864: LD_VAR 0 4
56868: PPUSH
56869: LD_VAR 0 5
56873: PPUSH
56874: LD_VAR 0 6
56878: PPUSH
56879: LD_VAR 0 7
56883: PPUSH
56884: LD_VAR 0 8
56888: PPUSH
56889: LD_VAR 0 9
56893: PPUSH
56894: LD_VAR 0 10
56898: PPUSH
56899: LD_VAR 0 11
56903: PPUSH
56904: CALL 73738 0 11
56908: GO 56911
56910: POP
// end ;
56911: PPOPN 11
56913: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56914: LD_VAR 0 1
56918: PPUSH
56919: LD_VAR 0 2
56923: PPUSH
56924: LD_VAR 0 3
56928: PPUSH
56929: LD_VAR 0 4
56933: PPUSH
56934: LD_VAR 0 5
56938: PPUSH
56939: CALL 57058 0 5
// end ; end_of_file
56943: PPOPN 5
56945: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56946: LD_INT 0
56948: PPUSH
56949: PPUSH
56950: PPUSH
56951: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL_OW 264
56961: PUSH
56962: LD_INT 91
56964: EQUAL
56965: IFFALSE 57037
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56967: LD_INT 68
56969: PPUSH
56970: LD_VAR 0 1
56974: PPUSH
56975: CALL_OW 255
56979: PPUSH
56980: CALL_OW 321
56984: PUSH
56985: LD_INT 2
56987: EQUAL
56988: IFFALSE 57000
// eff := 70 else
56990: LD_ADDR_VAR 0 4
56994: PUSH
56995: LD_INT 70
56997: ST_TO_ADDR
56998: GO 57008
// eff := 30 ;
57000: LD_ADDR_VAR 0 4
57004: PUSH
57005: LD_INT 30
57007: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57008: LD_VAR 0 1
57012: PPUSH
57013: CALL_OW 250
57017: PPUSH
57018: LD_VAR 0 1
57022: PPUSH
57023: CALL_OW 251
57027: PPUSH
57028: LD_VAR 0 4
57032: PPUSH
57033: CALL_OW 495
// end ; end ;
57037: LD_VAR 0 2
57041: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57042: LD_INT 0
57044: PPUSH
// end ;
57045: LD_VAR 0 4
57049: RET
// export function SOS_Command ( cmd ) ; begin
57050: LD_INT 0
57052: PPUSH
// end ;
57053: LD_VAR 0 2
57057: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57058: LD_INT 0
57060: PPUSH
// end ;
57061: LD_VAR 0 6
57065: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57066: LD_INT 0
57068: PPUSH
57069: PPUSH
// if not vehicle or not factory then
57070: LD_VAR 0 1
57074: NOT
57075: PUSH
57076: LD_VAR 0 2
57080: NOT
57081: OR
57082: IFFALSE 57086
// exit ;
57084: GO 57317
// if factoryWaypoints >= factory then
57086: LD_EXP 102
57090: PUSH
57091: LD_VAR 0 2
57095: GREATEREQUAL
57096: IFFALSE 57317
// if factoryWaypoints [ factory ] then
57098: LD_EXP 102
57102: PUSH
57103: LD_VAR 0 2
57107: ARRAY
57108: IFFALSE 57317
// begin if GetControl ( vehicle ) = control_manual then
57110: LD_VAR 0 1
57114: PPUSH
57115: CALL_OW 263
57119: PUSH
57120: LD_INT 1
57122: EQUAL
57123: IFFALSE 57204
// begin driver := IsDrivenBy ( vehicle ) ;
57125: LD_ADDR_VAR 0 4
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 311
57139: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57140: LD_VAR 0 4
57144: PPUSH
57145: LD_EXP 102
57149: PUSH
57150: LD_VAR 0 2
57154: ARRAY
57155: PUSH
57156: LD_INT 3
57158: ARRAY
57159: PPUSH
57160: LD_EXP 102
57164: PUSH
57165: LD_VAR 0 2
57169: ARRAY
57170: PUSH
57171: LD_INT 4
57173: ARRAY
57174: PPUSH
57175: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57179: LD_VAR 0 4
57183: PPUSH
57184: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57188: LD_VAR 0 4
57192: PPUSH
57193: LD_VAR 0 2
57197: PPUSH
57198: CALL_OW 180
// end else
57202: GO 57317
// if GetControl ( vehicle ) = control_remote then
57204: LD_VAR 0 1
57208: PPUSH
57209: CALL_OW 263
57213: PUSH
57214: LD_INT 2
57216: EQUAL
57217: IFFALSE 57278
// begin wait ( 0 0$2 ) ;
57219: LD_INT 70
57221: PPUSH
57222: CALL_OW 67
// if Connect ( vehicle ) then
57226: LD_VAR 0 1
57230: PPUSH
57231: CALL 23468 0 1
57235: IFFALSE 57276
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57237: LD_VAR 0 1
57241: PPUSH
57242: LD_EXP 102
57246: PUSH
57247: LD_VAR 0 2
57251: ARRAY
57252: PUSH
57253: LD_INT 3
57255: ARRAY
57256: PPUSH
57257: LD_EXP 102
57261: PUSH
57262: LD_VAR 0 2
57266: ARRAY
57267: PUSH
57268: LD_INT 4
57270: ARRAY
57271: PPUSH
57272: CALL_OW 171
// end else
57276: GO 57317
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57278: LD_VAR 0 1
57282: PPUSH
57283: LD_EXP 102
57287: PUSH
57288: LD_VAR 0 2
57292: ARRAY
57293: PUSH
57294: LD_INT 3
57296: ARRAY
57297: PPUSH
57298: LD_EXP 102
57302: PUSH
57303: LD_VAR 0 2
57307: ARRAY
57308: PUSH
57309: LD_INT 4
57311: ARRAY
57312: PPUSH
57313: CALL_OW 171
// end ; end ;
57317: LD_VAR 0 3
57321: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57322: LD_INT 0
57324: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57325: LD_VAR 0 1
57329: PUSH
57330: LD_INT 250
57332: EQUAL
57333: PUSH
57334: LD_VAR 0 2
57338: PPUSH
57339: CALL_OW 264
57343: PUSH
57344: LD_INT 81
57346: EQUAL
57347: AND
57348: IFFALSE 57369
// MinerPlaceMine ( unit , x , y ) ;
57350: LD_VAR 0 2
57354: PPUSH
57355: LD_VAR 0 4
57359: PPUSH
57360: LD_VAR 0 5
57364: PPUSH
57365: CALL 59754 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57369: LD_VAR 0 1
57373: PUSH
57374: LD_INT 251
57376: EQUAL
57377: PUSH
57378: LD_VAR 0 2
57382: PPUSH
57383: CALL_OW 264
57387: PUSH
57388: LD_INT 81
57390: EQUAL
57391: AND
57392: IFFALSE 57413
// MinerDetonateMine ( unit , x , y ) ;
57394: LD_VAR 0 2
57398: PPUSH
57399: LD_VAR 0 4
57403: PPUSH
57404: LD_VAR 0 5
57408: PPUSH
57409: CALL 60029 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57413: LD_VAR 0 1
57417: PUSH
57418: LD_INT 252
57420: EQUAL
57421: PUSH
57422: LD_VAR 0 2
57426: PPUSH
57427: CALL_OW 264
57431: PUSH
57432: LD_INT 81
57434: EQUAL
57435: AND
57436: IFFALSE 57457
// MinerCreateMinefield ( unit , x , y ) ;
57438: LD_VAR 0 2
57442: PPUSH
57443: LD_VAR 0 4
57447: PPUSH
57448: LD_VAR 0 5
57452: PPUSH
57453: CALL 60446 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57457: LD_VAR 0 1
57461: PUSH
57462: LD_INT 253
57464: EQUAL
57465: PUSH
57466: LD_VAR 0 2
57470: PPUSH
57471: CALL_OW 257
57475: PUSH
57476: LD_INT 5
57478: EQUAL
57479: AND
57480: IFFALSE 57501
// ComBinocular ( unit , x , y ) ;
57482: LD_VAR 0 2
57486: PPUSH
57487: LD_VAR 0 4
57491: PPUSH
57492: LD_VAR 0 5
57496: PPUSH
57497: CALL 60815 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57501: LD_VAR 0 1
57505: PUSH
57506: LD_INT 254
57508: EQUAL
57509: PUSH
57510: LD_VAR 0 2
57514: PPUSH
57515: CALL_OW 264
57519: PUSH
57520: LD_INT 99
57522: EQUAL
57523: AND
57524: PUSH
57525: LD_VAR 0 3
57529: PPUSH
57530: CALL_OW 263
57534: PUSH
57535: LD_INT 3
57537: EQUAL
57538: AND
57539: IFFALSE 57555
// HackDestroyVehicle ( unit , selectedUnit ) ;
57541: LD_VAR 0 2
57545: PPUSH
57546: LD_VAR 0 3
57550: PPUSH
57551: CALL 59118 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57555: LD_VAR 0 1
57559: PUSH
57560: LD_INT 255
57562: EQUAL
57563: PUSH
57564: LD_VAR 0 2
57568: PPUSH
57569: CALL_OW 264
57573: PUSH
57574: LD_INT 14
57576: PUSH
57577: LD_INT 53
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: IN
57584: AND
57585: PUSH
57586: LD_VAR 0 4
57590: PPUSH
57591: LD_VAR 0 5
57595: PPUSH
57596: CALL_OW 488
57600: AND
57601: IFFALSE 57625
// CutTreeXYR ( unit , x , y , 12 ) ;
57603: LD_VAR 0 2
57607: PPUSH
57608: LD_VAR 0 4
57612: PPUSH
57613: LD_VAR 0 5
57617: PPUSH
57618: LD_INT 12
57620: PPUSH
57621: CALL 57688 0 4
// if cmd = 256 then
57625: LD_VAR 0 1
57629: PUSH
57630: LD_INT 256
57632: EQUAL
57633: IFFALSE 57654
// SetFactoryWaypoint ( unit , x , y ) ;
57635: LD_VAR 0 2
57639: PPUSH
57640: LD_VAR 0 4
57644: PPUSH
57645: LD_VAR 0 5
57649: PPUSH
57650: CALL 75718 0 3
// if cmd = 257 then
57654: LD_VAR 0 1
57658: PUSH
57659: LD_INT 257
57661: EQUAL
57662: IFFALSE 57683
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57664: LD_VAR 0 2
57668: PPUSH
57669: LD_VAR 0 4
57673: PPUSH
57674: LD_VAR 0 5
57678: PPUSH
57679: CALL 76080 0 3
// end ;
57683: LD_VAR 0 6
57687: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57688: LD_INT 0
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
57694: PPUSH
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57699: LD_VAR 0 1
57703: NOT
57704: PUSH
57705: LD_VAR 0 2
57709: PPUSH
57710: LD_VAR 0 3
57714: PPUSH
57715: CALL_OW 488
57719: NOT
57720: OR
57721: PUSH
57722: LD_VAR 0 4
57726: NOT
57727: OR
57728: IFFALSE 57732
// exit ;
57730: GO 58072
// list := [ ] ;
57732: LD_ADDR_VAR 0 13
57736: PUSH
57737: EMPTY
57738: ST_TO_ADDR
// if x - r < 0 then
57739: LD_VAR 0 2
57743: PUSH
57744: LD_VAR 0 4
57748: MINUS
57749: PUSH
57750: LD_INT 0
57752: LESS
57753: IFFALSE 57765
// min_x := 0 else
57755: LD_ADDR_VAR 0 7
57759: PUSH
57760: LD_INT 0
57762: ST_TO_ADDR
57763: GO 57781
// min_x := x - r ;
57765: LD_ADDR_VAR 0 7
57769: PUSH
57770: LD_VAR 0 2
57774: PUSH
57775: LD_VAR 0 4
57779: MINUS
57780: ST_TO_ADDR
// if y - r < 0 then
57781: LD_VAR 0 3
57785: PUSH
57786: LD_VAR 0 4
57790: MINUS
57791: PUSH
57792: LD_INT 0
57794: LESS
57795: IFFALSE 57807
// min_y := 0 else
57797: LD_ADDR_VAR 0 8
57801: PUSH
57802: LD_INT 0
57804: ST_TO_ADDR
57805: GO 57823
// min_y := y - r ;
57807: LD_ADDR_VAR 0 8
57811: PUSH
57812: LD_VAR 0 3
57816: PUSH
57817: LD_VAR 0 4
57821: MINUS
57822: ST_TO_ADDR
// max_x := x + r ;
57823: LD_ADDR_VAR 0 9
57827: PUSH
57828: LD_VAR 0 2
57832: PUSH
57833: LD_VAR 0 4
57837: PLUS
57838: ST_TO_ADDR
// max_y := y + r ;
57839: LD_ADDR_VAR 0 10
57843: PUSH
57844: LD_VAR 0 3
57848: PUSH
57849: LD_VAR 0 4
57853: PLUS
57854: ST_TO_ADDR
// for _x = min_x to max_x do
57855: LD_ADDR_VAR 0 11
57859: PUSH
57860: DOUBLE
57861: LD_VAR 0 7
57865: DEC
57866: ST_TO_ADDR
57867: LD_VAR 0 9
57871: PUSH
57872: FOR_TO
57873: IFFALSE 57990
// for _y = min_y to max_y do
57875: LD_ADDR_VAR 0 12
57879: PUSH
57880: DOUBLE
57881: LD_VAR 0 8
57885: DEC
57886: ST_TO_ADDR
57887: LD_VAR 0 10
57891: PUSH
57892: FOR_TO
57893: IFFALSE 57986
// begin if not ValidHex ( _x , _y ) then
57895: LD_VAR 0 11
57899: PPUSH
57900: LD_VAR 0 12
57904: PPUSH
57905: CALL_OW 488
57909: NOT
57910: IFFALSE 57914
// continue ;
57912: GO 57892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57914: LD_VAR 0 11
57918: PPUSH
57919: LD_VAR 0 12
57923: PPUSH
57924: CALL_OW 351
57928: PUSH
57929: LD_VAR 0 11
57933: PPUSH
57934: LD_VAR 0 12
57938: PPUSH
57939: CALL_OW 554
57943: AND
57944: IFFALSE 57984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57946: LD_ADDR_VAR 0 13
57950: PUSH
57951: LD_VAR 0 13
57955: PPUSH
57956: LD_VAR 0 13
57960: PUSH
57961: LD_INT 1
57963: PLUS
57964: PPUSH
57965: LD_VAR 0 11
57969: PUSH
57970: LD_VAR 0 12
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PPUSH
57979: CALL_OW 2
57983: ST_TO_ADDR
// end ;
57984: GO 57892
57986: POP
57987: POP
57988: GO 57872
57990: POP
57991: POP
// if not list then
57992: LD_VAR 0 13
57996: NOT
57997: IFFALSE 58001
// exit ;
57999: GO 58072
// for i in list do
58001: LD_ADDR_VAR 0 6
58005: PUSH
58006: LD_VAR 0 13
58010: PUSH
58011: FOR_IN
58012: IFFALSE 58070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58014: LD_VAR 0 1
58018: PPUSH
58019: LD_STRING M
58021: PUSH
58022: LD_VAR 0 6
58026: PUSH
58027: LD_INT 1
58029: ARRAY
58030: PUSH
58031: LD_VAR 0 6
58035: PUSH
58036: LD_INT 2
58038: ARRAY
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: PUSH
58061: EMPTY
58062: LIST
58063: PPUSH
58064: CALL_OW 447
58068: GO 58011
58070: POP
58071: POP
// end ;
58072: LD_VAR 0 5
58076: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58077: LD_EXP 33
58081: NOT
58082: IFFALSE 58132
58084: GO 58086
58086: DISABLE
// begin initHack := true ;
58087: LD_ADDR_EXP 33
58091: PUSH
58092: LD_INT 1
58094: ST_TO_ADDR
// hackTanks := [ ] ;
58095: LD_ADDR_EXP 34
58099: PUSH
58100: EMPTY
58101: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58102: LD_ADDR_EXP 35
58106: PUSH
58107: EMPTY
58108: ST_TO_ADDR
// hackLimit := 3 ;
58109: LD_ADDR_EXP 36
58113: PUSH
58114: LD_INT 3
58116: ST_TO_ADDR
// hackDist := 12 ;
58117: LD_ADDR_EXP 37
58121: PUSH
58122: LD_INT 12
58124: ST_TO_ADDR
// hackCounter := [ ] ;
58125: LD_ADDR_EXP 38
58129: PUSH
58130: EMPTY
58131: ST_TO_ADDR
// end ;
58132: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58133: LD_EXP 33
58137: PUSH
58138: LD_INT 34
58140: PUSH
58141: LD_INT 99
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PPUSH
58148: CALL_OW 69
58152: AND
58153: IFFALSE 58406
58155: GO 58157
58157: DISABLE
58158: LD_INT 0
58160: PPUSH
58161: PPUSH
// begin enable ;
58162: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58163: LD_ADDR_VAR 0 1
58167: PUSH
58168: LD_INT 34
58170: PUSH
58171: LD_INT 99
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PPUSH
58178: CALL_OW 69
58182: PUSH
58183: FOR_IN
58184: IFFALSE 58404
// begin if not i in hackTanks then
58186: LD_VAR 0 1
58190: PUSH
58191: LD_EXP 34
58195: IN
58196: NOT
58197: IFFALSE 58280
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58199: LD_ADDR_EXP 34
58203: PUSH
58204: LD_EXP 34
58208: PPUSH
58209: LD_EXP 34
58213: PUSH
58214: LD_INT 1
58216: PLUS
58217: PPUSH
58218: LD_VAR 0 1
58222: PPUSH
58223: CALL_OW 1
58227: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58228: LD_ADDR_EXP 35
58232: PUSH
58233: LD_EXP 35
58237: PPUSH
58238: LD_EXP 35
58242: PUSH
58243: LD_INT 1
58245: PLUS
58246: PPUSH
58247: EMPTY
58248: PPUSH
58249: CALL_OW 1
58253: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58254: LD_ADDR_EXP 38
58258: PUSH
58259: LD_EXP 38
58263: PPUSH
58264: LD_EXP 38
58268: PUSH
58269: LD_INT 1
58271: PLUS
58272: PPUSH
58273: EMPTY
58274: PPUSH
58275: CALL_OW 1
58279: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58280: LD_VAR 0 1
58284: PPUSH
58285: CALL_OW 302
58289: NOT
58290: IFFALSE 58303
// begin HackUnlinkAll ( i ) ;
58292: LD_VAR 0 1
58296: PPUSH
58297: CALL 58409 0 1
// continue ;
58301: GO 58183
// end ; HackCheckCapturedStatus ( i ) ;
58303: LD_VAR 0 1
58307: PPUSH
58308: CALL 58852 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58312: LD_ADDR_VAR 0 2
58316: PUSH
58317: LD_INT 81
58319: PUSH
58320: LD_VAR 0 1
58324: PPUSH
58325: CALL_OW 255
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 33
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 91
58346: PUSH
58347: LD_VAR 0 1
58351: PUSH
58352: LD_EXP 37
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 50
58364: PUSH
58365: EMPTY
58366: LIST
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: PPUSH
58374: CALL_OW 69
58378: ST_TO_ADDR
// if not tmp then
58379: LD_VAR 0 2
58383: NOT
58384: IFFALSE 58388
// continue ;
58386: GO 58183
// HackLink ( i , tmp ) ;
58388: LD_VAR 0 1
58392: PPUSH
58393: LD_VAR 0 2
58397: PPUSH
58398: CALL 58545 0 2
// end ;
58402: GO 58183
58404: POP
58405: POP
// end ;
58406: PPOPN 2
58408: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58409: LD_INT 0
58411: PPUSH
58412: PPUSH
58413: PPUSH
// if not hack in hackTanks then
58414: LD_VAR 0 1
58418: PUSH
58419: LD_EXP 34
58423: IN
58424: NOT
58425: IFFALSE 58429
// exit ;
58427: GO 58540
// index := GetElementIndex ( hackTanks , hack ) ;
58429: LD_ADDR_VAR 0 4
58433: PUSH
58434: LD_EXP 34
58438: PPUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: CALL 20284 0 2
58448: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58449: LD_EXP 35
58453: PUSH
58454: LD_VAR 0 4
58458: ARRAY
58459: IFFALSE 58540
// begin for i in hackTanksCaptured [ index ] do
58461: LD_ADDR_VAR 0 3
58465: PUSH
58466: LD_EXP 35
58470: PUSH
58471: LD_VAR 0 4
58475: ARRAY
58476: PUSH
58477: FOR_IN
58478: IFFALSE 58504
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58480: LD_VAR 0 3
58484: PUSH
58485: LD_INT 1
58487: ARRAY
58488: PPUSH
58489: LD_VAR 0 3
58493: PUSH
58494: LD_INT 2
58496: ARRAY
58497: PPUSH
58498: CALL_OW 235
58502: GO 58477
58504: POP
58505: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58506: LD_ADDR_EXP 35
58510: PUSH
58511: LD_EXP 35
58515: PPUSH
58516: LD_VAR 0 4
58520: PPUSH
58521: EMPTY
58522: PPUSH
58523: CALL_OW 1
58527: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58528: LD_VAR 0 1
58532: PPUSH
58533: LD_INT 0
58535: PPUSH
58536: CALL_OW 505
// end ; end ;
58540: LD_VAR 0 2
58544: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58545: LD_INT 0
58547: PPUSH
58548: PPUSH
58549: PPUSH
// if not hack in hackTanks or not vehicles then
58550: LD_VAR 0 1
58554: PUSH
58555: LD_EXP 34
58559: IN
58560: NOT
58561: PUSH
58562: LD_VAR 0 2
58566: NOT
58567: OR
58568: IFFALSE 58572
// exit ;
58570: GO 58847
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58572: LD_ADDR_VAR 0 2
58576: PUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: LD_VAR 0 2
58586: PPUSH
58587: LD_INT 1
58589: PPUSH
58590: LD_INT 1
58592: PPUSH
58593: CALL 20934 0 4
58597: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58598: LD_ADDR_VAR 0 5
58602: PUSH
58603: LD_EXP 34
58607: PPUSH
58608: LD_VAR 0 1
58612: PPUSH
58613: CALL 20284 0 2
58617: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58618: LD_EXP 35
58622: PUSH
58623: LD_VAR 0 5
58627: ARRAY
58628: PUSH
58629: LD_EXP 36
58633: LESS
58634: IFFALSE 58823
// begin for i := 1 to vehicles do
58636: LD_ADDR_VAR 0 4
58640: PUSH
58641: DOUBLE
58642: LD_INT 1
58644: DEC
58645: ST_TO_ADDR
58646: LD_VAR 0 2
58650: PUSH
58651: FOR_TO
58652: IFFALSE 58821
// begin if hackTanksCaptured [ index ] = hackLimit then
58654: LD_EXP 35
58658: PUSH
58659: LD_VAR 0 5
58663: ARRAY
58664: PUSH
58665: LD_EXP 36
58669: EQUAL
58670: IFFALSE 58674
// break ;
58672: GO 58821
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58674: LD_ADDR_EXP 38
58678: PUSH
58679: LD_EXP 38
58683: PPUSH
58684: LD_VAR 0 5
58688: PPUSH
58689: LD_EXP 38
58693: PUSH
58694: LD_VAR 0 5
58698: ARRAY
58699: PUSH
58700: LD_INT 1
58702: PLUS
58703: PPUSH
58704: CALL_OW 1
58708: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58709: LD_ADDR_EXP 35
58713: PUSH
58714: LD_EXP 35
58718: PPUSH
58719: LD_VAR 0 5
58723: PUSH
58724: LD_EXP 35
58728: PUSH
58729: LD_VAR 0 5
58733: ARRAY
58734: PUSH
58735: LD_INT 1
58737: PLUS
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PPUSH
58743: LD_VAR 0 2
58747: PUSH
58748: LD_VAR 0 4
58752: ARRAY
58753: PUSH
58754: LD_VAR 0 2
58758: PUSH
58759: LD_VAR 0 4
58763: ARRAY
58764: PPUSH
58765: CALL_OW 255
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PPUSH
58774: CALL 20499 0 3
58778: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58779: LD_VAR 0 2
58783: PUSH
58784: LD_VAR 0 4
58788: ARRAY
58789: PPUSH
58790: LD_VAR 0 1
58794: PPUSH
58795: CALL_OW 255
58799: PPUSH
58800: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58804: LD_VAR 0 2
58808: PUSH
58809: LD_VAR 0 4
58813: ARRAY
58814: PPUSH
58815: CALL_OW 141
// end ;
58819: GO 58651
58821: POP
58822: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58823: LD_VAR 0 1
58827: PPUSH
58828: LD_EXP 35
58832: PUSH
58833: LD_VAR 0 5
58837: ARRAY
58838: PUSH
58839: LD_INT 0
58841: PLUS
58842: PPUSH
58843: CALL_OW 505
// end ;
58847: LD_VAR 0 3
58851: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58852: LD_INT 0
58854: PPUSH
58855: PPUSH
58856: PPUSH
58857: PPUSH
// if not hack in hackTanks then
58858: LD_VAR 0 1
58862: PUSH
58863: LD_EXP 34
58867: IN
58868: NOT
58869: IFFALSE 58873
// exit ;
58871: GO 59113
// index := GetElementIndex ( hackTanks , hack ) ;
58873: LD_ADDR_VAR 0 4
58877: PUSH
58878: LD_EXP 34
58882: PPUSH
58883: LD_VAR 0 1
58887: PPUSH
58888: CALL 20284 0 2
58892: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58893: LD_ADDR_VAR 0 3
58897: PUSH
58898: DOUBLE
58899: LD_EXP 35
58903: PUSH
58904: LD_VAR 0 4
58908: ARRAY
58909: INC
58910: ST_TO_ADDR
58911: LD_INT 1
58913: PUSH
58914: FOR_DOWNTO
58915: IFFALSE 59087
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58917: LD_ADDR_VAR 0 5
58921: PUSH
58922: LD_EXP 35
58926: PUSH
58927: LD_VAR 0 4
58931: ARRAY
58932: PUSH
58933: LD_VAR 0 3
58937: ARRAY
58938: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58939: LD_VAR 0 5
58943: PUSH
58944: LD_INT 1
58946: ARRAY
58947: PPUSH
58948: CALL_OW 302
58952: NOT
58953: PUSH
58954: LD_VAR 0 5
58958: PUSH
58959: LD_INT 1
58961: ARRAY
58962: PPUSH
58963: CALL_OW 255
58967: PUSH
58968: LD_VAR 0 1
58972: PPUSH
58973: CALL_OW 255
58977: NONEQUAL
58978: OR
58979: IFFALSE 59085
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58981: LD_VAR 0 5
58985: PUSH
58986: LD_INT 1
58988: ARRAY
58989: PPUSH
58990: CALL_OW 305
58994: PUSH
58995: LD_VAR 0 5
58999: PUSH
59000: LD_INT 1
59002: ARRAY
59003: PPUSH
59004: CALL_OW 255
59008: PUSH
59009: LD_VAR 0 1
59013: PPUSH
59014: CALL_OW 255
59018: EQUAL
59019: AND
59020: IFFALSE 59044
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59022: LD_VAR 0 5
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PPUSH
59031: LD_VAR 0 5
59035: PUSH
59036: LD_INT 2
59038: ARRAY
59039: PPUSH
59040: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59044: LD_ADDR_EXP 35
59048: PUSH
59049: LD_EXP 35
59053: PPUSH
59054: LD_VAR 0 4
59058: PPUSH
59059: LD_EXP 35
59063: PUSH
59064: LD_VAR 0 4
59068: ARRAY
59069: PPUSH
59070: LD_VAR 0 3
59074: PPUSH
59075: CALL_OW 3
59079: PPUSH
59080: CALL_OW 1
59084: ST_TO_ADDR
// end ; end ;
59085: GO 58914
59087: POP
59088: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59089: LD_VAR 0 1
59093: PPUSH
59094: LD_EXP 35
59098: PUSH
59099: LD_VAR 0 4
59103: ARRAY
59104: PUSH
59105: LD_INT 0
59107: PLUS
59108: PPUSH
59109: CALL_OW 505
// end ;
59113: LD_VAR 0 2
59117: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59118: LD_INT 0
59120: PPUSH
59121: PPUSH
59122: PPUSH
59123: PPUSH
// if not hack in hackTanks then
59124: LD_VAR 0 1
59128: PUSH
59129: LD_EXP 34
59133: IN
59134: NOT
59135: IFFALSE 59139
// exit ;
59137: GO 59224
// index := GetElementIndex ( hackTanks , hack ) ;
59139: LD_ADDR_VAR 0 5
59143: PUSH
59144: LD_EXP 34
59148: PPUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: CALL 20284 0 2
59158: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59159: LD_ADDR_VAR 0 4
59163: PUSH
59164: DOUBLE
59165: LD_INT 1
59167: DEC
59168: ST_TO_ADDR
59169: LD_EXP 35
59173: PUSH
59174: LD_VAR 0 5
59178: ARRAY
59179: PUSH
59180: FOR_TO
59181: IFFALSE 59222
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59183: LD_EXP 35
59187: PUSH
59188: LD_VAR 0 5
59192: ARRAY
59193: PUSH
59194: LD_VAR 0 4
59198: ARRAY
59199: PUSH
59200: LD_INT 1
59202: ARRAY
59203: PUSH
59204: LD_VAR 0 2
59208: EQUAL
59209: IFFALSE 59220
// KillUnit ( vehicle ) ;
59211: LD_VAR 0 2
59215: PPUSH
59216: CALL_OW 66
59220: GO 59180
59222: POP
59223: POP
// end ;
59224: LD_VAR 0 3
59228: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59229: LD_EXP 39
59233: NOT
59234: IFFALSE 59269
59236: GO 59238
59238: DISABLE
// begin initMiner := true ;
59239: LD_ADDR_EXP 39
59243: PUSH
59244: LD_INT 1
59246: ST_TO_ADDR
// minersList := [ ] ;
59247: LD_ADDR_EXP 40
59251: PUSH
59252: EMPTY
59253: ST_TO_ADDR
// minerMinesList := [ ] ;
59254: LD_ADDR_EXP 41
59258: PUSH
59259: EMPTY
59260: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59261: LD_ADDR_EXP 42
59265: PUSH
59266: LD_INT 5
59268: ST_TO_ADDR
// end ;
59269: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59270: LD_EXP 39
59274: PUSH
59275: LD_INT 34
59277: PUSH
59278: LD_INT 81
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PPUSH
59285: CALL_OW 69
59289: AND
59290: IFFALSE 59751
59292: GO 59294
59294: DISABLE
59295: LD_INT 0
59297: PPUSH
59298: PPUSH
59299: PPUSH
59300: PPUSH
// begin enable ;
59301: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59302: LD_ADDR_VAR 0 1
59306: PUSH
59307: LD_INT 34
59309: PUSH
59310: LD_INT 81
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PPUSH
59317: CALL_OW 69
59321: PUSH
59322: FOR_IN
59323: IFFALSE 59395
// begin if not i in minersList then
59325: LD_VAR 0 1
59329: PUSH
59330: LD_EXP 40
59334: IN
59335: NOT
59336: IFFALSE 59393
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59338: LD_ADDR_EXP 40
59342: PUSH
59343: LD_EXP 40
59347: PPUSH
59348: LD_EXP 40
59352: PUSH
59353: LD_INT 1
59355: PLUS
59356: PPUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 1
59366: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59367: LD_ADDR_EXP 41
59371: PUSH
59372: LD_EXP 41
59376: PPUSH
59377: LD_EXP 41
59381: PUSH
59382: LD_INT 1
59384: PLUS
59385: PPUSH
59386: EMPTY
59387: PPUSH
59388: CALL_OW 1
59392: ST_TO_ADDR
// end end ;
59393: GO 59322
59395: POP
59396: POP
// for i := minerMinesList downto 1 do
59397: LD_ADDR_VAR 0 1
59401: PUSH
59402: DOUBLE
59403: LD_EXP 41
59407: INC
59408: ST_TO_ADDR
59409: LD_INT 1
59411: PUSH
59412: FOR_DOWNTO
59413: IFFALSE 59749
// begin if IsLive ( minersList [ i ] ) then
59415: LD_EXP 40
59419: PUSH
59420: LD_VAR 0 1
59424: ARRAY
59425: PPUSH
59426: CALL_OW 300
59430: IFFALSE 59458
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59432: LD_EXP 40
59436: PUSH
59437: LD_VAR 0 1
59441: ARRAY
59442: PPUSH
59443: LD_EXP 41
59447: PUSH
59448: LD_VAR 0 1
59452: ARRAY
59453: PPUSH
59454: CALL_OW 505
// if not minerMinesList [ i ] then
59458: LD_EXP 41
59462: PUSH
59463: LD_VAR 0 1
59467: ARRAY
59468: NOT
59469: IFFALSE 59473
// continue ;
59471: GO 59412
// for j := minerMinesList [ i ] downto 1 do
59473: LD_ADDR_VAR 0 2
59477: PUSH
59478: DOUBLE
59479: LD_EXP 41
59483: PUSH
59484: LD_VAR 0 1
59488: ARRAY
59489: INC
59490: ST_TO_ADDR
59491: LD_INT 1
59493: PUSH
59494: FOR_DOWNTO
59495: IFFALSE 59745
// begin side := GetSide ( minersList [ i ] ) ;
59497: LD_ADDR_VAR 0 3
59501: PUSH
59502: LD_EXP 40
59506: PUSH
59507: LD_VAR 0 1
59511: ARRAY
59512: PPUSH
59513: CALL_OW 255
59517: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59518: LD_ADDR_VAR 0 4
59522: PUSH
59523: LD_EXP 41
59527: PUSH
59528: LD_VAR 0 1
59532: ARRAY
59533: PUSH
59534: LD_VAR 0 2
59538: ARRAY
59539: PUSH
59540: LD_INT 1
59542: ARRAY
59543: PPUSH
59544: LD_EXP 41
59548: PUSH
59549: LD_VAR 0 1
59553: ARRAY
59554: PUSH
59555: LD_VAR 0 2
59559: ARRAY
59560: PUSH
59561: LD_INT 2
59563: ARRAY
59564: PPUSH
59565: CALL_OW 428
59569: ST_TO_ADDR
// if not tmp then
59570: LD_VAR 0 4
59574: NOT
59575: IFFALSE 59579
// continue ;
59577: GO 59494
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59579: LD_VAR 0 4
59583: PUSH
59584: LD_INT 81
59586: PUSH
59587: LD_VAR 0 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PPUSH
59596: CALL_OW 69
59600: IN
59601: PUSH
59602: LD_EXP 41
59606: PUSH
59607: LD_VAR 0 1
59611: ARRAY
59612: PUSH
59613: LD_VAR 0 2
59617: ARRAY
59618: PUSH
59619: LD_INT 1
59621: ARRAY
59622: PPUSH
59623: LD_EXP 41
59627: PUSH
59628: LD_VAR 0 1
59632: ARRAY
59633: PUSH
59634: LD_VAR 0 2
59638: ARRAY
59639: PUSH
59640: LD_INT 2
59642: ARRAY
59643: PPUSH
59644: CALL_OW 458
59648: AND
59649: IFFALSE 59743
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59651: LD_EXP 41
59655: PUSH
59656: LD_VAR 0 1
59660: ARRAY
59661: PUSH
59662: LD_VAR 0 2
59666: ARRAY
59667: PUSH
59668: LD_INT 1
59670: ARRAY
59671: PPUSH
59672: LD_EXP 41
59676: PUSH
59677: LD_VAR 0 1
59681: ARRAY
59682: PUSH
59683: LD_VAR 0 2
59687: ARRAY
59688: PUSH
59689: LD_INT 2
59691: ARRAY
59692: PPUSH
59693: LD_VAR 0 3
59697: PPUSH
59698: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59702: LD_ADDR_EXP 41
59706: PUSH
59707: LD_EXP 41
59711: PPUSH
59712: LD_VAR 0 1
59716: PPUSH
59717: LD_EXP 41
59721: PUSH
59722: LD_VAR 0 1
59726: ARRAY
59727: PPUSH
59728: LD_VAR 0 2
59732: PPUSH
59733: CALL_OW 3
59737: PPUSH
59738: CALL_OW 1
59742: ST_TO_ADDR
// end ; end ;
59743: GO 59494
59745: POP
59746: POP
// end ;
59747: GO 59412
59749: POP
59750: POP
// end ;
59751: PPOPN 4
59753: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59754: LD_INT 0
59756: PPUSH
59757: PPUSH
// result := false ;
59758: LD_ADDR_VAR 0 4
59762: PUSH
59763: LD_INT 0
59765: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59766: LD_VAR 0 1
59770: PPUSH
59771: CALL_OW 264
59775: PUSH
59776: LD_INT 81
59778: EQUAL
59779: NOT
59780: IFFALSE 59784
// exit ;
59782: GO 60024
// index := GetElementIndex ( minersList , unit ) ;
59784: LD_ADDR_VAR 0 5
59788: PUSH
59789: LD_EXP 40
59793: PPUSH
59794: LD_VAR 0 1
59798: PPUSH
59799: CALL 20284 0 2
59803: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59804: LD_EXP 41
59808: PUSH
59809: LD_VAR 0 5
59813: ARRAY
59814: PUSH
59815: LD_EXP 42
59819: GREATEREQUAL
59820: IFFALSE 59824
// exit ;
59822: GO 60024
// ComMoveXY ( unit , x , y ) ;
59824: LD_VAR 0 1
59828: PPUSH
59829: LD_VAR 0 2
59833: PPUSH
59834: LD_VAR 0 3
59838: PPUSH
59839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59843: LD_INT 35
59845: PPUSH
59846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59850: LD_VAR 0 1
59854: PPUSH
59855: LD_VAR 0 2
59859: PPUSH
59860: LD_VAR 0 3
59864: PPUSH
59865: CALL 51639 0 3
59869: NOT
59870: PUSH
59871: LD_VAR 0 1
59875: PPUSH
59876: CALL_OW 314
59880: AND
59881: IFFALSE 59885
// exit ;
59883: GO 60024
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59885: LD_VAR 0 2
59889: PPUSH
59890: LD_VAR 0 3
59894: PPUSH
59895: CALL_OW 428
59899: PUSH
59900: LD_VAR 0 1
59904: EQUAL
59905: PUSH
59906: LD_VAR 0 1
59910: PPUSH
59911: CALL_OW 314
59915: NOT
59916: AND
59917: IFFALSE 59843
// PlaySoundXY ( x , y , PlantMine ) ;
59919: LD_VAR 0 2
59923: PPUSH
59924: LD_VAR 0 3
59928: PPUSH
59929: LD_STRING PlantMine
59931: PPUSH
59932: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59936: LD_VAR 0 2
59940: PPUSH
59941: LD_VAR 0 3
59945: PPUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 255
59955: PPUSH
59956: LD_INT 0
59958: PPUSH
59959: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59963: LD_ADDR_EXP 41
59967: PUSH
59968: LD_EXP 41
59972: PPUSH
59973: LD_VAR 0 5
59977: PUSH
59978: LD_EXP 41
59982: PUSH
59983: LD_VAR 0 5
59987: ARRAY
59988: PUSH
59989: LD_INT 1
59991: PLUS
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PPUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_VAR 0 3
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PPUSH
60011: CALL 20499 0 3
60015: ST_TO_ADDR
// result := true ;
60016: LD_ADDR_VAR 0 4
60020: PUSH
60021: LD_INT 1
60023: ST_TO_ADDR
// end ;
60024: LD_VAR 0 4
60028: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60029: LD_INT 0
60031: PPUSH
60032: PPUSH
60033: PPUSH
// if not unit in minersList then
60034: LD_VAR 0 1
60038: PUSH
60039: LD_EXP 40
60043: IN
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60441
// index := GetElementIndex ( minersList , unit ) ;
60049: LD_ADDR_VAR 0 6
60053: PUSH
60054: LD_EXP 40
60058: PPUSH
60059: LD_VAR 0 1
60063: PPUSH
60064: CALL 20284 0 2
60068: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60069: LD_ADDR_VAR 0 5
60073: PUSH
60074: DOUBLE
60075: LD_EXP 41
60079: PUSH
60080: LD_VAR 0 6
60084: ARRAY
60085: INC
60086: ST_TO_ADDR
60087: LD_INT 1
60089: PUSH
60090: FOR_DOWNTO
60091: IFFALSE 60252
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60093: LD_EXP 41
60097: PUSH
60098: LD_VAR 0 6
60102: ARRAY
60103: PUSH
60104: LD_VAR 0 5
60108: ARRAY
60109: PUSH
60110: LD_INT 1
60112: ARRAY
60113: PUSH
60114: LD_VAR 0 2
60118: EQUAL
60119: PUSH
60120: LD_EXP 41
60124: PUSH
60125: LD_VAR 0 6
60129: ARRAY
60130: PUSH
60131: LD_VAR 0 5
60135: ARRAY
60136: PUSH
60137: LD_INT 2
60139: ARRAY
60140: PUSH
60141: LD_VAR 0 3
60145: EQUAL
60146: AND
60147: IFFALSE 60250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60149: LD_EXP 41
60153: PUSH
60154: LD_VAR 0 6
60158: ARRAY
60159: PUSH
60160: LD_VAR 0 5
60164: ARRAY
60165: PUSH
60166: LD_INT 1
60168: ARRAY
60169: PPUSH
60170: LD_EXP 41
60174: PUSH
60175: LD_VAR 0 6
60179: ARRAY
60180: PUSH
60181: LD_VAR 0 5
60185: ARRAY
60186: PUSH
60187: LD_INT 2
60189: ARRAY
60190: PPUSH
60191: LD_VAR 0 1
60195: PPUSH
60196: CALL_OW 255
60200: PPUSH
60201: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60205: LD_ADDR_EXP 41
60209: PUSH
60210: LD_EXP 41
60214: PPUSH
60215: LD_VAR 0 6
60219: PPUSH
60220: LD_EXP 41
60224: PUSH
60225: LD_VAR 0 6
60229: ARRAY
60230: PPUSH
60231: LD_VAR 0 5
60235: PPUSH
60236: CALL_OW 3
60240: PPUSH
60241: CALL_OW 1
60245: ST_TO_ADDR
// exit ;
60246: POP
60247: POP
60248: GO 60441
// end ; end ;
60250: GO 60090
60252: POP
60253: POP
// for i := minerMinesList [ index ] downto 1 do
60254: LD_ADDR_VAR 0 5
60258: PUSH
60259: DOUBLE
60260: LD_EXP 41
60264: PUSH
60265: LD_VAR 0 6
60269: ARRAY
60270: INC
60271: ST_TO_ADDR
60272: LD_INT 1
60274: PUSH
60275: FOR_DOWNTO
60276: IFFALSE 60439
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60278: LD_EXP 41
60282: PUSH
60283: LD_VAR 0 6
60287: ARRAY
60288: PUSH
60289: LD_VAR 0 5
60293: ARRAY
60294: PUSH
60295: LD_INT 1
60297: ARRAY
60298: PPUSH
60299: LD_EXP 41
60303: PUSH
60304: LD_VAR 0 6
60308: ARRAY
60309: PUSH
60310: LD_VAR 0 5
60314: ARRAY
60315: PUSH
60316: LD_INT 2
60318: ARRAY
60319: PPUSH
60320: LD_VAR 0 2
60324: PPUSH
60325: LD_VAR 0 3
60329: PPUSH
60330: CALL_OW 298
60334: PUSH
60335: LD_INT 6
60337: LESS
60338: IFFALSE 60437
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60340: LD_EXP 41
60344: PUSH
60345: LD_VAR 0 6
60349: ARRAY
60350: PUSH
60351: LD_VAR 0 5
60355: ARRAY
60356: PUSH
60357: LD_INT 1
60359: ARRAY
60360: PPUSH
60361: LD_EXP 41
60365: PUSH
60366: LD_VAR 0 6
60370: ARRAY
60371: PUSH
60372: LD_VAR 0 5
60376: ARRAY
60377: PUSH
60378: LD_INT 2
60380: ARRAY
60381: PPUSH
60382: LD_VAR 0 1
60386: PPUSH
60387: CALL_OW 255
60391: PPUSH
60392: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60396: LD_ADDR_EXP 41
60400: PUSH
60401: LD_EXP 41
60405: PPUSH
60406: LD_VAR 0 6
60410: PPUSH
60411: LD_EXP 41
60415: PUSH
60416: LD_VAR 0 6
60420: ARRAY
60421: PPUSH
60422: LD_VAR 0 5
60426: PPUSH
60427: CALL_OW 3
60431: PPUSH
60432: CALL_OW 1
60436: ST_TO_ADDR
// end ; end ;
60437: GO 60275
60439: POP
60440: POP
// end ;
60441: LD_VAR 0 4
60445: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
60452: PPUSH
60453: PPUSH
60454: PPUSH
60455: PPUSH
60456: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60457: LD_VAR 0 1
60461: PPUSH
60462: CALL_OW 264
60466: PUSH
60467: LD_INT 81
60469: EQUAL
60470: NOT
60471: PUSH
60472: LD_VAR 0 1
60476: PUSH
60477: LD_EXP 40
60481: IN
60482: NOT
60483: OR
60484: IFFALSE 60488
// exit ;
60486: GO 60810
// index := GetElementIndex ( minersList , unit ) ;
60488: LD_ADDR_VAR 0 6
60492: PUSH
60493: LD_EXP 40
60497: PPUSH
60498: LD_VAR 0 1
60502: PPUSH
60503: CALL 20284 0 2
60507: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60508: LD_ADDR_VAR 0 8
60512: PUSH
60513: LD_EXP 42
60517: PUSH
60518: LD_EXP 41
60522: PUSH
60523: LD_VAR 0 6
60527: ARRAY
60528: MINUS
60529: ST_TO_ADDR
// if not minesFreeAmount then
60530: LD_VAR 0 8
60534: NOT
60535: IFFALSE 60539
// exit ;
60537: GO 60810
// tmp := [ ] ;
60539: LD_ADDR_VAR 0 7
60543: PUSH
60544: EMPTY
60545: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60546: LD_ADDR_VAR 0 5
60550: PUSH
60551: DOUBLE
60552: LD_INT 1
60554: DEC
60555: ST_TO_ADDR
60556: LD_VAR 0 8
60560: PUSH
60561: FOR_TO
60562: IFFALSE 60757
// begin _d := rand ( 0 , 5 ) ;
60564: LD_ADDR_VAR 0 11
60568: PUSH
60569: LD_INT 0
60571: PPUSH
60572: LD_INT 5
60574: PPUSH
60575: CALL_OW 12
60579: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60580: LD_ADDR_VAR 0 12
60584: PUSH
60585: LD_INT 2
60587: PPUSH
60588: LD_INT 6
60590: PPUSH
60591: CALL_OW 12
60595: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60596: LD_ADDR_VAR 0 9
60600: PUSH
60601: LD_VAR 0 2
60605: PPUSH
60606: LD_VAR 0 11
60610: PPUSH
60611: LD_VAR 0 12
60615: PPUSH
60616: CALL_OW 272
60620: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60621: LD_ADDR_VAR 0 10
60625: PUSH
60626: LD_VAR 0 3
60630: PPUSH
60631: LD_VAR 0 11
60635: PPUSH
60636: LD_VAR 0 12
60640: PPUSH
60641: CALL_OW 273
60645: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60646: LD_VAR 0 9
60650: PPUSH
60651: LD_VAR 0 10
60655: PPUSH
60656: CALL_OW 488
60660: PUSH
60661: LD_VAR 0 9
60665: PUSH
60666: LD_VAR 0 10
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_VAR 0 7
60679: IN
60680: NOT
60681: AND
60682: PUSH
60683: LD_VAR 0 9
60687: PPUSH
60688: LD_VAR 0 10
60692: PPUSH
60693: CALL_OW 458
60697: NOT
60698: AND
60699: IFFALSE 60741
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60701: LD_ADDR_VAR 0 7
60705: PUSH
60706: LD_VAR 0 7
60710: PPUSH
60711: LD_VAR 0 7
60715: PUSH
60716: LD_INT 1
60718: PLUS
60719: PPUSH
60720: LD_VAR 0 9
60724: PUSH
60725: LD_VAR 0 10
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PPUSH
60734: CALL_OW 1
60738: ST_TO_ADDR
60739: GO 60755
// i := i - 1 ;
60741: LD_ADDR_VAR 0 5
60745: PUSH
60746: LD_VAR 0 5
60750: PUSH
60751: LD_INT 1
60753: MINUS
60754: ST_TO_ADDR
// end ;
60755: GO 60561
60757: POP
60758: POP
// for i in tmp do
60759: LD_ADDR_VAR 0 5
60763: PUSH
60764: LD_VAR 0 7
60768: PUSH
60769: FOR_IN
60770: IFFALSE 60808
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60772: LD_VAR 0 1
60776: PPUSH
60777: LD_VAR 0 5
60781: PUSH
60782: LD_INT 1
60784: ARRAY
60785: PPUSH
60786: LD_VAR 0 5
60790: PUSH
60791: LD_INT 2
60793: ARRAY
60794: PPUSH
60795: CALL 59754 0 3
60799: NOT
60800: IFFALSE 60806
// exit ;
60802: POP
60803: POP
60804: GO 60810
60806: GO 60769
60808: POP
60809: POP
// end ;
60810: LD_VAR 0 4
60814: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
60815: LD_INT 0
60817: PPUSH
60818: PPUSH
60819: PPUSH
60820: PPUSH
60821: PPUSH
60822: PPUSH
60823: PPUSH
// if not GetClass ( unit ) = class_sniper then
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 257
60833: PUSH
60834: LD_INT 5
60836: EQUAL
60837: NOT
60838: IFFALSE 60842
// exit ;
60840: GO 61230
// dist := 8 ;
60842: LD_ADDR_VAR 0 5
60846: PUSH
60847: LD_INT 8
60849: ST_TO_ADDR
// viewRange := 12 ;
60850: LD_ADDR_VAR 0 7
60854: PUSH
60855: LD_INT 12
60857: ST_TO_ADDR
// side := GetSide ( unit ) ;
60858: LD_ADDR_VAR 0 6
60862: PUSH
60863: LD_VAR 0 1
60867: PPUSH
60868: CALL_OW 255
60872: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60873: LD_INT 61
60875: PPUSH
60876: LD_VAR 0 6
60880: PPUSH
60881: CALL_OW 321
60885: PUSH
60886: LD_INT 2
60888: EQUAL
60889: IFFALSE 60899
// viewRange := 16 ;
60891: LD_ADDR_VAR 0 7
60895: PUSH
60896: LD_INT 16
60898: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_VAR 0 2
60908: PPUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 297
60918: PUSH
60919: LD_VAR 0 5
60923: GREATER
60924: IFFALSE 61003
// begin ComMoveXY ( unit , x , y ) ;
60926: LD_VAR 0 1
60930: PPUSH
60931: LD_VAR 0 2
60935: PPUSH
60936: LD_VAR 0 3
60940: PPUSH
60941: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60945: LD_INT 35
60947: PPUSH
60948: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60952: LD_VAR 0 1
60956: PPUSH
60957: LD_VAR 0 2
60961: PPUSH
60962: LD_VAR 0 3
60966: PPUSH
60967: CALL 51639 0 3
60971: NOT
60972: IFFALSE 60976
// exit ;
60974: GO 61230
// until GetDistUnitXY ( unit , x , y ) < dist ;
60976: LD_VAR 0 1
60980: PPUSH
60981: LD_VAR 0 2
60985: PPUSH
60986: LD_VAR 0 3
60990: PPUSH
60991: CALL_OW 297
60995: PUSH
60996: LD_VAR 0 5
61000: LESS
61001: IFFALSE 60945
// end ; ComTurnXY ( unit , x , y ) ;
61003: LD_VAR 0 1
61007: PPUSH
61008: LD_VAR 0 2
61012: PPUSH
61013: LD_VAR 0 3
61017: PPUSH
61018: CALL_OW 118
// wait ( 5 ) ;
61022: LD_INT 5
61024: PPUSH
61025: CALL_OW 67
// _d := GetDir ( unit ) ;
61029: LD_ADDR_VAR 0 10
61033: PUSH
61034: LD_VAR 0 1
61038: PPUSH
61039: CALL_OW 254
61043: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61044: LD_ADDR_VAR 0 8
61048: PUSH
61049: LD_VAR 0 1
61053: PPUSH
61054: CALL_OW 250
61058: PPUSH
61059: LD_VAR 0 10
61063: PPUSH
61064: LD_VAR 0 5
61068: PPUSH
61069: CALL_OW 272
61073: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61074: LD_ADDR_VAR 0 9
61078: PUSH
61079: LD_VAR 0 1
61083: PPUSH
61084: CALL_OW 251
61088: PPUSH
61089: LD_VAR 0 10
61093: PPUSH
61094: LD_VAR 0 5
61098: PPUSH
61099: CALL_OW 273
61103: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61104: LD_VAR 0 8
61108: PPUSH
61109: LD_VAR 0 9
61113: PPUSH
61114: CALL_OW 488
61118: NOT
61119: IFFALSE 61123
// exit ;
61121: GO 61230
// ComAnimCustom ( unit , 1 ) ;
61123: LD_VAR 0 1
61127: PPUSH
61128: LD_INT 1
61130: PPUSH
61131: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61135: LD_VAR 0 8
61139: PPUSH
61140: LD_VAR 0 9
61144: PPUSH
61145: LD_VAR 0 6
61149: PPUSH
61150: LD_VAR 0 7
61154: PPUSH
61155: CALL_OW 330
// repeat wait ( 1 ) ;
61159: LD_INT 1
61161: PPUSH
61162: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61166: LD_VAR 0 1
61170: PPUSH
61171: CALL_OW 316
61175: PUSH
61176: LD_VAR 0 1
61180: PPUSH
61181: CALL_OW 314
61185: OR
61186: PUSH
61187: LD_VAR 0 1
61191: PPUSH
61192: CALL_OW 302
61196: NOT
61197: OR
61198: PUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: CALL_OW 301
61208: OR
61209: IFFALSE 61159
// RemoveSeeing ( _x , _y , side ) ;
61211: LD_VAR 0 8
61215: PPUSH
61216: LD_VAR 0 9
61220: PPUSH
61221: LD_VAR 0 6
61225: PPUSH
61226: CALL_OW 331
// end ; end_of_file
61230: LD_VAR 0 4
61234: RET
// export globalGameSaveCounter ; every 0 0$1 do
61235: GO 61237
61237: DISABLE
// begin enable ;
61238: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61239: LD_STRING updateTimer(
61241: PUSH
61242: LD_OWVAR 1
61246: STR
61247: PUSH
61248: LD_STRING );
61250: STR
61251: PPUSH
61252: CALL_OW 559
// end ;
61256: END
// every 0 0$1 do
61257: GO 61259
61259: DISABLE
// begin globalGameSaveCounter := 0 ;
61260: LD_ADDR_EXP 43
61264: PUSH
61265: LD_INT 0
61267: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61268: LD_STRING setGameSaveCounter(0)
61270: PPUSH
61271: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61275: LD_STRING initStreamRollete();
61277: PPUSH
61278: CALL_OW 559
// InitStreamMode ;
61282: CALL 62608 0 0
// DefineStreamItems ( false ) ;
61286: LD_INT 0
61288: PPUSH
61289: CALL 63072 0 1
// end ;
61293: END
// export function SOS_MapStart ( ) ; begin
61294: LD_INT 0
61296: PPUSH
// if streamModeActive then
61297: LD_EXP 44
61301: IFFALSE 61310
// DefineStreamItems ( true ) ;
61303: LD_INT 1
61305: PPUSH
61306: CALL 63072 0 1
// UpdateLuaVariables ( ) ;
61310: CALL 61327 0 0
// UpdateFactoryWaypoints ( ) ;
61314: CALL 75933 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61318: CALL 76190 0 0
// end ;
61322: LD_VAR 0 1
61326: RET
// function UpdateLuaVariables ( ) ; begin
61327: LD_INT 0
61329: PPUSH
// if globalGameSaveCounter then
61330: LD_EXP 43
61334: IFFALSE 61368
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61336: LD_ADDR_EXP 43
61340: PUSH
61341: LD_EXP 43
61345: PPUSH
61346: CALL 54191 0 1
61350: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61351: LD_STRING setGameSaveCounter(
61353: PUSH
61354: LD_EXP 43
61358: STR
61359: PUSH
61360: LD_STRING )
61362: STR
61363: PPUSH
61364: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61368: LD_STRING setGameDifficulty(
61370: PUSH
61371: LD_OWVAR 67
61375: STR
61376: PUSH
61377: LD_STRING )
61379: STR
61380: PPUSH
61381: CALL_OW 559
// end ;
61385: LD_VAR 0 1
61389: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61390: LD_INT 0
61392: PPUSH
// if p2 = stream_mode then
61393: LD_VAR 0 2
61397: PUSH
61398: LD_INT 100
61400: EQUAL
61401: IFFALSE 62404
// begin if not StreamModeActive then
61403: LD_EXP 44
61407: NOT
61408: IFFALSE 61418
// StreamModeActive := true ;
61410: LD_ADDR_EXP 44
61414: PUSH
61415: LD_INT 1
61417: ST_TO_ADDR
// if p3 = 0 then
61418: LD_VAR 0 3
61422: PUSH
61423: LD_INT 0
61425: EQUAL
61426: IFFALSE 61432
// InitStreamMode ;
61428: CALL 62608 0 0
// if p3 = 1 then
61432: LD_VAR 0 3
61436: PUSH
61437: LD_INT 1
61439: EQUAL
61440: IFFALSE 61450
// sRocket := true ;
61442: LD_ADDR_EXP 49
61446: PUSH
61447: LD_INT 1
61449: ST_TO_ADDR
// if p3 = 2 then
61450: LD_VAR 0 3
61454: PUSH
61455: LD_INT 2
61457: EQUAL
61458: IFFALSE 61468
// sSpeed := true ;
61460: LD_ADDR_EXP 48
61464: PUSH
61465: LD_INT 1
61467: ST_TO_ADDR
// if p3 = 3 then
61468: LD_VAR 0 3
61472: PUSH
61473: LD_INT 3
61475: EQUAL
61476: IFFALSE 61486
// sEngine := true ;
61478: LD_ADDR_EXP 50
61482: PUSH
61483: LD_INT 1
61485: ST_TO_ADDR
// if p3 = 4 then
61486: LD_VAR 0 3
61490: PUSH
61491: LD_INT 4
61493: EQUAL
61494: IFFALSE 61504
// sSpec := true ;
61496: LD_ADDR_EXP 47
61500: PUSH
61501: LD_INT 1
61503: ST_TO_ADDR
// if p3 = 5 then
61504: LD_VAR 0 3
61508: PUSH
61509: LD_INT 5
61511: EQUAL
61512: IFFALSE 61522
// sLevel := true ;
61514: LD_ADDR_EXP 51
61518: PUSH
61519: LD_INT 1
61521: ST_TO_ADDR
// if p3 = 6 then
61522: LD_VAR 0 3
61526: PUSH
61527: LD_INT 6
61529: EQUAL
61530: IFFALSE 61540
// sArmoury := true ;
61532: LD_ADDR_EXP 52
61536: PUSH
61537: LD_INT 1
61539: ST_TO_ADDR
// if p3 = 7 then
61540: LD_VAR 0 3
61544: PUSH
61545: LD_INT 7
61547: EQUAL
61548: IFFALSE 61558
// sRadar := true ;
61550: LD_ADDR_EXP 53
61554: PUSH
61555: LD_INT 1
61557: ST_TO_ADDR
// if p3 = 8 then
61558: LD_VAR 0 3
61562: PUSH
61563: LD_INT 8
61565: EQUAL
61566: IFFALSE 61576
// sBunker := true ;
61568: LD_ADDR_EXP 54
61572: PUSH
61573: LD_INT 1
61575: ST_TO_ADDR
// if p3 = 9 then
61576: LD_VAR 0 3
61580: PUSH
61581: LD_INT 9
61583: EQUAL
61584: IFFALSE 61594
// sHack := true ;
61586: LD_ADDR_EXP 55
61590: PUSH
61591: LD_INT 1
61593: ST_TO_ADDR
// if p3 = 10 then
61594: LD_VAR 0 3
61598: PUSH
61599: LD_INT 10
61601: EQUAL
61602: IFFALSE 61612
// sFire := true ;
61604: LD_ADDR_EXP 56
61608: PUSH
61609: LD_INT 1
61611: ST_TO_ADDR
// if p3 = 11 then
61612: LD_VAR 0 3
61616: PUSH
61617: LD_INT 11
61619: EQUAL
61620: IFFALSE 61630
// sRefresh := true ;
61622: LD_ADDR_EXP 57
61626: PUSH
61627: LD_INT 1
61629: ST_TO_ADDR
// if p3 = 12 then
61630: LD_VAR 0 3
61634: PUSH
61635: LD_INT 12
61637: EQUAL
61638: IFFALSE 61648
// sExp := true ;
61640: LD_ADDR_EXP 58
61644: PUSH
61645: LD_INT 1
61647: ST_TO_ADDR
// if p3 = 13 then
61648: LD_VAR 0 3
61652: PUSH
61653: LD_INT 13
61655: EQUAL
61656: IFFALSE 61666
// sDepot := true ;
61658: LD_ADDR_EXP 59
61662: PUSH
61663: LD_INT 1
61665: ST_TO_ADDR
// if p3 = 14 then
61666: LD_VAR 0 3
61670: PUSH
61671: LD_INT 14
61673: EQUAL
61674: IFFALSE 61684
// sFlag := true ;
61676: LD_ADDR_EXP 60
61680: PUSH
61681: LD_INT 1
61683: ST_TO_ADDR
// if p3 = 15 then
61684: LD_VAR 0 3
61688: PUSH
61689: LD_INT 15
61691: EQUAL
61692: IFFALSE 61702
// sKamikadze := true ;
61694: LD_ADDR_EXP 68
61698: PUSH
61699: LD_INT 1
61701: ST_TO_ADDR
// if p3 = 16 then
61702: LD_VAR 0 3
61706: PUSH
61707: LD_INT 16
61709: EQUAL
61710: IFFALSE 61720
// sTroll := true ;
61712: LD_ADDR_EXP 69
61716: PUSH
61717: LD_INT 1
61719: ST_TO_ADDR
// if p3 = 17 then
61720: LD_VAR 0 3
61724: PUSH
61725: LD_INT 17
61727: EQUAL
61728: IFFALSE 61738
// sSlow := true ;
61730: LD_ADDR_EXP 70
61734: PUSH
61735: LD_INT 1
61737: ST_TO_ADDR
// if p3 = 18 then
61738: LD_VAR 0 3
61742: PUSH
61743: LD_INT 18
61745: EQUAL
61746: IFFALSE 61756
// sLack := true ;
61748: LD_ADDR_EXP 71
61752: PUSH
61753: LD_INT 1
61755: ST_TO_ADDR
// if p3 = 19 then
61756: LD_VAR 0 3
61760: PUSH
61761: LD_INT 19
61763: EQUAL
61764: IFFALSE 61774
// sTank := true ;
61766: LD_ADDR_EXP 73
61770: PUSH
61771: LD_INT 1
61773: ST_TO_ADDR
// if p3 = 20 then
61774: LD_VAR 0 3
61778: PUSH
61779: LD_INT 20
61781: EQUAL
61782: IFFALSE 61792
// sRemote := true ;
61784: LD_ADDR_EXP 74
61788: PUSH
61789: LD_INT 1
61791: ST_TO_ADDR
// if p3 = 21 then
61792: LD_VAR 0 3
61796: PUSH
61797: LD_INT 21
61799: EQUAL
61800: IFFALSE 61810
// sPowell := true ;
61802: LD_ADDR_EXP 75
61806: PUSH
61807: LD_INT 1
61809: ST_TO_ADDR
// if p3 = 22 then
61810: LD_VAR 0 3
61814: PUSH
61815: LD_INT 22
61817: EQUAL
61818: IFFALSE 61828
// sTeleport := true ;
61820: LD_ADDR_EXP 78
61824: PUSH
61825: LD_INT 1
61827: ST_TO_ADDR
// if p3 = 23 then
61828: LD_VAR 0 3
61832: PUSH
61833: LD_INT 23
61835: EQUAL
61836: IFFALSE 61846
// sOilTower := true ;
61838: LD_ADDR_EXP 80
61842: PUSH
61843: LD_INT 1
61845: ST_TO_ADDR
// if p3 = 24 then
61846: LD_VAR 0 3
61850: PUSH
61851: LD_INT 24
61853: EQUAL
61854: IFFALSE 61864
// sShovel := true ;
61856: LD_ADDR_EXP 81
61860: PUSH
61861: LD_INT 1
61863: ST_TO_ADDR
// if p3 = 25 then
61864: LD_VAR 0 3
61868: PUSH
61869: LD_INT 25
61871: EQUAL
61872: IFFALSE 61882
// sSheik := true ;
61874: LD_ADDR_EXP 82
61878: PUSH
61879: LD_INT 1
61881: ST_TO_ADDR
// if p3 = 26 then
61882: LD_VAR 0 3
61886: PUSH
61887: LD_INT 26
61889: EQUAL
61890: IFFALSE 61900
// sEarthquake := true ;
61892: LD_ADDR_EXP 84
61896: PUSH
61897: LD_INT 1
61899: ST_TO_ADDR
// if p3 = 27 then
61900: LD_VAR 0 3
61904: PUSH
61905: LD_INT 27
61907: EQUAL
61908: IFFALSE 61918
// sAI := true ;
61910: LD_ADDR_EXP 85
61914: PUSH
61915: LD_INT 1
61917: ST_TO_ADDR
// if p3 = 28 then
61918: LD_VAR 0 3
61922: PUSH
61923: LD_INT 28
61925: EQUAL
61926: IFFALSE 61936
// sCargo := true ;
61928: LD_ADDR_EXP 88
61932: PUSH
61933: LD_INT 1
61935: ST_TO_ADDR
// if p3 = 29 then
61936: LD_VAR 0 3
61940: PUSH
61941: LD_INT 29
61943: EQUAL
61944: IFFALSE 61954
// sDLaser := true ;
61946: LD_ADDR_EXP 89
61950: PUSH
61951: LD_INT 1
61953: ST_TO_ADDR
// if p3 = 30 then
61954: LD_VAR 0 3
61958: PUSH
61959: LD_INT 30
61961: EQUAL
61962: IFFALSE 61972
// sExchange := true ;
61964: LD_ADDR_EXP 90
61968: PUSH
61969: LD_INT 1
61971: ST_TO_ADDR
// if p3 = 31 then
61972: LD_VAR 0 3
61976: PUSH
61977: LD_INT 31
61979: EQUAL
61980: IFFALSE 61990
// sFac := true ;
61982: LD_ADDR_EXP 91
61986: PUSH
61987: LD_INT 1
61989: ST_TO_ADDR
// if p3 = 32 then
61990: LD_VAR 0 3
61994: PUSH
61995: LD_INT 32
61997: EQUAL
61998: IFFALSE 62008
// sPower := true ;
62000: LD_ADDR_EXP 92
62004: PUSH
62005: LD_INT 1
62007: ST_TO_ADDR
// if p3 = 33 then
62008: LD_VAR 0 3
62012: PUSH
62013: LD_INT 33
62015: EQUAL
62016: IFFALSE 62026
// sRandom := true ;
62018: LD_ADDR_EXP 93
62022: PUSH
62023: LD_INT 1
62025: ST_TO_ADDR
// if p3 = 34 then
62026: LD_VAR 0 3
62030: PUSH
62031: LD_INT 34
62033: EQUAL
62034: IFFALSE 62044
// sShield := true ;
62036: LD_ADDR_EXP 94
62040: PUSH
62041: LD_INT 1
62043: ST_TO_ADDR
// if p3 = 35 then
62044: LD_VAR 0 3
62048: PUSH
62049: LD_INT 35
62051: EQUAL
62052: IFFALSE 62062
// sTime := true ;
62054: LD_ADDR_EXP 95
62058: PUSH
62059: LD_INT 1
62061: ST_TO_ADDR
// if p3 = 36 then
62062: LD_VAR 0 3
62066: PUSH
62067: LD_INT 36
62069: EQUAL
62070: IFFALSE 62080
// sTools := true ;
62072: LD_ADDR_EXP 96
62076: PUSH
62077: LD_INT 1
62079: ST_TO_ADDR
// if p3 = 101 then
62080: LD_VAR 0 3
62084: PUSH
62085: LD_INT 101
62087: EQUAL
62088: IFFALSE 62098
// sSold := true ;
62090: LD_ADDR_EXP 61
62094: PUSH
62095: LD_INT 1
62097: ST_TO_ADDR
// if p3 = 102 then
62098: LD_VAR 0 3
62102: PUSH
62103: LD_INT 102
62105: EQUAL
62106: IFFALSE 62116
// sDiff := true ;
62108: LD_ADDR_EXP 62
62112: PUSH
62113: LD_INT 1
62115: ST_TO_ADDR
// if p3 = 103 then
62116: LD_VAR 0 3
62120: PUSH
62121: LD_INT 103
62123: EQUAL
62124: IFFALSE 62134
// sFog := true ;
62126: LD_ADDR_EXP 65
62130: PUSH
62131: LD_INT 1
62133: ST_TO_ADDR
// if p3 = 104 then
62134: LD_VAR 0 3
62138: PUSH
62139: LD_INT 104
62141: EQUAL
62142: IFFALSE 62152
// sReset := true ;
62144: LD_ADDR_EXP 66
62148: PUSH
62149: LD_INT 1
62151: ST_TO_ADDR
// if p3 = 105 then
62152: LD_VAR 0 3
62156: PUSH
62157: LD_INT 105
62159: EQUAL
62160: IFFALSE 62170
// sSun := true ;
62162: LD_ADDR_EXP 67
62166: PUSH
62167: LD_INT 1
62169: ST_TO_ADDR
// if p3 = 106 then
62170: LD_VAR 0 3
62174: PUSH
62175: LD_INT 106
62177: EQUAL
62178: IFFALSE 62188
// sTiger := true ;
62180: LD_ADDR_EXP 63
62184: PUSH
62185: LD_INT 1
62187: ST_TO_ADDR
// if p3 = 107 then
62188: LD_VAR 0 3
62192: PUSH
62193: LD_INT 107
62195: EQUAL
62196: IFFALSE 62206
// sBomb := true ;
62198: LD_ADDR_EXP 64
62202: PUSH
62203: LD_INT 1
62205: ST_TO_ADDR
// if p3 = 108 then
62206: LD_VAR 0 3
62210: PUSH
62211: LD_INT 108
62213: EQUAL
62214: IFFALSE 62224
// sWound := true ;
62216: LD_ADDR_EXP 72
62220: PUSH
62221: LD_INT 1
62223: ST_TO_ADDR
// if p3 = 109 then
62224: LD_VAR 0 3
62228: PUSH
62229: LD_INT 109
62231: EQUAL
62232: IFFALSE 62242
// sBetray := true ;
62234: LD_ADDR_EXP 76
62238: PUSH
62239: LD_INT 1
62241: ST_TO_ADDR
// if p3 = 110 then
62242: LD_VAR 0 3
62246: PUSH
62247: LD_INT 110
62249: EQUAL
62250: IFFALSE 62260
// sContamin := true ;
62252: LD_ADDR_EXP 77
62256: PUSH
62257: LD_INT 1
62259: ST_TO_ADDR
// if p3 = 111 then
62260: LD_VAR 0 3
62264: PUSH
62265: LD_INT 111
62267: EQUAL
62268: IFFALSE 62278
// sOil := true ;
62270: LD_ADDR_EXP 79
62274: PUSH
62275: LD_INT 1
62277: ST_TO_ADDR
// if p3 = 112 then
62278: LD_VAR 0 3
62282: PUSH
62283: LD_INT 112
62285: EQUAL
62286: IFFALSE 62296
// sStu := true ;
62288: LD_ADDR_EXP 83
62292: PUSH
62293: LD_INT 1
62295: ST_TO_ADDR
// if p3 = 113 then
62296: LD_VAR 0 3
62300: PUSH
62301: LD_INT 113
62303: EQUAL
62304: IFFALSE 62314
// sBazooka := true ;
62306: LD_ADDR_EXP 86
62310: PUSH
62311: LD_INT 1
62313: ST_TO_ADDR
// if p3 = 114 then
62314: LD_VAR 0 3
62318: PUSH
62319: LD_INT 114
62321: EQUAL
62322: IFFALSE 62332
// sMortar := true ;
62324: LD_ADDR_EXP 87
62328: PUSH
62329: LD_INT 1
62331: ST_TO_ADDR
// if p3 = 115 then
62332: LD_VAR 0 3
62336: PUSH
62337: LD_INT 115
62339: EQUAL
62340: IFFALSE 62350
// sRanger := true ;
62342: LD_ADDR_EXP 97
62346: PUSH
62347: LD_INT 1
62349: ST_TO_ADDR
// if p3 = 116 then
62350: LD_VAR 0 3
62354: PUSH
62355: LD_INT 116
62357: EQUAL
62358: IFFALSE 62368
// sComputer := true ;
62360: LD_ADDR_EXP 98
62364: PUSH
62365: LD_INT 1
62367: ST_TO_ADDR
// if p3 = 117 then
62368: LD_VAR 0 3
62372: PUSH
62373: LD_INT 117
62375: EQUAL
62376: IFFALSE 62386
// s30 := true ;
62378: LD_ADDR_EXP 99
62382: PUSH
62383: LD_INT 1
62385: ST_TO_ADDR
// if p3 = 118 then
62386: LD_VAR 0 3
62390: PUSH
62391: LD_INT 118
62393: EQUAL
62394: IFFALSE 62404
// s60 := true ;
62396: LD_ADDR_EXP 100
62400: PUSH
62401: LD_INT 1
62403: ST_TO_ADDR
// end ; if p2 = hack_mode then
62404: LD_VAR 0 2
62408: PUSH
62409: LD_INT 101
62411: EQUAL
62412: IFFALSE 62540
// begin case p3 of 1 :
62414: LD_VAR 0 3
62418: PUSH
62419: LD_INT 1
62421: DOUBLE
62422: EQUAL
62423: IFTRUE 62427
62425: GO 62434
62427: POP
// hHackUnlimitedResources ; 2 :
62428: CALL 74679 0 0
62432: GO 62540
62434: LD_INT 2
62436: DOUBLE
62437: EQUAL
62438: IFTRUE 62442
62440: GO 62449
62442: POP
// hHackSetLevel10 ; 3 :
62443: CALL 74812 0 0
62447: GO 62540
62449: LD_INT 3
62451: DOUBLE
62452: EQUAL
62453: IFTRUE 62457
62455: GO 62464
62457: POP
// hHackSetLevel10YourUnits ; 4 :
62458: CALL 74897 0 0
62462: GO 62540
62464: LD_INT 4
62466: DOUBLE
62467: EQUAL
62468: IFTRUE 62472
62470: GO 62479
62472: POP
// hHackInvincible ; 5 :
62473: CALL 75345 0 0
62477: GO 62540
62479: LD_INT 5
62481: DOUBLE
62482: EQUAL
62483: IFTRUE 62487
62485: GO 62494
62487: POP
// hHackInvisible ; 6 :
62488: CALL 75456 0 0
62492: GO 62540
62494: LD_INT 6
62496: DOUBLE
62497: EQUAL
62498: IFTRUE 62502
62500: GO 62509
62502: POP
// hHackChangeYourSide ; 7 :
62503: CALL 75513 0 0
62507: GO 62540
62509: LD_INT 7
62511: DOUBLE
62512: EQUAL
62513: IFTRUE 62517
62515: GO 62524
62517: POP
// hHackChangeUnitSide ; 8 :
62518: CALL 75555 0 0
62522: GO 62540
62524: LD_INT 8
62526: DOUBLE
62527: EQUAL
62528: IFTRUE 62532
62530: GO 62539
62532: POP
// hHackFog ; end ;
62533: CALL 75656 0 0
62537: GO 62540
62539: POP
// end ; if p2 = game_save_mode then
62540: LD_VAR 0 2
62544: PUSH
62545: LD_INT 102
62547: EQUAL
62548: IFFALSE 62603
// begin if p3 = 1 then
62550: LD_VAR 0 3
62554: PUSH
62555: LD_INT 1
62557: EQUAL
62558: IFFALSE 62570
// globalGameSaveCounter := p4 ;
62560: LD_ADDR_EXP 43
62564: PUSH
62565: LD_VAR 0 4
62569: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62570: LD_VAR 0 3
62574: PUSH
62575: LD_INT 2
62577: EQUAL
62578: PUSH
62579: LD_EXP 43
62583: AND
62584: IFFALSE 62603
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62586: LD_STRING setGameSaveCounter(
62588: PUSH
62589: LD_EXP 43
62593: STR
62594: PUSH
62595: LD_STRING )
62597: STR
62598: PPUSH
62599: CALL_OW 559
// end ; end ;
62603: LD_VAR 0 7
62607: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62608: LD_INT 0
62610: PPUSH
// streamModeActive := false ;
62611: LD_ADDR_EXP 44
62615: PUSH
62616: LD_INT 0
62618: ST_TO_ADDR
// normalCounter := 36 ;
62619: LD_ADDR_EXP 45
62623: PUSH
62624: LD_INT 36
62626: ST_TO_ADDR
// hardcoreCounter := 18 ;
62627: LD_ADDR_EXP 46
62631: PUSH
62632: LD_INT 18
62634: ST_TO_ADDR
// sRocket := false ;
62635: LD_ADDR_EXP 49
62639: PUSH
62640: LD_INT 0
62642: ST_TO_ADDR
// sSpeed := false ;
62643: LD_ADDR_EXP 48
62647: PUSH
62648: LD_INT 0
62650: ST_TO_ADDR
// sEngine := false ;
62651: LD_ADDR_EXP 50
62655: PUSH
62656: LD_INT 0
62658: ST_TO_ADDR
// sSpec := false ;
62659: LD_ADDR_EXP 47
62663: PUSH
62664: LD_INT 0
62666: ST_TO_ADDR
// sLevel := false ;
62667: LD_ADDR_EXP 51
62671: PUSH
62672: LD_INT 0
62674: ST_TO_ADDR
// sArmoury := false ;
62675: LD_ADDR_EXP 52
62679: PUSH
62680: LD_INT 0
62682: ST_TO_ADDR
// sRadar := false ;
62683: LD_ADDR_EXP 53
62687: PUSH
62688: LD_INT 0
62690: ST_TO_ADDR
// sBunker := false ;
62691: LD_ADDR_EXP 54
62695: PUSH
62696: LD_INT 0
62698: ST_TO_ADDR
// sHack := false ;
62699: LD_ADDR_EXP 55
62703: PUSH
62704: LD_INT 0
62706: ST_TO_ADDR
// sFire := false ;
62707: LD_ADDR_EXP 56
62711: PUSH
62712: LD_INT 0
62714: ST_TO_ADDR
// sRefresh := false ;
62715: LD_ADDR_EXP 57
62719: PUSH
62720: LD_INT 0
62722: ST_TO_ADDR
// sExp := false ;
62723: LD_ADDR_EXP 58
62727: PUSH
62728: LD_INT 0
62730: ST_TO_ADDR
// sDepot := false ;
62731: LD_ADDR_EXP 59
62735: PUSH
62736: LD_INT 0
62738: ST_TO_ADDR
// sFlag := false ;
62739: LD_ADDR_EXP 60
62743: PUSH
62744: LD_INT 0
62746: ST_TO_ADDR
// sKamikadze := false ;
62747: LD_ADDR_EXP 68
62751: PUSH
62752: LD_INT 0
62754: ST_TO_ADDR
// sTroll := false ;
62755: LD_ADDR_EXP 69
62759: PUSH
62760: LD_INT 0
62762: ST_TO_ADDR
// sSlow := false ;
62763: LD_ADDR_EXP 70
62767: PUSH
62768: LD_INT 0
62770: ST_TO_ADDR
// sLack := false ;
62771: LD_ADDR_EXP 71
62775: PUSH
62776: LD_INT 0
62778: ST_TO_ADDR
// sTank := false ;
62779: LD_ADDR_EXP 73
62783: PUSH
62784: LD_INT 0
62786: ST_TO_ADDR
// sRemote := false ;
62787: LD_ADDR_EXP 74
62791: PUSH
62792: LD_INT 0
62794: ST_TO_ADDR
// sPowell := false ;
62795: LD_ADDR_EXP 75
62799: PUSH
62800: LD_INT 0
62802: ST_TO_ADDR
// sTeleport := false ;
62803: LD_ADDR_EXP 78
62807: PUSH
62808: LD_INT 0
62810: ST_TO_ADDR
// sOilTower := false ;
62811: LD_ADDR_EXP 80
62815: PUSH
62816: LD_INT 0
62818: ST_TO_ADDR
// sShovel := false ;
62819: LD_ADDR_EXP 81
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// sSheik := false ;
62827: LD_ADDR_EXP 82
62831: PUSH
62832: LD_INT 0
62834: ST_TO_ADDR
// sEarthquake := false ;
62835: LD_ADDR_EXP 84
62839: PUSH
62840: LD_INT 0
62842: ST_TO_ADDR
// sAI := false ;
62843: LD_ADDR_EXP 85
62847: PUSH
62848: LD_INT 0
62850: ST_TO_ADDR
// sCargo := false ;
62851: LD_ADDR_EXP 88
62855: PUSH
62856: LD_INT 0
62858: ST_TO_ADDR
// sDLaser := false ;
62859: LD_ADDR_EXP 89
62863: PUSH
62864: LD_INT 0
62866: ST_TO_ADDR
// sExchange := false ;
62867: LD_ADDR_EXP 90
62871: PUSH
62872: LD_INT 0
62874: ST_TO_ADDR
// sFac := false ;
62875: LD_ADDR_EXP 91
62879: PUSH
62880: LD_INT 0
62882: ST_TO_ADDR
// sPower := false ;
62883: LD_ADDR_EXP 92
62887: PUSH
62888: LD_INT 0
62890: ST_TO_ADDR
// sRandom := false ;
62891: LD_ADDR_EXP 93
62895: PUSH
62896: LD_INT 0
62898: ST_TO_ADDR
// sShield := false ;
62899: LD_ADDR_EXP 94
62903: PUSH
62904: LD_INT 0
62906: ST_TO_ADDR
// sTime := false ;
62907: LD_ADDR_EXP 95
62911: PUSH
62912: LD_INT 0
62914: ST_TO_ADDR
// sTools := false ;
62915: LD_ADDR_EXP 96
62919: PUSH
62920: LD_INT 0
62922: ST_TO_ADDR
// sSold := false ;
62923: LD_ADDR_EXP 61
62927: PUSH
62928: LD_INT 0
62930: ST_TO_ADDR
// sDiff := false ;
62931: LD_ADDR_EXP 62
62935: PUSH
62936: LD_INT 0
62938: ST_TO_ADDR
// sFog := false ;
62939: LD_ADDR_EXP 65
62943: PUSH
62944: LD_INT 0
62946: ST_TO_ADDR
// sReset := false ;
62947: LD_ADDR_EXP 66
62951: PUSH
62952: LD_INT 0
62954: ST_TO_ADDR
// sSun := false ;
62955: LD_ADDR_EXP 67
62959: PUSH
62960: LD_INT 0
62962: ST_TO_ADDR
// sTiger := false ;
62963: LD_ADDR_EXP 63
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// sBomb := false ;
62971: LD_ADDR_EXP 64
62975: PUSH
62976: LD_INT 0
62978: ST_TO_ADDR
// sWound := false ;
62979: LD_ADDR_EXP 72
62983: PUSH
62984: LD_INT 0
62986: ST_TO_ADDR
// sBetray := false ;
62987: LD_ADDR_EXP 76
62991: PUSH
62992: LD_INT 0
62994: ST_TO_ADDR
// sContamin := false ;
62995: LD_ADDR_EXP 77
62999: PUSH
63000: LD_INT 0
63002: ST_TO_ADDR
// sOil := false ;
63003: LD_ADDR_EXP 79
63007: PUSH
63008: LD_INT 0
63010: ST_TO_ADDR
// sStu := false ;
63011: LD_ADDR_EXP 83
63015: PUSH
63016: LD_INT 0
63018: ST_TO_ADDR
// sBazooka := false ;
63019: LD_ADDR_EXP 86
63023: PUSH
63024: LD_INT 0
63026: ST_TO_ADDR
// sMortar := false ;
63027: LD_ADDR_EXP 87
63031: PUSH
63032: LD_INT 0
63034: ST_TO_ADDR
// sRanger := false ;
63035: LD_ADDR_EXP 97
63039: PUSH
63040: LD_INT 0
63042: ST_TO_ADDR
// sComputer := false ;
63043: LD_ADDR_EXP 98
63047: PUSH
63048: LD_INT 0
63050: ST_TO_ADDR
// s30 := false ;
63051: LD_ADDR_EXP 99
63055: PUSH
63056: LD_INT 0
63058: ST_TO_ADDR
// s60 := false ;
63059: LD_ADDR_EXP 100
63063: PUSH
63064: LD_INT 0
63066: ST_TO_ADDR
// end ;
63067: LD_VAR 0 1
63071: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63072: LD_INT 0
63074: PPUSH
63075: PPUSH
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
// result := [ ] ;
63081: LD_ADDR_VAR 0 2
63085: PUSH
63086: EMPTY
63087: ST_TO_ADDR
// if campaign_id = 1 then
63088: LD_OWVAR 69
63092: PUSH
63093: LD_INT 1
63095: EQUAL
63096: IFFALSE 66262
// begin case mission_number of 1 :
63098: LD_OWVAR 70
63102: PUSH
63103: LD_INT 1
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63111
63109: GO 63187
63111: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63112: LD_ADDR_VAR 0 2
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: LD_INT 4
63122: PUSH
63123: LD_INT 11
63125: PUSH
63126: LD_INT 12
63128: PUSH
63129: LD_INT 15
63131: PUSH
63132: LD_INT 16
63134: PUSH
63135: LD_INT 22
63137: PUSH
63138: LD_INT 23
63140: PUSH
63141: LD_INT 26
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 101
63157: PUSH
63158: LD_INT 102
63160: PUSH
63161: LD_INT 106
63163: PUSH
63164: LD_INT 116
63166: PUSH
63167: LD_INT 117
63169: PUSH
63170: LD_INT 118
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: ST_TO_ADDR
63185: GO 66260
63187: LD_INT 2
63189: DOUBLE
63190: EQUAL
63191: IFTRUE 63195
63193: GO 63279
63195: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63196: LD_ADDR_VAR 0 2
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: LD_INT 4
63206: PUSH
63207: LD_INT 11
63209: PUSH
63210: LD_INT 12
63212: PUSH
63213: LD_INT 15
63215: PUSH
63216: LD_INT 16
63218: PUSH
63219: LD_INT 22
63221: PUSH
63222: LD_INT 23
63224: PUSH
63225: LD_INT 26
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 101
63241: PUSH
63242: LD_INT 102
63244: PUSH
63245: LD_INT 105
63247: PUSH
63248: LD_INT 106
63250: PUSH
63251: LD_INT 108
63253: PUSH
63254: LD_INT 116
63256: PUSH
63257: LD_INT 117
63259: PUSH
63260: LD_INT 118
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: ST_TO_ADDR
63277: GO 66260
63279: LD_INT 3
63281: DOUBLE
63282: EQUAL
63283: IFTRUE 63287
63285: GO 63375
63287: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63288: LD_ADDR_VAR 0 2
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 4
63298: PUSH
63299: LD_INT 5
63301: PUSH
63302: LD_INT 11
63304: PUSH
63305: LD_INT 12
63307: PUSH
63308: LD_INT 15
63310: PUSH
63311: LD_INT 16
63313: PUSH
63314: LD_INT 22
63316: PUSH
63317: LD_INT 26
63319: PUSH
63320: LD_INT 36
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 101
63337: PUSH
63338: LD_INT 102
63340: PUSH
63341: LD_INT 105
63343: PUSH
63344: LD_INT 106
63346: PUSH
63347: LD_INT 108
63349: PUSH
63350: LD_INT 116
63352: PUSH
63353: LD_INT 117
63355: PUSH
63356: LD_INT 118
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: ST_TO_ADDR
63373: GO 66260
63375: LD_INT 4
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63383
63381: GO 63479
63383: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63384: LD_ADDR_VAR 0 2
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: LD_INT 4
63394: PUSH
63395: LD_INT 5
63397: PUSH
63398: LD_INT 8
63400: PUSH
63401: LD_INT 11
63403: PUSH
63404: LD_INT 12
63406: PUSH
63407: LD_INT 15
63409: PUSH
63410: LD_INT 16
63412: PUSH
63413: LD_INT 22
63415: PUSH
63416: LD_INT 23
63418: PUSH
63419: LD_INT 26
63421: PUSH
63422: LD_INT 36
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 101
63441: PUSH
63442: LD_INT 102
63444: PUSH
63445: LD_INT 105
63447: PUSH
63448: LD_INT 106
63450: PUSH
63451: LD_INT 108
63453: PUSH
63454: LD_INT 116
63456: PUSH
63457: LD_INT 117
63459: PUSH
63460: LD_INT 118
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: ST_TO_ADDR
63477: GO 66260
63479: LD_INT 5
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63487
63485: GO 63599
63487: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63488: LD_ADDR_VAR 0 2
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 4
63498: PUSH
63499: LD_INT 5
63501: PUSH
63502: LD_INT 6
63504: PUSH
63505: LD_INT 8
63507: PUSH
63508: LD_INT 11
63510: PUSH
63511: LD_INT 12
63513: PUSH
63514: LD_INT 15
63516: PUSH
63517: LD_INT 16
63519: PUSH
63520: LD_INT 22
63522: PUSH
63523: LD_INT 23
63525: PUSH
63526: LD_INT 25
63528: PUSH
63529: LD_INT 26
63531: PUSH
63532: LD_INT 36
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 101
63553: PUSH
63554: LD_INT 102
63556: PUSH
63557: LD_INT 105
63559: PUSH
63560: LD_INT 106
63562: PUSH
63563: LD_INT 108
63565: PUSH
63566: LD_INT 109
63568: PUSH
63569: LD_INT 112
63571: PUSH
63572: LD_INT 116
63574: PUSH
63575: LD_INT 117
63577: PUSH
63578: LD_INT 118
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: ST_TO_ADDR
63597: GO 66260
63599: LD_INT 6
63601: DOUBLE
63602: EQUAL
63603: IFTRUE 63607
63605: GO 63739
63607: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63608: LD_ADDR_VAR 0 2
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: LD_INT 4
63618: PUSH
63619: LD_INT 5
63621: PUSH
63622: LD_INT 6
63624: PUSH
63625: LD_INT 8
63627: PUSH
63628: LD_INT 11
63630: PUSH
63631: LD_INT 12
63633: PUSH
63634: LD_INT 15
63636: PUSH
63637: LD_INT 16
63639: PUSH
63640: LD_INT 20
63642: PUSH
63643: LD_INT 21
63645: PUSH
63646: LD_INT 22
63648: PUSH
63649: LD_INT 23
63651: PUSH
63652: LD_INT 25
63654: PUSH
63655: LD_INT 26
63657: PUSH
63658: LD_INT 30
63660: PUSH
63661: LD_INT 31
63663: PUSH
63664: LD_INT 32
63666: PUSH
63667: LD_INT 36
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 101
63693: PUSH
63694: LD_INT 102
63696: PUSH
63697: LD_INT 105
63699: PUSH
63700: LD_INT 106
63702: PUSH
63703: LD_INT 108
63705: PUSH
63706: LD_INT 109
63708: PUSH
63709: LD_INT 112
63711: PUSH
63712: LD_INT 116
63714: PUSH
63715: LD_INT 117
63717: PUSH
63718: LD_INT 118
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: ST_TO_ADDR
63737: GO 66260
63739: LD_INT 7
63741: DOUBLE
63742: EQUAL
63743: IFTRUE 63747
63745: GO 63859
63747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63748: LD_ADDR_VAR 0 2
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: LD_INT 4
63758: PUSH
63759: LD_INT 5
63761: PUSH
63762: LD_INT 7
63764: PUSH
63765: LD_INT 11
63767: PUSH
63768: LD_INT 12
63770: PUSH
63771: LD_INT 15
63773: PUSH
63774: LD_INT 16
63776: PUSH
63777: LD_INT 20
63779: PUSH
63780: LD_INT 21
63782: PUSH
63783: LD_INT 22
63785: PUSH
63786: LD_INT 23
63788: PUSH
63789: LD_INT 25
63791: PUSH
63792: LD_INT 26
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 101
63813: PUSH
63814: LD_INT 102
63816: PUSH
63817: LD_INT 103
63819: PUSH
63820: LD_INT 105
63822: PUSH
63823: LD_INT 106
63825: PUSH
63826: LD_INT 108
63828: PUSH
63829: LD_INT 112
63831: PUSH
63832: LD_INT 116
63834: PUSH
63835: LD_INT 117
63837: PUSH
63838: LD_INT 118
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: ST_TO_ADDR
63857: GO 66260
63859: LD_INT 8
63861: DOUBLE
63862: EQUAL
63863: IFTRUE 63867
63865: GO 64007
63867: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63868: LD_ADDR_VAR 0 2
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 4
63878: PUSH
63879: LD_INT 5
63881: PUSH
63882: LD_INT 6
63884: PUSH
63885: LD_INT 7
63887: PUSH
63888: LD_INT 8
63890: PUSH
63891: LD_INT 11
63893: PUSH
63894: LD_INT 12
63896: PUSH
63897: LD_INT 15
63899: PUSH
63900: LD_INT 16
63902: PUSH
63903: LD_INT 20
63905: PUSH
63906: LD_INT 21
63908: PUSH
63909: LD_INT 22
63911: PUSH
63912: LD_INT 23
63914: PUSH
63915: LD_INT 25
63917: PUSH
63918: LD_INT 26
63920: PUSH
63921: LD_INT 30
63923: PUSH
63924: LD_INT 31
63926: PUSH
63927: LD_INT 32
63929: PUSH
63930: LD_INT 36
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 101
63957: PUSH
63958: LD_INT 102
63960: PUSH
63961: LD_INT 103
63963: PUSH
63964: LD_INT 105
63966: PUSH
63967: LD_INT 106
63969: PUSH
63970: LD_INT 108
63972: PUSH
63973: LD_INT 109
63975: PUSH
63976: LD_INT 112
63978: PUSH
63979: LD_INT 116
63981: PUSH
63982: LD_INT 117
63984: PUSH
63985: LD_INT 118
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: ST_TO_ADDR
64005: GO 66260
64007: LD_INT 9
64009: DOUBLE
64010: EQUAL
64011: IFTRUE 64015
64013: GO 64163
64015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64016: LD_ADDR_VAR 0 2
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 4
64026: PUSH
64027: LD_INT 5
64029: PUSH
64030: LD_INT 6
64032: PUSH
64033: LD_INT 7
64035: PUSH
64036: LD_INT 8
64038: PUSH
64039: LD_INT 11
64041: PUSH
64042: LD_INT 12
64044: PUSH
64045: LD_INT 15
64047: PUSH
64048: LD_INT 16
64050: PUSH
64051: LD_INT 20
64053: PUSH
64054: LD_INT 21
64056: PUSH
64057: LD_INT 22
64059: PUSH
64060: LD_INT 23
64062: PUSH
64063: LD_INT 25
64065: PUSH
64066: LD_INT 26
64068: PUSH
64069: LD_INT 28
64071: PUSH
64072: LD_INT 30
64074: PUSH
64075: LD_INT 31
64077: PUSH
64078: LD_INT 32
64080: PUSH
64081: LD_INT 36
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 101
64109: PUSH
64110: LD_INT 102
64112: PUSH
64113: LD_INT 103
64115: PUSH
64116: LD_INT 105
64118: PUSH
64119: LD_INT 106
64121: PUSH
64122: LD_INT 108
64124: PUSH
64125: LD_INT 109
64127: PUSH
64128: LD_INT 112
64130: PUSH
64131: LD_INT 114
64133: PUSH
64134: LD_INT 116
64136: PUSH
64137: LD_INT 117
64139: PUSH
64140: LD_INT 118
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: ST_TO_ADDR
64161: GO 66260
64163: LD_INT 10
64165: DOUBLE
64166: EQUAL
64167: IFTRUE 64171
64169: GO 64367
64171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64172: LD_ADDR_VAR 0 2
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: LD_INT 5
64185: PUSH
64186: LD_INT 6
64188: PUSH
64189: LD_INT 7
64191: PUSH
64192: LD_INT 8
64194: PUSH
64195: LD_INT 9
64197: PUSH
64198: LD_INT 10
64200: PUSH
64201: LD_INT 11
64203: PUSH
64204: LD_INT 12
64206: PUSH
64207: LD_INT 13
64209: PUSH
64210: LD_INT 14
64212: PUSH
64213: LD_INT 15
64215: PUSH
64216: LD_INT 16
64218: PUSH
64219: LD_INT 17
64221: PUSH
64222: LD_INT 18
64224: PUSH
64225: LD_INT 19
64227: PUSH
64228: LD_INT 20
64230: PUSH
64231: LD_INT 21
64233: PUSH
64234: LD_INT 22
64236: PUSH
64237: LD_INT 23
64239: PUSH
64240: LD_INT 24
64242: PUSH
64243: LD_INT 25
64245: PUSH
64246: LD_INT 26
64248: PUSH
64249: LD_INT 28
64251: PUSH
64252: LD_INT 30
64254: PUSH
64255: LD_INT 31
64257: PUSH
64258: LD_INT 32
64260: PUSH
64261: LD_INT 36
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 101
64297: PUSH
64298: LD_INT 102
64300: PUSH
64301: LD_INT 103
64303: PUSH
64304: LD_INT 104
64306: PUSH
64307: LD_INT 105
64309: PUSH
64310: LD_INT 106
64312: PUSH
64313: LD_INT 107
64315: PUSH
64316: LD_INT 108
64318: PUSH
64319: LD_INT 109
64321: PUSH
64322: LD_INT 110
64324: PUSH
64325: LD_INT 111
64327: PUSH
64328: LD_INT 112
64330: PUSH
64331: LD_INT 114
64333: PUSH
64334: LD_INT 116
64336: PUSH
64337: LD_INT 117
64339: PUSH
64340: LD_INT 118
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: ST_TO_ADDR
64365: GO 66260
64367: LD_INT 11
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64375
64373: GO 64579
64375: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64376: LD_ADDR_VAR 0 2
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: LD_INT 4
64389: PUSH
64390: LD_INT 5
64392: PUSH
64393: LD_INT 6
64395: PUSH
64396: LD_INT 7
64398: PUSH
64399: LD_INT 8
64401: PUSH
64402: LD_INT 9
64404: PUSH
64405: LD_INT 10
64407: PUSH
64408: LD_INT 11
64410: PUSH
64411: LD_INT 12
64413: PUSH
64414: LD_INT 13
64416: PUSH
64417: LD_INT 14
64419: PUSH
64420: LD_INT 15
64422: PUSH
64423: LD_INT 16
64425: PUSH
64426: LD_INT 17
64428: PUSH
64429: LD_INT 18
64431: PUSH
64432: LD_INT 19
64434: PUSH
64435: LD_INT 20
64437: PUSH
64438: LD_INT 21
64440: PUSH
64441: LD_INT 22
64443: PUSH
64444: LD_INT 23
64446: PUSH
64447: LD_INT 24
64449: PUSH
64450: LD_INT 25
64452: PUSH
64453: LD_INT 26
64455: PUSH
64456: LD_INT 28
64458: PUSH
64459: LD_INT 30
64461: PUSH
64462: LD_INT 31
64464: PUSH
64465: LD_INT 32
64467: PUSH
64468: LD_INT 34
64470: PUSH
64471: LD_INT 36
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 101
64509: PUSH
64510: LD_INT 102
64512: PUSH
64513: LD_INT 103
64515: PUSH
64516: LD_INT 104
64518: PUSH
64519: LD_INT 105
64521: PUSH
64522: LD_INT 106
64524: PUSH
64525: LD_INT 107
64527: PUSH
64528: LD_INT 108
64530: PUSH
64531: LD_INT 109
64533: PUSH
64534: LD_INT 110
64536: PUSH
64537: LD_INT 111
64539: PUSH
64540: LD_INT 112
64542: PUSH
64543: LD_INT 114
64545: PUSH
64546: LD_INT 116
64548: PUSH
64549: LD_INT 117
64551: PUSH
64552: LD_INT 118
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: ST_TO_ADDR
64577: GO 66260
64579: LD_INT 12
64581: DOUBLE
64582: EQUAL
64583: IFTRUE 64587
64585: GO 64807
64587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64588: LD_ADDR_VAR 0 2
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: LD_INT 4
64604: PUSH
64605: LD_INT 5
64607: PUSH
64608: LD_INT 6
64610: PUSH
64611: LD_INT 7
64613: PUSH
64614: LD_INT 8
64616: PUSH
64617: LD_INT 9
64619: PUSH
64620: LD_INT 10
64622: PUSH
64623: LD_INT 11
64625: PUSH
64626: LD_INT 12
64628: PUSH
64629: LD_INT 13
64631: PUSH
64632: LD_INT 14
64634: PUSH
64635: LD_INT 15
64637: PUSH
64638: LD_INT 16
64640: PUSH
64641: LD_INT 17
64643: PUSH
64644: LD_INT 18
64646: PUSH
64647: LD_INT 19
64649: PUSH
64650: LD_INT 20
64652: PUSH
64653: LD_INT 21
64655: PUSH
64656: LD_INT 22
64658: PUSH
64659: LD_INT 23
64661: PUSH
64662: LD_INT 24
64664: PUSH
64665: LD_INT 25
64667: PUSH
64668: LD_INT 26
64670: PUSH
64671: LD_INT 27
64673: PUSH
64674: LD_INT 28
64676: PUSH
64677: LD_INT 30
64679: PUSH
64680: LD_INT 31
64682: PUSH
64683: LD_INT 32
64685: PUSH
64686: LD_INT 33
64688: PUSH
64689: LD_INT 34
64691: PUSH
64692: LD_INT 36
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 101
64733: PUSH
64734: LD_INT 102
64736: PUSH
64737: LD_INT 103
64739: PUSH
64740: LD_INT 104
64742: PUSH
64743: LD_INT 105
64745: PUSH
64746: LD_INT 106
64748: PUSH
64749: LD_INT 107
64751: PUSH
64752: LD_INT 108
64754: PUSH
64755: LD_INT 109
64757: PUSH
64758: LD_INT 110
64760: PUSH
64761: LD_INT 111
64763: PUSH
64764: LD_INT 112
64766: PUSH
64767: LD_INT 113
64769: PUSH
64770: LD_INT 114
64772: PUSH
64773: LD_INT 116
64775: PUSH
64776: LD_INT 117
64778: PUSH
64779: LD_INT 118
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: ST_TO_ADDR
64805: GO 66260
64807: LD_INT 13
64809: DOUBLE
64810: EQUAL
64811: IFTRUE 64815
64813: GO 65023
64815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64816: LD_ADDR_VAR 0 2
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: LD_INT 3
64829: PUSH
64830: LD_INT 4
64832: PUSH
64833: LD_INT 5
64835: PUSH
64836: LD_INT 8
64838: PUSH
64839: LD_INT 9
64841: PUSH
64842: LD_INT 10
64844: PUSH
64845: LD_INT 11
64847: PUSH
64848: LD_INT 12
64850: PUSH
64851: LD_INT 14
64853: PUSH
64854: LD_INT 15
64856: PUSH
64857: LD_INT 16
64859: PUSH
64860: LD_INT 17
64862: PUSH
64863: LD_INT 18
64865: PUSH
64866: LD_INT 19
64868: PUSH
64869: LD_INT 20
64871: PUSH
64872: LD_INT 21
64874: PUSH
64875: LD_INT 22
64877: PUSH
64878: LD_INT 23
64880: PUSH
64881: LD_INT 24
64883: PUSH
64884: LD_INT 25
64886: PUSH
64887: LD_INT 26
64889: PUSH
64890: LD_INT 27
64892: PUSH
64893: LD_INT 28
64895: PUSH
64896: LD_INT 30
64898: PUSH
64899: LD_INT 31
64901: PUSH
64902: LD_INT 32
64904: PUSH
64905: LD_INT 33
64907: PUSH
64908: LD_INT 34
64910: PUSH
64911: LD_INT 36
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 101
64949: PUSH
64950: LD_INT 102
64952: PUSH
64953: LD_INT 103
64955: PUSH
64956: LD_INT 104
64958: PUSH
64959: LD_INT 105
64961: PUSH
64962: LD_INT 106
64964: PUSH
64965: LD_INT 107
64967: PUSH
64968: LD_INT 108
64970: PUSH
64971: LD_INT 109
64973: PUSH
64974: LD_INT 110
64976: PUSH
64977: LD_INT 111
64979: PUSH
64980: LD_INT 112
64982: PUSH
64983: LD_INT 113
64985: PUSH
64986: LD_INT 114
64988: PUSH
64989: LD_INT 116
64991: PUSH
64992: LD_INT 117
64994: PUSH
64995: LD_INT 118
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: ST_TO_ADDR
65021: GO 66260
65023: LD_INT 14
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65255
65031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65032: LD_ADDR_VAR 0 2
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 3
65045: PUSH
65046: LD_INT 4
65048: PUSH
65049: LD_INT 5
65051: PUSH
65052: LD_INT 6
65054: PUSH
65055: LD_INT 7
65057: PUSH
65058: LD_INT 8
65060: PUSH
65061: LD_INT 9
65063: PUSH
65064: LD_INT 10
65066: PUSH
65067: LD_INT 11
65069: PUSH
65070: LD_INT 12
65072: PUSH
65073: LD_INT 13
65075: PUSH
65076: LD_INT 14
65078: PUSH
65079: LD_INT 15
65081: PUSH
65082: LD_INT 16
65084: PUSH
65085: LD_INT 17
65087: PUSH
65088: LD_INT 18
65090: PUSH
65091: LD_INT 19
65093: PUSH
65094: LD_INT 20
65096: PUSH
65097: LD_INT 21
65099: PUSH
65100: LD_INT 22
65102: PUSH
65103: LD_INT 23
65105: PUSH
65106: LD_INT 24
65108: PUSH
65109: LD_INT 25
65111: PUSH
65112: LD_INT 26
65114: PUSH
65115: LD_INT 27
65117: PUSH
65118: LD_INT 28
65120: PUSH
65121: LD_INT 29
65123: PUSH
65124: LD_INT 30
65126: PUSH
65127: LD_INT 31
65129: PUSH
65130: LD_INT 32
65132: PUSH
65133: LD_INT 33
65135: PUSH
65136: LD_INT 34
65138: PUSH
65139: LD_INT 36
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 101
65181: PUSH
65182: LD_INT 102
65184: PUSH
65185: LD_INT 103
65187: PUSH
65188: LD_INT 104
65190: PUSH
65191: LD_INT 105
65193: PUSH
65194: LD_INT 106
65196: PUSH
65197: LD_INT 107
65199: PUSH
65200: LD_INT 108
65202: PUSH
65203: LD_INT 109
65205: PUSH
65206: LD_INT 110
65208: PUSH
65209: LD_INT 111
65211: PUSH
65212: LD_INT 112
65214: PUSH
65215: LD_INT 113
65217: PUSH
65218: LD_INT 114
65220: PUSH
65221: LD_INT 116
65223: PUSH
65224: LD_INT 117
65226: PUSH
65227: LD_INT 118
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: ST_TO_ADDR
65253: GO 66260
65255: LD_INT 15
65257: DOUBLE
65258: EQUAL
65259: IFTRUE 65263
65261: GO 65487
65263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65264: LD_ADDR_VAR 0 2
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 2
65274: PUSH
65275: LD_INT 3
65277: PUSH
65278: LD_INT 4
65280: PUSH
65281: LD_INT 5
65283: PUSH
65284: LD_INT 6
65286: PUSH
65287: LD_INT 7
65289: PUSH
65290: LD_INT 8
65292: PUSH
65293: LD_INT 9
65295: PUSH
65296: LD_INT 10
65298: PUSH
65299: LD_INT 11
65301: PUSH
65302: LD_INT 12
65304: PUSH
65305: LD_INT 13
65307: PUSH
65308: LD_INT 14
65310: PUSH
65311: LD_INT 15
65313: PUSH
65314: LD_INT 16
65316: PUSH
65317: LD_INT 17
65319: PUSH
65320: LD_INT 18
65322: PUSH
65323: LD_INT 19
65325: PUSH
65326: LD_INT 20
65328: PUSH
65329: LD_INT 21
65331: PUSH
65332: LD_INT 22
65334: PUSH
65335: LD_INT 23
65337: PUSH
65338: LD_INT 24
65340: PUSH
65341: LD_INT 25
65343: PUSH
65344: LD_INT 26
65346: PUSH
65347: LD_INT 27
65349: PUSH
65350: LD_INT 28
65352: PUSH
65353: LD_INT 29
65355: PUSH
65356: LD_INT 30
65358: PUSH
65359: LD_INT 31
65361: PUSH
65362: LD_INT 32
65364: PUSH
65365: LD_INT 33
65367: PUSH
65368: LD_INT 34
65370: PUSH
65371: LD_INT 36
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 101
65413: PUSH
65414: LD_INT 102
65416: PUSH
65417: LD_INT 103
65419: PUSH
65420: LD_INT 104
65422: PUSH
65423: LD_INT 105
65425: PUSH
65426: LD_INT 106
65428: PUSH
65429: LD_INT 107
65431: PUSH
65432: LD_INT 108
65434: PUSH
65435: LD_INT 109
65437: PUSH
65438: LD_INT 110
65440: PUSH
65441: LD_INT 111
65443: PUSH
65444: LD_INT 112
65446: PUSH
65447: LD_INT 113
65449: PUSH
65450: LD_INT 114
65452: PUSH
65453: LD_INT 116
65455: PUSH
65456: LD_INT 117
65458: PUSH
65459: LD_INT 118
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: ST_TO_ADDR
65485: GO 66260
65487: LD_INT 16
65489: DOUBLE
65490: EQUAL
65491: IFTRUE 65495
65493: GO 65631
65495: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65496: LD_ADDR_VAR 0 2
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: LD_INT 5
65509: PUSH
65510: LD_INT 7
65512: PUSH
65513: LD_INT 11
65515: PUSH
65516: LD_INT 12
65518: PUSH
65519: LD_INT 15
65521: PUSH
65522: LD_INT 16
65524: PUSH
65525: LD_INT 20
65527: PUSH
65528: LD_INT 21
65530: PUSH
65531: LD_INT 22
65533: PUSH
65534: LD_INT 23
65536: PUSH
65537: LD_INT 25
65539: PUSH
65540: LD_INT 26
65542: PUSH
65543: LD_INT 30
65545: PUSH
65546: LD_INT 31
65548: PUSH
65549: LD_INT 32
65551: PUSH
65552: LD_INT 33
65554: PUSH
65555: LD_INT 34
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 101
65581: PUSH
65582: LD_INT 102
65584: PUSH
65585: LD_INT 103
65587: PUSH
65588: LD_INT 106
65590: PUSH
65591: LD_INT 108
65593: PUSH
65594: LD_INT 112
65596: PUSH
65597: LD_INT 113
65599: PUSH
65600: LD_INT 114
65602: PUSH
65603: LD_INT 116
65605: PUSH
65606: LD_INT 117
65608: PUSH
65609: LD_INT 118
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: ST_TO_ADDR
65629: GO 66260
65631: LD_INT 17
65633: DOUBLE
65634: EQUAL
65635: IFTRUE 65639
65637: GO 65863
65639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65640: LD_ADDR_VAR 0 2
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: LD_INT 4
65656: PUSH
65657: LD_INT 5
65659: PUSH
65660: LD_INT 6
65662: PUSH
65663: LD_INT 7
65665: PUSH
65666: LD_INT 8
65668: PUSH
65669: LD_INT 9
65671: PUSH
65672: LD_INT 10
65674: PUSH
65675: LD_INT 11
65677: PUSH
65678: LD_INT 12
65680: PUSH
65681: LD_INT 13
65683: PUSH
65684: LD_INT 14
65686: PUSH
65687: LD_INT 15
65689: PUSH
65690: LD_INT 16
65692: PUSH
65693: LD_INT 17
65695: PUSH
65696: LD_INT 18
65698: PUSH
65699: LD_INT 19
65701: PUSH
65702: LD_INT 20
65704: PUSH
65705: LD_INT 21
65707: PUSH
65708: LD_INT 22
65710: PUSH
65711: LD_INT 23
65713: PUSH
65714: LD_INT 24
65716: PUSH
65717: LD_INT 25
65719: PUSH
65720: LD_INT 26
65722: PUSH
65723: LD_INT 27
65725: PUSH
65726: LD_INT 28
65728: PUSH
65729: LD_INT 29
65731: PUSH
65732: LD_INT 30
65734: PUSH
65735: LD_INT 31
65737: PUSH
65738: LD_INT 32
65740: PUSH
65741: LD_INT 33
65743: PUSH
65744: LD_INT 34
65746: PUSH
65747: LD_INT 36
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 101
65789: PUSH
65790: LD_INT 102
65792: PUSH
65793: LD_INT 103
65795: PUSH
65796: LD_INT 104
65798: PUSH
65799: LD_INT 105
65801: PUSH
65802: LD_INT 106
65804: PUSH
65805: LD_INT 107
65807: PUSH
65808: LD_INT 108
65810: PUSH
65811: LD_INT 109
65813: PUSH
65814: LD_INT 110
65816: PUSH
65817: LD_INT 111
65819: PUSH
65820: LD_INT 112
65822: PUSH
65823: LD_INT 113
65825: PUSH
65826: LD_INT 114
65828: PUSH
65829: LD_INT 116
65831: PUSH
65832: LD_INT 117
65834: PUSH
65835: LD_INT 118
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: ST_TO_ADDR
65861: GO 66260
65863: LD_INT 18
65865: DOUBLE
65866: EQUAL
65867: IFTRUE 65871
65869: GO 66019
65871: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65872: LD_ADDR_VAR 0 2
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: LD_INT 5
65885: PUSH
65886: LD_INT 7
65888: PUSH
65889: LD_INT 11
65891: PUSH
65892: LD_INT 12
65894: PUSH
65895: LD_INT 15
65897: PUSH
65898: LD_INT 16
65900: PUSH
65901: LD_INT 20
65903: PUSH
65904: LD_INT 21
65906: PUSH
65907: LD_INT 22
65909: PUSH
65910: LD_INT 23
65912: PUSH
65913: LD_INT 25
65915: PUSH
65916: LD_INT 26
65918: PUSH
65919: LD_INT 30
65921: PUSH
65922: LD_INT 31
65924: PUSH
65925: LD_INT 32
65927: PUSH
65928: LD_INT 33
65930: PUSH
65931: LD_INT 34
65933: PUSH
65934: LD_INT 35
65936: PUSH
65937: LD_INT 36
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 101
65965: PUSH
65966: LD_INT 102
65968: PUSH
65969: LD_INT 103
65971: PUSH
65972: LD_INT 106
65974: PUSH
65975: LD_INT 108
65977: PUSH
65978: LD_INT 112
65980: PUSH
65981: LD_INT 113
65983: PUSH
65984: LD_INT 114
65986: PUSH
65987: LD_INT 115
65989: PUSH
65990: LD_INT 116
65992: PUSH
65993: LD_INT 117
65995: PUSH
65996: LD_INT 118
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: ST_TO_ADDR
66017: GO 66260
66019: LD_INT 19
66021: DOUBLE
66022: EQUAL
66023: IFTRUE 66027
66025: GO 66259
66027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66028: LD_ADDR_VAR 0 2
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: LD_INT 3
66041: PUSH
66042: LD_INT 4
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: LD_INT 6
66050: PUSH
66051: LD_INT 7
66053: PUSH
66054: LD_INT 8
66056: PUSH
66057: LD_INT 9
66059: PUSH
66060: LD_INT 10
66062: PUSH
66063: LD_INT 11
66065: PUSH
66066: LD_INT 12
66068: PUSH
66069: LD_INT 13
66071: PUSH
66072: LD_INT 14
66074: PUSH
66075: LD_INT 15
66077: PUSH
66078: LD_INT 16
66080: PUSH
66081: LD_INT 17
66083: PUSH
66084: LD_INT 18
66086: PUSH
66087: LD_INT 19
66089: PUSH
66090: LD_INT 20
66092: PUSH
66093: LD_INT 21
66095: PUSH
66096: LD_INT 22
66098: PUSH
66099: LD_INT 23
66101: PUSH
66102: LD_INT 24
66104: PUSH
66105: LD_INT 25
66107: PUSH
66108: LD_INT 26
66110: PUSH
66111: LD_INT 27
66113: PUSH
66114: LD_INT 28
66116: PUSH
66117: LD_INT 29
66119: PUSH
66120: LD_INT 30
66122: PUSH
66123: LD_INT 31
66125: PUSH
66126: LD_INT 32
66128: PUSH
66129: LD_INT 33
66131: PUSH
66132: LD_INT 34
66134: PUSH
66135: LD_INT 35
66137: PUSH
66138: LD_INT 36
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 101
66181: PUSH
66182: LD_INT 102
66184: PUSH
66185: LD_INT 103
66187: PUSH
66188: LD_INT 104
66190: PUSH
66191: LD_INT 105
66193: PUSH
66194: LD_INT 106
66196: PUSH
66197: LD_INT 107
66199: PUSH
66200: LD_INT 108
66202: PUSH
66203: LD_INT 109
66205: PUSH
66206: LD_INT 110
66208: PUSH
66209: LD_INT 111
66211: PUSH
66212: LD_INT 112
66214: PUSH
66215: LD_INT 113
66217: PUSH
66218: LD_INT 114
66220: PUSH
66221: LD_INT 115
66223: PUSH
66224: LD_INT 116
66226: PUSH
66227: LD_INT 117
66229: PUSH
66230: LD_INT 118
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: ST_TO_ADDR
66257: GO 66260
66259: POP
// end else
66260: GO 66491
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66262: LD_ADDR_VAR 0 2
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: LD_INT 4
66278: PUSH
66279: LD_INT 5
66281: PUSH
66282: LD_INT 6
66284: PUSH
66285: LD_INT 7
66287: PUSH
66288: LD_INT 8
66290: PUSH
66291: LD_INT 9
66293: PUSH
66294: LD_INT 10
66296: PUSH
66297: LD_INT 11
66299: PUSH
66300: LD_INT 12
66302: PUSH
66303: LD_INT 13
66305: PUSH
66306: LD_INT 14
66308: PUSH
66309: LD_INT 15
66311: PUSH
66312: LD_INT 16
66314: PUSH
66315: LD_INT 17
66317: PUSH
66318: LD_INT 18
66320: PUSH
66321: LD_INT 19
66323: PUSH
66324: LD_INT 20
66326: PUSH
66327: LD_INT 21
66329: PUSH
66330: LD_INT 22
66332: PUSH
66333: LD_INT 23
66335: PUSH
66336: LD_INT 24
66338: PUSH
66339: LD_INT 25
66341: PUSH
66342: LD_INT 26
66344: PUSH
66345: LD_INT 27
66347: PUSH
66348: LD_INT 28
66350: PUSH
66351: LD_INT 29
66353: PUSH
66354: LD_INT 30
66356: PUSH
66357: LD_INT 31
66359: PUSH
66360: LD_INT 32
66362: PUSH
66363: LD_INT 33
66365: PUSH
66366: LD_INT 34
66368: PUSH
66369: LD_INT 35
66371: PUSH
66372: LD_INT 36
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 101
66415: PUSH
66416: LD_INT 102
66418: PUSH
66419: LD_INT 103
66421: PUSH
66422: LD_INT 104
66424: PUSH
66425: LD_INT 105
66427: PUSH
66428: LD_INT 106
66430: PUSH
66431: LD_INT 107
66433: PUSH
66434: LD_INT 108
66436: PUSH
66437: LD_INT 109
66439: PUSH
66440: LD_INT 110
66442: PUSH
66443: LD_INT 111
66445: PUSH
66446: LD_INT 112
66448: PUSH
66449: LD_INT 113
66451: PUSH
66452: LD_INT 114
66454: PUSH
66455: LD_INT 115
66457: PUSH
66458: LD_INT 116
66460: PUSH
66461: LD_INT 117
66463: PUSH
66464: LD_INT 118
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: ST_TO_ADDR
// if result then
66491: LD_VAR 0 2
66495: IFFALSE 67281
// begin normal :=  ;
66497: LD_ADDR_VAR 0 5
66501: PUSH
66502: LD_STRING 
66504: ST_TO_ADDR
// hardcore :=  ;
66505: LD_ADDR_VAR 0 6
66509: PUSH
66510: LD_STRING 
66512: ST_TO_ADDR
// active :=  ;
66513: LD_ADDR_VAR 0 7
66517: PUSH
66518: LD_STRING 
66520: ST_TO_ADDR
// for i = 1 to normalCounter do
66521: LD_ADDR_VAR 0 8
66525: PUSH
66526: DOUBLE
66527: LD_INT 1
66529: DEC
66530: ST_TO_ADDR
66531: LD_EXP 45
66535: PUSH
66536: FOR_TO
66537: IFFALSE 66638
// begin tmp := 0 ;
66539: LD_ADDR_VAR 0 3
66543: PUSH
66544: LD_STRING 0
66546: ST_TO_ADDR
// if result [ 1 ] then
66547: LD_VAR 0 2
66551: PUSH
66552: LD_INT 1
66554: ARRAY
66555: IFFALSE 66620
// if result [ 1 ] [ 1 ] = i then
66557: LD_VAR 0 2
66561: PUSH
66562: LD_INT 1
66564: ARRAY
66565: PUSH
66566: LD_INT 1
66568: ARRAY
66569: PUSH
66570: LD_VAR 0 8
66574: EQUAL
66575: IFFALSE 66620
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66577: LD_ADDR_VAR 0 2
66581: PUSH
66582: LD_VAR 0 2
66586: PPUSH
66587: LD_INT 1
66589: PPUSH
66590: LD_VAR 0 2
66594: PUSH
66595: LD_INT 1
66597: ARRAY
66598: PPUSH
66599: LD_INT 1
66601: PPUSH
66602: CALL_OW 3
66606: PPUSH
66607: CALL_OW 1
66611: ST_TO_ADDR
// tmp := 1 ;
66612: LD_ADDR_VAR 0 3
66616: PUSH
66617: LD_STRING 1
66619: ST_TO_ADDR
// end ; normal := normal & tmp ;
66620: LD_ADDR_VAR 0 5
66624: PUSH
66625: LD_VAR 0 5
66629: PUSH
66630: LD_VAR 0 3
66634: STR
66635: ST_TO_ADDR
// end ;
66636: GO 66536
66638: POP
66639: POP
// for i = 1 to hardcoreCounter do
66640: LD_ADDR_VAR 0 8
66644: PUSH
66645: DOUBLE
66646: LD_INT 1
66648: DEC
66649: ST_TO_ADDR
66650: LD_EXP 46
66654: PUSH
66655: FOR_TO
66656: IFFALSE 66761
// begin tmp := 0 ;
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: LD_STRING 0
66665: ST_TO_ADDR
// if result [ 2 ] then
66666: LD_VAR 0 2
66670: PUSH
66671: LD_INT 2
66673: ARRAY
66674: IFFALSE 66743
// if result [ 2 ] [ 1 ] = 100 + i then
66676: LD_VAR 0 2
66680: PUSH
66681: LD_INT 2
66683: ARRAY
66684: PUSH
66685: LD_INT 1
66687: ARRAY
66688: PUSH
66689: LD_INT 100
66691: PUSH
66692: LD_VAR 0 8
66696: PLUS
66697: EQUAL
66698: IFFALSE 66743
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_VAR 0 2
66709: PPUSH
66710: LD_INT 2
66712: PPUSH
66713: LD_VAR 0 2
66717: PUSH
66718: LD_INT 2
66720: ARRAY
66721: PPUSH
66722: LD_INT 1
66724: PPUSH
66725: CALL_OW 3
66729: PPUSH
66730: CALL_OW 1
66734: ST_TO_ADDR
// tmp := 1 ;
66735: LD_ADDR_VAR 0 3
66739: PUSH
66740: LD_STRING 1
66742: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66743: LD_ADDR_VAR 0 6
66747: PUSH
66748: LD_VAR 0 6
66752: PUSH
66753: LD_VAR 0 3
66757: STR
66758: ST_TO_ADDR
// end ;
66759: GO 66655
66761: POP
66762: POP
// if isGameLoad then
66763: LD_VAR 0 1
66767: IFFALSE 67242
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66769: LD_ADDR_VAR 0 4
66773: PUSH
66774: LD_EXP 49
66778: PUSH
66779: LD_EXP 48
66783: PUSH
66784: LD_EXP 50
66788: PUSH
66789: LD_EXP 47
66793: PUSH
66794: LD_EXP 51
66798: PUSH
66799: LD_EXP 52
66803: PUSH
66804: LD_EXP 53
66808: PUSH
66809: LD_EXP 54
66813: PUSH
66814: LD_EXP 55
66818: PUSH
66819: LD_EXP 56
66823: PUSH
66824: LD_EXP 57
66828: PUSH
66829: LD_EXP 58
66833: PUSH
66834: LD_EXP 59
66838: PUSH
66839: LD_EXP 60
66843: PUSH
66844: LD_EXP 68
66848: PUSH
66849: LD_EXP 69
66853: PUSH
66854: LD_EXP 70
66858: PUSH
66859: LD_EXP 71
66863: PUSH
66864: LD_EXP 73
66868: PUSH
66869: LD_EXP 74
66873: PUSH
66874: LD_EXP 75
66878: PUSH
66879: LD_EXP 78
66883: PUSH
66884: LD_EXP 80
66888: PUSH
66889: LD_EXP 81
66893: PUSH
66894: LD_EXP 82
66898: PUSH
66899: LD_EXP 84
66903: PUSH
66904: LD_EXP 85
66908: PUSH
66909: LD_EXP 88
66913: PUSH
66914: LD_EXP 89
66918: PUSH
66919: LD_EXP 90
66923: PUSH
66924: LD_EXP 91
66928: PUSH
66929: LD_EXP 92
66933: PUSH
66934: LD_EXP 93
66938: PUSH
66939: LD_EXP 94
66943: PUSH
66944: LD_EXP 95
66948: PUSH
66949: LD_EXP 96
66953: PUSH
66954: LD_EXP 61
66958: PUSH
66959: LD_EXP 62
66963: PUSH
66964: LD_EXP 65
66968: PUSH
66969: LD_EXP 66
66973: PUSH
66974: LD_EXP 67
66978: PUSH
66979: LD_EXP 63
66983: PUSH
66984: LD_EXP 64
66988: PUSH
66989: LD_EXP 72
66993: PUSH
66994: LD_EXP 76
66998: PUSH
66999: LD_EXP 77
67003: PUSH
67004: LD_EXP 79
67008: PUSH
67009: LD_EXP 83
67013: PUSH
67014: LD_EXP 86
67018: PUSH
67019: LD_EXP 87
67023: PUSH
67024: LD_EXP 97
67028: PUSH
67029: LD_EXP 98
67033: PUSH
67034: LD_EXP 99
67038: PUSH
67039: LD_EXP 100
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: ST_TO_ADDR
// tmp :=  ;
67100: LD_ADDR_VAR 0 3
67104: PUSH
67105: LD_STRING 
67107: ST_TO_ADDR
// for i = 1 to normalCounter do
67108: LD_ADDR_VAR 0 8
67112: PUSH
67113: DOUBLE
67114: LD_INT 1
67116: DEC
67117: ST_TO_ADDR
67118: LD_EXP 45
67122: PUSH
67123: FOR_TO
67124: IFFALSE 67160
// begin if flags [ i ] then
67126: LD_VAR 0 4
67130: PUSH
67131: LD_VAR 0 8
67135: ARRAY
67136: IFFALSE 67158
// tmp := tmp & i & ; ;
67138: LD_ADDR_VAR 0 3
67142: PUSH
67143: LD_VAR 0 3
67147: PUSH
67148: LD_VAR 0 8
67152: STR
67153: PUSH
67154: LD_STRING ;
67156: STR
67157: ST_TO_ADDR
// end ;
67158: GO 67123
67160: POP
67161: POP
// for i = 1 to hardcoreCounter do
67162: LD_ADDR_VAR 0 8
67166: PUSH
67167: DOUBLE
67168: LD_INT 1
67170: DEC
67171: ST_TO_ADDR
67172: LD_EXP 46
67176: PUSH
67177: FOR_TO
67178: IFFALSE 67224
// begin if flags [ normalCounter + i ] then
67180: LD_VAR 0 4
67184: PUSH
67185: LD_EXP 45
67189: PUSH
67190: LD_VAR 0 8
67194: PLUS
67195: ARRAY
67196: IFFALSE 67222
// tmp := tmp & ( 100 + i ) & ; ;
67198: LD_ADDR_VAR 0 3
67202: PUSH
67203: LD_VAR 0 3
67207: PUSH
67208: LD_INT 100
67210: PUSH
67211: LD_VAR 0 8
67215: PLUS
67216: STR
67217: PUSH
67218: LD_STRING ;
67220: STR
67221: ST_TO_ADDR
// end ;
67222: GO 67177
67224: POP
67225: POP
// if tmp then
67226: LD_VAR 0 3
67230: IFFALSE 67242
// active := tmp ;
67232: LD_ADDR_VAR 0 7
67236: PUSH
67237: LD_VAR 0 3
67241: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67242: LD_STRING getStreamItemsFromMission("
67244: PUSH
67245: LD_VAR 0 5
67249: STR
67250: PUSH
67251: LD_STRING ","
67253: STR
67254: PUSH
67255: LD_VAR 0 6
67259: STR
67260: PUSH
67261: LD_STRING ","
67263: STR
67264: PUSH
67265: LD_VAR 0 7
67269: STR
67270: PUSH
67271: LD_STRING ")
67273: STR
67274: PPUSH
67275: CALL_OW 559
// end else
67279: GO 67288
// ToLua ( getStreamItemsFromMission("","","") ) ;
67281: LD_STRING getStreamItemsFromMission("","","")
67283: PPUSH
67284: CALL_OW 559
// end ;
67288: LD_VAR 0 2
67292: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67293: LD_EXP 44
67297: PUSH
67298: LD_EXP 49
67302: AND
67303: IFFALSE 67427
67305: GO 67307
67307: DISABLE
67308: LD_INT 0
67310: PPUSH
67311: PPUSH
// begin enable ;
67312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67313: LD_ADDR_VAR 0 2
67317: PUSH
67318: LD_INT 22
67320: PUSH
67321: LD_OWVAR 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: LD_INT 34
67335: PUSH
67336: LD_INT 7
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 34
67345: PUSH
67346: LD_INT 45
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 34
67355: PUSH
67356: LD_INT 28
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 34
67365: PUSH
67366: LD_INT 47
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PPUSH
67384: CALL_OW 69
67388: ST_TO_ADDR
// if not tmp then
67389: LD_VAR 0 2
67393: NOT
67394: IFFALSE 67398
// exit ;
67396: GO 67427
// for i in tmp do
67398: LD_ADDR_VAR 0 1
67402: PUSH
67403: LD_VAR 0 2
67407: PUSH
67408: FOR_IN
67409: IFFALSE 67425
// begin SetLives ( i , 0 ) ;
67411: LD_VAR 0 1
67415: PPUSH
67416: LD_INT 0
67418: PPUSH
67419: CALL_OW 234
// end ;
67423: GO 67408
67425: POP
67426: POP
// end ;
67427: PPOPN 2
67429: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67430: LD_EXP 44
67434: PUSH
67435: LD_EXP 50
67439: AND
67440: IFFALSE 67524
67442: GO 67444
67444: DISABLE
67445: LD_INT 0
67447: PPUSH
67448: PPUSH
// begin enable ;
67449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67450: LD_ADDR_VAR 0 2
67454: PUSH
67455: LD_INT 22
67457: PUSH
67458: LD_OWVAR 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 32
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PPUSH
67481: CALL_OW 69
67485: ST_TO_ADDR
// if not tmp then
67486: LD_VAR 0 2
67490: NOT
67491: IFFALSE 67495
// exit ;
67493: GO 67524
// for i in tmp do
67495: LD_ADDR_VAR 0 1
67499: PUSH
67500: LD_VAR 0 2
67504: PUSH
67505: FOR_IN
67506: IFFALSE 67522
// begin SetLives ( i , 0 ) ;
67508: LD_VAR 0 1
67512: PPUSH
67513: LD_INT 0
67515: PPUSH
67516: CALL_OW 234
// end ;
67520: GO 67505
67522: POP
67523: POP
// end ;
67524: PPOPN 2
67526: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67527: LD_EXP 44
67531: PUSH
67532: LD_EXP 47
67536: AND
67537: IFFALSE 67630
67539: GO 67541
67541: DISABLE
67542: LD_INT 0
67544: PPUSH
// begin enable ;
67545: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67546: LD_ADDR_VAR 0 1
67550: PUSH
67551: LD_INT 22
67553: PUSH
67554: LD_OWVAR 2
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 25
67568: PUSH
67569: LD_INT 5
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 25
67578: PUSH
67579: LD_INT 9
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 25
67588: PUSH
67589: LD_INT 8
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PPUSH
67606: CALL_OW 69
67610: PUSH
67611: FOR_IN
67612: IFFALSE 67628
// begin SetClass ( i , 1 ) ;
67614: LD_VAR 0 1
67618: PPUSH
67619: LD_INT 1
67621: PPUSH
67622: CALL_OW 336
// end ;
67626: GO 67611
67628: POP
67629: POP
// end ;
67630: PPOPN 1
67632: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67633: LD_EXP 44
67637: PUSH
67638: LD_EXP 48
67642: AND
67643: PUSH
67644: LD_OWVAR 65
67648: PUSH
67649: LD_INT 7
67651: LESS
67652: AND
67653: IFFALSE 67667
67655: GO 67657
67657: DISABLE
// begin enable ;
67658: ENABLE
// game_speed := 7 ;
67659: LD_ADDR_OWVAR 65
67663: PUSH
67664: LD_INT 7
67666: ST_TO_ADDR
// end ;
67667: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67668: LD_EXP 44
67672: PUSH
67673: LD_EXP 51
67677: AND
67678: IFFALSE 67880
67680: GO 67682
67682: DISABLE
67683: LD_INT 0
67685: PPUSH
67686: PPUSH
67687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67688: LD_ADDR_VAR 0 3
67692: PUSH
67693: LD_INT 81
67695: PUSH
67696: LD_OWVAR 2
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 21
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PPUSH
67719: CALL_OW 69
67723: ST_TO_ADDR
// if not tmp then
67724: LD_VAR 0 3
67728: NOT
67729: IFFALSE 67733
// exit ;
67731: GO 67880
// if tmp > 5 then
67733: LD_VAR 0 3
67737: PUSH
67738: LD_INT 5
67740: GREATER
67741: IFFALSE 67753
// k := 5 else
67743: LD_ADDR_VAR 0 2
67747: PUSH
67748: LD_INT 5
67750: ST_TO_ADDR
67751: GO 67763
// k := tmp ;
67753: LD_ADDR_VAR 0 2
67757: PUSH
67758: LD_VAR 0 3
67762: ST_TO_ADDR
// for i := 1 to k do
67763: LD_ADDR_VAR 0 1
67767: PUSH
67768: DOUBLE
67769: LD_INT 1
67771: DEC
67772: ST_TO_ADDR
67773: LD_VAR 0 2
67777: PUSH
67778: FOR_TO
67779: IFFALSE 67878
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67781: LD_VAR 0 3
67785: PUSH
67786: LD_VAR 0 1
67790: ARRAY
67791: PPUSH
67792: LD_VAR 0 1
67796: PUSH
67797: LD_INT 4
67799: MOD
67800: PUSH
67801: LD_INT 1
67803: PLUS
67804: PPUSH
67805: CALL_OW 259
67809: PUSH
67810: LD_INT 10
67812: LESS
67813: IFFALSE 67876
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67815: LD_VAR 0 3
67819: PUSH
67820: LD_VAR 0 1
67824: ARRAY
67825: PPUSH
67826: LD_VAR 0 1
67830: PUSH
67831: LD_INT 4
67833: MOD
67834: PUSH
67835: LD_INT 1
67837: PLUS
67838: PPUSH
67839: LD_VAR 0 3
67843: PUSH
67844: LD_VAR 0 1
67848: ARRAY
67849: PPUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 4
67857: MOD
67858: PUSH
67859: LD_INT 1
67861: PLUS
67862: PPUSH
67863: CALL_OW 259
67867: PUSH
67868: LD_INT 1
67870: PLUS
67871: PPUSH
67872: CALL_OW 237
67876: GO 67778
67878: POP
67879: POP
// end ;
67880: PPOPN 3
67882: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67883: LD_EXP 44
67887: PUSH
67888: LD_EXP 52
67892: AND
67893: IFFALSE 67913
67895: GO 67897
67897: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67898: LD_INT 4
67900: PPUSH
67901: LD_OWVAR 2
67905: PPUSH
67906: LD_INT 0
67908: PPUSH
67909: CALL_OW 324
67913: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67914: LD_EXP 44
67918: PUSH
67919: LD_EXP 81
67923: AND
67924: IFFALSE 67944
67926: GO 67928
67928: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67929: LD_INT 19
67931: PPUSH
67932: LD_OWVAR 2
67936: PPUSH
67937: LD_INT 0
67939: PPUSH
67940: CALL_OW 324
67944: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67945: LD_EXP 44
67949: PUSH
67950: LD_EXP 53
67954: AND
67955: IFFALSE 68057
67957: GO 67959
67959: DISABLE
67960: LD_INT 0
67962: PPUSH
67963: PPUSH
// begin enable ;
67964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67965: LD_ADDR_VAR 0 2
67969: PUSH
67970: LD_INT 22
67972: PUSH
67973: LD_OWVAR 2
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: LD_INT 34
67987: PUSH
67988: LD_INT 11
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 34
67997: PUSH
67998: LD_INT 30
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PPUSH
68014: CALL_OW 69
68018: ST_TO_ADDR
// if not tmp then
68019: LD_VAR 0 2
68023: NOT
68024: IFFALSE 68028
// exit ;
68026: GO 68057
// for i in tmp do
68028: LD_ADDR_VAR 0 1
68032: PUSH
68033: LD_VAR 0 2
68037: PUSH
68038: FOR_IN
68039: IFFALSE 68055
// begin SetLives ( i , 0 ) ;
68041: LD_VAR 0 1
68045: PPUSH
68046: LD_INT 0
68048: PPUSH
68049: CALL_OW 234
// end ;
68053: GO 68038
68055: POP
68056: POP
// end ;
68057: PPOPN 2
68059: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68060: LD_EXP 44
68064: PUSH
68065: LD_EXP 54
68069: AND
68070: IFFALSE 68090
68072: GO 68074
68074: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68075: LD_INT 32
68077: PPUSH
68078: LD_OWVAR 2
68082: PPUSH
68083: LD_INT 0
68085: PPUSH
68086: CALL_OW 324
68090: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68091: LD_EXP 44
68095: PUSH
68096: LD_EXP 55
68100: AND
68101: IFFALSE 68282
68103: GO 68105
68105: DISABLE
68106: LD_INT 0
68108: PPUSH
68109: PPUSH
68110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68111: LD_ADDR_VAR 0 2
68115: PUSH
68116: LD_INT 22
68118: PUSH
68119: LD_OWVAR 2
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 33
68130: PUSH
68131: LD_INT 3
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PPUSH
68142: CALL_OW 69
68146: ST_TO_ADDR
// if not tmp then
68147: LD_VAR 0 2
68151: NOT
68152: IFFALSE 68156
// exit ;
68154: GO 68282
// side := 0 ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_INT 0
68163: ST_TO_ADDR
// for i := 1 to 8 do
68164: LD_ADDR_VAR 0 1
68168: PUSH
68169: DOUBLE
68170: LD_INT 1
68172: DEC
68173: ST_TO_ADDR
68174: LD_INT 8
68176: PUSH
68177: FOR_TO
68178: IFFALSE 68226
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68180: LD_OWVAR 2
68184: PUSH
68185: LD_VAR 0 1
68189: NONEQUAL
68190: PUSH
68191: LD_OWVAR 2
68195: PPUSH
68196: LD_VAR 0 1
68200: PPUSH
68201: CALL_OW 81
68205: PUSH
68206: LD_INT 2
68208: EQUAL
68209: AND
68210: IFFALSE 68224
// begin side := i ;
68212: LD_ADDR_VAR 0 3
68216: PUSH
68217: LD_VAR 0 1
68221: ST_TO_ADDR
// break ;
68222: GO 68226
// end ;
68224: GO 68177
68226: POP
68227: POP
// if not side then
68228: LD_VAR 0 3
68232: NOT
68233: IFFALSE 68237
// exit ;
68235: GO 68282
// for i := 1 to tmp do
68237: LD_ADDR_VAR 0 1
68241: PUSH
68242: DOUBLE
68243: LD_INT 1
68245: DEC
68246: ST_TO_ADDR
68247: LD_VAR 0 2
68251: PUSH
68252: FOR_TO
68253: IFFALSE 68280
// if Prob ( 60 ) then
68255: LD_INT 60
68257: PPUSH
68258: CALL_OW 13
68262: IFFALSE 68278
// SetSide ( i , side ) ;
68264: LD_VAR 0 1
68268: PPUSH
68269: LD_VAR 0 3
68273: PPUSH
68274: CALL_OW 235
68278: GO 68252
68280: POP
68281: POP
// end ;
68282: PPOPN 3
68284: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68285: LD_EXP 44
68289: PUSH
68290: LD_EXP 57
68294: AND
68295: IFFALSE 68414
68297: GO 68299
68299: DISABLE
68300: LD_INT 0
68302: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68303: LD_ADDR_VAR 0 1
68307: PUSH
68308: LD_INT 22
68310: PUSH
68311: LD_OWVAR 2
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 21
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 3
68332: PUSH
68333: LD_INT 23
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 69
68356: PUSH
68357: FOR_IN
68358: IFFALSE 68412
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68360: LD_VAR 0 1
68364: PPUSH
68365: CALL_OW 257
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 2
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: LD_INT 4
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: IN
68388: IFFALSE 68410
// SetClass ( un , rand ( 1 , 4 ) ) ;
68390: LD_VAR 0 1
68394: PPUSH
68395: LD_INT 1
68397: PPUSH
68398: LD_INT 4
68400: PPUSH
68401: CALL_OW 12
68405: PPUSH
68406: CALL_OW 336
68410: GO 68357
68412: POP
68413: POP
// end ;
68414: PPOPN 1
68416: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68417: LD_EXP 44
68421: PUSH
68422: LD_EXP 56
68426: AND
68427: IFFALSE 68506
68429: GO 68431
68431: DISABLE
68432: LD_INT 0
68434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68435: LD_ADDR_VAR 0 1
68439: PUSH
68440: LD_INT 22
68442: PUSH
68443: LD_OWVAR 2
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 21
68454: PUSH
68455: LD_INT 3
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PPUSH
68466: CALL_OW 69
68470: ST_TO_ADDR
// if not tmp then
68471: LD_VAR 0 1
68475: NOT
68476: IFFALSE 68480
// exit ;
68478: GO 68506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68480: LD_VAR 0 1
68484: PUSH
68485: LD_INT 1
68487: PPUSH
68488: LD_VAR 0 1
68492: PPUSH
68493: CALL_OW 12
68497: ARRAY
68498: PPUSH
68499: LD_INT 100
68501: PPUSH
68502: CALL_OW 234
// end ;
68506: PPOPN 1
68508: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68509: LD_EXP 44
68513: PUSH
68514: LD_EXP 58
68518: AND
68519: IFFALSE 68617
68521: GO 68523
68523: DISABLE
68524: LD_INT 0
68526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68527: LD_ADDR_VAR 0 1
68531: PUSH
68532: LD_INT 22
68534: PUSH
68535: LD_OWVAR 2
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 21
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PPUSH
68558: CALL_OW 69
68562: ST_TO_ADDR
// if not tmp then
68563: LD_VAR 0 1
68567: NOT
68568: IFFALSE 68572
// exit ;
68570: GO 68617
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68572: LD_VAR 0 1
68576: PUSH
68577: LD_INT 1
68579: PPUSH
68580: LD_VAR 0 1
68584: PPUSH
68585: CALL_OW 12
68589: ARRAY
68590: PPUSH
68591: LD_INT 1
68593: PPUSH
68594: LD_INT 4
68596: PPUSH
68597: CALL_OW 12
68601: PPUSH
68602: LD_INT 3000
68604: PPUSH
68605: LD_INT 9000
68607: PPUSH
68608: CALL_OW 12
68612: PPUSH
68613: CALL_OW 492
// end ;
68617: PPOPN 1
68619: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68620: LD_EXP 44
68624: PUSH
68625: LD_EXP 59
68629: AND
68630: IFFALSE 68650
68632: GO 68634
68634: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68635: LD_INT 1
68637: PPUSH
68638: LD_OWVAR 2
68642: PPUSH
68643: LD_INT 0
68645: PPUSH
68646: CALL_OW 324
68650: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68651: LD_EXP 44
68655: PUSH
68656: LD_EXP 60
68660: AND
68661: IFFALSE 68744
68663: GO 68665
68665: DISABLE
68666: LD_INT 0
68668: PPUSH
68669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_INT 22
68677: PUSH
68678: LD_OWVAR 2
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 21
68689: PUSH
68690: LD_INT 3
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PPUSH
68701: CALL_OW 69
68705: ST_TO_ADDR
// if not tmp then
68706: LD_VAR 0 2
68710: NOT
68711: IFFALSE 68715
// exit ;
68713: GO 68744
// for i in tmp do
68715: LD_ADDR_VAR 0 1
68719: PUSH
68720: LD_VAR 0 2
68724: PUSH
68725: FOR_IN
68726: IFFALSE 68742
// SetBLevel ( i , 10 ) ;
68728: LD_VAR 0 1
68732: PPUSH
68733: LD_INT 10
68735: PPUSH
68736: CALL_OW 241
68740: GO 68725
68742: POP
68743: POP
// end ;
68744: PPOPN 2
68746: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68747: LD_EXP 44
68751: PUSH
68752: LD_EXP 61
68756: AND
68757: IFFALSE 68868
68759: GO 68761
68761: DISABLE
68762: LD_INT 0
68764: PPUSH
68765: PPUSH
68766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68767: LD_ADDR_VAR 0 3
68771: PUSH
68772: LD_INT 22
68774: PUSH
68775: LD_OWVAR 2
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 25
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PPUSH
68798: CALL_OW 69
68802: ST_TO_ADDR
// if not tmp then
68803: LD_VAR 0 3
68807: NOT
68808: IFFALSE 68812
// exit ;
68810: GO 68868
// un := tmp [ rand ( 1 , tmp ) ] ;
68812: LD_ADDR_VAR 0 2
68816: PUSH
68817: LD_VAR 0 3
68821: PUSH
68822: LD_INT 1
68824: PPUSH
68825: LD_VAR 0 3
68829: PPUSH
68830: CALL_OW 12
68834: ARRAY
68835: ST_TO_ADDR
// if Crawls ( un ) then
68836: LD_VAR 0 2
68840: PPUSH
68841: CALL_OW 318
68845: IFFALSE 68856
// ComWalk ( un ) ;
68847: LD_VAR 0 2
68851: PPUSH
68852: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68856: LD_VAR 0 2
68860: PPUSH
68861: LD_INT 5
68863: PPUSH
68864: CALL_OW 336
// end ;
68868: PPOPN 3
68870: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68871: LD_EXP 44
68875: PUSH
68876: LD_EXP 62
68880: AND
68881: PUSH
68882: LD_OWVAR 67
68886: PUSH
68887: LD_INT 4
68889: LESS
68890: AND
68891: IFFALSE 68910
68893: GO 68895
68895: DISABLE
// begin Difficulty := Difficulty + 1 ;
68896: LD_ADDR_OWVAR 67
68900: PUSH
68901: LD_OWVAR 67
68905: PUSH
68906: LD_INT 1
68908: PLUS
68909: ST_TO_ADDR
// end ;
68910: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68911: LD_EXP 44
68915: PUSH
68916: LD_EXP 63
68920: AND
68921: IFFALSE 69024
68923: GO 68925
68925: DISABLE
68926: LD_INT 0
68928: PPUSH
// begin for i := 1 to 5 do
68929: LD_ADDR_VAR 0 1
68933: PUSH
68934: DOUBLE
68935: LD_INT 1
68937: DEC
68938: ST_TO_ADDR
68939: LD_INT 5
68941: PUSH
68942: FOR_TO
68943: IFFALSE 69022
// begin uc_nation := nation_nature ;
68945: LD_ADDR_OWVAR 21
68949: PUSH
68950: LD_INT 0
68952: ST_TO_ADDR
// uc_side := 0 ;
68953: LD_ADDR_OWVAR 20
68957: PUSH
68958: LD_INT 0
68960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68961: LD_ADDR_OWVAR 29
68965: PUSH
68966: LD_INT 12
68968: PUSH
68969: LD_INT 12
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: ST_TO_ADDR
// hc_agressivity := 20 ;
68976: LD_ADDR_OWVAR 35
68980: PUSH
68981: LD_INT 20
68983: ST_TO_ADDR
// hc_class := class_tiger ;
68984: LD_ADDR_OWVAR 28
68988: PUSH
68989: LD_INT 14
68991: ST_TO_ADDR
// hc_gallery :=  ;
68992: LD_ADDR_OWVAR 33
68996: PUSH
68997: LD_STRING 
68999: ST_TO_ADDR
// hc_name :=  ;
69000: LD_ADDR_OWVAR 26
69004: PUSH
69005: LD_STRING 
69007: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69008: CALL_OW 44
69012: PPUSH
69013: LD_INT 0
69015: PPUSH
69016: CALL_OW 51
// end ;
69020: GO 68942
69022: POP
69023: POP
// end ;
69024: PPOPN 1
69026: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69027: LD_EXP 44
69031: PUSH
69032: LD_EXP 64
69036: AND
69037: IFFALSE 69046
69039: GO 69041
69041: DISABLE
// StreamSibBomb ;
69042: CALL 69047 0 0
69046: END
// export function StreamSibBomb ; var i , x , y ; begin
69047: LD_INT 0
69049: PPUSH
69050: PPUSH
69051: PPUSH
69052: PPUSH
// result := false ;
69053: LD_ADDR_VAR 0 1
69057: PUSH
69058: LD_INT 0
69060: ST_TO_ADDR
// for i := 1 to 16 do
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: DOUBLE
69067: LD_INT 1
69069: DEC
69070: ST_TO_ADDR
69071: LD_INT 16
69073: PUSH
69074: FOR_TO
69075: IFFALSE 69274
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69077: LD_ADDR_VAR 0 3
69081: PUSH
69082: LD_INT 10
69084: PUSH
69085: LD_INT 20
69087: PUSH
69088: LD_INT 30
69090: PUSH
69091: LD_INT 40
69093: PUSH
69094: LD_INT 50
69096: PUSH
69097: LD_INT 60
69099: PUSH
69100: LD_INT 70
69102: PUSH
69103: LD_INT 80
69105: PUSH
69106: LD_INT 90
69108: PUSH
69109: LD_INT 100
69111: PUSH
69112: LD_INT 110
69114: PUSH
69115: LD_INT 120
69117: PUSH
69118: LD_INT 130
69120: PUSH
69121: LD_INT 140
69123: PUSH
69124: LD_INT 150
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 1
69146: PPUSH
69147: LD_INT 15
69149: PPUSH
69150: CALL_OW 12
69154: ARRAY
69155: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69156: LD_ADDR_VAR 0 4
69160: PUSH
69161: LD_INT 10
69163: PUSH
69164: LD_INT 20
69166: PUSH
69167: LD_INT 30
69169: PUSH
69170: LD_INT 40
69172: PUSH
69173: LD_INT 50
69175: PUSH
69176: LD_INT 60
69178: PUSH
69179: LD_INT 70
69181: PUSH
69182: LD_INT 80
69184: PUSH
69185: LD_INT 90
69187: PUSH
69188: LD_INT 100
69190: PUSH
69191: LD_INT 110
69193: PUSH
69194: LD_INT 120
69196: PUSH
69197: LD_INT 130
69199: PUSH
69200: LD_INT 140
69202: PUSH
69203: LD_INT 150
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 1
69225: PPUSH
69226: LD_INT 15
69228: PPUSH
69229: CALL_OW 12
69233: ARRAY
69234: ST_TO_ADDR
// if ValidHex ( x , y ) then
69235: LD_VAR 0 3
69239: PPUSH
69240: LD_VAR 0 4
69244: PPUSH
69245: CALL_OW 488
69249: IFFALSE 69272
// begin result := [ x , y ] ;
69251: LD_ADDR_VAR 0 1
69255: PUSH
69256: LD_VAR 0 3
69260: PUSH
69261: LD_VAR 0 4
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: ST_TO_ADDR
// break ;
69270: GO 69274
// end ; end ;
69272: GO 69074
69274: POP
69275: POP
// if result then
69276: LD_VAR 0 1
69280: IFFALSE 69340
// begin ToLua ( playSibBomb() ) ;
69282: LD_STRING playSibBomb()
69284: PPUSH
69285: CALL_OW 559
// wait ( 0 0$14 ) ;
69289: LD_INT 490
69291: PPUSH
69292: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69296: LD_VAR 0 1
69300: PUSH
69301: LD_INT 1
69303: ARRAY
69304: PPUSH
69305: LD_VAR 0 1
69309: PUSH
69310: LD_INT 2
69312: ARRAY
69313: PPUSH
69314: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69318: LD_VAR 0 1
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PPUSH
69327: LD_VAR 0 1
69331: PUSH
69332: LD_INT 2
69334: ARRAY
69335: PPUSH
69336: CALL_OW 429
// end ; end ;
69340: LD_VAR 0 1
69344: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69345: LD_EXP 44
69349: PUSH
69350: LD_EXP 66
69354: AND
69355: IFFALSE 69367
69357: GO 69359
69359: DISABLE
// YouLost (  ) ;
69360: LD_STRING 
69362: PPUSH
69363: CALL_OW 104
69367: END
// every 0 0$1 trigger StreamModeActive and sFog do
69368: LD_EXP 44
69372: PUSH
69373: LD_EXP 65
69377: AND
69378: IFFALSE 69392
69380: GO 69382
69382: DISABLE
// FogOff ( your_side ) ;
69383: LD_OWVAR 2
69387: PPUSH
69388: CALL_OW 344
69392: END
// every 0 0$1 trigger StreamModeActive and sSun do
69393: LD_EXP 44
69397: PUSH
69398: LD_EXP 67
69402: AND
69403: IFFALSE 69431
69405: GO 69407
69407: DISABLE
// begin solar_recharge_percent := 0 ;
69408: LD_ADDR_OWVAR 79
69412: PUSH
69413: LD_INT 0
69415: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69416: LD_INT 10500
69418: PPUSH
69419: CALL_OW 67
// solar_recharge_percent := 100 ;
69423: LD_ADDR_OWVAR 79
69427: PUSH
69428: LD_INT 100
69430: ST_TO_ADDR
// end ;
69431: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69432: LD_EXP 44
69436: PUSH
69437: LD_EXP 68
69441: AND
69442: IFFALSE 69681
69444: GO 69446
69446: DISABLE
69447: LD_INT 0
69449: PPUSH
69450: PPUSH
69451: PPUSH
// begin tmp := [ ] ;
69452: LD_ADDR_VAR 0 3
69456: PUSH
69457: EMPTY
69458: ST_TO_ADDR
// for i := 1 to 6 do
69459: LD_ADDR_VAR 0 1
69463: PUSH
69464: DOUBLE
69465: LD_INT 1
69467: DEC
69468: ST_TO_ADDR
69469: LD_INT 6
69471: PUSH
69472: FOR_TO
69473: IFFALSE 69578
// begin uc_nation := nation_nature ;
69475: LD_ADDR_OWVAR 21
69479: PUSH
69480: LD_INT 0
69482: ST_TO_ADDR
// uc_side := 0 ;
69483: LD_ADDR_OWVAR 20
69487: PUSH
69488: LD_INT 0
69490: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69491: LD_ADDR_OWVAR 29
69495: PUSH
69496: LD_INT 12
69498: PUSH
69499: LD_INT 12
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: ST_TO_ADDR
// hc_agressivity := 20 ;
69506: LD_ADDR_OWVAR 35
69510: PUSH
69511: LD_INT 20
69513: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69514: LD_ADDR_OWVAR 28
69518: PUSH
69519: LD_INT 17
69521: ST_TO_ADDR
// hc_gallery :=  ;
69522: LD_ADDR_OWVAR 33
69526: PUSH
69527: LD_STRING 
69529: ST_TO_ADDR
// hc_name :=  ;
69530: LD_ADDR_OWVAR 26
69534: PUSH
69535: LD_STRING 
69537: ST_TO_ADDR
// un := CreateHuman ;
69538: LD_ADDR_VAR 0 2
69542: PUSH
69543: CALL_OW 44
69547: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69548: LD_VAR 0 2
69552: PPUSH
69553: LD_INT 1
69555: PPUSH
69556: CALL_OW 51
// tmp := tmp ^ un ;
69560: LD_ADDR_VAR 0 3
69564: PUSH
69565: LD_VAR 0 3
69569: PUSH
69570: LD_VAR 0 2
69574: ADD
69575: ST_TO_ADDR
// end ;
69576: GO 69472
69578: POP
69579: POP
// repeat wait ( 0 0$1 ) ;
69580: LD_INT 35
69582: PPUSH
69583: CALL_OW 67
// for un in tmp do
69587: LD_ADDR_VAR 0 2
69591: PUSH
69592: LD_VAR 0 3
69596: PUSH
69597: FOR_IN
69598: IFFALSE 69672
// begin if IsDead ( un ) then
69600: LD_VAR 0 2
69604: PPUSH
69605: CALL_OW 301
69609: IFFALSE 69629
// begin tmp := tmp diff un ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 3
69620: PUSH
69621: LD_VAR 0 2
69625: DIFF
69626: ST_TO_ADDR
// continue ;
69627: GO 69597
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69629: LD_VAR 0 2
69633: PPUSH
69634: LD_INT 3
69636: PUSH
69637: LD_INT 22
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PPUSH
69651: CALL_OW 69
69655: PPUSH
69656: LD_VAR 0 2
69660: PPUSH
69661: CALL_OW 74
69665: PPUSH
69666: CALL_OW 115
// end ;
69670: GO 69597
69672: POP
69673: POP
// until not tmp ;
69674: LD_VAR 0 3
69678: NOT
69679: IFFALSE 69580
// end ;
69681: PPOPN 3
69683: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69684: LD_EXP 44
69688: PUSH
69689: LD_EXP 69
69693: AND
69694: IFFALSE 69748
69696: GO 69698
69698: DISABLE
// begin ToLua ( displayTroll(); ) ;
69699: LD_STRING displayTroll();
69701: PPUSH
69702: CALL_OW 559
// wait ( 3 3$00 ) ;
69706: LD_INT 6300
69708: PPUSH
69709: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69713: LD_STRING hideTroll();
69715: PPUSH
69716: CALL_OW 559
// wait ( 1 1$00 ) ;
69720: LD_INT 2100
69722: PPUSH
69723: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69727: LD_STRING displayTroll();
69729: PPUSH
69730: CALL_OW 559
// wait ( 1 1$00 ) ;
69734: LD_INT 2100
69736: PPUSH
69737: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69741: LD_STRING hideTroll();
69743: PPUSH
69744: CALL_OW 559
// end ;
69748: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69749: LD_EXP 44
69753: PUSH
69754: LD_EXP 70
69758: AND
69759: IFFALSE 69822
69761: GO 69763
69763: DISABLE
69764: LD_INT 0
69766: PPUSH
// begin p := 0 ;
69767: LD_ADDR_VAR 0 1
69771: PUSH
69772: LD_INT 0
69774: ST_TO_ADDR
// repeat game_speed := 1 ;
69775: LD_ADDR_OWVAR 65
69779: PUSH
69780: LD_INT 1
69782: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69783: LD_INT 35
69785: PPUSH
69786: CALL_OW 67
// p := p + 1 ;
69790: LD_ADDR_VAR 0 1
69794: PUSH
69795: LD_VAR 0 1
69799: PUSH
69800: LD_INT 1
69802: PLUS
69803: ST_TO_ADDR
// until p >= 60 ;
69804: LD_VAR 0 1
69808: PUSH
69809: LD_INT 60
69811: GREATEREQUAL
69812: IFFALSE 69775
// game_speed := 4 ;
69814: LD_ADDR_OWVAR 65
69818: PUSH
69819: LD_INT 4
69821: ST_TO_ADDR
// end ;
69822: PPOPN 1
69824: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69825: LD_EXP 44
69829: PUSH
69830: LD_EXP 71
69834: AND
69835: IFFALSE 69981
69837: GO 69839
69839: DISABLE
69840: LD_INT 0
69842: PPUSH
69843: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69844: LD_ADDR_VAR 0 1
69848: PUSH
69849: LD_INT 22
69851: PUSH
69852: LD_OWVAR 2
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: PUSH
69864: LD_INT 30
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 30
69876: PUSH
69877: LD_INT 1
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: LIST
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PPUSH
69893: CALL_OW 69
69897: ST_TO_ADDR
// if not depot then
69898: LD_VAR 0 1
69902: NOT
69903: IFFALSE 69907
// exit ;
69905: GO 69981
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69907: LD_ADDR_VAR 0 2
69911: PUSH
69912: LD_VAR 0 1
69916: PUSH
69917: LD_INT 1
69919: PPUSH
69920: LD_VAR 0 1
69924: PPUSH
69925: CALL_OW 12
69929: ARRAY
69930: PPUSH
69931: CALL_OW 274
69935: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69936: LD_VAR 0 2
69940: PPUSH
69941: LD_INT 1
69943: PPUSH
69944: LD_INT 0
69946: PPUSH
69947: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69951: LD_VAR 0 2
69955: PPUSH
69956: LD_INT 2
69958: PPUSH
69959: LD_INT 0
69961: PPUSH
69962: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69966: LD_VAR 0 2
69970: PPUSH
69971: LD_INT 3
69973: PPUSH
69974: LD_INT 0
69976: PPUSH
69977: CALL_OW 277
// end ;
69981: PPOPN 2
69983: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69984: LD_EXP 44
69988: PUSH
69989: LD_EXP 72
69993: AND
69994: IFFALSE 70091
69996: GO 69998
69998: DISABLE
69999: LD_INT 0
70001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70002: LD_ADDR_VAR 0 1
70006: PUSH
70007: LD_INT 22
70009: PUSH
70010: LD_OWVAR 2
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 21
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 3
70031: PUSH
70032: LD_INT 23
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: PPUSH
70051: CALL_OW 69
70055: ST_TO_ADDR
// if not tmp then
70056: LD_VAR 0 1
70060: NOT
70061: IFFALSE 70065
// exit ;
70063: GO 70091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70065: LD_VAR 0 1
70069: PUSH
70070: LD_INT 1
70072: PPUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: CALL_OW 12
70082: ARRAY
70083: PPUSH
70084: LD_INT 200
70086: PPUSH
70087: CALL_OW 234
// end ;
70091: PPOPN 1
70093: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70094: LD_EXP 44
70098: PUSH
70099: LD_EXP 73
70103: AND
70104: IFFALSE 70183
70106: GO 70108
70108: DISABLE
70109: LD_INT 0
70111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70112: LD_ADDR_VAR 0 1
70116: PUSH
70117: LD_INT 22
70119: PUSH
70120: LD_OWVAR 2
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 21
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PPUSH
70143: CALL_OW 69
70147: ST_TO_ADDR
// if not tmp then
70148: LD_VAR 0 1
70152: NOT
70153: IFFALSE 70157
// exit ;
70155: GO 70183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70157: LD_VAR 0 1
70161: PUSH
70162: LD_INT 1
70164: PPUSH
70165: LD_VAR 0 1
70169: PPUSH
70170: CALL_OW 12
70174: ARRAY
70175: PPUSH
70176: LD_INT 60
70178: PPUSH
70179: CALL_OW 234
// end ;
70183: PPOPN 1
70185: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70186: LD_EXP 44
70190: PUSH
70191: LD_EXP 74
70195: AND
70196: IFFALSE 70295
70198: GO 70200
70200: DISABLE
70201: LD_INT 0
70203: PPUSH
70204: PPUSH
// begin enable ;
70205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70206: LD_ADDR_VAR 0 1
70210: PUSH
70211: LD_INT 22
70213: PUSH
70214: LD_OWVAR 2
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 61
70225: PUSH
70226: EMPTY
70227: LIST
70228: PUSH
70229: LD_INT 33
70231: PUSH
70232: LD_INT 2
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: PPUSH
70244: CALL_OW 69
70248: ST_TO_ADDR
// if not tmp then
70249: LD_VAR 0 1
70253: NOT
70254: IFFALSE 70258
// exit ;
70256: GO 70295
// for i in tmp do
70258: LD_ADDR_VAR 0 2
70262: PUSH
70263: LD_VAR 0 1
70267: PUSH
70268: FOR_IN
70269: IFFALSE 70293
// if IsControledBy ( i ) then
70271: LD_VAR 0 2
70275: PPUSH
70276: CALL_OW 312
70280: IFFALSE 70291
// ComUnlink ( i ) ;
70282: LD_VAR 0 2
70286: PPUSH
70287: CALL_OW 136
70291: GO 70268
70293: POP
70294: POP
// end ;
70295: PPOPN 2
70297: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70298: LD_EXP 44
70302: PUSH
70303: LD_EXP 75
70307: AND
70308: IFFALSE 70448
70310: GO 70312
70312: DISABLE
70313: LD_INT 0
70315: PPUSH
70316: PPUSH
// begin ToLua ( displayPowell(); ) ;
70317: LD_STRING displayPowell();
70319: PPUSH
70320: CALL_OW 559
// uc_side := 0 ;
70324: LD_ADDR_OWVAR 20
70328: PUSH
70329: LD_INT 0
70331: ST_TO_ADDR
// uc_nation := 2 ;
70332: LD_ADDR_OWVAR 21
70336: PUSH
70337: LD_INT 2
70339: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70340: LD_ADDR_OWVAR 37
70344: PUSH
70345: LD_INT 14
70347: ST_TO_ADDR
// vc_engine := engine_siberite ;
70348: LD_ADDR_OWVAR 39
70352: PUSH
70353: LD_INT 3
70355: ST_TO_ADDR
// vc_control := control_apeman ;
70356: LD_ADDR_OWVAR 38
70360: PUSH
70361: LD_INT 5
70363: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70364: LD_ADDR_OWVAR 40
70368: PUSH
70369: LD_INT 29
70371: ST_TO_ADDR
// un := CreateVehicle ;
70372: LD_ADDR_VAR 0 2
70376: PUSH
70377: CALL_OW 45
70381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70382: LD_VAR 0 2
70386: PPUSH
70387: LD_INT 1
70389: PPUSH
70390: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70394: LD_INT 35
70396: PPUSH
70397: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70401: LD_VAR 0 2
70405: PPUSH
70406: LD_INT 22
70408: PUSH
70409: LD_OWVAR 2
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PPUSH
70418: CALL_OW 69
70422: PPUSH
70423: LD_VAR 0 2
70427: PPUSH
70428: CALL_OW 74
70432: PPUSH
70433: CALL_OW 115
// until IsDead ( un ) ;
70437: LD_VAR 0 2
70441: PPUSH
70442: CALL_OW 301
70446: IFFALSE 70394
// end ;
70448: PPOPN 2
70450: END
// every 0 0$1 trigger StreamModeActive and sStu do
70451: LD_EXP 44
70455: PUSH
70456: LD_EXP 83
70460: AND
70461: IFFALSE 70477
70463: GO 70465
70465: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70466: LD_STRING displayStucuk();
70468: PPUSH
70469: CALL_OW 559
// ResetFog ;
70473: CALL_OW 335
// end ;
70477: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70478: LD_EXP 44
70482: PUSH
70483: LD_EXP 76
70487: AND
70488: IFFALSE 70629
70490: GO 70492
70492: DISABLE
70493: LD_INT 0
70495: PPUSH
70496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70497: LD_ADDR_VAR 0 2
70501: PUSH
70502: LD_INT 22
70504: PUSH
70505: LD_OWVAR 2
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 21
70516: PUSH
70517: LD_INT 1
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PPUSH
70528: CALL_OW 69
70532: ST_TO_ADDR
// if not tmp then
70533: LD_VAR 0 2
70537: NOT
70538: IFFALSE 70542
// exit ;
70540: GO 70629
// un := tmp [ rand ( 1 , tmp ) ] ;
70542: LD_ADDR_VAR 0 1
70546: PUSH
70547: LD_VAR 0 2
70551: PUSH
70552: LD_INT 1
70554: PPUSH
70555: LD_VAR 0 2
70559: PPUSH
70560: CALL_OW 12
70564: ARRAY
70565: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70566: LD_VAR 0 1
70570: PPUSH
70571: LD_INT 0
70573: PPUSH
70574: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70578: LD_VAR 0 1
70582: PPUSH
70583: LD_OWVAR 3
70587: PUSH
70588: LD_VAR 0 1
70592: DIFF
70593: PPUSH
70594: LD_VAR 0 1
70598: PPUSH
70599: CALL_OW 74
70603: PPUSH
70604: CALL_OW 115
// wait ( 0 0$20 ) ;
70608: LD_INT 700
70610: PPUSH
70611: CALL_OW 67
// SetSide ( un , your_side ) ;
70615: LD_VAR 0 1
70619: PPUSH
70620: LD_OWVAR 2
70624: PPUSH
70625: CALL_OW 235
// end ;
70629: PPOPN 2
70631: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70632: LD_EXP 44
70636: PUSH
70637: LD_EXP 77
70641: AND
70642: IFFALSE 70748
70644: GO 70646
70646: DISABLE
70647: LD_INT 0
70649: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70650: LD_ADDR_VAR 0 1
70654: PUSH
70655: LD_INT 22
70657: PUSH
70658: LD_OWVAR 2
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 2
70669: PUSH
70670: LD_INT 30
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 30
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PPUSH
70699: CALL_OW 69
70703: ST_TO_ADDR
// if not depot then
70704: LD_VAR 0 1
70708: NOT
70709: IFFALSE 70713
// exit ;
70711: GO 70748
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70713: LD_VAR 0 1
70717: PUSH
70718: LD_INT 1
70720: ARRAY
70721: PPUSH
70722: CALL_OW 250
70726: PPUSH
70727: LD_VAR 0 1
70731: PUSH
70732: LD_INT 1
70734: ARRAY
70735: PPUSH
70736: CALL_OW 251
70740: PPUSH
70741: LD_INT 70
70743: PPUSH
70744: CALL_OW 495
// end ;
70748: PPOPN 1
70750: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70751: LD_EXP 44
70755: PUSH
70756: LD_EXP 78
70760: AND
70761: IFFALSE 70972
70763: GO 70765
70765: DISABLE
70766: LD_INT 0
70768: PPUSH
70769: PPUSH
70770: PPUSH
70771: PPUSH
70772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70773: LD_ADDR_VAR 0 5
70777: PUSH
70778: LD_INT 22
70780: PUSH
70781: LD_OWVAR 2
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 21
70792: PUSH
70793: LD_INT 1
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PPUSH
70804: CALL_OW 69
70808: ST_TO_ADDR
// if not tmp then
70809: LD_VAR 0 5
70813: NOT
70814: IFFALSE 70818
// exit ;
70816: GO 70972
// for i in tmp do
70818: LD_ADDR_VAR 0 1
70822: PUSH
70823: LD_VAR 0 5
70827: PUSH
70828: FOR_IN
70829: IFFALSE 70970
// begin d := rand ( 0 , 5 ) ;
70831: LD_ADDR_VAR 0 4
70835: PUSH
70836: LD_INT 0
70838: PPUSH
70839: LD_INT 5
70841: PPUSH
70842: CALL_OW 12
70846: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70847: LD_ADDR_VAR 0 2
70851: PUSH
70852: LD_VAR 0 1
70856: PPUSH
70857: CALL_OW 250
70861: PPUSH
70862: LD_VAR 0 4
70866: PPUSH
70867: LD_INT 3
70869: PPUSH
70870: LD_INT 12
70872: PPUSH
70873: CALL_OW 12
70877: PPUSH
70878: CALL_OW 272
70882: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70883: LD_ADDR_VAR 0 3
70887: PUSH
70888: LD_VAR 0 1
70892: PPUSH
70893: CALL_OW 251
70897: PPUSH
70898: LD_VAR 0 4
70902: PPUSH
70903: LD_INT 3
70905: PPUSH
70906: LD_INT 12
70908: PPUSH
70909: CALL_OW 12
70913: PPUSH
70914: CALL_OW 273
70918: ST_TO_ADDR
// if ValidHex ( x , y ) then
70919: LD_VAR 0 2
70923: PPUSH
70924: LD_VAR 0 3
70928: PPUSH
70929: CALL_OW 488
70933: IFFALSE 70968
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70935: LD_VAR 0 1
70939: PPUSH
70940: LD_VAR 0 2
70944: PPUSH
70945: LD_VAR 0 3
70949: PPUSH
70950: LD_INT 3
70952: PPUSH
70953: LD_INT 6
70955: PPUSH
70956: CALL_OW 12
70960: PPUSH
70961: LD_INT 1
70963: PPUSH
70964: CALL_OW 483
// end ;
70968: GO 70828
70970: POP
70971: POP
// end ;
70972: PPOPN 5
70974: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70975: LD_EXP 44
70979: PUSH
70980: LD_EXP 79
70984: AND
70985: IFFALSE 71079
70987: GO 70989
70989: DISABLE
70990: LD_INT 0
70992: PPUSH
70993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70994: LD_ADDR_VAR 0 2
70998: PUSH
70999: LD_INT 22
71001: PUSH
71002: LD_OWVAR 2
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 32
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 21
71023: PUSH
71024: LD_INT 2
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: PPUSH
71036: CALL_OW 69
71040: ST_TO_ADDR
// if not tmp then
71041: LD_VAR 0 2
71045: NOT
71046: IFFALSE 71050
// exit ;
71048: GO 71079
// for i in tmp do
71050: LD_ADDR_VAR 0 1
71054: PUSH
71055: LD_VAR 0 2
71059: PUSH
71060: FOR_IN
71061: IFFALSE 71077
// SetFuel ( i , 0 ) ;
71063: LD_VAR 0 1
71067: PPUSH
71068: LD_INT 0
71070: PPUSH
71071: CALL_OW 240
71075: GO 71060
71077: POP
71078: POP
// end ;
71079: PPOPN 2
71081: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71082: LD_EXP 44
71086: PUSH
71087: LD_EXP 80
71091: AND
71092: IFFALSE 71158
71094: GO 71096
71096: DISABLE
71097: LD_INT 0
71099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71100: LD_ADDR_VAR 0 1
71104: PUSH
71105: LD_INT 22
71107: PUSH
71108: LD_OWVAR 2
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 30
71119: PUSH
71120: LD_INT 29
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PPUSH
71131: CALL_OW 69
71135: ST_TO_ADDR
// if not tmp then
71136: LD_VAR 0 1
71140: NOT
71141: IFFALSE 71145
// exit ;
71143: GO 71158
// DestroyUnit ( tmp [ 1 ] ) ;
71145: LD_VAR 0 1
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: PPUSH
71154: CALL_OW 65
// end ;
71158: PPOPN 1
71160: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71161: LD_EXP 44
71165: PUSH
71166: LD_EXP 82
71170: AND
71171: IFFALSE 71300
71173: GO 71175
71175: DISABLE
71176: LD_INT 0
71178: PPUSH
// begin uc_side := 0 ;
71179: LD_ADDR_OWVAR 20
71183: PUSH
71184: LD_INT 0
71186: ST_TO_ADDR
// uc_nation := nation_arabian ;
71187: LD_ADDR_OWVAR 21
71191: PUSH
71192: LD_INT 2
71194: ST_TO_ADDR
// hc_gallery :=  ;
71195: LD_ADDR_OWVAR 33
71199: PUSH
71200: LD_STRING 
71202: ST_TO_ADDR
// hc_name :=  ;
71203: LD_ADDR_OWVAR 26
71207: PUSH
71208: LD_STRING 
71210: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71211: LD_INT 1
71213: PPUSH
71214: LD_INT 11
71216: PPUSH
71217: LD_INT 10
71219: PPUSH
71220: CALL_OW 380
// un := CreateHuman ;
71224: LD_ADDR_VAR 0 1
71228: PUSH
71229: CALL_OW 44
71233: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71234: LD_VAR 0 1
71238: PPUSH
71239: LD_INT 1
71241: PPUSH
71242: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71246: LD_INT 35
71248: PPUSH
71249: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71253: LD_VAR 0 1
71257: PPUSH
71258: LD_INT 22
71260: PUSH
71261: LD_OWVAR 2
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PPUSH
71270: CALL_OW 69
71274: PPUSH
71275: LD_VAR 0 1
71279: PPUSH
71280: CALL_OW 74
71284: PPUSH
71285: CALL_OW 115
// until IsDead ( un ) ;
71289: LD_VAR 0 1
71293: PPUSH
71294: CALL_OW 301
71298: IFFALSE 71246
// end ;
71300: PPOPN 1
71302: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71303: LD_EXP 44
71307: PUSH
71308: LD_EXP 84
71312: AND
71313: IFFALSE 71325
71315: GO 71317
71317: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71318: LD_STRING earthquake(getX(game), 0, 32)
71320: PPUSH
71321: CALL_OW 559
71325: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71326: LD_EXP 44
71330: PUSH
71331: LD_EXP 85
71335: AND
71336: IFFALSE 71427
71338: GO 71340
71340: DISABLE
71341: LD_INT 0
71343: PPUSH
// begin enable ;
71344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71345: LD_ADDR_VAR 0 1
71349: PUSH
71350: LD_INT 22
71352: PUSH
71353: LD_OWVAR 2
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 21
71364: PUSH
71365: LD_INT 2
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 33
71374: PUSH
71375: LD_INT 3
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: LIST
71386: PPUSH
71387: CALL_OW 69
71391: ST_TO_ADDR
// if not tmp then
71392: LD_VAR 0 1
71396: NOT
71397: IFFALSE 71401
// exit ;
71399: GO 71427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71401: LD_VAR 0 1
71405: PUSH
71406: LD_INT 1
71408: PPUSH
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 12
71418: ARRAY
71419: PPUSH
71420: LD_INT 1
71422: PPUSH
71423: CALL_OW 234
// end ;
71427: PPOPN 1
71429: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71430: LD_EXP 44
71434: PUSH
71435: LD_EXP 86
71439: AND
71440: IFFALSE 71581
71442: GO 71444
71444: DISABLE
71445: LD_INT 0
71447: PPUSH
71448: PPUSH
71449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71450: LD_ADDR_VAR 0 3
71454: PUSH
71455: LD_INT 22
71457: PUSH
71458: LD_OWVAR 2
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 25
71469: PUSH
71470: LD_INT 1
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PPUSH
71481: CALL_OW 69
71485: ST_TO_ADDR
// if not tmp then
71486: LD_VAR 0 3
71490: NOT
71491: IFFALSE 71495
// exit ;
71493: GO 71581
// un := tmp [ rand ( 1 , tmp ) ] ;
71495: LD_ADDR_VAR 0 2
71499: PUSH
71500: LD_VAR 0 3
71504: PUSH
71505: LD_INT 1
71507: PPUSH
71508: LD_VAR 0 3
71512: PPUSH
71513: CALL_OW 12
71517: ARRAY
71518: ST_TO_ADDR
// if Crawls ( un ) then
71519: LD_VAR 0 2
71523: PPUSH
71524: CALL_OW 318
71528: IFFALSE 71539
// ComWalk ( un ) ;
71530: LD_VAR 0 2
71534: PPUSH
71535: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71539: LD_VAR 0 2
71543: PPUSH
71544: LD_INT 9
71546: PPUSH
71547: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71551: LD_INT 28
71553: PPUSH
71554: LD_OWVAR 2
71558: PPUSH
71559: LD_INT 2
71561: PPUSH
71562: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71566: LD_INT 29
71568: PPUSH
71569: LD_OWVAR 2
71573: PPUSH
71574: LD_INT 2
71576: PPUSH
71577: CALL_OW 322
// end ;
71581: PPOPN 3
71583: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71584: LD_EXP 44
71588: PUSH
71589: LD_EXP 87
71593: AND
71594: IFFALSE 71705
71596: GO 71598
71598: DISABLE
71599: LD_INT 0
71601: PPUSH
71602: PPUSH
71603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71604: LD_ADDR_VAR 0 3
71608: PUSH
71609: LD_INT 22
71611: PUSH
71612: LD_OWVAR 2
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 25
71623: PUSH
71624: LD_INT 1
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PPUSH
71635: CALL_OW 69
71639: ST_TO_ADDR
// if not tmp then
71640: LD_VAR 0 3
71644: NOT
71645: IFFALSE 71649
// exit ;
71647: GO 71705
// un := tmp [ rand ( 1 , tmp ) ] ;
71649: LD_ADDR_VAR 0 2
71653: PUSH
71654: LD_VAR 0 3
71658: PUSH
71659: LD_INT 1
71661: PPUSH
71662: LD_VAR 0 3
71666: PPUSH
71667: CALL_OW 12
71671: ARRAY
71672: ST_TO_ADDR
// if Crawls ( un ) then
71673: LD_VAR 0 2
71677: PPUSH
71678: CALL_OW 318
71682: IFFALSE 71693
// ComWalk ( un ) ;
71684: LD_VAR 0 2
71688: PPUSH
71689: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71693: LD_VAR 0 2
71697: PPUSH
71698: LD_INT 8
71700: PPUSH
71701: CALL_OW 336
// end ;
71705: PPOPN 3
71707: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71708: LD_EXP 44
71712: PUSH
71713: LD_EXP 88
71717: AND
71718: IFFALSE 71862
71720: GO 71722
71722: DISABLE
71723: LD_INT 0
71725: PPUSH
71726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71727: LD_ADDR_VAR 0 2
71731: PUSH
71732: LD_INT 22
71734: PUSH
71735: LD_OWVAR 2
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 21
71746: PUSH
71747: LD_INT 2
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 2
71756: PUSH
71757: LD_INT 34
71759: PUSH
71760: LD_INT 12
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 34
71769: PUSH
71770: LD_INT 51
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 34
71779: PUSH
71780: LD_INT 32
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: LIST
71797: PPUSH
71798: CALL_OW 69
71802: ST_TO_ADDR
// if not tmp then
71803: LD_VAR 0 2
71807: NOT
71808: IFFALSE 71812
// exit ;
71810: GO 71862
// for i in tmp do
71812: LD_ADDR_VAR 0 1
71816: PUSH
71817: LD_VAR 0 2
71821: PUSH
71822: FOR_IN
71823: IFFALSE 71860
// if GetCargo ( i , mat_artifact ) = 0 then
71825: LD_VAR 0 1
71829: PPUSH
71830: LD_INT 4
71832: PPUSH
71833: CALL_OW 289
71837: PUSH
71838: LD_INT 0
71840: EQUAL
71841: IFFALSE 71858
// SetCargo ( i , mat_siberit , 100 ) ;
71843: LD_VAR 0 1
71847: PPUSH
71848: LD_INT 3
71850: PPUSH
71851: LD_INT 100
71853: PPUSH
71854: CALL_OW 290
71858: GO 71822
71860: POP
71861: POP
// end ;
71862: PPOPN 2
71864: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71865: LD_EXP 44
71869: PUSH
71870: LD_EXP 89
71874: AND
71875: IFFALSE 72058
71877: GO 71879
71879: DISABLE
71880: LD_INT 0
71882: PPUSH
71883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71884: LD_ADDR_VAR 0 2
71888: PUSH
71889: LD_INT 22
71891: PUSH
71892: LD_OWVAR 2
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PPUSH
71901: CALL_OW 69
71905: ST_TO_ADDR
// if not tmp then
71906: LD_VAR 0 2
71910: NOT
71911: IFFALSE 71915
// exit ;
71913: GO 72058
// for i := 1 to 2 do
71915: LD_ADDR_VAR 0 1
71919: PUSH
71920: DOUBLE
71921: LD_INT 1
71923: DEC
71924: ST_TO_ADDR
71925: LD_INT 2
71927: PUSH
71928: FOR_TO
71929: IFFALSE 72056
// begin uc_side := your_side ;
71931: LD_ADDR_OWVAR 20
71935: PUSH
71936: LD_OWVAR 2
71940: ST_TO_ADDR
// uc_nation := nation_american ;
71941: LD_ADDR_OWVAR 21
71945: PUSH
71946: LD_INT 1
71948: ST_TO_ADDR
// vc_chassis := us_morphling ;
71949: LD_ADDR_OWVAR 37
71953: PUSH
71954: LD_INT 5
71956: ST_TO_ADDR
// vc_engine := engine_siberite ;
71957: LD_ADDR_OWVAR 39
71961: PUSH
71962: LD_INT 3
71964: ST_TO_ADDR
// vc_control := control_computer ;
71965: LD_ADDR_OWVAR 38
71969: PUSH
71970: LD_INT 3
71972: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71973: LD_ADDR_OWVAR 40
71977: PUSH
71978: LD_INT 10
71980: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71981: LD_VAR 0 2
71985: PUSH
71986: LD_INT 1
71988: ARRAY
71989: PPUSH
71990: CALL_OW 310
71994: NOT
71995: IFFALSE 72042
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71997: CALL_OW 45
72001: PPUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_INT 1
72009: ARRAY
72010: PPUSH
72011: CALL_OW 250
72015: PPUSH
72016: LD_VAR 0 2
72020: PUSH
72021: LD_INT 1
72023: ARRAY
72024: PPUSH
72025: CALL_OW 251
72029: PPUSH
72030: LD_INT 12
72032: PPUSH
72033: LD_INT 1
72035: PPUSH
72036: CALL_OW 50
72040: GO 72054
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72042: CALL_OW 45
72046: PPUSH
72047: LD_INT 1
72049: PPUSH
72050: CALL_OW 51
// end ;
72054: GO 71928
72056: POP
72057: POP
// end ;
72058: PPOPN 2
72060: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72061: LD_EXP 44
72065: PUSH
72066: LD_EXP 90
72070: AND
72071: IFFALSE 72293
72073: GO 72075
72075: DISABLE
72076: LD_INT 0
72078: PPUSH
72079: PPUSH
72080: PPUSH
72081: PPUSH
72082: PPUSH
72083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72084: LD_ADDR_VAR 0 6
72088: PUSH
72089: LD_INT 22
72091: PUSH
72092: LD_OWVAR 2
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 21
72103: PUSH
72104: LD_INT 1
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 3
72113: PUSH
72114: LD_INT 23
72116: PUSH
72117: LD_INT 0
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: LIST
72132: PPUSH
72133: CALL_OW 69
72137: ST_TO_ADDR
// if not tmp then
72138: LD_VAR 0 6
72142: NOT
72143: IFFALSE 72147
// exit ;
72145: GO 72293
// s1 := rand ( 1 , 4 ) ;
72147: LD_ADDR_VAR 0 2
72151: PUSH
72152: LD_INT 1
72154: PPUSH
72155: LD_INT 4
72157: PPUSH
72158: CALL_OW 12
72162: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72163: LD_ADDR_VAR 0 4
72167: PUSH
72168: LD_VAR 0 6
72172: PUSH
72173: LD_INT 1
72175: ARRAY
72176: PPUSH
72177: LD_VAR 0 2
72181: PPUSH
72182: CALL_OW 259
72186: ST_TO_ADDR
// if s1 = 1 then
72187: LD_VAR 0 2
72191: PUSH
72192: LD_INT 1
72194: EQUAL
72195: IFFALSE 72215
// s2 := rand ( 2 , 4 ) else
72197: LD_ADDR_VAR 0 3
72201: PUSH
72202: LD_INT 2
72204: PPUSH
72205: LD_INT 4
72207: PPUSH
72208: CALL_OW 12
72212: ST_TO_ADDR
72213: GO 72223
// s2 := 1 ;
72215: LD_ADDR_VAR 0 3
72219: PUSH
72220: LD_INT 1
72222: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72223: LD_ADDR_VAR 0 5
72227: PUSH
72228: LD_VAR 0 6
72232: PUSH
72233: LD_INT 1
72235: ARRAY
72236: PPUSH
72237: LD_VAR 0 3
72241: PPUSH
72242: CALL_OW 259
72246: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72247: LD_VAR 0 6
72251: PUSH
72252: LD_INT 1
72254: ARRAY
72255: PPUSH
72256: LD_VAR 0 2
72260: PPUSH
72261: LD_VAR 0 5
72265: PPUSH
72266: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72270: LD_VAR 0 6
72274: PUSH
72275: LD_INT 1
72277: ARRAY
72278: PPUSH
72279: LD_VAR 0 3
72283: PPUSH
72284: LD_VAR 0 4
72288: PPUSH
72289: CALL_OW 237
// end ;
72293: PPOPN 6
72295: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72296: LD_EXP 44
72300: PUSH
72301: LD_EXP 91
72305: AND
72306: IFFALSE 72385
72308: GO 72310
72310: DISABLE
72311: LD_INT 0
72313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72314: LD_ADDR_VAR 0 1
72318: PUSH
72319: LD_INT 22
72321: PUSH
72322: LD_OWVAR 2
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 30
72333: PUSH
72334: LD_INT 3
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PPUSH
72345: CALL_OW 69
72349: ST_TO_ADDR
// if not tmp then
72350: LD_VAR 0 1
72354: NOT
72355: IFFALSE 72359
// exit ;
72357: GO 72385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72359: LD_VAR 0 1
72363: PUSH
72364: LD_INT 1
72366: PPUSH
72367: LD_VAR 0 1
72371: PPUSH
72372: CALL_OW 12
72376: ARRAY
72377: PPUSH
72378: LD_INT 1
72380: PPUSH
72381: CALL_OW 234
// end ;
72385: PPOPN 1
72387: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72388: LD_EXP 44
72392: PUSH
72393: LD_EXP 92
72397: AND
72398: IFFALSE 72510
72400: GO 72402
72402: DISABLE
72403: LD_INT 0
72405: PPUSH
72406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72407: LD_ADDR_VAR 0 2
72411: PUSH
72412: LD_INT 22
72414: PUSH
72415: LD_OWVAR 2
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 2
72426: PUSH
72427: LD_INT 30
72429: PUSH
72430: LD_INT 27
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 30
72439: PUSH
72440: LD_INT 26
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 30
72449: PUSH
72450: LD_INT 28
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PPUSH
72467: CALL_OW 69
72471: ST_TO_ADDR
// if not tmp then
72472: LD_VAR 0 2
72476: NOT
72477: IFFALSE 72481
// exit ;
72479: GO 72510
// for i in tmp do
72481: LD_ADDR_VAR 0 1
72485: PUSH
72486: LD_VAR 0 2
72490: PUSH
72491: FOR_IN
72492: IFFALSE 72508
// SetLives ( i , 1 ) ;
72494: LD_VAR 0 1
72498: PPUSH
72499: LD_INT 1
72501: PPUSH
72502: CALL_OW 234
72506: GO 72491
72508: POP
72509: POP
// end ;
72510: PPOPN 2
72512: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72513: LD_EXP 44
72517: PUSH
72518: LD_EXP 93
72522: AND
72523: IFFALSE 72810
72525: GO 72527
72527: DISABLE
72528: LD_INT 0
72530: PPUSH
72531: PPUSH
72532: PPUSH
// begin i := rand ( 1 , 7 ) ;
72533: LD_ADDR_VAR 0 1
72537: PUSH
72538: LD_INT 1
72540: PPUSH
72541: LD_INT 7
72543: PPUSH
72544: CALL_OW 12
72548: ST_TO_ADDR
// case i of 1 :
72549: LD_VAR 0 1
72553: PUSH
72554: LD_INT 1
72556: DOUBLE
72557: EQUAL
72558: IFTRUE 72562
72560: GO 72572
72562: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72563: LD_STRING earthquake(getX(game), 0, 32)
72565: PPUSH
72566: CALL_OW 559
72570: GO 72810
72572: LD_INT 2
72574: DOUBLE
72575: EQUAL
72576: IFTRUE 72580
72578: GO 72594
72580: POP
// begin ToLua ( displayStucuk(); ) ;
72581: LD_STRING displayStucuk();
72583: PPUSH
72584: CALL_OW 559
// ResetFog ;
72588: CALL_OW 335
// end ; 3 :
72592: GO 72810
72594: LD_INT 3
72596: DOUBLE
72597: EQUAL
72598: IFTRUE 72602
72600: GO 72706
72602: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72603: LD_ADDR_VAR 0 2
72607: PUSH
72608: LD_INT 22
72610: PUSH
72611: LD_OWVAR 2
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 25
72622: PUSH
72623: LD_INT 1
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PPUSH
72634: CALL_OW 69
72638: ST_TO_ADDR
// if not tmp then
72639: LD_VAR 0 2
72643: NOT
72644: IFFALSE 72648
// exit ;
72646: GO 72810
// un := tmp [ rand ( 1 , tmp ) ] ;
72648: LD_ADDR_VAR 0 3
72652: PUSH
72653: LD_VAR 0 2
72657: PUSH
72658: LD_INT 1
72660: PPUSH
72661: LD_VAR 0 2
72665: PPUSH
72666: CALL_OW 12
72670: ARRAY
72671: ST_TO_ADDR
// if Crawls ( un ) then
72672: LD_VAR 0 3
72676: PPUSH
72677: CALL_OW 318
72681: IFFALSE 72692
// ComWalk ( un ) ;
72683: LD_VAR 0 3
72687: PPUSH
72688: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72692: LD_VAR 0 3
72696: PPUSH
72697: LD_INT 8
72699: PPUSH
72700: CALL_OW 336
// end ; 4 :
72704: GO 72810
72706: LD_INT 4
72708: DOUBLE
72709: EQUAL
72710: IFTRUE 72714
72712: GO 72788
72714: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72715: LD_ADDR_VAR 0 2
72719: PUSH
72720: LD_INT 22
72722: PUSH
72723: LD_OWVAR 2
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 30
72734: PUSH
72735: LD_INT 29
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PPUSH
72746: CALL_OW 69
72750: ST_TO_ADDR
// if not tmp then
72751: LD_VAR 0 2
72755: NOT
72756: IFFALSE 72760
// exit ;
72758: GO 72810
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72760: LD_VAR 0 2
72764: PUSH
72765: LD_INT 1
72767: ARRAY
72768: PPUSH
72769: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72773: LD_VAR 0 2
72777: PUSH
72778: LD_INT 1
72780: ARRAY
72781: PPUSH
72782: CALL_OW 65
// end ; 5 .. 7 :
72786: GO 72810
72788: LD_INT 5
72790: DOUBLE
72791: GREATEREQUAL
72792: IFFALSE 72800
72794: LD_INT 7
72796: DOUBLE
72797: LESSEQUAL
72798: IFTRUE 72802
72800: GO 72809
72802: POP
// StreamSibBomb ; end ;
72803: CALL 69047 0 0
72807: GO 72810
72809: POP
// end ;
72810: PPOPN 3
72812: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72813: LD_EXP 44
72817: PUSH
72818: LD_EXP 94
72822: AND
72823: IFFALSE 72979
72825: GO 72827
72827: DISABLE
72828: LD_INT 0
72830: PPUSH
72831: PPUSH
72832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72833: LD_ADDR_VAR 0 2
72837: PUSH
72838: LD_INT 81
72840: PUSH
72841: LD_OWVAR 2
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: LD_INT 21
72855: PUSH
72856: LD_INT 1
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 21
72865: PUSH
72866: LD_INT 2
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: LIST
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PPUSH
72882: CALL_OW 69
72886: ST_TO_ADDR
// if not tmp then
72887: LD_VAR 0 2
72891: NOT
72892: IFFALSE 72896
// exit ;
72894: GO 72979
// p := 0 ;
72896: LD_ADDR_VAR 0 3
72900: PUSH
72901: LD_INT 0
72903: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72904: LD_INT 35
72906: PPUSH
72907: CALL_OW 67
// p := p + 1 ;
72911: LD_ADDR_VAR 0 3
72915: PUSH
72916: LD_VAR 0 3
72920: PUSH
72921: LD_INT 1
72923: PLUS
72924: ST_TO_ADDR
// for i in tmp do
72925: LD_ADDR_VAR 0 1
72929: PUSH
72930: LD_VAR 0 2
72934: PUSH
72935: FOR_IN
72936: IFFALSE 72967
// if GetLives ( i ) < 1000 then
72938: LD_VAR 0 1
72942: PPUSH
72943: CALL_OW 256
72947: PUSH
72948: LD_INT 1000
72950: LESS
72951: IFFALSE 72965
// SetLives ( i , 1000 ) ;
72953: LD_VAR 0 1
72957: PPUSH
72958: LD_INT 1000
72960: PPUSH
72961: CALL_OW 234
72965: GO 72935
72967: POP
72968: POP
// until p > 20 ;
72969: LD_VAR 0 3
72973: PUSH
72974: LD_INT 20
72976: GREATER
72977: IFFALSE 72904
// end ;
72979: PPOPN 3
72981: END
// every 0 0$1 trigger StreamModeActive and sTime do
72982: LD_EXP 44
72986: PUSH
72987: LD_EXP 95
72991: AND
72992: IFFALSE 73027
72994: GO 72996
72996: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72997: LD_INT 28
72999: PPUSH
73000: LD_OWVAR 2
73004: PPUSH
73005: LD_INT 2
73007: PPUSH
73008: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73012: LD_INT 30
73014: PPUSH
73015: LD_OWVAR 2
73019: PPUSH
73020: LD_INT 2
73022: PPUSH
73023: CALL_OW 322
// end ;
73027: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73028: LD_EXP 44
73032: PUSH
73033: LD_EXP 96
73037: AND
73038: IFFALSE 73159
73040: GO 73042
73042: DISABLE
73043: LD_INT 0
73045: PPUSH
73046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73047: LD_ADDR_VAR 0 2
73051: PUSH
73052: LD_INT 22
73054: PUSH
73055: LD_OWVAR 2
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 21
73066: PUSH
73067: LD_INT 1
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 3
73076: PUSH
73077: LD_INT 23
73079: PUSH
73080: LD_INT 0
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: LIST
73095: PPUSH
73096: CALL_OW 69
73100: ST_TO_ADDR
// if not tmp then
73101: LD_VAR 0 2
73105: NOT
73106: IFFALSE 73110
// exit ;
73108: GO 73159
// for i in tmp do
73110: LD_ADDR_VAR 0 1
73114: PUSH
73115: LD_VAR 0 2
73119: PUSH
73120: FOR_IN
73121: IFFALSE 73157
// begin if Crawls ( i ) then
73123: LD_VAR 0 1
73127: PPUSH
73128: CALL_OW 318
73132: IFFALSE 73143
// ComWalk ( i ) ;
73134: LD_VAR 0 1
73138: PPUSH
73139: CALL_OW 138
// SetClass ( i , 2 ) ;
73143: LD_VAR 0 1
73147: PPUSH
73148: LD_INT 2
73150: PPUSH
73151: CALL_OW 336
// end ;
73155: GO 73120
73157: POP
73158: POP
// end ;
73159: PPOPN 2
73161: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73162: LD_EXP 44
73166: PUSH
73167: LD_EXP 97
73171: AND
73172: IFFALSE 73460
73174: GO 73176
73176: DISABLE
73177: LD_INT 0
73179: PPUSH
73180: PPUSH
73181: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73182: LD_OWVAR 2
73186: PPUSH
73187: LD_INT 9
73189: PPUSH
73190: LD_INT 1
73192: PPUSH
73193: LD_INT 1
73195: PPUSH
73196: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73200: LD_INT 9
73202: PPUSH
73203: LD_OWVAR 2
73207: PPUSH
73208: CALL_OW 343
// uc_side := 9 ;
73212: LD_ADDR_OWVAR 20
73216: PUSH
73217: LD_INT 9
73219: ST_TO_ADDR
// uc_nation := 2 ;
73220: LD_ADDR_OWVAR 21
73224: PUSH
73225: LD_INT 2
73227: ST_TO_ADDR
// hc_name := Dark Warrior ;
73228: LD_ADDR_OWVAR 26
73232: PUSH
73233: LD_STRING Dark Warrior
73235: ST_TO_ADDR
// hc_gallery :=  ;
73236: LD_ADDR_OWVAR 33
73240: PUSH
73241: LD_STRING 
73243: ST_TO_ADDR
// hc_noskilllimit := true ;
73244: LD_ADDR_OWVAR 76
73248: PUSH
73249: LD_INT 1
73251: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73252: LD_ADDR_OWVAR 31
73256: PUSH
73257: LD_INT 30
73259: PUSH
73260: LD_INT 30
73262: PUSH
73263: LD_INT 30
73265: PUSH
73266: LD_INT 30
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: ST_TO_ADDR
// un := CreateHuman ;
73275: LD_ADDR_VAR 0 3
73279: PUSH
73280: CALL_OW 44
73284: ST_TO_ADDR
// hc_noskilllimit := false ;
73285: LD_ADDR_OWVAR 76
73289: PUSH
73290: LD_INT 0
73292: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73293: LD_VAR 0 3
73297: PPUSH
73298: LD_INT 1
73300: PPUSH
73301: CALL_OW 51
// ToLua ( playRanger() ) ;
73305: LD_STRING playRanger()
73307: PPUSH
73308: CALL_OW 559
// p := 0 ;
73312: LD_ADDR_VAR 0 2
73316: PUSH
73317: LD_INT 0
73319: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73320: LD_INT 35
73322: PPUSH
73323: CALL_OW 67
// p := p + 1 ;
73327: LD_ADDR_VAR 0 2
73331: PUSH
73332: LD_VAR 0 2
73336: PUSH
73337: LD_INT 1
73339: PLUS
73340: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73341: LD_VAR 0 3
73345: PPUSH
73346: CALL_OW 256
73350: PUSH
73351: LD_INT 1000
73353: LESS
73354: IFFALSE 73368
// SetLives ( un , 1000 ) ;
73356: LD_VAR 0 3
73360: PPUSH
73361: LD_INT 1000
73363: PPUSH
73364: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73368: LD_VAR 0 3
73372: PPUSH
73373: LD_INT 81
73375: PUSH
73376: LD_OWVAR 2
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 91
73387: PUSH
73388: LD_VAR 0 3
73392: PUSH
73393: LD_INT 30
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PPUSH
73405: CALL_OW 69
73409: PPUSH
73410: LD_VAR 0 3
73414: PPUSH
73415: CALL_OW 74
73419: PPUSH
73420: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73424: LD_VAR 0 2
73428: PUSH
73429: LD_INT 80
73431: GREATER
73432: PUSH
73433: LD_VAR 0 3
73437: PPUSH
73438: CALL_OW 301
73442: OR
73443: IFFALSE 73320
// if un then
73445: LD_VAR 0 3
73449: IFFALSE 73460
// RemoveUnit ( un ) ;
73451: LD_VAR 0 3
73455: PPUSH
73456: CALL_OW 64
// end ;
73460: PPOPN 3
73462: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73463: LD_EXP 98
73467: IFFALSE 73583
73469: GO 73471
73471: DISABLE
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73477: LD_ADDR_VAR 0 2
73481: PUSH
73482: LD_INT 81
73484: PUSH
73485: LD_OWVAR 2
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 21
73496: PUSH
73497: LD_INT 1
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PPUSH
73508: CALL_OW 69
73512: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73513: LD_STRING playComputer()
73515: PPUSH
73516: CALL_OW 559
// if not tmp then
73520: LD_VAR 0 2
73524: NOT
73525: IFFALSE 73529
// exit ;
73527: GO 73583
// for i in tmp do
73529: LD_ADDR_VAR 0 1
73533: PUSH
73534: LD_VAR 0 2
73538: PUSH
73539: FOR_IN
73540: IFFALSE 73581
// for j := 1 to 4 do
73542: LD_ADDR_VAR 0 3
73546: PUSH
73547: DOUBLE
73548: LD_INT 1
73550: DEC
73551: ST_TO_ADDR
73552: LD_INT 4
73554: PUSH
73555: FOR_TO
73556: IFFALSE 73577
// SetSkill ( i , j , 10 ) ;
73558: LD_VAR 0 1
73562: PPUSH
73563: LD_VAR 0 3
73567: PPUSH
73568: LD_INT 10
73570: PPUSH
73571: CALL_OW 237
73575: GO 73555
73577: POP
73578: POP
73579: GO 73539
73581: POP
73582: POP
// end ;
73583: PPOPN 3
73585: END
// every 0 0$1 trigger s30 do var i , tmp ;
73586: LD_EXP 99
73590: IFFALSE 73659
73592: GO 73594
73594: DISABLE
73595: LD_INT 0
73597: PPUSH
73598: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73599: LD_ADDR_VAR 0 2
73603: PUSH
73604: LD_INT 22
73606: PUSH
73607: LD_OWVAR 2
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PPUSH
73616: CALL_OW 69
73620: ST_TO_ADDR
// if not tmp then
73621: LD_VAR 0 2
73625: NOT
73626: IFFALSE 73630
// exit ;
73628: GO 73659
// for i in tmp do
73630: LD_ADDR_VAR 0 1
73634: PUSH
73635: LD_VAR 0 2
73639: PUSH
73640: FOR_IN
73641: IFFALSE 73657
// SetLives ( i , 300 ) ;
73643: LD_VAR 0 1
73647: PPUSH
73648: LD_INT 300
73650: PPUSH
73651: CALL_OW 234
73655: GO 73640
73657: POP
73658: POP
// end ;
73659: PPOPN 2
73661: END
// every 0 0$1 trigger s60 do var i , tmp ;
73662: LD_EXP 100
73666: IFFALSE 73735
73668: GO 73670
73670: DISABLE
73671: LD_INT 0
73673: PPUSH
73674: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73675: LD_ADDR_VAR 0 2
73679: PUSH
73680: LD_INT 22
73682: PUSH
73683: LD_OWVAR 2
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PPUSH
73692: CALL_OW 69
73696: ST_TO_ADDR
// if not tmp then
73697: LD_VAR 0 2
73701: NOT
73702: IFFALSE 73706
// exit ;
73704: GO 73735
// for i in tmp do
73706: LD_ADDR_VAR 0 1
73710: PUSH
73711: LD_VAR 0 2
73715: PUSH
73716: FOR_IN
73717: IFFALSE 73733
// SetLives ( i , 600 ) ;
73719: LD_VAR 0 1
73723: PPUSH
73724: LD_INT 600
73726: PPUSH
73727: CALL_OW 234
73731: GO 73716
73733: POP
73734: POP
// end ;
73735: PPOPN 2
73737: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73738: LD_INT 0
73740: PPUSH
// case cmd of 301 :
73741: LD_VAR 0 1
73745: PUSH
73746: LD_INT 301
73748: DOUBLE
73749: EQUAL
73750: IFTRUE 73754
73752: GO 73786
73754: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73755: LD_VAR 0 6
73759: PPUSH
73760: LD_VAR 0 7
73764: PPUSH
73765: LD_VAR 0 8
73769: PPUSH
73770: LD_VAR 0 4
73774: PPUSH
73775: LD_VAR 0 5
73779: PPUSH
73780: CALL 74987 0 5
73784: GO 73907
73786: LD_INT 302
73788: DOUBLE
73789: EQUAL
73790: IFTRUE 73794
73792: GO 73831
73794: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73795: LD_VAR 0 6
73799: PPUSH
73800: LD_VAR 0 7
73804: PPUSH
73805: LD_VAR 0 8
73809: PPUSH
73810: LD_VAR 0 9
73814: PPUSH
73815: LD_VAR 0 4
73819: PPUSH
73820: LD_VAR 0 5
73824: PPUSH
73825: CALL 75078 0 6
73829: GO 73907
73831: LD_INT 303
73833: DOUBLE
73834: EQUAL
73835: IFTRUE 73839
73837: GO 73876
73839: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73840: LD_VAR 0 6
73844: PPUSH
73845: LD_VAR 0 7
73849: PPUSH
73850: LD_VAR 0 8
73854: PPUSH
73855: LD_VAR 0 9
73859: PPUSH
73860: LD_VAR 0 4
73864: PPUSH
73865: LD_VAR 0 5
73869: PPUSH
73870: CALL 73912 0 6
73874: GO 73907
73876: LD_INT 304
73878: DOUBLE
73879: EQUAL
73880: IFTRUE 73884
73882: GO 73906
73884: POP
// hHackTeleport ( unit , x , y ) ; end ;
73885: LD_VAR 0 2
73889: PPUSH
73890: LD_VAR 0 4
73894: PPUSH
73895: LD_VAR 0 5
73899: PPUSH
73900: CALL 75671 0 3
73904: GO 73907
73906: POP
// end ;
73907: LD_VAR 0 12
73911: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73912: LD_INT 0
73914: PPUSH
73915: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73916: LD_VAR 0 1
73920: PUSH
73921: LD_INT 1
73923: LESS
73924: PUSH
73925: LD_VAR 0 1
73929: PUSH
73930: LD_INT 3
73932: GREATER
73933: OR
73934: PUSH
73935: LD_VAR 0 5
73939: PPUSH
73940: LD_VAR 0 6
73944: PPUSH
73945: CALL_OW 428
73949: OR
73950: IFFALSE 73954
// exit ;
73952: GO 74674
// uc_side := your_side ;
73954: LD_ADDR_OWVAR 20
73958: PUSH
73959: LD_OWVAR 2
73963: ST_TO_ADDR
// uc_nation := nation ;
73964: LD_ADDR_OWVAR 21
73968: PUSH
73969: LD_VAR 0 1
73973: ST_TO_ADDR
// bc_level = 1 ;
73974: LD_ADDR_OWVAR 43
73978: PUSH
73979: LD_INT 1
73981: ST_TO_ADDR
// case btype of 1 :
73982: LD_VAR 0 2
73986: PUSH
73987: LD_INT 1
73989: DOUBLE
73990: EQUAL
73991: IFTRUE 73995
73993: GO 74006
73995: POP
// bc_type := b_depot ; 2 :
73996: LD_ADDR_OWVAR 42
74000: PUSH
74001: LD_INT 0
74003: ST_TO_ADDR
74004: GO 74618
74006: LD_INT 2
74008: DOUBLE
74009: EQUAL
74010: IFTRUE 74014
74012: GO 74025
74014: POP
// bc_type := b_warehouse ; 3 :
74015: LD_ADDR_OWVAR 42
74019: PUSH
74020: LD_INT 1
74022: ST_TO_ADDR
74023: GO 74618
74025: LD_INT 3
74027: DOUBLE
74028: EQUAL
74029: IFTRUE 74033
74031: GO 74044
74033: POP
// bc_type := b_lab ; 4 .. 9 :
74034: LD_ADDR_OWVAR 42
74038: PUSH
74039: LD_INT 6
74041: ST_TO_ADDR
74042: GO 74618
74044: LD_INT 4
74046: DOUBLE
74047: GREATEREQUAL
74048: IFFALSE 74056
74050: LD_INT 9
74052: DOUBLE
74053: LESSEQUAL
74054: IFTRUE 74058
74056: GO 74110
74058: POP
// begin bc_type := b_lab_half ;
74059: LD_ADDR_OWVAR 42
74063: PUSH
74064: LD_INT 7
74066: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74067: LD_ADDR_OWVAR 44
74071: PUSH
74072: LD_INT 10
74074: PUSH
74075: LD_INT 11
74077: PUSH
74078: LD_INT 12
74080: PUSH
74081: LD_INT 15
74083: PUSH
74084: LD_INT 14
74086: PUSH
74087: LD_INT 13
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_INT 3
74105: MINUS
74106: ARRAY
74107: ST_TO_ADDR
// end ; 10 .. 13 :
74108: GO 74618
74110: LD_INT 10
74112: DOUBLE
74113: GREATEREQUAL
74114: IFFALSE 74122
74116: LD_INT 13
74118: DOUBLE
74119: LESSEQUAL
74120: IFTRUE 74124
74122: GO 74201
74124: POP
// begin bc_type := b_lab_full ;
74125: LD_ADDR_OWVAR 42
74129: PUSH
74130: LD_INT 8
74132: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74133: LD_ADDR_OWVAR 44
74137: PUSH
74138: LD_INT 10
74140: PUSH
74141: LD_INT 12
74143: PUSH
74144: LD_INT 14
74146: PUSH
74147: LD_INT 13
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: LD_INT 9
74163: MINUS
74164: ARRAY
74165: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74166: LD_ADDR_OWVAR 45
74170: PUSH
74171: LD_INT 11
74173: PUSH
74174: LD_INT 15
74176: PUSH
74177: LD_INT 12
74179: PUSH
74180: LD_INT 15
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: PUSH
74189: LD_VAR 0 2
74193: PUSH
74194: LD_INT 9
74196: MINUS
74197: ARRAY
74198: ST_TO_ADDR
// end ; 14 :
74199: GO 74618
74201: LD_INT 14
74203: DOUBLE
74204: EQUAL
74205: IFTRUE 74209
74207: GO 74220
74209: POP
// bc_type := b_workshop ; 15 :
74210: LD_ADDR_OWVAR 42
74214: PUSH
74215: LD_INT 2
74217: ST_TO_ADDR
74218: GO 74618
74220: LD_INT 15
74222: DOUBLE
74223: EQUAL
74224: IFTRUE 74228
74226: GO 74239
74228: POP
// bc_type := b_factory ; 16 :
74229: LD_ADDR_OWVAR 42
74233: PUSH
74234: LD_INT 3
74236: ST_TO_ADDR
74237: GO 74618
74239: LD_INT 16
74241: DOUBLE
74242: EQUAL
74243: IFTRUE 74247
74245: GO 74258
74247: POP
// bc_type := b_ext_gun ; 17 :
74248: LD_ADDR_OWVAR 42
74252: PUSH
74253: LD_INT 17
74255: ST_TO_ADDR
74256: GO 74618
74258: LD_INT 17
74260: DOUBLE
74261: EQUAL
74262: IFTRUE 74266
74264: GO 74294
74266: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74267: LD_ADDR_OWVAR 42
74271: PUSH
74272: LD_INT 19
74274: PUSH
74275: LD_INT 23
74277: PUSH
74278: LD_INT 19
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: LIST
74285: PUSH
74286: LD_VAR 0 1
74290: ARRAY
74291: ST_TO_ADDR
74292: GO 74618
74294: LD_INT 18
74296: DOUBLE
74297: EQUAL
74298: IFTRUE 74302
74300: GO 74313
74302: POP
// bc_type := b_ext_radar ; 19 :
74303: LD_ADDR_OWVAR 42
74307: PUSH
74308: LD_INT 20
74310: ST_TO_ADDR
74311: GO 74618
74313: LD_INT 19
74315: DOUBLE
74316: EQUAL
74317: IFTRUE 74321
74319: GO 74332
74321: POP
// bc_type := b_ext_radio ; 20 :
74322: LD_ADDR_OWVAR 42
74326: PUSH
74327: LD_INT 22
74329: ST_TO_ADDR
74330: GO 74618
74332: LD_INT 20
74334: DOUBLE
74335: EQUAL
74336: IFTRUE 74340
74338: GO 74351
74340: POP
// bc_type := b_ext_siberium ; 21 :
74341: LD_ADDR_OWVAR 42
74345: PUSH
74346: LD_INT 21
74348: ST_TO_ADDR
74349: GO 74618
74351: LD_INT 21
74353: DOUBLE
74354: EQUAL
74355: IFTRUE 74359
74357: GO 74370
74359: POP
// bc_type := b_ext_computer ; 22 :
74360: LD_ADDR_OWVAR 42
74364: PUSH
74365: LD_INT 24
74367: ST_TO_ADDR
74368: GO 74618
74370: LD_INT 22
74372: DOUBLE
74373: EQUAL
74374: IFTRUE 74378
74376: GO 74389
74378: POP
// bc_type := b_ext_track ; 23 :
74379: LD_ADDR_OWVAR 42
74383: PUSH
74384: LD_INT 16
74386: ST_TO_ADDR
74387: GO 74618
74389: LD_INT 23
74391: DOUBLE
74392: EQUAL
74393: IFTRUE 74397
74395: GO 74408
74397: POP
// bc_type := b_ext_laser ; 24 :
74398: LD_ADDR_OWVAR 42
74402: PUSH
74403: LD_INT 25
74405: ST_TO_ADDR
74406: GO 74618
74408: LD_INT 24
74410: DOUBLE
74411: EQUAL
74412: IFTRUE 74416
74414: GO 74427
74416: POP
// bc_type := b_control_tower ; 25 :
74417: LD_ADDR_OWVAR 42
74421: PUSH
74422: LD_INT 36
74424: ST_TO_ADDR
74425: GO 74618
74427: LD_INT 25
74429: DOUBLE
74430: EQUAL
74431: IFTRUE 74435
74433: GO 74446
74435: POP
// bc_type := b_breastwork ; 26 :
74436: LD_ADDR_OWVAR 42
74440: PUSH
74441: LD_INT 31
74443: ST_TO_ADDR
74444: GO 74618
74446: LD_INT 26
74448: DOUBLE
74449: EQUAL
74450: IFTRUE 74454
74452: GO 74465
74454: POP
// bc_type := b_bunker ; 27 :
74455: LD_ADDR_OWVAR 42
74459: PUSH
74460: LD_INT 32
74462: ST_TO_ADDR
74463: GO 74618
74465: LD_INT 27
74467: DOUBLE
74468: EQUAL
74469: IFTRUE 74473
74471: GO 74484
74473: POP
// bc_type := b_turret ; 28 :
74474: LD_ADDR_OWVAR 42
74478: PUSH
74479: LD_INT 33
74481: ST_TO_ADDR
74482: GO 74618
74484: LD_INT 28
74486: DOUBLE
74487: EQUAL
74488: IFTRUE 74492
74490: GO 74503
74492: POP
// bc_type := b_armoury ; 29 :
74493: LD_ADDR_OWVAR 42
74497: PUSH
74498: LD_INT 4
74500: ST_TO_ADDR
74501: GO 74618
74503: LD_INT 29
74505: DOUBLE
74506: EQUAL
74507: IFTRUE 74511
74509: GO 74522
74511: POP
// bc_type := b_barracks ; 30 :
74512: LD_ADDR_OWVAR 42
74516: PUSH
74517: LD_INT 5
74519: ST_TO_ADDR
74520: GO 74618
74522: LD_INT 30
74524: DOUBLE
74525: EQUAL
74526: IFTRUE 74530
74528: GO 74541
74530: POP
// bc_type := b_solar_power ; 31 :
74531: LD_ADDR_OWVAR 42
74535: PUSH
74536: LD_INT 27
74538: ST_TO_ADDR
74539: GO 74618
74541: LD_INT 31
74543: DOUBLE
74544: EQUAL
74545: IFTRUE 74549
74547: GO 74560
74549: POP
// bc_type := b_oil_power ; 32 :
74550: LD_ADDR_OWVAR 42
74554: PUSH
74555: LD_INT 26
74557: ST_TO_ADDR
74558: GO 74618
74560: LD_INT 32
74562: DOUBLE
74563: EQUAL
74564: IFTRUE 74568
74566: GO 74579
74568: POP
// bc_type := b_siberite_power ; 33 :
74569: LD_ADDR_OWVAR 42
74573: PUSH
74574: LD_INT 28
74576: ST_TO_ADDR
74577: GO 74618
74579: LD_INT 33
74581: DOUBLE
74582: EQUAL
74583: IFTRUE 74587
74585: GO 74598
74587: POP
// bc_type := b_oil_mine ; 34 :
74588: LD_ADDR_OWVAR 42
74592: PUSH
74593: LD_INT 29
74595: ST_TO_ADDR
74596: GO 74618
74598: LD_INT 34
74600: DOUBLE
74601: EQUAL
74602: IFTRUE 74606
74604: GO 74617
74606: POP
// bc_type := b_siberite_mine ; end ;
74607: LD_ADDR_OWVAR 42
74611: PUSH
74612: LD_INT 30
74614: ST_TO_ADDR
74615: GO 74618
74617: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74618: LD_ADDR_VAR 0 8
74622: PUSH
74623: LD_VAR 0 5
74627: PPUSH
74628: LD_VAR 0 6
74632: PPUSH
74633: LD_VAR 0 3
74637: PPUSH
74638: CALL_OW 47
74642: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74643: LD_OWVAR 42
74647: PUSH
74648: LD_INT 32
74650: PUSH
74651: LD_INT 33
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: IN
74658: IFFALSE 74674
// PlaceWeaponTurret ( b , weapon ) ;
74660: LD_VAR 0 8
74664: PPUSH
74665: LD_VAR 0 4
74669: PPUSH
74670: CALL_OW 431
// end ;
74674: LD_VAR 0 7
74678: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74679: LD_INT 0
74681: PPUSH
74682: PPUSH
74683: PPUSH
74684: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74685: LD_ADDR_VAR 0 4
74689: PUSH
74690: LD_INT 22
74692: PUSH
74693: LD_OWVAR 2
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 2
74704: PUSH
74705: LD_INT 30
74707: PUSH
74708: LD_INT 0
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 30
74717: PUSH
74718: LD_INT 1
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PPUSH
74734: CALL_OW 69
74738: ST_TO_ADDR
// if not tmp then
74739: LD_VAR 0 4
74743: NOT
74744: IFFALSE 74748
// exit ;
74746: GO 74807
// for i in tmp do
74748: LD_ADDR_VAR 0 2
74752: PUSH
74753: LD_VAR 0 4
74757: PUSH
74758: FOR_IN
74759: IFFALSE 74805
// for j = 1 to 3 do
74761: LD_ADDR_VAR 0 3
74765: PUSH
74766: DOUBLE
74767: LD_INT 1
74769: DEC
74770: ST_TO_ADDR
74771: LD_INT 3
74773: PUSH
74774: FOR_TO
74775: IFFALSE 74801
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74777: LD_VAR 0 2
74781: PPUSH
74782: CALL_OW 274
74786: PPUSH
74787: LD_VAR 0 3
74791: PPUSH
74792: LD_INT 99999
74794: PPUSH
74795: CALL_OW 277
74799: GO 74774
74801: POP
74802: POP
74803: GO 74758
74805: POP
74806: POP
// end ;
74807: LD_VAR 0 1
74811: RET
// export function hHackSetLevel10 ; var i , j ; begin
74812: LD_INT 0
74814: PPUSH
74815: PPUSH
74816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74817: LD_ADDR_VAR 0 2
74821: PUSH
74822: LD_INT 21
74824: PUSH
74825: LD_INT 1
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PPUSH
74832: CALL_OW 69
74836: PUSH
74837: FOR_IN
74838: IFFALSE 74890
// if IsSelected ( i ) then
74840: LD_VAR 0 2
74844: PPUSH
74845: CALL_OW 306
74849: IFFALSE 74888
// begin for j := 1 to 4 do
74851: LD_ADDR_VAR 0 3
74855: PUSH
74856: DOUBLE
74857: LD_INT 1
74859: DEC
74860: ST_TO_ADDR
74861: LD_INT 4
74863: PUSH
74864: FOR_TO
74865: IFFALSE 74886
// SetSkill ( i , j , 10 ) ;
74867: LD_VAR 0 2
74871: PPUSH
74872: LD_VAR 0 3
74876: PPUSH
74877: LD_INT 10
74879: PPUSH
74880: CALL_OW 237
74884: GO 74864
74886: POP
74887: POP
// end ;
74888: GO 74837
74890: POP
74891: POP
// end ;
74892: LD_VAR 0 1
74896: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74897: LD_INT 0
74899: PPUSH
74900: PPUSH
74901: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74902: LD_ADDR_VAR 0 2
74906: PUSH
74907: LD_INT 22
74909: PUSH
74910: LD_OWVAR 2
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_INT 21
74921: PUSH
74922: LD_INT 1
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PPUSH
74933: CALL_OW 69
74937: PUSH
74938: FOR_IN
74939: IFFALSE 74980
// begin for j := 1 to 4 do
74941: LD_ADDR_VAR 0 3
74945: PUSH
74946: DOUBLE
74947: LD_INT 1
74949: DEC
74950: ST_TO_ADDR
74951: LD_INT 4
74953: PUSH
74954: FOR_TO
74955: IFFALSE 74976
// SetSkill ( i , j , 10 ) ;
74957: LD_VAR 0 2
74961: PPUSH
74962: LD_VAR 0 3
74966: PPUSH
74967: LD_INT 10
74969: PPUSH
74970: CALL_OW 237
74974: GO 74954
74976: POP
74977: POP
// end ;
74978: GO 74938
74980: POP
74981: POP
// end ;
74982: LD_VAR 0 1
74986: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74987: LD_INT 0
74989: PPUSH
// uc_side := your_side ;
74990: LD_ADDR_OWVAR 20
74994: PUSH
74995: LD_OWVAR 2
74999: ST_TO_ADDR
// uc_nation := nation ;
75000: LD_ADDR_OWVAR 21
75004: PUSH
75005: LD_VAR 0 1
75009: ST_TO_ADDR
// InitHc ;
75010: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75014: LD_INT 0
75016: PPUSH
75017: LD_VAR 0 2
75021: PPUSH
75022: LD_VAR 0 3
75026: PPUSH
75027: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75031: LD_VAR 0 4
75035: PPUSH
75036: LD_VAR 0 5
75040: PPUSH
75041: CALL_OW 428
75045: PUSH
75046: LD_INT 0
75048: EQUAL
75049: IFFALSE 75073
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75051: CALL_OW 44
75055: PPUSH
75056: LD_VAR 0 4
75060: PPUSH
75061: LD_VAR 0 5
75065: PPUSH
75066: LD_INT 1
75068: PPUSH
75069: CALL_OW 48
// end ;
75073: LD_VAR 0 6
75077: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75078: LD_INT 0
75080: PPUSH
75081: PPUSH
// uc_side := your_side ;
75082: LD_ADDR_OWVAR 20
75086: PUSH
75087: LD_OWVAR 2
75091: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75092: LD_VAR 0 1
75096: PUSH
75097: LD_INT 1
75099: PUSH
75100: LD_INT 2
75102: PUSH
75103: LD_INT 3
75105: PUSH
75106: LD_INT 4
75108: PUSH
75109: LD_INT 5
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: IN
75119: IFFALSE 75131
// uc_nation := nation_american else
75121: LD_ADDR_OWVAR 21
75125: PUSH
75126: LD_INT 1
75128: ST_TO_ADDR
75129: GO 75174
// if chassis in [ 11 , 12 , 13 , 14 ] then
75131: LD_VAR 0 1
75135: PUSH
75136: LD_INT 11
75138: PUSH
75139: LD_INT 12
75141: PUSH
75142: LD_INT 13
75144: PUSH
75145: LD_INT 14
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: IN
75154: IFFALSE 75166
// uc_nation := nation_arabian else
75156: LD_ADDR_OWVAR 21
75160: PUSH
75161: LD_INT 2
75163: ST_TO_ADDR
75164: GO 75174
// uc_nation := nation_russian ;
75166: LD_ADDR_OWVAR 21
75170: PUSH
75171: LD_INT 3
75173: ST_TO_ADDR
// vc_chassis := chassis ;
75174: LD_ADDR_OWVAR 37
75178: PUSH
75179: LD_VAR 0 1
75183: ST_TO_ADDR
// vc_engine := engine ;
75184: LD_ADDR_OWVAR 39
75188: PUSH
75189: LD_VAR 0 2
75193: ST_TO_ADDR
// vc_control := control ;
75194: LD_ADDR_OWVAR 38
75198: PUSH
75199: LD_VAR 0 3
75203: ST_TO_ADDR
// vc_weapon := weapon ;
75204: LD_ADDR_OWVAR 40
75208: PUSH
75209: LD_VAR 0 4
75213: ST_TO_ADDR
// un := CreateVehicle ;
75214: LD_ADDR_VAR 0 8
75218: PUSH
75219: CALL_OW 45
75223: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75224: LD_VAR 0 8
75228: PPUSH
75229: LD_INT 0
75231: PPUSH
75232: LD_INT 5
75234: PPUSH
75235: CALL_OW 12
75239: PPUSH
75240: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75244: LD_VAR 0 8
75248: PPUSH
75249: LD_VAR 0 5
75253: PPUSH
75254: LD_VAR 0 6
75258: PPUSH
75259: LD_INT 1
75261: PPUSH
75262: CALL_OW 48
// end ;
75266: LD_VAR 0 7
75270: RET
// export hInvincible ; every 1 do
75271: GO 75273
75273: DISABLE
// hInvincible := [ ] ;
75274: LD_ADDR_EXP 101
75278: PUSH
75279: EMPTY
75280: ST_TO_ADDR
75281: END
// every 10 do var i ;
75282: GO 75284
75284: DISABLE
75285: LD_INT 0
75287: PPUSH
// begin enable ;
75288: ENABLE
// if not hInvincible then
75289: LD_EXP 101
75293: NOT
75294: IFFALSE 75298
// exit ;
75296: GO 75342
// for i in hInvincible do
75298: LD_ADDR_VAR 0 1
75302: PUSH
75303: LD_EXP 101
75307: PUSH
75308: FOR_IN
75309: IFFALSE 75340
// if GetLives ( i ) < 1000 then
75311: LD_VAR 0 1
75315: PPUSH
75316: CALL_OW 256
75320: PUSH
75321: LD_INT 1000
75323: LESS
75324: IFFALSE 75338
// SetLives ( i , 1000 ) ;
75326: LD_VAR 0 1
75330: PPUSH
75331: LD_INT 1000
75333: PPUSH
75334: CALL_OW 234
75338: GO 75308
75340: POP
75341: POP
// end ;
75342: PPOPN 1
75344: END
// export function hHackInvincible ; var i ; begin
75345: LD_INT 0
75347: PPUSH
75348: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75349: LD_ADDR_VAR 0 2
75353: PUSH
75354: LD_INT 2
75356: PUSH
75357: LD_INT 21
75359: PUSH
75360: LD_INT 1
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: LD_INT 21
75369: PUSH
75370: LD_INT 2
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: LIST
75381: PPUSH
75382: CALL_OW 69
75386: PUSH
75387: FOR_IN
75388: IFFALSE 75449
// if IsSelected ( i ) then
75390: LD_VAR 0 2
75394: PPUSH
75395: CALL_OW 306
75399: IFFALSE 75447
// begin if i in hInvincible then
75401: LD_VAR 0 2
75405: PUSH
75406: LD_EXP 101
75410: IN
75411: IFFALSE 75431
// hInvincible := hInvincible diff i else
75413: LD_ADDR_EXP 101
75417: PUSH
75418: LD_EXP 101
75422: PUSH
75423: LD_VAR 0 2
75427: DIFF
75428: ST_TO_ADDR
75429: GO 75447
// hInvincible := hInvincible union i ;
75431: LD_ADDR_EXP 101
75435: PUSH
75436: LD_EXP 101
75440: PUSH
75441: LD_VAR 0 2
75445: UNION
75446: ST_TO_ADDR
// end ;
75447: GO 75387
75449: POP
75450: POP
// end ;
75451: LD_VAR 0 1
75455: RET
// export function hHackInvisible ; var i , j ; begin
75456: LD_INT 0
75458: PPUSH
75459: PPUSH
75460: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75461: LD_ADDR_VAR 0 2
75465: PUSH
75466: LD_INT 21
75468: PUSH
75469: LD_INT 1
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PPUSH
75476: CALL_OW 69
75480: PUSH
75481: FOR_IN
75482: IFFALSE 75506
// if IsSelected ( i ) then
75484: LD_VAR 0 2
75488: PPUSH
75489: CALL_OW 306
75493: IFFALSE 75504
// ComForceInvisible ( i ) ;
75495: LD_VAR 0 2
75499: PPUSH
75500: CALL_OW 496
75504: GO 75481
75506: POP
75507: POP
// end ;
75508: LD_VAR 0 1
75512: RET
// export function hHackChangeYourSide ; begin
75513: LD_INT 0
75515: PPUSH
// if your_side = 8 then
75516: LD_OWVAR 2
75520: PUSH
75521: LD_INT 8
75523: EQUAL
75524: IFFALSE 75536
// your_side := 0 else
75526: LD_ADDR_OWVAR 2
75530: PUSH
75531: LD_INT 0
75533: ST_TO_ADDR
75534: GO 75550
// your_side := your_side + 1 ;
75536: LD_ADDR_OWVAR 2
75540: PUSH
75541: LD_OWVAR 2
75545: PUSH
75546: LD_INT 1
75548: PLUS
75549: ST_TO_ADDR
// end ;
75550: LD_VAR 0 1
75554: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75555: LD_INT 0
75557: PPUSH
75558: PPUSH
75559: PPUSH
// for i in all_units do
75560: LD_ADDR_VAR 0 2
75564: PUSH
75565: LD_OWVAR 3
75569: PUSH
75570: FOR_IN
75571: IFFALSE 75649
// if IsSelected ( i ) then
75573: LD_VAR 0 2
75577: PPUSH
75578: CALL_OW 306
75582: IFFALSE 75647
// begin j := GetSide ( i ) ;
75584: LD_ADDR_VAR 0 3
75588: PUSH
75589: LD_VAR 0 2
75593: PPUSH
75594: CALL_OW 255
75598: ST_TO_ADDR
// if j = 8 then
75599: LD_VAR 0 3
75603: PUSH
75604: LD_INT 8
75606: EQUAL
75607: IFFALSE 75619
// j := 0 else
75609: LD_ADDR_VAR 0 3
75613: PUSH
75614: LD_INT 0
75616: ST_TO_ADDR
75617: GO 75633
// j := j + 1 ;
75619: LD_ADDR_VAR 0 3
75623: PUSH
75624: LD_VAR 0 3
75628: PUSH
75629: LD_INT 1
75631: PLUS
75632: ST_TO_ADDR
// SetSide ( i , j ) ;
75633: LD_VAR 0 2
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: CALL_OW 235
// end ;
75647: GO 75570
75649: POP
75650: POP
// end ;
75651: LD_VAR 0 1
75655: RET
// export function hHackFog ; begin
75656: LD_INT 0
75658: PPUSH
// FogOff ( true ) ;
75659: LD_INT 1
75661: PPUSH
75662: CALL_OW 344
// end ;
75666: LD_VAR 0 1
75670: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75671: LD_INT 0
75673: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75674: LD_VAR 0 1
75678: PPUSH
75679: LD_VAR 0 2
75683: PPUSH
75684: LD_VAR 0 3
75688: PPUSH
75689: LD_INT 1
75691: PPUSH
75692: LD_INT 1
75694: PPUSH
75695: CALL_OW 483
// CenterOnXY ( x , y ) ;
75699: LD_VAR 0 2
75703: PPUSH
75704: LD_VAR 0 3
75708: PPUSH
75709: CALL_OW 84
// end ;
75713: LD_VAR 0 4
75717: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75718: LD_INT 0
75720: PPUSH
75721: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75722: LD_VAR 0 1
75726: NOT
75727: PUSH
75728: LD_VAR 0 2
75732: PPUSH
75733: LD_VAR 0 3
75737: PPUSH
75738: CALL_OW 488
75742: NOT
75743: OR
75744: PUSH
75745: LD_VAR 0 1
75749: PPUSH
75750: CALL_OW 266
75754: PUSH
75755: LD_INT 3
75757: NONEQUAL
75758: PUSH
75759: LD_VAR 0 1
75763: PPUSH
75764: CALL_OW 247
75768: PUSH
75769: LD_INT 1
75771: EQUAL
75772: NOT
75773: AND
75774: OR
75775: IFFALSE 75779
// exit ;
75777: GO 75928
// if GetType ( factory ) = unit_human then
75779: LD_VAR 0 1
75783: PPUSH
75784: CALL_OW 247
75788: PUSH
75789: LD_INT 1
75791: EQUAL
75792: IFFALSE 75809
// factory := IsInUnit ( factory ) ;
75794: LD_ADDR_VAR 0 1
75798: PUSH
75799: LD_VAR 0 1
75803: PPUSH
75804: CALL_OW 310
75808: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75809: LD_VAR 0 1
75813: PPUSH
75814: CALL_OW 266
75818: PUSH
75819: LD_INT 3
75821: NONEQUAL
75822: IFFALSE 75826
// exit ;
75824: GO 75928
// if HexInfo ( x , y ) = factory then
75826: LD_VAR 0 2
75830: PPUSH
75831: LD_VAR 0 3
75835: PPUSH
75836: CALL_OW 428
75840: PUSH
75841: LD_VAR 0 1
75845: EQUAL
75846: IFFALSE 75873
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75848: LD_ADDR_EXP 102
75852: PUSH
75853: LD_EXP 102
75857: PPUSH
75858: LD_VAR 0 1
75862: PPUSH
75863: LD_INT 0
75865: PPUSH
75866: CALL_OW 1
75870: ST_TO_ADDR
75871: GO 75924
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75873: LD_ADDR_EXP 102
75877: PUSH
75878: LD_EXP 102
75882: PPUSH
75883: LD_VAR 0 1
75887: PPUSH
75888: LD_VAR 0 1
75892: PPUSH
75893: CALL_OW 255
75897: PUSH
75898: LD_VAR 0 1
75902: PUSH
75903: LD_VAR 0 2
75907: PUSH
75908: LD_VAR 0 3
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: PPUSH
75919: CALL_OW 1
75923: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75924: CALL 75933 0 0
// end ;
75928: LD_VAR 0 4
75932: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75933: LD_INT 0
75935: PPUSH
75936: PPUSH
75937: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75938: LD_STRING resetFactoryWaypoint();
75940: PPUSH
75941: CALL_OW 559
// if factoryWaypoints then
75945: LD_EXP 102
75949: IFFALSE 76075
// begin list := PrepareArray ( factoryWaypoints ) ;
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: LD_EXP 102
75960: PPUSH
75961: CALL 56588 0 1
75965: ST_TO_ADDR
// for i := 1 to list do
75966: LD_ADDR_VAR 0 2
75970: PUSH
75971: DOUBLE
75972: LD_INT 1
75974: DEC
75975: ST_TO_ADDR
75976: LD_VAR 0 3
75980: PUSH
75981: FOR_TO
75982: IFFALSE 76073
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75984: LD_STRING setFactoryWaypointXY(
75986: PUSH
75987: LD_VAR 0 3
75991: PUSH
75992: LD_VAR 0 2
75996: ARRAY
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: STR
76002: PUSH
76003: LD_STRING ,
76005: STR
76006: PUSH
76007: LD_VAR 0 3
76011: PUSH
76012: LD_VAR 0 2
76016: ARRAY
76017: PUSH
76018: LD_INT 2
76020: ARRAY
76021: STR
76022: PUSH
76023: LD_STRING ,
76025: STR
76026: PUSH
76027: LD_VAR 0 3
76031: PUSH
76032: LD_VAR 0 2
76036: ARRAY
76037: PUSH
76038: LD_INT 3
76040: ARRAY
76041: STR
76042: PUSH
76043: LD_STRING ,
76045: STR
76046: PUSH
76047: LD_VAR 0 3
76051: PUSH
76052: LD_VAR 0 2
76056: ARRAY
76057: PUSH
76058: LD_INT 4
76060: ARRAY
76061: STR
76062: PUSH
76063: LD_STRING )
76065: STR
76066: PPUSH
76067: CALL_OW 559
76071: GO 75981
76073: POP
76074: POP
// end ; end ;
76075: LD_VAR 0 1
76079: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76080: LD_INT 0
76082: PPUSH
// if HexInfo ( x , y ) = warehouse then
76083: LD_VAR 0 2
76087: PPUSH
76088: LD_VAR 0 3
76092: PPUSH
76093: CALL_OW 428
76097: PUSH
76098: LD_VAR 0 1
76102: EQUAL
76103: IFFALSE 76130
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76105: LD_ADDR_EXP 103
76109: PUSH
76110: LD_EXP 103
76114: PPUSH
76115: LD_VAR 0 1
76119: PPUSH
76120: LD_INT 0
76122: PPUSH
76123: CALL_OW 1
76127: ST_TO_ADDR
76128: GO 76181
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76130: LD_ADDR_EXP 103
76134: PUSH
76135: LD_EXP 103
76139: PPUSH
76140: LD_VAR 0 1
76144: PPUSH
76145: LD_VAR 0 1
76149: PPUSH
76150: CALL_OW 255
76154: PUSH
76155: LD_VAR 0 1
76159: PUSH
76160: LD_VAR 0 2
76164: PUSH
76165: LD_VAR 0 3
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: PPUSH
76176: CALL_OW 1
76180: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76181: CALL 76190 0 0
// end ;
76185: LD_VAR 0 4
76189: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76190: LD_INT 0
76192: PPUSH
76193: PPUSH
76194: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76195: LD_STRING resetWarehouseGatheringPoints();
76197: PPUSH
76198: CALL_OW 559
// if warehouseGatheringPoints then
76202: LD_EXP 103
76206: IFFALSE 76332
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76208: LD_ADDR_VAR 0 3
76212: PUSH
76213: LD_EXP 103
76217: PPUSH
76218: CALL 56588 0 1
76222: ST_TO_ADDR
// for i := 1 to list do
76223: LD_ADDR_VAR 0 2
76227: PUSH
76228: DOUBLE
76229: LD_INT 1
76231: DEC
76232: ST_TO_ADDR
76233: LD_VAR 0 3
76237: PUSH
76238: FOR_TO
76239: IFFALSE 76330
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76241: LD_STRING setWarehouseGatheringPointXY(
76243: PUSH
76244: LD_VAR 0 3
76248: PUSH
76249: LD_VAR 0 2
76253: ARRAY
76254: PUSH
76255: LD_INT 1
76257: ARRAY
76258: STR
76259: PUSH
76260: LD_STRING ,
76262: STR
76263: PUSH
76264: LD_VAR 0 3
76268: PUSH
76269: LD_VAR 0 2
76273: ARRAY
76274: PUSH
76275: LD_INT 2
76277: ARRAY
76278: STR
76279: PUSH
76280: LD_STRING ,
76282: STR
76283: PUSH
76284: LD_VAR 0 3
76288: PUSH
76289: LD_VAR 0 2
76293: ARRAY
76294: PUSH
76295: LD_INT 3
76297: ARRAY
76298: STR
76299: PUSH
76300: LD_STRING ,
76302: STR
76303: PUSH
76304: LD_VAR 0 3
76308: PUSH
76309: LD_VAR 0 2
76313: ARRAY
76314: PUSH
76315: LD_INT 4
76317: ARRAY
76318: STR
76319: PUSH
76320: LD_STRING )
76322: STR
76323: PPUSH
76324: CALL_OW 559
76328: GO 76238
76330: POP
76331: POP
// end ; end ;
76332: LD_VAR 0 1
76336: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76337: LD_EXP 103
76341: IFFALSE 77026
76343: GO 76345
76345: DISABLE
76346: LD_INT 0
76348: PPUSH
76349: PPUSH
76350: PPUSH
76351: PPUSH
76352: PPUSH
76353: PPUSH
76354: PPUSH
76355: PPUSH
76356: PPUSH
// begin enable ;
76357: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76358: LD_ADDR_VAR 0 3
76362: PUSH
76363: LD_EXP 103
76367: PPUSH
76368: CALL 56588 0 1
76372: ST_TO_ADDR
// if not list then
76373: LD_VAR 0 3
76377: NOT
76378: IFFALSE 76382
// exit ;
76380: GO 77026
// for i := 1 to list do
76382: LD_ADDR_VAR 0 1
76386: PUSH
76387: DOUBLE
76388: LD_INT 1
76390: DEC
76391: ST_TO_ADDR
76392: LD_VAR 0 3
76396: PUSH
76397: FOR_TO
76398: IFFALSE 77024
// begin depot := list [ i ] [ 2 ] ;
76400: LD_ADDR_VAR 0 8
76404: PUSH
76405: LD_VAR 0 3
76409: PUSH
76410: LD_VAR 0 1
76414: ARRAY
76415: PUSH
76416: LD_INT 2
76418: ARRAY
76419: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76420: LD_ADDR_VAR 0 5
76424: PUSH
76425: LD_VAR 0 3
76429: PUSH
76430: LD_VAR 0 1
76434: ARRAY
76435: PUSH
76436: LD_INT 1
76438: ARRAY
76439: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76440: LD_VAR 0 8
76444: PPUSH
76445: CALL_OW 301
76449: PUSH
76450: LD_VAR 0 5
76454: PUSH
76455: LD_VAR 0 8
76459: PPUSH
76460: CALL_OW 255
76464: NONEQUAL
76465: OR
76466: IFFALSE 76495
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76468: LD_ADDR_EXP 103
76472: PUSH
76473: LD_EXP 103
76477: PPUSH
76478: LD_VAR 0 8
76482: PPUSH
76483: LD_INT 0
76485: PPUSH
76486: CALL_OW 1
76490: ST_TO_ADDR
// exit ;
76491: POP
76492: POP
76493: GO 77026
// end ; x := list [ i ] [ 3 ] ;
76495: LD_ADDR_VAR 0 6
76499: PUSH
76500: LD_VAR 0 3
76504: PUSH
76505: LD_VAR 0 1
76509: ARRAY
76510: PUSH
76511: LD_INT 3
76513: ARRAY
76514: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76515: LD_ADDR_VAR 0 7
76519: PUSH
76520: LD_VAR 0 3
76524: PUSH
76525: LD_VAR 0 1
76529: ARRAY
76530: PUSH
76531: LD_INT 4
76533: ARRAY
76534: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76535: LD_ADDR_VAR 0 9
76539: PUSH
76540: LD_VAR 0 6
76544: PPUSH
76545: LD_VAR 0 7
76549: PPUSH
76550: LD_INT 16
76552: PPUSH
76553: CALL 55176 0 3
76557: ST_TO_ADDR
// if not cratesNearbyPoint then
76558: LD_VAR 0 9
76562: NOT
76563: IFFALSE 76569
// exit ;
76565: POP
76566: POP
76567: GO 77026
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76569: LD_ADDR_VAR 0 4
76573: PUSH
76574: LD_INT 22
76576: PUSH
76577: LD_VAR 0 5
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: LD_INT 3
76588: PUSH
76589: LD_INT 60
76591: PUSH
76592: EMPTY
76593: LIST
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: PUSH
76599: LD_INT 91
76601: PUSH
76602: LD_VAR 0 8
76606: PUSH
76607: LD_INT 6
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 2
76617: PUSH
76618: LD_INT 25
76620: PUSH
76621: LD_INT 2
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: PUSH
76628: LD_INT 25
76630: PUSH
76631: LD_INT 16
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: LIST
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: PPUSH
76649: CALL_OW 69
76653: PUSH
76654: LD_VAR 0 8
76658: PPUSH
76659: CALL_OW 313
76663: PPUSH
76664: LD_INT 3
76666: PUSH
76667: LD_INT 60
76669: PUSH
76670: EMPTY
76671: LIST
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PUSH
76677: LD_INT 2
76679: PUSH
76680: LD_INT 25
76682: PUSH
76683: LD_INT 2
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: LD_INT 25
76692: PUSH
76693: LD_INT 16
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: LIST
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PPUSH
76709: CALL_OW 72
76713: UNION
76714: ST_TO_ADDR
// if tmp then
76715: LD_VAR 0 4
76719: IFFALSE 76799
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76721: LD_ADDR_VAR 0 4
76725: PUSH
76726: LD_VAR 0 4
76730: PPUSH
76731: LD_INT 3
76733: PPUSH
76734: CALL 53145 0 2
76738: ST_TO_ADDR
// for j in tmp do
76739: LD_ADDR_VAR 0 2
76743: PUSH
76744: LD_VAR 0 4
76748: PUSH
76749: FOR_IN
76750: IFFALSE 76793
// begin if IsInUnit ( j ) then
76752: LD_VAR 0 2
76756: PPUSH
76757: CALL_OW 310
76761: IFFALSE 76772
// ComExit ( j ) ;
76763: LD_VAR 0 2
76767: PPUSH
76768: CALL 53228 0 1
// AddComCollect ( j , x , y ) ;
76772: LD_VAR 0 2
76776: PPUSH
76777: LD_VAR 0 6
76781: PPUSH
76782: LD_VAR 0 7
76786: PPUSH
76787: CALL_OW 177
// end ;
76791: GO 76749
76793: POP
76794: POP
// exit ;
76795: POP
76796: POP
76797: GO 77026
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76799: LD_ADDR_VAR 0 4
76803: PUSH
76804: LD_INT 22
76806: PUSH
76807: LD_VAR 0 5
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: PUSH
76816: LD_INT 91
76818: PUSH
76819: LD_VAR 0 8
76823: PUSH
76824: LD_INT 8
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 2
76834: PUSH
76835: LD_INT 34
76837: PUSH
76838: LD_INT 12
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 34
76847: PUSH
76848: LD_INT 51
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 34
76857: PUSH
76858: LD_INT 32
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: LD_INT 34
76867: PUSH
76868: LD_INT 89
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: LIST
76886: PPUSH
76887: CALL_OW 69
76891: ST_TO_ADDR
// if tmp then
76892: LD_VAR 0 4
76896: IFFALSE 77022
// begin for j in tmp do
76898: LD_ADDR_VAR 0 2
76902: PUSH
76903: LD_VAR 0 4
76907: PUSH
76908: FOR_IN
76909: IFFALSE 77020
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76911: LD_VAR 0 2
76915: PPUSH
76916: CALL_OW 262
76920: PUSH
76921: LD_INT 3
76923: EQUAL
76924: PUSH
76925: LD_VAR 0 2
76929: PPUSH
76930: CALL_OW 261
76934: PUSH
76935: LD_INT 20
76937: GREATER
76938: OR
76939: PUSH
76940: LD_VAR 0 2
76944: PPUSH
76945: CALL_OW 314
76949: NOT
76950: AND
76951: PUSH
76952: LD_VAR 0 2
76956: PPUSH
76957: CALL_OW 263
76961: PUSH
76962: LD_INT 1
76964: NONEQUAL
76965: PUSH
76966: LD_VAR 0 2
76970: PPUSH
76971: CALL_OW 311
76975: OR
76976: AND
76977: IFFALSE 77018
// begin ComCollect ( j , x , y ) ;
76979: LD_VAR 0 2
76983: PPUSH
76984: LD_VAR 0 6
76988: PPUSH
76989: LD_VAR 0 7
76993: PPUSH
76994: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76998: LD_VAR 0 2
77002: PPUSH
77003: LD_VAR 0 8
77007: PPUSH
77008: CALL_OW 172
// exit ;
77012: POP
77013: POP
77014: POP
77015: POP
77016: GO 77026
// end ;
77018: GO 76908
77020: POP
77021: POP
// end ; end ;
77022: GO 76397
77024: POP
77025: POP
// end ; end_of_file
77026: PPOPN 9
77028: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77029: LD_VAR 0 1
77033: PPUSH
77034: LD_VAR 0 2
77038: PPUSH
77039: LD_VAR 0 3
77043: PPUSH
77044: LD_VAR 0 4
77048: PPUSH
77049: LD_VAR 0 5
77053: PPUSH
77054: LD_VAR 0 6
77058: PPUSH
77059: CALL 61390 0 6
// end ;
77063: PPOPN 6
77065: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77066: LD_INT 0
77068: PPUSH
// begin if not units then
77069: LD_VAR 0 1
77073: NOT
77074: IFFALSE 77078
// exit ;
77076: GO 77078
// end ;
77078: PPOPN 7
77080: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77081: CALL 61294 0 0
// end ; end_of_file
77085: PPOPN 1
77087: END
