// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 71952 0 0
// Init ;
   8: CALL 58 0 0
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// CreateNature ( apemanSpawnArea , forestArea , riverArea ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_INT 5
  24: PPUSH
  25: LD_INT 6
  27: PPUSH
  28: CALL 371 0 3
// PrepareAmerican ;
  32: CALL 2447 0 0
// PrepareArabian ;
  36: CALL 1165 0 0
// Action ;
  40: CALL 7113 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , scoutActive , scoutFailed , scoutSuccess , usAttacksAllowed , usSurrender , russianAttack , hasRockets , seeRemoteVehicle , seeHeavyGun ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 06_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 06_
  76: ST_TO_ADDR
// scoutActive := 0 ;
  77: LD_ADDR_EXP 3
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// scoutFailed := false ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// scoutSuccess := false ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// usAttacksAllowed := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// usSurrender := false ;
 109: LD_ADDR_EXP 7
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// russianAttack := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// hasRockets := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// seeRemoteVehicle := false ;
 133: LD_ADDR_EXP 10
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// seeHeavyGun := false ;
 141: LD_ADDR_EXP 11
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// end ; end_of_file
 149: LD_VAR 0 1
 153: RET
// export function SayX ( units , ident ) ; var i ; begin
 154: LD_INT 0
 156: PPUSH
 157: PPUSH
// result := false ;
 158: LD_ADDR_VAR 0 3
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// if not units then
 166: LD_VAR 0 1
 170: NOT
 171: IFFALSE 175
// exit ;
 173: GO 229
// for i in units do
 175: LD_ADDR_VAR 0 4
 179: PUSH
 180: LD_VAR 0 1
 184: PUSH
 185: FOR_IN
 186: IFFALSE 227
// if IsOk ( i ) then
 188: LD_VAR 0 4
 192: PPUSH
 193: CALL_OW 302
 197: IFFALSE 225
// begin Say ( i , ident ) ;
 199: LD_VAR 0 4
 203: PPUSH
 204: LD_VAR 0 2
 208: PPUSH
 209: CALL_OW 88
// result := i ;
 213: LD_ADDR_VAR 0 3
 217: PUSH
 218: LD_VAR 0 4
 222: ST_TO_ADDR
// break ;
 223: GO 227
// end ;
 225: GO 185
 227: POP
 228: POP
// end ;
 229: LD_VAR 0 3
 233: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
// InitUc ;
 238: CALL_OW 18
// InitHc ;
 242: CALL_OW 19
// uc_side := 0 ;
 246: LD_ADDR_OWVAR 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// uc_nation := 0 ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// for i = 1 to amount do
 262: LD_ADDR_VAR 0 4
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_VAR 0 2
 276: PUSH
 277: FOR_TO
 278: IFFALSE 360
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 280: LD_ADDR_OWVAR 29
 284: PUSH
 285: LD_INT 9
 287: PPUSH
 288: LD_INT 12
 290: PPUSH
 291: CALL_OW 12
 295: PUSH
 296: LD_INT 9
 298: PPUSH
 299: LD_INT 12
 301: PPUSH
 302: CALL_OW 12
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 311: LD_ADDR_OWVAR 35
 315: PUSH
 316: LD_INT 1
 318: NEG
 319: PPUSH
 320: LD_INT 1
 322: PPUSH
 323: CALL_OW 12
 327: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 328: LD_INT 0
 330: PPUSH
 331: LD_INT 12
 333: PPUSH
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 341: CALL_OW 44
 345: PPUSH
 346: LD_VAR 0 1
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 49
// end ;
 358: GO 277
 360: POP
 361: POP
// InitHc ;
 362: CALL_OW 19
// end ;
 366: LD_VAR 0 3
 370: RET
// export function CreateNature ( apemanArea , forest , water ) ; var i ; begin
 371: LD_INT 0
 373: PPUSH
 374: PPUSH
// uc_side := 0 ;
 375: LD_ADDR_OWVAR 20
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// uc_nation := 0 ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_INT 0
 390: ST_TO_ADDR
// SpawnApeman ( apemanArea , [ 9 , 8 , 7 ] [ Difficulty ] ) ;
 391: LD_VAR 0 1
 395: PPUSH
 396: LD_INT 9
 398: PUSH
 399: LD_INT 8
 401: PUSH
 402: LD_INT 7
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_OWVAR 67
 414: ARRAY
 415: PPUSH
 416: CALL 234 0 2
// for i := 1 to 4 do
 420: LD_ADDR_VAR 0 5
 424: PUSH
 425: DOUBLE
 426: LD_INT 1
 428: DEC
 429: ST_TO_ADDR
 430: LD_INT 4
 432: PUSH
 433: FOR_TO
 434: IFFALSE 473
// begin hc_class := class_horse ;
 436: LD_ADDR_OWVAR 28
 440: PUSH
 441: LD_EXP 117
 445: ST_TO_ADDR
// hc_gallery :=  ;
 446: LD_ADDR_OWVAR 33
 450: PUSH
 451: LD_STRING 
 453: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 454: CALL_OW 44
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 433
 473: POP
 474: POP
// for i = 1 to 5 do
 475: LD_ADDR_VAR 0 5
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_INT 5
 487: PUSH
 488: FOR_TO
 489: IFFALSE 543
// begin hc_class = class_tiger ;
 491: LD_ADDR_OWVAR 28
 495: PUSH
 496: LD_INT 14
 498: ST_TO_ADDR
// hc_gallery =  ;
 499: LD_ADDR_OWVAR 33
 503: PUSH
 504: LD_STRING 
 506: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
 507: LD_ADDR_OWVAR 35
 511: PUSH
 512: LD_INT 7
 514: NEG
 515: PPUSH
 516: LD_INT 7
 518: PPUSH
 519: CALL_OW 12
 523: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
 524: CALL_OW 44
 528: PPUSH
 529: LD_VAR 0 2
 533: PPUSH
 534: LD_INT 0
 536: PPUSH
 537: CALL 50661 0 3
// end ;
 541: GO 488
 543: POP
 544: POP
// for i := 1 to 4 do
 545: LD_ADDR_VAR 0 5
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_INT 4
 557: PUSH
 558: FOR_TO
 559: IFFALSE 596
// begin hc_class := class_phororhacos ;
 561: LD_ADDR_OWVAR 28
 565: PUSH
 566: LD_INT 18
 568: ST_TO_ADDR
// hc_gallery :=  ;
 569: LD_ADDR_OWVAR 33
 573: PUSH
 574: LD_STRING 
 576: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 577: CALL_OW 44
 581: PPUSH
 582: LD_VAR 0 2
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 558
 596: POP
 597: POP
// for i := 1 to 4 do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 4
 610: PUSH
 611: FOR_TO
 612: IFFALSE 649
// begin hc_class := class_baggie ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 13
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: LD_INT 0
 642: PPUSH
 643: CALL_OW 49
// end ;
 647: GO 611
 649: POP
 650: POP
// for i := 1 to 5 do
 651: LD_ADDR_VAR 0 5
 655: PUSH
 656: DOUBLE
 657: LD_INT 1
 659: DEC
 660: ST_TO_ADDR
 661: LD_INT 5
 663: PUSH
 664: FOR_TO
 665: IFFALSE 702
// begin hc_class := class_fish ;
 667: LD_ADDR_OWVAR 28
 671: PUSH
 672: LD_INT 20
 674: ST_TO_ADDR
// hc_gallery :=  ;
 675: LD_ADDR_OWVAR 33
 679: PUSH
 680: LD_STRING 
 682: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , water , false ) ;
 683: CALL_OW 44
 687: PPUSH
 688: LD_VAR 0 3
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 664
 702: POP
 703: POP
// end ;
 704: LD_VAR 0 4
 708: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 709: LD_INT 0
 711: PPUSH
 712: PPUSH
 713: PPUSH
// if not observer or not unit then
 714: LD_VAR 0 1
 718: NOT
 719: PUSH
 720: LD_VAR 0 2
 724: NOT
 725: OR
 726: IFFALSE 730
// exit ;
 728: GO 778
// if not See ( GetSide ( observer ) , unit ) then
 730: LD_VAR 0 1
 734: PPUSH
 735: CALL_OW 255
 739: PPUSH
 740: LD_VAR 0 2
 744: PPUSH
 745: CALL_OW 292
 749: NOT
 750: IFFALSE 754
// exit ;
 752: GO 778
// result := GetDistUnits ( observer , unit ) < 12 ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: LD_VAR 0 1
 763: PPUSH
 764: LD_VAR 0 2
 768: PPUSH
 769: CALL_OW 296
 773: PUSH
 774: LD_INT 12
 776: LESS
 777: ST_TO_ADDR
// end ;
 778: LD_VAR 0 3
 782: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 783: LD_INT 0
 785: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: ARRAY
 794: PPUSH
 795: LD_VAR 0 2
 799: PUSH
 800: LD_INT 2
 802: ARRAY
 803: PPUSH
 804: CALL_OW 488
 808: PUSH
 809: LD_VAR 0 2
 813: PUSH
 814: LD_INT 1
 816: ARRAY
 817: PPUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 2
 825: ARRAY
 826: PPUSH
 827: CALL_OW 428
 831: PUSH
 832: LD_INT 0
 834: EQUAL
 835: AND
 836: IFFALSE 870
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 838: LD_VAR 0 1
 842: PPUSH
 843: LD_VAR 0 2
 847: PUSH
 848: LD_INT 1
 850: ARRAY
 851: PPUSH
 852: LD_VAR 0 2
 856: PUSH
 857: LD_INT 2
 859: ARRAY
 860: PPUSH
 861: LD_VAR 0 3
 865: PPUSH
 866: CALL_OW 48
// end ;
 870: LD_VAR 0 4
 874: RET
// export function ReverseArray ( array ) ; var i ; begin
 875: LD_INT 0
 877: PPUSH
 878: PPUSH
// if not array then
 879: LD_VAR 0 1
 883: NOT
 884: IFFALSE 888
// exit ;
 886: GO 946
// result := [ ] ;
 888: LD_ADDR_VAR 0 2
 892: PUSH
 893: EMPTY
 894: ST_TO_ADDR
// for i := 1 to array do
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: DOUBLE
 901: LD_INT 1
 903: DEC
 904: ST_TO_ADDR
 905: LD_VAR 0 1
 909: PUSH
 910: FOR_TO
 911: IFFALSE 944
// result := Insert ( result , 1 , array [ i ] ) ;
 913: LD_ADDR_VAR 0 2
 917: PUSH
 918: LD_VAR 0 2
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_VAR 0 1
 930: PUSH
 931: LD_VAR 0 3
 935: ARRAY
 936: PPUSH
 937: CALL_OW 2
 941: ST_TO_ADDR
 942: GO 910
 944: POP
 945: POP
// end ;
 946: LD_VAR 0 2
 950: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
 951: LD_INT 0
 953: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_VAR 0 4
 973: PPUSH
 974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
 978: LD_VAR 0 1
 982: PPUSH
 983: LD_VAR 0 2
 987: PPUSH
 988: LD_VAR 0 3
 992: PPUSH
 993: CALL_OW 331
// end ;
 997: LD_VAR 0 5
1001: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1002: LD_INT 0
1004: PPUSH
// if not units then
1005: LD_VAR 0 1
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1097
// result := true ;
1014: LD_ADDR_VAR 0 4
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1022: LD_VAR 0 1
1026: PPUSH
1027: LD_INT 26
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 72
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PPUSH
1051: CALL_OW 88
1055: NOT
1056: IFFALSE 1097
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: LD_INT 26
1070: PUSH
1071: LD_INT 2
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 72
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PPUSH
1087: LD_VAR 0 3
1091: PPUSH
1092: CALL_OW 88
1096: ST_TO_ADDR
// end ;
1097: LD_VAR 0 4
1101: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
// if not group then
1106: LD_VAR 0 2
1110: NOT
1111: IFFALSE 1115
// exit ;
1113: GO 1160
// for i in group do
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: LD_VAR 0 2
1124: PUSH
1125: FOR_IN
1126: IFFALSE 1158
// if See ( side , i ) then
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 4
1137: PPUSH
1138: CALL_OW 292
1142: IFFALSE 1156
// begin result := true ;
1144: LD_ADDR_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// exit ;
1152: POP
1153: POP
1154: GO 1160
// end ;
1156: GO 1125
1158: POP
1159: POP
// end ; end_of_file
1160: LD_VAR 0 3
1164: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeApes , heikeVehicles ; export function PrepareArabian ; var i , tmp ; begin
1165: LD_INT 0
1167: PPUSH
1168: PPUSH
1169: PPUSH
// uc_nation := 2 ;
1170: LD_ADDR_OWVAR 21
1174: PUSH
1175: LD_INT 2
1177: ST_TO_ADDR
// uc_side := 5 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 5
1185: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1186: LD_ADDR_EXP 20
1190: PUSH
1191: LD_STRING Abdul
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: LD_STRING 
1199: PPUSH
1200: CALL 15010 0 3
1204: ST_TO_ADDR
// uc_side := 2 ;
1205: LD_ADDR_OWVAR 20
1209: PUSH
1210: LD_INT 2
1212: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_STRING Heike
1220: PPUSH
1221: LD_EXP 1
1225: NOT
1226: PPUSH
1227: LD_EXP 2
1231: PPUSH
1232: CALL 15010 0 3
1236: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1237: LD_ADDR_EXP 15
1241: PUSH
1242: LD_STRING Ibrahim
1244: PPUSH
1245: LD_EXP 1
1249: NOT
1250: PPUSH
1251: LD_EXP 2
1255: PPUSH
1256: CALL 15010 0 3
1260: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1261: LD_ADDR_EXP 13
1265: PUSH
1266: LD_STRING Givi
1268: PPUSH
1269: LD_EXP 1
1273: NOT
1274: PPUSH
1275: LD_EXP 2
1279: PPUSH
1280: CALL 15010 0 3
1284: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1285: LD_ADDR_EXP 16
1289: PUSH
1290: LD_STRING Kamil
1292: PPUSH
1293: LD_EXP 1
1297: NOT
1298: PPUSH
1299: LD_EXP 2
1303: PPUSH
1304: CALL 15010 0 3
1308: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1309: LD_ADDR_EXP 17
1313: PUSH
1314: LD_STRING Kaia
1316: PPUSH
1317: LD_EXP 1
1321: NOT
1322: PPUSH
1323: LD_EXP 2
1327: PPUSH
1328: CALL 15010 0 3
1332: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1333: LD_ADDR_EXP 18
1337: PUSH
1338: LD_STRING Sophia
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_EXP 2
1351: PPUSH
1352: CALL 15010 0 3
1356: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1357: LD_ADDR_EXP 19
1361: PUSH
1362: LD_STRING Markov
1364: PPUSH
1365: LD_EXP 1
1369: NOT
1370: PPUSH
1371: LD_EXP 2
1375: PPUSH
1376: CALL 15010 0 3
1380: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 23
1385: PUSH
1386: LD_STRING Aviradze
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 15010 0 3
1404: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 22
1409: PUSH
1410: LD_STRING Kurt
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 15010 0 3
1428: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 14
1433: PUSH
1434: LD_STRING Mike
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 15010 0 3
1452: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Olaf
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: LD_STRING 
1466: PPUSH
1467: CALL 15010 0 3
1471: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 06_others ) ;
1472: LD_ADDR_EXP 24
1476: PUSH
1477: LD_STRING 06_others
1479: PPUSH
1480: CALL_OW 31
1484: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 06_apes ) ;
1485: LD_ADDR_EXP 25
1489: PUSH
1490: LD_STRING 06_apes
1492: PPUSH
1493: CALL_OW 31
1497: ST_TO_ADDR
// if debug then
1498: LD_EXP 1
1502: IFFALSE 1777
// begin tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 750 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 900 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 100 , 0 ] ] , [ ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 50 , 50 ] ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 1000 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_mortar , 2 , 1000 , 0 ] ] ;
1504: LD_ADDR_VAR 0 3
1508: PUSH
1509: LD_INT 14
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 2
1517: PUSH
1518: LD_INT 25
1520: PUSH
1521: LD_INT 2
1523: PUSH
1524: LD_INT 1000
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 14
1541: PUSH
1542: LD_INT 1
1544: PUSH
1545: LD_INT 1
1547: PUSH
1548: LD_INT 31
1550: PUSH
1551: LD_INT 2
1553: PUSH
1554: LD_INT 1000
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 14
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 27
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 750
1586: PUSH
1587: LD_INT 0
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 14
1601: PUSH
1602: LD_INT 1
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: LD_INT 27
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 900
1616: PUSH
1617: LD_INT 0
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_INT 14
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: LD_INT 1
1637: PUSH
1638: LD_INT 32
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: LD_INT 1000
1646: PUSH
1647: LD_INT 100
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 14
1668: PUSH
1669: LD_INT 1
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 32
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: LD_INT 1000
1683: PUSH
1684: LD_INT 50
1686: PUSH
1687: LD_INT 50
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 14
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 27
1714: PUSH
1715: LD_INT 2
1717: PUSH
1718: LD_INT 1000
1720: PUSH
1721: LD_INT 0
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 14
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: LD_INT 1
1741: PUSH
1742: LD_EXP 104
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: LD_INT 1000
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: ST_TO_ADDR
// end else
1775: GO 1784
// tmp := [ ] ;
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: EMPTY
1783: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 06_Vehicles , tmp ) ;
1784: LD_ADDR_EXP 26
1788: PUSH
1789: LD_STRING 06_Vehicles
1791: PPUSH
1792: LD_VAR 0 3
1796: PPUSH
1797: CALL_OW 30
1801: ST_TO_ADDR
// if heikeVehicles then
1802: LD_EXP 26
1806: IFFALSE 1901
// begin for i := heikeVehicles downto 1 do
1808: LD_ADDR_VAR 0 2
1812: PUSH
1813: DOUBLE
1814: LD_EXP 26
1818: INC
1819: ST_TO_ADDR
1820: LD_INT 1
1822: PUSH
1823: FOR_DOWNTO
1824: IFFALSE 1899
// begin if heikeVehicles [ i ] [ 3 ] = control_remote then
1826: LD_EXP 26
1830: PUSH
1831: LD_VAR 0 2
1835: ARRAY
1836: PUSH
1837: LD_INT 3
1839: ARRAY
1840: PUSH
1841: LD_INT 2
1843: EQUAL
1844: IFFALSE 1897
// begin heikeVehicles := Insert ( heikeVehicles , heikeVehicles , heikeVehicles [ i ] ) ;
1846: LD_ADDR_EXP 26
1850: PUSH
1851: LD_EXP 26
1855: PPUSH
1856: LD_EXP 26
1860: PPUSH
1861: LD_EXP 26
1865: PUSH
1866: LD_VAR 0 2
1870: ARRAY
1871: PPUSH
1872: CALL_OW 2
1876: ST_TO_ADDR
// heikeVehicles := Delete ( heikeVehicles , i ) ;
1877: LD_ADDR_EXP 26
1881: PUSH
1882: LD_EXP 26
1886: PPUSH
1887: LD_VAR 0 2
1891: PPUSH
1892: CALL_OW 3
1896: ST_TO_ADDR
// end ; end ;
1897: GO 1823
1899: POP
1900: POP
// end ; end ;
1901: LD_VAR 0 1
1905: RET
// every 0 0$1 trigger scoutActive do var i , tmp ;
1906: LD_EXP 3
1910: IFFALSE 2444
1912: GO 1914
1914: DISABLE
1915: LD_INT 0
1917: PPUSH
1918: PPUSH
// begin tmp := [ [ [ 96 , 50 ] , [ 49 , 52 ] , [ 34 , 55 ] , [ 41 , 70 ] , [ 53 , 96 ] , [ 103 , 64 ] ] , [ [ 104 , 70 ] , [ 111 , 103 ] , [ 131 , 147 ] , [ 130 , 153 ] , [ 110 , 93 ] , [ 103 , 65 ] ] ] ;
1919: LD_ADDR_VAR 0 2
1923: PUSH
1924: LD_INT 96
1926: PUSH
1927: LD_INT 50
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 49
1936: PUSH
1937: LD_INT 52
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 34
1946: PUSH
1947: LD_INT 55
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 41
1956: PUSH
1957: LD_INT 70
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 53
1966: PUSH
1967: LD_INT 96
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 103
1976: PUSH
1977: LD_INT 64
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 104
1994: PUSH
1995: LD_INT 70
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 111
2004: PUSH
2005: LD_INT 103
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 131
2014: PUSH
2015: LD_INT 147
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 130
2024: PUSH
2025: LD_INT 153
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 110
2034: PUSH
2035: LD_INT 93
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: LD_INT 103
2044: PUSH
2045: LD_INT 65
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: ST_TO_ADDR
// for i in tmp [ 1 ] do
2064: LD_ADDR_VAR 0 1
2068: PUSH
2069: LD_VAR 0 2
2073: PUSH
2074: LD_INT 1
2076: ARRAY
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2131
// begin AddComAgressiveMove ( Mike , i [ 1 ] , i [ 2 ] ) ;
2081: LD_EXP 14
2085: PPUSH
2086: LD_VAR 0 1
2090: PUSH
2091: LD_INT 1
2093: ARRAY
2094: PPUSH
2095: LD_VAR 0 1
2099: PUSH
2100: LD_INT 2
2102: ARRAY
2103: PPUSH
2104: CALL_OW 174
// AddComHold ( Mike ) ;
2108: LD_EXP 14
2112: PPUSH
2113: CALL_OW 200
// AddComWait ( Mike , 0 0$5 ) ;
2117: LD_EXP 14
2121: PPUSH
2122: LD_INT 175
2124: PPUSH
2125: CALL_OW 202
// end ;
2129: GO 2078
2131: POP
2132: POP
// for i in tmp [ 2 ] do
2133: LD_ADDR_VAR 0 1
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_INT 2
2145: ARRAY
2146: PUSH
2147: FOR_IN
2148: IFFALSE 2200
// begin AddComAgressiveMove ( Kurt , i [ 1 ] , i [ 2 ] ) ;
2150: LD_EXP 22
2154: PPUSH
2155: LD_VAR 0 1
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: LD_VAR 0 1
2168: PUSH
2169: LD_INT 2
2171: ARRAY
2172: PPUSH
2173: CALL_OW 174
// AddComHold ( Kurt ) ;
2177: LD_EXP 22
2181: PPUSH
2182: CALL_OW 200
// AddComWait ( Kurt , 0 0$5 ) ;
2186: LD_EXP 22
2190: PPUSH
2191: LD_INT 175
2193: PPUSH
2194: CALL_OW 202
// end ;
2198: GO 2147
2200: POP
2201: POP
// wait ( 2 2$00 ) ;
2202: LD_INT 4200
2204: PPUSH
2205: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// until ( not HasTask ( Mike ) or IsDead ( Mike ) ) and ( not HasTask ( Kurt ) or IsDead ( Kurt ) ) ;
2216: LD_EXP 14
2220: PPUSH
2221: CALL_OW 314
2225: NOT
2226: PUSH
2227: LD_EXP 14
2231: PPUSH
2232: CALL_OW 301
2236: OR
2237: PUSH
2238: LD_EXP 22
2242: PPUSH
2243: CALL_OW 314
2247: NOT
2248: PUSH
2249: LD_EXP 22
2253: PPUSH
2254: CALL_OW 301
2258: OR
2259: AND
2260: IFFALSE 2209
// if IsDead ( Kurt ) and IsDead ( Mike ) then
2262: LD_EXP 22
2266: PPUSH
2267: CALL_OW 301
2271: PUSH
2272: LD_EXP 14
2276: PPUSH
2277: CALL_OW 301
2281: AND
2282: IFFALSE 2294
// begin scoutFailed := true ;
2284: LD_ADDR_EXP 4
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// exit ;
2292: GO 2444
// end ; ComMoveXY ( [ Kurt , Mike ] , 132 , 52 ) ;
2294: LD_EXP 22
2298: PUSH
2299: LD_EXP 14
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PPUSH
2308: LD_INT 132
2310: PPUSH
2311: LD_INT 52
2313: PPUSH
2314: CALL_OW 111
// AddComMoveUnit ( [ Kurt , Mike ] , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
2318: LD_EXP 22
2322: PUSH
2323: LD_EXP 14
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 69
2346: PUSH
2347: LD_INT 1
2349: ARRAY
2350: PPUSH
2351: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// until See ( 2 , Kurt ) or See ( 2 , Mike ) ;
2362: LD_INT 2
2364: PPUSH
2365: LD_EXP 22
2369: PPUSH
2370: CALL_OW 292
2374: PUSH
2375: LD_INT 2
2377: PPUSH
2378: LD_EXP 14
2382: PPUSH
2383: CALL_OW 292
2387: OR
2388: IFFALSE 2355
// if IsLive ( Kurt ) then
2390: LD_EXP 22
2394: PPUSH
2395: CALL_OW 300
2399: IFFALSE 2413
// SetSide ( Kurt , 2 ) ;
2401: LD_EXP 22
2405: PPUSH
2406: LD_INT 2
2408: PPUSH
2409: CALL_OW 235
// if IsLive ( Mike ) then
2413: LD_EXP 14
2417: PPUSH
2418: CALL_OW 300
2422: IFFALSE 2436
// SetSide ( Mike , 2 ) ;
2424: LD_EXP 14
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 235
// scoutSuccess := true ;
2436: LD_ADDR_EXP 5
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// end ; end_of_file
2444: PPOPN 2
2446: END
// export usCommander , usForces , usCargo , usToBuild , usAdditionalForces ; export function PrepareAmerican ; var i , b , veh ; begin
2447: LD_INT 0
2449: PPUSH
2450: PPUSH
2451: PPUSH
2452: PPUSH
// uc_side := 1 ;
2453: LD_ADDR_OWVAR 20
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// uc_nation := 1 ;
2461: LD_ADDR_OWVAR 21
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 2000 , 2500 , 3000 , 3500 ] [ Difficulty ] ) ;
2469: LD_INT 1
2471: PPUSH
2472: CALL_OW 274
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 2000
2482: PUSH
2483: LD_INT 2500
2485: PUSH
2486: LD_INT 3000
2488: PUSH
2489: LD_INT 3500
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: LD_OWVAR 67
2502: ARRAY
2503: PPUSH
2504: CALL_OW 277
// SetResourceType ( GetBase ( usDepot ) , mat_oil , 600 ) ;
2508: LD_INT 1
2510: PPUSH
2511: CALL_OW 274
2515: PPUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 600
2521: PPUSH
2522: CALL_OW 277
// usForces := [ ] ;
2526: LD_ADDR_EXP 28
2530: PUSH
2531: EMPTY
2532: ST_TO_ADDR
// usToBuild := [ ] ;
2533: LD_ADDR_EXP 30
2537: PUSH
2538: EMPTY
2539: ST_TO_ADDR
// usAdditionalForces := [ ] ;
2540: LD_ADDR_EXP 31
2544: PUSH
2545: EMPTY
2546: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PPUSH
2562: CALL_OW 69
2566: PUSH
2567: FOR_IN
2568: IFFALSE 2605
// SetBLevel ( i , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
2570: LD_VAR 0 2
2574: PPUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: LD_INT 8
2583: PUSH
2584: LD_INT 8
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PUSH
2593: LD_OWVAR 67
2597: ARRAY
2598: PPUSH
2599: CALL_OW 241
2603: GO 2567
2605: POP
2606: POP
// for i in FilterAllUnits ( [ f_btype , b_bunker ] ) do
2607: LD_ADDR_VAR 0 2
2611: PUSH
2612: LD_INT 30
2614: PUSH
2615: LD_INT 32
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PPUSH
2622: CALL_OW 69
2626: PUSH
2627: FOR_IN
2628: IFFALSE 2718
// begin if GetBWeapon ( i ) = us_radar then
2630: LD_VAR 0 2
2634: PPUSH
2635: CALL_OW 269
2639: PUSH
2640: LD_INT 11
2642: EQUAL
2643: IFFALSE 2668
// begin uc_nation := 0 ;
2645: LD_ADDR_OWVAR 21
2649: PUSH
2650: LD_INT 0
2652: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 2 ) ;
2653: LD_INT 0
2655: PPUSH
2656: LD_INT 16
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 380
// end else
2666: GO 2702
// PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2668: LD_INT 0
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 5
2676: PUSH
2677: LD_INT 6
2679: PUSH
2680: LD_INT 7
2682: PUSH
2683: LD_INT 8
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: LIST
2690: LIST
2691: PUSH
2692: LD_OWVAR 67
2696: ARRAY
2697: PPUSH
2698: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2702: CALL_OW 44
2706: PPUSH
2707: LD_VAR 0 2
2711: PPUSH
2712: CALL_OW 52
// end ;
2716: GO 2627
2718: POP
2719: POP
// b := HexInfo ( 74 , 120 ) ;
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: LD_INT 74
2727: PPUSH
2728: LD_INT 120
2730: PPUSH
2731: CALL_OW 428
2735: ST_TO_ADDR
// uc_nation := 1 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 1
2743: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
2744: LD_ADDR_VAR 0 2
2748: PUSH
2749: DOUBLE
2750: LD_INT 1
2752: DEC
2753: ST_TO_ADDR
2754: LD_INT 1
2756: PUSH
2757: LD_INT 2
2759: PUSH
2760: LD_INT 3
2762: PUSH
2763: LD_INT 4
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: PUSH
2772: LD_OWVAR 67
2776: ARRAY
2777: PUSH
2778: FOR_TO
2779: IFFALSE 2831
// begin PrepareHuman ( false , 1 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2781: LD_INT 0
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: LD_INT 5
2789: PUSH
2790: LD_INT 6
2792: PUSH
2793: LD_INT 7
2795: PUSH
2796: LD_INT 8
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: PUSH
2805: LD_OWVAR 67
2809: ARRAY
2810: PPUSH
2811: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b ) ;
2815: CALL_OW 44
2819: PPUSH
2820: LD_VAR 0 3
2824: PPUSH
2825: CALL_OW 52
// end ;
2829: GO 2778
2831: POP
2832: POP
// SetClass ( UnitsInside ( b ) , class_sniper ) ;
2833: LD_VAR 0 3
2837: PPUSH
2838: CALL_OW 313
2842: PPUSH
2843: LD_INT 5
2845: PPUSH
2846: CALL_OW 336
// for i := 1 to 6 do
2850: LD_ADDR_VAR 0 2
2854: PUSH
2855: DOUBLE
2856: LD_INT 1
2858: DEC
2859: ST_TO_ADDR
2860: LD_INT 6
2862: PUSH
2863: FOR_TO
2864: IFFALSE 2914
// begin PrepareHuman ( false , 4 , 6 ) ;
2866: LD_INT 0
2868: PPUSH
2869: LD_INT 4
2871: PPUSH
2872: LD_INT 6
2874: PPUSH
2875: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ amLab1 , amLab2 ] [ i mod 2 + 1 ] ) ;
2879: CALL_OW 44
2883: PPUSH
2884: LD_INT 32
2886: PUSH
2887: LD_INT 33
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_VAR 0 2
2898: PUSH
2899: LD_INT 2
2901: MOD
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PPUSH
2908: CALL_OW 52
// end ;
2912: GO 2863
2914: POP
2915: POP
// for i := 1 to 3 do
2916: LD_ADDR_VAR 0 2
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 3
2928: PUSH
2929: FOR_TO
2930: IFFALSE 2959
// begin PrepareHuman ( false , 3 , 6 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 6
2940: PPUSH
2941: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
2945: CALL_OW 44
2949: PPUSH
2950: LD_INT 25
2952: PPUSH
2953: CALL_OW 52
// end ;
2957: GO 2929
2959: POP
2960: POP
// for i := 1 to 3 do
2961: LD_ADDR_VAR 0 2
2965: PUSH
2966: DOUBLE
2967: LD_INT 1
2969: DEC
2970: ST_TO_ADDR
2971: LD_INT 3
2973: PUSH
2974: FOR_TO
2975: IFFALSE 3033
// begin PrepareHuman ( false , 3 , [ 6 , 7 , 7 , 7 ] [ Difficulty ] ) ;
2977: LD_INT 0
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: LD_INT 6
2985: PUSH
2986: LD_INT 7
2988: PUSH
2989: LD_INT 7
2991: PUSH
2992: LD_INT 7
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: PUSH
3001: LD_OWVAR 67
3005: ARRAY
3006: PPUSH
3007: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 78 , 130 ) ) ;
3011: CALL_OW 44
3015: PPUSH
3016: LD_INT 78
3018: PPUSH
3019: LD_INT 130
3021: PPUSH
3022: CALL_OW 428
3026: PPUSH
3027: CALL_OW 52
// end ;
3031: GO 2974
3033: POP
3034: POP
// for i := 1 to 3 do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: DOUBLE
3041: LD_INT 1
3043: DEC
3044: ST_TO_ADDR
3045: LD_INT 3
3047: PUSH
3048: FOR_TO
3049: IFFALSE 3136
// begin PrepareVehicle ( us_medium_wheeled , engine_solar , control_manual , us_crane , 100 ) ;
3051: LD_INT 2
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_INT 13
3062: PPUSH
3063: LD_INT 100
3065: PPUSH
3066: CALL 19874 0 5
// veh := CreateVehicle ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: CALL_OW 45
3079: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3080: LD_VAR 0 4
3084: PPUSH
3085: LD_INT 3
3087: PPUSH
3088: CALL_OW 233
// PlaceUnitArea ( veh , usCraneArea , false ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_INT 9
3099: PPUSH
3100: LD_INT 0
3102: PPUSH
3103: CALL_OW 49
// PrepareHuman ( false , 3 , 6 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 3
3112: PPUSH
3113: LD_INT 6
3115: PPUSH
3116: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3120: CALL_OW 44
3124: PPUSH
3125: LD_VAR 0 4
3129: PPUSH
3130: CALL_OW 52
// end ;
3134: GO 3048
3136: POP
3137: POP
// InitHc ;
3138: CALL_OW 19
// hc_gallery := us ;
3142: LD_ADDR_OWVAR 33
3146: PUSH
3147: LD_STRING us
3149: ST_TO_ADDR
// hc_face_number := 26 ;
3150: LD_ADDR_OWVAR 34
3154: PUSH
3155: LD_INT 26
3157: ST_TO_ADDR
// hc_name := Max Caldera ;
3158: LD_ADDR_OWVAR 26
3162: PUSH
3163: LD_STRING Max Caldera
3165: ST_TO_ADDR
// hc_class := class_engineer ;
3166: LD_ADDR_OWVAR 28
3170: PUSH
3171: LD_INT 2
3173: ST_TO_ADDR
// hc_sex := sex_male ;
3174: LD_ADDR_OWVAR 27
3178: PUSH
3179: LD_INT 1
3181: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
3182: LD_ADDR_OWVAR 29
3186: PUSH
3187: LD_INT 10
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
3197: LD_ADDR_OWVAR 30
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: LD_INT 0
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: ST_TO_ADDR
// hc_skills := [ 4 , 6 , 3 , 1 ] ;
3220: LD_ADDR_OWVAR 31
3224: PUSH
3225: LD_INT 4
3227: PUSH
3228: LD_INT 6
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 1
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: ST_TO_ADDR
// usCommander := CreateHuman ;
3243: LD_ADDR_EXP 27
3247: PUSH
3248: CALL_OW 44
3252: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3253: LD_EXP 27
3257: PPUSH
3258: LD_INT 1
3260: PPUSH
3261: CALL_OW 52
// InitHC_All ( ) ;
3265: CALL_OW 584
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay , 100 ) ;
3269: LD_INT 2
3271: PPUSH
3272: LD_INT 1
3274: PPUSH
3275: LD_INT 2
3277: PPUSH
3278: LD_INT 12
3280: PPUSH
3281: LD_INT 100
3283: PPUSH
3284: CALL 19874 0 5
// usCargo := CreateVehicle ;
3288: LD_ADDR_EXP 29
3292: PUSH
3293: CALL_OW 45
3297: ST_TO_ADDR
// PlaceUnitXY ( usCargo , 81 , 143 , false ) ;
3298: LD_EXP 29
3302: PPUSH
3303: LD_INT 81
3305: PPUSH
3306: LD_INT 143
3308: PPUSH
3309: LD_INT 0
3311: PPUSH
3312: CALL_OW 48
// Connect ( usCargo ) ;
3316: LD_EXP 29
3320: PPUSH
3321: CALL 22967 0 1
// DoNotAttack ( 5 , usCargo ) ;
3325: LD_INT 5
3327: PPUSH
3328: LD_EXP 29
3332: PPUSH
3333: CALL_OW 471
// end ;
3337: LD_VAR 0 1
3341: RET
// every 6 6$00 trigger not usForces and usAttacksAllowed and IsOk ( amFac ) and BuildingStatus ( amFac ) = bs_idle do var i , chassis , weapon ;
3342: LD_EXP 28
3346: NOT
3347: PUSH
3348: LD_EXP 6
3352: AND
3353: PUSH
3354: LD_INT 25
3356: PPUSH
3357: CALL_OW 302
3361: AND
3362: PUSH
3363: LD_INT 25
3365: PPUSH
3366: CALL_OW 461
3370: PUSH
3371: LD_INT 2
3373: EQUAL
3374: AND
3375: IFFALSE 3532
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
3383: PPUSH
3384: PPUSH
// begin enable ;
3385: ENABLE
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3386: LD_ADDR_VAR 0 1
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 5
3398: PUSH
3399: LD_INT 6
3401: PUSH
3402: LD_INT 7
3404: PUSH
3405: LD_INT 8
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_OWVAR 67
3418: ARRAY
3419: PUSH
3420: FOR_TO
3421: IFFALSE 3530
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
3423: LD_ADDR_VAR 0 2
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 1
3444: PPUSH
3445: LD_INT 3
3447: PPUSH
3448: CALL_OW 12
3452: ARRAY
3453: ST_TO_ADDR
// if chassis = us_heavy_tracked then
3454: LD_VAR 0 2
3458: PUSH
3459: LD_INT 4
3461: EQUAL
3462: IFFALSE 3474
// weapon := us_heavy_gun else
3464: LD_ADDR_VAR 0 3
3468: PUSH
3469: LD_INT 6
3471: ST_TO_ADDR
3472: GO 3505
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3474: LD_ADDR_VAR 0 3
3478: PUSH
3479: LD_INT 5
3481: PUSH
3482: LD_INT 7
3484: PUSH
3485: LD_INT 4
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 1
3495: PPUSH
3496: LD_INT 3
3498: PPUSH
3499: CALL_OW 12
3503: ARRAY
3504: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
3505: LD_INT 25
3507: PPUSH
3508: LD_VAR 0 2
3512: PPUSH
3513: LD_INT 1
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: LD_VAR 0 3
3523: PPUSH
3524: CALL_OW 185
// end ;
3528: GO 3420
3530: POP
3531: POP
// end ;
3532: PPOPN 3
3534: END
// every 0 0$10 trigger usForces >= [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , tmp ;
3535: LD_EXP 28
3539: PUSH
3540: LD_INT 5
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: LD_INT 7
3548: PUSH
3549: LD_INT 8
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: GREATEREQUAL
3564: IFFALSE 3675
3566: GO 3568
3568: DISABLE
3569: LD_INT 0
3571: PPUSH
3572: PPUSH
// begin enable ;
3573: ENABLE
// tmp := usForces ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: LD_EXP 28
3583: ST_TO_ADDR
// usForces := [ ] ;
3584: LD_ADDR_EXP 28
3588: PUSH
3589: EMPTY
3590: ST_TO_ADDR
// if not tmp then
3591: LD_VAR 0 2
3595: NOT
3596: IFFALSE 3600
// exit ;
3598: GO 3675
// repeat wait ( 0 0$1 ) ;
3600: LD_INT 35
3602: PPUSH
3603: CALL_OW 67
// tmp := AgressiveMove ( tmp , [ [ 98 , 50 ] , [ 114 , 50 ] , [ 127 , 51 ] , [ 131 , 35 ] ] ) ;
3607: LD_ADDR_VAR 0 2
3611: PUSH
3612: LD_VAR 0 2
3616: PPUSH
3617: LD_INT 98
3619: PUSH
3620: LD_INT 50
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 114
3629: PUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PUSH
3637: LD_INT 127
3639: PUSH
3640: LD_INT 51
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 131
3649: PUSH
3650: LD_INT 35
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: PPUSH
3663: CALL 54142 0 2
3667: ST_TO_ADDR
// until not tmp ;
3668: LD_VAR 0 2
3672: NOT
3673: IFFALSE 3600
// end ;
3675: PPOPN 2
3677: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( southScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3678: LD_EXP 3
3682: PUSH
3683: LD_EXP 5
3687: NOT
3688: AND
3689: PUSH
3690: LD_INT 11
3692: PPUSH
3693: LD_INT 22
3695: PUSH
3696: LD_INT 2
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PPUSH
3703: CALL_OW 70
3707: AND
3708: IFFALSE 3829
3710: GO 3712
3712: DISABLE
3713: LD_INT 0
3715: PPUSH
3716: PPUSH
3717: PPUSH
// begin uc_side := 1 ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_INT 1
3725: ST_TO_ADDR
// uc_nation := 1 ;
3726: LD_ADDR_OWVAR 21
3730: PUSH
3731: LD_INT 1
3733: ST_TO_ADDR
// tmp := [ ] ;
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: EMPTY
3740: ST_TO_ADDR
// for i := 1 to 2 do
3741: LD_ADDR_VAR 0 1
3745: PUSH
3746: DOUBLE
3747: LD_INT 1
3749: DEC
3750: ST_TO_ADDR
3751: LD_INT 2
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3827
// begin PrepareSoldier ( false , 7 ) ;
3757: LD_INT 0
3759: PPUSH
3760: LD_INT 7
3762: PPUSH
3763: CALL_OW 381
// un := CreateHuman ;
3767: LD_ADDR_VAR 0 2
3771: PUSH
3772: CALL_OW 44
3776: ST_TO_ADDR
// PlaceUnitXYR ( un , 130 , 153 , 3 , false ) ;
3777: LD_VAR 0 2
3781: PPUSH
3782: LD_INT 130
3784: PPUSH
3785: LD_INT 153
3787: PPUSH
3788: LD_INT 3
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3798: LD_VAR 0 2
3802: PPUSH
3803: LD_INT 5
3805: PPUSH
3806: CALL_OW 336
// AddComAgressiveMove ( un , 108 , 108 ) ;
3810: LD_VAR 0 2
3814: PPUSH
3815: LD_INT 108
3817: PPUSH
3818: LD_INT 108
3820: PPUSH
3821: CALL_OW 174
// end ;
3825: GO 3754
3827: POP
3828: POP
// end ;
3829: PPOPN 3
3831: END
// every 0 0$1 trigger scoutActive and not scoutSuccess and FilterUnitsInArea ( northScoutArea , [ f_side , 2 ] ) do var i , un , tmp ;
3832: LD_EXP 3
3836: PUSH
3837: LD_EXP 5
3841: NOT
3842: AND
3843: PUSH
3844: LD_INT 10
3846: PPUSH
3847: LD_INT 22
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 70
3861: AND
3862: IFFALSE 3983
3864: GO 3866
3866: DISABLE
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// begin uc_side := 1 ;
3872: LD_ADDR_OWVAR 20
3876: PUSH
3877: LD_INT 1
3879: ST_TO_ADDR
// uc_nation := 1 ;
3880: LD_ADDR_OWVAR 21
3884: PUSH
3885: LD_INT 1
3887: ST_TO_ADDR
// tmp := [ ] ;
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: EMPTY
3894: ST_TO_ADDR
// for i := 1 to 2 do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: DOUBLE
3901: LD_INT 1
3903: DEC
3904: ST_TO_ADDR
3905: LD_INT 2
3907: PUSH
3908: FOR_TO
3909: IFFALSE 3981
// begin PrepareSoldier ( false , 7 ) ;
3911: LD_INT 0
3913: PPUSH
3914: LD_INT 7
3916: PPUSH
3917: CALL_OW 381
// un := CreateHuman ;
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// PlaceUnitXYR ( un , 56 , 101 , 3 , false ) ;
3931: LD_VAR 0 2
3935: PPUSH
3936: LD_INT 56
3938: PPUSH
3939: LD_INT 101
3941: PPUSH
3942: LD_INT 3
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 50
// SetClass ( un , class_sniper ) ;
3952: LD_VAR 0 2
3956: PPUSH
3957: LD_INT 5
3959: PPUSH
3960: CALL_OW 336
// AddComAgressiveMove ( un , 72 , 92 ) ;
3964: LD_VAR 0 2
3968: PPUSH
3969: LD_INT 72
3971: PPUSH
3972: LD_INT 92
3974: PPUSH
3975: CALL_OW 174
// end ;
3979: GO 3908
3981: POP
3982: POP
// end ;
3983: PPOPN 3
3985: END
// every 0 0$2 trigger IsOk ( usCargo ) and not usSurrender do var cr , enemyInArea ;
3986: LD_EXP 29
3990: PPUSH
3991: CALL_OW 302
3995: PUSH
3996: LD_EXP 7
4000: NOT
4001: AND
4002: IFFALSE 4265
4004: GO 4006
4006: DISABLE
4007: LD_INT 0
4009: PPUSH
4010: PPUSH
// begin enable ;
4011: ENABLE
// enemyInArea := FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4012: LD_ADDR_VAR 0 2
4016: PUSH
4017: LD_INT 14
4019: PPUSH
4020: LD_INT 81
4022: PUSH
4023: LD_INT 1
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 50
4032: PUSH
4033: EMPTY
4034: LIST
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PPUSH
4040: CALL_OW 70
4044: ST_TO_ADDR
// cr := GetListOfCratesInArea ( usCratesArea ) ;
4045: LD_ADDR_VAR 0 1
4049: PUSH
4050: LD_INT 12
4052: PPUSH
4053: CALL_OW 435
4057: ST_TO_ADDR
// if GetFuel ( usCargo ) < 10 and not See ( 2 , usCargo ) then
4058: LD_EXP 29
4062: PPUSH
4063: CALL_OW 261
4067: PUSH
4068: LD_INT 10
4070: LESS
4071: PUSH
4072: LD_INT 2
4074: PPUSH
4075: LD_EXP 29
4079: PPUSH
4080: CALL_OW 292
4084: NOT
4085: AND
4086: IFFALSE 4100
// SetFuel ( usCargo , 100 ) ;
4088: LD_EXP 29
4092: PPUSH
4093: LD_INT 100
4095: PPUSH
4096: CALL_OW 240
// if not HasTask ( usCargo ) and GetCargo ( usCargo , mat_cans ) < 100 and not enemyInArea then
4100: LD_EXP 29
4104: PPUSH
4105: CALL_OW 314
4109: NOT
4110: PUSH
4111: LD_EXP 29
4115: PPUSH
4116: LD_INT 1
4118: PPUSH
4119: CALL_OW 289
4123: PUSH
4124: LD_INT 100
4126: LESS
4127: AND
4128: PUSH
4129: LD_VAR 0 2
4133: NOT
4134: AND
4135: IFFALSE 4201
// begin if cr then
4137: LD_VAR 0 1
4141: IFFALSE 4172
// ComCollect ( usCargo , cr [ 1 ] , cr [ 2 ] ) else
4143: LD_EXP 29
4147: PPUSH
4148: LD_VAR 0 1
4152: PUSH
4153: LD_INT 1
4155: ARRAY
4156: PPUSH
4157: LD_VAR 0 1
4161: PUSH
4162: LD_INT 2
4164: ARRAY
4165: PPUSH
4166: CALL_OW 117
4170: GO 4199
// if not IsInArea ( usCargo , usCratesArea ) then
4172: LD_EXP 29
4176: PPUSH
4177: LD_INT 12
4179: PPUSH
4180: CALL_OW 308
4184: NOT
4185: IFFALSE 4199
// ComMoveToArea ( usCargo , usCratesArea ) ;
4187: LD_EXP 29
4191: PPUSH
4192: LD_INT 12
4194: PPUSH
4195: CALL_OW 113
// exit ;
4199: GO 4265
// end ; if enemyInArea and not IsInArea ( usCargo , americanBaseArea ) then
4201: LD_VAR 0 2
4205: PUSH
4206: LD_EXP 29
4210: PPUSH
4211: LD_INT 14
4213: PPUSH
4214: CALL_OW 308
4218: NOT
4219: AND
4220: IFFALSE 4239
// ComMoveXY ( usCargo , 80 , 143 ) else
4222: LD_EXP 29
4226: PPUSH
4227: LD_INT 80
4229: PPUSH
4230: LD_INT 143
4232: PPUSH
4233: CALL_OW 111
4237: GO 4265
// if GetCargo ( usCargo , mat_cans ) then
4239: LD_EXP 29
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 289
4251: IFFALSE 4265
// ComGive ( usCargo , usDepot ) ;
4253: LD_EXP 29
4257: PPUSH
4258: LD_INT 1
4260: PPUSH
4261: CALL_OW 161
// end ;
4265: PPOPN 2
4267: END
// every 0 0$3 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) do var i , sci ;
4268: LD_EXP 7
4272: NOT
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 21
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 69
4316: AND
4317: PUSH
4318: LD_INT 22
4320: PUSH
4321: LD_INT 1
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 60
4333: PUSH
4334: EMPTY
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 25
4343: PUSH
4344: LD_INT 4
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PPUSH
4356: CALL_OW 69
4360: AND
4361: IFFALSE 4564
4363: GO 4365
4365: DISABLE
4366: LD_INT 0
4368: PPUSH
4369: PPUSH
// begin enable ;
4370: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) do
4371: LD_ADDR_VAR 0 1
4375: PUSH
4376: LD_INT 22
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 21
4388: PUSH
4389: LD_INT 1
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 50
4401: PUSH
4402: EMPTY
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: PPUSH
4414: CALL_OW 69
4418: PUSH
4419: FOR_IN
4420: IFFALSE 4562
// begin sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_class , 4 ] ] ) ;
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_INT 22
4429: PUSH
4430: LD_INT 1
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 3
4439: PUSH
4440: LD_INT 60
4442: PUSH
4443: EMPTY
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 4
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// if not sci then
4470: LD_VAR 0 2
4474: NOT
4475: IFFALSE 4479
// break ;
4477: GO 4562
// sci := sci [ 1 ] ;
4479: LD_ADDR_VAR 0 2
4483: PUSH
4484: LD_VAR 0 2
4488: PUSH
4489: LD_INT 1
4491: ARRAY
4492: ST_TO_ADDR
// if IsInUnit ( sci ) then
4493: LD_VAR 0 2
4497: PPUSH
4498: CALL_OW 310
4502: IFFALSE 4515
// ComExit ( sci ) else
4504: LD_VAR 0 2
4508: PPUSH
4509: CALL 52135 0 1
4513: GO 4560
// begin ComHeal ( sci , i ) ;
4515: LD_VAR 0 2
4519: PPUSH
4520: LD_VAR 0 1
4524: PPUSH
4525: CALL_OW 128
// AddComEnterUnit ( sci , [ amLab1 , amLab2 ] [ rand ( 1 , 2 ) ] ) ;
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_INT 32
4536: PUSH
4537: LD_INT 33
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 1
4546: PPUSH
4547: LD_INT 2
4549: PPUSH
4550: CALL_OW 12
4554: ARRAY
4555: PPUSH
4556: CALL_OW 180
// end ; end ;
4560: GO 4419
4562: POP
4563: POP
// end ;
4564: PPOPN 2
4566: END
// every 0 0$2 trigger not usSurrender and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) do var i , tmp , tmp2 ;
4567: LD_EXP 7
4571: NOT
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 60
4588: PUSH
4589: EMPTY
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 50
4598: PUSH
4599: EMPTY
4600: LIST
4601: PUSH
4602: LD_INT 34
4604: PUSH
4605: LD_INT 13
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: PPUSH
4618: CALL_OW 69
4622: AND
4623: PUSH
4624: LD_INT 22
4626: PUSH
4627: LD_INT 1
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 3
4636: PUSH
4637: LD_INT 24
4639: PUSH
4640: LD_INT 1000
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 21
4653: PUSH
4654: LD_INT 3
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: LD_INT 30
4666: PUSH
4667: LD_INT 29
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: PPUSH
4684: CALL_OW 69
4688: AND
4689: IFFALSE 4958
4691: GO 4693
4693: DISABLE
4694: LD_INT 0
4696: PPUSH
4697: PPUSH
4698: PPUSH
// begin enable ;
4699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4700: LD_ADDR_VAR 0 2
4704: PUSH
4705: LD_INT 22
4707: PUSH
4708: LD_INT 1
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 24
4720: PUSH
4721: LD_INT 1000
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 21
4734: PUSH
4735: LD_INT 3
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 3
4744: PUSH
4745: LD_INT 30
4747: PUSH
4748: LD_INT 29
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: PPUSH
4765: CALL_OW 69
4769: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_oil_mine ] ] ] ) ;
4770: LD_ADDR_VAR 0 3
4774: PUSH
4775: LD_INT 22
4777: PUSH
4778: LD_INT 1
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 3
4787: PUSH
4788: LD_INT 24
4790: PUSH
4791: LD_INT 600
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 3
4814: PUSH
4815: LD_INT 30
4817: PUSH
4818: LD_INT 29
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 69
4839: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4840: LD_ADDR_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 3
4857: PUSH
4858: LD_INT 60
4860: PUSH
4861: EMPTY
4862: LIST
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 50
4870: PUSH
4871: EMPTY
4872: LIST
4873: PUSH
4874: LD_INT 34
4876: PUSH
4877: LD_INT 13
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: PPUSH
4890: CALL_OW 69
4894: PUSH
4895: FOR_IN
4896: IFFALSE 4956
// begin if tmp2 then
4898: LD_VAR 0 3
4902: IFFALSE 4930
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_VAR 0 3
4913: PPUSH
4914: LD_VAR 0 1
4918: PPUSH
4919: CALL_OW 74
4923: PPUSH
4924: CALL_OW 130
4928: GO 4954
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4930: LD_VAR 0 1
4934: PPUSH
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 1
4944: PPUSH
4945: CALL_OW 74
4949: PPUSH
4950: CALL_OW 130
// end ;
4954: GO 4895
4956: POP
4957: POP
// end ;
4958: PPOPN 3
4960: END
// every 0 0$1 trigger not usSurrender and not FilterUnitsInArea ( americanBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) and usToBuild and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4961: LD_EXP 7
4965: NOT
4966: PUSH
4967: LD_INT 14
4969: PPUSH
4970: LD_INT 81
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_INT 50
4982: PUSH
4983: EMPTY
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 70
4994: NOT
4995: AND
4996: PUSH
4997: LD_EXP 30
5001: AND
5002: PUSH
5003: LD_INT 22
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 3
5015: PUSH
5016: LD_INT 60
5018: PUSH
5019: EMPTY
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 50
5028: PUSH
5029: EMPTY
5030: LIST
5031: PUSH
5032: LD_INT 34
5034: PUSH
5035: LD_INT 13
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PPUSH
5048: CALL_OW 69
5052: AND
5053: IFFALSE 5165
5055: GO 5057
5057: DISABLE
// begin enable ;
5058: ENABLE
// ComCraneBuild ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) , usToBuild [ 1 ] [ 1 ] , usToBuild [ 1 ] [ 2 ] , usToBuild [ 1 ] [ 3 ] , usToBuild [ 1 ] [ 4 ] ) ;
5059: LD_INT 22
5061: PUSH
5062: LD_INT 1
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 3
5071: PUSH
5072: LD_INT 60
5074: PUSH
5075: EMPTY
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 50
5084: PUSH
5085: EMPTY
5086: LIST
5087: PUSH
5088: LD_INT 34
5090: PUSH
5091: LD_INT 13
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: PPUSH
5109: LD_EXP 30
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: LD_EXP 30
5126: PUSH
5127: LD_INT 1
5129: ARRAY
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: LD_EXP 30
5139: PUSH
5140: LD_INT 1
5142: ARRAY
5143: PUSH
5144: LD_INT 3
5146: ARRAY
5147: PPUSH
5148: LD_EXP 30
5152: PUSH
5153: LD_INT 1
5155: ARRAY
5156: PUSH
5157: LD_INT 4
5159: ARRAY
5160: PPUSH
5161: CALL_OW 566
// end ;
5165: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) do var i , tmp , btmp , barracks ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: LD_INT 54
5187: PUSH
5188: EMPTY
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 25
5200: PUSH
5201: LD_INT 1
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 25
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 25
5220: PUSH
5221: LD_INT 16
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL_OW 69
5244: IFFALSE 5606
5246: GO 5248
5248: DISABLE
5249: LD_INT 0
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
// begin enable ;
5255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_apeman_engineer ] ] ] ) ;
5256: LD_ADDR_VAR 0 2
5260: PUSH
5261: LD_INT 22
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 50
5273: PUSH
5274: EMPTY
5275: LIST
5276: PUSH
5277: LD_INT 3
5279: PUSH
5280: LD_INT 54
5282: PUSH
5283: EMPTY
5284: LIST
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 2
5292: PUSH
5293: LD_INT 25
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 25
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 25
5315: PUSH
5316: LD_INT 16
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: ST_TO_ADDR
// btmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
5340: LD_ADDR_VAR 0 3
5344: PUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 1
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 50
5357: PUSH
5358: EMPTY
5359: LIST
5360: PUSH
5361: LD_INT 21
5363: PUSH
5364: LD_INT 3
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 30
5373: PUSH
5374: LD_INT 32
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 58
5383: PUSH
5384: EMPTY
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PPUSH
5394: CALL_OW 69
5398: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
5399: LD_ADDR_VAR 0 4
5403: PUSH
5404: LD_INT 22
5406: PUSH
5407: LD_INT 1
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PUSH
5414: LD_INT 50
5416: PUSH
5417: EMPTY
5418: LIST
5419: PUSH
5420: LD_INT 30
5422: PUSH
5423: LD_INT 5
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 69
5439: ST_TO_ADDR
// if not tmp then
5440: LD_VAR 0 2
5444: NOT
5445: IFFALSE 5449
// exit ;
5447: GO 5606
// for i in tmp do
5449: LD_ADDR_VAR 0 1
5453: PUSH
5454: LD_VAR 0 2
5458: PUSH
5459: FOR_IN
5460: IFFALSE 5604
// begin btmp := FilterByTag ( btmp , 0 ) ;
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: LD_VAR 0 3
5471: PPUSH
5472: LD_INT 0
5474: PPUSH
5475: CALL 49265 0 2
5479: ST_TO_ADDR
// if not btmp then
5480: LD_VAR 0 3
5484: NOT
5485: IFFALSE 5530
// begin if GetClass ( i ) <> class_apeman_engineer and barracks then
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 257
5496: PUSH
5497: LD_INT 16
5499: NONEQUAL
5500: PUSH
5501: LD_VAR 0 4
5505: AND
5506: IFFALSE 5526
// ComEnterUnit ( i , barracks [ 1 ] ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: LD_VAR 0 4
5517: PUSH
5518: LD_INT 1
5520: ARRAY
5521: PPUSH
5522: CALL_OW 120
// continue ;
5526: GO 5459
// end else
5528: GO 5602
// begin SetTag ( btmp [ 1 ] , 1 ) ;
5530: LD_VAR 0 3
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 109
// ComEnterUnit ( i , btmp [ 1 ] ) ;
5546: LD_VAR 0 1
5550: PPUSH
5551: LD_VAR 0 3
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: CALL_OW 120
// wait ( 0 0$9 ) ;
5564: LD_INT 315
5566: PPUSH
5567: CALL_OW 67
// if IsEmpty ( btmp [ 1 ] ) then
5571: LD_VAR 0 3
5575: PUSH
5576: LD_INT 1
5578: ARRAY
5579: PPUSH
5580: CALL 17166 0 1
5584: IFFALSE 5602
// SetTag ( btmp [ 1 ] , 0 ) ;
5586: LD_VAR 0 3
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PPUSH
5595: LD_INT 0
5597: PPUSH
5598: CALL_OW 109
// end ; end ;
5602: GO 5459
5604: POP
5605: POP
// end ;
5606: PPOPN 4
5608: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 33
5621: PUSH
5622: LD_INT 2
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 50
5631: PUSH
5632: EMPTY
5633: LIST
5634: PUSH
5635: LD_INT 3
5637: PUSH
5638: LD_INT 61
5640: PUSH
5641: EMPTY
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: PPUSH
5654: CALL_OW 69
5658: IFFALSE 5749
5660: GO 5662
5662: DISABLE
5663: LD_INT 0
5665: PPUSH
5666: PPUSH
// begin enable ;
5667: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 33
5685: PUSH
5686: LD_INT 2
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: LD_INT 50
5695: PUSH
5696: EMPTY
5697: LIST
5698: PUSH
5699: LD_INT 3
5701: PUSH
5702: LD_INT 61
5704: PUSH
5705: EMPTY
5706: LIST
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: PPUSH
5718: CALL_OW 69
5722: ST_TO_ADDR
// for i in tmp do
5723: LD_ADDR_VAR 0 1
5727: PUSH
5728: LD_VAR 0 2
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5747
// Connect ( i ) ;
5736: LD_VAR 0 1
5740: PPUSH
5741: CALL 22967 0 1
5745: GO 5733
5747: POP
5748: POP
// end ;
5749: PPOPN 2
5751: END
// every 1 1$00 trigger usAttacksAllowed and Difficulty > 1 do var i , un , veh , chassis , weapon ;
5752: LD_EXP 6
5756: PUSH
5757: LD_OWVAR 67
5761: PUSH
5762: LD_INT 1
5764: GREATER
5765: AND
5766: IFFALSE 6204
5768: GO 5770
5770: DISABLE
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
5777: PPUSH
// begin wait ( [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ) ;
5778: LD_INT 21000
5780: PUSH
5781: LD_INT 18900
5783: PUSH
5784: LD_INT 16800
5786: PUSH
5787: LD_INT 14700
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: PUSH
5796: LD_OWVAR 67
5800: ARRAY
5801: PPUSH
5802: CALL_OW 67
// if usSurrender then
5806: LD_EXP 7
5810: IFFALSE 5814
// exit ;
5812: GO 6204
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] do
5814: LD_ADDR_VAR 0 1
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_INT 4
5826: PUSH
5827: LD_INT 5
5829: PUSH
5830: LD_INT 5
5832: PUSH
5833: LD_INT 6
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_OWVAR 67
5846: ARRAY
5847: PUSH
5848: FOR_TO
5849: IFFALSE 6149
// begin uc_side := 1 ;
5851: LD_ADDR_OWVAR 20
5855: PUSH
5856: LD_INT 1
5858: ST_TO_ADDR
// uc_nation := 1 ;
5859: LD_ADDR_OWVAR 21
5863: PUSH
5864: LD_INT 1
5866: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
5867: LD_INT 0
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 5
5875: PUSH
5876: LD_INT 6
5878: PUSH
5879: LD_INT 7
5881: PUSH
5882: LD_INT 8
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: LD_OWVAR 67
5895: ARRAY
5896: PPUSH
5897: CALL_OW 380
// un := CreateHuman ;
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: CALL_OW 44
5910: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ i mod 3 + 1 ] ;
5911: LD_ADDR_VAR 0 4
5915: PUSH
5916: LD_INT 2
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_VAR 0 1
5934: PUSH
5935: LD_INT 3
5937: MOD
5938: PUSH
5939: LD_INT 1
5941: PLUS
5942: ARRAY
5943: ST_TO_ADDR
// if chassis = us_heavy_tracked then
5944: LD_VAR 0 4
5948: PUSH
5949: LD_INT 4
5951: EQUAL
5952: IFFALSE 5987
// weapon := [ us_heavy_gun , us_gatling_gun , us_double_gun ] [ rand ( 1 , 3 ) ] else
5954: LD_ADDR_VAR 0 5
5958: PUSH
5959: LD_INT 6
5961: PUSH
5962: LD_INT 4
5964: PUSH
5965: LD_INT 5
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 1
5975: PPUSH
5976: LD_INT 3
5978: PPUSH
5979: CALL_OW 12
5983: ARRAY
5984: ST_TO_ADDR
5985: GO 6022
// weapon := [ us_heavy_gun , us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 4 ) ] ;
5987: LD_ADDR_VAR 0 5
5991: PUSH
5992: LD_INT 6
5994: PUSH
5995: LD_INT 5
5997: PUSH
5998: LD_INT 7
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 1
6012: PPUSH
6013: LD_INT 4
6015: PPUSH
6016: CALL_OW 12
6020: ARRAY
6021: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_manual , weapon , 30 ) ;
6022: LD_VAR 0 4
6026: PPUSH
6027: LD_INT 1
6029: PPUSH
6030: LD_INT 1
6032: PPUSH
6033: LD_VAR 0 5
6037: PPUSH
6038: LD_INT 30
6040: PPUSH
6041: CALL 19874 0 5
// veh := CreateVehicle ;
6045: LD_ADDR_VAR 0 3
6049: PUSH
6050: CALL_OW 45
6054: ST_TO_ADDR
// usAdditionalForces := Replace ( usAdditionalForces , usAdditionalForces + 1 , veh ) ;
6055: LD_ADDR_EXP 31
6059: PUSH
6060: LD_EXP 31
6064: PPUSH
6065: LD_EXP 31
6069: PUSH
6070: LD_INT 1
6072: PLUS
6073: PPUSH
6074: LD_VAR 0 3
6078: PPUSH
6079: CALL_OW 1
6083: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 4
6091: PPUSH
6092: CALL_OW 233
// PlaceUnitArea ( veh , americanEastArea , false ) ;
6096: LD_VAR 0 3
6100: PPUSH
6101: LD_INT 15
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_VAR 0 3
6120: PPUSH
6121: CALL_OW 52
// ComMoveXY ( veh , 153 , 45 ) ;
6125: LD_VAR 0 3
6129: PPUSH
6130: LD_INT 153
6132: PPUSH
6133: LD_INT 45
6135: PPUSH
6136: CALL_OW 111
// wait ( 0 0$2 ) ;
6140: LD_INT 70
6142: PPUSH
6143: CALL_OW 67
// end ;
6147: GO 5848
6149: POP
6150: POP
// repeat wait ( 0 0$1 ) ;
6151: LD_INT 35
6153: PPUSH
6154: CALL_OW 67
// usAdditionalForces := AgressiveMove ( usAdditionalForces , [ [ 150 , 36 ] , [ 138 , 25 ] ] ) ;
6158: LD_ADDR_EXP 31
6162: PUSH
6163: LD_EXP 31
6167: PPUSH
6168: LD_INT 150
6170: PUSH
6171: LD_INT 36
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 138
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PPUSH
6192: CALL 54142 0 2
6196: ST_TO_ADDR
// until not usAdditionalForces ;
6197: LD_EXP 31
6201: NOT
6202: IFFALSE 6151
// end ; end_of_file
6204: PPOPN 5
6206: END
// on UnitDestroyed ( un ) do begin if un = Heike then
6207: LD_VAR 0 1
6211: PUSH
6212: LD_EXP 12
6216: EQUAL
6217: IFFALSE 6226
// YouLost ( Heike ) ;
6219: LD_STRING Heike
6221: PPUSH
6222: CALL_OW 104
// if un = usCommander then
6226: LD_VAR 0 1
6230: PUSH
6231: LD_EXP 27
6235: EQUAL
6236: IFFALSE 6245
// YouLost ( Commander ) ;
6238: LD_STRING Commander
6240: PPUSH
6241: CALL_OW 104
// if GetSide ( un ) = 1 then
6245: LD_VAR 0 1
6249: PPUSH
6250: CALL_OW 255
6254: PUSH
6255: LD_INT 1
6257: EQUAL
6258: IFFALSE 6509
// begin if GetWeapon ( un ) = us_crane and IsOk ( amFac ) then
6260: LD_VAR 0 1
6264: PPUSH
6265: CALL_OW 264
6269: PUSH
6270: LD_INT 13
6272: EQUAL
6273: PUSH
6274: LD_INT 25
6276: PPUSH
6277: CALL_OW 302
6281: AND
6282: IFFALSE 6303
// AddComConstruct ( amFac , us_medium_wheeled , engine_solar , control_remote , us_crane ) ;
6284: LD_INT 25
6286: PPUSH
6287: LD_INT 2
6289: PPUSH
6290: LD_INT 2
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: LD_INT 13
6298: PPUSH
6299: CALL_OW 185
// if GetWeapon ( un ) = us_cargo_bay and IsOk ( amFac ) then
6303: LD_VAR 0 1
6307: PPUSH
6308: CALL_OW 264
6312: PUSH
6313: LD_INT 12
6315: EQUAL
6316: PUSH
6317: LD_INT 25
6319: PPUSH
6320: CALL_OW 302
6324: AND
6325: IFFALSE 6346
// AddComConstruct ( amFac , us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ) ;
6327: LD_INT 25
6329: PPUSH
6330: LD_INT 2
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_INT 2
6338: PPUSH
6339: LD_INT 12
6341: PPUSH
6342: CALL_OW 185
// if GetBType ( un ) = b_bunker then
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 266
6355: PUSH
6356: LD_INT 32
6358: EQUAL
6359: IFFALSE 6424
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_bunker , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6361: LD_ADDR_EXP 30
6365: PUSH
6366: LD_EXP 30
6370: PPUSH
6371: LD_EXP 30
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_INT 32
6382: PUSH
6383: LD_VAR 0 1
6387: PPUSH
6388: CALL_OW 250
6392: PUSH
6393: LD_VAR 0 1
6397: PPUSH
6398: CALL_OW 251
6402: PUSH
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL_OW 254
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 1
6423: ST_TO_ADDR
// if GetBType ( un ) in [ b_barracks , b_armoury ] then
6424: LD_VAR 0 1
6428: PPUSH
6429: CALL_OW 266
6433: PUSH
6434: LD_INT 5
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: IN
6444: IFFALSE 6509
// usToBuild := Replace ( usToBuild , usToBuild + 1 , [ b_armoury , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
6446: LD_ADDR_EXP 30
6450: PUSH
6451: LD_EXP 30
6455: PPUSH
6456: LD_EXP 30
6460: PUSH
6461: LD_INT 1
6463: PLUS
6464: PPUSH
6465: LD_INT 4
6467: PUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL_OW 250
6477: PUSH
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 251
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 254
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// end ; end ;
6509: PPOPN 1
6511: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 1 and GetTag ( un ) = 1 then
6512: LD_VAR 0 1
6516: PPUSH
6517: CALL_OW 255
6521: PUSH
6522: LD_INT 1
6524: EQUAL
6525: PUSH
6526: LD_VAR 0 1
6530: PPUSH
6531: CALL_OW 110
6535: PUSH
6536: LD_INT 1
6538: EQUAL
6539: AND
6540: IFFALSE 6554
// SetTag ( un , 0 ) ;
6542: LD_VAR 0 1
6546: PPUSH
6547: LD_INT 0
6549: PPUSH
6550: CALL_OW 109
// if GetSide ( un ) = 1 and GetWeapon ( un ) = us_heavy_gun and not seeHeavyGun then
6554: LD_VAR 0 1
6558: PPUSH
6559: CALL_OW 255
6563: PUSH
6564: LD_INT 1
6566: EQUAL
6567: PUSH
6568: LD_VAR 0 1
6572: PPUSH
6573: CALL_OW 264
6577: PUSH
6578: LD_INT 6
6580: EQUAL
6581: AND
6582: PUSH
6583: LD_EXP 11
6587: NOT
6588: AND
6589: IFFALSE 6599
// seeHeavyGun := true ;
6591: LD_ADDR_EXP 11
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// if GetControl ( un ) = control_remote and GetSide ( un ) <> 2 then
6599: LD_VAR 0 1
6603: PPUSH
6604: CALL_OW 263
6608: PUSH
6609: LD_INT 2
6611: EQUAL
6612: PUSH
6613: LD_VAR 0 1
6617: PPUSH
6618: CALL_OW 255
6622: PUSH
6623: LD_INT 2
6625: NONEQUAL
6626: AND
6627: IFFALSE 6653
// begin ComUnlink ( un ) ;
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 136
// if not seeRemoteVehicle then
6638: LD_EXP 10
6642: NOT
6643: IFFALSE 6653
// seeRemoteVehicle := true ;
6645: LD_ADDR_EXP 10
6649: PUSH
6650: LD_INT 1
6652: ST_TO_ADDR
// end ; end ;
6653: PPOPN 1
6655: END
// on BuildingComplete ( b ) do var i , barracks ;
6656: LD_INT 0
6658: PPUSH
6659: PPUSH
// begin if GetSide ( b ) = 1 then
6660: LD_VAR 0 1
6664: PPUSH
6665: CALL_OW 255
6669: PUSH
6670: LD_INT 1
6672: EQUAL
6673: IFFALSE 6825
// begin usToBuild := Delete ( usToBuild , 1 ) ;
6675: LD_ADDR_EXP 30
6679: PUSH
6680: LD_EXP 30
6684: PPUSH
6685: LD_INT 1
6687: PPUSH
6688: CALL_OW 3
6692: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
6693: LD_VAR 0 1
6697: PPUSH
6698: CALL_OW 266
6702: PUSH
6703: LD_INT 4
6705: EQUAL
6706: IFFALSE 6717
// ComUpgrade ( b ) ;
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 146
// if GetBType ( b ) = b_bunker then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 266
6726: PUSH
6727: LD_INT 32
6729: EQUAL
6730: IFFALSE 6825
// begin AddComPlaceWeapon ( b , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
6732: LD_VAR 0 1
6736: PPUSH
6737: LD_INT 6
6739: PUSH
6740: LD_INT 7
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 1
6749: PPUSH
6750: LD_INT 2
6752: PPUSH
6753: CALL_OW 12
6757: ARRAY
6758: PPUSH
6759: CALL_OW 208
// barracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_INT 22
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 5
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PPUSH
6792: CALL_OW 69
6796: ST_TO_ADDR
// if barracks then
6797: LD_VAR 0 3
6801: IFFALSE 6825
// ComExitBuilding ( UnitsInside ( barracks [ 1 ] ) [ 1 ] ) ;
6803: LD_VAR 0 3
6807: PUSH
6808: LD_INT 1
6810: ARRAY
6811: PPUSH
6812: CALL_OW 313
6816: PUSH
6817: LD_INT 1
6819: ARRAY
6820: PPUSH
6821: CALL_OW 122
// end ; end ; end ;
6825: PPOPN 3
6827: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = 1 then
6828: LD_VAR 0 2
6832: PPUSH
6833: CALL_OW 255
6837: PUSH
6838: LD_INT 1
6840: EQUAL
6841: IFFALSE 6920
// begin if GetWeapon ( vehicle ) = us_cargo_bay then
6843: LD_VAR 0 1
6847: PPUSH
6848: CALL_OW 264
6852: PUSH
6853: LD_INT 12
6855: EQUAL
6856: IFFALSE 6868
// usCargo := vehicle ;
6858: LD_ADDR_EXP 29
6862: PUSH
6863: LD_VAR 0 1
6867: ST_TO_ADDR
// if not GetWeapon ( vehicle ) in [ us_cargo_bay , us_crane ] then
6868: LD_VAR 0 1
6872: PPUSH
6873: CALL_OW 264
6877: PUSH
6878: LD_INT 12
6880: PUSH
6881: LD_INT 13
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: IN
6888: NOT
6889: IFFALSE 6920
// usForces := Replace ( usForces , usForces + 1 , vehicle ) ;
6891: LD_ADDR_EXP 28
6895: PUSH
6896: LD_EXP 28
6900: PPUSH
6901: LD_EXP 28
6905: PUSH
6906: LD_INT 1
6908: PLUS
6909: PPUSH
6910: LD_VAR 0 1
6914: PPUSH
6915: CALL_OW 1
6919: ST_TO_ADDR
// end ; end ;
6920: PPOPN 2
6922: END
// on EvacuateVehicle ( un , veh , p1 , p2 ) do begin if GetSide ( veh ) = 1 then
6923: LD_VAR 0 2
6927: PPUSH
6928: CALL_OW 255
6932: PUSH
6933: LD_INT 1
6935: EQUAL
6936: IFFALSE 6950
// AddComEnterUnit ( un , amFac ) ;
6938: LD_VAR 0 1
6942: PPUSH
6943: LD_INT 25
6945: PPUSH
6946: CALL_OW 180
// end ;
6950: PPOPN 4
6952: END
// on EvacuateBuilding ( b , un ) do begin if GetSide ( b ) = 1 and GetBType ( b ) = b_bunker and GetClass ( un ) in [ class_soldier , class_sniper ] and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] , [ f_ok ] ] ) then
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL_OW 255
6962: PUSH
6963: LD_INT 1
6965: EQUAL
6966: PUSH
6967: LD_VAR 0 1
6971: PPUSH
6972: CALL_OW 266
6976: PUSH
6977: LD_INT 32
6979: EQUAL
6980: AND
6981: PUSH
6982: LD_VAR 0 2
6986: PPUSH
6987: CALL_OW 257
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: LD_INT 5
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: IN
7002: AND
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_INT 1
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 5
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 50
7026: PUSH
7027: EMPTY
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PPUSH
7035: CALL_OW 69
7039: AND
7040: IFFALSE 7110
// if UnitsInside ( HexInfo ( 74 , 120 ) ) < 6 then
7042: LD_INT 74
7044: PPUSH
7045: LD_INT 120
7047: PPUSH
7048: CALL_OW 428
7052: PPUSH
7053: CALL_OW 313
7057: PUSH
7058: LD_INT 6
7060: LESS
7061: IFFALSE 7110
// begin ComEnterUnit ( un , HexInfo ( 74 , 120 ) ) ;
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_INT 74
7070: PPUSH
7071: LD_INT 120
7073: PPUSH
7074: CALL_OW 428
7078: PPUSH
7079: CALL_OW 120
// if GetClass ( un ) = class_soldier then
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 257
7092: PUSH
7093: LD_INT 1
7095: EQUAL
7096: IFFALSE 7110
// AddComChangeProfession ( un , class_sniper ) ;
7098: LD_VAR 0 2
7102: PPUSH
7103: LD_INT 5
7105: PPUSH
7106: CALL_OW 183
// end ; end ; end_of_file
7110: PPOPN 2
7112: END
// export function Action ; var i , j , veh , tmp , hasEng , hasCamera , driver ; begin
7113: LD_INT 0
7115: PPUSH
7116: PPUSH
7117: PPUSH
7118: PPUSH
7119: PPUSH
7120: PPUSH
7121: PPUSH
7122: PPUSH
// Video ( true ) ;
7123: LD_INT 1
7125: PPUSH
7126: CALL 51719 0 1
// music_nat := 1 ;
7130: LD_ADDR_OWVAR 71
7134: PUSH
7135: LD_INT 1
7137: ST_TO_ADDR
// music_class := music_recon ;
7138: LD_ADDR_OWVAR 72
7142: PUSH
7143: LD_INT 3
7145: ST_TO_ADDR
// PlaceSeeing ( 184 , 142 , 2 , - 10 ) ;
7146: LD_INT 184
7148: PPUSH
7149: LD_INT 142
7151: PPUSH
7152: LD_INT 2
7154: PPUSH
7155: LD_INT 10
7157: NEG
7158: PPUSH
7159: CALL_OW 330
// RemoveSeeing ( 184 , 142 , 2 ) ;
7163: LD_INT 184
7165: PPUSH
7166: LD_INT 142
7168: PPUSH
7169: LD_INT 2
7171: PPUSH
7172: CALL_OW 331
// PlaceSeeing ( 204 , 151 , 2 , - 10 ) ;
7176: LD_INT 204
7178: PPUSH
7179: LD_INT 151
7181: PPUSH
7182: LD_INT 2
7184: PPUSH
7185: LD_INT 10
7187: NEG
7188: PPUSH
7189: CALL_OW 330
// RemoveSeeing ( 204 , 151 , 2 ) ;
7193: LD_INT 204
7195: PPUSH
7196: LD_INT 151
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 331
// CenterNowOnXY ( 184 , 142 ) ;
7206: LD_INT 184
7208: PPUSH
7209: LD_INT 142
7211: PPUSH
7212: CALL_OW 86
// wait ( 0 0$2 ) ;
7216: LD_INT 70
7218: PPUSH
7219: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
7223: LD_ADDR_VAR 0 5
7227: PUSH
7228: LD_EXP 12
7232: PUSH
7233: LD_EXP 13
7237: PUSH
7238: LD_EXP 14
7242: PUSH
7243: LD_EXP 15
7247: PUSH
7248: LD_EXP 16
7252: PUSH
7253: LD_EXP 17
7257: PUSH
7258: LD_EXP 18
7262: PUSH
7263: LD_EXP 19
7267: PUSH
7268: LD_EXP 21
7272: PUSH
7273: LD_EXP 22
7277: PUSH
7278: LD_EXP 23
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: LD_EXP 24
7300: UNION
7301: ST_TO_ADDR
// hasEng := UnitFilter ( tmp , [ f_class , 2 ] ) > 0 ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_VAR 0 5
7311: PPUSH
7312: LD_INT 25
7314: PUSH
7315: LD_INT 2
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 72
7326: PUSH
7327: LD_INT 0
7329: GREATER
7330: ST_TO_ADDR
// hasCamera := false ;
7331: LD_ADDR_VAR 0 7
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// if not hasEng then
7339: LD_VAR 0 6
7343: NOT
7344: IFFALSE 7372
// SetClass ( tmp [ rand ( 1 , tmp ) ] , class_engineer ) ;
7346: LD_VAR 0 5
7350: PUSH
7351: LD_INT 1
7353: PPUSH
7354: LD_VAR 0 5
7358: PPUSH
7359: CALL_OW 12
7363: ARRAY
7364: PPUSH
7365: LD_INT 2
7367: PPUSH
7368: CALL_OW 336
// if heikeVehicles then
7372: LD_EXP 26
7376: IFFALSE 7990
// begin tmp := SortByClass ( tmp , class_mechanic ) ;
7378: LD_ADDR_VAR 0 5
7382: PUSH
7383: LD_VAR 0 5
7387: PPUSH
7388: LD_INT 3
7390: PPUSH
7391: CALL 53764 0 2
7395: ST_TO_ADDR
// for i in heikeVehicles do
7396: LD_ADDR_VAR 0 2
7400: PUSH
7401: LD_EXP 26
7405: PUSH
7406: FOR_IN
7407: IFFALSE 7988
// begin if not tmp then
7409: LD_VAR 0 5
7413: NOT
7414: IFFALSE 7418
// break ;
7416: GO 7988
// uc_side := 2 ;
7418: LD_ADDR_OWVAR 20
7422: PUSH
7423: LD_INT 2
7425: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
7426: LD_ADDR_OWVAR 21
7430: PUSH
7431: LD_VAR 0 2
7435: PUSH
7436: LD_INT 5
7438: ARRAY
7439: ST_TO_ADDR
// vc_chassis := i [ 1 ] ;
7440: LD_ADDR_OWVAR 37
7444: PUSH
7445: LD_VAR 0 2
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: ST_TO_ADDR
// vc_engine := i [ 2 ] ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_VAR 0 2
7463: PUSH
7464: LD_INT 2
7466: ARRAY
7467: ST_TO_ADDR
// vc_control := i [ 3 ] ;
7468: LD_ADDR_OWVAR 38
7472: PUSH
7473: LD_VAR 0 2
7477: PUSH
7478: LD_INT 3
7480: ARRAY
7481: ST_TO_ADDR
// vc_weapon := i [ 4 ] ;
7482: LD_ADDR_OWVAR 40
7486: PUSH
7487: LD_VAR 0 2
7491: PUSH
7492: LD_INT 4
7494: ARRAY
7495: ST_TO_ADDR
// veh := CreateVehicle ;
7496: LD_ADDR_VAR 0 4
7500: PUSH
7501: CALL_OW 45
7505: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7506: LD_VAR 0 4
7510: PPUSH
7511: LD_INT 4
7513: PPUSH
7514: CALL_OW 233
// if i [ 3 ] = control_manual then
7518: LD_VAR 0 2
7522: PUSH
7523: LD_INT 3
7525: ARRAY
7526: PUSH
7527: LD_INT 1
7529: EQUAL
7530: IFFALSE 7615
// begin PlaceUnitArea ( veh , startArea , false ) ;
7532: LD_VAR 0 4
7536: PPUSH
7537: LD_INT 1
7539: PPUSH
7540: LD_INT 0
7542: PPUSH
7543: CALL_OW 49
// if i [ 4 ] = ar_control_tower then
7547: LD_VAR 0 2
7551: PUSH
7552: LD_INT 4
7554: ARRAY
7555: PUSH
7556: LD_INT 31
7558: EQUAL
7559: IFFALSE 7577
// SetClass ( tmp [ 1 ] , class_mechanic ) ;
7561: LD_VAR 0 5
7565: PUSH
7566: LD_INT 1
7568: ARRAY
7569: PPUSH
7570: LD_INT 3
7572: PPUSH
7573: CALL_OW 336
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
7577: LD_VAR 0 5
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: PPUSH
7586: LD_VAR 0 4
7590: PPUSH
7591: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
7595: LD_ADDR_VAR 0 5
7599: PUSH
7600: LD_VAR 0 5
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL_OW 3
7612: ST_TO_ADDR
// end else
7613: GO 7676
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
7615: LD_INT 22
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: LD_INT 31
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: IFFALSE 7676
// begin PlaceUnitArea ( veh , startArea , false ) ;
7645: LD_VAR 0 4
7649: PPUSH
7650: LD_INT 1
7652: PPUSH
7653: LD_INT 0
7655: PPUSH
7656: CALL_OW 49
// Connect ( veh ) ;
7660: LD_VAR 0 4
7664: PPUSH
7665: CALL 22967 0 1
// wait ( 0 0$2 ) ;
7669: LD_INT 70
7671: PPUSH
7672: CALL_OW 67
// end ; SetLives ( veh , i [ 6 ] ) ;
7676: LD_VAR 0 4
7680: PPUSH
7681: LD_VAR 0 2
7685: PUSH
7686: LD_INT 6
7688: ARRAY
7689: PPUSH
7690: CALL_OW 234
// SetFuel ( veh , 20 ) ;
7694: LD_VAR 0 4
7698: PPUSH
7699: LD_INT 20
7701: PPUSH
7702: CALL_OW 240
// if i [ 7 ] and GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay ] then
7706: LD_VAR 0 2
7710: PUSH
7711: LD_INT 7
7713: ARRAY
7714: PUSH
7715: LD_VAR 0 4
7719: PPUSH
7720: CALL_OW 264
7724: PUSH
7725: LD_INT 51
7727: PUSH
7728: LD_INT 32
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: IN
7735: AND
7736: IFFALSE 7787
// begin for j := 1 to 2 do
7738: LD_ADDR_VAR 0 3
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 2
7750: PUSH
7751: FOR_TO
7752: IFFALSE 7785
// AddCargo ( veh , j , i [ 7 ] [ j ] ) ;
7754: LD_VAR 0 4
7758: PPUSH
7759: LD_VAR 0 3
7763: PPUSH
7764: LD_VAR 0 2
7768: PUSH
7769: LD_INT 7
7771: ARRAY
7772: PUSH
7773: LD_VAR 0 3
7777: ARRAY
7778: PPUSH
7779: CALL_OW 291
7783: GO 7751
7785: POP
7786: POP
// end ; ComMoveXY ( veh , 185 , 144 ) ;
7787: LD_VAR 0 4
7791: PPUSH
7792: LD_INT 185
7794: PPUSH
7795: LD_INT 144
7797: PPUSH
7798: CALL_OW 111
// if GetControl ( veh ) = control_manual and not hasCamera and GetClass ( IsDrivenBy ( veh ) ) = 2 then
7802: LD_VAR 0 4
7806: PPUSH
7807: CALL_OW 263
7811: PUSH
7812: LD_INT 1
7814: EQUAL
7815: PUSH
7816: LD_VAR 0 7
7820: NOT
7821: AND
7822: PUSH
7823: LD_VAR 0 4
7827: PPUSH
7828: CALL_OW 311
7832: PPUSH
7833: CALL_OW 257
7837: PUSH
7838: LD_INT 2
7840: EQUAL
7841: AND
7842: IFFALSE 7937
// begin hasCamera := true ;
7844: LD_ADDR_VAR 0 7
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// driver := IsDrivenBy ( veh ) ;
7852: LD_ADDR_VAR 0 8
7856: PUSH
7857: LD_VAR 0 4
7861: PPUSH
7862: CALL_OW 311
7866: ST_TO_ADDR
// AddComMoveXY ( veh , 177 , 138 ) ;
7867: LD_VAR 0 4
7871: PPUSH
7872: LD_INT 177
7874: PPUSH
7875: LD_INT 138
7877: PPUSH
7878: CALL_OW 171
// AddComExitVehicle ( driver ) ;
7882: LD_VAR 0 8
7886: PPUSH
7887: CALL_OW 181
// AddComHiddenCamera ( driver , 190 , 150 ) ;
7891: LD_VAR 0 8
7895: PPUSH
7896: LD_INT 190
7898: PPUSH
7899: LD_INT 150
7901: PPUSH
7902: CALL_OW 217
// AddComEnterUnit ( driver , veh ) ;
7906: LD_VAR 0 8
7910: PPUSH
7911: LD_VAR 0 4
7915: PPUSH
7916: CALL_OW 180
// AddComMoveXY ( driver , 170 , 103 ) ;
7920: LD_VAR 0 8
7924: PPUSH
7925: LD_INT 170
7927: PPUSH
7928: LD_INT 103
7930: PPUSH
7931: CALL_OW 171
// end else
7935: GO 7979
// begin AddComWait ( veh , 0 0$2 ) ;
7937: LD_VAR 0 4
7941: PPUSH
7942: LD_INT 70
7944: PPUSH
7945: CALL_OW 202
// AddComMoveXY ( veh , 179 , 129 ) ;
7949: LD_VAR 0 4
7953: PPUSH
7954: LD_INT 179
7956: PPUSH
7957: LD_INT 129
7959: PPUSH
7960: CALL_OW 171
// AddComMoveXY ( veh , 170 , 103 ) ;
7964: LD_VAR 0 4
7968: PPUSH
7969: LD_INT 170
7971: PPUSH
7972: LD_INT 103
7974: PPUSH
7975: CALL_OW 171
// end ; wait ( 0 0$2 ) ;
7979: LD_INT 70
7981: PPUSH
7982: CALL_OW 67
// end ;
7986: GO 7406
7988: POP
7989: POP
// end ; if tmp then
7990: LD_VAR 0 5
7994: IFFALSE 8139
// begin for i in tmp do
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_VAR 0 5
8005: PUSH
8006: FOR_IN
8007: IFFALSE 8137
// begin SetDir ( i , 4 ) ;
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_INT 4
8016: PPUSH
8017: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8021: LD_VAR 0 2
8025: PPUSH
8026: LD_INT 1
8028: PPUSH
8029: LD_INT 0
8031: PPUSH
8032: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8036: LD_VAR 0 2
8040: PPUSH
8041: LD_INT 185
8043: PPUSH
8044: LD_INT 144
8046: PPUSH
8047: CALL_OW 111
// if GetClass ( i ) = 2 and not hasCamera then
8051: LD_VAR 0 2
8055: PPUSH
8056: CALL_OW 257
8060: PUSH
8061: LD_INT 2
8063: EQUAL
8064: PUSH
8065: LD_VAR 0 7
8069: NOT
8070: AND
8071: IFFALSE 8098
// begin hasCamera := true ;
8073: LD_ADDR_VAR 0 7
8077: PUSH
8078: LD_INT 1
8080: ST_TO_ADDR
// AddComHiddenCamera ( i , 190 , 150 ) ;
8081: LD_VAR 0 2
8085: PPUSH
8086: LD_INT 190
8088: PPUSH
8089: LD_INT 150
8091: PPUSH
8092: CALL_OW 217
// end else
8096: GO 8113
// AddComMoveXY ( i , 179 , 129 ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 179
8105: PPUSH
8106: LD_INT 129
8108: PPUSH
8109: CALL_OW 171
// AddComMoveXY ( i , 170 , 103 ) ;
8113: LD_VAR 0 2
8117: PPUSH
8118: LD_INT 170
8120: PPUSH
8121: LD_INT 103
8123: PPUSH
8124: CALL_OW 171
// wait ( 0 0$2 ) ;
8128: LD_INT 70
8130: PPUSH
8131: CALL_OW 67
// end ;
8135: GO 8006
8137: POP
8138: POP
// end ; if heikeApes then
8139: LD_EXP 25
8143: IFFALSE 8226
// begin for i in heikeApes do
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_EXP 25
8154: PUSH
8155: FOR_IN
8156: IFFALSE 8224
// begin SetDir ( i , 4 ) ;
8158: LD_VAR 0 2
8162: PPUSH
8163: LD_INT 4
8165: PPUSH
8166: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
8170: LD_VAR 0 2
8174: PPUSH
8175: LD_INT 1
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 49
// ComMoveXY ( i , 185 , 144 ) ;
8185: LD_VAR 0 2
8189: PPUSH
8190: LD_INT 185
8192: PPUSH
8193: LD_INT 144
8195: PPUSH
8196: CALL_OW 111
// AddComMoveXY ( i , 170 , 103 ) ;
8200: LD_VAR 0 2
8204: PPUSH
8205: LD_INT 170
8207: PPUSH
8208: LD_INT 103
8210: PPUSH
8211: CALL_OW 171
// wait ( 0 0$2 ) ;
8215: LD_INT 70
8217: PPUSH
8218: CALL_OW 67
// end ;
8222: GO 8155
8224: POP
8225: POP
// end ; AddComMoveXY ( Heike , 163 , 89 ) ;
8226: LD_EXP 12
8230: PPUSH
8231: LD_INT 163
8233: PPUSH
8234: LD_INT 89
8236: PPUSH
8237: CALL_OW 171
// wait ( 0 0$2 ) ;
8241: LD_INT 70
8243: PPUSH
8244: CALL_OW 67
// CenterOnXY ( 175 , 117 ) ;
8248: LD_INT 175
8250: PPUSH
8251: LD_INT 117
8253: PPUSH
8254: CALL_OW 84
// CenterOnUnits ( Heike ) ;
8258: LD_EXP 12
8262: PPUSH
8263: CALL_OW 85
// Say ( Heike , DH-Intro-1 ) ;
8267: LD_EXP 12
8271: PPUSH
8272: LD_STRING DH-Intro-1
8274: PPUSH
8275: CALL_OW 88
// if Markov then
8279: LD_EXP 19
8283: IFFALSE 8850
// begin Say ( Markov , DMar-Intro-2 ) ;
8285: LD_EXP 19
8289: PPUSH
8290: LD_STRING DMar-Intro-2
8292: PPUSH
8293: CALL_OW 88
// Say ( Markov , DMar-Intro-3 ) ;
8297: LD_EXP 19
8301: PPUSH
8302: LD_STRING DMar-Intro-3
8304: PPUSH
8305: CALL_OW 88
// wait ( 0 0$1 ) ;
8309: LD_INT 35
8311: PPUSH
8312: CALL_OW 67
// CenterOnUnits ( Heike ) ;
8316: LD_EXP 12
8320: PPUSH
8321: CALL_OW 85
// if Kurt then
8325: LD_EXP 22
8329: IFFALSE 8381
// begin if IsInUnit ( Kurt ) then
8331: LD_EXP 22
8335: PPUSH
8336: CALL_OW 310
8340: IFFALSE 8351
// ComExit ( Kurt ) ;
8342: LD_EXP 22
8346: PPUSH
8347: CALL 52135 0 1
// AddComMoveXY ( Kurt , 130 , 56 ) ;
8351: LD_EXP 22
8355: PPUSH
8356: LD_INT 130
8358: PPUSH
8359: LD_INT 56
8361: PPUSH
8362: CALL_OW 171
// AddComTurnXY ( Kurt , 129 , 56 ) ;
8366: LD_EXP 22
8370: PPUSH
8371: LD_INT 129
8373: PPUSH
8374: LD_INT 56
8376: PPUSH
8377: CALL_OW 178
// end ; if Kaia then
8381: LD_EXP 17
8385: IFFALSE 8565
// begin Say ( Kaia , DK-Intro-4 ) ;
8387: LD_EXP 17
8391: PPUSH
8392: LD_STRING DK-Intro-4
8394: PPUSH
8395: CALL_OW 88
// Say ( Markov , DMar-Intro-5 ) ;
8399: LD_EXP 19
8403: PPUSH
8404: LD_STRING DMar-Intro-5
8406: PPUSH
8407: CALL_OW 88
// Say ( Markov , DMar-Intro-6 ) ;
8411: LD_EXP 19
8415: PPUSH
8416: LD_STRING DMar-Intro-6
8418: PPUSH
8419: CALL_OW 88
// Say ( Olaf , DO-Intro-7 ) ;
8423: LD_EXP 21
8427: PPUSH
8428: LD_STRING DO-Intro-7
8430: PPUSH
8431: CALL_OW 88
// CenterOnXY ( 160 , 85 ) ;
8435: LD_INT 160
8437: PPUSH
8438: LD_INT 85
8440: PPUSH
8441: CALL_OW 84
// Say ( Markov , DMar-Intro-8 ) ;
8445: LD_EXP 19
8449: PPUSH
8450: LD_STRING DMar-Intro-8
8452: PPUSH
8453: CALL_OW 88
// Say ( Markov , DMar-Intro-9 ) ;
8457: LD_EXP 19
8461: PPUSH
8462: LD_STRING DMar-Intro-9
8464: PPUSH
8465: CALL_OW 88
// Say ( Markov , DMar-Intro-10 ) ;
8469: LD_EXP 19
8473: PPUSH
8474: LD_STRING DMar-Intro-10
8476: PPUSH
8477: CALL_OW 88
// Say ( Markov , DMar-Intro-11 ) ;
8481: LD_EXP 19
8485: PPUSH
8486: LD_STRING DMar-Intro-11
8488: PPUSH
8489: CALL_OW 88
// Say ( Givi , DG-Intro-12 ) ;
8493: LD_EXP 13
8497: PPUSH
8498: LD_STRING DG-Intro-12
8500: PPUSH
8501: CALL_OW 88
// Say ( Givi , DG-Intro-13 ) ;
8505: LD_EXP 13
8509: PPUSH
8510: LD_STRING DG-Intro-13
8512: PPUSH
8513: CALL_OW 88
// Say ( Givi , DG-Intro-14 ) ;
8517: LD_EXP 13
8521: PPUSH
8522: LD_STRING DG-Intro-14
8524: PPUSH
8525: CALL_OW 88
// Say ( Givi , DG-Intro-15 ) ;
8529: LD_EXP 13
8533: PPUSH
8534: LD_STRING DG-Intro-15
8536: PPUSH
8537: CALL_OW 88
// Say ( Heike , DH-Intro-16 ) ;
8541: LD_EXP 12
8545: PPUSH
8546: LD_STRING DH-Intro-16
8548: PPUSH
8549: CALL_OW 88
// Say ( Markov , DMar-Intro-17 ) ;
8553: LD_EXP 19
8557: PPUSH
8558: LD_STRING DMar-Intro-17
8560: PPUSH
8561: CALL_OW 88
// end ; if Kurt and Mike then
8565: LD_EXP 22
8569: PUSH
8570: LD_EXP 14
8574: AND
8575: IFFALSE 8850
// begin CenterNowOnUnits ( Kurt ) ;
8577: LD_EXP 22
8581: PPUSH
8582: CALL_OW 87
// ComTurnUnit ( Kurt , Heike ) ;
8586: LD_EXP 22
8590: PPUSH
8591: LD_EXP 12
8595: PPUSH
8596: CALL_OW 119
// Say ( Kurt , DKs-Intro-18 ) ;
8600: LD_EXP 22
8604: PPUSH
8605: LD_STRING DKs-Intro-18
8607: PPUSH
8608: CALL_OW 88
// Say ( Kurt , DKs-Intro-19 ) ;
8612: LD_EXP 22
8616: PPUSH
8617: LD_STRING DKs-Intro-19
8619: PPUSH
8620: CALL_OW 88
// CenterNowOnUnits ( Mike ) ;
8624: LD_EXP 14
8628: PPUSH
8629: CALL_OW 87
// if IsInUnit ( Mike ) then
8633: LD_EXP 14
8637: PPUSH
8638: CALL_OW 310
8642: IFFALSE 8653
// ComExit ( Mike ) ;
8644: LD_EXP 14
8648: PPUSH
8649: CALL 52135 0 1
// AddComMoveXY ( Mike , 129 , 53 ) ;
8653: LD_EXP 14
8657: PPUSH
8658: LD_INT 129
8660: PPUSH
8661: LD_INT 53
8663: PPUSH
8664: CALL_OW 171
// AddComHold ( Mike ) ;
8668: LD_EXP 14
8672: PPUSH
8673: CALL_OW 200
// wait ( 0 0$2 ) ;
8677: LD_INT 70
8679: PPUSH
8680: CALL_OW 67
// Say ( Mike , DM-Intro-20 ) ;
8684: LD_EXP 14
8688: PPUSH
8689: LD_STRING DM-Intro-20
8691: PPUSH
8692: CALL_OW 88
// scoutActive := Query ( Scout ) ;
8696: LD_ADDR_EXP 3
8700: PUSH
8701: LD_STRING Scout
8703: PPUSH
8704: CALL_OW 97
8708: ST_TO_ADDR
// if scoutActive = 1 then
8709: LD_EXP 3
8713: PUSH
8714: LD_INT 1
8716: EQUAL
8717: IFFALSE 8814
// begin CenterNowOnUnits ( Kurt ) ;
8719: LD_EXP 22
8723: PPUSH
8724: CALL_OW 87
// Say ( Heike , DH-Intro-21 ) ;
8728: LD_EXP 12
8732: PPUSH
8733: LD_STRING DH-Intro-21
8735: PPUSH
8736: CALL_OW 88
// Say ( Mike , DM-Intro-22 ) ;
8740: LD_EXP 14
8744: PPUSH
8745: LD_STRING DM-Intro-22
8747: PPUSH
8748: CALL_OW 88
// Say ( Kurt , DKs-Intro-23 ) ;
8752: LD_EXP 22
8756: PPUSH
8757: LD_STRING DKs-Intro-23
8759: PPUSH
8760: CALL_OW 88
// SetSide ( Kurt , 5 ) ;
8764: LD_EXP 22
8768: PPUSH
8769: LD_INT 5
8771: PPUSH
8772: CALL_OW 235
// SetSide ( Mike , 5 ) ;
8776: LD_EXP 14
8780: PPUSH
8781: LD_INT 5
8783: PPUSH
8784: CALL_OW 235
// ComMoveXY ( [ Kurt , Mike ] , 104 , 66 ) ;
8788: LD_EXP 22
8792: PUSH
8793: LD_EXP 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PPUSH
8802: LD_INT 104
8804: PPUSH
8805: LD_INT 66
8807: PPUSH
8808: CALL_OW 111
// end else
8812: GO 8850
// begin Say ( Heike , DH-Intro-a-21 ) ;
8814: LD_EXP 12
8818: PPUSH
8819: LD_STRING DH-Intro-a-21
8821: PPUSH
8822: CALL_OW 88
// Say ( Mike , DM-Intro-a-22 ) ;
8826: LD_EXP 14
8830: PPUSH
8831: LD_STRING DM-Intro-a-22
8833: PPUSH
8834: CALL_OW 88
// Say ( Kurt , DKs-Intro-a-23 ) ;
8838: LD_EXP 22
8842: PPUSH
8843: LD_STRING DKs-Intro-a-23
8845: PPUSH
8846: CALL_OW 88
// end ; end ; end ; Video ( false ) ;
8850: LD_INT 0
8852: PPUSH
8853: CALL 51719 0 1
// music_nat := music_auto ;
8857: LD_ADDR_OWVAR 71
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// music_class := music_auto ;
8865: LD_ADDR_OWVAR 72
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
8873: LD_STRING M1
8875: PPUSH
8876: CALL_OW 337
// wait ( 0 0$3 ) ;
8880: LD_INT 105
8882: PPUSH
8883: CALL_OW 67
// Say ( Heike , DH-Base-1 ) ;
8887: LD_EXP 12
8891: PPUSH
8892: LD_STRING DH-Base-1
8894: PPUSH
8895: CALL_OW 88
// if Kaia then
8899: LD_EXP 17
8903: IFFALSE 9013
// begin Say ( Kaia , DK-Base-2 ) ;
8905: LD_EXP 17
8909: PPUSH
8910: LD_STRING DK-Base-2
8912: PPUSH
8913: CALL_OW 88
// Say ( Heike , DH-Base-3 ) ;
8917: LD_EXP 12
8921: PPUSH
8922: LD_STRING DH-Base-3
8924: PPUSH
8925: CALL_OW 88
// if Aviradze then
8929: LD_EXP 23
8933: IFFALSE 9013
// begin Say ( Aviradze , DA-Base-4 ) ;
8935: LD_EXP 23
8939: PPUSH
8940: LD_STRING DA-Base-4
8942: PPUSH
8943: CALL_OW 88
// Say ( Kaia , DK-Base-5 ) ;
8947: LD_EXP 17
8951: PPUSH
8952: LD_STRING DK-Base-5
8954: PPUSH
8955: CALL_OW 88
// if Markov then
8959: LD_EXP 19
8963: IFFALSE 9013
// begin Say ( Markov , DMar-Base-6 ) ;
8965: LD_EXP 19
8969: PPUSH
8970: LD_STRING DMar-Base-6
8972: PPUSH
8973: CALL_OW 88
// Say ( Kaia , DK-Base-7 ) ;
8977: LD_EXP 17
8981: PPUSH
8982: LD_STRING DK-Base-7
8984: PPUSH
8985: CALL_OW 88
// Say ( Markov , DMar-Base-8 ) ;
8989: LD_EXP 19
8993: PPUSH
8994: LD_STRING DMar-Base-8
8996: PPUSH
8997: CALL_OW 88
// Say ( Markov , DMar-Base-9 ) ;
9001: LD_EXP 19
9005: PPUSH
9006: LD_STRING DMar-Base-9
9008: PPUSH
9009: CALL_OW 88
// end ; end ; end ; SaveForQuickRestart ;
9013: CALL_OW 22
// end ;
9017: LD_VAR 0 1
9021: RET
// every 0 0$1 trigger scoutSuccess do var i , tmp ;
9022: LD_EXP 5
9026: IFFALSE 10130
9028: GO 9030
9030: DISABLE
9031: LD_INT 0
9033: PPUSH
9034: PPUSH
// begin InGameOn ;
9035: CALL_OW 8
// ComTurnUnit ( [ Mike , Kurt ] , Heike ) ;
9039: LD_EXP 14
9043: PUSH
9044: LD_EXP 22
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PPUSH
9053: LD_EXP 12
9057: PPUSH
9058: CALL_OW 119
// ComExit ( Heike ) ;
9062: LD_EXP 12
9066: PPUSH
9067: CALL 52135 0 1
// if IsOk ( Mike ) then
9071: LD_EXP 14
9075: PPUSH
9076: CALL_OW 302
9080: IFFALSE 9098
// AddComTurnUnit ( Heike , Mike ) else
9082: LD_EXP 12
9086: PPUSH
9087: LD_EXP 14
9091: PPUSH
9092: CALL_OW 179
9096: GO 9112
// AddComTurnUnit ( Heike , Kurt ) ;
9098: LD_EXP 12
9102: PPUSH
9103: LD_EXP 22
9107: PPUSH
9108: CALL_OW 179
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9112: LD_EXP 14
9116: PPUSH
9117: CALL_OW 302
9121: PUSH
9122: LD_EXP 22
9126: PPUSH
9127: CALL_OW 302
9131: AND
9132: IFFALSE 9383
// begin CenterNowOnUnits ( Mike ) ;
9134: LD_EXP 14
9138: PPUSH
9139: CALL_OW 87
// Say ( Mike , DM-Scout-1 ) ;
9143: LD_EXP 14
9147: PPUSH
9148: LD_STRING DM-Scout-1
9150: PPUSH
9151: CALL_OW 88
// Say ( Heike , DH-Scout-2 ) ;
9155: LD_EXP 12
9159: PPUSH
9160: LD_STRING DH-Scout-2
9162: PPUSH
9163: CALL_OW 88
// Say ( Kurt , DKs-Scout-3 ) ;
9167: LD_EXP 22
9171: PPUSH
9172: LD_STRING DKs-Scout-3
9174: PPUSH
9175: CALL_OW 88
// Say ( Heike , DH-Scout-4 ) ;
9179: LD_EXP 12
9183: PPUSH
9184: LD_STRING DH-Scout-4
9186: PPUSH
9187: CALL_OW 88
// Say ( Heike , DH-Scout-5 ) ;
9191: LD_EXP 12
9195: PPUSH
9196: LD_STRING DH-Scout-5
9198: PPUSH
9199: CALL_OW 88
// tmp := [ [ 72 , 122 ] , [ 89 , 131 ] , [ 99 , 139 ] , [ 100 , 148 ] ] ;
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: LD_INT 72
9210: PUSH
9211: LD_INT 122
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 89
9220: PUSH
9221: LD_INT 131
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 99
9230: PUSH
9231: LD_INT 139
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 100
9240: PUSH
9241: LD_INT 148
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: ST_TO_ADDR
// for i in tmp do
9254: LD_ADDR_VAR 0 1
9258: PUSH
9259: LD_VAR 0 2
9263: PUSH
9264: FOR_IN
9265: IFFALSE 9323
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 2 , - 6 ) ;
9267: LD_VAR 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_VAR 0 1
9280: PUSH
9281: LD_INT 2
9283: ARRAY
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_INT 6
9290: NEG
9291: PPUSH
9292: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 2 ) ;
9296: LD_VAR 0 1
9300: PUSH
9301: LD_INT 1
9303: ARRAY
9304: PPUSH
9305: LD_VAR 0 1
9309: PUSH
9310: LD_INT 2
9312: ARRAY
9313: PPUSH
9314: LD_INT 2
9316: PPUSH
9317: CALL_OW 331
// end ;
9321: GO 9264
9323: POP
9324: POP
// CenterOnXY ( 83 , 132 ) ;
9325: LD_INT 83
9327: PPUSH
9328: LD_INT 132
9330: PPUSH
9331: CALL_OW 84
// Say ( Kurt , DKs-Scout-6 ) ;
9335: LD_EXP 22
9339: PPUSH
9340: LD_STRING DKs-Scout-6
9342: PPUSH
9343: CALL_OW 88
// Say ( Mike , DM-Scout-7 ) ;
9347: LD_EXP 14
9351: PPUSH
9352: LD_STRING DM-Scout-7
9354: PPUSH
9355: CALL_OW 88
// Say ( Mike , DM-Scout-8 ) ;
9359: LD_EXP 14
9363: PPUSH
9364: LD_STRING DM-Scout-8
9366: PPUSH
9367: CALL_OW 88
// Say ( Kurt , DKs-Scout-9 ) ;
9371: LD_EXP 22
9375: PPUSH
9376: LD_STRING DKs-Scout-9
9378: PPUSH
9379: CALL_OW 88
// end ; if IsDead ( Mike ) then
9383: LD_EXP 14
9387: PPUSH
9388: CALL_OW 301
9392: IFFALSE 9559
// begin CenterNowOnUnits ( Kurt ) ;
9394: LD_EXP 22
9398: PPUSH
9399: CALL_OW 87
// Say ( Kurt , DKs-Scout-b-1 ) ;
9403: LD_EXP 22
9407: PPUSH
9408: LD_STRING DKs-Scout-b-1
9410: PPUSH
9411: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-2 ) ;
9415: LD_EXP 22
9419: PPUSH
9420: LD_STRING DKs-Scout-b-2
9422: PPUSH
9423: CALL_OW 88
// if IsOk ( Givi ) then
9427: LD_EXP 13
9431: PPUSH
9432: CALL_OW 302
9436: IFFALSE 9511
// begin ComExit ( Givi ) ;
9438: LD_EXP 13
9442: PPUSH
9443: CALL 52135 0 1
// AddComTurnUnit ( Givi , Kurt ) ;
9447: LD_EXP 13
9451: PPUSH
9452: LD_EXP 22
9456: PPUSH
9457: CALL_OW 179
// Say ( Givi , DG-Scout-b-3 ) ;
9461: LD_EXP 13
9465: PPUSH
9466: LD_STRING DG-Scout-b-3
9468: PPUSH
9469: CALL_OW 88
// Say ( Givi , DG-Scout-b-4 ) ;
9473: LD_EXP 13
9477: PPUSH
9478: LD_STRING DG-Scout-b-4
9480: PPUSH
9481: CALL_OW 88
// Say ( Givi , DG-Scout-b-5 ) ;
9485: LD_EXP 13
9489: PPUSH
9490: LD_STRING DG-Scout-b-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Heike , DH-Scout-b-6 ) ;
9497: LD_EXP 12
9501: PPUSH
9502: LD_STRING DH-Scout-b-6
9504: PPUSH
9505: CALL_OW 88
// end else
9509: GO 9523
// Say ( Heike , DH-Scout-a-4 ) ;
9511: LD_EXP 12
9515: PPUSH
9516: LD_STRING DH-Scout-a-4
9518: PPUSH
9519: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-7 ) ;
9523: LD_EXP 22
9527: PPUSH
9528: LD_STRING DKs-Scout-b-7
9530: PPUSH
9531: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-8 ) ;
9535: LD_EXP 22
9539: PPUSH
9540: LD_STRING DKs-Scout-b-8
9542: PPUSH
9543: CALL_OW 88
// Say ( Kurt , DKs-Scout-b-9 ) ;
9547: LD_EXP 22
9551: PPUSH
9552: LD_STRING DKs-Scout-b-9
9554: PPUSH
9555: CALL_OW 88
// end ; if IsDead ( Kurt ) then
9559: LD_EXP 22
9563: PPUSH
9564: CALL_OW 301
9568: IFFALSE 9847
// begin CenterNowOnUnits ( Mike ) ;
9570: LD_EXP 14
9574: PPUSH
9575: CALL_OW 87
// Say ( Mike , DM-Scout-a-1 ) ;
9579: LD_EXP 14
9583: PPUSH
9584: LD_STRING DM-Scout-a-1
9586: PPUSH
9587: CALL_OW 88
// Say ( Mike , DM-Scout-a-2 ) ;
9591: LD_EXP 14
9595: PPUSH
9596: LD_STRING DM-Scout-a-2
9598: PPUSH
9599: CALL_OW 88
// if GetLives ( Mike ) < 1000 then
9603: LD_EXP 14
9607: PPUSH
9608: CALL_OW 256
9612: PUSH
9613: LD_INT 1000
9615: LESS
9616: IFFALSE 9632
// Say ( Heike , DH-Scout-a-3 ) else
9618: LD_EXP 12
9622: PPUSH
9623: LD_STRING DH-Scout-a-3
9625: PPUSH
9626: CALL_OW 88
9630: GO 9644
// Say ( Heike , DH-Scout-a-4 ) ;
9632: LD_EXP 12
9636: PPUSH
9637: LD_STRING DH-Scout-a-4
9639: PPUSH
9640: CALL_OW 88
// Say ( Mike , DM-Scout-a-5 ) ;
9644: LD_EXP 14
9648: PPUSH
9649: LD_STRING DM-Scout-a-5
9651: PPUSH
9652: CALL_OW 88
// if IsOk ( Kaia ) then
9656: LD_EXP 17
9660: PPUSH
9661: CALL_OW 302
9665: IFFALSE 9847
// begin ComExit ( Kaia ) ;
9667: LD_EXP 17
9671: PPUSH
9672: CALL 52135 0 1
// AddComMoveUnit ( Kaia , Mike ) ;
9676: LD_EXP 17
9680: PPUSH
9681: LD_EXP 14
9685: PPUSH
9686: CALL_OW 172
// wait ( 0 0$2 ) ;
9690: LD_INT 70
9692: PPUSH
9693: CALL_OW 67
// ComTurnUnit ( Kaia , Mike ) ;
9697: LD_EXP 17
9701: PPUSH
9702: LD_EXP 14
9706: PPUSH
9707: CALL_OW 119
// ComTurnUnit ( Mike , Kaia ) ;
9711: LD_EXP 14
9715: PPUSH
9716: LD_EXP 17
9720: PPUSH
9721: CALL_OW 119
// Say ( Kaia , DK-Scout-a-6 ) ;
9725: LD_EXP 17
9729: PPUSH
9730: LD_STRING DK-Scout-a-6
9732: PPUSH
9733: CALL_OW 88
// Say ( Mike , DM-Scout-a-7 ) ;
9737: LD_EXP 14
9741: PPUSH
9742: LD_STRING DM-Scout-a-7
9744: PPUSH
9745: CALL_OW 88
// Say ( Kaia , DK-Scout-a-8 ) ;
9749: LD_EXP 17
9753: PPUSH
9754: LD_STRING DK-Scout-a-8
9756: PPUSH
9757: CALL_OW 88
// Say ( Kaia , DK-Scout-a-9 ) ;
9761: LD_EXP 17
9765: PPUSH
9766: LD_STRING DK-Scout-a-9
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-Scout-a-10 ) ;
9773: LD_EXP 12
9777: PPUSH
9778: LD_STRING DH-Scout-a-10
9780: PPUSH
9781: CALL_OW 88
// ComTurnUnit ( Mike , Heike ) ;
9785: LD_EXP 14
9789: PPUSH
9790: LD_EXP 12
9794: PPUSH
9795: CALL_OW 119
// Say ( Mike , DM-Scout-a-11 ) ;
9799: LD_EXP 14
9803: PPUSH
9804: LD_STRING DM-Scout-a-11
9806: PPUSH
9807: CALL_OW 88
// Say ( Mike , DM-Scout-a-12 ) ;
9811: LD_EXP 14
9815: PPUSH
9816: LD_STRING DM-Scout-a-12
9818: PPUSH
9819: CALL_OW 88
// Say ( Mike , DM-Scout-a-13 ) ;
9823: LD_EXP 14
9827: PPUSH
9828: LD_STRING DM-Scout-a-13
9830: PPUSH
9831: CALL_OW 88
// Say ( Mike , DM-Scout-a-14 ) ;
9835: LD_EXP 14
9839: PPUSH
9840: LD_STRING DM-Scout-a-14
9842: PPUSH
9843: CALL_OW 88
// end ; end ; if IsOk ( Givi ) then
9847: LD_EXP 13
9851: PPUSH
9852: CALL_OW 302
9856: IFFALSE 9884
// begin Say ( Givi , DG-Scout-10 ) ;
9858: LD_EXP 13
9862: PPUSH
9863: LD_STRING DG-Scout-10
9865: PPUSH
9866: CALL_OW 88
// Say ( Givi , DG-Scout-11 ) ;
9870: LD_EXP 13
9874: PPUSH
9875: LD_STRING DG-Scout-11
9877: PPUSH
9878: CALL_OW 88
// end else
9882: GO 9941
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-10 ) then
9884: LD_EXP 24
9888: PPUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 72
9903: PPUSH
9904: LD_STRING DArm-Scout-10
9906: PPUSH
9907: CALL 154 0 2
9911: NOT
9912: IFFALSE 9941
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-10 ) ;
9914: LD_EXP 24
9918: PPUSH
9919: LD_INT 26
9921: PUSH
9922: LD_INT 2
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 72
9933: PPUSH
9934: LD_STRING DArf-Scout-10
9936: PPUSH
9937: CALL 154 0 2
// Say ( Heike , DH-Scout-12 ) ;
9941: LD_EXP 12
9945: PPUSH
9946: LD_STRING DH-Scout-12
9948: PPUSH
9949: CALL_OW 88
// Say ( Heike , DH-Scout-13 ) ;
9953: LD_EXP 12
9957: PPUSH
9958: LD_STRING DH-Scout-13
9960: PPUSH
9961: CALL_OW 88
// if IsOk ( Mike ) and IsOk ( Kurt ) then
9965: LD_EXP 14
9969: PPUSH
9970: CALL_OW 302
9974: PUSH
9975: LD_EXP 22
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10013
// begin Say ( Mike , DM-Scout-14 ) ;
9987: LD_EXP 14
9991: PPUSH
9992: LD_STRING DM-Scout-14
9994: PPUSH
9995: CALL_OW 88
// Say ( Heike , DH-Scout-c-14 ) ;
9999: LD_EXP 12
10003: PPUSH
10004: LD_STRING DH-Scout-c-14
10006: PPUSH
10007: CALL_OW 88
// end else
10011: GO 10106
// if IsOk ( Mike ) xor IsOk ( Kurt ) then
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 302
10022: PUSH
10023: LD_EXP 22
10027: PPUSH
10028: CALL_OW 302
10032: XOR
10033: IFFALSE 10094
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-a-14 ) then
10035: LD_EXP 24
10039: PPUSH
10040: LD_INT 26
10042: PUSH
10043: LD_INT 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 72
10054: PPUSH
10055: LD_STRING DArm-Scout-a-14
10057: PPUSH
10058: CALL 154 0 2
10062: NOT
10063: IFFALSE 10092
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-a-14 ) ;
10065: LD_EXP 24
10069: PPUSH
10070: LD_INT 26
10072: PUSH
10073: LD_INT 2
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 72
10084: PPUSH
10085: LD_STRING DArf-Scout-a-14
10087: PPUSH
10088: CALL 154 0 2
// end else
10092: GO 10106
// Say ( Heike , DH-Scout-d-14 ) ;
10094: LD_EXP 12
10098: PPUSH
10099: LD_STRING DH-Scout-d-14
10101: PPUSH
10102: CALL_OW 88
// Say ( Heike , DH-Scout-15 ) ;
10106: LD_EXP 12
10110: PPUSH
10111: LD_STRING DH-Scout-15
10113: PPUSH
10114: CALL_OW 88
// InGameOff ;
10118: CALL_OW 9
// usAttacksAllowed := true ;
10122: LD_ADDR_EXP 6
10126: PUSH
10127: LD_INT 1
10129: ST_TO_ADDR
// end ;
10130: PPOPN 2
10132: END
// every 0 0$1 trigger scoutFailed do var spoken ;
10133: LD_EXP 4
10137: IFFALSE 10314
10139: GO 10141
10141: DISABLE
10142: LD_INT 0
10144: PPUSH
// begin spoken := true ;
10145: LD_ADDR_VAR 0 1
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// wait ( 0 0$30 ) ;
10153: LD_INT 1050
10155: PPUSH
10156: CALL_OW 67
// Say ( Heike , DH-Scout-c-1 ) ;
10160: LD_EXP 12
10164: PPUSH
10165: LD_STRING DH-Scout-c-1
10167: PPUSH
10168: CALL_OW 88
// if not IsOk ( Givi ) then
10172: LD_EXP 13
10176: PPUSH
10177: CALL_OW 302
10181: NOT
10182: IFFALSE 10186
// exit ;
10184: GO 10314
// if IsOk ( Givi ) then
10186: LD_EXP 13
10190: PPUSH
10191: CALL_OW 302
10195: IFFALSE 10223
// begin Say ( Givi , DG-Scout-c-2 ) ;
10197: LD_EXP 13
10201: PPUSH
10202: LD_STRING DG-Scout-c-2
10204: PPUSH
10205: CALL_OW 88
// Say ( Givi , DG-Scout-c-3 ) ;
10209: LD_EXP 13
10213: PPUSH
10214: LD_STRING DG-Scout-c-3
10216: PPUSH
10217: CALL_OW 88
// end else
10221: GO 10296
// begin spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Scout-c-3 ) ;
10223: LD_ADDR_VAR 0 1
10227: PUSH
10228: LD_EXP 24
10232: PPUSH
10233: LD_INT 26
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 72
10247: PPUSH
10248: LD_STRING DArm-Scout-c-3
10250: PPUSH
10251: CALL 154 0 2
10255: ST_TO_ADDR
// if not spoken then
10256: LD_VAR 0 1
10260: NOT
10261: IFFALSE 10296
// spoken := SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Scout-c-3 ) ;
10263: LD_ADDR_VAR 0 1
10267: PUSH
10268: LD_EXP 24
10272: PPUSH
10273: LD_INT 26
10275: PUSH
10276: LD_INT 2
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 72
10287: PPUSH
10288: LD_STRING DArf-Scout-c-3
10290: PPUSH
10291: CALL 154 0 2
10295: ST_TO_ADDR
// ; end ; if spoken then
10296: LD_VAR 0 1
10300: IFFALSE 10314
// Say ( Heike , DH-Scout-c-4 ) ;
10302: LD_EXP 12
10306: PPUSH
10307: LD_STRING DH-Scout-c-4
10309: PPUSH
10310: CALL_OW 88
// end ;
10314: PPOPN 1
10316: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_half ] ] ) and IsOk ( Aviradze ) do
10317: LD_INT 22
10319: PUSH
10320: LD_INT 2
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 30
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PPUSH
10341: CALL_OW 69
10345: PUSH
10346: LD_EXP 23
10350: PPUSH
10351: CALL_OW 302
10355: AND
10356: IFFALSE 10441
10358: GO 10360
10360: DISABLE
// begin DialogueOn ;
10361: CALL_OW 6
// Say ( Aviradze , DA-Lab-1 ) ;
10365: LD_EXP 23
10369: PPUSH
10370: LD_STRING DA-Lab-1
10372: PPUSH
10373: CALL_OW 88
// Say ( Heike , DH-Lab-2 ) ;
10377: LD_EXP 12
10381: PPUSH
10382: LD_STRING DH-Lab-2
10384: PPUSH
10385: CALL_OW 88
// Say ( Aviradze , DA-Lab-3 ) ;
10389: LD_EXP 23
10393: PPUSH
10394: LD_STRING DA-Lab-3
10396: PPUSH
10397: CALL_OW 88
// Say ( Aviradze , DA-Lab-4 ) ;
10401: LD_EXP 23
10405: PPUSH
10406: LD_STRING DA-Lab-4
10408: PPUSH
10409: CALL_OW 88
// Say ( Aviradze , DA-Lab-5 ) ;
10413: LD_EXP 23
10417: PPUSH
10418: LD_STRING DA-Lab-5
10420: PPUSH
10421: CALL_OW 88
// Say ( Heike , DH-Lab-6 ) ;
10425: LD_EXP 12
10429: PPUSH
10430: LD_STRING DH-Lab-6
10432: PPUSH
10433: CALL_OW 88
// DialogueOff ;
10437: CALL_OW 7
// end ;
10441: END
// every 0 0$1 trigger GetTech ( tech_MatDet , 2 ) = state_researched and IsOk ( Givi ) do
10442: LD_INT 7
10444: PPUSH
10445: LD_INT 2
10447: PPUSH
10448: CALL_OW 321
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: PUSH
10457: LD_EXP 13
10461: PPUSH
10462: CALL_OW 302
10466: AND
10467: IFFALSE 10636
10469: GO 10471
10471: DISABLE
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Givi , DG-Opt-1 ) ;
10476: LD_EXP 13
10480: PPUSH
10481: LD_STRING DG-Opt-1
10483: PPUSH
10484: CALL_OW 88
// Say ( Heike , DH-Opt-2 ) ;
10488: LD_EXP 12
10492: PPUSH
10493: LD_STRING DH-Opt-2
10495: PPUSH
10496: CALL_OW 88
// Say ( Givi , DG-Opt-3 ) ;
10500: LD_EXP 13
10504: PPUSH
10505: LD_STRING DG-Opt-3
10507: PPUSH
10508: CALL_OW 88
// Say ( Givi , DG-Opt-4 ) ;
10512: LD_EXP 13
10516: PPUSH
10517: LD_STRING DG-Opt-4
10519: PPUSH
10520: CALL_OW 88
// Say ( Heike , DH-Opt-5 ) ;
10524: LD_EXP 12
10528: PPUSH
10529: LD_STRING DH-Opt-5
10531: PPUSH
10532: CALL_OW 88
// Say ( Givi , DG-Opt-6 ) ;
10536: LD_EXP 13
10540: PPUSH
10541: LD_STRING DG-Opt-6
10543: PPUSH
10544: CALL_OW 88
// Say ( Heike , DH-Opt-7 ) ;
10548: LD_EXP 12
10552: PPUSH
10553: LD_STRING DH-Opt-7
10555: PPUSH
10556: CALL_OW 88
// Say ( Givi , DG-Opt-8 ) ;
10560: LD_EXP 13
10564: PPUSH
10565: LD_STRING DG-Opt-8
10567: PPUSH
10568: CALL_OW 88
// Say ( Givi , DG-Opt-9 ) ;
10572: LD_EXP 13
10576: PPUSH
10577: LD_STRING DG-Opt-9
10579: PPUSH
10580: CALL_OW 88
// Say ( Heike , DH-Opt-10 ) ;
10584: LD_EXP 12
10588: PPUSH
10589: LD_STRING DH-Opt-10
10591: PPUSH
10592: CALL_OW 88
// Say ( Givi , DG-Opt-11 ) ;
10596: LD_EXP 13
10600: PPUSH
10601: LD_STRING DG-Opt-11
10603: PPUSH
10604: CALL_OW 88
// Say ( Givi , DG-Opt-12 ) ;
10608: LD_EXP 13
10612: PPUSH
10613: LD_STRING DG-Opt-12
10615: PPUSH
10616: CALL_OW 88
// Say ( Heike , DH-Opt-13 ) ;
10620: LD_EXP 12
10624: PPUSH
10625: LD_STRING DH-Opt-13
10627: PPUSH
10628: CALL_OW 88
// DialogueOff ;
10632: CALL_OW 7
// end ;
10636: END
// every 0 0$1 trigger GetTech ( tech_rocket , 2 ) = state_researched and IsOk ( Ibrahim ) do
10637: LD_INT 40
10639: PPUSH
10640: LD_INT 2
10642: PPUSH
10643: CALL_OW 321
10647: PUSH
10648: LD_INT 2
10650: EQUAL
10651: PUSH
10652: LD_EXP 15
10656: PPUSH
10657: CALL_OW 302
10661: AND
10662: IFFALSE 10912
10664: GO 10666
10666: DISABLE
// begin DialogueOn ;
10667: CALL_OW 6
// Say ( Ibrahim , DI-Roc-1 ) ;
10671: LD_EXP 15
10675: PPUSH
10676: LD_STRING DI-Roc-1
10678: PPUSH
10679: CALL_OW 88
// Say ( Heike , DH-Roc-2 ) ;
10683: LD_EXP 12
10687: PPUSH
10688: LD_STRING DH-Roc-2
10690: PPUSH
10691: CALL_OW 88
// Say ( Ibrahim , DI-Roc-3 ) ;
10695: LD_EXP 15
10699: PPUSH
10700: LD_STRING DI-Roc-3
10702: PPUSH
10703: CALL_OW 88
// Say ( Ibrahim , DI-Roc-4 ) ;
10707: LD_EXP 15
10711: PPUSH
10712: LD_STRING DI-Roc-4
10714: PPUSH
10715: CALL_OW 88
// Say ( Kaia , DK-Roc-5 ) ;
10719: LD_EXP 17
10723: PPUSH
10724: LD_STRING DK-Roc-5
10726: PPUSH
10727: CALL_OW 88
// Say ( Kaia , DK-Roc-6 ) ;
10731: LD_EXP 17
10735: PPUSH
10736: LD_STRING DK-Roc-6
10738: PPUSH
10739: CALL_OW 88
// Say ( Givi , DG-Roc-7 ) ;
10743: LD_EXP 13
10747: PPUSH
10748: LD_STRING DG-Roc-7
10750: PPUSH
10751: CALL_OW 88
// Say ( Givi , DG-Roc-8 ) ;
10755: LD_EXP 13
10759: PPUSH
10760: LD_STRING DG-Roc-8
10762: PPUSH
10763: CALL_OW 88
// if IsOk ( Markov ) and IsOk ( Kaia ) and IsOk ( Givi ) then
10767: LD_EXP 19
10771: PPUSH
10772: CALL_OW 302
10776: PUSH
10777: LD_EXP 17
10781: PPUSH
10782: CALL_OW 302
10786: AND
10787: PUSH
10788: LD_EXP 13
10792: PPUSH
10793: CALL_OW 302
10797: AND
10798: IFFALSE 10908
// begin Say ( Markov , DMar-Roc-9 ) ;
10800: LD_EXP 19
10804: PPUSH
10805: LD_STRING DMar-Roc-9
10807: PPUSH
10808: CALL_OW 88
// Say ( Markov , DMar-Roc-10 ) ;
10812: LD_EXP 19
10816: PPUSH
10817: LD_STRING DMar-Roc-10
10819: PPUSH
10820: CALL_OW 88
// Say ( Kaia , DK-Roc-11 ) ;
10824: LD_EXP 17
10828: PPUSH
10829: LD_STRING DK-Roc-11
10831: PPUSH
10832: CALL_OW 88
// Say ( Markov , DMar-Roc-12 ) ;
10836: LD_EXP 19
10840: PPUSH
10841: LD_STRING DMar-Roc-12
10843: PPUSH
10844: CALL_OW 88
// Say ( Kaia , DK-Roc-13 ) ;
10848: LD_EXP 17
10852: PPUSH
10853: LD_STRING DK-Roc-13
10855: PPUSH
10856: CALL_OW 88
// Say ( Givi , DG-Roc-14 ) ;
10860: LD_EXP 13
10864: PPUSH
10865: LD_STRING DG-Roc-14
10867: PPUSH
10868: CALL_OW 88
// Say ( Markov , DMar-Roc-15 ) ;
10872: LD_EXP 19
10876: PPUSH
10877: LD_STRING DMar-Roc-15
10879: PPUSH
10880: CALL_OW 88
// Say ( Markov , DMar-Roc-16 ) ;
10884: LD_EXP 19
10888: PPUSH
10889: LD_STRING DMar-Roc-16
10891: PPUSH
10892: CALL_OW 88
// Say ( Kaia , DK-Roc-17 ) ;
10896: LD_EXP 17
10900: PPUSH
10901: LD_STRING DK-Roc-17
10903: PPUSH
10904: CALL_OW 88
// end ; DialogueOff ;
10908: CALL_OW 7
// end ;
10912: END
// every 0 0$3 trigger GetLives ( usCommander ) < 1000 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] ] ) < 6 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) < 2 do var i , hurts , sci ;
10913: LD_EXP 27
10917: PPUSH
10918: CALL_OW 256
10922: PUSH
10923: LD_INT 1000
10925: LESS
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 21
10939: PUSH
10940: LD_INT 1
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 23
10949: PUSH
10950: LD_INT 1
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 69
10966: PUSH
10967: LD_INT 6
10969: LESS
10970: OR
10971: PUSH
10972: LD_INT 22
10974: PUSH
10975: LD_INT 1
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 21
10984: PUSH
10985: LD_INT 1
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 25
10994: PUSH
10995: LD_INT 1
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: PPUSH
11007: CALL_OW 69
11011: PUSH
11012: LD_INT 2
11014: LESS
11015: OR
11016: IFFALSE 12225
11018: GO 11020
11020: DISABLE
11021: LD_INT 0
11023: PPUSH
11024: PPUSH
11025: PPUSH
// begin usAttacksAllowed := false ;
11026: LD_ADDR_EXP 6
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// usSurrender := true ;
11034: LD_ADDR_EXP 7
11038: PUSH
11039: LD_INT 1
11041: ST_TO_ADDR
// SetAttitude ( 1 , 2 , att_friend , true ) ;
11042: LD_INT 1
11044: PPUSH
11045: LD_INT 2
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
11058: LD_ADDR_VAR 0 1
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 21
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 60
11085: PUSH
11086: EMPTY
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: PPUSH
11094: CALL_OW 69
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11113
// ComStop ( i ) ;
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 141
11111: GO 11099
11113: POP
11114: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_ok ] ] , [ f_type , unit_human ] ] ) do
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_INT 22
11122: PUSH
11123: LD_INT 2
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 3
11132: PUSH
11133: LD_INT 50
11135: PUSH
11136: EMPTY
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 21
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: PUSH
11163: FOR_IN
11164: IFFALSE 11180
// SetLives ( i , 251 ) ;
11166: LD_VAR 0 1
11170: PPUSH
11171: LD_INT 251
11173: PPUSH
11174: CALL_OW 234
11178: GO 11163
11180: POP
11181: POP
// InGameOn ;
11182: CALL_OW 8
// ComExit ( usCommander ) ;
11186: LD_EXP 27
11190: PPUSH
11191: CALL 52135 0 1
// AddComMoveXY ( usCommander , 81 , 143 ) ;
11195: LD_EXP 27
11199: PPUSH
11200: LD_INT 81
11202: PPUSH
11203: LD_INT 143
11205: PPUSH
11206: CALL_OW 171
// AddComTurnXY ( usCommander , 81 , 139 ) ;
11210: LD_EXP 27
11214: PPUSH
11215: LD_INT 81
11217: PPUSH
11218: LD_INT 139
11220: PPUSH
11221: CALL_OW 178
// PlaceSeeing ( 81 , 144 , 2 , - 10 ) ;
11225: LD_INT 81
11227: PPUSH
11228: LD_INT 144
11230: PPUSH
11231: LD_INT 2
11233: PPUSH
11234: LD_INT 10
11236: NEG
11237: PPUSH
11238: CALL_OW 330
// CenterNowOnUnits ( usCommander ) ;
11242: LD_EXP 27
11246: PPUSH
11247: CALL_OW 87
// wait ( 0 0$2 ) ;
11251: LD_INT 70
11253: PPUSH
11254: CALL_OW 67
// Say ( usCommander , DCa-Surrender-1 ) ;
11258: LD_EXP 27
11262: PPUSH
11263: LD_STRING DCa-Surrender-1
11265: PPUSH
11266: CALL_OW 88
// Say ( Heike , DH-Surrender-2 ) ;
11270: LD_EXP 12
11274: PPUSH
11275: LD_STRING DH-Surrender-2
11277: PPUSH
11278: CALL_OW 88
// if GetType ( IsInUnit ( Heike ) ) = unit_building then
11282: LD_EXP 12
11286: PPUSH
11287: CALL_OW 310
11291: PPUSH
11292: CALL_OW 247
11296: PUSH
11297: LD_INT 3
11299: EQUAL
11300: IFFALSE 11318
// begin ComExit ( Heike ) ;
11302: LD_EXP 12
11306: PPUSH
11307: CALL 52135 0 1
// wait ( 3 ) ;
11311: LD_INT 3
11313: PPUSH
11314: CALL_OW 67
// end ; ComMoveXY ( Heike , 82 , 133 ) ;
11318: LD_EXP 12
11322: PPUSH
11323: LD_INT 82
11325: PPUSH
11326: LD_INT 133
11328: PPUSH
11329: CALL_OW 111
// AddComTurnUnit ( Heike , usCommander ) ;
11333: LD_EXP 12
11337: PPUSH
11338: LD_EXP 27
11342: PPUSH
11343: CALL_OW 179
// wait ( 0 0$3 ) ;
11347: LD_INT 105
11349: PPUSH
11350: CALL_OW 67
// Say ( Heike , DH-Surrender-3 ) ;
11354: LD_EXP 12
11358: PPUSH
11359: LD_STRING DH-Surrender-3
11361: PPUSH
11362: CALL_OW 88
// Say ( Heike , DH-Surrender-4 ) ;
11366: LD_EXP 12
11370: PPUSH
11371: LD_STRING DH-Surrender-4
11373: PPUSH
11374: CALL_OW 88
// RemoveSeeing ( 81 , 144 , 2 ) ;
11378: LD_INT 81
11380: PPUSH
11381: LD_INT 144
11383: PPUSH
11384: LD_INT 2
11386: PPUSH
11387: CALL_OW 331
// ChangeSideFog ( 1 , 2 ) ;
11391: LD_INT 1
11393: PPUSH
11394: LD_INT 2
11396: PPUSH
11397: CALL_OW 343
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_inside ] ] ) do
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_INT 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 23
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 54
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: PUSH
11442: FOR_IN
11443: IFFALSE 11456
// ComExit ( i ) ;
11445: LD_VAR 0 1
11449: PPUSH
11450: CALL 52135 0 1
11454: GO 11442
11456: POP
11457: POP
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
11458: LD_ADDR_VAR 0 3
11462: PUSH
11463: LD_INT 22
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 25
11475: PUSH
11476: LD_INT 4
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PPUSH
11487: CALL_OW 69
11491: ST_TO_ADDR
// hurts := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
11492: LD_ADDR_VAR 0 2
11496: PUSH
11497: LD_INT 22
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: LD_INT 50
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PPUSH
11524: CALL_OW 69
11528: ST_TO_ADDR
// if sci and hurts then
11529: LD_VAR 0 3
11533: PUSH
11534: LD_VAR 0 2
11538: AND
11539: IFFALSE 11601
// begin for i := 1 to hurts do
11541: LD_ADDR_VAR 0 1
11545: PUSH
11546: DOUBLE
11547: LD_INT 1
11549: DEC
11550: ST_TO_ADDR
11551: LD_VAR 0 2
11555: PUSH
11556: FOR_TO
11557: IFFALSE 11599
// if i <= sci then
11559: LD_VAR 0 1
11563: PUSH
11564: LD_VAR 0 3
11568: LESSEQUAL
11569: IFFALSE 11597
// AddComHeal ( sci [ i ] , hurts [ i ] ) ;
11571: LD_VAR 0 3
11575: PUSH
11576: LD_VAR 0 1
11580: ARRAY
11581: PPUSH
11582: LD_VAR 0 2
11586: PUSH
11587: LD_VAR 0 1
11591: ARRAY
11592: PPUSH
11593: CALL_OW 188
11597: GO 11556
11599: POP
11600: POP
// end ; if IsOk ( Givi ) then
11601: LD_EXP 13
11605: PPUSH
11606: CALL_OW 302
11610: IFFALSE 11626
// Say ( Givi , DG-Surrender-5 ) else
11612: LD_EXP 13
11616: PPUSH
11617: LD_STRING DG-Surrender-5
11619: PPUSH
11620: CALL_OW 88
11624: GO 11638
// Say ( Heike , DH-Surrender-a-5 ) ;
11626: LD_EXP 12
11630: PPUSH
11631: LD_STRING DH-Surrender-a-5
11633: PPUSH
11634: CALL_OW 88
// Say ( usCommander , DCa-Surrender-6 ) ;
11638: LD_EXP 27
11642: PPUSH
11643: LD_STRING DCa-Surrender-6
11645: PPUSH
11646: CALL_OW 88
// Say ( usCommander , DCa-Surrender-7 ) ;
11650: LD_EXP 27
11654: PPUSH
11655: LD_STRING DCa-Surrender-7
11657: PPUSH
11658: CALL_OW 88
// if IsOk ( Givi ) then
11662: LD_EXP 13
11666: PPUSH
11667: CALL_OW 302
11671: IFFALSE 11687
// Say ( Givi , DG-Surrender-8 ) else
11673: LD_EXP 13
11677: PPUSH
11678: LD_STRING DG-Surrender-8
11680: PPUSH
11681: CALL_OW 88
11685: GO 11699
// Say ( Heike , DH-Surrender-a-8 ) ;
11687: LD_EXP 12
11691: PPUSH
11692: LD_STRING DH-Surrender-a-8
11694: PPUSH
11695: CALL_OW 88
// Say ( usCommander , DCa-Surrender-9 ) ;
11699: LD_EXP 27
11703: PPUSH
11704: LD_STRING DCa-Surrender-9
11706: PPUSH
11707: CALL_OW 88
// Say ( Heike , DH-Surrender-10 ) ;
11711: LD_EXP 12
11715: PPUSH
11716: LD_STRING DH-Surrender-10
11718: PPUSH
11719: CALL_OW 88
// Say ( usCommander , DCa-Surrender-11 ) ;
11723: LD_EXP 27
11727: PPUSH
11728: LD_STRING DCa-Surrender-11
11730: PPUSH
11731: CALL_OW 88
// Say ( Heike , DH-Surrender-12 ) ;
11735: LD_EXP 12
11739: PPUSH
11740: LD_STRING DH-Surrender-12
11742: PPUSH
11743: CALL_OW 88
// Say ( usCommander , DCa-Surrender-13 ) ;
11747: LD_EXP 27
11751: PPUSH
11752: LD_STRING DCa-Surrender-13
11754: PPUSH
11755: CALL_OW 88
// Say ( usCommander , DCa-Surrender-14 ) ;
11759: LD_EXP 27
11763: PPUSH
11764: LD_STRING DCa-Surrender-14
11766: PPUSH
11767: CALL_OW 88
// Say ( usCommander , DCa-Surrender-15 ) ;
11771: LD_EXP 27
11775: PPUSH
11776: LD_STRING DCa-Surrender-15
11778: PPUSH
11779: CALL_OW 88
// Say ( usCommander , DCa-Surrender-16 ) ;
11783: LD_EXP 27
11787: PPUSH
11788: LD_STRING DCa-Surrender-16
11790: PPUSH
11791: CALL_OW 88
// Say ( Kaia , DK-Surrender-17 ) ;
11795: LD_EXP 17
11799: PPUSH
11800: LD_STRING DK-Surrender-17
11802: PPUSH
11803: CALL_OW 88
// Say ( Olaf , DO-Surrender-18 ) ;
11807: LD_EXP 21
11811: PPUSH
11812: LD_STRING DO-Surrender-18
11814: PPUSH
11815: CALL_OW 88
// Say ( Olaf , DO-Surrender-19 ) ;
11819: LD_EXP 21
11823: PPUSH
11824: LD_STRING DO-Surrender-19
11826: PPUSH
11827: CALL_OW 88
// Say ( Kurt , DKs-Surrender-20 ) ;
11831: LD_EXP 22
11835: PPUSH
11836: LD_STRING DKs-Surrender-20
11838: PPUSH
11839: CALL_OW 88
// Say ( Kurt , DKs-Surrender-21 ) ;
11843: LD_EXP 22
11847: PPUSH
11848: LD_STRING DKs-Surrender-21
11850: PPUSH
11851: CALL_OW 88
// Say ( Markov , DMar-Surrender-22 ) ;
11855: LD_EXP 19
11859: PPUSH
11860: LD_STRING DMar-Surrender-22
11862: PPUSH
11863: CALL_OW 88
// Say ( Markov , DMar-Surrender-23 ) ;
11867: LD_EXP 19
11871: PPUSH
11872: LD_STRING DMar-Surrender-23
11874: PPUSH
11875: CALL_OW 88
// Say ( Sophia , DS-Surrender-24 ) ;
11879: LD_EXP 18
11883: PPUSH
11884: LD_STRING DS-Surrender-24
11886: PPUSH
11887: CALL_OW 88
// Say ( Aviradze , DA-Surrender-25 ) ;
11891: LD_EXP 23
11895: PPUSH
11896: LD_STRING DA-Surrender-25
11898: PPUSH
11899: CALL_OW 88
// Say ( Ibrahim , DI-Surrender-26 ) ;
11903: LD_EXP 15
11907: PPUSH
11908: LD_STRING DI-Surrender-26
11910: PPUSH
11911: CALL_OW 88
// Say ( Kamil , DKam-Surrender-27 ) ;
11915: LD_EXP 16
11919: PPUSH
11920: LD_STRING DKam-Surrender-27
11922: PPUSH
11923: CALL_OW 88
// if IsOk ( Givi ) then
11927: LD_EXP 13
11931: PPUSH
11932: CALL_OW 302
11936: IFFALSE 11976
// begin Say ( Givi , DG-Surrender-28 ) ;
11938: LD_EXP 13
11942: PPUSH
11943: LD_STRING DG-Surrender-28
11945: PPUSH
11946: CALL_OW 88
// Say ( Givi , DG-Surrender-29 ) ;
11950: LD_EXP 13
11954: PPUSH
11955: LD_STRING DG-Surrender-29
11957: PPUSH
11958: CALL_OW 88
// Say ( Givi , DG-Surrender-30 ) ;
11962: LD_EXP 13
11966: PPUSH
11967: LD_STRING DG-Surrender-30
11969: PPUSH
11970: CALL_OW 88
// end else
11974: GO 12012
// begin Say ( Heike , DH-Surrender-a-28 ) ;
11976: LD_EXP 12
11980: PPUSH
11981: LD_STRING DH-Surrender-a-28
11983: PPUSH
11984: CALL_OW 88
// Say ( Heike , DH-Surrender-a-29 ) ;
11988: LD_EXP 12
11992: PPUSH
11993: LD_STRING DH-Surrender-a-29
11995: PPUSH
11996: CALL_OW 88
// Say ( Heike , DH-Surrender-a-30 ) ;
12000: LD_EXP 12
12004: PPUSH
12005: LD_STRING DH-Surrender-a-30
12007: PPUSH
12008: CALL_OW 88
// end ; PrepareRussianFirstWaveAttack ;
12012: CALL 13836 0 0
// AgressiveMove ( FilterAllUnits ( [ f_side , 3 ] ) , [ [ 176 , 123 ] ] ) ;
12016: LD_INT 22
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PPUSH
12026: CALL_OW 69
12030: PPUSH
12031: LD_INT 176
12033: PUSH
12034: LD_INT 123
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: PPUSH
12044: CALL 54142 0 2
// if not IsEnvironment ( 190 , 150 ) then
12048: LD_INT 190
12050: PPUSH
12051: LD_INT 150
12053: PPUSH
12054: CALL_OW 351
12058: NOT
12059: IFFALSE 12078
// PlaceSeeing ( 190 , 150 , 2 , - 8 ) ;
12061: LD_INT 190
12063: PPUSH
12064: LD_INT 150
12066: PPUSH
12067: LD_INT 2
12069: PPUSH
12070: LD_INT 8
12072: NEG
12073: PPUSH
12074: CALL_OW 330
// CenterOnXY ( 193 , 150 ) ;
12078: LD_INT 193
12080: PPUSH
12081: LD_INT 150
12083: PPUSH
12084: CALL_OW 84
// if IsOk ( Markov ) then
12088: LD_EXP 19
12092: PPUSH
12093: CALL_OW 302
12097: IFFALSE 12113
// Say ( Markov , DMar-Surrender-31 ) else
12099: LD_EXP 19
12103: PPUSH
12104: LD_STRING DMar-Surrender-31
12106: PPUSH
12107: CALL_OW 88
12111: GO 12170
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Surrender-a-31 ) then
12113: LD_EXP 24
12117: PPUSH
12118: LD_INT 26
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 72
12132: PPUSH
12133: LD_STRING DArm-Surrender-a-31
12135: PPUSH
12136: CALL 154 0 2
12140: NOT
12141: IFFALSE 12170
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Surrender-a-31 ) ;
12143: LD_EXP 24
12147: PPUSH
12148: LD_INT 26
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PPUSH
12158: CALL_OW 72
12162: PPUSH
12163: LD_STRING DArf-Surrender-a-31
12165: PPUSH
12166: CALL 154 0 2
// Say ( Heike , DH-Surrender-32 ) ;
12170: LD_EXP 12
12174: PPUSH
12175: LD_STRING DH-Surrender-32
12177: PPUSH
12178: CALL_OW 88
// InGameOff ;
12182: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
12186: LD_STRING M2
12188: PPUSH
12189: CALL_OW 337
// wait ( 0 0$20 ) ;
12193: LD_INT 700
12195: PPUSH
12196: CALL_OW 67
// PrepareRussianLastWaveAttack ;
12200: CALL 14198 0 0
// russianAttack := true ;
12204: LD_ADDR_EXP 8
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// RemoveSeeing ( 190 , 150 , 2 ) ;
12212: LD_INT 190
12214: PPUSH
12215: LD_INT 150
12217: PPUSH
12218: LD_INT 2
12220: PPUSH
12221: CALL_OW 331
// end ;
12225: PPOPN 3
12227: END
// every 0 0$3 trigger seeHeavyGun and not InBattle ( 2 ) and IsOk ( Heike ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) and ( IsOk ( Markov ) or UnitFilter ( heikeSecondSquad , [ f_ok ] ) ) do
12228: LD_EXP 11
12232: PUSH
12233: LD_INT 2
12235: PPUSH
12236: CALL_OW 463
12240: NOT
12241: AND
12242: PUSH
12243: LD_EXP 12
12247: PPUSH
12248: CALL_OW 302
12252: AND
12253: PUSH
12254: LD_INT 22
12256: PUSH
12257: LD_INT 2
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 3
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: AND
12283: PUSH
12284: LD_EXP 19
12288: PPUSH
12289: CALL_OW 302
12293: PUSH
12294: LD_EXP 24
12298: PPUSH
12299: LD_INT 50
12301: PUSH
12302: EMPTY
12303: LIST
12304: PPUSH
12305: CALL_OW 72
12309: OR
12310: AND
12311: IFFALSE 12539
12313: GO 12315
12315: DISABLE
// begin DialogueOn ;
12316: CALL_OW 6
// Say ( Heike , DH-Heavy-1 ) ;
12320: LD_EXP 12
12324: PPUSH
12325: LD_STRING DH-Heavy-1
12327: PPUSH
12328: CALL_OW 88
// if IsOk ( Markov ) then
12332: LD_EXP 19
12336: PPUSH
12337: CALL_OW 302
12341: IFFALSE 12466
// begin Say ( Markov , DMar-Heavy-2 ) ;
12343: LD_EXP 19
12347: PPUSH
12348: LD_STRING DMar-Heavy-2
12350: PPUSH
12351: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12355: LD_INT 22
12357: PUSH
12358: LD_INT 2
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 30
12367: PUSH
12368: LD_INT 3
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 69
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: PPUSH
12388: CALL_OW 87
// Say ( Markov , DMar-Heavy-3 ) ;
12392: LD_EXP 19
12396: PPUSH
12397: LD_STRING DMar-Heavy-3
12399: PPUSH
12400: CALL_OW 88
// Say ( Markov , DMar-Heavy-4 ) ;
12404: LD_EXP 19
12408: PPUSH
12409: LD_STRING DMar-Heavy-4
12411: PPUSH
12412: CALL_OW 88
// Say ( Markov , DMar-Heavy-5 ) ;
12416: LD_EXP 19
12420: PPUSH
12421: LD_STRING DMar-Heavy-5
12423: PPUSH
12424: CALL_OW 88
// Say ( Markov , DMar-Heavy-6 ) ;
12428: LD_EXP 19
12432: PPUSH
12433: LD_STRING DMar-Heavy-6
12435: PPUSH
12436: CALL_OW 88
// Say ( Heike , DH-Heavy-7 ) ;
12440: LD_EXP 12
12444: PPUSH
12445: LD_STRING DH-Heavy-7
12447: PPUSH
12448: CALL_OW 88
// Say ( Heike , DH-Heavy-8 ) ;
12452: LD_EXP 12
12456: PPUSH
12457: LD_STRING DH-Heavy-8
12459: PPUSH
12460: CALL_OW 88
// end else
12464: GO 12523
// begin if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Heavy-a-2 ) then
12466: LD_EXP 24
12470: PPUSH
12471: LD_INT 26
12473: PUSH
12474: LD_INT 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 72
12485: PPUSH
12486: LD_STRING DArm-Heavy-a-2
12488: PPUSH
12489: CALL 154 0 2
12493: NOT
12494: IFFALSE 12523
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-Heavy-a-2 ) ;
12496: LD_EXP 24
12500: PPUSH
12501: LD_INT 26
12503: PUSH
12504: LD_INT 2
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PPUSH
12511: CALL_OW 72
12515: PPUSH
12516: LD_STRING DArf-Heavy-a-2
12518: PPUSH
12519: CALL 154 0 2
// end ; Say ( Heike , DH-Heavy-9 ) ;
12523: LD_EXP 12
12527: PPUSH
12528: LD_STRING DH-Heavy-9
12530: PPUSH
12531: CALL_OW 88
// DialogueOff ;
12535: CALL_OW 7
// end ;
12539: END
// every 0 0$2 trigger UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) and IsOk ( Heike ) do
12540: LD_EXP 31
12544: PPUSH
12545: LD_INT 101
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 72
12559: PUSH
12560: LD_EXP 12
12564: PPUSH
12565: CALL_OW 302
12569: AND
12570: IFFALSE 12713
12572: GO 12574
12574: DISABLE
// begin DialogueOn ;
12575: CALL_OW 6
// CenterNowOnUnits ( UnitFilter ( usAdditionalForces , [ f_see , 2 ] ) ) ;
12579: LD_EXP 31
12583: PPUSH
12584: LD_INT 101
12586: PUSH
12587: LD_INT 2
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 72
12598: PPUSH
12599: CALL_OW 87
// Say ( Heike , DH-Flank-1 ) ;
12603: LD_EXP 12
12607: PPUSH
12608: LD_STRING DH-Flank-1
12610: PPUSH
12611: CALL_OW 88
// if IsOk ( Mike ) then
12615: LD_EXP 14
12619: PPUSH
12620: CALL_OW 302
12624: IFFALSE 12640
// Say ( Mike , DM-Flank-2 ) else
12626: LD_EXP 14
12630: PPUSH
12631: LD_STRING DM-Flank-2
12633: PPUSH
12634: CALL_OW 88
12638: GO 12697
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-Flank-a-2 ) then
12640: LD_EXP 24
12644: PPUSH
12645: LD_INT 26
12647: PUSH
12648: LD_INT 1
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PPUSH
12655: CALL_OW 72
12659: PPUSH
12660: LD_STRING DArm-Flank-a-2
12662: PPUSH
12663: CALL 154 0 2
12667: NOT
12668: IFFALSE 12697
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArm-Flank-a-2 ) ;
12670: LD_EXP 24
12674: PPUSH
12675: LD_INT 26
12677: PUSH
12678: LD_INT 2
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 72
12689: PPUSH
12690: LD_STRING DArm-Flank-a-2
12692: PPUSH
12693: CALL 154 0 2
// Say ( Heike , DH-Flank-3 ) ;
12697: LD_EXP 12
12701: PPUSH
12702: LD_STRING DH-Flank-3
12704: PPUSH
12705: CALL_OW 88
// DialogueOff ;
12709: CALL_OW 7
// end ;
12713: END
// every 0 0$3 trigger seeRemoteVehicle do
12714: LD_EXP 10
12718: IFFALSE 12942
12720: GO 12722
12722: DISABLE
// begin DialogueOn ;
12723: CALL_OW 6
// Say ( Heike , DH-USRC-1 ) ;
12727: LD_EXP 12
12731: PPUSH
12732: LD_STRING DH-USRC-1
12734: PPUSH
12735: CALL_OW 88
// if IsOk ( Markov ) then
12739: LD_EXP 19
12743: PPUSH
12744: CALL_OW 302
12748: IFFALSE 12764
// Say ( Markov , DMar-USRC-2 ) else
12750: LD_EXP 19
12754: PPUSH
12755: LD_STRING DMar-USRC-2
12757: PPUSH
12758: CALL_OW 88
12762: GO 12821
// if not SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) , DArm-USRC-a-2 ) then
12764: LD_EXP 24
12768: PPUSH
12769: LD_INT 26
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PPUSH
12779: CALL_OW 72
12783: PPUSH
12784: LD_STRING DArm-USRC-a-2
12786: PPUSH
12787: CALL 154 0 2
12791: NOT
12792: IFFALSE 12821
// SayX ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) , DArf-USRC-a-2 ) ;
12794: LD_EXP 24
12798: PPUSH
12799: LD_INT 26
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 72
12813: PPUSH
12814: LD_STRING DArf-USRC-a-2
12816: PPUSH
12817: CALL 154 0 2
// DialogueOff ;
12821: CALL_OW 7
// wait ( 0 0$10 ) ;
12825: LD_INT 350
12827: PPUSH
12828: CALL_OW 67
// Say ( Heike , DH-USRC-3 ) ;
12832: LD_EXP 12
12836: PPUSH
12837: LD_STRING DH-USRC-3
12839: PPUSH
12840: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
12844: LD_INT 35
12846: PPUSH
12847: CALL_OW 67
// until See ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12851: LD_INT 2
12853: PPUSH
12854: LD_INT 22
12856: PUSH
12857: LD_INT 1
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 36
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: PPUSH
12887: CALL_OW 292
12891: IFFALSE 12844
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) [ 1 ] ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 1
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 36
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 69
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: CALL_OW 87
// Say ( Heike , DH-USRCFound-1 ) ;
12930: LD_EXP 12
12934: PPUSH
12935: LD_STRING DH-USRCFound-1
12937: PPUSH
12938: CALL_OW 88
// end ;
12942: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
12943: LD_EXP 17
12947: PPUSH
12948: CALL_OW 256
12952: PUSH
12953: LD_INT 3
12955: LESS
12956: IFFALSE 12993
12958: GO 12960
12960: DISABLE
// begin DialogueOn ;
12961: CALL_OW 6
// ForceSay ( Kaia , DK-Dead-1 ) ;
12965: LD_EXP 17
12969: PPUSH
12970: LD_STRING DK-Dead-1
12972: PPUSH
12973: CALL_OW 91
// ForceSay ( Kaia , DK-Dead-2 ) ;
12977: LD_EXP 17
12981: PPUSH
12982: LD_STRING DK-Dead-2
12984: PPUSH
12985: CALL_OW 91
// DialogueOff ;
12989: CALL_OW 7
// end ;
12993: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_rocket_launcher ] ] ) do
12994: LD_INT 22
12996: PUSH
12997: LD_INT 2
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 34
13006: PUSH
13007: LD_INT 28
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PPUSH
13018: CALL_OW 69
13022: IFFALSE 13035
13024: GO 13026
13026: DISABLE
// hasRockets := true ;
13027: LD_ADDR_EXP 9
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
13035: END
// every 0 0$1 trigger russianAttack and not FilterAllUnits ( [ f_side , 3 ] ) do
13036: LD_EXP 8
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: NOT
13056: AND
13057: IFFALSE 13667
13059: GO 13061
13061: DISABLE
// begin DialogueOn ;
13062: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
13066: LD_EXP 12
13070: PPUSH
13071: CALL_OW 87
// Say ( Heike , DH-End-1 ) ;
13075: LD_EXP 12
13079: PPUSH
13080: LD_STRING DH-End-1
13082: PPUSH
13083: CALL_OW 88
// SayRadio ( Shariff , DShar-End-2 ) ;
13087: LD_EXP 20
13091: PPUSH
13092: LD_STRING DShar-End-2
13094: PPUSH
13095: CALL_OW 94
// Say ( Kaia , DK-End-3 ) ;
13099: LD_EXP 17
13103: PPUSH
13104: LD_STRING DK-End-3
13106: PPUSH
13107: CALL_OW 88
// Say ( Heike , DH-End-4 ) ;
13111: LD_EXP 12
13115: PPUSH
13116: LD_STRING DH-End-4
13118: PPUSH
13119: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
13123: LD_EXP 20
13127: PPUSH
13128: LD_STRING DShar-End-5
13130: PPUSH
13131: CALL_OW 94
// if IsOk ( Markov ) then
13135: LD_EXP 19
13139: PPUSH
13140: CALL_OW 302
13144: IFFALSE 13158
// Say ( Kaia , DK-End-6 ) ;
13146: LD_EXP 17
13150: PPUSH
13151: LD_STRING DK-End-6
13153: PPUSH
13154: CALL_OW 88
// Say ( Kaia , DK-End-7 ) ;
13158: LD_EXP 17
13162: PPUSH
13163: LD_STRING DK-End-7
13165: PPUSH
13166: CALL_OW 88
// if IsOk ( Kaia ) then
13170: LD_EXP 17
13174: PPUSH
13175: CALL_OW 302
13179: IFFALSE 13217
// begin Say ( Givi , DG-End-8 ) ;
13181: LD_EXP 13
13185: PPUSH
13186: LD_STRING DG-End-8
13188: PPUSH
13189: CALL_OW 88
// Say ( Givi , DG-End-9 ) ;
13193: LD_EXP 13
13197: PPUSH
13198: LD_STRING DG-End-9
13200: PPUSH
13201: CALL_OW 88
// Say ( Heike , DH-End-10 ) ;
13205: LD_EXP 12
13209: PPUSH
13210: LD_STRING DH-End-10
13212: PPUSH
13213: CALL_OW 88
// end ; Say ( Heike , DH-End-11 ) ;
13217: LD_EXP 12
13221: PPUSH
13222: LD_STRING DH-End-11
13224: PPUSH
13225: CALL_OW 88
// if GetTech ( tech_MatDet , 2 ) = state_researched then
13229: LD_INT 7
13231: PPUSH
13232: LD_INT 2
13234: PPUSH
13235: CALL_OW 321
13239: PUSH
13240: LD_INT 2
13242: EQUAL
13243: IFFALSE 13257
// AddMedal ( med1 , 1 ) else
13245: LD_STRING med1
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 101
13255: GO 13268
// AddMedal ( med1 , - 1 ) ;
13257: LD_STRING med1
13259: PPUSH
13260: LD_INT 1
13262: NEG
13263: PPUSH
13264: CALL_OW 101
// if hasRockets then
13268: LD_EXP 9
13272: IFFALSE 13286
// AddMedal ( med2 , 1 ) else
13274: LD_STRING med2
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 101
13284: GO 13297
// AddMedal ( med2 , - 1 ) ;
13286: LD_STRING med2
13288: PPUSH
13289: LD_INT 1
13291: NEG
13292: PPUSH
13293: CALL_OW 101
// if tick < [ 50 50$00 , 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
13297: LD_OWVAR 1
13301: PUSH
13302: LD_INT 105000
13304: PUSH
13305: LD_INT 94500
13307: PUSH
13308: LD_INT 84000
13310: PUSH
13311: LD_INT 73500
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: LD_OWVAR 67
13324: ARRAY
13325: LESS
13326: IFFALSE 13340
// AddMedal ( med3 , 1 ) else
13328: LD_STRING med3
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 101
13338: GO 13351
// AddMedal ( med3 , - 1 ) ;
13340: LD_STRING med3
13342: PPUSH
13343: LD_INT 1
13345: NEG
13346: PPUSH
13347: CALL_OW 101
// GiveMedals ( MAIN ) ;
13351: LD_STRING MAIN
13353: PPUSH
13354: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13358: LD_INT 22
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 23
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: PPUSH
13393: CALL_OW 69
13397: PPUSH
13398: CALL_OW 43
// SaveCharacters ( usCommander , 07_UsCommander ) ;
13402: LD_EXP 27
13406: PPUSH
13407: LD_STRING 07_UsCommander
13409: PPUSH
13410: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff usCommander , 07_Americans ) ;
13414: LD_INT 22
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: PUSH
13454: LD_EXP 27
13458: DIFF
13459: PPUSH
13460: LD_STRING 07_Americans
13462: PPUSH
13463: CALL_OW 38
// SaveCharacters ( Heike , 07_Heike ) ;
13467: LD_EXP 12
13471: PPUSH
13472: LD_STRING 07_Heike
13474: PPUSH
13475: CALL_OW 38
// if Aviradze then
13479: LD_EXP 23
13483: IFFALSE 13497
// SaveCharacters ( Aviradze , 07_Aviradze ) ;
13485: LD_EXP 23
13489: PPUSH
13490: LD_STRING 07_Aviradze
13492: PPUSH
13493: CALL_OW 38
// if Ibrahim then
13497: LD_EXP 15
13501: IFFALSE 13515
// SaveCharacters ( Ibrahim , 07_Ibrahim ) ;
13503: LD_EXP 15
13507: PPUSH
13508: LD_STRING 07_Ibrahim
13510: PPUSH
13511: CALL_OW 38
// if Kamil then
13515: LD_EXP 16
13519: IFFALSE 13533
// SaveCharacters ( Kamil , 07_Kamil ) ;
13521: LD_EXP 16
13525: PPUSH
13526: LD_STRING 07_Kamil
13528: PPUSH
13529: CALL_OW 38
// if Sophia then
13533: LD_EXP 18
13537: IFFALSE 13551
// SaveCharacters ( Sophia , 07_Sophia ) ;
13539: LD_EXP 18
13543: PPUSH
13544: LD_STRING 07_Sophia
13546: PPUSH
13547: CALL_OW 38
// if Kaia then
13551: LD_EXP 17
13555: IFFALSE 13569
// SaveCharacters ( Kaia , 07_Kaia ) ;
13557: LD_EXP 17
13561: PPUSH
13562: LD_STRING 07_Kaia
13564: PPUSH
13565: CALL_OW 38
// if Givi then
13569: LD_EXP 13
13573: IFFALSE 13587
// SaveCharacters ( Givi , 07_Givi ) ;
13575: LD_EXP 13
13579: PPUSH
13580: LD_STRING 07_Givi
13582: PPUSH
13583: CALL_OW 38
// if Mike then
13587: LD_EXP 14
13591: IFFALSE 13605
// SaveCharacters ( Mike , 07_Mike ) ;
13593: LD_EXP 14
13597: PPUSH
13598: LD_STRING 07_Mike
13600: PPUSH
13601: CALL_OW 38
// if Markov then
13605: LD_EXP 19
13609: IFFALSE 13623
// SaveCharacters ( Markov , 07_Markov ) ;
13611: LD_EXP 19
13615: PPUSH
13616: LD_STRING 07_Markov
13618: PPUSH
13619: CALL_OW 38
// if Kurt then
13623: LD_EXP 22
13627: IFFALSE 13641
// SaveCharacters ( Kurt , 07_Kurt ) ;
13629: LD_EXP 22
13633: PPUSH
13634: LD_STRING 07_Kurt
13636: PPUSH
13637: CALL_OW 38
// if heikeSecondSquad then
13641: LD_EXP 24
13645: IFFALSE 13659
// SaveCharacters ( heikeSecondSquad , 07_others ) ;
13647: LD_EXP 24
13651: PPUSH
13652: LD_STRING 07_others
13654: PPUSH
13655: CALL_OW 38
// YouWin ;
13659: CALL_OW 103
// DialogueOff ;
13663: CALL_OW 7
// end ; end_of_file
13667: END
// every 0 0$40 + 0 0$40 trigger GetResourceArea ( cratesRiverArea , mat_cans ) < [ 300 , 150 , 100 , 80 ] [ Difficulty ] do
13668: LD_INT 7
13670: PPUSH
13671: LD_INT 1
13673: PPUSH
13674: CALL_OW 287
13678: PUSH
13679: LD_INT 300
13681: PUSH
13682: LD_INT 150
13684: PUSH
13685: LD_INT 100
13687: PUSH
13688: LD_INT 80
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: PUSH
13697: LD_OWVAR 67
13701: ARRAY
13702: LESS
13703: IFFALSE 13730
13705: GO 13707
13707: DISABLE
// begin enable ;
13708: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesRiverArea , true ) ;
13709: LD_INT 1
13711: PPUSH
13712: LD_INT 5
13714: PPUSH
13715: CALL_OW 12
13719: PPUSH
13720: LD_INT 7
13722: PPUSH
13723: LD_INT 1
13725: PPUSH
13726: CALL_OW 55
// end ;
13730: END
// every 2 2$00 trigger GetResourceArea ( cratesForestArea , mat_cans ) < [ 300 , 250 , 200 , 180 ] [ Difficulty ] do
13731: LD_INT 8
13733: PPUSH
13734: LD_INT 1
13736: PPUSH
13737: CALL_OW 287
13741: PUSH
13742: LD_INT 300
13744: PUSH
13745: LD_INT 250
13747: PUSH
13748: LD_INT 200
13750: PUSH
13751: LD_INT 180
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: LD_OWVAR 67
13764: ARRAY
13765: LESS
13766: IFFALSE 13793
13768: GO 13770
13770: DISABLE
// begin enable ;
13771: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesForestArea , true ) ;
13772: LD_INT 1
13774: PPUSH
13775: LD_INT 5
13777: PPUSH
13778: CALL_OW 12
13782: PPUSH
13783: LD_INT 8
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 55
// end ;
13793: END
// every 0 0$40 trigger tick < 4 4$10 do
13794: LD_OWVAR 1
13798: PUSH
13799: LD_INT 8750
13801: LESS
13802: IFFALSE 13835
13804: GO 13806
13806: DISABLE
// begin enable ;
13807: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 130 , 18 , 12 , true ) ;
13808: LD_INT 1
13810: PPUSH
13811: LD_INT 5
13813: PPUSH
13814: CALL_OW 12
13818: PPUSH
13819: LD_INT 130
13821: PPUSH
13822: LD_INT 18
13824: PPUSH
13825: LD_INT 12
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: CALL_OW 56
// end ; end_of_file
13835: END
// export function PrepareRussianFirstWaveAttack ; var i , tmp , un , veh ; begin
13836: LD_INT 0
13838: PPUSH
13839: PPUSH
13840: PPUSH
13841: PPUSH
13842: PPUSH
// uc_side := 3 ;
13843: LD_ADDR_OWVAR 20
13847: PUSH
13848: LD_INT 3
13850: ST_TO_ADDR
// uc_nation := 3 ;
13851: LD_ADDR_OWVAR 21
13855: PUSH
13856: LD_INT 3
13858: ST_TO_ADDR
// tmp := [ [ 184 , 144 , 5 ] , [ 191 , 147 , 5 ] , [ 202 , 151 , 4 ] , [ 210 , 152 , 4 ] ] ;
13859: LD_ADDR_VAR 0 3
13863: PUSH
13864: LD_INT 184
13866: PUSH
13867: LD_INT 144
13869: PUSH
13870: LD_INT 5
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 191
13880: PUSH
13881: LD_INT 147
13883: PUSH
13884: LD_INT 5
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 202
13894: PUSH
13895: LD_INT 151
13897: PUSH
13898: LD_INT 4
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 210
13908: PUSH
13909: LD_INT 152
13911: PUSH
13912: LD_INT 4
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: ST_TO_ADDR
// for i := 1 to 4 do
13926: LD_ADDR_VAR 0 2
13930: PUSH
13931: DOUBLE
13932: LD_INT 1
13934: DEC
13935: ST_TO_ADDR
13936: LD_INT 4
13938: PUSH
13939: FOR_TO
13940: IFFALSE 14109
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ i mod 3 + 1 ] , 40 ) ;
13942: LD_INT 24
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: LD_INT 43
13953: PUSH
13954: LD_INT 44
13956: PUSH
13957: LD_INT 46
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_VAR 0 2
13969: PUSH
13970: LD_INT 3
13972: MOD
13973: PUSH
13974: LD_INT 1
13976: PLUS
13977: ARRAY
13978: PPUSH
13979: LD_INT 40
13981: PPUSH
13982: CALL 19874 0 5
// veh := CreateVehicle ;
13986: LD_ADDR_VAR 0 5
13990: PUSH
13991: CALL_OW 45
13995: ST_TO_ADDR
// SetDir ( veh , tmp [ i ] [ 3 ] ) ;
13996: LD_VAR 0 5
14000: PPUSH
14001: LD_VAR 0 3
14005: PUSH
14006: LD_VAR 0 2
14010: ARRAY
14011: PUSH
14012: LD_INT 3
14014: ARRAY
14015: PPUSH
14016: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
14020: LD_VAR 0 5
14024: PPUSH
14025: LD_VAR 0 3
14029: PUSH
14030: LD_VAR 0 2
14034: ARRAY
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_VAR 0 3
14044: PUSH
14045: LD_VAR 0 2
14049: ARRAY
14050: PUSH
14051: LD_INT 2
14053: ARRAY
14054: PPUSH
14055: LD_INT 0
14057: PPUSH
14058: CALL_OW 48
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14062: LD_INT 0
14064: PPUSH
14065: LD_INT 6
14067: PUSH
14068: LD_INT 7
14070: PUSH
14071: LD_INT 8
14073: PUSH
14074: LD_INT 8
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: PUSH
14083: LD_OWVAR 67
14087: ARRAY
14088: PPUSH
14089: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14093: CALL_OW 44
14097: PPUSH
14098: LD_VAR 0 5
14102: PPUSH
14103: CALL_OW 52
// end ;
14107: GO 13939
14109: POP
14110: POP
// for i := 1 to 4 do
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: DOUBLE
14117: LD_INT 1
14119: DEC
14120: ST_TO_ADDR
14121: LD_INT 4
14123: PUSH
14124: FOR_TO
14125: IFFALSE 14191
// begin PrepareSoldier ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14127: LD_INT 0
14129: PPUSH
14130: LD_INT 6
14132: PUSH
14133: LD_INT 7
14135: PUSH
14136: LD_INT 8
14138: PUSH
14139: LD_INT 8
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: LD_OWVAR 67
14152: ARRAY
14153: PPUSH
14154: CALL_OW 381
// un := CreateHuman ;
14158: LD_ADDR_VAR 0 4
14162: PUSH
14163: CALL_OW 44
14167: ST_TO_ADDR
// PlaceUnitXYR ( un , 185 , 145 , 6 , false ) ;
14168: LD_VAR 0 4
14172: PPUSH
14173: LD_INT 185
14175: PPUSH
14176: LD_INT 145
14178: PPUSH
14179: LD_INT 6
14181: PPUSH
14182: LD_INT 0
14184: PPUSH
14185: CALL_OW 50
// end ;
14189: GO 14124
14191: POP
14192: POP
// end ;
14193: LD_VAR 0 1
14197: RET
// export function PrepareRussianLastWaveAttack ; var i , veh ; begin
14198: LD_INT 0
14200: PPUSH
14201: PPUSH
14202: PPUSH
// uc_side := 3 ;
14203: LD_ADDR_OWVAR 20
14207: PUSH
14208: LD_INT 3
14210: ST_TO_ADDR
// if Difficulty > 1 then
14211: LD_OWVAR 67
14215: PUSH
14216: LD_INT 1
14218: GREATER
14219: IFFALSE 14381
// begin uc_nation := 0 ;
14221: LD_ADDR_OWVAR 21
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty + 1 ] do
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: DOUBLE
14235: LD_INT 1
14237: DEC
14238: ST_TO_ADDR
14239: LD_INT 4
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: LD_INT 6
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: PUSH
14253: LD_OWVAR 67
14257: PUSH
14258: LD_INT 1
14260: PLUS
14261: ARRAY
14262: PUSH
14263: FOR_TO
14264: IFFALSE 14379
// begin hc_class := class_apeman_soldier ;
14266: LD_ADDR_OWVAR 28
14270: PUSH
14271: LD_INT 15
14273: ST_TO_ADDR
// hc_gallery :=  ;
14274: LD_ADDR_OWVAR 33
14278: PUSH
14279: LD_STRING 
14281: ST_TO_ADDR
// hc_name := [ Treci , Ivan , Yaromir , Nadzieia , Krasna , Piaty ] [ rand ( 1 , 6 ) ] ;
14282: LD_ADDR_OWVAR 26
14286: PUSH
14287: LD_STRING Treci
14289: PUSH
14290: LD_STRING Ivan
14292: PUSH
14293: LD_STRING Yaromir
14295: PUSH
14296: LD_STRING Nadzieia
14298: PUSH
14299: LD_STRING Krasna
14301: PUSH
14302: LD_STRING Piaty
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 1
14315: PPUSH
14316: LD_INT 6
14318: PPUSH
14319: CALL_OW 12
14323: ARRAY
14324: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 0 , 0 ] ;
14325: LD_ADDR_OWVAR 31
14329: PUSH
14330: LD_INT 5
14332: PUSH
14333: LD_INT 0
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: LD_INT 0
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: ST_TO_ADDR
// hc_sex := sex_male ;
14348: LD_ADDR_OWVAR 27
14352: PUSH
14353: LD_INT 1
14355: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 178 , 148 , 6 , false ) ;
14356: CALL_OW 44
14360: PPUSH
14361: LD_INT 178
14363: PPUSH
14364: LD_INT 148
14366: PPUSH
14367: LD_INT 6
14369: PPUSH
14370: LD_INT 0
14372: PPUSH
14373: CALL_OW 50
// end ;
14377: GO 14263
14379: POP
14380: POP
// end ; for i := 1 to [ 4 , 6 , 7 , 9 ] [ Difficulty ] do
14381: LD_ADDR_VAR 0 2
14385: PUSH
14386: DOUBLE
14387: LD_INT 1
14389: DEC
14390: ST_TO_ADDR
14391: LD_INT 4
14393: PUSH
14394: LD_INT 6
14396: PUSH
14397: LD_INT 7
14399: PUSH
14400: LD_INT 9
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: PUSH
14409: LD_OWVAR 67
14413: ARRAY
14414: PUSH
14415: FOR_TO
14416: IFFALSE 14583
// begin uc_nation := 3 ;
14418: LD_ADDR_OWVAR 21
14422: PUSH
14423: LD_INT 3
14425: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gatling_gun , ru_gun ] [ i mod 3 + 1 ] , 44 ) ;
14426: LD_INT 22
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_INT 1
14434: PPUSH
14435: LD_INT 45
14437: PUSH
14438: LD_INT 43
14440: PUSH
14441: LD_INT 44
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: PUSH
14449: LD_VAR 0 2
14453: PUSH
14454: LD_INT 3
14456: MOD
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: ARRAY
14462: PPUSH
14463: LD_INT 44
14465: PPUSH
14466: CALL 19874 0 5
// veh := CreateVehicle ;
14470: LD_ADDR_VAR 0 3
14474: PUSH
14475: CALL_OW 45
14479: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_INT 4
14487: PPUSH
14488: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: LD_INT 0
14502: PPUSH
14503: CALL_OW 49
// PrepareMechanic ( false , [ 6 , 7 , 8 , 8 ] [ Difficulty ] ) ;
14507: LD_INT 0
14509: PPUSH
14510: LD_INT 6
14512: PUSH
14513: LD_INT 7
14515: PUSH
14516: LD_INT 8
14518: PUSH
14519: LD_INT 8
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_OWVAR 67
14532: ARRAY
14533: PPUSH
14534: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
14538: CALL_OW 44
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: CALL_OW 52
// AgressiveMove ( veh , [ [ 178 , 137 ] ] ) ;
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 178
14559: PUSH
14560: LD_INT 137
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: PPUSH
14570: CALL 54142 0 2
// wait ( 0 0$2 ) ;
14574: LD_INT 70
14576: PPUSH
14577: CALL_OW 67
// end ;
14581: GO 14415
14583: POP
14584: POP
// end ;
14585: LD_VAR 0 1
14589: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i , tmp ;
14590: LD_INT 22
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 32
14602: PUSH
14603: LD_INT 1
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PPUSH
14614: CALL_OW 69
14618: IFFALSE 14706
14620: GO 14622
14622: DISABLE
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
// begin enable ;
14627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) ;
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_INT 3
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 32
14645: PUSH
14646: LD_INT 1
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PPUSH
14657: CALL_OW 69
14661: ST_TO_ADDR
// for i in tmp do
14662: LD_ADDR_VAR 0 1
14666: PUSH
14667: LD_VAR 0 2
14671: PUSH
14672: FOR_IN
14673: IFFALSE 14704
// if GetFuel ( i ) < 3 then
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 261
14684: PUSH
14685: LD_INT 3
14687: LESS
14688: IFFALSE 14702
// SetFuel ( i , 3 ) ;
14690: LD_VAR 0 1
14694: PPUSH
14695: LD_INT 3
14697: PPUSH
14698: CALL_OW 240
14702: GO 14672
14704: POP
14705: POP
// end ;
14706: PPOPN 2
14708: END
// every 0 0$1 trigger russianAttack and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i , mech , tmp ;
14709: LD_EXP 8
14713: PUSH
14714: LD_INT 22
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 21
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: AND
14743: IFFALSE 15007
14745: GO 14747
14747: DISABLE
14748: LD_INT 0
14750: PPUSH
14751: PPUSH
14752: PPUSH
// begin enable ;
14753: ENABLE
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
14754: LD_ADDR_VAR 0 2
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_INT 3
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 25
14771: PUSH
14772: LD_INT 3
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 3
14781: PUSH
14782: LD_INT 55
14784: PUSH
14785: EMPTY
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: ST_TO_ADDR
// if mech then
14802: LD_VAR 0 2
14806: IFFALSE 14876
// for i in mech do
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_VAR 0 2
14817: PUSH
14818: FOR_IN
14819: IFFALSE 14874
// begin if IsInArea ( i , escapeArea ) then
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 13
14828: PPUSH
14829: CALL_OW 308
14833: IFFALSE 14846
// RemoveUnit ( i ) else
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 64
14844: GO 14872
// if IsOk ( i ) then
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 302
14855: IFFALSE 14872
// ComMoveXY ( i , 196 , 155 ) ;
14857: LD_VAR 0 1
14861: PPUSH
14862: LD_INT 196
14864: PPUSH
14865: LD_INT 155
14867: PPUSH
14868: CALL_OW 111
// end ;
14872: GO 14818
14874: POP
14875: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_apeman_soldier ] , [ f_type , unit_vehicle ] ] , [ f_ok ] ] ) ;
14876: LD_ADDR_VAR 0 3
14880: PUSH
14881: LD_INT 22
14883: PUSH
14884: LD_INT 3
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 2
14893: PUSH
14894: LD_INT 25
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 25
14906: PUSH
14907: LD_INT 15
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 50
14932: PUSH
14933: EMPTY
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: ST_TO_ADDR
// if tmp then
14946: LD_VAR 0 3
14950: IFFALSE 15007
// AgressiveMove ( tmp , [ [ 171 , 106 ] , [ 145 , 69 ] , [ 132 , 38 ] , [ 126 , 15 ] ] ) ;
14952: LD_VAR 0 3
14956: PPUSH
14957: LD_INT 171
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 145
14969: PUSH
14970: LD_INT 69
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 132
14979: PUSH
14980: LD_INT 38
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 126
14989: PUSH
14990: LD_INT 15
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL 54142 0 2
// end ; end_of_file
15007: PPOPN 3
15009: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
// if exist_mode then
15014: LD_VAR 0 2
15018: IFFALSE 15043
// unit := CreateCharacter ( prefix & ident ) else
15020: LD_ADDR_VAR 0 5
15024: PUSH
15025: LD_VAR 0 3
15029: PUSH
15030: LD_VAR 0 1
15034: STR
15035: PPUSH
15036: CALL_OW 34
15040: ST_TO_ADDR
15041: GO 15058
// unit := NewCharacter ( ident ) ;
15043: LD_ADDR_VAR 0 5
15047: PUSH
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL_OW 25
15057: ST_TO_ADDR
// result := unit ;
15058: LD_ADDR_VAR 0 4
15062: PUSH
15063: LD_VAR 0 5
15067: ST_TO_ADDR
// end ;
15068: LD_VAR 0 4
15072: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15073: LD_INT 0
15075: PPUSH
15076: PPUSH
// if not side or not nation then
15077: LD_VAR 0 1
15081: NOT
15082: PUSH
15083: LD_VAR 0 2
15087: NOT
15088: OR
15089: IFFALSE 15093
// exit ;
15091: GO 15861
// case nation of nation_american :
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 1
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15320
15106: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15107: LD_ADDR_VAR 0 4
15111: PUSH
15112: LD_INT 35
15114: PUSH
15115: LD_INT 45
15117: PUSH
15118: LD_INT 46
15120: PUSH
15121: LD_INT 47
15123: PUSH
15124: LD_INT 82
15126: PUSH
15127: LD_INT 83
15129: PUSH
15130: LD_INT 84
15132: PUSH
15133: LD_INT 85
15135: PUSH
15136: LD_INT 86
15138: PUSH
15139: LD_INT 1
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: LD_INT 6
15147: PUSH
15148: LD_INT 15
15150: PUSH
15151: LD_INT 16
15153: PUSH
15154: LD_INT 7
15156: PUSH
15157: LD_INT 12
15159: PUSH
15160: LD_INT 13
15162: PUSH
15163: LD_INT 10
15165: PUSH
15166: LD_INT 14
15168: PUSH
15169: LD_INT 20
15171: PUSH
15172: LD_INT 21
15174: PUSH
15175: LD_INT 22
15177: PUSH
15178: LD_INT 25
15180: PUSH
15181: LD_INT 32
15183: PUSH
15184: LD_INT 27
15186: PUSH
15187: LD_INT 36
15189: PUSH
15190: LD_INT 69
15192: PUSH
15193: LD_INT 39
15195: PUSH
15196: LD_INT 34
15198: PUSH
15199: LD_INT 40
15201: PUSH
15202: LD_INT 48
15204: PUSH
15205: LD_INT 49
15207: PUSH
15208: LD_INT 50
15210: PUSH
15211: LD_INT 51
15213: PUSH
15214: LD_INT 52
15216: PUSH
15217: LD_INT 53
15219: PUSH
15220: LD_INT 54
15222: PUSH
15223: LD_INT 55
15225: PUSH
15226: LD_INT 56
15228: PUSH
15229: LD_INT 57
15231: PUSH
15232: LD_INT 58
15234: PUSH
15235: LD_INT 59
15237: PUSH
15238: LD_INT 60
15240: PUSH
15241: LD_INT 61
15243: PUSH
15244: LD_INT 62
15246: PUSH
15247: LD_INT 80
15249: PUSH
15250: LD_INT 82
15252: PUSH
15253: LD_INT 83
15255: PUSH
15256: LD_INT 84
15258: PUSH
15259: LD_INT 85
15261: PUSH
15262: LD_INT 86
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: ST_TO_ADDR
15318: GO 15785
15320: LD_INT 2
15322: DOUBLE
15323: EQUAL
15324: IFTRUE 15328
15326: GO 15554
15328: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15329: LD_ADDR_VAR 0 4
15333: PUSH
15334: LD_INT 35
15336: PUSH
15337: LD_INT 45
15339: PUSH
15340: LD_INT 46
15342: PUSH
15343: LD_INT 47
15345: PUSH
15346: LD_INT 82
15348: PUSH
15349: LD_INT 83
15351: PUSH
15352: LD_INT 84
15354: PUSH
15355: LD_INT 85
15357: PUSH
15358: LD_INT 87
15360: PUSH
15361: LD_INT 70
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: LD_INT 11
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 4
15375: PUSH
15376: LD_INT 5
15378: PUSH
15379: LD_INT 6
15381: PUSH
15382: LD_INT 15
15384: PUSH
15385: LD_INT 18
15387: PUSH
15388: LD_INT 7
15390: PUSH
15391: LD_INT 17
15393: PUSH
15394: LD_INT 8
15396: PUSH
15397: LD_INT 20
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 72
15408: PUSH
15409: LD_INT 26
15411: PUSH
15412: LD_INT 69
15414: PUSH
15415: LD_INT 39
15417: PUSH
15418: LD_INT 40
15420: PUSH
15421: LD_INT 41
15423: PUSH
15424: LD_INT 42
15426: PUSH
15427: LD_INT 43
15429: PUSH
15430: LD_INT 48
15432: PUSH
15433: LD_INT 49
15435: PUSH
15436: LD_INT 50
15438: PUSH
15439: LD_INT 51
15441: PUSH
15442: LD_INT 52
15444: PUSH
15445: LD_INT 53
15447: PUSH
15448: LD_INT 54
15450: PUSH
15451: LD_INT 55
15453: PUSH
15454: LD_INT 56
15456: PUSH
15457: LD_INT 60
15459: PUSH
15460: LD_INT 61
15462: PUSH
15463: LD_INT 62
15465: PUSH
15466: LD_INT 66
15468: PUSH
15469: LD_INT 67
15471: PUSH
15472: LD_INT 68
15474: PUSH
15475: LD_INT 81
15477: PUSH
15478: LD_INT 82
15480: PUSH
15481: LD_INT 83
15483: PUSH
15484: LD_INT 84
15486: PUSH
15487: LD_INT 85
15489: PUSH
15490: LD_INT 87
15492: PUSH
15493: LD_INT 88
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: ST_TO_ADDR
15552: GO 15785
15554: LD_INT 3
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 15784
15562: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15563: LD_ADDR_VAR 0 4
15567: PUSH
15568: LD_INT 46
15570: PUSH
15571: LD_INT 47
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 82
15582: PUSH
15583: LD_INT 83
15585: PUSH
15586: LD_INT 84
15588: PUSH
15589: LD_INT 85
15591: PUSH
15592: LD_INT 86
15594: PUSH
15595: LD_INT 11
15597: PUSH
15598: LD_INT 9
15600: PUSH
15601: LD_INT 20
15603: PUSH
15604: LD_INT 19
15606: PUSH
15607: LD_INT 21
15609: PUSH
15610: LD_INT 24
15612: PUSH
15613: LD_INT 22
15615: PUSH
15616: LD_INT 25
15618: PUSH
15619: LD_INT 28
15621: PUSH
15622: LD_INT 29
15624: PUSH
15625: LD_INT 30
15627: PUSH
15628: LD_INT 31
15630: PUSH
15631: LD_INT 37
15633: PUSH
15634: LD_INT 38
15636: PUSH
15637: LD_INT 32
15639: PUSH
15640: LD_INT 27
15642: PUSH
15643: LD_INT 33
15645: PUSH
15646: LD_INT 69
15648: PUSH
15649: LD_INT 39
15651: PUSH
15652: LD_INT 34
15654: PUSH
15655: LD_INT 40
15657: PUSH
15658: LD_INT 71
15660: PUSH
15661: LD_INT 23
15663: PUSH
15664: LD_INT 44
15666: PUSH
15667: LD_INT 48
15669: PUSH
15670: LD_INT 49
15672: PUSH
15673: LD_INT 50
15675: PUSH
15676: LD_INT 51
15678: PUSH
15679: LD_INT 52
15681: PUSH
15682: LD_INT 53
15684: PUSH
15685: LD_INT 54
15687: PUSH
15688: LD_INT 55
15690: PUSH
15691: LD_INT 56
15693: PUSH
15694: LD_INT 57
15696: PUSH
15697: LD_INT 58
15699: PUSH
15700: LD_INT 59
15702: PUSH
15703: LD_INT 63
15705: PUSH
15706: LD_INT 64
15708: PUSH
15709: LD_INT 65
15711: PUSH
15712: LD_INT 82
15714: PUSH
15715: LD_INT 83
15717: PUSH
15718: LD_INT 84
15720: PUSH
15721: LD_INT 85
15723: PUSH
15724: LD_INT 86
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: ST_TO_ADDR
15782: GO 15785
15784: POP
// if state > - 1 and state < 3 then
15785: LD_VAR 0 3
15789: PUSH
15790: LD_INT 1
15792: NEG
15793: GREATER
15794: PUSH
15795: LD_VAR 0 3
15799: PUSH
15800: LD_INT 3
15802: LESS
15803: AND
15804: IFFALSE 15861
// for i in result do
15806: LD_ADDR_VAR 0 5
15810: PUSH
15811: LD_VAR 0 4
15815: PUSH
15816: FOR_IN
15817: IFFALSE 15859
// if GetTech ( i , side ) <> state then
15819: LD_VAR 0 5
15823: PPUSH
15824: LD_VAR 0 1
15828: PPUSH
15829: CALL_OW 321
15833: PUSH
15834: LD_VAR 0 3
15838: NONEQUAL
15839: IFFALSE 15857
// result := result diff i ;
15841: LD_ADDR_VAR 0 4
15845: PUSH
15846: LD_VAR 0 4
15850: PUSH
15851: LD_VAR 0 5
15855: DIFF
15856: ST_TO_ADDR
15857: GO 15816
15859: POP
15860: POP
// end ;
15861: LD_VAR 0 4
15865: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15866: LD_INT 0
15868: PPUSH
15869: PPUSH
15870: PPUSH
// result := true ;
15871: LD_ADDR_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15879: LD_ADDR_VAR 0 5
15883: PUSH
15884: LD_VAR 0 2
15888: PPUSH
15889: CALL_OW 480
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 5
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 15952
// for i in tmp do
15903: LD_ADDR_VAR 0 4
15907: PUSH
15908: LD_VAR 0 5
15912: PUSH
15913: FOR_IN
15914: IFFALSE 15950
// if GetTech ( i , side ) <> state_researched then
15916: LD_VAR 0 4
15920: PPUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 321
15930: PUSH
15931: LD_INT 2
15933: NONEQUAL
15934: IFFALSE 15948
// begin result := false ;
15936: LD_ADDR_VAR 0 3
15940: PUSH
15941: LD_INT 0
15943: ST_TO_ADDR
// exit ;
15944: POP
15945: POP
15946: GO 15952
// end ;
15948: GO 15913
15950: POP
15951: POP
// end ;
15952: LD_VAR 0 3
15956: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15957: LD_INT 0
15959: PPUSH
15960: PPUSH
15961: PPUSH
15962: PPUSH
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
15967: PPUSH
15968: PPUSH
15969: PPUSH
15970: PPUSH
15971: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15972: LD_VAR 0 1
15976: NOT
15977: PUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 257
15987: PUSH
15988: LD_INT 9
15990: NONEQUAL
15991: OR
15992: IFFALSE 15996
// exit ;
15994: GO 16569
// side := GetSide ( unit ) ;
15996: LD_ADDR_VAR 0 9
16000: PUSH
16001: LD_VAR 0 1
16005: PPUSH
16006: CALL_OW 255
16010: ST_TO_ADDR
// tech_space := tech_spacanom ;
16011: LD_ADDR_VAR 0 12
16015: PUSH
16016: LD_INT 29
16018: ST_TO_ADDR
// tech_time := tech_taurad ;
16019: LD_ADDR_VAR 0 13
16023: PUSH
16024: LD_INT 28
16026: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16027: LD_ADDR_VAR 0 11
16031: PUSH
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 310
16041: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16042: LD_VAR 0 11
16046: PPUSH
16047: CALL_OW 247
16051: PUSH
16052: LD_INT 2
16054: EQUAL
16055: IFFALSE 16059
// exit ;
16057: GO 16569
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16059: LD_ADDR_VAR 0 8
16063: PUSH
16064: LD_INT 81
16066: PUSH
16067: LD_VAR 0 9
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 3
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 3
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: ST_TO_ADDR
// if not tmp then
16102: LD_VAR 0 8
16106: NOT
16107: IFFALSE 16111
// exit ;
16109: GO 16569
// if in_unit then
16111: LD_VAR 0 11
16115: IFFALSE 16139
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16117: LD_ADDR_VAR 0 10
16121: PUSH
16122: LD_VAR 0 8
16126: PPUSH
16127: LD_VAR 0 11
16131: PPUSH
16132: CALL_OW 74
16136: ST_TO_ADDR
16137: GO 16159
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16139: LD_ADDR_VAR 0 10
16143: PUSH
16144: LD_VAR 0 8
16148: PPUSH
16149: LD_VAR 0 1
16153: PPUSH
16154: CALL_OW 74
16158: ST_TO_ADDR
// if not enemy then
16159: LD_VAR 0 10
16163: NOT
16164: IFFALSE 16168
// exit ;
16166: GO 16569
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16168: LD_VAR 0 11
16172: PUSH
16173: LD_VAR 0 11
16177: PPUSH
16178: LD_VAR 0 10
16182: PPUSH
16183: CALL_OW 296
16187: PUSH
16188: LD_INT 13
16190: GREATER
16191: AND
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_VAR 0 10
16202: PPUSH
16203: CALL_OW 296
16207: PUSH
16208: LD_INT 12
16210: GREATER
16211: OR
16212: IFFALSE 16216
// exit ;
16214: GO 16569
// missile := [ 1 ] ;
16216: LD_ADDR_VAR 0 14
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: EMPTY
16225: LIST
16226: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16227: LD_VAR 0 9
16231: PPUSH
16232: LD_VAR 0 12
16236: PPUSH
16237: CALL_OW 325
16241: IFFALSE 16270
// missile := Insert ( missile , missile + 1 , 2 ) ;
16243: LD_ADDR_VAR 0 14
16247: PUSH
16248: LD_VAR 0 14
16252: PPUSH
16253: LD_VAR 0 14
16257: PUSH
16258: LD_INT 1
16260: PLUS
16261: PPUSH
16262: LD_INT 2
16264: PPUSH
16265: CALL_OW 2
16269: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16270: LD_VAR 0 9
16274: PPUSH
16275: LD_VAR 0 13
16279: PPUSH
16280: CALL_OW 325
16284: PUSH
16285: LD_VAR 0 10
16289: PPUSH
16290: CALL_OW 255
16294: PPUSH
16295: LD_VAR 0 13
16299: PPUSH
16300: CALL_OW 325
16304: NOT
16305: AND
16306: IFFALSE 16335
// missile := Insert ( missile , missile + 1 , 3 ) ;
16308: LD_ADDR_VAR 0 14
16312: PUSH
16313: LD_VAR 0 14
16317: PPUSH
16318: LD_VAR 0 14
16322: PUSH
16323: LD_INT 1
16325: PLUS
16326: PPUSH
16327: LD_INT 3
16329: PPUSH
16330: CALL_OW 2
16334: ST_TO_ADDR
// if missile < 2 then
16335: LD_VAR 0 14
16339: PUSH
16340: LD_INT 2
16342: LESS
16343: IFFALSE 16347
// exit ;
16345: GO 16569
// x := GetX ( enemy ) ;
16347: LD_ADDR_VAR 0 4
16351: PUSH
16352: LD_VAR 0 10
16356: PPUSH
16357: CALL_OW 250
16361: ST_TO_ADDR
// y := GetY ( enemy ) ;
16362: LD_ADDR_VAR 0 5
16366: PUSH
16367: LD_VAR 0 10
16371: PPUSH
16372: CALL_OW 251
16376: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16377: LD_ADDR_VAR 0 6
16381: PUSH
16382: LD_VAR 0 4
16386: PUSH
16387: LD_INT 1
16389: NEG
16390: PPUSH
16391: LD_INT 1
16393: PPUSH
16394: CALL_OW 12
16398: PLUS
16399: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16400: LD_ADDR_VAR 0 7
16404: PUSH
16405: LD_VAR 0 5
16409: PUSH
16410: LD_INT 1
16412: NEG
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 12
16421: PLUS
16422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16423: LD_VAR 0 6
16427: PPUSH
16428: LD_VAR 0 7
16432: PPUSH
16433: CALL_OW 488
16437: NOT
16438: IFFALSE 16460
// begin _x := x ;
16440: LD_ADDR_VAR 0 6
16444: PUSH
16445: LD_VAR 0 4
16449: ST_TO_ADDR
// _y := y ;
16450: LD_ADDR_VAR 0 7
16454: PUSH
16455: LD_VAR 0 5
16459: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16460: LD_ADDR_VAR 0 3
16464: PUSH
16465: LD_INT 1
16467: PPUSH
16468: LD_VAR 0 14
16472: PPUSH
16473: CALL_OW 12
16477: ST_TO_ADDR
// case i of 1 :
16478: LD_VAR 0 3
16482: PUSH
16483: LD_INT 1
16485: DOUBLE
16486: EQUAL
16487: IFTRUE 16491
16489: GO 16508
16491: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_VAR 0 10
16501: PPUSH
16502: CALL_OW 115
16506: GO 16569
16508: LD_INT 2
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16538
16516: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16517: LD_VAR 0 1
16521: PPUSH
16522: LD_VAR 0 6
16526: PPUSH
16527: LD_VAR 0 7
16531: PPUSH
16532: CALL_OW 153
16536: GO 16569
16538: LD_INT 3
16540: DOUBLE
16541: EQUAL
16542: IFTRUE 16546
16544: GO 16568
16546: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_VAR 0 6
16556: PPUSH
16557: LD_VAR 0 7
16561: PPUSH
16562: CALL_OW 154
16566: GO 16569
16568: POP
// end ;
16569: LD_VAR 0 2
16573: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16574: LD_INT 0
16576: PPUSH
16577: PPUSH
16578: PPUSH
16579: PPUSH
16580: PPUSH
16581: PPUSH
// if not unit or not building then
16582: LD_VAR 0 1
16586: NOT
16587: PUSH
16588: LD_VAR 0 2
16592: NOT
16593: OR
16594: IFFALSE 16598
// exit ;
16596: GO 16756
// x := GetX ( building ) ;
16598: LD_ADDR_VAR 0 5
16602: PUSH
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 250
16612: ST_TO_ADDR
// y := GetY ( building ) ;
16613: LD_ADDR_VAR 0 6
16617: PUSH
16618: LD_VAR 0 2
16622: PPUSH
16623: CALL_OW 251
16627: ST_TO_ADDR
// for i = 0 to 5 do
16628: LD_ADDR_VAR 0 4
16632: PUSH
16633: DOUBLE
16634: LD_INT 0
16636: DEC
16637: ST_TO_ADDR
16638: LD_INT 5
16640: PUSH
16641: FOR_TO
16642: IFFALSE 16754
// begin _x := ShiftX ( x , i , 3 ) ;
16644: LD_ADDR_VAR 0 7
16648: PUSH
16649: LD_VAR 0 5
16653: PPUSH
16654: LD_VAR 0 4
16658: PPUSH
16659: LD_INT 3
16661: PPUSH
16662: CALL_OW 272
16666: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16667: LD_ADDR_VAR 0 8
16671: PUSH
16672: LD_VAR 0 6
16676: PPUSH
16677: LD_VAR 0 4
16681: PPUSH
16682: LD_INT 3
16684: PPUSH
16685: CALL_OW 273
16689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16690: LD_VAR 0 7
16694: PPUSH
16695: LD_VAR 0 8
16699: PPUSH
16700: CALL_OW 488
16704: NOT
16705: IFFALSE 16709
// continue ;
16707: GO 16641
// if HexInfo ( _x , _y ) = 0 then
16709: LD_VAR 0 7
16713: PPUSH
16714: LD_VAR 0 8
16718: PPUSH
16719: CALL_OW 428
16723: PUSH
16724: LD_INT 0
16726: EQUAL
16727: IFFALSE 16752
// begin ComMoveXY ( unit , _x , _y ) ;
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_VAR 0 7
16738: PPUSH
16739: LD_VAR 0 8
16743: PPUSH
16744: CALL_OW 111
// exit ;
16748: POP
16749: POP
16750: GO 16756
// end ; end ;
16752: GO 16641
16754: POP
16755: POP
// end ;
16756: LD_VAR 0 3
16760: RET
// export function ScanBase ( side , base_area ) ; begin
16761: LD_INT 0
16763: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16764: LD_ADDR_VAR 0 3
16768: PUSH
16769: LD_VAR 0 2
16773: PPUSH
16774: LD_INT 81
16776: PUSH
16777: LD_VAR 0 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 70
16790: ST_TO_ADDR
// end ;
16791: LD_VAR 0 3
16795: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16796: LD_INT 0
16798: PPUSH
16799: PPUSH
16800: PPUSH
16801: PPUSH
// result := false ;
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// side := GetSide ( unit ) ;
16810: LD_ADDR_VAR 0 3
16814: PUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 255
16824: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16825: LD_ADDR_VAR 0 4
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 248
16839: ST_TO_ADDR
// case nat of 1 :
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 1
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 16864
16853: POP
// tech := tech_lassight ; 2 :
16854: LD_ADDR_VAR 0 5
16858: PUSH
16859: LD_INT 12
16861: ST_TO_ADDR
16862: GO 16903
16864: LD_INT 2
16866: DOUBLE
16867: EQUAL
16868: IFTRUE 16872
16870: GO 16883
16872: POP
// tech := tech_mortar ; 3 :
16873: LD_ADDR_VAR 0 5
16877: PUSH
16878: LD_INT 41
16880: ST_TO_ADDR
16881: GO 16903
16883: LD_INT 3
16885: DOUBLE
16886: EQUAL
16887: IFTRUE 16891
16889: GO 16902
16891: POP
// tech := tech_bazooka ; end ;
16892: LD_ADDR_VAR 0 5
16896: PUSH
16897: LD_INT 44
16899: ST_TO_ADDR
16900: GO 16903
16902: POP
// if Researched ( side , tech ) then
16903: LD_VAR 0 3
16907: PPUSH
16908: LD_VAR 0 5
16912: PPUSH
16913: CALL_OW 325
16917: IFFALSE 16944
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 5
16926: PUSH
16927: LD_INT 8
16929: PUSH
16930: LD_INT 9
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: PUSH
16938: LD_VAR 0 4
16942: ARRAY
16943: ST_TO_ADDR
// end ;
16944: LD_VAR 0 2
16948: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
16953: PPUSH
// if not mines then
16954: LD_VAR 0 2
16958: NOT
16959: IFFALSE 16963
// exit ;
16961: GO 17107
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16963: LD_ADDR_VAR 0 5
16967: PUSH
16968: LD_INT 81
16970: PUSH
16971: LD_VAR 0 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: LD_INT 21
16985: PUSH
16986: LD_INT 3
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PPUSH
17001: CALL_OW 69
17005: ST_TO_ADDR
// for i in mines do
17006: LD_ADDR_VAR 0 4
17010: PUSH
17011: LD_VAR 0 2
17015: PUSH
17016: FOR_IN
17017: IFFALSE 17105
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17019: LD_VAR 0 4
17023: PUSH
17024: LD_INT 1
17026: ARRAY
17027: PPUSH
17028: LD_VAR 0 4
17032: PUSH
17033: LD_INT 2
17035: ARRAY
17036: PPUSH
17037: CALL_OW 458
17041: NOT
17042: IFFALSE 17046
// continue ;
17044: GO 17016
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17046: LD_VAR 0 4
17050: PUSH
17051: LD_INT 1
17053: ARRAY
17054: PPUSH
17055: LD_VAR 0 4
17059: PUSH
17060: LD_INT 2
17062: ARRAY
17063: PPUSH
17064: CALL_OW 428
17068: PUSH
17069: LD_VAR 0 5
17073: IN
17074: IFFALSE 17103
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17076: LD_VAR 0 4
17080: PUSH
17081: LD_INT 1
17083: ARRAY
17084: PPUSH
17085: LD_VAR 0 4
17089: PUSH
17090: LD_INT 2
17092: ARRAY
17093: PPUSH
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 456
// end ;
17103: GO 17016
17105: POP
17106: POP
// end ;
17107: LD_VAR 0 3
17111: RET
// export function Count ( array ) ; var i ; begin
17112: LD_INT 0
17114: PPUSH
17115: PPUSH
// result := 0 ;
17116: LD_ADDR_VAR 0 2
17120: PUSH
17121: LD_INT 0
17123: ST_TO_ADDR
// for i in array do
17124: LD_ADDR_VAR 0 3
17128: PUSH
17129: LD_VAR 0 1
17133: PUSH
17134: FOR_IN
17135: IFFALSE 17159
// if i then
17137: LD_VAR 0 3
17141: IFFALSE 17157
// result := result + 1 ;
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_VAR 0 2
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: ST_TO_ADDR
17157: GO 17134
17159: POP
17160: POP
// end ;
17161: LD_VAR 0 2
17165: RET
// export function IsEmpty ( building ) ; begin
17166: LD_INT 0
17168: PPUSH
// if not building then
17169: LD_VAR 0 1
17173: NOT
17174: IFFALSE 17178
// exit ;
17176: GO 17221
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17178: LD_ADDR_VAR 0 2
17182: PUSH
17183: LD_VAR 0 1
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 255
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 58
17207: PUSH
17208: EMPTY
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: IN
17220: ST_TO_ADDR
// end ;
17221: LD_VAR 0 2
17225: RET
// export function IsNotFull ( building ) ; begin
17226: LD_INT 0
17228: PPUSH
// if not building then
17229: LD_VAR 0 1
17233: NOT
17234: IFFALSE 17238
// exit ;
17236: GO 17257
// result := UnitsInside ( building ) < 6 ;
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: CALL_OW 313
17252: PUSH
17253: LD_INT 6
17255: LESS
17256: ST_TO_ADDR
// end ;
17257: LD_VAR 0 2
17261: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17262: LD_INT 0
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
// tmp := [ ] ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: EMPTY
17274: ST_TO_ADDR
// list := [ ] ;
17275: LD_ADDR_VAR 0 5
17279: PUSH
17280: EMPTY
17281: ST_TO_ADDR
// for i = 16 to 25 do
17282: LD_ADDR_VAR 0 4
17286: PUSH
17287: DOUBLE
17288: LD_INT 16
17290: DEC
17291: ST_TO_ADDR
17292: LD_INT 25
17294: PUSH
17295: FOR_TO
17296: IFFALSE 17369
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17298: LD_ADDR_VAR 0 3
17302: PUSH
17303: LD_VAR 0 3
17307: PUSH
17308: LD_INT 22
17310: PUSH
17311: LD_VAR 0 1
17315: PPUSH
17316: CALL_OW 255
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 91
17327: PUSH
17328: LD_VAR 0 1
17332: PUSH
17333: LD_INT 6
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 30
17343: PUSH
17344: LD_VAR 0 4
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: ADD
17366: ST_TO_ADDR
17367: GO 17295
17369: POP
17370: POP
// for i = 1 to tmp do
17371: LD_ADDR_VAR 0 4
17375: PUSH
17376: DOUBLE
17377: LD_INT 1
17379: DEC
17380: ST_TO_ADDR
17381: LD_VAR 0 3
17385: PUSH
17386: FOR_TO
17387: IFFALSE 17475
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17389: LD_ADDR_VAR 0 5
17393: PUSH
17394: LD_VAR 0 5
17398: PUSH
17399: LD_VAR 0 3
17403: PUSH
17404: LD_VAR 0 4
17408: ARRAY
17409: PPUSH
17410: CALL_OW 266
17414: PUSH
17415: LD_VAR 0 3
17419: PUSH
17420: LD_VAR 0 4
17424: ARRAY
17425: PPUSH
17426: CALL_OW 250
17430: PUSH
17431: LD_VAR 0 3
17435: PUSH
17436: LD_VAR 0 4
17440: ARRAY
17441: PPUSH
17442: CALL_OW 251
17446: PUSH
17447: LD_VAR 0 3
17451: PUSH
17452: LD_VAR 0 4
17456: ARRAY
17457: PPUSH
17458: CALL_OW 254
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: ADD
17472: ST_TO_ADDR
17473: GO 17386
17475: POP
17476: POP
// result := list ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_VAR 0 5
17486: ST_TO_ADDR
// end ;
17487: LD_VAR 0 2
17491: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
// if not factory then
17501: LD_VAR 0 1
17505: NOT
17506: IFFALSE 17510
// exit ;
17508: GO 18103
// if control = control_apeman then
17510: LD_VAR 0 4
17514: PUSH
17515: LD_INT 5
17517: EQUAL
17518: IFFALSE 17627
// begin tmp := UnitsInside ( factory ) ;
17520: LD_ADDR_VAR 0 8
17524: PUSH
17525: LD_VAR 0 1
17529: PPUSH
17530: CALL_OW 313
17534: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17535: LD_VAR 0 8
17539: PPUSH
17540: LD_INT 25
17542: PUSH
17543: LD_INT 12
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PPUSH
17550: CALL_OW 72
17554: NOT
17555: IFFALSE 17565
// control := control_manual ;
17557: LD_ADDR_VAR 0 4
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17565: LD_ADDR_VAR 0 8
17569: PUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL 17262 0 1
17579: ST_TO_ADDR
// if tmp then
17580: LD_VAR 0 8
17584: IFFALSE 17627
// begin for i in tmp do
17586: LD_ADDR_VAR 0 7
17590: PUSH
17591: LD_VAR 0 8
17595: PUSH
17596: FOR_IN
17597: IFFALSE 17625
// if i [ 1 ] = b_ext_radio then
17599: LD_VAR 0 7
17603: PUSH
17604: LD_INT 1
17606: ARRAY
17607: PUSH
17608: LD_INT 22
17610: EQUAL
17611: IFFALSE 17623
// begin control := control_remote ;
17613: LD_ADDR_VAR 0 4
17617: PUSH
17618: LD_INT 2
17620: ST_TO_ADDR
// break ;
17621: GO 17625
// end ;
17623: GO 17596
17625: POP
17626: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17627: LD_VAR 0 1
17631: PPUSH
17632: LD_VAR 0 2
17636: PPUSH
17637: LD_VAR 0 3
17641: PPUSH
17642: LD_VAR 0 4
17646: PPUSH
17647: LD_VAR 0 5
17651: PPUSH
17652: CALL_OW 448
17656: IFFALSE 17691
// begin result := [ chassis , engine , control , weapon ] ;
17658: LD_ADDR_VAR 0 6
17662: PUSH
17663: LD_VAR 0 2
17667: PUSH
17668: LD_VAR 0 3
17672: PUSH
17673: LD_VAR 0 4
17677: PUSH
17678: LD_VAR 0 5
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: ST_TO_ADDR
// exit ;
17689: GO 18103
// end ; _chassis := AvailableChassisList ( factory ) ;
17691: LD_ADDR_VAR 0 9
17695: PUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 475
17705: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17706: LD_ADDR_VAR 0 11
17710: PUSH
17711: LD_VAR 0 1
17715: PPUSH
17716: CALL_OW 476
17720: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17721: LD_ADDR_VAR 0 12
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 477
17735: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17736: LD_ADDR_VAR 0 10
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 478
17750: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17751: LD_VAR 0 9
17755: NOT
17756: PUSH
17757: LD_VAR 0 11
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 12
17768: NOT
17769: OR
17770: PUSH
17771: LD_VAR 0 10
17775: NOT
17776: OR
17777: IFFALSE 17812
// begin result := [ chassis , engine , control , weapon ] ;
17779: LD_ADDR_VAR 0 6
17783: PUSH
17784: LD_VAR 0 2
17788: PUSH
17789: LD_VAR 0 3
17793: PUSH
17794: LD_VAR 0 4
17798: PUSH
17799: LD_VAR 0 5
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: ST_TO_ADDR
// exit ;
17810: GO 18103
// end ; if not chassis in _chassis then
17812: LD_VAR 0 2
17816: PUSH
17817: LD_VAR 0 9
17821: IN
17822: NOT
17823: IFFALSE 17849
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17825: LD_ADDR_VAR 0 2
17829: PUSH
17830: LD_VAR 0 9
17834: PUSH
17835: LD_INT 1
17837: PPUSH
17838: LD_VAR 0 9
17842: PPUSH
17843: CALL_OW 12
17847: ARRAY
17848: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17849: LD_VAR 0 2
17853: PPUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: CALL 18108 0 2
17863: NOT
17864: IFFALSE 17923
// repeat engine := _engine [ 1 ] ;
17866: LD_ADDR_VAR 0 3
17870: PUSH
17871: LD_VAR 0 11
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17880: LD_ADDR_VAR 0 11
17884: PUSH
17885: LD_VAR 0 11
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: CALL_OW 3
17897: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17898: LD_VAR 0 2
17902: PPUSH
17903: LD_VAR 0 3
17907: PPUSH
17908: CALL 18108 0 2
17912: PUSH
17913: LD_VAR 0 11
17917: PUSH
17918: EMPTY
17919: EQUAL
17920: OR
17921: IFFALSE 17866
// if not control in _control then
17923: LD_VAR 0 4
17927: PUSH
17928: LD_VAR 0 12
17932: IN
17933: NOT
17934: IFFALSE 17960
// control := _control [ rand ( 1 , _control ) ] ;
17936: LD_ADDR_VAR 0 4
17940: PUSH
17941: LD_VAR 0 12
17945: PUSH
17946: LD_INT 1
17948: PPUSH
17949: LD_VAR 0 12
17953: PPUSH
17954: CALL_OW 12
17958: ARRAY
17959: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17960: LD_VAR 0 2
17964: PPUSH
17965: LD_VAR 0 5
17969: PPUSH
17970: CALL 18328 0 2
17974: NOT
17975: IFFALSE 18034
// repeat weapon := _weapon [ 1 ] ;
17977: LD_ADDR_VAR 0 5
17981: PUSH
17982: LD_VAR 0 10
17986: PUSH
17987: LD_INT 1
17989: ARRAY
17990: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17991: LD_ADDR_VAR 0 10
17995: PUSH
17996: LD_VAR 0 10
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 3
18008: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18009: LD_VAR 0 2
18013: PPUSH
18014: LD_VAR 0 5
18018: PPUSH
18019: CALL 18328 0 2
18023: PUSH
18024: LD_VAR 0 10
18028: PUSH
18029: EMPTY
18030: EQUAL
18031: OR
18032: IFFALSE 17977
// result := [ ] ;
18034: LD_ADDR_VAR 0 6
18038: PUSH
18039: EMPTY
18040: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18041: LD_VAR 0 1
18045: PPUSH
18046: LD_VAR 0 2
18050: PPUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_VAR 0 4
18060: PPUSH
18061: LD_VAR 0 5
18065: PPUSH
18066: CALL_OW 448
18070: IFFALSE 18103
// result := [ chassis , engine , control , weapon ] ;
18072: LD_ADDR_VAR 0 6
18076: PUSH
18077: LD_VAR 0 2
18081: PUSH
18082: LD_VAR 0 3
18086: PUSH
18087: LD_VAR 0 4
18091: PUSH
18092: LD_VAR 0 5
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: ST_TO_ADDR
// end ;
18103: LD_VAR 0 6
18107: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18108: LD_INT 0
18110: PPUSH
// if not chassis or not engine then
18111: LD_VAR 0 1
18115: NOT
18116: PUSH
18117: LD_VAR 0 2
18121: NOT
18122: OR
18123: IFFALSE 18127
// exit ;
18125: GO 18323
// case engine of engine_solar :
18127: LD_VAR 0 2
18131: PUSH
18132: LD_INT 2
18134: DOUBLE
18135: EQUAL
18136: IFTRUE 18140
18138: GO 18178
18140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18141: LD_ADDR_VAR 0 3
18145: PUSH
18146: LD_INT 11
18148: PUSH
18149: LD_INT 12
18151: PUSH
18152: LD_INT 13
18154: PUSH
18155: LD_INT 14
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: LD_INT 2
18163: PUSH
18164: LD_INT 3
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: ST_TO_ADDR
18176: GO 18307
18178: LD_INT 1
18180: DOUBLE
18181: EQUAL
18182: IFTRUE 18186
18184: GO 18248
18186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18187: LD_ADDR_VAR 0 3
18191: PUSH
18192: LD_INT 11
18194: PUSH
18195: LD_INT 12
18197: PUSH
18198: LD_INT 13
18200: PUSH
18201: LD_INT 14
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: LD_INT 3
18212: PUSH
18213: LD_INT 4
18215: PUSH
18216: LD_INT 5
18218: PUSH
18219: LD_INT 21
18221: PUSH
18222: LD_INT 23
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_INT 24
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: ST_TO_ADDR
18246: GO 18307
18248: LD_INT 3
18250: DOUBLE
18251: EQUAL
18252: IFTRUE 18256
18254: GO 18306
18256: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18257: LD_ADDR_VAR 0 3
18261: PUSH
18262: LD_INT 13
18264: PUSH
18265: LD_INT 14
18267: PUSH
18268: LD_INT 2
18270: PUSH
18271: LD_INT 3
18273: PUSH
18274: LD_INT 4
18276: PUSH
18277: LD_INT 5
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_INT 23
18288: PUSH
18289: LD_INT 24
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: ST_TO_ADDR
18304: GO 18307
18306: POP
// result := ( chassis in result ) ;
18307: LD_ADDR_VAR 0 3
18311: PUSH
18312: LD_VAR 0 1
18316: PUSH
18317: LD_VAR 0 3
18321: IN
18322: ST_TO_ADDR
// end ;
18323: LD_VAR 0 3
18327: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18328: LD_INT 0
18330: PPUSH
// if not chassis or not weapon then
18331: LD_VAR 0 1
18335: NOT
18336: PUSH
18337: LD_VAR 0 2
18341: NOT
18342: OR
18343: IFFALSE 18347
// exit ;
18345: GO 19409
// case weapon of us_machine_gun :
18347: LD_VAR 0 2
18351: PUSH
18352: LD_INT 2
18354: DOUBLE
18355: EQUAL
18356: IFTRUE 18360
18358: GO 18390
18360: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18361: LD_ADDR_VAR 0 3
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 3
18374: PUSH
18375: LD_INT 4
18377: PUSH
18378: LD_INT 5
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: ST_TO_ADDR
18388: GO 19393
18390: LD_INT 3
18392: DOUBLE
18393: EQUAL
18394: IFTRUE 18398
18396: GO 18428
18398: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18399: LD_ADDR_VAR 0 3
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 2
18409: PUSH
18410: LD_INT 3
18412: PUSH
18413: LD_INT 4
18415: PUSH
18416: LD_INT 5
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: ST_TO_ADDR
18426: GO 19393
18428: LD_INT 11
18430: DOUBLE
18431: EQUAL
18432: IFTRUE 18436
18434: GO 18466
18436: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18437: LD_ADDR_VAR 0 3
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: LD_INT 4
18453: PUSH
18454: LD_INT 5
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: ST_TO_ADDR
18464: GO 19393
18466: LD_INT 4
18468: DOUBLE
18469: EQUAL
18470: IFTRUE 18474
18472: GO 18500
18474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18475: LD_ADDR_VAR 0 3
18479: PUSH
18480: LD_INT 2
18482: PUSH
18483: LD_INT 3
18485: PUSH
18486: LD_INT 4
18488: PUSH
18489: LD_INT 5
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: ST_TO_ADDR
18498: GO 19393
18500: LD_INT 5
18502: DOUBLE
18503: EQUAL
18504: IFTRUE 18508
18506: GO 18534
18508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18509: LD_ADDR_VAR 0 3
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 3
18519: PUSH
18520: LD_INT 4
18522: PUSH
18523: LD_INT 5
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: ST_TO_ADDR
18532: GO 19393
18534: LD_INT 9
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18568
18542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: LD_INT 4
18556: PUSH
18557: LD_INT 5
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: ST_TO_ADDR
18566: GO 19393
18568: LD_INT 7
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18602
18576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18577: LD_ADDR_VAR 0 3
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 3
18587: PUSH
18588: LD_INT 4
18590: PUSH
18591: LD_INT 5
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: ST_TO_ADDR
18600: GO 19393
18602: LD_INT 12
18604: DOUBLE
18605: EQUAL
18606: IFTRUE 18610
18608: GO 18636
18610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18611: LD_ADDR_VAR 0 3
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 3
18621: PUSH
18622: LD_INT 4
18624: PUSH
18625: LD_INT 5
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 19393
18636: LD_INT 13
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18670
18644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 3
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: ST_TO_ADDR
18668: GO 19393
18670: LD_INT 14
18672: DOUBLE
18673: EQUAL
18674: IFTRUE 18678
18676: GO 18696
18678: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18679: LD_ADDR_VAR 0 3
18683: PUSH
18684: LD_INT 4
18686: PUSH
18687: LD_INT 5
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: ST_TO_ADDR
18694: GO 19393
18696: LD_INT 6
18698: DOUBLE
18699: EQUAL
18700: IFTRUE 18704
18702: GO 18722
18704: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18705: LD_ADDR_VAR 0 3
18709: PUSH
18710: LD_INT 4
18712: PUSH
18713: LD_INT 5
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: ST_TO_ADDR
18720: GO 19393
18722: LD_INT 10
18724: DOUBLE
18725: EQUAL
18726: IFTRUE 18730
18728: GO 18748
18730: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18731: LD_ADDR_VAR 0 3
18735: PUSH
18736: LD_INT 4
18738: PUSH
18739: LD_INT 5
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: ST_TO_ADDR
18746: GO 19393
18748: LD_INT 22
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18782
18756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18757: LD_ADDR_VAR 0 3
18761: PUSH
18762: LD_INT 11
18764: PUSH
18765: LD_INT 12
18767: PUSH
18768: LD_INT 13
18770: PUSH
18771: LD_INT 14
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: ST_TO_ADDR
18780: GO 19393
18782: LD_INT 23
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18816
18790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18791: LD_ADDR_VAR 0 3
18795: PUSH
18796: LD_INT 11
18798: PUSH
18799: LD_INT 12
18801: PUSH
18802: LD_INT 13
18804: PUSH
18805: LD_INT 14
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: ST_TO_ADDR
18814: GO 19393
18816: LD_INT 24
18818: DOUBLE
18819: EQUAL
18820: IFTRUE 18824
18822: GO 18850
18824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18825: LD_ADDR_VAR 0 3
18829: PUSH
18830: LD_INT 11
18832: PUSH
18833: LD_INT 12
18835: PUSH
18836: LD_INT 13
18838: PUSH
18839: LD_INT 14
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: ST_TO_ADDR
18848: GO 19393
18850: LD_INT 30
18852: DOUBLE
18853: EQUAL
18854: IFTRUE 18858
18856: GO 18884
18858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18859: LD_ADDR_VAR 0 3
18863: PUSH
18864: LD_INT 11
18866: PUSH
18867: LD_INT 12
18869: PUSH
18870: LD_INT 13
18872: PUSH
18873: LD_INT 14
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: ST_TO_ADDR
18882: GO 19393
18884: LD_INT 25
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18910
18892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_INT 13
18900: PUSH
18901: LD_INT 14
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: ST_TO_ADDR
18908: GO 19393
18910: LD_INT 27
18912: DOUBLE
18913: EQUAL
18914: IFTRUE 18918
18916: GO 18936
18918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18919: LD_ADDR_VAR 0 3
18923: PUSH
18924: LD_INT 13
18926: PUSH
18927: LD_INT 14
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: ST_TO_ADDR
18934: GO 19393
18936: LD_EXP 104
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 18972
18946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_INT 11
18954: PUSH
18955: LD_INT 12
18957: PUSH
18958: LD_INT 13
18960: PUSH
18961: LD_INT 14
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: ST_TO_ADDR
18970: GO 19393
18972: LD_INT 28
18974: DOUBLE
18975: EQUAL
18976: IFTRUE 18980
18978: GO 18998
18980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18981: LD_ADDR_VAR 0 3
18985: PUSH
18986: LD_INT 13
18988: PUSH
18989: LD_INT 14
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: ST_TO_ADDR
18996: GO 19393
18998: LD_INT 29
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19024
19006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19007: LD_ADDR_VAR 0 3
19011: PUSH
19012: LD_INT 13
19014: PUSH
19015: LD_INT 14
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: ST_TO_ADDR
19022: GO 19393
19024: LD_INT 31
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19050
19032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19033: LD_ADDR_VAR 0 3
19037: PUSH
19038: LD_INT 13
19040: PUSH
19041: LD_INT 14
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: ST_TO_ADDR
19048: GO 19393
19050: LD_INT 26
19052: DOUBLE
19053: EQUAL
19054: IFTRUE 19058
19056: GO 19076
19058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19059: LD_ADDR_VAR 0 3
19063: PUSH
19064: LD_INT 13
19066: PUSH
19067: LD_INT 14
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: ST_TO_ADDR
19074: GO 19393
19076: LD_INT 42
19078: DOUBLE
19079: EQUAL
19080: IFTRUE 19084
19082: GO 19110
19084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19085: LD_ADDR_VAR 0 3
19089: PUSH
19090: LD_INT 21
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_INT 23
19098: PUSH
19099: LD_INT 24
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: ST_TO_ADDR
19108: GO 19393
19110: LD_INT 43
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19144
19118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19119: LD_ADDR_VAR 0 3
19123: PUSH
19124: LD_INT 21
19126: PUSH
19127: LD_INT 22
19129: PUSH
19130: LD_INT 23
19132: PUSH
19133: LD_INT 24
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: ST_TO_ADDR
19142: GO 19393
19144: LD_INT 44
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 19178
19152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19153: LD_ADDR_VAR 0 3
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 22
19163: PUSH
19164: LD_INT 23
19166: PUSH
19167: LD_INT 24
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: ST_TO_ADDR
19176: GO 19393
19178: LD_INT 45
19180: DOUBLE
19181: EQUAL
19182: IFTRUE 19186
19184: GO 19212
19186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19187: LD_ADDR_VAR 0 3
19191: PUSH
19192: LD_INT 21
19194: PUSH
19195: LD_INT 22
19197: PUSH
19198: LD_INT 23
19200: PUSH
19201: LD_INT 24
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: ST_TO_ADDR
19210: GO 19393
19212: LD_INT 49
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19246
19220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19221: LD_ADDR_VAR 0 3
19225: PUSH
19226: LD_INT 21
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_INT 23
19234: PUSH
19235: LD_INT 24
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: ST_TO_ADDR
19244: GO 19393
19246: LD_INT 51
19248: DOUBLE
19249: EQUAL
19250: IFTRUE 19254
19252: GO 19280
19254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: LD_INT 21
19262: PUSH
19263: LD_INT 22
19265: PUSH
19266: LD_INT 23
19268: PUSH
19269: LD_INT 24
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: ST_TO_ADDR
19278: GO 19393
19280: LD_INT 52
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19314
19288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 21
19296: PUSH
19297: LD_INT 22
19299: PUSH
19300: LD_INT 23
19302: PUSH
19303: LD_INT 24
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: ST_TO_ADDR
19312: GO 19393
19314: LD_INT 53
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19340
19322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: LD_INT 23
19330: PUSH
19331: LD_INT 24
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: ST_TO_ADDR
19338: GO 19393
19340: LD_INT 46
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19366
19348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19349: LD_ADDR_VAR 0 3
19353: PUSH
19354: LD_INT 23
19356: PUSH
19357: LD_INT 24
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: ST_TO_ADDR
19364: GO 19393
19366: LD_INT 47
19368: DOUBLE
19369: EQUAL
19370: IFTRUE 19374
19372: GO 19392
19374: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_INT 23
19382: PUSH
19383: LD_INT 24
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 19393
19392: POP
// result := ( chassis in result ) ;
19393: LD_ADDR_VAR 0 3
19397: PUSH
19398: LD_VAR 0 1
19402: PUSH
19403: LD_VAR 0 3
19407: IN
19408: ST_TO_ADDR
// end ;
19409: LD_VAR 0 3
19413: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19414: LD_INT 0
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
// result := array ;
19423: LD_ADDR_VAR 0 5
19427: PUSH
19428: LD_VAR 0 1
19432: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19433: LD_VAR 0 1
19437: NOT
19438: PUSH
19439: LD_VAR 0 2
19443: NOT
19444: OR
19445: PUSH
19446: LD_VAR 0 3
19450: NOT
19451: OR
19452: PUSH
19453: LD_VAR 0 2
19457: PUSH
19458: LD_VAR 0 1
19462: GREATER
19463: OR
19464: PUSH
19465: LD_VAR 0 3
19469: PUSH
19470: LD_VAR 0 1
19474: GREATER
19475: OR
19476: IFFALSE 19480
// exit ;
19478: GO 19776
// if direction then
19480: LD_VAR 0 4
19484: IFFALSE 19548
// begin d := 1 ;
19486: LD_ADDR_VAR 0 9
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// if i_from > i_to then
19494: LD_VAR 0 2
19498: PUSH
19499: LD_VAR 0 3
19503: GREATER
19504: IFFALSE 19530
// length := ( array - i_from ) + i_to else
19506: LD_ADDR_VAR 0 11
19510: PUSH
19511: LD_VAR 0 1
19515: PUSH
19516: LD_VAR 0 2
19520: MINUS
19521: PUSH
19522: LD_VAR 0 3
19526: PLUS
19527: ST_TO_ADDR
19528: GO 19546
// length := i_to - i_from ;
19530: LD_ADDR_VAR 0 11
19534: PUSH
19535: LD_VAR 0 3
19539: PUSH
19540: LD_VAR 0 2
19544: MINUS
19545: ST_TO_ADDR
// end else
19546: GO 19609
// begin d := - 1 ;
19548: LD_ADDR_VAR 0 9
19552: PUSH
19553: LD_INT 1
19555: NEG
19556: ST_TO_ADDR
// if i_from > i_to then
19557: LD_VAR 0 2
19561: PUSH
19562: LD_VAR 0 3
19566: GREATER
19567: IFFALSE 19587
// length := i_from - i_to else
19569: LD_ADDR_VAR 0 11
19573: PUSH
19574: LD_VAR 0 2
19578: PUSH
19579: LD_VAR 0 3
19583: MINUS
19584: ST_TO_ADDR
19585: GO 19609
// length := ( array - i_to ) + i_from ;
19587: LD_ADDR_VAR 0 11
19591: PUSH
19592: LD_VAR 0 1
19596: PUSH
19597: LD_VAR 0 3
19601: MINUS
19602: PUSH
19603: LD_VAR 0 2
19607: PLUS
19608: ST_TO_ADDR
// end ; if not length then
19609: LD_VAR 0 11
19613: NOT
19614: IFFALSE 19618
// exit ;
19616: GO 19776
// tmp := array ;
19618: LD_ADDR_VAR 0 10
19622: PUSH
19623: LD_VAR 0 1
19627: ST_TO_ADDR
// for i = 1 to length do
19628: LD_ADDR_VAR 0 6
19632: PUSH
19633: DOUBLE
19634: LD_INT 1
19636: DEC
19637: ST_TO_ADDR
19638: LD_VAR 0 11
19642: PUSH
19643: FOR_TO
19644: IFFALSE 19764
// begin for j = 1 to array do
19646: LD_ADDR_VAR 0 7
19650: PUSH
19651: DOUBLE
19652: LD_INT 1
19654: DEC
19655: ST_TO_ADDR
19656: LD_VAR 0 1
19660: PUSH
19661: FOR_TO
19662: IFFALSE 19750
// begin k := j + d ;
19664: LD_ADDR_VAR 0 8
19668: PUSH
19669: LD_VAR 0 7
19673: PUSH
19674: LD_VAR 0 9
19678: PLUS
19679: ST_TO_ADDR
// if k > array then
19680: LD_VAR 0 8
19684: PUSH
19685: LD_VAR 0 1
19689: GREATER
19690: IFFALSE 19700
// k := 1 ;
19692: LD_ADDR_VAR 0 8
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// if not k then
19700: LD_VAR 0 8
19704: NOT
19705: IFFALSE 19717
// k := array ;
19707: LD_ADDR_VAR 0 8
19711: PUSH
19712: LD_VAR 0 1
19716: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19717: LD_ADDR_VAR 0 10
19721: PUSH
19722: LD_VAR 0 10
19726: PPUSH
19727: LD_VAR 0 8
19731: PPUSH
19732: LD_VAR 0 1
19736: PUSH
19737: LD_VAR 0 7
19741: ARRAY
19742: PPUSH
19743: CALL_OW 1
19747: ST_TO_ADDR
// end ;
19748: GO 19661
19750: POP
19751: POP
// array := tmp ;
19752: LD_ADDR_VAR 0 1
19756: PUSH
19757: LD_VAR 0 10
19761: ST_TO_ADDR
// end ;
19762: GO 19643
19764: POP
19765: POP
// result := array ;
19766: LD_ADDR_VAR 0 5
19770: PUSH
19771: LD_VAR 0 1
19775: ST_TO_ADDR
// end ;
19776: LD_VAR 0 5
19780: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
// result := 0 ;
19785: LD_ADDR_VAR 0 3
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// if not array or not value in array then
19793: LD_VAR 0 1
19797: NOT
19798: PUSH
19799: LD_VAR 0 2
19803: PUSH
19804: LD_VAR 0 1
19808: IN
19809: NOT
19810: OR
19811: IFFALSE 19815
// exit ;
19813: GO 19869
// for i = 1 to array do
19815: LD_ADDR_VAR 0 4
19819: PUSH
19820: DOUBLE
19821: LD_INT 1
19823: DEC
19824: ST_TO_ADDR
19825: LD_VAR 0 1
19829: PUSH
19830: FOR_TO
19831: IFFALSE 19867
// if value = array [ i ] then
19833: LD_VAR 0 2
19837: PUSH
19838: LD_VAR 0 1
19842: PUSH
19843: LD_VAR 0 4
19847: ARRAY
19848: EQUAL
19849: IFFALSE 19865
// begin result := i ;
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_VAR 0 4
19860: ST_TO_ADDR
// exit ;
19861: POP
19862: POP
19863: GO 19869
// end ;
19865: GO 19830
19867: POP
19868: POP
// end ;
19869: LD_VAR 0 3
19873: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19874: LD_INT 0
19876: PPUSH
// vc_chassis := chassis ;
19877: LD_ADDR_OWVAR 37
19881: PUSH
19882: LD_VAR 0 1
19886: ST_TO_ADDR
// vc_engine := engine ;
19887: LD_ADDR_OWVAR 39
19891: PUSH
19892: LD_VAR 0 2
19896: ST_TO_ADDR
// vc_control := control ;
19897: LD_ADDR_OWVAR 38
19901: PUSH
19902: LD_VAR 0 3
19906: ST_TO_ADDR
// vc_weapon := weapon ;
19907: LD_ADDR_OWVAR 40
19911: PUSH
19912: LD_VAR 0 4
19916: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19917: LD_ADDR_OWVAR 41
19921: PUSH
19922: LD_VAR 0 5
19926: ST_TO_ADDR
// end ;
19927: LD_VAR 0 6
19931: RET
// export function WantPlant ( unit ) ; var task ; begin
19932: LD_INT 0
19934: PPUSH
19935: PPUSH
// result := false ;
19936: LD_ADDR_VAR 0 2
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL_OW 437
19958: ST_TO_ADDR
// if task then
19959: LD_VAR 0 3
19963: IFFALSE 19991
// if task [ 1 ] [ 1 ] = p then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 1
19972: ARRAY
19973: PUSH
19974: LD_INT 1
19976: ARRAY
19977: PUSH
19978: LD_STRING p
19980: EQUAL
19981: IFFALSE 19991
// result := true ;
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// end ;
19991: LD_VAR 0 2
19995: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19996: LD_INT 0
19998: PPUSH
19999: PPUSH
20000: PPUSH
20001: PPUSH
// if pos < 1 then
20002: LD_VAR 0 2
20006: PUSH
20007: LD_INT 1
20009: LESS
20010: IFFALSE 20014
// exit ;
20012: GO 20317
// if pos = 1 then
20014: LD_VAR 0 2
20018: PUSH
20019: LD_INT 1
20021: EQUAL
20022: IFFALSE 20055
// result := Replace ( arr , pos [ 1 ] , value ) else
20024: LD_ADDR_VAR 0 4
20028: PUSH
20029: LD_VAR 0 1
20033: PPUSH
20034: LD_VAR 0 2
20038: PUSH
20039: LD_INT 1
20041: ARRAY
20042: PPUSH
20043: LD_VAR 0 3
20047: PPUSH
20048: CALL_OW 1
20052: ST_TO_ADDR
20053: GO 20317
// begin tmp := arr ;
20055: LD_ADDR_VAR 0 6
20059: PUSH
20060: LD_VAR 0 1
20064: ST_TO_ADDR
// s_arr := [ tmp ] ;
20065: LD_ADDR_VAR 0 7
20069: PUSH
20070: LD_VAR 0 6
20074: PUSH
20075: EMPTY
20076: LIST
20077: ST_TO_ADDR
// for i = 1 to pos - 1 do
20078: LD_ADDR_VAR 0 5
20082: PUSH
20083: DOUBLE
20084: LD_INT 1
20086: DEC
20087: ST_TO_ADDR
20088: LD_VAR 0 2
20092: PUSH
20093: LD_INT 1
20095: MINUS
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20143
// begin tmp := tmp [ pos [ i ] ] ;
20100: LD_ADDR_VAR 0 6
20104: PUSH
20105: LD_VAR 0 6
20109: PUSH
20110: LD_VAR 0 2
20114: PUSH
20115: LD_VAR 0 5
20119: ARRAY
20120: ARRAY
20121: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20122: LD_ADDR_VAR 0 7
20126: PUSH
20127: LD_VAR 0 7
20131: PUSH
20132: LD_VAR 0 6
20136: PUSH
20137: EMPTY
20138: LIST
20139: ADD
20140: ST_TO_ADDR
// end ;
20141: GO 20097
20143: POP
20144: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20145: LD_ADDR_VAR 0 6
20149: PUSH
20150: LD_VAR 0 6
20154: PPUSH
20155: LD_VAR 0 2
20159: PUSH
20160: LD_VAR 0 2
20164: ARRAY
20165: PPUSH
20166: LD_VAR 0 3
20170: PPUSH
20171: CALL_OW 1
20175: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20176: LD_ADDR_VAR 0 7
20180: PUSH
20181: LD_VAR 0 7
20185: PPUSH
20186: LD_VAR 0 7
20190: PPUSH
20191: LD_VAR 0 6
20195: PPUSH
20196: CALL_OW 1
20200: ST_TO_ADDR
// for i = s_arr downto 2 do
20201: LD_ADDR_VAR 0 5
20205: PUSH
20206: DOUBLE
20207: LD_VAR 0 7
20211: INC
20212: ST_TO_ADDR
20213: LD_INT 2
20215: PUSH
20216: FOR_DOWNTO
20217: IFFALSE 20301
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20219: LD_ADDR_VAR 0 6
20223: PUSH
20224: LD_VAR 0 7
20228: PUSH
20229: LD_VAR 0 5
20233: PUSH
20234: LD_INT 1
20236: MINUS
20237: ARRAY
20238: PPUSH
20239: LD_VAR 0 2
20243: PUSH
20244: LD_VAR 0 5
20248: PUSH
20249: LD_INT 1
20251: MINUS
20252: ARRAY
20253: PPUSH
20254: LD_VAR 0 7
20258: PUSH
20259: LD_VAR 0 5
20263: ARRAY
20264: PPUSH
20265: CALL_OW 1
20269: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20270: LD_ADDR_VAR 0 7
20274: PUSH
20275: LD_VAR 0 7
20279: PPUSH
20280: LD_VAR 0 5
20284: PUSH
20285: LD_INT 1
20287: MINUS
20288: PPUSH
20289: LD_VAR 0 6
20293: PPUSH
20294: CALL_OW 1
20298: ST_TO_ADDR
// end ;
20299: GO 20216
20301: POP
20302: POP
// result := s_arr [ 1 ] ;
20303: LD_ADDR_VAR 0 4
20307: PUSH
20308: LD_VAR 0 7
20312: PUSH
20313: LD_INT 1
20315: ARRAY
20316: ST_TO_ADDR
// end ; end ;
20317: LD_VAR 0 4
20321: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// if not list then
20326: LD_VAR 0 1
20330: NOT
20331: IFFALSE 20335
// exit ;
20333: GO 20426
// i := list [ pos1 ] ;
20335: LD_ADDR_VAR 0 5
20339: PUSH
20340: LD_VAR 0 1
20344: PUSH
20345: LD_VAR 0 2
20349: ARRAY
20350: ST_TO_ADDR
// if not i then
20351: LD_VAR 0 5
20355: NOT
20356: IFFALSE 20360
// exit ;
20358: GO 20426
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20360: LD_ADDR_VAR 0 1
20364: PUSH
20365: LD_VAR 0 1
20369: PPUSH
20370: LD_VAR 0 2
20374: PPUSH
20375: LD_VAR 0 1
20379: PUSH
20380: LD_VAR 0 3
20384: ARRAY
20385: PPUSH
20386: CALL_OW 1
20390: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20391: LD_ADDR_VAR 0 1
20395: PUSH
20396: LD_VAR 0 1
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_VAR 0 5
20410: PPUSH
20411: CALL_OW 1
20415: ST_TO_ADDR
// result := list ;
20416: LD_ADDR_VAR 0 4
20420: PUSH
20421: LD_VAR 0 1
20425: ST_TO_ADDR
// end ;
20426: LD_VAR 0 4
20430: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20431: LD_INT 0
20433: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20434: LD_ADDR_VAR 0 5
20438: PUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 250
20448: PPUSH
20449: LD_VAR 0 1
20453: PPUSH
20454: CALL_OW 251
20458: PPUSH
20459: LD_VAR 0 2
20463: PPUSH
20464: LD_VAR 0 3
20468: PPUSH
20469: LD_VAR 0 4
20473: PPUSH
20474: CALL 20484 0 5
20478: ST_TO_ADDR
// end ;
20479: LD_VAR 0 5
20483: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20484: LD_INT 0
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
// if not list then
20490: LD_VAR 0 3
20494: NOT
20495: IFFALSE 20499
// exit ;
20497: GO 20887
// result := [ ] ;
20499: LD_ADDR_VAR 0 6
20503: PUSH
20504: EMPTY
20505: ST_TO_ADDR
// for i in list do
20506: LD_ADDR_VAR 0 7
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: FOR_IN
20517: IFFALSE 20719
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20519: LD_ADDR_VAR 0 9
20523: PUSH
20524: LD_VAR 0 7
20528: PPUSH
20529: LD_VAR 0 1
20533: PPUSH
20534: LD_VAR 0 2
20538: PPUSH
20539: CALL_OW 297
20543: ST_TO_ADDR
// if not result then
20544: LD_VAR 0 6
20548: NOT
20549: IFFALSE 20575
// result := [ [ i , tmp ] ] else
20551: LD_ADDR_VAR 0 6
20555: PUSH
20556: LD_VAR 0 7
20560: PUSH
20561: LD_VAR 0 9
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: ST_TO_ADDR
20573: GO 20717
// begin if result [ result ] [ 2 ] < tmp then
20575: LD_VAR 0 6
20579: PUSH
20580: LD_VAR 0 6
20584: ARRAY
20585: PUSH
20586: LD_INT 2
20588: ARRAY
20589: PUSH
20590: LD_VAR 0 9
20594: LESS
20595: IFFALSE 20637
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20597: LD_ADDR_VAR 0 6
20601: PUSH
20602: LD_VAR 0 6
20606: PPUSH
20607: LD_VAR 0 6
20611: PUSH
20612: LD_INT 1
20614: PLUS
20615: PPUSH
20616: LD_VAR 0 7
20620: PUSH
20621: LD_VAR 0 9
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 2
20634: ST_TO_ADDR
20635: GO 20717
// for j = 1 to result do
20637: LD_ADDR_VAR 0 8
20641: PUSH
20642: DOUBLE
20643: LD_INT 1
20645: DEC
20646: ST_TO_ADDR
20647: LD_VAR 0 6
20651: PUSH
20652: FOR_TO
20653: IFFALSE 20715
// begin if tmp < result [ j ] [ 2 ] then
20655: LD_VAR 0 9
20659: PUSH
20660: LD_VAR 0 6
20664: PUSH
20665: LD_VAR 0 8
20669: ARRAY
20670: PUSH
20671: LD_INT 2
20673: ARRAY
20674: LESS
20675: IFFALSE 20713
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20677: LD_ADDR_VAR 0 6
20681: PUSH
20682: LD_VAR 0 6
20686: PPUSH
20687: LD_VAR 0 8
20691: PPUSH
20692: LD_VAR 0 7
20696: PUSH
20697: LD_VAR 0 9
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PPUSH
20706: CALL_OW 2
20710: ST_TO_ADDR
// break ;
20711: GO 20715
// end ; end ;
20713: GO 20652
20715: POP
20716: POP
// end ; end ;
20717: GO 20516
20719: POP
20720: POP
// if result and not asc then
20721: LD_VAR 0 6
20725: PUSH
20726: LD_VAR 0 4
20730: NOT
20731: AND
20732: IFFALSE 20807
// begin tmp := result ;
20734: LD_ADDR_VAR 0 9
20738: PUSH
20739: LD_VAR 0 6
20743: ST_TO_ADDR
// for i = tmp downto 1 do
20744: LD_ADDR_VAR 0 7
20748: PUSH
20749: DOUBLE
20750: LD_VAR 0 9
20754: INC
20755: ST_TO_ADDR
20756: LD_INT 1
20758: PUSH
20759: FOR_DOWNTO
20760: IFFALSE 20805
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20762: LD_ADDR_VAR 0 6
20766: PUSH
20767: LD_VAR 0 6
20771: PPUSH
20772: LD_VAR 0 9
20776: PUSH
20777: LD_VAR 0 7
20781: MINUS
20782: PUSH
20783: LD_INT 1
20785: PLUS
20786: PPUSH
20787: LD_VAR 0 9
20791: PUSH
20792: LD_VAR 0 7
20796: ARRAY
20797: PPUSH
20798: CALL_OW 1
20802: ST_TO_ADDR
20803: GO 20759
20805: POP
20806: POP
// end ; tmp := [ ] ;
20807: LD_ADDR_VAR 0 9
20811: PUSH
20812: EMPTY
20813: ST_TO_ADDR
// if mode then
20814: LD_VAR 0 5
20818: IFFALSE 20887
// begin for i = 1 to result do
20820: LD_ADDR_VAR 0 7
20824: PUSH
20825: DOUBLE
20826: LD_INT 1
20828: DEC
20829: ST_TO_ADDR
20830: LD_VAR 0 6
20834: PUSH
20835: FOR_TO
20836: IFFALSE 20875
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20838: LD_ADDR_VAR 0 9
20842: PUSH
20843: LD_VAR 0 9
20847: PPUSH
20848: LD_VAR 0 7
20852: PPUSH
20853: LD_VAR 0 6
20857: PUSH
20858: LD_VAR 0 7
20862: ARRAY
20863: PUSH
20864: LD_INT 1
20866: ARRAY
20867: PPUSH
20868: CALL_OW 1
20872: ST_TO_ADDR
20873: GO 20835
20875: POP
20876: POP
// result := tmp ;
20877: LD_ADDR_VAR 0 6
20881: PUSH
20882: LD_VAR 0 9
20886: ST_TO_ADDR
// end ; end ;
20887: LD_VAR 0 6
20891: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20892: LD_INT 0
20894: PPUSH
20895: PPUSH
20896: PPUSH
20897: PPUSH
20898: PPUSH
20899: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20900: LD_ADDR_VAR 0 5
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: LD_INT 0
20913: PUSH
20914: EMPTY
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// if not x or not y then
20922: LD_VAR 0 2
20926: NOT
20927: PUSH
20928: LD_VAR 0 3
20932: NOT
20933: OR
20934: IFFALSE 20938
// exit ;
20936: GO 22590
// if not range then
20938: LD_VAR 0 4
20942: NOT
20943: IFFALSE 20953
// range := 10 ;
20945: LD_ADDR_VAR 0 4
20949: PUSH
20950: LD_INT 10
20952: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20953: LD_ADDR_VAR 0 8
20957: PUSH
20958: LD_INT 81
20960: PUSH
20961: LD_VAR 0 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 92
20972: PUSH
20973: LD_VAR 0 2
20977: PUSH
20978: LD_VAR 0 3
20982: PUSH
20983: LD_VAR 0 4
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 3
20996: PUSH
20997: LD_INT 21
20999: PUSH
21000: LD_INT 3
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: PPUSH
21016: CALL_OW 69
21020: ST_TO_ADDR
// if not tmp then
21021: LD_VAR 0 8
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 22590
// for i in tmp do
21030: LD_ADDR_VAR 0 6
21034: PUSH
21035: LD_VAR 0 8
21039: PUSH
21040: FOR_IN
21041: IFFALSE 22565
// begin points := [ 0 , 0 , 0 ] ;
21043: LD_ADDR_VAR 0 9
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: ST_TO_ADDR
// bpoints := 1 ;
21062: LD_ADDR_VAR 0 10
21066: PUSH
21067: LD_INT 1
21069: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21070: LD_VAR 0 6
21074: PPUSH
21075: CALL_OW 247
21079: PUSH
21080: LD_INT 1
21082: DOUBLE
21083: EQUAL
21084: IFTRUE 21088
21086: GO 21666
21088: POP
// begin if GetClass ( i ) = 1 then
21089: LD_VAR 0 6
21093: PPUSH
21094: CALL_OW 257
21098: PUSH
21099: LD_INT 1
21101: EQUAL
21102: IFFALSE 21123
// points := [ 10 , 5 , 3 ] ;
21104: LD_ADDR_VAR 0 9
21108: PUSH
21109: LD_INT 10
21111: PUSH
21112: LD_INT 5
21114: PUSH
21115: LD_INT 3
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21123: LD_VAR 0 6
21127: PPUSH
21128: CALL_OW 257
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 3
21138: PUSH
21139: LD_INT 4
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: IN
21147: IFFALSE 21168
// points := [ 3 , 2 , 1 ] ;
21149: LD_ADDR_VAR 0 9
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21168: LD_VAR 0 6
21172: PPUSH
21173: CALL_OW 257
21177: PUSH
21178: LD_INT 5
21180: EQUAL
21181: IFFALSE 21202
// points := [ 130 , 5 , 2 ] ;
21183: LD_ADDR_VAR 0 9
21187: PUSH
21188: LD_INT 130
21190: PUSH
21191: LD_INT 5
21193: PUSH
21194: LD_INT 2
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21202: LD_VAR 0 6
21206: PPUSH
21207: CALL_OW 257
21211: PUSH
21212: LD_INT 8
21214: EQUAL
21215: IFFALSE 21236
// points := [ 35 , 35 , 30 ] ;
21217: LD_ADDR_VAR 0 9
21221: PUSH
21222: LD_INT 35
21224: PUSH
21225: LD_INT 35
21227: PUSH
21228: LD_INT 30
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21236: LD_VAR 0 6
21240: PPUSH
21241: CALL_OW 257
21245: PUSH
21246: LD_INT 9
21248: EQUAL
21249: IFFALSE 21270
// points := [ 20 , 55 , 40 ] ;
21251: LD_ADDR_VAR 0 9
21255: PUSH
21256: LD_INT 20
21258: PUSH
21259: LD_INT 55
21261: PUSH
21262: LD_INT 40
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21270: LD_VAR 0 6
21274: PPUSH
21275: CALL_OW 257
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 16
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: IN
21290: IFFALSE 21311
// points := [ 5 , 3 , 2 ] ;
21292: LD_ADDR_VAR 0 9
21296: PUSH
21297: LD_INT 5
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21311: LD_VAR 0 6
21315: PPUSH
21316: CALL_OW 257
21320: PUSH
21321: LD_INT 17
21323: EQUAL
21324: IFFALSE 21345
// points := [ 100 , 50 , 75 ] ;
21326: LD_ADDR_VAR 0 9
21330: PUSH
21331: LD_INT 100
21333: PUSH
21334: LD_INT 50
21336: PUSH
21337: LD_INT 75
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21345: LD_VAR 0 6
21349: PPUSH
21350: CALL_OW 257
21354: PUSH
21355: LD_INT 15
21357: EQUAL
21358: IFFALSE 21379
// points := [ 10 , 5 , 3 ] ;
21360: LD_ADDR_VAR 0 9
21364: PUSH
21365: LD_INT 10
21367: PUSH
21368: LD_INT 5
21370: PUSH
21371: LD_INT 3
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21379: LD_VAR 0 6
21383: PPUSH
21384: CALL_OW 257
21388: PUSH
21389: LD_INT 14
21391: EQUAL
21392: IFFALSE 21413
// points := [ 10 , 0 , 0 ] ;
21394: LD_ADDR_VAR 0 9
21398: PUSH
21399: LD_INT 10
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21413: LD_VAR 0 6
21417: PPUSH
21418: CALL_OW 257
21422: PUSH
21423: LD_INT 11
21425: EQUAL
21426: IFFALSE 21447
// points := [ 30 , 10 , 5 ] ;
21428: LD_ADDR_VAR 0 9
21432: PUSH
21433: LD_INT 30
21435: PUSH
21436: LD_INT 10
21438: PUSH
21439: LD_INT 5
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21447: LD_VAR 0 1
21451: PPUSH
21452: LD_INT 5
21454: PPUSH
21455: CALL_OW 321
21459: PUSH
21460: LD_INT 2
21462: EQUAL
21463: IFFALSE 21480
// bpoints := bpoints * 1.8 ;
21465: LD_ADDR_VAR 0 10
21469: PUSH
21470: LD_VAR 0 10
21474: PUSH
21475: LD_REAL  1.80000000000000E+0000
21478: MUL
21479: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21480: LD_VAR 0 6
21484: PPUSH
21485: CALL_OW 257
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: LD_INT 3
21498: PUSH
21499: LD_INT 4
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: IN
21508: PUSH
21509: LD_VAR 0 1
21513: PPUSH
21514: LD_INT 51
21516: PPUSH
21517: CALL_OW 321
21521: PUSH
21522: LD_INT 2
21524: EQUAL
21525: AND
21526: IFFALSE 21543
// bpoints := bpoints * 1.2 ;
21528: LD_ADDR_VAR 0 10
21532: PUSH
21533: LD_VAR 0 10
21537: PUSH
21538: LD_REAL  1.20000000000000E+0000
21541: MUL
21542: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21543: LD_VAR 0 6
21547: PPUSH
21548: CALL_OW 257
21552: PUSH
21553: LD_INT 5
21555: PUSH
21556: LD_INT 7
21558: PUSH
21559: LD_INT 9
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: IN
21567: PUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: LD_INT 52
21575: PPUSH
21576: CALL_OW 321
21580: PUSH
21581: LD_INT 2
21583: EQUAL
21584: AND
21585: IFFALSE 21602
// bpoints := bpoints * 1.5 ;
21587: LD_ADDR_VAR 0 10
21591: PUSH
21592: LD_VAR 0 10
21596: PUSH
21597: LD_REAL  1.50000000000000E+0000
21600: MUL
21601: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21602: LD_VAR 0 1
21606: PPUSH
21607: LD_INT 66
21609: PPUSH
21610: CALL_OW 321
21614: PUSH
21615: LD_INT 2
21617: EQUAL
21618: IFFALSE 21635
// bpoints := bpoints * 1.1 ;
21620: LD_ADDR_VAR 0 10
21624: PUSH
21625: LD_VAR 0 10
21629: PUSH
21630: LD_REAL  1.10000000000000E+0000
21633: MUL
21634: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21635: LD_ADDR_VAR 0 10
21639: PUSH
21640: LD_VAR 0 10
21644: PUSH
21645: LD_VAR 0 6
21649: PPUSH
21650: LD_INT 1
21652: PPUSH
21653: CALL_OW 259
21657: PUSH
21658: LD_REAL  1.15000000000000E+0000
21661: MUL
21662: MUL
21663: ST_TO_ADDR
// end ; unit_vehicle :
21664: GO 22494
21666: LD_INT 2
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 22482
21674: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21675: LD_VAR 0 6
21679: PPUSH
21680: CALL_OW 264
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 42
21690: PUSH
21691: LD_INT 24
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: IN
21699: IFFALSE 21720
// points := [ 25 , 5 , 3 ] ;
21701: LD_ADDR_VAR 0 9
21705: PUSH
21706: LD_INT 25
21708: PUSH
21709: LD_INT 5
21711: PUSH
21712: LD_INT 3
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21720: LD_VAR 0 6
21724: PPUSH
21725: CALL_OW 264
21729: PUSH
21730: LD_INT 4
21732: PUSH
21733: LD_INT 43
21735: PUSH
21736: LD_INT 25
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: IN
21744: IFFALSE 21765
// points := [ 40 , 15 , 5 ] ;
21746: LD_ADDR_VAR 0 9
21750: PUSH
21751: LD_INT 40
21753: PUSH
21754: LD_INT 15
21756: PUSH
21757: LD_INT 5
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21765: LD_VAR 0 6
21769: PPUSH
21770: CALL_OW 264
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: LD_INT 23
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: IN
21785: IFFALSE 21806
// points := [ 7 , 25 , 8 ] ;
21787: LD_ADDR_VAR 0 9
21791: PUSH
21792: LD_INT 7
21794: PUSH
21795: LD_INT 25
21797: PUSH
21798: LD_INT 8
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21806: LD_VAR 0 6
21810: PPUSH
21811: CALL_OW 264
21815: PUSH
21816: LD_INT 5
21818: PUSH
21819: LD_INT 27
21821: PUSH
21822: LD_INT 44
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: IN
21830: IFFALSE 21851
// points := [ 14 , 50 , 16 ] ;
21832: LD_ADDR_VAR 0 9
21836: PUSH
21837: LD_INT 14
21839: PUSH
21840: LD_INT 50
21842: PUSH
21843: LD_INT 16
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21851: LD_VAR 0 6
21855: PPUSH
21856: CALL_OW 264
21860: PUSH
21861: LD_INT 6
21863: PUSH
21864: LD_INT 46
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: IN
21871: IFFALSE 21892
// points := [ 32 , 120 , 70 ] ;
21873: LD_ADDR_VAR 0 9
21877: PUSH
21878: LD_INT 32
21880: PUSH
21881: LD_INT 120
21883: PUSH
21884: LD_INT 70
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21892: LD_VAR 0 6
21896: PPUSH
21897: CALL_OW 264
21901: PUSH
21902: LD_INT 7
21904: PUSH
21905: LD_INT 28
21907: PUSH
21908: LD_INT 45
21910: PUSH
21911: LD_EXP 104
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: IN
21922: IFFALSE 21943
// points := [ 35 , 20 , 45 ] ;
21924: LD_ADDR_VAR 0 9
21928: PUSH
21929: LD_INT 35
21931: PUSH
21932: LD_INT 20
21934: PUSH
21935: LD_INT 45
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21943: LD_VAR 0 6
21947: PPUSH
21948: CALL_OW 264
21952: PUSH
21953: LD_INT 47
21955: PUSH
21956: EMPTY
21957: LIST
21958: IN
21959: IFFALSE 21980
// points := [ 67 , 45 , 75 ] ;
21961: LD_ADDR_VAR 0 9
21965: PUSH
21966: LD_INT 67
21968: PUSH
21969: LD_INT 45
21971: PUSH
21972: LD_INT 75
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: LIST
21979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21980: LD_VAR 0 6
21984: PPUSH
21985: CALL_OW 264
21989: PUSH
21990: LD_INT 26
21992: PUSH
21993: EMPTY
21994: LIST
21995: IN
21996: IFFALSE 22017
// points := [ 120 , 30 , 80 ] ;
21998: LD_ADDR_VAR 0 9
22002: PUSH
22003: LD_INT 120
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 80
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22017: LD_VAR 0 6
22021: PPUSH
22022: CALL_OW 264
22026: PUSH
22027: LD_INT 22
22029: PUSH
22030: EMPTY
22031: LIST
22032: IN
22033: IFFALSE 22054
// points := [ 40 , 1 , 1 ] ;
22035: LD_ADDR_VAR 0 9
22039: PUSH
22040: LD_INT 40
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22054: LD_VAR 0 6
22058: PPUSH
22059: CALL_OW 264
22063: PUSH
22064: LD_INT 29
22066: PUSH
22067: EMPTY
22068: LIST
22069: IN
22070: IFFALSE 22091
// points := [ 70 , 200 , 400 ] ;
22072: LD_ADDR_VAR 0 9
22076: PUSH
22077: LD_INT 70
22079: PUSH
22080: LD_INT 200
22082: PUSH
22083: LD_INT 400
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22091: LD_VAR 0 6
22095: PPUSH
22096: CALL_OW 264
22100: PUSH
22101: LD_INT 14
22103: PUSH
22104: LD_INT 53
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: IN
22111: IFFALSE 22132
// points := [ 40 , 10 , 20 ] ;
22113: LD_ADDR_VAR 0 9
22117: PUSH
22118: LD_INT 40
22120: PUSH
22121: LD_INT 10
22123: PUSH
22124: LD_INT 20
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22132: LD_VAR 0 6
22136: PPUSH
22137: CALL_OW 264
22141: PUSH
22142: LD_INT 9
22144: PUSH
22145: EMPTY
22146: LIST
22147: IN
22148: IFFALSE 22169
// points := [ 5 , 70 , 20 ] ;
22150: LD_ADDR_VAR 0 9
22154: PUSH
22155: LD_INT 5
22157: PUSH
22158: LD_INT 70
22160: PUSH
22161: LD_INT 20
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22169: LD_VAR 0 6
22173: PPUSH
22174: CALL_OW 264
22178: PUSH
22179: LD_INT 10
22181: PUSH
22182: EMPTY
22183: LIST
22184: IN
22185: IFFALSE 22206
// points := [ 35 , 110 , 70 ] ;
22187: LD_ADDR_VAR 0 9
22191: PUSH
22192: LD_INT 35
22194: PUSH
22195: LD_INT 110
22197: PUSH
22198: LD_INT 70
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 265
22215: PUSH
22216: LD_INT 25
22218: EQUAL
22219: IFFALSE 22240
// points := [ 80 , 65 , 100 ] ;
22221: LD_ADDR_VAR 0 9
22225: PUSH
22226: LD_INT 80
22228: PUSH
22229: LD_INT 65
22231: PUSH
22232: LD_INT 100
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22240: LD_VAR 0 6
22244: PPUSH
22245: CALL_OW 263
22249: PUSH
22250: LD_INT 1
22252: EQUAL
22253: IFFALSE 22288
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22255: LD_ADDR_VAR 0 10
22259: PUSH
22260: LD_VAR 0 10
22264: PUSH
22265: LD_VAR 0 6
22269: PPUSH
22270: CALL_OW 311
22274: PPUSH
22275: LD_INT 3
22277: PPUSH
22278: CALL_OW 259
22282: PUSH
22283: LD_INT 4
22285: MUL
22286: MUL
22287: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22288: LD_VAR 0 6
22292: PPUSH
22293: CALL_OW 263
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22352
// begin j := IsControledBy ( i ) ;
22303: LD_ADDR_VAR 0 7
22307: PUSH
22308: LD_VAR 0 6
22312: PPUSH
22313: CALL_OW 312
22317: ST_TO_ADDR
// if j then
22318: LD_VAR 0 7
22322: IFFALSE 22352
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22324: LD_ADDR_VAR 0 10
22328: PUSH
22329: LD_VAR 0 10
22333: PUSH
22334: LD_VAR 0 7
22338: PPUSH
22339: LD_INT 3
22341: PPUSH
22342: CALL_OW 259
22346: PUSH
22347: LD_INT 3
22349: MUL
22350: MUL
22351: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22352: LD_VAR 0 6
22356: PPUSH
22357: CALL_OW 264
22361: PUSH
22362: LD_INT 5
22364: PUSH
22365: LD_INT 6
22367: PUSH
22368: LD_INT 46
22370: PUSH
22371: LD_INT 44
22373: PUSH
22374: LD_INT 47
22376: PUSH
22377: LD_INT 45
22379: PUSH
22380: LD_INT 28
22382: PUSH
22383: LD_INT 7
22385: PUSH
22386: LD_INT 27
22388: PUSH
22389: LD_INT 29
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: IN
22404: PUSH
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_INT 52
22412: PPUSH
22413: CALL_OW 321
22417: PUSH
22418: LD_INT 2
22420: EQUAL
22421: AND
22422: IFFALSE 22439
// bpoints := bpoints * 1.2 ;
22424: LD_ADDR_VAR 0 10
22428: PUSH
22429: LD_VAR 0 10
22433: PUSH
22434: LD_REAL  1.20000000000000E+0000
22437: MUL
22438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22439: LD_VAR 0 6
22443: PPUSH
22444: CALL_OW 264
22448: PUSH
22449: LD_INT 6
22451: PUSH
22452: LD_INT 46
22454: PUSH
22455: LD_INT 47
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: IN
22463: IFFALSE 22480
// bpoints := bpoints * 1.2 ;
22465: LD_ADDR_VAR 0 10
22469: PUSH
22470: LD_VAR 0 10
22474: PUSH
22475: LD_REAL  1.20000000000000E+0000
22478: MUL
22479: ST_TO_ADDR
// end ; unit_building :
22480: GO 22494
22482: LD_INT 3
22484: DOUBLE
22485: EQUAL
22486: IFTRUE 22490
22488: GO 22493
22490: POP
// ; end ;
22491: GO 22494
22493: POP
// for j = 1 to 3 do
22494: LD_ADDR_VAR 0 7
22498: PUSH
22499: DOUBLE
22500: LD_INT 1
22502: DEC
22503: ST_TO_ADDR
22504: LD_INT 3
22506: PUSH
22507: FOR_TO
22508: IFFALSE 22561
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22510: LD_ADDR_VAR 0 5
22514: PUSH
22515: LD_VAR 0 5
22519: PPUSH
22520: LD_VAR 0 7
22524: PPUSH
22525: LD_VAR 0 5
22529: PUSH
22530: LD_VAR 0 7
22534: ARRAY
22535: PUSH
22536: LD_VAR 0 9
22540: PUSH
22541: LD_VAR 0 7
22545: ARRAY
22546: PUSH
22547: LD_VAR 0 10
22551: MUL
22552: PLUS
22553: PPUSH
22554: CALL_OW 1
22558: ST_TO_ADDR
22559: GO 22507
22561: POP
22562: POP
// end ;
22563: GO 21040
22565: POP
22566: POP
// result := Replace ( result , 4 , tmp ) ;
22567: LD_ADDR_VAR 0 5
22571: PUSH
22572: LD_VAR 0 5
22576: PPUSH
22577: LD_INT 4
22579: PPUSH
22580: LD_VAR 0 8
22584: PPUSH
22585: CALL_OW 1
22589: ST_TO_ADDR
// end ;
22590: LD_VAR 0 5
22594: RET
// export function DangerAtRange ( unit , range ) ; begin
22595: LD_INT 0
22597: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 255
22612: PPUSH
22613: LD_VAR 0 1
22617: PPUSH
22618: CALL_OW 250
22622: PPUSH
22623: LD_VAR 0 1
22627: PPUSH
22628: CALL_OW 251
22632: PPUSH
22633: LD_VAR 0 2
22637: PPUSH
22638: CALL 20892 0 4
22642: ST_TO_ADDR
// end ;
22643: LD_VAR 0 3
22647: RET
// export function DangerInArea ( side , area ) ; begin
22648: LD_INT 0
22650: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22651: LD_ADDR_VAR 0 3
22655: PUSH
22656: LD_VAR 0 2
22660: PPUSH
22661: LD_INT 81
22663: PUSH
22664: LD_VAR 0 1
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PPUSH
22673: CALL_OW 70
22677: ST_TO_ADDR
// end ;
22678: LD_VAR 0 3
22682: RET
// export function IsExtension ( b ) ; begin
22683: LD_INT 0
22685: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22686: LD_ADDR_VAR 0 2
22690: PUSH
22691: LD_VAR 0 1
22695: PUSH
22696: LD_INT 23
22698: PUSH
22699: LD_INT 20
22701: PUSH
22702: LD_INT 22
22704: PUSH
22705: LD_INT 17
22707: PUSH
22708: LD_INT 24
22710: PUSH
22711: LD_INT 21
22713: PUSH
22714: LD_INT 19
22716: PUSH
22717: LD_INT 16
22719: PUSH
22720: LD_INT 25
22722: PUSH
22723: LD_INT 18
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: IN
22738: ST_TO_ADDR
// end ;
22739: LD_VAR 0 2
22743: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22744: LD_INT 0
22746: PPUSH
22747: PPUSH
22748: PPUSH
// result := [ ] ;
22749: LD_ADDR_VAR 0 4
22753: PUSH
22754: EMPTY
22755: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22756: LD_ADDR_VAR 0 5
22760: PUSH
22761: LD_VAR 0 2
22765: PPUSH
22766: LD_INT 21
22768: PUSH
22769: LD_INT 3
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PPUSH
22776: CALL_OW 70
22780: ST_TO_ADDR
// if not tmp then
22781: LD_VAR 0 5
22785: NOT
22786: IFFALSE 22790
// exit ;
22788: GO 22854
// if checkLink then
22790: LD_VAR 0 3
22794: IFFALSE 22844
// begin for i in tmp do
22796: LD_ADDR_VAR 0 6
22800: PUSH
22801: LD_VAR 0 5
22805: PUSH
22806: FOR_IN
22807: IFFALSE 22842
// if GetBase ( i ) <> base then
22809: LD_VAR 0 6
22813: PPUSH
22814: CALL_OW 274
22818: PUSH
22819: LD_VAR 0 1
22823: NONEQUAL
22824: IFFALSE 22840
// ComLinkToBase ( base , i ) ;
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_VAR 0 6
22835: PPUSH
22836: CALL_OW 169
22840: GO 22806
22842: POP
22843: POP
// end ; result := tmp ;
22844: LD_ADDR_VAR 0 4
22848: PUSH
22849: LD_VAR 0 5
22853: ST_TO_ADDR
// end ;
22854: LD_VAR 0 4
22858: RET
// export function ComComplete ( units , b ) ; var i ; begin
22859: LD_INT 0
22861: PPUSH
22862: PPUSH
// if not units then
22863: LD_VAR 0 1
22867: NOT
22868: IFFALSE 22872
// exit ;
22870: GO 22962
// for i in units do
22872: LD_ADDR_VAR 0 4
22876: PUSH
22877: LD_VAR 0 1
22881: PUSH
22882: FOR_IN
22883: IFFALSE 22960
// if BuildingStatus ( b ) = bs_build then
22885: LD_VAR 0 2
22889: PPUSH
22890: CALL_OW 461
22894: PUSH
22895: LD_INT 1
22897: EQUAL
22898: IFFALSE 22958
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22900: LD_VAR 0 4
22904: PPUSH
22905: LD_STRING h
22907: PUSH
22908: LD_VAR 0 2
22912: PPUSH
22913: CALL_OW 250
22917: PUSH
22918: LD_VAR 0 2
22922: PPUSH
22923: CALL_OW 251
22927: PUSH
22928: LD_VAR 0 2
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: LD_INT 0
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: PPUSH
22954: CALL_OW 446
22958: GO 22882
22960: POP
22961: POP
// end ;
22962: LD_VAR 0 3
22966: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22967: LD_INT 0
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22975: LD_VAR 0 1
22979: NOT
22980: PUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 263
22990: PUSH
22991: LD_INT 2
22993: NONEQUAL
22994: OR
22995: IFFALSE 22999
// exit ;
22997: GO 23315
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22999: LD_ADDR_VAR 0 6
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 255
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 30
23026: PUSH
23027: LD_INT 36
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 34
23036: PUSH
23037: LD_INT 31
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PPUSH
23053: CALL_OW 69
23057: ST_TO_ADDR
// if not tmp then
23058: LD_VAR 0 6
23062: NOT
23063: IFFALSE 23067
// exit ;
23065: GO 23315
// result := [ ] ;
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: EMPTY
23073: ST_TO_ADDR
// for i in tmp do
23074: LD_ADDR_VAR 0 3
23078: PUSH
23079: LD_VAR 0 6
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23156
// begin t := UnitsInside ( i ) ;
23087: LD_ADDR_VAR 0 4
23091: PUSH
23092: LD_VAR 0 3
23096: PPUSH
23097: CALL_OW 313
23101: ST_TO_ADDR
// if t then
23102: LD_VAR 0 4
23106: IFFALSE 23154
// for j in t do
23108: LD_ADDR_VAR 0 7
23112: PUSH
23113: LD_VAR 0 4
23117: PUSH
23118: FOR_IN
23119: IFFALSE 23152
// result := Replace ( result , result + 1 , j ) ;
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_VAR 0 2
23130: PPUSH
23131: LD_VAR 0 2
23135: PUSH
23136: LD_INT 1
23138: PLUS
23139: PPUSH
23140: LD_VAR 0 7
23144: PPUSH
23145: CALL_OW 1
23149: ST_TO_ADDR
23150: GO 23118
23152: POP
23153: POP
// end ;
23154: GO 23084
23156: POP
23157: POP
// if not result then
23158: LD_VAR 0 2
23162: NOT
23163: IFFALSE 23167
// exit ;
23165: GO 23315
// mech := result [ 1 ] ;
23167: LD_ADDR_VAR 0 5
23171: PUSH
23172: LD_VAR 0 2
23176: PUSH
23177: LD_INT 1
23179: ARRAY
23180: ST_TO_ADDR
// if result > 1 then
23181: LD_VAR 0 2
23185: PUSH
23186: LD_INT 1
23188: GREATER
23189: IFFALSE 23301
// begin for i = 2 to result do
23191: LD_ADDR_VAR 0 3
23195: PUSH
23196: DOUBLE
23197: LD_INT 2
23199: DEC
23200: ST_TO_ADDR
23201: LD_VAR 0 2
23205: PUSH
23206: FOR_TO
23207: IFFALSE 23299
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: LD_VAR 0 2
23218: PUSH
23219: LD_VAR 0 3
23223: ARRAY
23224: PPUSH
23225: LD_INT 3
23227: PPUSH
23228: CALL_OW 259
23232: PUSH
23233: LD_VAR 0 2
23237: PUSH
23238: LD_VAR 0 3
23242: ARRAY
23243: PPUSH
23244: CALL_OW 432
23248: MINUS
23249: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23250: LD_VAR 0 4
23254: PUSH
23255: LD_VAR 0 5
23259: PPUSH
23260: LD_INT 3
23262: PPUSH
23263: CALL_OW 259
23267: PUSH
23268: LD_VAR 0 5
23272: PPUSH
23273: CALL_OW 432
23277: MINUS
23278: GREATEREQUAL
23279: IFFALSE 23297
// mech := result [ i ] ;
23281: LD_ADDR_VAR 0 5
23285: PUSH
23286: LD_VAR 0 2
23290: PUSH
23291: LD_VAR 0 3
23295: ARRAY
23296: ST_TO_ADDR
// end ;
23297: GO 23206
23299: POP
23300: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23301: LD_VAR 0 1
23305: PPUSH
23306: LD_VAR 0 5
23310: PPUSH
23311: CALL_OW 135
// end ;
23315: LD_VAR 0 2
23319: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
23334: PPUSH
// result := [ ] ;
23335: LD_ADDR_VAR 0 7
23339: PUSH
23340: EMPTY
23341: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23342: LD_VAR 0 1
23346: PPUSH
23347: CALL_OW 266
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: IN
23362: NOT
23363: IFFALSE 23367
// exit ;
23365: GO 25001
// if name then
23367: LD_VAR 0 3
23371: IFFALSE 23387
// SetBName ( base_dep , name ) ;
23373: LD_VAR 0 1
23377: PPUSH
23378: LD_VAR 0 3
23382: PPUSH
23383: CALL_OW 500
// base := GetBase ( base_dep ) ;
23387: LD_ADDR_VAR 0 15
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 274
23401: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23402: LD_ADDR_VAR 0 16
23406: PUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL_OW 255
23416: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23417: LD_ADDR_VAR 0 17
23421: PUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 248
23431: ST_TO_ADDR
// if sources then
23432: LD_VAR 0 5
23436: IFFALSE 23483
// for i = 1 to 3 do
23438: LD_ADDR_VAR 0 8
23442: PUSH
23443: DOUBLE
23444: LD_INT 1
23446: DEC
23447: ST_TO_ADDR
23448: LD_INT 3
23450: PUSH
23451: FOR_TO
23452: IFFALSE 23481
// AddResourceType ( base , i , sources [ i ] ) ;
23454: LD_VAR 0 15
23458: PPUSH
23459: LD_VAR 0 8
23463: PPUSH
23464: LD_VAR 0 5
23468: PUSH
23469: LD_VAR 0 8
23473: ARRAY
23474: PPUSH
23475: CALL_OW 276
23479: GO 23451
23481: POP
23482: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23483: LD_ADDR_VAR 0 18
23487: PUSH
23488: LD_VAR 0 15
23492: PPUSH
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_INT 1
23500: PPUSH
23501: CALL 22744 0 3
23505: ST_TO_ADDR
// InitHc ;
23506: CALL_OW 19
// InitUc ;
23510: CALL_OW 18
// uc_side := side ;
23514: LD_ADDR_OWVAR 20
23518: PUSH
23519: LD_VAR 0 16
23523: ST_TO_ADDR
// uc_nation := nation ;
23524: LD_ADDR_OWVAR 21
23528: PUSH
23529: LD_VAR 0 17
23533: ST_TO_ADDR
// if buildings then
23534: LD_VAR 0 18
23538: IFFALSE 24860
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23540: LD_ADDR_VAR 0 19
23544: PUSH
23545: LD_VAR 0 18
23549: PPUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 30
23555: PUSH
23556: LD_INT 29
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 30
23565: PUSH
23566: LD_INT 30
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: PPUSH
23578: CALL_OW 72
23582: ST_TO_ADDR
// if tmp then
23583: LD_VAR 0 19
23587: IFFALSE 23635
// for i in tmp do
23589: LD_ADDR_VAR 0 8
23593: PUSH
23594: LD_VAR 0 19
23598: PUSH
23599: FOR_IN
23600: IFFALSE 23633
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23602: LD_VAR 0 8
23606: PPUSH
23607: CALL_OW 250
23611: PPUSH
23612: LD_VAR 0 8
23616: PPUSH
23617: CALL_OW 251
23621: PPUSH
23622: LD_VAR 0 16
23626: PPUSH
23627: CALL_OW 441
23631: GO 23599
23633: POP
23634: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23635: LD_VAR 0 18
23639: PPUSH
23640: LD_INT 2
23642: PUSH
23643: LD_INT 30
23645: PUSH
23646: LD_INT 32
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 30
23655: PUSH
23656: LD_INT 33
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 72
23672: IFFALSE 23760
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23674: LD_ADDR_VAR 0 8
23678: PUSH
23679: LD_VAR 0 18
23683: PPUSH
23684: LD_INT 2
23686: PUSH
23687: LD_INT 30
23689: PUSH
23690: LD_INT 32
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 30
23699: PUSH
23700: LD_INT 33
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: PPUSH
23712: CALL_OW 72
23716: PUSH
23717: FOR_IN
23718: IFFALSE 23758
// begin if not GetBWeapon ( i ) then
23720: LD_VAR 0 8
23724: PPUSH
23725: CALL_OW 269
23729: NOT
23730: IFFALSE 23756
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23732: LD_VAR 0 8
23736: PPUSH
23737: LD_VAR 0 8
23741: PPUSH
23742: LD_VAR 0 2
23746: PPUSH
23747: CALL 25006 0 2
23751: PPUSH
23752: CALL_OW 431
// end ;
23756: GO 23717
23758: POP
23759: POP
// end ; for i = 1 to personel do
23760: LD_ADDR_VAR 0 8
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_VAR 0 6
23774: PUSH
23775: FOR_TO
23776: IFFALSE 24840
// begin if i > 4 then
23778: LD_VAR 0 8
23782: PUSH
23783: LD_INT 4
23785: GREATER
23786: IFFALSE 23790
// break ;
23788: GO 24840
// case i of 1 :
23790: LD_VAR 0 8
23794: PUSH
23795: LD_INT 1
23797: DOUBLE
23798: EQUAL
23799: IFTRUE 23803
23801: GO 23883
23803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23804: LD_ADDR_VAR 0 12
23808: PUSH
23809: LD_VAR 0 18
23813: PPUSH
23814: LD_INT 22
23816: PUSH
23817: LD_VAR 0 16
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 58
23828: PUSH
23829: EMPTY
23830: LIST
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: LD_INT 30
23837: PUSH
23838: LD_INT 32
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_INT 4
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 30
23857: PUSH
23858: LD_INT 5
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: PPUSH
23876: CALL_OW 72
23880: ST_TO_ADDR
23881: GO 24105
23883: LD_INT 2
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23953
23891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23892: LD_ADDR_VAR 0 12
23896: PUSH
23897: LD_VAR 0 18
23901: PPUSH
23902: LD_INT 22
23904: PUSH
23905: LD_VAR 0 16
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 30
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PPUSH
23946: CALL_OW 72
23950: ST_TO_ADDR
23951: GO 24105
23953: LD_INT 3
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24023
23961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23962: LD_ADDR_VAR 0 12
23966: PUSH
23967: LD_VAR 0 18
23971: PPUSH
23972: LD_INT 22
23974: PUSH
23975: LD_VAR 0 16
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 2
23986: PUSH
23987: LD_INT 30
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 30
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PPUSH
24016: CALL_OW 72
24020: ST_TO_ADDR
24021: GO 24105
24023: LD_INT 4
24025: DOUBLE
24026: EQUAL
24027: IFTRUE 24031
24029: GO 24104
24031: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24032: LD_ADDR_VAR 0 12
24036: PUSH
24037: LD_VAR 0 18
24041: PPUSH
24042: LD_INT 22
24044: PUSH
24045: LD_VAR 0 16
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 30
24059: PUSH
24060: LD_INT 6
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 30
24069: PUSH
24070: LD_INT 7
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 8
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 72
24101: ST_TO_ADDR
24102: GO 24105
24104: POP
// if i = 1 then
24105: LD_VAR 0 8
24109: PUSH
24110: LD_INT 1
24112: EQUAL
24113: IFFALSE 24224
// begin tmp := [ ] ;
24115: LD_ADDR_VAR 0 19
24119: PUSH
24120: EMPTY
24121: ST_TO_ADDR
// for j in f do
24122: LD_ADDR_VAR 0 9
24126: PUSH
24127: LD_VAR 0 12
24131: PUSH
24132: FOR_IN
24133: IFFALSE 24206
// if GetBType ( j ) = b_bunker then
24135: LD_VAR 0 9
24139: PPUSH
24140: CALL_OW 266
24144: PUSH
24145: LD_INT 32
24147: EQUAL
24148: IFFALSE 24175
// tmp := Insert ( tmp , 1 , j ) else
24150: LD_ADDR_VAR 0 19
24154: PUSH
24155: LD_VAR 0 19
24159: PPUSH
24160: LD_INT 1
24162: PPUSH
24163: LD_VAR 0 9
24167: PPUSH
24168: CALL_OW 2
24172: ST_TO_ADDR
24173: GO 24204
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24175: LD_ADDR_VAR 0 19
24179: PUSH
24180: LD_VAR 0 19
24184: PPUSH
24185: LD_VAR 0 19
24189: PUSH
24190: LD_INT 1
24192: PLUS
24193: PPUSH
24194: LD_VAR 0 9
24198: PPUSH
24199: CALL_OW 2
24203: ST_TO_ADDR
24204: GO 24132
24206: POP
24207: POP
// if tmp then
24208: LD_VAR 0 19
24212: IFFALSE 24224
// f := tmp ;
24214: LD_ADDR_VAR 0 12
24218: PUSH
24219: LD_VAR 0 19
24223: ST_TO_ADDR
// end ; x := personel [ i ] ;
24224: LD_ADDR_VAR 0 13
24228: PUSH
24229: LD_VAR 0 6
24233: PUSH
24234: LD_VAR 0 8
24238: ARRAY
24239: ST_TO_ADDR
// if x = - 1 then
24240: LD_VAR 0 13
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: EQUAL
24249: IFFALSE 24458
// begin for j in f do
24251: LD_ADDR_VAR 0 9
24255: PUSH
24256: LD_VAR 0 12
24260: PUSH
24261: FOR_IN
24262: IFFALSE 24454
// repeat InitHc ;
24264: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24268: LD_VAR 0 9
24272: PPUSH
24273: CALL_OW 266
24277: PUSH
24278: LD_INT 5
24280: EQUAL
24281: IFFALSE 24351
// begin if UnitsInside ( j ) < 3 then
24283: LD_VAR 0 9
24287: PPUSH
24288: CALL_OW 313
24292: PUSH
24293: LD_INT 3
24295: LESS
24296: IFFALSE 24332
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24298: LD_INT 0
24300: PPUSH
24301: LD_INT 5
24303: PUSH
24304: LD_INT 8
24306: PUSH
24307: LD_INT 9
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: PUSH
24315: LD_VAR 0 17
24319: ARRAY
24320: PPUSH
24321: LD_VAR 0 4
24325: PPUSH
24326: CALL_OW 380
24330: GO 24349
// PrepareHuman ( false , i , skill ) ;
24332: LD_INT 0
24334: PPUSH
24335: LD_VAR 0 8
24339: PPUSH
24340: LD_VAR 0 4
24344: PPUSH
24345: CALL_OW 380
// end else
24349: GO 24368
// PrepareHuman ( false , i , skill ) ;
24351: LD_INT 0
24353: PPUSH
24354: LD_VAR 0 8
24358: PPUSH
24359: LD_VAR 0 4
24363: PPUSH
24364: CALL_OW 380
// un := CreateHuman ;
24368: LD_ADDR_VAR 0 14
24372: PUSH
24373: CALL_OW 44
24377: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24378: LD_ADDR_VAR 0 7
24382: PUSH
24383: LD_VAR 0 7
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: LD_VAR 0 14
24395: PPUSH
24396: CALL_OW 2
24400: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24401: LD_VAR 0 14
24405: PPUSH
24406: LD_VAR 0 9
24410: PPUSH
24411: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24415: LD_VAR 0 9
24419: PPUSH
24420: CALL_OW 313
24424: PUSH
24425: LD_INT 6
24427: EQUAL
24428: PUSH
24429: LD_VAR 0 9
24433: PPUSH
24434: CALL_OW 266
24438: PUSH
24439: LD_INT 32
24441: PUSH
24442: LD_INT 31
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: IN
24449: OR
24450: IFFALSE 24264
24452: GO 24261
24454: POP
24455: POP
// end else
24456: GO 24838
// for j = 1 to x do
24458: LD_ADDR_VAR 0 9
24462: PUSH
24463: DOUBLE
24464: LD_INT 1
24466: DEC
24467: ST_TO_ADDR
24468: LD_VAR 0 13
24472: PUSH
24473: FOR_TO
24474: IFFALSE 24836
// begin InitHc ;
24476: CALL_OW 19
// if not f then
24480: LD_VAR 0 12
24484: NOT
24485: IFFALSE 24574
// begin PrepareHuman ( false , i , skill ) ;
24487: LD_INT 0
24489: PPUSH
24490: LD_VAR 0 8
24494: PPUSH
24495: LD_VAR 0 4
24499: PPUSH
24500: CALL_OW 380
// un := CreateHuman ;
24504: LD_ADDR_VAR 0 14
24508: PUSH
24509: CALL_OW 44
24513: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24514: LD_ADDR_VAR 0 7
24518: PUSH
24519: LD_VAR 0 7
24523: PPUSH
24524: LD_INT 1
24526: PPUSH
24527: LD_VAR 0 14
24531: PPUSH
24532: CALL_OW 2
24536: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24537: LD_VAR 0 14
24541: PPUSH
24542: LD_VAR 0 1
24546: PPUSH
24547: CALL_OW 250
24551: PPUSH
24552: LD_VAR 0 1
24556: PPUSH
24557: CALL_OW 251
24561: PPUSH
24562: LD_INT 10
24564: PPUSH
24565: LD_INT 0
24567: PPUSH
24568: CALL_OW 50
// continue ;
24572: GO 24473
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24574: LD_VAR 0 12
24578: PUSH
24579: LD_INT 1
24581: ARRAY
24582: PPUSH
24583: CALL_OW 313
24587: PUSH
24588: LD_VAR 0 12
24592: PUSH
24593: LD_INT 1
24595: ARRAY
24596: PPUSH
24597: CALL_OW 266
24601: PUSH
24602: LD_INT 32
24604: PUSH
24605: LD_INT 31
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: IN
24612: AND
24613: PUSH
24614: LD_VAR 0 12
24618: PUSH
24619: LD_INT 1
24621: ARRAY
24622: PPUSH
24623: CALL_OW 313
24627: PUSH
24628: LD_INT 6
24630: EQUAL
24631: OR
24632: IFFALSE 24652
// f := Delete ( f , 1 ) ;
24634: LD_ADDR_VAR 0 12
24638: PUSH
24639: LD_VAR 0 12
24643: PPUSH
24644: LD_INT 1
24646: PPUSH
24647: CALL_OW 3
24651: ST_TO_ADDR
// if not f then
24652: LD_VAR 0 12
24656: NOT
24657: IFFALSE 24675
// begin x := x + 2 ;
24659: LD_ADDR_VAR 0 13
24663: PUSH
24664: LD_VAR 0 13
24668: PUSH
24669: LD_INT 2
24671: PLUS
24672: ST_TO_ADDR
// continue ;
24673: GO 24473
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24675: LD_VAR 0 12
24679: PUSH
24680: LD_INT 1
24682: ARRAY
24683: PPUSH
24684: CALL_OW 266
24688: PUSH
24689: LD_INT 5
24691: EQUAL
24692: IFFALSE 24766
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24694: LD_VAR 0 12
24698: PUSH
24699: LD_INT 1
24701: ARRAY
24702: PPUSH
24703: CALL_OW 313
24707: PUSH
24708: LD_INT 3
24710: LESS
24711: IFFALSE 24747
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24713: LD_INT 0
24715: PPUSH
24716: LD_INT 5
24718: PUSH
24719: LD_INT 8
24721: PUSH
24722: LD_INT 9
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: PUSH
24730: LD_VAR 0 17
24734: ARRAY
24735: PPUSH
24736: LD_VAR 0 4
24740: PPUSH
24741: CALL_OW 380
24745: GO 24764
// PrepareHuman ( false , i , skill ) ;
24747: LD_INT 0
24749: PPUSH
24750: LD_VAR 0 8
24754: PPUSH
24755: LD_VAR 0 4
24759: PPUSH
24760: CALL_OW 380
// end else
24764: GO 24783
// PrepareHuman ( false , i , skill ) ;
24766: LD_INT 0
24768: PPUSH
24769: LD_VAR 0 8
24773: PPUSH
24774: LD_VAR 0 4
24778: PPUSH
24779: CALL_OW 380
// un := CreateHuman ;
24783: LD_ADDR_VAR 0 14
24787: PUSH
24788: CALL_OW 44
24792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24793: LD_ADDR_VAR 0 7
24797: PUSH
24798: LD_VAR 0 7
24802: PPUSH
24803: LD_INT 1
24805: PPUSH
24806: LD_VAR 0 14
24810: PPUSH
24811: CALL_OW 2
24815: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24816: LD_VAR 0 14
24820: PPUSH
24821: LD_VAR 0 12
24825: PUSH
24826: LD_INT 1
24828: ARRAY
24829: PPUSH
24830: CALL_OW 52
// end ;
24834: GO 24473
24836: POP
24837: POP
// end ;
24838: GO 23775
24840: POP
24841: POP
// result := result ^ buildings ;
24842: LD_ADDR_VAR 0 7
24846: PUSH
24847: LD_VAR 0 7
24851: PUSH
24852: LD_VAR 0 18
24856: ADD
24857: ST_TO_ADDR
// end else
24858: GO 25001
// begin for i = 1 to personel do
24860: LD_ADDR_VAR 0 8
24864: PUSH
24865: DOUBLE
24866: LD_INT 1
24868: DEC
24869: ST_TO_ADDR
24870: LD_VAR 0 6
24874: PUSH
24875: FOR_TO
24876: IFFALSE 24999
// begin if i > 4 then
24878: LD_VAR 0 8
24882: PUSH
24883: LD_INT 4
24885: GREATER
24886: IFFALSE 24890
// break ;
24888: GO 24999
// x := personel [ i ] ;
24890: LD_ADDR_VAR 0 13
24894: PUSH
24895: LD_VAR 0 6
24899: PUSH
24900: LD_VAR 0 8
24904: ARRAY
24905: ST_TO_ADDR
// if x = - 1 then
24906: LD_VAR 0 13
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: EQUAL
24915: IFFALSE 24919
// continue ;
24917: GO 24875
// PrepareHuman ( false , i , skill ) ;
24919: LD_INT 0
24921: PPUSH
24922: LD_VAR 0 8
24926: PPUSH
24927: LD_VAR 0 4
24931: PPUSH
24932: CALL_OW 380
// un := CreateHuman ;
24936: LD_ADDR_VAR 0 14
24940: PUSH
24941: CALL_OW 44
24945: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24946: LD_VAR 0 14
24950: PPUSH
24951: LD_VAR 0 1
24955: PPUSH
24956: CALL_OW 250
24960: PPUSH
24961: LD_VAR 0 1
24965: PPUSH
24966: CALL_OW 251
24970: PPUSH
24971: LD_INT 10
24973: PPUSH
24974: LD_INT 0
24976: PPUSH
24977: CALL_OW 50
// result := result ^ un ;
24981: LD_ADDR_VAR 0 7
24985: PUSH
24986: LD_VAR 0 7
24990: PUSH
24991: LD_VAR 0 14
24995: ADD
24996: ST_TO_ADDR
// end ;
24997: GO 24875
24999: POP
25000: POP
// end ; end ;
25001: LD_VAR 0 7
25005: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25006: LD_INT 0
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
25018: PPUSH
25019: PPUSH
25020: PPUSH
25021: PPUSH
25022: PPUSH
25023: PPUSH
// result := false ;
25024: LD_ADDR_VAR 0 3
25028: PUSH
25029: LD_INT 0
25031: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25032: LD_VAR 0 1
25036: NOT
25037: PUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 266
25047: PUSH
25048: LD_INT 32
25050: PUSH
25051: LD_INT 33
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: IN
25058: NOT
25059: OR
25060: IFFALSE 25064
// exit ;
25062: GO 26173
// nat := GetNation ( tower ) ;
25064: LD_ADDR_VAR 0 12
25068: PUSH
25069: LD_VAR 0 1
25073: PPUSH
25074: CALL_OW 248
25078: ST_TO_ADDR
// side := GetSide ( tower ) ;
25079: LD_ADDR_VAR 0 16
25083: PUSH
25084: LD_VAR 0 1
25088: PPUSH
25089: CALL_OW 255
25093: ST_TO_ADDR
// x := GetX ( tower ) ;
25094: LD_ADDR_VAR 0 10
25098: PUSH
25099: LD_VAR 0 1
25103: PPUSH
25104: CALL_OW 250
25108: ST_TO_ADDR
// y := GetY ( tower ) ;
25109: LD_ADDR_VAR 0 11
25113: PUSH
25114: LD_VAR 0 1
25118: PPUSH
25119: CALL_OW 251
25123: ST_TO_ADDR
// if not x or not y then
25124: LD_VAR 0 10
25128: NOT
25129: PUSH
25130: LD_VAR 0 11
25134: NOT
25135: OR
25136: IFFALSE 25140
// exit ;
25138: GO 26173
// weapon := 0 ;
25140: LD_ADDR_VAR 0 18
25144: PUSH
25145: LD_INT 0
25147: ST_TO_ADDR
// fac_list := [ ] ;
25148: LD_ADDR_VAR 0 17
25152: PUSH
25153: EMPTY
25154: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25155: LD_ADDR_VAR 0 6
25159: PUSH
25160: LD_VAR 0 1
25164: PPUSH
25165: CALL_OW 274
25169: PPUSH
25170: LD_VAR 0 2
25174: PPUSH
25175: LD_INT 0
25177: PPUSH
25178: CALL 22744 0 3
25182: PPUSH
25183: LD_INT 30
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 72
25197: ST_TO_ADDR
// if not factories then
25198: LD_VAR 0 6
25202: NOT
25203: IFFALSE 25207
// exit ;
25205: GO 26173
// for i in factories do
25207: LD_ADDR_VAR 0 8
25211: PUSH
25212: LD_VAR 0 6
25216: PUSH
25217: FOR_IN
25218: IFFALSE 25243
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25220: LD_ADDR_VAR 0 17
25224: PUSH
25225: LD_VAR 0 17
25229: PUSH
25230: LD_VAR 0 8
25234: PPUSH
25235: CALL_OW 478
25239: UNION
25240: ST_TO_ADDR
25241: GO 25217
25243: POP
25244: POP
// if not fac_list then
25245: LD_VAR 0 17
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 26173
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25254: LD_ADDR_VAR 0 5
25258: PUSH
25259: LD_INT 4
25261: PUSH
25262: LD_INT 5
25264: PUSH
25265: LD_INT 9
25267: PUSH
25268: LD_INT 10
25270: PUSH
25271: LD_INT 6
25273: PUSH
25274: LD_INT 7
25276: PUSH
25277: LD_INT 11
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 27
25291: PUSH
25292: LD_INT 28
25294: PUSH
25295: LD_INT 26
25297: PUSH
25298: LD_INT 30
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 43
25309: PUSH
25310: LD_INT 44
25312: PUSH
25313: LD_INT 46
25315: PUSH
25316: LD_INT 45
25318: PUSH
25319: LD_INT 47
25321: PUSH
25322: LD_INT 49
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: PUSH
25338: LD_VAR 0 12
25342: ARRAY
25343: ST_TO_ADDR
// list := list isect fac_list ;
25344: LD_ADDR_VAR 0 5
25348: PUSH
25349: LD_VAR 0 5
25353: PUSH
25354: LD_VAR 0 17
25358: ISECT
25359: ST_TO_ADDR
// if not list then
25360: LD_VAR 0 5
25364: NOT
25365: IFFALSE 25369
// exit ;
25367: GO 26173
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25369: LD_VAR 0 12
25373: PUSH
25374: LD_INT 3
25376: EQUAL
25377: PUSH
25378: LD_INT 49
25380: PUSH
25381: LD_VAR 0 5
25385: IN
25386: AND
25387: PUSH
25388: LD_INT 31
25390: PPUSH
25391: LD_VAR 0 16
25395: PPUSH
25396: CALL_OW 321
25400: PUSH
25401: LD_INT 2
25403: EQUAL
25404: AND
25405: IFFALSE 25465
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25407: LD_INT 22
25409: PUSH
25410: LD_VAR 0 16
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 35
25421: PUSH
25422: LD_INT 49
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 91
25431: PUSH
25432: LD_VAR 0 1
25436: PUSH
25437: LD_INT 10
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: LIST
25449: PPUSH
25450: CALL_OW 69
25454: NOT
25455: IFFALSE 25465
// weapon := ru_time_lapser ;
25457: LD_ADDR_VAR 0 18
25461: PUSH
25462: LD_INT 49
25464: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25465: LD_VAR 0 12
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: LD_INT 2
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: IN
25480: PUSH
25481: LD_INT 11
25483: PUSH
25484: LD_VAR 0 5
25488: IN
25489: PUSH
25490: LD_INT 30
25492: PUSH
25493: LD_VAR 0 5
25497: IN
25498: OR
25499: AND
25500: PUSH
25501: LD_INT 6
25503: PPUSH
25504: LD_VAR 0 16
25508: PPUSH
25509: CALL_OW 321
25513: PUSH
25514: LD_INT 2
25516: EQUAL
25517: AND
25518: IFFALSE 25683
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25520: LD_INT 22
25522: PUSH
25523: LD_VAR 0 16
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: LD_INT 35
25537: PUSH
25538: LD_INT 11
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 35
25547: PUSH
25548: LD_INT 30
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 91
25562: PUSH
25563: LD_VAR 0 1
25567: PUSH
25568: LD_INT 18
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: PPUSH
25581: CALL_OW 69
25585: NOT
25586: PUSH
25587: LD_INT 22
25589: PUSH
25590: LD_VAR 0 16
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 30
25604: PUSH
25605: LD_INT 32
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 30
25614: PUSH
25615: LD_INT 33
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 91
25629: PUSH
25630: LD_VAR 0 1
25634: PUSH
25635: LD_INT 12
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: PPUSH
25651: CALL_OW 69
25655: PUSH
25656: LD_INT 2
25658: GREATER
25659: AND
25660: IFFALSE 25683
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25662: LD_ADDR_VAR 0 18
25666: PUSH
25667: LD_INT 11
25669: PUSH
25670: LD_INT 30
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_VAR 0 12
25681: ARRAY
25682: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25683: LD_VAR 0 18
25687: NOT
25688: PUSH
25689: LD_INT 40
25691: PPUSH
25692: LD_VAR 0 16
25696: PPUSH
25697: CALL_OW 321
25701: PUSH
25702: LD_INT 2
25704: EQUAL
25705: AND
25706: PUSH
25707: LD_INT 7
25709: PUSH
25710: LD_VAR 0 5
25714: IN
25715: PUSH
25716: LD_INT 28
25718: PUSH
25719: LD_VAR 0 5
25723: IN
25724: OR
25725: PUSH
25726: LD_INT 45
25728: PUSH
25729: LD_VAR 0 5
25733: IN
25734: OR
25735: AND
25736: IFFALSE 25990
// begin hex := GetHexInfo ( x , y ) ;
25738: LD_ADDR_VAR 0 4
25742: PUSH
25743: LD_VAR 0 10
25747: PPUSH
25748: LD_VAR 0 11
25752: PPUSH
25753: CALL_OW 546
25757: ST_TO_ADDR
// if hex [ 1 ] then
25758: LD_VAR 0 4
25762: PUSH
25763: LD_INT 1
25765: ARRAY
25766: IFFALSE 25770
// exit ;
25768: GO 26173
// height := hex [ 2 ] ;
25770: LD_ADDR_VAR 0 15
25774: PUSH
25775: LD_VAR 0 4
25779: PUSH
25780: LD_INT 2
25782: ARRAY
25783: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25784: LD_ADDR_VAR 0 14
25788: PUSH
25789: LD_INT 0
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: LD_INT 5
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: ST_TO_ADDR
// for i in tmp do
25807: LD_ADDR_VAR 0 8
25811: PUSH
25812: LD_VAR 0 14
25816: PUSH
25817: FOR_IN
25818: IFFALSE 25988
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25820: LD_ADDR_VAR 0 9
25824: PUSH
25825: LD_VAR 0 10
25829: PPUSH
25830: LD_VAR 0 8
25834: PPUSH
25835: LD_INT 5
25837: PPUSH
25838: CALL_OW 272
25842: PUSH
25843: LD_VAR 0 11
25847: PPUSH
25848: LD_VAR 0 8
25852: PPUSH
25853: LD_INT 5
25855: PPUSH
25856: CALL_OW 273
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25865: LD_VAR 0 9
25869: PUSH
25870: LD_INT 1
25872: ARRAY
25873: PPUSH
25874: LD_VAR 0 9
25878: PUSH
25879: LD_INT 2
25881: ARRAY
25882: PPUSH
25883: CALL_OW 488
25887: IFFALSE 25986
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25889: LD_ADDR_VAR 0 4
25893: PUSH
25894: LD_VAR 0 9
25898: PUSH
25899: LD_INT 1
25901: ARRAY
25902: PPUSH
25903: LD_VAR 0 9
25907: PUSH
25908: LD_INT 2
25910: ARRAY
25911: PPUSH
25912: CALL_OW 546
25916: ST_TO_ADDR
// if hex [ 1 ] then
25917: LD_VAR 0 4
25921: PUSH
25922: LD_INT 1
25924: ARRAY
25925: IFFALSE 25929
// continue ;
25927: GO 25817
// h := hex [ 2 ] ;
25929: LD_ADDR_VAR 0 13
25933: PUSH
25934: LD_VAR 0 4
25938: PUSH
25939: LD_INT 2
25941: ARRAY
25942: ST_TO_ADDR
// if h + 7 < height then
25943: LD_VAR 0 13
25947: PUSH
25948: LD_INT 7
25950: PLUS
25951: PUSH
25952: LD_VAR 0 15
25956: LESS
25957: IFFALSE 25986
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25959: LD_ADDR_VAR 0 18
25963: PUSH
25964: LD_INT 7
25966: PUSH
25967: LD_INT 28
25969: PUSH
25970: LD_INT 45
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: PUSH
25978: LD_VAR 0 12
25982: ARRAY
25983: ST_TO_ADDR
// break ;
25984: GO 25988
// end ; end ; end ;
25986: GO 25817
25988: POP
25989: POP
// end ; if not weapon then
25990: LD_VAR 0 18
25994: NOT
25995: IFFALSE 26055
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25997: LD_ADDR_VAR 0 5
26001: PUSH
26002: LD_VAR 0 5
26006: PUSH
26007: LD_INT 11
26009: PUSH
26010: LD_INT 30
26012: PUSH
26013: LD_INT 49
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: LIST
26020: DIFF
26021: ST_TO_ADDR
// if not list then
26022: LD_VAR 0 5
26026: NOT
26027: IFFALSE 26031
// exit ;
26029: GO 26173
// weapon := list [ rand ( 1 , list ) ] ;
26031: LD_ADDR_VAR 0 18
26035: PUSH
26036: LD_VAR 0 5
26040: PUSH
26041: LD_INT 1
26043: PPUSH
26044: LD_VAR 0 5
26048: PPUSH
26049: CALL_OW 12
26053: ARRAY
26054: ST_TO_ADDR
// end ; if weapon then
26055: LD_VAR 0 18
26059: IFFALSE 26173
// begin tmp := CostOfWeapon ( weapon ) ;
26061: LD_ADDR_VAR 0 14
26065: PUSH
26066: LD_VAR 0 18
26070: PPUSH
26071: CALL_OW 451
26075: ST_TO_ADDR
// j := GetBase ( tower ) ;
26076: LD_ADDR_VAR 0 9
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 274
26090: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26091: LD_VAR 0 9
26095: PPUSH
26096: LD_INT 1
26098: PPUSH
26099: CALL_OW 275
26103: PUSH
26104: LD_VAR 0 14
26108: PUSH
26109: LD_INT 1
26111: ARRAY
26112: GREATEREQUAL
26113: PUSH
26114: LD_VAR 0 9
26118: PPUSH
26119: LD_INT 2
26121: PPUSH
26122: CALL_OW 275
26126: PUSH
26127: LD_VAR 0 14
26131: PUSH
26132: LD_INT 2
26134: ARRAY
26135: GREATEREQUAL
26136: AND
26137: PUSH
26138: LD_VAR 0 9
26142: PPUSH
26143: LD_INT 3
26145: PPUSH
26146: CALL_OW 275
26150: PUSH
26151: LD_VAR 0 14
26155: PUSH
26156: LD_INT 3
26158: ARRAY
26159: GREATEREQUAL
26160: AND
26161: IFFALSE 26173
// result := weapon ;
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_VAR 0 18
26172: ST_TO_ADDR
// end ; end ;
26173: LD_VAR 0 3
26177: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26178: LD_INT 0
26180: PPUSH
26181: PPUSH
// result := true ;
26182: LD_ADDR_VAR 0 3
26186: PUSH
26187: LD_INT 1
26189: ST_TO_ADDR
// if array1 = array2 then
26190: LD_VAR 0 1
26194: PUSH
26195: LD_VAR 0 2
26199: EQUAL
26200: IFFALSE 26260
// begin for i = 1 to array1 do
26202: LD_ADDR_VAR 0 4
26206: PUSH
26207: DOUBLE
26208: LD_INT 1
26210: DEC
26211: ST_TO_ADDR
26212: LD_VAR 0 1
26216: PUSH
26217: FOR_TO
26218: IFFALSE 26256
// if array1 [ i ] <> array2 [ i ] then
26220: LD_VAR 0 1
26224: PUSH
26225: LD_VAR 0 4
26229: ARRAY
26230: PUSH
26231: LD_VAR 0 2
26235: PUSH
26236: LD_VAR 0 4
26240: ARRAY
26241: NONEQUAL
26242: IFFALSE 26254
// begin result := false ;
26244: LD_ADDR_VAR 0 3
26248: PUSH
26249: LD_INT 0
26251: ST_TO_ADDR
// break ;
26252: GO 26256
// end ;
26254: GO 26217
26256: POP
26257: POP
// end else
26258: GO 26268
// result := false ;
26260: LD_ADDR_VAR 0 3
26264: PUSH
26265: LD_INT 0
26267: ST_TO_ADDR
// end ;
26268: LD_VAR 0 3
26272: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
// if not array1 or not array2 then
26277: LD_VAR 0 1
26281: NOT
26282: PUSH
26283: LD_VAR 0 2
26287: NOT
26288: OR
26289: IFFALSE 26293
// exit ;
26291: GO 26357
// result := true ;
26293: LD_ADDR_VAR 0 3
26297: PUSH
26298: LD_INT 1
26300: ST_TO_ADDR
// for i = 1 to array1 do
26301: LD_ADDR_VAR 0 4
26305: PUSH
26306: DOUBLE
26307: LD_INT 1
26309: DEC
26310: ST_TO_ADDR
26311: LD_VAR 0 1
26315: PUSH
26316: FOR_TO
26317: IFFALSE 26355
// if array1 [ i ] <> array2 [ i ] then
26319: LD_VAR 0 1
26323: PUSH
26324: LD_VAR 0 4
26328: ARRAY
26329: PUSH
26330: LD_VAR 0 2
26334: PUSH
26335: LD_VAR 0 4
26339: ARRAY
26340: NONEQUAL
26341: IFFALSE 26353
// begin result := false ;
26343: LD_ADDR_VAR 0 3
26347: PUSH
26348: LD_INT 0
26350: ST_TO_ADDR
// break ;
26351: GO 26355
// end ;
26353: GO 26316
26355: POP
26356: POP
// end ;
26357: LD_VAR 0 3
26361: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26362: LD_INT 0
26364: PPUSH
26365: PPUSH
26366: PPUSH
// pom := GetBase ( fac ) ;
26367: LD_ADDR_VAR 0 5
26371: PUSH
26372: LD_VAR 0 1
26376: PPUSH
26377: CALL_OW 274
26381: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26382: LD_ADDR_VAR 0 4
26386: PUSH
26387: LD_VAR 0 2
26391: PUSH
26392: LD_INT 1
26394: ARRAY
26395: PPUSH
26396: LD_VAR 0 2
26400: PUSH
26401: LD_INT 2
26403: ARRAY
26404: PPUSH
26405: LD_VAR 0 2
26409: PUSH
26410: LD_INT 3
26412: ARRAY
26413: PPUSH
26414: LD_VAR 0 2
26418: PUSH
26419: LD_INT 4
26421: ARRAY
26422: PPUSH
26423: CALL_OW 449
26427: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26428: LD_ADDR_VAR 0 3
26432: PUSH
26433: LD_VAR 0 5
26437: PPUSH
26438: LD_INT 1
26440: PPUSH
26441: CALL_OW 275
26445: PUSH
26446: LD_VAR 0 4
26450: PUSH
26451: LD_INT 1
26453: ARRAY
26454: GREATEREQUAL
26455: PUSH
26456: LD_VAR 0 5
26460: PPUSH
26461: LD_INT 2
26463: PPUSH
26464: CALL_OW 275
26468: PUSH
26469: LD_VAR 0 4
26473: PUSH
26474: LD_INT 2
26476: ARRAY
26477: GREATEREQUAL
26478: AND
26479: PUSH
26480: LD_VAR 0 5
26484: PPUSH
26485: LD_INT 3
26487: PPUSH
26488: CALL_OW 275
26492: PUSH
26493: LD_VAR 0 4
26497: PUSH
26498: LD_INT 3
26500: ARRAY
26501: GREATEREQUAL
26502: AND
26503: ST_TO_ADDR
// end ;
26504: LD_VAR 0 3
26508: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26509: LD_INT 0
26511: PPUSH
26512: PPUSH
26513: PPUSH
26514: PPUSH
// pom := GetBase ( building ) ;
26515: LD_ADDR_VAR 0 3
26519: PUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 274
26529: ST_TO_ADDR
// if not pom then
26530: LD_VAR 0 3
26534: NOT
26535: IFFALSE 26539
// exit ;
26537: GO 26709
// btype := GetBType ( building ) ;
26539: LD_ADDR_VAR 0 5
26543: PUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 266
26553: ST_TO_ADDR
// if btype = b_armoury then
26554: LD_VAR 0 5
26558: PUSH
26559: LD_INT 4
26561: EQUAL
26562: IFFALSE 26572
// btype := b_barracks ;
26564: LD_ADDR_VAR 0 5
26568: PUSH
26569: LD_INT 5
26571: ST_TO_ADDR
// if btype = b_depot then
26572: LD_VAR 0 5
26576: PUSH
26577: LD_INT 0
26579: EQUAL
26580: IFFALSE 26590
// btype := b_warehouse ;
26582: LD_ADDR_VAR 0 5
26586: PUSH
26587: LD_INT 1
26589: ST_TO_ADDR
// if btype = b_workshop then
26590: LD_VAR 0 5
26594: PUSH
26595: LD_INT 2
26597: EQUAL
26598: IFFALSE 26608
// btype := b_factory ;
26600: LD_ADDR_VAR 0 5
26604: PUSH
26605: LD_INT 3
26607: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26608: LD_ADDR_VAR 0 4
26612: PUSH
26613: LD_VAR 0 5
26617: PPUSH
26618: LD_VAR 0 1
26622: PPUSH
26623: CALL_OW 248
26627: PPUSH
26628: CALL_OW 450
26632: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26633: LD_ADDR_VAR 0 2
26637: PUSH
26638: LD_VAR 0 3
26642: PPUSH
26643: LD_INT 1
26645: PPUSH
26646: CALL_OW 275
26650: PUSH
26651: LD_VAR 0 4
26655: PUSH
26656: LD_INT 1
26658: ARRAY
26659: GREATEREQUAL
26660: PUSH
26661: LD_VAR 0 3
26665: PPUSH
26666: LD_INT 2
26668: PPUSH
26669: CALL_OW 275
26673: PUSH
26674: LD_VAR 0 4
26678: PUSH
26679: LD_INT 2
26681: ARRAY
26682: GREATEREQUAL
26683: AND
26684: PUSH
26685: LD_VAR 0 3
26689: PPUSH
26690: LD_INT 3
26692: PPUSH
26693: CALL_OW 275
26697: PUSH
26698: LD_VAR 0 4
26702: PUSH
26703: LD_INT 3
26705: ARRAY
26706: GREATEREQUAL
26707: AND
26708: ST_TO_ADDR
// end ;
26709: LD_VAR 0 2
26713: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26714: LD_INT 0
26716: PPUSH
26717: PPUSH
26718: PPUSH
// pom := GetBase ( building ) ;
26719: LD_ADDR_VAR 0 4
26723: PUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 274
26733: ST_TO_ADDR
// if not pom then
26734: LD_VAR 0 4
26738: NOT
26739: IFFALSE 26743
// exit ;
26741: GO 26844
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26743: LD_ADDR_VAR 0 5
26747: PUSH
26748: LD_VAR 0 2
26752: PPUSH
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 248
26762: PPUSH
26763: CALL_OW 450
26767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26768: LD_ADDR_VAR 0 3
26772: PUSH
26773: LD_VAR 0 4
26777: PPUSH
26778: LD_INT 1
26780: PPUSH
26781: CALL_OW 275
26785: PUSH
26786: LD_VAR 0 5
26790: PUSH
26791: LD_INT 1
26793: ARRAY
26794: GREATEREQUAL
26795: PUSH
26796: LD_VAR 0 4
26800: PPUSH
26801: LD_INT 2
26803: PPUSH
26804: CALL_OW 275
26808: PUSH
26809: LD_VAR 0 5
26813: PUSH
26814: LD_INT 2
26816: ARRAY
26817: GREATEREQUAL
26818: AND
26819: PUSH
26820: LD_VAR 0 4
26824: PPUSH
26825: LD_INT 3
26827: PPUSH
26828: CALL_OW 275
26832: PUSH
26833: LD_VAR 0 5
26837: PUSH
26838: LD_INT 3
26840: ARRAY
26841: GREATEREQUAL
26842: AND
26843: ST_TO_ADDR
// end ;
26844: LD_VAR 0 3
26848: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
26858: PPUSH
26859: PPUSH
26860: PPUSH
26861: PPUSH
// result := false ;
26862: LD_ADDR_VAR 0 8
26866: PUSH
26867: LD_INT 0
26869: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26870: LD_VAR 0 5
26874: NOT
26875: PUSH
26876: LD_VAR 0 1
26880: NOT
26881: OR
26882: PUSH
26883: LD_VAR 0 2
26887: NOT
26888: OR
26889: PUSH
26890: LD_VAR 0 3
26894: NOT
26895: OR
26896: IFFALSE 26900
// exit ;
26898: GO 27714
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26900: LD_ADDR_VAR 0 14
26904: PUSH
26905: LD_VAR 0 1
26909: PPUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: LD_VAR 0 3
26919: PPUSH
26920: LD_VAR 0 4
26924: PPUSH
26925: LD_VAR 0 5
26929: PUSH
26930: LD_INT 1
26932: ARRAY
26933: PPUSH
26934: CALL_OW 248
26938: PPUSH
26939: LD_INT 0
26941: PPUSH
26942: CALL 28951 0 6
26946: ST_TO_ADDR
// if not hexes then
26947: LD_VAR 0 14
26951: NOT
26952: IFFALSE 26956
// exit ;
26954: GO 27714
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26956: LD_ADDR_VAR 0 17
26960: PUSH
26961: LD_VAR 0 5
26965: PPUSH
26966: LD_INT 22
26968: PUSH
26969: LD_VAR 0 13
26973: PPUSH
26974: CALL_OW 255
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: LD_INT 30
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: LIST
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PPUSH
27015: CALL_OW 72
27019: ST_TO_ADDR
// for i = 1 to hexes do
27020: LD_ADDR_VAR 0 9
27024: PUSH
27025: DOUBLE
27026: LD_INT 1
27028: DEC
27029: ST_TO_ADDR
27030: LD_VAR 0 14
27034: PUSH
27035: FOR_TO
27036: IFFALSE 27712
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27038: LD_ADDR_VAR 0 13
27042: PUSH
27043: LD_VAR 0 14
27047: PUSH
27048: LD_VAR 0 9
27052: ARRAY
27053: PUSH
27054: LD_INT 1
27056: ARRAY
27057: PPUSH
27058: LD_VAR 0 14
27062: PUSH
27063: LD_VAR 0 9
27067: ARRAY
27068: PUSH
27069: LD_INT 2
27071: ARRAY
27072: PPUSH
27073: CALL_OW 428
27077: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27078: LD_VAR 0 14
27082: PUSH
27083: LD_VAR 0 9
27087: ARRAY
27088: PUSH
27089: LD_INT 1
27091: ARRAY
27092: PPUSH
27093: LD_VAR 0 14
27097: PUSH
27098: LD_VAR 0 9
27102: ARRAY
27103: PUSH
27104: LD_INT 2
27106: ARRAY
27107: PPUSH
27108: CALL_OW 351
27112: PUSH
27113: LD_VAR 0 14
27117: PUSH
27118: LD_VAR 0 9
27122: ARRAY
27123: PUSH
27124: LD_INT 1
27126: ARRAY
27127: PPUSH
27128: LD_VAR 0 14
27132: PUSH
27133: LD_VAR 0 9
27137: ARRAY
27138: PUSH
27139: LD_INT 2
27141: ARRAY
27142: PPUSH
27143: CALL_OW 488
27147: NOT
27148: OR
27149: PUSH
27150: LD_VAR 0 13
27154: PPUSH
27155: CALL_OW 247
27159: PUSH
27160: LD_INT 3
27162: EQUAL
27163: OR
27164: IFFALSE 27170
// exit ;
27166: POP
27167: POP
27168: GO 27714
// if not tmp then
27170: LD_VAR 0 13
27174: NOT
27175: IFFALSE 27179
// continue ;
27177: GO 27035
// result := true ;
27179: LD_ADDR_VAR 0 8
27183: PUSH
27184: LD_INT 1
27186: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27187: LD_VAR 0 6
27191: PUSH
27192: LD_VAR 0 13
27196: PPUSH
27197: CALL_OW 247
27201: PUSH
27202: LD_INT 2
27204: EQUAL
27205: AND
27206: PUSH
27207: LD_VAR 0 13
27211: PPUSH
27212: CALL_OW 263
27216: PUSH
27217: LD_INT 1
27219: EQUAL
27220: AND
27221: IFFALSE 27385
// begin if IsDrivenBy ( tmp ) then
27223: LD_VAR 0 13
27227: PPUSH
27228: CALL_OW 311
27232: IFFALSE 27236
// continue ;
27234: GO 27035
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27236: LD_VAR 0 6
27240: PPUSH
27241: LD_INT 3
27243: PUSH
27244: LD_INT 60
27246: PUSH
27247: EMPTY
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 3
27256: PUSH
27257: LD_INT 55
27259: PUSH
27260: EMPTY
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PPUSH
27271: CALL_OW 72
27275: IFFALSE 27383
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27277: LD_ADDR_VAR 0 18
27281: PUSH
27282: LD_VAR 0 6
27286: PPUSH
27287: LD_INT 3
27289: PUSH
27290: LD_INT 60
27292: PUSH
27293: EMPTY
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 3
27302: PUSH
27303: LD_INT 55
27305: PUSH
27306: EMPTY
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PPUSH
27317: CALL_OW 72
27321: PUSH
27322: LD_INT 1
27324: ARRAY
27325: ST_TO_ADDR
// if IsInUnit ( driver ) then
27326: LD_VAR 0 18
27330: PPUSH
27331: CALL_OW 310
27335: IFFALSE 27346
// ComExit ( driver ) ;
27337: LD_VAR 0 18
27341: PPUSH
27342: CALL 52135 0 1
// AddComEnterUnit ( driver , tmp ) ;
27346: LD_VAR 0 18
27350: PPUSH
27351: LD_VAR 0 13
27355: PPUSH
27356: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27360: LD_VAR 0 18
27364: PPUSH
27365: LD_VAR 0 7
27369: PPUSH
27370: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27374: LD_VAR 0 18
27378: PPUSH
27379: CALL_OW 181
// end ; continue ;
27383: GO 27035
// end ; if not cleaners or not tmp in cleaners then
27385: LD_VAR 0 6
27389: NOT
27390: PUSH
27391: LD_VAR 0 13
27395: PUSH
27396: LD_VAR 0 6
27400: IN
27401: NOT
27402: OR
27403: IFFALSE 27710
// begin if dep then
27405: LD_VAR 0 17
27409: IFFALSE 27545
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27411: LD_ADDR_VAR 0 16
27415: PUSH
27416: LD_VAR 0 17
27420: PUSH
27421: LD_INT 1
27423: ARRAY
27424: PPUSH
27425: CALL_OW 250
27429: PPUSH
27430: LD_VAR 0 17
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: CALL_OW 254
27443: PPUSH
27444: LD_INT 5
27446: PPUSH
27447: CALL_OW 272
27451: PUSH
27452: LD_VAR 0 17
27456: PUSH
27457: LD_INT 1
27459: ARRAY
27460: PPUSH
27461: CALL_OW 251
27465: PPUSH
27466: LD_VAR 0 17
27470: PUSH
27471: LD_INT 1
27473: ARRAY
27474: PPUSH
27475: CALL_OW 254
27479: PPUSH
27480: LD_INT 5
27482: PPUSH
27483: CALL_OW 273
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27492: LD_VAR 0 16
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: PPUSH
27501: LD_VAR 0 16
27505: PUSH
27506: LD_INT 2
27508: ARRAY
27509: PPUSH
27510: CALL_OW 488
27514: IFFALSE 27545
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27516: LD_VAR 0 13
27520: PPUSH
27521: LD_VAR 0 16
27525: PUSH
27526: LD_INT 1
27528: ARRAY
27529: PPUSH
27530: LD_VAR 0 16
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: CALL_OW 111
// continue ;
27543: GO 27035
// end ; end ; r := GetDir ( tmp ) ;
27545: LD_ADDR_VAR 0 15
27549: PUSH
27550: LD_VAR 0 13
27554: PPUSH
27555: CALL_OW 254
27559: ST_TO_ADDR
// if r = 5 then
27560: LD_VAR 0 15
27564: PUSH
27565: LD_INT 5
27567: EQUAL
27568: IFFALSE 27578
// r := 0 ;
27570: LD_ADDR_VAR 0 15
27574: PUSH
27575: LD_INT 0
27577: ST_TO_ADDR
// for j = r to 5 do
27578: LD_ADDR_VAR 0 10
27582: PUSH
27583: DOUBLE
27584: LD_VAR 0 15
27588: DEC
27589: ST_TO_ADDR
27590: LD_INT 5
27592: PUSH
27593: FOR_TO
27594: IFFALSE 27708
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27596: LD_ADDR_VAR 0 11
27600: PUSH
27601: LD_VAR 0 13
27605: PPUSH
27606: CALL_OW 250
27610: PPUSH
27611: LD_VAR 0 10
27615: PPUSH
27616: LD_INT 2
27618: PPUSH
27619: CALL_OW 272
27623: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27624: LD_ADDR_VAR 0 12
27628: PUSH
27629: LD_VAR 0 13
27633: PPUSH
27634: CALL_OW 251
27638: PPUSH
27639: LD_VAR 0 10
27643: PPUSH
27644: LD_INT 2
27646: PPUSH
27647: CALL_OW 273
27651: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27652: LD_VAR 0 11
27656: PPUSH
27657: LD_VAR 0 12
27661: PPUSH
27662: CALL_OW 488
27666: PUSH
27667: LD_VAR 0 11
27671: PPUSH
27672: LD_VAR 0 12
27676: PPUSH
27677: CALL_OW 428
27681: NOT
27682: AND
27683: IFFALSE 27706
// begin ComMoveXY ( tmp , _x , _y ) ;
27685: LD_VAR 0 13
27689: PPUSH
27690: LD_VAR 0 11
27694: PPUSH
27695: LD_VAR 0 12
27699: PPUSH
27700: CALL_OW 111
// break ;
27704: GO 27708
// end ; end ;
27706: GO 27593
27708: POP
27709: POP
// end ; end ;
27710: GO 27035
27712: POP
27713: POP
// end ;
27714: LD_VAR 0 8
27718: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27719: LD_INT 0
27721: PPUSH
// result := true ;
27722: LD_ADDR_VAR 0 3
27726: PUSH
27727: LD_INT 1
27729: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27730: LD_VAR 0 2
27734: PUSH
27735: LD_INT 24
27737: DOUBLE
27738: EQUAL
27739: IFTRUE 27749
27741: LD_INT 33
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 27774
27749: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27750: LD_ADDR_VAR 0 3
27754: PUSH
27755: LD_INT 32
27757: PPUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL_OW 321
27767: PUSH
27768: LD_INT 2
27770: EQUAL
27771: ST_TO_ADDR
27772: GO 28094
27774: LD_INT 20
27776: DOUBLE
27777: EQUAL
27778: IFTRUE 27782
27780: GO 27807
27782: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
27783: LD_ADDR_VAR 0 3
27787: PUSH
27788: LD_INT 6
27790: PPUSH
27791: LD_VAR 0 1
27795: PPUSH
27796: CALL_OW 321
27800: PUSH
27801: LD_INT 2
27803: EQUAL
27804: ST_TO_ADDR
27805: GO 28094
27807: LD_INT 22
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27821
27813: LD_INT 36
27815: DOUBLE
27816: EQUAL
27817: IFTRUE 27821
27819: GO 27846
27821: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_INT 15
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 321
27839: PUSH
27840: LD_INT 2
27842: EQUAL
27843: ST_TO_ADDR
27844: GO 28094
27846: LD_INT 30
27848: DOUBLE
27849: EQUAL
27850: IFTRUE 27854
27852: GO 27879
27854: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27855: LD_ADDR_VAR 0 3
27859: PUSH
27860: LD_INT 20
27862: PPUSH
27863: LD_VAR 0 1
27867: PPUSH
27868: CALL_OW 321
27872: PUSH
27873: LD_INT 2
27875: EQUAL
27876: ST_TO_ADDR
27877: GO 28094
27879: LD_INT 28
27881: DOUBLE
27882: EQUAL
27883: IFTRUE 27893
27885: LD_INT 21
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27918
27893: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_INT 21
27901: PPUSH
27902: LD_VAR 0 1
27906: PPUSH
27907: CALL_OW 321
27911: PUSH
27912: LD_INT 2
27914: EQUAL
27915: ST_TO_ADDR
27916: GO 28094
27918: LD_INT 16
27920: DOUBLE
27921: EQUAL
27922: IFTRUE 27926
27924: GO 27953
27926: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27927: LD_ADDR_VAR 0 3
27931: PUSH
27932: LD_EXP 111
27936: PPUSH
27937: LD_VAR 0 1
27941: PPUSH
27942: CALL_OW 321
27946: PUSH
27947: LD_INT 2
27949: EQUAL
27950: ST_TO_ADDR
27951: GO 28094
27953: LD_INT 19
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27967
27959: LD_INT 23
27961: DOUBLE
27962: EQUAL
27963: IFTRUE 27967
27965: GO 27994
27967: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27968: LD_ADDR_VAR 0 3
27972: PUSH
27973: LD_EXP 110
27977: PPUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 321
27987: PUSH
27988: LD_INT 2
27990: EQUAL
27991: ST_TO_ADDR
27992: GO 28094
27994: LD_INT 17
27996: DOUBLE
27997: EQUAL
27998: IFTRUE 28002
28000: GO 28027
28002: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: LD_INT 39
28010: PPUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: CALL_OW 321
28020: PUSH
28021: LD_INT 2
28023: EQUAL
28024: ST_TO_ADDR
28025: GO 28094
28027: LD_INT 18
28029: DOUBLE
28030: EQUAL
28031: IFTRUE 28035
28033: GO 28060
28035: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28036: LD_ADDR_VAR 0 3
28040: PUSH
28041: LD_INT 40
28043: PPUSH
28044: LD_VAR 0 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: ST_TO_ADDR
28058: GO 28094
28060: LD_INT 27
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28093
28068: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 35
28076: PPUSH
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 321
28086: PUSH
28087: LD_INT 2
28089: EQUAL
28090: ST_TO_ADDR
28091: GO 28094
28093: POP
// end ;
28094: LD_VAR 0 3
28098: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28099: LD_INT 0
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
28108: PPUSH
28109: PPUSH
28110: PPUSH
28111: PPUSH
// result := false ;
28112: LD_ADDR_VAR 0 6
28116: PUSH
28117: LD_INT 0
28119: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28120: LD_VAR 0 1
28124: NOT
28125: PUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 266
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: IN
28146: NOT
28147: OR
28148: PUSH
28149: LD_VAR 0 2
28153: NOT
28154: OR
28155: PUSH
28156: LD_VAR 0 5
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: LD_INT 4
28175: PUSH
28176: LD_INT 5
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: IN
28187: NOT
28188: OR
28189: PUSH
28190: LD_VAR 0 3
28194: PPUSH
28195: LD_VAR 0 4
28199: PPUSH
28200: CALL_OW 488
28204: NOT
28205: OR
28206: IFFALSE 28210
// exit ;
28208: GO 28946
// side := GetSide ( depot ) ;
28210: LD_ADDR_VAR 0 9
28214: PUSH
28215: LD_VAR 0 1
28219: PPUSH
28220: CALL_OW 255
28224: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28225: LD_VAR 0 9
28229: PPUSH
28230: LD_VAR 0 2
28234: PPUSH
28235: CALL 27719 0 2
28239: NOT
28240: IFFALSE 28244
// exit ;
28242: GO 28946
// pom := GetBase ( depot ) ;
28244: LD_ADDR_VAR 0 10
28248: PUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 274
28258: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28259: LD_ADDR_VAR 0 11
28263: PUSH
28264: LD_VAR 0 2
28268: PPUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 248
28278: PPUSH
28279: CALL_OW 450
28283: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28284: LD_VAR 0 10
28288: PPUSH
28289: LD_INT 1
28291: PPUSH
28292: CALL_OW 275
28296: PUSH
28297: LD_VAR 0 11
28301: PUSH
28302: LD_INT 1
28304: ARRAY
28305: GREATEREQUAL
28306: PUSH
28307: LD_VAR 0 10
28311: PPUSH
28312: LD_INT 2
28314: PPUSH
28315: CALL_OW 275
28319: PUSH
28320: LD_VAR 0 11
28324: PUSH
28325: LD_INT 2
28327: ARRAY
28328: GREATEREQUAL
28329: AND
28330: PUSH
28331: LD_VAR 0 10
28335: PPUSH
28336: LD_INT 3
28338: PPUSH
28339: CALL_OW 275
28343: PUSH
28344: LD_VAR 0 11
28348: PUSH
28349: LD_INT 3
28351: ARRAY
28352: GREATEREQUAL
28353: AND
28354: NOT
28355: IFFALSE 28359
// exit ;
28357: GO 28946
// if GetBType ( depot ) = b_depot then
28359: LD_VAR 0 1
28363: PPUSH
28364: CALL_OW 266
28368: PUSH
28369: LD_INT 0
28371: EQUAL
28372: IFFALSE 28384
// dist := 28 else
28374: LD_ADDR_VAR 0 14
28378: PUSH
28379: LD_INT 28
28381: ST_TO_ADDR
28382: GO 28392
// dist := 36 ;
28384: LD_ADDR_VAR 0 14
28388: PUSH
28389: LD_INT 36
28391: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28392: LD_VAR 0 1
28396: PPUSH
28397: LD_VAR 0 3
28401: PPUSH
28402: LD_VAR 0 4
28406: PPUSH
28407: CALL_OW 297
28411: PUSH
28412: LD_VAR 0 14
28416: GREATER
28417: IFFALSE 28421
// exit ;
28419: GO 28946
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28421: LD_ADDR_VAR 0 12
28425: PUSH
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_VAR 0 3
28435: PPUSH
28436: LD_VAR 0 4
28440: PPUSH
28441: LD_VAR 0 5
28445: PPUSH
28446: LD_VAR 0 1
28450: PPUSH
28451: CALL_OW 248
28455: PPUSH
28456: LD_INT 0
28458: PPUSH
28459: CALL 28951 0 6
28463: ST_TO_ADDR
// if not hexes then
28464: LD_VAR 0 12
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28946
// hex := GetHexInfo ( x , y ) ;
28473: LD_ADDR_VAR 0 15
28477: PUSH
28478: LD_VAR 0 3
28482: PPUSH
28483: LD_VAR 0 4
28487: PPUSH
28488: CALL_OW 546
28492: ST_TO_ADDR
// if hex [ 1 ] then
28493: LD_VAR 0 15
28497: PUSH
28498: LD_INT 1
28500: ARRAY
28501: IFFALSE 28505
// exit ;
28503: GO 28946
// height := hex [ 2 ] ;
28505: LD_ADDR_VAR 0 13
28509: PUSH
28510: LD_VAR 0 15
28514: PUSH
28515: LD_INT 2
28517: ARRAY
28518: ST_TO_ADDR
// for i = 1 to hexes do
28519: LD_ADDR_VAR 0 7
28523: PUSH
28524: DOUBLE
28525: LD_INT 1
28527: DEC
28528: ST_TO_ADDR
28529: LD_VAR 0 12
28533: PUSH
28534: FOR_TO
28535: IFFALSE 28865
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28537: LD_VAR 0 12
28541: PUSH
28542: LD_VAR 0 7
28546: ARRAY
28547: PUSH
28548: LD_INT 1
28550: ARRAY
28551: PPUSH
28552: LD_VAR 0 12
28556: PUSH
28557: LD_VAR 0 7
28561: ARRAY
28562: PUSH
28563: LD_INT 2
28565: ARRAY
28566: PPUSH
28567: CALL_OW 488
28571: NOT
28572: PUSH
28573: LD_VAR 0 12
28577: PUSH
28578: LD_VAR 0 7
28582: ARRAY
28583: PUSH
28584: LD_INT 1
28586: ARRAY
28587: PPUSH
28588: LD_VAR 0 12
28592: PUSH
28593: LD_VAR 0 7
28597: ARRAY
28598: PUSH
28599: LD_INT 2
28601: ARRAY
28602: PPUSH
28603: CALL_OW 428
28607: PUSH
28608: LD_INT 0
28610: GREATER
28611: OR
28612: PUSH
28613: LD_VAR 0 12
28617: PUSH
28618: LD_VAR 0 7
28622: ARRAY
28623: PUSH
28624: LD_INT 1
28626: ARRAY
28627: PPUSH
28628: LD_VAR 0 12
28632: PUSH
28633: LD_VAR 0 7
28637: ARRAY
28638: PUSH
28639: LD_INT 2
28641: ARRAY
28642: PPUSH
28643: CALL_OW 351
28647: OR
28648: IFFALSE 28654
// exit ;
28650: POP
28651: POP
28652: GO 28946
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28654: LD_ADDR_VAR 0 8
28658: PUSH
28659: LD_VAR 0 12
28663: PUSH
28664: LD_VAR 0 7
28668: ARRAY
28669: PUSH
28670: LD_INT 1
28672: ARRAY
28673: PPUSH
28674: LD_VAR 0 12
28678: PUSH
28679: LD_VAR 0 7
28683: ARRAY
28684: PUSH
28685: LD_INT 2
28687: ARRAY
28688: PPUSH
28689: CALL_OW 546
28693: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28694: LD_VAR 0 8
28698: PUSH
28699: LD_INT 1
28701: ARRAY
28702: PUSH
28703: LD_VAR 0 8
28707: PUSH
28708: LD_INT 2
28710: ARRAY
28711: PUSH
28712: LD_VAR 0 13
28716: PUSH
28717: LD_INT 2
28719: PLUS
28720: GREATER
28721: OR
28722: PUSH
28723: LD_VAR 0 8
28727: PUSH
28728: LD_INT 2
28730: ARRAY
28731: PUSH
28732: LD_VAR 0 13
28736: PUSH
28737: LD_INT 2
28739: MINUS
28740: LESS
28741: OR
28742: PUSH
28743: LD_VAR 0 8
28747: PUSH
28748: LD_INT 3
28750: ARRAY
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 8
28757: PUSH
28758: LD_INT 9
28760: PUSH
28761: LD_INT 10
28763: PUSH
28764: LD_INT 11
28766: PUSH
28767: LD_INT 12
28769: PUSH
28770: LD_INT 13
28772: PUSH
28773: LD_INT 16
28775: PUSH
28776: LD_INT 17
28778: PUSH
28779: LD_INT 18
28781: PUSH
28782: LD_INT 19
28784: PUSH
28785: LD_INT 20
28787: PUSH
28788: LD_INT 21
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: IN
28806: NOT
28807: OR
28808: PUSH
28809: LD_VAR 0 8
28813: PUSH
28814: LD_INT 5
28816: ARRAY
28817: NOT
28818: OR
28819: PUSH
28820: LD_VAR 0 8
28824: PUSH
28825: LD_INT 6
28827: ARRAY
28828: PUSH
28829: LD_INT 1
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 7
28837: PUSH
28838: LD_INT 9
28840: PUSH
28841: LD_INT 10
28843: PUSH
28844: LD_INT 11
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: IN
28855: NOT
28856: OR
28857: IFFALSE 28863
// exit ;
28859: POP
28860: POP
28861: GO 28946
// end ;
28863: GO 28534
28865: POP
28866: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28867: LD_VAR 0 9
28871: PPUSH
28872: LD_VAR 0 3
28876: PPUSH
28877: LD_VAR 0 4
28881: PPUSH
28882: LD_INT 20
28884: PPUSH
28885: CALL 20892 0 4
28889: PUSH
28890: LD_INT 4
28892: ARRAY
28893: IFFALSE 28897
// exit ;
28895: GO 28946
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28897: LD_VAR 0 2
28901: PUSH
28902: LD_INT 29
28904: PUSH
28905: LD_INT 30
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: IN
28912: PUSH
28913: LD_VAR 0 3
28917: PPUSH
28918: LD_VAR 0 4
28922: PPUSH
28923: LD_VAR 0 9
28927: PPUSH
28928: CALL_OW 440
28932: NOT
28933: AND
28934: IFFALSE 28938
// exit ;
28936: GO 28946
// result := true ;
28938: LD_ADDR_VAR 0 6
28942: PUSH
28943: LD_INT 1
28945: ST_TO_ADDR
// end ;
28946: LD_VAR 0 6
28950: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28951: LD_INT 0
28953: PPUSH
28954: PPUSH
28955: PPUSH
28956: PPUSH
28957: PPUSH
28958: PPUSH
28959: PPUSH
28960: PPUSH
28961: PPUSH
28962: PPUSH
28963: PPUSH
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
28986: PPUSH
28987: PPUSH
28988: PPUSH
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
28999: PPUSH
29000: PPUSH
29001: PPUSH
29002: PPUSH
29003: PPUSH
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
29010: PPUSH
// result = [ ] ;
29011: LD_ADDR_VAR 0 7
29015: PUSH
29016: EMPTY
29017: ST_TO_ADDR
// temp_list = [ ] ;
29018: LD_ADDR_VAR 0 9
29022: PUSH
29023: EMPTY
29024: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29025: LD_VAR 0 4
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 2
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: LD_INT 4
29044: PUSH
29045: LD_INT 5
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: IN
29056: NOT
29057: PUSH
29058: LD_VAR 0 1
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: IN
29073: PUSH
29074: LD_VAR 0 5
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 3
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: IN
29093: NOT
29094: AND
29095: OR
29096: IFFALSE 29100
// exit ;
29098: GO 47491
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29100: LD_VAR 0 1
29104: PUSH
29105: LD_INT 6
29107: PUSH
29108: LD_INT 7
29110: PUSH
29111: LD_INT 8
29113: PUSH
29114: LD_INT 13
29116: PUSH
29117: LD_INT 12
29119: PUSH
29120: LD_INT 15
29122: PUSH
29123: LD_INT 11
29125: PUSH
29126: LD_INT 14
29128: PUSH
29129: LD_INT 10
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: IN
29143: IFFALSE 29153
// btype = b_lab ;
29145: LD_ADDR_VAR 0 1
29149: PUSH
29150: LD_INT 6
29152: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29153: LD_VAR 0 6
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: IN
29172: NOT
29173: PUSH
29174: LD_VAR 0 1
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: LD_INT 6
29193: PUSH
29194: LD_INT 36
29196: PUSH
29197: LD_INT 4
29199: PUSH
29200: LD_INT 5
29202: PUSH
29203: LD_INT 31
29205: PUSH
29206: LD_INT 32
29208: PUSH
29209: LD_INT 33
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: IN
29225: NOT
29226: PUSH
29227: LD_VAR 0 6
29231: PUSH
29232: LD_INT 1
29234: EQUAL
29235: AND
29236: OR
29237: PUSH
29238: LD_VAR 0 1
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: IN
29253: NOT
29254: PUSH
29255: LD_VAR 0 6
29259: PUSH
29260: LD_INT 2
29262: EQUAL
29263: AND
29264: OR
29265: IFFALSE 29275
// mode = 0 ;
29267: LD_ADDR_VAR 0 6
29271: PUSH
29272: LD_INT 0
29274: ST_TO_ADDR
// case mode of 0 :
29275: LD_VAR 0 6
29279: PUSH
29280: LD_INT 0
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 40741
29288: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29289: LD_ADDR_VAR 0 11
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: LD_INT 2
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29482: LD_ADDR_VAR 0 12
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: NEG
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 3
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29678: LD_ADDR_VAR 0 13
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: LD_INT 2
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 3
29837: NEG
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: NEG
29850: PUSH
29851: LD_INT 3
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29877: LD_ADDR_VAR 0 14
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 2
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 2
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: LD_INT 3
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 3
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30073: LD_ADDR_VAR 0 15
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: NEG
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 3
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 3
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30266: LD_ADDR_VAR 0 16
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: LD_INT 2
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 2
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30459: LD_ADDR_VAR 0 17
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 2
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30689: LD_ADDR_VAR 0 18
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 0
30844: PUSH
30845: LD_INT 2
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 2
30865: NEG
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: LD_INT 2
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30919: LD_ADDR_VAR 0 19
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: LD_INT 1
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: LD_INT 2
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31149: LD_ADDR_VAR 0 20
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 2
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 2
31336: NEG
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31379: LD_ADDR_VAR 0 21
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 2
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 2
31566: NEG
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 2
31578: NEG
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31609: LD_ADDR_VAR 0 22
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 2
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31839: LD_ADDR_VAR 0 23
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 2
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: LD_INT 3
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: LD_INT 3
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32119: LD_ADDR_VAR 0 24
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: LD_INT 2
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: NEG
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 3
32362: PUSH
32363: LD_INT 2
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32395: LD_ADDR_VAR 0 25
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: LD_INT 2
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 2
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 2
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: NEG
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 2
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: LD_INT 3
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32669: LD_ADDR_VAR 0 26
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 1
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32945: LD_ADDR_VAR 0 27
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: LD_INT 2
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 2
33144: NEG
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 3
33190: NEG
33191: PUSH
33192: LD_INT 2
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33225: LD_ADDR_VAR 0 28
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33507: LD_ADDR_VAR 0 29
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 3
33751: NEG
33752: PUSH
33753: LD_INT 2
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33786: LD_ADDR_VAR 0 30
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: NEG
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 3
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 3
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 3
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: NEG
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 3
34029: NEG
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34064: LD_ADDR_VAR 0 31
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: NEG
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: NEG
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: NEG
34254: PUSH
34255: LD_INT 3
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 3
34307: NEG
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34342: LD_ADDR_VAR 0 32
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 3
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 3
34585: NEG
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34620: LD_ADDR_VAR 0 33
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: LD_INT 3
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: NEG
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34899: LD_ADDR_VAR 0 34
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 2
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 2
35055: NEG
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: LD_INT 1
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: NEG
35079: PUSH
35080: LD_INT 2
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 3
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 2
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 3
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35179: LD_ADDR_VAR 0 35
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35291: LD_ADDR_VAR 0 36
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35403: LD_ADDR_VAR 0 37
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35515: LD_ADDR_VAR 0 38
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35627: LD_ADDR_VAR 0 39
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 2
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35739: LD_ADDR_VAR 0 40
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35851: LD_ADDR_VAR 0 41
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: LD_INT 2
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: LD_INT 3
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 3
36125: NEG
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 3
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 3
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: NEG
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36201: LD_ADDR_VAR 0 42
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 3
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 3
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 3
36498: NEG
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 3
36510: NEG
36511: PUSH
36512: LD_INT 3
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36551: LD_ADDR_VAR 0 43
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 2
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: NEG
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: LD_INT 3
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 3
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 3
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 3
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 3
36847: NEG
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 3
36858: NEG
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36899: LD_ADDR_VAR 0 44
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: LD_INT 3
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 3
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 3
37184: NEG
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 3
37196: NEG
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 3
37208: NEG
37209: PUSH
37210: LD_INT 3
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37249: LD_ADDR_VAR 0 45
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 2
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: LD_INT 3
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 3
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 3
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 3
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 3
37546: NEG
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 3
37558: NEG
37559: PUSH
37560: LD_INT 3
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37599: LD_ADDR_VAR 0 46
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: LD_INT 3
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 3
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 3
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 3
37895: NEG
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 3
37906: NEG
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37947: LD_ADDR_VAR 0 47
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38098: LD_ADDR_VAR 0 48
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38245: LD_ADDR_VAR 0 49
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38389: LD_ADDR_VAR 0 50
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38533: LD_ADDR_VAR 0 51
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38680: LD_ADDR_VAR 0 52
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38831: LD_ADDR_VAR 0 53
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39061: LD_ADDR_VAR 0 54
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39291: LD_ADDR_VAR 0 55
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 2
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39521: LD_ADDR_VAR 0 56
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 2
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39751: LD_ADDR_VAR 0 57
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39981: LD_ADDR_VAR 0 58
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40211: LD_ADDR_VAR 0 59
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40299: LD_ADDR_VAR 0 60
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40387: LD_ADDR_VAR 0 61
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40475: LD_ADDR_VAR 0 62
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40563: LD_ADDR_VAR 0 63
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40651: LD_ADDR_VAR 0 64
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// end ; 1 :
40739: GO 46636
40741: LD_INT 1
40743: DOUBLE
40744: EQUAL
40745: IFTRUE 40749
40747: GO 43372
40749: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40750: LD_ADDR_VAR 0 11
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 3
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40794: LD_ADDR_VAR 0 12
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 3
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: LIST
40834: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40835: LD_ADDR_VAR 0 13
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 3
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40875: LD_ADDR_VAR 0 14
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 3
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 3
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40916: LD_ADDR_VAR 0 15
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 3
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 3
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40960: LD_ADDR_VAR 0 16
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: LD_INT 3
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 3
40979: NEG
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 3
40991: NEG
40992: PUSH
40993: LD_INT 3
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41006: LD_ADDR_VAR 0 17
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 3
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 3
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41050: LD_ADDR_VAR 0 18
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 3
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41091: LD_ADDR_VAR 0 19
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 3
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41131: LD_ADDR_VAR 0 20
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41172: LD_ADDR_VAR 0 21
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 3
41190: NEG
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41216: LD_ADDR_VAR 0 22
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 3
41235: NEG
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: LD_INT 3
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41262: LD_ADDR_VAR 0 23
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 3
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 4
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 3
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41306: LD_ADDR_VAR 0 24
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 4
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41347: LD_ADDR_VAR 0 25
41351: PUSH
41352: LD_INT 3
41354: PUSH
41355: LD_INT 3
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 4
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: LD_INT 4
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41387: LD_ADDR_VAR 0 26
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 4
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41428: LD_ADDR_VAR 0 27
41432: PUSH
41433: LD_INT 3
41435: NEG
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 4
41457: NEG
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41472: LD_ADDR_VAR 0 28
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: LD_INT 4
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 4
41503: NEG
41504: PUSH
41505: LD_INT 3
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41518: LD_ADDR_VAR 0 29
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 4
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 4
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 5
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: LD_INT 5
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 4
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 6
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 6
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 5
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41673: LD_ADDR_VAR 0 30
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 4
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 4
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 4
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 5
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 5
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 5
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 6
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 6
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41816: LD_ADDR_VAR 0 31
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 4
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 4
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 3
41873: PUSH
41874: LD_INT 4
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 5
41883: PUSH
41884: LD_INT 4
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 5
41893: PUSH
41894: LD_INT 5
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 4
41903: PUSH
41904: LD_INT 5
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 6
41913: PUSH
41914: LD_INT 5
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 6
41923: PUSH
41924: LD_INT 6
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 5
41933: PUSH
41934: LD_INT 6
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41955: LD_ADDR_VAR 0 32
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 3
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 4
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 4
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 5
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 5
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 4
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 6
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 6
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 5
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42098: LD_ADDR_VAR 0 33
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: NEG
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 4
42150: NEG
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 4
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 4
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 5
42184: NEG
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 5
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 5
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 6
42218: NEG
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 6
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42253: LD_ADDR_VAR 0 34
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 3
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: NEG
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 3
42284: NEG
42285: PUSH
42286: LD_INT 3
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: LD_INT 4
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 4
42308: NEG
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 4
42320: NEG
42321: PUSH
42322: LD_INT 4
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 4
42332: NEG
42333: PUSH
42334: LD_INT 5
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 5
42344: NEG
42345: PUSH
42346: LD_INT 4
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 5
42356: NEG
42357: PUSH
42358: LD_INT 5
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 5
42368: NEG
42369: PUSH
42370: LD_INT 6
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 6
42380: NEG
42381: PUSH
42382: LD_INT 5
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 6
42392: NEG
42393: PUSH
42394: LD_INT 6
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42416: LD_ADDR_VAR 0 41
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 3
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42460: LD_ADDR_VAR 0 42
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42501: LD_ADDR_VAR 0 43
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 3
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42541: LD_ADDR_VAR 0 44
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42582: LD_ADDR_VAR 0 45
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42626: LD_ADDR_VAR 0 46
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 3
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 3
42657: NEG
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42672: LD_ADDR_VAR 0 47
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: LD_INT 3
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42705: LD_ADDR_VAR 0 48
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42736: LD_ADDR_VAR 0 49
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42765: LD_ADDR_VAR 0 50
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42794: LD_ADDR_VAR 0 51
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42825: LD_ADDR_VAR 0 52
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 3
42844: NEG
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42858: LD_ADDR_VAR 0 53
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 3
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42902: LD_ADDR_VAR 0 54
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42943: LD_ADDR_VAR 0 55
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 3
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 3
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42983: LD_ADDR_VAR 0 56
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43024: LD_ADDR_VAR 0 57
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 3
43042: NEG
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 3
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43068: LD_ADDR_VAR 0 58
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 3
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: LD_INT 3
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43114: LD_ADDR_VAR 0 59
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43158: LD_ADDR_VAR 0 60
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43199: LD_ADDR_VAR 0 61
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43239: LD_ADDR_VAR 0 62
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43280: LD_ADDR_VAR 0 63
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43324: LD_ADDR_VAR 0 64
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// end ; 2 :
43370: GO 46636
43372: LD_INT 2
43374: DOUBLE
43375: EQUAL
43376: IFTRUE 43380
43378: GO 46635
43380: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43381: LD_ADDR_VAR 0 29
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 4
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 5
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 5
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 4
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 5
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 4
43501: PUSH
43502: LD_INT 3
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 4
43511: PUSH
43512: LD_INT 4
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 4
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 4
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 4
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 4
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 3
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 4
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 5
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 5
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 4
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 5
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 3
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 3
43664: NEG
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 3
43709: NEG
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 4
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 4
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 4
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 4
43766: NEG
43767: PUSH
43768: LD_INT 4
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 4
43778: NEG
43779: PUSH
43780: LD_INT 5
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 3
43790: NEG
43791: PUSH
43792: LD_INT 4
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: LD_INT 3
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 4
43814: NEG
43815: PUSH
43816: LD_INT 3
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 5
43826: NEG
43827: PUSH
43828: LD_INT 4
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 5
43838: NEG
43839: PUSH
43840: LD_INT 5
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 3
43850: NEG
43851: PUSH
43852: LD_INT 5
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 5
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43919: LD_ADDR_VAR 0 30
43923: PUSH
43924: LD_INT 4
43926: PUSH
43927: LD_INT 4
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 4
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 5
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 5
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 4
43966: PUSH
43967: LD_INT 5
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: LD_INT 4
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: LD_INT 5
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 3
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 4
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 4
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 3
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 4
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 4
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 4
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 4
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 5
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 5
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 5
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: NEG
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 3
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: LD_INT 4
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: LD_INT 3
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 4
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 4
44283: NEG
44284: PUSH
44285: LD_INT 4
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: LD_INT 4
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 4
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 4
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 5
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 4
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 3
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 4
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 5
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 5
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44466: LD_ADDR_VAR 0 31
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 4
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 4
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 5
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 5
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: LD_INT 4
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 5
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 3
44566: NEG
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 3
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 4
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 4
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 4
44645: NEG
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 4
44668: NEG
44669: PUSH
44670: LD_INT 4
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 4
44680: NEG
44681: PUSH
44682: LD_INT 5
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 3
44692: NEG
44693: PUSH
44694: LD_INT 4
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 4
44716: NEG
44717: PUSH
44718: LD_INT 3
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 5
44728: NEG
44729: PUSH
44730: LD_INT 4
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 5
44740: NEG
44741: PUSH
44742: LD_INT 5
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: LD_INT 5
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 5
44764: NEG
44765: PUSH
44766: LD_INT 3
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 4
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 3
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 2
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 3
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 4
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 4
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 4
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 5
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 5
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 4
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 5
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45016: LD_ADDR_VAR 0 32
45020: PUSH
45021: LD_INT 4
45023: NEG
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 4
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 4
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 5
45079: NEG
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 5
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 5
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 4
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 4
45185: NEG
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 4
45197: NEG
45198: PUSH
45199: LD_INT 4
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: LD_INT 4
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 4
45221: NEG
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 4
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 5
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 4
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 3
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 4
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 5
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 5
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 3
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 4
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 4
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: LD_INT 4
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 4
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 5
45448: PUSH
45449: LD_INT 4
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 5
45458: PUSH
45459: LD_INT 5
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 4
45468: PUSH
45469: LD_INT 5
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: LD_INT 4
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: PUSH
45489: LD_INT 3
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 5
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 5
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45563: LD_ADDR_VAR 0 33
45567: PUSH
45568: LD_INT 4
45570: NEG
45571: PUSH
45572: LD_INT 4
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 4
45582: NEG
45583: PUSH
45584: LD_INT 5
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: NEG
45595: PUSH
45596: LD_INT 4
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 3
45606: NEG
45607: PUSH
45608: LD_INT 3
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 4
45618: NEG
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 5
45630: NEG
45631: PUSH
45632: LD_INT 4
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 5
45642: NEG
45643: PUSH
45644: LD_INT 5
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: LD_INT 5
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 5
45666: NEG
45667: PUSH
45668: LD_INT 3
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 4
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 4
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 4
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 4
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 4
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 5
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 4
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 5
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 4
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 4
45903: PUSH
45904: LD_INT 4
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: LD_INT 4
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 4
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 4
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 4
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 3
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 4
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 5
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 5
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 4
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 3
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 5
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46101: LD_ADDR_VAR 0 34
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 4
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 5
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 4
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 3
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 4
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 5
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 3
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 5
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 3
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 4
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 4
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 4
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 4
46303: PUSH
46304: LD_INT 4
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 4
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 5
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 5
46333: PUSH
46334: LD_INT 5
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 4
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 4
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 5
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 4
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 4
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 4
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 4
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 4
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 5
46542: NEG
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 5
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 5
46565: NEG
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// end ; end ;
46633: GO 46636
46635: POP
// case btype of b_depot , b_warehouse :
46636: LD_VAR 0 1
46640: PUSH
46641: LD_INT 0
46643: DOUBLE
46644: EQUAL
46645: IFTRUE 46655
46647: LD_INT 1
46649: DOUBLE
46650: EQUAL
46651: IFTRUE 46655
46653: GO 46856
46655: POP
// case nation of nation_american :
46656: LD_VAR 0 5
46660: PUSH
46661: LD_INT 1
46663: DOUBLE
46664: EQUAL
46665: IFTRUE 46669
46667: GO 46725
46669: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46670: LD_ADDR_VAR 0 9
46674: PUSH
46675: LD_VAR 0 11
46679: PUSH
46680: LD_VAR 0 12
46684: PUSH
46685: LD_VAR 0 13
46689: PUSH
46690: LD_VAR 0 14
46694: PUSH
46695: LD_VAR 0 15
46699: PUSH
46700: LD_VAR 0 16
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: PUSH
46713: LD_VAR 0 4
46717: PUSH
46718: LD_INT 1
46720: PLUS
46721: ARRAY
46722: ST_TO_ADDR
46723: GO 46854
46725: LD_INT 2
46727: DOUBLE
46728: EQUAL
46729: IFTRUE 46733
46731: GO 46789
46733: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46734: LD_ADDR_VAR 0 9
46738: PUSH
46739: LD_VAR 0 17
46743: PUSH
46744: LD_VAR 0 18
46748: PUSH
46749: LD_VAR 0 19
46753: PUSH
46754: LD_VAR 0 20
46758: PUSH
46759: LD_VAR 0 21
46763: PUSH
46764: LD_VAR 0 22
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: PUSH
46777: LD_VAR 0 4
46781: PUSH
46782: LD_INT 1
46784: PLUS
46785: ARRAY
46786: ST_TO_ADDR
46787: GO 46854
46789: LD_INT 3
46791: DOUBLE
46792: EQUAL
46793: IFTRUE 46797
46795: GO 46853
46797: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46798: LD_ADDR_VAR 0 9
46802: PUSH
46803: LD_VAR 0 23
46807: PUSH
46808: LD_VAR 0 24
46812: PUSH
46813: LD_VAR 0 25
46817: PUSH
46818: LD_VAR 0 26
46822: PUSH
46823: LD_VAR 0 27
46827: PUSH
46828: LD_VAR 0 28
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: PUSH
46841: LD_VAR 0 4
46845: PUSH
46846: LD_INT 1
46848: PLUS
46849: ARRAY
46850: ST_TO_ADDR
46851: GO 46854
46853: POP
46854: GO 47409
46856: LD_INT 2
46858: DOUBLE
46859: EQUAL
46860: IFTRUE 46870
46862: LD_INT 3
46864: DOUBLE
46865: EQUAL
46866: IFTRUE 46870
46868: GO 46926
46870: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46871: LD_ADDR_VAR 0 9
46875: PUSH
46876: LD_VAR 0 29
46880: PUSH
46881: LD_VAR 0 30
46885: PUSH
46886: LD_VAR 0 31
46890: PUSH
46891: LD_VAR 0 32
46895: PUSH
46896: LD_VAR 0 33
46900: PUSH
46901: LD_VAR 0 34
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: PUSH
46914: LD_VAR 0 4
46918: PUSH
46919: LD_INT 1
46921: PLUS
46922: ARRAY
46923: ST_TO_ADDR
46924: GO 47409
46926: LD_INT 16
46928: DOUBLE
46929: EQUAL
46930: IFTRUE 46988
46932: LD_INT 17
46934: DOUBLE
46935: EQUAL
46936: IFTRUE 46988
46938: LD_INT 18
46940: DOUBLE
46941: EQUAL
46942: IFTRUE 46988
46944: LD_INT 19
46946: DOUBLE
46947: EQUAL
46948: IFTRUE 46988
46950: LD_INT 22
46952: DOUBLE
46953: EQUAL
46954: IFTRUE 46988
46956: LD_INT 20
46958: DOUBLE
46959: EQUAL
46960: IFTRUE 46988
46962: LD_INT 21
46964: DOUBLE
46965: EQUAL
46966: IFTRUE 46988
46968: LD_INT 23
46970: DOUBLE
46971: EQUAL
46972: IFTRUE 46988
46974: LD_INT 24
46976: DOUBLE
46977: EQUAL
46978: IFTRUE 46988
46980: LD_INT 25
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46988
46986: GO 47044
46988: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46989: LD_ADDR_VAR 0 9
46993: PUSH
46994: LD_VAR 0 35
46998: PUSH
46999: LD_VAR 0 36
47003: PUSH
47004: LD_VAR 0 37
47008: PUSH
47009: LD_VAR 0 38
47013: PUSH
47014: LD_VAR 0 39
47018: PUSH
47019: LD_VAR 0 40
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: PUSH
47032: LD_VAR 0 4
47036: PUSH
47037: LD_INT 1
47039: PLUS
47040: ARRAY
47041: ST_TO_ADDR
47042: GO 47409
47044: LD_INT 6
47046: DOUBLE
47047: EQUAL
47048: IFTRUE 47100
47050: LD_INT 7
47052: DOUBLE
47053: EQUAL
47054: IFTRUE 47100
47056: LD_INT 8
47058: DOUBLE
47059: EQUAL
47060: IFTRUE 47100
47062: LD_INT 13
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47100
47068: LD_INT 12
47070: DOUBLE
47071: EQUAL
47072: IFTRUE 47100
47074: LD_INT 15
47076: DOUBLE
47077: EQUAL
47078: IFTRUE 47100
47080: LD_INT 11
47082: DOUBLE
47083: EQUAL
47084: IFTRUE 47100
47086: LD_INT 14
47088: DOUBLE
47089: EQUAL
47090: IFTRUE 47100
47092: LD_INT 10
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 47156
47100: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47101: LD_ADDR_VAR 0 9
47105: PUSH
47106: LD_VAR 0 41
47110: PUSH
47111: LD_VAR 0 42
47115: PUSH
47116: LD_VAR 0 43
47120: PUSH
47121: LD_VAR 0 44
47125: PUSH
47126: LD_VAR 0 45
47130: PUSH
47131: LD_VAR 0 46
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: PUSH
47144: LD_VAR 0 4
47148: PUSH
47149: LD_INT 1
47151: PLUS
47152: ARRAY
47153: ST_TO_ADDR
47154: GO 47409
47156: LD_INT 36
47158: DOUBLE
47159: EQUAL
47160: IFTRUE 47164
47162: GO 47220
47164: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47165: LD_ADDR_VAR 0 9
47169: PUSH
47170: LD_VAR 0 47
47174: PUSH
47175: LD_VAR 0 48
47179: PUSH
47180: LD_VAR 0 49
47184: PUSH
47185: LD_VAR 0 50
47189: PUSH
47190: LD_VAR 0 51
47194: PUSH
47195: LD_VAR 0 52
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: PUSH
47208: LD_VAR 0 4
47212: PUSH
47213: LD_INT 1
47215: PLUS
47216: ARRAY
47217: ST_TO_ADDR
47218: GO 47409
47220: LD_INT 4
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47246
47226: LD_INT 5
47228: DOUBLE
47229: EQUAL
47230: IFTRUE 47246
47232: LD_INT 34
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47246
47238: LD_INT 37
47240: DOUBLE
47241: EQUAL
47242: IFTRUE 47246
47244: GO 47302
47246: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47247: LD_ADDR_VAR 0 9
47251: PUSH
47252: LD_VAR 0 53
47256: PUSH
47257: LD_VAR 0 54
47261: PUSH
47262: LD_VAR 0 55
47266: PUSH
47267: LD_VAR 0 56
47271: PUSH
47272: LD_VAR 0 57
47276: PUSH
47277: LD_VAR 0 58
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: PUSH
47290: LD_VAR 0 4
47294: PUSH
47295: LD_INT 1
47297: PLUS
47298: ARRAY
47299: ST_TO_ADDR
47300: GO 47409
47302: LD_INT 31
47304: DOUBLE
47305: EQUAL
47306: IFTRUE 47352
47308: LD_INT 32
47310: DOUBLE
47311: EQUAL
47312: IFTRUE 47352
47314: LD_INT 33
47316: DOUBLE
47317: EQUAL
47318: IFTRUE 47352
47320: LD_INT 27
47322: DOUBLE
47323: EQUAL
47324: IFTRUE 47352
47326: LD_INT 26
47328: DOUBLE
47329: EQUAL
47330: IFTRUE 47352
47332: LD_INT 28
47334: DOUBLE
47335: EQUAL
47336: IFTRUE 47352
47338: LD_INT 29
47340: DOUBLE
47341: EQUAL
47342: IFTRUE 47352
47344: LD_INT 30
47346: DOUBLE
47347: EQUAL
47348: IFTRUE 47352
47350: GO 47408
47352: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47353: LD_ADDR_VAR 0 9
47357: PUSH
47358: LD_VAR 0 59
47362: PUSH
47363: LD_VAR 0 60
47367: PUSH
47368: LD_VAR 0 61
47372: PUSH
47373: LD_VAR 0 62
47377: PUSH
47378: LD_VAR 0 63
47382: PUSH
47383: LD_VAR 0 64
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: PUSH
47396: LD_VAR 0 4
47400: PUSH
47401: LD_INT 1
47403: PLUS
47404: ARRAY
47405: ST_TO_ADDR
47406: GO 47409
47408: POP
// temp_list2 = [ ] ;
47409: LD_ADDR_VAR 0 10
47413: PUSH
47414: EMPTY
47415: ST_TO_ADDR
// for i in temp_list do
47416: LD_ADDR_VAR 0 8
47420: PUSH
47421: LD_VAR 0 9
47425: PUSH
47426: FOR_IN
47427: IFFALSE 47479
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47429: LD_ADDR_VAR 0 10
47433: PUSH
47434: LD_VAR 0 10
47438: PUSH
47439: LD_VAR 0 8
47443: PUSH
47444: LD_INT 1
47446: ARRAY
47447: PUSH
47448: LD_VAR 0 2
47452: PLUS
47453: PUSH
47454: LD_VAR 0 8
47458: PUSH
47459: LD_INT 2
47461: ARRAY
47462: PUSH
47463: LD_VAR 0 3
47467: PLUS
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: ADD
47476: ST_TO_ADDR
47477: GO 47426
47479: POP
47480: POP
// result = temp_list2 ;
47481: LD_ADDR_VAR 0 7
47485: PUSH
47486: LD_VAR 0 10
47490: ST_TO_ADDR
// end ;
47491: LD_VAR 0 7
47495: RET
// export function EnemyInRange ( unit , dist ) ; begin
47496: LD_INT 0
47498: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47499: LD_ADDR_VAR 0 3
47503: PUSH
47504: LD_VAR 0 1
47508: PPUSH
47509: CALL_OW 255
47513: PPUSH
47514: LD_VAR 0 1
47518: PPUSH
47519: CALL_OW 250
47523: PPUSH
47524: LD_VAR 0 1
47528: PPUSH
47529: CALL_OW 251
47533: PPUSH
47534: LD_VAR 0 2
47538: PPUSH
47539: CALL 20892 0 4
47543: PUSH
47544: LD_INT 4
47546: ARRAY
47547: ST_TO_ADDR
// end ;
47548: LD_VAR 0 3
47552: RET
// export function PlayerSeeMe ( unit ) ; begin
47553: LD_INT 0
47555: PPUSH
// result := See ( your_side , unit ) ;
47556: LD_ADDR_VAR 0 2
47560: PUSH
47561: LD_OWVAR 2
47565: PPUSH
47566: LD_VAR 0 1
47570: PPUSH
47571: CALL_OW 292
47575: ST_TO_ADDR
// end ;
47576: LD_VAR 0 2
47580: RET
// export function ReverseDir ( unit ) ; begin
47581: LD_INT 0
47583: PPUSH
// if not unit then
47584: LD_VAR 0 1
47588: NOT
47589: IFFALSE 47593
// exit ;
47591: GO 47616
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47593: LD_ADDR_VAR 0 2
47597: PUSH
47598: LD_VAR 0 1
47602: PPUSH
47603: CALL_OW 254
47607: PUSH
47608: LD_INT 3
47610: PLUS
47611: PUSH
47612: LD_INT 6
47614: MOD
47615: ST_TO_ADDR
// end ;
47616: LD_VAR 0 2
47620: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
47621: LD_INT 0
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
47627: PPUSH
// if not hexes then
47628: LD_VAR 0 2
47632: NOT
47633: IFFALSE 47637
// exit ;
47635: GO 47785
// dist := 9999 ;
47637: LD_ADDR_VAR 0 5
47641: PUSH
47642: LD_INT 9999
47644: ST_TO_ADDR
// for i = 1 to hexes do
47645: LD_ADDR_VAR 0 4
47649: PUSH
47650: DOUBLE
47651: LD_INT 1
47653: DEC
47654: ST_TO_ADDR
47655: LD_VAR 0 2
47659: PUSH
47660: FOR_TO
47661: IFFALSE 47773
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
47663: LD_VAR 0 1
47667: PPUSH
47668: LD_VAR 0 2
47672: PUSH
47673: LD_VAR 0 4
47677: ARRAY
47678: PUSH
47679: LD_INT 1
47681: ARRAY
47682: PPUSH
47683: LD_VAR 0 2
47687: PUSH
47688: LD_VAR 0 4
47692: ARRAY
47693: PUSH
47694: LD_INT 2
47696: ARRAY
47697: PPUSH
47698: CALL_OW 297
47702: PUSH
47703: LD_VAR 0 5
47707: LESS
47708: IFFALSE 47771
// begin hex := hexes [ i ] ;
47710: LD_ADDR_VAR 0 7
47714: PUSH
47715: LD_VAR 0 2
47719: PUSH
47720: LD_VAR 0 4
47724: ARRAY
47725: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47726: LD_ADDR_VAR 0 5
47730: PUSH
47731: LD_VAR 0 1
47735: PPUSH
47736: LD_VAR 0 2
47740: PUSH
47741: LD_VAR 0 4
47745: ARRAY
47746: PUSH
47747: LD_INT 1
47749: ARRAY
47750: PPUSH
47751: LD_VAR 0 2
47755: PUSH
47756: LD_VAR 0 4
47760: ARRAY
47761: PUSH
47762: LD_INT 2
47764: ARRAY
47765: PPUSH
47766: CALL_OW 297
47770: ST_TO_ADDR
// end ; end ;
47771: GO 47660
47773: POP
47774: POP
// result := hex ;
47775: LD_ADDR_VAR 0 3
47779: PUSH
47780: LD_VAR 0 7
47784: ST_TO_ADDR
// end ;
47785: LD_VAR 0 3
47789: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47790: LD_INT 0
47792: PPUSH
47793: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47794: LD_VAR 0 1
47798: NOT
47799: PUSH
47800: LD_VAR 0 1
47804: PUSH
47805: LD_INT 21
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 23
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PPUSH
47829: CALL_OW 69
47833: IN
47834: NOT
47835: OR
47836: IFFALSE 47840
// exit ;
47838: GO 47887
// for i = 1 to 3 do
47840: LD_ADDR_VAR 0 3
47844: PUSH
47845: DOUBLE
47846: LD_INT 1
47848: DEC
47849: ST_TO_ADDR
47850: LD_INT 3
47852: PUSH
47853: FOR_TO
47854: IFFALSE 47885
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47856: LD_VAR 0 1
47860: PPUSH
47861: CALL_OW 250
47865: PPUSH
47866: LD_VAR 0 1
47870: PPUSH
47871: CALL_OW 251
47875: PPUSH
47876: LD_INT 1
47878: PPUSH
47879: CALL_OW 453
47883: GO 47853
47885: POP
47886: POP
// end ;
47887: LD_VAR 0 2
47891: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47892: LD_INT 0
47894: PPUSH
47895: PPUSH
47896: PPUSH
47897: PPUSH
47898: PPUSH
47899: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47900: LD_VAR 0 1
47904: NOT
47905: PUSH
47906: LD_VAR 0 2
47910: NOT
47911: OR
47912: PUSH
47913: LD_VAR 0 1
47917: PPUSH
47918: CALL_OW 314
47922: OR
47923: IFFALSE 47927
// exit ;
47925: GO 48368
// x := GetX ( enemy_unit ) ;
47927: LD_ADDR_VAR 0 7
47931: PUSH
47932: LD_VAR 0 2
47936: PPUSH
47937: CALL_OW 250
47941: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47942: LD_ADDR_VAR 0 8
47946: PUSH
47947: LD_VAR 0 2
47951: PPUSH
47952: CALL_OW 251
47956: ST_TO_ADDR
// if not x or not y then
47957: LD_VAR 0 7
47961: NOT
47962: PUSH
47963: LD_VAR 0 8
47967: NOT
47968: OR
47969: IFFALSE 47973
// exit ;
47971: GO 48368
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47973: LD_ADDR_VAR 0 6
47977: PUSH
47978: LD_VAR 0 7
47982: PPUSH
47983: LD_INT 0
47985: PPUSH
47986: LD_INT 4
47988: PPUSH
47989: CALL_OW 272
47993: PUSH
47994: LD_VAR 0 8
47998: PPUSH
47999: LD_INT 0
48001: PPUSH
48002: LD_INT 4
48004: PPUSH
48005: CALL_OW 273
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_VAR 0 7
48018: PPUSH
48019: LD_INT 1
48021: PPUSH
48022: LD_INT 4
48024: PPUSH
48025: CALL_OW 272
48029: PUSH
48030: LD_VAR 0 8
48034: PPUSH
48035: LD_INT 1
48037: PPUSH
48038: LD_INT 4
48040: PPUSH
48041: CALL_OW 273
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_VAR 0 7
48054: PPUSH
48055: LD_INT 2
48057: PPUSH
48058: LD_INT 4
48060: PPUSH
48061: CALL_OW 272
48065: PUSH
48066: LD_VAR 0 8
48070: PPUSH
48071: LD_INT 2
48073: PPUSH
48074: LD_INT 4
48076: PPUSH
48077: CALL_OW 273
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_VAR 0 7
48090: PPUSH
48091: LD_INT 3
48093: PPUSH
48094: LD_INT 4
48096: PPUSH
48097: CALL_OW 272
48101: PUSH
48102: LD_VAR 0 8
48106: PPUSH
48107: LD_INT 3
48109: PPUSH
48110: LD_INT 4
48112: PPUSH
48113: CALL_OW 273
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_VAR 0 7
48126: PPUSH
48127: LD_INT 4
48129: PPUSH
48130: LD_INT 4
48132: PPUSH
48133: CALL_OW 272
48137: PUSH
48138: LD_VAR 0 8
48142: PPUSH
48143: LD_INT 4
48145: PPUSH
48146: LD_INT 4
48148: PPUSH
48149: CALL_OW 273
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_VAR 0 7
48162: PPUSH
48163: LD_INT 5
48165: PPUSH
48166: LD_INT 4
48168: PPUSH
48169: CALL_OW 272
48173: PUSH
48174: LD_VAR 0 8
48178: PPUSH
48179: LD_INT 5
48181: PPUSH
48182: LD_INT 4
48184: PPUSH
48185: CALL_OW 273
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: ST_TO_ADDR
// for i = tmp downto 1 do
48202: LD_ADDR_VAR 0 4
48206: PUSH
48207: DOUBLE
48208: LD_VAR 0 6
48212: INC
48213: ST_TO_ADDR
48214: LD_INT 1
48216: PUSH
48217: FOR_DOWNTO
48218: IFFALSE 48319
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48220: LD_VAR 0 6
48224: PUSH
48225: LD_VAR 0 4
48229: ARRAY
48230: PUSH
48231: LD_INT 1
48233: ARRAY
48234: PPUSH
48235: LD_VAR 0 6
48239: PUSH
48240: LD_VAR 0 4
48244: ARRAY
48245: PUSH
48246: LD_INT 2
48248: ARRAY
48249: PPUSH
48250: CALL_OW 488
48254: NOT
48255: PUSH
48256: LD_VAR 0 6
48260: PUSH
48261: LD_VAR 0 4
48265: ARRAY
48266: PUSH
48267: LD_INT 1
48269: ARRAY
48270: PPUSH
48271: LD_VAR 0 6
48275: PUSH
48276: LD_VAR 0 4
48280: ARRAY
48281: PUSH
48282: LD_INT 2
48284: ARRAY
48285: PPUSH
48286: CALL_OW 428
48290: PUSH
48291: LD_INT 0
48293: NONEQUAL
48294: OR
48295: IFFALSE 48317
// tmp := Delete ( tmp , i ) ;
48297: LD_ADDR_VAR 0 6
48301: PUSH
48302: LD_VAR 0 6
48306: PPUSH
48307: LD_VAR 0 4
48311: PPUSH
48312: CALL_OW 3
48316: ST_TO_ADDR
48317: GO 48217
48319: POP
48320: POP
// j := GetClosestHex ( unit , tmp ) ;
48321: LD_ADDR_VAR 0 5
48325: PUSH
48326: LD_VAR 0 1
48330: PPUSH
48331: LD_VAR 0 6
48335: PPUSH
48336: CALL 47621 0 2
48340: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48341: LD_VAR 0 1
48345: PPUSH
48346: LD_VAR 0 5
48350: PUSH
48351: LD_INT 1
48353: ARRAY
48354: PPUSH
48355: LD_VAR 0 5
48359: PUSH
48360: LD_INT 2
48362: ARRAY
48363: PPUSH
48364: CALL_OW 111
// end ;
48368: LD_VAR 0 3
48372: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48373: LD_INT 0
48375: PPUSH
48376: PPUSH
48377: PPUSH
// uc_side = 0 ;
48378: LD_ADDR_OWVAR 20
48382: PUSH
48383: LD_INT 0
48385: ST_TO_ADDR
// uc_nation = 0 ;
48386: LD_ADDR_OWVAR 21
48390: PUSH
48391: LD_INT 0
48393: ST_TO_ADDR
// InitHc_All ( ) ;
48394: CALL_OW 584
// InitVc ;
48398: CALL_OW 20
// if mastodonts then
48402: LD_VAR 0 6
48406: IFFALSE 48473
// for i = 1 to mastodonts do
48408: LD_ADDR_VAR 0 11
48412: PUSH
48413: DOUBLE
48414: LD_INT 1
48416: DEC
48417: ST_TO_ADDR
48418: LD_VAR 0 6
48422: PUSH
48423: FOR_TO
48424: IFFALSE 48471
// begin vc_chassis := 31 ;
48426: LD_ADDR_OWVAR 37
48430: PUSH
48431: LD_INT 31
48433: ST_TO_ADDR
// vc_control := control_rider ;
48434: LD_ADDR_OWVAR 38
48438: PUSH
48439: LD_INT 4
48441: ST_TO_ADDR
// animal := CreateVehicle ;
48442: LD_ADDR_VAR 0 12
48446: PUSH
48447: CALL_OW 45
48451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48452: LD_VAR 0 12
48456: PPUSH
48457: LD_VAR 0 8
48461: PPUSH
48462: LD_INT 0
48464: PPUSH
48465: CALL 50661 0 3
// end ;
48469: GO 48423
48471: POP
48472: POP
// if horses then
48473: LD_VAR 0 5
48477: IFFALSE 48544
// for i = 1 to horses do
48479: LD_ADDR_VAR 0 11
48483: PUSH
48484: DOUBLE
48485: LD_INT 1
48487: DEC
48488: ST_TO_ADDR
48489: LD_VAR 0 5
48493: PUSH
48494: FOR_TO
48495: IFFALSE 48542
// begin hc_class := 21 ;
48497: LD_ADDR_OWVAR 28
48501: PUSH
48502: LD_INT 21
48504: ST_TO_ADDR
// hc_gallery :=  ;
48505: LD_ADDR_OWVAR 33
48509: PUSH
48510: LD_STRING 
48512: ST_TO_ADDR
// animal := CreateHuman ;
48513: LD_ADDR_VAR 0 12
48517: PUSH
48518: CALL_OW 44
48522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48523: LD_VAR 0 12
48527: PPUSH
48528: LD_VAR 0 8
48532: PPUSH
48533: LD_INT 0
48535: PPUSH
48536: CALL 50661 0 3
// end ;
48540: GO 48494
48542: POP
48543: POP
// if birds then
48544: LD_VAR 0 1
48548: IFFALSE 48615
// for i = 1 to birds do
48550: LD_ADDR_VAR 0 11
48554: PUSH
48555: DOUBLE
48556: LD_INT 1
48558: DEC
48559: ST_TO_ADDR
48560: LD_VAR 0 1
48564: PUSH
48565: FOR_TO
48566: IFFALSE 48613
// begin hc_class = 18 ;
48568: LD_ADDR_OWVAR 28
48572: PUSH
48573: LD_INT 18
48575: ST_TO_ADDR
// hc_gallery =  ;
48576: LD_ADDR_OWVAR 33
48580: PUSH
48581: LD_STRING 
48583: ST_TO_ADDR
// animal := CreateHuman ;
48584: LD_ADDR_VAR 0 12
48588: PUSH
48589: CALL_OW 44
48593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48594: LD_VAR 0 12
48598: PPUSH
48599: LD_VAR 0 8
48603: PPUSH
48604: LD_INT 0
48606: PPUSH
48607: CALL 50661 0 3
// end ;
48611: GO 48565
48613: POP
48614: POP
// if tigers then
48615: LD_VAR 0 2
48619: IFFALSE 48703
// for i = 1 to tigers do
48621: LD_ADDR_VAR 0 11
48625: PUSH
48626: DOUBLE
48627: LD_INT 1
48629: DEC
48630: ST_TO_ADDR
48631: LD_VAR 0 2
48635: PUSH
48636: FOR_TO
48637: IFFALSE 48701
// begin hc_class = class_tiger ;
48639: LD_ADDR_OWVAR 28
48643: PUSH
48644: LD_INT 14
48646: ST_TO_ADDR
// hc_gallery =  ;
48647: LD_ADDR_OWVAR 33
48651: PUSH
48652: LD_STRING 
48654: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48655: LD_ADDR_OWVAR 35
48659: PUSH
48660: LD_INT 7
48662: NEG
48663: PPUSH
48664: LD_INT 7
48666: PPUSH
48667: CALL_OW 12
48671: ST_TO_ADDR
// animal := CreateHuman ;
48672: LD_ADDR_VAR 0 12
48676: PUSH
48677: CALL_OW 44
48681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48682: LD_VAR 0 12
48686: PPUSH
48687: LD_VAR 0 8
48691: PPUSH
48692: LD_INT 0
48694: PPUSH
48695: CALL 50661 0 3
// end ;
48699: GO 48636
48701: POP
48702: POP
// if apemans then
48703: LD_VAR 0 3
48707: IFFALSE 48830
// for i = 1 to apemans do
48709: LD_ADDR_VAR 0 11
48713: PUSH
48714: DOUBLE
48715: LD_INT 1
48717: DEC
48718: ST_TO_ADDR
48719: LD_VAR 0 3
48723: PUSH
48724: FOR_TO
48725: IFFALSE 48828
// begin hc_class = class_apeman ;
48727: LD_ADDR_OWVAR 28
48731: PUSH
48732: LD_INT 12
48734: ST_TO_ADDR
// hc_gallery =  ;
48735: LD_ADDR_OWVAR 33
48739: PUSH
48740: LD_STRING 
48742: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48743: LD_ADDR_OWVAR 35
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PPUSH
48752: LD_INT 2
48754: PPUSH
48755: CALL_OW 12
48759: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48760: LD_ADDR_OWVAR 31
48764: PUSH
48765: LD_INT 1
48767: PPUSH
48768: LD_INT 3
48770: PPUSH
48771: CALL_OW 12
48775: PUSH
48776: LD_INT 1
48778: PPUSH
48779: LD_INT 3
48781: PPUSH
48782: CALL_OW 12
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// animal := CreateHuman ;
48799: LD_ADDR_VAR 0 12
48803: PUSH
48804: CALL_OW 44
48808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48809: LD_VAR 0 12
48813: PPUSH
48814: LD_VAR 0 8
48818: PPUSH
48819: LD_INT 0
48821: PPUSH
48822: CALL 50661 0 3
// end ;
48826: GO 48724
48828: POP
48829: POP
// if enchidnas then
48830: LD_VAR 0 4
48834: IFFALSE 48901
// for i = 1 to enchidnas do
48836: LD_ADDR_VAR 0 11
48840: PUSH
48841: DOUBLE
48842: LD_INT 1
48844: DEC
48845: ST_TO_ADDR
48846: LD_VAR 0 4
48850: PUSH
48851: FOR_TO
48852: IFFALSE 48899
// begin hc_class = 13 ;
48854: LD_ADDR_OWVAR 28
48858: PUSH
48859: LD_INT 13
48861: ST_TO_ADDR
// hc_gallery =  ;
48862: LD_ADDR_OWVAR 33
48866: PUSH
48867: LD_STRING 
48869: ST_TO_ADDR
// animal := CreateHuman ;
48870: LD_ADDR_VAR 0 12
48874: PUSH
48875: CALL_OW 44
48879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48880: LD_VAR 0 12
48884: PPUSH
48885: LD_VAR 0 8
48889: PPUSH
48890: LD_INT 0
48892: PPUSH
48893: CALL 50661 0 3
// end ;
48897: GO 48851
48899: POP
48900: POP
// if fishes then
48901: LD_VAR 0 7
48905: IFFALSE 48972
// for i = 1 to fishes do
48907: LD_ADDR_VAR 0 11
48911: PUSH
48912: DOUBLE
48913: LD_INT 1
48915: DEC
48916: ST_TO_ADDR
48917: LD_VAR 0 7
48921: PUSH
48922: FOR_TO
48923: IFFALSE 48970
// begin hc_class = 20 ;
48925: LD_ADDR_OWVAR 28
48929: PUSH
48930: LD_INT 20
48932: ST_TO_ADDR
// hc_gallery =  ;
48933: LD_ADDR_OWVAR 33
48937: PUSH
48938: LD_STRING 
48940: ST_TO_ADDR
// animal := CreateHuman ;
48941: LD_ADDR_VAR 0 12
48945: PUSH
48946: CALL_OW 44
48950: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48951: LD_VAR 0 12
48955: PPUSH
48956: LD_VAR 0 9
48960: PPUSH
48961: LD_INT 0
48963: PPUSH
48964: CALL 50661 0 3
// end ;
48968: GO 48922
48970: POP
48971: POP
// end ;
48972: LD_VAR 0 10
48976: RET
// export function WantHeal ( sci , unit ) ; begin
48977: LD_INT 0
48979: PPUSH
// if GetTaskList ( sci ) > 0 then
48980: LD_VAR 0 1
48984: PPUSH
48985: CALL_OW 437
48989: PUSH
48990: LD_INT 0
48992: GREATER
48993: IFFALSE 49063
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48995: LD_VAR 0 1
48999: PPUSH
49000: CALL_OW 437
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: PUSH
49009: LD_INT 1
49011: ARRAY
49012: PUSH
49013: LD_STRING l
49015: EQUAL
49016: PUSH
49017: LD_VAR 0 1
49021: PPUSH
49022: CALL_OW 437
49026: PUSH
49027: LD_INT 1
49029: ARRAY
49030: PUSH
49031: LD_INT 4
49033: ARRAY
49034: PUSH
49035: LD_VAR 0 2
49039: EQUAL
49040: AND
49041: IFFALSE 49053
// result := true else
49043: LD_ADDR_VAR 0 3
49047: PUSH
49048: LD_INT 1
49050: ST_TO_ADDR
49051: GO 49061
// result := false ;
49053: LD_ADDR_VAR 0 3
49057: PUSH
49058: LD_INT 0
49060: ST_TO_ADDR
// end else
49061: GO 49071
// result := false ;
49063: LD_ADDR_VAR 0 3
49067: PUSH
49068: LD_INT 0
49070: ST_TO_ADDR
// end ;
49071: LD_VAR 0 3
49075: RET
// export function HealTarget ( sci ) ; begin
49076: LD_INT 0
49078: PPUSH
// if not sci then
49079: LD_VAR 0 1
49083: NOT
49084: IFFALSE 49088
// exit ;
49086: GO 49153
// result := 0 ;
49088: LD_ADDR_VAR 0 2
49092: PUSH
49093: LD_INT 0
49095: ST_TO_ADDR
// if GetTaskList ( sci ) then
49096: LD_VAR 0 1
49100: PPUSH
49101: CALL_OW 437
49105: IFFALSE 49153
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49107: LD_VAR 0 1
49111: PPUSH
49112: CALL_OW 437
49116: PUSH
49117: LD_INT 1
49119: ARRAY
49120: PUSH
49121: LD_INT 1
49123: ARRAY
49124: PUSH
49125: LD_STRING l
49127: EQUAL
49128: IFFALSE 49153
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49130: LD_ADDR_VAR 0 2
49134: PUSH
49135: LD_VAR 0 1
49139: PPUSH
49140: CALL_OW 437
49144: PUSH
49145: LD_INT 1
49147: ARRAY
49148: PUSH
49149: LD_INT 4
49151: ARRAY
49152: ST_TO_ADDR
// end ;
49153: LD_VAR 0 2
49157: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49158: LD_INT 0
49160: PPUSH
49161: PPUSH
49162: PPUSH
49163: PPUSH
// if not base_units then
49164: LD_VAR 0 1
49168: NOT
49169: IFFALSE 49173
// exit ;
49171: GO 49260
// result := false ;
49173: LD_ADDR_VAR 0 2
49177: PUSH
49178: LD_INT 0
49180: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49181: LD_ADDR_VAR 0 5
49185: PUSH
49186: LD_VAR 0 1
49190: PPUSH
49191: LD_INT 21
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PPUSH
49201: CALL_OW 72
49205: ST_TO_ADDR
// if not tmp then
49206: LD_VAR 0 5
49210: NOT
49211: IFFALSE 49215
// exit ;
49213: GO 49260
// for i in tmp do
49215: LD_ADDR_VAR 0 3
49219: PUSH
49220: LD_VAR 0 5
49224: PUSH
49225: FOR_IN
49226: IFFALSE 49258
// begin result := EnemyInRange ( i , 22 ) ;
49228: LD_ADDR_VAR 0 2
49232: PUSH
49233: LD_VAR 0 3
49237: PPUSH
49238: LD_INT 22
49240: PPUSH
49241: CALL 47496 0 2
49245: ST_TO_ADDR
// if result then
49246: LD_VAR 0 2
49250: IFFALSE 49256
// exit ;
49252: POP
49253: POP
49254: GO 49260
// end ;
49256: GO 49225
49258: POP
49259: POP
// end ;
49260: LD_VAR 0 2
49264: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49265: LD_INT 0
49267: PPUSH
49268: PPUSH
// if not units then
49269: LD_VAR 0 1
49273: NOT
49274: IFFALSE 49278
// exit ;
49276: GO 49348
// result := [ ] ;
49278: LD_ADDR_VAR 0 3
49282: PUSH
49283: EMPTY
49284: ST_TO_ADDR
// for i in units do
49285: LD_ADDR_VAR 0 4
49289: PUSH
49290: LD_VAR 0 1
49294: PUSH
49295: FOR_IN
49296: IFFALSE 49346
// if GetTag ( i ) = tag then
49298: LD_VAR 0 4
49302: PPUSH
49303: CALL_OW 110
49307: PUSH
49308: LD_VAR 0 2
49312: EQUAL
49313: IFFALSE 49344
// result := Replace ( result , result + 1 , i ) ;
49315: LD_ADDR_VAR 0 3
49319: PUSH
49320: LD_VAR 0 3
49324: PPUSH
49325: LD_VAR 0 3
49329: PUSH
49330: LD_INT 1
49332: PLUS
49333: PPUSH
49334: LD_VAR 0 4
49338: PPUSH
49339: CALL_OW 1
49343: ST_TO_ADDR
49344: GO 49295
49346: POP
49347: POP
// end ;
49348: LD_VAR 0 3
49352: RET
// export function IsDriver ( un ) ; begin
49353: LD_INT 0
49355: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49356: LD_ADDR_VAR 0 2
49360: PUSH
49361: LD_VAR 0 1
49365: PUSH
49366: LD_INT 55
49368: PUSH
49369: EMPTY
49370: LIST
49371: PPUSH
49372: CALL_OW 69
49376: IN
49377: ST_TO_ADDR
// end ;
49378: LD_VAR 0 2
49382: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49383: LD_INT 0
49385: PPUSH
49386: PPUSH
// list := [ ] ;
49387: LD_ADDR_VAR 0 5
49391: PUSH
49392: EMPTY
49393: ST_TO_ADDR
// case d of 0 :
49394: LD_VAR 0 3
49398: PUSH
49399: LD_INT 0
49401: DOUBLE
49402: EQUAL
49403: IFTRUE 49407
49405: GO 49540
49407: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49408: LD_ADDR_VAR 0 5
49412: PUSH
49413: LD_VAR 0 1
49417: PUSH
49418: LD_INT 4
49420: MINUS
49421: PUSH
49422: LD_VAR 0 2
49426: PUSH
49427: LD_INT 4
49429: MINUS
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: PUSH
49439: LD_VAR 0 1
49443: PUSH
49444: LD_INT 3
49446: MINUS
49447: PUSH
49448: LD_VAR 0 2
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: PUSH
49461: LD_VAR 0 1
49465: PUSH
49466: LD_INT 4
49468: PLUS
49469: PUSH
49470: LD_VAR 0 2
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: PUSH
49483: LD_VAR 0 1
49487: PUSH
49488: LD_INT 3
49490: PLUS
49491: PUSH
49492: LD_VAR 0 2
49496: PUSH
49497: LD_INT 3
49499: PLUS
49500: PUSH
49501: LD_INT 5
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: PUSH
49509: LD_VAR 0 1
49513: PUSH
49514: LD_VAR 0 2
49518: PUSH
49519: LD_INT 4
49521: PLUS
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: ST_TO_ADDR
// end ; 1 :
49538: GO 50238
49540: LD_INT 1
49542: DOUBLE
49543: EQUAL
49544: IFTRUE 49548
49546: GO 49681
49548: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49549: LD_ADDR_VAR 0 5
49553: PUSH
49554: LD_VAR 0 1
49558: PUSH
49559: LD_VAR 0 2
49563: PUSH
49564: LD_INT 4
49566: MINUS
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: PUSH
49576: LD_VAR 0 1
49580: PUSH
49581: LD_INT 3
49583: MINUS
49584: PUSH
49585: LD_VAR 0 2
49589: PUSH
49590: LD_INT 3
49592: MINUS
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: PUSH
49602: LD_VAR 0 1
49606: PUSH
49607: LD_INT 4
49609: MINUS
49610: PUSH
49611: LD_VAR 0 2
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: PUSH
49624: LD_VAR 0 1
49628: PUSH
49629: LD_VAR 0 2
49633: PUSH
49634: LD_INT 3
49636: PLUS
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: PUSH
49646: LD_VAR 0 1
49650: PUSH
49651: LD_INT 4
49653: PLUS
49654: PUSH
49655: LD_VAR 0 2
49659: PUSH
49660: LD_INT 4
49662: PLUS
49663: PUSH
49664: LD_INT 5
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// end ; 2 :
49679: GO 50238
49681: LD_INT 2
49683: DOUBLE
49684: EQUAL
49685: IFTRUE 49689
49687: GO 49818
49689: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49690: LD_ADDR_VAR 0 5
49694: PUSH
49695: LD_VAR 0 1
49699: PUSH
49700: LD_VAR 0 2
49704: PUSH
49705: LD_INT 3
49707: MINUS
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: PUSH
49717: LD_VAR 0 1
49721: PUSH
49722: LD_INT 4
49724: PLUS
49725: PUSH
49726: LD_VAR 0 2
49730: PUSH
49731: LD_INT 4
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: PUSH
49739: LD_VAR 0 1
49743: PUSH
49744: LD_VAR 0 2
49748: PUSH
49749: LD_INT 4
49751: PLUS
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: PUSH
49761: LD_VAR 0 1
49765: PUSH
49766: LD_INT 3
49768: MINUS
49769: PUSH
49770: LD_VAR 0 2
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: PUSH
49783: LD_VAR 0 1
49787: PUSH
49788: LD_INT 4
49790: MINUS
49791: PUSH
49792: LD_VAR 0 2
49796: PUSH
49797: LD_INT 4
49799: MINUS
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: ST_TO_ADDR
// end ; 3 :
49816: GO 50238
49818: LD_INT 3
49820: DOUBLE
49821: EQUAL
49822: IFTRUE 49826
49824: GO 49959
49826: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49827: LD_ADDR_VAR 0 5
49831: PUSH
49832: LD_VAR 0 1
49836: PUSH
49837: LD_INT 3
49839: PLUS
49840: PUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_INT 4
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: PUSH
49854: LD_VAR 0 1
49858: PUSH
49859: LD_INT 4
49861: PLUS
49862: PUSH
49863: LD_VAR 0 2
49867: PUSH
49868: LD_INT 4
49870: PLUS
49871: PUSH
49872: LD_INT 5
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: PUSH
49880: LD_VAR 0 1
49884: PUSH
49885: LD_INT 4
49887: MINUS
49888: PUSH
49889: LD_VAR 0 2
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: PUSH
49902: LD_VAR 0 1
49906: PUSH
49907: LD_VAR 0 2
49911: PUSH
49912: LD_INT 4
49914: MINUS
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: PUSH
49924: LD_VAR 0 1
49928: PUSH
49929: LD_INT 3
49931: MINUS
49932: PUSH
49933: LD_VAR 0 2
49937: PUSH
49938: LD_INT 3
49940: MINUS
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// end ; 4 :
49957: GO 50238
49959: LD_INT 4
49961: DOUBLE
49962: EQUAL
49963: IFTRUE 49967
49965: GO 50100
49967: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49968: LD_ADDR_VAR 0 5
49972: PUSH
49973: LD_VAR 0 1
49977: PUSH
49978: LD_VAR 0 2
49982: PUSH
49983: LD_INT 4
49985: PLUS
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: PUSH
49995: LD_VAR 0 1
49999: PUSH
50000: LD_INT 3
50002: PLUS
50003: PUSH
50004: LD_VAR 0 2
50008: PUSH
50009: LD_INT 3
50011: PLUS
50012: PUSH
50013: LD_INT 5
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: PUSH
50021: LD_VAR 0 1
50025: PUSH
50026: LD_INT 4
50028: PLUS
50029: PUSH
50030: LD_VAR 0 2
50034: PUSH
50035: LD_INT 4
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: PUSH
50043: LD_VAR 0 1
50047: PUSH
50048: LD_VAR 0 2
50052: PUSH
50053: LD_INT 3
50055: MINUS
50056: PUSH
50057: LD_INT 3
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: PUSH
50065: LD_VAR 0 1
50069: PUSH
50070: LD_INT 4
50072: MINUS
50073: PUSH
50074: LD_VAR 0 2
50078: PUSH
50079: LD_INT 4
50081: MINUS
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: ST_TO_ADDR
// end ; 5 :
50098: GO 50238
50100: LD_INT 5
50102: DOUBLE
50103: EQUAL
50104: IFTRUE 50108
50106: GO 50237
50108: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50109: LD_ADDR_VAR 0 5
50113: PUSH
50114: LD_VAR 0 1
50118: PUSH
50119: LD_INT 4
50121: MINUS
50122: PUSH
50123: LD_VAR 0 2
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: PUSH
50136: LD_VAR 0 1
50140: PUSH
50141: LD_VAR 0 2
50145: PUSH
50146: LD_INT 4
50148: MINUS
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: LIST
50157: PUSH
50158: LD_VAR 0 1
50162: PUSH
50163: LD_INT 4
50165: PLUS
50166: PUSH
50167: LD_VAR 0 2
50171: PUSH
50172: LD_INT 4
50174: PLUS
50175: PUSH
50176: LD_INT 5
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: PUSH
50184: LD_VAR 0 1
50188: PUSH
50189: LD_INT 3
50191: PLUS
50192: PUSH
50193: LD_VAR 0 2
50197: PUSH
50198: LD_INT 4
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: PUSH
50206: LD_VAR 0 1
50210: PUSH
50211: LD_VAR 0 2
50215: PUSH
50216: LD_INT 3
50218: PLUS
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// end ; end ;
50235: GO 50238
50237: POP
// result := list ;
50238: LD_ADDR_VAR 0 4
50242: PUSH
50243: LD_VAR 0 5
50247: ST_TO_ADDR
// end ;
50248: LD_VAR 0 4
50252: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50253: LD_INT 0
50255: PPUSH
50256: PPUSH
50257: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50258: LD_VAR 0 1
50262: NOT
50263: PUSH
50264: LD_VAR 0 2
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: IN
50287: NOT
50288: OR
50289: IFFALSE 50293
// exit ;
50291: GO 50385
// tmp := [ ] ;
50293: LD_ADDR_VAR 0 5
50297: PUSH
50298: EMPTY
50299: ST_TO_ADDR
// for i in units do
50300: LD_ADDR_VAR 0 4
50304: PUSH
50305: LD_VAR 0 1
50309: PUSH
50310: FOR_IN
50311: IFFALSE 50354
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50313: LD_ADDR_VAR 0 5
50317: PUSH
50318: LD_VAR 0 5
50322: PPUSH
50323: LD_VAR 0 5
50327: PUSH
50328: LD_INT 1
50330: PLUS
50331: PPUSH
50332: LD_VAR 0 4
50336: PPUSH
50337: LD_VAR 0 2
50341: PPUSH
50342: CALL_OW 259
50346: PPUSH
50347: CALL_OW 2
50351: ST_TO_ADDR
50352: GO 50310
50354: POP
50355: POP
// if not tmp then
50356: LD_VAR 0 5
50360: NOT
50361: IFFALSE 50365
// exit ;
50363: GO 50385
// result := SortListByListDesc ( units , tmp ) ;
50365: LD_ADDR_VAR 0 3
50369: PUSH
50370: LD_VAR 0 1
50374: PPUSH
50375: LD_VAR 0 5
50379: PPUSH
50380: CALL_OW 77
50384: ST_TO_ADDR
// end ;
50385: LD_VAR 0 3
50389: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50390: LD_INT 0
50392: PPUSH
50393: PPUSH
50394: PPUSH
// result := false ;
50395: LD_ADDR_VAR 0 3
50399: PUSH
50400: LD_INT 0
50402: ST_TO_ADDR
// x := GetX ( building ) ;
50403: LD_ADDR_VAR 0 4
50407: PUSH
50408: LD_VAR 0 2
50412: PPUSH
50413: CALL_OW 250
50417: ST_TO_ADDR
// y := GetY ( building ) ;
50418: LD_ADDR_VAR 0 5
50422: PUSH
50423: LD_VAR 0 2
50427: PPUSH
50428: CALL_OW 251
50432: ST_TO_ADDR
// if not building or not x or not y then
50433: LD_VAR 0 2
50437: NOT
50438: PUSH
50439: LD_VAR 0 4
50443: NOT
50444: OR
50445: PUSH
50446: LD_VAR 0 5
50450: NOT
50451: OR
50452: IFFALSE 50456
// exit ;
50454: GO 50548
// if GetTaskList ( unit ) then
50456: LD_VAR 0 1
50460: PPUSH
50461: CALL_OW 437
50465: IFFALSE 50548
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50467: LD_STRING e
50469: PUSH
50470: LD_VAR 0 1
50474: PPUSH
50475: CALL_OW 437
50479: PUSH
50480: LD_INT 1
50482: ARRAY
50483: PUSH
50484: LD_INT 1
50486: ARRAY
50487: EQUAL
50488: PUSH
50489: LD_VAR 0 4
50493: PUSH
50494: LD_VAR 0 1
50498: PPUSH
50499: CALL_OW 437
50503: PUSH
50504: LD_INT 1
50506: ARRAY
50507: PUSH
50508: LD_INT 2
50510: ARRAY
50511: EQUAL
50512: AND
50513: PUSH
50514: LD_VAR 0 5
50518: PUSH
50519: LD_VAR 0 1
50523: PPUSH
50524: CALL_OW 437
50528: PUSH
50529: LD_INT 1
50531: ARRAY
50532: PUSH
50533: LD_INT 3
50535: ARRAY
50536: EQUAL
50537: AND
50538: IFFALSE 50548
// result := true end ;
50540: LD_ADDR_VAR 0 3
50544: PUSH
50545: LD_INT 1
50547: ST_TO_ADDR
// end ;
50548: LD_VAR 0 3
50552: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50553: LD_INT 0
50555: PPUSH
// result := false ;
50556: LD_ADDR_VAR 0 4
50560: PUSH
50561: LD_INT 0
50563: ST_TO_ADDR
// if GetTaskList ( unit ) then
50564: LD_VAR 0 1
50568: PPUSH
50569: CALL_OW 437
50573: IFFALSE 50656
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50575: LD_STRING M
50577: PUSH
50578: LD_VAR 0 1
50582: PPUSH
50583: CALL_OW 437
50587: PUSH
50588: LD_INT 1
50590: ARRAY
50591: PUSH
50592: LD_INT 1
50594: ARRAY
50595: EQUAL
50596: PUSH
50597: LD_VAR 0 2
50601: PUSH
50602: LD_VAR 0 1
50606: PPUSH
50607: CALL_OW 437
50611: PUSH
50612: LD_INT 1
50614: ARRAY
50615: PUSH
50616: LD_INT 2
50618: ARRAY
50619: EQUAL
50620: AND
50621: PUSH
50622: LD_VAR 0 3
50626: PUSH
50627: LD_VAR 0 1
50631: PPUSH
50632: CALL_OW 437
50636: PUSH
50637: LD_INT 1
50639: ARRAY
50640: PUSH
50641: LD_INT 3
50643: ARRAY
50644: EQUAL
50645: AND
50646: IFFALSE 50656
// result := true ;
50648: LD_ADDR_VAR 0 4
50652: PUSH
50653: LD_INT 1
50655: ST_TO_ADDR
// end ; end ;
50656: LD_VAR 0 4
50660: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50661: LD_INT 0
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
// if not unit or not area then
50667: LD_VAR 0 1
50671: NOT
50672: PUSH
50673: LD_VAR 0 2
50677: NOT
50678: OR
50679: IFFALSE 50683
// exit ;
50681: GO 50847
// tmp := AreaToList ( area , i ) ;
50683: LD_ADDR_VAR 0 6
50687: PUSH
50688: LD_VAR 0 2
50692: PPUSH
50693: LD_VAR 0 5
50697: PPUSH
50698: CALL_OW 517
50702: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50703: LD_ADDR_VAR 0 5
50707: PUSH
50708: DOUBLE
50709: LD_INT 1
50711: DEC
50712: ST_TO_ADDR
50713: LD_VAR 0 6
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PUSH
50722: FOR_TO
50723: IFFALSE 50845
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50725: LD_ADDR_VAR 0 7
50729: PUSH
50730: LD_VAR 0 6
50734: PUSH
50735: LD_INT 1
50737: ARRAY
50738: PUSH
50739: LD_VAR 0 5
50743: ARRAY
50744: PUSH
50745: LD_VAR 0 6
50749: PUSH
50750: LD_INT 2
50752: ARRAY
50753: PUSH
50754: LD_VAR 0 5
50758: ARRAY
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
50764: LD_VAR 0 7
50768: PUSH
50769: LD_INT 1
50771: ARRAY
50772: PPUSH
50773: LD_VAR 0 7
50777: PUSH
50778: LD_INT 2
50780: ARRAY
50781: PPUSH
50782: CALL_OW 428
50786: PUSH
50787: LD_INT 0
50789: EQUAL
50790: IFFALSE 50843
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50792: LD_VAR 0 1
50796: PPUSH
50797: LD_VAR 0 7
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: PPUSH
50806: LD_VAR 0 7
50810: PUSH
50811: LD_INT 2
50813: ARRAY
50814: PPUSH
50815: LD_VAR 0 3
50819: PPUSH
50820: CALL_OW 48
// result := IsPlaced ( unit ) ;
50824: LD_ADDR_VAR 0 4
50828: PUSH
50829: LD_VAR 0 1
50833: PPUSH
50834: CALL_OW 305
50838: ST_TO_ADDR
// exit ;
50839: POP
50840: POP
50841: GO 50847
// end ; end ;
50843: GO 50722
50845: POP
50846: POP
// end ;
50847: LD_VAR 0 4
50851: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50852: LD_INT 0
50854: PPUSH
50855: PPUSH
50856: PPUSH
// if not side or side > 8 then
50857: LD_VAR 0 1
50861: NOT
50862: PUSH
50863: LD_VAR 0 1
50867: PUSH
50868: LD_INT 8
50870: GREATER
50871: OR
50872: IFFALSE 50876
// exit ;
50874: GO 51063
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50876: LD_ADDR_VAR 0 4
50880: PUSH
50881: LD_INT 22
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 21
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PPUSH
50907: CALL_OW 69
50911: ST_TO_ADDR
// if not tmp then
50912: LD_VAR 0 4
50916: NOT
50917: IFFALSE 50921
// exit ;
50919: GO 51063
// enable_addtolog := true ;
50921: LD_ADDR_OWVAR 81
50925: PUSH
50926: LD_INT 1
50928: ST_TO_ADDR
// AddToLog ( [ ) ;
50929: LD_STRING [
50931: PPUSH
50932: CALL_OW 561
// for i in tmp do
50936: LD_ADDR_VAR 0 3
50940: PUSH
50941: LD_VAR 0 4
50945: PUSH
50946: FOR_IN
50947: IFFALSE 51054
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50949: LD_STRING [
50951: PUSH
50952: LD_VAR 0 3
50956: PPUSH
50957: CALL_OW 266
50961: STR
50962: PUSH
50963: LD_STRING , 
50965: STR
50966: PUSH
50967: LD_VAR 0 3
50971: PPUSH
50972: CALL_OW 250
50976: STR
50977: PUSH
50978: LD_STRING , 
50980: STR
50981: PUSH
50982: LD_VAR 0 3
50986: PPUSH
50987: CALL_OW 251
50991: STR
50992: PUSH
50993: LD_STRING , 
50995: STR
50996: PUSH
50997: LD_VAR 0 3
51001: PPUSH
51002: CALL_OW 254
51006: STR
51007: PUSH
51008: LD_STRING , 
51010: STR
51011: PUSH
51012: LD_VAR 0 3
51016: PPUSH
51017: LD_INT 1
51019: PPUSH
51020: CALL_OW 268
51024: STR
51025: PUSH
51026: LD_STRING , 
51028: STR
51029: PUSH
51030: LD_VAR 0 3
51034: PPUSH
51035: LD_INT 2
51037: PPUSH
51038: CALL_OW 268
51042: STR
51043: PUSH
51044: LD_STRING ],
51046: STR
51047: PPUSH
51048: CALL_OW 561
// end ;
51052: GO 50946
51054: POP
51055: POP
// AddToLog ( ]; ) ;
51056: LD_STRING ];
51058: PPUSH
51059: CALL_OW 561
// end ;
51063: LD_VAR 0 2
51067: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51068: LD_INT 0
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
// if not area or not rate or not max then
51075: LD_VAR 0 1
51079: NOT
51080: PUSH
51081: LD_VAR 0 2
51085: NOT
51086: OR
51087: PUSH
51088: LD_VAR 0 4
51092: NOT
51093: OR
51094: IFFALSE 51098
// exit ;
51096: GO 51290
// while 1 do
51098: LD_INT 1
51100: IFFALSE 51290
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51102: LD_ADDR_VAR 0 9
51106: PUSH
51107: LD_VAR 0 1
51111: PPUSH
51112: LD_INT 1
51114: PPUSH
51115: CALL_OW 287
51119: PUSH
51120: LD_INT 10
51122: MUL
51123: ST_TO_ADDR
// r := rate / 10 ;
51124: LD_ADDR_VAR 0 7
51128: PUSH
51129: LD_VAR 0 2
51133: PUSH
51134: LD_INT 10
51136: DIVREAL
51137: ST_TO_ADDR
// time := 1 1$00 ;
51138: LD_ADDR_VAR 0 8
51142: PUSH
51143: LD_INT 2100
51145: ST_TO_ADDR
// if amount < min then
51146: LD_VAR 0 9
51150: PUSH
51151: LD_VAR 0 3
51155: LESS
51156: IFFALSE 51174
// r := r * 2 else
51158: LD_ADDR_VAR 0 7
51162: PUSH
51163: LD_VAR 0 7
51167: PUSH
51168: LD_INT 2
51170: MUL
51171: ST_TO_ADDR
51172: GO 51200
// if amount > max then
51174: LD_VAR 0 9
51178: PUSH
51179: LD_VAR 0 4
51183: GREATER
51184: IFFALSE 51200
// r := r / 2 ;
51186: LD_ADDR_VAR 0 7
51190: PUSH
51191: LD_VAR 0 7
51195: PUSH
51196: LD_INT 2
51198: DIVREAL
51199: ST_TO_ADDR
// time := time / r ;
51200: LD_ADDR_VAR 0 8
51204: PUSH
51205: LD_VAR 0 8
51209: PUSH
51210: LD_VAR 0 7
51214: DIVREAL
51215: ST_TO_ADDR
// if time < 0 then
51216: LD_VAR 0 8
51220: PUSH
51221: LD_INT 0
51223: LESS
51224: IFFALSE 51241
// time := time * - 1 ;
51226: LD_ADDR_VAR 0 8
51230: PUSH
51231: LD_VAR 0 8
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: MUL
51240: ST_TO_ADDR
// wait ( time ) ;
51241: LD_VAR 0 8
51245: PPUSH
51246: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
51250: LD_INT 35
51252: PPUSH
51253: LD_INT 875
51255: PPUSH
51256: CALL_OW 12
51260: PPUSH
51261: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51265: LD_INT 1
51267: PPUSH
51268: LD_INT 5
51270: PPUSH
51271: CALL_OW 12
51275: PPUSH
51276: LD_VAR 0 1
51280: PPUSH
51281: LD_INT 1
51283: PPUSH
51284: CALL_OW 55
// end ;
51288: GO 51098
// end ;
51290: LD_VAR 0 5
51294: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51295: LD_INT 0
51297: PPUSH
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
// if not turrets or not factories then
51305: LD_VAR 0 1
51309: NOT
51310: PUSH
51311: LD_VAR 0 2
51315: NOT
51316: OR
51317: IFFALSE 51321
// exit ;
51319: GO 51628
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51321: LD_ADDR_VAR 0 10
51325: PUSH
51326: LD_INT 5
51328: PUSH
51329: LD_INT 6
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: LD_INT 5
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 24
51363: PUSH
51364: LD_INT 25
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 23
51373: PUSH
51374: LD_INT 27
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 42
51387: PUSH
51388: LD_INT 43
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 44
51397: PUSH
51398: LD_INT 46
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 45
51407: PUSH
51408: LD_INT 47
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: ST_TO_ADDR
// result := [ ] ;
51425: LD_ADDR_VAR 0 3
51429: PUSH
51430: EMPTY
51431: ST_TO_ADDR
// for i in turrets do
51432: LD_ADDR_VAR 0 4
51436: PUSH
51437: LD_VAR 0 1
51441: PUSH
51442: FOR_IN
51443: IFFALSE 51626
// begin nat := GetNation ( i ) ;
51445: LD_ADDR_VAR 0 7
51449: PUSH
51450: LD_VAR 0 4
51454: PPUSH
51455: CALL_OW 248
51459: ST_TO_ADDR
// weapon := 0 ;
51460: LD_ADDR_VAR 0 8
51464: PUSH
51465: LD_INT 0
51467: ST_TO_ADDR
// if not nat then
51468: LD_VAR 0 7
51472: NOT
51473: IFFALSE 51477
// continue ;
51475: GO 51442
// for j in list [ nat ] do
51477: LD_ADDR_VAR 0 5
51481: PUSH
51482: LD_VAR 0 10
51486: PUSH
51487: LD_VAR 0 7
51491: ARRAY
51492: PUSH
51493: FOR_IN
51494: IFFALSE 51535
// if GetBWeapon ( i ) = j [ 1 ] then
51496: LD_VAR 0 4
51500: PPUSH
51501: CALL_OW 269
51505: PUSH
51506: LD_VAR 0 5
51510: PUSH
51511: LD_INT 1
51513: ARRAY
51514: EQUAL
51515: IFFALSE 51533
// begin weapon := j [ 2 ] ;
51517: LD_ADDR_VAR 0 8
51521: PUSH
51522: LD_VAR 0 5
51526: PUSH
51527: LD_INT 2
51529: ARRAY
51530: ST_TO_ADDR
// break ;
51531: GO 51535
// end ;
51533: GO 51493
51535: POP
51536: POP
// if not weapon then
51537: LD_VAR 0 8
51541: NOT
51542: IFFALSE 51546
// continue ;
51544: GO 51442
// for k in factories do
51546: LD_ADDR_VAR 0 6
51550: PUSH
51551: LD_VAR 0 2
51555: PUSH
51556: FOR_IN
51557: IFFALSE 51622
// begin weapons := AvailableWeaponList ( k ) ;
51559: LD_ADDR_VAR 0 9
51563: PUSH
51564: LD_VAR 0 6
51568: PPUSH
51569: CALL_OW 478
51573: ST_TO_ADDR
// if not weapons then
51574: LD_VAR 0 9
51578: NOT
51579: IFFALSE 51583
// continue ;
51581: GO 51556
// if weapon in weapons then
51583: LD_VAR 0 8
51587: PUSH
51588: LD_VAR 0 9
51592: IN
51593: IFFALSE 51620
// begin result := [ i , weapon ] ;
51595: LD_ADDR_VAR 0 3
51599: PUSH
51600: LD_VAR 0 4
51604: PUSH
51605: LD_VAR 0 8
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// exit ;
51614: POP
51615: POP
51616: POP
51617: POP
51618: GO 51628
// end ; end ;
51620: GO 51556
51622: POP
51623: POP
// end ;
51624: GO 51442
51626: POP
51627: POP
// end ;
51628: LD_VAR 0 3
51632: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51633: LD_INT 0
51635: PPUSH
// if not side or side > 8 then
51636: LD_VAR 0 3
51640: NOT
51641: PUSH
51642: LD_VAR 0 3
51646: PUSH
51647: LD_INT 8
51649: GREATER
51650: OR
51651: IFFALSE 51655
// exit ;
51653: GO 51714
// if not range then
51655: LD_VAR 0 4
51659: NOT
51660: IFFALSE 51671
// range := - 12 ;
51662: LD_ADDR_VAR 0 4
51666: PUSH
51667: LD_INT 12
51669: NEG
51670: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51671: LD_VAR 0 1
51675: PPUSH
51676: LD_VAR 0 2
51680: PPUSH
51681: LD_VAR 0 3
51685: PPUSH
51686: LD_VAR 0 4
51690: PPUSH
51691: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51695: LD_VAR 0 1
51699: PPUSH
51700: LD_VAR 0 2
51704: PPUSH
51705: LD_VAR 0 3
51709: PPUSH
51710: CALL_OW 331
// end ;
51714: LD_VAR 0 5
51718: RET
// export function Video ( mode ) ; begin
51719: LD_INT 0
51721: PPUSH
// ingame_video = mode ;
51722: LD_ADDR_OWVAR 52
51726: PUSH
51727: LD_VAR 0 1
51731: ST_TO_ADDR
// interface_hidden = mode ;
51732: LD_ADDR_OWVAR 54
51736: PUSH
51737: LD_VAR 0 1
51741: ST_TO_ADDR
// end ;
51742: LD_VAR 0 2
51746: RET
// export function Join ( array , element ) ; begin
51747: LD_INT 0
51749: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51750: LD_ADDR_VAR 0 3
51754: PUSH
51755: LD_VAR 0 1
51759: PPUSH
51760: LD_VAR 0 1
51764: PUSH
51765: LD_INT 1
51767: PLUS
51768: PPUSH
51769: LD_VAR 0 2
51773: PPUSH
51774: CALL_OW 1
51778: ST_TO_ADDR
// end ;
51779: LD_VAR 0 3
51783: RET
// export function JoinUnion ( array , element ) ; begin
51784: LD_INT 0
51786: PPUSH
// result := array union element ;
51787: LD_ADDR_VAR 0 3
51791: PUSH
51792: LD_VAR 0 1
51796: PUSH
51797: LD_VAR 0 2
51801: UNION
51802: ST_TO_ADDR
// end ;
51803: LD_VAR 0 3
51807: RET
// export function GetBehemoths ( side ) ; begin
51808: LD_INT 0
51810: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
51811: LD_ADDR_VAR 0 2
51815: PUSH
51816: LD_INT 22
51818: PUSH
51819: LD_VAR 0 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 31
51830: PUSH
51831: LD_INT 25
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PPUSH
51842: CALL_OW 69
51846: ST_TO_ADDR
// end ;
51847: LD_VAR 0 2
51851: RET
// export function Shuffle ( array ) ; var i , index ; begin
51852: LD_INT 0
51854: PPUSH
51855: PPUSH
51856: PPUSH
// result := [ ] ;
51857: LD_ADDR_VAR 0 2
51861: PUSH
51862: EMPTY
51863: ST_TO_ADDR
// if not array then
51864: LD_VAR 0 1
51868: NOT
51869: IFFALSE 51873
// exit ;
51871: GO 51972
// Randomize ;
51873: CALL_OW 10
// for i = array downto 1 do
51877: LD_ADDR_VAR 0 3
51881: PUSH
51882: DOUBLE
51883: LD_VAR 0 1
51887: INC
51888: ST_TO_ADDR
51889: LD_INT 1
51891: PUSH
51892: FOR_DOWNTO
51893: IFFALSE 51970
// begin index := rand ( 1 , array ) ;
51895: LD_ADDR_VAR 0 4
51899: PUSH
51900: LD_INT 1
51902: PPUSH
51903: LD_VAR 0 1
51907: PPUSH
51908: CALL_OW 12
51912: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51913: LD_ADDR_VAR 0 2
51917: PUSH
51918: LD_VAR 0 2
51922: PPUSH
51923: LD_VAR 0 2
51927: PUSH
51928: LD_INT 1
51930: PLUS
51931: PPUSH
51932: LD_VAR 0 1
51936: PUSH
51937: LD_VAR 0 4
51941: ARRAY
51942: PPUSH
51943: CALL_OW 2
51947: ST_TO_ADDR
// array := Delete ( array , index ) ;
51948: LD_ADDR_VAR 0 1
51952: PUSH
51953: LD_VAR 0 1
51957: PPUSH
51958: LD_VAR 0 4
51962: PPUSH
51963: CALL_OW 3
51967: ST_TO_ADDR
// end ;
51968: GO 51892
51970: POP
51971: POP
// end ;
51972: LD_VAR 0 2
51976: RET
// export function GetBaseMaterials ( base ) ; begin
51977: LD_INT 0
51979: PPUSH
// result := [ 0 , 0 , 0 ] ;
51980: LD_ADDR_VAR 0 2
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// if not base then
51999: LD_VAR 0 1
52003: NOT
52004: IFFALSE 52008
// exit ;
52006: GO 52057
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52008: LD_ADDR_VAR 0 2
52012: PUSH
52013: LD_VAR 0 1
52017: PPUSH
52018: LD_INT 1
52020: PPUSH
52021: CALL_OW 275
52025: PUSH
52026: LD_VAR 0 1
52030: PPUSH
52031: LD_INT 2
52033: PPUSH
52034: CALL_OW 275
52038: PUSH
52039: LD_VAR 0 1
52043: PPUSH
52044: LD_INT 3
52046: PPUSH
52047: CALL_OW 275
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// end ;
52057: LD_VAR 0 2
52061: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52062: LD_INT 0
52064: PPUSH
52065: PPUSH
// result := array ;
52066: LD_ADDR_VAR 0 3
52070: PUSH
52071: LD_VAR 0 1
52075: ST_TO_ADDR
// if size > 0 then
52076: LD_VAR 0 2
52080: PUSH
52081: LD_INT 0
52083: GREATER
52084: IFFALSE 52130
// for i := array downto size do
52086: LD_ADDR_VAR 0 4
52090: PUSH
52091: DOUBLE
52092: LD_VAR 0 1
52096: INC
52097: ST_TO_ADDR
52098: LD_VAR 0 2
52102: PUSH
52103: FOR_DOWNTO
52104: IFFALSE 52128
// result := Delete ( result , result ) ;
52106: LD_ADDR_VAR 0 3
52110: PUSH
52111: LD_VAR 0 3
52115: PPUSH
52116: LD_VAR 0 3
52120: PPUSH
52121: CALL_OW 3
52125: ST_TO_ADDR
52126: GO 52103
52128: POP
52129: POP
// end ;
52130: LD_VAR 0 3
52134: RET
// export function ComExit ( unit ) ; var tmp ; begin
52135: LD_INT 0
52137: PPUSH
52138: PPUSH
// if not IsInUnit ( unit ) then
52139: LD_VAR 0 1
52143: PPUSH
52144: CALL_OW 310
52148: NOT
52149: IFFALSE 52153
// exit ;
52151: GO 52213
// tmp := IsInUnit ( unit ) ;
52153: LD_ADDR_VAR 0 3
52157: PUSH
52158: LD_VAR 0 1
52162: PPUSH
52163: CALL_OW 310
52167: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52168: LD_VAR 0 3
52172: PPUSH
52173: CALL_OW 247
52177: PUSH
52178: LD_INT 2
52180: EQUAL
52181: IFFALSE 52194
// ComExitVehicle ( unit ) else
52183: LD_VAR 0 1
52187: PPUSH
52188: CALL_OW 121
52192: GO 52203
// ComExitBuilding ( unit ) ;
52194: LD_VAR 0 1
52198: PPUSH
52199: CALL_OW 122
// result := tmp ;
52203: LD_ADDR_VAR 0 2
52207: PUSH
52208: LD_VAR 0 3
52212: ST_TO_ADDR
// end ;
52213: LD_VAR 0 2
52217: RET
// export function ComExitAll ( units ) ; var i ; begin
52218: LD_INT 0
52220: PPUSH
52221: PPUSH
// if not units then
52222: LD_VAR 0 1
52226: NOT
52227: IFFALSE 52231
// exit ;
52229: GO 52257
// for i in units do
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_VAR 0 1
52240: PUSH
52241: FOR_IN
52242: IFFALSE 52255
// ComExit ( i ) ;
52244: LD_VAR 0 3
52248: PPUSH
52249: CALL 52135 0 1
52253: GO 52241
52255: POP
52256: POP
// end ;
52257: LD_VAR 0 2
52261: RET
// export function ResetHc ; begin
52262: LD_INT 0
52264: PPUSH
// InitHc ;
52265: CALL_OW 19
// hc_importance := 0 ;
52269: LD_ADDR_OWVAR 32
52273: PUSH
52274: LD_INT 0
52276: ST_TO_ADDR
// end ;
52277: LD_VAR 0 1
52281: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52282: LD_INT 0
52284: PPUSH
52285: PPUSH
52286: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52287: LD_ADDR_VAR 0 6
52291: PUSH
52292: LD_VAR 0 1
52296: PUSH
52297: LD_VAR 0 3
52301: PLUS
52302: PUSH
52303: LD_INT 2
52305: DIV
52306: ST_TO_ADDR
// if _x < 0 then
52307: LD_VAR 0 6
52311: PUSH
52312: LD_INT 0
52314: LESS
52315: IFFALSE 52332
// _x := _x * - 1 ;
52317: LD_ADDR_VAR 0 6
52321: PUSH
52322: LD_VAR 0 6
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: MUL
52331: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52332: LD_ADDR_VAR 0 7
52336: PUSH
52337: LD_VAR 0 2
52341: PUSH
52342: LD_VAR 0 4
52346: PLUS
52347: PUSH
52348: LD_INT 2
52350: DIV
52351: ST_TO_ADDR
// if _y < 0 then
52352: LD_VAR 0 7
52356: PUSH
52357: LD_INT 0
52359: LESS
52360: IFFALSE 52377
// _y := _y * - 1 ;
52362: LD_ADDR_VAR 0 7
52366: PUSH
52367: LD_VAR 0 7
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: MUL
52376: ST_TO_ADDR
// result := [ _x , _y ] ;
52377: LD_ADDR_VAR 0 5
52381: PUSH
52382: LD_VAR 0 6
52386: PUSH
52387: LD_VAR 0 7
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// end ;
52396: LD_VAR 0 5
52400: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52401: LD_INT 0
52403: PPUSH
52404: PPUSH
52405: PPUSH
52406: PPUSH
// task := GetTaskList ( unit ) ;
52407: LD_ADDR_VAR 0 7
52411: PUSH
52412: LD_VAR 0 1
52416: PPUSH
52417: CALL_OW 437
52421: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52422: LD_VAR 0 7
52426: NOT
52427: PUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: LD_VAR 0 2
52437: PPUSH
52438: CALL_OW 308
52442: NOT
52443: AND
52444: IFFALSE 52448
// exit ;
52446: GO 52566
// if IsInArea ( unit , area ) then
52448: LD_VAR 0 1
52452: PPUSH
52453: LD_VAR 0 2
52457: PPUSH
52458: CALL_OW 308
52462: IFFALSE 52480
// begin ComMoveToArea ( unit , goAway ) ;
52464: LD_VAR 0 1
52468: PPUSH
52469: LD_VAR 0 3
52473: PPUSH
52474: CALL_OW 113
// exit ;
52478: GO 52566
// end ; if task [ 1 ] [ 1 ] <> M then
52480: LD_VAR 0 7
52484: PUSH
52485: LD_INT 1
52487: ARRAY
52488: PUSH
52489: LD_INT 1
52491: ARRAY
52492: PUSH
52493: LD_STRING M
52495: NONEQUAL
52496: IFFALSE 52500
// exit ;
52498: GO 52566
// x := task [ 1 ] [ 2 ] ;
52500: LD_ADDR_VAR 0 5
52504: PUSH
52505: LD_VAR 0 7
52509: PUSH
52510: LD_INT 1
52512: ARRAY
52513: PUSH
52514: LD_INT 2
52516: ARRAY
52517: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52518: LD_ADDR_VAR 0 6
52522: PUSH
52523: LD_VAR 0 7
52527: PUSH
52528: LD_INT 1
52530: ARRAY
52531: PUSH
52532: LD_INT 3
52534: ARRAY
52535: ST_TO_ADDR
// if InArea ( x , y , area ) then
52536: LD_VAR 0 5
52540: PPUSH
52541: LD_VAR 0 6
52545: PPUSH
52546: LD_VAR 0 2
52550: PPUSH
52551: CALL_OW 309
52555: IFFALSE 52566
// ComStop ( unit ) ;
52557: LD_VAR 0 1
52561: PPUSH
52562: CALL_OW 141
// end ;
52566: LD_VAR 0 4
52570: RET
// export function Abs ( value ) ; begin
52571: LD_INT 0
52573: PPUSH
// result := value ;
52574: LD_ADDR_VAR 0 2
52578: PUSH
52579: LD_VAR 0 1
52583: ST_TO_ADDR
// if value < 0 then
52584: LD_VAR 0 1
52588: PUSH
52589: LD_INT 0
52591: LESS
52592: IFFALSE 52609
// result := value * - 1 ;
52594: LD_ADDR_VAR 0 2
52598: PUSH
52599: LD_VAR 0 1
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: MUL
52608: ST_TO_ADDR
// end ;
52609: LD_VAR 0 2
52613: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52614: LD_INT 0
52616: PPUSH
52617: PPUSH
52618: PPUSH
52619: PPUSH
52620: PPUSH
52621: PPUSH
52622: PPUSH
52623: PPUSH
// if not unit or not building then
52624: LD_VAR 0 1
52628: NOT
52629: PUSH
52630: LD_VAR 0 2
52634: NOT
52635: OR
52636: IFFALSE 52640
// exit ;
52638: GO 52866
// x := GetX ( building ) ;
52640: LD_ADDR_VAR 0 4
52644: PUSH
52645: LD_VAR 0 2
52649: PPUSH
52650: CALL_OW 250
52654: ST_TO_ADDR
// y := GetY ( building ) ;
52655: LD_ADDR_VAR 0 6
52659: PUSH
52660: LD_VAR 0 2
52664: PPUSH
52665: CALL_OW 251
52669: ST_TO_ADDR
// d := GetDir ( building ) ;
52670: LD_ADDR_VAR 0 8
52674: PUSH
52675: LD_VAR 0 2
52679: PPUSH
52680: CALL_OW 254
52684: ST_TO_ADDR
// r := 4 ;
52685: LD_ADDR_VAR 0 9
52689: PUSH
52690: LD_INT 4
52692: ST_TO_ADDR
// for i := 1 to 5 do
52693: LD_ADDR_VAR 0 10
52697: PUSH
52698: DOUBLE
52699: LD_INT 1
52701: DEC
52702: ST_TO_ADDR
52703: LD_INT 5
52705: PUSH
52706: FOR_TO
52707: IFFALSE 52864
// begin _x := ShiftX ( x , d , r + i ) ;
52709: LD_ADDR_VAR 0 5
52713: PUSH
52714: LD_VAR 0 4
52718: PPUSH
52719: LD_VAR 0 8
52723: PPUSH
52724: LD_VAR 0 9
52728: PUSH
52729: LD_VAR 0 10
52733: PLUS
52734: PPUSH
52735: CALL_OW 272
52739: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52740: LD_ADDR_VAR 0 7
52744: PUSH
52745: LD_VAR 0 6
52749: PPUSH
52750: LD_VAR 0 8
52754: PPUSH
52755: LD_VAR 0 9
52759: PUSH
52760: LD_VAR 0 10
52764: PLUS
52765: PPUSH
52766: CALL_OW 273
52770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52771: LD_VAR 0 5
52775: PPUSH
52776: LD_VAR 0 7
52780: PPUSH
52781: CALL_OW 488
52785: PUSH
52786: LD_VAR 0 5
52790: PPUSH
52791: LD_VAR 0 7
52795: PPUSH
52796: CALL_OW 428
52800: PPUSH
52801: CALL_OW 247
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: IN
52816: NOT
52817: AND
52818: IFFALSE 52862
// begin ComMoveXY ( unit , _x , _y ) ;
52820: LD_VAR 0 1
52824: PPUSH
52825: LD_VAR 0 5
52829: PPUSH
52830: LD_VAR 0 7
52834: PPUSH
52835: CALL_OW 111
// result := [ _x , _y ] ;
52839: LD_ADDR_VAR 0 3
52843: PUSH
52844: LD_VAR 0 5
52848: PUSH
52849: LD_VAR 0 7
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: ST_TO_ADDR
// exit ;
52858: POP
52859: POP
52860: GO 52866
// end ; end ;
52862: GO 52706
52864: POP
52865: POP
// end ;
52866: LD_VAR 0 3
52870: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52871: LD_INT 0
52873: PPUSH
52874: PPUSH
52875: PPUSH
// result := 0 ;
52876: LD_ADDR_VAR 0 3
52880: PUSH
52881: LD_INT 0
52883: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52884: LD_VAR 0 1
52888: PUSH
52889: LD_INT 0
52891: LESS
52892: PUSH
52893: LD_VAR 0 1
52897: PUSH
52898: LD_INT 8
52900: GREATER
52901: OR
52902: PUSH
52903: LD_VAR 0 2
52907: PUSH
52908: LD_INT 0
52910: LESS
52911: OR
52912: PUSH
52913: LD_VAR 0 2
52917: PUSH
52918: LD_INT 8
52920: GREATER
52921: OR
52922: IFFALSE 52926
// exit ;
52924: GO 53001
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52926: LD_ADDR_VAR 0 4
52930: PUSH
52931: LD_INT 22
52933: PUSH
52934: LD_VAR 0 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PPUSH
52943: CALL_OW 69
52947: PUSH
52948: FOR_IN
52949: IFFALSE 52999
// begin un := UnitShoot ( i ) ;
52951: LD_ADDR_VAR 0 5
52955: PUSH
52956: LD_VAR 0 4
52960: PPUSH
52961: CALL_OW 504
52965: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52966: LD_VAR 0 5
52970: PPUSH
52971: CALL_OW 255
52975: PUSH
52976: LD_VAR 0 1
52980: EQUAL
52981: IFFALSE 52997
// begin result := un ;
52983: LD_ADDR_VAR 0 3
52987: PUSH
52988: LD_VAR 0 5
52992: ST_TO_ADDR
// exit ;
52993: POP
52994: POP
52995: GO 53001
// end ; end ;
52997: GO 52948
52999: POP
53000: POP
// end ;
53001: LD_VAR 0 3
53005: RET
// export function GetCargoBay ( units ) ; begin
53006: LD_INT 0
53008: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53009: LD_ADDR_VAR 0 2
53013: PUSH
53014: LD_VAR 0 1
53018: PPUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 34
53024: PUSH
53025: LD_INT 12
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 34
53034: PUSH
53035: LD_INT 51
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 34
53044: PUSH
53045: LD_INT 32
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 34
53054: PUSH
53055: LD_EXP 100
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: PPUSH
53071: CALL_OW 72
53075: ST_TO_ADDR
// end ;
53076: LD_VAR 0 2
53080: RET
// export function Negate ( value ) ; begin
53081: LD_INT 0
53083: PPUSH
// result := not value ;
53084: LD_ADDR_VAR 0 2
53088: PUSH
53089: LD_VAR 0 1
53093: NOT
53094: ST_TO_ADDR
// end ;
53095: LD_VAR 0 2
53099: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
53100: LD_INT 0
53102: PPUSH
// if x1 = x2 then
53103: LD_VAR 0 1
53107: PUSH
53108: LD_VAR 0 3
53112: EQUAL
53113: IFFALSE 53147
// begin if y1 > y2 then
53115: LD_VAR 0 2
53119: PUSH
53120: LD_VAR 0 4
53124: GREATER
53125: IFFALSE 53137
// result := 0 else
53127: LD_ADDR_VAR 0 5
53131: PUSH
53132: LD_INT 0
53134: ST_TO_ADDR
53135: GO 53145
// result := 3 ;
53137: LD_ADDR_VAR 0 5
53141: PUSH
53142: LD_INT 3
53144: ST_TO_ADDR
// exit ;
53145: GO 53233
// end ; if y1 = y2 then
53147: LD_VAR 0 2
53151: PUSH
53152: LD_VAR 0 4
53156: EQUAL
53157: IFFALSE 53191
// begin if x1 > x2 then
53159: LD_VAR 0 1
53163: PUSH
53164: LD_VAR 0 3
53168: GREATER
53169: IFFALSE 53181
// result := 1 else
53171: LD_ADDR_VAR 0 5
53175: PUSH
53176: LD_INT 1
53178: ST_TO_ADDR
53179: GO 53189
// result := 4 ;
53181: LD_ADDR_VAR 0 5
53185: PUSH
53186: LD_INT 4
53188: ST_TO_ADDR
// exit ;
53189: GO 53233
// end ; if x1 > x2 and y1 > y2 then
53191: LD_VAR 0 1
53195: PUSH
53196: LD_VAR 0 3
53200: GREATER
53201: PUSH
53202: LD_VAR 0 2
53206: PUSH
53207: LD_VAR 0 4
53211: GREATER
53212: AND
53213: IFFALSE 53225
// result := 2 else
53215: LD_ADDR_VAR 0 5
53219: PUSH
53220: LD_INT 2
53222: ST_TO_ADDR
53223: GO 53233
// result := 5 ;
53225: LD_ADDR_VAR 0 5
53229: PUSH
53230: LD_INT 5
53232: ST_TO_ADDR
// end ;
53233: LD_VAR 0 5
53237: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53238: LD_INT 0
53240: PPUSH
53241: PPUSH
// if not driver or not IsInUnit ( driver ) then
53242: LD_VAR 0 1
53246: NOT
53247: PUSH
53248: LD_VAR 0 1
53252: PPUSH
53253: CALL_OW 310
53257: NOT
53258: OR
53259: IFFALSE 53263
// exit ;
53261: GO 53353
// vehicle := IsInUnit ( driver ) ;
53263: LD_ADDR_VAR 0 3
53267: PUSH
53268: LD_VAR 0 1
53272: PPUSH
53273: CALL_OW 310
53277: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53278: LD_VAR 0 1
53282: PPUSH
53283: LD_STRING \
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: PUSH
53313: LD_STRING E
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_VAR 0 3
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PPUSH
53349: CALL_OW 446
// end ;
53353: LD_VAR 0 2
53357: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53358: LD_INT 0
53360: PPUSH
53361: PPUSH
// if not driver or not IsInUnit ( driver ) then
53362: LD_VAR 0 1
53366: NOT
53367: PUSH
53368: LD_VAR 0 1
53372: PPUSH
53373: CALL_OW 310
53377: NOT
53378: OR
53379: IFFALSE 53383
// exit ;
53381: GO 53473
// vehicle := IsInUnit ( driver ) ;
53383: LD_ADDR_VAR 0 3
53387: PUSH
53388: LD_VAR 0 1
53392: PPUSH
53393: CALL_OW 310
53397: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53398: LD_VAR 0 1
53402: PPUSH
53403: LD_STRING \
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: PUSH
53433: LD_STRING E
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_VAR 0 3
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PPUSH
53469: CALL_OW 447
// end ;
53473: LD_VAR 0 2
53477: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53478: LD_INT 0
53480: PPUSH
53481: PPUSH
53482: PPUSH
// tmp := [ ] ;
53483: LD_ADDR_VAR 0 5
53487: PUSH
53488: EMPTY
53489: ST_TO_ADDR
// for i in units do
53490: LD_ADDR_VAR 0 4
53494: PUSH
53495: LD_VAR 0 1
53499: PUSH
53500: FOR_IN
53501: IFFALSE 53539
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53503: LD_ADDR_VAR 0 5
53507: PUSH
53508: LD_VAR 0 5
53512: PPUSH
53513: LD_VAR 0 5
53517: PUSH
53518: LD_INT 1
53520: PLUS
53521: PPUSH
53522: LD_VAR 0 4
53526: PPUSH
53527: CALL_OW 256
53531: PPUSH
53532: CALL_OW 2
53536: ST_TO_ADDR
53537: GO 53500
53539: POP
53540: POP
// if not tmp then
53541: LD_VAR 0 5
53545: NOT
53546: IFFALSE 53550
// exit ;
53548: GO 53598
// if asc then
53550: LD_VAR 0 2
53554: IFFALSE 53578
// result := SortListByListAsc ( units , tmp ) else
53556: LD_ADDR_VAR 0 3
53560: PUSH
53561: LD_VAR 0 1
53565: PPUSH
53566: LD_VAR 0 5
53570: PPUSH
53571: CALL_OW 76
53575: ST_TO_ADDR
53576: GO 53598
// result := SortListByListDesc ( units , tmp ) ;
53578: LD_ADDR_VAR 0 3
53582: PUSH
53583: LD_VAR 0 1
53587: PPUSH
53588: LD_VAR 0 5
53592: PPUSH
53593: CALL_OW 77
53597: ST_TO_ADDR
// end ;
53598: LD_VAR 0 3
53602: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53603: LD_INT 0
53605: PPUSH
53606: PPUSH
// task := GetTaskList ( mech ) ;
53607: LD_ADDR_VAR 0 4
53611: PUSH
53612: LD_VAR 0 1
53616: PPUSH
53617: CALL_OW 437
53621: ST_TO_ADDR
// if not task then
53622: LD_VAR 0 4
53626: NOT
53627: IFFALSE 53631
// exit ;
53629: GO 53673
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53631: LD_ADDR_VAR 0 3
53635: PUSH
53636: LD_VAR 0 4
53640: PUSH
53641: LD_INT 1
53643: ARRAY
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: PUSH
53649: LD_STRING r
53651: EQUAL
53652: PUSH
53653: LD_VAR 0 4
53657: PUSH
53658: LD_INT 1
53660: ARRAY
53661: PUSH
53662: LD_INT 4
53664: ARRAY
53665: PUSH
53666: LD_VAR 0 2
53670: EQUAL
53671: AND
53672: ST_TO_ADDR
// end ;
53673: LD_VAR 0 3
53677: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53678: LD_INT 0
53680: PPUSH
// SetDir ( unit , d ) ;
53681: LD_VAR 0 1
53685: PPUSH
53686: LD_VAR 0 4
53690: PPUSH
53691: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53695: LD_VAR 0 1
53699: PPUSH
53700: LD_VAR 0 2
53704: PPUSH
53705: LD_VAR 0 3
53709: PPUSH
53710: LD_VAR 0 5
53714: PPUSH
53715: CALL_OW 48
// end ;
53719: LD_VAR 0 6
53723: RET
// export function ToNaturalNumber ( number ) ; begin
53724: LD_INT 0
53726: PPUSH
// result := number div 1 ;
53727: LD_ADDR_VAR 0 2
53731: PUSH
53732: LD_VAR 0 1
53736: PUSH
53737: LD_INT 1
53739: DIV
53740: ST_TO_ADDR
// if number < 0 then
53741: LD_VAR 0 1
53745: PUSH
53746: LD_INT 0
53748: LESS
53749: IFFALSE 53759
// result := 0 ;
53751: LD_ADDR_VAR 0 2
53755: PUSH
53756: LD_INT 0
53758: ST_TO_ADDR
// end ;
53759: LD_VAR 0 2
53763: RET
// export function SortByClass ( units , class ) ; var un ; begin
53764: LD_INT 0
53766: PPUSH
53767: PPUSH
// if not units or not class then
53768: LD_VAR 0 1
53772: NOT
53773: PUSH
53774: LD_VAR 0 2
53778: NOT
53779: OR
53780: IFFALSE 53784
// exit ;
53782: GO 53879
// result := [ ] ;
53784: LD_ADDR_VAR 0 3
53788: PUSH
53789: EMPTY
53790: ST_TO_ADDR
// for un in units do
53791: LD_ADDR_VAR 0 4
53795: PUSH
53796: LD_VAR 0 1
53800: PUSH
53801: FOR_IN
53802: IFFALSE 53877
// if GetClass ( un ) = class then
53804: LD_VAR 0 4
53808: PPUSH
53809: CALL_OW 257
53813: PUSH
53814: LD_VAR 0 2
53818: EQUAL
53819: IFFALSE 53846
// result := Insert ( result , 1 , un ) else
53821: LD_ADDR_VAR 0 3
53825: PUSH
53826: LD_VAR 0 3
53830: PPUSH
53831: LD_INT 1
53833: PPUSH
53834: LD_VAR 0 4
53838: PPUSH
53839: CALL_OW 2
53843: ST_TO_ADDR
53844: GO 53875
// result := Replace ( result , result + 1 , un ) ;
53846: LD_ADDR_VAR 0 3
53850: PUSH
53851: LD_VAR 0 3
53855: PPUSH
53856: LD_VAR 0 3
53860: PUSH
53861: LD_INT 1
53863: PLUS
53864: PPUSH
53865: LD_VAR 0 4
53869: PPUSH
53870: CALL_OW 1
53874: ST_TO_ADDR
53875: GO 53801
53877: POP
53878: POP
// end ;
53879: LD_VAR 0 3
53883: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53884: LD_INT 0
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
// result := [ ] ;
53893: LD_ADDR_VAR 0 4
53897: PUSH
53898: EMPTY
53899: ST_TO_ADDR
// if x - r < 0 then
53900: LD_VAR 0 1
53904: PUSH
53905: LD_VAR 0 3
53909: MINUS
53910: PUSH
53911: LD_INT 0
53913: LESS
53914: IFFALSE 53926
// min_x := 0 else
53916: LD_ADDR_VAR 0 8
53920: PUSH
53921: LD_INT 0
53923: ST_TO_ADDR
53924: GO 53942
// min_x := x - r ;
53926: LD_ADDR_VAR 0 8
53930: PUSH
53931: LD_VAR 0 1
53935: PUSH
53936: LD_VAR 0 3
53940: MINUS
53941: ST_TO_ADDR
// if y - r < 0 then
53942: LD_VAR 0 2
53946: PUSH
53947: LD_VAR 0 3
53951: MINUS
53952: PUSH
53953: LD_INT 0
53955: LESS
53956: IFFALSE 53968
// min_y := 0 else
53958: LD_ADDR_VAR 0 7
53962: PUSH
53963: LD_INT 0
53965: ST_TO_ADDR
53966: GO 53984
// min_y := y - r ;
53968: LD_ADDR_VAR 0 7
53972: PUSH
53973: LD_VAR 0 2
53977: PUSH
53978: LD_VAR 0 3
53982: MINUS
53983: ST_TO_ADDR
// max_x := x + r ;
53984: LD_ADDR_VAR 0 9
53988: PUSH
53989: LD_VAR 0 1
53993: PUSH
53994: LD_VAR 0 3
53998: PLUS
53999: ST_TO_ADDR
// max_y := y + r ;
54000: LD_ADDR_VAR 0 10
54004: PUSH
54005: LD_VAR 0 2
54009: PUSH
54010: LD_VAR 0 3
54014: PLUS
54015: ST_TO_ADDR
// for _x = min_x to max_x do
54016: LD_ADDR_VAR 0 5
54020: PUSH
54021: DOUBLE
54022: LD_VAR 0 8
54026: DEC
54027: ST_TO_ADDR
54028: LD_VAR 0 9
54032: PUSH
54033: FOR_TO
54034: IFFALSE 54135
// for _y = min_y to max_y do
54036: LD_ADDR_VAR 0 6
54040: PUSH
54041: DOUBLE
54042: LD_VAR 0 7
54046: DEC
54047: ST_TO_ADDR
54048: LD_VAR 0 10
54052: PUSH
54053: FOR_TO
54054: IFFALSE 54131
// begin if not ValidHex ( _x , _y ) then
54056: LD_VAR 0 5
54060: PPUSH
54061: LD_VAR 0 6
54065: PPUSH
54066: CALL_OW 488
54070: NOT
54071: IFFALSE 54075
// continue ;
54073: GO 54053
// if GetResourceTypeXY ( _x , _y ) then
54075: LD_VAR 0 5
54079: PPUSH
54080: LD_VAR 0 6
54084: PPUSH
54085: CALL_OW 283
54089: IFFALSE 54129
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54091: LD_ADDR_VAR 0 4
54095: PUSH
54096: LD_VAR 0 4
54100: PPUSH
54101: LD_VAR 0 4
54105: PUSH
54106: LD_INT 1
54108: PLUS
54109: PPUSH
54110: LD_VAR 0 5
54114: PUSH
54115: LD_VAR 0 6
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PPUSH
54124: CALL_OW 1
54128: ST_TO_ADDR
// end ;
54129: GO 54053
54131: POP
54132: POP
54133: GO 54033
54135: POP
54136: POP
// end ;
54137: LD_VAR 0 4
54141: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
54142: LD_INT 0
54144: PPUSH
54145: PPUSH
54146: PPUSH
54147: PPUSH
54148: PPUSH
54149: PPUSH
// if not units then
54150: LD_VAR 0 1
54154: NOT
54155: IFFALSE 54159
// exit ;
54157: GO 54560
// result := UnitFilter ( units , [ f_ok ] ) ;
54159: LD_ADDR_VAR 0 3
54163: PUSH
54164: LD_VAR 0 1
54168: PPUSH
54169: LD_INT 50
54171: PUSH
54172: EMPTY
54173: LIST
54174: PPUSH
54175: CALL_OW 72
54179: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54180: LD_ADDR_VAR 0 7
54184: PUSH
54185: LD_VAR 0 1
54189: PUSH
54190: LD_INT 1
54192: ARRAY
54193: PPUSH
54194: CALL_OW 255
54198: ST_TO_ADDR
// if not result then
54199: LD_VAR 0 3
54203: NOT
54204: IFFALSE 54208
// exit ;
54206: GO 54560
// for i in result do
54208: LD_ADDR_VAR 0 4
54212: PUSH
54213: LD_VAR 0 3
54217: PUSH
54218: FOR_IN
54219: IFFALSE 54558
// begin tag := GetTag ( i ) + 1 ;
54221: LD_ADDR_VAR 0 8
54225: PUSH
54226: LD_VAR 0 4
54230: PPUSH
54231: CALL_OW 110
54235: PUSH
54236: LD_INT 1
54238: PLUS
54239: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54240: LD_ADDR_VAR 0 6
54244: PUSH
54245: LD_VAR 0 4
54249: PPUSH
54250: CALL_OW 250
54254: PPUSH
54255: LD_VAR 0 4
54259: PPUSH
54260: CALL_OW 251
54264: PPUSH
54265: LD_INT 6
54267: PPUSH
54268: CALL 53884 0 3
54272: ST_TO_ADDR
// if cr then
54273: LD_VAR 0 6
54277: IFFALSE 54316
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54279: LD_VAR 0 4
54283: PPUSH
54284: LD_VAR 0 6
54288: PUSH
54289: LD_INT 1
54291: ARRAY
54292: PUSH
54293: LD_INT 1
54295: ARRAY
54296: PPUSH
54297: LD_VAR 0 6
54301: PUSH
54302: LD_INT 1
54304: ARRAY
54305: PUSH
54306: LD_INT 2
54308: ARRAY
54309: PPUSH
54310: CALL_OW 116
54314: GO 54556
// if path > tag then
54316: LD_VAR 0 2
54320: PUSH
54321: LD_VAR 0 8
54325: GREATER
54326: IFFALSE 54504
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
54328: LD_ADDR_VAR 0 5
54332: PUSH
54333: LD_INT 81
54335: PUSH
54336: LD_VAR 0 7
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 91
54347: PUSH
54348: LD_VAR 0 4
54352: PUSH
54353: LD_INT 12
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PPUSH
54365: CALL_OW 69
54369: ST_TO_ADDR
// if enemy then
54370: LD_VAR 0 5
54374: IFFALSE 54402
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54376: LD_VAR 0 4
54380: PPUSH
54381: LD_VAR 0 5
54385: PPUSH
54386: LD_VAR 0 4
54390: PPUSH
54391: CALL_OW 74
54395: PPUSH
54396: CALL_OW 115
54400: GO 54502
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54402: LD_VAR 0 4
54406: PPUSH
54407: LD_VAR 0 2
54411: PUSH
54412: LD_VAR 0 8
54416: ARRAY
54417: PUSH
54418: LD_INT 1
54420: ARRAY
54421: PPUSH
54422: LD_VAR 0 2
54426: PUSH
54427: LD_VAR 0 8
54431: ARRAY
54432: PUSH
54433: LD_INT 2
54435: ARRAY
54436: PPUSH
54437: CALL_OW 297
54441: PUSH
54442: LD_INT 6
54444: GREATER
54445: IFFALSE 54488
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54447: LD_VAR 0 4
54451: PPUSH
54452: LD_VAR 0 2
54456: PUSH
54457: LD_VAR 0 8
54461: ARRAY
54462: PUSH
54463: LD_INT 1
54465: ARRAY
54466: PPUSH
54467: LD_VAR 0 2
54471: PUSH
54472: LD_VAR 0 8
54476: ARRAY
54477: PUSH
54478: LD_INT 2
54480: ARRAY
54481: PPUSH
54482: CALL_OW 114
54486: GO 54502
// SetTag ( i , tag ) ;
54488: LD_VAR 0 4
54492: PPUSH
54493: LD_VAR 0 8
54497: PPUSH
54498: CALL_OW 109
// end else
54502: GO 54556
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54504: LD_ADDR_VAR 0 5
54508: PUSH
54509: LD_INT 81
54511: PUSH
54512: LD_VAR 0 7
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PPUSH
54521: CALL_OW 69
54525: ST_TO_ADDR
// if enemy then
54526: LD_VAR 0 5
54530: IFFALSE 54556
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54532: LD_VAR 0 4
54536: PPUSH
54537: LD_VAR 0 5
54541: PPUSH
54542: LD_VAR 0 4
54546: PPUSH
54547: CALL_OW 74
54551: PPUSH
54552: CALL_OW 115
// end ; end ;
54556: GO 54218
54558: POP
54559: POP
// end ; end_of_file
54560: LD_VAR 0 3
54564: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54565: LD_VAR 0 1
54569: PUSH
54570: LD_INT 200
54572: DOUBLE
54573: GREATEREQUAL
54574: IFFALSE 54582
54576: LD_INT 299
54578: DOUBLE
54579: LESSEQUAL
54580: IFTRUE 54584
54582: GO 54616
54584: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_VAR 0 2
54594: PPUSH
54595: LD_VAR 0 3
54599: PPUSH
54600: LD_VAR 0 4
54604: PPUSH
54605: LD_VAR 0 5
54609: PPUSH
54610: CALL 54860 0 5
54614: GO 54693
54616: LD_INT 300
54618: DOUBLE
54619: GREATEREQUAL
54620: IFFALSE 54628
54622: LD_INT 399
54624: DOUBLE
54625: LESSEQUAL
54626: IFTRUE 54630
54628: GO 54692
54630: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54631: LD_VAR 0 1
54635: PPUSH
54636: LD_VAR 0 2
54640: PPUSH
54641: LD_VAR 0 3
54645: PPUSH
54646: LD_VAR 0 4
54650: PPUSH
54651: LD_VAR 0 5
54655: PPUSH
54656: LD_VAR 0 6
54660: PPUSH
54661: LD_VAR 0 7
54665: PPUSH
54666: LD_VAR 0 8
54670: PPUSH
54671: LD_VAR 0 9
54675: PPUSH
54676: LD_VAR 0 10
54680: PPUSH
54681: LD_VAR 0 11
54685: PPUSH
54686: CALL 69935 0 11
54690: GO 54693
54692: POP
// end ;
54693: PPOPN 11
54695: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54696: LD_VAR 0 1
54700: PPUSH
54701: LD_VAR 0 2
54705: PPUSH
54706: LD_VAR 0 3
54710: PPUSH
54711: LD_VAR 0 4
54715: PPUSH
54716: LD_VAR 0 5
54720: PPUSH
54721: CALL 54842 0 5
// end ; end_of_file
54725: PPOPN 5
54727: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
54728: LD_INT 0
54730: PPUSH
54731: PPUSH
54732: PPUSH
54733: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
54734: LD_VAR 0 1
54738: PPUSH
54739: CALL_OW 264
54743: PUSH
54744: LD_EXP 103
54748: EQUAL
54749: IFFALSE 54821
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54751: LD_INT 68
54753: PPUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: CALL_OW 255
54763: PPUSH
54764: CALL_OW 321
54768: PUSH
54769: LD_INT 2
54771: EQUAL
54772: IFFALSE 54784
// eff := 70 else
54774: LD_ADDR_VAR 0 4
54778: PUSH
54779: LD_INT 70
54781: ST_TO_ADDR
54782: GO 54792
// eff := 30 ;
54784: LD_ADDR_VAR 0 4
54788: PUSH
54789: LD_INT 30
54791: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54792: LD_VAR 0 1
54796: PPUSH
54797: CALL_OW 250
54801: PPUSH
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL_OW 251
54811: PPUSH
54812: LD_VAR 0 4
54816: PPUSH
54817: CALL_OW 495
// end ; end ;
54821: LD_VAR 0 2
54825: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54826: LD_INT 0
54828: PPUSH
// end ;
54829: LD_VAR 0 4
54833: RET
// export function SOS_Command ( cmd ) ; begin
54834: LD_INT 0
54836: PPUSH
// end ;
54837: LD_VAR 0 2
54841: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54842: LD_INT 0
54844: PPUSH
// if cmd = 121 then
54845: LD_VAR 0 1
54849: PUSH
54850: LD_INT 121
54852: EQUAL
54853: IFFALSE 54855
// end ;
54855: LD_VAR 0 6
54859: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54860: LD_INT 0
54862: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54863: LD_VAR 0 1
54867: PUSH
54868: LD_INT 250
54870: EQUAL
54871: PUSH
54872: LD_VAR 0 2
54876: PPUSH
54877: CALL_OW 264
54881: PUSH
54882: LD_EXP 106
54886: EQUAL
54887: AND
54888: IFFALSE 54909
// MinerPlaceMine ( unit , x , y ) ;
54890: LD_VAR 0 2
54894: PPUSH
54895: LD_VAR 0 4
54899: PPUSH
54900: LD_VAR 0 5
54904: PPUSH
54905: CALL 57258 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54909: LD_VAR 0 1
54913: PUSH
54914: LD_INT 251
54916: EQUAL
54917: PUSH
54918: LD_VAR 0 2
54922: PPUSH
54923: CALL_OW 264
54927: PUSH
54928: LD_EXP 106
54932: EQUAL
54933: AND
54934: IFFALSE 54955
// MinerDetonateMine ( unit , x , y ) ;
54936: LD_VAR 0 2
54940: PPUSH
54941: LD_VAR 0 4
54945: PPUSH
54946: LD_VAR 0 5
54950: PPUSH
54951: CALL 57535 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54955: LD_VAR 0 1
54959: PUSH
54960: LD_INT 252
54962: EQUAL
54963: PUSH
54964: LD_VAR 0 2
54968: PPUSH
54969: CALL_OW 264
54973: PUSH
54974: LD_EXP 106
54978: EQUAL
54979: AND
54980: IFFALSE 55001
// MinerCreateMinefield ( unit , x , y ) ;
54982: LD_VAR 0 2
54986: PPUSH
54987: LD_VAR 0 4
54991: PPUSH
54992: LD_VAR 0 5
54996: PPUSH
54997: CALL 57952 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55001: LD_VAR 0 1
55005: PUSH
55006: LD_INT 253
55008: EQUAL
55009: PUSH
55010: LD_VAR 0 2
55014: PPUSH
55015: CALL_OW 257
55019: PUSH
55020: LD_INT 5
55022: EQUAL
55023: AND
55024: IFFALSE 55045
// ComBinocular ( unit , x , y ) ;
55026: LD_VAR 0 2
55030: PPUSH
55031: LD_VAR 0 4
55035: PPUSH
55036: LD_VAR 0 5
55040: PPUSH
55041: CALL 58323 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55045: LD_VAR 0 1
55049: PUSH
55050: LD_INT 254
55052: EQUAL
55053: PUSH
55054: LD_VAR 0 2
55058: PPUSH
55059: CALL_OW 264
55063: PUSH
55064: LD_EXP 101
55068: EQUAL
55069: AND
55070: PUSH
55071: LD_VAR 0 3
55075: PPUSH
55076: CALL_OW 263
55080: PUSH
55081: LD_INT 3
55083: EQUAL
55084: AND
55085: IFFALSE 55101
// HackDestroyVehicle ( unit , selectedUnit ) ;
55087: LD_VAR 0 2
55091: PPUSH
55092: LD_VAR 0 3
55096: PPUSH
55097: CALL 56618 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55101: LD_VAR 0 1
55105: PUSH
55106: LD_INT 255
55108: EQUAL
55109: PUSH
55110: LD_VAR 0 2
55114: PPUSH
55115: CALL_OW 264
55119: PUSH
55120: LD_INT 14
55122: PUSH
55123: LD_INT 53
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: IN
55130: AND
55131: PUSH
55132: LD_VAR 0 4
55136: PPUSH
55137: LD_VAR 0 5
55141: PPUSH
55142: CALL_OW 488
55146: AND
55147: IFFALSE 55171
// CutTreeXYR ( unit , x , y , 12 ) ;
55149: LD_VAR 0 2
55153: PPUSH
55154: LD_VAR 0 4
55158: PPUSH
55159: LD_VAR 0 5
55163: PPUSH
55164: LD_INT 12
55166: PPUSH
55167: CALL 55184 0 4
// end ;
55171: LD_VAR 0 6
55175: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
55176: LD_INT 0
55178: PPUSH
// end ;
55179: LD_VAR 0 4
55183: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55184: LD_INT 0
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
55193: PPUSH
55194: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
55195: LD_VAR 0 1
55199: NOT
55200: PUSH
55201: LD_VAR 0 2
55205: PPUSH
55206: LD_VAR 0 3
55210: PPUSH
55211: CALL_OW 488
55215: NOT
55216: OR
55217: PUSH
55218: LD_VAR 0 4
55222: NOT
55223: OR
55224: IFFALSE 55228
// exit ;
55226: GO 55568
// list := [ ] ;
55228: LD_ADDR_VAR 0 13
55232: PUSH
55233: EMPTY
55234: ST_TO_ADDR
// if x - r < 0 then
55235: LD_VAR 0 2
55239: PUSH
55240: LD_VAR 0 4
55244: MINUS
55245: PUSH
55246: LD_INT 0
55248: LESS
55249: IFFALSE 55261
// min_x := 0 else
55251: LD_ADDR_VAR 0 7
55255: PUSH
55256: LD_INT 0
55258: ST_TO_ADDR
55259: GO 55277
// min_x := x - r ;
55261: LD_ADDR_VAR 0 7
55265: PUSH
55266: LD_VAR 0 2
55270: PUSH
55271: LD_VAR 0 4
55275: MINUS
55276: ST_TO_ADDR
// if y - r < 0 then
55277: LD_VAR 0 3
55281: PUSH
55282: LD_VAR 0 4
55286: MINUS
55287: PUSH
55288: LD_INT 0
55290: LESS
55291: IFFALSE 55303
// min_y := 0 else
55293: LD_ADDR_VAR 0 8
55297: PUSH
55298: LD_INT 0
55300: ST_TO_ADDR
55301: GO 55319
// min_y := y - r ;
55303: LD_ADDR_VAR 0 8
55307: PUSH
55308: LD_VAR 0 3
55312: PUSH
55313: LD_VAR 0 4
55317: MINUS
55318: ST_TO_ADDR
// max_x := x + r ;
55319: LD_ADDR_VAR 0 9
55323: PUSH
55324: LD_VAR 0 2
55328: PUSH
55329: LD_VAR 0 4
55333: PLUS
55334: ST_TO_ADDR
// max_y := y + r ;
55335: LD_ADDR_VAR 0 10
55339: PUSH
55340: LD_VAR 0 3
55344: PUSH
55345: LD_VAR 0 4
55349: PLUS
55350: ST_TO_ADDR
// for _x = min_x to max_x do
55351: LD_ADDR_VAR 0 11
55355: PUSH
55356: DOUBLE
55357: LD_VAR 0 7
55361: DEC
55362: ST_TO_ADDR
55363: LD_VAR 0 9
55367: PUSH
55368: FOR_TO
55369: IFFALSE 55486
// for _y = min_y to max_y do
55371: LD_ADDR_VAR 0 12
55375: PUSH
55376: DOUBLE
55377: LD_VAR 0 8
55381: DEC
55382: ST_TO_ADDR
55383: LD_VAR 0 10
55387: PUSH
55388: FOR_TO
55389: IFFALSE 55482
// begin if not ValidHex ( _x , _y ) then
55391: LD_VAR 0 11
55395: PPUSH
55396: LD_VAR 0 12
55400: PPUSH
55401: CALL_OW 488
55405: NOT
55406: IFFALSE 55410
// continue ;
55408: GO 55388
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55410: LD_VAR 0 11
55414: PPUSH
55415: LD_VAR 0 12
55419: PPUSH
55420: CALL_OW 351
55424: PUSH
55425: LD_VAR 0 11
55429: PPUSH
55430: LD_VAR 0 12
55434: PPUSH
55435: CALL_OW 554
55439: AND
55440: IFFALSE 55480
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55442: LD_ADDR_VAR 0 13
55446: PUSH
55447: LD_VAR 0 13
55451: PPUSH
55452: LD_VAR 0 13
55456: PUSH
55457: LD_INT 1
55459: PLUS
55460: PPUSH
55461: LD_VAR 0 11
55465: PUSH
55466: LD_VAR 0 12
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PPUSH
55475: CALL_OW 2
55479: ST_TO_ADDR
// end ;
55480: GO 55388
55482: POP
55483: POP
55484: GO 55368
55486: POP
55487: POP
// if not list then
55488: LD_VAR 0 13
55492: NOT
55493: IFFALSE 55497
// exit ;
55495: GO 55568
// for i in list do
55497: LD_ADDR_VAR 0 6
55501: PUSH
55502: LD_VAR 0 13
55506: PUSH
55507: FOR_IN
55508: IFFALSE 55566
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55510: LD_VAR 0 1
55514: PPUSH
55515: LD_STRING M
55517: PUSH
55518: LD_VAR 0 6
55522: PUSH
55523: LD_INT 1
55525: ARRAY
55526: PUSH
55527: LD_VAR 0 6
55531: PUSH
55532: LD_INT 2
55534: ARRAY
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: PPUSH
55560: CALL_OW 447
55564: GO 55507
55566: POP
55567: POP
// end ;
55568: LD_VAR 0 5
55572: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55573: LD_EXP 34
55577: NOT
55578: IFFALSE 55628
55580: GO 55582
55582: DISABLE
// begin initHack := true ;
55583: LD_ADDR_EXP 34
55587: PUSH
55588: LD_INT 1
55590: ST_TO_ADDR
// hackTanks := [ ] ;
55591: LD_ADDR_EXP 35
55595: PUSH
55596: EMPTY
55597: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55598: LD_ADDR_EXP 36
55602: PUSH
55603: EMPTY
55604: ST_TO_ADDR
// hackLimit := 3 ;
55605: LD_ADDR_EXP 37
55609: PUSH
55610: LD_INT 3
55612: ST_TO_ADDR
// hackDist := 12 ;
55613: LD_ADDR_EXP 38
55617: PUSH
55618: LD_INT 12
55620: ST_TO_ADDR
// hackCounter := [ ] ;
55621: LD_ADDR_EXP 39
55625: PUSH
55626: EMPTY
55627: ST_TO_ADDR
// end ;
55628: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55629: LD_EXP 34
55633: PUSH
55634: LD_INT 34
55636: PUSH
55637: LD_EXP 101
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PPUSH
55646: CALL_OW 69
55650: AND
55651: IFFALSE 55906
55653: GO 55655
55655: DISABLE
55656: LD_INT 0
55658: PPUSH
55659: PPUSH
// begin enable ;
55660: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55661: LD_ADDR_VAR 0 1
55665: PUSH
55666: LD_INT 34
55668: PUSH
55669: LD_EXP 101
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PPUSH
55678: CALL_OW 69
55682: PUSH
55683: FOR_IN
55684: IFFALSE 55904
// begin if not i in hackTanks then
55686: LD_VAR 0 1
55690: PUSH
55691: LD_EXP 35
55695: IN
55696: NOT
55697: IFFALSE 55780
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55699: LD_ADDR_EXP 35
55703: PUSH
55704: LD_EXP 35
55708: PPUSH
55709: LD_EXP 35
55713: PUSH
55714: LD_INT 1
55716: PLUS
55717: PPUSH
55718: LD_VAR 0 1
55722: PPUSH
55723: CALL_OW 1
55727: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55728: LD_ADDR_EXP 36
55732: PUSH
55733: LD_EXP 36
55737: PPUSH
55738: LD_EXP 36
55742: PUSH
55743: LD_INT 1
55745: PLUS
55746: PPUSH
55747: EMPTY
55748: PPUSH
55749: CALL_OW 1
55753: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55754: LD_ADDR_EXP 39
55758: PUSH
55759: LD_EXP 39
55763: PPUSH
55764: LD_EXP 39
55768: PUSH
55769: LD_INT 1
55771: PLUS
55772: PPUSH
55773: EMPTY
55774: PPUSH
55775: CALL_OW 1
55779: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55780: LD_VAR 0 1
55784: PPUSH
55785: CALL_OW 302
55789: NOT
55790: IFFALSE 55803
// begin HackUnlinkAll ( i ) ;
55792: LD_VAR 0 1
55796: PPUSH
55797: CALL 55909 0 1
// continue ;
55801: GO 55683
// end ; HackCheckCapturedStatus ( i ) ;
55803: LD_VAR 0 1
55807: PPUSH
55808: CALL 56352 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55812: LD_ADDR_VAR 0 2
55816: PUSH
55817: LD_INT 81
55819: PUSH
55820: LD_VAR 0 1
55824: PPUSH
55825: CALL_OW 255
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 33
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 91
55846: PUSH
55847: LD_VAR 0 1
55851: PUSH
55852: LD_EXP 38
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 50
55864: PUSH
55865: EMPTY
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: PPUSH
55874: CALL_OW 69
55878: ST_TO_ADDR
// if not tmp then
55879: LD_VAR 0 2
55883: NOT
55884: IFFALSE 55888
// continue ;
55886: GO 55683
// HackLink ( i , tmp ) ;
55888: LD_VAR 0 1
55892: PPUSH
55893: LD_VAR 0 2
55897: PPUSH
55898: CALL 56045 0 2
// end ;
55902: GO 55683
55904: POP
55905: POP
// end ;
55906: PPOPN 2
55908: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55909: LD_INT 0
55911: PPUSH
55912: PPUSH
55913: PPUSH
// if not hack in hackTanks then
55914: LD_VAR 0 1
55918: PUSH
55919: LD_EXP 35
55923: IN
55924: NOT
55925: IFFALSE 55929
// exit ;
55927: GO 56040
// index := GetElementIndex ( hackTanks , hack ) ;
55929: LD_ADDR_VAR 0 4
55933: PUSH
55934: LD_EXP 35
55938: PPUSH
55939: LD_VAR 0 1
55943: PPUSH
55944: CALL 19781 0 2
55948: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55949: LD_EXP 36
55953: PUSH
55954: LD_VAR 0 4
55958: ARRAY
55959: IFFALSE 56040
// begin for i in hackTanksCaptured [ index ] do
55961: LD_ADDR_VAR 0 3
55965: PUSH
55966: LD_EXP 36
55970: PUSH
55971: LD_VAR 0 4
55975: ARRAY
55976: PUSH
55977: FOR_IN
55978: IFFALSE 56004
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55980: LD_VAR 0 3
55984: PUSH
55985: LD_INT 1
55987: ARRAY
55988: PPUSH
55989: LD_VAR 0 3
55993: PUSH
55994: LD_INT 2
55996: ARRAY
55997: PPUSH
55998: CALL_OW 235
56002: GO 55977
56004: POP
56005: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56006: LD_ADDR_EXP 36
56010: PUSH
56011: LD_EXP 36
56015: PPUSH
56016: LD_VAR 0 4
56020: PPUSH
56021: EMPTY
56022: PPUSH
56023: CALL_OW 1
56027: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56028: LD_VAR 0 1
56032: PPUSH
56033: LD_INT 0
56035: PPUSH
56036: CALL_OW 505
// end ; end ;
56040: LD_VAR 0 2
56044: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56045: LD_INT 0
56047: PPUSH
56048: PPUSH
56049: PPUSH
// if not hack in hackTanks or not vehicles then
56050: LD_VAR 0 1
56054: PUSH
56055: LD_EXP 35
56059: IN
56060: NOT
56061: PUSH
56062: LD_VAR 0 2
56066: NOT
56067: OR
56068: IFFALSE 56072
// exit ;
56070: GO 56347
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56072: LD_ADDR_VAR 0 2
56076: PUSH
56077: LD_VAR 0 1
56081: PPUSH
56082: LD_VAR 0 2
56086: PPUSH
56087: LD_INT 1
56089: PPUSH
56090: LD_INT 1
56092: PPUSH
56093: CALL 20431 0 4
56097: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56098: LD_ADDR_VAR 0 5
56102: PUSH
56103: LD_EXP 35
56107: PPUSH
56108: LD_VAR 0 1
56112: PPUSH
56113: CALL 19781 0 2
56117: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56118: LD_EXP 36
56122: PUSH
56123: LD_VAR 0 5
56127: ARRAY
56128: PUSH
56129: LD_EXP 37
56133: LESS
56134: IFFALSE 56323
// begin for i := 1 to vehicles do
56136: LD_ADDR_VAR 0 4
56140: PUSH
56141: DOUBLE
56142: LD_INT 1
56144: DEC
56145: ST_TO_ADDR
56146: LD_VAR 0 2
56150: PUSH
56151: FOR_TO
56152: IFFALSE 56321
// begin if hackTanksCaptured [ index ] = hackLimit then
56154: LD_EXP 36
56158: PUSH
56159: LD_VAR 0 5
56163: ARRAY
56164: PUSH
56165: LD_EXP 37
56169: EQUAL
56170: IFFALSE 56174
// break ;
56172: GO 56321
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56174: LD_ADDR_EXP 39
56178: PUSH
56179: LD_EXP 39
56183: PPUSH
56184: LD_VAR 0 5
56188: PPUSH
56189: LD_EXP 39
56193: PUSH
56194: LD_VAR 0 5
56198: ARRAY
56199: PUSH
56200: LD_INT 1
56202: PLUS
56203: PPUSH
56204: CALL_OW 1
56208: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56209: LD_ADDR_EXP 36
56213: PUSH
56214: LD_EXP 36
56218: PPUSH
56219: LD_VAR 0 5
56223: PUSH
56224: LD_EXP 36
56228: PUSH
56229: LD_VAR 0 5
56233: ARRAY
56234: PUSH
56235: LD_INT 1
56237: PLUS
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PPUSH
56243: LD_VAR 0 2
56247: PUSH
56248: LD_VAR 0 4
56252: ARRAY
56253: PUSH
56254: LD_VAR 0 2
56258: PUSH
56259: LD_VAR 0 4
56263: ARRAY
56264: PPUSH
56265: CALL_OW 255
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PPUSH
56274: CALL 19996 0 3
56278: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56279: LD_VAR 0 2
56283: PUSH
56284: LD_VAR 0 4
56288: ARRAY
56289: PPUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: CALL_OW 255
56299: PPUSH
56300: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56304: LD_VAR 0 2
56308: PUSH
56309: LD_VAR 0 4
56313: ARRAY
56314: PPUSH
56315: CALL_OW 141
// end ;
56319: GO 56151
56321: POP
56322: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56323: LD_VAR 0 1
56327: PPUSH
56328: LD_EXP 36
56332: PUSH
56333: LD_VAR 0 5
56337: ARRAY
56338: PUSH
56339: LD_INT 0
56341: PLUS
56342: PPUSH
56343: CALL_OW 505
// end ;
56347: LD_VAR 0 3
56351: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56352: LD_INT 0
56354: PPUSH
56355: PPUSH
56356: PPUSH
56357: PPUSH
// if not hack in hackTanks then
56358: LD_VAR 0 1
56362: PUSH
56363: LD_EXP 35
56367: IN
56368: NOT
56369: IFFALSE 56373
// exit ;
56371: GO 56613
// index := GetElementIndex ( hackTanks , hack ) ;
56373: LD_ADDR_VAR 0 4
56377: PUSH
56378: LD_EXP 35
56382: PPUSH
56383: LD_VAR 0 1
56387: PPUSH
56388: CALL 19781 0 2
56392: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56393: LD_ADDR_VAR 0 3
56397: PUSH
56398: DOUBLE
56399: LD_EXP 36
56403: PUSH
56404: LD_VAR 0 4
56408: ARRAY
56409: INC
56410: ST_TO_ADDR
56411: LD_INT 1
56413: PUSH
56414: FOR_DOWNTO
56415: IFFALSE 56587
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56417: LD_ADDR_VAR 0 5
56421: PUSH
56422: LD_EXP 36
56426: PUSH
56427: LD_VAR 0 4
56431: ARRAY
56432: PUSH
56433: LD_VAR 0 3
56437: ARRAY
56438: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56439: LD_VAR 0 5
56443: PUSH
56444: LD_INT 1
56446: ARRAY
56447: PPUSH
56448: CALL_OW 302
56452: NOT
56453: PUSH
56454: LD_VAR 0 5
56458: PUSH
56459: LD_INT 1
56461: ARRAY
56462: PPUSH
56463: CALL_OW 255
56467: PUSH
56468: LD_VAR 0 1
56472: PPUSH
56473: CALL_OW 255
56477: NONEQUAL
56478: OR
56479: IFFALSE 56585
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56481: LD_VAR 0 5
56485: PUSH
56486: LD_INT 1
56488: ARRAY
56489: PPUSH
56490: CALL_OW 305
56494: PUSH
56495: LD_VAR 0 5
56499: PUSH
56500: LD_INT 1
56502: ARRAY
56503: PPUSH
56504: CALL_OW 255
56508: PUSH
56509: LD_VAR 0 1
56513: PPUSH
56514: CALL_OW 255
56518: EQUAL
56519: AND
56520: IFFALSE 56544
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56522: LD_VAR 0 5
56526: PUSH
56527: LD_INT 1
56529: ARRAY
56530: PPUSH
56531: LD_VAR 0 5
56535: PUSH
56536: LD_INT 2
56538: ARRAY
56539: PPUSH
56540: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56544: LD_ADDR_EXP 36
56548: PUSH
56549: LD_EXP 36
56553: PPUSH
56554: LD_VAR 0 4
56558: PPUSH
56559: LD_EXP 36
56563: PUSH
56564: LD_VAR 0 4
56568: ARRAY
56569: PPUSH
56570: LD_VAR 0 3
56574: PPUSH
56575: CALL_OW 3
56579: PPUSH
56580: CALL_OW 1
56584: ST_TO_ADDR
// end ; end ;
56585: GO 56414
56587: POP
56588: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56589: LD_VAR 0 1
56593: PPUSH
56594: LD_EXP 36
56598: PUSH
56599: LD_VAR 0 4
56603: ARRAY
56604: PUSH
56605: LD_INT 0
56607: PLUS
56608: PPUSH
56609: CALL_OW 505
// end ;
56613: LD_VAR 0 2
56617: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56618: LD_INT 0
56620: PPUSH
56621: PPUSH
56622: PPUSH
56623: PPUSH
// if not hack in hackTanks then
56624: LD_VAR 0 1
56628: PUSH
56629: LD_EXP 35
56633: IN
56634: NOT
56635: IFFALSE 56639
// exit ;
56637: GO 56724
// index := GetElementIndex ( hackTanks , hack ) ;
56639: LD_ADDR_VAR 0 5
56643: PUSH
56644: LD_EXP 35
56648: PPUSH
56649: LD_VAR 0 1
56653: PPUSH
56654: CALL 19781 0 2
56658: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56659: LD_ADDR_VAR 0 4
56663: PUSH
56664: DOUBLE
56665: LD_INT 1
56667: DEC
56668: ST_TO_ADDR
56669: LD_EXP 36
56673: PUSH
56674: LD_VAR 0 5
56678: ARRAY
56679: PUSH
56680: FOR_TO
56681: IFFALSE 56722
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56683: LD_EXP 36
56687: PUSH
56688: LD_VAR 0 5
56692: ARRAY
56693: PUSH
56694: LD_VAR 0 4
56698: ARRAY
56699: PUSH
56700: LD_INT 1
56702: ARRAY
56703: PUSH
56704: LD_VAR 0 2
56708: EQUAL
56709: IFFALSE 56720
// KillUnit ( vehicle ) ;
56711: LD_VAR 0 2
56715: PPUSH
56716: CALL_OW 66
56720: GO 56680
56722: POP
56723: POP
// end ;
56724: LD_VAR 0 3
56728: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56729: LD_EXP 40
56733: NOT
56734: IFFALSE 56769
56736: GO 56738
56738: DISABLE
// begin initMiner := true ;
56739: LD_ADDR_EXP 40
56743: PUSH
56744: LD_INT 1
56746: ST_TO_ADDR
// minersList := [ ] ;
56747: LD_ADDR_EXP 41
56751: PUSH
56752: EMPTY
56753: ST_TO_ADDR
// minerMinesList := [ ] ;
56754: LD_ADDR_EXP 42
56758: PUSH
56759: EMPTY
56760: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56761: LD_ADDR_EXP 43
56765: PUSH
56766: LD_INT 5
56768: ST_TO_ADDR
// end ;
56769: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56770: LD_EXP 40
56774: PUSH
56775: LD_INT 34
56777: PUSH
56778: LD_EXP 106
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PPUSH
56787: CALL_OW 69
56791: AND
56792: IFFALSE 57255
56794: GO 56796
56796: DISABLE
56797: LD_INT 0
56799: PPUSH
56800: PPUSH
56801: PPUSH
56802: PPUSH
// begin enable ;
56803: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56804: LD_ADDR_VAR 0 1
56808: PUSH
56809: LD_INT 34
56811: PUSH
56812: LD_EXP 106
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PPUSH
56821: CALL_OW 69
56825: PUSH
56826: FOR_IN
56827: IFFALSE 56899
// begin if not i in minersList then
56829: LD_VAR 0 1
56833: PUSH
56834: LD_EXP 41
56838: IN
56839: NOT
56840: IFFALSE 56897
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56842: LD_ADDR_EXP 41
56846: PUSH
56847: LD_EXP 41
56851: PPUSH
56852: LD_EXP 41
56856: PUSH
56857: LD_INT 1
56859: PLUS
56860: PPUSH
56861: LD_VAR 0 1
56865: PPUSH
56866: CALL_OW 1
56870: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56871: LD_ADDR_EXP 42
56875: PUSH
56876: LD_EXP 42
56880: PPUSH
56881: LD_EXP 42
56885: PUSH
56886: LD_INT 1
56888: PLUS
56889: PPUSH
56890: EMPTY
56891: PPUSH
56892: CALL_OW 1
56896: ST_TO_ADDR
// end end ;
56897: GO 56826
56899: POP
56900: POP
// for i := minerMinesList downto 1 do
56901: LD_ADDR_VAR 0 1
56905: PUSH
56906: DOUBLE
56907: LD_EXP 42
56911: INC
56912: ST_TO_ADDR
56913: LD_INT 1
56915: PUSH
56916: FOR_DOWNTO
56917: IFFALSE 57253
// begin if IsLive ( minersList [ i ] ) then
56919: LD_EXP 41
56923: PUSH
56924: LD_VAR 0 1
56928: ARRAY
56929: PPUSH
56930: CALL_OW 300
56934: IFFALSE 56962
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56936: LD_EXP 41
56940: PUSH
56941: LD_VAR 0 1
56945: ARRAY
56946: PPUSH
56947: LD_EXP 42
56951: PUSH
56952: LD_VAR 0 1
56956: ARRAY
56957: PPUSH
56958: CALL_OW 505
// if not minerMinesList [ i ] then
56962: LD_EXP 42
56966: PUSH
56967: LD_VAR 0 1
56971: ARRAY
56972: NOT
56973: IFFALSE 56977
// continue ;
56975: GO 56916
// for j := minerMinesList [ i ] downto 1 do
56977: LD_ADDR_VAR 0 2
56981: PUSH
56982: DOUBLE
56983: LD_EXP 42
56987: PUSH
56988: LD_VAR 0 1
56992: ARRAY
56993: INC
56994: ST_TO_ADDR
56995: LD_INT 1
56997: PUSH
56998: FOR_DOWNTO
56999: IFFALSE 57249
// begin side := GetSide ( minersList [ i ] ) ;
57001: LD_ADDR_VAR 0 3
57005: PUSH
57006: LD_EXP 41
57010: PUSH
57011: LD_VAR 0 1
57015: ARRAY
57016: PPUSH
57017: CALL_OW 255
57021: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57022: LD_ADDR_VAR 0 4
57026: PUSH
57027: LD_EXP 42
57031: PUSH
57032: LD_VAR 0 1
57036: ARRAY
57037: PUSH
57038: LD_VAR 0 2
57042: ARRAY
57043: PUSH
57044: LD_INT 1
57046: ARRAY
57047: PPUSH
57048: LD_EXP 42
57052: PUSH
57053: LD_VAR 0 1
57057: ARRAY
57058: PUSH
57059: LD_VAR 0 2
57063: ARRAY
57064: PUSH
57065: LD_INT 2
57067: ARRAY
57068: PPUSH
57069: CALL_OW 428
57073: ST_TO_ADDR
// if not tmp then
57074: LD_VAR 0 4
57078: NOT
57079: IFFALSE 57083
// continue ;
57081: GO 56998
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57083: LD_VAR 0 4
57087: PUSH
57088: LD_INT 81
57090: PUSH
57091: LD_VAR 0 3
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PPUSH
57100: CALL_OW 69
57104: IN
57105: PUSH
57106: LD_EXP 42
57110: PUSH
57111: LD_VAR 0 1
57115: ARRAY
57116: PUSH
57117: LD_VAR 0 2
57121: ARRAY
57122: PUSH
57123: LD_INT 1
57125: ARRAY
57126: PPUSH
57127: LD_EXP 42
57131: PUSH
57132: LD_VAR 0 1
57136: ARRAY
57137: PUSH
57138: LD_VAR 0 2
57142: ARRAY
57143: PUSH
57144: LD_INT 2
57146: ARRAY
57147: PPUSH
57148: CALL_OW 458
57152: AND
57153: IFFALSE 57247
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57155: LD_EXP 42
57159: PUSH
57160: LD_VAR 0 1
57164: ARRAY
57165: PUSH
57166: LD_VAR 0 2
57170: ARRAY
57171: PUSH
57172: LD_INT 1
57174: ARRAY
57175: PPUSH
57176: LD_EXP 42
57180: PUSH
57181: LD_VAR 0 1
57185: ARRAY
57186: PUSH
57187: LD_VAR 0 2
57191: ARRAY
57192: PUSH
57193: LD_INT 2
57195: ARRAY
57196: PPUSH
57197: LD_VAR 0 3
57201: PPUSH
57202: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57206: LD_ADDR_EXP 42
57210: PUSH
57211: LD_EXP 42
57215: PPUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: LD_EXP 42
57225: PUSH
57226: LD_VAR 0 1
57230: ARRAY
57231: PPUSH
57232: LD_VAR 0 2
57236: PPUSH
57237: CALL_OW 3
57241: PPUSH
57242: CALL_OW 1
57246: ST_TO_ADDR
// end ; end ;
57247: GO 56998
57249: POP
57250: POP
// end ;
57251: GO 56916
57253: POP
57254: POP
// end ;
57255: PPOPN 4
57257: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57258: LD_INT 0
57260: PPUSH
57261: PPUSH
// result := false ;
57262: LD_ADDR_VAR 0 4
57266: PUSH
57267: LD_INT 0
57269: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57270: LD_VAR 0 1
57274: PPUSH
57275: CALL_OW 264
57279: PUSH
57280: LD_EXP 106
57284: EQUAL
57285: NOT
57286: IFFALSE 57290
// exit ;
57288: GO 57530
// index := GetElementIndex ( minersList , unit ) ;
57290: LD_ADDR_VAR 0 5
57294: PUSH
57295: LD_EXP 41
57299: PPUSH
57300: LD_VAR 0 1
57304: PPUSH
57305: CALL 19781 0 2
57309: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57310: LD_EXP 42
57314: PUSH
57315: LD_VAR 0 5
57319: ARRAY
57320: PUSH
57321: LD_EXP 43
57325: GREATEREQUAL
57326: IFFALSE 57330
// exit ;
57328: GO 57530
// ComMoveXY ( unit , x , y ) ;
57330: LD_VAR 0 1
57334: PPUSH
57335: LD_VAR 0 2
57339: PPUSH
57340: LD_VAR 0 3
57344: PPUSH
57345: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57349: LD_INT 35
57351: PPUSH
57352: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57356: LD_VAR 0 1
57360: PPUSH
57361: LD_VAR 0 2
57365: PPUSH
57366: LD_VAR 0 3
57370: PPUSH
57371: CALL 50553 0 3
57375: NOT
57376: PUSH
57377: LD_VAR 0 1
57381: PPUSH
57382: CALL_OW 314
57386: AND
57387: IFFALSE 57391
// exit ;
57389: GO 57530
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57391: LD_VAR 0 2
57395: PPUSH
57396: LD_VAR 0 3
57400: PPUSH
57401: CALL_OW 428
57405: PUSH
57406: LD_VAR 0 1
57410: EQUAL
57411: PUSH
57412: LD_VAR 0 1
57416: PPUSH
57417: CALL_OW 314
57421: NOT
57422: AND
57423: IFFALSE 57349
// PlaySoundXY ( x , y , PlantMine ) ;
57425: LD_VAR 0 2
57429: PPUSH
57430: LD_VAR 0 3
57434: PPUSH
57435: LD_STRING PlantMine
57437: PPUSH
57438: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57442: LD_VAR 0 2
57446: PPUSH
57447: LD_VAR 0 3
57451: PPUSH
57452: LD_VAR 0 1
57456: PPUSH
57457: CALL_OW 255
57461: PPUSH
57462: LD_INT 0
57464: PPUSH
57465: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57469: LD_ADDR_EXP 42
57473: PUSH
57474: LD_EXP 42
57478: PPUSH
57479: LD_VAR 0 5
57483: PUSH
57484: LD_EXP 42
57488: PUSH
57489: LD_VAR 0 5
57493: ARRAY
57494: PUSH
57495: LD_INT 1
57497: PLUS
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PPUSH
57503: LD_VAR 0 2
57507: PUSH
57508: LD_VAR 0 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PPUSH
57517: CALL 19996 0 3
57521: ST_TO_ADDR
// result := true ;
57522: LD_ADDR_VAR 0 4
57526: PUSH
57527: LD_INT 1
57529: ST_TO_ADDR
// end ;
57530: LD_VAR 0 4
57534: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57535: LD_INT 0
57537: PPUSH
57538: PPUSH
57539: PPUSH
// if not unit in minersList then
57540: LD_VAR 0 1
57544: PUSH
57545: LD_EXP 41
57549: IN
57550: NOT
57551: IFFALSE 57555
// exit ;
57553: GO 57947
// index := GetElementIndex ( minersList , unit ) ;
57555: LD_ADDR_VAR 0 6
57559: PUSH
57560: LD_EXP 41
57564: PPUSH
57565: LD_VAR 0 1
57569: PPUSH
57570: CALL 19781 0 2
57574: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57575: LD_ADDR_VAR 0 5
57579: PUSH
57580: DOUBLE
57581: LD_EXP 42
57585: PUSH
57586: LD_VAR 0 6
57590: ARRAY
57591: INC
57592: ST_TO_ADDR
57593: LD_INT 1
57595: PUSH
57596: FOR_DOWNTO
57597: IFFALSE 57758
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57599: LD_EXP 42
57603: PUSH
57604: LD_VAR 0 6
57608: ARRAY
57609: PUSH
57610: LD_VAR 0 5
57614: ARRAY
57615: PUSH
57616: LD_INT 1
57618: ARRAY
57619: PUSH
57620: LD_VAR 0 2
57624: EQUAL
57625: PUSH
57626: LD_EXP 42
57630: PUSH
57631: LD_VAR 0 6
57635: ARRAY
57636: PUSH
57637: LD_VAR 0 5
57641: ARRAY
57642: PUSH
57643: LD_INT 2
57645: ARRAY
57646: PUSH
57647: LD_VAR 0 3
57651: EQUAL
57652: AND
57653: IFFALSE 57756
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57655: LD_EXP 42
57659: PUSH
57660: LD_VAR 0 6
57664: ARRAY
57665: PUSH
57666: LD_VAR 0 5
57670: ARRAY
57671: PUSH
57672: LD_INT 1
57674: ARRAY
57675: PPUSH
57676: LD_EXP 42
57680: PUSH
57681: LD_VAR 0 6
57685: ARRAY
57686: PUSH
57687: LD_VAR 0 5
57691: ARRAY
57692: PUSH
57693: LD_INT 2
57695: ARRAY
57696: PPUSH
57697: LD_VAR 0 1
57701: PPUSH
57702: CALL_OW 255
57706: PPUSH
57707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57711: LD_ADDR_EXP 42
57715: PUSH
57716: LD_EXP 42
57720: PPUSH
57721: LD_VAR 0 6
57725: PPUSH
57726: LD_EXP 42
57730: PUSH
57731: LD_VAR 0 6
57735: ARRAY
57736: PPUSH
57737: LD_VAR 0 5
57741: PPUSH
57742: CALL_OW 3
57746: PPUSH
57747: CALL_OW 1
57751: ST_TO_ADDR
// exit ;
57752: POP
57753: POP
57754: GO 57947
// end ; end ;
57756: GO 57596
57758: POP
57759: POP
// for i := minerMinesList [ index ] downto 1 do
57760: LD_ADDR_VAR 0 5
57764: PUSH
57765: DOUBLE
57766: LD_EXP 42
57770: PUSH
57771: LD_VAR 0 6
57775: ARRAY
57776: INC
57777: ST_TO_ADDR
57778: LD_INT 1
57780: PUSH
57781: FOR_DOWNTO
57782: IFFALSE 57945
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57784: LD_EXP 42
57788: PUSH
57789: LD_VAR 0 6
57793: ARRAY
57794: PUSH
57795: LD_VAR 0 5
57799: ARRAY
57800: PUSH
57801: LD_INT 1
57803: ARRAY
57804: PPUSH
57805: LD_EXP 42
57809: PUSH
57810: LD_VAR 0 6
57814: ARRAY
57815: PUSH
57816: LD_VAR 0 5
57820: ARRAY
57821: PUSH
57822: LD_INT 2
57824: ARRAY
57825: PPUSH
57826: LD_VAR 0 2
57830: PPUSH
57831: LD_VAR 0 3
57835: PPUSH
57836: CALL_OW 298
57840: PUSH
57841: LD_INT 6
57843: LESS
57844: IFFALSE 57943
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57846: LD_EXP 42
57850: PUSH
57851: LD_VAR 0 6
57855: ARRAY
57856: PUSH
57857: LD_VAR 0 5
57861: ARRAY
57862: PUSH
57863: LD_INT 1
57865: ARRAY
57866: PPUSH
57867: LD_EXP 42
57871: PUSH
57872: LD_VAR 0 6
57876: ARRAY
57877: PUSH
57878: LD_VAR 0 5
57882: ARRAY
57883: PUSH
57884: LD_INT 2
57886: ARRAY
57887: PPUSH
57888: LD_VAR 0 1
57892: PPUSH
57893: CALL_OW 255
57897: PPUSH
57898: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57902: LD_ADDR_EXP 42
57906: PUSH
57907: LD_EXP 42
57911: PPUSH
57912: LD_VAR 0 6
57916: PPUSH
57917: LD_EXP 42
57921: PUSH
57922: LD_VAR 0 6
57926: ARRAY
57927: PPUSH
57928: LD_VAR 0 5
57932: PPUSH
57933: CALL_OW 3
57937: PPUSH
57938: CALL_OW 1
57942: ST_TO_ADDR
// end ; end ;
57943: GO 57781
57945: POP
57946: POP
// end ;
57947: LD_VAR 0 4
57951: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57952: LD_INT 0
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
57959: PPUSH
57960: PPUSH
57961: PPUSH
57962: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 264
57972: PUSH
57973: LD_EXP 106
57977: EQUAL
57978: NOT
57979: PUSH
57980: LD_VAR 0 1
57984: PUSH
57985: LD_EXP 41
57989: IN
57990: NOT
57991: OR
57992: IFFALSE 57996
// exit ;
57994: GO 58318
// index := GetElementIndex ( minersList , unit ) ;
57996: LD_ADDR_VAR 0 6
58000: PUSH
58001: LD_EXP 41
58005: PPUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL 19781 0 2
58015: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58016: LD_ADDR_VAR 0 8
58020: PUSH
58021: LD_EXP 43
58025: PUSH
58026: LD_EXP 42
58030: PUSH
58031: LD_VAR 0 6
58035: ARRAY
58036: MINUS
58037: ST_TO_ADDR
// if not minesFreeAmount then
58038: LD_VAR 0 8
58042: NOT
58043: IFFALSE 58047
// exit ;
58045: GO 58318
// tmp := [ ] ;
58047: LD_ADDR_VAR 0 7
58051: PUSH
58052: EMPTY
58053: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58054: LD_ADDR_VAR 0 5
58058: PUSH
58059: DOUBLE
58060: LD_INT 1
58062: DEC
58063: ST_TO_ADDR
58064: LD_VAR 0 8
58068: PUSH
58069: FOR_TO
58070: IFFALSE 58265
// begin _d := rand ( 0 , 5 ) ;
58072: LD_ADDR_VAR 0 11
58076: PUSH
58077: LD_INT 0
58079: PPUSH
58080: LD_INT 5
58082: PPUSH
58083: CALL_OW 12
58087: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58088: LD_ADDR_VAR 0 12
58092: PUSH
58093: LD_INT 2
58095: PPUSH
58096: LD_INT 6
58098: PPUSH
58099: CALL_OW 12
58103: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58104: LD_ADDR_VAR 0 9
58108: PUSH
58109: LD_VAR 0 2
58113: PPUSH
58114: LD_VAR 0 11
58118: PPUSH
58119: LD_VAR 0 12
58123: PPUSH
58124: CALL_OW 272
58128: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58129: LD_ADDR_VAR 0 10
58133: PUSH
58134: LD_VAR 0 3
58138: PPUSH
58139: LD_VAR 0 11
58143: PPUSH
58144: LD_VAR 0 12
58148: PPUSH
58149: CALL_OW 273
58153: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58154: LD_VAR 0 9
58158: PPUSH
58159: LD_VAR 0 10
58163: PPUSH
58164: CALL_OW 488
58168: PUSH
58169: LD_VAR 0 9
58173: PUSH
58174: LD_VAR 0 10
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_VAR 0 7
58187: IN
58188: NOT
58189: AND
58190: PUSH
58191: LD_VAR 0 9
58195: PPUSH
58196: LD_VAR 0 10
58200: PPUSH
58201: CALL_OW 458
58205: NOT
58206: AND
58207: IFFALSE 58249
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58209: LD_ADDR_VAR 0 7
58213: PUSH
58214: LD_VAR 0 7
58218: PPUSH
58219: LD_VAR 0 7
58223: PUSH
58224: LD_INT 1
58226: PLUS
58227: PPUSH
58228: LD_VAR 0 9
58232: PUSH
58233: LD_VAR 0 10
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 1
58246: ST_TO_ADDR
58247: GO 58263
// i := i - 1 ;
58249: LD_ADDR_VAR 0 5
58253: PUSH
58254: LD_VAR 0 5
58258: PUSH
58259: LD_INT 1
58261: MINUS
58262: ST_TO_ADDR
// end ;
58263: GO 58069
58265: POP
58266: POP
// for i in tmp do
58267: LD_ADDR_VAR 0 5
58271: PUSH
58272: LD_VAR 0 7
58276: PUSH
58277: FOR_IN
58278: IFFALSE 58316
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58280: LD_VAR 0 1
58284: PPUSH
58285: LD_VAR 0 5
58289: PUSH
58290: LD_INT 1
58292: ARRAY
58293: PPUSH
58294: LD_VAR 0 5
58298: PUSH
58299: LD_INT 2
58301: ARRAY
58302: PPUSH
58303: CALL 57258 0 3
58307: NOT
58308: IFFALSE 58314
// exit ;
58310: POP
58311: POP
58312: GO 58318
58314: GO 58277
58316: POP
58317: POP
// end ;
58318: LD_VAR 0 4
58322: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
58323: LD_INT 0
58325: PPUSH
58326: PPUSH
58327: PPUSH
58328: PPUSH
58329: PPUSH
58330: PPUSH
58331: PPUSH
// if not GetClass ( unit ) = class_sniper then
58332: LD_VAR 0 1
58336: PPUSH
58337: CALL_OW 257
58341: PUSH
58342: LD_INT 5
58344: EQUAL
58345: NOT
58346: IFFALSE 58350
// exit ;
58348: GO 58738
// dist := 8 ;
58350: LD_ADDR_VAR 0 5
58354: PUSH
58355: LD_INT 8
58357: ST_TO_ADDR
// viewRange := 12 ;
58358: LD_ADDR_VAR 0 7
58362: PUSH
58363: LD_INT 12
58365: ST_TO_ADDR
// side := GetSide ( unit ) ;
58366: LD_ADDR_VAR 0 6
58370: PUSH
58371: LD_VAR 0 1
58375: PPUSH
58376: CALL_OW 255
58380: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58381: LD_INT 61
58383: PPUSH
58384: LD_VAR 0 6
58388: PPUSH
58389: CALL_OW 321
58393: PUSH
58394: LD_INT 2
58396: EQUAL
58397: IFFALSE 58407
// viewRange := 16 ;
58399: LD_ADDR_VAR 0 7
58403: PUSH
58404: LD_INT 16
58406: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58407: LD_VAR 0 1
58411: PPUSH
58412: LD_VAR 0 2
58416: PPUSH
58417: LD_VAR 0 3
58421: PPUSH
58422: CALL_OW 297
58426: PUSH
58427: LD_VAR 0 5
58431: GREATER
58432: IFFALSE 58511
// begin ComMoveXY ( unit , x , y ) ;
58434: LD_VAR 0 1
58438: PPUSH
58439: LD_VAR 0 2
58443: PPUSH
58444: LD_VAR 0 3
58448: PPUSH
58449: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58453: LD_INT 35
58455: PPUSH
58456: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58460: LD_VAR 0 1
58464: PPUSH
58465: LD_VAR 0 2
58469: PPUSH
58470: LD_VAR 0 3
58474: PPUSH
58475: CALL 50553 0 3
58479: NOT
58480: IFFALSE 58484
// exit ;
58482: GO 58738
// until GetDistUnitXY ( unit , x , y ) < dist ;
58484: LD_VAR 0 1
58488: PPUSH
58489: LD_VAR 0 2
58493: PPUSH
58494: LD_VAR 0 3
58498: PPUSH
58499: CALL_OW 297
58503: PUSH
58504: LD_VAR 0 5
58508: LESS
58509: IFFALSE 58453
// end ; ComTurnXY ( unit , x , y ) ;
58511: LD_VAR 0 1
58515: PPUSH
58516: LD_VAR 0 2
58520: PPUSH
58521: LD_VAR 0 3
58525: PPUSH
58526: CALL_OW 118
// wait ( 5 ) ;
58530: LD_INT 5
58532: PPUSH
58533: CALL_OW 67
// _d := GetDir ( unit ) ;
58537: LD_ADDR_VAR 0 10
58541: PUSH
58542: LD_VAR 0 1
58546: PPUSH
58547: CALL_OW 254
58551: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
58552: LD_ADDR_VAR 0 8
58556: PUSH
58557: LD_VAR 0 1
58561: PPUSH
58562: CALL_OW 250
58566: PPUSH
58567: LD_VAR 0 10
58571: PPUSH
58572: LD_VAR 0 5
58576: PPUSH
58577: CALL_OW 272
58581: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
58582: LD_ADDR_VAR 0 9
58586: PUSH
58587: LD_VAR 0 1
58591: PPUSH
58592: CALL_OW 251
58596: PPUSH
58597: LD_VAR 0 10
58601: PPUSH
58602: LD_VAR 0 5
58606: PPUSH
58607: CALL_OW 273
58611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58612: LD_VAR 0 8
58616: PPUSH
58617: LD_VAR 0 9
58621: PPUSH
58622: CALL_OW 488
58626: NOT
58627: IFFALSE 58631
// exit ;
58629: GO 58738
// ComAnimCustom ( unit , 1 ) ;
58631: LD_VAR 0 1
58635: PPUSH
58636: LD_INT 1
58638: PPUSH
58639: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58643: LD_VAR 0 8
58647: PPUSH
58648: LD_VAR 0 9
58652: PPUSH
58653: LD_VAR 0 6
58657: PPUSH
58658: LD_VAR 0 7
58662: PPUSH
58663: CALL_OW 330
// repeat wait ( 1 ) ;
58667: LD_INT 1
58669: PPUSH
58670: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 316
58683: PUSH
58684: LD_VAR 0 1
58688: PPUSH
58689: CALL_OW 314
58693: OR
58694: PUSH
58695: LD_VAR 0 1
58699: PPUSH
58700: CALL_OW 302
58704: NOT
58705: OR
58706: PUSH
58707: LD_VAR 0 1
58711: PPUSH
58712: CALL_OW 301
58716: OR
58717: IFFALSE 58667
// RemoveSeeing ( _x , _y , side ) ;
58719: LD_VAR 0 8
58723: PPUSH
58724: LD_VAR 0 9
58728: PPUSH
58729: LD_VAR 0 6
58733: PPUSH
58734: CALL_OW 331
// end ; end_of_file
58738: LD_VAR 0 4
58742: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58743: LD_INT 0
58745: PPUSH
// if p2 = 100 then
58746: LD_VAR 0 2
58750: PUSH
58751: LD_INT 100
58753: EQUAL
58754: IFFALSE 59703
// begin if not StreamModeActive then
58756: LD_EXP 44
58760: NOT
58761: IFFALSE 58771
// StreamModeActive := true ;
58763: LD_ADDR_EXP 44
58767: PUSH
58768: LD_INT 1
58770: ST_TO_ADDR
// if p3 = 0 then
58771: LD_VAR 0 3
58775: PUSH
58776: LD_INT 0
58778: EQUAL
58779: IFFALSE 58785
// InitStreamMode ;
58781: CALL 59863 0 0
// if p3 = 1 then
58785: LD_VAR 0 3
58789: PUSH
58790: LD_INT 1
58792: EQUAL
58793: IFFALSE 58803
// sRocket := true ;
58795: LD_ADDR_EXP 49
58799: PUSH
58800: LD_INT 1
58802: ST_TO_ADDR
// if p3 = 2 then
58803: LD_VAR 0 3
58807: PUSH
58808: LD_INT 2
58810: EQUAL
58811: IFFALSE 58821
// sSpeed := true ;
58813: LD_ADDR_EXP 48
58817: PUSH
58818: LD_INT 1
58820: ST_TO_ADDR
// if p3 = 3 then
58821: LD_VAR 0 3
58825: PUSH
58826: LD_INT 3
58828: EQUAL
58829: IFFALSE 58839
// sEngine := true ;
58831: LD_ADDR_EXP 50
58835: PUSH
58836: LD_INT 1
58838: ST_TO_ADDR
// if p3 = 4 then
58839: LD_VAR 0 3
58843: PUSH
58844: LD_INT 4
58846: EQUAL
58847: IFFALSE 58857
// sSpec := true ;
58849: LD_ADDR_EXP 47
58853: PUSH
58854: LD_INT 1
58856: ST_TO_ADDR
// if p3 = 5 then
58857: LD_VAR 0 3
58861: PUSH
58862: LD_INT 5
58864: EQUAL
58865: IFFALSE 58875
// sLevel := true ;
58867: LD_ADDR_EXP 51
58871: PUSH
58872: LD_INT 1
58874: ST_TO_ADDR
// if p3 = 6 then
58875: LD_VAR 0 3
58879: PUSH
58880: LD_INT 6
58882: EQUAL
58883: IFFALSE 58893
// sArmoury := true ;
58885: LD_ADDR_EXP 52
58889: PUSH
58890: LD_INT 1
58892: ST_TO_ADDR
// if p3 = 7 then
58893: LD_VAR 0 3
58897: PUSH
58898: LD_INT 7
58900: EQUAL
58901: IFFALSE 58911
// sRadar := true ;
58903: LD_ADDR_EXP 53
58907: PUSH
58908: LD_INT 1
58910: ST_TO_ADDR
// if p3 = 8 then
58911: LD_VAR 0 3
58915: PUSH
58916: LD_INT 8
58918: EQUAL
58919: IFFALSE 58929
// sBunker := true ;
58921: LD_ADDR_EXP 54
58925: PUSH
58926: LD_INT 1
58928: ST_TO_ADDR
// if p3 = 9 then
58929: LD_VAR 0 3
58933: PUSH
58934: LD_INT 9
58936: EQUAL
58937: IFFALSE 58947
// sHack := true ;
58939: LD_ADDR_EXP 55
58943: PUSH
58944: LD_INT 1
58946: ST_TO_ADDR
// if p3 = 10 then
58947: LD_VAR 0 3
58951: PUSH
58952: LD_INT 10
58954: EQUAL
58955: IFFALSE 58965
// sFire := true ;
58957: LD_ADDR_EXP 56
58961: PUSH
58962: LD_INT 1
58964: ST_TO_ADDR
// if p3 = 11 then
58965: LD_VAR 0 3
58969: PUSH
58970: LD_INT 11
58972: EQUAL
58973: IFFALSE 58983
// sRefresh := true ;
58975: LD_ADDR_EXP 57
58979: PUSH
58980: LD_INT 1
58982: ST_TO_ADDR
// if p3 = 12 then
58983: LD_VAR 0 3
58987: PUSH
58988: LD_INT 12
58990: EQUAL
58991: IFFALSE 59001
// sExp := true ;
58993: LD_ADDR_EXP 58
58997: PUSH
58998: LD_INT 1
59000: ST_TO_ADDR
// if p3 = 13 then
59001: LD_VAR 0 3
59005: PUSH
59006: LD_INT 13
59008: EQUAL
59009: IFFALSE 59019
// sDepot := true ;
59011: LD_ADDR_EXP 59
59015: PUSH
59016: LD_INT 1
59018: ST_TO_ADDR
// if p3 = 14 then
59019: LD_VAR 0 3
59023: PUSH
59024: LD_INT 14
59026: EQUAL
59027: IFFALSE 59037
// sFlag := true ;
59029: LD_ADDR_EXP 60
59033: PUSH
59034: LD_INT 1
59036: ST_TO_ADDR
// if p3 = 15 then
59037: LD_VAR 0 3
59041: PUSH
59042: LD_INT 15
59044: EQUAL
59045: IFFALSE 59055
// sKamikadze := true ;
59047: LD_ADDR_EXP 68
59051: PUSH
59052: LD_INT 1
59054: ST_TO_ADDR
// if p3 = 16 then
59055: LD_VAR 0 3
59059: PUSH
59060: LD_INT 16
59062: EQUAL
59063: IFFALSE 59073
// sTroll := true ;
59065: LD_ADDR_EXP 69
59069: PUSH
59070: LD_INT 1
59072: ST_TO_ADDR
// if p3 = 17 then
59073: LD_VAR 0 3
59077: PUSH
59078: LD_INT 17
59080: EQUAL
59081: IFFALSE 59091
// sSlow := true ;
59083: LD_ADDR_EXP 70
59087: PUSH
59088: LD_INT 1
59090: ST_TO_ADDR
// if p3 = 18 then
59091: LD_VAR 0 3
59095: PUSH
59096: LD_INT 18
59098: EQUAL
59099: IFFALSE 59109
// sLack := true ;
59101: LD_ADDR_EXP 71
59105: PUSH
59106: LD_INT 1
59108: ST_TO_ADDR
// if p3 = 19 then
59109: LD_VAR 0 3
59113: PUSH
59114: LD_INT 19
59116: EQUAL
59117: IFFALSE 59127
// sTank := true ;
59119: LD_ADDR_EXP 73
59123: PUSH
59124: LD_INT 1
59126: ST_TO_ADDR
// if p3 = 20 then
59127: LD_VAR 0 3
59131: PUSH
59132: LD_INT 20
59134: EQUAL
59135: IFFALSE 59145
// sRemote := true ;
59137: LD_ADDR_EXP 74
59141: PUSH
59142: LD_INT 1
59144: ST_TO_ADDR
// if p3 = 21 then
59145: LD_VAR 0 3
59149: PUSH
59150: LD_INT 21
59152: EQUAL
59153: IFFALSE 59163
// sPowell := true ;
59155: LD_ADDR_EXP 75
59159: PUSH
59160: LD_INT 1
59162: ST_TO_ADDR
// if p3 = 22 then
59163: LD_VAR 0 3
59167: PUSH
59168: LD_INT 22
59170: EQUAL
59171: IFFALSE 59181
// sTeleport := true ;
59173: LD_ADDR_EXP 78
59177: PUSH
59178: LD_INT 1
59180: ST_TO_ADDR
// if p3 = 23 then
59181: LD_VAR 0 3
59185: PUSH
59186: LD_INT 23
59188: EQUAL
59189: IFFALSE 59199
// sOilTower := true ;
59191: LD_ADDR_EXP 80
59195: PUSH
59196: LD_INT 1
59198: ST_TO_ADDR
// if p3 = 24 then
59199: LD_VAR 0 3
59203: PUSH
59204: LD_INT 24
59206: EQUAL
59207: IFFALSE 59217
// sShovel := true ;
59209: LD_ADDR_EXP 81
59213: PUSH
59214: LD_INT 1
59216: ST_TO_ADDR
// if p3 = 25 then
59217: LD_VAR 0 3
59221: PUSH
59222: LD_INT 25
59224: EQUAL
59225: IFFALSE 59235
// sSheik := true ;
59227: LD_ADDR_EXP 82
59231: PUSH
59232: LD_INT 1
59234: ST_TO_ADDR
// if p3 = 26 then
59235: LD_VAR 0 3
59239: PUSH
59240: LD_INT 26
59242: EQUAL
59243: IFFALSE 59253
// sEarthquake := true ;
59245: LD_ADDR_EXP 84
59249: PUSH
59250: LD_INT 1
59252: ST_TO_ADDR
// if p3 = 27 then
59253: LD_VAR 0 3
59257: PUSH
59258: LD_INT 27
59260: EQUAL
59261: IFFALSE 59271
// sAI := true ;
59263: LD_ADDR_EXP 85
59267: PUSH
59268: LD_INT 1
59270: ST_TO_ADDR
// if p3 = 28 then
59271: LD_VAR 0 3
59275: PUSH
59276: LD_INT 28
59278: EQUAL
59279: IFFALSE 59289
// sCargo := true ;
59281: LD_ADDR_EXP 88
59285: PUSH
59286: LD_INT 1
59288: ST_TO_ADDR
// if p3 = 29 then
59289: LD_VAR 0 3
59293: PUSH
59294: LD_INT 29
59296: EQUAL
59297: IFFALSE 59307
// sDLaser := true ;
59299: LD_ADDR_EXP 89
59303: PUSH
59304: LD_INT 1
59306: ST_TO_ADDR
// if p3 = 30 then
59307: LD_VAR 0 3
59311: PUSH
59312: LD_INT 30
59314: EQUAL
59315: IFFALSE 59325
// sExchange := true ;
59317: LD_ADDR_EXP 90
59321: PUSH
59322: LD_INT 1
59324: ST_TO_ADDR
// if p3 = 31 then
59325: LD_VAR 0 3
59329: PUSH
59330: LD_INT 31
59332: EQUAL
59333: IFFALSE 59343
// sFac := true ;
59335: LD_ADDR_EXP 91
59339: PUSH
59340: LD_INT 1
59342: ST_TO_ADDR
// if p3 = 32 then
59343: LD_VAR 0 3
59347: PUSH
59348: LD_INT 32
59350: EQUAL
59351: IFFALSE 59361
// sPower := true ;
59353: LD_ADDR_EXP 92
59357: PUSH
59358: LD_INT 1
59360: ST_TO_ADDR
// if p3 = 33 then
59361: LD_VAR 0 3
59365: PUSH
59366: LD_INT 33
59368: EQUAL
59369: IFFALSE 59379
// sRandom := true ;
59371: LD_ADDR_EXP 93
59375: PUSH
59376: LD_INT 1
59378: ST_TO_ADDR
// if p3 = 34 then
59379: LD_VAR 0 3
59383: PUSH
59384: LD_INT 34
59386: EQUAL
59387: IFFALSE 59397
// sShield := true ;
59389: LD_ADDR_EXP 94
59393: PUSH
59394: LD_INT 1
59396: ST_TO_ADDR
// if p3 = 35 then
59397: LD_VAR 0 3
59401: PUSH
59402: LD_INT 35
59404: EQUAL
59405: IFFALSE 59415
// sTime := true ;
59407: LD_ADDR_EXP 95
59411: PUSH
59412: LD_INT 1
59414: ST_TO_ADDR
// if p3 = 36 then
59415: LD_VAR 0 3
59419: PUSH
59420: LD_INT 36
59422: EQUAL
59423: IFFALSE 59433
// sTools := true ;
59425: LD_ADDR_EXP 96
59429: PUSH
59430: LD_INT 1
59432: ST_TO_ADDR
// if p3 = 101 then
59433: LD_VAR 0 3
59437: PUSH
59438: LD_INT 101
59440: EQUAL
59441: IFFALSE 59451
// sSold := true ;
59443: LD_ADDR_EXP 61
59447: PUSH
59448: LD_INT 1
59450: ST_TO_ADDR
// if p3 = 102 then
59451: LD_VAR 0 3
59455: PUSH
59456: LD_INT 102
59458: EQUAL
59459: IFFALSE 59469
// sDiff := true ;
59461: LD_ADDR_EXP 62
59465: PUSH
59466: LD_INT 1
59468: ST_TO_ADDR
// if p3 = 103 then
59469: LD_VAR 0 3
59473: PUSH
59474: LD_INT 103
59476: EQUAL
59477: IFFALSE 59487
// sFog := true ;
59479: LD_ADDR_EXP 65
59483: PUSH
59484: LD_INT 1
59486: ST_TO_ADDR
// if p3 = 104 then
59487: LD_VAR 0 3
59491: PUSH
59492: LD_INT 104
59494: EQUAL
59495: IFFALSE 59505
// sReset := true ;
59497: LD_ADDR_EXP 66
59501: PUSH
59502: LD_INT 1
59504: ST_TO_ADDR
// if p3 = 105 then
59505: LD_VAR 0 3
59509: PUSH
59510: LD_INT 105
59512: EQUAL
59513: IFFALSE 59523
// sSun := true ;
59515: LD_ADDR_EXP 67
59519: PUSH
59520: LD_INT 1
59522: ST_TO_ADDR
// if p3 = 106 then
59523: LD_VAR 0 3
59527: PUSH
59528: LD_INT 106
59530: EQUAL
59531: IFFALSE 59541
// sTiger := true ;
59533: LD_ADDR_EXP 63
59537: PUSH
59538: LD_INT 1
59540: ST_TO_ADDR
// if p3 = 107 then
59541: LD_VAR 0 3
59545: PUSH
59546: LD_INT 107
59548: EQUAL
59549: IFFALSE 59559
// sBomb := true ;
59551: LD_ADDR_EXP 64
59555: PUSH
59556: LD_INT 1
59558: ST_TO_ADDR
// if p3 = 108 then
59559: LD_VAR 0 3
59563: PUSH
59564: LD_INT 108
59566: EQUAL
59567: IFFALSE 59577
// sWound := true ;
59569: LD_ADDR_EXP 72
59573: PUSH
59574: LD_INT 1
59576: ST_TO_ADDR
// if p3 = 109 then
59577: LD_VAR 0 3
59581: PUSH
59582: LD_INT 109
59584: EQUAL
59585: IFFALSE 59595
// sBetray := true ;
59587: LD_ADDR_EXP 76
59591: PUSH
59592: LD_INT 1
59594: ST_TO_ADDR
// if p3 = 110 then
59595: LD_VAR 0 3
59599: PUSH
59600: LD_INT 110
59602: EQUAL
59603: IFFALSE 59613
// sContamin := true ;
59605: LD_ADDR_EXP 77
59609: PUSH
59610: LD_INT 1
59612: ST_TO_ADDR
// if p3 = 111 then
59613: LD_VAR 0 3
59617: PUSH
59618: LD_INT 111
59620: EQUAL
59621: IFFALSE 59631
// sOil := true ;
59623: LD_ADDR_EXP 79
59627: PUSH
59628: LD_INT 1
59630: ST_TO_ADDR
// if p3 = 112 then
59631: LD_VAR 0 3
59635: PUSH
59636: LD_INT 112
59638: EQUAL
59639: IFFALSE 59649
// sStu := true ;
59641: LD_ADDR_EXP 83
59645: PUSH
59646: LD_INT 1
59648: ST_TO_ADDR
// if p3 = 113 then
59649: LD_VAR 0 3
59653: PUSH
59654: LD_INT 113
59656: EQUAL
59657: IFFALSE 59667
// sBazooka := true ;
59659: LD_ADDR_EXP 86
59663: PUSH
59664: LD_INT 1
59666: ST_TO_ADDR
// if p3 = 114 then
59667: LD_VAR 0 3
59671: PUSH
59672: LD_INT 114
59674: EQUAL
59675: IFFALSE 59685
// sMortar := true ;
59677: LD_ADDR_EXP 87
59681: PUSH
59682: LD_INT 1
59684: ST_TO_ADDR
// if p3 = 115 then
59685: LD_VAR 0 3
59689: PUSH
59690: LD_INT 115
59692: EQUAL
59693: IFFALSE 59703
// sRanger := true ;
59695: LD_ADDR_EXP 97
59699: PUSH
59700: LD_INT 1
59702: ST_TO_ADDR
// end ; if p2 = 101 then
59703: LD_VAR 0 2
59707: PUSH
59708: LD_INT 101
59710: EQUAL
59711: IFFALSE 59839
// begin case p3 of 1 :
59713: LD_VAR 0 3
59717: PUSH
59718: LD_INT 1
59720: DOUBLE
59721: EQUAL
59722: IFTRUE 59726
59724: GO 59733
59726: POP
// hHackUnlimitedResources ; 2 :
59727: CALL 70876 0 0
59731: GO 59839
59733: LD_INT 2
59735: DOUBLE
59736: EQUAL
59737: IFTRUE 59741
59739: GO 59748
59741: POP
// hHackSetLevel10 ; 3 :
59742: CALL 71009 0 0
59746: GO 59839
59748: LD_INT 3
59750: DOUBLE
59751: EQUAL
59752: IFTRUE 59756
59754: GO 59763
59756: POP
// hHackSetLevel10YourUnits ; 4 :
59757: CALL 71094 0 0
59761: GO 59839
59763: LD_INT 4
59765: DOUBLE
59766: EQUAL
59767: IFTRUE 59771
59769: GO 59778
59771: POP
// hHackInvincible ; 5 :
59772: CALL 71542 0 0
59776: GO 59839
59778: LD_INT 5
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59786
59784: GO 59793
59786: POP
// hHackInvisible ; 6 :
59787: CALL 71653 0 0
59791: GO 59839
59793: LD_INT 6
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59801
59799: GO 59808
59801: POP
// hHackChangeYourSide ; 7 :
59802: CALL 71710 0 0
59806: GO 59839
59808: LD_INT 7
59810: DOUBLE
59811: EQUAL
59812: IFTRUE 59816
59814: GO 59823
59816: POP
// hHackChangeUnitSide ; 8 :
59817: CALL 71752 0 0
59821: GO 59839
59823: LD_INT 8
59825: DOUBLE
59826: EQUAL
59827: IFTRUE 59831
59829: GO 59838
59831: POP
// hHackFog ; end ;
59832: CALL 71853 0 0
59836: GO 59839
59838: POP
// end ; end ;
59839: LD_VAR 0 7
59843: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
59844: GO 59846
59846: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
59847: LD_STRING initStreamRollete();
59849: PPUSH
59850: CALL_OW 559
// InitStreamMode ;
59854: CALL 59863 0 0
// DefineStreamItems ( ) ;
59858: CALL 60303 0 0
// end ;
59862: END
// function InitStreamMode ; begin
59863: LD_INT 0
59865: PPUSH
// streamModeActive := false ;
59866: LD_ADDR_EXP 44
59870: PUSH
59871: LD_INT 0
59873: ST_TO_ADDR
// normalCounter := 36 ;
59874: LD_ADDR_EXP 45
59878: PUSH
59879: LD_INT 36
59881: ST_TO_ADDR
// hardcoreCounter := 16 ;
59882: LD_ADDR_EXP 46
59886: PUSH
59887: LD_INT 16
59889: ST_TO_ADDR
// sRocket := false ;
59890: LD_ADDR_EXP 49
59894: PUSH
59895: LD_INT 0
59897: ST_TO_ADDR
// sSpeed := false ;
59898: LD_ADDR_EXP 48
59902: PUSH
59903: LD_INT 0
59905: ST_TO_ADDR
// sEngine := false ;
59906: LD_ADDR_EXP 50
59910: PUSH
59911: LD_INT 0
59913: ST_TO_ADDR
// sSpec := false ;
59914: LD_ADDR_EXP 47
59918: PUSH
59919: LD_INT 0
59921: ST_TO_ADDR
// sLevel := false ;
59922: LD_ADDR_EXP 51
59926: PUSH
59927: LD_INT 0
59929: ST_TO_ADDR
// sArmoury := false ;
59930: LD_ADDR_EXP 52
59934: PUSH
59935: LD_INT 0
59937: ST_TO_ADDR
// sRadar := false ;
59938: LD_ADDR_EXP 53
59942: PUSH
59943: LD_INT 0
59945: ST_TO_ADDR
// sBunker := false ;
59946: LD_ADDR_EXP 54
59950: PUSH
59951: LD_INT 0
59953: ST_TO_ADDR
// sHack := false ;
59954: LD_ADDR_EXP 55
59958: PUSH
59959: LD_INT 0
59961: ST_TO_ADDR
// sFire := false ;
59962: LD_ADDR_EXP 56
59966: PUSH
59967: LD_INT 0
59969: ST_TO_ADDR
// sRefresh := false ;
59970: LD_ADDR_EXP 57
59974: PUSH
59975: LD_INT 0
59977: ST_TO_ADDR
// sExp := false ;
59978: LD_ADDR_EXP 58
59982: PUSH
59983: LD_INT 0
59985: ST_TO_ADDR
// sDepot := false ;
59986: LD_ADDR_EXP 59
59990: PUSH
59991: LD_INT 0
59993: ST_TO_ADDR
// sFlag := false ;
59994: LD_ADDR_EXP 60
59998: PUSH
59999: LD_INT 0
60001: ST_TO_ADDR
// sKamikadze := false ;
60002: LD_ADDR_EXP 68
60006: PUSH
60007: LD_INT 0
60009: ST_TO_ADDR
// sTroll := false ;
60010: LD_ADDR_EXP 69
60014: PUSH
60015: LD_INT 0
60017: ST_TO_ADDR
// sSlow := false ;
60018: LD_ADDR_EXP 70
60022: PUSH
60023: LD_INT 0
60025: ST_TO_ADDR
// sLack := false ;
60026: LD_ADDR_EXP 71
60030: PUSH
60031: LD_INT 0
60033: ST_TO_ADDR
// sTank := false ;
60034: LD_ADDR_EXP 73
60038: PUSH
60039: LD_INT 0
60041: ST_TO_ADDR
// sRemote := false ;
60042: LD_ADDR_EXP 74
60046: PUSH
60047: LD_INT 0
60049: ST_TO_ADDR
// sPowell := false ;
60050: LD_ADDR_EXP 75
60054: PUSH
60055: LD_INT 0
60057: ST_TO_ADDR
// sTeleport := false ;
60058: LD_ADDR_EXP 78
60062: PUSH
60063: LD_INT 0
60065: ST_TO_ADDR
// sOilTower := false ;
60066: LD_ADDR_EXP 80
60070: PUSH
60071: LD_INT 0
60073: ST_TO_ADDR
// sShovel := false ;
60074: LD_ADDR_EXP 81
60078: PUSH
60079: LD_INT 0
60081: ST_TO_ADDR
// sSheik := false ;
60082: LD_ADDR_EXP 82
60086: PUSH
60087: LD_INT 0
60089: ST_TO_ADDR
// sEarthquake := false ;
60090: LD_ADDR_EXP 84
60094: PUSH
60095: LD_INT 0
60097: ST_TO_ADDR
// sAI := false ;
60098: LD_ADDR_EXP 85
60102: PUSH
60103: LD_INT 0
60105: ST_TO_ADDR
// sCargo := false ;
60106: LD_ADDR_EXP 88
60110: PUSH
60111: LD_INT 0
60113: ST_TO_ADDR
// sDLaser := false ;
60114: LD_ADDR_EXP 89
60118: PUSH
60119: LD_INT 0
60121: ST_TO_ADDR
// sExchange := false ;
60122: LD_ADDR_EXP 90
60126: PUSH
60127: LD_INT 0
60129: ST_TO_ADDR
// sFac := false ;
60130: LD_ADDR_EXP 91
60134: PUSH
60135: LD_INT 0
60137: ST_TO_ADDR
// sPower := false ;
60138: LD_ADDR_EXP 92
60142: PUSH
60143: LD_INT 0
60145: ST_TO_ADDR
// sRandom := false ;
60146: LD_ADDR_EXP 93
60150: PUSH
60151: LD_INT 0
60153: ST_TO_ADDR
// sShield := false ;
60154: LD_ADDR_EXP 94
60158: PUSH
60159: LD_INT 0
60161: ST_TO_ADDR
// sTime := false ;
60162: LD_ADDR_EXP 95
60166: PUSH
60167: LD_INT 0
60169: ST_TO_ADDR
// sTools := false ;
60170: LD_ADDR_EXP 96
60174: PUSH
60175: LD_INT 0
60177: ST_TO_ADDR
// sSold := false ;
60178: LD_ADDR_EXP 61
60182: PUSH
60183: LD_INT 0
60185: ST_TO_ADDR
// sDiff := false ;
60186: LD_ADDR_EXP 62
60190: PUSH
60191: LD_INT 0
60193: ST_TO_ADDR
// sFog := false ;
60194: LD_ADDR_EXP 65
60198: PUSH
60199: LD_INT 0
60201: ST_TO_ADDR
// sReset := false ;
60202: LD_ADDR_EXP 66
60206: PUSH
60207: LD_INT 0
60209: ST_TO_ADDR
// sSun := false ;
60210: LD_ADDR_EXP 67
60214: PUSH
60215: LD_INT 0
60217: ST_TO_ADDR
// sTiger := false ;
60218: LD_ADDR_EXP 63
60222: PUSH
60223: LD_INT 0
60225: ST_TO_ADDR
// sBomb := false ;
60226: LD_ADDR_EXP 64
60230: PUSH
60231: LD_INT 0
60233: ST_TO_ADDR
// sWound := false ;
60234: LD_ADDR_EXP 72
60238: PUSH
60239: LD_INT 0
60241: ST_TO_ADDR
// sBetray := false ;
60242: LD_ADDR_EXP 76
60246: PUSH
60247: LD_INT 0
60249: ST_TO_ADDR
// sContamin := false ;
60250: LD_ADDR_EXP 77
60254: PUSH
60255: LD_INT 0
60257: ST_TO_ADDR
// sOil := false ;
60258: LD_ADDR_EXP 79
60262: PUSH
60263: LD_INT 0
60265: ST_TO_ADDR
// sStu := false ;
60266: LD_ADDR_EXP 83
60270: PUSH
60271: LD_INT 0
60273: ST_TO_ADDR
// sBazooka := false ;
60274: LD_ADDR_EXP 86
60278: PUSH
60279: LD_INT 0
60281: ST_TO_ADDR
// sMortar := false ;
60282: LD_ADDR_EXP 87
60286: PUSH
60287: LD_INT 0
60289: ST_TO_ADDR
// sRanger := false ;
60290: LD_ADDR_EXP 97
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// end ;
60298: LD_VAR 0 1
60302: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
60303: LD_INT 0
60305: PPUSH
60306: PPUSH
60307: PPUSH
60308: PPUSH
60309: PPUSH
// result := [ ] ;
60310: LD_ADDR_VAR 0 1
60314: PUSH
60315: EMPTY
60316: ST_TO_ADDR
// if campaign_id = 1 then
60317: LD_OWVAR 69
60321: PUSH
60322: LD_INT 1
60324: EQUAL
60325: IFFALSE 63263
// begin case mission_number of 1 :
60327: LD_OWVAR 70
60331: PUSH
60332: LD_INT 1
60334: DOUBLE
60335: EQUAL
60336: IFTRUE 60340
60338: GO 60404
60340: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
60341: LD_ADDR_VAR 0 1
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 4
60351: PUSH
60352: LD_INT 11
60354: PUSH
60355: LD_INT 12
60357: PUSH
60358: LD_INT 15
60360: PUSH
60361: LD_INT 16
60363: PUSH
60364: LD_INT 22
60366: PUSH
60367: LD_INT 23
60369: PUSH
60370: LD_INT 26
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 101
60386: PUSH
60387: LD_INT 102
60389: PUSH
60390: LD_INT 106
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: ST_TO_ADDR
60402: GO 63261
60404: LD_INT 2
60406: DOUBLE
60407: EQUAL
60408: IFTRUE 60412
60410: GO 60484
60412: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
60413: LD_ADDR_VAR 0 1
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 4
60423: PUSH
60424: LD_INT 11
60426: PUSH
60427: LD_INT 12
60429: PUSH
60430: LD_INT 15
60432: PUSH
60433: LD_INT 16
60435: PUSH
60436: LD_INT 22
60438: PUSH
60439: LD_INT 23
60441: PUSH
60442: LD_INT 26
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 101
60458: PUSH
60459: LD_INT 102
60461: PUSH
60462: LD_INT 105
60464: PUSH
60465: LD_INT 106
60467: PUSH
60468: LD_INT 108
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: ST_TO_ADDR
60482: GO 63261
60484: LD_INT 3
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60492
60490: GO 60568
60492: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
60493: LD_ADDR_VAR 0 1
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 4
60503: PUSH
60504: LD_INT 5
60506: PUSH
60507: LD_INT 11
60509: PUSH
60510: LD_INT 12
60512: PUSH
60513: LD_INT 15
60515: PUSH
60516: LD_INT 16
60518: PUSH
60519: LD_INT 22
60521: PUSH
60522: LD_INT 26
60524: PUSH
60525: LD_INT 36
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 101
60542: PUSH
60543: LD_INT 102
60545: PUSH
60546: LD_INT 105
60548: PUSH
60549: LD_INT 106
60551: PUSH
60552: LD_INT 108
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: ST_TO_ADDR
60566: GO 63261
60568: LD_INT 4
60570: DOUBLE
60571: EQUAL
60572: IFTRUE 60576
60574: GO 60660
60576: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
60577: LD_ADDR_VAR 0 1
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 4
60587: PUSH
60588: LD_INT 5
60590: PUSH
60591: LD_INT 8
60593: PUSH
60594: LD_INT 11
60596: PUSH
60597: LD_INT 12
60599: PUSH
60600: LD_INT 15
60602: PUSH
60603: LD_INT 16
60605: PUSH
60606: LD_INT 22
60608: PUSH
60609: LD_INT 23
60611: PUSH
60612: LD_INT 26
60614: PUSH
60615: LD_INT 36
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 101
60634: PUSH
60635: LD_INT 102
60637: PUSH
60638: LD_INT 105
60640: PUSH
60641: LD_INT 106
60643: PUSH
60644: LD_INT 108
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: ST_TO_ADDR
60658: GO 63261
60660: LD_INT 5
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60668
60666: GO 60768
60668: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
60669: LD_ADDR_VAR 0 1
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 5
60682: PUSH
60683: LD_INT 6
60685: PUSH
60686: LD_INT 8
60688: PUSH
60689: LD_INT 11
60691: PUSH
60692: LD_INT 12
60694: PUSH
60695: LD_INT 15
60697: PUSH
60698: LD_INT 16
60700: PUSH
60701: LD_INT 22
60703: PUSH
60704: LD_INT 23
60706: PUSH
60707: LD_INT 25
60709: PUSH
60710: LD_INT 26
60712: PUSH
60713: LD_INT 36
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 101
60734: PUSH
60735: LD_INT 102
60737: PUSH
60738: LD_INT 105
60740: PUSH
60741: LD_INT 106
60743: PUSH
60744: LD_INT 108
60746: PUSH
60747: LD_INT 109
60749: PUSH
60750: LD_INT 112
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: ST_TO_ADDR
60766: GO 63261
60768: LD_INT 6
60770: DOUBLE
60771: EQUAL
60772: IFTRUE 60776
60774: GO 60896
60776: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
60777: LD_ADDR_VAR 0 1
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: LD_INT 5
60790: PUSH
60791: LD_INT 6
60793: PUSH
60794: LD_INT 8
60796: PUSH
60797: LD_INT 11
60799: PUSH
60800: LD_INT 12
60802: PUSH
60803: LD_INT 15
60805: PUSH
60806: LD_INT 16
60808: PUSH
60809: LD_INT 20
60811: PUSH
60812: LD_INT 21
60814: PUSH
60815: LD_INT 22
60817: PUSH
60818: LD_INT 23
60820: PUSH
60821: LD_INT 25
60823: PUSH
60824: LD_INT 26
60826: PUSH
60827: LD_INT 30
60829: PUSH
60830: LD_INT 31
60832: PUSH
60833: LD_INT 32
60835: PUSH
60836: LD_INT 36
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 101
60862: PUSH
60863: LD_INT 102
60865: PUSH
60866: LD_INT 105
60868: PUSH
60869: LD_INT 106
60871: PUSH
60872: LD_INT 108
60874: PUSH
60875: LD_INT 109
60877: PUSH
60878: LD_INT 112
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: ST_TO_ADDR
60894: GO 63261
60896: LD_INT 7
60898: DOUBLE
60899: EQUAL
60900: IFTRUE 60904
60902: GO 61004
60904: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
60905: LD_ADDR_VAR 0 1
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 4
60915: PUSH
60916: LD_INT 5
60918: PUSH
60919: LD_INT 7
60921: PUSH
60922: LD_INT 11
60924: PUSH
60925: LD_INT 12
60927: PUSH
60928: LD_INT 15
60930: PUSH
60931: LD_INT 16
60933: PUSH
60934: LD_INT 20
60936: PUSH
60937: LD_INT 21
60939: PUSH
60940: LD_INT 22
60942: PUSH
60943: LD_INT 23
60945: PUSH
60946: LD_INT 25
60948: PUSH
60949: LD_INT 26
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 101
60970: PUSH
60971: LD_INT 102
60973: PUSH
60974: LD_INT 103
60976: PUSH
60977: LD_INT 105
60979: PUSH
60980: LD_INT 106
60982: PUSH
60983: LD_INT 108
60985: PUSH
60986: LD_INT 112
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: ST_TO_ADDR
61002: GO 63261
61004: LD_INT 8
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61012
61010: GO 61140
61012: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
61013: LD_ADDR_VAR 0 1
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 5
61026: PUSH
61027: LD_INT 6
61029: PUSH
61030: LD_INT 7
61032: PUSH
61033: LD_INT 8
61035: PUSH
61036: LD_INT 11
61038: PUSH
61039: LD_INT 12
61041: PUSH
61042: LD_INT 15
61044: PUSH
61045: LD_INT 16
61047: PUSH
61048: LD_INT 20
61050: PUSH
61051: LD_INT 21
61053: PUSH
61054: LD_INT 22
61056: PUSH
61057: LD_INT 23
61059: PUSH
61060: LD_INT 25
61062: PUSH
61063: LD_INT 26
61065: PUSH
61066: LD_INT 30
61068: PUSH
61069: LD_INT 31
61071: PUSH
61072: LD_INT 32
61074: PUSH
61075: LD_INT 36
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 101
61102: PUSH
61103: LD_INT 102
61105: PUSH
61106: LD_INT 103
61108: PUSH
61109: LD_INT 105
61111: PUSH
61112: LD_INT 106
61114: PUSH
61115: LD_INT 108
61117: PUSH
61118: LD_INT 109
61120: PUSH
61121: LD_INT 112
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: ST_TO_ADDR
61138: GO 63261
61140: LD_INT 9
61142: DOUBLE
61143: EQUAL
61144: IFTRUE 61148
61146: GO 61284
61148: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
61149: LD_ADDR_VAR 0 1
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: LD_INT 4
61159: PUSH
61160: LD_INT 5
61162: PUSH
61163: LD_INT 6
61165: PUSH
61166: LD_INT 7
61168: PUSH
61169: LD_INT 8
61171: PUSH
61172: LD_INT 11
61174: PUSH
61175: LD_INT 12
61177: PUSH
61178: LD_INT 15
61180: PUSH
61181: LD_INT 16
61183: PUSH
61184: LD_INT 20
61186: PUSH
61187: LD_INT 21
61189: PUSH
61190: LD_INT 22
61192: PUSH
61193: LD_INT 23
61195: PUSH
61196: LD_INT 25
61198: PUSH
61199: LD_INT 26
61201: PUSH
61202: LD_INT 28
61204: PUSH
61205: LD_INT 30
61207: PUSH
61208: LD_INT 31
61210: PUSH
61211: LD_INT 32
61213: PUSH
61214: LD_INT 36
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 101
61242: PUSH
61243: LD_INT 102
61245: PUSH
61246: LD_INT 103
61248: PUSH
61249: LD_INT 105
61251: PUSH
61252: LD_INT 106
61254: PUSH
61255: LD_INT 108
61257: PUSH
61258: LD_INT 109
61260: PUSH
61261: LD_INT 112
61263: PUSH
61264: LD_INT 114
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: ST_TO_ADDR
61282: GO 63261
61284: LD_INT 10
61286: DOUBLE
61287: EQUAL
61288: IFTRUE 61292
61290: GO 61476
61292: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
61293: LD_ADDR_VAR 0 1
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 4
61303: PUSH
61304: LD_INT 5
61306: PUSH
61307: LD_INT 6
61309: PUSH
61310: LD_INT 7
61312: PUSH
61313: LD_INT 8
61315: PUSH
61316: LD_INT 9
61318: PUSH
61319: LD_INT 10
61321: PUSH
61322: LD_INT 11
61324: PUSH
61325: LD_INT 12
61327: PUSH
61328: LD_INT 13
61330: PUSH
61331: LD_INT 14
61333: PUSH
61334: LD_INT 15
61336: PUSH
61337: LD_INT 16
61339: PUSH
61340: LD_INT 17
61342: PUSH
61343: LD_INT 18
61345: PUSH
61346: LD_INT 19
61348: PUSH
61349: LD_INT 20
61351: PUSH
61352: LD_INT 21
61354: PUSH
61355: LD_INT 22
61357: PUSH
61358: LD_INT 23
61360: PUSH
61361: LD_INT 24
61363: PUSH
61364: LD_INT 25
61366: PUSH
61367: LD_INT 26
61369: PUSH
61370: LD_INT 28
61372: PUSH
61373: LD_INT 30
61375: PUSH
61376: LD_INT 31
61378: PUSH
61379: LD_INT 32
61381: PUSH
61382: LD_INT 36
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 101
61418: PUSH
61419: LD_INT 102
61421: PUSH
61422: LD_INT 103
61424: PUSH
61425: LD_INT 104
61427: PUSH
61428: LD_INT 105
61430: PUSH
61431: LD_INT 106
61433: PUSH
61434: LD_INT 107
61436: PUSH
61437: LD_INT 108
61439: PUSH
61440: LD_INT 109
61442: PUSH
61443: LD_INT 110
61445: PUSH
61446: LD_INT 111
61448: PUSH
61449: LD_INT 112
61451: PUSH
61452: LD_INT 114
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: ST_TO_ADDR
61474: GO 63261
61476: LD_INT 11
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61484
61482: GO 61676
61484: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
61485: LD_ADDR_VAR 0 1
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 4
61498: PUSH
61499: LD_INT 5
61501: PUSH
61502: LD_INT 6
61504: PUSH
61505: LD_INT 7
61507: PUSH
61508: LD_INT 8
61510: PUSH
61511: LD_INT 9
61513: PUSH
61514: LD_INT 10
61516: PUSH
61517: LD_INT 11
61519: PUSH
61520: LD_INT 12
61522: PUSH
61523: LD_INT 13
61525: PUSH
61526: LD_INT 14
61528: PUSH
61529: LD_INT 15
61531: PUSH
61532: LD_INT 16
61534: PUSH
61535: LD_INT 17
61537: PUSH
61538: LD_INT 18
61540: PUSH
61541: LD_INT 19
61543: PUSH
61544: LD_INT 20
61546: PUSH
61547: LD_INT 21
61549: PUSH
61550: LD_INT 22
61552: PUSH
61553: LD_INT 23
61555: PUSH
61556: LD_INT 24
61558: PUSH
61559: LD_INT 25
61561: PUSH
61562: LD_INT 26
61564: PUSH
61565: LD_INT 28
61567: PUSH
61568: LD_INT 30
61570: PUSH
61571: LD_INT 31
61573: PUSH
61574: LD_INT 32
61576: PUSH
61577: LD_INT 34
61579: PUSH
61580: LD_INT 36
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 101
61618: PUSH
61619: LD_INT 102
61621: PUSH
61622: LD_INT 103
61624: PUSH
61625: LD_INT 104
61627: PUSH
61628: LD_INT 105
61630: PUSH
61631: LD_INT 106
61633: PUSH
61634: LD_INT 107
61636: PUSH
61637: LD_INT 108
61639: PUSH
61640: LD_INT 109
61642: PUSH
61643: LD_INT 110
61645: PUSH
61646: LD_INT 111
61648: PUSH
61649: LD_INT 112
61651: PUSH
61652: LD_INT 114
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: ST_TO_ADDR
61674: GO 63261
61676: LD_INT 12
61678: DOUBLE
61679: EQUAL
61680: IFTRUE 61684
61682: GO 61892
61684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
61685: LD_ADDR_VAR 0 1
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 3
61698: PUSH
61699: LD_INT 4
61701: PUSH
61702: LD_INT 5
61704: PUSH
61705: LD_INT 6
61707: PUSH
61708: LD_INT 7
61710: PUSH
61711: LD_INT 8
61713: PUSH
61714: LD_INT 9
61716: PUSH
61717: LD_INT 10
61719: PUSH
61720: LD_INT 11
61722: PUSH
61723: LD_INT 12
61725: PUSH
61726: LD_INT 13
61728: PUSH
61729: LD_INT 14
61731: PUSH
61732: LD_INT 15
61734: PUSH
61735: LD_INT 16
61737: PUSH
61738: LD_INT 17
61740: PUSH
61741: LD_INT 18
61743: PUSH
61744: LD_INT 19
61746: PUSH
61747: LD_INT 20
61749: PUSH
61750: LD_INT 21
61752: PUSH
61753: LD_INT 22
61755: PUSH
61756: LD_INT 23
61758: PUSH
61759: LD_INT 24
61761: PUSH
61762: LD_INT 25
61764: PUSH
61765: LD_INT 26
61767: PUSH
61768: LD_INT 27
61770: PUSH
61771: LD_INT 28
61773: PUSH
61774: LD_INT 30
61776: PUSH
61777: LD_INT 31
61779: PUSH
61780: LD_INT 32
61782: PUSH
61783: LD_INT 33
61785: PUSH
61786: LD_INT 34
61788: PUSH
61789: LD_INT 36
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 101
61830: PUSH
61831: LD_INT 102
61833: PUSH
61834: LD_INT 103
61836: PUSH
61837: LD_INT 104
61839: PUSH
61840: LD_INT 105
61842: PUSH
61843: LD_INT 106
61845: PUSH
61846: LD_INT 107
61848: PUSH
61849: LD_INT 108
61851: PUSH
61852: LD_INT 109
61854: PUSH
61855: LD_INT 110
61857: PUSH
61858: LD_INT 111
61860: PUSH
61861: LD_INT 112
61863: PUSH
61864: LD_INT 113
61866: PUSH
61867: LD_INT 114
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: ST_TO_ADDR
61890: GO 63261
61892: LD_INT 13
61894: DOUBLE
61895: EQUAL
61896: IFTRUE 61900
61898: GO 62096
61900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
61901: LD_ADDR_VAR 0 1
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: LD_INT 5
61920: PUSH
61921: LD_INT 8
61923: PUSH
61924: LD_INT 9
61926: PUSH
61927: LD_INT 10
61929: PUSH
61930: LD_INT 11
61932: PUSH
61933: LD_INT 12
61935: PUSH
61936: LD_INT 14
61938: PUSH
61939: LD_INT 15
61941: PUSH
61942: LD_INT 16
61944: PUSH
61945: LD_INT 17
61947: PUSH
61948: LD_INT 18
61950: PUSH
61951: LD_INT 19
61953: PUSH
61954: LD_INT 20
61956: PUSH
61957: LD_INT 21
61959: PUSH
61960: LD_INT 22
61962: PUSH
61963: LD_INT 23
61965: PUSH
61966: LD_INT 24
61968: PUSH
61969: LD_INT 25
61971: PUSH
61972: LD_INT 26
61974: PUSH
61975: LD_INT 27
61977: PUSH
61978: LD_INT 28
61980: PUSH
61981: LD_INT 30
61983: PUSH
61984: LD_INT 31
61986: PUSH
61987: LD_INT 32
61989: PUSH
61990: LD_INT 33
61992: PUSH
61993: LD_INT 34
61995: PUSH
61996: LD_INT 36
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 101
62034: PUSH
62035: LD_INT 102
62037: PUSH
62038: LD_INT 103
62040: PUSH
62041: LD_INT 104
62043: PUSH
62044: LD_INT 105
62046: PUSH
62047: LD_INT 106
62049: PUSH
62050: LD_INT 107
62052: PUSH
62053: LD_INT 108
62055: PUSH
62056: LD_INT 109
62058: PUSH
62059: LD_INT 110
62061: PUSH
62062: LD_INT 111
62064: PUSH
62065: LD_INT 112
62067: PUSH
62068: LD_INT 113
62070: PUSH
62071: LD_INT 114
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: ST_TO_ADDR
62094: GO 63261
62096: LD_INT 14
62098: DOUBLE
62099: EQUAL
62100: IFTRUE 62104
62102: GO 62316
62104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
62105: LD_ADDR_VAR 0 1
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: LD_INT 5
62124: PUSH
62125: LD_INT 6
62127: PUSH
62128: LD_INT 7
62130: PUSH
62131: LD_INT 8
62133: PUSH
62134: LD_INT 9
62136: PUSH
62137: LD_INT 10
62139: PUSH
62140: LD_INT 11
62142: PUSH
62143: LD_INT 12
62145: PUSH
62146: LD_INT 13
62148: PUSH
62149: LD_INT 14
62151: PUSH
62152: LD_INT 15
62154: PUSH
62155: LD_INT 16
62157: PUSH
62158: LD_INT 17
62160: PUSH
62161: LD_INT 18
62163: PUSH
62164: LD_INT 19
62166: PUSH
62167: LD_INT 20
62169: PUSH
62170: LD_INT 21
62172: PUSH
62173: LD_INT 22
62175: PUSH
62176: LD_INT 23
62178: PUSH
62179: LD_INT 24
62181: PUSH
62182: LD_INT 25
62184: PUSH
62185: LD_INT 26
62187: PUSH
62188: LD_INT 27
62190: PUSH
62191: LD_INT 28
62193: PUSH
62194: LD_INT 29
62196: PUSH
62197: LD_INT 30
62199: PUSH
62200: LD_INT 31
62202: PUSH
62203: LD_INT 32
62205: PUSH
62206: LD_INT 33
62208: PUSH
62209: LD_INT 34
62211: PUSH
62212: LD_INT 36
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 101
62254: PUSH
62255: LD_INT 102
62257: PUSH
62258: LD_INT 103
62260: PUSH
62261: LD_INT 104
62263: PUSH
62264: LD_INT 105
62266: PUSH
62267: LD_INT 106
62269: PUSH
62270: LD_INT 107
62272: PUSH
62273: LD_INT 108
62275: PUSH
62276: LD_INT 109
62278: PUSH
62279: LD_INT 110
62281: PUSH
62282: LD_INT 111
62284: PUSH
62285: LD_INT 112
62287: PUSH
62288: LD_INT 113
62290: PUSH
62291: LD_INT 114
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: ST_TO_ADDR
62314: GO 63261
62316: LD_INT 15
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62324
62322: GO 62536
62324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
62325: LD_ADDR_VAR 0 1
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 4
62341: PUSH
62342: LD_INT 5
62344: PUSH
62345: LD_INT 6
62347: PUSH
62348: LD_INT 7
62350: PUSH
62351: LD_INT 8
62353: PUSH
62354: LD_INT 9
62356: PUSH
62357: LD_INT 10
62359: PUSH
62360: LD_INT 11
62362: PUSH
62363: LD_INT 12
62365: PUSH
62366: LD_INT 13
62368: PUSH
62369: LD_INT 14
62371: PUSH
62372: LD_INT 15
62374: PUSH
62375: LD_INT 16
62377: PUSH
62378: LD_INT 17
62380: PUSH
62381: LD_INT 18
62383: PUSH
62384: LD_INT 19
62386: PUSH
62387: LD_INT 20
62389: PUSH
62390: LD_INT 21
62392: PUSH
62393: LD_INT 22
62395: PUSH
62396: LD_INT 23
62398: PUSH
62399: LD_INT 24
62401: PUSH
62402: LD_INT 25
62404: PUSH
62405: LD_INT 26
62407: PUSH
62408: LD_INT 27
62410: PUSH
62411: LD_INT 28
62413: PUSH
62414: LD_INT 29
62416: PUSH
62417: LD_INT 30
62419: PUSH
62420: LD_INT 31
62422: PUSH
62423: LD_INT 32
62425: PUSH
62426: LD_INT 33
62428: PUSH
62429: LD_INT 34
62431: PUSH
62432: LD_INT 36
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 101
62474: PUSH
62475: LD_INT 102
62477: PUSH
62478: LD_INT 103
62480: PUSH
62481: LD_INT 104
62483: PUSH
62484: LD_INT 105
62486: PUSH
62487: LD_INT 106
62489: PUSH
62490: LD_INT 107
62492: PUSH
62493: LD_INT 108
62495: PUSH
62496: LD_INT 109
62498: PUSH
62499: LD_INT 110
62501: PUSH
62502: LD_INT 111
62504: PUSH
62505: LD_INT 112
62507: PUSH
62508: LD_INT 113
62510: PUSH
62511: LD_INT 114
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: ST_TO_ADDR
62534: GO 63261
62536: LD_INT 16
62538: DOUBLE
62539: EQUAL
62540: IFTRUE 62544
62542: GO 62668
62544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
62545: LD_ADDR_VAR 0 1
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 4
62555: PUSH
62556: LD_INT 5
62558: PUSH
62559: LD_INT 7
62561: PUSH
62562: LD_INT 11
62564: PUSH
62565: LD_INT 12
62567: PUSH
62568: LD_INT 15
62570: PUSH
62571: LD_INT 16
62573: PUSH
62574: LD_INT 20
62576: PUSH
62577: LD_INT 21
62579: PUSH
62580: LD_INT 22
62582: PUSH
62583: LD_INT 23
62585: PUSH
62586: LD_INT 25
62588: PUSH
62589: LD_INT 26
62591: PUSH
62592: LD_INT 30
62594: PUSH
62595: LD_INT 31
62597: PUSH
62598: LD_INT 32
62600: PUSH
62601: LD_INT 33
62603: PUSH
62604: LD_INT 34
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 101
62630: PUSH
62631: LD_INT 102
62633: PUSH
62634: LD_INT 103
62636: PUSH
62637: LD_INT 106
62639: PUSH
62640: LD_INT 108
62642: PUSH
62643: LD_INT 112
62645: PUSH
62646: LD_INT 113
62648: PUSH
62649: LD_INT 114
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: ST_TO_ADDR
62666: GO 63261
62668: LD_INT 17
62670: DOUBLE
62671: EQUAL
62672: IFTRUE 62676
62674: GO 62888
62676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
62677: LD_ADDR_VAR 0 1
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: LD_INT 3
62690: PUSH
62691: LD_INT 4
62693: PUSH
62694: LD_INT 5
62696: PUSH
62697: LD_INT 6
62699: PUSH
62700: LD_INT 7
62702: PUSH
62703: LD_INT 8
62705: PUSH
62706: LD_INT 9
62708: PUSH
62709: LD_INT 10
62711: PUSH
62712: LD_INT 11
62714: PUSH
62715: LD_INT 12
62717: PUSH
62718: LD_INT 13
62720: PUSH
62721: LD_INT 14
62723: PUSH
62724: LD_INT 15
62726: PUSH
62727: LD_INT 16
62729: PUSH
62730: LD_INT 17
62732: PUSH
62733: LD_INT 18
62735: PUSH
62736: LD_INT 19
62738: PUSH
62739: LD_INT 20
62741: PUSH
62742: LD_INT 21
62744: PUSH
62745: LD_INT 22
62747: PUSH
62748: LD_INT 23
62750: PUSH
62751: LD_INT 24
62753: PUSH
62754: LD_INT 25
62756: PUSH
62757: LD_INT 26
62759: PUSH
62760: LD_INT 27
62762: PUSH
62763: LD_INT 28
62765: PUSH
62766: LD_INT 29
62768: PUSH
62769: LD_INT 30
62771: PUSH
62772: LD_INT 31
62774: PUSH
62775: LD_INT 32
62777: PUSH
62778: LD_INT 33
62780: PUSH
62781: LD_INT 34
62783: PUSH
62784: LD_INT 36
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 101
62826: PUSH
62827: LD_INT 102
62829: PUSH
62830: LD_INT 103
62832: PUSH
62833: LD_INT 104
62835: PUSH
62836: LD_INT 105
62838: PUSH
62839: LD_INT 106
62841: PUSH
62842: LD_INT 107
62844: PUSH
62845: LD_INT 108
62847: PUSH
62848: LD_INT 109
62850: PUSH
62851: LD_INT 110
62853: PUSH
62854: LD_INT 111
62856: PUSH
62857: LD_INT 112
62859: PUSH
62860: LD_INT 113
62862: PUSH
62863: LD_INT 114
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: ST_TO_ADDR
62886: GO 63261
62888: LD_INT 18
62890: DOUBLE
62891: EQUAL
62892: IFTRUE 62896
62894: GO 63032
62896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
62897: LD_ADDR_VAR 0 1
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: LD_INT 4
62907: PUSH
62908: LD_INT 5
62910: PUSH
62911: LD_INT 7
62913: PUSH
62914: LD_INT 11
62916: PUSH
62917: LD_INT 12
62919: PUSH
62920: LD_INT 15
62922: PUSH
62923: LD_INT 16
62925: PUSH
62926: LD_INT 20
62928: PUSH
62929: LD_INT 21
62931: PUSH
62932: LD_INT 22
62934: PUSH
62935: LD_INT 23
62937: PUSH
62938: LD_INT 25
62940: PUSH
62941: LD_INT 26
62943: PUSH
62944: LD_INT 30
62946: PUSH
62947: LD_INT 31
62949: PUSH
62950: LD_INT 32
62952: PUSH
62953: LD_INT 33
62955: PUSH
62956: LD_INT 34
62958: PUSH
62959: LD_INT 35
62961: PUSH
62962: LD_INT 36
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 101
62990: PUSH
62991: LD_INT 102
62993: PUSH
62994: LD_INT 103
62996: PUSH
62997: LD_INT 106
62999: PUSH
63000: LD_INT 108
63002: PUSH
63003: LD_INT 112
63005: PUSH
63006: LD_INT 113
63008: PUSH
63009: LD_INT 114
63011: PUSH
63012: LD_INT 115
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: ST_TO_ADDR
63030: GO 63261
63032: LD_INT 19
63034: DOUBLE
63035: EQUAL
63036: IFTRUE 63040
63038: GO 63260
63040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
63041: LD_ADDR_VAR 0 1
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: LD_INT 4
63057: PUSH
63058: LD_INT 5
63060: PUSH
63061: LD_INT 6
63063: PUSH
63064: LD_INT 7
63066: PUSH
63067: LD_INT 8
63069: PUSH
63070: LD_INT 9
63072: PUSH
63073: LD_INT 10
63075: PUSH
63076: LD_INT 11
63078: PUSH
63079: LD_INT 12
63081: PUSH
63082: LD_INT 13
63084: PUSH
63085: LD_INT 14
63087: PUSH
63088: LD_INT 15
63090: PUSH
63091: LD_INT 16
63093: PUSH
63094: LD_INT 17
63096: PUSH
63097: LD_INT 18
63099: PUSH
63100: LD_INT 19
63102: PUSH
63103: LD_INT 20
63105: PUSH
63106: LD_INT 21
63108: PUSH
63109: LD_INT 22
63111: PUSH
63112: LD_INT 23
63114: PUSH
63115: LD_INT 24
63117: PUSH
63118: LD_INT 25
63120: PUSH
63121: LD_INT 26
63123: PUSH
63124: LD_INT 27
63126: PUSH
63127: LD_INT 28
63129: PUSH
63130: LD_INT 29
63132: PUSH
63133: LD_INT 30
63135: PUSH
63136: LD_INT 31
63138: PUSH
63139: LD_INT 32
63141: PUSH
63142: LD_INT 33
63144: PUSH
63145: LD_INT 34
63147: PUSH
63148: LD_INT 35
63150: PUSH
63151: LD_INT 36
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 101
63194: PUSH
63195: LD_INT 102
63197: PUSH
63198: LD_INT 103
63200: PUSH
63201: LD_INT 104
63203: PUSH
63204: LD_INT 105
63206: PUSH
63207: LD_INT 106
63209: PUSH
63210: LD_INT 107
63212: PUSH
63213: LD_INT 108
63215: PUSH
63216: LD_INT 109
63218: PUSH
63219: LD_INT 110
63221: PUSH
63222: LD_INT 111
63224: PUSH
63225: LD_INT 112
63227: PUSH
63228: LD_INT 113
63230: PUSH
63231: LD_INT 114
63233: PUSH
63234: LD_INT 115
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: ST_TO_ADDR
63258: GO 63261
63260: POP
// end else
63261: GO 63480
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
63263: LD_ADDR_VAR 0 1
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: LD_INT 4
63279: PUSH
63280: LD_INT 5
63282: PUSH
63283: LD_INT 6
63285: PUSH
63286: LD_INT 7
63288: PUSH
63289: LD_INT 8
63291: PUSH
63292: LD_INT 9
63294: PUSH
63295: LD_INT 10
63297: PUSH
63298: LD_INT 11
63300: PUSH
63301: LD_INT 12
63303: PUSH
63304: LD_INT 13
63306: PUSH
63307: LD_INT 14
63309: PUSH
63310: LD_INT 15
63312: PUSH
63313: LD_INT 16
63315: PUSH
63316: LD_INT 17
63318: PUSH
63319: LD_INT 18
63321: PUSH
63322: LD_INT 19
63324: PUSH
63325: LD_INT 20
63327: PUSH
63328: LD_INT 21
63330: PUSH
63331: LD_INT 22
63333: PUSH
63334: LD_INT 23
63336: PUSH
63337: LD_INT 24
63339: PUSH
63340: LD_INT 25
63342: PUSH
63343: LD_INT 26
63345: PUSH
63346: LD_INT 27
63348: PUSH
63349: LD_INT 28
63351: PUSH
63352: LD_INT 29
63354: PUSH
63355: LD_INT 30
63357: PUSH
63358: LD_INT 31
63360: PUSH
63361: LD_INT 32
63363: PUSH
63364: LD_INT 33
63366: PUSH
63367: LD_INT 34
63369: PUSH
63370: LD_INT 35
63372: PUSH
63373: LD_INT 36
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 101
63416: PUSH
63417: LD_INT 102
63419: PUSH
63420: LD_INT 103
63422: PUSH
63423: LD_INT 104
63425: PUSH
63426: LD_INT 105
63428: PUSH
63429: LD_INT 106
63431: PUSH
63432: LD_INT 107
63434: PUSH
63435: LD_INT 108
63437: PUSH
63438: LD_INT 109
63440: PUSH
63441: LD_INT 110
63443: PUSH
63444: LD_INT 111
63446: PUSH
63447: LD_INT 112
63449: PUSH
63450: LD_INT 113
63452: PUSH
63453: LD_INT 114
63455: PUSH
63456: LD_INT 115
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: ST_TO_ADDR
// if result then
63480: LD_VAR 0 1
63484: IFFALSE 63773
// begin normal :=  ;
63486: LD_ADDR_VAR 0 3
63490: PUSH
63491: LD_STRING 
63493: ST_TO_ADDR
// hardcore :=  ;
63494: LD_ADDR_VAR 0 4
63498: PUSH
63499: LD_STRING 
63501: ST_TO_ADDR
// for i = 1 to normalCounter do
63502: LD_ADDR_VAR 0 5
63506: PUSH
63507: DOUBLE
63508: LD_INT 1
63510: DEC
63511: ST_TO_ADDR
63512: LD_EXP 45
63516: PUSH
63517: FOR_TO
63518: IFFALSE 63619
// begin tmp := 0 ;
63520: LD_ADDR_VAR 0 2
63524: PUSH
63525: LD_STRING 0
63527: ST_TO_ADDR
// if result [ 1 ] then
63528: LD_VAR 0 1
63532: PUSH
63533: LD_INT 1
63535: ARRAY
63536: IFFALSE 63601
// if result [ 1 ] [ 1 ] = i then
63538: LD_VAR 0 1
63542: PUSH
63543: LD_INT 1
63545: ARRAY
63546: PUSH
63547: LD_INT 1
63549: ARRAY
63550: PUSH
63551: LD_VAR 0 5
63555: EQUAL
63556: IFFALSE 63601
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63558: LD_ADDR_VAR 0 1
63562: PUSH
63563: LD_VAR 0 1
63567: PPUSH
63568: LD_INT 1
63570: PPUSH
63571: LD_VAR 0 1
63575: PUSH
63576: LD_INT 1
63578: ARRAY
63579: PPUSH
63580: LD_INT 1
63582: PPUSH
63583: CALL_OW 3
63587: PPUSH
63588: CALL_OW 1
63592: ST_TO_ADDR
// tmp := 1 ;
63593: LD_ADDR_VAR 0 2
63597: PUSH
63598: LD_STRING 1
63600: ST_TO_ADDR
// end ; normal := normal & tmp ;
63601: LD_ADDR_VAR 0 3
63605: PUSH
63606: LD_VAR 0 3
63610: PUSH
63611: LD_VAR 0 2
63615: STR
63616: ST_TO_ADDR
// end ;
63617: GO 63517
63619: POP
63620: POP
// for i = 1 to hardcoreCounter do
63621: LD_ADDR_VAR 0 5
63625: PUSH
63626: DOUBLE
63627: LD_INT 1
63629: DEC
63630: ST_TO_ADDR
63631: LD_EXP 46
63635: PUSH
63636: FOR_TO
63637: IFFALSE 63742
// begin tmp := 0 ;
63639: LD_ADDR_VAR 0 2
63643: PUSH
63644: LD_STRING 0
63646: ST_TO_ADDR
// if result [ 2 ] then
63647: LD_VAR 0 1
63651: PUSH
63652: LD_INT 2
63654: ARRAY
63655: IFFALSE 63724
// if result [ 2 ] [ 1 ] = 100 + i then
63657: LD_VAR 0 1
63661: PUSH
63662: LD_INT 2
63664: ARRAY
63665: PUSH
63666: LD_INT 1
63668: ARRAY
63669: PUSH
63670: LD_INT 100
63672: PUSH
63673: LD_VAR 0 5
63677: PLUS
63678: EQUAL
63679: IFFALSE 63724
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63681: LD_ADDR_VAR 0 1
63685: PUSH
63686: LD_VAR 0 1
63690: PPUSH
63691: LD_INT 2
63693: PPUSH
63694: LD_VAR 0 1
63698: PUSH
63699: LD_INT 2
63701: ARRAY
63702: PPUSH
63703: LD_INT 1
63705: PPUSH
63706: CALL_OW 3
63710: PPUSH
63711: CALL_OW 1
63715: ST_TO_ADDR
// tmp := 1 ;
63716: LD_ADDR_VAR 0 2
63720: PUSH
63721: LD_STRING 1
63723: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63724: LD_ADDR_VAR 0 4
63728: PUSH
63729: LD_VAR 0 4
63733: PUSH
63734: LD_VAR 0 2
63738: STR
63739: ST_TO_ADDR
// end ;
63740: GO 63636
63742: POP
63743: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
63744: LD_STRING getStreamItemsFromMission("
63746: PUSH
63747: LD_VAR 0 3
63751: STR
63752: PUSH
63753: LD_STRING ","
63755: STR
63756: PUSH
63757: LD_VAR 0 4
63761: STR
63762: PUSH
63763: LD_STRING ")
63765: STR
63766: PPUSH
63767: CALL_OW 559
// end else
63771: GO 63780
// ToLua ( getStreamItemsFromMission("","") ) ;
63773: LD_STRING getStreamItemsFromMission("","")
63775: PPUSH
63776: CALL_OW 559
// end ;
63780: LD_VAR 0 1
63784: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63785: LD_EXP 44
63789: PUSH
63790: LD_EXP 49
63794: AND
63795: IFFALSE 63919
63797: GO 63799
63799: DISABLE
63800: LD_INT 0
63802: PPUSH
63803: PPUSH
// begin enable ;
63804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63805: LD_ADDR_VAR 0 2
63809: PUSH
63810: LD_INT 22
63812: PUSH
63813: LD_OWVAR 2
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 34
63827: PUSH
63828: LD_INT 7
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 34
63837: PUSH
63838: LD_INT 45
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 34
63847: PUSH
63848: LD_INT 28
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 34
63857: PUSH
63858: LD_INT 47
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PPUSH
63876: CALL_OW 69
63880: ST_TO_ADDR
// if not tmp then
63881: LD_VAR 0 2
63885: NOT
63886: IFFALSE 63890
// exit ;
63888: GO 63919
// for i in tmp do
63890: LD_ADDR_VAR 0 1
63894: PUSH
63895: LD_VAR 0 2
63899: PUSH
63900: FOR_IN
63901: IFFALSE 63917
// begin SetLives ( i , 0 ) ;
63903: LD_VAR 0 1
63907: PPUSH
63908: LD_INT 0
63910: PPUSH
63911: CALL_OW 234
// end ;
63915: GO 63900
63917: POP
63918: POP
// end ;
63919: PPOPN 2
63921: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63922: LD_EXP 44
63926: PUSH
63927: LD_EXP 50
63931: AND
63932: IFFALSE 64016
63934: GO 63936
63936: DISABLE
63937: LD_INT 0
63939: PPUSH
63940: PPUSH
// begin enable ;
63941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63942: LD_ADDR_VAR 0 2
63946: PUSH
63947: LD_INT 22
63949: PUSH
63950: LD_OWVAR 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 32
63961: PUSH
63962: LD_INT 3
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PPUSH
63973: CALL_OW 69
63977: ST_TO_ADDR
// if not tmp then
63978: LD_VAR 0 2
63982: NOT
63983: IFFALSE 63987
// exit ;
63985: GO 64016
// for i in tmp do
63987: LD_ADDR_VAR 0 1
63991: PUSH
63992: LD_VAR 0 2
63996: PUSH
63997: FOR_IN
63998: IFFALSE 64014
// begin SetLives ( i , 0 ) ;
64000: LD_VAR 0 1
64004: PPUSH
64005: LD_INT 0
64007: PPUSH
64008: CALL_OW 234
// end ;
64012: GO 63997
64014: POP
64015: POP
// end ;
64016: PPOPN 2
64018: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64019: LD_EXP 44
64023: PUSH
64024: LD_EXP 47
64028: AND
64029: IFFALSE 64122
64031: GO 64033
64033: DISABLE
64034: LD_INT 0
64036: PPUSH
// begin enable ;
64037: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64038: LD_ADDR_VAR 0 1
64042: PUSH
64043: LD_INT 22
64045: PUSH
64046: LD_OWVAR 2
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: LD_INT 25
64060: PUSH
64061: LD_INT 5
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 25
64070: PUSH
64071: LD_INT 9
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 25
64080: PUSH
64081: LD_INT 8
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PPUSH
64098: CALL_OW 69
64102: PUSH
64103: FOR_IN
64104: IFFALSE 64120
// begin SetClass ( i , 1 ) ;
64106: LD_VAR 0 1
64110: PPUSH
64111: LD_INT 1
64113: PPUSH
64114: CALL_OW 336
// end ;
64118: GO 64103
64120: POP
64121: POP
// end ;
64122: PPOPN 1
64124: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64125: LD_EXP 44
64129: PUSH
64130: LD_EXP 48
64134: AND
64135: PUSH
64136: LD_OWVAR 65
64140: PUSH
64141: LD_INT 7
64143: LESS
64144: AND
64145: IFFALSE 64159
64147: GO 64149
64149: DISABLE
// begin enable ;
64150: ENABLE
// game_speed := 7 ;
64151: LD_ADDR_OWVAR 65
64155: PUSH
64156: LD_INT 7
64158: ST_TO_ADDR
// end ;
64159: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64160: LD_EXP 44
64164: PUSH
64165: LD_EXP 51
64169: AND
64170: IFFALSE 64372
64172: GO 64174
64174: DISABLE
64175: LD_INT 0
64177: PPUSH
64178: PPUSH
64179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64180: LD_ADDR_VAR 0 3
64184: PUSH
64185: LD_INT 81
64187: PUSH
64188: LD_OWVAR 2
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 21
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PPUSH
64211: CALL_OW 69
64215: ST_TO_ADDR
// if not tmp then
64216: LD_VAR 0 3
64220: NOT
64221: IFFALSE 64225
// exit ;
64223: GO 64372
// if tmp > 5 then
64225: LD_VAR 0 3
64229: PUSH
64230: LD_INT 5
64232: GREATER
64233: IFFALSE 64245
// k := 5 else
64235: LD_ADDR_VAR 0 2
64239: PUSH
64240: LD_INT 5
64242: ST_TO_ADDR
64243: GO 64255
// k := tmp ;
64245: LD_ADDR_VAR 0 2
64249: PUSH
64250: LD_VAR 0 3
64254: ST_TO_ADDR
// for i := 1 to k do
64255: LD_ADDR_VAR 0 1
64259: PUSH
64260: DOUBLE
64261: LD_INT 1
64263: DEC
64264: ST_TO_ADDR
64265: LD_VAR 0 2
64269: PUSH
64270: FOR_TO
64271: IFFALSE 64370
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64273: LD_VAR 0 3
64277: PUSH
64278: LD_VAR 0 1
64282: ARRAY
64283: PPUSH
64284: LD_VAR 0 1
64288: PUSH
64289: LD_INT 4
64291: MOD
64292: PUSH
64293: LD_INT 1
64295: PLUS
64296: PPUSH
64297: CALL_OW 259
64301: PUSH
64302: LD_INT 10
64304: LESS
64305: IFFALSE 64368
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64307: LD_VAR 0 3
64311: PUSH
64312: LD_VAR 0 1
64316: ARRAY
64317: PPUSH
64318: LD_VAR 0 1
64322: PUSH
64323: LD_INT 4
64325: MOD
64326: PUSH
64327: LD_INT 1
64329: PLUS
64330: PPUSH
64331: LD_VAR 0 3
64335: PUSH
64336: LD_VAR 0 1
64340: ARRAY
64341: PPUSH
64342: LD_VAR 0 1
64346: PUSH
64347: LD_INT 4
64349: MOD
64350: PUSH
64351: LD_INT 1
64353: PLUS
64354: PPUSH
64355: CALL_OW 259
64359: PUSH
64360: LD_INT 1
64362: PLUS
64363: PPUSH
64364: CALL_OW 237
64368: GO 64270
64370: POP
64371: POP
// end ;
64372: PPOPN 3
64374: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64375: LD_EXP 44
64379: PUSH
64380: LD_EXP 52
64384: AND
64385: IFFALSE 64405
64387: GO 64389
64389: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64390: LD_INT 4
64392: PPUSH
64393: LD_OWVAR 2
64397: PPUSH
64398: LD_INT 0
64400: PPUSH
64401: CALL_OW 324
64405: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64406: LD_EXP 44
64410: PUSH
64411: LD_EXP 81
64415: AND
64416: IFFALSE 64436
64418: GO 64420
64420: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64421: LD_INT 19
64423: PPUSH
64424: LD_OWVAR 2
64428: PPUSH
64429: LD_INT 0
64431: PPUSH
64432: CALL_OW 324
64436: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64437: LD_EXP 44
64441: PUSH
64442: LD_EXP 53
64446: AND
64447: IFFALSE 64549
64449: GO 64451
64451: DISABLE
64452: LD_INT 0
64454: PPUSH
64455: PPUSH
// begin enable ;
64456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64457: LD_ADDR_VAR 0 2
64461: PUSH
64462: LD_INT 22
64464: PUSH
64465: LD_OWVAR 2
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: LD_INT 34
64479: PUSH
64480: LD_INT 11
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 34
64489: PUSH
64490: LD_INT 30
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PPUSH
64506: CALL_OW 69
64510: ST_TO_ADDR
// if not tmp then
64511: LD_VAR 0 2
64515: NOT
64516: IFFALSE 64520
// exit ;
64518: GO 64549
// for i in tmp do
64520: LD_ADDR_VAR 0 1
64524: PUSH
64525: LD_VAR 0 2
64529: PUSH
64530: FOR_IN
64531: IFFALSE 64547
// begin SetLives ( i , 0 ) ;
64533: LD_VAR 0 1
64537: PPUSH
64538: LD_INT 0
64540: PPUSH
64541: CALL_OW 234
// end ;
64545: GO 64530
64547: POP
64548: POP
// end ;
64549: PPOPN 2
64551: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64552: LD_EXP 44
64556: PUSH
64557: LD_EXP 54
64561: AND
64562: IFFALSE 64582
64564: GO 64566
64566: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64567: LD_INT 32
64569: PPUSH
64570: LD_OWVAR 2
64574: PPUSH
64575: LD_INT 0
64577: PPUSH
64578: CALL_OW 324
64582: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64583: LD_EXP 44
64587: PUSH
64588: LD_EXP 55
64592: AND
64593: IFFALSE 64774
64595: GO 64597
64597: DISABLE
64598: LD_INT 0
64600: PPUSH
64601: PPUSH
64602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64603: LD_ADDR_VAR 0 2
64607: PUSH
64608: LD_INT 22
64610: PUSH
64611: LD_OWVAR 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 33
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PPUSH
64634: CALL_OW 69
64638: ST_TO_ADDR
// if not tmp then
64639: LD_VAR 0 2
64643: NOT
64644: IFFALSE 64648
// exit ;
64646: GO 64774
// side := 0 ;
64648: LD_ADDR_VAR 0 3
64652: PUSH
64653: LD_INT 0
64655: ST_TO_ADDR
// for i := 1 to 8 do
64656: LD_ADDR_VAR 0 1
64660: PUSH
64661: DOUBLE
64662: LD_INT 1
64664: DEC
64665: ST_TO_ADDR
64666: LD_INT 8
64668: PUSH
64669: FOR_TO
64670: IFFALSE 64718
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64672: LD_OWVAR 2
64676: PUSH
64677: LD_VAR 0 1
64681: NONEQUAL
64682: PUSH
64683: LD_OWVAR 2
64687: PPUSH
64688: LD_VAR 0 1
64692: PPUSH
64693: CALL_OW 81
64697: PUSH
64698: LD_INT 2
64700: EQUAL
64701: AND
64702: IFFALSE 64716
// begin side := i ;
64704: LD_ADDR_VAR 0 3
64708: PUSH
64709: LD_VAR 0 1
64713: ST_TO_ADDR
// break ;
64714: GO 64718
// end ;
64716: GO 64669
64718: POP
64719: POP
// if not side then
64720: LD_VAR 0 3
64724: NOT
64725: IFFALSE 64729
// exit ;
64727: GO 64774
// for i := 1 to tmp do
64729: LD_ADDR_VAR 0 1
64733: PUSH
64734: DOUBLE
64735: LD_INT 1
64737: DEC
64738: ST_TO_ADDR
64739: LD_VAR 0 2
64743: PUSH
64744: FOR_TO
64745: IFFALSE 64772
// if Prob ( 60 ) then
64747: LD_INT 60
64749: PPUSH
64750: CALL_OW 13
64754: IFFALSE 64770
// SetSide ( i , side ) ;
64756: LD_VAR 0 1
64760: PPUSH
64761: LD_VAR 0 3
64765: PPUSH
64766: CALL_OW 235
64770: GO 64744
64772: POP
64773: POP
// end ;
64774: PPOPN 3
64776: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64777: LD_EXP 44
64781: PUSH
64782: LD_EXP 57
64786: AND
64787: IFFALSE 64906
64789: GO 64791
64791: DISABLE
64792: LD_INT 0
64794: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64795: LD_ADDR_VAR 0 1
64799: PUSH
64800: LD_INT 22
64802: PUSH
64803: LD_OWVAR 2
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 21
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: LD_INT 23
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: PPUSH
64844: CALL_OW 69
64848: PUSH
64849: FOR_IN
64850: IFFALSE 64904
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 257
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: LD_INT 3
64870: PUSH
64871: LD_INT 4
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: IN
64880: IFFALSE 64902
// SetClass ( un , rand ( 1 , 4 ) ) ;
64882: LD_VAR 0 1
64886: PPUSH
64887: LD_INT 1
64889: PPUSH
64890: LD_INT 4
64892: PPUSH
64893: CALL_OW 12
64897: PPUSH
64898: CALL_OW 336
64902: GO 64849
64904: POP
64905: POP
// end ;
64906: PPOPN 1
64908: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64909: LD_EXP 44
64913: PUSH
64914: LD_EXP 56
64918: AND
64919: IFFALSE 64998
64921: GO 64923
64923: DISABLE
64924: LD_INT 0
64926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64927: LD_ADDR_VAR 0 1
64931: PUSH
64932: LD_INT 22
64934: PUSH
64935: LD_OWVAR 2
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 21
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PPUSH
64958: CALL_OW 69
64962: ST_TO_ADDR
// if not tmp then
64963: LD_VAR 0 1
64967: NOT
64968: IFFALSE 64972
// exit ;
64970: GO 64998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 1
64979: PPUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: CALL_OW 12
64989: ARRAY
64990: PPUSH
64991: LD_INT 100
64993: PPUSH
64994: CALL_OW 234
// end ;
64998: PPOPN 1
65000: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65001: LD_EXP 44
65005: PUSH
65006: LD_EXP 58
65010: AND
65011: IFFALSE 65109
65013: GO 65015
65015: DISABLE
65016: LD_INT 0
65018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65019: LD_ADDR_VAR 0 1
65023: PUSH
65024: LD_INT 22
65026: PUSH
65027: LD_OWVAR 2
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 21
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PPUSH
65050: CALL_OW 69
65054: ST_TO_ADDR
// if not tmp then
65055: LD_VAR 0 1
65059: NOT
65060: IFFALSE 65064
// exit ;
65062: GO 65109
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65064: LD_VAR 0 1
65068: PUSH
65069: LD_INT 1
65071: PPUSH
65072: LD_VAR 0 1
65076: PPUSH
65077: CALL_OW 12
65081: ARRAY
65082: PPUSH
65083: LD_INT 1
65085: PPUSH
65086: LD_INT 4
65088: PPUSH
65089: CALL_OW 12
65093: PPUSH
65094: LD_INT 3000
65096: PPUSH
65097: LD_INT 9000
65099: PPUSH
65100: CALL_OW 12
65104: PPUSH
65105: CALL_OW 492
// end ;
65109: PPOPN 1
65111: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65112: LD_EXP 44
65116: PUSH
65117: LD_EXP 59
65121: AND
65122: IFFALSE 65142
65124: GO 65126
65126: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65127: LD_INT 1
65129: PPUSH
65130: LD_OWVAR 2
65134: PPUSH
65135: LD_INT 0
65137: PPUSH
65138: CALL_OW 324
65142: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65143: LD_EXP 44
65147: PUSH
65148: LD_EXP 60
65152: AND
65153: IFFALSE 65236
65155: GO 65157
65157: DISABLE
65158: LD_INT 0
65160: PPUSH
65161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65162: LD_ADDR_VAR 0 2
65166: PUSH
65167: LD_INT 22
65169: PUSH
65170: LD_OWVAR 2
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 21
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PPUSH
65193: CALL_OW 69
65197: ST_TO_ADDR
// if not tmp then
65198: LD_VAR 0 2
65202: NOT
65203: IFFALSE 65207
// exit ;
65205: GO 65236
// for i in tmp do
65207: LD_ADDR_VAR 0 1
65211: PUSH
65212: LD_VAR 0 2
65216: PUSH
65217: FOR_IN
65218: IFFALSE 65234
// SetBLevel ( i , 10 ) ;
65220: LD_VAR 0 1
65224: PPUSH
65225: LD_INT 10
65227: PPUSH
65228: CALL_OW 241
65232: GO 65217
65234: POP
65235: POP
// end ;
65236: PPOPN 2
65238: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65239: LD_EXP 44
65243: PUSH
65244: LD_EXP 61
65248: AND
65249: IFFALSE 65360
65251: GO 65253
65253: DISABLE
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
65258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_INT 22
65266: PUSH
65267: LD_OWVAR 2
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 25
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PPUSH
65290: CALL_OW 69
65294: ST_TO_ADDR
// if not tmp then
65295: LD_VAR 0 3
65299: NOT
65300: IFFALSE 65304
// exit ;
65302: GO 65360
// un := tmp [ rand ( 1 , tmp ) ] ;
65304: LD_ADDR_VAR 0 2
65308: PUSH
65309: LD_VAR 0 3
65313: PUSH
65314: LD_INT 1
65316: PPUSH
65317: LD_VAR 0 3
65321: PPUSH
65322: CALL_OW 12
65326: ARRAY
65327: ST_TO_ADDR
// if Crawls ( un ) then
65328: LD_VAR 0 2
65332: PPUSH
65333: CALL_OW 318
65337: IFFALSE 65348
// ComWalk ( un ) ;
65339: LD_VAR 0 2
65343: PPUSH
65344: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65348: LD_VAR 0 2
65352: PPUSH
65353: LD_INT 5
65355: PPUSH
65356: CALL_OW 336
// end ;
65360: PPOPN 3
65362: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
65363: LD_EXP 44
65367: PUSH
65368: LD_EXP 62
65372: AND
65373: PUSH
65374: LD_OWVAR 67
65378: PUSH
65379: LD_INT 3
65381: LESS
65382: AND
65383: IFFALSE 65402
65385: GO 65387
65387: DISABLE
// Difficulty := Difficulty + 1 ;
65388: LD_ADDR_OWVAR 67
65392: PUSH
65393: LD_OWVAR 67
65397: PUSH
65398: LD_INT 1
65400: PLUS
65401: ST_TO_ADDR
65402: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65403: LD_EXP 44
65407: PUSH
65408: LD_EXP 63
65412: AND
65413: IFFALSE 65516
65415: GO 65417
65417: DISABLE
65418: LD_INT 0
65420: PPUSH
// begin for i := 1 to 5 do
65421: LD_ADDR_VAR 0 1
65425: PUSH
65426: DOUBLE
65427: LD_INT 1
65429: DEC
65430: ST_TO_ADDR
65431: LD_INT 5
65433: PUSH
65434: FOR_TO
65435: IFFALSE 65514
// begin uc_nation := nation_nature ;
65437: LD_ADDR_OWVAR 21
65441: PUSH
65442: LD_INT 0
65444: ST_TO_ADDR
// uc_side := 0 ;
65445: LD_ADDR_OWVAR 20
65449: PUSH
65450: LD_INT 0
65452: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65453: LD_ADDR_OWVAR 29
65457: PUSH
65458: LD_INT 12
65460: PUSH
65461: LD_INT 12
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// hc_agressivity := 20 ;
65468: LD_ADDR_OWVAR 35
65472: PUSH
65473: LD_INT 20
65475: ST_TO_ADDR
// hc_class := class_tiger ;
65476: LD_ADDR_OWVAR 28
65480: PUSH
65481: LD_INT 14
65483: ST_TO_ADDR
// hc_gallery :=  ;
65484: LD_ADDR_OWVAR 33
65488: PUSH
65489: LD_STRING 
65491: ST_TO_ADDR
// hc_name :=  ;
65492: LD_ADDR_OWVAR 26
65496: PUSH
65497: LD_STRING 
65499: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65500: CALL_OW 44
65504: PPUSH
65505: LD_INT 0
65507: PPUSH
65508: CALL_OW 51
// end ;
65512: GO 65434
65514: POP
65515: POP
// end ;
65516: PPOPN 1
65518: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65519: LD_EXP 44
65523: PUSH
65524: LD_EXP 64
65528: AND
65529: IFFALSE 65538
65531: GO 65533
65533: DISABLE
// StreamSibBomb ;
65534: CALL 65539 0 0
65538: END
// export function StreamSibBomb ; var i , x , y ; begin
65539: LD_INT 0
65541: PPUSH
65542: PPUSH
65543: PPUSH
65544: PPUSH
// result := false ;
65545: LD_ADDR_VAR 0 1
65549: PUSH
65550: LD_INT 0
65552: ST_TO_ADDR
// for i := 1 to 16 do
65553: LD_ADDR_VAR 0 2
65557: PUSH
65558: DOUBLE
65559: LD_INT 1
65561: DEC
65562: ST_TO_ADDR
65563: LD_INT 16
65565: PUSH
65566: FOR_TO
65567: IFFALSE 65766
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65569: LD_ADDR_VAR 0 3
65573: PUSH
65574: LD_INT 10
65576: PUSH
65577: LD_INT 20
65579: PUSH
65580: LD_INT 30
65582: PUSH
65583: LD_INT 40
65585: PUSH
65586: LD_INT 50
65588: PUSH
65589: LD_INT 60
65591: PUSH
65592: LD_INT 70
65594: PUSH
65595: LD_INT 80
65597: PUSH
65598: LD_INT 90
65600: PUSH
65601: LD_INT 100
65603: PUSH
65604: LD_INT 110
65606: PUSH
65607: LD_INT 120
65609: PUSH
65610: LD_INT 130
65612: PUSH
65613: LD_INT 140
65615: PUSH
65616: LD_INT 150
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: PPUSH
65639: LD_INT 15
65641: PPUSH
65642: CALL_OW 12
65646: ARRAY
65647: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65648: LD_ADDR_VAR 0 4
65652: PUSH
65653: LD_INT 10
65655: PUSH
65656: LD_INT 20
65658: PUSH
65659: LD_INT 30
65661: PUSH
65662: LD_INT 40
65664: PUSH
65665: LD_INT 50
65667: PUSH
65668: LD_INT 60
65670: PUSH
65671: LD_INT 70
65673: PUSH
65674: LD_INT 80
65676: PUSH
65677: LD_INT 90
65679: PUSH
65680: LD_INT 100
65682: PUSH
65683: LD_INT 110
65685: PUSH
65686: LD_INT 120
65688: PUSH
65689: LD_INT 130
65691: PUSH
65692: LD_INT 140
65694: PUSH
65695: LD_INT 150
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PPUSH
65718: LD_INT 15
65720: PPUSH
65721: CALL_OW 12
65725: ARRAY
65726: ST_TO_ADDR
// if ValidHex ( x , y ) then
65727: LD_VAR 0 3
65731: PPUSH
65732: LD_VAR 0 4
65736: PPUSH
65737: CALL_OW 488
65741: IFFALSE 65764
// begin result := [ x , y ] ;
65743: LD_ADDR_VAR 0 1
65747: PUSH
65748: LD_VAR 0 3
65752: PUSH
65753: LD_VAR 0 4
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// break ;
65762: GO 65766
// end ; end ;
65764: GO 65566
65766: POP
65767: POP
// if result then
65768: LD_VAR 0 1
65772: IFFALSE 65832
// begin ToLua ( playSibBomb() ) ;
65774: LD_STRING playSibBomb()
65776: PPUSH
65777: CALL_OW 559
// wait ( 0 0$14 ) ;
65781: LD_INT 490
65783: PPUSH
65784: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65788: LD_VAR 0 1
65792: PUSH
65793: LD_INT 1
65795: ARRAY
65796: PPUSH
65797: LD_VAR 0 1
65801: PUSH
65802: LD_INT 2
65804: ARRAY
65805: PPUSH
65806: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65810: LD_VAR 0 1
65814: PUSH
65815: LD_INT 1
65817: ARRAY
65818: PPUSH
65819: LD_VAR 0 1
65823: PUSH
65824: LD_INT 2
65826: ARRAY
65827: PPUSH
65828: CALL_OW 429
// end ; end ;
65832: LD_VAR 0 1
65836: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65837: LD_EXP 44
65841: PUSH
65842: LD_EXP 66
65846: AND
65847: IFFALSE 65859
65849: GO 65851
65851: DISABLE
// YouLost (  ) ;
65852: LD_STRING 
65854: PPUSH
65855: CALL_OW 104
65859: END
// every 0 0$1 trigger StreamModeActive and sFog do
65860: LD_EXP 44
65864: PUSH
65865: LD_EXP 65
65869: AND
65870: IFFALSE 65884
65872: GO 65874
65874: DISABLE
// FogOff ( your_side ) ;
65875: LD_OWVAR 2
65879: PPUSH
65880: CALL_OW 344
65884: END
// every 0 0$1 trigger StreamModeActive and sSun do
65885: LD_EXP 44
65889: PUSH
65890: LD_EXP 67
65894: AND
65895: IFFALSE 65923
65897: GO 65899
65899: DISABLE
// begin solar_recharge_percent := 0 ;
65900: LD_ADDR_OWVAR 79
65904: PUSH
65905: LD_INT 0
65907: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65908: LD_INT 10500
65910: PPUSH
65911: CALL_OW 67
// solar_recharge_percent := 100 ;
65915: LD_ADDR_OWVAR 79
65919: PUSH
65920: LD_INT 100
65922: ST_TO_ADDR
// end ;
65923: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65924: LD_EXP 44
65928: PUSH
65929: LD_EXP 68
65933: AND
65934: IFFALSE 66173
65936: GO 65938
65938: DISABLE
65939: LD_INT 0
65941: PPUSH
65942: PPUSH
65943: PPUSH
// begin tmp := [ ] ;
65944: LD_ADDR_VAR 0 3
65948: PUSH
65949: EMPTY
65950: ST_TO_ADDR
// for i := 1 to 6 do
65951: LD_ADDR_VAR 0 1
65955: PUSH
65956: DOUBLE
65957: LD_INT 1
65959: DEC
65960: ST_TO_ADDR
65961: LD_INT 6
65963: PUSH
65964: FOR_TO
65965: IFFALSE 66070
// begin uc_nation := nation_nature ;
65967: LD_ADDR_OWVAR 21
65971: PUSH
65972: LD_INT 0
65974: ST_TO_ADDR
// uc_side := 0 ;
65975: LD_ADDR_OWVAR 20
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65983: LD_ADDR_OWVAR 29
65987: PUSH
65988: LD_INT 12
65990: PUSH
65991: LD_INT 12
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: ST_TO_ADDR
// hc_agressivity := 20 ;
65998: LD_ADDR_OWVAR 35
66002: PUSH
66003: LD_INT 20
66005: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66006: LD_ADDR_OWVAR 28
66010: PUSH
66011: LD_INT 17
66013: ST_TO_ADDR
// hc_gallery :=  ;
66014: LD_ADDR_OWVAR 33
66018: PUSH
66019: LD_STRING 
66021: ST_TO_ADDR
// hc_name :=  ;
66022: LD_ADDR_OWVAR 26
66026: PUSH
66027: LD_STRING 
66029: ST_TO_ADDR
// un := CreateHuman ;
66030: LD_ADDR_VAR 0 2
66034: PUSH
66035: CALL_OW 44
66039: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66040: LD_VAR 0 2
66044: PPUSH
66045: LD_INT 1
66047: PPUSH
66048: CALL_OW 51
// tmp := tmp ^ un ;
66052: LD_ADDR_VAR 0 3
66056: PUSH
66057: LD_VAR 0 3
66061: PUSH
66062: LD_VAR 0 2
66066: ADD
66067: ST_TO_ADDR
// end ;
66068: GO 65964
66070: POP
66071: POP
// repeat wait ( 0 0$1 ) ;
66072: LD_INT 35
66074: PPUSH
66075: CALL_OW 67
// for un in tmp do
66079: LD_ADDR_VAR 0 2
66083: PUSH
66084: LD_VAR 0 3
66088: PUSH
66089: FOR_IN
66090: IFFALSE 66164
// begin if IsDead ( un ) then
66092: LD_VAR 0 2
66096: PPUSH
66097: CALL_OW 301
66101: IFFALSE 66121
// begin tmp := tmp diff un ;
66103: LD_ADDR_VAR 0 3
66107: PUSH
66108: LD_VAR 0 3
66112: PUSH
66113: LD_VAR 0 2
66117: DIFF
66118: ST_TO_ADDR
// continue ;
66119: GO 66089
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66121: LD_VAR 0 2
66125: PPUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 22
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PPUSH
66143: CALL_OW 69
66147: PPUSH
66148: LD_VAR 0 2
66152: PPUSH
66153: CALL_OW 74
66157: PPUSH
66158: CALL_OW 115
// end ;
66162: GO 66089
66164: POP
66165: POP
// until not tmp ;
66166: LD_VAR 0 3
66170: NOT
66171: IFFALSE 66072
// end ;
66173: PPOPN 3
66175: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66176: LD_EXP 44
66180: PUSH
66181: LD_EXP 69
66185: AND
66186: IFFALSE 66240
66188: GO 66190
66190: DISABLE
// begin ToLua ( displayTroll(); ) ;
66191: LD_STRING displayTroll();
66193: PPUSH
66194: CALL_OW 559
// wait ( 3 3$00 ) ;
66198: LD_INT 6300
66200: PPUSH
66201: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66205: LD_STRING hideTroll();
66207: PPUSH
66208: CALL_OW 559
// wait ( 1 1$00 ) ;
66212: LD_INT 2100
66214: PPUSH
66215: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66219: LD_STRING displayTroll();
66221: PPUSH
66222: CALL_OW 559
// wait ( 1 1$00 ) ;
66226: LD_INT 2100
66228: PPUSH
66229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66233: LD_STRING hideTroll();
66235: PPUSH
66236: CALL_OW 559
// end ;
66240: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66241: LD_EXP 44
66245: PUSH
66246: LD_EXP 70
66250: AND
66251: IFFALSE 66314
66253: GO 66255
66255: DISABLE
66256: LD_INT 0
66258: PPUSH
// begin p := 0 ;
66259: LD_ADDR_VAR 0 1
66263: PUSH
66264: LD_INT 0
66266: ST_TO_ADDR
// repeat game_speed := 1 ;
66267: LD_ADDR_OWVAR 65
66271: PUSH
66272: LD_INT 1
66274: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66275: LD_INT 35
66277: PPUSH
66278: CALL_OW 67
// p := p + 1 ;
66282: LD_ADDR_VAR 0 1
66286: PUSH
66287: LD_VAR 0 1
66291: PUSH
66292: LD_INT 1
66294: PLUS
66295: ST_TO_ADDR
// until p >= 60 ;
66296: LD_VAR 0 1
66300: PUSH
66301: LD_INT 60
66303: GREATEREQUAL
66304: IFFALSE 66267
// game_speed := 4 ;
66306: LD_ADDR_OWVAR 65
66310: PUSH
66311: LD_INT 4
66313: ST_TO_ADDR
// end ;
66314: PPOPN 1
66316: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66317: LD_EXP 44
66321: PUSH
66322: LD_EXP 71
66326: AND
66327: IFFALSE 66473
66329: GO 66331
66331: DISABLE
66332: LD_INT 0
66334: PPUSH
66335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66336: LD_ADDR_VAR 0 1
66340: PUSH
66341: LD_INT 22
66343: PUSH
66344: LD_OWVAR 2
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 2
66355: PUSH
66356: LD_INT 30
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 30
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: LIST
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PPUSH
66385: CALL_OW 69
66389: ST_TO_ADDR
// if not depot then
66390: LD_VAR 0 1
66394: NOT
66395: IFFALSE 66399
// exit ;
66397: GO 66473
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66399: LD_ADDR_VAR 0 2
66403: PUSH
66404: LD_VAR 0 1
66408: PUSH
66409: LD_INT 1
66411: PPUSH
66412: LD_VAR 0 1
66416: PPUSH
66417: CALL_OW 12
66421: ARRAY
66422: PPUSH
66423: CALL_OW 274
66427: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66428: LD_VAR 0 2
66432: PPUSH
66433: LD_INT 1
66435: PPUSH
66436: LD_INT 0
66438: PPUSH
66439: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66443: LD_VAR 0 2
66447: PPUSH
66448: LD_INT 2
66450: PPUSH
66451: LD_INT 0
66453: PPUSH
66454: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66458: LD_VAR 0 2
66462: PPUSH
66463: LD_INT 3
66465: PPUSH
66466: LD_INT 0
66468: PPUSH
66469: CALL_OW 277
// end ;
66473: PPOPN 2
66475: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66476: LD_EXP 44
66480: PUSH
66481: LD_EXP 72
66485: AND
66486: IFFALSE 66583
66488: GO 66490
66490: DISABLE
66491: LD_INT 0
66493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66494: LD_ADDR_VAR 0 1
66498: PUSH
66499: LD_INT 22
66501: PUSH
66502: LD_OWVAR 2
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 21
66513: PUSH
66514: LD_INT 1
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: LD_INT 23
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: PPUSH
66543: CALL_OW 69
66547: ST_TO_ADDR
// if not tmp then
66548: LD_VAR 0 1
66552: NOT
66553: IFFALSE 66557
// exit ;
66555: GO 66583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66557: LD_VAR 0 1
66561: PUSH
66562: LD_INT 1
66564: PPUSH
66565: LD_VAR 0 1
66569: PPUSH
66570: CALL_OW 12
66574: ARRAY
66575: PPUSH
66576: LD_INT 200
66578: PPUSH
66579: CALL_OW 234
// end ;
66583: PPOPN 1
66585: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66586: LD_EXP 44
66590: PUSH
66591: LD_EXP 73
66595: AND
66596: IFFALSE 66675
66598: GO 66600
66600: DISABLE
66601: LD_INT 0
66603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66604: LD_ADDR_VAR 0 1
66608: PUSH
66609: LD_INT 22
66611: PUSH
66612: LD_OWVAR 2
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 21
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PPUSH
66635: CALL_OW 69
66639: ST_TO_ADDR
// if not tmp then
66640: LD_VAR 0 1
66644: NOT
66645: IFFALSE 66649
// exit ;
66647: GO 66675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66649: LD_VAR 0 1
66653: PUSH
66654: LD_INT 1
66656: PPUSH
66657: LD_VAR 0 1
66661: PPUSH
66662: CALL_OW 12
66666: ARRAY
66667: PPUSH
66668: LD_INT 60
66670: PPUSH
66671: CALL_OW 234
// end ;
66675: PPOPN 1
66677: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66678: LD_EXP 44
66682: PUSH
66683: LD_EXP 74
66687: AND
66688: IFFALSE 66787
66690: GO 66692
66692: DISABLE
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
// begin enable ;
66697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66698: LD_ADDR_VAR 0 1
66702: PUSH
66703: LD_INT 22
66705: PUSH
66706: LD_OWVAR 2
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 61
66717: PUSH
66718: EMPTY
66719: LIST
66720: PUSH
66721: LD_INT 33
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: PPUSH
66736: CALL_OW 69
66740: ST_TO_ADDR
// if not tmp then
66741: LD_VAR 0 1
66745: NOT
66746: IFFALSE 66750
// exit ;
66748: GO 66787
// for i in tmp do
66750: LD_ADDR_VAR 0 2
66754: PUSH
66755: LD_VAR 0 1
66759: PUSH
66760: FOR_IN
66761: IFFALSE 66785
// if IsControledBy ( i ) then
66763: LD_VAR 0 2
66767: PPUSH
66768: CALL_OW 312
66772: IFFALSE 66783
// ComUnlink ( i ) ;
66774: LD_VAR 0 2
66778: PPUSH
66779: CALL_OW 136
66783: GO 66760
66785: POP
66786: POP
// end ;
66787: PPOPN 2
66789: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66790: LD_EXP 44
66794: PUSH
66795: LD_EXP 75
66799: AND
66800: IFFALSE 66940
66802: GO 66804
66804: DISABLE
66805: LD_INT 0
66807: PPUSH
66808: PPUSH
// begin ToLua ( displayPowell(); ) ;
66809: LD_STRING displayPowell();
66811: PPUSH
66812: CALL_OW 559
// uc_side := 0 ;
66816: LD_ADDR_OWVAR 20
66820: PUSH
66821: LD_INT 0
66823: ST_TO_ADDR
// uc_nation := 2 ;
66824: LD_ADDR_OWVAR 21
66828: PUSH
66829: LD_INT 2
66831: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66832: LD_ADDR_OWVAR 37
66836: PUSH
66837: LD_INT 14
66839: ST_TO_ADDR
// vc_engine := engine_siberite ;
66840: LD_ADDR_OWVAR 39
66844: PUSH
66845: LD_INT 3
66847: ST_TO_ADDR
// vc_control := control_apeman ;
66848: LD_ADDR_OWVAR 38
66852: PUSH
66853: LD_INT 5
66855: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66856: LD_ADDR_OWVAR 40
66860: PUSH
66861: LD_INT 29
66863: ST_TO_ADDR
// un := CreateVehicle ;
66864: LD_ADDR_VAR 0 2
66868: PUSH
66869: CALL_OW 45
66873: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66874: LD_VAR 0 2
66878: PPUSH
66879: LD_INT 1
66881: PPUSH
66882: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66886: LD_INT 35
66888: PPUSH
66889: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66893: LD_VAR 0 2
66897: PPUSH
66898: LD_INT 22
66900: PUSH
66901: LD_OWVAR 2
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PPUSH
66910: CALL_OW 69
66914: PPUSH
66915: LD_VAR 0 2
66919: PPUSH
66920: CALL_OW 74
66924: PPUSH
66925: CALL_OW 115
// until IsDead ( un ) ;
66929: LD_VAR 0 2
66933: PPUSH
66934: CALL_OW 301
66938: IFFALSE 66886
// end ;
66940: PPOPN 2
66942: END
// every 0 0$1 trigger StreamModeActive and sStu do
66943: LD_EXP 44
66947: PUSH
66948: LD_EXP 83
66952: AND
66953: IFFALSE 66969
66955: GO 66957
66957: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66958: LD_STRING displayStucuk();
66960: PPUSH
66961: CALL_OW 559
// ResetFog ;
66965: CALL_OW 335
// end ;
66969: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66970: LD_EXP 44
66974: PUSH
66975: LD_EXP 76
66979: AND
66980: IFFALSE 67121
66982: GO 66984
66984: DISABLE
66985: LD_INT 0
66987: PPUSH
66988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66989: LD_ADDR_VAR 0 2
66993: PUSH
66994: LD_INT 22
66996: PUSH
66997: LD_OWVAR 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 21
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PPUSH
67020: CALL_OW 69
67024: ST_TO_ADDR
// if not tmp then
67025: LD_VAR 0 2
67029: NOT
67030: IFFALSE 67034
// exit ;
67032: GO 67121
// un := tmp [ rand ( 1 , tmp ) ] ;
67034: LD_ADDR_VAR 0 1
67038: PUSH
67039: LD_VAR 0 2
67043: PUSH
67044: LD_INT 1
67046: PPUSH
67047: LD_VAR 0 2
67051: PPUSH
67052: CALL_OW 12
67056: ARRAY
67057: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67058: LD_VAR 0 1
67062: PPUSH
67063: LD_INT 0
67065: PPUSH
67066: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67070: LD_VAR 0 1
67074: PPUSH
67075: LD_OWVAR 3
67079: PUSH
67080: LD_VAR 0 1
67084: DIFF
67085: PPUSH
67086: LD_VAR 0 1
67090: PPUSH
67091: CALL_OW 74
67095: PPUSH
67096: CALL_OW 115
// wait ( 0 0$20 ) ;
67100: LD_INT 700
67102: PPUSH
67103: CALL_OW 67
// SetSide ( un , your_side ) ;
67107: LD_VAR 0 1
67111: PPUSH
67112: LD_OWVAR 2
67116: PPUSH
67117: CALL_OW 235
// end ;
67121: PPOPN 2
67123: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67124: LD_EXP 44
67128: PUSH
67129: LD_EXP 77
67133: AND
67134: IFFALSE 67240
67136: GO 67138
67138: DISABLE
67139: LD_INT 0
67141: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67142: LD_ADDR_VAR 0 1
67146: PUSH
67147: LD_INT 22
67149: PUSH
67150: LD_OWVAR 2
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: LD_INT 30
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 30
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PPUSH
67191: CALL_OW 69
67195: ST_TO_ADDR
// if not depot then
67196: LD_VAR 0 1
67200: NOT
67201: IFFALSE 67205
// exit ;
67203: GO 67240
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67205: LD_VAR 0 1
67209: PUSH
67210: LD_INT 1
67212: ARRAY
67213: PPUSH
67214: CALL_OW 250
67218: PPUSH
67219: LD_VAR 0 1
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PPUSH
67228: CALL_OW 251
67232: PPUSH
67233: LD_INT 70
67235: PPUSH
67236: CALL_OW 495
// end ;
67240: PPOPN 1
67242: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67243: LD_EXP 44
67247: PUSH
67248: LD_EXP 78
67252: AND
67253: IFFALSE 67464
67255: GO 67257
67257: DISABLE
67258: LD_INT 0
67260: PPUSH
67261: PPUSH
67262: PPUSH
67263: PPUSH
67264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67265: LD_ADDR_VAR 0 5
67269: PUSH
67270: LD_INT 22
67272: PUSH
67273: LD_OWVAR 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 21
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PPUSH
67296: CALL_OW 69
67300: ST_TO_ADDR
// if not tmp then
67301: LD_VAR 0 5
67305: NOT
67306: IFFALSE 67310
// exit ;
67308: GO 67464
// for i in tmp do
67310: LD_ADDR_VAR 0 1
67314: PUSH
67315: LD_VAR 0 5
67319: PUSH
67320: FOR_IN
67321: IFFALSE 67462
// begin d := rand ( 0 , 5 ) ;
67323: LD_ADDR_VAR 0 4
67327: PUSH
67328: LD_INT 0
67330: PPUSH
67331: LD_INT 5
67333: PPUSH
67334: CALL_OW 12
67338: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67339: LD_ADDR_VAR 0 2
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 250
67353: PPUSH
67354: LD_VAR 0 4
67358: PPUSH
67359: LD_INT 3
67361: PPUSH
67362: LD_INT 12
67364: PPUSH
67365: CALL_OW 12
67369: PPUSH
67370: CALL_OW 272
67374: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67375: LD_ADDR_VAR 0 3
67379: PUSH
67380: LD_VAR 0 1
67384: PPUSH
67385: CALL_OW 251
67389: PPUSH
67390: LD_VAR 0 4
67394: PPUSH
67395: LD_INT 3
67397: PPUSH
67398: LD_INT 12
67400: PPUSH
67401: CALL_OW 12
67405: PPUSH
67406: CALL_OW 273
67410: ST_TO_ADDR
// if ValidHex ( x , y ) then
67411: LD_VAR 0 2
67415: PPUSH
67416: LD_VAR 0 3
67420: PPUSH
67421: CALL_OW 488
67425: IFFALSE 67460
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67427: LD_VAR 0 1
67431: PPUSH
67432: LD_VAR 0 2
67436: PPUSH
67437: LD_VAR 0 3
67441: PPUSH
67442: LD_INT 3
67444: PPUSH
67445: LD_INT 6
67447: PPUSH
67448: CALL_OW 12
67452: PPUSH
67453: LD_INT 1
67455: PPUSH
67456: CALL_OW 483
// end ;
67460: GO 67320
67462: POP
67463: POP
// end ;
67464: PPOPN 5
67466: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67467: LD_EXP 44
67471: PUSH
67472: LD_EXP 79
67476: AND
67477: IFFALSE 67571
67479: GO 67481
67481: DISABLE
67482: LD_INT 0
67484: PPUSH
67485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67486: LD_ADDR_VAR 0 2
67490: PUSH
67491: LD_INT 22
67493: PUSH
67494: LD_OWVAR 2
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 32
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 21
67515: PUSH
67516: LD_INT 2
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: PPUSH
67528: CALL_OW 69
67532: ST_TO_ADDR
// if not tmp then
67533: LD_VAR 0 2
67537: NOT
67538: IFFALSE 67542
// exit ;
67540: GO 67571
// for i in tmp do
67542: LD_ADDR_VAR 0 1
67546: PUSH
67547: LD_VAR 0 2
67551: PUSH
67552: FOR_IN
67553: IFFALSE 67569
// SetFuel ( i , 0 ) ;
67555: LD_VAR 0 1
67559: PPUSH
67560: LD_INT 0
67562: PPUSH
67563: CALL_OW 240
67567: GO 67552
67569: POP
67570: POP
// end ;
67571: PPOPN 2
67573: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67574: LD_EXP 44
67578: PUSH
67579: LD_EXP 80
67583: AND
67584: IFFALSE 67650
67586: GO 67588
67588: DISABLE
67589: LD_INT 0
67591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67592: LD_ADDR_VAR 0 1
67596: PUSH
67597: LD_INT 22
67599: PUSH
67600: LD_OWVAR 2
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 30
67611: PUSH
67612: LD_INT 29
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PPUSH
67623: CALL_OW 69
67627: ST_TO_ADDR
// if not tmp then
67628: LD_VAR 0 1
67632: NOT
67633: IFFALSE 67637
// exit ;
67635: GO 67650
// DestroyUnit ( tmp [ 1 ] ) ;
67637: LD_VAR 0 1
67641: PUSH
67642: LD_INT 1
67644: ARRAY
67645: PPUSH
67646: CALL_OW 65
// end ;
67650: PPOPN 1
67652: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67653: LD_EXP 44
67657: PUSH
67658: LD_EXP 82
67662: AND
67663: IFFALSE 67792
67665: GO 67667
67667: DISABLE
67668: LD_INT 0
67670: PPUSH
// begin uc_side := 0 ;
67671: LD_ADDR_OWVAR 20
67675: PUSH
67676: LD_INT 0
67678: ST_TO_ADDR
// uc_nation := nation_arabian ;
67679: LD_ADDR_OWVAR 21
67683: PUSH
67684: LD_INT 2
67686: ST_TO_ADDR
// hc_gallery :=  ;
67687: LD_ADDR_OWVAR 33
67691: PUSH
67692: LD_STRING 
67694: ST_TO_ADDR
// hc_name :=  ;
67695: LD_ADDR_OWVAR 26
67699: PUSH
67700: LD_STRING 
67702: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67703: LD_INT 1
67705: PPUSH
67706: LD_INT 11
67708: PPUSH
67709: LD_INT 10
67711: PPUSH
67712: CALL_OW 380
// un := CreateHuman ;
67716: LD_ADDR_VAR 0 1
67720: PUSH
67721: CALL_OW 44
67725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67726: LD_VAR 0 1
67730: PPUSH
67731: LD_INT 1
67733: PPUSH
67734: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67738: LD_INT 35
67740: PPUSH
67741: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_INT 22
67752: PUSH
67753: LD_OWVAR 2
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PPUSH
67762: CALL_OW 69
67766: PPUSH
67767: LD_VAR 0 1
67771: PPUSH
67772: CALL_OW 74
67776: PPUSH
67777: CALL_OW 115
// until IsDead ( un ) ;
67781: LD_VAR 0 1
67785: PPUSH
67786: CALL_OW 301
67790: IFFALSE 67738
// end ;
67792: PPOPN 1
67794: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67795: LD_EXP 44
67799: PUSH
67800: LD_EXP 84
67804: AND
67805: IFFALSE 67817
67807: GO 67809
67809: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67810: LD_STRING earthquake(getX(game), 0, 32)
67812: PPUSH
67813: CALL_OW 559
67817: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67818: LD_EXP 44
67822: PUSH
67823: LD_EXP 85
67827: AND
67828: IFFALSE 67919
67830: GO 67832
67832: DISABLE
67833: LD_INT 0
67835: PPUSH
// begin enable ;
67836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67837: LD_ADDR_VAR 0 1
67841: PUSH
67842: LD_INT 22
67844: PUSH
67845: LD_OWVAR 2
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 21
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 33
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: PPUSH
67879: CALL_OW 69
67883: ST_TO_ADDR
// if not tmp then
67884: LD_VAR 0 1
67888: NOT
67889: IFFALSE 67893
// exit ;
67891: GO 67919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67893: LD_VAR 0 1
67897: PUSH
67898: LD_INT 1
67900: PPUSH
67901: LD_VAR 0 1
67905: PPUSH
67906: CALL_OW 12
67910: ARRAY
67911: PPUSH
67912: LD_INT 1
67914: PPUSH
67915: CALL_OW 234
// end ;
67919: PPOPN 1
67921: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67922: LD_EXP 44
67926: PUSH
67927: LD_EXP 86
67931: AND
67932: IFFALSE 68073
67934: GO 67936
67936: DISABLE
67937: LD_INT 0
67939: PPUSH
67940: PPUSH
67941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67942: LD_ADDR_VAR 0 3
67946: PUSH
67947: LD_INT 22
67949: PUSH
67950: LD_OWVAR 2
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 25
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PPUSH
67973: CALL_OW 69
67977: ST_TO_ADDR
// if not tmp then
67978: LD_VAR 0 3
67982: NOT
67983: IFFALSE 67987
// exit ;
67985: GO 68073
// un := tmp [ rand ( 1 , tmp ) ] ;
67987: LD_ADDR_VAR 0 2
67991: PUSH
67992: LD_VAR 0 3
67996: PUSH
67997: LD_INT 1
67999: PPUSH
68000: LD_VAR 0 3
68004: PPUSH
68005: CALL_OW 12
68009: ARRAY
68010: ST_TO_ADDR
// if Crawls ( un ) then
68011: LD_VAR 0 2
68015: PPUSH
68016: CALL_OW 318
68020: IFFALSE 68031
// ComWalk ( un ) ;
68022: LD_VAR 0 2
68026: PPUSH
68027: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68031: LD_VAR 0 2
68035: PPUSH
68036: LD_INT 9
68038: PPUSH
68039: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68043: LD_INT 28
68045: PPUSH
68046: LD_OWVAR 2
68050: PPUSH
68051: LD_INT 2
68053: PPUSH
68054: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68058: LD_INT 29
68060: PPUSH
68061: LD_OWVAR 2
68065: PPUSH
68066: LD_INT 2
68068: PPUSH
68069: CALL_OW 322
// end ;
68073: PPOPN 3
68075: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68076: LD_EXP 44
68080: PUSH
68081: LD_EXP 87
68085: AND
68086: IFFALSE 68197
68088: GO 68090
68090: DISABLE
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68096: LD_ADDR_VAR 0 3
68100: PUSH
68101: LD_INT 22
68103: PUSH
68104: LD_OWVAR 2
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 25
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PPUSH
68127: CALL_OW 69
68131: ST_TO_ADDR
// if not tmp then
68132: LD_VAR 0 3
68136: NOT
68137: IFFALSE 68141
// exit ;
68139: GO 68197
// un := tmp [ rand ( 1 , tmp ) ] ;
68141: LD_ADDR_VAR 0 2
68145: PUSH
68146: LD_VAR 0 3
68150: PUSH
68151: LD_INT 1
68153: PPUSH
68154: LD_VAR 0 3
68158: PPUSH
68159: CALL_OW 12
68163: ARRAY
68164: ST_TO_ADDR
// if Crawls ( un ) then
68165: LD_VAR 0 2
68169: PPUSH
68170: CALL_OW 318
68174: IFFALSE 68185
// ComWalk ( un ) ;
68176: LD_VAR 0 2
68180: PPUSH
68181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68185: LD_VAR 0 2
68189: PPUSH
68190: LD_INT 8
68192: PPUSH
68193: CALL_OW 336
// end ;
68197: PPOPN 3
68199: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68200: LD_EXP 44
68204: PUSH
68205: LD_EXP 88
68209: AND
68210: IFFALSE 68354
68212: GO 68214
68214: DISABLE
68215: LD_INT 0
68217: PPUSH
68218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68219: LD_ADDR_VAR 0 2
68223: PUSH
68224: LD_INT 22
68226: PUSH
68227: LD_OWVAR 2
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 21
68238: PUSH
68239: LD_INT 2
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: LD_INT 34
68251: PUSH
68252: LD_INT 12
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 34
68261: PUSH
68262: LD_INT 51
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 34
68271: PUSH
68272: LD_INT 32
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: PPUSH
68290: CALL_OW 69
68294: ST_TO_ADDR
// if not tmp then
68295: LD_VAR 0 2
68299: NOT
68300: IFFALSE 68304
// exit ;
68302: GO 68354
// for i in tmp do
68304: LD_ADDR_VAR 0 1
68308: PUSH
68309: LD_VAR 0 2
68313: PUSH
68314: FOR_IN
68315: IFFALSE 68352
// if GetCargo ( i , mat_artifact ) = 0 then
68317: LD_VAR 0 1
68321: PPUSH
68322: LD_INT 4
68324: PPUSH
68325: CALL_OW 289
68329: PUSH
68330: LD_INT 0
68332: EQUAL
68333: IFFALSE 68350
// SetCargo ( i , mat_siberit , 100 ) ;
68335: LD_VAR 0 1
68339: PPUSH
68340: LD_INT 3
68342: PPUSH
68343: LD_INT 100
68345: PPUSH
68346: CALL_OW 290
68350: GO 68314
68352: POP
68353: POP
// end ;
68354: PPOPN 2
68356: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68357: LD_EXP 44
68361: PUSH
68362: LD_EXP 89
68366: AND
68367: IFFALSE 68550
68369: GO 68371
68371: DISABLE
68372: LD_INT 0
68374: PPUSH
68375: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68376: LD_ADDR_VAR 0 2
68380: PUSH
68381: LD_INT 22
68383: PUSH
68384: LD_OWVAR 2
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PPUSH
68393: CALL_OW 69
68397: ST_TO_ADDR
// if not tmp then
68398: LD_VAR 0 2
68402: NOT
68403: IFFALSE 68407
// exit ;
68405: GO 68550
// for i := 1 to 2 do
68407: LD_ADDR_VAR 0 1
68411: PUSH
68412: DOUBLE
68413: LD_INT 1
68415: DEC
68416: ST_TO_ADDR
68417: LD_INT 2
68419: PUSH
68420: FOR_TO
68421: IFFALSE 68548
// begin uc_side := your_side ;
68423: LD_ADDR_OWVAR 20
68427: PUSH
68428: LD_OWVAR 2
68432: ST_TO_ADDR
// uc_nation := nation_american ;
68433: LD_ADDR_OWVAR 21
68437: PUSH
68438: LD_INT 1
68440: ST_TO_ADDR
// vc_chassis := us_morphling ;
68441: LD_ADDR_OWVAR 37
68445: PUSH
68446: LD_INT 5
68448: ST_TO_ADDR
// vc_engine := engine_siberite ;
68449: LD_ADDR_OWVAR 39
68453: PUSH
68454: LD_INT 3
68456: ST_TO_ADDR
// vc_control := control_computer ;
68457: LD_ADDR_OWVAR 38
68461: PUSH
68462: LD_INT 3
68464: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68465: LD_ADDR_OWVAR 40
68469: PUSH
68470: LD_INT 10
68472: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68473: LD_VAR 0 2
68477: PUSH
68478: LD_INT 1
68480: ARRAY
68481: PPUSH
68482: CALL_OW 310
68486: NOT
68487: IFFALSE 68534
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68489: CALL_OW 45
68493: PPUSH
68494: LD_VAR 0 2
68498: PUSH
68499: LD_INT 1
68501: ARRAY
68502: PPUSH
68503: CALL_OW 250
68507: PPUSH
68508: LD_VAR 0 2
68512: PUSH
68513: LD_INT 1
68515: ARRAY
68516: PPUSH
68517: CALL_OW 251
68521: PPUSH
68522: LD_INT 12
68524: PPUSH
68525: LD_INT 1
68527: PPUSH
68528: CALL_OW 50
68532: GO 68546
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68534: CALL_OW 45
68538: PPUSH
68539: LD_INT 1
68541: PPUSH
68542: CALL_OW 51
// end ;
68546: GO 68420
68548: POP
68549: POP
// end ;
68550: PPOPN 2
68552: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68553: LD_EXP 44
68557: PUSH
68558: LD_EXP 90
68562: AND
68563: IFFALSE 68785
68565: GO 68567
68567: DISABLE
68568: LD_INT 0
68570: PPUSH
68571: PPUSH
68572: PPUSH
68573: PPUSH
68574: PPUSH
68575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68576: LD_ADDR_VAR 0 6
68580: PUSH
68581: LD_INT 22
68583: PUSH
68584: LD_OWVAR 2
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 21
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: LD_INT 23
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: PPUSH
68625: CALL_OW 69
68629: ST_TO_ADDR
// if not tmp then
68630: LD_VAR 0 6
68634: NOT
68635: IFFALSE 68639
// exit ;
68637: GO 68785
// s1 := rand ( 1 , 4 ) ;
68639: LD_ADDR_VAR 0 2
68643: PUSH
68644: LD_INT 1
68646: PPUSH
68647: LD_INT 4
68649: PPUSH
68650: CALL_OW 12
68654: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68655: LD_ADDR_VAR 0 4
68659: PUSH
68660: LD_VAR 0 6
68664: PUSH
68665: LD_INT 1
68667: ARRAY
68668: PPUSH
68669: LD_VAR 0 2
68673: PPUSH
68674: CALL_OW 259
68678: ST_TO_ADDR
// if s1 = 1 then
68679: LD_VAR 0 2
68683: PUSH
68684: LD_INT 1
68686: EQUAL
68687: IFFALSE 68707
// s2 := rand ( 2 , 4 ) else
68689: LD_ADDR_VAR 0 3
68693: PUSH
68694: LD_INT 2
68696: PPUSH
68697: LD_INT 4
68699: PPUSH
68700: CALL_OW 12
68704: ST_TO_ADDR
68705: GO 68715
// s2 := 1 ;
68707: LD_ADDR_VAR 0 3
68711: PUSH
68712: LD_INT 1
68714: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68715: LD_ADDR_VAR 0 5
68719: PUSH
68720: LD_VAR 0 6
68724: PUSH
68725: LD_INT 1
68727: ARRAY
68728: PPUSH
68729: LD_VAR 0 3
68733: PPUSH
68734: CALL_OW 259
68738: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68739: LD_VAR 0 6
68743: PUSH
68744: LD_INT 1
68746: ARRAY
68747: PPUSH
68748: LD_VAR 0 2
68752: PPUSH
68753: LD_VAR 0 5
68757: PPUSH
68758: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68762: LD_VAR 0 6
68766: PUSH
68767: LD_INT 1
68769: ARRAY
68770: PPUSH
68771: LD_VAR 0 3
68775: PPUSH
68776: LD_VAR 0 4
68780: PPUSH
68781: CALL_OW 237
// end ;
68785: PPOPN 6
68787: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68788: LD_EXP 44
68792: PUSH
68793: LD_EXP 91
68797: AND
68798: IFFALSE 68877
68800: GO 68802
68802: DISABLE
68803: LD_INT 0
68805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68806: LD_ADDR_VAR 0 1
68810: PUSH
68811: LD_INT 22
68813: PUSH
68814: LD_OWVAR 2
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 30
68825: PUSH
68826: LD_INT 3
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PPUSH
68837: CALL_OW 69
68841: ST_TO_ADDR
// if not tmp then
68842: LD_VAR 0 1
68846: NOT
68847: IFFALSE 68851
// exit ;
68849: GO 68877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68851: LD_VAR 0 1
68855: PUSH
68856: LD_INT 1
68858: PPUSH
68859: LD_VAR 0 1
68863: PPUSH
68864: CALL_OW 12
68868: ARRAY
68869: PPUSH
68870: LD_INT 1
68872: PPUSH
68873: CALL_OW 234
// end ;
68877: PPOPN 1
68879: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68880: LD_EXP 44
68884: PUSH
68885: LD_EXP 92
68889: AND
68890: IFFALSE 69002
68892: GO 68894
68894: DISABLE
68895: LD_INT 0
68897: PPUSH
68898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68899: LD_ADDR_VAR 0 2
68903: PUSH
68904: LD_INT 22
68906: PUSH
68907: LD_OWVAR 2
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: LD_INT 30
68921: PUSH
68922: LD_INT 27
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 30
68931: PUSH
68932: LD_INT 26
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 30
68941: PUSH
68942: LD_INT 28
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PPUSH
68959: CALL_OW 69
68963: ST_TO_ADDR
// if not tmp then
68964: LD_VAR 0 2
68968: NOT
68969: IFFALSE 68973
// exit ;
68971: GO 69002
// for i in tmp do
68973: LD_ADDR_VAR 0 1
68977: PUSH
68978: LD_VAR 0 2
68982: PUSH
68983: FOR_IN
68984: IFFALSE 69000
// SetLives ( i , 1 ) ;
68986: LD_VAR 0 1
68990: PPUSH
68991: LD_INT 1
68993: PPUSH
68994: CALL_OW 234
68998: GO 68983
69000: POP
69001: POP
// end ;
69002: PPOPN 2
69004: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69005: LD_EXP 44
69009: PUSH
69010: LD_EXP 93
69014: AND
69015: IFFALSE 69289
69017: GO 69019
69019: DISABLE
69020: LD_INT 0
69022: PPUSH
69023: PPUSH
69024: PPUSH
// begin i := rand ( 1 , 7 ) ;
69025: LD_ADDR_VAR 0 1
69029: PUSH
69030: LD_INT 1
69032: PPUSH
69033: LD_INT 7
69035: PPUSH
69036: CALL_OW 12
69040: ST_TO_ADDR
// case i of 1 :
69041: LD_VAR 0 1
69045: PUSH
69046: LD_INT 1
69048: DOUBLE
69049: EQUAL
69050: IFTRUE 69054
69052: GO 69064
69054: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69055: LD_STRING earthquake(getX(game), 0, 32)
69057: PPUSH
69058: CALL_OW 559
69062: GO 69289
69064: LD_INT 2
69066: DOUBLE
69067: EQUAL
69068: IFTRUE 69072
69070: GO 69086
69072: POP
// begin ToLua ( displayStucuk(); ) ;
69073: LD_STRING displayStucuk();
69075: PPUSH
69076: CALL_OW 559
// ResetFog ;
69080: CALL_OW 335
// end ; 3 :
69084: GO 69289
69086: LD_INT 3
69088: DOUBLE
69089: EQUAL
69090: IFTRUE 69094
69092: GO 69198
69094: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69095: LD_ADDR_VAR 0 2
69099: PUSH
69100: LD_INT 22
69102: PUSH
69103: LD_OWVAR 2
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 25
69114: PUSH
69115: LD_INT 1
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PPUSH
69126: CALL_OW 69
69130: ST_TO_ADDR
// if not tmp then
69131: LD_VAR 0 2
69135: NOT
69136: IFFALSE 69140
// exit ;
69138: GO 69289
// un := tmp [ rand ( 1 , tmp ) ] ;
69140: LD_ADDR_VAR 0 3
69144: PUSH
69145: LD_VAR 0 2
69149: PUSH
69150: LD_INT 1
69152: PPUSH
69153: LD_VAR 0 2
69157: PPUSH
69158: CALL_OW 12
69162: ARRAY
69163: ST_TO_ADDR
// if Crawls ( un ) then
69164: LD_VAR 0 3
69168: PPUSH
69169: CALL_OW 318
69173: IFFALSE 69184
// ComWalk ( un ) ;
69175: LD_VAR 0 3
69179: PPUSH
69180: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69184: LD_VAR 0 3
69188: PPUSH
69189: LD_INT 8
69191: PPUSH
69192: CALL_OW 336
// end ; 4 :
69196: GO 69289
69198: LD_INT 4
69200: DOUBLE
69201: EQUAL
69202: IFTRUE 69206
69204: GO 69267
69206: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69207: LD_ADDR_VAR 0 2
69211: PUSH
69212: LD_INT 22
69214: PUSH
69215: LD_OWVAR 2
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 30
69226: PUSH
69227: LD_INT 29
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PPUSH
69238: CALL_OW 69
69242: ST_TO_ADDR
// if not tmp then
69243: LD_VAR 0 2
69247: NOT
69248: IFFALSE 69252
// exit ;
69250: GO 69289
// DestroyUnit ( tmp [ 1 ] ) ;
69252: LD_VAR 0 2
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PPUSH
69261: CALL_OW 65
// end ; 5 .. 7 :
69265: GO 69289
69267: LD_INT 5
69269: DOUBLE
69270: GREATEREQUAL
69271: IFFALSE 69279
69273: LD_INT 7
69275: DOUBLE
69276: LESSEQUAL
69277: IFTRUE 69281
69279: GO 69288
69281: POP
// StreamSibBomb ; end ;
69282: CALL 65539 0 0
69286: GO 69289
69288: POP
// end ;
69289: PPOPN 3
69291: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69292: LD_EXP 44
69296: PUSH
69297: LD_EXP 94
69301: AND
69302: IFFALSE 69458
69304: GO 69306
69306: DISABLE
69307: LD_INT 0
69309: PPUSH
69310: PPUSH
69311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69312: LD_ADDR_VAR 0 2
69316: PUSH
69317: LD_INT 81
69319: PUSH
69320: LD_OWVAR 2
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: LD_INT 21
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 21
69344: PUSH
69345: LD_INT 2
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PPUSH
69361: CALL_OW 69
69365: ST_TO_ADDR
// if not tmp then
69366: LD_VAR 0 2
69370: NOT
69371: IFFALSE 69375
// exit ;
69373: GO 69458
// p := 0 ;
69375: LD_ADDR_VAR 0 3
69379: PUSH
69380: LD_INT 0
69382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69383: LD_INT 35
69385: PPUSH
69386: CALL_OW 67
// p := p + 1 ;
69390: LD_ADDR_VAR 0 3
69394: PUSH
69395: LD_VAR 0 3
69399: PUSH
69400: LD_INT 1
69402: PLUS
69403: ST_TO_ADDR
// for i in tmp do
69404: LD_ADDR_VAR 0 1
69408: PUSH
69409: LD_VAR 0 2
69413: PUSH
69414: FOR_IN
69415: IFFALSE 69446
// if GetLives ( i ) < 1000 then
69417: LD_VAR 0 1
69421: PPUSH
69422: CALL_OW 256
69426: PUSH
69427: LD_INT 1000
69429: LESS
69430: IFFALSE 69444
// SetLives ( i , 1000 ) ;
69432: LD_VAR 0 1
69436: PPUSH
69437: LD_INT 1000
69439: PPUSH
69440: CALL_OW 234
69444: GO 69414
69446: POP
69447: POP
// until p > 20 ;
69448: LD_VAR 0 3
69452: PUSH
69453: LD_INT 20
69455: GREATER
69456: IFFALSE 69383
// end ;
69458: PPOPN 3
69460: END
// every 0 0$1 trigger StreamModeActive and sTime do
69461: LD_EXP 44
69465: PUSH
69466: LD_EXP 95
69470: AND
69471: IFFALSE 69506
69473: GO 69475
69475: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69476: LD_INT 28
69478: PPUSH
69479: LD_OWVAR 2
69483: PPUSH
69484: LD_INT 2
69486: PPUSH
69487: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69491: LD_INT 30
69493: PPUSH
69494: LD_OWVAR 2
69498: PPUSH
69499: LD_INT 2
69501: PPUSH
69502: CALL_OW 322
// end ;
69506: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69507: LD_EXP 44
69511: PUSH
69512: LD_EXP 96
69516: AND
69517: IFFALSE 69638
69519: GO 69521
69521: DISABLE
69522: LD_INT 0
69524: PPUSH
69525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69526: LD_ADDR_VAR 0 2
69530: PUSH
69531: LD_INT 22
69533: PUSH
69534: LD_OWVAR 2
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 21
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: LD_INT 23
69558: PUSH
69559: LD_INT 0
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: LIST
69574: PPUSH
69575: CALL_OW 69
69579: ST_TO_ADDR
// if not tmp then
69580: LD_VAR 0 2
69584: NOT
69585: IFFALSE 69589
// exit ;
69587: GO 69638
// for i in tmp do
69589: LD_ADDR_VAR 0 1
69593: PUSH
69594: LD_VAR 0 2
69598: PUSH
69599: FOR_IN
69600: IFFALSE 69636
// begin if Crawls ( i ) then
69602: LD_VAR 0 1
69606: PPUSH
69607: CALL_OW 318
69611: IFFALSE 69622
// ComWalk ( i ) ;
69613: LD_VAR 0 1
69617: PPUSH
69618: CALL_OW 138
// SetClass ( i , 2 ) ;
69622: LD_VAR 0 1
69626: PPUSH
69627: LD_INT 2
69629: PPUSH
69630: CALL_OW 336
// end ;
69634: GO 69599
69636: POP
69637: POP
// end ;
69638: PPOPN 2
69640: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69641: LD_EXP 44
69645: PUSH
69646: LD_EXP 97
69650: AND
69651: IFFALSE 69932
69653: GO 69655
69655: DISABLE
69656: LD_INT 0
69658: PPUSH
69659: PPUSH
69660: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69661: LD_OWVAR 2
69665: PPUSH
69666: LD_INT 9
69668: PPUSH
69669: LD_INT 1
69671: PPUSH
69672: LD_INT 1
69674: PPUSH
69675: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69679: LD_INT 9
69681: PPUSH
69682: LD_OWVAR 2
69686: PPUSH
69687: CALL_OW 343
// uc_side := 9 ;
69691: LD_ADDR_OWVAR 20
69695: PUSH
69696: LD_INT 9
69698: ST_TO_ADDR
// uc_nation := 2 ;
69699: LD_ADDR_OWVAR 21
69703: PUSH
69704: LD_INT 2
69706: ST_TO_ADDR
// hc_name := Dark Warrior ;
69707: LD_ADDR_OWVAR 26
69711: PUSH
69712: LD_STRING Dark Warrior
69714: ST_TO_ADDR
// hc_gallery :=  ;
69715: LD_ADDR_OWVAR 33
69719: PUSH
69720: LD_STRING 
69722: ST_TO_ADDR
// hc_noskilllimit := true ;
69723: LD_ADDR_OWVAR 76
69727: PUSH
69728: LD_INT 1
69730: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69731: LD_ADDR_OWVAR 31
69735: PUSH
69736: LD_INT 30
69738: PUSH
69739: LD_INT 30
69741: PUSH
69742: LD_INT 30
69744: PUSH
69745: LD_INT 30
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: ST_TO_ADDR
// un := CreateHuman ;
69754: LD_ADDR_VAR 0 3
69758: PUSH
69759: CALL_OW 44
69763: ST_TO_ADDR
// hc_noskilllimit := false ;
69764: LD_ADDR_OWVAR 76
69768: PUSH
69769: LD_INT 0
69771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69772: LD_VAR 0 3
69776: PPUSH
69777: LD_INT 1
69779: PPUSH
69780: CALL_OW 51
// p := 0 ;
69784: LD_ADDR_VAR 0 2
69788: PUSH
69789: LD_INT 0
69791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69792: LD_INT 35
69794: PPUSH
69795: CALL_OW 67
// p := p + 1 ;
69799: LD_ADDR_VAR 0 2
69803: PUSH
69804: LD_VAR 0 2
69808: PUSH
69809: LD_INT 1
69811: PLUS
69812: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69813: LD_VAR 0 3
69817: PPUSH
69818: CALL_OW 256
69822: PUSH
69823: LD_INT 1000
69825: LESS
69826: IFFALSE 69840
// SetLives ( un , 1000 ) ;
69828: LD_VAR 0 3
69832: PPUSH
69833: LD_INT 1000
69835: PPUSH
69836: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69840: LD_VAR 0 3
69844: PPUSH
69845: LD_INT 81
69847: PUSH
69848: LD_OWVAR 2
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 91
69859: PUSH
69860: LD_VAR 0 3
69864: PUSH
69865: LD_INT 30
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PPUSH
69877: CALL_OW 69
69881: PPUSH
69882: LD_VAR 0 3
69886: PPUSH
69887: CALL_OW 74
69891: PPUSH
69892: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
69896: LD_VAR 0 2
69900: PUSH
69901: LD_INT 60
69903: GREATER
69904: PUSH
69905: LD_VAR 0 3
69909: PPUSH
69910: CALL_OW 301
69914: OR
69915: IFFALSE 69792
// if un then
69917: LD_VAR 0 3
69921: IFFALSE 69932
// RemoveUnit ( un ) ;
69923: LD_VAR 0 3
69927: PPUSH
69928: CALL_OW 64
// end ;
69932: PPOPN 3
69934: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69935: LD_INT 0
69937: PPUSH
// case cmd of 301 :
69938: LD_VAR 0 1
69942: PUSH
69943: LD_INT 301
69945: DOUBLE
69946: EQUAL
69947: IFTRUE 69951
69949: GO 69983
69951: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69952: LD_VAR 0 6
69956: PPUSH
69957: LD_VAR 0 7
69961: PPUSH
69962: LD_VAR 0 8
69966: PPUSH
69967: LD_VAR 0 4
69971: PPUSH
69972: LD_VAR 0 5
69976: PPUSH
69977: CALL 71184 0 5
69981: GO 70104
69983: LD_INT 302
69985: DOUBLE
69986: EQUAL
69987: IFTRUE 69991
69989: GO 70028
69991: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69992: LD_VAR 0 6
69996: PPUSH
69997: LD_VAR 0 7
70001: PPUSH
70002: LD_VAR 0 8
70006: PPUSH
70007: LD_VAR 0 9
70011: PPUSH
70012: LD_VAR 0 4
70016: PPUSH
70017: LD_VAR 0 5
70021: PPUSH
70022: CALL 71275 0 6
70026: GO 70104
70028: LD_INT 303
70030: DOUBLE
70031: EQUAL
70032: IFTRUE 70036
70034: GO 70073
70036: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70037: LD_VAR 0 6
70041: PPUSH
70042: LD_VAR 0 7
70046: PPUSH
70047: LD_VAR 0 8
70051: PPUSH
70052: LD_VAR 0 9
70056: PPUSH
70057: LD_VAR 0 4
70061: PPUSH
70062: LD_VAR 0 5
70066: PPUSH
70067: CALL 70109 0 6
70071: GO 70104
70073: LD_INT 304
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70081
70079: GO 70103
70081: POP
// hHackTeleport ( unit , x , y ) ; end ;
70082: LD_VAR 0 2
70086: PPUSH
70087: LD_VAR 0 4
70091: PPUSH
70092: LD_VAR 0 5
70096: PPUSH
70097: CALL 71868 0 3
70101: GO 70104
70103: POP
// end ;
70104: LD_VAR 0 12
70108: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70109: LD_INT 0
70111: PPUSH
70112: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70113: LD_VAR 0 1
70117: PUSH
70118: LD_INT 1
70120: LESS
70121: PUSH
70122: LD_VAR 0 1
70126: PUSH
70127: LD_INT 3
70129: GREATER
70130: OR
70131: PUSH
70132: LD_VAR 0 5
70136: PPUSH
70137: LD_VAR 0 6
70141: PPUSH
70142: CALL_OW 428
70146: OR
70147: IFFALSE 70151
// exit ;
70149: GO 70871
// uc_side := your_side ;
70151: LD_ADDR_OWVAR 20
70155: PUSH
70156: LD_OWVAR 2
70160: ST_TO_ADDR
// uc_nation := nation ;
70161: LD_ADDR_OWVAR 21
70165: PUSH
70166: LD_VAR 0 1
70170: ST_TO_ADDR
// bc_level = 1 ;
70171: LD_ADDR_OWVAR 43
70175: PUSH
70176: LD_INT 1
70178: ST_TO_ADDR
// case btype of 1 :
70179: LD_VAR 0 2
70183: PUSH
70184: LD_INT 1
70186: DOUBLE
70187: EQUAL
70188: IFTRUE 70192
70190: GO 70203
70192: POP
// bc_type := b_depot ; 2 :
70193: LD_ADDR_OWVAR 42
70197: PUSH
70198: LD_INT 0
70200: ST_TO_ADDR
70201: GO 70815
70203: LD_INT 2
70205: DOUBLE
70206: EQUAL
70207: IFTRUE 70211
70209: GO 70222
70211: POP
// bc_type := b_warehouse ; 3 :
70212: LD_ADDR_OWVAR 42
70216: PUSH
70217: LD_INT 1
70219: ST_TO_ADDR
70220: GO 70815
70222: LD_INT 3
70224: DOUBLE
70225: EQUAL
70226: IFTRUE 70230
70228: GO 70241
70230: POP
// bc_type := b_lab ; 4 .. 9 :
70231: LD_ADDR_OWVAR 42
70235: PUSH
70236: LD_INT 6
70238: ST_TO_ADDR
70239: GO 70815
70241: LD_INT 4
70243: DOUBLE
70244: GREATEREQUAL
70245: IFFALSE 70253
70247: LD_INT 9
70249: DOUBLE
70250: LESSEQUAL
70251: IFTRUE 70255
70253: GO 70307
70255: POP
// begin bc_type := b_lab_half ;
70256: LD_ADDR_OWVAR 42
70260: PUSH
70261: LD_INT 7
70263: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70264: LD_ADDR_OWVAR 44
70268: PUSH
70269: LD_INT 10
70271: PUSH
70272: LD_INT 11
70274: PUSH
70275: LD_INT 12
70277: PUSH
70278: LD_INT 15
70280: PUSH
70281: LD_INT 14
70283: PUSH
70284: LD_INT 13
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: PUSH
70295: LD_VAR 0 2
70299: PUSH
70300: LD_INT 3
70302: MINUS
70303: ARRAY
70304: ST_TO_ADDR
// end ; 10 .. 13 :
70305: GO 70815
70307: LD_INT 10
70309: DOUBLE
70310: GREATEREQUAL
70311: IFFALSE 70319
70313: LD_INT 13
70315: DOUBLE
70316: LESSEQUAL
70317: IFTRUE 70321
70319: GO 70398
70321: POP
// begin bc_type := b_lab_full ;
70322: LD_ADDR_OWVAR 42
70326: PUSH
70327: LD_INT 8
70329: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70330: LD_ADDR_OWVAR 44
70334: PUSH
70335: LD_INT 10
70337: PUSH
70338: LD_INT 12
70340: PUSH
70341: LD_INT 14
70343: PUSH
70344: LD_INT 13
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: PUSH
70353: LD_VAR 0 2
70357: PUSH
70358: LD_INT 9
70360: MINUS
70361: ARRAY
70362: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70363: LD_ADDR_OWVAR 45
70367: PUSH
70368: LD_INT 11
70370: PUSH
70371: LD_INT 15
70373: PUSH
70374: LD_INT 12
70376: PUSH
70377: LD_INT 15
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: PUSH
70386: LD_VAR 0 2
70390: PUSH
70391: LD_INT 9
70393: MINUS
70394: ARRAY
70395: ST_TO_ADDR
// end ; 14 :
70396: GO 70815
70398: LD_INT 14
70400: DOUBLE
70401: EQUAL
70402: IFTRUE 70406
70404: GO 70417
70406: POP
// bc_type := b_workshop ; 15 :
70407: LD_ADDR_OWVAR 42
70411: PUSH
70412: LD_INT 2
70414: ST_TO_ADDR
70415: GO 70815
70417: LD_INT 15
70419: DOUBLE
70420: EQUAL
70421: IFTRUE 70425
70423: GO 70436
70425: POP
// bc_type := b_factory ; 16 :
70426: LD_ADDR_OWVAR 42
70430: PUSH
70431: LD_INT 3
70433: ST_TO_ADDR
70434: GO 70815
70436: LD_INT 16
70438: DOUBLE
70439: EQUAL
70440: IFTRUE 70444
70442: GO 70455
70444: POP
// bc_type := b_ext_gun ; 17 :
70445: LD_ADDR_OWVAR 42
70449: PUSH
70450: LD_INT 17
70452: ST_TO_ADDR
70453: GO 70815
70455: LD_INT 17
70457: DOUBLE
70458: EQUAL
70459: IFTRUE 70463
70461: GO 70491
70463: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70464: LD_ADDR_OWVAR 42
70468: PUSH
70469: LD_INT 19
70471: PUSH
70472: LD_INT 23
70474: PUSH
70475: LD_INT 19
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: PUSH
70483: LD_VAR 0 1
70487: ARRAY
70488: ST_TO_ADDR
70489: GO 70815
70491: LD_INT 18
70493: DOUBLE
70494: EQUAL
70495: IFTRUE 70499
70497: GO 70510
70499: POP
// bc_type := b_ext_radar ; 19 :
70500: LD_ADDR_OWVAR 42
70504: PUSH
70505: LD_INT 20
70507: ST_TO_ADDR
70508: GO 70815
70510: LD_INT 19
70512: DOUBLE
70513: EQUAL
70514: IFTRUE 70518
70516: GO 70529
70518: POP
// bc_type := b_ext_radio ; 20 :
70519: LD_ADDR_OWVAR 42
70523: PUSH
70524: LD_INT 22
70526: ST_TO_ADDR
70527: GO 70815
70529: LD_INT 20
70531: DOUBLE
70532: EQUAL
70533: IFTRUE 70537
70535: GO 70548
70537: POP
// bc_type := b_ext_siberium ; 21 :
70538: LD_ADDR_OWVAR 42
70542: PUSH
70543: LD_INT 21
70545: ST_TO_ADDR
70546: GO 70815
70548: LD_INT 21
70550: DOUBLE
70551: EQUAL
70552: IFTRUE 70556
70554: GO 70567
70556: POP
// bc_type := b_ext_computer ; 22 :
70557: LD_ADDR_OWVAR 42
70561: PUSH
70562: LD_INT 24
70564: ST_TO_ADDR
70565: GO 70815
70567: LD_INT 22
70569: DOUBLE
70570: EQUAL
70571: IFTRUE 70575
70573: GO 70586
70575: POP
// bc_type := b_ext_track ; 23 :
70576: LD_ADDR_OWVAR 42
70580: PUSH
70581: LD_INT 16
70583: ST_TO_ADDR
70584: GO 70815
70586: LD_INT 23
70588: DOUBLE
70589: EQUAL
70590: IFTRUE 70594
70592: GO 70605
70594: POP
// bc_type := b_ext_laser ; 24 :
70595: LD_ADDR_OWVAR 42
70599: PUSH
70600: LD_INT 25
70602: ST_TO_ADDR
70603: GO 70815
70605: LD_INT 24
70607: DOUBLE
70608: EQUAL
70609: IFTRUE 70613
70611: GO 70624
70613: POP
// bc_type := b_control_tower ; 25 :
70614: LD_ADDR_OWVAR 42
70618: PUSH
70619: LD_INT 36
70621: ST_TO_ADDR
70622: GO 70815
70624: LD_INT 25
70626: DOUBLE
70627: EQUAL
70628: IFTRUE 70632
70630: GO 70643
70632: POP
// bc_type := b_breastwork ; 26 :
70633: LD_ADDR_OWVAR 42
70637: PUSH
70638: LD_INT 31
70640: ST_TO_ADDR
70641: GO 70815
70643: LD_INT 26
70645: DOUBLE
70646: EQUAL
70647: IFTRUE 70651
70649: GO 70662
70651: POP
// bc_type := b_bunker ; 27 :
70652: LD_ADDR_OWVAR 42
70656: PUSH
70657: LD_INT 32
70659: ST_TO_ADDR
70660: GO 70815
70662: LD_INT 27
70664: DOUBLE
70665: EQUAL
70666: IFTRUE 70670
70668: GO 70681
70670: POP
// bc_type := b_turret ; 28 :
70671: LD_ADDR_OWVAR 42
70675: PUSH
70676: LD_INT 33
70678: ST_TO_ADDR
70679: GO 70815
70681: LD_INT 28
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70689
70687: GO 70700
70689: POP
// bc_type := b_armoury ; 29 :
70690: LD_ADDR_OWVAR 42
70694: PUSH
70695: LD_INT 4
70697: ST_TO_ADDR
70698: GO 70815
70700: LD_INT 29
70702: DOUBLE
70703: EQUAL
70704: IFTRUE 70708
70706: GO 70719
70708: POP
// bc_type := b_barracks ; 30 :
70709: LD_ADDR_OWVAR 42
70713: PUSH
70714: LD_INT 5
70716: ST_TO_ADDR
70717: GO 70815
70719: LD_INT 30
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70727
70725: GO 70738
70727: POP
// bc_type := b_solar_power ; 31 :
70728: LD_ADDR_OWVAR 42
70732: PUSH
70733: LD_INT 27
70735: ST_TO_ADDR
70736: GO 70815
70738: LD_INT 31
70740: DOUBLE
70741: EQUAL
70742: IFTRUE 70746
70744: GO 70757
70746: POP
// bc_type := b_oil_power ; 32 :
70747: LD_ADDR_OWVAR 42
70751: PUSH
70752: LD_INT 26
70754: ST_TO_ADDR
70755: GO 70815
70757: LD_INT 32
70759: DOUBLE
70760: EQUAL
70761: IFTRUE 70765
70763: GO 70776
70765: POP
// bc_type := b_siberite_power ; 33 :
70766: LD_ADDR_OWVAR 42
70770: PUSH
70771: LD_INT 28
70773: ST_TO_ADDR
70774: GO 70815
70776: LD_INT 33
70778: DOUBLE
70779: EQUAL
70780: IFTRUE 70784
70782: GO 70795
70784: POP
// bc_type := b_oil_mine ; 34 :
70785: LD_ADDR_OWVAR 42
70789: PUSH
70790: LD_INT 29
70792: ST_TO_ADDR
70793: GO 70815
70795: LD_INT 34
70797: DOUBLE
70798: EQUAL
70799: IFTRUE 70803
70801: GO 70814
70803: POP
// bc_type := b_siberite_mine ; end ;
70804: LD_ADDR_OWVAR 42
70808: PUSH
70809: LD_INT 30
70811: ST_TO_ADDR
70812: GO 70815
70814: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70815: LD_ADDR_VAR 0 8
70819: PUSH
70820: LD_VAR 0 5
70824: PPUSH
70825: LD_VAR 0 6
70829: PPUSH
70830: LD_VAR 0 3
70834: PPUSH
70835: CALL_OW 47
70839: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70840: LD_OWVAR 42
70844: PUSH
70845: LD_INT 32
70847: PUSH
70848: LD_INT 33
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: IN
70855: IFFALSE 70871
// PlaceWeaponTurret ( b , weapon ) ;
70857: LD_VAR 0 8
70861: PPUSH
70862: LD_VAR 0 4
70866: PPUSH
70867: CALL_OW 431
// end ;
70871: LD_VAR 0 7
70875: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70876: LD_INT 0
70878: PPUSH
70879: PPUSH
70880: PPUSH
70881: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70882: LD_ADDR_VAR 0 4
70886: PUSH
70887: LD_INT 22
70889: PUSH
70890: LD_OWVAR 2
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 2
70901: PUSH
70902: LD_INT 30
70904: PUSH
70905: LD_INT 0
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 30
70914: PUSH
70915: LD_INT 1
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: LIST
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PPUSH
70931: CALL_OW 69
70935: ST_TO_ADDR
// if not tmp then
70936: LD_VAR 0 4
70940: NOT
70941: IFFALSE 70945
// exit ;
70943: GO 71004
// for i in tmp do
70945: LD_ADDR_VAR 0 2
70949: PUSH
70950: LD_VAR 0 4
70954: PUSH
70955: FOR_IN
70956: IFFALSE 71002
// for j = 1 to 3 do
70958: LD_ADDR_VAR 0 3
70962: PUSH
70963: DOUBLE
70964: LD_INT 1
70966: DEC
70967: ST_TO_ADDR
70968: LD_INT 3
70970: PUSH
70971: FOR_TO
70972: IFFALSE 70998
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70974: LD_VAR 0 2
70978: PPUSH
70979: CALL_OW 274
70983: PPUSH
70984: LD_VAR 0 3
70988: PPUSH
70989: LD_INT 99999
70991: PPUSH
70992: CALL_OW 277
70996: GO 70971
70998: POP
70999: POP
71000: GO 70955
71002: POP
71003: POP
// end ;
71004: LD_VAR 0 1
71008: RET
// export function hHackSetLevel10 ; var i , j ; begin
71009: LD_INT 0
71011: PPUSH
71012: PPUSH
71013: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71014: LD_ADDR_VAR 0 2
71018: PUSH
71019: LD_INT 21
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PPUSH
71029: CALL_OW 69
71033: PUSH
71034: FOR_IN
71035: IFFALSE 71087
// if IsSelected ( i ) then
71037: LD_VAR 0 2
71041: PPUSH
71042: CALL_OW 306
71046: IFFALSE 71085
// begin for j := 1 to 4 do
71048: LD_ADDR_VAR 0 3
71052: PUSH
71053: DOUBLE
71054: LD_INT 1
71056: DEC
71057: ST_TO_ADDR
71058: LD_INT 4
71060: PUSH
71061: FOR_TO
71062: IFFALSE 71083
// SetSkill ( i , j , 10 ) ;
71064: LD_VAR 0 2
71068: PPUSH
71069: LD_VAR 0 3
71073: PPUSH
71074: LD_INT 10
71076: PPUSH
71077: CALL_OW 237
71081: GO 71061
71083: POP
71084: POP
// end ;
71085: GO 71034
71087: POP
71088: POP
// end ;
71089: LD_VAR 0 1
71093: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71094: LD_INT 0
71096: PPUSH
71097: PPUSH
71098: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71099: LD_ADDR_VAR 0 2
71103: PUSH
71104: LD_INT 22
71106: PUSH
71107: LD_OWVAR 2
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 21
71118: PUSH
71119: LD_INT 1
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PPUSH
71130: CALL_OW 69
71134: PUSH
71135: FOR_IN
71136: IFFALSE 71177
// begin for j := 1 to 4 do
71138: LD_ADDR_VAR 0 3
71142: PUSH
71143: DOUBLE
71144: LD_INT 1
71146: DEC
71147: ST_TO_ADDR
71148: LD_INT 4
71150: PUSH
71151: FOR_TO
71152: IFFALSE 71173
// SetSkill ( i , j , 10 ) ;
71154: LD_VAR 0 2
71158: PPUSH
71159: LD_VAR 0 3
71163: PPUSH
71164: LD_INT 10
71166: PPUSH
71167: CALL_OW 237
71171: GO 71151
71173: POP
71174: POP
// end ;
71175: GO 71135
71177: POP
71178: POP
// end ;
71179: LD_VAR 0 1
71183: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71184: LD_INT 0
71186: PPUSH
// uc_side := your_side ;
71187: LD_ADDR_OWVAR 20
71191: PUSH
71192: LD_OWVAR 2
71196: ST_TO_ADDR
// uc_nation := nation ;
71197: LD_ADDR_OWVAR 21
71201: PUSH
71202: LD_VAR 0 1
71206: ST_TO_ADDR
// InitHc ;
71207: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71211: LD_INT 0
71213: PPUSH
71214: LD_VAR 0 2
71218: PPUSH
71219: LD_VAR 0 3
71223: PPUSH
71224: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71228: LD_VAR 0 4
71232: PPUSH
71233: LD_VAR 0 5
71237: PPUSH
71238: CALL_OW 428
71242: PUSH
71243: LD_INT 0
71245: EQUAL
71246: IFFALSE 71270
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71248: CALL_OW 44
71252: PPUSH
71253: LD_VAR 0 4
71257: PPUSH
71258: LD_VAR 0 5
71262: PPUSH
71263: LD_INT 1
71265: PPUSH
71266: CALL_OW 48
// end ;
71270: LD_VAR 0 6
71274: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71275: LD_INT 0
71277: PPUSH
71278: PPUSH
// uc_side := your_side ;
71279: LD_ADDR_OWVAR 20
71283: PUSH
71284: LD_OWVAR 2
71288: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71289: LD_VAR 0 1
71293: PUSH
71294: LD_INT 1
71296: PUSH
71297: LD_INT 2
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: LD_INT 4
71305: PUSH
71306: LD_INT 5
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: IN
71316: IFFALSE 71328
// uc_nation := nation_american else
71318: LD_ADDR_OWVAR 21
71322: PUSH
71323: LD_INT 1
71325: ST_TO_ADDR
71326: GO 71371
// if chassis in [ 11 , 12 , 13 , 14 ] then
71328: LD_VAR 0 1
71332: PUSH
71333: LD_INT 11
71335: PUSH
71336: LD_INT 12
71338: PUSH
71339: LD_INT 13
71341: PUSH
71342: LD_INT 14
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: IN
71351: IFFALSE 71363
// uc_nation := nation_arabian else
71353: LD_ADDR_OWVAR 21
71357: PUSH
71358: LD_INT 2
71360: ST_TO_ADDR
71361: GO 71371
// uc_nation := nation_russian ;
71363: LD_ADDR_OWVAR 21
71367: PUSH
71368: LD_INT 3
71370: ST_TO_ADDR
// vc_chassis := chassis ;
71371: LD_ADDR_OWVAR 37
71375: PUSH
71376: LD_VAR 0 1
71380: ST_TO_ADDR
// vc_engine := engine ;
71381: LD_ADDR_OWVAR 39
71385: PUSH
71386: LD_VAR 0 2
71390: ST_TO_ADDR
// vc_control := control ;
71391: LD_ADDR_OWVAR 38
71395: PUSH
71396: LD_VAR 0 3
71400: ST_TO_ADDR
// vc_weapon := weapon ;
71401: LD_ADDR_OWVAR 40
71405: PUSH
71406: LD_VAR 0 4
71410: ST_TO_ADDR
// un := CreateVehicle ;
71411: LD_ADDR_VAR 0 8
71415: PUSH
71416: CALL_OW 45
71420: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71421: LD_VAR 0 8
71425: PPUSH
71426: LD_INT 0
71428: PPUSH
71429: LD_INT 5
71431: PPUSH
71432: CALL_OW 12
71436: PPUSH
71437: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71441: LD_VAR 0 8
71445: PPUSH
71446: LD_VAR 0 5
71450: PPUSH
71451: LD_VAR 0 6
71455: PPUSH
71456: LD_INT 1
71458: PPUSH
71459: CALL_OW 48
// end ;
71463: LD_VAR 0 7
71467: RET
// export hInvincible ; every 1 do
71468: GO 71470
71470: DISABLE
// hInvincible := [ ] ;
71471: LD_ADDR_EXP 98
71475: PUSH
71476: EMPTY
71477: ST_TO_ADDR
71478: END
// every 10 do var i ;
71479: GO 71481
71481: DISABLE
71482: LD_INT 0
71484: PPUSH
// begin enable ;
71485: ENABLE
// if not hInvincible then
71486: LD_EXP 98
71490: NOT
71491: IFFALSE 71495
// exit ;
71493: GO 71539
// for i in hInvincible do
71495: LD_ADDR_VAR 0 1
71499: PUSH
71500: LD_EXP 98
71504: PUSH
71505: FOR_IN
71506: IFFALSE 71537
// if GetLives ( i ) < 1000 then
71508: LD_VAR 0 1
71512: PPUSH
71513: CALL_OW 256
71517: PUSH
71518: LD_INT 1000
71520: LESS
71521: IFFALSE 71535
// SetLives ( i , 1000 ) ;
71523: LD_VAR 0 1
71527: PPUSH
71528: LD_INT 1000
71530: PPUSH
71531: CALL_OW 234
71535: GO 71505
71537: POP
71538: POP
// end ;
71539: PPOPN 1
71541: END
// export function hHackInvincible ; var i ; begin
71542: LD_INT 0
71544: PPUSH
71545: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71546: LD_ADDR_VAR 0 2
71550: PUSH
71551: LD_INT 2
71553: PUSH
71554: LD_INT 21
71556: PUSH
71557: LD_INT 1
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 21
71566: PUSH
71567: LD_INT 2
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: LIST
71578: PPUSH
71579: CALL_OW 69
71583: PUSH
71584: FOR_IN
71585: IFFALSE 71646
// if IsSelected ( i ) then
71587: LD_VAR 0 2
71591: PPUSH
71592: CALL_OW 306
71596: IFFALSE 71644
// begin if i in hInvincible then
71598: LD_VAR 0 2
71602: PUSH
71603: LD_EXP 98
71607: IN
71608: IFFALSE 71628
// hInvincible := hInvincible diff i else
71610: LD_ADDR_EXP 98
71614: PUSH
71615: LD_EXP 98
71619: PUSH
71620: LD_VAR 0 2
71624: DIFF
71625: ST_TO_ADDR
71626: GO 71644
// hInvincible := hInvincible union i ;
71628: LD_ADDR_EXP 98
71632: PUSH
71633: LD_EXP 98
71637: PUSH
71638: LD_VAR 0 2
71642: UNION
71643: ST_TO_ADDR
// end ;
71644: GO 71584
71646: POP
71647: POP
// end ;
71648: LD_VAR 0 1
71652: RET
// export function hHackInvisible ; var i , j ; begin
71653: LD_INT 0
71655: PPUSH
71656: PPUSH
71657: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71658: LD_ADDR_VAR 0 2
71662: PUSH
71663: LD_INT 21
71665: PUSH
71666: LD_INT 1
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PPUSH
71673: CALL_OW 69
71677: PUSH
71678: FOR_IN
71679: IFFALSE 71703
// if IsSelected ( i ) then
71681: LD_VAR 0 2
71685: PPUSH
71686: CALL_OW 306
71690: IFFALSE 71701
// ComForceInvisible ( i ) ;
71692: LD_VAR 0 2
71696: PPUSH
71697: CALL_OW 496
71701: GO 71678
71703: POP
71704: POP
// end ;
71705: LD_VAR 0 1
71709: RET
// export function hHackChangeYourSide ; begin
71710: LD_INT 0
71712: PPUSH
// if your_side = 8 then
71713: LD_OWVAR 2
71717: PUSH
71718: LD_INT 8
71720: EQUAL
71721: IFFALSE 71733
// your_side := 0 else
71723: LD_ADDR_OWVAR 2
71727: PUSH
71728: LD_INT 0
71730: ST_TO_ADDR
71731: GO 71747
// your_side := your_side + 1 ;
71733: LD_ADDR_OWVAR 2
71737: PUSH
71738: LD_OWVAR 2
71742: PUSH
71743: LD_INT 1
71745: PLUS
71746: ST_TO_ADDR
// end ;
71747: LD_VAR 0 1
71751: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71752: LD_INT 0
71754: PPUSH
71755: PPUSH
71756: PPUSH
// for i in all_units do
71757: LD_ADDR_VAR 0 2
71761: PUSH
71762: LD_OWVAR 3
71766: PUSH
71767: FOR_IN
71768: IFFALSE 71846
// if IsSelected ( i ) then
71770: LD_VAR 0 2
71774: PPUSH
71775: CALL_OW 306
71779: IFFALSE 71844
// begin j := GetSide ( i ) ;
71781: LD_ADDR_VAR 0 3
71785: PUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: CALL_OW 255
71795: ST_TO_ADDR
// if j = 8 then
71796: LD_VAR 0 3
71800: PUSH
71801: LD_INT 8
71803: EQUAL
71804: IFFALSE 71816
// j := 0 else
71806: LD_ADDR_VAR 0 3
71810: PUSH
71811: LD_INT 0
71813: ST_TO_ADDR
71814: GO 71830
// j := j + 1 ;
71816: LD_ADDR_VAR 0 3
71820: PUSH
71821: LD_VAR 0 3
71825: PUSH
71826: LD_INT 1
71828: PLUS
71829: ST_TO_ADDR
// SetSide ( i , j ) ;
71830: LD_VAR 0 2
71834: PPUSH
71835: LD_VAR 0 3
71839: PPUSH
71840: CALL_OW 235
// end ;
71844: GO 71767
71846: POP
71847: POP
// end ;
71848: LD_VAR 0 1
71852: RET
// export function hHackFog ; begin
71853: LD_INT 0
71855: PPUSH
// FogOff ( true ) ;
71856: LD_INT 1
71858: PPUSH
71859: CALL_OW 344
// end ;
71863: LD_VAR 0 1
71867: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71868: LD_INT 0
71870: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71871: LD_VAR 0 1
71875: PPUSH
71876: LD_VAR 0 2
71880: PPUSH
71881: LD_VAR 0 3
71885: PPUSH
71886: LD_INT 1
71888: PPUSH
71889: LD_INT 1
71891: PPUSH
71892: CALL_OW 483
// CenterOnXY ( x , y ) ;
71896: LD_VAR 0 2
71900: PPUSH
71901: LD_VAR 0 3
71905: PPUSH
71906: CALL_OW 84
// end ; end_of_file
71910: LD_VAR 0 4
71914: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71915: LD_VAR 0 1
71919: PPUSH
71920: LD_VAR 0 2
71924: PPUSH
71925: LD_VAR 0 3
71929: PPUSH
71930: LD_VAR 0 4
71934: PPUSH
71935: LD_VAR 0 5
71939: PPUSH
71940: LD_VAR 0 6
71944: PPUSH
71945: CALL 58743 0 6
// end ; end_of_file end_of_file
71949: PPOPN 6
71951: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
71952: LD_INT 0
71954: PPUSH
// ar_miner := 81 ;
71955: LD_ADDR_EXP 106
71959: PUSH
71960: LD_INT 81
71962: ST_TO_ADDR
// ar_crane := 88 ;
71963: LD_ADDR_EXP 105
71967: PUSH
71968: LD_INT 88
71970: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71971: LD_ADDR_EXP 100
71975: PUSH
71976: LD_INT 89
71978: ST_TO_ADDR
// us_hack := 99 ;
71979: LD_ADDR_EXP 101
71983: PUSH
71984: LD_INT 99
71986: ST_TO_ADDR
// us_artillery := 97 ;
71987: LD_ADDR_EXP 102
71991: PUSH
71992: LD_INT 97
71994: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71995: LD_ADDR_EXP 103
71999: PUSH
72000: LD_INT 91
72002: ST_TO_ADDR
// ar_mortar := 92 ;
72003: LD_ADDR_EXP 104
72007: PUSH
72008: LD_INT 92
72010: ST_TO_ADDR
// ru_radar := 98 ;
72011: LD_ADDR_EXP 99
72015: PUSH
72016: LD_INT 98
72018: ST_TO_ADDR
// tech_Artillery := 80 ;
72019: LD_ADDR_EXP 107
72023: PUSH
72024: LD_INT 80
72026: ST_TO_ADDR
// tech_RadMat := 81 ;
72027: LD_ADDR_EXP 108
72031: PUSH
72032: LD_INT 81
72034: ST_TO_ADDR
// tech_BasicTools := 82 ;
72035: LD_ADDR_EXP 109
72039: PUSH
72040: LD_INT 82
72042: ST_TO_ADDR
// tech_Cargo := 83 ;
72043: LD_ADDR_EXP 110
72047: PUSH
72048: LD_INT 83
72050: ST_TO_ADDR
// tech_Track := 84 ;
72051: LD_ADDR_EXP 111
72055: PUSH
72056: LD_INT 84
72058: ST_TO_ADDR
// tech_Crane := 85 ;
72059: LD_ADDR_EXP 112
72063: PUSH
72064: LD_INT 85
72066: ST_TO_ADDR
// tech_Bulldozer := 86 ;
72067: LD_ADDR_EXP 113
72071: PUSH
72072: LD_INT 86
72074: ST_TO_ADDR
// tech_Hovercraft := 87 ;
72075: LD_ADDR_EXP 114
72079: PUSH
72080: LD_INT 87
72082: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
72083: LD_ADDR_EXP 115
72087: PUSH
72088: LD_INT 88
72090: ST_TO_ADDR
// class_mastodont := 31 ;
72091: LD_ADDR_EXP 116
72095: PUSH
72096: LD_INT 31
72098: ST_TO_ADDR
// class_horse := 21 ;
72099: LD_ADDR_EXP 117
72103: PUSH
72104: LD_INT 21
72106: ST_TO_ADDR
// end ;
72107: LD_VAR 0 1
72111: RET
// every 1 do
72112: GO 72114
72114: DISABLE
// InitGlobalVariables ;
72115: CALL 71952 0 0
72119: END
